
RCFW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ca4  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006fc  08007e88  08007e88  00017e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008584  08008584  00020098  2**0
                  CONTENTS
  4 .ARM          00000000  08008584  08008584  00020098  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008584  08008584  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008584  08008584  00018584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008588  08008588  00018588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  0800858c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000470  20000098  08008624  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000508  08008624  00020508  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017a9e  00000000  00000000  000200c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000378d  00000000  00000000  00037b5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001220  00000000  00000000  0003b2f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001098  00000000  00000000  0003c510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dee6  00000000  00000000  0003d5a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001661c  00000000  00000000  0005b48e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a4f63  00000000  00000000  00071aaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00116a0d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052e8  00000000  00000000  00116a60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000098 	.word	0x20000098
 8000200:	00000000 	.word	0x00000000
 8000204:	08007e70 	.word	0x08007e70

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	2000009c 	.word	0x2000009c
 8000220:	08007e70 	.word	0x08007e70

08000224 <__aeabi_fmul>:
 8000224:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000228:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800022c:	bf1e      	ittt	ne
 800022e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000232:	ea92 0f0c 	teqne	r2, ip
 8000236:	ea93 0f0c 	teqne	r3, ip
 800023a:	d06f      	beq.n	800031c <__aeabi_fmul+0xf8>
 800023c:	441a      	add	r2, r3
 800023e:	ea80 0c01 	eor.w	ip, r0, r1
 8000242:	0240      	lsls	r0, r0, #9
 8000244:	bf18      	it	ne
 8000246:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800024a:	d01e      	beq.n	800028a <__aeabi_fmul+0x66>
 800024c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000250:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000254:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000258:	fba0 3101 	umull	r3, r1, r0, r1
 800025c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000260:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000264:	bf3e      	ittt	cc
 8000266:	0049      	lslcc	r1, r1, #1
 8000268:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 800026c:	005b      	lslcc	r3, r3, #1
 800026e:	ea40 0001 	orr.w	r0, r0, r1
 8000272:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000276:	2afd      	cmp	r2, #253	; 0xfd
 8000278:	d81d      	bhi.n	80002b6 <__aeabi_fmul+0x92>
 800027a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800027e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000282:	bf08      	it	eq
 8000284:	f020 0001 	biceq.w	r0, r0, #1
 8000288:	4770      	bx	lr
 800028a:	f090 0f00 	teq	r0, #0
 800028e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000292:	bf08      	it	eq
 8000294:	0249      	lsleq	r1, r1, #9
 8000296:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800029a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800029e:	3a7f      	subs	r2, #127	; 0x7f
 80002a0:	bfc2      	ittt	gt
 80002a2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80002a6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80002aa:	4770      	bxgt	lr
 80002ac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002b0:	f04f 0300 	mov.w	r3, #0
 80002b4:	3a01      	subs	r2, #1
 80002b6:	dc5d      	bgt.n	8000374 <__aeabi_fmul+0x150>
 80002b8:	f112 0f19 	cmn.w	r2, #25
 80002bc:	bfdc      	itt	le
 80002be:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80002c2:	4770      	bxle	lr
 80002c4:	f1c2 0200 	rsb	r2, r2, #0
 80002c8:	0041      	lsls	r1, r0, #1
 80002ca:	fa21 f102 	lsr.w	r1, r1, r2
 80002ce:	f1c2 0220 	rsb	r2, r2, #32
 80002d2:	fa00 fc02 	lsl.w	ip, r0, r2
 80002d6:	ea5f 0031 	movs.w	r0, r1, rrx
 80002da:	f140 0000 	adc.w	r0, r0, #0
 80002de:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80002e2:	bf08      	it	eq
 80002e4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80002e8:	4770      	bx	lr
 80002ea:	f092 0f00 	teq	r2, #0
 80002ee:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80002f2:	bf02      	ittt	eq
 80002f4:	0040      	lsleq	r0, r0, #1
 80002f6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80002fa:	3a01      	subeq	r2, #1
 80002fc:	d0f9      	beq.n	80002f2 <__aeabi_fmul+0xce>
 80002fe:	ea40 000c 	orr.w	r0, r0, ip
 8000302:	f093 0f00 	teq	r3, #0
 8000306:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800030a:	bf02      	ittt	eq
 800030c:	0049      	lsleq	r1, r1, #1
 800030e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000312:	3b01      	subeq	r3, #1
 8000314:	d0f9      	beq.n	800030a <__aeabi_fmul+0xe6>
 8000316:	ea41 010c 	orr.w	r1, r1, ip
 800031a:	e78f      	b.n	800023c <__aeabi_fmul+0x18>
 800031c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000320:	ea92 0f0c 	teq	r2, ip
 8000324:	bf18      	it	ne
 8000326:	ea93 0f0c 	teqne	r3, ip
 800032a:	d00a      	beq.n	8000342 <__aeabi_fmul+0x11e>
 800032c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000330:	bf18      	it	ne
 8000332:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000336:	d1d8      	bne.n	80002ea <__aeabi_fmul+0xc6>
 8000338:	ea80 0001 	eor.w	r0, r0, r1
 800033c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000340:	4770      	bx	lr
 8000342:	f090 0f00 	teq	r0, #0
 8000346:	bf17      	itett	ne
 8000348:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 800034c:	4608      	moveq	r0, r1
 800034e:	f091 0f00 	teqne	r1, #0
 8000352:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000356:	d014      	beq.n	8000382 <__aeabi_fmul+0x15e>
 8000358:	ea92 0f0c 	teq	r2, ip
 800035c:	d101      	bne.n	8000362 <__aeabi_fmul+0x13e>
 800035e:	0242      	lsls	r2, r0, #9
 8000360:	d10f      	bne.n	8000382 <__aeabi_fmul+0x15e>
 8000362:	ea93 0f0c 	teq	r3, ip
 8000366:	d103      	bne.n	8000370 <__aeabi_fmul+0x14c>
 8000368:	024b      	lsls	r3, r1, #9
 800036a:	bf18      	it	ne
 800036c:	4608      	movne	r0, r1
 800036e:	d108      	bne.n	8000382 <__aeabi_fmul+0x15e>
 8000370:	ea80 0001 	eor.w	r0, r0, r1
 8000374:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000378:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800037c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000380:	4770      	bx	lr
 8000382:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000386:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800038a:	4770      	bx	lr

0800038c <__aeabi_frsub>:
 800038c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000390:	e002      	b.n	8000398 <__addsf3>
 8000392:	bf00      	nop

08000394 <__aeabi_fsub>:
 8000394:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000398 <__addsf3>:
 8000398:	0042      	lsls	r2, r0, #1
 800039a:	bf1f      	itttt	ne
 800039c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80003a0:	ea92 0f03 	teqne	r2, r3
 80003a4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80003a8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003ac:	d06a      	beq.n	8000484 <__addsf3+0xec>
 80003ae:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80003b2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80003b6:	bfc1      	itttt	gt
 80003b8:	18d2      	addgt	r2, r2, r3
 80003ba:	4041      	eorgt	r1, r0
 80003bc:	4048      	eorgt	r0, r1
 80003be:	4041      	eorgt	r1, r0
 80003c0:	bfb8      	it	lt
 80003c2:	425b      	neglt	r3, r3
 80003c4:	2b19      	cmp	r3, #25
 80003c6:	bf88      	it	hi
 80003c8:	4770      	bxhi	lr
 80003ca:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80003ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80003d6:	bf18      	it	ne
 80003d8:	4240      	negne	r0, r0
 80003da:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003de:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80003e2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80003e6:	bf18      	it	ne
 80003e8:	4249      	negne	r1, r1
 80003ea:	ea92 0f03 	teq	r2, r3
 80003ee:	d03f      	beq.n	8000470 <__addsf3+0xd8>
 80003f0:	f1a2 0201 	sub.w	r2, r2, #1
 80003f4:	fa41 fc03 	asr.w	ip, r1, r3
 80003f8:	eb10 000c 	adds.w	r0, r0, ip
 80003fc:	f1c3 0320 	rsb	r3, r3, #32
 8000400:	fa01 f103 	lsl.w	r1, r1, r3
 8000404:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000408:	d502      	bpl.n	8000410 <__addsf3+0x78>
 800040a:	4249      	negs	r1, r1
 800040c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000410:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000414:	d313      	bcc.n	800043e <__addsf3+0xa6>
 8000416:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800041a:	d306      	bcc.n	800042a <__addsf3+0x92>
 800041c:	0840      	lsrs	r0, r0, #1
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	f102 0201 	add.w	r2, r2, #1
 8000426:	2afe      	cmp	r2, #254	; 0xfe
 8000428:	d251      	bcs.n	80004ce <__addsf3+0x136>
 800042a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800042e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000432:	bf08      	it	eq
 8000434:	f020 0001 	biceq.w	r0, r0, #1
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	4770      	bx	lr
 800043e:	0049      	lsls	r1, r1, #1
 8000440:	eb40 0000 	adc.w	r0, r0, r0
 8000444:	3a01      	subs	r2, #1
 8000446:	bf28      	it	cs
 8000448:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800044c:	d2ed      	bcs.n	800042a <__addsf3+0x92>
 800044e:	fab0 fc80 	clz	ip, r0
 8000452:	f1ac 0c08 	sub.w	ip, ip, #8
 8000456:	ebb2 020c 	subs.w	r2, r2, ip
 800045a:	fa00 f00c 	lsl.w	r0, r0, ip
 800045e:	bfaa      	itet	ge
 8000460:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000464:	4252      	neglt	r2, r2
 8000466:	4318      	orrge	r0, r3
 8000468:	bfbc      	itt	lt
 800046a:	40d0      	lsrlt	r0, r2
 800046c:	4318      	orrlt	r0, r3
 800046e:	4770      	bx	lr
 8000470:	f092 0f00 	teq	r2, #0
 8000474:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000478:	bf06      	itte	eq
 800047a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800047e:	3201      	addeq	r2, #1
 8000480:	3b01      	subne	r3, #1
 8000482:	e7b5      	b.n	80003f0 <__addsf3+0x58>
 8000484:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000488:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800048c:	bf18      	it	ne
 800048e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000492:	d021      	beq.n	80004d8 <__addsf3+0x140>
 8000494:	ea92 0f03 	teq	r2, r3
 8000498:	d004      	beq.n	80004a4 <__addsf3+0x10c>
 800049a:	f092 0f00 	teq	r2, #0
 800049e:	bf08      	it	eq
 80004a0:	4608      	moveq	r0, r1
 80004a2:	4770      	bx	lr
 80004a4:	ea90 0f01 	teq	r0, r1
 80004a8:	bf1c      	itt	ne
 80004aa:	2000      	movne	r0, #0
 80004ac:	4770      	bxne	lr
 80004ae:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80004b2:	d104      	bne.n	80004be <__addsf3+0x126>
 80004b4:	0040      	lsls	r0, r0, #1
 80004b6:	bf28      	it	cs
 80004b8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	4770      	bx	lr
 80004be:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80004c2:	bf3c      	itt	cc
 80004c4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80004c8:	4770      	bxcc	lr
 80004ca:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80004ce:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80004d2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004d6:	4770      	bx	lr
 80004d8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80004dc:	bf16      	itet	ne
 80004de:	4608      	movne	r0, r1
 80004e0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80004e4:	4601      	movne	r1, r0
 80004e6:	0242      	lsls	r2, r0, #9
 80004e8:	bf06      	itte	eq
 80004ea:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80004ee:	ea90 0f01 	teqeq	r0, r1
 80004f2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80004f6:	4770      	bx	lr

080004f8 <__aeabi_ui2f>:
 80004f8:	f04f 0300 	mov.w	r3, #0
 80004fc:	e004      	b.n	8000508 <__aeabi_i2f+0x8>
 80004fe:	bf00      	nop

08000500 <__aeabi_i2f>:
 8000500:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000504:	bf48      	it	mi
 8000506:	4240      	negmi	r0, r0
 8000508:	ea5f 0c00 	movs.w	ip, r0
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000514:	4601      	mov	r1, r0
 8000516:	f04f 0000 	mov.w	r0, #0
 800051a:	e01c      	b.n	8000556 <__aeabi_l2f+0x2a>

0800051c <__aeabi_ul2f>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	f04f 0300 	mov.w	r3, #0
 8000528:	e00a      	b.n	8000540 <__aeabi_l2f+0x14>
 800052a:	bf00      	nop

0800052c <__aeabi_l2f>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000538:	d502      	bpl.n	8000540 <__aeabi_l2f+0x14>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	ea5f 0c01 	movs.w	ip, r1
 8000544:	bf02      	ittt	eq
 8000546:	4684      	moveq	ip, r0
 8000548:	4601      	moveq	r1, r0
 800054a:	2000      	moveq	r0, #0
 800054c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000550:	bf08      	it	eq
 8000552:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000556:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800055a:	fabc f28c 	clz	r2, ip
 800055e:	3a08      	subs	r2, #8
 8000560:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000564:	db10      	blt.n	8000588 <__aeabi_l2f+0x5c>
 8000566:	fa01 fc02 	lsl.w	ip, r1, r2
 800056a:	4463      	add	r3, ip
 800056c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000570:	f1c2 0220 	rsb	r2, r2, #32
 8000574:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000578:	fa20 f202 	lsr.w	r2, r0, r2
 800057c:	eb43 0002 	adc.w	r0, r3, r2
 8000580:	bf08      	it	eq
 8000582:	f020 0001 	biceq.w	r0, r0, #1
 8000586:	4770      	bx	lr
 8000588:	f102 0220 	add.w	r2, r2, #32
 800058c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000590:	f1c2 0220 	rsb	r2, r2, #32
 8000594:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000598:	fa21 f202 	lsr.w	r2, r1, r2
 800059c:	eb43 0002 	adc.w	r0, r3, r2
 80005a0:	bf08      	it	eq
 80005a2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80005a6:	4770      	bx	lr

080005a8 <__gesf2>:
 80005a8:	f04f 3cff 	mov.w	ip, #4294967295
 80005ac:	e006      	b.n	80005bc <__cmpsf2+0x4>
 80005ae:	bf00      	nop

080005b0 <__lesf2>:
 80005b0:	f04f 0c01 	mov.w	ip, #1
 80005b4:	e002      	b.n	80005bc <__cmpsf2+0x4>
 80005b6:	bf00      	nop

080005b8 <__cmpsf2>:
 80005b8:	f04f 0c01 	mov.w	ip, #1
 80005bc:	f84d cd04 	str.w	ip, [sp, #-4]!
 80005c0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80005c4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80005c8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80005cc:	bf18      	it	ne
 80005ce:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80005d2:	d011      	beq.n	80005f8 <__cmpsf2+0x40>
 80005d4:	b001      	add	sp, #4
 80005d6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80005da:	bf18      	it	ne
 80005dc:	ea90 0f01 	teqne	r0, r1
 80005e0:	bf58      	it	pl
 80005e2:	ebb2 0003 	subspl.w	r0, r2, r3
 80005e6:	bf88      	it	hi
 80005e8:	17c8      	asrhi	r0, r1, #31
 80005ea:	bf38      	it	cc
 80005ec:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80005f0:	bf18      	it	ne
 80005f2:	f040 0001 	orrne.w	r0, r0, #1
 80005f6:	4770      	bx	lr
 80005f8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80005fc:	d102      	bne.n	8000604 <__cmpsf2+0x4c>
 80005fe:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000602:	d105      	bne.n	8000610 <__cmpsf2+0x58>
 8000604:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000608:	d1e4      	bne.n	80005d4 <__cmpsf2+0x1c>
 800060a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800060e:	d0e1      	beq.n	80005d4 <__cmpsf2+0x1c>
 8000610:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop

08000618 <__aeabi_cfrcmple>:
 8000618:	4684      	mov	ip, r0
 800061a:	4608      	mov	r0, r1
 800061c:	4661      	mov	r1, ip
 800061e:	e7ff      	b.n	8000620 <__aeabi_cfcmpeq>

08000620 <__aeabi_cfcmpeq>:
 8000620:	b50f      	push	{r0, r1, r2, r3, lr}
 8000622:	f7ff ffc9 	bl	80005b8 <__cmpsf2>
 8000626:	2800      	cmp	r0, #0
 8000628:	bf48      	it	mi
 800062a:	f110 0f00 	cmnmi.w	r0, #0
 800062e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000630 <__aeabi_fcmpeq>:
 8000630:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000634:	f7ff fff4 	bl	8000620 <__aeabi_cfcmpeq>
 8000638:	bf0c      	ite	eq
 800063a:	2001      	moveq	r0, #1
 800063c:	2000      	movne	r0, #0
 800063e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000642:	bf00      	nop

08000644 <__aeabi_fcmplt>:
 8000644:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000648:	f7ff ffea 	bl	8000620 <__aeabi_cfcmpeq>
 800064c:	bf34      	ite	cc
 800064e:	2001      	movcc	r0, #1
 8000650:	2000      	movcs	r0, #0
 8000652:	f85d fb08 	ldr.w	pc, [sp], #8
 8000656:	bf00      	nop

08000658 <__aeabi_fcmple>:
 8000658:	f84d ed08 	str.w	lr, [sp, #-8]!
 800065c:	f7ff ffe0 	bl	8000620 <__aeabi_cfcmpeq>
 8000660:	bf94      	ite	ls
 8000662:	2001      	movls	r0, #1
 8000664:	2000      	movhi	r0, #0
 8000666:	f85d fb08 	ldr.w	pc, [sp], #8
 800066a:	bf00      	nop

0800066c <__aeabi_fcmpge>:
 800066c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000670:	f7ff ffd2 	bl	8000618 <__aeabi_cfrcmple>
 8000674:	bf94      	ite	ls
 8000676:	2001      	movls	r0, #1
 8000678:	2000      	movhi	r0, #0
 800067a:	f85d fb08 	ldr.w	pc, [sp], #8
 800067e:	bf00      	nop

08000680 <__aeabi_fcmpgt>:
 8000680:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000684:	f7ff ffc8 	bl	8000618 <__aeabi_cfrcmple>
 8000688:	bf34      	ite	cc
 800068a:	2001      	movcc	r0, #1
 800068c:	2000      	movcs	r0, #0
 800068e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000692:	bf00      	nop

08000694 <__aeabi_f2iz>:
 8000694:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000698:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800069c:	d30f      	bcc.n	80006be <__aeabi_f2iz+0x2a>
 800069e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80006a2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80006a6:	d90d      	bls.n	80006c4 <__aeabi_f2iz+0x30>
 80006a8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80006ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80006b0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80006b4:	fa23 f002 	lsr.w	r0, r3, r2
 80006b8:	bf18      	it	ne
 80006ba:	4240      	negne	r0, r0
 80006bc:	4770      	bx	lr
 80006be:	f04f 0000 	mov.w	r0, #0
 80006c2:	4770      	bx	lr
 80006c4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80006c8:	d101      	bne.n	80006ce <__aeabi_f2iz+0x3a>
 80006ca:	0242      	lsls	r2, r0, #9
 80006cc:	d105      	bne.n	80006da <__aeabi_f2iz+0x46>
 80006ce:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80006d2:	bf08      	it	eq
 80006d4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80006d8:	4770      	bx	lr
 80006da:	f04f 0000 	mov.w	r0, #0
 80006de:	4770      	bx	lr

080006e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b086      	sub	sp, #24
 80006e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006e6:	f000 ff39 	bl	800155c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ea:	f000 f881 	bl	80007f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ee:	f000 fb13 	bl	8000d18 <MX_GPIO_Init>
  MX_TIM1_Init();
 80006f2:	f000 f95d 	bl	80009b0 <MX_TIM1_Init>
  MX_TIM2_Init();
 80006f6:	f000 f9ab 	bl	8000a50 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80006fa:	f000 fab9 	bl	8000c70 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80006fe:	f000 fae1 	bl	8000cc4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000702:	f000 f8cd 	bl	80008a0 <MX_ADC1_Init>
  MX_TIM8_Init();
 8000706:	f000 f9ef 	bl	8000ae8 <MX_TIM8_Init>
  MX_RTC_Init();
 800070a:	f000 f907 	bl	800091c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* Setup console */
  CONSOLE_init(&huart1);
 800070e:	482d      	ldr	r0, [pc, #180]	; (80007c4 <main+0xe4>)
 8000710:	f005 fc84 	bl	800601c <CONSOLE_init>

  /* Display RCFW banner */
  MAIN_displayRcfwBanner();
 8000714:	f000 fbb2 	bl	8000e7c <MAIN_displayRcfwBanner>

  /* Setup and start using logs */
  LOG_init    (&hrtc          );
 8000718:	482b      	ldr	r0, [pc, #172]	; (80007c8 <main+0xe8>)
 800071a:	f006 fa0b 	bl	8006b34 <LOG_init>
  LOG_setLevel(LOG_LEVEL_DEBUG);
 800071e:	2000      	movs	r0, #0
 8000720:	f006 fa16 	bl	8006b50 <LOG_setLevel>
  LOG_info    ("Starting RCFW");
 8000724:	4929      	ldr	r1, [pc, #164]	; (80007cc <main+0xec>)
 8000726:	2001      	movs	r0, #1
 8000728:	f006 fa22 	bl	8006b70 <LOG_log>

  /* Initialize Timer 2 and delay function in utilities */
  HAL_TIM_Base_Start_IT(&htim2);
 800072c:	4828      	ldr	r0, [pc, #160]	; (80007d0 <main+0xf0>)
 800072e:	f003 fbf3 	bl	8003f18 <HAL_TIM_Base_Start_IT>
  UTILS_init           (&htim2);
 8000732:	4827      	ldr	r0, [pc, #156]	; (80007d0 <main+0xf0>)
 8000734:	f006 fb3c 	bl	8006db0 <UTILS_init>

  LOG_debug("Started TIMER 2");
 8000738:	4926      	ldr	r1, [pc, #152]	; (80007d4 <main+0xf4>)
 800073a:	2000      	movs	r0, #0
 800073c:	f006 fa18 	bl	8006b70 <LOG_log>

  /* Initialize Timer 1 and green LED */
  HAL_TIM_Base_Start_IT(&htim1);
 8000740:	4825      	ldr	r0, [pc, #148]	; (80007d8 <main+0xf8>)
 8000742:	f003 fbe9 	bl	8003f18 <HAL_TIM_Base_Start_IT>
  LED_setMode(LED_MODE_BLINK_SLOW);
 8000746:	2002      	movs	r0, #2
 8000748:	f006 f992 	bl	8006a70 <LED_setMode>

  LOG_debug("Started TIMER 1");
 800074c:	4923      	ldr	r1, [pc, #140]	; (80007dc <main+0xfc>)
 800074e:	2000      	movs	r0, #0
 8000750:	f006 fa0e 	bl	8006b70 <LOG_log>

  /* Initialize Timer 8 */
  HAL_TIM_Base_Start(&htim8);
 8000754:	4822      	ldr	r0, [pc, #136]	; (80007e0 <main+0x100>)
 8000756:	f003 fb87 	bl	8003e68 <HAL_TIM_Base_Start>

  LOG_debug("Started TIMER 8");
 800075a:	4922      	ldr	r1, [pc, #136]	; (80007e4 <main+0x104>)
 800075c:	2000      	movs	r0, #0
 800075e:	f006 fa07 	bl	8006b70 <LOG_log>

  /* Initialize battery monitor */
  BATTERY_CHECK_init(&hadc1, &hrtc);
 8000762:	4919      	ldr	r1, [pc, #100]	; (80007c8 <main+0xe8>)
 8000764:	4820      	ldr	r0, [pc, #128]	; (80007e8 <main+0x108>)
 8000766:	f005 fa15 	bl	8005b94 <BATTERY_CHECK_init>

  /* Initialize PWM channels */
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800076a:	2100      	movs	r1, #0
 800076c:	481c      	ldr	r0, [pc, #112]	; (80007e0 <main+0x100>)
 800076e:	f003 fc99 	bl	80040a4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8000772:	2104      	movs	r1, #4
 8000774:	481a      	ldr	r0, [pc, #104]	; (80007e0 <main+0x100>)
 8000776:	f003 fc95 	bl	80040a4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 800077a:	2108      	movs	r1, #8
 800077c:	4818      	ldr	r0, [pc, #96]	; (80007e0 <main+0x100>)
 800077e:	f003 fc91 	bl	80040a4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8000782:	210c      	movs	r1, #12
 8000784:	4816      	ldr	r0, [pc, #88]	; (80007e0 <main+0x100>)
 8000786:	f003 fc8d 	bl	80040a4 <HAL_TIM_PWM_Start>

  LOG_debug("Started PWM channels");
 800078a:	4918      	ldr	r1, [pc, #96]	; (80007ec <main+0x10c>)
 800078c:	2000      	movs	r0, #0
 800078e:	f006 f9ef 	bl	8006b70 <LOG_log>

  /* Initialize driving module */
  DRIVE_init(&htim8);
 8000792:	4813      	ldr	r0, [pc, #76]	; (80007e0 <main+0x100>)
 8000794:	f005 fc66 	bl	8006064 <DRIVE_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    BATTERY_CHECK_update         (              );
 8000798:	f005 fa30 	bl	8005bfc <BATTERY_CHECK_update>
    CONSOLE_receiveData          (              );
 800079c:	f005 fc52 	bl	8006044 <CONSOLE_receiveData>
    BLUETOOTH_CONTROL_receiveData(&bluetoothData);
 80007a0:	1d3b      	adds	r3, r7, #4
 80007a2:	4618      	mov	r0, r3
 80007a4:	f005 fbb2 	bl	8005f0c <BLUETOOTH_CONTROL_receiveData>
    DRIVE_update                 (&bluetoothData);
 80007a8:	1d3b      	adds	r3, r7, #4
 80007aa:	4618      	mov	r0, r3
 80007ac:	f005 fcf2 	bl	8006194 <DRIVE_update>
    MAIN_updateLedMode           (&bluetoothData);
 80007b0:	1d3b      	adds	r3, r7, #4
 80007b2:	4618      	mov	r0, r3
 80007b4:	f000 fb96 	bl	8000ee4 <MAIN_updateLedMode>
    UTILS_delayUs                (10000         );
 80007b8:	f242 7010 	movw	r0, #10000	; 0x2710
 80007bc:	f006 fb0c 	bl	8006dd8 <UTILS_delayUs>
    BATTERY_CHECK_update         (              );
 80007c0:	e7ea      	b.n	8000798 <main+0xb8>
 80007c2:	bf00      	nop
 80007c4:	20000290 	.word	0x20000290
 80007c8:	20000304 	.word	0x20000304
 80007cc:	08007e88 	.word	0x08007e88
 80007d0:	200003cc 	.word	0x200003cc
 80007d4:	08007e98 	.word	0x08007e98
 80007d8:	20000318 	.word	0x20000318
 80007dc:	08007ea8 	.word	0x08007ea8
 80007e0:	200001ac 	.word	0x200001ac
 80007e4:	08007eb8 	.word	0x08007eb8
 80007e8:	20000260 	.word	0x20000260
 80007ec:	08007ec8 	.word	0x08007ec8

080007f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b096      	sub	sp, #88	; 0x58
 80007f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007fa:	2228      	movs	r2, #40	; 0x28
 80007fc:	2100      	movs	r1, #0
 80007fe:	4618      	mov	r0, r3
 8000800:	f006 fb2e 	bl	8006e60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000804:	f107 031c 	add.w	r3, r7, #28
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]
 8000810:	60da      	str	r2, [r3, #12]
 8000812:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000814:	1d3b      	adds	r3, r7, #4
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]
 800081c:	609a      	str	r2, [r3, #8]
 800081e:	60da      	str	r2, [r3, #12]
 8000820:	611a      	str	r2, [r3, #16]
 8000822:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000824:	230a      	movs	r3, #10
 8000826:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000828:	2301      	movs	r3, #1
 800082a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800082c:	2310      	movs	r3, #16
 800082e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000830:	2301      	movs	r3, #1
 8000832:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000834:	2300      	movs	r3, #0
 8000836:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000838:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800083c:	4618      	mov	r0, r3
 800083e:	f001 ff4f 	bl	80026e0 <HAL_RCC_OscConfig>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000848:	f000 fbaa 	bl	8000fa0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800084c:	230f      	movs	r3, #15
 800084e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000850:	2300      	movs	r3, #0
 8000852:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000854:	2300      	movs	r3, #0
 8000856:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000858:	2300      	movs	r3, #0
 800085a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800085c:	2300      	movs	r3, #0
 800085e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000860:	f107 031c 	add.w	r3, r7, #28
 8000864:	2100      	movs	r1, #0
 8000866:	4618      	mov	r0, r3
 8000868:	f002 f9ba 	bl	8002be0 <HAL_RCC_ClockConfig>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000872:	f000 fb95 	bl	8000fa0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 8000876:	2303      	movs	r3, #3
 8000878:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800087a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800087e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000880:	2300      	movs	r3, #0
 8000882:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000884:	1d3b      	adds	r3, r7, #4
 8000886:	4618      	mov	r0, r3
 8000888:	f002 fb44 	bl	8002f14 <HAL_RCCEx_PeriphCLKConfig>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000892:	f000 fb85 	bl	8000fa0 <Error_Handler>
  }
}
 8000896:	bf00      	nop
 8000898:	3758      	adds	r7, #88	; 0x58
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
	...

080008a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b084      	sub	sp, #16
 80008a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008a6:	1d3b      	adds	r3, r7, #4
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
 80008ae:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80008b0:	4b18      	ldr	r3, [pc, #96]	; (8000914 <MX_ADC1_Init+0x74>)
 80008b2:	4a19      	ldr	r2, [pc, #100]	; (8000918 <MX_ADC1_Init+0x78>)
 80008b4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008b6:	4b17      	ldr	r3, [pc, #92]	; (8000914 <MX_ADC1_Init+0x74>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008bc:	4b15      	ldr	r3, [pc, #84]	; (8000914 <MX_ADC1_Init+0x74>)
 80008be:	2200      	movs	r2, #0
 80008c0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008c2:	4b14      	ldr	r3, [pc, #80]	; (8000914 <MX_ADC1_Init+0x74>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008c8:	4b12      	ldr	r3, [pc, #72]	; (8000914 <MX_ADC1_Init+0x74>)
 80008ca:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80008ce:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008d0:	4b10      	ldr	r3, [pc, #64]	; (8000914 <MX_ADC1_Init+0x74>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80008d6:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <MX_ADC1_Init+0x74>)
 80008d8:	2201      	movs	r2, #1
 80008da:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008dc:	480d      	ldr	r0, [pc, #52]	; (8000914 <MX_ADC1_Init+0x74>)
 80008de:	f000 fe9f 	bl	8001620 <HAL_ADC_Init>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80008e8:	f000 fb5a 	bl	8000fa0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80008ec:	2305      	movs	r3, #5
 80008ee:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008f0:	2301      	movs	r3, #1
 80008f2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80008f4:	2300      	movs	r3, #0
 80008f6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008f8:	1d3b      	adds	r3, r7, #4
 80008fa:	4619      	mov	r1, r3
 80008fc:	4805      	ldr	r0, [pc, #20]	; (8000914 <MX_ADC1_Init+0x74>)
 80008fe:	f001 f939 	bl	8001b74 <HAL_ADC_ConfigChannel>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000908:	f000 fb4a 	bl	8000fa0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800090c:	bf00      	nop
 800090e:	3710      	adds	r7, #16
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	20000260 	.word	0x20000260
 8000918:	40012400 	.word	0x40012400

0800091c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000922:	1d3b      	adds	r3, r7, #4
 8000924:	2100      	movs	r1, #0
 8000926:	460a      	mov	r2, r1
 8000928:	801a      	strh	r2, [r3, #0]
 800092a:	460a      	mov	r2, r1
 800092c:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 800092e:	2300      	movs	r3, #0
 8000930:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000932:	4b1d      	ldr	r3, [pc, #116]	; (80009a8 <MX_RTC_Init+0x8c>)
 8000934:	4a1d      	ldr	r2, [pc, #116]	; (80009ac <MX_RTC_Init+0x90>)
 8000936:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000938:	4b1b      	ldr	r3, [pc, #108]	; (80009a8 <MX_RTC_Init+0x8c>)
 800093a:	f04f 32ff 	mov.w	r2, #4294967295
 800093e:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 8000940:	4b19      	ldr	r3, [pc, #100]	; (80009a8 <MX_RTC_Init+0x8c>)
 8000942:	2200      	movs	r2, #0
 8000944:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000946:	4818      	ldr	r0, [pc, #96]	; (80009a8 <MX_RTC_Init+0x8c>)
 8000948:	f002 fc80 	bl	800324c <HAL_RTC_Init>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_RTC_Init+0x3a>
  {
    Error_Handler();
 8000952:	f000 fb25 	bl	8000fa0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000956:	2300      	movs	r3, #0
 8000958:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800095a:	2300      	movs	r3, #0
 800095c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800095e:	2300      	movs	r3, #0
 8000960:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000962:	1d3b      	adds	r3, r7, #4
 8000964:	2201      	movs	r2, #1
 8000966:	4619      	mov	r1, r3
 8000968:	480f      	ldr	r0, [pc, #60]	; (80009a8 <MX_RTC_Init+0x8c>)
 800096a:	f002 fd05 	bl	8003378 <HAL_RTC_SetTime>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_RTC_Init+0x5c>
  {
    Error_Handler();
 8000974:	f000 fb14 	bl	8000fa0 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000978:	2301      	movs	r3, #1
 800097a:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 800097c:	2301      	movs	r3, #1
 800097e:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 8000980:	2301      	movs	r3, #1
 8000982:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 8000984:	2300      	movs	r3, #0
 8000986:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8000988:	463b      	mov	r3, r7
 800098a:	2201      	movs	r2, #1
 800098c:	4619      	mov	r1, r3
 800098e:	4806      	ldr	r0, [pc, #24]	; (80009a8 <MX_RTC_Init+0x8c>)
 8000990:	f002 fe62 	bl	8003658 <HAL_RTC_SetDate>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_RTC_Init+0x82>
  {
    Error_Handler();
 800099a:	f000 fb01 	bl	8000fa0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800099e:	bf00      	nop
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	20000304 	.word	0x20000304
 80009ac:	40002800 	.word	0x40002800

080009b0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b086      	sub	sp, #24
 80009b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009b6:	f107 0308 	add.w	r3, r7, #8
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
 80009be:	605a      	str	r2, [r3, #4]
 80009c0:	609a      	str	r2, [r3, #8]
 80009c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009c4:	463b      	mov	r3, r7
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009cc:	4b1e      	ldr	r3, [pc, #120]	; (8000a48 <MX_TIM1_Init+0x98>)
 80009ce:	4a1f      	ldr	r2, [pc, #124]	; (8000a4c <MX_TIM1_Init+0x9c>)
 80009d0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7999;
 80009d2:	4b1d      	ldr	r3, [pc, #116]	; (8000a48 <MX_TIM1_Init+0x98>)
 80009d4:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80009d8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009da:	4b1b      	ldr	r3, [pc, #108]	; (8000a48 <MX_TIM1_Init+0x98>)
 80009dc:	2200      	movs	r2, #0
 80009de:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 249;
 80009e0:	4b19      	ldr	r3, [pc, #100]	; (8000a48 <MX_TIM1_Init+0x98>)
 80009e2:	22f9      	movs	r2, #249	; 0xf9
 80009e4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009e6:	4b18      	ldr	r3, [pc, #96]	; (8000a48 <MX_TIM1_Init+0x98>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009ec:	4b16      	ldr	r3, [pc, #88]	; (8000a48 <MX_TIM1_Init+0x98>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80009f2:	4b15      	ldr	r3, [pc, #84]	; (8000a48 <MX_TIM1_Init+0x98>)
 80009f4:	2280      	movs	r2, #128	; 0x80
 80009f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009f8:	4813      	ldr	r0, [pc, #76]	; (8000a48 <MX_TIM1_Init+0x98>)
 80009fa:	f003 f9d9 	bl	8003db0 <HAL_TIM_Base_Init>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000a04:	f000 facc 	bl	8000fa0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a0c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a0e:	f107 0308 	add.w	r3, r7, #8
 8000a12:	4619      	mov	r1, r3
 8000a14:	480c      	ldr	r0, [pc, #48]	; (8000a48 <MX_TIM1_Init+0x98>)
 8000a16:	f003 fde5 	bl	80045e4 <HAL_TIM_ConfigClockSource>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000a20:	f000 fabe 	bl	8000fa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a24:	2300      	movs	r3, #0
 8000a26:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a2c:	463b      	mov	r3, r7
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4805      	ldr	r0, [pc, #20]	; (8000a48 <MX_TIM1_Init+0x98>)
 8000a32:	f004 fa25 	bl	8004e80 <HAL_TIMEx_MasterConfigSynchronization>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000a3c:	f000 fab0 	bl	8000fa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000a40:	bf00      	nop
 8000a42:	3718      	adds	r7, #24
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	20000318 	.word	0x20000318
 8000a4c:	40012c00 	.word	0x40012c00

08000a50 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b086      	sub	sp, #24
 8000a54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a56:	f107 0308 	add.w	r3, r7, #8
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	601a      	str	r2, [r3, #0]
 8000a5e:	605a      	str	r2, [r3, #4]
 8000a60:	609a      	str	r2, [r3, #8]
 8000a62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a64:	463b      	mov	r3, r7
 8000a66:	2200      	movs	r2, #0
 8000a68:	601a      	str	r2, [r3, #0]
 8000a6a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a6c:	4b1d      	ldr	r3, [pc, #116]	; (8000ae4 <MX_TIM2_Init+0x94>)
 8000a6e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a72:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 8000a74:	4b1b      	ldr	r3, [pc, #108]	; (8000ae4 <MX_TIM2_Init+0x94>)
 8000a76:	2207      	movs	r2, #7
 8000a78:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a7a:	4b1a      	ldr	r3, [pc, #104]	; (8000ae4 <MX_TIM2_Init+0x94>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000a80:	4b18      	ldr	r3, [pc, #96]	; (8000ae4 <MX_TIM2_Init+0x94>)
 8000a82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a86:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a88:	4b16      	ldr	r3, [pc, #88]	; (8000ae4 <MX_TIM2_Init+0x94>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a8e:	4b15      	ldr	r3, [pc, #84]	; (8000ae4 <MX_TIM2_Init+0x94>)
 8000a90:	2280      	movs	r2, #128	; 0x80
 8000a92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a94:	4813      	ldr	r0, [pc, #76]	; (8000ae4 <MX_TIM2_Init+0x94>)
 8000a96:	f003 f98b 	bl	8003db0 <HAL_TIM_Base_Init>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000aa0:	f000 fa7e 	bl	8000fa0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000aa4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aa8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000aaa:	f107 0308 	add.w	r3, r7, #8
 8000aae:	4619      	mov	r1, r3
 8000ab0:	480c      	ldr	r0, [pc, #48]	; (8000ae4 <MX_TIM2_Init+0x94>)
 8000ab2:	f003 fd97 	bl	80045e4 <HAL_TIM_ConfigClockSource>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000abc:	f000 fa70 	bl	8000fa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ac8:	463b      	mov	r3, r7
 8000aca:	4619      	mov	r1, r3
 8000acc:	4805      	ldr	r0, [pc, #20]	; (8000ae4 <MX_TIM2_Init+0x94>)
 8000ace:	f004 f9d7 	bl	8004e80 <HAL_TIMEx_MasterConfigSynchronization>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000ad8:	f000 fa62 	bl	8000fa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000adc:	bf00      	nop
 8000ade:	3718      	adds	r7, #24
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	200003cc 	.word	0x200003cc

08000ae8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b096      	sub	sp, #88	; 0x58
 8000aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000af2:	2200      	movs	r2, #0
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	605a      	str	r2, [r3, #4]
 8000af8:	609a      	str	r2, [r3, #8]
 8000afa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000afc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	601a      	str	r2, [r3, #0]
 8000b0e:	605a      	str	r2, [r3, #4]
 8000b10:	609a      	str	r2, [r3, #8]
 8000b12:	60da      	str	r2, [r3, #12]
 8000b14:	611a      	str	r2, [r3, #16]
 8000b16:	615a      	str	r2, [r3, #20]
 8000b18:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b1a:	1d3b      	adds	r3, r7, #4
 8000b1c:	2220      	movs	r2, #32
 8000b1e:	2100      	movs	r1, #0
 8000b20:	4618      	mov	r0, r3
 8000b22:	f006 f99d 	bl	8006e60 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000b26:	4b50      	ldr	r3, [pc, #320]	; (8000c68 <MX_TIM8_Init+0x180>)
 8000b28:	4a50      	ldr	r2, [pc, #320]	; (8000c6c <MX_TIM8_Init+0x184>)
 8000b2a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 7;
 8000b2c:	4b4e      	ldr	r3, [pc, #312]	; (8000c68 <MX_TIM8_Init+0x180>)
 8000b2e:	2207      	movs	r2, #7
 8000b30:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b32:	4b4d      	ldr	r3, [pc, #308]	; (8000c68 <MX_TIM8_Init+0x180>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 100;
 8000b38:	4b4b      	ldr	r3, [pc, #300]	; (8000c68 <MX_TIM8_Init+0x180>)
 8000b3a:	2264      	movs	r2, #100	; 0x64
 8000b3c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b3e:	4b4a      	ldr	r3, [pc, #296]	; (8000c68 <MX_TIM8_Init+0x180>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000b44:	4b48      	ldr	r3, [pc, #288]	; (8000c68 <MX_TIM8_Init+0x180>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b4a:	4b47      	ldr	r3, [pc, #284]	; (8000c68 <MX_TIM8_Init+0x180>)
 8000b4c:	2280      	movs	r2, #128	; 0x80
 8000b4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000b50:	4845      	ldr	r0, [pc, #276]	; (8000c68 <MX_TIM8_Init+0x180>)
 8000b52:	f003 f92d 	bl	8003db0 <HAL_TIM_Base_Init>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8000b5c:	f000 fa20 	bl	8000fa0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b64:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000b66:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	483e      	ldr	r0, [pc, #248]	; (8000c68 <MX_TIM8_Init+0x180>)
 8000b6e:	f003 fd39 	bl	80045e4 <HAL_TIM_ConfigClockSource>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8000b78:	f000 fa12 	bl	8000fa0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000b7c:	483a      	ldr	r0, [pc, #232]	; (8000c68 <MX_TIM8_Init+0x180>)
 8000b7e:	f003 fa2b 	bl	8003fd8 <HAL_TIM_PWM_Init>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8000b88:	f000 fa0a 	bl	8000fa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b90:	2300      	movs	r3, #0
 8000b92:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000b94:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4833      	ldr	r0, [pc, #204]	; (8000c68 <MX_TIM8_Init+0x180>)
 8000b9c:	f004 f970 	bl	8004e80 <HAL_TIMEx_MasterConfigSynchronization>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 8000ba6:	f000 f9fb 	bl	8000fa0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000baa:	2360      	movs	r3, #96	; 0x60
 8000bac:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bca:	2200      	movs	r2, #0
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4826      	ldr	r0, [pc, #152]	; (8000c68 <MX_TIM8_Init+0x180>)
 8000bd0:	f003 fc4a 	bl	8004468 <HAL_TIM_PWM_ConfigChannel>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 8000bda:	f000 f9e1 	bl	8000fa0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000bde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be2:	2204      	movs	r2, #4
 8000be4:	4619      	mov	r1, r3
 8000be6:	4820      	ldr	r0, [pc, #128]	; (8000c68 <MX_TIM8_Init+0x180>)
 8000be8:	f003 fc3e 	bl	8004468 <HAL_TIM_PWM_ConfigChannel>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_TIM8_Init+0x10e>
  {
    Error_Handler();
 8000bf2:	f000 f9d5 	bl	8000fa0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000bf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bfa:	2208      	movs	r2, #8
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	481a      	ldr	r0, [pc, #104]	; (8000c68 <MX_TIM8_Init+0x180>)
 8000c00:	f003 fc32 	bl	8004468 <HAL_TIM_PWM_ConfigChannel>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_TIM8_Init+0x126>
  {
    Error_Handler();
 8000c0a:	f000 f9c9 	bl	8000fa0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000c0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c12:	220c      	movs	r2, #12
 8000c14:	4619      	mov	r1, r3
 8000c16:	4814      	ldr	r0, [pc, #80]	; (8000c68 <MX_TIM8_Init+0x180>)
 8000c18:	f003 fc26 	bl	8004468 <HAL_TIM_PWM_ConfigChannel>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_TIM8_Init+0x13e>
  {
    Error_Handler();
 8000c22:	f000 f9bd 	bl	8000fa0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c26:	2300      	movs	r3, #0
 8000c28:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c32:	2300      	movs	r3, #0
 8000c34:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c36:	2300      	movs	r3, #0
 8000c38:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c3e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c40:	2300      	movs	r3, #0
 8000c42:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000c44:	1d3b      	adds	r3, r7, #4
 8000c46:	4619      	mov	r1, r3
 8000c48:	4807      	ldr	r0, [pc, #28]	; (8000c68 <MX_TIM8_Init+0x180>)
 8000c4a:	f004 f985 	bl	8004f58 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_TIM8_Init+0x170>
  {
    Error_Handler();
 8000c54:	f000 f9a4 	bl	8000fa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000c58:	4803      	ldr	r0, [pc, #12]	; (8000c68 <MX_TIM8_Init+0x180>)
 8000c5a:	f000 fa8d 	bl	8001178 <HAL_TIM_MspPostInit>

}
 8000c5e:	bf00      	nop
 8000c60:	3758      	adds	r7, #88	; 0x58
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	200001ac 	.word	0x200001ac
 8000c6c:	40013400 	.word	0x40013400

08000c70 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c74:	4b11      	ldr	r3, [pc, #68]	; (8000cbc <MX_USART1_UART_Init+0x4c>)
 8000c76:	4a12      	ldr	r2, [pc, #72]	; (8000cc0 <MX_USART1_UART_Init+0x50>)
 8000c78:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c7a:	4b10      	ldr	r3, [pc, #64]	; (8000cbc <MX_USART1_UART_Init+0x4c>)
 8000c7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c80:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c82:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <MX_USART1_UART_Init+0x4c>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c88:	4b0c      	ldr	r3, [pc, #48]	; (8000cbc <MX_USART1_UART_Init+0x4c>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c8e:	4b0b      	ldr	r3, [pc, #44]	; (8000cbc <MX_USART1_UART_Init+0x4c>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c94:	4b09      	ldr	r3, [pc, #36]	; (8000cbc <MX_USART1_UART_Init+0x4c>)
 8000c96:	220c      	movs	r2, #12
 8000c98:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c9a:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <MX_USART1_UART_Init+0x4c>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ca0:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <MX_USART1_UART_Init+0x4c>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ca6:	4805      	ldr	r0, [pc, #20]	; (8000cbc <MX_USART1_UART_Init+0x4c>)
 8000ca8:	f004 f9c2 	bl	8005030 <HAL_UART_Init>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000cb2:	f000 f975 	bl	8000fa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	20000290 	.word	0x20000290
 8000cc0:	40013800 	.word	0x40013800

08000cc4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cc8:	4b11      	ldr	r3, [pc, #68]	; (8000d10 <MX_USART2_UART_Init+0x4c>)
 8000cca:	4a12      	ldr	r2, [pc, #72]	; (8000d14 <MX_USART2_UART_Init+0x50>)
 8000ccc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000cce:	4b10      	ldr	r3, [pc, #64]	; (8000d10 <MX_USART2_UART_Init+0x4c>)
 8000cd0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000cd4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cd6:	4b0e      	ldr	r3, [pc, #56]	; (8000d10 <MX_USART2_UART_Init+0x4c>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cdc:	4b0c      	ldr	r3, [pc, #48]	; (8000d10 <MX_USART2_UART_Init+0x4c>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ce2:	4b0b      	ldr	r3, [pc, #44]	; (8000d10 <MX_USART2_UART_Init+0x4c>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ce8:	4b09      	ldr	r3, [pc, #36]	; (8000d10 <MX_USART2_UART_Init+0x4c>)
 8000cea:	220c      	movs	r2, #12
 8000cec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cee:	4b08      	ldr	r3, [pc, #32]	; (8000d10 <MX_USART2_UART_Init+0x4c>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cf4:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <MX_USART2_UART_Init+0x4c>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cfa:	4805      	ldr	r0, [pc, #20]	; (8000d10 <MX_USART2_UART_Init+0x4c>)
 8000cfc:	f004 f998 	bl	8005030 <HAL_UART_Init>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d06:	f000 f94b 	bl	8000fa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	20000480 	.word	0x20000480
 8000d14:	40004400 	.word	0x40004400

08000d18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b088      	sub	sp, #32
 8000d1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1e:	f107 0310 	add.w	r3, r7, #16
 8000d22:	2200      	movs	r2, #0
 8000d24:	601a      	str	r2, [r3, #0]
 8000d26:	605a      	str	r2, [r3, #4]
 8000d28:	609a      	str	r2, [r3, #8]
 8000d2a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d2c:	4b4e      	ldr	r3, [pc, #312]	; (8000e68 <MX_GPIO_Init+0x150>)
 8000d2e:	699b      	ldr	r3, [r3, #24]
 8000d30:	4a4d      	ldr	r2, [pc, #308]	; (8000e68 <MX_GPIO_Init+0x150>)
 8000d32:	f043 0310 	orr.w	r3, r3, #16
 8000d36:	6193      	str	r3, [r2, #24]
 8000d38:	4b4b      	ldr	r3, [pc, #300]	; (8000e68 <MX_GPIO_Init+0x150>)
 8000d3a:	699b      	ldr	r3, [r3, #24]
 8000d3c:	f003 0310 	and.w	r3, r3, #16
 8000d40:	60fb      	str	r3, [r7, #12]
 8000d42:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d44:	4b48      	ldr	r3, [pc, #288]	; (8000e68 <MX_GPIO_Init+0x150>)
 8000d46:	699b      	ldr	r3, [r3, #24]
 8000d48:	4a47      	ldr	r2, [pc, #284]	; (8000e68 <MX_GPIO_Init+0x150>)
 8000d4a:	f043 0304 	orr.w	r3, r3, #4
 8000d4e:	6193      	str	r3, [r2, #24]
 8000d50:	4b45      	ldr	r3, [pc, #276]	; (8000e68 <MX_GPIO_Init+0x150>)
 8000d52:	699b      	ldr	r3, [r3, #24]
 8000d54:	f003 0304 	and.w	r3, r3, #4
 8000d58:	60bb      	str	r3, [r7, #8]
 8000d5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d5c:	4b42      	ldr	r3, [pc, #264]	; (8000e68 <MX_GPIO_Init+0x150>)
 8000d5e:	699b      	ldr	r3, [r3, #24]
 8000d60:	4a41      	ldr	r2, [pc, #260]	; (8000e68 <MX_GPIO_Init+0x150>)
 8000d62:	f043 0308 	orr.w	r3, r3, #8
 8000d66:	6193      	str	r3, [r2, #24]
 8000d68:	4b3f      	ldr	r3, [pc, #252]	; (8000e68 <MX_GPIO_Init+0x150>)
 8000d6a:	699b      	ldr	r3, [r3, #24]
 8000d6c:	f003 0308 	and.w	r3, r3, #8
 8000d70:	607b      	str	r3, [r7, #4]
 8000d72:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d74:	4b3c      	ldr	r3, [pc, #240]	; (8000e68 <MX_GPIO_Init+0x150>)
 8000d76:	699b      	ldr	r3, [r3, #24]
 8000d78:	4a3b      	ldr	r2, [pc, #236]	; (8000e68 <MX_GPIO_Init+0x150>)
 8000d7a:	f043 0320 	orr.w	r3, r3, #32
 8000d7e:	6193      	str	r3, [r2, #24]
 8000d80:	4b39      	ldr	r3, [pc, #228]	; (8000e68 <MX_GPIO_Init+0x150>)
 8000d82:	699b      	ldr	r3, [r3, #24]
 8000d84:	f003 0320 	and.w	r3, r3, #32
 8000d88:	603b      	str	r3, [r7, #0]
 8000d8a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BLUE_LED_Pin|BLUETOOTH_SPI_CMD_Pin|BLUETOOTH_SPI_CS_Pin|MOTOR_FRONT_RIGHT_IN_1_Pin
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	f243 013a 	movw	r1, #12346	; 0x303a
 8000d92:	4836      	ldr	r0, [pc, #216]	; (8000e6c <MX_GPIO_Init+0x154>)
 8000d94:	f001 fc66 	bl	8002664 <HAL_GPIO_WritePin>
                          |MOTOR_FRONT_RIGHT_IN_2_Pin|MOTOR_REAR_LEFT_IN_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLUETOOTH_SPI_CLK_GPIO_Port, BLUETOOTH_SPI_CLK_Pin, GPIO_PIN_RESET);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	2110      	movs	r1, #16
 8000d9c:	4834      	ldr	r0, [pc, #208]	; (8000e70 <MX_GPIO_Init+0x158>)
 8000d9e:	f001 fc61 	bl	8002664 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR_FRONT_LEFT_IN_1_Pin|MOTOR_FRONT_LEFT_IN_2_Pin|MOTOR_REAR_RIGHT_IN_2_Pin|MOTOR_REAR_RIGHT_IN_1_Pin, GPIO_PIN_RESET);
 8000da2:	2200      	movs	r2, #0
 8000da4:	2133      	movs	r1, #51	; 0x33
 8000da6:	4833      	ldr	r0, [pc, #204]	; (8000e74 <MX_GPIO_Init+0x15c>)
 8000da8:	f001 fc5c 	bl	8002664 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_REAR_LEFT_IN_1_GPIO_Port, MOTOR_REAR_LEFT_IN_1_Pin, GPIO_PIN_RESET);
 8000dac:	2200      	movs	r2, #0
 8000dae:	2104      	movs	r1, #4
 8000db0:	4831      	ldr	r0, [pc, #196]	; (8000e78 <MX_GPIO_Init+0x160>)
 8000db2:	f001 fc57 	bl	8002664 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_LED_Pin */
  GPIO_InitStruct.Pin = BLUE_LED_Pin;
 8000db6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLUE_LED_GPIO_Port, &GPIO_InitStruct);
 8000dc8:	f107 0310 	add.w	r3, r7, #16
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4827      	ldr	r0, [pc, #156]	; (8000e6c <MX_GPIO_Init+0x154>)
 8000dd0:	f001 fab4 	bl	800233c <HAL_GPIO_Init>

  /*Configure GPIO pins : BLUETOOTH_SPI_CMD_Pin BLUETOOTH_SPI_CS_Pin MOTOR_FRONT_RIGHT_IN_1_Pin MOTOR_FRONT_RIGHT_IN_2_Pin
                           MOTOR_REAR_LEFT_IN_2_Pin */
  GPIO_InitStruct.Pin = BLUETOOTH_SPI_CMD_Pin|BLUETOOTH_SPI_CS_Pin|MOTOR_FRONT_RIGHT_IN_1_Pin|MOTOR_FRONT_RIGHT_IN_2_Pin
 8000dd4:	f241 033a 	movw	r3, #4154	; 0x103a
 8000dd8:	613b      	str	r3, [r7, #16]
                          |MOTOR_REAR_LEFT_IN_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dde:	2300      	movs	r3, #0
 8000de0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000de2:	2303      	movs	r3, #3
 8000de4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000de6:	f107 0310 	add.w	r3, r7, #16
 8000dea:	4619      	mov	r1, r3
 8000dec:	481f      	ldr	r0, [pc, #124]	; (8000e6c <MX_GPIO_Init+0x154>)
 8000dee:	f001 faa5 	bl	800233c <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUETOOTH_SPI_DAT_Pin */
  GPIO_InitStruct.Pin = BLUETOOTH_SPI_DAT_Pin;
 8000df2:	2304      	movs	r3, #4
 8000df4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000df6:	2300      	movs	r3, #0
 8000df8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BLUETOOTH_SPI_DAT_GPIO_Port, &GPIO_InitStruct);
 8000dfe:	f107 0310 	add.w	r3, r7, #16
 8000e02:	4619      	mov	r1, r3
 8000e04:	4819      	ldr	r0, [pc, #100]	; (8000e6c <MX_GPIO_Init+0x154>)
 8000e06:	f001 fa99 	bl	800233c <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUETOOTH_SPI_CLK_Pin */
  GPIO_InitStruct.Pin = BLUETOOTH_SPI_CLK_Pin;
 8000e0a:	2310      	movs	r3, #16
 8000e0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	2300      	movs	r3, #0
 8000e14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e16:	2303      	movs	r3, #3
 8000e18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLUETOOTH_SPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8000e1a:	f107 0310 	add.w	r3, r7, #16
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4813      	ldr	r0, [pc, #76]	; (8000e70 <MX_GPIO_Init+0x158>)
 8000e22:	f001 fa8b 	bl	800233c <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_FRONT_LEFT_IN_1_Pin MOTOR_FRONT_LEFT_IN_2_Pin MOTOR_REAR_RIGHT_IN_2_Pin MOTOR_REAR_RIGHT_IN_1_Pin */
  GPIO_InitStruct.Pin = MOTOR_FRONT_LEFT_IN_1_Pin|MOTOR_FRONT_LEFT_IN_2_Pin|MOTOR_REAR_RIGHT_IN_2_Pin|MOTOR_REAR_RIGHT_IN_1_Pin;
 8000e26:	2333      	movs	r3, #51	; 0x33
 8000e28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e32:	2303      	movs	r3, #3
 8000e34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e36:	f107 0310 	add.w	r3, r7, #16
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	480d      	ldr	r0, [pc, #52]	; (8000e74 <MX_GPIO_Init+0x15c>)
 8000e3e:	f001 fa7d 	bl	800233c <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTOR_REAR_LEFT_IN_1_Pin */
  GPIO_InitStruct.Pin = MOTOR_REAR_LEFT_IN_1_Pin;
 8000e42:	2304      	movs	r3, #4
 8000e44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e46:	2301      	movs	r3, #1
 8000e48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e4e:	2303      	movs	r3, #3
 8000e50:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MOTOR_REAR_LEFT_IN_1_GPIO_Port, &GPIO_InitStruct);
 8000e52:	f107 0310 	add.w	r3, r7, #16
 8000e56:	4619      	mov	r1, r3
 8000e58:	4807      	ldr	r0, [pc, #28]	; (8000e78 <MX_GPIO_Init+0x160>)
 8000e5a:	f001 fa6f 	bl	800233c <HAL_GPIO_Init>

}
 8000e5e:	bf00      	nop
 8000e60:	3720      	adds	r7, #32
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40021000 	.word	0x40021000
 8000e6c:	40011000 	.word	0x40011000
 8000e70:	40010800 	.word	0x40010800
 8000e74:	40010c00 	.word	0x40010c00
 8000e78:	40011400 	.word	0x40011400

08000e7c <MAIN_displayRcfwBanner>:

/* USER CODE BEGIN 4 */

static void MAIN_displayRcfwBanner(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  (void)printf("\n\r");
 8000e80:	480f      	ldr	r0, [pc, #60]	; (8000ec0 <MAIN_displayRcfwBanner+0x44>)
 8000e82:	f005 fff5 	bl	8006e70 <iprintf>
  (void)printf("    8888888b.        .d8888b.       8888888888      888       888\n\r");
 8000e86:	480f      	ldr	r0, [pc, #60]	; (8000ec4 <MAIN_displayRcfwBanner+0x48>)
 8000e88:	f005 fff2 	bl	8006e70 <iprintf>
  (void)printf("    888   Y88b      d88P  Y88b      888             888   o   888\n\r");
 8000e8c:	480e      	ldr	r0, [pc, #56]	; (8000ec8 <MAIN_displayRcfwBanner+0x4c>)
 8000e8e:	f005 ffef 	bl	8006e70 <iprintf>
  (void)printf("    888    888      888    888      888             888  d8b  888\n\r");
 8000e92:	480e      	ldr	r0, [pc, #56]	; (8000ecc <MAIN_displayRcfwBanner+0x50>)
 8000e94:	f005 ffec 	bl	8006e70 <iprintf>
  (void)printf("    888   d88P      888             8888888         888 d888b 888\n\r");
 8000e98:	480d      	ldr	r0, [pc, #52]	; (8000ed0 <MAIN_displayRcfwBanner+0x54>)
 8000e9a:	f005 ffe9 	bl	8006e70 <iprintf>
  (void)printf("    8888888P\"       888             888             888d88888b888\n\r");
 8000e9e:	480d      	ldr	r0, [pc, #52]	; (8000ed4 <MAIN_displayRcfwBanner+0x58>)
 8000ea0:	f005 ffe6 	bl	8006e70 <iprintf>
  (void)printf("    888 T88b        888    888      888             88888P Y88888\n\r");
 8000ea4:	480c      	ldr	r0, [pc, #48]	; (8000ed8 <MAIN_displayRcfwBanner+0x5c>)
 8000ea6:	f005 ffe3 	bl	8006e70 <iprintf>
  (void)printf("    888  T88b       Y88b  d88P      888             8888P   Y8888\n\r");
 8000eaa:	480c      	ldr	r0, [pc, #48]	; (8000edc <MAIN_displayRcfwBanner+0x60>)
 8000eac:	f005 ffe0 	bl	8006e70 <iprintf>
  (void)printf("    888   T88b       \"Y8888P\"       888             888P     Y888\n\r");
 8000eb0:	480b      	ldr	r0, [pc, #44]	; (8000ee0 <MAIN_displayRcfwBanner+0x64>)
 8000eb2:	f005 ffdd 	bl	8006e70 <iprintf>
  (void)printf("\n\r");
 8000eb6:	4802      	ldr	r0, [pc, #8]	; (8000ec0 <MAIN_displayRcfwBanner+0x44>)
 8000eb8:	f005 ffda 	bl	8006e70 <iprintf>

  return;
 8000ebc:	bf00      	nop
}
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	08007ee0 	.word	0x08007ee0
 8000ec4:	08007ee4 	.word	0x08007ee4
 8000ec8:	08007f28 	.word	0x08007f28
 8000ecc:	08007f6c 	.word	0x08007f6c
 8000ed0:	08007fb0 	.word	0x08007fb0
 8000ed4:	08007ff4 	.word	0x08007ff4
 8000ed8:	08008038 	.word	0x08008038
 8000edc:	0800807c 	.word	0x0800807c
 8000ee0:	080080c0 	.word	0x080080c0

08000ee4 <MAIN_updateLedMode>:

static void MAIN_updateLedMode(T_BLUETOOTH_CONTROL_Data *data)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  T_LED_MODE currentLedMode;
  T_LED_MODE requestLedMode;

  currentLedMode = LED_getMode();
 8000eec:	f005 fdd6 	bl	8006a9c <LED_getMode>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	73bb      	strb	r3, [r7, #14]

    switch (data->button)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	7c1b      	ldrb	r3, [r3, #16]
 8000ef8:	3b05      	subs	r3, #5
 8000efa:	2b03      	cmp	r3, #3
 8000efc:	d816      	bhi.n	8000f2c <MAIN_updateLedMode+0x48>
 8000efe:	a201      	add	r2, pc, #4	; (adr r2, 8000f04 <MAIN_updateLedMode+0x20>)
 8000f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f04:	08000f15 	.word	0x08000f15
 8000f08:	08000f27 	.word	0x08000f27
 8000f0c:	08000f1b 	.word	0x08000f1b
 8000f10:	08000f21 	.word	0x08000f21
  {
    case BLUETOOTH_CONTROL_BUTTON_PAD_UP:
      requestLedMode = LED_MODE_FORCED_ON;
 8000f14:	2301      	movs	r3, #1
 8000f16:	73fb      	strb	r3, [r7, #15]
      break;
 8000f18:	e00b      	b.n	8000f32 <MAIN_updateLedMode+0x4e>

    case BLUETOOTH_CONTROL_BUTTON_PAD_DOWN:
      requestLedMode = LED_MODE_FORCED_OFF;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	73fb      	strb	r3, [r7, #15]
      break;
 8000f1e:	e008      	b.n	8000f32 <MAIN_updateLedMode+0x4e>

    case BLUETOOTH_CONTROL_BUTTON_PAD_LEFT:
      requestLedMode = LED_MODE_BLINK_SLOW;
 8000f20:	2302      	movs	r3, #2
 8000f22:	73fb      	strb	r3, [r7, #15]
      break;
 8000f24:	e005      	b.n	8000f32 <MAIN_updateLedMode+0x4e>

    case BLUETOOTH_CONTROL_BUTTON_PAD_RIGHT:
      requestLedMode = LED_MODE_BLINK_FAST;
 8000f26:	2303      	movs	r3, #3
 8000f28:	73fb      	strb	r3, [r7, #15]
      break;
 8000f2a:	e002      	b.n	8000f32 <MAIN_updateLedMode+0x4e>

    default:
      requestLedMode = currentLedMode;
 8000f2c:	7bbb      	ldrb	r3, [r7, #14]
 8000f2e:	73fb      	strb	r3, [r7, #15]
      break;
 8000f30:	bf00      	nop
  }

  if (requestLedMode != currentLedMode)
 8000f32:	7bfa      	ldrb	r2, [r7, #15]
 8000f34:	7bbb      	ldrb	r3, [r7, #14]
 8000f36:	429a      	cmp	r2, r3
 8000f38:	d004      	beq.n	8000f44 <MAIN_updateLedMode+0x60>
  {
    LED_setMode(requestLedMode);
 8000f3a:	7bfb      	ldrb	r3, [r7, #15]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f005 fd97 	bl	8006a70 <LED_setMode>
  else
  {
    ; /* Nothing to do */
  }

  return;
 8000f42:	bf00      	nop
 8000f44:	bf00      	nop
}
 8000f46:	3710      	adds	r7, #16
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  /* Check the handle of the timer triggering this callback and update LED */
  if (htim == &htim1)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	4a04      	ldr	r2, [pc, #16]	; (8000f68 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d101      	bne.n	8000f60 <HAL_TIM_PeriodElapsedCallback+0x14>
  {
    LED_update();
 8000f5c:	f005 fda8 	bl	8006ab0 <LED_update>
  }
  else
  {
    ; /* Nothing to do */
  }
}
 8000f60:	bf00      	nop
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	20000318 	.word	0x20000318

08000f6c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  /* Check the handle of the UART triggering this callback and actually receive date */
  if (huart == &huart1)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	4a08      	ldr	r2, [pc, #32]	; (8000f98 <HAL_UART_RxCpltCallback+0x2c>)
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d102      	bne.n	8000f82 <HAL_UART_RxCpltCallback+0x16>
  {
    CONSOLE_receiveData();
 8000f7c:	f005 f862 	bl	8006044 <CONSOLE_receiveData>
  }
  else
  {
    ; /* Nothing to do */
  }
}
 8000f80:	e006      	b.n	8000f90 <HAL_UART_RxCpltCallback+0x24>
  else if (huart == &huart2)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a05      	ldr	r2, [pc, #20]	; (8000f9c <HAL_UART_RxCpltCallback+0x30>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d102      	bne.n	8000f90 <HAL_UART_RxCpltCallback+0x24>
    MASTER_CONTROL_receiveData(&huart2);
 8000f8a:	4804      	ldr	r0, [pc, #16]	; (8000f9c <HAL_UART_RxCpltCallback+0x30>)
 8000f8c:	f005 fe36 	bl	8006bfc <MASTER_CONTROL_receiveData>
}
 8000f90:	bf00      	nop
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	20000290 	.word	0x20000290
 8000f9c:	20000480 	.word	0x20000480

08000fa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fa4:	b672      	cpsid	i
}
 8000fa6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fa8:	e7fe      	b.n	8000fa8 <Error_Handler+0x8>
	...

08000fac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b085      	sub	sp, #20
 8000fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000fb2:	4b15      	ldr	r3, [pc, #84]	; (8001008 <HAL_MspInit+0x5c>)
 8000fb4:	699b      	ldr	r3, [r3, #24]
 8000fb6:	4a14      	ldr	r2, [pc, #80]	; (8001008 <HAL_MspInit+0x5c>)
 8000fb8:	f043 0301 	orr.w	r3, r3, #1
 8000fbc:	6193      	str	r3, [r2, #24]
 8000fbe:	4b12      	ldr	r3, [pc, #72]	; (8001008 <HAL_MspInit+0x5c>)
 8000fc0:	699b      	ldr	r3, [r3, #24]
 8000fc2:	f003 0301 	and.w	r3, r3, #1
 8000fc6:	60bb      	str	r3, [r7, #8]
 8000fc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fca:	4b0f      	ldr	r3, [pc, #60]	; (8001008 <HAL_MspInit+0x5c>)
 8000fcc:	69db      	ldr	r3, [r3, #28]
 8000fce:	4a0e      	ldr	r2, [pc, #56]	; (8001008 <HAL_MspInit+0x5c>)
 8000fd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fd4:	61d3      	str	r3, [r2, #28]
 8000fd6:	4b0c      	ldr	r3, [pc, #48]	; (8001008 <HAL_MspInit+0x5c>)
 8000fd8:	69db      	ldr	r3, [r3, #28]
 8000fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fde:	607b      	str	r3, [r7, #4]
 8000fe0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000fe2:	4b0a      	ldr	r3, [pc, #40]	; (800100c <HAL_MspInit+0x60>)
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	4a04      	ldr	r2, [pc, #16]	; (800100c <HAL_MspInit+0x60>)
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ffe:	bf00      	nop
 8001000:	3714      	adds	r7, #20
 8001002:	46bd      	mov	sp, r7
 8001004:	bc80      	pop	{r7}
 8001006:	4770      	bx	lr
 8001008:	40021000 	.word	0x40021000
 800100c:	40010000 	.word	0x40010000

08001010 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b088      	sub	sp, #32
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001018:	f107 0310 	add.w	r3, r7, #16
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a14      	ldr	r2, [pc, #80]	; (800107c <HAL_ADC_MspInit+0x6c>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d121      	bne.n	8001074 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001030:	4b13      	ldr	r3, [pc, #76]	; (8001080 <HAL_ADC_MspInit+0x70>)
 8001032:	699b      	ldr	r3, [r3, #24]
 8001034:	4a12      	ldr	r2, [pc, #72]	; (8001080 <HAL_ADC_MspInit+0x70>)
 8001036:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800103a:	6193      	str	r3, [r2, #24]
 800103c:	4b10      	ldr	r3, [pc, #64]	; (8001080 <HAL_ADC_MspInit+0x70>)
 800103e:	699b      	ldr	r3, [r3, #24]
 8001040:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001044:	60fb      	str	r3, [r7, #12]
 8001046:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001048:	4b0d      	ldr	r3, [pc, #52]	; (8001080 <HAL_ADC_MspInit+0x70>)
 800104a:	699b      	ldr	r3, [r3, #24]
 800104c:	4a0c      	ldr	r2, [pc, #48]	; (8001080 <HAL_ADC_MspInit+0x70>)
 800104e:	f043 0304 	orr.w	r3, r3, #4
 8001052:	6193      	str	r3, [r2, #24]
 8001054:	4b0a      	ldr	r3, [pc, #40]	; (8001080 <HAL_ADC_MspInit+0x70>)
 8001056:	699b      	ldr	r3, [r3, #24]
 8001058:	f003 0304 	and.w	r3, r3, #4
 800105c:	60bb      	str	r3, [r7, #8]
 800105e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = BATTERY_ADC_Pin;
 8001060:	2320      	movs	r3, #32
 8001062:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001064:	2303      	movs	r3, #3
 8001066:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(BATTERY_ADC_GPIO_Port, &GPIO_InitStruct);
 8001068:	f107 0310 	add.w	r3, r7, #16
 800106c:	4619      	mov	r1, r3
 800106e:	4805      	ldr	r0, [pc, #20]	; (8001084 <HAL_ADC_MspInit+0x74>)
 8001070:	f001 f964 	bl	800233c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001074:	bf00      	nop
 8001076:	3720      	adds	r7, #32
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	40012400 	.word	0x40012400
 8001080:	40021000 	.word	0x40021000
 8001084:	40010800 	.word	0x40010800

08001088 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a0b      	ldr	r2, [pc, #44]	; (80010c4 <HAL_RTC_MspInit+0x3c>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d110      	bne.n	80010bc <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800109a:	f001 fb15 	bl	80026c8 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 800109e:	4b0a      	ldr	r3, [pc, #40]	; (80010c8 <HAL_RTC_MspInit+0x40>)
 80010a0:	69db      	ldr	r3, [r3, #28]
 80010a2:	4a09      	ldr	r2, [pc, #36]	; (80010c8 <HAL_RTC_MspInit+0x40>)
 80010a4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80010a8:	61d3      	str	r3, [r2, #28]
 80010aa:	4b07      	ldr	r3, [pc, #28]	; (80010c8 <HAL_RTC_MspInit+0x40>)
 80010ac:	69db      	ldr	r3, [r3, #28]
 80010ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80010b6:	4b05      	ldr	r3, [pc, #20]	; (80010cc <HAL_RTC_MspInit+0x44>)
 80010b8:	2201      	movs	r2, #1
 80010ba:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80010bc:	bf00      	nop
 80010be:	3710      	adds	r7, #16
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	40002800 	.word	0x40002800
 80010c8:	40021000 	.word	0x40021000
 80010cc:	4242043c 	.word	0x4242043c

080010d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a23      	ldr	r2, [pc, #140]	; (800116c <HAL_TIM_Base_MspInit+0x9c>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d114      	bne.n	800110c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80010e2:	4b23      	ldr	r3, [pc, #140]	; (8001170 <HAL_TIM_Base_MspInit+0xa0>)
 80010e4:	699b      	ldr	r3, [r3, #24]
 80010e6:	4a22      	ldr	r2, [pc, #136]	; (8001170 <HAL_TIM_Base_MspInit+0xa0>)
 80010e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010ec:	6193      	str	r3, [r2, #24]
 80010ee:	4b20      	ldr	r3, [pc, #128]	; (8001170 <HAL_TIM_Base_MspInit+0xa0>)
 80010f0:	699b      	ldr	r3, [r3, #24]
 80010f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80010f6:	617b      	str	r3, [r7, #20]
 80010f8:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 4, 0);
 80010fa:	2200      	movs	r2, #0
 80010fc:	2104      	movs	r1, #4
 80010fe:	2019      	movs	r0, #25
 8001100:	f000 ffa3 	bl	800204a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001104:	2019      	movs	r0, #25
 8001106:	f000 ffbc 	bl	8002082 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800110a:	e02a      	b.n	8001162 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM2)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001114:	d114      	bne.n	8001140 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001116:	4b16      	ldr	r3, [pc, #88]	; (8001170 <HAL_TIM_Base_MspInit+0xa0>)
 8001118:	69db      	ldr	r3, [r3, #28]
 800111a:	4a15      	ldr	r2, [pc, #84]	; (8001170 <HAL_TIM_Base_MspInit+0xa0>)
 800111c:	f043 0301 	orr.w	r3, r3, #1
 8001120:	61d3      	str	r3, [r2, #28]
 8001122:	4b13      	ldr	r3, [pc, #76]	; (8001170 <HAL_TIM_Base_MspInit+0xa0>)
 8001124:	69db      	ldr	r3, [r3, #28]
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	613b      	str	r3, [r7, #16]
 800112c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 800112e:	2200      	movs	r2, #0
 8001130:	2101      	movs	r1, #1
 8001132:	201c      	movs	r0, #28
 8001134:	f000 ff89 	bl	800204a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001138:	201c      	movs	r0, #28
 800113a:	f000 ffa2 	bl	8002082 <HAL_NVIC_EnableIRQ>
}
 800113e:	e010      	b.n	8001162 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM8)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a0b      	ldr	r2, [pc, #44]	; (8001174 <HAL_TIM_Base_MspInit+0xa4>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d10b      	bne.n	8001162 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800114a:	4b09      	ldr	r3, [pc, #36]	; (8001170 <HAL_TIM_Base_MspInit+0xa0>)
 800114c:	699b      	ldr	r3, [r3, #24]
 800114e:	4a08      	ldr	r2, [pc, #32]	; (8001170 <HAL_TIM_Base_MspInit+0xa0>)
 8001150:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001154:	6193      	str	r3, [r2, #24]
 8001156:	4b06      	ldr	r3, [pc, #24]	; (8001170 <HAL_TIM_Base_MspInit+0xa0>)
 8001158:	699b      	ldr	r3, [r3, #24]
 800115a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	68fb      	ldr	r3, [r7, #12]
}
 8001162:	bf00      	nop
 8001164:	3718      	adds	r7, #24
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40012c00 	.word	0x40012c00
 8001170:	40021000 	.word	0x40021000
 8001174:	40013400 	.word	0x40013400

08001178 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b088      	sub	sp, #32
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001180:	f107 0310 	add.w	r3, r7, #16
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	605a      	str	r2, [r3, #4]
 800118a:	609a      	str	r2, [r3, #8]
 800118c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM8)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a10      	ldr	r2, [pc, #64]	; (80011d4 <HAL_TIM_MspPostInit+0x5c>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d118      	bne.n	80011ca <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001198:	4b0f      	ldr	r3, [pc, #60]	; (80011d8 <HAL_TIM_MspPostInit+0x60>)
 800119a:	699b      	ldr	r3, [r3, #24]
 800119c:	4a0e      	ldr	r2, [pc, #56]	; (80011d8 <HAL_TIM_MspPostInit+0x60>)
 800119e:	f043 0310 	orr.w	r3, r3, #16
 80011a2:	6193      	str	r3, [r2, #24]
 80011a4:	4b0c      	ldr	r3, [pc, #48]	; (80011d8 <HAL_TIM_MspPostInit+0x60>)
 80011a6:	699b      	ldr	r3, [r3, #24]
 80011a8:	f003 0310 	and.w	r3, r3, #16
 80011ac:	60fb      	str	r3, [r7, #12]
 80011ae:	68fb      	ldr	r3, [r7, #12]
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    PC8     ------> TIM8_CH3
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = MOTOR_FRONT_LEFT_PWM_Pin|MOTOR_FRONT_RIGHT_PWM_Pin|MOTOR_REAR_LEFT_PWM_Pin|MOTOR_REAR_RIGHT_PWM_Pin;
 80011b0:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80011b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b6:	2302      	movs	r3, #2
 80011b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011ba:	2303      	movs	r3, #3
 80011bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011be:	f107 0310 	add.w	r3, r7, #16
 80011c2:	4619      	mov	r1, r3
 80011c4:	4805      	ldr	r0, [pc, #20]	; (80011dc <HAL_TIM_MspPostInit+0x64>)
 80011c6:	f001 f8b9 	bl	800233c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80011ca:	bf00      	nop
 80011cc:	3720      	adds	r7, #32
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	40013400 	.word	0x40013400
 80011d8:	40021000 	.word	0x40021000
 80011dc:	40011000 	.word	0x40011000

080011e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b08a      	sub	sp, #40	; 0x28
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e8:	f107 0318 	add.w	r3, r7, #24
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	609a      	str	r2, [r3, #8]
 80011f4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a3f      	ldr	r2, [pc, #252]	; (80012f8 <HAL_UART_MspInit+0x118>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d13a      	bne.n	8001276 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001200:	4b3e      	ldr	r3, [pc, #248]	; (80012fc <HAL_UART_MspInit+0x11c>)
 8001202:	699b      	ldr	r3, [r3, #24]
 8001204:	4a3d      	ldr	r2, [pc, #244]	; (80012fc <HAL_UART_MspInit+0x11c>)
 8001206:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800120a:	6193      	str	r3, [r2, #24]
 800120c:	4b3b      	ldr	r3, [pc, #236]	; (80012fc <HAL_UART_MspInit+0x11c>)
 800120e:	699b      	ldr	r3, [r3, #24]
 8001210:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001214:	617b      	str	r3, [r7, #20]
 8001216:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001218:	4b38      	ldr	r3, [pc, #224]	; (80012fc <HAL_UART_MspInit+0x11c>)
 800121a:	699b      	ldr	r3, [r3, #24]
 800121c:	4a37      	ldr	r2, [pc, #220]	; (80012fc <HAL_UART_MspInit+0x11c>)
 800121e:	f043 0304 	orr.w	r3, r3, #4
 8001222:	6193      	str	r3, [r2, #24]
 8001224:	4b35      	ldr	r3, [pc, #212]	; (80012fc <HAL_UART_MspInit+0x11c>)
 8001226:	699b      	ldr	r3, [r3, #24]
 8001228:	f003 0304 	and.w	r3, r3, #4
 800122c:	613b      	str	r3, [r7, #16]
 800122e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001230:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001234:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001236:	2302      	movs	r3, #2
 8001238:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800123a:	2303      	movs	r3, #3
 800123c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800123e:	f107 0318 	add.w	r3, r7, #24
 8001242:	4619      	mov	r1, r3
 8001244:	482e      	ldr	r0, [pc, #184]	; (8001300 <HAL_UART_MspInit+0x120>)
 8001246:	f001 f879 	bl	800233c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800124a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800124e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001250:	2300      	movs	r3, #0
 8001252:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001254:	2300      	movs	r3, #0
 8001256:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001258:	f107 0318 	add.w	r3, r7, #24
 800125c:	4619      	mov	r1, r3
 800125e:	4828      	ldr	r0, [pc, #160]	; (8001300 <HAL_UART_MspInit+0x120>)
 8001260:	f001 f86c 	bl	800233c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8001264:	2200      	movs	r2, #0
 8001266:	2103      	movs	r1, #3
 8001268:	2025      	movs	r0, #37	; 0x25
 800126a:	f000 feee 	bl	800204a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800126e:	2025      	movs	r0, #37	; 0x25
 8001270:	f000 ff07 	bl	8002082 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001274:	e03c      	b.n	80012f0 <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a22      	ldr	r2, [pc, #136]	; (8001304 <HAL_UART_MspInit+0x124>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d137      	bne.n	80012f0 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001280:	4b1e      	ldr	r3, [pc, #120]	; (80012fc <HAL_UART_MspInit+0x11c>)
 8001282:	69db      	ldr	r3, [r3, #28]
 8001284:	4a1d      	ldr	r2, [pc, #116]	; (80012fc <HAL_UART_MspInit+0x11c>)
 8001286:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800128a:	61d3      	str	r3, [r2, #28]
 800128c:	4b1b      	ldr	r3, [pc, #108]	; (80012fc <HAL_UART_MspInit+0x11c>)
 800128e:	69db      	ldr	r3, [r3, #28]
 8001290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001294:	60fb      	str	r3, [r7, #12]
 8001296:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001298:	4b18      	ldr	r3, [pc, #96]	; (80012fc <HAL_UART_MspInit+0x11c>)
 800129a:	699b      	ldr	r3, [r3, #24]
 800129c:	4a17      	ldr	r2, [pc, #92]	; (80012fc <HAL_UART_MspInit+0x11c>)
 800129e:	f043 0304 	orr.w	r3, r3, #4
 80012a2:	6193      	str	r3, [r2, #24]
 80012a4:	4b15      	ldr	r3, [pc, #84]	; (80012fc <HAL_UART_MspInit+0x11c>)
 80012a6:	699b      	ldr	r3, [r3, #24]
 80012a8:	f003 0304 	and.w	r3, r3, #4
 80012ac:	60bb      	str	r3, [r7, #8]
 80012ae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80012b0:	2304      	movs	r3, #4
 80012b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b4:	2302      	movs	r3, #2
 80012b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012b8:	2303      	movs	r3, #3
 80012ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012bc:	f107 0318 	add.w	r3, r7, #24
 80012c0:	4619      	mov	r1, r3
 80012c2:	480f      	ldr	r0, [pc, #60]	; (8001300 <HAL_UART_MspInit+0x120>)
 80012c4:	f001 f83a 	bl	800233c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80012c8:	2308      	movs	r3, #8
 80012ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012cc:	2300      	movs	r3, #0
 80012ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d4:	f107 0318 	add.w	r3, r7, #24
 80012d8:	4619      	mov	r1, r3
 80012da:	4809      	ldr	r0, [pc, #36]	; (8001300 <HAL_UART_MspInit+0x120>)
 80012dc:	f001 f82e 	bl	800233c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 80012e0:	2200      	movs	r2, #0
 80012e2:	2102      	movs	r1, #2
 80012e4:	2026      	movs	r0, #38	; 0x26
 80012e6:	f000 feb0 	bl	800204a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80012ea:	2026      	movs	r0, #38	; 0x26
 80012ec:	f000 fec9 	bl	8002082 <HAL_NVIC_EnableIRQ>
}
 80012f0:	bf00      	nop
 80012f2:	3728      	adds	r7, #40	; 0x28
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	40013800 	.word	0x40013800
 80012fc:	40021000 	.word	0x40021000
 8001300:	40010800 	.word	0x40010800
 8001304:	40004400 	.word	0x40004400

08001308 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800130c:	e7fe      	b.n	800130c <NMI_Handler+0x4>

0800130e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800130e:	b480      	push	{r7}
 8001310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001312:	e7fe      	b.n	8001312 <HardFault_Handler+0x4>

08001314 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001318:	e7fe      	b.n	8001318 <MemManage_Handler+0x4>

0800131a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800131a:	b480      	push	{r7}
 800131c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800131e:	e7fe      	b.n	800131e <BusFault_Handler+0x4>

08001320 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001324:	e7fe      	b.n	8001324 <UsageFault_Handler+0x4>

08001326 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001326:	b480      	push	{r7}
 8001328:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800132a:	bf00      	nop
 800132c:	46bd      	mov	sp, r7
 800132e:	bc80      	pop	{r7}
 8001330:	4770      	bx	lr

08001332 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001332:	b480      	push	{r7}
 8001334:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001336:	bf00      	nop
 8001338:	46bd      	mov	sp, r7
 800133a:	bc80      	pop	{r7}
 800133c:	4770      	bx	lr

0800133e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800133e:	b480      	push	{r7}
 8001340:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001342:	bf00      	nop
 8001344:	46bd      	mov	sp, r7
 8001346:	bc80      	pop	{r7}
 8001348:	4770      	bx	lr

0800134a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800134e:	f000 f94b 	bl	80015e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}
	...

08001358 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800135c:	4802      	ldr	r0, [pc, #8]	; (8001368 <TIM1_UP_IRQHandler+0x10>)
 800135e:	f002 ff5b 	bl	8004218 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	20000318 	.word	0x20000318

0800136c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001370:	4802      	ldr	r0, [pc, #8]	; (800137c <TIM2_IRQHandler+0x10>)
 8001372:	f002 ff51 	bl	8004218 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	200003cc 	.word	0x200003cc

08001380 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001384:	4802      	ldr	r0, [pc, #8]	; (8001390 <USART1_IRQHandler+0x10>)
 8001386:	f003 ff6f 	bl	8005268 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	20000290 	.word	0x20000290

08001394 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001398:	4802      	ldr	r0, [pc, #8]	; (80013a4 <USART2_IRQHandler+0x10>)
 800139a:	f003 ff65 	bl	8005268 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800139e:	bf00      	nop
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	20000480 	.word	0x20000480

080013a8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b086      	sub	sp, #24
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	60f8      	str	r0, [r7, #12]
 80013b0:	60b9      	str	r1, [r7, #8]
 80013b2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013b4:	2300      	movs	r3, #0
 80013b6:	617b      	str	r3, [r7, #20]
 80013b8:	e00a      	b.n	80013d0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80013ba:	f3af 8000 	nop.w
 80013be:	4601      	mov	r1, r0
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	1c5a      	adds	r2, r3, #1
 80013c4:	60ba      	str	r2, [r7, #8]
 80013c6:	b2ca      	uxtb	r2, r1
 80013c8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	3301      	adds	r3, #1
 80013ce:	617b      	str	r3, [r7, #20]
 80013d0:	697a      	ldr	r2, [r7, #20]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	dbf0      	blt.n	80013ba <_read+0x12>
	}

return len;
 80013d8:	687b      	ldr	r3, [r7, #4]
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3718      	adds	r7, #24
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
	...

080013e4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b086      	sub	sp, #24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	60b9      	str	r1, [r7, #8]
 80013ee:	607a      	str	r2, [r7, #4]
  if ((file != STDOUT_FILENO) && (file != STDERR_FILENO))
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d00a      	beq.n	800140c <_write+0x28>
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	2b02      	cmp	r3, #2
 80013fa:	d007      	beq.n	800140c <_write+0x28>
  {
    errno = EBADF;
 80013fc:	f005 fd06 	bl	8006e0c <__errno>
 8001400:	4603      	mov	r3, r0
 8001402:	2209      	movs	r2, #9
 8001404:	601a      	str	r2, [r3, #0]
    return -1;
 8001406:	f04f 33ff 	mov.w	r3, #4294967295
 800140a:	e00f      	b.n	800142c <_write+0x48>
  }

  HAL_StatusTypeDef status = HAL_UART_Transmit(&huart1, (uint8_t *)ptr, len, 1000);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	b29a      	uxth	r2, r3
 8001410:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001414:	68b9      	ldr	r1, [r7, #8]
 8001416:	4807      	ldr	r0, [pc, #28]	; (8001434 <_write+0x50>)
 8001418:	f003 fe64 	bl	80050e4 <HAL_UART_Transmit>
 800141c:	4603      	mov	r3, r0
 800141e:	75fb      	strb	r3, [r7, #23]
  return (status == HAL_OK ? len : 0);
 8001420:	7dfb      	ldrb	r3, [r7, #23]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d101      	bne.n	800142a <_write+0x46>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	e000      	b.n	800142c <_write+0x48>
 800142a:	2300      	movs	r3, #0

}
 800142c:	4618      	mov	r0, r3
 800142e:	3718      	adds	r7, #24
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	20000290 	.word	0x20000290

08001438 <_close>:

int _close(int file)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
	return -1;
 8001440:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001444:	4618      	mov	r0, r3
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	bc80      	pop	{r7}
 800144c:	4770      	bx	lr

0800144e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800144e:	b480      	push	{r7}
 8001450:	b083      	sub	sp, #12
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
 8001456:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800145e:	605a      	str	r2, [r3, #4]
	return 0;
 8001460:	2300      	movs	r3, #0
}
 8001462:	4618      	mov	r0, r3
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	bc80      	pop	{r7}
 800146a:	4770      	bx	lr

0800146c <_isatty>:

int _isatty(int file)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
	return 1;
 8001474:	2301      	movs	r3, #1
}
 8001476:	4618      	mov	r0, r3
 8001478:	370c      	adds	r7, #12
 800147a:	46bd      	mov	sp, r7
 800147c:	bc80      	pop	{r7}
 800147e:	4770      	bx	lr

08001480 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001480:	b480      	push	{r7}
 8001482:	b085      	sub	sp, #20
 8001484:	af00      	add	r7, sp, #0
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	60b9      	str	r1, [r7, #8]
 800148a:	607a      	str	r2, [r7, #4]
	return 0;
 800148c:	2300      	movs	r3, #0
}
 800148e:	4618      	mov	r0, r3
 8001490:	3714      	adds	r7, #20
 8001492:	46bd      	mov	sp, r7
 8001494:	bc80      	pop	{r7}
 8001496:	4770      	bx	lr

08001498 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b086      	sub	sp, #24
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014a0:	4a14      	ldr	r2, [pc, #80]	; (80014f4 <_sbrk+0x5c>)
 80014a2:	4b15      	ldr	r3, [pc, #84]	; (80014f8 <_sbrk+0x60>)
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014ac:	4b13      	ldr	r3, [pc, #76]	; (80014fc <_sbrk+0x64>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d102      	bne.n	80014ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014b4:	4b11      	ldr	r3, [pc, #68]	; (80014fc <_sbrk+0x64>)
 80014b6:	4a12      	ldr	r2, [pc, #72]	; (8001500 <_sbrk+0x68>)
 80014b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014ba:	4b10      	ldr	r3, [pc, #64]	; (80014fc <_sbrk+0x64>)
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4413      	add	r3, r2
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d207      	bcs.n	80014d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014c8:	f005 fca0 	bl	8006e0c <__errno>
 80014cc:	4603      	mov	r3, r0
 80014ce:	220c      	movs	r2, #12
 80014d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014d2:	f04f 33ff 	mov.w	r3, #4294967295
 80014d6:	e009      	b.n	80014ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014d8:	4b08      	ldr	r3, [pc, #32]	; (80014fc <_sbrk+0x64>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014de:	4b07      	ldr	r3, [pc, #28]	; (80014fc <_sbrk+0x64>)
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4413      	add	r3, r2
 80014e6:	4a05      	ldr	r2, [pc, #20]	; (80014fc <_sbrk+0x64>)
 80014e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014ea:	68fb      	ldr	r3, [r7, #12]
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3718      	adds	r7, #24
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	2000c000 	.word	0x2000c000
 80014f8:	00000400 	.word	0x00000400
 80014fc:	200000b4 	.word	0x200000b4
 8001500:	20000508 	.word	0x20000508

08001504 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	bc80      	pop	{r7}
 800150e:	4770      	bx	lr

08001510 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001510:	480c      	ldr	r0, [pc, #48]	; (8001544 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001512:	490d      	ldr	r1, [pc, #52]	; (8001548 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001514:	4a0d      	ldr	r2, [pc, #52]	; (800154c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001516:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001518:	e002      	b.n	8001520 <LoopCopyDataInit>

0800151a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800151a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800151c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800151e:	3304      	adds	r3, #4

08001520 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001520:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001522:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001524:	d3f9      	bcc.n	800151a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001526:	4a0a      	ldr	r2, [pc, #40]	; (8001550 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001528:	4c0a      	ldr	r4, [pc, #40]	; (8001554 <LoopFillZerobss+0x22>)
  movs r3, #0
 800152a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800152c:	e001      	b.n	8001532 <LoopFillZerobss>

0800152e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800152e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001530:	3204      	adds	r2, #4

08001532 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001532:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001534:	d3fb      	bcc.n	800152e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001536:	f7ff ffe5 	bl	8001504 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800153a:	f005 fc6d 	bl	8006e18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800153e:	f7ff f8cf 	bl	80006e0 <main>
  bx lr
 8001542:	4770      	bx	lr
  ldr r0, =_sdata
 8001544:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001548:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 800154c:	0800858c 	.word	0x0800858c
  ldr r2, =_sbss
 8001550:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8001554:	20000508 	.word	0x20000508

08001558 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001558:	e7fe      	b.n	8001558 <ADC1_2_IRQHandler>
	...

0800155c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001560:	4b08      	ldr	r3, [pc, #32]	; (8001584 <HAL_Init+0x28>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a07      	ldr	r2, [pc, #28]	; (8001584 <HAL_Init+0x28>)
 8001566:	f043 0310 	orr.w	r3, r3, #16
 800156a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800156c:	2003      	movs	r0, #3
 800156e:	f000 fd61 	bl	8002034 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001572:	2000      	movs	r0, #0
 8001574:	f000 f808 	bl	8001588 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001578:	f7ff fd18 	bl	8000fac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40022000 	.word	0x40022000

08001588 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001590:	4b12      	ldr	r3, [pc, #72]	; (80015dc <HAL_InitTick+0x54>)
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	4b12      	ldr	r3, [pc, #72]	; (80015e0 <HAL_InitTick+0x58>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	4619      	mov	r1, r3
 800159a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800159e:	fbb3 f3f1 	udiv	r3, r3, r1
 80015a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015a6:	4618      	mov	r0, r3
 80015a8:	f000 fd79 	bl	800209e <HAL_SYSTICK_Config>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e00e      	b.n	80015d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2b0f      	cmp	r3, #15
 80015ba:	d80a      	bhi.n	80015d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015bc:	2200      	movs	r2, #0
 80015be:	6879      	ldr	r1, [r7, #4]
 80015c0:	f04f 30ff 	mov.w	r0, #4294967295
 80015c4:	f000 fd41 	bl	800204a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015c8:	4a06      	ldr	r2, [pc, #24]	; (80015e4 <HAL_InitTick+0x5c>)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015ce:	2300      	movs	r3, #0
 80015d0:	e000      	b.n	80015d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3708      	adds	r7, #8
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	20000000 	.word	0x20000000
 80015e0:	20000008 	.word	0x20000008
 80015e4:	20000004 	.word	0x20000004

080015e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015ec:	4b05      	ldr	r3, [pc, #20]	; (8001604 <HAL_IncTick+0x1c>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	461a      	mov	r2, r3
 80015f2:	4b05      	ldr	r3, [pc, #20]	; (8001608 <HAL_IncTick+0x20>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4413      	add	r3, r2
 80015f8:	4a03      	ldr	r2, [pc, #12]	; (8001608 <HAL_IncTick+0x20>)
 80015fa:	6013      	str	r3, [r2, #0]
}
 80015fc:	bf00      	nop
 80015fe:	46bd      	mov	sp, r7
 8001600:	bc80      	pop	{r7}
 8001602:	4770      	bx	lr
 8001604:	20000008 	.word	0x20000008
 8001608:	200004f4 	.word	0x200004f4

0800160c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  return uwTick;
 8001610:	4b02      	ldr	r3, [pc, #8]	; (800161c <HAL_GetTick+0x10>)
 8001612:	681b      	ldr	r3, [r3, #0]
}
 8001614:	4618      	mov	r0, r3
 8001616:	46bd      	mov	sp, r7
 8001618:	bc80      	pop	{r7}
 800161a:	4770      	bx	lr
 800161c:	200004f4 	.word	0x200004f4

08001620 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b086      	sub	sp, #24
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001628:	2300      	movs	r3, #0
 800162a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800162c:	2300      	movs	r3, #0
 800162e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001630:	2300      	movs	r3, #0
 8001632:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001634:	2300      	movs	r3, #0
 8001636:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d101      	bne.n	8001642 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e0ce      	b.n	80017e0 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800164c:	2b00      	cmp	r3, #0
 800164e:	d109      	bne.n	8001664 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2200      	movs	r2, #0
 8001654:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2200      	movs	r2, #0
 800165a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f7ff fcd6 	bl	8001010 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f000 fbd7 	bl	8001e18 <ADC_ConversionStop_Disable>
 800166a:	4603      	mov	r3, r0
 800166c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001672:	f003 0310 	and.w	r3, r3, #16
 8001676:	2b00      	cmp	r3, #0
 8001678:	f040 80a9 	bne.w	80017ce <HAL_ADC_Init+0x1ae>
 800167c:	7dfb      	ldrb	r3, [r7, #23]
 800167e:	2b00      	cmp	r3, #0
 8001680:	f040 80a5 	bne.w	80017ce <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001688:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800168c:	f023 0302 	bic.w	r3, r3, #2
 8001690:	f043 0202 	orr.w	r2, r3, #2
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4951      	ldr	r1, [pc, #324]	; (80017e8 <HAL_ADC_Init+0x1c8>)
 80016a2:	428b      	cmp	r3, r1
 80016a4:	d10a      	bne.n	80016bc <HAL_ADC_Init+0x9c>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	69db      	ldr	r3, [r3, #28]
 80016aa:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80016ae:	d002      	beq.n	80016b6 <HAL_ADC_Init+0x96>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	69db      	ldr	r3, [r3, #28]
 80016b4:	e004      	b.n	80016c0 <HAL_ADC_Init+0xa0>
 80016b6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80016ba:	e001      	b.n	80016c0 <HAL_ADC_Init+0xa0>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80016c0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	7b1b      	ldrb	r3, [r3, #12]
 80016c6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80016c8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80016ca:	68ba      	ldr	r2, [r7, #8]
 80016cc:	4313      	orrs	r3, r2
 80016ce:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016d8:	d003      	beq.n	80016e2 <HAL_ADC_Init+0xc2>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d102      	bne.n	80016e8 <HAL_ADC_Init+0xc8>
 80016e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016e6:	e000      	b.n	80016ea <HAL_ADC_Init+0xca>
 80016e8:	2300      	movs	r3, #0
 80016ea:	693a      	ldr	r2, [r7, #16]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	7d1b      	ldrb	r3, [r3, #20]
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d119      	bne.n	800172c <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	7b1b      	ldrb	r3, [r3, #12]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d109      	bne.n	8001714 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	699b      	ldr	r3, [r3, #24]
 8001704:	3b01      	subs	r3, #1
 8001706:	035a      	lsls	r2, r3, #13
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	4313      	orrs	r3, r2
 800170c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001710:	613b      	str	r3, [r7, #16]
 8001712:	e00b      	b.n	800172c <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001718:	f043 0220 	orr.w	r2, r3, #32
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001724:	f043 0201 	orr.w	r2, r3, #1
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	693a      	ldr	r2, [r7, #16]
 800173c:	430a      	orrs	r2, r1
 800173e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	689a      	ldr	r2, [r3, #8]
 8001746:	4b29      	ldr	r3, [pc, #164]	; (80017ec <HAL_ADC_Init+0x1cc>)
 8001748:	4013      	ands	r3, r2
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	6812      	ldr	r2, [r2, #0]
 800174e:	68b9      	ldr	r1, [r7, #8]
 8001750:	430b      	orrs	r3, r1
 8001752:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800175c:	d003      	beq.n	8001766 <HAL_ADC_Init+0x146>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	2b01      	cmp	r3, #1
 8001764:	d104      	bne.n	8001770 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	691b      	ldr	r3, [r3, #16]
 800176a:	3b01      	subs	r3, #1
 800176c:	051b      	lsls	r3, r3, #20
 800176e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001776:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	68fa      	ldr	r2, [r7, #12]
 8001780:	430a      	orrs	r2, r1
 8001782:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	689a      	ldr	r2, [r3, #8]
 800178a:	4b19      	ldr	r3, [pc, #100]	; (80017f0 <HAL_ADC_Init+0x1d0>)
 800178c:	4013      	ands	r3, r2
 800178e:	68ba      	ldr	r2, [r7, #8]
 8001790:	429a      	cmp	r2, r3
 8001792:	d10b      	bne.n	80017ac <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2200      	movs	r2, #0
 8001798:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800179e:	f023 0303 	bic.w	r3, r3, #3
 80017a2:	f043 0201 	orr.w	r2, r3, #1
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80017aa:	e018      	b.n	80017de <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017b0:	f023 0312 	bic.w	r3, r3, #18
 80017b4:	f043 0210 	orr.w	r2, r3, #16
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c0:	f043 0201 	orr.w	r2, r3, #1
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80017cc:	e007      	b.n	80017de <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d2:	f043 0210 	orr.w	r2, r3, #16
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80017de:	7dfb      	ldrb	r3, [r7, #23]
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3718      	adds	r7, #24
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	40013c00 	.word	0x40013c00
 80017ec:	ffe1f7fd 	.word	0xffe1f7fd
 80017f0:	ff1f0efe 	.word	0xff1f0efe

080017f4 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017fc:	2300      	movs	r3, #0
 80017fe:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001806:	2b01      	cmp	r3, #1
 8001808:	d101      	bne.n	800180e <HAL_ADC_Start+0x1a>
 800180a:	2302      	movs	r3, #2
 800180c:	e098      	b.n	8001940 <HAL_ADC_Start+0x14c>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2201      	movs	r2, #1
 8001812:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f000 faa4 	bl	8001d64 <ADC_Enable>
 800181c:	4603      	mov	r3, r0
 800181e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001820:	7bfb      	ldrb	r3, [r7, #15]
 8001822:	2b00      	cmp	r3, #0
 8001824:	f040 8087 	bne.w	8001936 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800182c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001830:	f023 0301 	bic.w	r3, r3, #1
 8001834:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a41      	ldr	r2, [pc, #260]	; (8001948 <HAL_ADC_Start+0x154>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d105      	bne.n	8001852 <HAL_ADC_Start+0x5e>
 8001846:	4b41      	ldr	r3, [pc, #260]	; (800194c <HAL_ADC_Start+0x158>)
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d115      	bne.n	800187e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001856:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001868:	2b00      	cmp	r3, #0
 800186a:	d026      	beq.n	80018ba <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001870:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001874:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800187c:	e01d      	b.n	80018ba <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001882:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a2f      	ldr	r2, [pc, #188]	; (800194c <HAL_ADC_Start+0x158>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d004      	beq.n	800189e <HAL_ADC_Start+0xaa>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a2b      	ldr	r2, [pc, #172]	; (8001948 <HAL_ADC_Start+0x154>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d10d      	bne.n	80018ba <HAL_ADC_Start+0xc6>
 800189e:	4b2b      	ldr	r3, [pc, #172]	; (800194c <HAL_ADC_Start+0x158>)
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d007      	beq.n	80018ba <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ae:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80018b2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d006      	beq.n	80018d4 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ca:	f023 0206 	bic.w	r2, r3, #6
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	62da      	str	r2, [r3, #44]	; 0x2c
 80018d2:	e002      	b.n	80018da <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2200      	movs	r2, #0
 80018d8:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2200      	movs	r2, #0
 80018de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f06f 0202 	mvn.w	r2, #2
 80018ea:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80018f6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80018fa:	d113      	bne.n	8001924 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001900:	4a11      	ldr	r2, [pc, #68]	; (8001948 <HAL_ADC_Start+0x154>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d105      	bne.n	8001912 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001906:	4b11      	ldr	r3, [pc, #68]	; (800194c <HAL_ADC_Start+0x158>)
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800190e:	2b00      	cmp	r3, #0
 8001910:	d108      	bne.n	8001924 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	689a      	ldr	r2, [r3, #8]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001920:	609a      	str	r2, [r3, #8]
 8001922:	e00c      	b.n	800193e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	689a      	ldr	r2, [r3, #8]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001932:	609a      	str	r2, [r3, #8]
 8001934:	e003      	b.n	800193e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2200      	movs	r2, #0
 800193a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800193e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001940:	4618      	mov	r0, r3
 8001942:	3710      	adds	r7, #16
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	40012800 	.word	0x40012800
 800194c:	40012400 	.word	0x40012400

08001950 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001950:	b590      	push	{r4, r7, lr}
 8001952:	b087      	sub	sp, #28
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800195a:	2300      	movs	r3, #0
 800195c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800195e:	2300      	movs	r3, #0
 8001960:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001962:	2300      	movs	r3, #0
 8001964:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001966:	f7ff fe51 	bl	800160c <HAL_GetTick>
 800196a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001976:	2b00      	cmp	r3, #0
 8001978:	d00b      	beq.n	8001992 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800197e:	f043 0220 	orr.w	r2, r3, #32
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2200      	movs	r2, #0
 800198a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e0d3      	b.n	8001b3a <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800199c:	2b00      	cmp	r3, #0
 800199e:	d131      	bne.n	8001a04 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d12a      	bne.n	8001a04 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80019ae:	e021      	b.n	80019f4 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019b6:	d01d      	beq.n	80019f4 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d007      	beq.n	80019ce <HAL_ADC_PollForConversion+0x7e>
 80019be:	f7ff fe25 	bl	800160c <HAL_GetTick>
 80019c2:	4602      	mov	r2, r0
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	683a      	ldr	r2, [r7, #0]
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d212      	bcs.n	80019f4 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0302 	and.w	r3, r3, #2
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d10b      	bne.n	80019f4 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019e0:	f043 0204 	orr.w	r2, r3, #4
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2200      	movs	r2, #0
 80019ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 80019f0:	2303      	movs	r3, #3
 80019f2:	e0a2      	b.n	8001b3a <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d0d6      	beq.n	80019b0 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001a02:	e070      	b.n	8001ae6 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001a04:	4b4f      	ldr	r3, [pc, #316]	; (8001b44 <HAL_ADC_PollForConversion+0x1f4>)
 8001a06:	681c      	ldr	r4, [r3, #0]
 8001a08:	2002      	movs	r0, #2
 8001a0a:	f001 fb39 	bl	8003080 <HAL_RCCEx_GetPeriphCLKFreq>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	6919      	ldr	r1, [r3, #16]
 8001a1a:	4b4b      	ldr	r3, [pc, #300]	; (8001b48 <HAL_ADC_PollForConversion+0x1f8>)
 8001a1c:	400b      	ands	r3, r1
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d118      	bne.n	8001a54 <HAL_ADC_PollForConversion+0x104>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	68d9      	ldr	r1, [r3, #12]
 8001a28:	4b48      	ldr	r3, [pc, #288]	; (8001b4c <HAL_ADC_PollForConversion+0x1fc>)
 8001a2a:	400b      	ands	r3, r1
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d111      	bne.n	8001a54 <HAL_ADC_PollForConversion+0x104>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	6919      	ldr	r1, [r3, #16]
 8001a36:	4b46      	ldr	r3, [pc, #280]	; (8001b50 <HAL_ADC_PollForConversion+0x200>)
 8001a38:	400b      	ands	r3, r1
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d108      	bne.n	8001a50 <HAL_ADC_PollForConversion+0x100>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	68d9      	ldr	r1, [r3, #12]
 8001a44:	4b43      	ldr	r3, [pc, #268]	; (8001b54 <HAL_ADC_PollForConversion+0x204>)
 8001a46:	400b      	ands	r3, r1
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d101      	bne.n	8001a50 <HAL_ADC_PollForConversion+0x100>
 8001a4c:	2314      	movs	r3, #20
 8001a4e:	e020      	b.n	8001a92 <HAL_ADC_PollForConversion+0x142>
 8001a50:	2329      	movs	r3, #41	; 0x29
 8001a52:	e01e      	b.n	8001a92 <HAL_ADC_PollForConversion+0x142>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	6919      	ldr	r1, [r3, #16]
 8001a5a:	4b3d      	ldr	r3, [pc, #244]	; (8001b50 <HAL_ADC_PollForConversion+0x200>)
 8001a5c:	400b      	ands	r3, r1
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d106      	bne.n	8001a70 <HAL_ADC_PollForConversion+0x120>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	68d9      	ldr	r1, [r3, #12]
 8001a68:	4b3a      	ldr	r3, [pc, #232]	; (8001b54 <HAL_ADC_PollForConversion+0x204>)
 8001a6a:	400b      	ands	r3, r1
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d00d      	beq.n	8001a8c <HAL_ADC_PollForConversion+0x13c>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	6919      	ldr	r1, [r3, #16]
 8001a76:	4b38      	ldr	r3, [pc, #224]	; (8001b58 <HAL_ADC_PollForConversion+0x208>)
 8001a78:	400b      	ands	r3, r1
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d108      	bne.n	8001a90 <HAL_ADC_PollForConversion+0x140>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	68d9      	ldr	r1, [r3, #12]
 8001a84:	4b34      	ldr	r3, [pc, #208]	; (8001b58 <HAL_ADC_PollForConversion+0x208>)
 8001a86:	400b      	ands	r3, r1
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d101      	bne.n	8001a90 <HAL_ADC_PollForConversion+0x140>
 8001a8c:	2354      	movs	r3, #84	; 0x54
 8001a8e:	e000      	b.n	8001a92 <HAL_ADC_PollForConversion+0x142>
 8001a90:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001a92:	fb02 f303 	mul.w	r3, r2, r3
 8001a96:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001a98:	e021      	b.n	8001ade <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aa0:	d01a      	beq.n	8001ad8 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d007      	beq.n	8001ab8 <HAL_ADC_PollForConversion+0x168>
 8001aa8:	f7ff fdb0 	bl	800160c <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	683a      	ldr	r2, [r7, #0]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d20f      	bcs.n	8001ad8 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d90b      	bls.n	8001ad8 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac4:	f043 0204 	orr.w	r2, r3, #4
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	e030      	b.n	8001b3a <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	3301      	adds	r3, #1
 8001adc:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	693a      	ldr	r2, [r7, #16]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d8d9      	bhi.n	8001a9a <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f06f 0212 	mvn.w	r2, #18
 8001aee:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001b06:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001b0a:	d115      	bne.n	8001b38 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d111      	bne.n	8001b38 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b18:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d105      	bne.n	8001b38 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b30:	f043 0201 	orr.w	r2, r3, #1
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001b38:	2300      	movs	r3, #0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	371c      	adds	r7, #28
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd90      	pop	{r4, r7, pc}
 8001b42:	bf00      	nop
 8001b44:	20000000 	.word	0x20000000
 8001b48:	24924924 	.word	0x24924924
 8001b4c:	00924924 	.word	0x00924924
 8001b50:	12492492 	.word	0x12492492
 8001b54:	00492492 	.word	0x00492492
 8001b58:	00249249 	.word	0x00249249

08001b5c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	370c      	adds	r7, #12
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bc80      	pop	{r7}
 8001b72:	4770      	bx	lr

08001b74 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001b82:	2300      	movs	r3, #0
 8001b84:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d101      	bne.n	8001b94 <HAL_ADC_ConfigChannel+0x20>
 8001b90:	2302      	movs	r3, #2
 8001b92:	e0dc      	b.n	8001d4e <HAL_ADC_ConfigChannel+0x1da>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2201      	movs	r2, #1
 8001b98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	2b06      	cmp	r3, #6
 8001ba2:	d81c      	bhi.n	8001bde <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685a      	ldr	r2, [r3, #4]
 8001bae:	4613      	mov	r3, r2
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	4413      	add	r3, r2
 8001bb4:	3b05      	subs	r3, #5
 8001bb6:	221f      	movs	r2, #31
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	43db      	mvns	r3, r3
 8001bbe:	4019      	ands	r1, r3
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	6818      	ldr	r0, [r3, #0]
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685a      	ldr	r2, [r3, #4]
 8001bc8:	4613      	mov	r3, r2
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	4413      	add	r3, r2
 8001bce:	3b05      	subs	r3, #5
 8001bd0:	fa00 f203 	lsl.w	r2, r0, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	430a      	orrs	r2, r1
 8001bda:	635a      	str	r2, [r3, #52]	; 0x34
 8001bdc:	e03c      	b.n	8001c58 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	2b0c      	cmp	r3, #12
 8001be4:	d81c      	bhi.n	8001c20 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685a      	ldr	r2, [r3, #4]
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	4413      	add	r3, r2
 8001bf6:	3b23      	subs	r3, #35	; 0x23
 8001bf8:	221f      	movs	r2, #31
 8001bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfe:	43db      	mvns	r3, r3
 8001c00:	4019      	ands	r1, r3
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	6818      	ldr	r0, [r3, #0]
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	685a      	ldr	r2, [r3, #4]
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	4413      	add	r3, r2
 8001c10:	3b23      	subs	r3, #35	; 0x23
 8001c12:	fa00 f203 	lsl.w	r2, r0, r3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	430a      	orrs	r2, r1
 8001c1c:	631a      	str	r2, [r3, #48]	; 0x30
 8001c1e:	e01b      	b.n	8001c58 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685a      	ldr	r2, [r3, #4]
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	4413      	add	r3, r2
 8001c30:	3b41      	subs	r3, #65	; 0x41
 8001c32:	221f      	movs	r2, #31
 8001c34:	fa02 f303 	lsl.w	r3, r2, r3
 8001c38:	43db      	mvns	r3, r3
 8001c3a:	4019      	ands	r1, r3
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	6818      	ldr	r0, [r3, #0]
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685a      	ldr	r2, [r3, #4]
 8001c44:	4613      	mov	r3, r2
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	4413      	add	r3, r2
 8001c4a:	3b41      	subs	r3, #65	; 0x41
 8001c4c:	fa00 f203 	lsl.w	r2, r0, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	430a      	orrs	r2, r1
 8001c56:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2b09      	cmp	r3, #9
 8001c5e:	d91c      	bls.n	8001c9a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	68d9      	ldr	r1, [r3, #12]
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	4413      	add	r3, r2
 8001c70:	3b1e      	subs	r3, #30
 8001c72:	2207      	movs	r2, #7
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	43db      	mvns	r3, r3
 8001c7a:	4019      	ands	r1, r3
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	6898      	ldr	r0, [r3, #8]
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	4613      	mov	r3, r2
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	4413      	add	r3, r2
 8001c8a:	3b1e      	subs	r3, #30
 8001c8c:	fa00 f203 	lsl.w	r2, r0, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	430a      	orrs	r2, r1
 8001c96:	60da      	str	r2, [r3, #12]
 8001c98:	e019      	b.n	8001cce <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	6919      	ldr	r1, [r3, #16]
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	4413      	add	r3, r2
 8001caa:	2207      	movs	r2, #7
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	43db      	mvns	r3, r3
 8001cb2:	4019      	ands	r1, r3
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	6898      	ldr	r0, [r3, #8]
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	005b      	lsls	r3, r3, #1
 8001cc0:	4413      	add	r3, r2
 8001cc2:	fa00 f203 	lsl.w	r2, r0, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	430a      	orrs	r2, r1
 8001ccc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	2b10      	cmp	r3, #16
 8001cd4:	d003      	beq.n	8001cde <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001cda:	2b11      	cmp	r3, #17
 8001cdc:	d132      	bne.n	8001d44 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a1d      	ldr	r2, [pc, #116]	; (8001d58 <HAL_ADC_ConfigChannel+0x1e4>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d125      	bne.n	8001d34 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d126      	bne.n	8001d44 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	689a      	ldr	r2, [r3, #8]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001d04:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	2b10      	cmp	r3, #16
 8001d0c:	d11a      	bne.n	8001d44 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d0e:	4b13      	ldr	r3, [pc, #76]	; (8001d5c <HAL_ADC_ConfigChannel+0x1e8>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a13      	ldr	r2, [pc, #76]	; (8001d60 <HAL_ADC_ConfigChannel+0x1ec>)
 8001d14:	fba2 2303 	umull	r2, r3, r2, r3
 8001d18:	0c9a      	lsrs	r2, r3, #18
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	4413      	add	r3, r2
 8001d20:	005b      	lsls	r3, r3, #1
 8001d22:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d24:	e002      	b.n	8001d2c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	3b01      	subs	r3, #1
 8001d2a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d1f9      	bne.n	8001d26 <HAL_ADC_ConfigChannel+0x1b2>
 8001d32:	e007      	b.n	8001d44 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d38:	f043 0220 	orr.w	r2, r3, #32
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2200      	movs	r2, #0
 8001d48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3714      	adds	r7, #20
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bc80      	pop	{r7}
 8001d56:	4770      	bx	lr
 8001d58:	40012400 	.word	0x40012400
 8001d5c:	20000000 	.word	0x20000000
 8001d60:	431bde83 	.word	0x431bde83

08001d64 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001d70:	2300      	movs	r3, #0
 8001d72:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	f003 0301 	and.w	r3, r3, #1
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d040      	beq.n	8001e04 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	689a      	ldr	r2, [r3, #8]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f042 0201 	orr.w	r2, r2, #1
 8001d90:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d92:	4b1f      	ldr	r3, [pc, #124]	; (8001e10 <ADC_Enable+0xac>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a1f      	ldr	r2, [pc, #124]	; (8001e14 <ADC_Enable+0xb0>)
 8001d98:	fba2 2303 	umull	r2, r3, r2, r3
 8001d9c:	0c9b      	lsrs	r3, r3, #18
 8001d9e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001da0:	e002      	b.n	8001da8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	3b01      	subs	r3, #1
 8001da6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d1f9      	bne.n	8001da2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001dae:	f7ff fc2d 	bl	800160c <HAL_GetTick>
 8001db2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001db4:	e01f      	b.n	8001df6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001db6:	f7ff fc29 	bl	800160c <HAL_GetTick>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d918      	bls.n	8001df6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	f003 0301 	and.w	r3, r3, #1
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d011      	beq.n	8001df6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dd6:	f043 0210 	orr.w	r2, r3, #16
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de2:	f043 0201 	orr.w	r2, r3, #1
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e007      	b.n	8001e06 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	f003 0301 	and.w	r3, r3, #1
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d1d8      	bne.n	8001db6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3710      	adds	r7, #16
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	20000000 	.word	0x20000000
 8001e14:	431bde83 	.word	0x431bde83

08001e18 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e20:	2300      	movs	r3, #0
 8001e22:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d12e      	bne.n	8001e90 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	689a      	ldr	r2, [r3, #8]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f022 0201 	bic.w	r2, r2, #1
 8001e40:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001e42:	f7ff fbe3 	bl	800160c <HAL_GetTick>
 8001e46:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001e48:	e01b      	b.n	8001e82 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001e4a:	f7ff fbdf 	bl	800160c <HAL_GetTick>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d914      	bls.n	8001e82 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	f003 0301 	and.w	r3, r3, #1
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d10d      	bne.n	8001e82 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e6a:	f043 0210 	orr.w	r2, r3, #16
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e76:	f043 0201 	orr.w	r2, r3, #1
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e007      	b.n	8001e92 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	f003 0301 	and.w	r3, r3, #1
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d0dc      	beq.n	8001e4a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3710      	adds	r7, #16
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
	...

08001e9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b085      	sub	sp, #20
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f003 0307 	and.w	r3, r3, #7
 8001eaa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001eac:	4b0c      	ldr	r3, [pc, #48]	; (8001ee0 <__NVIC_SetPriorityGrouping+0x44>)
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eb2:	68ba      	ldr	r2, [r7, #8]
 8001eb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001eb8:	4013      	ands	r3, r2
 8001eba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ec4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ec8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ecc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ece:	4a04      	ldr	r2, [pc, #16]	; (8001ee0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	60d3      	str	r3, [r2, #12]
}
 8001ed4:	bf00      	nop
 8001ed6:	3714      	adds	r7, #20
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bc80      	pop	{r7}
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	e000ed00 	.word	0xe000ed00

08001ee4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ee8:	4b04      	ldr	r3, [pc, #16]	; (8001efc <__NVIC_GetPriorityGrouping+0x18>)
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	0a1b      	lsrs	r3, r3, #8
 8001eee:	f003 0307 	and.w	r3, r3, #7
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bc80      	pop	{r7}
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	e000ed00 	.word	0xe000ed00

08001f00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	4603      	mov	r3, r0
 8001f08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	db0b      	blt.n	8001f2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f12:	79fb      	ldrb	r3, [r7, #7]
 8001f14:	f003 021f 	and.w	r2, r3, #31
 8001f18:	4906      	ldr	r1, [pc, #24]	; (8001f34 <__NVIC_EnableIRQ+0x34>)
 8001f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1e:	095b      	lsrs	r3, r3, #5
 8001f20:	2001      	movs	r0, #1
 8001f22:	fa00 f202 	lsl.w	r2, r0, r2
 8001f26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f2a:	bf00      	nop
 8001f2c:	370c      	adds	r7, #12
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bc80      	pop	{r7}
 8001f32:	4770      	bx	lr
 8001f34:	e000e100 	.word	0xe000e100

08001f38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	4603      	mov	r3, r0
 8001f40:	6039      	str	r1, [r7, #0]
 8001f42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	db0a      	blt.n	8001f62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	b2da      	uxtb	r2, r3
 8001f50:	490c      	ldr	r1, [pc, #48]	; (8001f84 <__NVIC_SetPriority+0x4c>)
 8001f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f56:	0112      	lsls	r2, r2, #4
 8001f58:	b2d2      	uxtb	r2, r2
 8001f5a:	440b      	add	r3, r1
 8001f5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f60:	e00a      	b.n	8001f78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	b2da      	uxtb	r2, r3
 8001f66:	4908      	ldr	r1, [pc, #32]	; (8001f88 <__NVIC_SetPriority+0x50>)
 8001f68:	79fb      	ldrb	r3, [r7, #7]
 8001f6a:	f003 030f 	and.w	r3, r3, #15
 8001f6e:	3b04      	subs	r3, #4
 8001f70:	0112      	lsls	r2, r2, #4
 8001f72:	b2d2      	uxtb	r2, r2
 8001f74:	440b      	add	r3, r1
 8001f76:	761a      	strb	r2, [r3, #24]
}
 8001f78:	bf00      	nop
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bc80      	pop	{r7}
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	e000e100 	.word	0xe000e100
 8001f88:	e000ed00 	.word	0xe000ed00

08001f8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b089      	sub	sp, #36	; 0x24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	60b9      	str	r1, [r7, #8]
 8001f96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f003 0307 	and.w	r3, r3, #7
 8001f9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	f1c3 0307 	rsb	r3, r3, #7
 8001fa6:	2b04      	cmp	r3, #4
 8001fa8:	bf28      	it	cs
 8001faa:	2304      	movcs	r3, #4
 8001fac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	3304      	adds	r3, #4
 8001fb2:	2b06      	cmp	r3, #6
 8001fb4:	d902      	bls.n	8001fbc <NVIC_EncodePriority+0x30>
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	3b03      	subs	r3, #3
 8001fba:	e000      	b.n	8001fbe <NVIC_EncodePriority+0x32>
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fc0:	f04f 32ff 	mov.w	r2, #4294967295
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fca:	43da      	mvns	r2, r3
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	401a      	ands	r2, r3
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fd4:	f04f 31ff 	mov.w	r1, #4294967295
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	fa01 f303 	lsl.w	r3, r1, r3
 8001fde:	43d9      	mvns	r1, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fe4:	4313      	orrs	r3, r2
         );
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3724      	adds	r7, #36	; 0x24
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bc80      	pop	{r7}
 8001fee:	4770      	bx	lr

08001ff0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002000:	d301      	bcc.n	8002006 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002002:	2301      	movs	r3, #1
 8002004:	e00f      	b.n	8002026 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002006:	4a0a      	ldr	r2, [pc, #40]	; (8002030 <SysTick_Config+0x40>)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	3b01      	subs	r3, #1
 800200c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800200e:	210f      	movs	r1, #15
 8002010:	f04f 30ff 	mov.w	r0, #4294967295
 8002014:	f7ff ff90 	bl	8001f38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002018:	4b05      	ldr	r3, [pc, #20]	; (8002030 <SysTick_Config+0x40>)
 800201a:	2200      	movs	r2, #0
 800201c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800201e:	4b04      	ldr	r3, [pc, #16]	; (8002030 <SysTick_Config+0x40>)
 8002020:	2207      	movs	r2, #7
 8002022:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	e000e010 	.word	0xe000e010

08002034 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f7ff ff2d 	bl	8001e9c <__NVIC_SetPriorityGrouping>
}
 8002042:	bf00      	nop
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}

0800204a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800204a:	b580      	push	{r7, lr}
 800204c:	b086      	sub	sp, #24
 800204e:	af00      	add	r7, sp, #0
 8002050:	4603      	mov	r3, r0
 8002052:	60b9      	str	r1, [r7, #8]
 8002054:	607a      	str	r2, [r7, #4]
 8002056:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002058:	2300      	movs	r3, #0
 800205a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800205c:	f7ff ff42 	bl	8001ee4 <__NVIC_GetPriorityGrouping>
 8002060:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	68b9      	ldr	r1, [r7, #8]
 8002066:	6978      	ldr	r0, [r7, #20]
 8002068:	f7ff ff90 	bl	8001f8c <NVIC_EncodePriority>
 800206c:	4602      	mov	r2, r0
 800206e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002072:	4611      	mov	r1, r2
 8002074:	4618      	mov	r0, r3
 8002076:	f7ff ff5f 	bl	8001f38 <__NVIC_SetPriority>
}
 800207a:	bf00      	nop
 800207c:	3718      	adds	r7, #24
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002082:	b580      	push	{r7, lr}
 8002084:	b082      	sub	sp, #8
 8002086:	af00      	add	r7, sp, #0
 8002088:	4603      	mov	r3, r0
 800208a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800208c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002090:	4618      	mov	r0, r3
 8002092:	f7ff ff35 	bl	8001f00 <__NVIC_EnableIRQ>
}
 8002096:	bf00      	nop
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}

0800209e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800209e:	b580      	push	{r7, lr}
 80020a0:	b082      	sub	sp, #8
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f7ff ffa2 	bl	8001ff0 <SysTick_Config>
 80020ac:	4603      	mov	r3, r0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80020b6:	b480      	push	{r7}
 80020b8:	b085      	sub	sp, #20
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020be:	2300      	movs	r3, #0
 80020c0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	d008      	beq.n	80020de <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2204      	movs	r2, #4
 80020d0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e020      	b.n	8002120 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f022 020e 	bic.w	r2, r2, #14
 80020ec:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f022 0201 	bic.w	r2, r2, #1
 80020fc:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002106:	2101      	movs	r1, #1
 8002108:	fa01 f202 	lsl.w	r2, r1, r2
 800210c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2201      	movs	r2, #1
 8002112:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800211e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002120:	4618      	mov	r0, r3
 8002122:	3714      	adds	r7, #20
 8002124:	46bd      	mov	sp, r7
 8002126:	bc80      	pop	{r7}
 8002128:	4770      	bx	lr
	...

0800212c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002134:	2300      	movs	r3, #0
 8002136:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800213e:	2b02      	cmp	r3, #2
 8002140:	d005      	beq.n	800214e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2204      	movs	r2, #4
 8002146:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	73fb      	strb	r3, [r7, #15]
 800214c:	e0d6      	b.n	80022fc <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f022 020e 	bic.w	r2, r2, #14
 800215c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f022 0201 	bic.w	r2, r2, #1
 800216c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	461a      	mov	r2, r3
 8002174:	4b64      	ldr	r3, [pc, #400]	; (8002308 <HAL_DMA_Abort_IT+0x1dc>)
 8002176:	429a      	cmp	r2, r3
 8002178:	d958      	bls.n	800222c <HAL_DMA_Abort_IT+0x100>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a63      	ldr	r2, [pc, #396]	; (800230c <HAL_DMA_Abort_IT+0x1e0>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d04f      	beq.n	8002224 <HAL_DMA_Abort_IT+0xf8>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a61      	ldr	r2, [pc, #388]	; (8002310 <HAL_DMA_Abort_IT+0x1e4>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d048      	beq.n	8002220 <HAL_DMA_Abort_IT+0xf4>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a60      	ldr	r2, [pc, #384]	; (8002314 <HAL_DMA_Abort_IT+0x1e8>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d040      	beq.n	800221a <HAL_DMA_Abort_IT+0xee>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a5e      	ldr	r2, [pc, #376]	; (8002318 <HAL_DMA_Abort_IT+0x1ec>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d038      	beq.n	8002214 <HAL_DMA_Abort_IT+0xe8>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a5d      	ldr	r2, [pc, #372]	; (800231c <HAL_DMA_Abort_IT+0x1f0>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d030      	beq.n	800220e <HAL_DMA_Abort_IT+0xe2>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a5b      	ldr	r2, [pc, #364]	; (8002320 <HAL_DMA_Abort_IT+0x1f4>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d028      	beq.n	8002208 <HAL_DMA_Abort_IT+0xdc>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a53      	ldr	r2, [pc, #332]	; (8002308 <HAL_DMA_Abort_IT+0x1dc>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d020      	beq.n	8002202 <HAL_DMA_Abort_IT+0xd6>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a57      	ldr	r2, [pc, #348]	; (8002324 <HAL_DMA_Abort_IT+0x1f8>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d019      	beq.n	80021fe <HAL_DMA_Abort_IT+0xd2>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a56      	ldr	r2, [pc, #344]	; (8002328 <HAL_DMA_Abort_IT+0x1fc>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d012      	beq.n	80021fa <HAL_DMA_Abort_IT+0xce>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a54      	ldr	r2, [pc, #336]	; (800232c <HAL_DMA_Abort_IT+0x200>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d00a      	beq.n	80021f4 <HAL_DMA_Abort_IT+0xc8>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a53      	ldr	r2, [pc, #332]	; (8002330 <HAL_DMA_Abort_IT+0x204>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d102      	bne.n	80021ee <HAL_DMA_Abort_IT+0xc2>
 80021e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021ec:	e01b      	b.n	8002226 <HAL_DMA_Abort_IT+0xfa>
 80021ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021f2:	e018      	b.n	8002226 <HAL_DMA_Abort_IT+0xfa>
 80021f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021f8:	e015      	b.n	8002226 <HAL_DMA_Abort_IT+0xfa>
 80021fa:	2310      	movs	r3, #16
 80021fc:	e013      	b.n	8002226 <HAL_DMA_Abort_IT+0xfa>
 80021fe:	2301      	movs	r3, #1
 8002200:	e011      	b.n	8002226 <HAL_DMA_Abort_IT+0xfa>
 8002202:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002206:	e00e      	b.n	8002226 <HAL_DMA_Abort_IT+0xfa>
 8002208:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800220c:	e00b      	b.n	8002226 <HAL_DMA_Abort_IT+0xfa>
 800220e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002212:	e008      	b.n	8002226 <HAL_DMA_Abort_IT+0xfa>
 8002214:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002218:	e005      	b.n	8002226 <HAL_DMA_Abort_IT+0xfa>
 800221a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800221e:	e002      	b.n	8002226 <HAL_DMA_Abort_IT+0xfa>
 8002220:	2310      	movs	r3, #16
 8002222:	e000      	b.n	8002226 <HAL_DMA_Abort_IT+0xfa>
 8002224:	2301      	movs	r3, #1
 8002226:	4a43      	ldr	r2, [pc, #268]	; (8002334 <HAL_DMA_Abort_IT+0x208>)
 8002228:	6053      	str	r3, [r2, #4]
 800222a:	e057      	b.n	80022dc <HAL_DMA_Abort_IT+0x1b0>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a36      	ldr	r2, [pc, #216]	; (800230c <HAL_DMA_Abort_IT+0x1e0>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d04f      	beq.n	80022d6 <HAL_DMA_Abort_IT+0x1aa>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a35      	ldr	r2, [pc, #212]	; (8002310 <HAL_DMA_Abort_IT+0x1e4>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d048      	beq.n	80022d2 <HAL_DMA_Abort_IT+0x1a6>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a33      	ldr	r2, [pc, #204]	; (8002314 <HAL_DMA_Abort_IT+0x1e8>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d040      	beq.n	80022cc <HAL_DMA_Abort_IT+0x1a0>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a32      	ldr	r2, [pc, #200]	; (8002318 <HAL_DMA_Abort_IT+0x1ec>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d038      	beq.n	80022c6 <HAL_DMA_Abort_IT+0x19a>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a30      	ldr	r2, [pc, #192]	; (800231c <HAL_DMA_Abort_IT+0x1f0>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d030      	beq.n	80022c0 <HAL_DMA_Abort_IT+0x194>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a2f      	ldr	r2, [pc, #188]	; (8002320 <HAL_DMA_Abort_IT+0x1f4>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d028      	beq.n	80022ba <HAL_DMA_Abort_IT+0x18e>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a26      	ldr	r2, [pc, #152]	; (8002308 <HAL_DMA_Abort_IT+0x1dc>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d020      	beq.n	80022b4 <HAL_DMA_Abort_IT+0x188>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a2b      	ldr	r2, [pc, #172]	; (8002324 <HAL_DMA_Abort_IT+0x1f8>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d019      	beq.n	80022b0 <HAL_DMA_Abort_IT+0x184>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a29      	ldr	r2, [pc, #164]	; (8002328 <HAL_DMA_Abort_IT+0x1fc>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d012      	beq.n	80022ac <HAL_DMA_Abort_IT+0x180>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a28      	ldr	r2, [pc, #160]	; (800232c <HAL_DMA_Abort_IT+0x200>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d00a      	beq.n	80022a6 <HAL_DMA_Abort_IT+0x17a>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a26      	ldr	r2, [pc, #152]	; (8002330 <HAL_DMA_Abort_IT+0x204>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d102      	bne.n	80022a0 <HAL_DMA_Abort_IT+0x174>
 800229a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800229e:	e01b      	b.n	80022d8 <HAL_DMA_Abort_IT+0x1ac>
 80022a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022a4:	e018      	b.n	80022d8 <HAL_DMA_Abort_IT+0x1ac>
 80022a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022aa:	e015      	b.n	80022d8 <HAL_DMA_Abort_IT+0x1ac>
 80022ac:	2310      	movs	r3, #16
 80022ae:	e013      	b.n	80022d8 <HAL_DMA_Abort_IT+0x1ac>
 80022b0:	2301      	movs	r3, #1
 80022b2:	e011      	b.n	80022d8 <HAL_DMA_Abort_IT+0x1ac>
 80022b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022b8:	e00e      	b.n	80022d8 <HAL_DMA_Abort_IT+0x1ac>
 80022ba:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80022be:	e00b      	b.n	80022d8 <HAL_DMA_Abort_IT+0x1ac>
 80022c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022c4:	e008      	b.n	80022d8 <HAL_DMA_Abort_IT+0x1ac>
 80022c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022ca:	e005      	b.n	80022d8 <HAL_DMA_Abort_IT+0x1ac>
 80022cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022d0:	e002      	b.n	80022d8 <HAL_DMA_Abort_IT+0x1ac>
 80022d2:	2310      	movs	r3, #16
 80022d4:	e000      	b.n	80022d8 <HAL_DMA_Abort_IT+0x1ac>
 80022d6:	2301      	movs	r3, #1
 80022d8:	4a17      	ldr	r2, [pc, #92]	; (8002338 <HAL_DMA_Abort_IT+0x20c>)
 80022da:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2201      	movs	r2, #1
 80022e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d003      	beq.n	80022fc <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	4798      	blx	r3
    } 
  }
  return status;
 80022fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3710      	adds	r7, #16
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	40020080 	.word	0x40020080
 800230c:	40020008 	.word	0x40020008
 8002310:	4002001c 	.word	0x4002001c
 8002314:	40020030 	.word	0x40020030
 8002318:	40020044 	.word	0x40020044
 800231c:	40020058 	.word	0x40020058
 8002320:	4002006c 	.word	0x4002006c
 8002324:	40020408 	.word	0x40020408
 8002328:	4002041c 	.word	0x4002041c
 800232c:	40020430 	.word	0x40020430
 8002330:	40020444 	.word	0x40020444
 8002334:	40020400 	.word	0x40020400
 8002338:	40020000 	.word	0x40020000

0800233c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800233c:	b480      	push	{r7}
 800233e:	b08b      	sub	sp, #44	; 0x2c
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002346:	2300      	movs	r3, #0
 8002348:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800234a:	2300      	movs	r3, #0
 800234c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800234e:	e179      	b.n	8002644 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002350:	2201      	movs	r2, #1
 8002352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	69fa      	ldr	r2, [r7, #28]
 8002360:	4013      	ands	r3, r2
 8002362:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	429a      	cmp	r2, r3
 800236a:	f040 8168 	bne.w	800263e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	4aa0      	ldr	r2, [pc, #640]	; (80025f4 <HAL_GPIO_Init+0x2b8>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d05e      	beq.n	8002436 <HAL_GPIO_Init+0xfa>
 8002378:	4a9e      	ldr	r2, [pc, #632]	; (80025f4 <HAL_GPIO_Init+0x2b8>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d875      	bhi.n	800246a <HAL_GPIO_Init+0x12e>
 800237e:	4a9e      	ldr	r2, [pc, #632]	; (80025f8 <HAL_GPIO_Init+0x2bc>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d058      	beq.n	8002436 <HAL_GPIO_Init+0xfa>
 8002384:	4a9c      	ldr	r2, [pc, #624]	; (80025f8 <HAL_GPIO_Init+0x2bc>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d86f      	bhi.n	800246a <HAL_GPIO_Init+0x12e>
 800238a:	4a9c      	ldr	r2, [pc, #624]	; (80025fc <HAL_GPIO_Init+0x2c0>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d052      	beq.n	8002436 <HAL_GPIO_Init+0xfa>
 8002390:	4a9a      	ldr	r2, [pc, #616]	; (80025fc <HAL_GPIO_Init+0x2c0>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d869      	bhi.n	800246a <HAL_GPIO_Init+0x12e>
 8002396:	4a9a      	ldr	r2, [pc, #616]	; (8002600 <HAL_GPIO_Init+0x2c4>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d04c      	beq.n	8002436 <HAL_GPIO_Init+0xfa>
 800239c:	4a98      	ldr	r2, [pc, #608]	; (8002600 <HAL_GPIO_Init+0x2c4>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d863      	bhi.n	800246a <HAL_GPIO_Init+0x12e>
 80023a2:	4a98      	ldr	r2, [pc, #608]	; (8002604 <HAL_GPIO_Init+0x2c8>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d046      	beq.n	8002436 <HAL_GPIO_Init+0xfa>
 80023a8:	4a96      	ldr	r2, [pc, #600]	; (8002604 <HAL_GPIO_Init+0x2c8>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d85d      	bhi.n	800246a <HAL_GPIO_Init+0x12e>
 80023ae:	2b12      	cmp	r3, #18
 80023b0:	d82a      	bhi.n	8002408 <HAL_GPIO_Init+0xcc>
 80023b2:	2b12      	cmp	r3, #18
 80023b4:	d859      	bhi.n	800246a <HAL_GPIO_Init+0x12e>
 80023b6:	a201      	add	r2, pc, #4	; (adr r2, 80023bc <HAL_GPIO_Init+0x80>)
 80023b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023bc:	08002437 	.word	0x08002437
 80023c0:	08002411 	.word	0x08002411
 80023c4:	08002423 	.word	0x08002423
 80023c8:	08002465 	.word	0x08002465
 80023cc:	0800246b 	.word	0x0800246b
 80023d0:	0800246b 	.word	0x0800246b
 80023d4:	0800246b 	.word	0x0800246b
 80023d8:	0800246b 	.word	0x0800246b
 80023dc:	0800246b 	.word	0x0800246b
 80023e0:	0800246b 	.word	0x0800246b
 80023e4:	0800246b 	.word	0x0800246b
 80023e8:	0800246b 	.word	0x0800246b
 80023ec:	0800246b 	.word	0x0800246b
 80023f0:	0800246b 	.word	0x0800246b
 80023f4:	0800246b 	.word	0x0800246b
 80023f8:	0800246b 	.word	0x0800246b
 80023fc:	0800246b 	.word	0x0800246b
 8002400:	08002419 	.word	0x08002419
 8002404:	0800242d 	.word	0x0800242d
 8002408:	4a7f      	ldr	r2, [pc, #508]	; (8002608 <HAL_GPIO_Init+0x2cc>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d013      	beq.n	8002436 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800240e:	e02c      	b.n	800246a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	623b      	str	r3, [r7, #32]
          break;
 8002416:	e029      	b.n	800246c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	3304      	adds	r3, #4
 800241e:	623b      	str	r3, [r7, #32]
          break;
 8002420:	e024      	b.n	800246c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	3308      	adds	r3, #8
 8002428:	623b      	str	r3, [r7, #32]
          break;
 800242a:	e01f      	b.n	800246c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	330c      	adds	r3, #12
 8002432:	623b      	str	r3, [r7, #32]
          break;
 8002434:	e01a      	b.n	800246c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d102      	bne.n	8002444 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800243e:	2304      	movs	r3, #4
 8002440:	623b      	str	r3, [r7, #32]
          break;
 8002442:	e013      	b.n	800246c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	2b01      	cmp	r3, #1
 800244a:	d105      	bne.n	8002458 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800244c:	2308      	movs	r3, #8
 800244e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	69fa      	ldr	r2, [r7, #28]
 8002454:	611a      	str	r2, [r3, #16]
          break;
 8002456:	e009      	b.n	800246c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002458:	2308      	movs	r3, #8
 800245a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	69fa      	ldr	r2, [r7, #28]
 8002460:	615a      	str	r2, [r3, #20]
          break;
 8002462:	e003      	b.n	800246c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002464:	2300      	movs	r3, #0
 8002466:	623b      	str	r3, [r7, #32]
          break;
 8002468:	e000      	b.n	800246c <HAL_GPIO_Init+0x130>
          break;
 800246a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	2bff      	cmp	r3, #255	; 0xff
 8002470:	d801      	bhi.n	8002476 <HAL_GPIO_Init+0x13a>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	e001      	b.n	800247a <HAL_GPIO_Init+0x13e>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	3304      	adds	r3, #4
 800247a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	2bff      	cmp	r3, #255	; 0xff
 8002480:	d802      	bhi.n	8002488 <HAL_GPIO_Init+0x14c>
 8002482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	e002      	b.n	800248e <HAL_GPIO_Init+0x152>
 8002488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248a:	3b08      	subs	r3, #8
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	210f      	movs	r1, #15
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	fa01 f303 	lsl.w	r3, r1, r3
 800249c:	43db      	mvns	r3, r3
 800249e:	401a      	ands	r2, r3
 80024a0:	6a39      	ldr	r1, [r7, #32]
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	fa01 f303 	lsl.w	r3, r1, r3
 80024a8:	431a      	orrs	r2, r3
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	f000 80c1 	beq.w	800263e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80024bc:	4b53      	ldr	r3, [pc, #332]	; (800260c <HAL_GPIO_Init+0x2d0>)
 80024be:	699b      	ldr	r3, [r3, #24]
 80024c0:	4a52      	ldr	r2, [pc, #328]	; (800260c <HAL_GPIO_Init+0x2d0>)
 80024c2:	f043 0301 	orr.w	r3, r3, #1
 80024c6:	6193      	str	r3, [r2, #24]
 80024c8:	4b50      	ldr	r3, [pc, #320]	; (800260c <HAL_GPIO_Init+0x2d0>)
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	f003 0301 	and.w	r3, r3, #1
 80024d0:	60bb      	str	r3, [r7, #8]
 80024d2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80024d4:	4a4e      	ldr	r2, [pc, #312]	; (8002610 <HAL_GPIO_Init+0x2d4>)
 80024d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d8:	089b      	lsrs	r3, r3, #2
 80024da:	3302      	adds	r3, #2
 80024dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024e0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80024e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e4:	f003 0303 	and.w	r3, r3, #3
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	220f      	movs	r2, #15
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	43db      	mvns	r3, r3
 80024f2:	68fa      	ldr	r2, [r7, #12]
 80024f4:	4013      	ands	r3, r2
 80024f6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	4a46      	ldr	r2, [pc, #280]	; (8002614 <HAL_GPIO_Init+0x2d8>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d01f      	beq.n	8002540 <HAL_GPIO_Init+0x204>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	4a45      	ldr	r2, [pc, #276]	; (8002618 <HAL_GPIO_Init+0x2dc>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d019      	beq.n	800253c <HAL_GPIO_Init+0x200>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	4a44      	ldr	r2, [pc, #272]	; (800261c <HAL_GPIO_Init+0x2e0>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d013      	beq.n	8002538 <HAL_GPIO_Init+0x1fc>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4a43      	ldr	r2, [pc, #268]	; (8002620 <HAL_GPIO_Init+0x2e4>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d00d      	beq.n	8002534 <HAL_GPIO_Init+0x1f8>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	4a42      	ldr	r2, [pc, #264]	; (8002624 <HAL_GPIO_Init+0x2e8>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d007      	beq.n	8002530 <HAL_GPIO_Init+0x1f4>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	4a41      	ldr	r2, [pc, #260]	; (8002628 <HAL_GPIO_Init+0x2ec>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d101      	bne.n	800252c <HAL_GPIO_Init+0x1f0>
 8002528:	2305      	movs	r3, #5
 800252a:	e00a      	b.n	8002542 <HAL_GPIO_Init+0x206>
 800252c:	2306      	movs	r3, #6
 800252e:	e008      	b.n	8002542 <HAL_GPIO_Init+0x206>
 8002530:	2304      	movs	r3, #4
 8002532:	e006      	b.n	8002542 <HAL_GPIO_Init+0x206>
 8002534:	2303      	movs	r3, #3
 8002536:	e004      	b.n	8002542 <HAL_GPIO_Init+0x206>
 8002538:	2302      	movs	r3, #2
 800253a:	e002      	b.n	8002542 <HAL_GPIO_Init+0x206>
 800253c:	2301      	movs	r3, #1
 800253e:	e000      	b.n	8002542 <HAL_GPIO_Init+0x206>
 8002540:	2300      	movs	r3, #0
 8002542:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002544:	f002 0203 	and.w	r2, r2, #3
 8002548:	0092      	lsls	r2, r2, #2
 800254a:	4093      	lsls	r3, r2
 800254c:	68fa      	ldr	r2, [r7, #12]
 800254e:	4313      	orrs	r3, r2
 8002550:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002552:	492f      	ldr	r1, [pc, #188]	; (8002610 <HAL_GPIO_Init+0x2d4>)
 8002554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002556:	089b      	lsrs	r3, r3, #2
 8002558:	3302      	adds	r3, #2
 800255a:	68fa      	ldr	r2, [r7, #12]
 800255c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d006      	beq.n	800257a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800256c:	4b2f      	ldr	r3, [pc, #188]	; (800262c <HAL_GPIO_Init+0x2f0>)
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	492e      	ldr	r1, [pc, #184]	; (800262c <HAL_GPIO_Init+0x2f0>)
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	4313      	orrs	r3, r2
 8002576:	600b      	str	r3, [r1, #0]
 8002578:	e006      	b.n	8002588 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800257a:	4b2c      	ldr	r3, [pc, #176]	; (800262c <HAL_GPIO_Init+0x2f0>)
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	43db      	mvns	r3, r3
 8002582:	492a      	ldr	r1, [pc, #168]	; (800262c <HAL_GPIO_Init+0x2f0>)
 8002584:	4013      	ands	r3, r2
 8002586:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d006      	beq.n	80025a2 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002594:	4b25      	ldr	r3, [pc, #148]	; (800262c <HAL_GPIO_Init+0x2f0>)
 8002596:	685a      	ldr	r2, [r3, #4]
 8002598:	4924      	ldr	r1, [pc, #144]	; (800262c <HAL_GPIO_Init+0x2f0>)
 800259a:	69bb      	ldr	r3, [r7, #24]
 800259c:	4313      	orrs	r3, r2
 800259e:	604b      	str	r3, [r1, #4]
 80025a0:	e006      	b.n	80025b0 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80025a2:	4b22      	ldr	r3, [pc, #136]	; (800262c <HAL_GPIO_Init+0x2f0>)
 80025a4:	685a      	ldr	r2, [r3, #4]
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	43db      	mvns	r3, r3
 80025aa:	4920      	ldr	r1, [pc, #128]	; (800262c <HAL_GPIO_Init+0x2f0>)
 80025ac:	4013      	ands	r3, r2
 80025ae:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d006      	beq.n	80025ca <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80025bc:	4b1b      	ldr	r3, [pc, #108]	; (800262c <HAL_GPIO_Init+0x2f0>)
 80025be:	689a      	ldr	r2, [r3, #8]
 80025c0:	491a      	ldr	r1, [pc, #104]	; (800262c <HAL_GPIO_Init+0x2f0>)
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	608b      	str	r3, [r1, #8]
 80025c8:	e006      	b.n	80025d8 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80025ca:	4b18      	ldr	r3, [pc, #96]	; (800262c <HAL_GPIO_Init+0x2f0>)
 80025cc:	689a      	ldr	r2, [r3, #8]
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	43db      	mvns	r3, r3
 80025d2:	4916      	ldr	r1, [pc, #88]	; (800262c <HAL_GPIO_Init+0x2f0>)
 80025d4:	4013      	ands	r3, r2
 80025d6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d025      	beq.n	8002630 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80025e4:	4b11      	ldr	r3, [pc, #68]	; (800262c <HAL_GPIO_Init+0x2f0>)
 80025e6:	68da      	ldr	r2, [r3, #12]
 80025e8:	4910      	ldr	r1, [pc, #64]	; (800262c <HAL_GPIO_Init+0x2f0>)
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	60cb      	str	r3, [r1, #12]
 80025f0:	e025      	b.n	800263e <HAL_GPIO_Init+0x302>
 80025f2:	bf00      	nop
 80025f4:	10320000 	.word	0x10320000
 80025f8:	10310000 	.word	0x10310000
 80025fc:	10220000 	.word	0x10220000
 8002600:	10210000 	.word	0x10210000
 8002604:	10120000 	.word	0x10120000
 8002608:	10110000 	.word	0x10110000
 800260c:	40021000 	.word	0x40021000
 8002610:	40010000 	.word	0x40010000
 8002614:	40010800 	.word	0x40010800
 8002618:	40010c00 	.word	0x40010c00
 800261c:	40011000 	.word	0x40011000
 8002620:	40011400 	.word	0x40011400
 8002624:	40011800 	.word	0x40011800
 8002628:	40011c00 	.word	0x40011c00
 800262c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002630:	4b0b      	ldr	r3, [pc, #44]	; (8002660 <HAL_GPIO_Init+0x324>)
 8002632:	68da      	ldr	r2, [r3, #12]
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	43db      	mvns	r3, r3
 8002638:	4909      	ldr	r1, [pc, #36]	; (8002660 <HAL_GPIO_Init+0x324>)
 800263a:	4013      	ands	r3, r2
 800263c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800263e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002640:	3301      	adds	r3, #1
 8002642:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264a:	fa22 f303 	lsr.w	r3, r2, r3
 800264e:	2b00      	cmp	r3, #0
 8002650:	f47f ae7e 	bne.w	8002350 <HAL_GPIO_Init+0x14>
  }
}
 8002654:	bf00      	nop
 8002656:	bf00      	nop
 8002658:	372c      	adds	r7, #44	; 0x2c
 800265a:	46bd      	mov	sp, r7
 800265c:	bc80      	pop	{r7}
 800265e:	4770      	bx	lr
 8002660:	40010400 	.word	0x40010400

08002664 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	460b      	mov	r3, r1
 800266e:	807b      	strh	r3, [r7, #2]
 8002670:	4613      	mov	r3, r2
 8002672:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002674:	787b      	ldrb	r3, [r7, #1]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d003      	beq.n	8002682 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800267a:	887a      	ldrh	r2, [r7, #2]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002680:	e003      	b.n	800268a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002682:	887b      	ldrh	r3, [r7, #2]
 8002684:	041a      	lsls	r2, r3, #16
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	611a      	str	r2, [r3, #16]
}
 800268a:	bf00      	nop
 800268c:	370c      	adds	r7, #12
 800268e:	46bd      	mov	sp, r7
 8002690:	bc80      	pop	{r7}
 8002692:	4770      	bx	lr

08002694 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002694:	b480      	push	{r7}
 8002696:	b085      	sub	sp, #20
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	460b      	mov	r3, r1
 800269e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80026a6:	887a      	ldrh	r2, [r7, #2]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	4013      	ands	r3, r2
 80026ac:	041a      	lsls	r2, r3, #16
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	43d9      	mvns	r1, r3
 80026b2:	887b      	ldrh	r3, [r7, #2]
 80026b4:	400b      	ands	r3, r1
 80026b6:	431a      	orrs	r2, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	611a      	str	r2, [r3, #16]
}
 80026bc:	bf00      	nop
 80026be:	3714      	adds	r7, #20
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bc80      	pop	{r7}
 80026c4:	4770      	bx	lr
	...

080026c8 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80026cc:	4b03      	ldr	r3, [pc, #12]	; (80026dc <HAL_PWR_EnableBkUpAccess+0x14>)
 80026ce:	2201      	movs	r2, #1
 80026d0:	601a      	str	r2, [r3, #0]
}
 80026d2:	bf00      	nop
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bc80      	pop	{r7}
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	420e0020 	.word	0x420e0020

080026e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b086      	sub	sp, #24
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d101      	bne.n	80026f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e26c      	b.n	8002bcc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0301 	and.w	r3, r3, #1
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	f000 8087 	beq.w	800280e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002700:	4b92      	ldr	r3, [pc, #584]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f003 030c 	and.w	r3, r3, #12
 8002708:	2b04      	cmp	r3, #4
 800270a:	d00c      	beq.n	8002726 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800270c:	4b8f      	ldr	r3, [pc, #572]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f003 030c 	and.w	r3, r3, #12
 8002714:	2b08      	cmp	r3, #8
 8002716:	d112      	bne.n	800273e <HAL_RCC_OscConfig+0x5e>
 8002718:	4b8c      	ldr	r3, [pc, #560]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002720:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002724:	d10b      	bne.n	800273e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002726:	4b89      	ldr	r3, [pc, #548]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d06c      	beq.n	800280c <HAL_RCC_OscConfig+0x12c>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d168      	bne.n	800280c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e246      	b.n	8002bcc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002746:	d106      	bne.n	8002756 <HAL_RCC_OscConfig+0x76>
 8002748:	4b80      	ldr	r3, [pc, #512]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a7f      	ldr	r2, [pc, #508]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 800274e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002752:	6013      	str	r3, [r2, #0]
 8002754:	e02e      	b.n	80027b4 <HAL_RCC_OscConfig+0xd4>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d10c      	bne.n	8002778 <HAL_RCC_OscConfig+0x98>
 800275e:	4b7b      	ldr	r3, [pc, #492]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a7a      	ldr	r2, [pc, #488]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002764:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002768:	6013      	str	r3, [r2, #0]
 800276a:	4b78      	ldr	r3, [pc, #480]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a77      	ldr	r2, [pc, #476]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002770:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002774:	6013      	str	r3, [r2, #0]
 8002776:	e01d      	b.n	80027b4 <HAL_RCC_OscConfig+0xd4>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002780:	d10c      	bne.n	800279c <HAL_RCC_OscConfig+0xbc>
 8002782:	4b72      	ldr	r3, [pc, #456]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a71      	ldr	r2, [pc, #452]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002788:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800278c:	6013      	str	r3, [r2, #0]
 800278e:	4b6f      	ldr	r3, [pc, #444]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a6e      	ldr	r2, [pc, #440]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002794:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002798:	6013      	str	r3, [r2, #0]
 800279a:	e00b      	b.n	80027b4 <HAL_RCC_OscConfig+0xd4>
 800279c:	4b6b      	ldr	r3, [pc, #428]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a6a      	ldr	r2, [pc, #424]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 80027a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027a6:	6013      	str	r3, [r2, #0]
 80027a8:	4b68      	ldr	r3, [pc, #416]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a67      	ldr	r2, [pc, #412]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 80027ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027b2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d013      	beq.n	80027e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027bc:	f7fe ff26 	bl	800160c <HAL_GetTick>
 80027c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027c2:	e008      	b.n	80027d6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027c4:	f7fe ff22 	bl	800160c <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	2b64      	cmp	r3, #100	; 0x64
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e1fa      	b.n	8002bcc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027d6:	4b5d      	ldr	r3, [pc, #372]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d0f0      	beq.n	80027c4 <HAL_RCC_OscConfig+0xe4>
 80027e2:	e014      	b.n	800280e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e4:	f7fe ff12 	bl	800160c <HAL_GetTick>
 80027e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027ea:	e008      	b.n	80027fe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027ec:	f7fe ff0e 	bl	800160c <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	2b64      	cmp	r3, #100	; 0x64
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e1e6      	b.n	8002bcc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027fe:	4b53      	ldr	r3, [pc, #332]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1f0      	bne.n	80027ec <HAL_RCC_OscConfig+0x10c>
 800280a:	e000      	b.n	800280e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800280c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d063      	beq.n	80028e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800281a:	4b4c      	ldr	r3, [pc, #304]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	f003 030c 	and.w	r3, r3, #12
 8002822:	2b00      	cmp	r3, #0
 8002824:	d00b      	beq.n	800283e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002826:	4b49      	ldr	r3, [pc, #292]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f003 030c 	and.w	r3, r3, #12
 800282e:	2b08      	cmp	r3, #8
 8002830:	d11c      	bne.n	800286c <HAL_RCC_OscConfig+0x18c>
 8002832:	4b46      	ldr	r3, [pc, #280]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d116      	bne.n	800286c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800283e:	4b43      	ldr	r3, [pc, #268]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d005      	beq.n	8002856 <HAL_RCC_OscConfig+0x176>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	2b01      	cmp	r3, #1
 8002850:	d001      	beq.n	8002856 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e1ba      	b.n	8002bcc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002856:	4b3d      	ldr	r3, [pc, #244]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	695b      	ldr	r3, [r3, #20]
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	4939      	ldr	r1, [pc, #228]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002866:	4313      	orrs	r3, r2
 8002868:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800286a:	e03a      	b.n	80028e2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	691b      	ldr	r3, [r3, #16]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d020      	beq.n	80028b6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002874:	4b36      	ldr	r3, [pc, #216]	; (8002950 <HAL_RCC_OscConfig+0x270>)
 8002876:	2201      	movs	r2, #1
 8002878:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800287a:	f7fe fec7 	bl	800160c <HAL_GetTick>
 800287e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002880:	e008      	b.n	8002894 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002882:	f7fe fec3 	bl	800160c <HAL_GetTick>
 8002886:	4602      	mov	r2, r0
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	2b02      	cmp	r3, #2
 800288e:	d901      	bls.n	8002894 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	e19b      	b.n	8002bcc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002894:	4b2d      	ldr	r3, [pc, #180]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0302 	and.w	r3, r3, #2
 800289c:	2b00      	cmp	r3, #0
 800289e:	d0f0      	beq.n	8002882 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028a0:	4b2a      	ldr	r3, [pc, #168]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	695b      	ldr	r3, [r3, #20]
 80028ac:	00db      	lsls	r3, r3, #3
 80028ae:	4927      	ldr	r1, [pc, #156]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	600b      	str	r3, [r1, #0]
 80028b4:	e015      	b.n	80028e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028b6:	4b26      	ldr	r3, [pc, #152]	; (8002950 <HAL_RCC_OscConfig+0x270>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028bc:	f7fe fea6 	bl	800160c <HAL_GetTick>
 80028c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028c2:	e008      	b.n	80028d6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028c4:	f7fe fea2 	bl	800160c <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e17a      	b.n	8002bcc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028d6:	4b1d      	ldr	r3, [pc, #116]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0302 	and.w	r3, r3, #2
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d1f0      	bne.n	80028c4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0308 	and.w	r3, r3, #8
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d03a      	beq.n	8002964 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	699b      	ldr	r3, [r3, #24]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d019      	beq.n	800292a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028f6:	4b17      	ldr	r3, [pc, #92]	; (8002954 <HAL_RCC_OscConfig+0x274>)
 80028f8:	2201      	movs	r2, #1
 80028fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028fc:	f7fe fe86 	bl	800160c <HAL_GetTick>
 8002900:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002902:	e008      	b.n	8002916 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002904:	f7fe fe82 	bl	800160c <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	2b02      	cmp	r3, #2
 8002910:	d901      	bls.n	8002916 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e15a      	b.n	8002bcc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002916:	4b0d      	ldr	r3, [pc, #52]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	2b00      	cmp	r3, #0
 8002920:	d0f0      	beq.n	8002904 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002922:	2001      	movs	r0, #1
 8002924:	f000 fad8 	bl	8002ed8 <RCC_Delay>
 8002928:	e01c      	b.n	8002964 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800292a:	4b0a      	ldr	r3, [pc, #40]	; (8002954 <HAL_RCC_OscConfig+0x274>)
 800292c:	2200      	movs	r2, #0
 800292e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002930:	f7fe fe6c 	bl	800160c <HAL_GetTick>
 8002934:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002936:	e00f      	b.n	8002958 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002938:	f7fe fe68 	bl	800160c <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	2b02      	cmp	r3, #2
 8002944:	d908      	bls.n	8002958 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e140      	b.n	8002bcc <HAL_RCC_OscConfig+0x4ec>
 800294a:	bf00      	nop
 800294c:	40021000 	.word	0x40021000
 8002950:	42420000 	.word	0x42420000
 8002954:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002958:	4b9e      	ldr	r3, [pc, #632]	; (8002bd4 <HAL_RCC_OscConfig+0x4f4>)
 800295a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295c:	f003 0302 	and.w	r3, r3, #2
 8002960:	2b00      	cmp	r3, #0
 8002962:	d1e9      	bne.n	8002938 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0304 	and.w	r3, r3, #4
 800296c:	2b00      	cmp	r3, #0
 800296e:	f000 80a6 	beq.w	8002abe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002972:	2300      	movs	r3, #0
 8002974:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002976:	4b97      	ldr	r3, [pc, #604]	; (8002bd4 <HAL_RCC_OscConfig+0x4f4>)
 8002978:	69db      	ldr	r3, [r3, #28]
 800297a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d10d      	bne.n	800299e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002982:	4b94      	ldr	r3, [pc, #592]	; (8002bd4 <HAL_RCC_OscConfig+0x4f4>)
 8002984:	69db      	ldr	r3, [r3, #28]
 8002986:	4a93      	ldr	r2, [pc, #588]	; (8002bd4 <HAL_RCC_OscConfig+0x4f4>)
 8002988:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800298c:	61d3      	str	r3, [r2, #28]
 800298e:	4b91      	ldr	r3, [pc, #580]	; (8002bd4 <HAL_RCC_OscConfig+0x4f4>)
 8002990:	69db      	ldr	r3, [r3, #28]
 8002992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002996:	60bb      	str	r3, [r7, #8]
 8002998:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800299a:	2301      	movs	r3, #1
 800299c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800299e:	4b8e      	ldr	r3, [pc, #568]	; (8002bd8 <HAL_RCC_OscConfig+0x4f8>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d118      	bne.n	80029dc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029aa:	4b8b      	ldr	r3, [pc, #556]	; (8002bd8 <HAL_RCC_OscConfig+0x4f8>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a8a      	ldr	r2, [pc, #552]	; (8002bd8 <HAL_RCC_OscConfig+0x4f8>)
 80029b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029b6:	f7fe fe29 	bl	800160c <HAL_GetTick>
 80029ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029bc:	e008      	b.n	80029d0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029be:	f7fe fe25 	bl	800160c <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	2b64      	cmp	r3, #100	; 0x64
 80029ca:	d901      	bls.n	80029d0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e0fd      	b.n	8002bcc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029d0:	4b81      	ldr	r3, [pc, #516]	; (8002bd8 <HAL_RCC_OscConfig+0x4f8>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d0f0      	beq.n	80029be <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d106      	bne.n	80029f2 <HAL_RCC_OscConfig+0x312>
 80029e4:	4b7b      	ldr	r3, [pc, #492]	; (8002bd4 <HAL_RCC_OscConfig+0x4f4>)
 80029e6:	6a1b      	ldr	r3, [r3, #32]
 80029e8:	4a7a      	ldr	r2, [pc, #488]	; (8002bd4 <HAL_RCC_OscConfig+0x4f4>)
 80029ea:	f043 0301 	orr.w	r3, r3, #1
 80029ee:	6213      	str	r3, [r2, #32]
 80029f0:	e02d      	b.n	8002a4e <HAL_RCC_OscConfig+0x36e>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d10c      	bne.n	8002a14 <HAL_RCC_OscConfig+0x334>
 80029fa:	4b76      	ldr	r3, [pc, #472]	; (8002bd4 <HAL_RCC_OscConfig+0x4f4>)
 80029fc:	6a1b      	ldr	r3, [r3, #32]
 80029fe:	4a75      	ldr	r2, [pc, #468]	; (8002bd4 <HAL_RCC_OscConfig+0x4f4>)
 8002a00:	f023 0301 	bic.w	r3, r3, #1
 8002a04:	6213      	str	r3, [r2, #32]
 8002a06:	4b73      	ldr	r3, [pc, #460]	; (8002bd4 <HAL_RCC_OscConfig+0x4f4>)
 8002a08:	6a1b      	ldr	r3, [r3, #32]
 8002a0a:	4a72      	ldr	r2, [pc, #456]	; (8002bd4 <HAL_RCC_OscConfig+0x4f4>)
 8002a0c:	f023 0304 	bic.w	r3, r3, #4
 8002a10:	6213      	str	r3, [r2, #32]
 8002a12:	e01c      	b.n	8002a4e <HAL_RCC_OscConfig+0x36e>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	2b05      	cmp	r3, #5
 8002a1a:	d10c      	bne.n	8002a36 <HAL_RCC_OscConfig+0x356>
 8002a1c:	4b6d      	ldr	r3, [pc, #436]	; (8002bd4 <HAL_RCC_OscConfig+0x4f4>)
 8002a1e:	6a1b      	ldr	r3, [r3, #32]
 8002a20:	4a6c      	ldr	r2, [pc, #432]	; (8002bd4 <HAL_RCC_OscConfig+0x4f4>)
 8002a22:	f043 0304 	orr.w	r3, r3, #4
 8002a26:	6213      	str	r3, [r2, #32]
 8002a28:	4b6a      	ldr	r3, [pc, #424]	; (8002bd4 <HAL_RCC_OscConfig+0x4f4>)
 8002a2a:	6a1b      	ldr	r3, [r3, #32]
 8002a2c:	4a69      	ldr	r2, [pc, #420]	; (8002bd4 <HAL_RCC_OscConfig+0x4f4>)
 8002a2e:	f043 0301 	orr.w	r3, r3, #1
 8002a32:	6213      	str	r3, [r2, #32]
 8002a34:	e00b      	b.n	8002a4e <HAL_RCC_OscConfig+0x36e>
 8002a36:	4b67      	ldr	r3, [pc, #412]	; (8002bd4 <HAL_RCC_OscConfig+0x4f4>)
 8002a38:	6a1b      	ldr	r3, [r3, #32]
 8002a3a:	4a66      	ldr	r2, [pc, #408]	; (8002bd4 <HAL_RCC_OscConfig+0x4f4>)
 8002a3c:	f023 0301 	bic.w	r3, r3, #1
 8002a40:	6213      	str	r3, [r2, #32]
 8002a42:	4b64      	ldr	r3, [pc, #400]	; (8002bd4 <HAL_RCC_OscConfig+0x4f4>)
 8002a44:	6a1b      	ldr	r3, [r3, #32]
 8002a46:	4a63      	ldr	r2, [pc, #396]	; (8002bd4 <HAL_RCC_OscConfig+0x4f4>)
 8002a48:	f023 0304 	bic.w	r3, r3, #4
 8002a4c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d015      	beq.n	8002a82 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a56:	f7fe fdd9 	bl	800160c <HAL_GetTick>
 8002a5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a5c:	e00a      	b.n	8002a74 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a5e:	f7fe fdd5 	bl	800160c <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d901      	bls.n	8002a74 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e0ab      	b.n	8002bcc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a74:	4b57      	ldr	r3, [pc, #348]	; (8002bd4 <HAL_RCC_OscConfig+0x4f4>)
 8002a76:	6a1b      	ldr	r3, [r3, #32]
 8002a78:	f003 0302 	and.w	r3, r3, #2
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d0ee      	beq.n	8002a5e <HAL_RCC_OscConfig+0x37e>
 8002a80:	e014      	b.n	8002aac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a82:	f7fe fdc3 	bl	800160c <HAL_GetTick>
 8002a86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a88:	e00a      	b.n	8002aa0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a8a:	f7fe fdbf 	bl	800160c <HAL_GetTick>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d901      	bls.n	8002aa0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e095      	b.n	8002bcc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002aa0:	4b4c      	ldr	r3, [pc, #304]	; (8002bd4 <HAL_RCC_OscConfig+0x4f4>)
 8002aa2:	6a1b      	ldr	r3, [r3, #32]
 8002aa4:	f003 0302 	and.w	r3, r3, #2
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d1ee      	bne.n	8002a8a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002aac:	7dfb      	ldrb	r3, [r7, #23]
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d105      	bne.n	8002abe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ab2:	4b48      	ldr	r3, [pc, #288]	; (8002bd4 <HAL_RCC_OscConfig+0x4f4>)
 8002ab4:	69db      	ldr	r3, [r3, #28]
 8002ab6:	4a47      	ldr	r2, [pc, #284]	; (8002bd4 <HAL_RCC_OscConfig+0x4f4>)
 8002ab8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002abc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	69db      	ldr	r3, [r3, #28]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	f000 8081 	beq.w	8002bca <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ac8:	4b42      	ldr	r3, [pc, #264]	; (8002bd4 <HAL_RCC_OscConfig+0x4f4>)
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f003 030c 	and.w	r3, r3, #12
 8002ad0:	2b08      	cmp	r3, #8
 8002ad2:	d061      	beq.n	8002b98 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	69db      	ldr	r3, [r3, #28]
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d146      	bne.n	8002b6a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002adc:	4b3f      	ldr	r3, [pc, #252]	; (8002bdc <HAL_RCC_OscConfig+0x4fc>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae2:	f7fe fd93 	bl	800160c <HAL_GetTick>
 8002ae6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ae8:	e008      	b.n	8002afc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aea:	f7fe fd8f 	bl	800160c <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d901      	bls.n	8002afc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e067      	b.n	8002bcc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002afc:	4b35      	ldr	r3, [pc, #212]	; (8002bd4 <HAL_RCC_OscConfig+0x4f4>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d1f0      	bne.n	8002aea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a1b      	ldr	r3, [r3, #32]
 8002b0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b10:	d108      	bne.n	8002b24 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b12:	4b30      	ldr	r3, [pc, #192]	; (8002bd4 <HAL_RCC_OscConfig+0x4f4>)
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	492d      	ldr	r1, [pc, #180]	; (8002bd4 <HAL_RCC_OscConfig+0x4f4>)
 8002b20:	4313      	orrs	r3, r2
 8002b22:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b24:	4b2b      	ldr	r3, [pc, #172]	; (8002bd4 <HAL_RCC_OscConfig+0x4f4>)
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6a19      	ldr	r1, [r3, #32]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b34:	430b      	orrs	r3, r1
 8002b36:	4927      	ldr	r1, [pc, #156]	; (8002bd4 <HAL_RCC_OscConfig+0x4f4>)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b3c:	4b27      	ldr	r3, [pc, #156]	; (8002bdc <HAL_RCC_OscConfig+0x4fc>)
 8002b3e:	2201      	movs	r2, #1
 8002b40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b42:	f7fe fd63 	bl	800160c <HAL_GetTick>
 8002b46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b48:	e008      	b.n	8002b5c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b4a:	f7fe fd5f 	bl	800160c <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d901      	bls.n	8002b5c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e037      	b.n	8002bcc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b5c:	4b1d      	ldr	r3, [pc, #116]	; (8002bd4 <HAL_RCC_OscConfig+0x4f4>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d0f0      	beq.n	8002b4a <HAL_RCC_OscConfig+0x46a>
 8002b68:	e02f      	b.n	8002bca <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b6a:	4b1c      	ldr	r3, [pc, #112]	; (8002bdc <HAL_RCC_OscConfig+0x4fc>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b70:	f7fe fd4c 	bl	800160c <HAL_GetTick>
 8002b74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b76:	e008      	b.n	8002b8a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b78:	f7fe fd48 	bl	800160c <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e020      	b.n	8002bcc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b8a:	4b12      	ldr	r3, [pc, #72]	; (8002bd4 <HAL_RCC_OscConfig+0x4f4>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1f0      	bne.n	8002b78 <HAL_RCC_OscConfig+0x498>
 8002b96:	e018      	b.n	8002bca <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	69db      	ldr	r3, [r3, #28]
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d101      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e013      	b.n	8002bcc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ba4:	4b0b      	ldr	r3, [pc, #44]	; (8002bd4 <HAL_RCC_OscConfig+0x4f4>)
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a1b      	ldr	r3, [r3, #32]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d106      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d001      	beq.n	8002bca <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e000      	b.n	8002bcc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002bca:	2300      	movs	r3, #0
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3718      	adds	r7, #24
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	40021000 	.word	0x40021000
 8002bd8:	40007000 	.word	0x40007000
 8002bdc:	42420060 	.word	0x42420060

08002be0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d101      	bne.n	8002bf4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e0d0      	b.n	8002d96 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002bf4:	4b6a      	ldr	r3, [pc, #424]	; (8002da0 <HAL_RCC_ClockConfig+0x1c0>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0307 	and.w	r3, r3, #7
 8002bfc:	683a      	ldr	r2, [r7, #0]
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d910      	bls.n	8002c24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c02:	4b67      	ldr	r3, [pc, #412]	; (8002da0 <HAL_RCC_ClockConfig+0x1c0>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f023 0207 	bic.w	r2, r3, #7
 8002c0a:	4965      	ldr	r1, [pc, #404]	; (8002da0 <HAL_RCC_ClockConfig+0x1c0>)
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c12:	4b63      	ldr	r3, [pc, #396]	; (8002da0 <HAL_RCC_ClockConfig+0x1c0>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0307 	and.w	r3, r3, #7
 8002c1a:	683a      	ldr	r2, [r7, #0]
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d001      	beq.n	8002c24 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e0b8      	b.n	8002d96 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0302 	and.w	r3, r3, #2
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d020      	beq.n	8002c72 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0304 	and.w	r3, r3, #4
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d005      	beq.n	8002c48 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c3c:	4b59      	ldr	r3, [pc, #356]	; (8002da4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	4a58      	ldr	r2, [pc, #352]	; (8002da4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c42:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002c46:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0308 	and.w	r3, r3, #8
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d005      	beq.n	8002c60 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c54:	4b53      	ldr	r3, [pc, #332]	; (8002da4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	4a52      	ldr	r2, [pc, #328]	; (8002da4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c5a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002c5e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c60:	4b50      	ldr	r3, [pc, #320]	; (8002da4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	494d      	ldr	r1, [pc, #308]	; (8002da4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0301 	and.w	r3, r3, #1
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d040      	beq.n	8002d00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d107      	bne.n	8002c96 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c86:	4b47      	ldr	r3, [pc, #284]	; (8002da4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d115      	bne.n	8002cbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e07f      	b.n	8002d96 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d107      	bne.n	8002cae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c9e:	4b41      	ldr	r3, [pc, #260]	; (8002da4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d109      	bne.n	8002cbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e073      	b.n	8002d96 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cae:	4b3d      	ldr	r3, [pc, #244]	; (8002da4 <HAL_RCC_ClockConfig+0x1c4>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0302 	and.w	r3, r3, #2
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d101      	bne.n	8002cbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e06b      	b.n	8002d96 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cbe:	4b39      	ldr	r3, [pc, #228]	; (8002da4 <HAL_RCC_ClockConfig+0x1c4>)
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	f023 0203 	bic.w	r2, r3, #3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	4936      	ldr	r1, [pc, #216]	; (8002da4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cd0:	f7fe fc9c 	bl	800160c <HAL_GetTick>
 8002cd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cd6:	e00a      	b.n	8002cee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cd8:	f7fe fc98 	bl	800160c <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d901      	bls.n	8002cee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e053      	b.n	8002d96 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cee:	4b2d      	ldr	r3, [pc, #180]	; (8002da4 <HAL_RCC_ClockConfig+0x1c4>)
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f003 020c 	and.w	r2, r3, #12
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d1eb      	bne.n	8002cd8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d00:	4b27      	ldr	r3, [pc, #156]	; (8002da0 <HAL_RCC_ClockConfig+0x1c0>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0307 	and.w	r3, r3, #7
 8002d08:	683a      	ldr	r2, [r7, #0]
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d210      	bcs.n	8002d30 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d0e:	4b24      	ldr	r3, [pc, #144]	; (8002da0 <HAL_RCC_ClockConfig+0x1c0>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f023 0207 	bic.w	r2, r3, #7
 8002d16:	4922      	ldr	r1, [pc, #136]	; (8002da0 <HAL_RCC_ClockConfig+0x1c0>)
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d1e:	4b20      	ldr	r3, [pc, #128]	; (8002da0 <HAL_RCC_ClockConfig+0x1c0>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0307 	and.w	r3, r3, #7
 8002d26:	683a      	ldr	r2, [r7, #0]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d001      	beq.n	8002d30 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e032      	b.n	8002d96 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0304 	and.w	r3, r3, #4
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d008      	beq.n	8002d4e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d3c:	4b19      	ldr	r3, [pc, #100]	; (8002da4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	4916      	ldr	r1, [pc, #88]	; (8002da4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0308 	and.w	r3, r3, #8
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d009      	beq.n	8002d6e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d5a:	4b12      	ldr	r3, [pc, #72]	; (8002da4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	691b      	ldr	r3, [r3, #16]
 8002d66:	00db      	lsls	r3, r3, #3
 8002d68:	490e      	ldr	r1, [pc, #56]	; (8002da4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d6e:	f000 f821 	bl	8002db4 <HAL_RCC_GetSysClockFreq>
 8002d72:	4602      	mov	r2, r0
 8002d74:	4b0b      	ldr	r3, [pc, #44]	; (8002da4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	091b      	lsrs	r3, r3, #4
 8002d7a:	f003 030f 	and.w	r3, r3, #15
 8002d7e:	490a      	ldr	r1, [pc, #40]	; (8002da8 <HAL_RCC_ClockConfig+0x1c8>)
 8002d80:	5ccb      	ldrb	r3, [r1, r3]
 8002d82:	fa22 f303 	lsr.w	r3, r2, r3
 8002d86:	4a09      	ldr	r2, [pc, #36]	; (8002dac <HAL_RCC_ClockConfig+0x1cc>)
 8002d88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d8a:	4b09      	ldr	r3, [pc, #36]	; (8002db0 <HAL_RCC_ClockConfig+0x1d0>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f7fe fbfa 	bl	8001588 <HAL_InitTick>

  return HAL_OK;
 8002d94:	2300      	movs	r3, #0
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3710      	adds	r7, #16
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	40022000 	.word	0x40022000
 8002da4:	40021000 	.word	0x40021000
 8002da8:	080084d4 	.word	0x080084d4
 8002dac:	20000000 	.word	0x20000000
 8002db0:	20000004 	.word	0x20000004

08002db4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002db4:	b490      	push	{r4, r7}
 8002db6:	b08a      	sub	sp, #40	; 0x28
 8002db8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002dba:	4b2a      	ldr	r3, [pc, #168]	; (8002e64 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002dbc:	1d3c      	adds	r4, r7, #4
 8002dbe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002dc0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002dc4:	f240 2301 	movw	r3, #513	; 0x201
 8002dc8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	61fb      	str	r3, [r7, #28]
 8002dce:	2300      	movs	r3, #0
 8002dd0:	61bb      	str	r3, [r7, #24]
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	627b      	str	r3, [r7, #36]	; 0x24
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002dde:	4b22      	ldr	r3, [pc, #136]	; (8002e68 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	f003 030c 	and.w	r3, r3, #12
 8002dea:	2b04      	cmp	r3, #4
 8002dec:	d002      	beq.n	8002df4 <HAL_RCC_GetSysClockFreq+0x40>
 8002dee:	2b08      	cmp	r3, #8
 8002df0:	d003      	beq.n	8002dfa <HAL_RCC_GetSysClockFreq+0x46>
 8002df2:	e02d      	b.n	8002e50 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002df4:	4b1d      	ldr	r3, [pc, #116]	; (8002e6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002df6:	623b      	str	r3, [r7, #32]
      break;
 8002df8:	e02d      	b.n	8002e56 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	0c9b      	lsrs	r3, r3, #18
 8002dfe:	f003 030f 	and.w	r3, r3, #15
 8002e02:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002e06:	4413      	add	r3, r2
 8002e08:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002e0c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d013      	beq.n	8002e40 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002e18:	4b13      	ldr	r3, [pc, #76]	; (8002e68 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	0c5b      	lsrs	r3, r3, #17
 8002e1e:	f003 0301 	and.w	r3, r3, #1
 8002e22:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002e26:	4413      	add	r3, r2
 8002e28:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002e2c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	4a0e      	ldr	r2, [pc, #56]	; (8002e6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e32:	fb02 f203 	mul.w	r2, r2, r3
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e3c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e3e:	e004      	b.n	8002e4a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	4a0b      	ldr	r2, [pc, #44]	; (8002e70 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002e44:	fb02 f303 	mul.w	r3, r2, r3
 8002e48:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4c:	623b      	str	r3, [r7, #32]
      break;
 8002e4e:	e002      	b.n	8002e56 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e50:	4b06      	ldr	r3, [pc, #24]	; (8002e6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e52:	623b      	str	r3, [r7, #32]
      break;
 8002e54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e56:	6a3b      	ldr	r3, [r7, #32]
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3728      	adds	r7, #40	; 0x28
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bc90      	pop	{r4, r7}
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop
 8002e64:	08008104 	.word	0x08008104
 8002e68:	40021000 	.word	0x40021000
 8002e6c:	007a1200 	.word	0x007a1200
 8002e70:	003d0900 	.word	0x003d0900

08002e74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e74:	b480      	push	{r7}
 8002e76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e78:	4b02      	ldr	r3, [pc, #8]	; (8002e84 <HAL_RCC_GetHCLKFreq+0x10>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bc80      	pop	{r7}
 8002e82:	4770      	bx	lr
 8002e84:	20000000 	.word	0x20000000

08002e88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e8c:	f7ff fff2 	bl	8002e74 <HAL_RCC_GetHCLKFreq>
 8002e90:	4602      	mov	r2, r0
 8002e92:	4b05      	ldr	r3, [pc, #20]	; (8002ea8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	0a1b      	lsrs	r3, r3, #8
 8002e98:	f003 0307 	and.w	r3, r3, #7
 8002e9c:	4903      	ldr	r1, [pc, #12]	; (8002eac <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e9e:	5ccb      	ldrb	r3, [r1, r3]
 8002ea0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	40021000 	.word	0x40021000
 8002eac:	080084e4 	.word	0x080084e4

08002eb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002eb4:	f7ff ffde 	bl	8002e74 <HAL_RCC_GetHCLKFreq>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	4b05      	ldr	r3, [pc, #20]	; (8002ed0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	0adb      	lsrs	r3, r3, #11
 8002ec0:	f003 0307 	and.w	r3, r3, #7
 8002ec4:	4903      	ldr	r1, [pc, #12]	; (8002ed4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ec6:	5ccb      	ldrb	r3, [r1, r3]
 8002ec8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	40021000 	.word	0x40021000
 8002ed4:	080084e4 	.word	0x080084e4

08002ed8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b085      	sub	sp, #20
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002ee0:	4b0a      	ldr	r3, [pc, #40]	; (8002f0c <RCC_Delay+0x34>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a0a      	ldr	r2, [pc, #40]	; (8002f10 <RCC_Delay+0x38>)
 8002ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eea:	0a5b      	lsrs	r3, r3, #9
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	fb02 f303 	mul.w	r3, r2, r3
 8002ef2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002ef4:	bf00      	nop
  }
  while (Delay --);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	1e5a      	subs	r2, r3, #1
 8002efa:	60fa      	str	r2, [r7, #12]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d1f9      	bne.n	8002ef4 <RCC_Delay+0x1c>
}
 8002f00:	bf00      	nop
 8002f02:	bf00      	nop
 8002f04:	3714      	adds	r7, #20
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bc80      	pop	{r7}
 8002f0a:	4770      	bx	lr
 8002f0c:	20000000 	.word	0x20000000
 8002f10:	10624dd3 	.word	0x10624dd3

08002f14 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b086      	sub	sp, #24
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	613b      	str	r3, [r7, #16]
 8002f20:	2300      	movs	r3, #0
 8002f22:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0301 	and.w	r3, r3, #1
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d07d      	beq.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002f30:	2300      	movs	r3, #0
 8002f32:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f34:	4b4f      	ldr	r3, [pc, #316]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f36:	69db      	ldr	r3, [r3, #28]
 8002f38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d10d      	bne.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f40:	4b4c      	ldr	r3, [pc, #304]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f42:	69db      	ldr	r3, [r3, #28]
 8002f44:	4a4b      	ldr	r2, [pc, #300]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f4a:	61d3      	str	r3, [r2, #28]
 8002f4c:	4b49      	ldr	r3, [pc, #292]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f4e:	69db      	ldr	r3, [r3, #28]
 8002f50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f54:	60bb      	str	r3, [r7, #8]
 8002f56:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f5c:	4b46      	ldr	r3, [pc, #280]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d118      	bne.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f68:	4b43      	ldr	r3, [pc, #268]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a42      	ldr	r2, [pc, #264]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f72:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f74:	f7fe fb4a 	bl	800160c <HAL_GetTick>
 8002f78:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f7a:	e008      	b.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f7c:	f7fe fb46 	bl	800160c <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	2b64      	cmp	r3, #100	; 0x64
 8002f88:	d901      	bls.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e06d      	b.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f8e:	4b3a      	ldr	r3, [pc, #232]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d0f0      	beq.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f9a:	4b36      	ldr	r3, [pc, #216]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f9c:	6a1b      	ldr	r3, [r3, #32]
 8002f9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fa2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d02e      	beq.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fb2:	68fa      	ldr	r2, [r7, #12]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d027      	beq.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002fb8:	4b2e      	ldr	r3, [pc, #184]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fba:	6a1b      	ldr	r3, [r3, #32]
 8002fbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fc0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002fc2:	4b2e      	ldr	r3, [pc, #184]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002fc8:	4b2c      	ldr	r3, [pc, #176]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002fce:	4a29      	ldr	r2, [pc, #164]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f003 0301 	and.w	r3, r3, #1
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d014      	beq.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fde:	f7fe fb15 	bl	800160c <HAL_GetTick>
 8002fe2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fe4:	e00a      	b.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fe6:	f7fe fb11 	bl	800160c <HAL_GetTick>
 8002fea:	4602      	mov	r2, r0
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d901      	bls.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	e036      	b.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ffc:	4b1d      	ldr	r3, [pc, #116]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ffe:	6a1b      	ldr	r3, [r3, #32]
 8003000:	f003 0302 	and.w	r3, r3, #2
 8003004:	2b00      	cmp	r3, #0
 8003006:	d0ee      	beq.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003008:	4b1a      	ldr	r3, [pc, #104]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800300a:	6a1b      	ldr	r3, [r3, #32]
 800300c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	4917      	ldr	r1, [pc, #92]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003016:	4313      	orrs	r3, r2
 8003018:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800301a:	7dfb      	ldrb	r3, [r7, #23]
 800301c:	2b01      	cmp	r3, #1
 800301e:	d105      	bne.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003020:	4b14      	ldr	r3, [pc, #80]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003022:	69db      	ldr	r3, [r3, #28]
 8003024:	4a13      	ldr	r2, [pc, #76]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003026:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800302a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0302 	and.w	r3, r3, #2
 8003034:	2b00      	cmp	r3, #0
 8003036:	d008      	beq.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003038:	4b0e      	ldr	r3, [pc, #56]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	490b      	ldr	r1, [pc, #44]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003046:	4313      	orrs	r3, r2
 8003048:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0310 	and.w	r3, r3, #16
 8003052:	2b00      	cmp	r3, #0
 8003054:	d008      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003056:	4b07      	ldr	r3, [pc, #28]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	695b      	ldr	r3, [r3, #20]
 8003062:	4904      	ldr	r1, [pc, #16]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003064:	4313      	orrs	r3, r2
 8003066:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3718      	adds	r7, #24
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	40021000 	.word	0x40021000
 8003078:	40007000 	.word	0x40007000
 800307c:	42420440 	.word	0x42420440

08003080 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003080:	b590      	push	{r4, r7, lr}
 8003082:	b08d      	sub	sp, #52	; 0x34
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003088:	4b6b      	ldr	r3, [pc, #428]	; (8003238 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 800308a:	f107 040c 	add.w	r4, r7, #12
 800308e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003090:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003094:	f240 2301 	movw	r3, #513	; 0x201
 8003098:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800309a:	2300      	movs	r3, #0
 800309c:	627b      	str	r3, [r7, #36]	; 0x24
 800309e:	2300      	movs	r3, #0
 80030a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030a2:	2300      	movs	r3, #0
 80030a4:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80030a6:	2300      	movs	r3, #0
 80030a8:	61fb      	str	r3, [r7, #28]
 80030aa:	2300      	movs	r3, #0
 80030ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	3b01      	subs	r3, #1
 80030b2:	2b0f      	cmp	r3, #15
 80030b4:	f200 80b6 	bhi.w	8003224 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 80030b8:	a201      	add	r2, pc, #4	; (adr r2, 80030c0 <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
 80030ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030be:	bf00      	nop
 80030c0:	080031a3 	.word	0x080031a3
 80030c4:	08003209 	.word	0x08003209
 80030c8:	08003225 	.word	0x08003225
 80030cc:	08003193 	.word	0x08003193
 80030d0:	08003225 	.word	0x08003225
 80030d4:	08003225 	.word	0x08003225
 80030d8:	08003225 	.word	0x08003225
 80030dc:	0800319b 	.word	0x0800319b
 80030e0:	08003225 	.word	0x08003225
 80030e4:	08003225 	.word	0x08003225
 80030e8:	08003225 	.word	0x08003225
 80030ec:	08003225 	.word	0x08003225
 80030f0:	08003225 	.word	0x08003225
 80030f4:	08003225 	.word	0x08003225
 80030f8:	08003225 	.word	0x08003225
 80030fc:	08003101 	.word	0x08003101
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8003100:	4b4e      	ldr	r3, [pc, #312]	; (800323c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	61fb      	str	r3, [r7, #28]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003106:	4b4d      	ldr	r3, [pc, #308]	; (800323c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800310e:	2b00      	cmp	r3, #0
 8003110:	f000 808a 	beq.w	8003228 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	0c9b      	lsrs	r3, r3, #18
 8003118:	f003 030f 	and.w	r3, r3, #15
 800311c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003120:	4413      	add	r3, r2
 8003122:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003126:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d018      	beq.n	8003164 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003132:	4b42      	ldr	r3, [pc, #264]	; (800323c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	0c5b      	lsrs	r3, r3, #17
 8003138:	f003 0301 	and.w	r3, r3, #1
 800313c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003140:	4413      	add	r3, r2
 8003142:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003146:	627b      	str	r3, [r7, #36]	; 0x24
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d00d      	beq.n	800316e <HAL_RCCEx_GetPeriphCLKFreq+0xee>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003152:	4a3b      	ldr	r2, [pc, #236]	; (8003240 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8003154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003156:	fbb2 f2f3 	udiv	r2, r2, r3
 800315a:	6a3b      	ldr	r3, [r7, #32]
 800315c:	fb02 f303 	mul.w	r3, r2, r3
 8003160:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003162:	e004      	b.n	800316e <HAL_RCCEx_GetPeriphCLKFreq+0xee>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003164:	6a3b      	ldr	r3, [r7, #32]
 8003166:	4a37      	ldr	r2, [pc, #220]	; (8003244 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 8003168:	fb02 f303 	mul.w	r3, r2, r3
 800316c:	62fb      	str	r3, [r7, #44]	; 0x2c
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800316e:	4b33      	ldr	r3, [pc, #204]	; (800323c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003176:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800317a:	d102      	bne.n	8003182 <HAL_RCCEx_GetPeriphCLKFreq+0x102>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 800317c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800317e:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8003180:	e052      	b.n	8003228 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          frequency = (pllclk * 2) / 3;
 8003182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003184:	005b      	lsls	r3, r3, #1
 8003186:	4a30      	ldr	r2, [pc, #192]	; (8003248 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>)
 8003188:	fba2 2303 	umull	r2, r3, r2, r3
 800318c:	085b      	lsrs	r3, r3, #1
 800318e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003190:	e04a      	b.n	8003228 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 8003192:	f7ff fe0f 	bl	8002db4 <HAL_RCC_GetSysClockFreq>
 8003196:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8003198:	e049      	b.n	800322e <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 800319a:	f7ff fe0b 	bl	8002db4 <HAL_RCC_GetSysClockFreq>
 800319e:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 80031a0:	e045      	b.n	800322e <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 80031a2:	4b26      	ldr	r3, [pc, #152]	; (800323c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 80031a4:	6a1b      	ldr	r3, [r3, #32]
 80031a6:	61fb      	str	r3, [r7, #28]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031b2:	d108      	bne.n	80031c6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	f003 0302 	and.w	r3, r3, #2
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d003      	beq.n	80031c6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSE_VALUE;
 80031be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80031c4:	e01f      	b.n	8003206 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031d0:	d109      	bne.n	80031e6 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80031d2:	4b1a      	ldr	r3, [pc, #104]	; (800323c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 80031d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d003      	beq.n	80031e6 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      {
        frequency = LSI_VALUE;
 80031de:	f649 4340 	movw	r3, #40000	; 0x9c40
 80031e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80031e4:	e00f      	b.n	8003206 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031f0:	d11c      	bne.n	800322c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 80031f2:	4b12      	ldr	r3, [pc, #72]	; (800323c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d016      	beq.n	800322c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
      {
        frequency = HSE_VALUE / 128U;
 80031fe:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003202:	62bb      	str	r3, [r7, #40]	; 0x28
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8003204:	e012      	b.n	800322c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8003206:	e011      	b.n	800322c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003208:	f7ff fe52 	bl	8002eb0 <HAL_RCC_GetPCLK2Freq>
 800320c:	4602      	mov	r2, r0
 800320e:	4b0b      	ldr	r3, [pc, #44]	; (800323c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	0b9b      	lsrs	r3, r3, #14
 8003214:	f003 0303 	and.w	r3, r3, #3
 8003218:	3301      	adds	r3, #1
 800321a:	005b      	lsls	r3, r3, #1
 800321c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003220:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003222:	e004      	b.n	800322e <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
    default:
    {
      break;
 8003224:	bf00      	nop
 8003226:	e002      	b.n	800322e <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
      break;
 8003228:	bf00      	nop
 800322a:	e000      	b.n	800322e <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
      break;
 800322c:	bf00      	nop
    }
  }
  return (frequency);
 800322e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003230:	4618      	mov	r0, r3
 8003232:	3734      	adds	r7, #52	; 0x34
 8003234:	46bd      	mov	sp, r7
 8003236:	bd90      	pop	{r4, r7, pc}
 8003238:	08008114 	.word	0x08008114
 800323c:	40021000 	.word	0x40021000
 8003240:	007a1200 	.word	0x007a1200
 8003244:	003d0900 	.word	0x003d0900
 8003248:	aaaaaaab 	.word	0xaaaaaaab

0800324c <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8003254:	2300      	movs	r3, #0
 8003256:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d101      	bne.n	8003262 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e084      	b.n	800336c <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	7c5b      	ldrb	r3, [r3, #17]
 8003266:	b2db      	uxtb	r3, r3
 8003268:	2b00      	cmp	r3, #0
 800326a:	d105      	bne.n	8003278 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f7fd ff08 	bl	8001088 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2202      	movs	r2, #2
 800327c:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f000 faf4 	bl	800386c <HAL_RTC_WaitForSynchro>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d004      	beq.n	8003294 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2204      	movs	r2, #4
 800328e:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e06b      	b.n	800336c <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f000 fbad 	bl	80039f4 <RTC_EnterInitMode>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d004      	beq.n	80032aa <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2204      	movs	r2, #4
 80032a4:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e060      	b.n	800336c <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	685a      	ldr	r2, [r3, #4]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f022 0207 	bic.w	r2, r2, #7
 80032b8:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d005      	beq.n	80032ce <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80032c2:	4b2c      	ldr	r3, [pc, #176]	; (8003374 <HAL_RTC_Init+0x128>)
 80032c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c6:	4a2b      	ldr	r2, [pc, #172]	; (8003374 <HAL_RTC_Init+0x128>)
 80032c8:	f023 0301 	bic.w	r3, r3, #1
 80032cc:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80032ce:	4b29      	ldr	r3, [pc, #164]	; (8003374 <HAL_RTC_Init+0x128>)
 80032d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d2:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	4926      	ldr	r1, [pc, #152]	; (8003374 <HAL_RTC_Init+0x128>)
 80032dc:	4313      	orrs	r3, r2
 80032de:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032e8:	d003      	beq.n	80032f2 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	60fb      	str	r3, [r7, #12]
 80032f0:	e00e      	b.n	8003310 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80032f2:	2001      	movs	r0, #1
 80032f4:	f7ff fec4 	bl	8003080 <HAL_RCCEx_GetPeriphCLKFreq>
 80032f8:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d104      	bne.n	800330a <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2204      	movs	r2, #4
 8003304:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e030      	b.n	800336c <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	3b01      	subs	r3, #1
 800330e:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	f023 010f 	bic.w	r1, r3, #15
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	0c1a      	lsrs	r2, r3, #16
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	430a      	orrs	r2, r1
 8003324:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	0c1b      	lsrs	r3, r3, #16
 800332e:	041b      	lsls	r3, r3, #16
 8003330:	68fa      	ldr	r2, [r7, #12]
 8003332:	b291      	uxth	r1, r2
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	6812      	ldr	r2, [r2, #0]
 8003338:	430b      	orrs	r3, r1
 800333a:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	f000 fb81 	bl	8003a44 <RTC_ExitInitMode>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d004      	beq.n	8003352 <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2204      	movs	r2, #4
 800334c:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e00c      	b.n	800336c <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2201      	movs	r2, #1
 8003362:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 800336a:	2300      	movs	r3, #0
  }
}
 800336c:	4618      	mov	r0, r3
 800336e:	3710      	adds	r7, #16
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}
 8003374:	40006c00 	.word	0x40006c00

08003378 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003378:	b590      	push	{r4, r7, lr}
 800337a:	b087      	sub	sp, #28
 800337c:	af00      	add	r7, sp, #0
 800337e:	60f8      	str	r0, [r7, #12]
 8003380:	60b9      	str	r1, [r7, #8]
 8003382:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8003384:	2300      	movs	r3, #0
 8003386:	617b      	str	r3, [r7, #20]
 8003388:	2300      	movs	r3, #0
 800338a:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d002      	beq.n	8003398 <HAL_RTC_SetTime+0x20>
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d101      	bne.n	800339c <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e080      	b.n	800349e <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	7c1b      	ldrb	r3, [r3, #16]
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d101      	bne.n	80033a8 <HAL_RTC_SetTime+0x30>
 80033a4:	2302      	movs	r3, #2
 80033a6:	e07a      	b.n	800349e <HAL_RTC_SetTime+0x126>
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2201      	movs	r2, #1
 80033ac:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2202      	movs	r2, #2
 80033b2:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d113      	bne.n	80033e2 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	461a      	mov	r2, r3
 80033c0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80033c4:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	785b      	ldrb	r3, [r3, #1]
 80033cc:	4619      	mov	r1, r3
 80033ce:	460b      	mov	r3, r1
 80033d0:	011b      	lsls	r3, r3, #4
 80033d2:	1a5b      	subs	r3, r3, r1
 80033d4:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80033d6:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 80033d8:	68ba      	ldr	r2, [r7, #8]
 80033da:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80033dc:	4413      	add	r3, r2
 80033de:	617b      	str	r3, [r7, #20]
 80033e0:	e01e      	b.n	8003420 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f000 fb71 	bl	8003ace <RTC_Bcd2ToByte>
 80033ec:	4603      	mov	r3, r0
 80033ee:	461a      	mov	r2, r3
 80033f0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80033f4:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	785b      	ldrb	r3, [r3, #1]
 80033fc:	4618      	mov	r0, r3
 80033fe:	f000 fb66 	bl	8003ace <RTC_Bcd2ToByte>
 8003402:	4603      	mov	r3, r0
 8003404:	461a      	mov	r2, r3
 8003406:	4613      	mov	r3, r2
 8003408:	011b      	lsls	r3, r3, #4
 800340a:	1a9b      	subs	r3, r3, r2
 800340c:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800340e:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	789b      	ldrb	r3, [r3, #2]
 8003414:	4618      	mov	r0, r3
 8003416:	f000 fb5a 	bl	8003ace <RTC_Bcd2ToByte>
 800341a:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800341c:	4423      	add	r3, r4
 800341e:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003420:	6979      	ldr	r1, [r7, #20]
 8003422:	68f8      	ldr	r0, [r7, #12]
 8003424:	f000 fa7f 	bl	8003926 <RTC_WriteTimeCounter>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d007      	beq.n	800343e <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2204      	movs	r2, #4
 8003432:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2200      	movs	r2, #0
 8003438:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e02f      	b.n	800349e <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	685a      	ldr	r2, [r3, #4]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f022 0205 	bic.w	r2, r2, #5
 800344c:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800344e:	68f8      	ldr	r0, [r7, #12]
 8003450:	f000 fa90 	bl	8003974 <RTC_ReadAlarmCounter>
 8003454:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800345c:	d018      	beq.n	8003490 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 800345e:	693a      	ldr	r2, [r7, #16]
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	429a      	cmp	r2, r3
 8003464:	d214      	bcs.n	8003490 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 800346c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003470:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003472:	6939      	ldr	r1, [r7, #16]
 8003474:	68f8      	ldr	r0, [r7, #12]
 8003476:	f000 fa96 	bl	80039a6 <RTC_WriteAlarmCounter>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d007      	beq.n	8003490 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2204      	movs	r2, #4
 8003484:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2200      	movs	r2, #0
 800348a:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e006      	b.n	800349e <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2201      	movs	r2, #1
 8003494:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2200      	movs	r2, #0
 800349a:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 800349c:	2300      	movs	r3, #0
  }
}
 800349e:	4618      	mov	r0, r3
 80034a0:	371c      	adds	r7, #28
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd90      	pop	{r4, r7, pc}
	...

080034a8 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b088      	sub	sp, #32
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 80034b4:	2300      	movs	r3, #0
 80034b6:	61bb      	str	r3, [r7, #24]
 80034b8:	2300      	movs	r3, #0
 80034ba:	61fb      	str	r3, [r7, #28]
 80034bc:	2300      	movs	r3, #0
 80034be:	617b      	str	r3, [r7, #20]
 80034c0:	2300      	movs	r3, #0
 80034c2:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d002      	beq.n	80034d0 <HAL_RTC_GetTime+0x28>
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d101      	bne.n	80034d4 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e0b5      	b.n	8003640 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f003 0304 	and.w	r3, r3, #4
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d001      	beq.n	80034e6 <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e0ac      	b.n	8003640 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80034e6:	68f8      	ldr	r0, [r7, #12]
 80034e8:	f000 f9ed 	bl	80038c6 <RTC_ReadTimeCounter>
 80034ec:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80034ee:	69bb      	ldr	r3, [r7, #24]
 80034f0:	4a55      	ldr	r2, [pc, #340]	; (8003648 <HAL_RTC_GetTime+0x1a0>)
 80034f2:	fba2 2303 	umull	r2, r3, r2, r3
 80034f6:	0adb      	lsrs	r3, r3, #11
 80034f8:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 80034fa:	69ba      	ldr	r2, [r7, #24]
 80034fc:	4b52      	ldr	r3, [pc, #328]	; (8003648 <HAL_RTC_GetTime+0x1a0>)
 80034fe:	fba3 1302 	umull	r1, r3, r3, r2
 8003502:	0adb      	lsrs	r3, r3, #11
 8003504:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8003508:	fb01 f303 	mul.w	r3, r1, r3
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	4a4f      	ldr	r2, [pc, #316]	; (800364c <HAL_RTC_GetTime+0x1a4>)
 8003510:	fba2 2303 	umull	r2, r3, r2, r3
 8003514:	095b      	lsrs	r3, r3, #5
 8003516:	b2da      	uxtb	r2, r3
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	4a4a      	ldr	r2, [pc, #296]	; (8003648 <HAL_RTC_GetTime+0x1a0>)
 8003520:	fba2 1203 	umull	r1, r2, r2, r3
 8003524:	0ad2      	lsrs	r2, r2, #11
 8003526:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800352a:	fb01 f202 	mul.w	r2, r1, r2
 800352e:	1a9a      	subs	r2, r3, r2
 8003530:	4b46      	ldr	r3, [pc, #280]	; (800364c <HAL_RTC_GetTime+0x1a4>)
 8003532:	fba3 1302 	umull	r1, r3, r3, r2
 8003536:	0959      	lsrs	r1, r3, #5
 8003538:	460b      	mov	r3, r1
 800353a:	011b      	lsls	r3, r3, #4
 800353c:	1a5b      	subs	r3, r3, r1
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	1ad1      	subs	r1, r2, r3
 8003542:	b2ca      	uxtb	r2, r1
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	2b17      	cmp	r3, #23
 800354c:	d955      	bls.n	80035fa <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	4a3f      	ldr	r2, [pc, #252]	; (8003650 <HAL_RTC_GetTime+0x1a8>)
 8003552:	fba2 2303 	umull	r2, r3, r2, r3
 8003556:	091b      	lsrs	r3, r3, #4
 8003558:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 800355a:	6939      	ldr	r1, [r7, #16]
 800355c:	4b3c      	ldr	r3, [pc, #240]	; (8003650 <HAL_RTC_GetTime+0x1a8>)
 800355e:	fba3 2301 	umull	r2, r3, r3, r1
 8003562:	091a      	lsrs	r2, r3, #4
 8003564:	4613      	mov	r3, r2
 8003566:	005b      	lsls	r3, r3, #1
 8003568:	4413      	add	r3, r2
 800356a:	00db      	lsls	r3, r3, #3
 800356c:	1aca      	subs	r2, r1, r3
 800356e:	b2d2      	uxtb	r2, r2
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003574:	68f8      	ldr	r0, [r7, #12]
 8003576:	f000 f9fd 	bl	8003974 <RTC_ReadAlarmCounter>
 800357a:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003582:	d008      	beq.n	8003596 <HAL_RTC_GetTime+0xee>
 8003584:	69fa      	ldr	r2, [r7, #28]
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	429a      	cmp	r2, r3
 800358a:	d904      	bls.n	8003596 <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 800358c:	69fa      	ldr	r2, [r7, #28]
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	61fb      	str	r3, [r7, #28]
 8003594:	e002      	b.n	800359c <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8003596:	f04f 33ff 	mov.w	r3, #4294967295
 800359a:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	4a2d      	ldr	r2, [pc, #180]	; (8003654 <HAL_RTC_GetTime+0x1ac>)
 80035a0:	fb02 f303 	mul.w	r3, r2, r3
 80035a4:	69ba      	ldr	r2, [r7, #24]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80035aa:	69b9      	ldr	r1, [r7, #24]
 80035ac:	68f8      	ldr	r0, [r7, #12]
 80035ae:	f000 f9ba 	bl	8003926 <RTC_WriteTimeCounter>
 80035b2:	4603      	mov	r3, r0
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d001      	beq.n	80035bc <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e041      	b.n	8003640 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c2:	d00c      	beq.n	80035de <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 80035c4:	69fa      	ldr	r2, [r7, #28]
 80035c6:	69bb      	ldr	r3, [r7, #24]
 80035c8:	4413      	add	r3, r2
 80035ca:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80035cc:	69f9      	ldr	r1, [r7, #28]
 80035ce:	68f8      	ldr	r0, [r7, #12]
 80035d0:	f000 f9e9 	bl	80039a6 <RTC_WriteAlarmCounter>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d00a      	beq.n	80035f0 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e030      	b.n	8003640 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80035de:	69f9      	ldr	r1, [r7, #28]
 80035e0:	68f8      	ldr	r0, [r7, #12]
 80035e2:	f000 f9e0 	bl	80039a6 <RTC_WriteAlarmCounter>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d001      	beq.n	80035f0 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e027      	b.n	8003640 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 80035f0:	6979      	ldr	r1, [r7, #20]
 80035f2:	68f8      	ldr	r0, [r7, #12]
 80035f4:	f000 fa88 	bl	8003b08 <RTC_DateUpdate>
 80035f8:	e003      	b.n	8003602 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	b2da      	uxtb	r2, r3
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d01a      	beq.n	800363e <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	4618      	mov	r0, r3
 800360e:	f000 fa41 	bl	8003a94 <RTC_ByteToBcd2>
 8003612:	4603      	mov	r3, r0
 8003614:	461a      	mov	r2, r3
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	785b      	ldrb	r3, [r3, #1]
 800361e:	4618      	mov	r0, r3
 8003620:	f000 fa38 	bl	8003a94 <RTC_ByteToBcd2>
 8003624:	4603      	mov	r3, r0
 8003626:	461a      	mov	r2, r3
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	789b      	ldrb	r3, [r3, #2]
 8003630:	4618      	mov	r0, r3
 8003632:	f000 fa2f 	bl	8003a94 <RTC_ByteToBcd2>
 8003636:	4603      	mov	r3, r0
 8003638:	461a      	mov	r2, r3
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800363e:	2300      	movs	r3, #0
}
 8003640:	4618      	mov	r0, r3
 8003642:	3720      	adds	r7, #32
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	91a2b3c5 	.word	0x91a2b3c5
 800364c:	88888889 	.word	0x88888889
 8003650:	aaaaaaab 	.word	0xaaaaaaab
 8003654:	00015180 	.word	0x00015180

08003658 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b088      	sub	sp, #32
 800365c:	af00      	add	r7, sp, #0
 800365e:	60f8      	str	r0, [r7, #12]
 8003660:	60b9      	str	r1, [r7, #8]
 8003662:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8003664:	2300      	movs	r3, #0
 8003666:	61fb      	str	r3, [r7, #28]
 8003668:	2300      	movs	r3, #0
 800366a:	61bb      	str	r3, [r7, #24]
 800366c:	2300      	movs	r3, #0
 800366e:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d002      	beq.n	800367c <HAL_RTC_SetDate+0x24>
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d101      	bne.n	8003680 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e097      	b.n	80037b0 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	7c1b      	ldrb	r3, [r3, #16]
 8003684:	2b01      	cmp	r3, #1
 8003686:	d101      	bne.n	800368c <HAL_RTC_SetDate+0x34>
 8003688:	2302      	movs	r3, #2
 800368a:	e091      	b.n	80037b0 <HAL_RTC_SetDate+0x158>
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2201      	movs	r2, #1
 8003690:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2202      	movs	r2, #2
 8003696:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d10c      	bne.n	80036b8 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	78da      	ldrb	r2, [r3, #3]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	785a      	ldrb	r2, [r3, #1]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	789a      	ldrb	r2, [r3, #2]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	739a      	strb	r2, [r3, #14]
 80036b6:	e01a      	b.n	80036ee <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	78db      	ldrb	r3, [r3, #3]
 80036bc:	4618      	mov	r0, r3
 80036be:	f000 fa06 	bl	8003ace <RTC_Bcd2ToByte>
 80036c2:	4603      	mov	r3, r0
 80036c4:	461a      	mov	r2, r3
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	785b      	ldrb	r3, [r3, #1]
 80036ce:	4618      	mov	r0, r3
 80036d0:	f000 f9fd 	bl	8003ace <RTC_Bcd2ToByte>
 80036d4:	4603      	mov	r3, r0
 80036d6:	461a      	mov	r2, r3
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	789b      	ldrb	r3, [r3, #2]
 80036e0:	4618      	mov	r0, r3
 80036e2:	f000 f9f4 	bl	8003ace <RTC_Bcd2ToByte>
 80036e6:	4603      	mov	r3, r0
 80036e8:	461a      	mov	r2, r3
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	7bdb      	ldrb	r3, [r3, #15]
 80036f2:	4618      	mov	r0, r3
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	7b59      	ldrb	r1, [r3, #13]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	7b9b      	ldrb	r3, [r3, #14]
 80036fc:	461a      	mov	r2, r3
 80036fe:	f000 fadf 	bl	8003cc0 <RTC_WeekDayNum>
 8003702:	4603      	mov	r3, r0
 8003704:	461a      	mov	r2, r3
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	7b1a      	ldrb	r2, [r3, #12]
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8003712:	68f8      	ldr	r0, [r7, #12]
 8003714:	f000 f8d7 	bl	80038c6 <RTC_ReadTimeCounter>
 8003718:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	4a26      	ldr	r2, [pc, #152]	; (80037b8 <HAL_RTC_SetDate+0x160>)
 800371e:	fba2 2303 	umull	r2, r3, r2, r3
 8003722:	0adb      	lsrs	r3, r3, #11
 8003724:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	2b18      	cmp	r3, #24
 800372a:	d93a      	bls.n	80037a2 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	4a23      	ldr	r2, [pc, #140]	; (80037bc <HAL_RTC_SetDate+0x164>)
 8003730:	fba2 2303 	umull	r2, r3, r2, r3
 8003734:	091b      	lsrs	r3, r3, #4
 8003736:	4a22      	ldr	r2, [pc, #136]	; (80037c0 <HAL_RTC_SetDate+0x168>)
 8003738:	fb02 f303 	mul.w	r3, r2, r3
 800373c:	69fa      	ldr	r2, [r7, #28]
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003742:	69f9      	ldr	r1, [r7, #28]
 8003744:	68f8      	ldr	r0, [r7, #12]
 8003746:	f000 f8ee 	bl	8003926 <RTC_WriteTimeCounter>
 800374a:	4603      	mov	r3, r0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d007      	beq.n	8003760 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2204      	movs	r2, #4
 8003754:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2200      	movs	r2, #0
 800375a:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e027      	b.n	80037b0 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003760:	68f8      	ldr	r0, [r7, #12]
 8003762:	f000 f907 	bl	8003974 <RTC_ReadAlarmCounter>
 8003766:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800376e:	d018      	beq.n	80037a2 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8003770:	69ba      	ldr	r2, [r7, #24]
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	429a      	cmp	r2, r3
 8003776:	d214      	bcs.n	80037a2 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 800377e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003782:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003784:	69b9      	ldr	r1, [r7, #24]
 8003786:	68f8      	ldr	r0, [r7, #12]
 8003788:	f000 f90d 	bl	80039a6 <RTC_WriteAlarmCounter>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d007      	beq.n	80037a2 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2204      	movs	r2, #4
 8003796:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2200      	movs	r2, #0
 800379c:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e006      	b.n	80037b0 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2201      	movs	r2, #1
 80037a6:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2200      	movs	r2, #0
 80037ac:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80037ae:	2300      	movs	r3, #0
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3720      	adds	r7, #32
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	91a2b3c5 	.word	0x91a2b3c5
 80037bc:	aaaaaaab 	.word	0xaaaaaaab
 80037c0:	00015180 	.word	0x00015180

080037c4 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b086      	sub	sp, #24
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	60f8      	str	r0, [r7, #12]
 80037cc:	60b9      	str	r1, [r7, #8]
 80037ce:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 80037d0:	f107 0314 	add.w	r3, r7, #20
 80037d4:	2100      	movs	r1, #0
 80037d6:	460a      	mov	r2, r1
 80037d8:	801a      	strh	r2, [r3, #0]
 80037da:	460a      	mov	r2, r1
 80037dc:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d002      	beq.n	80037ea <HAL_RTC_GetDate+0x26>
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d101      	bne.n	80037ee <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e03a      	b.n	8003864 <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 80037ee:	f107 0314 	add.w	r3, r7, #20
 80037f2:	2200      	movs	r2, #0
 80037f4:	4619      	mov	r1, r3
 80037f6:	68f8      	ldr	r0, [r7, #12]
 80037f8:	f7ff fe56 	bl	80034a8 <HAL_RTC_GetTime>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d001      	beq.n	8003806 <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e02e      	b.n	8003864 <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	7b1a      	ldrb	r2, [r3, #12]
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	7bda      	ldrb	r2, [r3, #15]
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	7b5a      	ldrb	r2, [r3, #13]
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	7b9a      	ldrb	r2, [r3, #14]
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d01a      	beq.n	8003862 <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	78db      	ldrb	r3, [r3, #3]
 8003830:	4618      	mov	r0, r3
 8003832:	f000 f92f 	bl	8003a94 <RTC_ByteToBcd2>
 8003836:	4603      	mov	r3, r0
 8003838:	461a      	mov	r2, r3
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	785b      	ldrb	r3, [r3, #1]
 8003842:	4618      	mov	r0, r3
 8003844:	f000 f926 	bl	8003a94 <RTC_ByteToBcd2>
 8003848:	4603      	mov	r3, r0
 800384a:	461a      	mov	r2, r3
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	789b      	ldrb	r3, [r3, #2]
 8003854:	4618      	mov	r0, r3
 8003856:	f000 f91d 	bl	8003a94 <RTC_ByteToBcd2>
 800385a:	4603      	mov	r3, r0
 800385c:	461a      	mov	r2, r3
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003862:	2300      	movs	r3, #0
}
 8003864:	4618      	mov	r0, r3
 8003866:	3718      	adds	r7, #24
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003874:	2300      	movs	r3, #0
 8003876:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d101      	bne.n	8003882 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e01d      	b.n	80038be <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	685a      	ldr	r2, [r3, #4]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f022 0208 	bic.w	r2, r2, #8
 8003890:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003892:	f7fd febb 	bl	800160c <HAL_GetTick>
 8003896:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003898:	e009      	b.n	80038ae <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800389a:	f7fd feb7 	bl	800160c <HAL_GetTick>
 800389e:	4602      	mov	r2, r0
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80038a8:	d901      	bls.n	80038ae <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e007      	b.n	80038be <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f003 0308 	and.w	r3, r3, #8
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d0ee      	beq.n	800389a <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80038bc:	2300      	movs	r3, #0
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3710      	adds	r7, #16
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}

080038c6 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 80038c6:	b480      	push	{r7}
 80038c8:	b087      	sub	sp, #28
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 80038ce:	2300      	movs	r3, #0
 80038d0:	827b      	strh	r3, [r7, #18]
 80038d2:	2300      	movs	r3, #0
 80038d4:	823b      	strh	r3, [r7, #16]
 80038d6:	2300      	movs	r3, #0
 80038d8:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 80038da:	2300      	movs	r3, #0
 80038dc:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	699b      	ldr	r3, [r3, #24]
 80038e4:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	69db      	ldr	r3, [r3, #28]
 80038ec:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	699b      	ldr	r3, [r3, #24]
 80038f4:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 80038f6:	8a7a      	ldrh	r2, [r7, #18]
 80038f8:	8a3b      	ldrh	r3, [r7, #16]
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d008      	beq.n	8003910 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80038fe:	8a3b      	ldrh	r3, [r7, #16]
 8003900:	041a      	lsls	r2, r3, #16
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	69db      	ldr	r3, [r3, #28]
 8003908:	b29b      	uxth	r3, r3
 800390a:	4313      	orrs	r3, r2
 800390c:	617b      	str	r3, [r7, #20]
 800390e:	e004      	b.n	800391a <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8003910:	8a7b      	ldrh	r3, [r7, #18]
 8003912:	041a      	lsls	r2, r3, #16
 8003914:	89fb      	ldrh	r3, [r7, #14]
 8003916:	4313      	orrs	r3, r2
 8003918:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 800391a:	697b      	ldr	r3, [r7, #20]
}
 800391c:	4618      	mov	r0, r3
 800391e:	371c      	adds	r7, #28
 8003920:	46bd      	mov	sp, r7
 8003922:	bc80      	pop	{r7}
 8003924:	4770      	bx	lr

08003926 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8003926:	b580      	push	{r7, lr}
 8003928:	b084      	sub	sp, #16
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
 800392e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003930:	2300      	movs	r3, #0
 8003932:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f000 f85d 	bl	80039f4 <RTC_EnterInitMode>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d002      	beq.n	8003946 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	73fb      	strb	r3, [r7, #15]
 8003944:	e011      	b.n	800396a <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	683a      	ldr	r2, [r7, #0]
 800394c:	0c12      	lsrs	r2, r2, #16
 800394e:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	683a      	ldr	r2, [r7, #0]
 8003956:	b292      	uxth	r2, r2
 8003958:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 f872 	bl	8003a44 <RTC_ExitInitMode>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d001      	beq.n	800396a <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800396a:	7bfb      	ldrb	r3, [r7, #15]
}
 800396c:	4618      	mov	r0, r3
 800396e:	3710      	adds	r7, #16
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}

08003974 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8003974:	b480      	push	{r7}
 8003976:	b085      	sub	sp, #20
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 800397c:	2300      	movs	r3, #0
 800397e:	81fb      	strh	r3, [r7, #14]
 8003980:	2300      	movs	r3, #0
 8003982:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	6a1b      	ldr	r3, [r3, #32]
 800398a:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003992:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8003994:	89fb      	ldrh	r3, [r7, #14]
 8003996:	041a      	lsls	r2, r3, #16
 8003998:	89bb      	ldrh	r3, [r7, #12]
 800399a:	4313      	orrs	r3, r2
}
 800399c:	4618      	mov	r0, r3
 800399e:	3714      	adds	r7, #20
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bc80      	pop	{r7}
 80039a4:	4770      	bx	lr

080039a6 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 80039a6:	b580      	push	{r7, lr}
 80039a8:	b084      	sub	sp, #16
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]
 80039ae:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039b0:	2300      	movs	r3, #0
 80039b2:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f000 f81d 	bl	80039f4 <RTC_EnterInitMode>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d002      	beq.n	80039c6 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	73fb      	strb	r3, [r7, #15]
 80039c4:	e011      	b.n	80039ea <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	683a      	ldr	r2, [r7, #0]
 80039cc:	0c12      	lsrs	r2, r2, #16
 80039ce:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	683a      	ldr	r2, [r7, #0]
 80039d6:	b292      	uxth	r2, r2
 80039d8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f000 f832 	bl	8003a44 <RTC_ExitInitMode>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d001      	beq.n	80039ea <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80039ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3710      	adds	r7, #16
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b084      	sub	sp, #16
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80039fc:	2300      	movs	r3, #0
 80039fe:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8003a00:	f7fd fe04 	bl	800160c <HAL_GetTick>
 8003a04:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003a06:	e009      	b.n	8003a1c <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003a08:	f7fd fe00 	bl	800160c <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a16:	d901      	bls.n	8003a1c <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	e00f      	b.n	8003a3c <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f003 0320 	and.w	r3, r3, #32
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d0ee      	beq.n	8003a08 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	685a      	ldr	r2, [r3, #4]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f042 0210 	orr.w	r2, r2, #16
 8003a38:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8003a3a:	2300      	movs	r3, #0
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3710      	adds	r7, #16
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	685a      	ldr	r2, [r3, #4]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f022 0210 	bic.w	r2, r2, #16
 8003a5e:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003a60:	f7fd fdd4 	bl	800160c <HAL_GetTick>
 8003a64:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003a66:	e009      	b.n	8003a7c <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003a68:	f7fd fdd0 	bl	800160c <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a76:	d901      	bls.n	8003a7c <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	e007      	b.n	8003a8c <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f003 0320 	and.w	r3, r3, #32
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d0ee      	beq.n	8003a68 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8003a8a:	2300      	movs	r3, #0
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3710      	adds	r7, #16
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b085      	sub	sp, #20
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8003aa2:	e005      	b.n	8003ab0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	3301      	adds	r3, #1
 8003aa8:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8003aaa:	79fb      	ldrb	r3, [r7, #7]
 8003aac:	3b0a      	subs	r3, #10
 8003aae:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8003ab0:	79fb      	ldrb	r3, [r7, #7]
 8003ab2:	2b09      	cmp	r3, #9
 8003ab4:	d8f6      	bhi.n	8003aa4 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	011b      	lsls	r3, r3, #4
 8003abc:	b2da      	uxtb	r2, r3
 8003abe:	79fb      	ldrb	r3, [r7, #7]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	b2db      	uxtb	r3, r3
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3714      	adds	r7, #20
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bc80      	pop	{r7}
 8003acc:	4770      	bx	lr

08003ace <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003ace:	b480      	push	{r7}
 8003ad0:	b085      	sub	sp, #20
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8003adc:	79fb      	ldrb	r3, [r7, #7]
 8003ade:	091b      	lsrs	r3, r3, #4
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	4413      	add	r3, r2
 8003aea:	005b      	lsls	r3, r3, #1
 8003aec:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8003aee:	79fb      	ldrb	r3, [r7, #7]
 8003af0:	f003 030f 	and.w	r3, r3, #15
 8003af4:	b2da      	uxtb	r2, r3
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	4413      	add	r3, r2
 8003afc:	b2db      	uxtb	r3, r3
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3714      	adds	r7, #20
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bc80      	pop	{r7}
 8003b06:	4770      	bx	lr

08003b08 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b086      	sub	sp, #24
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8003b12:	2300      	movs	r3, #0
 8003b14:	617b      	str	r3, [r7, #20]
 8003b16:	2300      	movs	r3, #0
 8003b18:	613b      	str	r3, [r7, #16]
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	7bdb      	ldrb	r3, [r3, #15]
 8003b26:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	7b5b      	ldrb	r3, [r3, #13]
 8003b2c:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	7b9b      	ldrb	r3, [r3, #14]
 8003b32:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8003b34:	2300      	movs	r3, #0
 8003b36:	60bb      	str	r3, [r7, #8]
 8003b38:	e06f      	b.n	8003c1a <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d011      	beq.n	8003b64 <RTC_DateUpdate+0x5c>
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	2b03      	cmp	r3, #3
 8003b44:	d00e      	beq.n	8003b64 <RTC_DateUpdate+0x5c>
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	2b05      	cmp	r3, #5
 8003b4a:	d00b      	beq.n	8003b64 <RTC_DateUpdate+0x5c>
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	2b07      	cmp	r3, #7
 8003b50:	d008      	beq.n	8003b64 <RTC_DateUpdate+0x5c>
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	2b08      	cmp	r3, #8
 8003b56:	d005      	beq.n	8003b64 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	2b0a      	cmp	r3, #10
 8003b5c:	d002      	beq.n	8003b64 <RTC_DateUpdate+0x5c>
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	2b0c      	cmp	r3, #12
 8003b62:	d117      	bne.n	8003b94 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2b1e      	cmp	r3, #30
 8003b68:	d803      	bhi.n	8003b72 <RTC_DateUpdate+0x6a>
      {
        day++;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	3301      	adds	r3, #1
 8003b6e:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8003b70:	e050      	b.n	8003c14 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	2b0c      	cmp	r3, #12
 8003b76:	d005      	beq.n	8003b84 <RTC_DateUpdate+0x7c>
        {
          month++;
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	613b      	str	r3, [r7, #16]
          day = 1U;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8003b82:	e047      	b.n	8003c14 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8003b84:	2301      	movs	r3, #1
 8003b86:	613b      	str	r3, [r7, #16]
          day = 1U;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	60fb      	str	r3, [r7, #12]
          year++;
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	3301      	adds	r3, #1
 8003b90:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8003b92:	e03f      	b.n	8003c14 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	2b04      	cmp	r3, #4
 8003b98:	d008      	beq.n	8003bac <RTC_DateUpdate+0xa4>
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	2b06      	cmp	r3, #6
 8003b9e:	d005      	beq.n	8003bac <RTC_DateUpdate+0xa4>
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	2b09      	cmp	r3, #9
 8003ba4:	d002      	beq.n	8003bac <RTC_DateUpdate+0xa4>
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	2b0b      	cmp	r3, #11
 8003baa:	d10c      	bne.n	8003bc6 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2b1d      	cmp	r3, #29
 8003bb0:	d803      	bhi.n	8003bba <RTC_DateUpdate+0xb2>
      {
        day++;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	3301      	adds	r3, #1
 8003bb6:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8003bb8:	e02c      	b.n	8003c14 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	613b      	str	r3, [r7, #16]
        day = 1U;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8003bc4:	e026      	b.n	8003c14 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	2b02      	cmp	r3, #2
 8003bca:	d123      	bne.n	8003c14 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2b1b      	cmp	r3, #27
 8003bd0:	d803      	bhi.n	8003bda <RTC_DateUpdate+0xd2>
      {
        day++;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	3301      	adds	r3, #1
 8003bd6:	60fb      	str	r3, [r7, #12]
 8003bd8:	e01c      	b.n	8003c14 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2b1c      	cmp	r3, #28
 8003bde:	d111      	bne.n	8003c04 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	4618      	mov	r0, r3
 8003be6:	f000 f839 	bl	8003c5c <RTC_IsLeapYear>
 8003bea:	4603      	mov	r3, r0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d003      	beq.n	8003bf8 <RTC_DateUpdate+0xf0>
        {
          day++;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	60fb      	str	r3, [r7, #12]
 8003bf6:	e00d      	b.n	8003c14 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	3301      	adds	r3, #1
 8003bfc:	613b      	str	r3, [r7, #16]
          day = 1U;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	60fb      	str	r3, [r7, #12]
 8003c02:	e007      	b.n	8003c14 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2b1d      	cmp	r3, #29
 8003c08:	d104      	bne.n	8003c14 <RTC_DateUpdate+0x10c>
      {
        month++;
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	3301      	adds	r3, #1
 8003c0e:	613b      	str	r3, [r7, #16]
        day = 1U;
 8003c10:	2301      	movs	r3, #1
 8003c12:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	3301      	adds	r3, #1
 8003c18:	60bb      	str	r3, [r7, #8]
 8003c1a:	68ba      	ldr	r2, [r7, #8]
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d38b      	bcc.n	8003b3a <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	b2da      	uxtb	r2, r3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	b2da      	uxtb	r2, r3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	b2da      	uxtb	r2, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	68fa      	ldr	r2, [r7, #12]
 8003c40:	b2d2      	uxtb	r2, r2
 8003c42:	4619      	mov	r1, r3
 8003c44:	6978      	ldr	r0, [r7, #20]
 8003c46:	f000 f83b 	bl	8003cc0 <RTC_WeekDayNum>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	731a      	strb	r2, [r3, #12]
}
 8003c52:	bf00      	nop
 8003c54:	3718      	adds	r7, #24
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
	...

08003c5c <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	4603      	mov	r3, r0
 8003c64:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8003c66:	88fb      	ldrh	r3, [r7, #6]
 8003c68:	f003 0303 	and.w	r3, r3, #3
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d001      	beq.n	8003c76 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8003c72:	2300      	movs	r3, #0
 8003c74:	e01d      	b.n	8003cb2 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8003c76:	88fb      	ldrh	r3, [r7, #6]
 8003c78:	4a10      	ldr	r2, [pc, #64]	; (8003cbc <RTC_IsLeapYear+0x60>)
 8003c7a:	fba2 1203 	umull	r1, r2, r2, r3
 8003c7e:	0952      	lsrs	r2, r2, #5
 8003c80:	2164      	movs	r1, #100	; 0x64
 8003c82:	fb01 f202 	mul.w	r2, r1, r2
 8003c86:	1a9b      	subs	r3, r3, r2
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d001      	beq.n	8003c92 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e00f      	b.n	8003cb2 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8003c92:	88fb      	ldrh	r3, [r7, #6]
 8003c94:	4a09      	ldr	r2, [pc, #36]	; (8003cbc <RTC_IsLeapYear+0x60>)
 8003c96:	fba2 1203 	umull	r1, r2, r2, r3
 8003c9a:	09d2      	lsrs	r2, r2, #7
 8003c9c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8003ca0:	fb01 f202 	mul.w	r2, r1, r2
 8003ca4:	1a9b      	subs	r3, r3, r2
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d101      	bne.n	8003cb0 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e000      	b.n	8003cb2 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8003cb0:	2300      	movs	r3, #0
  }
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	370c      	adds	r7, #12
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bc80      	pop	{r7}
 8003cba:	4770      	bx	lr
 8003cbc:	51eb851f 	.word	0x51eb851f

08003cc0 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b085      	sub	sp, #20
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	460b      	mov	r3, r1
 8003cca:	70fb      	strb	r3, [r7, #3]
 8003ccc:	4613      	mov	r3, r2
 8003cce:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	60bb      	str	r3, [r7, #8]
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8003cde:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8003ce0:	78fb      	ldrb	r3, [r7, #3]
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d82d      	bhi.n	8003d42 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8003ce6:	78fa      	ldrb	r2, [r7, #3]
 8003ce8:	4613      	mov	r3, r2
 8003cea:	005b      	lsls	r3, r3, #1
 8003cec:	4413      	add	r3, r2
 8003cee:	00db      	lsls	r3, r3, #3
 8003cf0:	1a9b      	subs	r3, r3, r2
 8003cf2:	4a2c      	ldr	r2, [pc, #176]	; (8003da4 <RTC_WeekDayNum+0xe4>)
 8003cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf8:	085a      	lsrs	r2, r3, #1
 8003cfa:	78bb      	ldrb	r3, [r7, #2]
 8003cfc:	441a      	add	r2, r3
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	441a      	add	r2, r3
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	3b01      	subs	r3, #1
 8003d06:	089b      	lsrs	r3, r3, #2
 8003d08:	441a      	add	r2, r3
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	3b01      	subs	r3, #1
 8003d0e:	4926      	ldr	r1, [pc, #152]	; (8003da8 <RTC_WeekDayNum+0xe8>)
 8003d10:	fba1 1303 	umull	r1, r3, r1, r3
 8003d14:	095b      	lsrs	r3, r3, #5
 8003d16:	1ad2      	subs	r2, r2, r3
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	3b01      	subs	r3, #1
 8003d1c:	4922      	ldr	r1, [pc, #136]	; (8003da8 <RTC_WeekDayNum+0xe8>)
 8003d1e:	fba1 1303 	umull	r1, r3, r1, r3
 8003d22:	09db      	lsrs	r3, r3, #7
 8003d24:	4413      	add	r3, r2
 8003d26:	1d1a      	adds	r2, r3, #4
 8003d28:	4b20      	ldr	r3, [pc, #128]	; (8003dac <RTC_WeekDayNum+0xec>)
 8003d2a:	fba3 1302 	umull	r1, r3, r3, r2
 8003d2e:	1ad1      	subs	r1, r2, r3
 8003d30:	0849      	lsrs	r1, r1, #1
 8003d32:	440b      	add	r3, r1
 8003d34:	0899      	lsrs	r1, r3, #2
 8003d36:	460b      	mov	r3, r1
 8003d38:	00db      	lsls	r3, r3, #3
 8003d3a:	1a5b      	subs	r3, r3, r1
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	60fb      	str	r3, [r7, #12]
 8003d40:	e029      	b.n	8003d96 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8003d42:	78fa      	ldrb	r2, [r7, #3]
 8003d44:	4613      	mov	r3, r2
 8003d46:	005b      	lsls	r3, r3, #1
 8003d48:	4413      	add	r3, r2
 8003d4a:	00db      	lsls	r3, r3, #3
 8003d4c:	1a9b      	subs	r3, r3, r2
 8003d4e:	4a15      	ldr	r2, [pc, #84]	; (8003da4 <RTC_WeekDayNum+0xe4>)
 8003d50:	fba2 2303 	umull	r2, r3, r2, r3
 8003d54:	085a      	lsrs	r2, r3, #1
 8003d56:	78bb      	ldrb	r3, [r7, #2]
 8003d58:	441a      	add	r2, r3
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	441a      	add	r2, r3
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	089b      	lsrs	r3, r3, #2
 8003d62:	441a      	add	r2, r3
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	4910      	ldr	r1, [pc, #64]	; (8003da8 <RTC_WeekDayNum+0xe8>)
 8003d68:	fba1 1303 	umull	r1, r3, r1, r3
 8003d6c:	095b      	lsrs	r3, r3, #5
 8003d6e:	1ad2      	subs	r2, r2, r3
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	490d      	ldr	r1, [pc, #52]	; (8003da8 <RTC_WeekDayNum+0xe8>)
 8003d74:	fba1 1303 	umull	r1, r3, r1, r3
 8003d78:	09db      	lsrs	r3, r3, #7
 8003d7a:	4413      	add	r3, r2
 8003d7c:	1c9a      	adds	r2, r3, #2
 8003d7e:	4b0b      	ldr	r3, [pc, #44]	; (8003dac <RTC_WeekDayNum+0xec>)
 8003d80:	fba3 1302 	umull	r1, r3, r3, r2
 8003d84:	1ad1      	subs	r1, r2, r3
 8003d86:	0849      	lsrs	r1, r1, #1
 8003d88:	440b      	add	r3, r1
 8003d8a:	0899      	lsrs	r1, r3, #2
 8003d8c:	460b      	mov	r3, r1
 8003d8e:	00db      	lsls	r3, r3, #3
 8003d90:	1a5b      	subs	r3, r3, r1
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	b2db      	uxtb	r3, r3
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3714      	adds	r7, #20
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bc80      	pop	{r7}
 8003da2:	4770      	bx	lr
 8003da4:	38e38e39 	.word	0x38e38e39
 8003da8:	51eb851f 	.word	0x51eb851f
 8003dac:	24924925 	.word	0x24924925

08003db0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b082      	sub	sp, #8
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d101      	bne.n	8003dc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e04c      	b.n	8003e5c <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d111      	bne.n	8003df2 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 fffa 	bl	8004dd0 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d102      	bne.n	8003dea <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	4a1f      	ldr	r2, [pc, #124]	; (8003e64 <HAL_TIM_Base_Init+0xb4>)
 8003de8:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2202      	movs	r2, #2
 8003df6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	3304      	adds	r3, #4
 8003e02:	4619      	mov	r1, r3
 8003e04:	4610      	mov	r0, r2
 8003e06:	f000 fd03 	bl	8004810 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2201      	movs	r2, #1
 8003e16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2201      	movs	r2, #1
 8003e26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2201      	movs	r2, #1
 8003e36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2201      	movs	r2, #1
 8003e46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2201      	movs	r2, #1
 8003e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e5a:	2300      	movs	r3, #0
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3708      	adds	r7, #8
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}
 8003e64:	080010d1 	.word	0x080010d1

08003e68 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b085      	sub	sp, #20
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d001      	beq.n	8003e80 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e03c      	b.n	8003efa <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2202      	movs	r2, #2
 8003e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a1d      	ldr	r2, [pc, #116]	; (8003f04 <HAL_TIM_Base_Start+0x9c>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d018      	beq.n	8003ec4 <HAL_TIM_Base_Start+0x5c>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a1c      	ldr	r2, [pc, #112]	; (8003f08 <HAL_TIM_Base_Start+0xa0>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d013      	beq.n	8003ec4 <HAL_TIM_Base_Start+0x5c>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ea4:	d00e      	beq.n	8003ec4 <HAL_TIM_Base_Start+0x5c>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a18      	ldr	r2, [pc, #96]	; (8003f0c <HAL_TIM_Base_Start+0xa4>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d009      	beq.n	8003ec4 <HAL_TIM_Base_Start+0x5c>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a16      	ldr	r2, [pc, #88]	; (8003f10 <HAL_TIM_Base_Start+0xa8>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d004      	beq.n	8003ec4 <HAL_TIM_Base_Start+0x5c>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a15      	ldr	r2, [pc, #84]	; (8003f14 <HAL_TIM_Base_Start+0xac>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d111      	bne.n	8003ee8 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	f003 0307 	and.w	r3, r3, #7
 8003ece:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2b06      	cmp	r3, #6
 8003ed4:	d010      	beq.n	8003ef8 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f042 0201 	orr.w	r2, r2, #1
 8003ee4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ee6:	e007      	b.n	8003ef8 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f042 0201 	orr.w	r2, r2, #1
 8003ef6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ef8:	2300      	movs	r3, #0
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3714      	adds	r7, #20
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bc80      	pop	{r7}
 8003f02:	4770      	bx	lr
 8003f04:	40012c00 	.word	0x40012c00
 8003f08:	40013400 	.word	0x40013400
 8003f0c:	40000400 	.word	0x40000400
 8003f10:	40000800 	.word	0x40000800
 8003f14:	40000c00 	.word	0x40000c00

08003f18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b085      	sub	sp, #20
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d001      	beq.n	8003f30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e044      	b.n	8003fba <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2202      	movs	r2, #2
 8003f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	68da      	ldr	r2, [r3, #12]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f042 0201 	orr.w	r2, r2, #1
 8003f46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a1d      	ldr	r2, [pc, #116]	; (8003fc4 <HAL_TIM_Base_Start_IT+0xac>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d018      	beq.n	8003f84 <HAL_TIM_Base_Start_IT+0x6c>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a1c      	ldr	r2, [pc, #112]	; (8003fc8 <HAL_TIM_Base_Start_IT+0xb0>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d013      	beq.n	8003f84 <HAL_TIM_Base_Start_IT+0x6c>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f64:	d00e      	beq.n	8003f84 <HAL_TIM_Base_Start_IT+0x6c>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a18      	ldr	r2, [pc, #96]	; (8003fcc <HAL_TIM_Base_Start_IT+0xb4>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d009      	beq.n	8003f84 <HAL_TIM_Base_Start_IT+0x6c>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a16      	ldr	r2, [pc, #88]	; (8003fd0 <HAL_TIM_Base_Start_IT+0xb8>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d004      	beq.n	8003f84 <HAL_TIM_Base_Start_IT+0x6c>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a15      	ldr	r2, [pc, #84]	; (8003fd4 <HAL_TIM_Base_Start_IT+0xbc>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d111      	bne.n	8003fa8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	f003 0307 	and.w	r3, r3, #7
 8003f8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2b06      	cmp	r3, #6
 8003f94:	d010      	beq.n	8003fb8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f042 0201 	orr.w	r2, r2, #1
 8003fa4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fa6:	e007      	b.n	8003fb8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f042 0201 	orr.w	r2, r2, #1
 8003fb6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3714      	adds	r7, #20
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bc80      	pop	{r7}
 8003fc2:	4770      	bx	lr
 8003fc4:	40012c00 	.word	0x40012c00
 8003fc8:	40013400 	.word	0x40013400
 8003fcc:	40000400 	.word	0x40000400
 8003fd0:	40000800 	.word	0x40000800
 8003fd4:	40000c00 	.word	0x40000c00

08003fd8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d101      	bne.n	8003fea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e04c      	b.n	8004084 <HAL_TIM_PWM_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d111      	bne.n	800401a <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 fee6 	bl	8004dd0 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004008:	2b00      	cmp	r3, #0
 800400a:	d102      	bne.n	8004012 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	4a1f      	ldr	r2, [pc, #124]	; (800408c <HAL_TIM_PWM_Init+0xb4>)
 8004010:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2202      	movs	r2, #2
 800401e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	3304      	adds	r3, #4
 800402a:	4619      	mov	r1, r3
 800402c:	4610      	mov	r0, r2
 800402e:	f000 fbef 	bl	8004810 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2201      	movs	r2, #1
 8004036:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2201      	movs	r2, #1
 800403e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2201      	movs	r2, #1
 8004046:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2201      	movs	r2, #1
 800404e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2201      	movs	r2, #1
 8004056:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2201      	movs	r2, #1
 800405e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2201      	movs	r2, #1
 8004066:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2201      	movs	r2, #1
 800406e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2201      	movs	r2, #1
 8004076:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2201      	movs	r2, #1
 800407e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004082:	2300      	movs	r3, #0
}
 8004084:	4618      	mov	r0, r3
 8004086:	3708      	adds	r7, #8
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}
 800408c:	08004091 	.word	0x08004091

08004090 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004098:	bf00      	nop
 800409a:	370c      	adds	r7, #12
 800409c:	46bd      	mov	sp, r7
 800409e:	bc80      	pop	{r7}
 80040a0:	4770      	bx	lr
	...

080040a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b084      	sub	sp, #16
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d109      	bne.n	80040c8 <HAL_TIM_PWM_Start+0x24>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	2b01      	cmp	r3, #1
 80040be:	bf14      	ite	ne
 80040c0:	2301      	movne	r3, #1
 80040c2:	2300      	moveq	r3, #0
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	e022      	b.n	800410e <HAL_TIM_PWM_Start+0x6a>
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	2b04      	cmp	r3, #4
 80040cc:	d109      	bne.n	80040e2 <HAL_TIM_PWM_Start+0x3e>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	bf14      	ite	ne
 80040da:	2301      	movne	r3, #1
 80040dc:	2300      	moveq	r3, #0
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	e015      	b.n	800410e <HAL_TIM_PWM_Start+0x6a>
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	2b08      	cmp	r3, #8
 80040e6:	d109      	bne.n	80040fc <HAL_TIM_PWM_Start+0x58>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	bf14      	ite	ne
 80040f4:	2301      	movne	r3, #1
 80040f6:	2300      	moveq	r3, #0
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	e008      	b.n	800410e <HAL_TIM_PWM_Start+0x6a>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004102:	b2db      	uxtb	r3, r3
 8004104:	2b01      	cmp	r3, #1
 8004106:	bf14      	ite	ne
 8004108:	2301      	movne	r3, #1
 800410a:	2300      	moveq	r3, #0
 800410c:	b2db      	uxtb	r3, r3
 800410e:	2b00      	cmp	r3, #0
 8004110:	d001      	beq.n	8004116 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e072      	b.n	80041fc <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d104      	bne.n	8004126 <HAL_TIM_PWM_Start+0x82>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2202      	movs	r2, #2
 8004120:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004124:	e013      	b.n	800414e <HAL_TIM_PWM_Start+0xaa>
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	2b04      	cmp	r3, #4
 800412a:	d104      	bne.n	8004136 <HAL_TIM_PWM_Start+0x92>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2202      	movs	r2, #2
 8004130:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004134:	e00b      	b.n	800414e <HAL_TIM_PWM_Start+0xaa>
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	2b08      	cmp	r3, #8
 800413a:	d104      	bne.n	8004146 <HAL_TIM_PWM_Start+0xa2>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2202      	movs	r2, #2
 8004140:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004144:	e003      	b.n	800414e <HAL_TIM_PWM_Start+0xaa>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2202      	movs	r2, #2
 800414a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	2201      	movs	r2, #1
 8004154:	6839      	ldr	r1, [r7, #0]
 8004156:	4618      	mov	r0, r3
 8004158:	f000 fe16 	bl	8004d88 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a28      	ldr	r2, [pc, #160]	; (8004204 <HAL_TIM_PWM_Start+0x160>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d004      	beq.n	8004170 <HAL_TIM_PWM_Start+0xcc>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a27      	ldr	r2, [pc, #156]	; (8004208 <HAL_TIM_PWM_Start+0x164>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d101      	bne.n	8004174 <HAL_TIM_PWM_Start+0xd0>
 8004170:	2301      	movs	r3, #1
 8004172:	e000      	b.n	8004176 <HAL_TIM_PWM_Start+0xd2>
 8004174:	2300      	movs	r3, #0
 8004176:	2b00      	cmp	r3, #0
 8004178:	d007      	beq.n	800418a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004188:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a1d      	ldr	r2, [pc, #116]	; (8004204 <HAL_TIM_PWM_Start+0x160>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d018      	beq.n	80041c6 <HAL_TIM_PWM_Start+0x122>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a1b      	ldr	r2, [pc, #108]	; (8004208 <HAL_TIM_PWM_Start+0x164>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d013      	beq.n	80041c6 <HAL_TIM_PWM_Start+0x122>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041a6:	d00e      	beq.n	80041c6 <HAL_TIM_PWM_Start+0x122>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a17      	ldr	r2, [pc, #92]	; (800420c <HAL_TIM_PWM_Start+0x168>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d009      	beq.n	80041c6 <HAL_TIM_PWM_Start+0x122>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a16      	ldr	r2, [pc, #88]	; (8004210 <HAL_TIM_PWM_Start+0x16c>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d004      	beq.n	80041c6 <HAL_TIM_PWM_Start+0x122>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a14      	ldr	r2, [pc, #80]	; (8004214 <HAL_TIM_PWM_Start+0x170>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d111      	bne.n	80041ea <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	f003 0307 	and.w	r3, r3, #7
 80041d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2b06      	cmp	r3, #6
 80041d6:	d010      	beq.n	80041fa <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f042 0201 	orr.w	r2, r2, #1
 80041e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041e8:	e007      	b.n	80041fa <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f042 0201 	orr.w	r2, r2, #1
 80041f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80041fa:	2300      	movs	r3, #0
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3710      	adds	r7, #16
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}
 8004204:	40012c00 	.word	0x40012c00
 8004208:	40013400 	.word	0x40013400
 800420c:	40000400 	.word	0x40000400
 8004210:	40000800 	.word	0x40000800
 8004214:	40000c00 	.word	0x40000c00

08004218 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b082      	sub	sp, #8
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	691b      	ldr	r3, [r3, #16]
 8004226:	f003 0302 	and.w	r3, r3, #2
 800422a:	2b02      	cmp	r3, #2
 800422c:	d128      	bne.n	8004280 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	f003 0302 	and.w	r3, r3, #2
 8004238:	2b02      	cmp	r3, #2
 800423a:	d121      	bne.n	8004280 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f06f 0202 	mvn.w	r2, #2
 8004244:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2201      	movs	r2, #1
 800424a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	699b      	ldr	r3, [r3, #24]
 8004252:	f003 0303 	and.w	r3, r3, #3
 8004256:	2b00      	cmp	r3, #0
 8004258:	d005      	beq.n	8004266 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	4798      	blx	r3
 8004264:	e009      	b.n	800427a <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	691b      	ldr	r3, [r3, #16]
 8004286:	f003 0304 	and.w	r3, r3, #4
 800428a:	2b04      	cmp	r3, #4
 800428c:	d128      	bne.n	80042e0 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	f003 0304 	and.w	r3, r3, #4
 8004298:	2b04      	cmp	r3, #4
 800429a:	d121      	bne.n	80042e0 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f06f 0204 	mvn.w	r2, #4
 80042a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2202      	movs	r2, #2
 80042aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	699b      	ldr	r3, [r3, #24]
 80042b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d005      	beq.n	80042c6 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	4798      	blx	r3
 80042c4:	e009      	b.n	80042da <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2200      	movs	r2, #0
 80042de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	f003 0308 	and.w	r3, r3, #8
 80042ea:	2b08      	cmp	r3, #8
 80042ec:	d128      	bne.n	8004340 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	f003 0308 	and.w	r3, r3, #8
 80042f8:	2b08      	cmp	r3, #8
 80042fa:	d121      	bne.n	8004340 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f06f 0208 	mvn.w	r2, #8
 8004304:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2204      	movs	r2, #4
 800430a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	69db      	ldr	r3, [r3, #28]
 8004312:	f003 0303 	and.w	r3, r3, #3
 8004316:	2b00      	cmp	r3, #0
 8004318:	d005      	beq.n	8004326 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	4798      	blx	r3
 8004324:	e009      	b.n	800433a <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	691b      	ldr	r3, [r3, #16]
 8004346:	f003 0310 	and.w	r3, r3, #16
 800434a:	2b10      	cmp	r3, #16
 800434c:	d128      	bne.n	80043a0 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	f003 0310 	and.w	r3, r3, #16
 8004358:	2b10      	cmp	r3, #16
 800435a:	d121      	bne.n	80043a0 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f06f 0210 	mvn.w	r2, #16
 8004364:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2208      	movs	r2, #8
 800436a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	69db      	ldr	r3, [r3, #28]
 8004372:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004376:	2b00      	cmp	r3, #0
 8004378:	d005      	beq.n	8004386 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	4798      	blx	r3
 8004384:	e009      	b.n	800439a <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	691b      	ldr	r3, [r3, #16]
 80043a6:	f003 0301 	and.w	r3, r3, #1
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d110      	bne.n	80043d0 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	f003 0301 	and.w	r3, r3, #1
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d109      	bne.n	80043d0 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f06f 0201 	mvn.w	r2, #1
 80043c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	691b      	ldr	r3, [r3, #16]
 80043d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043da:	2b80      	cmp	r3, #128	; 0x80
 80043dc:	d110      	bne.n	8004400 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043e8:	2b80      	cmp	r3, #128	; 0x80
 80043ea:	d109      	bne.n	8004400 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80043f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800440a:	2b40      	cmp	r3, #64	; 0x40
 800440c:	d110      	bne.n	8004430 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004418:	2b40      	cmp	r3, #64	; 0x40
 800441a:	d109      	bne.n	8004430 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004424:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	f003 0320 	and.w	r3, r3, #32
 800443a:	2b20      	cmp	r3, #32
 800443c:	d110      	bne.n	8004460 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	f003 0320 	and.w	r3, r3, #32
 8004448:	2b20      	cmp	r3, #32
 800444a:	d109      	bne.n	8004460 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f06f 0220 	mvn.w	r2, #32
 8004454:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004460:	bf00      	nop
 8004462:	3708      	adds	r7, #8
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}

08004468 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b084      	sub	sp, #16
 800446c:	af00      	add	r7, sp, #0
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	60b9      	str	r1, [r7, #8]
 8004472:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800447a:	2b01      	cmp	r3, #1
 800447c:	d101      	bne.n	8004482 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800447e:	2302      	movs	r3, #2
 8004480:	e0ac      	b.n	80045dc <HAL_TIM_PWM_ConfigChannel+0x174>
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2201      	movs	r2, #1
 8004486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2b0c      	cmp	r3, #12
 800448e:	f200 809f 	bhi.w	80045d0 <HAL_TIM_PWM_ConfigChannel+0x168>
 8004492:	a201      	add	r2, pc, #4	; (adr r2, 8004498 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004498:	080044cd 	.word	0x080044cd
 800449c:	080045d1 	.word	0x080045d1
 80044a0:	080045d1 	.word	0x080045d1
 80044a4:	080045d1 	.word	0x080045d1
 80044a8:	0800450d 	.word	0x0800450d
 80044ac:	080045d1 	.word	0x080045d1
 80044b0:	080045d1 	.word	0x080045d1
 80044b4:	080045d1 	.word	0x080045d1
 80044b8:	0800454f 	.word	0x0800454f
 80044bc:	080045d1 	.word	0x080045d1
 80044c0:	080045d1 	.word	0x080045d1
 80044c4:	080045d1 	.word	0x080045d1
 80044c8:	0800458f 	.word	0x0800458f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	68b9      	ldr	r1, [r7, #8]
 80044d2:	4618      	mov	r0, r3
 80044d4:	f000 fa16 	bl	8004904 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	699a      	ldr	r2, [r3, #24]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f042 0208 	orr.w	r2, r2, #8
 80044e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	699a      	ldr	r2, [r3, #24]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f022 0204 	bic.w	r2, r2, #4
 80044f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	6999      	ldr	r1, [r3, #24]
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	691a      	ldr	r2, [r3, #16]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	430a      	orrs	r2, r1
 8004508:	619a      	str	r2, [r3, #24]
      break;
 800450a:	e062      	b.n	80045d2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	68b9      	ldr	r1, [r7, #8]
 8004512:	4618      	mov	r0, r3
 8004514:	f000 fa66 	bl	80049e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	699a      	ldr	r2, [r3, #24]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004526:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	699a      	ldr	r2, [r3, #24]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004536:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	6999      	ldr	r1, [r3, #24]
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	021a      	lsls	r2, r3, #8
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	430a      	orrs	r2, r1
 800454a:	619a      	str	r2, [r3, #24]
      break;
 800454c:	e041      	b.n	80045d2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	68b9      	ldr	r1, [r7, #8]
 8004554:	4618      	mov	r0, r3
 8004556:	f000 fab9 	bl	8004acc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	69da      	ldr	r2, [r3, #28]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f042 0208 	orr.w	r2, r2, #8
 8004568:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	69da      	ldr	r2, [r3, #28]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f022 0204 	bic.w	r2, r2, #4
 8004578:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	69d9      	ldr	r1, [r3, #28]
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	691a      	ldr	r2, [r3, #16]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	430a      	orrs	r2, r1
 800458a:	61da      	str	r2, [r3, #28]
      break;
 800458c:	e021      	b.n	80045d2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	68b9      	ldr	r1, [r7, #8]
 8004594:	4618      	mov	r0, r3
 8004596:	f000 fb0d 	bl	8004bb4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	69da      	ldr	r2, [r3, #28]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	69da      	ldr	r2, [r3, #28]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	69d9      	ldr	r1, [r3, #28]
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	691b      	ldr	r3, [r3, #16]
 80045c4:	021a      	lsls	r2, r3, #8
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	430a      	orrs	r2, r1
 80045cc:	61da      	str	r2, [r3, #28]
      break;
 80045ce:	e000      	b.n	80045d2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80045d0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045da:	2300      	movs	r3, #0
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3710      	adds	r7, #16
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
 80045ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d101      	bne.n	80045fc <HAL_TIM_ConfigClockSource+0x18>
 80045f8:	2302      	movs	r3, #2
 80045fa:	e0b3      	b.n	8004764 <HAL_TIM_ConfigClockSource+0x180>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2202      	movs	r2, #2
 8004608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800461a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004622:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	68fa      	ldr	r2, [r7, #12]
 800462a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004634:	d03e      	beq.n	80046b4 <HAL_TIM_ConfigClockSource+0xd0>
 8004636:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800463a:	f200 8087 	bhi.w	800474c <HAL_TIM_ConfigClockSource+0x168>
 800463e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004642:	f000 8085 	beq.w	8004750 <HAL_TIM_ConfigClockSource+0x16c>
 8004646:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800464a:	d87f      	bhi.n	800474c <HAL_TIM_ConfigClockSource+0x168>
 800464c:	2b70      	cmp	r3, #112	; 0x70
 800464e:	d01a      	beq.n	8004686 <HAL_TIM_ConfigClockSource+0xa2>
 8004650:	2b70      	cmp	r3, #112	; 0x70
 8004652:	d87b      	bhi.n	800474c <HAL_TIM_ConfigClockSource+0x168>
 8004654:	2b60      	cmp	r3, #96	; 0x60
 8004656:	d050      	beq.n	80046fa <HAL_TIM_ConfigClockSource+0x116>
 8004658:	2b60      	cmp	r3, #96	; 0x60
 800465a:	d877      	bhi.n	800474c <HAL_TIM_ConfigClockSource+0x168>
 800465c:	2b50      	cmp	r3, #80	; 0x50
 800465e:	d03c      	beq.n	80046da <HAL_TIM_ConfigClockSource+0xf6>
 8004660:	2b50      	cmp	r3, #80	; 0x50
 8004662:	d873      	bhi.n	800474c <HAL_TIM_ConfigClockSource+0x168>
 8004664:	2b40      	cmp	r3, #64	; 0x40
 8004666:	d058      	beq.n	800471a <HAL_TIM_ConfigClockSource+0x136>
 8004668:	2b40      	cmp	r3, #64	; 0x40
 800466a:	d86f      	bhi.n	800474c <HAL_TIM_ConfigClockSource+0x168>
 800466c:	2b30      	cmp	r3, #48	; 0x30
 800466e:	d064      	beq.n	800473a <HAL_TIM_ConfigClockSource+0x156>
 8004670:	2b30      	cmp	r3, #48	; 0x30
 8004672:	d86b      	bhi.n	800474c <HAL_TIM_ConfigClockSource+0x168>
 8004674:	2b20      	cmp	r3, #32
 8004676:	d060      	beq.n	800473a <HAL_TIM_ConfigClockSource+0x156>
 8004678:	2b20      	cmp	r3, #32
 800467a:	d867      	bhi.n	800474c <HAL_TIM_ConfigClockSource+0x168>
 800467c:	2b00      	cmp	r3, #0
 800467e:	d05c      	beq.n	800473a <HAL_TIM_ConfigClockSource+0x156>
 8004680:	2b10      	cmp	r3, #16
 8004682:	d05a      	beq.n	800473a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004684:	e062      	b.n	800474c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6818      	ldr	r0, [r3, #0]
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	6899      	ldr	r1, [r3, #8]
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	685a      	ldr	r2, [r3, #4]
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	f000 fb58 	bl	8004d4a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80046a8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	68fa      	ldr	r2, [r7, #12]
 80046b0:	609a      	str	r2, [r3, #8]
      break;
 80046b2:	e04e      	b.n	8004752 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6818      	ldr	r0, [r3, #0]
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	6899      	ldr	r1, [r3, #8]
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	685a      	ldr	r2, [r3, #4]
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	f000 fb41 	bl	8004d4a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	689a      	ldr	r2, [r3, #8]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046d6:	609a      	str	r2, [r3, #8]
      break;
 80046d8:	e03b      	b.n	8004752 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6818      	ldr	r0, [r3, #0]
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	6859      	ldr	r1, [r3, #4]
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	68db      	ldr	r3, [r3, #12]
 80046e6:	461a      	mov	r2, r3
 80046e8:	f000 fab8 	bl	8004c5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	2150      	movs	r1, #80	; 0x50
 80046f2:	4618      	mov	r0, r3
 80046f4:	f000 fb0f 	bl	8004d16 <TIM_ITRx_SetConfig>
      break;
 80046f8:	e02b      	b.n	8004752 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6818      	ldr	r0, [r3, #0]
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	6859      	ldr	r1, [r3, #4]
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	461a      	mov	r2, r3
 8004708:	f000 fad6 	bl	8004cb8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	2160      	movs	r1, #96	; 0x60
 8004712:	4618      	mov	r0, r3
 8004714:	f000 faff 	bl	8004d16 <TIM_ITRx_SetConfig>
      break;
 8004718:	e01b      	b.n	8004752 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6818      	ldr	r0, [r3, #0]
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	6859      	ldr	r1, [r3, #4]
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	68db      	ldr	r3, [r3, #12]
 8004726:	461a      	mov	r2, r3
 8004728:	f000 fa98 	bl	8004c5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	2140      	movs	r1, #64	; 0x40
 8004732:	4618      	mov	r0, r3
 8004734:	f000 faef 	bl	8004d16 <TIM_ITRx_SetConfig>
      break;
 8004738:	e00b      	b.n	8004752 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4619      	mov	r1, r3
 8004744:	4610      	mov	r0, r2
 8004746:	f000 fae6 	bl	8004d16 <TIM_ITRx_SetConfig>
        break;
 800474a:	e002      	b.n	8004752 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800474c:	bf00      	nop
 800474e:	e000      	b.n	8004752 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004750:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2201      	movs	r2, #1
 8004756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004762:	2300      	movs	r3, #0
}
 8004764:	4618      	mov	r0, r3
 8004766:	3710      	adds	r7, #16
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}

0800476c <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800476c:	b480      	push	{r7}
 800476e:	b083      	sub	sp, #12
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8004774:	bf00      	nop
 8004776:	370c      	adds	r7, #12
 8004778:	46bd      	mov	sp, r7
 800477a:	bc80      	pop	{r7}
 800477c:	4770      	bx	lr

0800477e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800477e:	b480      	push	{r7}
 8004780:	b083      	sub	sp, #12
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004786:	bf00      	nop
 8004788:	370c      	adds	r7, #12
 800478a:	46bd      	mov	sp, r7
 800478c:	bc80      	pop	{r7}
 800478e:	4770      	bx	lr

08004790 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004790:	b480      	push	{r7}
 8004792:	b083      	sub	sp, #12
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004798:	bf00      	nop
 800479a:	370c      	adds	r7, #12
 800479c:	46bd      	mov	sp, r7
 800479e:	bc80      	pop	{r7}
 80047a0:	4770      	bx	lr

080047a2 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80047a2:	b480      	push	{r7}
 80047a4:	b083      	sub	sp, #12
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80047aa:	bf00      	nop
 80047ac:	370c      	adds	r7, #12
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bc80      	pop	{r7}
 80047b2:	4770      	bx	lr

080047b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047bc:	bf00      	nop
 80047be:	370c      	adds	r7, #12
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bc80      	pop	{r7}
 80047c4:	4770      	bx	lr

080047c6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80047c6:	b480      	push	{r7}
 80047c8:	b083      	sub	sp, #12
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80047ce:	bf00      	nop
 80047d0:	370c      	adds	r7, #12
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bc80      	pop	{r7}
 80047d6:	4770      	bx	lr

080047d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047e0:	bf00      	nop
 80047e2:	370c      	adds	r7, #12
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bc80      	pop	{r7}
 80047e8:	4770      	bx	lr

080047ea <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80047ea:	b480      	push	{r7}
 80047ec:	b083      	sub	sp, #12
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 80047f2:	bf00      	nop
 80047f4:	370c      	adds	r7, #12
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bc80      	pop	{r7}
 80047fa:	4770      	bx	lr

080047fc <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004804:	bf00      	nop
 8004806:	370c      	adds	r7, #12
 8004808:	46bd      	mov	sp, r7
 800480a:	bc80      	pop	{r7}
 800480c:	4770      	bx	lr
	...

08004810 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004810:	b480      	push	{r7}
 8004812:	b085      	sub	sp, #20
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	4a33      	ldr	r2, [pc, #204]	; (80048f0 <TIM_Base_SetConfig+0xe0>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d013      	beq.n	8004850 <TIM_Base_SetConfig+0x40>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4a32      	ldr	r2, [pc, #200]	; (80048f4 <TIM_Base_SetConfig+0xe4>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d00f      	beq.n	8004850 <TIM_Base_SetConfig+0x40>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004836:	d00b      	beq.n	8004850 <TIM_Base_SetConfig+0x40>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4a2f      	ldr	r2, [pc, #188]	; (80048f8 <TIM_Base_SetConfig+0xe8>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d007      	beq.n	8004850 <TIM_Base_SetConfig+0x40>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4a2e      	ldr	r2, [pc, #184]	; (80048fc <TIM_Base_SetConfig+0xec>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d003      	beq.n	8004850 <TIM_Base_SetConfig+0x40>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4a2d      	ldr	r2, [pc, #180]	; (8004900 <TIM_Base_SetConfig+0xf0>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d108      	bne.n	8004862 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004856:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	68fa      	ldr	r2, [r7, #12]
 800485e:	4313      	orrs	r3, r2
 8004860:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a22      	ldr	r2, [pc, #136]	; (80048f0 <TIM_Base_SetConfig+0xe0>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d013      	beq.n	8004892 <TIM_Base_SetConfig+0x82>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a21      	ldr	r2, [pc, #132]	; (80048f4 <TIM_Base_SetConfig+0xe4>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d00f      	beq.n	8004892 <TIM_Base_SetConfig+0x82>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004878:	d00b      	beq.n	8004892 <TIM_Base_SetConfig+0x82>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a1e      	ldr	r2, [pc, #120]	; (80048f8 <TIM_Base_SetConfig+0xe8>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d007      	beq.n	8004892 <TIM_Base_SetConfig+0x82>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a1d      	ldr	r2, [pc, #116]	; (80048fc <TIM_Base_SetConfig+0xec>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d003      	beq.n	8004892 <TIM_Base_SetConfig+0x82>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4a1c      	ldr	r2, [pc, #112]	; (8004900 <TIM_Base_SetConfig+0xf0>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d108      	bne.n	80048a4 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004898:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	68db      	ldr	r3, [r3, #12]
 800489e:	68fa      	ldr	r2, [r7, #12]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	695b      	ldr	r3, [r3, #20]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	68fa      	ldr	r2, [r7, #12]
 80048b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	689a      	ldr	r2, [r3, #8]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	4a09      	ldr	r2, [pc, #36]	; (80048f0 <TIM_Base_SetConfig+0xe0>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d003      	beq.n	80048d8 <TIM_Base_SetConfig+0xc8>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	4a08      	ldr	r2, [pc, #32]	; (80048f4 <TIM_Base_SetConfig+0xe4>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d103      	bne.n	80048e0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	691a      	ldr	r2, [r3, #16]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2201      	movs	r2, #1
 80048e4:	615a      	str	r2, [r3, #20]
}
 80048e6:	bf00      	nop
 80048e8:	3714      	adds	r7, #20
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bc80      	pop	{r7}
 80048ee:	4770      	bx	lr
 80048f0:	40012c00 	.word	0x40012c00
 80048f4:	40013400 	.word	0x40013400
 80048f8:	40000400 	.word	0x40000400
 80048fc:	40000800 	.word	0x40000800
 8004900:	40000c00 	.word	0x40000c00

08004904 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004904:	b480      	push	{r7}
 8004906:	b087      	sub	sp, #28
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a1b      	ldr	r3, [r3, #32]
 8004912:	f023 0201 	bic.w	r2, r3, #1
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a1b      	ldr	r3, [r3, #32]
 800491e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	699b      	ldr	r3, [r3, #24]
 800492a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004932:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f023 0303 	bic.w	r3, r3, #3
 800493a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	68fa      	ldr	r2, [r7, #12]
 8004942:	4313      	orrs	r3, r2
 8004944:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	f023 0302 	bic.w	r3, r3, #2
 800494c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	697a      	ldr	r2, [r7, #20]
 8004954:	4313      	orrs	r3, r2
 8004956:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	4a20      	ldr	r2, [pc, #128]	; (80049dc <TIM_OC1_SetConfig+0xd8>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d003      	beq.n	8004968 <TIM_OC1_SetConfig+0x64>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	4a1f      	ldr	r2, [pc, #124]	; (80049e0 <TIM_OC1_SetConfig+0xdc>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d10c      	bne.n	8004982 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	f023 0308 	bic.w	r3, r3, #8
 800496e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	697a      	ldr	r2, [r7, #20]
 8004976:	4313      	orrs	r3, r2
 8004978:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	f023 0304 	bic.w	r3, r3, #4
 8004980:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a15      	ldr	r2, [pc, #84]	; (80049dc <TIM_OC1_SetConfig+0xd8>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d003      	beq.n	8004992 <TIM_OC1_SetConfig+0x8e>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a14      	ldr	r2, [pc, #80]	; (80049e0 <TIM_OC1_SetConfig+0xdc>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d111      	bne.n	80049b6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004998:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	695b      	ldr	r3, [r3, #20]
 80049a6:	693a      	ldr	r2, [r7, #16]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	699b      	ldr	r3, [r3, #24]
 80049b0:	693a      	ldr	r2, [r7, #16]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	693a      	ldr	r2, [r7, #16]
 80049ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	68fa      	ldr	r2, [r7, #12]
 80049c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	685a      	ldr	r2, [r3, #4]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	697a      	ldr	r2, [r7, #20]
 80049ce:	621a      	str	r2, [r3, #32]
}
 80049d0:	bf00      	nop
 80049d2:	371c      	adds	r7, #28
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bc80      	pop	{r7}
 80049d8:	4770      	bx	lr
 80049da:	bf00      	nop
 80049dc:	40012c00 	.word	0x40012c00
 80049e0:	40013400 	.word	0x40013400

080049e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b087      	sub	sp, #28
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a1b      	ldr	r3, [r3, #32]
 80049f2:	f023 0210 	bic.w	r2, r3, #16
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a1b      	ldr	r3, [r3, #32]
 80049fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	699b      	ldr	r3, [r3, #24]
 8004a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	021b      	lsls	r3, r3, #8
 8004a22:	68fa      	ldr	r2, [r7, #12]
 8004a24:	4313      	orrs	r3, r2
 8004a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	f023 0320 	bic.w	r3, r3, #32
 8004a2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	011b      	lsls	r3, r3, #4
 8004a36:	697a      	ldr	r2, [r7, #20]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	4a21      	ldr	r2, [pc, #132]	; (8004ac4 <TIM_OC2_SetConfig+0xe0>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d003      	beq.n	8004a4c <TIM_OC2_SetConfig+0x68>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	4a20      	ldr	r2, [pc, #128]	; (8004ac8 <TIM_OC2_SetConfig+0xe4>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d10d      	bne.n	8004a68 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	011b      	lsls	r3, r3, #4
 8004a5a:	697a      	ldr	r2, [r7, #20]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a66:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4a16      	ldr	r2, [pc, #88]	; (8004ac4 <TIM_OC2_SetConfig+0xe0>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d003      	beq.n	8004a78 <TIM_OC2_SetConfig+0x94>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4a15      	ldr	r2, [pc, #84]	; (8004ac8 <TIM_OC2_SetConfig+0xe4>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d113      	bne.n	8004aa0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	695b      	ldr	r3, [r3, #20]
 8004a8c:	009b      	lsls	r3, r3, #2
 8004a8e:	693a      	ldr	r2, [r7, #16]
 8004a90:	4313      	orrs	r3, r2
 8004a92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	699b      	ldr	r3, [r3, #24]
 8004a98:	009b      	lsls	r3, r3, #2
 8004a9a:	693a      	ldr	r2, [r7, #16]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	693a      	ldr	r2, [r7, #16]
 8004aa4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	68fa      	ldr	r2, [r7, #12]
 8004aaa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	685a      	ldr	r2, [r3, #4]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	697a      	ldr	r2, [r7, #20]
 8004ab8:	621a      	str	r2, [r3, #32]
}
 8004aba:	bf00      	nop
 8004abc:	371c      	adds	r7, #28
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bc80      	pop	{r7}
 8004ac2:	4770      	bx	lr
 8004ac4:	40012c00 	.word	0x40012c00
 8004ac8:	40013400 	.word	0x40013400

08004acc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b087      	sub	sp, #28
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a1b      	ldr	r3, [r3, #32]
 8004ada:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a1b      	ldr	r3, [r3, #32]
 8004ae6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	69db      	ldr	r3, [r3, #28]
 8004af2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004afa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f023 0303 	bic.w	r3, r3, #3
 8004b02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68fa      	ldr	r2, [r7, #12]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	021b      	lsls	r3, r3, #8
 8004b1c:	697a      	ldr	r2, [r7, #20]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	4a21      	ldr	r2, [pc, #132]	; (8004bac <TIM_OC3_SetConfig+0xe0>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d003      	beq.n	8004b32 <TIM_OC3_SetConfig+0x66>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4a20      	ldr	r2, [pc, #128]	; (8004bb0 <TIM_OC3_SetConfig+0xe4>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d10d      	bne.n	8004b4e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	021b      	lsls	r3, r3, #8
 8004b40:	697a      	ldr	r2, [r7, #20]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4a16      	ldr	r2, [pc, #88]	; (8004bac <TIM_OC3_SetConfig+0xe0>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d003      	beq.n	8004b5e <TIM_OC3_SetConfig+0x92>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4a15      	ldr	r2, [pc, #84]	; (8004bb0 <TIM_OC3_SetConfig+0xe4>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d113      	bne.n	8004b86 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	695b      	ldr	r3, [r3, #20]
 8004b72:	011b      	lsls	r3, r3, #4
 8004b74:	693a      	ldr	r2, [r7, #16]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	699b      	ldr	r3, [r3, #24]
 8004b7e:	011b      	lsls	r3, r3, #4
 8004b80:	693a      	ldr	r2, [r7, #16]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	693a      	ldr	r2, [r7, #16]
 8004b8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	68fa      	ldr	r2, [r7, #12]
 8004b90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	685a      	ldr	r2, [r3, #4]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	697a      	ldr	r2, [r7, #20]
 8004b9e:	621a      	str	r2, [r3, #32]
}
 8004ba0:	bf00      	nop
 8004ba2:	371c      	adds	r7, #28
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bc80      	pop	{r7}
 8004ba8:	4770      	bx	lr
 8004baa:	bf00      	nop
 8004bac:	40012c00 	.word	0x40012c00
 8004bb0:	40013400 	.word	0x40013400

08004bb4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b087      	sub	sp, #28
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6a1b      	ldr	r3, [r3, #32]
 8004bc2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a1b      	ldr	r3, [r3, #32]
 8004bce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	69db      	ldr	r3, [r3, #28]
 8004bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004be2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	021b      	lsls	r3, r3, #8
 8004bf2:	68fa      	ldr	r2, [r7, #12]
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004bfe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	031b      	lsls	r3, r3, #12
 8004c06:	693a      	ldr	r2, [r7, #16]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	4a11      	ldr	r2, [pc, #68]	; (8004c54 <TIM_OC4_SetConfig+0xa0>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d003      	beq.n	8004c1c <TIM_OC4_SetConfig+0x68>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	4a10      	ldr	r2, [pc, #64]	; (8004c58 <TIM_OC4_SetConfig+0xa4>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d109      	bne.n	8004c30 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c22:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	695b      	ldr	r3, [r3, #20]
 8004c28:	019b      	lsls	r3, r3, #6
 8004c2a:	697a      	ldr	r2, [r7, #20]
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	697a      	ldr	r2, [r7, #20]
 8004c34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	68fa      	ldr	r2, [r7, #12]
 8004c3a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	685a      	ldr	r2, [r3, #4]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	693a      	ldr	r2, [r7, #16]
 8004c48:	621a      	str	r2, [r3, #32]
}
 8004c4a:	bf00      	nop
 8004c4c:	371c      	adds	r7, #28
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bc80      	pop	{r7}
 8004c52:	4770      	bx	lr
 8004c54:	40012c00 	.word	0x40012c00
 8004c58:	40013400 	.word	0x40013400

08004c5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b087      	sub	sp, #28
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	60b9      	str	r1, [r7, #8]
 8004c66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6a1b      	ldr	r3, [r3, #32]
 8004c6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	6a1b      	ldr	r3, [r3, #32]
 8004c72:	f023 0201 	bic.w	r2, r3, #1
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	699b      	ldr	r3, [r3, #24]
 8004c7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	011b      	lsls	r3, r3, #4
 8004c8c:	693a      	ldr	r2, [r7, #16]
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	f023 030a 	bic.w	r3, r3, #10
 8004c98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c9a:	697a      	ldr	r2, [r7, #20]
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	693a      	ldr	r2, [r7, #16]
 8004ca6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	697a      	ldr	r2, [r7, #20]
 8004cac:	621a      	str	r2, [r3, #32]
}
 8004cae:	bf00      	nop
 8004cb0:	371c      	adds	r7, #28
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bc80      	pop	{r7}
 8004cb6:	4770      	bx	lr

08004cb8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b087      	sub	sp, #28
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	60f8      	str	r0, [r7, #12]
 8004cc0:	60b9      	str	r1, [r7, #8]
 8004cc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6a1b      	ldr	r3, [r3, #32]
 8004cc8:	f023 0210 	bic.w	r2, r3, #16
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	699b      	ldr	r3, [r3, #24]
 8004cd4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6a1b      	ldr	r3, [r3, #32]
 8004cda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ce2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	031b      	lsls	r3, r3, #12
 8004ce8:	697a      	ldr	r2, [r7, #20]
 8004cea:	4313      	orrs	r3, r2
 8004cec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004cf4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	011b      	lsls	r3, r3, #4
 8004cfa:	693a      	ldr	r2, [r7, #16]
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	697a      	ldr	r2, [r7, #20]
 8004d04:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	693a      	ldr	r2, [r7, #16]
 8004d0a:	621a      	str	r2, [r3, #32]
}
 8004d0c:	bf00      	nop
 8004d0e:	371c      	adds	r7, #28
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bc80      	pop	{r7}
 8004d14:	4770      	bx	lr

08004d16 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d16:	b480      	push	{r7}
 8004d18:	b085      	sub	sp, #20
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	6078      	str	r0, [r7, #4]
 8004d1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d2e:	683a      	ldr	r2, [r7, #0]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	f043 0307 	orr.w	r3, r3, #7
 8004d38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	68fa      	ldr	r2, [r7, #12]
 8004d3e:	609a      	str	r2, [r3, #8]
}
 8004d40:	bf00      	nop
 8004d42:	3714      	adds	r7, #20
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bc80      	pop	{r7}
 8004d48:	4770      	bx	lr

08004d4a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d4a:	b480      	push	{r7}
 8004d4c:	b087      	sub	sp, #28
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	60f8      	str	r0, [r7, #12]
 8004d52:	60b9      	str	r1, [r7, #8]
 8004d54:	607a      	str	r2, [r7, #4]
 8004d56:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d64:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	021a      	lsls	r2, r3, #8
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	431a      	orrs	r2, r3
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	4313      	orrs	r3, r2
 8004d72:	697a      	ldr	r2, [r7, #20]
 8004d74:	4313      	orrs	r3, r2
 8004d76:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	697a      	ldr	r2, [r7, #20]
 8004d7c:	609a      	str	r2, [r3, #8]
}
 8004d7e:	bf00      	nop
 8004d80:	371c      	adds	r7, #28
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bc80      	pop	{r7}
 8004d86:	4770      	bx	lr

08004d88 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b087      	sub	sp, #28
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	60f8      	str	r0, [r7, #12]
 8004d90:	60b9      	str	r1, [r7, #8]
 8004d92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	f003 031f 	and.w	r3, r3, #31
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004da0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	6a1a      	ldr	r2, [r3, #32]
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	43db      	mvns	r3, r3
 8004daa:	401a      	ands	r2, r3
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6a1a      	ldr	r2, [r3, #32]
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	f003 031f 	and.w	r3, r3, #31
 8004dba:	6879      	ldr	r1, [r7, #4]
 8004dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8004dc0:	431a      	orrs	r2, r3
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	621a      	str	r2, [r3, #32]
}
 8004dc6:	bf00      	nop
 8004dc8:	371c      	adds	r7, #28
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bc80      	pop	{r7}
 8004dce:	4770      	bx	lr

08004dd0 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	4a1c      	ldr	r2, [pc, #112]	; (8004e4c <TIM_ResetCallback+0x7c>)
 8004ddc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	4a1b      	ldr	r2, [pc, #108]	; (8004e50 <TIM_ResetCallback+0x80>)
 8004de4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	4a1a      	ldr	r2, [pc, #104]	; (8004e54 <TIM_ResetCallback+0x84>)
 8004dec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	4a19      	ldr	r2, [pc, #100]	; (8004e58 <TIM_ResetCallback+0x88>)
 8004df4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4a18      	ldr	r2, [pc, #96]	; (8004e5c <TIM_ResetCallback+0x8c>)
 8004dfc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	4a17      	ldr	r2, [pc, #92]	; (8004e60 <TIM_ResetCallback+0x90>)
 8004e04:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4a16      	ldr	r2, [pc, #88]	; (8004e64 <TIM_ResetCallback+0x94>)
 8004e0c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	4a15      	ldr	r2, [pc, #84]	; (8004e68 <TIM_ResetCallback+0x98>)
 8004e14:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4a14      	ldr	r2, [pc, #80]	; (8004e6c <TIM_ResetCallback+0x9c>)
 8004e1c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	4a13      	ldr	r2, [pc, #76]	; (8004e70 <TIM_ResetCallback+0xa0>)
 8004e24:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	4a12      	ldr	r2, [pc, #72]	; (8004e74 <TIM_ResetCallback+0xa4>)
 8004e2c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	4a11      	ldr	r2, [pc, #68]	; (8004e78 <TIM_ResetCallback+0xa8>)
 8004e34:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	4a10      	ldr	r2, [pc, #64]	; (8004e7c <TIM_ResetCallback+0xac>)
 8004e3c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8004e40:	bf00      	nop
 8004e42:	370c      	adds	r7, #12
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bc80      	pop	{r7}
 8004e48:	4770      	bx	lr
 8004e4a:	bf00      	nop
 8004e4c:	08000f4d 	.word	0x08000f4d
 8004e50:	0800476d 	.word	0x0800476d
 8004e54:	080047d9 	.word	0x080047d9
 8004e58:	080047eb 	.word	0x080047eb
 8004e5c:	08004791 	.word	0x08004791
 8004e60:	080047a3 	.word	0x080047a3
 8004e64:	0800477f 	.word	0x0800477f
 8004e68:	080047b5 	.word	0x080047b5
 8004e6c:	080047c7 	.word	0x080047c7
 8004e70:	080047fd 	.word	0x080047fd
 8004e74:	08004ffb 	.word	0x08004ffb
 8004e78:	0800500d 	.word	0x0800500d
 8004e7c:	0800501f 	.word	0x0800501f

08004e80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b085      	sub	sp, #20
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d101      	bne.n	8004e98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e94:	2302      	movs	r3, #2
 8004e96:	e050      	b.n	8004f3a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2202      	movs	r2, #2
 8004ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ebe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	68fa      	ldr	r2, [r7, #12]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	68fa      	ldr	r2, [r7, #12]
 8004ed0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a1b      	ldr	r2, [pc, #108]	; (8004f44 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d018      	beq.n	8004f0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a19      	ldr	r2, [pc, #100]	; (8004f48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d013      	beq.n	8004f0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eee:	d00e      	beq.n	8004f0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a15      	ldr	r2, [pc, #84]	; (8004f4c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d009      	beq.n	8004f0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a14      	ldr	r2, [pc, #80]	; (8004f50 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d004      	beq.n	8004f0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a12      	ldr	r2, [pc, #72]	; (8004f54 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d10c      	bne.n	8004f28 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	68ba      	ldr	r2, [r7, #8]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	68ba      	ldr	r2, [r7, #8]
 8004f26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2200      	movs	r2, #0
 8004f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f38:	2300      	movs	r3, #0
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3714      	adds	r7, #20
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bc80      	pop	{r7}
 8004f42:	4770      	bx	lr
 8004f44:	40012c00 	.word	0x40012c00
 8004f48:	40013400 	.word	0x40013400
 8004f4c:	40000400 	.word	0x40000400
 8004f50:	40000800 	.word	0x40000800
 8004f54:	40000c00 	.word	0x40000c00

08004f58 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b085      	sub	sp, #20
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004f62:	2300      	movs	r3, #0
 8004f64:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d101      	bne.n	8004f74 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004f70:	2302      	movs	r3, #2
 8004f72:	e03d      	b.n	8004ff0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	68db      	ldr	r3, [r3, #12]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	4313      	orrs	r3, r2
 8004f96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	691b      	ldr	r3, [r3, #16]
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	695b      	ldr	r3, [r3, #20]
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	69db      	ldr	r3, [r3, #28]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	68fa      	ldr	r2, [r7, #12]
 8004fe4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004fee:	2300      	movs	r3, #0
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3714      	adds	r7, #20
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bc80      	pop	{r7}
 8004ff8:	4770      	bx	lr

08004ffa <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ffa:	b480      	push	{r7}
 8004ffc:	b083      	sub	sp, #12
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005002:	bf00      	nop
 8005004:	370c      	adds	r7, #12
 8005006:	46bd      	mov	sp, r7
 8005008:	bc80      	pop	{r7}
 800500a:	4770      	bx	lr

0800500c <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800500c:	b480      	push	{r7}
 800500e:	b083      	sub	sp, #12
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8005014:	bf00      	nop
 8005016:	370c      	adds	r7, #12
 8005018:	46bd      	mov	sp, r7
 800501a:	bc80      	pop	{r7}
 800501c:	4770      	bx	lr

0800501e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800501e:	b480      	push	{r7}
 8005020:	b083      	sub	sp, #12
 8005022:	af00      	add	r7, sp, #0
 8005024:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005026:	bf00      	nop
 8005028:	370c      	adds	r7, #12
 800502a:	46bd      	mov	sp, r7
 800502c:	bc80      	pop	{r7}
 800502e:	4770      	bx	lr

08005030 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b082      	sub	sp, #8
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d101      	bne.n	8005042 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e04a      	b.n	80050d8 <HAL_UART_Init+0xa8>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005048:	b2db      	uxtb	r3, r3
 800504a:	2b00      	cmp	r3, #0
 800504c:	d111      	bne.n	8005072 <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f000 fb00 	bl	800565c <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005060:	2b00      	cmp	r3, #0
 8005062:	d102      	bne.n	800506a <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	4a1e      	ldr	r2, [pc, #120]	; (80050e0 <HAL_UART_Init+0xb0>)
 8005068:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2224      	movs	r2, #36	; 0x24
 8005076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	68da      	ldr	r2, [r3, #12]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005088:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f000 fcf4 	bl	8005a78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	691a      	ldr	r2, [r3, #16]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800509e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	695a      	ldr	r2, [r3, #20]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80050ae:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	68da      	ldr	r2, [r3, #12]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80050be:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2200      	movs	r2, #0
 80050c4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2220      	movs	r2, #32
 80050ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2220      	movs	r2, #32
 80050d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80050d6:	2300      	movs	r3, #0
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3708      	adds	r7, #8
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	080011e1 	.word	0x080011e1

080050e4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b08a      	sub	sp, #40	; 0x28
 80050e8:	af02      	add	r7, sp, #8
 80050ea:	60f8      	str	r0, [r7, #12]
 80050ec:	60b9      	str	r1, [r7, #8]
 80050ee:	603b      	str	r3, [r7, #0]
 80050f0:	4613      	mov	r3, r2
 80050f2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80050f4:	2300      	movs	r3, #0
 80050f6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	2b20      	cmp	r3, #32
 8005102:	d17c      	bne.n	80051fe <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d002      	beq.n	8005110 <HAL_UART_Transmit+0x2c>
 800510a:	88fb      	ldrh	r3, [r7, #6]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d101      	bne.n	8005114 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	e075      	b.n	8005200 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800511a:	2b01      	cmp	r3, #1
 800511c:	d101      	bne.n	8005122 <HAL_UART_Transmit+0x3e>
 800511e:	2302      	movs	r3, #2
 8005120:	e06e      	b.n	8005200 <HAL_UART_Transmit+0x11c>
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2201      	movs	r2, #1
 8005126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2200      	movs	r2, #0
 800512e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2221      	movs	r2, #33	; 0x21
 8005134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005138:	f7fc fa68 	bl	800160c <HAL_GetTick>
 800513c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	88fa      	ldrh	r2, [r7, #6]
 8005142:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	88fa      	ldrh	r2, [r7, #6]
 8005148:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005152:	d108      	bne.n	8005166 <HAL_UART_Transmit+0x82>
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	691b      	ldr	r3, [r3, #16]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d104      	bne.n	8005166 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800515c:	2300      	movs	r3, #0
 800515e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	61bb      	str	r3, [r7, #24]
 8005164:	e003      	b.n	800516e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800516a:	2300      	movs	r3, #0
 800516c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2200      	movs	r2, #0
 8005172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005176:	e02a      	b.n	80051ce <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	9300      	str	r3, [sp, #0]
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	2200      	movs	r2, #0
 8005180:	2180      	movs	r1, #128	; 0x80
 8005182:	68f8      	ldr	r0, [r7, #12]
 8005184:	f000 faa0 	bl	80056c8 <UART_WaitOnFlagUntilTimeout>
 8005188:	4603      	mov	r3, r0
 800518a:	2b00      	cmp	r3, #0
 800518c:	d001      	beq.n	8005192 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800518e:	2303      	movs	r3, #3
 8005190:	e036      	b.n	8005200 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d10b      	bne.n	80051b0 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005198:	69bb      	ldr	r3, [r7, #24]
 800519a:	881b      	ldrh	r3, [r3, #0]
 800519c:	461a      	mov	r2, r3
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051a6:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80051a8:	69bb      	ldr	r3, [r7, #24]
 80051aa:	3302      	adds	r3, #2
 80051ac:	61bb      	str	r3, [r7, #24]
 80051ae:	e007      	b.n	80051c0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	781a      	ldrb	r2, [r3, #0]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	3301      	adds	r3, #1
 80051be:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	3b01      	subs	r3, #1
 80051c8:	b29a      	uxth	r2, r3
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d1cf      	bne.n	8005178 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	9300      	str	r3, [sp, #0]
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	2200      	movs	r2, #0
 80051e0:	2140      	movs	r1, #64	; 0x40
 80051e2:	68f8      	ldr	r0, [r7, #12]
 80051e4:	f000 fa70 	bl	80056c8 <UART_WaitOnFlagUntilTimeout>
 80051e8:	4603      	mov	r3, r0
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d001      	beq.n	80051f2 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80051ee:	2303      	movs	r3, #3
 80051f0:	e006      	b.n	8005200 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2220      	movs	r2, #32
 80051f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80051fa:	2300      	movs	r3, #0
 80051fc:	e000      	b.n	8005200 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80051fe:	2302      	movs	r3, #2
  }
}
 8005200:	4618      	mov	r0, r3
 8005202:	3720      	adds	r7, #32
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}

08005208 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b084      	sub	sp, #16
 800520c:	af00      	add	r7, sp, #0
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	60b9      	str	r1, [r7, #8]
 8005212:	4613      	mov	r3, r2
 8005214:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800521c:	b2db      	uxtb	r3, r3
 800521e:	2b20      	cmp	r3, #32
 8005220:	d11d      	bne.n	800525e <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d002      	beq.n	800522e <HAL_UART_Receive_IT+0x26>
 8005228:	88fb      	ldrh	r3, [r7, #6]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d101      	bne.n	8005232 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e016      	b.n	8005260 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005238:	2b01      	cmp	r3, #1
 800523a:	d101      	bne.n	8005240 <HAL_UART_Receive_IT+0x38>
 800523c:	2302      	movs	r3, #2
 800523e:	e00f      	b.n	8005260 <HAL_UART_Receive_IT+0x58>
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2201      	movs	r2, #1
 8005244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2200      	movs	r2, #0
 800524c:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800524e:	88fb      	ldrh	r3, [r7, #6]
 8005250:	461a      	mov	r2, r3
 8005252:	68b9      	ldr	r1, [r7, #8]
 8005254:	68f8      	ldr	r0, [r7, #12]
 8005256:	f000 fa81 	bl	800575c <UART_Start_Receive_IT>
 800525a:	4603      	mov	r3, r0
 800525c:	e000      	b.n	8005260 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800525e:	2302      	movs	r3, #2
  }
}
 8005260:	4618      	mov	r0, r3
 8005262:	3710      	adds	r7, #16
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}

08005268 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b08a      	sub	sp, #40	; 0x28
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	695b      	ldr	r3, [r3, #20]
 8005286:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005288:	2300      	movs	r3, #0
 800528a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800528c:	2300      	movs	r3, #0
 800528e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005292:	f003 030f 	and.w	r3, r3, #15
 8005296:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005298:	69bb      	ldr	r3, [r7, #24]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d10d      	bne.n	80052ba <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800529e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a0:	f003 0320 	and.w	r3, r3, #32
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d008      	beq.n	80052ba <HAL_UART_IRQHandler+0x52>
 80052a8:	6a3b      	ldr	r3, [r7, #32]
 80052aa:	f003 0320 	and.w	r3, r3, #32
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d003      	beq.n	80052ba <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f000 fb34 	bl	8005920 <UART_Receive_IT>
      return;
 80052b8:	e180      	b.n	80055bc <HAL_UART_IRQHandler+0x354>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80052ba:	69bb      	ldr	r3, [r7, #24]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	f000 80b4 	beq.w	800542a <HAL_UART_IRQHandler+0x1c2>
 80052c2:	69fb      	ldr	r3, [r7, #28]
 80052c4:	f003 0301 	and.w	r3, r3, #1
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d105      	bne.n	80052d8 <HAL_UART_IRQHandler+0x70>
 80052cc:	6a3b      	ldr	r3, [r7, #32]
 80052ce:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	f000 80a9 	beq.w	800542a <HAL_UART_IRQHandler+0x1c2>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80052d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052da:	f003 0301 	and.w	r3, r3, #1
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d00a      	beq.n	80052f8 <HAL_UART_IRQHandler+0x90>
 80052e2:	6a3b      	ldr	r3, [r7, #32]
 80052e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d005      	beq.n	80052f8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f0:	f043 0201 	orr.w	r2, r3, #1
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80052f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fa:	f003 0304 	and.w	r3, r3, #4
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d00a      	beq.n	8005318 <HAL_UART_IRQHandler+0xb0>
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	f003 0301 	and.w	r3, r3, #1
 8005308:	2b00      	cmp	r3, #0
 800530a:	d005      	beq.n	8005318 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005310:	f043 0202 	orr.w	r2, r3, #2
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531a:	f003 0302 	and.w	r3, r3, #2
 800531e:	2b00      	cmp	r3, #0
 8005320:	d00a      	beq.n	8005338 <HAL_UART_IRQHandler+0xd0>
 8005322:	69fb      	ldr	r3, [r7, #28]
 8005324:	f003 0301 	and.w	r3, r3, #1
 8005328:	2b00      	cmp	r3, #0
 800532a:	d005      	beq.n	8005338 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005330:	f043 0204 	orr.w	r2, r3, #4
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533a:	f003 0308 	and.w	r3, r3, #8
 800533e:	2b00      	cmp	r3, #0
 8005340:	d00f      	beq.n	8005362 <HAL_UART_IRQHandler+0xfa>
 8005342:	6a3b      	ldr	r3, [r7, #32]
 8005344:	f003 0320 	and.w	r3, r3, #32
 8005348:	2b00      	cmp	r3, #0
 800534a:	d104      	bne.n	8005356 <HAL_UART_IRQHandler+0xee>
 800534c:	69fb      	ldr	r3, [r7, #28]
 800534e:	f003 0301 	and.w	r3, r3, #1
 8005352:	2b00      	cmp	r3, #0
 8005354:	d005      	beq.n	8005362 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800535a:	f043 0208 	orr.w	r2, r3, #8
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005366:	2b00      	cmp	r3, #0
 8005368:	f000 8123 	beq.w	80055b2 <HAL_UART_IRQHandler+0x34a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800536c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536e:	f003 0320 	and.w	r3, r3, #32
 8005372:	2b00      	cmp	r3, #0
 8005374:	d007      	beq.n	8005386 <HAL_UART_IRQHandler+0x11e>
 8005376:	6a3b      	ldr	r3, [r7, #32]
 8005378:	f003 0320 	and.w	r3, r3, #32
 800537c:	2b00      	cmp	r3, #0
 800537e:	d002      	beq.n	8005386 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	f000 facd 	bl	8005920 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	695b      	ldr	r3, [r3, #20]
 800538c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005390:	2b00      	cmp	r3, #0
 8005392:	bf14      	ite	ne
 8005394:	2301      	movne	r3, #1
 8005396:	2300      	moveq	r3, #0
 8005398:	b2db      	uxtb	r3, r3
 800539a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a0:	f003 0308 	and.w	r3, r3, #8
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d102      	bne.n	80053ae <HAL_UART_IRQHandler+0x146>
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d033      	beq.n	8005416 <HAL_UART_IRQHandler+0x1ae>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f000 fa0d 	bl	80057ce <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	695b      	ldr	r3, [r3, #20]
 80053ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d024      	beq.n	800540c <HAL_UART_IRQHandler+0x1a4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	695a      	ldr	r2, [r3, #20]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053d0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d013      	beq.n	8005402 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053de:	4a79      	ldr	r2, [pc, #484]	; (80055c4 <HAL_UART_IRQHandler+0x35c>)
 80053e0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e6:	4618      	mov	r0, r3
 80053e8:	f7fc fea0 	bl	800212c <HAL_DMA_Abort_IT>
 80053ec:	4603      	mov	r3, r0
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d019      	beq.n	8005426 <HAL_UART_IRQHandler+0x1be>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053f8:	687a      	ldr	r2, [r7, #4]
 80053fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80053fc:	4610      	mov	r0, r2
 80053fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005400:	e011      	b.n	8005426 <HAL_UART_IRQHandler+0x1be>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800540a:	e00c      	b.n	8005426 <HAL_UART_IRQHandler+0x1be>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005414:	e007      	b.n	8005426 <HAL_UART_IRQHandler+0x1be>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2200      	movs	r2, #0
 8005422:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005424:	e0c5      	b.n	80055b2 <HAL_UART_IRQHandler+0x34a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005426:	bf00      	nop
    return;
 8005428:	e0c3      	b.n	80055b2 <HAL_UART_IRQHandler+0x34a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800542e:	2b01      	cmp	r3, #1
 8005430:	f040 80a3 	bne.w	800557a <HAL_UART_IRQHandler+0x312>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8005434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005436:	f003 0310 	and.w	r3, r3, #16
 800543a:	2b00      	cmp	r3, #0
 800543c:	f000 809d 	beq.w	800557a <HAL_UART_IRQHandler+0x312>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8005440:	6a3b      	ldr	r3, [r7, #32]
 8005442:	f003 0310 	and.w	r3, r3, #16
 8005446:	2b00      	cmp	r3, #0
 8005448:	f000 8097 	beq.w	800557a <HAL_UART_IRQHandler+0x312>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800544c:	2300      	movs	r3, #0
 800544e:	60fb      	str	r3, [r7, #12]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	60fb      	str	r3, [r7, #12]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	60fb      	str	r3, [r7, #12]
 8005460:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	695b      	ldr	r3, [r3, #20]
 8005468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800546c:	2b00      	cmp	r3, #0
 800546e:	d04f      	beq.n	8005510 <HAL_UART_IRQHandler+0x2a8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800547a:	8a3b      	ldrh	r3, [r7, #16]
 800547c:	2b00      	cmp	r3, #0
 800547e:	f000 809a 	beq.w	80055b6 <HAL_UART_IRQHandler+0x34e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005486:	8a3a      	ldrh	r2, [r7, #16]
 8005488:	429a      	cmp	r2, r3
 800548a:	f080 8094 	bcs.w	80055b6 <HAL_UART_IRQHandler+0x34e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	8a3a      	ldrh	r2, [r7, #16]
 8005492:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005498:	699b      	ldr	r3, [r3, #24]
 800549a:	2b20      	cmp	r3, #32
 800549c:	d02b      	beq.n	80054f6 <HAL_UART_IRQHandler+0x28e>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	68da      	ldr	r2, [r3, #12]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80054ac:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	695a      	ldr	r2, [r3, #20]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f022 0201 	bic.w	r2, r2, #1
 80054bc:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	695a      	ldr	r2, [r3, #20]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054cc:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2220      	movs	r2, #32
 80054d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	68da      	ldr	r2, [r3, #12]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f022 0210 	bic.w	r2, r2, #16
 80054ea:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054f0:	4618      	mov	r0, r3
 80054f2:	f7fc fde0 	bl	80020b6 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80054fa:	687a      	ldr	r2, [r7, #4]
 80054fc:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8005502:	b292      	uxth	r2, r2
 8005504:	1a8a      	subs	r2, r1, r2
 8005506:	b292      	uxth	r2, r2
 8005508:	4611      	mov	r1, r2
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif
      }
      return;
 800550e:	e052      	b.n	80055b6 <HAL_UART_IRQHandler+0x34e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005518:	b29b      	uxth	r3, r3
 800551a:	1ad3      	subs	r3, r2, r3
 800551c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005522:	b29b      	uxth	r3, r3
 8005524:	2b00      	cmp	r3, #0
 8005526:	d048      	beq.n	80055ba <HAL_UART_IRQHandler+0x352>
          &&(nb_rx_data > 0U) )
 8005528:	8a7b      	ldrh	r3, [r7, #18]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d045      	beq.n	80055ba <HAL_UART_IRQHandler+0x352>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	68da      	ldr	r2, [r3, #12]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800553c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	695a      	ldr	r2, [r3, #20]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f022 0201 	bic.w	r2, r2, #1
 800554c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2220      	movs	r2, #32
 8005552:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2200      	movs	r2, #0
 800555a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	68da      	ldr	r2, [r3, #12]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f022 0210 	bic.w	r2, r2, #16
 800556a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005570:	8a7a      	ldrh	r2, [r7, #18]
 8005572:	4611      	mov	r1, r2
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif
      }
      return;
 8005578:	e01f      	b.n	80055ba <HAL_UART_IRQHandler+0x352>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800557a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005580:	2b00      	cmp	r3, #0
 8005582:	d008      	beq.n	8005596 <HAL_UART_IRQHandler+0x32e>
 8005584:	6a3b      	ldr	r3, [r7, #32]
 8005586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800558a:	2b00      	cmp	r3, #0
 800558c:	d003      	beq.n	8005596 <HAL_UART_IRQHandler+0x32e>
  {
    UART_Transmit_IT(huart);
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f000 f95e 	bl	8005850 <UART_Transmit_IT>
    return;
 8005594:	e012      	b.n	80055bc <HAL_UART_IRQHandler+0x354>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800559c:	2b00      	cmp	r3, #0
 800559e:	d00d      	beq.n	80055bc <HAL_UART_IRQHandler+0x354>
 80055a0:	6a3b      	ldr	r3, [r7, #32]
 80055a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d008      	beq.n	80055bc <HAL_UART_IRQHandler+0x354>
  {
    UART_EndTransmit_IT(huart);
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f000 f99f 	bl	80058ee <UART_EndTransmit_IT>
    return;
 80055b0:	e004      	b.n	80055bc <HAL_UART_IRQHandler+0x354>
    return;
 80055b2:	bf00      	nop
 80055b4:	e002      	b.n	80055bc <HAL_UART_IRQHandler+0x354>
      return;
 80055b6:	bf00      	nop
 80055b8:	e000      	b.n	80055bc <HAL_UART_IRQHandler+0x354>
      return;
 80055ba:	bf00      	nop
  }
}
 80055bc:	3728      	adds	r7, #40	; 0x28
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}
 80055c2:	bf00      	nop
 80055c4:	08005827 	.word	0x08005827

080055c8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b083      	sub	sp, #12
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80055d0:	bf00      	nop
 80055d2:	370c      	adds	r7, #12
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bc80      	pop	{r7}
 80055d8:	4770      	bx	lr

080055da <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80055da:	b480      	push	{r7}
 80055dc:	b083      	sub	sp, #12
 80055de:	af00      	add	r7, sp, #0
 80055e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80055e2:	bf00      	nop
 80055e4:	370c      	adds	r7, #12
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bc80      	pop	{r7}
 80055ea:	4770      	bx	lr

080055ec <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b083      	sub	sp, #12
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80055f4:	bf00      	nop
 80055f6:	370c      	adds	r7, #12
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bc80      	pop	{r7}
 80055fc:	4770      	bx	lr

080055fe <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80055fe:	b480      	push	{r7}
 8005600:	b083      	sub	sp, #12
 8005602:	af00      	add	r7, sp, #0
 8005604:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005606:	bf00      	nop
 8005608:	370c      	adds	r7, #12
 800560a:	46bd      	mov	sp, r7
 800560c:	bc80      	pop	{r7}
 800560e:	4770      	bx	lr

08005610 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8005610:	b480      	push	{r7}
 8005612:	b083      	sub	sp, #12
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8005618:	bf00      	nop
 800561a:	370c      	adds	r7, #12
 800561c:	46bd      	mov	sp, r7
 800561e:	bc80      	pop	{r7}
 8005620:	4770      	bx	lr

08005622 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8005622:	b480      	push	{r7}
 8005624:	b083      	sub	sp, #12
 8005626:	af00      	add	r7, sp, #0
 8005628:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800562a:	bf00      	nop
 800562c:	370c      	adds	r7, #12
 800562e:	46bd      	mov	sp, r7
 8005630:	bc80      	pop	{r7}
 8005632:	4770      	bx	lr

08005634 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8005634:	b480      	push	{r7}
 8005636:	b083      	sub	sp, #12
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800563c:	bf00      	nop
 800563e:	370c      	adds	r7, #12
 8005640:	46bd      	mov	sp, r7
 8005642:	bc80      	pop	{r7}
 8005644:	4770      	bx	lr

08005646 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005646:	b480      	push	{r7}
 8005648:	b083      	sub	sp, #12
 800564a:	af00      	add	r7, sp, #0
 800564c:	6078      	str	r0, [r7, #4]
 800564e:	460b      	mov	r3, r1
 8005650:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005652:	bf00      	nop
 8005654:	370c      	adds	r7, #12
 8005656:	46bd      	mov	sp, r7
 8005658:	bc80      	pop	{r7}
 800565a:	4770      	bx	lr

0800565c <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800565c:	b480      	push	{r7}
 800565e:	b083      	sub	sp, #12
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	4a0f      	ldr	r2, [pc, #60]	; (80056a4 <UART_InitCallbacksToDefault+0x48>)
 8005668:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4a0e      	ldr	r2, [pc, #56]	; (80056a8 <UART_InitCallbacksToDefault+0x4c>)
 800566e:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	4a0e      	ldr	r2, [pc, #56]	; (80056ac <UART_InitCallbacksToDefault+0x50>)
 8005674:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	4a0d      	ldr	r2, [pc, #52]	; (80056b0 <UART_InitCallbacksToDefault+0x54>)
 800567a:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	4a0d      	ldr	r2, [pc, #52]	; (80056b4 <UART_InitCallbacksToDefault+0x58>)
 8005680:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	4a0c      	ldr	r2, [pc, #48]	; (80056b8 <UART_InitCallbacksToDefault+0x5c>)
 8005686:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	4a0c      	ldr	r2, [pc, #48]	; (80056bc <UART_InitCallbacksToDefault+0x60>)
 800568c:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	4a0b      	ldr	r2, [pc, #44]	; (80056c0 <UART_InitCallbacksToDefault+0x64>)
 8005692:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4a0b      	ldr	r2, [pc, #44]	; (80056c4 <UART_InitCallbacksToDefault+0x68>)
 8005698:	669a      	str	r2, [r3, #104]	; 0x68

}
 800569a:	bf00      	nop
 800569c:	370c      	adds	r7, #12
 800569e:	46bd      	mov	sp, r7
 80056a0:	bc80      	pop	{r7}
 80056a2:	4770      	bx	lr
 80056a4:	080055db 	.word	0x080055db
 80056a8:	080055c9 	.word	0x080055c9
 80056ac:	080055ed 	.word	0x080055ed
 80056b0:	08000f6d 	.word	0x08000f6d
 80056b4:	080055ff 	.word	0x080055ff
 80056b8:	08005611 	.word	0x08005611
 80056bc:	08005623 	.word	0x08005623
 80056c0:	08005635 	.word	0x08005635
 80056c4:	08005647 	.word	0x08005647

080056c8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b084      	sub	sp, #16
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	60f8      	str	r0, [r7, #12]
 80056d0:	60b9      	str	r1, [r7, #8]
 80056d2:	603b      	str	r3, [r7, #0]
 80056d4:	4613      	mov	r3, r2
 80056d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056d8:	e02c      	b.n	8005734 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056da:	69bb      	ldr	r3, [r7, #24]
 80056dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056e0:	d028      	beq.n	8005734 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80056e2:	69bb      	ldr	r3, [r7, #24]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d007      	beq.n	80056f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80056e8:	f7fb ff90 	bl	800160c <HAL_GetTick>
 80056ec:	4602      	mov	r2, r0
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	1ad3      	subs	r3, r2, r3
 80056f2:	69ba      	ldr	r2, [r7, #24]
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d21d      	bcs.n	8005734 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	68da      	ldr	r2, [r3, #12]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005706:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	695a      	ldr	r2, [r3, #20]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f022 0201 	bic.w	r2, r2, #1
 8005716:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2220      	movs	r2, #32
 800571c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2220      	movs	r2, #32
 8005724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2200      	movs	r2, #0
 800572c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005730:	2303      	movs	r3, #3
 8005732:	e00f      	b.n	8005754 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	4013      	ands	r3, r2
 800573e:	68ba      	ldr	r2, [r7, #8]
 8005740:	429a      	cmp	r2, r3
 8005742:	bf0c      	ite	eq
 8005744:	2301      	moveq	r3, #1
 8005746:	2300      	movne	r3, #0
 8005748:	b2db      	uxtb	r3, r3
 800574a:	461a      	mov	r2, r3
 800574c:	79fb      	ldrb	r3, [r7, #7]
 800574e:	429a      	cmp	r2, r3
 8005750:	d0c3      	beq.n	80056da <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005752:	2300      	movs	r3, #0
}
 8005754:	4618      	mov	r0, r3
 8005756:	3710      	adds	r7, #16
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}

0800575c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800575c:	b480      	push	{r7}
 800575e:	b085      	sub	sp, #20
 8005760:	af00      	add	r7, sp, #0
 8005762:	60f8      	str	r0, [r7, #12]
 8005764:	60b9      	str	r1, [r7, #8]
 8005766:	4613      	mov	r3, r2
 8005768:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	68ba      	ldr	r2, [r7, #8]
 800576e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	88fa      	ldrh	r2, [r7, #6]
 8005774:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	88fa      	ldrh	r2, [r7, #6]
 800577a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2200      	movs	r2, #0
 8005780:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2222      	movs	r2, #34	; 0x22
 8005786:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2200      	movs	r2, #0
 800578e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	68da      	ldr	r2, [r3, #12]
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057a0:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	695a      	ldr	r2, [r3, #20]
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f042 0201 	orr.w	r2, r2, #1
 80057b0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	68da      	ldr	r2, [r3, #12]
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f042 0220 	orr.w	r2, r2, #32
 80057c0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80057c2:	2300      	movs	r3, #0
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	3714      	adds	r7, #20
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bc80      	pop	{r7}
 80057cc:	4770      	bx	lr

080057ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80057ce:	b480      	push	{r7}
 80057d0:	b083      	sub	sp, #12
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	68da      	ldr	r2, [r3, #12]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80057e4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	695a      	ldr	r2, [r3, #20]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f022 0201 	bic.w	r2, r2, #1
 80057f4:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d107      	bne.n	800580e <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	68da      	ldr	r2, [r3, #12]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f022 0210 	bic.w	r2, r2, #16
 800580c:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2220      	movs	r2, #32
 8005812:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2200      	movs	r2, #0
 800581a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800581c:	bf00      	nop
 800581e:	370c      	adds	r7, #12
 8005820:	46bd      	mov	sp, r7
 8005822:	bc80      	pop	{r7}
 8005824:	4770      	bx	lr

08005826 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005826:	b580      	push	{r7, lr}
 8005828:	b084      	sub	sp, #16
 800582a:	af00      	add	r7, sp, #0
 800582c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005832:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2200      	movs	r2, #0
 8005838:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2200      	movs	r2, #0
 800583e:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005844:	68f8      	ldr	r0, [r7, #12]
 8005846:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005848:	bf00      	nop
 800584a:	3710      	adds	r7, #16
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}

08005850 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005850:	b480      	push	{r7}
 8005852:	b085      	sub	sp, #20
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800585e:	b2db      	uxtb	r3, r3
 8005860:	2b21      	cmp	r3, #33	; 0x21
 8005862:	d13e      	bne.n	80058e2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800586c:	d114      	bne.n	8005898 <UART_Transmit_IT+0x48>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	691b      	ldr	r3, [r3, #16]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d110      	bne.n	8005898 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6a1b      	ldr	r3, [r3, #32]
 800587a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	881b      	ldrh	r3, [r3, #0]
 8005880:	461a      	mov	r2, r3
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800588a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6a1b      	ldr	r3, [r3, #32]
 8005890:	1c9a      	adds	r2, r3, #2
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	621a      	str	r2, [r3, #32]
 8005896:	e008      	b.n	80058aa <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6a1b      	ldr	r3, [r3, #32]
 800589c:	1c59      	adds	r1, r3, #1
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	6211      	str	r1, [r2, #32]
 80058a2:	781a      	ldrb	r2, [r3, #0]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	3b01      	subs	r3, #1
 80058b2:	b29b      	uxth	r3, r3
 80058b4:	687a      	ldr	r2, [r7, #4]
 80058b6:	4619      	mov	r1, r3
 80058b8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d10f      	bne.n	80058de <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	68da      	ldr	r2, [r3, #12]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80058cc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	68da      	ldr	r2, [r3, #12]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058dc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80058de:	2300      	movs	r3, #0
 80058e0:	e000      	b.n	80058e4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80058e2:	2302      	movs	r3, #2
  }
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3714      	adds	r7, #20
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bc80      	pop	{r7}
 80058ec:	4770      	bx	lr

080058ee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80058ee:	b580      	push	{r7, lr}
 80058f0:	b082      	sub	sp, #8
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	68da      	ldr	r2, [r3, #12]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005904:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2220      	movs	r2, #32
 800590a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005916:	2300      	movs	r3, #0
}
 8005918:	4618      	mov	r0, r3
 800591a:	3708      	adds	r7, #8
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}

08005920 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b086      	sub	sp, #24
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800592e:	b2db      	uxtb	r3, r3
 8005930:	2b22      	cmp	r3, #34	; 0x22
 8005932:	f040 809b 	bne.w	8005a6c <UART_Receive_IT+0x14c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800593e:	d117      	bne.n	8005970 <UART_Receive_IT+0x50>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	691b      	ldr	r3, [r3, #16]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d113      	bne.n	8005970 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005948:	2300      	movs	r3, #0
 800594a:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005950:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	b29b      	uxth	r3, r3
 800595a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800595e:	b29a      	uxth	r2, r3
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005968:	1c9a      	adds	r2, r3, #2
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	629a      	str	r2, [r3, #40]	; 0x28
 800596e:	e026      	b.n	80059be <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005974:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8005976:	2300      	movs	r3, #0
 8005978:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	689b      	ldr	r3, [r3, #8]
 800597e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005982:	d007      	beq.n	8005994 <UART_Receive_IT+0x74>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d10a      	bne.n	80059a2 <UART_Receive_IT+0x82>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	691b      	ldr	r3, [r3, #16]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d106      	bne.n	80059a2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	b2da      	uxtb	r2, r3
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	701a      	strb	r2, [r3, #0]
 80059a0:	e008      	b.n	80059b4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059ae:	b2da      	uxtb	r2, r3
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059b8:	1c5a      	adds	r2, r3, #1
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80059c2:	b29b      	uxth	r3, r3
 80059c4:	3b01      	subs	r3, #1
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	687a      	ldr	r2, [r7, #4]
 80059ca:	4619      	mov	r1, r3
 80059cc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d14a      	bne.n	8005a68 <UART_Receive_IT+0x148>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	68da      	ldr	r2, [r3, #12]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f022 0220 	bic.w	r2, r2, #32
 80059e0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	68da      	ldr	r2, [r3, #12]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80059f0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	695a      	ldr	r2, [r3, #20]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f022 0201 	bic.w	r2, r2, #1
 8005a00:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2220      	movs	r2, #32
 8005a06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d124      	bne.n	8005a5c <UART_Receive_IT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2200      	movs	r2, #0
 8005a16:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	68da      	ldr	r2, [r3, #12]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f022 0210 	bic.w	r2, r2, #16
 8005a26:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f003 0310 	and.w	r3, r3, #16
 8005a32:	2b10      	cmp	r3, #16
 8005a34:	d10a      	bne.n	8005a4c <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005a36:	2300      	movs	r3, #0
 8005a38:	60fb      	str	r3, [r7, #12]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	60fb      	str	r3, [r7, #12]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	60fb      	str	r3, [r7, #12]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a50:	687a      	ldr	r2, [r7, #4]
 8005a52:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8005a54:	4611      	mov	r1, r2
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	4798      	blx	r3
 8005a5a:	e003      	b.n	8005a64 <UART_Receive_IT+0x144>
      else
      {
       /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	4798      	blx	r3
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005a64:	2300      	movs	r3, #0
 8005a66:	e002      	b.n	8005a6e <UART_Receive_IT+0x14e>
    }
    return HAL_OK;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	e000      	b.n	8005a6e <UART_Receive_IT+0x14e>
  }
  else
  {
    return HAL_BUSY;
 8005a6c:	2302      	movs	r3, #2
  }
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3718      	adds	r7, #24
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}
	...

08005a78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b084      	sub	sp, #16
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	691b      	ldr	r3, [r3, #16]
 8005a86:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	68da      	ldr	r2, [r3, #12]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	430a      	orrs	r2, r1
 8005a94:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	689a      	ldr	r2, [r3, #8]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	691b      	ldr	r3, [r3, #16]
 8005a9e:	431a      	orrs	r2, r3
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	695b      	ldr	r3, [r3, #20]
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	68db      	ldr	r3, [r3, #12]
 8005aae:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005ab2:	f023 030c 	bic.w	r3, r3, #12
 8005ab6:	687a      	ldr	r2, [r7, #4]
 8005ab8:	6812      	ldr	r2, [r2, #0]
 8005aba:	68b9      	ldr	r1, [r7, #8]
 8005abc:	430b      	orrs	r3, r1
 8005abe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	695b      	ldr	r3, [r3, #20]
 8005ac6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	699a      	ldr	r2, [r3, #24]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	430a      	orrs	r2, r1
 8005ad4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a2c      	ldr	r2, [pc, #176]	; (8005b8c <UART_SetConfig+0x114>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d103      	bne.n	8005ae8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005ae0:	f7fd f9e6 	bl	8002eb0 <HAL_RCC_GetPCLK2Freq>
 8005ae4:	60f8      	str	r0, [r7, #12]
 8005ae6:	e002      	b.n	8005aee <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005ae8:	f7fd f9ce 	bl	8002e88 <HAL_RCC_GetPCLK1Freq>
 8005aec:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005aee:	68fa      	ldr	r2, [r7, #12]
 8005af0:	4613      	mov	r3, r2
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	4413      	add	r3, r2
 8005af6:	009a      	lsls	r2, r3, #2
 8005af8:	441a      	add	r2, r3
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	009b      	lsls	r3, r3, #2
 8005b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b04:	4a22      	ldr	r2, [pc, #136]	; (8005b90 <UART_SetConfig+0x118>)
 8005b06:	fba2 2303 	umull	r2, r3, r2, r3
 8005b0a:	095b      	lsrs	r3, r3, #5
 8005b0c:	0119      	lsls	r1, r3, #4
 8005b0e:	68fa      	ldr	r2, [r7, #12]
 8005b10:	4613      	mov	r3, r2
 8005b12:	009b      	lsls	r3, r3, #2
 8005b14:	4413      	add	r3, r2
 8005b16:	009a      	lsls	r2, r3, #2
 8005b18:	441a      	add	r2, r3
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b24:	4b1a      	ldr	r3, [pc, #104]	; (8005b90 <UART_SetConfig+0x118>)
 8005b26:	fba3 0302 	umull	r0, r3, r3, r2
 8005b2a:	095b      	lsrs	r3, r3, #5
 8005b2c:	2064      	movs	r0, #100	; 0x64
 8005b2e:	fb00 f303 	mul.w	r3, r0, r3
 8005b32:	1ad3      	subs	r3, r2, r3
 8005b34:	011b      	lsls	r3, r3, #4
 8005b36:	3332      	adds	r3, #50	; 0x32
 8005b38:	4a15      	ldr	r2, [pc, #84]	; (8005b90 <UART_SetConfig+0x118>)
 8005b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b3e:	095b      	lsrs	r3, r3, #5
 8005b40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b44:	4419      	add	r1, r3
 8005b46:	68fa      	ldr	r2, [r7, #12]
 8005b48:	4613      	mov	r3, r2
 8005b4a:	009b      	lsls	r3, r3, #2
 8005b4c:	4413      	add	r3, r2
 8005b4e:	009a      	lsls	r2, r3, #2
 8005b50:	441a      	add	r2, r3
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	009b      	lsls	r3, r3, #2
 8005b58:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b5c:	4b0c      	ldr	r3, [pc, #48]	; (8005b90 <UART_SetConfig+0x118>)
 8005b5e:	fba3 0302 	umull	r0, r3, r3, r2
 8005b62:	095b      	lsrs	r3, r3, #5
 8005b64:	2064      	movs	r0, #100	; 0x64
 8005b66:	fb00 f303 	mul.w	r3, r0, r3
 8005b6a:	1ad3      	subs	r3, r2, r3
 8005b6c:	011b      	lsls	r3, r3, #4
 8005b6e:	3332      	adds	r3, #50	; 0x32
 8005b70:	4a07      	ldr	r2, [pc, #28]	; (8005b90 <UART_SetConfig+0x118>)
 8005b72:	fba2 2303 	umull	r2, r3, r2, r3
 8005b76:	095b      	lsrs	r3, r3, #5
 8005b78:	f003 020f 	and.w	r2, r3, #15
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	440a      	add	r2, r1
 8005b82:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005b84:	bf00      	nop
 8005b86:	3710      	adds	r7, #16
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}
 8005b8c:	40013800 	.word	0x40013800
 8005b90:	51eb851f 	.word	0x51eb851f

08005b94 <BATTERY_CHECK_init>:
static ADC_HandleTypeDef *BATTERY_CHECK_adcHandle;
static RTC_HandleTypeDef *BATTERY_CHECK_rtcHandle;
static RTC_TimeTypeDef    BATTERY_CHECK_lastReadTime;

void BATTERY_CHECK_init(ADC_HandleTypeDef *p_adcHandle, RTC_HandleTypeDef *p_rtcHandle)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b084      	sub	sp, #16
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	6039      	str	r1, [r7, #0]
  RTC_TimeTypeDef l_time;
  RTC_DateTypeDef l_date;

  LOG_info("Initializing battery check");
 8005b9e:	4913      	ldr	r1, [pc, #76]	; (8005bec <BATTERY_CHECK_init+0x58>)
 8005ba0:	2001      	movs	r0, #1
 8005ba2:	f000 ffe5 	bl	8006b70 <LOG_log>

  BATTERY_CHECK_adcHandle = p_adcHandle;
 8005ba6:	4a12      	ldr	r2, [pc, #72]	; (8005bf0 <BATTERY_CHECK_init+0x5c>)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6013      	str	r3, [r2, #0]
  BATTERY_CHECK_rtcHandle = p_rtcHandle;
 8005bac:	4a11      	ldr	r2, [pc, #68]	; (8005bf4 <BATTERY_CHECK_init+0x60>)
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	6013      	str	r3, [r2, #0]

  HAL_RTC_GetTime(BATTERY_CHECK_rtcHandle, &l_time, RTC_FORMAT_BCD);
 8005bb2:	4b10      	ldr	r3, [pc, #64]	; (8005bf4 <BATTERY_CHECK_init+0x60>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f107 010c 	add.w	r1, r7, #12
 8005bba:	2201      	movs	r2, #1
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f7fd fc73 	bl	80034a8 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(BATTERY_CHECK_rtcHandle, &l_date, RTC_FORMAT_BCD);
 8005bc2:	4b0c      	ldr	r3, [pc, #48]	; (8005bf4 <BATTERY_CHECK_init+0x60>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f107 0108 	add.w	r1, r7, #8
 8005bca:	2201      	movs	r2, #1
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f7fd fdf9 	bl	80037c4 <HAL_RTC_GetDate>

  BATTERY_CHECK_lastReadTime = l_time;
 8005bd2:	4b09      	ldr	r3, [pc, #36]	; (8005bf8 <BATTERY_CHECK_init+0x64>)
 8005bd4:	f107 020c 	add.w	r2, r7, #12
 8005bd8:	6812      	ldr	r2, [r2, #0]
 8005bda:	4611      	mov	r1, r2
 8005bdc:	8019      	strh	r1, [r3, #0]
 8005bde:	3302      	adds	r3, #2
 8005be0:	0c12      	lsrs	r2, r2, #16
 8005be2:	701a      	strb	r2, [r3, #0]

  return;
 8005be4:	bf00      	nop
}
 8005be6:	3710      	adds	r7, #16
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}
 8005bec:	08008124 	.word	0x08008124
 8005bf0:	200000b8 	.word	0x200000b8
 8005bf4:	200000bc 	.word	0x200000bc
 8005bf8:	200000c0 	.word	0x200000c0

08005bfc <BATTERY_CHECK_update>:

void BATTERY_CHECK_update(void)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b084      	sub	sp, #16
 8005c00:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef l_time;
  RTC_DateTypeDef l_date;
  uint32_t        l_adcRawData;

  HAL_RTC_GetTime(BATTERY_CHECK_rtcHandle, &l_time, RTC_FORMAT_BCD);
 8005c02:	4b2c      	ldr	r3, [pc, #176]	; (8005cb4 <BATTERY_CHECK_update+0xb8>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f107 0108 	add.w	r1, r7, #8
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f7fd fc4b 	bl	80034a8 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(BATTERY_CHECK_rtcHandle, &l_date, RTC_FORMAT_BCD);
 8005c12:	4b28      	ldr	r3, [pc, #160]	; (8005cb4 <BATTERY_CHECK_update+0xb8>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	1d39      	adds	r1, r7, #4
 8005c18:	2201      	movs	r2, #1
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f7fd fdd2 	bl	80037c4 <HAL_RTC_GetDate>

  if ((l_time.Hours * 3600 + l_time.Minutes * 60 + l_time.Seconds) -
 8005c20:	7a3b      	ldrb	r3, [r7, #8]
 8005c22:	461a      	mov	r2, r3
 8005c24:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8005c28:	fb03 f202 	mul.w	r2, r3, r2
 8005c2c:	7a7b      	ldrb	r3, [r7, #9]
 8005c2e:	4619      	mov	r1, r3
 8005c30:	460b      	mov	r3, r1
 8005c32:	011b      	lsls	r3, r3, #4
 8005c34:	1a5b      	subs	r3, r3, r1
 8005c36:	009b      	lsls	r3, r3, #2
 8005c38:	4413      	add	r3, r2
 8005c3a:	7aba      	ldrb	r2, [r7, #10]
 8005c3c:	441a      	add	r2, r3
      (BATTERY_CHECK_lastReadTime.Hours * 3600 + BATTERY_CHECK_lastReadTime.Minutes * 60 + BATTERY_CHECK_lastReadTime.Seconds) >= BATTERY_CHECK_POLLING_PERIOD_IN_S)
 8005c3e:	4b1e      	ldr	r3, [pc, #120]	; (8005cb8 <BATTERY_CHECK_update+0xbc>)
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	4619      	mov	r1, r3
 8005c44:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8005c48:	fb03 f101 	mul.w	r1, r3, r1
 8005c4c:	4b1a      	ldr	r3, [pc, #104]	; (8005cb8 <BATTERY_CHECK_update+0xbc>)
 8005c4e:	785b      	ldrb	r3, [r3, #1]
 8005c50:	4618      	mov	r0, r3
 8005c52:	4603      	mov	r3, r0
 8005c54:	011b      	lsls	r3, r3, #4
 8005c56:	1a1b      	subs	r3, r3, r0
 8005c58:	009b      	lsls	r3, r3, #2
 8005c5a:	440b      	add	r3, r1
 8005c5c:	4916      	ldr	r1, [pc, #88]	; (8005cb8 <BATTERY_CHECK_update+0xbc>)
 8005c5e:	7889      	ldrb	r1, [r1, #2]
 8005c60:	440b      	add	r3, r1
  if ((l_time.Hours * 3600 + l_time.Minutes * 60 + l_time.Seconds) -
 8005c62:	1ad3      	subs	r3, r2, r3
 8005c64:	2b09      	cmp	r3, #9
 8005c66:	dd20      	ble.n	8005caa <BATTERY_CHECK_update+0xae>
  {
    HAL_ADC_Start                (BATTERY_CHECK_adcHandle);
 8005c68:	4b14      	ldr	r3, [pc, #80]	; (8005cbc <BATTERY_CHECK_update+0xc0>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f7fb fdc1 	bl	80017f4 <HAL_ADC_Start>
    HAL_ADC_PollForConversion    (BATTERY_CHECK_adcHandle, HAL_MAX_DELAY);
 8005c72:	4b12      	ldr	r3, [pc, #72]	; (8005cbc <BATTERY_CHECK_update+0xc0>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f04f 31ff 	mov.w	r1, #4294967295
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f7fb fe68 	bl	8001950 <HAL_ADC_PollForConversion>
    l_adcRawData = HAL_ADC_GetValue(BATTERY_CHECK_adcHandle);
 8005c80:	4b0e      	ldr	r3, [pc, #56]	; (8005cbc <BATTERY_CHECK_update+0xc0>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4618      	mov	r0, r3
 8005c86:	f7fb ff69 	bl	8001b5c <HAL_ADC_GetValue>
 8005c8a:	60f8      	str	r0, [r7, #12]

    LOG_debug("Battery level: %u", l_adcRawData);
 8005c8c:	68fa      	ldr	r2, [r7, #12]
 8005c8e:	490c      	ldr	r1, [pc, #48]	; (8005cc0 <BATTERY_CHECK_update+0xc4>)
 8005c90:	2000      	movs	r0, #0
 8005c92:	f000 ff6d 	bl	8006b70 <LOG_log>

    BATTERY_CHECK_lastReadTime = l_time;
 8005c96:	4b08      	ldr	r3, [pc, #32]	; (8005cb8 <BATTERY_CHECK_update+0xbc>)
 8005c98:	f107 0208 	add.w	r2, r7, #8
 8005c9c:	6812      	ldr	r2, [r2, #0]
 8005c9e:	4611      	mov	r1, r2
 8005ca0:	8019      	strh	r1, [r3, #0]
 8005ca2:	3302      	adds	r3, #2
 8005ca4:	0c12      	lsrs	r2, r2, #16
 8005ca6:	701a      	strb	r2, [r3, #0]
  else
  {
    ; /* Nothing to do */
  }

  return;
 8005ca8:	bf00      	nop
 8005caa:	bf00      	nop
}
 8005cac:	3710      	adds	r7, #16
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}
 8005cb2:	bf00      	nop
 8005cb4:	200000bc 	.word	0x200000bc
 8005cb8:	200000c0 	.word	0x200000c0
 8005cbc:	200000b8 	.word	0x200000b8
 8005cc0:	08008140 	.word	0x08008140

08005cc4 <BLUETOOTH_CONTROL_sendCommand>:
static void                       BLUETOOTH_CONTROL_readData     (uint8_t *l_buffer                           );
static T_BLUETOOTH_CONTROL_BUTTON BLUETOOTH_CONTROL_getButton    (uint8_t *l_buffer                           );
static int32_t                    BLUETOOTH_CONTROL_normalizeData(uint32_t p_rawData, bool p_isInversionNeeded);

static void BLUETOOTH_CONTROL_sendCommand(uint8_t p_command)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b084      	sub	sp, #16
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	4603      	mov	r3, r0
 8005ccc:	71fb      	strb	r3, [r7, #7]
  volatile uint16_t l_bitValue;

  for (l_bitValue = 0x01; l_bitValue < 0x0100; l_bitValue <<= 1)
 8005cce:	2301      	movs	r3, #1
 8005cd0:	81fb      	strh	r3, [r7, #14]
 8005cd2:	e030      	b.n	8005d36 <BLUETOOTH_CONTROL_sendCommand+0x72>
  {
    if ((l_bitValue & p_command) != 0)
 8005cd4:	89fb      	ldrh	r3, [r7, #14]
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	461a      	mov	r2, r3
 8005cda:	79fb      	ldrb	r3, [r7, #7]
 8005cdc:	4013      	ands	r3, r2
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d006      	beq.n	8005cf0 <BLUETOOTH_CONTROL_sendCommand+0x2c>
    {
      SET_BIT(GPIOC->ODR, BLUETOOTH_SPI_CMD_Pin);
 8005ce2:	4b1a      	ldr	r3, [pc, #104]	; (8005d4c <BLUETOOTH_CONTROL_sendCommand+0x88>)
 8005ce4:	68db      	ldr	r3, [r3, #12]
 8005ce6:	4a19      	ldr	r2, [pc, #100]	; (8005d4c <BLUETOOTH_CONTROL_sendCommand+0x88>)
 8005ce8:	f043 0302 	orr.w	r3, r3, #2
 8005cec:	60d3      	str	r3, [r2, #12]
 8005cee:	e005      	b.n	8005cfc <BLUETOOTH_CONTROL_sendCommand+0x38>
    }
    else
    {
      CLEAR_BIT(GPIOC->ODR, BLUETOOTH_SPI_CMD_Pin);
 8005cf0:	4b16      	ldr	r3, [pc, #88]	; (8005d4c <BLUETOOTH_CONTROL_sendCommand+0x88>)
 8005cf2:	68db      	ldr	r3, [r3, #12]
 8005cf4:	4a15      	ldr	r2, [pc, #84]	; (8005d4c <BLUETOOTH_CONTROL_sendCommand+0x88>)
 8005cf6:	f023 0302 	bic.w	r3, r3, #2
 8005cfa:	60d3      	str	r3, [r2, #12]
    }

    SET_BIT(GPIOA->ODR  , BLUETOOTH_SPI_CLK_Pin);
 8005cfc:	4b14      	ldr	r3, [pc, #80]	; (8005d50 <BLUETOOTH_CONTROL_sendCommand+0x8c>)
 8005cfe:	68db      	ldr	r3, [r3, #12]
 8005d00:	4a13      	ldr	r2, [pc, #76]	; (8005d50 <BLUETOOTH_CONTROL_sendCommand+0x8c>)
 8005d02:	f043 0310 	orr.w	r3, r3, #16
 8005d06:	60d3      	str	r3, [r2, #12]
    UTILS_delayUs(5);
 8005d08:	2005      	movs	r0, #5
 8005d0a:	f001 f865 	bl	8006dd8 <UTILS_delayUs>
    CLEAR_BIT(GPIOA->ODR, BLUETOOTH_SPI_CLK_Pin);
 8005d0e:	4b10      	ldr	r3, [pc, #64]	; (8005d50 <BLUETOOTH_CONTROL_sendCommand+0x8c>)
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	4a0f      	ldr	r2, [pc, #60]	; (8005d50 <BLUETOOTH_CONTROL_sendCommand+0x8c>)
 8005d14:	f023 0310 	bic.w	r3, r3, #16
 8005d18:	60d3      	str	r3, [r2, #12]
    UTILS_delayUs(5);
 8005d1a:	2005      	movs	r0, #5
 8005d1c:	f001 f85c 	bl	8006dd8 <UTILS_delayUs>
    SET_BIT(GPIOA->ODR  , BLUETOOTH_SPI_CLK_Pin);
 8005d20:	4b0b      	ldr	r3, [pc, #44]	; (8005d50 <BLUETOOTH_CONTROL_sendCommand+0x8c>)
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	4a0a      	ldr	r2, [pc, #40]	; (8005d50 <BLUETOOTH_CONTROL_sendCommand+0x8c>)
 8005d26:	f043 0310 	orr.w	r3, r3, #16
 8005d2a:	60d3      	str	r3, [r2, #12]
  for (l_bitValue = 0x01; l_bitValue < 0x0100; l_bitValue <<= 1)
 8005d2c:	89fb      	ldrh	r3, [r7, #14]
 8005d2e:	b29b      	uxth	r3, r3
 8005d30:	005b      	lsls	r3, r3, #1
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	81fb      	strh	r3, [r7, #14]
 8005d36:	89fb      	ldrh	r3, [r7, #14]
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	2bff      	cmp	r3, #255	; 0xff
 8005d3c:	d9ca      	bls.n	8005cd4 <BLUETOOTH_CONTROL_sendCommand+0x10>
  }
  UTILS_delayUs(16);
 8005d3e:	2010      	movs	r0, #16
 8005d40:	f001 f84a 	bl	8006dd8 <UTILS_delayUs>

  return;
 8005d44:	bf00      	nop
}
 8005d46:	3710      	adds	r7, #16
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}
 8005d4c:	40011000 	.word	0x40011000
 8005d50:	40010800 	.word	0x40010800

08005d54 <BLUETOOTH_CONTROL_readData>:

static void BLUETOOTH_CONTROL_readData(uint8_t *l_buffer)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b084      	sub	sp, #16
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  volatile uint8_t  l_index;
  volatile uint16_t l_bitValue;

  /* Reset buffer */
  for (l_index = 0; l_index < BLUETOOTH_CONTROL_DATA_BUFFER_LENGTH; l_index++)
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	73fb      	strb	r3, [r7, #15]
 8005d60:	e00b      	b.n	8005d7a <BLUETOOTH_CONTROL_readData+0x26>
  {
    l_buffer[l_index] = 0x00;
 8005d62:	7bfb      	ldrb	r3, [r7, #15]
 8005d64:	b2db      	uxtb	r3, r3
 8005d66:	461a      	mov	r2, r3
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	4413      	add	r3, r2
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	701a      	strb	r2, [r3, #0]
  for (l_index = 0; l_index < BLUETOOTH_CONTROL_DATA_BUFFER_LENGTH; l_index++)
 8005d70:	7bfb      	ldrb	r3, [r7, #15]
 8005d72:	b2db      	uxtb	r3, r3
 8005d74:	3301      	adds	r3, #1
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	73fb      	strb	r3, [r7, #15]
 8005d7a:	7bfb      	ldrb	r3, [r7, #15]
 8005d7c:	b2db      	uxtb	r3, r3
 8005d7e:	2b06      	cmp	r3, #6
 8005d80:	d9ef      	bls.n	8005d62 <BLUETOOTH_CONTROL_readData+0xe>
  }

  CLEAR_BIT(GPIOC->ODR, BLUETOOTH_SPI_CS_Pin);
 8005d82:	4b2e      	ldr	r3, [pc, #184]	; (8005e3c <BLUETOOTH_CONTROL_readData+0xe8>)
 8005d84:	68db      	ldr	r3, [r3, #12]
 8005d86:	4a2d      	ldr	r2, [pc, #180]	; (8005e3c <BLUETOOTH_CONTROL_readData+0xe8>)
 8005d88:	f023 0308 	bic.w	r3, r3, #8
 8005d8c:	60d3      	str	r3, [r2, #12]

  BLUETOOTH_CONTROL_sendCommand(0x01);
 8005d8e:	2001      	movs	r0, #1
 8005d90:	f7ff ff98 	bl	8005cc4 <BLUETOOTH_CONTROL_sendCommand>
  BLUETOOTH_CONTROL_sendCommand(0x42);
 8005d94:	2042      	movs	r0, #66	; 0x42
 8005d96:	f7ff ff95 	bl	8005cc4 <BLUETOOTH_CONTROL_sendCommand>

  for (l_index = 0; l_index < BLUETOOTH_CONTROL_DATA_BUFFER_LENGTH; l_index++)
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	73fb      	strb	r3, [r7, #15]
 8005d9e:	e03f      	b.n	8005e20 <BLUETOOTH_CONTROL_readData+0xcc>
  {
    for (l_bitValue = 0x01; l_bitValue < 0x100; l_bitValue <<= 1)
 8005da0:	2301      	movs	r3, #1
 8005da2:	81bb      	strh	r3, [r7, #12]
 8005da4:	e030      	b.n	8005e08 <BLUETOOTH_CONTROL_readData+0xb4>
    {
      SET_BIT(GPIOA->ODR  , BLUETOOTH_SPI_CLK_Pin);
 8005da6:	4b26      	ldr	r3, [pc, #152]	; (8005e40 <BLUETOOTH_CONTROL_readData+0xec>)
 8005da8:	68db      	ldr	r3, [r3, #12]
 8005daa:	4a25      	ldr	r2, [pc, #148]	; (8005e40 <BLUETOOTH_CONTROL_readData+0xec>)
 8005dac:	f043 0310 	orr.w	r3, r3, #16
 8005db0:	60d3      	str	r3, [r2, #12]
      UTILS_delayUs(5);
 8005db2:	2005      	movs	r0, #5
 8005db4:	f001 f810 	bl	8006dd8 <UTILS_delayUs>
      CLEAR_BIT(GPIOA->ODR, BLUETOOTH_SPI_CLK_Pin);
 8005db8:	4b21      	ldr	r3, [pc, #132]	; (8005e40 <BLUETOOTH_CONTROL_readData+0xec>)
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	4a20      	ldr	r2, [pc, #128]	; (8005e40 <BLUETOOTH_CONTROL_readData+0xec>)
 8005dbe:	f023 0310 	bic.w	r3, r3, #16
 8005dc2:	60d3      	str	r3, [r2, #12]
      UTILS_delayUs(5);
 8005dc4:	2005      	movs	r0, #5
 8005dc6:	f001 f807 	bl	8006dd8 <UTILS_delayUs>
      SET_BIT(GPIOA->ODR  , BLUETOOTH_SPI_CLK_Pin);
 8005dca:	4b1d      	ldr	r3, [pc, #116]	; (8005e40 <BLUETOOTH_CONTROL_readData+0xec>)
 8005dcc:	68db      	ldr	r3, [r3, #12]
 8005dce:	4a1c      	ldr	r2, [pc, #112]	; (8005e40 <BLUETOOTH_CONTROL_readData+0xec>)
 8005dd0:	f043 0310 	orr.w	r3, r3, #16
 8005dd4:	60d3      	str	r3, [r2, #12]

      if (READ_BIT(GPIOC->IDR, BLUETOOTH_SPI_DAT_Pin) != GPIO_PIN_RESET)
 8005dd6:	4b19      	ldr	r3, [pc, #100]	; (8005e3c <BLUETOOTH_CONTROL_readData+0xe8>)
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	f003 0304 	and.w	r3, r3, #4
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d00d      	beq.n	8005dfe <BLUETOOTH_CONTROL_readData+0xaa>
      {
        l_buffer[l_index] |= l_bitValue;
 8005de2:	89bb      	ldrh	r3, [r7, #12]
 8005de4:	b29a      	uxth	r2, r3
 8005de6:	7bfb      	ldrb	r3, [r7, #15]
 8005de8:	b2d8      	uxtb	r0, r3
 8005dea:	4601      	mov	r1, r0
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	440b      	add	r3, r1
 8005df0:	7819      	ldrb	r1, [r3, #0]
 8005df2:	b2d2      	uxtb	r2, r2
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	4403      	add	r3, r0
 8005df8:	430a      	orrs	r2, r1
 8005dfa:	b2d2      	uxtb	r2, r2
 8005dfc:	701a      	strb	r2, [r3, #0]
    for (l_bitValue = 0x01; l_bitValue < 0x100; l_bitValue <<= 1)
 8005dfe:	89bb      	ldrh	r3, [r7, #12]
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	005b      	lsls	r3, r3, #1
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	81bb      	strh	r3, [r7, #12]
 8005e08:	89bb      	ldrh	r3, [r7, #12]
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	2bff      	cmp	r3, #255	; 0xff
 8005e0e:	d9ca      	bls.n	8005da6 <BLUETOOTH_CONTROL_readData+0x52>
      else
      {
        ; /* Nothing to do */
      }
    }
      UTILS_delayUs(16);
 8005e10:	2010      	movs	r0, #16
 8005e12:	f000 ffe1 	bl	8006dd8 <UTILS_delayUs>
  for (l_index = 0; l_index < BLUETOOTH_CONTROL_DATA_BUFFER_LENGTH; l_index++)
 8005e16:	7bfb      	ldrb	r3, [r7, #15]
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	3301      	adds	r3, #1
 8005e1c:	b2db      	uxtb	r3, r3
 8005e1e:	73fb      	strb	r3, [r7, #15]
 8005e20:	7bfb      	ldrb	r3, [r7, #15]
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	2b06      	cmp	r3, #6
 8005e26:	d9bb      	bls.n	8005da0 <BLUETOOTH_CONTROL_readData+0x4c>
  }

  SET_BIT(GPIOC->ODR, BLUETOOTH_SPI_CS_Pin);
 8005e28:	4b04      	ldr	r3, [pc, #16]	; (8005e3c <BLUETOOTH_CONTROL_readData+0xe8>)
 8005e2a:	68db      	ldr	r3, [r3, #12]
 8005e2c:	4a03      	ldr	r2, [pc, #12]	; (8005e3c <BLUETOOTH_CONTROL_readData+0xe8>)
 8005e2e:	f043 0308 	orr.w	r3, r3, #8
 8005e32:	60d3      	str	r3, [r2, #12]

  return;
 8005e34:	bf00      	nop
}
 8005e36:	3710      	adds	r7, #16
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}
 8005e3c:	40011000 	.word	0x40011000
 8005e40:	40010800 	.word	0x40010800

08005e44 <BLUETOOTH_CONTROL_getButton>:

static T_BLUETOOTH_CONTROL_BUTTON BLUETOOTH_CONTROL_getButton(uint8_t *l_buffer)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b085      	sub	sp, #20
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  uint16_t l_buttonRawValue;
  uint8_t  l_index;

  l_buttonRawValue = (l_buffer[BLUETOOTH_CONTROL_BUTTON_HIGH_OFFSET] << 8) | l_buffer[BLUETOOTH_CONTROL_BUTTON_LOW_OFFSET];
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	3302      	adds	r3, #2
 8005e50:	781b      	ldrb	r3, [r3, #0]
 8005e52:	021b      	lsls	r3, r3, #8
 8005e54:	b21a      	sxth	r2, r3
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	3301      	adds	r3, #1
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	b21b      	sxth	r3, r3
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	b21b      	sxth	r3, r3
 8005e62:	81bb      	strh	r3, [r7, #12]

  /* Ignore BLUETOOTH_CONTROL_BUTTON_NONE value as it is not directly coded in raw data */
  for (l_index = BLUETOOTH_CONTROL_BUTTON_SELECT; l_index < BLUETOOTH_CONTROL_BUTTON_COUNT_VALUE; l_index++)
 8005e64:	2301      	movs	r3, #1
 8005e66:	73fb      	strb	r3, [r7, #15]
 8005e68:	e00d      	b.n	8005e86 <BLUETOOTH_CONTROL_getButton+0x42>
  {
    /* Stop decoding button data on 1st match (do not deal with multiple presses case) */
    if ((l_buttonRawValue & (1 << (l_index - 1))) == 0)
 8005e6a:	89ba      	ldrh	r2, [r7, #12]
 8005e6c:	7bfb      	ldrb	r3, [r7, #15]
 8005e6e:	3b01      	subs	r3, #1
 8005e70:	fa42 f303 	asr.w	r3, r2, r3
 8005e74:	f003 0301 	and.w	r3, r3, #1
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d101      	bne.n	8005e80 <BLUETOOTH_CONTROL_getButton+0x3c>
    {
      return l_index;
 8005e7c:	7bfb      	ldrb	r3, [r7, #15]
 8005e7e:	e006      	b.n	8005e8e <BLUETOOTH_CONTROL_getButton+0x4a>
  for (l_index = BLUETOOTH_CONTROL_BUTTON_SELECT; l_index < BLUETOOTH_CONTROL_BUTTON_COUNT_VALUE; l_index++)
 8005e80:	7bfb      	ldrb	r3, [r7, #15]
 8005e82:	3301      	adds	r3, #1
 8005e84:	73fb      	strb	r3, [r7, #15]
 8005e86:	7bfb      	ldrb	r3, [r7, #15]
 8005e88:	2b10      	cmp	r3, #16
 8005e8a:	d9ee      	bls.n	8005e6a <BLUETOOTH_CONTROL_getButton+0x26>
    {
      ; /* Nothing to do */
    }
  }

  return BLUETOOTH_CONTROL_BUTTON_NONE;
 8005e8c:	2300      	movs	r3, #0
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3714      	adds	r7, #20
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bc80      	pop	{r7}
 8005e96:	4770      	bx	lr

08005e98 <BLUETOOTH_CONTROL_normalizeData>:

static int32_t BLUETOOTH_CONTROL_normalizeData(uint32_t p_rawData, bool p_isInversionNeeded)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b084      	sub	sp, #16
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	460b      	mov	r3, r1
 8005ea2:	70fb      	strb	r3, [r7, #3]
  float l_normalizedData;

  l_normalizedData = p_rawData - 128.0f;
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f7fa fb27 	bl	80004f8 <__aeabi_ui2f>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	f7fa fa6f 	bl	8000394 <__aeabi_fsub>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	60fb      	str	r3, [r7, #12]

  if (l_normalizedData > 0.0f)
 8005eba:	f04f 0100 	mov.w	r1, #0
 8005ebe:	68f8      	ldr	r0, [r7, #12]
 8005ec0:	f7fa fbde 	bl	8000680 <__aeabi_fcmpgt>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d006      	beq.n	8005ed8 <BLUETOOTH_CONTROL_normalizeData+0x40>
  {
    l_normalizedData *= 100.0f / 127.0f;
 8005eca:	490e      	ldr	r1, [pc, #56]	; (8005f04 <BLUETOOTH_CONTROL_normalizeData+0x6c>)
 8005ecc:	68f8      	ldr	r0, [r7, #12]
 8005ece:	f7fa f9a9 	bl	8000224 <__aeabi_fmul>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	60fb      	str	r3, [r7, #12]
 8005ed6:	e005      	b.n	8005ee4 <BLUETOOTH_CONTROL_normalizeData+0x4c>
  }
  else
  {
    l_normalizedData *= 100.0f / 128.0f;
 8005ed8:	490b      	ldr	r1, [pc, #44]	; (8005f08 <BLUETOOTH_CONTROL_normalizeData+0x70>)
 8005eda:	68f8      	ldr	r0, [r7, #12]
 8005edc:	f7fa f9a2 	bl	8000224 <__aeabi_fmul>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	60fb      	str	r3, [r7, #12]
  }

  if (p_isInversionNeeded == true)
 8005ee4:	78fb      	ldrb	r3, [r7, #3]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d003      	beq.n	8005ef2 <BLUETOOTH_CONTROL_normalizeData+0x5a>
  {
    l_normalizedData *= -1.0f;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005ef0:	60fb      	str	r3, [r7, #12]
  else
  {
    ; /* Nothing to do */
  }

  return (int32_t)l_normalizedData;
 8005ef2:	68f8      	ldr	r0, [r7, #12]
 8005ef4:	f7fa fbce 	bl	8000694 <__aeabi_f2iz>
 8005ef8:	4603      	mov	r3, r0
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3710      	adds	r7, #16
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}
 8005f02:	bf00      	nop
 8005f04:	3f499326 	.word	0x3f499326
 8005f08:	3f480000 	.word	0x3f480000

08005f0c <BLUETOOTH_CONTROL_receiveData>:

void BLUETOOTH_CONTROL_receiveData(T_BLUETOOTH_CONTROL_Data *p_data)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b088      	sub	sp, #32
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  T_BLUETOOTH_CONTROL_BUTTON l_button;

  // LOG_info("Receiving Bluetooth data");

  /* Read raw data */
  BLUETOOTH_CONTROL_readData(l_buffer);
 8005f14:	f107 0308 	add.w	r3, r7, #8
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f7ff ff1b 	bl	8005d54 <BLUETOOTH_CONTROL_readData>

  /* Start and decode raw data */
  l_leftX  = l_buffer[BLUETOOTH_CONTROL_LEFT_X_OFFSET ];
 8005f1e:	7b7b      	ldrb	r3, [r7, #13]
 8005f20:	61fb      	str	r3, [r7, #28]
  l_leftY  = l_buffer[BLUETOOTH_CONTROL_LEFT_Y_OFFSET ];
 8005f22:	7bbb      	ldrb	r3, [r7, #14]
 8005f24:	61bb      	str	r3, [r7, #24]
  l_rightX = l_buffer[BLUETOOTH_CONTROL_RIGHT_X_OFFSET];
 8005f26:	7afb      	ldrb	r3, [r7, #11]
 8005f28:	617b      	str	r3, [r7, #20]
  l_rightY = l_buffer[BLUETOOTH_CONTROL_RIGHT_Y_OFFSET];
 8005f2a:	7b3b      	ldrb	r3, [r7, #12]
 8005f2c:	613b      	str	r3, [r7, #16]
  l_button = BLUETOOTH_CONTROL_getButton(l_buffer);
 8005f2e:	f107 0308 	add.w	r3, r7, #8
 8005f32:	4618      	mov	r0, r3
 8005f34:	f7ff ff86 	bl	8005e44 <BLUETOOTH_CONTROL_getButton>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	73fb      	strb	r3, [r7, #15]

  /* Deal with startup condition, while read data is not valid yet */
  if  ((l_leftX == 255 && l_leftY == 255 && l_rightX == 255 && l_rightY ==255)
 8005f3c:	69fb      	ldr	r3, [r7, #28]
 8005f3e:	2bff      	cmp	r3, #255	; 0xff
 8005f40:	d108      	bne.n	8005f54 <BLUETOOTH_CONTROL_receiveData+0x48>
 8005f42:	69bb      	ldr	r3, [r7, #24]
 8005f44:	2bff      	cmp	r3, #255	; 0xff
 8005f46:	d105      	bne.n	8005f54 <BLUETOOTH_CONTROL_receiveData+0x48>
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	2bff      	cmp	r3, #255	; 0xff
 8005f4c:	d102      	bne.n	8005f54 <BLUETOOTH_CONTROL_receiveData+0x48>
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	2bff      	cmp	r3, #255	; 0xff
 8005f52:	d00b      	beq.n	8005f6c <BLUETOOTH_CONTROL_receiveData+0x60>
    || (l_leftX ==   0 && l_leftY ==   0 && l_rightX ==   0 && l_rightY ==  0))
 8005f54:	69fb      	ldr	r3, [r7, #28]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d113      	bne.n	8005f82 <BLUETOOTH_CONTROL_receiveData+0x76>
 8005f5a:	69bb      	ldr	r3, [r7, #24]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d110      	bne.n	8005f82 <BLUETOOTH_CONTROL_receiveData+0x76>
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d10d      	bne.n	8005f82 <BLUETOOTH_CONTROL_receiveData+0x76>
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d10a      	bne.n	8005f82 <BLUETOOTH_CONTROL_receiveData+0x76>
  {
    l_leftX  = 128;
 8005f6c:	2380      	movs	r3, #128	; 0x80
 8005f6e:	61fb      	str	r3, [r7, #28]
    l_leftY  = 128;
 8005f70:	2380      	movs	r3, #128	; 0x80
 8005f72:	61bb      	str	r3, [r7, #24]
    l_rightX = 128;
 8005f74:	2380      	movs	r3, #128	; 0x80
 8005f76:	617b      	str	r3, [r7, #20]
    l_rightY = 128;
 8005f78:	2380      	movs	r3, #128	; 0x80
 8005f7a:	613b      	str	r3, [r7, #16]
    l_button = BLUETOOTH_CONTROL_BUTTON_NONE;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	73fb      	strb	r3, [r7, #15]
 8005f80:	e037      	b.n	8005ff2 <BLUETOOTH_CONTROL_receiveData+0xe6>
  }
  /* Use a confirmation mechanism, on 2 cycles, as glitches are observed */
  else if ((l_leftX  == BLUETOOTH_CONTROL_DATA_lastData.leftX) &&
 8005f82:	4b25      	ldr	r3, [pc, #148]	; (8006018 <BLUETOOTH_CONTROL_receiveData+0x10c>)
 8005f84:	681a      	ldr	r2, [r3, #0]
 8005f86:	69fb      	ldr	r3, [r7, #28]
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	d132      	bne.n	8005ff2 <BLUETOOTH_CONTROL_receiveData+0xe6>
           (l_leftY  == BLUETOOTH_CONTROL_DATA_lastData.leftY) &&
 8005f8c:	4b22      	ldr	r3, [pc, #136]	; (8006018 <BLUETOOTH_CONTROL_receiveData+0x10c>)
 8005f8e:	685a      	ldr	r2, [r3, #4]
 8005f90:	69bb      	ldr	r3, [r7, #24]
  else if ((l_leftX  == BLUETOOTH_CONTROL_DATA_lastData.leftX) &&
 8005f92:	429a      	cmp	r2, r3
 8005f94:	d12d      	bne.n	8005ff2 <BLUETOOTH_CONTROL_receiveData+0xe6>
           (l_rightX == BLUETOOTH_CONTROL_DATA_lastData.rightX) &&
 8005f96:	4b20      	ldr	r3, [pc, #128]	; (8006018 <BLUETOOTH_CONTROL_receiveData+0x10c>)
 8005f98:	689a      	ldr	r2, [r3, #8]
 8005f9a:	697b      	ldr	r3, [r7, #20]
           (l_leftY  == BLUETOOTH_CONTROL_DATA_lastData.leftY) &&
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	d128      	bne.n	8005ff2 <BLUETOOTH_CONTROL_receiveData+0xe6>
           (l_rightY == BLUETOOTH_CONTROL_DATA_lastData.rightY) &&
 8005fa0:	4b1d      	ldr	r3, [pc, #116]	; (8006018 <BLUETOOTH_CONTROL_receiveData+0x10c>)
 8005fa2:	68da      	ldr	r2, [r3, #12]
 8005fa4:	693b      	ldr	r3, [r7, #16]
           (l_rightX == BLUETOOTH_CONTROL_DATA_lastData.rightX) &&
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d123      	bne.n	8005ff2 <BLUETOOTH_CONTROL_receiveData+0xe6>
           (l_button == BLUETOOTH_CONTROL_DATA_lastData.button))
 8005faa:	4b1b      	ldr	r3, [pc, #108]	; (8006018 <BLUETOOTH_CONTROL_receiveData+0x10c>)
 8005fac:	7c1b      	ldrb	r3, [r3, #16]
           (l_rightY == BLUETOOTH_CONTROL_DATA_lastData.rightY) &&
 8005fae:	7bfa      	ldrb	r2, [r7, #15]
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	d11e      	bne.n	8005ff2 <BLUETOOTH_CONTROL_receiveData+0xe6>
  {
    /* Normalize directions data in range [-100..100] */
    p_data->leftX  = BLUETOOTH_CONTROL_normalizeData(l_leftX , false);
 8005fb4:	2100      	movs	r1, #0
 8005fb6:	69f8      	ldr	r0, [r7, #28]
 8005fb8:	f7ff ff6e 	bl	8005e98 <BLUETOOTH_CONTROL_normalizeData>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	601a      	str	r2, [r3, #0]
    p_data->leftY  = BLUETOOTH_CONTROL_normalizeData(l_leftY , true );
 8005fc2:	2101      	movs	r1, #1
 8005fc4:	69b8      	ldr	r0, [r7, #24]
 8005fc6:	f7ff ff67 	bl	8005e98 <BLUETOOTH_CONTROL_normalizeData>
 8005fca:	4602      	mov	r2, r0
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	605a      	str	r2, [r3, #4]
    p_data->rightX = BLUETOOTH_CONTROL_normalizeData(l_rightX, false);
 8005fd0:	2100      	movs	r1, #0
 8005fd2:	6978      	ldr	r0, [r7, #20]
 8005fd4:	f7ff ff60 	bl	8005e98 <BLUETOOTH_CONTROL_normalizeData>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	609a      	str	r2, [r3, #8]
    p_data->rightY = BLUETOOTH_CONTROL_normalizeData(l_rightY, true );
 8005fde:	2101      	movs	r1, #1
 8005fe0:	6938      	ldr	r0, [r7, #16]
 8005fe2:	f7ff ff59 	bl	8005e98 <BLUETOOTH_CONTROL_normalizeData>
 8005fe6:	4602      	mov	r2, r0
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	60da      	str	r2, [r3, #12]
    p_data->button = l_button;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	7bfa      	ldrb	r2, [r7, #15]
 8005ff0:	741a      	strb	r2, [r3, #16]
  {
    ; /* Nothing to do */
  }

  /* Saved received data for later use in confirmation mechanism */
  BLUETOOTH_CONTROL_DATA_lastData.leftX  = l_leftX;
 8005ff2:	69fb      	ldr	r3, [r7, #28]
 8005ff4:	4a08      	ldr	r2, [pc, #32]	; (8006018 <BLUETOOTH_CONTROL_receiveData+0x10c>)
 8005ff6:	6013      	str	r3, [r2, #0]
  BLUETOOTH_CONTROL_DATA_lastData.leftY  = l_leftY;
 8005ff8:	69bb      	ldr	r3, [r7, #24]
 8005ffa:	4a07      	ldr	r2, [pc, #28]	; (8006018 <BLUETOOTH_CONTROL_receiveData+0x10c>)
 8005ffc:	6053      	str	r3, [r2, #4]
  BLUETOOTH_CONTROL_DATA_lastData.rightX = l_rightX;
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	4a05      	ldr	r2, [pc, #20]	; (8006018 <BLUETOOTH_CONTROL_receiveData+0x10c>)
 8006002:	6093      	str	r3, [r2, #8]
  BLUETOOTH_CONTROL_DATA_lastData.rightY = l_rightY;
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	4a04      	ldr	r2, [pc, #16]	; (8006018 <BLUETOOTH_CONTROL_receiveData+0x10c>)
 8006008:	60d3      	str	r3, [r2, #12]
  BLUETOOTH_CONTROL_DATA_lastData.button = l_button;
 800600a:	4a03      	ldr	r2, [pc, #12]	; (8006018 <BLUETOOTH_CONTROL_receiveData+0x10c>)
 800600c:	7bfb      	ldrb	r3, [r7, #15]
 800600e:	7413      	strb	r3, [r2, #16]

  return;
 8006010:	bf00      	nop
}
 8006012:	3720      	adds	r7, #32
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}
 8006018:	2000000c 	.word	0x2000000c

0800601c <CONSOLE_init>:

static UART_HandleTypeDef *CONSOLE_uartHandle;
static uint8_t             CONSOLE_rxBuffer[12] = {0};

void CONSOLE_init(UART_HandleTypeDef *p_uartHandle)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b082      	sub	sp, #8
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  LOG_info("Initializing console");
 8006024:	4905      	ldr	r1, [pc, #20]	; (800603c <CONSOLE_init+0x20>)
 8006026:	2001      	movs	r0, #1
 8006028:	f000 fda2 	bl	8006b70 <LOG_log>

  CONSOLE_uartHandle = p_uartHandle;
 800602c:	4a04      	ldr	r2, [pc, #16]	; (8006040 <CONSOLE_init+0x24>)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6013      	str	r3, [r2, #0]

  return;
 8006032:	bf00      	nop
}
 8006034:	3708      	adds	r7, #8
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}
 800603a:	bf00      	nop
 800603c:	08008154 	.word	0x08008154
 8006040:	200000c4 	.word	0x200000c4

08006044 <CONSOLE_receiveData>:

void CONSOLE_receiveData(void)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	af00      	add	r7, sp, #0
  HAL_UART_Receive_IT(CONSOLE_uartHandle, CONSOLE_rxBuffer, 12);
 8006048:	4b04      	ldr	r3, [pc, #16]	; (800605c <CONSOLE_receiveData+0x18>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	220c      	movs	r2, #12
 800604e:	4904      	ldr	r1, [pc, #16]	; (8006060 <CONSOLE_receiveData+0x1c>)
 8006050:	4618      	mov	r0, r3
 8006052:	f7ff f8d9 	bl	8005208 <HAL_UART_Receive_IT>

  /* Resend received data (echo) */
//  HAL_UART_Transmit(CONSOLE_uartHandle, CONSOLE_rxBuffer, 12, 100);

  return;
 8006056:	bf00      	nop
}
 8006058:	bd80      	pop	{r7, pc}
 800605a:	bf00      	nop
 800605c:	200000c4 	.word	0x200000c4
 8006060:	200000c8 	.word	0x200000c8

08006064 <DRIVE_init>:
static void DRIVE_turnRight        (uint32_t  p_speed);
static void DRIVE_translateLeft    (uint32_t  p_speed);
static void DRIVE_translateRight   (uint32_t  p_speed);

void DRIVE_init(TIM_HandleTypeDef *p_pwmTimerHandle)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b082      	sub	sp, #8
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  LOG_info("Initializing Drive module");
 800606c:	493a      	ldr	r1, [pc, #232]	; (8006158 <DRIVE_init+0xf4>)
 800606e:	2001      	movs	r0, #1
 8006070:	f000 fd7e 	bl	8006b70 <LOG_log>

  DRIVE_motorFrontRight.dirPin1Port    = MOTOR_FRONT_RIGHT_IN_1_GPIO_Port;
 8006074:	4b39      	ldr	r3, [pc, #228]	; (800615c <DRIVE_init+0xf8>)
 8006076:	4a3a      	ldr	r2, [pc, #232]	; (8006160 <DRIVE_init+0xfc>)
 8006078:	60da      	str	r2, [r3, #12]
  DRIVE_motorFrontRight.dirPin1        = MOTOR_FRONT_RIGHT_IN_1_Pin;
 800607a:	4b38      	ldr	r3, [pc, #224]	; (800615c <DRIVE_init+0xf8>)
 800607c:	2210      	movs	r2, #16
 800607e:	615a      	str	r2, [r3, #20]
  DRIVE_motorFrontRight.dirPin2Port    = MOTOR_FRONT_RIGHT_IN_2_GPIO_Port;
 8006080:	4b36      	ldr	r3, [pc, #216]	; (800615c <DRIVE_init+0xf8>)
 8006082:	4a37      	ldr	r2, [pc, #220]	; (8006160 <DRIVE_init+0xfc>)
 8006084:	611a      	str	r2, [r3, #16]
  DRIVE_motorFrontRight.dirPin2        = MOTOR_FRONT_RIGHT_IN_2_Pin;
 8006086:	4b35      	ldr	r3, [pc, #212]	; (800615c <DRIVE_init+0xf8>)
 8006088:	2220      	movs	r2, #32
 800608a:	619a      	str	r2, [r3, #24]
  DRIVE_motorFrontRight.pwmTimerHandle = p_pwmTimerHandle;
 800608c:	4a33      	ldr	r2, [pc, #204]	; (800615c <DRIVE_init+0xf8>)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6253      	str	r3, [r2, #36]	; 0x24
  DRIVE_motorFrontRight.pwmChannel     = TIM_CHANNEL_2;
 8006092:	4b32      	ldr	r3, [pc, #200]	; (800615c <DRIVE_init+0xf8>)
 8006094:	2204      	movs	r2, #4
 8006096:	629a      	str	r2, [r3, #40]	; 0x28

  DRIVE_motorFrontLeft.dirPin1Port    = MOTOR_FRONT_LEFT_IN_1_GPIO_Port;
 8006098:	4b32      	ldr	r3, [pc, #200]	; (8006164 <DRIVE_init+0x100>)
 800609a:	4a33      	ldr	r2, [pc, #204]	; (8006168 <DRIVE_init+0x104>)
 800609c:	60da      	str	r2, [r3, #12]
  DRIVE_motorFrontLeft.dirPin1        = MOTOR_FRONT_LEFT_IN_1_Pin;
 800609e:	4b31      	ldr	r3, [pc, #196]	; (8006164 <DRIVE_init+0x100>)
 80060a0:	2201      	movs	r2, #1
 80060a2:	615a      	str	r2, [r3, #20]
  DRIVE_motorFrontLeft.dirPin2Port    = MOTOR_FRONT_LEFT_IN_2_GPIO_Port;
 80060a4:	4b2f      	ldr	r3, [pc, #188]	; (8006164 <DRIVE_init+0x100>)
 80060a6:	4a30      	ldr	r2, [pc, #192]	; (8006168 <DRIVE_init+0x104>)
 80060a8:	611a      	str	r2, [r3, #16]
  DRIVE_motorFrontLeft.dirPin2        = MOTOR_FRONT_LEFT_IN_2_Pin;
 80060aa:	4b2e      	ldr	r3, [pc, #184]	; (8006164 <DRIVE_init+0x100>)
 80060ac:	2202      	movs	r2, #2
 80060ae:	619a      	str	r2, [r3, #24]
  DRIVE_motorFrontLeft.pwmTimerHandle = p_pwmTimerHandle;
 80060b0:	4a2c      	ldr	r2, [pc, #176]	; (8006164 <DRIVE_init+0x100>)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6253      	str	r3, [r2, #36]	; 0x24
  DRIVE_motorFrontLeft.pwmChannel     = TIM_CHANNEL_1;
 80060b6:	4b2b      	ldr	r3, [pc, #172]	; (8006164 <DRIVE_init+0x100>)
 80060b8:	2200      	movs	r2, #0
 80060ba:	629a      	str	r2, [r3, #40]	; 0x28

  DRIVE_motorRearLeft.dirPin1Port    = MOTOR_REAR_LEFT_IN_1_GPIO_Port;
 80060bc:	4b2b      	ldr	r3, [pc, #172]	; (800616c <DRIVE_init+0x108>)
 80060be:	4a2c      	ldr	r2, [pc, #176]	; (8006170 <DRIVE_init+0x10c>)
 80060c0:	60da      	str	r2, [r3, #12]
  DRIVE_motorRearLeft.dirPin1        = MOTOR_REAR_LEFT_IN_1_Pin;
 80060c2:	4b2a      	ldr	r3, [pc, #168]	; (800616c <DRIVE_init+0x108>)
 80060c4:	2204      	movs	r2, #4
 80060c6:	615a      	str	r2, [r3, #20]
  DRIVE_motorRearLeft.dirPin2Port    = MOTOR_REAR_LEFT_IN_2_GPIO_Port;
 80060c8:	4b28      	ldr	r3, [pc, #160]	; (800616c <DRIVE_init+0x108>)
 80060ca:	4a25      	ldr	r2, [pc, #148]	; (8006160 <DRIVE_init+0xfc>)
 80060cc:	611a      	str	r2, [r3, #16]
  DRIVE_motorRearLeft.dirPin2        = MOTOR_REAR_LEFT_IN_2_Pin;
 80060ce:	4b27      	ldr	r3, [pc, #156]	; (800616c <DRIVE_init+0x108>)
 80060d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80060d4:	619a      	str	r2, [r3, #24]
  DRIVE_motorRearLeft.pwmTimerHandle = p_pwmTimerHandle;
 80060d6:	4a25      	ldr	r2, [pc, #148]	; (800616c <DRIVE_init+0x108>)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6253      	str	r3, [r2, #36]	; 0x24
  DRIVE_motorRearLeft.pwmChannel     = TIM_CHANNEL_4;
 80060dc:	4b23      	ldr	r3, [pc, #140]	; (800616c <DRIVE_init+0x108>)
 80060de:	220c      	movs	r2, #12
 80060e0:	629a      	str	r2, [r3, #40]	; 0x28

  DRIVE_motorRearRight.dirPin1Port    = MOTOR_REAR_RIGHT_IN_1_GPIO_Port;
 80060e2:	4b24      	ldr	r3, [pc, #144]	; (8006174 <DRIVE_init+0x110>)
 80060e4:	4a20      	ldr	r2, [pc, #128]	; (8006168 <DRIVE_init+0x104>)
 80060e6:	60da      	str	r2, [r3, #12]
  DRIVE_motorRearRight.dirPin1        = MOTOR_REAR_RIGHT_IN_1_Pin;
 80060e8:	4b22      	ldr	r3, [pc, #136]	; (8006174 <DRIVE_init+0x110>)
 80060ea:	2220      	movs	r2, #32
 80060ec:	615a      	str	r2, [r3, #20]
  DRIVE_motorRearRight.dirPin2Port    = MOTOR_REAR_RIGHT_IN_2_GPIO_Port;
 80060ee:	4b21      	ldr	r3, [pc, #132]	; (8006174 <DRIVE_init+0x110>)
 80060f0:	4a1d      	ldr	r2, [pc, #116]	; (8006168 <DRIVE_init+0x104>)
 80060f2:	611a      	str	r2, [r3, #16]
  DRIVE_motorRearRight.dirPin2        = MOTOR_REAR_RIGHT_IN_2_Pin;
 80060f4:	4b1f      	ldr	r3, [pc, #124]	; (8006174 <DRIVE_init+0x110>)
 80060f6:	2210      	movs	r2, #16
 80060f8:	619a      	str	r2, [r3, #24]
  DRIVE_motorRearRight.pwmTimerHandle = p_pwmTimerHandle;
 80060fa:	4a1e      	ldr	r2, [pc, #120]	; (8006174 <DRIVE_init+0x110>)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6253      	str	r3, [r2, #36]	; 0x24
  DRIVE_motorRearRight.pwmChannel     = TIM_CHANNEL_3;
 8006100:	4b1c      	ldr	r3, [pc, #112]	; (8006174 <DRIVE_init+0x110>)
 8006102:	2208      	movs	r2, #8
 8006104:	629a      	str	r2, [r3, #40]	; 0x28

  MOTOR_init(&DRIVE_motorFrontRight, "FRONT_RIGHT");
 8006106:	491c      	ldr	r1, [pc, #112]	; (8006178 <DRIVE_init+0x114>)
 8006108:	4814      	ldr	r0, [pc, #80]	; (800615c <DRIVE_init+0xf8>)
 800610a:	f000 fd87 	bl	8006c1c <MOTOR_init>
  MOTOR_init(&DRIVE_motorFrontLeft , "FRONT_LEFT ");
 800610e:	491b      	ldr	r1, [pc, #108]	; (800617c <DRIVE_init+0x118>)
 8006110:	4814      	ldr	r0, [pc, #80]	; (8006164 <DRIVE_init+0x100>)
 8006112:	f000 fd83 	bl	8006c1c <MOTOR_init>
  MOTOR_init(&DRIVE_motorRearLeft  , "REAR_LEFT  ");
 8006116:	491a      	ldr	r1, [pc, #104]	; (8006180 <DRIVE_init+0x11c>)
 8006118:	4814      	ldr	r0, [pc, #80]	; (800616c <DRIVE_init+0x108>)
 800611a:	f000 fd7f 	bl	8006c1c <MOTOR_init>
  MOTOR_init(&DRIVE_motorRearRight , "REAR_RIGHT ");
 800611e:	4919      	ldr	r1, [pc, #100]	; (8006184 <DRIVE_init+0x120>)
 8006120:	4814      	ldr	r0, [pc, #80]	; (8006174 <DRIVE_init+0x110>)
 8006122:	f000 fd7b 	bl	8006c1c <MOTOR_init>

  /* Start motors (but with a 0 speed at this point) */
  MOTOR_start(&DRIVE_motorFrontRight);
 8006126:	480d      	ldr	r0, [pc, #52]	; (800615c <DRIVE_init+0xf8>)
 8006128:	f000 fe0a 	bl	8006d40 <MOTOR_start>
  MOTOR_start(&DRIVE_motorFrontLeft );
 800612c:	480d      	ldr	r0, [pc, #52]	; (8006164 <DRIVE_init+0x100>)
 800612e:	f000 fe07 	bl	8006d40 <MOTOR_start>
  MOTOR_start(&DRIVE_motorRearRight );
 8006132:	4810      	ldr	r0, [pc, #64]	; (8006174 <DRIVE_init+0x110>)
 8006134:	f000 fe04 	bl	8006d40 <MOTOR_start>
  MOTOR_start(&DRIVE_motorRearLeft  );
 8006138:	480c      	ldr	r0, [pc, #48]	; (800616c <DRIVE_init+0x108>)
 800613a:	f000 fe01 	bl	8006d40 <MOTOR_start>

  /* De-activate debug mode: motors will make the car move */
  DRIVE_isDebugOn = false;
 800613e:	4b12      	ldr	r3, [pc, #72]	; (8006188 <DRIVE_init+0x124>)
 8006140:	2200      	movs	r2, #0
 8006142:	701a      	strb	r2, [r3, #0]

  /* Considered that drive is stopped we the code starts */
  DRIVE_isStarted = false;
 8006144:	4b11      	ldr	r3, [pc, #68]	; (800618c <DRIVE_init+0x128>)
 8006146:	2200      	movs	r2, #0
 8006148:	701a      	strb	r2, [r3, #0]

  /* Start with master board control mode */
  DRIVE_mode = DRIVE_MODE_MASTER_BOARD_CONTROLLED_SPEED;
 800614a:	4b11      	ldr	r3, [pc, #68]	; (8006190 <DRIVE_init+0x12c>)
 800614c:	2203      	movs	r2, #3
 800614e:	701a      	strb	r2, [r3, #0]

  return;
 8006150:	bf00      	nop
}
 8006152:	3708      	adds	r7, #8
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}
 8006158:	0800816c 	.word	0x0800816c
 800615c:	200000d8 	.word	0x200000d8
 8006160:	40011000 	.word	0x40011000
 8006164:	20000104 	.word	0x20000104
 8006168:	40010c00 	.word	0x40010c00
 800616c:	20000130 	.word	0x20000130
 8006170:	40011400 	.word	0x40011400
 8006174:	2000015c 	.word	0x2000015c
 8006178:	08008188 	.word	0x08008188
 800617c:	08008194 	.word	0x08008194
 8006180:	080081a0 	.word	0x080081a0
 8006184:	080081ac 	.word	0x080081ac
 8006188:	200000d4 	.word	0x200000d4
 800618c:	200000d5 	.word	0x200000d5
 8006190:	200000d6 	.word	0x200000d6

08006194 <DRIVE_update>:

void DRIVE_update(T_BLUETOOTH_CONTROL_Data *p_bluetoothData)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b084      	sub	sp, #16
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  uint32_t l_speed;

  // LOG_debug("Updating Drive module");

  /* Check possible requested mode change */
  switch (p_bluetoothData->button)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	7c1b      	ldrb	r3, [r3, #16]
 80061a0:	3b01      	subs	r3, #1
 80061a2:	2b0f      	cmp	r3, #15
 80061a4:	d85d      	bhi.n	8006262 <DRIVE_update+0xce>
 80061a6:	a201      	add	r2, pc, #4	; (adr r2, 80061ac <DRIVE_update+0x18>)
 80061a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ac:	0800622d 	.word	0x0800622d
 80061b0:	08006263 	.word	0x08006263
 80061b4:	08006263 	.word	0x08006263
 80061b8:	0800624b 	.word	0x0800624b
 80061bc:	08006263 	.word	0x08006263
 80061c0:	08006263 	.word	0x08006263
 80061c4:	08006263 	.word	0x08006263
 80061c8:	08006263 	.word	0x08006263
 80061cc:	08006263 	.word	0x08006263
 80061d0:	08006263 	.word	0x08006263
 80061d4:	08006263 	.word	0x08006263
 80061d8:	08006263 	.word	0x08006263
 80061dc:	0800621d 	.word	0x0800621d
 80061e0:	0800620d 	.word	0x0800620d
 80061e4:	080061fd 	.word	0x080061fd
 80061e8:	080061ed 	.word	0x080061ed
  {
    case BLUETOOTH_CONTROL_BUTTON_PINK_SQUARE:
      LOG_info("Drive mode now DRIVE_MODE_MANUAL_FIXED_SPEED");
 80061ec:	497d      	ldr	r1, [pc, #500]	; (80063e4 <DRIVE_update+0x250>)
 80061ee:	2001      	movs	r0, #1
 80061f0:	f000 fcbe 	bl	8006b70 <LOG_log>
      DRIVE_mode = DRIVE_MODE_MANUAL_FIXED_SPEED;
 80061f4:	4b7c      	ldr	r3, [pc, #496]	; (80063e8 <DRIVE_update+0x254>)
 80061f6:	2200      	movs	r2, #0
 80061f8:	701a      	strb	r2, [r3, #0]
      break;
 80061fa:	e037      	b.n	800626c <DRIVE_update+0xd8>

    case BLUETOOTH_CONTROL_BUTTON_BLUE_CROSS:
      LOG_info("Drive mode now DRIVE_MODE_MANUAL_VARIABLE_SPEED");
 80061fc:	497b      	ldr	r1, [pc, #492]	; (80063ec <DRIVE_update+0x258>)
 80061fe:	2001      	movs	r0, #1
 8006200:	f000 fcb6 	bl	8006b70 <LOG_log>
      DRIVE_mode = DRIVE_MODE_MANUAL_VARIABLE_SPEED;
 8006204:	4b78      	ldr	r3, [pc, #480]	; (80063e8 <DRIVE_update+0x254>)
 8006206:	2201      	movs	r2, #1
 8006208:	701a      	strb	r2, [r3, #0]
      break;
 800620a:	e02f      	b.n	800626c <DRIVE_update+0xd8>

    case BLUETOOTH_CONTROL_BUTTON_RED_CIRCLE:
      LOG_info("Drive mode now DRIVE_MODE_MANUAL_CONTROLLED_SPEED");
 800620c:	4978      	ldr	r1, [pc, #480]	; (80063f0 <DRIVE_update+0x25c>)
 800620e:	2001      	movs	r0, #1
 8006210:	f000 fcae 	bl	8006b70 <LOG_log>
      DRIVE_mode = DRIVE_MODE_MANUAL_CONTROLLED_SPEED;
 8006214:	4b74      	ldr	r3, [pc, #464]	; (80063e8 <DRIVE_update+0x254>)
 8006216:	2202      	movs	r2, #2
 8006218:	701a      	strb	r2, [r3, #0]
      break;
 800621a:	e027      	b.n	800626c <DRIVE_update+0xd8>

    case BLUETOOTH_CONTROL_BUTTON_GREEN_TRIANGLE:
      LOG_info("Drive mode now DRIVE_MODE_MASTER_BOARD_CONTROLLED_SPEED");
 800621c:	4975      	ldr	r1, [pc, #468]	; (80063f4 <DRIVE_update+0x260>)
 800621e:	2001      	movs	r0, #1
 8006220:	f000 fca6 	bl	8006b70 <LOG_log>
      DRIVE_mode = DRIVE_MODE_MASTER_BOARD_CONTROLLED_SPEED;
 8006224:	4b70      	ldr	r3, [pc, #448]	; (80063e8 <DRIVE_update+0x254>)
 8006226:	2203      	movs	r2, #3
 8006228:	701a      	strb	r2, [r3, #0]
      break;
 800622a:	e01f      	b.n	800626c <DRIVE_update+0xd8>

    case BLUETOOTH_CONTROL_BUTTON_SELECT:
      if (DRIVE_isDebugOn == false)
 800622c:	4b72      	ldr	r3, [pc, #456]	; (80063f8 <DRIVE_update+0x264>)
 800622e:	781b      	ldrb	r3, [r3, #0]
 8006230:	f083 0301 	eor.w	r3, r3, #1
 8006234:	b2db      	uxtb	r3, r3
 8006236:	2b00      	cmp	r3, #0
 8006238:	d015      	beq.n	8006266 <DRIVE_update+0xd2>
      {
        LOG_info("Drive debug mode turned ON  - Motors now OFF");
 800623a:	4970      	ldr	r1, [pc, #448]	; (80063fc <DRIVE_update+0x268>)
 800623c:	2001      	movs	r0, #1
 800623e:	f000 fc97 	bl	8006b70 <LOG_log>
        DRIVE_isDebugOn = true;
 8006242:	4b6d      	ldr	r3, [pc, #436]	; (80063f8 <DRIVE_update+0x264>)
 8006244:	2201      	movs	r2, #1
 8006246:	701a      	strb	r2, [r3, #0]
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 8006248:	e00d      	b.n	8006266 <DRIVE_update+0xd2>

    case BLUETOOTH_CONTROL_BUTTON_START:
      if (DRIVE_isDebugOn == true)
 800624a:	4b6b      	ldr	r3, [pc, #428]	; (80063f8 <DRIVE_update+0x264>)
 800624c:	781b      	ldrb	r3, [r3, #0]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d00b      	beq.n	800626a <DRIVE_update+0xd6>
      {
        LOG_info("Drive debug mode turned OFF - Motors now ON");
 8006252:	496b      	ldr	r1, [pc, #428]	; (8006400 <DRIVE_update+0x26c>)
 8006254:	2001      	movs	r0, #1
 8006256:	f000 fc8b 	bl	8006b70 <LOG_log>
        DRIVE_isDebugOn = false;
 800625a:	4b67      	ldr	r3, [pc, #412]	; (80063f8 <DRIVE_update+0x264>)
 800625c:	2200      	movs	r2, #0
 800625e:	701a      	strb	r2, [r3, #0]
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 8006260:	e003      	b.n	800626a <DRIVE_update+0xd6>

    default:
      ; /* Nothing to do */
      break;
 8006262:	bf00      	nop
 8006264:	e002      	b.n	800626c <DRIVE_update+0xd8>
      break;
 8006266:	bf00      	nop
 8006268:	e000      	b.n	800626c <DRIVE_update+0xd8>
      break;
 800626a:	bf00      	nop
  }

  /* Automated mode, ignoring directions received by bluetooth */
  if (DRIVE_mode == DRIVE_MODE_MASTER_BOARD_CONTROLLED_SPEED)
 800626c:	4b5e      	ldr	r3, [pc, #376]	; (80063e8 <DRIVE_update+0x254>)
 800626e:	781b      	ldrb	r3, [r3, #0]
 8006270:	2b03      	cmp	r3, #3
 8006272:	f000 80b3 	beq.w	80063dc <DRIVE_update+0x248>
    ; /* Nothing to do */
  }
  /* Manual mode, applying directions received by bluetooth */
  else
  {
    if (p_bluetoothData->leftY > DRIVE_JOYSTICKS_THRESHOLD)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	2b0a      	cmp	r3, #10
 800627c:	dd0c      	ble.n	8006298 <DRIVE_update+0x104>
    {
      l_speed = DRIVE_mode == DRIVE_MODE_MANUAL_FIXED_SPEED ? DRIVE_JOYSTICKS_FIXED_SPEED : p_bluetoothData->leftY;
 800627e:	4b5a      	ldr	r3, [pc, #360]	; (80063e8 <DRIVE_update+0x254>)
 8006280:	781b      	ldrb	r3, [r3, #0]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d002      	beq.n	800628c <DRIVE_update+0xf8>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	e000      	b.n	800628e <DRIVE_update+0xfa>
 800628c:	2319      	movs	r3, #25
 800628e:	60fb      	str	r3, [r7, #12]

      DRIVE_moveForward(l_speed);
 8006290:	68f8      	ldr	r0, [r7, #12]
 8006292:	f000 f8f5 	bl	8006480 <DRIVE_moveForward>
    {
      DRIVE_stop();
    }
  }

  return;
 8006296:	e0a1      	b.n	80063dc <DRIVE_update+0x248>
    else if (p_bluetoothData->rightY > DRIVE_JOYSTICKS_THRESHOLD)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	68db      	ldr	r3, [r3, #12]
 800629c:	2b0a      	cmp	r3, #10
 800629e:	dd0c      	ble.n	80062ba <DRIVE_update+0x126>
      l_speed = DRIVE_mode == DRIVE_MODE_MANUAL_FIXED_SPEED ? DRIVE_JOYSTICKS_FIXED_SPEED : p_bluetoothData->rightY;
 80062a0:	4b51      	ldr	r3, [pc, #324]	; (80063e8 <DRIVE_update+0x254>)
 80062a2:	781b      	ldrb	r3, [r3, #0]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d002      	beq.n	80062ae <DRIVE_update+0x11a>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	68db      	ldr	r3, [r3, #12]
 80062ac:	e000      	b.n	80062b0 <DRIVE_update+0x11c>
 80062ae:	2319      	movs	r3, #25
 80062b0:	60fb      	str	r3, [r7, #12]
      DRIVE_moveForward(l_speed);
 80062b2:	68f8      	ldr	r0, [r7, #12]
 80062b4:	f000 f8e4 	bl	8006480 <DRIVE_moveForward>
  return;
 80062b8:	e090      	b.n	80063dc <DRIVE_update+0x248>
    else if (p_bluetoothData->leftY < -DRIVE_JOYSTICKS_THRESHOLD)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	f113 0f0a 	cmn.w	r3, #10
 80062c2:	da0d      	bge.n	80062e0 <DRIVE_update+0x14c>
      l_speed = DRIVE_mode == DRIVE_MODE_MANUAL_FIXED_SPEED ? DRIVE_JOYSTICKS_FIXED_SPEED : -p_bluetoothData->leftY;
 80062c4:	4b48      	ldr	r3, [pc, #288]	; (80063e8 <DRIVE_update+0x254>)
 80062c6:	781b      	ldrb	r3, [r3, #0]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d003      	beq.n	80062d4 <DRIVE_update+0x140>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	425b      	negs	r3, r3
 80062d2:	e000      	b.n	80062d6 <DRIVE_update+0x142>
 80062d4:	2319      	movs	r3, #25
 80062d6:	60fb      	str	r3, [r7, #12]
      DRIVE_moveBackward(l_speed);
 80062d8:	68f8      	ldr	r0, [r7, #12]
 80062da:	f000 f921 	bl	8006520 <DRIVE_moveBackward>
  return;
 80062de:	e07d      	b.n	80063dc <DRIVE_update+0x248>
    else if (p_bluetoothData->rightY < -DRIVE_JOYSTICKS_THRESHOLD)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	68db      	ldr	r3, [r3, #12]
 80062e4:	f113 0f0a 	cmn.w	r3, #10
 80062e8:	da0d      	bge.n	8006306 <DRIVE_update+0x172>
      l_speed = DRIVE_mode == DRIVE_MODE_MANUAL_FIXED_SPEED ? DRIVE_JOYSTICKS_FIXED_SPEED : -p_bluetoothData->rightY;
 80062ea:	4b3f      	ldr	r3, [pc, #252]	; (80063e8 <DRIVE_update+0x254>)
 80062ec:	781b      	ldrb	r3, [r3, #0]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d003      	beq.n	80062fa <DRIVE_update+0x166>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	68db      	ldr	r3, [r3, #12]
 80062f6:	425b      	negs	r3, r3
 80062f8:	e000      	b.n	80062fc <DRIVE_update+0x168>
 80062fa:	2319      	movs	r3, #25
 80062fc:	60fb      	str	r3, [r7, #12]
      DRIVE_moveBackward(l_speed);
 80062fe:	68f8      	ldr	r0, [r7, #12]
 8006300:	f000 f90e 	bl	8006520 <DRIVE_moveBackward>
  return;
 8006304:	e06a      	b.n	80063dc <DRIVE_update+0x248>
    else if (p_bluetoothData->leftX < -DRIVE_JOYSTICKS_THRESHOLD)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f113 0f0a 	cmn.w	r3, #10
 800630e:	da0d      	bge.n	800632c <DRIVE_update+0x198>
      l_speed = DRIVE_mode == DRIVE_MODE_MANUAL_FIXED_SPEED ? DRIVE_JOYSTICKS_FIXED_SPEED : -p_bluetoothData->leftX;
 8006310:	4b35      	ldr	r3, [pc, #212]	; (80063e8 <DRIVE_update+0x254>)
 8006312:	781b      	ldrb	r3, [r3, #0]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d003      	beq.n	8006320 <DRIVE_update+0x18c>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	425b      	negs	r3, r3
 800631e:	e000      	b.n	8006322 <DRIVE_update+0x18e>
 8006320:	2319      	movs	r3, #25
 8006322:	60fb      	str	r3, [r7, #12]
      DRIVE_turnLeft(l_speed);
 8006324:	68f8      	ldr	r0, [r7, #12]
 8006326:	f000 fa63 	bl	80067f0 <DRIVE_turnLeft>
  return;
 800632a:	e057      	b.n	80063dc <DRIVE_update+0x248>
    else if (p_bluetoothData->leftX > DRIVE_JOYSTICKS_THRESHOLD)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	2b0a      	cmp	r3, #10
 8006332:	dd0c      	ble.n	800634e <DRIVE_update+0x1ba>
      l_speed = DRIVE_mode == DRIVE_MODE_MANUAL_FIXED_SPEED ? DRIVE_JOYSTICKS_FIXED_SPEED : p_bluetoothData->leftX;
 8006334:	4b2c      	ldr	r3, [pc, #176]	; (80063e8 <DRIVE_update+0x254>)
 8006336:	781b      	ldrb	r3, [r3, #0]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d002      	beq.n	8006342 <DRIVE_update+0x1ae>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	e000      	b.n	8006344 <DRIVE_update+0x1b0>
 8006342:	2319      	movs	r3, #25
 8006344:	60fb      	str	r3, [r7, #12]
      DRIVE_turnRight(l_speed);
 8006346:	68f8      	ldr	r0, [r7, #12]
 8006348:	f000 faa2 	bl	8006890 <DRIVE_turnRight>
  return;
 800634c:	e046      	b.n	80063dc <DRIVE_update+0x248>
    else if (p_bluetoothData->rightX < -DRIVE_JOYSTICKS_THRESHOLD)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	f113 0f0a 	cmn.w	r3, #10
 8006356:	da0d      	bge.n	8006374 <DRIVE_update+0x1e0>
      l_speed = DRIVE_mode == DRIVE_MODE_MANUAL_FIXED_SPEED ? DRIVE_JOYSTICKS_FIXED_SPEED : -p_bluetoothData->rightX;
 8006358:	4b23      	ldr	r3, [pc, #140]	; (80063e8 <DRIVE_update+0x254>)
 800635a:	781b      	ldrb	r3, [r3, #0]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d003      	beq.n	8006368 <DRIVE_update+0x1d4>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	425b      	negs	r3, r3
 8006366:	e000      	b.n	800636a <DRIVE_update+0x1d6>
 8006368:	2319      	movs	r3, #25
 800636a:	60fb      	str	r3, [r7, #12]
      DRIVE_translateLeft(l_speed);
 800636c:	68f8      	ldr	r0, [r7, #12]
 800636e:	f000 fadf 	bl	8006930 <DRIVE_translateLeft>
  return;
 8006372:	e033      	b.n	80063dc <DRIVE_update+0x248>
    else if (p_bluetoothData->rightX > DRIVE_JOYSTICKS_THRESHOLD)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	689b      	ldr	r3, [r3, #8]
 8006378:	2b0a      	cmp	r3, #10
 800637a:	dd0c      	ble.n	8006396 <DRIVE_update+0x202>
      l_speed = DRIVE_mode == DRIVE_MODE_MANUAL_FIXED_SPEED ? DRIVE_JOYSTICKS_FIXED_SPEED : p_bluetoothData->rightX;
 800637c:	4b1a      	ldr	r3, [pc, #104]	; (80063e8 <DRIVE_update+0x254>)
 800637e:	781b      	ldrb	r3, [r3, #0]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d002      	beq.n	800638a <DRIVE_update+0x1f6>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	e000      	b.n	800638c <DRIVE_update+0x1f8>
 800638a:	2319      	movs	r3, #25
 800638c:	60fb      	str	r3, [r7, #12]
      DRIVE_translateRight(l_speed);
 800638e:	68f8      	ldr	r0, [r7, #12]
 8006390:	f000 fb1e 	bl	80069d0 <DRIVE_translateRight>
  return;
 8006394:	e022      	b.n	80063dc <DRIVE_update+0x248>
    else if (p_bluetoothData->button == BLUETOOTH_CONTROL_BUTTON_L1)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	7c1b      	ldrb	r3, [r3, #16]
 800639a:	2b0b      	cmp	r3, #11
 800639c:	d103      	bne.n	80063a6 <DRIVE_update+0x212>
      DRIVE_moveForwardLeft(DRIVE_BUTTONS_FIXED_SPEED);
 800639e:	2032      	movs	r0, #50	; 0x32
 80063a0:	f000 f954 	bl	800664c <DRIVE_moveForwardLeft>
  return;
 80063a4:	e01a      	b.n	80063dc <DRIVE_update+0x248>
    else if (p_bluetoothData->button == BLUETOOTH_CONTROL_BUTTON_L2)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	7c1b      	ldrb	r3, [r3, #16]
 80063aa:	2b09      	cmp	r3, #9
 80063ac:	d103      	bne.n	80063b6 <DRIVE_update+0x222>
      DRIVE_moveBackwardRight(DRIVE_BUTTONS_FIXED_SPEED);
 80063ae:	2032      	movs	r0, #50	; 0x32
 80063b0:	f000 f992 	bl	80066d8 <DRIVE_moveBackwardRight>
  return;
 80063b4:	e012      	b.n	80063dc <DRIVE_update+0x248>
    else if (p_bluetoothData->button == BLUETOOTH_CONTROL_BUTTON_R1)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	7c1b      	ldrb	r3, [r3, #16]
 80063ba:	2b0c      	cmp	r3, #12
 80063bc:	d103      	bne.n	80063c6 <DRIVE_update+0x232>
      DRIVE_moveForwardRight(DRIVE_BUTTONS_FIXED_SPEED);
 80063be:	2032      	movs	r0, #50	; 0x32
 80063c0:	f000 f8fe 	bl	80065c0 <DRIVE_moveForwardRight>
  return;
 80063c4:	e00a      	b.n	80063dc <DRIVE_update+0x248>
    else if (p_bluetoothData->button == BLUETOOTH_CONTROL_BUTTON_R2)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	7c1b      	ldrb	r3, [r3, #16]
 80063ca:	2b0a      	cmp	r3, #10
 80063cc:	d103      	bne.n	80063d6 <DRIVE_update+0x242>
      DRIVE_moveBackwardLeft(DRIVE_BUTTONS_FIXED_SPEED);
 80063ce:	2032      	movs	r0, #50	; 0x32
 80063d0:	f000 f9c8 	bl	8006764 <DRIVE_moveBackwardLeft>
  return;
 80063d4:	e002      	b.n	80063dc <DRIVE_update+0x248>
      DRIVE_stop();
 80063d6:	f000 f815 	bl	8006404 <DRIVE_stop>
  return;
 80063da:	bf00      	nop
 80063dc:	bf00      	nop
}
 80063de:	3710      	adds	r7, #16
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}
 80063e4:	080081b8 	.word	0x080081b8
 80063e8:	200000d6 	.word	0x200000d6
 80063ec:	080081e8 	.word	0x080081e8
 80063f0:	08008218 	.word	0x08008218
 80063f4:	0800824c 	.word	0x0800824c
 80063f8:	200000d4 	.word	0x200000d4
 80063fc:	08008284 	.word	0x08008284
 8006400:	080082b4 	.word	0x080082b4

08006404 <DRIVE_stop>:

static void DRIVE_stop(void)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	af00      	add	r7, sp, #0
  if (DRIVE_isStarted == true)
 8006408:	4b0e      	ldr	r3, [pc, #56]	; (8006444 <DRIVE_stop+0x40>)
 800640a:	781b      	ldrb	r3, [r3, #0]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d017      	beq.n	8006440 <DRIVE_stop+0x3c>
  {
    LOG_info("Stopping drive");
 8006410:	490d      	ldr	r1, [pc, #52]	; (8006448 <DRIVE_stop+0x44>)
 8006412:	2001      	movs	r0, #1
 8006414:	f000 fbac 	bl	8006b70 <LOG_log>

    MOTOR_setSpeed(&DRIVE_motorFrontRight, 0);
 8006418:	2100      	movs	r1, #0
 800641a:	480c      	ldr	r0, [pc, #48]	; (800644c <DRIVE_stop+0x48>)
 800641c:	f000 fc58 	bl	8006cd0 <MOTOR_setSpeed>
    MOTOR_setSpeed(&DRIVE_motorFrontLeft , 0);
 8006420:	2100      	movs	r1, #0
 8006422:	480b      	ldr	r0, [pc, #44]	; (8006450 <DRIVE_stop+0x4c>)
 8006424:	f000 fc54 	bl	8006cd0 <MOTOR_setSpeed>
    MOTOR_setSpeed(&DRIVE_motorRearRight , 0);
 8006428:	2100      	movs	r1, #0
 800642a:	480a      	ldr	r0, [pc, #40]	; (8006454 <DRIVE_stop+0x50>)
 800642c:	f000 fc50 	bl	8006cd0 <MOTOR_setSpeed>
    MOTOR_setSpeed(&DRIVE_motorRearLeft  , 0);
 8006430:	2100      	movs	r1, #0
 8006432:	4809      	ldr	r0, [pc, #36]	; (8006458 <DRIVE_stop+0x54>)
 8006434:	f000 fc4c 	bl	8006cd0 <MOTOR_setSpeed>

    DRIVE_isStarted = false;
 8006438:	4b02      	ldr	r3, [pc, #8]	; (8006444 <DRIVE_stop+0x40>)
 800643a:	2200      	movs	r2, #0
 800643c:	701a      	strb	r2, [r3, #0]
  else
  {
    ; /* Nothing to do */
  }

  return;
 800643e:	bf00      	nop
 8006440:	bf00      	nop
}
 8006442:	bd80      	pop	{r7, pc}
 8006444:	200000d5 	.word	0x200000d5
 8006448:	080082e0 	.word	0x080082e0
 800644c:	200000d8 	.word	0x200000d8
 8006450:	20000104 	.word	0x20000104
 8006454:	2000015c 	.word	0x2000015c
 8006458:	20000130 	.word	0x20000130

0800645c <DRIVE_clampSpeed>:

static void DRIVE_clampSpeed(uint32_t *p_speed)
{
 800645c:	b480      	push	{r7}
 800645e:	b083      	sub	sp, #12
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  if (*p_speed > DRIVE_MAXIMUM_SPEED)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	2b32      	cmp	r3, #50	; 0x32
 800646a:	d903      	bls.n	8006474 <DRIVE_clampSpeed+0x18>
  {
    *p_speed = DRIVE_MAXIMUM_SPEED;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2232      	movs	r2, #50	; 0x32
 8006470:	601a      	str	r2, [r3, #0]
  else
  {
    ; /* Nothing to do */
  }

  return;
 8006472:	bf00      	nop
 8006474:	bf00      	nop
}
 8006476:	370c      	adds	r7, #12
 8006478:	46bd      	mov	sp, r7
 800647a:	bc80      	pop	{r7}
 800647c:	4770      	bx	lr
	...

08006480 <DRIVE_moveForward>:

static void DRIVE_moveForward(uint32_t p_speed)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b084      	sub	sp, #16
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	60fb      	str	r3, [r7, #12]

  LOG_info("Moving forward @%u", l_speed);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	461a      	mov	r2, r3
 8006490:	491c      	ldr	r1, [pc, #112]	; (8006504 <DRIVE_moveForward+0x84>)
 8006492:	2001      	movs	r0, #1
 8006494:	f000 fb6c 	bl	8006b70 <LOG_log>

  DRIVE_isStarted = true;
 8006498:	4b1b      	ldr	r3, [pc, #108]	; (8006508 <DRIVE_moveForward+0x88>)
 800649a:	2201      	movs	r2, #1
 800649c:	701a      	strb	r2, [r3, #0]

  DRIVE_clampSpeed(&l_speed);
 800649e:	f107 030c 	add.w	r3, r7, #12
 80064a2:	4618      	mov	r0, r3
 80064a4:	f7ff ffda 	bl	800645c <DRIVE_clampSpeed>

  MOTOR_setDirection(&DRIVE_motorFrontRight, MOTOR_DIRECTION_FORWARD);
 80064a8:	2100      	movs	r1, #0
 80064aa:	4818      	ldr	r0, [pc, #96]	; (800650c <DRIVE_moveForward+0x8c>)
 80064ac:	f000 fbd4 	bl	8006c58 <MOTOR_setDirection>
  MOTOR_setDirection(&DRIVE_motorFrontLeft , MOTOR_DIRECTION_FORWARD);
 80064b0:	2100      	movs	r1, #0
 80064b2:	4817      	ldr	r0, [pc, #92]	; (8006510 <DRIVE_moveForward+0x90>)
 80064b4:	f000 fbd0 	bl	8006c58 <MOTOR_setDirection>
  MOTOR_setDirection(&DRIVE_motorRearRight , MOTOR_DIRECTION_FORWARD);
 80064b8:	2100      	movs	r1, #0
 80064ba:	4816      	ldr	r0, [pc, #88]	; (8006514 <DRIVE_moveForward+0x94>)
 80064bc:	f000 fbcc 	bl	8006c58 <MOTOR_setDirection>
  MOTOR_setDirection(&DRIVE_motorRearLeft  , MOTOR_DIRECTION_FORWARD);
 80064c0:	2100      	movs	r1, #0
 80064c2:	4815      	ldr	r0, [pc, #84]	; (8006518 <DRIVE_moveForward+0x98>)
 80064c4:	f000 fbc8 	bl	8006c58 <MOTOR_setDirection>

  if (DRIVE_isDebugOn == true)
 80064c8:	4b14      	ldr	r3, [pc, #80]	; (800651c <DRIVE_moveForward+0x9c>)
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d114      	bne.n	80064fa <DRIVE_moveForward+0x7a>
  {
    ; /* Nothing to do */
  }
  else
  {
    MOTOR_setSpeed(&DRIVE_motorFrontRight, l_speed);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	4619      	mov	r1, r3
 80064d4:	480d      	ldr	r0, [pc, #52]	; (800650c <DRIVE_moveForward+0x8c>)
 80064d6:	f000 fbfb 	bl	8006cd0 <MOTOR_setSpeed>
    MOTOR_setSpeed(&DRIVE_motorFrontLeft , l_speed);
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	4619      	mov	r1, r3
 80064de:	480c      	ldr	r0, [pc, #48]	; (8006510 <DRIVE_moveForward+0x90>)
 80064e0:	f000 fbf6 	bl	8006cd0 <MOTOR_setSpeed>
    MOTOR_setSpeed(&DRIVE_motorRearRight , l_speed);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	4619      	mov	r1, r3
 80064e8:	480a      	ldr	r0, [pc, #40]	; (8006514 <DRIVE_moveForward+0x94>)
 80064ea:	f000 fbf1 	bl	8006cd0 <MOTOR_setSpeed>
    MOTOR_setSpeed(&DRIVE_motorRearLeft  , l_speed);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	4619      	mov	r1, r3
 80064f2:	4809      	ldr	r0, [pc, #36]	; (8006518 <DRIVE_moveForward+0x98>)
 80064f4:	f000 fbec 	bl	8006cd0 <MOTOR_setSpeed>
  }

  return;
 80064f8:	bf00      	nop
 80064fa:	bf00      	nop
}
 80064fc:	3710      	adds	r7, #16
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}
 8006502:	bf00      	nop
 8006504:	080082f0 	.word	0x080082f0
 8006508:	200000d5 	.word	0x200000d5
 800650c:	200000d8 	.word	0x200000d8
 8006510:	20000104 	.word	0x20000104
 8006514:	2000015c 	.word	0x2000015c
 8006518:	20000130 	.word	0x20000130
 800651c:	200000d4 	.word	0x200000d4

08006520 <DRIVE_moveBackward>:

static void DRIVE_moveBackward(uint32_t p_speed)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b084      	sub	sp, #16
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	60fb      	str	r3, [r7, #12]

  LOG_info("Moving backward @%u", l_speed);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	461a      	mov	r2, r3
 8006530:	491c      	ldr	r1, [pc, #112]	; (80065a4 <DRIVE_moveBackward+0x84>)
 8006532:	2001      	movs	r0, #1
 8006534:	f000 fb1c 	bl	8006b70 <LOG_log>

  DRIVE_isStarted = true;
 8006538:	4b1b      	ldr	r3, [pc, #108]	; (80065a8 <DRIVE_moveBackward+0x88>)
 800653a:	2201      	movs	r2, #1
 800653c:	701a      	strb	r2, [r3, #0]

  DRIVE_clampSpeed(&l_speed);
 800653e:	f107 030c 	add.w	r3, r7, #12
 8006542:	4618      	mov	r0, r3
 8006544:	f7ff ff8a 	bl	800645c <DRIVE_clampSpeed>

  MOTOR_setDirection(&DRIVE_motorFrontRight, MOTOR_DIRECTION_BACKWARD);
 8006548:	2101      	movs	r1, #1
 800654a:	4818      	ldr	r0, [pc, #96]	; (80065ac <DRIVE_moveBackward+0x8c>)
 800654c:	f000 fb84 	bl	8006c58 <MOTOR_setDirection>
  MOTOR_setDirection(&DRIVE_motorFrontLeft , MOTOR_DIRECTION_BACKWARD);
 8006550:	2101      	movs	r1, #1
 8006552:	4817      	ldr	r0, [pc, #92]	; (80065b0 <DRIVE_moveBackward+0x90>)
 8006554:	f000 fb80 	bl	8006c58 <MOTOR_setDirection>
  MOTOR_setDirection(&DRIVE_motorRearRight , MOTOR_DIRECTION_BACKWARD);
 8006558:	2101      	movs	r1, #1
 800655a:	4816      	ldr	r0, [pc, #88]	; (80065b4 <DRIVE_moveBackward+0x94>)
 800655c:	f000 fb7c 	bl	8006c58 <MOTOR_setDirection>
  MOTOR_setDirection(&DRIVE_motorRearLeft  , MOTOR_DIRECTION_BACKWARD);
 8006560:	2101      	movs	r1, #1
 8006562:	4815      	ldr	r0, [pc, #84]	; (80065b8 <DRIVE_moveBackward+0x98>)
 8006564:	f000 fb78 	bl	8006c58 <MOTOR_setDirection>

  if (DRIVE_isDebugOn == true)
 8006568:	4b14      	ldr	r3, [pc, #80]	; (80065bc <DRIVE_moveBackward+0x9c>)
 800656a:	781b      	ldrb	r3, [r3, #0]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d114      	bne.n	800659a <DRIVE_moveBackward+0x7a>
  {
    ; /* Nothing to do */
  }
  else
  {
    MOTOR_setSpeed(&DRIVE_motorFrontRight, l_speed);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	4619      	mov	r1, r3
 8006574:	480d      	ldr	r0, [pc, #52]	; (80065ac <DRIVE_moveBackward+0x8c>)
 8006576:	f000 fbab 	bl	8006cd0 <MOTOR_setSpeed>
    MOTOR_setSpeed(&DRIVE_motorFrontLeft , l_speed);
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	4619      	mov	r1, r3
 800657e:	480c      	ldr	r0, [pc, #48]	; (80065b0 <DRIVE_moveBackward+0x90>)
 8006580:	f000 fba6 	bl	8006cd0 <MOTOR_setSpeed>
    MOTOR_setSpeed(&DRIVE_motorRearRight , l_speed);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	4619      	mov	r1, r3
 8006588:	480a      	ldr	r0, [pc, #40]	; (80065b4 <DRIVE_moveBackward+0x94>)
 800658a:	f000 fba1 	bl	8006cd0 <MOTOR_setSpeed>
    MOTOR_setSpeed(&DRIVE_motorRearLeft  , l_speed);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	4619      	mov	r1, r3
 8006592:	4809      	ldr	r0, [pc, #36]	; (80065b8 <DRIVE_moveBackward+0x98>)
 8006594:	f000 fb9c 	bl	8006cd0 <MOTOR_setSpeed>
  }

  return;
 8006598:	bf00      	nop
 800659a:	bf00      	nop
}
 800659c:	3710      	adds	r7, #16
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}
 80065a2:	bf00      	nop
 80065a4:	08008304 	.word	0x08008304
 80065a8:	200000d5 	.word	0x200000d5
 80065ac:	200000d8 	.word	0x200000d8
 80065b0:	20000104 	.word	0x20000104
 80065b4:	2000015c 	.word	0x2000015c
 80065b8:	20000130 	.word	0x20000130
 80065bc:	200000d4 	.word	0x200000d4

080065c0 <DRIVE_moveForwardRight>:

static void DRIVE_moveForwardRight (uint32_t p_speed)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b084      	sub	sp, #16
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	60fb      	str	r3, [r7, #12]

  LOG_info("Moving forward-right @%u", l_speed);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	461a      	mov	r2, r3
 80065d0:	4917      	ldr	r1, [pc, #92]	; (8006630 <DRIVE_moveForwardRight+0x70>)
 80065d2:	2001      	movs	r0, #1
 80065d4:	f000 facc 	bl	8006b70 <LOG_log>

  DRIVE_isStarted = true;
 80065d8:	4b16      	ldr	r3, [pc, #88]	; (8006634 <DRIVE_moveForwardRight+0x74>)
 80065da:	2201      	movs	r2, #1
 80065dc:	701a      	strb	r2, [r3, #0]

  DRIVE_clampSpeed(&l_speed);
 80065de:	f107 030c 	add.w	r3, r7, #12
 80065e2:	4618      	mov	r0, r3
 80065e4:	f7ff ff3a 	bl	800645c <DRIVE_clampSpeed>

  MOTOR_setDirection(&DRIVE_motorFrontLeft, MOTOR_DIRECTION_FORWARD);
 80065e8:	2100      	movs	r1, #0
 80065ea:	4813      	ldr	r0, [pc, #76]	; (8006638 <DRIVE_moveForwardRight+0x78>)
 80065ec:	f000 fb34 	bl	8006c58 <MOTOR_setDirection>
  MOTOR_setDirection(&DRIVE_motorRearRight, MOTOR_DIRECTION_FORWARD);
 80065f0:	2100      	movs	r1, #0
 80065f2:	4812      	ldr	r0, [pc, #72]	; (800663c <DRIVE_moveForwardRight+0x7c>)
 80065f4:	f000 fb30 	bl	8006c58 <MOTOR_setDirection>

  if (DRIVE_isDebugOn == true)
 80065f8:	4b11      	ldr	r3, [pc, #68]	; (8006640 <DRIVE_moveForwardRight+0x80>)
 80065fa:	781b      	ldrb	r3, [r3, #0]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d112      	bne.n	8006626 <DRIVE_moveForwardRight+0x66>
  {
    ; /* Nothing to do */
  }
  else
  {
    MOTOR_setSpeed(&DRIVE_motorFrontRight,       0);
 8006600:	2100      	movs	r1, #0
 8006602:	4810      	ldr	r0, [pc, #64]	; (8006644 <DRIVE_moveForwardRight+0x84>)
 8006604:	f000 fb64 	bl	8006cd0 <MOTOR_setSpeed>
    MOTOR_setSpeed(&DRIVE_motorFrontLeft , l_speed);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	4619      	mov	r1, r3
 800660c:	480a      	ldr	r0, [pc, #40]	; (8006638 <DRIVE_moveForwardRight+0x78>)
 800660e:	f000 fb5f 	bl	8006cd0 <MOTOR_setSpeed>
    MOTOR_setSpeed(&DRIVE_motorRearRight , l_speed);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	4619      	mov	r1, r3
 8006616:	4809      	ldr	r0, [pc, #36]	; (800663c <DRIVE_moveForwardRight+0x7c>)
 8006618:	f000 fb5a 	bl	8006cd0 <MOTOR_setSpeed>
    MOTOR_setSpeed(&DRIVE_motorRearLeft  ,       0);
 800661c:	2100      	movs	r1, #0
 800661e:	480a      	ldr	r0, [pc, #40]	; (8006648 <DRIVE_moveForwardRight+0x88>)
 8006620:	f000 fb56 	bl	8006cd0 <MOTOR_setSpeed>
  }

  return;
 8006624:	bf00      	nop
 8006626:	bf00      	nop
}
 8006628:	3710      	adds	r7, #16
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}
 800662e:	bf00      	nop
 8006630:	08008318 	.word	0x08008318
 8006634:	200000d5 	.word	0x200000d5
 8006638:	20000104 	.word	0x20000104
 800663c:	2000015c 	.word	0x2000015c
 8006640:	200000d4 	.word	0x200000d4
 8006644:	200000d8 	.word	0x200000d8
 8006648:	20000130 	.word	0x20000130

0800664c <DRIVE_moveForwardLeft>:

static void DRIVE_moveForwardLeft  (uint32_t p_speed)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b084      	sub	sp, #16
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	60fb      	str	r3, [r7, #12]

  LOG_info("Moving forward-left @%u", l_speed);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	461a      	mov	r2, r3
 800665c:	4917      	ldr	r1, [pc, #92]	; (80066bc <DRIVE_moveForwardLeft+0x70>)
 800665e:	2001      	movs	r0, #1
 8006660:	f000 fa86 	bl	8006b70 <LOG_log>

  DRIVE_isStarted = true;
 8006664:	4b16      	ldr	r3, [pc, #88]	; (80066c0 <DRIVE_moveForwardLeft+0x74>)
 8006666:	2201      	movs	r2, #1
 8006668:	701a      	strb	r2, [r3, #0]

  DRIVE_clampSpeed(&l_speed);
 800666a:	f107 030c 	add.w	r3, r7, #12
 800666e:	4618      	mov	r0, r3
 8006670:	f7ff fef4 	bl	800645c <DRIVE_clampSpeed>

  MOTOR_setDirection(&DRIVE_motorFrontRight, MOTOR_DIRECTION_FORWARD);
 8006674:	2100      	movs	r1, #0
 8006676:	4813      	ldr	r0, [pc, #76]	; (80066c4 <DRIVE_moveForwardLeft+0x78>)
 8006678:	f000 faee 	bl	8006c58 <MOTOR_setDirection>
  MOTOR_setDirection(&DRIVE_motorRearLeft  , MOTOR_DIRECTION_FORWARD);
 800667c:	2100      	movs	r1, #0
 800667e:	4812      	ldr	r0, [pc, #72]	; (80066c8 <DRIVE_moveForwardLeft+0x7c>)
 8006680:	f000 faea 	bl	8006c58 <MOTOR_setDirection>

  if (DRIVE_isDebugOn == true)
 8006684:	4b11      	ldr	r3, [pc, #68]	; (80066cc <DRIVE_moveForwardLeft+0x80>)
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d112      	bne.n	80066b2 <DRIVE_moveForwardLeft+0x66>
  {
    ; /* Nothing to do */
  }
  else
  {
    MOTOR_setSpeed(&DRIVE_motorFrontRight, l_speed);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	4619      	mov	r1, r3
 8006690:	480c      	ldr	r0, [pc, #48]	; (80066c4 <DRIVE_moveForwardLeft+0x78>)
 8006692:	f000 fb1d 	bl	8006cd0 <MOTOR_setSpeed>
    MOTOR_setSpeed(&DRIVE_motorFrontLeft ,       0);
 8006696:	2100      	movs	r1, #0
 8006698:	480d      	ldr	r0, [pc, #52]	; (80066d0 <DRIVE_moveForwardLeft+0x84>)
 800669a:	f000 fb19 	bl	8006cd0 <MOTOR_setSpeed>
    MOTOR_setSpeed(&DRIVE_motorRearRight ,       0);
 800669e:	2100      	movs	r1, #0
 80066a0:	480c      	ldr	r0, [pc, #48]	; (80066d4 <DRIVE_moveForwardLeft+0x88>)
 80066a2:	f000 fb15 	bl	8006cd0 <MOTOR_setSpeed>
    MOTOR_setSpeed(&DRIVE_motorRearLeft  , l_speed);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	4619      	mov	r1, r3
 80066aa:	4807      	ldr	r0, [pc, #28]	; (80066c8 <DRIVE_moveForwardLeft+0x7c>)
 80066ac:	f000 fb10 	bl	8006cd0 <MOTOR_setSpeed>
  }

  return;
 80066b0:	bf00      	nop
 80066b2:	bf00      	nop
}
 80066b4:	3710      	adds	r7, #16
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}
 80066ba:	bf00      	nop
 80066bc:	08008334 	.word	0x08008334
 80066c0:	200000d5 	.word	0x200000d5
 80066c4:	200000d8 	.word	0x200000d8
 80066c8:	20000130 	.word	0x20000130
 80066cc:	200000d4 	.word	0x200000d4
 80066d0:	20000104 	.word	0x20000104
 80066d4:	2000015c 	.word	0x2000015c

080066d8 <DRIVE_moveBackwardRight>:

static void DRIVE_moveBackwardRight(uint32_t p_speed)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b084      	sub	sp, #16
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	60fb      	str	r3, [r7, #12]

  LOG_info("Moving backward-right @%u", l_speed);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	461a      	mov	r2, r3
 80066e8:	4917      	ldr	r1, [pc, #92]	; (8006748 <DRIVE_moveBackwardRight+0x70>)
 80066ea:	2001      	movs	r0, #1
 80066ec:	f000 fa40 	bl	8006b70 <LOG_log>

  DRIVE_isStarted = true;
 80066f0:	4b16      	ldr	r3, [pc, #88]	; (800674c <DRIVE_moveBackwardRight+0x74>)
 80066f2:	2201      	movs	r2, #1
 80066f4:	701a      	strb	r2, [r3, #0]

  DRIVE_clampSpeed(&l_speed);
 80066f6:	f107 030c 	add.w	r3, r7, #12
 80066fa:	4618      	mov	r0, r3
 80066fc:	f7ff feae 	bl	800645c <DRIVE_clampSpeed>

  MOTOR_setDirection(&DRIVE_motorFrontRight, MOTOR_DIRECTION_BACKWARD);
 8006700:	2101      	movs	r1, #1
 8006702:	4813      	ldr	r0, [pc, #76]	; (8006750 <DRIVE_moveBackwardRight+0x78>)
 8006704:	f000 faa8 	bl	8006c58 <MOTOR_setDirection>
  MOTOR_setDirection(&DRIVE_motorRearLeft  , MOTOR_DIRECTION_BACKWARD);
 8006708:	2101      	movs	r1, #1
 800670a:	4812      	ldr	r0, [pc, #72]	; (8006754 <DRIVE_moveBackwardRight+0x7c>)
 800670c:	f000 faa4 	bl	8006c58 <MOTOR_setDirection>

  if (DRIVE_isDebugOn == true)
 8006710:	4b11      	ldr	r3, [pc, #68]	; (8006758 <DRIVE_moveBackwardRight+0x80>)
 8006712:	781b      	ldrb	r3, [r3, #0]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d112      	bne.n	800673e <DRIVE_moveBackwardRight+0x66>
  {
    ; /* Nothing to do */
  }
  else
  {
    MOTOR_setSpeed(&DRIVE_motorFrontRight, l_speed);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	4619      	mov	r1, r3
 800671c:	480c      	ldr	r0, [pc, #48]	; (8006750 <DRIVE_moveBackwardRight+0x78>)
 800671e:	f000 fad7 	bl	8006cd0 <MOTOR_setSpeed>
    MOTOR_setSpeed(&DRIVE_motorFrontLeft ,       0);
 8006722:	2100      	movs	r1, #0
 8006724:	480d      	ldr	r0, [pc, #52]	; (800675c <DRIVE_moveBackwardRight+0x84>)
 8006726:	f000 fad3 	bl	8006cd0 <MOTOR_setSpeed>
    MOTOR_setSpeed(&DRIVE_motorRearRight ,       0);
 800672a:	2100      	movs	r1, #0
 800672c:	480c      	ldr	r0, [pc, #48]	; (8006760 <DRIVE_moveBackwardRight+0x88>)
 800672e:	f000 facf 	bl	8006cd0 <MOTOR_setSpeed>
    MOTOR_setSpeed(&DRIVE_motorRearLeft  , l_speed);
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	4619      	mov	r1, r3
 8006736:	4807      	ldr	r0, [pc, #28]	; (8006754 <DRIVE_moveBackwardRight+0x7c>)
 8006738:	f000 faca 	bl	8006cd0 <MOTOR_setSpeed>
  }

  return;
 800673c:	bf00      	nop
 800673e:	bf00      	nop
}
 8006740:	3710      	adds	r7, #16
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}
 8006746:	bf00      	nop
 8006748:	0800834c 	.word	0x0800834c
 800674c:	200000d5 	.word	0x200000d5
 8006750:	200000d8 	.word	0x200000d8
 8006754:	20000130 	.word	0x20000130
 8006758:	200000d4 	.word	0x200000d4
 800675c:	20000104 	.word	0x20000104
 8006760:	2000015c 	.word	0x2000015c

08006764 <DRIVE_moveBackwardLeft>:

static void DRIVE_moveBackwardLeft (uint32_t p_speed)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b084      	sub	sp, #16
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	60fb      	str	r3, [r7, #12]

  LOG_info("Moving backward-left @%u", l_speed);
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	461a      	mov	r2, r3
 8006774:	4917      	ldr	r1, [pc, #92]	; (80067d4 <DRIVE_moveBackwardLeft+0x70>)
 8006776:	2001      	movs	r0, #1
 8006778:	f000 f9fa 	bl	8006b70 <LOG_log>

  DRIVE_isStarted = true;
 800677c:	4b16      	ldr	r3, [pc, #88]	; (80067d8 <DRIVE_moveBackwardLeft+0x74>)
 800677e:	2201      	movs	r2, #1
 8006780:	701a      	strb	r2, [r3, #0]

  DRIVE_clampSpeed(&l_speed);
 8006782:	f107 030c 	add.w	r3, r7, #12
 8006786:	4618      	mov	r0, r3
 8006788:	f7ff fe68 	bl	800645c <DRIVE_clampSpeed>

  MOTOR_setDirection(&DRIVE_motorFrontLeft, MOTOR_DIRECTION_BACKWARD);
 800678c:	2101      	movs	r1, #1
 800678e:	4813      	ldr	r0, [pc, #76]	; (80067dc <DRIVE_moveBackwardLeft+0x78>)
 8006790:	f000 fa62 	bl	8006c58 <MOTOR_setDirection>
  MOTOR_setDirection(&DRIVE_motorRearRight, MOTOR_DIRECTION_BACKWARD);
 8006794:	2101      	movs	r1, #1
 8006796:	4812      	ldr	r0, [pc, #72]	; (80067e0 <DRIVE_moveBackwardLeft+0x7c>)
 8006798:	f000 fa5e 	bl	8006c58 <MOTOR_setDirection>

  if (DRIVE_isDebugOn == true)
 800679c:	4b11      	ldr	r3, [pc, #68]	; (80067e4 <DRIVE_moveBackwardLeft+0x80>)
 800679e:	781b      	ldrb	r3, [r3, #0]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d112      	bne.n	80067ca <DRIVE_moveBackwardLeft+0x66>
  {
    ; /* Nothing to do */
  }
  else
  {
    MOTOR_setSpeed(&DRIVE_motorFrontRight,       0);
 80067a4:	2100      	movs	r1, #0
 80067a6:	4810      	ldr	r0, [pc, #64]	; (80067e8 <DRIVE_moveBackwardLeft+0x84>)
 80067a8:	f000 fa92 	bl	8006cd0 <MOTOR_setSpeed>
    MOTOR_setSpeed(&DRIVE_motorFrontLeft , l_speed);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	4619      	mov	r1, r3
 80067b0:	480a      	ldr	r0, [pc, #40]	; (80067dc <DRIVE_moveBackwardLeft+0x78>)
 80067b2:	f000 fa8d 	bl	8006cd0 <MOTOR_setSpeed>
    MOTOR_setSpeed(&DRIVE_motorRearRight , l_speed);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	4619      	mov	r1, r3
 80067ba:	4809      	ldr	r0, [pc, #36]	; (80067e0 <DRIVE_moveBackwardLeft+0x7c>)
 80067bc:	f000 fa88 	bl	8006cd0 <MOTOR_setSpeed>
    MOTOR_setSpeed(&DRIVE_motorRearLeft  ,       0);
 80067c0:	2100      	movs	r1, #0
 80067c2:	480a      	ldr	r0, [pc, #40]	; (80067ec <DRIVE_moveBackwardLeft+0x88>)
 80067c4:	f000 fa84 	bl	8006cd0 <MOTOR_setSpeed>
  }

  return;
 80067c8:	bf00      	nop
 80067ca:	bf00      	nop
}
 80067cc:	3710      	adds	r7, #16
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}
 80067d2:	bf00      	nop
 80067d4:	08008368 	.word	0x08008368
 80067d8:	200000d5 	.word	0x200000d5
 80067dc:	20000104 	.word	0x20000104
 80067e0:	2000015c 	.word	0x2000015c
 80067e4:	200000d4 	.word	0x200000d4
 80067e8:	200000d8 	.word	0x200000d8
 80067ec:	20000130 	.word	0x20000130

080067f0 <DRIVE_turnLeft>:

static void DRIVE_turnLeft(uint32_t p_speed)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b084      	sub	sp, #16
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	60fb      	str	r3, [r7, #12]

  LOG_info("Turning left @%u", l_speed);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	461a      	mov	r2, r3
 8006800:	491c      	ldr	r1, [pc, #112]	; (8006874 <DRIVE_turnLeft+0x84>)
 8006802:	2001      	movs	r0, #1
 8006804:	f000 f9b4 	bl	8006b70 <LOG_log>

  DRIVE_isStarted = true;
 8006808:	4b1b      	ldr	r3, [pc, #108]	; (8006878 <DRIVE_turnLeft+0x88>)
 800680a:	2201      	movs	r2, #1
 800680c:	701a      	strb	r2, [r3, #0]

  DRIVE_clampSpeed(&l_speed);
 800680e:	f107 030c 	add.w	r3, r7, #12
 8006812:	4618      	mov	r0, r3
 8006814:	f7ff fe22 	bl	800645c <DRIVE_clampSpeed>

  MOTOR_setDirection(&DRIVE_motorFrontRight, MOTOR_DIRECTION_FORWARD );
 8006818:	2100      	movs	r1, #0
 800681a:	4818      	ldr	r0, [pc, #96]	; (800687c <DRIVE_turnLeft+0x8c>)
 800681c:	f000 fa1c 	bl	8006c58 <MOTOR_setDirection>
  MOTOR_setDirection(&DRIVE_motorFrontLeft , MOTOR_DIRECTION_BACKWARD);
 8006820:	2101      	movs	r1, #1
 8006822:	4817      	ldr	r0, [pc, #92]	; (8006880 <DRIVE_turnLeft+0x90>)
 8006824:	f000 fa18 	bl	8006c58 <MOTOR_setDirection>
  MOTOR_setDirection(&DRIVE_motorRearRight , MOTOR_DIRECTION_FORWARD );
 8006828:	2100      	movs	r1, #0
 800682a:	4816      	ldr	r0, [pc, #88]	; (8006884 <DRIVE_turnLeft+0x94>)
 800682c:	f000 fa14 	bl	8006c58 <MOTOR_setDirection>
  MOTOR_setDirection(&DRIVE_motorRearLeft  , MOTOR_DIRECTION_BACKWARD);
 8006830:	2101      	movs	r1, #1
 8006832:	4815      	ldr	r0, [pc, #84]	; (8006888 <DRIVE_turnLeft+0x98>)
 8006834:	f000 fa10 	bl	8006c58 <MOTOR_setDirection>

  if (DRIVE_isDebugOn == true)
 8006838:	4b14      	ldr	r3, [pc, #80]	; (800688c <DRIVE_turnLeft+0x9c>)
 800683a:	781b      	ldrb	r3, [r3, #0]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d114      	bne.n	800686a <DRIVE_turnLeft+0x7a>
  {
    ; /* Nothing to do */
  }
  else
  {
    MOTOR_setSpeed(&DRIVE_motorFrontRight, l_speed);
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	4619      	mov	r1, r3
 8006844:	480d      	ldr	r0, [pc, #52]	; (800687c <DRIVE_turnLeft+0x8c>)
 8006846:	f000 fa43 	bl	8006cd0 <MOTOR_setSpeed>
    MOTOR_setSpeed(&DRIVE_motorFrontLeft , l_speed);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	4619      	mov	r1, r3
 800684e:	480c      	ldr	r0, [pc, #48]	; (8006880 <DRIVE_turnLeft+0x90>)
 8006850:	f000 fa3e 	bl	8006cd0 <MOTOR_setSpeed>
    MOTOR_setSpeed(&DRIVE_motorRearRight , l_speed);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	4619      	mov	r1, r3
 8006858:	480a      	ldr	r0, [pc, #40]	; (8006884 <DRIVE_turnLeft+0x94>)
 800685a:	f000 fa39 	bl	8006cd0 <MOTOR_setSpeed>
    MOTOR_setSpeed(&DRIVE_motorRearLeft  , l_speed);
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	4619      	mov	r1, r3
 8006862:	4809      	ldr	r0, [pc, #36]	; (8006888 <DRIVE_turnLeft+0x98>)
 8006864:	f000 fa34 	bl	8006cd0 <MOTOR_setSpeed>
  }

  return;
 8006868:	bf00      	nop
 800686a:	bf00      	nop
}
 800686c:	3710      	adds	r7, #16
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}
 8006872:	bf00      	nop
 8006874:	08008384 	.word	0x08008384
 8006878:	200000d5 	.word	0x200000d5
 800687c:	200000d8 	.word	0x200000d8
 8006880:	20000104 	.word	0x20000104
 8006884:	2000015c 	.word	0x2000015c
 8006888:	20000130 	.word	0x20000130
 800688c:	200000d4 	.word	0x200000d4

08006890 <DRIVE_turnRight>:

static void DRIVE_turnRight(uint32_t p_speed)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b084      	sub	sp, #16
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	60fb      	str	r3, [r7, #12]

  LOG_info("Turning right @%u", l_speed);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	461a      	mov	r2, r3
 80068a0:	491c      	ldr	r1, [pc, #112]	; (8006914 <DRIVE_turnRight+0x84>)
 80068a2:	2001      	movs	r0, #1
 80068a4:	f000 f964 	bl	8006b70 <LOG_log>

  DRIVE_isStarted = true;
 80068a8:	4b1b      	ldr	r3, [pc, #108]	; (8006918 <DRIVE_turnRight+0x88>)
 80068aa:	2201      	movs	r2, #1
 80068ac:	701a      	strb	r2, [r3, #0]

  DRIVE_clampSpeed(&l_speed);
 80068ae:	f107 030c 	add.w	r3, r7, #12
 80068b2:	4618      	mov	r0, r3
 80068b4:	f7ff fdd2 	bl	800645c <DRIVE_clampSpeed>

  MOTOR_setDirection(&DRIVE_motorFrontRight, MOTOR_DIRECTION_BACKWARD);
 80068b8:	2101      	movs	r1, #1
 80068ba:	4818      	ldr	r0, [pc, #96]	; (800691c <DRIVE_turnRight+0x8c>)
 80068bc:	f000 f9cc 	bl	8006c58 <MOTOR_setDirection>
  MOTOR_setDirection(&DRIVE_motorFrontLeft , MOTOR_DIRECTION_FORWARD );
 80068c0:	2100      	movs	r1, #0
 80068c2:	4817      	ldr	r0, [pc, #92]	; (8006920 <DRIVE_turnRight+0x90>)
 80068c4:	f000 f9c8 	bl	8006c58 <MOTOR_setDirection>
  MOTOR_setDirection(&DRIVE_motorRearRight , MOTOR_DIRECTION_BACKWARD);
 80068c8:	2101      	movs	r1, #1
 80068ca:	4816      	ldr	r0, [pc, #88]	; (8006924 <DRIVE_turnRight+0x94>)
 80068cc:	f000 f9c4 	bl	8006c58 <MOTOR_setDirection>
  MOTOR_setDirection(&DRIVE_motorRearLeft  , MOTOR_DIRECTION_FORWARD );
 80068d0:	2100      	movs	r1, #0
 80068d2:	4815      	ldr	r0, [pc, #84]	; (8006928 <DRIVE_turnRight+0x98>)
 80068d4:	f000 f9c0 	bl	8006c58 <MOTOR_setDirection>

  if (DRIVE_isDebugOn == true)
 80068d8:	4b14      	ldr	r3, [pc, #80]	; (800692c <DRIVE_turnRight+0x9c>)
 80068da:	781b      	ldrb	r3, [r3, #0]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d114      	bne.n	800690a <DRIVE_turnRight+0x7a>
  {
    ; /* Nothing to do */
  }
  else
  {
    MOTOR_setSpeed(&DRIVE_motorFrontRight, l_speed);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	4619      	mov	r1, r3
 80068e4:	480d      	ldr	r0, [pc, #52]	; (800691c <DRIVE_turnRight+0x8c>)
 80068e6:	f000 f9f3 	bl	8006cd0 <MOTOR_setSpeed>
    MOTOR_setSpeed(&DRIVE_motorFrontLeft , l_speed);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	4619      	mov	r1, r3
 80068ee:	480c      	ldr	r0, [pc, #48]	; (8006920 <DRIVE_turnRight+0x90>)
 80068f0:	f000 f9ee 	bl	8006cd0 <MOTOR_setSpeed>
    MOTOR_setSpeed(&DRIVE_motorRearRight , l_speed);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	4619      	mov	r1, r3
 80068f8:	480a      	ldr	r0, [pc, #40]	; (8006924 <DRIVE_turnRight+0x94>)
 80068fa:	f000 f9e9 	bl	8006cd0 <MOTOR_setSpeed>
    MOTOR_setSpeed(&DRIVE_motorRearLeft  , l_speed);
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	4619      	mov	r1, r3
 8006902:	4809      	ldr	r0, [pc, #36]	; (8006928 <DRIVE_turnRight+0x98>)
 8006904:	f000 f9e4 	bl	8006cd0 <MOTOR_setSpeed>
  }

  return;
 8006908:	bf00      	nop
 800690a:	bf00      	nop
}
 800690c:	3710      	adds	r7, #16
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}
 8006912:	bf00      	nop
 8006914:	08008398 	.word	0x08008398
 8006918:	200000d5 	.word	0x200000d5
 800691c:	200000d8 	.word	0x200000d8
 8006920:	20000104 	.word	0x20000104
 8006924:	2000015c 	.word	0x2000015c
 8006928:	20000130 	.word	0x20000130
 800692c:	200000d4 	.word	0x200000d4

08006930 <DRIVE_translateLeft>:

static void DRIVE_translateLeft(uint32_t p_speed)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b084      	sub	sp, #16
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	60fb      	str	r3, [r7, #12]

  LOG_info("Translating left @%u", l_speed);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	461a      	mov	r2, r3
 8006940:	491c      	ldr	r1, [pc, #112]	; (80069b4 <DRIVE_translateLeft+0x84>)
 8006942:	2001      	movs	r0, #1
 8006944:	f000 f914 	bl	8006b70 <LOG_log>

  DRIVE_isStarted = true;
 8006948:	4b1b      	ldr	r3, [pc, #108]	; (80069b8 <DRIVE_translateLeft+0x88>)
 800694a:	2201      	movs	r2, #1
 800694c:	701a      	strb	r2, [r3, #0]

  DRIVE_clampSpeed(&l_speed);
 800694e:	f107 030c 	add.w	r3, r7, #12
 8006952:	4618      	mov	r0, r3
 8006954:	f7ff fd82 	bl	800645c <DRIVE_clampSpeed>

  MOTOR_setDirection(&DRIVE_motorFrontRight, MOTOR_DIRECTION_FORWARD );
 8006958:	2100      	movs	r1, #0
 800695a:	4818      	ldr	r0, [pc, #96]	; (80069bc <DRIVE_translateLeft+0x8c>)
 800695c:	f000 f97c 	bl	8006c58 <MOTOR_setDirection>
  MOTOR_setDirection(&DRIVE_motorFrontLeft , MOTOR_DIRECTION_BACKWARD);
 8006960:	2101      	movs	r1, #1
 8006962:	4817      	ldr	r0, [pc, #92]	; (80069c0 <DRIVE_translateLeft+0x90>)
 8006964:	f000 f978 	bl	8006c58 <MOTOR_setDirection>
  MOTOR_setDirection(&DRIVE_motorRearRight , MOTOR_DIRECTION_BACKWARD);
 8006968:	2101      	movs	r1, #1
 800696a:	4816      	ldr	r0, [pc, #88]	; (80069c4 <DRIVE_translateLeft+0x94>)
 800696c:	f000 f974 	bl	8006c58 <MOTOR_setDirection>
  MOTOR_setDirection(&DRIVE_motorRearLeft  , MOTOR_DIRECTION_FORWARD );
 8006970:	2100      	movs	r1, #0
 8006972:	4815      	ldr	r0, [pc, #84]	; (80069c8 <DRIVE_translateLeft+0x98>)
 8006974:	f000 f970 	bl	8006c58 <MOTOR_setDirection>

  if (DRIVE_isDebugOn == true)
 8006978:	4b14      	ldr	r3, [pc, #80]	; (80069cc <DRIVE_translateLeft+0x9c>)
 800697a:	781b      	ldrb	r3, [r3, #0]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d114      	bne.n	80069aa <DRIVE_translateLeft+0x7a>
  {
    ; /* Nothing to do */
  }
  else
  {
    MOTOR_setSpeed(&DRIVE_motorFrontRight, l_speed);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	4619      	mov	r1, r3
 8006984:	480d      	ldr	r0, [pc, #52]	; (80069bc <DRIVE_translateLeft+0x8c>)
 8006986:	f000 f9a3 	bl	8006cd0 <MOTOR_setSpeed>
    MOTOR_setSpeed(&DRIVE_motorFrontLeft , l_speed);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	4619      	mov	r1, r3
 800698e:	480c      	ldr	r0, [pc, #48]	; (80069c0 <DRIVE_translateLeft+0x90>)
 8006990:	f000 f99e 	bl	8006cd0 <MOTOR_setSpeed>
    MOTOR_setSpeed(&DRIVE_motorRearRight , l_speed);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	4619      	mov	r1, r3
 8006998:	480a      	ldr	r0, [pc, #40]	; (80069c4 <DRIVE_translateLeft+0x94>)
 800699a:	f000 f999 	bl	8006cd0 <MOTOR_setSpeed>
    MOTOR_setSpeed(&DRIVE_motorRearLeft  , l_speed);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	4619      	mov	r1, r3
 80069a2:	4809      	ldr	r0, [pc, #36]	; (80069c8 <DRIVE_translateLeft+0x98>)
 80069a4:	f000 f994 	bl	8006cd0 <MOTOR_setSpeed>
  }

  return;
 80069a8:	bf00      	nop
 80069aa:	bf00      	nop
}
 80069ac:	3710      	adds	r7, #16
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}
 80069b2:	bf00      	nop
 80069b4:	080083ac 	.word	0x080083ac
 80069b8:	200000d5 	.word	0x200000d5
 80069bc:	200000d8 	.word	0x200000d8
 80069c0:	20000104 	.word	0x20000104
 80069c4:	2000015c 	.word	0x2000015c
 80069c8:	20000130 	.word	0x20000130
 80069cc:	200000d4 	.word	0x200000d4

080069d0 <DRIVE_translateRight>:

static void DRIVE_translateRight(uint32_t p_speed)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b084      	sub	sp, #16
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	60fb      	str	r3, [r7, #12]

  LOG_info("Translating right @%u", l_speed);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	461a      	mov	r2, r3
 80069e0:	491c      	ldr	r1, [pc, #112]	; (8006a54 <DRIVE_translateRight+0x84>)
 80069e2:	2001      	movs	r0, #1
 80069e4:	f000 f8c4 	bl	8006b70 <LOG_log>

  DRIVE_isStarted = true;
 80069e8:	4b1b      	ldr	r3, [pc, #108]	; (8006a58 <DRIVE_translateRight+0x88>)
 80069ea:	2201      	movs	r2, #1
 80069ec:	701a      	strb	r2, [r3, #0]

  DRIVE_clampSpeed(&l_speed);
 80069ee:	f107 030c 	add.w	r3, r7, #12
 80069f2:	4618      	mov	r0, r3
 80069f4:	f7ff fd32 	bl	800645c <DRIVE_clampSpeed>

  MOTOR_setDirection(&DRIVE_motorFrontRight, MOTOR_DIRECTION_BACKWARD);
 80069f8:	2101      	movs	r1, #1
 80069fa:	4818      	ldr	r0, [pc, #96]	; (8006a5c <DRIVE_translateRight+0x8c>)
 80069fc:	f000 f92c 	bl	8006c58 <MOTOR_setDirection>
  MOTOR_setDirection(&DRIVE_motorFrontLeft , MOTOR_DIRECTION_FORWARD );
 8006a00:	2100      	movs	r1, #0
 8006a02:	4817      	ldr	r0, [pc, #92]	; (8006a60 <DRIVE_translateRight+0x90>)
 8006a04:	f000 f928 	bl	8006c58 <MOTOR_setDirection>
  MOTOR_setDirection(&DRIVE_motorRearRight , MOTOR_DIRECTION_FORWARD );
 8006a08:	2100      	movs	r1, #0
 8006a0a:	4816      	ldr	r0, [pc, #88]	; (8006a64 <DRIVE_translateRight+0x94>)
 8006a0c:	f000 f924 	bl	8006c58 <MOTOR_setDirection>
  MOTOR_setDirection(&DRIVE_motorRearLeft  , MOTOR_DIRECTION_BACKWARD);
 8006a10:	2101      	movs	r1, #1
 8006a12:	4815      	ldr	r0, [pc, #84]	; (8006a68 <DRIVE_translateRight+0x98>)
 8006a14:	f000 f920 	bl	8006c58 <MOTOR_setDirection>

  if (DRIVE_isDebugOn == true)
 8006a18:	4b14      	ldr	r3, [pc, #80]	; (8006a6c <DRIVE_translateRight+0x9c>)
 8006a1a:	781b      	ldrb	r3, [r3, #0]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d114      	bne.n	8006a4a <DRIVE_translateRight+0x7a>
  {
    ; /* Nothing to do */
  }
  else
  {
    MOTOR_setSpeed(&DRIVE_motorFrontRight, l_speed);
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	4619      	mov	r1, r3
 8006a24:	480d      	ldr	r0, [pc, #52]	; (8006a5c <DRIVE_translateRight+0x8c>)
 8006a26:	f000 f953 	bl	8006cd0 <MOTOR_setSpeed>
    MOTOR_setSpeed(&DRIVE_motorFrontLeft , l_speed);
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	4619      	mov	r1, r3
 8006a2e:	480c      	ldr	r0, [pc, #48]	; (8006a60 <DRIVE_translateRight+0x90>)
 8006a30:	f000 f94e 	bl	8006cd0 <MOTOR_setSpeed>
    MOTOR_setSpeed(&DRIVE_motorRearRight , l_speed);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	4619      	mov	r1, r3
 8006a38:	480a      	ldr	r0, [pc, #40]	; (8006a64 <DRIVE_translateRight+0x94>)
 8006a3a:	f000 f949 	bl	8006cd0 <MOTOR_setSpeed>
    MOTOR_setSpeed(&DRIVE_motorRearLeft  , l_speed);
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	4619      	mov	r1, r3
 8006a42:	4809      	ldr	r0, [pc, #36]	; (8006a68 <DRIVE_translateRight+0x98>)
 8006a44:	f000 f944 	bl	8006cd0 <MOTOR_setSpeed>
  }

  return;
 8006a48:	bf00      	nop
 8006a4a:	bf00      	nop
}
 8006a4c:	3710      	adds	r7, #16
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}
 8006a52:	bf00      	nop
 8006a54:	080083c4 	.word	0x080083c4
 8006a58:	200000d5 	.word	0x200000d5
 8006a5c:	200000d8 	.word	0x200000d8
 8006a60:	20000104 	.word	0x20000104
 8006a64:	2000015c 	.word	0x2000015c
 8006a68:	20000130 	.word	0x20000130
 8006a6c:	200000d4 	.word	0x200000d4

08006a70 <LED_setMode>:
#include "log.h"

static T_LED_MODE LED_mode = LED_MODE_BLINK_SLOW;

void LED_setMode(T_LED_MODE p_mode)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b082      	sub	sp, #8
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	4603      	mov	r3, r0
 8006a78:	71fb      	strb	r3, [r7, #7]
  LOG_info("Setting LED mode to %u", p_mode);
 8006a7a:	79fb      	ldrb	r3, [r7, #7]
 8006a7c:	461a      	mov	r2, r3
 8006a7e:	4905      	ldr	r1, [pc, #20]	; (8006a94 <LED_setMode+0x24>)
 8006a80:	2001      	movs	r0, #1
 8006a82:	f000 f875 	bl	8006b70 <LOG_log>

  LED_mode = p_mode;
 8006a86:	4a04      	ldr	r2, [pc, #16]	; (8006a98 <LED_setMode+0x28>)
 8006a88:	79fb      	ldrb	r3, [r7, #7]
 8006a8a:	7013      	strb	r3, [r2, #0]

  return;
 8006a8c:	bf00      	nop
}
 8006a8e:	3708      	adds	r7, #8
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}
 8006a94:	080083dc 	.word	0x080083dc
 8006a98:	20000020 	.word	0x20000020

08006a9c <LED_getMode>:

T_LED_MODE LED_getMode(void)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	af00      	add	r7, sp, #0
  return LED_mode;
 8006aa0:	4b02      	ldr	r3, [pc, #8]	; (8006aac <LED_getMode+0x10>)
 8006aa2:	781b      	ldrb	r3, [r3, #0]
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bc80      	pop	{r7}
 8006aaa:	4770      	bx	lr
 8006aac:	20000020 	.word	0x20000020

08006ab0 <LED_update>:

void LED_update(void)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	af00      	add	r7, sp, #0
  static uint32_t l_slowBlinkCounter = 0;

  // LOG_debug("Updating LED");

  switch (LED_mode)
 8006ab4:	4b1c      	ldr	r3, [pc, #112]	; (8006b28 <LED_update+0x78>)
 8006ab6:	781b      	ldrb	r3, [r3, #0]
 8006ab8:	2b03      	cmp	r3, #3
 8006aba:	d830      	bhi.n	8006b1e <LED_update+0x6e>
 8006abc:	a201      	add	r2, pc, #4	; (adr r2, 8006ac4 <LED_update+0x14>)
 8006abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ac2:	bf00      	nop
 8006ac4:	08006ad5 	.word	0x08006ad5
 8006ac8:	08006ae3 	.word	0x08006ae3
 8006acc:	08006af1 	.word	0x08006af1
 8006ad0:	08006b13 	.word	0x08006b13
  {
    case LED_MODE_FORCED_OFF:
      HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_SET);
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006ada:	4814      	ldr	r0, [pc, #80]	; (8006b2c <LED_update+0x7c>)
 8006adc:	f7fb fdc2 	bl	8002664 <HAL_GPIO_WritePin>
      break;
 8006ae0:	e020      	b.n	8006b24 <LED_update+0x74>

    case LED_MODE_FORCED_ON:
      HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006ae8:	4810      	ldr	r0, [pc, #64]	; (8006b2c <LED_update+0x7c>)
 8006aea:	f7fb fdbb 	bl	8002664 <HAL_GPIO_WritePin>
      break;
 8006aee:	e019      	b.n	8006b24 <LED_update+0x74>

    case LED_MODE_BLINK_SLOW:
      l_slowBlinkCounter++;
 8006af0:	4b0f      	ldr	r3, [pc, #60]	; (8006b30 <LED_update+0x80>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	3301      	adds	r3, #1
 8006af6:	4a0e      	ldr	r2, [pc, #56]	; (8006b30 <LED_update+0x80>)
 8006af8:	6013      	str	r3, [r2, #0]
      if (l_slowBlinkCounter % 4 == 0)
 8006afa:	4b0d      	ldr	r3, [pc, #52]	; (8006b30 <LED_update+0x80>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f003 0303 	and.w	r3, r3, #3
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d10d      	bne.n	8006b22 <LED_update+0x72>
      {
        HAL_GPIO_TogglePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
 8006b06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006b0a:	4808      	ldr	r0, [pc, #32]	; (8006b2c <LED_update+0x7c>)
 8006b0c:	f7fb fdc2 	bl	8002694 <HAL_GPIO_TogglePin>
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 8006b10:	e007      	b.n	8006b22 <LED_update+0x72>

    case LED_MODE_BLINK_FAST:
      HAL_GPIO_TogglePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
 8006b12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006b16:	4805      	ldr	r0, [pc, #20]	; (8006b2c <LED_update+0x7c>)
 8006b18:	f7fb fdbc 	bl	8002694 <HAL_GPIO_TogglePin>
      break;
 8006b1c:	e002      	b.n	8006b24 <LED_update+0x74>

    default:
      ; /* Nothing to do */
      break;
 8006b1e:	bf00      	nop
 8006b20:	e000      	b.n	8006b24 <LED_update+0x74>
      break;
 8006b22:	bf00      	nop
  }

  return;
 8006b24:	bf00      	nop
}
 8006b26:	bd80      	pop	{r7, pc}
 8006b28:	20000020 	.word	0x20000020
 8006b2c:	40011000 	.word	0x40011000
 8006b30:	20000188 	.word	0x20000188

08006b34 <LOG_init>:
{
  "DEBUG", "INFO", "WARN", "ERROR"
};

void LOG_init(RTC_HandleTypeDef *p_rctHandle)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b083      	sub	sp, #12
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  LOG_rtcHandle = p_rctHandle;
 8006b3c:	4a03      	ldr	r2, [pc, #12]	; (8006b4c <LOG_init+0x18>)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6013      	str	r3, [r2, #0]

  return;
 8006b42:	bf00      	nop
}
 8006b44:	370c      	adds	r7, #12
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bc80      	pop	{r7}
 8006b4a:	4770      	bx	lr
 8006b4c:	20000190 	.word	0x20000190

08006b50 <LOG_setLevel>:

void LOG_setLevel(T_LOG_LEVEL p_level)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b083      	sub	sp, #12
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	4603      	mov	r3, r0
 8006b58:	71fb      	strb	r3, [r7, #7]
  LOG_level = p_level;
 8006b5a:	79fb      	ldrb	r3, [r7, #7]
 8006b5c:	4a03      	ldr	r2, [pc, #12]	; (8006b6c <LOG_setLevel+0x1c>)
 8006b5e:	6013      	str	r3, [r2, #0]

  return;
 8006b60:	bf00      	nop
}
 8006b62:	370c      	adds	r7, #12
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bc80      	pop	{r7}
 8006b68:	4770      	bx	lr
 8006b6a:	bf00      	nop
 8006b6c:	2000018c 	.word	0x2000018c

08006b70 <LOG_log>:

void LOG_log(T_LOG_LEVEL p_level, const char *p_format, ...)
{
 8006b70:	b40e      	push	{r1, r2, r3}
 8006b72:	b580      	push	{r7, lr}
 8006b74:	b089      	sub	sp, #36	; 0x24
 8006b76:	af02      	add	r7, sp, #8
 8006b78:	4603      	mov	r3, r0
 8006b7a:	71fb      	strb	r3, [r7, #7]
  va_list         l_argumentsList;
  RTC_TimeTypeDef l_time;
  RTC_DateTypeDef l_date;

  if (p_level >= LOG_level)
 8006b7c:	79fa      	ldrb	r2, [r7, #7]
 8006b7e:	4b1a      	ldr	r3, [pc, #104]	; (8006be8 <LOG_log+0x78>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	429a      	cmp	r2, r3
 8006b84:	d328      	bcc.n	8006bd8 <LOG_log+0x68>
  {
    HAL_RTC_GetTime(LOG_rtcHandle, &l_time, RTC_FORMAT_BCD);
 8006b86:	4b19      	ldr	r3, [pc, #100]	; (8006bec <LOG_log+0x7c>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f107 0110 	add.w	r1, r7, #16
 8006b8e:	2201      	movs	r2, #1
 8006b90:	4618      	mov	r0, r3
 8006b92:	f7fc fc89 	bl	80034a8 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(LOG_rtcHandle, &l_date, RTC_FORMAT_BCD);
 8006b96:	4b15      	ldr	r3, [pc, #84]	; (8006bec <LOG_log+0x7c>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f107 010c 	add.w	r1, r7, #12
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	f7fc fe0f 	bl	80037c4 <HAL_RTC_GetDate>

    va_start(l_argumentsList, p_format);
 8006ba6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006baa:	617b      	str	r3, [r7, #20]

    (void)printf("%-5s - %02x:%02x:%02x - ", LOG_levelStrings[p_level], l_time.Hours, l_time.Minutes, l_time.Seconds);
 8006bac:	79fb      	ldrb	r3, [r7, #7]
 8006bae:	4a10      	ldr	r2, [pc, #64]	; (8006bf0 <LOG_log+0x80>)
 8006bb0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006bb4:	7c3b      	ldrb	r3, [r7, #16]
 8006bb6:	461a      	mov	r2, r3
 8006bb8:	7c7b      	ldrb	r3, [r7, #17]
 8006bba:	4618      	mov	r0, r3
 8006bbc:	7cbb      	ldrb	r3, [r7, #18]
 8006bbe:	9300      	str	r3, [sp, #0]
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	480c      	ldr	r0, [pc, #48]	; (8006bf4 <LOG_log+0x84>)
 8006bc4:	f000 f954 	bl	8006e70 <iprintf>
    (void)vprintf(p_format, l_argumentsList);
 8006bc8:	6979      	ldr	r1, [r7, #20]
 8006bca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006bcc:	f000 f9f2 	bl	8006fb4 <viprintf>
    (void)printf("\r\n");
 8006bd0:	4809      	ldr	r0, [pc, #36]	; (8006bf8 <LOG_log+0x88>)
 8006bd2:	f000 f9d3 	bl	8006f7c <puts>
  else
  {
    ; /* Nothing to do */
  }

  return;
 8006bd6:	bf00      	nop
 8006bd8:	bf00      	nop
}
 8006bda:	371c      	adds	r7, #28
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006be2:	b003      	add	sp, #12
 8006be4:	4770      	bx	lr
 8006be6:	bf00      	nop
 8006be8:	2000018c 	.word	0x2000018c
 8006bec:	20000190 	.word	0x20000190
 8006bf0:	20000024 	.word	0x20000024
 8006bf4:	08008414 	.word	0x08008414
 8006bf8:	08008430 	.word	0x08008430

08006bfc <MASTER_CONTROL_receiveData>:
#include "stm32f1xx_hal.h"

static uint8_t MASTER_CONTROL_rxBuffer[12] = {0};

void MASTER_CONTROL_receiveData(UART_HandleTypeDef *p_huart)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b082      	sub	sp, #8
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(p_huart, MASTER_CONTROL_rxBuffer, 1);
 8006c04:	2201      	movs	r2, #1
 8006c06:	4904      	ldr	r1, [pc, #16]	; (8006c18 <MASTER_CONTROL_receiveData+0x1c>)
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f7fe fafd 	bl	8005208 <HAL_UART_Receive_IT>

  return;
 8006c0e:	bf00      	nop
}
 8006c10:	3708      	adds	r7, #8
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}
 8006c16:	bf00      	nop
 8006c18:	20000194 	.word	0x20000194

08006c1c <MOTOR_init>:

#include "stm32f1xx_hal.h"
#include "log.h"

void MOTOR_init(T_MOTOR_Handle *p_handle, char *p_name)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b082      	sub	sp, #8
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
 8006c24:	6039      	str	r1, [r7, #0]
  LOG_info("Initializing Motor module for %s", p_name);
 8006c26:	683a      	ldr	r2, [r7, #0]
 8006c28:	490a      	ldr	r1, [pc, #40]	; (8006c54 <MOTOR_init+0x38>)
 8006c2a:	2001      	movs	r0, #1
 8006c2c:	f7ff ffa0 	bl	8006b70 <LOG_log>

  (void)strncpy((char *)p_handle->name, p_name, MOTOR_NAME_MAX_LENGTH);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	220c      	movs	r2, #12
 8006c34:	6839      	ldr	r1, [r7, #0]
 8006c36:	4618      	mov	r0, r3
 8006c38:	f000 f9a8 	bl	8006f8c <strncpy>

  MOTOR_setSpeed(p_handle, 0);
 8006c3c:	2100      	movs	r1, #0
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f000 f846 	bl	8006cd0 <MOTOR_setSpeed>
  MOTOR_stop    (p_handle   );
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f000 f891 	bl	8006d6c <MOTOR_stop>

  return;
 8006c4a:	bf00      	nop
}
 8006c4c:	3708      	adds	r7, #8
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}
 8006c52:	bf00      	nop
 8006c54:	08008434 	.word	0x08008434

08006c58 <MOTOR_setDirection>:

void MOTOR_setDirection(T_MOTOR_Handle *p_handle, uint32_t p_direction)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b082      	sub	sp, #8
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	6039      	str	r1, [r7, #0]
  LOG_debug("Setting  %s motor direction to %u", p_handle->name, p_direction);
 8006c62:	687a      	ldr	r2, [r7, #4]
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	4919      	ldr	r1, [pc, #100]	; (8006ccc <MOTOR_setDirection+0x74>)
 8006c68:	2000      	movs	r0, #0
 8006c6a:	f7ff ff81 	bl	8006b70 <LOG_log>

  if (p_direction == MOTOR_DIRECTION_FORWARD)
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d112      	bne.n	8006c9a <MOTOR_setDirection+0x42>
  {
    HAL_GPIO_WritePin(p_handle->dirPin1Port, p_handle->dirPin1, GPIO_PIN_RESET);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	68d8      	ldr	r0, [r3, #12]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	695b      	ldr	r3, [r3, #20]
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	2200      	movs	r2, #0
 8006c80:	4619      	mov	r1, r3
 8006c82:	f7fb fcef 	bl	8002664 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(p_handle->dirPin2Port, p_handle->dirPin2, GPIO_PIN_SET  );
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6918      	ldr	r0, [r3, #16]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	699b      	ldr	r3, [r3, #24]
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	2201      	movs	r2, #1
 8006c92:	4619      	mov	r1, r3
 8006c94:	f7fb fce6 	bl	8002664 <HAL_GPIO_WritePin>
 8006c98:	e011      	b.n	8006cbe <MOTOR_setDirection+0x66>
  }
  else
  {
    HAL_GPIO_WritePin(p_handle->dirPin1Port, p_handle->dirPin1, GPIO_PIN_SET  );
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	68d8      	ldr	r0, [r3, #12]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	695b      	ldr	r3, [r3, #20]
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	2201      	movs	r2, #1
 8006ca6:	4619      	mov	r1, r3
 8006ca8:	f7fb fcdc 	bl	8002664 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(p_handle->dirPin2Port, p_handle->dirPin2, GPIO_PIN_RESET);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6918      	ldr	r0, [r3, #16]
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	699b      	ldr	r3, [r3, #24]
 8006cb4:	b29b      	uxth	r3, r3
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	4619      	mov	r1, r3
 8006cba:	f7fb fcd3 	bl	8002664 <HAL_GPIO_WritePin>
  }

  p_handle->direction =p_direction;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	683a      	ldr	r2, [r7, #0]
 8006cc2:	61da      	str	r2, [r3, #28]

  return;
 8006cc4:	bf00      	nop
}
 8006cc6:	3708      	adds	r7, #8
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}
 8006ccc:	08008458 	.word	0x08008458

08006cd0 <MOTOR_setSpeed>:

void MOTOR_setSpeed(T_MOTOR_Handle *p_handle, uint32_t p_speed)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b082      	sub	sp, #8
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
 8006cd8:	6039      	str	r1, [r7, #0]
  LOG_debug("Setting  %s motor p_speed to %u", p_handle->name, p_speed);
 8006cda:	687a      	ldr	r2, [r7, #4]
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	4917      	ldr	r1, [pc, #92]	; (8006d3c <MOTOR_setSpeed+0x6c>)
 8006ce0:	2000      	movs	r0, #0
 8006ce2:	f7ff ff45 	bl	8006b70 <LOG_log>

  __HAL_TIM_SET_COMPARE(p_handle->pwmTimerHandle, p_handle->pwmChannel, p_speed);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d105      	bne.n	8006cfa <MOTOR_setSpeed+0x2a>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	683a      	ldr	r2, [r7, #0]
 8006cf6:	635a      	str	r2, [r3, #52]	; 0x34
 8006cf8:	e018      	b.n	8006d2c <MOTOR_setSpeed+0x5c>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cfe:	2b04      	cmp	r3, #4
 8006d00:	d105      	bne.n	8006d0e <MOTOR_setSpeed+0x3e>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d06:	681a      	ldr	r2, [r3, #0]
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	6393      	str	r3, [r2, #56]	; 0x38
 8006d0c:	e00e      	b.n	8006d2c <MOTOR_setSpeed+0x5c>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d12:	2b08      	cmp	r3, #8
 8006d14:	d105      	bne.n	8006d22 <MOTOR_setSpeed+0x52>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d1a:	681a      	ldr	r2, [r3, #0]
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	63d3      	str	r3, [r2, #60]	; 0x3c
 8006d20:	e004      	b.n	8006d2c <MOTOR_setSpeed+0x5c>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d26:	681a      	ldr	r2, [r3, #0]
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	6413      	str	r3, [r2, #64]	; 0x40

  p_handle->speed = p_speed;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	683a      	ldr	r2, [r7, #0]
 8006d30:	621a      	str	r2, [r3, #32]

  return;
 8006d32:	bf00      	nop
}
 8006d34:	3708      	adds	r7, #8
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}
 8006d3a:	bf00      	nop
 8006d3c:	0800847c 	.word	0x0800847c

08006d40 <MOTOR_start>:

void MOTOR_start(T_MOTOR_Handle *p_handle)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b082      	sub	sp, #8
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  LOG_info("Starting %s motor", p_handle->name);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	461a      	mov	r2, r3
 8006d4c:	4906      	ldr	r1, [pc, #24]	; (8006d68 <MOTOR_start+0x28>)
 8006d4e:	2001      	movs	r0, #1
 8006d50:	f7ff ff0e 	bl	8006b70 <LOG_log>

  MOTOR_setDirection(p_handle, p_handle->direction);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	69db      	ldr	r3, [r3, #28]
 8006d58:	4619      	mov	r1, r3
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f7ff ff7c 	bl	8006c58 <MOTOR_setDirection>

  return;
 8006d60:	bf00      	nop
}
 8006d62:	3708      	adds	r7, #8
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}
 8006d68:	0800849c 	.word	0x0800849c

08006d6c <MOTOR_stop>:

void MOTOR_stop(T_MOTOR_Handle *p_handle)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b082      	sub	sp, #8
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  LOG_info("Stopping %s", p_handle->name);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	461a      	mov	r2, r3
 8006d78:	490c      	ldr	r1, [pc, #48]	; (8006dac <MOTOR_stop+0x40>)
 8006d7a:	2001      	movs	r0, #1
 8006d7c:	f7ff fef8 	bl	8006b70 <LOG_log>

  HAL_GPIO_WritePin(p_handle->dirPin1Port, p_handle->dirPin1, GPIO_PIN_RESET);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	68d8      	ldr	r0, [r3, #12]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	695b      	ldr	r3, [r3, #20]
 8006d88:	b29b      	uxth	r3, r3
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	4619      	mov	r1, r3
 8006d8e:	f7fb fc69 	bl	8002664 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(p_handle->dirPin2Port, p_handle->dirPin2, GPIO_PIN_RESET);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6918      	ldr	r0, [r3, #16]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	699b      	ldr	r3, [r3, #24]
 8006d9a:	b29b      	uxth	r3, r3
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	4619      	mov	r1, r3
 8006da0:	f7fb fc60 	bl	8002664 <HAL_GPIO_WritePin>

  return;
 8006da4:	bf00      	nop
}
 8006da6:	3708      	adds	r7, #8
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}
 8006dac:	080084b0 	.word	0x080084b0

08006db0 <UTILS_init>:
#include "log.h"

static TIM_HandleTypeDef *UTILS_delayTimerHandle;

void UTILS_init(TIM_HandleTypeDef *p_delayTimerHandle)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b082      	sub	sp, #8
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  LOG_info("Initializing utilities");
 8006db8:	4905      	ldr	r1, [pc, #20]	; (8006dd0 <UTILS_init+0x20>)
 8006dba:	2001      	movs	r0, #1
 8006dbc:	f7ff fed8 	bl	8006b70 <LOG_log>

  UTILS_delayTimerHandle = p_delayTimerHandle;
 8006dc0:	4a04      	ldr	r2, [pc, #16]	; (8006dd4 <UTILS_init+0x24>)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6013      	str	r3, [r2, #0]

  return;
 8006dc6:	bf00      	nop
}
 8006dc8:	3708      	adds	r7, #8
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}
 8006dce:	bf00      	nop
 8006dd0:	080084bc 	.word	0x080084bc
 8006dd4:	200001a0 	.word	0x200001a0

08006dd8 <UTILS_delayUs>:

void UTILS_delayUs(uint16_t p_delay)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b083      	sub	sp, #12
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	4603      	mov	r3, r0
 8006de0:	80fb      	strh	r3, [r7, #6]
  /* Reset the micro-seconds counter */
  __HAL_TIM_SET_COUNTER(UTILS_delayTimerHandle,0);
 8006de2:	4b09      	ldr	r3, [pc, #36]	; (8006e08 <UTILS_delayUs+0x30>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	2200      	movs	r2, #0
 8006dea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Wait for the counter to reach the input micro-seconds number */
  while (__HAL_TIM_GET_COUNTER(UTILS_delayTimerHandle) < p_delay)
 8006dec:	bf00      	nop
 8006dee:	4b06      	ldr	r3, [pc, #24]	; (8006e08 <UTILS_delayUs+0x30>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006df6:	88fb      	ldrh	r3, [r7, #6]
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	d3f8      	bcc.n	8006dee <UTILS_delayUs+0x16>
  {
    ; /* Nothing to do */
  }

  return;
 8006dfc:	bf00      	nop
}
 8006dfe:	370c      	adds	r7, #12
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bc80      	pop	{r7}
 8006e04:	4770      	bx	lr
 8006e06:	bf00      	nop
 8006e08:	200001a0 	.word	0x200001a0

08006e0c <__errno>:
 8006e0c:	4b01      	ldr	r3, [pc, #4]	; (8006e14 <__errno+0x8>)
 8006e0e:	6818      	ldr	r0, [r3, #0]
 8006e10:	4770      	bx	lr
 8006e12:	bf00      	nop
 8006e14:	20000034 	.word	0x20000034

08006e18 <__libc_init_array>:
 8006e18:	b570      	push	{r4, r5, r6, lr}
 8006e1a:	2600      	movs	r6, #0
 8006e1c:	4d0c      	ldr	r5, [pc, #48]	; (8006e50 <__libc_init_array+0x38>)
 8006e1e:	4c0d      	ldr	r4, [pc, #52]	; (8006e54 <__libc_init_array+0x3c>)
 8006e20:	1b64      	subs	r4, r4, r5
 8006e22:	10a4      	asrs	r4, r4, #2
 8006e24:	42a6      	cmp	r6, r4
 8006e26:	d109      	bne.n	8006e3c <__libc_init_array+0x24>
 8006e28:	f001 f822 	bl	8007e70 <_init>
 8006e2c:	2600      	movs	r6, #0
 8006e2e:	4d0a      	ldr	r5, [pc, #40]	; (8006e58 <__libc_init_array+0x40>)
 8006e30:	4c0a      	ldr	r4, [pc, #40]	; (8006e5c <__libc_init_array+0x44>)
 8006e32:	1b64      	subs	r4, r4, r5
 8006e34:	10a4      	asrs	r4, r4, #2
 8006e36:	42a6      	cmp	r6, r4
 8006e38:	d105      	bne.n	8006e46 <__libc_init_array+0x2e>
 8006e3a:	bd70      	pop	{r4, r5, r6, pc}
 8006e3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e40:	4798      	blx	r3
 8006e42:	3601      	adds	r6, #1
 8006e44:	e7ee      	b.n	8006e24 <__libc_init_array+0xc>
 8006e46:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e4a:	4798      	blx	r3
 8006e4c:	3601      	adds	r6, #1
 8006e4e:	e7f2      	b.n	8006e36 <__libc_init_array+0x1e>
 8006e50:	08008584 	.word	0x08008584
 8006e54:	08008584 	.word	0x08008584
 8006e58:	08008584 	.word	0x08008584
 8006e5c:	08008588 	.word	0x08008588

08006e60 <memset>:
 8006e60:	4603      	mov	r3, r0
 8006e62:	4402      	add	r2, r0
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d100      	bne.n	8006e6a <memset+0xa>
 8006e68:	4770      	bx	lr
 8006e6a:	f803 1b01 	strb.w	r1, [r3], #1
 8006e6e:	e7f9      	b.n	8006e64 <memset+0x4>

08006e70 <iprintf>:
 8006e70:	b40f      	push	{r0, r1, r2, r3}
 8006e72:	4b0a      	ldr	r3, [pc, #40]	; (8006e9c <iprintf+0x2c>)
 8006e74:	b513      	push	{r0, r1, r4, lr}
 8006e76:	681c      	ldr	r4, [r3, #0]
 8006e78:	b124      	cbz	r4, 8006e84 <iprintf+0x14>
 8006e7a:	69a3      	ldr	r3, [r4, #24]
 8006e7c:	b913      	cbnz	r3, 8006e84 <iprintf+0x14>
 8006e7e:	4620      	mov	r0, r4
 8006e80:	f000 fa88 	bl	8007394 <__sinit>
 8006e84:	ab05      	add	r3, sp, #20
 8006e86:	4620      	mov	r0, r4
 8006e88:	9a04      	ldr	r2, [sp, #16]
 8006e8a:	68a1      	ldr	r1, [r4, #8]
 8006e8c:	9301      	str	r3, [sp, #4]
 8006e8e:	f000 fc53 	bl	8007738 <_vfiprintf_r>
 8006e92:	b002      	add	sp, #8
 8006e94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e98:	b004      	add	sp, #16
 8006e9a:	4770      	bx	lr
 8006e9c:	20000034 	.word	0x20000034

08006ea0 <_puts_r>:
 8006ea0:	b570      	push	{r4, r5, r6, lr}
 8006ea2:	460e      	mov	r6, r1
 8006ea4:	4605      	mov	r5, r0
 8006ea6:	b118      	cbz	r0, 8006eb0 <_puts_r+0x10>
 8006ea8:	6983      	ldr	r3, [r0, #24]
 8006eaa:	b90b      	cbnz	r3, 8006eb0 <_puts_r+0x10>
 8006eac:	f000 fa72 	bl	8007394 <__sinit>
 8006eb0:	69ab      	ldr	r3, [r5, #24]
 8006eb2:	68ac      	ldr	r4, [r5, #8]
 8006eb4:	b913      	cbnz	r3, 8006ebc <_puts_r+0x1c>
 8006eb6:	4628      	mov	r0, r5
 8006eb8:	f000 fa6c 	bl	8007394 <__sinit>
 8006ebc:	4b2c      	ldr	r3, [pc, #176]	; (8006f70 <_puts_r+0xd0>)
 8006ebe:	429c      	cmp	r4, r3
 8006ec0:	d120      	bne.n	8006f04 <_puts_r+0x64>
 8006ec2:	686c      	ldr	r4, [r5, #4]
 8006ec4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ec6:	07db      	lsls	r3, r3, #31
 8006ec8:	d405      	bmi.n	8006ed6 <_puts_r+0x36>
 8006eca:	89a3      	ldrh	r3, [r4, #12]
 8006ecc:	0598      	lsls	r0, r3, #22
 8006ece:	d402      	bmi.n	8006ed6 <_puts_r+0x36>
 8006ed0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ed2:	f000 fafd 	bl	80074d0 <__retarget_lock_acquire_recursive>
 8006ed6:	89a3      	ldrh	r3, [r4, #12]
 8006ed8:	0719      	lsls	r1, r3, #28
 8006eda:	d51d      	bpl.n	8006f18 <_puts_r+0x78>
 8006edc:	6923      	ldr	r3, [r4, #16]
 8006ede:	b1db      	cbz	r3, 8006f18 <_puts_r+0x78>
 8006ee0:	3e01      	subs	r6, #1
 8006ee2:	68a3      	ldr	r3, [r4, #8]
 8006ee4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006ee8:	3b01      	subs	r3, #1
 8006eea:	60a3      	str	r3, [r4, #8]
 8006eec:	bb39      	cbnz	r1, 8006f3e <_puts_r+0x9e>
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	da38      	bge.n	8006f64 <_puts_r+0xc4>
 8006ef2:	4622      	mov	r2, r4
 8006ef4:	210a      	movs	r1, #10
 8006ef6:	4628      	mov	r0, r5
 8006ef8:	f000 f872 	bl	8006fe0 <__swbuf_r>
 8006efc:	3001      	adds	r0, #1
 8006efe:	d011      	beq.n	8006f24 <_puts_r+0x84>
 8006f00:	250a      	movs	r5, #10
 8006f02:	e011      	b.n	8006f28 <_puts_r+0x88>
 8006f04:	4b1b      	ldr	r3, [pc, #108]	; (8006f74 <_puts_r+0xd4>)
 8006f06:	429c      	cmp	r4, r3
 8006f08:	d101      	bne.n	8006f0e <_puts_r+0x6e>
 8006f0a:	68ac      	ldr	r4, [r5, #8]
 8006f0c:	e7da      	b.n	8006ec4 <_puts_r+0x24>
 8006f0e:	4b1a      	ldr	r3, [pc, #104]	; (8006f78 <_puts_r+0xd8>)
 8006f10:	429c      	cmp	r4, r3
 8006f12:	bf08      	it	eq
 8006f14:	68ec      	ldreq	r4, [r5, #12]
 8006f16:	e7d5      	b.n	8006ec4 <_puts_r+0x24>
 8006f18:	4621      	mov	r1, r4
 8006f1a:	4628      	mov	r0, r5
 8006f1c:	f000 f8b2 	bl	8007084 <__swsetup_r>
 8006f20:	2800      	cmp	r0, #0
 8006f22:	d0dd      	beq.n	8006ee0 <_puts_r+0x40>
 8006f24:	f04f 35ff 	mov.w	r5, #4294967295
 8006f28:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f2a:	07da      	lsls	r2, r3, #31
 8006f2c:	d405      	bmi.n	8006f3a <_puts_r+0x9a>
 8006f2e:	89a3      	ldrh	r3, [r4, #12]
 8006f30:	059b      	lsls	r3, r3, #22
 8006f32:	d402      	bmi.n	8006f3a <_puts_r+0x9a>
 8006f34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f36:	f000 facc 	bl	80074d2 <__retarget_lock_release_recursive>
 8006f3a:	4628      	mov	r0, r5
 8006f3c:	bd70      	pop	{r4, r5, r6, pc}
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	da04      	bge.n	8006f4c <_puts_r+0xac>
 8006f42:	69a2      	ldr	r2, [r4, #24]
 8006f44:	429a      	cmp	r2, r3
 8006f46:	dc06      	bgt.n	8006f56 <_puts_r+0xb6>
 8006f48:	290a      	cmp	r1, #10
 8006f4a:	d004      	beq.n	8006f56 <_puts_r+0xb6>
 8006f4c:	6823      	ldr	r3, [r4, #0]
 8006f4e:	1c5a      	adds	r2, r3, #1
 8006f50:	6022      	str	r2, [r4, #0]
 8006f52:	7019      	strb	r1, [r3, #0]
 8006f54:	e7c5      	b.n	8006ee2 <_puts_r+0x42>
 8006f56:	4622      	mov	r2, r4
 8006f58:	4628      	mov	r0, r5
 8006f5a:	f000 f841 	bl	8006fe0 <__swbuf_r>
 8006f5e:	3001      	adds	r0, #1
 8006f60:	d1bf      	bne.n	8006ee2 <_puts_r+0x42>
 8006f62:	e7df      	b.n	8006f24 <_puts_r+0x84>
 8006f64:	250a      	movs	r5, #10
 8006f66:	6823      	ldr	r3, [r4, #0]
 8006f68:	1c5a      	adds	r2, r3, #1
 8006f6a:	6022      	str	r2, [r4, #0]
 8006f6c:	701d      	strb	r5, [r3, #0]
 8006f6e:	e7db      	b.n	8006f28 <_puts_r+0x88>
 8006f70:	08008510 	.word	0x08008510
 8006f74:	08008530 	.word	0x08008530
 8006f78:	080084f0 	.word	0x080084f0

08006f7c <puts>:
 8006f7c:	4b02      	ldr	r3, [pc, #8]	; (8006f88 <puts+0xc>)
 8006f7e:	4601      	mov	r1, r0
 8006f80:	6818      	ldr	r0, [r3, #0]
 8006f82:	f7ff bf8d 	b.w	8006ea0 <_puts_r>
 8006f86:	bf00      	nop
 8006f88:	20000034 	.word	0x20000034

08006f8c <strncpy>:
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	b510      	push	{r4, lr}
 8006f90:	3901      	subs	r1, #1
 8006f92:	b132      	cbz	r2, 8006fa2 <strncpy+0x16>
 8006f94:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006f98:	3a01      	subs	r2, #1
 8006f9a:	f803 4b01 	strb.w	r4, [r3], #1
 8006f9e:	2c00      	cmp	r4, #0
 8006fa0:	d1f7      	bne.n	8006f92 <strncpy+0x6>
 8006fa2:	2100      	movs	r1, #0
 8006fa4:	441a      	add	r2, r3
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d100      	bne.n	8006fac <strncpy+0x20>
 8006faa:	bd10      	pop	{r4, pc}
 8006fac:	f803 1b01 	strb.w	r1, [r3], #1
 8006fb0:	e7f9      	b.n	8006fa6 <strncpy+0x1a>
	...

08006fb4 <viprintf>:
 8006fb4:	4b09      	ldr	r3, [pc, #36]	; (8006fdc <viprintf+0x28>)
 8006fb6:	b570      	push	{r4, r5, r6, lr}
 8006fb8:	681c      	ldr	r4, [r3, #0]
 8006fba:	4605      	mov	r5, r0
 8006fbc:	460e      	mov	r6, r1
 8006fbe:	b124      	cbz	r4, 8006fca <viprintf+0x16>
 8006fc0:	69a3      	ldr	r3, [r4, #24]
 8006fc2:	b913      	cbnz	r3, 8006fca <viprintf+0x16>
 8006fc4:	4620      	mov	r0, r4
 8006fc6:	f000 f9e5 	bl	8007394 <__sinit>
 8006fca:	4633      	mov	r3, r6
 8006fcc:	462a      	mov	r2, r5
 8006fce:	4620      	mov	r0, r4
 8006fd0:	68a1      	ldr	r1, [r4, #8]
 8006fd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006fd6:	f000 bbaf 	b.w	8007738 <_vfiprintf_r>
 8006fda:	bf00      	nop
 8006fdc:	20000034 	.word	0x20000034

08006fe0 <__swbuf_r>:
 8006fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fe2:	460e      	mov	r6, r1
 8006fe4:	4614      	mov	r4, r2
 8006fe6:	4605      	mov	r5, r0
 8006fe8:	b118      	cbz	r0, 8006ff2 <__swbuf_r+0x12>
 8006fea:	6983      	ldr	r3, [r0, #24]
 8006fec:	b90b      	cbnz	r3, 8006ff2 <__swbuf_r+0x12>
 8006fee:	f000 f9d1 	bl	8007394 <__sinit>
 8006ff2:	4b21      	ldr	r3, [pc, #132]	; (8007078 <__swbuf_r+0x98>)
 8006ff4:	429c      	cmp	r4, r3
 8006ff6:	d12b      	bne.n	8007050 <__swbuf_r+0x70>
 8006ff8:	686c      	ldr	r4, [r5, #4]
 8006ffa:	69a3      	ldr	r3, [r4, #24]
 8006ffc:	60a3      	str	r3, [r4, #8]
 8006ffe:	89a3      	ldrh	r3, [r4, #12]
 8007000:	071a      	lsls	r2, r3, #28
 8007002:	d52f      	bpl.n	8007064 <__swbuf_r+0x84>
 8007004:	6923      	ldr	r3, [r4, #16]
 8007006:	b36b      	cbz	r3, 8007064 <__swbuf_r+0x84>
 8007008:	6923      	ldr	r3, [r4, #16]
 800700a:	6820      	ldr	r0, [r4, #0]
 800700c:	b2f6      	uxtb	r6, r6
 800700e:	1ac0      	subs	r0, r0, r3
 8007010:	6963      	ldr	r3, [r4, #20]
 8007012:	4637      	mov	r7, r6
 8007014:	4283      	cmp	r3, r0
 8007016:	dc04      	bgt.n	8007022 <__swbuf_r+0x42>
 8007018:	4621      	mov	r1, r4
 800701a:	4628      	mov	r0, r5
 800701c:	f000 f926 	bl	800726c <_fflush_r>
 8007020:	bb30      	cbnz	r0, 8007070 <__swbuf_r+0x90>
 8007022:	68a3      	ldr	r3, [r4, #8]
 8007024:	3001      	adds	r0, #1
 8007026:	3b01      	subs	r3, #1
 8007028:	60a3      	str	r3, [r4, #8]
 800702a:	6823      	ldr	r3, [r4, #0]
 800702c:	1c5a      	adds	r2, r3, #1
 800702e:	6022      	str	r2, [r4, #0]
 8007030:	701e      	strb	r6, [r3, #0]
 8007032:	6963      	ldr	r3, [r4, #20]
 8007034:	4283      	cmp	r3, r0
 8007036:	d004      	beq.n	8007042 <__swbuf_r+0x62>
 8007038:	89a3      	ldrh	r3, [r4, #12]
 800703a:	07db      	lsls	r3, r3, #31
 800703c:	d506      	bpl.n	800704c <__swbuf_r+0x6c>
 800703e:	2e0a      	cmp	r6, #10
 8007040:	d104      	bne.n	800704c <__swbuf_r+0x6c>
 8007042:	4621      	mov	r1, r4
 8007044:	4628      	mov	r0, r5
 8007046:	f000 f911 	bl	800726c <_fflush_r>
 800704a:	b988      	cbnz	r0, 8007070 <__swbuf_r+0x90>
 800704c:	4638      	mov	r0, r7
 800704e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007050:	4b0a      	ldr	r3, [pc, #40]	; (800707c <__swbuf_r+0x9c>)
 8007052:	429c      	cmp	r4, r3
 8007054:	d101      	bne.n	800705a <__swbuf_r+0x7a>
 8007056:	68ac      	ldr	r4, [r5, #8]
 8007058:	e7cf      	b.n	8006ffa <__swbuf_r+0x1a>
 800705a:	4b09      	ldr	r3, [pc, #36]	; (8007080 <__swbuf_r+0xa0>)
 800705c:	429c      	cmp	r4, r3
 800705e:	bf08      	it	eq
 8007060:	68ec      	ldreq	r4, [r5, #12]
 8007062:	e7ca      	b.n	8006ffa <__swbuf_r+0x1a>
 8007064:	4621      	mov	r1, r4
 8007066:	4628      	mov	r0, r5
 8007068:	f000 f80c 	bl	8007084 <__swsetup_r>
 800706c:	2800      	cmp	r0, #0
 800706e:	d0cb      	beq.n	8007008 <__swbuf_r+0x28>
 8007070:	f04f 37ff 	mov.w	r7, #4294967295
 8007074:	e7ea      	b.n	800704c <__swbuf_r+0x6c>
 8007076:	bf00      	nop
 8007078:	08008510 	.word	0x08008510
 800707c:	08008530 	.word	0x08008530
 8007080:	080084f0 	.word	0x080084f0

08007084 <__swsetup_r>:
 8007084:	4b32      	ldr	r3, [pc, #200]	; (8007150 <__swsetup_r+0xcc>)
 8007086:	b570      	push	{r4, r5, r6, lr}
 8007088:	681d      	ldr	r5, [r3, #0]
 800708a:	4606      	mov	r6, r0
 800708c:	460c      	mov	r4, r1
 800708e:	b125      	cbz	r5, 800709a <__swsetup_r+0x16>
 8007090:	69ab      	ldr	r3, [r5, #24]
 8007092:	b913      	cbnz	r3, 800709a <__swsetup_r+0x16>
 8007094:	4628      	mov	r0, r5
 8007096:	f000 f97d 	bl	8007394 <__sinit>
 800709a:	4b2e      	ldr	r3, [pc, #184]	; (8007154 <__swsetup_r+0xd0>)
 800709c:	429c      	cmp	r4, r3
 800709e:	d10f      	bne.n	80070c0 <__swsetup_r+0x3c>
 80070a0:	686c      	ldr	r4, [r5, #4]
 80070a2:	89a3      	ldrh	r3, [r4, #12]
 80070a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80070a8:	0719      	lsls	r1, r3, #28
 80070aa:	d42c      	bmi.n	8007106 <__swsetup_r+0x82>
 80070ac:	06dd      	lsls	r5, r3, #27
 80070ae:	d411      	bmi.n	80070d4 <__swsetup_r+0x50>
 80070b0:	2309      	movs	r3, #9
 80070b2:	6033      	str	r3, [r6, #0]
 80070b4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80070b8:	f04f 30ff 	mov.w	r0, #4294967295
 80070bc:	81a3      	strh	r3, [r4, #12]
 80070be:	e03e      	b.n	800713e <__swsetup_r+0xba>
 80070c0:	4b25      	ldr	r3, [pc, #148]	; (8007158 <__swsetup_r+0xd4>)
 80070c2:	429c      	cmp	r4, r3
 80070c4:	d101      	bne.n	80070ca <__swsetup_r+0x46>
 80070c6:	68ac      	ldr	r4, [r5, #8]
 80070c8:	e7eb      	b.n	80070a2 <__swsetup_r+0x1e>
 80070ca:	4b24      	ldr	r3, [pc, #144]	; (800715c <__swsetup_r+0xd8>)
 80070cc:	429c      	cmp	r4, r3
 80070ce:	bf08      	it	eq
 80070d0:	68ec      	ldreq	r4, [r5, #12]
 80070d2:	e7e6      	b.n	80070a2 <__swsetup_r+0x1e>
 80070d4:	0758      	lsls	r0, r3, #29
 80070d6:	d512      	bpl.n	80070fe <__swsetup_r+0x7a>
 80070d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80070da:	b141      	cbz	r1, 80070ee <__swsetup_r+0x6a>
 80070dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80070e0:	4299      	cmp	r1, r3
 80070e2:	d002      	beq.n	80070ea <__swsetup_r+0x66>
 80070e4:	4630      	mov	r0, r6
 80070e6:	f000 fa59 	bl	800759c <_free_r>
 80070ea:	2300      	movs	r3, #0
 80070ec:	6363      	str	r3, [r4, #52]	; 0x34
 80070ee:	89a3      	ldrh	r3, [r4, #12]
 80070f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80070f4:	81a3      	strh	r3, [r4, #12]
 80070f6:	2300      	movs	r3, #0
 80070f8:	6063      	str	r3, [r4, #4]
 80070fa:	6923      	ldr	r3, [r4, #16]
 80070fc:	6023      	str	r3, [r4, #0]
 80070fe:	89a3      	ldrh	r3, [r4, #12]
 8007100:	f043 0308 	orr.w	r3, r3, #8
 8007104:	81a3      	strh	r3, [r4, #12]
 8007106:	6923      	ldr	r3, [r4, #16]
 8007108:	b94b      	cbnz	r3, 800711e <__swsetup_r+0x9a>
 800710a:	89a3      	ldrh	r3, [r4, #12]
 800710c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007110:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007114:	d003      	beq.n	800711e <__swsetup_r+0x9a>
 8007116:	4621      	mov	r1, r4
 8007118:	4630      	mov	r0, r6
 800711a:	f000 f9ff 	bl	800751c <__smakebuf_r>
 800711e:	89a0      	ldrh	r0, [r4, #12]
 8007120:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007124:	f010 0301 	ands.w	r3, r0, #1
 8007128:	d00a      	beq.n	8007140 <__swsetup_r+0xbc>
 800712a:	2300      	movs	r3, #0
 800712c:	60a3      	str	r3, [r4, #8]
 800712e:	6963      	ldr	r3, [r4, #20]
 8007130:	425b      	negs	r3, r3
 8007132:	61a3      	str	r3, [r4, #24]
 8007134:	6923      	ldr	r3, [r4, #16]
 8007136:	b943      	cbnz	r3, 800714a <__swsetup_r+0xc6>
 8007138:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800713c:	d1ba      	bne.n	80070b4 <__swsetup_r+0x30>
 800713e:	bd70      	pop	{r4, r5, r6, pc}
 8007140:	0781      	lsls	r1, r0, #30
 8007142:	bf58      	it	pl
 8007144:	6963      	ldrpl	r3, [r4, #20]
 8007146:	60a3      	str	r3, [r4, #8]
 8007148:	e7f4      	b.n	8007134 <__swsetup_r+0xb0>
 800714a:	2000      	movs	r0, #0
 800714c:	e7f7      	b.n	800713e <__swsetup_r+0xba>
 800714e:	bf00      	nop
 8007150:	20000034 	.word	0x20000034
 8007154:	08008510 	.word	0x08008510
 8007158:	08008530 	.word	0x08008530
 800715c:	080084f0 	.word	0x080084f0

08007160 <__sflush_r>:
 8007160:	898a      	ldrh	r2, [r1, #12]
 8007162:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007166:	4605      	mov	r5, r0
 8007168:	0710      	lsls	r0, r2, #28
 800716a:	460c      	mov	r4, r1
 800716c:	d458      	bmi.n	8007220 <__sflush_r+0xc0>
 800716e:	684b      	ldr	r3, [r1, #4]
 8007170:	2b00      	cmp	r3, #0
 8007172:	dc05      	bgt.n	8007180 <__sflush_r+0x20>
 8007174:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007176:	2b00      	cmp	r3, #0
 8007178:	dc02      	bgt.n	8007180 <__sflush_r+0x20>
 800717a:	2000      	movs	r0, #0
 800717c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007180:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007182:	2e00      	cmp	r6, #0
 8007184:	d0f9      	beq.n	800717a <__sflush_r+0x1a>
 8007186:	2300      	movs	r3, #0
 8007188:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800718c:	682f      	ldr	r7, [r5, #0]
 800718e:	602b      	str	r3, [r5, #0]
 8007190:	d032      	beq.n	80071f8 <__sflush_r+0x98>
 8007192:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007194:	89a3      	ldrh	r3, [r4, #12]
 8007196:	075a      	lsls	r2, r3, #29
 8007198:	d505      	bpl.n	80071a6 <__sflush_r+0x46>
 800719a:	6863      	ldr	r3, [r4, #4]
 800719c:	1ac0      	subs	r0, r0, r3
 800719e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80071a0:	b10b      	cbz	r3, 80071a6 <__sflush_r+0x46>
 80071a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80071a4:	1ac0      	subs	r0, r0, r3
 80071a6:	2300      	movs	r3, #0
 80071a8:	4602      	mov	r2, r0
 80071aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80071ac:	4628      	mov	r0, r5
 80071ae:	6a21      	ldr	r1, [r4, #32]
 80071b0:	47b0      	blx	r6
 80071b2:	1c43      	adds	r3, r0, #1
 80071b4:	89a3      	ldrh	r3, [r4, #12]
 80071b6:	d106      	bne.n	80071c6 <__sflush_r+0x66>
 80071b8:	6829      	ldr	r1, [r5, #0]
 80071ba:	291d      	cmp	r1, #29
 80071bc:	d82c      	bhi.n	8007218 <__sflush_r+0xb8>
 80071be:	4a2a      	ldr	r2, [pc, #168]	; (8007268 <__sflush_r+0x108>)
 80071c0:	40ca      	lsrs	r2, r1
 80071c2:	07d6      	lsls	r6, r2, #31
 80071c4:	d528      	bpl.n	8007218 <__sflush_r+0xb8>
 80071c6:	2200      	movs	r2, #0
 80071c8:	6062      	str	r2, [r4, #4]
 80071ca:	6922      	ldr	r2, [r4, #16]
 80071cc:	04d9      	lsls	r1, r3, #19
 80071ce:	6022      	str	r2, [r4, #0]
 80071d0:	d504      	bpl.n	80071dc <__sflush_r+0x7c>
 80071d2:	1c42      	adds	r2, r0, #1
 80071d4:	d101      	bne.n	80071da <__sflush_r+0x7a>
 80071d6:	682b      	ldr	r3, [r5, #0]
 80071d8:	b903      	cbnz	r3, 80071dc <__sflush_r+0x7c>
 80071da:	6560      	str	r0, [r4, #84]	; 0x54
 80071dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80071de:	602f      	str	r7, [r5, #0]
 80071e0:	2900      	cmp	r1, #0
 80071e2:	d0ca      	beq.n	800717a <__sflush_r+0x1a>
 80071e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80071e8:	4299      	cmp	r1, r3
 80071ea:	d002      	beq.n	80071f2 <__sflush_r+0x92>
 80071ec:	4628      	mov	r0, r5
 80071ee:	f000 f9d5 	bl	800759c <_free_r>
 80071f2:	2000      	movs	r0, #0
 80071f4:	6360      	str	r0, [r4, #52]	; 0x34
 80071f6:	e7c1      	b.n	800717c <__sflush_r+0x1c>
 80071f8:	6a21      	ldr	r1, [r4, #32]
 80071fa:	2301      	movs	r3, #1
 80071fc:	4628      	mov	r0, r5
 80071fe:	47b0      	blx	r6
 8007200:	1c41      	adds	r1, r0, #1
 8007202:	d1c7      	bne.n	8007194 <__sflush_r+0x34>
 8007204:	682b      	ldr	r3, [r5, #0]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d0c4      	beq.n	8007194 <__sflush_r+0x34>
 800720a:	2b1d      	cmp	r3, #29
 800720c:	d001      	beq.n	8007212 <__sflush_r+0xb2>
 800720e:	2b16      	cmp	r3, #22
 8007210:	d101      	bne.n	8007216 <__sflush_r+0xb6>
 8007212:	602f      	str	r7, [r5, #0]
 8007214:	e7b1      	b.n	800717a <__sflush_r+0x1a>
 8007216:	89a3      	ldrh	r3, [r4, #12]
 8007218:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800721c:	81a3      	strh	r3, [r4, #12]
 800721e:	e7ad      	b.n	800717c <__sflush_r+0x1c>
 8007220:	690f      	ldr	r7, [r1, #16]
 8007222:	2f00      	cmp	r7, #0
 8007224:	d0a9      	beq.n	800717a <__sflush_r+0x1a>
 8007226:	0793      	lsls	r3, r2, #30
 8007228:	bf18      	it	ne
 800722a:	2300      	movne	r3, #0
 800722c:	680e      	ldr	r6, [r1, #0]
 800722e:	bf08      	it	eq
 8007230:	694b      	ldreq	r3, [r1, #20]
 8007232:	eba6 0807 	sub.w	r8, r6, r7
 8007236:	600f      	str	r7, [r1, #0]
 8007238:	608b      	str	r3, [r1, #8]
 800723a:	f1b8 0f00 	cmp.w	r8, #0
 800723e:	dd9c      	ble.n	800717a <__sflush_r+0x1a>
 8007240:	4643      	mov	r3, r8
 8007242:	463a      	mov	r2, r7
 8007244:	4628      	mov	r0, r5
 8007246:	6a21      	ldr	r1, [r4, #32]
 8007248:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800724a:	47b0      	blx	r6
 800724c:	2800      	cmp	r0, #0
 800724e:	dc06      	bgt.n	800725e <__sflush_r+0xfe>
 8007250:	89a3      	ldrh	r3, [r4, #12]
 8007252:	f04f 30ff 	mov.w	r0, #4294967295
 8007256:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800725a:	81a3      	strh	r3, [r4, #12]
 800725c:	e78e      	b.n	800717c <__sflush_r+0x1c>
 800725e:	4407      	add	r7, r0
 8007260:	eba8 0800 	sub.w	r8, r8, r0
 8007264:	e7e9      	b.n	800723a <__sflush_r+0xda>
 8007266:	bf00      	nop
 8007268:	20400001 	.word	0x20400001

0800726c <_fflush_r>:
 800726c:	b538      	push	{r3, r4, r5, lr}
 800726e:	690b      	ldr	r3, [r1, #16]
 8007270:	4605      	mov	r5, r0
 8007272:	460c      	mov	r4, r1
 8007274:	b913      	cbnz	r3, 800727c <_fflush_r+0x10>
 8007276:	2500      	movs	r5, #0
 8007278:	4628      	mov	r0, r5
 800727a:	bd38      	pop	{r3, r4, r5, pc}
 800727c:	b118      	cbz	r0, 8007286 <_fflush_r+0x1a>
 800727e:	6983      	ldr	r3, [r0, #24]
 8007280:	b90b      	cbnz	r3, 8007286 <_fflush_r+0x1a>
 8007282:	f000 f887 	bl	8007394 <__sinit>
 8007286:	4b14      	ldr	r3, [pc, #80]	; (80072d8 <_fflush_r+0x6c>)
 8007288:	429c      	cmp	r4, r3
 800728a:	d11b      	bne.n	80072c4 <_fflush_r+0x58>
 800728c:	686c      	ldr	r4, [r5, #4]
 800728e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d0ef      	beq.n	8007276 <_fflush_r+0xa>
 8007296:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007298:	07d0      	lsls	r0, r2, #31
 800729a:	d404      	bmi.n	80072a6 <_fflush_r+0x3a>
 800729c:	0599      	lsls	r1, r3, #22
 800729e:	d402      	bmi.n	80072a6 <_fflush_r+0x3a>
 80072a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80072a2:	f000 f915 	bl	80074d0 <__retarget_lock_acquire_recursive>
 80072a6:	4628      	mov	r0, r5
 80072a8:	4621      	mov	r1, r4
 80072aa:	f7ff ff59 	bl	8007160 <__sflush_r>
 80072ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80072b0:	4605      	mov	r5, r0
 80072b2:	07da      	lsls	r2, r3, #31
 80072b4:	d4e0      	bmi.n	8007278 <_fflush_r+0xc>
 80072b6:	89a3      	ldrh	r3, [r4, #12]
 80072b8:	059b      	lsls	r3, r3, #22
 80072ba:	d4dd      	bmi.n	8007278 <_fflush_r+0xc>
 80072bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80072be:	f000 f908 	bl	80074d2 <__retarget_lock_release_recursive>
 80072c2:	e7d9      	b.n	8007278 <_fflush_r+0xc>
 80072c4:	4b05      	ldr	r3, [pc, #20]	; (80072dc <_fflush_r+0x70>)
 80072c6:	429c      	cmp	r4, r3
 80072c8:	d101      	bne.n	80072ce <_fflush_r+0x62>
 80072ca:	68ac      	ldr	r4, [r5, #8]
 80072cc:	e7df      	b.n	800728e <_fflush_r+0x22>
 80072ce:	4b04      	ldr	r3, [pc, #16]	; (80072e0 <_fflush_r+0x74>)
 80072d0:	429c      	cmp	r4, r3
 80072d2:	bf08      	it	eq
 80072d4:	68ec      	ldreq	r4, [r5, #12]
 80072d6:	e7da      	b.n	800728e <_fflush_r+0x22>
 80072d8:	08008510 	.word	0x08008510
 80072dc:	08008530 	.word	0x08008530
 80072e0:	080084f0 	.word	0x080084f0

080072e4 <std>:
 80072e4:	2300      	movs	r3, #0
 80072e6:	b510      	push	{r4, lr}
 80072e8:	4604      	mov	r4, r0
 80072ea:	e9c0 3300 	strd	r3, r3, [r0]
 80072ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80072f2:	6083      	str	r3, [r0, #8]
 80072f4:	8181      	strh	r1, [r0, #12]
 80072f6:	6643      	str	r3, [r0, #100]	; 0x64
 80072f8:	81c2      	strh	r2, [r0, #14]
 80072fa:	6183      	str	r3, [r0, #24]
 80072fc:	4619      	mov	r1, r3
 80072fe:	2208      	movs	r2, #8
 8007300:	305c      	adds	r0, #92	; 0x5c
 8007302:	f7ff fdad 	bl	8006e60 <memset>
 8007306:	4b05      	ldr	r3, [pc, #20]	; (800731c <std+0x38>)
 8007308:	6224      	str	r4, [r4, #32]
 800730a:	6263      	str	r3, [r4, #36]	; 0x24
 800730c:	4b04      	ldr	r3, [pc, #16]	; (8007320 <std+0x3c>)
 800730e:	62a3      	str	r3, [r4, #40]	; 0x28
 8007310:	4b04      	ldr	r3, [pc, #16]	; (8007324 <std+0x40>)
 8007312:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007314:	4b04      	ldr	r3, [pc, #16]	; (8007328 <std+0x44>)
 8007316:	6323      	str	r3, [r4, #48]	; 0x30
 8007318:	bd10      	pop	{r4, pc}
 800731a:	bf00      	nop
 800731c:	08007ce5 	.word	0x08007ce5
 8007320:	08007d07 	.word	0x08007d07
 8007324:	08007d3f 	.word	0x08007d3f
 8007328:	08007d63 	.word	0x08007d63

0800732c <_cleanup_r>:
 800732c:	4901      	ldr	r1, [pc, #4]	; (8007334 <_cleanup_r+0x8>)
 800732e:	f000 b8af 	b.w	8007490 <_fwalk_reent>
 8007332:	bf00      	nop
 8007334:	0800726d 	.word	0x0800726d

08007338 <__sfmoreglue>:
 8007338:	b570      	push	{r4, r5, r6, lr}
 800733a:	2568      	movs	r5, #104	; 0x68
 800733c:	1e4a      	subs	r2, r1, #1
 800733e:	4355      	muls	r5, r2
 8007340:	460e      	mov	r6, r1
 8007342:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007346:	f000 f975 	bl	8007634 <_malloc_r>
 800734a:	4604      	mov	r4, r0
 800734c:	b140      	cbz	r0, 8007360 <__sfmoreglue+0x28>
 800734e:	2100      	movs	r1, #0
 8007350:	e9c0 1600 	strd	r1, r6, [r0]
 8007354:	300c      	adds	r0, #12
 8007356:	60a0      	str	r0, [r4, #8]
 8007358:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800735c:	f7ff fd80 	bl	8006e60 <memset>
 8007360:	4620      	mov	r0, r4
 8007362:	bd70      	pop	{r4, r5, r6, pc}

08007364 <__sfp_lock_acquire>:
 8007364:	4801      	ldr	r0, [pc, #4]	; (800736c <__sfp_lock_acquire+0x8>)
 8007366:	f000 b8b3 	b.w	80074d0 <__retarget_lock_acquire_recursive>
 800736a:	bf00      	nop
 800736c:	20000500 	.word	0x20000500

08007370 <__sfp_lock_release>:
 8007370:	4801      	ldr	r0, [pc, #4]	; (8007378 <__sfp_lock_release+0x8>)
 8007372:	f000 b8ae 	b.w	80074d2 <__retarget_lock_release_recursive>
 8007376:	bf00      	nop
 8007378:	20000500 	.word	0x20000500

0800737c <__sinit_lock_acquire>:
 800737c:	4801      	ldr	r0, [pc, #4]	; (8007384 <__sinit_lock_acquire+0x8>)
 800737e:	f000 b8a7 	b.w	80074d0 <__retarget_lock_acquire_recursive>
 8007382:	bf00      	nop
 8007384:	200004fb 	.word	0x200004fb

08007388 <__sinit_lock_release>:
 8007388:	4801      	ldr	r0, [pc, #4]	; (8007390 <__sinit_lock_release+0x8>)
 800738a:	f000 b8a2 	b.w	80074d2 <__retarget_lock_release_recursive>
 800738e:	bf00      	nop
 8007390:	200004fb 	.word	0x200004fb

08007394 <__sinit>:
 8007394:	b510      	push	{r4, lr}
 8007396:	4604      	mov	r4, r0
 8007398:	f7ff fff0 	bl	800737c <__sinit_lock_acquire>
 800739c:	69a3      	ldr	r3, [r4, #24]
 800739e:	b11b      	cbz	r3, 80073a8 <__sinit+0x14>
 80073a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073a4:	f7ff bff0 	b.w	8007388 <__sinit_lock_release>
 80073a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80073ac:	6523      	str	r3, [r4, #80]	; 0x50
 80073ae:	4b13      	ldr	r3, [pc, #76]	; (80073fc <__sinit+0x68>)
 80073b0:	4a13      	ldr	r2, [pc, #76]	; (8007400 <__sinit+0x6c>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	62a2      	str	r2, [r4, #40]	; 0x28
 80073b6:	42a3      	cmp	r3, r4
 80073b8:	bf08      	it	eq
 80073ba:	2301      	moveq	r3, #1
 80073bc:	4620      	mov	r0, r4
 80073be:	bf08      	it	eq
 80073c0:	61a3      	streq	r3, [r4, #24]
 80073c2:	f000 f81f 	bl	8007404 <__sfp>
 80073c6:	6060      	str	r0, [r4, #4]
 80073c8:	4620      	mov	r0, r4
 80073ca:	f000 f81b 	bl	8007404 <__sfp>
 80073ce:	60a0      	str	r0, [r4, #8]
 80073d0:	4620      	mov	r0, r4
 80073d2:	f000 f817 	bl	8007404 <__sfp>
 80073d6:	2200      	movs	r2, #0
 80073d8:	2104      	movs	r1, #4
 80073da:	60e0      	str	r0, [r4, #12]
 80073dc:	6860      	ldr	r0, [r4, #4]
 80073de:	f7ff ff81 	bl	80072e4 <std>
 80073e2:	2201      	movs	r2, #1
 80073e4:	2109      	movs	r1, #9
 80073e6:	68a0      	ldr	r0, [r4, #8]
 80073e8:	f7ff ff7c 	bl	80072e4 <std>
 80073ec:	2202      	movs	r2, #2
 80073ee:	2112      	movs	r1, #18
 80073f0:	68e0      	ldr	r0, [r4, #12]
 80073f2:	f7ff ff77 	bl	80072e4 <std>
 80073f6:	2301      	movs	r3, #1
 80073f8:	61a3      	str	r3, [r4, #24]
 80073fa:	e7d1      	b.n	80073a0 <__sinit+0xc>
 80073fc:	080084ec 	.word	0x080084ec
 8007400:	0800732d 	.word	0x0800732d

08007404 <__sfp>:
 8007404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007406:	4607      	mov	r7, r0
 8007408:	f7ff ffac 	bl	8007364 <__sfp_lock_acquire>
 800740c:	4b1e      	ldr	r3, [pc, #120]	; (8007488 <__sfp+0x84>)
 800740e:	681e      	ldr	r6, [r3, #0]
 8007410:	69b3      	ldr	r3, [r6, #24]
 8007412:	b913      	cbnz	r3, 800741a <__sfp+0x16>
 8007414:	4630      	mov	r0, r6
 8007416:	f7ff ffbd 	bl	8007394 <__sinit>
 800741a:	3648      	adds	r6, #72	; 0x48
 800741c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007420:	3b01      	subs	r3, #1
 8007422:	d503      	bpl.n	800742c <__sfp+0x28>
 8007424:	6833      	ldr	r3, [r6, #0]
 8007426:	b30b      	cbz	r3, 800746c <__sfp+0x68>
 8007428:	6836      	ldr	r6, [r6, #0]
 800742a:	e7f7      	b.n	800741c <__sfp+0x18>
 800742c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007430:	b9d5      	cbnz	r5, 8007468 <__sfp+0x64>
 8007432:	4b16      	ldr	r3, [pc, #88]	; (800748c <__sfp+0x88>)
 8007434:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007438:	60e3      	str	r3, [r4, #12]
 800743a:	6665      	str	r5, [r4, #100]	; 0x64
 800743c:	f000 f847 	bl	80074ce <__retarget_lock_init_recursive>
 8007440:	f7ff ff96 	bl	8007370 <__sfp_lock_release>
 8007444:	2208      	movs	r2, #8
 8007446:	4629      	mov	r1, r5
 8007448:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800744c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007450:	6025      	str	r5, [r4, #0]
 8007452:	61a5      	str	r5, [r4, #24]
 8007454:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007458:	f7ff fd02 	bl	8006e60 <memset>
 800745c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007460:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007464:	4620      	mov	r0, r4
 8007466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007468:	3468      	adds	r4, #104	; 0x68
 800746a:	e7d9      	b.n	8007420 <__sfp+0x1c>
 800746c:	2104      	movs	r1, #4
 800746e:	4638      	mov	r0, r7
 8007470:	f7ff ff62 	bl	8007338 <__sfmoreglue>
 8007474:	4604      	mov	r4, r0
 8007476:	6030      	str	r0, [r6, #0]
 8007478:	2800      	cmp	r0, #0
 800747a:	d1d5      	bne.n	8007428 <__sfp+0x24>
 800747c:	f7ff ff78 	bl	8007370 <__sfp_lock_release>
 8007480:	230c      	movs	r3, #12
 8007482:	603b      	str	r3, [r7, #0]
 8007484:	e7ee      	b.n	8007464 <__sfp+0x60>
 8007486:	bf00      	nop
 8007488:	080084ec 	.word	0x080084ec
 800748c:	ffff0001 	.word	0xffff0001

08007490 <_fwalk_reent>:
 8007490:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007494:	4606      	mov	r6, r0
 8007496:	4688      	mov	r8, r1
 8007498:	2700      	movs	r7, #0
 800749a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800749e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80074a2:	f1b9 0901 	subs.w	r9, r9, #1
 80074a6:	d505      	bpl.n	80074b4 <_fwalk_reent+0x24>
 80074a8:	6824      	ldr	r4, [r4, #0]
 80074aa:	2c00      	cmp	r4, #0
 80074ac:	d1f7      	bne.n	800749e <_fwalk_reent+0xe>
 80074ae:	4638      	mov	r0, r7
 80074b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074b4:	89ab      	ldrh	r3, [r5, #12]
 80074b6:	2b01      	cmp	r3, #1
 80074b8:	d907      	bls.n	80074ca <_fwalk_reent+0x3a>
 80074ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80074be:	3301      	adds	r3, #1
 80074c0:	d003      	beq.n	80074ca <_fwalk_reent+0x3a>
 80074c2:	4629      	mov	r1, r5
 80074c4:	4630      	mov	r0, r6
 80074c6:	47c0      	blx	r8
 80074c8:	4307      	orrs	r7, r0
 80074ca:	3568      	adds	r5, #104	; 0x68
 80074cc:	e7e9      	b.n	80074a2 <_fwalk_reent+0x12>

080074ce <__retarget_lock_init_recursive>:
 80074ce:	4770      	bx	lr

080074d0 <__retarget_lock_acquire_recursive>:
 80074d0:	4770      	bx	lr

080074d2 <__retarget_lock_release_recursive>:
 80074d2:	4770      	bx	lr

080074d4 <__swhatbuf_r>:
 80074d4:	b570      	push	{r4, r5, r6, lr}
 80074d6:	460e      	mov	r6, r1
 80074d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074dc:	4614      	mov	r4, r2
 80074de:	2900      	cmp	r1, #0
 80074e0:	461d      	mov	r5, r3
 80074e2:	b096      	sub	sp, #88	; 0x58
 80074e4:	da07      	bge.n	80074f6 <__swhatbuf_r+0x22>
 80074e6:	2300      	movs	r3, #0
 80074e8:	602b      	str	r3, [r5, #0]
 80074ea:	89b3      	ldrh	r3, [r6, #12]
 80074ec:	061a      	lsls	r2, r3, #24
 80074ee:	d410      	bmi.n	8007512 <__swhatbuf_r+0x3e>
 80074f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80074f4:	e00e      	b.n	8007514 <__swhatbuf_r+0x40>
 80074f6:	466a      	mov	r2, sp
 80074f8:	f000 fc5a 	bl	8007db0 <_fstat_r>
 80074fc:	2800      	cmp	r0, #0
 80074fe:	dbf2      	blt.n	80074e6 <__swhatbuf_r+0x12>
 8007500:	9a01      	ldr	r2, [sp, #4]
 8007502:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007506:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800750a:	425a      	negs	r2, r3
 800750c:	415a      	adcs	r2, r3
 800750e:	602a      	str	r2, [r5, #0]
 8007510:	e7ee      	b.n	80074f0 <__swhatbuf_r+0x1c>
 8007512:	2340      	movs	r3, #64	; 0x40
 8007514:	2000      	movs	r0, #0
 8007516:	6023      	str	r3, [r4, #0]
 8007518:	b016      	add	sp, #88	; 0x58
 800751a:	bd70      	pop	{r4, r5, r6, pc}

0800751c <__smakebuf_r>:
 800751c:	898b      	ldrh	r3, [r1, #12]
 800751e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007520:	079d      	lsls	r5, r3, #30
 8007522:	4606      	mov	r6, r0
 8007524:	460c      	mov	r4, r1
 8007526:	d507      	bpl.n	8007538 <__smakebuf_r+0x1c>
 8007528:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800752c:	6023      	str	r3, [r4, #0]
 800752e:	6123      	str	r3, [r4, #16]
 8007530:	2301      	movs	r3, #1
 8007532:	6163      	str	r3, [r4, #20]
 8007534:	b002      	add	sp, #8
 8007536:	bd70      	pop	{r4, r5, r6, pc}
 8007538:	466a      	mov	r2, sp
 800753a:	ab01      	add	r3, sp, #4
 800753c:	f7ff ffca 	bl	80074d4 <__swhatbuf_r>
 8007540:	9900      	ldr	r1, [sp, #0]
 8007542:	4605      	mov	r5, r0
 8007544:	4630      	mov	r0, r6
 8007546:	f000 f875 	bl	8007634 <_malloc_r>
 800754a:	b948      	cbnz	r0, 8007560 <__smakebuf_r+0x44>
 800754c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007550:	059a      	lsls	r2, r3, #22
 8007552:	d4ef      	bmi.n	8007534 <__smakebuf_r+0x18>
 8007554:	f023 0303 	bic.w	r3, r3, #3
 8007558:	f043 0302 	orr.w	r3, r3, #2
 800755c:	81a3      	strh	r3, [r4, #12]
 800755e:	e7e3      	b.n	8007528 <__smakebuf_r+0xc>
 8007560:	4b0d      	ldr	r3, [pc, #52]	; (8007598 <__smakebuf_r+0x7c>)
 8007562:	62b3      	str	r3, [r6, #40]	; 0x28
 8007564:	89a3      	ldrh	r3, [r4, #12]
 8007566:	6020      	str	r0, [r4, #0]
 8007568:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800756c:	81a3      	strh	r3, [r4, #12]
 800756e:	9b00      	ldr	r3, [sp, #0]
 8007570:	6120      	str	r0, [r4, #16]
 8007572:	6163      	str	r3, [r4, #20]
 8007574:	9b01      	ldr	r3, [sp, #4]
 8007576:	b15b      	cbz	r3, 8007590 <__smakebuf_r+0x74>
 8007578:	4630      	mov	r0, r6
 800757a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800757e:	f000 fc29 	bl	8007dd4 <_isatty_r>
 8007582:	b128      	cbz	r0, 8007590 <__smakebuf_r+0x74>
 8007584:	89a3      	ldrh	r3, [r4, #12]
 8007586:	f023 0303 	bic.w	r3, r3, #3
 800758a:	f043 0301 	orr.w	r3, r3, #1
 800758e:	81a3      	strh	r3, [r4, #12]
 8007590:	89a0      	ldrh	r0, [r4, #12]
 8007592:	4305      	orrs	r5, r0
 8007594:	81a5      	strh	r5, [r4, #12]
 8007596:	e7cd      	b.n	8007534 <__smakebuf_r+0x18>
 8007598:	0800732d 	.word	0x0800732d

0800759c <_free_r>:
 800759c:	b538      	push	{r3, r4, r5, lr}
 800759e:	4605      	mov	r5, r0
 80075a0:	2900      	cmp	r1, #0
 80075a2:	d043      	beq.n	800762c <_free_r+0x90>
 80075a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075a8:	1f0c      	subs	r4, r1, #4
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	bfb8      	it	lt
 80075ae:	18e4      	addlt	r4, r4, r3
 80075b0:	f000 fc40 	bl	8007e34 <__malloc_lock>
 80075b4:	4a1e      	ldr	r2, [pc, #120]	; (8007630 <_free_r+0x94>)
 80075b6:	6813      	ldr	r3, [r2, #0]
 80075b8:	4610      	mov	r0, r2
 80075ba:	b933      	cbnz	r3, 80075ca <_free_r+0x2e>
 80075bc:	6063      	str	r3, [r4, #4]
 80075be:	6014      	str	r4, [r2, #0]
 80075c0:	4628      	mov	r0, r5
 80075c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80075c6:	f000 bc3b 	b.w	8007e40 <__malloc_unlock>
 80075ca:	42a3      	cmp	r3, r4
 80075cc:	d90a      	bls.n	80075e4 <_free_r+0x48>
 80075ce:	6821      	ldr	r1, [r4, #0]
 80075d0:	1862      	adds	r2, r4, r1
 80075d2:	4293      	cmp	r3, r2
 80075d4:	bf01      	itttt	eq
 80075d6:	681a      	ldreq	r2, [r3, #0]
 80075d8:	685b      	ldreq	r3, [r3, #4]
 80075da:	1852      	addeq	r2, r2, r1
 80075dc:	6022      	streq	r2, [r4, #0]
 80075de:	6063      	str	r3, [r4, #4]
 80075e0:	6004      	str	r4, [r0, #0]
 80075e2:	e7ed      	b.n	80075c0 <_free_r+0x24>
 80075e4:	461a      	mov	r2, r3
 80075e6:	685b      	ldr	r3, [r3, #4]
 80075e8:	b10b      	cbz	r3, 80075ee <_free_r+0x52>
 80075ea:	42a3      	cmp	r3, r4
 80075ec:	d9fa      	bls.n	80075e4 <_free_r+0x48>
 80075ee:	6811      	ldr	r1, [r2, #0]
 80075f0:	1850      	adds	r0, r2, r1
 80075f2:	42a0      	cmp	r0, r4
 80075f4:	d10b      	bne.n	800760e <_free_r+0x72>
 80075f6:	6820      	ldr	r0, [r4, #0]
 80075f8:	4401      	add	r1, r0
 80075fa:	1850      	adds	r0, r2, r1
 80075fc:	4283      	cmp	r3, r0
 80075fe:	6011      	str	r1, [r2, #0]
 8007600:	d1de      	bne.n	80075c0 <_free_r+0x24>
 8007602:	6818      	ldr	r0, [r3, #0]
 8007604:	685b      	ldr	r3, [r3, #4]
 8007606:	4401      	add	r1, r0
 8007608:	6011      	str	r1, [r2, #0]
 800760a:	6053      	str	r3, [r2, #4]
 800760c:	e7d8      	b.n	80075c0 <_free_r+0x24>
 800760e:	d902      	bls.n	8007616 <_free_r+0x7a>
 8007610:	230c      	movs	r3, #12
 8007612:	602b      	str	r3, [r5, #0]
 8007614:	e7d4      	b.n	80075c0 <_free_r+0x24>
 8007616:	6820      	ldr	r0, [r4, #0]
 8007618:	1821      	adds	r1, r4, r0
 800761a:	428b      	cmp	r3, r1
 800761c:	bf01      	itttt	eq
 800761e:	6819      	ldreq	r1, [r3, #0]
 8007620:	685b      	ldreq	r3, [r3, #4]
 8007622:	1809      	addeq	r1, r1, r0
 8007624:	6021      	streq	r1, [r4, #0]
 8007626:	6063      	str	r3, [r4, #4]
 8007628:	6054      	str	r4, [r2, #4]
 800762a:	e7c9      	b.n	80075c0 <_free_r+0x24>
 800762c:	bd38      	pop	{r3, r4, r5, pc}
 800762e:	bf00      	nop
 8007630:	200001a4 	.word	0x200001a4

08007634 <_malloc_r>:
 8007634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007636:	1ccd      	adds	r5, r1, #3
 8007638:	f025 0503 	bic.w	r5, r5, #3
 800763c:	3508      	adds	r5, #8
 800763e:	2d0c      	cmp	r5, #12
 8007640:	bf38      	it	cc
 8007642:	250c      	movcc	r5, #12
 8007644:	2d00      	cmp	r5, #0
 8007646:	4606      	mov	r6, r0
 8007648:	db01      	blt.n	800764e <_malloc_r+0x1a>
 800764a:	42a9      	cmp	r1, r5
 800764c:	d903      	bls.n	8007656 <_malloc_r+0x22>
 800764e:	230c      	movs	r3, #12
 8007650:	6033      	str	r3, [r6, #0]
 8007652:	2000      	movs	r0, #0
 8007654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007656:	f000 fbed 	bl	8007e34 <__malloc_lock>
 800765a:	4921      	ldr	r1, [pc, #132]	; (80076e0 <_malloc_r+0xac>)
 800765c:	680a      	ldr	r2, [r1, #0]
 800765e:	4614      	mov	r4, r2
 8007660:	b99c      	cbnz	r4, 800768a <_malloc_r+0x56>
 8007662:	4f20      	ldr	r7, [pc, #128]	; (80076e4 <_malloc_r+0xb0>)
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	b923      	cbnz	r3, 8007672 <_malloc_r+0x3e>
 8007668:	4621      	mov	r1, r4
 800766a:	4630      	mov	r0, r6
 800766c:	f000 fb2a 	bl	8007cc4 <_sbrk_r>
 8007670:	6038      	str	r0, [r7, #0]
 8007672:	4629      	mov	r1, r5
 8007674:	4630      	mov	r0, r6
 8007676:	f000 fb25 	bl	8007cc4 <_sbrk_r>
 800767a:	1c43      	adds	r3, r0, #1
 800767c:	d123      	bne.n	80076c6 <_malloc_r+0x92>
 800767e:	230c      	movs	r3, #12
 8007680:	4630      	mov	r0, r6
 8007682:	6033      	str	r3, [r6, #0]
 8007684:	f000 fbdc 	bl	8007e40 <__malloc_unlock>
 8007688:	e7e3      	b.n	8007652 <_malloc_r+0x1e>
 800768a:	6823      	ldr	r3, [r4, #0]
 800768c:	1b5b      	subs	r3, r3, r5
 800768e:	d417      	bmi.n	80076c0 <_malloc_r+0x8c>
 8007690:	2b0b      	cmp	r3, #11
 8007692:	d903      	bls.n	800769c <_malloc_r+0x68>
 8007694:	6023      	str	r3, [r4, #0]
 8007696:	441c      	add	r4, r3
 8007698:	6025      	str	r5, [r4, #0]
 800769a:	e004      	b.n	80076a6 <_malloc_r+0x72>
 800769c:	6863      	ldr	r3, [r4, #4]
 800769e:	42a2      	cmp	r2, r4
 80076a0:	bf0c      	ite	eq
 80076a2:	600b      	streq	r3, [r1, #0]
 80076a4:	6053      	strne	r3, [r2, #4]
 80076a6:	4630      	mov	r0, r6
 80076a8:	f000 fbca 	bl	8007e40 <__malloc_unlock>
 80076ac:	f104 000b 	add.w	r0, r4, #11
 80076b0:	1d23      	adds	r3, r4, #4
 80076b2:	f020 0007 	bic.w	r0, r0, #7
 80076b6:	1ac2      	subs	r2, r0, r3
 80076b8:	d0cc      	beq.n	8007654 <_malloc_r+0x20>
 80076ba:	1a1b      	subs	r3, r3, r0
 80076bc:	50a3      	str	r3, [r4, r2]
 80076be:	e7c9      	b.n	8007654 <_malloc_r+0x20>
 80076c0:	4622      	mov	r2, r4
 80076c2:	6864      	ldr	r4, [r4, #4]
 80076c4:	e7cc      	b.n	8007660 <_malloc_r+0x2c>
 80076c6:	1cc4      	adds	r4, r0, #3
 80076c8:	f024 0403 	bic.w	r4, r4, #3
 80076cc:	42a0      	cmp	r0, r4
 80076ce:	d0e3      	beq.n	8007698 <_malloc_r+0x64>
 80076d0:	1a21      	subs	r1, r4, r0
 80076d2:	4630      	mov	r0, r6
 80076d4:	f000 faf6 	bl	8007cc4 <_sbrk_r>
 80076d8:	3001      	adds	r0, #1
 80076da:	d1dd      	bne.n	8007698 <_malloc_r+0x64>
 80076dc:	e7cf      	b.n	800767e <_malloc_r+0x4a>
 80076de:	bf00      	nop
 80076e0:	200001a4 	.word	0x200001a4
 80076e4:	200001a8 	.word	0x200001a8

080076e8 <__sfputc_r>:
 80076e8:	6893      	ldr	r3, [r2, #8]
 80076ea:	b410      	push	{r4}
 80076ec:	3b01      	subs	r3, #1
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	6093      	str	r3, [r2, #8]
 80076f2:	da07      	bge.n	8007704 <__sfputc_r+0x1c>
 80076f4:	6994      	ldr	r4, [r2, #24]
 80076f6:	42a3      	cmp	r3, r4
 80076f8:	db01      	blt.n	80076fe <__sfputc_r+0x16>
 80076fa:	290a      	cmp	r1, #10
 80076fc:	d102      	bne.n	8007704 <__sfputc_r+0x1c>
 80076fe:	bc10      	pop	{r4}
 8007700:	f7ff bc6e 	b.w	8006fe0 <__swbuf_r>
 8007704:	6813      	ldr	r3, [r2, #0]
 8007706:	1c58      	adds	r0, r3, #1
 8007708:	6010      	str	r0, [r2, #0]
 800770a:	7019      	strb	r1, [r3, #0]
 800770c:	4608      	mov	r0, r1
 800770e:	bc10      	pop	{r4}
 8007710:	4770      	bx	lr

08007712 <__sfputs_r>:
 8007712:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007714:	4606      	mov	r6, r0
 8007716:	460f      	mov	r7, r1
 8007718:	4614      	mov	r4, r2
 800771a:	18d5      	adds	r5, r2, r3
 800771c:	42ac      	cmp	r4, r5
 800771e:	d101      	bne.n	8007724 <__sfputs_r+0x12>
 8007720:	2000      	movs	r0, #0
 8007722:	e007      	b.n	8007734 <__sfputs_r+0x22>
 8007724:	463a      	mov	r2, r7
 8007726:	4630      	mov	r0, r6
 8007728:	f814 1b01 	ldrb.w	r1, [r4], #1
 800772c:	f7ff ffdc 	bl	80076e8 <__sfputc_r>
 8007730:	1c43      	adds	r3, r0, #1
 8007732:	d1f3      	bne.n	800771c <__sfputs_r+0xa>
 8007734:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007738 <_vfiprintf_r>:
 8007738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800773c:	460d      	mov	r5, r1
 800773e:	4614      	mov	r4, r2
 8007740:	4698      	mov	r8, r3
 8007742:	4606      	mov	r6, r0
 8007744:	b09d      	sub	sp, #116	; 0x74
 8007746:	b118      	cbz	r0, 8007750 <_vfiprintf_r+0x18>
 8007748:	6983      	ldr	r3, [r0, #24]
 800774a:	b90b      	cbnz	r3, 8007750 <_vfiprintf_r+0x18>
 800774c:	f7ff fe22 	bl	8007394 <__sinit>
 8007750:	4b89      	ldr	r3, [pc, #548]	; (8007978 <_vfiprintf_r+0x240>)
 8007752:	429d      	cmp	r5, r3
 8007754:	d11b      	bne.n	800778e <_vfiprintf_r+0x56>
 8007756:	6875      	ldr	r5, [r6, #4]
 8007758:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800775a:	07d9      	lsls	r1, r3, #31
 800775c:	d405      	bmi.n	800776a <_vfiprintf_r+0x32>
 800775e:	89ab      	ldrh	r3, [r5, #12]
 8007760:	059a      	lsls	r2, r3, #22
 8007762:	d402      	bmi.n	800776a <_vfiprintf_r+0x32>
 8007764:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007766:	f7ff feb3 	bl	80074d0 <__retarget_lock_acquire_recursive>
 800776a:	89ab      	ldrh	r3, [r5, #12]
 800776c:	071b      	lsls	r3, r3, #28
 800776e:	d501      	bpl.n	8007774 <_vfiprintf_r+0x3c>
 8007770:	692b      	ldr	r3, [r5, #16]
 8007772:	b9eb      	cbnz	r3, 80077b0 <_vfiprintf_r+0x78>
 8007774:	4629      	mov	r1, r5
 8007776:	4630      	mov	r0, r6
 8007778:	f7ff fc84 	bl	8007084 <__swsetup_r>
 800777c:	b1c0      	cbz	r0, 80077b0 <_vfiprintf_r+0x78>
 800777e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007780:	07dc      	lsls	r4, r3, #31
 8007782:	d50e      	bpl.n	80077a2 <_vfiprintf_r+0x6a>
 8007784:	f04f 30ff 	mov.w	r0, #4294967295
 8007788:	b01d      	add	sp, #116	; 0x74
 800778a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800778e:	4b7b      	ldr	r3, [pc, #492]	; (800797c <_vfiprintf_r+0x244>)
 8007790:	429d      	cmp	r5, r3
 8007792:	d101      	bne.n	8007798 <_vfiprintf_r+0x60>
 8007794:	68b5      	ldr	r5, [r6, #8]
 8007796:	e7df      	b.n	8007758 <_vfiprintf_r+0x20>
 8007798:	4b79      	ldr	r3, [pc, #484]	; (8007980 <_vfiprintf_r+0x248>)
 800779a:	429d      	cmp	r5, r3
 800779c:	bf08      	it	eq
 800779e:	68f5      	ldreq	r5, [r6, #12]
 80077a0:	e7da      	b.n	8007758 <_vfiprintf_r+0x20>
 80077a2:	89ab      	ldrh	r3, [r5, #12]
 80077a4:	0598      	lsls	r0, r3, #22
 80077a6:	d4ed      	bmi.n	8007784 <_vfiprintf_r+0x4c>
 80077a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80077aa:	f7ff fe92 	bl	80074d2 <__retarget_lock_release_recursive>
 80077ae:	e7e9      	b.n	8007784 <_vfiprintf_r+0x4c>
 80077b0:	2300      	movs	r3, #0
 80077b2:	9309      	str	r3, [sp, #36]	; 0x24
 80077b4:	2320      	movs	r3, #32
 80077b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80077ba:	2330      	movs	r3, #48	; 0x30
 80077bc:	f04f 0901 	mov.w	r9, #1
 80077c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80077c4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007984 <_vfiprintf_r+0x24c>
 80077c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80077cc:	4623      	mov	r3, r4
 80077ce:	469a      	mov	sl, r3
 80077d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80077d4:	b10a      	cbz	r2, 80077da <_vfiprintf_r+0xa2>
 80077d6:	2a25      	cmp	r2, #37	; 0x25
 80077d8:	d1f9      	bne.n	80077ce <_vfiprintf_r+0x96>
 80077da:	ebba 0b04 	subs.w	fp, sl, r4
 80077de:	d00b      	beq.n	80077f8 <_vfiprintf_r+0xc0>
 80077e0:	465b      	mov	r3, fp
 80077e2:	4622      	mov	r2, r4
 80077e4:	4629      	mov	r1, r5
 80077e6:	4630      	mov	r0, r6
 80077e8:	f7ff ff93 	bl	8007712 <__sfputs_r>
 80077ec:	3001      	adds	r0, #1
 80077ee:	f000 80aa 	beq.w	8007946 <_vfiprintf_r+0x20e>
 80077f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077f4:	445a      	add	r2, fp
 80077f6:	9209      	str	r2, [sp, #36]	; 0x24
 80077f8:	f89a 3000 	ldrb.w	r3, [sl]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	f000 80a2 	beq.w	8007946 <_vfiprintf_r+0x20e>
 8007802:	2300      	movs	r3, #0
 8007804:	f04f 32ff 	mov.w	r2, #4294967295
 8007808:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800780c:	f10a 0a01 	add.w	sl, sl, #1
 8007810:	9304      	str	r3, [sp, #16]
 8007812:	9307      	str	r3, [sp, #28]
 8007814:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007818:	931a      	str	r3, [sp, #104]	; 0x68
 800781a:	4654      	mov	r4, sl
 800781c:	2205      	movs	r2, #5
 800781e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007822:	4858      	ldr	r0, [pc, #352]	; (8007984 <_vfiprintf_r+0x24c>)
 8007824:	f000 faf8 	bl	8007e18 <memchr>
 8007828:	9a04      	ldr	r2, [sp, #16]
 800782a:	b9d8      	cbnz	r0, 8007864 <_vfiprintf_r+0x12c>
 800782c:	06d1      	lsls	r1, r2, #27
 800782e:	bf44      	itt	mi
 8007830:	2320      	movmi	r3, #32
 8007832:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007836:	0713      	lsls	r3, r2, #28
 8007838:	bf44      	itt	mi
 800783a:	232b      	movmi	r3, #43	; 0x2b
 800783c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007840:	f89a 3000 	ldrb.w	r3, [sl]
 8007844:	2b2a      	cmp	r3, #42	; 0x2a
 8007846:	d015      	beq.n	8007874 <_vfiprintf_r+0x13c>
 8007848:	4654      	mov	r4, sl
 800784a:	2000      	movs	r0, #0
 800784c:	f04f 0c0a 	mov.w	ip, #10
 8007850:	9a07      	ldr	r2, [sp, #28]
 8007852:	4621      	mov	r1, r4
 8007854:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007858:	3b30      	subs	r3, #48	; 0x30
 800785a:	2b09      	cmp	r3, #9
 800785c:	d94e      	bls.n	80078fc <_vfiprintf_r+0x1c4>
 800785e:	b1b0      	cbz	r0, 800788e <_vfiprintf_r+0x156>
 8007860:	9207      	str	r2, [sp, #28]
 8007862:	e014      	b.n	800788e <_vfiprintf_r+0x156>
 8007864:	eba0 0308 	sub.w	r3, r0, r8
 8007868:	fa09 f303 	lsl.w	r3, r9, r3
 800786c:	4313      	orrs	r3, r2
 800786e:	46a2      	mov	sl, r4
 8007870:	9304      	str	r3, [sp, #16]
 8007872:	e7d2      	b.n	800781a <_vfiprintf_r+0xe2>
 8007874:	9b03      	ldr	r3, [sp, #12]
 8007876:	1d19      	adds	r1, r3, #4
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	9103      	str	r1, [sp, #12]
 800787c:	2b00      	cmp	r3, #0
 800787e:	bfbb      	ittet	lt
 8007880:	425b      	neglt	r3, r3
 8007882:	f042 0202 	orrlt.w	r2, r2, #2
 8007886:	9307      	strge	r3, [sp, #28]
 8007888:	9307      	strlt	r3, [sp, #28]
 800788a:	bfb8      	it	lt
 800788c:	9204      	strlt	r2, [sp, #16]
 800788e:	7823      	ldrb	r3, [r4, #0]
 8007890:	2b2e      	cmp	r3, #46	; 0x2e
 8007892:	d10c      	bne.n	80078ae <_vfiprintf_r+0x176>
 8007894:	7863      	ldrb	r3, [r4, #1]
 8007896:	2b2a      	cmp	r3, #42	; 0x2a
 8007898:	d135      	bne.n	8007906 <_vfiprintf_r+0x1ce>
 800789a:	9b03      	ldr	r3, [sp, #12]
 800789c:	3402      	adds	r4, #2
 800789e:	1d1a      	adds	r2, r3, #4
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	9203      	str	r2, [sp, #12]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	bfb8      	it	lt
 80078a8:	f04f 33ff 	movlt.w	r3, #4294967295
 80078ac:	9305      	str	r3, [sp, #20]
 80078ae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007994 <_vfiprintf_r+0x25c>
 80078b2:	2203      	movs	r2, #3
 80078b4:	4650      	mov	r0, sl
 80078b6:	7821      	ldrb	r1, [r4, #0]
 80078b8:	f000 faae 	bl	8007e18 <memchr>
 80078bc:	b140      	cbz	r0, 80078d0 <_vfiprintf_r+0x198>
 80078be:	2340      	movs	r3, #64	; 0x40
 80078c0:	eba0 000a 	sub.w	r0, r0, sl
 80078c4:	fa03 f000 	lsl.w	r0, r3, r0
 80078c8:	9b04      	ldr	r3, [sp, #16]
 80078ca:	3401      	adds	r4, #1
 80078cc:	4303      	orrs	r3, r0
 80078ce:	9304      	str	r3, [sp, #16]
 80078d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078d4:	2206      	movs	r2, #6
 80078d6:	482c      	ldr	r0, [pc, #176]	; (8007988 <_vfiprintf_r+0x250>)
 80078d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80078dc:	f000 fa9c 	bl	8007e18 <memchr>
 80078e0:	2800      	cmp	r0, #0
 80078e2:	d03f      	beq.n	8007964 <_vfiprintf_r+0x22c>
 80078e4:	4b29      	ldr	r3, [pc, #164]	; (800798c <_vfiprintf_r+0x254>)
 80078e6:	bb1b      	cbnz	r3, 8007930 <_vfiprintf_r+0x1f8>
 80078e8:	9b03      	ldr	r3, [sp, #12]
 80078ea:	3307      	adds	r3, #7
 80078ec:	f023 0307 	bic.w	r3, r3, #7
 80078f0:	3308      	adds	r3, #8
 80078f2:	9303      	str	r3, [sp, #12]
 80078f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078f6:	443b      	add	r3, r7
 80078f8:	9309      	str	r3, [sp, #36]	; 0x24
 80078fa:	e767      	b.n	80077cc <_vfiprintf_r+0x94>
 80078fc:	460c      	mov	r4, r1
 80078fe:	2001      	movs	r0, #1
 8007900:	fb0c 3202 	mla	r2, ip, r2, r3
 8007904:	e7a5      	b.n	8007852 <_vfiprintf_r+0x11a>
 8007906:	2300      	movs	r3, #0
 8007908:	f04f 0c0a 	mov.w	ip, #10
 800790c:	4619      	mov	r1, r3
 800790e:	3401      	adds	r4, #1
 8007910:	9305      	str	r3, [sp, #20]
 8007912:	4620      	mov	r0, r4
 8007914:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007918:	3a30      	subs	r2, #48	; 0x30
 800791a:	2a09      	cmp	r2, #9
 800791c:	d903      	bls.n	8007926 <_vfiprintf_r+0x1ee>
 800791e:	2b00      	cmp	r3, #0
 8007920:	d0c5      	beq.n	80078ae <_vfiprintf_r+0x176>
 8007922:	9105      	str	r1, [sp, #20]
 8007924:	e7c3      	b.n	80078ae <_vfiprintf_r+0x176>
 8007926:	4604      	mov	r4, r0
 8007928:	2301      	movs	r3, #1
 800792a:	fb0c 2101 	mla	r1, ip, r1, r2
 800792e:	e7f0      	b.n	8007912 <_vfiprintf_r+0x1da>
 8007930:	ab03      	add	r3, sp, #12
 8007932:	9300      	str	r3, [sp, #0]
 8007934:	462a      	mov	r2, r5
 8007936:	4630      	mov	r0, r6
 8007938:	4b15      	ldr	r3, [pc, #84]	; (8007990 <_vfiprintf_r+0x258>)
 800793a:	a904      	add	r1, sp, #16
 800793c:	f3af 8000 	nop.w
 8007940:	4607      	mov	r7, r0
 8007942:	1c78      	adds	r0, r7, #1
 8007944:	d1d6      	bne.n	80078f4 <_vfiprintf_r+0x1bc>
 8007946:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007948:	07d9      	lsls	r1, r3, #31
 800794a:	d405      	bmi.n	8007958 <_vfiprintf_r+0x220>
 800794c:	89ab      	ldrh	r3, [r5, #12]
 800794e:	059a      	lsls	r2, r3, #22
 8007950:	d402      	bmi.n	8007958 <_vfiprintf_r+0x220>
 8007952:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007954:	f7ff fdbd 	bl	80074d2 <__retarget_lock_release_recursive>
 8007958:	89ab      	ldrh	r3, [r5, #12]
 800795a:	065b      	lsls	r3, r3, #25
 800795c:	f53f af12 	bmi.w	8007784 <_vfiprintf_r+0x4c>
 8007960:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007962:	e711      	b.n	8007788 <_vfiprintf_r+0x50>
 8007964:	ab03      	add	r3, sp, #12
 8007966:	9300      	str	r3, [sp, #0]
 8007968:	462a      	mov	r2, r5
 800796a:	4630      	mov	r0, r6
 800796c:	4b08      	ldr	r3, [pc, #32]	; (8007990 <_vfiprintf_r+0x258>)
 800796e:	a904      	add	r1, sp, #16
 8007970:	f000 f882 	bl	8007a78 <_printf_i>
 8007974:	e7e4      	b.n	8007940 <_vfiprintf_r+0x208>
 8007976:	bf00      	nop
 8007978:	08008510 	.word	0x08008510
 800797c:	08008530 	.word	0x08008530
 8007980:	080084f0 	.word	0x080084f0
 8007984:	08008550 	.word	0x08008550
 8007988:	0800855a 	.word	0x0800855a
 800798c:	00000000 	.word	0x00000000
 8007990:	08007713 	.word	0x08007713
 8007994:	08008556 	.word	0x08008556

08007998 <_printf_common>:
 8007998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800799c:	4616      	mov	r6, r2
 800799e:	4699      	mov	r9, r3
 80079a0:	688a      	ldr	r2, [r1, #8]
 80079a2:	690b      	ldr	r3, [r1, #16]
 80079a4:	4607      	mov	r7, r0
 80079a6:	4293      	cmp	r3, r2
 80079a8:	bfb8      	it	lt
 80079aa:	4613      	movlt	r3, r2
 80079ac:	6033      	str	r3, [r6, #0]
 80079ae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80079b2:	460c      	mov	r4, r1
 80079b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80079b8:	b10a      	cbz	r2, 80079be <_printf_common+0x26>
 80079ba:	3301      	adds	r3, #1
 80079bc:	6033      	str	r3, [r6, #0]
 80079be:	6823      	ldr	r3, [r4, #0]
 80079c0:	0699      	lsls	r1, r3, #26
 80079c2:	bf42      	ittt	mi
 80079c4:	6833      	ldrmi	r3, [r6, #0]
 80079c6:	3302      	addmi	r3, #2
 80079c8:	6033      	strmi	r3, [r6, #0]
 80079ca:	6825      	ldr	r5, [r4, #0]
 80079cc:	f015 0506 	ands.w	r5, r5, #6
 80079d0:	d106      	bne.n	80079e0 <_printf_common+0x48>
 80079d2:	f104 0a19 	add.w	sl, r4, #25
 80079d6:	68e3      	ldr	r3, [r4, #12]
 80079d8:	6832      	ldr	r2, [r6, #0]
 80079da:	1a9b      	subs	r3, r3, r2
 80079dc:	42ab      	cmp	r3, r5
 80079de:	dc28      	bgt.n	8007a32 <_printf_common+0x9a>
 80079e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80079e4:	1e13      	subs	r3, r2, #0
 80079e6:	6822      	ldr	r2, [r4, #0]
 80079e8:	bf18      	it	ne
 80079ea:	2301      	movne	r3, #1
 80079ec:	0692      	lsls	r2, r2, #26
 80079ee:	d42d      	bmi.n	8007a4c <_printf_common+0xb4>
 80079f0:	4649      	mov	r1, r9
 80079f2:	4638      	mov	r0, r7
 80079f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80079f8:	47c0      	blx	r8
 80079fa:	3001      	adds	r0, #1
 80079fc:	d020      	beq.n	8007a40 <_printf_common+0xa8>
 80079fe:	6823      	ldr	r3, [r4, #0]
 8007a00:	68e5      	ldr	r5, [r4, #12]
 8007a02:	f003 0306 	and.w	r3, r3, #6
 8007a06:	2b04      	cmp	r3, #4
 8007a08:	bf18      	it	ne
 8007a0a:	2500      	movne	r5, #0
 8007a0c:	6832      	ldr	r2, [r6, #0]
 8007a0e:	f04f 0600 	mov.w	r6, #0
 8007a12:	68a3      	ldr	r3, [r4, #8]
 8007a14:	bf08      	it	eq
 8007a16:	1aad      	subeq	r5, r5, r2
 8007a18:	6922      	ldr	r2, [r4, #16]
 8007a1a:	bf08      	it	eq
 8007a1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a20:	4293      	cmp	r3, r2
 8007a22:	bfc4      	itt	gt
 8007a24:	1a9b      	subgt	r3, r3, r2
 8007a26:	18ed      	addgt	r5, r5, r3
 8007a28:	341a      	adds	r4, #26
 8007a2a:	42b5      	cmp	r5, r6
 8007a2c:	d11a      	bne.n	8007a64 <_printf_common+0xcc>
 8007a2e:	2000      	movs	r0, #0
 8007a30:	e008      	b.n	8007a44 <_printf_common+0xac>
 8007a32:	2301      	movs	r3, #1
 8007a34:	4652      	mov	r2, sl
 8007a36:	4649      	mov	r1, r9
 8007a38:	4638      	mov	r0, r7
 8007a3a:	47c0      	blx	r8
 8007a3c:	3001      	adds	r0, #1
 8007a3e:	d103      	bne.n	8007a48 <_printf_common+0xb0>
 8007a40:	f04f 30ff 	mov.w	r0, #4294967295
 8007a44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a48:	3501      	adds	r5, #1
 8007a4a:	e7c4      	b.n	80079d6 <_printf_common+0x3e>
 8007a4c:	2030      	movs	r0, #48	; 0x30
 8007a4e:	18e1      	adds	r1, r4, r3
 8007a50:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007a54:	1c5a      	adds	r2, r3, #1
 8007a56:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007a5a:	4422      	add	r2, r4
 8007a5c:	3302      	adds	r3, #2
 8007a5e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007a62:	e7c5      	b.n	80079f0 <_printf_common+0x58>
 8007a64:	2301      	movs	r3, #1
 8007a66:	4622      	mov	r2, r4
 8007a68:	4649      	mov	r1, r9
 8007a6a:	4638      	mov	r0, r7
 8007a6c:	47c0      	blx	r8
 8007a6e:	3001      	adds	r0, #1
 8007a70:	d0e6      	beq.n	8007a40 <_printf_common+0xa8>
 8007a72:	3601      	adds	r6, #1
 8007a74:	e7d9      	b.n	8007a2a <_printf_common+0x92>
	...

08007a78 <_printf_i>:
 8007a78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a7c:	460c      	mov	r4, r1
 8007a7e:	7e27      	ldrb	r7, [r4, #24]
 8007a80:	4691      	mov	r9, r2
 8007a82:	2f78      	cmp	r7, #120	; 0x78
 8007a84:	4680      	mov	r8, r0
 8007a86:	469a      	mov	sl, r3
 8007a88:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007a8a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007a8e:	d807      	bhi.n	8007aa0 <_printf_i+0x28>
 8007a90:	2f62      	cmp	r7, #98	; 0x62
 8007a92:	d80a      	bhi.n	8007aaa <_printf_i+0x32>
 8007a94:	2f00      	cmp	r7, #0
 8007a96:	f000 80d9 	beq.w	8007c4c <_printf_i+0x1d4>
 8007a9a:	2f58      	cmp	r7, #88	; 0x58
 8007a9c:	f000 80a4 	beq.w	8007be8 <_printf_i+0x170>
 8007aa0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007aa4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007aa8:	e03a      	b.n	8007b20 <_printf_i+0xa8>
 8007aaa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007aae:	2b15      	cmp	r3, #21
 8007ab0:	d8f6      	bhi.n	8007aa0 <_printf_i+0x28>
 8007ab2:	a001      	add	r0, pc, #4	; (adr r0, 8007ab8 <_printf_i+0x40>)
 8007ab4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007ab8:	08007b11 	.word	0x08007b11
 8007abc:	08007b25 	.word	0x08007b25
 8007ac0:	08007aa1 	.word	0x08007aa1
 8007ac4:	08007aa1 	.word	0x08007aa1
 8007ac8:	08007aa1 	.word	0x08007aa1
 8007acc:	08007aa1 	.word	0x08007aa1
 8007ad0:	08007b25 	.word	0x08007b25
 8007ad4:	08007aa1 	.word	0x08007aa1
 8007ad8:	08007aa1 	.word	0x08007aa1
 8007adc:	08007aa1 	.word	0x08007aa1
 8007ae0:	08007aa1 	.word	0x08007aa1
 8007ae4:	08007c33 	.word	0x08007c33
 8007ae8:	08007b55 	.word	0x08007b55
 8007aec:	08007c15 	.word	0x08007c15
 8007af0:	08007aa1 	.word	0x08007aa1
 8007af4:	08007aa1 	.word	0x08007aa1
 8007af8:	08007c55 	.word	0x08007c55
 8007afc:	08007aa1 	.word	0x08007aa1
 8007b00:	08007b55 	.word	0x08007b55
 8007b04:	08007aa1 	.word	0x08007aa1
 8007b08:	08007aa1 	.word	0x08007aa1
 8007b0c:	08007c1d 	.word	0x08007c1d
 8007b10:	680b      	ldr	r3, [r1, #0]
 8007b12:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007b16:	1d1a      	adds	r2, r3, #4
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	600a      	str	r2, [r1, #0]
 8007b1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007b20:	2301      	movs	r3, #1
 8007b22:	e0a4      	b.n	8007c6e <_printf_i+0x1f6>
 8007b24:	6825      	ldr	r5, [r4, #0]
 8007b26:	6808      	ldr	r0, [r1, #0]
 8007b28:	062e      	lsls	r6, r5, #24
 8007b2a:	f100 0304 	add.w	r3, r0, #4
 8007b2e:	d50a      	bpl.n	8007b46 <_printf_i+0xce>
 8007b30:	6805      	ldr	r5, [r0, #0]
 8007b32:	600b      	str	r3, [r1, #0]
 8007b34:	2d00      	cmp	r5, #0
 8007b36:	da03      	bge.n	8007b40 <_printf_i+0xc8>
 8007b38:	232d      	movs	r3, #45	; 0x2d
 8007b3a:	426d      	negs	r5, r5
 8007b3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b40:	230a      	movs	r3, #10
 8007b42:	485e      	ldr	r0, [pc, #376]	; (8007cbc <_printf_i+0x244>)
 8007b44:	e019      	b.n	8007b7a <_printf_i+0x102>
 8007b46:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007b4a:	6805      	ldr	r5, [r0, #0]
 8007b4c:	600b      	str	r3, [r1, #0]
 8007b4e:	bf18      	it	ne
 8007b50:	b22d      	sxthne	r5, r5
 8007b52:	e7ef      	b.n	8007b34 <_printf_i+0xbc>
 8007b54:	680b      	ldr	r3, [r1, #0]
 8007b56:	6825      	ldr	r5, [r4, #0]
 8007b58:	1d18      	adds	r0, r3, #4
 8007b5a:	6008      	str	r0, [r1, #0]
 8007b5c:	0628      	lsls	r0, r5, #24
 8007b5e:	d501      	bpl.n	8007b64 <_printf_i+0xec>
 8007b60:	681d      	ldr	r5, [r3, #0]
 8007b62:	e002      	b.n	8007b6a <_printf_i+0xf2>
 8007b64:	0669      	lsls	r1, r5, #25
 8007b66:	d5fb      	bpl.n	8007b60 <_printf_i+0xe8>
 8007b68:	881d      	ldrh	r5, [r3, #0]
 8007b6a:	2f6f      	cmp	r7, #111	; 0x6f
 8007b6c:	bf0c      	ite	eq
 8007b6e:	2308      	moveq	r3, #8
 8007b70:	230a      	movne	r3, #10
 8007b72:	4852      	ldr	r0, [pc, #328]	; (8007cbc <_printf_i+0x244>)
 8007b74:	2100      	movs	r1, #0
 8007b76:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007b7a:	6866      	ldr	r6, [r4, #4]
 8007b7c:	2e00      	cmp	r6, #0
 8007b7e:	bfa8      	it	ge
 8007b80:	6821      	ldrge	r1, [r4, #0]
 8007b82:	60a6      	str	r6, [r4, #8]
 8007b84:	bfa4      	itt	ge
 8007b86:	f021 0104 	bicge.w	r1, r1, #4
 8007b8a:	6021      	strge	r1, [r4, #0]
 8007b8c:	b90d      	cbnz	r5, 8007b92 <_printf_i+0x11a>
 8007b8e:	2e00      	cmp	r6, #0
 8007b90:	d04d      	beq.n	8007c2e <_printf_i+0x1b6>
 8007b92:	4616      	mov	r6, r2
 8007b94:	fbb5 f1f3 	udiv	r1, r5, r3
 8007b98:	fb03 5711 	mls	r7, r3, r1, r5
 8007b9c:	5dc7      	ldrb	r7, [r0, r7]
 8007b9e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007ba2:	462f      	mov	r7, r5
 8007ba4:	42bb      	cmp	r3, r7
 8007ba6:	460d      	mov	r5, r1
 8007ba8:	d9f4      	bls.n	8007b94 <_printf_i+0x11c>
 8007baa:	2b08      	cmp	r3, #8
 8007bac:	d10b      	bne.n	8007bc6 <_printf_i+0x14e>
 8007bae:	6823      	ldr	r3, [r4, #0]
 8007bb0:	07df      	lsls	r7, r3, #31
 8007bb2:	d508      	bpl.n	8007bc6 <_printf_i+0x14e>
 8007bb4:	6923      	ldr	r3, [r4, #16]
 8007bb6:	6861      	ldr	r1, [r4, #4]
 8007bb8:	4299      	cmp	r1, r3
 8007bba:	bfde      	ittt	le
 8007bbc:	2330      	movle	r3, #48	; 0x30
 8007bbe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007bc2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007bc6:	1b92      	subs	r2, r2, r6
 8007bc8:	6122      	str	r2, [r4, #16]
 8007bca:	464b      	mov	r3, r9
 8007bcc:	4621      	mov	r1, r4
 8007bce:	4640      	mov	r0, r8
 8007bd0:	f8cd a000 	str.w	sl, [sp]
 8007bd4:	aa03      	add	r2, sp, #12
 8007bd6:	f7ff fedf 	bl	8007998 <_printf_common>
 8007bda:	3001      	adds	r0, #1
 8007bdc:	d14c      	bne.n	8007c78 <_printf_i+0x200>
 8007bde:	f04f 30ff 	mov.w	r0, #4294967295
 8007be2:	b004      	add	sp, #16
 8007be4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007be8:	4834      	ldr	r0, [pc, #208]	; (8007cbc <_printf_i+0x244>)
 8007bea:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007bee:	680e      	ldr	r6, [r1, #0]
 8007bf0:	6823      	ldr	r3, [r4, #0]
 8007bf2:	f856 5b04 	ldr.w	r5, [r6], #4
 8007bf6:	061f      	lsls	r7, r3, #24
 8007bf8:	600e      	str	r6, [r1, #0]
 8007bfa:	d514      	bpl.n	8007c26 <_printf_i+0x1ae>
 8007bfc:	07d9      	lsls	r1, r3, #31
 8007bfe:	bf44      	itt	mi
 8007c00:	f043 0320 	orrmi.w	r3, r3, #32
 8007c04:	6023      	strmi	r3, [r4, #0]
 8007c06:	b91d      	cbnz	r5, 8007c10 <_printf_i+0x198>
 8007c08:	6823      	ldr	r3, [r4, #0]
 8007c0a:	f023 0320 	bic.w	r3, r3, #32
 8007c0e:	6023      	str	r3, [r4, #0]
 8007c10:	2310      	movs	r3, #16
 8007c12:	e7af      	b.n	8007b74 <_printf_i+0xfc>
 8007c14:	6823      	ldr	r3, [r4, #0]
 8007c16:	f043 0320 	orr.w	r3, r3, #32
 8007c1a:	6023      	str	r3, [r4, #0]
 8007c1c:	2378      	movs	r3, #120	; 0x78
 8007c1e:	4828      	ldr	r0, [pc, #160]	; (8007cc0 <_printf_i+0x248>)
 8007c20:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007c24:	e7e3      	b.n	8007bee <_printf_i+0x176>
 8007c26:	065e      	lsls	r6, r3, #25
 8007c28:	bf48      	it	mi
 8007c2a:	b2ad      	uxthmi	r5, r5
 8007c2c:	e7e6      	b.n	8007bfc <_printf_i+0x184>
 8007c2e:	4616      	mov	r6, r2
 8007c30:	e7bb      	b.n	8007baa <_printf_i+0x132>
 8007c32:	680b      	ldr	r3, [r1, #0]
 8007c34:	6826      	ldr	r6, [r4, #0]
 8007c36:	1d1d      	adds	r5, r3, #4
 8007c38:	6960      	ldr	r0, [r4, #20]
 8007c3a:	600d      	str	r5, [r1, #0]
 8007c3c:	0635      	lsls	r5, r6, #24
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	d501      	bpl.n	8007c46 <_printf_i+0x1ce>
 8007c42:	6018      	str	r0, [r3, #0]
 8007c44:	e002      	b.n	8007c4c <_printf_i+0x1d4>
 8007c46:	0671      	lsls	r1, r6, #25
 8007c48:	d5fb      	bpl.n	8007c42 <_printf_i+0x1ca>
 8007c4a:	8018      	strh	r0, [r3, #0]
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	4616      	mov	r6, r2
 8007c50:	6123      	str	r3, [r4, #16]
 8007c52:	e7ba      	b.n	8007bca <_printf_i+0x152>
 8007c54:	680b      	ldr	r3, [r1, #0]
 8007c56:	1d1a      	adds	r2, r3, #4
 8007c58:	600a      	str	r2, [r1, #0]
 8007c5a:	681e      	ldr	r6, [r3, #0]
 8007c5c:	2100      	movs	r1, #0
 8007c5e:	4630      	mov	r0, r6
 8007c60:	6862      	ldr	r2, [r4, #4]
 8007c62:	f000 f8d9 	bl	8007e18 <memchr>
 8007c66:	b108      	cbz	r0, 8007c6c <_printf_i+0x1f4>
 8007c68:	1b80      	subs	r0, r0, r6
 8007c6a:	6060      	str	r0, [r4, #4]
 8007c6c:	6863      	ldr	r3, [r4, #4]
 8007c6e:	6123      	str	r3, [r4, #16]
 8007c70:	2300      	movs	r3, #0
 8007c72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c76:	e7a8      	b.n	8007bca <_printf_i+0x152>
 8007c78:	4632      	mov	r2, r6
 8007c7a:	4649      	mov	r1, r9
 8007c7c:	4640      	mov	r0, r8
 8007c7e:	6923      	ldr	r3, [r4, #16]
 8007c80:	47d0      	blx	sl
 8007c82:	3001      	adds	r0, #1
 8007c84:	d0ab      	beq.n	8007bde <_printf_i+0x166>
 8007c86:	6823      	ldr	r3, [r4, #0]
 8007c88:	079b      	lsls	r3, r3, #30
 8007c8a:	d413      	bmi.n	8007cb4 <_printf_i+0x23c>
 8007c8c:	68e0      	ldr	r0, [r4, #12]
 8007c8e:	9b03      	ldr	r3, [sp, #12]
 8007c90:	4298      	cmp	r0, r3
 8007c92:	bfb8      	it	lt
 8007c94:	4618      	movlt	r0, r3
 8007c96:	e7a4      	b.n	8007be2 <_printf_i+0x16a>
 8007c98:	2301      	movs	r3, #1
 8007c9a:	4632      	mov	r2, r6
 8007c9c:	4649      	mov	r1, r9
 8007c9e:	4640      	mov	r0, r8
 8007ca0:	47d0      	blx	sl
 8007ca2:	3001      	adds	r0, #1
 8007ca4:	d09b      	beq.n	8007bde <_printf_i+0x166>
 8007ca6:	3501      	adds	r5, #1
 8007ca8:	68e3      	ldr	r3, [r4, #12]
 8007caa:	9903      	ldr	r1, [sp, #12]
 8007cac:	1a5b      	subs	r3, r3, r1
 8007cae:	42ab      	cmp	r3, r5
 8007cb0:	dcf2      	bgt.n	8007c98 <_printf_i+0x220>
 8007cb2:	e7eb      	b.n	8007c8c <_printf_i+0x214>
 8007cb4:	2500      	movs	r5, #0
 8007cb6:	f104 0619 	add.w	r6, r4, #25
 8007cba:	e7f5      	b.n	8007ca8 <_printf_i+0x230>
 8007cbc:	08008561 	.word	0x08008561
 8007cc0:	08008572 	.word	0x08008572

08007cc4 <_sbrk_r>:
 8007cc4:	b538      	push	{r3, r4, r5, lr}
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	4d05      	ldr	r5, [pc, #20]	; (8007ce0 <_sbrk_r+0x1c>)
 8007cca:	4604      	mov	r4, r0
 8007ccc:	4608      	mov	r0, r1
 8007cce:	602b      	str	r3, [r5, #0]
 8007cd0:	f7f9 fbe2 	bl	8001498 <_sbrk>
 8007cd4:	1c43      	adds	r3, r0, #1
 8007cd6:	d102      	bne.n	8007cde <_sbrk_r+0x1a>
 8007cd8:	682b      	ldr	r3, [r5, #0]
 8007cda:	b103      	cbz	r3, 8007cde <_sbrk_r+0x1a>
 8007cdc:	6023      	str	r3, [r4, #0]
 8007cde:	bd38      	pop	{r3, r4, r5, pc}
 8007ce0:	20000504 	.word	0x20000504

08007ce4 <__sread>:
 8007ce4:	b510      	push	{r4, lr}
 8007ce6:	460c      	mov	r4, r1
 8007ce8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cec:	f000 f8ae 	bl	8007e4c <_read_r>
 8007cf0:	2800      	cmp	r0, #0
 8007cf2:	bfab      	itete	ge
 8007cf4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007cf6:	89a3      	ldrhlt	r3, [r4, #12]
 8007cf8:	181b      	addge	r3, r3, r0
 8007cfa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007cfe:	bfac      	ite	ge
 8007d00:	6563      	strge	r3, [r4, #84]	; 0x54
 8007d02:	81a3      	strhlt	r3, [r4, #12]
 8007d04:	bd10      	pop	{r4, pc}

08007d06 <__swrite>:
 8007d06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d0a:	461f      	mov	r7, r3
 8007d0c:	898b      	ldrh	r3, [r1, #12]
 8007d0e:	4605      	mov	r5, r0
 8007d10:	05db      	lsls	r3, r3, #23
 8007d12:	460c      	mov	r4, r1
 8007d14:	4616      	mov	r6, r2
 8007d16:	d505      	bpl.n	8007d24 <__swrite+0x1e>
 8007d18:	2302      	movs	r3, #2
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d20:	f000 f868 	bl	8007df4 <_lseek_r>
 8007d24:	89a3      	ldrh	r3, [r4, #12]
 8007d26:	4632      	mov	r2, r6
 8007d28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d2c:	81a3      	strh	r3, [r4, #12]
 8007d2e:	4628      	mov	r0, r5
 8007d30:	463b      	mov	r3, r7
 8007d32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d3a:	f000 b817 	b.w	8007d6c <_write_r>

08007d3e <__sseek>:
 8007d3e:	b510      	push	{r4, lr}
 8007d40:	460c      	mov	r4, r1
 8007d42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d46:	f000 f855 	bl	8007df4 <_lseek_r>
 8007d4a:	1c43      	adds	r3, r0, #1
 8007d4c:	89a3      	ldrh	r3, [r4, #12]
 8007d4e:	bf15      	itete	ne
 8007d50:	6560      	strne	r0, [r4, #84]	; 0x54
 8007d52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007d56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007d5a:	81a3      	strheq	r3, [r4, #12]
 8007d5c:	bf18      	it	ne
 8007d5e:	81a3      	strhne	r3, [r4, #12]
 8007d60:	bd10      	pop	{r4, pc}

08007d62 <__sclose>:
 8007d62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d66:	f000 b813 	b.w	8007d90 <_close_r>
	...

08007d6c <_write_r>:
 8007d6c:	b538      	push	{r3, r4, r5, lr}
 8007d6e:	4604      	mov	r4, r0
 8007d70:	4608      	mov	r0, r1
 8007d72:	4611      	mov	r1, r2
 8007d74:	2200      	movs	r2, #0
 8007d76:	4d05      	ldr	r5, [pc, #20]	; (8007d8c <_write_r+0x20>)
 8007d78:	602a      	str	r2, [r5, #0]
 8007d7a:	461a      	mov	r2, r3
 8007d7c:	f7f9 fb32 	bl	80013e4 <_write>
 8007d80:	1c43      	adds	r3, r0, #1
 8007d82:	d102      	bne.n	8007d8a <_write_r+0x1e>
 8007d84:	682b      	ldr	r3, [r5, #0]
 8007d86:	b103      	cbz	r3, 8007d8a <_write_r+0x1e>
 8007d88:	6023      	str	r3, [r4, #0]
 8007d8a:	bd38      	pop	{r3, r4, r5, pc}
 8007d8c:	20000504 	.word	0x20000504

08007d90 <_close_r>:
 8007d90:	b538      	push	{r3, r4, r5, lr}
 8007d92:	2300      	movs	r3, #0
 8007d94:	4d05      	ldr	r5, [pc, #20]	; (8007dac <_close_r+0x1c>)
 8007d96:	4604      	mov	r4, r0
 8007d98:	4608      	mov	r0, r1
 8007d9a:	602b      	str	r3, [r5, #0]
 8007d9c:	f7f9 fb4c 	bl	8001438 <_close>
 8007da0:	1c43      	adds	r3, r0, #1
 8007da2:	d102      	bne.n	8007daa <_close_r+0x1a>
 8007da4:	682b      	ldr	r3, [r5, #0]
 8007da6:	b103      	cbz	r3, 8007daa <_close_r+0x1a>
 8007da8:	6023      	str	r3, [r4, #0]
 8007daa:	bd38      	pop	{r3, r4, r5, pc}
 8007dac:	20000504 	.word	0x20000504

08007db0 <_fstat_r>:
 8007db0:	b538      	push	{r3, r4, r5, lr}
 8007db2:	2300      	movs	r3, #0
 8007db4:	4d06      	ldr	r5, [pc, #24]	; (8007dd0 <_fstat_r+0x20>)
 8007db6:	4604      	mov	r4, r0
 8007db8:	4608      	mov	r0, r1
 8007dba:	4611      	mov	r1, r2
 8007dbc:	602b      	str	r3, [r5, #0]
 8007dbe:	f7f9 fb46 	bl	800144e <_fstat>
 8007dc2:	1c43      	adds	r3, r0, #1
 8007dc4:	d102      	bne.n	8007dcc <_fstat_r+0x1c>
 8007dc6:	682b      	ldr	r3, [r5, #0]
 8007dc8:	b103      	cbz	r3, 8007dcc <_fstat_r+0x1c>
 8007dca:	6023      	str	r3, [r4, #0]
 8007dcc:	bd38      	pop	{r3, r4, r5, pc}
 8007dce:	bf00      	nop
 8007dd0:	20000504 	.word	0x20000504

08007dd4 <_isatty_r>:
 8007dd4:	b538      	push	{r3, r4, r5, lr}
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	4d05      	ldr	r5, [pc, #20]	; (8007df0 <_isatty_r+0x1c>)
 8007dda:	4604      	mov	r4, r0
 8007ddc:	4608      	mov	r0, r1
 8007dde:	602b      	str	r3, [r5, #0]
 8007de0:	f7f9 fb44 	bl	800146c <_isatty>
 8007de4:	1c43      	adds	r3, r0, #1
 8007de6:	d102      	bne.n	8007dee <_isatty_r+0x1a>
 8007de8:	682b      	ldr	r3, [r5, #0]
 8007dea:	b103      	cbz	r3, 8007dee <_isatty_r+0x1a>
 8007dec:	6023      	str	r3, [r4, #0]
 8007dee:	bd38      	pop	{r3, r4, r5, pc}
 8007df0:	20000504 	.word	0x20000504

08007df4 <_lseek_r>:
 8007df4:	b538      	push	{r3, r4, r5, lr}
 8007df6:	4604      	mov	r4, r0
 8007df8:	4608      	mov	r0, r1
 8007dfa:	4611      	mov	r1, r2
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	4d05      	ldr	r5, [pc, #20]	; (8007e14 <_lseek_r+0x20>)
 8007e00:	602a      	str	r2, [r5, #0]
 8007e02:	461a      	mov	r2, r3
 8007e04:	f7f9 fb3c 	bl	8001480 <_lseek>
 8007e08:	1c43      	adds	r3, r0, #1
 8007e0a:	d102      	bne.n	8007e12 <_lseek_r+0x1e>
 8007e0c:	682b      	ldr	r3, [r5, #0]
 8007e0e:	b103      	cbz	r3, 8007e12 <_lseek_r+0x1e>
 8007e10:	6023      	str	r3, [r4, #0]
 8007e12:	bd38      	pop	{r3, r4, r5, pc}
 8007e14:	20000504 	.word	0x20000504

08007e18 <memchr>:
 8007e18:	4603      	mov	r3, r0
 8007e1a:	b510      	push	{r4, lr}
 8007e1c:	b2c9      	uxtb	r1, r1
 8007e1e:	4402      	add	r2, r0
 8007e20:	4293      	cmp	r3, r2
 8007e22:	4618      	mov	r0, r3
 8007e24:	d101      	bne.n	8007e2a <memchr+0x12>
 8007e26:	2000      	movs	r0, #0
 8007e28:	e003      	b.n	8007e32 <memchr+0x1a>
 8007e2a:	7804      	ldrb	r4, [r0, #0]
 8007e2c:	3301      	adds	r3, #1
 8007e2e:	428c      	cmp	r4, r1
 8007e30:	d1f6      	bne.n	8007e20 <memchr+0x8>
 8007e32:	bd10      	pop	{r4, pc}

08007e34 <__malloc_lock>:
 8007e34:	4801      	ldr	r0, [pc, #4]	; (8007e3c <__malloc_lock+0x8>)
 8007e36:	f7ff bb4b 	b.w	80074d0 <__retarget_lock_acquire_recursive>
 8007e3a:	bf00      	nop
 8007e3c:	200004fc 	.word	0x200004fc

08007e40 <__malloc_unlock>:
 8007e40:	4801      	ldr	r0, [pc, #4]	; (8007e48 <__malloc_unlock+0x8>)
 8007e42:	f7ff bb46 	b.w	80074d2 <__retarget_lock_release_recursive>
 8007e46:	bf00      	nop
 8007e48:	200004fc 	.word	0x200004fc

08007e4c <_read_r>:
 8007e4c:	b538      	push	{r3, r4, r5, lr}
 8007e4e:	4604      	mov	r4, r0
 8007e50:	4608      	mov	r0, r1
 8007e52:	4611      	mov	r1, r2
 8007e54:	2200      	movs	r2, #0
 8007e56:	4d05      	ldr	r5, [pc, #20]	; (8007e6c <_read_r+0x20>)
 8007e58:	602a      	str	r2, [r5, #0]
 8007e5a:	461a      	mov	r2, r3
 8007e5c:	f7f9 faa4 	bl	80013a8 <_read>
 8007e60:	1c43      	adds	r3, r0, #1
 8007e62:	d102      	bne.n	8007e6a <_read_r+0x1e>
 8007e64:	682b      	ldr	r3, [r5, #0]
 8007e66:	b103      	cbz	r3, 8007e6a <_read_r+0x1e>
 8007e68:	6023      	str	r3, [r4, #0]
 8007e6a:	bd38      	pop	{r3, r4, r5, pc}
 8007e6c:	20000504 	.word	0x20000504

08007e70 <_init>:
 8007e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e72:	bf00      	nop
 8007e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e76:	bc08      	pop	{r3}
 8007e78:	469e      	mov	lr, r3
 8007e7a:	4770      	bx	lr

08007e7c <_fini>:
 8007e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e7e:	bf00      	nop
 8007e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e82:	bc08      	pop	{r3}
 8007e84:	469e      	mov	lr, r3
 8007e86:	4770      	bx	lr
