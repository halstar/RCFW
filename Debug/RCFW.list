
RCFW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fc6c  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000170c  0800fe58  0800fe58  0001fe58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011564  08011564  000301f0  2**0
                  CONTENTS
  4 .ARM          00000000  08011564  08011564  000301f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08011564  08011564  000301f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011564  08011564  00021564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011568  08011568  00021568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0801156c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a54  200001f0  0801175c  000301f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c44  0801175c  00030c44  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000301f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d093  00000000  00000000  00030219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004305  00000000  00000000  0004d2ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001588  00000000  00000000  000515b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013b0  00000000  00000000  00052b40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f49b  00000000  00000000  00053ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d3cd  00000000  00000000  0007338b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a6a30  00000000  00000000  00090758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00137188  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006dec  00000000  00000000  001371dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001f0 	.word	0x200001f0
 8000204:	00000000 	.word	0x00000000
 8000208:	0800fe3c 	.word	0x0800fe3c

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001f4 	.word	0x200001f4
 8000224:	0800fe3c 	.word	0x0800fe3c

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__aeabi_frsub>:
 8000c40:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c44:	e002      	b.n	8000c4c <__addsf3>
 8000c46:	bf00      	nop

08000c48 <__aeabi_fsub>:
 8000c48:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c4c <__addsf3>:
 8000c4c:	0042      	lsls	r2, r0, #1
 8000c4e:	bf1f      	itttt	ne
 8000c50:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c54:	ea92 0f03 	teqne	r2, r3
 8000c58:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c5c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c60:	d06a      	beq.n	8000d38 <__addsf3+0xec>
 8000c62:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c66:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c6a:	bfc1      	itttt	gt
 8000c6c:	18d2      	addgt	r2, r2, r3
 8000c6e:	4041      	eorgt	r1, r0
 8000c70:	4048      	eorgt	r0, r1
 8000c72:	4041      	eorgt	r1, r0
 8000c74:	bfb8      	it	lt
 8000c76:	425b      	neglt	r3, r3
 8000c78:	2b19      	cmp	r3, #25
 8000c7a:	bf88      	it	hi
 8000c7c:	4770      	bxhi	lr
 8000c7e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c86:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c8a:	bf18      	it	ne
 8000c8c:	4240      	negne	r0, r0
 8000c8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c92:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c96:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c9a:	bf18      	it	ne
 8000c9c:	4249      	negne	r1, r1
 8000c9e:	ea92 0f03 	teq	r2, r3
 8000ca2:	d03f      	beq.n	8000d24 <__addsf3+0xd8>
 8000ca4:	f1a2 0201 	sub.w	r2, r2, #1
 8000ca8:	fa41 fc03 	asr.w	ip, r1, r3
 8000cac:	eb10 000c 	adds.w	r0, r0, ip
 8000cb0:	f1c3 0320 	rsb	r3, r3, #32
 8000cb4:	fa01 f103 	lsl.w	r1, r1, r3
 8000cb8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cbc:	d502      	bpl.n	8000cc4 <__addsf3+0x78>
 8000cbe:	4249      	negs	r1, r1
 8000cc0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cc4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000cc8:	d313      	bcc.n	8000cf2 <__addsf3+0xa6>
 8000cca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cce:	d306      	bcc.n	8000cde <__addsf3+0x92>
 8000cd0:	0840      	lsrs	r0, r0, #1
 8000cd2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cd6:	f102 0201 	add.w	r2, r2, #1
 8000cda:	2afe      	cmp	r2, #254	; 0xfe
 8000cdc:	d251      	bcs.n	8000d82 <__addsf3+0x136>
 8000cde:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ce2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ce6:	bf08      	it	eq
 8000ce8:	f020 0001 	biceq.w	r0, r0, #1
 8000cec:	ea40 0003 	orr.w	r0, r0, r3
 8000cf0:	4770      	bx	lr
 8000cf2:	0049      	lsls	r1, r1, #1
 8000cf4:	eb40 0000 	adc.w	r0, r0, r0
 8000cf8:	3a01      	subs	r2, #1
 8000cfa:	bf28      	it	cs
 8000cfc:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d00:	d2ed      	bcs.n	8000cde <__addsf3+0x92>
 8000d02:	fab0 fc80 	clz	ip, r0
 8000d06:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d0a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d0e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d12:	bfaa      	itet	ge
 8000d14:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d18:	4252      	neglt	r2, r2
 8000d1a:	4318      	orrge	r0, r3
 8000d1c:	bfbc      	itt	lt
 8000d1e:	40d0      	lsrlt	r0, r2
 8000d20:	4318      	orrlt	r0, r3
 8000d22:	4770      	bx	lr
 8000d24:	f092 0f00 	teq	r2, #0
 8000d28:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d2c:	bf06      	itte	eq
 8000d2e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d32:	3201      	addeq	r2, #1
 8000d34:	3b01      	subne	r3, #1
 8000d36:	e7b5      	b.n	8000ca4 <__addsf3+0x58>
 8000d38:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d40:	bf18      	it	ne
 8000d42:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d46:	d021      	beq.n	8000d8c <__addsf3+0x140>
 8000d48:	ea92 0f03 	teq	r2, r3
 8000d4c:	d004      	beq.n	8000d58 <__addsf3+0x10c>
 8000d4e:	f092 0f00 	teq	r2, #0
 8000d52:	bf08      	it	eq
 8000d54:	4608      	moveq	r0, r1
 8000d56:	4770      	bx	lr
 8000d58:	ea90 0f01 	teq	r0, r1
 8000d5c:	bf1c      	itt	ne
 8000d5e:	2000      	movne	r0, #0
 8000d60:	4770      	bxne	lr
 8000d62:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d66:	d104      	bne.n	8000d72 <__addsf3+0x126>
 8000d68:	0040      	lsls	r0, r0, #1
 8000d6a:	bf28      	it	cs
 8000d6c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d70:	4770      	bx	lr
 8000d72:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d76:	bf3c      	itt	cc
 8000d78:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d7c:	4770      	bxcc	lr
 8000d7e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d82:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d86:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d8a:	4770      	bx	lr
 8000d8c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d90:	bf16      	itet	ne
 8000d92:	4608      	movne	r0, r1
 8000d94:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d98:	4601      	movne	r1, r0
 8000d9a:	0242      	lsls	r2, r0, #9
 8000d9c:	bf06      	itte	eq
 8000d9e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000da2:	ea90 0f01 	teqeq	r0, r1
 8000da6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000daa:	4770      	bx	lr

08000dac <__aeabi_ui2f>:
 8000dac:	f04f 0300 	mov.w	r3, #0
 8000db0:	e004      	b.n	8000dbc <__aeabi_i2f+0x8>
 8000db2:	bf00      	nop

08000db4 <__aeabi_i2f>:
 8000db4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000db8:	bf48      	it	mi
 8000dba:	4240      	negmi	r0, r0
 8000dbc:	ea5f 0c00 	movs.w	ip, r0
 8000dc0:	bf08      	it	eq
 8000dc2:	4770      	bxeq	lr
 8000dc4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000dc8:	4601      	mov	r1, r0
 8000dca:	f04f 0000 	mov.w	r0, #0
 8000dce:	e01c      	b.n	8000e0a <__aeabi_l2f+0x2a>

08000dd0 <__aeabi_ul2f>:
 8000dd0:	ea50 0201 	orrs.w	r2, r0, r1
 8000dd4:	bf08      	it	eq
 8000dd6:	4770      	bxeq	lr
 8000dd8:	f04f 0300 	mov.w	r3, #0
 8000ddc:	e00a      	b.n	8000df4 <__aeabi_l2f+0x14>
 8000dde:	bf00      	nop

08000de0 <__aeabi_l2f>:
 8000de0:	ea50 0201 	orrs.w	r2, r0, r1
 8000de4:	bf08      	it	eq
 8000de6:	4770      	bxeq	lr
 8000de8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000dec:	d502      	bpl.n	8000df4 <__aeabi_l2f+0x14>
 8000dee:	4240      	negs	r0, r0
 8000df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000df4:	ea5f 0c01 	movs.w	ip, r1
 8000df8:	bf02      	ittt	eq
 8000dfa:	4684      	moveq	ip, r0
 8000dfc:	4601      	moveq	r1, r0
 8000dfe:	2000      	moveq	r0, #0
 8000e00:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e04:	bf08      	it	eq
 8000e06:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e0a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e0e:	fabc f28c 	clz	r2, ip
 8000e12:	3a08      	subs	r2, #8
 8000e14:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e18:	db10      	blt.n	8000e3c <__aeabi_l2f+0x5c>
 8000e1a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e1e:	4463      	add	r3, ip
 8000e20:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e24:	f1c2 0220 	rsb	r2, r2, #32
 8000e28:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e2c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e30:	eb43 0002 	adc.w	r0, r3, r2
 8000e34:	bf08      	it	eq
 8000e36:	f020 0001 	biceq.w	r0, r0, #1
 8000e3a:	4770      	bx	lr
 8000e3c:	f102 0220 	add.w	r2, r2, #32
 8000e40:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e44:	f1c2 0220 	rsb	r2, r2, #32
 8000e48:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e4c:	fa21 f202 	lsr.w	r2, r1, r2
 8000e50:	eb43 0002 	adc.w	r0, r3, r2
 8000e54:	bf08      	it	eq
 8000e56:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5a:	4770      	bx	lr

08000e5c <__aeabi_fmul>:
 8000e5c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e60:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e64:	bf1e      	ittt	ne
 8000e66:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e6a:	ea92 0f0c 	teqne	r2, ip
 8000e6e:	ea93 0f0c 	teqne	r3, ip
 8000e72:	d06f      	beq.n	8000f54 <__aeabi_fmul+0xf8>
 8000e74:	441a      	add	r2, r3
 8000e76:	ea80 0c01 	eor.w	ip, r0, r1
 8000e7a:	0240      	lsls	r0, r0, #9
 8000e7c:	bf18      	it	ne
 8000e7e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e82:	d01e      	beq.n	8000ec2 <__aeabi_fmul+0x66>
 8000e84:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e88:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e8c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e90:	fba0 3101 	umull	r3, r1, r0, r1
 8000e94:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e98:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e9c:	bf3e      	ittt	cc
 8000e9e:	0049      	lslcc	r1, r1, #1
 8000ea0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ea4:	005b      	lslcc	r3, r3, #1
 8000ea6:	ea40 0001 	orr.w	r0, r0, r1
 8000eaa:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000eae:	2afd      	cmp	r2, #253	; 0xfd
 8000eb0:	d81d      	bhi.n	8000eee <__aeabi_fmul+0x92>
 8000eb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000eb6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eba:	bf08      	it	eq
 8000ebc:	f020 0001 	biceq.w	r0, r0, #1
 8000ec0:	4770      	bx	lr
 8000ec2:	f090 0f00 	teq	r0, #0
 8000ec6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000eca:	bf08      	it	eq
 8000ecc:	0249      	lsleq	r1, r1, #9
 8000ece:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ed2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ed6:	3a7f      	subs	r2, #127	; 0x7f
 8000ed8:	bfc2      	ittt	gt
 8000eda:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ede:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ee2:	4770      	bxgt	lr
 8000ee4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee8:	f04f 0300 	mov.w	r3, #0
 8000eec:	3a01      	subs	r2, #1
 8000eee:	dc5d      	bgt.n	8000fac <__aeabi_fmul+0x150>
 8000ef0:	f112 0f19 	cmn.w	r2, #25
 8000ef4:	bfdc      	itt	le
 8000ef6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000efa:	4770      	bxle	lr
 8000efc:	f1c2 0200 	rsb	r2, r2, #0
 8000f00:	0041      	lsls	r1, r0, #1
 8000f02:	fa21 f102 	lsr.w	r1, r1, r2
 8000f06:	f1c2 0220 	rsb	r2, r2, #32
 8000f0a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f0e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000f12:	f140 0000 	adc.w	r0, r0, #0
 8000f16:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000f1a:	bf08      	it	eq
 8000f1c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f20:	4770      	bx	lr
 8000f22:	f092 0f00 	teq	r2, #0
 8000f26:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f2a:	bf02      	ittt	eq
 8000f2c:	0040      	lsleq	r0, r0, #1
 8000f2e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f32:	3a01      	subeq	r2, #1
 8000f34:	d0f9      	beq.n	8000f2a <__aeabi_fmul+0xce>
 8000f36:	ea40 000c 	orr.w	r0, r0, ip
 8000f3a:	f093 0f00 	teq	r3, #0
 8000f3e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f42:	bf02      	ittt	eq
 8000f44:	0049      	lsleq	r1, r1, #1
 8000f46:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f4a:	3b01      	subeq	r3, #1
 8000f4c:	d0f9      	beq.n	8000f42 <__aeabi_fmul+0xe6>
 8000f4e:	ea41 010c 	orr.w	r1, r1, ip
 8000f52:	e78f      	b.n	8000e74 <__aeabi_fmul+0x18>
 8000f54:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f58:	ea92 0f0c 	teq	r2, ip
 8000f5c:	bf18      	it	ne
 8000f5e:	ea93 0f0c 	teqne	r3, ip
 8000f62:	d00a      	beq.n	8000f7a <__aeabi_fmul+0x11e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1d8      	bne.n	8000f22 <__aeabi_fmul+0xc6>
 8000f70:	ea80 0001 	eor.w	r0, r0, r1
 8000f74:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f78:	4770      	bx	lr
 8000f7a:	f090 0f00 	teq	r0, #0
 8000f7e:	bf17      	itett	ne
 8000f80:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f84:	4608      	moveq	r0, r1
 8000f86:	f091 0f00 	teqne	r1, #0
 8000f8a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f8e:	d014      	beq.n	8000fba <__aeabi_fmul+0x15e>
 8000f90:	ea92 0f0c 	teq	r2, ip
 8000f94:	d101      	bne.n	8000f9a <__aeabi_fmul+0x13e>
 8000f96:	0242      	lsls	r2, r0, #9
 8000f98:	d10f      	bne.n	8000fba <__aeabi_fmul+0x15e>
 8000f9a:	ea93 0f0c 	teq	r3, ip
 8000f9e:	d103      	bne.n	8000fa8 <__aeabi_fmul+0x14c>
 8000fa0:	024b      	lsls	r3, r1, #9
 8000fa2:	bf18      	it	ne
 8000fa4:	4608      	movne	r0, r1
 8000fa6:	d108      	bne.n	8000fba <__aeabi_fmul+0x15e>
 8000fa8:	ea80 0001 	eor.w	r0, r0, r1
 8000fac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000fb0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fb4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fb8:	4770      	bx	lr
 8000fba:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fbe:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000fc2:	4770      	bx	lr

08000fc4 <__aeabi_fdiv>:
 8000fc4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000fc8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000fcc:	bf1e      	ittt	ne
 8000fce:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000fd2:	ea92 0f0c 	teqne	r2, ip
 8000fd6:	ea93 0f0c 	teqne	r3, ip
 8000fda:	d069      	beq.n	80010b0 <__aeabi_fdiv+0xec>
 8000fdc:	eba2 0203 	sub.w	r2, r2, r3
 8000fe0:	ea80 0c01 	eor.w	ip, r0, r1
 8000fe4:	0249      	lsls	r1, r1, #9
 8000fe6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000fea:	d037      	beq.n	800105c <__aeabi_fdiv+0x98>
 8000fec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ff0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ff4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ff8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ffc:	428b      	cmp	r3, r1
 8000ffe:	bf38      	it	cc
 8001000:	005b      	lslcc	r3, r3, #1
 8001002:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8001006:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800100a:	428b      	cmp	r3, r1
 800100c:	bf24      	itt	cs
 800100e:	1a5b      	subcs	r3, r3, r1
 8001010:	ea40 000c 	orrcs.w	r0, r0, ip
 8001014:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8001018:	bf24      	itt	cs
 800101a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800101e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8001022:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8001026:	bf24      	itt	cs
 8001028:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800102c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001030:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8001034:	bf24      	itt	cs
 8001036:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800103a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800103e:	011b      	lsls	r3, r3, #4
 8001040:	bf18      	it	ne
 8001042:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8001046:	d1e0      	bne.n	800100a <__aeabi_fdiv+0x46>
 8001048:	2afd      	cmp	r2, #253	; 0xfd
 800104a:	f63f af50 	bhi.w	8000eee <__aeabi_fmul+0x92>
 800104e:	428b      	cmp	r3, r1
 8001050:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001054:	bf08      	it	eq
 8001056:	f020 0001 	biceq.w	r0, r0, #1
 800105a:	4770      	bx	lr
 800105c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001060:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001064:	327f      	adds	r2, #127	; 0x7f
 8001066:	bfc2      	ittt	gt
 8001068:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800106c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001070:	4770      	bxgt	lr
 8001072:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001076:	f04f 0300 	mov.w	r3, #0
 800107a:	3a01      	subs	r2, #1
 800107c:	e737      	b.n	8000eee <__aeabi_fmul+0x92>
 800107e:	f092 0f00 	teq	r2, #0
 8001082:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8001086:	bf02      	ittt	eq
 8001088:	0040      	lsleq	r0, r0, #1
 800108a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800108e:	3a01      	subeq	r2, #1
 8001090:	d0f9      	beq.n	8001086 <__aeabi_fdiv+0xc2>
 8001092:	ea40 000c 	orr.w	r0, r0, ip
 8001096:	f093 0f00 	teq	r3, #0
 800109a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800109e:	bf02      	ittt	eq
 80010a0:	0049      	lsleq	r1, r1, #1
 80010a2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80010a6:	3b01      	subeq	r3, #1
 80010a8:	d0f9      	beq.n	800109e <__aeabi_fdiv+0xda>
 80010aa:	ea41 010c 	orr.w	r1, r1, ip
 80010ae:	e795      	b.n	8000fdc <__aeabi_fdiv+0x18>
 80010b0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80010b4:	ea92 0f0c 	teq	r2, ip
 80010b8:	d108      	bne.n	80010cc <__aeabi_fdiv+0x108>
 80010ba:	0242      	lsls	r2, r0, #9
 80010bc:	f47f af7d 	bne.w	8000fba <__aeabi_fmul+0x15e>
 80010c0:	ea93 0f0c 	teq	r3, ip
 80010c4:	f47f af70 	bne.w	8000fa8 <__aeabi_fmul+0x14c>
 80010c8:	4608      	mov	r0, r1
 80010ca:	e776      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010cc:	ea93 0f0c 	teq	r3, ip
 80010d0:	d104      	bne.n	80010dc <__aeabi_fdiv+0x118>
 80010d2:	024b      	lsls	r3, r1, #9
 80010d4:	f43f af4c 	beq.w	8000f70 <__aeabi_fmul+0x114>
 80010d8:	4608      	mov	r0, r1
 80010da:	e76e      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010dc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80010e0:	bf18      	it	ne
 80010e2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80010e6:	d1ca      	bne.n	800107e <__aeabi_fdiv+0xba>
 80010e8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80010ec:	f47f af5c 	bne.w	8000fa8 <__aeabi_fmul+0x14c>
 80010f0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80010f4:	f47f af3c 	bne.w	8000f70 <__aeabi_fmul+0x114>
 80010f8:	e75f      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010fa:	bf00      	nop

080010fc <__aeabi_f2iz>:
 80010fc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001100:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001104:	d30f      	bcc.n	8001126 <__aeabi_f2iz+0x2a>
 8001106:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800110a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800110e:	d90d      	bls.n	800112c <__aeabi_f2iz+0x30>
 8001110:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001114:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001118:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800111c:	fa23 f002 	lsr.w	r0, r3, r2
 8001120:	bf18      	it	ne
 8001122:	4240      	negne	r0, r0
 8001124:	4770      	bx	lr
 8001126:	f04f 0000 	mov.w	r0, #0
 800112a:	4770      	bx	lr
 800112c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001130:	d101      	bne.n	8001136 <__aeabi_f2iz+0x3a>
 8001132:	0242      	lsls	r2, r0, #9
 8001134:	d105      	bne.n	8001142 <__aeabi_f2iz+0x46>
 8001136:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800113a:	bf08      	it	eq
 800113c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001140:	4770      	bx	lr
 8001142:	f04f 0000 	mov.w	r0, #0
 8001146:	4770      	bx	lr

08001148 <__aeabi_f2uiz>:
 8001148:	0042      	lsls	r2, r0, #1
 800114a:	d20e      	bcs.n	800116a <__aeabi_f2uiz+0x22>
 800114c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001150:	d30b      	bcc.n	800116a <__aeabi_f2uiz+0x22>
 8001152:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001156:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800115a:	d409      	bmi.n	8001170 <__aeabi_f2uiz+0x28>
 800115c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001160:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001164:	fa23 f002 	lsr.w	r0, r3, r2
 8001168:	4770      	bx	lr
 800116a:	f04f 0000 	mov.w	r0, #0
 800116e:	4770      	bx	lr
 8001170:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001174:	d101      	bne.n	800117a <__aeabi_f2uiz+0x32>
 8001176:	0242      	lsls	r2, r0, #9
 8001178:	d102      	bne.n	8001180 <__aeabi_f2uiz+0x38>
 800117a:	f04f 30ff 	mov.w	r0, #4294967295
 800117e:	4770      	bx	lr
 8001180:	f04f 0000 	mov.w	r0, #0
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop

08001188 <__aeabi_d2lz>:
 8001188:	b538      	push	{r3, r4, r5, lr}
 800118a:	460c      	mov	r4, r1
 800118c:	4605      	mov	r5, r0
 800118e:	4621      	mov	r1, r4
 8001190:	4628      	mov	r0, r5
 8001192:	2200      	movs	r2, #0
 8001194:	2300      	movs	r3, #0
 8001196:	f7ff fc7d 	bl	8000a94 <__aeabi_dcmplt>
 800119a:	b928      	cbnz	r0, 80011a8 <__aeabi_d2lz+0x20>
 800119c:	4628      	mov	r0, r5
 800119e:	4621      	mov	r1, r4
 80011a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80011a4:	f000 b80a 	b.w	80011bc <__aeabi_d2ulz>
 80011a8:	4628      	mov	r0, r5
 80011aa:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 80011ae:	f000 f805 	bl	80011bc <__aeabi_d2ulz>
 80011b2:	4240      	negs	r0, r0
 80011b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011b8:	bd38      	pop	{r3, r4, r5, pc}
 80011ba:	bf00      	nop

080011bc <__aeabi_d2ulz>:
 80011bc:	b5d0      	push	{r4, r6, r7, lr}
 80011be:	2200      	movs	r2, #0
 80011c0:	4b0b      	ldr	r3, [pc, #44]	; (80011f0 <__aeabi_d2ulz+0x34>)
 80011c2:	4606      	mov	r6, r0
 80011c4:	460f      	mov	r7, r1
 80011c6:	f7ff f9f3 	bl	80005b0 <__aeabi_dmul>
 80011ca:	f7ff fcc9 	bl	8000b60 <__aeabi_d2uiz>
 80011ce:	4604      	mov	r4, r0
 80011d0:	f7ff f974 	bl	80004bc <__aeabi_ui2d>
 80011d4:	2200      	movs	r2, #0
 80011d6:	4b07      	ldr	r3, [pc, #28]	; (80011f4 <__aeabi_d2ulz+0x38>)
 80011d8:	f7ff f9ea 	bl	80005b0 <__aeabi_dmul>
 80011dc:	4602      	mov	r2, r0
 80011de:	460b      	mov	r3, r1
 80011e0:	4630      	mov	r0, r6
 80011e2:	4639      	mov	r1, r7
 80011e4:	f7ff f82c 	bl	8000240 <__aeabi_dsub>
 80011e8:	f7ff fcba 	bl	8000b60 <__aeabi_d2uiz>
 80011ec:	4621      	mov	r1, r4
 80011ee:	bdd0      	pop	{r4, r6, r7, pc}
 80011f0:	3df00000 	.word	0x3df00000
 80011f4:	41f00000 	.word	0x41f00000

080011f8 <MAIN_displayRcfwBanner>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static void MAIN_displayRcfwBanner(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* Used ASCII art generator from https://patorjk.com with font called "Colossal" */
  LOG_info("");
 80011fc:	4914      	ldr	r1, [pc, #80]	; (8001250 <MAIN_displayRcfwBanner+0x58>)
 80011fe:	2001      	movs	r0, #1
 8001200:	f009 fb5c 	bl	800a8bc <LOG_log>
  LOG_info("    8888888b.        .d8888b.       8888888888      888       888"  );
 8001204:	4913      	ldr	r1, [pc, #76]	; (8001254 <MAIN_displayRcfwBanner+0x5c>)
 8001206:	2001      	movs	r0, #1
 8001208:	f009 fb58 	bl	800a8bc <LOG_log>
  LOG_info("    888   Y88b      d88P  Y88b      888             888   o   888"  );
 800120c:	4912      	ldr	r1, [pc, #72]	; (8001258 <MAIN_displayRcfwBanner+0x60>)
 800120e:	2001      	movs	r0, #1
 8001210:	f009 fb54 	bl	800a8bc <LOG_log>
  LOG_info("    888    888      888    888      888             888  d8b  888"  );
 8001214:	4911      	ldr	r1, [pc, #68]	; (800125c <MAIN_displayRcfwBanner+0x64>)
 8001216:	2001      	movs	r0, #1
 8001218:	f009 fb50 	bl	800a8bc <LOG_log>
  LOG_info("    888   d88P      888             8888888         888 d888b 888"  );
 800121c:	4910      	ldr	r1, [pc, #64]	; (8001260 <MAIN_displayRcfwBanner+0x68>)
 800121e:	2001      	movs	r0, #1
 8001220:	f009 fb4c 	bl	800a8bc <LOG_log>
  LOG_info("    8888888P\"       888             888             888d88888b888" );
 8001224:	490f      	ldr	r1, [pc, #60]	; (8001264 <MAIN_displayRcfwBanner+0x6c>)
 8001226:	2001      	movs	r0, #1
 8001228:	f009 fb48 	bl	800a8bc <LOG_log>
  LOG_info("    888 T88b        888    888      888             88888P Y88888"  );
 800122c:	490e      	ldr	r1, [pc, #56]	; (8001268 <MAIN_displayRcfwBanner+0x70>)
 800122e:	2001      	movs	r0, #1
 8001230:	f009 fb44 	bl	800a8bc <LOG_log>
  LOG_info("    888  T88b       Y88b  d88P      888             8888P   Y8888"  );
 8001234:	490d      	ldr	r1, [pc, #52]	; (800126c <MAIN_displayRcfwBanner+0x74>)
 8001236:	2001      	movs	r0, #1
 8001238:	f009 fb40 	bl	800a8bc <LOG_log>
  LOG_info("    888   T88b       \"Y8888P\"       888             888P     Y888");
 800123c:	490c      	ldr	r1, [pc, #48]	; (8001270 <MAIN_displayRcfwBanner+0x78>)
 800123e:	2001      	movs	r0, #1
 8001240:	f009 fb3c 	bl	800a8bc <LOG_log>
  LOG_info("");
 8001244:	4902      	ldr	r1, [pc, #8]	; (8001250 <MAIN_displayRcfwBanner+0x58>)
 8001246:	2001      	movs	r0, #1
 8001248:	f009 fb38 	bl	800a8bc <LOG_log>

  return;
 800124c:	bf00      	nop
}
 800124e:	bd80      	pop	{r7, pc}
 8001250:	0800fe58 	.word	0x0800fe58
 8001254:	0800fe5c 	.word	0x0800fe5c
 8001258:	0800fea0 	.word	0x0800fea0
 800125c:	0800fee4 	.word	0x0800fee4
 8001260:	0800ff28 	.word	0x0800ff28
 8001264:	0800ff6c 	.word	0x0800ff6c
 8001268:	0800ffb0 	.word	0x0800ffb0
 800126c:	0800fff4 	.word	0x0800fff4
 8001270:	08010038 	.word	0x08010038

08001274 <MAIN_togglePrintOutput>:

static void MAIN_togglePrintOutput(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  if (g_MAIN_printOutput == MAIN_PRINT_OUTPUT_TO_CONSOLE)
 8001278:	4b0a      	ldr	r3, [pc, #40]	; (80012a4 <MAIN_togglePrintOutput+0x30>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d107      	bne.n	8001290 <MAIN_togglePrintOutput+0x1c>
  {
    LOG_info("Directing print to MASTER");
 8001280:	4909      	ldr	r1, [pc, #36]	; (80012a8 <MAIN_togglePrintOutput+0x34>)
 8001282:	2001      	movs	r0, #1
 8001284:	f009 fb1a 	bl	800a8bc <LOG_log>

    g_MAIN_printOutput = MAIN_PRINT_OUTPUT_TO_MASTER;
 8001288:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <MAIN_togglePrintOutput+0x30>)
 800128a:	2201      	movs	r2, #1
 800128c:	701a      	strb	r2, [r3, #0]
    LOG_info("Directing print to CONSOLE");

    g_MAIN_printOutput = MAIN_PRINT_OUTPUT_TO_CONSOLE;
  }

  return;
 800128e:	e007      	b.n	80012a0 <MAIN_togglePrintOutput+0x2c>
    LOG_info("Directing print to CONSOLE");
 8001290:	4906      	ldr	r1, [pc, #24]	; (80012ac <MAIN_togglePrintOutput+0x38>)
 8001292:	2001      	movs	r0, #1
 8001294:	f009 fb12 	bl	800a8bc <LOG_log>
    g_MAIN_printOutput = MAIN_PRINT_OUTPUT_TO_CONSOLE;
 8001298:	4b02      	ldr	r3, [pc, #8]	; (80012a4 <MAIN_togglePrintOutput+0x30>)
 800129a:	2200      	movs	r2, #0
 800129c:	701a      	strb	r2, [r3, #0]
  return;
 800129e:	bf00      	nop
}
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	20000a50 	.word	0x20000a50
 80012a8:	0801007c 	.word	0x0801007c
 80012ac:	08010098 	.word	0x08010098

080012b0 <MAIN_updateSwReset>:

static void MAIN_updateSwReset(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
  GPIO_PinState l_pinState;

  l_pinState = HAL_GPIO_ReadPin(SW_RESET_GPIO_Port, SW_RESET_Pin);
 80012b6:	2101      	movs	r1, #1
 80012b8:	4816      	ldr	r0, [pc, #88]	; (8001314 <MAIN_updateSwReset+0x64>)
 80012ba:	f002 fe69 	bl	8003f90 <HAL_GPIO_ReadPin>
 80012be:	4603      	mov	r3, r0
 80012c0:	71fb      	strb	r3, [r7, #7]

  if (l_pinState == GPIO_PIN_SET)
 80012c2:	79fb      	ldrb	r3, [r7, #7]
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d021      	beq.n	800130c <MAIN_updateSwReset+0x5c>
  {
    ; /* Nothing to do */
  }
  else
  {
    LOG_info("SW reset will be triggered in 3s");
 80012c8:	4913      	ldr	r1, [pc, #76]	; (8001318 <MAIN_updateSwReset+0x68>)
 80012ca:	2001      	movs	r0, #1
 80012cc:	f009 faf6 	bl	800a8bc <LOG_log>
    HAL_Delay(1000);
 80012d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012d4:	f001 fd34 	bl	8002d40 <HAL_Delay>
    LOG_info("SW reset will be triggered in 2s");
 80012d8:	4910      	ldr	r1, [pc, #64]	; (800131c <MAIN_updateSwReset+0x6c>)
 80012da:	2001      	movs	r0, #1
 80012dc:	f009 faee 	bl	800a8bc <LOG_log>
    HAL_Delay(1000);
 80012e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012e4:	f001 fd2c 	bl	8002d40 <HAL_Delay>
    LOG_info("SW reset will be triggered in 1s");
 80012e8:	490d      	ldr	r1, [pc, #52]	; (8001320 <MAIN_updateSwReset+0x70>)
 80012ea:	2001      	movs	r0, #1
 80012ec:	f009 fae6 	bl	800a8bc <LOG_log>
    HAL_Delay(1000);
 80012f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012f4:	f001 fd24 	bl	8002d40 <HAL_Delay>
    LOG_info("Resetting...");
 80012f8:	490a      	ldr	r1, [pc, #40]	; (8001324 <MAIN_updateSwReset+0x74>)
 80012fa:	2001      	movs	r0, #1
 80012fc:	f009 fade 	bl	800a8bc <LOG_log>
    HAL_Delay(100);
 8001300:	2064      	movs	r0, #100	; 0x64
 8001302:	f001 fd1d 	bl	8002d40 <HAL_Delay>

    HAL_NVIC_SystemReset();
 8001306:	f002 fa5d 	bl	80037c4 <HAL_NVIC_SystemReset>
  }

  return;
 800130a:	bf00      	nop
 800130c:	bf00      	nop
}
 800130e:	3708      	adds	r7, #8
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	40011000 	.word	0x40011000
 8001318:	080100b4 	.word	0x080100b4
 800131c:	080100d8 	.word	0x080100d8
 8001320:	080100fc 	.word	0x080100fc
 8001324:	08010120 	.word	0x08010120

08001328 <MAIN_updateLogSetup>:

static void MAIN_updateLogSetup(T_BLU_Data *p_data, uint32_t p_timeInS)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	6039      	str	r1, [r7, #0]
  switch (p_data->button)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	7c1b      	ldrb	r3, [r3, #16]
 8001336:	3b05      	subs	r3, #5
 8001338:	2b03      	cmp	r3, #3
 800133a:	d85b      	bhi.n	80013f4 <MAIN_updateLogSetup+0xcc>
 800133c:	a201      	add	r2, pc, #4	; (adr r2, 8001344 <MAIN_updateLogSetup+0x1c>)
 800133e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001342:	bf00      	nop
 8001344:	08001355 	.word	0x08001355
 8001348:	080013cd 	.word	0x080013cd
 800134c:	0800137d 	.word	0x0800137d
 8001350:	080013a5 	.word	0x080013a5
  {
    case BLU_BUTTON_PAD_UP:
      if (g_MAIN_padUpPressedStartTimeInS == 0)
 8001354:	4b35      	ldr	r3, [pc, #212]	; (800142c <MAIN_updateLogSetup+0x104>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d105      	bne.n	8001368 <MAIN_updateLogSetup+0x40>
      {
        g_MAIN_padUpPressedStartTimeInS = p_timeInS;
 800135c:	4a33      	ldr	r2, [pc, #204]	; (800142c <MAIN_updateLogSetup+0x104>)
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	6013      	str	r3, [r2, #0]

        LOG_increaseLevel();
 8001362:	f009 fa7b 	bl	800a85c <LOG_increaseLevel>
      }
      else
      {
        g_MAIN_padUpPressedStartTimeInS = 0;
      }
      break;
 8001366:	e047      	b.n	80013f8 <MAIN_updateLogSetup+0xd0>
      else if (p_timeInS - g_MAIN_padUpPressedStartTimeInS < STP_BUTTONS_DEBOUNCE_PERIOD_IN_S)
 8001368:	4b30      	ldr	r3, [pc, #192]	; (800142c <MAIN_updateLogSetup+0x104>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	683a      	ldr	r2, [r7, #0]
 800136e:	1ad3      	subs	r3, r2, r3
 8001370:	2b01      	cmp	r3, #1
 8001372:	d941      	bls.n	80013f8 <MAIN_updateLogSetup+0xd0>
        g_MAIN_padUpPressedStartTimeInS = 0;
 8001374:	4b2d      	ldr	r3, [pc, #180]	; (800142c <MAIN_updateLogSetup+0x104>)
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
      break;
 800137a:	e03d      	b.n	80013f8 <MAIN_updateLogSetup+0xd0>

    case BLU_BUTTON_PAD_DOWN:
      if (g_MAIN_padDownPressedStartTimeInS == 0)
 800137c:	4b2c      	ldr	r3, [pc, #176]	; (8001430 <MAIN_updateLogSetup+0x108>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d105      	bne.n	8001390 <MAIN_updateLogSetup+0x68>
      {
        g_MAIN_padDownPressedStartTimeInS = p_timeInS;
 8001384:	4a2a      	ldr	r2, [pc, #168]	; (8001430 <MAIN_updateLogSetup+0x108>)
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	6013      	str	r3, [r2, #0]

        LOG_decreaseLevel();
 800138a:	f009 fa7f 	bl	800a88c <LOG_decreaseLevel>
      }
      else
      {
        g_MAIN_padDownPressedStartTimeInS = 0;
      }
      break;
 800138e:	e035      	b.n	80013fc <MAIN_updateLogSetup+0xd4>
      else if (p_timeInS - g_MAIN_padDownPressedStartTimeInS < STP_BUTTONS_DEBOUNCE_PERIOD_IN_S)
 8001390:	4b27      	ldr	r3, [pc, #156]	; (8001430 <MAIN_updateLogSetup+0x108>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	683a      	ldr	r2, [r7, #0]
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	2b01      	cmp	r3, #1
 800139a:	d92f      	bls.n	80013fc <MAIN_updateLogSetup+0xd4>
        g_MAIN_padDownPressedStartTimeInS = 0;
 800139c:	4b24      	ldr	r3, [pc, #144]	; (8001430 <MAIN_updateLogSetup+0x108>)
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
      break;
 80013a2:	e02b      	b.n	80013fc <MAIN_updateLogSetup+0xd4>

    case BLU_BUTTON_PAD_LEFT:
      if (g_MAIN_padLeftPressedStartTimeInS == 0)
 80013a4:	4b23      	ldr	r3, [pc, #140]	; (8001434 <MAIN_updateLogSetup+0x10c>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d105      	bne.n	80013b8 <MAIN_updateLogSetup+0x90>
      {
        g_MAIN_padLeftPressedStartTimeInS = p_timeInS;
 80013ac:	4a21      	ldr	r2, [pc, #132]	; (8001434 <MAIN_updateLogSetup+0x10c>)
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	6013      	str	r3, [r2, #0]

        LOG_toggleOnOff();
 80013b2:	f009 fa25 	bl	800a800 <LOG_toggleOnOff>
      }
      else
      {
        g_MAIN_padLeftPressedStartTimeInS = 0;
      }
      break;
 80013b6:	e023      	b.n	8001400 <MAIN_updateLogSetup+0xd8>
      else if (p_timeInS - g_MAIN_padLeftPressedStartTimeInS < STP_BUTTONS_DEBOUNCE_PERIOD_IN_S)
 80013b8:	4b1e      	ldr	r3, [pc, #120]	; (8001434 <MAIN_updateLogSetup+0x10c>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	683a      	ldr	r2, [r7, #0]
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d91d      	bls.n	8001400 <MAIN_updateLogSetup+0xd8>
        g_MAIN_padLeftPressedStartTimeInS = 0;
 80013c4:	4b1b      	ldr	r3, [pc, #108]	; (8001434 <MAIN_updateLogSetup+0x10c>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
      break;
 80013ca:	e019      	b.n	8001400 <MAIN_updateLogSetup+0xd8>

    case BLU_BUTTON_PAD_RIGHT:
      if (g_MAIN_padRightPressedStartTimeInS == 0)
 80013cc:	4b1a      	ldr	r3, [pc, #104]	; (8001438 <MAIN_updateLogSetup+0x110>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d105      	bne.n	80013e0 <MAIN_updateLogSetup+0xb8>
      {
        g_MAIN_padRightPressedStartTimeInS = p_timeInS;
 80013d4:	4a18      	ldr	r2, [pc, #96]	; (8001438 <MAIN_updateLogSetup+0x110>)
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	6013      	str	r3, [r2, #0]

        MAIN_togglePrintOutput();
 80013da:	f7ff ff4b 	bl	8001274 <MAIN_togglePrintOutput>
      }
      else
      {
        g_MAIN_padRightPressedStartTimeInS = 0;
      }
      break;
 80013de:	e011      	b.n	8001404 <MAIN_updateLogSetup+0xdc>
      else if (p_timeInS - g_MAIN_padRightPressedStartTimeInS < STP_BUTTONS_DEBOUNCE_PERIOD_IN_S)
 80013e0:	4b15      	ldr	r3, [pc, #84]	; (8001438 <MAIN_updateLogSetup+0x110>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	683a      	ldr	r2, [r7, #0]
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d90b      	bls.n	8001404 <MAIN_updateLogSetup+0xdc>
        g_MAIN_padRightPressedStartTimeInS = 0;
 80013ec:	4b12      	ldr	r3, [pc, #72]	; (8001438 <MAIN_updateLogSetup+0x110>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]
      break;
 80013f2:	e007      	b.n	8001404 <MAIN_updateLogSetup+0xdc>

    default:
      ; /* Nothing to do */;
      break;
 80013f4:	bf00      	nop
 80013f6:	e006      	b.n	8001406 <MAIN_updateLogSetup+0xde>
      break;
 80013f8:	bf00      	nop
 80013fa:	e004      	b.n	8001406 <MAIN_updateLogSetup+0xde>
      break;
 80013fc:	bf00      	nop
 80013fe:	e002      	b.n	8001406 <MAIN_updateLogSetup+0xde>
      break;
 8001400:	bf00      	nop
 8001402:	e000      	b.n	8001406 <MAIN_updateLogSetup+0xde>
      break;
 8001404:	bf00      	nop
  }

  if ((p_data->button != BLU_BUTTON_PAD_UP) && (p_data->button != BLU_BUTTON_PAD_DOWN))
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	7c1b      	ldrb	r3, [r3, #16]
 800140a:	2b05      	cmp	r3, #5
 800140c:	d00a      	beq.n	8001424 <MAIN_updateLogSetup+0xfc>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	7c1b      	ldrb	r3, [r3, #16]
 8001412:	2b07      	cmp	r3, #7
 8001414:	d006      	beq.n	8001424 <MAIN_updateLogSetup+0xfc>
  {
    g_MAIN_padUpPressedStartTimeInS   = 0;
 8001416:	4b05      	ldr	r3, [pc, #20]	; (800142c <MAIN_updateLogSetup+0x104>)
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
    g_MAIN_padDownPressedStartTimeInS = 0;
 800141c:	4b04      	ldr	r3, [pc, #16]	; (8001430 <MAIN_updateLogSetup+0x108>)
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
  else
  {
    ; /* Nothing to do */;
  }

  return;
 8001422:	bf00      	nop
 8001424:	bf00      	nop
}
 8001426:	3708      	adds	r7, #8
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	2000020c 	.word	0x2000020c
 8001430:	20000210 	.word	0x20000210
 8001434:	20000214 	.word	0x20000214
 8001438:	20000218 	.word	0x20000218

0800143c <MAIN_updateLedMode>:

static void MAIN_updateLedMode(T_DRV_MODE p_driveMode, uint32_t p_voltageInMv)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	4603      	mov	r3, r0
 8001444:	6039      	str	r1, [r7, #0]
 8001446:	71fb      	strb	r3, [r7, #7]
  /* Regarding LED mode, battery check is prioritary on user requests. */
  /* Ignore 0 value as we could get it at startup or while debugging.  */
  if ((p_voltageInMv != 0) && (p_voltageInMv < STP_MIN_BATTERY_LEVEL_IN_MV))
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d00d      	beq.n	800146a <MAIN_updateLedMode+0x2e>
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	f242 720f 	movw	r2, #9999	; 0x270f
 8001454:	4293      	cmp	r3, r2
 8001456:	d808      	bhi.n	800146a <MAIN_updateLedMode+0x2e>
  {
    LOG_warning("Battery is getting low: %u mV", p_voltageInMv);
 8001458:	683a      	ldr	r2, [r7, #0]
 800145a:	4911      	ldr	r1, [pc, #68]	; (80014a0 <MAIN_updateLedMode+0x64>)
 800145c:	2002      	movs	r0, #2
 800145e:	f009 fa2d 	bl	800a8bc <LOG_log>

    LED_setMode(LED_MODE_FORCED_OFF);
 8001462:	2000      	movs	r0, #0
 8001464:	f009 f90c 	bl	800a680 <LED_setMode>
 8001468:	e016      	b.n	8001498 <MAIN_updateLedMode+0x5c>
  }
  else
  {
    switch (p_driveMode)
 800146a:	79fb      	ldrb	r3, [r7, #7]
 800146c:	2b02      	cmp	r3, #2
 800146e:	d00e      	beq.n	800148e <MAIN_updateLedMode+0x52>
 8001470:	2b02      	cmp	r3, #2
 8001472:	dc10      	bgt.n	8001496 <MAIN_updateLedMode+0x5a>
 8001474:	2b00      	cmp	r3, #0
 8001476:	d002      	beq.n	800147e <MAIN_updateLedMode+0x42>
 8001478:	2b01      	cmp	r3, #1
 800147a:	d004      	beq.n	8001486 <MAIN_updateLedMode+0x4a>
        LED_setMode(LED_MODE_BLINK_FAST);
        break;

      default:
        ; /* Nothing to do */
        break;
 800147c:	e00b      	b.n	8001496 <MAIN_updateLedMode+0x5a>
        LED_setMode(LED_MODE_BLINK_SLOW);
 800147e:	2002      	movs	r0, #2
 8001480:	f009 f8fe 	bl	800a680 <LED_setMode>
        break;
 8001484:	e008      	b.n	8001498 <MAIN_updateLedMode+0x5c>
        LED_setMode(LED_MODE_BLINK_MEDIUM);
 8001486:	2003      	movs	r0, #3
 8001488:	f009 f8fa 	bl	800a680 <LED_setMode>
        break;
 800148c:	e004      	b.n	8001498 <MAIN_updateLedMode+0x5c>
        LED_setMode(LED_MODE_BLINK_FAST);
 800148e:	2004      	movs	r0, #4
 8001490:	f009 f8f6 	bl	800a680 <LED_setMode>
        break;
 8001494:	e000      	b.n	8001498 <MAIN_updateLedMode+0x5c>
        break;
 8001496:	bf00      	nop
    }
  }

  return;
 8001498:	bf00      	nop
}
 800149a:	3708      	adds	r7, #8
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	08010130 	.word	0x08010130

080014a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b090      	sub	sp, #64	; 0x40
 80014a8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014aa:	f001 fbe7 	bl	8002c7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014ae:	f000 fa51 	bl	8001954 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014b2:	f000 fe53 	bl	800215c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80014b6:	f000 fe27 	bl	8002108 <MX_USART1_UART_Init>
  MX_UART4_Init();
 80014ba:	f000 fdfb 	bl	80020b4 <MX_UART4_Init>
  MX_ADC1_Init();
 80014be:	f000 faa1 	bl	8001a04 <MX_ADC1_Init>
  MX_RTC_Init();
 80014c2:	f000 fadd 	bl	8001a80 <MX_RTC_Init>
  MX_TIM1_Init();
 80014c6:	f000 fb25 	bl	8001b14 <MX_TIM1_Init>
  MX_TIM2_Init();
 80014ca:	f000 fb73 	bl	8001bb4 <MX_TIM2_Init>
  MX_TIM3_Init();
 80014ce:	f000 fbc5 	bl	8001c5c <MX_TIM3_Init>
  MX_TIM4_Init();
 80014d2:	f000 fc17 	bl	8001d04 <MX_TIM4_Init>
  MX_TIM5_Init();
 80014d6:	f000 fc69 	bl	8001dac <MX_TIM5_Init>
  MX_TIM6_Init();
 80014da:	f000 fcbb 	bl	8001e54 <MX_TIM6_Init>
  MX_TIM7_Init();
 80014de:	f000 fcef 	bl	8001ec0 <MX_TIM7_Init>
  MX_TIM8_Init();
 80014e2:	f000 fd23 	bl	8001f2c <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */

  /* Setup local variables */
  l_halReturnCode  = HAL_OK;
 80014e6:	2300      	movs	r3, #0
 80014e8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  l_driveMode      = STP_DEFAULT_DRIVE_MODE;
 80014ec:	2300      	movs	r3, #0
 80014ee:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  l_currentTimeInS = 0;
 80014f2:	2300      	movs	r3, #0
 80014f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  l_voltageInMv    = 0;
 80014f6:	2300      	movs	r3, #0
 80014f8:	603b      	str	r3, [r7, #0]

  SFO_init        (&l_commandsFifo );
 80014fa:	f107 0320 	add.w	r3, r7, #32
 80014fe:	4618      	mov	r0, r3
 8001500:	f009 fe32 	bl	800b168 <SFO_init>
  BLU_initData    (&l_bluetoothData);
 8001504:	f107 030c 	add.w	r3, r7, #12
 8001508:	4618      	mov	r0, r3
 800150a:	f007 fe3f 	bl	800918c <BLU_initData>
  UTI_resetRtcTime(&l_rtcTime      );
 800150e:	f107 0308 	add.w	r3, r7, #8
 8001512:	4618      	mov	r0, r3
 8001514:	f009 ff6b 	bl	800b3ee <UTI_resetRtcTime>
  UTI_resetRtcDate(&l_rtcDate      );
 8001518:	1d3b      	adds	r3, r7, #4
 800151a:	4618      	mov	r0, r3
 800151c:	f009 ff52 	bl	800b3c4 <UTI_resetRtcDate>

  /* Setup global variables */
  g_MAIN_padUpPressedStartTimeInS    = 0;
 8001520:	4b85      	ldr	r3, [pc, #532]	; (8001738 <main+0x294>)
 8001522:	2200      	movs	r2, #0
 8001524:	601a      	str	r2, [r3, #0]
  g_MAIN_padDownPressedStartTimeInS  = 0;
 8001526:	4b85      	ldr	r3, [pc, #532]	; (800173c <main+0x298>)
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
  g_MAIN_padLeftPressedStartTimeInS  = 0;
 800152c:	4b84      	ldr	r3, [pc, #528]	; (8001740 <main+0x29c>)
 800152e:	2200      	movs	r2, #0
 8001530:	601a      	str	r2, [r3, #0]
  g_MAIN_padRightPressedStartTimeInS = 0;
 8001532:	4b84      	ldr	r3, [pc, #528]	; (8001744 <main+0x2a0>)
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
  g_MAIN_swResetPollingLastTimeInS   = 0;
 8001538:	4b83      	ldr	r3, [pc, #524]	; (8001748 <main+0x2a4>)
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]
  g_MAIN_batteryPollingLastTimeInS   = 0;
 800153e:	4b83      	ldr	r3, [pc, #524]	; (800174c <main+0x2a8>)
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
  g_MAIN_ledModeUpdateLastTimeInS    = 0;
 8001544:	4b82      	ldr	r3, [pc, #520]	; (8001750 <main+0x2ac>)
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]
  g_MAIN_driveLogInfoLastTimeInS     = 0;
 800154a:	4b82      	ldr	r3, [pc, #520]	; (8001754 <main+0x2b0>)
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
  g_MAIN_velocityReportLastTimeInS   = 0;
 8001550:	4b81      	ldr	r3, [pc, #516]	; (8001758 <main+0x2b4>)
 8001552:	2200      	movs	r2, #0
 8001554:	601a      	str	r2, [r3, #0]
  g_MAIN_printOutput                 = MAIN_PRINT_OUTPUT_TO_CONSOLE;
 8001556:	4b81      	ldr	r3, [pc, #516]	; (800175c <main+0x2b8>)
 8001558:	2200      	movs	r2, #0
 800155a:	701a      	strb	r2, [r3, #0]

  /* Setup console */
  CON_init(&huart1);
 800155c:	4880      	ldr	r0, [pc, #512]	; (8001760 <main+0x2bc>)
 800155e:	f007 ff55 	bl	800940c <CON_init>

  /* Setup master connection */
  MAS_init(&huart4);
 8001562:	4880      	ldr	r0, [pc, #512]	; (8001764 <main+0x2c0>)
 8001564:	f009 fa38 	bl	800a9d8 <MAS_init>

#ifdef DEBUG

  /* Temporary delay/workaround to deal with debugger connection issue */
  for (int i = 0; i < 10; i++)
 8001568:	2300      	movs	r3, #0
 800156a:	637b      	str	r3, [r7, #52]	; 0x34
 800156c:	e006      	b.n	800157c <main+0xd8>
  {
    HAL_Delay(1000);
 800156e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001572:	f001 fbe5 	bl	8002d40 <HAL_Delay>
  for (int i = 0; i < 10; i++)
 8001576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001578:	3301      	adds	r3, #1
 800157a:	637b      	str	r3, [r7, #52]	; 0x34
 800157c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800157e:	2b09      	cmp	r3, #9
 8001580:	ddf5      	ble.n	800156e <main+0xca>
  }

#endif

  /* Setup and start using logs */
  LOG_init    (&hrtc, STP_DEFAULT_IS_LOG_ON);
 8001582:	2101      	movs	r1, #1
 8001584:	4878      	ldr	r0, [pc, #480]	; (8001768 <main+0x2c4>)
 8001586:	f009 f923 	bl	800a7d0 <LOG_init>
  LOG_setLevel(STP_DEFAULT_LOG_LEVEL       );
 800158a:	2000      	movs	r0, #0
 800158c:	f009 f956 	bl	800a83c <LOG_setLevel>
  LOG_info    ("Starting RCFW"             );
 8001590:	4976      	ldr	r1, [pc, #472]	; (800176c <main+0x2c8>)
 8001592:	2001      	movs	r0, #1
 8001594:	f009 f992 	bl	800a8bc <LOG_log>

  /* Display RCFW banner */
  MAIN_displayRcfwBanner();
 8001598:	f7ff fe2e 	bl	80011f8 <MAIN_displayRcfwBanner>

  /* Initialize Timer 6 */
  l_halReturnCode = HAL_TIM_Base_Start(&htim6);
 800159c:	4874      	ldr	r0, [pc, #464]	; (8001770 <main+0x2cc>)
 800159e:	f004 fcd9 	bl	8005f54 <HAL_TIM_Base_Start>
 80015a2:	4603      	mov	r3, r0
 80015a4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  if (l_halReturnCode != HAL_OK)
 80015a8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d007      	beq.n	80015c0 <main+0x11c>
  {
    LOG_error("HAL_TIM_Base_Start(&htim6) returned an error code: %d", l_halReturnCode);
 80015b0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80015b4:	461a      	mov	r2, r3
 80015b6:	496f      	ldr	r1, [pc, #444]	; (8001774 <main+0x2d0>)
 80015b8:	2003      	movs	r0, #3
 80015ba:	f009 f97f 	bl	800a8bc <LOG_log>
 80015be:	e003      	b.n	80015c8 <main+0x124>
  }
  else
  {
    LOG_info("Started TIMER 6 (time measurement)");
 80015c0:	496d      	ldr	r1, [pc, #436]	; (8001778 <main+0x2d4>)
 80015c2:	2001      	movs	r0, #1
 80015c4:	f009 f97a 	bl	800a8bc <LOG_log>
  }

  /* Initialize Timer 7 and delay function in utilities */
  UTI_init(&htim7);
 80015c8:	486c      	ldr	r0, [pc, #432]	; (800177c <main+0x2d8>)
 80015ca:	f009 fecd 	bl	800b368 <UTI_init>

  l_halReturnCode = HAL_TIM_Base_Start_IT(&htim7);
 80015ce:	486b      	ldr	r0, [pc, #428]	; (800177c <main+0x2d8>)
 80015d0:	f004 fd4a 	bl	8006068 <HAL_TIM_Base_Start_IT>
 80015d4:	4603      	mov	r3, r0
 80015d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  if (l_halReturnCode != HAL_OK)
 80015da:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d007      	beq.n	80015f2 <main+0x14e>
  {
    LOG_error("HAL_TIM_Base_Start_IT(&htim7) returned an error code: %d", l_halReturnCode);
 80015e2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80015e6:	461a      	mov	r2, r3
 80015e8:	4965      	ldr	r1, [pc, #404]	; (8001780 <main+0x2dc>)
 80015ea:	2003      	movs	r0, #3
 80015ec:	f009 f966 	bl	800a8bc <LOG_log>
 80015f0:	e003      	b.n	80015fa <main+0x156>
  }
  else
  {
    LOG_info("Started TIMER 7 (utilities/delay)");
 80015f2:	4964      	ldr	r1, [pc, #400]	; (8001784 <main+0x2e0>)
 80015f4:	2001      	movs	r0, #1
 80015f6:	f009 f961 	bl	800a8bc <LOG_log>
  }

  /* Initialize Timer 1 & green LED */
  LED_setMode(LED_MODE_BLINK_FAST);
 80015fa:	2004      	movs	r0, #4
 80015fc:	f009 f840 	bl	800a680 <LED_setMode>

  l_halReturnCode = HAL_TIM_Base_Start_IT(&htim1);
 8001600:	4861      	ldr	r0, [pc, #388]	; (8001788 <main+0x2e4>)
 8001602:	f004 fd31 	bl	8006068 <HAL_TIM_Base_Start_IT>
 8001606:	4603      	mov	r3, r0
 8001608:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  if (l_halReturnCode != HAL_OK)
 800160c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001610:	2b00      	cmp	r3, #0
 8001612:	d007      	beq.n	8001624 <main+0x180>
  {
    LOG_error("HAL_TIM_Base_Start_IT(&htim1) returned an error code: %d", l_halReturnCode);
 8001614:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001618:	461a      	mov	r2, r3
 800161a:	495c      	ldr	r1, [pc, #368]	; (800178c <main+0x2e8>)
 800161c:	2003      	movs	r0, #3
 800161e:	f009 f94d 	bl	800a8bc <LOG_log>
 8001622:	e003      	b.n	800162c <main+0x188>
  }
  else
  {
    LOG_info("Started TIMER 1 (green LED)");
 8001624:	495a      	ldr	r1, [pc, #360]	; (8001790 <main+0x2ec>)
 8001626:	2001      	movs	r0, #1
 8001628:	f009 f948 	bl	800a8bc <LOG_log>
  }

  /* Initialize Timers 2, 3, 4 & 5 */
  l_halReturnCode  = HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 800162c:	213c      	movs	r1, #60	; 0x3c
 800162e:	4859      	ldr	r0, [pc, #356]	; (8001794 <main+0x2f0>)
 8001630:	f005 f952 	bl	80068d8 <HAL_TIM_Encoder_Start_IT>
 8001634:	4603      	mov	r3, r0
 8001636:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  l_halReturnCode |= HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 800163a:	213c      	movs	r1, #60	; 0x3c
 800163c:	4856      	ldr	r0, [pc, #344]	; (8001798 <main+0x2f4>)
 800163e:	f005 f94b 	bl	80068d8 <HAL_TIM_Encoder_Start_IT>
 8001642:	4603      	mov	r3, r0
 8001644:	461a      	mov	r2, r3
 8001646:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800164a:	4313      	orrs	r3, r2
 800164c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  l_halReturnCode |= HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 8001650:	213c      	movs	r1, #60	; 0x3c
 8001652:	4852      	ldr	r0, [pc, #328]	; (800179c <main+0x2f8>)
 8001654:	f005 f940 	bl	80068d8 <HAL_TIM_Encoder_Start_IT>
 8001658:	4603      	mov	r3, r0
 800165a:	461a      	mov	r2, r3
 800165c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001660:	4313      	orrs	r3, r2
 8001662:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  l_halReturnCode |= HAL_TIM_Encoder_Start_IT(&htim5, TIM_CHANNEL_ALL);
 8001666:	213c      	movs	r1, #60	; 0x3c
 8001668:	484d      	ldr	r0, [pc, #308]	; (80017a0 <main+0x2fc>)
 800166a:	f005 f935 	bl	80068d8 <HAL_TIM_Encoder_Start_IT>
 800166e:	4603      	mov	r3, r0
 8001670:	461a      	mov	r2, r3
 8001672:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001676:	4313      	orrs	r3, r2
 8001678:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  if (l_halReturnCode != HAL_OK)
 800167c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001680:	2b00      	cmp	r3, #0
 8001682:	d007      	beq.n	8001694 <main+0x1f0>
  {
    LOG_error("HAL_TIM_Encoder_Start_IT(&htimX) returned error code(s): %d", l_halReturnCode);
 8001684:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001688:	461a      	mov	r2, r3
 800168a:	4946      	ldr	r1, [pc, #280]	; (80017a4 <main+0x300>)
 800168c:	2003      	movs	r0, #3
 800168e:	f009 f915 	bl	800a8bc <LOG_log>
 8001692:	e003      	b.n	800169c <main+0x1f8>
  }
  else
  {
    LOG_info("Started TIMER 2, 3, 4, 5 (encoders)");
 8001694:	4944      	ldr	r1, [pc, #272]	; (80017a8 <main+0x304>)
 8001696:	2001      	movs	r0, #1
 8001698:	f009 f910 	bl	800a8bc <LOG_log>
  }

  /* Initialize Timer 8 */
  l_halReturnCode = HAL_TIM_Base_Start(&htim8);
 800169c:	4843      	ldr	r0, [pc, #268]	; (80017ac <main+0x308>)
 800169e:	f004 fc59 	bl	8005f54 <HAL_TIM_Base_Start>
 80016a2:	4603      	mov	r3, r0
 80016a4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  if (l_halReturnCode != HAL_OK)
 80016a8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d007      	beq.n	80016c0 <main+0x21c>
  {
    LOG_error("HAL_TIM_Base_Start(&htim8) returned an error code: %d", l_halReturnCode);
 80016b0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80016b4:	461a      	mov	r2, r3
 80016b6:	493e      	ldr	r1, [pc, #248]	; (80017b0 <main+0x30c>)
 80016b8:	2003      	movs	r0, #3
 80016ba:	f009 f8ff 	bl	800a8bc <LOG_log>
 80016be:	e003      	b.n	80016c8 <main+0x224>
  }
  else
  {
    LOG_info("Started TIMER 8 (PWM channels)");
 80016c0:	493c      	ldr	r1, [pc, #240]	; (80017b4 <main+0x310>)
 80016c2:	2001      	movs	r0, #1
 80016c4:	f009 f8fa 	bl	800a8bc <LOG_log>
  }

  /* Initialize battery monitor */
  BAT_init(&hadc1);
 80016c8:	483b      	ldr	r0, [pc, #236]	; (80017b8 <main+0x314>)
 80016ca:	f007 fc11 	bl	8008ef0 <BAT_init>

  /* Initialize PWM channels */
  l_halReturnCode  = HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80016ce:	2100      	movs	r1, #0
 80016d0:	4836      	ldr	r0, [pc, #216]	; (80017ac <main+0x308>)
 80016d2:	f004 fe37 	bl	8006344 <HAL_TIM_PWM_Start>
 80016d6:	4603      	mov	r3, r0
 80016d8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  l_halReturnCode |= HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 80016dc:	2104      	movs	r1, #4
 80016de:	4833      	ldr	r0, [pc, #204]	; (80017ac <main+0x308>)
 80016e0:	f004 fe30 	bl	8006344 <HAL_TIM_PWM_Start>
 80016e4:	4603      	mov	r3, r0
 80016e6:	461a      	mov	r2, r3
 80016e8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80016ec:	4313      	orrs	r3, r2
 80016ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  l_halReturnCode |= HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 80016f2:	2108      	movs	r1, #8
 80016f4:	482d      	ldr	r0, [pc, #180]	; (80017ac <main+0x308>)
 80016f6:	f004 fe25 	bl	8006344 <HAL_TIM_PWM_Start>
 80016fa:	4603      	mov	r3, r0
 80016fc:	461a      	mov	r2, r3
 80016fe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001702:	4313      	orrs	r3, r2
 8001704:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  l_halReturnCode |= HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8001708:	210c      	movs	r1, #12
 800170a:	4828      	ldr	r0, [pc, #160]	; (80017ac <main+0x308>)
 800170c:	f004 fe1a 	bl	8006344 <HAL_TIM_PWM_Start>
 8001710:	4603      	mov	r3, r0
 8001712:	461a      	mov	r2, r3
 8001714:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001718:	4313      	orrs	r3, r2
 800171a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  if (l_halReturnCode != HAL_OK)
 800171e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001722:	2b00      	cmp	r3, #0
 8001724:	d04c      	beq.n	80017c0 <main+0x31c>
  {
    LOG_error("HAL_TIM_PWM_Start(&htim8) returned error code(s): %d", l_halReturnCode);
 8001726:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800172a:	461a      	mov	r2, r3
 800172c:	4923      	ldr	r1, [pc, #140]	; (80017bc <main+0x318>)
 800172e:	2003      	movs	r0, #3
 8001730:	f009 f8c4 	bl	800a8bc <LOG_log>
 8001734:	e048      	b.n	80017c8 <main+0x324>
 8001736:	bf00      	nop
 8001738:	2000020c 	.word	0x2000020c
 800173c:	20000210 	.word	0x20000210
 8001740:	20000214 	.word	0x20000214
 8001744:	20000218 	.word	0x20000218
 8001748:	2000021c 	.word	0x2000021c
 800174c:	20000220 	.word	0x20000220
 8001750:	20000224 	.word	0x20000224
 8001754:	20000228 	.word	0x20000228
 8001758:	2000022c 	.word	0x2000022c
 800175c:	20000a50 	.word	0x20000a50
 8001760:	20000860 	.word	0x20000860
 8001764:	20000a54 	.word	0x20000a54
 8001768:	200008d4 	.word	0x200008d4
 800176c:	08010150 	.word	0x08010150
 8001770:	200008e8 	.word	0x200008e8
 8001774:	08010160 	.word	0x08010160
 8001778:	08010198 	.word	0x08010198
 800177c:	20000b7c 	.word	0x20000b7c
 8001780:	080101bc 	.word	0x080101bc
 8001784:	080101f8 	.word	0x080101f8
 8001788:	2000099c 	.word	0x2000099c
 800178c:	0801021c 	.word	0x0801021c
 8001790:	08010258 	.word	0x08010258
 8001794:	20000ac8 	.word	0x20000ac8
 8001798:	2000077c 	.word	0x2000077c
 800179c:	20000614 	.word	0x20000614
 80017a0:	200006c8 	.word	0x200006c8
 80017a4:	08010274 	.word	0x08010274
 80017a8:	080102b0 	.word	0x080102b0
 80017ac:	20000560 	.word	0x20000560
 80017b0:	080102d4 	.word	0x080102d4
 80017b4:	0801030c 	.word	0x0801030c
 80017b8:	20000830 	.word	0x20000830
 80017bc:	0801032c 	.word	0x0801032c
  }
  else
  {
    LOG_info("Started PWM channels");
 80017c0:	4955      	ldr	r1, [pc, #340]	; (8001918 <main+0x474>)
 80017c2:	2001      	movs	r0, #1
 80017c4:	f009 f87a 	bl	800a8bc <LOG_log>
  }

  /* Initialize bluetooth control */
  BLU_init();
 80017c8:	f007 fcd0 	bl	800916c <BLU_init>

  /* Initialize driving module */
  DRV_init(&htim8, &htim6, &htim4, &htim5, &htim2, &htim3);
 80017cc:	4b53      	ldr	r3, [pc, #332]	; (800191c <main+0x478>)
 80017ce:	9301      	str	r3, [sp, #4]
 80017d0:	4b53      	ldr	r3, [pc, #332]	; (8001920 <main+0x47c>)
 80017d2:	9300      	str	r3, [sp, #0]
 80017d4:	4b53      	ldr	r3, [pc, #332]	; (8001924 <main+0x480>)
 80017d6:	4a54      	ldr	r2, [pc, #336]	; (8001928 <main+0x484>)
 80017d8:	4954      	ldr	r1, [pc, #336]	; (800192c <main+0x488>)
 80017da:	4855      	ldr	r0, [pc, #340]	; (8001930 <main+0x48c>)
 80017dc:	f007 fe9c 	bl	8009518 <DRV_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    l_driveMode = DRV_getMode();
 80017e0:	f008 fb62 	bl	8009ea8 <DRV_getMode>
 80017e4:	4603      	mov	r3, r0
 80017e6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

    l_halReturnCode = HAL_RTC_GetTime(&hrtc, &l_rtcTime, RTC_FORMAT_BCD);
 80017ea:	f107 0308 	add.w	r3, r7, #8
 80017ee:	2201      	movs	r2, #1
 80017f0:	4619      	mov	r1, r3
 80017f2:	4850      	ldr	r0, [pc, #320]	; (8001934 <main+0x490>)
 80017f4:	f003 fdd4 	bl	80053a0 <HAL_RTC_GetTime>
 80017f8:	4603      	mov	r3, r0
 80017fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

    if (l_halReturnCode != HAL_OK)
 80017fe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001802:	2b00      	cmp	r3, #0
 8001804:	d006      	beq.n	8001814 <main+0x370>
    {
      LOG_error("HAL_RTC_GetTime() returned an error code: %d", l_halReturnCode);
 8001806:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800180a:	461a      	mov	r2, r3
 800180c:	494a      	ldr	r1, [pc, #296]	; (8001938 <main+0x494>)
 800180e:	2003      	movs	r0, #3
 8001810:	f009 f854 	bl	800a8bc <LOG_log>
    else
    {
      ; /* Nothing to to */
    }

    l_halReturnCode = HAL_RTC_GetDate(&hrtc, &l_rtcDate, RTC_FORMAT_BCD);
 8001814:	1d3b      	adds	r3, r7, #4
 8001816:	2201      	movs	r2, #1
 8001818:	4619      	mov	r1, r3
 800181a:	4846      	ldr	r0, [pc, #280]	; (8001934 <main+0x490>)
 800181c:	f003 ffc4 	bl	80057a8 <HAL_RTC_GetDate>
 8001820:	4603      	mov	r3, r0
 8001822:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

    if (l_halReturnCode != HAL_OK)
 8001826:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800182a:	2b00      	cmp	r3, #0
 800182c:	d006      	beq.n	800183c <main+0x398>
    {
      LOG_error("HAL_RTC_GetDate() returned an error code: %d", l_halReturnCode);
 800182e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001832:	461a      	mov	r2, r3
 8001834:	4941      	ldr	r1, [pc, #260]	; (800193c <main+0x498>)
 8001836:	2003      	movs	r0, #3
 8001838:	f009 f840 	bl	800a8bc <LOG_log>
    else
    {
      ; /* Nothing to to */
    }

    l_currentTimeInS = UTI_turnRtcTimeToSeconds(&l_rtcTime);
 800183c:	f107 0308 	add.w	r3, r7, #8
 8001840:	4618      	mov	r0, r3
 8001842:	f009 fde6 	bl	800b412 <UTI_turnRtcTimeToSeconds>
 8001846:	62f8      	str	r0, [r7, #44]	; 0x2c

    if ((STP_SW_RESET_POLLING_PERIOD_IN_S != 0) &&
 8001848:	4b3d      	ldr	r3, [pc, #244]	; (8001940 <main+0x49c>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800184e:	429a      	cmp	r2, r3
 8001850:	d004      	beq.n	800185c <main+0x3b8>
        (l_currentTimeInS - g_MAIN_swResetPollingLastTimeInS >= STP_SW_RESET_POLLING_PERIOD_IN_S))
    {
      MAIN_updateSwReset();
 8001852:	f7ff fd2d 	bl	80012b0 <MAIN_updateSwReset>

      g_MAIN_swResetPollingLastTimeInS = l_currentTimeInS;
 8001856:	4a3a      	ldr	r2, [pc, #232]	; (8001940 <main+0x49c>)
 8001858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800185a:	6013      	str	r3, [r2, #0]
    {
      ; /* Nothing to do */
    }

    if ((STP_BATTERY_POLLING_PERIOD_IN_S != 0) &&
        (l_currentTimeInS - g_MAIN_batteryPollingLastTimeInS >= STP_BATTERY_POLLING_PERIOD_IN_S))
 800185c:	4b39      	ldr	r3, [pc, #228]	; (8001944 <main+0x4a0>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001862:	1ad3      	subs	r3, r2, r3
    if ((STP_BATTERY_POLLING_PERIOD_IN_S != 0) &&
 8001864:	2b09      	cmp	r3, #9
 8001866:	d906      	bls.n	8001876 <main+0x3d2>
    {
      BAT_update(&l_voltageInMv);
 8001868:	463b      	mov	r3, r7
 800186a:	4618      	mov	r0, r3
 800186c:	f007 fb54 	bl	8008f18 <BAT_update>

      g_MAIN_batteryPollingLastTimeInS = l_currentTimeInS;
 8001870:	4a34      	ldr	r2, [pc, #208]	; (8001944 <main+0x4a0>)
 8001872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001874:	6013      	str	r3, [r2, #0]
    else
    {
      ; /* Nothing to do */
    }

    if ((STP_LED_UPDATE_MODE_PERIOD_IN_S != 0) &&
 8001876:	4b34      	ldr	r3, [pc, #208]	; (8001948 <main+0x4a4>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800187c:	429a      	cmp	r2, r3
 800187e:	d009      	beq.n	8001894 <main+0x3f0>
        (l_currentTimeInS - g_MAIN_ledModeUpdateLastTimeInS >= STP_LED_UPDATE_MODE_PERIOD_IN_S))
    {
      MAIN_updateLedMode (l_driveMode, l_voltageInMv);
 8001880:	683a      	ldr	r2, [r7, #0]
 8001882:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8001886:	4611      	mov	r1, r2
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff fdd7 	bl	800143c <MAIN_updateLedMode>

      g_MAIN_ledModeUpdateLastTimeInS = l_currentTimeInS;
 800188e:	4a2e      	ldr	r2, [pc, #184]	; (8001948 <main+0x4a4>)
 8001890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001892:	6013      	str	r3, [r2, #0]
    else
    {
      ; /* Nothing to do */
    }

    BLU_receiveData        (&l_bluetoothData);
 8001894:	f107 030c 	add.w	r3, r7, #12
 8001898:	4618      	mov	r0, r3
 800189a:	f007 fc8f 	bl	80091bc <BLU_receiveData>
    MAIN_updateLogSetup    (&l_bluetoothData, l_currentTimeInS);
 800189e:	f107 030c 	add.w	r3, r7, #12
 80018a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7ff fd3f 	bl	8001328 <MAIN_updateLogSetup>
    DRV_updateFromBluetooth(&l_bluetoothData, l_currentTimeInS);
 80018aa:	f107 030c 	add.w	r3, r7, #12
 80018ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80018b0:	4618      	mov	r0, r3
 80018b2:	f007 ff0d 	bl	80096d0 <DRV_updateFromBluetooth>

    CON_updateFifo(&l_commandsFifo);
 80018b6:	f107 0320 	add.w	r3, r7, #32
 80018ba:	4618      	mov	r0, r3
 80018bc:	f007 fdf6 	bl	80094ac <CON_updateFifo>
    MAS_updateFifo(&l_commandsFifo);
 80018c0:	f107 0320 	add.w	r3, r7, #32
 80018c4:	4618      	mov	r0, r3
 80018c6:	f009 f8d7 	bl	800aa78 <MAS_updateFifo>

    if ((STP_DRIVE_LOG_INFO_PERIOD_IN_S != 0) &&
        (l_currentTimeInS - g_MAIN_driveLogInfoLastTimeInS >= STP_DRIVE_LOG_INFO_PERIOD_IN_S))
 80018ca:	4b20      	ldr	r3, [pc, #128]	; (800194c <main+0x4a8>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018d0:	1ad3      	subs	r3, r2, r3
    if ((STP_DRIVE_LOG_INFO_PERIOD_IN_S != 0) &&
 80018d2:	2b04      	cmp	r3, #4
 80018d4:	d909      	bls.n	80018ea <main+0x446>
    {
      DRV_updateFromCommands(&l_commandsFifo, true);
 80018d6:	f107 0320 	add.w	r3, r7, #32
 80018da:	2101      	movs	r1, #1
 80018dc:	4618      	mov	r0, r3
 80018de:	f008 f84f 	bl	8009980 <DRV_updateFromCommands>

      g_MAIN_driveLogInfoLastTimeInS = l_currentTimeInS;
 80018e2:	4a1a      	ldr	r2, [pc, #104]	; (800194c <main+0x4a8>)
 80018e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018e6:	6013      	str	r3, [r2, #0]
 80018e8:	e005      	b.n	80018f6 <main+0x452>
    }
    else
    {
      DRV_updateFromCommands(&l_commandsFifo, false);
 80018ea:	f107 0320 	add.w	r3, r7, #32
 80018ee:	2100      	movs	r1, #0
 80018f0:	4618      	mov	r0, r3
 80018f2:	f008 f845 	bl	8009980 <DRV_updateFromCommands>
    }

    if ((STP_VELOCITY_REPORT_PERIOD_IN_S != 0) &&
        (l_currentTimeInS - g_MAIN_velocityReportLastTimeInS >= STP_VELOCITY_REPORT_PERIOD_IN_S))
 80018f6:	4b16      	ldr	r3, [pc, #88]	; (8001950 <main+0x4ac>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018fc:	1ad3      	subs	r3, r2, r3
    if ((STP_VELOCITY_REPORT_PERIOD_IN_S != 0) &&
 80018fe:	2b04      	cmp	r3, #4
 8001900:	d904      	bls.n	800190c <main+0x468>
    {
      DRV_reportVelocity();
 8001902:	f008 fa91 	bl	8009e28 <DRV_reportVelocity>

      g_MAIN_velocityReportLastTimeInS = l_currentTimeInS;
 8001906:	4a12      	ldr	r2, [pc, #72]	; (8001950 <main+0x4ac>)
 8001908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800190a:	6013      	str	r3, [r2, #0]
    else
    {
      ; /* Nothing to do */
    }

    UTI_delayUs(MAIN_LOOP_DELAY_IN_MS);
 800190c:	f242 7010 	movw	r0, #10000	; 0x2710
 8001910:	f009 fd3e 	bl	800b390 <UTI_delayUs>
    l_driveMode = DRV_getMode();
 8001914:	e764      	b.n	80017e0 <main+0x33c>
 8001916:	bf00      	nop
 8001918:	08010364 	.word	0x08010364
 800191c:	2000077c 	.word	0x2000077c
 8001920:	20000ac8 	.word	0x20000ac8
 8001924:	200006c8 	.word	0x200006c8
 8001928:	20000614 	.word	0x20000614
 800192c:	200008e8 	.word	0x200008e8
 8001930:	20000560 	.word	0x20000560
 8001934:	200008d4 	.word	0x200008d4
 8001938:	0801037c 	.word	0x0801037c
 800193c:	080103ac 	.word	0x080103ac
 8001940:	2000021c 	.word	0x2000021c
 8001944:	20000220 	.word	0x20000220
 8001948:	20000224 	.word	0x20000224
 800194c:	20000228 	.word	0x20000228
 8001950:	2000022c 	.word	0x2000022c

08001954 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b096      	sub	sp, #88	; 0x58
 8001958:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800195a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800195e:	2228      	movs	r2, #40	; 0x28
 8001960:	2100      	movs	r1, #0
 8001962:	4618      	mov	r0, r3
 8001964:	f009 ffc4 	bl	800b8f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001968:	f107 031c 	add.w	r3, r7, #28
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	605a      	str	r2, [r3, #4]
 8001972:	609a      	str	r2, [r3, #8]
 8001974:	60da      	str	r2, [r3, #12]
 8001976:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001978:	1d3b      	adds	r3, r7, #4
 800197a:	2200      	movs	r2, #0
 800197c:	601a      	str	r2, [r3, #0]
 800197e:	605a      	str	r2, [r3, #4]
 8001980:	609a      	str	r2, [r3, #8]
 8001982:	60da      	str	r2, [r3, #12]
 8001984:	611a      	str	r2, [r3, #16]
 8001986:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001988:	230a      	movs	r3, #10
 800198a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800198c:	2301      	movs	r3, #1
 800198e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001990:	2310      	movs	r3, #16
 8001992:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001994:	2301      	movs	r3, #1
 8001996:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001998:	2300      	movs	r3, #0
 800199a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800199c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019a0:	4618      	mov	r0, r3
 80019a2:	f002 fb81 	bl	80040a8 <HAL_RCC_OscConfig>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80019ac:	f000 fce2 	bl	8002374 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019b0:	230f      	movs	r3, #15
 80019b2:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80019b4:	2300      	movs	r3, #0
 80019b6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019b8:	2300      	movs	r3, #0
 80019ba:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019bc:	2300      	movs	r3, #0
 80019be:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019c0:	2300      	movs	r3, #0
 80019c2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80019c4:	f107 031c 	add.w	r3, r7, #28
 80019c8:	2100      	movs	r1, #0
 80019ca:	4618      	mov	r0, r3
 80019cc:	f002 fedc 	bl	8004788 <HAL_RCC_ClockConfig>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <SystemClock_Config+0x86>
  {
    Error_Handler();
 80019d6:	f000 fccd 	bl	8002374 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 80019da:	2303      	movs	r3, #3
 80019dc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80019de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019e2:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80019e4:	2300      	movs	r3, #0
 80019e6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019e8:	1d3b      	adds	r3, r7, #4
 80019ea:	4618      	mov	r0, r3
 80019ec:	f003 f90c 	bl	8004c08 <HAL_RCCEx_PeriphCLKConfig>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80019f6:	f000 fcbd 	bl	8002374 <Error_Handler>
  }
}
 80019fa:	bf00      	nop
 80019fc:	3758      	adds	r7, #88	; 0x58
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
	...

08001a04 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a0a:	1d3b      	adds	r3, r7, #4
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	605a      	str	r2, [r3, #4]
 8001a12:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001a14:	4b18      	ldr	r3, [pc, #96]	; (8001a78 <MX_ADC1_Init+0x74>)
 8001a16:	4a19      	ldr	r2, [pc, #100]	; (8001a7c <MX_ADC1_Init+0x78>)
 8001a18:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001a1a:	4b17      	ldr	r3, [pc, #92]	; (8001a78 <MX_ADC1_Init+0x74>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001a20:	4b15      	ldr	r3, [pc, #84]	; (8001a78 <MX_ADC1_Init+0x74>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a26:	4b14      	ldr	r3, [pc, #80]	; (8001a78 <MX_ADC1_Init+0x74>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a2c:	4b12      	ldr	r3, [pc, #72]	; (8001a78 <MX_ADC1_Init+0x74>)
 8001a2e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001a32:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a34:	4b10      	ldr	r3, [pc, #64]	; (8001a78 <MX_ADC1_Init+0x74>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001a3a:	4b0f      	ldr	r3, [pc, #60]	; (8001a78 <MX_ADC1_Init+0x74>)
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a40:	480d      	ldr	r0, [pc, #52]	; (8001a78 <MX_ADC1_Init+0x74>)
 8001a42:	f001 f9a1 	bl	8002d88 <HAL_ADC_Init>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001a4c:	f000 fc92 	bl	8002374 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001a50:	2305      	movs	r3, #5
 8001a52:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a54:	2301      	movs	r3, #1
 8001a56:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a5c:	1d3b      	adds	r3, r7, #4
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4805      	ldr	r0, [pc, #20]	; (8001a78 <MX_ADC1_Init+0x74>)
 8001a62:	f001 fb5b 	bl	800311c <HAL_ADC_ConfigChannel>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001a6c:	f000 fc82 	bl	8002374 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a70:	bf00      	nop
 8001a72:	3710      	adds	r7, #16
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	20000830 	.word	0x20000830
 8001a7c:	40012400 	.word	0x40012400

08001a80 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001a86:	1d3b      	adds	r3, r7, #4
 8001a88:	2100      	movs	r1, #0
 8001a8a:	460a      	mov	r2, r1
 8001a8c:	801a      	strh	r2, [r3, #0]
 8001a8e:	460a      	mov	r2, r1
 8001a90:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8001a92:	2300      	movs	r3, #0
 8001a94:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001a96:	4b1d      	ldr	r3, [pc, #116]	; (8001b0c <MX_RTC_Init+0x8c>)
 8001a98:	4a1d      	ldr	r2, [pc, #116]	; (8001b10 <MX_RTC_Init+0x90>)
 8001a9a:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8001a9c:	4b1b      	ldr	r3, [pc, #108]	; (8001b0c <MX_RTC_Init+0x8c>)
 8001a9e:	f04f 32ff 	mov.w	r2, #4294967295
 8001aa2:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 8001aa4:	4b19      	ldr	r3, [pc, #100]	; (8001b0c <MX_RTC_Init+0x8c>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001aaa:	4818      	ldr	r0, [pc, #96]	; (8001b0c <MX_RTC_Init+0x8c>)
 8001aac:	f003 fac8 	bl	8005040 <HAL_RTC_Init>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <MX_RTC_Init+0x3a>
  {
    Error_Handler();
 8001ab6:	f000 fc5d 	bl	8002374 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001aba:	2300      	movs	r3, #0
 8001abc:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001ac6:	1d3b      	adds	r3, r7, #4
 8001ac8:	2201      	movs	r2, #1
 8001aca:	4619      	mov	r1, r3
 8001acc:	480f      	ldr	r0, [pc, #60]	; (8001b0c <MX_RTC_Init+0x8c>)
 8001ace:	f003 fb81 	bl	80051d4 <HAL_RTC_SetTime>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <MX_RTC_Init+0x5c>
  {
    Error_Handler();
 8001ad8:	f000 fc4c 	bl	8002374 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001adc:	2301      	movs	r3, #1
 8001ade:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8001aec:	463b      	mov	r3, r7
 8001aee:	2201      	movs	r2, #1
 8001af0:	4619      	mov	r1, r3
 8001af2:	4806      	ldr	r0, [pc, #24]	; (8001b0c <MX_RTC_Init+0x8c>)
 8001af4:	f003 fd3a 	bl	800556c <HAL_RTC_SetDate>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8001afe:	f000 fc39 	bl	8002374 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001b02:	bf00      	nop
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	200008d4 	.word	0x200008d4
 8001b10:	40002800 	.word	0x40002800

08001b14 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b086      	sub	sp, #24
 8001b18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b1a:	f107 0308 	add.w	r3, r7, #8
 8001b1e:	2200      	movs	r2, #0
 8001b20:	601a      	str	r2, [r3, #0]
 8001b22:	605a      	str	r2, [r3, #4]
 8001b24:	609a      	str	r2, [r3, #8]
 8001b26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b28:	463b      	mov	r3, r7
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	601a      	str	r2, [r3, #0]
 8001b2e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b30:	4b1e      	ldr	r3, [pc, #120]	; (8001bac <MX_TIM1_Init+0x98>)
 8001b32:	4a1f      	ldr	r2, [pc, #124]	; (8001bb0 <MX_TIM1_Init+0x9c>)
 8001b34:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7999;
 8001b36:	4b1d      	ldr	r3, [pc, #116]	; (8001bac <MX_TIM1_Init+0x98>)
 8001b38:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001b3c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b3e:	4b1b      	ldr	r3, [pc, #108]	; (8001bac <MX_TIM1_Init+0x98>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 249;
 8001b44:	4b19      	ldr	r3, [pc, #100]	; (8001bac <MX_TIM1_Init+0x98>)
 8001b46:	22f9      	movs	r2, #249	; 0xf9
 8001b48:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b4a:	4b18      	ldr	r3, [pc, #96]	; (8001bac <MX_TIM1_Init+0x98>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b50:	4b16      	ldr	r3, [pc, #88]	; (8001bac <MX_TIM1_Init+0x98>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b56:	4b15      	ldr	r3, [pc, #84]	; (8001bac <MX_TIM1_Init+0x98>)
 8001b58:	2280      	movs	r2, #128	; 0x80
 8001b5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b5c:	4813      	ldr	r0, [pc, #76]	; (8001bac <MX_TIM1_Init+0x98>)
 8001b5e:	f004 f927 	bl	8005db0 <HAL_TIM_Base_Init>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001b68:	f000 fc04 	bl	8002374 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b70:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b72:	f107 0308 	add.w	r3, r7, #8
 8001b76:	4619      	mov	r1, r3
 8001b78:	480c      	ldr	r0, [pc, #48]	; (8001bac <MX_TIM1_Init+0x98>)
 8001b7a:	f005 fa51 	bl	8007020 <HAL_TIM_ConfigClockSource>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001b84:	f000 fbf6 	bl	8002374 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b90:	463b      	mov	r3, r7
 8001b92:	4619      	mov	r1, r3
 8001b94:	4805      	ldr	r0, [pc, #20]	; (8001bac <MX_TIM1_Init+0x98>)
 8001b96:	f006 f99f 	bl	8007ed8 <HAL_TIMEx_MasterConfigSynchronization>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001ba0:	f000 fbe8 	bl	8002374 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001ba4:	bf00      	nop
 8001ba6:	3718      	adds	r7, #24
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	2000099c 	.word	0x2000099c
 8001bb0:	40012c00 	.word	0x40012c00

08001bb4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b08c      	sub	sp, #48	; 0x30
 8001bb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001bba:	f107 030c 	add.w	r3, r7, #12
 8001bbe:	2224      	movs	r2, #36	; 0x24
 8001bc0:	2100      	movs	r1, #0
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f009 fe94 	bl	800b8f0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bc8:	1d3b      	adds	r3, r7, #4
 8001bca:	2200      	movs	r2, #0
 8001bcc:	601a      	str	r2, [r3, #0]
 8001bce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001bd0:	4b21      	ldr	r3, [pc, #132]	; (8001c58 <MX_TIM2_Init+0xa4>)
 8001bd2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bd6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001bd8:	4b1f      	ldr	r3, [pc, #124]	; (8001c58 <MX_TIM2_Init+0xa4>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bde:	4b1e      	ldr	r3, [pc, #120]	; (8001c58 <MX_TIM2_Init+0xa4>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001be4:	4b1c      	ldr	r3, [pc, #112]	; (8001c58 <MX_TIM2_Init+0xa4>)
 8001be6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bec:	4b1a      	ldr	r3, [pc, #104]	; (8001c58 <MX_TIM2_Init+0xa4>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001bf2:	4b19      	ldr	r3, [pc, #100]	; (8001c58 <MX_TIM2_Init+0xa4>)
 8001bf4:	2280      	movs	r2, #128	; 0x80
 8001bf6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c00:	2301      	movs	r3, #1
 8001c02:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c04:	2300      	movs	r3, #0
 8001c06:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001c08:	230a      	movs	r3, #10
 8001c0a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c10:	2301      	movs	r3, #1
 8001c12:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c14:	2300      	movs	r3, #0
 8001c16:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001c1c:	f107 030c 	add.w	r3, r7, #12
 8001c20:	4619      	mov	r1, r3
 8001c22:	480d      	ldr	r0, [pc, #52]	; (8001c58 <MX_TIM2_Init+0xa4>)
 8001c24:	f004 fcb6 	bl	8006594 <HAL_TIM_Encoder_Init>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001c2e:	f000 fba1 	bl	8002374 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c32:	2300      	movs	r3, #0
 8001c34:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c36:	2300      	movs	r3, #0
 8001c38:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c3a:	1d3b      	adds	r3, r7, #4
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	4806      	ldr	r0, [pc, #24]	; (8001c58 <MX_TIM2_Init+0xa4>)
 8001c40:	f006 f94a 	bl	8007ed8 <HAL_TIMEx_MasterConfigSynchronization>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001c4a:	f000 fb93 	bl	8002374 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001c4e:	bf00      	nop
 8001c50:	3730      	adds	r7, #48	; 0x30
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	20000ac8 	.word	0x20000ac8

08001c5c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b08c      	sub	sp, #48	; 0x30
 8001c60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c62:	f107 030c 	add.w	r3, r7, #12
 8001c66:	2224      	movs	r2, #36	; 0x24
 8001c68:	2100      	movs	r1, #0
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f009 fe40 	bl	800b8f0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c70:	1d3b      	adds	r3, r7, #4
 8001c72:	2200      	movs	r2, #0
 8001c74:	601a      	str	r2, [r3, #0]
 8001c76:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c78:	4b20      	ldr	r3, [pc, #128]	; (8001cfc <MX_TIM3_Init+0xa0>)
 8001c7a:	4a21      	ldr	r2, [pc, #132]	; (8001d00 <MX_TIM3_Init+0xa4>)
 8001c7c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001c7e:	4b1f      	ldr	r3, [pc, #124]	; (8001cfc <MX_TIM3_Init+0xa0>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c84:	4b1d      	ldr	r3, [pc, #116]	; (8001cfc <MX_TIM3_Init+0xa0>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001c8a:	4b1c      	ldr	r3, [pc, #112]	; (8001cfc <MX_TIM3_Init+0xa0>)
 8001c8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c90:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c92:	4b1a      	ldr	r3, [pc, #104]	; (8001cfc <MX_TIM3_Init+0xa0>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c98:	4b18      	ldr	r3, [pc, #96]	; (8001cfc <MX_TIM3_Init+0xa0>)
 8001c9a:	2280      	movs	r2, #128	; 0x80
 8001c9c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001caa:	2300      	movs	r3, #0
 8001cac:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001cae:	230a      	movs	r3, #10
 8001cb0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001cc2:	f107 030c 	add.w	r3, r7, #12
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	480c      	ldr	r0, [pc, #48]	; (8001cfc <MX_TIM3_Init+0xa0>)
 8001cca:	f004 fc63 	bl	8006594 <HAL_TIM_Encoder_Init>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001cd4:	f000 fb4e 	bl	8002374 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ce0:	1d3b      	adds	r3, r7, #4
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	4805      	ldr	r0, [pc, #20]	; (8001cfc <MX_TIM3_Init+0xa0>)
 8001ce6:	f006 f8f7 	bl	8007ed8 <HAL_TIMEx_MasterConfigSynchronization>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001cf0:	f000 fb40 	bl	8002374 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001cf4:	bf00      	nop
 8001cf6:	3730      	adds	r7, #48	; 0x30
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	2000077c 	.word	0x2000077c
 8001d00:	40000400 	.word	0x40000400

08001d04 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b08c      	sub	sp, #48	; 0x30
 8001d08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001d0a:	f107 030c 	add.w	r3, r7, #12
 8001d0e:	2224      	movs	r2, #36	; 0x24
 8001d10:	2100      	movs	r1, #0
 8001d12:	4618      	mov	r0, r3
 8001d14:	f009 fdec 	bl	800b8f0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d18:	1d3b      	adds	r3, r7, #4
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	601a      	str	r2, [r3, #0]
 8001d1e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d20:	4b20      	ldr	r3, [pc, #128]	; (8001da4 <MX_TIM4_Init+0xa0>)
 8001d22:	4a21      	ldr	r2, [pc, #132]	; (8001da8 <MX_TIM4_Init+0xa4>)
 8001d24:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001d26:	4b1f      	ldr	r3, [pc, #124]	; (8001da4 <MX_TIM4_Init+0xa0>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d2c:	4b1d      	ldr	r3, [pc, #116]	; (8001da4 <MX_TIM4_Init+0xa0>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001d32:	4b1c      	ldr	r3, [pc, #112]	; (8001da4 <MX_TIM4_Init+0xa0>)
 8001d34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d38:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d3a:	4b1a      	ldr	r3, [pc, #104]	; (8001da4 <MX_TIM4_Init+0xa0>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d40:	4b18      	ldr	r3, [pc, #96]	; (8001da4 <MX_TIM4_Init+0xa0>)
 8001d42:	2280      	movs	r2, #128	; 0x80
 8001d44:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001d46:	2303      	movs	r3, #3
 8001d48:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d52:	2300      	movs	r3, #0
 8001d54:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001d56:	230a      	movs	r3, #10
 8001d58:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d62:	2300      	movs	r3, #0
 8001d64:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001d66:	2300      	movs	r3, #0
 8001d68:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001d6a:	f107 030c 	add.w	r3, r7, #12
 8001d6e:	4619      	mov	r1, r3
 8001d70:	480c      	ldr	r0, [pc, #48]	; (8001da4 <MX_TIM4_Init+0xa0>)
 8001d72:	f004 fc0f 	bl	8006594 <HAL_TIM_Encoder_Init>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d001      	beq.n	8001d80 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001d7c:	f000 fafa 	bl	8002374 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d80:	2300      	movs	r3, #0
 8001d82:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d84:	2300      	movs	r3, #0
 8001d86:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d88:	1d3b      	adds	r3, r7, #4
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	4805      	ldr	r0, [pc, #20]	; (8001da4 <MX_TIM4_Init+0xa0>)
 8001d8e:	f006 f8a3 	bl	8007ed8 <HAL_TIMEx_MasterConfigSynchronization>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001d98:	f000 faec 	bl	8002374 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001d9c:	bf00      	nop
 8001d9e:	3730      	adds	r7, #48	; 0x30
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	20000614 	.word	0x20000614
 8001da8:	40000800 	.word	0x40000800

08001dac <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b08c      	sub	sp, #48	; 0x30
 8001db0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001db2:	f107 030c 	add.w	r3, r7, #12
 8001db6:	2224      	movs	r2, #36	; 0x24
 8001db8:	2100      	movs	r1, #0
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f009 fd98 	bl	800b8f0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dc0:	1d3b      	adds	r3, r7, #4
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	601a      	str	r2, [r3, #0]
 8001dc6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001dc8:	4b20      	ldr	r3, [pc, #128]	; (8001e4c <MX_TIM5_Init+0xa0>)
 8001dca:	4a21      	ldr	r2, [pc, #132]	; (8001e50 <MX_TIM5_Init+0xa4>)
 8001dcc:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001dce:	4b1f      	ldr	r3, [pc, #124]	; (8001e4c <MX_TIM5_Init+0xa0>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dd4:	4b1d      	ldr	r3, [pc, #116]	; (8001e4c <MX_TIM5_Init+0xa0>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8001dda:	4b1c      	ldr	r3, [pc, #112]	; (8001e4c <MX_TIM5_Init+0xa0>)
 8001ddc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001de0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001de2:	4b1a      	ldr	r3, [pc, #104]	; (8001e4c <MX_TIM5_Init+0xa0>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001de8:	4b18      	ldr	r3, [pc, #96]	; (8001e4c <MX_TIM5_Init+0xa0>)
 8001dea:	2280      	movs	r2, #128	; 0x80
 8001dec:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001dee:	2303      	movs	r3, #3
 8001df0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001df2:	2300      	movs	r3, #0
 8001df4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001df6:	2301      	movs	r3, #1
 8001df8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001dfe:	230a      	movs	r3, #10
 8001e00:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001e02:	2300      	movs	r3, #0
 8001e04:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e06:	2301      	movs	r3, #1
 8001e08:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001e12:	f107 030c 	add.w	r3, r7, #12
 8001e16:	4619      	mov	r1, r3
 8001e18:	480c      	ldr	r0, [pc, #48]	; (8001e4c <MX_TIM5_Init+0xa0>)
 8001e1a:	f004 fbbb 	bl	8006594 <HAL_TIM_Encoder_Init>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001e24:	f000 faa6 	bl	8002374 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001e30:	1d3b      	adds	r3, r7, #4
 8001e32:	4619      	mov	r1, r3
 8001e34:	4805      	ldr	r0, [pc, #20]	; (8001e4c <MX_TIM5_Init+0xa0>)
 8001e36:	f006 f84f 	bl	8007ed8 <HAL_TIMEx_MasterConfigSynchronization>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001e40:	f000 fa98 	bl	8002374 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001e44:	bf00      	nop
 8001e46:	3730      	adds	r7, #48	; 0x30
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	200006c8 	.word	0x200006c8
 8001e50:	40000c00 	.word	0x40000c00

08001e54 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e5a:	463b      	mov	r3, r7
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	601a      	str	r2, [r3, #0]
 8001e60:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001e62:	4b15      	ldr	r3, [pc, #84]	; (8001eb8 <MX_TIM6_Init+0x64>)
 8001e64:	4a15      	ldr	r2, [pc, #84]	; (8001ebc <MX_TIM6_Init+0x68>)
 8001e66:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7;
 8001e68:	4b13      	ldr	r3, [pc, #76]	; (8001eb8 <MX_TIM6_Init+0x64>)
 8001e6a:	2207      	movs	r2, #7
 8001e6c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e6e:	4b12      	ldr	r3, [pc, #72]	; (8001eb8 <MX_TIM6_Init+0x64>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001e74:	4b10      	ldr	r3, [pc, #64]	; (8001eb8 <MX_TIM6_Init+0x64>)
 8001e76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e7a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e7c:	4b0e      	ldr	r3, [pc, #56]	; (8001eb8 <MX_TIM6_Init+0x64>)
 8001e7e:	2280      	movs	r2, #128	; 0x80
 8001e80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001e82:	480d      	ldr	r0, [pc, #52]	; (8001eb8 <MX_TIM6_Init+0x64>)
 8001e84:	f003 ff94 	bl	8005db0 <HAL_TIM_Base_Init>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001e8e:	f000 fa71 	bl	8002374 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e92:	2300      	movs	r3, #0
 8001e94:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e96:	2300      	movs	r3, #0
 8001e98:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001e9a:	463b      	mov	r3, r7
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	4806      	ldr	r0, [pc, #24]	; (8001eb8 <MX_TIM6_Init+0x64>)
 8001ea0:	f006 f81a 	bl	8007ed8 <HAL_TIMEx_MasterConfigSynchronization>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d001      	beq.n	8001eae <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001eaa:	f000 fa63 	bl	8002374 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001eae:	bf00      	nop
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	200008e8 	.word	0x200008e8
 8001ebc:	40001000 	.word	0x40001000

08001ec0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ec6:	463b      	mov	r3, r7
 8001ec8:	2200      	movs	r2, #0
 8001eca:	601a      	str	r2, [r3, #0]
 8001ecc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001ece:	4b15      	ldr	r3, [pc, #84]	; (8001f24 <MX_TIM7_Init+0x64>)
 8001ed0:	4a15      	ldr	r2, [pc, #84]	; (8001f28 <MX_TIM7_Init+0x68>)
 8001ed2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7;
 8001ed4:	4b13      	ldr	r3, [pc, #76]	; (8001f24 <MX_TIM7_Init+0x64>)
 8001ed6:	2207      	movs	r2, #7
 8001ed8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eda:	4b12      	ldr	r3, [pc, #72]	; (8001f24 <MX_TIM7_Init+0x64>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8001ee0:	4b10      	ldr	r3, [pc, #64]	; (8001f24 <MX_TIM7_Init+0x64>)
 8001ee2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ee6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ee8:	4b0e      	ldr	r3, [pc, #56]	; (8001f24 <MX_TIM7_Init+0x64>)
 8001eea:	2280      	movs	r2, #128	; 0x80
 8001eec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001eee:	480d      	ldr	r0, [pc, #52]	; (8001f24 <MX_TIM7_Init+0x64>)
 8001ef0:	f003 ff5e 	bl	8005db0 <HAL_TIM_Base_Init>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001efa:	f000 fa3b 	bl	8002374 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001efe:	2300      	movs	r3, #0
 8001f00:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f02:	2300      	movs	r3, #0
 8001f04:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001f06:	463b      	mov	r3, r7
 8001f08:	4619      	mov	r1, r3
 8001f0a:	4806      	ldr	r0, [pc, #24]	; (8001f24 <MX_TIM7_Init+0x64>)
 8001f0c:	f005 ffe4 	bl	8007ed8 <HAL_TIMEx_MasterConfigSynchronization>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001f16:	f000 fa2d 	bl	8002374 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001f1a:	bf00      	nop
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	20000b7c 	.word	0x20000b7c
 8001f28:	40001400 	.word	0x40001400

08001f2c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b096      	sub	sp, #88	; 0x58
 8001f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f32:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001f36:	2200      	movs	r2, #0
 8001f38:	601a      	str	r2, [r3, #0]
 8001f3a:	605a      	str	r2, [r3, #4]
 8001f3c:	609a      	str	r2, [r3, #8]
 8001f3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f40:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001f44:	2200      	movs	r2, #0
 8001f46:	601a      	str	r2, [r3, #0]
 8001f48:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f4e:	2200      	movs	r2, #0
 8001f50:	601a      	str	r2, [r3, #0]
 8001f52:	605a      	str	r2, [r3, #4]
 8001f54:	609a      	str	r2, [r3, #8]
 8001f56:	60da      	str	r2, [r3, #12]
 8001f58:	611a      	str	r2, [r3, #16]
 8001f5a:	615a      	str	r2, [r3, #20]
 8001f5c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f5e:	1d3b      	adds	r3, r7, #4
 8001f60:	2220      	movs	r2, #32
 8001f62:	2100      	movs	r1, #0
 8001f64:	4618      	mov	r0, r3
 8001f66:	f009 fcc3 	bl	800b8f0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001f6a:	4b50      	ldr	r3, [pc, #320]	; (80020ac <MX_TIM8_Init+0x180>)
 8001f6c:	4a50      	ldr	r2, [pc, #320]	; (80020b0 <MX_TIM8_Init+0x184>)
 8001f6e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 7;
 8001f70:	4b4e      	ldr	r3, [pc, #312]	; (80020ac <MX_TIM8_Init+0x180>)
 8001f72:	2207      	movs	r2, #7
 8001f74:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f76:	4b4d      	ldr	r3, [pc, #308]	; (80020ac <MX_TIM8_Init+0x180>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 100;
 8001f7c:	4b4b      	ldr	r3, [pc, #300]	; (80020ac <MX_TIM8_Init+0x180>)
 8001f7e:	2264      	movs	r2, #100	; 0x64
 8001f80:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f82:	4b4a      	ldr	r3, [pc, #296]	; (80020ac <MX_TIM8_Init+0x180>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001f88:	4b48      	ldr	r3, [pc, #288]	; (80020ac <MX_TIM8_Init+0x180>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f8e:	4b47      	ldr	r3, [pc, #284]	; (80020ac <MX_TIM8_Init+0x180>)
 8001f90:	2280      	movs	r2, #128	; 0x80
 8001f92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001f94:	4845      	ldr	r0, [pc, #276]	; (80020ac <MX_TIM8_Init+0x180>)
 8001f96:	f003 ff0b 	bl	8005db0 <HAL_TIM_Base_Init>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8001fa0:	f000 f9e8 	bl	8002374 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fa4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fa8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001faa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001fae:	4619      	mov	r1, r3
 8001fb0:	483e      	ldr	r0, [pc, #248]	; (80020ac <MX_TIM8_Init+0x180>)
 8001fb2:	f005 f835 	bl	8007020 <HAL_TIM_ConfigClockSource>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d001      	beq.n	8001fc0 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8001fbc:	f000 f9da 	bl	8002374 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001fc0:	483a      	ldr	r0, [pc, #232]	; (80020ac <MX_TIM8_Init+0x180>)
 8001fc2:	f004 f8e3 	bl	800618c <HAL_TIM_PWM_Init>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001fcc:	f000 f9d2 	bl	8002374 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001fd8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001fdc:	4619      	mov	r1, r3
 8001fde:	4833      	ldr	r0, [pc, #204]	; (80020ac <MX_TIM8_Init+0x180>)
 8001fe0:	f005 ff7a 	bl	8007ed8 <HAL_TIMEx_MasterConfigSynchronization>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 8001fea:	f000 f9c3 	bl	8002374 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fee:	2360      	movs	r3, #96	; 0x60
 8001ff0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ffe:	2300      	movs	r3, #0
 8002000:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002002:	2300      	movs	r3, #0
 8002004:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002006:	2300      	movs	r3, #0
 8002008:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800200a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800200e:	2200      	movs	r2, #0
 8002010:	4619      	mov	r1, r3
 8002012:	4826      	ldr	r0, [pc, #152]	; (80020ac <MX_TIM8_Init+0x180>)
 8002014:	f004 fe66 	bl	8006ce4 <HAL_TIM_PWM_ConfigChannel>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 800201e:	f000 f9a9 	bl	8002374 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002022:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002026:	2204      	movs	r2, #4
 8002028:	4619      	mov	r1, r3
 800202a:	4820      	ldr	r0, [pc, #128]	; (80020ac <MX_TIM8_Init+0x180>)
 800202c:	f004 fe5a 	bl	8006ce4 <HAL_TIM_PWM_ConfigChannel>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <MX_TIM8_Init+0x10e>
  {
    Error_Handler();
 8002036:	f000 f99d 	bl	8002374 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800203a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800203e:	2208      	movs	r2, #8
 8002040:	4619      	mov	r1, r3
 8002042:	481a      	ldr	r0, [pc, #104]	; (80020ac <MX_TIM8_Init+0x180>)
 8002044:	f004 fe4e 	bl	8006ce4 <HAL_TIM_PWM_ConfigChannel>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <MX_TIM8_Init+0x126>
  {
    Error_Handler();
 800204e:	f000 f991 	bl	8002374 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002052:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002056:	220c      	movs	r2, #12
 8002058:	4619      	mov	r1, r3
 800205a:	4814      	ldr	r0, [pc, #80]	; (80020ac <MX_TIM8_Init+0x180>)
 800205c:	f004 fe42 	bl	8006ce4 <HAL_TIM_PWM_ConfigChannel>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <MX_TIM8_Init+0x13e>
  {
    Error_Handler();
 8002066:	f000 f985 	bl	8002374 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800206a:	2300      	movs	r3, #0
 800206c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800206e:	2300      	movs	r3, #0
 8002070:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002072:	2300      	movs	r3, #0
 8002074:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002076:	2300      	movs	r3, #0
 8002078:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800207a:	2300      	movs	r3, #0
 800207c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800207e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002082:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002084:	2300      	movs	r3, #0
 8002086:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002088:	1d3b      	adds	r3, r7, #4
 800208a:	4619      	mov	r1, r3
 800208c:	4807      	ldr	r0, [pc, #28]	; (80020ac <MX_TIM8_Init+0x180>)
 800208e:	f005 fff3 	bl	8008078 <HAL_TIMEx_ConfigBreakDeadTime>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <MX_TIM8_Init+0x170>
  {
    Error_Handler();
 8002098:	f000 f96c 	bl	8002374 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800209c:	4803      	ldr	r0, [pc, #12]	; (80020ac <MX_TIM8_Init+0x180>)
 800209e:	f000 fb8b 	bl	80027b8 <HAL_TIM_MspPostInit>

}
 80020a2:	bf00      	nop
 80020a4:	3758      	adds	r7, #88	; 0x58
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	20000560 	.word	0x20000560
 80020b0:	40013400 	.word	0x40013400

080020b4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80020b8:	4b11      	ldr	r3, [pc, #68]	; (8002100 <MX_UART4_Init+0x4c>)
 80020ba:	4a12      	ldr	r2, [pc, #72]	; (8002104 <MX_UART4_Init+0x50>)
 80020bc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80020be:	4b10      	ldr	r3, [pc, #64]	; (8002100 <MX_UART4_Init+0x4c>)
 80020c0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80020c4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80020c6:	4b0e      	ldr	r3, [pc, #56]	; (8002100 <MX_UART4_Init+0x4c>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80020cc:	4b0c      	ldr	r3, [pc, #48]	; (8002100 <MX_UART4_Init+0x4c>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80020d2:	4b0b      	ldr	r3, [pc, #44]	; (8002100 <MX_UART4_Init+0x4c>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80020d8:	4b09      	ldr	r3, [pc, #36]	; (8002100 <MX_UART4_Init+0x4c>)
 80020da:	220c      	movs	r2, #12
 80020dc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020de:	4b08      	ldr	r3, [pc, #32]	; (8002100 <MX_UART4_Init+0x4c>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80020e4:	4b06      	ldr	r3, [pc, #24]	; (8002100 <MX_UART4_Init+0x4c>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80020ea:	4805      	ldr	r0, [pc, #20]	; (8002100 <MX_UART4_Init+0x4c>)
 80020ec:	f006 f8ac 	bl	8008248 <HAL_UART_Init>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80020f6:	f000 f93d 	bl	8002374 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80020fa:	bf00      	nop
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	20000a54 	.word	0x20000a54
 8002104:	40004c00 	.word	0x40004c00

08002108 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800210c:	4b11      	ldr	r3, [pc, #68]	; (8002154 <MX_USART1_UART_Init+0x4c>)
 800210e:	4a12      	ldr	r2, [pc, #72]	; (8002158 <MX_USART1_UART_Init+0x50>)
 8002110:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002112:	4b10      	ldr	r3, [pc, #64]	; (8002154 <MX_USART1_UART_Init+0x4c>)
 8002114:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002118:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800211a:	4b0e      	ldr	r3, [pc, #56]	; (8002154 <MX_USART1_UART_Init+0x4c>)
 800211c:	2200      	movs	r2, #0
 800211e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002120:	4b0c      	ldr	r3, [pc, #48]	; (8002154 <MX_USART1_UART_Init+0x4c>)
 8002122:	2200      	movs	r2, #0
 8002124:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002126:	4b0b      	ldr	r3, [pc, #44]	; (8002154 <MX_USART1_UART_Init+0x4c>)
 8002128:	2200      	movs	r2, #0
 800212a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800212c:	4b09      	ldr	r3, [pc, #36]	; (8002154 <MX_USART1_UART_Init+0x4c>)
 800212e:	220c      	movs	r2, #12
 8002130:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002132:	4b08      	ldr	r3, [pc, #32]	; (8002154 <MX_USART1_UART_Init+0x4c>)
 8002134:	2200      	movs	r2, #0
 8002136:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002138:	4b06      	ldr	r3, [pc, #24]	; (8002154 <MX_USART1_UART_Init+0x4c>)
 800213a:	2200      	movs	r2, #0
 800213c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800213e:	4805      	ldr	r0, [pc, #20]	; (8002154 <MX_USART1_UART_Init+0x4c>)
 8002140:	f006 f882 	bl	8008248 <HAL_UART_Init>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800214a:	f000 f913 	bl	8002374 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800214e:	bf00      	nop
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	20000860 	.word	0x20000860
 8002158:	40013800 	.word	0x40013800

0800215c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b088      	sub	sp, #32
 8002160:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002162:	f107 0310 	add.w	r3, r7, #16
 8002166:	2200      	movs	r2, #0
 8002168:	601a      	str	r2, [r3, #0]
 800216a:	605a      	str	r2, [r3, #4]
 800216c:	609a      	str	r2, [r3, #8]
 800216e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002170:	4b4e      	ldr	r3, [pc, #312]	; (80022ac <MX_GPIO_Init+0x150>)
 8002172:	699b      	ldr	r3, [r3, #24]
 8002174:	4a4d      	ldr	r2, [pc, #308]	; (80022ac <MX_GPIO_Init+0x150>)
 8002176:	f043 0310 	orr.w	r3, r3, #16
 800217a:	6193      	str	r3, [r2, #24]
 800217c:	4b4b      	ldr	r3, [pc, #300]	; (80022ac <MX_GPIO_Init+0x150>)
 800217e:	699b      	ldr	r3, [r3, #24]
 8002180:	f003 0310 	and.w	r3, r3, #16
 8002184:	60fb      	str	r3, [r7, #12]
 8002186:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002188:	4b48      	ldr	r3, [pc, #288]	; (80022ac <MX_GPIO_Init+0x150>)
 800218a:	699b      	ldr	r3, [r3, #24]
 800218c:	4a47      	ldr	r2, [pc, #284]	; (80022ac <MX_GPIO_Init+0x150>)
 800218e:	f043 0304 	orr.w	r3, r3, #4
 8002192:	6193      	str	r3, [r2, #24]
 8002194:	4b45      	ldr	r3, [pc, #276]	; (80022ac <MX_GPIO_Init+0x150>)
 8002196:	699b      	ldr	r3, [r3, #24]
 8002198:	f003 0304 	and.w	r3, r3, #4
 800219c:	60bb      	str	r3, [r7, #8]
 800219e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021a0:	4b42      	ldr	r3, [pc, #264]	; (80022ac <MX_GPIO_Init+0x150>)
 80021a2:	699b      	ldr	r3, [r3, #24]
 80021a4:	4a41      	ldr	r2, [pc, #260]	; (80022ac <MX_GPIO_Init+0x150>)
 80021a6:	f043 0308 	orr.w	r3, r3, #8
 80021aa:	6193      	str	r3, [r2, #24]
 80021ac:	4b3f      	ldr	r3, [pc, #252]	; (80022ac <MX_GPIO_Init+0x150>)
 80021ae:	699b      	ldr	r3, [r3, #24]
 80021b0:	f003 0308 	and.w	r3, r3, #8
 80021b4:	607b      	str	r3, [r7, #4]
 80021b6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80021b8:	4b3c      	ldr	r3, [pc, #240]	; (80022ac <MX_GPIO_Init+0x150>)
 80021ba:	699b      	ldr	r3, [r3, #24]
 80021bc:	4a3b      	ldr	r2, [pc, #236]	; (80022ac <MX_GPIO_Init+0x150>)
 80021be:	f043 0320 	orr.w	r3, r3, #32
 80021c2:	6193      	str	r3, [r2, #24]
 80021c4:	4b39      	ldr	r3, [pc, #228]	; (80022ac <MX_GPIO_Init+0x150>)
 80021c6:	699b      	ldr	r3, [r3, #24]
 80021c8:	f003 0320 	and.w	r3, r3, #32
 80021cc:	603b      	str	r3, [r7, #0]
 80021ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BLUE_LED_Pin|BLUETOOTH_SPI_CMD_Pin|BLUETOOTH_SPI_CS_Pin|MOTOR_REAR_LEFT_OUT_1_Pin
 80021d0:	2200      	movs	r2, #0
 80021d2:	f243 013a 	movw	r1, #12346	; 0x303a
 80021d6:	4836      	ldr	r0, [pc, #216]	; (80022b0 <MX_GPIO_Init+0x154>)
 80021d8:	f001 ff00 	bl	8003fdc <HAL_GPIO_WritePin>
                          |MOTOR_REAR_LEFT_OUT_2_Pin|MOTOR_FRONT_RIGHT_OUT_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLUETOOTH_SPI_CLK_GPIO_Port, BLUETOOTH_SPI_CLK_Pin, GPIO_PIN_RESET);
 80021dc:	2200      	movs	r2, #0
 80021de:	2110      	movs	r1, #16
 80021e0:	4834      	ldr	r0, [pc, #208]	; (80022b4 <MX_GPIO_Init+0x158>)
 80021e2:	f001 fefb 	bl	8003fdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR_REAR_RIGHT_OUT_1_Pin|MOTOR_REAR_RIGHT_OUT_2_Pin|MOTOR_FRONT_LEFT_OUT_2_Pin|MOTOR_FRONT_LEFT_OUT_1_Pin, GPIO_PIN_RESET);
 80021e6:	2200      	movs	r2, #0
 80021e8:	2133      	movs	r1, #51	; 0x33
 80021ea:	4833      	ldr	r0, [pc, #204]	; (80022b8 <MX_GPIO_Init+0x15c>)
 80021ec:	f001 fef6 	bl	8003fdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_FRONT_RIGHT_OUT_1_GPIO_Port, MOTOR_FRONT_RIGHT_OUT_1_Pin, GPIO_PIN_RESET);
 80021f0:	2200      	movs	r2, #0
 80021f2:	2104      	movs	r1, #4
 80021f4:	4831      	ldr	r0, [pc, #196]	; (80022bc <MX_GPIO_Init+0x160>)
 80021f6:	f001 fef1 	bl	8003fdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_LED_Pin */
  GPIO_InitStruct.Pin = BLUE_LED_Pin;
 80021fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002200:	2301      	movs	r3, #1
 8002202:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002204:	2300      	movs	r3, #0
 8002206:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002208:	2302      	movs	r3, #2
 800220a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLUE_LED_GPIO_Port, &GPIO_InitStruct);
 800220c:	f107 0310 	add.w	r3, r7, #16
 8002210:	4619      	mov	r1, r3
 8002212:	4827      	ldr	r0, [pc, #156]	; (80022b0 <MX_GPIO_Init+0x154>)
 8002214:	f001 fc28 	bl	8003a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_RESET_Pin BLUETOOTH_SPI_DAT_Pin */
  GPIO_InitStruct.Pin = SW_RESET_Pin|BLUETOOTH_SPI_DAT_Pin;
 8002218:	2305      	movs	r3, #5
 800221a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800221c:	2300      	movs	r3, #0
 800221e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002220:	2300      	movs	r3, #0
 8002222:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002224:	f107 0310 	add.w	r3, r7, #16
 8002228:	4619      	mov	r1, r3
 800222a:	4821      	ldr	r0, [pc, #132]	; (80022b0 <MX_GPIO_Init+0x154>)
 800222c:	f001 fc1c 	bl	8003a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : BLUETOOTH_SPI_CMD_Pin BLUETOOTH_SPI_CS_Pin MOTOR_REAR_LEFT_OUT_1_Pin MOTOR_REAR_LEFT_OUT_2_Pin
                           MOTOR_FRONT_RIGHT_OUT_2_Pin */
  GPIO_InitStruct.Pin = BLUETOOTH_SPI_CMD_Pin|BLUETOOTH_SPI_CS_Pin|MOTOR_REAR_LEFT_OUT_1_Pin|MOTOR_REAR_LEFT_OUT_2_Pin
 8002230:	f241 033a 	movw	r3, #4154	; 0x103a
 8002234:	613b      	str	r3, [r7, #16]
                          |MOTOR_FRONT_RIGHT_OUT_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002236:	2301      	movs	r3, #1
 8002238:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223a:	2300      	movs	r3, #0
 800223c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800223e:	2303      	movs	r3, #3
 8002240:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002242:	f107 0310 	add.w	r3, r7, #16
 8002246:	4619      	mov	r1, r3
 8002248:	4819      	ldr	r0, [pc, #100]	; (80022b0 <MX_GPIO_Init+0x154>)
 800224a:	f001 fc0d 	bl	8003a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUETOOTH_SPI_CLK_Pin */
  GPIO_InitStruct.Pin = BLUETOOTH_SPI_CLK_Pin;
 800224e:	2310      	movs	r3, #16
 8002250:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002252:	2301      	movs	r3, #1
 8002254:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002256:	2300      	movs	r3, #0
 8002258:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800225a:	2303      	movs	r3, #3
 800225c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLUETOOTH_SPI_CLK_GPIO_Port, &GPIO_InitStruct);
 800225e:	f107 0310 	add.w	r3, r7, #16
 8002262:	4619      	mov	r1, r3
 8002264:	4813      	ldr	r0, [pc, #76]	; (80022b4 <MX_GPIO_Init+0x158>)
 8002266:	f001 fbff 	bl	8003a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_REAR_RIGHT_OUT_1_Pin MOTOR_REAR_RIGHT_OUT_2_Pin MOTOR_FRONT_LEFT_OUT_2_Pin MOTOR_FRONT_LEFT_OUT_1_Pin */
  GPIO_InitStruct.Pin = MOTOR_REAR_RIGHT_OUT_1_Pin|MOTOR_REAR_RIGHT_OUT_2_Pin|MOTOR_FRONT_LEFT_OUT_2_Pin|MOTOR_FRONT_LEFT_OUT_1_Pin;
 800226a:	2333      	movs	r3, #51	; 0x33
 800226c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800226e:	2301      	movs	r3, #1
 8002270:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002272:	2300      	movs	r3, #0
 8002274:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002276:	2303      	movs	r3, #3
 8002278:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800227a:	f107 0310 	add.w	r3, r7, #16
 800227e:	4619      	mov	r1, r3
 8002280:	480d      	ldr	r0, [pc, #52]	; (80022b8 <MX_GPIO_Init+0x15c>)
 8002282:	f001 fbf1 	bl	8003a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTOR_FRONT_RIGHT_OUT_1_Pin */
  GPIO_InitStruct.Pin = MOTOR_FRONT_RIGHT_OUT_1_Pin;
 8002286:	2304      	movs	r3, #4
 8002288:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800228a:	2301      	movs	r3, #1
 800228c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228e:	2300      	movs	r3, #0
 8002290:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002292:	2303      	movs	r3, #3
 8002294:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MOTOR_FRONT_RIGHT_OUT_1_GPIO_Port, &GPIO_InitStruct);
 8002296:	f107 0310 	add.w	r3, r7, #16
 800229a:	4619      	mov	r1, r3
 800229c:	4807      	ldr	r0, [pc, #28]	; (80022bc <MX_GPIO_Init+0x160>)
 800229e:	f001 fbe3 	bl	8003a68 <HAL_GPIO_Init>

}
 80022a2:	bf00      	nop
 80022a4:	3720      	adds	r7, #32
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	40021000 	.word	0x40021000
 80022b0:	40011000 	.word	0x40011000
 80022b4:	40010800 	.word	0x40010800
 80022b8:	40010c00 	.word	0x40010c00
 80022bc:	40011400 	.word	0x40011400

080022c0 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  if ((htim == &htim2) || (htim == &htim3) || (htim == &htim4) || (htim == &htim5))
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	4a0b      	ldr	r2, [pc, #44]	; (80022f8 <HAL_TIM_IC_CaptureCallback+0x38>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d00b      	beq.n	80022e8 <HAL_TIM_IC_CaptureCallback+0x28>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	4a0a      	ldr	r2, [pc, #40]	; (80022fc <HAL_TIM_IC_CaptureCallback+0x3c>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d007      	beq.n	80022e8 <HAL_TIM_IC_CaptureCallback+0x28>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	4a09      	ldr	r2, [pc, #36]	; (8002300 <HAL_TIM_IC_CaptureCallback+0x40>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d003      	beq.n	80022e8 <HAL_TIM_IC_CaptureCallback+0x28>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	4a08      	ldr	r2, [pc, #32]	; (8002304 <HAL_TIM_IC_CaptureCallback+0x44>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d103      	bne.n	80022f0 <HAL_TIM_IC_CaptureCallback+0x30>
  {
    DRV_updateEncoder(htim);
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f007 f9a7 	bl	800963c <DRV_updateEncoder>
  else
  {
    ; /* Nothing to do */
  }

  return;
 80022ee:	bf00      	nop
 80022f0:	bf00      	nop
}
 80022f2:	3708      	adds	r7, #8
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	20000ac8 	.word	0x20000ac8
 80022fc:	2000077c 	.word	0x2000077c
 8002300:	20000614 	.word	0x20000614
 8002304:	200006c8 	.word	0x200006c8

08002308 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  /* Check the handle of the timer triggering this callback and update LED */
  if (htim == &htim1)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	4a05      	ldr	r2, [pc, #20]	; (8002328 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d102      	bne.n	800231e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    LED_update();
 8002318:	f008 f9fa 	bl	800a710 <LED_update>
  else
  {
    ; /* Nothing to do */
  }

  return;
 800231c:	bf00      	nop
 800231e:	bf00      	nop
}
 8002320:	3708      	adds	r7, #8
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	2000099c 	.word	0x2000099c

0800232c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  /* Nothing to do */
  return;
 8002334:	bf00      	nop
}
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	bc80      	pop	{r7}
 800233c:	4770      	bx	lr
	...

08002340 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  /* Check the handle of the UART triggering this callback and actually receive date */
  if (huart == &huart1)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	4a08      	ldr	r2, [pc, #32]	; (800236c <HAL_UART_RxCpltCallback+0x2c>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d102      	bne.n	8002356 <HAL_UART_RxCpltCallback+0x16>
  {
    CON_receiveData();
 8002350:	f007 f884 	bl	800945c <CON_receiveData>
  else
  {
    ; /* Nothing to do */
  }

  return;
 8002354:	e006      	b.n	8002364 <HAL_UART_RxCpltCallback+0x24>
  else if (huart == &huart4)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a05      	ldr	r2, [pc, #20]	; (8002370 <HAL_UART_RxCpltCallback+0x30>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d102      	bne.n	8002364 <HAL_UART_RxCpltCallback+0x24>
    MAS_receiveData();
 800235e:	f008 fb63 	bl	800aa28 <MAS_receiveData>
  return;
 8002362:	bf00      	nop
 8002364:	bf00      	nop
}
 8002366:	3708      	adds	r7, #8
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	20000860 	.word	0x20000860
 8002370:	20000a54 	.word	0x20000a54

08002374 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002378:	b672      	cpsid	i
}
 800237a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();

  LOG_error("Error_Handler() triggered");
 800237c:	4902      	ldr	r1, [pc, #8]	; (8002388 <Error_Handler+0x14>)
 800237e:	2003      	movs	r0, #3
 8002380:	f008 fa9c 	bl	800a8bc <LOG_log>

  while (1)
 8002384:	e7fe      	b.n	8002384 <Error_Handler+0x10>
 8002386:	bf00      	nop
 8002388:	080103dc 	.word	0x080103dc

0800238c <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
     LOG_error("Wrong parameters: %s@%d", file, line);
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	4904      	ldr	r1, [pc, #16]	; (80023ac <assert_failed+0x20>)
 800239c:	2003      	movs	r0, #3
 800239e:	f008 fa8d 	bl	800a8bc <LOG_log>

    return;
 80023a2:	bf00      	nop
  /* USER CODE END 6 */
}
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	080103f8 	.word	0x080103f8

080023b0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b085      	sub	sp, #20
 80023b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80023b6:	4b15      	ldr	r3, [pc, #84]	; (800240c <HAL_MspInit+0x5c>)
 80023b8:	699b      	ldr	r3, [r3, #24]
 80023ba:	4a14      	ldr	r2, [pc, #80]	; (800240c <HAL_MspInit+0x5c>)
 80023bc:	f043 0301 	orr.w	r3, r3, #1
 80023c0:	6193      	str	r3, [r2, #24]
 80023c2:	4b12      	ldr	r3, [pc, #72]	; (800240c <HAL_MspInit+0x5c>)
 80023c4:	699b      	ldr	r3, [r3, #24]
 80023c6:	f003 0301 	and.w	r3, r3, #1
 80023ca:	60bb      	str	r3, [r7, #8]
 80023cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023ce:	4b0f      	ldr	r3, [pc, #60]	; (800240c <HAL_MspInit+0x5c>)
 80023d0:	69db      	ldr	r3, [r3, #28]
 80023d2:	4a0e      	ldr	r2, [pc, #56]	; (800240c <HAL_MspInit+0x5c>)
 80023d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023d8:	61d3      	str	r3, [r2, #28]
 80023da:	4b0c      	ldr	r3, [pc, #48]	; (800240c <HAL_MspInit+0x5c>)
 80023dc:	69db      	ldr	r3, [r3, #28]
 80023de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e2:	607b      	str	r3, [r7, #4]
 80023e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80023e6:	4b0a      	ldr	r3, [pc, #40]	; (8002410 <HAL_MspInit+0x60>)
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	60fb      	str	r3, [r7, #12]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80023f2:	60fb      	str	r3, [r7, #12]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80023fa:	60fb      	str	r3, [r7, #12]
 80023fc:	4a04      	ldr	r2, [pc, #16]	; (8002410 <HAL_MspInit+0x60>)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002402:	bf00      	nop
 8002404:	3714      	adds	r7, #20
 8002406:	46bd      	mov	sp, r7
 8002408:	bc80      	pop	{r7}
 800240a:	4770      	bx	lr
 800240c:	40021000 	.word	0x40021000
 8002410:	40010000 	.word	0x40010000

08002414 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b088      	sub	sp, #32
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800241c:	f107 0310 	add.w	r3, r7, #16
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]
 8002424:	605a      	str	r2, [r3, #4]
 8002426:	609a      	str	r2, [r3, #8]
 8002428:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a14      	ldr	r2, [pc, #80]	; (8002480 <HAL_ADC_MspInit+0x6c>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d121      	bne.n	8002478 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002434:	4b13      	ldr	r3, [pc, #76]	; (8002484 <HAL_ADC_MspInit+0x70>)
 8002436:	699b      	ldr	r3, [r3, #24]
 8002438:	4a12      	ldr	r2, [pc, #72]	; (8002484 <HAL_ADC_MspInit+0x70>)
 800243a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800243e:	6193      	str	r3, [r2, #24]
 8002440:	4b10      	ldr	r3, [pc, #64]	; (8002484 <HAL_ADC_MspInit+0x70>)
 8002442:	699b      	ldr	r3, [r3, #24]
 8002444:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002448:	60fb      	str	r3, [r7, #12]
 800244a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800244c:	4b0d      	ldr	r3, [pc, #52]	; (8002484 <HAL_ADC_MspInit+0x70>)
 800244e:	699b      	ldr	r3, [r3, #24]
 8002450:	4a0c      	ldr	r2, [pc, #48]	; (8002484 <HAL_ADC_MspInit+0x70>)
 8002452:	f043 0304 	orr.w	r3, r3, #4
 8002456:	6193      	str	r3, [r2, #24]
 8002458:	4b0a      	ldr	r3, [pc, #40]	; (8002484 <HAL_ADC_MspInit+0x70>)
 800245a:	699b      	ldr	r3, [r3, #24]
 800245c:	f003 0304 	and.w	r3, r3, #4
 8002460:	60bb      	str	r3, [r7, #8]
 8002462:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = BATTERY_ADC_Pin;
 8002464:	2320      	movs	r3, #32
 8002466:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002468:	2303      	movs	r3, #3
 800246a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(BATTERY_ADC_GPIO_Port, &GPIO_InitStruct);
 800246c:	f107 0310 	add.w	r3, r7, #16
 8002470:	4619      	mov	r1, r3
 8002472:	4805      	ldr	r0, [pc, #20]	; (8002488 <HAL_ADC_MspInit+0x74>)
 8002474:	f001 faf8 	bl	8003a68 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002478:	bf00      	nop
 800247a:	3720      	adds	r7, #32
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	40012400 	.word	0x40012400
 8002484:	40021000 	.word	0x40021000
 8002488:	40010800 	.word	0x40010800

0800248c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a0b      	ldr	r2, [pc, #44]	; (80024c8 <HAL_RTC_MspInit+0x3c>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d110      	bne.n	80024c0 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800249e:	f001 fdf7 	bl	8004090 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80024a2:	4b0a      	ldr	r3, [pc, #40]	; (80024cc <HAL_RTC_MspInit+0x40>)
 80024a4:	69db      	ldr	r3, [r3, #28]
 80024a6:	4a09      	ldr	r2, [pc, #36]	; (80024cc <HAL_RTC_MspInit+0x40>)
 80024a8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80024ac:	61d3      	str	r3, [r2, #28]
 80024ae:	4b07      	ldr	r3, [pc, #28]	; (80024cc <HAL_RTC_MspInit+0x40>)
 80024b0:	69db      	ldr	r3, [r3, #28]
 80024b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024b6:	60fb      	str	r3, [r7, #12]
 80024b8:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80024ba:	4b05      	ldr	r3, [pc, #20]	; (80024d0 <HAL_RTC_MspInit+0x44>)
 80024bc:	2201      	movs	r2, #1
 80024be:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80024c0:	bf00      	nop
 80024c2:	3710      	adds	r7, #16
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	40002800 	.word	0x40002800
 80024cc:	40021000 	.word	0x40021000
 80024d0:	4242043c 	.word	0x4242043c

080024d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b086      	sub	sp, #24
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a28      	ldr	r2, [pc, #160]	; (8002584 <HAL_TIM_Base_MspInit+0xb0>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d114      	bne.n	8002510 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80024e6:	4b28      	ldr	r3, [pc, #160]	; (8002588 <HAL_TIM_Base_MspInit+0xb4>)
 80024e8:	699b      	ldr	r3, [r3, #24]
 80024ea:	4a27      	ldr	r2, [pc, #156]	; (8002588 <HAL_TIM_Base_MspInit+0xb4>)
 80024ec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80024f0:	6193      	str	r3, [r2, #24]
 80024f2:	4b25      	ldr	r3, [pc, #148]	; (8002588 <HAL_TIM_Base_MspInit+0xb4>)
 80024f4:	699b      	ldr	r3, [r3, #24]
 80024f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024fa:	617b      	str	r3, [r7, #20]
 80024fc:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 6, 0);
 80024fe:	2200      	movs	r2, #0
 8002500:	2106      	movs	r1, #6
 8002502:	2019      	movs	r0, #25
 8002504:	f001 f91a 	bl	800373c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002508:	2019      	movs	r0, #25
 800250a:	f001 f943 	bl	8003794 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800250e:	e034      	b.n	800257a <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM6)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a1d      	ldr	r2, [pc, #116]	; (800258c <HAL_TIM_Base_MspInit+0xb8>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d10c      	bne.n	8002534 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800251a:	4b1b      	ldr	r3, [pc, #108]	; (8002588 <HAL_TIM_Base_MspInit+0xb4>)
 800251c:	69db      	ldr	r3, [r3, #28]
 800251e:	4a1a      	ldr	r2, [pc, #104]	; (8002588 <HAL_TIM_Base_MspInit+0xb4>)
 8002520:	f043 0310 	orr.w	r3, r3, #16
 8002524:	61d3      	str	r3, [r2, #28]
 8002526:	4b18      	ldr	r3, [pc, #96]	; (8002588 <HAL_TIM_Base_MspInit+0xb4>)
 8002528:	69db      	ldr	r3, [r3, #28]
 800252a:	f003 0310 	and.w	r3, r3, #16
 800252e:	613b      	str	r3, [r7, #16]
 8002530:	693b      	ldr	r3, [r7, #16]
}
 8002532:	e022      	b.n	800257a <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM7)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a15      	ldr	r2, [pc, #84]	; (8002590 <HAL_TIM_Base_MspInit+0xbc>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d10c      	bne.n	8002558 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800253e:	4b12      	ldr	r3, [pc, #72]	; (8002588 <HAL_TIM_Base_MspInit+0xb4>)
 8002540:	69db      	ldr	r3, [r3, #28]
 8002542:	4a11      	ldr	r2, [pc, #68]	; (8002588 <HAL_TIM_Base_MspInit+0xb4>)
 8002544:	f043 0320 	orr.w	r3, r3, #32
 8002548:	61d3      	str	r3, [r2, #28]
 800254a:	4b0f      	ldr	r3, [pc, #60]	; (8002588 <HAL_TIM_Base_MspInit+0xb4>)
 800254c:	69db      	ldr	r3, [r3, #28]
 800254e:	f003 0320 	and.w	r3, r3, #32
 8002552:	60fb      	str	r3, [r7, #12]
 8002554:	68fb      	ldr	r3, [r7, #12]
}
 8002556:	e010      	b.n	800257a <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM8)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a0d      	ldr	r2, [pc, #52]	; (8002594 <HAL_TIM_Base_MspInit+0xc0>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d10b      	bne.n	800257a <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002562:	4b09      	ldr	r3, [pc, #36]	; (8002588 <HAL_TIM_Base_MspInit+0xb4>)
 8002564:	699b      	ldr	r3, [r3, #24]
 8002566:	4a08      	ldr	r2, [pc, #32]	; (8002588 <HAL_TIM_Base_MspInit+0xb4>)
 8002568:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800256c:	6193      	str	r3, [r2, #24]
 800256e:	4b06      	ldr	r3, [pc, #24]	; (8002588 <HAL_TIM_Base_MspInit+0xb4>)
 8002570:	699b      	ldr	r3, [r3, #24]
 8002572:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002576:	60bb      	str	r3, [r7, #8]
 8002578:	68bb      	ldr	r3, [r7, #8]
}
 800257a:	bf00      	nop
 800257c:	3718      	adds	r7, #24
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	40012c00 	.word	0x40012c00
 8002588:	40021000 	.word	0x40021000
 800258c:	40001000 	.word	0x40001000
 8002590:	40001400 	.word	0x40001400
 8002594:	40013400 	.word	0x40013400

08002598 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b090      	sub	sp, #64	; 0x40
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025a4:	2200      	movs	r2, #0
 80025a6:	601a      	str	r2, [r3, #0]
 80025a8:	605a      	str	r2, [r3, #4]
 80025aa:	609a      	str	r2, [r3, #8]
 80025ac:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025b6:	d157      	bne.n	8002668 <HAL_TIM_Encoder_MspInit+0xd0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80025b8:	4b78      	ldr	r3, [pc, #480]	; (800279c <HAL_TIM_Encoder_MspInit+0x204>)
 80025ba:	69db      	ldr	r3, [r3, #28]
 80025bc:	4a77      	ldr	r2, [pc, #476]	; (800279c <HAL_TIM_Encoder_MspInit+0x204>)
 80025be:	f043 0301 	orr.w	r3, r3, #1
 80025c2:	61d3      	str	r3, [r2, #28]
 80025c4:	4b75      	ldr	r3, [pc, #468]	; (800279c <HAL_TIM_Encoder_MspInit+0x204>)
 80025c6:	69db      	ldr	r3, [r3, #28]
 80025c8:	f003 0301 	and.w	r3, r3, #1
 80025cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80025ce:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025d0:	4b72      	ldr	r3, [pc, #456]	; (800279c <HAL_TIM_Encoder_MspInit+0x204>)
 80025d2:	699b      	ldr	r3, [r3, #24]
 80025d4:	4a71      	ldr	r2, [pc, #452]	; (800279c <HAL_TIM_Encoder_MspInit+0x204>)
 80025d6:	f043 0304 	orr.w	r3, r3, #4
 80025da:	6193      	str	r3, [r2, #24]
 80025dc:	4b6f      	ldr	r3, [pc, #444]	; (800279c <HAL_TIM_Encoder_MspInit+0x204>)
 80025de:	699b      	ldr	r3, [r3, #24]
 80025e0:	f003 0304 	and.w	r3, r3, #4
 80025e4:	627b      	str	r3, [r7, #36]	; 0x24
 80025e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025e8:	4b6c      	ldr	r3, [pc, #432]	; (800279c <HAL_TIM_Encoder_MspInit+0x204>)
 80025ea:	699b      	ldr	r3, [r3, #24]
 80025ec:	4a6b      	ldr	r2, [pc, #428]	; (800279c <HAL_TIM_Encoder_MspInit+0x204>)
 80025ee:	f043 0308 	orr.w	r3, r3, #8
 80025f2:	6193      	str	r3, [r2, #24]
 80025f4:	4b69      	ldr	r3, [pc, #420]	; (800279c <HAL_TIM_Encoder_MspInit+0x204>)
 80025f6:	699b      	ldr	r3, [r3, #24]
 80025f8:	f003 0308 	and.w	r3, r3, #8
 80025fc:	623b      	str	r3, [r7, #32]
 80025fe:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_FRONT_RIGHT_IN_1_Pin;
 8002600:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002604:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002606:	2300      	movs	r3, #0
 8002608:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260a:	2300      	movs	r3, #0
 800260c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENCODER_FRONT_RIGHT_IN_1_GPIO_Port, &GPIO_InitStruct);
 800260e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002612:	4619      	mov	r1, r3
 8002614:	4862      	ldr	r0, [pc, #392]	; (80027a0 <HAL_TIM_Encoder_MspInit+0x208>)
 8002616:	f001 fa27 	bl	8003a68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENCODER_FRONT_RIGHT_IN_2_Pin;
 800261a:	2308      	movs	r3, #8
 800261c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800261e:	2300      	movs	r3, #0
 8002620:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002622:	2300      	movs	r3, #0
 8002624:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENCODER_FRONT_RIGHT_IN_2_GPIO_Port, &GPIO_InitStruct);
 8002626:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800262a:	4619      	mov	r1, r3
 800262c:	485d      	ldr	r0, [pc, #372]	; (80027a4 <HAL_TIM_Encoder_MspInit+0x20c>)
 800262e:	f001 fa1b 	bl	8003a68 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8002632:	4b5d      	ldr	r3, [pc, #372]	; (80027a8 <HAL_TIM_Encoder_MspInit+0x210>)
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002638:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800263a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800263e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002640:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002642:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002646:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002648:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800264a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800264e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002650:	4a55      	ldr	r2, [pc, #340]	; (80027a8 <HAL_TIM_Encoder_MspInit+0x210>)
 8002652:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002654:	6053      	str	r3, [r2, #4]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 4, 0);
 8002656:	2200      	movs	r2, #0
 8002658:	2104      	movs	r1, #4
 800265a:	201c      	movs	r0, #28
 800265c:	f001 f86e 	bl	800373c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002660:	201c      	movs	r0, #28
 8002662:	f001 f897 	bl	8003794 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002666:	e094      	b.n	8002792 <HAL_TIM_Encoder_MspInit+0x1fa>
  else if(htim_encoder->Instance==TIM3)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a4f      	ldr	r2, [pc, #316]	; (80027ac <HAL_TIM_Encoder_MspInit+0x214>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d12c      	bne.n	80026cc <HAL_TIM_Encoder_MspInit+0x134>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002672:	4b4a      	ldr	r3, [pc, #296]	; (800279c <HAL_TIM_Encoder_MspInit+0x204>)
 8002674:	69db      	ldr	r3, [r3, #28]
 8002676:	4a49      	ldr	r2, [pc, #292]	; (800279c <HAL_TIM_Encoder_MspInit+0x204>)
 8002678:	f043 0302 	orr.w	r3, r3, #2
 800267c:	61d3      	str	r3, [r2, #28]
 800267e:	4b47      	ldr	r3, [pc, #284]	; (800279c <HAL_TIM_Encoder_MspInit+0x204>)
 8002680:	69db      	ldr	r3, [r3, #28]
 8002682:	f003 0302 	and.w	r3, r3, #2
 8002686:	61fb      	str	r3, [r7, #28]
 8002688:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800268a:	4b44      	ldr	r3, [pc, #272]	; (800279c <HAL_TIM_Encoder_MspInit+0x204>)
 800268c:	699b      	ldr	r3, [r3, #24]
 800268e:	4a43      	ldr	r2, [pc, #268]	; (800279c <HAL_TIM_Encoder_MspInit+0x204>)
 8002690:	f043 0304 	orr.w	r3, r3, #4
 8002694:	6193      	str	r3, [r2, #24]
 8002696:	4b41      	ldr	r3, [pc, #260]	; (800279c <HAL_TIM_Encoder_MspInit+0x204>)
 8002698:	699b      	ldr	r3, [r3, #24]
 800269a:	f003 0304 	and.w	r3, r3, #4
 800269e:	61bb      	str	r3, [r7, #24]
 80026a0:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ENCODER_FRONT_LEFT_IN_1_Pin|ENCODER_FRONT_LEFT_IN_2_Pin;
 80026a2:	23c0      	movs	r3, #192	; 0xc0
 80026a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026a6:	2300      	movs	r3, #0
 80026a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026aa:	2300      	movs	r3, #0
 80026ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026b2:	4619      	mov	r1, r3
 80026b4:	483a      	ldr	r0, [pc, #232]	; (80027a0 <HAL_TIM_Encoder_MspInit+0x208>)
 80026b6:	f001 f9d7 	bl	8003a68 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 4, 0);
 80026ba:	2200      	movs	r2, #0
 80026bc:	2104      	movs	r1, #4
 80026be:	201d      	movs	r0, #29
 80026c0:	f001 f83c 	bl	800373c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80026c4:	201d      	movs	r0, #29
 80026c6:	f001 f865 	bl	8003794 <HAL_NVIC_EnableIRQ>
}
 80026ca:	e062      	b.n	8002792 <HAL_TIM_Encoder_MspInit+0x1fa>
  else if(htim_encoder->Instance==TIM4)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a37      	ldr	r2, [pc, #220]	; (80027b0 <HAL_TIM_Encoder_MspInit+0x218>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d12c      	bne.n	8002730 <HAL_TIM_Encoder_MspInit+0x198>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80026d6:	4b31      	ldr	r3, [pc, #196]	; (800279c <HAL_TIM_Encoder_MspInit+0x204>)
 80026d8:	69db      	ldr	r3, [r3, #28]
 80026da:	4a30      	ldr	r2, [pc, #192]	; (800279c <HAL_TIM_Encoder_MspInit+0x204>)
 80026dc:	f043 0304 	orr.w	r3, r3, #4
 80026e0:	61d3      	str	r3, [r2, #28]
 80026e2:	4b2e      	ldr	r3, [pc, #184]	; (800279c <HAL_TIM_Encoder_MspInit+0x204>)
 80026e4:	69db      	ldr	r3, [r3, #28]
 80026e6:	f003 0304 	and.w	r3, r3, #4
 80026ea:	617b      	str	r3, [r7, #20]
 80026ec:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026ee:	4b2b      	ldr	r3, [pc, #172]	; (800279c <HAL_TIM_Encoder_MspInit+0x204>)
 80026f0:	699b      	ldr	r3, [r3, #24]
 80026f2:	4a2a      	ldr	r2, [pc, #168]	; (800279c <HAL_TIM_Encoder_MspInit+0x204>)
 80026f4:	f043 0308 	orr.w	r3, r3, #8
 80026f8:	6193      	str	r3, [r2, #24]
 80026fa:	4b28      	ldr	r3, [pc, #160]	; (800279c <HAL_TIM_Encoder_MspInit+0x204>)
 80026fc:	699b      	ldr	r3, [r3, #24]
 80026fe:	f003 0308 	and.w	r3, r3, #8
 8002702:	613b      	str	r3, [r7, #16]
 8002704:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ENCODER_REAR_LEFT_IN_1_Pin|ENCODER_REAR_LEFT_IN_2_Pin;
 8002706:	23c0      	movs	r3, #192	; 0xc0
 8002708:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800270a:	2300      	movs	r3, #0
 800270c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270e:	2300      	movs	r3, #0
 8002710:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002712:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002716:	4619      	mov	r1, r3
 8002718:	4822      	ldr	r0, [pc, #136]	; (80027a4 <HAL_TIM_Encoder_MspInit+0x20c>)
 800271a:	f001 f9a5 	bl	8003a68 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 4, 0);
 800271e:	2200      	movs	r2, #0
 8002720:	2104      	movs	r1, #4
 8002722:	201e      	movs	r0, #30
 8002724:	f001 f80a 	bl	800373c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002728:	201e      	movs	r0, #30
 800272a:	f001 f833 	bl	8003794 <HAL_NVIC_EnableIRQ>
}
 800272e:	e030      	b.n	8002792 <HAL_TIM_Encoder_MspInit+0x1fa>
  else if(htim_encoder->Instance==TIM5)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a1f      	ldr	r2, [pc, #124]	; (80027b4 <HAL_TIM_Encoder_MspInit+0x21c>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d12b      	bne.n	8002792 <HAL_TIM_Encoder_MspInit+0x1fa>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800273a:	4b18      	ldr	r3, [pc, #96]	; (800279c <HAL_TIM_Encoder_MspInit+0x204>)
 800273c:	69db      	ldr	r3, [r3, #28]
 800273e:	4a17      	ldr	r2, [pc, #92]	; (800279c <HAL_TIM_Encoder_MspInit+0x204>)
 8002740:	f043 0308 	orr.w	r3, r3, #8
 8002744:	61d3      	str	r3, [r2, #28]
 8002746:	4b15      	ldr	r3, [pc, #84]	; (800279c <HAL_TIM_Encoder_MspInit+0x204>)
 8002748:	69db      	ldr	r3, [r3, #28]
 800274a:	f003 0308 	and.w	r3, r3, #8
 800274e:	60fb      	str	r3, [r7, #12]
 8002750:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002752:	4b12      	ldr	r3, [pc, #72]	; (800279c <HAL_TIM_Encoder_MspInit+0x204>)
 8002754:	699b      	ldr	r3, [r3, #24]
 8002756:	4a11      	ldr	r2, [pc, #68]	; (800279c <HAL_TIM_Encoder_MspInit+0x204>)
 8002758:	f043 0304 	orr.w	r3, r3, #4
 800275c:	6193      	str	r3, [r2, #24]
 800275e:	4b0f      	ldr	r3, [pc, #60]	; (800279c <HAL_TIM_Encoder_MspInit+0x204>)
 8002760:	699b      	ldr	r3, [r3, #24]
 8002762:	f003 0304 	and.w	r3, r3, #4
 8002766:	60bb      	str	r3, [r7, #8]
 8002768:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENCODER_REAR_RIGHT_IN_1_Pin|ENCODER_REAR_RIGHT_IN_2_Pin;
 800276a:	2303      	movs	r3, #3
 800276c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800276e:	2300      	movs	r3, #0
 8002770:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002772:	2300      	movs	r3, #0
 8002774:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002776:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800277a:	4619      	mov	r1, r3
 800277c:	4808      	ldr	r0, [pc, #32]	; (80027a0 <HAL_TIM_Encoder_MspInit+0x208>)
 800277e:	f001 f973 	bl	8003a68 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 4, 0);
 8002782:	2200      	movs	r2, #0
 8002784:	2104      	movs	r1, #4
 8002786:	2032      	movs	r0, #50	; 0x32
 8002788:	f000 ffd8 	bl	800373c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800278c:	2032      	movs	r0, #50	; 0x32
 800278e:	f001 f801 	bl	8003794 <HAL_NVIC_EnableIRQ>
}
 8002792:	bf00      	nop
 8002794:	3740      	adds	r7, #64	; 0x40
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	40021000 	.word	0x40021000
 80027a0:	40010800 	.word	0x40010800
 80027a4:	40010c00 	.word	0x40010c00
 80027a8:	40010000 	.word	0x40010000
 80027ac:	40000400 	.word	0x40000400
 80027b0:	40000800 	.word	0x40000800
 80027b4:	40000c00 	.word	0x40000c00

080027b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b088      	sub	sp, #32
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027c0:	f107 0310 	add.w	r3, r7, #16
 80027c4:	2200      	movs	r2, #0
 80027c6:	601a      	str	r2, [r3, #0]
 80027c8:	605a      	str	r2, [r3, #4]
 80027ca:	609a      	str	r2, [r3, #8]
 80027cc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM8)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a10      	ldr	r2, [pc, #64]	; (8002814 <HAL_TIM_MspPostInit+0x5c>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d118      	bne.n	800280a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027d8:	4b0f      	ldr	r3, [pc, #60]	; (8002818 <HAL_TIM_MspPostInit+0x60>)
 80027da:	699b      	ldr	r3, [r3, #24]
 80027dc:	4a0e      	ldr	r2, [pc, #56]	; (8002818 <HAL_TIM_MspPostInit+0x60>)
 80027de:	f043 0310 	orr.w	r3, r3, #16
 80027e2:	6193      	str	r3, [r2, #24]
 80027e4:	4b0c      	ldr	r3, [pc, #48]	; (8002818 <HAL_TIM_MspPostInit+0x60>)
 80027e6:	699b      	ldr	r3, [r3, #24]
 80027e8:	f003 0310 	and.w	r3, r3, #16
 80027ec:	60fb      	str	r3, [r7, #12]
 80027ee:	68fb      	ldr	r3, [r7, #12]
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    PC8     ------> TIM8_CH3
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = MOTOR_REAR_RIGHT_PWM_Pin|MOTOR_REAR_LEFT_PWM_Pin|MOTOR_FRONT_RIGHT_PWM_Pin|MOTOR_FRONT_LEFT_PWM_Pin;
 80027f0:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80027f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f6:	2302      	movs	r3, #2
 80027f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027fa:	2303      	movs	r3, #3
 80027fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027fe:	f107 0310 	add.w	r3, r7, #16
 8002802:	4619      	mov	r1, r3
 8002804:	4805      	ldr	r0, [pc, #20]	; (800281c <HAL_TIM_MspPostInit+0x64>)
 8002806:	f001 f92f 	bl	8003a68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800280a:	bf00      	nop
 800280c:	3720      	adds	r7, #32
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	40013400 	.word	0x40013400
 8002818:	40021000 	.word	0x40021000
 800281c:	40011000 	.word	0x40011000

08002820 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b08a      	sub	sp, #40	; 0x28
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002828:	f107 0318 	add.w	r3, r7, #24
 800282c:	2200      	movs	r2, #0
 800282e:	601a      	str	r2, [r3, #0]
 8002830:	605a      	str	r2, [r3, #4]
 8002832:	609a      	str	r2, [r3, #8]
 8002834:	60da      	str	r2, [r3, #12]
  if(huart->Instance==UART4)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a40      	ldr	r2, [pc, #256]	; (800293c <HAL_UART_MspInit+0x11c>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d13a      	bne.n	80028b6 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002840:	4b3f      	ldr	r3, [pc, #252]	; (8002940 <HAL_UART_MspInit+0x120>)
 8002842:	69db      	ldr	r3, [r3, #28]
 8002844:	4a3e      	ldr	r2, [pc, #248]	; (8002940 <HAL_UART_MspInit+0x120>)
 8002846:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800284a:	61d3      	str	r3, [r2, #28]
 800284c:	4b3c      	ldr	r3, [pc, #240]	; (8002940 <HAL_UART_MspInit+0x120>)
 800284e:	69db      	ldr	r3, [r3, #28]
 8002850:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002854:	617b      	str	r3, [r7, #20]
 8002856:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002858:	4b39      	ldr	r3, [pc, #228]	; (8002940 <HAL_UART_MspInit+0x120>)
 800285a:	699b      	ldr	r3, [r3, #24]
 800285c:	4a38      	ldr	r2, [pc, #224]	; (8002940 <HAL_UART_MspInit+0x120>)
 800285e:	f043 0310 	orr.w	r3, r3, #16
 8002862:	6193      	str	r3, [r2, #24]
 8002864:	4b36      	ldr	r3, [pc, #216]	; (8002940 <HAL_UART_MspInit+0x120>)
 8002866:	699b      	ldr	r3, [r3, #24]
 8002868:	f003 0310 	and.w	r3, r3, #16
 800286c:	613b      	str	r3, [r7, #16]
 800286e:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = MASTER_USART_TX_Pin;
 8002870:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002874:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002876:	2302      	movs	r3, #2
 8002878:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800287a:	2303      	movs	r3, #3
 800287c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MASTER_USART_TX_GPIO_Port, &GPIO_InitStruct);
 800287e:	f107 0318 	add.w	r3, r7, #24
 8002882:	4619      	mov	r1, r3
 8002884:	482f      	ldr	r0, [pc, #188]	; (8002944 <HAL_UART_MspInit+0x124>)
 8002886:	f001 f8ef 	bl	8003a68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MASTER_USART_RX_Pin;
 800288a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800288e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002890:	2300      	movs	r3, #0
 8002892:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002894:	2300      	movs	r3, #0
 8002896:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(MASTER_USART_RX_GPIO_Port, &GPIO_InitStruct);
 8002898:	f107 0318 	add.w	r3, r7, #24
 800289c:	4619      	mov	r1, r3
 800289e:	4829      	ldr	r0, [pc, #164]	; (8002944 <HAL_UART_MspInit+0x124>)
 80028a0:	f001 f8e2 	bl	8003a68 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80028a4:	2200      	movs	r2, #0
 80028a6:	2105      	movs	r1, #5
 80028a8:	2034      	movs	r0, #52	; 0x34
 80028aa:	f000 ff47 	bl	800373c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80028ae:	2034      	movs	r0, #52	; 0x34
 80028b0:	f000 ff70 	bl	8003794 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80028b4:	e03e      	b.n	8002934 <HAL_UART_MspInit+0x114>
  else if(huart->Instance==USART1)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a23      	ldr	r2, [pc, #140]	; (8002948 <HAL_UART_MspInit+0x128>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d139      	bne.n	8002934 <HAL_UART_MspInit+0x114>
    __HAL_RCC_USART1_CLK_ENABLE();
 80028c0:	4b1f      	ldr	r3, [pc, #124]	; (8002940 <HAL_UART_MspInit+0x120>)
 80028c2:	699b      	ldr	r3, [r3, #24]
 80028c4:	4a1e      	ldr	r2, [pc, #120]	; (8002940 <HAL_UART_MspInit+0x120>)
 80028c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028ca:	6193      	str	r3, [r2, #24]
 80028cc:	4b1c      	ldr	r3, [pc, #112]	; (8002940 <HAL_UART_MspInit+0x120>)
 80028ce:	699b      	ldr	r3, [r3, #24]
 80028d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028d4:	60fb      	str	r3, [r7, #12]
 80028d6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028d8:	4b19      	ldr	r3, [pc, #100]	; (8002940 <HAL_UART_MspInit+0x120>)
 80028da:	699b      	ldr	r3, [r3, #24]
 80028dc:	4a18      	ldr	r2, [pc, #96]	; (8002940 <HAL_UART_MspInit+0x120>)
 80028de:	f043 0304 	orr.w	r3, r3, #4
 80028e2:	6193      	str	r3, [r2, #24]
 80028e4:	4b16      	ldr	r3, [pc, #88]	; (8002940 <HAL_UART_MspInit+0x120>)
 80028e6:	699b      	ldr	r3, [r3, #24]
 80028e8:	f003 0304 	and.w	r3, r3, #4
 80028ec:	60bb      	str	r3, [r7, #8]
 80028ee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = CONSOLE_USART_TX_Pin;
 80028f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f6:	2302      	movs	r3, #2
 80028f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028fa:	2303      	movs	r3, #3
 80028fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(CONSOLE_USART_TX_GPIO_Port, &GPIO_InitStruct);
 80028fe:	f107 0318 	add.w	r3, r7, #24
 8002902:	4619      	mov	r1, r3
 8002904:	4811      	ldr	r0, [pc, #68]	; (800294c <HAL_UART_MspInit+0x12c>)
 8002906:	f001 f8af 	bl	8003a68 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = CONSOLE_USART_RX_Pin;
 800290a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800290e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002910:	2300      	movs	r3, #0
 8002912:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002914:	2300      	movs	r3, #0
 8002916:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(CONSOLE_USART_RX_GPIO_Port, &GPIO_InitStruct);
 8002918:	f107 0318 	add.w	r3, r7, #24
 800291c:	4619      	mov	r1, r3
 800291e:	480b      	ldr	r0, [pc, #44]	; (800294c <HAL_UART_MspInit+0x12c>)
 8002920:	f001 f8a2 	bl	8003a68 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002924:	2200      	movs	r2, #0
 8002926:	2105      	movs	r1, #5
 8002928:	2025      	movs	r0, #37	; 0x25
 800292a:	f000 ff07 	bl	800373c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800292e:	2025      	movs	r0, #37	; 0x25
 8002930:	f000 ff30 	bl	8003794 <HAL_NVIC_EnableIRQ>
}
 8002934:	bf00      	nop
 8002936:	3728      	adds	r7, #40	; 0x28
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	40004c00 	.word	0x40004c00
 8002940:	40021000 	.word	0x40021000
 8002944:	40011000 	.word	0x40011000
 8002948:	40013800 	.word	0x40013800
 800294c:	40010800 	.word	0x40010800

08002950 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  LOG_error("NMI_Handler() triggered");
 8002954:	4902      	ldr	r1, [pc, #8]	; (8002960 <NMI_Handler+0x10>)
 8002956:	2003      	movs	r0, #3
 8002958:	f007 ffb0 	bl	800a8bc <LOG_log>
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800295c:	e7fe      	b.n	800295c <NMI_Handler+0xc>
 800295e:	bf00      	nop
 8002960:	08010410 	.word	0x08010410

08002964 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  LOG_error("HardFault_Handler() triggered");
 8002968:	4902      	ldr	r1, [pc, #8]	; (8002974 <HardFault_Handler+0x10>)
 800296a:	2003      	movs	r0, #3
 800296c:	f007 ffa6 	bl	800a8bc <LOG_log>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002970:	e7fe      	b.n	8002970 <HardFault_Handler+0xc>
 8002972:	bf00      	nop
 8002974:	08010428 	.word	0x08010428

08002978 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
  LOG_error("MemManage_Handler() triggered");
 800297c:	4902      	ldr	r1, [pc, #8]	; (8002988 <MemManage_Handler+0x10>)
 800297e:	2003      	movs	r0, #3
 8002980:	f007 ff9c 	bl	800a8bc <LOG_log>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002984:	e7fe      	b.n	8002984 <MemManage_Handler+0xc>
 8002986:	bf00      	nop
 8002988:	08010448 	.word	0x08010448

0800298c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
  LOG_error("BusFault_Handler() triggered");
 8002990:	4902      	ldr	r1, [pc, #8]	; (800299c <BusFault_Handler+0x10>)
 8002992:	2003      	movs	r0, #3
 8002994:	f007 ff92 	bl	800a8bc <LOG_log>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002998:	e7fe      	b.n	8002998 <BusFault_Handler+0xc>
 800299a:	bf00      	nop
 800299c:	08010468 	.word	0x08010468

080029a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
  LOG_error("UsageFault_Handler() triggered");
 80029a4:	4902      	ldr	r1, [pc, #8]	; (80029b0 <UsageFault_Handler+0x10>)
 80029a6:	2003      	movs	r0, #3
 80029a8:	f007 ff88 	bl	800a8bc <LOG_log>
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029ac:	e7fe      	b.n	80029ac <UsageFault_Handler+0xc>
 80029ae:	bf00      	nop
 80029b0:	08010488 	.word	0x08010488

080029b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SVCall_IRQn 0 */
  LOG_error("SVC_Handler() triggered");
 80029b8:	4902      	ldr	r1, [pc, #8]	; (80029c4 <SVC_Handler+0x10>)
 80029ba:	2003      	movs	r0, #3
 80029bc:	f007 ff7e 	bl	800a8bc <LOG_log>
  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029c0:	bf00      	nop
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	080104a8 	.word	0x080104a8

080029c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */
  LOG_error("DebugMon_Handler() triggered");
 80029cc:	4902      	ldr	r1, [pc, #8]	; (80029d8 <DebugMon_Handler+0x10>)
 80029ce:	2003      	movs	r0, #3
 80029d0:	f007 ff74 	bl	800a8bc <LOG_log>
  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029d4:	bf00      	nop
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	080104c0 	.word	0x080104c0

080029dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PendSV_IRQn 0 */
  LOG_error("PendSV_Handler() triggered");
 80029e0:	4902      	ldr	r1, [pc, #8]	; (80029ec <PendSV_Handler+0x10>)
 80029e2:	2003      	movs	r0, #3
 80029e4:	f007 ff6a 	bl	800a8bc <LOG_log>
  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029e8:	bf00      	nop
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	080104e0 	.word	0x080104e0

080029f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029f4:	f000 f988 	bl	8002d08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029f8:	bf00      	nop
 80029fa:	bd80      	pop	{r7, pc}

080029fc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002a00:	4802      	ldr	r0, [pc, #8]	; (8002a0c <TIM1_UP_IRQHandler+0x10>)
 8002a02:	f004 f847 	bl	8006a94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002a06:	bf00      	nop
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	2000099c 	.word	0x2000099c

08002a10 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002a14:	4802      	ldr	r0, [pc, #8]	; (8002a20 <TIM2_IRQHandler+0x10>)
 8002a16:	f004 f83d 	bl	8006a94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002a1a:	bf00      	nop
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	20000ac8 	.word	0x20000ac8

08002a24 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002a28:	4802      	ldr	r0, [pc, #8]	; (8002a34 <TIM3_IRQHandler+0x10>)
 8002a2a:	f004 f833 	bl	8006a94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002a2e:	bf00      	nop
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	2000077c 	.word	0x2000077c

08002a38 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002a3c:	4802      	ldr	r0, [pc, #8]	; (8002a48 <TIM4_IRQHandler+0x10>)
 8002a3e:	f004 f829 	bl	8006a94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002a42:	bf00      	nop
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	20000614 	.word	0x20000614

08002a4c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002a50:	4802      	ldr	r0, [pc, #8]	; (8002a5c <USART1_IRQHandler+0x10>)
 8002a52:	f005 fd7f 	bl	8008554 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002a56:	bf00      	nop
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	20000860 	.word	0x20000860

08002a60 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002a64:	4802      	ldr	r0, [pc, #8]	; (8002a70 <TIM5_IRQHandler+0x10>)
 8002a66:	f004 f815 	bl	8006a94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002a6a:	bf00      	nop
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	200006c8 	.word	0x200006c8

08002a74 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002a78:	4802      	ldr	r0, [pc, #8]	; (8002a84 <UART4_IRQHandler+0x10>)
 8002a7a:	f005 fd6b 	bl	8008554 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002a7e:	bf00      	nop
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	20000a54 	.word	0x20000a54

08002a88 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
	return 1;
 8002a8c:	2301      	movs	r3, #1
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bc80      	pop	{r7}
 8002a94:	4770      	bx	lr

08002a96 <_kill>:

int _kill(int pid, int sig)
{
 8002a96:	b580      	push	{r7, lr}
 8002a98:	b082      	sub	sp, #8
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
 8002a9e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002aa0:	f008 feec 	bl	800b87c <__errno>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2216      	movs	r2, #22
 8002aa8:	601a      	str	r2, [r3, #0]
	return -1;
 8002aaa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3708      	adds	r7, #8
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}

08002ab6 <_exit>:

void _exit (int status)
{
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	b082      	sub	sp, #8
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002abe:	f04f 31ff 	mov.w	r1, #4294967295
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f7ff ffe7 	bl	8002a96 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002ac8:	e7fe      	b.n	8002ac8 <_exit+0x12>

08002aca <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b086      	sub	sp, #24
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	60f8      	str	r0, [r7, #12]
 8002ad2:	60b9      	str	r1, [r7, #8]
 8002ad4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	617b      	str	r3, [r7, #20]
 8002ada:	e00a      	b.n	8002af2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002adc:	f3af 8000 	nop.w
 8002ae0:	4601      	mov	r1, r0
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	1c5a      	adds	r2, r3, #1
 8002ae6:	60ba      	str	r2, [r7, #8]
 8002ae8:	b2ca      	uxtb	r2, r1
 8002aea:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	3301      	adds	r3, #1
 8002af0:	617b      	str	r3, [r7, #20]
 8002af2:	697a      	ldr	r2, [r7, #20]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	dbf0      	blt.n	8002adc <_read+0x12>
	}

return len;
 8002afa:	687b      	ldr	r3, [r7, #4]
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3718      	adds	r7, #24
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	60b9      	str	r1, [r7, #8]
 8002b0e:	607a      	str	r2, [r7, #4]
  if ((file != STDOUT_FILENO) && (file != STDERR_FILENO))
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d00a      	beq.n	8002b2c <_write+0x28>
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d007      	beq.n	8002b2c <_write+0x28>
  {
    errno = EBADF;
 8002b1c:	f008 feae 	bl	800b87c <__errno>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2209      	movs	r2, #9
 8002b24:	601a      	str	r2, [r3, #0]
    return -1;
 8002b26:	f04f 33ff 	mov.w	r3, #4294967295
 8002b2a:	e00f      	b.n	8002b4c <_write+0x48>
  }

  if (g_MAIN_printOutput == MAIN_PRINT_OUTPUT_TO_CONSOLE)
 8002b2c:	4b09      	ldr	r3, [pc, #36]	; (8002b54 <_write+0x50>)
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d105      	bne.n	8002b40 <_write+0x3c>
  {
    CON_sendString(ptr, len);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	4619      	mov	r1, r3
 8002b38:	68b8      	ldr	r0, [r7, #8]
 8002b3a:	f006 fcd9 	bl	80094f0 <CON_sendString>
 8002b3e:	e004      	b.n	8002b4a <_write+0x46>
  }
  else
  {
    MAS_sendString(ptr, len);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	4619      	mov	r1, r3
 8002b44:	68b8      	ldr	r0, [r7, #8]
 8002b46:	f007 ffb9 	bl	800aabc <MAS_sendString>
  }

  return len;
 8002b4a:	687b      	ldr	r3, [r7, #4]
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3710      	adds	r7, #16
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	20000a50 	.word	0x20000a50

08002b58 <_close>:

int _close(int file)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
	return -1;
 8002b60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bc80      	pop	{r7}
 8002b6c:	4770      	bx	lr

08002b6e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b6e:	b480      	push	{r7}
 8002b70:	b083      	sub	sp, #12
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
 8002b76:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b7e:	605a      	str	r2, [r3, #4]
	return 0;
 8002b80:	2300      	movs	r3, #0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	370c      	adds	r7, #12
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bc80      	pop	{r7}
 8002b8a:	4770      	bx	lr

08002b8c <_isatty>:

int _isatty(int file)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
	return 1;
 8002b94:	2301      	movs	r3, #1
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bc80      	pop	{r7}
 8002b9e:	4770      	bx	lr

08002ba0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b085      	sub	sp, #20
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	60b9      	str	r1, [r7, #8]
 8002baa:	607a      	str	r2, [r7, #4]
	return 0;
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3714      	adds	r7, #20
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bc80      	pop	{r7}
 8002bb6:	4770      	bx	lr

08002bb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b086      	sub	sp, #24
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002bc0:	4a14      	ldr	r2, [pc, #80]	; (8002c14 <_sbrk+0x5c>)
 8002bc2:	4b15      	ldr	r3, [pc, #84]	; (8002c18 <_sbrk+0x60>)
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002bcc:	4b13      	ldr	r3, [pc, #76]	; (8002c1c <_sbrk+0x64>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d102      	bne.n	8002bda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002bd4:	4b11      	ldr	r3, [pc, #68]	; (8002c1c <_sbrk+0x64>)
 8002bd6:	4a12      	ldr	r2, [pc, #72]	; (8002c20 <_sbrk+0x68>)
 8002bd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002bda:	4b10      	ldr	r3, [pc, #64]	; (8002c1c <_sbrk+0x64>)
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4413      	add	r3, r2
 8002be2:	693a      	ldr	r2, [r7, #16]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d207      	bcs.n	8002bf8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002be8:	f008 fe48 	bl	800b87c <__errno>
 8002bec:	4603      	mov	r3, r0
 8002bee:	220c      	movs	r2, #12
 8002bf0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8002bf6:	e009      	b.n	8002c0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002bf8:	4b08      	ldr	r3, [pc, #32]	; (8002c1c <_sbrk+0x64>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002bfe:	4b07      	ldr	r3, [pc, #28]	; (8002c1c <_sbrk+0x64>)
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4413      	add	r3, r2
 8002c06:	4a05      	ldr	r2, [pc, #20]	; (8002c1c <_sbrk+0x64>)
 8002c08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3718      	adds	r7, #24
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	2000c000 	.word	0x2000c000
 8002c18:	00000400 	.word	0x00000400
 8002c1c:	20000230 	.word	0x20000230
 8002c20:	20000c48 	.word	0x20000c48

08002c24 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c28:	bf00      	nop
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bc80      	pop	{r7}
 8002c2e:	4770      	bx	lr

08002c30 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c30:	480c      	ldr	r0, [pc, #48]	; (8002c64 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002c32:	490d      	ldr	r1, [pc, #52]	; (8002c68 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002c34:	4a0d      	ldr	r2, [pc, #52]	; (8002c6c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002c36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c38:	e002      	b.n	8002c40 <LoopCopyDataInit>

08002c3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c3e:	3304      	adds	r3, #4

08002c40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c44:	d3f9      	bcc.n	8002c3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c46:	4a0a      	ldr	r2, [pc, #40]	; (8002c70 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002c48:	4c0a      	ldr	r4, [pc, #40]	; (8002c74 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002c4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c4c:	e001      	b.n	8002c52 <LoopFillZerobss>

08002c4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c50:	3204      	adds	r2, #4

08002c52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c54:	d3fb      	bcc.n	8002c4e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002c56:	f7ff ffe5 	bl	8002c24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c5a:	f008 fe15 	bl	800b888 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002c5e:	f7fe fc21 	bl	80014a4 <main>
  bx lr
 8002c62:	4770      	bx	lr
  ldr r0, =_sdata
 8002c64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c68:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8002c6c:	0801156c 	.word	0x0801156c
  ldr r2, =_sbss
 8002c70:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8002c74:	20000c44 	.word	0x20000c44

08002c78 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002c78:	e7fe      	b.n	8002c78 <ADC1_2_IRQHandler>
	...

08002c7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c80:	4b08      	ldr	r3, [pc, #32]	; (8002ca4 <HAL_Init+0x28>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a07      	ldr	r2, [pc, #28]	; (8002ca4 <HAL_Init+0x28>)
 8002c86:	f043 0310 	orr.w	r3, r3, #16
 8002c8a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c8c:	2003      	movs	r0, #3
 8002c8e:	f000 fd35 	bl	80036fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c92:	2000      	movs	r0, #0
 8002c94:	f000 f808 	bl	8002ca8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c98:	f7ff fb8a 	bl	80023b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	40022000 	.word	0x40022000

08002ca8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002cb0:	4b12      	ldr	r3, [pc, #72]	; (8002cfc <HAL_InitTick+0x54>)
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	4b12      	ldr	r3, [pc, #72]	; (8002d00 <HAL_InitTick+0x58>)
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	4619      	mov	r1, r3
 8002cba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f000 fd80 	bl	80037cc <HAL_SYSTICK_Config>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d001      	beq.n	8002cd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e00e      	b.n	8002cf4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2b0f      	cmp	r3, #15
 8002cda:	d80a      	bhi.n	8002cf2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cdc:	2200      	movs	r2, #0
 8002cde:	6879      	ldr	r1, [r7, #4]
 8002ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ce4:	f000 fd2a 	bl	800373c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ce8:	4a06      	ldr	r2, [pc, #24]	; (8002d04 <HAL_InitTick+0x5c>)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	e000      	b.n	8002cf4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3708      	adds	r7, #8
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	20000000 	.word	0x20000000
 8002d00:	20000008 	.word	0x20000008
 8002d04:	20000004 	.word	0x20000004

08002d08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d0c:	4b05      	ldr	r3, [pc, #20]	; (8002d24 <HAL_IncTick+0x1c>)
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	461a      	mov	r2, r3
 8002d12:	4b05      	ldr	r3, [pc, #20]	; (8002d28 <HAL_IncTick+0x20>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4413      	add	r3, r2
 8002d18:	4a03      	ldr	r2, [pc, #12]	; (8002d28 <HAL_IncTick+0x20>)
 8002d1a:	6013      	str	r3, [r2, #0]
}
 8002d1c:	bf00      	nop
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bc80      	pop	{r7}
 8002d22:	4770      	bx	lr
 8002d24:	20000008 	.word	0x20000008
 8002d28:	20000c30 	.word	0x20000c30

08002d2c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	af00      	add	r7, sp, #0
  return uwTick;
 8002d30:	4b02      	ldr	r3, [pc, #8]	; (8002d3c <HAL_GetTick+0x10>)
 8002d32:	681b      	ldr	r3, [r3, #0]
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bc80      	pop	{r7}
 8002d3a:	4770      	bx	lr
 8002d3c:	20000c30 	.word	0x20000c30

08002d40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d48:	f7ff fff0 	bl	8002d2c <HAL_GetTick>
 8002d4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d58:	d005      	beq.n	8002d66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d5a:	4b0a      	ldr	r3, [pc, #40]	; (8002d84 <HAL_Delay+0x44>)
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	461a      	mov	r2, r3
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	4413      	add	r3, r2
 8002d64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d66:	bf00      	nop
 8002d68:	f7ff ffe0 	bl	8002d2c <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	68fa      	ldr	r2, [r7, #12]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d8f7      	bhi.n	8002d68 <HAL_Delay+0x28>
  {
  }
}
 8002d78:	bf00      	nop
 8002d7a:	bf00      	nop
 8002d7c:	3710      	adds	r7, #16
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	20000008 	.word	0x20000008

08002d88 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b086      	sub	sp, #24
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d90:	2300      	movs	r3, #0
 8002d92:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002d94:	2300      	movs	r3, #0
 8002d96:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d101      	bne.n	8002daa <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e188      	b.n	80030bc <HAL_ADC_Init+0x334>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a8c      	ldr	r2, [pc, #560]	; (8002fe0 <HAL_ADC_Init+0x258>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d00e      	beq.n	8002dd2 <HAL_ADC_Init+0x4a>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a8a      	ldr	r2, [pc, #552]	; (8002fe4 <HAL_ADC_Init+0x25c>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d009      	beq.n	8002dd2 <HAL_ADC_Init+0x4a>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a89      	ldr	r2, [pc, #548]	; (8002fe8 <HAL_ADC_Init+0x260>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d004      	beq.n	8002dd2 <HAL_ADC_Init+0x4a>
 8002dc8:	f240 11b3 	movw	r1, #435	; 0x1b3
 8002dcc:	4887      	ldr	r0, [pc, #540]	; (8002fec <HAL_ADC_Init+0x264>)
 8002dce:	f7ff fadd 	bl	800238c <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d009      	beq.n	8002dee <HAL_ADC_Init+0x66>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002de2:	d004      	beq.n	8002dee <HAL_ADC_Init+0x66>
 8002de4:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 8002de8:	4880      	ldr	r0, [pc, #512]	; (8002fec <HAL_ADC_Init+0x264>)
 8002dea:	f7ff facf 	bl	800238c <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d009      	beq.n	8002e0a <HAL_ADC_Init+0x82>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dfe:	d004      	beq.n	8002e0a <HAL_ADC_Init+0x82>
 8002e00:	f240 11b5 	movw	r1, #437	; 0x1b5
 8002e04:	4879      	ldr	r0, [pc, #484]	; (8002fec <HAL_ADC_Init+0x264>)
 8002e06:	f7ff fac1 	bl	800238c <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	7b1b      	ldrb	r3, [r3, #12]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d008      	beq.n	8002e24 <HAL_ADC_Init+0x9c>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	7b1b      	ldrb	r3, [r3, #12]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d004      	beq.n	8002e24 <HAL_ADC_Init+0x9c>
 8002e1a:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 8002e1e:	4873      	ldr	r0, [pc, #460]	; (8002fec <HAL_ADC_Init+0x264>)
 8002e20:	f7ff fab4 	bl	800238c <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	69db      	ldr	r3, [r3, #28]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d044      	beq.n	8002eb6 <HAL_ADC_Init+0x12e>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	69db      	ldr	r3, [r3, #28]
 8002e30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e34:	d03f      	beq.n	8002eb6 <HAL_ADC_Init+0x12e>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	69db      	ldr	r3, [r3, #28]
 8002e3a:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8002e3e:	d03a      	beq.n	8002eb6 <HAL_ADC_Init+0x12e>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	69db      	ldr	r3, [r3, #28]
 8002e44:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002e48:	d035      	beq.n	8002eb6 <HAL_ADC_Init+0x12e>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	69db      	ldr	r3, [r3, #28]
 8002e4e:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 8002e52:	d030      	beq.n	8002eb6 <HAL_ADC_Init+0x12e>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	69db      	ldr	r3, [r3, #28]
 8002e58:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002e5c:	d02b      	beq.n	8002eb6 <HAL_ADC_Init+0x12e>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	69db      	ldr	r3, [r3, #28]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d027      	beq.n	8002eb6 <HAL_ADC_Init+0x12e>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	69db      	ldr	r3, [r3, #28]
 8002e6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e6e:	d022      	beq.n	8002eb6 <HAL_ADC_Init+0x12e>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	69db      	ldr	r3, [r3, #28]
 8002e74:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8002e78:	d01d      	beq.n	8002eb6 <HAL_ADC_Init+0x12e>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	69db      	ldr	r3, [r3, #28]
 8002e7e:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 8002e82:	d018      	beq.n	8002eb6 <HAL_ADC_Init+0x12e>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	69db      	ldr	r3, [r3, #28]
 8002e88:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002e8c:	d013      	beq.n	8002eb6 <HAL_ADC_Init+0x12e>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	69db      	ldr	r3, [r3, #28]
 8002e92:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e96:	d00e      	beq.n	8002eb6 <HAL_ADC_Init+0x12e>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	69db      	ldr	r3, [r3, #28]
 8002e9c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002ea0:	d009      	beq.n	8002eb6 <HAL_ADC_Init+0x12e>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	69db      	ldr	r3, [r3, #28]
 8002ea6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002eaa:	d004      	beq.n	8002eb6 <HAL_ADC_Init+0x12e>
 8002eac:	f240 11b7 	movw	r1, #439	; 0x1b7
 8002eb0:	484e      	ldr	r0, [pc, #312]	; (8002fec <HAL_ADC_Init+0x264>)
 8002eb2:	f7ff fa6b 	bl	800238c <assert_failed>
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d02a      	beq.n	8002f14 <HAL_ADC_Init+0x18c>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d003      	beq.n	8002ece <HAL_ADC_Init+0x146>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	2b10      	cmp	r3, #16
 8002ecc:	d904      	bls.n	8002ed8 <HAL_ADC_Init+0x150>
 8002ece:	f240 11bb 	movw	r1, #443	; 0x1bb
 8002ed2:	4846      	ldr	r0, [pc, #280]	; (8002fec <HAL_ADC_Init+0x264>)
 8002ed4:	f7ff fa5a 	bl	800238c <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	7d1b      	ldrb	r3, [r3, #20]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d008      	beq.n	8002ef2 <HAL_ADC_Init+0x16a>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	7d1b      	ldrb	r3, [r3, #20]
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d004      	beq.n	8002ef2 <HAL_ADC_Init+0x16a>
 8002ee8:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8002eec:	483f      	ldr	r0, [pc, #252]	; (8002fec <HAL_ADC_Init+0x264>)
 8002eee:	f7ff fa4d 	bl	800238c <assert_failed>
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	7d1b      	ldrb	r3, [r3, #20]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d00c      	beq.n	8002f14 <HAL_ADC_Init+0x18c>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	699b      	ldr	r3, [r3, #24]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d003      	beq.n	8002f0a <HAL_ADC_Init+0x182>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	699b      	ldr	r3, [r3, #24]
 8002f06:	2b08      	cmp	r3, #8
 8002f08:	d904      	bls.n	8002f14 <HAL_ADC_Init+0x18c>
 8002f0a:	f240 11bf 	movw	r1, #447	; 0x1bf
 8002f0e:	4837      	ldr	r0, [pc, #220]	; (8002fec <HAL_ADC_Init+0x264>)
 8002f10:	f7ff fa3c 	bl	800238c <assert_failed>
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d109      	bne.n	8002f30 <HAL_ADC_Init+0x1a8>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f7ff fa72 	bl	8002414 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f000 fabf 	bl	80034b4 <ADC_ConversionStop_Disable>
 8002f36:	4603      	mov	r3, r0
 8002f38:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f3e:	f003 0310 	and.w	r3, r3, #16
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	f040 80b1 	bne.w	80030aa <HAL_ADC_Init+0x322>
 8002f48:	7dfb      	ldrb	r3, [r7, #23]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	f040 80ad 	bne.w	80030aa <HAL_ADC_Init+0x322>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f54:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002f58:	f023 0302 	bic.w	r3, r3, #2
 8002f5c:	f043 0202 	orr.w	r2, r3, #2
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	491e      	ldr	r1, [pc, #120]	; (8002fe8 <HAL_ADC_Init+0x260>)
 8002f6e:	428b      	cmp	r3, r1
 8002f70:	d10a      	bne.n	8002f88 <HAL_ADC_Init+0x200>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	69db      	ldr	r3, [r3, #28]
 8002f76:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002f7a:	d002      	beq.n	8002f82 <HAL_ADC_Init+0x1fa>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	69db      	ldr	r3, [r3, #28]
 8002f80:	e004      	b.n	8002f8c <HAL_ADC_Init+0x204>
 8002f82:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002f86:	e001      	b.n	8002f8c <HAL_ADC_Init+0x204>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002f8c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	7b1b      	ldrb	r3, [r3, #12]
 8002f92:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002f94:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002f96:	68ba      	ldr	r2, [r7, #8]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fa4:	d003      	beq.n	8002fae <HAL_ADC_Init+0x226>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d102      	bne.n	8002fb4 <HAL_ADC_Init+0x22c>
 8002fae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002fb2:	e000      	b.n	8002fb6 <HAL_ADC_Init+0x22e>
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	693a      	ldr	r2, [r7, #16]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	7d1b      	ldrb	r3, [r3, #20]
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d121      	bne.n	8003008 <HAL_ADC_Init+0x280>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	7b1b      	ldrb	r3, [r3, #12]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d111      	bne.n	8002ff0 <HAL_ADC_Init+0x268>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	699b      	ldr	r3, [r3, #24]
 8002fd0:	3b01      	subs	r3, #1
 8002fd2:	035a      	lsls	r2, r3, #13
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002fdc:	613b      	str	r3, [r7, #16]
 8002fde:	e013      	b.n	8003008 <HAL_ADC_Init+0x280>
 8002fe0:	40012400 	.word	0x40012400
 8002fe4:	40012800 	.word	0x40012800
 8002fe8:	40013c00 	.word	0x40013c00
 8002fec:	080104fc 	.word	0x080104fc
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff4:	f043 0220 	orr.w	r2, r3, #32
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003000:	f043 0201 	orr.w	r2, r3, #1
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	693a      	ldr	r2, [r7, #16]
 8003018:	430a      	orrs	r2, r1
 800301a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	689a      	ldr	r2, [r3, #8]
 8003022:	4b28      	ldr	r3, [pc, #160]	; (80030c4 <HAL_ADC_Init+0x33c>)
 8003024:	4013      	ands	r3, r2
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	6812      	ldr	r2, [r2, #0]
 800302a:	68b9      	ldr	r1, [r7, #8]
 800302c:	430b      	orrs	r3, r1
 800302e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003038:	d003      	beq.n	8003042 <HAL_ADC_Init+0x2ba>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	2b01      	cmp	r3, #1
 8003040:	d104      	bne.n	800304c <HAL_ADC_Init+0x2c4>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	3b01      	subs	r3, #1
 8003048:	051b      	lsls	r3, r3, #20
 800304a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003052:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	68fa      	ldr	r2, [r7, #12]
 800305c:	430a      	orrs	r2, r1
 800305e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	689a      	ldr	r2, [r3, #8]
 8003066:	4b18      	ldr	r3, [pc, #96]	; (80030c8 <HAL_ADC_Init+0x340>)
 8003068:	4013      	ands	r3, r2
 800306a:	68ba      	ldr	r2, [r7, #8]
 800306c:	429a      	cmp	r2, r3
 800306e:	d10b      	bne.n	8003088 <HAL_ADC_Init+0x300>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800307a:	f023 0303 	bic.w	r3, r3, #3
 800307e:	f043 0201 	orr.w	r2, r3, #1
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003086:	e018      	b.n	80030ba <HAL_ADC_Init+0x332>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800308c:	f023 0312 	bic.w	r3, r3, #18
 8003090:	f043 0210 	orr.w	r2, r3, #16
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800309c:	f043 0201 	orr.w	r2, r3, #1
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80030a8:	e007      	b.n	80030ba <HAL_ADC_Init+0x332>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ae:	f043 0210 	orr.w	r2, r3, #16
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80030ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3718      	adds	r7, #24
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	ffe1f7fd 	.word	0xffe1f7fd
 80030c8:	ff1f0efe 	.word	0xff1f0efe

080030cc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a0c      	ldr	r2, [pc, #48]	; (800310c <HAL_ADC_GetValue+0x40>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d00e      	beq.n	80030fc <HAL_ADC_GetValue+0x30>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a0b      	ldr	r2, [pc, #44]	; (8003110 <HAL_ADC_GetValue+0x44>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d009      	beq.n	80030fc <HAL_ADC_GetValue+0x30>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a09      	ldr	r2, [pc, #36]	; (8003114 <HAL_ADC_GetValue+0x48>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d004      	beq.n	80030fc <HAL_ADC_GetValue+0x30>
 80030f2:	f240 61ef 	movw	r1, #1775	; 0x6ef
 80030f6:	4808      	ldr	r0, [pc, #32]	; (8003118 <HAL_ADC_GetValue+0x4c>)
 80030f8:	f7ff f948 	bl	800238c <assert_failed>

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003102:	4618      	mov	r0, r3
 8003104:	3708      	adds	r7, #8
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	40012400 	.word	0x40012400
 8003110:	40012800 	.word	0x40012800
 8003114:	40013c00 	.word	0x40013c00
 8003118:	080104fc 	.word	0x080104fc

0800311c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003126:	2300      	movs	r3, #0
 8003128:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800312a:	2300      	movs	r3, #0
 800312c:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a8b      	ldr	r2, [pc, #556]	; (8003360 <HAL_ADC_ConfigChannel+0x244>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d00e      	beq.n	8003156 <HAL_ADC_ConfigChannel+0x3a>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a89      	ldr	r2, [pc, #548]	; (8003364 <HAL_ADC_ConfigChannel+0x248>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d009      	beq.n	8003156 <HAL_ADC_ConfigChannel+0x3a>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a88      	ldr	r2, [pc, #544]	; (8003368 <HAL_ADC_ConfigChannel+0x24c>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d004      	beq.n	8003156 <HAL_ADC_ConfigChannel+0x3a>
 800314c:	f240 71dd 	movw	r1, #2013	; 0x7dd
 8003150:	4886      	ldr	r0, [pc, #536]	; (800336c <HAL_ADC_ConfigChannel+0x250>)
 8003152:	f7ff f91b 	bl	800238c <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d048      	beq.n	80031f0 <HAL_ADC_ConfigChannel+0xd4>
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	2b01      	cmp	r3, #1
 8003164:	d044      	beq.n	80031f0 <HAL_ADC_ConfigChannel+0xd4>
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2b02      	cmp	r3, #2
 800316c:	d040      	beq.n	80031f0 <HAL_ADC_ConfigChannel+0xd4>
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	2b03      	cmp	r3, #3
 8003174:	d03c      	beq.n	80031f0 <HAL_ADC_ConfigChannel+0xd4>
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2b04      	cmp	r3, #4
 800317c:	d038      	beq.n	80031f0 <HAL_ADC_ConfigChannel+0xd4>
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	2b05      	cmp	r3, #5
 8003184:	d034      	beq.n	80031f0 <HAL_ADC_ConfigChannel+0xd4>
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2b06      	cmp	r3, #6
 800318c:	d030      	beq.n	80031f0 <HAL_ADC_ConfigChannel+0xd4>
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2b07      	cmp	r3, #7
 8003194:	d02c      	beq.n	80031f0 <HAL_ADC_ConfigChannel+0xd4>
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2b08      	cmp	r3, #8
 800319c:	d028      	beq.n	80031f0 <HAL_ADC_ConfigChannel+0xd4>
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	2b09      	cmp	r3, #9
 80031a4:	d024      	beq.n	80031f0 <HAL_ADC_ConfigChannel+0xd4>
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	2b0a      	cmp	r3, #10
 80031ac:	d020      	beq.n	80031f0 <HAL_ADC_ConfigChannel+0xd4>
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	2b0b      	cmp	r3, #11
 80031b4:	d01c      	beq.n	80031f0 <HAL_ADC_ConfigChannel+0xd4>
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2b0c      	cmp	r3, #12
 80031bc:	d018      	beq.n	80031f0 <HAL_ADC_ConfigChannel+0xd4>
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	2b0d      	cmp	r3, #13
 80031c4:	d014      	beq.n	80031f0 <HAL_ADC_ConfigChannel+0xd4>
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2b0e      	cmp	r3, #14
 80031cc:	d010      	beq.n	80031f0 <HAL_ADC_ConfigChannel+0xd4>
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2b0f      	cmp	r3, #15
 80031d4:	d00c      	beq.n	80031f0 <HAL_ADC_ConfigChannel+0xd4>
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2b10      	cmp	r3, #16
 80031dc:	d008      	beq.n	80031f0 <HAL_ADC_ConfigChannel+0xd4>
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2b11      	cmp	r3, #17
 80031e4:	d004      	beq.n	80031f0 <HAL_ADC_ConfigChannel+0xd4>
 80031e6:	f240 71de 	movw	r1, #2014	; 0x7de
 80031ea:	4860      	ldr	r0, [pc, #384]	; (800336c <HAL_ADC_ConfigChannel+0x250>)
 80031ec:	f7ff f8ce 	bl	800238c <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d040      	beq.n	800327a <HAL_ADC_ConfigChannel+0x15e>
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d03c      	beq.n	800327a <HAL_ADC_ConfigChannel+0x15e>
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	2b03      	cmp	r3, #3
 8003206:	d038      	beq.n	800327a <HAL_ADC_ConfigChannel+0x15e>
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	2b04      	cmp	r3, #4
 800320e:	d034      	beq.n	800327a <HAL_ADC_ConfigChannel+0x15e>
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	2b05      	cmp	r3, #5
 8003216:	d030      	beq.n	800327a <HAL_ADC_ConfigChannel+0x15e>
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	2b06      	cmp	r3, #6
 800321e:	d02c      	beq.n	800327a <HAL_ADC_ConfigChannel+0x15e>
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	2b07      	cmp	r3, #7
 8003226:	d028      	beq.n	800327a <HAL_ADC_ConfigChannel+0x15e>
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	2b08      	cmp	r3, #8
 800322e:	d024      	beq.n	800327a <HAL_ADC_ConfigChannel+0x15e>
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	2b09      	cmp	r3, #9
 8003236:	d020      	beq.n	800327a <HAL_ADC_ConfigChannel+0x15e>
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	2b0a      	cmp	r3, #10
 800323e:	d01c      	beq.n	800327a <HAL_ADC_ConfigChannel+0x15e>
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	2b0b      	cmp	r3, #11
 8003246:	d018      	beq.n	800327a <HAL_ADC_ConfigChannel+0x15e>
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	2b0c      	cmp	r3, #12
 800324e:	d014      	beq.n	800327a <HAL_ADC_ConfigChannel+0x15e>
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	2b0d      	cmp	r3, #13
 8003256:	d010      	beq.n	800327a <HAL_ADC_ConfigChannel+0x15e>
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	2b0e      	cmp	r3, #14
 800325e:	d00c      	beq.n	800327a <HAL_ADC_ConfigChannel+0x15e>
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	2b0f      	cmp	r3, #15
 8003266:	d008      	beq.n	800327a <HAL_ADC_ConfigChannel+0x15e>
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	2b10      	cmp	r3, #16
 800326e:	d004      	beq.n	800327a <HAL_ADC_ConfigChannel+0x15e>
 8003270:	f240 71df 	movw	r1, #2015	; 0x7df
 8003274:	483d      	ldr	r0, [pc, #244]	; (800336c <HAL_ADC_ConfigChannel+0x250>)
 8003276:	f7ff f889 	bl	800238c <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d020      	beq.n	80032c4 <HAL_ADC_ConfigChannel+0x1a8>
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	2b01      	cmp	r3, #1
 8003288:	d01c      	beq.n	80032c4 <HAL_ADC_ConfigChannel+0x1a8>
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	2b02      	cmp	r3, #2
 8003290:	d018      	beq.n	80032c4 <HAL_ADC_ConfigChannel+0x1a8>
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	2b03      	cmp	r3, #3
 8003298:	d014      	beq.n	80032c4 <HAL_ADC_ConfigChannel+0x1a8>
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	2b04      	cmp	r3, #4
 80032a0:	d010      	beq.n	80032c4 <HAL_ADC_ConfigChannel+0x1a8>
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	2b05      	cmp	r3, #5
 80032a8:	d00c      	beq.n	80032c4 <HAL_ADC_ConfigChannel+0x1a8>
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	2b06      	cmp	r3, #6
 80032b0:	d008      	beq.n	80032c4 <HAL_ADC_ConfigChannel+0x1a8>
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	2b07      	cmp	r3, #7
 80032b8:	d004      	beq.n	80032c4 <HAL_ADC_ConfigChannel+0x1a8>
 80032ba:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 80032be:	482b      	ldr	r0, [pc, #172]	; (800336c <HAL_ADC_ConfigChannel+0x250>)
 80032c0:	f7ff f864 	bl	800238c <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d101      	bne.n	80032d2 <HAL_ADC_ConfigChannel+0x1b6>
 80032ce:	2302      	movs	r3, #2
 80032d0:	e0e5      	b.n	800349e <HAL_ADC_ConfigChannel+0x382>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2201      	movs	r2, #1
 80032d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	2b06      	cmp	r3, #6
 80032e0:	d81c      	bhi.n	800331c <HAL_ADC_ConfigChannel+0x200>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	685a      	ldr	r2, [r3, #4]
 80032ec:	4613      	mov	r3, r2
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	4413      	add	r3, r2
 80032f2:	3b05      	subs	r3, #5
 80032f4:	221f      	movs	r2, #31
 80032f6:	fa02 f303 	lsl.w	r3, r2, r3
 80032fa:	43db      	mvns	r3, r3
 80032fc:	4019      	ands	r1, r3
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	6818      	ldr	r0, [r3, #0]
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	685a      	ldr	r2, [r3, #4]
 8003306:	4613      	mov	r3, r2
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	4413      	add	r3, r2
 800330c:	3b05      	subs	r3, #5
 800330e:	fa00 f203 	lsl.w	r2, r0, r3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	430a      	orrs	r2, r1
 8003318:	635a      	str	r2, [r3, #52]	; 0x34
 800331a:	e045      	b.n	80033a8 <HAL_ADC_ConfigChannel+0x28c>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	2b0c      	cmp	r3, #12
 8003322:	d825      	bhi.n	8003370 <HAL_ADC_ConfigChannel+0x254>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	685a      	ldr	r2, [r3, #4]
 800332e:	4613      	mov	r3, r2
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	4413      	add	r3, r2
 8003334:	3b23      	subs	r3, #35	; 0x23
 8003336:	221f      	movs	r2, #31
 8003338:	fa02 f303 	lsl.w	r3, r2, r3
 800333c:	43db      	mvns	r3, r3
 800333e:	4019      	ands	r1, r3
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	6818      	ldr	r0, [r3, #0]
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	685a      	ldr	r2, [r3, #4]
 8003348:	4613      	mov	r3, r2
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	4413      	add	r3, r2
 800334e:	3b23      	subs	r3, #35	; 0x23
 8003350:	fa00 f203 	lsl.w	r2, r0, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	430a      	orrs	r2, r1
 800335a:	631a      	str	r2, [r3, #48]	; 0x30
 800335c:	e024      	b.n	80033a8 <HAL_ADC_ConfigChannel+0x28c>
 800335e:	bf00      	nop
 8003360:	40012400 	.word	0x40012400
 8003364:	40012800 	.word	0x40012800
 8003368:	40013c00 	.word	0x40013c00
 800336c:	080104fc 	.word	0x080104fc
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	685a      	ldr	r2, [r3, #4]
 800337a:	4613      	mov	r3, r2
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	4413      	add	r3, r2
 8003380:	3b41      	subs	r3, #65	; 0x41
 8003382:	221f      	movs	r2, #31
 8003384:	fa02 f303 	lsl.w	r3, r2, r3
 8003388:	43db      	mvns	r3, r3
 800338a:	4019      	ands	r1, r3
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	6818      	ldr	r0, [r3, #0]
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	685a      	ldr	r2, [r3, #4]
 8003394:	4613      	mov	r3, r2
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	4413      	add	r3, r2
 800339a:	3b41      	subs	r3, #65	; 0x41
 800339c:	fa00 f203 	lsl.w	r2, r0, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	430a      	orrs	r2, r1
 80033a6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2b09      	cmp	r3, #9
 80033ae:	d91c      	bls.n	80033ea <HAL_ADC_ConfigChannel+0x2ce>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	68d9      	ldr	r1, [r3, #12]
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	4613      	mov	r3, r2
 80033bc:	005b      	lsls	r3, r3, #1
 80033be:	4413      	add	r3, r2
 80033c0:	3b1e      	subs	r3, #30
 80033c2:	2207      	movs	r2, #7
 80033c4:	fa02 f303 	lsl.w	r3, r2, r3
 80033c8:	43db      	mvns	r3, r3
 80033ca:	4019      	ands	r1, r3
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	6898      	ldr	r0, [r3, #8]
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	4613      	mov	r3, r2
 80033d6:	005b      	lsls	r3, r3, #1
 80033d8:	4413      	add	r3, r2
 80033da:	3b1e      	subs	r3, #30
 80033dc:	fa00 f203 	lsl.w	r2, r0, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	430a      	orrs	r2, r1
 80033e6:	60da      	str	r2, [r3, #12]
 80033e8:	e019      	b.n	800341e <HAL_ADC_ConfigChannel+0x302>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	6919      	ldr	r1, [r3, #16]
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	4613      	mov	r3, r2
 80033f6:	005b      	lsls	r3, r3, #1
 80033f8:	4413      	add	r3, r2
 80033fa:	2207      	movs	r2, #7
 80033fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003400:	43db      	mvns	r3, r3
 8003402:	4019      	ands	r1, r3
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	6898      	ldr	r0, [r3, #8]
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	4613      	mov	r3, r2
 800340e:	005b      	lsls	r3, r3, #1
 8003410:	4413      	add	r3, r2
 8003412:	fa00 f203 	lsl.w	r2, r0, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	430a      	orrs	r2, r1
 800341c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2b10      	cmp	r3, #16
 8003424:	d003      	beq.n	800342e <HAL_ADC_ConfigChannel+0x312>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800342a:	2b11      	cmp	r3, #17
 800342c:	d132      	bne.n	8003494 <HAL_ADC_ConfigChannel+0x378>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a1d      	ldr	r2, [pc, #116]	; (80034a8 <HAL_ADC_ConfigChannel+0x38c>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d125      	bne.n	8003484 <HAL_ADC_ConfigChannel+0x368>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d126      	bne.n	8003494 <HAL_ADC_ConfigChannel+0x378>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	689a      	ldr	r2, [r3, #8]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003454:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	2b10      	cmp	r3, #16
 800345c:	d11a      	bne.n	8003494 <HAL_ADC_ConfigChannel+0x378>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800345e:	4b13      	ldr	r3, [pc, #76]	; (80034ac <HAL_ADC_ConfigChannel+0x390>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a13      	ldr	r2, [pc, #76]	; (80034b0 <HAL_ADC_ConfigChannel+0x394>)
 8003464:	fba2 2303 	umull	r2, r3, r2, r3
 8003468:	0c9a      	lsrs	r2, r3, #18
 800346a:	4613      	mov	r3, r2
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	4413      	add	r3, r2
 8003470:	005b      	lsls	r3, r3, #1
 8003472:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003474:	e002      	b.n	800347c <HAL_ADC_ConfigChannel+0x360>
          {
            wait_loop_index--;
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	3b01      	subs	r3, #1
 800347a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d1f9      	bne.n	8003476 <HAL_ADC_ConfigChannel+0x35a>
 8003482:	e007      	b.n	8003494 <HAL_ADC_ConfigChannel+0x378>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003488:	f043 0220 	orr.w	r2, r3, #32
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800349c:	7bfb      	ldrb	r3, [r7, #15]
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3710      	adds	r7, #16
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	40012400 	.word	0x40012400
 80034ac:	20000000 	.word	0x20000000
 80034b0:	431bde83 	.word	0x431bde83

080034b4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80034bc:	2300      	movs	r3, #0
 80034be:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	f003 0301 	and.w	r3, r3, #1
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d12e      	bne.n	800352c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	689a      	ldr	r2, [r3, #8]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f022 0201 	bic.w	r2, r2, #1
 80034dc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80034de:	f7ff fc25 	bl	8002d2c <HAL_GetTick>
 80034e2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80034e4:	e01b      	b.n	800351e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80034e6:	f7ff fc21 	bl	8002d2c <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d914      	bls.n	800351e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	f003 0301 	and.w	r3, r3, #1
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d10d      	bne.n	800351e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003506:	f043 0210 	orr.w	r2, r3, #16
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003512:	f043 0201 	orr.w	r2, r3, #1
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e007      	b.n	800352e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	f003 0301 	and.w	r3, r3, #1
 8003528:	2b01      	cmp	r3, #1
 800352a:	d0dc      	beq.n	80034e6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800352c:	2300      	movs	r3, #0
}
 800352e:	4618      	mov	r0, r3
 8003530:	3710      	adds	r7, #16
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
	...

08003538 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003538:	b480      	push	{r7}
 800353a:	b085      	sub	sp, #20
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f003 0307 	and.w	r3, r3, #7
 8003546:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003548:	4b0c      	ldr	r3, [pc, #48]	; (800357c <__NVIC_SetPriorityGrouping+0x44>)
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800354e:	68ba      	ldr	r2, [r7, #8]
 8003550:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003554:	4013      	ands	r3, r2
 8003556:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003560:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003564:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003568:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800356a:	4a04      	ldr	r2, [pc, #16]	; (800357c <__NVIC_SetPriorityGrouping+0x44>)
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	60d3      	str	r3, [r2, #12]
}
 8003570:	bf00      	nop
 8003572:	3714      	adds	r7, #20
 8003574:	46bd      	mov	sp, r7
 8003576:	bc80      	pop	{r7}
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	e000ed00 	.word	0xe000ed00

08003580 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003580:	b480      	push	{r7}
 8003582:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003584:	4b04      	ldr	r3, [pc, #16]	; (8003598 <__NVIC_GetPriorityGrouping+0x18>)
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	0a1b      	lsrs	r3, r3, #8
 800358a:	f003 0307 	and.w	r3, r3, #7
}
 800358e:	4618      	mov	r0, r3
 8003590:	46bd      	mov	sp, r7
 8003592:	bc80      	pop	{r7}
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop
 8003598:	e000ed00 	.word	0xe000ed00

0800359c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	4603      	mov	r3, r0
 80035a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	db0b      	blt.n	80035c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035ae:	79fb      	ldrb	r3, [r7, #7]
 80035b0:	f003 021f 	and.w	r2, r3, #31
 80035b4:	4906      	ldr	r1, [pc, #24]	; (80035d0 <__NVIC_EnableIRQ+0x34>)
 80035b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ba:	095b      	lsrs	r3, r3, #5
 80035bc:	2001      	movs	r0, #1
 80035be:	fa00 f202 	lsl.w	r2, r0, r2
 80035c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80035c6:	bf00      	nop
 80035c8:	370c      	adds	r7, #12
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bc80      	pop	{r7}
 80035ce:	4770      	bx	lr
 80035d0:	e000e100 	.word	0xe000e100

080035d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	4603      	mov	r3, r0
 80035dc:	6039      	str	r1, [r7, #0]
 80035de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	db0a      	blt.n	80035fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	b2da      	uxtb	r2, r3
 80035ec:	490c      	ldr	r1, [pc, #48]	; (8003620 <__NVIC_SetPriority+0x4c>)
 80035ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035f2:	0112      	lsls	r2, r2, #4
 80035f4:	b2d2      	uxtb	r2, r2
 80035f6:	440b      	add	r3, r1
 80035f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035fc:	e00a      	b.n	8003614 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	b2da      	uxtb	r2, r3
 8003602:	4908      	ldr	r1, [pc, #32]	; (8003624 <__NVIC_SetPriority+0x50>)
 8003604:	79fb      	ldrb	r3, [r7, #7]
 8003606:	f003 030f 	and.w	r3, r3, #15
 800360a:	3b04      	subs	r3, #4
 800360c:	0112      	lsls	r2, r2, #4
 800360e:	b2d2      	uxtb	r2, r2
 8003610:	440b      	add	r3, r1
 8003612:	761a      	strb	r2, [r3, #24]
}
 8003614:	bf00      	nop
 8003616:	370c      	adds	r7, #12
 8003618:	46bd      	mov	sp, r7
 800361a:	bc80      	pop	{r7}
 800361c:	4770      	bx	lr
 800361e:	bf00      	nop
 8003620:	e000e100 	.word	0xe000e100
 8003624:	e000ed00 	.word	0xe000ed00

08003628 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003628:	b480      	push	{r7}
 800362a:	b089      	sub	sp, #36	; 0x24
 800362c:	af00      	add	r7, sp, #0
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	60b9      	str	r1, [r7, #8]
 8003632:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f003 0307 	and.w	r3, r3, #7
 800363a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	f1c3 0307 	rsb	r3, r3, #7
 8003642:	2b04      	cmp	r3, #4
 8003644:	bf28      	it	cs
 8003646:	2304      	movcs	r3, #4
 8003648:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	3304      	adds	r3, #4
 800364e:	2b06      	cmp	r3, #6
 8003650:	d902      	bls.n	8003658 <NVIC_EncodePriority+0x30>
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	3b03      	subs	r3, #3
 8003656:	e000      	b.n	800365a <NVIC_EncodePriority+0x32>
 8003658:	2300      	movs	r3, #0
 800365a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800365c:	f04f 32ff 	mov.w	r2, #4294967295
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	fa02 f303 	lsl.w	r3, r2, r3
 8003666:	43da      	mvns	r2, r3
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	401a      	ands	r2, r3
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003670:	f04f 31ff 	mov.w	r1, #4294967295
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	fa01 f303 	lsl.w	r3, r1, r3
 800367a:	43d9      	mvns	r1, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003680:	4313      	orrs	r3, r2
         );
}
 8003682:	4618      	mov	r0, r3
 8003684:	3724      	adds	r7, #36	; 0x24
 8003686:	46bd      	mov	sp, r7
 8003688:	bc80      	pop	{r7}
 800368a:	4770      	bx	lr

0800368c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800368c:	b480      	push	{r7}
 800368e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003690:	f3bf 8f4f 	dsb	sy
}
 8003694:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003696:	4b06      	ldr	r3, [pc, #24]	; (80036b0 <__NVIC_SystemReset+0x24>)
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800369e:	4904      	ldr	r1, [pc, #16]	; (80036b0 <__NVIC_SystemReset+0x24>)
 80036a0:	4b04      	ldr	r3, [pc, #16]	; (80036b4 <__NVIC_SystemReset+0x28>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80036a6:	f3bf 8f4f 	dsb	sy
}
 80036aa:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80036ac:	bf00      	nop
 80036ae:	e7fd      	b.n	80036ac <__NVIC_SystemReset+0x20>
 80036b0:	e000ed00 	.word	0xe000ed00
 80036b4:	05fa0004 	.word	0x05fa0004

080036b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b082      	sub	sp, #8
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	3b01      	subs	r3, #1
 80036c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036c8:	d301      	bcc.n	80036ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036ca:	2301      	movs	r3, #1
 80036cc:	e00f      	b.n	80036ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036ce:	4a0a      	ldr	r2, [pc, #40]	; (80036f8 <SysTick_Config+0x40>)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	3b01      	subs	r3, #1
 80036d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036d6:	210f      	movs	r1, #15
 80036d8:	f04f 30ff 	mov.w	r0, #4294967295
 80036dc:	f7ff ff7a 	bl	80035d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036e0:	4b05      	ldr	r3, [pc, #20]	; (80036f8 <SysTick_Config+0x40>)
 80036e2:	2200      	movs	r2, #0
 80036e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036e6:	4b04      	ldr	r3, [pc, #16]	; (80036f8 <SysTick_Config+0x40>)
 80036e8:	2207      	movs	r2, #7
 80036ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3708      	adds	r7, #8
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	e000e010 	.word	0xe000e010

080036fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2b07      	cmp	r3, #7
 8003708:	d00f      	beq.n	800372a <HAL_NVIC_SetPriorityGrouping+0x2e>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2b06      	cmp	r3, #6
 800370e:	d00c      	beq.n	800372a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2b05      	cmp	r3, #5
 8003714:	d009      	beq.n	800372a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2b04      	cmp	r3, #4
 800371a:	d006      	beq.n	800372a <HAL_NVIC_SetPriorityGrouping+0x2e>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2b03      	cmp	r3, #3
 8003720:	d003      	beq.n	800372a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003722:	2192      	movs	r1, #146	; 0x92
 8003724:	4804      	ldr	r0, [pc, #16]	; (8003738 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8003726:	f7fe fe31 	bl	800238c <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f7ff ff04 	bl	8003538 <__NVIC_SetPriorityGrouping>
}
 8003730:	bf00      	nop
 8003732:	3708      	adds	r7, #8
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}
 8003738:	08010534 	.word	0x08010534

0800373c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800373c:	b580      	push	{r7, lr}
 800373e:	b086      	sub	sp, #24
 8003740:	af00      	add	r7, sp, #0
 8003742:	4603      	mov	r3, r0
 8003744:	60b9      	str	r1, [r7, #8]
 8003746:	607a      	str	r2, [r7, #4]
 8003748:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800374a:	2300      	movs	r3, #0
 800374c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2b0f      	cmp	r3, #15
 8003752:	d903      	bls.n	800375c <HAL_NVIC_SetPriority+0x20>
 8003754:	21aa      	movs	r1, #170	; 0xaa
 8003756:	480e      	ldr	r0, [pc, #56]	; (8003790 <HAL_NVIC_SetPriority+0x54>)
 8003758:	f7fe fe18 	bl	800238c <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	2b0f      	cmp	r3, #15
 8003760:	d903      	bls.n	800376a <HAL_NVIC_SetPriority+0x2e>
 8003762:	21ab      	movs	r1, #171	; 0xab
 8003764:	480a      	ldr	r0, [pc, #40]	; (8003790 <HAL_NVIC_SetPriority+0x54>)
 8003766:	f7fe fe11 	bl	800238c <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800376a:	f7ff ff09 	bl	8003580 <__NVIC_GetPriorityGrouping>
 800376e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	68b9      	ldr	r1, [r7, #8]
 8003774:	6978      	ldr	r0, [r7, #20]
 8003776:	f7ff ff57 	bl	8003628 <NVIC_EncodePriority>
 800377a:	4602      	mov	r2, r0
 800377c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003780:	4611      	mov	r1, r2
 8003782:	4618      	mov	r0, r3
 8003784:	f7ff ff26 	bl	80035d4 <__NVIC_SetPriority>
}
 8003788:	bf00      	nop
 800378a:	3718      	adds	r7, #24
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}
 8003790:	08010534 	.word	0x08010534

08003794 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b082      	sub	sp, #8
 8003798:	af00      	add	r7, sp, #0
 800379a:	4603      	mov	r3, r0
 800379c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800379e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	da03      	bge.n	80037ae <HAL_NVIC_EnableIRQ+0x1a>
 80037a6:	21be      	movs	r1, #190	; 0xbe
 80037a8:	4805      	ldr	r0, [pc, #20]	; (80037c0 <HAL_NVIC_EnableIRQ+0x2c>)
 80037aa:	f7fe fdef 	bl	800238c <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037b2:	4618      	mov	r0, r3
 80037b4:	f7ff fef2 	bl	800359c <__NVIC_EnableIRQ>
}
 80037b8:	bf00      	nop
 80037ba:	3708      	adds	r7, #8
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	08010534 	.word	0x08010534

080037c4 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80037c8:	f7ff ff60 	bl	800368c <__NVIC_SystemReset>

080037cc <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f7ff ff6f 	bl	80036b8 <SysTick_Config>
 80037da:	4603      	mov	r3, r0
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3708      	adds	r7, #8
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b085      	sub	sp, #20
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037ec:	2300      	movs	r3, #0
 80037ee:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d008      	beq.n	800380c <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2204      	movs	r2, #4
 80037fe:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e020      	b.n	800384e <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f022 020e 	bic.w	r2, r2, #14
 800381a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f022 0201 	bic.w	r2, r2, #1
 800382a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003834:	2101      	movs	r1, #1
 8003836:	fa01 f202 	lsl.w	r2, r1, r2
 800383a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800384c:	7bfb      	ldrb	r3, [r7, #15]
}
 800384e:	4618      	mov	r0, r3
 8003850:	3714      	adds	r7, #20
 8003852:	46bd      	mov	sp, r7
 8003854:	bc80      	pop	{r7}
 8003856:	4770      	bx	lr

08003858 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003860:	2300      	movs	r3, #0
 8003862:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800386a:	2b02      	cmp	r3, #2
 800386c:	d005      	beq.n	800387a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2204      	movs	r2, #4
 8003872:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	73fb      	strb	r3, [r7, #15]
 8003878:	e0d6      	b.n	8003a28 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f022 020e 	bic.w	r2, r2, #14
 8003888:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f022 0201 	bic.w	r2, r2, #1
 8003898:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	461a      	mov	r2, r3
 80038a0:	4b64      	ldr	r3, [pc, #400]	; (8003a34 <HAL_DMA_Abort_IT+0x1dc>)
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d958      	bls.n	8003958 <HAL_DMA_Abort_IT+0x100>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a63      	ldr	r2, [pc, #396]	; (8003a38 <HAL_DMA_Abort_IT+0x1e0>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d04f      	beq.n	8003950 <HAL_DMA_Abort_IT+0xf8>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a61      	ldr	r2, [pc, #388]	; (8003a3c <HAL_DMA_Abort_IT+0x1e4>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d048      	beq.n	800394c <HAL_DMA_Abort_IT+0xf4>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a60      	ldr	r2, [pc, #384]	; (8003a40 <HAL_DMA_Abort_IT+0x1e8>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d040      	beq.n	8003946 <HAL_DMA_Abort_IT+0xee>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a5e      	ldr	r2, [pc, #376]	; (8003a44 <HAL_DMA_Abort_IT+0x1ec>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d038      	beq.n	8003940 <HAL_DMA_Abort_IT+0xe8>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a5d      	ldr	r2, [pc, #372]	; (8003a48 <HAL_DMA_Abort_IT+0x1f0>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d030      	beq.n	800393a <HAL_DMA_Abort_IT+0xe2>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a5b      	ldr	r2, [pc, #364]	; (8003a4c <HAL_DMA_Abort_IT+0x1f4>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d028      	beq.n	8003934 <HAL_DMA_Abort_IT+0xdc>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a53      	ldr	r2, [pc, #332]	; (8003a34 <HAL_DMA_Abort_IT+0x1dc>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d020      	beq.n	800392e <HAL_DMA_Abort_IT+0xd6>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a57      	ldr	r2, [pc, #348]	; (8003a50 <HAL_DMA_Abort_IT+0x1f8>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d019      	beq.n	800392a <HAL_DMA_Abort_IT+0xd2>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a56      	ldr	r2, [pc, #344]	; (8003a54 <HAL_DMA_Abort_IT+0x1fc>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d012      	beq.n	8003926 <HAL_DMA_Abort_IT+0xce>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a54      	ldr	r2, [pc, #336]	; (8003a58 <HAL_DMA_Abort_IT+0x200>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d00a      	beq.n	8003920 <HAL_DMA_Abort_IT+0xc8>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a53      	ldr	r2, [pc, #332]	; (8003a5c <HAL_DMA_Abort_IT+0x204>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d102      	bne.n	800391a <HAL_DMA_Abort_IT+0xc2>
 8003914:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003918:	e01b      	b.n	8003952 <HAL_DMA_Abort_IT+0xfa>
 800391a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800391e:	e018      	b.n	8003952 <HAL_DMA_Abort_IT+0xfa>
 8003920:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003924:	e015      	b.n	8003952 <HAL_DMA_Abort_IT+0xfa>
 8003926:	2310      	movs	r3, #16
 8003928:	e013      	b.n	8003952 <HAL_DMA_Abort_IT+0xfa>
 800392a:	2301      	movs	r3, #1
 800392c:	e011      	b.n	8003952 <HAL_DMA_Abort_IT+0xfa>
 800392e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003932:	e00e      	b.n	8003952 <HAL_DMA_Abort_IT+0xfa>
 8003934:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003938:	e00b      	b.n	8003952 <HAL_DMA_Abort_IT+0xfa>
 800393a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800393e:	e008      	b.n	8003952 <HAL_DMA_Abort_IT+0xfa>
 8003940:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003944:	e005      	b.n	8003952 <HAL_DMA_Abort_IT+0xfa>
 8003946:	f44f 7380 	mov.w	r3, #256	; 0x100
 800394a:	e002      	b.n	8003952 <HAL_DMA_Abort_IT+0xfa>
 800394c:	2310      	movs	r3, #16
 800394e:	e000      	b.n	8003952 <HAL_DMA_Abort_IT+0xfa>
 8003950:	2301      	movs	r3, #1
 8003952:	4a43      	ldr	r2, [pc, #268]	; (8003a60 <HAL_DMA_Abort_IT+0x208>)
 8003954:	6053      	str	r3, [r2, #4]
 8003956:	e057      	b.n	8003a08 <HAL_DMA_Abort_IT+0x1b0>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a36      	ldr	r2, [pc, #216]	; (8003a38 <HAL_DMA_Abort_IT+0x1e0>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d04f      	beq.n	8003a02 <HAL_DMA_Abort_IT+0x1aa>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a35      	ldr	r2, [pc, #212]	; (8003a3c <HAL_DMA_Abort_IT+0x1e4>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d048      	beq.n	80039fe <HAL_DMA_Abort_IT+0x1a6>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a33      	ldr	r2, [pc, #204]	; (8003a40 <HAL_DMA_Abort_IT+0x1e8>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d040      	beq.n	80039f8 <HAL_DMA_Abort_IT+0x1a0>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a32      	ldr	r2, [pc, #200]	; (8003a44 <HAL_DMA_Abort_IT+0x1ec>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d038      	beq.n	80039f2 <HAL_DMA_Abort_IT+0x19a>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a30      	ldr	r2, [pc, #192]	; (8003a48 <HAL_DMA_Abort_IT+0x1f0>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d030      	beq.n	80039ec <HAL_DMA_Abort_IT+0x194>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a2f      	ldr	r2, [pc, #188]	; (8003a4c <HAL_DMA_Abort_IT+0x1f4>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d028      	beq.n	80039e6 <HAL_DMA_Abort_IT+0x18e>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a26      	ldr	r2, [pc, #152]	; (8003a34 <HAL_DMA_Abort_IT+0x1dc>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d020      	beq.n	80039e0 <HAL_DMA_Abort_IT+0x188>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a2b      	ldr	r2, [pc, #172]	; (8003a50 <HAL_DMA_Abort_IT+0x1f8>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d019      	beq.n	80039dc <HAL_DMA_Abort_IT+0x184>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a29      	ldr	r2, [pc, #164]	; (8003a54 <HAL_DMA_Abort_IT+0x1fc>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d012      	beq.n	80039d8 <HAL_DMA_Abort_IT+0x180>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a28      	ldr	r2, [pc, #160]	; (8003a58 <HAL_DMA_Abort_IT+0x200>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d00a      	beq.n	80039d2 <HAL_DMA_Abort_IT+0x17a>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a26      	ldr	r2, [pc, #152]	; (8003a5c <HAL_DMA_Abort_IT+0x204>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d102      	bne.n	80039cc <HAL_DMA_Abort_IT+0x174>
 80039c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039ca:	e01b      	b.n	8003a04 <HAL_DMA_Abort_IT+0x1ac>
 80039cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80039d0:	e018      	b.n	8003a04 <HAL_DMA_Abort_IT+0x1ac>
 80039d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80039d6:	e015      	b.n	8003a04 <HAL_DMA_Abort_IT+0x1ac>
 80039d8:	2310      	movs	r3, #16
 80039da:	e013      	b.n	8003a04 <HAL_DMA_Abort_IT+0x1ac>
 80039dc:	2301      	movs	r3, #1
 80039de:	e011      	b.n	8003a04 <HAL_DMA_Abort_IT+0x1ac>
 80039e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80039e4:	e00e      	b.n	8003a04 <HAL_DMA_Abort_IT+0x1ac>
 80039e6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80039ea:	e00b      	b.n	8003a04 <HAL_DMA_Abort_IT+0x1ac>
 80039ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80039f0:	e008      	b.n	8003a04 <HAL_DMA_Abort_IT+0x1ac>
 80039f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039f6:	e005      	b.n	8003a04 <HAL_DMA_Abort_IT+0x1ac>
 80039f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80039fc:	e002      	b.n	8003a04 <HAL_DMA_Abort_IT+0x1ac>
 80039fe:	2310      	movs	r3, #16
 8003a00:	e000      	b.n	8003a04 <HAL_DMA_Abort_IT+0x1ac>
 8003a02:	2301      	movs	r3, #1
 8003a04:	4a17      	ldr	r2, [pc, #92]	; (8003a64 <HAL_DMA_Abort_IT+0x20c>)
 8003a06:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d003      	beq.n	8003a28 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	4798      	blx	r3
    } 
  }
  return status;
 8003a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3710      	adds	r7, #16
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	40020080 	.word	0x40020080
 8003a38:	40020008 	.word	0x40020008
 8003a3c:	4002001c 	.word	0x4002001c
 8003a40:	40020030 	.word	0x40020030
 8003a44:	40020044 	.word	0x40020044
 8003a48:	40020058 	.word	0x40020058
 8003a4c:	4002006c 	.word	0x4002006c
 8003a50:	40020408 	.word	0x40020408
 8003a54:	4002041c 	.word	0x4002041c
 8003a58:	40020430 	.word	0x40020430
 8003a5c:	40020444 	.word	0x40020444
 8003a60:	40020400 	.word	0x40020400
 8003a64:	40020000 	.word	0x40020000

08003a68 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b08a      	sub	sp, #40	; 0x28
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003a72:	2300      	movs	r3, #0
 8003a74:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003a76:	2300      	movs	r3, #0
 8003a78:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4aa9      	ldr	r2, [pc, #676]	; (8003d24 <HAL_GPIO_Init+0x2bc>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d01b      	beq.n	8003aba <HAL_GPIO_Init+0x52>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4aa8      	ldr	r2, [pc, #672]	; (8003d28 <HAL_GPIO_Init+0x2c0>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d017      	beq.n	8003aba <HAL_GPIO_Init+0x52>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4aa7      	ldr	r2, [pc, #668]	; (8003d2c <HAL_GPIO_Init+0x2c4>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d013      	beq.n	8003aba <HAL_GPIO_Init+0x52>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4aa6      	ldr	r2, [pc, #664]	; (8003d30 <HAL_GPIO_Init+0x2c8>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d00f      	beq.n	8003aba <HAL_GPIO_Init+0x52>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4aa5      	ldr	r2, [pc, #660]	; (8003d34 <HAL_GPIO_Init+0x2cc>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d00b      	beq.n	8003aba <HAL_GPIO_Init+0x52>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4aa4      	ldr	r2, [pc, #656]	; (8003d38 <HAL_GPIO_Init+0x2d0>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d007      	beq.n	8003aba <HAL_GPIO_Init+0x52>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4aa3      	ldr	r2, [pc, #652]	; (8003d3c <HAL_GPIO_Init+0x2d4>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d003      	beq.n	8003aba <HAL_GPIO_Init+0x52>
 8003ab2:	21bd      	movs	r1, #189	; 0xbd
 8003ab4:	48a2      	ldr	r0, [pc, #648]	; (8003d40 <HAL_GPIO_Init+0x2d8>)
 8003ab6:	f7fe fc69 	bl	800238c <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d005      	beq.n	8003ad0 <HAL_GPIO_Init+0x68>
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	0c1b      	lsrs	r3, r3, #16
 8003aca:	041b      	lsls	r3, r3, #16
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d003      	beq.n	8003ad8 <HAL_GPIO_Init+0x70>
 8003ad0:	21be      	movs	r1, #190	; 0xbe
 8003ad2:	489b      	ldr	r0, [pc, #620]	; (8003d40 <HAL_GPIO_Init+0x2d8>)
 8003ad4:	f7fe fc5a 	bl	800238c <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	f000 8235 	beq.w	8003f4c <HAL_GPIO_Init+0x4e4>
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	f000 8230 	beq.w	8003f4c <HAL_GPIO_Init+0x4e4>
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	2b11      	cmp	r3, #17
 8003af2:	f000 822b 	beq.w	8003f4c <HAL_GPIO_Init+0x4e4>
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	2b02      	cmp	r3, #2
 8003afc:	f000 8226 	beq.w	8003f4c <HAL_GPIO_Init+0x4e4>
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	2b12      	cmp	r3, #18
 8003b06:	f000 8221 	beq.w	8003f4c <HAL_GPIO_Init+0x4e4>
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	4a8d      	ldr	r2, [pc, #564]	; (8003d44 <HAL_GPIO_Init+0x2dc>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	f000 821b 	beq.w	8003f4c <HAL_GPIO_Init+0x4e4>
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	4a8b      	ldr	r2, [pc, #556]	; (8003d48 <HAL_GPIO_Init+0x2e0>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	f000 8215 	beq.w	8003f4c <HAL_GPIO_Init+0x4e4>
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	4a89      	ldr	r2, [pc, #548]	; (8003d4c <HAL_GPIO_Init+0x2e4>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	f000 820f 	beq.w	8003f4c <HAL_GPIO_Init+0x4e4>
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	4a87      	ldr	r2, [pc, #540]	; (8003d50 <HAL_GPIO_Init+0x2e8>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	f000 8209 	beq.w	8003f4c <HAL_GPIO_Init+0x4e4>
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	4a85      	ldr	r2, [pc, #532]	; (8003d54 <HAL_GPIO_Init+0x2ec>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	f000 8203 	beq.w	8003f4c <HAL_GPIO_Init+0x4e4>
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	4a83      	ldr	r2, [pc, #524]	; (8003d58 <HAL_GPIO_Init+0x2f0>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	f000 81fd 	beq.w	8003f4c <HAL_GPIO_Init+0x4e4>
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	2b03      	cmp	r3, #3
 8003b58:	f000 81f8 	beq.w	8003f4c <HAL_GPIO_Init+0x4e4>
 8003b5c:	21bf      	movs	r1, #191	; 0xbf
 8003b5e:	4878      	ldr	r0, [pc, #480]	; (8003d40 <HAL_GPIO_Init+0x2d8>)
 8003b60:	f7fe fc14 	bl	800238c <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b64:	e1f2      	b.n	8003f4c <HAL_GPIO_Init+0x4e4>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003b66:	2201      	movs	r2, #1
 8003b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6e:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	69fa      	ldr	r2, [r7, #28]
 8003b76:	4013      	ands	r3, r2
 8003b78:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003b7a:	69ba      	ldr	r2, [r7, #24]
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	f040 81e1 	bne.w	8003f46 <HAL_GPIO_Init+0x4de>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	4a67      	ldr	r2, [pc, #412]	; (8003d24 <HAL_GPIO_Init+0x2bc>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d01b      	beq.n	8003bc4 <HAL_GPIO_Init+0x15c>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	4a66      	ldr	r2, [pc, #408]	; (8003d28 <HAL_GPIO_Init+0x2c0>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d017      	beq.n	8003bc4 <HAL_GPIO_Init+0x15c>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	4a65      	ldr	r2, [pc, #404]	; (8003d2c <HAL_GPIO_Init+0x2c4>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d013      	beq.n	8003bc4 <HAL_GPIO_Init+0x15c>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	4a64      	ldr	r2, [pc, #400]	; (8003d30 <HAL_GPIO_Init+0x2c8>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d00f      	beq.n	8003bc4 <HAL_GPIO_Init+0x15c>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	4a63      	ldr	r2, [pc, #396]	; (8003d34 <HAL_GPIO_Init+0x2cc>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d00b      	beq.n	8003bc4 <HAL_GPIO_Init+0x15c>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	4a62      	ldr	r2, [pc, #392]	; (8003d38 <HAL_GPIO_Init+0x2d0>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d007      	beq.n	8003bc4 <HAL_GPIO_Init+0x15c>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	4a61      	ldr	r2, [pc, #388]	; (8003d3c <HAL_GPIO_Init+0x2d4>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d003      	beq.n	8003bc4 <HAL_GPIO_Init+0x15c>
 8003bbc:	21cd      	movs	r1, #205	; 0xcd
 8003bbe:	4860      	ldr	r0, [pc, #384]	; (8003d40 <HAL_GPIO_Init+0x2d8>)
 8003bc0:	f7fe fbe4 	bl	800238c <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	4a63      	ldr	r2, [pc, #396]	; (8003d58 <HAL_GPIO_Init+0x2f0>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	f000 80c6 	beq.w	8003d5c <HAL_GPIO_Init+0x2f4>
 8003bd0:	4a61      	ldr	r2, [pc, #388]	; (8003d58 <HAL_GPIO_Init+0x2f0>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	f200 80ec 	bhi.w	8003db0 <HAL_GPIO_Init+0x348>
 8003bd8:	4a5c      	ldr	r2, [pc, #368]	; (8003d4c <HAL_GPIO_Init+0x2e4>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	f000 80be 	beq.w	8003d5c <HAL_GPIO_Init+0x2f4>
 8003be0:	4a5a      	ldr	r2, [pc, #360]	; (8003d4c <HAL_GPIO_Init+0x2e4>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	f200 80e4 	bhi.w	8003db0 <HAL_GPIO_Init+0x348>
 8003be8:	4a5a      	ldr	r2, [pc, #360]	; (8003d54 <HAL_GPIO_Init+0x2ec>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	f000 80b6 	beq.w	8003d5c <HAL_GPIO_Init+0x2f4>
 8003bf0:	4a58      	ldr	r2, [pc, #352]	; (8003d54 <HAL_GPIO_Init+0x2ec>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	f200 80dc 	bhi.w	8003db0 <HAL_GPIO_Init+0x348>
 8003bf8:	4a53      	ldr	r2, [pc, #332]	; (8003d48 <HAL_GPIO_Init+0x2e0>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	f000 80ae 	beq.w	8003d5c <HAL_GPIO_Init+0x2f4>
 8003c00:	4a51      	ldr	r2, [pc, #324]	; (8003d48 <HAL_GPIO_Init+0x2e0>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	f200 80d4 	bhi.w	8003db0 <HAL_GPIO_Init+0x348>
 8003c08:	4a51      	ldr	r2, [pc, #324]	; (8003d50 <HAL_GPIO_Init+0x2e8>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	f000 80a6 	beq.w	8003d5c <HAL_GPIO_Init+0x2f4>
 8003c10:	4a4f      	ldr	r2, [pc, #316]	; (8003d50 <HAL_GPIO_Init+0x2e8>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	f200 80cc 	bhi.w	8003db0 <HAL_GPIO_Init+0x348>
 8003c18:	2b12      	cmp	r3, #18
 8003c1a:	d82b      	bhi.n	8003c74 <HAL_GPIO_Init+0x20c>
 8003c1c:	2b12      	cmp	r3, #18
 8003c1e:	f200 80c7 	bhi.w	8003db0 <HAL_GPIO_Init+0x348>
 8003c22:	a201      	add	r2, pc, #4	; (adr r2, 8003c28 <HAL_GPIO_Init+0x1c0>)
 8003c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c28:	08003d5d 	.word	0x08003d5d
 8003c2c:	08003c7d 	.word	0x08003c7d
 8003c30:	08003ccf 	.word	0x08003ccf
 8003c34:	08003dab 	.word	0x08003dab
 8003c38:	08003db1 	.word	0x08003db1
 8003c3c:	08003db1 	.word	0x08003db1
 8003c40:	08003db1 	.word	0x08003db1
 8003c44:	08003db1 	.word	0x08003db1
 8003c48:	08003db1 	.word	0x08003db1
 8003c4c:	08003db1 	.word	0x08003db1
 8003c50:	08003db1 	.word	0x08003db1
 8003c54:	08003db1 	.word	0x08003db1
 8003c58:	08003db1 	.word	0x08003db1
 8003c5c:	08003db1 	.word	0x08003db1
 8003c60:	08003db1 	.word	0x08003db1
 8003c64:	08003db1 	.word	0x08003db1
 8003c68:	08003db1 	.word	0x08003db1
 8003c6c:	08003ca5 	.word	0x08003ca5
 8003c70:	08003cf9 	.word	0x08003cf9
 8003c74:	4a33      	ldr	r2, [pc, #204]	; (8003d44 <HAL_GPIO_Init+0x2dc>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d070      	beq.n	8003d5c <HAL_GPIO_Init+0x2f4>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003c7a:	e099      	b.n	8003db0 <HAL_GPIO_Init+0x348>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	d00b      	beq.n	8003c9c <HAL_GPIO_Init+0x234>
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d007      	beq.n	8003c9c <HAL_GPIO_Init+0x234>
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	2b03      	cmp	r3, #3
 8003c92:	d003      	beq.n	8003c9c <HAL_GPIO_Init+0x234>
 8003c94:	21d5      	movs	r1, #213	; 0xd5
 8003c96:	482a      	ldr	r0, [pc, #168]	; (8003d40 <HAL_GPIO_Init+0x2d8>)
 8003c98:	f7fe fb78 	bl	800238c <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	623b      	str	r3, [r7, #32]
          break;
 8003ca2:	e086      	b.n	8003db2 <HAL_GPIO_Init+0x34a>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d00b      	beq.n	8003cc4 <HAL_GPIO_Init+0x25c>
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d007      	beq.n	8003cc4 <HAL_GPIO_Init+0x25c>
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	2b03      	cmp	r3, #3
 8003cba:	d003      	beq.n	8003cc4 <HAL_GPIO_Init+0x25c>
 8003cbc:	21dc      	movs	r1, #220	; 0xdc
 8003cbe:	4820      	ldr	r0, [pc, #128]	; (8003d40 <HAL_GPIO_Init+0x2d8>)
 8003cc0:	f7fe fb64 	bl	800238c <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	3304      	adds	r3, #4
 8003cca:	623b      	str	r3, [r7, #32]
          break;
 8003ccc:	e071      	b.n	8003db2 <HAL_GPIO_Init+0x34a>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d00b      	beq.n	8003cee <HAL_GPIO_Init+0x286>
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	68db      	ldr	r3, [r3, #12]
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d007      	beq.n	8003cee <HAL_GPIO_Init+0x286>
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	2b03      	cmp	r3, #3
 8003ce4:	d003      	beq.n	8003cee <HAL_GPIO_Init+0x286>
 8003ce6:	21e3      	movs	r1, #227	; 0xe3
 8003ce8:	4815      	ldr	r0, [pc, #84]	; (8003d40 <HAL_GPIO_Init+0x2d8>)
 8003cea:	f7fe fb4f 	bl	800238c <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	68db      	ldr	r3, [r3, #12]
 8003cf2:	3308      	adds	r3, #8
 8003cf4:	623b      	str	r3, [r7, #32]
          break;
 8003cf6:	e05c      	b.n	8003db2 <HAL_GPIO_Init+0x34a>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d00b      	beq.n	8003d18 <HAL_GPIO_Init+0x2b0>
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d007      	beq.n	8003d18 <HAL_GPIO_Init+0x2b0>
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	2b03      	cmp	r3, #3
 8003d0e:	d003      	beq.n	8003d18 <HAL_GPIO_Init+0x2b0>
 8003d10:	21ea      	movs	r1, #234	; 0xea
 8003d12:	480b      	ldr	r0, [pc, #44]	; (8003d40 <HAL_GPIO_Init+0x2d8>)
 8003d14:	f7fe fb3a 	bl	800238c <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	330c      	adds	r3, #12
 8003d1e:	623b      	str	r3, [r7, #32]
          break;
 8003d20:	e047      	b.n	8003db2 <HAL_GPIO_Init+0x34a>
 8003d22:	bf00      	nop
 8003d24:	40010800 	.word	0x40010800
 8003d28:	40010c00 	.word	0x40010c00
 8003d2c:	40011000 	.word	0x40011000
 8003d30:	40011400 	.word	0x40011400
 8003d34:	40011800 	.word	0x40011800
 8003d38:	40011c00 	.word	0x40011c00
 8003d3c:	40012000 	.word	0x40012000
 8003d40:	08010570 	.word	0x08010570
 8003d44:	10110000 	.word	0x10110000
 8003d48:	10210000 	.word	0x10210000
 8003d4c:	10310000 	.word	0x10310000
 8003d50:	10120000 	.word	0x10120000
 8003d54:	10220000 	.word	0x10220000
 8003d58:	10320000 	.word	0x10320000
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d00b      	beq.n	8003d7c <HAL_GPIO_Init+0x314>
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d007      	beq.n	8003d7c <HAL_GPIO_Init+0x314>
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	2b02      	cmp	r3, #2
 8003d72:	d003      	beq.n	8003d7c <HAL_GPIO_Init+0x314>
 8003d74:	21f7      	movs	r1, #247	; 0xf7
 8003d76:	487c      	ldr	r0, [pc, #496]	; (8003f68 <HAL_GPIO_Init+0x500>)
 8003d78:	f7fe fb08 	bl	800238c <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d102      	bne.n	8003d8a <HAL_GPIO_Init+0x322>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003d84:	2304      	movs	r3, #4
 8003d86:	623b      	str	r3, [r7, #32]
          break;
 8003d88:	e013      	b.n	8003db2 <HAL_GPIO_Init+0x34a>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d105      	bne.n	8003d9e <HAL_GPIO_Init+0x336>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003d92:	2308      	movs	r3, #8
 8003d94:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	69fa      	ldr	r2, [r7, #28]
 8003d9a:	611a      	str	r2, [r3, #16]
          break;
 8003d9c:	e009      	b.n	8003db2 <HAL_GPIO_Init+0x34a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003d9e:	2308      	movs	r3, #8
 8003da0:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	69fa      	ldr	r2, [r7, #28]
 8003da6:	615a      	str	r2, [r3, #20]
          break;
 8003da8:	e003      	b.n	8003db2 <HAL_GPIO_Init+0x34a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003daa:	2300      	movs	r3, #0
 8003dac:	623b      	str	r3, [r7, #32]
          break;
 8003dae:	e000      	b.n	8003db2 <HAL_GPIO_Init+0x34a>
          break;
 8003db0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003db2:	69bb      	ldr	r3, [r7, #24]
 8003db4:	2bff      	cmp	r3, #255	; 0xff
 8003db6:	d801      	bhi.n	8003dbc <HAL_GPIO_Init+0x354>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	e001      	b.n	8003dc0 <HAL_GPIO_Init+0x358>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	3304      	adds	r3, #4
 8003dc0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	2bff      	cmp	r3, #255	; 0xff
 8003dc6:	d802      	bhi.n	8003dce <HAL_GPIO_Init+0x366>
 8003dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	e002      	b.n	8003dd4 <HAL_GPIO_Init+0x36c>
 8003dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd0:	3b08      	subs	r3, #8
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	210f      	movs	r1, #15
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	fa01 f303 	lsl.w	r3, r1, r3
 8003de2:	43db      	mvns	r3, r3
 8003de4:	401a      	ands	r2, r3
 8003de6:	6a39      	ldr	r1, [r7, #32]
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	fa01 f303 	lsl.w	r3, r1, r3
 8003dee:	431a      	orrs	r2, r3
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	f000 80a2 	beq.w	8003f46 <HAL_GPIO_Init+0x4de>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003e02:	4b5a      	ldr	r3, [pc, #360]	; (8003f6c <HAL_GPIO_Init+0x504>)
 8003e04:	699b      	ldr	r3, [r3, #24]
 8003e06:	4a59      	ldr	r2, [pc, #356]	; (8003f6c <HAL_GPIO_Init+0x504>)
 8003e08:	f043 0301 	orr.w	r3, r3, #1
 8003e0c:	6193      	str	r3, [r2, #24]
 8003e0e:	4b57      	ldr	r3, [pc, #348]	; (8003f6c <HAL_GPIO_Init+0x504>)
 8003e10:	699b      	ldr	r3, [r3, #24]
 8003e12:	f003 0301 	and.w	r3, r3, #1
 8003e16:	60bb      	str	r3, [r7, #8]
 8003e18:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003e1a:	4a55      	ldr	r2, [pc, #340]	; (8003f70 <HAL_GPIO_Init+0x508>)
 8003e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1e:	089b      	lsrs	r3, r3, #2
 8003e20:	3302      	adds	r3, #2
 8003e22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e26:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2a:	f003 0303 	and.w	r3, r3, #3
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	220f      	movs	r2, #15
 8003e32:	fa02 f303 	lsl.w	r3, r2, r3
 8003e36:	43db      	mvns	r3, r3
 8003e38:	68fa      	ldr	r2, [r7, #12]
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a4c      	ldr	r2, [pc, #304]	; (8003f74 <HAL_GPIO_Init+0x50c>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d01f      	beq.n	8003e86 <HAL_GPIO_Init+0x41e>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a4b      	ldr	r2, [pc, #300]	; (8003f78 <HAL_GPIO_Init+0x510>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d019      	beq.n	8003e82 <HAL_GPIO_Init+0x41a>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a4a      	ldr	r2, [pc, #296]	; (8003f7c <HAL_GPIO_Init+0x514>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d013      	beq.n	8003e7e <HAL_GPIO_Init+0x416>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a49      	ldr	r2, [pc, #292]	; (8003f80 <HAL_GPIO_Init+0x518>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d00d      	beq.n	8003e7a <HAL_GPIO_Init+0x412>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a48      	ldr	r2, [pc, #288]	; (8003f84 <HAL_GPIO_Init+0x51c>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d007      	beq.n	8003e76 <HAL_GPIO_Init+0x40e>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a47      	ldr	r2, [pc, #284]	; (8003f88 <HAL_GPIO_Init+0x520>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d101      	bne.n	8003e72 <HAL_GPIO_Init+0x40a>
 8003e6e:	2305      	movs	r3, #5
 8003e70:	e00a      	b.n	8003e88 <HAL_GPIO_Init+0x420>
 8003e72:	2306      	movs	r3, #6
 8003e74:	e008      	b.n	8003e88 <HAL_GPIO_Init+0x420>
 8003e76:	2304      	movs	r3, #4
 8003e78:	e006      	b.n	8003e88 <HAL_GPIO_Init+0x420>
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e004      	b.n	8003e88 <HAL_GPIO_Init+0x420>
 8003e7e:	2302      	movs	r3, #2
 8003e80:	e002      	b.n	8003e88 <HAL_GPIO_Init+0x420>
 8003e82:	2301      	movs	r3, #1
 8003e84:	e000      	b.n	8003e88 <HAL_GPIO_Init+0x420>
 8003e86:	2300      	movs	r3, #0
 8003e88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e8a:	f002 0203 	and.w	r2, r2, #3
 8003e8e:	0092      	lsls	r2, r2, #2
 8003e90:	4093      	lsls	r3, r2
 8003e92:	68fa      	ldr	r2, [r7, #12]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003e98:	4935      	ldr	r1, [pc, #212]	; (8003f70 <HAL_GPIO_Init+0x508>)
 8003e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9c:	089b      	lsrs	r3, r3, #2
 8003e9e:	3302      	adds	r3, #2
 8003ea0:	68fa      	ldr	r2, [r7, #12]
 8003ea2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d006      	beq.n	8003ec0 <HAL_GPIO_Init+0x458>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003eb2:	4b36      	ldr	r3, [pc, #216]	; (8003f8c <HAL_GPIO_Init+0x524>)
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	4935      	ldr	r1, [pc, #212]	; (8003f8c <HAL_GPIO_Init+0x524>)
 8003eb8:	69bb      	ldr	r3, [r7, #24]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	600b      	str	r3, [r1, #0]
 8003ebe:	e006      	b.n	8003ece <HAL_GPIO_Init+0x466>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003ec0:	4b32      	ldr	r3, [pc, #200]	; (8003f8c <HAL_GPIO_Init+0x524>)
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	69bb      	ldr	r3, [r7, #24]
 8003ec6:	43db      	mvns	r3, r3
 8003ec8:	4930      	ldr	r1, [pc, #192]	; (8003f8c <HAL_GPIO_Init+0x524>)
 8003eca:	4013      	ands	r3, r2
 8003ecc:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d006      	beq.n	8003ee8 <HAL_GPIO_Init+0x480>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003eda:	4b2c      	ldr	r3, [pc, #176]	; (8003f8c <HAL_GPIO_Init+0x524>)
 8003edc:	685a      	ldr	r2, [r3, #4]
 8003ede:	492b      	ldr	r1, [pc, #172]	; (8003f8c <HAL_GPIO_Init+0x524>)
 8003ee0:	69bb      	ldr	r3, [r7, #24]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	604b      	str	r3, [r1, #4]
 8003ee6:	e006      	b.n	8003ef6 <HAL_GPIO_Init+0x48e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003ee8:	4b28      	ldr	r3, [pc, #160]	; (8003f8c <HAL_GPIO_Init+0x524>)
 8003eea:	685a      	ldr	r2, [r3, #4]
 8003eec:	69bb      	ldr	r3, [r7, #24]
 8003eee:	43db      	mvns	r3, r3
 8003ef0:	4926      	ldr	r1, [pc, #152]	; (8003f8c <HAL_GPIO_Init+0x524>)
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d006      	beq.n	8003f10 <HAL_GPIO_Init+0x4a8>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003f02:	4b22      	ldr	r3, [pc, #136]	; (8003f8c <HAL_GPIO_Init+0x524>)
 8003f04:	689a      	ldr	r2, [r3, #8]
 8003f06:	4921      	ldr	r1, [pc, #132]	; (8003f8c <HAL_GPIO_Init+0x524>)
 8003f08:	69bb      	ldr	r3, [r7, #24]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	608b      	str	r3, [r1, #8]
 8003f0e:	e006      	b.n	8003f1e <HAL_GPIO_Init+0x4b6>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003f10:	4b1e      	ldr	r3, [pc, #120]	; (8003f8c <HAL_GPIO_Init+0x524>)
 8003f12:	689a      	ldr	r2, [r3, #8]
 8003f14:	69bb      	ldr	r3, [r7, #24]
 8003f16:	43db      	mvns	r3, r3
 8003f18:	491c      	ldr	r1, [pc, #112]	; (8003f8c <HAL_GPIO_Init+0x524>)
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d006      	beq.n	8003f38 <HAL_GPIO_Init+0x4d0>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003f2a:	4b18      	ldr	r3, [pc, #96]	; (8003f8c <HAL_GPIO_Init+0x524>)
 8003f2c:	68da      	ldr	r2, [r3, #12]
 8003f2e:	4917      	ldr	r1, [pc, #92]	; (8003f8c <HAL_GPIO_Init+0x524>)
 8003f30:	69bb      	ldr	r3, [r7, #24]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	60cb      	str	r3, [r1, #12]
 8003f36:	e006      	b.n	8003f46 <HAL_GPIO_Init+0x4de>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003f38:	4b14      	ldr	r3, [pc, #80]	; (8003f8c <HAL_GPIO_Init+0x524>)
 8003f3a:	68da      	ldr	r2, [r3, #12]
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	43db      	mvns	r3, r3
 8003f40:	4912      	ldr	r1, [pc, #72]	; (8003f8c <HAL_GPIO_Init+0x524>)
 8003f42:	4013      	ands	r3, r2
 8003f44:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f48:	3301      	adds	r3, #1
 8003f4a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f52:	fa22 f303 	lsr.w	r3, r2, r3
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	f47f ae05 	bne.w	8003b66 <HAL_GPIO_Init+0xfe>
  }
}
 8003f5c:	bf00      	nop
 8003f5e:	bf00      	nop
 8003f60:	3728      	adds	r7, #40	; 0x28
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	08010570 	.word	0x08010570
 8003f6c:	40021000 	.word	0x40021000
 8003f70:	40010000 	.word	0x40010000
 8003f74:	40010800 	.word	0x40010800
 8003f78:	40010c00 	.word	0x40010c00
 8003f7c:	40011000 	.word	0x40011000
 8003f80:	40011400 	.word	0x40011400
 8003f84:	40011800 	.word	0x40011800
 8003f88:	40011c00 	.word	0x40011c00
 8003f8c:	40010400 	.word	0x40010400

08003f90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	460b      	mov	r3, r1
 8003f9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003f9c:	887b      	ldrh	r3, [r7, #2]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d004      	beq.n	8003fac <HAL_GPIO_ReadPin+0x1c>
 8003fa2:	887b      	ldrh	r3, [r7, #2]
 8003fa4:	0c1b      	lsrs	r3, r3, #16
 8003fa6:	041b      	lsls	r3, r3, #16
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d004      	beq.n	8003fb6 <HAL_GPIO_ReadPin+0x26>
 8003fac:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 8003fb0:	4809      	ldr	r0, [pc, #36]	; (8003fd8 <HAL_GPIO_ReadPin+0x48>)
 8003fb2:	f7fe f9eb 	bl	800238c <assert_failed>

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	689a      	ldr	r2, [r3, #8]
 8003fba:	887b      	ldrh	r3, [r7, #2]
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d002      	beq.n	8003fc8 <HAL_GPIO_ReadPin+0x38>
  {
    bitstatus = GPIO_PIN_SET;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	73fb      	strb	r3, [r7, #15]
 8003fc6:	e001      	b.n	8003fcc <HAL_GPIO_ReadPin+0x3c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3710      	adds	r7, #16
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	08010570 	.word	0x08010570

08003fdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b082      	sub	sp, #8
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	460b      	mov	r3, r1
 8003fe6:	807b      	strh	r3, [r7, #2]
 8003fe8:	4613      	mov	r3, r2
 8003fea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003fec:	887b      	ldrh	r3, [r7, #2]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d004      	beq.n	8003ffc <HAL_GPIO_WritePin+0x20>
 8003ff2:	887b      	ldrh	r3, [r7, #2]
 8003ff4:	0c1b      	lsrs	r3, r3, #16
 8003ff6:	041b      	lsls	r3, r3, #16
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d004      	beq.n	8004006 <HAL_GPIO_WritePin+0x2a>
 8003ffc:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8004000:	480e      	ldr	r0, [pc, #56]	; (800403c <HAL_GPIO_WritePin+0x60>)
 8004002:	f7fe f9c3 	bl	800238c <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8004006:	787b      	ldrb	r3, [r7, #1]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d007      	beq.n	800401c <HAL_GPIO_WritePin+0x40>
 800400c:	787b      	ldrb	r3, [r7, #1]
 800400e:	2b01      	cmp	r3, #1
 8004010:	d004      	beq.n	800401c <HAL_GPIO_WritePin+0x40>
 8004012:	f240 11d5 	movw	r1, #469	; 0x1d5
 8004016:	4809      	ldr	r0, [pc, #36]	; (800403c <HAL_GPIO_WritePin+0x60>)
 8004018:	f7fe f9b8 	bl	800238c <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 800401c:	787b      	ldrb	r3, [r7, #1]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d003      	beq.n	800402a <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004022:	887a      	ldrh	r2, [r7, #2]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004028:	e003      	b.n	8004032 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800402a:	887b      	ldrh	r3, [r7, #2]
 800402c:	041a      	lsls	r2, r3, #16
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	611a      	str	r2, [r3, #16]
}
 8004032:	bf00      	nop
 8004034:	3708      	adds	r7, #8
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	08010570 	.word	0x08010570

08004040 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	460b      	mov	r3, r1
 800404a:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800404c:	887b      	ldrh	r3, [r7, #2]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d004      	beq.n	800405c <HAL_GPIO_TogglePin+0x1c>
 8004052:	887b      	ldrh	r3, [r7, #2]
 8004054:	0c1b      	lsrs	r3, r3, #16
 8004056:	041b      	lsls	r3, r3, #16
 8004058:	2b00      	cmp	r3, #0
 800405a:	d004      	beq.n	8004066 <HAL_GPIO_TogglePin+0x26>
 800405c:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 8004060:	480a      	ldr	r0, [pc, #40]	; (800408c <HAL_GPIO_TogglePin+0x4c>)
 8004062:	f7fe f993 	bl	800238c <assert_failed>

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800406c:	887a      	ldrh	r2, [r7, #2]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	4013      	ands	r3, r2
 8004072:	041a      	lsls	r2, r3, #16
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	43d9      	mvns	r1, r3
 8004078:	887b      	ldrh	r3, [r7, #2]
 800407a:	400b      	ands	r3, r1
 800407c:	431a      	orrs	r2, r3
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	611a      	str	r2, [r3, #16]
}
 8004082:	bf00      	nop
 8004084:	3710      	adds	r7, #16
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	08010570 	.word	0x08010570

08004090 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004090:	b480      	push	{r7}
 8004092:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8004094:	4b03      	ldr	r3, [pc, #12]	; (80040a4 <HAL_PWR_EnableBkUpAccess+0x14>)
 8004096:	2201      	movs	r2, #1
 8004098:	601a      	str	r2, [r3, #0]
}
 800409a:	bf00      	nop
 800409c:	46bd      	mov	sp, r7
 800409e:	bc80      	pop	{r7}
 80040a0:	4770      	bx	lr
 80040a2:	bf00      	nop
 80040a4:	420e0020 	.word	0x420e0020

080040a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b086      	sub	sp, #24
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d101      	bne.n	80040ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e35c      	b.n	8004774 <HAL_RCC_OscConfig+0x6cc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d01c      	beq.n	80040fc <HAL_RCC_OscConfig+0x54>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 0301 	and.w	r3, r3, #1
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d116      	bne.n	80040fc <HAL_RCC_OscConfig+0x54>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0302 	and.w	r3, r3, #2
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d110      	bne.n	80040fc <HAL_RCC_OscConfig+0x54>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0308 	and.w	r3, r3, #8
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d10a      	bne.n	80040fc <HAL_RCC_OscConfig+0x54>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0304 	and.w	r3, r3, #4
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d104      	bne.n	80040fc <HAL_RCC_OscConfig+0x54>
 80040f2:	f240 1167 	movw	r1, #359	; 0x167
 80040f6:	48a5      	ldr	r0, [pc, #660]	; (800438c <HAL_RCC_OscConfig+0x2e4>)
 80040f8:	f7fe f948 	bl	800238c <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0301 	and.w	r3, r3, #1
 8004104:	2b00      	cmp	r3, #0
 8004106:	f000 809a 	beq.w	800423e <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d00e      	beq.n	8004130 <HAL_RCC_OscConfig+0x88>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800411a:	d009      	beq.n	8004130 <HAL_RCC_OscConfig+0x88>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004124:	d004      	beq.n	8004130 <HAL_RCC_OscConfig+0x88>
 8004126:	f240 116d 	movw	r1, #365	; 0x16d
 800412a:	4898      	ldr	r0, [pc, #608]	; (800438c <HAL_RCC_OscConfig+0x2e4>)
 800412c:	f7fe f92e 	bl	800238c <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004130:	4b97      	ldr	r3, [pc, #604]	; (8004390 <HAL_RCC_OscConfig+0x2e8>)
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	f003 030c 	and.w	r3, r3, #12
 8004138:	2b04      	cmp	r3, #4
 800413a:	d00c      	beq.n	8004156 <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800413c:	4b94      	ldr	r3, [pc, #592]	; (8004390 <HAL_RCC_OscConfig+0x2e8>)
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	f003 030c 	and.w	r3, r3, #12
 8004144:	2b08      	cmp	r3, #8
 8004146:	d112      	bne.n	800416e <HAL_RCC_OscConfig+0xc6>
 8004148:	4b91      	ldr	r3, [pc, #580]	; (8004390 <HAL_RCC_OscConfig+0x2e8>)
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004150:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004154:	d10b      	bne.n	800416e <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004156:	4b8e      	ldr	r3, [pc, #568]	; (8004390 <HAL_RCC_OscConfig+0x2e8>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d06c      	beq.n	800423c <HAL_RCC_OscConfig+0x194>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d168      	bne.n	800423c <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e302      	b.n	8004774 <HAL_RCC_OscConfig+0x6cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004176:	d106      	bne.n	8004186 <HAL_RCC_OscConfig+0xde>
 8004178:	4b85      	ldr	r3, [pc, #532]	; (8004390 <HAL_RCC_OscConfig+0x2e8>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a84      	ldr	r2, [pc, #528]	; (8004390 <HAL_RCC_OscConfig+0x2e8>)
 800417e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004182:	6013      	str	r3, [r2, #0]
 8004184:	e02e      	b.n	80041e4 <HAL_RCC_OscConfig+0x13c>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d10c      	bne.n	80041a8 <HAL_RCC_OscConfig+0x100>
 800418e:	4b80      	ldr	r3, [pc, #512]	; (8004390 <HAL_RCC_OscConfig+0x2e8>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a7f      	ldr	r2, [pc, #508]	; (8004390 <HAL_RCC_OscConfig+0x2e8>)
 8004194:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004198:	6013      	str	r3, [r2, #0]
 800419a:	4b7d      	ldr	r3, [pc, #500]	; (8004390 <HAL_RCC_OscConfig+0x2e8>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a7c      	ldr	r2, [pc, #496]	; (8004390 <HAL_RCC_OscConfig+0x2e8>)
 80041a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041a4:	6013      	str	r3, [r2, #0]
 80041a6:	e01d      	b.n	80041e4 <HAL_RCC_OscConfig+0x13c>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041b0:	d10c      	bne.n	80041cc <HAL_RCC_OscConfig+0x124>
 80041b2:	4b77      	ldr	r3, [pc, #476]	; (8004390 <HAL_RCC_OscConfig+0x2e8>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a76      	ldr	r2, [pc, #472]	; (8004390 <HAL_RCC_OscConfig+0x2e8>)
 80041b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041bc:	6013      	str	r3, [r2, #0]
 80041be:	4b74      	ldr	r3, [pc, #464]	; (8004390 <HAL_RCC_OscConfig+0x2e8>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a73      	ldr	r2, [pc, #460]	; (8004390 <HAL_RCC_OscConfig+0x2e8>)
 80041c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041c8:	6013      	str	r3, [r2, #0]
 80041ca:	e00b      	b.n	80041e4 <HAL_RCC_OscConfig+0x13c>
 80041cc:	4b70      	ldr	r3, [pc, #448]	; (8004390 <HAL_RCC_OscConfig+0x2e8>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a6f      	ldr	r2, [pc, #444]	; (8004390 <HAL_RCC_OscConfig+0x2e8>)
 80041d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041d6:	6013      	str	r3, [r2, #0]
 80041d8:	4b6d      	ldr	r3, [pc, #436]	; (8004390 <HAL_RCC_OscConfig+0x2e8>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a6c      	ldr	r2, [pc, #432]	; (8004390 <HAL_RCC_OscConfig+0x2e8>)
 80041de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041e2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d013      	beq.n	8004214 <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041ec:	f7fe fd9e 	bl	8002d2c <HAL_GetTick>
 80041f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041f2:	e008      	b.n	8004206 <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041f4:	f7fe fd9a 	bl	8002d2c <HAL_GetTick>
 80041f8:	4602      	mov	r2, r0
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	2b64      	cmp	r3, #100	; 0x64
 8004200:	d901      	bls.n	8004206 <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	e2b6      	b.n	8004774 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004206:	4b62      	ldr	r3, [pc, #392]	; (8004390 <HAL_RCC_OscConfig+0x2e8>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800420e:	2b00      	cmp	r3, #0
 8004210:	d0f0      	beq.n	80041f4 <HAL_RCC_OscConfig+0x14c>
 8004212:	e014      	b.n	800423e <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004214:	f7fe fd8a 	bl	8002d2c <HAL_GetTick>
 8004218:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800421a:	e008      	b.n	800422e <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800421c:	f7fe fd86 	bl	8002d2c <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	2b64      	cmp	r3, #100	; 0x64
 8004228:	d901      	bls.n	800422e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e2a2      	b.n	8004774 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800422e:	4b58      	ldr	r3, [pc, #352]	; (8004390 <HAL_RCC_OscConfig+0x2e8>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d1f0      	bne.n	800421c <HAL_RCC_OscConfig+0x174>
 800423a:	e000      	b.n	800423e <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800423c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0302 	and.w	r3, r3, #2
 8004246:	2b00      	cmp	r3, #0
 8004248:	d079      	beq.n	800433e <HAL_RCC_OscConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	691b      	ldr	r3, [r3, #16]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d008      	beq.n	8004264 <HAL_RCC_OscConfig+0x1bc>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	691b      	ldr	r3, [r3, #16]
 8004256:	2b01      	cmp	r3, #1
 8004258:	d004      	beq.n	8004264 <HAL_RCC_OscConfig+0x1bc>
 800425a:	f240 11a1 	movw	r1, #417	; 0x1a1
 800425e:	484b      	ldr	r0, [pc, #300]	; (800438c <HAL_RCC_OscConfig+0x2e4>)
 8004260:	f7fe f894 	bl	800238c <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	695b      	ldr	r3, [r3, #20]
 8004268:	2b1f      	cmp	r3, #31
 800426a:	d904      	bls.n	8004276 <HAL_RCC_OscConfig+0x1ce>
 800426c:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 8004270:	4846      	ldr	r0, [pc, #280]	; (800438c <HAL_RCC_OscConfig+0x2e4>)
 8004272:	f7fe f88b 	bl	800238c <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004276:	4b46      	ldr	r3, [pc, #280]	; (8004390 <HAL_RCC_OscConfig+0x2e8>)
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	f003 030c 	and.w	r3, r3, #12
 800427e:	2b00      	cmp	r3, #0
 8004280:	d00b      	beq.n	800429a <HAL_RCC_OscConfig+0x1f2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004282:	4b43      	ldr	r3, [pc, #268]	; (8004390 <HAL_RCC_OscConfig+0x2e8>)
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	f003 030c 	and.w	r3, r3, #12
 800428a:	2b08      	cmp	r3, #8
 800428c:	d11c      	bne.n	80042c8 <HAL_RCC_OscConfig+0x220>
 800428e:	4b40      	ldr	r3, [pc, #256]	; (8004390 <HAL_RCC_OscConfig+0x2e8>)
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004296:	2b00      	cmp	r3, #0
 8004298:	d116      	bne.n	80042c8 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800429a:	4b3d      	ldr	r3, [pc, #244]	; (8004390 <HAL_RCC_OscConfig+0x2e8>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0302 	and.w	r3, r3, #2
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d005      	beq.n	80042b2 <HAL_RCC_OscConfig+0x20a>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	691b      	ldr	r3, [r3, #16]
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d001      	beq.n	80042b2 <HAL_RCC_OscConfig+0x20a>
      {
        return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e260      	b.n	8004774 <HAL_RCC_OscConfig+0x6cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042b2:	4b37      	ldr	r3, [pc, #220]	; (8004390 <HAL_RCC_OscConfig+0x2e8>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	695b      	ldr	r3, [r3, #20]
 80042be:	00db      	lsls	r3, r3, #3
 80042c0:	4933      	ldr	r1, [pc, #204]	; (8004390 <HAL_RCC_OscConfig+0x2e8>)
 80042c2:	4313      	orrs	r3, r2
 80042c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042c6:	e03a      	b.n	800433e <HAL_RCC_OscConfig+0x296>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	691b      	ldr	r3, [r3, #16]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d020      	beq.n	8004312 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042d0:	4b30      	ldr	r3, [pc, #192]	; (8004394 <HAL_RCC_OscConfig+0x2ec>)
 80042d2:	2201      	movs	r2, #1
 80042d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042d6:	f7fe fd29 	bl	8002d2c <HAL_GetTick>
 80042da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042dc:	e008      	b.n	80042f0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042de:	f7fe fd25 	bl	8002d2c <HAL_GetTick>
 80042e2:	4602      	mov	r2, r0
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	1ad3      	subs	r3, r2, r3
 80042e8:	2b02      	cmp	r3, #2
 80042ea:	d901      	bls.n	80042f0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80042ec:	2303      	movs	r3, #3
 80042ee:	e241      	b.n	8004774 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042f0:	4b27      	ldr	r3, [pc, #156]	; (8004390 <HAL_RCC_OscConfig+0x2e8>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 0302 	and.w	r3, r3, #2
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d0f0      	beq.n	80042de <HAL_RCC_OscConfig+0x236>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042fc:	4b24      	ldr	r3, [pc, #144]	; (8004390 <HAL_RCC_OscConfig+0x2e8>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	695b      	ldr	r3, [r3, #20]
 8004308:	00db      	lsls	r3, r3, #3
 800430a:	4921      	ldr	r1, [pc, #132]	; (8004390 <HAL_RCC_OscConfig+0x2e8>)
 800430c:	4313      	orrs	r3, r2
 800430e:	600b      	str	r3, [r1, #0]
 8004310:	e015      	b.n	800433e <HAL_RCC_OscConfig+0x296>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004312:	4b20      	ldr	r3, [pc, #128]	; (8004394 <HAL_RCC_OscConfig+0x2ec>)
 8004314:	2200      	movs	r2, #0
 8004316:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004318:	f7fe fd08 	bl	8002d2c <HAL_GetTick>
 800431c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800431e:	e008      	b.n	8004332 <HAL_RCC_OscConfig+0x28a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004320:	f7fe fd04 	bl	8002d2c <HAL_GetTick>
 8004324:	4602      	mov	r2, r0
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	2b02      	cmp	r3, #2
 800432c:	d901      	bls.n	8004332 <HAL_RCC_OscConfig+0x28a>
          {
            return HAL_TIMEOUT;
 800432e:	2303      	movs	r3, #3
 8004330:	e220      	b.n	8004774 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004332:	4b17      	ldr	r3, [pc, #92]	; (8004390 <HAL_RCC_OscConfig+0x2e8>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0302 	and.w	r3, r3, #2
 800433a:	2b00      	cmp	r3, #0
 800433c:	d1f0      	bne.n	8004320 <HAL_RCC_OscConfig+0x278>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 0308 	and.w	r3, r3, #8
 8004346:	2b00      	cmp	r3, #0
 8004348:	d048      	beq.n	80043dc <HAL_RCC_OscConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	699b      	ldr	r3, [r3, #24]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d008      	beq.n	8004364 <HAL_RCC_OscConfig+0x2bc>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	699b      	ldr	r3, [r3, #24]
 8004356:	2b01      	cmp	r3, #1
 8004358:	d004      	beq.n	8004364 <HAL_RCC_OscConfig+0x2bc>
 800435a:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 800435e:	480b      	ldr	r0, [pc, #44]	; (800438c <HAL_RCC_OscConfig+0x2e4>)
 8004360:	f7fe f814 	bl	800238c <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	699b      	ldr	r3, [r3, #24]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d021      	beq.n	80043b0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800436c:	4b0a      	ldr	r3, [pc, #40]	; (8004398 <HAL_RCC_OscConfig+0x2f0>)
 800436e:	2201      	movs	r2, #1
 8004370:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004372:	f7fe fcdb 	bl	8002d2c <HAL_GetTick>
 8004376:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004378:	e010      	b.n	800439c <HAL_RCC_OscConfig+0x2f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800437a:	f7fe fcd7 	bl	8002d2c <HAL_GetTick>
 800437e:	4602      	mov	r2, r0
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	1ad3      	subs	r3, r2, r3
 8004384:	2b02      	cmp	r3, #2
 8004386:	d909      	bls.n	800439c <HAL_RCC_OscConfig+0x2f4>
        {
          return HAL_TIMEOUT;
 8004388:	2303      	movs	r3, #3
 800438a:	e1f3      	b.n	8004774 <HAL_RCC_OscConfig+0x6cc>
 800438c:	080105ac 	.word	0x080105ac
 8004390:	40021000 	.word	0x40021000
 8004394:	42420000 	.word	0x42420000
 8004398:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800439c:	4b67      	ldr	r3, [pc, #412]	; (800453c <HAL_RCC_OscConfig+0x494>)
 800439e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a0:	f003 0302 	and.w	r3, r3, #2
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d0e8      	beq.n	800437a <HAL_RCC_OscConfig+0x2d2>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80043a8:	2001      	movs	r0, #1
 80043aa:	f000 fc0f 	bl	8004bcc <RCC_Delay>
 80043ae:	e015      	b.n	80043dc <HAL_RCC_OscConfig+0x334>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043b0:	4b63      	ldr	r3, [pc, #396]	; (8004540 <HAL_RCC_OscConfig+0x498>)
 80043b2:	2200      	movs	r2, #0
 80043b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043b6:	f7fe fcb9 	bl	8002d2c <HAL_GetTick>
 80043ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043bc:	e008      	b.n	80043d0 <HAL_RCC_OscConfig+0x328>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043be:	f7fe fcb5 	bl	8002d2c <HAL_GetTick>
 80043c2:	4602      	mov	r2, r0
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	d901      	bls.n	80043d0 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	e1d1      	b.n	8004774 <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043d0:	4b5a      	ldr	r3, [pc, #360]	; (800453c <HAL_RCC_OscConfig+0x494>)
 80043d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d4:	f003 0302 	and.w	r3, r3, #2
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d1f0      	bne.n	80043be <HAL_RCC_OscConfig+0x316>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 0304 	and.w	r3, r3, #4
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	f000 80c0 	beq.w	800456a <HAL_RCC_OscConfig+0x4c2>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043ea:	2300      	movs	r3, #0
 80043ec:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d00c      	beq.n	8004410 <HAL_RCC_OscConfig+0x368>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d008      	beq.n	8004410 <HAL_RCC_OscConfig+0x368>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	2b05      	cmp	r3, #5
 8004404:	d004      	beq.n	8004410 <HAL_RCC_OscConfig+0x368>
 8004406:	f240 2111 	movw	r1, #529	; 0x211
 800440a:	484e      	ldr	r0, [pc, #312]	; (8004544 <HAL_RCC_OscConfig+0x49c>)
 800440c:	f7fd ffbe 	bl	800238c <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004410:	4b4a      	ldr	r3, [pc, #296]	; (800453c <HAL_RCC_OscConfig+0x494>)
 8004412:	69db      	ldr	r3, [r3, #28]
 8004414:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004418:	2b00      	cmp	r3, #0
 800441a:	d10d      	bne.n	8004438 <HAL_RCC_OscConfig+0x390>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800441c:	4b47      	ldr	r3, [pc, #284]	; (800453c <HAL_RCC_OscConfig+0x494>)
 800441e:	69db      	ldr	r3, [r3, #28]
 8004420:	4a46      	ldr	r2, [pc, #280]	; (800453c <HAL_RCC_OscConfig+0x494>)
 8004422:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004426:	61d3      	str	r3, [r2, #28]
 8004428:	4b44      	ldr	r3, [pc, #272]	; (800453c <HAL_RCC_OscConfig+0x494>)
 800442a:	69db      	ldr	r3, [r3, #28]
 800442c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004430:	60bb      	str	r3, [r7, #8]
 8004432:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004434:	2301      	movs	r3, #1
 8004436:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004438:	4b43      	ldr	r3, [pc, #268]	; (8004548 <HAL_RCC_OscConfig+0x4a0>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004440:	2b00      	cmp	r3, #0
 8004442:	d118      	bne.n	8004476 <HAL_RCC_OscConfig+0x3ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004444:	4b40      	ldr	r3, [pc, #256]	; (8004548 <HAL_RCC_OscConfig+0x4a0>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a3f      	ldr	r2, [pc, #252]	; (8004548 <HAL_RCC_OscConfig+0x4a0>)
 800444a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800444e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004450:	f7fe fc6c 	bl	8002d2c <HAL_GetTick>
 8004454:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004456:	e008      	b.n	800446a <HAL_RCC_OscConfig+0x3c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004458:	f7fe fc68 	bl	8002d2c <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	2b64      	cmp	r3, #100	; 0x64
 8004464:	d901      	bls.n	800446a <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e184      	b.n	8004774 <HAL_RCC_OscConfig+0x6cc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800446a:	4b37      	ldr	r3, [pc, #220]	; (8004548 <HAL_RCC_OscConfig+0x4a0>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004472:	2b00      	cmp	r3, #0
 8004474:	d0f0      	beq.n	8004458 <HAL_RCC_OscConfig+0x3b0>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	2b01      	cmp	r3, #1
 800447c:	d106      	bne.n	800448c <HAL_RCC_OscConfig+0x3e4>
 800447e:	4b2f      	ldr	r3, [pc, #188]	; (800453c <HAL_RCC_OscConfig+0x494>)
 8004480:	6a1b      	ldr	r3, [r3, #32]
 8004482:	4a2e      	ldr	r2, [pc, #184]	; (800453c <HAL_RCC_OscConfig+0x494>)
 8004484:	f043 0301 	orr.w	r3, r3, #1
 8004488:	6213      	str	r3, [r2, #32]
 800448a:	e02d      	b.n	80044e8 <HAL_RCC_OscConfig+0x440>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d10c      	bne.n	80044ae <HAL_RCC_OscConfig+0x406>
 8004494:	4b29      	ldr	r3, [pc, #164]	; (800453c <HAL_RCC_OscConfig+0x494>)
 8004496:	6a1b      	ldr	r3, [r3, #32]
 8004498:	4a28      	ldr	r2, [pc, #160]	; (800453c <HAL_RCC_OscConfig+0x494>)
 800449a:	f023 0301 	bic.w	r3, r3, #1
 800449e:	6213      	str	r3, [r2, #32]
 80044a0:	4b26      	ldr	r3, [pc, #152]	; (800453c <HAL_RCC_OscConfig+0x494>)
 80044a2:	6a1b      	ldr	r3, [r3, #32]
 80044a4:	4a25      	ldr	r2, [pc, #148]	; (800453c <HAL_RCC_OscConfig+0x494>)
 80044a6:	f023 0304 	bic.w	r3, r3, #4
 80044aa:	6213      	str	r3, [r2, #32]
 80044ac:	e01c      	b.n	80044e8 <HAL_RCC_OscConfig+0x440>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	2b05      	cmp	r3, #5
 80044b4:	d10c      	bne.n	80044d0 <HAL_RCC_OscConfig+0x428>
 80044b6:	4b21      	ldr	r3, [pc, #132]	; (800453c <HAL_RCC_OscConfig+0x494>)
 80044b8:	6a1b      	ldr	r3, [r3, #32]
 80044ba:	4a20      	ldr	r2, [pc, #128]	; (800453c <HAL_RCC_OscConfig+0x494>)
 80044bc:	f043 0304 	orr.w	r3, r3, #4
 80044c0:	6213      	str	r3, [r2, #32]
 80044c2:	4b1e      	ldr	r3, [pc, #120]	; (800453c <HAL_RCC_OscConfig+0x494>)
 80044c4:	6a1b      	ldr	r3, [r3, #32]
 80044c6:	4a1d      	ldr	r2, [pc, #116]	; (800453c <HAL_RCC_OscConfig+0x494>)
 80044c8:	f043 0301 	orr.w	r3, r3, #1
 80044cc:	6213      	str	r3, [r2, #32]
 80044ce:	e00b      	b.n	80044e8 <HAL_RCC_OscConfig+0x440>
 80044d0:	4b1a      	ldr	r3, [pc, #104]	; (800453c <HAL_RCC_OscConfig+0x494>)
 80044d2:	6a1b      	ldr	r3, [r3, #32]
 80044d4:	4a19      	ldr	r2, [pc, #100]	; (800453c <HAL_RCC_OscConfig+0x494>)
 80044d6:	f023 0301 	bic.w	r3, r3, #1
 80044da:	6213      	str	r3, [r2, #32]
 80044dc:	4b17      	ldr	r3, [pc, #92]	; (800453c <HAL_RCC_OscConfig+0x494>)
 80044de:	6a1b      	ldr	r3, [r3, #32]
 80044e0:	4a16      	ldr	r2, [pc, #88]	; (800453c <HAL_RCC_OscConfig+0x494>)
 80044e2:	f023 0304 	bic.w	r3, r3, #4
 80044e6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d015      	beq.n	800451c <HAL_RCC_OscConfig+0x474>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044f0:	f7fe fc1c 	bl	8002d2c <HAL_GetTick>
 80044f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044f6:	e00a      	b.n	800450e <HAL_RCC_OscConfig+0x466>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044f8:	f7fe fc18 	bl	8002d2c <HAL_GetTick>
 80044fc:	4602      	mov	r2, r0
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	f241 3288 	movw	r2, #5000	; 0x1388
 8004506:	4293      	cmp	r3, r2
 8004508:	d901      	bls.n	800450e <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e132      	b.n	8004774 <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800450e:	4b0b      	ldr	r3, [pc, #44]	; (800453c <HAL_RCC_OscConfig+0x494>)
 8004510:	6a1b      	ldr	r3, [r3, #32]
 8004512:	f003 0302 	and.w	r3, r3, #2
 8004516:	2b00      	cmp	r3, #0
 8004518:	d0ee      	beq.n	80044f8 <HAL_RCC_OscConfig+0x450>
 800451a:	e01d      	b.n	8004558 <HAL_RCC_OscConfig+0x4b0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800451c:	f7fe fc06 	bl	8002d2c <HAL_GetTick>
 8004520:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004522:	e013      	b.n	800454c <HAL_RCC_OscConfig+0x4a4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004524:	f7fe fc02 	bl	8002d2c <HAL_GetTick>
 8004528:	4602      	mov	r2, r0
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004532:	4293      	cmp	r3, r2
 8004534:	d90a      	bls.n	800454c <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e11c      	b.n	8004774 <HAL_RCC_OscConfig+0x6cc>
 800453a:	bf00      	nop
 800453c:	40021000 	.word	0x40021000
 8004540:	42420480 	.word	0x42420480
 8004544:	080105ac 	.word	0x080105ac
 8004548:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800454c:	4b8b      	ldr	r3, [pc, #556]	; (800477c <HAL_RCC_OscConfig+0x6d4>)
 800454e:	6a1b      	ldr	r3, [r3, #32]
 8004550:	f003 0302 	and.w	r3, r3, #2
 8004554:	2b00      	cmp	r3, #0
 8004556:	d1e5      	bne.n	8004524 <HAL_RCC_OscConfig+0x47c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004558:	7dfb      	ldrb	r3, [r7, #23]
 800455a:	2b01      	cmp	r3, #1
 800455c:	d105      	bne.n	800456a <HAL_RCC_OscConfig+0x4c2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800455e:	4b87      	ldr	r3, [pc, #540]	; (800477c <HAL_RCC_OscConfig+0x6d4>)
 8004560:	69db      	ldr	r3, [r3, #28]
 8004562:	4a86      	ldr	r2, [pc, #536]	; (800477c <HAL_RCC_OscConfig+0x6d4>)
 8004564:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004568:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	69db      	ldr	r3, [r3, #28]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d00c      	beq.n	800458c <HAL_RCC_OscConfig+0x4e4>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	69db      	ldr	r3, [r3, #28]
 8004576:	2b01      	cmp	r3, #1
 8004578:	d008      	beq.n	800458c <HAL_RCC_OscConfig+0x4e4>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	69db      	ldr	r3, [r3, #28]
 800457e:	2b02      	cmp	r3, #2
 8004580:	d004      	beq.n	800458c <HAL_RCC_OscConfig+0x4e4>
 8004582:	f240 21af 	movw	r1, #687	; 0x2af
 8004586:	487e      	ldr	r0, [pc, #504]	; (8004780 <HAL_RCC_OscConfig+0x6d8>)
 8004588:	f7fd ff00 	bl	800238c <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	69db      	ldr	r3, [r3, #28]
 8004590:	2b00      	cmp	r3, #0
 8004592:	f000 80ee 	beq.w	8004772 <HAL_RCC_OscConfig+0x6ca>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004596:	4b79      	ldr	r3, [pc, #484]	; (800477c <HAL_RCC_OscConfig+0x6d4>)
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	f003 030c 	and.w	r3, r3, #12
 800459e:	2b08      	cmp	r3, #8
 80045a0:	f000 80ce 	beq.w	8004740 <HAL_RCC_OscConfig+0x698>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	69db      	ldr	r3, [r3, #28]
 80045a8:	2b02      	cmp	r3, #2
 80045aa:	f040 80b2 	bne.w	8004712 <HAL_RCC_OscConfig+0x66a>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a1b      	ldr	r3, [r3, #32]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d009      	beq.n	80045ca <HAL_RCC_OscConfig+0x522>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a1b      	ldr	r3, [r3, #32]
 80045ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045be:	d004      	beq.n	80045ca <HAL_RCC_OscConfig+0x522>
 80045c0:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 80045c4:	486e      	ldr	r0, [pc, #440]	; (8004780 <HAL_RCC_OscConfig+0x6d8>)
 80045c6:	f7fd fee1 	bl	800238c <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d04a      	beq.n	8004668 <HAL_RCC_OscConfig+0x5c0>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80045da:	d045      	beq.n	8004668 <HAL_RCC_OscConfig+0x5c0>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80045e4:	d040      	beq.n	8004668 <HAL_RCC_OscConfig+0x5c0>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ea:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80045ee:	d03b      	beq.n	8004668 <HAL_RCC_OscConfig+0x5c0>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045f8:	d036      	beq.n	8004668 <HAL_RCC_OscConfig+0x5c0>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fe:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004602:	d031      	beq.n	8004668 <HAL_RCC_OscConfig+0x5c0>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004608:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800460c:	d02c      	beq.n	8004668 <HAL_RCC_OscConfig+0x5c0>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004612:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004616:	d027      	beq.n	8004668 <HAL_RCC_OscConfig+0x5c0>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004620:	d022      	beq.n	8004668 <HAL_RCC_OscConfig+0x5c0>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004626:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800462a:	d01d      	beq.n	8004668 <HAL_RCC_OscConfig+0x5c0>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004630:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004634:	d018      	beq.n	8004668 <HAL_RCC_OscConfig+0x5c0>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800463e:	d013      	beq.n	8004668 <HAL_RCC_OscConfig+0x5c0>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004644:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004648:	d00e      	beq.n	8004668 <HAL_RCC_OscConfig+0x5c0>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464e:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 8004652:	d009      	beq.n	8004668 <HAL_RCC_OscConfig+0x5c0>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004658:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 800465c:	d004      	beq.n	8004668 <HAL_RCC_OscConfig+0x5c0>
 800465e:	f240 21b9 	movw	r1, #697	; 0x2b9
 8004662:	4847      	ldr	r0, [pc, #284]	; (8004780 <HAL_RCC_OscConfig+0x6d8>)
 8004664:	f7fd fe92 	bl	800238c <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004668:	4b46      	ldr	r3, [pc, #280]	; (8004784 <HAL_RCC_OscConfig+0x6dc>)
 800466a:	2200      	movs	r2, #0
 800466c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800466e:	f7fe fb5d 	bl	8002d2c <HAL_GetTick>
 8004672:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004674:	e008      	b.n	8004688 <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004676:	f7fe fb59 	bl	8002d2c <HAL_GetTick>
 800467a:	4602      	mov	r2, r0
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	1ad3      	subs	r3, r2, r3
 8004680:	2b02      	cmp	r3, #2
 8004682:	d901      	bls.n	8004688 <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 8004684:	2303      	movs	r3, #3
 8004686:	e075      	b.n	8004774 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004688:	4b3c      	ldr	r3, [pc, #240]	; (800477c <HAL_RCC_OscConfig+0x6d4>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004690:	2b00      	cmp	r3, #0
 8004692:	d1f0      	bne.n	8004676 <HAL_RCC_OscConfig+0x5ce>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6a1b      	ldr	r3, [r3, #32]
 8004698:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800469c:	d116      	bne.n	80046cc <HAL_RCC_OscConfig+0x624>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d009      	beq.n	80046ba <HAL_RCC_OscConfig+0x612>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80046ae:	d004      	beq.n	80046ba <HAL_RCC_OscConfig+0x612>
 80046b0:	f240 21cf 	movw	r1, #719	; 0x2cf
 80046b4:	4832      	ldr	r0, [pc, #200]	; (8004780 <HAL_RCC_OscConfig+0x6d8>)
 80046b6:	f7fd fe69 	bl	800238c <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80046ba:	4b30      	ldr	r3, [pc, #192]	; (800477c <HAL_RCC_OscConfig+0x6d4>)
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	492d      	ldr	r1, [pc, #180]	; (800477c <HAL_RCC_OscConfig+0x6d4>)
 80046c8:	4313      	orrs	r3, r2
 80046ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046cc:	4b2b      	ldr	r3, [pc, #172]	; (800477c <HAL_RCC_OscConfig+0x6d4>)
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6a19      	ldr	r1, [r3, #32]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046dc:	430b      	orrs	r3, r1
 80046de:	4927      	ldr	r1, [pc, #156]	; (800477c <HAL_RCC_OscConfig+0x6d4>)
 80046e0:	4313      	orrs	r3, r2
 80046e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046e4:	4b27      	ldr	r3, [pc, #156]	; (8004784 <HAL_RCC_OscConfig+0x6dc>)
 80046e6:	2201      	movs	r2, #1
 80046e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ea:	f7fe fb1f 	bl	8002d2c <HAL_GetTick>
 80046ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046f0:	e008      	b.n	8004704 <HAL_RCC_OscConfig+0x65c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046f2:	f7fe fb1b 	bl	8002d2c <HAL_GetTick>
 80046f6:	4602      	mov	r2, r0
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d901      	bls.n	8004704 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8004700:	2303      	movs	r3, #3
 8004702:	e037      	b.n	8004774 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004704:	4b1d      	ldr	r3, [pc, #116]	; (800477c <HAL_RCC_OscConfig+0x6d4>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800470c:	2b00      	cmp	r3, #0
 800470e:	d0f0      	beq.n	80046f2 <HAL_RCC_OscConfig+0x64a>
 8004710:	e02f      	b.n	8004772 <HAL_RCC_OscConfig+0x6ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004712:	4b1c      	ldr	r3, [pc, #112]	; (8004784 <HAL_RCC_OscConfig+0x6dc>)
 8004714:	2200      	movs	r2, #0
 8004716:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004718:	f7fe fb08 	bl	8002d2c <HAL_GetTick>
 800471c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800471e:	e008      	b.n	8004732 <HAL_RCC_OscConfig+0x68a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004720:	f7fe fb04 	bl	8002d2c <HAL_GetTick>
 8004724:	4602      	mov	r2, r0
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	2b02      	cmp	r3, #2
 800472c:	d901      	bls.n	8004732 <HAL_RCC_OscConfig+0x68a>
          {
            return HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	e020      	b.n	8004774 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004732:	4b12      	ldr	r3, [pc, #72]	; (800477c <HAL_RCC_OscConfig+0x6d4>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800473a:	2b00      	cmp	r3, #0
 800473c:	d1f0      	bne.n	8004720 <HAL_RCC_OscConfig+0x678>
 800473e:	e018      	b.n	8004772 <HAL_RCC_OscConfig+0x6ca>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	69db      	ldr	r3, [r3, #28]
 8004744:	2b01      	cmp	r3, #1
 8004746:	d101      	bne.n	800474c <HAL_RCC_OscConfig+0x6a4>
      {
        return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e013      	b.n	8004774 <HAL_RCC_OscConfig+0x6cc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800474c:	4b0b      	ldr	r3, [pc, #44]	; (800477c <HAL_RCC_OscConfig+0x6d4>)
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6a1b      	ldr	r3, [r3, #32]
 800475c:	429a      	cmp	r2, r3
 800475e:	d106      	bne.n	800476e <HAL_RCC_OscConfig+0x6c6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800476a:	429a      	cmp	r2, r3
 800476c:	d001      	beq.n	8004772 <HAL_RCC_OscConfig+0x6ca>
        {
          return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e000      	b.n	8004774 <HAL_RCC_OscConfig+0x6cc>
        }
      }
    }
  }

  return HAL_OK;
 8004772:	2300      	movs	r3, #0
}
 8004774:	4618      	mov	r0, r3
 8004776:	3718      	adds	r7, #24
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}
 800477c:	40021000 	.word	0x40021000
 8004780:	080105ac 	.word	0x080105ac
 8004784:	42420060 	.word	0x42420060

08004788 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b084      	sub	sp, #16
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d101      	bne.n	800479c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e176      	b.n	8004a8a <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 0301 	and.w	r3, r3, #1
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d116      	bne.n	80047d6 <HAL_RCC_ClockConfig+0x4e>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0302 	and.w	r3, r3, #2
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d110      	bne.n	80047d6 <HAL_RCC_ClockConfig+0x4e>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 0304 	and.w	r3, r3, #4
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d10a      	bne.n	80047d6 <HAL_RCC_ClockConfig+0x4e>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 0308 	and.w	r3, r3, #8
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d104      	bne.n	80047d6 <HAL_RCC_ClockConfig+0x4e>
 80047cc:	f44f 714e 	mov.w	r1, #824	; 0x338
 80047d0:	4874      	ldr	r0, [pc, #464]	; (80049a4 <HAL_RCC_ClockConfig+0x21c>)
 80047d2:	f7fd fddb 	bl	800238c <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d00a      	beq.n	80047f2 <HAL_RCC_ClockConfig+0x6a>
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d007      	beq.n	80047f2 <HAL_RCC_ClockConfig+0x6a>
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	2b02      	cmp	r3, #2
 80047e6:	d004      	beq.n	80047f2 <HAL_RCC_ClockConfig+0x6a>
 80047e8:	f240 3139 	movw	r1, #825	; 0x339
 80047ec:	486d      	ldr	r0, [pc, #436]	; (80049a4 <HAL_RCC_ClockConfig+0x21c>)
 80047ee:	f7fd fdcd 	bl	800238c <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80047f2:	4b6d      	ldr	r3, [pc, #436]	; (80049a8 <HAL_RCC_ClockConfig+0x220>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0307 	and.w	r3, r3, #7
 80047fa:	683a      	ldr	r2, [r7, #0]
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d910      	bls.n	8004822 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004800:	4b69      	ldr	r3, [pc, #420]	; (80049a8 <HAL_RCC_ClockConfig+0x220>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f023 0207 	bic.w	r2, r3, #7
 8004808:	4967      	ldr	r1, [pc, #412]	; (80049a8 <HAL_RCC_ClockConfig+0x220>)
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	4313      	orrs	r3, r2
 800480e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004810:	4b65      	ldr	r3, [pc, #404]	; (80049a8 <HAL_RCC_ClockConfig+0x220>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0307 	and.w	r3, r3, #7
 8004818:	683a      	ldr	r2, [r7, #0]
 800481a:	429a      	cmp	r2, r3
 800481c:	d001      	beq.n	8004822 <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e133      	b.n	8004a8a <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 0302 	and.w	r3, r3, #2
 800482a:	2b00      	cmp	r3, #0
 800482c:	d049      	beq.n	80048c2 <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 0304 	and.w	r3, r3, #4
 8004836:	2b00      	cmp	r3, #0
 8004838:	d005      	beq.n	8004846 <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800483a:	4b5c      	ldr	r3, [pc, #368]	; (80049ac <HAL_RCC_ClockConfig+0x224>)
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	4a5b      	ldr	r2, [pc, #364]	; (80049ac <HAL_RCC_ClockConfig+0x224>)
 8004840:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004844:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 0308 	and.w	r3, r3, #8
 800484e:	2b00      	cmp	r3, #0
 8004850:	d005      	beq.n	800485e <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004852:	4b56      	ldr	r3, [pc, #344]	; (80049ac <HAL_RCC_ClockConfig+0x224>)
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	4a55      	ldr	r2, [pc, #340]	; (80049ac <HAL_RCC_ClockConfig+0x224>)
 8004858:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800485c:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d024      	beq.n	80048b0 <HAL_RCC_ClockConfig+0x128>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	2b80      	cmp	r3, #128	; 0x80
 800486c:	d020      	beq.n	80048b0 <HAL_RCC_ClockConfig+0x128>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	2b90      	cmp	r3, #144	; 0x90
 8004874:	d01c      	beq.n	80048b0 <HAL_RCC_ClockConfig+0x128>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	2ba0      	cmp	r3, #160	; 0xa0
 800487c:	d018      	beq.n	80048b0 <HAL_RCC_ClockConfig+0x128>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	2bb0      	cmp	r3, #176	; 0xb0
 8004884:	d014      	beq.n	80048b0 <HAL_RCC_ClockConfig+0x128>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	2bc0      	cmp	r3, #192	; 0xc0
 800488c:	d010      	beq.n	80048b0 <HAL_RCC_ClockConfig+0x128>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	2bd0      	cmp	r3, #208	; 0xd0
 8004894:	d00c      	beq.n	80048b0 <HAL_RCC_ClockConfig+0x128>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	2be0      	cmp	r3, #224	; 0xe0
 800489c:	d008      	beq.n	80048b0 <HAL_RCC_ClockConfig+0x128>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	2bf0      	cmp	r3, #240	; 0xf0
 80048a4:	d004      	beq.n	80048b0 <HAL_RCC_ClockConfig+0x128>
 80048a6:	f240 315f 	movw	r1, #863	; 0x35f
 80048aa:	483e      	ldr	r0, [pc, #248]	; (80049a4 <HAL_RCC_ClockConfig+0x21c>)
 80048ac:	f7fd fd6e 	bl	800238c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048b0:	4b3e      	ldr	r3, [pc, #248]	; (80049ac <HAL_RCC_ClockConfig+0x224>)
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	493b      	ldr	r1, [pc, #236]	; (80049ac <HAL_RCC_ClockConfig+0x224>)
 80048be:	4313      	orrs	r3, r2
 80048c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 0301 	and.w	r3, r3, #1
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d051      	beq.n	8004972 <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d00c      	beq.n	80048f0 <HAL_RCC_ClockConfig+0x168>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d008      	beq.n	80048f0 <HAL_RCC_ClockConfig+0x168>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	2b02      	cmp	r3, #2
 80048e4:	d004      	beq.n	80048f0 <HAL_RCC_ClockConfig+0x168>
 80048e6:	f240 3166 	movw	r1, #870	; 0x366
 80048ea:	482e      	ldr	r0, [pc, #184]	; (80049a4 <HAL_RCC_ClockConfig+0x21c>)
 80048ec:	f7fd fd4e 	bl	800238c <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d107      	bne.n	8004908 <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048f8:	4b2c      	ldr	r3, [pc, #176]	; (80049ac <HAL_RCC_ClockConfig+0x224>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004900:	2b00      	cmp	r3, #0
 8004902:	d115      	bne.n	8004930 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	e0c0      	b.n	8004a8a <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	2b02      	cmp	r3, #2
 800490e:	d107      	bne.n	8004920 <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004910:	4b26      	ldr	r3, [pc, #152]	; (80049ac <HAL_RCC_ClockConfig+0x224>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004918:	2b00      	cmp	r3, #0
 800491a:	d109      	bne.n	8004930 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	e0b4      	b.n	8004a8a <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004920:	4b22      	ldr	r3, [pc, #136]	; (80049ac <HAL_RCC_ClockConfig+0x224>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 0302 	and.w	r3, r3, #2
 8004928:	2b00      	cmp	r3, #0
 800492a:	d101      	bne.n	8004930 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	e0ac      	b.n	8004a8a <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004930:	4b1e      	ldr	r3, [pc, #120]	; (80049ac <HAL_RCC_ClockConfig+0x224>)
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	f023 0203 	bic.w	r2, r3, #3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	491b      	ldr	r1, [pc, #108]	; (80049ac <HAL_RCC_ClockConfig+0x224>)
 800493e:	4313      	orrs	r3, r2
 8004940:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004942:	f7fe f9f3 	bl	8002d2c <HAL_GetTick>
 8004946:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004948:	e00a      	b.n	8004960 <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800494a:	f7fe f9ef 	bl	8002d2c <HAL_GetTick>
 800494e:	4602      	mov	r2, r0
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	1ad3      	subs	r3, r2, r3
 8004954:	f241 3288 	movw	r2, #5000	; 0x1388
 8004958:	4293      	cmp	r3, r2
 800495a:	d901      	bls.n	8004960 <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 800495c:	2303      	movs	r3, #3
 800495e:	e094      	b.n	8004a8a <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004960:	4b12      	ldr	r3, [pc, #72]	; (80049ac <HAL_RCC_ClockConfig+0x224>)
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	f003 020c 	and.w	r2, r3, #12
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	429a      	cmp	r2, r3
 8004970:	d1eb      	bne.n	800494a <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004972:	4b0d      	ldr	r3, [pc, #52]	; (80049a8 <HAL_RCC_ClockConfig+0x220>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 0307 	and.w	r3, r3, #7
 800497a:	683a      	ldr	r2, [r7, #0]
 800497c:	429a      	cmp	r2, r3
 800497e:	d217      	bcs.n	80049b0 <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004980:	4b09      	ldr	r3, [pc, #36]	; (80049a8 <HAL_RCC_ClockConfig+0x220>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f023 0207 	bic.w	r2, r3, #7
 8004988:	4907      	ldr	r1, [pc, #28]	; (80049a8 <HAL_RCC_ClockConfig+0x220>)
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	4313      	orrs	r3, r2
 800498e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004990:	4b05      	ldr	r3, [pc, #20]	; (80049a8 <HAL_RCC_ClockConfig+0x220>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 0307 	and.w	r3, r3, #7
 8004998:	683a      	ldr	r2, [r7, #0]
 800499a:	429a      	cmp	r2, r3
 800499c:	d008      	beq.n	80049b0 <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e073      	b.n	8004a8a <HAL_RCC_ClockConfig+0x302>
 80049a2:	bf00      	nop
 80049a4:	080105ac 	.word	0x080105ac
 80049a8:	40022000 	.word	0x40022000
 80049ac:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 0304 	and.w	r3, r3, #4
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d025      	beq.n	8004a08 <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d018      	beq.n	80049f6 <HAL_RCC_ClockConfig+0x26e>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	68db      	ldr	r3, [r3, #12]
 80049c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049cc:	d013      	beq.n	80049f6 <HAL_RCC_ClockConfig+0x26e>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	68db      	ldr	r3, [r3, #12]
 80049d2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80049d6:	d00e      	beq.n	80049f6 <HAL_RCC_ClockConfig+0x26e>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80049e0:	d009      	beq.n	80049f6 <HAL_RCC_ClockConfig+0x26e>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80049ea:	d004      	beq.n	80049f6 <HAL_RCC_ClockConfig+0x26e>
 80049ec:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 80049f0:	4828      	ldr	r0, [pc, #160]	; (8004a94 <HAL_RCC_ClockConfig+0x30c>)
 80049f2:	f7fd fccb 	bl	800238c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049f6:	4b28      	ldr	r3, [pc, #160]	; (8004a98 <HAL_RCC_ClockConfig+0x310>)
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	4925      	ldr	r1, [pc, #148]	; (8004a98 <HAL_RCC_ClockConfig+0x310>)
 8004a04:	4313      	orrs	r3, r2
 8004a06:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 0308 	and.w	r3, r3, #8
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d026      	beq.n	8004a62 <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	691b      	ldr	r3, [r3, #16]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d018      	beq.n	8004a4e <HAL_RCC_ClockConfig+0x2c6>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	691b      	ldr	r3, [r3, #16]
 8004a20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a24:	d013      	beq.n	8004a4e <HAL_RCC_ClockConfig+0x2c6>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004a2e:	d00e      	beq.n	8004a4e <HAL_RCC_ClockConfig+0x2c6>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	691b      	ldr	r3, [r3, #16]
 8004a34:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004a38:	d009      	beq.n	8004a4e <HAL_RCC_ClockConfig+0x2c6>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	691b      	ldr	r3, [r3, #16]
 8004a3e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a42:	d004      	beq.n	8004a4e <HAL_RCC_ClockConfig+0x2c6>
 8004a44:	f240 31ab 	movw	r1, #939	; 0x3ab
 8004a48:	4812      	ldr	r0, [pc, #72]	; (8004a94 <HAL_RCC_ClockConfig+0x30c>)
 8004a4a:	f7fd fc9f 	bl	800238c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004a4e:	4b12      	ldr	r3, [pc, #72]	; (8004a98 <HAL_RCC_ClockConfig+0x310>)
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	691b      	ldr	r3, [r3, #16]
 8004a5a:	00db      	lsls	r3, r3, #3
 8004a5c:	490e      	ldr	r1, [pc, #56]	; (8004a98 <HAL_RCC_ClockConfig+0x310>)
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004a62:	f000 f821 	bl	8004aa8 <HAL_RCC_GetSysClockFreq>
 8004a66:	4602      	mov	r2, r0
 8004a68:	4b0b      	ldr	r3, [pc, #44]	; (8004a98 <HAL_RCC_ClockConfig+0x310>)
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	091b      	lsrs	r3, r3, #4
 8004a6e:	f003 030f 	and.w	r3, r3, #15
 8004a72:	490a      	ldr	r1, [pc, #40]	; (8004a9c <HAL_RCC_ClockConfig+0x314>)
 8004a74:	5ccb      	ldrb	r3, [r1, r3]
 8004a76:	fa22 f303 	lsr.w	r3, r2, r3
 8004a7a:	4a09      	ldr	r2, [pc, #36]	; (8004aa0 <HAL_RCC_ClockConfig+0x318>)
 8004a7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004a7e:	4b09      	ldr	r3, [pc, #36]	; (8004aa4 <HAL_RCC_ClockConfig+0x31c>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4618      	mov	r0, r3
 8004a84:	f7fe f910 	bl	8002ca8 <HAL_InitTick>

  return HAL_OK;
 8004a88:	2300      	movs	r3, #0
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3710      	adds	r7, #16
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}
 8004a92:	bf00      	nop
 8004a94:	080105ac 	.word	0x080105ac
 8004a98:	40021000 	.word	0x40021000
 8004a9c:	0801109c 	.word	0x0801109c
 8004aa0:	20000000 	.word	0x20000000
 8004aa4:	20000004 	.word	0x20000004

08004aa8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004aa8:	b490      	push	{r4, r7}
 8004aaa:	b08a      	sub	sp, #40	; 0x28
 8004aac:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004aae:	4b2a      	ldr	r3, [pc, #168]	; (8004b58 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004ab0:	1d3c      	adds	r4, r7, #4
 8004ab2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004ab4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004ab8:	f240 2301 	movw	r3, #513	; 0x201
 8004abc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	61fb      	str	r3, [r7, #28]
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	61bb      	str	r3, [r7, #24]
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	627b      	str	r3, [r7, #36]	; 0x24
 8004aca:	2300      	movs	r3, #0
 8004acc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004ad2:	4b22      	ldr	r3, [pc, #136]	; (8004b5c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004ad8:	69fb      	ldr	r3, [r7, #28]
 8004ada:	f003 030c 	and.w	r3, r3, #12
 8004ade:	2b04      	cmp	r3, #4
 8004ae0:	d002      	beq.n	8004ae8 <HAL_RCC_GetSysClockFreq+0x40>
 8004ae2:	2b08      	cmp	r3, #8
 8004ae4:	d003      	beq.n	8004aee <HAL_RCC_GetSysClockFreq+0x46>
 8004ae6:	e02d      	b.n	8004b44 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004ae8:	4b1d      	ldr	r3, [pc, #116]	; (8004b60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004aea:	623b      	str	r3, [r7, #32]
      break;
 8004aec:	e02d      	b.n	8004b4a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004aee:	69fb      	ldr	r3, [r7, #28]
 8004af0:	0c9b      	lsrs	r3, r3, #18
 8004af2:	f003 030f 	and.w	r3, r3, #15
 8004af6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004afa:	4413      	add	r3, r2
 8004afc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004b00:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004b02:	69fb      	ldr	r3, [r7, #28]
 8004b04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d013      	beq.n	8004b34 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004b0c:	4b13      	ldr	r3, [pc, #76]	; (8004b5c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	0c5b      	lsrs	r3, r3, #17
 8004b12:	f003 0301 	and.w	r3, r3, #1
 8004b16:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004b1a:	4413      	add	r3, r2
 8004b1c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004b20:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	4a0e      	ldr	r2, [pc, #56]	; (8004b60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b26:	fb02 f203 	mul.w	r2, r2, r3
 8004b2a:	69bb      	ldr	r3, [r7, #24]
 8004b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b30:	627b      	str	r3, [r7, #36]	; 0x24
 8004b32:	e004      	b.n	8004b3e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	4a0b      	ldr	r2, [pc, #44]	; (8004b64 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004b38:	fb02 f303 	mul.w	r3, r2, r3
 8004b3c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b40:	623b      	str	r3, [r7, #32]
      break;
 8004b42:	e002      	b.n	8004b4a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004b44:	4b06      	ldr	r3, [pc, #24]	; (8004b60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b46:	623b      	str	r3, [r7, #32]
      break;
 8004b48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b4a:	6a3b      	ldr	r3, [r7, #32]
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3728      	adds	r7, #40	; 0x28
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bc90      	pop	{r4, r7}
 8004b54:	4770      	bx	lr
 8004b56:	bf00      	nop
 8004b58:	080105e4 	.word	0x080105e4
 8004b5c:	40021000 	.word	0x40021000
 8004b60:	007a1200 	.word	0x007a1200
 8004b64:	003d0900 	.word	0x003d0900

08004b68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b6c:	4b02      	ldr	r3, [pc, #8]	; (8004b78 <HAL_RCC_GetHCLKFreq+0x10>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bc80      	pop	{r7}
 8004b76:	4770      	bx	lr
 8004b78:	20000000 	.word	0x20000000

08004b7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004b80:	f7ff fff2 	bl	8004b68 <HAL_RCC_GetHCLKFreq>
 8004b84:	4602      	mov	r2, r0
 8004b86:	4b05      	ldr	r3, [pc, #20]	; (8004b9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	0a1b      	lsrs	r3, r3, #8
 8004b8c:	f003 0307 	and.w	r3, r3, #7
 8004b90:	4903      	ldr	r1, [pc, #12]	; (8004ba0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b92:	5ccb      	ldrb	r3, [r1, r3]
 8004b94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	bd80      	pop	{r7, pc}
 8004b9c:	40021000 	.word	0x40021000
 8004ba0:	080110ac 	.word	0x080110ac

08004ba4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004ba8:	f7ff ffde 	bl	8004b68 <HAL_RCC_GetHCLKFreq>
 8004bac:	4602      	mov	r2, r0
 8004bae:	4b05      	ldr	r3, [pc, #20]	; (8004bc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	0adb      	lsrs	r3, r3, #11
 8004bb4:	f003 0307 	and.w	r3, r3, #7
 8004bb8:	4903      	ldr	r1, [pc, #12]	; (8004bc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bba:	5ccb      	ldrb	r3, [r1, r3]
 8004bbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	40021000 	.word	0x40021000
 8004bc8:	080110ac 	.word	0x080110ac

08004bcc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b085      	sub	sp, #20
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004bd4:	4b0a      	ldr	r3, [pc, #40]	; (8004c00 <RCC_Delay+0x34>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a0a      	ldr	r2, [pc, #40]	; (8004c04 <RCC_Delay+0x38>)
 8004bda:	fba2 2303 	umull	r2, r3, r2, r3
 8004bde:	0a5b      	lsrs	r3, r3, #9
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	fb02 f303 	mul.w	r3, r2, r3
 8004be6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004be8:	bf00      	nop
  }
  while (Delay --);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	1e5a      	subs	r2, r3, #1
 8004bee:	60fa      	str	r2, [r7, #12]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d1f9      	bne.n	8004be8 <RCC_Delay+0x1c>
}
 8004bf4:	bf00      	nop
 8004bf6:	bf00      	nop
 8004bf8:	3714      	adds	r7, #20
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bc80      	pop	{r7}
 8004bfe:	4770      	bx	lr
 8004c00:	20000000 	.word	0x20000000
 8004c04:	10624dd3 	.word	0x10624dd3

08004c08 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b086      	sub	sp, #24
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004c10:	2300      	movs	r3, #0
 8004c12:	613b      	str	r3, [r7, #16]
 8004c14:	2300      	movs	r3, #0
 8004c16:	60fb      	str	r3, [r7, #12]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
#endif /* STM32F105xC || STM32F107xC */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 0301 	and.w	r3, r3, #1
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d11b      	bne.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 0302 	and.w	r3, r3, #2
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d115      	bne.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 0304 	and.w	r3, r3, #4
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d10f      	bne.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 0308 	and.w	r3, r3, #8
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d109      	bne.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 0310 	and.w	r3, r3, #16
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d103      	bne.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004c54:	216c      	movs	r1, #108	; 0x6c
 8004c56:	4873      	ldr	r0, [pc, #460]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8004c58:	f7fd fb98 	bl	800238c <assert_failed>

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 0301 	and.w	r3, r3, #1
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	f000 8095 	beq.w	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    FlagStatus pwrclkchanged = RESET;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	75fb      	strb	r3, [r7, #23]

    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d012      	beq.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x94>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c7e:	d00d      	beq.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x94>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c88:	d008      	beq.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x94>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c92:	d003      	beq.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x94>
 8004c94:	2174      	movs	r1, #116	; 0x74
 8004c96:	4863      	ldr	r0, [pc, #396]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8004c98:	f7fd fb78 	bl	800238c <assert_failed>

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c9c:	4b62      	ldr	r3, [pc, #392]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004c9e:	69db      	ldr	r3, [r3, #28]
 8004ca0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d10d      	bne.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0xbc>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ca8:	4b5f      	ldr	r3, [pc, #380]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004caa:	69db      	ldr	r3, [r3, #28]
 8004cac:	4a5e      	ldr	r2, [pc, #376]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004cae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cb2:	61d3      	str	r3, [r2, #28]
 8004cb4:	4b5c      	ldr	r3, [pc, #368]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004cb6:	69db      	ldr	r3, [r3, #28]
 8004cb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cbc:	60bb      	str	r3, [r7, #8]
 8004cbe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cc4:	4b59      	ldr	r3, [pc, #356]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d118      	bne.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0xfa>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cd0:	4b56      	ldr	r3, [pc, #344]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a55      	ldr	r2, [pc, #340]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004cd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cda:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cdc:	f7fe f826 	bl	8002d2c <HAL_GetTick>
 8004ce0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ce2:	e008      	b.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0xee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ce4:	f7fe f822 	bl	8002d2c <HAL_GetTick>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	2b64      	cmp	r3, #100	; 0x64
 8004cf0:	d901      	bls.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0xee>
        {
          return HAL_TIMEOUT;
 8004cf2:	2303      	movs	r3, #3
 8004cf4:	e092      	b.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x214>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cf6:	4b4d      	ldr	r3, [pc, #308]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d0f0      	beq.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0xdc>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d02:	4b49      	ldr	r3, [pc, #292]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004d04:	6a1b      	ldr	r3, [r3, #32]
 8004d06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d0a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d02e      	beq.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d1a:	68fa      	ldr	r2, [r7, #12]
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d027      	beq.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d20:	4b41      	ldr	r3, [pc, #260]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004d22:	6a1b      	ldr	r3, [r3, #32]
 8004d24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d28:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d2a:	4b41      	ldr	r3, [pc, #260]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d30:	4b3f      	ldr	r3, [pc, #252]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8004d32:	2200      	movs	r2, #0
 8004d34:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004d36:	4a3c      	ldr	r2, [pc, #240]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f003 0301 	and.w	r3, r3, #1
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d014      	beq.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d46:	f7fd fff1 	bl	8002d2c <HAL_GetTick>
 8004d4a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d4c:	e00a      	b.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x15c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d4e:	f7fd ffed 	bl	8002d2c <HAL_GetTick>
 8004d52:	4602      	mov	r2, r0
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	1ad3      	subs	r3, r2, r3
 8004d58:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d901      	bls.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          {
            return HAL_TIMEOUT;
 8004d60:	2303      	movs	r3, #3
 8004d62:	e05b      	b.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x214>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d64:	4b30      	ldr	r3, [pc, #192]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004d66:	6a1b      	ldr	r3, [r3, #32]
 8004d68:	f003 0302 	and.w	r3, r3, #2
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d0ee      	beq.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x146>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d70:	4b2d      	ldr	r3, [pc, #180]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004d72:	6a1b      	ldr	r3, [r3, #32]
 8004d74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	492a      	ldr	r1, [pc, #168]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004d82:	7dfb      	ldrb	r3, [r7, #23]
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d105      	bne.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d88:	4b27      	ldr	r3, [pc, #156]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004d8a:	69db      	ldr	r3, [r3, #28]
 8004d8c:	4a26      	ldr	r2, [pc, #152]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004d8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d92:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 0302 	and.w	r3, r3, #2
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d01f      	beq.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d012      	beq.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004db0:	d00d      	beq.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dba:	d008      	beq.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004dc4:	d003      	beq.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 8004dc6:	21b9      	movs	r1, #185	; 0xb9
 8004dc8:	4816      	ldr	r0, [pc, #88]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8004dca:	f7fd fadf 	bl	800238c <assert_failed>

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004dce:	4b16      	ldr	r3, [pc, #88]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	4913      	ldr	r1, [pc, #76]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0310 	and.w	r3, r3, #16
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d016      	beq.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x212>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	695b      	ldr	r3, [r3, #20]
 8004df0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004df4:	d008      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	695b      	ldr	r3, [r3, #20]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d004      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004dfe:	f240 1115 	movw	r1, #277	; 0x115
 8004e02:	4808      	ldr	r0, [pc, #32]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8004e04:	f7fd fac2 	bl	800238c <assert_failed>

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e08:	4b07      	ldr	r3, [pc, #28]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	695b      	ldr	r3, [r3, #20]
 8004e14:	4904      	ldr	r1, [pc, #16]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004e16:	4313      	orrs	r3, r2
 8004e18:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004e1a:	2300      	movs	r3, #0
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3718      	adds	r7, #24
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}
 8004e24:	080105f4 	.word	0x080105f4
 8004e28:	40021000 	.word	0x40021000
 8004e2c:	40007000 	.word	0x40007000
 8004e30:	42420440 	.word	0x42420440

08004e34 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004e34:	b590      	push	{r4, r7, lr}
 8004e36:	b08d      	sub	sp, #52	; 0x34
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004e3c:	4b7a      	ldr	r3, [pc, #488]	; (8005028 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>)
 8004e3e:	f107 040c 	add.w	r4, r7, #12
 8004e42:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004e44:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004e48:	f240 2301 	movw	r3, #513	; 0x201
 8004e4c:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	627b      	str	r3, [r7, #36]	; 0x24
 8004e52:	2300      	movs	r3, #0
 8004e54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e56:	2300      	movs	r3, #0
 8004e58:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	61fb      	str	r3, [r7, #28]
 8004e5e:	2300      	movs	r3, #0
 8004e60:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f003 0301 	and.w	r3, r3, #1
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d118      	bne.n	8004e9e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	f003 0302 	and.w	r3, r3, #2
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d113      	bne.n	8004e9e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f003 0304 	and.w	r3, r3, #4
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d10e      	bne.n	8004e9e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f003 0308 	and.w	r3, r3, #8
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d109      	bne.n	8004e9e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f003 0310 	and.w	r3, r3, #16
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d104      	bne.n	8004e9e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 8004e94:	f44f 71cb 	mov.w	r1, #406	; 0x196
 8004e98:	4864      	ldr	r0, [pc, #400]	; (800502c <HAL_RCCEx_GetPeriphCLKFreq+0x1f8>)
 8004e9a:	f7fd fa77 	bl	800238c <assert_failed>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	3b01      	subs	r3, #1
 8004ea2:	2b0f      	cmp	r3, #15
 8004ea4:	f200 80b6 	bhi.w	8005014 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8004ea8:	a201      	add	r2, pc, #4	; (adr r2, 8004eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>)
 8004eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eae:	bf00      	nop
 8004eb0:	08004f93 	.word	0x08004f93
 8004eb4:	08004ff9 	.word	0x08004ff9
 8004eb8:	08005015 	.word	0x08005015
 8004ebc:	08004f83 	.word	0x08004f83
 8004ec0:	08005015 	.word	0x08005015
 8004ec4:	08005015 	.word	0x08005015
 8004ec8:	08005015 	.word	0x08005015
 8004ecc:	08004f8b 	.word	0x08004f8b
 8004ed0:	08005015 	.word	0x08005015
 8004ed4:	08005015 	.word	0x08005015
 8004ed8:	08005015 	.word	0x08005015
 8004edc:	08005015 	.word	0x08005015
 8004ee0:	08005015 	.word	0x08005015
 8004ee4:	08005015 	.word	0x08005015
 8004ee8:	08005015 	.word	0x08005015
 8004eec:	08004ef1 	.word	0x08004ef1
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8004ef0:	4b4f      	ldr	r3, [pc, #316]	; (8005030 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	61fb      	str	r3, [r7, #28]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004ef6:	4b4e      	ldr	r3, [pc, #312]	; (8005030 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	f000 808a 	beq.w	8005018 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	0c9b      	lsrs	r3, r3, #18
 8004f08:	f003 030f 	and.w	r3, r3, #15
 8004f0c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004f10:	4413      	add	r3, r2
 8004f12:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004f16:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d018      	beq.n	8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004f22:	4b43      	ldr	r3, [pc, #268]	; (8005030 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	0c5b      	lsrs	r3, r3, #17
 8004f28:	f003 0301 	and.w	r3, r3, #1
 8004f2c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004f30:	4413      	add	r3, r2
 8004f32:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004f36:	627b      	str	r3, [r7, #36]	; 0x24
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004f38:	69fb      	ldr	r3, [r7, #28]
 8004f3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d00d      	beq.n	8004f5e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004f42:	4a3c      	ldr	r2, [pc, #240]	; (8005034 <HAL_RCCEx_GetPeriphCLKFreq+0x200>)
 8004f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f46:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f4a:	6a3b      	ldr	r3, [r7, #32]
 8004f4c:	fb02 f303 	mul.w	r3, r2, r3
 8004f50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f52:	e004      	b.n	8004f5e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004f54:	6a3b      	ldr	r3, [r7, #32]
 8004f56:	4a38      	ldr	r2, [pc, #224]	; (8005038 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 8004f58:	fb02 f303 	mul.w	r3, r2, r3
 8004f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004f5e:	4b34      	ldr	r3, [pc, #208]	; (8005030 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f6a:	d102      	bne.n	8004f72 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8004f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f6e:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8004f70:	e052      	b.n	8005018 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
          frequency = (pllclk * 2) / 3;
 8004f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f74:	005b      	lsls	r3, r3, #1
 8004f76:	4a31      	ldr	r2, [pc, #196]	; (800503c <HAL_RCCEx_GetPeriphCLKFreq+0x208>)
 8004f78:	fba2 2303 	umull	r2, r3, r2, r3
 8004f7c:	085b      	lsrs	r3, r3, #1
 8004f7e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004f80:	e04a      	b.n	8005018 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 8004f82:	f7ff fd91 	bl	8004aa8 <HAL_RCC_GetSysClockFreq>
 8004f86:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8004f88:	e049      	b.n	800501e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 8004f8a:	f7ff fd8d 	bl	8004aa8 <HAL_RCC_GetSysClockFreq>
 8004f8e:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8004f90:	e045      	b.n	800501e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8004f92:	4b27      	ldr	r3, [pc, #156]	; (8005030 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 8004f94:	6a1b      	ldr	r3, [r3, #32]
 8004f96:	61fb      	str	r3, [r7, #28]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004f98:	69fb      	ldr	r3, [r7, #28]
 8004f9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fa2:	d108      	bne.n	8004fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
 8004fa4:	69fb      	ldr	r3, [r7, #28]
 8004fa6:	f003 0302 	and.w	r3, r3, #2
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d003      	beq.n	8004fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
      {
        frequency = LSE_VALUE;
 8004fae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fb2:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fb4:	e01f      	b.n	8004ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004fb6:	69fb      	ldr	r3, [r7, #28]
 8004fb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fc0:	d109      	bne.n	8004fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 8004fc2:	4b1b      	ldr	r3, [pc, #108]	; (8005030 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 8004fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc6:	f003 0302 	and.w	r3, r3, #2
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d003      	beq.n	8004fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
      {
        frequency = LSI_VALUE;
 8004fce:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004fd2:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fd4:	e00f      	b.n	8004ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004fd6:	69fb      	ldr	r3, [r7, #28]
 8004fd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fdc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fe0:	d11c      	bne.n	800501c <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
 8004fe2:	4b13      	ldr	r3, [pc, #76]	; (8005030 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d016      	beq.n	800501c <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
      {
        frequency = HSE_VALUE / 128U;
 8004fee:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004ff2:	62bb      	str	r3, [r7, #40]	; 0x28
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8004ff4:	e012      	b.n	800501c <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
 8004ff6:	e011      	b.n	800501c <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004ff8:	f7ff fdd4 	bl	8004ba4 <HAL_RCC_GetPCLK2Freq>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	4b0c      	ldr	r3, [pc, #48]	; (8005030 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	0b9b      	lsrs	r3, r3, #14
 8005004:	f003 0303 	and.w	r3, r3, #3
 8005008:	3301      	adds	r3, #1
 800500a:	005b      	lsls	r3, r3, #1
 800500c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005010:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8005012:	e004      	b.n	800501e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
    }
    default:
    {
      break;
 8005014:	bf00      	nop
 8005016:	e002      	b.n	800501e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
      break;
 8005018:	bf00      	nop
 800501a:	e000      	b.n	800501e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
      break;
 800501c:	bf00      	nop
    }
  }
  return (frequency);
 800501e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8005020:	4618      	mov	r0, r3
 8005022:	3734      	adds	r7, #52	; 0x34
 8005024:	46bd      	mov	sp, r7
 8005026:	bd90      	pop	{r4, r7, pc}
 8005028:	08010630 	.word	0x08010630
 800502c:	080105f4 	.word	0x080105f4
 8005030:	40021000 	.word	0x40021000
 8005034:	007a1200 	.word	0x007a1200
 8005038:	003d0900 	.word	0x003d0900
 800503c:	aaaaaaab 	.word	0xaaaaaaab

08005040 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b084      	sub	sp, #16
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8005048:	2300      	movs	r3, #0
 800504a:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d101      	bne.n	8005056 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	e0b4      	b.n	80051c0 <HAL_RTC_Init+0x180>
  }

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a5b      	ldr	r2, [pc, #364]	; (80051c8 <HAL_RTC_Init+0x188>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d004      	beq.n	800506a <HAL_RTC_Init+0x2a>
 8005060:	f240 111d 	movw	r1, #285	; 0x11d
 8005064:	4859      	ldr	r0, [pc, #356]	; (80051cc <HAL_RTC_Init+0x18c>)
 8005066:	f7fd f991 	bl	800238c <assert_failed>
  assert_param(IS_RTC_CALIB_OUTPUT(hrtc->Init.OutPut));
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d012      	beq.n	8005098 <HAL_RTC_Init+0x58>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	2b80      	cmp	r3, #128	; 0x80
 8005078:	d00e      	beq.n	8005098 <HAL_RTC_Init+0x58>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005082:	d009      	beq.n	8005098 <HAL_RTC_Init+0x58>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800508c:	d004      	beq.n	8005098 <HAL_RTC_Init+0x58>
 800508e:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8005092:	484e      	ldr	r0, [pc, #312]	; (80051cc <HAL_RTC_Init+0x18c>)
 8005094:	f7fd f97a 	bl	800238c <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050a0:	d309      	bcc.n	80050b6 <HAL_RTC_Init+0x76>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050aa:	d004      	beq.n	80050b6 <HAL_RTC_Init+0x76>
 80050ac:	f240 111f 	movw	r1, #287	; 0x11f
 80050b0:	4846      	ldr	r0, [pc, #280]	; (80051cc <HAL_RTC_Init+0x18c>)
 80050b2:	f7fd f96b 	bl	800238c <assert_failed>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	7c5b      	ldrb	r3, [r3, #17]
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d105      	bne.n	80050cc <HAL_RTC_Init+0x8c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2200      	movs	r2, #0
 80050c4:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f7fd f9e0 	bl	800248c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2202      	movs	r2, #2
 80050d0:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f000 fbca 	bl	800586c <HAL_RTC_WaitForSynchro>
 80050d8:	4603      	mov	r3, r0
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d004      	beq.n	80050e8 <HAL_RTC_Init+0xa8>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2204      	movs	r2, #4
 80050e2:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	e06b      	b.n	80051c0 <HAL_RTC_Init+0x180>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f000 fc83 	bl	80059f4 <RTC_EnterInitMode>
 80050ee:	4603      	mov	r3, r0
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d004      	beq.n	80050fe <HAL_RTC_Init+0xbe>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2204      	movs	r2, #4
 80050f8:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e060      	b.n	80051c0 <HAL_RTC_Init+0x180>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	685a      	ldr	r2, [r3, #4]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f022 0207 	bic.w	r2, r2, #7
 800510c:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d005      	beq.n	8005122 <HAL_RTC_Init+0xe2>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8005116:	4b2e      	ldr	r3, [pc, #184]	; (80051d0 <HAL_RTC_Init+0x190>)
 8005118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800511a:	4a2d      	ldr	r2, [pc, #180]	; (80051d0 <HAL_RTC_Init+0x190>)
 800511c:	f023 0301 	bic.w	r3, r3, #1
 8005120:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8005122:	4b2b      	ldr	r3, [pc, #172]	; (80051d0 <HAL_RTC_Init+0x190>)
 8005124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005126:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	4928      	ldr	r1, [pc, #160]	; (80051d0 <HAL_RTC_Init+0x190>)
 8005130:	4313      	orrs	r3, r2
 8005132:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800513c:	d003      	beq.n	8005146 <HAL_RTC_Init+0x106>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	60fb      	str	r3, [r7, #12]
 8005144:	e00e      	b.n	8005164 <HAL_RTC_Init+0x124>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8005146:	2001      	movs	r0, #1
 8005148:	f7ff fe74 	bl	8004e34 <HAL_RCCEx_GetPeriphCLKFreq>
 800514c:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d104      	bne.n	800515e <HAL_RTC_Init+0x11e>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2204      	movs	r2, #4
 8005158:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e030      	b.n	80051c0 <HAL_RTC_Init+0x180>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	3b01      	subs	r3, #1
 8005162:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	f023 010f 	bic.w	r1, r3, #15
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	0c1a      	lsrs	r2, r3, #16
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	430a      	orrs	r2, r1
 8005178:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	0c1b      	lsrs	r3, r3, #16
 8005182:	041b      	lsls	r3, r3, #16
 8005184:	68fa      	ldr	r2, [r7, #12]
 8005186:	b291      	uxth	r1, r2
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	6812      	ldr	r2, [r2, #0]
 800518c:	430b      	orrs	r3, r1
 800518e:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f000 fc57 	bl	8005a44 <RTC_ExitInitMode>
 8005196:	4603      	mov	r3, r0
 8005198:	2b00      	cmp	r3, #0
 800519a:	d004      	beq.n	80051a6 <HAL_RTC_Init+0x166>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2204      	movs	r2, #4
 80051a0:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e00c      	b.n	80051c0 <HAL_RTC_Init+0x180>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2200      	movs	r2, #0
 80051aa:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2201      	movs	r2, #1
 80051b0:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2201      	movs	r2, #1
 80051b6:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80051be:	2300      	movs	r3, #0
  }
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3710      	adds	r7, #16
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	40002800 	.word	0x40002800
 80051cc:	08010640 	.word	0x08010640
 80051d0:	40006c00 	.word	0x40006c00

080051d4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80051d4:	b590      	push	{r4, r7, lr}
 80051d6:	b087      	sub	sp, #28
 80051d8:	af00      	add	r7, sp, #0
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	60b9      	str	r1, [r7, #8]
 80051de:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 80051e0:	2300      	movs	r3, #0
 80051e2:	617b      	str	r3, [r7, #20]
 80051e4:	2300      	movs	r3, #0
 80051e6:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d002      	beq.n	80051f4 <HAL_RTC_SetTime+0x20>
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d101      	bne.n	80051f8 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	e0cd      	b.n	8005394 <HAL_RTC_SetTime+0x1c0>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d007      	beq.n	800520e <HAL_RTC_SetTime+0x3a>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2b01      	cmp	r3, #1
 8005202:	d004      	beq.n	800520e <HAL_RTC_SetTime+0x3a>
 8005204:	f240 21ca 	movw	r1, #714	; 0x2ca
 8005208:	4864      	ldr	r0, [pc, #400]	; (800539c <HAL_RTC_SetTime+0x1c8>)
 800520a:	f7fd f8bf 	bl	800238c <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	7c1b      	ldrb	r3, [r3, #16]
 8005212:	2b01      	cmp	r3, #1
 8005214:	d101      	bne.n	800521a <HAL_RTC_SetTime+0x46>
 8005216:	2302      	movs	r3, #2
 8005218:	e0bc      	b.n	8005394 <HAL_RTC_SetTime+0x1c0>
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2201      	movs	r2, #1
 800521e:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2202      	movs	r2, #2
 8005224:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d12e      	bne.n	800528a <HAL_RTC_SetTime+0xb6>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	781b      	ldrb	r3, [r3, #0]
 8005230:	2b17      	cmp	r3, #23
 8005232:	d904      	bls.n	800523e <HAL_RTC_SetTime+0x6a>
 8005234:	f240 21d3 	movw	r1, #723	; 0x2d3
 8005238:	4858      	ldr	r0, [pc, #352]	; (800539c <HAL_RTC_SetTime+0x1c8>)
 800523a:	f7fd f8a7 	bl	800238c <assert_failed>
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	785b      	ldrb	r3, [r3, #1]
 8005242:	2b3b      	cmp	r3, #59	; 0x3b
 8005244:	d904      	bls.n	8005250 <HAL_RTC_SetTime+0x7c>
 8005246:	f44f 7135 	mov.w	r1, #724	; 0x2d4
 800524a:	4854      	ldr	r0, [pc, #336]	; (800539c <HAL_RTC_SetTime+0x1c8>)
 800524c:	f7fd f89e 	bl	800238c <assert_failed>
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	789b      	ldrb	r3, [r3, #2]
 8005254:	2b3b      	cmp	r3, #59	; 0x3b
 8005256:	d904      	bls.n	8005262 <HAL_RTC_SetTime+0x8e>
 8005258:	f240 21d5 	movw	r1, #725	; 0x2d5
 800525c:	484f      	ldr	r0, [pc, #316]	; (800539c <HAL_RTC_SetTime+0x1c8>)
 800525e:	f7fd f895 	bl	800238c <assert_failed>

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	781b      	ldrb	r3, [r3, #0]
 8005266:	461a      	mov	r2, r3
 8005268:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800526c:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	785b      	ldrb	r3, [r3, #1]
 8005274:	4619      	mov	r1, r3
 8005276:	460b      	mov	r3, r1
 8005278:	011b      	lsls	r3, r3, #4
 800527a:	1a5b      	subs	r3, r3, r1
 800527c:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800527e:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8005280:	68ba      	ldr	r2, [r7, #8]
 8005282:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8005284:	4413      	add	r3, r2
 8005286:	617b      	str	r3, [r7, #20]
 8005288:	e045      	b.n	8005316 <HAL_RTC_SetTime+0x142>
  }
  else
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	781b      	ldrb	r3, [r3, #0]
 800528e:	4618      	mov	r0, r3
 8005290:	f000 fc1d 	bl	8005ace <RTC_Bcd2ToByte>
 8005294:	4603      	mov	r3, r0
 8005296:	2b17      	cmp	r3, #23
 8005298:	d904      	bls.n	80052a4 <HAL_RTC_SetTime+0xd0>
 800529a:	f240 21dd 	movw	r1, #733	; 0x2dd
 800529e:	483f      	ldr	r0, [pc, #252]	; (800539c <HAL_RTC_SetTime+0x1c8>)
 80052a0:	f7fd f874 	bl	800238c <assert_failed>
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	785b      	ldrb	r3, [r3, #1]
 80052a8:	4618      	mov	r0, r3
 80052aa:	f000 fc10 	bl	8005ace <RTC_Bcd2ToByte>
 80052ae:	4603      	mov	r3, r0
 80052b0:	2b3b      	cmp	r3, #59	; 0x3b
 80052b2:	d904      	bls.n	80052be <HAL_RTC_SetTime+0xea>
 80052b4:	f240 21de 	movw	r1, #734	; 0x2de
 80052b8:	4838      	ldr	r0, [pc, #224]	; (800539c <HAL_RTC_SetTime+0x1c8>)
 80052ba:	f7fd f867 	bl	800238c <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	789b      	ldrb	r3, [r3, #2]
 80052c2:	4618      	mov	r0, r3
 80052c4:	f000 fc03 	bl	8005ace <RTC_Bcd2ToByte>
 80052c8:	4603      	mov	r3, r0
 80052ca:	2b3b      	cmp	r3, #59	; 0x3b
 80052cc:	d904      	bls.n	80052d8 <HAL_RTC_SetTime+0x104>
 80052ce:	f240 21df 	movw	r1, #735	; 0x2df
 80052d2:	4832      	ldr	r0, [pc, #200]	; (800539c <HAL_RTC_SetTime+0x1c8>)
 80052d4:	f7fd f85a 	bl	800238c <assert_failed>

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	781b      	ldrb	r3, [r3, #0]
 80052dc:	4618      	mov	r0, r3
 80052de:	f000 fbf6 	bl	8005ace <RTC_Bcd2ToByte>
 80052e2:	4603      	mov	r3, r0
 80052e4:	461a      	mov	r2, r3
 80052e6:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80052ea:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	785b      	ldrb	r3, [r3, #1]
 80052f2:	4618      	mov	r0, r3
 80052f4:	f000 fbeb 	bl	8005ace <RTC_Bcd2ToByte>
 80052f8:	4603      	mov	r3, r0
 80052fa:	461a      	mov	r2, r3
 80052fc:	4613      	mov	r3, r2
 80052fe:	011b      	lsls	r3, r3, #4
 8005300:	1a9b      	subs	r3, r3, r2
 8005302:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8005304:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	789b      	ldrb	r3, [r3, #2]
 800530a:	4618      	mov	r0, r3
 800530c:	f000 fbdf 	bl	8005ace <RTC_Bcd2ToByte>
 8005310:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8005312:	4423      	add	r3, r4
 8005314:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8005316:	6979      	ldr	r1, [r7, #20]
 8005318:	68f8      	ldr	r0, [r7, #12]
 800531a:	f000 fb04 	bl	8005926 <RTC_WriteTimeCounter>
 800531e:	4603      	mov	r3, r0
 8005320:	2b00      	cmp	r3, #0
 8005322:	d007      	beq.n	8005334 <HAL_RTC_SetTime+0x160>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2204      	movs	r2, #4
 8005328:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2200      	movs	r2, #0
 800532e:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	e02f      	b.n	8005394 <HAL_RTC_SetTime+0x1c0>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	685a      	ldr	r2, [r3, #4]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f022 0205 	bic.w	r2, r2, #5
 8005342:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8005344:	68f8      	ldr	r0, [r7, #12]
 8005346:	f000 fb15 	bl	8005974 <RTC_ReadAlarmCounter>
 800534a:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005352:	d018      	beq.n	8005386 <HAL_RTC_SetTime+0x1b2>
    {
      if (counter_alarm < counter_time)
 8005354:	693a      	ldr	r2, [r7, #16]
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	429a      	cmp	r2, r3
 800535a:	d214      	bcs.n	8005386 <HAL_RTC_SetTime+0x1b2>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8005362:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005366:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005368:	6939      	ldr	r1, [r7, #16]
 800536a:	68f8      	ldr	r0, [r7, #12]
 800536c:	f000 fb1b 	bl	80059a6 <RTC_WriteAlarmCounter>
 8005370:	4603      	mov	r3, r0
 8005372:	2b00      	cmp	r3, #0
 8005374:	d007      	beq.n	8005386 <HAL_RTC_SetTime+0x1b2>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2204      	movs	r2, #4
 800537a:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2200      	movs	r2, #0
 8005380:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	e006      	b.n	8005394 <HAL_RTC_SetTime+0x1c0>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2201      	movs	r2, #1
 800538a:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2200      	movs	r2, #0
 8005390:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8005392:	2300      	movs	r3, #0
  }
}
 8005394:	4618      	mov	r0, r3
 8005396:	371c      	adds	r7, #28
 8005398:	46bd      	mov	sp, r7
 800539a:	bd90      	pop	{r4, r7, pc}
 800539c:	08010640 	.word	0x08010640

080053a0 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b088      	sub	sp, #32
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	60b9      	str	r1, [r7, #8]
 80053aa:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 80053ac:	2300      	movs	r3, #0
 80053ae:	61bb      	str	r3, [r7, #24]
 80053b0:	2300      	movs	r3, #0
 80053b2:	61fb      	str	r3, [r7, #28]
 80053b4:	2300      	movs	r3, #0
 80053b6:	617b      	str	r3, [r7, #20]
 80053b8:	2300      	movs	r3, #0
 80053ba:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d002      	beq.n	80053c8 <HAL_RTC_GetTime+0x28>
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d101      	bne.n	80053cc <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	e0c0      	b.n	800554e <HAL_RTC_GetTime+0x1ae>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d007      	beq.n	80053e2 <HAL_RTC_GetTime+0x42>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d004      	beq.n	80053e2 <HAL_RTC_GetTime+0x42>
 80053d8:	f240 312d 	movw	r1, #813	; 0x32d
 80053dc:	485e      	ldr	r0, [pc, #376]	; (8005558 <HAL_RTC_GetTime+0x1b8>)
 80053de:	f7fc ffd5 	bl	800238c <assert_failed>

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	f003 0304 	and.w	r3, r3, #4
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d001      	beq.n	80053f4 <HAL_RTC_GetTime+0x54>
  {
    return HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	e0ac      	b.n	800554e <HAL_RTC_GetTime+0x1ae>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80053f4:	68f8      	ldr	r0, [r7, #12]
 80053f6:	f000 fa66 	bl	80058c6 <RTC_ReadTimeCounter>
 80053fa:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80053fc:	69bb      	ldr	r3, [r7, #24]
 80053fe:	4a57      	ldr	r2, [pc, #348]	; (800555c <HAL_RTC_GetTime+0x1bc>)
 8005400:	fba2 2303 	umull	r2, r3, r2, r3
 8005404:	0adb      	lsrs	r3, r3, #11
 8005406:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8005408:	69ba      	ldr	r2, [r7, #24]
 800540a:	4b54      	ldr	r3, [pc, #336]	; (800555c <HAL_RTC_GetTime+0x1bc>)
 800540c:	fba3 1302 	umull	r1, r3, r3, r2
 8005410:	0adb      	lsrs	r3, r3, #11
 8005412:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8005416:	fb01 f303 	mul.w	r3, r1, r3
 800541a:	1ad3      	subs	r3, r2, r3
 800541c:	4a50      	ldr	r2, [pc, #320]	; (8005560 <HAL_RTC_GetTime+0x1c0>)
 800541e:	fba2 2303 	umull	r2, r3, r2, r3
 8005422:	095b      	lsrs	r3, r3, #5
 8005424:	b2da      	uxtb	r2, r3
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 800542a:	69bb      	ldr	r3, [r7, #24]
 800542c:	4a4b      	ldr	r2, [pc, #300]	; (800555c <HAL_RTC_GetTime+0x1bc>)
 800542e:	fba2 1203 	umull	r1, r2, r2, r3
 8005432:	0ad2      	lsrs	r2, r2, #11
 8005434:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8005438:	fb01 f202 	mul.w	r2, r1, r2
 800543c:	1a9a      	subs	r2, r3, r2
 800543e:	4b48      	ldr	r3, [pc, #288]	; (8005560 <HAL_RTC_GetTime+0x1c0>)
 8005440:	fba3 1302 	umull	r1, r3, r3, r2
 8005444:	0959      	lsrs	r1, r3, #5
 8005446:	460b      	mov	r3, r1
 8005448:	011b      	lsls	r3, r3, #4
 800544a:	1a5b      	subs	r3, r3, r1
 800544c:	009b      	lsls	r3, r3, #2
 800544e:	1ad1      	subs	r1, r2, r3
 8005450:	b2ca      	uxtb	r2, r1
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	2b17      	cmp	r3, #23
 800545a:	d955      	bls.n	8005508 <HAL_RTC_GetTime+0x168>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	4a41      	ldr	r2, [pc, #260]	; (8005564 <HAL_RTC_GetTime+0x1c4>)
 8005460:	fba2 2303 	umull	r2, r3, r2, r3
 8005464:	091b      	lsrs	r3, r3, #4
 8005466:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8005468:	6939      	ldr	r1, [r7, #16]
 800546a:	4b3e      	ldr	r3, [pc, #248]	; (8005564 <HAL_RTC_GetTime+0x1c4>)
 800546c:	fba3 2301 	umull	r2, r3, r3, r1
 8005470:	091a      	lsrs	r2, r3, #4
 8005472:	4613      	mov	r3, r2
 8005474:	005b      	lsls	r3, r3, #1
 8005476:	4413      	add	r3, r2
 8005478:	00db      	lsls	r3, r3, #3
 800547a:	1aca      	subs	r2, r1, r3
 800547c:	b2d2      	uxtb	r2, r2
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8005482:	68f8      	ldr	r0, [r7, #12]
 8005484:	f000 fa76 	bl	8005974 <RTC_ReadAlarmCounter>
 8005488:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 800548a:	69fb      	ldr	r3, [r7, #28]
 800548c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005490:	d008      	beq.n	80054a4 <HAL_RTC_GetTime+0x104>
 8005492:	69fa      	ldr	r2, [r7, #28]
 8005494:	69bb      	ldr	r3, [r7, #24]
 8005496:	429a      	cmp	r2, r3
 8005498:	d904      	bls.n	80054a4 <HAL_RTC_GetTime+0x104>
    {
      counter_alarm -= counter_time;
 800549a:	69fa      	ldr	r2, [r7, #28]
 800549c:	69bb      	ldr	r3, [r7, #24]
 800549e:	1ad3      	subs	r3, r2, r3
 80054a0:	61fb      	str	r3, [r7, #28]
 80054a2:	e002      	b.n	80054aa <HAL_RTC_GetTime+0x10a>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 80054a4:	f04f 33ff 	mov.w	r3, #4294967295
 80054a8:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	4a2e      	ldr	r2, [pc, #184]	; (8005568 <HAL_RTC_GetTime+0x1c8>)
 80054ae:	fb02 f303 	mul.w	r3, r2, r3
 80054b2:	69ba      	ldr	r2, [r7, #24]
 80054b4:	1ad3      	subs	r3, r2, r3
 80054b6:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80054b8:	69b9      	ldr	r1, [r7, #24]
 80054ba:	68f8      	ldr	r0, [r7, #12]
 80054bc:	f000 fa33 	bl	8005926 <RTC_WriteTimeCounter>
 80054c0:	4603      	mov	r3, r0
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d001      	beq.n	80054ca <HAL_RTC_GetTime+0x12a>
    {
      return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e041      	b.n	800554e <HAL_RTC_GetTime+0x1ae>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80054ca:	69fb      	ldr	r3, [r7, #28]
 80054cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054d0:	d00c      	beq.n	80054ec <HAL_RTC_GetTime+0x14c>
    {
      counter_alarm += counter_time;
 80054d2:	69fa      	ldr	r2, [r7, #28]
 80054d4:	69bb      	ldr	r3, [r7, #24]
 80054d6:	4413      	add	r3, r2
 80054d8:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80054da:	69f9      	ldr	r1, [r7, #28]
 80054dc:	68f8      	ldr	r0, [r7, #12]
 80054de:	f000 fa62 	bl	80059a6 <RTC_WriteAlarmCounter>
 80054e2:	4603      	mov	r3, r0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d00a      	beq.n	80054fe <HAL_RTC_GetTime+0x15e>
      {
        return HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	e030      	b.n	800554e <HAL_RTC_GetTime+0x1ae>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80054ec:	69f9      	ldr	r1, [r7, #28]
 80054ee:	68f8      	ldr	r0, [r7, #12]
 80054f0:	f000 fa59 	bl	80059a6 <RTC_WriteAlarmCounter>
 80054f4:	4603      	mov	r3, r0
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d001      	beq.n	80054fe <HAL_RTC_GetTime+0x15e>
      {
        return HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	e027      	b.n	800554e <HAL_RTC_GetTime+0x1ae>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 80054fe:	6979      	ldr	r1, [r7, #20]
 8005500:	68f8      	ldr	r0, [r7, #12]
 8005502:	f000 fb01 	bl	8005b08 <RTC_DateUpdate>
 8005506:	e003      	b.n	8005510 <HAL_RTC_GetTime+0x170>
  }
  else
  {
    sTime->Hours = hours;
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	b2da      	uxtb	r2, r3
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d01a      	beq.n	800554c <HAL_RTC_GetTime+0x1ac>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	781b      	ldrb	r3, [r3, #0]
 800551a:	4618      	mov	r0, r3
 800551c:	f000 faba 	bl	8005a94 <RTC_ByteToBcd2>
 8005520:	4603      	mov	r3, r0
 8005522:	461a      	mov	r2, r3
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	785b      	ldrb	r3, [r3, #1]
 800552c:	4618      	mov	r0, r3
 800552e:	f000 fab1 	bl	8005a94 <RTC_ByteToBcd2>
 8005532:	4603      	mov	r3, r0
 8005534:	461a      	mov	r2, r3
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	789b      	ldrb	r3, [r3, #2]
 800553e:	4618      	mov	r0, r3
 8005540:	f000 faa8 	bl	8005a94 <RTC_ByteToBcd2>
 8005544:	4603      	mov	r3, r0
 8005546:	461a      	mov	r2, r3
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800554c:	2300      	movs	r3, #0
}
 800554e:	4618      	mov	r0, r3
 8005550:	3720      	adds	r7, #32
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop
 8005558:	08010640 	.word	0x08010640
 800555c:	91a2b3c5 	.word	0x91a2b3c5
 8005560:	88888889 	.word	0x88888889
 8005564:	aaaaaaab 	.word	0xaaaaaaab
 8005568:	00015180 	.word	0x00015180

0800556c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b088      	sub	sp, #32
 8005570:	af00      	add	r7, sp, #0
 8005572:	60f8      	str	r0, [r7, #12]
 8005574:	60b9      	str	r1, [r7, #8]
 8005576:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8005578:	2300      	movs	r3, #0
 800557a:	61fb      	str	r3, [r7, #28]
 800557c:	2300      	movs	r3, #0
 800557e:	61bb      	str	r3, [r7, #24]
 8005580:	2300      	movs	r3, #0
 8005582:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d002      	beq.n	8005590 <HAL_RTC_SetDate+0x24>
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d101      	bne.n	8005594 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	e0fc      	b.n	800578e <HAL_RTC_SetDate+0x222>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d007      	beq.n	80055aa <HAL_RTC_SetDate+0x3e>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2b01      	cmp	r3, #1
 800559e:	d004      	beq.n	80055aa <HAL_RTC_SetDate+0x3e>
 80055a0:	f44f 7167 	mov.w	r1, #924	; 0x39c
 80055a4:	487c      	ldr	r0, [pc, #496]	; (8005798 <HAL_RTC_SetDate+0x22c>)
 80055a6:	f7fc fef1 	bl	800238c <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	7c1b      	ldrb	r3, [r3, #16]
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d101      	bne.n	80055b6 <HAL_RTC_SetDate+0x4a>
 80055b2:	2302      	movs	r3, #2
 80055b4:	e0eb      	b.n	800578e <HAL_RTC_SetDate+0x222>
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2201      	movs	r2, #1
 80055ba:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2202      	movs	r2, #2
 80055c0:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d12f      	bne.n	8005628 <HAL_RTC_SetDate+0xbc>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	78db      	ldrb	r3, [r3, #3]
 80055cc:	2b63      	cmp	r3, #99	; 0x63
 80055ce:	d904      	bls.n	80055da <HAL_RTC_SetDate+0x6e>
 80055d0:	f240 31a5 	movw	r1, #933	; 0x3a5
 80055d4:	4870      	ldr	r0, [pc, #448]	; (8005798 <HAL_RTC_SetDate+0x22c>)
 80055d6:	f7fc fed9 	bl	800238c <assert_failed>
    assert_param(IS_RTC_MONTH(sDate->Month));
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	785b      	ldrb	r3, [r3, #1]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d003      	beq.n	80055ea <HAL_RTC_SetDate+0x7e>
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	785b      	ldrb	r3, [r3, #1]
 80055e6:	2b0c      	cmp	r3, #12
 80055e8:	d904      	bls.n	80055f4 <HAL_RTC_SetDate+0x88>
 80055ea:	f240 31a6 	movw	r1, #934	; 0x3a6
 80055ee:	486a      	ldr	r0, [pc, #424]	; (8005798 <HAL_RTC_SetDate+0x22c>)
 80055f0:	f7fc fecc 	bl	800238c <assert_failed>
    assert_param(IS_RTC_DATE(sDate->Date));
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	789b      	ldrb	r3, [r3, #2]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d003      	beq.n	8005604 <HAL_RTC_SetDate+0x98>
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	789b      	ldrb	r3, [r3, #2]
 8005600:	2b1f      	cmp	r3, #31
 8005602:	d904      	bls.n	800560e <HAL_RTC_SetDate+0xa2>
 8005604:	f240 31a7 	movw	r1, #935	; 0x3a7
 8005608:	4863      	ldr	r0, [pc, #396]	; (8005798 <HAL_RTC_SetDate+0x22c>)
 800560a:	f7fc febf 	bl	800238c <assert_failed>

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	78da      	ldrb	r2, [r3, #3]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	785a      	ldrb	r2, [r3, #1]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	789a      	ldrb	r2, [r3, #2]
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	739a      	strb	r2, [r3, #14]
 8005626:	e051      	b.n	80056cc <HAL_RTC_SetDate+0x160>
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	78db      	ldrb	r3, [r3, #3]
 800562c:	4618      	mov	r0, r3
 800562e:	f000 fa4e 	bl	8005ace <RTC_Bcd2ToByte>
 8005632:	4603      	mov	r3, r0
 8005634:	2b63      	cmp	r3, #99	; 0x63
 8005636:	d904      	bls.n	8005642 <HAL_RTC_SetDate+0xd6>
 8005638:	f44f 716c 	mov.w	r1, #944	; 0x3b0
 800563c:	4856      	ldr	r0, [pc, #344]	; (8005798 <HAL_RTC_SetDate+0x22c>)
 800563e:	f7fc fea5 	bl	800238c <assert_failed>
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	785b      	ldrb	r3, [r3, #1]
 8005646:	4618      	mov	r0, r3
 8005648:	f000 fa41 	bl	8005ace <RTC_Bcd2ToByte>
 800564c:	4603      	mov	r3, r0
 800564e:	2b00      	cmp	r3, #0
 8005650:	d007      	beq.n	8005662 <HAL_RTC_SetDate+0xf6>
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	785b      	ldrb	r3, [r3, #1]
 8005656:	4618      	mov	r0, r3
 8005658:	f000 fa39 	bl	8005ace <RTC_Bcd2ToByte>
 800565c:	4603      	mov	r3, r0
 800565e:	2b0c      	cmp	r3, #12
 8005660:	d904      	bls.n	800566c <HAL_RTC_SetDate+0x100>
 8005662:	f240 31b1 	movw	r1, #945	; 0x3b1
 8005666:	484c      	ldr	r0, [pc, #304]	; (8005798 <HAL_RTC_SetDate+0x22c>)
 8005668:	f7fc fe90 	bl	800238c <assert_failed>
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	789b      	ldrb	r3, [r3, #2]
 8005670:	4618      	mov	r0, r3
 8005672:	f000 fa2c 	bl	8005ace <RTC_Bcd2ToByte>
 8005676:	4603      	mov	r3, r0
 8005678:	2b00      	cmp	r3, #0
 800567a:	d007      	beq.n	800568c <HAL_RTC_SetDate+0x120>
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	789b      	ldrb	r3, [r3, #2]
 8005680:	4618      	mov	r0, r3
 8005682:	f000 fa24 	bl	8005ace <RTC_Bcd2ToByte>
 8005686:	4603      	mov	r3, r0
 8005688:	2b1f      	cmp	r3, #31
 800568a:	d904      	bls.n	8005696 <HAL_RTC_SetDate+0x12a>
 800568c:	f240 31b2 	movw	r1, #946	; 0x3b2
 8005690:	4841      	ldr	r0, [pc, #260]	; (8005798 <HAL_RTC_SetDate+0x22c>)
 8005692:	f7fc fe7b 	bl	800238c <assert_failed>

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	78db      	ldrb	r3, [r3, #3]
 800569a:	4618      	mov	r0, r3
 800569c:	f000 fa17 	bl	8005ace <RTC_Bcd2ToByte>
 80056a0:	4603      	mov	r3, r0
 80056a2:	461a      	mov	r2, r3
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	785b      	ldrb	r3, [r3, #1]
 80056ac:	4618      	mov	r0, r3
 80056ae:	f000 fa0e 	bl	8005ace <RTC_Bcd2ToByte>
 80056b2:	4603      	mov	r3, r0
 80056b4:	461a      	mov	r2, r3
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	789b      	ldrb	r3, [r3, #2]
 80056be:	4618      	mov	r0, r3
 80056c0:	f000 fa05 	bl	8005ace <RTC_Bcd2ToByte>
 80056c4:	4603      	mov	r3, r0
 80056c6:	461a      	mov	r2, r3
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	7bdb      	ldrb	r3, [r3, #15]
 80056d0:	4618      	mov	r0, r3
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	7b59      	ldrb	r1, [r3, #13]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	7b9b      	ldrb	r3, [r3, #14]
 80056da:	461a      	mov	r2, r3
 80056dc:	f000 faf0 	bl	8005cc0 <RTC_WeekDayNum>
 80056e0:	4603      	mov	r3, r0
 80056e2:	461a      	mov	r2, r3
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	7b1a      	ldrb	r2, [r3, #12]
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80056f0:	68f8      	ldr	r0, [r7, #12]
 80056f2:	f000 f8e8 	bl	80058c6 <RTC_ReadTimeCounter>
 80056f6:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80056f8:	69fb      	ldr	r3, [r7, #28]
 80056fa:	4a28      	ldr	r2, [pc, #160]	; (800579c <HAL_RTC_SetDate+0x230>)
 80056fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005700:	0adb      	lsrs	r3, r3, #11
 8005702:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	2b18      	cmp	r3, #24
 8005708:	d93a      	bls.n	8005780 <HAL_RTC_SetDate+0x214>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	4a24      	ldr	r2, [pc, #144]	; (80057a0 <HAL_RTC_SetDate+0x234>)
 800570e:	fba2 2303 	umull	r2, r3, r2, r3
 8005712:	091b      	lsrs	r3, r3, #4
 8005714:	4a23      	ldr	r2, [pc, #140]	; (80057a4 <HAL_RTC_SetDate+0x238>)
 8005716:	fb02 f303 	mul.w	r3, r2, r3
 800571a:	69fa      	ldr	r2, [r7, #28]
 800571c:	1ad3      	subs	r3, r2, r3
 800571e:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8005720:	69f9      	ldr	r1, [r7, #28]
 8005722:	68f8      	ldr	r0, [r7, #12]
 8005724:	f000 f8ff 	bl	8005926 <RTC_WriteTimeCounter>
 8005728:	4603      	mov	r3, r0
 800572a:	2b00      	cmp	r3, #0
 800572c:	d007      	beq.n	800573e <HAL_RTC_SetDate+0x1d2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2204      	movs	r2, #4
 8005732:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2200      	movs	r2, #0
 8005738:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	e027      	b.n	800578e <HAL_RTC_SetDate+0x222>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800573e:	68f8      	ldr	r0, [r7, #12]
 8005740:	f000 f918 	bl	8005974 <RTC_ReadAlarmCounter>
 8005744:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8005746:	69bb      	ldr	r3, [r7, #24]
 8005748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800574c:	d018      	beq.n	8005780 <HAL_RTC_SetDate+0x214>
    {
      if (counter_alarm < counter_time)
 800574e:	69ba      	ldr	r2, [r7, #24]
 8005750:	69fb      	ldr	r3, [r7, #28]
 8005752:	429a      	cmp	r2, r3
 8005754:	d214      	bcs.n	8005780 <HAL_RTC_SetDate+0x214>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8005756:	69bb      	ldr	r3, [r7, #24]
 8005758:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 800575c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005760:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005762:	69b9      	ldr	r1, [r7, #24]
 8005764:	68f8      	ldr	r0, [r7, #12]
 8005766:	f000 f91e 	bl	80059a6 <RTC_WriteAlarmCounter>
 800576a:	4603      	mov	r3, r0
 800576c:	2b00      	cmp	r3, #0
 800576e:	d007      	beq.n	8005780 <HAL_RTC_SetDate+0x214>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2204      	movs	r2, #4
 8005774:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2200      	movs	r2, #0
 800577a:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	e006      	b.n	800578e <HAL_RTC_SetDate+0x222>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2201      	movs	r2, #1
 8005784:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2200      	movs	r2, #0
 800578a:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800578c:	2300      	movs	r3, #0
}
 800578e:	4618      	mov	r0, r3
 8005790:	3720      	adds	r7, #32
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}
 8005796:	bf00      	nop
 8005798:	08010640 	.word	0x08010640
 800579c:	91a2b3c5 	.word	0x91a2b3c5
 80057a0:	aaaaaaab 	.word	0xaaaaaaab
 80057a4:	00015180 	.word	0x00015180

080057a8 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b086      	sub	sp, #24
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	60f8      	str	r0, [r7, #12]
 80057b0:	60b9      	str	r1, [r7, #8]
 80057b2:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 80057b4:	f107 0314 	add.w	r3, r7, #20
 80057b8:	2100      	movs	r1, #0
 80057ba:	460a      	mov	r2, r1
 80057bc:	801a      	strh	r2, [r3, #0]
 80057be:	460a      	mov	r2, r1
 80057c0:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d002      	beq.n	80057ce <HAL_RTC_GetDate+0x26>
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d101      	bne.n	80057d2 <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	e045      	b.n	800585e <HAL_RTC_GetDate+0xb6>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d007      	beq.n	80057e8 <HAL_RTC_GetDate+0x40>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d004      	beq.n	80057e8 <HAL_RTC_GetDate+0x40>
 80057de:	f240 410e 	movw	r1, #1038	; 0x40e
 80057e2:	4821      	ldr	r0, [pc, #132]	; (8005868 <HAL_RTC_GetDate+0xc0>)
 80057e4:	f7fc fdd2 	bl	800238c <assert_failed>

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 80057e8:	f107 0314 	add.w	r3, r7, #20
 80057ec:	2200      	movs	r2, #0
 80057ee:	4619      	mov	r1, r3
 80057f0:	68f8      	ldr	r0, [r7, #12]
 80057f2:	f7ff fdd5 	bl	80053a0 <HAL_RTC_GetTime>
 80057f6:	4603      	mov	r3, r0
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d001      	beq.n	8005800 <HAL_RTC_GetDate+0x58>
  {
    return HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	e02e      	b.n	800585e <HAL_RTC_GetDate+0xb6>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	7b1a      	ldrb	r2, [r3, #12]
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	7bda      	ldrb	r2, [r3, #15]
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	7b5a      	ldrb	r2, [r3, #13]
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	7b9a      	ldrb	r2, [r3, #14]
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d01a      	beq.n	800585c <HAL_RTC_GetDate+0xb4>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	78db      	ldrb	r3, [r3, #3]
 800582a:	4618      	mov	r0, r3
 800582c:	f000 f932 	bl	8005a94 <RTC_ByteToBcd2>
 8005830:	4603      	mov	r3, r0
 8005832:	461a      	mov	r2, r3
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	785b      	ldrb	r3, [r3, #1]
 800583c:	4618      	mov	r0, r3
 800583e:	f000 f929 	bl	8005a94 <RTC_ByteToBcd2>
 8005842:	4603      	mov	r3, r0
 8005844:	461a      	mov	r2, r3
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	789b      	ldrb	r3, [r3, #2]
 800584e:	4618      	mov	r0, r3
 8005850:	f000 f920 	bl	8005a94 <RTC_ByteToBcd2>
 8005854:	4603      	mov	r3, r0
 8005856:	461a      	mov	r2, r3
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800585c:	2300      	movs	r3, #0
}
 800585e:	4618      	mov	r0, r3
 8005860:	3718      	adds	r7, #24
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}
 8005866:	bf00      	nop
 8005868:	08010640 	.word	0x08010640

0800586c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b084      	sub	sp, #16
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005874:	2300      	movs	r3, #0
 8005876:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d101      	bne.n	8005882 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	e01d      	b.n	80058be <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	685a      	ldr	r2, [r3, #4]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f022 0208 	bic.w	r2, r2, #8
 8005890:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8005892:	f7fd fa4b 	bl	8002d2c <HAL_GetTick>
 8005896:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8005898:	e009      	b.n	80058ae <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800589a:	f7fd fa47 	bl	8002d2c <HAL_GetTick>
 800589e:	4602      	mov	r2, r0
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	1ad3      	subs	r3, r2, r3
 80058a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80058a8:	d901      	bls.n	80058ae <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 80058aa:	2303      	movs	r3, #3
 80058ac:	e007      	b.n	80058be <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	f003 0308 	and.w	r3, r3, #8
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d0ee      	beq.n	800589a <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80058bc:	2300      	movs	r3, #0
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3710      	adds	r7, #16
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}

080058c6 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 80058c6:	b480      	push	{r7}
 80058c8:	b087      	sub	sp, #28
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 80058ce:	2300      	movs	r3, #0
 80058d0:	827b      	strh	r3, [r7, #18]
 80058d2:	2300      	movs	r3, #0
 80058d4:	823b      	strh	r3, [r7, #16]
 80058d6:	2300      	movs	r3, #0
 80058d8:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 80058da:	2300      	movs	r3, #0
 80058dc:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	699b      	ldr	r3, [r3, #24]
 80058e4:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	69db      	ldr	r3, [r3, #28]
 80058ec:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	699b      	ldr	r3, [r3, #24]
 80058f4:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 80058f6:	8a7a      	ldrh	r2, [r7, #18]
 80058f8:	8a3b      	ldrh	r3, [r7, #16]
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d008      	beq.n	8005910 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80058fe:	8a3b      	ldrh	r3, [r7, #16]
 8005900:	041a      	lsls	r2, r3, #16
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	69db      	ldr	r3, [r3, #28]
 8005908:	b29b      	uxth	r3, r3
 800590a:	4313      	orrs	r3, r2
 800590c:	617b      	str	r3, [r7, #20]
 800590e:	e004      	b.n	800591a <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8005910:	8a7b      	ldrh	r3, [r7, #18]
 8005912:	041a      	lsls	r2, r3, #16
 8005914:	89fb      	ldrh	r3, [r7, #14]
 8005916:	4313      	orrs	r3, r2
 8005918:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 800591a:	697b      	ldr	r3, [r7, #20]
}
 800591c:	4618      	mov	r0, r3
 800591e:	371c      	adds	r7, #28
 8005920:	46bd      	mov	sp, r7
 8005922:	bc80      	pop	{r7}
 8005924:	4770      	bx	lr

08005926 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8005926:	b580      	push	{r7, lr}
 8005928:	b084      	sub	sp, #16
 800592a:	af00      	add	r7, sp, #0
 800592c:	6078      	str	r0, [r7, #4]
 800592e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005930:	2300      	movs	r3, #0
 8005932:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f000 f85d 	bl	80059f4 <RTC_EnterInitMode>
 800593a:	4603      	mov	r3, r0
 800593c:	2b00      	cmp	r3, #0
 800593e:	d002      	beq.n	8005946 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8005940:	2301      	movs	r3, #1
 8005942:	73fb      	strb	r3, [r7, #15]
 8005944:	e011      	b.n	800596a <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	683a      	ldr	r2, [r7, #0]
 800594c:	0c12      	lsrs	r2, r2, #16
 800594e:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	683a      	ldr	r2, [r7, #0]
 8005956:	b292      	uxth	r2, r2
 8005958:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f000 f872 	bl	8005a44 <RTC_ExitInitMode>
 8005960:	4603      	mov	r3, r0
 8005962:	2b00      	cmp	r3, #0
 8005964:	d001      	beq.n	800596a <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800596a:	7bfb      	ldrb	r3, [r7, #15]
}
 800596c:	4618      	mov	r0, r3
 800596e:	3710      	adds	r7, #16
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}

08005974 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8005974:	b480      	push	{r7}
 8005976:	b085      	sub	sp, #20
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 800597c:	2300      	movs	r3, #0
 800597e:	81fb      	strh	r3, [r7, #14]
 8005980:	2300      	movs	r3, #0
 8005982:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	6a1b      	ldr	r3, [r3, #32]
 800598a:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005992:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8005994:	89fb      	ldrh	r3, [r7, #14]
 8005996:	041a      	lsls	r2, r3, #16
 8005998:	89bb      	ldrh	r3, [r7, #12]
 800599a:	4313      	orrs	r3, r2
}
 800599c:	4618      	mov	r0, r3
 800599e:	3714      	adds	r7, #20
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bc80      	pop	{r7}
 80059a4:	4770      	bx	lr

080059a6 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 80059a6:	b580      	push	{r7, lr}
 80059a8:	b084      	sub	sp, #16
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	6078      	str	r0, [r7, #4]
 80059ae:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80059b0:	2300      	movs	r3, #0
 80059b2:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f000 f81d 	bl	80059f4 <RTC_EnterInitMode>
 80059ba:	4603      	mov	r3, r0
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d002      	beq.n	80059c6 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	73fb      	strb	r3, [r7, #15]
 80059c4:	e011      	b.n	80059ea <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	683a      	ldr	r2, [r7, #0]
 80059cc:	0c12      	lsrs	r2, r2, #16
 80059ce:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	683a      	ldr	r2, [r7, #0]
 80059d6:	b292      	uxth	r2, r2
 80059d8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f000 f832 	bl	8005a44 <RTC_ExitInitMode>
 80059e0:	4603      	mov	r3, r0
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d001      	beq.n	80059ea <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80059ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3710      	adds	r7, #16
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}

080059f4 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b084      	sub	sp, #16
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80059fc:	2300      	movs	r3, #0
 80059fe:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8005a00:	f7fd f994 	bl	8002d2c <HAL_GetTick>
 8005a04:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005a06:	e009      	b.n	8005a1c <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005a08:	f7fd f990 	bl	8002d2c <HAL_GetTick>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	1ad3      	subs	r3, r2, r3
 8005a12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a16:	d901      	bls.n	8005a1c <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8005a18:	2303      	movs	r3, #3
 8005a1a:	e00f      	b.n	8005a3c <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	f003 0320 	and.w	r3, r3, #32
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d0ee      	beq.n	8005a08 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	685a      	ldr	r2, [r3, #4]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f042 0210 	orr.w	r2, r2, #16
 8005a38:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8005a3a:	2300      	movs	r3, #0
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3710      	adds	r7, #16
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}

08005a44 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b084      	sub	sp, #16
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	685a      	ldr	r2, [r3, #4]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f022 0210 	bic.w	r2, r2, #16
 8005a5e:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8005a60:	f7fd f964 	bl	8002d2c <HAL_GetTick>
 8005a64:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005a66:	e009      	b.n	8005a7c <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005a68:	f7fd f960 	bl	8002d2c <HAL_GetTick>
 8005a6c:	4602      	mov	r2, r0
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	1ad3      	subs	r3, r2, r3
 8005a72:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a76:	d901      	bls.n	8005a7c <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8005a78:	2303      	movs	r3, #3
 8005a7a:	e007      	b.n	8005a8c <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	f003 0320 	and.w	r3, r3, #32
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d0ee      	beq.n	8005a68 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8005a8a:	2300      	movs	r3, #0
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3710      	adds	r7, #16
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}

08005a94 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b085      	sub	sp, #20
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8005aa2:	e005      	b.n	8005ab0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	3301      	adds	r3, #1
 8005aa8:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8005aaa:	79fb      	ldrb	r3, [r7, #7]
 8005aac:	3b0a      	subs	r3, #10
 8005aae:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8005ab0:	79fb      	ldrb	r3, [r7, #7]
 8005ab2:	2b09      	cmp	r3, #9
 8005ab4:	d8f6      	bhi.n	8005aa4 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	b2db      	uxtb	r3, r3
 8005aba:	011b      	lsls	r3, r3, #4
 8005abc:	b2da      	uxtb	r2, r3
 8005abe:	79fb      	ldrb	r3, [r7, #7]
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	b2db      	uxtb	r3, r3
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3714      	adds	r7, #20
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bc80      	pop	{r7}
 8005acc:	4770      	bx	lr

08005ace <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005ace:	b480      	push	{r7}
 8005ad0:	b085      	sub	sp, #20
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8005adc:	79fb      	ldrb	r3, [r7, #7]
 8005ade:	091b      	lsrs	r3, r3, #4
 8005ae0:	b2db      	uxtb	r3, r3
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	4613      	mov	r3, r2
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	4413      	add	r3, r2
 8005aea:	005b      	lsls	r3, r3, #1
 8005aec:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8005aee:	79fb      	ldrb	r3, [r7, #7]
 8005af0:	f003 030f 	and.w	r3, r3, #15
 8005af4:	b2da      	uxtb	r2, r3
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	4413      	add	r3, r2
 8005afc:	b2db      	uxtb	r3, r3
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3714      	adds	r7, #20
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bc80      	pop	{r7}
 8005b06:	4770      	bx	lr

08005b08 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b086      	sub	sp, #24
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8005b12:	2300      	movs	r3, #0
 8005b14:	617b      	str	r3, [r7, #20]
 8005b16:	2300      	movs	r3, #0
 8005b18:	613b      	str	r3, [r7, #16]
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	7bdb      	ldrb	r3, [r3, #15]
 8005b26:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	7b5b      	ldrb	r3, [r3, #13]
 8005b2c:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	7b9b      	ldrb	r3, [r3, #14]
 8005b32:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8005b34:	2300      	movs	r3, #0
 8005b36:	60bb      	str	r3, [r7, #8]
 8005b38:	e06f      	b.n	8005c1a <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d011      	beq.n	8005b64 <RTC_DateUpdate+0x5c>
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	2b03      	cmp	r3, #3
 8005b44:	d00e      	beq.n	8005b64 <RTC_DateUpdate+0x5c>
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	2b05      	cmp	r3, #5
 8005b4a:	d00b      	beq.n	8005b64 <RTC_DateUpdate+0x5c>
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	2b07      	cmp	r3, #7
 8005b50:	d008      	beq.n	8005b64 <RTC_DateUpdate+0x5c>
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	2b08      	cmp	r3, #8
 8005b56:	d005      	beq.n	8005b64 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	2b0a      	cmp	r3, #10
 8005b5c:	d002      	beq.n	8005b64 <RTC_DateUpdate+0x5c>
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	2b0c      	cmp	r3, #12
 8005b62:	d117      	bne.n	8005b94 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2b1e      	cmp	r3, #30
 8005b68:	d803      	bhi.n	8005b72 <RTC_DateUpdate+0x6a>
      {
        day++;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	3301      	adds	r3, #1
 8005b6e:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8005b70:	e050      	b.n	8005c14 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	2b0c      	cmp	r3, #12
 8005b76:	d005      	beq.n	8005b84 <RTC_DateUpdate+0x7c>
        {
          month++;
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	3301      	adds	r3, #1
 8005b7c:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8005b82:	e047      	b.n	8005c14 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8005b84:	2301      	movs	r3, #1
 8005b86:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	60fb      	str	r3, [r7, #12]
          year++;
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	3301      	adds	r3, #1
 8005b90:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8005b92:	e03f      	b.n	8005c14 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	2b04      	cmp	r3, #4
 8005b98:	d008      	beq.n	8005bac <RTC_DateUpdate+0xa4>
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	2b06      	cmp	r3, #6
 8005b9e:	d005      	beq.n	8005bac <RTC_DateUpdate+0xa4>
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	2b09      	cmp	r3, #9
 8005ba4:	d002      	beq.n	8005bac <RTC_DateUpdate+0xa4>
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	2b0b      	cmp	r3, #11
 8005baa:	d10c      	bne.n	8005bc6 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2b1d      	cmp	r3, #29
 8005bb0:	d803      	bhi.n	8005bba <RTC_DateUpdate+0xb2>
      {
        day++;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	3301      	adds	r3, #1
 8005bb6:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8005bb8:	e02c      	b.n	8005c14 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	3301      	adds	r3, #1
 8005bbe:	613b      	str	r3, [r7, #16]
        day = 1U;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8005bc4:	e026      	b.n	8005c14 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	2b02      	cmp	r3, #2
 8005bca:	d123      	bne.n	8005c14 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2b1b      	cmp	r3, #27
 8005bd0:	d803      	bhi.n	8005bda <RTC_DateUpdate+0xd2>
      {
        day++;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	3301      	adds	r3, #1
 8005bd6:	60fb      	str	r3, [r7, #12]
 8005bd8:	e01c      	b.n	8005c14 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2b1c      	cmp	r3, #28
 8005bde:	d111      	bne.n	8005c04 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	4618      	mov	r0, r3
 8005be6:	f000 f839 	bl	8005c5c <RTC_IsLeapYear>
 8005bea:	4603      	mov	r3, r0
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d003      	beq.n	8005bf8 <RTC_DateUpdate+0xf0>
        {
          day++;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	3301      	adds	r3, #1
 8005bf4:	60fb      	str	r3, [r7, #12]
 8005bf6:	e00d      	b.n	8005c14 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	60fb      	str	r3, [r7, #12]
 8005c02:	e007      	b.n	8005c14 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2b1d      	cmp	r3, #29
 8005c08:	d104      	bne.n	8005c14 <RTC_DateUpdate+0x10c>
      {
        month++;
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	3301      	adds	r3, #1
 8005c0e:	613b      	str	r3, [r7, #16]
        day = 1U;
 8005c10:	2301      	movs	r3, #1
 8005c12:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	3301      	adds	r3, #1
 8005c18:	60bb      	str	r3, [r7, #8]
 8005c1a:	68ba      	ldr	r2, [r7, #8]
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d38b      	bcc.n	8005b3a <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	b2da      	uxtb	r2, r3
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	b2da      	uxtb	r2, r3
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	b2da      	uxtb	r2, r3
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	b2db      	uxtb	r3, r3
 8005c3e:	68fa      	ldr	r2, [r7, #12]
 8005c40:	b2d2      	uxtb	r2, r2
 8005c42:	4619      	mov	r1, r3
 8005c44:	6978      	ldr	r0, [r7, #20]
 8005c46:	f000 f83b 	bl	8005cc0 <RTC_WeekDayNum>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	461a      	mov	r2, r3
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	731a      	strb	r2, [r3, #12]
}
 8005c52:	bf00      	nop
 8005c54:	3718      	adds	r7, #24
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}
	...

08005c5c <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b083      	sub	sp, #12
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	4603      	mov	r3, r0
 8005c64:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8005c66:	88fb      	ldrh	r3, [r7, #6]
 8005c68:	f003 0303 	and.w	r3, r3, #3
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d001      	beq.n	8005c76 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8005c72:	2300      	movs	r3, #0
 8005c74:	e01d      	b.n	8005cb2 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8005c76:	88fb      	ldrh	r3, [r7, #6]
 8005c78:	4a10      	ldr	r2, [pc, #64]	; (8005cbc <RTC_IsLeapYear+0x60>)
 8005c7a:	fba2 1203 	umull	r1, r2, r2, r3
 8005c7e:	0952      	lsrs	r2, r2, #5
 8005c80:	2164      	movs	r1, #100	; 0x64
 8005c82:	fb01 f202 	mul.w	r2, r1, r2
 8005c86:	1a9b      	subs	r3, r3, r2
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d001      	beq.n	8005c92 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e00f      	b.n	8005cb2 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8005c92:	88fb      	ldrh	r3, [r7, #6]
 8005c94:	4a09      	ldr	r2, [pc, #36]	; (8005cbc <RTC_IsLeapYear+0x60>)
 8005c96:	fba2 1203 	umull	r1, r2, r2, r3
 8005c9a:	09d2      	lsrs	r2, r2, #7
 8005c9c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005ca0:	fb01 f202 	mul.w	r2, r1, r2
 8005ca4:	1a9b      	subs	r3, r3, r2
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d101      	bne.n	8005cb0 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8005cac:	2301      	movs	r3, #1
 8005cae:	e000      	b.n	8005cb2 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8005cb0:	2300      	movs	r3, #0
  }
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	370c      	adds	r7, #12
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bc80      	pop	{r7}
 8005cba:	4770      	bx	lr
 8005cbc:	51eb851f 	.word	0x51eb851f

08005cc0 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b085      	sub	sp, #20
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
 8005cc8:	460b      	mov	r3, r1
 8005cca:	70fb      	strb	r3, [r7, #3]
 8005ccc:	4613      	mov	r3, r2
 8005cce:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	60bb      	str	r3, [r7, #8]
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8005cde:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8005ce0:	78fb      	ldrb	r3, [r7, #3]
 8005ce2:	2b02      	cmp	r3, #2
 8005ce4:	d82d      	bhi.n	8005d42 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8005ce6:	78fa      	ldrb	r2, [r7, #3]
 8005ce8:	4613      	mov	r3, r2
 8005cea:	005b      	lsls	r3, r3, #1
 8005cec:	4413      	add	r3, r2
 8005cee:	00db      	lsls	r3, r3, #3
 8005cf0:	1a9b      	subs	r3, r3, r2
 8005cf2:	4a2c      	ldr	r2, [pc, #176]	; (8005da4 <RTC_WeekDayNum+0xe4>)
 8005cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8005cf8:	085a      	lsrs	r2, r3, #1
 8005cfa:	78bb      	ldrb	r3, [r7, #2]
 8005cfc:	441a      	add	r2, r3
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	441a      	add	r2, r3
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	3b01      	subs	r3, #1
 8005d06:	089b      	lsrs	r3, r3, #2
 8005d08:	441a      	add	r2, r3
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	3b01      	subs	r3, #1
 8005d0e:	4926      	ldr	r1, [pc, #152]	; (8005da8 <RTC_WeekDayNum+0xe8>)
 8005d10:	fba1 1303 	umull	r1, r3, r1, r3
 8005d14:	095b      	lsrs	r3, r3, #5
 8005d16:	1ad2      	subs	r2, r2, r3
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	3b01      	subs	r3, #1
 8005d1c:	4922      	ldr	r1, [pc, #136]	; (8005da8 <RTC_WeekDayNum+0xe8>)
 8005d1e:	fba1 1303 	umull	r1, r3, r1, r3
 8005d22:	09db      	lsrs	r3, r3, #7
 8005d24:	4413      	add	r3, r2
 8005d26:	1d1a      	adds	r2, r3, #4
 8005d28:	4b20      	ldr	r3, [pc, #128]	; (8005dac <RTC_WeekDayNum+0xec>)
 8005d2a:	fba3 1302 	umull	r1, r3, r3, r2
 8005d2e:	1ad1      	subs	r1, r2, r3
 8005d30:	0849      	lsrs	r1, r1, #1
 8005d32:	440b      	add	r3, r1
 8005d34:	0899      	lsrs	r1, r3, #2
 8005d36:	460b      	mov	r3, r1
 8005d38:	00db      	lsls	r3, r3, #3
 8005d3a:	1a5b      	subs	r3, r3, r1
 8005d3c:	1ad3      	subs	r3, r2, r3
 8005d3e:	60fb      	str	r3, [r7, #12]
 8005d40:	e029      	b.n	8005d96 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8005d42:	78fa      	ldrb	r2, [r7, #3]
 8005d44:	4613      	mov	r3, r2
 8005d46:	005b      	lsls	r3, r3, #1
 8005d48:	4413      	add	r3, r2
 8005d4a:	00db      	lsls	r3, r3, #3
 8005d4c:	1a9b      	subs	r3, r3, r2
 8005d4e:	4a15      	ldr	r2, [pc, #84]	; (8005da4 <RTC_WeekDayNum+0xe4>)
 8005d50:	fba2 2303 	umull	r2, r3, r2, r3
 8005d54:	085a      	lsrs	r2, r3, #1
 8005d56:	78bb      	ldrb	r3, [r7, #2]
 8005d58:	441a      	add	r2, r3
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	441a      	add	r2, r3
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	089b      	lsrs	r3, r3, #2
 8005d62:	441a      	add	r2, r3
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	4910      	ldr	r1, [pc, #64]	; (8005da8 <RTC_WeekDayNum+0xe8>)
 8005d68:	fba1 1303 	umull	r1, r3, r1, r3
 8005d6c:	095b      	lsrs	r3, r3, #5
 8005d6e:	1ad2      	subs	r2, r2, r3
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	490d      	ldr	r1, [pc, #52]	; (8005da8 <RTC_WeekDayNum+0xe8>)
 8005d74:	fba1 1303 	umull	r1, r3, r1, r3
 8005d78:	09db      	lsrs	r3, r3, #7
 8005d7a:	4413      	add	r3, r2
 8005d7c:	1c9a      	adds	r2, r3, #2
 8005d7e:	4b0b      	ldr	r3, [pc, #44]	; (8005dac <RTC_WeekDayNum+0xec>)
 8005d80:	fba3 1302 	umull	r1, r3, r3, r2
 8005d84:	1ad1      	subs	r1, r2, r3
 8005d86:	0849      	lsrs	r1, r1, #1
 8005d88:	440b      	add	r3, r1
 8005d8a:	0899      	lsrs	r1, r3, #2
 8005d8c:	460b      	mov	r3, r1
 8005d8e:	00db      	lsls	r3, r3, #3
 8005d90:	1a5b      	subs	r3, r3, r1
 8005d92:	1ad3      	subs	r3, r2, r3
 8005d94:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	b2db      	uxtb	r3, r3
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3714      	adds	r7, #20
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bc80      	pop	{r7}
 8005da2:	4770      	bx	lr
 8005da4:	38e38e39 	.word	0x38e38e39
 8005da8:	51eb851f 	.word	0x51eb851f
 8005dac:	24924925 	.word	0x24924925

08005db0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b082      	sub	sp, #8
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d101      	bne.n	8005dc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	e0b2      	b.n	8005f28 <HAL_TIM_Base_Init+0x178>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a5a      	ldr	r2, [pc, #360]	; (8005f30 <HAL_TIM_Base_Init+0x180>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d027      	beq.n	8005e1c <HAL_TIM_Base_Init+0x6c>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a58      	ldr	r2, [pc, #352]	; (8005f34 <HAL_TIM_Base_Init+0x184>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d022      	beq.n	8005e1c <HAL_TIM_Base_Init+0x6c>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dde:	d01d      	beq.n	8005e1c <HAL_TIM_Base_Init+0x6c>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a54      	ldr	r2, [pc, #336]	; (8005f38 <HAL_TIM_Base_Init+0x188>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d018      	beq.n	8005e1c <HAL_TIM_Base_Init+0x6c>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a53      	ldr	r2, [pc, #332]	; (8005f3c <HAL_TIM_Base_Init+0x18c>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d013      	beq.n	8005e1c <HAL_TIM_Base_Init+0x6c>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a51      	ldr	r2, [pc, #324]	; (8005f40 <HAL_TIM_Base_Init+0x190>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d00e      	beq.n	8005e1c <HAL_TIM_Base_Init+0x6c>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a50      	ldr	r2, [pc, #320]	; (8005f44 <HAL_TIM_Base_Init+0x194>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d009      	beq.n	8005e1c <HAL_TIM_Base_Init+0x6c>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a4e      	ldr	r2, [pc, #312]	; (8005f48 <HAL_TIM_Base_Init+0x198>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d004      	beq.n	8005e1c <HAL_TIM_Base_Init+0x6c>
 8005e12:	f240 1113 	movw	r1, #275	; 0x113
 8005e16:	484d      	ldr	r0, [pc, #308]	; (8005f4c <HAL_TIM_Base_Init+0x19c>)
 8005e18:	f7fc fab8 	bl	800238c <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d014      	beq.n	8005e4e <HAL_TIM_Base_Init+0x9e>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	2b10      	cmp	r3, #16
 8005e2a:	d010      	beq.n	8005e4e <HAL_TIM_Base_Init+0x9e>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	2b20      	cmp	r3, #32
 8005e32:	d00c      	beq.n	8005e4e <HAL_TIM_Base_Init+0x9e>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	2b40      	cmp	r3, #64	; 0x40
 8005e3a:	d008      	beq.n	8005e4e <HAL_TIM_Base_Init+0x9e>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	2b60      	cmp	r3, #96	; 0x60
 8005e42:	d004      	beq.n	8005e4e <HAL_TIM_Base_Init+0x9e>
 8005e44:	f44f 718a 	mov.w	r1, #276	; 0x114
 8005e48:	4840      	ldr	r0, [pc, #256]	; (8005f4c <HAL_TIM_Base_Init+0x19c>)
 8005e4a:	f7fc fa9f 	bl	800238c <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	691b      	ldr	r3, [r3, #16]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d00e      	beq.n	8005e74 <HAL_TIM_Base_Init+0xc4>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	691b      	ldr	r3, [r3, #16]
 8005e5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e5e:	d009      	beq.n	8005e74 <HAL_TIM_Base_Init+0xc4>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	691b      	ldr	r3, [r3, #16]
 8005e64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e68:	d004      	beq.n	8005e74 <HAL_TIM_Base_Init+0xc4>
 8005e6a:	f240 1115 	movw	r1, #277	; 0x115
 8005e6e:	4837      	ldr	r0, [pc, #220]	; (8005f4c <HAL_TIM_Base_Init+0x19c>)
 8005e70:	f7fc fa8c 	bl	800238c <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	699b      	ldr	r3, [r3, #24]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d008      	beq.n	8005e8e <HAL_TIM_Base_Init+0xde>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	699b      	ldr	r3, [r3, #24]
 8005e80:	2b80      	cmp	r3, #128	; 0x80
 8005e82:	d004      	beq.n	8005e8e <HAL_TIM_Base_Init+0xde>
 8005e84:	f44f 718b 	mov.w	r1, #278	; 0x116
 8005e88:	4830      	ldr	r0, [pc, #192]	; (8005f4c <HAL_TIM_Base_Init+0x19c>)
 8005e8a:	f7fc fa7f 	bl	800238c <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e94:	b2db      	uxtb	r3, r3
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d111      	bne.n	8005ebe <HAL_TIM_Base_Init+0x10e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f001 ffc0 	bl	8007e28 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d102      	bne.n	8005eb6 <HAL_TIM_Base_Init+0x106>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	4a27      	ldr	r2, [pc, #156]	; (8005f50 <HAL_TIM_Base_Init+0x1a0>)
 8005eb4:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2202      	movs	r2, #2
 8005ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	3304      	adds	r3, #4
 8005ece:	4619      	mov	r1, r3
 8005ed0:	4610      	mov	r0, r2
 8005ed2:	f001 fbff 	bl	80076d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2201      	movs	r2, #1
 8005eda:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2201      	movs	r2, #1
 8005eea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2201      	movs	r2, #1
 8005ef2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2201      	movs	r2, #1
 8005efa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2201      	movs	r2, #1
 8005f02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2201      	movs	r2, #1
 8005f0a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2201      	movs	r2, #1
 8005f12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2201      	movs	r2, #1
 8005f1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2201      	movs	r2, #1
 8005f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f26:	2300      	movs	r3, #0
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3708      	adds	r7, #8
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}
 8005f30:	40012c00 	.word	0x40012c00
 8005f34:	40013400 	.word	0x40013400
 8005f38:	40000400 	.word	0x40000400
 8005f3c:	40000800 	.word	0x40000800
 8005f40:	40000c00 	.word	0x40000c00
 8005f44:	40001000 	.word	0x40001000
 8005f48:	40001400 	.word	0x40001400
 8005f4c:	08010678 	.word	0x08010678
 8005f50:	080024d5 	.word	0x080024d5

08005f54 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b084      	sub	sp, #16
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a39      	ldr	r2, [pc, #228]	; (8006048 <HAL_TIM_Base_Start+0xf4>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d027      	beq.n	8005fb6 <HAL_TIM_Base_Start+0x62>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a38      	ldr	r2, [pc, #224]	; (800604c <HAL_TIM_Base_Start+0xf8>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d022      	beq.n	8005fb6 <HAL_TIM_Base_Start+0x62>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f78:	d01d      	beq.n	8005fb6 <HAL_TIM_Base_Start+0x62>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a34      	ldr	r2, [pc, #208]	; (8006050 <HAL_TIM_Base_Start+0xfc>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d018      	beq.n	8005fb6 <HAL_TIM_Base_Start+0x62>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a32      	ldr	r2, [pc, #200]	; (8006054 <HAL_TIM_Base_Start+0x100>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d013      	beq.n	8005fb6 <HAL_TIM_Base_Start+0x62>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a31      	ldr	r2, [pc, #196]	; (8006058 <HAL_TIM_Base_Start+0x104>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d00e      	beq.n	8005fb6 <HAL_TIM_Base_Start+0x62>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a2f      	ldr	r2, [pc, #188]	; (800605c <HAL_TIM_Base_Start+0x108>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d009      	beq.n	8005fb6 <HAL_TIM_Base_Start+0x62>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a2e      	ldr	r2, [pc, #184]	; (8006060 <HAL_TIM_Base_Start+0x10c>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d004      	beq.n	8005fb6 <HAL_TIM_Base_Start+0x62>
 8005fac:	f44f 71ca 	mov.w	r1, #404	; 0x194
 8005fb0:	482c      	ldr	r0, [pc, #176]	; (8006064 <HAL_TIM_Base_Start+0x110>)
 8005fb2:	f7fc f9eb 	bl	800238c <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fbc:	b2db      	uxtb	r3, r3
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d001      	beq.n	8005fc6 <HAL_TIM_Base_Start+0x72>
  {
    return HAL_ERROR;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	e03c      	b.n	8006040 <HAL_TIM_Base_Start+0xec>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2202      	movs	r2, #2
 8005fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a1d      	ldr	r2, [pc, #116]	; (8006048 <HAL_TIM_Base_Start+0xf4>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d018      	beq.n	800600a <HAL_TIM_Base_Start+0xb6>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a1b      	ldr	r2, [pc, #108]	; (800604c <HAL_TIM_Base_Start+0xf8>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d013      	beq.n	800600a <HAL_TIM_Base_Start+0xb6>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fea:	d00e      	beq.n	800600a <HAL_TIM_Base_Start+0xb6>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a17      	ldr	r2, [pc, #92]	; (8006050 <HAL_TIM_Base_Start+0xfc>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d009      	beq.n	800600a <HAL_TIM_Base_Start+0xb6>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a16      	ldr	r2, [pc, #88]	; (8006054 <HAL_TIM_Base_Start+0x100>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d004      	beq.n	800600a <HAL_TIM_Base_Start+0xb6>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a14      	ldr	r2, [pc, #80]	; (8006058 <HAL_TIM_Base_Start+0x104>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d111      	bne.n	800602e <HAL_TIM_Base_Start+0xda>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	f003 0307 	and.w	r3, r3, #7
 8006014:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2b06      	cmp	r3, #6
 800601a:	d010      	beq.n	800603e <HAL_TIM_Base_Start+0xea>
    {
      __HAL_TIM_ENABLE(htim);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f042 0201 	orr.w	r2, r2, #1
 800602a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800602c:	e007      	b.n	800603e <HAL_TIM_Base_Start+0xea>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f042 0201 	orr.w	r2, r2, #1
 800603c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800603e:	2300      	movs	r3, #0
}
 8006040:	4618      	mov	r0, r3
 8006042:	3710      	adds	r7, #16
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}
 8006048:	40012c00 	.word	0x40012c00
 800604c:	40013400 	.word	0x40013400
 8006050:	40000400 	.word	0x40000400
 8006054:	40000800 	.word	0x40000800
 8006058:	40000c00 	.word	0x40000c00
 800605c:	40001000 	.word	0x40001000
 8006060:	40001400 	.word	0x40001400
 8006064:	08010678 	.word	0x08010678

08006068 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b084      	sub	sp, #16
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a3d      	ldr	r2, [pc, #244]	; (800616c <HAL_TIM_Base_Start_IT+0x104>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d027      	beq.n	80060ca <HAL_TIM_Base_Start_IT+0x62>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a3c      	ldr	r2, [pc, #240]	; (8006170 <HAL_TIM_Base_Start_IT+0x108>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d022      	beq.n	80060ca <HAL_TIM_Base_Start_IT+0x62>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800608c:	d01d      	beq.n	80060ca <HAL_TIM_Base_Start_IT+0x62>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a38      	ldr	r2, [pc, #224]	; (8006174 <HAL_TIM_Base_Start_IT+0x10c>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d018      	beq.n	80060ca <HAL_TIM_Base_Start_IT+0x62>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a36      	ldr	r2, [pc, #216]	; (8006178 <HAL_TIM_Base_Start_IT+0x110>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d013      	beq.n	80060ca <HAL_TIM_Base_Start_IT+0x62>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a35      	ldr	r2, [pc, #212]	; (800617c <HAL_TIM_Base_Start_IT+0x114>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d00e      	beq.n	80060ca <HAL_TIM_Base_Start_IT+0x62>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a33      	ldr	r2, [pc, #204]	; (8006180 <HAL_TIM_Base_Start_IT+0x118>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d009      	beq.n	80060ca <HAL_TIM_Base_Start_IT+0x62>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a32      	ldr	r2, [pc, #200]	; (8006184 <HAL_TIM_Base_Start_IT+0x11c>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d004      	beq.n	80060ca <HAL_TIM_Base_Start_IT+0x62>
 80060c0:	f240 11cf 	movw	r1, #463	; 0x1cf
 80060c4:	4830      	ldr	r0, [pc, #192]	; (8006188 <HAL_TIM_Base_Start_IT+0x120>)
 80060c6:	f7fc f961 	bl	800238c <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060d0:	b2db      	uxtb	r3, r3
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	d001      	beq.n	80060da <HAL_TIM_Base_Start_IT+0x72>
  {
    return HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	e044      	b.n	8006164 <HAL_TIM_Base_Start_IT+0xfc>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2202      	movs	r2, #2
 80060de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	68da      	ldr	r2, [r3, #12]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f042 0201 	orr.w	r2, r2, #1
 80060f0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a1d      	ldr	r2, [pc, #116]	; (800616c <HAL_TIM_Base_Start_IT+0x104>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d018      	beq.n	800612e <HAL_TIM_Base_Start_IT+0xc6>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a1b      	ldr	r2, [pc, #108]	; (8006170 <HAL_TIM_Base_Start_IT+0x108>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d013      	beq.n	800612e <HAL_TIM_Base_Start_IT+0xc6>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800610e:	d00e      	beq.n	800612e <HAL_TIM_Base_Start_IT+0xc6>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a17      	ldr	r2, [pc, #92]	; (8006174 <HAL_TIM_Base_Start_IT+0x10c>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d009      	beq.n	800612e <HAL_TIM_Base_Start_IT+0xc6>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a16      	ldr	r2, [pc, #88]	; (8006178 <HAL_TIM_Base_Start_IT+0x110>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d004      	beq.n	800612e <HAL_TIM_Base_Start_IT+0xc6>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a14      	ldr	r2, [pc, #80]	; (800617c <HAL_TIM_Base_Start_IT+0x114>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d111      	bne.n	8006152 <HAL_TIM_Base_Start_IT+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	f003 0307 	and.w	r3, r3, #7
 8006138:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2b06      	cmp	r3, #6
 800613e:	d010      	beq.n	8006162 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f042 0201 	orr.w	r2, r2, #1
 800614e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006150:	e007      	b.n	8006162 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f042 0201 	orr.w	r2, r2, #1
 8006160:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006162:	2300      	movs	r3, #0
}
 8006164:	4618      	mov	r0, r3
 8006166:	3710      	adds	r7, #16
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}
 800616c:	40012c00 	.word	0x40012c00
 8006170:	40013400 	.word	0x40013400
 8006174:	40000400 	.word	0x40000400
 8006178:	40000800 	.word	0x40000800
 800617c:	40000c00 	.word	0x40000c00
 8006180:	40001000 	.word	0x40001000
 8006184:	40001400 	.word	0x40001400
 8006188:	08010678 	.word	0x08010678

0800618c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b082      	sub	sp, #8
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d101      	bne.n	800619e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	e0b2      	b.n	8006304 <HAL_TIM_PWM_Init+0x178>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a5a      	ldr	r2, [pc, #360]	; (800630c <HAL_TIM_PWM_Init+0x180>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d027      	beq.n	80061f8 <HAL_TIM_PWM_Init+0x6c>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a58      	ldr	r2, [pc, #352]	; (8006310 <HAL_TIM_PWM_Init+0x184>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d022      	beq.n	80061f8 <HAL_TIM_PWM_Init+0x6c>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061ba:	d01d      	beq.n	80061f8 <HAL_TIM_PWM_Init+0x6c>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a54      	ldr	r2, [pc, #336]	; (8006314 <HAL_TIM_PWM_Init+0x188>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d018      	beq.n	80061f8 <HAL_TIM_PWM_Init+0x6c>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a53      	ldr	r2, [pc, #332]	; (8006318 <HAL_TIM_PWM_Init+0x18c>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d013      	beq.n	80061f8 <HAL_TIM_PWM_Init+0x6c>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a51      	ldr	r2, [pc, #324]	; (800631c <HAL_TIM_PWM_Init+0x190>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d00e      	beq.n	80061f8 <HAL_TIM_PWM_Init+0x6c>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a50      	ldr	r2, [pc, #320]	; (8006320 <HAL_TIM_PWM_Init+0x194>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d009      	beq.n	80061f8 <HAL_TIM_PWM_Init+0x6c>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a4e      	ldr	r2, [pc, #312]	; (8006324 <HAL_TIM_PWM_Init+0x198>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d004      	beq.n	80061f8 <HAL_TIM_PWM_Init+0x6c>
 80061ee:	f240 5113 	movw	r1, #1299	; 0x513
 80061f2:	484d      	ldr	r0, [pc, #308]	; (8006328 <HAL_TIM_PWM_Init+0x19c>)
 80061f4:	f7fc f8ca 	bl	800238c <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d014      	beq.n	800622a <HAL_TIM_PWM_Init+0x9e>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	2b10      	cmp	r3, #16
 8006206:	d010      	beq.n	800622a <HAL_TIM_PWM_Init+0x9e>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	2b20      	cmp	r3, #32
 800620e:	d00c      	beq.n	800622a <HAL_TIM_PWM_Init+0x9e>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	2b40      	cmp	r3, #64	; 0x40
 8006216:	d008      	beq.n	800622a <HAL_TIM_PWM_Init+0x9e>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	2b60      	cmp	r3, #96	; 0x60
 800621e:	d004      	beq.n	800622a <HAL_TIM_PWM_Init+0x9e>
 8006220:	f240 5114 	movw	r1, #1300	; 0x514
 8006224:	4840      	ldr	r0, [pc, #256]	; (8006328 <HAL_TIM_PWM_Init+0x19c>)
 8006226:	f7fc f8b1 	bl	800238c <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	691b      	ldr	r3, [r3, #16]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d00e      	beq.n	8006250 <HAL_TIM_PWM_Init+0xc4>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	691b      	ldr	r3, [r3, #16]
 8006236:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800623a:	d009      	beq.n	8006250 <HAL_TIM_PWM_Init+0xc4>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	691b      	ldr	r3, [r3, #16]
 8006240:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006244:	d004      	beq.n	8006250 <HAL_TIM_PWM_Init+0xc4>
 8006246:	f240 5115 	movw	r1, #1301	; 0x515
 800624a:	4837      	ldr	r0, [pc, #220]	; (8006328 <HAL_TIM_PWM_Init+0x19c>)
 800624c:	f7fc f89e 	bl	800238c <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	699b      	ldr	r3, [r3, #24]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d008      	beq.n	800626a <HAL_TIM_PWM_Init+0xde>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	699b      	ldr	r3, [r3, #24]
 800625c:	2b80      	cmp	r3, #128	; 0x80
 800625e:	d004      	beq.n	800626a <HAL_TIM_PWM_Init+0xde>
 8006260:	f240 5116 	movw	r1, #1302	; 0x516
 8006264:	4830      	ldr	r0, [pc, #192]	; (8006328 <HAL_TIM_PWM_Init+0x19c>)
 8006266:	f7fc f891 	bl	800238c <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006270:	b2db      	uxtb	r3, r3
 8006272:	2b00      	cmp	r3, #0
 8006274:	d111      	bne.n	800629a <HAL_TIM_PWM_Init+0x10e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2200      	movs	r2, #0
 800627a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f001 fdd2 	bl	8007e28 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006288:	2b00      	cmp	r3, #0
 800628a:	d102      	bne.n	8006292 <HAL_TIM_PWM_Init+0x106>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	4a27      	ldr	r2, [pc, #156]	; (800632c <HAL_TIM_PWM_Init+0x1a0>)
 8006290:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2202      	movs	r2, #2
 800629e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681a      	ldr	r2, [r3, #0]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	3304      	adds	r3, #4
 80062aa:	4619      	mov	r1, r3
 80062ac:	4610      	mov	r0, r2
 80062ae:	f001 fa11 	bl	80076d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2201      	movs	r2, #1
 80062b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2201      	movs	r2, #1
 80062be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2201      	movs	r2, #1
 80062c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2201      	movs	r2, #1
 80062ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2201      	movs	r2, #1
 80062d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2201      	movs	r2, #1
 80062de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2201      	movs	r2, #1
 80062e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2201      	movs	r2, #1
 80062ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2201      	movs	r2, #1
 80062f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2201      	movs	r2, #1
 80062fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006302:	2300      	movs	r3, #0
}
 8006304:	4618      	mov	r0, r3
 8006306:	3708      	adds	r7, #8
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}
 800630c:	40012c00 	.word	0x40012c00
 8006310:	40013400 	.word	0x40013400
 8006314:	40000400 	.word	0x40000400
 8006318:	40000800 	.word	0x40000800
 800631c:	40000c00 	.word	0x40000c00
 8006320:	40001000 	.word	0x40001000
 8006324:	40001400 	.word	0x40001400
 8006328:	08010678 	.word	0x08010678
 800632c:	08006331 	.word	0x08006331

08006330 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006330:	b480      	push	{r7}
 8006332:	b083      	sub	sp, #12
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006338:	bf00      	nop
 800633a:	370c      	adds	r7, #12
 800633c:	46bd      	mov	sp, r7
 800633e:	bc80      	pop	{r7}
 8006340:	4770      	bx	lr
	...

08006344 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b084      	sub	sp, #16
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
 800634c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a8a      	ldr	r2, [pc, #552]	; (800657c <HAL_TIM_PWM_Start+0x238>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d10b      	bne.n	8006370 <HAL_TIM_PWM_Start+0x2c>
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d062      	beq.n	8006424 <HAL_TIM_PWM_Start+0xe0>
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	2b04      	cmp	r3, #4
 8006362:	d05f      	beq.n	8006424 <HAL_TIM_PWM_Start+0xe0>
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	2b08      	cmp	r3, #8
 8006368:	d05c      	beq.n	8006424 <HAL_TIM_PWM_Start+0xe0>
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	2b0c      	cmp	r3, #12
 800636e:	d059      	beq.n	8006424 <HAL_TIM_PWM_Start+0xe0>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a82      	ldr	r2, [pc, #520]	; (8006580 <HAL_TIM_PWM_Start+0x23c>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d10b      	bne.n	8006392 <HAL_TIM_PWM_Start+0x4e>
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d051      	beq.n	8006424 <HAL_TIM_PWM_Start+0xe0>
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	2b04      	cmp	r3, #4
 8006384:	d04e      	beq.n	8006424 <HAL_TIM_PWM_Start+0xe0>
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	2b08      	cmp	r3, #8
 800638a:	d04b      	beq.n	8006424 <HAL_TIM_PWM_Start+0xe0>
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	2b0c      	cmp	r3, #12
 8006390:	d048      	beq.n	8006424 <HAL_TIM_PWM_Start+0xe0>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800639a:	d10b      	bne.n	80063b4 <HAL_TIM_PWM_Start+0x70>
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d040      	beq.n	8006424 <HAL_TIM_PWM_Start+0xe0>
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	2b04      	cmp	r3, #4
 80063a6:	d03d      	beq.n	8006424 <HAL_TIM_PWM_Start+0xe0>
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	2b08      	cmp	r3, #8
 80063ac:	d03a      	beq.n	8006424 <HAL_TIM_PWM_Start+0xe0>
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	2b0c      	cmp	r3, #12
 80063b2:	d037      	beq.n	8006424 <HAL_TIM_PWM_Start+0xe0>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a72      	ldr	r2, [pc, #456]	; (8006584 <HAL_TIM_PWM_Start+0x240>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d10b      	bne.n	80063d6 <HAL_TIM_PWM_Start+0x92>
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d02f      	beq.n	8006424 <HAL_TIM_PWM_Start+0xe0>
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	2b04      	cmp	r3, #4
 80063c8:	d02c      	beq.n	8006424 <HAL_TIM_PWM_Start+0xe0>
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	2b08      	cmp	r3, #8
 80063ce:	d029      	beq.n	8006424 <HAL_TIM_PWM_Start+0xe0>
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	2b0c      	cmp	r3, #12
 80063d4:	d026      	beq.n	8006424 <HAL_TIM_PWM_Start+0xe0>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a6b      	ldr	r2, [pc, #428]	; (8006588 <HAL_TIM_PWM_Start+0x244>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d10b      	bne.n	80063f8 <HAL_TIM_PWM_Start+0xb4>
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d01e      	beq.n	8006424 <HAL_TIM_PWM_Start+0xe0>
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	2b04      	cmp	r3, #4
 80063ea:	d01b      	beq.n	8006424 <HAL_TIM_PWM_Start+0xe0>
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	2b08      	cmp	r3, #8
 80063f0:	d018      	beq.n	8006424 <HAL_TIM_PWM_Start+0xe0>
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	2b0c      	cmp	r3, #12
 80063f6:	d015      	beq.n	8006424 <HAL_TIM_PWM_Start+0xe0>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a63      	ldr	r2, [pc, #396]	; (800658c <HAL_TIM_PWM_Start+0x248>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d10b      	bne.n	800641a <HAL_TIM_PWM_Start+0xd6>
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d00d      	beq.n	8006424 <HAL_TIM_PWM_Start+0xe0>
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	2b04      	cmp	r3, #4
 800640c:	d00a      	beq.n	8006424 <HAL_TIM_PWM_Start+0xe0>
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	2b08      	cmp	r3, #8
 8006412:	d007      	beq.n	8006424 <HAL_TIM_PWM_Start+0xe0>
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	2b0c      	cmp	r3, #12
 8006418:	d004      	beq.n	8006424 <HAL_TIM_PWM_Start+0xe0>
 800641a:	f240 5199 	movw	r1, #1433	; 0x599
 800641e:	485c      	ldr	r0, [pc, #368]	; (8006590 <HAL_TIM_PWM_Start+0x24c>)
 8006420:	f7fb ffb4 	bl	800238c <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d109      	bne.n	800643e <HAL_TIM_PWM_Start+0xfa>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006430:	b2db      	uxtb	r3, r3
 8006432:	2b01      	cmp	r3, #1
 8006434:	bf14      	ite	ne
 8006436:	2301      	movne	r3, #1
 8006438:	2300      	moveq	r3, #0
 800643a:	b2db      	uxtb	r3, r3
 800643c:	e022      	b.n	8006484 <HAL_TIM_PWM_Start+0x140>
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	2b04      	cmp	r3, #4
 8006442:	d109      	bne.n	8006458 <HAL_TIM_PWM_Start+0x114>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800644a:	b2db      	uxtb	r3, r3
 800644c:	2b01      	cmp	r3, #1
 800644e:	bf14      	ite	ne
 8006450:	2301      	movne	r3, #1
 8006452:	2300      	moveq	r3, #0
 8006454:	b2db      	uxtb	r3, r3
 8006456:	e015      	b.n	8006484 <HAL_TIM_PWM_Start+0x140>
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	2b08      	cmp	r3, #8
 800645c:	d109      	bne.n	8006472 <HAL_TIM_PWM_Start+0x12e>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006464:	b2db      	uxtb	r3, r3
 8006466:	2b01      	cmp	r3, #1
 8006468:	bf14      	ite	ne
 800646a:	2301      	movne	r3, #1
 800646c:	2300      	moveq	r3, #0
 800646e:	b2db      	uxtb	r3, r3
 8006470:	e008      	b.n	8006484 <HAL_TIM_PWM_Start+0x140>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006478:	b2db      	uxtb	r3, r3
 800647a:	2b01      	cmp	r3, #1
 800647c:	bf14      	ite	ne
 800647e:	2301      	movne	r3, #1
 8006480:	2300      	moveq	r3, #0
 8006482:	b2db      	uxtb	r3, r3
 8006484:	2b00      	cmp	r3, #0
 8006486:	d001      	beq.n	800648c <HAL_TIM_PWM_Start+0x148>
  {
    return HAL_ERROR;
 8006488:	2301      	movs	r3, #1
 800648a:	e072      	b.n	8006572 <HAL_TIM_PWM_Start+0x22e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d104      	bne.n	800649c <HAL_TIM_PWM_Start+0x158>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2202      	movs	r2, #2
 8006496:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800649a:	e013      	b.n	80064c4 <HAL_TIM_PWM_Start+0x180>
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	2b04      	cmp	r3, #4
 80064a0:	d104      	bne.n	80064ac <HAL_TIM_PWM_Start+0x168>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2202      	movs	r2, #2
 80064a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064aa:	e00b      	b.n	80064c4 <HAL_TIM_PWM_Start+0x180>
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	2b08      	cmp	r3, #8
 80064b0:	d104      	bne.n	80064bc <HAL_TIM_PWM_Start+0x178>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2202      	movs	r2, #2
 80064b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064ba:	e003      	b.n	80064c4 <HAL_TIM_PWM_Start+0x180>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2202      	movs	r2, #2
 80064c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	2201      	movs	r2, #1
 80064ca:	6839      	ldr	r1, [r7, #0]
 80064cc:	4618      	mov	r0, r3
 80064ce:	f001 fc4b 	bl	8007d68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a29      	ldr	r2, [pc, #164]	; (800657c <HAL_TIM_PWM_Start+0x238>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d004      	beq.n	80064e6 <HAL_TIM_PWM_Start+0x1a2>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a27      	ldr	r2, [pc, #156]	; (8006580 <HAL_TIM_PWM_Start+0x23c>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d101      	bne.n	80064ea <HAL_TIM_PWM_Start+0x1a6>
 80064e6:	2301      	movs	r3, #1
 80064e8:	e000      	b.n	80064ec <HAL_TIM_PWM_Start+0x1a8>
 80064ea:	2300      	movs	r3, #0
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d007      	beq.n	8006500 <HAL_TIM_PWM_Start+0x1bc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80064fe:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a1d      	ldr	r2, [pc, #116]	; (800657c <HAL_TIM_PWM_Start+0x238>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d018      	beq.n	800653c <HAL_TIM_PWM_Start+0x1f8>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a1c      	ldr	r2, [pc, #112]	; (8006580 <HAL_TIM_PWM_Start+0x23c>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d013      	beq.n	800653c <HAL_TIM_PWM_Start+0x1f8>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800651c:	d00e      	beq.n	800653c <HAL_TIM_PWM_Start+0x1f8>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a18      	ldr	r2, [pc, #96]	; (8006584 <HAL_TIM_PWM_Start+0x240>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d009      	beq.n	800653c <HAL_TIM_PWM_Start+0x1f8>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a16      	ldr	r2, [pc, #88]	; (8006588 <HAL_TIM_PWM_Start+0x244>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d004      	beq.n	800653c <HAL_TIM_PWM_Start+0x1f8>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a15      	ldr	r2, [pc, #84]	; (800658c <HAL_TIM_PWM_Start+0x248>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d111      	bne.n	8006560 <HAL_TIM_PWM_Start+0x21c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	f003 0307 	and.w	r3, r3, #7
 8006546:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2b06      	cmp	r3, #6
 800654c:	d010      	beq.n	8006570 <HAL_TIM_PWM_Start+0x22c>
    {
      __HAL_TIM_ENABLE(htim);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	681a      	ldr	r2, [r3, #0]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f042 0201 	orr.w	r2, r2, #1
 800655c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800655e:	e007      	b.n	8006570 <HAL_TIM_PWM_Start+0x22c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	681a      	ldr	r2, [r3, #0]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f042 0201 	orr.w	r2, r2, #1
 800656e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006570:	2300      	movs	r3, #0
}
 8006572:	4618      	mov	r0, r3
 8006574:	3710      	adds	r7, #16
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}
 800657a:	bf00      	nop
 800657c:	40012c00 	.word	0x40012c00
 8006580:	40013400 	.word	0x40013400
 8006584:	40000400 	.word	0x40000400
 8006588:	40000800 	.word	0x40000800
 800658c:	40000c00 	.word	0x40000c00
 8006590:	08010678 	.word	0x08010678

08006594 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b086      	sub	sp, #24
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d101      	bne.n	80065a8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80065a4:	2301      	movs	r3, #1
 80065a6:	e192      	b.n	80068ce <HAL_TIM_Encoder_Init+0x33a>
  }

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a7d      	ldr	r2, [pc, #500]	; (80067a4 <HAL_TIM_Encoder_Init+0x210>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d01d      	beq.n	80065ee <HAL_TIM_Encoder_Init+0x5a>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a7c      	ldr	r2, [pc, #496]	; (80067a8 <HAL_TIM_Encoder_Init+0x214>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d018      	beq.n	80065ee <HAL_TIM_Encoder_Init+0x5a>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065c4:	d013      	beq.n	80065ee <HAL_TIM_Encoder_Init+0x5a>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a78      	ldr	r2, [pc, #480]	; (80067ac <HAL_TIM_Encoder_Init+0x218>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d00e      	beq.n	80065ee <HAL_TIM_Encoder_Init+0x5a>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a76      	ldr	r2, [pc, #472]	; (80067b0 <HAL_TIM_Encoder_Init+0x21c>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d009      	beq.n	80065ee <HAL_TIM_Encoder_Init+0x5a>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a75      	ldr	r2, [pc, #468]	; (80067b4 <HAL_TIM_Encoder_Init+0x220>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d004      	beq.n	80065ee <HAL_TIM_Encoder_Init+0x5a>
 80065e4:	f640 318e 	movw	r1, #2958	; 0xb8e
 80065e8:	4873      	ldr	r0, [pc, #460]	; (80067b8 <HAL_TIM_Encoder_Init+0x224>)
 80065ea:	f7fb fecf 	bl	800238c <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	689b      	ldr	r3, [r3, #8]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d014      	beq.n	8006620 <HAL_TIM_Encoder_Init+0x8c>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	689b      	ldr	r3, [r3, #8]
 80065fa:	2b10      	cmp	r3, #16
 80065fc:	d010      	beq.n	8006620 <HAL_TIM_Encoder_Init+0x8c>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	689b      	ldr	r3, [r3, #8]
 8006602:	2b20      	cmp	r3, #32
 8006604:	d00c      	beq.n	8006620 <HAL_TIM_Encoder_Init+0x8c>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	2b40      	cmp	r3, #64	; 0x40
 800660c:	d008      	beq.n	8006620 <HAL_TIM_Encoder_Init+0x8c>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	689b      	ldr	r3, [r3, #8]
 8006612:	2b60      	cmp	r3, #96	; 0x60
 8006614:	d004      	beq.n	8006620 <HAL_TIM_Encoder_Init+0x8c>
 8006616:	f640 318f 	movw	r1, #2959	; 0xb8f
 800661a:	4867      	ldr	r0, [pc, #412]	; (80067b8 <HAL_TIM_Encoder_Init+0x224>)
 800661c:	f7fb feb6 	bl	800238c <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	691b      	ldr	r3, [r3, #16]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d00e      	beq.n	8006646 <HAL_TIM_Encoder_Init+0xb2>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	691b      	ldr	r3, [r3, #16]
 800662c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006630:	d009      	beq.n	8006646 <HAL_TIM_Encoder_Init+0xb2>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	691b      	ldr	r3, [r3, #16]
 8006636:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800663a:	d004      	beq.n	8006646 <HAL_TIM_Encoder_Init+0xb2>
 800663c:	f44f 6139 	mov.w	r1, #2960	; 0xb90
 8006640:	485d      	ldr	r0, [pc, #372]	; (80067b8 <HAL_TIM_Encoder_Init+0x224>)
 8006642:	f7fb fea3 	bl	800238c <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	699b      	ldr	r3, [r3, #24]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d008      	beq.n	8006660 <HAL_TIM_Encoder_Init+0xcc>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	699b      	ldr	r3, [r3, #24]
 8006652:	2b80      	cmp	r3, #128	; 0x80
 8006654:	d004      	beq.n	8006660 <HAL_TIM_Encoder_Init+0xcc>
 8006656:	f640 3191 	movw	r1, #2961	; 0xb91
 800665a:	4857      	ldr	r0, [pc, #348]	; (80067b8 <HAL_TIM_Encoder_Init+0x224>)
 800665c:	f7fb fe96 	bl	800238c <assert_failed>
  assert_param(IS_TIM_ENCODER_MODE(sConfig->EncoderMode));
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	2b01      	cmp	r3, #1
 8006666:	d00c      	beq.n	8006682 <HAL_TIM_Encoder_Init+0xee>
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	2b02      	cmp	r3, #2
 800666e:	d008      	beq.n	8006682 <HAL_TIM_Encoder_Init+0xee>
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	2b03      	cmp	r3, #3
 8006676:	d004      	beq.n	8006682 <HAL_TIM_Encoder_Init+0xee>
 8006678:	f640 3192 	movw	r1, #2962	; 0xb92
 800667c:	484e      	ldr	r0, [pc, #312]	; (80067b8 <HAL_TIM_Encoder_Init+0x224>)
 800667e:	f7fb fe85 	bl	800238c <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC1Selection));
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	689b      	ldr	r3, [r3, #8]
 8006686:	2b01      	cmp	r3, #1
 8006688:	d00c      	beq.n	80066a4 <HAL_TIM_Encoder_Init+0x110>
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	2b02      	cmp	r3, #2
 8006690:	d008      	beq.n	80066a4 <HAL_TIM_Encoder_Init+0x110>
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	689b      	ldr	r3, [r3, #8]
 8006696:	2b03      	cmp	r3, #3
 8006698:	d004      	beq.n	80066a4 <HAL_TIM_Encoder_Init+0x110>
 800669a:	f640 3193 	movw	r1, #2963	; 0xb93
 800669e:	4846      	ldr	r0, [pc, #280]	; (80067b8 <HAL_TIM_Encoder_Init+0x224>)
 80066a0:	f7fb fe74 	bl	800238c <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC2Selection));
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	699b      	ldr	r3, [r3, #24]
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	d00c      	beq.n	80066c6 <HAL_TIM_Encoder_Init+0x132>
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	699b      	ldr	r3, [r3, #24]
 80066b0:	2b02      	cmp	r3, #2
 80066b2:	d008      	beq.n	80066c6 <HAL_TIM_Encoder_Init+0x132>
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	699b      	ldr	r3, [r3, #24]
 80066b8:	2b03      	cmp	r3, #3
 80066ba:	d004      	beq.n	80066c6 <HAL_TIM_Encoder_Init+0x132>
 80066bc:	f640 3194 	movw	r1, #2964	; 0xb94
 80066c0:	483d      	ldr	r0, [pc, #244]	; (80067b8 <HAL_TIM_Encoder_Init+0x224>)
 80066c2:	f7fb fe63 	bl	800238c <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC1Polarity));
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d008      	beq.n	80066e0 <HAL_TIM_Encoder_Init+0x14c>
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	685b      	ldr	r3, [r3, #4]
 80066d2:	2b02      	cmp	r3, #2
 80066d4:	d004      	beq.n	80066e0 <HAL_TIM_Encoder_Init+0x14c>
 80066d6:	f640 3195 	movw	r1, #2965	; 0xb95
 80066da:	4837      	ldr	r0, [pc, #220]	; (80067b8 <HAL_TIM_Encoder_Init+0x224>)
 80066dc:	f7fb fe56 	bl	800238c <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC2Polarity));
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	695b      	ldr	r3, [r3, #20]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d008      	beq.n	80066fa <HAL_TIM_Encoder_Init+0x166>
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	695b      	ldr	r3, [r3, #20]
 80066ec:	2b02      	cmp	r3, #2
 80066ee:	d004      	beq.n	80066fa <HAL_TIM_Encoder_Init+0x166>
 80066f0:	f640 3196 	movw	r1, #2966	; 0xb96
 80066f4:	4830      	ldr	r0, [pc, #192]	; (80067b8 <HAL_TIM_Encoder_Init+0x224>)
 80066f6:	f7fb fe49 	bl	800238c <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	68db      	ldr	r3, [r3, #12]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d010      	beq.n	8006724 <HAL_TIM_Encoder_Init+0x190>
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	68db      	ldr	r3, [r3, #12]
 8006706:	2b04      	cmp	r3, #4
 8006708:	d00c      	beq.n	8006724 <HAL_TIM_Encoder_Init+0x190>
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	68db      	ldr	r3, [r3, #12]
 800670e:	2b08      	cmp	r3, #8
 8006710:	d008      	beq.n	8006724 <HAL_TIM_Encoder_Init+0x190>
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	68db      	ldr	r3, [r3, #12]
 8006716:	2b0c      	cmp	r3, #12
 8006718:	d004      	beq.n	8006724 <HAL_TIM_Encoder_Init+0x190>
 800671a:	f640 3197 	movw	r1, #2967	; 0xb97
 800671e:	4826      	ldr	r0, [pc, #152]	; (80067b8 <HAL_TIM_Encoder_Init+0x224>)
 8006720:	f7fb fe34 	bl	800238c <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	69db      	ldr	r3, [r3, #28]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d010      	beq.n	800674e <HAL_TIM_Encoder_Init+0x1ba>
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	69db      	ldr	r3, [r3, #28]
 8006730:	2b04      	cmp	r3, #4
 8006732:	d00c      	beq.n	800674e <HAL_TIM_Encoder_Init+0x1ba>
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	69db      	ldr	r3, [r3, #28]
 8006738:	2b08      	cmp	r3, #8
 800673a:	d008      	beq.n	800674e <HAL_TIM_Encoder_Init+0x1ba>
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	69db      	ldr	r3, [r3, #28]
 8006740:	2b0c      	cmp	r3, #12
 8006742:	d004      	beq.n	800674e <HAL_TIM_Encoder_Init+0x1ba>
 8006744:	f640 3198 	movw	r1, #2968	; 0xb98
 8006748:	481b      	ldr	r0, [pc, #108]	; (80067b8 <HAL_TIM_Encoder_Init+0x224>)
 800674a:	f7fb fe1f 	bl	800238c <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	691b      	ldr	r3, [r3, #16]
 8006752:	2b0f      	cmp	r3, #15
 8006754:	d904      	bls.n	8006760 <HAL_TIM_Encoder_Init+0x1cc>
 8006756:	f640 3199 	movw	r1, #2969	; 0xb99
 800675a:	4817      	ldr	r0, [pc, #92]	; (80067b8 <HAL_TIM_Encoder_Init+0x224>)
 800675c:	f7fb fe16 	bl	800238c <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	6a1b      	ldr	r3, [r3, #32]
 8006764:	2b0f      	cmp	r3, #15
 8006766:	d904      	bls.n	8006772 <HAL_TIM_Encoder_Init+0x1de>
 8006768:	f640 319a 	movw	r1, #2970	; 0xb9a
 800676c:	4812      	ldr	r0, [pc, #72]	; (80067b8 <HAL_TIM_Encoder_Init+0x224>)
 800676e:	f7fb fe0d 	bl	800238c <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006778:	b2db      	uxtb	r3, r3
 800677a:	2b00      	cmp	r3, #0
 800677c:	d120      	bne.n	80067c0 <HAL_TIM_Encoder_Init+0x22c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2200      	movs	r2, #0
 8006782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f001 fb4e 	bl	8007e28 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006790:	2b00      	cmp	r3, #0
 8006792:	d102      	bne.n	800679a <HAL_TIM_Encoder_Init+0x206>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	4a09      	ldr	r2, [pc, #36]	; (80067bc <HAL_TIM_Encoder_Init+0x228>)
 8006798:	671a      	str	r2, [r3, #112]	; 0x70
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	4798      	blx	r3
 80067a2:	e00d      	b.n	80067c0 <HAL_TIM_Encoder_Init+0x22c>
 80067a4:	40012c00 	.word	0x40012c00
 80067a8:	40013400 	.word	0x40013400
 80067ac:	40000400 	.word	0x40000400
 80067b0:	40000800 	.word	0x40000800
 80067b4:	40000c00 	.word	0x40000c00
 80067b8:	08010678 	.word	0x08010678
 80067bc:	08002599 	.word	0x08002599
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2202      	movs	r2, #2
 80067c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	689b      	ldr	r3, [r3, #8]
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	6812      	ldr	r2, [r2, #0]
 80067d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067d6:	f023 0307 	bic.w	r3, r3, #7
 80067da:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681a      	ldr	r2, [r3, #0]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	3304      	adds	r3, #4
 80067e4:	4619      	mov	r1, r3
 80067e6:	4610      	mov	r0, r2
 80067e8:	f000 ff74 	bl	80076d4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	689b      	ldr	r3, [r3, #8]
 80067f2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	699b      	ldr	r3, [r3, #24]
 80067fa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	6a1b      	ldr	r3, [r3, #32]
 8006802:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	697a      	ldr	r2, [r7, #20]
 800680a:	4313      	orrs	r3, r2
 800680c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006814:	f023 0303 	bic.w	r3, r3, #3
 8006818:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	689a      	ldr	r2, [r3, #8]
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	699b      	ldr	r3, [r3, #24]
 8006822:	021b      	lsls	r3, r3, #8
 8006824:	4313      	orrs	r3, r2
 8006826:	693a      	ldr	r2, [r7, #16]
 8006828:	4313      	orrs	r3, r2
 800682a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006832:	f023 030c 	bic.w	r3, r3, #12
 8006836:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800683e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006842:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	68da      	ldr	r2, [r3, #12]
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	69db      	ldr	r3, [r3, #28]
 800684c:	021b      	lsls	r3, r3, #8
 800684e:	4313      	orrs	r3, r2
 8006850:	693a      	ldr	r2, [r7, #16]
 8006852:	4313      	orrs	r3, r2
 8006854:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	691b      	ldr	r3, [r3, #16]
 800685a:	011a      	lsls	r2, r3, #4
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	6a1b      	ldr	r3, [r3, #32]
 8006860:	031b      	lsls	r3, r3, #12
 8006862:	4313      	orrs	r3, r2
 8006864:	693a      	ldr	r2, [r7, #16]
 8006866:	4313      	orrs	r3, r2
 8006868:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006870:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	685a      	ldr	r2, [r3, #4]
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	695b      	ldr	r3, [r3, #20]
 800687a:	011b      	lsls	r3, r3, #4
 800687c:	4313      	orrs	r3, r2
 800687e:	68fa      	ldr	r2, [r7, #12]
 8006880:	4313      	orrs	r3, r2
 8006882:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	697a      	ldr	r2, [r7, #20]
 800688a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	693a      	ldr	r2, [r7, #16]
 8006892:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	68fa      	ldr	r2, [r7, #12]
 800689a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2201      	movs	r2, #1
 80068a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2201      	movs	r2, #1
 80068a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2201      	movs	r2, #1
 80068b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2201      	movs	r2, #1
 80068b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2201      	movs	r2, #1
 80068c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2201      	movs	r2, #1
 80068c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068cc:	2300      	movs	r3, #0
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3718      	adds	r7, #24
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}
 80068d6:	bf00      	nop

080068d8 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b084      	sub	sp, #16
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
 80068e0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80068e8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80068f0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80068f8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006900:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a5d      	ldr	r2, [pc, #372]	; (8006a7c <HAL_TIM_Encoder_Start_IT+0x1a4>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d01d      	beq.n	8006948 <HAL_TIM_Encoder_Start_IT+0x70>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a5b      	ldr	r2, [pc, #364]	; (8006a80 <HAL_TIM_Encoder_Start_IT+0x1a8>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d018      	beq.n	8006948 <HAL_TIM_Encoder_Start_IT+0x70>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800691e:	d013      	beq.n	8006948 <HAL_TIM_Encoder_Start_IT+0x70>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a57      	ldr	r2, [pc, #348]	; (8006a84 <HAL_TIM_Encoder_Start_IT+0x1ac>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d00e      	beq.n	8006948 <HAL_TIM_Encoder_Start_IT+0x70>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a56      	ldr	r2, [pc, #344]	; (8006a88 <HAL_TIM_Encoder_Start_IT+0x1b0>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d009      	beq.n	8006948 <HAL_TIM_Encoder_Start_IT+0x70>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a54      	ldr	r2, [pc, #336]	; (8006a8c <HAL_TIM_Encoder_Start_IT+0x1b4>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d004      	beq.n	8006948 <HAL_TIM_Encoder_Start_IT+0x70>
 800693e:	f640 41e4 	movw	r1, #3300	; 0xce4
 8006942:	4853      	ldr	r0, [pc, #332]	; (8006a90 <HAL_TIM_Encoder_Start_IT+0x1b8>)
 8006944:	f7fb fd22 	bl	800238c <assert_failed>

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d110      	bne.n	8006970 <HAL_TIM_Encoder_Start_IT+0x98>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800694e:	7bfb      	ldrb	r3, [r7, #15]
 8006950:	2b01      	cmp	r3, #1
 8006952:	d102      	bne.n	800695a <HAL_TIM_Encoder_Start_IT+0x82>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006954:	7b7b      	ldrb	r3, [r7, #13]
 8006956:	2b01      	cmp	r3, #1
 8006958:	d001      	beq.n	800695e <HAL_TIM_Encoder_Start_IT+0x86>
    {
      return HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	e089      	b.n	8006a72 <HAL_TIM_Encoder_Start_IT+0x19a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2202      	movs	r2, #2
 8006962:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2202      	movs	r2, #2
 800696a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800696e:	e031      	b.n	80069d4 <HAL_TIM_Encoder_Start_IT+0xfc>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	2b04      	cmp	r3, #4
 8006974:	d110      	bne.n	8006998 <HAL_TIM_Encoder_Start_IT+0xc0>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006976:	7bbb      	ldrb	r3, [r7, #14]
 8006978:	2b01      	cmp	r3, #1
 800697a:	d102      	bne.n	8006982 <HAL_TIM_Encoder_Start_IT+0xaa>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800697c:	7b3b      	ldrb	r3, [r7, #12]
 800697e:	2b01      	cmp	r3, #1
 8006980:	d001      	beq.n	8006986 <HAL_TIM_Encoder_Start_IT+0xae>
    {
      return HAL_ERROR;
 8006982:	2301      	movs	r3, #1
 8006984:	e075      	b.n	8006a72 <HAL_TIM_Encoder_Start_IT+0x19a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2202      	movs	r2, #2
 800698a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2202      	movs	r2, #2
 8006992:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006996:	e01d      	b.n	80069d4 <HAL_TIM_Encoder_Start_IT+0xfc>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006998:	7bfb      	ldrb	r3, [r7, #15]
 800699a:	2b01      	cmp	r3, #1
 800699c:	d108      	bne.n	80069b0 <HAL_TIM_Encoder_Start_IT+0xd8>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800699e:	7bbb      	ldrb	r3, [r7, #14]
 80069a0:	2b01      	cmp	r3, #1
 80069a2:	d105      	bne.n	80069b0 <HAL_TIM_Encoder_Start_IT+0xd8>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80069a4:	7b7b      	ldrb	r3, [r7, #13]
 80069a6:	2b01      	cmp	r3, #1
 80069a8:	d102      	bne.n	80069b0 <HAL_TIM_Encoder_Start_IT+0xd8>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80069aa:	7b3b      	ldrb	r3, [r7, #12]
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	d001      	beq.n	80069b4 <HAL_TIM_Encoder_Start_IT+0xdc>
    {
      return HAL_ERROR;
 80069b0:	2301      	movs	r3, #1
 80069b2:	e05e      	b.n	8006a72 <HAL_TIM_Encoder_Start_IT+0x19a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2202      	movs	r2, #2
 80069b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2202      	movs	r2, #2
 80069c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2202      	movs	r2, #2
 80069c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2202      	movs	r2, #2
 80069d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d003      	beq.n	80069e2 <HAL_TIM_Encoder_Start_IT+0x10a>
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	2b04      	cmp	r3, #4
 80069de:	d010      	beq.n	8006a02 <HAL_TIM_Encoder_Start_IT+0x12a>
 80069e0:	e01f      	b.n	8006a22 <HAL_TIM_Encoder_Start_IT+0x14a>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	2201      	movs	r2, #1
 80069e8:	2100      	movs	r1, #0
 80069ea:	4618      	mov	r0, r3
 80069ec:	f001 f9bc 	bl	8007d68 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	68da      	ldr	r2, [r3, #12]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f042 0202 	orr.w	r2, r2, #2
 80069fe:	60da      	str	r2, [r3, #12]
      break;
 8006a00:	e02e      	b.n	8006a60 <HAL_TIM_Encoder_Start_IT+0x188>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	2201      	movs	r2, #1
 8006a08:	2104      	movs	r1, #4
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f001 f9ac 	bl	8007d68 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	68da      	ldr	r2, [r3, #12]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f042 0204 	orr.w	r2, r2, #4
 8006a1e:	60da      	str	r2, [r3, #12]
      break;
 8006a20:	e01e      	b.n	8006a60 <HAL_TIM_Encoder_Start_IT+0x188>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	2201      	movs	r2, #1
 8006a28:	2100      	movs	r1, #0
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f001 f99c 	bl	8007d68 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	2201      	movs	r2, #1
 8006a36:	2104      	movs	r1, #4
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f001 f995 	bl	8007d68 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	68da      	ldr	r2, [r3, #12]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f042 0202 	orr.w	r2, r2, #2
 8006a4c:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	68da      	ldr	r2, [r3, #12]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f042 0204 	orr.w	r2, r2, #4
 8006a5c:	60da      	str	r2, [r3, #12]
      break;
 8006a5e:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	681a      	ldr	r2, [r3, #0]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f042 0201 	orr.w	r2, r2, #1
 8006a6e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006a70:	2300      	movs	r3, #0
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3710      	adds	r7, #16
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}
 8006a7a:	bf00      	nop
 8006a7c:	40012c00 	.word	0x40012c00
 8006a80:	40013400 	.word	0x40013400
 8006a84:	40000400 	.word	0x40000400
 8006a88:	40000800 	.word	0x40000800
 8006a8c:	40000c00 	.word	0x40000c00
 8006a90:	08010678 	.word	0x08010678

08006a94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b082      	sub	sp, #8
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	691b      	ldr	r3, [r3, #16]
 8006aa2:	f003 0302 	and.w	r3, r3, #2
 8006aa6:	2b02      	cmp	r3, #2
 8006aa8:	d128      	bne.n	8006afc <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	68db      	ldr	r3, [r3, #12]
 8006ab0:	f003 0302 	and.w	r3, r3, #2
 8006ab4:	2b02      	cmp	r3, #2
 8006ab6:	d121      	bne.n	8006afc <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f06f 0202 	mvn.w	r2, #2
 8006ac0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2201      	movs	r2, #1
 8006ac6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	699b      	ldr	r3, [r3, #24]
 8006ace:	f003 0303 	and.w	r3, r3, #3
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d005      	beq.n	8006ae2 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	4798      	blx	r3
 8006ae0:	e009      	b.n	8006af6 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2200      	movs	r2, #0
 8006afa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	691b      	ldr	r3, [r3, #16]
 8006b02:	f003 0304 	and.w	r3, r3, #4
 8006b06:	2b04      	cmp	r3, #4
 8006b08:	d128      	bne.n	8006b5c <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	68db      	ldr	r3, [r3, #12]
 8006b10:	f003 0304 	and.w	r3, r3, #4
 8006b14:	2b04      	cmp	r3, #4
 8006b16:	d121      	bne.n	8006b5c <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f06f 0204 	mvn.w	r2, #4
 8006b20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2202      	movs	r2, #2
 8006b26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	699b      	ldr	r3, [r3, #24]
 8006b2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d005      	beq.n	8006b42 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	4798      	blx	r3
 8006b40:	e009      	b.n	8006b56 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	691b      	ldr	r3, [r3, #16]
 8006b62:	f003 0308 	and.w	r3, r3, #8
 8006b66:	2b08      	cmp	r3, #8
 8006b68:	d128      	bne.n	8006bbc <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	68db      	ldr	r3, [r3, #12]
 8006b70:	f003 0308 	and.w	r3, r3, #8
 8006b74:	2b08      	cmp	r3, #8
 8006b76:	d121      	bne.n	8006bbc <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f06f 0208 	mvn.w	r2, #8
 8006b80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2204      	movs	r2, #4
 8006b86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	69db      	ldr	r3, [r3, #28]
 8006b8e:	f003 0303 	and.w	r3, r3, #3
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d005      	beq.n	8006ba2 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	4798      	blx	r3
 8006ba0:	e009      	b.n	8006bb6 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	691b      	ldr	r3, [r3, #16]
 8006bc2:	f003 0310 	and.w	r3, r3, #16
 8006bc6:	2b10      	cmp	r3, #16
 8006bc8:	d128      	bne.n	8006c1c <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	68db      	ldr	r3, [r3, #12]
 8006bd0:	f003 0310 	and.w	r3, r3, #16
 8006bd4:	2b10      	cmp	r3, #16
 8006bd6:	d121      	bne.n	8006c1c <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f06f 0210 	mvn.w	r2, #16
 8006be0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2208      	movs	r2, #8
 8006be6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	69db      	ldr	r3, [r3, #28]
 8006bee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d005      	beq.n	8006c02 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	4798      	blx	r3
 8006c00:	e009      	b.n	8006c16 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	691b      	ldr	r3, [r3, #16]
 8006c22:	f003 0301 	and.w	r3, r3, #1
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	d110      	bne.n	8006c4c <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	68db      	ldr	r3, [r3, #12]
 8006c30:	f003 0301 	and.w	r3, r3, #1
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	d109      	bne.n	8006c4c <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f06f 0201 	mvn.w	r2, #1
 8006c40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	691b      	ldr	r3, [r3, #16]
 8006c52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c56:	2b80      	cmp	r3, #128	; 0x80
 8006c58:	d110      	bne.n	8006c7c <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	68db      	ldr	r3, [r3, #12]
 8006c60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c64:	2b80      	cmp	r3, #128	; 0x80
 8006c66:	d109      	bne.n	8006c7c <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006c70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	691b      	ldr	r3, [r3, #16]
 8006c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c86:	2b40      	cmp	r3, #64	; 0x40
 8006c88:	d110      	bne.n	8006cac <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	68db      	ldr	r3, [r3, #12]
 8006c90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c94:	2b40      	cmp	r3, #64	; 0x40
 8006c96:	d109      	bne.n	8006cac <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006ca0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	691b      	ldr	r3, [r3, #16]
 8006cb2:	f003 0320 	and.w	r3, r3, #32
 8006cb6:	2b20      	cmp	r3, #32
 8006cb8:	d110      	bne.n	8006cdc <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	68db      	ldr	r3, [r3, #12]
 8006cc0:	f003 0320 	and.w	r3, r3, #32
 8006cc4:	2b20      	cmp	r3, #32
 8006cc6:	d109      	bne.n	8006cdc <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f06f 0220 	mvn.w	r2, #32
 8006cd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006cdc:	bf00      	nop
 8006cde:	3708      	adds	r7, #8
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}

08006ce4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b084      	sub	sp, #16
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	60f8      	str	r0, [r7, #12]
 8006cec:	60b9      	str	r1, [r7, #8]
 8006cee:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d010      	beq.n	8006d18 <HAL_TIM_PWM_ConfigChannel+0x34>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2b04      	cmp	r3, #4
 8006cfa:	d00d      	beq.n	8006d18 <HAL_TIM_PWM_ConfigChannel+0x34>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2b08      	cmp	r3, #8
 8006d00:	d00a      	beq.n	8006d18 <HAL_TIM_PWM_ConfigChannel+0x34>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2b0c      	cmp	r3, #12
 8006d06:	d007      	beq.n	8006d18 <HAL_TIM_PWM_ConfigChannel+0x34>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2b3c      	cmp	r3, #60	; 0x3c
 8006d0c:	d004      	beq.n	8006d18 <HAL_TIM_PWM_ConfigChannel+0x34>
 8006d0e:	f241 0127 	movw	r1, #4135	; 0x1027
 8006d12:	4890      	ldr	r0, [pc, #576]	; (8006f54 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8006d14:	f7fb fb3a 	bl	800238c <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	2b60      	cmp	r3, #96	; 0x60
 8006d1e:	d008      	beq.n	8006d32 <HAL_TIM_PWM_ConfigChannel+0x4e>
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	2b70      	cmp	r3, #112	; 0x70
 8006d26:	d004      	beq.n	8006d32 <HAL_TIM_PWM_ConfigChannel+0x4e>
 8006d28:	f241 0128 	movw	r1, #4136	; 0x1028
 8006d2c:	4889      	ldr	r0, [pc, #548]	; (8006f54 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8006d2e:	f7fb fb2d 	bl	800238c <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	689b      	ldr	r3, [r3, #8]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d008      	beq.n	8006d4c <HAL_TIM_PWM_ConfigChannel+0x68>
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	689b      	ldr	r3, [r3, #8]
 8006d3e:	2b02      	cmp	r3, #2
 8006d40:	d004      	beq.n	8006d4c <HAL_TIM_PWM_ConfigChannel+0x68>
 8006d42:	f241 0129 	movw	r1, #4137	; 0x1029
 8006d46:	4883      	ldr	r0, [pc, #524]	; (8006f54 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8006d48:	f7fb fb20 	bl	800238c <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	691b      	ldr	r3, [r3, #16]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d008      	beq.n	8006d66 <HAL_TIM_PWM_ConfigChannel+0x82>
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	691b      	ldr	r3, [r3, #16]
 8006d58:	2b04      	cmp	r3, #4
 8006d5a:	d004      	beq.n	8006d66 <HAL_TIM_PWM_ConfigChannel+0x82>
 8006d5c:	f241 012a 	movw	r1, #4138	; 0x102a
 8006d60:	487c      	ldr	r0, [pc, #496]	; (8006f54 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8006d62:	f7fb fb13 	bl	800238c <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d101      	bne.n	8006d74 <HAL_TIM_PWM_ConfigChannel+0x90>
 8006d70:	2302      	movs	r3, #2
 8006d72:	e145      	b.n	8007000 <HAL_TIM_PWM_ConfigChannel+0x31c>
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2201      	movs	r2, #1
 8006d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2b0c      	cmp	r3, #12
 8006d80:	f200 8138 	bhi.w	8006ff4 <HAL_TIM_PWM_ConfigChannel+0x310>
 8006d84:	a201      	add	r2, pc, #4	; (adr r2, 8006d8c <HAL_TIM_PWM_ConfigChannel+0xa8>)
 8006d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d8a:	bf00      	nop
 8006d8c:	08006dc1 	.word	0x08006dc1
 8006d90:	08006ff5 	.word	0x08006ff5
 8006d94:	08006ff5 	.word	0x08006ff5
 8006d98:	08006ff5 	.word	0x08006ff5
 8006d9c:	08006e47 	.word	0x08006e47
 8006da0:	08006ff5 	.word	0x08006ff5
 8006da4:	08006ff5 	.word	0x08006ff5
 8006da8:	08006ff5 	.word	0x08006ff5
 8006dac:	08006ecf 	.word	0x08006ecf
 8006db0:	08006ff5 	.word	0x08006ff5
 8006db4:	08006ff5 	.word	0x08006ff5
 8006db8:	08006ff5 	.word	0x08006ff5
 8006dbc:	08006f6d 	.word	0x08006f6d
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a64      	ldr	r2, [pc, #400]	; (8006f58 <HAL_TIM_PWM_ConfigChannel+0x274>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d01d      	beq.n	8006e06 <HAL_TIM_PWM_ConfigChannel+0x122>
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a63      	ldr	r2, [pc, #396]	; (8006f5c <HAL_TIM_PWM_ConfigChannel+0x278>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d018      	beq.n	8006e06 <HAL_TIM_PWM_ConfigChannel+0x122>
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ddc:	d013      	beq.n	8006e06 <HAL_TIM_PWM_ConfigChannel+0x122>
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a5f      	ldr	r2, [pc, #380]	; (8006f60 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d00e      	beq.n	8006e06 <HAL_TIM_PWM_ConfigChannel+0x122>
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a5d      	ldr	r2, [pc, #372]	; (8006f64 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d009      	beq.n	8006e06 <HAL_TIM_PWM_ConfigChannel+0x122>
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a5c      	ldr	r2, [pc, #368]	; (8006f68 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d004      	beq.n	8006e06 <HAL_TIM_PWM_ConfigChannel+0x122>
 8006dfc:	f241 0134 	movw	r1, #4148	; 0x1034
 8006e00:	4854      	ldr	r0, [pc, #336]	; (8006f54 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8006e02:	f7fb fac3 	bl	800238c <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	68b9      	ldr	r1, [r7, #8]
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	f000 fcdb 	bl	80077c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	699a      	ldr	r2, [r3, #24]
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f042 0208 	orr.w	r2, r2, #8
 8006e20:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	699a      	ldr	r2, [r3, #24]
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f022 0204 	bic.w	r2, r2, #4
 8006e30:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	6999      	ldr	r1, [r3, #24]
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	691a      	ldr	r2, [r3, #16]
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	430a      	orrs	r2, r1
 8006e42:	619a      	str	r2, [r3, #24]
      break;
 8006e44:	e0d7      	b.n	8006ff6 <HAL_TIM_PWM_ConfigChannel+0x312>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a43      	ldr	r2, [pc, #268]	; (8006f58 <HAL_TIM_PWM_ConfigChannel+0x274>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d01d      	beq.n	8006e8c <HAL_TIM_PWM_ConfigChannel+0x1a8>
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a41      	ldr	r2, [pc, #260]	; (8006f5c <HAL_TIM_PWM_ConfigChannel+0x278>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d018      	beq.n	8006e8c <HAL_TIM_PWM_ConfigChannel+0x1a8>
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e62:	d013      	beq.n	8006e8c <HAL_TIM_PWM_ConfigChannel+0x1a8>
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a3d      	ldr	r2, [pc, #244]	; (8006f60 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d00e      	beq.n	8006e8c <HAL_TIM_PWM_ConfigChannel+0x1a8>
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a3c      	ldr	r2, [pc, #240]	; (8006f64 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d009      	beq.n	8006e8c <HAL_TIM_PWM_ConfigChannel+0x1a8>
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a3a      	ldr	r2, [pc, #232]	; (8006f68 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d004      	beq.n	8006e8c <HAL_TIM_PWM_ConfigChannel+0x1a8>
 8006e82:	f241 0145 	movw	r1, #4165	; 0x1045
 8006e86:	4833      	ldr	r0, [pc, #204]	; (8006f54 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8006e88:	f7fb fa80 	bl	800238c <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	68b9      	ldr	r1, [r7, #8]
 8006e92:	4618      	mov	r0, r3
 8006e94:	f000 fd32 	bl	80078fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	699a      	ldr	r2, [r3, #24]
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ea6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	699a      	ldr	r2, [r3, #24]
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006eb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	6999      	ldr	r1, [r3, #24]
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	691b      	ldr	r3, [r3, #16]
 8006ec2:	021a      	lsls	r2, r3, #8
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	430a      	orrs	r2, r1
 8006eca:	619a      	str	r2, [r3, #24]
      break;
 8006ecc:	e093      	b.n	8006ff6 <HAL_TIM_PWM_ConfigChannel+0x312>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a21      	ldr	r2, [pc, #132]	; (8006f58 <HAL_TIM_PWM_ConfigChannel+0x274>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d01d      	beq.n	8006f14 <HAL_TIM_PWM_ConfigChannel+0x230>
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a1f      	ldr	r2, [pc, #124]	; (8006f5c <HAL_TIM_PWM_ConfigChannel+0x278>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d018      	beq.n	8006f14 <HAL_TIM_PWM_ConfigChannel+0x230>
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006eea:	d013      	beq.n	8006f14 <HAL_TIM_PWM_ConfigChannel+0x230>
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a1b      	ldr	r2, [pc, #108]	; (8006f60 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d00e      	beq.n	8006f14 <HAL_TIM_PWM_ConfigChannel+0x230>
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a1a      	ldr	r2, [pc, #104]	; (8006f64 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d009      	beq.n	8006f14 <HAL_TIM_PWM_ConfigChannel+0x230>
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a18      	ldr	r2, [pc, #96]	; (8006f68 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d004      	beq.n	8006f14 <HAL_TIM_PWM_ConfigChannel+0x230>
 8006f0a:	f241 0156 	movw	r1, #4182	; 0x1056
 8006f0e:	4811      	ldr	r0, [pc, #68]	; (8006f54 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8006f10:	f7fb fa3c 	bl	800238c <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	68b9      	ldr	r1, [r7, #8]
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f000 fd8c 	bl	8007a38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	69da      	ldr	r2, [r3, #28]
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f042 0208 	orr.w	r2, r2, #8
 8006f2e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	69da      	ldr	r2, [r3, #28]
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f022 0204 	bic.w	r2, r2, #4
 8006f3e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	69d9      	ldr	r1, [r3, #28]
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	691a      	ldr	r2, [r3, #16]
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	430a      	orrs	r2, r1
 8006f50:	61da      	str	r2, [r3, #28]
      break;
 8006f52:	e050      	b.n	8006ff6 <HAL_TIM_PWM_ConfigChannel+0x312>
 8006f54:	08010678 	.word	0x08010678
 8006f58:	40012c00 	.word	0x40012c00
 8006f5c:	40013400 	.word	0x40013400
 8006f60:	40000400 	.word	0x40000400
 8006f64:	40000800 	.word	0x40000800
 8006f68:	40000c00 	.word	0x40000c00
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a25      	ldr	r2, [pc, #148]	; (8007008 <HAL_TIM_PWM_ConfigChannel+0x324>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d01d      	beq.n	8006fb2 <HAL_TIM_PWM_ConfigChannel+0x2ce>
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a24      	ldr	r2, [pc, #144]	; (800700c <HAL_TIM_PWM_ConfigChannel+0x328>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d018      	beq.n	8006fb2 <HAL_TIM_PWM_ConfigChannel+0x2ce>
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f88:	d013      	beq.n	8006fb2 <HAL_TIM_PWM_ConfigChannel+0x2ce>
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a20      	ldr	r2, [pc, #128]	; (8007010 <HAL_TIM_PWM_ConfigChannel+0x32c>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d00e      	beq.n	8006fb2 <HAL_TIM_PWM_ConfigChannel+0x2ce>
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a1e      	ldr	r2, [pc, #120]	; (8007014 <HAL_TIM_PWM_ConfigChannel+0x330>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d009      	beq.n	8006fb2 <HAL_TIM_PWM_ConfigChannel+0x2ce>
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a1d      	ldr	r2, [pc, #116]	; (8007018 <HAL_TIM_PWM_ConfigChannel+0x334>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d004      	beq.n	8006fb2 <HAL_TIM_PWM_ConfigChannel+0x2ce>
 8006fa8:	f241 0167 	movw	r1, #4199	; 0x1067
 8006fac:	481b      	ldr	r0, [pc, #108]	; (800701c <HAL_TIM_PWM_ConfigChannel+0x338>)
 8006fae:	f7fb f9ed 	bl	800238c <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	68b9      	ldr	r1, [r7, #8]
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f000 fddb 	bl	8007b74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	69da      	ldr	r2, [r3, #28]
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006fcc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	69da      	ldr	r2, [r3, #28]
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006fdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	69d9      	ldr	r1, [r3, #28]
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	691b      	ldr	r3, [r3, #16]
 8006fe8:	021a      	lsls	r2, r3, #8
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	430a      	orrs	r2, r1
 8006ff0:	61da      	str	r2, [r3, #28]
      break;
 8006ff2:	e000      	b.n	8006ff6 <HAL_TIM_PWM_ConfigChannel+0x312>
    }

    default:
      break;
 8006ff4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ffe:	2300      	movs	r3, #0
}
 8007000:	4618      	mov	r0, r3
 8007002:	3710      	adds	r7, #16
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}
 8007008:	40012c00 	.word	0x40012c00
 800700c:	40013400 	.word	0x40013400
 8007010:	40000400 	.word	0x40000400
 8007014:	40000800 	.word	0x40000800
 8007018:	40000c00 	.word	0x40000c00
 800701c:	08010678 	.word	0x08010678

08007020 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b084      	sub	sp, #16
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
 8007028:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007030:	2b01      	cmp	r3, #1
 8007032:	d101      	bne.n	8007038 <HAL_TIM_ConfigClockSource+0x18>
 8007034:	2302      	movs	r3, #2
 8007036:	e2f5      	b.n	8007624 <HAL_TIM_ConfigClockSource+0x604>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2201      	movs	r2, #1
 800703c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2202      	movs	r2, #2
 8007044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007050:	d029      	beq.n	80070a6 <HAL_TIM_ConfigClockSource+0x86>
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800705a:	d024      	beq.n	80070a6 <HAL_TIM_ConfigClockSource+0x86>
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d020      	beq.n	80070a6 <HAL_TIM_ConfigClockSource+0x86>
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	2b10      	cmp	r3, #16
 800706a:	d01c      	beq.n	80070a6 <HAL_TIM_ConfigClockSource+0x86>
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	2b20      	cmp	r3, #32
 8007072:	d018      	beq.n	80070a6 <HAL_TIM_ConfigClockSource+0x86>
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	2b30      	cmp	r3, #48	; 0x30
 800707a:	d014      	beq.n	80070a6 <HAL_TIM_ConfigClockSource+0x86>
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	2b40      	cmp	r3, #64	; 0x40
 8007082:	d010      	beq.n	80070a6 <HAL_TIM_ConfigClockSource+0x86>
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	2b50      	cmp	r3, #80	; 0x50
 800708a:	d00c      	beq.n	80070a6 <HAL_TIM_ConfigClockSource+0x86>
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	2b60      	cmp	r3, #96	; 0x60
 8007092:	d008      	beq.n	80070a6 <HAL_TIM_ConfigClockSource+0x86>
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	2b70      	cmp	r3, #112	; 0x70
 800709a:	d004      	beq.n	80070a6 <HAL_TIM_ConfigClockSource+0x86>
 800709c:	f241 4132 	movw	r1, #5170	; 0x1432
 80070a0:	487c      	ldr	r0, [pc, #496]	; (8007294 <HAL_TIM_ConfigClockSource+0x274>)
 80070a2:	f7fb f973 	bl	800238c <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	689b      	ldr	r3, [r3, #8]
 80070ac:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80070b4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80070bc:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	68fa      	ldr	r2, [r7, #12]
 80070c4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070ce:	f000 80f1 	beq.w	80072b4 <HAL_TIM_ConfigClockSource+0x294>
 80070d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070d6:	f200 8299 	bhi.w	800760c <HAL_TIM_ConfigClockSource+0x5ec>
 80070da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070de:	d02d      	beq.n	800713c <HAL_TIM_ConfigClockSource+0x11c>
 80070e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070e4:	f200 8292 	bhi.w	800760c <HAL_TIM_ConfigClockSource+0x5ec>
 80070e8:	2b70      	cmp	r3, #112	; 0x70
 80070ea:	d05d      	beq.n	80071a8 <HAL_TIM_ConfigClockSource+0x188>
 80070ec:	2b70      	cmp	r3, #112	; 0x70
 80070ee:	f200 828d 	bhi.w	800760c <HAL_TIM_ConfigClockSource+0x5ec>
 80070f2:	2b60      	cmp	r3, #96	; 0x60
 80070f4:	f000 81a5 	beq.w	8007442 <HAL_TIM_ConfigClockSource+0x422>
 80070f8:	2b60      	cmp	r3, #96	; 0x60
 80070fa:	f200 8287 	bhi.w	800760c <HAL_TIM_ConfigClockSource+0x5ec>
 80070fe:	2b50      	cmp	r3, #80	; 0x50
 8007100:	f000 8149 	beq.w	8007396 <HAL_TIM_ConfigClockSource+0x376>
 8007104:	2b50      	cmp	r3, #80	; 0x50
 8007106:	f200 8281 	bhi.w	800760c <HAL_TIM_ConfigClockSource+0x5ec>
 800710a:	2b40      	cmp	r3, #64	; 0x40
 800710c:	f000 81fc 	beq.w	8007508 <HAL_TIM_ConfigClockSource+0x4e8>
 8007110:	2b40      	cmp	r3, #64	; 0x40
 8007112:	f200 827b 	bhi.w	800760c <HAL_TIM_ConfigClockSource+0x5ec>
 8007116:	2b30      	cmp	r3, #48	; 0x30
 8007118:	f000 824c 	beq.w	80075b4 <HAL_TIM_ConfigClockSource+0x594>
 800711c:	2b30      	cmp	r3, #48	; 0x30
 800711e:	f200 8275 	bhi.w	800760c <HAL_TIM_ConfigClockSource+0x5ec>
 8007122:	2b20      	cmp	r3, #32
 8007124:	f000 8246 	beq.w	80075b4 <HAL_TIM_ConfigClockSource+0x594>
 8007128:	2b20      	cmp	r3, #32
 800712a:	f200 826f 	bhi.w	800760c <HAL_TIM_ConfigClockSource+0x5ec>
 800712e:	2b00      	cmp	r3, #0
 8007130:	f000 8240 	beq.w	80075b4 <HAL_TIM_ConfigClockSource+0x594>
 8007134:	2b10      	cmp	r3, #16
 8007136:	f000 823d 	beq.w	80075b4 <HAL_TIM_ConfigClockSource+0x594>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800713a:	e267      	b.n	800760c <HAL_TIM_ConfigClockSource+0x5ec>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a55      	ldr	r2, [pc, #340]	; (8007298 <HAL_TIM_ConfigClockSource+0x278>)
 8007142:	4293      	cmp	r3, r2
 8007144:	f000 8264 	beq.w	8007610 <HAL_TIM_ConfigClockSource+0x5f0>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a53      	ldr	r2, [pc, #332]	; (800729c <HAL_TIM_ConfigClockSource+0x27c>)
 800714e:	4293      	cmp	r3, r2
 8007150:	f000 825e 	beq.w	8007610 <HAL_TIM_ConfigClockSource+0x5f0>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800715c:	f000 8258 	beq.w	8007610 <HAL_TIM_ConfigClockSource+0x5f0>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a4e      	ldr	r2, [pc, #312]	; (80072a0 <HAL_TIM_ConfigClockSource+0x280>)
 8007166:	4293      	cmp	r3, r2
 8007168:	f000 8252 	beq.w	8007610 <HAL_TIM_ConfigClockSource+0x5f0>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a4c      	ldr	r2, [pc, #304]	; (80072a4 <HAL_TIM_ConfigClockSource+0x284>)
 8007172:	4293      	cmp	r3, r2
 8007174:	f000 824c 	beq.w	8007610 <HAL_TIM_ConfigClockSource+0x5f0>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a4a      	ldr	r2, [pc, #296]	; (80072a8 <HAL_TIM_ConfigClockSource+0x288>)
 800717e:	4293      	cmp	r3, r2
 8007180:	f000 8246 	beq.w	8007610 <HAL_TIM_ConfigClockSource+0x5f0>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a48      	ldr	r2, [pc, #288]	; (80072ac <HAL_TIM_ConfigClockSource+0x28c>)
 800718a:	4293      	cmp	r3, r2
 800718c:	f000 8240 	beq.w	8007610 <HAL_TIM_ConfigClockSource+0x5f0>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4a46      	ldr	r2, [pc, #280]	; (80072b0 <HAL_TIM_ConfigClockSource+0x290>)
 8007196:	4293      	cmp	r3, r2
 8007198:	f000 823a 	beq.w	8007610 <HAL_TIM_ConfigClockSource+0x5f0>
 800719c:	f241 413e 	movw	r1, #5182	; 0x143e
 80071a0:	483c      	ldr	r0, [pc, #240]	; (8007294 <HAL_TIM_ConfigClockSource+0x274>)
 80071a2:	f7fb f8f3 	bl	800238c <assert_failed>
      break;
 80071a6:	e233      	b.n	8007610 <HAL_TIM_ConfigClockSource+0x5f0>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a3a      	ldr	r2, [pc, #232]	; (8007298 <HAL_TIM_ConfigClockSource+0x278>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d01d      	beq.n	80071ee <HAL_TIM_ConfigClockSource+0x1ce>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a39      	ldr	r2, [pc, #228]	; (800729c <HAL_TIM_ConfigClockSource+0x27c>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d018      	beq.n	80071ee <HAL_TIM_ConfigClockSource+0x1ce>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071c4:	d013      	beq.n	80071ee <HAL_TIM_ConfigClockSource+0x1ce>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a35      	ldr	r2, [pc, #212]	; (80072a0 <HAL_TIM_ConfigClockSource+0x280>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d00e      	beq.n	80071ee <HAL_TIM_ConfigClockSource+0x1ce>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a33      	ldr	r2, [pc, #204]	; (80072a4 <HAL_TIM_ConfigClockSource+0x284>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d009      	beq.n	80071ee <HAL_TIM_ConfigClockSource+0x1ce>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a32      	ldr	r2, [pc, #200]	; (80072a8 <HAL_TIM_ConfigClockSource+0x288>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d004      	beq.n	80071ee <HAL_TIM_ConfigClockSource+0x1ce>
 80071e4:	f241 4145 	movw	r1, #5189	; 0x1445
 80071e8:	482a      	ldr	r0, [pc, #168]	; (8007294 <HAL_TIM_ConfigClockSource+0x274>)
 80071ea:	f7fb f8cf 	bl	800238c <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	689b      	ldr	r3, [r3, #8]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d013      	beq.n	800721e <HAL_TIM_ConfigClockSource+0x1fe>
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	689b      	ldr	r3, [r3, #8]
 80071fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071fe:	d00e      	beq.n	800721e <HAL_TIM_ConfigClockSource+0x1fe>
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	689b      	ldr	r3, [r3, #8]
 8007204:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007208:	d009      	beq.n	800721e <HAL_TIM_ConfigClockSource+0x1fe>
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	689b      	ldr	r3, [r3, #8]
 800720e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007212:	d004      	beq.n	800721e <HAL_TIM_ConfigClockSource+0x1fe>
 8007214:	f241 4148 	movw	r1, #5192	; 0x1448
 8007218:	481e      	ldr	r0, [pc, #120]	; (8007294 <HAL_TIM_ConfigClockSource+0x274>)
 800721a:	f7fb f8b7 	bl	800238c <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007226:	d014      	beq.n	8007252 <HAL_TIM_ConfigClockSource+0x232>
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d010      	beq.n	8007252 <HAL_TIM_ConfigClockSource+0x232>
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d00c      	beq.n	8007252 <HAL_TIM_ConfigClockSource+0x232>
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	2b02      	cmp	r3, #2
 800723e:	d008      	beq.n	8007252 <HAL_TIM_ConfigClockSource+0x232>
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	2b0a      	cmp	r3, #10
 8007246:	d004      	beq.n	8007252 <HAL_TIM_ConfigClockSource+0x232>
 8007248:	f241 4149 	movw	r1, #5193	; 0x1449
 800724c:	4811      	ldr	r0, [pc, #68]	; (8007294 <HAL_TIM_ConfigClockSource+0x274>)
 800724e:	f7fb f89d 	bl	800238c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	68db      	ldr	r3, [r3, #12]
 8007256:	2b0f      	cmp	r3, #15
 8007258:	d904      	bls.n	8007264 <HAL_TIM_ConfigClockSource+0x244>
 800725a:	f241 414a 	movw	r1, #5194	; 0x144a
 800725e:	480d      	ldr	r0, [pc, #52]	; (8007294 <HAL_TIM_ConfigClockSource+0x274>)
 8007260:	f7fb f894 	bl	800238c <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6818      	ldr	r0, [r3, #0]
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	6899      	ldr	r1, [r3, #8]
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	685a      	ldr	r2, [r3, #4]
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	68db      	ldr	r3, [r3, #12]
 8007274:	f000 fd59 	bl	8007d2a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	689b      	ldr	r3, [r3, #8]
 800727e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007286:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	68fa      	ldr	r2, [r7, #12]
 800728e:	609a      	str	r2, [r3, #8]
      break;
 8007290:	e1bf      	b.n	8007612 <HAL_TIM_ConfigClockSource+0x5f2>
 8007292:	bf00      	nop
 8007294:	08010678 	.word	0x08010678
 8007298:	40012c00 	.word	0x40012c00
 800729c:	40013400 	.word	0x40013400
 80072a0:	40000400 	.word	0x40000400
 80072a4:	40000800 	.word	0x40000800
 80072a8:	40000c00 	.word	0x40000c00
 80072ac:	40001000 	.word	0x40001000
 80072b0:	40001400 	.word	0x40001400
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a8d      	ldr	r2, [pc, #564]	; (80074f0 <HAL_TIM_ConfigClockSource+0x4d0>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d01d      	beq.n	80072fa <HAL_TIM_ConfigClockSource+0x2da>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4a8c      	ldr	r2, [pc, #560]	; (80074f4 <HAL_TIM_ConfigClockSource+0x4d4>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d018      	beq.n	80072fa <HAL_TIM_ConfigClockSource+0x2da>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072d0:	d013      	beq.n	80072fa <HAL_TIM_ConfigClockSource+0x2da>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4a88      	ldr	r2, [pc, #544]	; (80074f8 <HAL_TIM_ConfigClockSource+0x4d8>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d00e      	beq.n	80072fa <HAL_TIM_ConfigClockSource+0x2da>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a86      	ldr	r2, [pc, #536]	; (80074fc <HAL_TIM_ConfigClockSource+0x4dc>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d009      	beq.n	80072fa <HAL_TIM_ConfigClockSource+0x2da>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a85      	ldr	r2, [pc, #532]	; (8007500 <HAL_TIM_ConfigClockSource+0x4e0>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d004      	beq.n	80072fa <HAL_TIM_ConfigClockSource+0x2da>
 80072f0:	f241 415d 	movw	r1, #5213	; 0x145d
 80072f4:	4883      	ldr	r0, [pc, #524]	; (8007504 <HAL_TIM_ConfigClockSource+0x4e4>)
 80072f6:	f7fb f849 	bl	800238c <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	689b      	ldr	r3, [r3, #8]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d013      	beq.n	800732a <HAL_TIM_ConfigClockSource+0x30a>
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	689b      	ldr	r3, [r3, #8]
 8007306:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800730a:	d00e      	beq.n	800732a <HAL_TIM_ConfigClockSource+0x30a>
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	689b      	ldr	r3, [r3, #8]
 8007310:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007314:	d009      	beq.n	800732a <HAL_TIM_ConfigClockSource+0x30a>
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	689b      	ldr	r3, [r3, #8]
 800731a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800731e:	d004      	beq.n	800732a <HAL_TIM_ConfigClockSource+0x30a>
 8007320:	f44f 51a3 	mov.w	r1, #5216	; 0x1460
 8007324:	4877      	ldr	r0, [pc, #476]	; (8007504 <HAL_TIM_ConfigClockSource+0x4e4>)
 8007326:	f7fb f831 	bl	800238c <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	685b      	ldr	r3, [r3, #4]
 800732e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007332:	d014      	beq.n	800735e <HAL_TIM_ConfigClockSource+0x33e>
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d010      	beq.n	800735e <HAL_TIM_ConfigClockSource+0x33e>
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d00c      	beq.n	800735e <HAL_TIM_ConfigClockSource+0x33e>
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	2b02      	cmp	r3, #2
 800734a:	d008      	beq.n	800735e <HAL_TIM_ConfigClockSource+0x33e>
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	2b0a      	cmp	r3, #10
 8007352:	d004      	beq.n	800735e <HAL_TIM_ConfigClockSource+0x33e>
 8007354:	f241 4161 	movw	r1, #5217	; 0x1461
 8007358:	486a      	ldr	r0, [pc, #424]	; (8007504 <HAL_TIM_ConfigClockSource+0x4e4>)
 800735a:	f7fb f817 	bl	800238c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	68db      	ldr	r3, [r3, #12]
 8007362:	2b0f      	cmp	r3, #15
 8007364:	d904      	bls.n	8007370 <HAL_TIM_ConfigClockSource+0x350>
 8007366:	f241 4162 	movw	r1, #5218	; 0x1462
 800736a:	4866      	ldr	r0, [pc, #408]	; (8007504 <HAL_TIM_ConfigClockSource+0x4e4>)
 800736c:	f7fb f80e 	bl	800238c <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6818      	ldr	r0, [r3, #0]
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	6899      	ldr	r1, [r3, #8]
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	685a      	ldr	r2, [r3, #4]
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	68db      	ldr	r3, [r3, #12]
 8007380:	f000 fcd3 	bl	8007d2a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	689a      	ldr	r2, [r3, #8]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007392:	609a      	str	r2, [r3, #8]
      break;
 8007394:	e13d      	b.n	8007612 <HAL_TIM_ConfigClockSource+0x5f2>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a55      	ldr	r2, [pc, #340]	; (80074f0 <HAL_TIM_ConfigClockSource+0x4d0>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d01d      	beq.n	80073dc <HAL_TIM_ConfigClockSource+0x3bc>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a53      	ldr	r2, [pc, #332]	; (80074f4 <HAL_TIM_ConfigClockSource+0x4d4>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d018      	beq.n	80073dc <HAL_TIM_ConfigClockSource+0x3bc>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073b2:	d013      	beq.n	80073dc <HAL_TIM_ConfigClockSource+0x3bc>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a4f      	ldr	r2, [pc, #316]	; (80074f8 <HAL_TIM_ConfigClockSource+0x4d8>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d00e      	beq.n	80073dc <HAL_TIM_ConfigClockSource+0x3bc>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4a4e      	ldr	r2, [pc, #312]	; (80074fc <HAL_TIM_ConfigClockSource+0x4dc>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d009      	beq.n	80073dc <HAL_TIM_ConfigClockSource+0x3bc>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a4c      	ldr	r2, [pc, #304]	; (8007500 <HAL_TIM_ConfigClockSource+0x4e0>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d004      	beq.n	80073dc <HAL_TIM_ConfigClockSource+0x3bc>
 80073d2:	f241 4171 	movw	r1, #5233	; 0x1471
 80073d6:	484b      	ldr	r0, [pc, #300]	; (8007504 <HAL_TIM_ConfigClockSource+0x4e4>)
 80073d8:	f7fa ffd8 	bl	800238c <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073e4:	d014      	beq.n	8007410 <HAL_TIM_ConfigClockSource+0x3f0>
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	685b      	ldr	r3, [r3, #4]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d010      	beq.n	8007410 <HAL_TIM_ConfigClockSource+0x3f0>
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	685b      	ldr	r3, [r3, #4]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d00c      	beq.n	8007410 <HAL_TIM_ConfigClockSource+0x3f0>
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	2b02      	cmp	r3, #2
 80073fc:	d008      	beq.n	8007410 <HAL_TIM_ConfigClockSource+0x3f0>
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	685b      	ldr	r3, [r3, #4]
 8007402:	2b0a      	cmp	r3, #10
 8007404:	d004      	beq.n	8007410 <HAL_TIM_ConfigClockSource+0x3f0>
 8007406:	f241 4174 	movw	r1, #5236	; 0x1474
 800740a:	483e      	ldr	r0, [pc, #248]	; (8007504 <HAL_TIM_ConfigClockSource+0x4e4>)
 800740c:	f7fa ffbe 	bl	800238c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	68db      	ldr	r3, [r3, #12]
 8007414:	2b0f      	cmp	r3, #15
 8007416:	d904      	bls.n	8007422 <HAL_TIM_ConfigClockSource+0x402>
 8007418:	f241 4175 	movw	r1, #5237	; 0x1475
 800741c:	4839      	ldr	r0, [pc, #228]	; (8007504 <HAL_TIM_ConfigClockSource+0x4e4>)
 800741e:	f7fa ffb5 	bl	800238c <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6818      	ldr	r0, [r3, #0]
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	6859      	ldr	r1, [r3, #4]
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	68db      	ldr	r3, [r3, #12]
 800742e:	461a      	mov	r2, r3
 8007430:	f000 fc04 	bl	8007c3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	2150      	movs	r1, #80	; 0x50
 800743a:	4618      	mov	r0, r3
 800743c:	f000 fc5b 	bl	8007cf6 <TIM_ITRx_SetConfig>
      break;
 8007440:	e0e7      	b.n	8007612 <HAL_TIM_ConfigClockSource+0x5f2>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	4a2a      	ldr	r2, [pc, #168]	; (80074f0 <HAL_TIM_ConfigClockSource+0x4d0>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d01d      	beq.n	8007488 <HAL_TIM_ConfigClockSource+0x468>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4a28      	ldr	r2, [pc, #160]	; (80074f4 <HAL_TIM_ConfigClockSource+0x4d4>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d018      	beq.n	8007488 <HAL_TIM_ConfigClockSource+0x468>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800745e:	d013      	beq.n	8007488 <HAL_TIM_ConfigClockSource+0x468>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a24      	ldr	r2, [pc, #144]	; (80074f8 <HAL_TIM_ConfigClockSource+0x4d8>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d00e      	beq.n	8007488 <HAL_TIM_ConfigClockSource+0x468>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4a23      	ldr	r2, [pc, #140]	; (80074fc <HAL_TIM_ConfigClockSource+0x4dc>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d009      	beq.n	8007488 <HAL_TIM_ConfigClockSource+0x468>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4a21      	ldr	r2, [pc, #132]	; (8007500 <HAL_TIM_ConfigClockSource+0x4e0>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d004      	beq.n	8007488 <HAL_TIM_ConfigClockSource+0x468>
 800747e:	f241 4181 	movw	r1, #5249	; 0x1481
 8007482:	4820      	ldr	r0, [pc, #128]	; (8007504 <HAL_TIM_ConfigClockSource+0x4e4>)
 8007484:	f7fa ff82 	bl	800238c <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007490:	d014      	beq.n	80074bc <HAL_TIM_ConfigClockSource+0x49c>
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	685b      	ldr	r3, [r3, #4]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d010      	beq.n	80074bc <HAL_TIM_ConfigClockSource+0x49c>
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d00c      	beq.n	80074bc <HAL_TIM_ConfigClockSource+0x49c>
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	685b      	ldr	r3, [r3, #4]
 80074a6:	2b02      	cmp	r3, #2
 80074a8:	d008      	beq.n	80074bc <HAL_TIM_ConfigClockSource+0x49c>
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	2b0a      	cmp	r3, #10
 80074b0:	d004      	beq.n	80074bc <HAL_TIM_ConfigClockSource+0x49c>
 80074b2:	f241 4184 	movw	r1, #5252	; 0x1484
 80074b6:	4813      	ldr	r0, [pc, #76]	; (8007504 <HAL_TIM_ConfigClockSource+0x4e4>)
 80074b8:	f7fa ff68 	bl	800238c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	68db      	ldr	r3, [r3, #12]
 80074c0:	2b0f      	cmp	r3, #15
 80074c2:	d904      	bls.n	80074ce <HAL_TIM_ConfigClockSource+0x4ae>
 80074c4:	f241 4185 	movw	r1, #5253	; 0x1485
 80074c8:	480e      	ldr	r0, [pc, #56]	; (8007504 <HAL_TIM_ConfigClockSource+0x4e4>)
 80074ca:	f7fa ff5f 	bl	800238c <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6818      	ldr	r0, [r3, #0]
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	6859      	ldr	r1, [r3, #4]
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	68db      	ldr	r3, [r3, #12]
 80074da:	461a      	mov	r2, r3
 80074dc:	f000 fbdc 	bl	8007c98 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	2160      	movs	r1, #96	; 0x60
 80074e6:	4618      	mov	r0, r3
 80074e8:	f000 fc05 	bl	8007cf6 <TIM_ITRx_SetConfig>
      break;
 80074ec:	e091      	b.n	8007612 <HAL_TIM_ConfigClockSource+0x5f2>
 80074ee:	bf00      	nop
 80074f0:	40012c00 	.word	0x40012c00
 80074f4:	40013400 	.word	0x40013400
 80074f8:	40000400 	.word	0x40000400
 80074fc:	40000800 	.word	0x40000800
 8007500:	40000c00 	.word	0x40000c00
 8007504:	08010678 	.word	0x08010678
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a47      	ldr	r2, [pc, #284]	; (800762c <HAL_TIM_ConfigClockSource+0x60c>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d01d      	beq.n	800754e <HAL_TIM_ConfigClockSource+0x52e>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4a46      	ldr	r2, [pc, #280]	; (8007630 <HAL_TIM_ConfigClockSource+0x610>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d018      	beq.n	800754e <HAL_TIM_ConfigClockSource+0x52e>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007524:	d013      	beq.n	800754e <HAL_TIM_ConfigClockSource+0x52e>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4a42      	ldr	r2, [pc, #264]	; (8007634 <HAL_TIM_ConfigClockSource+0x614>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d00e      	beq.n	800754e <HAL_TIM_ConfigClockSource+0x52e>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4a40      	ldr	r2, [pc, #256]	; (8007638 <HAL_TIM_ConfigClockSource+0x618>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d009      	beq.n	800754e <HAL_TIM_ConfigClockSource+0x52e>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4a3f      	ldr	r2, [pc, #252]	; (800763c <HAL_TIM_ConfigClockSource+0x61c>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d004      	beq.n	800754e <HAL_TIM_ConfigClockSource+0x52e>
 8007544:	f241 4191 	movw	r1, #5265	; 0x1491
 8007548:	483d      	ldr	r0, [pc, #244]	; (8007640 <HAL_TIM_ConfigClockSource+0x620>)
 800754a:	f7fa ff1f 	bl	800238c <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007556:	d014      	beq.n	8007582 <HAL_TIM_ConfigClockSource+0x562>
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	685b      	ldr	r3, [r3, #4]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d010      	beq.n	8007582 <HAL_TIM_ConfigClockSource+0x562>
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d00c      	beq.n	8007582 <HAL_TIM_ConfigClockSource+0x562>
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	685b      	ldr	r3, [r3, #4]
 800756c:	2b02      	cmp	r3, #2
 800756e:	d008      	beq.n	8007582 <HAL_TIM_ConfigClockSource+0x562>
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	2b0a      	cmp	r3, #10
 8007576:	d004      	beq.n	8007582 <HAL_TIM_ConfigClockSource+0x562>
 8007578:	f241 4194 	movw	r1, #5268	; 0x1494
 800757c:	4830      	ldr	r0, [pc, #192]	; (8007640 <HAL_TIM_ConfigClockSource+0x620>)
 800757e:	f7fa ff05 	bl	800238c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	68db      	ldr	r3, [r3, #12]
 8007586:	2b0f      	cmp	r3, #15
 8007588:	d904      	bls.n	8007594 <HAL_TIM_ConfigClockSource+0x574>
 800758a:	f241 4195 	movw	r1, #5269	; 0x1495
 800758e:	482c      	ldr	r0, [pc, #176]	; (8007640 <HAL_TIM_ConfigClockSource+0x620>)
 8007590:	f7fa fefc 	bl	800238c <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6818      	ldr	r0, [r3, #0]
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	6859      	ldr	r1, [r3, #4]
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	68db      	ldr	r3, [r3, #12]
 80075a0:	461a      	mov	r2, r3
 80075a2:	f000 fb4b 	bl	8007c3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	2140      	movs	r1, #64	; 0x40
 80075ac:	4618      	mov	r0, r3
 80075ae:	f000 fba2 	bl	8007cf6 <TIM_ITRx_SetConfig>
      break;
 80075b2:	e02e      	b.n	8007612 <HAL_TIM_ConfigClockSource+0x5f2>
        assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a1c      	ldr	r2, [pc, #112]	; (800762c <HAL_TIM_ConfigClockSource+0x60c>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d01d      	beq.n	80075fa <HAL_TIM_ConfigClockSource+0x5da>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4a1b      	ldr	r2, [pc, #108]	; (8007630 <HAL_TIM_ConfigClockSource+0x610>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d018      	beq.n	80075fa <HAL_TIM_ConfigClockSource+0x5da>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075d0:	d013      	beq.n	80075fa <HAL_TIM_ConfigClockSource+0x5da>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a17      	ldr	r2, [pc, #92]	; (8007634 <HAL_TIM_ConfigClockSource+0x614>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d00e      	beq.n	80075fa <HAL_TIM_ConfigClockSource+0x5da>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a15      	ldr	r2, [pc, #84]	; (8007638 <HAL_TIM_ConfigClockSource+0x618>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d009      	beq.n	80075fa <HAL_TIM_ConfigClockSource+0x5da>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4a14      	ldr	r2, [pc, #80]	; (800763c <HAL_TIM_ConfigClockSource+0x61c>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d004      	beq.n	80075fa <HAL_TIM_ConfigClockSource+0x5da>
 80075f0:	f241 41a4 	movw	r1, #5284	; 0x14a4
 80075f4:	4812      	ldr	r0, [pc, #72]	; (8007640 <HAL_TIM_ConfigClockSource+0x620>)
 80075f6:	f7fa fec9 	bl	800238c <assert_failed>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681a      	ldr	r2, [r3, #0]
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4619      	mov	r1, r3
 8007604:	4610      	mov	r0, r2
 8007606:	f000 fb76 	bl	8007cf6 <TIM_ITRx_SetConfig>
        break;
 800760a:	e002      	b.n	8007612 <HAL_TIM_ConfigClockSource+0x5f2>
      break;
 800760c:	bf00      	nop
 800760e:	e000      	b.n	8007612 <HAL_TIM_ConfigClockSource+0x5f2>
      break;
 8007610:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2201      	movs	r2, #1
 8007616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2200      	movs	r2, #0
 800761e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007622:	2300      	movs	r3, #0
}
 8007624:	4618      	mov	r0, r3
 8007626:	3710      	adds	r7, #16
 8007628:	46bd      	mov	sp, r7
 800762a:	bd80      	pop	{r7, pc}
 800762c:	40012c00 	.word	0x40012c00
 8007630:	40013400 	.word	0x40013400
 8007634:	40000400 	.word	0x40000400
 8007638:	40000800 	.word	0x40000800
 800763c:	40000c00 	.word	0x40000c00
 8007640:	08010678 	.word	0x08010678

08007644 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007644:	b480      	push	{r7}
 8007646:	b083      	sub	sp, #12
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800764c:	bf00      	nop
 800764e:	370c      	adds	r7, #12
 8007650:	46bd      	mov	sp, r7
 8007652:	bc80      	pop	{r7}
 8007654:	4770      	bx	lr

08007656 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007656:	b480      	push	{r7}
 8007658:	b083      	sub	sp, #12
 800765a:	af00      	add	r7, sp, #0
 800765c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800765e:	bf00      	nop
 8007660:	370c      	adds	r7, #12
 8007662:	46bd      	mov	sp, r7
 8007664:	bc80      	pop	{r7}
 8007666:	4770      	bx	lr

08007668 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007668:	b480      	push	{r7}
 800766a:	b083      	sub	sp, #12
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8007670:	bf00      	nop
 8007672:	370c      	adds	r7, #12
 8007674:	46bd      	mov	sp, r7
 8007676:	bc80      	pop	{r7}
 8007678:	4770      	bx	lr

0800767a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800767a:	b480      	push	{r7}
 800767c:	b083      	sub	sp, #12
 800767e:	af00      	add	r7, sp, #0
 8007680:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007682:	bf00      	nop
 8007684:	370c      	adds	r7, #12
 8007686:	46bd      	mov	sp, r7
 8007688:	bc80      	pop	{r7}
 800768a:	4770      	bx	lr

0800768c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800768c:	b480      	push	{r7}
 800768e:	b083      	sub	sp, #12
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8007694:	bf00      	nop
 8007696:	370c      	adds	r7, #12
 8007698:	46bd      	mov	sp, r7
 800769a:	bc80      	pop	{r7}
 800769c:	4770      	bx	lr

0800769e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800769e:	b480      	push	{r7}
 80076a0:	b083      	sub	sp, #12
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80076a6:	bf00      	nop
 80076a8:	370c      	adds	r7, #12
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bc80      	pop	{r7}
 80076ae:	4770      	bx	lr

080076b0 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b083      	sub	sp, #12
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 80076b8:	bf00      	nop
 80076ba:	370c      	adds	r7, #12
 80076bc:	46bd      	mov	sp, r7
 80076be:	bc80      	pop	{r7}
 80076c0:	4770      	bx	lr

080076c2 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80076c2:	b480      	push	{r7}
 80076c4:	b083      	sub	sp, #12
 80076c6:	af00      	add	r7, sp, #0
 80076c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80076ca:	bf00      	nop
 80076cc:	370c      	adds	r7, #12
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bc80      	pop	{r7}
 80076d2:	4770      	bx	lr

080076d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b085      	sub	sp, #20
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
 80076dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	4a33      	ldr	r2, [pc, #204]	; (80077b4 <TIM_Base_SetConfig+0xe0>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d013      	beq.n	8007714 <TIM_Base_SetConfig+0x40>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	4a32      	ldr	r2, [pc, #200]	; (80077b8 <TIM_Base_SetConfig+0xe4>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d00f      	beq.n	8007714 <TIM_Base_SetConfig+0x40>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076fa:	d00b      	beq.n	8007714 <TIM_Base_SetConfig+0x40>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	4a2f      	ldr	r2, [pc, #188]	; (80077bc <TIM_Base_SetConfig+0xe8>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d007      	beq.n	8007714 <TIM_Base_SetConfig+0x40>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	4a2e      	ldr	r2, [pc, #184]	; (80077c0 <TIM_Base_SetConfig+0xec>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d003      	beq.n	8007714 <TIM_Base_SetConfig+0x40>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	4a2d      	ldr	r2, [pc, #180]	; (80077c4 <TIM_Base_SetConfig+0xf0>)
 8007710:	4293      	cmp	r3, r2
 8007712:	d108      	bne.n	8007726 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800771a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	685b      	ldr	r3, [r3, #4]
 8007720:	68fa      	ldr	r2, [r7, #12]
 8007722:	4313      	orrs	r3, r2
 8007724:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	4a22      	ldr	r2, [pc, #136]	; (80077b4 <TIM_Base_SetConfig+0xe0>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d013      	beq.n	8007756 <TIM_Base_SetConfig+0x82>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	4a21      	ldr	r2, [pc, #132]	; (80077b8 <TIM_Base_SetConfig+0xe4>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d00f      	beq.n	8007756 <TIM_Base_SetConfig+0x82>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800773c:	d00b      	beq.n	8007756 <TIM_Base_SetConfig+0x82>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	4a1e      	ldr	r2, [pc, #120]	; (80077bc <TIM_Base_SetConfig+0xe8>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d007      	beq.n	8007756 <TIM_Base_SetConfig+0x82>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	4a1d      	ldr	r2, [pc, #116]	; (80077c0 <TIM_Base_SetConfig+0xec>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d003      	beq.n	8007756 <TIM_Base_SetConfig+0x82>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	4a1c      	ldr	r2, [pc, #112]	; (80077c4 <TIM_Base_SetConfig+0xf0>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d108      	bne.n	8007768 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800775c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	68db      	ldr	r3, [r3, #12]
 8007762:	68fa      	ldr	r2, [r7, #12]
 8007764:	4313      	orrs	r3, r2
 8007766:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	695b      	ldr	r3, [r3, #20]
 8007772:	4313      	orrs	r3, r2
 8007774:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	68fa      	ldr	r2, [r7, #12]
 800777a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	689a      	ldr	r2, [r3, #8]
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	681a      	ldr	r2, [r3, #0]
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	4a09      	ldr	r2, [pc, #36]	; (80077b4 <TIM_Base_SetConfig+0xe0>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d003      	beq.n	800779c <TIM_Base_SetConfig+0xc8>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	4a08      	ldr	r2, [pc, #32]	; (80077b8 <TIM_Base_SetConfig+0xe4>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d103      	bne.n	80077a4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	691a      	ldr	r2, [r3, #16]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2201      	movs	r2, #1
 80077a8:	615a      	str	r2, [r3, #20]
}
 80077aa:	bf00      	nop
 80077ac:	3714      	adds	r7, #20
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bc80      	pop	{r7}
 80077b2:	4770      	bx	lr
 80077b4:	40012c00 	.word	0x40012c00
 80077b8:	40013400 	.word	0x40013400
 80077bc:	40000400 	.word	0x40000400
 80077c0:	40000800 	.word	0x40000800
 80077c4:	40000c00 	.word	0x40000c00

080077c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b086      	sub	sp, #24
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
 80077d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6a1b      	ldr	r3, [r3, #32]
 80077d6:	f023 0201 	bic.w	r2, r3, #1
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6a1b      	ldr	r3, [r3, #32]
 80077e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	685b      	ldr	r3, [r3, #4]
 80077e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	699b      	ldr	r3, [r3, #24]
 80077ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	f023 0303 	bic.w	r3, r3, #3
 80077fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	68fa      	ldr	r2, [r7, #12]
 8007806:	4313      	orrs	r3, r2
 8007808:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800780a:	697b      	ldr	r3, [r7, #20]
 800780c:	f023 0302 	bic.w	r3, r3, #2
 8007810:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	689b      	ldr	r3, [r3, #8]
 8007816:	697a      	ldr	r2, [r7, #20]
 8007818:	4313      	orrs	r3, r2
 800781a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	4a34      	ldr	r2, [pc, #208]	; (80078f0 <TIM_OC1_SetConfig+0x128>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d003      	beq.n	800782c <TIM_OC1_SetConfig+0x64>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	4a33      	ldr	r2, [pc, #204]	; (80078f4 <TIM_OC1_SetConfig+0x12c>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d119      	bne.n	8007860 <TIM_OC1_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	68db      	ldr	r3, [r3, #12]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d008      	beq.n	8007846 <TIM_OC1_SetConfig+0x7e>
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	68db      	ldr	r3, [r3, #12]
 8007838:	2b08      	cmp	r3, #8
 800783a:	d004      	beq.n	8007846 <TIM_OC1_SetConfig+0x7e>
 800783c:	f641 2141 	movw	r1, #6721	; 0x1a41
 8007840:	482d      	ldr	r0, [pc, #180]	; (80078f8 <TIM_OC1_SetConfig+0x130>)
 8007842:	f7fa fda3 	bl	800238c <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	f023 0308 	bic.w	r3, r3, #8
 800784c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	68db      	ldr	r3, [r3, #12]
 8007852:	697a      	ldr	r2, [r7, #20]
 8007854:	4313      	orrs	r3, r2
 8007856:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	f023 0304 	bic.w	r3, r3, #4
 800785e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	4a23      	ldr	r2, [pc, #140]	; (80078f0 <TIM_OC1_SetConfig+0x128>)
 8007864:	4293      	cmp	r3, r2
 8007866:	d003      	beq.n	8007870 <TIM_OC1_SetConfig+0xa8>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	4a22      	ldr	r2, [pc, #136]	; (80078f4 <TIM_OC1_SetConfig+0x12c>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d12d      	bne.n	80078cc <TIM_OC1_SetConfig+0x104>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	699b      	ldr	r3, [r3, #24]
 8007874:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007878:	d008      	beq.n	800788c <TIM_OC1_SetConfig+0xc4>
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	699b      	ldr	r3, [r3, #24]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d004      	beq.n	800788c <TIM_OC1_SetConfig+0xc4>
 8007882:	f641 214e 	movw	r1, #6734	; 0x1a4e
 8007886:	481c      	ldr	r0, [pc, #112]	; (80078f8 <TIM_OC1_SetConfig+0x130>)
 8007888:	f7fa fd80 	bl	800238c <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	695b      	ldr	r3, [r3, #20]
 8007890:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007894:	d008      	beq.n	80078a8 <TIM_OC1_SetConfig+0xe0>
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	695b      	ldr	r3, [r3, #20]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d004      	beq.n	80078a8 <TIM_OC1_SetConfig+0xe0>
 800789e:	f641 214f 	movw	r1, #6735	; 0x1a4f
 80078a2:	4815      	ldr	r0, [pc, #84]	; (80078f8 <TIM_OC1_SetConfig+0x130>)
 80078a4:	f7fa fd72 	bl	800238c <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80078a8:	693b      	ldr	r3, [r7, #16]
 80078aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80078b0:	693b      	ldr	r3, [r7, #16]
 80078b2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80078b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	695b      	ldr	r3, [r3, #20]
 80078bc:	693a      	ldr	r2, [r7, #16]
 80078be:	4313      	orrs	r3, r2
 80078c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	699b      	ldr	r3, [r3, #24]
 80078c6:	693a      	ldr	r2, [r7, #16]
 80078c8:	4313      	orrs	r3, r2
 80078ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	693a      	ldr	r2, [r7, #16]
 80078d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	68fa      	ldr	r2, [r7, #12]
 80078d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	685a      	ldr	r2, [r3, #4]
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	697a      	ldr	r2, [r7, #20]
 80078e4:	621a      	str	r2, [r3, #32]
}
 80078e6:	bf00      	nop
 80078e8:	3718      	adds	r7, #24
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}
 80078ee:	bf00      	nop
 80078f0:	40012c00 	.word	0x40012c00
 80078f4:	40013400 	.word	0x40013400
 80078f8:	08010678 	.word	0x08010678

080078fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b086      	sub	sp, #24
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
 8007904:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6a1b      	ldr	r3, [r3, #32]
 800790a:	f023 0210 	bic.w	r2, r3, #16
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6a1b      	ldr	r3, [r3, #32]
 8007916:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	685b      	ldr	r3, [r3, #4]
 800791c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	699b      	ldr	r3, [r3, #24]
 8007922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800792a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007932:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	021b      	lsls	r3, r3, #8
 800793a:	68fa      	ldr	r2, [r7, #12]
 800793c:	4313      	orrs	r3, r2
 800793e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	f023 0320 	bic.w	r3, r3, #32
 8007946:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	689b      	ldr	r3, [r3, #8]
 800794c:	011b      	lsls	r3, r3, #4
 800794e:	697a      	ldr	r2, [r7, #20]
 8007950:	4313      	orrs	r3, r2
 8007952:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	4a35      	ldr	r2, [pc, #212]	; (8007a2c <TIM_OC2_SetConfig+0x130>)
 8007958:	4293      	cmp	r3, r2
 800795a:	d003      	beq.n	8007964 <TIM_OC2_SetConfig+0x68>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	4a34      	ldr	r2, [pc, #208]	; (8007a30 <TIM_OC2_SetConfig+0x134>)
 8007960:	4293      	cmp	r3, r2
 8007962:	d11a      	bne.n	800799a <TIM_OC2_SetConfig+0x9e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	68db      	ldr	r3, [r3, #12]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d008      	beq.n	800797e <TIM_OC2_SetConfig+0x82>
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	68db      	ldr	r3, [r3, #12]
 8007970:	2b08      	cmp	r3, #8
 8007972:	d004      	beq.n	800797e <TIM_OC2_SetConfig+0x82>
 8007974:	f641 218c 	movw	r1, #6796	; 0x1a8c
 8007978:	482e      	ldr	r0, [pc, #184]	; (8007a34 <TIM_OC2_SetConfig+0x138>)
 800797a:	f7fa fd07 	bl	800238c <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007984:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	68db      	ldr	r3, [r3, #12]
 800798a:	011b      	lsls	r3, r3, #4
 800798c:	697a      	ldr	r2, [r7, #20]
 800798e:	4313      	orrs	r3, r2
 8007990:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007998:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	4a23      	ldr	r2, [pc, #140]	; (8007a2c <TIM_OC2_SetConfig+0x130>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d003      	beq.n	80079aa <TIM_OC2_SetConfig+0xae>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	4a22      	ldr	r2, [pc, #136]	; (8007a30 <TIM_OC2_SetConfig+0x134>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d12f      	bne.n	8007a0a <TIM_OC2_SetConfig+0x10e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	699b      	ldr	r3, [r3, #24]
 80079ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079b2:	d008      	beq.n	80079c6 <TIM_OC2_SetConfig+0xca>
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	699b      	ldr	r3, [r3, #24]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d004      	beq.n	80079c6 <TIM_OC2_SetConfig+0xca>
 80079bc:	f641 219a 	movw	r1, #6810	; 0x1a9a
 80079c0:	481c      	ldr	r0, [pc, #112]	; (8007a34 <TIM_OC2_SetConfig+0x138>)
 80079c2:	f7fa fce3 	bl	800238c <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	695b      	ldr	r3, [r3, #20]
 80079ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079ce:	d008      	beq.n	80079e2 <TIM_OC2_SetConfig+0xe6>
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	695b      	ldr	r3, [r3, #20]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d004      	beq.n	80079e2 <TIM_OC2_SetConfig+0xe6>
 80079d8:	f641 219b 	movw	r1, #6811	; 0x1a9b
 80079dc:	4815      	ldr	r0, [pc, #84]	; (8007a34 <TIM_OC2_SetConfig+0x138>)
 80079de:	f7fa fcd5 	bl	800238c <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80079e2:	693b      	ldr	r3, [r7, #16]
 80079e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80079e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80079ea:	693b      	ldr	r3, [r7, #16]
 80079ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80079f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	695b      	ldr	r3, [r3, #20]
 80079f6:	009b      	lsls	r3, r3, #2
 80079f8:	693a      	ldr	r2, [r7, #16]
 80079fa:	4313      	orrs	r3, r2
 80079fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	699b      	ldr	r3, [r3, #24]
 8007a02:	009b      	lsls	r3, r3, #2
 8007a04:	693a      	ldr	r2, [r7, #16]
 8007a06:	4313      	orrs	r3, r2
 8007a08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	693a      	ldr	r2, [r7, #16]
 8007a0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	68fa      	ldr	r2, [r7, #12]
 8007a14:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	685a      	ldr	r2, [r3, #4]
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	697a      	ldr	r2, [r7, #20]
 8007a22:	621a      	str	r2, [r3, #32]
}
 8007a24:	bf00      	nop
 8007a26:	3718      	adds	r7, #24
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}
 8007a2c:	40012c00 	.word	0x40012c00
 8007a30:	40013400 	.word	0x40013400
 8007a34:	08010678 	.word	0x08010678

08007a38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b086      	sub	sp, #24
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
 8007a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6a1b      	ldr	r3, [r3, #32]
 8007a46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6a1b      	ldr	r3, [r3, #32]
 8007a52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	685b      	ldr	r3, [r3, #4]
 8007a58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	69db      	ldr	r3, [r3, #28]
 8007a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	f023 0303 	bic.w	r3, r3, #3
 8007a6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	68fa      	ldr	r2, [r7, #12]
 8007a76:	4313      	orrs	r3, r2
 8007a78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007a7a:	697b      	ldr	r3, [r7, #20]
 8007a7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	689b      	ldr	r3, [r3, #8]
 8007a86:	021b      	lsls	r3, r3, #8
 8007a88:	697a      	ldr	r2, [r7, #20]
 8007a8a:	4313      	orrs	r3, r2
 8007a8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	4a35      	ldr	r2, [pc, #212]	; (8007b68 <TIM_OC3_SetConfig+0x130>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d003      	beq.n	8007a9e <TIM_OC3_SetConfig+0x66>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	4a34      	ldr	r2, [pc, #208]	; (8007b6c <TIM_OC3_SetConfig+0x134>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d11a      	bne.n	8007ad4 <TIM_OC3_SetConfig+0x9c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	68db      	ldr	r3, [r3, #12]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d008      	beq.n	8007ab8 <TIM_OC3_SetConfig+0x80>
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	68db      	ldr	r3, [r3, #12]
 8007aaa:	2b08      	cmp	r3, #8
 8007aac:	d004      	beq.n	8007ab8 <TIM_OC3_SetConfig+0x80>
 8007aae:	f641 21d7 	movw	r1, #6871	; 0x1ad7
 8007ab2:	482f      	ldr	r0, [pc, #188]	; (8007b70 <TIM_OC3_SetConfig+0x138>)
 8007ab4:	f7fa fc6a 	bl	800238c <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007ab8:	697b      	ldr	r3, [r7, #20]
 8007aba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007abe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	68db      	ldr	r3, [r3, #12]
 8007ac4:	021b      	lsls	r3, r3, #8
 8007ac6:	697a      	ldr	r2, [r7, #20]
 8007ac8:	4313      	orrs	r3, r2
 8007aca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007acc:	697b      	ldr	r3, [r7, #20]
 8007ace:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007ad2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	4a24      	ldr	r2, [pc, #144]	; (8007b68 <TIM_OC3_SetConfig+0x130>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d003      	beq.n	8007ae4 <TIM_OC3_SetConfig+0xac>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	4a23      	ldr	r2, [pc, #140]	; (8007b6c <TIM_OC3_SetConfig+0x134>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d12f      	bne.n	8007b44 <TIM_OC3_SetConfig+0x10c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	699b      	ldr	r3, [r3, #24]
 8007ae8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007aec:	d008      	beq.n	8007b00 <TIM_OC3_SetConfig+0xc8>
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	699b      	ldr	r3, [r3, #24]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d004      	beq.n	8007b00 <TIM_OC3_SetConfig+0xc8>
 8007af6:	f641 21e4 	movw	r1, #6884	; 0x1ae4
 8007afa:	481d      	ldr	r0, [pc, #116]	; (8007b70 <TIM_OC3_SetConfig+0x138>)
 8007afc:	f7fa fc46 	bl	800238c <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	695b      	ldr	r3, [r3, #20]
 8007b04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b08:	d008      	beq.n	8007b1c <TIM_OC3_SetConfig+0xe4>
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	695b      	ldr	r3, [r3, #20]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d004      	beq.n	8007b1c <TIM_OC3_SetConfig+0xe4>
 8007b12:	f641 21e5 	movw	r1, #6885	; 0x1ae5
 8007b16:	4816      	ldr	r0, [pc, #88]	; (8007b70 <TIM_OC3_SetConfig+0x138>)
 8007b18:	f7fa fc38 	bl	800238c <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b22:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007b2a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	695b      	ldr	r3, [r3, #20]
 8007b30:	011b      	lsls	r3, r3, #4
 8007b32:	693a      	ldr	r2, [r7, #16]
 8007b34:	4313      	orrs	r3, r2
 8007b36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	699b      	ldr	r3, [r3, #24]
 8007b3c:	011b      	lsls	r3, r3, #4
 8007b3e:	693a      	ldr	r2, [r7, #16]
 8007b40:	4313      	orrs	r3, r2
 8007b42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	693a      	ldr	r2, [r7, #16]
 8007b48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	68fa      	ldr	r2, [r7, #12]
 8007b4e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	685a      	ldr	r2, [r3, #4]
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	697a      	ldr	r2, [r7, #20]
 8007b5c:	621a      	str	r2, [r3, #32]
}
 8007b5e:	bf00      	nop
 8007b60:	3718      	adds	r7, #24
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}
 8007b66:	bf00      	nop
 8007b68:	40012c00 	.word	0x40012c00
 8007b6c:	40013400 	.word	0x40013400
 8007b70:	08010678 	.word	0x08010678

08007b74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b086      	sub	sp, #24
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
 8007b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6a1b      	ldr	r3, [r3, #32]
 8007b82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6a1b      	ldr	r3, [r3, #32]
 8007b8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	69db      	ldr	r3, [r3, #28]
 8007b9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ba2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007baa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	021b      	lsls	r3, r3, #8
 8007bb2:	68fa      	ldr	r2, [r7, #12]
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007bb8:	693b      	ldr	r3, [r7, #16]
 8007bba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007bbe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	689b      	ldr	r3, [r3, #8]
 8007bc4:	031b      	lsls	r3, r3, #12
 8007bc6:	693a      	ldr	r2, [r7, #16]
 8007bc8:	4313      	orrs	r3, r2
 8007bca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	4a18      	ldr	r2, [pc, #96]	; (8007c30 <TIM_OC4_SetConfig+0xbc>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d003      	beq.n	8007bdc <TIM_OC4_SetConfig+0x68>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	4a17      	ldr	r2, [pc, #92]	; (8007c34 <TIM_OC4_SetConfig+0xc0>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d117      	bne.n	8007c0c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	695b      	ldr	r3, [r3, #20]
 8007be0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007be4:	d008      	beq.n	8007bf8 <TIM_OC4_SetConfig+0x84>
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	695b      	ldr	r3, [r3, #20]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d004      	beq.n	8007bf8 <TIM_OC4_SetConfig+0x84>
 8007bee:	f641 3123 	movw	r1, #6947	; 0x1b23
 8007bf2:	4811      	ldr	r0, [pc, #68]	; (8007c38 <TIM_OC4_SetConfig+0xc4>)
 8007bf4:	f7fa fbca 	bl	800238c <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007bfe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	695b      	ldr	r3, [r3, #20]
 8007c04:	019b      	lsls	r3, r3, #6
 8007c06:	697a      	ldr	r2, [r7, #20]
 8007c08:	4313      	orrs	r3, r2
 8007c0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	697a      	ldr	r2, [r7, #20]
 8007c10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	68fa      	ldr	r2, [r7, #12]
 8007c16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	685a      	ldr	r2, [r3, #4]
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	693a      	ldr	r2, [r7, #16]
 8007c24:	621a      	str	r2, [r3, #32]
}
 8007c26:	bf00      	nop
 8007c28:	3718      	adds	r7, #24
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}
 8007c2e:	bf00      	nop
 8007c30:	40012c00 	.word	0x40012c00
 8007c34:	40013400 	.word	0x40013400
 8007c38:	08010678 	.word	0x08010678

08007c3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b087      	sub	sp, #28
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	60f8      	str	r0, [r7, #12]
 8007c44:	60b9      	str	r1, [r7, #8]
 8007c46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	6a1b      	ldr	r3, [r3, #32]
 8007c4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	6a1b      	ldr	r3, [r3, #32]
 8007c52:	f023 0201 	bic.w	r2, r3, #1
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	699b      	ldr	r3, [r3, #24]
 8007c5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007c66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	011b      	lsls	r3, r3, #4
 8007c6c:	693a      	ldr	r2, [r7, #16]
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	f023 030a 	bic.w	r3, r3, #10
 8007c78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007c7a:	697a      	ldr	r2, [r7, #20]
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	693a      	ldr	r2, [r7, #16]
 8007c86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	697a      	ldr	r2, [r7, #20]
 8007c8c:	621a      	str	r2, [r3, #32]
}
 8007c8e:	bf00      	nop
 8007c90:	371c      	adds	r7, #28
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bc80      	pop	{r7}
 8007c96:	4770      	bx	lr

08007c98 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b087      	sub	sp, #28
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	60f8      	str	r0, [r7, #12]
 8007ca0:	60b9      	str	r1, [r7, #8]
 8007ca2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	6a1b      	ldr	r3, [r3, #32]
 8007ca8:	f023 0210 	bic.w	r2, r3, #16
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	699b      	ldr	r3, [r3, #24]
 8007cb4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	6a1b      	ldr	r3, [r3, #32]
 8007cba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007cc2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	031b      	lsls	r3, r3, #12
 8007cc8:	697a      	ldr	r2, [r7, #20]
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007cce:	693b      	ldr	r3, [r7, #16]
 8007cd0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007cd4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	011b      	lsls	r3, r3, #4
 8007cda:	693a      	ldr	r2, [r7, #16]
 8007cdc:	4313      	orrs	r3, r2
 8007cde:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	697a      	ldr	r2, [r7, #20]
 8007ce4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	693a      	ldr	r2, [r7, #16]
 8007cea:	621a      	str	r2, [r3, #32]
}
 8007cec:	bf00      	nop
 8007cee:	371c      	adds	r7, #28
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bc80      	pop	{r7}
 8007cf4:	4770      	bx	lr

08007cf6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007cf6:	b480      	push	{r7}
 8007cf8:	b085      	sub	sp, #20
 8007cfa:	af00      	add	r7, sp, #0
 8007cfc:	6078      	str	r0, [r7, #4]
 8007cfe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	689b      	ldr	r3, [r3, #8]
 8007d04:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d0c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007d0e:	683a      	ldr	r2, [r7, #0]
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	4313      	orrs	r3, r2
 8007d14:	f043 0307 	orr.w	r3, r3, #7
 8007d18:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	68fa      	ldr	r2, [r7, #12]
 8007d1e:	609a      	str	r2, [r3, #8]
}
 8007d20:	bf00      	nop
 8007d22:	3714      	adds	r7, #20
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bc80      	pop	{r7}
 8007d28:	4770      	bx	lr

08007d2a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007d2a:	b480      	push	{r7}
 8007d2c:	b087      	sub	sp, #28
 8007d2e:	af00      	add	r7, sp, #0
 8007d30:	60f8      	str	r0, [r7, #12]
 8007d32:	60b9      	str	r1, [r7, #8]
 8007d34:	607a      	str	r2, [r7, #4]
 8007d36:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	689b      	ldr	r3, [r3, #8]
 8007d3c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d3e:	697b      	ldr	r3, [r7, #20]
 8007d40:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d44:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	021a      	lsls	r2, r3, #8
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	431a      	orrs	r2, r3
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	4313      	orrs	r3, r2
 8007d52:	697a      	ldr	r2, [r7, #20]
 8007d54:	4313      	orrs	r3, r2
 8007d56:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	697a      	ldr	r2, [r7, #20]
 8007d5c:	609a      	str	r2, [r3, #8]
}
 8007d5e:	bf00      	nop
 8007d60:	371c      	adds	r7, #28
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bc80      	pop	{r7}
 8007d66:	4770      	bx	lr

08007d68 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b086      	sub	sp, #24
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	60f8      	str	r0, [r7, #12]
 8007d70:	60b9      	str	r1, [r7, #8]
 8007d72:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	4a26      	ldr	r2, [pc, #152]	; (8007e10 <TIM_CCxChannelCmd+0xa8>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d018      	beq.n	8007dae <TIM_CCxChannelCmd+0x46>
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	4a25      	ldr	r2, [pc, #148]	; (8007e14 <TIM_CCxChannelCmd+0xac>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d014      	beq.n	8007dae <TIM_CCxChannelCmd+0x46>
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d8a:	d010      	beq.n	8007dae <TIM_CCxChannelCmd+0x46>
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	4a22      	ldr	r2, [pc, #136]	; (8007e18 <TIM_CCxChannelCmd+0xb0>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d00c      	beq.n	8007dae <TIM_CCxChannelCmd+0x46>
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	4a21      	ldr	r2, [pc, #132]	; (8007e1c <TIM_CCxChannelCmd+0xb4>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d008      	beq.n	8007dae <TIM_CCxChannelCmd+0x46>
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	4a20      	ldr	r2, [pc, #128]	; (8007e20 <TIM_CCxChannelCmd+0xb8>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d004      	beq.n	8007dae <TIM_CCxChannelCmd+0x46>
 8007da4:	f641 5109 	movw	r1, #7433	; 0x1d09
 8007da8:	481e      	ldr	r0, [pc, #120]	; (8007e24 <TIM_CCxChannelCmd+0xbc>)
 8007daa:	f7fa faef 	bl	800238c <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d010      	beq.n	8007dd6 <TIM_CCxChannelCmd+0x6e>
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	2b04      	cmp	r3, #4
 8007db8:	d00d      	beq.n	8007dd6 <TIM_CCxChannelCmd+0x6e>
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	2b08      	cmp	r3, #8
 8007dbe:	d00a      	beq.n	8007dd6 <TIM_CCxChannelCmd+0x6e>
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	2b0c      	cmp	r3, #12
 8007dc4:	d007      	beq.n	8007dd6 <TIM_CCxChannelCmd+0x6e>
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	2b3c      	cmp	r3, #60	; 0x3c
 8007dca:	d004      	beq.n	8007dd6 <TIM_CCxChannelCmd+0x6e>
 8007dcc:	f641 510a 	movw	r1, #7434	; 0x1d0a
 8007dd0:	4814      	ldr	r0, [pc, #80]	; (8007e24 <TIM_CCxChannelCmd+0xbc>)
 8007dd2:	f7fa fadb 	bl	800238c <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007dd6:	68bb      	ldr	r3, [r7, #8]
 8007dd8:	f003 031f 	and.w	r3, r3, #31
 8007ddc:	2201      	movs	r2, #1
 8007dde:	fa02 f303 	lsl.w	r3, r2, r3
 8007de2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	6a1a      	ldr	r2, [r3, #32]
 8007de8:	697b      	ldr	r3, [r7, #20]
 8007dea:	43db      	mvns	r3, r3
 8007dec:	401a      	ands	r2, r3
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	6a1a      	ldr	r2, [r3, #32]
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	f003 031f 	and.w	r3, r3, #31
 8007dfc:	6879      	ldr	r1, [r7, #4]
 8007dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8007e02:	431a      	orrs	r2, r3
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	621a      	str	r2, [r3, #32]
}
 8007e08:	bf00      	nop
 8007e0a:	3718      	adds	r7, #24
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}
 8007e10:	40012c00 	.word	0x40012c00
 8007e14:	40013400 	.word	0x40013400
 8007e18:	40000400 	.word	0x40000400
 8007e1c:	40000800 	.word	0x40000800
 8007e20:	40000c00 	.word	0x40000c00
 8007e24:	08010678 	.word	0x08010678

08007e28 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b083      	sub	sp, #12
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	4a1c      	ldr	r2, [pc, #112]	; (8007ea4 <TIM_ResetCallback+0x7c>)
 8007e34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	4a1b      	ldr	r2, [pc, #108]	; (8007ea8 <TIM_ResetCallback+0x80>)
 8007e3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	4a1a      	ldr	r2, [pc, #104]	; (8007eac <TIM_ResetCallback+0x84>)
 8007e44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	4a19      	ldr	r2, [pc, #100]	; (8007eb0 <TIM_ResetCallback+0x88>)
 8007e4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	4a18      	ldr	r2, [pc, #96]	; (8007eb4 <TIM_ResetCallback+0x8c>)
 8007e54:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	4a17      	ldr	r2, [pc, #92]	; (8007eb8 <TIM_ResetCallback+0x90>)
 8007e5c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	4a16      	ldr	r2, [pc, #88]	; (8007ebc <TIM_ResetCallback+0x94>)
 8007e64:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	4a15      	ldr	r2, [pc, #84]	; (8007ec0 <TIM_ResetCallback+0x98>)
 8007e6c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	4a14      	ldr	r2, [pc, #80]	; (8007ec4 <TIM_ResetCallback+0x9c>)
 8007e74:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	4a13      	ldr	r2, [pc, #76]	; (8007ec8 <TIM_ResetCallback+0xa0>)
 8007e7c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	4a12      	ldr	r2, [pc, #72]	; (8007ecc <TIM_ResetCallback+0xa4>)
 8007e84:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	4a11      	ldr	r2, [pc, #68]	; (8007ed0 <TIM_ResetCallback+0xa8>)
 8007e8c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	4a10      	ldr	r2, [pc, #64]	; (8007ed4 <TIM_ResetCallback+0xac>)
 8007e94:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8007e98:	bf00      	nop
 8007e9a:	370c      	adds	r7, #12
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bc80      	pop	{r7}
 8007ea0:	4770      	bx	lr
 8007ea2:	bf00      	nop
 8007ea4:	08002309 	.word	0x08002309
 8007ea8:	08007645 	.word	0x08007645
 8007eac:	0800769f 	.word	0x0800769f
 8007eb0:	080076b1 	.word	0x080076b1
 8007eb4:	080022c1 	.word	0x080022c1
 8007eb8:	08007669 	.word	0x08007669
 8007ebc:	08007657 	.word	0x08007657
 8007ec0:	0800767b 	.word	0x0800767b
 8007ec4:	0800768d 	.word	0x0800768d
 8007ec8:	080076c3 	.word	0x080076c3
 8007ecc:	08008211 	.word	0x08008211
 8007ed0:	08008223 	.word	0x08008223
 8007ed4:	08008235 	.word	0x08008235

08007ed8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b084      	sub	sp, #16
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
 8007ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	4a5c      	ldr	r2, [pc, #368]	; (8008058 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d027      	beq.n	8007f3c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	4a5a      	ldr	r2, [pc, #360]	; (800805c <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d022      	beq.n	8007f3c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007efe:	d01d      	beq.n	8007f3c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4a56      	ldr	r2, [pc, #344]	; (8008060 <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d018      	beq.n	8007f3c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	4a55      	ldr	r2, [pc, #340]	; (8008064 <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d013      	beq.n	8007f3c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	4a53      	ldr	r2, [pc, #332]	; (8008068 <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d00e      	beq.n	8007f3c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	4a52      	ldr	r2, [pc, #328]	; (800806c <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d009      	beq.n	8007f3c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	4a50      	ldr	r2, [pc, #320]	; (8008070 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d004      	beq.n	8007f3c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007f32:	f240 7186 	movw	r1, #1926	; 0x786
 8007f36:	484f      	ldr	r0, [pc, #316]	; (8008074 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 8007f38:	f7fa fa28 	bl	800238c <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d020      	beq.n	8007f86 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	2b10      	cmp	r3, #16
 8007f4a:	d01c      	beq.n	8007f86 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	2b20      	cmp	r3, #32
 8007f52:	d018      	beq.n	8007f86 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	2b30      	cmp	r3, #48	; 0x30
 8007f5a:	d014      	beq.n	8007f86 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	2b40      	cmp	r3, #64	; 0x40
 8007f62:	d010      	beq.n	8007f86 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	2b50      	cmp	r3, #80	; 0x50
 8007f6a:	d00c      	beq.n	8007f86 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	2b60      	cmp	r3, #96	; 0x60
 8007f72:	d008      	beq.n	8007f86 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	2b70      	cmp	r3, #112	; 0x70
 8007f7a:	d004      	beq.n	8007f86 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007f7c:	f240 7187 	movw	r1, #1927	; 0x787
 8007f80:	483c      	ldr	r0, [pc, #240]	; (8008074 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 8007f82:	f7fa fa03 	bl	800238c <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	685b      	ldr	r3, [r3, #4]
 8007f8a:	2b80      	cmp	r3, #128	; 0x80
 8007f8c:	d008      	beq.n	8007fa0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	685b      	ldr	r3, [r3, #4]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d004      	beq.n	8007fa0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007f96:	f44f 61f1 	mov.w	r1, #1928	; 0x788
 8007f9a:	4836      	ldr	r0, [pc, #216]	; (8008074 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 8007f9c:	f7fa f9f6 	bl	800238c <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007fa6:	2b01      	cmp	r3, #1
 8007fa8:	d101      	bne.n	8007fae <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007faa:	2302      	movs	r3, #2
 8007fac:	e050      	b.n	8008050 <HAL_TIMEx_MasterConfigSynchronization+0x178>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2201      	movs	r2, #1
 8007fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2202      	movs	r2, #2
 8007fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	685b      	ldr	r3, [r3, #4]
 8007fc4:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	689b      	ldr	r3, [r3, #8]
 8007fcc:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fd4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	68fa      	ldr	r2, [r7, #12]
 8007fdc:	4313      	orrs	r3, r2
 8007fde:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	68fa      	ldr	r2, [r7, #12]
 8007fe6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	4a1a      	ldr	r2, [pc, #104]	; (8008058 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d018      	beq.n	8008024 <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	4a19      	ldr	r2, [pc, #100]	; (800805c <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d013      	beq.n	8008024 <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008004:	d00e      	beq.n	8008024 <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4a15      	ldr	r2, [pc, #84]	; (8008060 <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d009      	beq.n	8008024 <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	4a13      	ldr	r2, [pc, #76]	; (8008064 <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d004      	beq.n	8008024 <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4a12      	ldr	r2, [pc, #72]	; (8008068 <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d10c      	bne.n	800803e <HAL_TIMEx_MasterConfigSynchronization+0x166>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800802a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	685b      	ldr	r3, [r3, #4]
 8008030:	68ba      	ldr	r2, [r7, #8]
 8008032:	4313      	orrs	r3, r2
 8008034:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	68ba      	ldr	r2, [r7, #8]
 800803c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2201      	movs	r2, #1
 8008042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2200      	movs	r2, #0
 800804a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800804e:	2300      	movs	r3, #0
}
 8008050:	4618      	mov	r0, r3
 8008052:	3710      	adds	r7, #16
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}
 8008058:	40012c00 	.word	0x40012c00
 800805c:	40013400 	.word	0x40013400
 8008060:	40000400 	.word	0x40000400
 8008064:	40000800 	.word	0x40000800
 8008068:	40000c00 	.word	0x40000c00
 800806c:	40001000 	.word	0x40001000
 8008070:	40001400 	.word	0x40001400
 8008074:	080106b0 	.word	0x080106b0

08008078 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b084      	sub	sp, #16
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
 8008080:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008082:	2300      	movs	r3, #0
 8008084:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	4a5e      	ldr	r2, [pc, #376]	; (8008204 <HAL_TIMEx_ConfigBreakDeadTime+0x18c>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d009      	beq.n	80080a4 <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	4a5c      	ldr	r2, [pc, #368]	; (8008208 <HAL_TIMEx_ConfigBreakDeadTime+0x190>)
 8008096:	4293      	cmp	r3, r2
 8008098:	d004      	beq.n	80080a4 <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 800809a:	f240 71c3 	movw	r1, #1987	; 0x7c3
 800809e:	485b      	ldr	r0, [pc, #364]	; (800820c <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 80080a0:	f7fa f974 	bl	800238c <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080ac:	d008      	beq.n	80080c0 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d004      	beq.n	80080c0 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 80080b6:	f240 71c4 	movw	r1, #1988	; 0x7c4
 80080ba:	4854      	ldr	r0, [pc, #336]	; (800820c <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 80080bc:	f7fa f966 	bl	800238c <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	685b      	ldr	r3, [r3, #4]
 80080c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080c8:	d008      	beq.n	80080dc <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d004      	beq.n	80080dc <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 80080d2:	f240 71c5 	movw	r1, #1989	; 0x7c5
 80080d6:	484d      	ldr	r0, [pc, #308]	; (800820c <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 80080d8:	f7fa f958 	bl	800238c <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	689b      	ldr	r3, [r3, #8]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d013      	beq.n	800810c <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	689b      	ldr	r3, [r3, #8]
 80080e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080ec:	d00e      	beq.n	800810c <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	689b      	ldr	r3, [r3, #8]
 80080f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080f6:	d009      	beq.n	800810c <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	689b      	ldr	r3, [r3, #8]
 80080fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008100:	d004      	beq.n	800810c <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 8008102:	f240 71c6 	movw	r1, #1990	; 0x7c6
 8008106:	4841      	ldr	r0, [pc, #260]	; (800820c <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8008108:	f7fa f940 	bl	800238c <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	68db      	ldr	r3, [r3, #12]
 8008110:	2bff      	cmp	r3, #255	; 0xff
 8008112:	d904      	bls.n	800811e <HAL_TIMEx_ConfigBreakDeadTime+0xa6>
 8008114:	f240 71c7 	movw	r1, #1991	; 0x7c7
 8008118:	483c      	ldr	r0, [pc, #240]	; (800820c <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800811a:	f7fa f937 	bl	800238c <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	691b      	ldr	r3, [r3, #16]
 8008122:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008126:	d008      	beq.n	800813a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	691b      	ldr	r3, [r3, #16]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d004      	beq.n	800813a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8008130:	f44f 61f9 	mov.w	r1, #1992	; 0x7c8
 8008134:	4835      	ldr	r0, [pc, #212]	; (800820c <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8008136:	f7fa f929 	bl	800238c <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	695b      	ldr	r3, [r3, #20]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d009      	beq.n	8008156 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	695b      	ldr	r3, [r3, #20]
 8008146:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800814a:	d004      	beq.n	8008156 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800814c:	f240 71c9 	movw	r1, #1993	; 0x7c9
 8008150:	482e      	ldr	r0, [pc, #184]	; (800820c <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8008152:	f7fa f91b 	bl	800238c <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	69db      	ldr	r3, [r3, #28]
 800815a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800815e:	d008      	beq.n	8008172 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	69db      	ldr	r3, [r3, #28]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d004      	beq.n	8008172 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 8008168:	f240 71ca 	movw	r1, #1994	; 0x7ca
 800816c:	4827      	ldr	r0, [pc, #156]	; (800820c <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800816e:	f7fa f90d 	bl	800238c <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008178:	2b01      	cmp	r3, #1
 800817a:	d101      	bne.n	8008180 <HAL_TIMEx_ConfigBreakDeadTime+0x108>
 800817c:	2302      	movs	r3, #2
 800817e:	e03d      	b.n	80081fc <HAL_TIMEx_ConfigBreakDeadTime+0x184>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2201      	movs	r2, #1
 8008184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	68db      	ldr	r3, [r3, #12]
 8008192:	4313      	orrs	r3, r2
 8008194:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	689b      	ldr	r3, [r3, #8]
 80081a0:	4313      	orrs	r3, r2
 80081a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	685b      	ldr	r3, [r3, #4]
 80081ae:	4313      	orrs	r3, r2
 80081b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	4313      	orrs	r3, r2
 80081be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	691b      	ldr	r3, [r3, #16]
 80081ca:	4313      	orrs	r3, r2
 80081cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	695b      	ldr	r3, [r3, #20]
 80081d8:	4313      	orrs	r3, r2
 80081da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	69db      	ldr	r3, [r3, #28]
 80081e6:	4313      	orrs	r3, r2
 80081e8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	68fa      	ldr	r2, [r7, #12]
 80081f0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2200      	movs	r2, #0
 80081f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80081fa:	2300      	movs	r3, #0
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	3710      	adds	r7, #16
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}
 8008204:	40012c00 	.word	0x40012c00
 8008208:	40013400 	.word	0x40013400
 800820c:	080106b0 	.word	0x080106b0

08008210 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008210:	b480      	push	{r7}
 8008212:	b083      	sub	sp, #12
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008218:	bf00      	nop
 800821a:	370c      	adds	r7, #12
 800821c:	46bd      	mov	sp, r7
 800821e:	bc80      	pop	{r7}
 8008220:	4770      	bx	lr

08008222 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008222:	b480      	push	{r7}
 8008224:	b083      	sub	sp, #12
 8008226:	af00      	add	r7, sp, #0
 8008228:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800822a:	bf00      	nop
 800822c:	370c      	adds	r7, #12
 800822e:	46bd      	mov	sp, r7
 8008230:	bc80      	pop	{r7}
 8008232:	4770      	bx	lr

08008234 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008234:	b480      	push	{r7}
 8008236:	b083      	sub	sp, #12
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800823c:	bf00      	nop
 800823e:	370c      	adds	r7, #12
 8008240:	46bd      	mov	sp, r7
 8008242:	bc80      	pop	{r7}
 8008244:	4770      	bx	lr
	...

08008248 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b082      	sub	sp, #8
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d101      	bne.n	800825a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008256:	2301      	movs	r3, #1
 8008258:	e0a7      	b.n	80083aa <HAL_UART_Init+0x162>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	699b      	ldr	r3, [r3, #24]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d02c      	beq.n	80082bc <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2 and USART3 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	4a53      	ldr	r2, [pc, #332]	; (80083b4 <HAL_UART_Init+0x16c>)
 8008268:	4293      	cmp	r3, r2
 800826a:	d00e      	beq.n	800828a <HAL_UART_Init+0x42>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4a51      	ldr	r2, [pc, #324]	; (80083b8 <HAL_UART_Init+0x170>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d009      	beq.n	800828a <HAL_UART_Init+0x42>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4a50      	ldr	r2, [pc, #320]	; (80083bc <HAL_UART_Init+0x174>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d004      	beq.n	800828a <HAL_UART_Init+0x42>
 8008280:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 8008284:	484e      	ldr	r0, [pc, #312]	; (80083c0 <HAL_UART_Init+0x178>)
 8008286:	f7fa f881 	bl	800238c <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	699b      	ldr	r3, [r3, #24]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d032      	beq.n	80082f8 <HAL_UART_Init+0xb0>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	699b      	ldr	r3, [r3, #24]
 8008296:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800829a:	d02d      	beq.n	80082f8 <HAL_UART_Init+0xb0>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	699b      	ldr	r3, [r3, #24]
 80082a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80082a4:	d028      	beq.n	80082f8 <HAL_UART_Init+0xb0>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	699b      	ldr	r3, [r3, #24]
 80082aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80082ae:	d023      	beq.n	80082f8 <HAL_UART_Init+0xb0>
 80082b0:	f240 116d 	movw	r1, #365	; 0x16d
 80082b4:	4842      	ldr	r0, [pc, #264]	; (80083c0 <HAL_UART_Init+0x178>)
 80082b6:	f7fa f869 	bl	800238c <assert_failed>
 80082ba:	e01d      	b.n	80082f8 <HAL_UART_Init+0xb0>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a3c      	ldr	r2, [pc, #240]	; (80083b4 <HAL_UART_Init+0x16c>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d018      	beq.n	80082f8 <HAL_UART_Init+0xb0>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	4a3b      	ldr	r2, [pc, #236]	; (80083b8 <HAL_UART_Init+0x170>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d013      	beq.n	80082f8 <HAL_UART_Init+0xb0>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	4a39      	ldr	r2, [pc, #228]	; (80083bc <HAL_UART_Init+0x174>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d00e      	beq.n	80082f8 <HAL_UART_Init+0xb0>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	4a39      	ldr	r2, [pc, #228]	; (80083c4 <HAL_UART_Init+0x17c>)
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d009      	beq.n	80082f8 <HAL_UART_Init+0xb0>
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	4a37      	ldr	r2, [pc, #220]	; (80083c8 <HAL_UART_Init+0x180>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d004      	beq.n	80082f8 <HAL_UART_Init+0xb0>
 80082ee:	f240 1171 	movw	r1, #369	; 0x171
 80082f2:	4833      	ldr	r0, [pc, #204]	; (80083c0 <HAL_UART_Init+0x178>)
 80082f4:	f7fa f84a 	bl	800238c <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	689b      	ldr	r3, [r3, #8]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d009      	beq.n	8008314 <HAL_UART_Init+0xcc>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	689b      	ldr	r3, [r3, #8]
 8008304:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008308:	d004      	beq.n	8008314 <HAL_UART_Init+0xcc>
 800830a:	f240 1173 	movw	r1, #371	; 0x173
 800830e:	482c      	ldr	r0, [pc, #176]	; (80083c0 <HAL_UART_Init+0x178>)
 8008310:	f7fa f83c 	bl	800238c <assert_failed>
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800831a:	b2db      	uxtb	r3, r3
 800831c:	2b00      	cmp	r3, #0
 800831e:	d111      	bne.n	8008344 <HAL_UART_Init+0xfc>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2200      	movs	r2, #0
 8008324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f000 fb05 	bl	8008938 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008332:	2b00      	cmp	r3, #0
 8008334:	d102      	bne.n	800833c <HAL_UART_Init+0xf4>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	4a24      	ldr	r2, [pc, #144]	; (80083cc <HAL_UART_Init+0x184>)
 800833a:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2224      	movs	r2, #36	; 0x24
 8008348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	68da      	ldr	r2, [r3, #12]
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800835a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f000 fcf9 	bl	8008d54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	691a      	ldr	r2, [r3, #16]
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008370:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	695a      	ldr	r2, [r3, #20]
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008380:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	68da      	ldr	r2, [r3, #12]
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008390:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2200      	movs	r2, #0
 8008396:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2220      	movs	r2, #32
 800839c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2220      	movs	r2, #32
 80083a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80083a8:	2300      	movs	r3, #0
}
 80083aa:	4618      	mov	r0, r3
 80083ac:	3708      	adds	r7, #8
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bd80      	pop	{r7, pc}
 80083b2:	bf00      	nop
 80083b4:	40013800 	.word	0x40013800
 80083b8:	40004400 	.word	0x40004400
 80083bc:	40004800 	.word	0x40004800
 80083c0:	080106ec 	.word	0x080106ec
 80083c4:	40004c00 	.word	0x40004c00
 80083c8:	40005000 	.word	0x40005000
 80083cc:	08002821 	.word	0x08002821

080083d0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b08a      	sub	sp, #40	; 0x28
 80083d4:	af02      	add	r7, sp, #8
 80083d6:	60f8      	str	r0, [r7, #12]
 80083d8:	60b9      	str	r1, [r7, #8]
 80083da:	603b      	str	r3, [r7, #0]
 80083dc:	4613      	mov	r3, r2
 80083de:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80083e0:	2300      	movs	r3, #0
 80083e2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083ea:	b2db      	uxtb	r3, r3
 80083ec:	2b20      	cmp	r3, #32
 80083ee:	d17c      	bne.n	80084ea <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d002      	beq.n	80083fc <HAL_UART_Transmit+0x2c>
 80083f6:	88fb      	ldrh	r3, [r7, #6]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d101      	bne.n	8008400 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80083fc:	2301      	movs	r3, #1
 80083fe:	e075      	b.n	80084ec <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008406:	2b01      	cmp	r3, #1
 8008408:	d101      	bne.n	800840e <HAL_UART_Transmit+0x3e>
 800840a:	2302      	movs	r3, #2
 800840c:	e06e      	b.n	80084ec <HAL_UART_Transmit+0x11c>
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	2201      	movs	r2, #1
 8008412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	2200      	movs	r2, #0
 800841a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	2221      	movs	r2, #33	; 0x21
 8008420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008424:	f7fa fc82 	bl	8002d2c <HAL_GetTick>
 8008428:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	88fa      	ldrh	r2, [r7, #6]
 800842e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	88fa      	ldrh	r2, [r7, #6]
 8008434:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	689b      	ldr	r3, [r3, #8]
 800843a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800843e:	d108      	bne.n	8008452 <HAL_UART_Transmit+0x82>
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	691b      	ldr	r3, [r3, #16]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d104      	bne.n	8008452 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008448:	2300      	movs	r3, #0
 800844a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	61bb      	str	r3, [r7, #24]
 8008450:	e003      	b.n	800845a <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008456:	2300      	movs	r3, #0
 8008458:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	2200      	movs	r2, #0
 800845e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008462:	e02a      	b.n	80084ba <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	9300      	str	r3, [sp, #0]
 8008468:	697b      	ldr	r3, [r7, #20]
 800846a:	2200      	movs	r2, #0
 800846c:	2180      	movs	r1, #128	; 0x80
 800846e:	68f8      	ldr	r0, [r7, #12]
 8008470:	f000 fa98 	bl	80089a4 <UART_WaitOnFlagUntilTimeout>
 8008474:	4603      	mov	r3, r0
 8008476:	2b00      	cmp	r3, #0
 8008478:	d001      	beq.n	800847e <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800847a:	2303      	movs	r3, #3
 800847c:	e036      	b.n	80084ec <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800847e:	69fb      	ldr	r3, [r7, #28]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d10b      	bne.n	800849c <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008484:	69bb      	ldr	r3, [r7, #24]
 8008486:	881b      	ldrh	r3, [r3, #0]
 8008488:	461a      	mov	r2, r3
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008492:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008494:	69bb      	ldr	r3, [r7, #24]
 8008496:	3302      	adds	r3, #2
 8008498:	61bb      	str	r3, [r7, #24]
 800849a:	e007      	b.n	80084ac <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800849c:	69fb      	ldr	r3, [r7, #28]
 800849e:	781a      	ldrb	r2, [r3, #0]
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80084a6:	69fb      	ldr	r3, [r7, #28]
 80084a8:	3301      	adds	r3, #1
 80084aa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80084b0:	b29b      	uxth	r3, r3
 80084b2:	3b01      	subs	r3, #1
 80084b4:	b29a      	uxth	r2, r3
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80084be:	b29b      	uxth	r3, r3
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d1cf      	bne.n	8008464 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	9300      	str	r3, [sp, #0]
 80084c8:	697b      	ldr	r3, [r7, #20]
 80084ca:	2200      	movs	r2, #0
 80084cc:	2140      	movs	r1, #64	; 0x40
 80084ce:	68f8      	ldr	r0, [r7, #12]
 80084d0:	f000 fa68 	bl	80089a4 <UART_WaitOnFlagUntilTimeout>
 80084d4:	4603      	mov	r3, r0
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d001      	beq.n	80084de <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80084da:	2303      	movs	r3, #3
 80084dc:	e006      	b.n	80084ec <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	2220      	movs	r2, #32
 80084e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80084e6:	2300      	movs	r3, #0
 80084e8:	e000      	b.n	80084ec <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80084ea:	2302      	movs	r3, #2
  }
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	3720      	adds	r7, #32
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}

080084f4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b084      	sub	sp, #16
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	60f8      	str	r0, [r7, #12]
 80084fc:	60b9      	str	r1, [r7, #8]
 80084fe:	4613      	mov	r3, r2
 8008500:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008508:	b2db      	uxtb	r3, r3
 800850a:	2b20      	cmp	r3, #32
 800850c:	d11d      	bne.n	800854a <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d002      	beq.n	800851a <HAL_UART_Receive_IT+0x26>
 8008514:	88fb      	ldrh	r3, [r7, #6]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d101      	bne.n	800851e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800851a:	2301      	movs	r3, #1
 800851c:	e016      	b.n	800854c <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008524:	2b01      	cmp	r3, #1
 8008526:	d101      	bne.n	800852c <HAL_UART_Receive_IT+0x38>
 8008528:	2302      	movs	r3, #2
 800852a:	e00f      	b.n	800854c <HAL_UART_Receive_IT+0x58>
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	2201      	movs	r2, #1
 8008530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	2200      	movs	r2, #0
 8008538:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800853a:	88fb      	ldrh	r3, [r7, #6]
 800853c:	461a      	mov	r2, r3
 800853e:	68b9      	ldr	r1, [r7, #8]
 8008540:	68f8      	ldr	r0, [r7, #12]
 8008542:	f000 fa79 	bl	8008a38 <UART_Start_Receive_IT>
 8008546:	4603      	mov	r3, r0
 8008548:	e000      	b.n	800854c <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800854a:	2302      	movs	r3, #2
  }
}
 800854c:	4618      	mov	r0, r3
 800854e:	3710      	adds	r7, #16
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}

08008554 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b08a      	sub	sp, #40	; 0x28
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	68db      	ldr	r3, [r3, #12]
 800856a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	695b      	ldr	r3, [r3, #20]
 8008572:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8008574:	2300      	movs	r3, #0
 8008576:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8008578:	2300      	movs	r3, #0
 800857a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800857c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800857e:	f003 030f 	and.w	r3, r3, #15
 8008582:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8008584:	69bb      	ldr	r3, [r7, #24]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d10d      	bne.n	80085a6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800858a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800858c:	f003 0320 	and.w	r3, r3, #32
 8008590:	2b00      	cmp	r3, #0
 8008592:	d008      	beq.n	80085a6 <HAL_UART_IRQHandler+0x52>
 8008594:	6a3b      	ldr	r3, [r7, #32]
 8008596:	f003 0320 	and.w	r3, r3, #32
 800859a:	2b00      	cmp	r3, #0
 800859c:	d003      	beq.n	80085a6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f000 fb2c 	bl	8008bfc <UART_Receive_IT>
      return;
 80085a4:	e180      	b.n	80088a8 <HAL_UART_IRQHandler+0x354>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80085a6:	69bb      	ldr	r3, [r7, #24]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	f000 80b4 	beq.w	8008716 <HAL_UART_IRQHandler+0x1c2>
 80085ae:	69fb      	ldr	r3, [r7, #28]
 80085b0:	f003 0301 	and.w	r3, r3, #1
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d105      	bne.n	80085c4 <HAL_UART_IRQHandler+0x70>
 80085b8:	6a3b      	ldr	r3, [r7, #32]
 80085ba:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80085be:	2b00      	cmp	r3, #0
 80085c0:	f000 80a9 	beq.w	8008716 <HAL_UART_IRQHandler+0x1c2>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80085c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c6:	f003 0301 	and.w	r3, r3, #1
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d00a      	beq.n	80085e4 <HAL_UART_IRQHandler+0x90>
 80085ce:	6a3b      	ldr	r3, [r7, #32]
 80085d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d005      	beq.n	80085e4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085dc:	f043 0201 	orr.w	r2, r3, #1
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80085e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e6:	f003 0304 	and.w	r3, r3, #4
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d00a      	beq.n	8008604 <HAL_UART_IRQHandler+0xb0>
 80085ee:	69fb      	ldr	r3, [r7, #28]
 80085f0:	f003 0301 	and.w	r3, r3, #1
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d005      	beq.n	8008604 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085fc:	f043 0202 	orr.w	r2, r3, #2
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008606:	f003 0302 	and.w	r3, r3, #2
 800860a:	2b00      	cmp	r3, #0
 800860c:	d00a      	beq.n	8008624 <HAL_UART_IRQHandler+0xd0>
 800860e:	69fb      	ldr	r3, [r7, #28]
 8008610:	f003 0301 	and.w	r3, r3, #1
 8008614:	2b00      	cmp	r3, #0
 8008616:	d005      	beq.n	8008624 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800861c:	f043 0204 	orr.w	r2, r3, #4
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8008624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008626:	f003 0308 	and.w	r3, r3, #8
 800862a:	2b00      	cmp	r3, #0
 800862c:	d00f      	beq.n	800864e <HAL_UART_IRQHandler+0xfa>
 800862e:	6a3b      	ldr	r3, [r7, #32]
 8008630:	f003 0320 	and.w	r3, r3, #32
 8008634:	2b00      	cmp	r3, #0
 8008636:	d104      	bne.n	8008642 <HAL_UART_IRQHandler+0xee>
 8008638:	69fb      	ldr	r3, [r7, #28]
 800863a:	f003 0301 	and.w	r3, r3, #1
 800863e:	2b00      	cmp	r3, #0
 8008640:	d005      	beq.n	800864e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008646:	f043 0208 	orr.w	r2, r3, #8
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008652:	2b00      	cmp	r3, #0
 8008654:	f000 8123 	beq.w	800889e <HAL_UART_IRQHandler+0x34a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800865a:	f003 0320 	and.w	r3, r3, #32
 800865e:	2b00      	cmp	r3, #0
 8008660:	d007      	beq.n	8008672 <HAL_UART_IRQHandler+0x11e>
 8008662:	6a3b      	ldr	r3, [r7, #32]
 8008664:	f003 0320 	and.w	r3, r3, #32
 8008668:	2b00      	cmp	r3, #0
 800866a:	d002      	beq.n	8008672 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f000 fac5 	bl	8008bfc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	695b      	ldr	r3, [r3, #20]
 8008678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800867c:	2b00      	cmp	r3, #0
 800867e:	bf14      	ite	ne
 8008680:	2301      	movne	r3, #1
 8008682:	2300      	moveq	r3, #0
 8008684:	b2db      	uxtb	r3, r3
 8008686:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800868c:	f003 0308 	and.w	r3, r3, #8
 8008690:	2b00      	cmp	r3, #0
 8008692:	d102      	bne.n	800869a <HAL_UART_IRQHandler+0x146>
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d033      	beq.n	8008702 <HAL_UART_IRQHandler+0x1ae>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f000 fa05 	bl	8008aaa <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	695b      	ldr	r3, [r3, #20]
 80086a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d024      	beq.n	80086f8 <HAL_UART_IRQHandler+0x1a4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	695a      	ldr	r2, [r3, #20]
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80086bc:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d013      	beq.n	80086ee <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086ca:	4a79      	ldr	r2, [pc, #484]	; (80088b0 <HAL_UART_IRQHandler+0x35c>)
 80086cc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086d2:	4618      	mov	r0, r3
 80086d4:	f7fb f8c0 	bl	8003858 <HAL_DMA_Abort_IT>
 80086d8:	4603      	mov	r3, r0
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d019      	beq.n	8008712 <HAL_UART_IRQHandler+0x1be>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086e4:	687a      	ldr	r2, [r7, #4]
 80086e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80086e8:	4610      	mov	r0, r2
 80086ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086ec:	e011      	b.n	8008712 <HAL_UART_IRQHandler+0x1be>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086f6:	e00c      	b.n	8008712 <HAL_UART_IRQHandler+0x1be>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086fc:	6878      	ldr	r0, [r7, #4]
 80086fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008700:	e007      	b.n	8008712 <HAL_UART_IRQHandler+0x1be>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2200      	movs	r2, #0
 800870e:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008710:	e0c5      	b.n	800889e <HAL_UART_IRQHandler+0x34a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008712:	bf00      	nop
    return;
 8008714:	e0c3      	b.n	800889e <HAL_UART_IRQHandler+0x34a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800871a:	2b01      	cmp	r3, #1
 800871c:	f040 80a3 	bne.w	8008866 <HAL_UART_IRQHandler+0x312>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8008720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008722:	f003 0310 	and.w	r3, r3, #16
 8008726:	2b00      	cmp	r3, #0
 8008728:	f000 809d 	beq.w	8008866 <HAL_UART_IRQHandler+0x312>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800872c:	6a3b      	ldr	r3, [r7, #32]
 800872e:	f003 0310 	and.w	r3, r3, #16
 8008732:	2b00      	cmp	r3, #0
 8008734:	f000 8097 	beq.w	8008866 <HAL_UART_IRQHandler+0x312>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008738:	2300      	movs	r3, #0
 800873a:	60fb      	str	r3, [r7, #12]
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	60fb      	str	r3, [r7, #12]
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	685b      	ldr	r3, [r3, #4]
 800874a:	60fb      	str	r3, [r7, #12]
 800874c:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	695b      	ldr	r3, [r3, #20]
 8008754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008758:	2b00      	cmp	r3, #0
 800875a:	d04f      	beq.n	80087fc <HAL_UART_IRQHandler+0x2a8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	685b      	ldr	r3, [r3, #4]
 8008764:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8008766:	8a3b      	ldrh	r3, [r7, #16]
 8008768:	2b00      	cmp	r3, #0
 800876a:	f000 809a 	beq.w	80088a2 <HAL_UART_IRQHandler+0x34e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008772:	8a3a      	ldrh	r2, [r7, #16]
 8008774:	429a      	cmp	r2, r3
 8008776:	f080 8094 	bcs.w	80088a2 <HAL_UART_IRQHandler+0x34e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	8a3a      	ldrh	r2, [r7, #16]
 800877e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008784:	699b      	ldr	r3, [r3, #24]
 8008786:	2b20      	cmp	r3, #32
 8008788:	d02b      	beq.n	80087e2 <HAL_UART_IRQHandler+0x28e>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	68da      	ldr	r2, [r3, #12]
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008798:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	695a      	ldr	r2, [r3, #20]
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f022 0201 	bic.w	r2, r2, #1
 80087a8:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	695a      	ldr	r2, [r3, #20]
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80087b8:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2220      	movs	r2, #32
 80087be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2200      	movs	r2, #0
 80087c6:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	68da      	ldr	r2, [r3, #12]
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f022 0210 	bic.w	r2, r2, #16
 80087d6:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087dc:	4618      	mov	r0, r3
 80087de:	f7fb f801 	bl	80037e4 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80087e6:	687a      	ldr	r2, [r7, #4]
 80087e8:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 80087ea:	687a      	ldr	r2, [r7, #4]
 80087ec:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 80087ee:	b292      	uxth	r2, r2
 80087f0:	1a8a      	subs	r2, r1, r2
 80087f2:	b292      	uxth	r2, r2
 80087f4:	4611      	mov	r1, r2
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif
      }
      return;
 80087fa:	e052      	b.n	80088a2 <HAL_UART_IRQHandler+0x34e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008804:	b29b      	uxth	r3, r3
 8008806:	1ad3      	subs	r3, r2, r3
 8008808:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800880e:	b29b      	uxth	r3, r3
 8008810:	2b00      	cmp	r3, #0
 8008812:	d048      	beq.n	80088a6 <HAL_UART_IRQHandler+0x352>
          &&(nb_rx_data > 0U) )
 8008814:	8a7b      	ldrh	r3, [r7, #18]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d045      	beq.n	80088a6 <HAL_UART_IRQHandler+0x352>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	68da      	ldr	r2, [r3, #12]
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008828:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	695a      	ldr	r2, [r3, #20]
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f022 0201 	bic.w	r2, r2, #1
 8008838:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2220      	movs	r2, #32
 800883e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2200      	movs	r2, #0
 8008846:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	68da      	ldr	r2, [r3, #12]
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f022 0210 	bic.w	r2, r2, #16
 8008856:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800885c:	8a7a      	ldrh	r2, [r7, #18]
 800885e:	4611      	mov	r1, r2
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif
      }
      return;
 8008864:	e01f      	b.n	80088a6 <HAL_UART_IRQHandler+0x352>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008868:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800886c:	2b00      	cmp	r3, #0
 800886e:	d008      	beq.n	8008882 <HAL_UART_IRQHandler+0x32e>
 8008870:	6a3b      	ldr	r3, [r7, #32]
 8008872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008876:	2b00      	cmp	r3, #0
 8008878:	d003      	beq.n	8008882 <HAL_UART_IRQHandler+0x32e>
  {
    UART_Transmit_IT(huart);
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	f000 f956 	bl	8008b2c <UART_Transmit_IT>
    return;
 8008880:	e012      	b.n	80088a8 <HAL_UART_IRQHandler+0x354>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008888:	2b00      	cmp	r3, #0
 800888a:	d00d      	beq.n	80088a8 <HAL_UART_IRQHandler+0x354>
 800888c:	6a3b      	ldr	r3, [r7, #32]
 800888e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008892:	2b00      	cmp	r3, #0
 8008894:	d008      	beq.n	80088a8 <HAL_UART_IRQHandler+0x354>
  {
    UART_EndTransmit_IT(huart);
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f000 f997 	bl	8008bca <UART_EndTransmit_IT>
    return;
 800889c:	e004      	b.n	80088a8 <HAL_UART_IRQHandler+0x354>
    return;
 800889e:	bf00      	nop
 80088a0:	e002      	b.n	80088a8 <HAL_UART_IRQHandler+0x354>
      return;
 80088a2:	bf00      	nop
 80088a4:	e000      	b.n	80088a8 <HAL_UART_IRQHandler+0x354>
      return;
 80088a6:	bf00      	nop
  }
}
 80088a8:	3728      	adds	r7, #40	; 0x28
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}
 80088ae:	bf00      	nop
 80088b0:	08008b03 	.word	0x08008b03

080088b4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80088b4:	b480      	push	{r7}
 80088b6:	b083      	sub	sp, #12
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80088bc:	bf00      	nop
 80088be:	370c      	adds	r7, #12
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bc80      	pop	{r7}
 80088c4:	4770      	bx	lr

080088c6 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80088c6:	b480      	push	{r7}
 80088c8:	b083      	sub	sp, #12
 80088ca:	af00      	add	r7, sp, #0
 80088cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80088ce:	bf00      	nop
 80088d0:	370c      	adds	r7, #12
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bc80      	pop	{r7}
 80088d6:	4770      	bx	lr

080088d8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80088d8:	b480      	push	{r7}
 80088da:	b083      	sub	sp, #12
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80088e0:	bf00      	nop
 80088e2:	370c      	adds	r7, #12
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bc80      	pop	{r7}
 80088e8:	4770      	bx	lr

080088ea <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80088ea:	b480      	push	{r7}
 80088ec:	b083      	sub	sp, #12
 80088ee:	af00      	add	r7, sp, #0
 80088f0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80088f2:	bf00      	nop
 80088f4:	370c      	adds	r7, #12
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bc80      	pop	{r7}
 80088fa:	4770      	bx	lr

080088fc <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 80088fc:	b480      	push	{r7}
 80088fe:	b083      	sub	sp, #12
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8008904:	bf00      	nop
 8008906:	370c      	adds	r7, #12
 8008908:	46bd      	mov	sp, r7
 800890a:	bc80      	pop	{r7}
 800890c:	4770      	bx	lr

0800890e <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800890e:	b480      	push	{r7}
 8008910:	b083      	sub	sp, #12
 8008912:	af00      	add	r7, sp, #0
 8008914:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8008916:	bf00      	nop
 8008918:	370c      	adds	r7, #12
 800891a:	46bd      	mov	sp, r7
 800891c:	bc80      	pop	{r7}
 800891e:	4770      	bx	lr

08008920 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008920:	b480      	push	{r7}
 8008922:	b083      	sub	sp, #12
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
 8008928:	460b      	mov	r3, r1
 800892a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800892c:	bf00      	nop
 800892e:	370c      	adds	r7, #12
 8008930:	46bd      	mov	sp, r7
 8008932:	bc80      	pop	{r7}
 8008934:	4770      	bx	lr
	...

08008938 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8008938:	b480      	push	{r7}
 800893a:	b083      	sub	sp, #12
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	4a0f      	ldr	r2, [pc, #60]	; (8008980 <UART_InitCallbacksToDefault+0x48>)
 8008944:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	4a0e      	ldr	r2, [pc, #56]	; (8008984 <UART_InitCallbacksToDefault+0x4c>)
 800894a:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	4a0e      	ldr	r2, [pc, #56]	; (8008988 <UART_InitCallbacksToDefault+0x50>)
 8008950:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	4a0d      	ldr	r2, [pc, #52]	; (800898c <UART_InitCallbacksToDefault+0x54>)
 8008956:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	4a0d      	ldr	r2, [pc, #52]	; (8008990 <UART_InitCallbacksToDefault+0x58>)
 800895c:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	4a0c      	ldr	r2, [pc, #48]	; (8008994 <UART_InitCallbacksToDefault+0x5c>)
 8008962:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	4a0c      	ldr	r2, [pc, #48]	; (8008998 <UART_InitCallbacksToDefault+0x60>)
 8008968:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	4a0b      	ldr	r2, [pc, #44]	; (800899c <UART_InitCallbacksToDefault+0x64>)
 800896e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	4a0b      	ldr	r2, [pc, #44]	; (80089a0 <UART_InitCallbacksToDefault+0x68>)
 8008974:	669a      	str	r2, [r3, #104]	; 0x68

}
 8008976:	bf00      	nop
 8008978:	370c      	adds	r7, #12
 800897a:	46bd      	mov	sp, r7
 800897c:	bc80      	pop	{r7}
 800897e:	4770      	bx	lr
 8008980:	080088b5 	.word	0x080088b5
 8008984:	0800232d 	.word	0x0800232d
 8008988:	080088c7 	.word	0x080088c7
 800898c:	08002341 	.word	0x08002341
 8008990:	080088d9 	.word	0x080088d9
 8008994:	080088eb 	.word	0x080088eb
 8008998:	080088fd 	.word	0x080088fd
 800899c:	0800890f 	.word	0x0800890f
 80089a0:	08008921 	.word	0x08008921

080089a4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b084      	sub	sp, #16
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	60f8      	str	r0, [r7, #12]
 80089ac:	60b9      	str	r1, [r7, #8]
 80089ae:	603b      	str	r3, [r7, #0]
 80089b0:	4613      	mov	r3, r2
 80089b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80089b4:	e02c      	b.n	8008a10 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80089b6:	69bb      	ldr	r3, [r7, #24]
 80089b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089bc:	d028      	beq.n	8008a10 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80089be:	69bb      	ldr	r3, [r7, #24]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d007      	beq.n	80089d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80089c4:	f7fa f9b2 	bl	8002d2c <HAL_GetTick>
 80089c8:	4602      	mov	r2, r0
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	1ad3      	subs	r3, r2, r3
 80089ce:	69ba      	ldr	r2, [r7, #24]
 80089d0:	429a      	cmp	r2, r3
 80089d2:	d21d      	bcs.n	8008a10 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	68da      	ldr	r2, [r3, #12]
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80089e2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	695a      	ldr	r2, [r3, #20]
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f022 0201 	bic.w	r2, r2, #1
 80089f2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	2220      	movs	r2, #32
 80089f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	2220      	movs	r2, #32
 8008a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	2200      	movs	r2, #0
 8008a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008a0c:	2303      	movs	r3, #3
 8008a0e:	e00f      	b.n	8008a30 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	681a      	ldr	r2, [r3, #0]
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	4013      	ands	r3, r2
 8008a1a:	68ba      	ldr	r2, [r7, #8]
 8008a1c:	429a      	cmp	r2, r3
 8008a1e:	bf0c      	ite	eq
 8008a20:	2301      	moveq	r3, #1
 8008a22:	2300      	movne	r3, #0
 8008a24:	b2db      	uxtb	r3, r3
 8008a26:	461a      	mov	r2, r3
 8008a28:	79fb      	ldrb	r3, [r7, #7]
 8008a2a:	429a      	cmp	r2, r3
 8008a2c:	d0c3      	beq.n	80089b6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008a2e:	2300      	movs	r3, #0
}
 8008a30:	4618      	mov	r0, r3
 8008a32:	3710      	adds	r7, #16
 8008a34:	46bd      	mov	sp, r7
 8008a36:	bd80      	pop	{r7, pc}

08008a38 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008a38:	b480      	push	{r7}
 8008a3a:	b085      	sub	sp, #20
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	60f8      	str	r0, [r7, #12]
 8008a40:	60b9      	str	r1, [r7, #8]
 8008a42:	4613      	mov	r3, r2
 8008a44:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	68ba      	ldr	r2, [r7, #8]
 8008a4a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	88fa      	ldrh	r2, [r7, #6]
 8008a50:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	88fa      	ldrh	r2, [r7, #6]
 8008a56:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	2222      	movs	r2, #34	; 0x22
 8008a62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	2200      	movs	r2, #0
 8008a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	68da      	ldr	r2, [r3, #12]
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008a7c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	695a      	ldr	r2, [r3, #20]
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f042 0201 	orr.w	r2, r2, #1
 8008a8c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	68da      	ldr	r2, [r3, #12]
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f042 0220 	orr.w	r2, r2, #32
 8008a9c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008a9e:	2300      	movs	r3, #0
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3714      	adds	r7, #20
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bc80      	pop	{r7}
 8008aa8:	4770      	bx	lr

08008aaa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008aaa:	b480      	push	{r7}
 8008aac:	b083      	sub	sp, #12
 8008aae:	af00      	add	r7, sp, #0
 8008ab0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	68da      	ldr	r2, [r3, #12]
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008ac0:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	695a      	ldr	r2, [r3, #20]
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f022 0201 	bic.w	r2, r2, #1
 8008ad0:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ad6:	2b01      	cmp	r3, #1
 8008ad8:	d107      	bne.n	8008aea <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	68da      	ldr	r2, [r3, #12]
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f022 0210 	bic.w	r2, r2, #16
 8008ae8:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2220      	movs	r2, #32
 8008aee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2200      	movs	r2, #0
 8008af6:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008af8:	bf00      	nop
 8008afa:	370c      	adds	r7, #12
 8008afc:	46bd      	mov	sp, r7
 8008afe:	bc80      	pop	{r7}
 8008b00:	4770      	bx	lr

08008b02 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008b02:	b580      	push	{r7, lr}
 8008b04:	b084      	sub	sp, #16
 8008b06:	af00      	add	r7, sp, #0
 8008b08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b0e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	2200      	movs	r2, #0
 8008b14:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	2200      	movs	r2, #0
 8008b1a:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b20:	68f8      	ldr	r0, [r7, #12]
 8008b22:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b24:	bf00      	nop
 8008b26:	3710      	adds	r7, #16
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}

08008b2c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	b085      	sub	sp, #20
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b3a:	b2db      	uxtb	r3, r3
 8008b3c:	2b21      	cmp	r3, #33	; 0x21
 8008b3e:	d13e      	bne.n	8008bbe <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	689b      	ldr	r3, [r3, #8]
 8008b44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b48:	d114      	bne.n	8008b74 <UART_Transmit_IT+0x48>
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	691b      	ldr	r3, [r3, #16]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d110      	bne.n	8008b74 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6a1b      	ldr	r3, [r3, #32]
 8008b56:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	881b      	ldrh	r3, [r3, #0]
 8008b5c:	461a      	mov	r2, r3
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008b66:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6a1b      	ldr	r3, [r3, #32]
 8008b6c:	1c9a      	adds	r2, r3, #2
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	621a      	str	r2, [r3, #32]
 8008b72:	e008      	b.n	8008b86 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	6a1b      	ldr	r3, [r3, #32]
 8008b78:	1c59      	adds	r1, r3, #1
 8008b7a:	687a      	ldr	r2, [r7, #4]
 8008b7c:	6211      	str	r1, [r2, #32]
 8008b7e:	781a      	ldrb	r2, [r3, #0]
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008b8a:	b29b      	uxth	r3, r3
 8008b8c:	3b01      	subs	r3, #1
 8008b8e:	b29b      	uxth	r3, r3
 8008b90:	687a      	ldr	r2, [r7, #4]
 8008b92:	4619      	mov	r1, r3
 8008b94:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d10f      	bne.n	8008bba <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	68da      	ldr	r2, [r3, #12]
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008ba8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	68da      	ldr	r2, [r3, #12]
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008bb8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008bba:	2300      	movs	r3, #0
 8008bbc:	e000      	b.n	8008bc0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008bbe:	2302      	movs	r3, #2
  }
}
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	3714      	adds	r7, #20
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bc80      	pop	{r7}
 8008bc8:	4770      	bx	lr

08008bca <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008bca:	b580      	push	{r7, lr}
 8008bcc:	b082      	sub	sp, #8
 8008bce:	af00      	add	r7, sp, #0
 8008bd0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	68da      	ldr	r2, [r3, #12]
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008be0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2220      	movs	r2, #32
 8008be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008bf2:	2300      	movs	r3, #0
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	3708      	adds	r7, #8
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd80      	pop	{r7, pc}

08008bfc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b086      	sub	sp, #24
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008c0a:	b2db      	uxtb	r3, r3
 8008c0c:	2b22      	cmp	r3, #34	; 0x22
 8008c0e:	f040 809b 	bne.w	8008d48 <UART_Receive_IT+0x14c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	689b      	ldr	r3, [r3, #8]
 8008c16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c1a:	d117      	bne.n	8008c4c <UART_Receive_IT+0x50>
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	691b      	ldr	r3, [r3, #16]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d113      	bne.n	8008c4c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008c24:	2300      	movs	r3, #0
 8008c26:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c2c:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	685b      	ldr	r3, [r3, #4]
 8008c34:	b29b      	uxth	r3, r3
 8008c36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c3a:	b29a      	uxth	r2, r3
 8008c3c:	693b      	ldr	r3, [r7, #16]
 8008c3e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c44:	1c9a      	adds	r2, r3, #2
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	629a      	str	r2, [r3, #40]	; 0x28
 8008c4a:	e026      	b.n	8008c9a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c50:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8008c52:	2300      	movs	r3, #0
 8008c54:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	689b      	ldr	r3, [r3, #8]
 8008c5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c5e:	d007      	beq.n	8008c70 <UART_Receive_IT+0x74>
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	689b      	ldr	r3, [r3, #8]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d10a      	bne.n	8008c7e <UART_Receive_IT+0x82>
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	691b      	ldr	r3, [r3, #16]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d106      	bne.n	8008c7e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	685b      	ldr	r3, [r3, #4]
 8008c76:	b2da      	uxtb	r2, r3
 8008c78:	697b      	ldr	r3, [r7, #20]
 8008c7a:	701a      	strb	r2, [r3, #0]
 8008c7c:	e008      	b.n	8008c90 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	685b      	ldr	r3, [r3, #4]
 8008c84:	b2db      	uxtb	r3, r3
 8008c86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c8a:	b2da      	uxtb	r2, r3
 8008c8c:	697b      	ldr	r3, [r7, #20]
 8008c8e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c94:	1c5a      	adds	r2, r3, #1
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008c9e:	b29b      	uxth	r3, r3
 8008ca0:	3b01      	subs	r3, #1
 8008ca2:	b29b      	uxth	r3, r3
 8008ca4:	687a      	ldr	r2, [r7, #4]
 8008ca6:	4619      	mov	r1, r3
 8008ca8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d14a      	bne.n	8008d44 <UART_Receive_IT+0x148>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	68da      	ldr	r2, [r3, #12]
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	f022 0220 	bic.w	r2, r2, #32
 8008cbc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	68da      	ldr	r2, [r3, #12]
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008ccc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	695a      	ldr	r2, [r3, #20]
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f022 0201 	bic.w	r2, r2, #1
 8008cdc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2220      	movs	r2, #32
 8008ce2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cea:	2b01      	cmp	r3, #1
 8008cec:	d124      	bne.n	8008d38 <UART_Receive_IT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	68da      	ldr	r2, [r3, #12]
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f022 0210 	bic.w	r2, r2, #16
 8008d02:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f003 0310 	and.w	r3, r3, #16
 8008d0e:	2b10      	cmp	r3, #16
 8008d10:	d10a      	bne.n	8008d28 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008d12:	2300      	movs	r3, #0
 8008d14:	60fb      	str	r3, [r7, #12]
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	60fb      	str	r3, [r7, #12]
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	685b      	ldr	r3, [r3, #4]
 8008d24:	60fb      	str	r3, [r7, #12]
 8008d26:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d2c:	687a      	ldr	r2, [r7, #4]
 8008d2e:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8008d30:	4611      	mov	r1, r2
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	4798      	blx	r3
 8008d36:	e003      	b.n	8008d40 <UART_Receive_IT+0x144>
      else
      {
       /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	4798      	blx	r3
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008d40:	2300      	movs	r3, #0
 8008d42:	e002      	b.n	8008d4a <UART_Receive_IT+0x14e>
    }
    return HAL_OK;
 8008d44:	2300      	movs	r3, #0
 8008d46:	e000      	b.n	8008d4a <UART_Receive_IT+0x14e>
  }
  else
  {
    return HAL_BUSY;
 8008d48:	2302      	movs	r3, #2
  }
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	3718      	adds	r7, #24
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}
	...

08008d54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b084      	sub	sp, #16
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	685b      	ldr	r3, [r3, #4]
 8008d60:	4a5f      	ldr	r2, [pc, #380]	; (8008ee0 <UART_SetConfig+0x18c>)
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d904      	bls.n	8008d70 <UART_SetConfig+0x1c>
 8008d66:	f640 6153 	movw	r1, #3667	; 0xe53
 8008d6a:	485e      	ldr	r0, [pc, #376]	; (8008ee4 <UART_SetConfig+0x190>)
 8008d6c:	f7f9 fb0e 	bl	800238c <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	68db      	ldr	r3, [r3, #12]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d009      	beq.n	8008d8c <UART_SetConfig+0x38>
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	68db      	ldr	r3, [r3, #12]
 8008d7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d80:	d004      	beq.n	8008d8c <UART_SetConfig+0x38>
 8008d82:	f640 6154 	movw	r1, #3668	; 0xe54
 8008d86:	4857      	ldr	r0, [pc, #348]	; (8008ee4 <UART_SetConfig+0x190>)
 8008d88:	f7f9 fb00 	bl	800238c <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	691b      	ldr	r3, [r3, #16]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d00e      	beq.n	8008db2 <UART_SetConfig+0x5e>
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	691b      	ldr	r3, [r3, #16]
 8008d98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d9c:	d009      	beq.n	8008db2 <UART_SetConfig+0x5e>
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	691b      	ldr	r3, [r3, #16]
 8008da2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008da6:	d004      	beq.n	8008db2 <UART_SetConfig+0x5e>
 8008da8:	f640 6155 	movw	r1, #3669	; 0xe55
 8008dac:	484d      	ldr	r0, [pc, #308]	; (8008ee4 <UART_SetConfig+0x190>)
 8008dae:	f7f9 faed 	bl	800238c <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	695a      	ldr	r2, [r3, #20]
 8008db6:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8008dba:	4013      	ands	r3, r2
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d103      	bne.n	8008dc8 <UART_SetConfig+0x74>
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	695b      	ldr	r3, [r3, #20]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d104      	bne.n	8008dd2 <UART_SetConfig+0x7e>
 8008dc8:	f640 6156 	movw	r1, #3670	; 0xe56
 8008dcc:	4845      	ldr	r0, [pc, #276]	; (8008ee4 <UART_SetConfig+0x190>)
 8008dce:	f7f9 fadd 	bl	800238c <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	691b      	ldr	r3, [r3, #16]
 8008dd8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	68da      	ldr	r2, [r3, #12]
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	430a      	orrs	r2, r1
 8008de6:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	689a      	ldr	r2, [r3, #8]
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	691b      	ldr	r3, [r3, #16]
 8008df0:	431a      	orrs	r2, r3
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	695b      	ldr	r3, [r3, #20]
 8008df6:	4313      	orrs	r3, r2
 8008df8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	68db      	ldr	r3, [r3, #12]
 8008e00:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8008e04:	f023 030c 	bic.w	r3, r3, #12
 8008e08:	687a      	ldr	r2, [r7, #4]
 8008e0a:	6812      	ldr	r2, [r2, #0]
 8008e0c:	68b9      	ldr	r1, [r7, #8]
 8008e0e:	430b      	orrs	r3, r1
 8008e10:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	695b      	ldr	r3, [r3, #20]
 8008e18:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	699a      	ldr	r2, [r3, #24]
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	430a      	orrs	r2, r1
 8008e26:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	4a2e      	ldr	r2, [pc, #184]	; (8008ee8 <UART_SetConfig+0x194>)
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	d103      	bne.n	8008e3a <UART_SetConfig+0xe6>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008e32:	f7fb feb7 	bl	8004ba4 <HAL_RCC_GetPCLK2Freq>
 8008e36:	60f8      	str	r0, [r7, #12]
 8008e38:	e002      	b.n	8008e40 <UART_SetConfig+0xec>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008e3a:	f7fb fe9f 	bl	8004b7c <HAL_RCC_GetPCLK1Freq>
 8008e3e:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008e40:	68fa      	ldr	r2, [r7, #12]
 8008e42:	4613      	mov	r3, r2
 8008e44:	009b      	lsls	r3, r3, #2
 8008e46:	4413      	add	r3, r2
 8008e48:	009a      	lsls	r2, r3, #2
 8008e4a:	441a      	add	r2, r3
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	685b      	ldr	r3, [r3, #4]
 8008e50:	009b      	lsls	r3, r3, #2
 8008e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e56:	4a25      	ldr	r2, [pc, #148]	; (8008eec <UART_SetConfig+0x198>)
 8008e58:	fba2 2303 	umull	r2, r3, r2, r3
 8008e5c:	095b      	lsrs	r3, r3, #5
 8008e5e:	0119      	lsls	r1, r3, #4
 8008e60:	68fa      	ldr	r2, [r7, #12]
 8008e62:	4613      	mov	r3, r2
 8008e64:	009b      	lsls	r3, r3, #2
 8008e66:	4413      	add	r3, r2
 8008e68:	009a      	lsls	r2, r3, #2
 8008e6a:	441a      	add	r2, r3
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	685b      	ldr	r3, [r3, #4]
 8008e70:	009b      	lsls	r3, r3, #2
 8008e72:	fbb2 f2f3 	udiv	r2, r2, r3
 8008e76:	4b1d      	ldr	r3, [pc, #116]	; (8008eec <UART_SetConfig+0x198>)
 8008e78:	fba3 0302 	umull	r0, r3, r3, r2
 8008e7c:	095b      	lsrs	r3, r3, #5
 8008e7e:	2064      	movs	r0, #100	; 0x64
 8008e80:	fb00 f303 	mul.w	r3, r0, r3
 8008e84:	1ad3      	subs	r3, r2, r3
 8008e86:	011b      	lsls	r3, r3, #4
 8008e88:	3332      	adds	r3, #50	; 0x32
 8008e8a:	4a18      	ldr	r2, [pc, #96]	; (8008eec <UART_SetConfig+0x198>)
 8008e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8008e90:	095b      	lsrs	r3, r3, #5
 8008e92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008e96:	4419      	add	r1, r3
 8008e98:	68fa      	ldr	r2, [r7, #12]
 8008e9a:	4613      	mov	r3, r2
 8008e9c:	009b      	lsls	r3, r3, #2
 8008e9e:	4413      	add	r3, r2
 8008ea0:	009a      	lsls	r2, r3, #2
 8008ea2:	441a      	add	r2, r3
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	685b      	ldr	r3, [r3, #4]
 8008ea8:	009b      	lsls	r3, r3, #2
 8008eaa:	fbb2 f2f3 	udiv	r2, r2, r3
 8008eae:	4b0f      	ldr	r3, [pc, #60]	; (8008eec <UART_SetConfig+0x198>)
 8008eb0:	fba3 0302 	umull	r0, r3, r3, r2
 8008eb4:	095b      	lsrs	r3, r3, #5
 8008eb6:	2064      	movs	r0, #100	; 0x64
 8008eb8:	fb00 f303 	mul.w	r3, r0, r3
 8008ebc:	1ad3      	subs	r3, r2, r3
 8008ebe:	011b      	lsls	r3, r3, #4
 8008ec0:	3332      	adds	r3, #50	; 0x32
 8008ec2:	4a0a      	ldr	r2, [pc, #40]	; (8008eec <UART_SetConfig+0x198>)
 8008ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8008ec8:	095b      	lsrs	r3, r3, #5
 8008eca:	f003 020f 	and.w	r2, r3, #15
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	440a      	add	r2, r1
 8008ed4:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008ed6:	bf00      	nop
 8008ed8:	3710      	adds	r7, #16
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bd80      	pop	{r7, pc}
 8008ede:	bf00      	nop
 8008ee0:	0044aa20 	.word	0x0044aa20
 8008ee4:	080106ec 	.word	0x080106ec
 8008ee8:	40013800 	.word	0x40013800
 8008eec:	51eb851f 	.word	0x51eb851f

08008ef0 <BAT_init>:
} T_ADC_Context;

static T_ADC_Context g_ADC_context;

void BAT_init(ADC_HandleTypeDef *p_adcHandle)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b082      	sub	sp, #8
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
  LOG_info("Initializing battery check");
 8008ef8:	4905      	ldr	r1, [pc, #20]	; (8008f10 <BAT_init+0x20>)
 8008efa:	2001      	movs	r0, #1
 8008efc:	f001 fcde 	bl	800a8bc <LOG_log>

  g_ADC_context.adcHandle = p_adcHandle;
 8008f00:	4a04      	ldr	r2, [pc, #16]	; (8008f14 <BAT_init+0x24>)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6013      	str	r3, [r2, #0]

  return;
 8008f06:	bf00      	nop
}
 8008f08:	3708      	adds	r7, #8
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}
 8008f0e:	bf00      	nop
 8008f10:	08010728 	.word	0x08010728
 8008f14:	20000234 	.word	0x20000234

08008f18 <BAT_update>:

void BAT_update(uint32_t *p_voltageInMv)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b084      	sub	sp, #16
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
  uint32_t l_adcRawData;
  float    l_voltageInV;

  l_adcRawData = HAL_ADC_GetValue(g_ADC_context.adcHandle);
 8008f20:	4b18      	ldr	r3, [pc, #96]	; (8008f84 <BAT_update+0x6c>)
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	4618      	mov	r0, r3
 8008f26:	f7fa f8d1 	bl	80030cc <HAL_ADC_GetValue>
 8008f2a:	60f8      	str	r0, [r7, #12]

  /* Apply conversion based on STM32 reference voltage & resolution */
  l_voltageInV  = (l_adcRawData * 3.30f ) / 4096.0f;
 8008f2c:	68f8      	ldr	r0, [r7, #12]
 8008f2e:	f7f7 ff3d 	bl	8000dac <__aeabi_ui2f>
 8008f32:	4603      	mov	r3, r0
 8008f34:	4914      	ldr	r1, [pc, #80]	; (8008f88 <BAT_update+0x70>)
 8008f36:	4618      	mov	r0, r3
 8008f38:	f7f7 ff90 	bl	8000e5c <__aeabi_fmul>
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 8008f42:	4618      	mov	r0, r3
 8008f44:	f7f8 f83e 	bl	8000fc4 <__aeabi_fdiv>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	60bb      	str	r3, [r7, #8]

  /* Consider voltage divider used between the battery & the ADC input */
  l_voltageInV *= 11.0f;
 8008f4c:	490f      	ldr	r1, [pc, #60]	; (8008f8c <BAT_update+0x74>)
 8008f4e:	68b8      	ldr	r0, [r7, #8]
 8008f50:	f7f7 ff84 	bl	8000e5c <__aeabi_fmul>
 8008f54:	4603      	mov	r3, r0
 8008f56:	60bb      	str	r3, [r7, #8]

  *p_voltageInMv = (uint32_t)(l_voltageInV * 1000.0f);
 8008f58:	490d      	ldr	r1, [pc, #52]	; (8008f90 <BAT_update+0x78>)
 8008f5a:	68b8      	ldr	r0, [r7, #8]
 8008f5c:	f7f7 ff7e 	bl	8000e5c <__aeabi_fmul>
 8008f60:	4603      	mov	r3, r0
 8008f62:	4618      	mov	r0, r3
 8008f64:	f7f8 f8f0 	bl	8001148 <__aeabi_f2uiz>
 8008f68:	4602      	mov	r2, r0
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	601a      	str	r2, [r3, #0]

  LOG_debug("Battery level: %u mV", *p_voltageInMv);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	461a      	mov	r2, r3
 8008f74:	4907      	ldr	r1, [pc, #28]	; (8008f94 <BAT_update+0x7c>)
 8008f76:	2000      	movs	r0, #0
 8008f78:	f001 fca0 	bl	800a8bc <LOG_log>

  return;
 8008f7c:	bf00      	nop
}
 8008f7e:	3710      	adds	r7, #16
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bd80      	pop	{r7, pc}
 8008f84:	20000234 	.word	0x20000234
 8008f88:	40533333 	.word	0x40533333
 8008f8c:	41300000 	.word	0x41300000
 8008f90:	447a0000 	.word	0x447a0000
 8008f94:	08010744 	.word	0x08010744

08008f98 <BLU_sendCommand>:
static void         BLU_sendCommand(uint8_t  p_command);
static void         BLU_readData   (uint8_t *p_buffer );
static T_BLU_BUTTON BLU_getButton  (uint8_t *p_buffer );

static void BLU_sendCommand(uint8_t p_command)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b084      	sub	sp, #16
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	71fb      	strb	r3, [r7, #7]
  volatile uint16_t l_bitValue;

  for (l_bitValue = 0x01; l_bitValue < 0x0100; l_bitValue <<= 1)
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	81fb      	strh	r3, [r7, #14]
 8008fa6:	e030      	b.n	800900a <BLU_sendCommand+0x72>
  {
    if ((l_bitValue & p_command) != 0)
 8008fa8:	89fb      	ldrh	r3, [r7, #14]
 8008faa:	b29b      	uxth	r3, r3
 8008fac:	461a      	mov	r2, r3
 8008fae:	79fb      	ldrb	r3, [r7, #7]
 8008fb0:	4013      	ands	r3, r2
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d006      	beq.n	8008fc4 <BLU_sendCommand+0x2c>
    {
      SET_BIT(GPIOC->ODR, BLUETOOTH_SPI_CMD_Pin);
 8008fb6:	4b1a      	ldr	r3, [pc, #104]	; (8009020 <BLU_sendCommand+0x88>)
 8008fb8:	68db      	ldr	r3, [r3, #12]
 8008fba:	4a19      	ldr	r2, [pc, #100]	; (8009020 <BLU_sendCommand+0x88>)
 8008fbc:	f043 0302 	orr.w	r3, r3, #2
 8008fc0:	60d3      	str	r3, [r2, #12]
 8008fc2:	e005      	b.n	8008fd0 <BLU_sendCommand+0x38>
    }
    else
    {
      CLEAR_BIT(GPIOC->ODR, BLUETOOTH_SPI_CMD_Pin);
 8008fc4:	4b16      	ldr	r3, [pc, #88]	; (8009020 <BLU_sendCommand+0x88>)
 8008fc6:	68db      	ldr	r3, [r3, #12]
 8008fc8:	4a15      	ldr	r2, [pc, #84]	; (8009020 <BLU_sendCommand+0x88>)
 8008fca:	f023 0302 	bic.w	r3, r3, #2
 8008fce:	60d3      	str	r3, [r2, #12]
    }

    SET_BIT(GPIOA->ODR  , BLUETOOTH_SPI_CLK_Pin);
 8008fd0:	4b14      	ldr	r3, [pc, #80]	; (8009024 <BLU_sendCommand+0x8c>)
 8008fd2:	68db      	ldr	r3, [r3, #12]
 8008fd4:	4a13      	ldr	r2, [pc, #76]	; (8009024 <BLU_sendCommand+0x8c>)
 8008fd6:	f043 0310 	orr.w	r3, r3, #16
 8008fda:	60d3      	str	r3, [r2, #12]
    UTI_delayUs(5);
 8008fdc:	2005      	movs	r0, #5
 8008fde:	f002 f9d7 	bl	800b390 <UTI_delayUs>
    CLEAR_BIT(GPIOA->ODR, BLUETOOTH_SPI_CLK_Pin);
 8008fe2:	4b10      	ldr	r3, [pc, #64]	; (8009024 <BLU_sendCommand+0x8c>)
 8008fe4:	68db      	ldr	r3, [r3, #12]
 8008fe6:	4a0f      	ldr	r2, [pc, #60]	; (8009024 <BLU_sendCommand+0x8c>)
 8008fe8:	f023 0310 	bic.w	r3, r3, #16
 8008fec:	60d3      	str	r3, [r2, #12]
    UTI_delayUs(5);
 8008fee:	2005      	movs	r0, #5
 8008ff0:	f002 f9ce 	bl	800b390 <UTI_delayUs>
    SET_BIT(GPIOA->ODR  , BLUETOOTH_SPI_CLK_Pin);
 8008ff4:	4b0b      	ldr	r3, [pc, #44]	; (8009024 <BLU_sendCommand+0x8c>)
 8008ff6:	68db      	ldr	r3, [r3, #12]
 8008ff8:	4a0a      	ldr	r2, [pc, #40]	; (8009024 <BLU_sendCommand+0x8c>)
 8008ffa:	f043 0310 	orr.w	r3, r3, #16
 8008ffe:	60d3      	str	r3, [r2, #12]
  for (l_bitValue = 0x01; l_bitValue < 0x0100; l_bitValue <<= 1)
 8009000:	89fb      	ldrh	r3, [r7, #14]
 8009002:	b29b      	uxth	r3, r3
 8009004:	005b      	lsls	r3, r3, #1
 8009006:	b29b      	uxth	r3, r3
 8009008:	81fb      	strh	r3, [r7, #14]
 800900a:	89fb      	ldrh	r3, [r7, #14]
 800900c:	b29b      	uxth	r3, r3
 800900e:	2bff      	cmp	r3, #255	; 0xff
 8009010:	d9ca      	bls.n	8008fa8 <BLU_sendCommand+0x10>
  }
  UTI_delayUs(16);
 8009012:	2010      	movs	r0, #16
 8009014:	f002 f9bc 	bl	800b390 <UTI_delayUs>

  return;
 8009018:	bf00      	nop
}
 800901a:	3710      	adds	r7, #16
 800901c:	46bd      	mov	sp, r7
 800901e:	bd80      	pop	{r7, pc}
 8009020:	40011000 	.word	0x40011000
 8009024:	40010800 	.word	0x40010800

08009028 <BLU_readData>:

static void BLU_readData(uint8_t *p_buffer)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b084      	sub	sp, #16
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
  volatile uint8_t  l_index;
  volatile uint16_t l_bitValue;

  /* Reset buffer */
  for (l_index = 0; l_index < BLU_DATA_BUFFER_LENGTH; l_index++)
 8009030:	2300      	movs	r3, #0
 8009032:	73fb      	strb	r3, [r7, #15]
 8009034:	e00b      	b.n	800904e <BLU_readData+0x26>
  {
    p_buffer[l_index] = 0x00;
 8009036:	7bfb      	ldrb	r3, [r7, #15]
 8009038:	b2db      	uxtb	r3, r3
 800903a:	461a      	mov	r2, r3
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	4413      	add	r3, r2
 8009040:	2200      	movs	r2, #0
 8009042:	701a      	strb	r2, [r3, #0]
  for (l_index = 0; l_index < BLU_DATA_BUFFER_LENGTH; l_index++)
 8009044:	7bfb      	ldrb	r3, [r7, #15]
 8009046:	b2db      	uxtb	r3, r3
 8009048:	3301      	adds	r3, #1
 800904a:	b2db      	uxtb	r3, r3
 800904c:	73fb      	strb	r3, [r7, #15]
 800904e:	7bfb      	ldrb	r3, [r7, #15]
 8009050:	b2db      	uxtb	r3, r3
 8009052:	2b06      	cmp	r3, #6
 8009054:	d9ef      	bls.n	8009036 <BLU_readData+0xe>
  }

  CLEAR_BIT(GPIOC->ODR, BLUETOOTH_SPI_CS_Pin);
 8009056:	4b2e      	ldr	r3, [pc, #184]	; (8009110 <BLU_readData+0xe8>)
 8009058:	68db      	ldr	r3, [r3, #12]
 800905a:	4a2d      	ldr	r2, [pc, #180]	; (8009110 <BLU_readData+0xe8>)
 800905c:	f023 0308 	bic.w	r3, r3, #8
 8009060:	60d3      	str	r3, [r2, #12]

  BLU_sendCommand(0x01);
 8009062:	2001      	movs	r0, #1
 8009064:	f7ff ff98 	bl	8008f98 <BLU_sendCommand>
  BLU_sendCommand(0x42);
 8009068:	2042      	movs	r0, #66	; 0x42
 800906a:	f7ff ff95 	bl	8008f98 <BLU_sendCommand>

  for (l_index = 0; l_index < BLU_DATA_BUFFER_LENGTH; l_index++)
 800906e:	2300      	movs	r3, #0
 8009070:	73fb      	strb	r3, [r7, #15]
 8009072:	e03f      	b.n	80090f4 <BLU_readData+0xcc>
  {
    for (l_bitValue = 0x01; l_bitValue < 0x100; l_bitValue <<= 1)
 8009074:	2301      	movs	r3, #1
 8009076:	81bb      	strh	r3, [r7, #12]
 8009078:	e030      	b.n	80090dc <BLU_readData+0xb4>
    {
      SET_BIT(GPIOA->ODR  , BLUETOOTH_SPI_CLK_Pin);
 800907a:	4b26      	ldr	r3, [pc, #152]	; (8009114 <BLU_readData+0xec>)
 800907c:	68db      	ldr	r3, [r3, #12]
 800907e:	4a25      	ldr	r2, [pc, #148]	; (8009114 <BLU_readData+0xec>)
 8009080:	f043 0310 	orr.w	r3, r3, #16
 8009084:	60d3      	str	r3, [r2, #12]
      UTI_delayUs(5);
 8009086:	2005      	movs	r0, #5
 8009088:	f002 f982 	bl	800b390 <UTI_delayUs>
      CLEAR_BIT(GPIOA->ODR, BLUETOOTH_SPI_CLK_Pin);
 800908c:	4b21      	ldr	r3, [pc, #132]	; (8009114 <BLU_readData+0xec>)
 800908e:	68db      	ldr	r3, [r3, #12]
 8009090:	4a20      	ldr	r2, [pc, #128]	; (8009114 <BLU_readData+0xec>)
 8009092:	f023 0310 	bic.w	r3, r3, #16
 8009096:	60d3      	str	r3, [r2, #12]
      UTI_delayUs(5);
 8009098:	2005      	movs	r0, #5
 800909a:	f002 f979 	bl	800b390 <UTI_delayUs>
      SET_BIT(GPIOA->ODR  , BLUETOOTH_SPI_CLK_Pin);
 800909e:	4b1d      	ldr	r3, [pc, #116]	; (8009114 <BLU_readData+0xec>)
 80090a0:	68db      	ldr	r3, [r3, #12]
 80090a2:	4a1c      	ldr	r2, [pc, #112]	; (8009114 <BLU_readData+0xec>)
 80090a4:	f043 0310 	orr.w	r3, r3, #16
 80090a8:	60d3      	str	r3, [r2, #12]

      if (READ_BIT(GPIOC->IDR, BLUETOOTH_SPI_DAT_Pin) != GPIO_PIN_RESET)
 80090aa:	4b19      	ldr	r3, [pc, #100]	; (8009110 <BLU_readData+0xe8>)
 80090ac:	689b      	ldr	r3, [r3, #8]
 80090ae:	f003 0304 	and.w	r3, r3, #4
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d00d      	beq.n	80090d2 <BLU_readData+0xaa>
      {
        p_buffer[l_index] |= l_bitValue;
 80090b6:	89bb      	ldrh	r3, [r7, #12]
 80090b8:	b29a      	uxth	r2, r3
 80090ba:	7bfb      	ldrb	r3, [r7, #15]
 80090bc:	b2d8      	uxtb	r0, r3
 80090be:	4601      	mov	r1, r0
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	440b      	add	r3, r1
 80090c4:	7819      	ldrb	r1, [r3, #0]
 80090c6:	b2d2      	uxtb	r2, r2
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	4403      	add	r3, r0
 80090cc:	430a      	orrs	r2, r1
 80090ce:	b2d2      	uxtb	r2, r2
 80090d0:	701a      	strb	r2, [r3, #0]
    for (l_bitValue = 0x01; l_bitValue < 0x100; l_bitValue <<= 1)
 80090d2:	89bb      	ldrh	r3, [r7, #12]
 80090d4:	b29b      	uxth	r3, r3
 80090d6:	005b      	lsls	r3, r3, #1
 80090d8:	b29b      	uxth	r3, r3
 80090da:	81bb      	strh	r3, [r7, #12]
 80090dc:	89bb      	ldrh	r3, [r7, #12]
 80090de:	b29b      	uxth	r3, r3
 80090e0:	2bff      	cmp	r3, #255	; 0xff
 80090e2:	d9ca      	bls.n	800907a <BLU_readData+0x52>
      else
      {
        ; /* Nothing to do */
      }
    }
      UTI_delayUs(16);
 80090e4:	2010      	movs	r0, #16
 80090e6:	f002 f953 	bl	800b390 <UTI_delayUs>
  for (l_index = 0; l_index < BLU_DATA_BUFFER_LENGTH; l_index++)
 80090ea:	7bfb      	ldrb	r3, [r7, #15]
 80090ec:	b2db      	uxtb	r3, r3
 80090ee:	3301      	adds	r3, #1
 80090f0:	b2db      	uxtb	r3, r3
 80090f2:	73fb      	strb	r3, [r7, #15]
 80090f4:	7bfb      	ldrb	r3, [r7, #15]
 80090f6:	b2db      	uxtb	r3, r3
 80090f8:	2b06      	cmp	r3, #6
 80090fa:	d9bb      	bls.n	8009074 <BLU_readData+0x4c>
  }

  SET_BIT(GPIOC->ODR, BLUETOOTH_SPI_CS_Pin);
 80090fc:	4b04      	ldr	r3, [pc, #16]	; (8009110 <BLU_readData+0xe8>)
 80090fe:	68db      	ldr	r3, [r3, #12]
 8009100:	4a03      	ldr	r2, [pc, #12]	; (8009110 <BLU_readData+0xe8>)
 8009102:	f043 0308 	orr.w	r3, r3, #8
 8009106:	60d3      	str	r3, [r2, #12]

  return;
 8009108:	bf00      	nop
}
 800910a:	3710      	adds	r7, #16
 800910c:	46bd      	mov	sp, r7
 800910e:	bd80      	pop	{r7, pc}
 8009110:	40011000 	.word	0x40011000
 8009114:	40010800 	.word	0x40010800

08009118 <BLU_getButton>:

static T_BLU_BUTTON BLU_getButton(uint8_t *p_buffer)
{
 8009118:	b480      	push	{r7}
 800911a:	b085      	sub	sp, #20
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
  uint16_t l_buttonRawValue;
  uint8_t  l_index;

  l_buttonRawValue = (p_buffer[BLU_BUTTON_HIGH_OFFSET] << 8) | p_buffer[BLU_BUTTON_LOW_OFFSET];
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	3302      	adds	r3, #2
 8009124:	781b      	ldrb	r3, [r3, #0]
 8009126:	021b      	lsls	r3, r3, #8
 8009128:	b21a      	sxth	r2, r3
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	3301      	adds	r3, #1
 800912e:	781b      	ldrb	r3, [r3, #0]
 8009130:	b21b      	sxth	r3, r3
 8009132:	4313      	orrs	r3, r2
 8009134:	b21b      	sxth	r3, r3
 8009136:	81bb      	strh	r3, [r7, #12]

  /* Ignore BLU_BUTTON_NONE value as it is not directly coded in raw data */
  for (l_index = BLU_BUTTON_SELECT; l_index < BLU_BUTTON_COUNT_VALUE; l_index++)
 8009138:	2301      	movs	r3, #1
 800913a:	73fb      	strb	r3, [r7, #15]
 800913c:	e00d      	b.n	800915a <BLU_getButton+0x42>
  {
    /* Stop decoding button data on 1st match (do not deal with multiple presses case) */
    if ((l_buttonRawValue & (1 << (l_index - 1))) == 0)
 800913e:	89ba      	ldrh	r2, [r7, #12]
 8009140:	7bfb      	ldrb	r3, [r7, #15]
 8009142:	3b01      	subs	r3, #1
 8009144:	fa42 f303 	asr.w	r3, r2, r3
 8009148:	f003 0301 	and.w	r3, r3, #1
 800914c:	2b00      	cmp	r3, #0
 800914e:	d101      	bne.n	8009154 <BLU_getButton+0x3c>
    {
      return l_index;
 8009150:	7bfb      	ldrb	r3, [r7, #15]
 8009152:	e006      	b.n	8009162 <BLU_getButton+0x4a>
  for (l_index = BLU_BUTTON_SELECT; l_index < BLU_BUTTON_COUNT_VALUE; l_index++)
 8009154:	7bfb      	ldrb	r3, [r7, #15]
 8009156:	3301      	adds	r3, #1
 8009158:	73fb      	strb	r3, [r7, #15]
 800915a:	7bfb      	ldrb	r3, [r7, #15]
 800915c:	2b10      	cmp	r3, #16
 800915e:	d9ee      	bls.n	800913e <BLU_getButton+0x26>
    {
      ; /* Nothing to do */
    }
  }

  return BLU_BUTTON_NONE;
 8009160:	2300      	movs	r3, #0
}
 8009162:	4618      	mov	r0, r3
 8009164:	3714      	adds	r7, #20
 8009166:	46bd      	mov	sp, r7
 8009168:	bc80      	pop	{r7}
 800916a:	4770      	bx	lr

0800916c <BLU_init>:

void BLU_init(void)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	af00      	add	r7, sp, #0
  LOG_info("Initializing bluetooth control");
 8009170:	4904      	ldr	r1, [pc, #16]	; (8009184 <BLU_init+0x18>)
 8009172:	2001      	movs	r0, #1
 8009174:	f001 fba2 	bl	800a8bc <LOG_log>

  BLU_initData(&g_BLU_context.lastData);
 8009178:	4803      	ldr	r0, [pc, #12]	; (8009188 <BLU_init+0x1c>)
 800917a:	f000 f807 	bl	800918c <BLU_initData>

  return;
 800917e:	bf00      	nop
}
 8009180:	bd80      	pop	{r7, pc}
 8009182:	bf00      	nop
 8009184:	0801075c 	.word	0x0801075c
 8009188:	20000238 	.word	0x20000238

0800918c <BLU_initData>:

void BLU_initData(T_BLU_Data *p_data)
{
 800918c:	b480      	push	{r7}
 800918e:	b083      	sub	sp, #12
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
  p_data->leftX  = BLU_DATA_DEFAUT_DIRECTION;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2280      	movs	r2, #128	; 0x80
 8009198:	601a      	str	r2, [r3, #0]
  p_data->leftY  = BLU_DATA_DEFAUT_DIRECTION;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2280      	movs	r2, #128	; 0x80
 800919e:	605a      	str	r2, [r3, #4]
  p_data->rightX = BLU_DATA_DEFAUT_DIRECTION;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2280      	movs	r2, #128	; 0x80
 80091a4:	609a      	str	r2, [r3, #8]
  p_data->rightY = BLU_DATA_DEFAUT_DIRECTION;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2280      	movs	r2, #128	; 0x80
 80091aa:	60da      	str	r2, [r3, #12]
  p_data->button = BLU_BUTTON_NONE;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2200      	movs	r2, #0
 80091b0:	741a      	strb	r2, [r3, #16]

  return;
 80091b2:	bf00      	nop
}
 80091b4:	370c      	adds	r7, #12
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bc80      	pop	{r7}
 80091ba:	4770      	bx	lr

080091bc <BLU_receiveData>:

void BLU_receiveData(T_BLU_Data *p_data)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b08c      	sub	sp, #48	; 0x30
 80091c0:	af02      	add	r7, sp, #8
 80091c2:	6078      	str	r0, [r7, #4]
  uint8_t    l_buffer[BLU_DATA_BUFFER_LENGTH];
  T_BLU_Data l_readData;

  /* Read raw data */
  BLU_readData(l_buffer);
 80091c4:	f107 0320 	add.w	r3, r7, #32
 80091c8:	4618      	mov	r0, r3
 80091ca:	f7ff ff2d 	bl	8009028 <BLU_readData>

  /* Start and decode raw data */
  l_readData.leftX  = l_buffer[BLU_LEFT_X_OFFSET ];
 80091ce:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80091d2:	60fb      	str	r3, [r7, #12]
  l_readData.leftY  = l_buffer[BLU_LEFT_Y_OFFSET ];
 80091d4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80091d8:	613b      	str	r3, [r7, #16]
  l_readData.rightX = l_buffer[BLU_RIGHT_X_OFFSET];
 80091da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80091de:	617b      	str	r3, [r7, #20]
  l_readData.rightY = l_buffer[BLU_RIGHT_Y_OFFSET];
 80091e0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80091e4:	61bb      	str	r3, [r7, #24]
  l_readData.button = BLU_getButton(l_buffer);
 80091e6:	f107 0320 	add.w	r3, r7, #32
 80091ea:	4618      	mov	r0, r3
 80091ec:	f7ff ff94 	bl	8009118 <BLU_getButton>
 80091f0:	4603      	mov	r3, r0
 80091f2:	773b      	strb	r3, [r7, #28]

  /* Deal with startup condition, while read data is not valid yet */
  if  ((l_readData.leftX == 255 && l_readData.leftY == 255 && l_readData.rightX == 255 && l_readData.rightY ==255)
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	2bff      	cmp	r3, #255	; 0xff
 80091f8:	d108      	bne.n	800920c <BLU_receiveData+0x50>
 80091fa:	693b      	ldr	r3, [r7, #16]
 80091fc:	2bff      	cmp	r3, #255	; 0xff
 80091fe:	d105      	bne.n	800920c <BLU_receiveData+0x50>
 8009200:	697b      	ldr	r3, [r7, #20]
 8009202:	2bff      	cmp	r3, #255	; 0xff
 8009204:	d102      	bne.n	800920c <BLU_receiveData+0x50>
 8009206:	69bb      	ldr	r3, [r7, #24]
 8009208:	2bff      	cmp	r3, #255	; 0xff
 800920a:	d00b      	beq.n	8009224 <BLU_receiveData+0x68>
    || (l_readData.leftX ==   0 && l_readData.leftY ==   0 && l_readData.rightX ==   0 && l_readData.rightY ==  0))
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d10e      	bne.n	8009230 <BLU_receiveData+0x74>
 8009212:	693b      	ldr	r3, [r7, #16]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d10b      	bne.n	8009230 <BLU_receiveData+0x74>
 8009218:	697b      	ldr	r3, [r7, #20]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d108      	bne.n	8009230 <BLU_receiveData+0x74>
 800921e:	69bb      	ldr	r3, [r7, #24]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d105      	bne.n	8009230 <BLU_receiveData+0x74>
  {
    BLU_initData(&l_readData);
 8009224:	f107 030c 	add.w	r3, r7, #12
 8009228:	4618      	mov	r0, r3
 800922a:	f7ff ffaf 	bl	800918c <BLU_initData>
 800922e:	e053      	b.n	80092d8 <BLU_receiveData+0x11c>
  }
  /* Use a confirmation mechanism, on 2 cycles, as glitches are observed */
  else if ((l_readData.leftX  == g_BLU_context.lastData.leftX) &&
 8009230:	68fa      	ldr	r2, [r7, #12]
 8009232:	4b33      	ldr	r3, [pc, #204]	; (8009300 <BLU_receiveData+0x144>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	429a      	cmp	r2, r3
 8009238:	d14e      	bne.n	80092d8 <BLU_receiveData+0x11c>
           (l_readData.leftY  == g_BLU_context.lastData.leftY) &&
 800923a:	693a      	ldr	r2, [r7, #16]
 800923c:	4b30      	ldr	r3, [pc, #192]	; (8009300 <BLU_receiveData+0x144>)
 800923e:	685b      	ldr	r3, [r3, #4]
  else if ((l_readData.leftX  == g_BLU_context.lastData.leftX) &&
 8009240:	429a      	cmp	r2, r3
 8009242:	d149      	bne.n	80092d8 <BLU_receiveData+0x11c>
           (l_readData.rightX == g_BLU_context.lastData.rightX) &&
 8009244:	697a      	ldr	r2, [r7, #20]
 8009246:	4b2e      	ldr	r3, [pc, #184]	; (8009300 <BLU_receiveData+0x144>)
 8009248:	689b      	ldr	r3, [r3, #8]
           (l_readData.leftY  == g_BLU_context.lastData.leftY) &&
 800924a:	429a      	cmp	r2, r3
 800924c:	d144      	bne.n	80092d8 <BLU_receiveData+0x11c>
           (l_readData.rightY == g_BLU_context.lastData.rightY) &&
 800924e:	69ba      	ldr	r2, [r7, #24]
 8009250:	4b2b      	ldr	r3, [pc, #172]	; (8009300 <BLU_receiveData+0x144>)
 8009252:	68db      	ldr	r3, [r3, #12]
           (l_readData.rightX == g_BLU_context.lastData.rightX) &&
 8009254:	429a      	cmp	r2, r3
 8009256:	d13f      	bne.n	80092d8 <BLU_receiveData+0x11c>
           (l_readData.button == g_BLU_context.lastData.button))
 8009258:	7f3a      	ldrb	r2, [r7, #28]
 800925a:	4b29      	ldr	r3, [pc, #164]	; (8009300 <BLU_receiveData+0x144>)
 800925c:	7c1b      	ldrb	r3, [r3, #16]
           (l_readData.rightY == g_BLU_context.lastData.rightY) &&
 800925e:	429a      	cmp	r2, r3
 8009260:	d13a      	bne.n	80092d8 <BLU_receiveData+0x11c>
  {
    /* Normalize directions data in range [-MAX..MAX] */
    p_data->leftX  = UTI_normalizeIntValue(l_readData.leftX , 0, 255, -STP_DRIVE_MAX_SPEED, STP_DRIVE_MAX_SPEED, false);
 8009262:	68f8      	ldr	r0, [r7, #12]
 8009264:	2300      	movs	r3, #0
 8009266:	9301      	str	r3, [sp, #4]
 8009268:	2328      	movs	r3, #40	; 0x28
 800926a:	9300      	str	r3, [sp, #0]
 800926c:	f06f 0327 	mvn.w	r3, #39	; 0x27
 8009270:	22ff      	movs	r2, #255	; 0xff
 8009272:	2100      	movs	r1, #0
 8009274:	f002 f911 	bl	800b49a <UTI_normalizeIntValue>
 8009278:	4602      	mov	r2, r0
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	601a      	str	r2, [r3, #0]
    p_data->leftY  = UTI_normalizeIntValue(l_readData.leftY , 0, 255, -STP_DRIVE_MAX_SPEED, STP_DRIVE_MAX_SPEED, true );
 800927e:	6938      	ldr	r0, [r7, #16]
 8009280:	2301      	movs	r3, #1
 8009282:	9301      	str	r3, [sp, #4]
 8009284:	2328      	movs	r3, #40	; 0x28
 8009286:	9300      	str	r3, [sp, #0]
 8009288:	f06f 0327 	mvn.w	r3, #39	; 0x27
 800928c:	22ff      	movs	r2, #255	; 0xff
 800928e:	2100      	movs	r1, #0
 8009290:	f002 f903 	bl	800b49a <UTI_normalizeIntValue>
 8009294:	4602      	mov	r2, r0
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	605a      	str	r2, [r3, #4]
    p_data->rightX = UTI_normalizeIntValue(l_readData.rightX, 0, 255, -STP_DRIVE_MAX_SPEED, STP_DRIVE_MAX_SPEED, false);
 800929a:	6978      	ldr	r0, [r7, #20]
 800929c:	2300      	movs	r3, #0
 800929e:	9301      	str	r3, [sp, #4]
 80092a0:	2328      	movs	r3, #40	; 0x28
 80092a2:	9300      	str	r3, [sp, #0]
 80092a4:	f06f 0327 	mvn.w	r3, #39	; 0x27
 80092a8:	22ff      	movs	r2, #255	; 0xff
 80092aa:	2100      	movs	r1, #0
 80092ac:	f002 f8f5 	bl	800b49a <UTI_normalizeIntValue>
 80092b0:	4602      	mov	r2, r0
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	609a      	str	r2, [r3, #8]
    p_data->rightY = UTI_normalizeIntValue(l_readData.rightY, 0, 255, -STP_DRIVE_MAX_SPEED, STP_DRIVE_MAX_SPEED, true );
 80092b6:	69b8      	ldr	r0, [r7, #24]
 80092b8:	2301      	movs	r3, #1
 80092ba:	9301      	str	r3, [sp, #4]
 80092bc:	2328      	movs	r3, #40	; 0x28
 80092be:	9300      	str	r3, [sp, #0]
 80092c0:	f06f 0327 	mvn.w	r3, #39	; 0x27
 80092c4:	22ff      	movs	r2, #255	; 0xff
 80092c6:	2100      	movs	r1, #0
 80092c8:	f002 f8e7 	bl	800b49a <UTI_normalizeIntValue>
 80092cc:	4602      	mov	r2, r0
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	60da      	str	r2, [r3, #12]
    p_data->button = l_readData.button;
 80092d2:	7f3a      	ldrb	r2, [r7, #28]
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	741a      	strb	r2, [r3, #16]
  {
    ; /* Nothing to do */
  }

  /* Saved received data for later use in confirmation mechanism */
  g_BLU_context.lastData.leftX  = l_readData.leftX;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	4a09      	ldr	r2, [pc, #36]	; (8009300 <BLU_receiveData+0x144>)
 80092dc:	6013      	str	r3, [r2, #0]
  g_BLU_context.lastData.leftY  = l_readData.leftY;
 80092de:	693b      	ldr	r3, [r7, #16]
 80092e0:	4a07      	ldr	r2, [pc, #28]	; (8009300 <BLU_receiveData+0x144>)
 80092e2:	6053      	str	r3, [r2, #4]
  g_BLU_context.lastData.rightX = l_readData.rightX;
 80092e4:	697b      	ldr	r3, [r7, #20]
 80092e6:	4a06      	ldr	r2, [pc, #24]	; (8009300 <BLU_receiveData+0x144>)
 80092e8:	6093      	str	r3, [r2, #8]
  g_BLU_context.lastData.rightY = l_readData.rightY;
 80092ea:	69bb      	ldr	r3, [r7, #24]
 80092ec:	4a04      	ldr	r2, [pc, #16]	; (8009300 <BLU_receiveData+0x144>)
 80092ee:	60d3      	str	r3, [r2, #12]
  g_BLU_context.lastData.button = l_readData.button;
 80092f0:	7f3a      	ldrb	r2, [r7, #28]
 80092f2:	4b03      	ldr	r3, [pc, #12]	; (8009300 <BLU_receiveData+0x144>)
 80092f4:	741a      	strb	r2, [r3, #16]

  return;
 80092f6:	bf00      	nop
}
 80092f8:	3728      	adds	r7, #40	; 0x28
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}
 80092fe:	bf00      	nop
 8009300:	20000238 	.word	0x20000238

08009304 <CBU_init>:
#include "circular_buffer.h"

#include "log.h"

void CBU_init(T_CBU_Handle *p_buffer)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b084      	sub	sp, #16
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
  uint32_t l_index;

  LOG_debug("Initializing circular buffer");
 800930c:	490e      	ldr	r1, [pc, #56]	; (8009348 <CBU_init+0x44>)
 800930e:	2000      	movs	r0, #0
 8009310:	f001 fad4 	bl	800a8bc <LOG_log>

  for (l_index = 0; l_index < CST_CIRCULAR_BUFFER_MAX_ELEMENTS; l_index++)
 8009314:	2300      	movs	r3, #0
 8009316:	60fb      	str	r3, [r7, #12]
 8009318:	e008      	b.n	800932c <CBU_init+0x28>
  {
    p_buffer->elements[l_index] = 0.0f;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	68fa      	ldr	r2, [r7, #12]
 800931e:	f04f 0100 	mov.w	r1, #0
 8009322:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (l_index = 0; l_index < CST_CIRCULAR_BUFFER_MAX_ELEMENTS; l_index++)
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	3301      	adds	r3, #1
 800932a:	60fb      	str	r3, [r7, #12]
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	2b09      	cmp	r3, #9
 8009330:	d9f3      	bls.n	800931a <CBU_init+0x16>
  }

  p_buffer->count = 0;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2200      	movs	r2, #0
 8009336:	62da      	str	r2, [r3, #44]	; 0x2c
  p_buffer->index = 0;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2200      	movs	r2, #0
 800933c:	629a      	str	r2, [r3, #40]	; 0x28

  return;
 800933e:	bf00      	nop
}
 8009340:	3710      	adds	r7, #16
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}
 8009346:	bf00      	nop
 8009348:	0801077c 	.word	0x0801077c

0800934c <CBU_push>:

void CBU_push(T_CBU_Handle *p_buffer, float p_element)
{
 800934c:	b480      	push	{r7}
 800934e:	b083      	sub	sp, #12
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
 8009354:	6039      	str	r1, [r7, #0]
  if (p_buffer->index == CST_CIRCULAR_BUFFER_MAX_ELEMENTS - 1)
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800935a:	2b09      	cmp	r3, #9
 800935c:	d103      	bne.n	8009366 <CBU_push+0x1a>
  {
    p_buffer->index = 0;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2200      	movs	r2, #0
 8009362:	629a      	str	r2, [r3, #40]	; 0x28
 8009364:	e004      	b.n	8009370 <CBU_push+0x24>
  }
  else
  {
    p_buffer->index++;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800936a:	1c5a      	adds	r2, r3, #1
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  p_buffer->elements[p_buffer->index] = p_element;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	6839      	ldr	r1, [r7, #0]
 8009378:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  if (p_buffer->count < CST_CIRCULAR_BUFFER_MAX_ELEMENTS)
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009380:	2b09      	cmp	r3, #9
 8009382:	d805      	bhi.n	8009390 <CBU_push+0x44>
  {
    p_buffer->count++;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009388:	1c5a      	adds	r2, r3, #1
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	62da      	str	r2, [r3, #44]	; 0x2c
  else
  {
    ; /* Nothing to do */
  }

  return;
 800938e:	bf00      	nop
 8009390:	bf00      	nop
}
 8009392:	370c      	adds	r7, #12
 8009394:	46bd      	mov	sp, r7
 8009396:	bc80      	pop	{r7}
 8009398:	4770      	bx	lr

0800939a <CBU_getAverage>:
{
  return p_buffer->count;
}

float CBU_getAverage(T_CBU_Handle *p_buffer)
{
 800939a:	b580      	push	{r7, lr}
 800939c:	b086      	sub	sp, #24
 800939e:	af00      	add	r7, sp, #0
 80093a0:	6078      	str	r0, [r7, #4]
  uint32_t l_index;
  uint32_t l_count;
  float    l_average;

  l_index   = p_buffer->index;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093a6:	617b      	str	r3, [r7, #20]
  l_count   = 0;
 80093a8:	2300      	movs	r3, #0
 80093aa:	613b      	str	r3, [r7, #16]
  l_average = 0.0f;
 80093ac:	f04f 0300 	mov.w	r3, #0
 80093b0:	60fb      	str	r3, [r7, #12]

  while (l_count < p_buffer->count)
 80093b2:	e015      	b.n	80093e0 <CBU_getAverage+0x46>
  {
    l_average += p_buffer->elements[l_index];
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	697a      	ldr	r2, [r7, #20]
 80093b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093bc:	4619      	mov	r1, r3
 80093be:	68f8      	ldr	r0, [r7, #12]
 80093c0:	f7f7 fc44 	bl	8000c4c <__addsf3>
 80093c4:	4603      	mov	r3, r0
 80093c6:	60fb      	str	r3, [r7, #12]

    if (l_index == CST_CIRCULAR_BUFFER_MAX_ELEMENTS - 1)
 80093c8:	697b      	ldr	r3, [r7, #20]
 80093ca:	2b09      	cmp	r3, #9
 80093cc:	d102      	bne.n	80093d4 <CBU_getAverage+0x3a>
    {
      l_index = 0;
 80093ce:	2300      	movs	r3, #0
 80093d0:	617b      	str	r3, [r7, #20]
 80093d2:	e002      	b.n	80093da <CBU_getAverage+0x40>
    }
    else
    {
      l_index++;
 80093d4:	697b      	ldr	r3, [r7, #20]
 80093d6:	3301      	adds	r3, #1
 80093d8:	617b      	str	r3, [r7, #20]
    }

    l_count++;
 80093da:	693b      	ldr	r3, [r7, #16]
 80093dc:	3301      	adds	r3, #1
 80093de:	613b      	str	r3, [r7, #16]
  while (l_count < p_buffer->count)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093e4:	693a      	ldr	r2, [r7, #16]
 80093e6:	429a      	cmp	r2, r3
 80093e8:	d3e4      	bcc.n	80093b4 <CBU_getAverage+0x1a>
  }

  l_average /= (float)p_buffer->count;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093ee:	4618      	mov	r0, r3
 80093f0:	f7f7 fcdc 	bl	8000dac <__aeabi_ui2f>
 80093f4:	4603      	mov	r3, r0
 80093f6:	4619      	mov	r1, r3
 80093f8:	68f8      	ldr	r0, [r7, #12]
 80093fa:	f7f7 fde3 	bl	8000fc4 <__aeabi_fdiv>
 80093fe:	4603      	mov	r3, r0
 8009400:	60fb      	str	r3, [r7, #12]

  return l_average;
 8009402:	68fb      	ldr	r3, [r7, #12]
}
 8009404:	4618      	mov	r0, r3
 8009406:	3718      	adds	r7, #24
 8009408:	46bd      	mov	sp, r7
 800940a:	bd80      	pop	{r7, pc}

0800940c <CON_init>:
} T_CON_Context;

static T_CON_Context g_CON_context;

void CON_init(UART_HandleTypeDef *p_uartHandle)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b082      	sub	sp, #8
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
  LOG_info("Initializing console");
 8009414:	490d      	ldr	r1, [pc, #52]	; (800944c <CON_init+0x40>)
 8009416:	2001      	movs	r0, #1
 8009418:	f001 fa50 	bl	800a8bc <LOG_log>

  g_CON_context.uartHandle     = p_uartHandle;
 800941c:	4a0c      	ldr	r2, [pc, #48]	; (8009450 <CON_init+0x44>)
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6013      	str	r3, [r2, #0]
  g_CON_context.dataSize       = 0;
 8009422:	4b0b      	ldr	r3, [pc, #44]	; (8009450 <CON_init+0x44>)
 8009424:	2200      	movs	r2, #0
 8009426:	619a      	str	r2, [r3, #24]
  g_CON_context.isDataComplete = false;
 8009428:	4b09      	ldr	r3, [pc, #36]	; (8009450 <CON_init+0x44>)
 800942a:	2200      	movs	r2, #0
 800942c:	771a      	strb	r2, [r3, #28]

  SFO_initData(&g_CON_context.data);
 800942e:	4809      	ldr	r0, [pc, #36]	; (8009454 <CON_init+0x48>)
 8009430:	f001 fe8c 	bl	800b14c <SFO_initData>

  HAL_UART_Receive_IT(g_CON_context.uartHandle, &g_CON_context.datum, 1);
 8009434:	4b06      	ldr	r3, [pc, #24]	; (8009450 <CON_init+0x44>)
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	2201      	movs	r2, #1
 800943a:	4907      	ldr	r1, [pc, #28]	; (8009458 <CON_init+0x4c>)
 800943c:	4618      	mov	r0, r3
 800943e:	f7ff f859 	bl	80084f4 <HAL_UART_Receive_IT>

  return;
 8009442:	bf00      	nop
}
 8009444:	3708      	adds	r7, #8
 8009446:	46bd      	mov	sp, r7
 8009448:	bd80      	pop	{r7, pc}
 800944a:	bf00      	nop
 800944c:	080107e0 	.word	0x080107e0
 8009450:	2000024c 	.word	0x2000024c
 8009454:	20000251 	.word	0x20000251
 8009458:	20000250 	.word	0x20000250

0800945c <CON_receiveData>:

void CON_receiveData(void)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	af00      	add	r7, sp, #0
  /* If previous command was not processed yet, drop datum, */
  /* which will lead to an error, showing a design issue... */
  if (g_CON_context.isDataComplete == true)
 8009460:	4b10      	ldr	r3, [pc, #64]	; (80094a4 <CON_receiveData+0x48>)
 8009462:	7f1b      	ldrb	r3, [r3, #28]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d114      	bne.n	8009492 <CON_receiveData+0x36>
  {
    ; /* Nothing to do */
  }
  else
  {
    if (g_CON_context.datum == '\r')
 8009468:	4b0e      	ldr	r3, [pc, #56]	; (80094a4 <CON_receiveData+0x48>)
 800946a:	791b      	ldrb	r3, [r3, #4]
 800946c:	2b0d      	cmp	r3, #13
 800946e:	d103      	bne.n	8009478 <CON_receiveData+0x1c>
    {
      g_CON_context.isDataComplete = true;
 8009470:	4b0c      	ldr	r3, [pc, #48]	; (80094a4 <CON_receiveData+0x48>)
 8009472:	2201      	movs	r2, #1
 8009474:	771a      	strb	r2, [r3, #28]
 8009476:	e00c      	b.n	8009492 <CON_receiveData+0x36>
    }
    else
    {
      g_CON_context.data[g_CON_context.dataSize] = g_CON_context.datum;
 8009478:	4b0a      	ldr	r3, [pc, #40]	; (80094a4 <CON_receiveData+0x48>)
 800947a:	699b      	ldr	r3, [r3, #24]
 800947c:	4a09      	ldr	r2, [pc, #36]	; (80094a4 <CON_receiveData+0x48>)
 800947e:	7911      	ldrb	r1, [r2, #4]
 8009480:	4a08      	ldr	r2, [pc, #32]	; (80094a4 <CON_receiveData+0x48>)
 8009482:	4413      	add	r3, r2
 8009484:	460a      	mov	r2, r1
 8009486:	715a      	strb	r2, [r3, #5]
      g_CON_context.dataSize++;
 8009488:	4b06      	ldr	r3, [pc, #24]	; (80094a4 <CON_receiveData+0x48>)
 800948a:	699b      	ldr	r3, [r3, #24]
 800948c:	3301      	adds	r3, #1
 800948e:	4a05      	ldr	r2, [pc, #20]	; (80094a4 <CON_receiveData+0x48>)
 8009490:	6193      	str	r3, [r2, #24]
    }
  }

  HAL_UART_Receive_IT(g_CON_context.uartHandle, &g_CON_context.datum, 1);
 8009492:	4b04      	ldr	r3, [pc, #16]	; (80094a4 <CON_receiveData+0x48>)
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	2201      	movs	r2, #1
 8009498:	4903      	ldr	r1, [pc, #12]	; (80094a8 <CON_receiveData+0x4c>)
 800949a:	4618      	mov	r0, r3
 800949c:	f7ff f82a 	bl	80084f4 <HAL_UART_Receive_IT>

  return;
 80094a0:	bf00      	nop
}
 80094a2:	bd80      	pop	{r7, pc}
 80094a4:	2000024c 	.word	0x2000024c
 80094a8:	20000250 	.word	0x20000250

080094ac <CON_updateFifo>:

void CON_updateFifo(T_SFO_Handle *p_fifo)
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b082      	sub	sp, #8
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
  if (g_CON_context.isDataComplete == false)
 80094b4:	4b0c      	ldr	r3, [pc, #48]	; (80094e8 <CON_updateFifo+0x3c>)
 80094b6:	7f1b      	ldrb	r3, [r3, #28]
 80094b8:	f083 0301 	eor.w	r3, r3, #1
 80094bc:	b2db      	uxtb	r3, r3
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d10d      	bne.n	80094de <CON_updateFifo+0x32>
  {
    ; /* Nothing to do */
  }
  else
  {
    SFO_push    (p_fifo, &g_CON_context.data);
 80094c2:	490a      	ldr	r1, [pc, #40]	; (80094ec <CON_updateFifo+0x40>)
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	f001 fe67 	bl	800b198 <SFO_push>
    SFO_initData(        &g_CON_context.data);
 80094ca:	4808      	ldr	r0, [pc, #32]	; (80094ec <CON_updateFifo+0x40>)
 80094cc:	f001 fe3e 	bl	800b14c <SFO_initData>

    g_CON_context.dataSize       = 0;
 80094d0:	4b05      	ldr	r3, [pc, #20]	; (80094e8 <CON_updateFifo+0x3c>)
 80094d2:	2200      	movs	r2, #0
 80094d4:	619a      	str	r2, [r3, #24]
    g_CON_context.isDataComplete = false;
 80094d6:	4b04      	ldr	r3, [pc, #16]	; (80094e8 <CON_updateFifo+0x3c>)
 80094d8:	2200      	movs	r2, #0
 80094da:	771a      	strb	r2, [r3, #28]
  }

  return;
 80094dc:	bf00      	nop
 80094de:	bf00      	nop
}
 80094e0:	3708      	adds	r7, #8
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bd80      	pop	{r7, pc}
 80094e6:	bf00      	nop
 80094e8:	2000024c 	.word	0x2000024c
 80094ec:	20000251 	.word	0x20000251

080094f0 <CON_sendString>:

void CON_sendString(char *p_string, uint32_t p_length)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b082      	sub	sp, #8
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
 80094f8:	6039      	str	r1, [r7, #0]
  /* As this method is using for logging/debug, we will not deal with failure cases */
  (void)HAL_UART_Transmit(g_CON_context.uartHandle,
 80094fa:	4b06      	ldr	r3, [pc, #24]	; (8009514 <CON_sendString+0x24>)
 80094fc:	6818      	ldr	r0, [r3, #0]
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	b29a      	uxth	r2, r3
 8009502:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009506:	6879      	ldr	r1, [r7, #4]
 8009508:	f7fe ff62 	bl	80083d0 <HAL_UART_Transmit>
               (uint8_t *)p_string,
                          p_length,
                          CST_UART_TRANSMIT_TIMEOUT_IN_MS);

  return;
 800950c:	bf00      	nop
}
 800950e:	3708      	adds	r7, #8
 8009510:	46bd      	mov	sp, r7
 8009512:	bd80      	pop	{r7, pc}
 8009514:	2000024c 	.word	0x2000024c

08009518 <DRV_init>:
              TIM_HandleTypeDef *p_msTimerHandle,
              TIM_HandleTypeDef *p_rearLeftEncoderTimerHandle,
              TIM_HandleTypeDef *p_rearRightEncoderTimerHandle,
              TIM_HandleTypeDef *p_frontRightEncoderTimerHandle,
              TIM_HandleTypeDef *p_frontLeftEncoderTimerHandle)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b08c      	sub	sp, #48	; 0x30
 800951c:	af08      	add	r7, sp, #32
 800951e:	60f8      	str	r0, [r7, #12]
 8009520:	60b9      	str	r1, [r7, #8]
 8009522:	607a      	str	r2, [r7, #4]
 8009524:	603b      	str	r3, [r7, #0]
  LOG_info("Initializing Drive module");
 8009526:	4938      	ldr	r1, [pc, #224]	; (8009608 <DRV_init+0xf0>)
 8009528:	2001      	movs	r0, #1
 800952a:	f001 f9c7 	bl	800a8bc <LOG_log>

  g_DRV_context.selectPressedStartTimeInS = 0;
 800952e:	4b37      	ldr	r3, [pc, #220]	; (800960c <DRV_init+0xf4>)
 8009530:	2200      	movs	r2, #0
 8009532:	601a      	str	r2, [r3, #0]

  /* Setup all 4 wheels */
  WHL_init(&g_DRV_context.wheelFrontRight,
 8009534:	2300      	movs	r3, #0
 8009536:	9307      	str	r3, [sp, #28]
 8009538:	68bb      	ldr	r3, [r7, #8]
 800953a:	9306      	str	r3, [sp, #24]
 800953c:	69bb      	ldr	r3, [r7, #24]
 800953e:	9305      	str	r3, [sp, #20]
 8009540:	2301      	movs	r3, #1
 8009542:	9304      	str	r3, [sp, #16]
 8009544:	230c      	movs	r3, #12
 8009546:	9303      	str	r3, [sp, #12]
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	9302      	str	r3, [sp, #8]
 800954c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009550:	9301      	str	r3, [sp, #4]
 8009552:	4b2f      	ldr	r3, [pc, #188]	; (8009610 <DRV_init+0xf8>)
 8009554:	9300      	str	r3, [sp, #0]
 8009556:	2304      	movs	r3, #4
 8009558:	4a2e      	ldr	r2, [pc, #184]	; (8009614 <DRV_init+0xfc>)
 800955a:	492f      	ldr	r1, [pc, #188]	; (8009618 <DRV_init+0x100>)
 800955c:	482f      	ldr	r0, [pc, #188]	; (800961c <DRV_init+0x104>)
 800955e:	f001 ffeb 	bl	800b538 <WHL_init>
            true,
            p_frontRightEncoderTimerHandle,
            p_msTimerHandle,
            STP_DEFAULT_MOTORS_MODE);

  WHL_init(&g_DRV_context.wheelFrontLeft,
 8009562:	2300      	movs	r3, #0
 8009564:	9307      	str	r3, [sp, #28]
 8009566:	68bb      	ldr	r3, [r7, #8]
 8009568:	9306      	str	r3, [sp, #24]
 800956a:	69fb      	ldr	r3, [r7, #28]
 800956c:	9305      	str	r3, [sp, #20]
 800956e:	2300      	movs	r3, #0
 8009570:	9304      	str	r3, [sp, #16]
 8009572:	2308      	movs	r3, #8
 8009574:	9303      	str	r3, [sp, #12]
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	9302      	str	r3, [sp, #8]
 800957a:	2310      	movs	r3, #16
 800957c:	9301      	str	r3, [sp, #4]
 800957e:	4b28      	ldr	r3, [pc, #160]	; (8009620 <DRV_init+0x108>)
 8009580:	9300      	str	r3, [sp, #0]
 8009582:	2320      	movs	r3, #32
 8009584:	4a26      	ldr	r2, [pc, #152]	; (8009620 <DRV_init+0x108>)
 8009586:	4927      	ldr	r1, [pc, #156]	; (8009624 <DRV_init+0x10c>)
 8009588:	4827      	ldr	r0, [pc, #156]	; (8009628 <DRV_init+0x110>)
 800958a:	f001 ffd5 	bl	800b538 <WHL_init>
            false,
            p_frontLeftEncoderTimerHandle,
            p_msTimerHandle,
            STP_DEFAULT_MOTORS_MODE);

  WHL_init(&g_DRV_context.wheelRearLeft,
 800958e:	2300      	movs	r3, #0
 8009590:	9307      	str	r3, [sp, #28]
 8009592:	68bb      	ldr	r3, [r7, #8]
 8009594:	9306      	str	r3, [sp, #24]
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	9305      	str	r3, [sp, #20]
 800959a:	2300      	movs	r3, #0
 800959c:	9304      	str	r3, [sp, #16]
 800959e:	2304      	movs	r3, #4
 80095a0:	9303      	str	r3, [sp, #12]
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	9302      	str	r3, [sp, #8]
 80095a6:	2320      	movs	r3, #32
 80095a8:	9301      	str	r3, [sp, #4]
 80095aa:	4b19      	ldr	r3, [pc, #100]	; (8009610 <DRV_init+0xf8>)
 80095ac:	9300      	str	r3, [sp, #0]
 80095ae:	2310      	movs	r3, #16
 80095b0:	4a17      	ldr	r2, [pc, #92]	; (8009610 <DRV_init+0xf8>)
 80095b2:	491e      	ldr	r1, [pc, #120]	; (800962c <DRV_init+0x114>)
 80095b4:	481e      	ldr	r0, [pc, #120]	; (8009630 <DRV_init+0x118>)
 80095b6:	f001 ffbf 	bl	800b538 <WHL_init>
            false,
            p_rearLeftEncoderTimerHandle,
            p_msTimerHandle,
            STP_DEFAULT_MOTORS_MODE);

  WHL_init(&g_DRV_context.wheelRearRight,
 80095ba:	2300      	movs	r3, #0
 80095bc:	9307      	str	r3, [sp, #28]
 80095be:	68bb      	ldr	r3, [r7, #8]
 80095c0:	9306      	str	r3, [sp, #24]
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	9305      	str	r3, [sp, #20]
 80095c6:	2301      	movs	r3, #1
 80095c8:	9304      	str	r3, [sp, #16]
 80095ca:	2300      	movs	r3, #0
 80095cc:	9303      	str	r3, [sp, #12]
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	9302      	str	r3, [sp, #8]
 80095d2:	2302      	movs	r3, #2
 80095d4:	9301      	str	r3, [sp, #4]
 80095d6:	4b12      	ldr	r3, [pc, #72]	; (8009620 <DRV_init+0x108>)
 80095d8:	9300      	str	r3, [sp, #0]
 80095da:	2301      	movs	r3, #1
 80095dc:	4a10      	ldr	r2, [pc, #64]	; (8009620 <DRV_init+0x108>)
 80095de:	4915      	ldr	r1, [pc, #84]	; (8009634 <DRV_init+0x11c>)
 80095e0:	4815      	ldr	r0, [pc, #84]	; (8009638 <DRV_init+0x120>)
 80095e2:	f001 ffa9 	bl	800b538 <WHL_init>
            p_rearRightEncoderTimerHandle,
            p_msTimerHandle,
            STP_DEFAULT_MOTORS_MODE);

  /* Consider that bluetooth controller is OFF by default. Pressing START is needed. */
  g_DRV_context.isBluetoothOn = false;
 80095e6:	4b09      	ldr	r3, [pc, #36]	; (800960c <DRV_init+0xf4>)
 80095e8:	2200      	movs	r2, #0
 80095ea:	711a      	strb	r2, [r3, #4]

  /* Activate motors or not by default (de-activating them is used for debug) */
  g_DRV_context.areMotorsOn = STP_DEFAULT_MOTORS_MODE;
 80095ec:	4b07      	ldr	r3, [pc, #28]	; (800960c <DRV_init+0xf4>)
 80095ee:	2200      	movs	r2, #0
 80095f0:	715a      	strb	r2, [r3, #5]

  /* Start with default drive mode (different in debug and in release) */
  g_DRV_context.mode = STP_DEFAULT_DRIVE_MODE;
 80095f2:	4b06      	ldr	r3, [pc, #24]	; (800960c <DRV_init+0xf4>)
 80095f4:	2200      	movs	r2, #0
 80095f6:	719a      	strb	r2, [r3, #6]

  DRV_logInfo(false);
 80095f8:	2000      	movs	r0, #0
 80095fa:	f000 fc5f 	bl	8009ebc <DRV_logInfo>

  return;
 80095fe:	bf00      	nop
}
 8009600:	3710      	adds	r7, #16
 8009602:	46bd      	mov	sp, r7
 8009604:	bd80      	pop	{r7, pc}
 8009606:	bf00      	nop
 8009608:	080107f8 	.word	0x080107f8
 800960c:	2000026c 	.word	0x2000026c
 8009610:	40011000 	.word	0x40011000
 8009614:	40011400 	.word	0x40011400
 8009618:	08010814 	.word	0x08010814
 800961c:	20000274 	.word	0x20000274
 8009620:	40010c00 	.word	0x40010c00
 8009624:	08010820 	.word	0x08010820
 8009628:	20000320 	.word	0x20000320
 800962c:	0801082c 	.word	0x0801082c
 8009630:	200003cc 	.word	0x200003cc
 8009634:	08010838 	.word	0x08010838
 8009638:	20000478 	.word	0x20000478

0800963c <DRV_updateEncoder>:

void DRV_updateEncoder(TIM_HandleTypeDef *p_encoderTimerHandle)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b084      	sub	sp, #16
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
  int16_t l_count;

  l_count = __HAL_TIM_GET_COUNTER(p_encoderTimerHandle);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800964a:	81fb      	strh	r3, [r7, #14]

  /* Check the handle of the triggering timer and update encoder accordingly */
  if (p_encoderTimerHandle == g_DRV_context.wheelFrontRight.encoder.timerHandle)
 800964c:	4b1b      	ldr	r3, [pc, #108]	; (80096bc <DRV_updateEncoder+0x80>)
 800964e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009650:	687a      	ldr	r2, [r7, #4]
 8009652:	429a      	cmp	r2, r3
 8009654:	d106      	bne.n	8009664 <DRV_updateEncoder+0x28>
  {
    WHL_updateEncoder(&g_DRV_context.wheelFrontRight, l_count);
 8009656:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800965a:	4619      	mov	r1, r3
 800965c:	4818      	ldr	r0, [pc, #96]	; (80096c0 <DRV_updateEncoder+0x84>)
 800965e:	f001 ffee 	bl	800b63e <WHL_updateEncoder>
  else
  {
    ; /* Nothing to do */
  }

  return;
 8009662:	e026      	b.n	80096b2 <DRV_updateEncoder+0x76>
  else if (p_encoderTimerHandle == g_DRV_context.wheelFrontLeft.encoder.timerHandle)
 8009664:	4b15      	ldr	r3, [pc, #84]	; (80096bc <DRV_updateEncoder+0x80>)
 8009666:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800966a:	687a      	ldr	r2, [r7, #4]
 800966c:	429a      	cmp	r2, r3
 800966e:	d106      	bne.n	800967e <DRV_updateEncoder+0x42>
    WHL_updateEncoder(&g_DRV_context.wheelFrontLeft, l_count);
 8009670:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009674:	4619      	mov	r1, r3
 8009676:	4813      	ldr	r0, [pc, #76]	; (80096c4 <DRV_updateEncoder+0x88>)
 8009678:	f001 ffe1 	bl	800b63e <WHL_updateEncoder>
  return;
 800967c:	e019      	b.n	80096b2 <DRV_updateEncoder+0x76>
  else if (p_encoderTimerHandle == g_DRV_context.wheelRearRight.encoder.timerHandle)
 800967e:	4b0f      	ldr	r3, [pc, #60]	; (80096bc <DRV_updateEncoder+0x80>)
 8009680:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8009684:	687a      	ldr	r2, [r7, #4]
 8009686:	429a      	cmp	r2, r3
 8009688:	d106      	bne.n	8009698 <DRV_updateEncoder+0x5c>
    WHL_updateEncoder(&g_DRV_context.wheelRearRight, l_count);
 800968a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800968e:	4619      	mov	r1, r3
 8009690:	480d      	ldr	r0, [pc, #52]	; (80096c8 <DRV_updateEncoder+0x8c>)
 8009692:	f001 ffd4 	bl	800b63e <WHL_updateEncoder>
  return;
 8009696:	e00c      	b.n	80096b2 <DRV_updateEncoder+0x76>
  else if (p_encoderTimerHandle == g_DRV_context.wheelRearLeft.encoder.timerHandle)
 8009698:	4b08      	ldr	r3, [pc, #32]	; (80096bc <DRV_updateEncoder+0x80>)
 800969a:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 800969e:	687a      	ldr	r2, [r7, #4]
 80096a0:	429a      	cmp	r2, r3
 80096a2:	d106      	bne.n	80096b2 <DRV_updateEncoder+0x76>
    WHL_updateEncoder(&g_DRV_context.wheelRearLeft, l_count);
 80096a4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80096a8:	4619      	mov	r1, r3
 80096aa:	4808      	ldr	r0, [pc, #32]	; (80096cc <DRV_updateEncoder+0x90>)
 80096ac:	f001 ffc7 	bl	800b63e <WHL_updateEncoder>
  return;
 80096b0:	bf00      	nop
 80096b2:	bf00      	nop
}
 80096b4:	3710      	adds	r7, #16
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd80      	pop	{r7, pc}
 80096ba:	bf00      	nop
 80096bc:	2000026c 	.word	0x2000026c
 80096c0:	20000274 	.word	0x20000274
 80096c4:	20000320 	.word	0x20000320
 80096c8:	20000478 	.word	0x20000478
 80096cc:	200003cc 	.word	0x200003cc

080096d0 <DRV_updateFromBluetooth>:

void DRV_updateFromBluetooth(T_BLU_Data *p_bluetoothData, uint32_t p_timeInS)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b084      	sub	sp, #16
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
 80096d8:	6039      	str	r1, [r7, #0]
  uint32_t l_speed;

  if (p_bluetoothData->button == BLU_BUTTON_START)
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	7c1b      	ldrb	r3, [r3, #16]
 80096de:	2b04      	cmp	r3, #4
 80096e0:	d10f      	bne.n	8009702 <DRV_updateFromBluetooth+0x32>
  {
    if (g_DRV_context.isBluetoothOn == false)
 80096e2:	4ba2      	ldr	r3, [pc, #648]	; (800996c <DRV_updateFromBluetooth+0x29c>)
 80096e4:	791b      	ldrb	r3, [r3, #4]
 80096e6:	f083 0301 	eor.w	r3, r3, #1
 80096ea:	b2db      	uxtb	r3, r3
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	f000 8138 	beq.w	8009962 <DRV_updateFromBluetooth+0x292>
    {
      LOG_info("Bluetooth controller detected ON");
 80096f2:	499f      	ldr	r1, [pc, #636]	; (8009970 <DRV_updateFromBluetooth+0x2a0>)
 80096f4:	2001      	movs	r0, #1
 80096f6:	f001 f8e1 	bl	800a8bc <LOG_log>
      g_DRV_context.isBluetoothOn = true;
 80096fa:	4b9c      	ldr	r3, [pc, #624]	; (800996c <DRV_updateFromBluetooth+0x29c>)
 80096fc:	2201      	movs	r2, #1
 80096fe:	711a      	strb	r2, [r3, #4]
        DRV_stop();
      }
    }
  }

  return;
 8009700:	e12f      	b.n	8009962 <DRV_updateFromBluetooth+0x292>
  else if (g_DRV_context.isBluetoothOn == false)
 8009702:	4b9a      	ldr	r3, [pc, #616]	; (800996c <DRV_updateFromBluetooth+0x29c>)
 8009704:	791b      	ldrb	r3, [r3, #4]
 8009706:	f083 0301 	eor.w	r3, r3, #1
 800970a:	b2db      	uxtb	r3, r3
 800970c:	2b00      	cmp	r3, #0
 800970e:	f040 8128 	bne.w	8009962 <DRV_updateFromBluetooth+0x292>
    switch (p_bluetoothData->button)
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	7c1b      	ldrb	r3, [r3, #16]
 8009716:	3b01      	subs	r3, #1
 8009718:	2b0f      	cmp	r3, #15
 800971a:	d861      	bhi.n	80097e0 <DRV_updateFromBluetooth+0x110>
 800971c:	a201      	add	r2, pc, #4	; (adr r2, 8009724 <DRV_updateFromBluetooth+0x54>)
 800971e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009722:	bf00      	nop
 8009724:	080097b9 	.word	0x080097b9
 8009728:	080097e1 	.word	0x080097e1
 800972c:	080097e1 	.word	0x080097e1
 8009730:	080097e1 	.word	0x080097e1
 8009734:	080097e1 	.word	0x080097e1
 8009738:	080097e1 	.word	0x080097e1
 800973c:	080097e1 	.word	0x080097e1
 8009740:	080097e1 	.word	0x080097e1
 8009744:	080097e1 	.word	0x080097e1
 8009748:	080097e1 	.word	0x080097e1
 800974c:	080097e1 	.word	0x080097e1
 8009750:	080097e1 	.word	0x080097e1
 8009754:	080097e1 	.word	0x080097e1
 8009758:	0800979d 	.word	0x0800979d
 800975c:	08009781 	.word	0x08009781
 8009760:	08009765 	.word	0x08009765
        if (g_DRV_context.mode != DRV_MODE_MANUAL_FIXED_SPEED)
 8009764:	4b81      	ldr	r3, [pc, #516]	; (800996c <DRV_updateFromBluetooth+0x29c>)
 8009766:	799b      	ldrb	r3, [r3, #6]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d03b      	beq.n	80097e4 <DRV_updateFromBluetooth+0x114>
          DRV_stop();
 800976c:	f000 fd6c 	bl	800a248 <DRV_stop>
          g_DRV_context.mode = DRV_MODE_MANUAL_FIXED_SPEED;
 8009770:	4b7e      	ldr	r3, [pc, #504]	; (800996c <DRV_updateFromBluetooth+0x29c>)
 8009772:	2200      	movs	r2, #0
 8009774:	719a      	strb	r2, [r3, #6]
          LOG_info("Drive mode now DRV_MODE_MANUAL_FIXED_SPEED");
 8009776:	497f      	ldr	r1, [pc, #508]	; (8009974 <DRV_updateFromBluetooth+0x2a4>)
 8009778:	2001      	movs	r0, #1
 800977a:	f001 f89f 	bl	800a8bc <LOG_log>
        break;
 800977e:	e031      	b.n	80097e4 <DRV_updateFromBluetooth+0x114>
        if (g_DRV_context.mode != DRV_MODE_MANUAL_VARIABLE_SPEED)
 8009780:	4b7a      	ldr	r3, [pc, #488]	; (800996c <DRV_updateFromBluetooth+0x29c>)
 8009782:	799b      	ldrb	r3, [r3, #6]
 8009784:	2b01      	cmp	r3, #1
 8009786:	d02f      	beq.n	80097e8 <DRV_updateFromBluetooth+0x118>
          DRV_stop();
 8009788:	f000 fd5e 	bl	800a248 <DRV_stop>
          g_DRV_context.mode = DRV_MODE_MANUAL_VARIABLE_SPEED;
 800978c:	4b77      	ldr	r3, [pc, #476]	; (800996c <DRV_updateFromBluetooth+0x29c>)
 800978e:	2201      	movs	r2, #1
 8009790:	719a      	strb	r2, [r3, #6]
          LOG_info("Drive mode now DRV_MODE_MANUAL_VARIABLE_SPEED");
 8009792:	4979      	ldr	r1, [pc, #484]	; (8009978 <DRV_updateFromBluetooth+0x2a8>)
 8009794:	2001      	movs	r0, #1
 8009796:	f001 f891 	bl	800a8bc <LOG_log>
        break;
 800979a:	e025      	b.n	80097e8 <DRV_updateFromBluetooth+0x118>
        if (g_DRV_context.mode != DRV_MODE_MASTER_BOARD_CONTROL)
 800979c:	4b73      	ldr	r3, [pc, #460]	; (800996c <DRV_updateFromBluetooth+0x29c>)
 800979e:	799b      	ldrb	r3, [r3, #6]
 80097a0:	2b02      	cmp	r3, #2
 80097a2:	d023      	beq.n	80097ec <DRV_updateFromBluetooth+0x11c>
          DRV_stop();
 80097a4:	f000 fd50 	bl	800a248 <DRV_stop>
          g_DRV_context.mode = DRV_MODE_MASTER_BOARD_CONTROL;
 80097a8:	4b70      	ldr	r3, [pc, #448]	; (800996c <DRV_updateFromBluetooth+0x29c>)
 80097aa:	2202      	movs	r2, #2
 80097ac:	719a      	strb	r2, [r3, #6]
          LOG_info("Drive mode now DRV_MODE_MASTER_BOARD_CONTROL");
 80097ae:	4973      	ldr	r1, [pc, #460]	; (800997c <DRV_updateFromBluetooth+0x2ac>)
 80097b0:	2001      	movs	r0, #1
 80097b2:	f001 f883 	bl	800a8bc <LOG_log>
        break;
 80097b6:	e019      	b.n	80097ec <DRV_updateFromBluetooth+0x11c>
        if (g_DRV_context.selectPressedStartTimeInS == 0)
 80097b8:	4b6c      	ldr	r3, [pc, #432]	; (800996c <DRV_updateFromBluetooth+0x29c>)
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d105      	bne.n	80097cc <DRV_updateFromBluetooth+0xfc>
          g_DRV_context.selectPressedStartTimeInS = p_timeInS;
 80097c0:	4a6a      	ldr	r2, [pc, #424]	; (800996c <DRV_updateFromBluetooth+0x29c>)
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	6013      	str	r3, [r2, #0]
          DRV_toggleMotorsState();
 80097c6:	f000 fbfb 	bl	8009fc0 <DRV_toggleMotorsState>
        break;
 80097ca:	e011      	b.n	80097f0 <DRV_updateFromBluetooth+0x120>
        else if (p_timeInS - g_DRV_context.selectPressedStartTimeInS < STP_BUTTONS_DEBOUNCE_PERIOD_IN_S)
 80097cc:	4b67      	ldr	r3, [pc, #412]	; (800996c <DRV_updateFromBluetooth+0x29c>)
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	683a      	ldr	r2, [r7, #0]
 80097d2:	1ad3      	subs	r3, r2, r3
 80097d4:	2b01      	cmp	r3, #1
 80097d6:	d90b      	bls.n	80097f0 <DRV_updateFromBluetooth+0x120>
          g_DRV_context.selectPressedStartTimeInS = 0;
 80097d8:	4b64      	ldr	r3, [pc, #400]	; (800996c <DRV_updateFromBluetooth+0x29c>)
 80097da:	2200      	movs	r2, #0
 80097dc:	601a      	str	r2, [r3, #0]
        break;
 80097de:	e007      	b.n	80097f0 <DRV_updateFromBluetooth+0x120>
        break;
 80097e0:	bf00      	nop
 80097e2:	e006      	b.n	80097f2 <DRV_updateFromBluetooth+0x122>
        break;
 80097e4:	bf00      	nop
 80097e6:	e004      	b.n	80097f2 <DRV_updateFromBluetooth+0x122>
        break;
 80097e8:	bf00      	nop
 80097ea:	e002      	b.n	80097f2 <DRV_updateFromBluetooth+0x122>
        break;
 80097ec:	bf00      	nop
 80097ee:	e000      	b.n	80097f2 <DRV_updateFromBluetooth+0x122>
        break;
 80097f0:	bf00      	nop
    if (g_DRV_context.mode == DRV_MODE_MASTER_BOARD_CONTROL)
 80097f2:	4b5e      	ldr	r3, [pc, #376]	; (800996c <DRV_updateFromBluetooth+0x29c>)
 80097f4:	799b      	ldrb	r3, [r3, #6]
 80097f6:	2b02      	cmp	r3, #2
 80097f8:	f000 80b3 	beq.w	8009962 <DRV_updateFromBluetooth+0x292>
      if (p_bluetoothData->leftY > STP_JOYSTICKS_THRESHOLD)
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	685b      	ldr	r3, [r3, #4]
 8009800:	2b0f      	cmp	r3, #15
 8009802:	dd0c      	ble.n	800981e <DRV_updateFromBluetooth+0x14e>
        l_speed = g_DRV_context.mode == DRV_MODE_MANUAL_FIXED_SPEED ? STP_JOYSTICKS_FIXED_SPEED : p_bluetoothData->leftY;
 8009804:	4b59      	ldr	r3, [pc, #356]	; (800996c <DRV_updateFromBluetooth+0x29c>)
 8009806:	799b      	ldrb	r3, [r3, #6]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d002      	beq.n	8009812 <DRV_updateFromBluetooth+0x142>
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	685b      	ldr	r3, [r3, #4]
 8009810:	e000      	b.n	8009814 <DRV_updateFromBluetooth+0x144>
 8009812:	2314      	movs	r3, #20
 8009814:	60fb      	str	r3, [r7, #12]
        DRV_moveForward(l_speed);
 8009816:	68f8      	ldr	r0, [r7, #12]
 8009818:	f000 fd34 	bl	800a284 <DRV_moveForward>
  return;
 800981c:	e0a1      	b.n	8009962 <DRV_updateFromBluetooth+0x292>
      else if (p_bluetoothData->rightY > STP_JOYSTICKS_THRESHOLD)
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	68db      	ldr	r3, [r3, #12]
 8009822:	2b0f      	cmp	r3, #15
 8009824:	dd0c      	ble.n	8009840 <DRV_updateFromBluetooth+0x170>
        l_speed = g_DRV_context.mode == DRV_MODE_MANUAL_FIXED_SPEED ? STP_JOYSTICKS_FIXED_SPEED : p_bluetoothData->rightY;
 8009826:	4b51      	ldr	r3, [pc, #324]	; (800996c <DRV_updateFromBluetooth+0x29c>)
 8009828:	799b      	ldrb	r3, [r3, #6]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d002      	beq.n	8009834 <DRV_updateFromBluetooth+0x164>
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	68db      	ldr	r3, [r3, #12]
 8009832:	e000      	b.n	8009836 <DRV_updateFromBluetooth+0x166>
 8009834:	2314      	movs	r3, #20
 8009836:	60fb      	str	r3, [r7, #12]
        DRV_moveForward(l_speed);
 8009838:	68f8      	ldr	r0, [r7, #12]
 800983a:	f000 fd23 	bl	800a284 <DRV_moveForward>
  return;
 800983e:	e090      	b.n	8009962 <DRV_updateFromBluetooth+0x292>
      else if (p_bluetoothData->leftY < -STP_JOYSTICKS_THRESHOLD)
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	685b      	ldr	r3, [r3, #4]
 8009844:	f113 0f0f 	cmn.w	r3, #15
 8009848:	da0d      	bge.n	8009866 <DRV_updateFromBluetooth+0x196>
        l_speed = g_DRV_context.mode == DRV_MODE_MANUAL_FIXED_SPEED ? STP_JOYSTICKS_FIXED_SPEED : -p_bluetoothData->leftY;
 800984a:	4b48      	ldr	r3, [pc, #288]	; (800996c <DRV_updateFromBluetooth+0x29c>)
 800984c:	799b      	ldrb	r3, [r3, #6]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d003      	beq.n	800985a <DRV_updateFromBluetooth+0x18a>
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	685b      	ldr	r3, [r3, #4]
 8009856:	425b      	negs	r3, r3
 8009858:	e000      	b.n	800985c <DRV_updateFromBluetooth+0x18c>
 800985a:	2314      	movs	r3, #20
 800985c:	60fb      	str	r3, [r7, #12]
        DRV_moveBackward(l_speed);
 800985e:	68f8      	ldr	r0, [r7, #12]
 8009860:	f000 fd3a 	bl	800a2d8 <DRV_moveBackward>
  return;
 8009864:	e07d      	b.n	8009962 <DRV_updateFromBluetooth+0x292>
      else if (p_bluetoothData->rightY < -STP_JOYSTICKS_THRESHOLD)
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	68db      	ldr	r3, [r3, #12]
 800986a:	f113 0f0f 	cmn.w	r3, #15
 800986e:	da0d      	bge.n	800988c <DRV_updateFromBluetooth+0x1bc>
        l_speed = g_DRV_context.mode == DRV_MODE_MANUAL_FIXED_SPEED ? STP_JOYSTICKS_FIXED_SPEED : -p_bluetoothData->rightY;
 8009870:	4b3e      	ldr	r3, [pc, #248]	; (800996c <DRV_updateFromBluetooth+0x29c>)
 8009872:	799b      	ldrb	r3, [r3, #6]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d003      	beq.n	8009880 <DRV_updateFromBluetooth+0x1b0>
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	68db      	ldr	r3, [r3, #12]
 800987c:	425b      	negs	r3, r3
 800987e:	e000      	b.n	8009882 <DRV_updateFromBluetooth+0x1b2>
 8009880:	2314      	movs	r3, #20
 8009882:	60fb      	str	r3, [r7, #12]
        DRV_moveBackward(l_speed);
 8009884:	68f8      	ldr	r0, [r7, #12]
 8009886:	f000 fd27 	bl	800a2d8 <DRV_moveBackward>
  return;
 800988a:	e06a      	b.n	8009962 <DRV_updateFromBluetooth+0x292>
      else if (p_bluetoothData->leftX < -STP_JOYSTICKS_THRESHOLD)
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	f113 0f0f 	cmn.w	r3, #15
 8009894:	da0d      	bge.n	80098b2 <DRV_updateFromBluetooth+0x1e2>
        l_speed = g_DRV_context.mode == DRV_MODE_MANUAL_FIXED_SPEED ? STP_JOYSTICKS_FIXED_SPEED : -p_bluetoothData->leftX;
 8009896:	4b35      	ldr	r3, [pc, #212]	; (800996c <DRV_updateFromBluetooth+0x29c>)
 8009898:	799b      	ldrb	r3, [r3, #6]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d003      	beq.n	80098a6 <DRV_updateFromBluetooth+0x1d6>
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	425b      	negs	r3, r3
 80098a4:	e000      	b.n	80098a8 <DRV_updateFromBluetooth+0x1d8>
 80098a6:	2314      	movs	r3, #20
 80098a8:	60fb      	str	r3, [r7, #12]
        DRV_turnLeft(l_speed);
 80098aa:	68f8      	ldr	r0, [r7, #12]
 80098ac:	f000 fde6 	bl	800a47c <DRV_turnLeft>
  return;
 80098b0:	e057      	b.n	8009962 <DRV_updateFromBluetooth+0x292>
      else if (p_bluetoothData->leftX > STP_JOYSTICKS_THRESHOLD)
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	2b0f      	cmp	r3, #15
 80098b8:	dd0c      	ble.n	80098d4 <DRV_updateFromBluetooth+0x204>
        l_speed = g_DRV_context.mode == DRV_MODE_MANUAL_FIXED_SPEED ? STP_JOYSTICKS_FIXED_SPEED : p_bluetoothData->leftX;
 80098ba:	4b2c      	ldr	r3, [pc, #176]	; (800996c <DRV_updateFromBluetooth+0x29c>)
 80098bc:	799b      	ldrb	r3, [r3, #6]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d002      	beq.n	80098c8 <DRV_updateFromBluetooth+0x1f8>
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	e000      	b.n	80098ca <DRV_updateFromBluetooth+0x1fa>
 80098c8:	2314      	movs	r3, #20
 80098ca:	60fb      	str	r3, [r7, #12]
        DRV_turnRight(l_speed);
 80098cc:	68f8      	ldr	r0, [r7, #12]
 80098ce:	f000 fdff 	bl	800a4d0 <DRV_turnRight>
  return;
 80098d2:	e046      	b.n	8009962 <DRV_updateFromBluetooth+0x292>
      else if (p_bluetoothData->rightX < -STP_JOYSTICKS_THRESHOLD)
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	689b      	ldr	r3, [r3, #8]
 80098d8:	f113 0f0f 	cmn.w	r3, #15
 80098dc:	da0d      	bge.n	80098fa <DRV_updateFromBluetooth+0x22a>
        l_speed = g_DRV_context.mode == DRV_MODE_MANUAL_FIXED_SPEED ? STP_JOYSTICKS_FIXED_SPEED : -p_bluetoothData->rightX;
 80098de:	4b23      	ldr	r3, [pc, #140]	; (800996c <DRV_updateFromBluetooth+0x29c>)
 80098e0:	799b      	ldrb	r3, [r3, #6]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d003      	beq.n	80098ee <DRV_updateFromBluetooth+0x21e>
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	689b      	ldr	r3, [r3, #8]
 80098ea:	425b      	negs	r3, r3
 80098ec:	e000      	b.n	80098f0 <DRV_updateFromBluetooth+0x220>
 80098ee:	2314      	movs	r3, #20
 80098f0:	60fb      	str	r3, [r7, #12]
        DRV_translateLeft(l_speed);
 80098f2:	68f8      	ldr	r0, [r7, #12]
 80098f4:	f000 fe16 	bl	800a524 <DRV_translateLeft>
  return;
 80098f8:	e033      	b.n	8009962 <DRV_updateFromBluetooth+0x292>
      else if (p_bluetoothData->rightX > STP_JOYSTICKS_THRESHOLD)
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	689b      	ldr	r3, [r3, #8]
 80098fe:	2b0f      	cmp	r3, #15
 8009900:	dd0c      	ble.n	800991c <DRV_updateFromBluetooth+0x24c>
        l_speed = g_DRV_context.mode == DRV_MODE_MANUAL_FIXED_SPEED ? STP_JOYSTICKS_FIXED_SPEED : p_bluetoothData->rightX;
 8009902:	4b1a      	ldr	r3, [pc, #104]	; (800996c <DRV_updateFromBluetooth+0x29c>)
 8009904:	799b      	ldrb	r3, [r3, #6]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d002      	beq.n	8009910 <DRV_updateFromBluetooth+0x240>
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	689b      	ldr	r3, [r3, #8]
 800990e:	e000      	b.n	8009912 <DRV_updateFromBluetooth+0x242>
 8009910:	2314      	movs	r3, #20
 8009912:	60fb      	str	r3, [r7, #12]
        DRV_translateRight(l_speed);
 8009914:	68f8      	ldr	r0, [r7, #12]
 8009916:	f000 fe2f 	bl	800a578 <DRV_translateRight>
  return;
 800991a:	e022      	b.n	8009962 <DRV_updateFromBluetooth+0x292>
      else if (p_bluetoothData->button == BLU_BUTTON_L1)
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	7c1b      	ldrb	r3, [r3, #16]
 8009920:	2b0b      	cmp	r3, #11
 8009922:	d103      	bne.n	800992c <DRV_updateFromBluetooth+0x25c>
        DRV_moveForwardLeft(STP_BUTTONS_FIXED_SPEED);
 8009924:	2028      	movs	r0, #40	; 0x28
 8009926:	f000 fd2b 	bl	800a380 <DRV_moveForwardLeft>
  return;
 800992a:	e01a      	b.n	8009962 <DRV_updateFromBluetooth+0x292>
      else if (p_bluetoothData->button == BLU_BUTTON_L2)
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	7c1b      	ldrb	r3, [r3, #16]
 8009930:	2b09      	cmp	r3, #9
 8009932:	d103      	bne.n	800993c <DRV_updateFromBluetooth+0x26c>
        DRV_moveBackwardRight(STP_BUTTONS_FIXED_SPEED);
 8009934:	2028      	movs	r0, #40	; 0x28
 8009936:	f000 fd4d 	bl	800a3d4 <DRV_moveBackwardRight>
  return;
 800993a:	e012      	b.n	8009962 <DRV_updateFromBluetooth+0x292>
      else if (p_bluetoothData->button == BLU_BUTTON_R1)
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	7c1b      	ldrb	r3, [r3, #16]
 8009940:	2b0c      	cmp	r3, #12
 8009942:	d103      	bne.n	800994c <DRV_updateFromBluetooth+0x27c>
        DRV_moveForwardRight(STP_BUTTONS_FIXED_SPEED);
 8009944:	2028      	movs	r0, #40	; 0x28
 8009946:	f000 fcf1 	bl	800a32c <DRV_moveForwardRight>
  return;
 800994a:	e00a      	b.n	8009962 <DRV_updateFromBluetooth+0x292>
      else if (p_bluetoothData->button == BLU_BUTTON_R2)
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	7c1b      	ldrb	r3, [r3, #16]
 8009950:	2b0a      	cmp	r3, #10
 8009952:	d103      	bne.n	800995c <DRV_updateFromBluetooth+0x28c>
        DRV_moveBackwardLeft(STP_BUTTONS_FIXED_SPEED);
 8009954:	2028      	movs	r0, #40	; 0x28
 8009956:	f000 fd67 	bl	800a428 <DRV_moveBackwardLeft>
  return;
 800995a:	e002      	b.n	8009962 <DRV_updateFromBluetooth+0x292>
        DRV_stop();
 800995c:	f000 fc74 	bl	800a248 <DRV_stop>
  return;
 8009960:	bf00      	nop
 8009962:	bf00      	nop
}
 8009964:	3710      	adds	r7, #16
 8009966:	46bd      	mov	sp, r7
 8009968:	bd80      	pop	{r7, pc}
 800996a:	bf00      	nop
 800996c:	2000026c 	.word	0x2000026c
 8009970:	08010844 	.word	0x08010844
 8009974:	08010868 	.word	0x08010868
 8009978:	08010894 	.word	0x08010894
 800997c:	080108c4 	.word	0x080108c4

08009980 <DRV_updateFromCommands>:

void DRV_updateFromCommands(T_SFO_Handle *p_commandsFifo, bool p_logInfo)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b088      	sub	sp, #32
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
 8009988:	460b      	mov	r3, r1
 800998a:	70fb      	strb	r3, [r7, #3]
  T_SFO_data l_command;
  uint32_t   l_speed;
  float      l_value;

  /* Ignore master board data only whenever a manual mode is selected */
  if (g_DRV_context.mode != DRV_MODE_MASTER_BOARD_CONTROL)
 800998c:	4bb0      	ldr	r3, [pc, #704]	; (8009c50 <DRV_updateFromCommands+0x2d0>)
 800998e:	799b      	ldrb	r3, [r3, #6]
 8009990:	2b02      	cmp	r3, #2
 8009992:	f040 823a 	bne.w	8009e0a <DRV_updateFromCommands+0x48a>
  }
  else
  {
    /* Deal with only one command per cycle. If a FIFO overflow occurs, */
    /* FIFO string will report an error, showing us a design issue...   */
    if (SFO_getCount(p_commandsFifo) != 0)
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f001 fc7c 	bl	800b294 <SFO_getCount>
 800999c:	4603      	mov	r3, r0
 800999e:	2b00      	cmp	r3, #0
 80099a0:	f000 8220 	beq.w	8009de4 <DRV_updateFromCommands+0x464>
    {
      SFO_logInfo(p_commandsFifo);
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f001 fc81 	bl	800b2ac <SFO_logInfo>
      SFO_pop    (p_commandsFifo         , &l_command);
 80099aa:	f107 030c 	add.w	r3, r7, #12
 80099ae:	4619      	mov	r1, r3
 80099b0:	6878      	ldr	r0, [r7, #4]
 80099b2:	f001 fc2f 	bl	800b214 <SFO_pop>
      LOG_info   ("Drive got command: %s",  l_command);
 80099b6:	f107 030c 	add.w	r3, r7, #12
 80099ba:	461a      	mov	r2, r3
 80099bc:	49a5      	ldr	r1, [pc, #660]	; (8009c54 <DRV_updateFromCommands+0x2d4>)
 80099be:	2001      	movs	r0, #1
 80099c0:	f000 ff7c 	bl	800a8bc <LOG_log>

      /* Stop */
      if ((l_command[0] == 'S') && (l_command[1] == 'T'))
 80099c4:	7b3b      	ldrb	r3, [r7, #12]
 80099c6:	2b53      	cmp	r3, #83	; 0x53
 80099c8:	d115      	bne.n	80099f6 <DRV_updateFromCommands+0x76>
 80099ca:	7b7b      	ldrb	r3, [r7, #13]
 80099cc:	2b54      	cmp	r3, #84	; 0x54
 80099ce:	d112      	bne.n	80099f6 <DRV_updateFromCommands+0x76>
      {
        DRV_setDirectionsStop();
 80099d0:	f000 fb36 	bl	800a040 <DRV_setDirectionsStop>

        WHL_setPidTarget(&g_DRV_context.wheelFrontRight, 0);
 80099d4:	2100      	movs	r1, #0
 80099d6:	48a0      	ldr	r0, [pc, #640]	; (8009c58 <DRV_updateFromCommands+0x2d8>)
 80099d8:	f001 fe94 	bl	800b704 <WHL_setPidTarget>
        WHL_setPidTarget(&g_DRV_context.wheelFrontLeft , 0);
 80099dc:	2100      	movs	r1, #0
 80099de:	489f      	ldr	r0, [pc, #636]	; (8009c5c <DRV_updateFromCommands+0x2dc>)
 80099e0:	f001 fe90 	bl	800b704 <WHL_setPidTarget>
        WHL_setPidTarget(&g_DRV_context.wheelRearRight , 0);
 80099e4:	2100      	movs	r1, #0
 80099e6:	489e      	ldr	r0, [pc, #632]	; (8009c60 <DRV_updateFromCommands+0x2e0>)
 80099e8:	f001 fe8c 	bl	800b704 <WHL_setPidTarget>
        WHL_setPidTarget(&g_DRV_context.wheelRearLeft  , 0);
 80099ec:	2100      	movs	r1, #0
 80099ee:	489d      	ldr	r0, [pc, #628]	; (8009c64 <DRV_updateFromCommands+0x2e4>)
 80099f0:	f001 fe88 	bl	800b704 <WHL_setPidTarget>
 80099f4:	e1f6      	b.n	8009de4 <DRV_updateFromCommands+0x464>
      }
      /* Forward Straight */
      else if ((l_command[0] == 'F') && (l_command[1] == 'S'))
 80099f6:	7b3b      	ldrb	r3, [r7, #12]
 80099f8:	2b46      	cmp	r3, #70	; 0x46
 80099fa:	d122      	bne.n	8009a42 <DRV_updateFromCommands+0xc2>
 80099fc:	7b7b      	ldrb	r3, [r7, #13]
 80099fe:	2b53      	cmp	r3, #83	; 0x53
 8009a00:	d11f      	bne.n	8009a42 <DRV_updateFromCommands+0xc2>
      {
        DVR_getSpeedFromCommand(&l_command[2], &l_speed);
 8009a02:	f107 0208 	add.w	r2, r7, #8
 8009a06:	f107 030c 	add.w	r3, r7, #12
 8009a0a:	3302      	adds	r3, #2
 8009a0c:	4611      	mov	r1, r2
 8009a0e:	4618      	mov	r0, r3
 8009a10:	f000 faae 	bl	8009f70 <DVR_getSpeedFromCommand>

        DRV_setDirectionsForward();
 8009a14:	f000 fb30 	bl	800a078 <DRV_setDirectionsForward>

        WHL_setPidTarget(&g_DRV_context.wheelFrontRight, l_speed);
 8009a18:	68bb      	ldr	r3, [r7, #8]
 8009a1a:	4619      	mov	r1, r3
 8009a1c:	488e      	ldr	r0, [pc, #568]	; (8009c58 <DRV_updateFromCommands+0x2d8>)
 8009a1e:	f001 fe71 	bl	800b704 <WHL_setPidTarget>
        WHL_setPidTarget(&g_DRV_context.wheelFrontLeft , l_speed);
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	4619      	mov	r1, r3
 8009a26:	488d      	ldr	r0, [pc, #564]	; (8009c5c <DRV_updateFromCommands+0x2dc>)
 8009a28:	f001 fe6c 	bl	800b704 <WHL_setPidTarget>
        WHL_setPidTarget(&g_DRV_context.wheelRearRight , l_speed);
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	4619      	mov	r1, r3
 8009a30:	488b      	ldr	r0, [pc, #556]	; (8009c60 <DRV_updateFromCommands+0x2e0>)
 8009a32:	f001 fe67 	bl	800b704 <WHL_setPidTarget>
        WHL_setPidTarget(&g_DRV_context.wheelRearLeft  , l_speed);
 8009a36:	68bb      	ldr	r3, [r7, #8]
 8009a38:	4619      	mov	r1, r3
 8009a3a:	488a      	ldr	r0, [pc, #552]	; (8009c64 <DRV_updateFromCommands+0x2e4>)
 8009a3c:	f001 fe62 	bl	800b704 <WHL_setPidTarget>
 8009a40:	e1d0      	b.n	8009de4 <DRV_updateFromCommands+0x464>
      }
      /* Move Backward */
      else if ((l_command[0] == 'B') && (l_command[1] == 'S'))
 8009a42:	7b3b      	ldrb	r3, [r7, #12]
 8009a44:	2b42      	cmp	r3, #66	; 0x42
 8009a46:	d122      	bne.n	8009a8e <DRV_updateFromCommands+0x10e>
 8009a48:	7b7b      	ldrb	r3, [r7, #13]
 8009a4a:	2b53      	cmp	r3, #83	; 0x53
 8009a4c:	d11f      	bne.n	8009a8e <DRV_updateFromCommands+0x10e>
      {
        DVR_getSpeedFromCommand(&l_command[2], &l_speed);
 8009a4e:	f107 0208 	add.w	r2, r7, #8
 8009a52:	f107 030c 	add.w	r3, r7, #12
 8009a56:	3302      	adds	r3, #2
 8009a58:	4611      	mov	r1, r2
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	f000 fa88 	bl	8009f70 <DVR_getSpeedFromCommand>

        DRV_setDirectionsBackward();
 8009a60:	f000 fb26 	bl	800a0b0 <DRV_setDirectionsBackward>

        WHL_setPidTarget(&g_DRV_context.wheelFrontRight, l_speed);
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	4619      	mov	r1, r3
 8009a68:	487b      	ldr	r0, [pc, #492]	; (8009c58 <DRV_updateFromCommands+0x2d8>)
 8009a6a:	f001 fe4b 	bl	800b704 <WHL_setPidTarget>
        WHL_setPidTarget(&g_DRV_context.wheelFrontLeft , l_speed);
 8009a6e:	68bb      	ldr	r3, [r7, #8]
 8009a70:	4619      	mov	r1, r3
 8009a72:	487a      	ldr	r0, [pc, #488]	; (8009c5c <DRV_updateFromCommands+0x2dc>)
 8009a74:	f001 fe46 	bl	800b704 <WHL_setPidTarget>
        WHL_setPidTarget(&g_DRV_context.wheelRearRight , l_speed);
 8009a78:	68bb      	ldr	r3, [r7, #8]
 8009a7a:	4619      	mov	r1, r3
 8009a7c:	4878      	ldr	r0, [pc, #480]	; (8009c60 <DRV_updateFromCommands+0x2e0>)
 8009a7e:	f001 fe41 	bl	800b704 <WHL_setPidTarget>
        WHL_setPidTarget(&g_DRV_context.wheelRearLeft  , l_speed);
 8009a82:	68bb      	ldr	r3, [r7, #8]
 8009a84:	4619      	mov	r1, r3
 8009a86:	4877      	ldr	r0, [pc, #476]	; (8009c64 <DRV_updateFromCommands+0x2e4>)
 8009a88:	f001 fe3c 	bl	800b704 <WHL_setPidTarget>
 8009a8c:	e1aa      	b.n	8009de4 <DRV_updateFromCommands+0x464>
      }
      /* TuRn (i.e. Rotate) Left */
      else if ((l_command[0] == 'R') && (l_command[1] == 'L'))
 8009a8e:	7b3b      	ldrb	r3, [r7, #12]
 8009a90:	2b52      	cmp	r3, #82	; 0x52
 8009a92:	d122      	bne.n	8009ada <DRV_updateFromCommands+0x15a>
 8009a94:	7b7b      	ldrb	r3, [r7, #13]
 8009a96:	2b4c      	cmp	r3, #76	; 0x4c
 8009a98:	d11f      	bne.n	8009ada <DRV_updateFromCommands+0x15a>
      {
        DVR_getSpeedFromCommand(&l_command[2], &l_speed);
 8009a9a:	f107 0208 	add.w	r2, r7, #8
 8009a9e:	f107 030c 	add.w	r3, r7, #12
 8009aa2:	3302      	adds	r3, #2
 8009aa4:	4611      	mov	r1, r2
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	f000 fa62 	bl	8009f70 <DVR_getSpeedFromCommand>

        DRV_setDirectionsTurnLeft();
 8009aac:	f000 fb5c 	bl	800a168 <DRV_setDirectionsTurnLeft>

        WHL_setPidTarget(&g_DRV_context.wheelFrontRight, l_speed);
 8009ab0:	68bb      	ldr	r3, [r7, #8]
 8009ab2:	4619      	mov	r1, r3
 8009ab4:	4868      	ldr	r0, [pc, #416]	; (8009c58 <DRV_updateFromCommands+0x2d8>)
 8009ab6:	f001 fe25 	bl	800b704 <WHL_setPidTarget>
        WHL_setPidTarget(&g_DRV_context.wheelFrontLeft , l_speed);
 8009aba:	68bb      	ldr	r3, [r7, #8]
 8009abc:	4619      	mov	r1, r3
 8009abe:	4867      	ldr	r0, [pc, #412]	; (8009c5c <DRV_updateFromCommands+0x2dc>)
 8009ac0:	f001 fe20 	bl	800b704 <WHL_setPidTarget>
        WHL_setPidTarget(&g_DRV_context.wheelRearRight , l_speed);
 8009ac4:	68bb      	ldr	r3, [r7, #8]
 8009ac6:	4619      	mov	r1, r3
 8009ac8:	4865      	ldr	r0, [pc, #404]	; (8009c60 <DRV_updateFromCommands+0x2e0>)
 8009aca:	f001 fe1b 	bl	800b704 <WHL_setPidTarget>
        WHL_setPidTarget(&g_DRV_context.wheelRearLeft  , l_speed);
 8009ace:	68bb      	ldr	r3, [r7, #8]
 8009ad0:	4619      	mov	r1, r3
 8009ad2:	4864      	ldr	r0, [pc, #400]	; (8009c64 <DRV_updateFromCommands+0x2e4>)
 8009ad4:	f001 fe16 	bl	800b704 <WHL_setPidTarget>
 8009ad8:	e184      	b.n	8009de4 <DRV_updateFromCommands+0x464>
      }
      /* TuRn (i.e. Rotate) Right */
      else if ((l_command[0] == 'R') && (l_command[1] == 'R'))
 8009ada:	7b3b      	ldrb	r3, [r7, #12]
 8009adc:	2b52      	cmp	r3, #82	; 0x52
 8009ade:	d122      	bne.n	8009b26 <DRV_updateFromCommands+0x1a6>
 8009ae0:	7b7b      	ldrb	r3, [r7, #13]
 8009ae2:	2b52      	cmp	r3, #82	; 0x52
 8009ae4:	d11f      	bne.n	8009b26 <DRV_updateFromCommands+0x1a6>
      {
        DVR_getSpeedFromCommand(&l_command[2], &l_speed);
 8009ae6:	f107 0208 	add.w	r2, r7, #8
 8009aea:	f107 030c 	add.w	r3, r7, #12
 8009aee:	3302      	adds	r3, #2
 8009af0:	4611      	mov	r1, r2
 8009af2:	4618      	mov	r0, r3
 8009af4:	f000 fa3c 	bl	8009f70 <DVR_getSpeedFromCommand>

        DRV_setDirectionsTurnRight();
 8009af8:	f000 fb52 	bl	800a1a0 <DRV_setDirectionsTurnRight>

        WHL_setPidTarget(&g_DRV_context.wheelFrontRight, l_speed);
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	4619      	mov	r1, r3
 8009b00:	4855      	ldr	r0, [pc, #340]	; (8009c58 <DRV_updateFromCommands+0x2d8>)
 8009b02:	f001 fdff 	bl	800b704 <WHL_setPidTarget>
        WHL_setPidTarget(&g_DRV_context.wheelFrontLeft , l_speed);
 8009b06:	68bb      	ldr	r3, [r7, #8]
 8009b08:	4619      	mov	r1, r3
 8009b0a:	4854      	ldr	r0, [pc, #336]	; (8009c5c <DRV_updateFromCommands+0x2dc>)
 8009b0c:	f001 fdfa 	bl	800b704 <WHL_setPidTarget>
        WHL_setPidTarget(&g_DRV_context.wheelRearRight , l_speed);
 8009b10:	68bb      	ldr	r3, [r7, #8]
 8009b12:	4619      	mov	r1, r3
 8009b14:	4852      	ldr	r0, [pc, #328]	; (8009c60 <DRV_updateFromCommands+0x2e0>)
 8009b16:	f001 fdf5 	bl	800b704 <WHL_setPidTarget>
        WHL_setPidTarget(&g_DRV_context.wheelRearLeft  , l_speed);
 8009b1a:	68bb      	ldr	r3, [r7, #8]
 8009b1c:	4619      	mov	r1, r3
 8009b1e:	4851      	ldr	r0, [pc, #324]	; (8009c64 <DRV_updateFromCommands+0x2e4>)
 8009b20:	f001 fdf0 	bl	800b704 <WHL_setPidTarget>
 8009b24:	e15e      	b.n	8009de4 <DRV_updateFromCommands+0x464>
      }
      /* Translate Left */
      else if ((l_command[0] == 'T') && (l_command[1] == 'L'))
 8009b26:	7b3b      	ldrb	r3, [r7, #12]
 8009b28:	2b54      	cmp	r3, #84	; 0x54
 8009b2a:	d122      	bne.n	8009b72 <DRV_updateFromCommands+0x1f2>
 8009b2c:	7b7b      	ldrb	r3, [r7, #13]
 8009b2e:	2b4c      	cmp	r3, #76	; 0x4c
 8009b30:	d11f      	bne.n	8009b72 <DRV_updateFromCommands+0x1f2>
      {
        DVR_getSpeedFromCommand(&l_command[2], &l_speed);
 8009b32:	f107 0208 	add.w	r2, r7, #8
 8009b36:	f107 030c 	add.w	r3, r7, #12
 8009b3a:	3302      	adds	r3, #2
 8009b3c:	4611      	mov	r1, r2
 8009b3e:	4618      	mov	r0, r3
 8009b40:	f000 fa16 	bl	8009f70 <DVR_getSpeedFromCommand>

        DRV_setDirectionsTranslateLeft();
 8009b44:	f000 fb48 	bl	800a1d8 <DRV_setDirectionsTranslateLeft>

        WHL_setPidTarget(&g_DRV_context.wheelFrontRight, l_speed);
 8009b48:	68bb      	ldr	r3, [r7, #8]
 8009b4a:	4619      	mov	r1, r3
 8009b4c:	4842      	ldr	r0, [pc, #264]	; (8009c58 <DRV_updateFromCommands+0x2d8>)
 8009b4e:	f001 fdd9 	bl	800b704 <WHL_setPidTarget>
        WHL_setPidTarget(&g_DRV_context.wheelFrontLeft , l_speed);
 8009b52:	68bb      	ldr	r3, [r7, #8]
 8009b54:	4619      	mov	r1, r3
 8009b56:	4841      	ldr	r0, [pc, #260]	; (8009c5c <DRV_updateFromCommands+0x2dc>)
 8009b58:	f001 fdd4 	bl	800b704 <WHL_setPidTarget>
        WHL_setPidTarget(&g_DRV_context.wheelRearRight , l_speed);
 8009b5c:	68bb      	ldr	r3, [r7, #8]
 8009b5e:	4619      	mov	r1, r3
 8009b60:	483f      	ldr	r0, [pc, #252]	; (8009c60 <DRV_updateFromCommands+0x2e0>)
 8009b62:	f001 fdcf 	bl	800b704 <WHL_setPidTarget>
        WHL_setPidTarget(&g_DRV_context.wheelRearLeft  , l_speed);
 8009b66:	68bb      	ldr	r3, [r7, #8]
 8009b68:	4619      	mov	r1, r3
 8009b6a:	483e      	ldr	r0, [pc, #248]	; (8009c64 <DRV_updateFromCommands+0x2e4>)
 8009b6c:	f001 fdca 	bl	800b704 <WHL_setPidTarget>
 8009b70:	e138      	b.n	8009de4 <DRV_updateFromCommands+0x464>
      }
      /* Translate Right */
      else if ((l_command[0] == 'T') && (l_command[1] == 'R'))
 8009b72:	7b3b      	ldrb	r3, [r7, #12]
 8009b74:	2b54      	cmp	r3, #84	; 0x54
 8009b76:	d122      	bne.n	8009bbe <DRV_updateFromCommands+0x23e>
 8009b78:	7b7b      	ldrb	r3, [r7, #13]
 8009b7a:	2b52      	cmp	r3, #82	; 0x52
 8009b7c:	d11f      	bne.n	8009bbe <DRV_updateFromCommands+0x23e>
      {
        DVR_getSpeedFromCommand(&l_command[2], &l_speed);
 8009b7e:	f107 0208 	add.w	r2, r7, #8
 8009b82:	f107 030c 	add.w	r3, r7, #12
 8009b86:	3302      	adds	r3, #2
 8009b88:	4611      	mov	r1, r2
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	f000 f9f0 	bl	8009f70 <DVR_getSpeedFromCommand>

        DRV_setDirectionsTranslateRight();
 8009b90:	f000 fb3e 	bl	800a210 <DRV_setDirectionsTranslateRight>

        WHL_setPidTarget(&g_DRV_context.wheelFrontRight, l_speed);
 8009b94:	68bb      	ldr	r3, [r7, #8]
 8009b96:	4619      	mov	r1, r3
 8009b98:	482f      	ldr	r0, [pc, #188]	; (8009c58 <DRV_updateFromCommands+0x2d8>)
 8009b9a:	f001 fdb3 	bl	800b704 <WHL_setPidTarget>
        WHL_setPidTarget(&g_DRV_context.wheelFrontLeft , l_speed);
 8009b9e:	68bb      	ldr	r3, [r7, #8]
 8009ba0:	4619      	mov	r1, r3
 8009ba2:	482e      	ldr	r0, [pc, #184]	; (8009c5c <DRV_updateFromCommands+0x2dc>)
 8009ba4:	f001 fdae 	bl	800b704 <WHL_setPidTarget>
        WHL_setPidTarget(&g_DRV_context.wheelRearRight , l_speed);
 8009ba8:	68bb      	ldr	r3, [r7, #8]
 8009baa:	4619      	mov	r1, r3
 8009bac:	482c      	ldr	r0, [pc, #176]	; (8009c60 <DRV_updateFromCommands+0x2e0>)
 8009bae:	f001 fda9 	bl	800b704 <WHL_setPidTarget>
        WHL_setPidTarget(&g_DRV_context.wheelRearLeft  , l_speed);
 8009bb2:	68bb      	ldr	r3, [r7, #8]
 8009bb4:	4619      	mov	r1, r3
 8009bb6:	482b      	ldr	r0, [pc, #172]	; (8009c64 <DRV_updateFromCommands+0x2e4>)
 8009bb8:	f001 fda4 	bl	800b704 <WHL_setPidTarget>
 8009bbc:	e112      	b.n	8009de4 <DRV_updateFromCommands+0x464>
      }
      /* Forward Left */
      else if ((l_command[0] == 'F') && (l_command[1] == 'L'))
 8009bbe:	7b3b      	ldrb	r3, [r7, #12]
 8009bc0:	2b46      	cmp	r3, #70	; 0x46
 8009bc2:	d120      	bne.n	8009c06 <DRV_updateFromCommands+0x286>
 8009bc4:	7b7b      	ldrb	r3, [r7, #13]
 8009bc6:	2b4c      	cmp	r3, #76	; 0x4c
 8009bc8:	d11d      	bne.n	8009c06 <DRV_updateFromCommands+0x286>
      {
        DVR_getSpeedFromCommand(&l_command[2], &l_speed);
 8009bca:	f107 0208 	add.w	r2, r7, #8
 8009bce:	f107 030c 	add.w	r3, r7, #12
 8009bd2:	3302      	adds	r3, #2
 8009bd4:	4611      	mov	r1, r2
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	f000 f9ca 	bl	8009f70 <DVR_getSpeedFromCommand>

        DRV_setDirectionsForwardLeft();
 8009bdc:	f000 fa94 	bl	800a108 <DRV_setDirectionsForwardLeft>

        WHL_setPidTarget(&g_DRV_context.wheelFrontRight, l_speed);
 8009be0:	68bb      	ldr	r3, [r7, #8]
 8009be2:	4619      	mov	r1, r3
 8009be4:	481c      	ldr	r0, [pc, #112]	; (8009c58 <DRV_updateFromCommands+0x2d8>)
 8009be6:	f001 fd8d 	bl	800b704 <WHL_setPidTarget>
        WHL_setPidTarget(&g_DRV_context.wheelFrontLeft ,       0);
 8009bea:	2100      	movs	r1, #0
 8009bec:	481b      	ldr	r0, [pc, #108]	; (8009c5c <DRV_updateFromCommands+0x2dc>)
 8009bee:	f001 fd89 	bl	800b704 <WHL_setPidTarget>
        WHL_setPidTarget(&g_DRV_context.wheelRearRight ,       0);
 8009bf2:	2100      	movs	r1, #0
 8009bf4:	481a      	ldr	r0, [pc, #104]	; (8009c60 <DRV_updateFromCommands+0x2e0>)
 8009bf6:	f001 fd85 	bl	800b704 <WHL_setPidTarget>
        WHL_setPidTarget(&g_DRV_context.wheelRearLeft  , l_speed);
 8009bfa:	68bb      	ldr	r3, [r7, #8]
 8009bfc:	4619      	mov	r1, r3
 8009bfe:	4819      	ldr	r0, [pc, #100]	; (8009c64 <DRV_updateFromCommands+0x2e4>)
 8009c00:	f001 fd80 	bl	800b704 <WHL_setPidTarget>
 8009c04:	e0ee      	b.n	8009de4 <DRV_updateFromCommands+0x464>
      }
      /* Forward Right */
      else if ((l_command[0] == 'F') && (l_command[1] == 'R'))
 8009c06:	7b3b      	ldrb	r3, [r7, #12]
 8009c08:	2b46      	cmp	r3, #70	; 0x46
 8009c0a:	d12d      	bne.n	8009c68 <DRV_updateFromCommands+0x2e8>
 8009c0c:	7b7b      	ldrb	r3, [r7, #13]
 8009c0e:	2b52      	cmp	r3, #82	; 0x52
 8009c10:	d12a      	bne.n	8009c68 <DRV_updateFromCommands+0x2e8>
      {
        DVR_getSpeedFromCommand(&l_command[2], &l_speed);
 8009c12:	f107 0208 	add.w	r2, r7, #8
 8009c16:	f107 030c 	add.w	r3, r7, #12
 8009c1a:	3302      	adds	r3, #2
 8009c1c:	4611      	mov	r1, r2
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f000 f9a6 	bl	8009f70 <DVR_getSpeedFromCommand>

        DRV_setDirectionsForwardRight();
 8009c24:	f000 fa60 	bl	800a0e8 <DRV_setDirectionsForwardRight>

        WHL_setPidTarget(&g_DRV_context.wheelFrontRight,       0);
 8009c28:	2100      	movs	r1, #0
 8009c2a:	480b      	ldr	r0, [pc, #44]	; (8009c58 <DRV_updateFromCommands+0x2d8>)
 8009c2c:	f001 fd6a 	bl	800b704 <WHL_setPidTarget>
        WHL_setPidTarget(&g_DRV_context.wheelFrontLeft , l_speed);
 8009c30:	68bb      	ldr	r3, [r7, #8]
 8009c32:	4619      	mov	r1, r3
 8009c34:	4809      	ldr	r0, [pc, #36]	; (8009c5c <DRV_updateFromCommands+0x2dc>)
 8009c36:	f001 fd65 	bl	800b704 <WHL_setPidTarget>
        WHL_setPidTarget(&g_DRV_context.wheelRearRight , l_speed);
 8009c3a:	68bb      	ldr	r3, [r7, #8]
 8009c3c:	4619      	mov	r1, r3
 8009c3e:	4808      	ldr	r0, [pc, #32]	; (8009c60 <DRV_updateFromCommands+0x2e0>)
 8009c40:	f001 fd60 	bl	800b704 <WHL_setPidTarget>
        WHL_setPidTarget(&g_DRV_context.wheelRearLeft  ,       0);
 8009c44:	2100      	movs	r1, #0
 8009c46:	4807      	ldr	r0, [pc, #28]	; (8009c64 <DRV_updateFromCommands+0x2e4>)
 8009c48:	f001 fd5c 	bl	800b704 <WHL_setPidTarget>
 8009c4c:	e0ca      	b.n	8009de4 <DRV_updateFromCommands+0x464>
 8009c4e:	bf00      	nop
 8009c50:	2000026c 	.word	0x2000026c
 8009c54:	080108f4 	.word	0x080108f4
 8009c58:	20000274 	.word	0x20000274
 8009c5c:	20000320 	.word	0x20000320
 8009c60:	20000478 	.word	0x20000478
 8009c64:	200003cc 	.word	0x200003cc
      }
      /* Backward Left */
      else if ((l_command[0] == 'B') && (l_command[1] == 'L'))
 8009c68:	7b3b      	ldrb	r3, [r7, #12]
 8009c6a:	2b42      	cmp	r3, #66	; 0x42
 8009c6c:	d120      	bne.n	8009cb0 <DRV_updateFromCommands+0x330>
 8009c6e:	7b7b      	ldrb	r3, [r7, #13]
 8009c70:	2b4c      	cmp	r3, #76	; 0x4c
 8009c72:	d11d      	bne.n	8009cb0 <DRV_updateFromCommands+0x330>
      {
        DVR_getSpeedFromCommand(&l_command[2], &l_speed);
 8009c74:	f107 0208 	add.w	r2, r7, #8
 8009c78:	f107 030c 	add.w	r3, r7, #12
 8009c7c:	3302      	adds	r3, #2
 8009c7e:	4611      	mov	r1, r2
 8009c80:	4618      	mov	r0, r3
 8009c82:	f000 f975 	bl	8009f70 <DVR_getSpeedFromCommand>

        DRV_setDirectionsBackwardLeft();
 8009c86:	f000 fa5f 	bl	800a148 <DRV_setDirectionsBackwardLeft>

        WHL_setPidTarget(&g_DRV_context.wheelFrontRight,       0);
 8009c8a:	2100      	movs	r1, #0
 8009c8c:	4861      	ldr	r0, [pc, #388]	; (8009e14 <DRV_updateFromCommands+0x494>)
 8009c8e:	f001 fd39 	bl	800b704 <WHL_setPidTarget>
        WHL_setPidTarget(&g_DRV_context.wheelFrontLeft , l_speed);
 8009c92:	68bb      	ldr	r3, [r7, #8]
 8009c94:	4619      	mov	r1, r3
 8009c96:	4860      	ldr	r0, [pc, #384]	; (8009e18 <DRV_updateFromCommands+0x498>)
 8009c98:	f001 fd34 	bl	800b704 <WHL_setPidTarget>
        WHL_setPidTarget(&g_DRV_context.wheelRearRight , l_speed);
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	4619      	mov	r1, r3
 8009ca0:	485e      	ldr	r0, [pc, #376]	; (8009e1c <DRV_updateFromCommands+0x49c>)
 8009ca2:	f001 fd2f 	bl	800b704 <WHL_setPidTarget>
        WHL_setPidTarget(&g_DRV_context.wheelRearLeft  ,       0);
 8009ca6:	2100      	movs	r1, #0
 8009ca8:	485d      	ldr	r0, [pc, #372]	; (8009e20 <DRV_updateFromCommands+0x4a0>)
 8009caa:	f001 fd2b 	bl	800b704 <WHL_setPidTarget>
 8009cae:	e099      	b.n	8009de4 <DRV_updateFromCommands+0x464>
      }
      /* Forward Right */
      else if ((l_command[0] == 'B') && (l_command[1] == 'R'))
 8009cb0:	7b3b      	ldrb	r3, [r7, #12]
 8009cb2:	2b42      	cmp	r3, #66	; 0x42
 8009cb4:	d120      	bne.n	8009cf8 <DRV_updateFromCommands+0x378>
 8009cb6:	7b7b      	ldrb	r3, [r7, #13]
 8009cb8:	2b52      	cmp	r3, #82	; 0x52
 8009cba:	d11d      	bne.n	8009cf8 <DRV_updateFromCommands+0x378>
      {
        DVR_getSpeedFromCommand(&l_command[2], &l_speed);
 8009cbc:	f107 0208 	add.w	r2, r7, #8
 8009cc0:	f107 030c 	add.w	r3, r7, #12
 8009cc4:	3302      	adds	r3, #2
 8009cc6:	4611      	mov	r1, r2
 8009cc8:	4618      	mov	r0, r3
 8009cca:	f000 f951 	bl	8009f70 <DVR_getSpeedFromCommand>

        DRV_setDirectionsBackwardRight();
 8009cce:	f000 fa2b 	bl	800a128 <DRV_setDirectionsBackwardRight>

        WHL_setPidTarget(&g_DRV_context.wheelFrontRight, l_speed);
 8009cd2:	68bb      	ldr	r3, [r7, #8]
 8009cd4:	4619      	mov	r1, r3
 8009cd6:	484f      	ldr	r0, [pc, #316]	; (8009e14 <DRV_updateFromCommands+0x494>)
 8009cd8:	f001 fd14 	bl	800b704 <WHL_setPidTarget>
        WHL_setPidTarget(&g_DRV_context.wheelFrontLeft ,       0);
 8009cdc:	2100      	movs	r1, #0
 8009cde:	484e      	ldr	r0, [pc, #312]	; (8009e18 <DRV_updateFromCommands+0x498>)
 8009ce0:	f001 fd10 	bl	800b704 <WHL_setPidTarget>
        WHL_setPidTarget(&g_DRV_context.wheelRearRight ,       0);
 8009ce4:	2100      	movs	r1, #0
 8009ce6:	484d      	ldr	r0, [pc, #308]	; (8009e1c <DRV_updateFromCommands+0x49c>)
 8009ce8:	f001 fd0c 	bl	800b704 <WHL_setPidTarget>
        WHL_setPidTarget(&g_DRV_context.wheelRearLeft  , l_speed);
 8009cec:	68bb      	ldr	r3, [r7, #8]
 8009cee:	4619      	mov	r1, r3
 8009cf0:	484b      	ldr	r0, [pc, #300]	; (8009e20 <DRV_updateFromCommands+0x4a0>)
 8009cf2:	f001 fd07 	bl	800b704 <WHL_setPidTarget>
 8009cf6:	e075      	b.n	8009de4 <DRV_updateFromCommands+0x464>
      }
      else if ((l_command[0] == 'K') && (l_command[1] == 'P'))
 8009cf8:	7b3b      	ldrb	r3, [r7, #12]
 8009cfa:	2b4b      	cmp	r3, #75	; 0x4b
 8009cfc:	d121      	bne.n	8009d42 <DRV_updateFromCommands+0x3c2>
 8009cfe:	7b7b      	ldrb	r3, [r7, #13]
 8009d00:	2b50      	cmp	r3, #80	; 0x50
 8009d02:	d11e      	bne.n	8009d42 <DRV_updateFromCommands+0x3c2>
      {
        l_value = atof(&l_command[2]);
 8009d04:	f107 030c 	add.w	r3, r7, #12
 8009d08:	3302      	adds	r3, #2
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	f001 fdae 	bl	800b86c <atof>
 8009d10:	4602      	mov	r2, r0
 8009d12:	460b      	mov	r3, r1
 8009d14:	4610      	mov	r0, r2
 8009d16:	4619      	mov	r1, r3
 8009d18:	f7f6 ff42 	bl	8000ba0 <__aeabi_d2f>
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	61fb      	str	r3, [r7, #28]

        WHL_setPidKp(&g_DRV_context.wheelFrontRight, l_value);
 8009d20:	69f9      	ldr	r1, [r7, #28]
 8009d22:	483c      	ldr	r0, [pc, #240]	; (8009e14 <DRV_updateFromCommands+0x494>)
 8009d24:	f001 fcc1 	bl	800b6aa <WHL_setPidKp>
        WHL_setPidKp(&g_DRV_context.wheelFrontLeft , l_value);
 8009d28:	69f9      	ldr	r1, [r7, #28]
 8009d2a:	483b      	ldr	r0, [pc, #236]	; (8009e18 <DRV_updateFromCommands+0x498>)
 8009d2c:	f001 fcbd 	bl	800b6aa <WHL_setPidKp>
        WHL_setPidKp(&g_DRV_context.wheelRearRight , l_value);
 8009d30:	69f9      	ldr	r1, [r7, #28]
 8009d32:	483a      	ldr	r0, [pc, #232]	; (8009e1c <DRV_updateFromCommands+0x49c>)
 8009d34:	f001 fcb9 	bl	800b6aa <WHL_setPidKp>
        WHL_setPidKp(&g_DRV_context.wheelRearLeft  , l_value);
 8009d38:	69f9      	ldr	r1, [r7, #28]
 8009d3a:	4839      	ldr	r0, [pc, #228]	; (8009e20 <DRV_updateFromCommands+0x4a0>)
 8009d3c:	f001 fcb5 	bl	800b6aa <WHL_setPidKp>
 8009d40:	e050      	b.n	8009de4 <DRV_updateFromCommands+0x464>
      }
      else if ((l_command[0] == 'K') && (l_command[1] == 'I'))
 8009d42:	7b3b      	ldrb	r3, [r7, #12]
 8009d44:	2b4b      	cmp	r3, #75	; 0x4b
 8009d46:	d121      	bne.n	8009d8c <DRV_updateFromCommands+0x40c>
 8009d48:	7b7b      	ldrb	r3, [r7, #13]
 8009d4a:	2b49      	cmp	r3, #73	; 0x49
 8009d4c:	d11e      	bne.n	8009d8c <DRV_updateFromCommands+0x40c>
      {
        l_value = atof(&l_command[2]);
 8009d4e:	f107 030c 	add.w	r3, r7, #12
 8009d52:	3302      	adds	r3, #2
 8009d54:	4618      	mov	r0, r3
 8009d56:	f001 fd89 	bl	800b86c <atof>
 8009d5a:	4602      	mov	r2, r0
 8009d5c:	460b      	mov	r3, r1
 8009d5e:	4610      	mov	r0, r2
 8009d60:	4619      	mov	r1, r3
 8009d62:	f7f6 ff1d 	bl	8000ba0 <__aeabi_d2f>
 8009d66:	4603      	mov	r3, r0
 8009d68:	61fb      	str	r3, [r7, #28]

        WHL_setPidKi(&g_DRV_context.wheelFrontRight, l_value);
 8009d6a:	69f9      	ldr	r1, [r7, #28]
 8009d6c:	4829      	ldr	r0, [pc, #164]	; (8009e14 <DRV_updateFromCommands+0x494>)
 8009d6e:	f001 fcab 	bl	800b6c8 <WHL_setPidKi>
        WHL_setPidKi(&g_DRV_context.wheelFrontLeft , l_value);
 8009d72:	69f9      	ldr	r1, [r7, #28]
 8009d74:	4828      	ldr	r0, [pc, #160]	; (8009e18 <DRV_updateFromCommands+0x498>)
 8009d76:	f001 fca7 	bl	800b6c8 <WHL_setPidKi>
        WHL_setPidKi(&g_DRV_context.wheelRearRight , l_value);
 8009d7a:	69f9      	ldr	r1, [r7, #28]
 8009d7c:	4827      	ldr	r0, [pc, #156]	; (8009e1c <DRV_updateFromCommands+0x49c>)
 8009d7e:	f001 fca3 	bl	800b6c8 <WHL_setPidKi>
        WHL_setPidKi(&g_DRV_context.wheelRearLeft  , l_value);
 8009d82:	69f9      	ldr	r1, [r7, #28]
 8009d84:	4826      	ldr	r0, [pc, #152]	; (8009e20 <DRV_updateFromCommands+0x4a0>)
 8009d86:	f001 fc9f 	bl	800b6c8 <WHL_setPidKi>
 8009d8a:	e02b      	b.n	8009de4 <DRV_updateFromCommands+0x464>
      }
      else if ((l_command[0] == 'K') && (l_command[1] == 'D'))
 8009d8c:	7b3b      	ldrb	r3, [r7, #12]
 8009d8e:	2b4b      	cmp	r3, #75	; 0x4b
 8009d90:	d121      	bne.n	8009dd6 <DRV_updateFromCommands+0x456>
 8009d92:	7b7b      	ldrb	r3, [r7, #13]
 8009d94:	2b44      	cmp	r3, #68	; 0x44
 8009d96:	d11e      	bne.n	8009dd6 <DRV_updateFromCommands+0x456>
      {
        l_value = atof(&l_command[2]);
 8009d98:	f107 030c 	add.w	r3, r7, #12
 8009d9c:	3302      	adds	r3, #2
 8009d9e:	4618      	mov	r0, r3
 8009da0:	f001 fd64 	bl	800b86c <atof>
 8009da4:	4602      	mov	r2, r0
 8009da6:	460b      	mov	r3, r1
 8009da8:	4610      	mov	r0, r2
 8009daa:	4619      	mov	r1, r3
 8009dac:	f7f6 fef8 	bl	8000ba0 <__aeabi_d2f>
 8009db0:	4603      	mov	r3, r0
 8009db2:	61fb      	str	r3, [r7, #28]

        WHL_setPidKd(&g_DRV_context.wheelFrontRight, l_value);
 8009db4:	69f9      	ldr	r1, [r7, #28]
 8009db6:	4817      	ldr	r0, [pc, #92]	; (8009e14 <DRV_updateFromCommands+0x494>)
 8009db8:	f001 fc95 	bl	800b6e6 <WHL_setPidKd>
        WHL_setPidKd(&g_DRV_context.wheelFrontLeft , l_value);
 8009dbc:	69f9      	ldr	r1, [r7, #28]
 8009dbe:	4816      	ldr	r0, [pc, #88]	; (8009e18 <DRV_updateFromCommands+0x498>)
 8009dc0:	f001 fc91 	bl	800b6e6 <WHL_setPidKd>
        WHL_setPidKd(&g_DRV_context.wheelRearRight , l_value);
 8009dc4:	69f9      	ldr	r1, [r7, #28]
 8009dc6:	4815      	ldr	r0, [pc, #84]	; (8009e1c <DRV_updateFromCommands+0x49c>)
 8009dc8:	f001 fc8d 	bl	800b6e6 <WHL_setPidKd>
        WHL_setPidKd(&g_DRV_context.wheelRearLeft  , l_value);
 8009dcc:	69f9      	ldr	r1, [r7, #28]
 8009dce:	4814      	ldr	r0, [pc, #80]	; (8009e20 <DRV_updateFromCommands+0x4a0>)
 8009dd0:	f001 fc89 	bl	800b6e6 <WHL_setPidKd>
 8009dd4:	e006      	b.n	8009de4 <DRV_updateFromCommands+0x464>
      }
      else
      {
        LOG_error("Drive got unsupported command: '%s'", l_command);
 8009dd6:	f107 030c 	add.w	r3, r7, #12
 8009dda:	461a      	mov	r2, r3
 8009ddc:	4911      	ldr	r1, [pc, #68]	; (8009e24 <DRV_updateFromCommands+0x4a4>)
 8009dde:	2003      	movs	r0, #3
 8009de0:	f000 fd6c 	bl	800a8bc <LOG_log>
      }
    }

    if (p_logInfo == true)
 8009de4:	78fb      	ldrb	r3, [r7, #3]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d002      	beq.n	8009df0 <DRV_updateFromCommands+0x470>
    {
      DRV_logInfo(true);
 8009dea:	2001      	movs	r0, #1
 8009dec:	f000 f866 	bl	8009ebc <DRV_logInfo>
    {
      ; /* Nothing to do */
    }

    /* Update all 4 wheels PIDs, adjusting speeds, to reach targets */
    WHL_updatePidSpeed(&g_DRV_context.wheelFrontRight);
 8009df0:	4808      	ldr	r0, [pc, #32]	; (8009e14 <DRV_updateFromCommands+0x494>)
 8009df2:	f001 fc9b 	bl	800b72c <WHL_updatePidSpeed>
    WHL_updatePidSpeed(&g_DRV_context.wheelFrontLeft );
 8009df6:	4808      	ldr	r0, [pc, #32]	; (8009e18 <DRV_updateFromCommands+0x498>)
 8009df8:	f001 fc98 	bl	800b72c <WHL_updatePidSpeed>
    WHL_updatePidSpeed(&g_DRV_context.wheelRearRight );
 8009dfc:	4807      	ldr	r0, [pc, #28]	; (8009e1c <DRV_updateFromCommands+0x49c>)
 8009dfe:	f001 fc95 	bl	800b72c <WHL_updatePidSpeed>
    WHL_updatePidSpeed(&g_DRV_context.wheelRearLeft  );
 8009e02:	4807      	ldr	r0, [pc, #28]	; (8009e20 <DRV_updateFromCommands+0x4a0>)
 8009e04:	f001 fc92 	bl	800b72c <WHL_updatePidSpeed>
  }

  return;
 8009e08:	bf00      	nop
 8009e0a:	bf00      	nop
}
 8009e0c:	3720      	adds	r7, #32
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}
 8009e12:	bf00      	nop
 8009e14:	20000274 	.word	0x20000274
 8009e18:	20000320 	.word	0x20000320
 8009e1c:	20000478 	.word	0x20000478
 8009e20:	200003cc 	.word	0x200003cc
 8009e24:	0801090c 	.word	0x0801090c

08009e28 <DRV_reportVelocity>:

void DRV_reportVelocity(void)
{
 8009e28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e2a:	b08f      	sub	sp, #60	; 0x3c
 8009e2c:	af04      	add	r7, sp, #16
  float l_averageSpeedFrontLeft;
  float l_averageSpeedRearRight;
  float l_averageSpeedRearLeft;
  char  l_buffer[CST_MASTER_VELOCITY_STRING_LENGTH];

  l_averageSpeedFrontRight = WHL_getAverageSpeed(&g_DRV_context.wheelFrontRight);
 8009e2e:	4819      	ldr	r0, [pc, #100]	; (8009e94 <DRV_reportVelocity+0x6c>)
 8009e30:	f001 fcd4 	bl	800b7dc <WHL_getAverageSpeed>
 8009e34:	6278      	str	r0, [r7, #36]	; 0x24
  l_averageSpeedFrontLeft  = WHL_getAverageSpeed(&g_DRV_context.wheelFrontLeft );
 8009e36:	4818      	ldr	r0, [pc, #96]	; (8009e98 <DRV_reportVelocity+0x70>)
 8009e38:	f001 fcd0 	bl	800b7dc <WHL_getAverageSpeed>
 8009e3c:	6238      	str	r0, [r7, #32]
  l_averageSpeedRearRight  = WHL_getAverageSpeed(&g_DRV_context.wheelRearRight );
 8009e3e:	4817      	ldr	r0, [pc, #92]	; (8009e9c <DRV_reportVelocity+0x74>)
 8009e40:	f001 fccc 	bl	800b7dc <WHL_getAverageSpeed>
 8009e44:	61f8      	str	r0, [r7, #28]
  l_averageSpeedRearLeft   = WHL_getAverageSpeed(&g_DRV_context.wheelRearLeft  );
 8009e46:	4816      	ldr	r0, [pc, #88]	; (8009ea0 <DRV_reportVelocity+0x78>)
 8009e48:	f001 fcc8 	bl	800b7dc <WHL_getAverageSpeed>
 8009e4c:	61b8      	str	r0, [r7, #24]

  (void)snprintf(l_buffer,
 8009e4e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009e50:	f7f7 f954 	bl	80010fc <__aeabi_f2iz>
 8009e54:	4606      	mov	r6, r0
 8009e56:	6a38      	ldr	r0, [r7, #32]
 8009e58:	f7f7 f950 	bl	80010fc <__aeabi_f2iz>
 8009e5c:	4604      	mov	r4, r0
 8009e5e:	69f8      	ldr	r0, [r7, #28]
 8009e60:	f7f7 f94c 	bl	80010fc <__aeabi_f2iz>
 8009e64:	4605      	mov	r5, r0
 8009e66:	69b8      	ldr	r0, [r7, #24]
 8009e68:	f7f7 f948 	bl	80010fc <__aeabi_f2iz>
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	4638      	mov	r0, r7
 8009e70:	9302      	str	r3, [sp, #8]
 8009e72:	9501      	str	r5, [sp, #4]
 8009e74:	9400      	str	r4, [sp, #0]
 8009e76:	4633      	mov	r3, r6
 8009e78:	4a0a      	ldr	r2, [pc, #40]	; (8009ea4 <DRV_reportVelocity+0x7c>)
 8009e7a:	2115      	movs	r1, #21
 8009e7c:	f002 fa6e 	bl	800c35c <sniprintf>
            (int)l_averageSpeedFrontRight,
            (int)l_averageSpeedFrontLeft ,
            (int)l_averageSpeedRearRight ,
            (int)l_averageSpeedRearLeft  );

  MAS_sendString(l_buffer, CST_MASTER_VELOCITY_STRING_LENGTH);
 8009e80:	463b      	mov	r3, r7
 8009e82:	2115      	movs	r1, #21
 8009e84:	4618      	mov	r0, r3
 8009e86:	f000 fe19 	bl	800aabc <MAS_sendString>

  return;
 8009e8a:	bf00      	nop
}
 8009e8c:	372c      	adds	r7, #44	; 0x2c
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e92:	bf00      	nop
 8009e94:	20000274 	.word	0x20000274
 8009e98:	20000320 	.word	0x20000320
 8009e9c:	20000478 	.word	0x20000478
 8009ea0:	200003cc 	.word	0x200003cc
 8009ea4:	08010930 	.word	0x08010930

08009ea8 <DRV_getMode>:

T_DRV_MODE DRV_getMode(void)
{
 8009ea8:	b480      	push	{r7}
 8009eaa:	af00      	add	r7, sp, #0
  return g_DRV_context.mode;
 8009eac:	4b02      	ldr	r3, [pc, #8]	; (8009eb8 <DRV_getMode+0x10>)
 8009eae:	799b      	ldrb	r3, [r3, #6]
}
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	bc80      	pop	{r7}
 8009eb6:	4770      	bx	lr
 8009eb8:	2000026c 	.word	0x2000026c

08009ebc <DRV_logInfo>:

void DRV_logInfo(bool p_compactLog)
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b082      	sub	sp, #8
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	71fb      	strb	r3, [r7, #7]
  if (g_DRV_context.mode == DRV_MODE_MANUAL_FIXED_SPEED)
 8009ec6:	4b1f      	ldr	r3, [pc, #124]	; (8009f44 <DRV_logInfo+0x88>)
 8009ec8:	799b      	ldrb	r3, [r3, #6]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d104      	bne.n	8009ed8 <DRV_logInfo+0x1c>
  {
    LOG_info("Drive mode  : MANUAL FIXED SPEED");
 8009ece:	491e      	ldr	r1, [pc, #120]	; (8009f48 <DRV_logInfo+0x8c>)
 8009ed0:	2001      	movs	r0, #1
 8009ed2:	f000 fcf3 	bl	800a8bc <LOG_log>
 8009ed6:	e018      	b.n	8009f0a <DRV_logInfo+0x4e>
  }
  else if (g_DRV_context.mode == DRV_MODE_MANUAL_VARIABLE_SPEED)
 8009ed8:	4b1a      	ldr	r3, [pc, #104]	; (8009f44 <DRV_logInfo+0x88>)
 8009eda:	799b      	ldrb	r3, [r3, #6]
 8009edc:	2b01      	cmp	r3, #1
 8009ede:	d104      	bne.n	8009eea <DRV_logInfo+0x2e>
  {
    LOG_info("Drive mode  : MANUAL VARIABLE SPEED");
 8009ee0:	491a      	ldr	r1, [pc, #104]	; (8009f4c <DRV_logInfo+0x90>)
 8009ee2:	2001      	movs	r0, #1
 8009ee4:	f000 fcea 	bl	800a8bc <LOG_log>
 8009ee8:	e00f      	b.n	8009f0a <DRV_logInfo+0x4e>
  }
  else if (g_DRV_context.mode == DRV_MODE_MASTER_BOARD_CONTROL)
 8009eea:	4b16      	ldr	r3, [pc, #88]	; (8009f44 <DRV_logInfo+0x88>)
 8009eec:	799b      	ldrb	r3, [r3, #6]
 8009eee:	2b02      	cmp	r3, #2
 8009ef0:	d104      	bne.n	8009efc <DRV_logInfo+0x40>
  {
    LOG_info("Drive mode  : MASTER BOARD CONTROL");
 8009ef2:	4917      	ldr	r1, [pc, #92]	; (8009f50 <DRV_logInfo+0x94>)
 8009ef4:	2001      	movs	r0, #1
 8009ef6:	f000 fce1 	bl	800a8bc <LOG_log>
 8009efa:	e006      	b.n	8009f0a <DRV_logInfo+0x4e>
  }
  else
  {
    LOG_error("Unsupported drive mode: %u", g_DRV_context.mode);
 8009efc:	4b11      	ldr	r3, [pc, #68]	; (8009f44 <DRV_logInfo+0x88>)
 8009efe:	799b      	ldrb	r3, [r3, #6]
 8009f00:	461a      	mov	r2, r3
 8009f02:	4914      	ldr	r1, [pc, #80]	; (8009f54 <DRV_logInfo+0x98>)
 8009f04:	2003      	movs	r0, #3
 8009f06:	f000 fcd9 	bl	800a8bc <LOG_log>
  }

  if (g_DRV_context.areMotorsOn == true)
 8009f0a:	4b0e      	ldr	r3, [pc, #56]	; (8009f44 <DRV_logInfo+0x88>)
 8009f0c:	795b      	ldrb	r3, [r3, #5]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d004      	beq.n	8009f1c <DRV_logInfo+0x60>
  {
    LOG_info("Drive motors: ON");
 8009f12:	4911      	ldr	r1, [pc, #68]	; (8009f58 <DRV_logInfo+0x9c>)
 8009f14:	2001      	movs	r0, #1
 8009f16:	f000 fcd1 	bl	800a8bc <LOG_log>
 8009f1a:	e003      	b.n	8009f24 <DRV_logInfo+0x68>
  }
  else
  {
    LOG_info("Drive motors: OFF");
 8009f1c:	490f      	ldr	r1, [pc, #60]	; (8009f5c <DRV_logInfo+0xa0>)
 8009f1e:	2001      	movs	r0, #1
 8009f20:	f000 fccc 	bl	800a8bc <LOG_log>
  }

  WHL_logInfo(&g_DRV_context.wheelFrontRight);
 8009f24:	480e      	ldr	r0, [pc, #56]	; (8009f60 <DRV_logInfo+0xa4>)
 8009f26:	f001 fc6d 	bl	800b804 <WHL_logInfo>
  WHL_logInfo(&g_DRV_context.wheelFrontLeft );
 8009f2a:	480e      	ldr	r0, [pc, #56]	; (8009f64 <DRV_logInfo+0xa8>)
 8009f2c:	f001 fc6a 	bl	800b804 <WHL_logInfo>
  WHL_logInfo(&g_DRV_context.wheelRearRight );
 8009f30:	480d      	ldr	r0, [pc, #52]	; (8009f68 <DRV_logInfo+0xac>)
 8009f32:	f001 fc67 	bl	800b804 <WHL_logInfo>
  WHL_logInfo(&g_DRV_context.wheelRearLeft  );
 8009f36:	480d      	ldr	r0, [pc, #52]	; (8009f6c <DRV_logInfo+0xb0>)
 8009f38:	f001 fc64 	bl	800b804 <WHL_logInfo>

  return;
 8009f3c:	bf00      	nop
}
 8009f3e:	3708      	adds	r7, #8
 8009f40:	46bd      	mov	sp, r7
 8009f42:	bd80      	pop	{r7, pc}
 8009f44:	2000026c 	.word	0x2000026c
 8009f48:	0801094c 	.word	0x0801094c
 8009f4c:	08010970 	.word	0x08010970
 8009f50:	08010994 	.word	0x08010994
 8009f54:	080109b8 	.word	0x080109b8
 8009f58:	080109d4 	.word	0x080109d4
 8009f5c:	080109e8 	.word	0x080109e8
 8009f60:	20000274 	.word	0x20000274
 8009f64:	20000320 	.word	0x20000320
 8009f68:	20000478 	.word	0x20000478
 8009f6c:	200003cc 	.word	0x200003cc

08009f70 <DVR_getSpeedFromCommand>:

static void DVR_getSpeedFromCommand(char *p_string, uint32_t *p_speed)
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b086      	sub	sp, #24
 8009f74:	af02      	add	r7, sp, #8
 8009f76:	6078      	str	r0, [r7, #4]
 8009f78:	6039      	str	r1, [r7, #0]
  uint32_t l_speed;

  l_speed = atoi(p_string);
 8009f7a:	6878      	ldr	r0, [r7, #4]
 8009f7c:	f001 fc79 	bl	800b872 <atoi>
 8009f80:	4603      	mov	r3, r0
 8009f82:	60fb      	str	r3, [r7, #12]

  /* Check that speed is in allowed range */
  if ((l_speed < STP_MASTER_MIN_SPEED) || (l_speed > STP_MASTER_MAX_SPEED))
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	2b64      	cmp	r3, #100	; 0x64
 8009f88:	d905      	bls.n	8009f96 <DVR_getSpeedFromCommand+0x26>
  {
    LOG_error("Drive got out of range speed: %u", l_speed);
 8009f8a:	68fa      	ldr	r2, [r7, #12]
 8009f8c:	490b      	ldr	r1, [pc, #44]	; (8009fbc <DVR_getSpeedFromCommand+0x4c>)
 8009f8e:	2003      	movs	r0, #3
 8009f90:	f000 fc94 	bl	800a8bc <LOG_log>
                                     STP_DRIVE_MIN_SPEED,
                                     STP_DRIVE_MAX_SPEED,
                                     false);
  }

  return;
 8009f94:	e00e      	b.n	8009fb4 <DVR_getSpeedFromCommand+0x44>
    *p_speed = UTI_normalizeIntValue(l_speed ,
 8009f96:	68f8      	ldr	r0, [r7, #12]
 8009f98:	2300      	movs	r3, #0
 8009f9a:	9301      	str	r3, [sp, #4]
 8009f9c:	2328      	movs	r3, #40	; 0x28
 8009f9e:	9300      	str	r3, [sp, #0]
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	2264      	movs	r2, #100	; 0x64
 8009fa4:	2100      	movs	r1, #0
 8009fa6:	f001 fa78 	bl	800b49a <UTI_normalizeIntValue>
 8009faa:	4603      	mov	r3, r0
 8009fac:	461a      	mov	r2, r3
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	601a      	str	r2, [r3, #0]
  return;
 8009fb2:	bf00      	nop
}
 8009fb4:	3710      	adds	r7, #16
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	bd80      	pop	{r7, pc}
 8009fba:	bf00      	nop
 8009fbc:	080109fc 	.word	0x080109fc

08009fc0 <DRV_toggleMotorsState>:

static void DRV_toggleMotorsState(void)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	af00      	add	r7, sp, #0
  if (g_DRV_context.areMotorsOn == false)
 8009fc4:	4b17      	ldr	r3, [pc, #92]	; (800a024 <DRV_toggleMotorsState+0x64>)
 8009fc6:	795b      	ldrb	r3, [r3, #5]
 8009fc8:	f083 0301 	eor.w	r3, r3, #1
 8009fcc:	b2db      	uxtb	r3, r3
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d013      	beq.n	8009ffa <DRV_toggleMotorsState+0x3a>
  {
    LOG_info("Drive turning motor ON");
 8009fd2:	4915      	ldr	r1, [pc, #84]	; (800a028 <DRV_toggleMotorsState+0x68>)
 8009fd4:	2001      	movs	r0, #1
 8009fd6:	f000 fc71 	bl	800a8bc <LOG_log>

    WHL_turnMotorOn(&g_DRV_context.wheelFrontRight);
 8009fda:	4814      	ldr	r0, [pc, #80]	; (800a02c <DRV_toggleMotorsState+0x6c>)
 8009fdc:	f001 fb10 	bl	800b600 <WHL_turnMotorOn>
    WHL_turnMotorOn(&g_DRV_context.wheelFrontLeft );
 8009fe0:	4813      	ldr	r0, [pc, #76]	; (800a030 <DRV_toggleMotorsState+0x70>)
 8009fe2:	f001 fb0d 	bl	800b600 <WHL_turnMotorOn>
    WHL_turnMotorOn(&g_DRV_context.wheelRearRight );
 8009fe6:	4813      	ldr	r0, [pc, #76]	; (800a034 <DRV_toggleMotorsState+0x74>)
 8009fe8:	f001 fb0a 	bl	800b600 <WHL_turnMotorOn>
    WHL_turnMotorOn(&g_DRV_context.wheelRearLeft  );
 8009fec:	4812      	ldr	r0, [pc, #72]	; (800a038 <DRV_toggleMotorsState+0x78>)
 8009fee:	f001 fb07 	bl	800b600 <WHL_turnMotorOn>

    g_DRV_context.areMotorsOn = true;
 8009ff2:	4b0c      	ldr	r3, [pc, #48]	; (800a024 <DRV_toggleMotorsState+0x64>)
 8009ff4:	2201      	movs	r2, #1
 8009ff6:	715a      	strb	r2, [r3, #5]
    WHL_turnMotorOff(&g_DRV_context.wheelRearLeft  );

    g_DRV_context.areMotorsOn = false;
  }

  return;
 8009ff8:	e013      	b.n	800a022 <DRV_toggleMotorsState+0x62>
    LOG_info("Drive turning motor OFF");
 8009ffa:	4910      	ldr	r1, [pc, #64]	; (800a03c <DRV_toggleMotorsState+0x7c>)
 8009ffc:	2001      	movs	r0, #1
 8009ffe:	f000 fc5d 	bl	800a8bc <LOG_log>
    WHL_turnMotorOff(&g_DRV_context.wheelFrontRight);
 800a002:	480a      	ldr	r0, [pc, #40]	; (800a02c <DRV_toggleMotorsState+0x6c>)
 800a004:	f001 fb09 	bl	800b61a <WHL_turnMotorOff>
    WHL_turnMotorOff(&g_DRV_context.wheelFrontLeft );
 800a008:	4809      	ldr	r0, [pc, #36]	; (800a030 <DRV_toggleMotorsState+0x70>)
 800a00a:	f001 fb06 	bl	800b61a <WHL_turnMotorOff>
    WHL_turnMotorOff(&g_DRV_context.wheelRearRight );
 800a00e:	4809      	ldr	r0, [pc, #36]	; (800a034 <DRV_toggleMotorsState+0x74>)
 800a010:	f001 fb03 	bl	800b61a <WHL_turnMotorOff>
    WHL_turnMotorOff(&g_DRV_context.wheelRearLeft  );
 800a014:	4808      	ldr	r0, [pc, #32]	; (800a038 <DRV_toggleMotorsState+0x78>)
 800a016:	f001 fb00 	bl	800b61a <WHL_turnMotorOff>
    g_DRV_context.areMotorsOn = false;
 800a01a:	4b02      	ldr	r3, [pc, #8]	; (800a024 <DRV_toggleMotorsState+0x64>)
 800a01c:	2200      	movs	r2, #0
 800a01e:	715a      	strb	r2, [r3, #5]
  return;
 800a020:	bf00      	nop
}
 800a022:	bd80      	pop	{r7, pc}
 800a024:	2000026c 	.word	0x2000026c
 800a028:	08010a20 	.word	0x08010a20
 800a02c:	20000274 	.word	0x20000274
 800a030:	20000320 	.word	0x20000320
 800a034:	20000478 	.word	0x20000478
 800a038:	200003cc 	.word	0x200003cc
 800a03c:	08010a38 	.word	0x08010a38

0800a040 <DRV_setDirectionsStop>:

static void DRV_setDirectionsStop(void)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	af00      	add	r7, sp, #0
  WHL_setDirection(&g_DRV_context.wheelFrontRight, MTR_DIRECTION_STOP);
 800a044:	2100      	movs	r1, #0
 800a046:	4808      	ldr	r0, [pc, #32]	; (800a068 <DRV_setDirectionsStop+0x28>)
 800a048:	f001 fb09 	bl	800b65e <WHL_setDirection>
  WHL_setDirection(&g_DRV_context.wheelFrontLeft , MTR_DIRECTION_STOP);
 800a04c:	2100      	movs	r1, #0
 800a04e:	4807      	ldr	r0, [pc, #28]	; (800a06c <DRV_setDirectionsStop+0x2c>)
 800a050:	f001 fb05 	bl	800b65e <WHL_setDirection>
  WHL_setDirection(&g_DRV_context.wheelRearRight , MTR_DIRECTION_STOP);
 800a054:	2100      	movs	r1, #0
 800a056:	4806      	ldr	r0, [pc, #24]	; (800a070 <DRV_setDirectionsStop+0x30>)
 800a058:	f001 fb01 	bl	800b65e <WHL_setDirection>
  WHL_setDirection(&g_DRV_context.wheelRearLeft  , MTR_DIRECTION_STOP);
 800a05c:	2100      	movs	r1, #0
 800a05e:	4805      	ldr	r0, [pc, #20]	; (800a074 <DRV_setDirectionsStop+0x34>)
 800a060:	f001 fafd 	bl	800b65e <WHL_setDirection>

  return;
 800a064:	bf00      	nop
}
 800a066:	bd80      	pop	{r7, pc}
 800a068:	20000274 	.word	0x20000274
 800a06c:	20000320 	.word	0x20000320
 800a070:	20000478 	.word	0x20000478
 800a074:	200003cc 	.word	0x200003cc

0800a078 <DRV_setDirectionsForward>:

static void DRV_setDirectionsForward(void)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	af00      	add	r7, sp, #0
  WHL_setDirection(&g_DRV_context.wheelFrontRight, MTR_DIRECTION_FORWARD);
 800a07c:	2101      	movs	r1, #1
 800a07e:	4808      	ldr	r0, [pc, #32]	; (800a0a0 <DRV_setDirectionsForward+0x28>)
 800a080:	f001 faed 	bl	800b65e <WHL_setDirection>
  WHL_setDirection(&g_DRV_context.wheelFrontLeft , MTR_DIRECTION_FORWARD);
 800a084:	2101      	movs	r1, #1
 800a086:	4807      	ldr	r0, [pc, #28]	; (800a0a4 <DRV_setDirectionsForward+0x2c>)
 800a088:	f001 fae9 	bl	800b65e <WHL_setDirection>
  WHL_setDirection(&g_DRV_context.wheelRearRight , MTR_DIRECTION_FORWARD);
 800a08c:	2101      	movs	r1, #1
 800a08e:	4806      	ldr	r0, [pc, #24]	; (800a0a8 <DRV_setDirectionsForward+0x30>)
 800a090:	f001 fae5 	bl	800b65e <WHL_setDirection>
  WHL_setDirection(&g_DRV_context.wheelRearLeft  , MTR_DIRECTION_FORWARD);
 800a094:	2101      	movs	r1, #1
 800a096:	4805      	ldr	r0, [pc, #20]	; (800a0ac <DRV_setDirectionsForward+0x34>)
 800a098:	f001 fae1 	bl	800b65e <WHL_setDirection>

  return;
 800a09c:	bf00      	nop
}
 800a09e:	bd80      	pop	{r7, pc}
 800a0a0:	20000274 	.word	0x20000274
 800a0a4:	20000320 	.word	0x20000320
 800a0a8:	20000478 	.word	0x20000478
 800a0ac:	200003cc 	.word	0x200003cc

0800a0b0 <DRV_setDirectionsBackward>:

static void DRV_setDirectionsBackward(void)
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	af00      	add	r7, sp, #0
  WHL_setDirection(&g_DRV_context.wheelFrontRight, MTR_DIRECTION_BACKWARD);
 800a0b4:	2102      	movs	r1, #2
 800a0b6:	4808      	ldr	r0, [pc, #32]	; (800a0d8 <DRV_setDirectionsBackward+0x28>)
 800a0b8:	f001 fad1 	bl	800b65e <WHL_setDirection>
  WHL_setDirection(&g_DRV_context.wheelFrontLeft , MTR_DIRECTION_BACKWARD);
 800a0bc:	2102      	movs	r1, #2
 800a0be:	4807      	ldr	r0, [pc, #28]	; (800a0dc <DRV_setDirectionsBackward+0x2c>)
 800a0c0:	f001 facd 	bl	800b65e <WHL_setDirection>
  WHL_setDirection(&g_DRV_context.wheelRearRight , MTR_DIRECTION_BACKWARD);
 800a0c4:	2102      	movs	r1, #2
 800a0c6:	4806      	ldr	r0, [pc, #24]	; (800a0e0 <DRV_setDirectionsBackward+0x30>)
 800a0c8:	f001 fac9 	bl	800b65e <WHL_setDirection>
  WHL_setDirection(&g_DRV_context.wheelRearLeft  , MTR_DIRECTION_BACKWARD);
 800a0cc:	2102      	movs	r1, #2
 800a0ce:	4805      	ldr	r0, [pc, #20]	; (800a0e4 <DRV_setDirectionsBackward+0x34>)
 800a0d0:	f001 fac5 	bl	800b65e <WHL_setDirection>

  return;
 800a0d4:	bf00      	nop
}
 800a0d6:	bd80      	pop	{r7, pc}
 800a0d8:	20000274 	.word	0x20000274
 800a0dc:	20000320 	.word	0x20000320
 800a0e0:	20000478 	.word	0x20000478
 800a0e4:	200003cc 	.word	0x200003cc

0800a0e8 <DRV_setDirectionsForwardRight>:

static void DRV_setDirectionsForwardRight(void)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	af00      	add	r7, sp, #0
  WHL_setDirection(&g_DRV_context.wheelFrontLeft, MTR_DIRECTION_FORWARD);
 800a0ec:	2101      	movs	r1, #1
 800a0ee:	4804      	ldr	r0, [pc, #16]	; (800a100 <DRV_setDirectionsForwardRight+0x18>)
 800a0f0:	f001 fab5 	bl	800b65e <WHL_setDirection>
  WHL_setDirection(&g_DRV_context.wheelRearRight, MTR_DIRECTION_FORWARD);
 800a0f4:	2101      	movs	r1, #1
 800a0f6:	4803      	ldr	r0, [pc, #12]	; (800a104 <DRV_setDirectionsForwardRight+0x1c>)
 800a0f8:	f001 fab1 	bl	800b65e <WHL_setDirection>

  return;
 800a0fc:	bf00      	nop
}
 800a0fe:	bd80      	pop	{r7, pc}
 800a100:	20000320 	.word	0x20000320
 800a104:	20000478 	.word	0x20000478

0800a108 <DRV_setDirectionsForwardLeft>:

static void DRV_setDirectionsForwardLeft(void)
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	af00      	add	r7, sp, #0
  WHL_setDirection(&g_DRV_context.wheelFrontRight, MTR_DIRECTION_FORWARD);
 800a10c:	2101      	movs	r1, #1
 800a10e:	4804      	ldr	r0, [pc, #16]	; (800a120 <DRV_setDirectionsForwardLeft+0x18>)
 800a110:	f001 faa5 	bl	800b65e <WHL_setDirection>
  WHL_setDirection(&g_DRV_context.wheelRearLeft  , MTR_DIRECTION_FORWARD);
 800a114:	2101      	movs	r1, #1
 800a116:	4803      	ldr	r0, [pc, #12]	; (800a124 <DRV_setDirectionsForwardLeft+0x1c>)
 800a118:	f001 faa1 	bl	800b65e <WHL_setDirection>

  return;
 800a11c:	bf00      	nop
}
 800a11e:	bd80      	pop	{r7, pc}
 800a120:	20000274 	.word	0x20000274
 800a124:	200003cc 	.word	0x200003cc

0800a128 <DRV_setDirectionsBackwardRight>:

static void DRV_setDirectionsBackwardRight(void)
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	af00      	add	r7, sp, #0
  WHL_setDirection(&g_DRV_context.wheelFrontRight, MTR_DIRECTION_BACKWARD);
 800a12c:	2102      	movs	r1, #2
 800a12e:	4804      	ldr	r0, [pc, #16]	; (800a140 <DRV_setDirectionsBackwardRight+0x18>)
 800a130:	f001 fa95 	bl	800b65e <WHL_setDirection>
  WHL_setDirection(&g_DRV_context.wheelRearLeft  , MTR_DIRECTION_BACKWARD);
 800a134:	2102      	movs	r1, #2
 800a136:	4803      	ldr	r0, [pc, #12]	; (800a144 <DRV_setDirectionsBackwardRight+0x1c>)
 800a138:	f001 fa91 	bl	800b65e <WHL_setDirection>

  return;
 800a13c:	bf00      	nop
}
 800a13e:	bd80      	pop	{r7, pc}
 800a140:	20000274 	.word	0x20000274
 800a144:	200003cc 	.word	0x200003cc

0800a148 <DRV_setDirectionsBackwardLeft>:

static void DRV_setDirectionsBackwardLeft(void)
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	af00      	add	r7, sp, #0
  WHL_setDirection(&g_DRV_context.wheelFrontLeft, MTR_DIRECTION_BACKWARD);
 800a14c:	2102      	movs	r1, #2
 800a14e:	4804      	ldr	r0, [pc, #16]	; (800a160 <DRV_setDirectionsBackwardLeft+0x18>)
 800a150:	f001 fa85 	bl	800b65e <WHL_setDirection>
  WHL_setDirection(&g_DRV_context.wheelRearRight, MTR_DIRECTION_BACKWARD);
 800a154:	2102      	movs	r1, #2
 800a156:	4803      	ldr	r0, [pc, #12]	; (800a164 <DRV_setDirectionsBackwardLeft+0x1c>)
 800a158:	f001 fa81 	bl	800b65e <WHL_setDirection>

  return;
 800a15c:	bf00      	nop
}
 800a15e:	bd80      	pop	{r7, pc}
 800a160:	20000320 	.word	0x20000320
 800a164:	20000478 	.word	0x20000478

0800a168 <DRV_setDirectionsTurnLeft>:

static void DRV_setDirectionsTurnLeft(void)
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	af00      	add	r7, sp, #0
  WHL_setDirection(&g_DRV_context.wheelFrontRight, MTR_DIRECTION_FORWARD );
 800a16c:	2101      	movs	r1, #1
 800a16e:	4808      	ldr	r0, [pc, #32]	; (800a190 <DRV_setDirectionsTurnLeft+0x28>)
 800a170:	f001 fa75 	bl	800b65e <WHL_setDirection>
  WHL_setDirection(&g_DRV_context.wheelFrontLeft , MTR_DIRECTION_BACKWARD);
 800a174:	2102      	movs	r1, #2
 800a176:	4807      	ldr	r0, [pc, #28]	; (800a194 <DRV_setDirectionsTurnLeft+0x2c>)
 800a178:	f001 fa71 	bl	800b65e <WHL_setDirection>
  WHL_setDirection(&g_DRV_context.wheelRearRight , MTR_DIRECTION_FORWARD );
 800a17c:	2101      	movs	r1, #1
 800a17e:	4806      	ldr	r0, [pc, #24]	; (800a198 <DRV_setDirectionsTurnLeft+0x30>)
 800a180:	f001 fa6d 	bl	800b65e <WHL_setDirection>
  WHL_setDirection(&g_DRV_context.wheelRearLeft  , MTR_DIRECTION_BACKWARD);
 800a184:	2102      	movs	r1, #2
 800a186:	4805      	ldr	r0, [pc, #20]	; (800a19c <DRV_setDirectionsTurnLeft+0x34>)
 800a188:	f001 fa69 	bl	800b65e <WHL_setDirection>

  return;
 800a18c:	bf00      	nop
}
 800a18e:	bd80      	pop	{r7, pc}
 800a190:	20000274 	.word	0x20000274
 800a194:	20000320 	.word	0x20000320
 800a198:	20000478 	.word	0x20000478
 800a19c:	200003cc 	.word	0x200003cc

0800a1a0 <DRV_setDirectionsTurnRight>:

static void DRV_setDirectionsTurnRight(void)
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	af00      	add	r7, sp, #0
  WHL_setDirection(&g_DRV_context.wheelFrontRight, MTR_DIRECTION_BACKWARD);
 800a1a4:	2102      	movs	r1, #2
 800a1a6:	4808      	ldr	r0, [pc, #32]	; (800a1c8 <DRV_setDirectionsTurnRight+0x28>)
 800a1a8:	f001 fa59 	bl	800b65e <WHL_setDirection>
  WHL_setDirection(&g_DRV_context.wheelFrontLeft , MTR_DIRECTION_FORWARD );
 800a1ac:	2101      	movs	r1, #1
 800a1ae:	4807      	ldr	r0, [pc, #28]	; (800a1cc <DRV_setDirectionsTurnRight+0x2c>)
 800a1b0:	f001 fa55 	bl	800b65e <WHL_setDirection>
  WHL_setDirection(&g_DRV_context.wheelRearRight , MTR_DIRECTION_BACKWARD);
 800a1b4:	2102      	movs	r1, #2
 800a1b6:	4806      	ldr	r0, [pc, #24]	; (800a1d0 <DRV_setDirectionsTurnRight+0x30>)
 800a1b8:	f001 fa51 	bl	800b65e <WHL_setDirection>
  WHL_setDirection(&g_DRV_context.wheelRearLeft  , MTR_DIRECTION_FORWARD );
 800a1bc:	2101      	movs	r1, #1
 800a1be:	4805      	ldr	r0, [pc, #20]	; (800a1d4 <DRV_setDirectionsTurnRight+0x34>)
 800a1c0:	f001 fa4d 	bl	800b65e <WHL_setDirection>

  return;
 800a1c4:	bf00      	nop
}
 800a1c6:	bd80      	pop	{r7, pc}
 800a1c8:	20000274 	.word	0x20000274
 800a1cc:	20000320 	.word	0x20000320
 800a1d0:	20000478 	.word	0x20000478
 800a1d4:	200003cc 	.word	0x200003cc

0800a1d8 <DRV_setDirectionsTranslateLeft>:

static void DRV_setDirectionsTranslateLeft(void)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	af00      	add	r7, sp, #0
  WHL_setDirection(&g_DRV_context.wheelFrontRight, MTR_DIRECTION_FORWARD );
 800a1dc:	2101      	movs	r1, #1
 800a1de:	4808      	ldr	r0, [pc, #32]	; (800a200 <DRV_setDirectionsTranslateLeft+0x28>)
 800a1e0:	f001 fa3d 	bl	800b65e <WHL_setDirection>
  WHL_setDirection(&g_DRV_context.wheelFrontLeft , MTR_DIRECTION_BACKWARD);
 800a1e4:	2102      	movs	r1, #2
 800a1e6:	4807      	ldr	r0, [pc, #28]	; (800a204 <DRV_setDirectionsTranslateLeft+0x2c>)
 800a1e8:	f001 fa39 	bl	800b65e <WHL_setDirection>
  WHL_setDirection(&g_DRV_context.wheelRearRight , MTR_DIRECTION_BACKWARD);
 800a1ec:	2102      	movs	r1, #2
 800a1ee:	4806      	ldr	r0, [pc, #24]	; (800a208 <DRV_setDirectionsTranslateLeft+0x30>)
 800a1f0:	f001 fa35 	bl	800b65e <WHL_setDirection>
  WHL_setDirection(&g_DRV_context.wheelRearLeft  , MTR_DIRECTION_FORWARD );
 800a1f4:	2101      	movs	r1, #1
 800a1f6:	4805      	ldr	r0, [pc, #20]	; (800a20c <DRV_setDirectionsTranslateLeft+0x34>)
 800a1f8:	f001 fa31 	bl	800b65e <WHL_setDirection>

  return;
 800a1fc:	bf00      	nop
}
 800a1fe:	bd80      	pop	{r7, pc}
 800a200:	20000274 	.word	0x20000274
 800a204:	20000320 	.word	0x20000320
 800a208:	20000478 	.word	0x20000478
 800a20c:	200003cc 	.word	0x200003cc

0800a210 <DRV_setDirectionsTranslateRight>:

static void DRV_setDirectionsTranslateRight(void)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	af00      	add	r7, sp, #0
  WHL_setDirection(&g_DRV_context.wheelFrontRight, MTR_DIRECTION_BACKWARD);
 800a214:	2102      	movs	r1, #2
 800a216:	4808      	ldr	r0, [pc, #32]	; (800a238 <DRV_setDirectionsTranslateRight+0x28>)
 800a218:	f001 fa21 	bl	800b65e <WHL_setDirection>
  WHL_setDirection(&g_DRV_context.wheelFrontLeft , MTR_DIRECTION_FORWARD );
 800a21c:	2101      	movs	r1, #1
 800a21e:	4807      	ldr	r0, [pc, #28]	; (800a23c <DRV_setDirectionsTranslateRight+0x2c>)
 800a220:	f001 fa1d 	bl	800b65e <WHL_setDirection>
  WHL_setDirection(&g_DRV_context.wheelRearRight , MTR_DIRECTION_FORWARD );
 800a224:	2101      	movs	r1, #1
 800a226:	4806      	ldr	r0, [pc, #24]	; (800a240 <DRV_setDirectionsTranslateRight+0x30>)
 800a228:	f001 fa19 	bl	800b65e <WHL_setDirection>
  WHL_setDirection(&g_DRV_context.wheelRearLeft  , MTR_DIRECTION_BACKWARD);
 800a22c:	2102      	movs	r1, #2
 800a22e:	4805      	ldr	r0, [pc, #20]	; (800a244 <DRV_setDirectionsTranslateRight+0x34>)
 800a230:	f001 fa15 	bl	800b65e <WHL_setDirection>

  return;
 800a234:	bf00      	nop
}
 800a236:	bd80      	pop	{r7, pc}
 800a238:	20000274 	.word	0x20000274
 800a23c:	20000320 	.word	0x20000320
 800a240:	20000478 	.word	0x20000478
 800a244:	200003cc 	.word	0x200003cc

0800a248 <DRV_stop>:

static void DRV_stop(void)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	af00      	add	r7, sp, #0
  DRV_setDirectionsStop();
 800a24c:	f7ff fef8 	bl	800a040 <DRV_setDirectionsStop>

  WHL_setSpeed(&g_DRV_context.wheelFrontRight, 0);
 800a250:	2100      	movs	r1, #0
 800a252:	4808      	ldr	r0, [pc, #32]	; (800a274 <DRV_stop+0x2c>)
 800a254:	f001 fa14 	bl	800b680 <WHL_setSpeed>
  WHL_setSpeed(&g_DRV_context.wheelFrontLeft , 0);
 800a258:	2100      	movs	r1, #0
 800a25a:	4807      	ldr	r0, [pc, #28]	; (800a278 <DRV_stop+0x30>)
 800a25c:	f001 fa10 	bl	800b680 <WHL_setSpeed>
  WHL_setSpeed(&g_DRV_context.wheelRearRight , 0);
 800a260:	2100      	movs	r1, #0
 800a262:	4806      	ldr	r0, [pc, #24]	; (800a27c <DRV_stop+0x34>)
 800a264:	f001 fa0c 	bl	800b680 <WHL_setSpeed>
  WHL_setSpeed(&g_DRV_context.wheelRearLeft  , 0);
 800a268:	2100      	movs	r1, #0
 800a26a:	4805      	ldr	r0, [pc, #20]	; (800a280 <DRV_stop+0x38>)
 800a26c:	f001 fa08 	bl	800b680 <WHL_setSpeed>

  return;
 800a270:	bf00      	nop
}
 800a272:	bd80      	pop	{r7, pc}
 800a274:	20000274 	.word	0x20000274
 800a278:	20000320 	.word	0x20000320
 800a27c:	20000478 	.word	0x20000478
 800a280:	200003cc 	.word	0x200003cc

0800a284 <DRV_moveForward>:

static void DRV_moveForward(uint32_t p_speed)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b082      	sub	sp, #8
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
  LOG_debug("Moving forward @%u", p_speed);
 800a28c:	687a      	ldr	r2, [r7, #4]
 800a28e:	490d      	ldr	r1, [pc, #52]	; (800a2c4 <DRV_moveForward+0x40>)
 800a290:	2000      	movs	r0, #0
 800a292:	f000 fb13 	bl	800a8bc <LOG_log>

  DRV_setDirectionsForward();
 800a296:	f7ff feef 	bl	800a078 <DRV_setDirectionsForward>

  WHL_setSpeed(&g_DRV_context.wheelFrontRight, p_speed);
 800a29a:	6879      	ldr	r1, [r7, #4]
 800a29c:	480a      	ldr	r0, [pc, #40]	; (800a2c8 <DRV_moveForward+0x44>)
 800a29e:	f001 f9ef 	bl	800b680 <WHL_setSpeed>
  WHL_setSpeed(&g_DRV_context.wheelFrontLeft , p_speed);
 800a2a2:	6879      	ldr	r1, [r7, #4]
 800a2a4:	4809      	ldr	r0, [pc, #36]	; (800a2cc <DRV_moveForward+0x48>)
 800a2a6:	f001 f9eb 	bl	800b680 <WHL_setSpeed>
  WHL_setSpeed(&g_DRV_context.wheelRearRight , p_speed);
 800a2aa:	6879      	ldr	r1, [r7, #4]
 800a2ac:	4808      	ldr	r0, [pc, #32]	; (800a2d0 <DRV_moveForward+0x4c>)
 800a2ae:	f001 f9e7 	bl	800b680 <WHL_setSpeed>
  WHL_setSpeed(&g_DRV_context.wheelRearLeft  , p_speed);
 800a2b2:	6879      	ldr	r1, [r7, #4]
 800a2b4:	4807      	ldr	r0, [pc, #28]	; (800a2d4 <DRV_moveForward+0x50>)
 800a2b6:	f001 f9e3 	bl	800b680 <WHL_setSpeed>

  return;
 800a2ba:	bf00      	nop
}
 800a2bc:	3708      	adds	r7, #8
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	bd80      	pop	{r7, pc}
 800a2c2:	bf00      	nop
 800a2c4:	08010a50 	.word	0x08010a50
 800a2c8:	20000274 	.word	0x20000274
 800a2cc:	20000320 	.word	0x20000320
 800a2d0:	20000478 	.word	0x20000478
 800a2d4:	200003cc 	.word	0x200003cc

0800a2d8 <DRV_moveBackward>:

static void DRV_moveBackward(uint32_t p_speed)
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b082      	sub	sp, #8
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
  LOG_debug("Moving backward @%u", p_speed);
 800a2e0:	687a      	ldr	r2, [r7, #4]
 800a2e2:	490d      	ldr	r1, [pc, #52]	; (800a318 <DRV_moveBackward+0x40>)
 800a2e4:	2000      	movs	r0, #0
 800a2e6:	f000 fae9 	bl	800a8bc <LOG_log>

  DRV_setDirectionsBackward();
 800a2ea:	f7ff fee1 	bl	800a0b0 <DRV_setDirectionsBackward>

  WHL_setSpeed(&g_DRV_context.wheelFrontRight, p_speed);
 800a2ee:	6879      	ldr	r1, [r7, #4]
 800a2f0:	480a      	ldr	r0, [pc, #40]	; (800a31c <DRV_moveBackward+0x44>)
 800a2f2:	f001 f9c5 	bl	800b680 <WHL_setSpeed>
  WHL_setSpeed(&g_DRV_context.wheelFrontLeft , p_speed);
 800a2f6:	6879      	ldr	r1, [r7, #4]
 800a2f8:	4809      	ldr	r0, [pc, #36]	; (800a320 <DRV_moveBackward+0x48>)
 800a2fa:	f001 f9c1 	bl	800b680 <WHL_setSpeed>
  WHL_setSpeed(&g_DRV_context.wheelRearRight , p_speed);
 800a2fe:	6879      	ldr	r1, [r7, #4]
 800a300:	4808      	ldr	r0, [pc, #32]	; (800a324 <DRV_moveBackward+0x4c>)
 800a302:	f001 f9bd 	bl	800b680 <WHL_setSpeed>
  WHL_setSpeed(&g_DRV_context.wheelRearLeft  , p_speed);
 800a306:	6879      	ldr	r1, [r7, #4]
 800a308:	4807      	ldr	r0, [pc, #28]	; (800a328 <DRV_moveBackward+0x50>)
 800a30a:	f001 f9b9 	bl	800b680 <WHL_setSpeed>

  return;
 800a30e:	bf00      	nop
}
 800a310:	3708      	adds	r7, #8
 800a312:	46bd      	mov	sp, r7
 800a314:	bd80      	pop	{r7, pc}
 800a316:	bf00      	nop
 800a318:	08010a64 	.word	0x08010a64
 800a31c:	20000274 	.word	0x20000274
 800a320:	20000320 	.word	0x20000320
 800a324:	20000478 	.word	0x20000478
 800a328:	200003cc 	.word	0x200003cc

0800a32c <DRV_moveForwardRight>:

static void DRV_moveForwardRight(uint32_t p_speed)
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b082      	sub	sp, #8
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
  LOG_debug("Moving forward-right @%u", p_speed);
 800a334:	687a      	ldr	r2, [r7, #4]
 800a336:	490d      	ldr	r1, [pc, #52]	; (800a36c <DRV_moveForwardRight+0x40>)
 800a338:	2000      	movs	r0, #0
 800a33a:	f000 fabf 	bl	800a8bc <LOG_log>

  DRV_setDirectionsForwardRight();
 800a33e:	f7ff fed3 	bl	800a0e8 <DRV_setDirectionsForwardRight>

  WHL_setSpeed(&g_DRV_context.wheelFrontRight,       0);
 800a342:	2100      	movs	r1, #0
 800a344:	480a      	ldr	r0, [pc, #40]	; (800a370 <DRV_moveForwardRight+0x44>)
 800a346:	f001 f99b 	bl	800b680 <WHL_setSpeed>
  WHL_setSpeed(&g_DRV_context.wheelFrontLeft , p_speed);
 800a34a:	6879      	ldr	r1, [r7, #4]
 800a34c:	4809      	ldr	r0, [pc, #36]	; (800a374 <DRV_moveForwardRight+0x48>)
 800a34e:	f001 f997 	bl	800b680 <WHL_setSpeed>
  WHL_setSpeed(&g_DRV_context.wheelRearRight , p_speed);
 800a352:	6879      	ldr	r1, [r7, #4]
 800a354:	4808      	ldr	r0, [pc, #32]	; (800a378 <DRV_moveForwardRight+0x4c>)
 800a356:	f001 f993 	bl	800b680 <WHL_setSpeed>
  WHL_setSpeed(&g_DRV_context.wheelRearLeft  ,       0);
 800a35a:	2100      	movs	r1, #0
 800a35c:	4807      	ldr	r0, [pc, #28]	; (800a37c <DRV_moveForwardRight+0x50>)
 800a35e:	f001 f98f 	bl	800b680 <WHL_setSpeed>

  return;
 800a362:	bf00      	nop
}
 800a364:	3708      	adds	r7, #8
 800a366:	46bd      	mov	sp, r7
 800a368:	bd80      	pop	{r7, pc}
 800a36a:	bf00      	nop
 800a36c:	08010a78 	.word	0x08010a78
 800a370:	20000274 	.word	0x20000274
 800a374:	20000320 	.word	0x20000320
 800a378:	20000478 	.word	0x20000478
 800a37c:	200003cc 	.word	0x200003cc

0800a380 <DRV_moveForwardLeft>:

static void DRV_moveForwardLeft(uint32_t p_speed)
{
 800a380:	b580      	push	{r7, lr}
 800a382:	b082      	sub	sp, #8
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
  LOG_debug("Moving forward-left @%u", p_speed);
 800a388:	687a      	ldr	r2, [r7, #4]
 800a38a:	490d      	ldr	r1, [pc, #52]	; (800a3c0 <DRV_moveForwardLeft+0x40>)
 800a38c:	2000      	movs	r0, #0
 800a38e:	f000 fa95 	bl	800a8bc <LOG_log>

  DRV_setDirectionsForwardLeft();
 800a392:	f7ff feb9 	bl	800a108 <DRV_setDirectionsForwardLeft>

  WHL_setSpeed(&g_DRV_context.wheelFrontRight, p_speed);
 800a396:	6879      	ldr	r1, [r7, #4]
 800a398:	480a      	ldr	r0, [pc, #40]	; (800a3c4 <DRV_moveForwardLeft+0x44>)
 800a39a:	f001 f971 	bl	800b680 <WHL_setSpeed>
  WHL_setSpeed(&g_DRV_context.wheelFrontLeft ,       0);
 800a39e:	2100      	movs	r1, #0
 800a3a0:	4809      	ldr	r0, [pc, #36]	; (800a3c8 <DRV_moveForwardLeft+0x48>)
 800a3a2:	f001 f96d 	bl	800b680 <WHL_setSpeed>
  WHL_setSpeed(&g_DRV_context.wheelRearRight ,       0);
 800a3a6:	2100      	movs	r1, #0
 800a3a8:	4808      	ldr	r0, [pc, #32]	; (800a3cc <DRV_moveForwardLeft+0x4c>)
 800a3aa:	f001 f969 	bl	800b680 <WHL_setSpeed>
  WHL_setSpeed(&g_DRV_context.wheelRearLeft  , p_speed);
 800a3ae:	6879      	ldr	r1, [r7, #4]
 800a3b0:	4807      	ldr	r0, [pc, #28]	; (800a3d0 <DRV_moveForwardLeft+0x50>)
 800a3b2:	f001 f965 	bl	800b680 <WHL_setSpeed>

  return;
 800a3b6:	bf00      	nop
}
 800a3b8:	3708      	adds	r7, #8
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	bd80      	pop	{r7, pc}
 800a3be:	bf00      	nop
 800a3c0:	08010a94 	.word	0x08010a94
 800a3c4:	20000274 	.word	0x20000274
 800a3c8:	20000320 	.word	0x20000320
 800a3cc:	20000478 	.word	0x20000478
 800a3d0:	200003cc 	.word	0x200003cc

0800a3d4 <DRV_moveBackwardRight>:

static void DRV_moveBackwardRight(uint32_t p_speed)
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b082      	sub	sp, #8
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
  LOG_debug("Moving backward-right @%u", p_speed);
 800a3dc:	687a      	ldr	r2, [r7, #4]
 800a3de:	490d      	ldr	r1, [pc, #52]	; (800a414 <DRV_moveBackwardRight+0x40>)
 800a3e0:	2000      	movs	r0, #0
 800a3e2:	f000 fa6b 	bl	800a8bc <LOG_log>

  DRV_setDirectionsBackwardRight();
 800a3e6:	f7ff fe9f 	bl	800a128 <DRV_setDirectionsBackwardRight>

  WHL_setSpeed(&g_DRV_context.wheelFrontRight, p_speed);
 800a3ea:	6879      	ldr	r1, [r7, #4]
 800a3ec:	480a      	ldr	r0, [pc, #40]	; (800a418 <DRV_moveBackwardRight+0x44>)
 800a3ee:	f001 f947 	bl	800b680 <WHL_setSpeed>
  WHL_setSpeed(&g_DRV_context.wheelFrontLeft ,       0);
 800a3f2:	2100      	movs	r1, #0
 800a3f4:	4809      	ldr	r0, [pc, #36]	; (800a41c <DRV_moveBackwardRight+0x48>)
 800a3f6:	f001 f943 	bl	800b680 <WHL_setSpeed>
  WHL_setSpeed(&g_DRV_context.wheelRearRight ,       0);
 800a3fa:	2100      	movs	r1, #0
 800a3fc:	4808      	ldr	r0, [pc, #32]	; (800a420 <DRV_moveBackwardRight+0x4c>)
 800a3fe:	f001 f93f 	bl	800b680 <WHL_setSpeed>
  WHL_setSpeed(&g_DRV_context.wheelRearLeft  , p_speed);
 800a402:	6879      	ldr	r1, [r7, #4]
 800a404:	4807      	ldr	r0, [pc, #28]	; (800a424 <DRV_moveBackwardRight+0x50>)
 800a406:	f001 f93b 	bl	800b680 <WHL_setSpeed>

  return;
 800a40a:	bf00      	nop
}
 800a40c:	3708      	adds	r7, #8
 800a40e:	46bd      	mov	sp, r7
 800a410:	bd80      	pop	{r7, pc}
 800a412:	bf00      	nop
 800a414:	08010aac 	.word	0x08010aac
 800a418:	20000274 	.word	0x20000274
 800a41c:	20000320 	.word	0x20000320
 800a420:	20000478 	.word	0x20000478
 800a424:	200003cc 	.word	0x200003cc

0800a428 <DRV_moveBackwardLeft>:

static void DRV_moveBackwardLeft(uint32_t p_speed)
{
 800a428:	b580      	push	{r7, lr}
 800a42a:	b082      	sub	sp, #8
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
  LOG_debug("Moving backward-left @%u", p_speed);
 800a430:	687a      	ldr	r2, [r7, #4]
 800a432:	490d      	ldr	r1, [pc, #52]	; (800a468 <DRV_moveBackwardLeft+0x40>)
 800a434:	2000      	movs	r0, #0
 800a436:	f000 fa41 	bl	800a8bc <LOG_log>

  DRV_setDirectionsBackwardLeft();
 800a43a:	f7ff fe85 	bl	800a148 <DRV_setDirectionsBackwardLeft>

  WHL_setSpeed(&g_DRV_context.wheelFrontRight,       0);
 800a43e:	2100      	movs	r1, #0
 800a440:	480a      	ldr	r0, [pc, #40]	; (800a46c <DRV_moveBackwardLeft+0x44>)
 800a442:	f001 f91d 	bl	800b680 <WHL_setSpeed>
  WHL_setSpeed(&g_DRV_context.wheelFrontLeft , p_speed);
 800a446:	6879      	ldr	r1, [r7, #4]
 800a448:	4809      	ldr	r0, [pc, #36]	; (800a470 <DRV_moveBackwardLeft+0x48>)
 800a44a:	f001 f919 	bl	800b680 <WHL_setSpeed>
  WHL_setSpeed(&g_DRV_context.wheelRearRight , p_speed);
 800a44e:	6879      	ldr	r1, [r7, #4]
 800a450:	4808      	ldr	r0, [pc, #32]	; (800a474 <DRV_moveBackwardLeft+0x4c>)
 800a452:	f001 f915 	bl	800b680 <WHL_setSpeed>
  WHL_setSpeed(&g_DRV_context.wheelRearLeft  ,       0);
 800a456:	2100      	movs	r1, #0
 800a458:	4807      	ldr	r0, [pc, #28]	; (800a478 <DRV_moveBackwardLeft+0x50>)
 800a45a:	f001 f911 	bl	800b680 <WHL_setSpeed>

  return;
 800a45e:	bf00      	nop
}
 800a460:	3708      	adds	r7, #8
 800a462:	46bd      	mov	sp, r7
 800a464:	bd80      	pop	{r7, pc}
 800a466:	bf00      	nop
 800a468:	08010ac8 	.word	0x08010ac8
 800a46c:	20000274 	.word	0x20000274
 800a470:	20000320 	.word	0x20000320
 800a474:	20000478 	.word	0x20000478
 800a478:	200003cc 	.word	0x200003cc

0800a47c <DRV_turnLeft>:

static void DRV_turnLeft(uint32_t p_speed)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b082      	sub	sp, #8
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
  LOG_debug("Turning left @%u", p_speed);
 800a484:	687a      	ldr	r2, [r7, #4]
 800a486:	490d      	ldr	r1, [pc, #52]	; (800a4bc <DRV_turnLeft+0x40>)
 800a488:	2000      	movs	r0, #0
 800a48a:	f000 fa17 	bl	800a8bc <LOG_log>

  DRV_setDirectionsTurnLeft();
 800a48e:	f7ff fe6b 	bl	800a168 <DRV_setDirectionsTurnLeft>

  WHL_setSpeed(&g_DRV_context.wheelFrontRight, p_speed);
 800a492:	6879      	ldr	r1, [r7, #4]
 800a494:	480a      	ldr	r0, [pc, #40]	; (800a4c0 <DRV_turnLeft+0x44>)
 800a496:	f001 f8f3 	bl	800b680 <WHL_setSpeed>
  WHL_setSpeed(&g_DRV_context.wheelFrontLeft , p_speed);
 800a49a:	6879      	ldr	r1, [r7, #4]
 800a49c:	4809      	ldr	r0, [pc, #36]	; (800a4c4 <DRV_turnLeft+0x48>)
 800a49e:	f001 f8ef 	bl	800b680 <WHL_setSpeed>
  WHL_setSpeed(&g_DRV_context.wheelRearRight , p_speed);
 800a4a2:	6879      	ldr	r1, [r7, #4]
 800a4a4:	4808      	ldr	r0, [pc, #32]	; (800a4c8 <DRV_turnLeft+0x4c>)
 800a4a6:	f001 f8eb 	bl	800b680 <WHL_setSpeed>
  WHL_setSpeed(&g_DRV_context.wheelRearLeft  , p_speed);
 800a4aa:	6879      	ldr	r1, [r7, #4]
 800a4ac:	4807      	ldr	r0, [pc, #28]	; (800a4cc <DRV_turnLeft+0x50>)
 800a4ae:	f001 f8e7 	bl	800b680 <WHL_setSpeed>

  return;
 800a4b2:	bf00      	nop
}
 800a4b4:	3708      	adds	r7, #8
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	bd80      	pop	{r7, pc}
 800a4ba:	bf00      	nop
 800a4bc:	08010ae4 	.word	0x08010ae4
 800a4c0:	20000274 	.word	0x20000274
 800a4c4:	20000320 	.word	0x20000320
 800a4c8:	20000478 	.word	0x20000478
 800a4cc:	200003cc 	.word	0x200003cc

0800a4d0 <DRV_turnRight>:

static void DRV_turnRight(uint32_t p_speed)
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b082      	sub	sp, #8
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
  LOG_debug("Turning right @%u", p_speed);
 800a4d8:	687a      	ldr	r2, [r7, #4]
 800a4da:	490d      	ldr	r1, [pc, #52]	; (800a510 <DRV_turnRight+0x40>)
 800a4dc:	2000      	movs	r0, #0
 800a4de:	f000 f9ed 	bl	800a8bc <LOG_log>

  DRV_setDirectionsTurnRight();
 800a4e2:	f7ff fe5d 	bl	800a1a0 <DRV_setDirectionsTurnRight>

  WHL_setSpeed(&g_DRV_context.wheelFrontRight, p_speed);
 800a4e6:	6879      	ldr	r1, [r7, #4]
 800a4e8:	480a      	ldr	r0, [pc, #40]	; (800a514 <DRV_turnRight+0x44>)
 800a4ea:	f001 f8c9 	bl	800b680 <WHL_setSpeed>
  WHL_setSpeed(&g_DRV_context.wheelFrontLeft , p_speed);
 800a4ee:	6879      	ldr	r1, [r7, #4]
 800a4f0:	4809      	ldr	r0, [pc, #36]	; (800a518 <DRV_turnRight+0x48>)
 800a4f2:	f001 f8c5 	bl	800b680 <WHL_setSpeed>
  WHL_setSpeed(&g_DRV_context.wheelRearRight , p_speed);
 800a4f6:	6879      	ldr	r1, [r7, #4]
 800a4f8:	4808      	ldr	r0, [pc, #32]	; (800a51c <DRV_turnRight+0x4c>)
 800a4fa:	f001 f8c1 	bl	800b680 <WHL_setSpeed>
  WHL_setSpeed(&g_DRV_context.wheelRearLeft  , p_speed);
 800a4fe:	6879      	ldr	r1, [r7, #4]
 800a500:	4807      	ldr	r0, [pc, #28]	; (800a520 <DRV_turnRight+0x50>)
 800a502:	f001 f8bd 	bl	800b680 <WHL_setSpeed>

  return;
 800a506:	bf00      	nop
}
 800a508:	3708      	adds	r7, #8
 800a50a:	46bd      	mov	sp, r7
 800a50c:	bd80      	pop	{r7, pc}
 800a50e:	bf00      	nop
 800a510:	08010af8 	.word	0x08010af8
 800a514:	20000274 	.word	0x20000274
 800a518:	20000320 	.word	0x20000320
 800a51c:	20000478 	.word	0x20000478
 800a520:	200003cc 	.word	0x200003cc

0800a524 <DRV_translateLeft>:

static void DRV_translateLeft(uint32_t p_speed)
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b082      	sub	sp, #8
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
  LOG_debug("Translating left @%u", p_speed);
 800a52c:	687a      	ldr	r2, [r7, #4]
 800a52e:	490d      	ldr	r1, [pc, #52]	; (800a564 <DRV_translateLeft+0x40>)
 800a530:	2000      	movs	r0, #0
 800a532:	f000 f9c3 	bl	800a8bc <LOG_log>

  DRV_setDirectionsTranslateLeft();
 800a536:	f7ff fe4f 	bl	800a1d8 <DRV_setDirectionsTranslateLeft>

  WHL_setSpeed(&g_DRV_context.wheelFrontRight, p_speed);
 800a53a:	6879      	ldr	r1, [r7, #4]
 800a53c:	480a      	ldr	r0, [pc, #40]	; (800a568 <DRV_translateLeft+0x44>)
 800a53e:	f001 f89f 	bl	800b680 <WHL_setSpeed>
  WHL_setSpeed(&g_DRV_context.wheelFrontLeft , p_speed);
 800a542:	6879      	ldr	r1, [r7, #4]
 800a544:	4809      	ldr	r0, [pc, #36]	; (800a56c <DRV_translateLeft+0x48>)
 800a546:	f001 f89b 	bl	800b680 <WHL_setSpeed>
  WHL_setSpeed(&g_DRV_context.wheelRearRight , p_speed);
 800a54a:	6879      	ldr	r1, [r7, #4]
 800a54c:	4808      	ldr	r0, [pc, #32]	; (800a570 <DRV_translateLeft+0x4c>)
 800a54e:	f001 f897 	bl	800b680 <WHL_setSpeed>
  WHL_setSpeed(&g_DRV_context.wheelRearLeft  , p_speed);
 800a552:	6879      	ldr	r1, [r7, #4]
 800a554:	4807      	ldr	r0, [pc, #28]	; (800a574 <DRV_translateLeft+0x50>)
 800a556:	f001 f893 	bl	800b680 <WHL_setSpeed>

  return;
 800a55a:	bf00      	nop
}
 800a55c:	3708      	adds	r7, #8
 800a55e:	46bd      	mov	sp, r7
 800a560:	bd80      	pop	{r7, pc}
 800a562:	bf00      	nop
 800a564:	08010b0c 	.word	0x08010b0c
 800a568:	20000274 	.word	0x20000274
 800a56c:	20000320 	.word	0x20000320
 800a570:	20000478 	.word	0x20000478
 800a574:	200003cc 	.word	0x200003cc

0800a578 <DRV_translateRight>:

static void DRV_translateRight(uint32_t p_speed)
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b082      	sub	sp, #8
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
  LOG_debug("Translating right @%u", p_speed);
 800a580:	687a      	ldr	r2, [r7, #4]
 800a582:	490d      	ldr	r1, [pc, #52]	; (800a5b8 <DRV_translateRight+0x40>)
 800a584:	2000      	movs	r0, #0
 800a586:	f000 f999 	bl	800a8bc <LOG_log>

  DRV_setDirectionsTranslateRight();
 800a58a:	f7ff fe41 	bl	800a210 <DRV_setDirectionsTranslateRight>

  WHL_setSpeed(&g_DRV_context.wheelFrontRight, p_speed);
 800a58e:	6879      	ldr	r1, [r7, #4]
 800a590:	480a      	ldr	r0, [pc, #40]	; (800a5bc <DRV_translateRight+0x44>)
 800a592:	f001 f875 	bl	800b680 <WHL_setSpeed>
  WHL_setSpeed(&g_DRV_context.wheelFrontLeft , p_speed);
 800a596:	6879      	ldr	r1, [r7, #4]
 800a598:	4809      	ldr	r0, [pc, #36]	; (800a5c0 <DRV_translateRight+0x48>)
 800a59a:	f001 f871 	bl	800b680 <WHL_setSpeed>
  WHL_setSpeed(&g_DRV_context.wheelRearRight , p_speed);
 800a59e:	6879      	ldr	r1, [r7, #4]
 800a5a0:	4808      	ldr	r0, [pc, #32]	; (800a5c4 <DRV_translateRight+0x4c>)
 800a5a2:	f001 f86d 	bl	800b680 <WHL_setSpeed>
  WHL_setSpeed(&g_DRV_context.wheelRearLeft  , p_speed);
 800a5a6:	6879      	ldr	r1, [r7, #4]
 800a5a8:	4807      	ldr	r0, [pc, #28]	; (800a5c8 <DRV_translateRight+0x50>)
 800a5aa:	f001 f869 	bl	800b680 <WHL_setSpeed>

  return;
 800a5ae:	bf00      	nop
}
 800a5b0:	3708      	adds	r7, #8
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	bd80      	pop	{r7, pc}
 800a5b6:	bf00      	nop
 800a5b8:	08010b24 	.word	0x08010b24
 800a5bc:	20000274 	.word	0x20000274
 800a5c0:	20000320 	.word	0x20000320
 800a5c4:	20000478 	.word	0x20000478
 800a5c8:	200003cc 	.word	0x200003cc

0800a5cc <ENC_init>:

void ENC_init(T_ENC_Handle      *p_handle,
              char              *p_name,
              bool               p_invertOnUpdate,
              TIM_HandleTypeDef *p_encoderTimerHandle)
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b084      	sub	sp, #16
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	60f8      	str	r0, [r7, #12]
 800a5d4:	60b9      	str	r1, [r7, #8]
 800a5d6:	603b      	str	r3, [r7, #0]
 800a5d8:	4613      	mov	r3, r2
 800a5da:	71fb      	strb	r3, [r7, #7]
  LOG_info("Initializing Encoder module for %s", p_name);
 800a5dc:	68ba      	ldr	r2, [r7, #8]
 800a5de:	490a      	ldr	r1, [pc, #40]	; (800a608 <ENC_init+0x3c>)
 800a5e0:	2001      	movs	r0, #1
 800a5e2:	f000 f96b 	bl	800a8bc <LOG_log>

  p_handle->name           = p_name;
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	68ba      	ldr	r2, [r7, #8]
 800a5ea:	601a      	str	r2, [r3, #0]
  p_handle->invertOnUpdate = p_invertOnUpdate;
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	79fa      	ldrb	r2, [r7, #7]
 800a5f0:	721a      	strb	r2, [r3, #8]
  p_handle->timerHandle    = p_encoderTimerHandle;
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	683a      	ldr	r2, [r7, #0]
 800a5f6:	60da      	str	r2, [r3, #12]

  ENC_reset(p_handle);
 800a5f8:	68f8      	ldr	r0, [r7, #12]
 800a5fa:	f000 f807 	bl	800a60c <ENC_reset>

  return;
 800a5fe:	bf00      	nop
}
 800a600:	3710      	adds	r7, #16
 800a602:	46bd      	mov	sp, r7
 800a604:	bd80      	pop	{r7, pc}
 800a606:	bf00      	nop
 800a608:	08010b3c 	.word	0x08010b3c

0800a60c <ENC_reset>:

void ENC_reset(T_ENC_Handle *p_handle)
{
 800a60c:	b480      	push	{r7}
 800a60e:	b083      	sub	sp, #12
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
  p_handle->value = 0;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	2200      	movs	r2, #0
 800a618:	605a      	str	r2, [r3, #4]

  __HAL_TIM_SET_COUNTER(p_handle->timerHandle, 0);
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	68db      	ldr	r3, [r3, #12]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	2200      	movs	r2, #0
 800a622:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 800a624:	bf00      	nop
}
 800a626:	370c      	adds	r7, #12
 800a628:	46bd      	mov	sp, r7
 800a62a:	bc80      	pop	{r7}
 800a62c:	4770      	bx	lr

0800a62e <ENC_update>:

void ENC_update(T_ENC_Handle *p_handle, int32_t p_value)
{
 800a62e:	b480      	push	{r7}
 800a630:	b083      	sub	sp, #12
 800a632:	af00      	add	r7, sp, #0
 800a634:	6078      	str	r0, [r7, #4]
 800a636:	6039      	str	r1, [r7, #0]
  if (p_handle->invertOnUpdate == false)
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	7a1b      	ldrb	r3, [r3, #8]
 800a63c:	f083 0301 	eor.w	r3, r3, #1
 800a640:	b2db      	uxtb	r3, r3
 800a642:	2b00      	cmp	r3, #0
 800a644:	d003      	beq.n	800a64e <ENC_update+0x20>
  {
    p_handle->value = p_value;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	683a      	ldr	r2, [r7, #0]
 800a64a:	605a      	str	r2, [r3, #4]
  else
  {
    p_handle->value = -p_value;
  }

  return;
 800a64c:	e004      	b.n	800a658 <ENC_update+0x2a>
    p_handle->value = -p_value;
 800a64e:	683b      	ldr	r3, [r7, #0]
 800a650:	425a      	negs	r2, r3
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	605a      	str	r2, [r3, #4]
  return;
 800a656:	bf00      	nop
}
 800a658:	370c      	adds	r7, #12
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bc80      	pop	{r7}
 800a65e:	4770      	bx	lr

0800a660 <ENC_getCount>:

int32_t ENC_getCount(T_ENC_Handle *p_handle)
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b084      	sub	sp, #16
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
  int32_t l_count;

  l_count = p_handle->value;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	685b      	ldr	r3, [r3, #4]
 800a66c:	60fb      	str	r3, [r7, #12]

  ENC_reset(p_handle);
 800a66e:	6878      	ldr	r0, [r7, #4]
 800a670:	f7ff ffcc 	bl	800a60c <ENC_reset>

  return l_count;
 800a674:	68fb      	ldr	r3, [r7, #12]
}
 800a676:	4618      	mov	r0, r3
 800a678:	3710      	adds	r7, #16
 800a67a:	46bd      	mov	sp, r7
 800a67c:	bd80      	pop	{r7, pc}
	...

0800a680 <LED_setMode>:
} T_LED_Context;

static T_LED_Context g_LED_context;

void LED_setMode(T_LED_MODE p_mode)
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b082      	sub	sp, #8
 800a684:	af00      	add	r7, sp, #0
 800a686:	4603      	mov	r3, r0
 800a688:	71fb      	strb	r3, [r7, #7]
  if (p_mode != g_LED_context.mode)
 800a68a:	4b1b      	ldr	r3, [pc, #108]	; (800a6f8 <LED_setMode+0x78>)
 800a68c:	781b      	ldrb	r3, [r3, #0]
 800a68e:	79fa      	ldrb	r2, [r7, #7]
 800a690:	429a      	cmp	r2, r3
 800a692:	d02d      	beq.n	800a6f0 <LED_setMode+0x70>
  {
    switch (p_mode)
 800a694:	79fb      	ldrb	r3, [r7, #7]
 800a696:	2b04      	cmp	r3, #4
 800a698:	d825      	bhi.n	800a6e6 <LED_setMode+0x66>
 800a69a:	a201      	add	r2, pc, #4	; (adr r2, 800a6a0 <LED_setMode+0x20>)
 800a69c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6a0:	0800a6b5 	.word	0x0800a6b5
 800a6a4:	0800a6bf 	.word	0x0800a6bf
 800a6a8:	0800a6c9 	.word	0x0800a6c9
 800a6ac:	0800a6d3 	.word	0x0800a6d3
 800a6b0:	0800a6dd 	.word	0x0800a6dd
    {
      case LED_MODE_FORCED_OFF:
        LOG_info("Turning LED OFF");
 800a6b4:	4911      	ldr	r1, [pc, #68]	; (800a6fc <LED_setMode+0x7c>)
 800a6b6:	2001      	movs	r0, #1
 800a6b8:	f000 f900 	bl	800a8bc <LOG_log>
        break;
 800a6bc:	e014      	b.n	800a6e8 <LED_setMode+0x68>

      case LED_MODE_FORCED_ON:
        LOG_info("Turning LED ON");
 800a6be:	4910      	ldr	r1, [pc, #64]	; (800a700 <LED_setMode+0x80>)
 800a6c0:	2001      	movs	r0, #1
 800a6c2:	f000 f8fb 	bl	800a8bc <LOG_log>
        break;
 800a6c6:	e00f      	b.n	800a6e8 <LED_setMode+0x68>

      case LED_MODE_BLINK_SLOW:
        LOG_info("Setting LED to blink slow");
 800a6c8:	490e      	ldr	r1, [pc, #56]	; (800a704 <LED_setMode+0x84>)
 800a6ca:	2001      	movs	r0, #1
 800a6cc:	f000 f8f6 	bl	800a8bc <LOG_log>
        break;
 800a6d0:	e00a      	b.n	800a6e8 <LED_setMode+0x68>

      case LED_MODE_BLINK_MEDIUM:
        LOG_info("Setting LED to blink medium");
 800a6d2:	490d      	ldr	r1, [pc, #52]	; (800a708 <LED_setMode+0x88>)
 800a6d4:	2001      	movs	r0, #1
 800a6d6:	f000 f8f1 	bl	800a8bc <LOG_log>
        break;
 800a6da:	e005      	b.n	800a6e8 <LED_setMode+0x68>

      case LED_MODE_BLINK_FAST:
        LOG_info("Setting LED to blink fast");
 800a6dc:	490b      	ldr	r1, [pc, #44]	; (800a70c <LED_setMode+0x8c>)
 800a6de:	2001      	movs	r0, #1
 800a6e0:	f000 f8ec 	bl	800a8bc <LOG_log>
        break;
 800a6e4:	e000      	b.n	800a6e8 <LED_setMode+0x68>

      default:
        ; /* Nothing to do */
        break;
 800a6e6:	bf00      	nop
    }

    g_LED_context.mode = p_mode;
 800a6e8:	4a03      	ldr	r2, [pc, #12]	; (800a6f8 <LED_setMode+0x78>)
 800a6ea:	79fb      	ldrb	r3, [r7, #7]
 800a6ec:	7013      	strb	r3, [r2, #0]
  else
  {
    ; /* Nothong to do */
  }

  return;
 800a6ee:	bf00      	nop
 800a6f0:	bf00      	nop
}
 800a6f2:	3708      	adds	r7, #8
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	bd80      	pop	{r7, pc}
 800a6f8:	20000524 	.word	0x20000524
 800a6fc:	08010b78 	.word	0x08010b78
 800a700:	08010b88 	.word	0x08010b88
 800a704:	08010b98 	.word	0x08010b98
 800a708:	08010bb4 	.word	0x08010bb4
 800a70c:	08010bd0 	.word	0x08010bd0

0800a710 <LED_update>:
{
  return g_LED_context.mode;
}

void LED_update(void)
{
 800a710:	b580      	push	{r7, lr}
 800a712:	af00      	add	r7, sp, #0
  static uint32_t l_blinkCounter = 0;

  switch (g_LED_context.mode)
 800a714:	4b2a      	ldr	r3, [pc, #168]	; (800a7c0 <LED_update+0xb0>)
 800a716:	781b      	ldrb	r3, [r3, #0]
 800a718:	2b04      	cmp	r3, #4
 800a71a:	d849      	bhi.n	800a7b0 <LED_update+0xa0>
 800a71c:	a201      	add	r2, pc, #4	; (adr r2, 800a724 <LED_update+0x14>)
 800a71e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a722:	bf00      	nop
 800a724:	0800a739 	.word	0x0800a739
 800a728:	0800a747 	.word	0x0800a747
 800a72c:	0800a755 	.word	0x0800a755
 800a730:	0800a783 	.word	0x0800a783
 800a734:	0800a7a5 	.word	0x0800a7a5
  {
    case LED_MODE_FORCED_OFF:
      HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_SET);
 800a738:	2201      	movs	r2, #1
 800a73a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a73e:	4821      	ldr	r0, [pc, #132]	; (800a7c4 <LED_update+0xb4>)
 800a740:	f7f9 fc4c 	bl	8003fdc <HAL_GPIO_WritePin>
      break;
 800a744:	e039      	b.n	800a7ba <LED_update+0xaa>

    case LED_MODE_FORCED_ON:
      HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 800a746:	2200      	movs	r2, #0
 800a748:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a74c:	481d      	ldr	r0, [pc, #116]	; (800a7c4 <LED_update+0xb4>)
 800a74e:	f7f9 fc45 	bl	8003fdc <HAL_GPIO_WritePin>
      break;
 800a752:	e032      	b.n	800a7ba <LED_update+0xaa>

    case LED_MODE_BLINK_SLOW:
      l_blinkCounter++;
 800a754:	4b1c      	ldr	r3, [pc, #112]	; (800a7c8 <LED_update+0xb8>)
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	3301      	adds	r3, #1
 800a75a:	4a1b      	ldr	r2, [pc, #108]	; (800a7c8 <LED_update+0xb8>)
 800a75c:	6013      	str	r3, [r2, #0]
      if (l_blinkCounter % 5 == 0)
 800a75e:	4b1a      	ldr	r3, [pc, #104]	; (800a7c8 <LED_update+0xb8>)
 800a760:	6819      	ldr	r1, [r3, #0]
 800a762:	4b1a      	ldr	r3, [pc, #104]	; (800a7cc <LED_update+0xbc>)
 800a764:	fba3 2301 	umull	r2, r3, r3, r1
 800a768:	089a      	lsrs	r2, r3, #2
 800a76a:	4613      	mov	r3, r2
 800a76c:	009b      	lsls	r3, r3, #2
 800a76e:	4413      	add	r3, r2
 800a770:	1aca      	subs	r2, r1, r3
 800a772:	2a00      	cmp	r2, #0
 800a774:	d11e      	bne.n	800a7b4 <LED_update+0xa4>
      {
        HAL_GPIO_TogglePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
 800a776:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a77a:	4812      	ldr	r0, [pc, #72]	; (800a7c4 <LED_update+0xb4>)
 800a77c:	f7f9 fc60 	bl	8004040 <HAL_GPIO_TogglePin>
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 800a780:	e018      	b.n	800a7b4 <LED_update+0xa4>

    case LED_MODE_BLINK_MEDIUM:
      l_blinkCounter++;
 800a782:	4b11      	ldr	r3, [pc, #68]	; (800a7c8 <LED_update+0xb8>)
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	3301      	adds	r3, #1
 800a788:	4a0f      	ldr	r2, [pc, #60]	; (800a7c8 <LED_update+0xb8>)
 800a78a:	6013      	str	r3, [r2, #0]
      if (l_blinkCounter % 2 == 0)
 800a78c:	4b0e      	ldr	r3, [pc, #56]	; (800a7c8 <LED_update+0xb8>)
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	f003 0301 	and.w	r3, r3, #1
 800a794:	2b00      	cmp	r3, #0
 800a796:	d10f      	bne.n	800a7b8 <LED_update+0xa8>
      {
        HAL_GPIO_TogglePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
 800a798:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a79c:	4809      	ldr	r0, [pc, #36]	; (800a7c4 <LED_update+0xb4>)
 800a79e:	f7f9 fc4f 	bl	8004040 <HAL_GPIO_TogglePin>
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 800a7a2:	e009      	b.n	800a7b8 <LED_update+0xa8>

    case LED_MODE_BLINK_FAST:
      HAL_GPIO_TogglePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
 800a7a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a7a8:	4806      	ldr	r0, [pc, #24]	; (800a7c4 <LED_update+0xb4>)
 800a7aa:	f7f9 fc49 	bl	8004040 <HAL_GPIO_TogglePin>
      break;
 800a7ae:	e004      	b.n	800a7ba <LED_update+0xaa>

    default:
      ; /* Nothing to do */
      break;
 800a7b0:	bf00      	nop
 800a7b2:	e002      	b.n	800a7ba <LED_update+0xaa>
      break;
 800a7b4:	bf00      	nop
 800a7b6:	e000      	b.n	800a7ba <LED_update+0xaa>
      break;
 800a7b8:	bf00      	nop
  }

  return;
 800a7ba:	bf00      	nop
}
 800a7bc:	bd80      	pop	{r7, pc}
 800a7be:	bf00      	nop
 800a7c0:	20000524 	.word	0x20000524
 800a7c4:	40011000 	.word	0x40011000
 800a7c8:	20000528 	.word	0x20000528
 800a7cc:	cccccccd 	.word	0xcccccccd

0800a7d0 <LOG_init>:
{
  "DEBUG", "INFO", "WARNING", "ERROR"
};

void LOG_init(RTC_HandleTypeDef *p_rctHandle, bool p_isLogOn)
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b082      	sub	sp, #8
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
 800a7d8:	460b      	mov	r3, r1
 800a7da:	70fb      	strb	r3, [r7, #3]
  g_LOG_context.isOn      = p_isLogOn;
 800a7dc:	4a06      	ldr	r2, [pc, #24]	; (800a7f8 <LOG_init+0x28>)
 800a7de:	78fb      	ldrb	r3, [r7, #3]
 800a7e0:	7013      	strb	r3, [r2, #0]
  g_LOG_context.rtcHandle = p_rctHandle;
 800a7e2:	4a05      	ldr	r2, [pc, #20]	; (800a7f8 <LOG_init+0x28>)
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	6053      	str	r3, [r2, #4]

  LOG_info("LOG initialized");
 800a7e8:	4904      	ldr	r1, [pc, #16]	; (800a7fc <LOG_init+0x2c>)
 800a7ea:	2001      	movs	r0, #1
 800a7ec:	f000 f866 	bl	800a8bc <LOG_log>

  return;
 800a7f0:	bf00      	nop
}
 800a7f2:	3708      	adds	r7, #8
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	bd80      	pop	{r7, pc}
 800a7f8:	2000052c 	.word	0x2000052c
 800a7fc:	08010c0c 	.word	0x08010c0c

0800a800 <LOG_toggleOnOff>:

void LOG_toggleOnOff(void)
{
 800a800:	b580      	push	{r7, lr}
 800a802:	af00      	add	r7, sp, #0
  if (g_LOG_context.isOn == true)
 800a804:	4b0a      	ldr	r3, [pc, #40]	; (800a830 <LOG_toggleOnOff+0x30>)
 800a806:	781b      	ldrb	r3, [r3, #0]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d007      	beq.n	800a81c <LOG_toggleOnOff+0x1c>
  {
    LOG_info("Turning LOG OFF");
 800a80c:	4909      	ldr	r1, [pc, #36]	; (800a834 <LOG_toggleOnOff+0x34>)
 800a80e:	2001      	movs	r0, #1
 800a810:	f000 f854 	bl	800a8bc <LOG_log>

    g_LOG_context.isOn = false;
 800a814:	4b06      	ldr	r3, [pc, #24]	; (800a830 <LOG_toggleOnOff+0x30>)
 800a816:	2200      	movs	r2, #0
 800a818:	701a      	strb	r2, [r3, #0]
    g_LOG_context.isOn = true;

    LOG_info("Turning LOG ON");
  }

  return;
 800a81a:	e007      	b.n	800a82c <LOG_toggleOnOff+0x2c>
    g_LOG_context.isOn = true;
 800a81c:	4b04      	ldr	r3, [pc, #16]	; (800a830 <LOG_toggleOnOff+0x30>)
 800a81e:	2201      	movs	r2, #1
 800a820:	701a      	strb	r2, [r3, #0]
    LOG_info("Turning LOG ON");
 800a822:	4905      	ldr	r1, [pc, #20]	; (800a838 <LOG_toggleOnOff+0x38>)
 800a824:	2001      	movs	r0, #1
 800a826:	f000 f849 	bl	800a8bc <LOG_log>
  return;
 800a82a:	bf00      	nop
}
 800a82c:	bd80      	pop	{r7, pc}
 800a82e:	bf00      	nop
 800a830:	2000052c 	.word	0x2000052c
 800a834:	08010c1c 	.word	0x08010c1c
 800a838:	08010c2c 	.word	0x08010c2c

0800a83c <LOG_setLevel>:

void LOG_setLevel(T_LOG_LEVEL p_level)
{
 800a83c:	b480      	push	{r7}
 800a83e:	b083      	sub	sp, #12
 800a840:	af00      	add	r7, sp, #0
 800a842:	4603      	mov	r3, r0
 800a844:	71fb      	strb	r3, [r7, #7]
  g_LOG_context.level = p_level;
 800a846:	4a04      	ldr	r2, [pc, #16]	; (800a858 <LOG_setLevel+0x1c>)
 800a848:	79fb      	ldrb	r3, [r7, #7]
 800a84a:	7053      	strb	r3, [r2, #1]

  return;
 800a84c:	bf00      	nop
}
 800a84e:	370c      	adds	r7, #12
 800a850:	46bd      	mov	sp, r7
 800a852:	bc80      	pop	{r7}
 800a854:	4770      	bx	lr
 800a856:	bf00      	nop
 800a858:	2000052c 	.word	0x2000052c

0800a85c <LOG_increaseLevel>:

void LOG_increaseLevel(void)
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	af00      	add	r7, sp, #0
  /* Display more detailed logs */
  if (g_LOG_context.level > LOG_LEVEL_DEBUG)
 800a860:	4b08      	ldr	r3, [pc, #32]	; (800a884 <LOG_increaseLevel+0x28>)
 800a862:	785b      	ldrb	r3, [r3, #1]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d00a      	beq.n	800a87e <LOG_increaseLevel+0x22>
  {
    LOG_info("Increasing LOG level");
 800a868:	4907      	ldr	r1, [pc, #28]	; (800a888 <LOG_increaseLevel+0x2c>)
 800a86a:	2001      	movs	r0, #1
 800a86c:	f000 f826 	bl	800a8bc <LOG_log>

    g_LOG_context.level--;
 800a870:	4b04      	ldr	r3, [pc, #16]	; (800a884 <LOG_increaseLevel+0x28>)
 800a872:	785b      	ldrb	r3, [r3, #1]
 800a874:	3b01      	subs	r3, #1
 800a876:	b2da      	uxtb	r2, r3
 800a878:	4b02      	ldr	r3, [pc, #8]	; (800a884 <LOG_increaseLevel+0x28>)
 800a87a:	705a      	strb	r2, [r3, #1]
  else
  {
    ; /* Nothing to do */
  }

  return;
 800a87c:	bf00      	nop
 800a87e:	bf00      	nop
}
 800a880:	bd80      	pop	{r7, pc}
 800a882:	bf00      	nop
 800a884:	2000052c 	.word	0x2000052c
 800a888:	08010c3c 	.word	0x08010c3c

0800a88c <LOG_decreaseLevel>:

void LOG_decreaseLevel(void)
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	af00      	add	r7, sp, #0
  /* Display less detailed logs */
  if (g_LOG_context.level < LOG_LEVEL_ERROR)
 800a890:	4b08      	ldr	r3, [pc, #32]	; (800a8b4 <LOG_decreaseLevel+0x28>)
 800a892:	785b      	ldrb	r3, [r3, #1]
 800a894:	2b02      	cmp	r3, #2
 800a896:	d80a      	bhi.n	800a8ae <LOG_decreaseLevel+0x22>
  {
    LOG_info("Decreasing LOG level");
 800a898:	4907      	ldr	r1, [pc, #28]	; (800a8b8 <LOG_decreaseLevel+0x2c>)
 800a89a:	2001      	movs	r0, #1
 800a89c:	f000 f80e 	bl	800a8bc <LOG_log>

    g_LOG_context.level++;
 800a8a0:	4b04      	ldr	r3, [pc, #16]	; (800a8b4 <LOG_decreaseLevel+0x28>)
 800a8a2:	785b      	ldrb	r3, [r3, #1]
 800a8a4:	3301      	adds	r3, #1
 800a8a6:	b2da      	uxtb	r2, r3
 800a8a8:	4b02      	ldr	r3, [pc, #8]	; (800a8b4 <LOG_decreaseLevel+0x28>)
 800a8aa:	705a      	strb	r2, [r3, #1]
  else
  {
    ; /* Nothing to do */
  }

  return;
 800a8ac:	bf00      	nop
 800a8ae:	bf00      	nop
}
 800a8b0:	bd80      	pop	{r7, pc}
 800a8b2:	bf00      	nop
 800a8b4:	2000052c 	.word	0x2000052c
 800a8b8:	08010c54 	.word	0x08010c54

0800a8bc <LOG_log>:

void LOG_log(T_LOG_LEVEL p_level, const char *p_format, ...)
{
 800a8bc:	b40e      	push	{r1, r2, r3}
 800a8be:	b590      	push	{r4, r7, lr}
 800a8c0:	b0a8      	sub	sp, #160	; 0xa0
 800a8c2:	af02      	add	r7, sp, #8
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef l_halReturnCode;
  va_list           l_argumentsList;
  RTC_TimeTypeDef   l_time;
  RTC_DateTypeDef   l_date;

  if ((g_LOG_context.isOn == true) && (p_level >= g_LOG_context.level))
 800a8c8:	4b3e      	ldr	r3, [pc, #248]	; (800a9c4 <LOG_log+0x108>)
 800a8ca:	781b      	ldrb	r3, [r3, #0]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d071      	beq.n	800a9b4 <LOG_log+0xf8>
 800a8d0:	4b3c      	ldr	r3, [pc, #240]	; (800a9c4 <LOG_log+0x108>)
 800a8d2:	785b      	ldrb	r3, [r3, #1]
 800a8d4:	79fa      	ldrb	r2, [r7, #7]
 800a8d6:	429a      	cmp	r2, r3
 800a8d8:	d36c      	bcc.n	800a9b4 <LOG_log+0xf8>
  {
    l_halReturnCode = HAL_RTC_GetTime(g_LOG_context.rtcHandle, &l_time, RTC_FORMAT_BCD);
 800a8da:	4b3a      	ldr	r3, [pc, #232]	; (800a9c4 <LOG_log+0x108>)
 800a8dc:	685b      	ldr	r3, [r3, #4]
 800a8de:	f107 010c 	add.w	r1, r7, #12
 800a8e2:	2201      	movs	r2, #1
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	f7fa fd5b 	bl	80053a0 <HAL_RTC_GetTime>
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

    if (l_halReturnCode != HAL_OK)
 800a8f0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d004      	beq.n	800a902 <LOG_log+0x46>
    {
      /* As this method is for logging/debug, just reset time in case of failure */
      UTI_resetRtcTime(&l_time);
 800a8f8:	f107 030c 	add.w	r3, r7, #12
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	f000 fd76 	bl	800b3ee <UTI_resetRtcTime>
    else
    {
      ; /* Nothing to do */
    }

    l_halReturnCode = HAL_RTC_GetDate(g_LOG_context.rtcHandle, &l_date, RTC_FORMAT_BCD);
 800a902:	4b30      	ldr	r3, [pc, #192]	; (800a9c4 <LOG_log+0x108>)
 800a904:	685b      	ldr	r3, [r3, #4]
 800a906:	f107 0108 	add.w	r1, r7, #8
 800a90a:	2201      	movs	r2, #1
 800a90c:	4618      	mov	r0, r3
 800a90e:	f7fa ff4b 	bl	80057a8 <HAL_RTC_GetDate>
 800a912:	4603      	mov	r3, r0
 800a914:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

    if (l_halReturnCode != HAL_OK)
 800a918:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d004      	beq.n	800a92a <LOG_log+0x6e>
    {
      /* As this method is for logging/debug, just reset date in case of failure */
      UTI_resetRtcDate(&l_date);
 800a920:	f107 0308 	add.w	r3, r7, #8
 800a924:	4618      	mov	r0, r3
 800a926:	f000 fd4d 	bl	800b3c4 <UTI_resetRtcDate>
    else
    {
      ; /* Nothing to do */
    }

    va_start(l_argumentsList, p_format);
 800a92a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800a92e:	613b      	str	r3, [r7, #16]

    (void)sprintf  ( l_buffer, "%-7s - %02x:%02x:%02x - ", g_LOG_levelStrings[p_level], l_time.Hours, l_time.Minutes, l_time.Seconds);
 800a930:	79fb      	ldrb	r3, [r7, #7]
 800a932:	4a25      	ldr	r2, [pc, #148]	; (800a9c8 <LOG_log+0x10c>)
 800a934:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a938:	7b3b      	ldrb	r3, [r7, #12]
 800a93a:	461c      	mov	r4, r3
 800a93c:	7b7b      	ldrb	r3, [r7, #13]
 800a93e:	7bb9      	ldrb	r1, [r7, #14]
 800a940:	f107 0014 	add.w	r0, r7, #20
 800a944:	9101      	str	r1, [sp, #4]
 800a946:	9300      	str	r3, [sp, #0]
 800a948:	4623      	mov	r3, r4
 800a94a:	4920      	ldr	r1, [pc, #128]	; (800a9cc <LOG_log+0x110>)
 800a94c:	f001 fd3a 	bl	800c3c4 <siprintf>
    /* 21 is the length of string "%-7s - %02x:%02x:%02x - ". 2 is the length of string "\r\n". */
    /* So we start and write format right after the former and we keep space for the latter.    */
    (void)vsnprintf(&l_buffer[21], CST_CONSOLE_TX_MAX_STRING_LENGTH - 21 - 2, p_format, l_argumentsList);
 800a950:	f107 0314 	add.w	r3, r7, #20
 800a954:	f103 0015 	add.w	r0, r3, #21
 800a958:	693b      	ldr	r3, [r7, #16]
 800a95a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800a95e:	2169      	movs	r1, #105	; 0x69
 800a960:	f002 fc4e 	bl	800d200 <vsniprintf>
    (void)strcat   ( l_buffer    , "\r\n");
 800a964:	f107 0314 	add.w	r3, r7, #20
 800a968:	4618      	mov	r0, r3
 800a96a:	f7f5 fc5d 	bl	8000228 <strlen>
 800a96e:	4603      	mov	r3, r0
 800a970:	461a      	mov	r2, r3
 800a972:	f107 0314 	add.w	r3, r7, #20
 800a976:	4413      	add	r3, r2
 800a978:	4a15      	ldr	r2, [pc, #84]	; (800a9d0 <LOG_log+0x114>)
 800a97a:	8811      	ldrh	r1, [r2, #0]
 800a97c:	7892      	ldrb	r2, [r2, #2]
 800a97e:	8019      	strh	r1, [r3, #0]
 800a980:	709a      	strb	r2, [r3, #2]

    /* -1 is there to consider the end/null character, which strnlen() does not count */
    if (strnlen(l_buffer, CST_CONSOLE_TX_MAX_STRING_LENGTH) == CST_CONSOLE_TX_MAX_STRING_LENGTH - 1)
 800a982:	f107 0314 	add.w	r3, r7, #20
 800a986:	2180      	movs	r1, #128	; 0x80
 800a988:	4618      	mov	r0, r3
 800a98a:	f001 fd4e 	bl	800c42a <strnlen>
 800a98e:	4603      	mov	r3, r0
 800a990:	2b7f      	cmp	r3, #127	; 0x7f
 800a992:	d108      	bne.n	800a9a6 <LOG_log+0xea>
    {
      /* At -1, we got the end/null character. At -2 & 3, we got "\r\n". */
      l_buffer[CST_CONSOLE_TX_MAX_STRING_LENGTH - 4] = '.';
 800a994:	232e      	movs	r3, #46	; 0x2e
 800a996:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
      l_buffer[CST_CONSOLE_TX_MAX_STRING_LENGTH - 5] = '.';
 800a99a:	232e      	movs	r3, #46	; 0x2e
 800a99c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
      l_buffer[CST_CONSOLE_TX_MAX_STRING_LENGTH - 6] = '.';
 800a9a0:	232e      	movs	r3, #46	; 0x2e
 800a9a2:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
    else
    {
      ; /* Nothing to do */
    }

    (void)printf("%s", l_buffer);
 800a9a6:	f107 0314 	add.w	r3, r7, #20
 800a9aa:	4619      	mov	r1, r3
 800a9ac:	4809      	ldr	r0, [pc, #36]	; (800a9d4 <LOG_log+0x118>)
 800a9ae:	f001 fcad 	bl	800c30c <iprintf>
  else
  {
    ; /* Nothing to do */
  }

  return;
 800a9b2:	bf00      	nop
 800a9b4:	bf00      	nop
}
 800a9b6:	3798      	adds	r7, #152	; 0x98
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800a9be:	b003      	add	sp, #12
 800a9c0:	4770      	bx	lr
 800a9c2:	bf00      	nop
 800a9c4:	2000052c 	.word	0x2000052c
 800a9c8:	2000000c 	.word	0x2000000c
 800a9cc:	08010c6c 	.word	0x08010c6c
 800a9d0:	08010c88 	.word	0x08010c88
 800a9d4:	08010c8c 	.word	0x08010c8c

0800a9d8 <MAS_init>:
} T_MAS_Context;

static T_MAS_Context g_MAS_context;

void MAS_init(UART_HandleTypeDef *p_uartHandle)
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b082      	sub	sp, #8
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
  LOG_info("Initializing master connection");
 800a9e0:	490d      	ldr	r1, [pc, #52]	; (800aa18 <MAS_init+0x40>)
 800a9e2:	2001      	movs	r0, #1
 800a9e4:	f7ff ff6a 	bl	800a8bc <LOG_log>

  g_MAS_context.uartHandle     = p_uartHandle;
 800a9e8:	4a0c      	ldr	r2, [pc, #48]	; (800aa1c <MAS_init+0x44>)
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	6013      	str	r3, [r2, #0]
  g_MAS_context.dataSize       = 0;
 800a9ee:	4b0b      	ldr	r3, [pc, #44]	; (800aa1c <MAS_init+0x44>)
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	619a      	str	r2, [r3, #24]
  g_MAS_context.isDataComplete = false;
 800a9f4:	4b09      	ldr	r3, [pc, #36]	; (800aa1c <MAS_init+0x44>)
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	771a      	strb	r2, [r3, #28]

  SFO_initData(&g_MAS_context.data);
 800a9fa:	4809      	ldr	r0, [pc, #36]	; (800aa20 <MAS_init+0x48>)
 800a9fc:	f000 fba6 	bl	800b14c <SFO_initData>

  HAL_UART_Receive_IT(g_MAS_context.uartHandle, &g_MAS_context.datum, 1);
 800aa00:	4b06      	ldr	r3, [pc, #24]	; (800aa1c <MAS_init+0x44>)
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	2201      	movs	r2, #1
 800aa06:	4907      	ldr	r1, [pc, #28]	; (800aa24 <MAS_init+0x4c>)
 800aa08:	4618      	mov	r0, r3
 800aa0a:	f7fd fd73 	bl	80084f4 <HAL_UART_Receive_IT>

  return;
 800aa0e:	bf00      	nop
}
 800aa10:	3708      	adds	r7, #8
 800aa12:	46bd      	mov	sp, r7
 800aa14:	bd80      	pop	{r7, pc}
 800aa16:	bf00      	nop
 800aa18:	08010c90 	.word	0x08010c90
 800aa1c:	20000534 	.word	0x20000534
 800aa20:	20000539 	.word	0x20000539
 800aa24:	20000538 	.word	0x20000538

0800aa28 <MAS_receiveData>:

void MAS_receiveData(void)
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	af00      	add	r7, sp, #0
  /* If previous command was not processed yet, drop datum, */
  /* which will lead to an error, showing a design issue... */
  if (g_MAS_context.isDataComplete == true)
 800aa2c:	4b10      	ldr	r3, [pc, #64]	; (800aa70 <MAS_receiveData+0x48>)
 800aa2e:	7f1b      	ldrb	r3, [r3, #28]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d114      	bne.n	800aa5e <MAS_receiveData+0x36>
  {
    ; /* Nothing to do */
  }
  else
  {
    if (g_MAS_context.datum == '\r')
 800aa34:	4b0e      	ldr	r3, [pc, #56]	; (800aa70 <MAS_receiveData+0x48>)
 800aa36:	791b      	ldrb	r3, [r3, #4]
 800aa38:	2b0d      	cmp	r3, #13
 800aa3a:	d103      	bne.n	800aa44 <MAS_receiveData+0x1c>
    {
      g_MAS_context.isDataComplete = true;
 800aa3c:	4b0c      	ldr	r3, [pc, #48]	; (800aa70 <MAS_receiveData+0x48>)
 800aa3e:	2201      	movs	r2, #1
 800aa40:	771a      	strb	r2, [r3, #28]
 800aa42:	e00c      	b.n	800aa5e <MAS_receiveData+0x36>
    }
    else
    {
      g_MAS_context.data[g_MAS_context.dataSize] = g_MAS_context.datum;
 800aa44:	4b0a      	ldr	r3, [pc, #40]	; (800aa70 <MAS_receiveData+0x48>)
 800aa46:	699b      	ldr	r3, [r3, #24]
 800aa48:	4a09      	ldr	r2, [pc, #36]	; (800aa70 <MAS_receiveData+0x48>)
 800aa4a:	7911      	ldrb	r1, [r2, #4]
 800aa4c:	4a08      	ldr	r2, [pc, #32]	; (800aa70 <MAS_receiveData+0x48>)
 800aa4e:	4413      	add	r3, r2
 800aa50:	460a      	mov	r2, r1
 800aa52:	715a      	strb	r2, [r3, #5]
      g_MAS_context.dataSize++;
 800aa54:	4b06      	ldr	r3, [pc, #24]	; (800aa70 <MAS_receiveData+0x48>)
 800aa56:	699b      	ldr	r3, [r3, #24]
 800aa58:	3301      	adds	r3, #1
 800aa5a:	4a05      	ldr	r2, [pc, #20]	; (800aa70 <MAS_receiveData+0x48>)
 800aa5c:	6193      	str	r3, [r2, #24]
    }
  }

  HAL_UART_Receive_IT(g_MAS_context.uartHandle, &g_MAS_context.datum, 1);
 800aa5e:	4b04      	ldr	r3, [pc, #16]	; (800aa70 <MAS_receiveData+0x48>)
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	2201      	movs	r2, #1
 800aa64:	4903      	ldr	r1, [pc, #12]	; (800aa74 <MAS_receiveData+0x4c>)
 800aa66:	4618      	mov	r0, r3
 800aa68:	f7fd fd44 	bl	80084f4 <HAL_UART_Receive_IT>

  return;
 800aa6c:	bf00      	nop
}
 800aa6e:	bd80      	pop	{r7, pc}
 800aa70:	20000534 	.word	0x20000534
 800aa74:	20000538 	.word	0x20000538

0800aa78 <MAS_updateFifo>:

void MAS_updateFifo(T_SFO_Handle *p_fifo)
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b082      	sub	sp, #8
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
  if (g_MAS_context.isDataComplete == false)
 800aa80:	4b0c      	ldr	r3, [pc, #48]	; (800aab4 <MAS_updateFifo+0x3c>)
 800aa82:	7f1b      	ldrb	r3, [r3, #28]
 800aa84:	f083 0301 	eor.w	r3, r3, #1
 800aa88:	b2db      	uxtb	r3, r3
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d10d      	bne.n	800aaaa <MAS_updateFifo+0x32>
  {
    ; /* Nothing to do */
  }
  else
  {
    SFO_push    (p_fifo, &g_MAS_context.data);
 800aa8e:	490a      	ldr	r1, [pc, #40]	; (800aab8 <MAS_updateFifo+0x40>)
 800aa90:	6878      	ldr	r0, [r7, #4]
 800aa92:	f000 fb81 	bl	800b198 <SFO_push>
    SFO_initData(        &g_MAS_context.data );
 800aa96:	4808      	ldr	r0, [pc, #32]	; (800aab8 <MAS_updateFifo+0x40>)
 800aa98:	f000 fb58 	bl	800b14c <SFO_initData>

    g_MAS_context.dataSize       = 0;
 800aa9c:	4b05      	ldr	r3, [pc, #20]	; (800aab4 <MAS_updateFifo+0x3c>)
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	619a      	str	r2, [r3, #24]
    g_MAS_context.isDataComplete = false;
 800aaa2:	4b04      	ldr	r3, [pc, #16]	; (800aab4 <MAS_updateFifo+0x3c>)
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	771a      	strb	r2, [r3, #28]
  }

  return;
 800aaa8:	bf00      	nop
 800aaaa:	bf00      	nop
}
 800aaac:	3708      	adds	r7, #8
 800aaae:	46bd      	mov	sp, r7
 800aab0:	bd80      	pop	{r7, pc}
 800aab2:	bf00      	nop
 800aab4:	20000534 	.word	0x20000534
 800aab8:	20000539 	.word	0x20000539

0800aabc <MAS_sendString>:

void MAS_sendString(char *p_string, uint32_t p_length)
{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	b082      	sub	sp, #8
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
 800aac4:	6039      	str	r1, [r7, #0]
  /* As this method is using for logging/debug, we will not deal with failure cases */
 (void)HAL_UART_Transmit(g_MAS_context.uartHandle,
 800aac6:	4b06      	ldr	r3, [pc, #24]	; (800aae0 <MAS_sendString+0x24>)
 800aac8:	6818      	ldr	r0, [r3, #0]
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	b29a      	uxth	r2, r3
 800aace:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800aad2:	6879      	ldr	r1, [r7, #4]
 800aad4:	f7fd fc7c 	bl	80083d0 <HAL_UART_Transmit>
              (uint8_t *)p_string,
                         p_length,
                         CST_UART_TRANSMIT_TIMEOUT_IN_MS);

  return;
 800aad8:	bf00      	nop
}
 800aada:	3708      	adds	r7, #8
 800aadc:	46bd      	mov	sp, r7
 800aade:	bd80      	pop	{r7, pc}
 800aae0:	20000534 	.word	0x20000534

0800aae4 <MTR_init>:
              uint32_t           p_dirPin1,
              GPIO_TypeDef      *p_dirPin2Port,
              uint32_t           p_dirPin2,
              TIM_HandleTypeDef *p_pwmTimerHandle,
              uint32_t           p_pwmChannel)
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b084      	sub	sp, #16
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	60f8      	str	r0, [r7, #12]
 800aaec:	60b9      	str	r1, [r7, #8]
 800aaee:	607a      	str	r2, [r7, #4]
 800aaf0:	603b      	str	r3, [r7, #0]
  LOG_info("Initializing Motor module for %s", p_name);
 800aaf2:	68ba      	ldr	r2, [r7, #8]
 800aaf4:	4912      	ldr	r1, [pc, #72]	; (800ab40 <MTR_init+0x5c>)
 800aaf6:	2001      	movs	r0, #1
 800aaf8:	f7ff fee0 	bl	800a8bc <LOG_log>

  p_handle->name           = p_name;
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	68ba      	ldr	r2, [r7, #8]
 800ab00:	601a      	str	r2, [r3, #0]
  p_handle->dirPin1Port    = p_dirPin1Port;
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	687a      	ldr	r2, [r7, #4]
 800ab06:	605a      	str	r2, [r3, #4]
  p_handle->dirPin1        = p_dirPin1;
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	683a      	ldr	r2, [r7, #0]
 800ab0c:	609a      	str	r2, [r3, #8]
  p_handle->dirPin2Port    = p_dirPin2Port;
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	69ba      	ldr	r2, [r7, #24]
 800ab12:	60da      	str	r2, [r3, #12]
  p_handle->dirPin2        = p_dirPin2;
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	69fa      	ldr	r2, [r7, #28]
 800ab18:	611a      	str	r2, [r3, #16]
  p_handle->pwmTimerHandle = p_pwmTimerHandle;
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	6a3a      	ldr	r2, [r7, #32]
 800ab1e:	61da      	str	r2, [r3, #28]
  p_handle->pwmChannel     = p_pwmChannel;
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab24:	621a      	str	r2, [r3, #32]

  MTR_setDirection(p_handle, MTR_DIRECTION_STOP);
 800ab26:	2100      	movs	r1, #0
 800ab28:	68f8      	ldr	r0, [r7, #12]
 800ab2a:	f000 f80b 	bl	800ab44 <MTR_setDirection>
  MTR_setSpeed    (p_handle, 0                 );
 800ab2e:	2100      	movs	r1, #0
 800ab30:	68f8      	ldr	r0, [r7, #12]
 800ab32:	f000 f87f 	bl	800ac34 <MTR_setSpeed>

  return;
 800ab36:	bf00      	nop
}
 800ab38:	3710      	adds	r7, #16
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	bd80      	pop	{r7, pc}
 800ab3e:	bf00      	nop
 800ab40:	08010cb0 	.word	0x08010cb0

0800ab44 <MTR_setDirection>:

void MTR_setDirection(T_MTR_Handle *p_handle, T_MTR_DIRECTION p_direction)
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b082      	sub	sp, #8
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
 800ab4c:	460b      	mov	r3, r1
 800ab4e:	70fb      	strb	r3, [r7, #3]
  if (p_direction == p_handle->direction)
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	7d1b      	ldrb	r3, [r3, #20]
 800ab54:	78fa      	ldrb	r2, [r7, #3]
 800ab56:	429a      	cmp	r2, r3
 800ab58:	d056      	beq.n	800ac08 <MTR_setDirection+0xc4>
  {
    ; /* Nothing to do */
  }
  else
  {
    if (p_direction == MTR_DIRECTION_STOP)
 800ab5a:	78fb      	ldrb	r3, [r7, #3]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d119      	bne.n	800ab94 <MTR_setDirection+0x50>
    {
      LOG_debug("%s motor STOP", p_handle->name);
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	461a      	mov	r2, r3
 800ab66:	492a      	ldr	r1, [pc, #168]	; (800ac10 <MTR_setDirection+0xcc>)
 800ab68:	2000      	movs	r0, #0
 800ab6a:	f7ff fea7 	bl	800a8bc <LOG_log>

      HAL_GPIO_WritePin(p_handle->dirPin1Port, p_handle->dirPin1, GPIO_PIN_RESET);
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	6858      	ldr	r0, [r3, #4]
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	689b      	ldr	r3, [r3, #8]
 800ab76:	b29b      	uxth	r3, r3
 800ab78:	2200      	movs	r2, #0
 800ab7a:	4619      	mov	r1, r3
 800ab7c:	f7f9 fa2e 	bl	8003fdc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(p_handle->dirPin2Port, p_handle->dirPin2, GPIO_PIN_RESET);
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	68d8      	ldr	r0, [r3, #12]
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	691b      	ldr	r3, [r3, #16]
 800ab88:	b29b      	uxth	r3, r3
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	4619      	mov	r1, r3
 800ab8e:	f7f9 fa25 	bl	8003fdc <HAL_GPIO_WritePin>
 800ab92:	e035      	b.n	800ac00 <MTR_setDirection+0xbc>
    }
    else if (p_direction == MTR_DIRECTION_FORWARD)
 800ab94:	78fb      	ldrb	r3, [r7, #3]
 800ab96:	2b01      	cmp	r3, #1
 800ab98:	d119      	bne.n	800abce <MTR_setDirection+0x8a>
    {
      LOG_debug("%s motor go FORWARD", p_handle->name);
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	461a      	mov	r2, r3
 800aba0:	491c      	ldr	r1, [pc, #112]	; (800ac14 <MTR_setDirection+0xd0>)
 800aba2:	2000      	movs	r0, #0
 800aba4:	f7ff fe8a 	bl	800a8bc <LOG_log>

      HAL_GPIO_WritePin(p_handle->dirPin1Port, p_handle->dirPin1, GPIO_PIN_SET  );
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	6858      	ldr	r0, [r3, #4]
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	689b      	ldr	r3, [r3, #8]
 800abb0:	b29b      	uxth	r3, r3
 800abb2:	2201      	movs	r2, #1
 800abb4:	4619      	mov	r1, r3
 800abb6:	f7f9 fa11 	bl	8003fdc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(p_handle->dirPin2Port, p_handle->dirPin2, GPIO_PIN_RESET);
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	68d8      	ldr	r0, [r3, #12]
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	691b      	ldr	r3, [r3, #16]
 800abc2:	b29b      	uxth	r3, r3
 800abc4:	2200      	movs	r2, #0
 800abc6:	4619      	mov	r1, r3
 800abc8:	f7f9 fa08 	bl	8003fdc <HAL_GPIO_WritePin>
 800abcc:	e018      	b.n	800ac00 <MTR_setDirection+0xbc>
    }
    else
    {
      LOG_debug("%s motor go BACKWARD", p_handle->name);
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	461a      	mov	r2, r3
 800abd4:	4910      	ldr	r1, [pc, #64]	; (800ac18 <MTR_setDirection+0xd4>)
 800abd6:	2000      	movs	r0, #0
 800abd8:	f7ff fe70 	bl	800a8bc <LOG_log>

      HAL_GPIO_WritePin(p_handle->dirPin1Port, p_handle->dirPin1, GPIO_PIN_RESET);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	6858      	ldr	r0, [r3, #4]
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	689b      	ldr	r3, [r3, #8]
 800abe4:	b29b      	uxth	r3, r3
 800abe6:	2200      	movs	r2, #0
 800abe8:	4619      	mov	r1, r3
 800abea:	f7f9 f9f7 	bl	8003fdc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(p_handle->dirPin2Port, p_handle->dirPin2, GPIO_PIN_SET  );
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	68d8      	ldr	r0, [r3, #12]
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	691b      	ldr	r3, [r3, #16]
 800abf6:	b29b      	uxth	r3, r3
 800abf8:	2201      	movs	r2, #1
 800abfa:	4619      	mov	r1, r3
 800abfc:	f7f9 f9ee 	bl	8003fdc <HAL_GPIO_WritePin>
    }

    p_handle->direction = p_direction;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	78fa      	ldrb	r2, [r7, #3]
 800ac04:	751a      	strb	r2, [r3, #20]
  }

  return;
 800ac06:	bf00      	nop
 800ac08:	bf00      	nop
}
 800ac0a:	3708      	adds	r7, #8
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	bd80      	pop	{r7, pc}
 800ac10:	08010cd4 	.word	0x08010cd4
 800ac14:	08010ce4 	.word	0x08010ce4
 800ac18:	08010cf8 	.word	0x08010cf8

0800ac1c <MTR_getDirection>:

T_MTR_DIRECTION MTR_getDirection(T_MTR_Handle *p_handle)
{
 800ac1c:	b480      	push	{r7}
 800ac1e:	b083      	sub	sp, #12
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
  return p_handle->direction;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	7d1b      	ldrb	r3, [r3, #20]
}
 800ac28:	4618      	mov	r0, r3
 800ac2a:	370c      	adds	r7, #12
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	bc80      	pop	{r7}
 800ac30:	4770      	bx	lr
	...

0800ac34 <MTR_setSpeed>:

void MTR_setSpeed(T_MTR_Handle *p_handle, uint32_t p_speed)
{
 800ac34:	b580      	push	{r7, lr}
 800ac36:	b082      	sub	sp, #8
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	6078      	str	r0, [r7, #4]
 800ac3c:	6039      	str	r1, [r7, #0]
  if (p_speed == p_handle->speed)
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	699b      	ldr	r3, [r3, #24]
 800ac42:	683a      	ldr	r2, [r7, #0]
 800ac44:	429a      	cmp	r2, r3
 800ac46:	d02d      	beq.n	800aca4 <MTR_setSpeed+0x70>
  {
    ; /* Nothing to do */
  }
  else
  {
    LOG_debug("Setting  %s motor speed to %u", p_handle->name, p_speed);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681a      	ldr	r2, [r3, #0]
 800ac4c:	683b      	ldr	r3, [r7, #0]
 800ac4e:	4917      	ldr	r1, [pc, #92]	; (800acac <MTR_setSpeed+0x78>)
 800ac50:	2000      	movs	r0, #0
 800ac52:	f7ff fe33 	bl	800a8bc <LOG_log>

    __HAL_TIM_SET_COMPARE(p_handle->pwmTimerHandle, p_handle->pwmChannel, p_speed);
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	6a1b      	ldr	r3, [r3, #32]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d105      	bne.n	800ac6a <MTR_setSpeed+0x36>
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	69db      	ldr	r3, [r3, #28]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	683a      	ldr	r2, [r7, #0]
 800ac66:	635a      	str	r2, [r3, #52]	; 0x34
 800ac68:	e018      	b.n	800ac9c <MTR_setSpeed+0x68>
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	6a1b      	ldr	r3, [r3, #32]
 800ac6e:	2b04      	cmp	r3, #4
 800ac70:	d105      	bne.n	800ac7e <MTR_setSpeed+0x4a>
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	69db      	ldr	r3, [r3, #28]
 800ac76:	681a      	ldr	r2, [r3, #0]
 800ac78:	683b      	ldr	r3, [r7, #0]
 800ac7a:	6393      	str	r3, [r2, #56]	; 0x38
 800ac7c:	e00e      	b.n	800ac9c <MTR_setSpeed+0x68>
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	6a1b      	ldr	r3, [r3, #32]
 800ac82:	2b08      	cmp	r3, #8
 800ac84:	d105      	bne.n	800ac92 <MTR_setSpeed+0x5e>
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	69db      	ldr	r3, [r3, #28]
 800ac8a:	681a      	ldr	r2, [r3, #0]
 800ac8c:	683b      	ldr	r3, [r7, #0]
 800ac8e:	63d3      	str	r3, [r2, #60]	; 0x3c
 800ac90:	e004      	b.n	800ac9c <MTR_setSpeed+0x68>
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	69db      	ldr	r3, [r3, #28]
 800ac96:	681a      	ldr	r2, [r3, #0]
 800ac98:	683b      	ldr	r3, [r7, #0]
 800ac9a:	6413      	str	r3, [r2, #64]	; 0x40

    p_handle->speed = p_speed;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	683a      	ldr	r2, [r7, #0]
 800aca0:	619a      	str	r2, [r3, #24]
  }

  return;
 800aca2:	bf00      	nop
 800aca4:	bf00      	nop
}
 800aca6:	3708      	adds	r7, #8
 800aca8:	46bd      	mov	sp, r7
 800acaa:	bd80      	pop	{r7, pc}
 800acac:	08010d10 	.word	0x08010d10

0800acb0 <MTR_getSpeed>:

uint32_t MTR_getSpeed(T_MTR_Handle *p_handle)
{
 800acb0:	b480      	push	{r7}
 800acb2:	b083      	sub	sp, #12
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
  return p_handle->speed;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	699b      	ldr	r3, [r3, #24]
}
 800acbc:	4618      	mov	r0, r3
 800acbe:	370c      	adds	r7, #12
 800acc0:	46bd      	mov	sp, r7
 800acc2:	bc80      	pop	{r7}
 800acc4:	4770      	bx	lr
	...

0800acc8 <PID_init>:
               float         p_kd,
               float         p_targetValue,
               float         p_minValue,
               float         p_maxValue,
               float         p_antiWindUpFactor)
{
 800acc8:	b590      	push	{r4, r7, lr}
 800acca:	b085      	sub	sp, #20
 800accc:	af00      	add	r7, sp, #0
 800acce:	60f8      	str	r0, [r7, #12]
 800acd0:	60b9      	str	r1, [r7, #8]
 800acd2:	607a      	str	r2, [r7, #4]
 800acd4:	603b      	str	r3, [r7, #0]
  LOG_info("Initializing PID module for %s", p_name);
 800acd6:	68ba      	ldr	r2, [r7, #8]
 800acd8:	492d      	ldr	r1, [pc, #180]	; (800ad90 <PID_init+0xc8>)
 800acda:	2001      	movs	r0, #1
 800acdc:	f7ff fdee 	bl	800a8bc <LOG_log>

  p_handle->name            = p_name;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	68ba      	ldr	r2, [r7, #8]
 800ace4:	601a      	str	r2, [r3, #0]
  p_handle->kp              = p_kp;
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	687a      	ldr	r2, [r7, #4]
 800acea:	605a      	str	r2, [r3, #4]
  p_handle->ki              = p_ki;
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	683a      	ldr	r2, [r7, #0]
 800acf0:	609a      	str	r2, [r3, #8]
  p_handle->kd              = p_kd;
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	6a3a      	ldr	r2, [r7, #32]
 800acf6:	60da      	str	r2, [r3, #12]
  p_handle->targetValue     = p_targetValue;
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800acfc:	611a      	str	r2, [r3, #16]
  p_handle->minValue        = p_minValue;
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad02:	615a      	str	r2, [r3, #20]
  p_handle->maxValue        = p_maxValue;
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ad08:	619a      	str	r2, [r3, #24]
  p_handle->antiWindUpValue = p_antiWindUpFactor * UTI_MAX(abs(p_handle->minValue), abs(p_handle->maxValue));
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	695b      	ldr	r3, [r3, #20]
 800ad0e:	4618      	mov	r0, r3
 800ad10:	f7f6 f9f4 	bl	80010fc <__aeabi_f2iz>
 800ad14:	4603      	mov	r3, r0
 800ad16:	ea83 74e3 	eor.w	r4, r3, r3, asr #31
 800ad1a:	eba4 74e3 	sub.w	r4, r4, r3, asr #31
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	699b      	ldr	r3, [r3, #24]
 800ad22:	4618      	mov	r0, r3
 800ad24:	f7f6 f9ea 	bl	80010fc <__aeabi_f2iz>
 800ad28:	4603      	mov	r3, r0
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	bfb8      	it	lt
 800ad2e:	425b      	neglt	r3, r3
 800ad30:	429c      	cmp	r4, r3
 800ad32:	dd0d      	ble.n	800ad50 <PID_init+0x88>
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	695b      	ldr	r3, [r3, #20]
 800ad38:	4618      	mov	r0, r3
 800ad3a:	f7f6 f9df 	bl	80010fc <__aeabi_f2iz>
 800ad3e:	4603      	mov	r3, r0
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	bfb8      	it	lt
 800ad44:	425b      	neglt	r3, r3
 800ad46:	4618      	mov	r0, r3
 800ad48:	f7f6 f834 	bl	8000db4 <__aeabi_i2f>
 800ad4c:	4603      	mov	r3, r0
 800ad4e:	e00c      	b.n	800ad6a <PID_init+0xa2>
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	699b      	ldr	r3, [r3, #24]
 800ad54:	4618      	mov	r0, r3
 800ad56:	f7f6 f9d1 	bl	80010fc <__aeabi_f2iz>
 800ad5a:	4603      	mov	r3, r0
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	bfb8      	it	lt
 800ad60:	425b      	neglt	r3, r3
 800ad62:	4618      	mov	r0, r3
 800ad64:	f7f6 f826 	bl	8000db4 <__aeabi_i2f>
 800ad68:	4603      	mov	r3, r0
 800ad6a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	f7f6 f875 	bl	8000e5c <__aeabi_fmul>
 800ad72:	4603      	mov	r3, r0
 800ad74:	461a      	mov	r2, r3
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	61da      	str	r2, [r3, #28]

  PID_reset  (p_handle       );
 800ad7a:	68f8      	ldr	r0, [r7, #12]
 800ad7c:	f000 f80a 	bl	800ad94 <PID_reset>
  PID_logInfo(p_handle, false);
 800ad80:	2100      	movs	r1, #0
 800ad82:	68f8      	ldr	r0, [r7, #12]
 800ad84:	f000 f912 	bl	800afac <PID_logInfo>

  return;
 800ad88:	bf00      	nop
}
 800ad8a:	3714      	adds	r7, #20
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	bd90      	pop	{r4, r7, pc}
 800ad90:	08010dc4 	.word	0x08010dc4

0800ad94 <PID_reset>:

void PID_reset(T_PID_Handle *p_handle)
{
 800ad94:	b480      	push	{r7}
 800ad96:	b083      	sub	sp, #12
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
  p_handle->pValue        = 0.0f;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	f04f 0200 	mov.w	r2, #0
 800ada2:	621a      	str	r2, [r3, #32]
  p_handle->iValue        = 0.0f;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	f04f 0200 	mov.w	r2, #0
 800adaa:	625a      	str	r2, [r3, #36]	; 0x24
  p_handle->dValue        = 0.0f;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	f04f 0200 	mov.w	r2, #0
 800adb2:	629a      	str	r2, [r3, #40]	; 0x28
  p_handle->computedValue = 0.0f;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	f04f 0200 	mov.w	r2, #0
 800adba:	62da      	str	r2, [r3, #44]	; 0x2c
  p_handle->lastError     = 0.0f;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	f04f 0200 	mov.w	r2, #0
 800adc2:	631a      	str	r2, [r3, #48]	; 0x30

  return;
 800adc4:	bf00      	nop
}
 800adc6:	370c      	adds	r7, #12
 800adc8:	46bd      	mov	sp, r7
 800adca:	bc80      	pop	{r7}
 800adcc:	4770      	bx	lr

0800adce <PID_setKp>:

void PID_setKp(T_PID_Handle *p_handle, float p_kp)
{
 800adce:	b480      	push	{r7}
 800add0:	b083      	sub	sp, #12
 800add2:	af00      	add	r7, sp, #0
 800add4:	6078      	str	r0, [r7, #4]
 800add6:	6039      	str	r1, [r7, #0]
  p_handle->kp = p_kp;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	683a      	ldr	r2, [r7, #0]
 800addc:	605a      	str	r2, [r3, #4]

  return;
 800adde:	bf00      	nop
}
 800ade0:	370c      	adds	r7, #12
 800ade2:	46bd      	mov	sp, r7
 800ade4:	bc80      	pop	{r7}
 800ade6:	4770      	bx	lr

0800ade8 <PID_setKi>:

void PID_setKi(T_PID_Handle *p_handle, float p_ki)
{
 800ade8:	b480      	push	{r7}
 800adea:	b083      	sub	sp, #12
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
 800adf0:	6039      	str	r1, [r7, #0]
  p_handle->ki = p_ki;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	683a      	ldr	r2, [r7, #0]
 800adf6:	609a      	str	r2, [r3, #8]

  return;
 800adf8:	bf00      	nop
}
 800adfa:	370c      	adds	r7, #12
 800adfc:	46bd      	mov	sp, r7
 800adfe:	bc80      	pop	{r7}
 800ae00:	4770      	bx	lr

0800ae02 <PID_setKd>:

void PID_setKd(T_PID_Handle *p_handle, float p_kd)
{
 800ae02:	b480      	push	{r7}
 800ae04:	b083      	sub	sp, #12
 800ae06:	af00      	add	r7, sp, #0
 800ae08:	6078      	str	r0, [r7, #4]
 800ae0a:	6039      	str	r1, [r7, #0]
  p_handle->kd = p_kd;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	683a      	ldr	r2, [r7, #0]
 800ae10:	60da      	str	r2, [r3, #12]

  return;
 800ae12:	bf00      	nop
}
 800ae14:	370c      	adds	r7, #12
 800ae16:	46bd      	mov	sp, r7
 800ae18:	bc80      	pop	{r7}
 800ae1a:	4770      	bx	lr

0800ae1c <PID_setTargetValue>:

void PID_setTargetValue(T_PID_Handle *p_handle, float p_targetValue)
{
 800ae1c:	b480      	push	{r7}
 800ae1e:	b083      	sub	sp, #12
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
 800ae24:	6039      	str	r1, [r7, #0]
  p_handle->targetValue = p_targetValue;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	683a      	ldr	r2, [r7, #0]
 800ae2a:	611a      	str	r2, [r3, #16]

  return;
 800ae2c:	bf00      	nop
}
 800ae2e:	370c      	adds	r7, #12
 800ae30:	46bd      	mov	sp, r7
 800ae32:	bc80      	pop	{r7}
 800ae34:	4770      	bx	lr

0800ae36 <PID_update>:
{
  return p_handle->antiWindUpValue;
}

float PID_update(T_PID_Handle *p_handle, float p_currentValue, uint32_t p_timeDelta)
{
 800ae36:	b5b0      	push	{r4, r5, r7, lr}
 800ae38:	b088      	sub	sp, #32
 800ae3a:	af02      	add	r7, sp, #8
 800ae3c:	60f8      	str	r0, [r7, #12]
 800ae3e:	60b9      	str	r1, [r7, #8]
 800ae40:	607a      	str	r2, [r7, #4]
  int32_t l_currentError;

  l_currentError = p_handle->targetValue - p_currentValue;
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	691b      	ldr	r3, [r3, #16]
 800ae46:	68b9      	ldr	r1, [r7, #8]
 800ae48:	4618      	mov	r0, r3
 800ae4a:	f7f5 fefd 	bl	8000c48 <__aeabi_fsub>
 800ae4e:	4603      	mov	r3, r0
 800ae50:	4618      	mov	r0, r3
 800ae52:	f7f6 f953 	bl	80010fc <__aeabi_f2iz>
 800ae56:	4603      	mov	r3, r0
 800ae58:	617b      	str	r3, [r7, #20]

  p_handle->pValue    =  l_currentError;
 800ae5a:	6978      	ldr	r0, [r7, #20]
 800ae5c:	f7f5 ffaa 	bl	8000db4 <__aeabi_i2f>
 800ae60:	4602      	mov	r2, r0
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	621a      	str	r2, [r3, #32]
  p_handle->iValue   +=  l_currentError * p_timeDelta;
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800ae6a:	697b      	ldr	r3, [r7, #20]
 800ae6c:	687a      	ldr	r2, [r7, #4]
 800ae6e:	fb02 f303 	mul.w	r3, r2, r3
 800ae72:	4618      	mov	r0, r3
 800ae74:	f7f5 ff9a 	bl	8000dac <__aeabi_ui2f>
 800ae78:	4603      	mov	r3, r0
 800ae7a:	4619      	mov	r1, r3
 800ae7c:	4620      	mov	r0, r4
 800ae7e:	f7f5 fee5 	bl	8000c4c <__addsf3>
 800ae82:	4603      	mov	r3, r0
 800ae84:	461a      	mov	r2, r3
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	625a      	str	r2, [r3, #36]	; 0x24
  p_handle->iValue    =  UTI_clampIntValue(p_handle->iValue, -p_handle->antiWindUpValue, p_handle->antiWindUpValue, true, 0);
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae8e:	4618      	mov	r0, r3
 800ae90:	f7f6 f934 	bl	80010fc <__aeabi_f2iz>
 800ae94:	4604      	mov	r4, r0
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	69db      	ldr	r3, [r3, #28]
 800ae9a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800ae9e:	4618      	mov	r0, r3
 800aea0:	f7f6 f92c 	bl	80010fc <__aeabi_f2iz>
 800aea4:	4605      	mov	r5, r0
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	69db      	ldr	r3, [r3, #28]
 800aeaa:	4618      	mov	r0, r3
 800aeac:	f7f6 f926 	bl	80010fc <__aeabi_f2iz>
 800aeb0:	4602      	mov	r2, r0
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	9300      	str	r3, [sp, #0]
 800aeb6:	2301      	movs	r3, #1
 800aeb8:	4629      	mov	r1, r5
 800aeba:	4620      	mov	r0, r4
 800aebc:	f000 fac4 	bl	800b448 <UTI_clampIntValue>
 800aec0:	4603      	mov	r3, r0
 800aec2:	4618      	mov	r0, r3
 800aec4:	f7f5 ff76 	bl	8000db4 <__aeabi_i2f>
 800aec8:	4602      	mov	r2, r0
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	625a      	str	r2, [r3, #36]	; 0x24
  p_handle->dValue    = (l_currentError - p_handle->lastError) / p_timeDelta;
 800aece:	6978      	ldr	r0, [r7, #20]
 800aed0:	f7f5 ff70 	bl	8000db4 <__aeabi_i2f>
 800aed4:	4602      	mov	r2, r0
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aeda:	4619      	mov	r1, r3
 800aedc:	4610      	mov	r0, r2
 800aede:	f7f5 feb3 	bl	8000c48 <__aeabi_fsub>
 800aee2:	4603      	mov	r3, r0
 800aee4:	461c      	mov	r4, r3
 800aee6:	6878      	ldr	r0, [r7, #4]
 800aee8:	f7f5 ff60 	bl	8000dac <__aeabi_ui2f>
 800aeec:	4603      	mov	r3, r0
 800aeee:	4619      	mov	r1, r3
 800aef0:	4620      	mov	r0, r4
 800aef2:	f7f6 f867 	bl	8000fc4 <__aeabi_fdiv>
 800aef6:	4603      	mov	r3, r0
 800aef8:	461a      	mov	r2, r3
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	629a      	str	r2, [r3, #40]	; 0x28
  p_handle->lastError =  l_currentError;
 800aefe:	6978      	ldr	r0, [r7, #20]
 800af00:	f7f5 ff58 	bl	8000db4 <__aeabi_i2f>
 800af04:	4602      	mov	r2, r0
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	631a      	str	r2, [r3, #48]	; 0x30

  p_handle->computedValue = p_handle->kp * p_handle->pValue + p_handle->ki * p_handle->iValue + p_handle->kd * p_handle->dValue;
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	685a      	ldr	r2, [r3, #4]
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	6a1b      	ldr	r3, [r3, #32]
 800af12:	4619      	mov	r1, r3
 800af14:	4610      	mov	r0, r2
 800af16:	f7f5 ffa1 	bl	8000e5c <__aeabi_fmul>
 800af1a:	4603      	mov	r3, r0
 800af1c:	461c      	mov	r4, r3
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	689a      	ldr	r2, [r3, #8]
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af26:	4619      	mov	r1, r3
 800af28:	4610      	mov	r0, r2
 800af2a:	f7f5 ff97 	bl	8000e5c <__aeabi_fmul>
 800af2e:	4603      	mov	r3, r0
 800af30:	4619      	mov	r1, r3
 800af32:	4620      	mov	r0, r4
 800af34:	f7f5 fe8a 	bl	8000c4c <__addsf3>
 800af38:	4603      	mov	r3, r0
 800af3a:	461c      	mov	r4, r3
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	68da      	ldr	r2, [r3, #12]
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af44:	4619      	mov	r1, r3
 800af46:	4610      	mov	r0, r2
 800af48:	f7f5 ff88 	bl	8000e5c <__aeabi_fmul>
 800af4c:	4603      	mov	r3, r0
 800af4e:	4619      	mov	r1, r3
 800af50:	4620      	mov	r0, r4
 800af52:	f7f5 fe7b 	bl	8000c4c <__addsf3>
 800af56:	4603      	mov	r3, r0
 800af58:	461a      	mov	r2, r3
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	62da      	str	r2, [r3, #44]	; 0x2c
  p_handle->computedValue = UTI_clampIntValue(p_handle->computedValue, p_handle->minValue, p_handle->maxValue, true, 0);
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af62:	4618      	mov	r0, r3
 800af64:	f7f6 f8ca 	bl	80010fc <__aeabi_f2iz>
 800af68:	4604      	mov	r4, r0
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	695b      	ldr	r3, [r3, #20]
 800af6e:	4618      	mov	r0, r3
 800af70:	f7f6 f8c4 	bl	80010fc <__aeabi_f2iz>
 800af74:	4605      	mov	r5, r0
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	699b      	ldr	r3, [r3, #24]
 800af7a:	4618      	mov	r0, r3
 800af7c:	f7f6 f8be 	bl	80010fc <__aeabi_f2iz>
 800af80:	4602      	mov	r2, r0
 800af82:	2300      	movs	r3, #0
 800af84:	9300      	str	r3, [sp, #0]
 800af86:	2301      	movs	r3, #1
 800af88:	4629      	mov	r1, r5
 800af8a:	4620      	mov	r0, r4
 800af8c:	f000 fa5c 	bl	800b448 <UTI_clampIntValue>
 800af90:	4603      	mov	r3, r0
 800af92:	4618      	mov	r0, r3
 800af94:	f7f5 ff0e 	bl	8000db4 <__aeabi_i2f>
 800af98:	4602      	mov	r2, r0
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	62da      	str	r2, [r3, #44]	; 0x2c

  return p_handle->computedValue;
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 800afa2:	4618      	mov	r0, r3
 800afa4:	3718      	adds	r7, #24
 800afa6:	46bd      	mov	sp, r7
 800afa8:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800afac <PID_logInfo>:

void PID_logInfo(T_PID_Handle *p_handle, bool p_compactLog)
{
 800afac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afb0:	b08f      	sub	sp, #60	; 0x3c
 800afb2:	af0a      	add	r7, sp, #40	; 0x28
 800afb4:	60f8      	str	r0, [r7, #12]
 800afb6:	460b      	mov	r3, r1
 800afb8:	72fb      	strb	r3, [r7, #11]
  if (p_compactLog == false)
 800afba:	7afb      	ldrb	r3, [r7, #11]
 800afbc:	f083 0301 	eor.w	r3, r3, #1
 800afc0:	b2db      	uxtb	r3, r3
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d07a      	beq.n	800b0bc <PID_logInfo+0x110>
  {
    LOG_info("% PID detailed data:", p_handle->name);
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	461a      	mov	r2, r3
 800afcc:	4959      	ldr	r1, [pc, #356]	; (800b134 <PID_logInfo+0x188>)
 800afce:	2001      	movs	r0, #1
 800afd0:	f7ff fc74 	bl	800a8bc <LOG_log>
    LOG_info(" kp = %6.2f -  ki = %6.2f -     kd = %6.2f", p_handle->kp         , p_handle->ki      , p_handle->kd             );
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	685b      	ldr	r3, [r3, #4]
 800afd8:	4618      	mov	r0, r3
 800afda:	f7f5 fa91 	bl	8000500 <__aeabi_f2d>
 800afde:	4680      	mov	r8, r0
 800afe0:	4689      	mov	r9, r1
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	689b      	ldr	r3, [r3, #8]
 800afe6:	4618      	mov	r0, r3
 800afe8:	f7f5 fa8a 	bl	8000500 <__aeabi_f2d>
 800afec:	4604      	mov	r4, r0
 800afee:	460d      	mov	r5, r1
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	68db      	ldr	r3, [r3, #12]
 800aff4:	4618      	mov	r0, r3
 800aff6:	f7f5 fa83 	bl	8000500 <__aeabi_f2d>
 800affa:	4602      	mov	r2, r0
 800affc:	460b      	mov	r3, r1
 800affe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b002:	e9cd 4500 	strd	r4, r5, [sp]
 800b006:	4642      	mov	r2, r8
 800b008:	464b      	mov	r3, r9
 800b00a:	494b      	ldr	r1, [pc, #300]	; (800b138 <PID_logInfo+0x18c>)
 800b00c:	2001      	movs	r0, #1
 800b00e:	f7ff fc55 	bl	800a8bc <LOG_log>
    LOG_info("  p = %6.2f -   i = %6.2f -      d = %6.2f", p_handle->pValue     , p_handle->iValue  , p_handle->dValue         );
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	6a1b      	ldr	r3, [r3, #32]
 800b016:	4618      	mov	r0, r3
 800b018:	f7f5 fa72 	bl	8000500 <__aeabi_f2d>
 800b01c:	4680      	mov	r8, r0
 800b01e:	4689      	mov	r9, r1
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b024:	4618      	mov	r0, r3
 800b026:	f7f5 fa6b 	bl	8000500 <__aeabi_f2d>
 800b02a:	4604      	mov	r4, r0
 800b02c:	460d      	mov	r5, r1
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b032:	4618      	mov	r0, r3
 800b034:	f7f5 fa64 	bl	8000500 <__aeabi_f2d>
 800b038:	4602      	mov	r2, r0
 800b03a:	460b      	mov	r3, r1
 800b03c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b040:	e9cd 4500 	strd	r4, r5, [sp]
 800b044:	4642      	mov	r2, r8
 800b046:	464b      	mov	r3, r9
 800b048:	493c      	ldr	r1, [pc, #240]	; (800b13c <PID_logInfo+0x190>)
 800b04a:	2001      	movs	r0, #1
 800b04c:	f7ff fc36 	bl	800a8bc <LOG_log>
    LOG_info("min = %6.2f - max = %6.2f - a.w.up = %6.2f", p_handle->minValue   , p_handle->maxValue, p_handle->antiWindUpValue);
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	695b      	ldr	r3, [r3, #20]
 800b054:	4618      	mov	r0, r3
 800b056:	f7f5 fa53 	bl	8000500 <__aeabi_f2d>
 800b05a:	4680      	mov	r8, r0
 800b05c:	4689      	mov	r9, r1
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	699b      	ldr	r3, [r3, #24]
 800b062:	4618      	mov	r0, r3
 800b064:	f7f5 fa4c 	bl	8000500 <__aeabi_f2d>
 800b068:	4604      	mov	r4, r0
 800b06a:	460d      	mov	r5, r1
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	69db      	ldr	r3, [r3, #28]
 800b070:	4618      	mov	r0, r3
 800b072:	f7f5 fa45 	bl	8000500 <__aeabi_f2d>
 800b076:	4602      	mov	r2, r0
 800b078:	460b      	mov	r3, r1
 800b07a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b07e:	e9cd 4500 	strd	r4, r5, [sp]
 800b082:	4642      	mov	r2, r8
 800b084:	464b      	mov	r3, r9
 800b086:	492e      	ldr	r1, [pc, #184]	; (800b140 <PID_logInfo+0x194>)
 800b088:	2001      	movs	r0, #1
 800b08a:	f7ff fc17 	bl	800a8bc <LOG_log>
    LOG_info("  t = %6.2f - val = %6.2f               "  , p_handle->targetValue, p_handle->computedValue                      );
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	691b      	ldr	r3, [r3, #16]
 800b092:	4618      	mov	r0, r3
 800b094:	f7f5 fa34 	bl	8000500 <__aeabi_f2d>
 800b098:	4604      	mov	r4, r0
 800b09a:	460d      	mov	r5, r1
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	f7f5 fa2d 	bl	8000500 <__aeabi_f2d>
 800b0a6:	4602      	mov	r2, r0
 800b0a8:	460b      	mov	r3, r1
 800b0aa:	e9cd 2300 	strd	r2, r3, [sp]
 800b0ae:	4622      	mov	r2, r4
 800b0b0:	462b      	mov	r3, r5
 800b0b2:	4924      	ldr	r1, [pc, #144]	; (800b144 <PID_logInfo+0x198>)
 800b0b4:	2001      	movs	r0, #1
 800b0b6:	f7ff fc01 	bl	800a8bc <LOG_log>
             p_handle->dValue,
             p_handle->targetValue,
             p_handle->computedValue);
  }

  return;
 800b0ba:	e036      	b.n	800b12a <PID_logInfo+0x17e>
    LOG_info("%s PID: p = %6.2f - i = %6.2f - d = %6.2f - t = %6.2f - val = %6.2f",
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	681e      	ldr	r6, [r3, #0]
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	6a1b      	ldr	r3, [r3, #32]
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	f7f5 fa1b 	bl	8000500 <__aeabi_f2d>
 800b0ca:	4604      	mov	r4, r0
 800b0cc:	460d      	mov	r5, r1
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	f7f5 fa14 	bl	8000500 <__aeabi_f2d>
 800b0d8:	4680      	mov	r8, r0
 800b0da:	4689      	mov	r9, r1
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	f7f5 fa0d 	bl	8000500 <__aeabi_f2d>
 800b0e6:	4682      	mov	sl, r0
 800b0e8:	468b      	mov	fp, r1
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	691b      	ldr	r3, [r3, #16]
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	f7f5 fa06 	bl	8000500 <__aeabi_f2d>
 800b0f4:	e9c7 0100 	strd	r0, r1, [r7]
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	f7f5 f9ff 	bl	8000500 <__aeabi_f2d>
 800b102:	4602      	mov	r2, r0
 800b104:	460b      	mov	r3, r1
 800b106:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b10a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b10e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b112:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800b116:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800b11a:	e9cd 4500 	strd	r4, r5, [sp]
 800b11e:	4632      	mov	r2, r6
 800b120:	4909      	ldr	r1, [pc, #36]	; (800b148 <PID_logInfo+0x19c>)
 800b122:	2001      	movs	r0, #1
 800b124:	f7ff fbca 	bl	800a8bc <LOG_log>
  return;
 800b128:	bf00      	nop
}
 800b12a:	3714      	adds	r7, #20
 800b12c:	46bd      	mov	sp, r7
 800b12e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b132:	bf00      	nop
 800b134:	08010de4 	.word	0x08010de4
 800b138:	08010dfc 	.word	0x08010dfc
 800b13c:	08010e28 	.word	0x08010e28
 800b140:	08010e54 	.word	0x08010e54
 800b144:	08010e80 	.word	0x08010e80
 800b148:	08010eac 	.word	0x08010eac

0800b14c <SFO_initData>:
#include "string_fifo.h"

#include "log.h"

void SFO_initData(T_SFO_data *p_data)
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b082      	sub	sp, #8
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
  (void)memset(p_data, 0, CST_STRING_FIFO_MAX_STRING_LENGTH);
 800b154:	2210      	movs	r2, #16
 800b156:	2100      	movs	r1, #0
 800b158:	6878      	ldr	r0, [r7, #4]
 800b15a:	f000 fbc9 	bl	800b8f0 <memset>

  return;
 800b15e:	bf00      	nop
}
 800b160:	3708      	adds	r7, #8
 800b162:	46bd      	mov	sp, r7
 800b164:	bd80      	pop	{r7, pc}
	...

0800b168 <SFO_init>:

void SFO_init(T_SFO_Handle *p_fifo)
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	b082      	sub	sp, #8
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
  LOG_debug("String FIFO now empty");
 800b170:	4908      	ldr	r1, [pc, #32]	; (800b194 <SFO_init+0x2c>)
 800b172:	2000      	movs	r0, #0
 800b174:	f7ff fba2 	bl	800a8bc <LOG_log>

  p_fifo->head  = NULL;
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	2200      	movs	r2, #0
 800b17c:	601a      	str	r2, [r3, #0]
  p_fifo->tail  = NULL;
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	2200      	movs	r2, #0
 800b182:	605a      	str	r2, [r3, #4]
  p_fifo->count = 0;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	2200      	movs	r2, #0
 800b188:	609a      	str	r2, [r3, #8]

  return;
 800b18a:	bf00      	nop
}
 800b18c:	3708      	adds	r7, #8
 800b18e:	46bd      	mov	sp, r7
 800b190:	bd80      	pop	{r7, pc}
 800b192:	bf00      	nop
 800b194:	08010ef0 	.word	0x08010ef0

0800b198 <SFO_push>:

void SFO_push(T_SFO_Handle *p_fifo, T_SFO_data *p_dataIn)
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b084      	sub	sp, #16
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
 800b1a0:	6039      	str	r1, [r7, #0]
  T_SFO_Element *l_element;

  if (p_fifo->count == CST_STRING_FIFO_MAX_ELEMENTS)
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	689b      	ldr	r3, [r3, #8]
 800b1a6:	2b0a      	cmp	r3, #10
 800b1a8:	d105      	bne.n	800b1b6 <SFO_push+0x1e>
  {
    LOG_error("SFO_push() failure - String FIFO is full (%u elements)", CST_STRING_FIFO_MAX_ELEMENTS);
 800b1aa:	220a      	movs	r2, #10
 800b1ac:	4917      	ldr	r1, [pc, #92]	; (800b20c <SFO_push+0x74>)
 800b1ae:	2003      	movs	r0, #3
 800b1b0:	f7ff fb84 	bl	800a8bc <LOG_log>

      p_fifo->count++;
    }
  }

  return;
 800b1b4:	e027      	b.n	800b206 <SFO_push+0x6e>
    l_element = (T_SFO_Element *)malloc(sizeof(T_SFO_Element));
 800b1b6:	2014      	movs	r0, #20
 800b1b8:	f000 fb8a 	bl	800b8d0 <malloc>
 800b1bc:	4603      	mov	r3, r0
 800b1be:	60fb      	str	r3, [r7, #12]
    if (l_element == NULL)
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d104      	bne.n	800b1d0 <SFO_push+0x38>
      LOG_error("SFO_push() failure - Could not allocate new memory");
 800b1c6:	4912      	ldr	r1, [pc, #72]	; (800b210 <SFO_push+0x78>)
 800b1c8:	2003      	movs	r0, #3
 800b1ca:	f7ff fb77 	bl	800a8bc <LOG_log>
  return;
 800b1ce:	e01a      	b.n	800b206 <SFO_push+0x6e>
      (void)strncpy(l_element->data, *p_dataIn, CST_STRING_FIFO_MAX_STRING_LENGTH);
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	2210      	movs	r2, #16
 800b1d4:	6839      	ldr	r1, [r7, #0]
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	f001 f914 	bl	800c404 <strncpy>
      l_element->nextElement = p_fifo->head;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681a      	ldr	r2, [r3, #0]
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	611a      	str	r2, [r3, #16]
      p_fifo->head           = l_element;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	68fa      	ldr	r2, [r7, #12]
 800b1e8:	601a      	str	r2, [r3, #0]
      if (p_fifo->tail == NULL)
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	685b      	ldr	r3, [r3, #4]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d103      	bne.n	800b1fa <SFO_push+0x62>
        p_fifo->tail = p_fifo->head;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681a      	ldr	r2, [r3, #0]
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	605a      	str	r2, [r3, #4]
      p_fifo->count++;
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	689b      	ldr	r3, [r3, #8]
 800b1fe:	1c5a      	adds	r2, r3, #1
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	609a      	str	r2, [r3, #8]
  return;
 800b204:	bf00      	nop
}
 800b206:	3710      	adds	r7, #16
 800b208:	46bd      	mov	sp, r7
 800b20a:	bd80      	pop	{r7, pc}
 800b20c:	08010f08 	.word	0x08010f08
 800b210:	08010f40 	.word	0x08010f40

0800b214 <SFO_pop>:

void SFO_pop(T_SFO_Handle *p_fifo, T_SFO_data *p_dataOut)
{
 800b214:	b580      	push	{r7, lr}
 800b216:	b084      	sub	sp, #16
 800b218:	af00      	add	r7, sp, #0
 800b21a:	6078      	str	r0, [r7, #4]
 800b21c:	6039      	str	r1, [r7, #0]
  T_SFO_Element *l_element;

  if (p_fifo->count == 0)
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	689b      	ldr	r3, [r3, #8]
 800b222:	2b00      	cmp	r3, #0
 800b224:	d104      	bne.n	800b230 <SFO_pop+0x1c>
  {
    LOG_error("SFO_pop() failure - String FIFO is empty");
 800b226:	491a      	ldr	r1, [pc, #104]	; (800b290 <SFO_pop+0x7c>)
 800b228:	2003      	movs	r0, #3
 800b22a:	f7ff fb47 	bl	800a8bc <LOG_log>
    {
      SFO_init(p_fifo);
    }
  }

  return;
 800b22e:	e02c      	b.n	800b28a <SFO_pop+0x76>
    (void)strncpy(*p_dataOut, p_fifo->tail->data, CST_STRING_FIFO_MAX_STRING_LENGTH);
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	685b      	ldr	r3, [r3, #4]
 800b234:	2210      	movs	r2, #16
 800b236:	4619      	mov	r1, r3
 800b238:	6838      	ldr	r0, [r7, #0]
 800b23a:	f001 f8e3 	bl	800c404 <strncpy>
    free(p_fifo->tail);
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	685b      	ldr	r3, [r3, #4]
 800b242:	4618      	mov	r0, r3
 800b244:	f000 fb4c 	bl	800b8e0 <free>
    if (p_fifo->count > 1)
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	689b      	ldr	r3, [r3, #8]
 800b24c:	2b01      	cmp	r3, #1
 800b24e:	d918      	bls.n	800b282 <SFO_pop+0x6e>
      l_element = p_fifo->head;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	60fb      	str	r3, [r7, #12]
      while (l_element->nextElement != p_fifo->tail)
 800b256:	e002      	b.n	800b25e <SFO_pop+0x4a>
        l_element = l_element->nextElement;
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	691b      	ldr	r3, [r3, #16]
 800b25c:	60fb      	str	r3, [r7, #12]
      while (l_element->nextElement != p_fifo->tail)
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	691a      	ldr	r2, [r3, #16]
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	685b      	ldr	r3, [r3, #4]
 800b266:	429a      	cmp	r2, r3
 800b268:	d1f6      	bne.n	800b258 <SFO_pop+0x44>
      l_element->nextElement = NULL;
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	2200      	movs	r2, #0
 800b26e:	611a      	str	r2, [r3, #16]
      p_fifo->tail           = l_element;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	68fa      	ldr	r2, [r7, #12]
 800b274:	605a      	str	r2, [r3, #4]
      p_fifo->count--;
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	689b      	ldr	r3, [r3, #8]
 800b27a:	1e5a      	subs	r2, r3, #1
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	609a      	str	r2, [r3, #8]
  return;
 800b280:	e003      	b.n	800b28a <SFO_pop+0x76>
      SFO_init(p_fifo);
 800b282:	6878      	ldr	r0, [r7, #4]
 800b284:	f7ff ff70 	bl	800b168 <SFO_init>
  return;
 800b288:	bf00      	nop
}
 800b28a:	3710      	adds	r7, #16
 800b28c:	46bd      	mov	sp, r7
 800b28e:	bd80      	pop	{r7, pc}
 800b290:	08010f74 	.word	0x08010f74

0800b294 <SFO_getCount>:

uint32_t SFO_getCount(T_SFO_Handle *p_fifo)
{
 800b294:	b480      	push	{r7}
 800b296:	b083      	sub	sp, #12
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
  return p_fifo->count;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	689b      	ldr	r3, [r3, #8]
}
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	370c      	adds	r7, #12
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	bc80      	pop	{r7}
 800b2a8:	4770      	bx	lr
	...

0800b2ac <SFO_logInfo>:

void SFO_logInfo(T_SFO_Handle *p_fifo)
{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b084      	sub	sp, #16
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	6078      	str	r0, [r7, #4]
  T_SFO_Element *l_element;

  if (p_fifo->count == 0)
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	689b      	ldr	r3, [r3, #8]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d104      	bne.n	800b2c6 <SFO_logInfo+0x1a>
  {
    LOG_info("String FIFO is empty");
 800b2bc:	4924      	ldr	r1, [pc, #144]	; (800b350 <SFO_logInfo+0xa4>)
 800b2be:	2001      	movs	r0, #1
 800b2c0:	f7ff fafc 	bl	800a8bc <LOG_log>

      l_element = l_element->nextElement;
    }
  }

  return;
 800b2c4:	e040      	b.n	800b348 <SFO_logInfo+0x9c>
    LOG_info("String FIFO: %u element(s)", p_fifo->count);
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	689b      	ldr	r3, [r3, #8]
 800b2ca:	461a      	mov	r2, r3
 800b2cc:	4921      	ldr	r1, [pc, #132]	; (800b354 <SFO_logInfo+0xa8>)
 800b2ce:	2001      	movs	r0, #1
 800b2d0:	f7ff faf4 	bl	800a8bc <LOG_log>
    l_element = p_fifo->head;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	60fb      	str	r3, [r7, #12]
    while (l_element != NULL)
 800b2da:	e031      	b.n	800b340 <SFO_logInfo+0x94>
      if ((l_element == p_fifo->head) && (l_element == p_fifo->tail))
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	68fa      	ldr	r2, [r7, #12]
 800b2e2:	429a      	cmp	r2, r3
 800b2e4:	d10b      	bne.n	800b2fe <SFO_logInfo+0x52>
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	685b      	ldr	r3, [r3, #4]
 800b2ea:	68fa      	ldr	r2, [r7, #12]
 800b2ec:	429a      	cmp	r2, r3
 800b2ee:	d106      	bne.n	800b2fe <SFO_logInfo+0x52>
        LOG_info("HEAD -> '%s' <- TAIL", l_element->data);
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	461a      	mov	r2, r3
 800b2f4:	4918      	ldr	r1, [pc, #96]	; (800b358 <SFO_logInfo+0xac>)
 800b2f6:	2001      	movs	r0, #1
 800b2f8:	f7ff fae0 	bl	800a8bc <LOG_log>
 800b2fc:	e01d      	b.n	800b33a <SFO_logInfo+0x8e>
      else if (l_element == p_fifo->head)
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	68fa      	ldr	r2, [r7, #12]
 800b304:	429a      	cmp	r2, r3
 800b306:	d106      	bne.n	800b316 <SFO_logInfo+0x6a>
        LOG_info("HEAD -> '%s'", l_element->data);
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	461a      	mov	r2, r3
 800b30c:	4913      	ldr	r1, [pc, #76]	; (800b35c <SFO_logInfo+0xb0>)
 800b30e:	2001      	movs	r0, #1
 800b310:	f7ff fad4 	bl	800a8bc <LOG_log>
 800b314:	e011      	b.n	800b33a <SFO_logInfo+0x8e>
      else if (l_element == p_fifo->tail)
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	685b      	ldr	r3, [r3, #4]
 800b31a:	68fa      	ldr	r2, [r7, #12]
 800b31c:	429a      	cmp	r2, r3
 800b31e:	d106      	bne.n	800b32e <SFO_logInfo+0x82>
        LOG_info("TAIL -> '%s'", l_element->data);
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	461a      	mov	r2, r3
 800b324:	490e      	ldr	r1, [pc, #56]	; (800b360 <SFO_logInfo+0xb4>)
 800b326:	2001      	movs	r0, #1
 800b328:	f7ff fac8 	bl	800a8bc <LOG_log>
 800b32c:	e005      	b.n	800b33a <SFO_logInfo+0x8e>
        LOG_info("        '%s'", l_element->data);
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	461a      	mov	r2, r3
 800b332:	490c      	ldr	r1, [pc, #48]	; (800b364 <SFO_logInfo+0xb8>)
 800b334:	2001      	movs	r0, #1
 800b336:	f7ff fac1 	bl	800a8bc <LOG_log>
      l_element = l_element->nextElement;
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	691b      	ldr	r3, [r3, #16]
 800b33e:	60fb      	str	r3, [r7, #12]
    while (l_element != NULL)
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d1ca      	bne.n	800b2dc <SFO_logInfo+0x30>
  return;
 800b346:	bf00      	nop
}
 800b348:	3710      	adds	r7, #16
 800b34a:	46bd      	mov	sp, r7
 800b34c:	bd80      	pop	{r7, pc}
 800b34e:	bf00      	nop
 800b350:	08010fa0 	.word	0x08010fa0
 800b354:	08010fb8 	.word	0x08010fb8
 800b358:	08010fd4 	.word	0x08010fd4
 800b35c:	08010fec 	.word	0x08010fec
 800b360:	08010ffc 	.word	0x08010ffc
 800b364:	0801100c 	.word	0x0801100c

0800b368 <UTI_init>:

static T_UTI_Context g_UTI_context;


void UTI_init(TIM_HandleTypeDef *p_delayTimerHandle)
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b082      	sub	sp, #8
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
  LOG_info("Initializing utilities");
 800b370:	4905      	ldr	r1, [pc, #20]	; (800b388 <UTI_init+0x20>)
 800b372:	2001      	movs	r0, #1
 800b374:	f7ff faa2 	bl	800a8bc <LOG_log>

  g_UTI_context.delayTimerHandle = p_delayTimerHandle;
 800b378:	4a04      	ldr	r2, [pc, #16]	; (800b38c <UTI_init+0x24>)
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	6013      	str	r3, [r2, #0]

  return;
 800b37e:	bf00      	nop
}
 800b380:	3708      	adds	r7, #8
 800b382:	46bd      	mov	sp, r7
 800b384:	bd80      	pop	{r7, pc}
 800b386:	bf00      	nop
 800b388:	0801101c 	.word	0x0801101c
 800b38c:	20000554 	.word	0x20000554

0800b390 <UTI_delayUs>:

void UTI_delayUs(uint16_t p_delay)
{
 800b390:	b480      	push	{r7}
 800b392:	b083      	sub	sp, #12
 800b394:	af00      	add	r7, sp, #0
 800b396:	4603      	mov	r3, r0
 800b398:	80fb      	strh	r3, [r7, #6]
  /* Reset the micro-seconds counter */
  __HAL_TIM_SET_COUNTER(g_UTI_context.delayTimerHandle, 0);
 800b39a:	4b09      	ldr	r3, [pc, #36]	; (800b3c0 <UTI_delayUs+0x30>)
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Wait for the counter to reach the input micro-seconds number */
  while (__HAL_TIM_GET_COUNTER(g_UTI_context.delayTimerHandle) < p_delay)
 800b3a4:	bf00      	nop
 800b3a6:	4b06      	ldr	r3, [pc, #24]	; (800b3c0 <UTI_delayUs+0x30>)
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b3ae:	88fb      	ldrh	r3, [r7, #6]
 800b3b0:	429a      	cmp	r2, r3
 800b3b2:	d3f8      	bcc.n	800b3a6 <UTI_delayUs+0x16>
  {
    ; /* Nothing to do */
  }

  return;
 800b3b4:	bf00      	nop
}
 800b3b6:	370c      	adds	r7, #12
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	bc80      	pop	{r7}
 800b3bc:	4770      	bx	lr
 800b3be:	bf00      	nop
 800b3c0:	20000554 	.word	0x20000554

0800b3c4 <UTI_resetRtcDate>:

void UTI_resetRtcDate(RTC_DateTypeDef *p_date)
{
 800b3c4:	b480      	push	{r7}
 800b3c6:	b083      	sub	sp, #12
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	6078      	str	r0, [r7, #4]
  p_date->Date    = 0;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	709a      	strb	r2, [r3, #2]
  p_date->Month   = 0;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	705a      	strb	r2, [r3, #1]
  p_date->WeekDay = 0;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	2200      	movs	r2, #0
 800b3dc:	701a      	strb	r2, [r3, #0]
  p_date->Year    = 0;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	70da      	strb	r2, [r3, #3]

  return;
 800b3e4:	bf00      	nop
}
 800b3e6:	370c      	adds	r7, #12
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	bc80      	pop	{r7}
 800b3ec:	4770      	bx	lr

0800b3ee <UTI_resetRtcTime>:


void UTI_resetRtcTime(RTC_TimeTypeDef *p_time)
{
 800b3ee:	b480      	push	{r7}
 800b3f0:	b083      	sub	sp, #12
 800b3f2:	af00      	add	r7, sp, #0
 800b3f4:	6078      	str	r0, [r7, #4]
  p_time->Hours   = 0;
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	2200      	movs	r2, #0
 800b3fa:	701a      	strb	r2, [r3, #0]
  p_time->Minutes = 0;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	2200      	movs	r2, #0
 800b400:	705a      	strb	r2, [r3, #1]
  p_time->Seconds = 0;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	2200      	movs	r2, #0
 800b406:	709a      	strb	r2, [r3, #2]

  return;
 800b408:	bf00      	nop
}
 800b40a:	370c      	adds	r7, #12
 800b40c:	46bd      	mov	sp, r7
 800b40e:	bc80      	pop	{r7}
 800b410:	4770      	bx	lr

0800b412 <UTI_turnRtcTimeToSeconds>:

uint32_t UTI_turnRtcTimeToSeconds(RTC_TimeTypeDef *p_time)
{
 800b412:	b480      	push	{r7}
 800b414:	b083      	sub	sp, #12
 800b416:	af00      	add	r7, sp, #0
 800b418:	6078      	str	r0, [r7, #4]
  return p_time->Hours * 3600 + p_time->Minutes * 60 + p_time->Seconds;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	781b      	ldrb	r3, [r3, #0]
 800b41e:	461a      	mov	r2, r3
 800b420:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800b424:	fb03 f202 	mul.w	r2, r3, r2
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	785b      	ldrb	r3, [r3, #1]
 800b42c:	4619      	mov	r1, r3
 800b42e:	460b      	mov	r3, r1
 800b430:	011b      	lsls	r3, r3, #4
 800b432:	1a5b      	subs	r3, r3, r1
 800b434:	009b      	lsls	r3, r3, #2
 800b436:	4413      	add	r3, r2
 800b438:	687a      	ldr	r2, [r7, #4]
 800b43a:	7892      	ldrb	r2, [r2, #2]
 800b43c:	4413      	add	r3, r2
}
 800b43e:	4618      	mov	r0, r3
 800b440:	370c      	adds	r7, #12
 800b442:	46bd      	mov	sp, r7
 800b444:	bc80      	pop	{r7}
 800b446:	4770      	bx	lr

0800b448 <UTI_clampIntValue>:

int32_t UTI_clampIntValue(int32_t p_value, int32_t p_minValue, int32_t p_maxValue, bool p_clampToNearest, int32_t p_clampValue)
{
 800b448:	b480      	push	{r7}
 800b44a:	b087      	sub	sp, #28
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	60f8      	str	r0, [r7, #12]
 800b450:	60b9      	str	r1, [r7, #8]
 800b452:	607a      	str	r2, [r7, #4]
 800b454:	70fb      	strb	r3, [r7, #3]
  int32_t l_returnValue;

  if (p_value < p_minValue)
 800b456:	68fa      	ldr	r2, [r7, #12]
 800b458:	68bb      	ldr	r3, [r7, #8]
 800b45a:	429a      	cmp	r2, r3
 800b45c:	da08      	bge.n	800b470 <UTI_clampIntValue+0x28>
  {
    if (p_clampToNearest == true)
 800b45e:	78fb      	ldrb	r3, [r7, #3]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d002      	beq.n	800b46a <UTI_clampIntValue+0x22>
    {
      l_returnValue = p_minValue;
 800b464:	68bb      	ldr	r3, [r7, #8]
 800b466:	617b      	str	r3, [r7, #20]
 800b468:	e011      	b.n	800b48e <UTI_clampIntValue+0x46>
    }
    else
    {
      l_returnValue = p_clampValue;
 800b46a:	6a3b      	ldr	r3, [r7, #32]
 800b46c:	617b      	str	r3, [r7, #20]
 800b46e:	e00e      	b.n	800b48e <UTI_clampIntValue+0x46>
    }
  }
  else if (p_value > p_maxValue)
 800b470:	68fa      	ldr	r2, [r7, #12]
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	429a      	cmp	r2, r3
 800b476:	dd08      	ble.n	800b48a <UTI_clampIntValue+0x42>
  {
    if (p_clampToNearest == true)
 800b478:	78fb      	ldrb	r3, [r7, #3]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d002      	beq.n	800b484 <UTI_clampIntValue+0x3c>
    {
      l_returnValue = p_maxValue;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	617b      	str	r3, [r7, #20]
 800b482:	e004      	b.n	800b48e <UTI_clampIntValue+0x46>
    }
    else
    {
      l_returnValue = p_clampValue;
 800b484:	6a3b      	ldr	r3, [r7, #32]
 800b486:	617b      	str	r3, [r7, #20]
 800b488:	e001      	b.n	800b48e <UTI_clampIntValue+0x46>
    }
  }
  else
  {
    l_returnValue = p_value;
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	617b      	str	r3, [r7, #20]
  }

  return l_returnValue;
 800b48e:	697b      	ldr	r3, [r7, #20]
}
 800b490:	4618      	mov	r0, r3
 800b492:	371c      	adds	r7, #28
 800b494:	46bd      	mov	sp, r7
 800b496:	bc80      	pop	{r7}
 800b498:	4770      	bx	lr

0800b49a <UTI_normalizeIntValue>:

  return l_returnValue;
}

int32_t UTI_normalizeIntValue(int32_t p_value, int32_t p_inMinValue, int32_t p_inMaxValue, int32_t p_outMinValue, int32_t p_outMaxValue, bool p_isInversionNeeded)
{
 800b49a:	b5b0      	push	{r4, r5, r7, lr}
 800b49c:	b086      	sub	sp, #24
 800b49e:	af00      	add	r7, sp, #0
 800b4a0:	60f8      	str	r0, [r7, #12]
 800b4a2:	60b9      	str	r1, [r7, #8]
 800b4a4:	607a      	str	r2, [r7, #4]
 800b4a6:	603b      	str	r3, [r7, #0]
  float l_returnValue;
  float l_ratio;

  l_ratio       = ((float)p_outMaxValue - (float)p_outMinValue) / ((float)p_inMaxValue - (float)p_inMinValue);
 800b4a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b4aa:	f7f5 fc83 	bl	8000db4 <__aeabi_i2f>
 800b4ae:	4604      	mov	r4, r0
 800b4b0:	6838      	ldr	r0, [r7, #0]
 800b4b2:	f7f5 fc7f 	bl	8000db4 <__aeabi_i2f>
 800b4b6:	4603      	mov	r3, r0
 800b4b8:	4619      	mov	r1, r3
 800b4ba:	4620      	mov	r0, r4
 800b4bc:	f7f5 fbc4 	bl	8000c48 <__aeabi_fsub>
 800b4c0:	4603      	mov	r3, r0
 800b4c2:	461d      	mov	r5, r3
 800b4c4:	6878      	ldr	r0, [r7, #4]
 800b4c6:	f7f5 fc75 	bl	8000db4 <__aeabi_i2f>
 800b4ca:	4604      	mov	r4, r0
 800b4cc:	68b8      	ldr	r0, [r7, #8]
 800b4ce:	f7f5 fc71 	bl	8000db4 <__aeabi_i2f>
 800b4d2:	4603      	mov	r3, r0
 800b4d4:	4619      	mov	r1, r3
 800b4d6:	4620      	mov	r0, r4
 800b4d8:	f7f5 fbb6 	bl	8000c48 <__aeabi_fsub>
 800b4dc:	4603      	mov	r3, r0
 800b4de:	4619      	mov	r1, r3
 800b4e0:	4628      	mov	r0, r5
 800b4e2:	f7f5 fd6f 	bl	8000fc4 <__aeabi_fdiv>
 800b4e6:	4603      	mov	r3, r0
 800b4e8:	613b      	str	r3, [r7, #16]
  l_returnValue =  (float)(p_value - p_inMinValue) * l_ratio + p_outMinValue;
 800b4ea:	68fa      	ldr	r2, [r7, #12]
 800b4ec:	68bb      	ldr	r3, [r7, #8]
 800b4ee:	1ad3      	subs	r3, r2, r3
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	f7f5 fc5f 	bl	8000db4 <__aeabi_i2f>
 800b4f6:	4603      	mov	r3, r0
 800b4f8:	6939      	ldr	r1, [r7, #16]
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	f7f5 fcae 	bl	8000e5c <__aeabi_fmul>
 800b500:	4603      	mov	r3, r0
 800b502:	461c      	mov	r4, r3
 800b504:	6838      	ldr	r0, [r7, #0]
 800b506:	f7f5 fc55 	bl	8000db4 <__aeabi_i2f>
 800b50a:	4603      	mov	r3, r0
 800b50c:	4619      	mov	r1, r3
 800b50e:	4620      	mov	r0, r4
 800b510:	f7f5 fb9c 	bl	8000c4c <__addsf3>
 800b514:	4603      	mov	r3, r0
 800b516:	617b      	str	r3, [r7, #20]

  if (p_isInversionNeeded == true)
 800b518:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d003      	beq.n	800b528 <UTI_normalizeIntValue+0x8e>
  {
    l_returnValue *= -1.0f;
 800b520:	697b      	ldr	r3, [r7, #20]
 800b522:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800b526:	617b      	str	r3, [r7, #20]
  else
  {
    ; /* Nothing to do */
  }

  return (int32_t)l_returnValue;
 800b528:	6978      	ldr	r0, [r7, #20]
 800b52a:	f7f5 fde7 	bl	80010fc <__aeabi_f2iz>
 800b52e:	4603      	mov	r3, r0
}
 800b530:	4618      	mov	r0, r3
 800b532:	3718      	adds	r7, #24
 800b534:	46bd      	mov	sp, r7
 800b536:	bdb0      	pop	{r4, r5, r7, pc}

0800b538 <WHL_init>:
              uint32_t           p_pwmChannel,
              bool               p_invertOnUpdate,
              TIM_HandleTypeDef *p_encoderTimerHandle,
              TIM_HandleTypeDef *p_msTimerHandle,
              bool               p_isMotorOn)
{
 800b538:	b580      	push	{r7, lr}
 800b53a:	b08a      	sub	sp, #40	; 0x28
 800b53c:	af06      	add	r7, sp, #24
 800b53e:	60f8      	str	r0, [r7, #12]
 800b540:	60b9      	str	r1, [r7, #8]
 800b542:	607a      	str	r2, [r7, #4]
 800b544:	603b      	str	r3, [r7, #0]
  LOG_info("Initializing Wheel module for %s", p_name);
 800b546:	68ba      	ldr	r2, [r7, #8]
 800b548:	492b      	ldr	r1, [pc, #172]	; (800b5f8 <WHL_init+0xc0>)
 800b54a:	2001      	movs	r0, #1
 800b54c:	f7ff f9b6 	bl	800a8bc <LOG_log>

  p_handle->name = p_name;
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	68ba      	ldr	r2, [r7, #8]
 800b554:	601a      	str	r2, [r3, #0]

  /* Setup motor (with a 0 speed & stopped direction, at this point) */
  MTR_init(&p_handle->motor,
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	1d18      	adds	r0, r3, #4
 800b55a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b55c:	9303      	str	r3, [sp, #12]
 800b55e:	6a3b      	ldr	r3, [r7, #32]
 800b560:	9302      	str	r3, [sp, #8]
 800b562:	69fb      	ldr	r3, [r7, #28]
 800b564:	9301      	str	r3, [sp, #4]
 800b566:	69bb      	ldr	r3, [r7, #24]
 800b568:	9300      	str	r3, [sp, #0]
 800b56a:	683b      	ldr	r3, [r7, #0]
 800b56c:	687a      	ldr	r2, [r7, #4]
 800b56e:	68b9      	ldr	r1, [r7, #8]
 800b570:	f7ff fab8 	bl	800aae4 <MTR_init>
            p_dirPin2,
            p_pwmTimerHandle,
            p_pwmChannel);

  /* Setup encoder */
  ENC_init(&p_handle->encoder,
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800b57a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800b57e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b580:	68b9      	ldr	r1, [r7, #8]
 800b582:	f7ff f823 	bl	800a5cc <ENC_init>
            p_name,
            p_invertOnUpdate,
            p_encoderTimerHandle);

  /* Setup speed buffer */
  CBU_init(&p_handle->speedBuffer);
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	336c      	adds	r3, #108	; 0x6c
 800b58a:	4618      	mov	r0, r3
 800b58c:	f7fd feba 	bl	8009304 <CBU_init>

  /* Setup average speed */
  p_handle->averageSpeed = 0;
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	f04f 0200 	mov.w	r2, #0
 800b596:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Setup PID (with a target speed to 0) */
  PID_init(&p_handle->pid,
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800b5a0:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 800b5a4:	9304      	str	r3, [sp, #16]
 800b5a6:	4b15      	ldr	r3, [pc, #84]	; (800b5fc <WHL_init+0xc4>)
 800b5a8:	9303      	str	r3, [sp, #12]
 800b5aa:	f04f 0300 	mov.w	r3, #0
 800b5ae:	9302      	str	r3, [sp, #8]
 800b5b0:	f04f 0300 	mov.w	r3, #0
 800b5b4:	9301      	str	r3, [sp, #4]
 800b5b6:	f04f 0300 	mov.w	r3, #0
 800b5ba:	9300      	str	r3, [sp, #0]
 800b5bc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800b5c0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800b5c4:	68b9      	ldr	r1, [r7, #8]
 800b5c6:	f7ff fb7f 	bl	800acc8 <PID_init>
            0,
            STP_DRIVE_MIN_SPEED,
            STP_DRIVE_MAX_SPEED,
            STP_DRIVE_PID_ANTI_WIND_UP_FACTOR);

  p_handle->isMotorOn     = p_isMotorOn;
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 800b5d0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
  p_handle->msTimerHandle = p_msTimerHandle;
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b5d8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  p_handle->lastTimeInMs  = __HAL_TIM_GET_COUNTER(p_handle->msTimerHandle);
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5e6:	b29a      	uxth	r2, r3
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8

  return;
 800b5ee:	bf00      	nop
}
 800b5f0:	3710      	adds	r7, #16
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	bd80      	pop	{r7, pc}
 800b5f6:	bf00      	nop
 800b5f8:	08011034 	.word	0x08011034
 800b5fc:	42200000 	.word	0x42200000

0800b600 <WHL_turnMotorOn>:

void WHL_turnMotorOn(T_WHL_Handle *p_handle)
{
 800b600:	b480      	push	{r7}
 800b602:	b083      	sub	sp, #12
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
  p_handle->isMotorOn = true;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	2201      	movs	r2, #1
 800b60c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return;
 800b610:	bf00      	nop
}
 800b612:	370c      	adds	r7, #12
 800b614:	46bd      	mov	sp, r7
 800b616:	bc80      	pop	{r7}
 800b618:	4770      	bx	lr

0800b61a <WHL_turnMotorOff>:

void WHL_turnMotorOff(T_WHL_Handle *p_handle)
{
 800b61a:	b580      	push	{r7, lr}
 800b61c:	b082      	sub	sp, #8
 800b61e:	af00      	add	r7, sp, #0
 800b620:	6078      	str	r0, [r7, #4]
  MTR_setSpeed(&p_handle->motor, 0);
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	3304      	adds	r3, #4
 800b626:	2100      	movs	r1, #0
 800b628:	4618      	mov	r0, r3
 800b62a:	f7ff fb03 	bl	800ac34 <MTR_setSpeed>

  p_handle->isMotorOn = false;
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	2200      	movs	r2, #0
 800b632:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return;
 800b636:	bf00      	nop
}
 800b638:	3708      	adds	r7, #8
 800b63a:	46bd      	mov	sp, r7
 800b63c:	bd80      	pop	{r7, pc}

0800b63e <WHL_updateEncoder>:

void WHL_updateEncoder(T_WHL_Handle *p_handle,
                       uint32_t      p_count)
{
 800b63e:	b580      	push	{r7, lr}
 800b640:	b082      	sub	sp, #8
 800b642:	af00      	add	r7, sp, #0
 800b644:	6078      	str	r0, [r7, #4]
 800b646:	6039      	str	r1, [r7, #0]
  ENC_update(&p_handle->encoder, p_count);
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	3328      	adds	r3, #40	; 0x28
 800b64c:	683a      	ldr	r2, [r7, #0]
 800b64e:	4611      	mov	r1, r2
 800b650:	4618      	mov	r0, r3
 800b652:	f7fe ffec 	bl	800a62e <ENC_update>

  return;
 800b656:	bf00      	nop
}
 800b658:	3708      	adds	r7, #8
 800b65a:	46bd      	mov	sp, r7
 800b65c:	bd80      	pop	{r7, pc}

0800b65e <WHL_setDirection>:

void WHL_setDirection(T_WHL_Handle *p_handle, T_MTR_DIRECTION p_direction)
{
 800b65e:	b580      	push	{r7, lr}
 800b660:	b082      	sub	sp, #8
 800b662:	af00      	add	r7, sp, #0
 800b664:	6078      	str	r0, [r7, #4]
 800b666:	460b      	mov	r3, r1
 800b668:	70fb      	strb	r3, [r7, #3]
  MTR_setDirection(&p_handle->motor, p_direction);
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	3304      	adds	r3, #4
 800b66e:	78fa      	ldrb	r2, [r7, #3]
 800b670:	4611      	mov	r1, r2
 800b672:	4618      	mov	r0, r3
 800b674:	f7ff fa66 	bl	800ab44 <MTR_setDirection>

  return;
 800b678:	bf00      	nop
}
 800b67a:	3708      	adds	r7, #8
 800b67c:	46bd      	mov	sp, r7
 800b67e:	bd80      	pop	{r7, pc}

0800b680 <WHL_setSpeed>:

void WHL_setSpeed(T_WHL_Handle *p_handle, uint32_t p_speed)
{
 800b680:	b580      	push	{r7, lr}
 800b682:	b082      	sub	sp, #8
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]
 800b688:	6039      	str	r1, [r7, #0]
  if (p_handle->isMotorOn == true)
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800b690:	2b00      	cmp	r3, #0
 800b692:	d006      	beq.n	800b6a2 <WHL_setSpeed+0x22>
  {
    MTR_setSpeed(&p_handle->motor, p_speed);
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	3304      	adds	r3, #4
 800b698:	6839      	ldr	r1, [r7, #0]
 800b69a:	4618      	mov	r0, r3
 800b69c:	f7ff faca 	bl	800ac34 <MTR_setSpeed>
  else
  {
    ; /* Nothing to do */
  }

  return;
 800b6a0:	bf00      	nop
 800b6a2:	bf00      	nop
}
 800b6a4:	3708      	adds	r7, #8
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	bd80      	pop	{r7, pc}

0800b6aa <WHL_setPidKp>:

void WHL_setPidKp(T_WHL_Handle *p_handle, float p_kp)
{
 800b6aa:	b580      	push	{r7, lr}
 800b6ac:	b082      	sub	sp, #8
 800b6ae:	af00      	add	r7, sp, #0
 800b6b0:	6078      	str	r0, [r7, #4]
 800b6b2:	6039      	str	r1, [r7, #0]
  PID_setKp(&p_handle->pid, p_kp);
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	3338      	adds	r3, #56	; 0x38
 800b6b8:	6839      	ldr	r1, [r7, #0]
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	f7ff fb87 	bl	800adce <PID_setKp>

  return;
 800b6c0:	bf00      	nop
}
 800b6c2:	3708      	adds	r7, #8
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	bd80      	pop	{r7, pc}

0800b6c8 <WHL_setPidKi>:

void WHL_setPidKi(T_WHL_Handle *p_handle, float p_ki)
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b082      	sub	sp, #8
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
 800b6d0:	6039      	str	r1, [r7, #0]
  PID_setKi(&p_handle->pid, p_ki);
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	3338      	adds	r3, #56	; 0x38
 800b6d6:	6839      	ldr	r1, [r7, #0]
 800b6d8:	4618      	mov	r0, r3
 800b6da:	f7ff fb85 	bl	800ade8 <PID_setKi>

  return;
 800b6de:	bf00      	nop
}
 800b6e0:	3708      	adds	r7, #8
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	bd80      	pop	{r7, pc}

0800b6e6 <WHL_setPidKd>:

void WHL_setPidKd(T_WHL_Handle *p_handle, float p_kd)
{
 800b6e6:	b580      	push	{r7, lr}
 800b6e8:	b082      	sub	sp, #8
 800b6ea:	af00      	add	r7, sp, #0
 800b6ec:	6078      	str	r0, [r7, #4]
 800b6ee:	6039      	str	r1, [r7, #0]
  PID_setKd(&p_handle->pid, p_kd);
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	3338      	adds	r3, #56	; 0x38
 800b6f4:	6839      	ldr	r1, [r7, #0]
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	f7ff fb83 	bl	800ae02 <PID_setKd>

  return;
 800b6fc:	bf00      	nop
}
 800b6fe:	3708      	adds	r7, #8
 800b700:	46bd      	mov	sp, r7
 800b702:	bd80      	pop	{r7, pc}

0800b704 <WHL_setPidTarget>:

void WHL_setPidTarget(T_WHL_Handle *p_handle, uint32_t p_speed)
{
 800b704:	b590      	push	{r4, r7, lr}
 800b706:	b083      	sub	sp, #12
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
 800b70c:	6039      	str	r1, [r7, #0]
  PID_setTargetValue(&p_handle->pid, p_speed);
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	f103 0438 	add.w	r4, r3, #56	; 0x38
 800b714:	6838      	ldr	r0, [r7, #0]
 800b716:	f7f5 fb49 	bl	8000dac <__aeabi_ui2f>
 800b71a:	4603      	mov	r3, r0
 800b71c:	4619      	mov	r1, r3
 800b71e:	4620      	mov	r0, r4
 800b720:	f7ff fb7c 	bl	800ae1c <PID_setTargetValue>

  return;
 800b724:	bf00      	nop
}
 800b726:	370c      	adds	r7, #12
 800b728:	46bd      	mov	sp, r7
 800b72a:	bd90      	pop	{r4, r7, pc}

0800b72c <WHL_updatePidSpeed>:

void WHL_updatePidSpeed(T_WHL_Handle *p_handle)
{
 800b72c:	b590      	push	{r4, r7, lr}
 800b72e:	b087      	sub	sp, #28
 800b730:	af00      	add	r7, sp, #0
 800b732:	6078      	str	r0, [r7, #4]
  uint16_t l_currentTimeInMs;
  uint16_t l_deltaTimeInMs;
  float    l_measuredSpeed;
  float    l_pidSpeed;

  l_currentTimeInMs      = __HAL_TIM_GET_COUNTER(p_handle->msTimerHandle);
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b73e:	82fb      	strh	r3, [r7, #22]
  l_deltaTimeInMs        = p_handle->lastTimeInMs - l_currentTimeInMs;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	f8b3 20a8 	ldrh.w	r2, [r3, #168]	; 0xa8
 800b746:	8afb      	ldrh	r3, [r7, #22]
 800b748:	1ad3      	subs	r3, r2, r3
 800b74a:	82bb      	strh	r3, [r7, #20]
  p_handle->lastTimeInMs = l_currentTimeInMs;
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	8afa      	ldrh	r2, [r7, #22]
 800b750:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8

  l_measuredSpeed = fabs((float)ENC_getCount(&p_handle->encoder) / (float)l_deltaTimeInMs * STP_DRIVE_PID_ENCODER_TO_SPEED_FACTOR);
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	3328      	adds	r3, #40	; 0x28
 800b758:	4618      	mov	r0, r3
 800b75a:	f7fe ff81 	bl	800a660 <ENC_getCount>
 800b75e:	4603      	mov	r3, r0
 800b760:	4618      	mov	r0, r3
 800b762:	f7f5 fb27 	bl	8000db4 <__aeabi_i2f>
 800b766:	4604      	mov	r4, r0
 800b768:	8abb      	ldrh	r3, [r7, #20]
 800b76a:	4618      	mov	r0, r3
 800b76c:	f7f5 fb1e 	bl	8000dac <__aeabi_ui2f>
 800b770:	4603      	mov	r3, r0
 800b772:	4619      	mov	r1, r3
 800b774:	4620      	mov	r0, r4
 800b776:	f7f5 fc25 	bl	8000fc4 <__aeabi_fdiv>
 800b77a:	4603      	mov	r3, r0
 800b77c:	4916      	ldr	r1, [pc, #88]	; (800b7d8 <WHL_updatePidSpeed+0xac>)
 800b77e:	4618      	mov	r0, r3
 800b780:	f7f5 fb6c 	bl	8000e5c <__aeabi_fmul>
 800b784:	4603      	mov	r3, r0
 800b786:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b78a:	613b      	str	r3, [r7, #16]

  CBU_push(&p_handle->speedBuffer, l_measuredSpeed);
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	336c      	adds	r3, #108	; 0x6c
 800b790:	6939      	ldr	r1, [r7, #16]
 800b792:	4618      	mov	r0, r3
 800b794:	f7fd fdda 	bl	800934c <CBU_push>

  p_handle->averageSpeed = CBU_getAverage(&p_handle->speedBuffer);
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	336c      	adds	r3, #108	; 0x6c
 800b79c:	4618      	mov	r0, r3
 800b79e:	f7fd fdfc 	bl	800939a <CBU_getAverage>
 800b7a2:	4602      	mov	r2, r0
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  l_pidSpeed = PID_update(&p_handle->pid, p_handle->averageSpeed, l_deltaTimeInMs);
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b7b6:	8aba      	ldrh	r2, [r7, #20]
 800b7b8:	4619      	mov	r1, r3
 800b7ba:	f7ff fb3c 	bl	800ae36 <PID_update>
 800b7be:	60f8      	str	r0, [r7, #12]

  WHL_setSpeed(p_handle, l_pidSpeed);
 800b7c0:	68f8      	ldr	r0, [r7, #12]
 800b7c2:	f7f5 fcc1 	bl	8001148 <__aeabi_f2uiz>
 800b7c6:	4603      	mov	r3, r0
 800b7c8:	4619      	mov	r1, r3
 800b7ca:	6878      	ldr	r0, [r7, #4]
 800b7cc:	f7ff ff58 	bl	800b680 <WHL_setSpeed>

  return;
 800b7d0:	bf00      	nop
}
 800b7d2:	371c      	adds	r7, #28
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	bd90      	pop	{r4, r7, pc}
 800b7d8:	47927c00 	.word	0x47927c00

0800b7dc <WHL_getAverageSpeed>:

float WHL_getAverageSpeed(T_WHL_Handle *p_handle)
{
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b084      	sub	sp, #16
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	6078      	str	r0, [r7, #4]
  T_MTR_DIRECTION l_direction;
  float           l_speed;

  l_direction = MTR_getDirection(&p_handle->motor);
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	3304      	adds	r3, #4
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	f7ff fa17 	bl	800ac1c <MTR_getDirection>
 800b7ee:	4603      	mov	r3, r0
 800b7f0:	73fb      	strb	r3, [r7, #15]

  l_speed = l_direction == MTR_DIRECTION_FORWARD ? p_handle->averageSpeed  : p_handle->averageSpeed;
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b7f8:	60bb      	str	r3, [r7, #8]

  return l_speed;
 800b7fa:	68bb      	ldr	r3, [r7, #8]
}
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	3710      	adds	r7, #16
 800b800:	46bd      	mov	sp, r7
 800b802:	bd80      	pop	{r7, pc}

0800b804 <WHL_logInfo>:

void WHL_logInfo(T_WHL_Handle *p_handle)
{
 800b804:	b5b0      	push	{r4, r5, r7, lr}
 800b806:	b08a      	sub	sp, #40	; 0x28
 800b808:	af04      	add	r7, sp, #16
 800b80a:	6078      	str	r0, [r7, #4]
  T_MTR_DIRECTION l_direction;
  uint32_t        l_speed;
  uint32_t        l_count;

  l_direction = MTR_getDirection(&p_handle->motor  );
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	3304      	adds	r3, #4
 800b810:	4618      	mov	r0, r3
 800b812:	f7ff fa03 	bl	800ac1c <MTR_getDirection>
 800b816:	4603      	mov	r3, r0
 800b818:	75fb      	strb	r3, [r7, #23]
  l_speed     = MTR_getSpeed    (&p_handle->motor  );
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	3304      	adds	r3, #4
 800b81e:	4618      	mov	r0, r3
 800b820:	f7ff fa46 	bl	800acb0 <MTR_getSpeed>
 800b824:	6138      	str	r0, [r7, #16]
  l_count     = ENC_getCount    (&p_handle->encoder);
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	3328      	adds	r3, #40	; 0x28
 800b82a:	4618      	mov	r0, r3
 800b82c:	f7fe ff18 	bl	800a660 <ENC_getCount>
 800b830:	4603      	mov	r3, r0
 800b832:	60fb      	str	r3, [r7, #12]

  LOG_info("%s direction / speed / count / average speed: %2u / %2u / %2u / %2d",
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681c      	ldr	r4, [r3, #0]
 800b838:	7dfd      	ldrb	r5, [r7, #23]
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b840:	4618      	mov	r0, r3
 800b842:	f7f5 fc5b 	bl	80010fc <__aeabi_f2iz>
 800b846:	4603      	mov	r3, r0
 800b848:	9302      	str	r3, [sp, #8]
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	9301      	str	r3, [sp, #4]
 800b84e:	693b      	ldr	r3, [r7, #16]
 800b850:	9300      	str	r3, [sp, #0]
 800b852:	462b      	mov	r3, r5
 800b854:	4622      	mov	r2, r4
 800b856:	4904      	ldr	r1, [pc, #16]	; (800b868 <WHL_logInfo+0x64>)
 800b858:	2001      	movs	r0, #1
 800b85a:	f7ff f82f 	bl	800a8bc <LOG_log>
           l_direction,
           l_speed,
           l_count,
      (int)p_handle->averageSpeed);

  return;
 800b85e:	bf00      	nop
}
 800b860:	3718      	adds	r7, #24
 800b862:	46bd      	mov	sp, r7
 800b864:	bdb0      	pop	{r4, r5, r7, pc}
 800b866:	bf00      	nop
 800b868:	08011058 	.word	0x08011058

0800b86c <atof>:
 800b86c:	2100      	movs	r1, #0
 800b86e:	f001 bbff 	b.w	800d070 <strtod>

0800b872 <atoi>:
 800b872:	220a      	movs	r2, #10
 800b874:	2100      	movs	r1, #0
 800b876:	f001 bc8d 	b.w	800d194 <strtol>
	...

0800b87c <__errno>:
 800b87c:	4b01      	ldr	r3, [pc, #4]	; (800b884 <__errno+0x8>)
 800b87e:	6818      	ldr	r0, [r3, #0]
 800b880:	4770      	bx	lr
 800b882:	bf00      	nop
 800b884:	2000001c 	.word	0x2000001c

0800b888 <__libc_init_array>:
 800b888:	b570      	push	{r4, r5, r6, lr}
 800b88a:	2600      	movs	r6, #0
 800b88c:	4d0c      	ldr	r5, [pc, #48]	; (800b8c0 <__libc_init_array+0x38>)
 800b88e:	4c0d      	ldr	r4, [pc, #52]	; (800b8c4 <__libc_init_array+0x3c>)
 800b890:	1b64      	subs	r4, r4, r5
 800b892:	10a4      	asrs	r4, r4, #2
 800b894:	42a6      	cmp	r6, r4
 800b896:	d109      	bne.n	800b8ac <__libc_init_array+0x24>
 800b898:	f004 fad0 	bl	800fe3c <_init>
 800b89c:	2600      	movs	r6, #0
 800b89e:	4d0a      	ldr	r5, [pc, #40]	; (800b8c8 <__libc_init_array+0x40>)
 800b8a0:	4c0a      	ldr	r4, [pc, #40]	; (800b8cc <__libc_init_array+0x44>)
 800b8a2:	1b64      	subs	r4, r4, r5
 800b8a4:	10a4      	asrs	r4, r4, #2
 800b8a6:	42a6      	cmp	r6, r4
 800b8a8:	d105      	bne.n	800b8b6 <__libc_init_array+0x2e>
 800b8aa:	bd70      	pop	{r4, r5, r6, pc}
 800b8ac:	f855 3b04 	ldr.w	r3, [r5], #4
 800b8b0:	4798      	blx	r3
 800b8b2:	3601      	adds	r6, #1
 800b8b4:	e7ee      	b.n	800b894 <__libc_init_array+0xc>
 800b8b6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b8ba:	4798      	blx	r3
 800b8bc:	3601      	adds	r6, #1
 800b8be:	e7f2      	b.n	800b8a6 <__libc_init_array+0x1e>
 800b8c0:	08011564 	.word	0x08011564
 800b8c4:	08011564 	.word	0x08011564
 800b8c8:	08011564 	.word	0x08011564
 800b8cc:	08011568 	.word	0x08011568

0800b8d0 <malloc>:
 800b8d0:	4b02      	ldr	r3, [pc, #8]	; (800b8dc <malloc+0xc>)
 800b8d2:	4601      	mov	r1, r0
 800b8d4:	6818      	ldr	r0, [r3, #0]
 800b8d6:	f000 b85f 	b.w	800b998 <_malloc_r>
 800b8da:	bf00      	nop
 800b8dc:	2000001c 	.word	0x2000001c

0800b8e0 <free>:
 800b8e0:	4b02      	ldr	r3, [pc, #8]	; (800b8ec <free+0xc>)
 800b8e2:	4601      	mov	r1, r0
 800b8e4:	6818      	ldr	r0, [r3, #0]
 800b8e6:	f000 b80b 	b.w	800b900 <_free_r>
 800b8ea:	bf00      	nop
 800b8ec:	2000001c 	.word	0x2000001c

0800b8f0 <memset>:
 800b8f0:	4603      	mov	r3, r0
 800b8f2:	4402      	add	r2, r0
 800b8f4:	4293      	cmp	r3, r2
 800b8f6:	d100      	bne.n	800b8fa <memset+0xa>
 800b8f8:	4770      	bx	lr
 800b8fa:	f803 1b01 	strb.w	r1, [r3], #1
 800b8fe:	e7f9      	b.n	800b8f4 <memset+0x4>

0800b900 <_free_r>:
 800b900:	b538      	push	{r3, r4, r5, lr}
 800b902:	4605      	mov	r5, r0
 800b904:	2900      	cmp	r1, #0
 800b906:	d043      	beq.n	800b990 <_free_r+0x90>
 800b908:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b90c:	1f0c      	subs	r4, r1, #4
 800b90e:	2b00      	cmp	r3, #0
 800b910:	bfb8      	it	lt
 800b912:	18e4      	addlt	r4, r4, r3
 800b914:	f002 ff90 	bl	800e838 <__malloc_lock>
 800b918:	4a1e      	ldr	r2, [pc, #120]	; (800b994 <_free_r+0x94>)
 800b91a:	6813      	ldr	r3, [r2, #0]
 800b91c:	4610      	mov	r0, r2
 800b91e:	b933      	cbnz	r3, 800b92e <_free_r+0x2e>
 800b920:	6063      	str	r3, [r4, #4]
 800b922:	6014      	str	r4, [r2, #0]
 800b924:	4628      	mov	r0, r5
 800b926:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b92a:	f002 bf8b 	b.w	800e844 <__malloc_unlock>
 800b92e:	42a3      	cmp	r3, r4
 800b930:	d90a      	bls.n	800b948 <_free_r+0x48>
 800b932:	6821      	ldr	r1, [r4, #0]
 800b934:	1862      	adds	r2, r4, r1
 800b936:	4293      	cmp	r3, r2
 800b938:	bf01      	itttt	eq
 800b93a:	681a      	ldreq	r2, [r3, #0]
 800b93c:	685b      	ldreq	r3, [r3, #4]
 800b93e:	1852      	addeq	r2, r2, r1
 800b940:	6022      	streq	r2, [r4, #0]
 800b942:	6063      	str	r3, [r4, #4]
 800b944:	6004      	str	r4, [r0, #0]
 800b946:	e7ed      	b.n	800b924 <_free_r+0x24>
 800b948:	461a      	mov	r2, r3
 800b94a:	685b      	ldr	r3, [r3, #4]
 800b94c:	b10b      	cbz	r3, 800b952 <_free_r+0x52>
 800b94e:	42a3      	cmp	r3, r4
 800b950:	d9fa      	bls.n	800b948 <_free_r+0x48>
 800b952:	6811      	ldr	r1, [r2, #0]
 800b954:	1850      	adds	r0, r2, r1
 800b956:	42a0      	cmp	r0, r4
 800b958:	d10b      	bne.n	800b972 <_free_r+0x72>
 800b95a:	6820      	ldr	r0, [r4, #0]
 800b95c:	4401      	add	r1, r0
 800b95e:	1850      	adds	r0, r2, r1
 800b960:	4283      	cmp	r3, r0
 800b962:	6011      	str	r1, [r2, #0]
 800b964:	d1de      	bne.n	800b924 <_free_r+0x24>
 800b966:	6818      	ldr	r0, [r3, #0]
 800b968:	685b      	ldr	r3, [r3, #4]
 800b96a:	4401      	add	r1, r0
 800b96c:	6011      	str	r1, [r2, #0]
 800b96e:	6053      	str	r3, [r2, #4]
 800b970:	e7d8      	b.n	800b924 <_free_r+0x24>
 800b972:	d902      	bls.n	800b97a <_free_r+0x7a>
 800b974:	230c      	movs	r3, #12
 800b976:	602b      	str	r3, [r5, #0]
 800b978:	e7d4      	b.n	800b924 <_free_r+0x24>
 800b97a:	6820      	ldr	r0, [r4, #0]
 800b97c:	1821      	adds	r1, r4, r0
 800b97e:	428b      	cmp	r3, r1
 800b980:	bf01      	itttt	eq
 800b982:	6819      	ldreq	r1, [r3, #0]
 800b984:	685b      	ldreq	r3, [r3, #4]
 800b986:	1809      	addeq	r1, r1, r0
 800b988:	6021      	streq	r1, [r4, #0]
 800b98a:	6063      	str	r3, [r4, #4]
 800b98c:	6054      	str	r4, [r2, #4]
 800b98e:	e7c9      	b.n	800b924 <_free_r+0x24>
 800b990:	bd38      	pop	{r3, r4, r5, pc}
 800b992:	bf00      	nop
 800b994:	20000558 	.word	0x20000558

0800b998 <_malloc_r>:
 800b998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b99a:	1ccd      	adds	r5, r1, #3
 800b99c:	f025 0503 	bic.w	r5, r5, #3
 800b9a0:	3508      	adds	r5, #8
 800b9a2:	2d0c      	cmp	r5, #12
 800b9a4:	bf38      	it	cc
 800b9a6:	250c      	movcc	r5, #12
 800b9a8:	2d00      	cmp	r5, #0
 800b9aa:	4606      	mov	r6, r0
 800b9ac:	db01      	blt.n	800b9b2 <_malloc_r+0x1a>
 800b9ae:	42a9      	cmp	r1, r5
 800b9b0:	d903      	bls.n	800b9ba <_malloc_r+0x22>
 800b9b2:	230c      	movs	r3, #12
 800b9b4:	6033      	str	r3, [r6, #0]
 800b9b6:	2000      	movs	r0, #0
 800b9b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b9ba:	f002 ff3d 	bl	800e838 <__malloc_lock>
 800b9be:	4921      	ldr	r1, [pc, #132]	; (800ba44 <_malloc_r+0xac>)
 800b9c0:	680a      	ldr	r2, [r1, #0]
 800b9c2:	4614      	mov	r4, r2
 800b9c4:	b99c      	cbnz	r4, 800b9ee <_malloc_r+0x56>
 800b9c6:	4f20      	ldr	r7, [pc, #128]	; (800ba48 <_malloc_r+0xb0>)
 800b9c8:	683b      	ldr	r3, [r7, #0]
 800b9ca:	b923      	cbnz	r3, 800b9d6 <_malloc_r+0x3e>
 800b9cc:	4621      	mov	r1, r4
 800b9ce:	4630      	mov	r0, r6
 800b9d0:	f000 fcb4 	bl	800c33c <_sbrk_r>
 800b9d4:	6038      	str	r0, [r7, #0]
 800b9d6:	4629      	mov	r1, r5
 800b9d8:	4630      	mov	r0, r6
 800b9da:	f000 fcaf 	bl	800c33c <_sbrk_r>
 800b9de:	1c43      	adds	r3, r0, #1
 800b9e0:	d123      	bne.n	800ba2a <_malloc_r+0x92>
 800b9e2:	230c      	movs	r3, #12
 800b9e4:	4630      	mov	r0, r6
 800b9e6:	6033      	str	r3, [r6, #0]
 800b9e8:	f002 ff2c 	bl	800e844 <__malloc_unlock>
 800b9ec:	e7e3      	b.n	800b9b6 <_malloc_r+0x1e>
 800b9ee:	6823      	ldr	r3, [r4, #0]
 800b9f0:	1b5b      	subs	r3, r3, r5
 800b9f2:	d417      	bmi.n	800ba24 <_malloc_r+0x8c>
 800b9f4:	2b0b      	cmp	r3, #11
 800b9f6:	d903      	bls.n	800ba00 <_malloc_r+0x68>
 800b9f8:	6023      	str	r3, [r4, #0]
 800b9fa:	441c      	add	r4, r3
 800b9fc:	6025      	str	r5, [r4, #0]
 800b9fe:	e004      	b.n	800ba0a <_malloc_r+0x72>
 800ba00:	6863      	ldr	r3, [r4, #4]
 800ba02:	42a2      	cmp	r2, r4
 800ba04:	bf0c      	ite	eq
 800ba06:	600b      	streq	r3, [r1, #0]
 800ba08:	6053      	strne	r3, [r2, #4]
 800ba0a:	4630      	mov	r0, r6
 800ba0c:	f002 ff1a 	bl	800e844 <__malloc_unlock>
 800ba10:	f104 000b 	add.w	r0, r4, #11
 800ba14:	1d23      	adds	r3, r4, #4
 800ba16:	f020 0007 	bic.w	r0, r0, #7
 800ba1a:	1ac2      	subs	r2, r0, r3
 800ba1c:	d0cc      	beq.n	800b9b8 <_malloc_r+0x20>
 800ba1e:	1a1b      	subs	r3, r3, r0
 800ba20:	50a3      	str	r3, [r4, r2]
 800ba22:	e7c9      	b.n	800b9b8 <_malloc_r+0x20>
 800ba24:	4622      	mov	r2, r4
 800ba26:	6864      	ldr	r4, [r4, #4]
 800ba28:	e7cc      	b.n	800b9c4 <_malloc_r+0x2c>
 800ba2a:	1cc4      	adds	r4, r0, #3
 800ba2c:	f024 0403 	bic.w	r4, r4, #3
 800ba30:	42a0      	cmp	r0, r4
 800ba32:	d0e3      	beq.n	800b9fc <_malloc_r+0x64>
 800ba34:	1a21      	subs	r1, r4, r0
 800ba36:	4630      	mov	r0, r6
 800ba38:	f000 fc80 	bl	800c33c <_sbrk_r>
 800ba3c:	3001      	adds	r0, #1
 800ba3e:	d1dd      	bne.n	800b9fc <_malloc_r+0x64>
 800ba40:	e7cf      	b.n	800b9e2 <_malloc_r+0x4a>
 800ba42:	bf00      	nop
 800ba44:	20000558 	.word	0x20000558
 800ba48:	2000055c 	.word	0x2000055c

0800ba4c <__cvt>:
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba52:	461f      	mov	r7, r3
 800ba54:	bfbb      	ittet	lt
 800ba56:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800ba5a:	461f      	movlt	r7, r3
 800ba5c:	2300      	movge	r3, #0
 800ba5e:	232d      	movlt	r3, #45	; 0x2d
 800ba60:	b088      	sub	sp, #32
 800ba62:	4614      	mov	r4, r2
 800ba64:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ba66:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800ba68:	7013      	strb	r3, [r2, #0]
 800ba6a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ba6c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800ba70:	f023 0820 	bic.w	r8, r3, #32
 800ba74:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ba78:	d005      	beq.n	800ba86 <__cvt+0x3a>
 800ba7a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ba7e:	d100      	bne.n	800ba82 <__cvt+0x36>
 800ba80:	3501      	adds	r5, #1
 800ba82:	2302      	movs	r3, #2
 800ba84:	e000      	b.n	800ba88 <__cvt+0x3c>
 800ba86:	2303      	movs	r3, #3
 800ba88:	aa07      	add	r2, sp, #28
 800ba8a:	9204      	str	r2, [sp, #16]
 800ba8c:	aa06      	add	r2, sp, #24
 800ba8e:	e9cd a202 	strd	sl, r2, [sp, #8]
 800ba92:	e9cd 3500 	strd	r3, r5, [sp]
 800ba96:	4622      	mov	r2, r4
 800ba98:	463b      	mov	r3, r7
 800ba9a:	f001 fc4d 	bl	800d338 <_dtoa_r>
 800ba9e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800baa2:	4606      	mov	r6, r0
 800baa4:	d102      	bne.n	800baac <__cvt+0x60>
 800baa6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800baa8:	07db      	lsls	r3, r3, #31
 800baaa:	d522      	bpl.n	800baf2 <__cvt+0xa6>
 800baac:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bab0:	eb06 0905 	add.w	r9, r6, r5
 800bab4:	d110      	bne.n	800bad8 <__cvt+0x8c>
 800bab6:	7833      	ldrb	r3, [r6, #0]
 800bab8:	2b30      	cmp	r3, #48	; 0x30
 800baba:	d10a      	bne.n	800bad2 <__cvt+0x86>
 800babc:	2200      	movs	r2, #0
 800babe:	2300      	movs	r3, #0
 800bac0:	4620      	mov	r0, r4
 800bac2:	4639      	mov	r1, r7
 800bac4:	f7f4 ffdc 	bl	8000a80 <__aeabi_dcmpeq>
 800bac8:	b918      	cbnz	r0, 800bad2 <__cvt+0x86>
 800baca:	f1c5 0501 	rsb	r5, r5, #1
 800bace:	f8ca 5000 	str.w	r5, [sl]
 800bad2:	f8da 3000 	ldr.w	r3, [sl]
 800bad6:	4499      	add	r9, r3
 800bad8:	2200      	movs	r2, #0
 800bada:	2300      	movs	r3, #0
 800badc:	4620      	mov	r0, r4
 800bade:	4639      	mov	r1, r7
 800bae0:	f7f4 ffce 	bl	8000a80 <__aeabi_dcmpeq>
 800bae4:	b108      	cbz	r0, 800baea <__cvt+0x9e>
 800bae6:	f8cd 901c 	str.w	r9, [sp, #28]
 800baea:	2230      	movs	r2, #48	; 0x30
 800baec:	9b07      	ldr	r3, [sp, #28]
 800baee:	454b      	cmp	r3, r9
 800baf0:	d307      	bcc.n	800bb02 <__cvt+0xb6>
 800baf2:	4630      	mov	r0, r6
 800baf4:	9b07      	ldr	r3, [sp, #28]
 800baf6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800baf8:	1b9b      	subs	r3, r3, r6
 800bafa:	6013      	str	r3, [r2, #0]
 800bafc:	b008      	add	sp, #32
 800bafe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb02:	1c59      	adds	r1, r3, #1
 800bb04:	9107      	str	r1, [sp, #28]
 800bb06:	701a      	strb	r2, [r3, #0]
 800bb08:	e7f0      	b.n	800baec <__cvt+0xa0>

0800bb0a <__exponent>:
 800bb0a:	4603      	mov	r3, r0
 800bb0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bb0e:	2900      	cmp	r1, #0
 800bb10:	f803 2b02 	strb.w	r2, [r3], #2
 800bb14:	bfb6      	itet	lt
 800bb16:	222d      	movlt	r2, #45	; 0x2d
 800bb18:	222b      	movge	r2, #43	; 0x2b
 800bb1a:	4249      	neglt	r1, r1
 800bb1c:	2909      	cmp	r1, #9
 800bb1e:	7042      	strb	r2, [r0, #1]
 800bb20:	dd2b      	ble.n	800bb7a <__exponent+0x70>
 800bb22:	f10d 0407 	add.w	r4, sp, #7
 800bb26:	46a4      	mov	ip, r4
 800bb28:	270a      	movs	r7, #10
 800bb2a:	fb91 f6f7 	sdiv	r6, r1, r7
 800bb2e:	460a      	mov	r2, r1
 800bb30:	46a6      	mov	lr, r4
 800bb32:	fb07 1516 	mls	r5, r7, r6, r1
 800bb36:	2a63      	cmp	r2, #99	; 0x63
 800bb38:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800bb3c:	4631      	mov	r1, r6
 800bb3e:	f104 34ff 	add.w	r4, r4, #4294967295
 800bb42:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800bb46:	dcf0      	bgt.n	800bb2a <__exponent+0x20>
 800bb48:	3130      	adds	r1, #48	; 0x30
 800bb4a:	f1ae 0502 	sub.w	r5, lr, #2
 800bb4e:	f804 1c01 	strb.w	r1, [r4, #-1]
 800bb52:	4629      	mov	r1, r5
 800bb54:	1c44      	adds	r4, r0, #1
 800bb56:	4561      	cmp	r1, ip
 800bb58:	d30a      	bcc.n	800bb70 <__exponent+0x66>
 800bb5a:	f10d 0209 	add.w	r2, sp, #9
 800bb5e:	eba2 020e 	sub.w	r2, r2, lr
 800bb62:	4565      	cmp	r5, ip
 800bb64:	bf88      	it	hi
 800bb66:	2200      	movhi	r2, #0
 800bb68:	4413      	add	r3, r2
 800bb6a:	1a18      	subs	r0, r3, r0
 800bb6c:	b003      	add	sp, #12
 800bb6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb70:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bb74:	f804 2f01 	strb.w	r2, [r4, #1]!
 800bb78:	e7ed      	b.n	800bb56 <__exponent+0x4c>
 800bb7a:	2330      	movs	r3, #48	; 0x30
 800bb7c:	3130      	adds	r1, #48	; 0x30
 800bb7e:	7083      	strb	r3, [r0, #2]
 800bb80:	70c1      	strb	r1, [r0, #3]
 800bb82:	1d03      	adds	r3, r0, #4
 800bb84:	e7f1      	b.n	800bb6a <__exponent+0x60>
	...

0800bb88 <_printf_float>:
 800bb88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb8c:	b091      	sub	sp, #68	; 0x44
 800bb8e:	460c      	mov	r4, r1
 800bb90:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800bb94:	4616      	mov	r6, r2
 800bb96:	461f      	mov	r7, r3
 800bb98:	4605      	mov	r5, r0
 800bb9a:	f002 fe17 	bl	800e7cc <_localeconv_r>
 800bb9e:	6803      	ldr	r3, [r0, #0]
 800bba0:	4618      	mov	r0, r3
 800bba2:	9309      	str	r3, [sp, #36]	; 0x24
 800bba4:	f7f4 fb40 	bl	8000228 <strlen>
 800bba8:	2300      	movs	r3, #0
 800bbaa:	930e      	str	r3, [sp, #56]	; 0x38
 800bbac:	f8d8 3000 	ldr.w	r3, [r8]
 800bbb0:	900a      	str	r0, [sp, #40]	; 0x28
 800bbb2:	3307      	adds	r3, #7
 800bbb4:	f023 0307 	bic.w	r3, r3, #7
 800bbb8:	f103 0208 	add.w	r2, r3, #8
 800bbbc:	f894 9018 	ldrb.w	r9, [r4, #24]
 800bbc0:	f8d4 b000 	ldr.w	fp, [r4]
 800bbc4:	f8c8 2000 	str.w	r2, [r8]
 800bbc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbcc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800bbd0:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800bbd4:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800bbd8:	930b      	str	r3, [sp, #44]	; 0x2c
 800bbda:	f04f 32ff 	mov.w	r2, #4294967295
 800bbde:	4640      	mov	r0, r8
 800bbe0:	4b9c      	ldr	r3, [pc, #624]	; (800be54 <_printf_float+0x2cc>)
 800bbe2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bbe4:	f7f4 ff7e 	bl	8000ae4 <__aeabi_dcmpun>
 800bbe8:	bb70      	cbnz	r0, 800bc48 <_printf_float+0xc0>
 800bbea:	f04f 32ff 	mov.w	r2, #4294967295
 800bbee:	4640      	mov	r0, r8
 800bbf0:	4b98      	ldr	r3, [pc, #608]	; (800be54 <_printf_float+0x2cc>)
 800bbf2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bbf4:	f7f4 ff58 	bl	8000aa8 <__aeabi_dcmple>
 800bbf8:	bb30      	cbnz	r0, 800bc48 <_printf_float+0xc0>
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	4640      	mov	r0, r8
 800bc00:	4651      	mov	r1, sl
 800bc02:	f7f4 ff47 	bl	8000a94 <__aeabi_dcmplt>
 800bc06:	b110      	cbz	r0, 800bc0e <_printf_float+0x86>
 800bc08:	232d      	movs	r3, #45	; 0x2d
 800bc0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bc0e:	4b92      	ldr	r3, [pc, #584]	; (800be58 <_printf_float+0x2d0>)
 800bc10:	4892      	ldr	r0, [pc, #584]	; (800be5c <_printf_float+0x2d4>)
 800bc12:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800bc16:	bf94      	ite	ls
 800bc18:	4698      	movls	r8, r3
 800bc1a:	4680      	movhi	r8, r0
 800bc1c:	2303      	movs	r3, #3
 800bc1e:	f04f 0a00 	mov.w	sl, #0
 800bc22:	6123      	str	r3, [r4, #16]
 800bc24:	f02b 0304 	bic.w	r3, fp, #4
 800bc28:	6023      	str	r3, [r4, #0]
 800bc2a:	4633      	mov	r3, r6
 800bc2c:	4621      	mov	r1, r4
 800bc2e:	4628      	mov	r0, r5
 800bc30:	9700      	str	r7, [sp, #0]
 800bc32:	aa0f      	add	r2, sp, #60	; 0x3c
 800bc34:	f000 f9d4 	bl	800bfe0 <_printf_common>
 800bc38:	3001      	adds	r0, #1
 800bc3a:	f040 8090 	bne.w	800bd5e <_printf_float+0x1d6>
 800bc3e:	f04f 30ff 	mov.w	r0, #4294967295
 800bc42:	b011      	add	sp, #68	; 0x44
 800bc44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc48:	4642      	mov	r2, r8
 800bc4a:	4653      	mov	r3, sl
 800bc4c:	4640      	mov	r0, r8
 800bc4e:	4651      	mov	r1, sl
 800bc50:	f7f4 ff48 	bl	8000ae4 <__aeabi_dcmpun>
 800bc54:	b148      	cbz	r0, 800bc6a <_printf_float+0xe2>
 800bc56:	f1ba 0f00 	cmp.w	sl, #0
 800bc5a:	bfb8      	it	lt
 800bc5c:	232d      	movlt	r3, #45	; 0x2d
 800bc5e:	4880      	ldr	r0, [pc, #512]	; (800be60 <_printf_float+0x2d8>)
 800bc60:	bfb8      	it	lt
 800bc62:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800bc66:	4b7f      	ldr	r3, [pc, #508]	; (800be64 <_printf_float+0x2dc>)
 800bc68:	e7d3      	b.n	800bc12 <_printf_float+0x8a>
 800bc6a:	6863      	ldr	r3, [r4, #4]
 800bc6c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800bc70:	1c5a      	adds	r2, r3, #1
 800bc72:	d142      	bne.n	800bcfa <_printf_float+0x172>
 800bc74:	2306      	movs	r3, #6
 800bc76:	6063      	str	r3, [r4, #4]
 800bc78:	2200      	movs	r2, #0
 800bc7a:	9206      	str	r2, [sp, #24]
 800bc7c:	aa0e      	add	r2, sp, #56	; 0x38
 800bc7e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800bc82:	aa0d      	add	r2, sp, #52	; 0x34
 800bc84:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800bc88:	9203      	str	r2, [sp, #12]
 800bc8a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800bc8e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800bc92:	6023      	str	r3, [r4, #0]
 800bc94:	6863      	ldr	r3, [r4, #4]
 800bc96:	4642      	mov	r2, r8
 800bc98:	9300      	str	r3, [sp, #0]
 800bc9a:	4628      	mov	r0, r5
 800bc9c:	4653      	mov	r3, sl
 800bc9e:	910b      	str	r1, [sp, #44]	; 0x2c
 800bca0:	f7ff fed4 	bl	800ba4c <__cvt>
 800bca4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bca6:	4680      	mov	r8, r0
 800bca8:	2947      	cmp	r1, #71	; 0x47
 800bcaa:	990d      	ldr	r1, [sp, #52]	; 0x34
 800bcac:	d108      	bne.n	800bcc0 <_printf_float+0x138>
 800bcae:	1cc8      	adds	r0, r1, #3
 800bcb0:	db02      	blt.n	800bcb8 <_printf_float+0x130>
 800bcb2:	6863      	ldr	r3, [r4, #4]
 800bcb4:	4299      	cmp	r1, r3
 800bcb6:	dd40      	ble.n	800bd3a <_printf_float+0x1b2>
 800bcb8:	f1a9 0902 	sub.w	r9, r9, #2
 800bcbc:	fa5f f989 	uxtb.w	r9, r9
 800bcc0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800bcc4:	d81f      	bhi.n	800bd06 <_printf_float+0x17e>
 800bcc6:	464a      	mov	r2, r9
 800bcc8:	3901      	subs	r1, #1
 800bcca:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800bcce:	910d      	str	r1, [sp, #52]	; 0x34
 800bcd0:	f7ff ff1b 	bl	800bb0a <__exponent>
 800bcd4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bcd6:	4682      	mov	sl, r0
 800bcd8:	1813      	adds	r3, r2, r0
 800bcda:	2a01      	cmp	r2, #1
 800bcdc:	6123      	str	r3, [r4, #16]
 800bcde:	dc02      	bgt.n	800bce6 <_printf_float+0x15e>
 800bce0:	6822      	ldr	r2, [r4, #0]
 800bce2:	07d2      	lsls	r2, r2, #31
 800bce4:	d501      	bpl.n	800bcea <_printf_float+0x162>
 800bce6:	3301      	adds	r3, #1
 800bce8:	6123      	str	r3, [r4, #16]
 800bcea:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d09b      	beq.n	800bc2a <_printf_float+0xa2>
 800bcf2:	232d      	movs	r3, #45	; 0x2d
 800bcf4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bcf8:	e797      	b.n	800bc2a <_printf_float+0xa2>
 800bcfa:	2947      	cmp	r1, #71	; 0x47
 800bcfc:	d1bc      	bne.n	800bc78 <_printf_float+0xf0>
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d1ba      	bne.n	800bc78 <_printf_float+0xf0>
 800bd02:	2301      	movs	r3, #1
 800bd04:	e7b7      	b.n	800bc76 <_printf_float+0xee>
 800bd06:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800bd0a:	d118      	bne.n	800bd3e <_printf_float+0x1b6>
 800bd0c:	2900      	cmp	r1, #0
 800bd0e:	6863      	ldr	r3, [r4, #4]
 800bd10:	dd0b      	ble.n	800bd2a <_printf_float+0x1a2>
 800bd12:	6121      	str	r1, [r4, #16]
 800bd14:	b913      	cbnz	r3, 800bd1c <_printf_float+0x194>
 800bd16:	6822      	ldr	r2, [r4, #0]
 800bd18:	07d0      	lsls	r0, r2, #31
 800bd1a:	d502      	bpl.n	800bd22 <_printf_float+0x19a>
 800bd1c:	3301      	adds	r3, #1
 800bd1e:	440b      	add	r3, r1
 800bd20:	6123      	str	r3, [r4, #16]
 800bd22:	f04f 0a00 	mov.w	sl, #0
 800bd26:	65a1      	str	r1, [r4, #88]	; 0x58
 800bd28:	e7df      	b.n	800bcea <_printf_float+0x162>
 800bd2a:	b913      	cbnz	r3, 800bd32 <_printf_float+0x1aa>
 800bd2c:	6822      	ldr	r2, [r4, #0]
 800bd2e:	07d2      	lsls	r2, r2, #31
 800bd30:	d501      	bpl.n	800bd36 <_printf_float+0x1ae>
 800bd32:	3302      	adds	r3, #2
 800bd34:	e7f4      	b.n	800bd20 <_printf_float+0x198>
 800bd36:	2301      	movs	r3, #1
 800bd38:	e7f2      	b.n	800bd20 <_printf_float+0x198>
 800bd3a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800bd3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bd40:	4299      	cmp	r1, r3
 800bd42:	db05      	blt.n	800bd50 <_printf_float+0x1c8>
 800bd44:	6823      	ldr	r3, [r4, #0]
 800bd46:	6121      	str	r1, [r4, #16]
 800bd48:	07d8      	lsls	r0, r3, #31
 800bd4a:	d5ea      	bpl.n	800bd22 <_printf_float+0x19a>
 800bd4c:	1c4b      	adds	r3, r1, #1
 800bd4e:	e7e7      	b.n	800bd20 <_printf_float+0x198>
 800bd50:	2900      	cmp	r1, #0
 800bd52:	bfcc      	ite	gt
 800bd54:	2201      	movgt	r2, #1
 800bd56:	f1c1 0202 	rsble	r2, r1, #2
 800bd5a:	4413      	add	r3, r2
 800bd5c:	e7e0      	b.n	800bd20 <_printf_float+0x198>
 800bd5e:	6823      	ldr	r3, [r4, #0]
 800bd60:	055a      	lsls	r2, r3, #21
 800bd62:	d407      	bmi.n	800bd74 <_printf_float+0x1ec>
 800bd64:	6923      	ldr	r3, [r4, #16]
 800bd66:	4642      	mov	r2, r8
 800bd68:	4631      	mov	r1, r6
 800bd6a:	4628      	mov	r0, r5
 800bd6c:	47b8      	blx	r7
 800bd6e:	3001      	adds	r0, #1
 800bd70:	d12b      	bne.n	800bdca <_printf_float+0x242>
 800bd72:	e764      	b.n	800bc3e <_printf_float+0xb6>
 800bd74:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800bd78:	f240 80dd 	bls.w	800bf36 <_printf_float+0x3ae>
 800bd7c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bd80:	2200      	movs	r2, #0
 800bd82:	2300      	movs	r3, #0
 800bd84:	f7f4 fe7c 	bl	8000a80 <__aeabi_dcmpeq>
 800bd88:	2800      	cmp	r0, #0
 800bd8a:	d033      	beq.n	800bdf4 <_printf_float+0x26c>
 800bd8c:	2301      	movs	r3, #1
 800bd8e:	4631      	mov	r1, r6
 800bd90:	4628      	mov	r0, r5
 800bd92:	4a35      	ldr	r2, [pc, #212]	; (800be68 <_printf_float+0x2e0>)
 800bd94:	47b8      	blx	r7
 800bd96:	3001      	adds	r0, #1
 800bd98:	f43f af51 	beq.w	800bc3e <_printf_float+0xb6>
 800bd9c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800bda0:	429a      	cmp	r2, r3
 800bda2:	db02      	blt.n	800bdaa <_printf_float+0x222>
 800bda4:	6823      	ldr	r3, [r4, #0]
 800bda6:	07d8      	lsls	r0, r3, #31
 800bda8:	d50f      	bpl.n	800bdca <_printf_float+0x242>
 800bdaa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bdae:	4631      	mov	r1, r6
 800bdb0:	4628      	mov	r0, r5
 800bdb2:	47b8      	blx	r7
 800bdb4:	3001      	adds	r0, #1
 800bdb6:	f43f af42 	beq.w	800bc3e <_printf_float+0xb6>
 800bdba:	f04f 0800 	mov.w	r8, #0
 800bdbe:	f104 091a 	add.w	r9, r4, #26
 800bdc2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bdc4:	3b01      	subs	r3, #1
 800bdc6:	4543      	cmp	r3, r8
 800bdc8:	dc09      	bgt.n	800bdde <_printf_float+0x256>
 800bdca:	6823      	ldr	r3, [r4, #0]
 800bdcc:	079b      	lsls	r3, r3, #30
 800bdce:	f100 8102 	bmi.w	800bfd6 <_printf_float+0x44e>
 800bdd2:	68e0      	ldr	r0, [r4, #12]
 800bdd4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bdd6:	4298      	cmp	r0, r3
 800bdd8:	bfb8      	it	lt
 800bdda:	4618      	movlt	r0, r3
 800bddc:	e731      	b.n	800bc42 <_printf_float+0xba>
 800bdde:	2301      	movs	r3, #1
 800bde0:	464a      	mov	r2, r9
 800bde2:	4631      	mov	r1, r6
 800bde4:	4628      	mov	r0, r5
 800bde6:	47b8      	blx	r7
 800bde8:	3001      	adds	r0, #1
 800bdea:	f43f af28 	beq.w	800bc3e <_printf_float+0xb6>
 800bdee:	f108 0801 	add.w	r8, r8, #1
 800bdf2:	e7e6      	b.n	800bdc2 <_printf_float+0x23a>
 800bdf4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	dc38      	bgt.n	800be6c <_printf_float+0x2e4>
 800bdfa:	2301      	movs	r3, #1
 800bdfc:	4631      	mov	r1, r6
 800bdfe:	4628      	mov	r0, r5
 800be00:	4a19      	ldr	r2, [pc, #100]	; (800be68 <_printf_float+0x2e0>)
 800be02:	47b8      	blx	r7
 800be04:	3001      	adds	r0, #1
 800be06:	f43f af1a 	beq.w	800bc3e <_printf_float+0xb6>
 800be0a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800be0e:	4313      	orrs	r3, r2
 800be10:	d102      	bne.n	800be18 <_printf_float+0x290>
 800be12:	6823      	ldr	r3, [r4, #0]
 800be14:	07d9      	lsls	r1, r3, #31
 800be16:	d5d8      	bpl.n	800bdca <_printf_float+0x242>
 800be18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800be1c:	4631      	mov	r1, r6
 800be1e:	4628      	mov	r0, r5
 800be20:	47b8      	blx	r7
 800be22:	3001      	adds	r0, #1
 800be24:	f43f af0b 	beq.w	800bc3e <_printf_float+0xb6>
 800be28:	f04f 0900 	mov.w	r9, #0
 800be2c:	f104 0a1a 	add.w	sl, r4, #26
 800be30:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800be32:	425b      	negs	r3, r3
 800be34:	454b      	cmp	r3, r9
 800be36:	dc01      	bgt.n	800be3c <_printf_float+0x2b4>
 800be38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800be3a:	e794      	b.n	800bd66 <_printf_float+0x1de>
 800be3c:	2301      	movs	r3, #1
 800be3e:	4652      	mov	r2, sl
 800be40:	4631      	mov	r1, r6
 800be42:	4628      	mov	r0, r5
 800be44:	47b8      	blx	r7
 800be46:	3001      	adds	r0, #1
 800be48:	f43f aef9 	beq.w	800bc3e <_printf_float+0xb6>
 800be4c:	f109 0901 	add.w	r9, r9, #1
 800be50:	e7ee      	b.n	800be30 <_printf_float+0x2a8>
 800be52:	bf00      	nop
 800be54:	7fefffff 	.word	0x7fefffff
 800be58:	080110b8 	.word	0x080110b8
 800be5c:	080110bc 	.word	0x080110bc
 800be60:	080110c4 	.word	0x080110c4
 800be64:	080110c0 	.word	0x080110c0
 800be68:	080110c8 	.word	0x080110c8
 800be6c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800be6e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800be70:	429a      	cmp	r2, r3
 800be72:	bfa8      	it	ge
 800be74:	461a      	movge	r2, r3
 800be76:	2a00      	cmp	r2, #0
 800be78:	4691      	mov	r9, r2
 800be7a:	dc37      	bgt.n	800beec <_printf_float+0x364>
 800be7c:	f04f 0b00 	mov.w	fp, #0
 800be80:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800be84:	f104 021a 	add.w	r2, r4, #26
 800be88:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800be8c:	ebaa 0309 	sub.w	r3, sl, r9
 800be90:	455b      	cmp	r3, fp
 800be92:	dc33      	bgt.n	800befc <_printf_float+0x374>
 800be94:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800be98:	429a      	cmp	r2, r3
 800be9a:	db3b      	blt.n	800bf14 <_printf_float+0x38c>
 800be9c:	6823      	ldr	r3, [r4, #0]
 800be9e:	07da      	lsls	r2, r3, #31
 800bea0:	d438      	bmi.n	800bf14 <_printf_float+0x38c>
 800bea2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bea4:	990d      	ldr	r1, [sp, #52]	; 0x34
 800bea6:	eba2 030a 	sub.w	r3, r2, sl
 800beaa:	eba2 0901 	sub.w	r9, r2, r1
 800beae:	4599      	cmp	r9, r3
 800beb0:	bfa8      	it	ge
 800beb2:	4699      	movge	r9, r3
 800beb4:	f1b9 0f00 	cmp.w	r9, #0
 800beb8:	dc34      	bgt.n	800bf24 <_printf_float+0x39c>
 800beba:	f04f 0800 	mov.w	r8, #0
 800bebe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bec2:	f104 0a1a 	add.w	sl, r4, #26
 800bec6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800beca:	1a9b      	subs	r3, r3, r2
 800becc:	eba3 0309 	sub.w	r3, r3, r9
 800bed0:	4543      	cmp	r3, r8
 800bed2:	f77f af7a 	ble.w	800bdca <_printf_float+0x242>
 800bed6:	2301      	movs	r3, #1
 800bed8:	4652      	mov	r2, sl
 800beda:	4631      	mov	r1, r6
 800bedc:	4628      	mov	r0, r5
 800bede:	47b8      	blx	r7
 800bee0:	3001      	adds	r0, #1
 800bee2:	f43f aeac 	beq.w	800bc3e <_printf_float+0xb6>
 800bee6:	f108 0801 	add.w	r8, r8, #1
 800beea:	e7ec      	b.n	800bec6 <_printf_float+0x33e>
 800beec:	4613      	mov	r3, r2
 800beee:	4631      	mov	r1, r6
 800bef0:	4642      	mov	r2, r8
 800bef2:	4628      	mov	r0, r5
 800bef4:	47b8      	blx	r7
 800bef6:	3001      	adds	r0, #1
 800bef8:	d1c0      	bne.n	800be7c <_printf_float+0x2f4>
 800befa:	e6a0      	b.n	800bc3e <_printf_float+0xb6>
 800befc:	2301      	movs	r3, #1
 800befe:	4631      	mov	r1, r6
 800bf00:	4628      	mov	r0, r5
 800bf02:	920b      	str	r2, [sp, #44]	; 0x2c
 800bf04:	47b8      	blx	r7
 800bf06:	3001      	adds	r0, #1
 800bf08:	f43f ae99 	beq.w	800bc3e <_printf_float+0xb6>
 800bf0c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bf0e:	f10b 0b01 	add.w	fp, fp, #1
 800bf12:	e7b9      	b.n	800be88 <_printf_float+0x300>
 800bf14:	4631      	mov	r1, r6
 800bf16:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bf1a:	4628      	mov	r0, r5
 800bf1c:	47b8      	blx	r7
 800bf1e:	3001      	adds	r0, #1
 800bf20:	d1bf      	bne.n	800bea2 <_printf_float+0x31a>
 800bf22:	e68c      	b.n	800bc3e <_printf_float+0xb6>
 800bf24:	464b      	mov	r3, r9
 800bf26:	4631      	mov	r1, r6
 800bf28:	4628      	mov	r0, r5
 800bf2a:	eb08 020a 	add.w	r2, r8, sl
 800bf2e:	47b8      	blx	r7
 800bf30:	3001      	adds	r0, #1
 800bf32:	d1c2      	bne.n	800beba <_printf_float+0x332>
 800bf34:	e683      	b.n	800bc3e <_printf_float+0xb6>
 800bf36:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bf38:	2a01      	cmp	r2, #1
 800bf3a:	dc01      	bgt.n	800bf40 <_printf_float+0x3b8>
 800bf3c:	07db      	lsls	r3, r3, #31
 800bf3e:	d537      	bpl.n	800bfb0 <_printf_float+0x428>
 800bf40:	2301      	movs	r3, #1
 800bf42:	4642      	mov	r2, r8
 800bf44:	4631      	mov	r1, r6
 800bf46:	4628      	mov	r0, r5
 800bf48:	47b8      	blx	r7
 800bf4a:	3001      	adds	r0, #1
 800bf4c:	f43f ae77 	beq.w	800bc3e <_printf_float+0xb6>
 800bf50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bf54:	4631      	mov	r1, r6
 800bf56:	4628      	mov	r0, r5
 800bf58:	47b8      	blx	r7
 800bf5a:	3001      	adds	r0, #1
 800bf5c:	f43f ae6f 	beq.w	800bc3e <_printf_float+0xb6>
 800bf60:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bf64:	2200      	movs	r2, #0
 800bf66:	2300      	movs	r3, #0
 800bf68:	f7f4 fd8a 	bl	8000a80 <__aeabi_dcmpeq>
 800bf6c:	b9d8      	cbnz	r0, 800bfa6 <_printf_float+0x41e>
 800bf6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bf70:	f108 0201 	add.w	r2, r8, #1
 800bf74:	3b01      	subs	r3, #1
 800bf76:	4631      	mov	r1, r6
 800bf78:	4628      	mov	r0, r5
 800bf7a:	47b8      	blx	r7
 800bf7c:	3001      	adds	r0, #1
 800bf7e:	d10e      	bne.n	800bf9e <_printf_float+0x416>
 800bf80:	e65d      	b.n	800bc3e <_printf_float+0xb6>
 800bf82:	2301      	movs	r3, #1
 800bf84:	464a      	mov	r2, r9
 800bf86:	4631      	mov	r1, r6
 800bf88:	4628      	mov	r0, r5
 800bf8a:	47b8      	blx	r7
 800bf8c:	3001      	adds	r0, #1
 800bf8e:	f43f ae56 	beq.w	800bc3e <_printf_float+0xb6>
 800bf92:	f108 0801 	add.w	r8, r8, #1
 800bf96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bf98:	3b01      	subs	r3, #1
 800bf9a:	4543      	cmp	r3, r8
 800bf9c:	dcf1      	bgt.n	800bf82 <_printf_float+0x3fa>
 800bf9e:	4653      	mov	r3, sl
 800bfa0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800bfa4:	e6e0      	b.n	800bd68 <_printf_float+0x1e0>
 800bfa6:	f04f 0800 	mov.w	r8, #0
 800bfaa:	f104 091a 	add.w	r9, r4, #26
 800bfae:	e7f2      	b.n	800bf96 <_printf_float+0x40e>
 800bfb0:	2301      	movs	r3, #1
 800bfb2:	4642      	mov	r2, r8
 800bfb4:	e7df      	b.n	800bf76 <_printf_float+0x3ee>
 800bfb6:	2301      	movs	r3, #1
 800bfb8:	464a      	mov	r2, r9
 800bfba:	4631      	mov	r1, r6
 800bfbc:	4628      	mov	r0, r5
 800bfbe:	47b8      	blx	r7
 800bfc0:	3001      	adds	r0, #1
 800bfc2:	f43f ae3c 	beq.w	800bc3e <_printf_float+0xb6>
 800bfc6:	f108 0801 	add.w	r8, r8, #1
 800bfca:	68e3      	ldr	r3, [r4, #12]
 800bfcc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800bfce:	1a5b      	subs	r3, r3, r1
 800bfd0:	4543      	cmp	r3, r8
 800bfd2:	dcf0      	bgt.n	800bfb6 <_printf_float+0x42e>
 800bfd4:	e6fd      	b.n	800bdd2 <_printf_float+0x24a>
 800bfd6:	f04f 0800 	mov.w	r8, #0
 800bfda:	f104 0919 	add.w	r9, r4, #25
 800bfde:	e7f4      	b.n	800bfca <_printf_float+0x442>

0800bfe0 <_printf_common>:
 800bfe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bfe4:	4616      	mov	r6, r2
 800bfe6:	4699      	mov	r9, r3
 800bfe8:	688a      	ldr	r2, [r1, #8]
 800bfea:	690b      	ldr	r3, [r1, #16]
 800bfec:	4607      	mov	r7, r0
 800bfee:	4293      	cmp	r3, r2
 800bff0:	bfb8      	it	lt
 800bff2:	4613      	movlt	r3, r2
 800bff4:	6033      	str	r3, [r6, #0]
 800bff6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bffa:	460c      	mov	r4, r1
 800bffc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c000:	b10a      	cbz	r2, 800c006 <_printf_common+0x26>
 800c002:	3301      	adds	r3, #1
 800c004:	6033      	str	r3, [r6, #0]
 800c006:	6823      	ldr	r3, [r4, #0]
 800c008:	0699      	lsls	r1, r3, #26
 800c00a:	bf42      	ittt	mi
 800c00c:	6833      	ldrmi	r3, [r6, #0]
 800c00e:	3302      	addmi	r3, #2
 800c010:	6033      	strmi	r3, [r6, #0]
 800c012:	6825      	ldr	r5, [r4, #0]
 800c014:	f015 0506 	ands.w	r5, r5, #6
 800c018:	d106      	bne.n	800c028 <_printf_common+0x48>
 800c01a:	f104 0a19 	add.w	sl, r4, #25
 800c01e:	68e3      	ldr	r3, [r4, #12]
 800c020:	6832      	ldr	r2, [r6, #0]
 800c022:	1a9b      	subs	r3, r3, r2
 800c024:	42ab      	cmp	r3, r5
 800c026:	dc28      	bgt.n	800c07a <_printf_common+0x9a>
 800c028:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c02c:	1e13      	subs	r3, r2, #0
 800c02e:	6822      	ldr	r2, [r4, #0]
 800c030:	bf18      	it	ne
 800c032:	2301      	movne	r3, #1
 800c034:	0692      	lsls	r2, r2, #26
 800c036:	d42d      	bmi.n	800c094 <_printf_common+0xb4>
 800c038:	4649      	mov	r1, r9
 800c03a:	4638      	mov	r0, r7
 800c03c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c040:	47c0      	blx	r8
 800c042:	3001      	adds	r0, #1
 800c044:	d020      	beq.n	800c088 <_printf_common+0xa8>
 800c046:	6823      	ldr	r3, [r4, #0]
 800c048:	68e5      	ldr	r5, [r4, #12]
 800c04a:	f003 0306 	and.w	r3, r3, #6
 800c04e:	2b04      	cmp	r3, #4
 800c050:	bf18      	it	ne
 800c052:	2500      	movne	r5, #0
 800c054:	6832      	ldr	r2, [r6, #0]
 800c056:	f04f 0600 	mov.w	r6, #0
 800c05a:	68a3      	ldr	r3, [r4, #8]
 800c05c:	bf08      	it	eq
 800c05e:	1aad      	subeq	r5, r5, r2
 800c060:	6922      	ldr	r2, [r4, #16]
 800c062:	bf08      	it	eq
 800c064:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c068:	4293      	cmp	r3, r2
 800c06a:	bfc4      	itt	gt
 800c06c:	1a9b      	subgt	r3, r3, r2
 800c06e:	18ed      	addgt	r5, r5, r3
 800c070:	341a      	adds	r4, #26
 800c072:	42b5      	cmp	r5, r6
 800c074:	d11a      	bne.n	800c0ac <_printf_common+0xcc>
 800c076:	2000      	movs	r0, #0
 800c078:	e008      	b.n	800c08c <_printf_common+0xac>
 800c07a:	2301      	movs	r3, #1
 800c07c:	4652      	mov	r2, sl
 800c07e:	4649      	mov	r1, r9
 800c080:	4638      	mov	r0, r7
 800c082:	47c0      	blx	r8
 800c084:	3001      	adds	r0, #1
 800c086:	d103      	bne.n	800c090 <_printf_common+0xb0>
 800c088:	f04f 30ff 	mov.w	r0, #4294967295
 800c08c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c090:	3501      	adds	r5, #1
 800c092:	e7c4      	b.n	800c01e <_printf_common+0x3e>
 800c094:	2030      	movs	r0, #48	; 0x30
 800c096:	18e1      	adds	r1, r4, r3
 800c098:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c09c:	1c5a      	adds	r2, r3, #1
 800c09e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c0a2:	4422      	add	r2, r4
 800c0a4:	3302      	adds	r3, #2
 800c0a6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c0aa:	e7c5      	b.n	800c038 <_printf_common+0x58>
 800c0ac:	2301      	movs	r3, #1
 800c0ae:	4622      	mov	r2, r4
 800c0b0:	4649      	mov	r1, r9
 800c0b2:	4638      	mov	r0, r7
 800c0b4:	47c0      	blx	r8
 800c0b6:	3001      	adds	r0, #1
 800c0b8:	d0e6      	beq.n	800c088 <_printf_common+0xa8>
 800c0ba:	3601      	adds	r6, #1
 800c0bc:	e7d9      	b.n	800c072 <_printf_common+0x92>
	...

0800c0c0 <_printf_i>:
 800c0c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c0c4:	460c      	mov	r4, r1
 800c0c6:	7e27      	ldrb	r7, [r4, #24]
 800c0c8:	4691      	mov	r9, r2
 800c0ca:	2f78      	cmp	r7, #120	; 0x78
 800c0cc:	4680      	mov	r8, r0
 800c0ce:	469a      	mov	sl, r3
 800c0d0:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c0d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c0d6:	d807      	bhi.n	800c0e8 <_printf_i+0x28>
 800c0d8:	2f62      	cmp	r7, #98	; 0x62
 800c0da:	d80a      	bhi.n	800c0f2 <_printf_i+0x32>
 800c0dc:	2f00      	cmp	r7, #0
 800c0de:	f000 80d9 	beq.w	800c294 <_printf_i+0x1d4>
 800c0e2:	2f58      	cmp	r7, #88	; 0x58
 800c0e4:	f000 80a4 	beq.w	800c230 <_printf_i+0x170>
 800c0e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c0ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c0f0:	e03a      	b.n	800c168 <_printf_i+0xa8>
 800c0f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c0f6:	2b15      	cmp	r3, #21
 800c0f8:	d8f6      	bhi.n	800c0e8 <_printf_i+0x28>
 800c0fa:	a001      	add	r0, pc, #4	; (adr r0, 800c100 <_printf_i+0x40>)
 800c0fc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800c100:	0800c159 	.word	0x0800c159
 800c104:	0800c16d 	.word	0x0800c16d
 800c108:	0800c0e9 	.word	0x0800c0e9
 800c10c:	0800c0e9 	.word	0x0800c0e9
 800c110:	0800c0e9 	.word	0x0800c0e9
 800c114:	0800c0e9 	.word	0x0800c0e9
 800c118:	0800c16d 	.word	0x0800c16d
 800c11c:	0800c0e9 	.word	0x0800c0e9
 800c120:	0800c0e9 	.word	0x0800c0e9
 800c124:	0800c0e9 	.word	0x0800c0e9
 800c128:	0800c0e9 	.word	0x0800c0e9
 800c12c:	0800c27b 	.word	0x0800c27b
 800c130:	0800c19d 	.word	0x0800c19d
 800c134:	0800c25d 	.word	0x0800c25d
 800c138:	0800c0e9 	.word	0x0800c0e9
 800c13c:	0800c0e9 	.word	0x0800c0e9
 800c140:	0800c29d 	.word	0x0800c29d
 800c144:	0800c0e9 	.word	0x0800c0e9
 800c148:	0800c19d 	.word	0x0800c19d
 800c14c:	0800c0e9 	.word	0x0800c0e9
 800c150:	0800c0e9 	.word	0x0800c0e9
 800c154:	0800c265 	.word	0x0800c265
 800c158:	680b      	ldr	r3, [r1, #0]
 800c15a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c15e:	1d1a      	adds	r2, r3, #4
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	600a      	str	r2, [r1, #0]
 800c164:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c168:	2301      	movs	r3, #1
 800c16a:	e0a4      	b.n	800c2b6 <_printf_i+0x1f6>
 800c16c:	6825      	ldr	r5, [r4, #0]
 800c16e:	6808      	ldr	r0, [r1, #0]
 800c170:	062e      	lsls	r6, r5, #24
 800c172:	f100 0304 	add.w	r3, r0, #4
 800c176:	d50a      	bpl.n	800c18e <_printf_i+0xce>
 800c178:	6805      	ldr	r5, [r0, #0]
 800c17a:	600b      	str	r3, [r1, #0]
 800c17c:	2d00      	cmp	r5, #0
 800c17e:	da03      	bge.n	800c188 <_printf_i+0xc8>
 800c180:	232d      	movs	r3, #45	; 0x2d
 800c182:	426d      	negs	r5, r5
 800c184:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c188:	230a      	movs	r3, #10
 800c18a:	485e      	ldr	r0, [pc, #376]	; (800c304 <_printf_i+0x244>)
 800c18c:	e019      	b.n	800c1c2 <_printf_i+0x102>
 800c18e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c192:	6805      	ldr	r5, [r0, #0]
 800c194:	600b      	str	r3, [r1, #0]
 800c196:	bf18      	it	ne
 800c198:	b22d      	sxthne	r5, r5
 800c19a:	e7ef      	b.n	800c17c <_printf_i+0xbc>
 800c19c:	680b      	ldr	r3, [r1, #0]
 800c19e:	6825      	ldr	r5, [r4, #0]
 800c1a0:	1d18      	adds	r0, r3, #4
 800c1a2:	6008      	str	r0, [r1, #0]
 800c1a4:	0628      	lsls	r0, r5, #24
 800c1a6:	d501      	bpl.n	800c1ac <_printf_i+0xec>
 800c1a8:	681d      	ldr	r5, [r3, #0]
 800c1aa:	e002      	b.n	800c1b2 <_printf_i+0xf2>
 800c1ac:	0669      	lsls	r1, r5, #25
 800c1ae:	d5fb      	bpl.n	800c1a8 <_printf_i+0xe8>
 800c1b0:	881d      	ldrh	r5, [r3, #0]
 800c1b2:	2f6f      	cmp	r7, #111	; 0x6f
 800c1b4:	bf0c      	ite	eq
 800c1b6:	2308      	moveq	r3, #8
 800c1b8:	230a      	movne	r3, #10
 800c1ba:	4852      	ldr	r0, [pc, #328]	; (800c304 <_printf_i+0x244>)
 800c1bc:	2100      	movs	r1, #0
 800c1be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c1c2:	6866      	ldr	r6, [r4, #4]
 800c1c4:	2e00      	cmp	r6, #0
 800c1c6:	bfa8      	it	ge
 800c1c8:	6821      	ldrge	r1, [r4, #0]
 800c1ca:	60a6      	str	r6, [r4, #8]
 800c1cc:	bfa4      	itt	ge
 800c1ce:	f021 0104 	bicge.w	r1, r1, #4
 800c1d2:	6021      	strge	r1, [r4, #0]
 800c1d4:	b90d      	cbnz	r5, 800c1da <_printf_i+0x11a>
 800c1d6:	2e00      	cmp	r6, #0
 800c1d8:	d04d      	beq.n	800c276 <_printf_i+0x1b6>
 800c1da:	4616      	mov	r6, r2
 800c1dc:	fbb5 f1f3 	udiv	r1, r5, r3
 800c1e0:	fb03 5711 	mls	r7, r3, r1, r5
 800c1e4:	5dc7      	ldrb	r7, [r0, r7]
 800c1e6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c1ea:	462f      	mov	r7, r5
 800c1ec:	42bb      	cmp	r3, r7
 800c1ee:	460d      	mov	r5, r1
 800c1f0:	d9f4      	bls.n	800c1dc <_printf_i+0x11c>
 800c1f2:	2b08      	cmp	r3, #8
 800c1f4:	d10b      	bne.n	800c20e <_printf_i+0x14e>
 800c1f6:	6823      	ldr	r3, [r4, #0]
 800c1f8:	07df      	lsls	r7, r3, #31
 800c1fa:	d508      	bpl.n	800c20e <_printf_i+0x14e>
 800c1fc:	6923      	ldr	r3, [r4, #16]
 800c1fe:	6861      	ldr	r1, [r4, #4]
 800c200:	4299      	cmp	r1, r3
 800c202:	bfde      	ittt	le
 800c204:	2330      	movle	r3, #48	; 0x30
 800c206:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c20a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c20e:	1b92      	subs	r2, r2, r6
 800c210:	6122      	str	r2, [r4, #16]
 800c212:	464b      	mov	r3, r9
 800c214:	4621      	mov	r1, r4
 800c216:	4640      	mov	r0, r8
 800c218:	f8cd a000 	str.w	sl, [sp]
 800c21c:	aa03      	add	r2, sp, #12
 800c21e:	f7ff fedf 	bl	800bfe0 <_printf_common>
 800c222:	3001      	adds	r0, #1
 800c224:	d14c      	bne.n	800c2c0 <_printf_i+0x200>
 800c226:	f04f 30ff 	mov.w	r0, #4294967295
 800c22a:	b004      	add	sp, #16
 800c22c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c230:	4834      	ldr	r0, [pc, #208]	; (800c304 <_printf_i+0x244>)
 800c232:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c236:	680e      	ldr	r6, [r1, #0]
 800c238:	6823      	ldr	r3, [r4, #0]
 800c23a:	f856 5b04 	ldr.w	r5, [r6], #4
 800c23e:	061f      	lsls	r7, r3, #24
 800c240:	600e      	str	r6, [r1, #0]
 800c242:	d514      	bpl.n	800c26e <_printf_i+0x1ae>
 800c244:	07d9      	lsls	r1, r3, #31
 800c246:	bf44      	itt	mi
 800c248:	f043 0320 	orrmi.w	r3, r3, #32
 800c24c:	6023      	strmi	r3, [r4, #0]
 800c24e:	b91d      	cbnz	r5, 800c258 <_printf_i+0x198>
 800c250:	6823      	ldr	r3, [r4, #0]
 800c252:	f023 0320 	bic.w	r3, r3, #32
 800c256:	6023      	str	r3, [r4, #0]
 800c258:	2310      	movs	r3, #16
 800c25a:	e7af      	b.n	800c1bc <_printf_i+0xfc>
 800c25c:	6823      	ldr	r3, [r4, #0]
 800c25e:	f043 0320 	orr.w	r3, r3, #32
 800c262:	6023      	str	r3, [r4, #0]
 800c264:	2378      	movs	r3, #120	; 0x78
 800c266:	4828      	ldr	r0, [pc, #160]	; (800c308 <_printf_i+0x248>)
 800c268:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c26c:	e7e3      	b.n	800c236 <_printf_i+0x176>
 800c26e:	065e      	lsls	r6, r3, #25
 800c270:	bf48      	it	mi
 800c272:	b2ad      	uxthmi	r5, r5
 800c274:	e7e6      	b.n	800c244 <_printf_i+0x184>
 800c276:	4616      	mov	r6, r2
 800c278:	e7bb      	b.n	800c1f2 <_printf_i+0x132>
 800c27a:	680b      	ldr	r3, [r1, #0]
 800c27c:	6826      	ldr	r6, [r4, #0]
 800c27e:	1d1d      	adds	r5, r3, #4
 800c280:	6960      	ldr	r0, [r4, #20]
 800c282:	600d      	str	r5, [r1, #0]
 800c284:	0635      	lsls	r5, r6, #24
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	d501      	bpl.n	800c28e <_printf_i+0x1ce>
 800c28a:	6018      	str	r0, [r3, #0]
 800c28c:	e002      	b.n	800c294 <_printf_i+0x1d4>
 800c28e:	0671      	lsls	r1, r6, #25
 800c290:	d5fb      	bpl.n	800c28a <_printf_i+0x1ca>
 800c292:	8018      	strh	r0, [r3, #0]
 800c294:	2300      	movs	r3, #0
 800c296:	4616      	mov	r6, r2
 800c298:	6123      	str	r3, [r4, #16]
 800c29a:	e7ba      	b.n	800c212 <_printf_i+0x152>
 800c29c:	680b      	ldr	r3, [r1, #0]
 800c29e:	1d1a      	adds	r2, r3, #4
 800c2a0:	600a      	str	r2, [r1, #0]
 800c2a2:	681e      	ldr	r6, [r3, #0]
 800c2a4:	2100      	movs	r1, #0
 800c2a6:	4630      	mov	r0, r6
 800c2a8:	6862      	ldr	r2, [r4, #4]
 800c2aa:	f002 faa8 	bl	800e7fe <memchr>
 800c2ae:	b108      	cbz	r0, 800c2b4 <_printf_i+0x1f4>
 800c2b0:	1b80      	subs	r0, r0, r6
 800c2b2:	6060      	str	r0, [r4, #4]
 800c2b4:	6863      	ldr	r3, [r4, #4]
 800c2b6:	6123      	str	r3, [r4, #16]
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c2be:	e7a8      	b.n	800c212 <_printf_i+0x152>
 800c2c0:	4632      	mov	r2, r6
 800c2c2:	4649      	mov	r1, r9
 800c2c4:	4640      	mov	r0, r8
 800c2c6:	6923      	ldr	r3, [r4, #16]
 800c2c8:	47d0      	blx	sl
 800c2ca:	3001      	adds	r0, #1
 800c2cc:	d0ab      	beq.n	800c226 <_printf_i+0x166>
 800c2ce:	6823      	ldr	r3, [r4, #0]
 800c2d0:	079b      	lsls	r3, r3, #30
 800c2d2:	d413      	bmi.n	800c2fc <_printf_i+0x23c>
 800c2d4:	68e0      	ldr	r0, [r4, #12]
 800c2d6:	9b03      	ldr	r3, [sp, #12]
 800c2d8:	4298      	cmp	r0, r3
 800c2da:	bfb8      	it	lt
 800c2dc:	4618      	movlt	r0, r3
 800c2de:	e7a4      	b.n	800c22a <_printf_i+0x16a>
 800c2e0:	2301      	movs	r3, #1
 800c2e2:	4632      	mov	r2, r6
 800c2e4:	4649      	mov	r1, r9
 800c2e6:	4640      	mov	r0, r8
 800c2e8:	47d0      	blx	sl
 800c2ea:	3001      	adds	r0, #1
 800c2ec:	d09b      	beq.n	800c226 <_printf_i+0x166>
 800c2ee:	3501      	adds	r5, #1
 800c2f0:	68e3      	ldr	r3, [r4, #12]
 800c2f2:	9903      	ldr	r1, [sp, #12]
 800c2f4:	1a5b      	subs	r3, r3, r1
 800c2f6:	42ab      	cmp	r3, r5
 800c2f8:	dcf2      	bgt.n	800c2e0 <_printf_i+0x220>
 800c2fa:	e7eb      	b.n	800c2d4 <_printf_i+0x214>
 800c2fc:	2500      	movs	r5, #0
 800c2fe:	f104 0619 	add.w	r6, r4, #25
 800c302:	e7f5      	b.n	800c2f0 <_printf_i+0x230>
 800c304:	080110ca 	.word	0x080110ca
 800c308:	080110db 	.word	0x080110db

0800c30c <iprintf>:
 800c30c:	b40f      	push	{r0, r1, r2, r3}
 800c30e:	4b0a      	ldr	r3, [pc, #40]	; (800c338 <iprintf+0x2c>)
 800c310:	b513      	push	{r0, r1, r4, lr}
 800c312:	681c      	ldr	r4, [r3, #0]
 800c314:	b124      	cbz	r4, 800c320 <iprintf+0x14>
 800c316:	69a3      	ldr	r3, [r4, #24]
 800c318:	b913      	cbnz	r3, 800c320 <iprintf+0x14>
 800c31a:	4620      	mov	r0, r4
 800c31c:	f001 fe52 	bl	800dfc4 <__sinit>
 800c320:	ab05      	add	r3, sp, #20
 800c322:	4620      	mov	r0, r4
 800c324:	9a04      	ldr	r2, [sp, #16]
 800c326:	68a1      	ldr	r1, [r4, #8]
 800c328:	9301      	str	r3, [sp, #4]
 800c32a:	f003 f8db 	bl	800f4e4 <_vfiprintf_r>
 800c32e:	b002      	add	sp, #8
 800c330:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c334:	b004      	add	sp, #16
 800c336:	4770      	bx	lr
 800c338:	2000001c 	.word	0x2000001c

0800c33c <_sbrk_r>:
 800c33c:	b538      	push	{r3, r4, r5, lr}
 800c33e:	2300      	movs	r3, #0
 800c340:	4d05      	ldr	r5, [pc, #20]	; (800c358 <_sbrk_r+0x1c>)
 800c342:	4604      	mov	r4, r0
 800c344:	4608      	mov	r0, r1
 800c346:	602b      	str	r3, [r5, #0]
 800c348:	f7f6 fc36 	bl	8002bb8 <_sbrk>
 800c34c:	1c43      	adds	r3, r0, #1
 800c34e:	d102      	bne.n	800c356 <_sbrk_r+0x1a>
 800c350:	682b      	ldr	r3, [r5, #0]
 800c352:	b103      	cbz	r3, 800c356 <_sbrk_r+0x1a>
 800c354:	6023      	str	r3, [r4, #0]
 800c356:	bd38      	pop	{r3, r4, r5, pc}
 800c358:	20000c40 	.word	0x20000c40

0800c35c <sniprintf>:
 800c35c:	b40c      	push	{r2, r3}
 800c35e:	b530      	push	{r4, r5, lr}
 800c360:	4b17      	ldr	r3, [pc, #92]	; (800c3c0 <sniprintf+0x64>)
 800c362:	1e0c      	subs	r4, r1, #0
 800c364:	681d      	ldr	r5, [r3, #0]
 800c366:	b09d      	sub	sp, #116	; 0x74
 800c368:	da08      	bge.n	800c37c <sniprintf+0x20>
 800c36a:	238b      	movs	r3, #139	; 0x8b
 800c36c:	f04f 30ff 	mov.w	r0, #4294967295
 800c370:	602b      	str	r3, [r5, #0]
 800c372:	b01d      	add	sp, #116	; 0x74
 800c374:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c378:	b002      	add	sp, #8
 800c37a:	4770      	bx	lr
 800c37c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c380:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c384:	bf0c      	ite	eq
 800c386:	4623      	moveq	r3, r4
 800c388:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c38c:	9304      	str	r3, [sp, #16]
 800c38e:	9307      	str	r3, [sp, #28]
 800c390:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c394:	9002      	str	r0, [sp, #8]
 800c396:	9006      	str	r0, [sp, #24]
 800c398:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c39c:	4628      	mov	r0, r5
 800c39e:	ab21      	add	r3, sp, #132	; 0x84
 800c3a0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c3a2:	a902      	add	r1, sp, #8
 800c3a4:	9301      	str	r3, [sp, #4]
 800c3a6:	f002 ff75 	bl	800f294 <_svfiprintf_r>
 800c3aa:	1c43      	adds	r3, r0, #1
 800c3ac:	bfbc      	itt	lt
 800c3ae:	238b      	movlt	r3, #139	; 0x8b
 800c3b0:	602b      	strlt	r3, [r5, #0]
 800c3b2:	2c00      	cmp	r4, #0
 800c3b4:	d0dd      	beq.n	800c372 <sniprintf+0x16>
 800c3b6:	2200      	movs	r2, #0
 800c3b8:	9b02      	ldr	r3, [sp, #8]
 800c3ba:	701a      	strb	r2, [r3, #0]
 800c3bc:	e7d9      	b.n	800c372 <sniprintf+0x16>
 800c3be:	bf00      	nop
 800c3c0:	2000001c 	.word	0x2000001c

0800c3c4 <siprintf>:
 800c3c4:	b40e      	push	{r1, r2, r3}
 800c3c6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c3ca:	b500      	push	{lr}
 800c3cc:	b09c      	sub	sp, #112	; 0x70
 800c3ce:	ab1d      	add	r3, sp, #116	; 0x74
 800c3d0:	9002      	str	r0, [sp, #8]
 800c3d2:	9006      	str	r0, [sp, #24]
 800c3d4:	9107      	str	r1, [sp, #28]
 800c3d6:	9104      	str	r1, [sp, #16]
 800c3d8:	4808      	ldr	r0, [pc, #32]	; (800c3fc <siprintf+0x38>)
 800c3da:	4909      	ldr	r1, [pc, #36]	; (800c400 <siprintf+0x3c>)
 800c3dc:	f853 2b04 	ldr.w	r2, [r3], #4
 800c3e0:	9105      	str	r1, [sp, #20]
 800c3e2:	6800      	ldr	r0, [r0, #0]
 800c3e4:	a902      	add	r1, sp, #8
 800c3e6:	9301      	str	r3, [sp, #4]
 800c3e8:	f002 ff54 	bl	800f294 <_svfiprintf_r>
 800c3ec:	2200      	movs	r2, #0
 800c3ee:	9b02      	ldr	r3, [sp, #8]
 800c3f0:	701a      	strb	r2, [r3, #0]
 800c3f2:	b01c      	add	sp, #112	; 0x70
 800c3f4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c3f8:	b003      	add	sp, #12
 800c3fa:	4770      	bx	lr
 800c3fc:	2000001c 	.word	0x2000001c
 800c400:	ffff0208 	.word	0xffff0208

0800c404 <strncpy>:
 800c404:	4603      	mov	r3, r0
 800c406:	b510      	push	{r4, lr}
 800c408:	3901      	subs	r1, #1
 800c40a:	b132      	cbz	r2, 800c41a <strncpy+0x16>
 800c40c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c410:	3a01      	subs	r2, #1
 800c412:	f803 4b01 	strb.w	r4, [r3], #1
 800c416:	2c00      	cmp	r4, #0
 800c418:	d1f7      	bne.n	800c40a <strncpy+0x6>
 800c41a:	2100      	movs	r1, #0
 800c41c:	441a      	add	r2, r3
 800c41e:	4293      	cmp	r3, r2
 800c420:	d100      	bne.n	800c424 <strncpy+0x20>
 800c422:	bd10      	pop	{r4, pc}
 800c424:	f803 1b01 	strb.w	r1, [r3], #1
 800c428:	e7f9      	b.n	800c41e <strncpy+0x1a>

0800c42a <strnlen>:
 800c42a:	4602      	mov	r2, r0
 800c42c:	b510      	push	{r4, lr}
 800c42e:	4401      	add	r1, r0
 800c430:	428a      	cmp	r2, r1
 800c432:	4613      	mov	r3, r2
 800c434:	d101      	bne.n	800c43a <strnlen+0x10>
 800c436:	1a18      	subs	r0, r3, r0
 800c438:	bd10      	pop	{r4, pc}
 800c43a:	781c      	ldrb	r4, [r3, #0]
 800c43c:	3201      	adds	r2, #1
 800c43e:	2c00      	cmp	r4, #0
 800c440:	d1f6      	bne.n	800c430 <strnlen+0x6>
 800c442:	e7f8      	b.n	800c436 <strnlen+0xc>

0800c444 <sulp>:
 800c444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c448:	460f      	mov	r7, r1
 800c44a:	4690      	mov	r8, r2
 800c44c:	f002 fd70 	bl	800ef30 <__ulp>
 800c450:	4604      	mov	r4, r0
 800c452:	460d      	mov	r5, r1
 800c454:	f1b8 0f00 	cmp.w	r8, #0
 800c458:	d011      	beq.n	800c47e <sulp+0x3a>
 800c45a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800c45e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c462:	2b00      	cmp	r3, #0
 800c464:	dd0b      	ble.n	800c47e <sulp+0x3a>
 800c466:	2400      	movs	r4, #0
 800c468:	051b      	lsls	r3, r3, #20
 800c46a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800c46e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800c472:	4622      	mov	r2, r4
 800c474:	462b      	mov	r3, r5
 800c476:	f7f4 f89b 	bl	80005b0 <__aeabi_dmul>
 800c47a:	4604      	mov	r4, r0
 800c47c:	460d      	mov	r5, r1
 800c47e:	4620      	mov	r0, r4
 800c480:	4629      	mov	r1, r5
 800c482:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800c488 <_strtod_l>:
 800c488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c48c:	469b      	mov	fp, r3
 800c48e:	2300      	movs	r3, #0
 800c490:	b0a1      	sub	sp, #132	; 0x84
 800c492:	931c      	str	r3, [sp, #112]	; 0x70
 800c494:	4ba1      	ldr	r3, [pc, #644]	; (800c71c <_strtod_l+0x294>)
 800c496:	4682      	mov	sl, r0
 800c498:	681f      	ldr	r7, [r3, #0]
 800c49a:	460e      	mov	r6, r1
 800c49c:	4638      	mov	r0, r7
 800c49e:	9217      	str	r2, [sp, #92]	; 0x5c
 800c4a0:	f7f3 fec2 	bl	8000228 <strlen>
 800c4a4:	f04f 0800 	mov.w	r8, #0
 800c4a8:	4604      	mov	r4, r0
 800c4aa:	f04f 0900 	mov.w	r9, #0
 800c4ae:	961b      	str	r6, [sp, #108]	; 0x6c
 800c4b0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c4b2:	781a      	ldrb	r2, [r3, #0]
 800c4b4:	2a2b      	cmp	r2, #43	; 0x2b
 800c4b6:	d04c      	beq.n	800c552 <_strtod_l+0xca>
 800c4b8:	d83a      	bhi.n	800c530 <_strtod_l+0xa8>
 800c4ba:	2a0d      	cmp	r2, #13
 800c4bc:	d833      	bhi.n	800c526 <_strtod_l+0x9e>
 800c4be:	2a08      	cmp	r2, #8
 800c4c0:	d833      	bhi.n	800c52a <_strtod_l+0xa2>
 800c4c2:	2a00      	cmp	r2, #0
 800c4c4:	d03d      	beq.n	800c542 <_strtod_l+0xba>
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	930c      	str	r3, [sp, #48]	; 0x30
 800c4ca:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800c4cc:	782b      	ldrb	r3, [r5, #0]
 800c4ce:	2b30      	cmp	r3, #48	; 0x30
 800c4d0:	f040 80af 	bne.w	800c632 <_strtod_l+0x1aa>
 800c4d4:	786b      	ldrb	r3, [r5, #1]
 800c4d6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c4da:	2b58      	cmp	r3, #88	; 0x58
 800c4dc:	d16c      	bne.n	800c5b8 <_strtod_l+0x130>
 800c4de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c4e0:	4650      	mov	r0, sl
 800c4e2:	9301      	str	r3, [sp, #4]
 800c4e4:	ab1c      	add	r3, sp, #112	; 0x70
 800c4e6:	9300      	str	r3, [sp, #0]
 800c4e8:	4a8d      	ldr	r2, [pc, #564]	; (800c720 <_strtod_l+0x298>)
 800c4ea:	f8cd b008 	str.w	fp, [sp, #8]
 800c4ee:	ab1d      	add	r3, sp, #116	; 0x74
 800c4f0:	a91b      	add	r1, sp, #108	; 0x6c
 800c4f2:	f001 fe6d 	bl	800e1d0 <__gethex>
 800c4f6:	f010 0607 	ands.w	r6, r0, #7
 800c4fa:	4604      	mov	r4, r0
 800c4fc:	d005      	beq.n	800c50a <_strtod_l+0x82>
 800c4fe:	2e06      	cmp	r6, #6
 800c500:	d129      	bne.n	800c556 <_strtod_l+0xce>
 800c502:	2300      	movs	r3, #0
 800c504:	3501      	adds	r5, #1
 800c506:	951b      	str	r5, [sp, #108]	; 0x6c
 800c508:	930c      	str	r3, [sp, #48]	; 0x30
 800c50a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	f040 8596 	bne.w	800d03e <_strtod_l+0xbb6>
 800c512:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c514:	b1d3      	cbz	r3, 800c54c <_strtod_l+0xc4>
 800c516:	4642      	mov	r2, r8
 800c518:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c51c:	4610      	mov	r0, r2
 800c51e:	4619      	mov	r1, r3
 800c520:	b021      	add	sp, #132	; 0x84
 800c522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c526:	2a20      	cmp	r2, #32
 800c528:	d1cd      	bne.n	800c4c6 <_strtod_l+0x3e>
 800c52a:	3301      	adds	r3, #1
 800c52c:	931b      	str	r3, [sp, #108]	; 0x6c
 800c52e:	e7bf      	b.n	800c4b0 <_strtod_l+0x28>
 800c530:	2a2d      	cmp	r2, #45	; 0x2d
 800c532:	d1c8      	bne.n	800c4c6 <_strtod_l+0x3e>
 800c534:	2201      	movs	r2, #1
 800c536:	920c      	str	r2, [sp, #48]	; 0x30
 800c538:	1c5a      	adds	r2, r3, #1
 800c53a:	921b      	str	r2, [sp, #108]	; 0x6c
 800c53c:	785b      	ldrb	r3, [r3, #1]
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d1c3      	bne.n	800c4ca <_strtod_l+0x42>
 800c542:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c544:	961b      	str	r6, [sp, #108]	; 0x6c
 800c546:	2b00      	cmp	r3, #0
 800c548:	f040 8577 	bne.w	800d03a <_strtod_l+0xbb2>
 800c54c:	4642      	mov	r2, r8
 800c54e:	464b      	mov	r3, r9
 800c550:	e7e4      	b.n	800c51c <_strtod_l+0x94>
 800c552:	2200      	movs	r2, #0
 800c554:	e7ef      	b.n	800c536 <_strtod_l+0xae>
 800c556:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c558:	b13a      	cbz	r2, 800c56a <_strtod_l+0xe2>
 800c55a:	2135      	movs	r1, #53	; 0x35
 800c55c:	a81e      	add	r0, sp, #120	; 0x78
 800c55e:	f002 fdeb 	bl	800f138 <__copybits>
 800c562:	4650      	mov	r0, sl
 800c564:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c566:	f002 f9b3 	bl	800e8d0 <_Bfree>
 800c56a:	3e01      	subs	r6, #1
 800c56c:	2e05      	cmp	r6, #5
 800c56e:	d807      	bhi.n	800c580 <_strtod_l+0xf8>
 800c570:	e8df f006 	tbb	[pc, r6]
 800c574:	1d180b0e 	.word	0x1d180b0e
 800c578:	030e      	.short	0x030e
 800c57a:	f04f 0900 	mov.w	r9, #0
 800c57e:	46c8      	mov	r8, r9
 800c580:	0721      	lsls	r1, r4, #28
 800c582:	d5c2      	bpl.n	800c50a <_strtod_l+0x82>
 800c584:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800c588:	e7bf      	b.n	800c50a <_strtod_l+0x82>
 800c58a:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 800c58e:	e7f7      	b.n	800c580 <_strtod_l+0xf8>
 800c590:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800c592:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 800c596:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c59a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c59e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800c5a2:	e7ed      	b.n	800c580 <_strtod_l+0xf8>
 800c5a4:	f04f 0800 	mov.w	r8, #0
 800c5a8:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800c724 <_strtod_l+0x29c>
 800c5ac:	e7e8      	b.n	800c580 <_strtod_l+0xf8>
 800c5ae:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800c5b2:	f04f 38ff 	mov.w	r8, #4294967295
 800c5b6:	e7e3      	b.n	800c580 <_strtod_l+0xf8>
 800c5b8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c5ba:	1c5a      	adds	r2, r3, #1
 800c5bc:	921b      	str	r2, [sp, #108]	; 0x6c
 800c5be:	785b      	ldrb	r3, [r3, #1]
 800c5c0:	2b30      	cmp	r3, #48	; 0x30
 800c5c2:	d0f9      	beq.n	800c5b8 <_strtod_l+0x130>
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d0a0      	beq.n	800c50a <_strtod_l+0x82>
 800c5c8:	2301      	movs	r3, #1
 800c5ca:	9307      	str	r3, [sp, #28]
 800c5cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c5ce:	220a      	movs	r2, #10
 800c5d0:	9308      	str	r3, [sp, #32]
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	469b      	mov	fp, r3
 800c5d6:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800c5da:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800c5dc:	7805      	ldrb	r5, [r0, #0]
 800c5de:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800c5e2:	b2d9      	uxtb	r1, r3
 800c5e4:	2909      	cmp	r1, #9
 800c5e6:	d926      	bls.n	800c636 <_strtod_l+0x1ae>
 800c5e8:	4622      	mov	r2, r4
 800c5ea:	4639      	mov	r1, r7
 800c5ec:	f003 f8f3 	bl	800f7d6 <strncmp>
 800c5f0:	2800      	cmp	r0, #0
 800c5f2:	d032      	beq.n	800c65a <_strtod_l+0x1d2>
 800c5f4:	2000      	movs	r0, #0
 800c5f6:	462b      	mov	r3, r5
 800c5f8:	465c      	mov	r4, fp
 800c5fa:	4602      	mov	r2, r0
 800c5fc:	9004      	str	r0, [sp, #16]
 800c5fe:	2b65      	cmp	r3, #101	; 0x65
 800c600:	d001      	beq.n	800c606 <_strtod_l+0x17e>
 800c602:	2b45      	cmp	r3, #69	; 0x45
 800c604:	d113      	bne.n	800c62e <_strtod_l+0x1a6>
 800c606:	b91c      	cbnz	r4, 800c610 <_strtod_l+0x188>
 800c608:	9b07      	ldr	r3, [sp, #28]
 800c60a:	4303      	orrs	r3, r0
 800c60c:	d099      	beq.n	800c542 <_strtod_l+0xba>
 800c60e:	2400      	movs	r4, #0
 800c610:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800c612:	1c73      	adds	r3, r6, #1
 800c614:	931b      	str	r3, [sp, #108]	; 0x6c
 800c616:	7873      	ldrb	r3, [r6, #1]
 800c618:	2b2b      	cmp	r3, #43	; 0x2b
 800c61a:	d078      	beq.n	800c70e <_strtod_l+0x286>
 800c61c:	2b2d      	cmp	r3, #45	; 0x2d
 800c61e:	d07b      	beq.n	800c718 <_strtod_l+0x290>
 800c620:	2700      	movs	r7, #0
 800c622:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800c626:	2909      	cmp	r1, #9
 800c628:	f240 8082 	bls.w	800c730 <_strtod_l+0x2a8>
 800c62c:	961b      	str	r6, [sp, #108]	; 0x6c
 800c62e:	2500      	movs	r5, #0
 800c630:	e09e      	b.n	800c770 <_strtod_l+0x2e8>
 800c632:	2300      	movs	r3, #0
 800c634:	e7c9      	b.n	800c5ca <_strtod_l+0x142>
 800c636:	f1bb 0f08 	cmp.w	fp, #8
 800c63a:	bfd5      	itete	le
 800c63c:	9906      	ldrle	r1, [sp, #24]
 800c63e:	9905      	ldrgt	r1, [sp, #20]
 800c640:	fb02 3301 	mlale	r3, r2, r1, r3
 800c644:	fb02 3301 	mlagt	r3, r2, r1, r3
 800c648:	f100 0001 	add.w	r0, r0, #1
 800c64c:	bfd4      	ite	le
 800c64e:	9306      	strle	r3, [sp, #24]
 800c650:	9305      	strgt	r3, [sp, #20]
 800c652:	f10b 0b01 	add.w	fp, fp, #1
 800c656:	901b      	str	r0, [sp, #108]	; 0x6c
 800c658:	e7bf      	b.n	800c5da <_strtod_l+0x152>
 800c65a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c65c:	191a      	adds	r2, r3, r4
 800c65e:	921b      	str	r2, [sp, #108]	; 0x6c
 800c660:	5d1b      	ldrb	r3, [r3, r4]
 800c662:	f1bb 0f00 	cmp.w	fp, #0
 800c666:	d036      	beq.n	800c6d6 <_strtod_l+0x24e>
 800c668:	465c      	mov	r4, fp
 800c66a:	9004      	str	r0, [sp, #16]
 800c66c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800c670:	2a09      	cmp	r2, #9
 800c672:	d912      	bls.n	800c69a <_strtod_l+0x212>
 800c674:	2201      	movs	r2, #1
 800c676:	e7c2      	b.n	800c5fe <_strtod_l+0x176>
 800c678:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c67a:	3001      	adds	r0, #1
 800c67c:	1c5a      	adds	r2, r3, #1
 800c67e:	921b      	str	r2, [sp, #108]	; 0x6c
 800c680:	785b      	ldrb	r3, [r3, #1]
 800c682:	2b30      	cmp	r3, #48	; 0x30
 800c684:	d0f8      	beq.n	800c678 <_strtod_l+0x1f0>
 800c686:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800c68a:	2a08      	cmp	r2, #8
 800c68c:	f200 84dc 	bhi.w	800d048 <_strtod_l+0xbc0>
 800c690:	9004      	str	r0, [sp, #16]
 800c692:	2000      	movs	r0, #0
 800c694:	4604      	mov	r4, r0
 800c696:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800c698:	9208      	str	r2, [sp, #32]
 800c69a:	3b30      	subs	r3, #48	; 0x30
 800c69c:	f100 0201 	add.w	r2, r0, #1
 800c6a0:	d013      	beq.n	800c6ca <_strtod_l+0x242>
 800c6a2:	9904      	ldr	r1, [sp, #16]
 800c6a4:	1905      	adds	r5, r0, r4
 800c6a6:	4411      	add	r1, r2
 800c6a8:	9104      	str	r1, [sp, #16]
 800c6aa:	4622      	mov	r2, r4
 800c6ac:	210a      	movs	r1, #10
 800c6ae:	42aa      	cmp	r2, r5
 800c6b0:	d113      	bne.n	800c6da <_strtod_l+0x252>
 800c6b2:	1822      	adds	r2, r4, r0
 800c6b4:	2a08      	cmp	r2, #8
 800c6b6:	f104 0401 	add.w	r4, r4, #1
 800c6ba:	4404      	add	r4, r0
 800c6bc:	dc1b      	bgt.n	800c6f6 <_strtod_l+0x26e>
 800c6be:	220a      	movs	r2, #10
 800c6c0:	9906      	ldr	r1, [sp, #24]
 800c6c2:	fb02 3301 	mla	r3, r2, r1, r3
 800c6c6:	9306      	str	r3, [sp, #24]
 800c6c8:	2200      	movs	r2, #0
 800c6ca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c6cc:	4610      	mov	r0, r2
 800c6ce:	1c59      	adds	r1, r3, #1
 800c6d0:	911b      	str	r1, [sp, #108]	; 0x6c
 800c6d2:	785b      	ldrb	r3, [r3, #1]
 800c6d4:	e7ca      	b.n	800c66c <_strtod_l+0x1e4>
 800c6d6:	4658      	mov	r0, fp
 800c6d8:	e7d3      	b.n	800c682 <_strtod_l+0x1fa>
 800c6da:	2a08      	cmp	r2, #8
 800c6dc:	dc04      	bgt.n	800c6e8 <_strtod_l+0x260>
 800c6de:	9f06      	ldr	r7, [sp, #24]
 800c6e0:	434f      	muls	r7, r1
 800c6e2:	9706      	str	r7, [sp, #24]
 800c6e4:	3201      	adds	r2, #1
 800c6e6:	e7e2      	b.n	800c6ae <_strtod_l+0x226>
 800c6e8:	1c57      	adds	r7, r2, #1
 800c6ea:	2f10      	cmp	r7, #16
 800c6ec:	bfde      	ittt	le
 800c6ee:	9f05      	ldrle	r7, [sp, #20]
 800c6f0:	434f      	mulle	r7, r1
 800c6f2:	9705      	strle	r7, [sp, #20]
 800c6f4:	e7f6      	b.n	800c6e4 <_strtod_l+0x25c>
 800c6f6:	2c10      	cmp	r4, #16
 800c6f8:	bfdf      	itttt	le
 800c6fa:	220a      	movle	r2, #10
 800c6fc:	9905      	ldrle	r1, [sp, #20]
 800c6fe:	fb02 3301 	mlale	r3, r2, r1, r3
 800c702:	9305      	strle	r3, [sp, #20]
 800c704:	e7e0      	b.n	800c6c8 <_strtod_l+0x240>
 800c706:	2300      	movs	r3, #0
 800c708:	2201      	movs	r2, #1
 800c70a:	9304      	str	r3, [sp, #16]
 800c70c:	e77c      	b.n	800c608 <_strtod_l+0x180>
 800c70e:	2700      	movs	r7, #0
 800c710:	1cb3      	adds	r3, r6, #2
 800c712:	931b      	str	r3, [sp, #108]	; 0x6c
 800c714:	78b3      	ldrb	r3, [r6, #2]
 800c716:	e784      	b.n	800c622 <_strtod_l+0x19a>
 800c718:	2701      	movs	r7, #1
 800c71a:	e7f9      	b.n	800c710 <_strtod_l+0x288>
 800c71c:	080113a4 	.word	0x080113a4
 800c720:	080110ec 	.word	0x080110ec
 800c724:	7ff00000 	.word	0x7ff00000
 800c728:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c72a:	1c59      	adds	r1, r3, #1
 800c72c:	911b      	str	r1, [sp, #108]	; 0x6c
 800c72e:	785b      	ldrb	r3, [r3, #1]
 800c730:	2b30      	cmp	r3, #48	; 0x30
 800c732:	d0f9      	beq.n	800c728 <_strtod_l+0x2a0>
 800c734:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800c738:	2908      	cmp	r1, #8
 800c73a:	f63f af78 	bhi.w	800c62e <_strtod_l+0x1a6>
 800c73e:	f04f 0e0a 	mov.w	lr, #10
 800c742:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 800c746:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c748:	9309      	str	r3, [sp, #36]	; 0x24
 800c74a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c74c:	1c59      	adds	r1, r3, #1
 800c74e:	911b      	str	r1, [sp, #108]	; 0x6c
 800c750:	785b      	ldrb	r3, [r3, #1]
 800c752:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 800c756:	2d09      	cmp	r5, #9
 800c758:	d935      	bls.n	800c7c6 <_strtod_l+0x33e>
 800c75a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c75c:	1b49      	subs	r1, r1, r5
 800c75e:	2908      	cmp	r1, #8
 800c760:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800c764:	dc02      	bgt.n	800c76c <_strtod_l+0x2e4>
 800c766:	4565      	cmp	r5, ip
 800c768:	bfa8      	it	ge
 800c76a:	4665      	movge	r5, ip
 800c76c:	b107      	cbz	r7, 800c770 <_strtod_l+0x2e8>
 800c76e:	426d      	negs	r5, r5
 800c770:	2c00      	cmp	r4, #0
 800c772:	d14c      	bne.n	800c80e <_strtod_l+0x386>
 800c774:	9907      	ldr	r1, [sp, #28]
 800c776:	4301      	orrs	r1, r0
 800c778:	f47f aec7 	bne.w	800c50a <_strtod_l+0x82>
 800c77c:	2a00      	cmp	r2, #0
 800c77e:	f47f aee0 	bne.w	800c542 <_strtod_l+0xba>
 800c782:	2b69      	cmp	r3, #105	; 0x69
 800c784:	d026      	beq.n	800c7d4 <_strtod_l+0x34c>
 800c786:	dc23      	bgt.n	800c7d0 <_strtod_l+0x348>
 800c788:	2b49      	cmp	r3, #73	; 0x49
 800c78a:	d023      	beq.n	800c7d4 <_strtod_l+0x34c>
 800c78c:	2b4e      	cmp	r3, #78	; 0x4e
 800c78e:	f47f aed8 	bne.w	800c542 <_strtod_l+0xba>
 800c792:	499c      	ldr	r1, [pc, #624]	; (800ca04 <_strtod_l+0x57c>)
 800c794:	a81b      	add	r0, sp, #108	; 0x6c
 800c796:	f001 ff69 	bl	800e66c <__match>
 800c79a:	2800      	cmp	r0, #0
 800c79c:	f43f aed1 	beq.w	800c542 <_strtod_l+0xba>
 800c7a0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c7a2:	781b      	ldrb	r3, [r3, #0]
 800c7a4:	2b28      	cmp	r3, #40	; 0x28
 800c7a6:	d12c      	bne.n	800c802 <_strtod_l+0x37a>
 800c7a8:	4997      	ldr	r1, [pc, #604]	; (800ca08 <_strtod_l+0x580>)
 800c7aa:	aa1e      	add	r2, sp, #120	; 0x78
 800c7ac:	a81b      	add	r0, sp, #108	; 0x6c
 800c7ae:	f001 ff71 	bl	800e694 <__hexnan>
 800c7b2:	2805      	cmp	r0, #5
 800c7b4:	d125      	bne.n	800c802 <_strtod_l+0x37a>
 800c7b6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c7b8:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800c7bc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800c7c0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800c7c4:	e6a1      	b.n	800c50a <_strtod_l+0x82>
 800c7c6:	fb0e 3c0c 	mla	ip, lr, ip, r3
 800c7ca:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800c7ce:	e7bc      	b.n	800c74a <_strtod_l+0x2c2>
 800c7d0:	2b6e      	cmp	r3, #110	; 0x6e
 800c7d2:	e7dc      	b.n	800c78e <_strtod_l+0x306>
 800c7d4:	498d      	ldr	r1, [pc, #564]	; (800ca0c <_strtod_l+0x584>)
 800c7d6:	a81b      	add	r0, sp, #108	; 0x6c
 800c7d8:	f001 ff48 	bl	800e66c <__match>
 800c7dc:	2800      	cmp	r0, #0
 800c7de:	f43f aeb0 	beq.w	800c542 <_strtod_l+0xba>
 800c7e2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c7e4:	498a      	ldr	r1, [pc, #552]	; (800ca10 <_strtod_l+0x588>)
 800c7e6:	3b01      	subs	r3, #1
 800c7e8:	a81b      	add	r0, sp, #108	; 0x6c
 800c7ea:	931b      	str	r3, [sp, #108]	; 0x6c
 800c7ec:	f001 ff3e 	bl	800e66c <__match>
 800c7f0:	b910      	cbnz	r0, 800c7f8 <_strtod_l+0x370>
 800c7f2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c7f4:	3301      	adds	r3, #1
 800c7f6:	931b      	str	r3, [sp, #108]	; 0x6c
 800c7f8:	f04f 0800 	mov.w	r8, #0
 800c7fc:	f8df 9220 	ldr.w	r9, [pc, #544]	; 800ca20 <_strtod_l+0x598>
 800c800:	e683      	b.n	800c50a <_strtod_l+0x82>
 800c802:	4884      	ldr	r0, [pc, #528]	; (800ca14 <_strtod_l+0x58c>)
 800c804:	f002 ff9e 	bl	800f744 <nan>
 800c808:	4680      	mov	r8, r0
 800c80a:	4689      	mov	r9, r1
 800c80c:	e67d      	b.n	800c50a <_strtod_l+0x82>
 800c80e:	9b04      	ldr	r3, [sp, #16]
 800c810:	f1bb 0f00 	cmp.w	fp, #0
 800c814:	bf08      	it	eq
 800c816:	46a3      	moveq	fp, r4
 800c818:	1aeb      	subs	r3, r5, r3
 800c81a:	2c10      	cmp	r4, #16
 800c81c:	9806      	ldr	r0, [sp, #24]
 800c81e:	4626      	mov	r6, r4
 800c820:	9307      	str	r3, [sp, #28]
 800c822:	bfa8      	it	ge
 800c824:	2610      	movge	r6, #16
 800c826:	f7f3 fe49 	bl	80004bc <__aeabi_ui2d>
 800c82a:	2c09      	cmp	r4, #9
 800c82c:	4680      	mov	r8, r0
 800c82e:	4689      	mov	r9, r1
 800c830:	dd13      	ble.n	800c85a <_strtod_l+0x3d2>
 800c832:	4b79      	ldr	r3, [pc, #484]	; (800ca18 <_strtod_l+0x590>)
 800c834:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c838:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800c83c:	f7f3 feb8 	bl	80005b0 <__aeabi_dmul>
 800c840:	4680      	mov	r8, r0
 800c842:	9805      	ldr	r0, [sp, #20]
 800c844:	4689      	mov	r9, r1
 800c846:	f7f3 fe39 	bl	80004bc <__aeabi_ui2d>
 800c84a:	4602      	mov	r2, r0
 800c84c:	460b      	mov	r3, r1
 800c84e:	4640      	mov	r0, r8
 800c850:	4649      	mov	r1, r9
 800c852:	f7f3 fcf7 	bl	8000244 <__adddf3>
 800c856:	4680      	mov	r8, r0
 800c858:	4689      	mov	r9, r1
 800c85a:	2c0f      	cmp	r4, #15
 800c85c:	dc36      	bgt.n	800c8cc <_strtod_l+0x444>
 800c85e:	9b07      	ldr	r3, [sp, #28]
 800c860:	2b00      	cmp	r3, #0
 800c862:	f43f ae52 	beq.w	800c50a <_strtod_l+0x82>
 800c866:	dd22      	ble.n	800c8ae <_strtod_l+0x426>
 800c868:	2b16      	cmp	r3, #22
 800c86a:	dc09      	bgt.n	800c880 <_strtod_l+0x3f8>
 800c86c:	4c6a      	ldr	r4, [pc, #424]	; (800ca18 <_strtod_l+0x590>)
 800c86e:	4642      	mov	r2, r8
 800c870:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 800c874:	464b      	mov	r3, r9
 800c876:	e9d4 0100 	ldrd	r0, r1, [r4]
 800c87a:	f7f3 fe99 	bl	80005b0 <__aeabi_dmul>
 800c87e:	e7c3      	b.n	800c808 <_strtod_l+0x380>
 800c880:	9a07      	ldr	r2, [sp, #28]
 800c882:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800c886:	4293      	cmp	r3, r2
 800c888:	db20      	blt.n	800c8cc <_strtod_l+0x444>
 800c88a:	4d63      	ldr	r5, [pc, #396]	; (800ca18 <_strtod_l+0x590>)
 800c88c:	f1c4 040f 	rsb	r4, r4, #15
 800c890:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800c894:	4642      	mov	r2, r8
 800c896:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c89a:	464b      	mov	r3, r9
 800c89c:	f7f3 fe88 	bl	80005b0 <__aeabi_dmul>
 800c8a0:	9b07      	ldr	r3, [sp, #28]
 800c8a2:	1b1c      	subs	r4, r3, r4
 800c8a4:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800c8a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c8ac:	e7e5      	b.n	800c87a <_strtod_l+0x3f2>
 800c8ae:	9b07      	ldr	r3, [sp, #28]
 800c8b0:	3316      	adds	r3, #22
 800c8b2:	db0b      	blt.n	800c8cc <_strtod_l+0x444>
 800c8b4:	9b04      	ldr	r3, [sp, #16]
 800c8b6:	4a58      	ldr	r2, [pc, #352]	; (800ca18 <_strtod_l+0x590>)
 800c8b8:	1b5d      	subs	r5, r3, r5
 800c8ba:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800c8be:	4640      	mov	r0, r8
 800c8c0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c8c4:	4649      	mov	r1, r9
 800c8c6:	f7f3 ff9d 	bl	8000804 <__aeabi_ddiv>
 800c8ca:	e79d      	b.n	800c808 <_strtod_l+0x380>
 800c8cc:	9b07      	ldr	r3, [sp, #28]
 800c8ce:	1ba6      	subs	r6, r4, r6
 800c8d0:	441e      	add	r6, r3
 800c8d2:	2e00      	cmp	r6, #0
 800c8d4:	dd71      	ble.n	800c9ba <_strtod_l+0x532>
 800c8d6:	f016 030f 	ands.w	r3, r6, #15
 800c8da:	d00a      	beq.n	800c8f2 <_strtod_l+0x46a>
 800c8dc:	494e      	ldr	r1, [pc, #312]	; (800ca18 <_strtod_l+0x590>)
 800c8de:	4642      	mov	r2, r8
 800c8e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c8e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c8e8:	464b      	mov	r3, r9
 800c8ea:	f7f3 fe61 	bl	80005b0 <__aeabi_dmul>
 800c8ee:	4680      	mov	r8, r0
 800c8f0:	4689      	mov	r9, r1
 800c8f2:	f036 060f 	bics.w	r6, r6, #15
 800c8f6:	d050      	beq.n	800c99a <_strtod_l+0x512>
 800c8f8:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800c8fc:	dd27      	ble.n	800c94e <_strtod_l+0x4c6>
 800c8fe:	f04f 0b00 	mov.w	fp, #0
 800c902:	f8cd b010 	str.w	fp, [sp, #16]
 800c906:	f8cd b020 	str.w	fp, [sp, #32]
 800c90a:	f8cd b018 	str.w	fp, [sp, #24]
 800c90e:	2322      	movs	r3, #34	; 0x22
 800c910:	f04f 0800 	mov.w	r8, #0
 800c914:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800ca20 <_strtod_l+0x598>
 800c918:	f8ca 3000 	str.w	r3, [sl]
 800c91c:	9b08      	ldr	r3, [sp, #32]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	f43f adf3 	beq.w	800c50a <_strtod_l+0x82>
 800c924:	4650      	mov	r0, sl
 800c926:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c928:	f001 ffd2 	bl	800e8d0 <_Bfree>
 800c92c:	4650      	mov	r0, sl
 800c92e:	9906      	ldr	r1, [sp, #24]
 800c930:	f001 ffce 	bl	800e8d0 <_Bfree>
 800c934:	4650      	mov	r0, sl
 800c936:	9904      	ldr	r1, [sp, #16]
 800c938:	f001 ffca 	bl	800e8d0 <_Bfree>
 800c93c:	4650      	mov	r0, sl
 800c93e:	9908      	ldr	r1, [sp, #32]
 800c940:	f001 ffc6 	bl	800e8d0 <_Bfree>
 800c944:	4659      	mov	r1, fp
 800c946:	4650      	mov	r0, sl
 800c948:	f001 ffc2 	bl	800e8d0 <_Bfree>
 800c94c:	e5dd      	b.n	800c50a <_strtod_l+0x82>
 800c94e:	2300      	movs	r3, #0
 800c950:	4640      	mov	r0, r8
 800c952:	4649      	mov	r1, r9
 800c954:	461f      	mov	r7, r3
 800c956:	1136      	asrs	r6, r6, #4
 800c958:	2e01      	cmp	r6, #1
 800c95a:	dc21      	bgt.n	800c9a0 <_strtod_l+0x518>
 800c95c:	b10b      	cbz	r3, 800c962 <_strtod_l+0x4da>
 800c95e:	4680      	mov	r8, r0
 800c960:	4689      	mov	r9, r1
 800c962:	4b2e      	ldr	r3, [pc, #184]	; (800ca1c <_strtod_l+0x594>)
 800c964:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800c968:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800c96c:	4642      	mov	r2, r8
 800c96e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c972:	464b      	mov	r3, r9
 800c974:	f7f3 fe1c 	bl	80005b0 <__aeabi_dmul>
 800c978:	4b29      	ldr	r3, [pc, #164]	; (800ca20 <_strtod_l+0x598>)
 800c97a:	460a      	mov	r2, r1
 800c97c:	400b      	ands	r3, r1
 800c97e:	4929      	ldr	r1, [pc, #164]	; (800ca24 <_strtod_l+0x59c>)
 800c980:	4680      	mov	r8, r0
 800c982:	428b      	cmp	r3, r1
 800c984:	d8bb      	bhi.n	800c8fe <_strtod_l+0x476>
 800c986:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800c98a:	428b      	cmp	r3, r1
 800c98c:	bf86      	itte	hi
 800c98e:	f04f 38ff 	movhi.w	r8, #4294967295
 800c992:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800ca28 <_strtod_l+0x5a0>
 800c996:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800c99a:	2300      	movs	r3, #0
 800c99c:	9305      	str	r3, [sp, #20]
 800c99e:	e07e      	b.n	800ca9e <_strtod_l+0x616>
 800c9a0:	07f2      	lsls	r2, r6, #31
 800c9a2:	d507      	bpl.n	800c9b4 <_strtod_l+0x52c>
 800c9a4:	4b1d      	ldr	r3, [pc, #116]	; (800ca1c <_strtod_l+0x594>)
 800c9a6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c9aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9ae:	f7f3 fdff 	bl	80005b0 <__aeabi_dmul>
 800c9b2:	2301      	movs	r3, #1
 800c9b4:	3701      	adds	r7, #1
 800c9b6:	1076      	asrs	r6, r6, #1
 800c9b8:	e7ce      	b.n	800c958 <_strtod_l+0x4d0>
 800c9ba:	d0ee      	beq.n	800c99a <_strtod_l+0x512>
 800c9bc:	4276      	negs	r6, r6
 800c9be:	f016 020f 	ands.w	r2, r6, #15
 800c9c2:	d00a      	beq.n	800c9da <_strtod_l+0x552>
 800c9c4:	4b14      	ldr	r3, [pc, #80]	; (800ca18 <_strtod_l+0x590>)
 800c9c6:	4640      	mov	r0, r8
 800c9c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c9cc:	4649      	mov	r1, r9
 800c9ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9d2:	f7f3 ff17 	bl	8000804 <__aeabi_ddiv>
 800c9d6:	4680      	mov	r8, r0
 800c9d8:	4689      	mov	r9, r1
 800c9da:	1136      	asrs	r6, r6, #4
 800c9dc:	d0dd      	beq.n	800c99a <_strtod_l+0x512>
 800c9de:	2e1f      	cmp	r6, #31
 800c9e0:	dd24      	ble.n	800ca2c <_strtod_l+0x5a4>
 800c9e2:	f04f 0b00 	mov.w	fp, #0
 800c9e6:	f8cd b010 	str.w	fp, [sp, #16]
 800c9ea:	f8cd b020 	str.w	fp, [sp, #32]
 800c9ee:	f8cd b018 	str.w	fp, [sp, #24]
 800c9f2:	2322      	movs	r3, #34	; 0x22
 800c9f4:	f04f 0800 	mov.w	r8, #0
 800c9f8:	f04f 0900 	mov.w	r9, #0
 800c9fc:	f8ca 3000 	str.w	r3, [sl]
 800ca00:	e78c      	b.n	800c91c <_strtod_l+0x494>
 800ca02:	bf00      	nop
 800ca04:	080110c5 	.word	0x080110c5
 800ca08:	08011100 	.word	0x08011100
 800ca0c:	080110bd 	.word	0x080110bd
 800ca10:	08011244 	.word	0x08011244
 800ca14:	08011560 	.word	0x08011560
 800ca18:	08011440 	.word	0x08011440
 800ca1c:	08011418 	.word	0x08011418
 800ca20:	7ff00000 	.word	0x7ff00000
 800ca24:	7ca00000 	.word	0x7ca00000
 800ca28:	7fefffff 	.word	0x7fefffff
 800ca2c:	f016 0310 	ands.w	r3, r6, #16
 800ca30:	bf18      	it	ne
 800ca32:	236a      	movne	r3, #106	; 0x6a
 800ca34:	4640      	mov	r0, r8
 800ca36:	9305      	str	r3, [sp, #20]
 800ca38:	4649      	mov	r1, r9
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	4fb2      	ldr	r7, [pc, #712]	; (800cd08 <_strtod_l+0x880>)
 800ca3e:	07f2      	lsls	r2, r6, #31
 800ca40:	d504      	bpl.n	800ca4c <_strtod_l+0x5c4>
 800ca42:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca46:	f7f3 fdb3 	bl	80005b0 <__aeabi_dmul>
 800ca4a:	2301      	movs	r3, #1
 800ca4c:	1076      	asrs	r6, r6, #1
 800ca4e:	f107 0708 	add.w	r7, r7, #8
 800ca52:	d1f4      	bne.n	800ca3e <_strtod_l+0x5b6>
 800ca54:	b10b      	cbz	r3, 800ca5a <_strtod_l+0x5d2>
 800ca56:	4680      	mov	r8, r0
 800ca58:	4689      	mov	r9, r1
 800ca5a:	9b05      	ldr	r3, [sp, #20]
 800ca5c:	b1bb      	cbz	r3, 800ca8e <_strtod_l+0x606>
 800ca5e:	f3c9 530a 	ubfx	r3, r9, #20, #11
 800ca62:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	4649      	mov	r1, r9
 800ca6a:	dd10      	ble.n	800ca8e <_strtod_l+0x606>
 800ca6c:	2b1f      	cmp	r3, #31
 800ca6e:	f340 812b 	ble.w	800ccc8 <_strtod_l+0x840>
 800ca72:	2b34      	cmp	r3, #52	; 0x34
 800ca74:	bfd8      	it	le
 800ca76:	f04f 32ff 	movle.w	r2, #4294967295
 800ca7a:	f04f 0800 	mov.w	r8, #0
 800ca7e:	bfcf      	iteee	gt
 800ca80:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800ca84:	3b20      	suble	r3, #32
 800ca86:	fa02 f303 	lslle.w	r3, r2, r3
 800ca8a:	ea03 0901 	andle.w	r9, r3, r1
 800ca8e:	2200      	movs	r2, #0
 800ca90:	2300      	movs	r3, #0
 800ca92:	4640      	mov	r0, r8
 800ca94:	4649      	mov	r1, r9
 800ca96:	f7f3 fff3 	bl	8000a80 <__aeabi_dcmpeq>
 800ca9a:	2800      	cmp	r0, #0
 800ca9c:	d1a1      	bne.n	800c9e2 <_strtod_l+0x55a>
 800ca9e:	9b06      	ldr	r3, [sp, #24]
 800caa0:	465a      	mov	r2, fp
 800caa2:	9300      	str	r3, [sp, #0]
 800caa4:	4650      	mov	r0, sl
 800caa6:	4623      	mov	r3, r4
 800caa8:	9908      	ldr	r1, [sp, #32]
 800caaa:	f001 ff7d 	bl	800e9a8 <__s2b>
 800caae:	9008      	str	r0, [sp, #32]
 800cab0:	2800      	cmp	r0, #0
 800cab2:	f43f af24 	beq.w	800c8fe <_strtod_l+0x476>
 800cab6:	9b04      	ldr	r3, [sp, #16]
 800cab8:	f04f 0b00 	mov.w	fp, #0
 800cabc:	1b5d      	subs	r5, r3, r5
 800cabe:	9b07      	ldr	r3, [sp, #28]
 800cac0:	f8cd b010 	str.w	fp, [sp, #16]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	bfb4      	ite	lt
 800cac8:	462b      	movlt	r3, r5
 800caca:	2300      	movge	r3, #0
 800cacc:	930e      	str	r3, [sp, #56]	; 0x38
 800cace:	9b07      	ldr	r3, [sp, #28]
 800cad0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800cad4:	9316      	str	r3, [sp, #88]	; 0x58
 800cad6:	9b08      	ldr	r3, [sp, #32]
 800cad8:	4650      	mov	r0, sl
 800cada:	6859      	ldr	r1, [r3, #4]
 800cadc:	f001 feb8 	bl	800e850 <_Balloc>
 800cae0:	9006      	str	r0, [sp, #24]
 800cae2:	2800      	cmp	r0, #0
 800cae4:	f43f af13 	beq.w	800c90e <_strtod_l+0x486>
 800cae8:	9b08      	ldr	r3, [sp, #32]
 800caea:	300c      	adds	r0, #12
 800caec:	691a      	ldr	r2, [r3, #16]
 800caee:	f103 010c 	add.w	r1, r3, #12
 800caf2:	3202      	adds	r2, #2
 800caf4:	0092      	lsls	r2, r2, #2
 800caf6:	f001 fe90 	bl	800e81a <memcpy>
 800cafa:	ab1e      	add	r3, sp, #120	; 0x78
 800cafc:	9301      	str	r3, [sp, #4]
 800cafe:	ab1d      	add	r3, sp, #116	; 0x74
 800cb00:	9300      	str	r3, [sp, #0]
 800cb02:	4642      	mov	r2, r8
 800cb04:	464b      	mov	r3, r9
 800cb06:	4650      	mov	r0, sl
 800cb08:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 800cb0c:	f002 fa8a 	bl	800f024 <__d2b>
 800cb10:	901c      	str	r0, [sp, #112]	; 0x70
 800cb12:	2800      	cmp	r0, #0
 800cb14:	f43f aefb 	beq.w	800c90e <_strtod_l+0x486>
 800cb18:	2101      	movs	r1, #1
 800cb1a:	4650      	mov	r0, sl
 800cb1c:	f001 ffdc 	bl	800ead8 <__i2b>
 800cb20:	4603      	mov	r3, r0
 800cb22:	9004      	str	r0, [sp, #16]
 800cb24:	2800      	cmp	r0, #0
 800cb26:	f43f aef2 	beq.w	800c90e <_strtod_l+0x486>
 800cb2a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800cb2c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800cb2e:	2d00      	cmp	r5, #0
 800cb30:	bfab      	itete	ge
 800cb32:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800cb34:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800cb36:	18ee      	addge	r6, r5, r3
 800cb38:	1b5c      	sublt	r4, r3, r5
 800cb3a:	9b05      	ldr	r3, [sp, #20]
 800cb3c:	bfa8      	it	ge
 800cb3e:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 800cb40:	eba5 0503 	sub.w	r5, r5, r3
 800cb44:	4415      	add	r5, r2
 800cb46:	4b71      	ldr	r3, [pc, #452]	; (800cd0c <_strtod_l+0x884>)
 800cb48:	f105 35ff 	add.w	r5, r5, #4294967295
 800cb4c:	bfb8      	it	lt
 800cb4e:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800cb50:	429d      	cmp	r5, r3
 800cb52:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800cb56:	f280 80c9 	bge.w	800ccec <_strtod_l+0x864>
 800cb5a:	1b5b      	subs	r3, r3, r5
 800cb5c:	2b1f      	cmp	r3, #31
 800cb5e:	f04f 0701 	mov.w	r7, #1
 800cb62:	eba2 0203 	sub.w	r2, r2, r3
 800cb66:	f300 80b6 	bgt.w	800ccd6 <_strtod_l+0x84e>
 800cb6a:	2500      	movs	r5, #0
 800cb6c:	fa07 f303 	lsl.w	r3, r7, r3
 800cb70:	930f      	str	r3, [sp, #60]	; 0x3c
 800cb72:	18b7      	adds	r7, r6, r2
 800cb74:	9b05      	ldr	r3, [sp, #20]
 800cb76:	42be      	cmp	r6, r7
 800cb78:	4414      	add	r4, r2
 800cb7a:	441c      	add	r4, r3
 800cb7c:	4633      	mov	r3, r6
 800cb7e:	bfa8      	it	ge
 800cb80:	463b      	movge	r3, r7
 800cb82:	42a3      	cmp	r3, r4
 800cb84:	bfa8      	it	ge
 800cb86:	4623      	movge	r3, r4
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	bfc2      	ittt	gt
 800cb8c:	1aff      	subgt	r7, r7, r3
 800cb8e:	1ae4      	subgt	r4, r4, r3
 800cb90:	1af6      	subgt	r6, r6, r3
 800cb92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	dd17      	ble.n	800cbc8 <_strtod_l+0x740>
 800cb98:	461a      	mov	r2, r3
 800cb9a:	4650      	mov	r0, sl
 800cb9c:	9904      	ldr	r1, [sp, #16]
 800cb9e:	f002 f855 	bl	800ec4c <__pow5mult>
 800cba2:	9004      	str	r0, [sp, #16]
 800cba4:	2800      	cmp	r0, #0
 800cba6:	f43f aeb2 	beq.w	800c90e <_strtod_l+0x486>
 800cbaa:	4601      	mov	r1, r0
 800cbac:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800cbae:	4650      	mov	r0, sl
 800cbb0:	f001 ffa8 	bl	800eb04 <__multiply>
 800cbb4:	9009      	str	r0, [sp, #36]	; 0x24
 800cbb6:	2800      	cmp	r0, #0
 800cbb8:	f43f aea9 	beq.w	800c90e <_strtod_l+0x486>
 800cbbc:	4650      	mov	r0, sl
 800cbbe:	991c      	ldr	r1, [sp, #112]	; 0x70
 800cbc0:	f001 fe86 	bl	800e8d0 <_Bfree>
 800cbc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbc6:	931c      	str	r3, [sp, #112]	; 0x70
 800cbc8:	2f00      	cmp	r7, #0
 800cbca:	f300 8093 	bgt.w	800ccf4 <_strtod_l+0x86c>
 800cbce:	9b07      	ldr	r3, [sp, #28]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	dd08      	ble.n	800cbe6 <_strtod_l+0x75e>
 800cbd4:	4650      	mov	r0, sl
 800cbd6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800cbd8:	9906      	ldr	r1, [sp, #24]
 800cbda:	f002 f837 	bl	800ec4c <__pow5mult>
 800cbde:	9006      	str	r0, [sp, #24]
 800cbe0:	2800      	cmp	r0, #0
 800cbe2:	f43f ae94 	beq.w	800c90e <_strtod_l+0x486>
 800cbe6:	2c00      	cmp	r4, #0
 800cbe8:	dd08      	ble.n	800cbfc <_strtod_l+0x774>
 800cbea:	4622      	mov	r2, r4
 800cbec:	4650      	mov	r0, sl
 800cbee:	9906      	ldr	r1, [sp, #24]
 800cbf0:	f002 f886 	bl	800ed00 <__lshift>
 800cbf4:	9006      	str	r0, [sp, #24]
 800cbf6:	2800      	cmp	r0, #0
 800cbf8:	f43f ae89 	beq.w	800c90e <_strtod_l+0x486>
 800cbfc:	2e00      	cmp	r6, #0
 800cbfe:	dd08      	ble.n	800cc12 <_strtod_l+0x78a>
 800cc00:	4632      	mov	r2, r6
 800cc02:	4650      	mov	r0, sl
 800cc04:	9904      	ldr	r1, [sp, #16]
 800cc06:	f002 f87b 	bl	800ed00 <__lshift>
 800cc0a:	9004      	str	r0, [sp, #16]
 800cc0c:	2800      	cmp	r0, #0
 800cc0e:	f43f ae7e 	beq.w	800c90e <_strtod_l+0x486>
 800cc12:	4650      	mov	r0, sl
 800cc14:	9a06      	ldr	r2, [sp, #24]
 800cc16:	991c      	ldr	r1, [sp, #112]	; 0x70
 800cc18:	f002 f8fa 	bl	800ee10 <__mdiff>
 800cc1c:	4683      	mov	fp, r0
 800cc1e:	2800      	cmp	r0, #0
 800cc20:	f43f ae75 	beq.w	800c90e <_strtod_l+0x486>
 800cc24:	2400      	movs	r4, #0
 800cc26:	68c3      	ldr	r3, [r0, #12]
 800cc28:	9904      	ldr	r1, [sp, #16]
 800cc2a:	60c4      	str	r4, [r0, #12]
 800cc2c:	930d      	str	r3, [sp, #52]	; 0x34
 800cc2e:	f002 f8d3 	bl	800edd8 <__mcmp>
 800cc32:	42a0      	cmp	r0, r4
 800cc34:	da70      	bge.n	800cd18 <_strtod_l+0x890>
 800cc36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cc38:	ea53 0308 	orrs.w	r3, r3, r8
 800cc3c:	f040 8096 	bne.w	800cd6c <_strtod_l+0x8e4>
 800cc40:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	f040 8091 	bne.w	800cd6c <_strtod_l+0x8e4>
 800cc4a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800cc4e:	0d1b      	lsrs	r3, r3, #20
 800cc50:	051b      	lsls	r3, r3, #20
 800cc52:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800cc56:	f240 8089 	bls.w	800cd6c <_strtod_l+0x8e4>
 800cc5a:	f8db 3014 	ldr.w	r3, [fp, #20]
 800cc5e:	b923      	cbnz	r3, 800cc6a <_strtod_l+0x7e2>
 800cc60:	f8db 3010 	ldr.w	r3, [fp, #16]
 800cc64:	2b01      	cmp	r3, #1
 800cc66:	f340 8081 	ble.w	800cd6c <_strtod_l+0x8e4>
 800cc6a:	4659      	mov	r1, fp
 800cc6c:	2201      	movs	r2, #1
 800cc6e:	4650      	mov	r0, sl
 800cc70:	f002 f846 	bl	800ed00 <__lshift>
 800cc74:	9904      	ldr	r1, [sp, #16]
 800cc76:	4683      	mov	fp, r0
 800cc78:	f002 f8ae 	bl	800edd8 <__mcmp>
 800cc7c:	2800      	cmp	r0, #0
 800cc7e:	dd75      	ble.n	800cd6c <_strtod_l+0x8e4>
 800cc80:	9905      	ldr	r1, [sp, #20]
 800cc82:	464b      	mov	r3, r9
 800cc84:	4a22      	ldr	r2, [pc, #136]	; (800cd10 <_strtod_l+0x888>)
 800cc86:	2900      	cmp	r1, #0
 800cc88:	f000 8091 	beq.w	800cdae <_strtod_l+0x926>
 800cc8c:	ea02 0109 	and.w	r1, r2, r9
 800cc90:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800cc94:	f300 808b 	bgt.w	800cdae <_strtod_l+0x926>
 800cc98:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800cc9c:	f77f aea9 	ble.w	800c9f2 <_strtod_l+0x56a>
 800cca0:	2300      	movs	r3, #0
 800cca2:	4a1c      	ldr	r2, [pc, #112]	; (800cd14 <_strtod_l+0x88c>)
 800cca4:	4640      	mov	r0, r8
 800cca6:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800ccaa:	4649      	mov	r1, r9
 800ccac:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800ccb0:	f7f3 fc7e 	bl	80005b0 <__aeabi_dmul>
 800ccb4:	460b      	mov	r3, r1
 800ccb6:	4303      	orrs	r3, r0
 800ccb8:	bf08      	it	eq
 800ccba:	2322      	moveq	r3, #34	; 0x22
 800ccbc:	4680      	mov	r8, r0
 800ccbe:	4689      	mov	r9, r1
 800ccc0:	bf08      	it	eq
 800ccc2:	f8ca 3000 	streq.w	r3, [sl]
 800ccc6:	e62d      	b.n	800c924 <_strtod_l+0x49c>
 800ccc8:	f04f 32ff 	mov.w	r2, #4294967295
 800cccc:	fa02 f303 	lsl.w	r3, r2, r3
 800ccd0:	ea03 0808 	and.w	r8, r3, r8
 800ccd4:	e6db      	b.n	800ca8e <_strtod_l+0x606>
 800ccd6:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800ccda:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800ccde:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800cce2:	35e2      	adds	r5, #226	; 0xe2
 800cce4:	fa07 f505 	lsl.w	r5, r7, r5
 800cce8:	970f      	str	r7, [sp, #60]	; 0x3c
 800ccea:	e742      	b.n	800cb72 <_strtod_l+0x6ea>
 800ccec:	2301      	movs	r3, #1
 800ccee:	2500      	movs	r5, #0
 800ccf0:	930f      	str	r3, [sp, #60]	; 0x3c
 800ccf2:	e73e      	b.n	800cb72 <_strtod_l+0x6ea>
 800ccf4:	463a      	mov	r2, r7
 800ccf6:	4650      	mov	r0, sl
 800ccf8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ccfa:	f002 f801 	bl	800ed00 <__lshift>
 800ccfe:	901c      	str	r0, [sp, #112]	; 0x70
 800cd00:	2800      	cmp	r0, #0
 800cd02:	f47f af64 	bne.w	800cbce <_strtod_l+0x746>
 800cd06:	e602      	b.n	800c90e <_strtod_l+0x486>
 800cd08:	08011118 	.word	0x08011118
 800cd0c:	fffffc02 	.word	0xfffffc02
 800cd10:	7ff00000 	.word	0x7ff00000
 800cd14:	39500000 	.word	0x39500000
 800cd18:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800cd1c:	d166      	bne.n	800cdec <_strtod_l+0x964>
 800cd1e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cd20:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cd24:	b35a      	cbz	r2, 800cd7e <_strtod_l+0x8f6>
 800cd26:	4a9c      	ldr	r2, [pc, #624]	; (800cf98 <_strtod_l+0xb10>)
 800cd28:	4293      	cmp	r3, r2
 800cd2a:	d12c      	bne.n	800cd86 <_strtod_l+0x8fe>
 800cd2c:	9b05      	ldr	r3, [sp, #20]
 800cd2e:	4640      	mov	r0, r8
 800cd30:	b303      	cbz	r3, 800cd74 <_strtod_l+0x8ec>
 800cd32:	464b      	mov	r3, r9
 800cd34:	4a99      	ldr	r2, [pc, #612]	; (800cf9c <_strtod_l+0xb14>)
 800cd36:	f04f 31ff 	mov.w	r1, #4294967295
 800cd3a:	401a      	ands	r2, r3
 800cd3c:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800cd40:	d81b      	bhi.n	800cd7a <_strtod_l+0x8f2>
 800cd42:	0d12      	lsrs	r2, r2, #20
 800cd44:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800cd48:	fa01 f303 	lsl.w	r3, r1, r3
 800cd4c:	4298      	cmp	r0, r3
 800cd4e:	d11a      	bne.n	800cd86 <_strtod_l+0x8fe>
 800cd50:	4b93      	ldr	r3, [pc, #588]	; (800cfa0 <_strtod_l+0xb18>)
 800cd52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cd54:	429a      	cmp	r2, r3
 800cd56:	d102      	bne.n	800cd5e <_strtod_l+0x8d6>
 800cd58:	3001      	adds	r0, #1
 800cd5a:	f43f add8 	beq.w	800c90e <_strtod_l+0x486>
 800cd5e:	f04f 0800 	mov.w	r8, #0
 800cd62:	4b8e      	ldr	r3, [pc, #568]	; (800cf9c <_strtod_l+0xb14>)
 800cd64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cd66:	401a      	ands	r2, r3
 800cd68:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800cd6c:	9b05      	ldr	r3, [sp, #20]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d196      	bne.n	800cca0 <_strtod_l+0x818>
 800cd72:	e5d7      	b.n	800c924 <_strtod_l+0x49c>
 800cd74:	f04f 33ff 	mov.w	r3, #4294967295
 800cd78:	e7e8      	b.n	800cd4c <_strtod_l+0x8c4>
 800cd7a:	460b      	mov	r3, r1
 800cd7c:	e7e6      	b.n	800cd4c <_strtod_l+0x8c4>
 800cd7e:	ea53 0308 	orrs.w	r3, r3, r8
 800cd82:	f43f af7d 	beq.w	800cc80 <_strtod_l+0x7f8>
 800cd86:	b1e5      	cbz	r5, 800cdc2 <_strtod_l+0x93a>
 800cd88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd8a:	421d      	tst	r5, r3
 800cd8c:	d0ee      	beq.n	800cd6c <_strtod_l+0x8e4>
 800cd8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cd90:	4640      	mov	r0, r8
 800cd92:	4649      	mov	r1, r9
 800cd94:	9a05      	ldr	r2, [sp, #20]
 800cd96:	b1c3      	cbz	r3, 800cdca <_strtod_l+0x942>
 800cd98:	f7ff fb54 	bl	800c444 <sulp>
 800cd9c:	4602      	mov	r2, r0
 800cd9e:	460b      	mov	r3, r1
 800cda0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800cda4:	f7f3 fa4e 	bl	8000244 <__adddf3>
 800cda8:	4680      	mov	r8, r0
 800cdaa:	4689      	mov	r9, r1
 800cdac:	e7de      	b.n	800cd6c <_strtod_l+0x8e4>
 800cdae:	4013      	ands	r3, r2
 800cdb0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800cdb4:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800cdb8:	f04f 38ff 	mov.w	r8, #4294967295
 800cdbc:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800cdc0:	e7d4      	b.n	800cd6c <_strtod_l+0x8e4>
 800cdc2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cdc4:	ea13 0f08 	tst.w	r3, r8
 800cdc8:	e7e0      	b.n	800cd8c <_strtod_l+0x904>
 800cdca:	f7ff fb3b 	bl	800c444 <sulp>
 800cdce:	4602      	mov	r2, r0
 800cdd0:	460b      	mov	r3, r1
 800cdd2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800cdd6:	f7f3 fa33 	bl	8000240 <__aeabi_dsub>
 800cdda:	2200      	movs	r2, #0
 800cddc:	2300      	movs	r3, #0
 800cdde:	4680      	mov	r8, r0
 800cde0:	4689      	mov	r9, r1
 800cde2:	f7f3 fe4d 	bl	8000a80 <__aeabi_dcmpeq>
 800cde6:	2800      	cmp	r0, #0
 800cde8:	d0c0      	beq.n	800cd6c <_strtod_l+0x8e4>
 800cdea:	e602      	b.n	800c9f2 <_strtod_l+0x56a>
 800cdec:	4658      	mov	r0, fp
 800cdee:	9904      	ldr	r1, [sp, #16]
 800cdf0:	f002 f974 	bl	800f0dc <__ratio>
 800cdf4:	2200      	movs	r2, #0
 800cdf6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cdfa:	4606      	mov	r6, r0
 800cdfc:	460f      	mov	r7, r1
 800cdfe:	f7f3 fe53 	bl	8000aa8 <__aeabi_dcmple>
 800ce02:	2800      	cmp	r0, #0
 800ce04:	d075      	beq.n	800cef2 <_strtod_l+0xa6a>
 800ce06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d047      	beq.n	800ce9c <_strtod_l+0xa14>
 800ce0c:	2600      	movs	r6, #0
 800ce0e:	4f65      	ldr	r7, [pc, #404]	; (800cfa4 <_strtod_l+0xb1c>)
 800ce10:	4d64      	ldr	r5, [pc, #400]	; (800cfa4 <_strtod_l+0xb1c>)
 800ce12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ce18:	0d1b      	lsrs	r3, r3, #20
 800ce1a:	051b      	lsls	r3, r3, #20
 800ce1c:	930f      	str	r3, [sp, #60]	; 0x3c
 800ce1e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ce20:	4b61      	ldr	r3, [pc, #388]	; (800cfa8 <_strtod_l+0xb20>)
 800ce22:	429a      	cmp	r2, r3
 800ce24:	f040 80c8 	bne.w	800cfb8 <_strtod_l+0xb30>
 800ce28:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ce2c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800ce30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce32:	4640      	mov	r0, r8
 800ce34:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800ce38:	4649      	mov	r1, r9
 800ce3a:	f002 f879 	bl	800ef30 <__ulp>
 800ce3e:	4602      	mov	r2, r0
 800ce40:	460b      	mov	r3, r1
 800ce42:	4630      	mov	r0, r6
 800ce44:	4639      	mov	r1, r7
 800ce46:	f7f3 fbb3 	bl	80005b0 <__aeabi_dmul>
 800ce4a:	4642      	mov	r2, r8
 800ce4c:	464b      	mov	r3, r9
 800ce4e:	f7f3 f9f9 	bl	8000244 <__adddf3>
 800ce52:	460b      	mov	r3, r1
 800ce54:	4951      	ldr	r1, [pc, #324]	; (800cf9c <_strtod_l+0xb14>)
 800ce56:	4a55      	ldr	r2, [pc, #340]	; (800cfac <_strtod_l+0xb24>)
 800ce58:	4019      	ands	r1, r3
 800ce5a:	4291      	cmp	r1, r2
 800ce5c:	4680      	mov	r8, r0
 800ce5e:	d95e      	bls.n	800cf1e <_strtod_l+0xa96>
 800ce60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ce62:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800ce66:	4293      	cmp	r3, r2
 800ce68:	d103      	bne.n	800ce72 <_strtod_l+0x9ea>
 800ce6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce6c:	3301      	adds	r3, #1
 800ce6e:	f43f ad4e 	beq.w	800c90e <_strtod_l+0x486>
 800ce72:	f04f 38ff 	mov.w	r8, #4294967295
 800ce76:	f8df 9128 	ldr.w	r9, [pc, #296]	; 800cfa0 <_strtod_l+0xb18>
 800ce7a:	4650      	mov	r0, sl
 800ce7c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ce7e:	f001 fd27 	bl	800e8d0 <_Bfree>
 800ce82:	4650      	mov	r0, sl
 800ce84:	9906      	ldr	r1, [sp, #24]
 800ce86:	f001 fd23 	bl	800e8d0 <_Bfree>
 800ce8a:	4650      	mov	r0, sl
 800ce8c:	9904      	ldr	r1, [sp, #16]
 800ce8e:	f001 fd1f 	bl	800e8d0 <_Bfree>
 800ce92:	4659      	mov	r1, fp
 800ce94:	4650      	mov	r0, sl
 800ce96:	f001 fd1b 	bl	800e8d0 <_Bfree>
 800ce9a:	e61c      	b.n	800cad6 <_strtod_l+0x64e>
 800ce9c:	f1b8 0f00 	cmp.w	r8, #0
 800cea0:	d119      	bne.n	800ced6 <_strtod_l+0xa4e>
 800cea2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cea4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cea8:	b9e3      	cbnz	r3, 800cee4 <_strtod_l+0xa5c>
 800ceaa:	2200      	movs	r2, #0
 800ceac:	4630      	mov	r0, r6
 800ceae:	4639      	mov	r1, r7
 800ceb0:	4b3c      	ldr	r3, [pc, #240]	; (800cfa4 <_strtod_l+0xb1c>)
 800ceb2:	f7f3 fdef 	bl	8000a94 <__aeabi_dcmplt>
 800ceb6:	b9c8      	cbnz	r0, 800ceec <_strtod_l+0xa64>
 800ceb8:	2200      	movs	r2, #0
 800ceba:	4630      	mov	r0, r6
 800cebc:	4639      	mov	r1, r7
 800cebe:	4b3c      	ldr	r3, [pc, #240]	; (800cfb0 <_strtod_l+0xb28>)
 800cec0:	f7f3 fb76 	bl	80005b0 <__aeabi_dmul>
 800cec4:	4604      	mov	r4, r0
 800cec6:	460d      	mov	r5, r1
 800cec8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800cecc:	9418      	str	r4, [sp, #96]	; 0x60
 800cece:	9319      	str	r3, [sp, #100]	; 0x64
 800ced0:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 800ced4:	e79d      	b.n	800ce12 <_strtod_l+0x98a>
 800ced6:	f1b8 0f01 	cmp.w	r8, #1
 800ceda:	d103      	bne.n	800cee4 <_strtod_l+0xa5c>
 800cedc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cede:	2b00      	cmp	r3, #0
 800cee0:	f43f ad87 	beq.w	800c9f2 <_strtod_l+0x56a>
 800cee4:	2600      	movs	r6, #0
 800cee6:	2400      	movs	r4, #0
 800cee8:	4f32      	ldr	r7, [pc, #200]	; (800cfb4 <_strtod_l+0xb2c>)
 800ceea:	e791      	b.n	800ce10 <_strtod_l+0x988>
 800ceec:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800ceee:	4d30      	ldr	r5, [pc, #192]	; (800cfb0 <_strtod_l+0xb28>)
 800cef0:	e7ea      	b.n	800cec8 <_strtod_l+0xa40>
 800cef2:	4b2f      	ldr	r3, [pc, #188]	; (800cfb0 <_strtod_l+0xb28>)
 800cef4:	2200      	movs	r2, #0
 800cef6:	4630      	mov	r0, r6
 800cef8:	4639      	mov	r1, r7
 800cefa:	f7f3 fb59 	bl	80005b0 <__aeabi_dmul>
 800cefe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cf00:	4604      	mov	r4, r0
 800cf02:	460d      	mov	r5, r1
 800cf04:	b933      	cbnz	r3, 800cf14 <_strtod_l+0xa8c>
 800cf06:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cf0a:	9010      	str	r0, [sp, #64]	; 0x40
 800cf0c:	9311      	str	r3, [sp, #68]	; 0x44
 800cf0e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800cf12:	e77e      	b.n	800ce12 <_strtod_l+0x98a>
 800cf14:	4602      	mov	r2, r0
 800cf16:	460b      	mov	r3, r1
 800cf18:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800cf1c:	e7f7      	b.n	800cf0e <_strtod_l+0xa86>
 800cf1e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800cf22:	9b05      	ldr	r3, [sp, #20]
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d1a8      	bne.n	800ce7a <_strtod_l+0x9f2>
 800cf28:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800cf2c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cf2e:	0d1b      	lsrs	r3, r3, #20
 800cf30:	051b      	lsls	r3, r3, #20
 800cf32:	429a      	cmp	r2, r3
 800cf34:	d1a1      	bne.n	800ce7a <_strtod_l+0x9f2>
 800cf36:	4620      	mov	r0, r4
 800cf38:	4629      	mov	r1, r5
 800cf3a:	f7f4 f925 	bl	8001188 <__aeabi_d2lz>
 800cf3e:	f7f3 fb09 	bl	8000554 <__aeabi_l2d>
 800cf42:	4602      	mov	r2, r0
 800cf44:	460b      	mov	r3, r1
 800cf46:	4620      	mov	r0, r4
 800cf48:	4629      	mov	r1, r5
 800cf4a:	f7f3 f979 	bl	8000240 <__aeabi_dsub>
 800cf4e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cf50:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cf54:	ea43 0308 	orr.w	r3, r3, r8
 800cf58:	4313      	orrs	r3, r2
 800cf5a:	4604      	mov	r4, r0
 800cf5c:	460d      	mov	r5, r1
 800cf5e:	d066      	beq.n	800d02e <_strtod_l+0xba6>
 800cf60:	a309      	add	r3, pc, #36	; (adr r3, 800cf88 <_strtod_l+0xb00>)
 800cf62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf66:	f7f3 fd95 	bl	8000a94 <__aeabi_dcmplt>
 800cf6a:	2800      	cmp	r0, #0
 800cf6c:	f47f acda 	bne.w	800c924 <_strtod_l+0x49c>
 800cf70:	a307      	add	r3, pc, #28	; (adr r3, 800cf90 <_strtod_l+0xb08>)
 800cf72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf76:	4620      	mov	r0, r4
 800cf78:	4629      	mov	r1, r5
 800cf7a:	f7f3 fda9 	bl	8000ad0 <__aeabi_dcmpgt>
 800cf7e:	2800      	cmp	r0, #0
 800cf80:	f43f af7b 	beq.w	800ce7a <_strtod_l+0x9f2>
 800cf84:	e4ce      	b.n	800c924 <_strtod_l+0x49c>
 800cf86:	bf00      	nop
 800cf88:	94a03595 	.word	0x94a03595
 800cf8c:	3fdfffff 	.word	0x3fdfffff
 800cf90:	35afe535 	.word	0x35afe535
 800cf94:	3fe00000 	.word	0x3fe00000
 800cf98:	000fffff 	.word	0x000fffff
 800cf9c:	7ff00000 	.word	0x7ff00000
 800cfa0:	7fefffff 	.word	0x7fefffff
 800cfa4:	3ff00000 	.word	0x3ff00000
 800cfa8:	7fe00000 	.word	0x7fe00000
 800cfac:	7c9fffff 	.word	0x7c9fffff
 800cfb0:	3fe00000 	.word	0x3fe00000
 800cfb4:	bff00000 	.word	0xbff00000
 800cfb8:	9b05      	ldr	r3, [sp, #20]
 800cfba:	b313      	cbz	r3, 800d002 <_strtod_l+0xb7a>
 800cfbc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cfbe:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800cfc2:	d81e      	bhi.n	800d002 <_strtod_l+0xb7a>
 800cfc4:	a326      	add	r3, pc, #152	; (adr r3, 800d060 <_strtod_l+0xbd8>)
 800cfc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfca:	4620      	mov	r0, r4
 800cfcc:	4629      	mov	r1, r5
 800cfce:	f7f3 fd6b 	bl	8000aa8 <__aeabi_dcmple>
 800cfd2:	b190      	cbz	r0, 800cffa <_strtod_l+0xb72>
 800cfd4:	4629      	mov	r1, r5
 800cfd6:	4620      	mov	r0, r4
 800cfd8:	f7f3 fdc2 	bl	8000b60 <__aeabi_d2uiz>
 800cfdc:	2801      	cmp	r0, #1
 800cfde:	bf38      	it	cc
 800cfe0:	2001      	movcc	r0, #1
 800cfe2:	f7f3 fa6b 	bl	80004bc <__aeabi_ui2d>
 800cfe6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cfe8:	4604      	mov	r4, r0
 800cfea:	460d      	mov	r5, r1
 800cfec:	b9d3      	cbnz	r3, 800d024 <_strtod_l+0xb9c>
 800cfee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cff2:	9012      	str	r0, [sp, #72]	; 0x48
 800cff4:	9313      	str	r3, [sp, #76]	; 0x4c
 800cff6:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800cffa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cffc:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800d000:	1a9f      	subs	r7, r3, r2
 800d002:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d006:	f001 ff93 	bl	800ef30 <__ulp>
 800d00a:	4602      	mov	r2, r0
 800d00c:	460b      	mov	r3, r1
 800d00e:	4630      	mov	r0, r6
 800d010:	4639      	mov	r1, r7
 800d012:	f7f3 facd 	bl	80005b0 <__aeabi_dmul>
 800d016:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d01a:	f7f3 f913 	bl	8000244 <__adddf3>
 800d01e:	4680      	mov	r8, r0
 800d020:	4689      	mov	r9, r1
 800d022:	e77e      	b.n	800cf22 <_strtod_l+0xa9a>
 800d024:	4602      	mov	r2, r0
 800d026:	460b      	mov	r3, r1
 800d028:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800d02c:	e7e3      	b.n	800cff6 <_strtod_l+0xb6e>
 800d02e:	a30e      	add	r3, pc, #56	; (adr r3, 800d068 <_strtod_l+0xbe0>)
 800d030:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d034:	f7f3 fd2e 	bl	8000a94 <__aeabi_dcmplt>
 800d038:	e7a1      	b.n	800cf7e <_strtod_l+0xaf6>
 800d03a:	2300      	movs	r3, #0
 800d03c:	930c      	str	r3, [sp, #48]	; 0x30
 800d03e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d040:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d042:	6013      	str	r3, [r2, #0]
 800d044:	f7ff ba65 	b.w	800c512 <_strtod_l+0x8a>
 800d048:	2b65      	cmp	r3, #101	; 0x65
 800d04a:	f43f ab5c 	beq.w	800c706 <_strtod_l+0x27e>
 800d04e:	2b45      	cmp	r3, #69	; 0x45
 800d050:	f43f ab59 	beq.w	800c706 <_strtod_l+0x27e>
 800d054:	2201      	movs	r2, #1
 800d056:	f7ff bb8d 	b.w	800c774 <_strtod_l+0x2ec>
 800d05a:	bf00      	nop
 800d05c:	f3af 8000 	nop.w
 800d060:	ffc00000 	.word	0xffc00000
 800d064:	41dfffff 	.word	0x41dfffff
 800d068:	94a03595 	.word	0x94a03595
 800d06c:	3fcfffff 	.word	0x3fcfffff

0800d070 <strtod>:
 800d070:	460a      	mov	r2, r1
 800d072:	4601      	mov	r1, r0
 800d074:	4802      	ldr	r0, [pc, #8]	; (800d080 <strtod+0x10>)
 800d076:	4b03      	ldr	r3, [pc, #12]	; (800d084 <strtod+0x14>)
 800d078:	6800      	ldr	r0, [r0, #0]
 800d07a:	f7ff ba05 	b.w	800c488 <_strtod_l>
 800d07e:	bf00      	nop
 800d080:	2000001c 	.word	0x2000001c
 800d084:	20000084 	.word	0x20000084

0800d088 <_strtol_l.isra.0>:
 800d088:	2b01      	cmp	r3, #1
 800d08a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d08e:	4686      	mov	lr, r0
 800d090:	d001      	beq.n	800d096 <_strtol_l.isra.0+0xe>
 800d092:	2b24      	cmp	r3, #36	; 0x24
 800d094:	d906      	bls.n	800d0a4 <_strtol_l.isra.0+0x1c>
 800d096:	f7fe fbf1 	bl	800b87c <__errno>
 800d09a:	2316      	movs	r3, #22
 800d09c:	6003      	str	r3, [r0, #0]
 800d09e:	2000      	movs	r0, #0
 800d0a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0a4:	468c      	mov	ip, r1
 800d0a6:	4e3a      	ldr	r6, [pc, #232]	; (800d190 <_strtol_l.isra.0+0x108>)
 800d0a8:	4660      	mov	r0, ip
 800d0aa:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800d0ae:	5da5      	ldrb	r5, [r4, r6]
 800d0b0:	f015 0508 	ands.w	r5, r5, #8
 800d0b4:	d1f8      	bne.n	800d0a8 <_strtol_l.isra.0+0x20>
 800d0b6:	2c2d      	cmp	r4, #45	; 0x2d
 800d0b8:	d133      	bne.n	800d122 <_strtol_l.isra.0+0x9a>
 800d0ba:	f04f 0801 	mov.w	r8, #1
 800d0be:	f89c 4000 	ldrb.w	r4, [ip]
 800d0c2:	f100 0c02 	add.w	ip, r0, #2
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d05d      	beq.n	800d186 <_strtol_l.isra.0+0xfe>
 800d0ca:	2b10      	cmp	r3, #16
 800d0cc:	d10c      	bne.n	800d0e8 <_strtol_l.isra.0+0x60>
 800d0ce:	2c30      	cmp	r4, #48	; 0x30
 800d0d0:	d10a      	bne.n	800d0e8 <_strtol_l.isra.0+0x60>
 800d0d2:	f89c 0000 	ldrb.w	r0, [ip]
 800d0d6:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800d0da:	2858      	cmp	r0, #88	; 0x58
 800d0dc:	d14e      	bne.n	800d17c <_strtol_l.isra.0+0xf4>
 800d0de:	2310      	movs	r3, #16
 800d0e0:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800d0e4:	f10c 0c02 	add.w	ip, ip, #2
 800d0e8:	2500      	movs	r5, #0
 800d0ea:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 800d0ee:	3f01      	subs	r7, #1
 800d0f0:	fbb7 f9f3 	udiv	r9, r7, r3
 800d0f4:	4628      	mov	r0, r5
 800d0f6:	fb03 7a19 	mls	sl, r3, r9, r7
 800d0fa:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800d0fe:	2e09      	cmp	r6, #9
 800d100:	d818      	bhi.n	800d134 <_strtol_l.isra.0+0xac>
 800d102:	4634      	mov	r4, r6
 800d104:	42a3      	cmp	r3, r4
 800d106:	dd24      	ble.n	800d152 <_strtol_l.isra.0+0xca>
 800d108:	2d00      	cmp	r5, #0
 800d10a:	db1f      	blt.n	800d14c <_strtol_l.isra.0+0xc4>
 800d10c:	4581      	cmp	r9, r0
 800d10e:	d31d      	bcc.n	800d14c <_strtol_l.isra.0+0xc4>
 800d110:	d101      	bne.n	800d116 <_strtol_l.isra.0+0x8e>
 800d112:	45a2      	cmp	sl, r4
 800d114:	db1a      	blt.n	800d14c <_strtol_l.isra.0+0xc4>
 800d116:	2501      	movs	r5, #1
 800d118:	fb00 4003 	mla	r0, r0, r3, r4
 800d11c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800d120:	e7eb      	b.n	800d0fa <_strtol_l.isra.0+0x72>
 800d122:	2c2b      	cmp	r4, #43	; 0x2b
 800d124:	bf08      	it	eq
 800d126:	f89c 4000 	ldrbeq.w	r4, [ip]
 800d12a:	46a8      	mov	r8, r5
 800d12c:	bf08      	it	eq
 800d12e:	f100 0c02 	addeq.w	ip, r0, #2
 800d132:	e7c8      	b.n	800d0c6 <_strtol_l.isra.0+0x3e>
 800d134:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800d138:	2e19      	cmp	r6, #25
 800d13a:	d801      	bhi.n	800d140 <_strtol_l.isra.0+0xb8>
 800d13c:	3c37      	subs	r4, #55	; 0x37
 800d13e:	e7e1      	b.n	800d104 <_strtol_l.isra.0+0x7c>
 800d140:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800d144:	2e19      	cmp	r6, #25
 800d146:	d804      	bhi.n	800d152 <_strtol_l.isra.0+0xca>
 800d148:	3c57      	subs	r4, #87	; 0x57
 800d14a:	e7db      	b.n	800d104 <_strtol_l.isra.0+0x7c>
 800d14c:	f04f 35ff 	mov.w	r5, #4294967295
 800d150:	e7e4      	b.n	800d11c <_strtol_l.isra.0+0x94>
 800d152:	2d00      	cmp	r5, #0
 800d154:	da08      	bge.n	800d168 <_strtol_l.isra.0+0xe0>
 800d156:	2322      	movs	r3, #34	; 0x22
 800d158:	4638      	mov	r0, r7
 800d15a:	f8ce 3000 	str.w	r3, [lr]
 800d15e:	2a00      	cmp	r2, #0
 800d160:	d09e      	beq.n	800d0a0 <_strtol_l.isra.0+0x18>
 800d162:	f10c 31ff 	add.w	r1, ip, #4294967295
 800d166:	e007      	b.n	800d178 <_strtol_l.isra.0+0xf0>
 800d168:	f1b8 0f00 	cmp.w	r8, #0
 800d16c:	d000      	beq.n	800d170 <_strtol_l.isra.0+0xe8>
 800d16e:	4240      	negs	r0, r0
 800d170:	2a00      	cmp	r2, #0
 800d172:	d095      	beq.n	800d0a0 <_strtol_l.isra.0+0x18>
 800d174:	2d00      	cmp	r5, #0
 800d176:	d1f4      	bne.n	800d162 <_strtol_l.isra.0+0xda>
 800d178:	6011      	str	r1, [r2, #0]
 800d17a:	e791      	b.n	800d0a0 <_strtol_l.isra.0+0x18>
 800d17c:	2430      	movs	r4, #48	; 0x30
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d1b2      	bne.n	800d0e8 <_strtol_l.isra.0+0x60>
 800d182:	2308      	movs	r3, #8
 800d184:	e7b0      	b.n	800d0e8 <_strtol_l.isra.0+0x60>
 800d186:	2c30      	cmp	r4, #48	; 0x30
 800d188:	d0a3      	beq.n	800d0d2 <_strtol_l.isra.0+0x4a>
 800d18a:	230a      	movs	r3, #10
 800d18c:	e7ac      	b.n	800d0e8 <_strtol_l.isra.0+0x60>
 800d18e:	bf00      	nop
 800d190:	08011141 	.word	0x08011141

0800d194 <strtol>:
 800d194:	4613      	mov	r3, r2
 800d196:	460a      	mov	r2, r1
 800d198:	4601      	mov	r1, r0
 800d19a:	4802      	ldr	r0, [pc, #8]	; (800d1a4 <strtol+0x10>)
 800d19c:	6800      	ldr	r0, [r0, #0]
 800d19e:	f7ff bf73 	b.w	800d088 <_strtol_l.isra.0>
 800d1a2:	bf00      	nop
 800d1a4:	2000001c 	.word	0x2000001c

0800d1a8 <_vsniprintf_r>:
 800d1a8:	b530      	push	{r4, r5, lr}
 800d1aa:	1e14      	subs	r4, r2, #0
 800d1ac:	4605      	mov	r5, r0
 800d1ae:	b09b      	sub	sp, #108	; 0x6c
 800d1b0:	4618      	mov	r0, r3
 800d1b2:	da05      	bge.n	800d1c0 <_vsniprintf_r+0x18>
 800d1b4:	238b      	movs	r3, #139	; 0x8b
 800d1b6:	f04f 30ff 	mov.w	r0, #4294967295
 800d1ba:	602b      	str	r3, [r5, #0]
 800d1bc:	b01b      	add	sp, #108	; 0x6c
 800d1be:	bd30      	pop	{r4, r5, pc}
 800d1c0:	f44f 7302 	mov.w	r3, #520	; 0x208
 800d1c4:	f8ad 300c 	strh.w	r3, [sp, #12]
 800d1c8:	bf0c      	ite	eq
 800d1ca:	4623      	moveq	r3, r4
 800d1cc:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d1d0:	9302      	str	r3, [sp, #8]
 800d1d2:	9305      	str	r3, [sp, #20]
 800d1d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d1d8:	4602      	mov	r2, r0
 800d1da:	9100      	str	r1, [sp, #0]
 800d1dc:	9104      	str	r1, [sp, #16]
 800d1de:	f8ad 300e 	strh.w	r3, [sp, #14]
 800d1e2:	4669      	mov	r1, sp
 800d1e4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d1e6:	4628      	mov	r0, r5
 800d1e8:	f002 f854 	bl	800f294 <_svfiprintf_r>
 800d1ec:	1c43      	adds	r3, r0, #1
 800d1ee:	bfbc      	itt	lt
 800d1f0:	238b      	movlt	r3, #139	; 0x8b
 800d1f2:	602b      	strlt	r3, [r5, #0]
 800d1f4:	2c00      	cmp	r4, #0
 800d1f6:	d0e1      	beq.n	800d1bc <_vsniprintf_r+0x14>
 800d1f8:	2200      	movs	r2, #0
 800d1fa:	9b00      	ldr	r3, [sp, #0]
 800d1fc:	701a      	strb	r2, [r3, #0]
 800d1fe:	e7dd      	b.n	800d1bc <_vsniprintf_r+0x14>

0800d200 <vsniprintf>:
 800d200:	b507      	push	{r0, r1, r2, lr}
 800d202:	9300      	str	r3, [sp, #0]
 800d204:	4613      	mov	r3, r2
 800d206:	460a      	mov	r2, r1
 800d208:	4601      	mov	r1, r0
 800d20a:	4803      	ldr	r0, [pc, #12]	; (800d218 <vsniprintf+0x18>)
 800d20c:	6800      	ldr	r0, [r0, #0]
 800d20e:	f7ff ffcb 	bl	800d1a8 <_vsniprintf_r>
 800d212:	b003      	add	sp, #12
 800d214:	f85d fb04 	ldr.w	pc, [sp], #4
 800d218:	2000001c 	.word	0x2000001c

0800d21c <quorem>:
 800d21c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d220:	6903      	ldr	r3, [r0, #16]
 800d222:	690c      	ldr	r4, [r1, #16]
 800d224:	4607      	mov	r7, r0
 800d226:	42a3      	cmp	r3, r4
 800d228:	f2c0 8083 	blt.w	800d332 <quorem+0x116>
 800d22c:	3c01      	subs	r4, #1
 800d22e:	f100 0514 	add.w	r5, r0, #20
 800d232:	f101 0814 	add.w	r8, r1, #20
 800d236:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d23a:	9301      	str	r3, [sp, #4]
 800d23c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d240:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d244:	3301      	adds	r3, #1
 800d246:	429a      	cmp	r2, r3
 800d248:	fbb2 f6f3 	udiv	r6, r2, r3
 800d24c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d250:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d254:	d332      	bcc.n	800d2bc <quorem+0xa0>
 800d256:	f04f 0e00 	mov.w	lr, #0
 800d25a:	4640      	mov	r0, r8
 800d25c:	46ac      	mov	ip, r5
 800d25e:	46f2      	mov	sl, lr
 800d260:	f850 2b04 	ldr.w	r2, [r0], #4
 800d264:	b293      	uxth	r3, r2
 800d266:	fb06 e303 	mla	r3, r6, r3, lr
 800d26a:	0c12      	lsrs	r2, r2, #16
 800d26c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d270:	fb06 e202 	mla	r2, r6, r2, lr
 800d274:	b29b      	uxth	r3, r3
 800d276:	ebaa 0303 	sub.w	r3, sl, r3
 800d27a:	f8dc a000 	ldr.w	sl, [ip]
 800d27e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d282:	fa1f fa8a 	uxth.w	sl, sl
 800d286:	4453      	add	r3, sl
 800d288:	fa1f fa82 	uxth.w	sl, r2
 800d28c:	f8dc 2000 	ldr.w	r2, [ip]
 800d290:	4581      	cmp	r9, r0
 800d292:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800d296:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d29a:	b29b      	uxth	r3, r3
 800d29c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d2a0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d2a4:	f84c 3b04 	str.w	r3, [ip], #4
 800d2a8:	d2da      	bcs.n	800d260 <quorem+0x44>
 800d2aa:	f855 300b 	ldr.w	r3, [r5, fp]
 800d2ae:	b92b      	cbnz	r3, 800d2bc <quorem+0xa0>
 800d2b0:	9b01      	ldr	r3, [sp, #4]
 800d2b2:	3b04      	subs	r3, #4
 800d2b4:	429d      	cmp	r5, r3
 800d2b6:	461a      	mov	r2, r3
 800d2b8:	d32f      	bcc.n	800d31a <quorem+0xfe>
 800d2ba:	613c      	str	r4, [r7, #16]
 800d2bc:	4638      	mov	r0, r7
 800d2be:	f001 fd8b 	bl	800edd8 <__mcmp>
 800d2c2:	2800      	cmp	r0, #0
 800d2c4:	db25      	blt.n	800d312 <quorem+0xf6>
 800d2c6:	4628      	mov	r0, r5
 800d2c8:	f04f 0c00 	mov.w	ip, #0
 800d2cc:	3601      	adds	r6, #1
 800d2ce:	f858 1b04 	ldr.w	r1, [r8], #4
 800d2d2:	f8d0 e000 	ldr.w	lr, [r0]
 800d2d6:	b28b      	uxth	r3, r1
 800d2d8:	ebac 0303 	sub.w	r3, ip, r3
 800d2dc:	fa1f f28e 	uxth.w	r2, lr
 800d2e0:	4413      	add	r3, r2
 800d2e2:	0c0a      	lsrs	r2, r1, #16
 800d2e4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d2e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d2ec:	b29b      	uxth	r3, r3
 800d2ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d2f2:	45c1      	cmp	r9, r8
 800d2f4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d2f8:	f840 3b04 	str.w	r3, [r0], #4
 800d2fc:	d2e7      	bcs.n	800d2ce <quorem+0xb2>
 800d2fe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d302:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d306:	b922      	cbnz	r2, 800d312 <quorem+0xf6>
 800d308:	3b04      	subs	r3, #4
 800d30a:	429d      	cmp	r5, r3
 800d30c:	461a      	mov	r2, r3
 800d30e:	d30a      	bcc.n	800d326 <quorem+0x10a>
 800d310:	613c      	str	r4, [r7, #16]
 800d312:	4630      	mov	r0, r6
 800d314:	b003      	add	sp, #12
 800d316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d31a:	6812      	ldr	r2, [r2, #0]
 800d31c:	3b04      	subs	r3, #4
 800d31e:	2a00      	cmp	r2, #0
 800d320:	d1cb      	bne.n	800d2ba <quorem+0x9e>
 800d322:	3c01      	subs	r4, #1
 800d324:	e7c6      	b.n	800d2b4 <quorem+0x98>
 800d326:	6812      	ldr	r2, [r2, #0]
 800d328:	3b04      	subs	r3, #4
 800d32a:	2a00      	cmp	r2, #0
 800d32c:	d1f0      	bne.n	800d310 <quorem+0xf4>
 800d32e:	3c01      	subs	r4, #1
 800d330:	e7eb      	b.n	800d30a <quorem+0xee>
 800d332:	2000      	movs	r0, #0
 800d334:	e7ee      	b.n	800d314 <quorem+0xf8>
	...

0800d338 <_dtoa_r>:
 800d338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d33c:	4616      	mov	r6, r2
 800d33e:	461f      	mov	r7, r3
 800d340:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800d342:	b099      	sub	sp, #100	; 0x64
 800d344:	4605      	mov	r5, r0
 800d346:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800d34a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800d34e:	b974      	cbnz	r4, 800d36e <_dtoa_r+0x36>
 800d350:	2010      	movs	r0, #16
 800d352:	f7fe fabd 	bl	800b8d0 <malloc>
 800d356:	4602      	mov	r2, r0
 800d358:	6268      	str	r0, [r5, #36]	; 0x24
 800d35a:	b920      	cbnz	r0, 800d366 <_dtoa_r+0x2e>
 800d35c:	21ea      	movs	r1, #234	; 0xea
 800d35e:	4bae      	ldr	r3, [pc, #696]	; (800d618 <_dtoa_r+0x2e0>)
 800d360:	48ae      	ldr	r0, [pc, #696]	; (800d61c <_dtoa_r+0x2e4>)
 800d362:	f002 fb2b 	bl	800f9bc <__assert_func>
 800d366:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d36a:	6004      	str	r4, [r0, #0]
 800d36c:	60c4      	str	r4, [r0, #12]
 800d36e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d370:	6819      	ldr	r1, [r3, #0]
 800d372:	b151      	cbz	r1, 800d38a <_dtoa_r+0x52>
 800d374:	685a      	ldr	r2, [r3, #4]
 800d376:	2301      	movs	r3, #1
 800d378:	4093      	lsls	r3, r2
 800d37a:	604a      	str	r2, [r1, #4]
 800d37c:	608b      	str	r3, [r1, #8]
 800d37e:	4628      	mov	r0, r5
 800d380:	f001 faa6 	bl	800e8d0 <_Bfree>
 800d384:	2200      	movs	r2, #0
 800d386:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d388:	601a      	str	r2, [r3, #0]
 800d38a:	1e3b      	subs	r3, r7, #0
 800d38c:	bfaf      	iteee	ge
 800d38e:	2300      	movge	r3, #0
 800d390:	2201      	movlt	r2, #1
 800d392:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d396:	9305      	strlt	r3, [sp, #20]
 800d398:	bfa8      	it	ge
 800d39a:	f8c8 3000 	strge.w	r3, [r8]
 800d39e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800d3a2:	4b9f      	ldr	r3, [pc, #636]	; (800d620 <_dtoa_r+0x2e8>)
 800d3a4:	bfb8      	it	lt
 800d3a6:	f8c8 2000 	strlt.w	r2, [r8]
 800d3aa:	ea33 0309 	bics.w	r3, r3, r9
 800d3ae:	d119      	bne.n	800d3e4 <_dtoa_r+0xac>
 800d3b0:	f242 730f 	movw	r3, #9999	; 0x270f
 800d3b4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800d3b6:	6013      	str	r3, [r2, #0]
 800d3b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d3bc:	4333      	orrs	r3, r6
 800d3be:	f000 8580 	beq.w	800dec2 <_dtoa_r+0xb8a>
 800d3c2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d3c4:	b953      	cbnz	r3, 800d3dc <_dtoa_r+0xa4>
 800d3c6:	4b97      	ldr	r3, [pc, #604]	; (800d624 <_dtoa_r+0x2ec>)
 800d3c8:	e022      	b.n	800d410 <_dtoa_r+0xd8>
 800d3ca:	4b97      	ldr	r3, [pc, #604]	; (800d628 <_dtoa_r+0x2f0>)
 800d3cc:	9308      	str	r3, [sp, #32]
 800d3ce:	3308      	adds	r3, #8
 800d3d0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800d3d2:	6013      	str	r3, [r2, #0]
 800d3d4:	9808      	ldr	r0, [sp, #32]
 800d3d6:	b019      	add	sp, #100	; 0x64
 800d3d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3dc:	4b91      	ldr	r3, [pc, #580]	; (800d624 <_dtoa_r+0x2ec>)
 800d3de:	9308      	str	r3, [sp, #32]
 800d3e0:	3303      	adds	r3, #3
 800d3e2:	e7f5      	b.n	800d3d0 <_dtoa_r+0x98>
 800d3e4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800d3e8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800d3ec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d3f0:	2200      	movs	r2, #0
 800d3f2:	2300      	movs	r3, #0
 800d3f4:	f7f3 fb44 	bl	8000a80 <__aeabi_dcmpeq>
 800d3f8:	4680      	mov	r8, r0
 800d3fa:	b158      	cbz	r0, 800d414 <_dtoa_r+0xdc>
 800d3fc:	2301      	movs	r3, #1
 800d3fe:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800d400:	6013      	str	r3, [r2, #0]
 800d402:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d404:	2b00      	cmp	r3, #0
 800d406:	f000 8559 	beq.w	800debc <_dtoa_r+0xb84>
 800d40a:	4888      	ldr	r0, [pc, #544]	; (800d62c <_dtoa_r+0x2f4>)
 800d40c:	6018      	str	r0, [r3, #0]
 800d40e:	1e43      	subs	r3, r0, #1
 800d410:	9308      	str	r3, [sp, #32]
 800d412:	e7df      	b.n	800d3d4 <_dtoa_r+0x9c>
 800d414:	ab16      	add	r3, sp, #88	; 0x58
 800d416:	9301      	str	r3, [sp, #4]
 800d418:	ab17      	add	r3, sp, #92	; 0x5c
 800d41a:	9300      	str	r3, [sp, #0]
 800d41c:	4628      	mov	r0, r5
 800d41e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d422:	f001 fdff 	bl	800f024 <__d2b>
 800d426:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800d42a:	4682      	mov	sl, r0
 800d42c:	2c00      	cmp	r4, #0
 800d42e:	d07e      	beq.n	800d52e <_dtoa_r+0x1f6>
 800d430:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d434:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d436:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800d43a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d43e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800d442:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800d446:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800d44a:	2200      	movs	r2, #0
 800d44c:	4b78      	ldr	r3, [pc, #480]	; (800d630 <_dtoa_r+0x2f8>)
 800d44e:	f7f2 fef7 	bl	8000240 <__aeabi_dsub>
 800d452:	a36b      	add	r3, pc, #428	; (adr r3, 800d600 <_dtoa_r+0x2c8>)
 800d454:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d458:	f7f3 f8aa 	bl	80005b0 <__aeabi_dmul>
 800d45c:	a36a      	add	r3, pc, #424	; (adr r3, 800d608 <_dtoa_r+0x2d0>)
 800d45e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d462:	f7f2 feef 	bl	8000244 <__adddf3>
 800d466:	4606      	mov	r6, r0
 800d468:	4620      	mov	r0, r4
 800d46a:	460f      	mov	r7, r1
 800d46c:	f7f3 f836 	bl	80004dc <__aeabi_i2d>
 800d470:	a367      	add	r3, pc, #412	; (adr r3, 800d610 <_dtoa_r+0x2d8>)
 800d472:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d476:	f7f3 f89b 	bl	80005b0 <__aeabi_dmul>
 800d47a:	4602      	mov	r2, r0
 800d47c:	460b      	mov	r3, r1
 800d47e:	4630      	mov	r0, r6
 800d480:	4639      	mov	r1, r7
 800d482:	f7f2 fedf 	bl	8000244 <__adddf3>
 800d486:	4606      	mov	r6, r0
 800d488:	460f      	mov	r7, r1
 800d48a:	f7f3 fb41 	bl	8000b10 <__aeabi_d2iz>
 800d48e:	2200      	movs	r2, #0
 800d490:	4681      	mov	r9, r0
 800d492:	2300      	movs	r3, #0
 800d494:	4630      	mov	r0, r6
 800d496:	4639      	mov	r1, r7
 800d498:	f7f3 fafc 	bl	8000a94 <__aeabi_dcmplt>
 800d49c:	b148      	cbz	r0, 800d4b2 <_dtoa_r+0x17a>
 800d49e:	4648      	mov	r0, r9
 800d4a0:	f7f3 f81c 	bl	80004dc <__aeabi_i2d>
 800d4a4:	4632      	mov	r2, r6
 800d4a6:	463b      	mov	r3, r7
 800d4a8:	f7f3 faea 	bl	8000a80 <__aeabi_dcmpeq>
 800d4ac:	b908      	cbnz	r0, 800d4b2 <_dtoa_r+0x17a>
 800d4ae:	f109 39ff 	add.w	r9, r9, #4294967295
 800d4b2:	f1b9 0f16 	cmp.w	r9, #22
 800d4b6:	d857      	bhi.n	800d568 <_dtoa_r+0x230>
 800d4b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d4bc:	4b5d      	ldr	r3, [pc, #372]	; (800d634 <_dtoa_r+0x2fc>)
 800d4be:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800d4c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4c6:	f7f3 fae5 	bl	8000a94 <__aeabi_dcmplt>
 800d4ca:	2800      	cmp	r0, #0
 800d4cc:	d04e      	beq.n	800d56c <_dtoa_r+0x234>
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	f109 39ff 	add.w	r9, r9, #4294967295
 800d4d4:	930f      	str	r3, [sp, #60]	; 0x3c
 800d4d6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d4d8:	1b1c      	subs	r4, r3, r4
 800d4da:	1e63      	subs	r3, r4, #1
 800d4dc:	9309      	str	r3, [sp, #36]	; 0x24
 800d4de:	bf49      	itett	mi
 800d4e0:	f1c4 0301 	rsbmi	r3, r4, #1
 800d4e4:	2300      	movpl	r3, #0
 800d4e6:	9306      	strmi	r3, [sp, #24]
 800d4e8:	2300      	movmi	r3, #0
 800d4ea:	bf54      	ite	pl
 800d4ec:	9306      	strpl	r3, [sp, #24]
 800d4ee:	9309      	strmi	r3, [sp, #36]	; 0x24
 800d4f0:	f1b9 0f00 	cmp.w	r9, #0
 800d4f4:	db3c      	blt.n	800d570 <_dtoa_r+0x238>
 800d4f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4f8:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800d4fc:	444b      	add	r3, r9
 800d4fe:	9309      	str	r3, [sp, #36]	; 0x24
 800d500:	2300      	movs	r3, #0
 800d502:	930a      	str	r3, [sp, #40]	; 0x28
 800d504:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d506:	2b09      	cmp	r3, #9
 800d508:	d86c      	bhi.n	800d5e4 <_dtoa_r+0x2ac>
 800d50a:	2b05      	cmp	r3, #5
 800d50c:	bfc4      	itt	gt
 800d50e:	3b04      	subgt	r3, #4
 800d510:	9322      	strgt	r3, [sp, #136]	; 0x88
 800d512:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d514:	bfc8      	it	gt
 800d516:	2400      	movgt	r4, #0
 800d518:	f1a3 0302 	sub.w	r3, r3, #2
 800d51c:	bfd8      	it	le
 800d51e:	2401      	movle	r4, #1
 800d520:	2b03      	cmp	r3, #3
 800d522:	f200 808b 	bhi.w	800d63c <_dtoa_r+0x304>
 800d526:	e8df f003 	tbb	[pc, r3]
 800d52a:	4f2d      	.short	0x4f2d
 800d52c:	5b4d      	.short	0x5b4d
 800d52e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800d532:	441c      	add	r4, r3
 800d534:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800d538:	2b20      	cmp	r3, #32
 800d53a:	bfc3      	ittte	gt
 800d53c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d540:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800d544:	fa09 f303 	lslgt.w	r3, r9, r3
 800d548:	f1c3 0320 	rsble	r3, r3, #32
 800d54c:	bfc6      	itte	gt
 800d54e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800d552:	4318      	orrgt	r0, r3
 800d554:	fa06 f003 	lslle.w	r0, r6, r3
 800d558:	f7f2 ffb0 	bl	80004bc <__aeabi_ui2d>
 800d55c:	2301      	movs	r3, #1
 800d55e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800d562:	3c01      	subs	r4, #1
 800d564:	9313      	str	r3, [sp, #76]	; 0x4c
 800d566:	e770      	b.n	800d44a <_dtoa_r+0x112>
 800d568:	2301      	movs	r3, #1
 800d56a:	e7b3      	b.n	800d4d4 <_dtoa_r+0x19c>
 800d56c:	900f      	str	r0, [sp, #60]	; 0x3c
 800d56e:	e7b2      	b.n	800d4d6 <_dtoa_r+0x19e>
 800d570:	9b06      	ldr	r3, [sp, #24]
 800d572:	eba3 0309 	sub.w	r3, r3, r9
 800d576:	9306      	str	r3, [sp, #24]
 800d578:	f1c9 0300 	rsb	r3, r9, #0
 800d57c:	930a      	str	r3, [sp, #40]	; 0x28
 800d57e:	2300      	movs	r3, #0
 800d580:	930e      	str	r3, [sp, #56]	; 0x38
 800d582:	e7bf      	b.n	800d504 <_dtoa_r+0x1cc>
 800d584:	2300      	movs	r3, #0
 800d586:	930b      	str	r3, [sp, #44]	; 0x2c
 800d588:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	dc59      	bgt.n	800d642 <_dtoa_r+0x30a>
 800d58e:	f04f 0b01 	mov.w	fp, #1
 800d592:	465b      	mov	r3, fp
 800d594:	f8cd b008 	str.w	fp, [sp, #8]
 800d598:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800d59c:	2200      	movs	r2, #0
 800d59e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800d5a0:	6042      	str	r2, [r0, #4]
 800d5a2:	2204      	movs	r2, #4
 800d5a4:	f102 0614 	add.w	r6, r2, #20
 800d5a8:	429e      	cmp	r6, r3
 800d5aa:	6841      	ldr	r1, [r0, #4]
 800d5ac:	d94f      	bls.n	800d64e <_dtoa_r+0x316>
 800d5ae:	4628      	mov	r0, r5
 800d5b0:	f001 f94e 	bl	800e850 <_Balloc>
 800d5b4:	9008      	str	r0, [sp, #32]
 800d5b6:	2800      	cmp	r0, #0
 800d5b8:	d14d      	bne.n	800d656 <_dtoa_r+0x31e>
 800d5ba:	4602      	mov	r2, r0
 800d5bc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d5c0:	4b1d      	ldr	r3, [pc, #116]	; (800d638 <_dtoa_r+0x300>)
 800d5c2:	e6cd      	b.n	800d360 <_dtoa_r+0x28>
 800d5c4:	2301      	movs	r3, #1
 800d5c6:	e7de      	b.n	800d586 <_dtoa_r+0x24e>
 800d5c8:	2300      	movs	r3, #0
 800d5ca:	930b      	str	r3, [sp, #44]	; 0x2c
 800d5cc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d5ce:	eb09 0b03 	add.w	fp, r9, r3
 800d5d2:	f10b 0301 	add.w	r3, fp, #1
 800d5d6:	2b01      	cmp	r3, #1
 800d5d8:	9302      	str	r3, [sp, #8]
 800d5da:	bfb8      	it	lt
 800d5dc:	2301      	movlt	r3, #1
 800d5de:	e7dd      	b.n	800d59c <_dtoa_r+0x264>
 800d5e0:	2301      	movs	r3, #1
 800d5e2:	e7f2      	b.n	800d5ca <_dtoa_r+0x292>
 800d5e4:	2401      	movs	r4, #1
 800d5e6:	2300      	movs	r3, #0
 800d5e8:	940b      	str	r4, [sp, #44]	; 0x2c
 800d5ea:	9322      	str	r3, [sp, #136]	; 0x88
 800d5ec:	f04f 3bff 	mov.w	fp, #4294967295
 800d5f0:	2200      	movs	r2, #0
 800d5f2:	2312      	movs	r3, #18
 800d5f4:	f8cd b008 	str.w	fp, [sp, #8]
 800d5f8:	9223      	str	r2, [sp, #140]	; 0x8c
 800d5fa:	e7cf      	b.n	800d59c <_dtoa_r+0x264>
 800d5fc:	f3af 8000 	nop.w
 800d600:	636f4361 	.word	0x636f4361
 800d604:	3fd287a7 	.word	0x3fd287a7
 800d608:	8b60c8b3 	.word	0x8b60c8b3
 800d60c:	3fc68a28 	.word	0x3fc68a28
 800d610:	509f79fb 	.word	0x509f79fb
 800d614:	3fd34413 	.word	0x3fd34413
 800d618:	0801124e 	.word	0x0801124e
 800d61c:	08011265 	.word	0x08011265
 800d620:	7ff00000 	.word	0x7ff00000
 800d624:	0801124a 	.word	0x0801124a
 800d628:	08011241 	.word	0x08011241
 800d62c:	080110c9 	.word	0x080110c9
 800d630:	3ff80000 	.word	0x3ff80000
 800d634:	08011440 	.word	0x08011440
 800d638:	080112c4 	.word	0x080112c4
 800d63c:	2301      	movs	r3, #1
 800d63e:	930b      	str	r3, [sp, #44]	; 0x2c
 800d640:	e7d4      	b.n	800d5ec <_dtoa_r+0x2b4>
 800d642:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800d646:	465b      	mov	r3, fp
 800d648:	f8cd b008 	str.w	fp, [sp, #8]
 800d64c:	e7a6      	b.n	800d59c <_dtoa_r+0x264>
 800d64e:	3101      	adds	r1, #1
 800d650:	6041      	str	r1, [r0, #4]
 800d652:	0052      	lsls	r2, r2, #1
 800d654:	e7a6      	b.n	800d5a4 <_dtoa_r+0x26c>
 800d656:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d658:	9a08      	ldr	r2, [sp, #32]
 800d65a:	601a      	str	r2, [r3, #0]
 800d65c:	9b02      	ldr	r3, [sp, #8]
 800d65e:	2b0e      	cmp	r3, #14
 800d660:	f200 80a8 	bhi.w	800d7b4 <_dtoa_r+0x47c>
 800d664:	2c00      	cmp	r4, #0
 800d666:	f000 80a5 	beq.w	800d7b4 <_dtoa_r+0x47c>
 800d66a:	f1b9 0f00 	cmp.w	r9, #0
 800d66e:	dd34      	ble.n	800d6da <_dtoa_r+0x3a2>
 800d670:	4a9a      	ldr	r2, [pc, #616]	; (800d8dc <_dtoa_r+0x5a4>)
 800d672:	f009 030f 	and.w	r3, r9, #15
 800d676:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d67a:	f419 7f80 	tst.w	r9, #256	; 0x100
 800d67e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800d682:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800d686:	ea4f 1429 	mov.w	r4, r9, asr #4
 800d68a:	d016      	beq.n	800d6ba <_dtoa_r+0x382>
 800d68c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d690:	4b93      	ldr	r3, [pc, #588]	; (800d8e0 <_dtoa_r+0x5a8>)
 800d692:	2703      	movs	r7, #3
 800d694:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d698:	f7f3 f8b4 	bl	8000804 <__aeabi_ddiv>
 800d69c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d6a0:	f004 040f 	and.w	r4, r4, #15
 800d6a4:	4e8e      	ldr	r6, [pc, #568]	; (800d8e0 <_dtoa_r+0x5a8>)
 800d6a6:	b954      	cbnz	r4, 800d6be <_dtoa_r+0x386>
 800d6a8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d6ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d6b0:	f7f3 f8a8 	bl	8000804 <__aeabi_ddiv>
 800d6b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d6b8:	e029      	b.n	800d70e <_dtoa_r+0x3d6>
 800d6ba:	2702      	movs	r7, #2
 800d6bc:	e7f2      	b.n	800d6a4 <_dtoa_r+0x36c>
 800d6be:	07e1      	lsls	r1, r4, #31
 800d6c0:	d508      	bpl.n	800d6d4 <_dtoa_r+0x39c>
 800d6c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d6c6:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d6ca:	f7f2 ff71 	bl	80005b0 <__aeabi_dmul>
 800d6ce:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800d6d2:	3701      	adds	r7, #1
 800d6d4:	1064      	asrs	r4, r4, #1
 800d6d6:	3608      	adds	r6, #8
 800d6d8:	e7e5      	b.n	800d6a6 <_dtoa_r+0x36e>
 800d6da:	f000 80a5 	beq.w	800d828 <_dtoa_r+0x4f0>
 800d6de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d6e2:	f1c9 0400 	rsb	r4, r9, #0
 800d6e6:	4b7d      	ldr	r3, [pc, #500]	; (800d8dc <_dtoa_r+0x5a4>)
 800d6e8:	f004 020f 	and.w	r2, r4, #15
 800d6ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d6f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6f4:	f7f2 ff5c 	bl	80005b0 <__aeabi_dmul>
 800d6f8:	2702      	movs	r7, #2
 800d6fa:	2300      	movs	r3, #0
 800d6fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d700:	4e77      	ldr	r6, [pc, #476]	; (800d8e0 <_dtoa_r+0x5a8>)
 800d702:	1124      	asrs	r4, r4, #4
 800d704:	2c00      	cmp	r4, #0
 800d706:	f040 8084 	bne.w	800d812 <_dtoa_r+0x4da>
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d1d2      	bne.n	800d6b4 <_dtoa_r+0x37c>
 800d70e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d710:	2b00      	cmp	r3, #0
 800d712:	f000 808b 	beq.w	800d82c <_dtoa_r+0x4f4>
 800d716:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800d71a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800d71e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d722:	2200      	movs	r2, #0
 800d724:	4b6f      	ldr	r3, [pc, #444]	; (800d8e4 <_dtoa_r+0x5ac>)
 800d726:	f7f3 f9b5 	bl	8000a94 <__aeabi_dcmplt>
 800d72a:	2800      	cmp	r0, #0
 800d72c:	d07e      	beq.n	800d82c <_dtoa_r+0x4f4>
 800d72e:	9b02      	ldr	r3, [sp, #8]
 800d730:	2b00      	cmp	r3, #0
 800d732:	d07b      	beq.n	800d82c <_dtoa_r+0x4f4>
 800d734:	f1bb 0f00 	cmp.w	fp, #0
 800d738:	dd38      	ble.n	800d7ac <_dtoa_r+0x474>
 800d73a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d73e:	2200      	movs	r2, #0
 800d740:	4b69      	ldr	r3, [pc, #420]	; (800d8e8 <_dtoa_r+0x5b0>)
 800d742:	f7f2 ff35 	bl	80005b0 <__aeabi_dmul>
 800d746:	465c      	mov	r4, fp
 800d748:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d74c:	f109 38ff 	add.w	r8, r9, #4294967295
 800d750:	3701      	adds	r7, #1
 800d752:	4638      	mov	r0, r7
 800d754:	f7f2 fec2 	bl	80004dc <__aeabi_i2d>
 800d758:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d75c:	f7f2 ff28 	bl	80005b0 <__aeabi_dmul>
 800d760:	2200      	movs	r2, #0
 800d762:	4b62      	ldr	r3, [pc, #392]	; (800d8ec <_dtoa_r+0x5b4>)
 800d764:	f7f2 fd6e 	bl	8000244 <__adddf3>
 800d768:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800d76c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800d770:	9611      	str	r6, [sp, #68]	; 0x44
 800d772:	2c00      	cmp	r4, #0
 800d774:	d15d      	bne.n	800d832 <_dtoa_r+0x4fa>
 800d776:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d77a:	2200      	movs	r2, #0
 800d77c:	4b5c      	ldr	r3, [pc, #368]	; (800d8f0 <_dtoa_r+0x5b8>)
 800d77e:	f7f2 fd5f 	bl	8000240 <__aeabi_dsub>
 800d782:	4602      	mov	r2, r0
 800d784:	460b      	mov	r3, r1
 800d786:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d78a:	4633      	mov	r3, r6
 800d78c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d78e:	f7f3 f99f 	bl	8000ad0 <__aeabi_dcmpgt>
 800d792:	2800      	cmp	r0, #0
 800d794:	f040 829e 	bne.w	800dcd4 <_dtoa_r+0x99c>
 800d798:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d79c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d79e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800d7a2:	f7f3 f977 	bl	8000a94 <__aeabi_dcmplt>
 800d7a6:	2800      	cmp	r0, #0
 800d7a8:	f040 8292 	bne.w	800dcd0 <_dtoa_r+0x998>
 800d7ac:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800d7b0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800d7b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	f2c0 8153 	blt.w	800da62 <_dtoa_r+0x72a>
 800d7bc:	f1b9 0f0e 	cmp.w	r9, #14
 800d7c0:	f300 814f 	bgt.w	800da62 <_dtoa_r+0x72a>
 800d7c4:	4b45      	ldr	r3, [pc, #276]	; (800d8dc <_dtoa_r+0x5a4>)
 800d7c6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800d7ca:	e9d3 3400 	ldrd	r3, r4, [r3]
 800d7ce:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800d7d2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	f280 80db 	bge.w	800d990 <_dtoa_r+0x658>
 800d7da:	9b02      	ldr	r3, [sp, #8]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	f300 80d7 	bgt.w	800d990 <_dtoa_r+0x658>
 800d7e2:	f040 8274 	bne.w	800dcce <_dtoa_r+0x996>
 800d7e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d7ea:	2200      	movs	r2, #0
 800d7ec:	4b40      	ldr	r3, [pc, #256]	; (800d8f0 <_dtoa_r+0x5b8>)
 800d7ee:	f7f2 fedf 	bl	80005b0 <__aeabi_dmul>
 800d7f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d7f6:	f7f3 f961 	bl	8000abc <__aeabi_dcmpge>
 800d7fa:	9c02      	ldr	r4, [sp, #8]
 800d7fc:	4626      	mov	r6, r4
 800d7fe:	2800      	cmp	r0, #0
 800d800:	f040 824a 	bne.w	800dc98 <_dtoa_r+0x960>
 800d804:	2331      	movs	r3, #49	; 0x31
 800d806:	9f08      	ldr	r7, [sp, #32]
 800d808:	f109 0901 	add.w	r9, r9, #1
 800d80c:	f807 3b01 	strb.w	r3, [r7], #1
 800d810:	e246      	b.n	800dca0 <_dtoa_r+0x968>
 800d812:	07e2      	lsls	r2, r4, #31
 800d814:	d505      	bpl.n	800d822 <_dtoa_r+0x4ea>
 800d816:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d81a:	f7f2 fec9 	bl	80005b0 <__aeabi_dmul>
 800d81e:	2301      	movs	r3, #1
 800d820:	3701      	adds	r7, #1
 800d822:	1064      	asrs	r4, r4, #1
 800d824:	3608      	adds	r6, #8
 800d826:	e76d      	b.n	800d704 <_dtoa_r+0x3cc>
 800d828:	2702      	movs	r7, #2
 800d82a:	e770      	b.n	800d70e <_dtoa_r+0x3d6>
 800d82c:	46c8      	mov	r8, r9
 800d82e:	9c02      	ldr	r4, [sp, #8]
 800d830:	e78f      	b.n	800d752 <_dtoa_r+0x41a>
 800d832:	9908      	ldr	r1, [sp, #32]
 800d834:	4b29      	ldr	r3, [pc, #164]	; (800d8dc <_dtoa_r+0x5a4>)
 800d836:	4421      	add	r1, r4
 800d838:	9112      	str	r1, [sp, #72]	; 0x48
 800d83a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d83c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d840:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800d844:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d848:	2900      	cmp	r1, #0
 800d84a:	d055      	beq.n	800d8f8 <_dtoa_r+0x5c0>
 800d84c:	2000      	movs	r0, #0
 800d84e:	4929      	ldr	r1, [pc, #164]	; (800d8f4 <_dtoa_r+0x5bc>)
 800d850:	f7f2 ffd8 	bl	8000804 <__aeabi_ddiv>
 800d854:	463b      	mov	r3, r7
 800d856:	4632      	mov	r2, r6
 800d858:	f7f2 fcf2 	bl	8000240 <__aeabi_dsub>
 800d85c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800d860:	9f08      	ldr	r7, [sp, #32]
 800d862:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d866:	f7f3 f953 	bl	8000b10 <__aeabi_d2iz>
 800d86a:	4604      	mov	r4, r0
 800d86c:	f7f2 fe36 	bl	80004dc <__aeabi_i2d>
 800d870:	4602      	mov	r2, r0
 800d872:	460b      	mov	r3, r1
 800d874:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d878:	f7f2 fce2 	bl	8000240 <__aeabi_dsub>
 800d87c:	4602      	mov	r2, r0
 800d87e:	460b      	mov	r3, r1
 800d880:	3430      	adds	r4, #48	; 0x30
 800d882:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d886:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d88a:	f807 4b01 	strb.w	r4, [r7], #1
 800d88e:	f7f3 f901 	bl	8000a94 <__aeabi_dcmplt>
 800d892:	2800      	cmp	r0, #0
 800d894:	d174      	bne.n	800d980 <_dtoa_r+0x648>
 800d896:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d89a:	2000      	movs	r0, #0
 800d89c:	4911      	ldr	r1, [pc, #68]	; (800d8e4 <_dtoa_r+0x5ac>)
 800d89e:	f7f2 fccf 	bl	8000240 <__aeabi_dsub>
 800d8a2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d8a6:	f7f3 f8f5 	bl	8000a94 <__aeabi_dcmplt>
 800d8aa:	2800      	cmp	r0, #0
 800d8ac:	f040 80b6 	bne.w	800da1c <_dtoa_r+0x6e4>
 800d8b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d8b2:	429f      	cmp	r7, r3
 800d8b4:	f43f af7a 	beq.w	800d7ac <_dtoa_r+0x474>
 800d8b8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d8bc:	2200      	movs	r2, #0
 800d8be:	4b0a      	ldr	r3, [pc, #40]	; (800d8e8 <_dtoa_r+0x5b0>)
 800d8c0:	f7f2 fe76 	bl	80005b0 <__aeabi_dmul>
 800d8c4:	2200      	movs	r2, #0
 800d8c6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800d8ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d8ce:	4b06      	ldr	r3, [pc, #24]	; (800d8e8 <_dtoa_r+0x5b0>)
 800d8d0:	f7f2 fe6e 	bl	80005b0 <__aeabi_dmul>
 800d8d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d8d8:	e7c3      	b.n	800d862 <_dtoa_r+0x52a>
 800d8da:	bf00      	nop
 800d8dc:	08011440 	.word	0x08011440
 800d8e0:	08011418 	.word	0x08011418
 800d8e4:	3ff00000 	.word	0x3ff00000
 800d8e8:	40240000 	.word	0x40240000
 800d8ec:	401c0000 	.word	0x401c0000
 800d8f0:	40140000 	.word	0x40140000
 800d8f4:	3fe00000 	.word	0x3fe00000
 800d8f8:	4630      	mov	r0, r6
 800d8fa:	4639      	mov	r1, r7
 800d8fc:	f7f2 fe58 	bl	80005b0 <__aeabi_dmul>
 800d900:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d902:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800d906:	9c08      	ldr	r4, [sp, #32]
 800d908:	9314      	str	r3, [sp, #80]	; 0x50
 800d90a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d90e:	f7f3 f8ff 	bl	8000b10 <__aeabi_d2iz>
 800d912:	9015      	str	r0, [sp, #84]	; 0x54
 800d914:	f7f2 fde2 	bl	80004dc <__aeabi_i2d>
 800d918:	4602      	mov	r2, r0
 800d91a:	460b      	mov	r3, r1
 800d91c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d920:	f7f2 fc8e 	bl	8000240 <__aeabi_dsub>
 800d924:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d926:	4606      	mov	r6, r0
 800d928:	3330      	adds	r3, #48	; 0x30
 800d92a:	f804 3b01 	strb.w	r3, [r4], #1
 800d92e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d930:	460f      	mov	r7, r1
 800d932:	429c      	cmp	r4, r3
 800d934:	f04f 0200 	mov.w	r2, #0
 800d938:	d124      	bne.n	800d984 <_dtoa_r+0x64c>
 800d93a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d93e:	4bb3      	ldr	r3, [pc, #716]	; (800dc0c <_dtoa_r+0x8d4>)
 800d940:	f7f2 fc80 	bl	8000244 <__adddf3>
 800d944:	4602      	mov	r2, r0
 800d946:	460b      	mov	r3, r1
 800d948:	4630      	mov	r0, r6
 800d94a:	4639      	mov	r1, r7
 800d94c:	f7f3 f8c0 	bl	8000ad0 <__aeabi_dcmpgt>
 800d950:	2800      	cmp	r0, #0
 800d952:	d162      	bne.n	800da1a <_dtoa_r+0x6e2>
 800d954:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d958:	2000      	movs	r0, #0
 800d95a:	49ac      	ldr	r1, [pc, #688]	; (800dc0c <_dtoa_r+0x8d4>)
 800d95c:	f7f2 fc70 	bl	8000240 <__aeabi_dsub>
 800d960:	4602      	mov	r2, r0
 800d962:	460b      	mov	r3, r1
 800d964:	4630      	mov	r0, r6
 800d966:	4639      	mov	r1, r7
 800d968:	f7f3 f894 	bl	8000a94 <__aeabi_dcmplt>
 800d96c:	2800      	cmp	r0, #0
 800d96e:	f43f af1d 	beq.w	800d7ac <_dtoa_r+0x474>
 800d972:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800d974:	1e7b      	subs	r3, r7, #1
 800d976:	9314      	str	r3, [sp, #80]	; 0x50
 800d978:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800d97c:	2b30      	cmp	r3, #48	; 0x30
 800d97e:	d0f8      	beq.n	800d972 <_dtoa_r+0x63a>
 800d980:	46c1      	mov	r9, r8
 800d982:	e03a      	b.n	800d9fa <_dtoa_r+0x6c2>
 800d984:	4ba2      	ldr	r3, [pc, #648]	; (800dc10 <_dtoa_r+0x8d8>)
 800d986:	f7f2 fe13 	bl	80005b0 <__aeabi_dmul>
 800d98a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d98e:	e7bc      	b.n	800d90a <_dtoa_r+0x5d2>
 800d990:	9f08      	ldr	r7, [sp, #32]
 800d992:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d996:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d99a:	f7f2 ff33 	bl	8000804 <__aeabi_ddiv>
 800d99e:	f7f3 f8b7 	bl	8000b10 <__aeabi_d2iz>
 800d9a2:	4604      	mov	r4, r0
 800d9a4:	f7f2 fd9a 	bl	80004dc <__aeabi_i2d>
 800d9a8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d9ac:	f7f2 fe00 	bl	80005b0 <__aeabi_dmul>
 800d9b0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800d9b4:	460b      	mov	r3, r1
 800d9b6:	4602      	mov	r2, r0
 800d9b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d9bc:	f7f2 fc40 	bl	8000240 <__aeabi_dsub>
 800d9c0:	f807 6b01 	strb.w	r6, [r7], #1
 800d9c4:	9e08      	ldr	r6, [sp, #32]
 800d9c6:	9b02      	ldr	r3, [sp, #8]
 800d9c8:	1bbe      	subs	r6, r7, r6
 800d9ca:	42b3      	cmp	r3, r6
 800d9cc:	d13a      	bne.n	800da44 <_dtoa_r+0x70c>
 800d9ce:	4602      	mov	r2, r0
 800d9d0:	460b      	mov	r3, r1
 800d9d2:	f7f2 fc37 	bl	8000244 <__adddf3>
 800d9d6:	4602      	mov	r2, r0
 800d9d8:	460b      	mov	r3, r1
 800d9da:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d9de:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d9e2:	f7f3 f875 	bl	8000ad0 <__aeabi_dcmpgt>
 800d9e6:	bb58      	cbnz	r0, 800da40 <_dtoa_r+0x708>
 800d9e8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d9ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d9f0:	f7f3 f846 	bl	8000a80 <__aeabi_dcmpeq>
 800d9f4:	b108      	cbz	r0, 800d9fa <_dtoa_r+0x6c2>
 800d9f6:	07e1      	lsls	r1, r4, #31
 800d9f8:	d422      	bmi.n	800da40 <_dtoa_r+0x708>
 800d9fa:	4628      	mov	r0, r5
 800d9fc:	4651      	mov	r1, sl
 800d9fe:	f000 ff67 	bl	800e8d0 <_Bfree>
 800da02:	2300      	movs	r3, #0
 800da04:	703b      	strb	r3, [r7, #0]
 800da06:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800da08:	f109 0001 	add.w	r0, r9, #1
 800da0c:	6018      	str	r0, [r3, #0]
 800da0e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800da10:	2b00      	cmp	r3, #0
 800da12:	f43f acdf 	beq.w	800d3d4 <_dtoa_r+0x9c>
 800da16:	601f      	str	r7, [r3, #0]
 800da18:	e4dc      	b.n	800d3d4 <_dtoa_r+0x9c>
 800da1a:	4627      	mov	r7, r4
 800da1c:	463b      	mov	r3, r7
 800da1e:	461f      	mov	r7, r3
 800da20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800da24:	2a39      	cmp	r2, #57	; 0x39
 800da26:	d107      	bne.n	800da38 <_dtoa_r+0x700>
 800da28:	9a08      	ldr	r2, [sp, #32]
 800da2a:	429a      	cmp	r2, r3
 800da2c:	d1f7      	bne.n	800da1e <_dtoa_r+0x6e6>
 800da2e:	2230      	movs	r2, #48	; 0x30
 800da30:	9908      	ldr	r1, [sp, #32]
 800da32:	f108 0801 	add.w	r8, r8, #1
 800da36:	700a      	strb	r2, [r1, #0]
 800da38:	781a      	ldrb	r2, [r3, #0]
 800da3a:	3201      	adds	r2, #1
 800da3c:	701a      	strb	r2, [r3, #0]
 800da3e:	e79f      	b.n	800d980 <_dtoa_r+0x648>
 800da40:	46c8      	mov	r8, r9
 800da42:	e7eb      	b.n	800da1c <_dtoa_r+0x6e4>
 800da44:	2200      	movs	r2, #0
 800da46:	4b72      	ldr	r3, [pc, #456]	; (800dc10 <_dtoa_r+0x8d8>)
 800da48:	f7f2 fdb2 	bl	80005b0 <__aeabi_dmul>
 800da4c:	4602      	mov	r2, r0
 800da4e:	460b      	mov	r3, r1
 800da50:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800da54:	2200      	movs	r2, #0
 800da56:	2300      	movs	r3, #0
 800da58:	f7f3 f812 	bl	8000a80 <__aeabi_dcmpeq>
 800da5c:	2800      	cmp	r0, #0
 800da5e:	d098      	beq.n	800d992 <_dtoa_r+0x65a>
 800da60:	e7cb      	b.n	800d9fa <_dtoa_r+0x6c2>
 800da62:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800da64:	2a00      	cmp	r2, #0
 800da66:	f000 80cd 	beq.w	800dc04 <_dtoa_r+0x8cc>
 800da6a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800da6c:	2a01      	cmp	r2, #1
 800da6e:	f300 80af 	bgt.w	800dbd0 <_dtoa_r+0x898>
 800da72:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800da74:	2a00      	cmp	r2, #0
 800da76:	f000 80a7 	beq.w	800dbc8 <_dtoa_r+0x890>
 800da7a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800da7e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800da80:	9f06      	ldr	r7, [sp, #24]
 800da82:	9a06      	ldr	r2, [sp, #24]
 800da84:	2101      	movs	r1, #1
 800da86:	441a      	add	r2, r3
 800da88:	9206      	str	r2, [sp, #24]
 800da8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800da8c:	4628      	mov	r0, r5
 800da8e:	441a      	add	r2, r3
 800da90:	9209      	str	r2, [sp, #36]	; 0x24
 800da92:	f001 f821 	bl	800ead8 <__i2b>
 800da96:	4606      	mov	r6, r0
 800da98:	2f00      	cmp	r7, #0
 800da9a:	dd0c      	ble.n	800dab6 <_dtoa_r+0x77e>
 800da9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	dd09      	ble.n	800dab6 <_dtoa_r+0x77e>
 800daa2:	42bb      	cmp	r3, r7
 800daa4:	bfa8      	it	ge
 800daa6:	463b      	movge	r3, r7
 800daa8:	9a06      	ldr	r2, [sp, #24]
 800daaa:	1aff      	subs	r7, r7, r3
 800daac:	1ad2      	subs	r2, r2, r3
 800daae:	9206      	str	r2, [sp, #24]
 800dab0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dab2:	1ad3      	subs	r3, r2, r3
 800dab4:	9309      	str	r3, [sp, #36]	; 0x24
 800dab6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dab8:	b1f3      	cbz	r3, 800daf8 <_dtoa_r+0x7c0>
 800daba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	f000 80a9 	beq.w	800dc14 <_dtoa_r+0x8dc>
 800dac2:	2c00      	cmp	r4, #0
 800dac4:	dd10      	ble.n	800dae8 <_dtoa_r+0x7b0>
 800dac6:	4631      	mov	r1, r6
 800dac8:	4622      	mov	r2, r4
 800daca:	4628      	mov	r0, r5
 800dacc:	f001 f8be 	bl	800ec4c <__pow5mult>
 800dad0:	4652      	mov	r2, sl
 800dad2:	4601      	mov	r1, r0
 800dad4:	4606      	mov	r6, r0
 800dad6:	4628      	mov	r0, r5
 800dad8:	f001 f814 	bl	800eb04 <__multiply>
 800dadc:	4680      	mov	r8, r0
 800dade:	4651      	mov	r1, sl
 800dae0:	4628      	mov	r0, r5
 800dae2:	f000 fef5 	bl	800e8d0 <_Bfree>
 800dae6:	46c2      	mov	sl, r8
 800dae8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800daea:	1b1a      	subs	r2, r3, r4
 800daec:	d004      	beq.n	800daf8 <_dtoa_r+0x7c0>
 800daee:	4651      	mov	r1, sl
 800daf0:	4628      	mov	r0, r5
 800daf2:	f001 f8ab 	bl	800ec4c <__pow5mult>
 800daf6:	4682      	mov	sl, r0
 800daf8:	2101      	movs	r1, #1
 800dafa:	4628      	mov	r0, r5
 800dafc:	f000 ffec 	bl	800ead8 <__i2b>
 800db00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800db02:	4604      	mov	r4, r0
 800db04:	2b00      	cmp	r3, #0
 800db06:	f340 8087 	ble.w	800dc18 <_dtoa_r+0x8e0>
 800db0a:	461a      	mov	r2, r3
 800db0c:	4601      	mov	r1, r0
 800db0e:	4628      	mov	r0, r5
 800db10:	f001 f89c 	bl	800ec4c <__pow5mult>
 800db14:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800db16:	4604      	mov	r4, r0
 800db18:	2b01      	cmp	r3, #1
 800db1a:	f340 8080 	ble.w	800dc1e <_dtoa_r+0x8e6>
 800db1e:	f04f 0800 	mov.w	r8, #0
 800db22:	6923      	ldr	r3, [r4, #16]
 800db24:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800db28:	6918      	ldr	r0, [r3, #16]
 800db2a:	f000 ff87 	bl	800ea3c <__hi0bits>
 800db2e:	f1c0 0020 	rsb	r0, r0, #32
 800db32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db34:	4418      	add	r0, r3
 800db36:	f010 001f 	ands.w	r0, r0, #31
 800db3a:	f000 8092 	beq.w	800dc62 <_dtoa_r+0x92a>
 800db3e:	f1c0 0320 	rsb	r3, r0, #32
 800db42:	2b04      	cmp	r3, #4
 800db44:	f340 808a 	ble.w	800dc5c <_dtoa_r+0x924>
 800db48:	f1c0 001c 	rsb	r0, r0, #28
 800db4c:	9b06      	ldr	r3, [sp, #24]
 800db4e:	4407      	add	r7, r0
 800db50:	4403      	add	r3, r0
 800db52:	9306      	str	r3, [sp, #24]
 800db54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db56:	4403      	add	r3, r0
 800db58:	9309      	str	r3, [sp, #36]	; 0x24
 800db5a:	9b06      	ldr	r3, [sp, #24]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	dd05      	ble.n	800db6c <_dtoa_r+0x834>
 800db60:	4651      	mov	r1, sl
 800db62:	461a      	mov	r2, r3
 800db64:	4628      	mov	r0, r5
 800db66:	f001 f8cb 	bl	800ed00 <__lshift>
 800db6a:	4682      	mov	sl, r0
 800db6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db6e:	2b00      	cmp	r3, #0
 800db70:	dd05      	ble.n	800db7e <_dtoa_r+0x846>
 800db72:	4621      	mov	r1, r4
 800db74:	461a      	mov	r2, r3
 800db76:	4628      	mov	r0, r5
 800db78:	f001 f8c2 	bl	800ed00 <__lshift>
 800db7c:	4604      	mov	r4, r0
 800db7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800db80:	2b00      	cmp	r3, #0
 800db82:	d070      	beq.n	800dc66 <_dtoa_r+0x92e>
 800db84:	4621      	mov	r1, r4
 800db86:	4650      	mov	r0, sl
 800db88:	f001 f926 	bl	800edd8 <__mcmp>
 800db8c:	2800      	cmp	r0, #0
 800db8e:	da6a      	bge.n	800dc66 <_dtoa_r+0x92e>
 800db90:	2300      	movs	r3, #0
 800db92:	4651      	mov	r1, sl
 800db94:	220a      	movs	r2, #10
 800db96:	4628      	mov	r0, r5
 800db98:	f000 febc 	bl	800e914 <__multadd>
 800db9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800db9e:	4682      	mov	sl, r0
 800dba0:	f109 39ff 	add.w	r9, r9, #4294967295
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	f000 8193 	beq.w	800ded0 <_dtoa_r+0xb98>
 800dbaa:	4631      	mov	r1, r6
 800dbac:	2300      	movs	r3, #0
 800dbae:	220a      	movs	r2, #10
 800dbb0:	4628      	mov	r0, r5
 800dbb2:	f000 feaf 	bl	800e914 <__multadd>
 800dbb6:	f1bb 0f00 	cmp.w	fp, #0
 800dbba:	4606      	mov	r6, r0
 800dbbc:	f300 8093 	bgt.w	800dce6 <_dtoa_r+0x9ae>
 800dbc0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800dbc2:	2b02      	cmp	r3, #2
 800dbc4:	dc57      	bgt.n	800dc76 <_dtoa_r+0x93e>
 800dbc6:	e08e      	b.n	800dce6 <_dtoa_r+0x9ae>
 800dbc8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800dbca:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800dbce:	e756      	b.n	800da7e <_dtoa_r+0x746>
 800dbd0:	9b02      	ldr	r3, [sp, #8]
 800dbd2:	1e5c      	subs	r4, r3, #1
 800dbd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dbd6:	42a3      	cmp	r3, r4
 800dbd8:	bfb7      	itett	lt
 800dbda:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800dbdc:	1b1c      	subge	r4, r3, r4
 800dbde:	1ae2      	sublt	r2, r4, r3
 800dbe0:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800dbe2:	bfbe      	ittt	lt
 800dbe4:	940a      	strlt	r4, [sp, #40]	; 0x28
 800dbe6:	189b      	addlt	r3, r3, r2
 800dbe8:	930e      	strlt	r3, [sp, #56]	; 0x38
 800dbea:	9b02      	ldr	r3, [sp, #8]
 800dbec:	bfb8      	it	lt
 800dbee:	2400      	movlt	r4, #0
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	bfbb      	ittet	lt
 800dbf4:	9b06      	ldrlt	r3, [sp, #24]
 800dbf6:	9a02      	ldrlt	r2, [sp, #8]
 800dbf8:	9f06      	ldrge	r7, [sp, #24]
 800dbfa:	1a9f      	sublt	r7, r3, r2
 800dbfc:	bfac      	ite	ge
 800dbfe:	9b02      	ldrge	r3, [sp, #8]
 800dc00:	2300      	movlt	r3, #0
 800dc02:	e73e      	b.n	800da82 <_dtoa_r+0x74a>
 800dc04:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800dc06:	9f06      	ldr	r7, [sp, #24]
 800dc08:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800dc0a:	e745      	b.n	800da98 <_dtoa_r+0x760>
 800dc0c:	3fe00000 	.word	0x3fe00000
 800dc10:	40240000 	.word	0x40240000
 800dc14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dc16:	e76a      	b.n	800daee <_dtoa_r+0x7b6>
 800dc18:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800dc1a:	2b01      	cmp	r3, #1
 800dc1c:	dc19      	bgt.n	800dc52 <_dtoa_r+0x91a>
 800dc1e:	9b04      	ldr	r3, [sp, #16]
 800dc20:	b9bb      	cbnz	r3, 800dc52 <_dtoa_r+0x91a>
 800dc22:	9b05      	ldr	r3, [sp, #20]
 800dc24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dc28:	b99b      	cbnz	r3, 800dc52 <_dtoa_r+0x91a>
 800dc2a:	9b05      	ldr	r3, [sp, #20]
 800dc2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dc30:	0d1b      	lsrs	r3, r3, #20
 800dc32:	051b      	lsls	r3, r3, #20
 800dc34:	b183      	cbz	r3, 800dc58 <_dtoa_r+0x920>
 800dc36:	f04f 0801 	mov.w	r8, #1
 800dc3a:	9b06      	ldr	r3, [sp, #24]
 800dc3c:	3301      	adds	r3, #1
 800dc3e:	9306      	str	r3, [sp, #24]
 800dc40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc42:	3301      	adds	r3, #1
 800dc44:	9309      	str	r3, [sp, #36]	; 0x24
 800dc46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	f47f af6a 	bne.w	800db22 <_dtoa_r+0x7ea>
 800dc4e:	2001      	movs	r0, #1
 800dc50:	e76f      	b.n	800db32 <_dtoa_r+0x7fa>
 800dc52:	f04f 0800 	mov.w	r8, #0
 800dc56:	e7f6      	b.n	800dc46 <_dtoa_r+0x90e>
 800dc58:	4698      	mov	r8, r3
 800dc5a:	e7f4      	b.n	800dc46 <_dtoa_r+0x90e>
 800dc5c:	f43f af7d 	beq.w	800db5a <_dtoa_r+0x822>
 800dc60:	4618      	mov	r0, r3
 800dc62:	301c      	adds	r0, #28
 800dc64:	e772      	b.n	800db4c <_dtoa_r+0x814>
 800dc66:	9b02      	ldr	r3, [sp, #8]
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	dc36      	bgt.n	800dcda <_dtoa_r+0x9a2>
 800dc6c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800dc6e:	2b02      	cmp	r3, #2
 800dc70:	dd33      	ble.n	800dcda <_dtoa_r+0x9a2>
 800dc72:	f8dd b008 	ldr.w	fp, [sp, #8]
 800dc76:	f1bb 0f00 	cmp.w	fp, #0
 800dc7a:	d10d      	bne.n	800dc98 <_dtoa_r+0x960>
 800dc7c:	4621      	mov	r1, r4
 800dc7e:	465b      	mov	r3, fp
 800dc80:	2205      	movs	r2, #5
 800dc82:	4628      	mov	r0, r5
 800dc84:	f000 fe46 	bl	800e914 <__multadd>
 800dc88:	4601      	mov	r1, r0
 800dc8a:	4604      	mov	r4, r0
 800dc8c:	4650      	mov	r0, sl
 800dc8e:	f001 f8a3 	bl	800edd8 <__mcmp>
 800dc92:	2800      	cmp	r0, #0
 800dc94:	f73f adb6 	bgt.w	800d804 <_dtoa_r+0x4cc>
 800dc98:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800dc9a:	9f08      	ldr	r7, [sp, #32]
 800dc9c:	ea6f 0903 	mvn.w	r9, r3
 800dca0:	f04f 0800 	mov.w	r8, #0
 800dca4:	4621      	mov	r1, r4
 800dca6:	4628      	mov	r0, r5
 800dca8:	f000 fe12 	bl	800e8d0 <_Bfree>
 800dcac:	2e00      	cmp	r6, #0
 800dcae:	f43f aea4 	beq.w	800d9fa <_dtoa_r+0x6c2>
 800dcb2:	f1b8 0f00 	cmp.w	r8, #0
 800dcb6:	d005      	beq.n	800dcc4 <_dtoa_r+0x98c>
 800dcb8:	45b0      	cmp	r8, r6
 800dcba:	d003      	beq.n	800dcc4 <_dtoa_r+0x98c>
 800dcbc:	4641      	mov	r1, r8
 800dcbe:	4628      	mov	r0, r5
 800dcc0:	f000 fe06 	bl	800e8d0 <_Bfree>
 800dcc4:	4631      	mov	r1, r6
 800dcc6:	4628      	mov	r0, r5
 800dcc8:	f000 fe02 	bl	800e8d0 <_Bfree>
 800dccc:	e695      	b.n	800d9fa <_dtoa_r+0x6c2>
 800dcce:	2400      	movs	r4, #0
 800dcd0:	4626      	mov	r6, r4
 800dcd2:	e7e1      	b.n	800dc98 <_dtoa_r+0x960>
 800dcd4:	46c1      	mov	r9, r8
 800dcd6:	4626      	mov	r6, r4
 800dcd8:	e594      	b.n	800d804 <_dtoa_r+0x4cc>
 800dcda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dcdc:	f8dd b008 	ldr.w	fp, [sp, #8]
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	f000 80fc 	beq.w	800dede <_dtoa_r+0xba6>
 800dce6:	2f00      	cmp	r7, #0
 800dce8:	dd05      	ble.n	800dcf6 <_dtoa_r+0x9be>
 800dcea:	4631      	mov	r1, r6
 800dcec:	463a      	mov	r2, r7
 800dcee:	4628      	mov	r0, r5
 800dcf0:	f001 f806 	bl	800ed00 <__lshift>
 800dcf4:	4606      	mov	r6, r0
 800dcf6:	f1b8 0f00 	cmp.w	r8, #0
 800dcfa:	d05c      	beq.n	800ddb6 <_dtoa_r+0xa7e>
 800dcfc:	4628      	mov	r0, r5
 800dcfe:	6871      	ldr	r1, [r6, #4]
 800dd00:	f000 fda6 	bl	800e850 <_Balloc>
 800dd04:	4607      	mov	r7, r0
 800dd06:	b928      	cbnz	r0, 800dd14 <_dtoa_r+0x9dc>
 800dd08:	4602      	mov	r2, r0
 800dd0a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800dd0e:	4b7e      	ldr	r3, [pc, #504]	; (800df08 <_dtoa_r+0xbd0>)
 800dd10:	f7ff bb26 	b.w	800d360 <_dtoa_r+0x28>
 800dd14:	6932      	ldr	r2, [r6, #16]
 800dd16:	f106 010c 	add.w	r1, r6, #12
 800dd1a:	3202      	adds	r2, #2
 800dd1c:	0092      	lsls	r2, r2, #2
 800dd1e:	300c      	adds	r0, #12
 800dd20:	f000 fd7b 	bl	800e81a <memcpy>
 800dd24:	2201      	movs	r2, #1
 800dd26:	4639      	mov	r1, r7
 800dd28:	4628      	mov	r0, r5
 800dd2a:	f000 ffe9 	bl	800ed00 <__lshift>
 800dd2e:	46b0      	mov	r8, r6
 800dd30:	4606      	mov	r6, r0
 800dd32:	9b08      	ldr	r3, [sp, #32]
 800dd34:	3301      	adds	r3, #1
 800dd36:	9302      	str	r3, [sp, #8]
 800dd38:	9b08      	ldr	r3, [sp, #32]
 800dd3a:	445b      	add	r3, fp
 800dd3c:	930a      	str	r3, [sp, #40]	; 0x28
 800dd3e:	9b04      	ldr	r3, [sp, #16]
 800dd40:	f003 0301 	and.w	r3, r3, #1
 800dd44:	9309      	str	r3, [sp, #36]	; 0x24
 800dd46:	9b02      	ldr	r3, [sp, #8]
 800dd48:	4621      	mov	r1, r4
 800dd4a:	4650      	mov	r0, sl
 800dd4c:	f103 3bff 	add.w	fp, r3, #4294967295
 800dd50:	f7ff fa64 	bl	800d21c <quorem>
 800dd54:	4603      	mov	r3, r0
 800dd56:	4641      	mov	r1, r8
 800dd58:	3330      	adds	r3, #48	; 0x30
 800dd5a:	9004      	str	r0, [sp, #16]
 800dd5c:	4650      	mov	r0, sl
 800dd5e:	930b      	str	r3, [sp, #44]	; 0x2c
 800dd60:	f001 f83a 	bl	800edd8 <__mcmp>
 800dd64:	4632      	mov	r2, r6
 800dd66:	9006      	str	r0, [sp, #24]
 800dd68:	4621      	mov	r1, r4
 800dd6a:	4628      	mov	r0, r5
 800dd6c:	f001 f850 	bl	800ee10 <__mdiff>
 800dd70:	68c2      	ldr	r2, [r0, #12]
 800dd72:	4607      	mov	r7, r0
 800dd74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dd76:	bb02      	cbnz	r2, 800ddba <_dtoa_r+0xa82>
 800dd78:	4601      	mov	r1, r0
 800dd7a:	4650      	mov	r0, sl
 800dd7c:	f001 f82c 	bl	800edd8 <__mcmp>
 800dd80:	4602      	mov	r2, r0
 800dd82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dd84:	4639      	mov	r1, r7
 800dd86:	4628      	mov	r0, r5
 800dd88:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800dd8c:	f000 fda0 	bl	800e8d0 <_Bfree>
 800dd90:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800dd92:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dd94:	9f02      	ldr	r7, [sp, #8]
 800dd96:	ea43 0102 	orr.w	r1, r3, r2
 800dd9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd9c:	430b      	orrs	r3, r1
 800dd9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dda0:	d10d      	bne.n	800ddbe <_dtoa_r+0xa86>
 800dda2:	2b39      	cmp	r3, #57	; 0x39
 800dda4:	d027      	beq.n	800ddf6 <_dtoa_r+0xabe>
 800dda6:	9a06      	ldr	r2, [sp, #24]
 800dda8:	2a00      	cmp	r2, #0
 800ddaa:	dd01      	ble.n	800ddb0 <_dtoa_r+0xa78>
 800ddac:	9b04      	ldr	r3, [sp, #16]
 800ddae:	3331      	adds	r3, #49	; 0x31
 800ddb0:	f88b 3000 	strb.w	r3, [fp]
 800ddb4:	e776      	b.n	800dca4 <_dtoa_r+0x96c>
 800ddb6:	4630      	mov	r0, r6
 800ddb8:	e7b9      	b.n	800dd2e <_dtoa_r+0x9f6>
 800ddba:	2201      	movs	r2, #1
 800ddbc:	e7e2      	b.n	800dd84 <_dtoa_r+0xa4c>
 800ddbe:	9906      	ldr	r1, [sp, #24]
 800ddc0:	2900      	cmp	r1, #0
 800ddc2:	db04      	blt.n	800ddce <_dtoa_r+0xa96>
 800ddc4:	9822      	ldr	r0, [sp, #136]	; 0x88
 800ddc6:	4301      	orrs	r1, r0
 800ddc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ddca:	4301      	orrs	r1, r0
 800ddcc:	d120      	bne.n	800de10 <_dtoa_r+0xad8>
 800ddce:	2a00      	cmp	r2, #0
 800ddd0:	ddee      	ble.n	800ddb0 <_dtoa_r+0xa78>
 800ddd2:	4651      	mov	r1, sl
 800ddd4:	2201      	movs	r2, #1
 800ddd6:	4628      	mov	r0, r5
 800ddd8:	9302      	str	r3, [sp, #8]
 800ddda:	f000 ff91 	bl	800ed00 <__lshift>
 800ddde:	4621      	mov	r1, r4
 800dde0:	4682      	mov	sl, r0
 800dde2:	f000 fff9 	bl	800edd8 <__mcmp>
 800dde6:	2800      	cmp	r0, #0
 800dde8:	9b02      	ldr	r3, [sp, #8]
 800ddea:	dc02      	bgt.n	800ddf2 <_dtoa_r+0xaba>
 800ddec:	d1e0      	bne.n	800ddb0 <_dtoa_r+0xa78>
 800ddee:	07da      	lsls	r2, r3, #31
 800ddf0:	d5de      	bpl.n	800ddb0 <_dtoa_r+0xa78>
 800ddf2:	2b39      	cmp	r3, #57	; 0x39
 800ddf4:	d1da      	bne.n	800ddac <_dtoa_r+0xa74>
 800ddf6:	2339      	movs	r3, #57	; 0x39
 800ddf8:	f88b 3000 	strb.w	r3, [fp]
 800ddfc:	463b      	mov	r3, r7
 800ddfe:	461f      	mov	r7, r3
 800de00:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800de04:	3b01      	subs	r3, #1
 800de06:	2a39      	cmp	r2, #57	; 0x39
 800de08:	d050      	beq.n	800deac <_dtoa_r+0xb74>
 800de0a:	3201      	adds	r2, #1
 800de0c:	701a      	strb	r2, [r3, #0]
 800de0e:	e749      	b.n	800dca4 <_dtoa_r+0x96c>
 800de10:	2a00      	cmp	r2, #0
 800de12:	dd03      	ble.n	800de1c <_dtoa_r+0xae4>
 800de14:	2b39      	cmp	r3, #57	; 0x39
 800de16:	d0ee      	beq.n	800ddf6 <_dtoa_r+0xabe>
 800de18:	3301      	adds	r3, #1
 800de1a:	e7c9      	b.n	800ddb0 <_dtoa_r+0xa78>
 800de1c:	9a02      	ldr	r2, [sp, #8]
 800de1e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800de20:	f802 3c01 	strb.w	r3, [r2, #-1]
 800de24:	428a      	cmp	r2, r1
 800de26:	d02a      	beq.n	800de7e <_dtoa_r+0xb46>
 800de28:	4651      	mov	r1, sl
 800de2a:	2300      	movs	r3, #0
 800de2c:	220a      	movs	r2, #10
 800de2e:	4628      	mov	r0, r5
 800de30:	f000 fd70 	bl	800e914 <__multadd>
 800de34:	45b0      	cmp	r8, r6
 800de36:	4682      	mov	sl, r0
 800de38:	f04f 0300 	mov.w	r3, #0
 800de3c:	f04f 020a 	mov.w	r2, #10
 800de40:	4641      	mov	r1, r8
 800de42:	4628      	mov	r0, r5
 800de44:	d107      	bne.n	800de56 <_dtoa_r+0xb1e>
 800de46:	f000 fd65 	bl	800e914 <__multadd>
 800de4a:	4680      	mov	r8, r0
 800de4c:	4606      	mov	r6, r0
 800de4e:	9b02      	ldr	r3, [sp, #8]
 800de50:	3301      	adds	r3, #1
 800de52:	9302      	str	r3, [sp, #8]
 800de54:	e777      	b.n	800dd46 <_dtoa_r+0xa0e>
 800de56:	f000 fd5d 	bl	800e914 <__multadd>
 800de5a:	4631      	mov	r1, r6
 800de5c:	4680      	mov	r8, r0
 800de5e:	2300      	movs	r3, #0
 800de60:	220a      	movs	r2, #10
 800de62:	4628      	mov	r0, r5
 800de64:	f000 fd56 	bl	800e914 <__multadd>
 800de68:	4606      	mov	r6, r0
 800de6a:	e7f0      	b.n	800de4e <_dtoa_r+0xb16>
 800de6c:	f1bb 0f00 	cmp.w	fp, #0
 800de70:	bfcc      	ite	gt
 800de72:	465f      	movgt	r7, fp
 800de74:	2701      	movle	r7, #1
 800de76:	f04f 0800 	mov.w	r8, #0
 800de7a:	9a08      	ldr	r2, [sp, #32]
 800de7c:	4417      	add	r7, r2
 800de7e:	4651      	mov	r1, sl
 800de80:	2201      	movs	r2, #1
 800de82:	4628      	mov	r0, r5
 800de84:	9302      	str	r3, [sp, #8]
 800de86:	f000 ff3b 	bl	800ed00 <__lshift>
 800de8a:	4621      	mov	r1, r4
 800de8c:	4682      	mov	sl, r0
 800de8e:	f000 ffa3 	bl	800edd8 <__mcmp>
 800de92:	2800      	cmp	r0, #0
 800de94:	dcb2      	bgt.n	800ddfc <_dtoa_r+0xac4>
 800de96:	d102      	bne.n	800de9e <_dtoa_r+0xb66>
 800de98:	9b02      	ldr	r3, [sp, #8]
 800de9a:	07db      	lsls	r3, r3, #31
 800de9c:	d4ae      	bmi.n	800ddfc <_dtoa_r+0xac4>
 800de9e:	463b      	mov	r3, r7
 800dea0:	461f      	mov	r7, r3
 800dea2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dea6:	2a30      	cmp	r2, #48	; 0x30
 800dea8:	d0fa      	beq.n	800dea0 <_dtoa_r+0xb68>
 800deaa:	e6fb      	b.n	800dca4 <_dtoa_r+0x96c>
 800deac:	9a08      	ldr	r2, [sp, #32]
 800deae:	429a      	cmp	r2, r3
 800deb0:	d1a5      	bne.n	800ddfe <_dtoa_r+0xac6>
 800deb2:	2331      	movs	r3, #49	; 0x31
 800deb4:	f109 0901 	add.w	r9, r9, #1
 800deb8:	7013      	strb	r3, [r2, #0]
 800deba:	e6f3      	b.n	800dca4 <_dtoa_r+0x96c>
 800debc:	4b13      	ldr	r3, [pc, #76]	; (800df0c <_dtoa_r+0xbd4>)
 800debe:	f7ff baa7 	b.w	800d410 <_dtoa_r+0xd8>
 800dec2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	f47f aa80 	bne.w	800d3ca <_dtoa_r+0x92>
 800deca:	4b11      	ldr	r3, [pc, #68]	; (800df10 <_dtoa_r+0xbd8>)
 800decc:	f7ff baa0 	b.w	800d410 <_dtoa_r+0xd8>
 800ded0:	f1bb 0f00 	cmp.w	fp, #0
 800ded4:	dc03      	bgt.n	800dede <_dtoa_r+0xba6>
 800ded6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ded8:	2b02      	cmp	r3, #2
 800deda:	f73f aecc 	bgt.w	800dc76 <_dtoa_r+0x93e>
 800dede:	9f08      	ldr	r7, [sp, #32]
 800dee0:	4621      	mov	r1, r4
 800dee2:	4650      	mov	r0, sl
 800dee4:	f7ff f99a 	bl	800d21c <quorem>
 800dee8:	9a08      	ldr	r2, [sp, #32]
 800deea:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800deee:	f807 3b01 	strb.w	r3, [r7], #1
 800def2:	1aba      	subs	r2, r7, r2
 800def4:	4593      	cmp	fp, r2
 800def6:	ddb9      	ble.n	800de6c <_dtoa_r+0xb34>
 800def8:	4651      	mov	r1, sl
 800defa:	2300      	movs	r3, #0
 800defc:	220a      	movs	r2, #10
 800defe:	4628      	mov	r0, r5
 800df00:	f000 fd08 	bl	800e914 <__multadd>
 800df04:	4682      	mov	sl, r0
 800df06:	e7eb      	b.n	800dee0 <_dtoa_r+0xba8>
 800df08:	080112c4 	.word	0x080112c4
 800df0c:	080110c8 	.word	0x080110c8
 800df10:	08011241 	.word	0x08011241

0800df14 <std>:
 800df14:	2300      	movs	r3, #0
 800df16:	b510      	push	{r4, lr}
 800df18:	4604      	mov	r4, r0
 800df1a:	e9c0 3300 	strd	r3, r3, [r0]
 800df1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800df22:	6083      	str	r3, [r0, #8]
 800df24:	8181      	strh	r1, [r0, #12]
 800df26:	6643      	str	r3, [r0, #100]	; 0x64
 800df28:	81c2      	strh	r2, [r0, #14]
 800df2a:	6183      	str	r3, [r0, #24]
 800df2c:	4619      	mov	r1, r3
 800df2e:	2208      	movs	r2, #8
 800df30:	305c      	adds	r0, #92	; 0x5c
 800df32:	f7fd fcdd 	bl	800b8f0 <memset>
 800df36:	4b05      	ldr	r3, [pc, #20]	; (800df4c <std+0x38>)
 800df38:	6224      	str	r4, [r4, #32]
 800df3a:	6263      	str	r3, [r4, #36]	; 0x24
 800df3c:	4b04      	ldr	r3, [pc, #16]	; (800df50 <std+0x3c>)
 800df3e:	62a3      	str	r3, [r4, #40]	; 0x28
 800df40:	4b04      	ldr	r3, [pc, #16]	; (800df54 <std+0x40>)
 800df42:	62e3      	str	r3, [r4, #44]	; 0x2c
 800df44:	4b04      	ldr	r3, [pc, #16]	; (800df58 <std+0x44>)
 800df46:	6323      	str	r3, [r4, #48]	; 0x30
 800df48:	bd10      	pop	{r4, pc}
 800df4a:	bf00      	nop
 800df4c:	0800f751 	.word	0x0800f751
 800df50:	0800f773 	.word	0x0800f773
 800df54:	0800f7ab 	.word	0x0800f7ab
 800df58:	0800f7cf 	.word	0x0800f7cf

0800df5c <_cleanup_r>:
 800df5c:	4901      	ldr	r1, [pc, #4]	; (800df64 <_cleanup_r+0x8>)
 800df5e:	f000 b8af 	b.w	800e0c0 <_fwalk_reent>
 800df62:	bf00      	nop
 800df64:	0800fb25 	.word	0x0800fb25

0800df68 <__sfmoreglue>:
 800df68:	b570      	push	{r4, r5, r6, lr}
 800df6a:	2568      	movs	r5, #104	; 0x68
 800df6c:	1e4a      	subs	r2, r1, #1
 800df6e:	4355      	muls	r5, r2
 800df70:	460e      	mov	r6, r1
 800df72:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800df76:	f7fd fd0f 	bl	800b998 <_malloc_r>
 800df7a:	4604      	mov	r4, r0
 800df7c:	b140      	cbz	r0, 800df90 <__sfmoreglue+0x28>
 800df7e:	2100      	movs	r1, #0
 800df80:	e9c0 1600 	strd	r1, r6, [r0]
 800df84:	300c      	adds	r0, #12
 800df86:	60a0      	str	r0, [r4, #8]
 800df88:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800df8c:	f7fd fcb0 	bl	800b8f0 <memset>
 800df90:	4620      	mov	r0, r4
 800df92:	bd70      	pop	{r4, r5, r6, pc}

0800df94 <__sfp_lock_acquire>:
 800df94:	4801      	ldr	r0, [pc, #4]	; (800df9c <__sfp_lock_acquire+0x8>)
 800df96:	f000 bc1e 	b.w	800e7d6 <__retarget_lock_acquire_recursive>
 800df9a:	bf00      	nop
 800df9c:	20000c3c 	.word	0x20000c3c

0800dfa0 <__sfp_lock_release>:
 800dfa0:	4801      	ldr	r0, [pc, #4]	; (800dfa8 <__sfp_lock_release+0x8>)
 800dfa2:	f000 bc19 	b.w	800e7d8 <__retarget_lock_release_recursive>
 800dfa6:	bf00      	nop
 800dfa8:	20000c3c 	.word	0x20000c3c

0800dfac <__sinit_lock_acquire>:
 800dfac:	4801      	ldr	r0, [pc, #4]	; (800dfb4 <__sinit_lock_acquire+0x8>)
 800dfae:	f000 bc12 	b.w	800e7d6 <__retarget_lock_acquire_recursive>
 800dfb2:	bf00      	nop
 800dfb4:	20000c37 	.word	0x20000c37

0800dfb8 <__sinit_lock_release>:
 800dfb8:	4801      	ldr	r0, [pc, #4]	; (800dfc0 <__sinit_lock_release+0x8>)
 800dfba:	f000 bc0d 	b.w	800e7d8 <__retarget_lock_release_recursive>
 800dfbe:	bf00      	nop
 800dfc0:	20000c37 	.word	0x20000c37

0800dfc4 <__sinit>:
 800dfc4:	b510      	push	{r4, lr}
 800dfc6:	4604      	mov	r4, r0
 800dfc8:	f7ff fff0 	bl	800dfac <__sinit_lock_acquire>
 800dfcc:	69a3      	ldr	r3, [r4, #24]
 800dfce:	b11b      	cbz	r3, 800dfd8 <__sinit+0x14>
 800dfd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dfd4:	f7ff bff0 	b.w	800dfb8 <__sinit_lock_release>
 800dfd8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800dfdc:	6523      	str	r3, [r4, #80]	; 0x50
 800dfde:	4b13      	ldr	r3, [pc, #76]	; (800e02c <__sinit+0x68>)
 800dfe0:	4a13      	ldr	r2, [pc, #76]	; (800e030 <__sinit+0x6c>)
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	62a2      	str	r2, [r4, #40]	; 0x28
 800dfe6:	42a3      	cmp	r3, r4
 800dfe8:	bf08      	it	eq
 800dfea:	2301      	moveq	r3, #1
 800dfec:	4620      	mov	r0, r4
 800dfee:	bf08      	it	eq
 800dff0:	61a3      	streq	r3, [r4, #24]
 800dff2:	f000 f81f 	bl	800e034 <__sfp>
 800dff6:	6060      	str	r0, [r4, #4]
 800dff8:	4620      	mov	r0, r4
 800dffa:	f000 f81b 	bl	800e034 <__sfp>
 800dffe:	60a0      	str	r0, [r4, #8]
 800e000:	4620      	mov	r0, r4
 800e002:	f000 f817 	bl	800e034 <__sfp>
 800e006:	2200      	movs	r2, #0
 800e008:	2104      	movs	r1, #4
 800e00a:	60e0      	str	r0, [r4, #12]
 800e00c:	6860      	ldr	r0, [r4, #4]
 800e00e:	f7ff ff81 	bl	800df14 <std>
 800e012:	2201      	movs	r2, #1
 800e014:	2109      	movs	r1, #9
 800e016:	68a0      	ldr	r0, [r4, #8]
 800e018:	f7ff ff7c 	bl	800df14 <std>
 800e01c:	2202      	movs	r2, #2
 800e01e:	2112      	movs	r1, #18
 800e020:	68e0      	ldr	r0, [r4, #12]
 800e022:	f7ff ff77 	bl	800df14 <std>
 800e026:	2301      	movs	r3, #1
 800e028:	61a3      	str	r3, [r4, #24]
 800e02a:	e7d1      	b.n	800dfd0 <__sinit+0xc>
 800e02c:	080110b4 	.word	0x080110b4
 800e030:	0800df5d 	.word	0x0800df5d

0800e034 <__sfp>:
 800e034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e036:	4607      	mov	r7, r0
 800e038:	f7ff ffac 	bl	800df94 <__sfp_lock_acquire>
 800e03c:	4b1e      	ldr	r3, [pc, #120]	; (800e0b8 <__sfp+0x84>)
 800e03e:	681e      	ldr	r6, [r3, #0]
 800e040:	69b3      	ldr	r3, [r6, #24]
 800e042:	b913      	cbnz	r3, 800e04a <__sfp+0x16>
 800e044:	4630      	mov	r0, r6
 800e046:	f7ff ffbd 	bl	800dfc4 <__sinit>
 800e04a:	3648      	adds	r6, #72	; 0x48
 800e04c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e050:	3b01      	subs	r3, #1
 800e052:	d503      	bpl.n	800e05c <__sfp+0x28>
 800e054:	6833      	ldr	r3, [r6, #0]
 800e056:	b30b      	cbz	r3, 800e09c <__sfp+0x68>
 800e058:	6836      	ldr	r6, [r6, #0]
 800e05a:	e7f7      	b.n	800e04c <__sfp+0x18>
 800e05c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e060:	b9d5      	cbnz	r5, 800e098 <__sfp+0x64>
 800e062:	4b16      	ldr	r3, [pc, #88]	; (800e0bc <__sfp+0x88>)
 800e064:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e068:	60e3      	str	r3, [r4, #12]
 800e06a:	6665      	str	r5, [r4, #100]	; 0x64
 800e06c:	f000 fbb2 	bl	800e7d4 <__retarget_lock_init_recursive>
 800e070:	f7ff ff96 	bl	800dfa0 <__sfp_lock_release>
 800e074:	2208      	movs	r2, #8
 800e076:	4629      	mov	r1, r5
 800e078:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e07c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e080:	6025      	str	r5, [r4, #0]
 800e082:	61a5      	str	r5, [r4, #24]
 800e084:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e088:	f7fd fc32 	bl	800b8f0 <memset>
 800e08c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e090:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e094:	4620      	mov	r0, r4
 800e096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e098:	3468      	adds	r4, #104	; 0x68
 800e09a:	e7d9      	b.n	800e050 <__sfp+0x1c>
 800e09c:	2104      	movs	r1, #4
 800e09e:	4638      	mov	r0, r7
 800e0a0:	f7ff ff62 	bl	800df68 <__sfmoreglue>
 800e0a4:	4604      	mov	r4, r0
 800e0a6:	6030      	str	r0, [r6, #0]
 800e0a8:	2800      	cmp	r0, #0
 800e0aa:	d1d5      	bne.n	800e058 <__sfp+0x24>
 800e0ac:	f7ff ff78 	bl	800dfa0 <__sfp_lock_release>
 800e0b0:	230c      	movs	r3, #12
 800e0b2:	603b      	str	r3, [r7, #0]
 800e0b4:	e7ee      	b.n	800e094 <__sfp+0x60>
 800e0b6:	bf00      	nop
 800e0b8:	080110b4 	.word	0x080110b4
 800e0bc:	ffff0001 	.word	0xffff0001

0800e0c0 <_fwalk_reent>:
 800e0c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e0c4:	4606      	mov	r6, r0
 800e0c6:	4688      	mov	r8, r1
 800e0c8:	2700      	movs	r7, #0
 800e0ca:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e0ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e0d2:	f1b9 0901 	subs.w	r9, r9, #1
 800e0d6:	d505      	bpl.n	800e0e4 <_fwalk_reent+0x24>
 800e0d8:	6824      	ldr	r4, [r4, #0]
 800e0da:	2c00      	cmp	r4, #0
 800e0dc:	d1f7      	bne.n	800e0ce <_fwalk_reent+0xe>
 800e0de:	4638      	mov	r0, r7
 800e0e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e0e4:	89ab      	ldrh	r3, [r5, #12]
 800e0e6:	2b01      	cmp	r3, #1
 800e0e8:	d907      	bls.n	800e0fa <_fwalk_reent+0x3a>
 800e0ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e0ee:	3301      	adds	r3, #1
 800e0f0:	d003      	beq.n	800e0fa <_fwalk_reent+0x3a>
 800e0f2:	4629      	mov	r1, r5
 800e0f4:	4630      	mov	r0, r6
 800e0f6:	47c0      	blx	r8
 800e0f8:	4307      	orrs	r7, r0
 800e0fa:	3568      	adds	r5, #104	; 0x68
 800e0fc:	e7e9      	b.n	800e0d2 <_fwalk_reent+0x12>

0800e0fe <rshift>:
 800e0fe:	6903      	ldr	r3, [r0, #16]
 800e100:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e104:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e108:	f100 0414 	add.w	r4, r0, #20
 800e10c:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e110:	dd46      	ble.n	800e1a0 <rshift+0xa2>
 800e112:	f011 011f 	ands.w	r1, r1, #31
 800e116:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e11a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e11e:	d10c      	bne.n	800e13a <rshift+0x3c>
 800e120:	4629      	mov	r1, r5
 800e122:	f100 0710 	add.w	r7, r0, #16
 800e126:	42b1      	cmp	r1, r6
 800e128:	d335      	bcc.n	800e196 <rshift+0x98>
 800e12a:	1a9b      	subs	r3, r3, r2
 800e12c:	009b      	lsls	r3, r3, #2
 800e12e:	1eea      	subs	r2, r5, #3
 800e130:	4296      	cmp	r6, r2
 800e132:	bf38      	it	cc
 800e134:	2300      	movcc	r3, #0
 800e136:	4423      	add	r3, r4
 800e138:	e015      	b.n	800e166 <rshift+0x68>
 800e13a:	46a1      	mov	r9, r4
 800e13c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e140:	f1c1 0820 	rsb	r8, r1, #32
 800e144:	40cf      	lsrs	r7, r1
 800e146:	f105 0e04 	add.w	lr, r5, #4
 800e14a:	4576      	cmp	r6, lr
 800e14c:	46f4      	mov	ip, lr
 800e14e:	d816      	bhi.n	800e17e <rshift+0x80>
 800e150:	1a9b      	subs	r3, r3, r2
 800e152:	009a      	lsls	r2, r3, #2
 800e154:	3a04      	subs	r2, #4
 800e156:	3501      	adds	r5, #1
 800e158:	42ae      	cmp	r6, r5
 800e15a:	bf38      	it	cc
 800e15c:	2200      	movcc	r2, #0
 800e15e:	18a3      	adds	r3, r4, r2
 800e160:	50a7      	str	r7, [r4, r2]
 800e162:	b107      	cbz	r7, 800e166 <rshift+0x68>
 800e164:	3304      	adds	r3, #4
 800e166:	42a3      	cmp	r3, r4
 800e168:	eba3 0204 	sub.w	r2, r3, r4
 800e16c:	bf08      	it	eq
 800e16e:	2300      	moveq	r3, #0
 800e170:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e174:	6102      	str	r2, [r0, #16]
 800e176:	bf08      	it	eq
 800e178:	6143      	streq	r3, [r0, #20]
 800e17a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e17e:	f8dc c000 	ldr.w	ip, [ip]
 800e182:	fa0c fc08 	lsl.w	ip, ip, r8
 800e186:	ea4c 0707 	orr.w	r7, ip, r7
 800e18a:	f849 7b04 	str.w	r7, [r9], #4
 800e18e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e192:	40cf      	lsrs	r7, r1
 800e194:	e7d9      	b.n	800e14a <rshift+0x4c>
 800e196:	f851 cb04 	ldr.w	ip, [r1], #4
 800e19a:	f847 cf04 	str.w	ip, [r7, #4]!
 800e19e:	e7c2      	b.n	800e126 <rshift+0x28>
 800e1a0:	4623      	mov	r3, r4
 800e1a2:	e7e0      	b.n	800e166 <rshift+0x68>

0800e1a4 <__hexdig_fun>:
 800e1a4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800e1a8:	2b09      	cmp	r3, #9
 800e1aa:	d802      	bhi.n	800e1b2 <__hexdig_fun+0xe>
 800e1ac:	3820      	subs	r0, #32
 800e1ae:	b2c0      	uxtb	r0, r0
 800e1b0:	4770      	bx	lr
 800e1b2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800e1b6:	2b05      	cmp	r3, #5
 800e1b8:	d801      	bhi.n	800e1be <__hexdig_fun+0x1a>
 800e1ba:	3847      	subs	r0, #71	; 0x47
 800e1bc:	e7f7      	b.n	800e1ae <__hexdig_fun+0xa>
 800e1be:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800e1c2:	2b05      	cmp	r3, #5
 800e1c4:	d801      	bhi.n	800e1ca <__hexdig_fun+0x26>
 800e1c6:	3827      	subs	r0, #39	; 0x27
 800e1c8:	e7f1      	b.n	800e1ae <__hexdig_fun+0xa>
 800e1ca:	2000      	movs	r0, #0
 800e1cc:	4770      	bx	lr
	...

0800e1d0 <__gethex>:
 800e1d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1d4:	b08b      	sub	sp, #44	; 0x2c
 800e1d6:	9306      	str	r3, [sp, #24]
 800e1d8:	4bb9      	ldr	r3, [pc, #740]	; (800e4c0 <__gethex+0x2f0>)
 800e1da:	9002      	str	r0, [sp, #8]
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	468b      	mov	fp, r1
 800e1e0:	4618      	mov	r0, r3
 800e1e2:	4690      	mov	r8, r2
 800e1e4:	9303      	str	r3, [sp, #12]
 800e1e6:	f7f2 f81f 	bl	8000228 <strlen>
 800e1ea:	4682      	mov	sl, r0
 800e1ec:	9b03      	ldr	r3, [sp, #12]
 800e1ee:	f8db 2000 	ldr.w	r2, [fp]
 800e1f2:	4403      	add	r3, r0
 800e1f4:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800e1f8:	9307      	str	r3, [sp, #28]
 800e1fa:	1c93      	adds	r3, r2, #2
 800e1fc:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800e200:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800e204:	32fe      	adds	r2, #254	; 0xfe
 800e206:	18d1      	adds	r1, r2, r3
 800e208:	461f      	mov	r7, r3
 800e20a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e20e:	9101      	str	r1, [sp, #4]
 800e210:	2830      	cmp	r0, #48	; 0x30
 800e212:	d0f8      	beq.n	800e206 <__gethex+0x36>
 800e214:	f7ff ffc6 	bl	800e1a4 <__hexdig_fun>
 800e218:	4604      	mov	r4, r0
 800e21a:	2800      	cmp	r0, #0
 800e21c:	d13a      	bne.n	800e294 <__gethex+0xc4>
 800e21e:	4652      	mov	r2, sl
 800e220:	4638      	mov	r0, r7
 800e222:	9903      	ldr	r1, [sp, #12]
 800e224:	f001 fad7 	bl	800f7d6 <strncmp>
 800e228:	4605      	mov	r5, r0
 800e22a:	2800      	cmp	r0, #0
 800e22c:	d166      	bne.n	800e2fc <__gethex+0x12c>
 800e22e:	f817 000a 	ldrb.w	r0, [r7, sl]
 800e232:	eb07 060a 	add.w	r6, r7, sl
 800e236:	f7ff ffb5 	bl	800e1a4 <__hexdig_fun>
 800e23a:	2800      	cmp	r0, #0
 800e23c:	d060      	beq.n	800e300 <__gethex+0x130>
 800e23e:	4633      	mov	r3, r6
 800e240:	7818      	ldrb	r0, [r3, #0]
 800e242:	461f      	mov	r7, r3
 800e244:	2830      	cmp	r0, #48	; 0x30
 800e246:	f103 0301 	add.w	r3, r3, #1
 800e24a:	d0f9      	beq.n	800e240 <__gethex+0x70>
 800e24c:	f7ff ffaa 	bl	800e1a4 <__hexdig_fun>
 800e250:	2301      	movs	r3, #1
 800e252:	fab0 f480 	clz	r4, r0
 800e256:	4635      	mov	r5, r6
 800e258:	0964      	lsrs	r4, r4, #5
 800e25a:	9301      	str	r3, [sp, #4]
 800e25c:	463a      	mov	r2, r7
 800e25e:	4616      	mov	r6, r2
 800e260:	7830      	ldrb	r0, [r6, #0]
 800e262:	3201      	adds	r2, #1
 800e264:	f7ff ff9e 	bl	800e1a4 <__hexdig_fun>
 800e268:	2800      	cmp	r0, #0
 800e26a:	d1f8      	bne.n	800e25e <__gethex+0x8e>
 800e26c:	4652      	mov	r2, sl
 800e26e:	4630      	mov	r0, r6
 800e270:	9903      	ldr	r1, [sp, #12]
 800e272:	f001 fab0 	bl	800f7d6 <strncmp>
 800e276:	b980      	cbnz	r0, 800e29a <__gethex+0xca>
 800e278:	b94d      	cbnz	r5, 800e28e <__gethex+0xbe>
 800e27a:	eb06 050a 	add.w	r5, r6, sl
 800e27e:	462a      	mov	r2, r5
 800e280:	4616      	mov	r6, r2
 800e282:	7830      	ldrb	r0, [r6, #0]
 800e284:	3201      	adds	r2, #1
 800e286:	f7ff ff8d 	bl	800e1a4 <__hexdig_fun>
 800e28a:	2800      	cmp	r0, #0
 800e28c:	d1f8      	bne.n	800e280 <__gethex+0xb0>
 800e28e:	1bad      	subs	r5, r5, r6
 800e290:	00ad      	lsls	r5, r5, #2
 800e292:	e004      	b.n	800e29e <__gethex+0xce>
 800e294:	2400      	movs	r4, #0
 800e296:	4625      	mov	r5, r4
 800e298:	e7e0      	b.n	800e25c <__gethex+0x8c>
 800e29a:	2d00      	cmp	r5, #0
 800e29c:	d1f7      	bne.n	800e28e <__gethex+0xbe>
 800e29e:	7833      	ldrb	r3, [r6, #0]
 800e2a0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e2a4:	2b50      	cmp	r3, #80	; 0x50
 800e2a6:	d139      	bne.n	800e31c <__gethex+0x14c>
 800e2a8:	7873      	ldrb	r3, [r6, #1]
 800e2aa:	2b2b      	cmp	r3, #43	; 0x2b
 800e2ac:	d02a      	beq.n	800e304 <__gethex+0x134>
 800e2ae:	2b2d      	cmp	r3, #45	; 0x2d
 800e2b0:	d02c      	beq.n	800e30c <__gethex+0x13c>
 800e2b2:	f04f 0900 	mov.w	r9, #0
 800e2b6:	1c71      	adds	r1, r6, #1
 800e2b8:	7808      	ldrb	r0, [r1, #0]
 800e2ba:	f7ff ff73 	bl	800e1a4 <__hexdig_fun>
 800e2be:	1e43      	subs	r3, r0, #1
 800e2c0:	b2db      	uxtb	r3, r3
 800e2c2:	2b18      	cmp	r3, #24
 800e2c4:	d82a      	bhi.n	800e31c <__gethex+0x14c>
 800e2c6:	f1a0 0210 	sub.w	r2, r0, #16
 800e2ca:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e2ce:	f7ff ff69 	bl	800e1a4 <__hexdig_fun>
 800e2d2:	1e43      	subs	r3, r0, #1
 800e2d4:	b2db      	uxtb	r3, r3
 800e2d6:	2b18      	cmp	r3, #24
 800e2d8:	d91b      	bls.n	800e312 <__gethex+0x142>
 800e2da:	f1b9 0f00 	cmp.w	r9, #0
 800e2de:	d000      	beq.n	800e2e2 <__gethex+0x112>
 800e2e0:	4252      	negs	r2, r2
 800e2e2:	4415      	add	r5, r2
 800e2e4:	f8cb 1000 	str.w	r1, [fp]
 800e2e8:	b1d4      	cbz	r4, 800e320 <__gethex+0x150>
 800e2ea:	9b01      	ldr	r3, [sp, #4]
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	bf14      	ite	ne
 800e2f0:	2700      	movne	r7, #0
 800e2f2:	2706      	moveq	r7, #6
 800e2f4:	4638      	mov	r0, r7
 800e2f6:	b00b      	add	sp, #44	; 0x2c
 800e2f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2fc:	463e      	mov	r6, r7
 800e2fe:	4625      	mov	r5, r4
 800e300:	2401      	movs	r4, #1
 800e302:	e7cc      	b.n	800e29e <__gethex+0xce>
 800e304:	f04f 0900 	mov.w	r9, #0
 800e308:	1cb1      	adds	r1, r6, #2
 800e30a:	e7d5      	b.n	800e2b8 <__gethex+0xe8>
 800e30c:	f04f 0901 	mov.w	r9, #1
 800e310:	e7fa      	b.n	800e308 <__gethex+0x138>
 800e312:	230a      	movs	r3, #10
 800e314:	fb03 0202 	mla	r2, r3, r2, r0
 800e318:	3a10      	subs	r2, #16
 800e31a:	e7d6      	b.n	800e2ca <__gethex+0xfa>
 800e31c:	4631      	mov	r1, r6
 800e31e:	e7e1      	b.n	800e2e4 <__gethex+0x114>
 800e320:	4621      	mov	r1, r4
 800e322:	1bf3      	subs	r3, r6, r7
 800e324:	3b01      	subs	r3, #1
 800e326:	2b07      	cmp	r3, #7
 800e328:	dc0a      	bgt.n	800e340 <__gethex+0x170>
 800e32a:	9802      	ldr	r0, [sp, #8]
 800e32c:	f000 fa90 	bl	800e850 <_Balloc>
 800e330:	4604      	mov	r4, r0
 800e332:	b940      	cbnz	r0, 800e346 <__gethex+0x176>
 800e334:	4602      	mov	r2, r0
 800e336:	21de      	movs	r1, #222	; 0xde
 800e338:	4b62      	ldr	r3, [pc, #392]	; (800e4c4 <__gethex+0x2f4>)
 800e33a:	4863      	ldr	r0, [pc, #396]	; (800e4c8 <__gethex+0x2f8>)
 800e33c:	f001 fb3e 	bl	800f9bc <__assert_func>
 800e340:	3101      	adds	r1, #1
 800e342:	105b      	asrs	r3, r3, #1
 800e344:	e7ef      	b.n	800e326 <__gethex+0x156>
 800e346:	f04f 0b00 	mov.w	fp, #0
 800e34a:	f100 0914 	add.w	r9, r0, #20
 800e34e:	f1ca 0301 	rsb	r3, sl, #1
 800e352:	f8cd 9010 	str.w	r9, [sp, #16]
 800e356:	f8cd b004 	str.w	fp, [sp, #4]
 800e35a:	9308      	str	r3, [sp, #32]
 800e35c:	42b7      	cmp	r7, r6
 800e35e:	d33f      	bcc.n	800e3e0 <__gethex+0x210>
 800e360:	9f04      	ldr	r7, [sp, #16]
 800e362:	9b01      	ldr	r3, [sp, #4]
 800e364:	f847 3b04 	str.w	r3, [r7], #4
 800e368:	eba7 0709 	sub.w	r7, r7, r9
 800e36c:	10bf      	asrs	r7, r7, #2
 800e36e:	6127      	str	r7, [r4, #16]
 800e370:	4618      	mov	r0, r3
 800e372:	f000 fb63 	bl	800ea3c <__hi0bits>
 800e376:	017f      	lsls	r7, r7, #5
 800e378:	f8d8 6000 	ldr.w	r6, [r8]
 800e37c:	1a3f      	subs	r7, r7, r0
 800e37e:	42b7      	cmp	r7, r6
 800e380:	dd62      	ble.n	800e448 <__gethex+0x278>
 800e382:	1bbf      	subs	r7, r7, r6
 800e384:	4639      	mov	r1, r7
 800e386:	4620      	mov	r0, r4
 800e388:	f000 fef9 	bl	800f17e <__any_on>
 800e38c:	4682      	mov	sl, r0
 800e38e:	b1a8      	cbz	r0, 800e3bc <__gethex+0x1ec>
 800e390:	f04f 0a01 	mov.w	sl, #1
 800e394:	1e7b      	subs	r3, r7, #1
 800e396:	1159      	asrs	r1, r3, #5
 800e398:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800e39c:	f003 021f 	and.w	r2, r3, #31
 800e3a0:	fa0a f202 	lsl.w	r2, sl, r2
 800e3a4:	420a      	tst	r2, r1
 800e3a6:	d009      	beq.n	800e3bc <__gethex+0x1ec>
 800e3a8:	4553      	cmp	r3, sl
 800e3aa:	dd05      	ble.n	800e3b8 <__gethex+0x1e8>
 800e3ac:	4620      	mov	r0, r4
 800e3ae:	1eb9      	subs	r1, r7, #2
 800e3b0:	f000 fee5 	bl	800f17e <__any_on>
 800e3b4:	2800      	cmp	r0, #0
 800e3b6:	d144      	bne.n	800e442 <__gethex+0x272>
 800e3b8:	f04f 0a02 	mov.w	sl, #2
 800e3bc:	4639      	mov	r1, r7
 800e3be:	4620      	mov	r0, r4
 800e3c0:	f7ff fe9d 	bl	800e0fe <rshift>
 800e3c4:	443d      	add	r5, r7
 800e3c6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e3ca:	42ab      	cmp	r3, r5
 800e3cc:	da4a      	bge.n	800e464 <__gethex+0x294>
 800e3ce:	4621      	mov	r1, r4
 800e3d0:	9802      	ldr	r0, [sp, #8]
 800e3d2:	f000 fa7d 	bl	800e8d0 <_Bfree>
 800e3d6:	2300      	movs	r3, #0
 800e3d8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e3da:	27a3      	movs	r7, #163	; 0xa3
 800e3dc:	6013      	str	r3, [r2, #0]
 800e3de:	e789      	b.n	800e2f4 <__gethex+0x124>
 800e3e0:	1e73      	subs	r3, r6, #1
 800e3e2:	9a07      	ldr	r2, [sp, #28]
 800e3e4:	9305      	str	r3, [sp, #20]
 800e3e6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e3ea:	4293      	cmp	r3, r2
 800e3ec:	d019      	beq.n	800e422 <__gethex+0x252>
 800e3ee:	f1bb 0f20 	cmp.w	fp, #32
 800e3f2:	d107      	bne.n	800e404 <__gethex+0x234>
 800e3f4:	9b04      	ldr	r3, [sp, #16]
 800e3f6:	9a01      	ldr	r2, [sp, #4]
 800e3f8:	f843 2b04 	str.w	r2, [r3], #4
 800e3fc:	9304      	str	r3, [sp, #16]
 800e3fe:	2300      	movs	r3, #0
 800e400:	469b      	mov	fp, r3
 800e402:	9301      	str	r3, [sp, #4]
 800e404:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800e408:	f7ff fecc 	bl	800e1a4 <__hexdig_fun>
 800e40c:	9b01      	ldr	r3, [sp, #4]
 800e40e:	f000 000f 	and.w	r0, r0, #15
 800e412:	fa00 f00b 	lsl.w	r0, r0, fp
 800e416:	4303      	orrs	r3, r0
 800e418:	9301      	str	r3, [sp, #4]
 800e41a:	f10b 0b04 	add.w	fp, fp, #4
 800e41e:	9b05      	ldr	r3, [sp, #20]
 800e420:	e00d      	b.n	800e43e <__gethex+0x26e>
 800e422:	9b05      	ldr	r3, [sp, #20]
 800e424:	9a08      	ldr	r2, [sp, #32]
 800e426:	4413      	add	r3, r2
 800e428:	42bb      	cmp	r3, r7
 800e42a:	d3e0      	bcc.n	800e3ee <__gethex+0x21e>
 800e42c:	4618      	mov	r0, r3
 800e42e:	4652      	mov	r2, sl
 800e430:	9903      	ldr	r1, [sp, #12]
 800e432:	9309      	str	r3, [sp, #36]	; 0x24
 800e434:	f001 f9cf 	bl	800f7d6 <strncmp>
 800e438:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e43a:	2800      	cmp	r0, #0
 800e43c:	d1d7      	bne.n	800e3ee <__gethex+0x21e>
 800e43e:	461e      	mov	r6, r3
 800e440:	e78c      	b.n	800e35c <__gethex+0x18c>
 800e442:	f04f 0a03 	mov.w	sl, #3
 800e446:	e7b9      	b.n	800e3bc <__gethex+0x1ec>
 800e448:	da09      	bge.n	800e45e <__gethex+0x28e>
 800e44a:	1bf7      	subs	r7, r6, r7
 800e44c:	4621      	mov	r1, r4
 800e44e:	463a      	mov	r2, r7
 800e450:	9802      	ldr	r0, [sp, #8]
 800e452:	f000 fc55 	bl	800ed00 <__lshift>
 800e456:	4604      	mov	r4, r0
 800e458:	1bed      	subs	r5, r5, r7
 800e45a:	f100 0914 	add.w	r9, r0, #20
 800e45e:	f04f 0a00 	mov.w	sl, #0
 800e462:	e7b0      	b.n	800e3c6 <__gethex+0x1f6>
 800e464:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800e468:	42a8      	cmp	r0, r5
 800e46a:	dd71      	ble.n	800e550 <__gethex+0x380>
 800e46c:	1b45      	subs	r5, r0, r5
 800e46e:	42ae      	cmp	r6, r5
 800e470:	dc34      	bgt.n	800e4dc <__gethex+0x30c>
 800e472:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e476:	2b02      	cmp	r3, #2
 800e478:	d028      	beq.n	800e4cc <__gethex+0x2fc>
 800e47a:	2b03      	cmp	r3, #3
 800e47c:	d02a      	beq.n	800e4d4 <__gethex+0x304>
 800e47e:	2b01      	cmp	r3, #1
 800e480:	d115      	bne.n	800e4ae <__gethex+0x2de>
 800e482:	42ae      	cmp	r6, r5
 800e484:	d113      	bne.n	800e4ae <__gethex+0x2de>
 800e486:	2e01      	cmp	r6, #1
 800e488:	d10b      	bne.n	800e4a2 <__gethex+0x2d2>
 800e48a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e48e:	9a06      	ldr	r2, [sp, #24]
 800e490:	2762      	movs	r7, #98	; 0x62
 800e492:	6013      	str	r3, [r2, #0]
 800e494:	2301      	movs	r3, #1
 800e496:	6123      	str	r3, [r4, #16]
 800e498:	f8c9 3000 	str.w	r3, [r9]
 800e49c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e49e:	601c      	str	r4, [r3, #0]
 800e4a0:	e728      	b.n	800e2f4 <__gethex+0x124>
 800e4a2:	4620      	mov	r0, r4
 800e4a4:	1e71      	subs	r1, r6, #1
 800e4a6:	f000 fe6a 	bl	800f17e <__any_on>
 800e4aa:	2800      	cmp	r0, #0
 800e4ac:	d1ed      	bne.n	800e48a <__gethex+0x2ba>
 800e4ae:	4621      	mov	r1, r4
 800e4b0:	9802      	ldr	r0, [sp, #8]
 800e4b2:	f000 fa0d 	bl	800e8d0 <_Bfree>
 800e4b6:	2300      	movs	r3, #0
 800e4b8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e4ba:	2750      	movs	r7, #80	; 0x50
 800e4bc:	6013      	str	r3, [r2, #0]
 800e4be:	e719      	b.n	800e2f4 <__gethex+0x124>
 800e4c0:	080113a4 	.word	0x080113a4
 800e4c4:	080112c4 	.word	0x080112c4
 800e4c8:	08011338 	.word	0x08011338
 800e4cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d1ed      	bne.n	800e4ae <__gethex+0x2de>
 800e4d2:	e7da      	b.n	800e48a <__gethex+0x2ba>
 800e4d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d1d7      	bne.n	800e48a <__gethex+0x2ba>
 800e4da:	e7e8      	b.n	800e4ae <__gethex+0x2de>
 800e4dc:	1e6f      	subs	r7, r5, #1
 800e4de:	f1ba 0f00 	cmp.w	sl, #0
 800e4e2:	d132      	bne.n	800e54a <__gethex+0x37a>
 800e4e4:	b127      	cbz	r7, 800e4f0 <__gethex+0x320>
 800e4e6:	4639      	mov	r1, r7
 800e4e8:	4620      	mov	r0, r4
 800e4ea:	f000 fe48 	bl	800f17e <__any_on>
 800e4ee:	4682      	mov	sl, r0
 800e4f0:	2101      	movs	r1, #1
 800e4f2:	117b      	asrs	r3, r7, #5
 800e4f4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800e4f8:	f007 071f 	and.w	r7, r7, #31
 800e4fc:	fa01 f707 	lsl.w	r7, r1, r7
 800e500:	421f      	tst	r7, r3
 800e502:	f04f 0702 	mov.w	r7, #2
 800e506:	4629      	mov	r1, r5
 800e508:	4620      	mov	r0, r4
 800e50a:	bf18      	it	ne
 800e50c:	f04a 0a02 	orrne.w	sl, sl, #2
 800e510:	1b76      	subs	r6, r6, r5
 800e512:	f7ff fdf4 	bl	800e0fe <rshift>
 800e516:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e51a:	f1ba 0f00 	cmp.w	sl, #0
 800e51e:	d048      	beq.n	800e5b2 <__gethex+0x3e2>
 800e520:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e524:	2b02      	cmp	r3, #2
 800e526:	d015      	beq.n	800e554 <__gethex+0x384>
 800e528:	2b03      	cmp	r3, #3
 800e52a:	d017      	beq.n	800e55c <__gethex+0x38c>
 800e52c:	2b01      	cmp	r3, #1
 800e52e:	d109      	bne.n	800e544 <__gethex+0x374>
 800e530:	f01a 0f02 	tst.w	sl, #2
 800e534:	d006      	beq.n	800e544 <__gethex+0x374>
 800e536:	f8d9 0000 	ldr.w	r0, [r9]
 800e53a:	ea4a 0a00 	orr.w	sl, sl, r0
 800e53e:	f01a 0f01 	tst.w	sl, #1
 800e542:	d10e      	bne.n	800e562 <__gethex+0x392>
 800e544:	f047 0710 	orr.w	r7, r7, #16
 800e548:	e033      	b.n	800e5b2 <__gethex+0x3e2>
 800e54a:	f04f 0a01 	mov.w	sl, #1
 800e54e:	e7cf      	b.n	800e4f0 <__gethex+0x320>
 800e550:	2701      	movs	r7, #1
 800e552:	e7e2      	b.n	800e51a <__gethex+0x34a>
 800e554:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e556:	f1c3 0301 	rsb	r3, r3, #1
 800e55a:	9315      	str	r3, [sp, #84]	; 0x54
 800e55c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d0f0      	beq.n	800e544 <__gethex+0x374>
 800e562:	f04f 0c00 	mov.w	ip, #0
 800e566:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e56a:	f104 0314 	add.w	r3, r4, #20
 800e56e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e572:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e576:	4618      	mov	r0, r3
 800e578:	f853 2b04 	ldr.w	r2, [r3], #4
 800e57c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e580:	d01c      	beq.n	800e5bc <__gethex+0x3ec>
 800e582:	3201      	adds	r2, #1
 800e584:	6002      	str	r2, [r0, #0]
 800e586:	2f02      	cmp	r7, #2
 800e588:	f104 0314 	add.w	r3, r4, #20
 800e58c:	d13d      	bne.n	800e60a <__gethex+0x43a>
 800e58e:	f8d8 2000 	ldr.w	r2, [r8]
 800e592:	3a01      	subs	r2, #1
 800e594:	42b2      	cmp	r2, r6
 800e596:	d10a      	bne.n	800e5ae <__gethex+0x3de>
 800e598:	2201      	movs	r2, #1
 800e59a:	1171      	asrs	r1, r6, #5
 800e59c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e5a0:	f006 061f 	and.w	r6, r6, #31
 800e5a4:	fa02 f606 	lsl.w	r6, r2, r6
 800e5a8:	421e      	tst	r6, r3
 800e5aa:	bf18      	it	ne
 800e5ac:	4617      	movne	r7, r2
 800e5ae:	f047 0720 	orr.w	r7, r7, #32
 800e5b2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e5b4:	601c      	str	r4, [r3, #0]
 800e5b6:	9b06      	ldr	r3, [sp, #24]
 800e5b8:	601d      	str	r5, [r3, #0]
 800e5ba:	e69b      	b.n	800e2f4 <__gethex+0x124>
 800e5bc:	4299      	cmp	r1, r3
 800e5be:	f843 cc04 	str.w	ip, [r3, #-4]
 800e5c2:	d8d8      	bhi.n	800e576 <__gethex+0x3a6>
 800e5c4:	68a3      	ldr	r3, [r4, #8]
 800e5c6:	459b      	cmp	fp, r3
 800e5c8:	db17      	blt.n	800e5fa <__gethex+0x42a>
 800e5ca:	6861      	ldr	r1, [r4, #4]
 800e5cc:	9802      	ldr	r0, [sp, #8]
 800e5ce:	3101      	adds	r1, #1
 800e5d0:	f000 f93e 	bl	800e850 <_Balloc>
 800e5d4:	4681      	mov	r9, r0
 800e5d6:	b918      	cbnz	r0, 800e5e0 <__gethex+0x410>
 800e5d8:	4602      	mov	r2, r0
 800e5da:	2184      	movs	r1, #132	; 0x84
 800e5dc:	4b19      	ldr	r3, [pc, #100]	; (800e644 <__gethex+0x474>)
 800e5de:	e6ac      	b.n	800e33a <__gethex+0x16a>
 800e5e0:	6922      	ldr	r2, [r4, #16]
 800e5e2:	f104 010c 	add.w	r1, r4, #12
 800e5e6:	3202      	adds	r2, #2
 800e5e8:	0092      	lsls	r2, r2, #2
 800e5ea:	300c      	adds	r0, #12
 800e5ec:	f000 f915 	bl	800e81a <memcpy>
 800e5f0:	4621      	mov	r1, r4
 800e5f2:	9802      	ldr	r0, [sp, #8]
 800e5f4:	f000 f96c 	bl	800e8d0 <_Bfree>
 800e5f8:	464c      	mov	r4, r9
 800e5fa:	6923      	ldr	r3, [r4, #16]
 800e5fc:	1c5a      	adds	r2, r3, #1
 800e5fe:	6122      	str	r2, [r4, #16]
 800e600:	2201      	movs	r2, #1
 800e602:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e606:	615a      	str	r2, [r3, #20]
 800e608:	e7bd      	b.n	800e586 <__gethex+0x3b6>
 800e60a:	6922      	ldr	r2, [r4, #16]
 800e60c:	455a      	cmp	r2, fp
 800e60e:	dd0b      	ble.n	800e628 <__gethex+0x458>
 800e610:	2101      	movs	r1, #1
 800e612:	4620      	mov	r0, r4
 800e614:	f7ff fd73 	bl	800e0fe <rshift>
 800e618:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e61c:	3501      	adds	r5, #1
 800e61e:	42ab      	cmp	r3, r5
 800e620:	f6ff aed5 	blt.w	800e3ce <__gethex+0x1fe>
 800e624:	2701      	movs	r7, #1
 800e626:	e7c2      	b.n	800e5ae <__gethex+0x3de>
 800e628:	f016 061f 	ands.w	r6, r6, #31
 800e62c:	d0fa      	beq.n	800e624 <__gethex+0x454>
 800e62e:	449a      	add	sl, r3
 800e630:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800e634:	f000 fa02 	bl	800ea3c <__hi0bits>
 800e638:	f1c6 0620 	rsb	r6, r6, #32
 800e63c:	42b0      	cmp	r0, r6
 800e63e:	dbe7      	blt.n	800e610 <__gethex+0x440>
 800e640:	e7f0      	b.n	800e624 <__gethex+0x454>
 800e642:	bf00      	nop
 800e644:	080112c4 	.word	0x080112c4

0800e648 <L_shift>:
 800e648:	f1c2 0208 	rsb	r2, r2, #8
 800e64c:	0092      	lsls	r2, r2, #2
 800e64e:	b570      	push	{r4, r5, r6, lr}
 800e650:	f1c2 0620 	rsb	r6, r2, #32
 800e654:	6843      	ldr	r3, [r0, #4]
 800e656:	6804      	ldr	r4, [r0, #0]
 800e658:	fa03 f506 	lsl.w	r5, r3, r6
 800e65c:	432c      	orrs	r4, r5
 800e65e:	40d3      	lsrs	r3, r2
 800e660:	6004      	str	r4, [r0, #0]
 800e662:	f840 3f04 	str.w	r3, [r0, #4]!
 800e666:	4288      	cmp	r0, r1
 800e668:	d3f4      	bcc.n	800e654 <L_shift+0xc>
 800e66a:	bd70      	pop	{r4, r5, r6, pc}

0800e66c <__match>:
 800e66c:	b530      	push	{r4, r5, lr}
 800e66e:	6803      	ldr	r3, [r0, #0]
 800e670:	3301      	adds	r3, #1
 800e672:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e676:	b914      	cbnz	r4, 800e67e <__match+0x12>
 800e678:	6003      	str	r3, [r0, #0]
 800e67a:	2001      	movs	r0, #1
 800e67c:	bd30      	pop	{r4, r5, pc}
 800e67e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e682:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800e686:	2d19      	cmp	r5, #25
 800e688:	bf98      	it	ls
 800e68a:	3220      	addls	r2, #32
 800e68c:	42a2      	cmp	r2, r4
 800e68e:	d0f0      	beq.n	800e672 <__match+0x6>
 800e690:	2000      	movs	r0, #0
 800e692:	e7f3      	b.n	800e67c <__match+0x10>

0800e694 <__hexnan>:
 800e694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e698:	2500      	movs	r5, #0
 800e69a:	680b      	ldr	r3, [r1, #0]
 800e69c:	4682      	mov	sl, r0
 800e69e:	115e      	asrs	r6, r3, #5
 800e6a0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e6a4:	f013 031f 	ands.w	r3, r3, #31
 800e6a8:	bf18      	it	ne
 800e6aa:	3604      	addne	r6, #4
 800e6ac:	1f37      	subs	r7, r6, #4
 800e6ae:	4690      	mov	r8, r2
 800e6b0:	46b9      	mov	r9, r7
 800e6b2:	463c      	mov	r4, r7
 800e6b4:	46ab      	mov	fp, r5
 800e6b6:	b087      	sub	sp, #28
 800e6b8:	6801      	ldr	r1, [r0, #0]
 800e6ba:	9301      	str	r3, [sp, #4]
 800e6bc:	f846 5c04 	str.w	r5, [r6, #-4]
 800e6c0:	9502      	str	r5, [sp, #8]
 800e6c2:	784a      	ldrb	r2, [r1, #1]
 800e6c4:	1c4b      	adds	r3, r1, #1
 800e6c6:	9303      	str	r3, [sp, #12]
 800e6c8:	b342      	cbz	r2, 800e71c <__hexnan+0x88>
 800e6ca:	4610      	mov	r0, r2
 800e6cc:	9105      	str	r1, [sp, #20]
 800e6ce:	9204      	str	r2, [sp, #16]
 800e6d0:	f7ff fd68 	bl	800e1a4 <__hexdig_fun>
 800e6d4:	2800      	cmp	r0, #0
 800e6d6:	d14f      	bne.n	800e778 <__hexnan+0xe4>
 800e6d8:	9a04      	ldr	r2, [sp, #16]
 800e6da:	9905      	ldr	r1, [sp, #20]
 800e6dc:	2a20      	cmp	r2, #32
 800e6de:	d818      	bhi.n	800e712 <__hexnan+0x7e>
 800e6e0:	9b02      	ldr	r3, [sp, #8]
 800e6e2:	459b      	cmp	fp, r3
 800e6e4:	dd13      	ble.n	800e70e <__hexnan+0x7a>
 800e6e6:	454c      	cmp	r4, r9
 800e6e8:	d206      	bcs.n	800e6f8 <__hexnan+0x64>
 800e6ea:	2d07      	cmp	r5, #7
 800e6ec:	dc04      	bgt.n	800e6f8 <__hexnan+0x64>
 800e6ee:	462a      	mov	r2, r5
 800e6f0:	4649      	mov	r1, r9
 800e6f2:	4620      	mov	r0, r4
 800e6f4:	f7ff ffa8 	bl	800e648 <L_shift>
 800e6f8:	4544      	cmp	r4, r8
 800e6fa:	d950      	bls.n	800e79e <__hexnan+0x10a>
 800e6fc:	2300      	movs	r3, #0
 800e6fe:	f1a4 0904 	sub.w	r9, r4, #4
 800e702:	f844 3c04 	str.w	r3, [r4, #-4]
 800e706:	461d      	mov	r5, r3
 800e708:	464c      	mov	r4, r9
 800e70a:	f8cd b008 	str.w	fp, [sp, #8]
 800e70e:	9903      	ldr	r1, [sp, #12]
 800e710:	e7d7      	b.n	800e6c2 <__hexnan+0x2e>
 800e712:	2a29      	cmp	r2, #41	; 0x29
 800e714:	d156      	bne.n	800e7c4 <__hexnan+0x130>
 800e716:	3102      	adds	r1, #2
 800e718:	f8ca 1000 	str.w	r1, [sl]
 800e71c:	f1bb 0f00 	cmp.w	fp, #0
 800e720:	d050      	beq.n	800e7c4 <__hexnan+0x130>
 800e722:	454c      	cmp	r4, r9
 800e724:	d206      	bcs.n	800e734 <__hexnan+0xa0>
 800e726:	2d07      	cmp	r5, #7
 800e728:	dc04      	bgt.n	800e734 <__hexnan+0xa0>
 800e72a:	462a      	mov	r2, r5
 800e72c:	4649      	mov	r1, r9
 800e72e:	4620      	mov	r0, r4
 800e730:	f7ff ff8a 	bl	800e648 <L_shift>
 800e734:	4544      	cmp	r4, r8
 800e736:	d934      	bls.n	800e7a2 <__hexnan+0x10e>
 800e738:	4623      	mov	r3, r4
 800e73a:	f1a8 0204 	sub.w	r2, r8, #4
 800e73e:	f853 1b04 	ldr.w	r1, [r3], #4
 800e742:	429f      	cmp	r7, r3
 800e744:	f842 1f04 	str.w	r1, [r2, #4]!
 800e748:	d2f9      	bcs.n	800e73e <__hexnan+0xaa>
 800e74a:	1b3b      	subs	r3, r7, r4
 800e74c:	f023 0303 	bic.w	r3, r3, #3
 800e750:	3304      	adds	r3, #4
 800e752:	3401      	adds	r4, #1
 800e754:	3e03      	subs	r6, #3
 800e756:	42b4      	cmp	r4, r6
 800e758:	bf88      	it	hi
 800e75a:	2304      	movhi	r3, #4
 800e75c:	2200      	movs	r2, #0
 800e75e:	4443      	add	r3, r8
 800e760:	f843 2b04 	str.w	r2, [r3], #4
 800e764:	429f      	cmp	r7, r3
 800e766:	d2fb      	bcs.n	800e760 <__hexnan+0xcc>
 800e768:	683b      	ldr	r3, [r7, #0]
 800e76a:	b91b      	cbnz	r3, 800e774 <__hexnan+0xe0>
 800e76c:	4547      	cmp	r7, r8
 800e76e:	d127      	bne.n	800e7c0 <__hexnan+0x12c>
 800e770:	2301      	movs	r3, #1
 800e772:	603b      	str	r3, [r7, #0]
 800e774:	2005      	movs	r0, #5
 800e776:	e026      	b.n	800e7c6 <__hexnan+0x132>
 800e778:	3501      	adds	r5, #1
 800e77a:	2d08      	cmp	r5, #8
 800e77c:	f10b 0b01 	add.w	fp, fp, #1
 800e780:	dd06      	ble.n	800e790 <__hexnan+0xfc>
 800e782:	4544      	cmp	r4, r8
 800e784:	d9c3      	bls.n	800e70e <__hexnan+0x7a>
 800e786:	2300      	movs	r3, #0
 800e788:	2501      	movs	r5, #1
 800e78a:	f844 3c04 	str.w	r3, [r4, #-4]
 800e78e:	3c04      	subs	r4, #4
 800e790:	6822      	ldr	r2, [r4, #0]
 800e792:	f000 000f 	and.w	r0, r0, #15
 800e796:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800e79a:	6022      	str	r2, [r4, #0]
 800e79c:	e7b7      	b.n	800e70e <__hexnan+0x7a>
 800e79e:	2508      	movs	r5, #8
 800e7a0:	e7b5      	b.n	800e70e <__hexnan+0x7a>
 800e7a2:	9b01      	ldr	r3, [sp, #4]
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d0df      	beq.n	800e768 <__hexnan+0xd4>
 800e7a8:	f04f 32ff 	mov.w	r2, #4294967295
 800e7ac:	f1c3 0320 	rsb	r3, r3, #32
 800e7b0:	fa22 f303 	lsr.w	r3, r2, r3
 800e7b4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e7b8:	401a      	ands	r2, r3
 800e7ba:	f846 2c04 	str.w	r2, [r6, #-4]
 800e7be:	e7d3      	b.n	800e768 <__hexnan+0xd4>
 800e7c0:	3f04      	subs	r7, #4
 800e7c2:	e7d1      	b.n	800e768 <__hexnan+0xd4>
 800e7c4:	2004      	movs	r0, #4
 800e7c6:	b007      	add	sp, #28
 800e7c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e7cc <_localeconv_r>:
 800e7cc:	4800      	ldr	r0, [pc, #0]	; (800e7d0 <_localeconv_r+0x4>)
 800e7ce:	4770      	bx	lr
 800e7d0:	20000174 	.word	0x20000174

0800e7d4 <__retarget_lock_init_recursive>:
 800e7d4:	4770      	bx	lr

0800e7d6 <__retarget_lock_acquire_recursive>:
 800e7d6:	4770      	bx	lr

0800e7d8 <__retarget_lock_release_recursive>:
 800e7d8:	4770      	bx	lr

0800e7da <__ascii_mbtowc>:
 800e7da:	b082      	sub	sp, #8
 800e7dc:	b901      	cbnz	r1, 800e7e0 <__ascii_mbtowc+0x6>
 800e7de:	a901      	add	r1, sp, #4
 800e7e0:	b142      	cbz	r2, 800e7f4 <__ascii_mbtowc+0x1a>
 800e7e2:	b14b      	cbz	r3, 800e7f8 <__ascii_mbtowc+0x1e>
 800e7e4:	7813      	ldrb	r3, [r2, #0]
 800e7e6:	600b      	str	r3, [r1, #0]
 800e7e8:	7812      	ldrb	r2, [r2, #0]
 800e7ea:	1e10      	subs	r0, r2, #0
 800e7ec:	bf18      	it	ne
 800e7ee:	2001      	movne	r0, #1
 800e7f0:	b002      	add	sp, #8
 800e7f2:	4770      	bx	lr
 800e7f4:	4610      	mov	r0, r2
 800e7f6:	e7fb      	b.n	800e7f0 <__ascii_mbtowc+0x16>
 800e7f8:	f06f 0001 	mvn.w	r0, #1
 800e7fc:	e7f8      	b.n	800e7f0 <__ascii_mbtowc+0x16>

0800e7fe <memchr>:
 800e7fe:	4603      	mov	r3, r0
 800e800:	b510      	push	{r4, lr}
 800e802:	b2c9      	uxtb	r1, r1
 800e804:	4402      	add	r2, r0
 800e806:	4293      	cmp	r3, r2
 800e808:	4618      	mov	r0, r3
 800e80a:	d101      	bne.n	800e810 <memchr+0x12>
 800e80c:	2000      	movs	r0, #0
 800e80e:	e003      	b.n	800e818 <memchr+0x1a>
 800e810:	7804      	ldrb	r4, [r0, #0]
 800e812:	3301      	adds	r3, #1
 800e814:	428c      	cmp	r4, r1
 800e816:	d1f6      	bne.n	800e806 <memchr+0x8>
 800e818:	bd10      	pop	{r4, pc}

0800e81a <memcpy>:
 800e81a:	440a      	add	r2, r1
 800e81c:	4291      	cmp	r1, r2
 800e81e:	f100 33ff 	add.w	r3, r0, #4294967295
 800e822:	d100      	bne.n	800e826 <memcpy+0xc>
 800e824:	4770      	bx	lr
 800e826:	b510      	push	{r4, lr}
 800e828:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e82c:	4291      	cmp	r1, r2
 800e82e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e832:	d1f9      	bne.n	800e828 <memcpy+0xe>
 800e834:	bd10      	pop	{r4, pc}
	...

0800e838 <__malloc_lock>:
 800e838:	4801      	ldr	r0, [pc, #4]	; (800e840 <__malloc_lock+0x8>)
 800e83a:	f7ff bfcc 	b.w	800e7d6 <__retarget_lock_acquire_recursive>
 800e83e:	bf00      	nop
 800e840:	20000c38 	.word	0x20000c38

0800e844 <__malloc_unlock>:
 800e844:	4801      	ldr	r0, [pc, #4]	; (800e84c <__malloc_unlock+0x8>)
 800e846:	f7ff bfc7 	b.w	800e7d8 <__retarget_lock_release_recursive>
 800e84a:	bf00      	nop
 800e84c:	20000c38 	.word	0x20000c38

0800e850 <_Balloc>:
 800e850:	b570      	push	{r4, r5, r6, lr}
 800e852:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e854:	4604      	mov	r4, r0
 800e856:	460d      	mov	r5, r1
 800e858:	b976      	cbnz	r6, 800e878 <_Balloc+0x28>
 800e85a:	2010      	movs	r0, #16
 800e85c:	f7fd f838 	bl	800b8d0 <malloc>
 800e860:	4602      	mov	r2, r0
 800e862:	6260      	str	r0, [r4, #36]	; 0x24
 800e864:	b920      	cbnz	r0, 800e870 <_Balloc+0x20>
 800e866:	2166      	movs	r1, #102	; 0x66
 800e868:	4b17      	ldr	r3, [pc, #92]	; (800e8c8 <_Balloc+0x78>)
 800e86a:	4818      	ldr	r0, [pc, #96]	; (800e8cc <_Balloc+0x7c>)
 800e86c:	f001 f8a6 	bl	800f9bc <__assert_func>
 800e870:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e874:	6006      	str	r6, [r0, #0]
 800e876:	60c6      	str	r6, [r0, #12]
 800e878:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e87a:	68f3      	ldr	r3, [r6, #12]
 800e87c:	b183      	cbz	r3, 800e8a0 <_Balloc+0x50>
 800e87e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e880:	68db      	ldr	r3, [r3, #12]
 800e882:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e886:	b9b8      	cbnz	r0, 800e8b8 <_Balloc+0x68>
 800e888:	2101      	movs	r1, #1
 800e88a:	fa01 f605 	lsl.w	r6, r1, r5
 800e88e:	1d72      	adds	r2, r6, #5
 800e890:	4620      	mov	r0, r4
 800e892:	0092      	lsls	r2, r2, #2
 800e894:	f000 fc94 	bl	800f1c0 <_calloc_r>
 800e898:	b160      	cbz	r0, 800e8b4 <_Balloc+0x64>
 800e89a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e89e:	e00e      	b.n	800e8be <_Balloc+0x6e>
 800e8a0:	2221      	movs	r2, #33	; 0x21
 800e8a2:	2104      	movs	r1, #4
 800e8a4:	4620      	mov	r0, r4
 800e8a6:	f000 fc8b 	bl	800f1c0 <_calloc_r>
 800e8aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e8ac:	60f0      	str	r0, [r6, #12]
 800e8ae:	68db      	ldr	r3, [r3, #12]
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d1e4      	bne.n	800e87e <_Balloc+0x2e>
 800e8b4:	2000      	movs	r0, #0
 800e8b6:	bd70      	pop	{r4, r5, r6, pc}
 800e8b8:	6802      	ldr	r2, [r0, #0]
 800e8ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e8be:	2300      	movs	r3, #0
 800e8c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e8c4:	e7f7      	b.n	800e8b6 <_Balloc+0x66>
 800e8c6:	bf00      	nop
 800e8c8:	0801124e 	.word	0x0801124e
 800e8cc:	080113b8 	.word	0x080113b8

0800e8d0 <_Bfree>:
 800e8d0:	b570      	push	{r4, r5, r6, lr}
 800e8d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e8d4:	4605      	mov	r5, r0
 800e8d6:	460c      	mov	r4, r1
 800e8d8:	b976      	cbnz	r6, 800e8f8 <_Bfree+0x28>
 800e8da:	2010      	movs	r0, #16
 800e8dc:	f7fc fff8 	bl	800b8d0 <malloc>
 800e8e0:	4602      	mov	r2, r0
 800e8e2:	6268      	str	r0, [r5, #36]	; 0x24
 800e8e4:	b920      	cbnz	r0, 800e8f0 <_Bfree+0x20>
 800e8e6:	218a      	movs	r1, #138	; 0x8a
 800e8e8:	4b08      	ldr	r3, [pc, #32]	; (800e90c <_Bfree+0x3c>)
 800e8ea:	4809      	ldr	r0, [pc, #36]	; (800e910 <_Bfree+0x40>)
 800e8ec:	f001 f866 	bl	800f9bc <__assert_func>
 800e8f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e8f4:	6006      	str	r6, [r0, #0]
 800e8f6:	60c6      	str	r6, [r0, #12]
 800e8f8:	b13c      	cbz	r4, 800e90a <_Bfree+0x3a>
 800e8fa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e8fc:	6862      	ldr	r2, [r4, #4]
 800e8fe:	68db      	ldr	r3, [r3, #12]
 800e900:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e904:	6021      	str	r1, [r4, #0]
 800e906:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e90a:	bd70      	pop	{r4, r5, r6, pc}
 800e90c:	0801124e 	.word	0x0801124e
 800e910:	080113b8 	.word	0x080113b8

0800e914 <__multadd>:
 800e914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e918:	4698      	mov	r8, r3
 800e91a:	460c      	mov	r4, r1
 800e91c:	2300      	movs	r3, #0
 800e91e:	690e      	ldr	r6, [r1, #16]
 800e920:	4607      	mov	r7, r0
 800e922:	f101 0014 	add.w	r0, r1, #20
 800e926:	6805      	ldr	r5, [r0, #0]
 800e928:	3301      	adds	r3, #1
 800e92a:	b2a9      	uxth	r1, r5
 800e92c:	fb02 8101 	mla	r1, r2, r1, r8
 800e930:	0c2d      	lsrs	r5, r5, #16
 800e932:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800e936:	fb02 c505 	mla	r5, r2, r5, ip
 800e93a:	b289      	uxth	r1, r1
 800e93c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800e940:	429e      	cmp	r6, r3
 800e942:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800e946:	f840 1b04 	str.w	r1, [r0], #4
 800e94a:	dcec      	bgt.n	800e926 <__multadd+0x12>
 800e94c:	f1b8 0f00 	cmp.w	r8, #0
 800e950:	d022      	beq.n	800e998 <__multadd+0x84>
 800e952:	68a3      	ldr	r3, [r4, #8]
 800e954:	42b3      	cmp	r3, r6
 800e956:	dc19      	bgt.n	800e98c <__multadd+0x78>
 800e958:	6861      	ldr	r1, [r4, #4]
 800e95a:	4638      	mov	r0, r7
 800e95c:	3101      	adds	r1, #1
 800e95e:	f7ff ff77 	bl	800e850 <_Balloc>
 800e962:	4605      	mov	r5, r0
 800e964:	b928      	cbnz	r0, 800e972 <__multadd+0x5e>
 800e966:	4602      	mov	r2, r0
 800e968:	21b5      	movs	r1, #181	; 0xb5
 800e96a:	4b0d      	ldr	r3, [pc, #52]	; (800e9a0 <__multadd+0x8c>)
 800e96c:	480d      	ldr	r0, [pc, #52]	; (800e9a4 <__multadd+0x90>)
 800e96e:	f001 f825 	bl	800f9bc <__assert_func>
 800e972:	6922      	ldr	r2, [r4, #16]
 800e974:	f104 010c 	add.w	r1, r4, #12
 800e978:	3202      	adds	r2, #2
 800e97a:	0092      	lsls	r2, r2, #2
 800e97c:	300c      	adds	r0, #12
 800e97e:	f7ff ff4c 	bl	800e81a <memcpy>
 800e982:	4621      	mov	r1, r4
 800e984:	4638      	mov	r0, r7
 800e986:	f7ff ffa3 	bl	800e8d0 <_Bfree>
 800e98a:	462c      	mov	r4, r5
 800e98c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800e990:	3601      	adds	r6, #1
 800e992:	f8c3 8014 	str.w	r8, [r3, #20]
 800e996:	6126      	str	r6, [r4, #16]
 800e998:	4620      	mov	r0, r4
 800e99a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e99e:	bf00      	nop
 800e9a0:	080112c4 	.word	0x080112c4
 800e9a4:	080113b8 	.word	0x080113b8

0800e9a8 <__s2b>:
 800e9a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e9ac:	4615      	mov	r5, r2
 800e9ae:	2209      	movs	r2, #9
 800e9b0:	461f      	mov	r7, r3
 800e9b2:	3308      	adds	r3, #8
 800e9b4:	460c      	mov	r4, r1
 800e9b6:	fb93 f3f2 	sdiv	r3, r3, r2
 800e9ba:	4606      	mov	r6, r0
 800e9bc:	2201      	movs	r2, #1
 800e9be:	2100      	movs	r1, #0
 800e9c0:	429a      	cmp	r2, r3
 800e9c2:	db09      	blt.n	800e9d8 <__s2b+0x30>
 800e9c4:	4630      	mov	r0, r6
 800e9c6:	f7ff ff43 	bl	800e850 <_Balloc>
 800e9ca:	b940      	cbnz	r0, 800e9de <__s2b+0x36>
 800e9cc:	4602      	mov	r2, r0
 800e9ce:	21ce      	movs	r1, #206	; 0xce
 800e9d0:	4b18      	ldr	r3, [pc, #96]	; (800ea34 <__s2b+0x8c>)
 800e9d2:	4819      	ldr	r0, [pc, #100]	; (800ea38 <__s2b+0x90>)
 800e9d4:	f000 fff2 	bl	800f9bc <__assert_func>
 800e9d8:	0052      	lsls	r2, r2, #1
 800e9da:	3101      	adds	r1, #1
 800e9dc:	e7f0      	b.n	800e9c0 <__s2b+0x18>
 800e9de:	9b08      	ldr	r3, [sp, #32]
 800e9e0:	2d09      	cmp	r5, #9
 800e9e2:	6143      	str	r3, [r0, #20]
 800e9e4:	f04f 0301 	mov.w	r3, #1
 800e9e8:	6103      	str	r3, [r0, #16]
 800e9ea:	dd16      	ble.n	800ea1a <__s2b+0x72>
 800e9ec:	f104 0909 	add.w	r9, r4, #9
 800e9f0:	46c8      	mov	r8, r9
 800e9f2:	442c      	add	r4, r5
 800e9f4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e9f8:	4601      	mov	r1, r0
 800e9fa:	220a      	movs	r2, #10
 800e9fc:	4630      	mov	r0, r6
 800e9fe:	3b30      	subs	r3, #48	; 0x30
 800ea00:	f7ff ff88 	bl	800e914 <__multadd>
 800ea04:	45a0      	cmp	r8, r4
 800ea06:	d1f5      	bne.n	800e9f4 <__s2b+0x4c>
 800ea08:	f1a5 0408 	sub.w	r4, r5, #8
 800ea0c:	444c      	add	r4, r9
 800ea0e:	1b2d      	subs	r5, r5, r4
 800ea10:	1963      	adds	r3, r4, r5
 800ea12:	42bb      	cmp	r3, r7
 800ea14:	db04      	blt.n	800ea20 <__s2b+0x78>
 800ea16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ea1a:	2509      	movs	r5, #9
 800ea1c:	340a      	adds	r4, #10
 800ea1e:	e7f6      	b.n	800ea0e <__s2b+0x66>
 800ea20:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ea24:	4601      	mov	r1, r0
 800ea26:	220a      	movs	r2, #10
 800ea28:	4630      	mov	r0, r6
 800ea2a:	3b30      	subs	r3, #48	; 0x30
 800ea2c:	f7ff ff72 	bl	800e914 <__multadd>
 800ea30:	e7ee      	b.n	800ea10 <__s2b+0x68>
 800ea32:	bf00      	nop
 800ea34:	080112c4 	.word	0x080112c4
 800ea38:	080113b8 	.word	0x080113b8

0800ea3c <__hi0bits>:
 800ea3c:	0c02      	lsrs	r2, r0, #16
 800ea3e:	0412      	lsls	r2, r2, #16
 800ea40:	4603      	mov	r3, r0
 800ea42:	b9ca      	cbnz	r2, 800ea78 <__hi0bits+0x3c>
 800ea44:	0403      	lsls	r3, r0, #16
 800ea46:	2010      	movs	r0, #16
 800ea48:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800ea4c:	bf04      	itt	eq
 800ea4e:	021b      	lsleq	r3, r3, #8
 800ea50:	3008      	addeq	r0, #8
 800ea52:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800ea56:	bf04      	itt	eq
 800ea58:	011b      	lsleq	r3, r3, #4
 800ea5a:	3004      	addeq	r0, #4
 800ea5c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800ea60:	bf04      	itt	eq
 800ea62:	009b      	lsleq	r3, r3, #2
 800ea64:	3002      	addeq	r0, #2
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	db05      	blt.n	800ea76 <__hi0bits+0x3a>
 800ea6a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800ea6e:	f100 0001 	add.w	r0, r0, #1
 800ea72:	bf08      	it	eq
 800ea74:	2020      	moveq	r0, #32
 800ea76:	4770      	bx	lr
 800ea78:	2000      	movs	r0, #0
 800ea7a:	e7e5      	b.n	800ea48 <__hi0bits+0xc>

0800ea7c <__lo0bits>:
 800ea7c:	6803      	ldr	r3, [r0, #0]
 800ea7e:	4602      	mov	r2, r0
 800ea80:	f013 0007 	ands.w	r0, r3, #7
 800ea84:	d00b      	beq.n	800ea9e <__lo0bits+0x22>
 800ea86:	07d9      	lsls	r1, r3, #31
 800ea88:	d422      	bmi.n	800ead0 <__lo0bits+0x54>
 800ea8a:	0798      	lsls	r0, r3, #30
 800ea8c:	bf49      	itett	mi
 800ea8e:	085b      	lsrmi	r3, r3, #1
 800ea90:	089b      	lsrpl	r3, r3, #2
 800ea92:	2001      	movmi	r0, #1
 800ea94:	6013      	strmi	r3, [r2, #0]
 800ea96:	bf5c      	itt	pl
 800ea98:	2002      	movpl	r0, #2
 800ea9a:	6013      	strpl	r3, [r2, #0]
 800ea9c:	4770      	bx	lr
 800ea9e:	b299      	uxth	r1, r3
 800eaa0:	b909      	cbnz	r1, 800eaa6 <__lo0bits+0x2a>
 800eaa2:	2010      	movs	r0, #16
 800eaa4:	0c1b      	lsrs	r3, r3, #16
 800eaa6:	f013 0fff 	tst.w	r3, #255	; 0xff
 800eaaa:	bf04      	itt	eq
 800eaac:	0a1b      	lsreq	r3, r3, #8
 800eaae:	3008      	addeq	r0, #8
 800eab0:	0719      	lsls	r1, r3, #28
 800eab2:	bf04      	itt	eq
 800eab4:	091b      	lsreq	r3, r3, #4
 800eab6:	3004      	addeq	r0, #4
 800eab8:	0799      	lsls	r1, r3, #30
 800eaba:	bf04      	itt	eq
 800eabc:	089b      	lsreq	r3, r3, #2
 800eabe:	3002      	addeq	r0, #2
 800eac0:	07d9      	lsls	r1, r3, #31
 800eac2:	d403      	bmi.n	800eacc <__lo0bits+0x50>
 800eac4:	085b      	lsrs	r3, r3, #1
 800eac6:	f100 0001 	add.w	r0, r0, #1
 800eaca:	d003      	beq.n	800ead4 <__lo0bits+0x58>
 800eacc:	6013      	str	r3, [r2, #0]
 800eace:	4770      	bx	lr
 800ead0:	2000      	movs	r0, #0
 800ead2:	4770      	bx	lr
 800ead4:	2020      	movs	r0, #32
 800ead6:	4770      	bx	lr

0800ead8 <__i2b>:
 800ead8:	b510      	push	{r4, lr}
 800eada:	460c      	mov	r4, r1
 800eadc:	2101      	movs	r1, #1
 800eade:	f7ff feb7 	bl	800e850 <_Balloc>
 800eae2:	4602      	mov	r2, r0
 800eae4:	b928      	cbnz	r0, 800eaf2 <__i2b+0x1a>
 800eae6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800eaea:	4b04      	ldr	r3, [pc, #16]	; (800eafc <__i2b+0x24>)
 800eaec:	4804      	ldr	r0, [pc, #16]	; (800eb00 <__i2b+0x28>)
 800eaee:	f000 ff65 	bl	800f9bc <__assert_func>
 800eaf2:	2301      	movs	r3, #1
 800eaf4:	6144      	str	r4, [r0, #20]
 800eaf6:	6103      	str	r3, [r0, #16]
 800eaf8:	bd10      	pop	{r4, pc}
 800eafa:	bf00      	nop
 800eafc:	080112c4 	.word	0x080112c4
 800eb00:	080113b8 	.word	0x080113b8

0800eb04 <__multiply>:
 800eb04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb08:	4614      	mov	r4, r2
 800eb0a:	690a      	ldr	r2, [r1, #16]
 800eb0c:	6923      	ldr	r3, [r4, #16]
 800eb0e:	460d      	mov	r5, r1
 800eb10:	429a      	cmp	r2, r3
 800eb12:	bfbe      	ittt	lt
 800eb14:	460b      	movlt	r3, r1
 800eb16:	4625      	movlt	r5, r4
 800eb18:	461c      	movlt	r4, r3
 800eb1a:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800eb1e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800eb22:	68ab      	ldr	r3, [r5, #8]
 800eb24:	6869      	ldr	r1, [r5, #4]
 800eb26:	eb0a 0709 	add.w	r7, sl, r9
 800eb2a:	42bb      	cmp	r3, r7
 800eb2c:	b085      	sub	sp, #20
 800eb2e:	bfb8      	it	lt
 800eb30:	3101      	addlt	r1, #1
 800eb32:	f7ff fe8d 	bl	800e850 <_Balloc>
 800eb36:	b930      	cbnz	r0, 800eb46 <__multiply+0x42>
 800eb38:	4602      	mov	r2, r0
 800eb3a:	f240 115d 	movw	r1, #349	; 0x15d
 800eb3e:	4b41      	ldr	r3, [pc, #260]	; (800ec44 <__multiply+0x140>)
 800eb40:	4841      	ldr	r0, [pc, #260]	; (800ec48 <__multiply+0x144>)
 800eb42:	f000 ff3b 	bl	800f9bc <__assert_func>
 800eb46:	f100 0614 	add.w	r6, r0, #20
 800eb4a:	4633      	mov	r3, r6
 800eb4c:	2200      	movs	r2, #0
 800eb4e:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800eb52:	4543      	cmp	r3, r8
 800eb54:	d31e      	bcc.n	800eb94 <__multiply+0x90>
 800eb56:	f105 0c14 	add.w	ip, r5, #20
 800eb5a:	f104 0314 	add.w	r3, r4, #20
 800eb5e:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800eb62:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800eb66:	9202      	str	r2, [sp, #8]
 800eb68:	ebac 0205 	sub.w	r2, ip, r5
 800eb6c:	3a15      	subs	r2, #21
 800eb6e:	f022 0203 	bic.w	r2, r2, #3
 800eb72:	3204      	adds	r2, #4
 800eb74:	f105 0115 	add.w	r1, r5, #21
 800eb78:	458c      	cmp	ip, r1
 800eb7a:	bf38      	it	cc
 800eb7c:	2204      	movcc	r2, #4
 800eb7e:	9201      	str	r2, [sp, #4]
 800eb80:	9a02      	ldr	r2, [sp, #8]
 800eb82:	9303      	str	r3, [sp, #12]
 800eb84:	429a      	cmp	r2, r3
 800eb86:	d808      	bhi.n	800eb9a <__multiply+0x96>
 800eb88:	2f00      	cmp	r7, #0
 800eb8a:	dc55      	bgt.n	800ec38 <__multiply+0x134>
 800eb8c:	6107      	str	r7, [r0, #16]
 800eb8e:	b005      	add	sp, #20
 800eb90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb94:	f843 2b04 	str.w	r2, [r3], #4
 800eb98:	e7db      	b.n	800eb52 <__multiply+0x4e>
 800eb9a:	f8b3 a000 	ldrh.w	sl, [r3]
 800eb9e:	f1ba 0f00 	cmp.w	sl, #0
 800eba2:	d020      	beq.n	800ebe6 <__multiply+0xe2>
 800eba4:	46b1      	mov	r9, r6
 800eba6:	2200      	movs	r2, #0
 800eba8:	f105 0e14 	add.w	lr, r5, #20
 800ebac:	f85e 4b04 	ldr.w	r4, [lr], #4
 800ebb0:	f8d9 b000 	ldr.w	fp, [r9]
 800ebb4:	b2a1      	uxth	r1, r4
 800ebb6:	fa1f fb8b 	uxth.w	fp, fp
 800ebba:	fb0a b101 	mla	r1, sl, r1, fp
 800ebbe:	4411      	add	r1, r2
 800ebc0:	f8d9 2000 	ldr.w	r2, [r9]
 800ebc4:	0c24      	lsrs	r4, r4, #16
 800ebc6:	0c12      	lsrs	r2, r2, #16
 800ebc8:	fb0a 2404 	mla	r4, sl, r4, r2
 800ebcc:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800ebd0:	b289      	uxth	r1, r1
 800ebd2:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800ebd6:	45f4      	cmp	ip, lr
 800ebd8:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800ebdc:	f849 1b04 	str.w	r1, [r9], #4
 800ebe0:	d8e4      	bhi.n	800ebac <__multiply+0xa8>
 800ebe2:	9901      	ldr	r1, [sp, #4]
 800ebe4:	5072      	str	r2, [r6, r1]
 800ebe6:	9a03      	ldr	r2, [sp, #12]
 800ebe8:	3304      	adds	r3, #4
 800ebea:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ebee:	f1b9 0f00 	cmp.w	r9, #0
 800ebf2:	d01f      	beq.n	800ec34 <__multiply+0x130>
 800ebf4:	46b6      	mov	lr, r6
 800ebf6:	f04f 0a00 	mov.w	sl, #0
 800ebfa:	6834      	ldr	r4, [r6, #0]
 800ebfc:	f105 0114 	add.w	r1, r5, #20
 800ec00:	880a      	ldrh	r2, [r1, #0]
 800ec02:	f8be b002 	ldrh.w	fp, [lr, #2]
 800ec06:	b2a4      	uxth	r4, r4
 800ec08:	fb09 b202 	mla	r2, r9, r2, fp
 800ec0c:	4492      	add	sl, r2
 800ec0e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800ec12:	f84e 4b04 	str.w	r4, [lr], #4
 800ec16:	f851 4b04 	ldr.w	r4, [r1], #4
 800ec1a:	f8be 2000 	ldrh.w	r2, [lr]
 800ec1e:	0c24      	lsrs	r4, r4, #16
 800ec20:	fb09 2404 	mla	r4, r9, r4, r2
 800ec24:	458c      	cmp	ip, r1
 800ec26:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800ec2a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800ec2e:	d8e7      	bhi.n	800ec00 <__multiply+0xfc>
 800ec30:	9a01      	ldr	r2, [sp, #4]
 800ec32:	50b4      	str	r4, [r6, r2]
 800ec34:	3604      	adds	r6, #4
 800ec36:	e7a3      	b.n	800eb80 <__multiply+0x7c>
 800ec38:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d1a5      	bne.n	800eb8c <__multiply+0x88>
 800ec40:	3f01      	subs	r7, #1
 800ec42:	e7a1      	b.n	800eb88 <__multiply+0x84>
 800ec44:	080112c4 	.word	0x080112c4
 800ec48:	080113b8 	.word	0x080113b8

0800ec4c <__pow5mult>:
 800ec4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ec50:	4615      	mov	r5, r2
 800ec52:	f012 0203 	ands.w	r2, r2, #3
 800ec56:	4606      	mov	r6, r0
 800ec58:	460f      	mov	r7, r1
 800ec5a:	d007      	beq.n	800ec6c <__pow5mult+0x20>
 800ec5c:	4c25      	ldr	r4, [pc, #148]	; (800ecf4 <__pow5mult+0xa8>)
 800ec5e:	3a01      	subs	r2, #1
 800ec60:	2300      	movs	r3, #0
 800ec62:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ec66:	f7ff fe55 	bl	800e914 <__multadd>
 800ec6a:	4607      	mov	r7, r0
 800ec6c:	10ad      	asrs	r5, r5, #2
 800ec6e:	d03d      	beq.n	800ecec <__pow5mult+0xa0>
 800ec70:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ec72:	b97c      	cbnz	r4, 800ec94 <__pow5mult+0x48>
 800ec74:	2010      	movs	r0, #16
 800ec76:	f7fc fe2b 	bl	800b8d0 <malloc>
 800ec7a:	4602      	mov	r2, r0
 800ec7c:	6270      	str	r0, [r6, #36]	; 0x24
 800ec7e:	b928      	cbnz	r0, 800ec8c <__pow5mult+0x40>
 800ec80:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ec84:	4b1c      	ldr	r3, [pc, #112]	; (800ecf8 <__pow5mult+0xac>)
 800ec86:	481d      	ldr	r0, [pc, #116]	; (800ecfc <__pow5mult+0xb0>)
 800ec88:	f000 fe98 	bl	800f9bc <__assert_func>
 800ec8c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ec90:	6004      	str	r4, [r0, #0]
 800ec92:	60c4      	str	r4, [r0, #12]
 800ec94:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ec98:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ec9c:	b94c      	cbnz	r4, 800ecb2 <__pow5mult+0x66>
 800ec9e:	f240 2171 	movw	r1, #625	; 0x271
 800eca2:	4630      	mov	r0, r6
 800eca4:	f7ff ff18 	bl	800ead8 <__i2b>
 800eca8:	2300      	movs	r3, #0
 800ecaa:	4604      	mov	r4, r0
 800ecac:	f8c8 0008 	str.w	r0, [r8, #8]
 800ecb0:	6003      	str	r3, [r0, #0]
 800ecb2:	f04f 0900 	mov.w	r9, #0
 800ecb6:	07eb      	lsls	r3, r5, #31
 800ecb8:	d50a      	bpl.n	800ecd0 <__pow5mult+0x84>
 800ecba:	4639      	mov	r1, r7
 800ecbc:	4622      	mov	r2, r4
 800ecbe:	4630      	mov	r0, r6
 800ecc0:	f7ff ff20 	bl	800eb04 <__multiply>
 800ecc4:	4680      	mov	r8, r0
 800ecc6:	4639      	mov	r1, r7
 800ecc8:	4630      	mov	r0, r6
 800ecca:	f7ff fe01 	bl	800e8d0 <_Bfree>
 800ecce:	4647      	mov	r7, r8
 800ecd0:	106d      	asrs	r5, r5, #1
 800ecd2:	d00b      	beq.n	800ecec <__pow5mult+0xa0>
 800ecd4:	6820      	ldr	r0, [r4, #0]
 800ecd6:	b938      	cbnz	r0, 800ece8 <__pow5mult+0x9c>
 800ecd8:	4622      	mov	r2, r4
 800ecda:	4621      	mov	r1, r4
 800ecdc:	4630      	mov	r0, r6
 800ecde:	f7ff ff11 	bl	800eb04 <__multiply>
 800ece2:	6020      	str	r0, [r4, #0]
 800ece4:	f8c0 9000 	str.w	r9, [r0]
 800ece8:	4604      	mov	r4, r0
 800ecea:	e7e4      	b.n	800ecb6 <__pow5mult+0x6a>
 800ecec:	4638      	mov	r0, r7
 800ecee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ecf2:	bf00      	nop
 800ecf4:	08011508 	.word	0x08011508
 800ecf8:	0801124e 	.word	0x0801124e
 800ecfc:	080113b8 	.word	0x080113b8

0800ed00 <__lshift>:
 800ed00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed04:	460c      	mov	r4, r1
 800ed06:	4607      	mov	r7, r0
 800ed08:	4691      	mov	r9, r2
 800ed0a:	6923      	ldr	r3, [r4, #16]
 800ed0c:	6849      	ldr	r1, [r1, #4]
 800ed0e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ed12:	68a3      	ldr	r3, [r4, #8]
 800ed14:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ed18:	f108 0601 	add.w	r6, r8, #1
 800ed1c:	42b3      	cmp	r3, r6
 800ed1e:	db0b      	blt.n	800ed38 <__lshift+0x38>
 800ed20:	4638      	mov	r0, r7
 800ed22:	f7ff fd95 	bl	800e850 <_Balloc>
 800ed26:	4605      	mov	r5, r0
 800ed28:	b948      	cbnz	r0, 800ed3e <__lshift+0x3e>
 800ed2a:	4602      	mov	r2, r0
 800ed2c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ed30:	4b27      	ldr	r3, [pc, #156]	; (800edd0 <__lshift+0xd0>)
 800ed32:	4828      	ldr	r0, [pc, #160]	; (800edd4 <__lshift+0xd4>)
 800ed34:	f000 fe42 	bl	800f9bc <__assert_func>
 800ed38:	3101      	adds	r1, #1
 800ed3a:	005b      	lsls	r3, r3, #1
 800ed3c:	e7ee      	b.n	800ed1c <__lshift+0x1c>
 800ed3e:	2300      	movs	r3, #0
 800ed40:	f100 0114 	add.w	r1, r0, #20
 800ed44:	f100 0210 	add.w	r2, r0, #16
 800ed48:	4618      	mov	r0, r3
 800ed4a:	4553      	cmp	r3, sl
 800ed4c:	db33      	blt.n	800edb6 <__lshift+0xb6>
 800ed4e:	6920      	ldr	r0, [r4, #16]
 800ed50:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ed54:	f104 0314 	add.w	r3, r4, #20
 800ed58:	f019 091f 	ands.w	r9, r9, #31
 800ed5c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ed60:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ed64:	d02b      	beq.n	800edbe <__lshift+0xbe>
 800ed66:	468a      	mov	sl, r1
 800ed68:	2200      	movs	r2, #0
 800ed6a:	f1c9 0e20 	rsb	lr, r9, #32
 800ed6e:	6818      	ldr	r0, [r3, #0]
 800ed70:	fa00 f009 	lsl.w	r0, r0, r9
 800ed74:	4302      	orrs	r2, r0
 800ed76:	f84a 2b04 	str.w	r2, [sl], #4
 800ed7a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ed7e:	459c      	cmp	ip, r3
 800ed80:	fa22 f20e 	lsr.w	r2, r2, lr
 800ed84:	d8f3      	bhi.n	800ed6e <__lshift+0x6e>
 800ed86:	ebac 0304 	sub.w	r3, ip, r4
 800ed8a:	3b15      	subs	r3, #21
 800ed8c:	f023 0303 	bic.w	r3, r3, #3
 800ed90:	3304      	adds	r3, #4
 800ed92:	f104 0015 	add.w	r0, r4, #21
 800ed96:	4584      	cmp	ip, r0
 800ed98:	bf38      	it	cc
 800ed9a:	2304      	movcc	r3, #4
 800ed9c:	50ca      	str	r2, [r1, r3]
 800ed9e:	b10a      	cbz	r2, 800eda4 <__lshift+0xa4>
 800eda0:	f108 0602 	add.w	r6, r8, #2
 800eda4:	3e01      	subs	r6, #1
 800eda6:	4638      	mov	r0, r7
 800eda8:	4621      	mov	r1, r4
 800edaa:	612e      	str	r6, [r5, #16]
 800edac:	f7ff fd90 	bl	800e8d0 <_Bfree>
 800edb0:	4628      	mov	r0, r5
 800edb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800edb6:	f842 0f04 	str.w	r0, [r2, #4]!
 800edba:	3301      	adds	r3, #1
 800edbc:	e7c5      	b.n	800ed4a <__lshift+0x4a>
 800edbe:	3904      	subs	r1, #4
 800edc0:	f853 2b04 	ldr.w	r2, [r3], #4
 800edc4:	459c      	cmp	ip, r3
 800edc6:	f841 2f04 	str.w	r2, [r1, #4]!
 800edca:	d8f9      	bhi.n	800edc0 <__lshift+0xc0>
 800edcc:	e7ea      	b.n	800eda4 <__lshift+0xa4>
 800edce:	bf00      	nop
 800edd0:	080112c4 	.word	0x080112c4
 800edd4:	080113b8 	.word	0x080113b8

0800edd8 <__mcmp>:
 800edd8:	4603      	mov	r3, r0
 800edda:	690a      	ldr	r2, [r1, #16]
 800eddc:	6900      	ldr	r0, [r0, #16]
 800edde:	b530      	push	{r4, r5, lr}
 800ede0:	1a80      	subs	r0, r0, r2
 800ede2:	d10d      	bne.n	800ee00 <__mcmp+0x28>
 800ede4:	3314      	adds	r3, #20
 800ede6:	3114      	adds	r1, #20
 800ede8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800edec:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800edf0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800edf4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800edf8:	4295      	cmp	r5, r2
 800edfa:	d002      	beq.n	800ee02 <__mcmp+0x2a>
 800edfc:	d304      	bcc.n	800ee08 <__mcmp+0x30>
 800edfe:	2001      	movs	r0, #1
 800ee00:	bd30      	pop	{r4, r5, pc}
 800ee02:	42a3      	cmp	r3, r4
 800ee04:	d3f4      	bcc.n	800edf0 <__mcmp+0x18>
 800ee06:	e7fb      	b.n	800ee00 <__mcmp+0x28>
 800ee08:	f04f 30ff 	mov.w	r0, #4294967295
 800ee0c:	e7f8      	b.n	800ee00 <__mcmp+0x28>
	...

0800ee10 <__mdiff>:
 800ee10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee14:	460c      	mov	r4, r1
 800ee16:	4606      	mov	r6, r0
 800ee18:	4611      	mov	r1, r2
 800ee1a:	4620      	mov	r0, r4
 800ee1c:	4692      	mov	sl, r2
 800ee1e:	f7ff ffdb 	bl	800edd8 <__mcmp>
 800ee22:	1e05      	subs	r5, r0, #0
 800ee24:	d111      	bne.n	800ee4a <__mdiff+0x3a>
 800ee26:	4629      	mov	r1, r5
 800ee28:	4630      	mov	r0, r6
 800ee2a:	f7ff fd11 	bl	800e850 <_Balloc>
 800ee2e:	4602      	mov	r2, r0
 800ee30:	b928      	cbnz	r0, 800ee3e <__mdiff+0x2e>
 800ee32:	f240 2132 	movw	r1, #562	; 0x232
 800ee36:	4b3c      	ldr	r3, [pc, #240]	; (800ef28 <__mdiff+0x118>)
 800ee38:	483c      	ldr	r0, [pc, #240]	; (800ef2c <__mdiff+0x11c>)
 800ee3a:	f000 fdbf 	bl	800f9bc <__assert_func>
 800ee3e:	2301      	movs	r3, #1
 800ee40:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ee44:	4610      	mov	r0, r2
 800ee46:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee4a:	bfa4      	itt	ge
 800ee4c:	4653      	movge	r3, sl
 800ee4e:	46a2      	movge	sl, r4
 800ee50:	4630      	mov	r0, r6
 800ee52:	f8da 1004 	ldr.w	r1, [sl, #4]
 800ee56:	bfa6      	itte	ge
 800ee58:	461c      	movge	r4, r3
 800ee5a:	2500      	movge	r5, #0
 800ee5c:	2501      	movlt	r5, #1
 800ee5e:	f7ff fcf7 	bl	800e850 <_Balloc>
 800ee62:	4602      	mov	r2, r0
 800ee64:	b918      	cbnz	r0, 800ee6e <__mdiff+0x5e>
 800ee66:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ee6a:	4b2f      	ldr	r3, [pc, #188]	; (800ef28 <__mdiff+0x118>)
 800ee6c:	e7e4      	b.n	800ee38 <__mdiff+0x28>
 800ee6e:	f100 0814 	add.w	r8, r0, #20
 800ee72:	f8da 7010 	ldr.w	r7, [sl, #16]
 800ee76:	60c5      	str	r5, [r0, #12]
 800ee78:	f04f 0c00 	mov.w	ip, #0
 800ee7c:	f10a 0514 	add.w	r5, sl, #20
 800ee80:	f10a 0010 	add.w	r0, sl, #16
 800ee84:	46c2      	mov	sl, r8
 800ee86:	6926      	ldr	r6, [r4, #16]
 800ee88:	f104 0914 	add.w	r9, r4, #20
 800ee8c:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800ee90:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ee94:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800ee98:	f859 3b04 	ldr.w	r3, [r9], #4
 800ee9c:	fa1f f18b 	uxth.w	r1, fp
 800eea0:	4461      	add	r1, ip
 800eea2:	fa1f fc83 	uxth.w	ip, r3
 800eea6:	0c1b      	lsrs	r3, r3, #16
 800eea8:	eba1 010c 	sub.w	r1, r1, ip
 800eeac:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800eeb0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800eeb4:	b289      	uxth	r1, r1
 800eeb6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800eeba:	454e      	cmp	r6, r9
 800eebc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800eec0:	f84a 3b04 	str.w	r3, [sl], #4
 800eec4:	d8e6      	bhi.n	800ee94 <__mdiff+0x84>
 800eec6:	1b33      	subs	r3, r6, r4
 800eec8:	3b15      	subs	r3, #21
 800eeca:	f023 0303 	bic.w	r3, r3, #3
 800eece:	3415      	adds	r4, #21
 800eed0:	3304      	adds	r3, #4
 800eed2:	42a6      	cmp	r6, r4
 800eed4:	bf38      	it	cc
 800eed6:	2304      	movcc	r3, #4
 800eed8:	441d      	add	r5, r3
 800eeda:	4443      	add	r3, r8
 800eedc:	461e      	mov	r6, r3
 800eede:	462c      	mov	r4, r5
 800eee0:	4574      	cmp	r4, lr
 800eee2:	d30e      	bcc.n	800ef02 <__mdiff+0xf2>
 800eee4:	f10e 0103 	add.w	r1, lr, #3
 800eee8:	1b49      	subs	r1, r1, r5
 800eeea:	f021 0103 	bic.w	r1, r1, #3
 800eeee:	3d03      	subs	r5, #3
 800eef0:	45ae      	cmp	lr, r5
 800eef2:	bf38      	it	cc
 800eef4:	2100      	movcc	r1, #0
 800eef6:	4419      	add	r1, r3
 800eef8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800eefc:	b18b      	cbz	r3, 800ef22 <__mdiff+0x112>
 800eefe:	6117      	str	r7, [r2, #16]
 800ef00:	e7a0      	b.n	800ee44 <__mdiff+0x34>
 800ef02:	f854 8b04 	ldr.w	r8, [r4], #4
 800ef06:	fa1f f188 	uxth.w	r1, r8
 800ef0a:	4461      	add	r1, ip
 800ef0c:	1408      	asrs	r0, r1, #16
 800ef0e:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800ef12:	b289      	uxth	r1, r1
 800ef14:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ef18:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ef1c:	f846 1b04 	str.w	r1, [r6], #4
 800ef20:	e7de      	b.n	800eee0 <__mdiff+0xd0>
 800ef22:	3f01      	subs	r7, #1
 800ef24:	e7e8      	b.n	800eef8 <__mdiff+0xe8>
 800ef26:	bf00      	nop
 800ef28:	080112c4 	.word	0x080112c4
 800ef2c:	080113b8 	.word	0x080113b8

0800ef30 <__ulp>:
 800ef30:	4b11      	ldr	r3, [pc, #68]	; (800ef78 <__ulp+0x48>)
 800ef32:	400b      	ands	r3, r1
 800ef34:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	dd02      	ble.n	800ef42 <__ulp+0x12>
 800ef3c:	2000      	movs	r0, #0
 800ef3e:	4619      	mov	r1, r3
 800ef40:	4770      	bx	lr
 800ef42:	425b      	negs	r3, r3
 800ef44:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800ef48:	f04f 0000 	mov.w	r0, #0
 800ef4c:	f04f 0100 	mov.w	r1, #0
 800ef50:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ef54:	da04      	bge.n	800ef60 <__ulp+0x30>
 800ef56:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ef5a:	fa43 f102 	asr.w	r1, r3, r2
 800ef5e:	4770      	bx	lr
 800ef60:	f1a2 0314 	sub.w	r3, r2, #20
 800ef64:	2b1e      	cmp	r3, #30
 800ef66:	bfd6      	itet	le
 800ef68:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800ef6c:	2301      	movgt	r3, #1
 800ef6e:	fa22 f303 	lsrle.w	r3, r2, r3
 800ef72:	4618      	mov	r0, r3
 800ef74:	4770      	bx	lr
 800ef76:	bf00      	nop
 800ef78:	7ff00000 	.word	0x7ff00000

0800ef7c <__b2d>:
 800ef7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ef80:	6907      	ldr	r7, [r0, #16]
 800ef82:	f100 0914 	add.w	r9, r0, #20
 800ef86:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800ef8a:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800ef8e:	f1a7 0804 	sub.w	r8, r7, #4
 800ef92:	4630      	mov	r0, r6
 800ef94:	f7ff fd52 	bl	800ea3c <__hi0bits>
 800ef98:	f1c0 0320 	rsb	r3, r0, #32
 800ef9c:	280a      	cmp	r0, #10
 800ef9e:	600b      	str	r3, [r1, #0]
 800efa0:	491f      	ldr	r1, [pc, #124]	; (800f020 <__b2d+0xa4>)
 800efa2:	dc17      	bgt.n	800efd4 <__b2d+0x58>
 800efa4:	45c1      	cmp	r9, r8
 800efa6:	bf28      	it	cs
 800efa8:	2200      	movcs	r2, #0
 800efaa:	f1c0 0c0b 	rsb	ip, r0, #11
 800efae:	fa26 f30c 	lsr.w	r3, r6, ip
 800efb2:	bf38      	it	cc
 800efb4:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800efb8:	ea43 0501 	orr.w	r5, r3, r1
 800efbc:	f100 0315 	add.w	r3, r0, #21
 800efc0:	fa06 f303 	lsl.w	r3, r6, r3
 800efc4:	fa22 f20c 	lsr.w	r2, r2, ip
 800efc8:	ea43 0402 	orr.w	r4, r3, r2
 800efcc:	4620      	mov	r0, r4
 800efce:	4629      	mov	r1, r5
 800efd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800efd4:	45c1      	cmp	r9, r8
 800efd6:	bf2e      	itee	cs
 800efd8:	2200      	movcs	r2, #0
 800efda:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800efde:	f1a7 0808 	subcc.w	r8, r7, #8
 800efe2:	f1b0 030b 	subs.w	r3, r0, #11
 800efe6:	d016      	beq.n	800f016 <__b2d+0x9a>
 800efe8:	f1c3 0720 	rsb	r7, r3, #32
 800efec:	fa22 f107 	lsr.w	r1, r2, r7
 800eff0:	45c8      	cmp	r8, r9
 800eff2:	fa06 f603 	lsl.w	r6, r6, r3
 800eff6:	ea46 0601 	orr.w	r6, r6, r1
 800effa:	bf94      	ite	ls
 800effc:	2100      	movls	r1, #0
 800effe:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800f002:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800f006:	fa02 f003 	lsl.w	r0, r2, r3
 800f00a:	40f9      	lsrs	r1, r7
 800f00c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800f010:	ea40 0401 	orr.w	r4, r0, r1
 800f014:	e7da      	b.n	800efcc <__b2d+0x50>
 800f016:	4614      	mov	r4, r2
 800f018:	ea46 0501 	orr.w	r5, r6, r1
 800f01c:	e7d6      	b.n	800efcc <__b2d+0x50>
 800f01e:	bf00      	nop
 800f020:	3ff00000 	.word	0x3ff00000

0800f024 <__d2b>:
 800f024:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800f028:	2101      	movs	r1, #1
 800f02a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800f02e:	4690      	mov	r8, r2
 800f030:	461d      	mov	r5, r3
 800f032:	f7ff fc0d 	bl	800e850 <_Balloc>
 800f036:	4604      	mov	r4, r0
 800f038:	b930      	cbnz	r0, 800f048 <__d2b+0x24>
 800f03a:	4602      	mov	r2, r0
 800f03c:	f240 310a 	movw	r1, #778	; 0x30a
 800f040:	4b24      	ldr	r3, [pc, #144]	; (800f0d4 <__d2b+0xb0>)
 800f042:	4825      	ldr	r0, [pc, #148]	; (800f0d8 <__d2b+0xb4>)
 800f044:	f000 fcba 	bl	800f9bc <__assert_func>
 800f048:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800f04c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800f050:	bb2d      	cbnz	r5, 800f09e <__d2b+0x7a>
 800f052:	9301      	str	r3, [sp, #4]
 800f054:	f1b8 0300 	subs.w	r3, r8, #0
 800f058:	d026      	beq.n	800f0a8 <__d2b+0x84>
 800f05a:	4668      	mov	r0, sp
 800f05c:	9300      	str	r3, [sp, #0]
 800f05e:	f7ff fd0d 	bl	800ea7c <__lo0bits>
 800f062:	9900      	ldr	r1, [sp, #0]
 800f064:	b1f0      	cbz	r0, 800f0a4 <__d2b+0x80>
 800f066:	9a01      	ldr	r2, [sp, #4]
 800f068:	f1c0 0320 	rsb	r3, r0, #32
 800f06c:	fa02 f303 	lsl.w	r3, r2, r3
 800f070:	430b      	orrs	r3, r1
 800f072:	40c2      	lsrs	r2, r0
 800f074:	6163      	str	r3, [r4, #20]
 800f076:	9201      	str	r2, [sp, #4]
 800f078:	9b01      	ldr	r3, [sp, #4]
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	bf14      	ite	ne
 800f07e:	2102      	movne	r1, #2
 800f080:	2101      	moveq	r1, #1
 800f082:	61a3      	str	r3, [r4, #24]
 800f084:	6121      	str	r1, [r4, #16]
 800f086:	b1c5      	cbz	r5, 800f0ba <__d2b+0x96>
 800f088:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f08c:	4405      	add	r5, r0
 800f08e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f092:	603d      	str	r5, [r7, #0]
 800f094:	6030      	str	r0, [r6, #0]
 800f096:	4620      	mov	r0, r4
 800f098:	b002      	add	sp, #8
 800f09a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f09e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f0a2:	e7d6      	b.n	800f052 <__d2b+0x2e>
 800f0a4:	6161      	str	r1, [r4, #20]
 800f0a6:	e7e7      	b.n	800f078 <__d2b+0x54>
 800f0a8:	a801      	add	r0, sp, #4
 800f0aa:	f7ff fce7 	bl	800ea7c <__lo0bits>
 800f0ae:	2101      	movs	r1, #1
 800f0b0:	9b01      	ldr	r3, [sp, #4]
 800f0b2:	6121      	str	r1, [r4, #16]
 800f0b4:	6163      	str	r3, [r4, #20]
 800f0b6:	3020      	adds	r0, #32
 800f0b8:	e7e5      	b.n	800f086 <__d2b+0x62>
 800f0ba:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800f0be:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f0c2:	6038      	str	r0, [r7, #0]
 800f0c4:	6918      	ldr	r0, [r3, #16]
 800f0c6:	f7ff fcb9 	bl	800ea3c <__hi0bits>
 800f0ca:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800f0ce:	6031      	str	r1, [r6, #0]
 800f0d0:	e7e1      	b.n	800f096 <__d2b+0x72>
 800f0d2:	bf00      	nop
 800f0d4:	080112c4 	.word	0x080112c4
 800f0d8:	080113b8 	.word	0x080113b8

0800f0dc <__ratio>:
 800f0dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0e0:	4688      	mov	r8, r1
 800f0e2:	4669      	mov	r1, sp
 800f0e4:	4681      	mov	r9, r0
 800f0e6:	f7ff ff49 	bl	800ef7c <__b2d>
 800f0ea:	460f      	mov	r7, r1
 800f0ec:	4604      	mov	r4, r0
 800f0ee:	460d      	mov	r5, r1
 800f0f0:	4640      	mov	r0, r8
 800f0f2:	a901      	add	r1, sp, #4
 800f0f4:	f7ff ff42 	bl	800ef7c <__b2d>
 800f0f8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f0fc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f100:	468b      	mov	fp, r1
 800f102:	eba3 0c02 	sub.w	ip, r3, r2
 800f106:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f10a:	1a9b      	subs	r3, r3, r2
 800f10c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800f110:	2b00      	cmp	r3, #0
 800f112:	bfd5      	itete	le
 800f114:	460a      	movle	r2, r1
 800f116:	462a      	movgt	r2, r5
 800f118:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f11c:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f120:	bfd8      	it	le
 800f122:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800f126:	465b      	mov	r3, fp
 800f128:	4602      	mov	r2, r0
 800f12a:	4639      	mov	r1, r7
 800f12c:	4620      	mov	r0, r4
 800f12e:	f7f1 fb69 	bl	8000804 <__aeabi_ddiv>
 800f132:	b003      	add	sp, #12
 800f134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f138 <__copybits>:
 800f138:	3901      	subs	r1, #1
 800f13a:	b570      	push	{r4, r5, r6, lr}
 800f13c:	1149      	asrs	r1, r1, #5
 800f13e:	6914      	ldr	r4, [r2, #16]
 800f140:	3101      	adds	r1, #1
 800f142:	f102 0314 	add.w	r3, r2, #20
 800f146:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f14a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f14e:	1f05      	subs	r5, r0, #4
 800f150:	42a3      	cmp	r3, r4
 800f152:	d30c      	bcc.n	800f16e <__copybits+0x36>
 800f154:	1aa3      	subs	r3, r4, r2
 800f156:	3b11      	subs	r3, #17
 800f158:	f023 0303 	bic.w	r3, r3, #3
 800f15c:	3211      	adds	r2, #17
 800f15e:	42a2      	cmp	r2, r4
 800f160:	bf88      	it	hi
 800f162:	2300      	movhi	r3, #0
 800f164:	4418      	add	r0, r3
 800f166:	2300      	movs	r3, #0
 800f168:	4288      	cmp	r0, r1
 800f16a:	d305      	bcc.n	800f178 <__copybits+0x40>
 800f16c:	bd70      	pop	{r4, r5, r6, pc}
 800f16e:	f853 6b04 	ldr.w	r6, [r3], #4
 800f172:	f845 6f04 	str.w	r6, [r5, #4]!
 800f176:	e7eb      	b.n	800f150 <__copybits+0x18>
 800f178:	f840 3b04 	str.w	r3, [r0], #4
 800f17c:	e7f4      	b.n	800f168 <__copybits+0x30>

0800f17e <__any_on>:
 800f17e:	f100 0214 	add.w	r2, r0, #20
 800f182:	6900      	ldr	r0, [r0, #16]
 800f184:	114b      	asrs	r3, r1, #5
 800f186:	4298      	cmp	r0, r3
 800f188:	b510      	push	{r4, lr}
 800f18a:	db11      	blt.n	800f1b0 <__any_on+0x32>
 800f18c:	dd0a      	ble.n	800f1a4 <__any_on+0x26>
 800f18e:	f011 011f 	ands.w	r1, r1, #31
 800f192:	d007      	beq.n	800f1a4 <__any_on+0x26>
 800f194:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f198:	fa24 f001 	lsr.w	r0, r4, r1
 800f19c:	fa00 f101 	lsl.w	r1, r0, r1
 800f1a0:	428c      	cmp	r4, r1
 800f1a2:	d10b      	bne.n	800f1bc <__any_on+0x3e>
 800f1a4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f1a8:	4293      	cmp	r3, r2
 800f1aa:	d803      	bhi.n	800f1b4 <__any_on+0x36>
 800f1ac:	2000      	movs	r0, #0
 800f1ae:	bd10      	pop	{r4, pc}
 800f1b0:	4603      	mov	r3, r0
 800f1b2:	e7f7      	b.n	800f1a4 <__any_on+0x26>
 800f1b4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f1b8:	2900      	cmp	r1, #0
 800f1ba:	d0f5      	beq.n	800f1a8 <__any_on+0x2a>
 800f1bc:	2001      	movs	r0, #1
 800f1be:	e7f6      	b.n	800f1ae <__any_on+0x30>

0800f1c0 <_calloc_r>:
 800f1c0:	b538      	push	{r3, r4, r5, lr}
 800f1c2:	fb02 f501 	mul.w	r5, r2, r1
 800f1c6:	4629      	mov	r1, r5
 800f1c8:	f7fc fbe6 	bl	800b998 <_malloc_r>
 800f1cc:	4604      	mov	r4, r0
 800f1ce:	b118      	cbz	r0, 800f1d8 <_calloc_r+0x18>
 800f1d0:	462a      	mov	r2, r5
 800f1d2:	2100      	movs	r1, #0
 800f1d4:	f7fc fb8c 	bl	800b8f0 <memset>
 800f1d8:	4620      	mov	r0, r4
 800f1da:	bd38      	pop	{r3, r4, r5, pc}

0800f1dc <__ssputs_r>:
 800f1dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f1e0:	688e      	ldr	r6, [r1, #8]
 800f1e2:	4682      	mov	sl, r0
 800f1e4:	429e      	cmp	r6, r3
 800f1e6:	460c      	mov	r4, r1
 800f1e8:	4690      	mov	r8, r2
 800f1ea:	461f      	mov	r7, r3
 800f1ec:	d838      	bhi.n	800f260 <__ssputs_r+0x84>
 800f1ee:	898a      	ldrh	r2, [r1, #12]
 800f1f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f1f4:	d032      	beq.n	800f25c <__ssputs_r+0x80>
 800f1f6:	6825      	ldr	r5, [r4, #0]
 800f1f8:	6909      	ldr	r1, [r1, #16]
 800f1fa:	3301      	adds	r3, #1
 800f1fc:	eba5 0901 	sub.w	r9, r5, r1
 800f200:	6965      	ldr	r5, [r4, #20]
 800f202:	444b      	add	r3, r9
 800f204:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f208:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f20c:	106d      	asrs	r5, r5, #1
 800f20e:	429d      	cmp	r5, r3
 800f210:	bf38      	it	cc
 800f212:	461d      	movcc	r5, r3
 800f214:	0553      	lsls	r3, r2, #21
 800f216:	d531      	bpl.n	800f27c <__ssputs_r+0xa0>
 800f218:	4629      	mov	r1, r5
 800f21a:	f7fc fbbd 	bl	800b998 <_malloc_r>
 800f21e:	4606      	mov	r6, r0
 800f220:	b950      	cbnz	r0, 800f238 <__ssputs_r+0x5c>
 800f222:	230c      	movs	r3, #12
 800f224:	f04f 30ff 	mov.w	r0, #4294967295
 800f228:	f8ca 3000 	str.w	r3, [sl]
 800f22c:	89a3      	ldrh	r3, [r4, #12]
 800f22e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f232:	81a3      	strh	r3, [r4, #12]
 800f234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f238:	464a      	mov	r2, r9
 800f23a:	6921      	ldr	r1, [r4, #16]
 800f23c:	f7ff faed 	bl	800e81a <memcpy>
 800f240:	89a3      	ldrh	r3, [r4, #12]
 800f242:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f246:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f24a:	81a3      	strh	r3, [r4, #12]
 800f24c:	6126      	str	r6, [r4, #16]
 800f24e:	444e      	add	r6, r9
 800f250:	6026      	str	r6, [r4, #0]
 800f252:	463e      	mov	r6, r7
 800f254:	6165      	str	r5, [r4, #20]
 800f256:	eba5 0509 	sub.w	r5, r5, r9
 800f25a:	60a5      	str	r5, [r4, #8]
 800f25c:	42be      	cmp	r6, r7
 800f25e:	d900      	bls.n	800f262 <__ssputs_r+0x86>
 800f260:	463e      	mov	r6, r7
 800f262:	4632      	mov	r2, r6
 800f264:	4641      	mov	r1, r8
 800f266:	6820      	ldr	r0, [r4, #0]
 800f268:	f000 fd20 	bl	800fcac <memmove>
 800f26c:	68a3      	ldr	r3, [r4, #8]
 800f26e:	6822      	ldr	r2, [r4, #0]
 800f270:	1b9b      	subs	r3, r3, r6
 800f272:	4432      	add	r2, r6
 800f274:	2000      	movs	r0, #0
 800f276:	60a3      	str	r3, [r4, #8]
 800f278:	6022      	str	r2, [r4, #0]
 800f27a:	e7db      	b.n	800f234 <__ssputs_r+0x58>
 800f27c:	462a      	mov	r2, r5
 800f27e:	f000 fd2f 	bl	800fce0 <_realloc_r>
 800f282:	4606      	mov	r6, r0
 800f284:	2800      	cmp	r0, #0
 800f286:	d1e1      	bne.n	800f24c <__ssputs_r+0x70>
 800f288:	4650      	mov	r0, sl
 800f28a:	6921      	ldr	r1, [r4, #16]
 800f28c:	f7fc fb38 	bl	800b900 <_free_r>
 800f290:	e7c7      	b.n	800f222 <__ssputs_r+0x46>
	...

0800f294 <_svfiprintf_r>:
 800f294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f298:	4698      	mov	r8, r3
 800f29a:	898b      	ldrh	r3, [r1, #12]
 800f29c:	4607      	mov	r7, r0
 800f29e:	061b      	lsls	r3, r3, #24
 800f2a0:	460d      	mov	r5, r1
 800f2a2:	4614      	mov	r4, r2
 800f2a4:	b09d      	sub	sp, #116	; 0x74
 800f2a6:	d50e      	bpl.n	800f2c6 <_svfiprintf_r+0x32>
 800f2a8:	690b      	ldr	r3, [r1, #16]
 800f2aa:	b963      	cbnz	r3, 800f2c6 <_svfiprintf_r+0x32>
 800f2ac:	2140      	movs	r1, #64	; 0x40
 800f2ae:	f7fc fb73 	bl	800b998 <_malloc_r>
 800f2b2:	6028      	str	r0, [r5, #0]
 800f2b4:	6128      	str	r0, [r5, #16]
 800f2b6:	b920      	cbnz	r0, 800f2c2 <_svfiprintf_r+0x2e>
 800f2b8:	230c      	movs	r3, #12
 800f2ba:	603b      	str	r3, [r7, #0]
 800f2bc:	f04f 30ff 	mov.w	r0, #4294967295
 800f2c0:	e0d1      	b.n	800f466 <_svfiprintf_r+0x1d2>
 800f2c2:	2340      	movs	r3, #64	; 0x40
 800f2c4:	616b      	str	r3, [r5, #20]
 800f2c6:	2300      	movs	r3, #0
 800f2c8:	9309      	str	r3, [sp, #36]	; 0x24
 800f2ca:	2320      	movs	r3, #32
 800f2cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f2d0:	2330      	movs	r3, #48	; 0x30
 800f2d2:	f04f 0901 	mov.w	r9, #1
 800f2d6:	f8cd 800c 	str.w	r8, [sp, #12]
 800f2da:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800f480 <_svfiprintf_r+0x1ec>
 800f2de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f2e2:	4623      	mov	r3, r4
 800f2e4:	469a      	mov	sl, r3
 800f2e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f2ea:	b10a      	cbz	r2, 800f2f0 <_svfiprintf_r+0x5c>
 800f2ec:	2a25      	cmp	r2, #37	; 0x25
 800f2ee:	d1f9      	bne.n	800f2e4 <_svfiprintf_r+0x50>
 800f2f0:	ebba 0b04 	subs.w	fp, sl, r4
 800f2f4:	d00b      	beq.n	800f30e <_svfiprintf_r+0x7a>
 800f2f6:	465b      	mov	r3, fp
 800f2f8:	4622      	mov	r2, r4
 800f2fa:	4629      	mov	r1, r5
 800f2fc:	4638      	mov	r0, r7
 800f2fe:	f7ff ff6d 	bl	800f1dc <__ssputs_r>
 800f302:	3001      	adds	r0, #1
 800f304:	f000 80aa 	beq.w	800f45c <_svfiprintf_r+0x1c8>
 800f308:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f30a:	445a      	add	r2, fp
 800f30c:	9209      	str	r2, [sp, #36]	; 0x24
 800f30e:	f89a 3000 	ldrb.w	r3, [sl]
 800f312:	2b00      	cmp	r3, #0
 800f314:	f000 80a2 	beq.w	800f45c <_svfiprintf_r+0x1c8>
 800f318:	2300      	movs	r3, #0
 800f31a:	f04f 32ff 	mov.w	r2, #4294967295
 800f31e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f322:	f10a 0a01 	add.w	sl, sl, #1
 800f326:	9304      	str	r3, [sp, #16]
 800f328:	9307      	str	r3, [sp, #28]
 800f32a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f32e:	931a      	str	r3, [sp, #104]	; 0x68
 800f330:	4654      	mov	r4, sl
 800f332:	2205      	movs	r2, #5
 800f334:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f338:	4851      	ldr	r0, [pc, #324]	; (800f480 <_svfiprintf_r+0x1ec>)
 800f33a:	f7ff fa60 	bl	800e7fe <memchr>
 800f33e:	9a04      	ldr	r2, [sp, #16]
 800f340:	b9d8      	cbnz	r0, 800f37a <_svfiprintf_r+0xe6>
 800f342:	06d0      	lsls	r0, r2, #27
 800f344:	bf44      	itt	mi
 800f346:	2320      	movmi	r3, #32
 800f348:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f34c:	0711      	lsls	r1, r2, #28
 800f34e:	bf44      	itt	mi
 800f350:	232b      	movmi	r3, #43	; 0x2b
 800f352:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f356:	f89a 3000 	ldrb.w	r3, [sl]
 800f35a:	2b2a      	cmp	r3, #42	; 0x2a
 800f35c:	d015      	beq.n	800f38a <_svfiprintf_r+0xf6>
 800f35e:	4654      	mov	r4, sl
 800f360:	2000      	movs	r0, #0
 800f362:	f04f 0c0a 	mov.w	ip, #10
 800f366:	9a07      	ldr	r2, [sp, #28]
 800f368:	4621      	mov	r1, r4
 800f36a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f36e:	3b30      	subs	r3, #48	; 0x30
 800f370:	2b09      	cmp	r3, #9
 800f372:	d94e      	bls.n	800f412 <_svfiprintf_r+0x17e>
 800f374:	b1b0      	cbz	r0, 800f3a4 <_svfiprintf_r+0x110>
 800f376:	9207      	str	r2, [sp, #28]
 800f378:	e014      	b.n	800f3a4 <_svfiprintf_r+0x110>
 800f37a:	eba0 0308 	sub.w	r3, r0, r8
 800f37e:	fa09 f303 	lsl.w	r3, r9, r3
 800f382:	4313      	orrs	r3, r2
 800f384:	46a2      	mov	sl, r4
 800f386:	9304      	str	r3, [sp, #16]
 800f388:	e7d2      	b.n	800f330 <_svfiprintf_r+0x9c>
 800f38a:	9b03      	ldr	r3, [sp, #12]
 800f38c:	1d19      	adds	r1, r3, #4
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	9103      	str	r1, [sp, #12]
 800f392:	2b00      	cmp	r3, #0
 800f394:	bfbb      	ittet	lt
 800f396:	425b      	neglt	r3, r3
 800f398:	f042 0202 	orrlt.w	r2, r2, #2
 800f39c:	9307      	strge	r3, [sp, #28]
 800f39e:	9307      	strlt	r3, [sp, #28]
 800f3a0:	bfb8      	it	lt
 800f3a2:	9204      	strlt	r2, [sp, #16]
 800f3a4:	7823      	ldrb	r3, [r4, #0]
 800f3a6:	2b2e      	cmp	r3, #46	; 0x2e
 800f3a8:	d10c      	bne.n	800f3c4 <_svfiprintf_r+0x130>
 800f3aa:	7863      	ldrb	r3, [r4, #1]
 800f3ac:	2b2a      	cmp	r3, #42	; 0x2a
 800f3ae:	d135      	bne.n	800f41c <_svfiprintf_r+0x188>
 800f3b0:	9b03      	ldr	r3, [sp, #12]
 800f3b2:	3402      	adds	r4, #2
 800f3b4:	1d1a      	adds	r2, r3, #4
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	9203      	str	r2, [sp, #12]
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	bfb8      	it	lt
 800f3be:	f04f 33ff 	movlt.w	r3, #4294967295
 800f3c2:	9305      	str	r3, [sp, #20]
 800f3c4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f490 <_svfiprintf_r+0x1fc>
 800f3c8:	2203      	movs	r2, #3
 800f3ca:	4650      	mov	r0, sl
 800f3cc:	7821      	ldrb	r1, [r4, #0]
 800f3ce:	f7ff fa16 	bl	800e7fe <memchr>
 800f3d2:	b140      	cbz	r0, 800f3e6 <_svfiprintf_r+0x152>
 800f3d4:	2340      	movs	r3, #64	; 0x40
 800f3d6:	eba0 000a 	sub.w	r0, r0, sl
 800f3da:	fa03 f000 	lsl.w	r0, r3, r0
 800f3de:	9b04      	ldr	r3, [sp, #16]
 800f3e0:	3401      	adds	r4, #1
 800f3e2:	4303      	orrs	r3, r0
 800f3e4:	9304      	str	r3, [sp, #16]
 800f3e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f3ea:	2206      	movs	r2, #6
 800f3ec:	4825      	ldr	r0, [pc, #148]	; (800f484 <_svfiprintf_r+0x1f0>)
 800f3ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f3f2:	f7ff fa04 	bl	800e7fe <memchr>
 800f3f6:	2800      	cmp	r0, #0
 800f3f8:	d038      	beq.n	800f46c <_svfiprintf_r+0x1d8>
 800f3fa:	4b23      	ldr	r3, [pc, #140]	; (800f488 <_svfiprintf_r+0x1f4>)
 800f3fc:	bb1b      	cbnz	r3, 800f446 <_svfiprintf_r+0x1b2>
 800f3fe:	9b03      	ldr	r3, [sp, #12]
 800f400:	3307      	adds	r3, #7
 800f402:	f023 0307 	bic.w	r3, r3, #7
 800f406:	3308      	adds	r3, #8
 800f408:	9303      	str	r3, [sp, #12]
 800f40a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f40c:	4433      	add	r3, r6
 800f40e:	9309      	str	r3, [sp, #36]	; 0x24
 800f410:	e767      	b.n	800f2e2 <_svfiprintf_r+0x4e>
 800f412:	460c      	mov	r4, r1
 800f414:	2001      	movs	r0, #1
 800f416:	fb0c 3202 	mla	r2, ip, r2, r3
 800f41a:	e7a5      	b.n	800f368 <_svfiprintf_r+0xd4>
 800f41c:	2300      	movs	r3, #0
 800f41e:	f04f 0c0a 	mov.w	ip, #10
 800f422:	4619      	mov	r1, r3
 800f424:	3401      	adds	r4, #1
 800f426:	9305      	str	r3, [sp, #20]
 800f428:	4620      	mov	r0, r4
 800f42a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f42e:	3a30      	subs	r2, #48	; 0x30
 800f430:	2a09      	cmp	r2, #9
 800f432:	d903      	bls.n	800f43c <_svfiprintf_r+0x1a8>
 800f434:	2b00      	cmp	r3, #0
 800f436:	d0c5      	beq.n	800f3c4 <_svfiprintf_r+0x130>
 800f438:	9105      	str	r1, [sp, #20]
 800f43a:	e7c3      	b.n	800f3c4 <_svfiprintf_r+0x130>
 800f43c:	4604      	mov	r4, r0
 800f43e:	2301      	movs	r3, #1
 800f440:	fb0c 2101 	mla	r1, ip, r1, r2
 800f444:	e7f0      	b.n	800f428 <_svfiprintf_r+0x194>
 800f446:	ab03      	add	r3, sp, #12
 800f448:	9300      	str	r3, [sp, #0]
 800f44a:	462a      	mov	r2, r5
 800f44c:	4638      	mov	r0, r7
 800f44e:	4b0f      	ldr	r3, [pc, #60]	; (800f48c <_svfiprintf_r+0x1f8>)
 800f450:	a904      	add	r1, sp, #16
 800f452:	f7fc fb99 	bl	800bb88 <_printf_float>
 800f456:	1c42      	adds	r2, r0, #1
 800f458:	4606      	mov	r6, r0
 800f45a:	d1d6      	bne.n	800f40a <_svfiprintf_r+0x176>
 800f45c:	89ab      	ldrh	r3, [r5, #12]
 800f45e:	065b      	lsls	r3, r3, #25
 800f460:	f53f af2c 	bmi.w	800f2bc <_svfiprintf_r+0x28>
 800f464:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f466:	b01d      	add	sp, #116	; 0x74
 800f468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f46c:	ab03      	add	r3, sp, #12
 800f46e:	9300      	str	r3, [sp, #0]
 800f470:	462a      	mov	r2, r5
 800f472:	4638      	mov	r0, r7
 800f474:	4b05      	ldr	r3, [pc, #20]	; (800f48c <_svfiprintf_r+0x1f8>)
 800f476:	a904      	add	r1, sp, #16
 800f478:	f7fc fe22 	bl	800c0c0 <_printf_i>
 800f47c:	e7eb      	b.n	800f456 <_svfiprintf_r+0x1c2>
 800f47e:	bf00      	nop
 800f480:	08011514 	.word	0x08011514
 800f484:	0801151e 	.word	0x0801151e
 800f488:	0800bb89 	.word	0x0800bb89
 800f48c:	0800f1dd 	.word	0x0800f1dd
 800f490:	0801151a 	.word	0x0801151a

0800f494 <__sfputc_r>:
 800f494:	6893      	ldr	r3, [r2, #8]
 800f496:	b410      	push	{r4}
 800f498:	3b01      	subs	r3, #1
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	6093      	str	r3, [r2, #8]
 800f49e:	da07      	bge.n	800f4b0 <__sfputc_r+0x1c>
 800f4a0:	6994      	ldr	r4, [r2, #24]
 800f4a2:	42a3      	cmp	r3, r4
 800f4a4:	db01      	blt.n	800f4aa <__sfputc_r+0x16>
 800f4a6:	290a      	cmp	r1, #10
 800f4a8:	d102      	bne.n	800f4b0 <__sfputc_r+0x1c>
 800f4aa:	bc10      	pop	{r4}
 800f4ac:	f000 b9a6 	b.w	800f7fc <__swbuf_r>
 800f4b0:	6813      	ldr	r3, [r2, #0]
 800f4b2:	1c58      	adds	r0, r3, #1
 800f4b4:	6010      	str	r0, [r2, #0]
 800f4b6:	7019      	strb	r1, [r3, #0]
 800f4b8:	4608      	mov	r0, r1
 800f4ba:	bc10      	pop	{r4}
 800f4bc:	4770      	bx	lr

0800f4be <__sfputs_r>:
 800f4be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4c0:	4606      	mov	r6, r0
 800f4c2:	460f      	mov	r7, r1
 800f4c4:	4614      	mov	r4, r2
 800f4c6:	18d5      	adds	r5, r2, r3
 800f4c8:	42ac      	cmp	r4, r5
 800f4ca:	d101      	bne.n	800f4d0 <__sfputs_r+0x12>
 800f4cc:	2000      	movs	r0, #0
 800f4ce:	e007      	b.n	800f4e0 <__sfputs_r+0x22>
 800f4d0:	463a      	mov	r2, r7
 800f4d2:	4630      	mov	r0, r6
 800f4d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f4d8:	f7ff ffdc 	bl	800f494 <__sfputc_r>
 800f4dc:	1c43      	adds	r3, r0, #1
 800f4de:	d1f3      	bne.n	800f4c8 <__sfputs_r+0xa>
 800f4e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f4e4 <_vfiprintf_r>:
 800f4e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4e8:	460d      	mov	r5, r1
 800f4ea:	4614      	mov	r4, r2
 800f4ec:	4698      	mov	r8, r3
 800f4ee:	4606      	mov	r6, r0
 800f4f0:	b09d      	sub	sp, #116	; 0x74
 800f4f2:	b118      	cbz	r0, 800f4fc <_vfiprintf_r+0x18>
 800f4f4:	6983      	ldr	r3, [r0, #24]
 800f4f6:	b90b      	cbnz	r3, 800f4fc <_vfiprintf_r+0x18>
 800f4f8:	f7fe fd64 	bl	800dfc4 <__sinit>
 800f4fc:	4b89      	ldr	r3, [pc, #548]	; (800f724 <_vfiprintf_r+0x240>)
 800f4fe:	429d      	cmp	r5, r3
 800f500:	d11b      	bne.n	800f53a <_vfiprintf_r+0x56>
 800f502:	6875      	ldr	r5, [r6, #4]
 800f504:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f506:	07d9      	lsls	r1, r3, #31
 800f508:	d405      	bmi.n	800f516 <_vfiprintf_r+0x32>
 800f50a:	89ab      	ldrh	r3, [r5, #12]
 800f50c:	059a      	lsls	r2, r3, #22
 800f50e:	d402      	bmi.n	800f516 <_vfiprintf_r+0x32>
 800f510:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f512:	f7ff f960 	bl	800e7d6 <__retarget_lock_acquire_recursive>
 800f516:	89ab      	ldrh	r3, [r5, #12]
 800f518:	071b      	lsls	r3, r3, #28
 800f51a:	d501      	bpl.n	800f520 <_vfiprintf_r+0x3c>
 800f51c:	692b      	ldr	r3, [r5, #16]
 800f51e:	b9eb      	cbnz	r3, 800f55c <_vfiprintf_r+0x78>
 800f520:	4629      	mov	r1, r5
 800f522:	4630      	mov	r0, r6
 800f524:	f000 f9dc 	bl	800f8e0 <__swsetup_r>
 800f528:	b1c0      	cbz	r0, 800f55c <_vfiprintf_r+0x78>
 800f52a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f52c:	07dc      	lsls	r4, r3, #31
 800f52e:	d50e      	bpl.n	800f54e <_vfiprintf_r+0x6a>
 800f530:	f04f 30ff 	mov.w	r0, #4294967295
 800f534:	b01d      	add	sp, #116	; 0x74
 800f536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f53a:	4b7b      	ldr	r3, [pc, #492]	; (800f728 <_vfiprintf_r+0x244>)
 800f53c:	429d      	cmp	r5, r3
 800f53e:	d101      	bne.n	800f544 <_vfiprintf_r+0x60>
 800f540:	68b5      	ldr	r5, [r6, #8]
 800f542:	e7df      	b.n	800f504 <_vfiprintf_r+0x20>
 800f544:	4b79      	ldr	r3, [pc, #484]	; (800f72c <_vfiprintf_r+0x248>)
 800f546:	429d      	cmp	r5, r3
 800f548:	bf08      	it	eq
 800f54a:	68f5      	ldreq	r5, [r6, #12]
 800f54c:	e7da      	b.n	800f504 <_vfiprintf_r+0x20>
 800f54e:	89ab      	ldrh	r3, [r5, #12]
 800f550:	0598      	lsls	r0, r3, #22
 800f552:	d4ed      	bmi.n	800f530 <_vfiprintf_r+0x4c>
 800f554:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f556:	f7ff f93f 	bl	800e7d8 <__retarget_lock_release_recursive>
 800f55a:	e7e9      	b.n	800f530 <_vfiprintf_r+0x4c>
 800f55c:	2300      	movs	r3, #0
 800f55e:	9309      	str	r3, [sp, #36]	; 0x24
 800f560:	2320      	movs	r3, #32
 800f562:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f566:	2330      	movs	r3, #48	; 0x30
 800f568:	f04f 0901 	mov.w	r9, #1
 800f56c:	f8cd 800c 	str.w	r8, [sp, #12]
 800f570:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800f730 <_vfiprintf_r+0x24c>
 800f574:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f578:	4623      	mov	r3, r4
 800f57a:	469a      	mov	sl, r3
 800f57c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f580:	b10a      	cbz	r2, 800f586 <_vfiprintf_r+0xa2>
 800f582:	2a25      	cmp	r2, #37	; 0x25
 800f584:	d1f9      	bne.n	800f57a <_vfiprintf_r+0x96>
 800f586:	ebba 0b04 	subs.w	fp, sl, r4
 800f58a:	d00b      	beq.n	800f5a4 <_vfiprintf_r+0xc0>
 800f58c:	465b      	mov	r3, fp
 800f58e:	4622      	mov	r2, r4
 800f590:	4629      	mov	r1, r5
 800f592:	4630      	mov	r0, r6
 800f594:	f7ff ff93 	bl	800f4be <__sfputs_r>
 800f598:	3001      	adds	r0, #1
 800f59a:	f000 80aa 	beq.w	800f6f2 <_vfiprintf_r+0x20e>
 800f59e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f5a0:	445a      	add	r2, fp
 800f5a2:	9209      	str	r2, [sp, #36]	; 0x24
 800f5a4:	f89a 3000 	ldrb.w	r3, [sl]
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	f000 80a2 	beq.w	800f6f2 <_vfiprintf_r+0x20e>
 800f5ae:	2300      	movs	r3, #0
 800f5b0:	f04f 32ff 	mov.w	r2, #4294967295
 800f5b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f5b8:	f10a 0a01 	add.w	sl, sl, #1
 800f5bc:	9304      	str	r3, [sp, #16]
 800f5be:	9307      	str	r3, [sp, #28]
 800f5c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f5c4:	931a      	str	r3, [sp, #104]	; 0x68
 800f5c6:	4654      	mov	r4, sl
 800f5c8:	2205      	movs	r2, #5
 800f5ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f5ce:	4858      	ldr	r0, [pc, #352]	; (800f730 <_vfiprintf_r+0x24c>)
 800f5d0:	f7ff f915 	bl	800e7fe <memchr>
 800f5d4:	9a04      	ldr	r2, [sp, #16]
 800f5d6:	b9d8      	cbnz	r0, 800f610 <_vfiprintf_r+0x12c>
 800f5d8:	06d1      	lsls	r1, r2, #27
 800f5da:	bf44      	itt	mi
 800f5dc:	2320      	movmi	r3, #32
 800f5de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f5e2:	0713      	lsls	r3, r2, #28
 800f5e4:	bf44      	itt	mi
 800f5e6:	232b      	movmi	r3, #43	; 0x2b
 800f5e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f5ec:	f89a 3000 	ldrb.w	r3, [sl]
 800f5f0:	2b2a      	cmp	r3, #42	; 0x2a
 800f5f2:	d015      	beq.n	800f620 <_vfiprintf_r+0x13c>
 800f5f4:	4654      	mov	r4, sl
 800f5f6:	2000      	movs	r0, #0
 800f5f8:	f04f 0c0a 	mov.w	ip, #10
 800f5fc:	9a07      	ldr	r2, [sp, #28]
 800f5fe:	4621      	mov	r1, r4
 800f600:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f604:	3b30      	subs	r3, #48	; 0x30
 800f606:	2b09      	cmp	r3, #9
 800f608:	d94e      	bls.n	800f6a8 <_vfiprintf_r+0x1c4>
 800f60a:	b1b0      	cbz	r0, 800f63a <_vfiprintf_r+0x156>
 800f60c:	9207      	str	r2, [sp, #28]
 800f60e:	e014      	b.n	800f63a <_vfiprintf_r+0x156>
 800f610:	eba0 0308 	sub.w	r3, r0, r8
 800f614:	fa09 f303 	lsl.w	r3, r9, r3
 800f618:	4313      	orrs	r3, r2
 800f61a:	46a2      	mov	sl, r4
 800f61c:	9304      	str	r3, [sp, #16]
 800f61e:	e7d2      	b.n	800f5c6 <_vfiprintf_r+0xe2>
 800f620:	9b03      	ldr	r3, [sp, #12]
 800f622:	1d19      	adds	r1, r3, #4
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	9103      	str	r1, [sp, #12]
 800f628:	2b00      	cmp	r3, #0
 800f62a:	bfbb      	ittet	lt
 800f62c:	425b      	neglt	r3, r3
 800f62e:	f042 0202 	orrlt.w	r2, r2, #2
 800f632:	9307      	strge	r3, [sp, #28]
 800f634:	9307      	strlt	r3, [sp, #28]
 800f636:	bfb8      	it	lt
 800f638:	9204      	strlt	r2, [sp, #16]
 800f63a:	7823      	ldrb	r3, [r4, #0]
 800f63c:	2b2e      	cmp	r3, #46	; 0x2e
 800f63e:	d10c      	bne.n	800f65a <_vfiprintf_r+0x176>
 800f640:	7863      	ldrb	r3, [r4, #1]
 800f642:	2b2a      	cmp	r3, #42	; 0x2a
 800f644:	d135      	bne.n	800f6b2 <_vfiprintf_r+0x1ce>
 800f646:	9b03      	ldr	r3, [sp, #12]
 800f648:	3402      	adds	r4, #2
 800f64a:	1d1a      	adds	r2, r3, #4
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	9203      	str	r2, [sp, #12]
 800f650:	2b00      	cmp	r3, #0
 800f652:	bfb8      	it	lt
 800f654:	f04f 33ff 	movlt.w	r3, #4294967295
 800f658:	9305      	str	r3, [sp, #20]
 800f65a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f740 <_vfiprintf_r+0x25c>
 800f65e:	2203      	movs	r2, #3
 800f660:	4650      	mov	r0, sl
 800f662:	7821      	ldrb	r1, [r4, #0]
 800f664:	f7ff f8cb 	bl	800e7fe <memchr>
 800f668:	b140      	cbz	r0, 800f67c <_vfiprintf_r+0x198>
 800f66a:	2340      	movs	r3, #64	; 0x40
 800f66c:	eba0 000a 	sub.w	r0, r0, sl
 800f670:	fa03 f000 	lsl.w	r0, r3, r0
 800f674:	9b04      	ldr	r3, [sp, #16]
 800f676:	3401      	adds	r4, #1
 800f678:	4303      	orrs	r3, r0
 800f67a:	9304      	str	r3, [sp, #16]
 800f67c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f680:	2206      	movs	r2, #6
 800f682:	482c      	ldr	r0, [pc, #176]	; (800f734 <_vfiprintf_r+0x250>)
 800f684:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f688:	f7ff f8b9 	bl	800e7fe <memchr>
 800f68c:	2800      	cmp	r0, #0
 800f68e:	d03f      	beq.n	800f710 <_vfiprintf_r+0x22c>
 800f690:	4b29      	ldr	r3, [pc, #164]	; (800f738 <_vfiprintf_r+0x254>)
 800f692:	bb1b      	cbnz	r3, 800f6dc <_vfiprintf_r+0x1f8>
 800f694:	9b03      	ldr	r3, [sp, #12]
 800f696:	3307      	adds	r3, #7
 800f698:	f023 0307 	bic.w	r3, r3, #7
 800f69c:	3308      	adds	r3, #8
 800f69e:	9303      	str	r3, [sp, #12]
 800f6a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f6a2:	443b      	add	r3, r7
 800f6a4:	9309      	str	r3, [sp, #36]	; 0x24
 800f6a6:	e767      	b.n	800f578 <_vfiprintf_r+0x94>
 800f6a8:	460c      	mov	r4, r1
 800f6aa:	2001      	movs	r0, #1
 800f6ac:	fb0c 3202 	mla	r2, ip, r2, r3
 800f6b0:	e7a5      	b.n	800f5fe <_vfiprintf_r+0x11a>
 800f6b2:	2300      	movs	r3, #0
 800f6b4:	f04f 0c0a 	mov.w	ip, #10
 800f6b8:	4619      	mov	r1, r3
 800f6ba:	3401      	adds	r4, #1
 800f6bc:	9305      	str	r3, [sp, #20]
 800f6be:	4620      	mov	r0, r4
 800f6c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f6c4:	3a30      	subs	r2, #48	; 0x30
 800f6c6:	2a09      	cmp	r2, #9
 800f6c8:	d903      	bls.n	800f6d2 <_vfiprintf_r+0x1ee>
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d0c5      	beq.n	800f65a <_vfiprintf_r+0x176>
 800f6ce:	9105      	str	r1, [sp, #20]
 800f6d0:	e7c3      	b.n	800f65a <_vfiprintf_r+0x176>
 800f6d2:	4604      	mov	r4, r0
 800f6d4:	2301      	movs	r3, #1
 800f6d6:	fb0c 2101 	mla	r1, ip, r1, r2
 800f6da:	e7f0      	b.n	800f6be <_vfiprintf_r+0x1da>
 800f6dc:	ab03      	add	r3, sp, #12
 800f6de:	9300      	str	r3, [sp, #0]
 800f6e0:	462a      	mov	r2, r5
 800f6e2:	4630      	mov	r0, r6
 800f6e4:	4b15      	ldr	r3, [pc, #84]	; (800f73c <_vfiprintf_r+0x258>)
 800f6e6:	a904      	add	r1, sp, #16
 800f6e8:	f7fc fa4e 	bl	800bb88 <_printf_float>
 800f6ec:	4607      	mov	r7, r0
 800f6ee:	1c78      	adds	r0, r7, #1
 800f6f0:	d1d6      	bne.n	800f6a0 <_vfiprintf_r+0x1bc>
 800f6f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f6f4:	07d9      	lsls	r1, r3, #31
 800f6f6:	d405      	bmi.n	800f704 <_vfiprintf_r+0x220>
 800f6f8:	89ab      	ldrh	r3, [r5, #12]
 800f6fa:	059a      	lsls	r2, r3, #22
 800f6fc:	d402      	bmi.n	800f704 <_vfiprintf_r+0x220>
 800f6fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f700:	f7ff f86a 	bl	800e7d8 <__retarget_lock_release_recursive>
 800f704:	89ab      	ldrh	r3, [r5, #12]
 800f706:	065b      	lsls	r3, r3, #25
 800f708:	f53f af12 	bmi.w	800f530 <_vfiprintf_r+0x4c>
 800f70c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f70e:	e711      	b.n	800f534 <_vfiprintf_r+0x50>
 800f710:	ab03      	add	r3, sp, #12
 800f712:	9300      	str	r3, [sp, #0]
 800f714:	462a      	mov	r2, r5
 800f716:	4630      	mov	r0, r6
 800f718:	4b08      	ldr	r3, [pc, #32]	; (800f73c <_vfiprintf_r+0x258>)
 800f71a:	a904      	add	r1, sp, #16
 800f71c:	f7fc fcd0 	bl	800c0c0 <_printf_i>
 800f720:	e7e4      	b.n	800f6ec <_vfiprintf_r+0x208>
 800f722:	bf00      	nop
 800f724:	080112f8 	.word	0x080112f8
 800f728:	08011318 	.word	0x08011318
 800f72c:	080112d8 	.word	0x080112d8
 800f730:	08011514 	.word	0x08011514
 800f734:	0801151e 	.word	0x0801151e
 800f738:	0800bb89 	.word	0x0800bb89
 800f73c:	0800f4bf 	.word	0x0800f4bf
 800f740:	0801151a 	.word	0x0801151a

0800f744 <nan>:
 800f744:	2000      	movs	r0, #0
 800f746:	4901      	ldr	r1, [pc, #4]	; (800f74c <nan+0x8>)
 800f748:	4770      	bx	lr
 800f74a:	bf00      	nop
 800f74c:	7ff80000 	.word	0x7ff80000

0800f750 <__sread>:
 800f750:	b510      	push	{r4, lr}
 800f752:	460c      	mov	r4, r1
 800f754:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f758:	f000 fae8 	bl	800fd2c <_read_r>
 800f75c:	2800      	cmp	r0, #0
 800f75e:	bfab      	itete	ge
 800f760:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f762:	89a3      	ldrhlt	r3, [r4, #12]
 800f764:	181b      	addge	r3, r3, r0
 800f766:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f76a:	bfac      	ite	ge
 800f76c:	6563      	strge	r3, [r4, #84]	; 0x54
 800f76e:	81a3      	strhlt	r3, [r4, #12]
 800f770:	bd10      	pop	{r4, pc}

0800f772 <__swrite>:
 800f772:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f776:	461f      	mov	r7, r3
 800f778:	898b      	ldrh	r3, [r1, #12]
 800f77a:	4605      	mov	r5, r0
 800f77c:	05db      	lsls	r3, r3, #23
 800f77e:	460c      	mov	r4, r1
 800f780:	4616      	mov	r6, r2
 800f782:	d505      	bpl.n	800f790 <__swrite+0x1e>
 800f784:	2302      	movs	r3, #2
 800f786:	2200      	movs	r2, #0
 800f788:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f78c:	f000 fa18 	bl	800fbc0 <_lseek_r>
 800f790:	89a3      	ldrh	r3, [r4, #12]
 800f792:	4632      	mov	r2, r6
 800f794:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f798:	81a3      	strh	r3, [r4, #12]
 800f79a:	4628      	mov	r0, r5
 800f79c:	463b      	mov	r3, r7
 800f79e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f7a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f7a6:	f000 b889 	b.w	800f8bc <_write_r>

0800f7aa <__sseek>:
 800f7aa:	b510      	push	{r4, lr}
 800f7ac:	460c      	mov	r4, r1
 800f7ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f7b2:	f000 fa05 	bl	800fbc0 <_lseek_r>
 800f7b6:	1c43      	adds	r3, r0, #1
 800f7b8:	89a3      	ldrh	r3, [r4, #12]
 800f7ba:	bf15      	itete	ne
 800f7bc:	6560      	strne	r0, [r4, #84]	; 0x54
 800f7be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f7c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f7c6:	81a3      	strheq	r3, [r4, #12]
 800f7c8:	bf18      	it	ne
 800f7ca:	81a3      	strhne	r3, [r4, #12]
 800f7cc:	bd10      	pop	{r4, pc}

0800f7ce <__sclose>:
 800f7ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f7d2:	f000 b911 	b.w	800f9f8 <_close_r>

0800f7d6 <strncmp>:
 800f7d6:	b510      	push	{r4, lr}
 800f7d8:	b16a      	cbz	r2, 800f7f6 <strncmp+0x20>
 800f7da:	3901      	subs	r1, #1
 800f7dc:	1884      	adds	r4, r0, r2
 800f7de:	f810 3b01 	ldrb.w	r3, [r0], #1
 800f7e2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800f7e6:	4293      	cmp	r3, r2
 800f7e8:	d103      	bne.n	800f7f2 <strncmp+0x1c>
 800f7ea:	42a0      	cmp	r0, r4
 800f7ec:	d001      	beq.n	800f7f2 <strncmp+0x1c>
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d1f5      	bne.n	800f7de <strncmp+0x8>
 800f7f2:	1a98      	subs	r0, r3, r2
 800f7f4:	bd10      	pop	{r4, pc}
 800f7f6:	4610      	mov	r0, r2
 800f7f8:	e7fc      	b.n	800f7f4 <strncmp+0x1e>
	...

0800f7fc <__swbuf_r>:
 800f7fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7fe:	460e      	mov	r6, r1
 800f800:	4614      	mov	r4, r2
 800f802:	4605      	mov	r5, r0
 800f804:	b118      	cbz	r0, 800f80e <__swbuf_r+0x12>
 800f806:	6983      	ldr	r3, [r0, #24]
 800f808:	b90b      	cbnz	r3, 800f80e <__swbuf_r+0x12>
 800f80a:	f7fe fbdb 	bl	800dfc4 <__sinit>
 800f80e:	4b21      	ldr	r3, [pc, #132]	; (800f894 <__swbuf_r+0x98>)
 800f810:	429c      	cmp	r4, r3
 800f812:	d12b      	bne.n	800f86c <__swbuf_r+0x70>
 800f814:	686c      	ldr	r4, [r5, #4]
 800f816:	69a3      	ldr	r3, [r4, #24]
 800f818:	60a3      	str	r3, [r4, #8]
 800f81a:	89a3      	ldrh	r3, [r4, #12]
 800f81c:	071a      	lsls	r2, r3, #28
 800f81e:	d52f      	bpl.n	800f880 <__swbuf_r+0x84>
 800f820:	6923      	ldr	r3, [r4, #16]
 800f822:	b36b      	cbz	r3, 800f880 <__swbuf_r+0x84>
 800f824:	6923      	ldr	r3, [r4, #16]
 800f826:	6820      	ldr	r0, [r4, #0]
 800f828:	b2f6      	uxtb	r6, r6
 800f82a:	1ac0      	subs	r0, r0, r3
 800f82c:	6963      	ldr	r3, [r4, #20]
 800f82e:	4637      	mov	r7, r6
 800f830:	4283      	cmp	r3, r0
 800f832:	dc04      	bgt.n	800f83e <__swbuf_r+0x42>
 800f834:	4621      	mov	r1, r4
 800f836:	4628      	mov	r0, r5
 800f838:	f000 f974 	bl	800fb24 <_fflush_r>
 800f83c:	bb30      	cbnz	r0, 800f88c <__swbuf_r+0x90>
 800f83e:	68a3      	ldr	r3, [r4, #8]
 800f840:	3001      	adds	r0, #1
 800f842:	3b01      	subs	r3, #1
 800f844:	60a3      	str	r3, [r4, #8]
 800f846:	6823      	ldr	r3, [r4, #0]
 800f848:	1c5a      	adds	r2, r3, #1
 800f84a:	6022      	str	r2, [r4, #0]
 800f84c:	701e      	strb	r6, [r3, #0]
 800f84e:	6963      	ldr	r3, [r4, #20]
 800f850:	4283      	cmp	r3, r0
 800f852:	d004      	beq.n	800f85e <__swbuf_r+0x62>
 800f854:	89a3      	ldrh	r3, [r4, #12]
 800f856:	07db      	lsls	r3, r3, #31
 800f858:	d506      	bpl.n	800f868 <__swbuf_r+0x6c>
 800f85a:	2e0a      	cmp	r6, #10
 800f85c:	d104      	bne.n	800f868 <__swbuf_r+0x6c>
 800f85e:	4621      	mov	r1, r4
 800f860:	4628      	mov	r0, r5
 800f862:	f000 f95f 	bl	800fb24 <_fflush_r>
 800f866:	b988      	cbnz	r0, 800f88c <__swbuf_r+0x90>
 800f868:	4638      	mov	r0, r7
 800f86a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f86c:	4b0a      	ldr	r3, [pc, #40]	; (800f898 <__swbuf_r+0x9c>)
 800f86e:	429c      	cmp	r4, r3
 800f870:	d101      	bne.n	800f876 <__swbuf_r+0x7a>
 800f872:	68ac      	ldr	r4, [r5, #8]
 800f874:	e7cf      	b.n	800f816 <__swbuf_r+0x1a>
 800f876:	4b09      	ldr	r3, [pc, #36]	; (800f89c <__swbuf_r+0xa0>)
 800f878:	429c      	cmp	r4, r3
 800f87a:	bf08      	it	eq
 800f87c:	68ec      	ldreq	r4, [r5, #12]
 800f87e:	e7ca      	b.n	800f816 <__swbuf_r+0x1a>
 800f880:	4621      	mov	r1, r4
 800f882:	4628      	mov	r0, r5
 800f884:	f000 f82c 	bl	800f8e0 <__swsetup_r>
 800f888:	2800      	cmp	r0, #0
 800f88a:	d0cb      	beq.n	800f824 <__swbuf_r+0x28>
 800f88c:	f04f 37ff 	mov.w	r7, #4294967295
 800f890:	e7ea      	b.n	800f868 <__swbuf_r+0x6c>
 800f892:	bf00      	nop
 800f894:	080112f8 	.word	0x080112f8
 800f898:	08011318 	.word	0x08011318
 800f89c:	080112d8 	.word	0x080112d8

0800f8a0 <__ascii_wctomb>:
 800f8a0:	4603      	mov	r3, r0
 800f8a2:	4608      	mov	r0, r1
 800f8a4:	b141      	cbz	r1, 800f8b8 <__ascii_wctomb+0x18>
 800f8a6:	2aff      	cmp	r2, #255	; 0xff
 800f8a8:	d904      	bls.n	800f8b4 <__ascii_wctomb+0x14>
 800f8aa:	228a      	movs	r2, #138	; 0x8a
 800f8ac:	f04f 30ff 	mov.w	r0, #4294967295
 800f8b0:	601a      	str	r2, [r3, #0]
 800f8b2:	4770      	bx	lr
 800f8b4:	2001      	movs	r0, #1
 800f8b6:	700a      	strb	r2, [r1, #0]
 800f8b8:	4770      	bx	lr
	...

0800f8bc <_write_r>:
 800f8bc:	b538      	push	{r3, r4, r5, lr}
 800f8be:	4604      	mov	r4, r0
 800f8c0:	4608      	mov	r0, r1
 800f8c2:	4611      	mov	r1, r2
 800f8c4:	2200      	movs	r2, #0
 800f8c6:	4d05      	ldr	r5, [pc, #20]	; (800f8dc <_write_r+0x20>)
 800f8c8:	602a      	str	r2, [r5, #0]
 800f8ca:	461a      	mov	r2, r3
 800f8cc:	f7f3 f91a 	bl	8002b04 <_write>
 800f8d0:	1c43      	adds	r3, r0, #1
 800f8d2:	d102      	bne.n	800f8da <_write_r+0x1e>
 800f8d4:	682b      	ldr	r3, [r5, #0]
 800f8d6:	b103      	cbz	r3, 800f8da <_write_r+0x1e>
 800f8d8:	6023      	str	r3, [r4, #0]
 800f8da:	bd38      	pop	{r3, r4, r5, pc}
 800f8dc:	20000c40 	.word	0x20000c40

0800f8e0 <__swsetup_r>:
 800f8e0:	4b32      	ldr	r3, [pc, #200]	; (800f9ac <__swsetup_r+0xcc>)
 800f8e2:	b570      	push	{r4, r5, r6, lr}
 800f8e4:	681d      	ldr	r5, [r3, #0]
 800f8e6:	4606      	mov	r6, r0
 800f8e8:	460c      	mov	r4, r1
 800f8ea:	b125      	cbz	r5, 800f8f6 <__swsetup_r+0x16>
 800f8ec:	69ab      	ldr	r3, [r5, #24]
 800f8ee:	b913      	cbnz	r3, 800f8f6 <__swsetup_r+0x16>
 800f8f0:	4628      	mov	r0, r5
 800f8f2:	f7fe fb67 	bl	800dfc4 <__sinit>
 800f8f6:	4b2e      	ldr	r3, [pc, #184]	; (800f9b0 <__swsetup_r+0xd0>)
 800f8f8:	429c      	cmp	r4, r3
 800f8fa:	d10f      	bne.n	800f91c <__swsetup_r+0x3c>
 800f8fc:	686c      	ldr	r4, [r5, #4]
 800f8fe:	89a3      	ldrh	r3, [r4, #12]
 800f900:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f904:	0719      	lsls	r1, r3, #28
 800f906:	d42c      	bmi.n	800f962 <__swsetup_r+0x82>
 800f908:	06dd      	lsls	r5, r3, #27
 800f90a:	d411      	bmi.n	800f930 <__swsetup_r+0x50>
 800f90c:	2309      	movs	r3, #9
 800f90e:	6033      	str	r3, [r6, #0]
 800f910:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f914:	f04f 30ff 	mov.w	r0, #4294967295
 800f918:	81a3      	strh	r3, [r4, #12]
 800f91a:	e03e      	b.n	800f99a <__swsetup_r+0xba>
 800f91c:	4b25      	ldr	r3, [pc, #148]	; (800f9b4 <__swsetup_r+0xd4>)
 800f91e:	429c      	cmp	r4, r3
 800f920:	d101      	bne.n	800f926 <__swsetup_r+0x46>
 800f922:	68ac      	ldr	r4, [r5, #8]
 800f924:	e7eb      	b.n	800f8fe <__swsetup_r+0x1e>
 800f926:	4b24      	ldr	r3, [pc, #144]	; (800f9b8 <__swsetup_r+0xd8>)
 800f928:	429c      	cmp	r4, r3
 800f92a:	bf08      	it	eq
 800f92c:	68ec      	ldreq	r4, [r5, #12]
 800f92e:	e7e6      	b.n	800f8fe <__swsetup_r+0x1e>
 800f930:	0758      	lsls	r0, r3, #29
 800f932:	d512      	bpl.n	800f95a <__swsetup_r+0x7a>
 800f934:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f936:	b141      	cbz	r1, 800f94a <__swsetup_r+0x6a>
 800f938:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f93c:	4299      	cmp	r1, r3
 800f93e:	d002      	beq.n	800f946 <__swsetup_r+0x66>
 800f940:	4630      	mov	r0, r6
 800f942:	f7fb ffdd 	bl	800b900 <_free_r>
 800f946:	2300      	movs	r3, #0
 800f948:	6363      	str	r3, [r4, #52]	; 0x34
 800f94a:	89a3      	ldrh	r3, [r4, #12]
 800f94c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f950:	81a3      	strh	r3, [r4, #12]
 800f952:	2300      	movs	r3, #0
 800f954:	6063      	str	r3, [r4, #4]
 800f956:	6923      	ldr	r3, [r4, #16]
 800f958:	6023      	str	r3, [r4, #0]
 800f95a:	89a3      	ldrh	r3, [r4, #12]
 800f95c:	f043 0308 	orr.w	r3, r3, #8
 800f960:	81a3      	strh	r3, [r4, #12]
 800f962:	6923      	ldr	r3, [r4, #16]
 800f964:	b94b      	cbnz	r3, 800f97a <__swsetup_r+0x9a>
 800f966:	89a3      	ldrh	r3, [r4, #12]
 800f968:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f96c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f970:	d003      	beq.n	800f97a <__swsetup_r+0x9a>
 800f972:	4621      	mov	r1, r4
 800f974:	4630      	mov	r0, r6
 800f976:	f000 f959 	bl	800fc2c <__smakebuf_r>
 800f97a:	89a0      	ldrh	r0, [r4, #12]
 800f97c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f980:	f010 0301 	ands.w	r3, r0, #1
 800f984:	d00a      	beq.n	800f99c <__swsetup_r+0xbc>
 800f986:	2300      	movs	r3, #0
 800f988:	60a3      	str	r3, [r4, #8]
 800f98a:	6963      	ldr	r3, [r4, #20]
 800f98c:	425b      	negs	r3, r3
 800f98e:	61a3      	str	r3, [r4, #24]
 800f990:	6923      	ldr	r3, [r4, #16]
 800f992:	b943      	cbnz	r3, 800f9a6 <__swsetup_r+0xc6>
 800f994:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f998:	d1ba      	bne.n	800f910 <__swsetup_r+0x30>
 800f99a:	bd70      	pop	{r4, r5, r6, pc}
 800f99c:	0781      	lsls	r1, r0, #30
 800f99e:	bf58      	it	pl
 800f9a0:	6963      	ldrpl	r3, [r4, #20]
 800f9a2:	60a3      	str	r3, [r4, #8]
 800f9a4:	e7f4      	b.n	800f990 <__swsetup_r+0xb0>
 800f9a6:	2000      	movs	r0, #0
 800f9a8:	e7f7      	b.n	800f99a <__swsetup_r+0xba>
 800f9aa:	bf00      	nop
 800f9ac:	2000001c 	.word	0x2000001c
 800f9b0:	080112f8 	.word	0x080112f8
 800f9b4:	08011318 	.word	0x08011318
 800f9b8:	080112d8 	.word	0x080112d8

0800f9bc <__assert_func>:
 800f9bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f9be:	4614      	mov	r4, r2
 800f9c0:	461a      	mov	r2, r3
 800f9c2:	4b09      	ldr	r3, [pc, #36]	; (800f9e8 <__assert_func+0x2c>)
 800f9c4:	4605      	mov	r5, r0
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	68d8      	ldr	r0, [r3, #12]
 800f9ca:	b14c      	cbz	r4, 800f9e0 <__assert_func+0x24>
 800f9cc:	4b07      	ldr	r3, [pc, #28]	; (800f9ec <__assert_func+0x30>)
 800f9ce:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f9d2:	9100      	str	r1, [sp, #0]
 800f9d4:	462b      	mov	r3, r5
 800f9d6:	4906      	ldr	r1, [pc, #24]	; (800f9f0 <__assert_func+0x34>)
 800f9d8:	f000 f8e0 	bl	800fb9c <fiprintf>
 800f9dc:	f000 f9b8 	bl	800fd50 <abort>
 800f9e0:	4b04      	ldr	r3, [pc, #16]	; (800f9f4 <__assert_func+0x38>)
 800f9e2:	461c      	mov	r4, r3
 800f9e4:	e7f3      	b.n	800f9ce <__assert_func+0x12>
 800f9e6:	bf00      	nop
 800f9e8:	2000001c 	.word	0x2000001c
 800f9ec:	08011525 	.word	0x08011525
 800f9f0:	08011532 	.word	0x08011532
 800f9f4:	08011560 	.word	0x08011560

0800f9f8 <_close_r>:
 800f9f8:	b538      	push	{r3, r4, r5, lr}
 800f9fa:	2300      	movs	r3, #0
 800f9fc:	4d05      	ldr	r5, [pc, #20]	; (800fa14 <_close_r+0x1c>)
 800f9fe:	4604      	mov	r4, r0
 800fa00:	4608      	mov	r0, r1
 800fa02:	602b      	str	r3, [r5, #0]
 800fa04:	f7f3 f8a8 	bl	8002b58 <_close>
 800fa08:	1c43      	adds	r3, r0, #1
 800fa0a:	d102      	bne.n	800fa12 <_close_r+0x1a>
 800fa0c:	682b      	ldr	r3, [r5, #0]
 800fa0e:	b103      	cbz	r3, 800fa12 <_close_r+0x1a>
 800fa10:	6023      	str	r3, [r4, #0]
 800fa12:	bd38      	pop	{r3, r4, r5, pc}
 800fa14:	20000c40 	.word	0x20000c40

0800fa18 <__sflush_r>:
 800fa18:	898a      	ldrh	r2, [r1, #12]
 800fa1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa1e:	4605      	mov	r5, r0
 800fa20:	0710      	lsls	r0, r2, #28
 800fa22:	460c      	mov	r4, r1
 800fa24:	d458      	bmi.n	800fad8 <__sflush_r+0xc0>
 800fa26:	684b      	ldr	r3, [r1, #4]
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	dc05      	bgt.n	800fa38 <__sflush_r+0x20>
 800fa2c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	dc02      	bgt.n	800fa38 <__sflush_r+0x20>
 800fa32:	2000      	movs	r0, #0
 800fa34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fa3a:	2e00      	cmp	r6, #0
 800fa3c:	d0f9      	beq.n	800fa32 <__sflush_r+0x1a>
 800fa3e:	2300      	movs	r3, #0
 800fa40:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fa44:	682f      	ldr	r7, [r5, #0]
 800fa46:	602b      	str	r3, [r5, #0]
 800fa48:	d032      	beq.n	800fab0 <__sflush_r+0x98>
 800fa4a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fa4c:	89a3      	ldrh	r3, [r4, #12]
 800fa4e:	075a      	lsls	r2, r3, #29
 800fa50:	d505      	bpl.n	800fa5e <__sflush_r+0x46>
 800fa52:	6863      	ldr	r3, [r4, #4]
 800fa54:	1ac0      	subs	r0, r0, r3
 800fa56:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fa58:	b10b      	cbz	r3, 800fa5e <__sflush_r+0x46>
 800fa5a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fa5c:	1ac0      	subs	r0, r0, r3
 800fa5e:	2300      	movs	r3, #0
 800fa60:	4602      	mov	r2, r0
 800fa62:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fa64:	4628      	mov	r0, r5
 800fa66:	6a21      	ldr	r1, [r4, #32]
 800fa68:	47b0      	blx	r6
 800fa6a:	1c43      	adds	r3, r0, #1
 800fa6c:	89a3      	ldrh	r3, [r4, #12]
 800fa6e:	d106      	bne.n	800fa7e <__sflush_r+0x66>
 800fa70:	6829      	ldr	r1, [r5, #0]
 800fa72:	291d      	cmp	r1, #29
 800fa74:	d82c      	bhi.n	800fad0 <__sflush_r+0xb8>
 800fa76:	4a2a      	ldr	r2, [pc, #168]	; (800fb20 <__sflush_r+0x108>)
 800fa78:	40ca      	lsrs	r2, r1
 800fa7a:	07d6      	lsls	r6, r2, #31
 800fa7c:	d528      	bpl.n	800fad0 <__sflush_r+0xb8>
 800fa7e:	2200      	movs	r2, #0
 800fa80:	6062      	str	r2, [r4, #4]
 800fa82:	6922      	ldr	r2, [r4, #16]
 800fa84:	04d9      	lsls	r1, r3, #19
 800fa86:	6022      	str	r2, [r4, #0]
 800fa88:	d504      	bpl.n	800fa94 <__sflush_r+0x7c>
 800fa8a:	1c42      	adds	r2, r0, #1
 800fa8c:	d101      	bne.n	800fa92 <__sflush_r+0x7a>
 800fa8e:	682b      	ldr	r3, [r5, #0]
 800fa90:	b903      	cbnz	r3, 800fa94 <__sflush_r+0x7c>
 800fa92:	6560      	str	r0, [r4, #84]	; 0x54
 800fa94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fa96:	602f      	str	r7, [r5, #0]
 800fa98:	2900      	cmp	r1, #0
 800fa9a:	d0ca      	beq.n	800fa32 <__sflush_r+0x1a>
 800fa9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800faa0:	4299      	cmp	r1, r3
 800faa2:	d002      	beq.n	800faaa <__sflush_r+0x92>
 800faa4:	4628      	mov	r0, r5
 800faa6:	f7fb ff2b 	bl	800b900 <_free_r>
 800faaa:	2000      	movs	r0, #0
 800faac:	6360      	str	r0, [r4, #52]	; 0x34
 800faae:	e7c1      	b.n	800fa34 <__sflush_r+0x1c>
 800fab0:	6a21      	ldr	r1, [r4, #32]
 800fab2:	2301      	movs	r3, #1
 800fab4:	4628      	mov	r0, r5
 800fab6:	47b0      	blx	r6
 800fab8:	1c41      	adds	r1, r0, #1
 800faba:	d1c7      	bne.n	800fa4c <__sflush_r+0x34>
 800fabc:	682b      	ldr	r3, [r5, #0]
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d0c4      	beq.n	800fa4c <__sflush_r+0x34>
 800fac2:	2b1d      	cmp	r3, #29
 800fac4:	d001      	beq.n	800faca <__sflush_r+0xb2>
 800fac6:	2b16      	cmp	r3, #22
 800fac8:	d101      	bne.n	800face <__sflush_r+0xb6>
 800faca:	602f      	str	r7, [r5, #0]
 800facc:	e7b1      	b.n	800fa32 <__sflush_r+0x1a>
 800face:	89a3      	ldrh	r3, [r4, #12]
 800fad0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fad4:	81a3      	strh	r3, [r4, #12]
 800fad6:	e7ad      	b.n	800fa34 <__sflush_r+0x1c>
 800fad8:	690f      	ldr	r7, [r1, #16]
 800fada:	2f00      	cmp	r7, #0
 800fadc:	d0a9      	beq.n	800fa32 <__sflush_r+0x1a>
 800fade:	0793      	lsls	r3, r2, #30
 800fae0:	bf18      	it	ne
 800fae2:	2300      	movne	r3, #0
 800fae4:	680e      	ldr	r6, [r1, #0]
 800fae6:	bf08      	it	eq
 800fae8:	694b      	ldreq	r3, [r1, #20]
 800faea:	eba6 0807 	sub.w	r8, r6, r7
 800faee:	600f      	str	r7, [r1, #0]
 800faf0:	608b      	str	r3, [r1, #8]
 800faf2:	f1b8 0f00 	cmp.w	r8, #0
 800faf6:	dd9c      	ble.n	800fa32 <__sflush_r+0x1a>
 800faf8:	4643      	mov	r3, r8
 800fafa:	463a      	mov	r2, r7
 800fafc:	4628      	mov	r0, r5
 800fafe:	6a21      	ldr	r1, [r4, #32]
 800fb00:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fb02:	47b0      	blx	r6
 800fb04:	2800      	cmp	r0, #0
 800fb06:	dc06      	bgt.n	800fb16 <__sflush_r+0xfe>
 800fb08:	89a3      	ldrh	r3, [r4, #12]
 800fb0a:	f04f 30ff 	mov.w	r0, #4294967295
 800fb0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fb12:	81a3      	strh	r3, [r4, #12]
 800fb14:	e78e      	b.n	800fa34 <__sflush_r+0x1c>
 800fb16:	4407      	add	r7, r0
 800fb18:	eba8 0800 	sub.w	r8, r8, r0
 800fb1c:	e7e9      	b.n	800faf2 <__sflush_r+0xda>
 800fb1e:	bf00      	nop
 800fb20:	20400001 	.word	0x20400001

0800fb24 <_fflush_r>:
 800fb24:	b538      	push	{r3, r4, r5, lr}
 800fb26:	690b      	ldr	r3, [r1, #16]
 800fb28:	4605      	mov	r5, r0
 800fb2a:	460c      	mov	r4, r1
 800fb2c:	b913      	cbnz	r3, 800fb34 <_fflush_r+0x10>
 800fb2e:	2500      	movs	r5, #0
 800fb30:	4628      	mov	r0, r5
 800fb32:	bd38      	pop	{r3, r4, r5, pc}
 800fb34:	b118      	cbz	r0, 800fb3e <_fflush_r+0x1a>
 800fb36:	6983      	ldr	r3, [r0, #24]
 800fb38:	b90b      	cbnz	r3, 800fb3e <_fflush_r+0x1a>
 800fb3a:	f7fe fa43 	bl	800dfc4 <__sinit>
 800fb3e:	4b14      	ldr	r3, [pc, #80]	; (800fb90 <_fflush_r+0x6c>)
 800fb40:	429c      	cmp	r4, r3
 800fb42:	d11b      	bne.n	800fb7c <_fflush_r+0x58>
 800fb44:	686c      	ldr	r4, [r5, #4]
 800fb46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d0ef      	beq.n	800fb2e <_fflush_r+0xa>
 800fb4e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fb50:	07d0      	lsls	r0, r2, #31
 800fb52:	d404      	bmi.n	800fb5e <_fflush_r+0x3a>
 800fb54:	0599      	lsls	r1, r3, #22
 800fb56:	d402      	bmi.n	800fb5e <_fflush_r+0x3a>
 800fb58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fb5a:	f7fe fe3c 	bl	800e7d6 <__retarget_lock_acquire_recursive>
 800fb5e:	4628      	mov	r0, r5
 800fb60:	4621      	mov	r1, r4
 800fb62:	f7ff ff59 	bl	800fa18 <__sflush_r>
 800fb66:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fb68:	4605      	mov	r5, r0
 800fb6a:	07da      	lsls	r2, r3, #31
 800fb6c:	d4e0      	bmi.n	800fb30 <_fflush_r+0xc>
 800fb6e:	89a3      	ldrh	r3, [r4, #12]
 800fb70:	059b      	lsls	r3, r3, #22
 800fb72:	d4dd      	bmi.n	800fb30 <_fflush_r+0xc>
 800fb74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fb76:	f7fe fe2f 	bl	800e7d8 <__retarget_lock_release_recursive>
 800fb7a:	e7d9      	b.n	800fb30 <_fflush_r+0xc>
 800fb7c:	4b05      	ldr	r3, [pc, #20]	; (800fb94 <_fflush_r+0x70>)
 800fb7e:	429c      	cmp	r4, r3
 800fb80:	d101      	bne.n	800fb86 <_fflush_r+0x62>
 800fb82:	68ac      	ldr	r4, [r5, #8]
 800fb84:	e7df      	b.n	800fb46 <_fflush_r+0x22>
 800fb86:	4b04      	ldr	r3, [pc, #16]	; (800fb98 <_fflush_r+0x74>)
 800fb88:	429c      	cmp	r4, r3
 800fb8a:	bf08      	it	eq
 800fb8c:	68ec      	ldreq	r4, [r5, #12]
 800fb8e:	e7da      	b.n	800fb46 <_fflush_r+0x22>
 800fb90:	080112f8 	.word	0x080112f8
 800fb94:	08011318 	.word	0x08011318
 800fb98:	080112d8 	.word	0x080112d8

0800fb9c <fiprintf>:
 800fb9c:	b40e      	push	{r1, r2, r3}
 800fb9e:	b503      	push	{r0, r1, lr}
 800fba0:	4601      	mov	r1, r0
 800fba2:	ab03      	add	r3, sp, #12
 800fba4:	4805      	ldr	r0, [pc, #20]	; (800fbbc <fiprintf+0x20>)
 800fba6:	f853 2b04 	ldr.w	r2, [r3], #4
 800fbaa:	6800      	ldr	r0, [r0, #0]
 800fbac:	9301      	str	r3, [sp, #4]
 800fbae:	f7ff fc99 	bl	800f4e4 <_vfiprintf_r>
 800fbb2:	b002      	add	sp, #8
 800fbb4:	f85d eb04 	ldr.w	lr, [sp], #4
 800fbb8:	b003      	add	sp, #12
 800fbba:	4770      	bx	lr
 800fbbc:	2000001c 	.word	0x2000001c

0800fbc0 <_lseek_r>:
 800fbc0:	b538      	push	{r3, r4, r5, lr}
 800fbc2:	4604      	mov	r4, r0
 800fbc4:	4608      	mov	r0, r1
 800fbc6:	4611      	mov	r1, r2
 800fbc8:	2200      	movs	r2, #0
 800fbca:	4d05      	ldr	r5, [pc, #20]	; (800fbe0 <_lseek_r+0x20>)
 800fbcc:	602a      	str	r2, [r5, #0]
 800fbce:	461a      	mov	r2, r3
 800fbd0:	f7f2 ffe6 	bl	8002ba0 <_lseek>
 800fbd4:	1c43      	adds	r3, r0, #1
 800fbd6:	d102      	bne.n	800fbde <_lseek_r+0x1e>
 800fbd8:	682b      	ldr	r3, [r5, #0]
 800fbda:	b103      	cbz	r3, 800fbde <_lseek_r+0x1e>
 800fbdc:	6023      	str	r3, [r4, #0]
 800fbde:	bd38      	pop	{r3, r4, r5, pc}
 800fbe0:	20000c40 	.word	0x20000c40

0800fbe4 <__swhatbuf_r>:
 800fbe4:	b570      	push	{r4, r5, r6, lr}
 800fbe6:	460e      	mov	r6, r1
 800fbe8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fbec:	4614      	mov	r4, r2
 800fbee:	2900      	cmp	r1, #0
 800fbf0:	461d      	mov	r5, r3
 800fbf2:	b096      	sub	sp, #88	; 0x58
 800fbf4:	da07      	bge.n	800fc06 <__swhatbuf_r+0x22>
 800fbf6:	2300      	movs	r3, #0
 800fbf8:	602b      	str	r3, [r5, #0]
 800fbfa:	89b3      	ldrh	r3, [r6, #12]
 800fbfc:	061a      	lsls	r2, r3, #24
 800fbfe:	d410      	bmi.n	800fc22 <__swhatbuf_r+0x3e>
 800fc00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fc04:	e00e      	b.n	800fc24 <__swhatbuf_r+0x40>
 800fc06:	466a      	mov	r2, sp
 800fc08:	f000 f8aa 	bl	800fd60 <_fstat_r>
 800fc0c:	2800      	cmp	r0, #0
 800fc0e:	dbf2      	blt.n	800fbf6 <__swhatbuf_r+0x12>
 800fc10:	9a01      	ldr	r2, [sp, #4]
 800fc12:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800fc16:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800fc1a:	425a      	negs	r2, r3
 800fc1c:	415a      	adcs	r2, r3
 800fc1e:	602a      	str	r2, [r5, #0]
 800fc20:	e7ee      	b.n	800fc00 <__swhatbuf_r+0x1c>
 800fc22:	2340      	movs	r3, #64	; 0x40
 800fc24:	2000      	movs	r0, #0
 800fc26:	6023      	str	r3, [r4, #0]
 800fc28:	b016      	add	sp, #88	; 0x58
 800fc2a:	bd70      	pop	{r4, r5, r6, pc}

0800fc2c <__smakebuf_r>:
 800fc2c:	898b      	ldrh	r3, [r1, #12]
 800fc2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fc30:	079d      	lsls	r5, r3, #30
 800fc32:	4606      	mov	r6, r0
 800fc34:	460c      	mov	r4, r1
 800fc36:	d507      	bpl.n	800fc48 <__smakebuf_r+0x1c>
 800fc38:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fc3c:	6023      	str	r3, [r4, #0]
 800fc3e:	6123      	str	r3, [r4, #16]
 800fc40:	2301      	movs	r3, #1
 800fc42:	6163      	str	r3, [r4, #20]
 800fc44:	b002      	add	sp, #8
 800fc46:	bd70      	pop	{r4, r5, r6, pc}
 800fc48:	466a      	mov	r2, sp
 800fc4a:	ab01      	add	r3, sp, #4
 800fc4c:	f7ff ffca 	bl	800fbe4 <__swhatbuf_r>
 800fc50:	9900      	ldr	r1, [sp, #0]
 800fc52:	4605      	mov	r5, r0
 800fc54:	4630      	mov	r0, r6
 800fc56:	f7fb fe9f 	bl	800b998 <_malloc_r>
 800fc5a:	b948      	cbnz	r0, 800fc70 <__smakebuf_r+0x44>
 800fc5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fc60:	059a      	lsls	r2, r3, #22
 800fc62:	d4ef      	bmi.n	800fc44 <__smakebuf_r+0x18>
 800fc64:	f023 0303 	bic.w	r3, r3, #3
 800fc68:	f043 0302 	orr.w	r3, r3, #2
 800fc6c:	81a3      	strh	r3, [r4, #12]
 800fc6e:	e7e3      	b.n	800fc38 <__smakebuf_r+0xc>
 800fc70:	4b0d      	ldr	r3, [pc, #52]	; (800fca8 <__smakebuf_r+0x7c>)
 800fc72:	62b3      	str	r3, [r6, #40]	; 0x28
 800fc74:	89a3      	ldrh	r3, [r4, #12]
 800fc76:	6020      	str	r0, [r4, #0]
 800fc78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fc7c:	81a3      	strh	r3, [r4, #12]
 800fc7e:	9b00      	ldr	r3, [sp, #0]
 800fc80:	6120      	str	r0, [r4, #16]
 800fc82:	6163      	str	r3, [r4, #20]
 800fc84:	9b01      	ldr	r3, [sp, #4]
 800fc86:	b15b      	cbz	r3, 800fca0 <__smakebuf_r+0x74>
 800fc88:	4630      	mov	r0, r6
 800fc8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fc8e:	f000 f879 	bl	800fd84 <_isatty_r>
 800fc92:	b128      	cbz	r0, 800fca0 <__smakebuf_r+0x74>
 800fc94:	89a3      	ldrh	r3, [r4, #12]
 800fc96:	f023 0303 	bic.w	r3, r3, #3
 800fc9a:	f043 0301 	orr.w	r3, r3, #1
 800fc9e:	81a3      	strh	r3, [r4, #12]
 800fca0:	89a0      	ldrh	r0, [r4, #12]
 800fca2:	4305      	orrs	r5, r0
 800fca4:	81a5      	strh	r5, [r4, #12]
 800fca6:	e7cd      	b.n	800fc44 <__smakebuf_r+0x18>
 800fca8:	0800df5d 	.word	0x0800df5d

0800fcac <memmove>:
 800fcac:	4288      	cmp	r0, r1
 800fcae:	b510      	push	{r4, lr}
 800fcb0:	eb01 0402 	add.w	r4, r1, r2
 800fcb4:	d902      	bls.n	800fcbc <memmove+0x10>
 800fcb6:	4284      	cmp	r4, r0
 800fcb8:	4623      	mov	r3, r4
 800fcba:	d807      	bhi.n	800fccc <memmove+0x20>
 800fcbc:	1e43      	subs	r3, r0, #1
 800fcbe:	42a1      	cmp	r1, r4
 800fcc0:	d008      	beq.n	800fcd4 <memmove+0x28>
 800fcc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fcc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fcca:	e7f8      	b.n	800fcbe <memmove+0x12>
 800fccc:	4601      	mov	r1, r0
 800fcce:	4402      	add	r2, r0
 800fcd0:	428a      	cmp	r2, r1
 800fcd2:	d100      	bne.n	800fcd6 <memmove+0x2a>
 800fcd4:	bd10      	pop	{r4, pc}
 800fcd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fcda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fcde:	e7f7      	b.n	800fcd0 <memmove+0x24>

0800fce0 <_realloc_r>:
 800fce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fce2:	4607      	mov	r7, r0
 800fce4:	4614      	mov	r4, r2
 800fce6:	460e      	mov	r6, r1
 800fce8:	b921      	cbnz	r1, 800fcf4 <_realloc_r+0x14>
 800fcea:	4611      	mov	r1, r2
 800fcec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800fcf0:	f7fb be52 	b.w	800b998 <_malloc_r>
 800fcf4:	b922      	cbnz	r2, 800fd00 <_realloc_r+0x20>
 800fcf6:	f7fb fe03 	bl	800b900 <_free_r>
 800fcfa:	4625      	mov	r5, r4
 800fcfc:	4628      	mov	r0, r5
 800fcfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fd00:	f000 f850 	bl	800fda4 <_malloc_usable_size_r>
 800fd04:	42a0      	cmp	r0, r4
 800fd06:	d20f      	bcs.n	800fd28 <_realloc_r+0x48>
 800fd08:	4621      	mov	r1, r4
 800fd0a:	4638      	mov	r0, r7
 800fd0c:	f7fb fe44 	bl	800b998 <_malloc_r>
 800fd10:	4605      	mov	r5, r0
 800fd12:	2800      	cmp	r0, #0
 800fd14:	d0f2      	beq.n	800fcfc <_realloc_r+0x1c>
 800fd16:	4631      	mov	r1, r6
 800fd18:	4622      	mov	r2, r4
 800fd1a:	f7fe fd7e 	bl	800e81a <memcpy>
 800fd1e:	4631      	mov	r1, r6
 800fd20:	4638      	mov	r0, r7
 800fd22:	f7fb fded 	bl	800b900 <_free_r>
 800fd26:	e7e9      	b.n	800fcfc <_realloc_r+0x1c>
 800fd28:	4635      	mov	r5, r6
 800fd2a:	e7e7      	b.n	800fcfc <_realloc_r+0x1c>

0800fd2c <_read_r>:
 800fd2c:	b538      	push	{r3, r4, r5, lr}
 800fd2e:	4604      	mov	r4, r0
 800fd30:	4608      	mov	r0, r1
 800fd32:	4611      	mov	r1, r2
 800fd34:	2200      	movs	r2, #0
 800fd36:	4d05      	ldr	r5, [pc, #20]	; (800fd4c <_read_r+0x20>)
 800fd38:	602a      	str	r2, [r5, #0]
 800fd3a:	461a      	mov	r2, r3
 800fd3c:	f7f2 fec5 	bl	8002aca <_read>
 800fd40:	1c43      	adds	r3, r0, #1
 800fd42:	d102      	bne.n	800fd4a <_read_r+0x1e>
 800fd44:	682b      	ldr	r3, [r5, #0]
 800fd46:	b103      	cbz	r3, 800fd4a <_read_r+0x1e>
 800fd48:	6023      	str	r3, [r4, #0]
 800fd4a:	bd38      	pop	{r3, r4, r5, pc}
 800fd4c:	20000c40 	.word	0x20000c40

0800fd50 <abort>:
 800fd50:	2006      	movs	r0, #6
 800fd52:	b508      	push	{r3, lr}
 800fd54:	f000 f856 	bl	800fe04 <raise>
 800fd58:	2001      	movs	r0, #1
 800fd5a:	f7f2 feac 	bl	8002ab6 <_exit>
	...

0800fd60 <_fstat_r>:
 800fd60:	b538      	push	{r3, r4, r5, lr}
 800fd62:	2300      	movs	r3, #0
 800fd64:	4d06      	ldr	r5, [pc, #24]	; (800fd80 <_fstat_r+0x20>)
 800fd66:	4604      	mov	r4, r0
 800fd68:	4608      	mov	r0, r1
 800fd6a:	4611      	mov	r1, r2
 800fd6c:	602b      	str	r3, [r5, #0]
 800fd6e:	f7f2 fefe 	bl	8002b6e <_fstat>
 800fd72:	1c43      	adds	r3, r0, #1
 800fd74:	d102      	bne.n	800fd7c <_fstat_r+0x1c>
 800fd76:	682b      	ldr	r3, [r5, #0]
 800fd78:	b103      	cbz	r3, 800fd7c <_fstat_r+0x1c>
 800fd7a:	6023      	str	r3, [r4, #0]
 800fd7c:	bd38      	pop	{r3, r4, r5, pc}
 800fd7e:	bf00      	nop
 800fd80:	20000c40 	.word	0x20000c40

0800fd84 <_isatty_r>:
 800fd84:	b538      	push	{r3, r4, r5, lr}
 800fd86:	2300      	movs	r3, #0
 800fd88:	4d05      	ldr	r5, [pc, #20]	; (800fda0 <_isatty_r+0x1c>)
 800fd8a:	4604      	mov	r4, r0
 800fd8c:	4608      	mov	r0, r1
 800fd8e:	602b      	str	r3, [r5, #0]
 800fd90:	f7f2 fefc 	bl	8002b8c <_isatty>
 800fd94:	1c43      	adds	r3, r0, #1
 800fd96:	d102      	bne.n	800fd9e <_isatty_r+0x1a>
 800fd98:	682b      	ldr	r3, [r5, #0]
 800fd9a:	b103      	cbz	r3, 800fd9e <_isatty_r+0x1a>
 800fd9c:	6023      	str	r3, [r4, #0]
 800fd9e:	bd38      	pop	{r3, r4, r5, pc}
 800fda0:	20000c40 	.word	0x20000c40

0800fda4 <_malloc_usable_size_r>:
 800fda4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fda8:	1f18      	subs	r0, r3, #4
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	bfbc      	itt	lt
 800fdae:	580b      	ldrlt	r3, [r1, r0]
 800fdb0:	18c0      	addlt	r0, r0, r3
 800fdb2:	4770      	bx	lr

0800fdb4 <_raise_r>:
 800fdb4:	291f      	cmp	r1, #31
 800fdb6:	b538      	push	{r3, r4, r5, lr}
 800fdb8:	4604      	mov	r4, r0
 800fdba:	460d      	mov	r5, r1
 800fdbc:	d904      	bls.n	800fdc8 <_raise_r+0x14>
 800fdbe:	2316      	movs	r3, #22
 800fdc0:	6003      	str	r3, [r0, #0]
 800fdc2:	f04f 30ff 	mov.w	r0, #4294967295
 800fdc6:	bd38      	pop	{r3, r4, r5, pc}
 800fdc8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800fdca:	b112      	cbz	r2, 800fdd2 <_raise_r+0x1e>
 800fdcc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fdd0:	b94b      	cbnz	r3, 800fde6 <_raise_r+0x32>
 800fdd2:	4620      	mov	r0, r4
 800fdd4:	f000 f830 	bl	800fe38 <_getpid_r>
 800fdd8:	462a      	mov	r2, r5
 800fdda:	4601      	mov	r1, r0
 800fddc:	4620      	mov	r0, r4
 800fdde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fde2:	f000 b817 	b.w	800fe14 <_kill_r>
 800fde6:	2b01      	cmp	r3, #1
 800fde8:	d00a      	beq.n	800fe00 <_raise_r+0x4c>
 800fdea:	1c59      	adds	r1, r3, #1
 800fdec:	d103      	bne.n	800fdf6 <_raise_r+0x42>
 800fdee:	2316      	movs	r3, #22
 800fdf0:	6003      	str	r3, [r0, #0]
 800fdf2:	2001      	movs	r0, #1
 800fdf4:	e7e7      	b.n	800fdc6 <_raise_r+0x12>
 800fdf6:	2400      	movs	r4, #0
 800fdf8:	4628      	mov	r0, r5
 800fdfa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800fdfe:	4798      	blx	r3
 800fe00:	2000      	movs	r0, #0
 800fe02:	e7e0      	b.n	800fdc6 <_raise_r+0x12>

0800fe04 <raise>:
 800fe04:	4b02      	ldr	r3, [pc, #8]	; (800fe10 <raise+0xc>)
 800fe06:	4601      	mov	r1, r0
 800fe08:	6818      	ldr	r0, [r3, #0]
 800fe0a:	f7ff bfd3 	b.w	800fdb4 <_raise_r>
 800fe0e:	bf00      	nop
 800fe10:	2000001c 	.word	0x2000001c

0800fe14 <_kill_r>:
 800fe14:	b538      	push	{r3, r4, r5, lr}
 800fe16:	2300      	movs	r3, #0
 800fe18:	4d06      	ldr	r5, [pc, #24]	; (800fe34 <_kill_r+0x20>)
 800fe1a:	4604      	mov	r4, r0
 800fe1c:	4608      	mov	r0, r1
 800fe1e:	4611      	mov	r1, r2
 800fe20:	602b      	str	r3, [r5, #0]
 800fe22:	f7f2 fe38 	bl	8002a96 <_kill>
 800fe26:	1c43      	adds	r3, r0, #1
 800fe28:	d102      	bne.n	800fe30 <_kill_r+0x1c>
 800fe2a:	682b      	ldr	r3, [r5, #0]
 800fe2c:	b103      	cbz	r3, 800fe30 <_kill_r+0x1c>
 800fe2e:	6023      	str	r3, [r4, #0]
 800fe30:	bd38      	pop	{r3, r4, r5, pc}
 800fe32:	bf00      	nop
 800fe34:	20000c40 	.word	0x20000c40

0800fe38 <_getpid_r>:
 800fe38:	f7f2 be26 	b.w	8002a88 <_getpid>

0800fe3c <_init>:
 800fe3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe3e:	bf00      	nop
 800fe40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fe42:	bc08      	pop	{r3}
 800fe44:	469e      	mov	lr, r3
 800fe46:	4770      	bx	lr

0800fe48 <_fini>:
 800fe48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe4a:	bf00      	nop
 800fe4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fe4e:	bc08      	pop	{r3}
 800fe50:	469e      	mov	lr, r3
 800fe52:	4770      	bx	lr
