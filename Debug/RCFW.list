
RCFW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e738  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000147c  0800e920  0800e920  0001e920  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fd9c  0800fd9c  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  0800fd9c  0800fd9c  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800fd9c  0800fd9c  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fd9c  0800fd9c  0001fd9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fda0  0800fda0  0001fda0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800fda4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009d0  200001ec  0800ff90  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000bbc  0800ff90  00020bbc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bb98  00000000  00000000  00020215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004049  00000000  00000000  0003bdad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014d0  00000000  00000000  0003fdf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001308  00000000  00000000  000412c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f065  00000000  00000000  000425d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c80a  00000000  00000000  00061635  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a683c  00000000  00000000  0007de3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012467b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000677c  00000000  00000000  001246d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001ec 	.word	0x200001ec
 8000204:	00000000 	.word	0x00000000
 8000208:	0800e908 	.word	0x0800e908

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001f0 	.word	0x200001f0
 8000224:	0800e908 	.word	0x0800e908

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_frsub>:
 8000b60:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b64:	e002      	b.n	8000b6c <__addsf3>
 8000b66:	bf00      	nop

08000b68 <__aeabi_fsub>:
 8000b68:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b6c <__addsf3>:
 8000b6c:	0042      	lsls	r2, r0, #1
 8000b6e:	bf1f      	itttt	ne
 8000b70:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b74:	ea92 0f03 	teqne	r2, r3
 8000b78:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b7c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b80:	d06a      	beq.n	8000c58 <__addsf3+0xec>
 8000b82:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b86:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b8a:	bfc1      	itttt	gt
 8000b8c:	18d2      	addgt	r2, r2, r3
 8000b8e:	4041      	eorgt	r1, r0
 8000b90:	4048      	eorgt	r0, r1
 8000b92:	4041      	eorgt	r1, r0
 8000b94:	bfb8      	it	lt
 8000b96:	425b      	neglt	r3, r3
 8000b98:	2b19      	cmp	r3, #25
 8000b9a:	bf88      	it	hi
 8000b9c:	4770      	bxhi	lr
 8000b9e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ba2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000baa:	bf18      	it	ne
 8000bac:	4240      	negne	r0, r0
 8000bae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bb2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bb6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bba:	bf18      	it	ne
 8000bbc:	4249      	negne	r1, r1
 8000bbe:	ea92 0f03 	teq	r2, r3
 8000bc2:	d03f      	beq.n	8000c44 <__addsf3+0xd8>
 8000bc4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bcc:	eb10 000c 	adds.w	r0, r0, ip
 8000bd0:	f1c3 0320 	rsb	r3, r3, #32
 8000bd4:	fa01 f103 	lsl.w	r1, r1, r3
 8000bd8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bdc:	d502      	bpl.n	8000be4 <__addsf3+0x78>
 8000bde:	4249      	negs	r1, r1
 8000be0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000be4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000be8:	d313      	bcc.n	8000c12 <__addsf3+0xa6>
 8000bea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bee:	d306      	bcc.n	8000bfe <__addsf3+0x92>
 8000bf0:	0840      	lsrs	r0, r0, #1
 8000bf2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bf6:	f102 0201 	add.w	r2, r2, #1
 8000bfa:	2afe      	cmp	r2, #254	; 0xfe
 8000bfc:	d251      	bcs.n	8000ca2 <__addsf3+0x136>
 8000bfe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c02:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c06:	bf08      	it	eq
 8000c08:	f020 0001 	biceq.w	r0, r0, #1
 8000c0c:	ea40 0003 	orr.w	r0, r0, r3
 8000c10:	4770      	bx	lr
 8000c12:	0049      	lsls	r1, r1, #1
 8000c14:	eb40 0000 	adc.w	r0, r0, r0
 8000c18:	3a01      	subs	r2, #1
 8000c1a:	bf28      	it	cs
 8000c1c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c20:	d2ed      	bcs.n	8000bfe <__addsf3+0x92>
 8000c22:	fab0 fc80 	clz	ip, r0
 8000c26:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c2a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c2e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c32:	bfaa      	itet	ge
 8000c34:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c38:	4252      	neglt	r2, r2
 8000c3a:	4318      	orrge	r0, r3
 8000c3c:	bfbc      	itt	lt
 8000c3e:	40d0      	lsrlt	r0, r2
 8000c40:	4318      	orrlt	r0, r3
 8000c42:	4770      	bx	lr
 8000c44:	f092 0f00 	teq	r2, #0
 8000c48:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c4c:	bf06      	itte	eq
 8000c4e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c52:	3201      	addeq	r2, #1
 8000c54:	3b01      	subne	r3, #1
 8000c56:	e7b5      	b.n	8000bc4 <__addsf3+0x58>
 8000c58:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c5c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c60:	bf18      	it	ne
 8000c62:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c66:	d021      	beq.n	8000cac <__addsf3+0x140>
 8000c68:	ea92 0f03 	teq	r2, r3
 8000c6c:	d004      	beq.n	8000c78 <__addsf3+0x10c>
 8000c6e:	f092 0f00 	teq	r2, #0
 8000c72:	bf08      	it	eq
 8000c74:	4608      	moveq	r0, r1
 8000c76:	4770      	bx	lr
 8000c78:	ea90 0f01 	teq	r0, r1
 8000c7c:	bf1c      	itt	ne
 8000c7e:	2000      	movne	r0, #0
 8000c80:	4770      	bxne	lr
 8000c82:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c86:	d104      	bne.n	8000c92 <__addsf3+0x126>
 8000c88:	0040      	lsls	r0, r0, #1
 8000c8a:	bf28      	it	cs
 8000c8c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c90:	4770      	bx	lr
 8000c92:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c96:	bf3c      	itt	cc
 8000c98:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c9c:	4770      	bxcc	lr
 8000c9e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ca2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ca6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000caa:	4770      	bx	lr
 8000cac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb0:	bf16      	itet	ne
 8000cb2:	4608      	movne	r0, r1
 8000cb4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cb8:	4601      	movne	r1, r0
 8000cba:	0242      	lsls	r2, r0, #9
 8000cbc:	bf06      	itte	eq
 8000cbe:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cc2:	ea90 0f01 	teqeq	r0, r1
 8000cc6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cca:	4770      	bx	lr

08000ccc <__aeabi_ui2f>:
 8000ccc:	f04f 0300 	mov.w	r3, #0
 8000cd0:	e004      	b.n	8000cdc <__aeabi_i2f+0x8>
 8000cd2:	bf00      	nop

08000cd4 <__aeabi_i2f>:
 8000cd4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cd8:	bf48      	it	mi
 8000cda:	4240      	negmi	r0, r0
 8000cdc:	ea5f 0c00 	movs.w	ip, r0
 8000ce0:	bf08      	it	eq
 8000ce2:	4770      	bxeq	lr
 8000ce4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ce8:	4601      	mov	r1, r0
 8000cea:	f04f 0000 	mov.w	r0, #0
 8000cee:	e01c      	b.n	8000d2a <__aeabi_l2f+0x2a>

08000cf0 <__aeabi_ul2f>:
 8000cf0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf4:	bf08      	it	eq
 8000cf6:	4770      	bxeq	lr
 8000cf8:	f04f 0300 	mov.w	r3, #0
 8000cfc:	e00a      	b.n	8000d14 <__aeabi_l2f+0x14>
 8000cfe:	bf00      	nop

08000d00 <__aeabi_l2f>:
 8000d00:	ea50 0201 	orrs.w	r2, r0, r1
 8000d04:	bf08      	it	eq
 8000d06:	4770      	bxeq	lr
 8000d08:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d0c:	d502      	bpl.n	8000d14 <__aeabi_l2f+0x14>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	ea5f 0c01 	movs.w	ip, r1
 8000d18:	bf02      	ittt	eq
 8000d1a:	4684      	moveq	ip, r0
 8000d1c:	4601      	moveq	r1, r0
 8000d1e:	2000      	moveq	r0, #0
 8000d20:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d24:	bf08      	it	eq
 8000d26:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d2a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d2e:	fabc f28c 	clz	r2, ip
 8000d32:	3a08      	subs	r2, #8
 8000d34:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d38:	db10      	blt.n	8000d5c <__aeabi_l2f+0x5c>
 8000d3a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d3e:	4463      	add	r3, ip
 8000d40:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d44:	f1c2 0220 	rsb	r2, r2, #32
 8000d48:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d4c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d50:	eb43 0002 	adc.w	r0, r3, r2
 8000d54:	bf08      	it	eq
 8000d56:	f020 0001 	biceq.w	r0, r0, #1
 8000d5a:	4770      	bx	lr
 8000d5c:	f102 0220 	add.w	r2, r2, #32
 8000d60:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d64:	f1c2 0220 	rsb	r2, r2, #32
 8000d68:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d6c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d70:	eb43 0002 	adc.w	r0, r3, r2
 8000d74:	bf08      	it	eq
 8000d76:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d7a:	4770      	bx	lr

08000d7c <__aeabi_fmul>:
 8000d7c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d80:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d84:	bf1e      	ittt	ne
 8000d86:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d8a:	ea92 0f0c 	teqne	r2, ip
 8000d8e:	ea93 0f0c 	teqne	r3, ip
 8000d92:	d06f      	beq.n	8000e74 <__aeabi_fmul+0xf8>
 8000d94:	441a      	add	r2, r3
 8000d96:	ea80 0c01 	eor.w	ip, r0, r1
 8000d9a:	0240      	lsls	r0, r0, #9
 8000d9c:	bf18      	it	ne
 8000d9e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000da2:	d01e      	beq.n	8000de2 <__aeabi_fmul+0x66>
 8000da4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000da8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db0:	fba0 3101 	umull	r3, r1, r0, r1
 8000db4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000db8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dbc:	bf3e      	ittt	cc
 8000dbe:	0049      	lslcc	r1, r1, #1
 8000dc0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dc4:	005b      	lslcc	r3, r3, #1
 8000dc6:	ea40 0001 	orr.w	r0, r0, r1
 8000dca:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dce:	2afd      	cmp	r2, #253	; 0xfd
 8000dd0:	d81d      	bhi.n	8000e0e <__aeabi_fmul+0x92>
 8000dd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dd6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dda:	bf08      	it	eq
 8000ddc:	f020 0001 	biceq.w	r0, r0, #1
 8000de0:	4770      	bx	lr
 8000de2:	f090 0f00 	teq	r0, #0
 8000de6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dea:	bf08      	it	eq
 8000dec:	0249      	lsleq	r1, r1, #9
 8000dee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000df2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000df6:	3a7f      	subs	r2, #127	; 0x7f
 8000df8:	bfc2      	ittt	gt
 8000dfa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dfe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e02:	4770      	bxgt	lr
 8000e04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e08:	f04f 0300 	mov.w	r3, #0
 8000e0c:	3a01      	subs	r2, #1
 8000e0e:	dc5d      	bgt.n	8000ecc <__aeabi_fmul+0x150>
 8000e10:	f112 0f19 	cmn.w	r2, #25
 8000e14:	bfdc      	itt	le
 8000e16:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e1a:	4770      	bxle	lr
 8000e1c:	f1c2 0200 	rsb	r2, r2, #0
 8000e20:	0041      	lsls	r1, r0, #1
 8000e22:	fa21 f102 	lsr.w	r1, r1, r2
 8000e26:	f1c2 0220 	rsb	r2, r2, #32
 8000e2a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e2e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e32:	f140 0000 	adc.w	r0, r0, #0
 8000e36:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e3a:	bf08      	it	eq
 8000e3c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e40:	4770      	bx	lr
 8000e42:	f092 0f00 	teq	r2, #0
 8000e46:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e4a:	bf02      	ittt	eq
 8000e4c:	0040      	lsleq	r0, r0, #1
 8000e4e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e52:	3a01      	subeq	r2, #1
 8000e54:	d0f9      	beq.n	8000e4a <__aeabi_fmul+0xce>
 8000e56:	ea40 000c 	orr.w	r0, r0, ip
 8000e5a:	f093 0f00 	teq	r3, #0
 8000e5e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e62:	bf02      	ittt	eq
 8000e64:	0049      	lsleq	r1, r1, #1
 8000e66:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e6a:	3b01      	subeq	r3, #1
 8000e6c:	d0f9      	beq.n	8000e62 <__aeabi_fmul+0xe6>
 8000e6e:	ea41 010c 	orr.w	r1, r1, ip
 8000e72:	e78f      	b.n	8000d94 <__aeabi_fmul+0x18>
 8000e74:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	bf18      	it	ne
 8000e7e:	ea93 0f0c 	teqne	r3, ip
 8000e82:	d00a      	beq.n	8000e9a <__aeabi_fmul+0x11e>
 8000e84:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e88:	bf18      	it	ne
 8000e8a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e8e:	d1d8      	bne.n	8000e42 <__aeabi_fmul+0xc6>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	4770      	bx	lr
 8000e9a:	f090 0f00 	teq	r0, #0
 8000e9e:	bf17      	itett	ne
 8000ea0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ea4:	4608      	moveq	r0, r1
 8000ea6:	f091 0f00 	teqne	r1, #0
 8000eaa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eae:	d014      	beq.n	8000eda <__aeabi_fmul+0x15e>
 8000eb0:	ea92 0f0c 	teq	r2, ip
 8000eb4:	d101      	bne.n	8000eba <__aeabi_fmul+0x13e>
 8000eb6:	0242      	lsls	r2, r0, #9
 8000eb8:	d10f      	bne.n	8000eda <__aeabi_fmul+0x15e>
 8000eba:	ea93 0f0c 	teq	r3, ip
 8000ebe:	d103      	bne.n	8000ec8 <__aeabi_fmul+0x14c>
 8000ec0:	024b      	lsls	r3, r1, #9
 8000ec2:	bf18      	it	ne
 8000ec4:	4608      	movne	r0, r1
 8000ec6:	d108      	bne.n	8000eda <__aeabi_fmul+0x15e>
 8000ec8:	ea80 0001 	eor.w	r0, r0, r1
 8000ecc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ed4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ed8:	4770      	bx	lr
 8000eda:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ede:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ee2:	4770      	bx	lr

08000ee4 <__aeabi_fdiv>:
 8000ee4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ee8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eec:	bf1e      	ittt	ne
 8000eee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ef2:	ea92 0f0c 	teqne	r2, ip
 8000ef6:	ea93 0f0c 	teqne	r3, ip
 8000efa:	d069      	beq.n	8000fd0 <__aeabi_fdiv+0xec>
 8000efc:	eba2 0203 	sub.w	r2, r2, r3
 8000f00:	ea80 0c01 	eor.w	ip, r0, r1
 8000f04:	0249      	lsls	r1, r1, #9
 8000f06:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f0a:	d037      	beq.n	8000f7c <__aeabi_fdiv+0x98>
 8000f0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f10:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f14:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f18:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f1c:	428b      	cmp	r3, r1
 8000f1e:	bf38      	it	cc
 8000f20:	005b      	lslcc	r3, r3, #1
 8000f22:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f26:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f2a:	428b      	cmp	r3, r1
 8000f2c:	bf24      	itt	cs
 8000f2e:	1a5b      	subcs	r3, r3, r1
 8000f30:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f34:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f38:	bf24      	itt	cs
 8000f3a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f3e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f42:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f46:	bf24      	itt	cs
 8000f48:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f4c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f50:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f54:	bf24      	itt	cs
 8000f56:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f5a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f5e:	011b      	lsls	r3, r3, #4
 8000f60:	bf18      	it	ne
 8000f62:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f66:	d1e0      	bne.n	8000f2a <__aeabi_fdiv+0x46>
 8000f68:	2afd      	cmp	r2, #253	; 0xfd
 8000f6a:	f63f af50 	bhi.w	8000e0e <__aeabi_fmul+0x92>
 8000f6e:	428b      	cmp	r3, r1
 8000f70:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f74:	bf08      	it	eq
 8000f76:	f020 0001 	biceq.w	r0, r0, #1
 8000f7a:	4770      	bx	lr
 8000f7c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f80:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f84:	327f      	adds	r2, #127	; 0x7f
 8000f86:	bfc2      	ittt	gt
 8000f88:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f8c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f90:	4770      	bxgt	lr
 8000f92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f96:	f04f 0300 	mov.w	r3, #0
 8000f9a:	3a01      	subs	r2, #1
 8000f9c:	e737      	b.n	8000e0e <__aeabi_fmul+0x92>
 8000f9e:	f092 0f00 	teq	r2, #0
 8000fa2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fa6:	bf02      	ittt	eq
 8000fa8:	0040      	lsleq	r0, r0, #1
 8000faa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fae:	3a01      	subeq	r2, #1
 8000fb0:	d0f9      	beq.n	8000fa6 <__aeabi_fdiv+0xc2>
 8000fb2:	ea40 000c 	orr.w	r0, r0, ip
 8000fb6:	f093 0f00 	teq	r3, #0
 8000fba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fbe:	bf02      	ittt	eq
 8000fc0:	0049      	lsleq	r1, r1, #1
 8000fc2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fc6:	3b01      	subeq	r3, #1
 8000fc8:	d0f9      	beq.n	8000fbe <__aeabi_fdiv+0xda>
 8000fca:	ea41 010c 	orr.w	r1, r1, ip
 8000fce:	e795      	b.n	8000efc <__aeabi_fdiv+0x18>
 8000fd0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fd4:	ea92 0f0c 	teq	r2, ip
 8000fd8:	d108      	bne.n	8000fec <__aeabi_fdiv+0x108>
 8000fda:	0242      	lsls	r2, r0, #9
 8000fdc:	f47f af7d 	bne.w	8000eda <__aeabi_fmul+0x15e>
 8000fe0:	ea93 0f0c 	teq	r3, ip
 8000fe4:	f47f af70 	bne.w	8000ec8 <__aeabi_fmul+0x14c>
 8000fe8:	4608      	mov	r0, r1
 8000fea:	e776      	b.n	8000eda <__aeabi_fmul+0x15e>
 8000fec:	ea93 0f0c 	teq	r3, ip
 8000ff0:	d104      	bne.n	8000ffc <__aeabi_fdiv+0x118>
 8000ff2:	024b      	lsls	r3, r1, #9
 8000ff4:	f43f af4c 	beq.w	8000e90 <__aeabi_fmul+0x114>
 8000ff8:	4608      	mov	r0, r1
 8000ffa:	e76e      	b.n	8000eda <__aeabi_fmul+0x15e>
 8000ffc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001000:	bf18      	it	ne
 8001002:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001006:	d1ca      	bne.n	8000f9e <__aeabi_fdiv+0xba>
 8001008:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800100c:	f47f af5c 	bne.w	8000ec8 <__aeabi_fmul+0x14c>
 8001010:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001014:	f47f af3c 	bne.w	8000e90 <__aeabi_fmul+0x114>
 8001018:	e75f      	b.n	8000eda <__aeabi_fmul+0x15e>
 800101a:	bf00      	nop

0800101c <__aeabi_f2iz>:
 800101c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001020:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001024:	d30f      	bcc.n	8001046 <__aeabi_f2iz+0x2a>
 8001026:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800102a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800102e:	d90d      	bls.n	800104c <__aeabi_f2iz+0x30>
 8001030:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001034:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001038:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800103c:	fa23 f002 	lsr.w	r0, r3, r2
 8001040:	bf18      	it	ne
 8001042:	4240      	negne	r0, r0
 8001044:	4770      	bx	lr
 8001046:	f04f 0000 	mov.w	r0, #0
 800104a:	4770      	bx	lr
 800104c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001050:	d101      	bne.n	8001056 <__aeabi_f2iz+0x3a>
 8001052:	0242      	lsls	r2, r0, #9
 8001054:	d105      	bne.n	8001062 <__aeabi_f2iz+0x46>
 8001056:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800105a:	bf08      	it	eq
 800105c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001060:	4770      	bx	lr
 8001062:	f04f 0000 	mov.w	r0, #0
 8001066:	4770      	bx	lr

08001068 <__aeabi_f2uiz>:
 8001068:	0042      	lsls	r2, r0, #1
 800106a:	d20e      	bcs.n	800108a <__aeabi_f2uiz+0x22>
 800106c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001070:	d30b      	bcc.n	800108a <__aeabi_f2uiz+0x22>
 8001072:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001076:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800107a:	d409      	bmi.n	8001090 <__aeabi_f2uiz+0x28>
 800107c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001080:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001084:	fa23 f002 	lsr.w	r0, r3, r2
 8001088:	4770      	bx	lr
 800108a:	f04f 0000 	mov.w	r0, #0
 800108e:	4770      	bx	lr
 8001090:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001094:	d101      	bne.n	800109a <__aeabi_f2uiz+0x32>
 8001096:	0242      	lsls	r2, r0, #9
 8001098:	d102      	bne.n	80010a0 <__aeabi_f2uiz+0x38>
 800109a:	f04f 30ff 	mov.w	r0, #4294967295
 800109e:	4770      	bx	lr
 80010a0:	f04f 0000 	mov.w	r0, #0
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop

080010a8 <MAIN_displayRcfwBanner>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static void MAIN_displayRcfwBanner(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* Used ASCII art generator from https://patorjk.com with font called "Colossal" */
  LOG_info("");
 80010ac:	4914      	ldr	r1, [pc, #80]	; (8001100 <MAIN_displayRcfwBanner+0x58>)
 80010ae:	2001      	movs	r0, #1
 80010b0:	f009 fe7c 	bl	800adac <LOG_log>
  LOG_info("    8888888b.        .d8888b.       8888888888      888       888"  );
 80010b4:	4913      	ldr	r1, [pc, #76]	; (8001104 <MAIN_displayRcfwBanner+0x5c>)
 80010b6:	2001      	movs	r0, #1
 80010b8:	f009 fe78 	bl	800adac <LOG_log>
  LOG_info("    888   Y88b      d88P  Y88b      888             888   o   888"  );
 80010bc:	4912      	ldr	r1, [pc, #72]	; (8001108 <MAIN_displayRcfwBanner+0x60>)
 80010be:	2001      	movs	r0, #1
 80010c0:	f009 fe74 	bl	800adac <LOG_log>
  LOG_info("    888    888      888    888      888             888  d8b  888"  );
 80010c4:	4911      	ldr	r1, [pc, #68]	; (800110c <MAIN_displayRcfwBanner+0x64>)
 80010c6:	2001      	movs	r0, #1
 80010c8:	f009 fe70 	bl	800adac <LOG_log>
  LOG_info("    888   d88P      888             8888888         888 d888b 888"  );
 80010cc:	4910      	ldr	r1, [pc, #64]	; (8001110 <MAIN_displayRcfwBanner+0x68>)
 80010ce:	2001      	movs	r0, #1
 80010d0:	f009 fe6c 	bl	800adac <LOG_log>
  LOG_info("    8888888P\"       888             888             888d88888b888" );
 80010d4:	490f      	ldr	r1, [pc, #60]	; (8001114 <MAIN_displayRcfwBanner+0x6c>)
 80010d6:	2001      	movs	r0, #1
 80010d8:	f009 fe68 	bl	800adac <LOG_log>
  LOG_info("    888 T88b        888    888      888             88888P Y88888"  );
 80010dc:	490e      	ldr	r1, [pc, #56]	; (8001118 <MAIN_displayRcfwBanner+0x70>)
 80010de:	2001      	movs	r0, #1
 80010e0:	f009 fe64 	bl	800adac <LOG_log>
  LOG_info("    888  T88b       Y88b  d88P      888             8888P   Y8888"  );
 80010e4:	490d      	ldr	r1, [pc, #52]	; (800111c <MAIN_displayRcfwBanner+0x74>)
 80010e6:	2001      	movs	r0, #1
 80010e8:	f009 fe60 	bl	800adac <LOG_log>
  LOG_info("    888   T88b       \"Y8888P\"       888             888P     Y888");
 80010ec:	490c      	ldr	r1, [pc, #48]	; (8001120 <MAIN_displayRcfwBanner+0x78>)
 80010ee:	2001      	movs	r0, #1
 80010f0:	f009 fe5c 	bl	800adac <LOG_log>
  LOG_info("");
 80010f4:	4902      	ldr	r1, [pc, #8]	; (8001100 <MAIN_displayRcfwBanner+0x58>)
 80010f6:	2001      	movs	r0, #1
 80010f8:	f009 fe58 	bl	800adac <LOG_log>

  return;
 80010fc:	bf00      	nop
}
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	0800e920 	.word	0x0800e920
 8001104:	0800e924 	.word	0x0800e924
 8001108:	0800e968 	.word	0x0800e968
 800110c:	0800e9ac 	.word	0x0800e9ac
 8001110:	0800e9f0 	.word	0x0800e9f0
 8001114:	0800ea34 	.word	0x0800ea34
 8001118:	0800ea78 	.word	0x0800ea78
 800111c:	0800eabc 	.word	0x0800eabc
 8001120:	0800eb00 	.word	0x0800eb00

08001124 <MAIN_togglePrintOutput>:

static void MAIN_togglePrintOutput(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  if (g_MAIN_printOutput == MAIN_PRINT_OUTPUT_TO_CONSOLE)
 8001128:	4b0a      	ldr	r3, [pc, #40]	; (8001154 <MAIN_togglePrintOutput+0x30>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d107      	bne.n	8001140 <MAIN_togglePrintOutput+0x1c>
  {
    LOG_info("Directing print to MASTER");
 8001130:	4909      	ldr	r1, [pc, #36]	; (8001158 <MAIN_togglePrintOutput+0x34>)
 8001132:	2001      	movs	r0, #1
 8001134:	f009 fe3a 	bl	800adac <LOG_log>

    g_MAIN_printOutput = MAIN_PRINT_OUTPUT_TO_MASTER;
 8001138:	4b06      	ldr	r3, [pc, #24]	; (8001154 <MAIN_togglePrintOutput+0x30>)
 800113a:	2201      	movs	r2, #1
 800113c:	701a      	strb	r2, [r3, #0]
    LOG_info("Directing print to CONSOLE");

    g_MAIN_printOutput = MAIN_PRINT_OUTPUT_TO_CONSOLE;
  }

  return;
 800113e:	e007      	b.n	8001150 <MAIN_togglePrintOutput+0x2c>
    LOG_info("Directing print to CONSOLE");
 8001140:	4906      	ldr	r1, [pc, #24]	; (800115c <MAIN_togglePrintOutput+0x38>)
 8001142:	2001      	movs	r0, #1
 8001144:	f009 fe32 	bl	800adac <LOG_log>
    g_MAIN_printOutput = MAIN_PRINT_OUTPUT_TO_CONSOLE;
 8001148:	4b02      	ldr	r3, [pc, #8]	; (8001154 <MAIN_togglePrintOutput+0x30>)
 800114a:	2200      	movs	r2, #0
 800114c:	701a      	strb	r2, [r3, #0]
  return;
 800114e:	bf00      	nop
}
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	200009c8 	.word	0x200009c8
 8001158:	0800eb44 	.word	0x0800eb44
 800115c:	0800eb60 	.word	0x0800eb60

08001160 <MAIN_updateLogSetup>:

static void MAIN_updateLogSetup(T_BLU_Data *p_data)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  RTC_TimeTypeDef l_time;
  RTC_DateTypeDef l_date;

  /* As this method is using for logging/debug, we will not deal with failure cases */
  (void)HAL_RTC_GetTime(&hrtc, &l_time, RTC_FORMAT_BCD);
 8001168:	f107 030c 	add.w	r3, r7, #12
 800116c:	2201      	movs	r2, #1
 800116e:	4619      	mov	r1, r3
 8001170:	4857      	ldr	r0, [pc, #348]	; (80012d0 <MAIN_updateLogSetup+0x170>)
 8001172:	f004 f98d 	bl	8005490 <HAL_RTC_GetTime>
  (void)HAL_RTC_GetDate(&hrtc, &l_date, RTC_FORMAT_BCD);
 8001176:	f107 0308 	add.w	r3, r7, #8
 800117a:	2201      	movs	r2, #1
 800117c:	4619      	mov	r1, r3
 800117e:	4854      	ldr	r0, [pc, #336]	; (80012d0 <MAIN_updateLogSetup+0x170>)
 8001180:	f004 fb8a 	bl	8005898 <HAL_RTC_GetDate>

  switch (p_data->button)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	7c1b      	ldrb	r3, [r3, #16]
 8001188:	3b05      	subs	r3, #5
 800118a:	2b03      	cmp	r3, #3
 800118c:	f200 8084 	bhi.w	8001298 <MAIN_updateLogSetup+0x138>
 8001190:	a201      	add	r2, pc, #4	; (adr r2, 8001198 <MAIN_updateLogSetup+0x38>)
 8001192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001196:	bf00      	nop
 8001198:	080011a9 	.word	0x080011a9
 800119c:	0800125d 	.word	0x0800125d
 80011a0:	080011e5 	.word	0x080011e5
 80011a4:	08001221 	.word	0x08001221
  {
    case BLU_BUTTON_PAD_UP:
      if (g_MAIN_padUpPressedStartTime == 0)
 80011a8:	4b4a      	ldr	r3, [pc, #296]	; (80012d4 <MAIN_updateLogSetup+0x174>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d10a      	bne.n	80011c6 <MAIN_updateLogSetup+0x66>
      {
        g_MAIN_padUpPressedStartTime = UTI_turnRtcTimeToSeconds(&l_time);
 80011b0:	f107 030c 	add.w	r3, r7, #12
 80011b4:	4618      	mov	r0, r3
 80011b6:	f00a fb3c 	bl	800b832 <UTI_turnRtcTimeToSeconds>
 80011ba:	4603      	mov	r3, r0
 80011bc:	4a45      	ldr	r2, [pc, #276]	; (80012d4 <MAIN_updateLogSetup+0x174>)
 80011be:	6013      	str	r3, [r2, #0]

        LOG_increaseLevel();
 80011c0:	f009 fdc4 	bl	800ad4c <LOG_increaseLevel>
      }
      else
      {
        g_MAIN_padUpPressedStartTime = 0;
      }
      break;
 80011c4:	e06a      	b.n	800129c <MAIN_updateLogSetup+0x13c>
      else if (UTI_turnRtcTimeToSeconds(&l_time) - g_MAIN_padUpPressedStartTime < STP_PAD_BUTTONS_DEBOUNCE_PERIOD_IN_S)
 80011c6:	f107 030c 	add.w	r3, r7, #12
 80011ca:	4618      	mov	r0, r3
 80011cc:	f00a fb31 	bl	800b832 <UTI_turnRtcTimeToSeconds>
 80011d0:	4602      	mov	r2, r0
 80011d2:	4b40      	ldr	r3, [pc, #256]	; (80012d4 <MAIN_updateLogSetup+0x174>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	1ad3      	subs	r3, r2, r3
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d95f      	bls.n	800129c <MAIN_updateLogSetup+0x13c>
        g_MAIN_padUpPressedStartTime = 0;
 80011dc:	4b3d      	ldr	r3, [pc, #244]	; (80012d4 <MAIN_updateLogSetup+0x174>)
 80011de:	2200      	movs	r2, #0
 80011e0:	601a      	str	r2, [r3, #0]
      break;
 80011e2:	e05b      	b.n	800129c <MAIN_updateLogSetup+0x13c>

    case BLU_BUTTON_PAD_DOWN:
      if (g_MAIN_padDownPressedStartTime == 0)
 80011e4:	4b3c      	ldr	r3, [pc, #240]	; (80012d8 <MAIN_updateLogSetup+0x178>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d10a      	bne.n	8001202 <MAIN_updateLogSetup+0xa2>
      {
        g_MAIN_padDownPressedStartTime = UTI_turnRtcTimeToSeconds(&l_time);
 80011ec:	f107 030c 	add.w	r3, r7, #12
 80011f0:	4618      	mov	r0, r3
 80011f2:	f00a fb1e 	bl	800b832 <UTI_turnRtcTimeToSeconds>
 80011f6:	4603      	mov	r3, r0
 80011f8:	4a37      	ldr	r2, [pc, #220]	; (80012d8 <MAIN_updateLogSetup+0x178>)
 80011fa:	6013      	str	r3, [r2, #0]

        LOG_decreaseLevel();
 80011fc:	f009 fdbe 	bl	800ad7c <LOG_decreaseLevel>
      }
      else
      {
        g_MAIN_padDownPressedStartTime = 0;
      }
      break;
 8001200:	e04e      	b.n	80012a0 <MAIN_updateLogSetup+0x140>
      else if (UTI_turnRtcTimeToSeconds(&l_time) - g_MAIN_padDownPressedStartTime < STP_PAD_BUTTONS_DEBOUNCE_PERIOD_IN_S)
 8001202:	f107 030c 	add.w	r3, r7, #12
 8001206:	4618      	mov	r0, r3
 8001208:	f00a fb13 	bl	800b832 <UTI_turnRtcTimeToSeconds>
 800120c:	4602      	mov	r2, r0
 800120e:	4b32      	ldr	r3, [pc, #200]	; (80012d8 <MAIN_updateLogSetup+0x178>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	1ad3      	subs	r3, r2, r3
 8001214:	2b01      	cmp	r3, #1
 8001216:	d943      	bls.n	80012a0 <MAIN_updateLogSetup+0x140>
        g_MAIN_padDownPressedStartTime = 0;
 8001218:	4b2f      	ldr	r3, [pc, #188]	; (80012d8 <MAIN_updateLogSetup+0x178>)
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
      break;
 800121e:	e03f      	b.n	80012a0 <MAIN_updateLogSetup+0x140>

    case BLU_BUTTON_PAD_LEFT:
      if (g_MAIN_padLeftPressedStartTime == 0)
 8001220:	4b2e      	ldr	r3, [pc, #184]	; (80012dc <MAIN_updateLogSetup+0x17c>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d10a      	bne.n	800123e <MAIN_updateLogSetup+0xde>
      {
        g_MAIN_padLeftPressedStartTime = UTI_turnRtcTimeToSeconds(&l_time);
 8001228:	f107 030c 	add.w	r3, r7, #12
 800122c:	4618      	mov	r0, r3
 800122e:	f00a fb00 	bl	800b832 <UTI_turnRtcTimeToSeconds>
 8001232:	4603      	mov	r3, r0
 8001234:	4a29      	ldr	r2, [pc, #164]	; (80012dc <MAIN_updateLogSetup+0x17c>)
 8001236:	6013      	str	r3, [r2, #0]

        LOG_toggleOnOff();
 8001238:	f009 fd5a 	bl	800acf0 <LOG_toggleOnOff>
      }
      else
      {
        g_MAIN_padLeftPressedStartTime = 0;
      }
      break;
 800123c:	e032      	b.n	80012a4 <MAIN_updateLogSetup+0x144>
      else if (UTI_turnRtcTimeToSeconds(&l_time) - g_MAIN_padLeftPressedStartTime < STP_PAD_BUTTONS_DEBOUNCE_PERIOD_IN_S)
 800123e:	f107 030c 	add.w	r3, r7, #12
 8001242:	4618      	mov	r0, r3
 8001244:	f00a faf5 	bl	800b832 <UTI_turnRtcTimeToSeconds>
 8001248:	4602      	mov	r2, r0
 800124a:	4b24      	ldr	r3, [pc, #144]	; (80012dc <MAIN_updateLogSetup+0x17c>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	1ad3      	subs	r3, r2, r3
 8001250:	2b01      	cmp	r3, #1
 8001252:	d927      	bls.n	80012a4 <MAIN_updateLogSetup+0x144>
        g_MAIN_padLeftPressedStartTime = 0;
 8001254:	4b21      	ldr	r3, [pc, #132]	; (80012dc <MAIN_updateLogSetup+0x17c>)
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
      break;
 800125a:	e023      	b.n	80012a4 <MAIN_updateLogSetup+0x144>

    case BLU_BUTTON_PAD_RIGHT:
      if (g_MAIN_padRightPressedStartTime == 0)
 800125c:	4b20      	ldr	r3, [pc, #128]	; (80012e0 <MAIN_updateLogSetup+0x180>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d10a      	bne.n	800127a <MAIN_updateLogSetup+0x11a>
      {
        g_MAIN_padRightPressedStartTime = UTI_turnRtcTimeToSeconds(&l_time);
 8001264:	f107 030c 	add.w	r3, r7, #12
 8001268:	4618      	mov	r0, r3
 800126a:	f00a fae2 	bl	800b832 <UTI_turnRtcTimeToSeconds>
 800126e:	4603      	mov	r3, r0
 8001270:	4a1b      	ldr	r2, [pc, #108]	; (80012e0 <MAIN_updateLogSetup+0x180>)
 8001272:	6013      	str	r3, [r2, #0]

        MAIN_togglePrintOutput();
 8001274:	f7ff ff56 	bl	8001124 <MAIN_togglePrintOutput>
      }
      else
      {
        g_MAIN_padRightPressedStartTime = 0;
      }
      break;
 8001278:	e016      	b.n	80012a8 <MAIN_updateLogSetup+0x148>
      else if (UTI_turnRtcTimeToSeconds(&l_time) - g_MAIN_padRightPressedStartTime < STP_PAD_BUTTONS_DEBOUNCE_PERIOD_IN_S)
 800127a:	f107 030c 	add.w	r3, r7, #12
 800127e:	4618      	mov	r0, r3
 8001280:	f00a fad7 	bl	800b832 <UTI_turnRtcTimeToSeconds>
 8001284:	4602      	mov	r2, r0
 8001286:	4b16      	ldr	r3, [pc, #88]	; (80012e0 <MAIN_updateLogSetup+0x180>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	2b01      	cmp	r3, #1
 800128e:	d90b      	bls.n	80012a8 <MAIN_updateLogSetup+0x148>
        g_MAIN_padRightPressedStartTime = 0;
 8001290:	4b13      	ldr	r3, [pc, #76]	; (80012e0 <MAIN_updateLogSetup+0x180>)
 8001292:	2200      	movs	r2, #0
 8001294:	601a      	str	r2, [r3, #0]
      break;
 8001296:	e007      	b.n	80012a8 <MAIN_updateLogSetup+0x148>

    default:
      ; /* Nothing to do */;
      break;
 8001298:	bf00      	nop
 800129a:	e006      	b.n	80012aa <MAIN_updateLogSetup+0x14a>
      break;
 800129c:	bf00      	nop
 800129e:	e004      	b.n	80012aa <MAIN_updateLogSetup+0x14a>
      break;
 80012a0:	bf00      	nop
 80012a2:	e002      	b.n	80012aa <MAIN_updateLogSetup+0x14a>
      break;
 80012a4:	bf00      	nop
 80012a6:	e000      	b.n	80012aa <MAIN_updateLogSetup+0x14a>
      break;
 80012a8:	bf00      	nop
  }

  if ((p_data->button != BLU_BUTTON_PAD_UP) && (p_data->button != BLU_BUTTON_PAD_DOWN))
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	7c1b      	ldrb	r3, [r3, #16]
 80012ae:	2b05      	cmp	r3, #5
 80012b0:	d00a      	beq.n	80012c8 <MAIN_updateLogSetup+0x168>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	7c1b      	ldrb	r3, [r3, #16]
 80012b6:	2b07      	cmp	r3, #7
 80012b8:	d006      	beq.n	80012c8 <MAIN_updateLogSetup+0x168>
  {
    g_MAIN_padUpPressedStartTime   = 0;
 80012ba:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <MAIN_updateLogSetup+0x174>)
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
    g_MAIN_padDownPressedStartTime = 0;
 80012c0:	4b05      	ldr	r3, [pc, #20]	; (80012d8 <MAIN_updateLogSetup+0x178>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]
  else
  {
    ; /* Nothing to do */;
  }

  return;
 80012c6:	bf00      	nop
 80012c8:	bf00      	nop
}
 80012ca:	3710      	adds	r7, #16
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	2000084c 	.word	0x2000084c
 80012d4:	20000208 	.word	0x20000208
 80012d8:	2000020c 	.word	0x2000020c
 80012dc:	20000210 	.word	0x20000210
 80012e0:	20000214 	.word	0x20000214

080012e4 <MAIN_updateLedMode>:

static void MAIN_updateLedMode(T_DRV_MODE p_driveMode, uint32_t p_voltageInMv)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	6039      	str	r1, [r7, #0]
 80012ee:	71fb      	strb	r3, [r7, #7]
  /* Regarding LED mode, battery check is prioritary on user requests. */
  /* Ignore 0 value as we could get it at startup or while debugging.  */
  if ((p_voltageInMv != 0) && (p_voltageInMv < MAIN_MIN_BATTERY_LEVEL_IN_MV))
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d00d      	beq.n	8001312 <MAIN_updateLedMode+0x2e>
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	f242 720f 	movw	r2, #9999	; 0x270f
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d808      	bhi.n	8001312 <MAIN_updateLedMode+0x2e>
  {
    LOG_warning("Battery is getting low: %u mV", p_voltageInMv);
 8001300:	683a      	ldr	r2, [r7, #0]
 8001302:	4911      	ldr	r1, [pc, #68]	; (8001348 <MAIN_updateLedMode+0x64>)
 8001304:	2002      	movs	r0, #2
 8001306:	f009 fd51 	bl	800adac <LOG_log>

    LED_setMode(LED_MODE_FORCED_OFF);
 800130a:	2000      	movs	r0, #0
 800130c:	f009 fc2e 	bl	800ab6c <LED_setMode>
 8001310:	e016      	b.n	8001340 <MAIN_updateLedMode+0x5c>
  }
  else
  {
    switch (p_driveMode)
 8001312:	79fb      	ldrb	r3, [r7, #7]
 8001314:	2b02      	cmp	r3, #2
 8001316:	d00e      	beq.n	8001336 <MAIN_updateLedMode+0x52>
 8001318:	2b02      	cmp	r3, #2
 800131a:	dc10      	bgt.n	800133e <MAIN_updateLedMode+0x5a>
 800131c:	2b00      	cmp	r3, #0
 800131e:	d002      	beq.n	8001326 <MAIN_updateLedMode+0x42>
 8001320:	2b01      	cmp	r3, #1
 8001322:	d004      	beq.n	800132e <MAIN_updateLedMode+0x4a>
        LED_setMode(LED_MODE_BLINK_FAST);
        break;

      default:
        ; /* Nothing to do */
        break;
 8001324:	e00b      	b.n	800133e <MAIN_updateLedMode+0x5a>
        LED_setMode(LED_MODE_BLINK_SLOW);
 8001326:	2002      	movs	r0, #2
 8001328:	f009 fc20 	bl	800ab6c <LED_setMode>
        break;
 800132c:	e008      	b.n	8001340 <MAIN_updateLedMode+0x5c>
        LED_setMode(LED_MODE_BLINK_MEDIUM);
 800132e:	2003      	movs	r0, #3
 8001330:	f009 fc1c 	bl	800ab6c <LED_setMode>
        break;
 8001334:	e004      	b.n	8001340 <MAIN_updateLedMode+0x5c>
        LED_setMode(LED_MODE_BLINK_FAST);
 8001336:	2004      	movs	r0, #4
 8001338:	f009 fc18 	bl	800ab6c <LED_setMode>
        break;
 800133c:	e000      	b.n	8001340 <MAIN_updateLedMode+0x5c>
        break;
 800133e:	bf00      	nop
    }
  }

  return;
 8001340:	bf00      	nop
}
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	0800eb7c 	.word	0x0800eb7c

0800134c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08e      	sub	sp, #56	; 0x38
 8001350:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001352:	f001 fb2d 	bl	80029b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001356:	f000 f9a3 	bl	80016a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800135a:	f000 fda5 	bl	8001ea8 <MX_GPIO_Init>
  MX_TIM1_Init();
 800135e:	f000 fa7f 	bl	8001860 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8001362:	f000 fd77 	bl	8001e54 <MX_USART1_UART_Init>
  MX_UART4_Init();
 8001366:	f000 fd4b 	bl	8001e00 <MX_UART4_Init>
  MX_ADC1_Init();
 800136a:	f000 f9f1 	bl	8001750 <MX_ADC1_Init>
  MX_TIM8_Init();
 800136e:	f000 fc83 	bl	8001c78 <MX_TIM8_Init>
  MX_RTC_Init();
 8001372:	f000 fa2b 	bl	80017cc <MX_RTC_Init>
  MX_TIM7_Init();
 8001376:	f000 fc49 	bl	8001c0c <MX_TIM7_Init>
  MX_TIM2_Init();
 800137a:	f000 fac1 	bl	8001900 <MX_TIM2_Init>
  MX_TIM3_Init();
 800137e:	f000 fb13 	bl	80019a8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001382:	f000 fb65 	bl	8001a50 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001386:	f000 fbb7 	bl	8001af8 <MX_TIM5_Init>
  MX_TIM6_Init();
 800138a:	f000 fc09 	bl	8001ba0 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  /* Setup global variables */
  g_MAIN_padUpPressedStartTime    = 0;
 800138e:	4ba6      	ldr	r3, [pc, #664]	; (8001628 <main+0x2dc>)
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
  g_MAIN_padDownPressedStartTime  = 0;
 8001394:	4ba5      	ldr	r3, [pc, #660]	; (800162c <main+0x2e0>)
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
  g_MAIN_padLeftPressedStartTime  = 0;
 800139a:	4ba5      	ldr	r3, [pc, #660]	; (8001630 <main+0x2e4>)
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
  g_MAIN_padRightPressedStartTime = 0;
 80013a0:	4ba4      	ldr	r3, [pc, #656]	; (8001634 <main+0x2e8>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
  g_MAIN_printOutput              = MAIN_PRINT_OUTPUT_TO_CONSOLE;
 80013a6:	4ba4      	ldr	r3, [pc, #656]	; (8001638 <main+0x2ec>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	701a      	strb	r2, [r3, #0]

  /* Initialize commands string FIFO */
  SFO_init(&l_commandsFifo);
 80013ac:	f107 031c 	add.w	r3, r7, #28
 80013b0:	4618      	mov	r0, r3
 80013b2:	f00a f8e9 	bl	800b588 <SFO_init>

  /* Setup console */
  CON_init(&huart1);
 80013b6:	48a1      	ldr	r0, [pc, #644]	; (800163c <main+0x2f0>)
 80013b8:	f008 f94e 	bl	8009658 <CON_init>

  /* Setup master connection */
  MAS_init(&huart4);
 80013bc:	48a0      	ldr	r0, [pc, #640]	; (8001640 <main+0x2f4>)
 80013be:	f009 fd87 	bl	800aed0 <MAS_init>
//  {
//    HAL_Delay(1000);
//  }

  /* Setup and start using logs */
  LOG_init    (&hrtc, STP_DEFAULT_IS_LOG_ON);
 80013c2:	2101      	movs	r1, #1
 80013c4:	489f      	ldr	r0, [pc, #636]	; (8001644 <main+0x2f8>)
 80013c6:	f009 fc79 	bl	800acbc <LOG_init>
  LOG_setLevel(STP_DEFAULT_LOG_LEVEL       );
 80013ca:	2000      	movs	r0, #0
 80013cc:	f009 fcae 	bl	800ad2c <LOG_setLevel>
  LOG_info    ("Starting RCFW"             );
 80013d0:	499d      	ldr	r1, [pc, #628]	; (8001648 <main+0x2fc>)
 80013d2:	2001      	movs	r0, #1
 80013d4:	f009 fcea 	bl	800adac <LOG_log>

  /* Display RCFW banner */
  MAIN_displayRcfwBanner();
 80013d8:	f7ff fe66 	bl	80010a8 <MAIN_displayRcfwBanner>

  /* Initialize Timer 6 */
  l_halReturnCode = HAL_TIM_Base_Start(&htim6);
 80013dc:	489b      	ldr	r0, [pc, #620]	; (800164c <main+0x300>)
 80013de:	f004 fe31 	bl	8006044 <HAL_TIM_Base_Start>
 80013e2:	4603      	mov	r3, r0
 80013e4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

  if (l_halReturnCode != HAL_OK)
 80013e8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d007      	beq.n	8001400 <main+0xb4>
  {
    LOG_error("HAL_TIM_Base_Start(&htim6) returned an error code: %d", l_halReturnCode);
 80013f0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80013f4:	461a      	mov	r2, r3
 80013f6:	4996      	ldr	r1, [pc, #600]	; (8001650 <main+0x304>)
 80013f8:	2003      	movs	r0, #3
 80013fa:	f009 fcd7 	bl	800adac <LOG_log>
 80013fe:	e003      	b.n	8001408 <main+0xbc>
  }
  else
  {
    LOG_info("Started TIMER 6 (time measurement)");
 8001400:	4994      	ldr	r1, [pc, #592]	; (8001654 <main+0x308>)
 8001402:	2001      	movs	r0, #1
 8001404:	f009 fcd2 	bl	800adac <LOG_log>
  }

  /* Initialize Timer 7 and delay function in utilities */
  UTI_init(&htim7);
 8001408:	4893      	ldr	r0, [pc, #588]	; (8001658 <main+0x30c>)
 800140a:	f00a f9bd 	bl	800b788 <UTI_init>

  l_halReturnCode = HAL_TIM_Base_Start_IT(&htim7);
 800140e:	4892      	ldr	r0, [pc, #584]	; (8001658 <main+0x30c>)
 8001410:	f004 fea2 	bl	8006158 <HAL_TIM_Base_Start_IT>
 8001414:	4603      	mov	r3, r0
 8001416:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

  if (l_halReturnCode != HAL_OK)
 800141a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800141e:	2b00      	cmp	r3, #0
 8001420:	d007      	beq.n	8001432 <main+0xe6>
  {
    LOG_error("HAL_TIM_Base_Start_IT(&htim7) returned an error code: %d", l_halReturnCode);
 8001422:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001426:	461a      	mov	r2, r3
 8001428:	498c      	ldr	r1, [pc, #560]	; (800165c <main+0x310>)
 800142a:	2003      	movs	r0, #3
 800142c:	f009 fcbe 	bl	800adac <LOG_log>
 8001430:	e003      	b.n	800143a <main+0xee>
  }
  else
  {
    LOG_info("Started TIMER 7 (utilities/delay)");
 8001432:	498b      	ldr	r1, [pc, #556]	; (8001660 <main+0x314>)
 8001434:	2001      	movs	r0, #1
 8001436:	f009 fcb9 	bl	800adac <LOG_log>
  }

  /* Initialize Timer 1 & green LED */
  LED_setMode(LED_MODE_BLINK_FAST);
 800143a:	2004      	movs	r0, #4
 800143c:	f009 fb96 	bl	800ab6c <LED_setMode>

  l_halReturnCode = HAL_TIM_Base_Start_IT(&htim1);
 8001440:	4888      	ldr	r0, [pc, #544]	; (8001664 <main+0x318>)
 8001442:	f004 fe89 	bl	8006158 <HAL_TIM_Base_Start_IT>
 8001446:	4603      	mov	r3, r0
 8001448:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

  if (l_halReturnCode != HAL_OK)
 800144c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001450:	2b00      	cmp	r3, #0
 8001452:	d007      	beq.n	8001464 <main+0x118>
  {
    LOG_error("HAL_TIM_Base_Start_IT(&htim1) returned an error code: %d", l_halReturnCode);
 8001454:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001458:	461a      	mov	r2, r3
 800145a:	4983      	ldr	r1, [pc, #524]	; (8001668 <main+0x31c>)
 800145c:	2003      	movs	r0, #3
 800145e:	f009 fca5 	bl	800adac <LOG_log>
 8001462:	e003      	b.n	800146c <main+0x120>
  }
  else
  {
    LOG_info("Started TIMER 1 (green LED)");
 8001464:	4981      	ldr	r1, [pc, #516]	; (800166c <main+0x320>)
 8001466:	2001      	movs	r0, #1
 8001468:	f009 fca0 	bl	800adac <LOG_log>
  }

  /* Initialize Timers 2, 3, 4 & 5 */
  l_halReturnCode  = HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 800146c:	213c      	movs	r1, #60	; 0x3c
 800146e:	4880      	ldr	r0, [pc, #512]	; (8001670 <main+0x324>)
 8001470:	f005 faaa 	bl	80069c8 <HAL_TIM_Encoder_Start_IT>
 8001474:	4603      	mov	r3, r0
 8001476:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  l_halReturnCode |= HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 800147a:	213c      	movs	r1, #60	; 0x3c
 800147c:	487d      	ldr	r0, [pc, #500]	; (8001674 <main+0x328>)
 800147e:	f005 faa3 	bl	80069c8 <HAL_TIM_Encoder_Start_IT>
 8001482:	4603      	mov	r3, r0
 8001484:	461a      	mov	r2, r3
 8001486:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800148a:	4313      	orrs	r3, r2
 800148c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  l_halReturnCode |= HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 8001490:	213c      	movs	r1, #60	; 0x3c
 8001492:	4879      	ldr	r0, [pc, #484]	; (8001678 <main+0x32c>)
 8001494:	f005 fa98 	bl	80069c8 <HAL_TIM_Encoder_Start_IT>
 8001498:	4603      	mov	r3, r0
 800149a:	461a      	mov	r2, r3
 800149c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80014a0:	4313      	orrs	r3, r2
 80014a2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  l_halReturnCode |= HAL_TIM_Encoder_Start_IT(&htim5, TIM_CHANNEL_ALL);
 80014a6:	213c      	movs	r1, #60	; 0x3c
 80014a8:	4874      	ldr	r0, [pc, #464]	; (800167c <main+0x330>)
 80014aa:	f005 fa8d 	bl	80069c8 <HAL_TIM_Encoder_Start_IT>
 80014ae:	4603      	mov	r3, r0
 80014b0:	461a      	mov	r2, r3
 80014b2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80014b6:	4313      	orrs	r3, r2
 80014b8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

  if (l_halReturnCode != HAL_OK)
 80014bc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d007      	beq.n	80014d4 <main+0x188>
  {
    LOG_error("HAL_TIM_Encoder_Start_IT(&htimX) returned error code(s): %d", l_halReturnCode);
 80014c4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80014c8:	461a      	mov	r2, r3
 80014ca:	496d      	ldr	r1, [pc, #436]	; (8001680 <main+0x334>)
 80014cc:	2003      	movs	r0, #3
 80014ce:	f009 fc6d 	bl	800adac <LOG_log>
 80014d2:	e003      	b.n	80014dc <main+0x190>
  }
  else
  {
    LOG_info("Started TIMER 2, 3, 4, 5 (encoders)");
 80014d4:	496b      	ldr	r1, [pc, #428]	; (8001684 <main+0x338>)
 80014d6:	2001      	movs	r0, #1
 80014d8:	f009 fc68 	bl	800adac <LOG_log>
  }

  /* Initialize Timer 8 */
  l_halReturnCode = HAL_TIM_Base_Start(&htim8);
 80014dc:	486a      	ldr	r0, [pc, #424]	; (8001688 <main+0x33c>)
 80014de:	f004 fdb1 	bl	8006044 <HAL_TIM_Base_Start>
 80014e2:	4603      	mov	r3, r0
 80014e4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

  if (l_halReturnCode != HAL_OK)
 80014e8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d007      	beq.n	8001500 <main+0x1b4>
  {
    LOG_error("HAL_TIM_Base_Start(&htim8) returned an error code: %d", l_halReturnCode);
 80014f0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80014f4:	461a      	mov	r2, r3
 80014f6:	4965      	ldr	r1, [pc, #404]	; (800168c <main+0x340>)
 80014f8:	2003      	movs	r0, #3
 80014fa:	f009 fc57 	bl	800adac <LOG_log>
 80014fe:	e003      	b.n	8001508 <main+0x1bc>
  }
  else
  {
    LOG_info("Started TIMER 8 (PWM channels)");
 8001500:	4963      	ldr	r1, [pc, #396]	; (8001690 <main+0x344>)
 8001502:	2001      	movs	r0, #1
 8001504:	f009 fc52 	bl	800adac <LOG_log>
  }

  /* Initialize battery monitor */
  BAT_init(&hadc1, &hrtc);
 8001508:	494e      	ldr	r1, [pc, #312]	; (8001644 <main+0x2f8>)
 800150a:	4862      	ldr	r0, [pc, #392]	; (8001694 <main+0x348>)
 800150c:	f007 fd70 	bl	8008ff0 <BAT_init>

  /* Initialize PWM channels */
  l_halReturnCode  = HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8001510:	2100      	movs	r1, #0
 8001512:	485d      	ldr	r0, [pc, #372]	; (8001688 <main+0x33c>)
 8001514:	f004 ff8e 	bl	8006434 <HAL_TIM_PWM_Start>
 8001518:	4603      	mov	r3, r0
 800151a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  l_halReturnCode |= HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 800151e:	2104      	movs	r1, #4
 8001520:	4859      	ldr	r0, [pc, #356]	; (8001688 <main+0x33c>)
 8001522:	f004 ff87 	bl	8006434 <HAL_TIM_PWM_Start>
 8001526:	4603      	mov	r3, r0
 8001528:	461a      	mov	r2, r3
 800152a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800152e:	4313      	orrs	r3, r2
 8001530:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  l_halReturnCode |= HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8001534:	2108      	movs	r1, #8
 8001536:	4854      	ldr	r0, [pc, #336]	; (8001688 <main+0x33c>)
 8001538:	f004 ff7c 	bl	8006434 <HAL_TIM_PWM_Start>
 800153c:	4603      	mov	r3, r0
 800153e:	461a      	mov	r2, r3
 8001540:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001544:	4313      	orrs	r3, r2
 8001546:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  l_halReturnCode |= HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 800154a:	210c      	movs	r1, #12
 800154c:	484e      	ldr	r0, [pc, #312]	; (8001688 <main+0x33c>)
 800154e:	f004 ff71 	bl	8006434 <HAL_TIM_PWM_Start>
 8001552:	4603      	mov	r3, r0
 8001554:	461a      	mov	r2, r3
 8001556:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800155a:	4313      	orrs	r3, r2
 800155c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

  if (l_halReturnCode != HAL_OK)
 8001560:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001564:	2b00      	cmp	r3, #0
 8001566:	d007      	beq.n	8001578 <main+0x22c>
  {
    LOG_error("HAL_TIM_PWM_Start(&htim8) returned error code(s): %d", l_halReturnCode);
 8001568:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800156c:	461a      	mov	r2, r3
 800156e:	494a      	ldr	r1, [pc, #296]	; (8001698 <main+0x34c>)
 8001570:	2003      	movs	r0, #3
 8001572:	f009 fc1b 	bl	800adac <LOG_log>
 8001576:	e003      	b.n	8001580 <main+0x234>
  }
  else
  {
    LOG_info("Started PWM channels");
 8001578:	4948      	ldr	r1, [pc, #288]	; (800169c <main+0x350>)
 800157a:	2001      	movs	r0, #1
 800157c:	f009 fc16 	bl	800adac <LOG_log>
  }

  /* Initialize bluetooth control and data */
  BLU_init    ();
 8001580:	f007 ff1a 	bl	80093b8 <BLU_init>
  BLU_initData(&l_bluetoothData);
 8001584:	f107 0308 	add.w	r3, r7, #8
 8001588:	4618      	mov	r0, r3
 800158a:	f007 ff25 	bl	80093d8 <BLU_initData>

  /* Initialize driving module */
  DRV_init(&htim8, &htim4, &htim5, &htim2, &htim3);
 800158e:	4b39      	ldr	r3, [pc, #228]	; (8001674 <main+0x328>)
 8001590:	9300      	str	r3, [sp, #0]
 8001592:	4b37      	ldr	r3, [pc, #220]	; (8001670 <main+0x324>)
 8001594:	4a39      	ldr	r2, [pc, #228]	; (800167c <main+0x330>)
 8001596:	4938      	ldr	r1, [pc, #224]	; (8001678 <main+0x32c>)
 8001598:	483b      	ldr	r0, [pc, #236]	; (8001688 <main+0x33c>)
 800159a:	f008 f8ed 	bl	8009778 <DRV_init>

  DRV_logInfo();
 800159e:	f008 fea9 	bl	800a2f4 <DRV_logInfo>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  /* Initialize time measurement for master board control */
  l_lastTime = __HAL_TIM_GET_COUNTER(&htim6);
 80015a2:	4b2a      	ldr	r3, [pc, #168]	; (800164c <main+0x300>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a8:	85fb      	strh	r3, [r7, #46]	; 0x2e

  while (1)
  {
    BLU_receiveData        (&l_bluetoothData);
 80015aa:	f107 0308 	add.w	r3, r7, #8
 80015ae:	4618      	mov	r0, r3
 80015b0:	f007 ff2a 	bl	8009408 <BLU_receiveData>
    DRV_updateFromBluetooth(&l_bluetoothData);
 80015b4:	f107 0308 	add.w	r3, r7, #8
 80015b8:	4618      	mov	r0, r3
 80015ba:	f008 fa19 	bl	80099f0 <DRV_updateFromBluetooth>

    l_driveMode = DRV_getMode();
 80015be:	f008 fe8f 	bl	800a2e0 <DRV_getMode>
 80015c2:	4603      	mov	r3, r0
 80015c4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    BAT_update         (&l_voltageInMv            );
 80015c8:	1d3b      	adds	r3, r7, #4
 80015ca:	4618      	mov	r0, r3
 80015cc:	f007 fd5e 	bl	800908c <BAT_update>
    MAIN_updateLedMode (l_driveMode, l_voltageInMv);
 80015d0:	687a      	ldr	r2, [r7, #4]
 80015d2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80015d6:	4611      	mov	r1, r2
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff fe83 	bl	80012e4 <MAIN_updateLedMode>
    MAIN_updateLogSetup(&l_bluetoothData          );
 80015de:	f107 0308 	add.w	r3, r7, #8
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7ff fdbc 	bl	8001160 <MAIN_updateLogSetup>

    UTI_delayUs(MAIN_LOOP_DELAY_IN_MS);
 80015e8:	f242 7010 	movw	r0, #10000	; 0x2710
 80015ec:	f00a f8e0 	bl	800b7b0 <UTI_delayUs>

    CON_updateFifo(&l_commandsFifo);
 80015f0:	f107 031c 	add.w	r3, r7, #28
 80015f4:	4618      	mov	r0, r3
 80015f6:	f008 f887 	bl	8009708 <CON_updateFifo>
    MAS_updateFifo(&l_commandsFifo);
 80015fa:	f107 031c 	add.w	r3, r7, #28
 80015fe:	4618      	mov	r0, r3
 8001600:	f009 fcbe 	bl	800af80 <MAS_updateFifo>

    l_currentTime = __HAL_TIM_GET_COUNTER(&htim6);
 8001604:	4b11      	ldr	r3, [pc, #68]	; (800164c <main+0x300>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800160a:	857b      	strh	r3, [r7, #42]	; 0x2a
    l_deltaTime   = l_lastTime - l_currentTime;
 800160c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800160e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	853b      	strh	r3, [r7, #40]	; 0x28
    l_lastTime    = l_currentTime;
 8001614:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001616:	85fb      	strh	r3, [r7, #46]	; 0x2e

    DRV_updateFromMaster(&l_commandsFifo, l_deltaTime);
 8001618:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800161a:	f107 031c 	add.w	r3, r7, #28
 800161e:	4611      	mov	r1, r2
 8001620:	4618      	mov	r0, r3
 8001622:	f008 fb25 	bl	8009c70 <DRV_updateFromMaster>
    BLU_receiveData        (&l_bluetoothData);
 8001626:	e7c0      	b.n	80015aa <main+0x25e>
 8001628:	20000208 	.word	0x20000208
 800162c:	2000020c 	.word	0x2000020c
 8001630:	20000210 	.word	0x20000210
 8001634:	20000214 	.word	0x20000214
 8001638:	200009c8 	.word	0x200009c8
 800163c:	200007d8 	.word	0x200007d8
 8001640:	200009cc 	.word	0x200009cc
 8001644:	2000084c 	.word	0x2000084c
 8001648:	0800eb9c 	.word	0x0800eb9c
 800164c:	20000860 	.word	0x20000860
 8001650:	0800ebac 	.word	0x0800ebac
 8001654:	0800ebe4 	.word	0x0800ebe4
 8001658:	20000af4 	.word	0x20000af4
 800165c:	0800ec08 	.word	0x0800ec08
 8001660:	0800ec44 	.word	0x0800ec44
 8001664:	20000914 	.word	0x20000914
 8001668:	0800ec68 	.word	0x0800ec68
 800166c:	0800eca4 	.word	0x0800eca4
 8001670:	20000a40 	.word	0x20000a40
 8001674:	200006f4 	.word	0x200006f4
 8001678:	2000058c 	.word	0x2000058c
 800167c:	20000640 	.word	0x20000640
 8001680:	0800ecc0 	.word	0x0800ecc0
 8001684:	0800ecfc 	.word	0x0800ecfc
 8001688:	200004d8 	.word	0x200004d8
 800168c:	0800ed20 	.word	0x0800ed20
 8001690:	0800ed58 	.word	0x0800ed58
 8001694:	200007a8 	.word	0x200007a8
 8001698:	0800ed78 	.word	0x0800ed78
 800169c:	0800edb0 	.word	0x0800edb0

080016a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b096      	sub	sp, #88	; 0x58
 80016a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80016aa:	2228      	movs	r2, #40	; 0x28
 80016ac:	2100      	movs	r1, #0
 80016ae:	4618      	mov	r0, r3
 80016b0:	f00a f990 	bl	800b9d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016b4:	f107 031c 	add.w	r3, r7, #28
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	605a      	str	r2, [r3, #4]
 80016be:	609a      	str	r2, [r3, #8]
 80016c0:	60da      	str	r2, [r3, #12]
 80016c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016c4:	1d3b      	adds	r3, r7, #4
 80016c6:	2200      	movs	r2, #0
 80016c8:	601a      	str	r2, [r3, #0]
 80016ca:	605a      	str	r2, [r3, #4]
 80016cc:	609a      	str	r2, [r3, #8]
 80016ce:	60da      	str	r2, [r3, #12]
 80016d0:	611a      	str	r2, [r3, #16]
 80016d2:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80016d4:	230a      	movs	r3, #10
 80016d6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016d8:	2301      	movs	r3, #1
 80016da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016dc:	2310      	movs	r3, #16
 80016de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80016e0:	2301      	movs	r3, #1
 80016e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80016e4:	2300      	movs	r3, #0
 80016e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80016ec:	4618      	mov	r0, r3
 80016ee:	f002 fd53 	bl	8004198 <HAL_RCC_OscConfig>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80016f8:	f000 fcd6 	bl	80020a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016fc:	230f      	movs	r3, #15
 80016fe:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001700:	2300      	movs	r3, #0
 8001702:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001704:	2300      	movs	r3, #0
 8001706:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001708:	2300      	movs	r3, #0
 800170a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800170c:	2300      	movs	r3, #0
 800170e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001710:	f107 031c 	add.w	r3, r7, #28
 8001714:	2100      	movs	r1, #0
 8001716:	4618      	mov	r0, r3
 8001718:	f003 f8ae 	bl	8004878 <HAL_RCC_ClockConfig>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8001722:	f000 fcc1 	bl	80020a8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 8001726:	2303      	movs	r3, #3
 8001728:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800172a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800172e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001730:	2300      	movs	r3, #0
 8001732:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001734:	1d3b      	adds	r3, r7, #4
 8001736:	4618      	mov	r0, r3
 8001738:	f003 fade 	bl	8004cf8 <HAL_RCCEx_PeriphCLKConfig>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001742:	f000 fcb1 	bl	80020a8 <Error_Handler>
  }
}
 8001746:	bf00      	nop
 8001748:	3758      	adds	r7, #88	; 0x58
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
	...

08001750 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001756:	1d3b      	adds	r3, r7, #4
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	605a      	str	r2, [r3, #4]
 800175e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001760:	4b18      	ldr	r3, [pc, #96]	; (80017c4 <MX_ADC1_Init+0x74>)
 8001762:	4a19      	ldr	r2, [pc, #100]	; (80017c8 <MX_ADC1_Init+0x78>)
 8001764:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001766:	4b17      	ldr	r3, [pc, #92]	; (80017c4 <MX_ADC1_Init+0x74>)
 8001768:	2200      	movs	r2, #0
 800176a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800176c:	4b15      	ldr	r3, [pc, #84]	; (80017c4 <MX_ADC1_Init+0x74>)
 800176e:	2200      	movs	r2, #0
 8001770:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001772:	4b14      	ldr	r3, [pc, #80]	; (80017c4 <MX_ADC1_Init+0x74>)
 8001774:	2200      	movs	r2, #0
 8001776:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001778:	4b12      	ldr	r3, [pc, #72]	; (80017c4 <MX_ADC1_Init+0x74>)
 800177a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800177e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001780:	4b10      	ldr	r3, [pc, #64]	; (80017c4 <MX_ADC1_Init+0x74>)
 8001782:	2200      	movs	r2, #0
 8001784:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001786:	4b0f      	ldr	r3, [pc, #60]	; (80017c4 <MX_ADC1_Init+0x74>)
 8001788:	2201      	movs	r2, #1
 800178a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800178c:	480d      	ldr	r0, [pc, #52]	; (80017c4 <MX_ADC1_Init+0x74>)
 800178e:	f001 f971 	bl	8002a74 <HAL_ADC_Init>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001798:	f000 fc86 	bl	80020a8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800179c:	2305      	movs	r3, #5
 800179e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80017a0:	2301      	movs	r3, #1
 80017a2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80017a4:	2300      	movs	r3, #0
 80017a6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017a8:	1d3b      	adds	r3, r7, #4
 80017aa:	4619      	mov	r1, r3
 80017ac:	4805      	ldr	r0, [pc, #20]	; (80017c4 <MX_ADC1_Init+0x74>)
 80017ae:	f001 fd13 	bl	80031d8 <HAL_ADC_ConfigChannel>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80017b8:	f000 fc76 	bl	80020a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80017bc:	bf00      	nop
 80017be:	3710      	adds	r7, #16
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	200007a8 	.word	0x200007a8
 80017c8:	40012400 	.word	0x40012400

080017cc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80017d2:	1d3b      	adds	r3, r7, #4
 80017d4:	2100      	movs	r1, #0
 80017d6:	460a      	mov	r2, r1
 80017d8:	801a      	strh	r2, [r3, #0]
 80017da:	460a      	mov	r2, r1
 80017dc:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 80017de:	2300      	movs	r3, #0
 80017e0:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80017e2:	4b1d      	ldr	r3, [pc, #116]	; (8001858 <MX_RTC_Init+0x8c>)
 80017e4:	4a1d      	ldr	r2, [pc, #116]	; (800185c <MX_RTC_Init+0x90>)
 80017e6:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80017e8:	4b1b      	ldr	r3, [pc, #108]	; (8001858 <MX_RTC_Init+0x8c>)
 80017ea:	f04f 32ff 	mov.w	r2, #4294967295
 80017ee:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 80017f0:	4b19      	ldr	r3, [pc, #100]	; (8001858 <MX_RTC_Init+0x8c>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80017f6:	4818      	ldr	r0, [pc, #96]	; (8001858 <MX_RTC_Init+0x8c>)
 80017f8:	f003 fc9a 	bl	8005130 <HAL_RTC_Init>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <MX_RTC_Init+0x3a>
  {
    Error_Handler();
 8001802:	f000 fc51 	bl	80020a8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001806:	2300      	movs	r3, #0
 8001808:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800180a:	2300      	movs	r3, #0
 800180c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800180e:	2300      	movs	r3, #0
 8001810:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001812:	1d3b      	adds	r3, r7, #4
 8001814:	2201      	movs	r2, #1
 8001816:	4619      	mov	r1, r3
 8001818:	480f      	ldr	r0, [pc, #60]	; (8001858 <MX_RTC_Init+0x8c>)
 800181a:	f003 fd53 	bl	80052c4 <HAL_RTC_SetTime>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <MX_RTC_Init+0x5c>
  {
    Error_Handler();
 8001824:	f000 fc40 	bl	80020a8 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001828:	2301      	movs	r3, #1
 800182a:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 800182c:	2301      	movs	r3, #1
 800182e:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 8001830:	2301      	movs	r3, #1
 8001832:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 8001834:	2300      	movs	r3, #0
 8001836:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8001838:	463b      	mov	r3, r7
 800183a:	2201      	movs	r2, #1
 800183c:	4619      	mov	r1, r3
 800183e:	4806      	ldr	r0, [pc, #24]	; (8001858 <MX_RTC_Init+0x8c>)
 8001840:	f003 ff0c 	bl	800565c <HAL_RTC_SetDate>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <MX_RTC_Init+0x82>
  {
    Error_Handler();
 800184a:	f000 fc2d 	bl	80020a8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800184e:	bf00      	nop
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	2000084c 	.word	0x2000084c
 800185c:	40002800 	.word	0x40002800

08001860 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b086      	sub	sp, #24
 8001864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001866:	f107 0308 	add.w	r3, r7, #8
 800186a:	2200      	movs	r2, #0
 800186c:	601a      	str	r2, [r3, #0]
 800186e:	605a      	str	r2, [r3, #4]
 8001870:	609a      	str	r2, [r3, #8]
 8001872:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001874:	463b      	mov	r3, r7
 8001876:	2200      	movs	r2, #0
 8001878:	601a      	str	r2, [r3, #0]
 800187a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800187c:	4b1e      	ldr	r3, [pc, #120]	; (80018f8 <MX_TIM1_Init+0x98>)
 800187e:	4a1f      	ldr	r2, [pc, #124]	; (80018fc <MX_TIM1_Init+0x9c>)
 8001880:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7999;
 8001882:	4b1d      	ldr	r3, [pc, #116]	; (80018f8 <MX_TIM1_Init+0x98>)
 8001884:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001888:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800188a:	4b1b      	ldr	r3, [pc, #108]	; (80018f8 <MX_TIM1_Init+0x98>)
 800188c:	2200      	movs	r2, #0
 800188e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 249;
 8001890:	4b19      	ldr	r3, [pc, #100]	; (80018f8 <MX_TIM1_Init+0x98>)
 8001892:	22f9      	movs	r2, #249	; 0xf9
 8001894:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001896:	4b18      	ldr	r3, [pc, #96]	; (80018f8 <MX_TIM1_Init+0x98>)
 8001898:	2200      	movs	r2, #0
 800189a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800189c:	4b16      	ldr	r3, [pc, #88]	; (80018f8 <MX_TIM1_Init+0x98>)
 800189e:	2200      	movs	r2, #0
 80018a0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80018a2:	4b15      	ldr	r3, [pc, #84]	; (80018f8 <MX_TIM1_Init+0x98>)
 80018a4:	2280      	movs	r2, #128	; 0x80
 80018a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80018a8:	4813      	ldr	r0, [pc, #76]	; (80018f8 <MX_TIM1_Init+0x98>)
 80018aa:	f004 faf9 	bl	8005ea0 <HAL_TIM_Base_Init>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80018b4:	f000 fbf8 	bl	80020a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80018be:	f107 0308 	add.w	r3, r7, #8
 80018c2:	4619      	mov	r1, r3
 80018c4:	480c      	ldr	r0, [pc, #48]	; (80018f8 <MX_TIM1_Init+0x98>)
 80018c6:	f005 fc23 	bl	8007110 <HAL_TIM_ConfigClockSource>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80018d0:	f000 fbea 	bl	80020a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018d4:	2300      	movs	r3, #0
 80018d6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018d8:	2300      	movs	r3, #0
 80018da:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018dc:	463b      	mov	r3, r7
 80018de:	4619      	mov	r1, r3
 80018e0:	4805      	ldr	r0, [pc, #20]	; (80018f8 <MX_TIM1_Init+0x98>)
 80018e2:	f006 fb71 	bl	8007fc8 <HAL_TIMEx_MasterConfigSynchronization>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80018ec:	f000 fbdc 	bl	80020a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80018f0:	bf00      	nop
 80018f2:	3718      	adds	r7, #24
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	20000914 	.word	0x20000914
 80018fc:	40012c00 	.word	0x40012c00

08001900 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b08c      	sub	sp, #48	; 0x30
 8001904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001906:	f107 030c 	add.w	r3, r7, #12
 800190a:	2224      	movs	r2, #36	; 0x24
 800190c:	2100      	movs	r1, #0
 800190e:	4618      	mov	r0, r3
 8001910:	f00a f860 	bl	800b9d4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001914:	1d3b      	adds	r3, r7, #4
 8001916:	2200      	movs	r2, #0
 8001918:	601a      	str	r2, [r3, #0]
 800191a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800191c:	4b21      	ldr	r3, [pc, #132]	; (80019a4 <MX_TIM2_Init+0xa4>)
 800191e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001922:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001924:	4b1f      	ldr	r3, [pc, #124]	; (80019a4 <MX_TIM2_Init+0xa4>)
 8001926:	2200      	movs	r2, #0
 8001928:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800192a:	4b1e      	ldr	r3, [pc, #120]	; (80019a4 <MX_TIM2_Init+0xa4>)
 800192c:	2200      	movs	r2, #0
 800192e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001930:	4b1c      	ldr	r3, [pc, #112]	; (80019a4 <MX_TIM2_Init+0xa4>)
 8001932:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001936:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001938:	4b1a      	ldr	r3, [pc, #104]	; (80019a4 <MX_TIM2_Init+0xa4>)
 800193a:	2200      	movs	r2, #0
 800193c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800193e:	4b19      	ldr	r3, [pc, #100]	; (80019a4 <MX_TIM2_Init+0xa4>)
 8001940:	2280      	movs	r2, #128	; 0x80
 8001942:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001944:	2303      	movs	r3, #3
 8001946:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001948:	2300      	movs	r3, #0
 800194a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800194c:	2301      	movs	r3, #1
 800194e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001950:	2300      	movs	r3, #0
 8001952:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001954:	230a      	movs	r3, #10
 8001956:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001958:	2300      	movs	r3, #0
 800195a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800195c:	2301      	movs	r3, #1
 800195e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001960:	2300      	movs	r3, #0
 8001962:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001964:	2300      	movs	r3, #0
 8001966:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001968:	f107 030c 	add.w	r3, r7, #12
 800196c:	4619      	mov	r1, r3
 800196e:	480d      	ldr	r0, [pc, #52]	; (80019a4 <MX_TIM2_Init+0xa4>)
 8001970:	f004 fe88 	bl	8006684 <HAL_TIM_Encoder_Init>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800197a:	f000 fb95 	bl	80020a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800197e:	2300      	movs	r3, #0
 8001980:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001982:	2300      	movs	r3, #0
 8001984:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001986:	1d3b      	adds	r3, r7, #4
 8001988:	4619      	mov	r1, r3
 800198a:	4806      	ldr	r0, [pc, #24]	; (80019a4 <MX_TIM2_Init+0xa4>)
 800198c:	f006 fb1c 	bl	8007fc8 <HAL_TIMEx_MasterConfigSynchronization>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001996:	f000 fb87 	bl	80020a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800199a:	bf00      	nop
 800199c:	3730      	adds	r7, #48	; 0x30
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	20000a40 	.word	0x20000a40

080019a8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b08c      	sub	sp, #48	; 0x30
 80019ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80019ae:	f107 030c 	add.w	r3, r7, #12
 80019b2:	2224      	movs	r2, #36	; 0x24
 80019b4:	2100      	movs	r1, #0
 80019b6:	4618      	mov	r0, r3
 80019b8:	f00a f80c 	bl	800b9d4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019bc:	1d3b      	adds	r3, r7, #4
 80019be:	2200      	movs	r2, #0
 80019c0:	601a      	str	r2, [r3, #0]
 80019c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019c4:	4b20      	ldr	r3, [pc, #128]	; (8001a48 <MX_TIM3_Init+0xa0>)
 80019c6:	4a21      	ldr	r2, [pc, #132]	; (8001a4c <MX_TIM3_Init+0xa4>)
 80019c8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80019ca:	4b1f      	ldr	r3, [pc, #124]	; (8001a48 <MX_TIM3_Init+0xa0>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019d0:	4b1d      	ldr	r3, [pc, #116]	; (8001a48 <MX_TIM3_Init+0xa0>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80019d6:	4b1c      	ldr	r3, [pc, #112]	; (8001a48 <MX_TIM3_Init+0xa0>)
 80019d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019dc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019de:	4b1a      	ldr	r3, [pc, #104]	; (8001a48 <MX_TIM3_Init+0xa0>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80019e4:	4b18      	ldr	r3, [pc, #96]	; (8001a48 <MX_TIM3_Init+0xa0>)
 80019e6:	2280      	movs	r2, #128	; 0x80
 80019e8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80019ea:	2303      	movs	r3, #3
 80019ec:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80019ee:	2300      	movs	r3, #0
 80019f0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80019f2:	2301      	movs	r3, #1
 80019f4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80019f6:	2300      	movs	r3, #0
 80019f8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80019fa:	230a      	movs	r3, #10
 80019fc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80019fe:	2300      	movs	r3, #0
 8001a00:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a02:	2301      	movs	r3, #1
 8001a04:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a06:	2300      	movs	r3, #0
 8001a08:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001a0e:	f107 030c 	add.w	r3, r7, #12
 8001a12:	4619      	mov	r1, r3
 8001a14:	480c      	ldr	r0, [pc, #48]	; (8001a48 <MX_TIM3_Init+0xa0>)
 8001a16:	f004 fe35 	bl	8006684 <HAL_TIM_Encoder_Init>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001a20:	f000 fb42 	bl	80020a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a24:	2300      	movs	r3, #0
 8001a26:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a2c:	1d3b      	adds	r3, r7, #4
 8001a2e:	4619      	mov	r1, r3
 8001a30:	4805      	ldr	r0, [pc, #20]	; (8001a48 <MX_TIM3_Init+0xa0>)
 8001a32:	f006 fac9 	bl	8007fc8 <HAL_TIMEx_MasterConfigSynchronization>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001a3c:	f000 fb34 	bl	80020a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a40:	bf00      	nop
 8001a42:	3730      	adds	r7, #48	; 0x30
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	200006f4 	.word	0x200006f4
 8001a4c:	40000400 	.word	0x40000400

08001a50 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b08c      	sub	sp, #48	; 0x30
 8001a54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a56:	f107 030c 	add.w	r3, r7, #12
 8001a5a:	2224      	movs	r2, #36	; 0x24
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f009 ffb8 	bl	800b9d4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a64:	1d3b      	adds	r3, r7, #4
 8001a66:	2200      	movs	r2, #0
 8001a68:	601a      	str	r2, [r3, #0]
 8001a6a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001a6c:	4b20      	ldr	r3, [pc, #128]	; (8001af0 <MX_TIM4_Init+0xa0>)
 8001a6e:	4a21      	ldr	r2, [pc, #132]	; (8001af4 <MX_TIM4_Init+0xa4>)
 8001a70:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001a72:	4b1f      	ldr	r3, [pc, #124]	; (8001af0 <MX_TIM4_Init+0xa0>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a78:	4b1d      	ldr	r3, [pc, #116]	; (8001af0 <MX_TIM4_Init+0xa0>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001a7e:	4b1c      	ldr	r3, [pc, #112]	; (8001af0 <MX_TIM4_Init+0xa0>)
 8001a80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a84:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a86:	4b1a      	ldr	r3, [pc, #104]	; (8001af0 <MX_TIM4_Init+0xa0>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a8c:	4b18      	ldr	r3, [pc, #96]	; (8001af0 <MX_TIM4_Init+0xa0>)
 8001a8e:	2280      	movs	r2, #128	; 0x80
 8001a90:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001a92:	2303      	movs	r3, #3
 8001a94:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a96:	2300      	movs	r3, #0
 8001a98:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001aa2:	230a      	movs	r3, #10
 8001aa4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001ab6:	f107 030c 	add.w	r3, r7, #12
 8001aba:	4619      	mov	r1, r3
 8001abc:	480c      	ldr	r0, [pc, #48]	; (8001af0 <MX_TIM4_Init+0xa0>)
 8001abe:	f004 fde1 	bl	8006684 <HAL_TIM_Encoder_Init>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001ac8:	f000 faee 	bl	80020a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001acc:	2300      	movs	r3, #0
 8001ace:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001ad4:	1d3b      	adds	r3, r7, #4
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	4805      	ldr	r0, [pc, #20]	; (8001af0 <MX_TIM4_Init+0xa0>)
 8001ada:	f006 fa75 	bl	8007fc8 <HAL_TIMEx_MasterConfigSynchronization>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001ae4:	f000 fae0 	bl	80020a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001ae8:	bf00      	nop
 8001aea:	3730      	adds	r7, #48	; 0x30
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	2000058c 	.word	0x2000058c
 8001af4:	40000800 	.word	0x40000800

08001af8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b08c      	sub	sp, #48	; 0x30
 8001afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001afe:	f107 030c 	add.w	r3, r7, #12
 8001b02:	2224      	movs	r2, #36	; 0x24
 8001b04:	2100      	movs	r1, #0
 8001b06:	4618      	mov	r0, r3
 8001b08:	f009 ff64 	bl	800b9d4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b0c:	1d3b      	adds	r3, r7, #4
 8001b0e:	2200      	movs	r2, #0
 8001b10:	601a      	str	r2, [r3, #0]
 8001b12:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001b14:	4b20      	ldr	r3, [pc, #128]	; (8001b98 <MX_TIM5_Init+0xa0>)
 8001b16:	4a21      	ldr	r2, [pc, #132]	; (8001b9c <MX_TIM5_Init+0xa4>)
 8001b18:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001b1a:	4b1f      	ldr	r3, [pc, #124]	; (8001b98 <MX_TIM5_Init+0xa0>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b20:	4b1d      	ldr	r3, [pc, #116]	; (8001b98 <MX_TIM5_Init+0xa0>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8001b26:	4b1c      	ldr	r3, [pc, #112]	; (8001b98 <MX_TIM5_Init+0xa0>)
 8001b28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b2c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b2e:	4b1a      	ldr	r3, [pc, #104]	; (8001b98 <MX_TIM5_Init+0xa0>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b34:	4b18      	ldr	r3, [pc, #96]	; (8001b98 <MX_TIM5_Init+0xa0>)
 8001b36:	2280      	movs	r2, #128	; 0x80
 8001b38:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b42:	2301      	movs	r3, #1
 8001b44:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b46:	2300      	movs	r3, #0
 8001b48:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001b4a:	230a      	movs	r3, #10
 8001b4c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b52:	2301      	movs	r3, #1
 8001b54:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b56:	2300      	movs	r3, #0
 8001b58:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001b5e:	f107 030c 	add.w	r3, r7, #12
 8001b62:	4619      	mov	r1, r3
 8001b64:	480c      	ldr	r0, [pc, #48]	; (8001b98 <MX_TIM5_Init+0xa0>)
 8001b66:	f004 fd8d 	bl	8006684 <HAL_TIM_Encoder_Init>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001b70:	f000 fa9a 	bl	80020a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b74:	2300      	movs	r3, #0
 8001b76:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001b7c:	1d3b      	adds	r3, r7, #4
 8001b7e:	4619      	mov	r1, r3
 8001b80:	4805      	ldr	r0, [pc, #20]	; (8001b98 <MX_TIM5_Init+0xa0>)
 8001b82:	f006 fa21 	bl	8007fc8 <HAL_TIMEx_MasterConfigSynchronization>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001b8c:	f000 fa8c 	bl	80020a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001b90:	bf00      	nop
 8001b92:	3730      	adds	r7, #48	; 0x30
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	20000640 	.word	0x20000640
 8001b9c:	40000c00 	.word	0x40000c00

08001ba0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ba6:	463b      	mov	r3, r7
 8001ba8:	2200      	movs	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001bae:	4b15      	ldr	r3, [pc, #84]	; (8001c04 <MX_TIM6_Init+0x64>)
 8001bb0:	4a15      	ldr	r2, [pc, #84]	; (8001c08 <MX_TIM6_Init+0x68>)
 8001bb2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7;
 8001bb4:	4b13      	ldr	r3, [pc, #76]	; (8001c04 <MX_TIM6_Init+0x64>)
 8001bb6:	2207      	movs	r2, #7
 8001bb8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bba:	4b12      	ldr	r3, [pc, #72]	; (8001c04 <MX_TIM6_Init+0x64>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001bc0:	4b10      	ldr	r3, [pc, #64]	; (8001c04 <MX_TIM6_Init+0x64>)
 8001bc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bc6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001bc8:	4b0e      	ldr	r3, [pc, #56]	; (8001c04 <MX_TIM6_Init+0x64>)
 8001bca:	2280      	movs	r2, #128	; 0x80
 8001bcc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001bce:	480d      	ldr	r0, [pc, #52]	; (8001c04 <MX_TIM6_Init+0x64>)
 8001bd0:	f004 f966 	bl	8005ea0 <HAL_TIM_Base_Init>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001bda:	f000 fa65 	bl	80020a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bde:	2300      	movs	r3, #0
 8001be0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001be2:	2300      	movs	r3, #0
 8001be4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001be6:	463b      	mov	r3, r7
 8001be8:	4619      	mov	r1, r3
 8001bea:	4806      	ldr	r0, [pc, #24]	; (8001c04 <MX_TIM6_Init+0x64>)
 8001bec:	f006 f9ec 	bl	8007fc8 <HAL_TIMEx_MasterConfigSynchronization>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001bf6:	f000 fa57 	bl	80020a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001bfa:	bf00      	nop
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	20000860 	.word	0x20000860
 8001c08:	40001000 	.word	0x40001000

08001c0c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c12:	463b      	mov	r3, r7
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]
 8001c18:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001c1a:	4b15      	ldr	r3, [pc, #84]	; (8001c70 <MX_TIM7_Init+0x64>)
 8001c1c:	4a15      	ldr	r2, [pc, #84]	; (8001c74 <MX_TIM7_Init+0x68>)
 8001c1e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7;
 8001c20:	4b13      	ldr	r3, [pc, #76]	; (8001c70 <MX_TIM7_Init+0x64>)
 8001c22:	2207      	movs	r2, #7
 8001c24:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c26:	4b12      	ldr	r3, [pc, #72]	; (8001c70 <MX_TIM7_Init+0x64>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8001c2c:	4b10      	ldr	r3, [pc, #64]	; (8001c70 <MX_TIM7_Init+0x64>)
 8001c2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c32:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c34:	4b0e      	ldr	r3, [pc, #56]	; (8001c70 <MX_TIM7_Init+0x64>)
 8001c36:	2280      	movs	r2, #128	; 0x80
 8001c38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001c3a:	480d      	ldr	r0, [pc, #52]	; (8001c70 <MX_TIM7_Init+0x64>)
 8001c3c:	f004 f930 	bl	8005ea0 <HAL_TIM_Base_Init>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001c46:	f000 fa2f 	bl	80020a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001c52:	463b      	mov	r3, r7
 8001c54:	4619      	mov	r1, r3
 8001c56:	4806      	ldr	r0, [pc, #24]	; (8001c70 <MX_TIM7_Init+0x64>)
 8001c58:	f006 f9b6 	bl	8007fc8 <HAL_TIMEx_MasterConfigSynchronization>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001c62:	f000 fa21 	bl	80020a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001c66:	bf00      	nop
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	20000af4 	.word	0x20000af4
 8001c74:	40001400 	.word	0x40001400

08001c78 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b096      	sub	sp, #88	; 0x58
 8001c7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c7e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001c82:	2200      	movs	r2, #0
 8001c84:	601a      	str	r2, [r3, #0]
 8001c86:	605a      	str	r2, [r3, #4]
 8001c88:	609a      	str	r2, [r3, #8]
 8001c8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c8c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]
 8001c94:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	601a      	str	r2, [r3, #0]
 8001c9e:	605a      	str	r2, [r3, #4]
 8001ca0:	609a      	str	r2, [r3, #8]
 8001ca2:	60da      	str	r2, [r3, #12]
 8001ca4:	611a      	str	r2, [r3, #16]
 8001ca6:	615a      	str	r2, [r3, #20]
 8001ca8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001caa:	1d3b      	adds	r3, r7, #4
 8001cac:	2220      	movs	r2, #32
 8001cae:	2100      	movs	r1, #0
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f009 fe8f 	bl	800b9d4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001cb6:	4b50      	ldr	r3, [pc, #320]	; (8001df8 <MX_TIM8_Init+0x180>)
 8001cb8:	4a50      	ldr	r2, [pc, #320]	; (8001dfc <MX_TIM8_Init+0x184>)
 8001cba:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 7;
 8001cbc:	4b4e      	ldr	r3, [pc, #312]	; (8001df8 <MX_TIM8_Init+0x180>)
 8001cbe:	2207      	movs	r2, #7
 8001cc0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cc2:	4b4d      	ldr	r3, [pc, #308]	; (8001df8 <MX_TIM8_Init+0x180>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 100;
 8001cc8:	4b4b      	ldr	r3, [pc, #300]	; (8001df8 <MX_TIM8_Init+0x180>)
 8001cca:	2264      	movs	r2, #100	; 0x64
 8001ccc:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cce:	4b4a      	ldr	r3, [pc, #296]	; (8001df8 <MX_TIM8_Init+0x180>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001cd4:	4b48      	ldr	r3, [pc, #288]	; (8001df8 <MX_TIM8_Init+0x180>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001cda:	4b47      	ldr	r3, [pc, #284]	; (8001df8 <MX_TIM8_Init+0x180>)
 8001cdc:	2280      	movs	r2, #128	; 0x80
 8001cde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001ce0:	4845      	ldr	r0, [pc, #276]	; (8001df8 <MX_TIM8_Init+0x180>)
 8001ce2:	f004 f8dd 	bl	8005ea0 <HAL_TIM_Base_Init>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8001cec:	f000 f9dc 	bl	80020a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cf4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001cf6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	483e      	ldr	r0, [pc, #248]	; (8001df8 <MX_TIM8_Init+0x180>)
 8001cfe:	f005 fa07 	bl	8007110 <HAL_TIM_ConfigClockSource>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8001d08:	f000 f9ce 	bl	80020a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001d0c:	483a      	ldr	r0, [pc, #232]	; (8001df8 <MX_TIM8_Init+0x180>)
 8001d0e:	f004 fab5 	bl	800627c <HAL_TIM_PWM_Init>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d001      	beq.n	8001d1c <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001d18:	f000 f9c6 	bl	80020a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d20:	2300      	movs	r3, #0
 8001d22:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001d24:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d28:	4619      	mov	r1, r3
 8001d2a:	4833      	ldr	r0, [pc, #204]	; (8001df8 <MX_TIM8_Init+0x180>)
 8001d2c:	f006 f94c 	bl	8007fc8 <HAL_TIMEx_MasterConfigSynchronization>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 8001d36:	f000 f9b7 	bl	80020a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d3a:	2360      	movs	r3, #96	; 0x60
 8001d3c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d42:	2300      	movs	r3, #0
 8001d44:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001d46:	2300      	movs	r3, #0
 8001d48:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d52:	2300      	movs	r3, #0
 8001d54:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	4826      	ldr	r0, [pc, #152]	; (8001df8 <MX_TIM8_Init+0x180>)
 8001d60:	f005 f838 	bl	8006dd4 <HAL_TIM_PWM_ConfigChannel>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 8001d6a:	f000 f99d 	bl	80020a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d72:	2204      	movs	r2, #4
 8001d74:	4619      	mov	r1, r3
 8001d76:	4820      	ldr	r0, [pc, #128]	; (8001df8 <MX_TIM8_Init+0x180>)
 8001d78:	f005 f82c 	bl	8006dd4 <HAL_TIM_PWM_ConfigChannel>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <MX_TIM8_Init+0x10e>
  {
    Error_Handler();
 8001d82:	f000 f991 	bl	80020a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d8a:	2208      	movs	r2, #8
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	481a      	ldr	r0, [pc, #104]	; (8001df8 <MX_TIM8_Init+0x180>)
 8001d90:	f005 f820 	bl	8006dd4 <HAL_TIM_PWM_ConfigChannel>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <MX_TIM8_Init+0x126>
  {
    Error_Handler();
 8001d9a:	f000 f985 	bl	80020a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001d9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001da2:	220c      	movs	r2, #12
 8001da4:	4619      	mov	r1, r3
 8001da6:	4814      	ldr	r0, [pc, #80]	; (8001df8 <MX_TIM8_Init+0x180>)
 8001da8:	f005 f814 	bl	8006dd4 <HAL_TIM_PWM_ConfigChannel>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <MX_TIM8_Init+0x13e>
  {
    Error_Handler();
 8001db2:	f000 f979 	bl	80020a8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001db6:	2300      	movs	r3, #0
 8001db8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001dca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001dce:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001dd4:	1d3b      	adds	r3, r7, #4
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	4807      	ldr	r0, [pc, #28]	; (8001df8 <MX_TIM8_Init+0x180>)
 8001dda:	f006 f9c5 	bl	8008168 <HAL_TIMEx_ConfigBreakDeadTime>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <MX_TIM8_Init+0x170>
  {
    Error_Handler();
 8001de4:	f000 f960 	bl	80020a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001de8:	4803      	ldr	r0, [pc, #12]	; (8001df8 <MX_TIM8_Init+0x180>)
 8001dea:	f000 fb7f 	bl	80024ec <HAL_TIM_MspPostInit>

}
 8001dee:	bf00      	nop
 8001df0:	3758      	adds	r7, #88	; 0x58
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	200004d8 	.word	0x200004d8
 8001dfc:	40013400 	.word	0x40013400

08001e00 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001e04:	4b11      	ldr	r3, [pc, #68]	; (8001e4c <MX_UART4_Init+0x4c>)
 8001e06:	4a12      	ldr	r2, [pc, #72]	; (8001e50 <MX_UART4_Init+0x50>)
 8001e08:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001e0a:	4b10      	ldr	r3, [pc, #64]	; (8001e4c <MX_UART4_Init+0x4c>)
 8001e0c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001e10:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001e12:	4b0e      	ldr	r3, [pc, #56]	; (8001e4c <MX_UART4_Init+0x4c>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001e18:	4b0c      	ldr	r3, [pc, #48]	; (8001e4c <MX_UART4_Init+0x4c>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001e1e:	4b0b      	ldr	r3, [pc, #44]	; (8001e4c <MX_UART4_Init+0x4c>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001e24:	4b09      	ldr	r3, [pc, #36]	; (8001e4c <MX_UART4_Init+0x4c>)
 8001e26:	220c      	movs	r2, #12
 8001e28:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e2a:	4b08      	ldr	r3, [pc, #32]	; (8001e4c <MX_UART4_Init+0x4c>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e30:	4b06      	ldr	r3, [pc, #24]	; (8001e4c <MX_UART4_Init+0x4c>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001e36:	4805      	ldr	r0, [pc, #20]	; (8001e4c <MX_UART4_Init+0x4c>)
 8001e38:	f006 fa7e 	bl	8008338 <HAL_UART_Init>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001e42:	f000 f931 	bl	80020a8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001e46:	bf00      	nop
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	200009cc 	.word	0x200009cc
 8001e50:	40004c00 	.word	0x40004c00

08001e54 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e58:	4b11      	ldr	r3, [pc, #68]	; (8001ea0 <MX_USART1_UART_Init+0x4c>)
 8001e5a:	4a12      	ldr	r2, [pc, #72]	; (8001ea4 <MX_USART1_UART_Init+0x50>)
 8001e5c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001e5e:	4b10      	ldr	r3, [pc, #64]	; (8001ea0 <MX_USART1_UART_Init+0x4c>)
 8001e60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e64:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e66:	4b0e      	ldr	r3, [pc, #56]	; (8001ea0 <MX_USART1_UART_Init+0x4c>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ea0 <MX_USART1_UART_Init+0x4c>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e72:	4b0b      	ldr	r3, [pc, #44]	; (8001ea0 <MX_USART1_UART_Init+0x4c>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e78:	4b09      	ldr	r3, [pc, #36]	; (8001ea0 <MX_USART1_UART_Init+0x4c>)
 8001e7a:	220c      	movs	r2, #12
 8001e7c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e7e:	4b08      	ldr	r3, [pc, #32]	; (8001ea0 <MX_USART1_UART_Init+0x4c>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e84:	4b06      	ldr	r3, [pc, #24]	; (8001ea0 <MX_USART1_UART_Init+0x4c>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e8a:	4805      	ldr	r0, [pc, #20]	; (8001ea0 <MX_USART1_UART_Init+0x4c>)
 8001e8c:	f006 fa54 	bl	8008338 <HAL_UART_Init>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001e96:	f000 f907 	bl	80020a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e9a:	bf00      	nop
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	200007d8 	.word	0x200007d8
 8001ea4:	40013800 	.word	0x40013800

08001ea8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b088      	sub	sp, #32
 8001eac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eae:	f107 0310 	add.w	r3, r7, #16
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	601a      	str	r2, [r3, #0]
 8001eb6:	605a      	str	r2, [r3, #4]
 8001eb8:	609a      	str	r2, [r3, #8]
 8001eba:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ebc:	4b4e      	ldr	r3, [pc, #312]	; (8001ff8 <MX_GPIO_Init+0x150>)
 8001ebe:	699b      	ldr	r3, [r3, #24]
 8001ec0:	4a4d      	ldr	r2, [pc, #308]	; (8001ff8 <MX_GPIO_Init+0x150>)
 8001ec2:	f043 0310 	orr.w	r3, r3, #16
 8001ec6:	6193      	str	r3, [r2, #24]
 8001ec8:	4b4b      	ldr	r3, [pc, #300]	; (8001ff8 <MX_GPIO_Init+0x150>)
 8001eca:	699b      	ldr	r3, [r3, #24]
 8001ecc:	f003 0310 	and.w	r3, r3, #16
 8001ed0:	60fb      	str	r3, [r7, #12]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ed4:	4b48      	ldr	r3, [pc, #288]	; (8001ff8 <MX_GPIO_Init+0x150>)
 8001ed6:	699b      	ldr	r3, [r3, #24]
 8001ed8:	4a47      	ldr	r2, [pc, #284]	; (8001ff8 <MX_GPIO_Init+0x150>)
 8001eda:	f043 0304 	orr.w	r3, r3, #4
 8001ede:	6193      	str	r3, [r2, #24]
 8001ee0:	4b45      	ldr	r3, [pc, #276]	; (8001ff8 <MX_GPIO_Init+0x150>)
 8001ee2:	699b      	ldr	r3, [r3, #24]
 8001ee4:	f003 0304 	and.w	r3, r3, #4
 8001ee8:	60bb      	str	r3, [r7, #8]
 8001eea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eec:	4b42      	ldr	r3, [pc, #264]	; (8001ff8 <MX_GPIO_Init+0x150>)
 8001eee:	699b      	ldr	r3, [r3, #24]
 8001ef0:	4a41      	ldr	r2, [pc, #260]	; (8001ff8 <MX_GPIO_Init+0x150>)
 8001ef2:	f043 0308 	orr.w	r3, r3, #8
 8001ef6:	6193      	str	r3, [r2, #24]
 8001ef8:	4b3f      	ldr	r3, [pc, #252]	; (8001ff8 <MX_GPIO_Init+0x150>)
 8001efa:	699b      	ldr	r3, [r3, #24]
 8001efc:	f003 0308 	and.w	r3, r3, #8
 8001f00:	607b      	str	r3, [r7, #4]
 8001f02:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f04:	4b3c      	ldr	r3, [pc, #240]	; (8001ff8 <MX_GPIO_Init+0x150>)
 8001f06:	699b      	ldr	r3, [r3, #24]
 8001f08:	4a3b      	ldr	r2, [pc, #236]	; (8001ff8 <MX_GPIO_Init+0x150>)
 8001f0a:	f043 0320 	orr.w	r3, r3, #32
 8001f0e:	6193      	str	r3, [r2, #24]
 8001f10:	4b39      	ldr	r3, [pc, #228]	; (8001ff8 <MX_GPIO_Init+0x150>)
 8001f12:	699b      	ldr	r3, [r3, #24]
 8001f14:	f003 0320 	and.w	r3, r3, #32
 8001f18:	603b      	str	r3, [r7, #0]
 8001f1a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BLUE_LED_Pin|BLUETOOTH_SPI_CMD_Pin|BLUETOOTH_SPI_CS_Pin|MOTOR_REAR_LEFT_OUT_1_Pin
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f243 013a 	movw	r1, #12346	; 0x303a
 8001f22:	4836      	ldr	r0, [pc, #216]	; (8001ffc <MX_GPIO_Init+0x154>)
 8001f24:	f002 f8d2 	bl	80040cc <HAL_GPIO_WritePin>
                          |MOTOR_REAR_LEFT_OUT_2_Pin|MOTOR_FRONT_RIGHT_OUT_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLUETOOTH_SPI_CLK_GPIO_Port, BLUETOOTH_SPI_CLK_Pin, GPIO_PIN_RESET);
 8001f28:	2200      	movs	r2, #0
 8001f2a:	2110      	movs	r1, #16
 8001f2c:	4834      	ldr	r0, [pc, #208]	; (8002000 <MX_GPIO_Init+0x158>)
 8001f2e:	f002 f8cd 	bl	80040cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR_REAR_RIGHT_OUT_1_Pin|MOTOR_REAR_RIGHT_OUT_2_Pin|MOTOR_FRONT_LEFT_OUT_2_Pin|MOTOR_FRONT_LEFT_OUT_1_Pin, GPIO_PIN_RESET);
 8001f32:	2200      	movs	r2, #0
 8001f34:	2133      	movs	r1, #51	; 0x33
 8001f36:	4833      	ldr	r0, [pc, #204]	; (8002004 <MX_GPIO_Init+0x15c>)
 8001f38:	f002 f8c8 	bl	80040cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_FRONT_RIGHT_OUT_1_GPIO_Port, MOTOR_FRONT_RIGHT_OUT_1_Pin, GPIO_PIN_RESET);
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	2104      	movs	r1, #4
 8001f40:	4831      	ldr	r0, [pc, #196]	; (8002008 <MX_GPIO_Init+0x160>)
 8001f42:	f002 f8c3 	bl	80040cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_LED_Pin */
  GPIO_InitStruct.Pin = BLUE_LED_Pin;
 8001f46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f50:	2300      	movs	r3, #0
 8001f52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f54:	2302      	movs	r3, #2
 8001f56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLUE_LED_GPIO_Port, &GPIO_InitStruct);
 8001f58:	f107 0310 	add.w	r3, r7, #16
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	4827      	ldr	r0, [pc, #156]	; (8001ffc <MX_GPIO_Init+0x154>)
 8001f60:	f001 fe20 	bl	8003ba4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BLUETOOTH_SPI_CMD_Pin BLUETOOTH_SPI_CS_Pin MOTOR_REAR_LEFT_OUT_1_Pin MOTOR_REAR_LEFT_OUT_2_Pin
                           MOTOR_FRONT_RIGHT_OUT_2_Pin */
  GPIO_InitStruct.Pin = BLUETOOTH_SPI_CMD_Pin|BLUETOOTH_SPI_CS_Pin|MOTOR_REAR_LEFT_OUT_1_Pin|MOTOR_REAR_LEFT_OUT_2_Pin
 8001f64:	f241 033a 	movw	r3, #4154	; 0x103a
 8001f68:	613b      	str	r3, [r7, #16]
                          |MOTOR_FRONT_RIGHT_OUT_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f72:	2303      	movs	r3, #3
 8001f74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f76:	f107 0310 	add.w	r3, r7, #16
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	481f      	ldr	r0, [pc, #124]	; (8001ffc <MX_GPIO_Init+0x154>)
 8001f7e:	f001 fe11 	bl	8003ba4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUETOOTH_SPI_DAT_Pin */
  GPIO_InitStruct.Pin = BLUETOOTH_SPI_DAT_Pin;
 8001f82:	2304      	movs	r3, #4
 8001f84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f86:	2300      	movs	r3, #0
 8001f88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BLUETOOTH_SPI_DAT_GPIO_Port, &GPIO_InitStruct);
 8001f8e:	f107 0310 	add.w	r3, r7, #16
 8001f92:	4619      	mov	r1, r3
 8001f94:	4819      	ldr	r0, [pc, #100]	; (8001ffc <MX_GPIO_Init+0x154>)
 8001f96:	f001 fe05 	bl	8003ba4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUETOOTH_SPI_CLK_Pin */
  GPIO_InitStruct.Pin = BLUETOOTH_SPI_CLK_Pin;
 8001f9a:	2310      	movs	r3, #16
 8001f9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLUETOOTH_SPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8001faa:	f107 0310 	add.w	r3, r7, #16
 8001fae:	4619      	mov	r1, r3
 8001fb0:	4813      	ldr	r0, [pc, #76]	; (8002000 <MX_GPIO_Init+0x158>)
 8001fb2:	f001 fdf7 	bl	8003ba4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_REAR_RIGHT_OUT_1_Pin MOTOR_REAR_RIGHT_OUT_2_Pin MOTOR_FRONT_LEFT_OUT_2_Pin MOTOR_FRONT_LEFT_OUT_1_Pin */
  GPIO_InitStruct.Pin = MOTOR_REAR_RIGHT_OUT_1_Pin|MOTOR_REAR_RIGHT_OUT_2_Pin|MOTOR_FRONT_LEFT_OUT_2_Pin|MOTOR_FRONT_LEFT_OUT_1_Pin;
 8001fb6:	2333      	movs	r3, #51	; 0x33
 8001fb8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fc6:	f107 0310 	add.w	r3, r7, #16
 8001fca:	4619      	mov	r1, r3
 8001fcc:	480d      	ldr	r0, [pc, #52]	; (8002004 <MX_GPIO_Init+0x15c>)
 8001fce:	f001 fde9 	bl	8003ba4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTOR_FRONT_RIGHT_OUT_1_Pin */
  GPIO_InitStruct.Pin = MOTOR_FRONT_RIGHT_OUT_1_Pin;
 8001fd2:	2304      	movs	r3, #4
 8001fd4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MOTOR_FRONT_RIGHT_OUT_1_GPIO_Port, &GPIO_InitStruct);
 8001fe2:	f107 0310 	add.w	r3, r7, #16
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	4807      	ldr	r0, [pc, #28]	; (8002008 <MX_GPIO_Init+0x160>)
 8001fea:	f001 fddb 	bl	8003ba4 <HAL_GPIO_Init>

}
 8001fee:	bf00      	nop
 8001ff0:	3720      	adds	r7, #32
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	40011000 	.word	0x40011000
 8002000:	40010800 	.word	0x40010800
 8002004:	40010c00 	.word	0x40010c00
 8002008:	40011400 	.word	0x40011400

0800200c <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  if ((htim == &htim2) || (htim == &htim3) || (htim == &htim4) || (htim == &htim5))
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4a0b      	ldr	r2, [pc, #44]	; (8002044 <HAL_TIM_IC_CaptureCallback+0x38>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d00b      	beq.n	8002034 <HAL_TIM_IC_CaptureCallback+0x28>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	4a0a      	ldr	r2, [pc, #40]	; (8002048 <HAL_TIM_IC_CaptureCallback+0x3c>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d007      	beq.n	8002034 <HAL_TIM_IC_CaptureCallback+0x28>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4a09      	ldr	r2, [pc, #36]	; (800204c <HAL_TIM_IC_CaptureCallback+0x40>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d003      	beq.n	8002034 <HAL_TIM_IC_CaptureCallback+0x28>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	4a08      	ldr	r2, [pc, #32]	; (8002050 <HAL_TIM_IC_CaptureCallback+0x44>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d103      	bne.n	800203c <HAL_TIM_IC_CaptureCallback+0x30>
  {
    DRV_updateEncoder(htim);
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f007 fc97 	bl	8009968 <DRV_updateEncoder>
  else
  {
    ; /* Nothing to do */
  }

  return;
 800203a:	bf00      	nop
 800203c:	bf00      	nop
}
 800203e:	3708      	adds	r7, #8
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	20000a40 	.word	0x20000a40
 8002048:	200006f4 	.word	0x200006f4
 800204c:	2000058c 	.word	0x2000058c
 8002050:	20000640 	.word	0x20000640

08002054 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  /* Check the handle of the timer triggering this callback and update LED */
  if (htim == &htim1)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	4a04      	ldr	r2, [pc, #16]	; (8002070 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d101      	bne.n	8002068 <HAL_TIM_PeriodElapsedCallback+0x14>
  {
    LED_update();
 8002064:	f008 fdca 	bl	800abfc <LED_update>
  }
  else
  {
    ; /* Nothing to do */
  }
}
 8002068:	bf00      	nop
 800206a:	3708      	adds	r7, #8
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	20000914 	.word	0x20000914

08002074 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  /* Check the handle of the UART triggering this callback and actually receive date */
  if (huart == &huart1)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	4a08      	ldr	r2, [pc, #32]	; (80020a0 <HAL_UART_RxCpltCallback+0x2c>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d102      	bne.n	800208a <HAL_UART_RxCpltCallback+0x16>
  {
    CON_receiveData();
 8002084:	f007 fb14 	bl	80096b0 <CON_receiveData>
  }
  else
  {
    ; /* Nothing to do */
  }
}
 8002088:	e005      	b.n	8002096 <HAL_UART_RxCpltCallback+0x22>
  else if (huart == &huart4)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a05      	ldr	r2, [pc, #20]	; (80020a4 <HAL_UART_RxCpltCallback+0x30>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d101      	bne.n	8002096 <HAL_UART_RxCpltCallback+0x22>
    MAS_receiveData();
 8002092:	f008 ff49 	bl	800af28 <MAS_receiveData>
}
 8002096:	bf00      	nop
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	200007d8 	.word	0x200007d8
 80020a4:	200009cc 	.word	0x200009cc

080020a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020ac:	b672      	cpsid	i
}
 80020ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();

  LOG_error("Error_Handler() triggered");
 80020b0:	4902      	ldr	r1, [pc, #8]	; (80020bc <Error_Handler+0x14>)
 80020b2:	2003      	movs	r0, #3
 80020b4:	f008 fe7a 	bl	800adac <LOG_log>

  while (1)
 80020b8:	e7fe      	b.n	80020b8 <Error_Handler+0x10>
 80020ba:	bf00      	nop
 80020bc:	0800edc8 	.word	0x0800edc8

080020c0 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
     LOG_error("Wrong parameters: %s@%d", file, line);
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	4904      	ldr	r1, [pc, #16]	; (80020e0 <assert_failed+0x20>)
 80020d0:	2003      	movs	r0, #3
 80020d2:	f008 fe6b 	bl	800adac <LOG_log>

    return;
 80020d6:	bf00      	nop
  /* USER CODE END 6 */
}
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	0800ede4 	.word	0x0800ede4

080020e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b085      	sub	sp, #20
 80020e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80020ea:	4b15      	ldr	r3, [pc, #84]	; (8002140 <HAL_MspInit+0x5c>)
 80020ec:	699b      	ldr	r3, [r3, #24]
 80020ee:	4a14      	ldr	r2, [pc, #80]	; (8002140 <HAL_MspInit+0x5c>)
 80020f0:	f043 0301 	orr.w	r3, r3, #1
 80020f4:	6193      	str	r3, [r2, #24]
 80020f6:	4b12      	ldr	r3, [pc, #72]	; (8002140 <HAL_MspInit+0x5c>)
 80020f8:	699b      	ldr	r3, [r3, #24]
 80020fa:	f003 0301 	and.w	r3, r3, #1
 80020fe:	60bb      	str	r3, [r7, #8]
 8002100:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002102:	4b0f      	ldr	r3, [pc, #60]	; (8002140 <HAL_MspInit+0x5c>)
 8002104:	69db      	ldr	r3, [r3, #28]
 8002106:	4a0e      	ldr	r2, [pc, #56]	; (8002140 <HAL_MspInit+0x5c>)
 8002108:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800210c:	61d3      	str	r3, [r2, #28]
 800210e:	4b0c      	ldr	r3, [pc, #48]	; (8002140 <HAL_MspInit+0x5c>)
 8002110:	69db      	ldr	r3, [r3, #28]
 8002112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002116:	607b      	str	r3, [r7, #4]
 8002118:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800211a:	4b0a      	ldr	r3, [pc, #40]	; (8002144 <HAL_MspInit+0x60>)
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	60fb      	str	r3, [r7, #12]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002126:	60fb      	str	r3, [r7, #12]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800212e:	60fb      	str	r3, [r7, #12]
 8002130:	4a04      	ldr	r2, [pc, #16]	; (8002144 <HAL_MspInit+0x60>)
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002136:	bf00      	nop
 8002138:	3714      	adds	r7, #20
 800213a:	46bd      	mov	sp, r7
 800213c:	bc80      	pop	{r7}
 800213e:	4770      	bx	lr
 8002140:	40021000 	.word	0x40021000
 8002144:	40010000 	.word	0x40010000

08002148 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b088      	sub	sp, #32
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002150:	f107 0310 	add.w	r3, r7, #16
 8002154:	2200      	movs	r2, #0
 8002156:	601a      	str	r2, [r3, #0]
 8002158:	605a      	str	r2, [r3, #4]
 800215a:	609a      	str	r2, [r3, #8]
 800215c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a14      	ldr	r2, [pc, #80]	; (80021b4 <HAL_ADC_MspInit+0x6c>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d121      	bne.n	80021ac <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002168:	4b13      	ldr	r3, [pc, #76]	; (80021b8 <HAL_ADC_MspInit+0x70>)
 800216a:	699b      	ldr	r3, [r3, #24]
 800216c:	4a12      	ldr	r2, [pc, #72]	; (80021b8 <HAL_ADC_MspInit+0x70>)
 800216e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002172:	6193      	str	r3, [r2, #24]
 8002174:	4b10      	ldr	r3, [pc, #64]	; (80021b8 <HAL_ADC_MspInit+0x70>)
 8002176:	699b      	ldr	r3, [r3, #24]
 8002178:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800217c:	60fb      	str	r3, [r7, #12]
 800217e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002180:	4b0d      	ldr	r3, [pc, #52]	; (80021b8 <HAL_ADC_MspInit+0x70>)
 8002182:	699b      	ldr	r3, [r3, #24]
 8002184:	4a0c      	ldr	r2, [pc, #48]	; (80021b8 <HAL_ADC_MspInit+0x70>)
 8002186:	f043 0304 	orr.w	r3, r3, #4
 800218a:	6193      	str	r3, [r2, #24]
 800218c:	4b0a      	ldr	r3, [pc, #40]	; (80021b8 <HAL_ADC_MspInit+0x70>)
 800218e:	699b      	ldr	r3, [r3, #24]
 8002190:	f003 0304 	and.w	r3, r3, #4
 8002194:	60bb      	str	r3, [r7, #8]
 8002196:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = BATTERY_ADC_Pin;
 8002198:	2320      	movs	r3, #32
 800219a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800219c:	2303      	movs	r3, #3
 800219e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(BATTERY_ADC_GPIO_Port, &GPIO_InitStruct);
 80021a0:	f107 0310 	add.w	r3, r7, #16
 80021a4:	4619      	mov	r1, r3
 80021a6:	4805      	ldr	r0, [pc, #20]	; (80021bc <HAL_ADC_MspInit+0x74>)
 80021a8:	f001 fcfc 	bl	8003ba4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80021ac:	bf00      	nop
 80021ae:	3720      	adds	r7, #32
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	40012400 	.word	0x40012400
 80021b8:	40021000 	.word	0x40021000
 80021bc:	40010800 	.word	0x40010800

080021c0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a0b      	ldr	r2, [pc, #44]	; (80021fc <HAL_RTC_MspInit+0x3c>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d110      	bne.n	80021f4 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80021d2:	f001 ffd5 	bl	8004180 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80021d6:	4b0a      	ldr	r3, [pc, #40]	; (8002200 <HAL_RTC_MspInit+0x40>)
 80021d8:	69db      	ldr	r3, [r3, #28]
 80021da:	4a09      	ldr	r2, [pc, #36]	; (8002200 <HAL_RTC_MspInit+0x40>)
 80021dc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80021e0:	61d3      	str	r3, [r2, #28]
 80021e2:	4b07      	ldr	r3, [pc, #28]	; (8002200 <HAL_RTC_MspInit+0x40>)
 80021e4:	69db      	ldr	r3, [r3, #28]
 80021e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80021ea:	60fb      	str	r3, [r7, #12]
 80021ec:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80021ee:	4b05      	ldr	r3, [pc, #20]	; (8002204 <HAL_RTC_MspInit+0x44>)
 80021f0:	2201      	movs	r2, #1
 80021f2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80021f4:	bf00      	nop
 80021f6:	3710      	adds	r7, #16
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	40002800 	.word	0x40002800
 8002200:	40021000 	.word	0x40021000
 8002204:	4242043c 	.word	0x4242043c

08002208 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b086      	sub	sp, #24
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a28      	ldr	r2, [pc, #160]	; (80022b8 <HAL_TIM_Base_MspInit+0xb0>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d114      	bne.n	8002244 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800221a:	4b28      	ldr	r3, [pc, #160]	; (80022bc <HAL_TIM_Base_MspInit+0xb4>)
 800221c:	699b      	ldr	r3, [r3, #24]
 800221e:	4a27      	ldr	r2, [pc, #156]	; (80022bc <HAL_TIM_Base_MspInit+0xb4>)
 8002220:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002224:	6193      	str	r3, [r2, #24]
 8002226:	4b25      	ldr	r3, [pc, #148]	; (80022bc <HAL_TIM_Base_MspInit+0xb4>)
 8002228:	699b      	ldr	r3, [r3, #24]
 800222a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800222e:	617b      	str	r3, [r7, #20]
 8002230:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 6, 0);
 8002232:	2200      	movs	r2, #0
 8002234:	2106      	movs	r1, #6
 8002236:	2019      	movs	r0, #25
 8002238:	f001 fb22 	bl	8003880 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800223c:	2019      	movs	r0, #25
 800223e:	f001 fb4b 	bl	80038d8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002242:	e034      	b.n	80022ae <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM6)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a1d      	ldr	r2, [pc, #116]	; (80022c0 <HAL_TIM_Base_MspInit+0xb8>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d10c      	bne.n	8002268 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800224e:	4b1b      	ldr	r3, [pc, #108]	; (80022bc <HAL_TIM_Base_MspInit+0xb4>)
 8002250:	69db      	ldr	r3, [r3, #28]
 8002252:	4a1a      	ldr	r2, [pc, #104]	; (80022bc <HAL_TIM_Base_MspInit+0xb4>)
 8002254:	f043 0310 	orr.w	r3, r3, #16
 8002258:	61d3      	str	r3, [r2, #28]
 800225a:	4b18      	ldr	r3, [pc, #96]	; (80022bc <HAL_TIM_Base_MspInit+0xb4>)
 800225c:	69db      	ldr	r3, [r3, #28]
 800225e:	f003 0310 	and.w	r3, r3, #16
 8002262:	613b      	str	r3, [r7, #16]
 8002264:	693b      	ldr	r3, [r7, #16]
}
 8002266:	e022      	b.n	80022ae <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM7)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a15      	ldr	r2, [pc, #84]	; (80022c4 <HAL_TIM_Base_MspInit+0xbc>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d10c      	bne.n	800228c <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002272:	4b12      	ldr	r3, [pc, #72]	; (80022bc <HAL_TIM_Base_MspInit+0xb4>)
 8002274:	69db      	ldr	r3, [r3, #28]
 8002276:	4a11      	ldr	r2, [pc, #68]	; (80022bc <HAL_TIM_Base_MspInit+0xb4>)
 8002278:	f043 0320 	orr.w	r3, r3, #32
 800227c:	61d3      	str	r3, [r2, #28]
 800227e:	4b0f      	ldr	r3, [pc, #60]	; (80022bc <HAL_TIM_Base_MspInit+0xb4>)
 8002280:	69db      	ldr	r3, [r3, #28]
 8002282:	f003 0320 	and.w	r3, r3, #32
 8002286:	60fb      	str	r3, [r7, #12]
 8002288:	68fb      	ldr	r3, [r7, #12]
}
 800228a:	e010      	b.n	80022ae <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM8)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a0d      	ldr	r2, [pc, #52]	; (80022c8 <HAL_TIM_Base_MspInit+0xc0>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d10b      	bne.n	80022ae <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002296:	4b09      	ldr	r3, [pc, #36]	; (80022bc <HAL_TIM_Base_MspInit+0xb4>)
 8002298:	699b      	ldr	r3, [r3, #24]
 800229a:	4a08      	ldr	r2, [pc, #32]	; (80022bc <HAL_TIM_Base_MspInit+0xb4>)
 800229c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80022a0:	6193      	str	r3, [r2, #24]
 80022a2:	4b06      	ldr	r3, [pc, #24]	; (80022bc <HAL_TIM_Base_MspInit+0xb4>)
 80022a4:	699b      	ldr	r3, [r3, #24]
 80022a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022aa:	60bb      	str	r3, [r7, #8]
 80022ac:	68bb      	ldr	r3, [r7, #8]
}
 80022ae:	bf00      	nop
 80022b0:	3718      	adds	r7, #24
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	40012c00 	.word	0x40012c00
 80022bc:	40021000 	.word	0x40021000
 80022c0:	40001000 	.word	0x40001000
 80022c4:	40001400 	.word	0x40001400
 80022c8:	40013400 	.word	0x40013400

080022cc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b090      	sub	sp, #64	; 0x40
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022d8:	2200      	movs	r2, #0
 80022da:	601a      	str	r2, [r3, #0]
 80022dc:	605a      	str	r2, [r3, #4]
 80022de:	609a      	str	r2, [r3, #8]
 80022e0:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022ea:	d157      	bne.n	800239c <HAL_TIM_Encoder_MspInit+0xd0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80022ec:	4b78      	ldr	r3, [pc, #480]	; (80024d0 <HAL_TIM_Encoder_MspInit+0x204>)
 80022ee:	69db      	ldr	r3, [r3, #28]
 80022f0:	4a77      	ldr	r2, [pc, #476]	; (80024d0 <HAL_TIM_Encoder_MspInit+0x204>)
 80022f2:	f043 0301 	orr.w	r3, r3, #1
 80022f6:	61d3      	str	r3, [r2, #28]
 80022f8:	4b75      	ldr	r3, [pc, #468]	; (80024d0 <HAL_TIM_Encoder_MspInit+0x204>)
 80022fa:	69db      	ldr	r3, [r3, #28]
 80022fc:	f003 0301 	and.w	r3, r3, #1
 8002300:	62bb      	str	r3, [r7, #40]	; 0x28
 8002302:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002304:	4b72      	ldr	r3, [pc, #456]	; (80024d0 <HAL_TIM_Encoder_MspInit+0x204>)
 8002306:	699b      	ldr	r3, [r3, #24]
 8002308:	4a71      	ldr	r2, [pc, #452]	; (80024d0 <HAL_TIM_Encoder_MspInit+0x204>)
 800230a:	f043 0304 	orr.w	r3, r3, #4
 800230e:	6193      	str	r3, [r2, #24]
 8002310:	4b6f      	ldr	r3, [pc, #444]	; (80024d0 <HAL_TIM_Encoder_MspInit+0x204>)
 8002312:	699b      	ldr	r3, [r3, #24]
 8002314:	f003 0304 	and.w	r3, r3, #4
 8002318:	627b      	str	r3, [r7, #36]	; 0x24
 800231a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800231c:	4b6c      	ldr	r3, [pc, #432]	; (80024d0 <HAL_TIM_Encoder_MspInit+0x204>)
 800231e:	699b      	ldr	r3, [r3, #24]
 8002320:	4a6b      	ldr	r2, [pc, #428]	; (80024d0 <HAL_TIM_Encoder_MspInit+0x204>)
 8002322:	f043 0308 	orr.w	r3, r3, #8
 8002326:	6193      	str	r3, [r2, #24]
 8002328:	4b69      	ldr	r3, [pc, #420]	; (80024d0 <HAL_TIM_Encoder_MspInit+0x204>)
 800232a:	699b      	ldr	r3, [r3, #24]
 800232c:	f003 0308 	and.w	r3, r3, #8
 8002330:	623b      	str	r3, [r7, #32]
 8002332:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_FRONT_RIGHT_IN_1_Pin;
 8002334:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002338:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800233a:	2300      	movs	r3, #0
 800233c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233e:	2300      	movs	r3, #0
 8002340:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENCODER_FRONT_RIGHT_IN_1_GPIO_Port, &GPIO_InitStruct);
 8002342:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002346:	4619      	mov	r1, r3
 8002348:	4862      	ldr	r0, [pc, #392]	; (80024d4 <HAL_TIM_Encoder_MspInit+0x208>)
 800234a:	f001 fc2b 	bl	8003ba4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENCODER_FRONT_RIGHT_IN_2_Pin;
 800234e:	2308      	movs	r3, #8
 8002350:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002352:	2300      	movs	r3, #0
 8002354:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002356:	2300      	movs	r3, #0
 8002358:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENCODER_FRONT_RIGHT_IN_2_GPIO_Port, &GPIO_InitStruct);
 800235a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800235e:	4619      	mov	r1, r3
 8002360:	485d      	ldr	r0, [pc, #372]	; (80024d8 <HAL_TIM_Encoder_MspInit+0x20c>)
 8002362:	f001 fc1f 	bl	8003ba4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8002366:	4b5d      	ldr	r3, [pc, #372]	; (80024dc <HAL_TIM_Encoder_MspInit+0x210>)
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800236c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800236e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002372:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002374:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002376:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800237a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800237c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800237e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002382:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002384:	4a55      	ldr	r2, [pc, #340]	; (80024dc <HAL_TIM_Encoder_MspInit+0x210>)
 8002386:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002388:	6053      	str	r3, [r2, #4]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 4, 0);
 800238a:	2200      	movs	r2, #0
 800238c:	2104      	movs	r1, #4
 800238e:	201c      	movs	r0, #28
 8002390:	f001 fa76 	bl	8003880 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002394:	201c      	movs	r0, #28
 8002396:	f001 fa9f 	bl	80038d8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800239a:	e094      	b.n	80024c6 <HAL_TIM_Encoder_MspInit+0x1fa>
  else if(htim_encoder->Instance==TIM3)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a4f      	ldr	r2, [pc, #316]	; (80024e0 <HAL_TIM_Encoder_MspInit+0x214>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d12c      	bne.n	8002400 <HAL_TIM_Encoder_MspInit+0x134>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80023a6:	4b4a      	ldr	r3, [pc, #296]	; (80024d0 <HAL_TIM_Encoder_MspInit+0x204>)
 80023a8:	69db      	ldr	r3, [r3, #28]
 80023aa:	4a49      	ldr	r2, [pc, #292]	; (80024d0 <HAL_TIM_Encoder_MspInit+0x204>)
 80023ac:	f043 0302 	orr.w	r3, r3, #2
 80023b0:	61d3      	str	r3, [r2, #28]
 80023b2:	4b47      	ldr	r3, [pc, #284]	; (80024d0 <HAL_TIM_Encoder_MspInit+0x204>)
 80023b4:	69db      	ldr	r3, [r3, #28]
 80023b6:	f003 0302 	and.w	r3, r3, #2
 80023ba:	61fb      	str	r3, [r7, #28]
 80023bc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023be:	4b44      	ldr	r3, [pc, #272]	; (80024d0 <HAL_TIM_Encoder_MspInit+0x204>)
 80023c0:	699b      	ldr	r3, [r3, #24]
 80023c2:	4a43      	ldr	r2, [pc, #268]	; (80024d0 <HAL_TIM_Encoder_MspInit+0x204>)
 80023c4:	f043 0304 	orr.w	r3, r3, #4
 80023c8:	6193      	str	r3, [r2, #24]
 80023ca:	4b41      	ldr	r3, [pc, #260]	; (80024d0 <HAL_TIM_Encoder_MspInit+0x204>)
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	f003 0304 	and.w	r3, r3, #4
 80023d2:	61bb      	str	r3, [r7, #24]
 80023d4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ENCODER_FRONT_LEFT_IN_1_Pin|ENCODER_FRONT_LEFT_IN_2_Pin;
 80023d6:	23c0      	movs	r3, #192	; 0xc0
 80023d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023da:	2300      	movs	r3, #0
 80023dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023de:	2300      	movs	r3, #0
 80023e0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023e6:	4619      	mov	r1, r3
 80023e8:	483a      	ldr	r0, [pc, #232]	; (80024d4 <HAL_TIM_Encoder_MspInit+0x208>)
 80023ea:	f001 fbdb 	bl	8003ba4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 4, 0);
 80023ee:	2200      	movs	r2, #0
 80023f0:	2104      	movs	r1, #4
 80023f2:	201d      	movs	r0, #29
 80023f4:	f001 fa44 	bl	8003880 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80023f8:	201d      	movs	r0, #29
 80023fa:	f001 fa6d 	bl	80038d8 <HAL_NVIC_EnableIRQ>
}
 80023fe:	e062      	b.n	80024c6 <HAL_TIM_Encoder_MspInit+0x1fa>
  else if(htim_encoder->Instance==TIM4)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a37      	ldr	r2, [pc, #220]	; (80024e4 <HAL_TIM_Encoder_MspInit+0x218>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d12c      	bne.n	8002464 <HAL_TIM_Encoder_MspInit+0x198>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800240a:	4b31      	ldr	r3, [pc, #196]	; (80024d0 <HAL_TIM_Encoder_MspInit+0x204>)
 800240c:	69db      	ldr	r3, [r3, #28]
 800240e:	4a30      	ldr	r2, [pc, #192]	; (80024d0 <HAL_TIM_Encoder_MspInit+0x204>)
 8002410:	f043 0304 	orr.w	r3, r3, #4
 8002414:	61d3      	str	r3, [r2, #28]
 8002416:	4b2e      	ldr	r3, [pc, #184]	; (80024d0 <HAL_TIM_Encoder_MspInit+0x204>)
 8002418:	69db      	ldr	r3, [r3, #28]
 800241a:	f003 0304 	and.w	r3, r3, #4
 800241e:	617b      	str	r3, [r7, #20]
 8002420:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002422:	4b2b      	ldr	r3, [pc, #172]	; (80024d0 <HAL_TIM_Encoder_MspInit+0x204>)
 8002424:	699b      	ldr	r3, [r3, #24]
 8002426:	4a2a      	ldr	r2, [pc, #168]	; (80024d0 <HAL_TIM_Encoder_MspInit+0x204>)
 8002428:	f043 0308 	orr.w	r3, r3, #8
 800242c:	6193      	str	r3, [r2, #24]
 800242e:	4b28      	ldr	r3, [pc, #160]	; (80024d0 <HAL_TIM_Encoder_MspInit+0x204>)
 8002430:	699b      	ldr	r3, [r3, #24]
 8002432:	f003 0308 	and.w	r3, r3, #8
 8002436:	613b      	str	r3, [r7, #16]
 8002438:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ENCODER_REAR_LEFT_IN_1_Pin|ENCODER_REAR_LEFT_IN_2_Pin;
 800243a:	23c0      	movs	r3, #192	; 0xc0
 800243c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800243e:	2300      	movs	r3, #0
 8002440:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002442:	2300      	movs	r3, #0
 8002444:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002446:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800244a:	4619      	mov	r1, r3
 800244c:	4822      	ldr	r0, [pc, #136]	; (80024d8 <HAL_TIM_Encoder_MspInit+0x20c>)
 800244e:	f001 fba9 	bl	8003ba4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 4, 0);
 8002452:	2200      	movs	r2, #0
 8002454:	2104      	movs	r1, #4
 8002456:	201e      	movs	r0, #30
 8002458:	f001 fa12 	bl	8003880 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800245c:	201e      	movs	r0, #30
 800245e:	f001 fa3b 	bl	80038d8 <HAL_NVIC_EnableIRQ>
}
 8002462:	e030      	b.n	80024c6 <HAL_TIM_Encoder_MspInit+0x1fa>
  else if(htim_encoder->Instance==TIM5)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a1f      	ldr	r2, [pc, #124]	; (80024e8 <HAL_TIM_Encoder_MspInit+0x21c>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d12b      	bne.n	80024c6 <HAL_TIM_Encoder_MspInit+0x1fa>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800246e:	4b18      	ldr	r3, [pc, #96]	; (80024d0 <HAL_TIM_Encoder_MspInit+0x204>)
 8002470:	69db      	ldr	r3, [r3, #28]
 8002472:	4a17      	ldr	r2, [pc, #92]	; (80024d0 <HAL_TIM_Encoder_MspInit+0x204>)
 8002474:	f043 0308 	orr.w	r3, r3, #8
 8002478:	61d3      	str	r3, [r2, #28]
 800247a:	4b15      	ldr	r3, [pc, #84]	; (80024d0 <HAL_TIM_Encoder_MspInit+0x204>)
 800247c:	69db      	ldr	r3, [r3, #28]
 800247e:	f003 0308 	and.w	r3, r3, #8
 8002482:	60fb      	str	r3, [r7, #12]
 8002484:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002486:	4b12      	ldr	r3, [pc, #72]	; (80024d0 <HAL_TIM_Encoder_MspInit+0x204>)
 8002488:	699b      	ldr	r3, [r3, #24]
 800248a:	4a11      	ldr	r2, [pc, #68]	; (80024d0 <HAL_TIM_Encoder_MspInit+0x204>)
 800248c:	f043 0304 	orr.w	r3, r3, #4
 8002490:	6193      	str	r3, [r2, #24]
 8002492:	4b0f      	ldr	r3, [pc, #60]	; (80024d0 <HAL_TIM_Encoder_MspInit+0x204>)
 8002494:	699b      	ldr	r3, [r3, #24]
 8002496:	f003 0304 	and.w	r3, r3, #4
 800249a:	60bb      	str	r3, [r7, #8]
 800249c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENCODER_REAR_RIGHT_IN_1_Pin|ENCODER_REAR_RIGHT_IN_2_Pin;
 800249e:	2303      	movs	r3, #3
 80024a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024a2:	2300      	movs	r3, #0
 80024a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a6:	2300      	movs	r3, #0
 80024a8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024ae:	4619      	mov	r1, r3
 80024b0:	4808      	ldr	r0, [pc, #32]	; (80024d4 <HAL_TIM_Encoder_MspInit+0x208>)
 80024b2:	f001 fb77 	bl	8003ba4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 4, 0);
 80024b6:	2200      	movs	r2, #0
 80024b8:	2104      	movs	r1, #4
 80024ba:	2032      	movs	r0, #50	; 0x32
 80024bc:	f001 f9e0 	bl	8003880 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80024c0:	2032      	movs	r0, #50	; 0x32
 80024c2:	f001 fa09 	bl	80038d8 <HAL_NVIC_EnableIRQ>
}
 80024c6:	bf00      	nop
 80024c8:	3740      	adds	r7, #64	; 0x40
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	40021000 	.word	0x40021000
 80024d4:	40010800 	.word	0x40010800
 80024d8:	40010c00 	.word	0x40010c00
 80024dc:	40010000 	.word	0x40010000
 80024e0:	40000400 	.word	0x40000400
 80024e4:	40000800 	.word	0x40000800
 80024e8:	40000c00 	.word	0x40000c00

080024ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b088      	sub	sp, #32
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024f4:	f107 0310 	add.w	r3, r7, #16
 80024f8:	2200      	movs	r2, #0
 80024fa:	601a      	str	r2, [r3, #0]
 80024fc:	605a      	str	r2, [r3, #4]
 80024fe:	609a      	str	r2, [r3, #8]
 8002500:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM8)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a10      	ldr	r2, [pc, #64]	; (8002548 <HAL_TIM_MspPostInit+0x5c>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d118      	bne.n	800253e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800250c:	4b0f      	ldr	r3, [pc, #60]	; (800254c <HAL_TIM_MspPostInit+0x60>)
 800250e:	699b      	ldr	r3, [r3, #24]
 8002510:	4a0e      	ldr	r2, [pc, #56]	; (800254c <HAL_TIM_MspPostInit+0x60>)
 8002512:	f043 0310 	orr.w	r3, r3, #16
 8002516:	6193      	str	r3, [r2, #24]
 8002518:	4b0c      	ldr	r3, [pc, #48]	; (800254c <HAL_TIM_MspPostInit+0x60>)
 800251a:	699b      	ldr	r3, [r3, #24]
 800251c:	f003 0310 	and.w	r3, r3, #16
 8002520:	60fb      	str	r3, [r7, #12]
 8002522:	68fb      	ldr	r3, [r7, #12]
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    PC8     ------> TIM8_CH3
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = MOTOR_REAR_RIGHT_PWM_Pin|MOTOR_REAR_LEFT_PWM_Pin|MOTOR_FRONT_RIGHT_PWM_Pin|MOTOR_FRONT_LEFT_PWM_Pin;
 8002524:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002528:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800252a:	2302      	movs	r3, #2
 800252c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800252e:	2303      	movs	r3, #3
 8002530:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002532:	f107 0310 	add.w	r3, r7, #16
 8002536:	4619      	mov	r1, r3
 8002538:	4805      	ldr	r0, [pc, #20]	; (8002550 <HAL_TIM_MspPostInit+0x64>)
 800253a:	f001 fb33 	bl	8003ba4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800253e:	bf00      	nop
 8002540:	3720      	adds	r7, #32
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	40013400 	.word	0x40013400
 800254c:	40021000 	.word	0x40021000
 8002550:	40011000 	.word	0x40011000

08002554 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b08a      	sub	sp, #40	; 0x28
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800255c:	f107 0318 	add.w	r3, r7, #24
 8002560:	2200      	movs	r2, #0
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	605a      	str	r2, [r3, #4]
 8002566:	609a      	str	r2, [r3, #8]
 8002568:	60da      	str	r2, [r3, #12]
  if(huart->Instance==UART4)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a40      	ldr	r2, [pc, #256]	; (8002670 <HAL_UART_MspInit+0x11c>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d13a      	bne.n	80025ea <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002574:	4b3f      	ldr	r3, [pc, #252]	; (8002674 <HAL_UART_MspInit+0x120>)
 8002576:	69db      	ldr	r3, [r3, #28]
 8002578:	4a3e      	ldr	r2, [pc, #248]	; (8002674 <HAL_UART_MspInit+0x120>)
 800257a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800257e:	61d3      	str	r3, [r2, #28]
 8002580:	4b3c      	ldr	r3, [pc, #240]	; (8002674 <HAL_UART_MspInit+0x120>)
 8002582:	69db      	ldr	r3, [r3, #28]
 8002584:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002588:	617b      	str	r3, [r7, #20]
 800258a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800258c:	4b39      	ldr	r3, [pc, #228]	; (8002674 <HAL_UART_MspInit+0x120>)
 800258e:	699b      	ldr	r3, [r3, #24]
 8002590:	4a38      	ldr	r2, [pc, #224]	; (8002674 <HAL_UART_MspInit+0x120>)
 8002592:	f043 0310 	orr.w	r3, r3, #16
 8002596:	6193      	str	r3, [r2, #24]
 8002598:	4b36      	ldr	r3, [pc, #216]	; (8002674 <HAL_UART_MspInit+0x120>)
 800259a:	699b      	ldr	r3, [r3, #24]
 800259c:	f003 0310 	and.w	r3, r3, #16
 80025a0:	613b      	str	r3, [r7, #16]
 80025a2:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = MASTER_USART_TX_Pin;
 80025a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025aa:	2302      	movs	r3, #2
 80025ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025ae:	2303      	movs	r3, #3
 80025b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MASTER_USART_TX_GPIO_Port, &GPIO_InitStruct);
 80025b2:	f107 0318 	add.w	r3, r7, #24
 80025b6:	4619      	mov	r1, r3
 80025b8:	482f      	ldr	r0, [pc, #188]	; (8002678 <HAL_UART_MspInit+0x124>)
 80025ba:	f001 faf3 	bl	8003ba4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MASTER_USART_RX_Pin;
 80025be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80025c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025c4:	2300      	movs	r3, #0
 80025c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c8:	2300      	movs	r3, #0
 80025ca:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(MASTER_USART_RX_GPIO_Port, &GPIO_InitStruct);
 80025cc:	f107 0318 	add.w	r3, r7, #24
 80025d0:	4619      	mov	r1, r3
 80025d2:	4829      	ldr	r0, [pc, #164]	; (8002678 <HAL_UART_MspInit+0x124>)
 80025d4:	f001 fae6 	bl	8003ba4 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80025d8:	2200      	movs	r2, #0
 80025da:	2105      	movs	r1, #5
 80025dc:	2034      	movs	r0, #52	; 0x34
 80025de:	f001 f94f 	bl	8003880 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80025e2:	2034      	movs	r0, #52	; 0x34
 80025e4:	f001 f978 	bl	80038d8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80025e8:	e03e      	b.n	8002668 <HAL_UART_MspInit+0x114>
  else if(huart->Instance==USART1)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a23      	ldr	r2, [pc, #140]	; (800267c <HAL_UART_MspInit+0x128>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d139      	bne.n	8002668 <HAL_UART_MspInit+0x114>
    __HAL_RCC_USART1_CLK_ENABLE();
 80025f4:	4b1f      	ldr	r3, [pc, #124]	; (8002674 <HAL_UART_MspInit+0x120>)
 80025f6:	699b      	ldr	r3, [r3, #24]
 80025f8:	4a1e      	ldr	r2, [pc, #120]	; (8002674 <HAL_UART_MspInit+0x120>)
 80025fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025fe:	6193      	str	r3, [r2, #24]
 8002600:	4b1c      	ldr	r3, [pc, #112]	; (8002674 <HAL_UART_MspInit+0x120>)
 8002602:	699b      	ldr	r3, [r3, #24]
 8002604:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002608:	60fb      	str	r3, [r7, #12]
 800260a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800260c:	4b19      	ldr	r3, [pc, #100]	; (8002674 <HAL_UART_MspInit+0x120>)
 800260e:	699b      	ldr	r3, [r3, #24]
 8002610:	4a18      	ldr	r2, [pc, #96]	; (8002674 <HAL_UART_MspInit+0x120>)
 8002612:	f043 0304 	orr.w	r3, r3, #4
 8002616:	6193      	str	r3, [r2, #24]
 8002618:	4b16      	ldr	r3, [pc, #88]	; (8002674 <HAL_UART_MspInit+0x120>)
 800261a:	699b      	ldr	r3, [r3, #24]
 800261c:	f003 0304 	and.w	r3, r3, #4
 8002620:	60bb      	str	r3, [r7, #8]
 8002622:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = CONSOLE_USART_TX_Pin;
 8002624:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002628:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800262a:	2302      	movs	r3, #2
 800262c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800262e:	2303      	movs	r3, #3
 8002630:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(CONSOLE_USART_TX_GPIO_Port, &GPIO_InitStruct);
 8002632:	f107 0318 	add.w	r3, r7, #24
 8002636:	4619      	mov	r1, r3
 8002638:	4811      	ldr	r0, [pc, #68]	; (8002680 <HAL_UART_MspInit+0x12c>)
 800263a:	f001 fab3 	bl	8003ba4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = CONSOLE_USART_RX_Pin;
 800263e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002642:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002644:	2300      	movs	r3, #0
 8002646:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002648:	2300      	movs	r3, #0
 800264a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(CONSOLE_USART_RX_GPIO_Port, &GPIO_InitStruct);
 800264c:	f107 0318 	add.w	r3, r7, #24
 8002650:	4619      	mov	r1, r3
 8002652:	480b      	ldr	r0, [pc, #44]	; (8002680 <HAL_UART_MspInit+0x12c>)
 8002654:	f001 faa6 	bl	8003ba4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002658:	2200      	movs	r2, #0
 800265a:	2105      	movs	r1, #5
 800265c:	2025      	movs	r0, #37	; 0x25
 800265e:	f001 f90f 	bl	8003880 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002662:	2025      	movs	r0, #37	; 0x25
 8002664:	f001 f938 	bl	80038d8 <HAL_NVIC_EnableIRQ>
}
 8002668:	bf00      	nop
 800266a:	3728      	adds	r7, #40	; 0x28
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	40004c00 	.word	0x40004c00
 8002674:	40021000 	.word	0x40021000
 8002678:	40011000 	.word	0x40011000
 800267c:	40013800 	.word	0x40013800
 8002680:	40010800 	.word	0x40010800

08002684 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  LOG_error("NMI_Handler() triggered");
 8002688:	4902      	ldr	r1, [pc, #8]	; (8002694 <NMI_Handler+0x10>)
 800268a:	2003      	movs	r0, #3
 800268c:	f008 fb8e 	bl	800adac <LOG_log>
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002690:	e7fe      	b.n	8002690 <NMI_Handler+0xc>
 8002692:	bf00      	nop
 8002694:	0800edfc 	.word	0x0800edfc

08002698 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  LOG_error("HardFault_Handler() triggered");
 800269c:	4902      	ldr	r1, [pc, #8]	; (80026a8 <HardFault_Handler+0x10>)
 800269e:	2003      	movs	r0, #3
 80026a0:	f008 fb84 	bl	800adac <LOG_log>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026a4:	e7fe      	b.n	80026a4 <HardFault_Handler+0xc>
 80026a6:	bf00      	nop
 80026a8:	0800ee14 	.word	0x0800ee14

080026ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
  LOG_error("MemManage_Handler() triggered");
 80026b0:	4902      	ldr	r1, [pc, #8]	; (80026bc <MemManage_Handler+0x10>)
 80026b2:	2003      	movs	r0, #3
 80026b4:	f008 fb7a 	bl	800adac <LOG_log>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026b8:	e7fe      	b.n	80026b8 <MemManage_Handler+0xc>
 80026ba:	bf00      	nop
 80026bc:	0800ee34 	.word	0x0800ee34

080026c0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
  LOG_error("BusFault_Handler() triggered");
 80026c4:	4902      	ldr	r1, [pc, #8]	; (80026d0 <BusFault_Handler+0x10>)
 80026c6:	2003      	movs	r0, #3
 80026c8:	f008 fb70 	bl	800adac <LOG_log>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026cc:	e7fe      	b.n	80026cc <BusFault_Handler+0xc>
 80026ce:	bf00      	nop
 80026d0:	0800ee54 	.word	0x0800ee54

080026d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
  LOG_error("UsageFault_Handler() triggered");
 80026d8:	4902      	ldr	r1, [pc, #8]	; (80026e4 <UsageFault_Handler+0x10>)
 80026da:	2003      	movs	r0, #3
 80026dc:	f008 fb66 	bl	800adac <LOG_log>
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026e0:	e7fe      	b.n	80026e0 <UsageFault_Handler+0xc>
 80026e2:	bf00      	nop
 80026e4:	0800ee74 	.word	0x0800ee74

080026e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SVCall_IRQn 0 */
  LOG_error("SVC_Handler() triggered");
 80026ec:	4902      	ldr	r1, [pc, #8]	; (80026f8 <SVC_Handler+0x10>)
 80026ee:	2003      	movs	r0, #3
 80026f0:	f008 fb5c 	bl	800adac <LOG_log>
  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026f4:	bf00      	nop
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	0800ee94 	.word	0x0800ee94

080026fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */
  LOG_error("DebugMon_Handler() triggered");
 8002700:	4902      	ldr	r1, [pc, #8]	; (800270c <DebugMon_Handler+0x10>)
 8002702:	2003      	movs	r0, #3
 8002704:	f008 fb52 	bl	800adac <LOG_log>
  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002708:	bf00      	nop
 800270a:	bd80      	pop	{r7, pc}
 800270c:	0800eeac 	.word	0x0800eeac

08002710 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PendSV_IRQn 0 */
  LOG_error("PendSV_Handler() triggered");
 8002714:	4902      	ldr	r1, [pc, #8]	; (8002720 <PendSV_Handler+0x10>)
 8002716:	2003      	movs	r0, #3
 8002718:	f008 fb48 	bl	800adac <LOG_log>
  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800271c:	bf00      	nop
 800271e:	bd80      	pop	{r7, pc}
 8002720:	0800eecc 	.word	0x0800eecc

08002724 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002728:	f000 f988 	bl	8002a3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800272c:	bf00      	nop
 800272e:	bd80      	pop	{r7, pc}

08002730 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002734:	4802      	ldr	r0, [pc, #8]	; (8002740 <TIM1_UP_IRQHandler+0x10>)
 8002736:	f004 fa25 	bl	8006b84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800273a:	bf00      	nop
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	20000914 	.word	0x20000914

08002744 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002748:	4802      	ldr	r0, [pc, #8]	; (8002754 <TIM2_IRQHandler+0x10>)
 800274a:	f004 fa1b 	bl	8006b84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800274e:	bf00      	nop
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	20000a40 	.word	0x20000a40

08002758 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800275c:	4802      	ldr	r0, [pc, #8]	; (8002768 <TIM3_IRQHandler+0x10>)
 800275e:	f004 fa11 	bl	8006b84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002762:	bf00      	nop
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	200006f4 	.word	0x200006f4

0800276c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002770:	4802      	ldr	r0, [pc, #8]	; (800277c <TIM4_IRQHandler+0x10>)
 8002772:	f004 fa07 	bl	8006b84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002776:	bf00      	nop
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	2000058c 	.word	0x2000058c

08002780 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002784:	4802      	ldr	r0, [pc, #8]	; (8002790 <USART1_IRQHandler+0x10>)
 8002786:	f005 ff5d 	bl	8008644 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800278a:	bf00      	nop
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	200007d8 	.word	0x200007d8

08002794 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002798:	4802      	ldr	r0, [pc, #8]	; (80027a4 <TIM5_IRQHandler+0x10>)
 800279a:	f004 f9f3 	bl	8006b84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800279e:	bf00      	nop
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	20000640 	.word	0x20000640

080027a8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80027ac:	4802      	ldr	r0, [pc, #8]	; (80027b8 <UART4_IRQHandler+0x10>)
 80027ae:	f005 ff49 	bl	8008644 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80027b2:	bf00      	nop
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	200009cc 	.word	0x200009cc

080027bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
	return 1;
 80027c0:	2301      	movs	r3, #1
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bc80      	pop	{r7}
 80027c8:	4770      	bx	lr

080027ca <_kill>:

int _kill(int pid, int sig)
{
 80027ca:	b580      	push	{r7, lr}
 80027cc:	b082      	sub	sp, #8
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
 80027d2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80027d4:	f009 f8c4 	bl	800b960 <__errno>
 80027d8:	4603      	mov	r3, r0
 80027da:	2216      	movs	r2, #22
 80027dc:	601a      	str	r2, [r3, #0]
	return -1;
 80027de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3708      	adds	r7, #8
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}

080027ea <_exit>:

void _exit (int status)
{
 80027ea:	b580      	push	{r7, lr}
 80027ec:	b082      	sub	sp, #8
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80027f2:	f04f 31ff 	mov.w	r1, #4294967295
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f7ff ffe7 	bl	80027ca <_kill>
	while (1) {}		/* Make sure we hang here */
 80027fc:	e7fe      	b.n	80027fc <_exit+0x12>

080027fe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027fe:	b580      	push	{r7, lr}
 8002800:	b086      	sub	sp, #24
 8002802:	af00      	add	r7, sp, #0
 8002804:	60f8      	str	r0, [r7, #12]
 8002806:	60b9      	str	r1, [r7, #8]
 8002808:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800280a:	2300      	movs	r3, #0
 800280c:	617b      	str	r3, [r7, #20]
 800280e:	e00a      	b.n	8002826 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002810:	f3af 8000 	nop.w
 8002814:	4601      	mov	r1, r0
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	1c5a      	adds	r2, r3, #1
 800281a:	60ba      	str	r2, [r7, #8]
 800281c:	b2ca      	uxtb	r2, r1
 800281e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	3301      	adds	r3, #1
 8002824:	617b      	str	r3, [r7, #20]
 8002826:	697a      	ldr	r2, [r7, #20]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	429a      	cmp	r2, r3
 800282c:	dbf0      	blt.n	8002810 <_read+0x12>
	}

return len;
 800282e:	687b      	ldr	r3, [r7, #4]
}
 8002830:	4618      	mov	r0, r3
 8002832:	3718      	adds	r7, #24
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}

08002838 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	607a      	str	r2, [r7, #4]
  if ((file != STDOUT_FILENO) && (file != STDERR_FILENO))
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2b01      	cmp	r3, #1
 8002848:	d00a      	beq.n	8002860 <_write+0x28>
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2b02      	cmp	r3, #2
 800284e:	d007      	beq.n	8002860 <_write+0x28>
  {
    errno = EBADF;
 8002850:	f009 f886 	bl	800b960 <__errno>
 8002854:	4603      	mov	r3, r0
 8002856:	2209      	movs	r2, #9
 8002858:	601a      	str	r2, [r3, #0]
    return -1;
 800285a:	f04f 33ff 	mov.w	r3, #4294967295
 800285e:	e00f      	b.n	8002880 <_write+0x48>
  }

  if (g_MAIN_printOutput == MAIN_PRINT_OUTPUT_TO_CONSOLE)
 8002860:	4b09      	ldr	r3, [pc, #36]	; (8002888 <_write+0x50>)
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d105      	bne.n	8002874 <_write+0x3c>
  {
    CON_sendString(ptr, len);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	4619      	mov	r1, r3
 800286c:	68b8      	ldr	r0, [r7, #8]
 800286e:	f006 ff6f 	bl	8009750 <CON_sendString>
 8002872:	e004      	b.n	800287e <_write+0x46>
  }
  else
  {
    MAS_sendString(ptr, len);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	4619      	mov	r1, r3
 8002878:	68b8      	ldr	r0, [r7, #8]
 800287a:	f008 fba5 	bl	800afc8 <MAS_sendString>
  }

  return len;
 800287e:	687b      	ldr	r3, [r7, #4]
}
 8002880:	4618      	mov	r0, r3
 8002882:	3710      	adds	r7, #16
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	200009c8 	.word	0x200009c8

0800288c <_close>:

int _close(int file)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
	return -1;
 8002894:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002898:	4618      	mov	r0, r3
 800289a:	370c      	adds	r7, #12
 800289c:	46bd      	mov	sp, r7
 800289e:	bc80      	pop	{r7}
 80028a0:	4770      	bx	lr

080028a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80028a2:	b480      	push	{r7}
 80028a4:	b083      	sub	sp, #12
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
 80028aa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80028b2:	605a      	str	r2, [r3, #4]
	return 0;
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bc80      	pop	{r7}
 80028be:	4770      	bx	lr

080028c0 <_isatty>:

int _isatty(int file)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
	return 1;
 80028c8:	2301      	movs	r3, #1
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	370c      	adds	r7, #12
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bc80      	pop	{r7}
 80028d2:	4770      	bx	lr

080028d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b085      	sub	sp, #20
 80028d8:	af00      	add	r7, sp, #0
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	607a      	str	r2, [r7, #4]
	return 0;
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3714      	adds	r7, #20
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bc80      	pop	{r7}
 80028ea:	4770      	bx	lr

080028ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b086      	sub	sp, #24
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028f4:	4a14      	ldr	r2, [pc, #80]	; (8002948 <_sbrk+0x5c>)
 80028f6:	4b15      	ldr	r3, [pc, #84]	; (800294c <_sbrk+0x60>)
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002900:	4b13      	ldr	r3, [pc, #76]	; (8002950 <_sbrk+0x64>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d102      	bne.n	800290e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002908:	4b11      	ldr	r3, [pc, #68]	; (8002950 <_sbrk+0x64>)
 800290a:	4a12      	ldr	r2, [pc, #72]	; (8002954 <_sbrk+0x68>)
 800290c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800290e:	4b10      	ldr	r3, [pc, #64]	; (8002950 <_sbrk+0x64>)
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4413      	add	r3, r2
 8002916:	693a      	ldr	r2, [r7, #16]
 8002918:	429a      	cmp	r2, r3
 800291a:	d207      	bcs.n	800292c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800291c:	f009 f820 	bl	800b960 <__errno>
 8002920:	4603      	mov	r3, r0
 8002922:	220c      	movs	r2, #12
 8002924:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002926:	f04f 33ff 	mov.w	r3, #4294967295
 800292a:	e009      	b.n	8002940 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800292c:	4b08      	ldr	r3, [pc, #32]	; (8002950 <_sbrk+0x64>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002932:	4b07      	ldr	r3, [pc, #28]	; (8002950 <_sbrk+0x64>)
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4413      	add	r3, r2
 800293a:	4a05      	ldr	r2, [pc, #20]	; (8002950 <_sbrk+0x64>)
 800293c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800293e:	68fb      	ldr	r3, [r7, #12]
}
 8002940:	4618      	mov	r0, r3
 8002942:	3718      	adds	r7, #24
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	2000c000 	.word	0x2000c000
 800294c:	00000400 	.word	0x00000400
 8002950:	20000218 	.word	0x20000218
 8002954:	20000bc0 	.word	0x20000bc0

08002958 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002958:	b480      	push	{r7}
 800295a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800295c:	bf00      	nop
 800295e:	46bd      	mov	sp, r7
 8002960:	bc80      	pop	{r7}
 8002962:	4770      	bx	lr

08002964 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002964:	480c      	ldr	r0, [pc, #48]	; (8002998 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002966:	490d      	ldr	r1, [pc, #52]	; (800299c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002968:	4a0d      	ldr	r2, [pc, #52]	; (80029a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800296a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800296c:	e002      	b.n	8002974 <LoopCopyDataInit>

0800296e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800296e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002970:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002972:	3304      	adds	r3, #4

08002974 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002974:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002976:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002978:	d3f9      	bcc.n	800296e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800297a:	4a0a      	ldr	r2, [pc, #40]	; (80029a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800297c:	4c0a      	ldr	r4, [pc, #40]	; (80029a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800297e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002980:	e001      	b.n	8002986 <LoopFillZerobss>

08002982 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002982:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002984:	3204      	adds	r2, #4

08002986 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002986:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002988:	d3fb      	bcc.n	8002982 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800298a:	f7ff ffe5 	bl	8002958 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800298e:	f008 ffed 	bl	800b96c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002992:	f7fe fcdb 	bl	800134c <main>
  bx lr
 8002996:	4770      	bx	lr
  ldr r0, =_sdata
 8002998:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800299c:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 80029a0:	0800fda4 	.word	0x0800fda4
  ldr r2, =_sbss
 80029a4:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 80029a8:	20000bbc 	.word	0x20000bbc

080029ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80029ac:	e7fe      	b.n	80029ac <ADC1_2_IRQHandler>
	...

080029b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029b4:	4b08      	ldr	r3, [pc, #32]	; (80029d8 <HAL_Init+0x28>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a07      	ldr	r2, [pc, #28]	; (80029d8 <HAL_Init+0x28>)
 80029ba:	f043 0310 	orr.w	r3, r3, #16
 80029be:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029c0:	2003      	movs	r0, #3
 80029c2:	f000 ff3d 	bl	8003840 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029c6:	2000      	movs	r0, #0
 80029c8:	f000 f808 	bl	80029dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029cc:	f7ff fb8a 	bl	80020e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	40022000 	.word	0x40022000

080029dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029e4:	4b12      	ldr	r3, [pc, #72]	; (8002a30 <HAL_InitTick+0x54>)
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	4b12      	ldr	r3, [pc, #72]	; (8002a34 <HAL_InitTick+0x58>)
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	4619      	mov	r1, r3
 80029ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80029f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80029fa:	4618      	mov	r0, r3
 80029fc:	f000 ff84 	bl	8003908 <HAL_SYSTICK_Config>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d001      	beq.n	8002a0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e00e      	b.n	8002a28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2b0f      	cmp	r3, #15
 8002a0e:	d80a      	bhi.n	8002a26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a10:	2200      	movs	r2, #0
 8002a12:	6879      	ldr	r1, [r7, #4]
 8002a14:	f04f 30ff 	mov.w	r0, #4294967295
 8002a18:	f000 ff32 	bl	8003880 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a1c:	4a06      	ldr	r2, [pc, #24]	; (8002a38 <HAL_InitTick+0x5c>)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a22:	2300      	movs	r3, #0
 8002a24:	e000      	b.n	8002a28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3708      	adds	r7, #8
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	20000000 	.word	0x20000000
 8002a34:	20000008 	.word	0x20000008
 8002a38:	20000004 	.word	0x20000004

08002a3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a40:	4b05      	ldr	r3, [pc, #20]	; (8002a58 <HAL_IncTick+0x1c>)
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	461a      	mov	r2, r3
 8002a46:	4b05      	ldr	r3, [pc, #20]	; (8002a5c <HAL_IncTick+0x20>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	4a03      	ldr	r2, [pc, #12]	; (8002a5c <HAL_IncTick+0x20>)
 8002a4e:	6013      	str	r3, [r2, #0]
}
 8002a50:	bf00      	nop
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bc80      	pop	{r7}
 8002a56:	4770      	bx	lr
 8002a58:	20000008 	.word	0x20000008
 8002a5c:	20000ba8 	.word	0x20000ba8

08002a60 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a60:	b480      	push	{r7}
 8002a62:	af00      	add	r7, sp, #0
  return uwTick;
 8002a64:	4b02      	ldr	r3, [pc, #8]	; (8002a70 <HAL_GetTick+0x10>)
 8002a66:	681b      	ldr	r3, [r3, #0]
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bc80      	pop	{r7}
 8002a6e:	4770      	bx	lr
 8002a70:	20000ba8 	.word	0x20000ba8

08002a74 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b086      	sub	sp, #24
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002a80:	2300      	movs	r3, #0
 8002a82:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002a84:	2300      	movs	r3, #0
 8002a86:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d101      	bne.n	8002a96 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e188      	b.n	8002da8 <HAL_ADC_Init+0x334>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a8c      	ldr	r2, [pc, #560]	; (8002ccc <HAL_ADC_Init+0x258>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d00e      	beq.n	8002abe <HAL_ADC_Init+0x4a>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a8a      	ldr	r2, [pc, #552]	; (8002cd0 <HAL_ADC_Init+0x25c>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d009      	beq.n	8002abe <HAL_ADC_Init+0x4a>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a89      	ldr	r2, [pc, #548]	; (8002cd4 <HAL_ADC_Init+0x260>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d004      	beq.n	8002abe <HAL_ADC_Init+0x4a>
 8002ab4:	f240 11b3 	movw	r1, #435	; 0x1b3
 8002ab8:	4887      	ldr	r0, [pc, #540]	; (8002cd8 <HAL_ADC_Init+0x264>)
 8002aba:	f7ff fb01 	bl	80020c0 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d009      	beq.n	8002ada <HAL_ADC_Init+0x66>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ace:	d004      	beq.n	8002ada <HAL_ADC_Init+0x66>
 8002ad0:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 8002ad4:	4880      	ldr	r0, [pc, #512]	; (8002cd8 <HAL_ADC_Init+0x264>)
 8002ad6:	f7ff faf3 	bl	80020c0 <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d009      	beq.n	8002af6 <HAL_ADC_Init+0x82>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002aea:	d004      	beq.n	8002af6 <HAL_ADC_Init+0x82>
 8002aec:	f240 11b5 	movw	r1, #437	; 0x1b5
 8002af0:	4879      	ldr	r0, [pc, #484]	; (8002cd8 <HAL_ADC_Init+0x264>)
 8002af2:	f7ff fae5 	bl	80020c0 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	7b1b      	ldrb	r3, [r3, #12]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d008      	beq.n	8002b10 <HAL_ADC_Init+0x9c>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	7b1b      	ldrb	r3, [r3, #12]
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d004      	beq.n	8002b10 <HAL_ADC_Init+0x9c>
 8002b06:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 8002b0a:	4873      	ldr	r0, [pc, #460]	; (8002cd8 <HAL_ADC_Init+0x264>)
 8002b0c:	f7ff fad8 	bl	80020c0 <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	69db      	ldr	r3, [r3, #28]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d044      	beq.n	8002ba2 <HAL_ADC_Init+0x12e>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	69db      	ldr	r3, [r3, #28]
 8002b1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b20:	d03f      	beq.n	8002ba2 <HAL_ADC_Init+0x12e>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	69db      	ldr	r3, [r3, #28]
 8002b26:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8002b2a:	d03a      	beq.n	8002ba2 <HAL_ADC_Init+0x12e>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	69db      	ldr	r3, [r3, #28]
 8002b30:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002b34:	d035      	beq.n	8002ba2 <HAL_ADC_Init+0x12e>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	69db      	ldr	r3, [r3, #28]
 8002b3a:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 8002b3e:	d030      	beq.n	8002ba2 <HAL_ADC_Init+0x12e>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	69db      	ldr	r3, [r3, #28]
 8002b44:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002b48:	d02b      	beq.n	8002ba2 <HAL_ADC_Init+0x12e>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	69db      	ldr	r3, [r3, #28]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d027      	beq.n	8002ba2 <HAL_ADC_Init+0x12e>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	69db      	ldr	r3, [r3, #28]
 8002b56:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b5a:	d022      	beq.n	8002ba2 <HAL_ADC_Init+0x12e>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	69db      	ldr	r3, [r3, #28]
 8002b60:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8002b64:	d01d      	beq.n	8002ba2 <HAL_ADC_Init+0x12e>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	69db      	ldr	r3, [r3, #28]
 8002b6a:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 8002b6e:	d018      	beq.n	8002ba2 <HAL_ADC_Init+0x12e>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	69db      	ldr	r3, [r3, #28]
 8002b74:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002b78:	d013      	beq.n	8002ba2 <HAL_ADC_Init+0x12e>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	69db      	ldr	r3, [r3, #28]
 8002b7e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002b82:	d00e      	beq.n	8002ba2 <HAL_ADC_Init+0x12e>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	69db      	ldr	r3, [r3, #28]
 8002b88:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002b8c:	d009      	beq.n	8002ba2 <HAL_ADC_Init+0x12e>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	69db      	ldr	r3, [r3, #28]
 8002b92:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002b96:	d004      	beq.n	8002ba2 <HAL_ADC_Init+0x12e>
 8002b98:	f240 11b7 	movw	r1, #439	; 0x1b7
 8002b9c:	484e      	ldr	r0, [pc, #312]	; (8002cd8 <HAL_ADC_Init+0x264>)
 8002b9e:	f7ff fa8f 	bl	80020c0 <assert_failed>
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d02a      	beq.n	8002c00 <HAL_ADC_Init+0x18c>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d003      	beq.n	8002bba <HAL_ADC_Init+0x146>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	2b10      	cmp	r3, #16
 8002bb8:	d904      	bls.n	8002bc4 <HAL_ADC_Init+0x150>
 8002bba:	f240 11bb 	movw	r1, #443	; 0x1bb
 8002bbe:	4846      	ldr	r0, [pc, #280]	; (8002cd8 <HAL_ADC_Init+0x264>)
 8002bc0:	f7ff fa7e 	bl	80020c0 <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	7d1b      	ldrb	r3, [r3, #20]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d008      	beq.n	8002bde <HAL_ADC_Init+0x16a>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	7d1b      	ldrb	r3, [r3, #20]
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d004      	beq.n	8002bde <HAL_ADC_Init+0x16a>
 8002bd4:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8002bd8:	483f      	ldr	r0, [pc, #252]	; (8002cd8 <HAL_ADC_Init+0x264>)
 8002bda:	f7ff fa71 	bl	80020c0 <assert_failed>
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	7d1b      	ldrb	r3, [r3, #20]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d00c      	beq.n	8002c00 <HAL_ADC_Init+0x18c>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	699b      	ldr	r3, [r3, #24]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d003      	beq.n	8002bf6 <HAL_ADC_Init+0x182>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	699b      	ldr	r3, [r3, #24]
 8002bf2:	2b08      	cmp	r3, #8
 8002bf4:	d904      	bls.n	8002c00 <HAL_ADC_Init+0x18c>
 8002bf6:	f240 11bf 	movw	r1, #447	; 0x1bf
 8002bfa:	4837      	ldr	r0, [pc, #220]	; (8002cd8 <HAL_ADC_Init+0x264>)
 8002bfc:	f7ff fa60 	bl	80020c0 <assert_failed>
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d109      	bne.n	8002c1c <HAL_ADC_Init+0x1a8>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f7ff fa96 	bl	8002148 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f000 fd01 	bl	8003624 <ADC_ConversionStop_Disable>
 8002c22:	4603      	mov	r3, r0
 8002c24:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c2a:	f003 0310 	and.w	r3, r3, #16
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	f040 80b1 	bne.w	8002d96 <HAL_ADC_Init+0x322>
 8002c34:	7dfb      	ldrb	r3, [r7, #23]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	f040 80ad 	bne.w	8002d96 <HAL_ADC_Init+0x322>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c40:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002c44:	f023 0302 	bic.w	r3, r3, #2
 8002c48:	f043 0202 	orr.w	r2, r3, #2
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	491e      	ldr	r1, [pc, #120]	; (8002cd4 <HAL_ADC_Init+0x260>)
 8002c5a:	428b      	cmp	r3, r1
 8002c5c:	d10a      	bne.n	8002c74 <HAL_ADC_Init+0x200>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	69db      	ldr	r3, [r3, #28]
 8002c62:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002c66:	d002      	beq.n	8002c6e <HAL_ADC_Init+0x1fa>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	69db      	ldr	r3, [r3, #28]
 8002c6c:	e004      	b.n	8002c78 <HAL_ADC_Init+0x204>
 8002c6e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002c72:	e001      	b.n	8002c78 <HAL_ADC_Init+0x204>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002c78:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	7b1b      	ldrb	r3, [r3, #12]
 8002c7e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002c80:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002c82:	68ba      	ldr	r2, [r7, #8]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c90:	d003      	beq.n	8002c9a <HAL_ADC_Init+0x226>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d102      	bne.n	8002ca0 <HAL_ADC_Init+0x22c>
 8002c9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c9e:	e000      	b.n	8002ca2 <HAL_ADC_Init+0x22e>
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	693a      	ldr	r2, [r7, #16]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	7d1b      	ldrb	r3, [r3, #20]
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d121      	bne.n	8002cf4 <HAL_ADC_Init+0x280>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	7b1b      	ldrb	r3, [r3, #12]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d111      	bne.n	8002cdc <HAL_ADC_Init+0x268>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	699b      	ldr	r3, [r3, #24]
 8002cbc:	3b01      	subs	r3, #1
 8002cbe:	035a      	lsls	r2, r3, #13
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002cc8:	613b      	str	r3, [r7, #16]
 8002cca:	e013      	b.n	8002cf4 <HAL_ADC_Init+0x280>
 8002ccc:	40012400 	.word	0x40012400
 8002cd0:	40012800 	.word	0x40012800
 8002cd4:	40013c00 	.word	0x40013c00
 8002cd8:	0800eee8 	.word	0x0800eee8
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce0:	f043 0220 	orr.w	r2, r3, #32
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cec:	f043 0201 	orr.w	r2, r3, #1
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	693a      	ldr	r2, [r7, #16]
 8002d04:	430a      	orrs	r2, r1
 8002d06:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	689a      	ldr	r2, [r3, #8]
 8002d0e:	4b28      	ldr	r3, [pc, #160]	; (8002db0 <HAL_ADC_Init+0x33c>)
 8002d10:	4013      	ands	r3, r2
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	6812      	ldr	r2, [r2, #0]
 8002d16:	68b9      	ldr	r1, [r7, #8]
 8002d18:	430b      	orrs	r3, r1
 8002d1a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d24:	d003      	beq.n	8002d2e <HAL_ADC_Init+0x2ba>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d104      	bne.n	8002d38 <HAL_ADC_Init+0x2c4>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	3b01      	subs	r3, #1
 8002d34:	051b      	lsls	r3, r3, #20
 8002d36:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d3e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	68fa      	ldr	r2, [r7, #12]
 8002d48:	430a      	orrs	r2, r1
 8002d4a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	689a      	ldr	r2, [r3, #8]
 8002d52:	4b18      	ldr	r3, [pc, #96]	; (8002db4 <HAL_ADC_Init+0x340>)
 8002d54:	4013      	ands	r3, r2
 8002d56:	68ba      	ldr	r2, [r7, #8]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d10b      	bne.n	8002d74 <HAL_ADC_Init+0x300>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d66:	f023 0303 	bic.w	r3, r3, #3
 8002d6a:	f043 0201 	orr.w	r2, r3, #1
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002d72:	e018      	b.n	8002da6 <HAL_ADC_Init+0x332>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d78:	f023 0312 	bic.w	r3, r3, #18
 8002d7c:	f043 0210 	orr.w	r2, r3, #16
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d88:	f043 0201 	orr.w	r2, r3, #1
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002d94:	e007      	b.n	8002da6 <HAL_ADC_Init+0x332>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d9a:	f043 0210 	orr.w	r2, r3, #16
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002da6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3718      	adds	r7, #24
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	ffe1f7fd 	.word	0xffe1f7fd
 8002db4:	ff1f0efe 	.word	0xff1f0efe

08002db8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b084      	sub	sp, #16
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a5a      	ldr	r2, [pc, #360]	; (8002f34 <HAL_ADC_Start+0x17c>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d00e      	beq.n	8002dec <HAL_ADC_Start+0x34>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a59      	ldr	r2, [pc, #356]	; (8002f38 <HAL_ADC_Start+0x180>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d009      	beq.n	8002dec <HAL_ADC_Start+0x34>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a57      	ldr	r2, [pc, #348]	; (8002f3c <HAL_ADC_Start+0x184>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d004      	beq.n	8002dec <HAL_ADC_Start+0x34>
 8002de2:	f240 411b 	movw	r1, #1051	; 0x41b
 8002de6:	4856      	ldr	r0, [pc, #344]	; (8002f40 <HAL_ADC_Start+0x188>)
 8002de8:	f7ff f96a 	bl	80020c0 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d101      	bne.n	8002dfa <HAL_ADC_Start+0x42>
 8002df6:	2302      	movs	r3, #2
 8002df8:	e098      	b.n	8002f2c <HAL_ADC_Start+0x174>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f000 fbb4 	bl	8003570 <ADC_Enable>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002e0c:	7bfb      	ldrb	r3, [r7, #15]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	f040 8087 	bne.w	8002f22 <HAL_ADC_Start+0x16a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e1c:	f023 0301 	bic.w	r3, r3, #1
 8002e20:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a42      	ldr	r2, [pc, #264]	; (8002f38 <HAL_ADC_Start+0x180>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d105      	bne.n	8002e3e <HAL_ADC_Start+0x86>
 8002e32:	4b40      	ldr	r3, [pc, #256]	; (8002f34 <HAL_ADC_Start+0x17c>)
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d115      	bne.n	8002e6a <HAL_ADC_Start+0xb2>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e42:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d026      	beq.n	8002ea6 <HAL_ADC_Start+0xee>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e5c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002e60:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002e68:	e01d      	b.n	8002ea6 <HAL_ADC_Start+0xee>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e6e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a2e      	ldr	r2, [pc, #184]	; (8002f34 <HAL_ADC_Start+0x17c>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d004      	beq.n	8002e8a <HAL_ADC_Start+0xd2>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a2c      	ldr	r2, [pc, #176]	; (8002f38 <HAL_ADC_Start+0x180>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d10d      	bne.n	8002ea6 <HAL_ADC_Start+0xee>
 8002e8a:	4b2a      	ldr	r3, [pc, #168]	; (8002f34 <HAL_ADC_Start+0x17c>)
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d007      	beq.n	8002ea6 <HAL_ADC_Start+0xee>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e9a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002e9e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eaa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d006      	beq.n	8002ec0 <HAL_ADC_Start+0x108>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb6:	f023 0206 	bic.w	r2, r3, #6
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	62da      	str	r2, [r3, #44]	; 0x2c
 8002ebe:	e002      	b.n	8002ec6 <HAL_ADC_Start+0x10e>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f06f 0202 	mvn.w	r2, #2
 8002ed6:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002ee2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002ee6:	d113      	bne.n	8002f10 <HAL_ADC_Start+0x158>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002eec:	4a12      	ldr	r2, [pc, #72]	; (8002f38 <HAL_ADC_Start+0x180>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d105      	bne.n	8002efe <HAL_ADC_Start+0x146>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002ef2:	4b10      	ldr	r3, [pc, #64]	; (8002f34 <HAL_ADC_Start+0x17c>)
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d108      	bne.n	8002f10 <HAL_ADC_Start+0x158>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	689a      	ldr	r2, [r3, #8]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002f0c:	609a      	str	r2, [r3, #8]
 8002f0e:	e00c      	b.n	8002f2a <HAL_ADC_Start+0x172>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	689a      	ldr	r2, [r3, #8]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002f1e:	609a      	str	r2, [r3, #8]
 8002f20:	e003      	b.n	8002f2a <HAL_ADC_Start+0x172>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002f2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3710      	adds	r7, #16
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	40012400 	.word	0x40012400
 8002f38:	40012800 	.word	0x40012800
 8002f3c:	40013c00 	.word	0x40013c00
 8002f40:	0800eee8 	.word	0x0800eee8

08002f44 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002f44:	b590      	push	{r4, r7, lr}
 8002f46:	b087      	sub	sp, #28
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002f52:	2300      	movs	r3, #0
 8002f54:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002f56:	2300      	movs	r3, #0
 8002f58:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a80      	ldr	r2, [pc, #512]	; (8003160 <HAL_ADC_PollForConversion+0x21c>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d00e      	beq.n	8002f82 <HAL_ADC_PollForConversion+0x3e>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a7e      	ldr	r2, [pc, #504]	; (8003164 <HAL_ADC_PollForConversion+0x220>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d009      	beq.n	8002f82 <HAL_ADC_PollForConversion+0x3e>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a7d      	ldr	r2, [pc, #500]	; (8003168 <HAL_ADC_PollForConversion+0x224>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d004      	beq.n	8002f82 <HAL_ADC_PollForConversion+0x3e>
 8002f78:	f240 41bd 	movw	r1, #1213	; 0x4bd
 8002f7c:	487b      	ldr	r0, [pc, #492]	; (800316c <HAL_ADC_PollForConversion+0x228>)
 8002f7e:	f7ff f89f 	bl	80020c0 <assert_failed>
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002f82:	f7ff fd6d 	bl	8002a60 <HAL_GetTick>
 8002f86:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d00b      	beq.n	8002fae <HAL_ADC_PollForConversion+0x6a>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f9a:	f043 0220 	orr.w	r2, r3, #32
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e0d3      	b.n	8003156 <HAL_ADC_PollForConversion+0x212>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d131      	bne.n	8003020 <HAL_ADC_PollForConversion+0xdc>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d12a      	bne.n	8003020 <HAL_ADC_PollForConversion+0xdc>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002fca:	e021      	b.n	8003010 <HAL_ADC_PollForConversion+0xcc>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd2:	d01d      	beq.n	8003010 <HAL_ADC_PollForConversion+0xcc>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d007      	beq.n	8002fea <HAL_ADC_PollForConversion+0xa6>
 8002fda:	f7ff fd41 	bl	8002a60 <HAL_GetTick>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	683a      	ldr	r2, [r7, #0]
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d212      	bcs.n	8003010 <HAL_ADC_PollForConversion+0xcc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0302 	and.w	r3, r3, #2
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d10b      	bne.n	8003010 <HAL_ADC_PollForConversion+0xcc>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ffc:	f043 0204 	orr.w	r2, r3, #4
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e0a2      	b.n	8003156 <HAL_ADC_PollForConversion+0x212>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0302 	and.w	r3, r3, #2
 800301a:	2b00      	cmp	r3, #0
 800301c:	d0d6      	beq.n	8002fcc <HAL_ADC_PollForConversion+0x88>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800301e:	e070      	b.n	8003102 <HAL_ADC_PollForConversion+0x1be>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003020:	4b53      	ldr	r3, [pc, #332]	; (8003170 <HAL_ADC_PollForConversion+0x22c>)
 8003022:	681c      	ldr	r4, [r3, #0]
 8003024:	2002      	movs	r0, #2
 8003026:	f001 ff7d 	bl	8004f24 <HAL_RCCEx_GetPeriphCLKFreq>
 800302a:	4603      	mov	r3, r0
 800302c:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	6919      	ldr	r1, [r3, #16]
 8003036:	4b4f      	ldr	r3, [pc, #316]	; (8003174 <HAL_ADC_PollForConversion+0x230>)
 8003038:	400b      	ands	r3, r1
 800303a:	2b00      	cmp	r3, #0
 800303c:	d118      	bne.n	8003070 <HAL_ADC_PollForConversion+0x12c>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68d9      	ldr	r1, [r3, #12]
 8003044:	4b4c      	ldr	r3, [pc, #304]	; (8003178 <HAL_ADC_PollForConversion+0x234>)
 8003046:	400b      	ands	r3, r1
 8003048:	2b00      	cmp	r3, #0
 800304a:	d111      	bne.n	8003070 <HAL_ADC_PollForConversion+0x12c>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	6919      	ldr	r1, [r3, #16]
 8003052:	4b4a      	ldr	r3, [pc, #296]	; (800317c <HAL_ADC_PollForConversion+0x238>)
 8003054:	400b      	ands	r3, r1
 8003056:	2b00      	cmp	r3, #0
 8003058:	d108      	bne.n	800306c <HAL_ADC_PollForConversion+0x128>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	68d9      	ldr	r1, [r3, #12]
 8003060:	4b47      	ldr	r3, [pc, #284]	; (8003180 <HAL_ADC_PollForConversion+0x23c>)
 8003062:	400b      	ands	r3, r1
 8003064:	2b00      	cmp	r3, #0
 8003066:	d101      	bne.n	800306c <HAL_ADC_PollForConversion+0x128>
 8003068:	2314      	movs	r3, #20
 800306a:	e020      	b.n	80030ae <HAL_ADC_PollForConversion+0x16a>
 800306c:	2329      	movs	r3, #41	; 0x29
 800306e:	e01e      	b.n	80030ae <HAL_ADC_PollForConversion+0x16a>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	6919      	ldr	r1, [r3, #16]
 8003076:	4b41      	ldr	r3, [pc, #260]	; (800317c <HAL_ADC_PollForConversion+0x238>)
 8003078:	400b      	ands	r3, r1
 800307a:	2b00      	cmp	r3, #0
 800307c:	d106      	bne.n	800308c <HAL_ADC_PollForConversion+0x148>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	68d9      	ldr	r1, [r3, #12]
 8003084:	4b3e      	ldr	r3, [pc, #248]	; (8003180 <HAL_ADC_PollForConversion+0x23c>)
 8003086:	400b      	ands	r3, r1
 8003088:	2b00      	cmp	r3, #0
 800308a:	d00d      	beq.n	80030a8 <HAL_ADC_PollForConversion+0x164>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	6919      	ldr	r1, [r3, #16]
 8003092:	4b3c      	ldr	r3, [pc, #240]	; (8003184 <HAL_ADC_PollForConversion+0x240>)
 8003094:	400b      	ands	r3, r1
 8003096:	2b00      	cmp	r3, #0
 8003098:	d108      	bne.n	80030ac <HAL_ADC_PollForConversion+0x168>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	68d9      	ldr	r1, [r3, #12]
 80030a0:	4b38      	ldr	r3, [pc, #224]	; (8003184 <HAL_ADC_PollForConversion+0x240>)
 80030a2:	400b      	ands	r3, r1
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d101      	bne.n	80030ac <HAL_ADC_PollForConversion+0x168>
 80030a8:	2354      	movs	r3, #84	; 0x54
 80030aa:	e000      	b.n	80030ae <HAL_ADC_PollForConversion+0x16a>
 80030ac:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80030ae:	fb02 f303 	mul.w	r3, r2, r3
 80030b2:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80030b4:	e021      	b.n	80030fa <HAL_ADC_PollForConversion+0x1b6>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030bc:	d01a      	beq.n	80030f4 <HAL_ADC_PollForConversion+0x1b0>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d007      	beq.n	80030d4 <HAL_ADC_PollForConversion+0x190>
 80030c4:	f7ff fccc 	bl	8002a60 <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	683a      	ldr	r2, [r7, #0]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d20f      	bcs.n	80030f4 <HAL_ADC_PollForConversion+0x1b0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	693a      	ldr	r2, [r7, #16]
 80030d8:	429a      	cmp	r2, r3
 80030da:	d90b      	bls.n	80030f4 <HAL_ADC_PollForConversion+0x1b0>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e0:	f043 0204 	orr.w	r2, r3, #4
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	e030      	b.n	8003156 <HAL_ADC_PollForConversion+0x212>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	3301      	adds	r3, #1
 80030f8:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	693a      	ldr	r2, [r7, #16]
 80030fe:	429a      	cmp	r2, r3
 8003100:	d8d9      	bhi.n	80030b6 <HAL_ADC_PollForConversion+0x172>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f06f 0212 	mvn.w	r2, #18
 800310a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003110:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003122:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003126:	d115      	bne.n	8003154 <HAL_ADC_PollForConversion+0x210>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800312c:	2b00      	cmp	r3, #0
 800312e:	d111      	bne.n	8003154 <HAL_ADC_PollForConversion+0x210>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003134:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003140:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d105      	bne.n	8003154 <HAL_ADC_PollForConversion+0x210>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800314c:	f043 0201 	orr.w	r2, r3, #1
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003154:	2300      	movs	r3, #0
}
 8003156:	4618      	mov	r0, r3
 8003158:	371c      	adds	r7, #28
 800315a:	46bd      	mov	sp, r7
 800315c:	bd90      	pop	{r4, r7, pc}
 800315e:	bf00      	nop
 8003160:	40012400 	.word	0x40012400
 8003164:	40012800 	.word	0x40012800
 8003168:	40013c00 	.word	0x40013c00
 800316c:	0800eee8 	.word	0x0800eee8
 8003170:	20000000 	.word	0x20000000
 8003174:	24924924 	.word	0x24924924
 8003178:	00924924 	.word	0x00924924
 800317c:	12492492 	.word	0x12492492
 8003180:	00492492 	.word	0x00492492
 8003184:	00249249 	.word	0x00249249

08003188 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a0c      	ldr	r2, [pc, #48]	; (80031c8 <HAL_ADC_GetValue+0x40>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d00e      	beq.n	80031b8 <HAL_ADC_GetValue+0x30>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a0b      	ldr	r2, [pc, #44]	; (80031cc <HAL_ADC_GetValue+0x44>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d009      	beq.n	80031b8 <HAL_ADC_GetValue+0x30>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a09      	ldr	r2, [pc, #36]	; (80031d0 <HAL_ADC_GetValue+0x48>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d004      	beq.n	80031b8 <HAL_ADC_GetValue+0x30>
 80031ae:	f240 61ef 	movw	r1, #1775	; 0x6ef
 80031b2:	4808      	ldr	r0, [pc, #32]	; (80031d4 <HAL_ADC_GetValue+0x4c>)
 80031b4:	f7fe ff84 	bl	80020c0 <assert_failed>

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3708      	adds	r7, #8
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	40012400 	.word	0x40012400
 80031cc:	40012800 	.word	0x40012800
 80031d0:	40013c00 	.word	0x40013c00
 80031d4:	0800eee8 	.word	0x0800eee8

080031d8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031e2:	2300      	movs	r3, #0
 80031e4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80031e6:	2300      	movs	r3, #0
 80031e8:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a8b      	ldr	r2, [pc, #556]	; (800341c <HAL_ADC_ConfigChannel+0x244>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d00e      	beq.n	8003212 <HAL_ADC_ConfigChannel+0x3a>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a89      	ldr	r2, [pc, #548]	; (8003420 <HAL_ADC_ConfigChannel+0x248>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d009      	beq.n	8003212 <HAL_ADC_ConfigChannel+0x3a>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a88      	ldr	r2, [pc, #544]	; (8003424 <HAL_ADC_ConfigChannel+0x24c>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d004      	beq.n	8003212 <HAL_ADC_ConfigChannel+0x3a>
 8003208:	f240 71dd 	movw	r1, #2013	; 0x7dd
 800320c:	4886      	ldr	r0, [pc, #536]	; (8003428 <HAL_ADC_ConfigChannel+0x250>)
 800320e:	f7fe ff57 	bl	80020c0 <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d048      	beq.n	80032ac <HAL_ADC_ConfigChannel+0xd4>
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	2b01      	cmp	r3, #1
 8003220:	d044      	beq.n	80032ac <HAL_ADC_ConfigChannel+0xd4>
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	2b02      	cmp	r3, #2
 8003228:	d040      	beq.n	80032ac <HAL_ADC_ConfigChannel+0xd4>
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	2b03      	cmp	r3, #3
 8003230:	d03c      	beq.n	80032ac <HAL_ADC_ConfigChannel+0xd4>
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2b04      	cmp	r3, #4
 8003238:	d038      	beq.n	80032ac <HAL_ADC_ConfigChannel+0xd4>
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	2b05      	cmp	r3, #5
 8003240:	d034      	beq.n	80032ac <HAL_ADC_ConfigChannel+0xd4>
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	2b06      	cmp	r3, #6
 8003248:	d030      	beq.n	80032ac <HAL_ADC_ConfigChannel+0xd4>
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	2b07      	cmp	r3, #7
 8003250:	d02c      	beq.n	80032ac <HAL_ADC_ConfigChannel+0xd4>
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2b08      	cmp	r3, #8
 8003258:	d028      	beq.n	80032ac <HAL_ADC_ConfigChannel+0xd4>
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2b09      	cmp	r3, #9
 8003260:	d024      	beq.n	80032ac <HAL_ADC_ConfigChannel+0xd4>
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	2b0a      	cmp	r3, #10
 8003268:	d020      	beq.n	80032ac <HAL_ADC_ConfigChannel+0xd4>
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	2b0b      	cmp	r3, #11
 8003270:	d01c      	beq.n	80032ac <HAL_ADC_ConfigChannel+0xd4>
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	2b0c      	cmp	r3, #12
 8003278:	d018      	beq.n	80032ac <HAL_ADC_ConfigChannel+0xd4>
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2b0d      	cmp	r3, #13
 8003280:	d014      	beq.n	80032ac <HAL_ADC_ConfigChannel+0xd4>
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	2b0e      	cmp	r3, #14
 8003288:	d010      	beq.n	80032ac <HAL_ADC_ConfigChannel+0xd4>
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2b0f      	cmp	r3, #15
 8003290:	d00c      	beq.n	80032ac <HAL_ADC_ConfigChannel+0xd4>
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2b10      	cmp	r3, #16
 8003298:	d008      	beq.n	80032ac <HAL_ADC_ConfigChannel+0xd4>
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2b11      	cmp	r3, #17
 80032a0:	d004      	beq.n	80032ac <HAL_ADC_ConfigChannel+0xd4>
 80032a2:	f240 71de 	movw	r1, #2014	; 0x7de
 80032a6:	4860      	ldr	r0, [pc, #384]	; (8003428 <HAL_ADC_ConfigChannel+0x250>)
 80032a8:	f7fe ff0a 	bl	80020c0 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d040      	beq.n	8003336 <HAL_ADC_ConfigChannel+0x15e>
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d03c      	beq.n	8003336 <HAL_ADC_ConfigChannel+0x15e>
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	2b03      	cmp	r3, #3
 80032c2:	d038      	beq.n	8003336 <HAL_ADC_ConfigChannel+0x15e>
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	2b04      	cmp	r3, #4
 80032ca:	d034      	beq.n	8003336 <HAL_ADC_ConfigChannel+0x15e>
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	2b05      	cmp	r3, #5
 80032d2:	d030      	beq.n	8003336 <HAL_ADC_ConfigChannel+0x15e>
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	2b06      	cmp	r3, #6
 80032da:	d02c      	beq.n	8003336 <HAL_ADC_ConfigChannel+0x15e>
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	2b07      	cmp	r3, #7
 80032e2:	d028      	beq.n	8003336 <HAL_ADC_ConfigChannel+0x15e>
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	2b08      	cmp	r3, #8
 80032ea:	d024      	beq.n	8003336 <HAL_ADC_ConfigChannel+0x15e>
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	2b09      	cmp	r3, #9
 80032f2:	d020      	beq.n	8003336 <HAL_ADC_ConfigChannel+0x15e>
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	2b0a      	cmp	r3, #10
 80032fa:	d01c      	beq.n	8003336 <HAL_ADC_ConfigChannel+0x15e>
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	2b0b      	cmp	r3, #11
 8003302:	d018      	beq.n	8003336 <HAL_ADC_ConfigChannel+0x15e>
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	2b0c      	cmp	r3, #12
 800330a:	d014      	beq.n	8003336 <HAL_ADC_ConfigChannel+0x15e>
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	2b0d      	cmp	r3, #13
 8003312:	d010      	beq.n	8003336 <HAL_ADC_ConfigChannel+0x15e>
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	2b0e      	cmp	r3, #14
 800331a:	d00c      	beq.n	8003336 <HAL_ADC_ConfigChannel+0x15e>
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	2b0f      	cmp	r3, #15
 8003322:	d008      	beq.n	8003336 <HAL_ADC_ConfigChannel+0x15e>
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	2b10      	cmp	r3, #16
 800332a:	d004      	beq.n	8003336 <HAL_ADC_ConfigChannel+0x15e>
 800332c:	f240 71df 	movw	r1, #2015	; 0x7df
 8003330:	483d      	ldr	r0, [pc, #244]	; (8003428 <HAL_ADC_ConfigChannel+0x250>)
 8003332:	f7fe fec5 	bl	80020c0 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d020      	beq.n	8003380 <HAL_ADC_ConfigChannel+0x1a8>
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	2b01      	cmp	r3, #1
 8003344:	d01c      	beq.n	8003380 <HAL_ADC_ConfigChannel+0x1a8>
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	2b02      	cmp	r3, #2
 800334c:	d018      	beq.n	8003380 <HAL_ADC_ConfigChannel+0x1a8>
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	2b03      	cmp	r3, #3
 8003354:	d014      	beq.n	8003380 <HAL_ADC_ConfigChannel+0x1a8>
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	2b04      	cmp	r3, #4
 800335c:	d010      	beq.n	8003380 <HAL_ADC_ConfigChannel+0x1a8>
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	2b05      	cmp	r3, #5
 8003364:	d00c      	beq.n	8003380 <HAL_ADC_ConfigChannel+0x1a8>
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	2b06      	cmp	r3, #6
 800336c:	d008      	beq.n	8003380 <HAL_ADC_ConfigChannel+0x1a8>
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	2b07      	cmp	r3, #7
 8003374:	d004      	beq.n	8003380 <HAL_ADC_ConfigChannel+0x1a8>
 8003376:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 800337a:	482b      	ldr	r0, [pc, #172]	; (8003428 <HAL_ADC_ConfigChannel+0x250>)
 800337c:	f7fe fea0 	bl	80020c0 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003386:	2b01      	cmp	r3, #1
 8003388:	d101      	bne.n	800338e <HAL_ADC_ConfigChannel+0x1b6>
 800338a:	2302      	movs	r3, #2
 800338c:	e0e5      	b.n	800355a <HAL_ADC_ConfigChannel+0x382>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2201      	movs	r2, #1
 8003392:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	2b06      	cmp	r3, #6
 800339c:	d81c      	bhi.n	80033d8 <HAL_ADC_ConfigChannel+0x200>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	685a      	ldr	r2, [r3, #4]
 80033a8:	4613      	mov	r3, r2
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	4413      	add	r3, r2
 80033ae:	3b05      	subs	r3, #5
 80033b0:	221f      	movs	r2, #31
 80033b2:	fa02 f303 	lsl.w	r3, r2, r3
 80033b6:	43db      	mvns	r3, r3
 80033b8:	4019      	ands	r1, r3
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	6818      	ldr	r0, [r3, #0]
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	685a      	ldr	r2, [r3, #4]
 80033c2:	4613      	mov	r3, r2
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	4413      	add	r3, r2
 80033c8:	3b05      	subs	r3, #5
 80033ca:	fa00 f203 	lsl.w	r2, r0, r3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	430a      	orrs	r2, r1
 80033d4:	635a      	str	r2, [r3, #52]	; 0x34
 80033d6:	e045      	b.n	8003464 <HAL_ADC_ConfigChannel+0x28c>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	2b0c      	cmp	r3, #12
 80033de:	d825      	bhi.n	800342c <HAL_ADC_ConfigChannel+0x254>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	685a      	ldr	r2, [r3, #4]
 80033ea:	4613      	mov	r3, r2
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	4413      	add	r3, r2
 80033f0:	3b23      	subs	r3, #35	; 0x23
 80033f2:	221f      	movs	r2, #31
 80033f4:	fa02 f303 	lsl.w	r3, r2, r3
 80033f8:	43db      	mvns	r3, r3
 80033fa:	4019      	ands	r1, r3
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	6818      	ldr	r0, [r3, #0]
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	685a      	ldr	r2, [r3, #4]
 8003404:	4613      	mov	r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	4413      	add	r3, r2
 800340a:	3b23      	subs	r3, #35	; 0x23
 800340c:	fa00 f203 	lsl.w	r2, r0, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	430a      	orrs	r2, r1
 8003416:	631a      	str	r2, [r3, #48]	; 0x30
 8003418:	e024      	b.n	8003464 <HAL_ADC_ConfigChannel+0x28c>
 800341a:	bf00      	nop
 800341c:	40012400 	.word	0x40012400
 8003420:	40012800 	.word	0x40012800
 8003424:	40013c00 	.word	0x40013c00
 8003428:	0800eee8 	.word	0x0800eee8
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	685a      	ldr	r2, [r3, #4]
 8003436:	4613      	mov	r3, r2
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	4413      	add	r3, r2
 800343c:	3b41      	subs	r3, #65	; 0x41
 800343e:	221f      	movs	r2, #31
 8003440:	fa02 f303 	lsl.w	r3, r2, r3
 8003444:	43db      	mvns	r3, r3
 8003446:	4019      	ands	r1, r3
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	6818      	ldr	r0, [r3, #0]
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	685a      	ldr	r2, [r3, #4]
 8003450:	4613      	mov	r3, r2
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	4413      	add	r3, r2
 8003456:	3b41      	subs	r3, #65	; 0x41
 8003458:	fa00 f203 	lsl.w	r2, r0, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	430a      	orrs	r2, r1
 8003462:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	2b09      	cmp	r3, #9
 800346a:	d91c      	bls.n	80034a6 <HAL_ADC_ConfigChannel+0x2ce>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	68d9      	ldr	r1, [r3, #12]
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	4613      	mov	r3, r2
 8003478:	005b      	lsls	r3, r3, #1
 800347a:	4413      	add	r3, r2
 800347c:	3b1e      	subs	r3, #30
 800347e:	2207      	movs	r2, #7
 8003480:	fa02 f303 	lsl.w	r3, r2, r3
 8003484:	43db      	mvns	r3, r3
 8003486:	4019      	ands	r1, r3
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	6898      	ldr	r0, [r3, #8]
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	4613      	mov	r3, r2
 8003492:	005b      	lsls	r3, r3, #1
 8003494:	4413      	add	r3, r2
 8003496:	3b1e      	subs	r3, #30
 8003498:	fa00 f203 	lsl.w	r2, r0, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	430a      	orrs	r2, r1
 80034a2:	60da      	str	r2, [r3, #12]
 80034a4:	e019      	b.n	80034da <HAL_ADC_ConfigChannel+0x302>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	6919      	ldr	r1, [r3, #16]
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	4613      	mov	r3, r2
 80034b2:	005b      	lsls	r3, r3, #1
 80034b4:	4413      	add	r3, r2
 80034b6:	2207      	movs	r2, #7
 80034b8:	fa02 f303 	lsl.w	r3, r2, r3
 80034bc:	43db      	mvns	r3, r3
 80034be:	4019      	ands	r1, r3
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	6898      	ldr	r0, [r3, #8]
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	4613      	mov	r3, r2
 80034ca:	005b      	lsls	r3, r3, #1
 80034cc:	4413      	add	r3, r2
 80034ce:	fa00 f203 	lsl.w	r2, r0, r3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	430a      	orrs	r2, r1
 80034d8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2b10      	cmp	r3, #16
 80034e0:	d003      	beq.n	80034ea <HAL_ADC_ConfigChannel+0x312>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80034e6:	2b11      	cmp	r3, #17
 80034e8:	d132      	bne.n	8003550 <HAL_ADC_ConfigChannel+0x378>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a1d      	ldr	r2, [pc, #116]	; (8003564 <HAL_ADC_ConfigChannel+0x38c>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d125      	bne.n	8003540 <HAL_ADC_ConfigChannel+0x368>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d126      	bne.n	8003550 <HAL_ADC_ConfigChannel+0x378>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	689a      	ldr	r2, [r3, #8]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003510:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	2b10      	cmp	r3, #16
 8003518:	d11a      	bne.n	8003550 <HAL_ADC_ConfigChannel+0x378>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800351a:	4b13      	ldr	r3, [pc, #76]	; (8003568 <HAL_ADC_ConfigChannel+0x390>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a13      	ldr	r2, [pc, #76]	; (800356c <HAL_ADC_ConfigChannel+0x394>)
 8003520:	fba2 2303 	umull	r2, r3, r2, r3
 8003524:	0c9a      	lsrs	r2, r3, #18
 8003526:	4613      	mov	r3, r2
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	4413      	add	r3, r2
 800352c:	005b      	lsls	r3, r3, #1
 800352e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003530:	e002      	b.n	8003538 <HAL_ADC_ConfigChannel+0x360>
          {
            wait_loop_index--;
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	3b01      	subs	r3, #1
 8003536:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d1f9      	bne.n	8003532 <HAL_ADC_ConfigChannel+0x35a>
 800353e:	e007      	b.n	8003550 <HAL_ADC_ConfigChannel+0x378>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003544:	f043 0220 	orr.w	r2, r3, #32
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003558:	7bfb      	ldrb	r3, [r7, #15]
}
 800355a:	4618      	mov	r0, r3
 800355c:	3710      	adds	r7, #16
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	40012400 	.word	0x40012400
 8003568:	20000000 	.word	0x20000000
 800356c:	431bde83 	.word	0x431bde83

08003570 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003578:	2300      	movs	r3, #0
 800357a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800357c:	2300      	movs	r3, #0
 800357e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	f003 0301 	and.w	r3, r3, #1
 800358a:	2b01      	cmp	r3, #1
 800358c:	d040      	beq.n	8003610 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	689a      	ldr	r2, [r3, #8]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f042 0201 	orr.w	r2, r2, #1
 800359c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800359e:	4b1f      	ldr	r3, [pc, #124]	; (800361c <ADC_Enable+0xac>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a1f      	ldr	r2, [pc, #124]	; (8003620 <ADC_Enable+0xb0>)
 80035a4:	fba2 2303 	umull	r2, r3, r2, r3
 80035a8:	0c9b      	lsrs	r3, r3, #18
 80035aa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80035ac:	e002      	b.n	80035b4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	3b01      	subs	r3, #1
 80035b2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d1f9      	bne.n	80035ae <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80035ba:	f7ff fa51 	bl	8002a60 <HAL_GetTick>
 80035be:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80035c0:	e01f      	b.n	8003602 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80035c2:	f7ff fa4d 	bl	8002a60 <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	d918      	bls.n	8003602 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	f003 0301 	and.w	r3, r3, #1
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d011      	beq.n	8003602 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e2:	f043 0210 	orr.w	r2, r3, #16
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ee:	f043 0201 	orr.w	r2, r3, #1
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e007      	b.n	8003612 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f003 0301 	and.w	r3, r3, #1
 800360c:	2b01      	cmp	r3, #1
 800360e:	d1d8      	bne.n	80035c2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3710      	adds	r7, #16
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	20000000 	.word	0x20000000
 8003620:	431bde83 	.word	0x431bde83

08003624 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800362c:	2300      	movs	r3, #0
 800362e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	f003 0301 	and.w	r3, r3, #1
 800363a:	2b01      	cmp	r3, #1
 800363c:	d12e      	bne.n	800369c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	689a      	ldr	r2, [r3, #8]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f022 0201 	bic.w	r2, r2, #1
 800364c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800364e:	f7ff fa07 	bl	8002a60 <HAL_GetTick>
 8003652:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003654:	e01b      	b.n	800368e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003656:	f7ff fa03 	bl	8002a60 <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	2b02      	cmp	r3, #2
 8003662:	d914      	bls.n	800368e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	f003 0301 	and.w	r3, r3, #1
 800366e:	2b01      	cmp	r3, #1
 8003670:	d10d      	bne.n	800368e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003676:	f043 0210 	orr.w	r2, r3, #16
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003682:	f043 0201 	orr.w	r2, r3, #1
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e007      	b.n	800369e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	f003 0301 	and.w	r3, r3, #1
 8003698:	2b01      	cmp	r3, #1
 800369a:	d0dc      	beq.n	8003656 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800369c:	2300      	movs	r3, #0
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3710      	adds	r7, #16
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
	...

080036a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b085      	sub	sp, #20
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f003 0307 	and.w	r3, r3, #7
 80036b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036b8:	4b0c      	ldr	r3, [pc, #48]	; (80036ec <__NVIC_SetPriorityGrouping+0x44>)
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036be:	68ba      	ldr	r2, [r7, #8]
 80036c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80036c4:	4013      	ands	r3, r2
 80036c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80036d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036da:	4a04      	ldr	r2, [pc, #16]	; (80036ec <__NVIC_SetPriorityGrouping+0x44>)
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	60d3      	str	r3, [r2, #12]
}
 80036e0:	bf00      	nop
 80036e2:	3714      	adds	r7, #20
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bc80      	pop	{r7}
 80036e8:	4770      	bx	lr
 80036ea:	bf00      	nop
 80036ec:	e000ed00 	.word	0xe000ed00

080036f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036f0:	b480      	push	{r7}
 80036f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036f4:	4b04      	ldr	r3, [pc, #16]	; (8003708 <__NVIC_GetPriorityGrouping+0x18>)
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	0a1b      	lsrs	r3, r3, #8
 80036fa:	f003 0307 	and.w	r3, r3, #7
}
 80036fe:	4618      	mov	r0, r3
 8003700:	46bd      	mov	sp, r7
 8003702:	bc80      	pop	{r7}
 8003704:	4770      	bx	lr
 8003706:	bf00      	nop
 8003708:	e000ed00 	.word	0xe000ed00

0800370c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	4603      	mov	r3, r0
 8003714:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800371a:	2b00      	cmp	r3, #0
 800371c:	db0b      	blt.n	8003736 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800371e:	79fb      	ldrb	r3, [r7, #7]
 8003720:	f003 021f 	and.w	r2, r3, #31
 8003724:	4906      	ldr	r1, [pc, #24]	; (8003740 <__NVIC_EnableIRQ+0x34>)
 8003726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800372a:	095b      	lsrs	r3, r3, #5
 800372c:	2001      	movs	r0, #1
 800372e:	fa00 f202 	lsl.w	r2, r0, r2
 8003732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003736:	bf00      	nop
 8003738:	370c      	adds	r7, #12
 800373a:	46bd      	mov	sp, r7
 800373c:	bc80      	pop	{r7}
 800373e:	4770      	bx	lr
 8003740:	e000e100 	.word	0xe000e100

08003744 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	4603      	mov	r3, r0
 800374c:	6039      	str	r1, [r7, #0]
 800374e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003754:	2b00      	cmp	r3, #0
 8003756:	db0a      	blt.n	800376e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	b2da      	uxtb	r2, r3
 800375c:	490c      	ldr	r1, [pc, #48]	; (8003790 <__NVIC_SetPriority+0x4c>)
 800375e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003762:	0112      	lsls	r2, r2, #4
 8003764:	b2d2      	uxtb	r2, r2
 8003766:	440b      	add	r3, r1
 8003768:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800376c:	e00a      	b.n	8003784 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	b2da      	uxtb	r2, r3
 8003772:	4908      	ldr	r1, [pc, #32]	; (8003794 <__NVIC_SetPriority+0x50>)
 8003774:	79fb      	ldrb	r3, [r7, #7]
 8003776:	f003 030f 	and.w	r3, r3, #15
 800377a:	3b04      	subs	r3, #4
 800377c:	0112      	lsls	r2, r2, #4
 800377e:	b2d2      	uxtb	r2, r2
 8003780:	440b      	add	r3, r1
 8003782:	761a      	strb	r2, [r3, #24]
}
 8003784:	bf00      	nop
 8003786:	370c      	adds	r7, #12
 8003788:	46bd      	mov	sp, r7
 800378a:	bc80      	pop	{r7}
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop
 8003790:	e000e100 	.word	0xe000e100
 8003794:	e000ed00 	.word	0xe000ed00

08003798 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003798:	b480      	push	{r7}
 800379a:	b089      	sub	sp, #36	; 0x24
 800379c:	af00      	add	r7, sp, #0
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	60b9      	str	r1, [r7, #8]
 80037a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f003 0307 	and.w	r3, r3, #7
 80037aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	f1c3 0307 	rsb	r3, r3, #7
 80037b2:	2b04      	cmp	r3, #4
 80037b4:	bf28      	it	cs
 80037b6:	2304      	movcs	r3, #4
 80037b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037ba:	69fb      	ldr	r3, [r7, #28]
 80037bc:	3304      	adds	r3, #4
 80037be:	2b06      	cmp	r3, #6
 80037c0:	d902      	bls.n	80037c8 <NVIC_EncodePriority+0x30>
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	3b03      	subs	r3, #3
 80037c6:	e000      	b.n	80037ca <NVIC_EncodePriority+0x32>
 80037c8:	2300      	movs	r3, #0
 80037ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037cc:	f04f 32ff 	mov.w	r2, #4294967295
 80037d0:	69bb      	ldr	r3, [r7, #24]
 80037d2:	fa02 f303 	lsl.w	r3, r2, r3
 80037d6:	43da      	mvns	r2, r3
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	401a      	ands	r2, r3
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037e0:	f04f 31ff 	mov.w	r1, #4294967295
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	fa01 f303 	lsl.w	r3, r1, r3
 80037ea:	43d9      	mvns	r1, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037f0:	4313      	orrs	r3, r2
         );
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3724      	adds	r7, #36	; 0x24
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bc80      	pop	{r7}
 80037fa:	4770      	bx	lr

080037fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	3b01      	subs	r3, #1
 8003808:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800380c:	d301      	bcc.n	8003812 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800380e:	2301      	movs	r3, #1
 8003810:	e00f      	b.n	8003832 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003812:	4a0a      	ldr	r2, [pc, #40]	; (800383c <SysTick_Config+0x40>)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	3b01      	subs	r3, #1
 8003818:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800381a:	210f      	movs	r1, #15
 800381c:	f04f 30ff 	mov.w	r0, #4294967295
 8003820:	f7ff ff90 	bl	8003744 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003824:	4b05      	ldr	r3, [pc, #20]	; (800383c <SysTick_Config+0x40>)
 8003826:	2200      	movs	r2, #0
 8003828:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800382a:	4b04      	ldr	r3, [pc, #16]	; (800383c <SysTick_Config+0x40>)
 800382c:	2207      	movs	r2, #7
 800382e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003830:	2300      	movs	r3, #0
}
 8003832:	4618      	mov	r0, r3
 8003834:	3708      	adds	r7, #8
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	e000e010 	.word	0xe000e010

08003840 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2b07      	cmp	r3, #7
 800384c:	d00f      	beq.n	800386e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2b06      	cmp	r3, #6
 8003852:	d00c      	beq.n	800386e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2b05      	cmp	r3, #5
 8003858:	d009      	beq.n	800386e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2b04      	cmp	r3, #4
 800385e:	d006      	beq.n	800386e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2b03      	cmp	r3, #3
 8003864:	d003      	beq.n	800386e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003866:	2192      	movs	r1, #146	; 0x92
 8003868:	4804      	ldr	r0, [pc, #16]	; (800387c <HAL_NVIC_SetPriorityGrouping+0x3c>)
 800386a:	f7fe fc29 	bl	80020c0 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f7ff ff1a 	bl	80036a8 <__NVIC_SetPriorityGrouping>
}
 8003874:	bf00      	nop
 8003876:	3708      	adds	r7, #8
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}
 800387c:	0800ef20 	.word	0x0800ef20

08003880 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003880:	b580      	push	{r7, lr}
 8003882:	b086      	sub	sp, #24
 8003884:	af00      	add	r7, sp, #0
 8003886:	4603      	mov	r3, r0
 8003888:	60b9      	str	r1, [r7, #8]
 800388a:	607a      	str	r2, [r7, #4]
 800388c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800388e:	2300      	movs	r3, #0
 8003890:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2b0f      	cmp	r3, #15
 8003896:	d903      	bls.n	80038a0 <HAL_NVIC_SetPriority+0x20>
 8003898:	21aa      	movs	r1, #170	; 0xaa
 800389a:	480e      	ldr	r0, [pc, #56]	; (80038d4 <HAL_NVIC_SetPriority+0x54>)
 800389c:	f7fe fc10 	bl	80020c0 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	2b0f      	cmp	r3, #15
 80038a4:	d903      	bls.n	80038ae <HAL_NVIC_SetPriority+0x2e>
 80038a6:	21ab      	movs	r1, #171	; 0xab
 80038a8:	480a      	ldr	r0, [pc, #40]	; (80038d4 <HAL_NVIC_SetPriority+0x54>)
 80038aa:	f7fe fc09 	bl	80020c0 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80038ae:	f7ff ff1f 	bl	80036f0 <__NVIC_GetPriorityGrouping>
 80038b2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	68b9      	ldr	r1, [r7, #8]
 80038b8:	6978      	ldr	r0, [r7, #20]
 80038ba:	f7ff ff6d 	bl	8003798 <NVIC_EncodePriority>
 80038be:	4602      	mov	r2, r0
 80038c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038c4:	4611      	mov	r1, r2
 80038c6:	4618      	mov	r0, r3
 80038c8:	f7ff ff3c 	bl	8003744 <__NVIC_SetPriority>
}
 80038cc:	bf00      	nop
 80038ce:	3718      	adds	r7, #24
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	0800ef20 	.word	0x0800ef20

080038d8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0
 80038de:	4603      	mov	r3, r0
 80038e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80038e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	da03      	bge.n	80038f2 <HAL_NVIC_EnableIRQ+0x1a>
 80038ea:	21be      	movs	r1, #190	; 0xbe
 80038ec:	4805      	ldr	r0, [pc, #20]	; (8003904 <HAL_NVIC_EnableIRQ+0x2c>)
 80038ee:	f7fe fbe7 	bl	80020c0 <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038f6:	4618      	mov	r0, r3
 80038f8:	f7ff ff08 	bl	800370c <__NVIC_EnableIRQ>
}
 80038fc:	bf00      	nop
 80038fe:	3708      	adds	r7, #8
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}
 8003904:	0800ef20 	.word	0x0800ef20

08003908 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f7ff ff73 	bl	80037fc <SysTick_Config>
 8003916:	4603      	mov	r3, r0
}
 8003918:	4618      	mov	r0, r3
 800391a:	3708      	adds	r7, #8
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}

08003920 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003920:	b480      	push	{r7}
 8003922:	b085      	sub	sp, #20
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003928:	2300      	movs	r3, #0
 800392a:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003932:	2b02      	cmp	r3, #2
 8003934:	d008      	beq.n	8003948 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2204      	movs	r2, #4
 800393a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e020      	b.n	800398a <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f022 020e 	bic.w	r2, r2, #14
 8003956:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f022 0201 	bic.w	r2, r2, #1
 8003966:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003970:	2101      	movs	r1, #1
 8003972:	fa01 f202 	lsl.w	r2, r1, r2
 8003976:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003988:	7bfb      	ldrb	r3, [r7, #15]
}
 800398a:	4618      	mov	r0, r3
 800398c:	3714      	adds	r7, #20
 800398e:	46bd      	mov	sp, r7
 8003990:	bc80      	pop	{r7}
 8003992:	4770      	bx	lr

08003994 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003994:	b580      	push	{r7, lr}
 8003996:	b084      	sub	sp, #16
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800399c:	2300      	movs	r3, #0
 800399e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d005      	beq.n	80039b6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2204      	movs	r2, #4
 80039ae:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	73fb      	strb	r3, [r7, #15]
 80039b4:	e0d6      	b.n	8003b64 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f022 020e 	bic.w	r2, r2, #14
 80039c4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f022 0201 	bic.w	r2, r2, #1
 80039d4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	461a      	mov	r2, r3
 80039dc:	4b64      	ldr	r3, [pc, #400]	; (8003b70 <HAL_DMA_Abort_IT+0x1dc>)
 80039de:	429a      	cmp	r2, r3
 80039e0:	d958      	bls.n	8003a94 <HAL_DMA_Abort_IT+0x100>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a63      	ldr	r2, [pc, #396]	; (8003b74 <HAL_DMA_Abort_IT+0x1e0>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d04f      	beq.n	8003a8c <HAL_DMA_Abort_IT+0xf8>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a61      	ldr	r2, [pc, #388]	; (8003b78 <HAL_DMA_Abort_IT+0x1e4>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d048      	beq.n	8003a88 <HAL_DMA_Abort_IT+0xf4>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a60      	ldr	r2, [pc, #384]	; (8003b7c <HAL_DMA_Abort_IT+0x1e8>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d040      	beq.n	8003a82 <HAL_DMA_Abort_IT+0xee>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a5e      	ldr	r2, [pc, #376]	; (8003b80 <HAL_DMA_Abort_IT+0x1ec>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d038      	beq.n	8003a7c <HAL_DMA_Abort_IT+0xe8>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a5d      	ldr	r2, [pc, #372]	; (8003b84 <HAL_DMA_Abort_IT+0x1f0>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d030      	beq.n	8003a76 <HAL_DMA_Abort_IT+0xe2>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a5b      	ldr	r2, [pc, #364]	; (8003b88 <HAL_DMA_Abort_IT+0x1f4>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d028      	beq.n	8003a70 <HAL_DMA_Abort_IT+0xdc>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a53      	ldr	r2, [pc, #332]	; (8003b70 <HAL_DMA_Abort_IT+0x1dc>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d020      	beq.n	8003a6a <HAL_DMA_Abort_IT+0xd6>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a57      	ldr	r2, [pc, #348]	; (8003b8c <HAL_DMA_Abort_IT+0x1f8>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d019      	beq.n	8003a66 <HAL_DMA_Abort_IT+0xd2>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a56      	ldr	r2, [pc, #344]	; (8003b90 <HAL_DMA_Abort_IT+0x1fc>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d012      	beq.n	8003a62 <HAL_DMA_Abort_IT+0xce>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a54      	ldr	r2, [pc, #336]	; (8003b94 <HAL_DMA_Abort_IT+0x200>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d00a      	beq.n	8003a5c <HAL_DMA_Abort_IT+0xc8>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a53      	ldr	r2, [pc, #332]	; (8003b98 <HAL_DMA_Abort_IT+0x204>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d102      	bne.n	8003a56 <HAL_DMA_Abort_IT+0xc2>
 8003a50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a54:	e01b      	b.n	8003a8e <HAL_DMA_Abort_IT+0xfa>
 8003a56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a5a:	e018      	b.n	8003a8e <HAL_DMA_Abort_IT+0xfa>
 8003a5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a60:	e015      	b.n	8003a8e <HAL_DMA_Abort_IT+0xfa>
 8003a62:	2310      	movs	r3, #16
 8003a64:	e013      	b.n	8003a8e <HAL_DMA_Abort_IT+0xfa>
 8003a66:	2301      	movs	r3, #1
 8003a68:	e011      	b.n	8003a8e <HAL_DMA_Abort_IT+0xfa>
 8003a6a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a6e:	e00e      	b.n	8003a8e <HAL_DMA_Abort_IT+0xfa>
 8003a70:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003a74:	e00b      	b.n	8003a8e <HAL_DMA_Abort_IT+0xfa>
 8003a76:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a7a:	e008      	b.n	8003a8e <HAL_DMA_Abort_IT+0xfa>
 8003a7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a80:	e005      	b.n	8003a8e <HAL_DMA_Abort_IT+0xfa>
 8003a82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a86:	e002      	b.n	8003a8e <HAL_DMA_Abort_IT+0xfa>
 8003a88:	2310      	movs	r3, #16
 8003a8a:	e000      	b.n	8003a8e <HAL_DMA_Abort_IT+0xfa>
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	4a43      	ldr	r2, [pc, #268]	; (8003b9c <HAL_DMA_Abort_IT+0x208>)
 8003a90:	6053      	str	r3, [r2, #4]
 8003a92:	e057      	b.n	8003b44 <HAL_DMA_Abort_IT+0x1b0>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a36      	ldr	r2, [pc, #216]	; (8003b74 <HAL_DMA_Abort_IT+0x1e0>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d04f      	beq.n	8003b3e <HAL_DMA_Abort_IT+0x1aa>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a35      	ldr	r2, [pc, #212]	; (8003b78 <HAL_DMA_Abort_IT+0x1e4>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d048      	beq.n	8003b3a <HAL_DMA_Abort_IT+0x1a6>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a33      	ldr	r2, [pc, #204]	; (8003b7c <HAL_DMA_Abort_IT+0x1e8>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d040      	beq.n	8003b34 <HAL_DMA_Abort_IT+0x1a0>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a32      	ldr	r2, [pc, #200]	; (8003b80 <HAL_DMA_Abort_IT+0x1ec>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d038      	beq.n	8003b2e <HAL_DMA_Abort_IT+0x19a>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a30      	ldr	r2, [pc, #192]	; (8003b84 <HAL_DMA_Abort_IT+0x1f0>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d030      	beq.n	8003b28 <HAL_DMA_Abort_IT+0x194>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a2f      	ldr	r2, [pc, #188]	; (8003b88 <HAL_DMA_Abort_IT+0x1f4>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d028      	beq.n	8003b22 <HAL_DMA_Abort_IT+0x18e>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a26      	ldr	r2, [pc, #152]	; (8003b70 <HAL_DMA_Abort_IT+0x1dc>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d020      	beq.n	8003b1c <HAL_DMA_Abort_IT+0x188>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a2b      	ldr	r2, [pc, #172]	; (8003b8c <HAL_DMA_Abort_IT+0x1f8>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d019      	beq.n	8003b18 <HAL_DMA_Abort_IT+0x184>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a29      	ldr	r2, [pc, #164]	; (8003b90 <HAL_DMA_Abort_IT+0x1fc>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d012      	beq.n	8003b14 <HAL_DMA_Abort_IT+0x180>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a28      	ldr	r2, [pc, #160]	; (8003b94 <HAL_DMA_Abort_IT+0x200>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d00a      	beq.n	8003b0e <HAL_DMA_Abort_IT+0x17a>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a26      	ldr	r2, [pc, #152]	; (8003b98 <HAL_DMA_Abort_IT+0x204>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d102      	bne.n	8003b08 <HAL_DMA_Abort_IT+0x174>
 8003b02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b06:	e01b      	b.n	8003b40 <HAL_DMA_Abort_IT+0x1ac>
 8003b08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b0c:	e018      	b.n	8003b40 <HAL_DMA_Abort_IT+0x1ac>
 8003b0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b12:	e015      	b.n	8003b40 <HAL_DMA_Abort_IT+0x1ac>
 8003b14:	2310      	movs	r3, #16
 8003b16:	e013      	b.n	8003b40 <HAL_DMA_Abort_IT+0x1ac>
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e011      	b.n	8003b40 <HAL_DMA_Abort_IT+0x1ac>
 8003b1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b20:	e00e      	b.n	8003b40 <HAL_DMA_Abort_IT+0x1ac>
 8003b22:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003b26:	e00b      	b.n	8003b40 <HAL_DMA_Abort_IT+0x1ac>
 8003b28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b2c:	e008      	b.n	8003b40 <HAL_DMA_Abort_IT+0x1ac>
 8003b2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b32:	e005      	b.n	8003b40 <HAL_DMA_Abort_IT+0x1ac>
 8003b34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b38:	e002      	b.n	8003b40 <HAL_DMA_Abort_IT+0x1ac>
 8003b3a:	2310      	movs	r3, #16
 8003b3c:	e000      	b.n	8003b40 <HAL_DMA_Abort_IT+0x1ac>
 8003b3e:	2301      	movs	r3, #1
 8003b40:	4a17      	ldr	r2, [pc, #92]	; (8003ba0 <HAL_DMA_Abort_IT+0x20c>)
 8003b42:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d003      	beq.n	8003b64 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	4798      	blx	r3
    } 
  }
  return status;
 8003b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3710      	adds	r7, #16
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	40020080 	.word	0x40020080
 8003b74:	40020008 	.word	0x40020008
 8003b78:	4002001c 	.word	0x4002001c
 8003b7c:	40020030 	.word	0x40020030
 8003b80:	40020044 	.word	0x40020044
 8003b84:	40020058 	.word	0x40020058
 8003b88:	4002006c 	.word	0x4002006c
 8003b8c:	40020408 	.word	0x40020408
 8003b90:	4002041c 	.word	0x4002041c
 8003b94:	40020430 	.word	0x40020430
 8003b98:	40020444 	.word	0x40020444
 8003b9c:	40020400 	.word	0x40020400
 8003ba0:	40020000 	.word	0x40020000

08003ba4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b08a      	sub	sp, #40	; 0x28
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4aa9      	ldr	r2, [pc, #676]	; (8003e60 <HAL_GPIO_Init+0x2bc>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d01b      	beq.n	8003bf6 <HAL_GPIO_Init+0x52>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4aa8      	ldr	r2, [pc, #672]	; (8003e64 <HAL_GPIO_Init+0x2c0>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d017      	beq.n	8003bf6 <HAL_GPIO_Init+0x52>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4aa7      	ldr	r2, [pc, #668]	; (8003e68 <HAL_GPIO_Init+0x2c4>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d013      	beq.n	8003bf6 <HAL_GPIO_Init+0x52>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4aa6      	ldr	r2, [pc, #664]	; (8003e6c <HAL_GPIO_Init+0x2c8>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d00f      	beq.n	8003bf6 <HAL_GPIO_Init+0x52>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4aa5      	ldr	r2, [pc, #660]	; (8003e70 <HAL_GPIO_Init+0x2cc>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d00b      	beq.n	8003bf6 <HAL_GPIO_Init+0x52>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4aa4      	ldr	r2, [pc, #656]	; (8003e74 <HAL_GPIO_Init+0x2d0>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d007      	beq.n	8003bf6 <HAL_GPIO_Init+0x52>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4aa3      	ldr	r2, [pc, #652]	; (8003e78 <HAL_GPIO_Init+0x2d4>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d003      	beq.n	8003bf6 <HAL_GPIO_Init+0x52>
 8003bee:	21bd      	movs	r1, #189	; 0xbd
 8003bf0:	48a2      	ldr	r0, [pc, #648]	; (8003e7c <HAL_GPIO_Init+0x2d8>)
 8003bf2:	f7fe fa65 	bl	80020c0 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d005      	beq.n	8003c0c <HAL_GPIO_Init+0x68>
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	0c1b      	lsrs	r3, r3, #16
 8003c06:	041b      	lsls	r3, r3, #16
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d003      	beq.n	8003c14 <HAL_GPIO_Init+0x70>
 8003c0c:	21be      	movs	r1, #190	; 0xbe
 8003c0e:	489b      	ldr	r0, [pc, #620]	; (8003e7c <HAL_GPIO_Init+0x2d8>)
 8003c10:	f7fe fa56 	bl	80020c0 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	f000 8235 	beq.w	8004088 <HAL_GPIO_Init+0x4e4>
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	f000 8230 	beq.w	8004088 <HAL_GPIO_Init+0x4e4>
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	2b11      	cmp	r3, #17
 8003c2e:	f000 822b 	beq.w	8004088 <HAL_GPIO_Init+0x4e4>
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	f000 8226 	beq.w	8004088 <HAL_GPIO_Init+0x4e4>
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	2b12      	cmp	r3, #18
 8003c42:	f000 8221 	beq.w	8004088 <HAL_GPIO_Init+0x4e4>
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	4a8d      	ldr	r2, [pc, #564]	; (8003e80 <HAL_GPIO_Init+0x2dc>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	f000 821b 	beq.w	8004088 <HAL_GPIO_Init+0x4e4>
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	4a8b      	ldr	r2, [pc, #556]	; (8003e84 <HAL_GPIO_Init+0x2e0>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	f000 8215 	beq.w	8004088 <HAL_GPIO_Init+0x4e4>
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	4a89      	ldr	r2, [pc, #548]	; (8003e88 <HAL_GPIO_Init+0x2e4>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	f000 820f 	beq.w	8004088 <HAL_GPIO_Init+0x4e4>
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	4a87      	ldr	r2, [pc, #540]	; (8003e8c <HAL_GPIO_Init+0x2e8>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	f000 8209 	beq.w	8004088 <HAL_GPIO_Init+0x4e4>
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	4a85      	ldr	r2, [pc, #532]	; (8003e90 <HAL_GPIO_Init+0x2ec>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	f000 8203 	beq.w	8004088 <HAL_GPIO_Init+0x4e4>
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	4a83      	ldr	r2, [pc, #524]	; (8003e94 <HAL_GPIO_Init+0x2f0>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	f000 81fd 	beq.w	8004088 <HAL_GPIO_Init+0x4e4>
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	2b03      	cmp	r3, #3
 8003c94:	f000 81f8 	beq.w	8004088 <HAL_GPIO_Init+0x4e4>
 8003c98:	21bf      	movs	r1, #191	; 0xbf
 8003c9a:	4878      	ldr	r0, [pc, #480]	; (8003e7c <HAL_GPIO_Init+0x2d8>)
 8003c9c:	f7fe fa10 	bl	80020c0 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ca0:	e1f2      	b.n	8004088 <HAL_GPIO_Init+0x4e4>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8003caa:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	69fa      	ldr	r2, [r7, #28]
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003cb6:	69ba      	ldr	r2, [r7, #24]
 8003cb8:	69fb      	ldr	r3, [r7, #28]
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	f040 81e1 	bne.w	8004082 <HAL_GPIO_Init+0x4de>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	4a67      	ldr	r2, [pc, #412]	; (8003e60 <HAL_GPIO_Init+0x2bc>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d01b      	beq.n	8003d00 <HAL_GPIO_Init+0x15c>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4a66      	ldr	r2, [pc, #408]	; (8003e64 <HAL_GPIO_Init+0x2c0>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d017      	beq.n	8003d00 <HAL_GPIO_Init+0x15c>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	4a65      	ldr	r2, [pc, #404]	; (8003e68 <HAL_GPIO_Init+0x2c4>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d013      	beq.n	8003d00 <HAL_GPIO_Init+0x15c>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	4a64      	ldr	r2, [pc, #400]	; (8003e6c <HAL_GPIO_Init+0x2c8>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d00f      	beq.n	8003d00 <HAL_GPIO_Init+0x15c>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4a63      	ldr	r2, [pc, #396]	; (8003e70 <HAL_GPIO_Init+0x2cc>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d00b      	beq.n	8003d00 <HAL_GPIO_Init+0x15c>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	4a62      	ldr	r2, [pc, #392]	; (8003e74 <HAL_GPIO_Init+0x2d0>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d007      	beq.n	8003d00 <HAL_GPIO_Init+0x15c>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	4a61      	ldr	r2, [pc, #388]	; (8003e78 <HAL_GPIO_Init+0x2d4>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d003      	beq.n	8003d00 <HAL_GPIO_Init+0x15c>
 8003cf8:	21cd      	movs	r1, #205	; 0xcd
 8003cfa:	4860      	ldr	r0, [pc, #384]	; (8003e7c <HAL_GPIO_Init+0x2d8>)
 8003cfc:	f7fe f9e0 	bl	80020c0 <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	4a63      	ldr	r2, [pc, #396]	; (8003e94 <HAL_GPIO_Init+0x2f0>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	f000 80c6 	beq.w	8003e98 <HAL_GPIO_Init+0x2f4>
 8003d0c:	4a61      	ldr	r2, [pc, #388]	; (8003e94 <HAL_GPIO_Init+0x2f0>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	f200 80ec 	bhi.w	8003eec <HAL_GPIO_Init+0x348>
 8003d14:	4a5c      	ldr	r2, [pc, #368]	; (8003e88 <HAL_GPIO_Init+0x2e4>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	f000 80be 	beq.w	8003e98 <HAL_GPIO_Init+0x2f4>
 8003d1c:	4a5a      	ldr	r2, [pc, #360]	; (8003e88 <HAL_GPIO_Init+0x2e4>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	f200 80e4 	bhi.w	8003eec <HAL_GPIO_Init+0x348>
 8003d24:	4a5a      	ldr	r2, [pc, #360]	; (8003e90 <HAL_GPIO_Init+0x2ec>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	f000 80b6 	beq.w	8003e98 <HAL_GPIO_Init+0x2f4>
 8003d2c:	4a58      	ldr	r2, [pc, #352]	; (8003e90 <HAL_GPIO_Init+0x2ec>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	f200 80dc 	bhi.w	8003eec <HAL_GPIO_Init+0x348>
 8003d34:	4a53      	ldr	r2, [pc, #332]	; (8003e84 <HAL_GPIO_Init+0x2e0>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	f000 80ae 	beq.w	8003e98 <HAL_GPIO_Init+0x2f4>
 8003d3c:	4a51      	ldr	r2, [pc, #324]	; (8003e84 <HAL_GPIO_Init+0x2e0>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	f200 80d4 	bhi.w	8003eec <HAL_GPIO_Init+0x348>
 8003d44:	4a51      	ldr	r2, [pc, #324]	; (8003e8c <HAL_GPIO_Init+0x2e8>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	f000 80a6 	beq.w	8003e98 <HAL_GPIO_Init+0x2f4>
 8003d4c:	4a4f      	ldr	r2, [pc, #316]	; (8003e8c <HAL_GPIO_Init+0x2e8>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	f200 80cc 	bhi.w	8003eec <HAL_GPIO_Init+0x348>
 8003d54:	2b12      	cmp	r3, #18
 8003d56:	d82b      	bhi.n	8003db0 <HAL_GPIO_Init+0x20c>
 8003d58:	2b12      	cmp	r3, #18
 8003d5a:	f200 80c7 	bhi.w	8003eec <HAL_GPIO_Init+0x348>
 8003d5e:	a201      	add	r2, pc, #4	; (adr r2, 8003d64 <HAL_GPIO_Init+0x1c0>)
 8003d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d64:	08003e99 	.word	0x08003e99
 8003d68:	08003db9 	.word	0x08003db9
 8003d6c:	08003e0b 	.word	0x08003e0b
 8003d70:	08003ee7 	.word	0x08003ee7
 8003d74:	08003eed 	.word	0x08003eed
 8003d78:	08003eed 	.word	0x08003eed
 8003d7c:	08003eed 	.word	0x08003eed
 8003d80:	08003eed 	.word	0x08003eed
 8003d84:	08003eed 	.word	0x08003eed
 8003d88:	08003eed 	.word	0x08003eed
 8003d8c:	08003eed 	.word	0x08003eed
 8003d90:	08003eed 	.word	0x08003eed
 8003d94:	08003eed 	.word	0x08003eed
 8003d98:	08003eed 	.word	0x08003eed
 8003d9c:	08003eed 	.word	0x08003eed
 8003da0:	08003eed 	.word	0x08003eed
 8003da4:	08003eed 	.word	0x08003eed
 8003da8:	08003de1 	.word	0x08003de1
 8003dac:	08003e35 	.word	0x08003e35
 8003db0:	4a33      	ldr	r2, [pc, #204]	; (8003e80 <HAL_GPIO_Init+0x2dc>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d070      	beq.n	8003e98 <HAL_GPIO_Init+0x2f4>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003db6:	e099      	b.n	8003eec <HAL_GPIO_Init+0x348>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	2b02      	cmp	r3, #2
 8003dbe:	d00b      	beq.n	8003dd8 <HAL_GPIO_Init+0x234>
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d007      	beq.n	8003dd8 <HAL_GPIO_Init+0x234>
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	2b03      	cmp	r3, #3
 8003dce:	d003      	beq.n	8003dd8 <HAL_GPIO_Init+0x234>
 8003dd0:	21d5      	movs	r1, #213	; 0xd5
 8003dd2:	482a      	ldr	r0, [pc, #168]	; (8003e7c <HAL_GPIO_Init+0x2d8>)
 8003dd4:	f7fe f974 	bl	80020c0 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	623b      	str	r3, [r7, #32]
          break;
 8003dde:	e086      	b.n	8003eee <HAL_GPIO_Init+0x34a>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	d00b      	beq.n	8003e00 <HAL_GPIO_Init+0x25c>
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d007      	beq.n	8003e00 <HAL_GPIO_Init+0x25c>
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	2b03      	cmp	r3, #3
 8003df6:	d003      	beq.n	8003e00 <HAL_GPIO_Init+0x25c>
 8003df8:	21dc      	movs	r1, #220	; 0xdc
 8003dfa:	4820      	ldr	r0, [pc, #128]	; (8003e7c <HAL_GPIO_Init+0x2d8>)
 8003dfc:	f7fe f960 	bl	80020c0 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	3304      	adds	r3, #4
 8003e06:	623b      	str	r3, [r7, #32]
          break;
 8003e08:	e071      	b.n	8003eee <HAL_GPIO_Init+0x34a>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	2b02      	cmp	r3, #2
 8003e10:	d00b      	beq.n	8003e2a <HAL_GPIO_Init+0x286>
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	68db      	ldr	r3, [r3, #12]
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d007      	beq.n	8003e2a <HAL_GPIO_Init+0x286>
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	2b03      	cmp	r3, #3
 8003e20:	d003      	beq.n	8003e2a <HAL_GPIO_Init+0x286>
 8003e22:	21e3      	movs	r1, #227	; 0xe3
 8003e24:	4815      	ldr	r0, [pc, #84]	; (8003e7c <HAL_GPIO_Init+0x2d8>)
 8003e26:	f7fe f94b 	bl	80020c0 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	3308      	adds	r3, #8
 8003e30:	623b      	str	r3, [r7, #32]
          break;
 8003e32:	e05c      	b.n	8003eee <HAL_GPIO_Init+0x34a>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	2b02      	cmp	r3, #2
 8003e3a:	d00b      	beq.n	8003e54 <HAL_GPIO_Init+0x2b0>
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d007      	beq.n	8003e54 <HAL_GPIO_Init+0x2b0>
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	2b03      	cmp	r3, #3
 8003e4a:	d003      	beq.n	8003e54 <HAL_GPIO_Init+0x2b0>
 8003e4c:	21ea      	movs	r1, #234	; 0xea
 8003e4e:	480b      	ldr	r0, [pc, #44]	; (8003e7c <HAL_GPIO_Init+0x2d8>)
 8003e50:	f7fe f936 	bl	80020c0 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	330c      	adds	r3, #12
 8003e5a:	623b      	str	r3, [r7, #32]
          break;
 8003e5c:	e047      	b.n	8003eee <HAL_GPIO_Init+0x34a>
 8003e5e:	bf00      	nop
 8003e60:	40010800 	.word	0x40010800
 8003e64:	40010c00 	.word	0x40010c00
 8003e68:	40011000 	.word	0x40011000
 8003e6c:	40011400 	.word	0x40011400
 8003e70:	40011800 	.word	0x40011800
 8003e74:	40011c00 	.word	0x40011c00
 8003e78:	40012000 	.word	0x40012000
 8003e7c:	0800ef5c 	.word	0x0800ef5c
 8003e80:	10110000 	.word	0x10110000
 8003e84:	10210000 	.word	0x10210000
 8003e88:	10310000 	.word	0x10310000
 8003e8c:	10120000 	.word	0x10120000
 8003e90:	10220000 	.word	0x10220000
 8003e94:	10320000 	.word	0x10320000
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d00b      	beq.n	8003eb8 <HAL_GPIO_Init+0x314>
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d007      	beq.n	8003eb8 <HAL_GPIO_Init+0x314>
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	2b02      	cmp	r3, #2
 8003eae:	d003      	beq.n	8003eb8 <HAL_GPIO_Init+0x314>
 8003eb0:	21f7      	movs	r1, #247	; 0xf7
 8003eb2:	487c      	ldr	r0, [pc, #496]	; (80040a4 <HAL_GPIO_Init+0x500>)
 8003eb4:	f7fe f904 	bl	80020c0 <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d102      	bne.n	8003ec6 <HAL_GPIO_Init+0x322>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003ec0:	2304      	movs	r3, #4
 8003ec2:	623b      	str	r3, [r7, #32]
          break;
 8003ec4:	e013      	b.n	8003eee <HAL_GPIO_Init+0x34a>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d105      	bne.n	8003eda <HAL_GPIO_Init+0x336>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003ece:	2308      	movs	r3, #8
 8003ed0:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	69fa      	ldr	r2, [r7, #28]
 8003ed6:	611a      	str	r2, [r3, #16]
          break;
 8003ed8:	e009      	b.n	8003eee <HAL_GPIO_Init+0x34a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003eda:	2308      	movs	r3, #8
 8003edc:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	69fa      	ldr	r2, [r7, #28]
 8003ee2:	615a      	str	r2, [r3, #20]
          break;
 8003ee4:	e003      	b.n	8003eee <HAL_GPIO_Init+0x34a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	623b      	str	r3, [r7, #32]
          break;
 8003eea:	e000      	b.n	8003eee <HAL_GPIO_Init+0x34a>
          break;
 8003eec:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003eee:	69bb      	ldr	r3, [r7, #24]
 8003ef0:	2bff      	cmp	r3, #255	; 0xff
 8003ef2:	d801      	bhi.n	8003ef8 <HAL_GPIO_Init+0x354>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	e001      	b.n	8003efc <HAL_GPIO_Init+0x358>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	3304      	adds	r3, #4
 8003efc:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003efe:	69bb      	ldr	r3, [r7, #24]
 8003f00:	2bff      	cmp	r3, #255	; 0xff
 8003f02:	d802      	bhi.n	8003f0a <HAL_GPIO_Init+0x366>
 8003f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	e002      	b.n	8003f10 <HAL_GPIO_Init+0x36c>
 8003f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0c:	3b08      	subs	r3, #8
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	210f      	movs	r1, #15
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f1e:	43db      	mvns	r3, r3
 8003f20:	401a      	ands	r2, r3
 8003f22:	6a39      	ldr	r1, [r7, #32]
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	fa01 f303 	lsl.w	r3, r1, r3
 8003f2a:	431a      	orrs	r2, r3
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	f000 80a2 	beq.w	8004082 <HAL_GPIO_Init+0x4de>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003f3e:	4b5a      	ldr	r3, [pc, #360]	; (80040a8 <HAL_GPIO_Init+0x504>)
 8003f40:	699b      	ldr	r3, [r3, #24]
 8003f42:	4a59      	ldr	r2, [pc, #356]	; (80040a8 <HAL_GPIO_Init+0x504>)
 8003f44:	f043 0301 	orr.w	r3, r3, #1
 8003f48:	6193      	str	r3, [r2, #24]
 8003f4a:	4b57      	ldr	r3, [pc, #348]	; (80040a8 <HAL_GPIO_Init+0x504>)
 8003f4c:	699b      	ldr	r3, [r3, #24]
 8003f4e:	f003 0301 	and.w	r3, r3, #1
 8003f52:	60bb      	str	r3, [r7, #8]
 8003f54:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003f56:	4a55      	ldr	r2, [pc, #340]	; (80040ac <HAL_GPIO_Init+0x508>)
 8003f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5a:	089b      	lsrs	r3, r3, #2
 8003f5c:	3302      	adds	r3, #2
 8003f5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f62:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f66:	f003 0303 	and.w	r3, r3, #3
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	220f      	movs	r2, #15
 8003f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f72:	43db      	mvns	r3, r3
 8003f74:	68fa      	ldr	r2, [r7, #12]
 8003f76:	4013      	ands	r3, r2
 8003f78:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a4c      	ldr	r2, [pc, #304]	; (80040b0 <HAL_GPIO_Init+0x50c>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d01f      	beq.n	8003fc2 <HAL_GPIO_Init+0x41e>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a4b      	ldr	r2, [pc, #300]	; (80040b4 <HAL_GPIO_Init+0x510>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d019      	beq.n	8003fbe <HAL_GPIO_Init+0x41a>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a4a      	ldr	r2, [pc, #296]	; (80040b8 <HAL_GPIO_Init+0x514>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d013      	beq.n	8003fba <HAL_GPIO_Init+0x416>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a49      	ldr	r2, [pc, #292]	; (80040bc <HAL_GPIO_Init+0x518>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d00d      	beq.n	8003fb6 <HAL_GPIO_Init+0x412>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a48      	ldr	r2, [pc, #288]	; (80040c0 <HAL_GPIO_Init+0x51c>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d007      	beq.n	8003fb2 <HAL_GPIO_Init+0x40e>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a47      	ldr	r2, [pc, #284]	; (80040c4 <HAL_GPIO_Init+0x520>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d101      	bne.n	8003fae <HAL_GPIO_Init+0x40a>
 8003faa:	2305      	movs	r3, #5
 8003fac:	e00a      	b.n	8003fc4 <HAL_GPIO_Init+0x420>
 8003fae:	2306      	movs	r3, #6
 8003fb0:	e008      	b.n	8003fc4 <HAL_GPIO_Init+0x420>
 8003fb2:	2304      	movs	r3, #4
 8003fb4:	e006      	b.n	8003fc4 <HAL_GPIO_Init+0x420>
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	e004      	b.n	8003fc4 <HAL_GPIO_Init+0x420>
 8003fba:	2302      	movs	r3, #2
 8003fbc:	e002      	b.n	8003fc4 <HAL_GPIO_Init+0x420>
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e000      	b.n	8003fc4 <HAL_GPIO_Init+0x420>
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fc6:	f002 0203 	and.w	r2, r2, #3
 8003fca:	0092      	lsls	r2, r2, #2
 8003fcc:	4093      	lsls	r3, r2
 8003fce:	68fa      	ldr	r2, [r7, #12]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003fd4:	4935      	ldr	r1, [pc, #212]	; (80040ac <HAL_GPIO_Init+0x508>)
 8003fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd8:	089b      	lsrs	r3, r3, #2
 8003fda:	3302      	adds	r3, #2
 8003fdc:	68fa      	ldr	r2, [r7, #12]
 8003fde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d006      	beq.n	8003ffc <HAL_GPIO_Init+0x458>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003fee:	4b36      	ldr	r3, [pc, #216]	; (80040c8 <HAL_GPIO_Init+0x524>)
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	4935      	ldr	r1, [pc, #212]	; (80040c8 <HAL_GPIO_Init+0x524>)
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	600b      	str	r3, [r1, #0]
 8003ffa:	e006      	b.n	800400a <HAL_GPIO_Init+0x466>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003ffc:	4b32      	ldr	r3, [pc, #200]	; (80040c8 <HAL_GPIO_Init+0x524>)
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	43db      	mvns	r3, r3
 8004004:	4930      	ldr	r1, [pc, #192]	; (80040c8 <HAL_GPIO_Init+0x524>)
 8004006:	4013      	ands	r3, r2
 8004008:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004012:	2b00      	cmp	r3, #0
 8004014:	d006      	beq.n	8004024 <HAL_GPIO_Init+0x480>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004016:	4b2c      	ldr	r3, [pc, #176]	; (80040c8 <HAL_GPIO_Init+0x524>)
 8004018:	685a      	ldr	r2, [r3, #4]
 800401a:	492b      	ldr	r1, [pc, #172]	; (80040c8 <HAL_GPIO_Init+0x524>)
 800401c:	69bb      	ldr	r3, [r7, #24]
 800401e:	4313      	orrs	r3, r2
 8004020:	604b      	str	r3, [r1, #4]
 8004022:	e006      	b.n	8004032 <HAL_GPIO_Init+0x48e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004024:	4b28      	ldr	r3, [pc, #160]	; (80040c8 <HAL_GPIO_Init+0x524>)
 8004026:	685a      	ldr	r2, [r3, #4]
 8004028:	69bb      	ldr	r3, [r7, #24]
 800402a:	43db      	mvns	r3, r3
 800402c:	4926      	ldr	r1, [pc, #152]	; (80040c8 <HAL_GPIO_Init+0x524>)
 800402e:	4013      	ands	r3, r2
 8004030:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d006      	beq.n	800404c <HAL_GPIO_Init+0x4a8>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800403e:	4b22      	ldr	r3, [pc, #136]	; (80040c8 <HAL_GPIO_Init+0x524>)
 8004040:	689a      	ldr	r2, [r3, #8]
 8004042:	4921      	ldr	r1, [pc, #132]	; (80040c8 <HAL_GPIO_Init+0x524>)
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	4313      	orrs	r3, r2
 8004048:	608b      	str	r3, [r1, #8]
 800404a:	e006      	b.n	800405a <HAL_GPIO_Init+0x4b6>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800404c:	4b1e      	ldr	r3, [pc, #120]	; (80040c8 <HAL_GPIO_Init+0x524>)
 800404e:	689a      	ldr	r2, [r3, #8]
 8004050:	69bb      	ldr	r3, [r7, #24]
 8004052:	43db      	mvns	r3, r3
 8004054:	491c      	ldr	r1, [pc, #112]	; (80040c8 <HAL_GPIO_Init+0x524>)
 8004056:	4013      	ands	r3, r2
 8004058:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d006      	beq.n	8004074 <HAL_GPIO_Init+0x4d0>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004066:	4b18      	ldr	r3, [pc, #96]	; (80040c8 <HAL_GPIO_Init+0x524>)
 8004068:	68da      	ldr	r2, [r3, #12]
 800406a:	4917      	ldr	r1, [pc, #92]	; (80040c8 <HAL_GPIO_Init+0x524>)
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	4313      	orrs	r3, r2
 8004070:	60cb      	str	r3, [r1, #12]
 8004072:	e006      	b.n	8004082 <HAL_GPIO_Init+0x4de>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004074:	4b14      	ldr	r3, [pc, #80]	; (80040c8 <HAL_GPIO_Init+0x524>)
 8004076:	68da      	ldr	r2, [r3, #12]
 8004078:	69bb      	ldr	r3, [r7, #24]
 800407a:	43db      	mvns	r3, r3
 800407c:	4912      	ldr	r1, [pc, #72]	; (80040c8 <HAL_GPIO_Init+0x524>)
 800407e:	4013      	ands	r3, r2
 8004080:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004084:	3301      	adds	r3, #1
 8004086:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408e:	fa22 f303 	lsr.w	r3, r2, r3
 8004092:	2b00      	cmp	r3, #0
 8004094:	f47f ae05 	bne.w	8003ca2 <HAL_GPIO_Init+0xfe>
  }
}
 8004098:	bf00      	nop
 800409a:	bf00      	nop
 800409c:	3728      	adds	r7, #40	; 0x28
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	0800ef5c 	.word	0x0800ef5c
 80040a8:	40021000 	.word	0x40021000
 80040ac:	40010000 	.word	0x40010000
 80040b0:	40010800 	.word	0x40010800
 80040b4:	40010c00 	.word	0x40010c00
 80040b8:	40011000 	.word	0x40011000
 80040bc:	40011400 	.word	0x40011400
 80040c0:	40011800 	.word	0x40011800
 80040c4:	40011c00 	.word	0x40011c00
 80040c8:	40010400 	.word	0x40010400

080040cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b082      	sub	sp, #8
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	460b      	mov	r3, r1
 80040d6:	807b      	strh	r3, [r7, #2]
 80040d8:	4613      	mov	r3, r2
 80040da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80040dc:	887b      	ldrh	r3, [r7, #2]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d004      	beq.n	80040ec <HAL_GPIO_WritePin+0x20>
 80040e2:	887b      	ldrh	r3, [r7, #2]
 80040e4:	0c1b      	lsrs	r3, r3, #16
 80040e6:	041b      	lsls	r3, r3, #16
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d004      	beq.n	80040f6 <HAL_GPIO_WritePin+0x2a>
 80040ec:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 80040f0:	480e      	ldr	r0, [pc, #56]	; (800412c <HAL_GPIO_WritePin+0x60>)
 80040f2:	f7fd ffe5 	bl	80020c0 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80040f6:	787b      	ldrb	r3, [r7, #1]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d007      	beq.n	800410c <HAL_GPIO_WritePin+0x40>
 80040fc:	787b      	ldrb	r3, [r7, #1]
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d004      	beq.n	800410c <HAL_GPIO_WritePin+0x40>
 8004102:	f240 11d5 	movw	r1, #469	; 0x1d5
 8004106:	4809      	ldr	r0, [pc, #36]	; (800412c <HAL_GPIO_WritePin+0x60>)
 8004108:	f7fd ffda 	bl	80020c0 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 800410c:	787b      	ldrb	r3, [r7, #1]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d003      	beq.n	800411a <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004112:	887a      	ldrh	r2, [r7, #2]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004118:	e003      	b.n	8004122 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800411a:	887b      	ldrh	r3, [r7, #2]
 800411c:	041a      	lsls	r2, r3, #16
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	611a      	str	r2, [r3, #16]
}
 8004122:	bf00      	nop
 8004124:	3708      	adds	r7, #8
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	0800ef5c 	.word	0x0800ef5c

08004130 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b084      	sub	sp, #16
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	460b      	mov	r3, r1
 800413a:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800413c:	887b      	ldrh	r3, [r7, #2]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d004      	beq.n	800414c <HAL_GPIO_TogglePin+0x1c>
 8004142:	887b      	ldrh	r3, [r7, #2]
 8004144:	0c1b      	lsrs	r3, r3, #16
 8004146:	041b      	lsls	r3, r3, #16
 8004148:	2b00      	cmp	r3, #0
 800414a:	d004      	beq.n	8004156 <HAL_GPIO_TogglePin+0x26>
 800414c:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 8004150:	480a      	ldr	r0, [pc, #40]	; (800417c <HAL_GPIO_TogglePin+0x4c>)
 8004152:	f7fd ffb5 	bl	80020c0 <assert_failed>

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800415c:	887a      	ldrh	r2, [r7, #2]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	4013      	ands	r3, r2
 8004162:	041a      	lsls	r2, r3, #16
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	43d9      	mvns	r1, r3
 8004168:	887b      	ldrh	r3, [r7, #2]
 800416a:	400b      	ands	r3, r1
 800416c:	431a      	orrs	r2, r3
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	611a      	str	r2, [r3, #16]
}
 8004172:	bf00      	nop
 8004174:	3710      	adds	r7, #16
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop
 800417c:	0800ef5c 	.word	0x0800ef5c

08004180 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004180:	b480      	push	{r7}
 8004182:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8004184:	4b03      	ldr	r3, [pc, #12]	; (8004194 <HAL_PWR_EnableBkUpAccess+0x14>)
 8004186:	2201      	movs	r2, #1
 8004188:	601a      	str	r2, [r3, #0]
}
 800418a:	bf00      	nop
 800418c:	46bd      	mov	sp, r7
 800418e:	bc80      	pop	{r7}
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	420e0020 	.word	0x420e0020

08004198 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b086      	sub	sp, #24
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d101      	bne.n	80041aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e35c      	b.n	8004864 <HAL_RCC_OscConfig+0x6cc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d01c      	beq.n	80041ec <HAL_RCC_OscConfig+0x54>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0301 	and.w	r3, r3, #1
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d116      	bne.n	80041ec <HAL_RCC_OscConfig+0x54>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0302 	and.w	r3, r3, #2
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d110      	bne.n	80041ec <HAL_RCC_OscConfig+0x54>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0308 	and.w	r3, r3, #8
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d10a      	bne.n	80041ec <HAL_RCC_OscConfig+0x54>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0304 	and.w	r3, r3, #4
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d104      	bne.n	80041ec <HAL_RCC_OscConfig+0x54>
 80041e2:	f240 1167 	movw	r1, #359	; 0x167
 80041e6:	48a5      	ldr	r0, [pc, #660]	; (800447c <HAL_RCC_OscConfig+0x2e4>)
 80041e8:	f7fd ff6a 	bl	80020c0 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0301 	and.w	r3, r3, #1
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	f000 809a 	beq.w	800432e <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d00e      	beq.n	8004220 <HAL_RCC_OscConfig+0x88>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800420a:	d009      	beq.n	8004220 <HAL_RCC_OscConfig+0x88>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004214:	d004      	beq.n	8004220 <HAL_RCC_OscConfig+0x88>
 8004216:	f240 116d 	movw	r1, #365	; 0x16d
 800421a:	4898      	ldr	r0, [pc, #608]	; (800447c <HAL_RCC_OscConfig+0x2e4>)
 800421c:	f7fd ff50 	bl	80020c0 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004220:	4b97      	ldr	r3, [pc, #604]	; (8004480 <HAL_RCC_OscConfig+0x2e8>)
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	f003 030c 	and.w	r3, r3, #12
 8004228:	2b04      	cmp	r3, #4
 800422a:	d00c      	beq.n	8004246 <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800422c:	4b94      	ldr	r3, [pc, #592]	; (8004480 <HAL_RCC_OscConfig+0x2e8>)
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	f003 030c 	and.w	r3, r3, #12
 8004234:	2b08      	cmp	r3, #8
 8004236:	d112      	bne.n	800425e <HAL_RCC_OscConfig+0xc6>
 8004238:	4b91      	ldr	r3, [pc, #580]	; (8004480 <HAL_RCC_OscConfig+0x2e8>)
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004240:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004244:	d10b      	bne.n	800425e <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004246:	4b8e      	ldr	r3, [pc, #568]	; (8004480 <HAL_RCC_OscConfig+0x2e8>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d06c      	beq.n	800432c <HAL_RCC_OscConfig+0x194>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d168      	bne.n	800432c <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e302      	b.n	8004864 <HAL_RCC_OscConfig+0x6cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004266:	d106      	bne.n	8004276 <HAL_RCC_OscConfig+0xde>
 8004268:	4b85      	ldr	r3, [pc, #532]	; (8004480 <HAL_RCC_OscConfig+0x2e8>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a84      	ldr	r2, [pc, #528]	; (8004480 <HAL_RCC_OscConfig+0x2e8>)
 800426e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004272:	6013      	str	r3, [r2, #0]
 8004274:	e02e      	b.n	80042d4 <HAL_RCC_OscConfig+0x13c>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d10c      	bne.n	8004298 <HAL_RCC_OscConfig+0x100>
 800427e:	4b80      	ldr	r3, [pc, #512]	; (8004480 <HAL_RCC_OscConfig+0x2e8>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a7f      	ldr	r2, [pc, #508]	; (8004480 <HAL_RCC_OscConfig+0x2e8>)
 8004284:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004288:	6013      	str	r3, [r2, #0]
 800428a:	4b7d      	ldr	r3, [pc, #500]	; (8004480 <HAL_RCC_OscConfig+0x2e8>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a7c      	ldr	r2, [pc, #496]	; (8004480 <HAL_RCC_OscConfig+0x2e8>)
 8004290:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004294:	6013      	str	r3, [r2, #0]
 8004296:	e01d      	b.n	80042d4 <HAL_RCC_OscConfig+0x13c>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042a0:	d10c      	bne.n	80042bc <HAL_RCC_OscConfig+0x124>
 80042a2:	4b77      	ldr	r3, [pc, #476]	; (8004480 <HAL_RCC_OscConfig+0x2e8>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a76      	ldr	r2, [pc, #472]	; (8004480 <HAL_RCC_OscConfig+0x2e8>)
 80042a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042ac:	6013      	str	r3, [r2, #0]
 80042ae:	4b74      	ldr	r3, [pc, #464]	; (8004480 <HAL_RCC_OscConfig+0x2e8>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a73      	ldr	r2, [pc, #460]	; (8004480 <HAL_RCC_OscConfig+0x2e8>)
 80042b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042b8:	6013      	str	r3, [r2, #0]
 80042ba:	e00b      	b.n	80042d4 <HAL_RCC_OscConfig+0x13c>
 80042bc:	4b70      	ldr	r3, [pc, #448]	; (8004480 <HAL_RCC_OscConfig+0x2e8>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a6f      	ldr	r2, [pc, #444]	; (8004480 <HAL_RCC_OscConfig+0x2e8>)
 80042c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042c6:	6013      	str	r3, [r2, #0]
 80042c8:	4b6d      	ldr	r3, [pc, #436]	; (8004480 <HAL_RCC_OscConfig+0x2e8>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a6c      	ldr	r2, [pc, #432]	; (8004480 <HAL_RCC_OscConfig+0x2e8>)
 80042ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042d2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d013      	beq.n	8004304 <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042dc:	f7fe fbc0 	bl	8002a60 <HAL_GetTick>
 80042e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042e2:	e008      	b.n	80042f6 <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042e4:	f7fe fbbc 	bl	8002a60 <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	2b64      	cmp	r3, #100	; 0x64
 80042f0:	d901      	bls.n	80042f6 <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e2b6      	b.n	8004864 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042f6:	4b62      	ldr	r3, [pc, #392]	; (8004480 <HAL_RCC_OscConfig+0x2e8>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d0f0      	beq.n	80042e4 <HAL_RCC_OscConfig+0x14c>
 8004302:	e014      	b.n	800432e <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004304:	f7fe fbac 	bl	8002a60 <HAL_GetTick>
 8004308:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800430a:	e008      	b.n	800431e <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800430c:	f7fe fba8 	bl	8002a60 <HAL_GetTick>
 8004310:	4602      	mov	r2, r0
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	2b64      	cmp	r3, #100	; 0x64
 8004318:	d901      	bls.n	800431e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	e2a2      	b.n	8004864 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800431e:	4b58      	ldr	r3, [pc, #352]	; (8004480 <HAL_RCC_OscConfig+0x2e8>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d1f0      	bne.n	800430c <HAL_RCC_OscConfig+0x174>
 800432a:	e000      	b.n	800432e <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800432c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 0302 	and.w	r3, r3, #2
 8004336:	2b00      	cmp	r3, #0
 8004338:	d079      	beq.n	800442e <HAL_RCC_OscConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d008      	beq.n	8004354 <HAL_RCC_OscConfig+0x1bc>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	691b      	ldr	r3, [r3, #16]
 8004346:	2b01      	cmp	r3, #1
 8004348:	d004      	beq.n	8004354 <HAL_RCC_OscConfig+0x1bc>
 800434a:	f240 11a1 	movw	r1, #417	; 0x1a1
 800434e:	484b      	ldr	r0, [pc, #300]	; (800447c <HAL_RCC_OscConfig+0x2e4>)
 8004350:	f7fd feb6 	bl	80020c0 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	695b      	ldr	r3, [r3, #20]
 8004358:	2b1f      	cmp	r3, #31
 800435a:	d904      	bls.n	8004366 <HAL_RCC_OscConfig+0x1ce>
 800435c:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 8004360:	4846      	ldr	r0, [pc, #280]	; (800447c <HAL_RCC_OscConfig+0x2e4>)
 8004362:	f7fd fead 	bl	80020c0 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004366:	4b46      	ldr	r3, [pc, #280]	; (8004480 <HAL_RCC_OscConfig+0x2e8>)
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	f003 030c 	and.w	r3, r3, #12
 800436e:	2b00      	cmp	r3, #0
 8004370:	d00b      	beq.n	800438a <HAL_RCC_OscConfig+0x1f2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004372:	4b43      	ldr	r3, [pc, #268]	; (8004480 <HAL_RCC_OscConfig+0x2e8>)
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	f003 030c 	and.w	r3, r3, #12
 800437a:	2b08      	cmp	r3, #8
 800437c:	d11c      	bne.n	80043b8 <HAL_RCC_OscConfig+0x220>
 800437e:	4b40      	ldr	r3, [pc, #256]	; (8004480 <HAL_RCC_OscConfig+0x2e8>)
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d116      	bne.n	80043b8 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800438a:	4b3d      	ldr	r3, [pc, #244]	; (8004480 <HAL_RCC_OscConfig+0x2e8>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 0302 	and.w	r3, r3, #2
 8004392:	2b00      	cmp	r3, #0
 8004394:	d005      	beq.n	80043a2 <HAL_RCC_OscConfig+0x20a>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	691b      	ldr	r3, [r3, #16]
 800439a:	2b01      	cmp	r3, #1
 800439c:	d001      	beq.n	80043a2 <HAL_RCC_OscConfig+0x20a>
      {
        return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e260      	b.n	8004864 <HAL_RCC_OscConfig+0x6cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043a2:	4b37      	ldr	r3, [pc, #220]	; (8004480 <HAL_RCC_OscConfig+0x2e8>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	695b      	ldr	r3, [r3, #20]
 80043ae:	00db      	lsls	r3, r3, #3
 80043b0:	4933      	ldr	r1, [pc, #204]	; (8004480 <HAL_RCC_OscConfig+0x2e8>)
 80043b2:	4313      	orrs	r3, r2
 80043b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043b6:	e03a      	b.n	800442e <HAL_RCC_OscConfig+0x296>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	691b      	ldr	r3, [r3, #16]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d020      	beq.n	8004402 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043c0:	4b30      	ldr	r3, [pc, #192]	; (8004484 <HAL_RCC_OscConfig+0x2ec>)
 80043c2:	2201      	movs	r2, #1
 80043c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043c6:	f7fe fb4b 	bl	8002a60 <HAL_GetTick>
 80043ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043cc:	e008      	b.n	80043e0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043ce:	f7fe fb47 	bl	8002a60 <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d901      	bls.n	80043e0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	e241      	b.n	8004864 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043e0:	4b27      	ldr	r3, [pc, #156]	; (8004480 <HAL_RCC_OscConfig+0x2e8>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 0302 	and.w	r3, r3, #2
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d0f0      	beq.n	80043ce <HAL_RCC_OscConfig+0x236>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043ec:	4b24      	ldr	r3, [pc, #144]	; (8004480 <HAL_RCC_OscConfig+0x2e8>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	695b      	ldr	r3, [r3, #20]
 80043f8:	00db      	lsls	r3, r3, #3
 80043fa:	4921      	ldr	r1, [pc, #132]	; (8004480 <HAL_RCC_OscConfig+0x2e8>)
 80043fc:	4313      	orrs	r3, r2
 80043fe:	600b      	str	r3, [r1, #0]
 8004400:	e015      	b.n	800442e <HAL_RCC_OscConfig+0x296>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004402:	4b20      	ldr	r3, [pc, #128]	; (8004484 <HAL_RCC_OscConfig+0x2ec>)
 8004404:	2200      	movs	r2, #0
 8004406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004408:	f7fe fb2a 	bl	8002a60 <HAL_GetTick>
 800440c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800440e:	e008      	b.n	8004422 <HAL_RCC_OscConfig+0x28a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004410:	f7fe fb26 	bl	8002a60 <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	2b02      	cmp	r3, #2
 800441c:	d901      	bls.n	8004422 <HAL_RCC_OscConfig+0x28a>
          {
            return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e220      	b.n	8004864 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004422:	4b17      	ldr	r3, [pc, #92]	; (8004480 <HAL_RCC_OscConfig+0x2e8>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0302 	and.w	r3, r3, #2
 800442a:	2b00      	cmp	r3, #0
 800442c:	d1f0      	bne.n	8004410 <HAL_RCC_OscConfig+0x278>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0308 	and.w	r3, r3, #8
 8004436:	2b00      	cmp	r3, #0
 8004438:	d048      	beq.n	80044cc <HAL_RCC_OscConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	699b      	ldr	r3, [r3, #24]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d008      	beq.n	8004454 <HAL_RCC_OscConfig+0x2bc>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	699b      	ldr	r3, [r3, #24]
 8004446:	2b01      	cmp	r3, #1
 8004448:	d004      	beq.n	8004454 <HAL_RCC_OscConfig+0x2bc>
 800444a:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 800444e:	480b      	ldr	r0, [pc, #44]	; (800447c <HAL_RCC_OscConfig+0x2e4>)
 8004450:	f7fd fe36 	bl	80020c0 <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	699b      	ldr	r3, [r3, #24]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d021      	beq.n	80044a0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800445c:	4b0a      	ldr	r3, [pc, #40]	; (8004488 <HAL_RCC_OscConfig+0x2f0>)
 800445e:	2201      	movs	r2, #1
 8004460:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004462:	f7fe fafd 	bl	8002a60 <HAL_GetTick>
 8004466:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004468:	e010      	b.n	800448c <HAL_RCC_OscConfig+0x2f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800446a:	f7fe faf9 	bl	8002a60 <HAL_GetTick>
 800446e:	4602      	mov	r2, r0
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	2b02      	cmp	r3, #2
 8004476:	d909      	bls.n	800448c <HAL_RCC_OscConfig+0x2f4>
        {
          return HAL_TIMEOUT;
 8004478:	2303      	movs	r3, #3
 800447a:	e1f3      	b.n	8004864 <HAL_RCC_OscConfig+0x6cc>
 800447c:	0800ef98 	.word	0x0800ef98
 8004480:	40021000 	.word	0x40021000
 8004484:	42420000 	.word	0x42420000
 8004488:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800448c:	4b67      	ldr	r3, [pc, #412]	; (800462c <HAL_RCC_OscConfig+0x494>)
 800448e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004490:	f003 0302 	and.w	r3, r3, #2
 8004494:	2b00      	cmp	r3, #0
 8004496:	d0e8      	beq.n	800446a <HAL_RCC_OscConfig+0x2d2>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004498:	2001      	movs	r0, #1
 800449a:	f000 fc0f 	bl	8004cbc <RCC_Delay>
 800449e:	e015      	b.n	80044cc <HAL_RCC_OscConfig+0x334>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044a0:	4b63      	ldr	r3, [pc, #396]	; (8004630 <HAL_RCC_OscConfig+0x498>)
 80044a2:	2200      	movs	r2, #0
 80044a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044a6:	f7fe fadb 	bl	8002a60 <HAL_GetTick>
 80044aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044ac:	e008      	b.n	80044c0 <HAL_RCC_OscConfig+0x328>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044ae:	f7fe fad7 	bl	8002a60 <HAL_GetTick>
 80044b2:	4602      	mov	r2, r0
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	2b02      	cmp	r3, #2
 80044ba:	d901      	bls.n	80044c0 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 80044bc:	2303      	movs	r3, #3
 80044be:	e1d1      	b.n	8004864 <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044c0:	4b5a      	ldr	r3, [pc, #360]	; (800462c <HAL_RCC_OscConfig+0x494>)
 80044c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c4:	f003 0302 	and.w	r3, r3, #2
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d1f0      	bne.n	80044ae <HAL_RCC_OscConfig+0x316>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 0304 	and.w	r3, r3, #4
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	f000 80c0 	beq.w	800465a <HAL_RCC_OscConfig+0x4c2>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044da:	2300      	movs	r3, #0
 80044dc:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d00c      	beq.n	8004500 <HAL_RCC_OscConfig+0x368>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d008      	beq.n	8004500 <HAL_RCC_OscConfig+0x368>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	2b05      	cmp	r3, #5
 80044f4:	d004      	beq.n	8004500 <HAL_RCC_OscConfig+0x368>
 80044f6:	f240 2111 	movw	r1, #529	; 0x211
 80044fa:	484e      	ldr	r0, [pc, #312]	; (8004634 <HAL_RCC_OscConfig+0x49c>)
 80044fc:	f7fd fde0 	bl	80020c0 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004500:	4b4a      	ldr	r3, [pc, #296]	; (800462c <HAL_RCC_OscConfig+0x494>)
 8004502:	69db      	ldr	r3, [r3, #28]
 8004504:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004508:	2b00      	cmp	r3, #0
 800450a:	d10d      	bne.n	8004528 <HAL_RCC_OscConfig+0x390>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800450c:	4b47      	ldr	r3, [pc, #284]	; (800462c <HAL_RCC_OscConfig+0x494>)
 800450e:	69db      	ldr	r3, [r3, #28]
 8004510:	4a46      	ldr	r2, [pc, #280]	; (800462c <HAL_RCC_OscConfig+0x494>)
 8004512:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004516:	61d3      	str	r3, [r2, #28]
 8004518:	4b44      	ldr	r3, [pc, #272]	; (800462c <HAL_RCC_OscConfig+0x494>)
 800451a:	69db      	ldr	r3, [r3, #28]
 800451c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004520:	60bb      	str	r3, [r7, #8]
 8004522:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004524:	2301      	movs	r3, #1
 8004526:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004528:	4b43      	ldr	r3, [pc, #268]	; (8004638 <HAL_RCC_OscConfig+0x4a0>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004530:	2b00      	cmp	r3, #0
 8004532:	d118      	bne.n	8004566 <HAL_RCC_OscConfig+0x3ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004534:	4b40      	ldr	r3, [pc, #256]	; (8004638 <HAL_RCC_OscConfig+0x4a0>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a3f      	ldr	r2, [pc, #252]	; (8004638 <HAL_RCC_OscConfig+0x4a0>)
 800453a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800453e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004540:	f7fe fa8e 	bl	8002a60 <HAL_GetTick>
 8004544:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004546:	e008      	b.n	800455a <HAL_RCC_OscConfig+0x3c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004548:	f7fe fa8a 	bl	8002a60 <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	2b64      	cmp	r3, #100	; 0x64
 8004554:	d901      	bls.n	800455a <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	e184      	b.n	8004864 <HAL_RCC_OscConfig+0x6cc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800455a:	4b37      	ldr	r3, [pc, #220]	; (8004638 <HAL_RCC_OscConfig+0x4a0>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004562:	2b00      	cmp	r3, #0
 8004564:	d0f0      	beq.n	8004548 <HAL_RCC_OscConfig+0x3b0>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	2b01      	cmp	r3, #1
 800456c:	d106      	bne.n	800457c <HAL_RCC_OscConfig+0x3e4>
 800456e:	4b2f      	ldr	r3, [pc, #188]	; (800462c <HAL_RCC_OscConfig+0x494>)
 8004570:	6a1b      	ldr	r3, [r3, #32]
 8004572:	4a2e      	ldr	r2, [pc, #184]	; (800462c <HAL_RCC_OscConfig+0x494>)
 8004574:	f043 0301 	orr.w	r3, r3, #1
 8004578:	6213      	str	r3, [r2, #32]
 800457a:	e02d      	b.n	80045d8 <HAL_RCC_OscConfig+0x440>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d10c      	bne.n	800459e <HAL_RCC_OscConfig+0x406>
 8004584:	4b29      	ldr	r3, [pc, #164]	; (800462c <HAL_RCC_OscConfig+0x494>)
 8004586:	6a1b      	ldr	r3, [r3, #32]
 8004588:	4a28      	ldr	r2, [pc, #160]	; (800462c <HAL_RCC_OscConfig+0x494>)
 800458a:	f023 0301 	bic.w	r3, r3, #1
 800458e:	6213      	str	r3, [r2, #32]
 8004590:	4b26      	ldr	r3, [pc, #152]	; (800462c <HAL_RCC_OscConfig+0x494>)
 8004592:	6a1b      	ldr	r3, [r3, #32]
 8004594:	4a25      	ldr	r2, [pc, #148]	; (800462c <HAL_RCC_OscConfig+0x494>)
 8004596:	f023 0304 	bic.w	r3, r3, #4
 800459a:	6213      	str	r3, [r2, #32]
 800459c:	e01c      	b.n	80045d8 <HAL_RCC_OscConfig+0x440>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	2b05      	cmp	r3, #5
 80045a4:	d10c      	bne.n	80045c0 <HAL_RCC_OscConfig+0x428>
 80045a6:	4b21      	ldr	r3, [pc, #132]	; (800462c <HAL_RCC_OscConfig+0x494>)
 80045a8:	6a1b      	ldr	r3, [r3, #32]
 80045aa:	4a20      	ldr	r2, [pc, #128]	; (800462c <HAL_RCC_OscConfig+0x494>)
 80045ac:	f043 0304 	orr.w	r3, r3, #4
 80045b0:	6213      	str	r3, [r2, #32]
 80045b2:	4b1e      	ldr	r3, [pc, #120]	; (800462c <HAL_RCC_OscConfig+0x494>)
 80045b4:	6a1b      	ldr	r3, [r3, #32]
 80045b6:	4a1d      	ldr	r2, [pc, #116]	; (800462c <HAL_RCC_OscConfig+0x494>)
 80045b8:	f043 0301 	orr.w	r3, r3, #1
 80045bc:	6213      	str	r3, [r2, #32]
 80045be:	e00b      	b.n	80045d8 <HAL_RCC_OscConfig+0x440>
 80045c0:	4b1a      	ldr	r3, [pc, #104]	; (800462c <HAL_RCC_OscConfig+0x494>)
 80045c2:	6a1b      	ldr	r3, [r3, #32]
 80045c4:	4a19      	ldr	r2, [pc, #100]	; (800462c <HAL_RCC_OscConfig+0x494>)
 80045c6:	f023 0301 	bic.w	r3, r3, #1
 80045ca:	6213      	str	r3, [r2, #32]
 80045cc:	4b17      	ldr	r3, [pc, #92]	; (800462c <HAL_RCC_OscConfig+0x494>)
 80045ce:	6a1b      	ldr	r3, [r3, #32]
 80045d0:	4a16      	ldr	r2, [pc, #88]	; (800462c <HAL_RCC_OscConfig+0x494>)
 80045d2:	f023 0304 	bic.w	r3, r3, #4
 80045d6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d015      	beq.n	800460c <HAL_RCC_OscConfig+0x474>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045e0:	f7fe fa3e 	bl	8002a60 <HAL_GetTick>
 80045e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045e6:	e00a      	b.n	80045fe <HAL_RCC_OscConfig+0x466>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045e8:	f7fe fa3a 	bl	8002a60 <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d901      	bls.n	80045fe <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e132      	b.n	8004864 <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045fe:	4b0b      	ldr	r3, [pc, #44]	; (800462c <HAL_RCC_OscConfig+0x494>)
 8004600:	6a1b      	ldr	r3, [r3, #32]
 8004602:	f003 0302 	and.w	r3, r3, #2
 8004606:	2b00      	cmp	r3, #0
 8004608:	d0ee      	beq.n	80045e8 <HAL_RCC_OscConfig+0x450>
 800460a:	e01d      	b.n	8004648 <HAL_RCC_OscConfig+0x4b0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800460c:	f7fe fa28 	bl	8002a60 <HAL_GetTick>
 8004610:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004612:	e013      	b.n	800463c <HAL_RCC_OscConfig+0x4a4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004614:	f7fe fa24 	bl	8002a60 <HAL_GetTick>
 8004618:	4602      	mov	r2, r0
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004622:	4293      	cmp	r3, r2
 8004624:	d90a      	bls.n	800463c <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8004626:	2303      	movs	r3, #3
 8004628:	e11c      	b.n	8004864 <HAL_RCC_OscConfig+0x6cc>
 800462a:	bf00      	nop
 800462c:	40021000 	.word	0x40021000
 8004630:	42420480 	.word	0x42420480
 8004634:	0800ef98 	.word	0x0800ef98
 8004638:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800463c:	4b8b      	ldr	r3, [pc, #556]	; (800486c <HAL_RCC_OscConfig+0x6d4>)
 800463e:	6a1b      	ldr	r3, [r3, #32]
 8004640:	f003 0302 	and.w	r3, r3, #2
 8004644:	2b00      	cmp	r3, #0
 8004646:	d1e5      	bne.n	8004614 <HAL_RCC_OscConfig+0x47c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004648:	7dfb      	ldrb	r3, [r7, #23]
 800464a:	2b01      	cmp	r3, #1
 800464c:	d105      	bne.n	800465a <HAL_RCC_OscConfig+0x4c2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800464e:	4b87      	ldr	r3, [pc, #540]	; (800486c <HAL_RCC_OscConfig+0x6d4>)
 8004650:	69db      	ldr	r3, [r3, #28]
 8004652:	4a86      	ldr	r2, [pc, #536]	; (800486c <HAL_RCC_OscConfig+0x6d4>)
 8004654:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004658:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	69db      	ldr	r3, [r3, #28]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d00c      	beq.n	800467c <HAL_RCC_OscConfig+0x4e4>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	69db      	ldr	r3, [r3, #28]
 8004666:	2b01      	cmp	r3, #1
 8004668:	d008      	beq.n	800467c <HAL_RCC_OscConfig+0x4e4>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	69db      	ldr	r3, [r3, #28]
 800466e:	2b02      	cmp	r3, #2
 8004670:	d004      	beq.n	800467c <HAL_RCC_OscConfig+0x4e4>
 8004672:	f240 21af 	movw	r1, #687	; 0x2af
 8004676:	487e      	ldr	r0, [pc, #504]	; (8004870 <HAL_RCC_OscConfig+0x6d8>)
 8004678:	f7fd fd22 	bl	80020c0 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	69db      	ldr	r3, [r3, #28]
 8004680:	2b00      	cmp	r3, #0
 8004682:	f000 80ee 	beq.w	8004862 <HAL_RCC_OscConfig+0x6ca>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004686:	4b79      	ldr	r3, [pc, #484]	; (800486c <HAL_RCC_OscConfig+0x6d4>)
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	f003 030c 	and.w	r3, r3, #12
 800468e:	2b08      	cmp	r3, #8
 8004690:	f000 80ce 	beq.w	8004830 <HAL_RCC_OscConfig+0x698>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	69db      	ldr	r3, [r3, #28]
 8004698:	2b02      	cmp	r3, #2
 800469a:	f040 80b2 	bne.w	8004802 <HAL_RCC_OscConfig+0x66a>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a1b      	ldr	r3, [r3, #32]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d009      	beq.n	80046ba <HAL_RCC_OscConfig+0x522>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a1b      	ldr	r3, [r3, #32]
 80046aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046ae:	d004      	beq.n	80046ba <HAL_RCC_OscConfig+0x522>
 80046b0:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 80046b4:	486e      	ldr	r0, [pc, #440]	; (8004870 <HAL_RCC_OscConfig+0x6d8>)
 80046b6:	f7fd fd03 	bl	80020c0 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d04a      	beq.n	8004758 <HAL_RCC_OscConfig+0x5c0>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80046ca:	d045      	beq.n	8004758 <HAL_RCC_OscConfig+0x5c0>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80046d4:	d040      	beq.n	8004758 <HAL_RCC_OscConfig+0x5c0>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046da:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80046de:	d03b      	beq.n	8004758 <HAL_RCC_OscConfig+0x5c0>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046e8:	d036      	beq.n	8004758 <HAL_RCC_OscConfig+0x5c0>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ee:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80046f2:	d031      	beq.n	8004758 <HAL_RCC_OscConfig+0x5c0>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80046fc:	d02c      	beq.n	8004758 <HAL_RCC_OscConfig+0x5c0>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004702:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004706:	d027      	beq.n	8004758 <HAL_RCC_OscConfig+0x5c0>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004710:	d022      	beq.n	8004758 <HAL_RCC_OscConfig+0x5c0>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004716:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800471a:	d01d      	beq.n	8004758 <HAL_RCC_OscConfig+0x5c0>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004720:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004724:	d018      	beq.n	8004758 <HAL_RCC_OscConfig+0x5c0>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800472e:	d013      	beq.n	8004758 <HAL_RCC_OscConfig+0x5c0>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004734:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004738:	d00e      	beq.n	8004758 <HAL_RCC_OscConfig+0x5c0>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473e:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 8004742:	d009      	beq.n	8004758 <HAL_RCC_OscConfig+0x5c0>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004748:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 800474c:	d004      	beq.n	8004758 <HAL_RCC_OscConfig+0x5c0>
 800474e:	f240 21b9 	movw	r1, #697	; 0x2b9
 8004752:	4847      	ldr	r0, [pc, #284]	; (8004870 <HAL_RCC_OscConfig+0x6d8>)
 8004754:	f7fd fcb4 	bl	80020c0 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004758:	4b46      	ldr	r3, [pc, #280]	; (8004874 <HAL_RCC_OscConfig+0x6dc>)
 800475a:	2200      	movs	r2, #0
 800475c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800475e:	f7fe f97f 	bl	8002a60 <HAL_GetTick>
 8004762:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004764:	e008      	b.n	8004778 <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004766:	f7fe f97b 	bl	8002a60 <HAL_GetTick>
 800476a:	4602      	mov	r2, r0
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	1ad3      	subs	r3, r2, r3
 8004770:	2b02      	cmp	r3, #2
 8004772:	d901      	bls.n	8004778 <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 8004774:	2303      	movs	r3, #3
 8004776:	e075      	b.n	8004864 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004778:	4b3c      	ldr	r3, [pc, #240]	; (800486c <HAL_RCC_OscConfig+0x6d4>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004780:	2b00      	cmp	r3, #0
 8004782:	d1f0      	bne.n	8004766 <HAL_RCC_OscConfig+0x5ce>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6a1b      	ldr	r3, [r3, #32]
 8004788:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800478c:	d116      	bne.n	80047bc <HAL_RCC_OscConfig+0x624>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d009      	beq.n	80047aa <HAL_RCC_OscConfig+0x612>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800479e:	d004      	beq.n	80047aa <HAL_RCC_OscConfig+0x612>
 80047a0:	f240 21cf 	movw	r1, #719	; 0x2cf
 80047a4:	4832      	ldr	r0, [pc, #200]	; (8004870 <HAL_RCC_OscConfig+0x6d8>)
 80047a6:	f7fd fc8b 	bl	80020c0 <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80047aa:	4b30      	ldr	r3, [pc, #192]	; (800486c <HAL_RCC_OscConfig+0x6d4>)
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	492d      	ldr	r1, [pc, #180]	; (800486c <HAL_RCC_OscConfig+0x6d4>)
 80047b8:	4313      	orrs	r3, r2
 80047ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047bc:	4b2b      	ldr	r3, [pc, #172]	; (800486c <HAL_RCC_OscConfig+0x6d4>)
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6a19      	ldr	r1, [r3, #32]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047cc:	430b      	orrs	r3, r1
 80047ce:	4927      	ldr	r1, [pc, #156]	; (800486c <HAL_RCC_OscConfig+0x6d4>)
 80047d0:	4313      	orrs	r3, r2
 80047d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047d4:	4b27      	ldr	r3, [pc, #156]	; (8004874 <HAL_RCC_OscConfig+0x6dc>)
 80047d6:	2201      	movs	r2, #1
 80047d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047da:	f7fe f941 	bl	8002a60 <HAL_GetTick>
 80047de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80047e0:	e008      	b.n	80047f4 <HAL_RCC_OscConfig+0x65c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047e2:	f7fe f93d 	bl	8002a60 <HAL_GetTick>
 80047e6:	4602      	mov	r2, r0
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	2b02      	cmp	r3, #2
 80047ee:	d901      	bls.n	80047f4 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 80047f0:	2303      	movs	r3, #3
 80047f2:	e037      	b.n	8004864 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80047f4:	4b1d      	ldr	r3, [pc, #116]	; (800486c <HAL_RCC_OscConfig+0x6d4>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d0f0      	beq.n	80047e2 <HAL_RCC_OscConfig+0x64a>
 8004800:	e02f      	b.n	8004862 <HAL_RCC_OscConfig+0x6ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004802:	4b1c      	ldr	r3, [pc, #112]	; (8004874 <HAL_RCC_OscConfig+0x6dc>)
 8004804:	2200      	movs	r2, #0
 8004806:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004808:	f7fe f92a 	bl	8002a60 <HAL_GetTick>
 800480c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800480e:	e008      	b.n	8004822 <HAL_RCC_OscConfig+0x68a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004810:	f7fe f926 	bl	8002a60 <HAL_GetTick>
 8004814:	4602      	mov	r2, r0
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	2b02      	cmp	r3, #2
 800481c:	d901      	bls.n	8004822 <HAL_RCC_OscConfig+0x68a>
          {
            return HAL_TIMEOUT;
 800481e:	2303      	movs	r3, #3
 8004820:	e020      	b.n	8004864 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004822:	4b12      	ldr	r3, [pc, #72]	; (800486c <HAL_RCC_OscConfig+0x6d4>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800482a:	2b00      	cmp	r3, #0
 800482c:	d1f0      	bne.n	8004810 <HAL_RCC_OscConfig+0x678>
 800482e:	e018      	b.n	8004862 <HAL_RCC_OscConfig+0x6ca>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	69db      	ldr	r3, [r3, #28]
 8004834:	2b01      	cmp	r3, #1
 8004836:	d101      	bne.n	800483c <HAL_RCC_OscConfig+0x6a4>
      {
        return HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e013      	b.n	8004864 <HAL_RCC_OscConfig+0x6cc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800483c:	4b0b      	ldr	r3, [pc, #44]	; (800486c <HAL_RCC_OscConfig+0x6d4>)
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6a1b      	ldr	r3, [r3, #32]
 800484c:	429a      	cmp	r2, r3
 800484e:	d106      	bne.n	800485e <HAL_RCC_OscConfig+0x6c6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800485a:	429a      	cmp	r2, r3
 800485c:	d001      	beq.n	8004862 <HAL_RCC_OscConfig+0x6ca>
        {
          return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e000      	b.n	8004864 <HAL_RCC_OscConfig+0x6cc>
        }
      }
    }
  }

  return HAL_OK;
 8004862:	2300      	movs	r3, #0
}
 8004864:	4618      	mov	r0, r3
 8004866:	3718      	adds	r7, #24
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}
 800486c:	40021000 	.word	0x40021000
 8004870:	0800ef98 	.word	0x0800ef98
 8004874:	42420060 	.word	0x42420060

08004878 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b084      	sub	sp, #16
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d101      	bne.n	800488c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	e176      	b.n	8004b7a <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0301 	and.w	r3, r3, #1
 8004894:	2b00      	cmp	r3, #0
 8004896:	d116      	bne.n	80048c6 <HAL_RCC_ClockConfig+0x4e>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0302 	and.w	r3, r3, #2
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d110      	bne.n	80048c6 <HAL_RCC_ClockConfig+0x4e>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 0304 	and.w	r3, r3, #4
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d10a      	bne.n	80048c6 <HAL_RCC_ClockConfig+0x4e>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 0308 	and.w	r3, r3, #8
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d104      	bne.n	80048c6 <HAL_RCC_ClockConfig+0x4e>
 80048bc:	f44f 714e 	mov.w	r1, #824	; 0x338
 80048c0:	4874      	ldr	r0, [pc, #464]	; (8004a94 <HAL_RCC_ClockConfig+0x21c>)
 80048c2:	f7fd fbfd 	bl	80020c0 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d00a      	beq.n	80048e2 <HAL_RCC_ClockConfig+0x6a>
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d007      	beq.n	80048e2 <HAL_RCC_ClockConfig+0x6a>
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	2b02      	cmp	r3, #2
 80048d6:	d004      	beq.n	80048e2 <HAL_RCC_ClockConfig+0x6a>
 80048d8:	f240 3139 	movw	r1, #825	; 0x339
 80048dc:	486d      	ldr	r0, [pc, #436]	; (8004a94 <HAL_RCC_ClockConfig+0x21c>)
 80048de:	f7fd fbef 	bl	80020c0 <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80048e2:	4b6d      	ldr	r3, [pc, #436]	; (8004a98 <HAL_RCC_ClockConfig+0x220>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0307 	and.w	r3, r3, #7
 80048ea:	683a      	ldr	r2, [r7, #0]
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d910      	bls.n	8004912 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048f0:	4b69      	ldr	r3, [pc, #420]	; (8004a98 <HAL_RCC_ClockConfig+0x220>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f023 0207 	bic.w	r2, r3, #7
 80048f8:	4967      	ldr	r1, [pc, #412]	; (8004a98 <HAL_RCC_ClockConfig+0x220>)
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004900:	4b65      	ldr	r3, [pc, #404]	; (8004a98 <HAL_RCC_ClockConfig+0x220>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 0307 	and.w	r3, r3, #7
 8004908:	683a      	ldr	r2, [r7, #0]
 800490a:	429a      	cmp	r2, r3
 800490c:	d001      	beq.n	8004912 <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e133      	b.n	8004b7a <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 0302 	and.w	r3, r3, #2
 800491a:	2b00      	cmp	r3, #0
 800491c:	d049      	beq.n	80049b2 <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 0304 	and.w	r3, r3, #4
 8004926:	2b00      	cmp	r3, #0
 8004928:	d005      	beq.n	8004936 <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800492a:	4b5c      	ldr	r3, [pc, #368]	; (8004a9c <HAL_RCC_ClockConfig+0x224>)
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	4a5b      	ldr	r2, [pc, #364]	; (8004a9c <HAL_RCC_ClockConfig+0x224>)
 8004930:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004934:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 0308 	and.w	r3, r3, #8
 800493e:	2b00      	cmp	r3, #0
 8004940:	d005      	beq.n	800494e <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004942:	4b56      	ldr	r3, [pc, #344]	; (8004a9c <HAL_RCC_ClockConfig+0x224>)
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	4a55      	ldr	r2, [pc, #340]	; (8004a9c <HAL_RCC_ClockConfig+0x224>)
 8004948:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800494c:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d024      	beq.n	80049a0 <HAL_RCC_ClockConfig+0x128>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	2b80      	cmp	r3, #128	; 0x80
 800495c:	d020      	beq.n	80049a0 <HAL_RCC_ClockConfig+0x128>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	2b90      	cmp	r3, #144	; 0x90
 8004964:	d01c      	beq.n	80049a0 <HAL_RCC_ClockConfig+0x128>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	2ba0      	cmp	r3, #160	; 0xa0
 800496c:	d018      	beq.n	80049a0 <HAL_RCC_ClockConfig+0x128>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	2bb0      	cmp	r3, #176	; 0xb0
 8004974:	d014      	beq.n	80049a0 <HAL_RCC_ClockConfig+0x128>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	2bc0      	cmp	r3, #192	; 0xc0
 800497c:	d010      	beq.n	80049a0 <HAL_RCC_ClockConfig+0x128>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	2bd0      	cmp	r3, #208	; 0xd0
 8004984:	d00c      	beq.n	80049a0 <HAL_RCC_ClockConfig+0x128>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	2be0      	cmp	r3, #224	; 0xe0
 800498c:	d008      	beq.n	80049a0 <HAL_RCC_ClockConfig+0x128>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	2bf0      	cmp	r3, #240	; 0xf0
 8004994:	d004      	beq.n	80049a0 <HAL_RCC_ClockConfig+0x128>
 8004996:	f240 315f 	movw	r1, #863	; 0x35f
 800499a:	483e      	ldr	r0, [pc, #248]	; (8004a94 <HAL_RCC_ClockConfig+0x21c>)
 800499c:	f7fd fb90 	bl	80020c0 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049a0:	4b3e      	ldr	r3, [pc, #248]	; (8004a9c <HAL_RCC_ClockConfig+0x224>)
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	493b      	ldr	r1, [pc, #236]	; (8004a9c <HAL_RCC_ClockConfig+0x224>)
 80049ae:	4313      	orrs	r3, r2
 80049b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 0301 	and.w	r3, r3, #1
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d051      	beq.n	8004a62 <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d00c      	beq.n	80049e0 <HAL_RCC_ClockConfig+0x168>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d008      	beq.n	80049e0 <HAL_RCC_ClockConfig+0x168>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	d004      	beq.n	80049e0 <HAL_RCC_ClockConfig+0x168>
 80049d6:	f240 3166 	movw	r1, #870	; 0x366
 80049da:	482e      	ldr	r0, [pc, #184]	; (8004a94 <HAL_RCC_ClockConfig+0x21c>)
 80049dc:	f7fd fb70 	bl	80020c0 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d107      	bne.n	80049f8 <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049e8:	4b2c      	ldr	r3, [pc, #176]	; (8004a9c <HAL_RCC_ClockConfig+0x224>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d115      	bne.n	8004a20 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	e0c0      	b.n	8004b7a <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	2b02      	cmp	r3, #2
 80049fe:	d107      	bne.n	8004a10 <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a00:	4b26      	ldr	r3, [pc, #152]	; (8004a9c <HAL_RCC_ClockConfig+0x224>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d109      	bne.n	8004a20 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e0b4      	b.n	8004b7a <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a10:	4b22      	ldr	r3, [pc, #136]	; (8004a9c <HAL_RCC_ClockConfig+0x224>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 0302 	and.w	r3, r3, #2
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d101      	bne.n	8004a20 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e0ac      	b.n	8004b7a <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a20:	4b1e      	ldr	r3, [pc, #120]	; (8004a9c <HAL_RCC_ClockConfig+0x224>)
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	f023 0203 	bic.w	r2, r3, #3
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	491b      	ldr	r1, [pc, #108]	; (8004a9c <HAL_RCC_ClockConfig+0x224>)
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a32:	f7fe f815 	bl	8002a60 <HAL_GetTick>
 8004a36:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a38:	e00a      	b.n	8004a50 <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a3a:	f7fe f811 	bl	8002a60 <HAL_GetTick>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	1ad3      	subs	r3, r2, r3
 8004a44:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d901      	bls.n	8004a50 <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	e094      	b.n	8004b7a <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a50:	4b12      	ldr	r3, [pc, #72]	; (8004a9c <HAL_RCC_ClockConfig+0x224>)
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	f003 020c 	and.w	r2, r3, #12
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d1eb      	bne.n	8004a3a <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a62:	4b0d      	ldr	r3, [pc, #52]	; (8004a98 <HAL_RCC_ClockConfig+0x220>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 0307 	and.w	r3, r3, #7
 8004a6a:	683a      	ldr	r2, [r7, #0]
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d217      	bcs.n	8004aa0 <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a70:	4b09      	ldr	r3, [pc, #36]	; (8004a98 <HAL_RCC_ClockConfig+0x220>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f023 0207 	bic.w	r2, r3, #7
 8004a78:	4907      	ldr	r1, [pc, #28]	; (8004a98 <HAL_RCC_ClockConfig+0x220>)
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a80:	4b05      	ldr	r3, [pc, #20]	; (8004a98 <HAL_RCC_ClockConfig+0x220>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 0307 	and.w	r3, r3, #7
 8004a88:	683a      	ldr	r2, [r7, #0]
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d008      	beq.n	8004aa0 <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e073      	b.n	8004b7a <HAL_RCC_ClockConfig+0x302>
 8004a92:	bf00      	nop
 8004a94:	0800ef98 	.word	0x0800ef98
 8004a98:	40022000 	.word	0x40022000
 8004a9c:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 0304 	and.w	r3, r3, #4
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d025      	beq.n	8004af8 <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d018      	beq.n	8004ae6 <HAL_RCC_ClockConfig+0x26e>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004abc:	d013      	beq.n	8004ae6 <HAL_RCC_ClockConfig+0x26e>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004ac6:	d00e      	beq.n	8004ae6 <HAL_RCC_ClockConfig+0x26e>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004ad0:	d009      	beq.n	8004ae6 <HAL_RCC_ClockConfig+0x26e>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	68db      	ldr	r3, [r3, #12]
 8004ad6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ada:	d004      	beq.n	8004ae6 <HAL_RCC_ClockConfig+0x26e>
 8004adc:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 8004ae0:	4828      	ldr	r0, [pc, #160]	; (8004b84 <HAL_RCC_ClockConfig+0x30c>)
 8004ae2:	f7fd faed 	bl	80020c0 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ae6:	4b28      	ldr	r3, [pc, #160]	; (8004b88 <HAL_RCC_ClockConfig+0x310>)
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	68db      	ldr	r3, [r3, #12]
 8004af2:	4925      	ldr	r1, [pc, #148]	; (8004b88 <HAL_RCC_ClockConfig+0x310>)
 8004af4:	4313      	orrs	r3, r2
 8004af6:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 0308 	and.w	r3, r3, #8
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d026      	beq.n	8004b52 <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	691b      	ldr	r3, [r3, #16]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d018      	beq.n	8004b3e <HAL_RCC_ClockConfig+0x2c6>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	691b      	ldr	r3, [r3, #16]
 8004b10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b14:	d013      	beq.n	8004b3e <HAL_RCC_ClockConfig+0x2c6>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	691b      	ldr	r3, [r3, #16]
 8004b1a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004b1e:	d00e      	beq.n	8004b3e <HAL_RCC_ClockConfig+0x2c6>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	691b      	ldr	r3, [r3, #16]
 8004b24:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004b28:	d009      	beq.n	8004b3e <HAL_RCC_ClockConfig+0x2c6>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b32:	d004      	beq.n	8004b3e <HAL_RCC_ClockConfig+0x2c6>
 8004b34:	f240 31ab 	movw	r1, #939	; 0x3ab
 8004b38:	4812      	ldr	r0, [pc, #72]	; (8004b84 <HAL_RCC_ClockConfig+0x30c>)
 8004b3a:	f7fd fac1 	bl	80020c0 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004b3e:	4b12      	ldr	r3, [pc, #72]	; (8004b88 <HAL_RCC_ClockConfig+0x310>)
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	691b      	ldr	r3, [r3, #16]
 8004b4a:	00db      	lsls	r3, r3, #3
 8004b4c:	490e      	ldr	r1, [pc, #56]	; (8004b88 <HAL_RCC_ClockConfig+0x310>)
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b52:	f000 f821 	bl	8004b98 <HAL_RCC_GetSysClockFreq>
 8004b56:	4602      	mov	r2, r0
 8004b58:	4b0b      	ldr	r3, [pc, #44]	; (8004b88 <HAL_RCC_ClockConfig+0x310>)
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	091b      	lsrs	r3, r3, #4
 8004b5e:	f003 030f 	and.w	r3, r3, #15
 8004b62:	490a      	ldr	r1, [pc, #40]	; (8004b8c <HAL_RCC_ClockConfig+0x314>)
 8004b64:	5ccb      	ldrb	r3, [r1, r3]
 8004b66:	fa22 f303 	lsr.w	r3, r2, r3
 8004b6a:	4a09      	ldr	r2, [pc, #36]	; (8004b90 <HAL_RCC_ClockConfig+0x318>)
 8004b6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004b6e:	4b09      	ldr	r3, [pc, #36]	; (8004b94 <HAL_RCC_ClockConfig+0x31c>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4618      	mov	r0, r3
 8004b74:	f7fd ff32 	bl	80029dc <HAL_InitTick>

  return HAL_OK;
 8004b78:	2300      	movs	r3, #0
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3710      	adds	r7, #16
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	0800ef98 	.word	0x0800ef98
 8004b88:	40021000 	.word	0x40021000
 8004b8c:	0800f9a0 	.word	0x0800f9a0
 8004b90:	20000000 	.word	0x20000000
 8004b94:	20000004 	.word	0x20000004

08004b98 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b98:	b490      	push	{r4, r7}
 8004b9a:	b08a      	sub	sp, #40	; 0x28
 8004b9c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004b9e:	4b2a      	ldr	r3, [pc, #168]	; (8004c48 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004ba0:	1d3c      	adds	r4, r7, #4
 8004ba2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004ba4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004ba8:	f240 2301 	movw	r3, #513	; 0x201
 8004bac:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	61fb      	str	r3, [r7, #28]
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	61bb      	str	r3, [r7, #24]
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	627b      	str	r3, [r7, #36]	; 0x24
 8004bba:	2300      	movs	r3, #0
 8004bbc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004bc2:	4b22      	ldr	r3, [pc, #136]	; (8004c4c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004bc8:	69fb      	ldr	r3, [r7, #28]
 8004bca:	f003 030c 	and.w	r3, r3, #12
 8004bce:	2b04      	cmp	r3, #4
 8004bd0:	d002      	beq.n	8004bd8 <HAL_RCC_GetSysClockFreq+0x40>
 8004bd2:	2b08      	cmp	r3, #8
 8004bd4:	d003      	beq.n	8004bde <HAL_RCC_GetSysClockFreq+0x46>
 8004bd6:	e02d      	b.n	8004c34 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004bd8:	4b1d      	ldr	r3, [pc, #116]	; (8004c50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004bda:	623b      	str	r3, [r7, #32]
      break;
 8004bdc:	e02d      	b.n	8004c3a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	0c9b      	lsrs	r3, r3, #18
 8004be2:	f003 030f 	and.w	r3, r3, #15
 8004be6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004bea:	4413      	add	r3, r2
 8004bec:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004bf0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004bf2:	69fb      	ldr	r3, [r7, #28]
 8004bf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d013      	beq.n	8004c24 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004bfc:	4b13      	ldr	r3, [pc, #76]	; (8004c4c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	0c5b      	lsrs	r3, r3, #17
 8004c02:	f003 0301 	and.w	r3, r3, #1
 8004c06:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004c0a:	4413      	add	r3, r2
 8004c0c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004c10:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	4a0e      	ldr	r2, [pc, #56]	; (8004c50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c16:	fb02 f203 	mul.w	r2, r2, r3
 8004c1a:	69bb      	ldr	r3, [r7, #24]
 8004c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c20:	627b      	str	r3, [r7, #36]	; 0x24
 8004c22:	e004      	b.n	8004c2e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	4a0b      	ldr	r2, [pc, #44]	; (8004c54 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004c28:	fb02 f303 	mul.w	r3, r2, r3
 8004c2c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c30:	623b      	str	r3, [r7, #32]
      break;
 8004c32:	e002      	b.n	8004c3a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004c34:	4b06      	ldr	r3, [pc, #24]	; (8004c50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c36:	623b      	str	r3, [r7, #32]
      break;
 8004c38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c3a:	6a3b      	ldr	r3, [r7, #32]
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3728      	adds	r7, #40	; 0x28
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bc90      	pop	{r4, r7}
 8004c44:	4770      	bx	lr
 8004c46:	bf00      	nop
 8004c48:	0800efd0 	.word	0x0800efd0
 8004c4c:	40021000 	.word	0x40021000
 8004c50:	007a1200 	.word	0x007a1200
 8004c54:	003d0900 	.word	0x003d0900

08004c58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c5c:	4b02      	ldr	r3, [pc, #8]	; (8004c68 <HAL_RCC_GetHCLKFreq+0x10>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bc80      	pop	{r7}
 8004c66:	4770      	bx	lr
 8004c68:	20000000 	.word	0x20000000

08004c6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c70:	f7ff fff2 	bl	8004c58 <HAL_RCC_GetHCLKFreq>
 8004c74:	4602      	mov	r2, r0
 8004c76:	4b05      	ldr	r3, [pc, #20]	; (8004c8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	0a1b      	lsrs	r3, r3, #8
 8004c7c:	f003 0307 	and.w	r3, r3, #7
 8004c80:	4903      	ldr	r1, [pc, #12]	; (8004c90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c82:	5ccb      	ldrb	r3, [r1, r3]
 8004c84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	bd80      	pop	{r7, pc}
 8004c8c:	40021000 	.word	0x40021000
 8004c90:	0800f9b0 	.word	0x0800f9b0

08004c94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004c98:	f7ff ffde 	bl	8004c58 <HAL_RCC_GetHCLKFreq>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	4b05      	ldr	r3, [pc, #20]	; (8004cb4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	0adb      	lsrs	r3, r3, #11
 8004ca4:	f003 0307 	and.w	r3, r3, #7
 8004ca8:	4903      	ldr	r1, [pc, #12]	; (8004cb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004caa:	5ccb      	ldrb	r3, [r1, r3]
 8004cac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	bd80      	pop	{r7, pc}
 8004cb4:	40021000 	.word	0x40021000
 8004cb8:	0800f9b0 	.word	0x0800f9b0

08004cbc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b085      	sub	sp, #20
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004cc4:	4b0a      	ldr	r3, [pc, #40]	; (8004cf0 <RCC_Delay+0x34>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a0a      	ldr	r2, [pc, #40]	; (8004cf4 <RCC_Delay+0x38>)
 8004cca:	fba2 2303 	umull	r2, r3, r2, r3
 8004cce:	0a5b      	lsrs	r3, r3, #9
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	fb02 f303 	mul.w	r3, r2, r3
 8004cd6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004cd8:	bf00      	nop
  }
  while (Delay --);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	1e5a      	subs	r2, r3, #1
 8004cde:	60fa      	str	r2, [r7, #12]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d1f9      	bne.n	8004cd8 <RCC_Delay+0x1c>
}
 8004ce4:	bf00      	nop
 8004ce6:	bf00      	nop
 8004ce8:	3714      	adds	r7, #20
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bc80      	pop	{r7}
 8004cee:	4770      	bx	lr
 8004cf0:	20000000 	.word	0x20000000
 8004cf4:	10624dd3 	.word	0x10624dd3

08004cf8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b086      	sub	sp, #24
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004d00:	2300      	movs	r3, #0
 8004d02:	613b      	str	r3, [r7, #16]
 8004d04:	2300      	movs	r3, #0
 8004d06:	60fb      	str	r3, [r7, #12]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
#endif /* STM32F105xC || STM32F107xC */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 0301 	and.w	r3, r3, #1
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d11b      	bne.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 0302 	and.w	r3, r3, #2
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d115      	bne.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 0304 	and.w	r3, r3, #4
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d10f      	bne.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 0308 	and.w	r3, r3, #8
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d109      	bne.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 0310 	and.w	r3, r3, #16
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d103      	bne.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004d44:	216c      	movs	r1, #108	; 0x6c
 8004d46:	4873      	ldr	r0, [pc, #460]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8004d48:	f7fd f9ba 	bl	80020c0 <assert_failed>

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0301 	and.w	r3, r3, #1
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	f000 8095 	beq.w	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    FlagStatus pwrclkchanged = RESET;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	75fb      	strb	r3, [r7, #23]

    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d012      	beq.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x94>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d6e:	d00d      	beq.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x94>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d78:	d008      	beq.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x94>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d82:	d003      	beq.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x94>
 8004d84:	2174      	movs	r1, #116	; 0x74
 8004d86:	4863      	ldr	r0, [pc, #396]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8004d88:	f7fd f99a 	bl	80020c0 <assert_failed>

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d8c:	4b62      	ldr	r3, [pc, #392]	; (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004d8e:	69db      	ldr	r3, [r3, #28]
 8004d90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d10d      	bne.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0xbc>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d98:	4b5f      	ldr	r3, [pc, #380]	; (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004d9a:	69db      	ldr	r3, [r3, #28]
 8004d9c:	4a5e      	ldr	r2, [pc, #376]	; (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004d9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004da2:	61d3      	str	r3, [r2, #28]
 8004da4:	4b5c      	ldr	r3, [pc, #368]	; (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004da6:	69db      	ldr	r3, [r3, #28]
 8004da8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dac:	60bb      	str	r3, [r7, #8]
 8004dae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004db0:	2301      	movs	r3, #1
 8004db2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004db4:	4b59      	ldr	r3, [pc, #356]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d118      	bne.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004dc0:	4b56      	ldr	r3, [pc, #344]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a55      	ldr	r2, [pc, #340]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004dc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004dcc:	f7fd fe48 	bl	8002a60 <HAL_GetTick>
 8004dd0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dd2:	e008      	b.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0xee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dd4:	f7fd fe44 	bl	8002a60 <HAL_GetTick>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	2b64      	cmp	r3, #100	; 0x64
 8004de0:	d901      	bls.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0xee>
        {
          return HAL_TIMEOUT;
 8004de2:	2303      	movs	r3, #3
 8004de4:	e092      	b.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x214>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004de6:	4b4d      	ldr	r3, [pc, #308]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d0f0      	beq.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0xdc>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004df2:	4b49      	ldr	r3, [pc, #292]	; (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004df4:	6a1b      	ldr	r3, [r3, #32]
 8004df6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dfa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d02e      	beq.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e0a:	68fa      	ldr	r2, [r7, #12]
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d027      	beq.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e10:	4b41      	ldr	r3, [pc, #260]	; (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004e12:	6a1b      	ldr	r3, [r3, #32]
 8004e14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e18:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e1a:	4b41      	ldr	r3, [pc, #260]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e20:	4b3f      	ldr	r3, [pc, #252]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8004e22:	2200      	movs	r2, #0
 8004e24:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004e26:	4a3c      	ldr	r2, [pc, #240]	; (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f003 0301 	and.w	r3, r3, #1
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d014      	beq.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e36:	f7fd fe13 	bl	8002a60 <HAL_GetTick>
 8004e3a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e3c:	e00a      	b.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x15c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e3e:	f7fd fe0f 	bl	8002a60 <HAL_GetTick>
 8004e42:	4602      	mov	r2, r0
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	1ad3      	subs	r3, r2, r3
 8004e48:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d901      	bls.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          {
            return HAL_TIMEOUT;
 8004e50:	2303      	movs	r3, #3
 8004e52:	e05b      	b.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x214>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e54:	4b30      	ldr	r3, [pc, #192]	; (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004e56:	6a1b      	ldr	r3, [r3, #32]
 8004e58:	f003 0302 	and.w	r3, r3, #2
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d0ee      	beq.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x146>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e60:	4b2d      	ldr	r3, [pc, #180]	; (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004e62:	6a1b      	ldr	r3, [r3, #32]
 8004e64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	492a      	ldr	r1, [pc, #168]	; (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004e72:	7dfb      	ldrb	r3, [r7, #23]
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d105      	bne.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e78:	4b27      	ldr	r3, [pc, #156]	; (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004e7a:	69db      	ldr	r3, [r3, #28]
 8004e7c:	4a26      	ldr	r2, [pc, #152]	; (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004e7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e82:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 0302 	and.w	r3, r3, #2
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d01f      	beq.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d012      	beq.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ea0:	d00d      	beq.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004eaa:	d008      	beq.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004eb4:	d003      	beq.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 8004eb6:	21b9      	movs	r1, #185	; 0xb9
 8004eb8:	4816      	ldr	r0, [pc, #88]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8004eba:	f7fd f901 	bl	80020c0 <assert_failed>

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ebe:	4b16      	ldr	r3, [pc, #88]	; (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	4913      	ldr	r1, [pc, #76]	; (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 0310 	and.w	r3, r3, #16
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d016      	beq.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x212>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	695b      	ldr	r3, [r3, #20]
 8004ee0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ee4:	d008      	beq.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	695b      	ldr	r3, [r3, #20]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d004      	beq.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004eee:	f240 1115 	movw	r1, #277	; 0x115
 8004ef2:	4808      	ldr	r0, [pc, #32]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8004ef4:	f7fd f8e4 	bl	80020c0 <assert_failed>

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ef8:	4b07      	ldr	r3, [pc, #28]	; (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	695b      	ldr	r3, [r3, #20]
 8004f04:	4904      	ldr	r1, [pc, #16]	; (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004f06:	4313      	orrs	r3, r2
 8004f08:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004f0a:	2300      	movs	r3, #0
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3718      	adds	r7, #24
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}
 8004f14:	0800efe0 	.word	0x0800efe0
 8004f18:	40021000 	.word	0x40021000
 8004f1c:	40007000 	.word	0x40007000
 8004f20:	42420440 	.word	0x42420440

08004f24 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004f24:	b590      	push	{r4, r7, lr}
 8004f26:	b08d      	sub	sp, #52	; 0x34
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004f2c:	4b7a      	ldr	r3, [pc, #488]	; (8005118 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>)
 8004f2e:	f107 040c 	add.w	r4, r7, #12
 8004f32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004f34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004f38:	f240 2301 	movw	r3, #513	; 0x201
 8004f3c:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	627b      	str	r3, [r7, #36]	; 0x24
 8004f42:	2300      	movs	r3, #0
 8004f44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f46:	2300      	movs	r3, #0
 8004f48:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	61fb      	str	r3, [r7, #28]
 8004f4e:	2300      	movs	r3, #0
 8004f50:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f003 0301 	and.w	r3, r3, #1
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d118      	bne.n	8004f8e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f003 0302 	and.w	r3, r3, #2
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d113      	bne.n	8004f8e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f003 0304 	and.w	r3, r3, #4
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d10e      	bne.n	8004f8e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f003 0308 	and.w	r3, r3, #8
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d109      	bne.n	8004f8e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f003 0310 	and.w	r3, r3, #16
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d104      	bne.n	8004f8e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 8004f84:	f44f 71cb 	mov.w	r1, #406	; 0x196
 8004f88:	4864      	ldr	r0, [pc, #400]	; (800511c <HAL_RCCEx_GetPeriphCLKFreq+0x1f8>)
 8004f8a:	f7fd f899 	bl	80020c0 <assert_failed>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	3b01      	subs	r3, #1
 8004f92:	2b0f      	cmp	r3, #15
 8004f94:	f200 80b6 	bhi.w	8005104 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8004f98:	a201      	add	r2, pc, #4	; (adr r2, 8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>)
 8004f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f9e:	bf00      	nop
 8004fa0:	08005083 	.word	0x08005083
 8004fa4:	080050e9 	.word	0x080050e9
 8004fa8:	08005105 	.word	0x08005105
 8004fac:	08005073 	.word	0x08005073
 8004fb0:	08005105 	.word	0x08005105
 8004fb4:	08005105 	.word	0x08005105
 8004fb8:	08005105 	.word	0x08005105
 8004fbc:	0800507b 	.word	0x0800507b
 8004fc0:	08005105 	.word	0x08005105
 8004fc4:	08005105 	.word	0x08005105
 8004fc8:	08005105 	.word	0x08005105
 8004fcc:	08005105 	.word	0x08005105
 8004fd0:	08005105 	.word	0x08005105
 8004fd4:	08005105 	.word	0x08005105
 8004fd8:	08005105 	.word	0x08005105
 8004fdc:	08004fe1 	.word	0x08004fe1
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8004fe0:	4b4f      	ldr	r3, [pc, #316]	; (8005120 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	61fb      	str	r3, [r7, #28]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004fe6:	4b4e      	ldr	r3, [pc, #312]	; (8005120 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	f000 808a 	beq.w	8005108 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004ff4:	69fb      	ldr	r3, [r7, #28]
 8004ff6:	0c9b      	lsrs	r3, r3, #18
 8004ff8:	f003 030f 	and.w	r3, r3, #15
 8004ffc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005000:	4413      	add	r3, r2
 8005002:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005006:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005008:	69fb      	ldr	r3, [r7, #28]
 800500a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800500e:	2b00      	cmp	r3, #0
 8005010:	d018      	beq.n	8005044 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005012:	4b43      	ldr	r3, [pc, #268]	; (8005120 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	0c5b      	lsrs	r3, r3, #17
 8005018:	f003 0301 	and.w	r3, r3, #1
 800501c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005020:	4413      	add	r3, r2
 8005022:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005026:	627b      	str	r3, [r7, #36]	; 0x24
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005028:	69fb      	ldr	r3, [r7, #28]
 800502a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800502e:	2b00      	cmp	r3, #0
 8005030:	d00d      	beq.n	800504e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005032:	4a3c      	ldr	r2, [pc, #240]	; (8005124 <HAL_RCCEx_GetPeriphCLKFreq+0x200>)
 8005034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005036:	fbb2 f2f3 	udiv	r2, r2, r3
 800503a:	6a3b      	ldr	r3, [r7, #32]
 800503c:	fb02 f303 	mul.w	r3, r2, r3
 8005040:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005042:	e004      	b.n	800504e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005044:	6a3b      	ldr	r3, [r7, #32]
 8005046:	4a38      	ldr	r2, [pc, #224]	; (8005128 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 8005048:	fb02 f303 	mul.w	r3, r2, r3
 800504c:	62fb      	str	r3, [r7, #44]	; 0x2c
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800504e:	4b34      	ldr	r3, [pc, #208]	; (8005120 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005056:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800505a:	d102      	bne.n	8005062 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 800505c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800505e:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8005060:	e052      	b.n	8005108 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
          frequency = (pllclk * 2) / 3;
 8005062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005064:	005b      	lsls	r3, r3, #1
 8005066:	4a31      	ldr	r2, [pc, #196]	; (800512c <HAL_RCCEx_GetPeriphCLKFreq+0x208>)
 8005068:	fba2 2303 	umull	r2, r3, r2, r3
 800506c:	085b      	lsrs	r3, r3, #1
 800506e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8005070:	e04a      	b.n	8005108 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 8005072:	f7ff fd91 	bl	8004b98 <HAL_RCC_GetSysClockFreq>
 8005076:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8005078:	e049      	b.n	800510e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 800507a:	f7ff fd8d 	bl	8004b98 <HAL_RCC_GetSysClockFreq>
 800507e:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8005080:	e045      	b.n	800510e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8005082:	4b27      	ldr	r3, [pc, #156]	; (8005120 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 8005084:	6a1b      	ldr	r3, [r3, #32]
 8005086:	61fb      	str	r3, [r7, #28]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8005088:	69fb      	ldr	r3, [r7, #28]
 800508a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800508e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005092:	d108      	bne.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
 8005094:	69fb      	ldr	r3, [r7, #28]
 8005096:	f003 0302 	and.w	r3, r3, #2
 800509a:	2b00      	cmp	r3, #0
 800509c:	d003      	beq.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
      {
        frequency = LSE_VALUE;
 800509e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80050a4:	e01f      	b.n	80050e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80050a6:	69fb      	ldr	r3, [r7, #28]
 80050a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050b0:	d109      	bne.n	80050c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 80050b2:	4b1b      	ldr	r3, [pc, #108]	; (8005120 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 80050b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b6:	f003 0302 	and.w	r3, r3, #2
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d003      	beq.n	80050c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
      {
        frequency = LSI_VALUE;
 80050be:	f649 4340 	movw	r3, #40000	; 0x9c40
 80050c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80050c4:	e00f      	b.n	80050e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050d0:	d11c      	bne.n	800510c <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
 80050d2:	4b13      	ldr	r3, [pc, #76]	; (8005120 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d016      	beq.n	800510c <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
      {
        frequency = HSE_VALUE / 128U;
 80050de:	f24f 4324 	movw	r3, #62500	; 0xf424
 80050e2:	62bb      	str	r3, [r7, #40]	; 0x28
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 80050e4:	e012      	b.n	800510c <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
 80050e6:	e011      	b.n	800510c <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80050e8:	f7ff fdd4 	bl	8004c94 <HAL_RCC_GetPCLK2Freq>
 80050ec:	4602      	mov	r2, r0
 80050ee:	4b0c      	ldr	r3, [pc, #48]	; (8005120 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	0b9b      	lsrs	r3, r3, #14
 80050f4:	f003 0303 	and.w	r3, r3, #3
 80050f8:	3301      	adds	r3, #1
 80050fa:	005b      	lsls	r3, r3, #1
 80050fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005100:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8005102:	e004      	b.n	800510e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
    }
    default:
    {
      break;
 8005104:	bf00      	nop
 8005106:	e002      	b.n	800510e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
      break;
 8005108:	bf00      	nop
 800510a:	e000      	b.n	800510e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
      break;
 800510c:	bf00      	nop
    }
  }
  return (frequency);
 800510e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8005110:	4618      	mov	r0, r3
 8005112:	3734      	adds	r7, #52	; 0x34
 8005114:	46bd      	mov	sp, r7
 8005116:	bd90      	pop	{r4, r7, pc}
 8005118:	0800f01c 	.word	0x0800f01c
 800511c:	0800efe0 	.word	0x0800efe0
 8005120:	40021000 	.word	0x40021000
 8005124:	007a1200 	.word	0x007a1200
 8005128:	003d0900 	.word	0x003d0900
 800512c:	aaaaaaab 	.word	0xaaaaaaab

08005130 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b084      	sub	sp, #16
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8005138:	2300      	movs	r3, #0
 800513a:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d101      	bne.n	8005146 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	e0b4      	b.n	80052b0 <HAL_RTC_Init+0x180>
  }

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a5b      	ldr	r2, [pc, #364]	; (80052b8 <HAL_RTC_Init+0x188>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d004      	beq.n	800515a <HAL_RTC_Init+0x2a>
 8005150:	f240 111d 	movw	r1, #285	; 0x11d
 8005154:	4859      	ldr	r0, [pc, #356]	; (80052bc <HAL_RTC_Init+0x18c>)
 8005156:	f7fc ffb3 	bl	80020c0 <assert_failed>
  assert_param(IS_RTC_CALIB_OUTPUT(hrtc->Init.OutPut));
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d012      	beq.n	8005188 <HAL_RTC_Init+0x58>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	2b80      	cmp	r3, #128	; 0x80
 8005168:	d00e      	beq.n	8005188 <HAL_RTC_Init+0x58>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005172:	d009      	beq.n	8005188 <HAL_RTC_Init+0x58>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800517c:	d004      	beq.n	8005188 <HAL_RTC_Init+0x58>
 800517e:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8005182:	484e      	ldr	r0, [pc, #312]	; (80052bc <HAL_RTC_Init+0x18c>)
 8005184:	f7fc ff9c 	bl	80020c0 <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005190:	d309      	bcc.n	80051a6 <HAL_RTC_Init+0x76>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800519a:	d004      	beq.n	80051a6 <HAL_RTC_Init+0x76>
 800519c:	f240 111f 	movw	r1, #287	; 0x11f
 80051a0:	4846      	ldr	r0, [pc, #280]	; (80052bc <HAL_RTC_Init+0x18c>)
 80051a2:	f7fc ff8d 	bl	80020c0 <assert_failed>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	7c5b      	ldrb	r3, [r3, #17]
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d105      	bne.n	80051bc <HAL_RTC_Init+0x8c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2200      	movs	r2, #0
 80051b4:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f7fd f802 	bl	80021c0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2202      	movs	r2, #2
 80051c0:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f000 fbca 	bl	800595c <HAL_RTC_WaitForSynchro>
 80051c8:	4603      	mov	r3, r0
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d004      	beq.n	80051d8 <HAL_RTC_Init+0xa8>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2204      	movs	r2, #4
 80051d2:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	e06b      	b.n	80052b0 <HAL_RTC_Init+0x180>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f000 fc83 	bl	8005ae4 <RTC_EnterInitMode>
 80051de:	4603      	mov	r3, r0
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d004      	beq.n	80051ee <HAL_RTC_Init+0xbe>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2204      	movs	r2, #4
 80051e8:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e060      	b.n	80052b0 <HAL_RTC_Init+0x180>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	685a      	ldr	r2, [r3, #4]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f022 0207 	bic.w	r2, r2, #7
 80051fc:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d005      	beq.n	8005212 <HAL_RTC_Init+0xe2>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8005206:	4b2e      	ldr	r3, [pc, #184]	; (80052c0 <HAL_RTC_Init+0x190>)
 8005208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800520a:	4a2d      	ldr	r2, [pc, #180]	; (80052c0 <HAL_RTC_Init+0x190>)
 800520c:	f023 0301 	bic.w	r3, r3, #1
 8005210:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8005212:	4b2b      	ldr	r3, [pc, #172]	; (80052c0 <HAL_RTC_Init+0x190>)
 8005214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005216:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	4928      	ldr	r1, [pc, #160]	; (80052c0 <HAL_RTC_Init+0x190>)
 8005220:	4313      	orrs	r3, r2
 8005222:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800522c:	d003      	beq.n	8005236 <HAL_RTC_Init+0x106>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	60fb      	str	r3, [r7, #12]
 8005234:	e00e      	b.n	8005254 <HAL_RTC_Init+0x124>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8005236:	2001      	movs	r0, #1
 8005238:	f7ff fe74 	bl	8004f24 <HAL_RCCEx_GetPeriphCLKFreq>
 800523c:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d104      	bne.n	800524e <HAL_RTC_Init+0x11e>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2204      	movs	r2, #4
 8005248:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	e030      	b.n	80052b0 <HAL_RTC_Init+0x180>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	3b01      	subs	r3, #1
 8005252:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	f023 010f 	bic.w	r1, r3, #15
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	0c1a      	lsrs	r2, r3, #16
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	430a      	orrs	r2, r1
 8005268:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	68db      	ldr	r3, [r3, #12]
 8005270:	0c1b      	lsrs	r3, r3, #16
 8005272:	041b      	lsls	r3, r3, #16
 8005274:	68fa      	ldr	r2, [r7, #12]
 8005276:	b291      	uxth	r1, r2
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	6812      	ldr	r2, [r2, #0]
 800527c:	430b      	orrs	r3, r1
 800527e:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f000 fc57 	bl	8005b34 <RTC_ExitInitMode>
 8005286:	4603      	mov	r3, r0
 8005288:	2b00      	cmp	r3, #0
 800528a:	d004      	beq.n	8005296 <HAL_RTC_Init+0x166>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2204      	movs	r2, #4
 8005290:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e00c      	b.n	80052b0 <HAL_RTC_Init+0x180>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2200      	movs	r2, #0
 800529a:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2201      	movs	r2, #1
 80052a0:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2201      	movs	r2, #1
 80052a6:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2201      	movs	r2, #1
 80052ac:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80052ae:	2300      	movs	r3, #0
  }
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3710      	adds	r7, #16
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}
 80052b8:	40002800 	.word	0x40002800
 80052bc:	0800f02c 	.word	0x0800f02c
 80052c0:	40006c00 	.word	0x40006c00

080052c4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80052c4:	b590      	push	{r4, r7, lr}
 80052c6:	b087      	sub	sp, #28
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	60f8      	str	r0, [r7, #12]
 80052cc:	60b9      	str	r1, [r7, #8]
 80052ce:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 80052d0:	2300      	movs	r3, #0
 80052d2:	617b      	str	r3, [r7, #20]
 80052d4:	2300      	movs	r3, #0
 80052d6:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d002      	beq.n	80052e4 <HAL_RTC_SetTime+0x20>
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d101      	bne.n	80052e8 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	e0cd      	b.n	8005484 <HAL_RTC_SetTime+0x1c0>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d007      	beq.n	80052fe <HAL_RTC_SetTime+0x3a>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d004      	beq.n	80052fe <HAL_RTC_SetTime+0x3a>
 80052f4:	f240 21ca 	movw	r1, #714	; 0x2ca
 80052f8:	4864      	ldr	r0, [pc, #400]	; (800548c <HAL_RTC_SetTime+0x1c8>)
 80052fa:	f7fc fee1 	bl	80020c0 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	7c1b      	ldrb	r3, [r3, #16]
 8005302:	2b01      	cmp	r3, #1
 8005304:	d101      	bne.n	800530a <HAL_RTC_SetTime+0x46>
 8005306:	2302      	movs	r3, #2
 8005308:	e0bc      	b.n	8005484 <HAL_RTC_SetTime+0x1c0>
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2201      	movs	r2, #1
 800530e:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2202      	movs	r2, #2
 8005314:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d12e      	bne.n	800537a <HAL_RTC_SetTime+0xb6>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	781b      	ldrb	r3, [r3, #0]
 8005320:	2b17      	cmp	r3, #23
 8005322:	d904      	bls.n	800532e <HAL_RTC_SetTime+0x6a>
 8005324:	f240 21d3 	movw	r1, #723	; 0x2d3
 8005328:	4858      	ldr	r0, [pc, #352]	; (800548c <HAL_RTC_SetTime+0x1c8>)
 800532a:	f7fc fec9 	bl	80020c0 <assert_failed>
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	785b      	ldrb	r3, [r3, #1]
 8005332:	2b3b      	cmp	r3, #59	; 0x3b
 8005334:	d904      	bls.n	8005340 <HAL_RTC_SetTime+0x7c>
 8005336:	f44f 7135 	mov.w	r1, #724	; 0x2d4
 800533a:	4854      	ldr	r0, [pc, #336]	; (800548c <HAL_RTC_SetTime+0x1c8>)
 800533c:	f7fc fec0 	bl	80020c0 <assert_failed>
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	789b      	ldrb	r3, [r3, #2]
 8005344:	2b3b      	cmp	r3, #59	; 0x3b
 8005346:	d904      	bls.n	8005352 <HAL_RTC_SetTime+0x8e>
 8005348:	f240 21d5 	movw	r1, #725	; 0x2d5
 800534c:	484f      	ldr	r0, [pc, #316]	; (800548c <HAL_RTC_SetTime+0x1c8>)
 800534e:	f7fc feb7 	bl	80020c0 <assert_failed>

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	461a      	mov	r2, r3
 8005358:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800535c:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	785b      	ldrb	r3, [r3, #1]
 8005364:	4619      	mov	r1, r3
 8005366:	460b      	mov	r3, r1
 8005368:	011b      	lsls	r3, r3, #4
 800536a:	1a5b      	subs	r3, r3, r1
 800536c:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800536e:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8005370:	68ba      	ldr	r2, [r7, #8]
 8005372:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8005374:	4413      	add	r3, r2
 8005376:	617b      	str	r3, [r7, #20]
 8005378:	e045      	b.n	8005406 <HAL_RTC_SetTime+0x142>
  }
  else
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	781b      	ldrb	r3, [r3, #0]
 800537e:	4618      	mov	r0, r3
 8005380:	f000 fc1d 	bl	8005bbe <RTC_Bcd2ToByte>
 8005384:	4603      	mov	r3, r0
 8005386:	2b17      	cmp	r3, #23
 8005388:	d904      	bls.n	8005394 <HAL_RTC_SetTime+0xd0>
 800538a:	f240 21dd 	movw	r1, #733	; 0x2dd
 800538e:	483f      	ldr	r0, [pc, #252]	; (800548c <HAL_RTC_SetTime+0x1c8>)
 8005390:	f7fc fe96 	bl	80020c0 <assert_failed>
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	785b      	ldrb	r3, [r3, #1]
 8005398:	4618      	mov	r0, r3
 800539a:	f000 fc10 	bl	8005bbe <RTC_Bcd2ToByte>
 800539e:	4603      	mov	r3, r0
 80053a0:	2b3b      	cmp	r3, #59	; 0x3b
 80053a2:	d904      	bls.n	80053ae <HAL_RTC_SetTime+0xea>
 80053a4:	f240 21de 	movw	r1, #734	; 0x2de
 80053a8:	4838      	ldr	r0, [pc, #224]	; (800548c <HAL_RTC_SetTime+0x1c8>)
 80053aa:	f7fc fe89 	bl	80020c0 <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	789b      	ldrb	r3, [r3, #2]
 80053b2:	4618      	mov	r0, r3
 80053b4:	f000 fc03 	bl	8005bbe <RTC_Bcd2ToByte>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b3b      	cmp	r3, #59	; 0x3b
 80053bc:	d904      	bls.n	80053c8 <HAL_RTC_SetTime+0x104>
 80053be:	f240 21df 	movw	r1, #735	; 0x2df
 80053c2:	4832      	ldr	r0, [pc, #200]	; (800548c <HAL_RTC_SetTime+0x1c8>)
 80053c4:	f7fc fe7c 	bl	80020c0 <assert_failed>

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	4618      	mov	r0, r3
 80053ce:	f000 fbf6 	bl	8005bbe <RTC_Bcd2ToByte>
 80053d2:	4603      	mov	r3, r0
 80053d4:	461a      	mov	r2, r3
 80053d6:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80053da:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	785b      	ldrb	r3, [r3, #1]
 80053e2:	4618      	mov	r0, r3
 80053e4:	f000 fbeb 	bl	8005bbe <RTC_Bcd2ToByte>
 80053e8:	4603      	mov	r3, r0
 80053ea:	461a      	mov	r2, r3
 80053ec:	4613      	mov	r3, r2
 80053ee:	011b      	lsls	r3, r3, #4
 80053f0:	1a9b      	subs	r3, r3, r2
 80053f2:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80053f4:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	789b      	ldrb	r3, [r3, #2]
 80053fa:	4618      	mov	r0, r3
 80053fc:	f000 fbdf 	bl	8005bbe <RTC_Bcd2ToByte>
 8005400:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8005402:	4423      	add	r3, r4
 8005404:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8005406:	6979      	ldr	r1, [r7, #20]
 8005408:	68f8      	ldr	r0, [r7, #12]
 800540a:	f000 fb04 	bl	8005a16 <RTC_WriteTimeCounter>
 800540e:	4603      	mov	r3, r0
 8005410:	2b00      	cmp	r3, #0
 8005412:	d007      	beq.n	8005424 <HAL_RTC_SetTime+0x160>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2204      	movs	r2, #4
 8005418:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2200      	movs	r2, #0
 800541e:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	e02f      	b.n	8005484 <HAL_RTC_SetTime+0x1c0>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	685a      	ldr	r2, [r3, #4]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f022 0205 	bic.w	r2, r2, #5
 8005432:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8005434:	68f8      	ldr	r0, [r7, #12]
 8005436:	f000 fb15 	bl	8005a64 <RTC_ReadAlarmCounter>
 800543a:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005442:	d018      	beq.n	8005476 <HAL_RTC_SetTime+0x1b2>
    {
      if (counter_alarm < counter_time)
 8005444:	693a      	ldr	r2, [r7, #16]
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	429a      	cmp	r2, r3
 800544a:	d214      	bcs.n	8005476 <HAL_RTC_SetTime+0x1b2>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8005452:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005456:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005458:	6939      	ldr	r1, [r7, #16]
 800545a:	68f8      	ldr	r0, [r7, #12]
 800545c:	f000 fb1b 	bl	8005a96 <RTC_WriteAlarmCounter>
 8005460:	4603      	mov	r3, r0
 8005462:	2b00      	cmp	r3, #0
 8005464:	d007      	beq.n	8005476 <HAL_RTC_SetTime+0x1b2>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2204      	movs	r2, #4
 800546a:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2200      	movs	r2, #0
 8005470:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	e006      	b.n	8005484 <HAL_RTC_SetTime+0x1c0>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2201      	movs	r2, #1
 800547a:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2200      	movs	r2, #0
 8005480:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8005482:	2300      	movs	r3, #0
  }
}
 8005484:	4618      	mov	r0, r3
 8005486:	371c      	adds	r7, #28
 8005488:	46bd      	mov	sp, r7
 800548a:	bd90      	pop	{r4, r7, pc}
 800548c:	0800f02c 	.word	0x0800f02c

08005490 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b088      	sub	sp, #32
 8005494:	af00      	add	r7, sp, #0
 8005496:	60f8      	str	r0, [r7, #12]
 8005498:	60b9      	str	r1, [r7, #8]
 800549a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 800549c:	2300      	movs	r3, #0
 800549e:	61bb      	str	r3, [r7, #24]
 80054a0:	2300      	movs	r3, #0
 80054a2:	61fb      	str	r3, [r7, #28]
 80054a4:	2300      	movs	r3, #0
 80054a6:	617b      	str	r3, [r7, #20]
 80054a8:	2300      	movs	r3, #0
 80054aa:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d002      	beq.n	80054b8 <HAL_RTC_GetTime+0x28>
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d101      	bne.n	80054bc <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	e0c0      	b.n	800563e <HAL_RTC_GetTime+0x1ae>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d007      	beq.n	80054d2 <HAL_RTC_GetTime+0x42>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d004      	beq.n	80054d2 <HAL_RTC_GetTime+0x42>
 80054c8:	f240 312d 	movw	r1, #813	; 0x32d
 80054cc:	485e      	ldr	r0, [pc, #376]	; (8005648 <HAL_RTC_GetTime+0x1b8>)
 80054ce:	f7fc fdf7 	bl	80020c0 <assert_failed>

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	f003 0304 	and.w	r3, r3, #4
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d001      	beq.n	80054e4 <HAL_RTC_GetTime+0x54>
  {
    return HAL_ERROR;
 80054e0:	2301      	movs	r3, #1
 80054e2:	e0ac      	b.n	800563e <HAL_RTC_GetTime+0x1ae>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80054e4:	68f8      	ldr	r0, [r7, #12]
 80054e6:	f000 fa66 	bl	80059b6 <RTC_ReadTimeCounter>
 80054ea:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80054ec:	69bb      	ldr	r3, [r7, #24]
 80054ee:	4a57      	ldr	r2, [pc, #348]	; (800564c <HAL_RTC_GetTime+0x1bc>)
 80054f0:	fba2 2303 	umull	r2, r3, r2, r3
 80054f4:	0adb      	lsrs	r3, r3, #11
 80054f6:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 80054f8:	69ba      	ldr	r2, [r7, #24]
 80054fa:	4b54      	ldr	r3, [pc, #336]	; (800564c <HAL_RTC_GetTime+0x1bc>)
 80054fc:	fba3 1302 	umull	r1, r3, r3, r2
 8005500:	0adb      	lsrs	r3, r3, #11
 8005502:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8005506:	fb01 f303 	mul.w	r3, r1, r3
 800550a:	1ad3      	subs	r3, r2, r3
 800550c:	4a50      	ldr	r2, [pc, #320]	; (8005650 <HAL_RTC_GetTime+0x1c0>)
 800550e:	fba2 2303 	umull	r2, r3, r2, r3
 8005512:	095b      	lsrs	r3, r3, #5
 8005514:	b2da      	uxtb	r2, r3
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 800551a:	69bb      	ldr	r3, [r7, #24]
 800551c:	4a4b      	ldr	r2, [pc, #300]	; (800564c <HAL_RTC_GetTime+0x1bc>)
 800551e:	fba2 1203 	umull	r1, r2, r2, r3
 8005522:	0ad2      	lsrs	r2, r2, #11
 8005524:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8005528:	fb01 f202 	mul.w	r2, r1, r2
 800552c:	1a9a      	subs	r2, r3, r2
 800552e:	4b48      	ldr	r3, [pc, #288]	; (8005650 <HAL_RTC_GetTime+0x1c0>)
 8005530:	fba3 1302 	umull	r1, r3, r3, r2
 8005534:	0959      	lsrs	r1, r3, #5
 8005536:	460b      	mov	r3, r1
 8005538:	011b      	lsls	r3, r3, #4
 800553a:	1a5b      	subs	r3, r3, r1
 800553c:	009b      	lsls	r3, r3, #2
 800553e:	1ad1      	subs	r1, r2, r3
 8005540:	b2ca      	uxtb	r2, r1
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	2b17      	cmp	r3, #23
 800554a:	d955      	bls.n	80055f8 <HAL_RTC_GetTime+0x168>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	4a41      	ldr	r2, [pc, #260]	; (8005654 <HAL_RTC_GetTime+0x1c4>)
 8005550:	fba2 2303 	umull	r2, r3, r2, r3
 8005554:	091b      	lsrs	r3, r3, #4
 8005556:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8005558:	6939      	ldr	r1, [r7, #16]
 800555a:	4b3e      	ldr	r3, [pc, #248]	; (8005654 <HAL_RTC_GetTime+0x1c4>)
 800555c:	fba3 2301 	umull	r2, r3, r3, r1
 8005560:	091a      	lsrs	r2, r3, #4
 8005562:	4613      	mov	r3, r2
 8005564:	005b      	lsls	r3, r3, #1
 8005566:	4413      	add	r3, r2
 8005568:	00db      	lsls	r3, r3, #3
 800556a:	1aca      	subs	r2, r1, r3
 800556c:	b2d2      	uxtb	r2, r2
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8005572:	68f8      	ldr	r0, [r7, #12]
 8005574:	f000 fa76 	bl	8005a64 <RTC_ReadAlarmCounter>
 8005578:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 800557a:	69fb      	ldr	r3, [r7, #28]
 800557c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005580:	d008      	beq.n	8005594 <HAL_RTC_GetTime+0x104>
 8005582:	69fa      	ldr	r2, [r7, #28]
 8005584:	69bb      	ldr	r3, [r7, #24]
 8005586:	429a      	cmp	r2, r3
 8005588:	d904      	bls.n	8005594 <HAL_RTC_GetTime+0x104>
    {
      counter_alarm -= counter_time;
 800558a:	69fa      	ldr	r2, [r7, #28]
 800558c:	69bb      	ldr	r3, [r7, #24]
 800558e:	1ad3      	subs	r3, r2, r3
 8005590:	61fb      	str	r3, [r7, #28]
 8005592:	e002      	b.n	800559a <HAL_RTC_GetTime+0x10a>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8005594:	f04f 33ff 	mov.w	r3, #4294967295
 8005598:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	4a2e      	ldr	r2, [pc, #184]	; (8005658 <HAL_RTC_GetTime+0x1c8>)
 800559e:	fb02 f303 	mul.w	r3, r2, r3
 80055a2:	69ba      	ldr	r2, [r7, #24]
 80055a4:	1ad3      	subs	r3, r2, r3
 80055a6:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80055a8:	69b9      	ldr	r1, [r7, #24]
 80055aa:	68f8      	ldr	r0, [r7, #12]
 80055ac:	f000 fa33 	bl	8005a16 <RTC_WriteTimeCounter>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d001      	beq.n	80055ba <HAL_RTC_GetTime+0x12a>
    {
      return HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	e041      	b.n	800563e <HAL_RTC_GetTime+0x1ae>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80055ba:	69fb      	ldr	r3, [r7, #28]
 80055bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055c0:	d00c      	beq.n	80055dc <HAL_RTC_GetTime+0x14c>
    {
      counter_alarm += counter_time;
 80055c2:	69fa      	ldr	r2, [r7, #28]
 80055c4:	69bb      	ldr	r3, [r7, #24]
 80055c6:	4413      	add	r3, r2
 80055c8:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80055ca:	69f9      	ldr	r1, [r7, #28]
 80055cc:	68f8      	ldr	r0, [r7, #12]
 80055ce:	f000 fa62 	bl	8005a96 <RTC_WriteAlarmCounter>
 80055d2:	4603      	mov	r3, r0
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d00a      	beq.n	80055ee <HAL_RTC_GetTime+0x15e>
      {
        return HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	e030      	b.n	800563e <HAL_RTC_GetTime+0x1ae>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80055dc:	69f9      	ldr	r1, [r7, #28]
 80055de:	68f8      	ldr	r0, [r7, #12]
 80055e0:	f000 fa59 	bl	8005a96 <RTC_WriteAlarmCounter>
 80055e4:	4603      	mov	r3, r0
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d001      	beq.n	80055ee <HAL_RTC_GetTime+0x15e>
      {
        return HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	e027      	b.n	800563e <HAL_RTC_GetTime+0x1ae>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 80055ee:	6979      	ldr	r1, [r7, #20]
 80055f0:	68f8      	ldr	r0, [r7, #12]
 80055f2:	f000 fb01 	bl	8005bf8 <RTC_DateUpdate>
 80055f6:	e003      	b.n	8005600 <HAL_RTC_GetTime+0x170>
  }
  else
  {
    sTime->Hours = hours;
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	b2da      	uxtb	r2, r3
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d01a      	beq.n	800563c <HAL_RTC_GetTime+0x1ac>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	781b      	ldrb	r3, [r3, #0]
 800560a:	4618      	mov	r0, r3
 800560c:	f000 faba 	bl	8005b84 <RTC_ByteToBcd2>
 8005610:	4603      	mov	r3, r0
 8005612:	461a      	mov	r2, r3
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	785b      	ldrb	r3, [r3, #1]
 800561c:	4618      	mov	r0, r3
 800561e:	f000 fab1 	bl	8005b84 <RTC_ByteToBcd2>
 8005622:	4603      	mov	r3, r0
 8005624:	461a      	mov	r2, r3
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	789b      	ldrb	r3, [r3, #2]
 800562e:	4618      	mov	r0, r3
 8005630:	f000 faa8 	bl	8005b84 <RTC_ByteToBcd2>
 8005634:	4603      	mov	r3, r0
 8005636:	461a      	mov	r2, r3
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800563c:	2300      	movs	r3, #0
}
 800563e:	4618      	mov	r0, r3
 8005640:	3720      	adds	r7, #32
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}
 8005646:	bf00      	nop
 8005648:	0800f02c 	.word	0x0800f02c
 800564c:	91a2b3c5 	.word	0x91a2b3c5
 8005650:	88888889 	.word	0x88888889
 8005654:	aaaaaaab 	.word	0xaaaaaaab
 8005658:	00015180 	.word	0x00015180

0800565c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b088      	sub	sp, #32
 8005660:	af00      	add	r7, sp, #0
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	60b9      	str	r1, [r7, #8]
 8005666:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8005668:	2300      	movs	r3, #0
 800566a:	61fb      	str	r3, [r7, #28]
 800566c:	2300      	movs	r3, #0
 800566e:	61bb      	str	r3, [r7, #24]
 8005670:	2300      	movs	r3, #0
 8005672:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d002      	beq.n	8005680 <HAL_RTC_SetDate+0x24>
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d101      	bne.n	8005684 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8005680:	2301      	movs	r3, #1
 8005682:	e0fc      	b.n	800587e <HAL_RTC_SetDate+0x222>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d007      	beq.n	800569a <HAL_RTC_SetDate+0x3e>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2b01      	cmp	r3, #1
 800568e:	d004      	beq.n	800569a <HAL_RTC_SetDate+0x3e>
 8005690:	f44f 7167 	mov.w	r1, #924	; 0x39c
 8005694:	487c      	ldr	r0, [pc, #496]	; (8005888 <HAL_RTC_SetDate+0x22c>)
 8005696:	f7fc fd13 	bl	80020c0 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	7c1b      	ldrb	r3, [r3, #16]
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d101      	bne.n	80056a6 <HAL_RTC_SetDate+0x4a>
 80056a2:	2302      	movs	r3, #2
 80056a4:	e0eb      	b.n	800587e <HAL_RTC_SetDate+0x222>
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2201      	movs	r2, #1
 80056aa:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2202      	movs	r2, #2
 80056b0:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d12f      	bne.n	8005718 <HAL_RTC_SetDate+0xbc>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	78db      	ldrb	r3, [r3, #3]
 80056bc:	2b63      	cmp	r3, #99	; 0x63
 80056be:	d904      	bls.n	80056ca <HAL_RTC_SetDate+0x6e>
 80056c0:	f240 31a5 	movw	r1, #933	; 0x3a5
 80056c4:	4870      	ldr	r0, [pc, #448]	; (8005888 <HAL_RTC_SetDate+0x22c>)
 80056c6:	f7fc fcfb 	bl	80020c0 <assert_failed>
    assert_param(IS_RTC_MONTH(sDate->Month));
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	785b      	ldrb	r3, [r3, #1]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d003      	beq.n	80056da <HAL_RTC_SetDate+0x7e>
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	785b      	ldrb	r3, [r3, #1]
 80056d6:	2b0c      	cmp	r3, #12
 80056d8:	d904      	bls.n	80056e4 <HAL_RTC_SetDate+0x88>
 80056da:	f240 31a6 	movw	r1, #934	; 0x3a6
 80056de:	486a      	ldr	r0, [pc, #424]	; (8005888 <HAL_RTC_SetDate+0x22c>)
 80056e0:	f7fc fcee 	bl	80020c0 <assert_failed>
    assert_param(IS_RTC_DATE(sDate->Date));
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	789b      	ldrb	r3, [r3, #2]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d003      	beq.n	80056f4 <HAL_RTC_SetDate+0x98>
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	789b      	ldrb	r3, [r3, #2]
 80056f0:	2b1f      	cmp	r3, #31
 80056f2:	d904      	bls.n	80056fe <HAL_RTC_SetDate+0xa2>
 80056f4:	f240 31a7 	movw	r1, #935	; 0x3a7
 80056f8:	4863      	ldr	r0, [pc, #396]	; (8005888 <HAL_RTC_SetDate+0x22c>)
 80056fa:	f7fc fce1 	bl	80020c0 <assert_failed>

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	78da      	ldrb	r2, [r3, #3]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	785a      	ldrb	r2, [r3, #1]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	789a      	ldrb	r2, [r3, #2]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	739a      	strb	r2, [r3, #14]
 8005716:	e051      	b.n	80057bc <HAL_RTC_SetDate+0x160>
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	78db      	ldrb	r3, [r3, #3]
 800571c:	4618      	mov	r0, r3
 800571e:	f000 fa4e 	bl	8005bbe <RTC_Bcd2ToByte>
 8005722:	4603      	mov	r3, r0
 8005724:	2b63      	cmp	r3, #99	; 0x63
 8005726:	d904      	bls.n	8005732 <HAL_RTC_SetDate+0xd6>
 8005728:	f44f 716c 	mov.w	r1, #944	; 0x3b0
 800572c:	4856      	ldr	r0, [pc, #344]	; (8005888 <HAL_RTC_SetDate+0x22c>)
 800572e:	f7fc fcc7 	bl	80020c0 <assert_failed>
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	785b      	ldrb	r3, [r3, #1]
 8005736:	4618      	mov	r0, r3
 8005738:	f000 fa41 	bl	8005bbe <RTC_Bcd2ToByte>
 800573c:	4603      	mov	r3, r0
 800573e:	2b00      	cmp	r3, #0
 8005740:	d007      	beq.n	8005752 <HAL_RTC_SetDate+0xf6>
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	785b      	ldrb	r3, [r3, #1]
 8005746:	4618      	mov	r0, r3
 8005748:	f000 fa39 	bl	8005bbe <RTC_Bcd2ToByte>
 800574c:	4603      	mov	r3, r0
 800574e:	2b0c      	cmp	r3, #12
 8005750:	d904      	bls.n	800575c <HAL_RTC_SetDate+0x100>
 8005752:	f240 31b1 	movw	r1, #945	; 0x3b1
 8005756:	484c      	ldr	r0, [pc, #304]	; (8005888 <HAL_RTC_SetDate+0x22c>)
 8005758:	f7fc fcb2 	bl	80020c0 <assert_failed>
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	789b      	ldrb	r3, [r3, #2]
 8005760:	4618      	mov	r0, r3
 8005762:	f000 fa2c 	bl	8005bbe <RTC_Bcd2ToByte>
 8005766:	4603      	mov	r3, r0
 8005768:	2b00      	cmp	r3, #0
 800576a:	d007      	beq.n	800577c <HAL_RTC_SetDate+0x120>
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	789b      	ldrb	r3, [r3, #2]
 8005770:	4618      	mov	r0, r3
 8005772:	f000 fa24 	bl	8005bbe <RTC_Bcd2ToByte>
 8005776:	4603      	mov	r3, r0
 8005778:	2b1f      	cmp	r3, #31
 800577a:	d904      	bls.n	8005786 <HAL_RTC_SetDate+0x12a>
 800577c:	f240 31b2 	movw	r1, #946	; 0x3b2
 8005780:	4841      	ldr	r0, [pc, #260]	; (8005888 <HAL_RTC_SetDate+0x22c>)
 8005782:	f7fc fc9d 	bl	80020c0 <assert_failed>

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	78db      	ldrb	r3, [r3, #3]
 800578a:	4618      	mov	r0, r3
 800578c:	f000 fa17 	bl	8005bbe <RTC_Bcd2ToByte>
 8005790:	4603      	mov	r3, r0
 8005792:	461a      	mov	r2, r3
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	785b      	ldrb	r3, [r3, #1]
 800579c:	4618      	mov	r0, r3
 800579e:	f000 fa0e 	bl	8005bbe <RTC_Bcd2ToByte>
 80057a2:	4603      	mov	r3, r0
 80057a4:	461a      	mov	r2, r3
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	789b      	ldrb	r3, [r3, #2]
 80057ae:	4618      	mov	r0, r3
 80057b0:	f000 fa05 	bl	8005bbe <RTC_Bcd2ToByte>
 80057b4:	4603      	mov	r3, r0
 80057b6:	461a      	mov	r2, r3
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	7bdb      	ldrb	r3, [r3, #15]
 80057c0:	4618      	mov	r0, r3
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	7b59      	ldrb	r1, [r3, #13]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	7b9b      	ldrb	r3, [r3, #14]
 80057ca:	461a      	mov	r2, r3
 80057cc:	f000 faf0 	bl	8005db0 <RTC_WeekDayNum>
 80057d0:	4603      	mov	r3, r0
 80057d2:	461a      	mov	r2, r3
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	7b1a      	ldrb	r2, [r3, #12]
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80057e0:	68f8      	ldr	r0, [r7, #12]
 80057e2:	f000 f8e8 	bl	80059b6 <RTC_ReadTimeCounter>
 80057e6:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80057e8:	69fb      	ldr	r3, [r7, #28]
 80057ea:	4a28      	ldr	r2, [pc, #160]	; (800588c <HAL_RTC_SetDate+0x230>)
 80057ec:	fba2 2303 	umull	r2, r3, r2, r3
 80057f0:	0adb      	lsrs	r3, r3, #11
 80057f2:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	2b18      	cmp	r3, #24
 80057f8:	d93a      	bls.n	8005870 <HAL_RTC_SetDate+0x214>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	4a24      	ldr	r2, [pc, #144]	; (8005890 <HAL_RTC_SetDate+0x234>)
 80057fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005802:	091b      	lsrs	r3, r3, #4
 8005804:	4a23      	ldr	r2, [pc, #140]	; (8005894 <HAL_RTC_SetDate+0x238>)
 8005806:	fb02 f303 	mul.w	r3, r2, r3
 800580a:	69fa      	ldr	r2, [r7, #28]
 800580c:	1ad3      	subs	r3, r2, r3
 800580e:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8005810:	69f9      	ldr	r1, [r7, #28]
 8005812:	68f8      	ldr	r0, [r7, #12]
 8005814:	f000 f8ff 	bl	8005a16 <RTC_WriteTimeCounter>
 8005818:	4603      	mov	r3, r0
 800581a:	2b00      	cmp	r3, #0
 800581c:	d007      	beq.n	800582e <HAL_RTC_SetDate+0x1d2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2204      	movs	r2, #4
 8005822:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2200      	movs	r2, #0
 8005828:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	e027      	b.n	800587e <HAL_RTC_SetDate+0x222>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800582e:	68f8      	ldr	r0, [r7, #12]
 8005830:	f000 f918 	bl	8005a64 <RTC_ReadAlarmCounter>
 8005834:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8005836:	69bb      	ldr	r3, [r7, #24]
 8005838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800583c:	d018      	beq.n	8005870 <HAL_RTC_SetDate+0x214>
    {
      if (counter_alarm < counter_time)
 800583e:	69ba      	ldr	r2, [r7, #24]
 8005840:	69fb      	ldr	r3, [r7, #28]
 8005842:	429a      	cmp	r2, r3
 8005844:	d214      	bcs.n	8005870 <HAL_RTC_SetDate+0x214>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8005846:	69bb      	ldr	r3, [r7, #24]
 8005848:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 800584c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005850:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005852:	69b9      	ldr	r1, [r7, #24]
 8005854:	68f8      	ldr	r0, [r7, #12]
 8005856:	f000 f91e 	bl	8005a96 <RTC_WriteAlarmCounter>
 800585a:	4603      	mov	r3, r0
 800585c:	2b00      	cmp	r3, #0
 800585e:	d007      	beq.n	8005870 <HAL_RTC_SetDate+0x214>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2204      	movs	r2, #4
 8005864:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2200      	movs	r2, #0
 800586a:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	e006      	b.n	800587e <HAL_RTC_SetDate+0x222>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2201      	movs	r2, #1
 8005874:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2200      	movs	r2, #0
 800587a:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800587c:	2300      	movs	r3, #0
}
 800587e:	4618      	mov	r0, r3
 8005880:	3720      	adds	r7, #32
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}
 8005886:	bf00      	nop
 8005888:	0800f02c 	.word	0x0800f02c
 800588c:	91a2b3c5 	.word	0x91a2b3c5
 8005890:	aaaaaaab 	.word	0xaaaaaaab
 8005894:	00015180 	.word	0x00015180

08005898 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b086      	sub	sp, #24
 800589c:	af00      	add	r7, sp, #0
 800589e:	60f8      	str	r0, [r7, #12]
 80058a0:	60b9      	str	r1, [r7, #8]
 80058a2:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 80058a4:	f107 0314 	add.w	r3, r7, #20
 80058a8:	2100      	movs	r1, #0
 80058aa:	460a      	mov	r2, r1
 80058ac:	801a      	strh	r2, [r3, #0]
 80058ae:	460a      	mov	r2, r1
 80058b0:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d002      	beq.n	80058be <HAL_RTC_GetDate+0x26>
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d101      	bne.n	80058c2 <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	e045      	b.n	800594e <HAL_RTC_GetDate+0xb6>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d007      	beq.n	80058d8 <HAL_RTC_GetDate+0x40>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d004      	beq.n	80058d8 <HAL_RTC_GetDate+0x40>
 80058ce:	f240 410e 	movw	r1, #1038	; 0x40e
 80058d2:	4821      	ldr	r0, [pc, #132]	; (8005958 <HAL_RTC_GetDate+0xc0>)
 80058d4:	f7fc fbf4 	bl	80020c0 <assert_failed>

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 80058d8:	f107 0314 	add.w	r3, r7, #20
 80058dc:	2200      	movs	r2, #0
 80058de:	4619      	mov	r1, r3
 80058e0:	68f8      	ldr	r0, [r7, #12]
 80058e2:	f7ff fdd5 	bl	8005490 <HAL_RTC_GetTime>
 80058e6:	4603      	mov	r3, r0
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d001      	beq.n	80058f0 <HAL_RTC_GetDate+0x58>
  {
    return HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	e02e      	b.n	800594e <HAL_RTC_GetDate+0xb6>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	7b1a      	ldrb	r2, [r3, #12]
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	7bda      	ldrb	r2, [r3, #15]
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	7b5a      	ldrb	r2, [r3, #13]
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	7b9a      	ldrb	r2, [r3, #14]
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d01a      	beq.n	800594c <HAL_RTC_GetDate+0xb4>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	78db      	ldrb	r3, [r3, #3]
 800591a:	4618      	mov	r0, r3
 800591c:	f000 f932 	bl	8005b84 <RTC_ByteToBcd2>
 8005920:	4603      	mov	r3, r0
 8005922:	461a      	mov	r2, r3
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	785b      	ldrb	r3, [r3, #1]
 800592c:	4618      	mov	r0, r3
 800592e:	f000 f929 	bl	8005b84 <RTC_ByteToBcd2>
 8005932:	4603      	mov	r3, r0
 8005934:	461a      	mov	r2, r3
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	789b      	ldrb	r3, [r3, #2]
 800593e:	4618      	mov	r0, r3
 8005940:	f000 f920 	bl	8005b84 <RTC_ByteToBcd2>
 8005944:	4603      	mov	r3, r0
 8005946:	461a      	mov	r2, r3
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800594c:	2300      	movs	r3, #0
}
 800594e:	4618      	mov	r0, r3
 8005950:	3718      	adds	r7, #24
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}
 8005956:	bf00      	nop
 8005958:	0800f02c 	.word	0x0800f02c

0800595c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b084      	sub	sp, #16
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005964:	2300      	movs	r3, #0
 8005966:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d101      	bne.n	8005972 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	e01d      	b.n	80059ae <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	685a      	ldr	r2, [r3, #4]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f022 0208 	bic.w	r2, r2, #8
 8005980:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8005982:	f7fd f86d 	bl	8002a60 <HAL_GetTick>
 8005986:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8005988:	e009      	b.n	800599e <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800598a:	f7fd f869 	bl	8002a60 <HAL_GetTick>
 800598e:	4602      	mov	r2, r0
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	1ad3      	subs	r3, r2, r3
 8005994:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005998:	d901      	bls.n	800599e <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 800599a:	2303      	movs	r3, #3
 800599c:	e007      	b.n	80059ae <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	f003 0308 	and.w	r3, r3, #8
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d0ee      	beq.n	800598a <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80059ac:	2300      	movs	r3, #0
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3710      	adds	r7, #16
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}

080059b6 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 80059b6:	b480      	push	{r7}
 80059b8:	b087      	sub	sp, #28
 80059ba:	af00      	add	r7, sp, #0
 80059bc:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 80059be:	2300      	movs	r3, #0
 80059c0:	827b      	strh	r3, [r7, #18]
 80059c2:	2300      	movs	r3, #0
 80059c4:	823b      	strh	r3, [r7, #16]
 80059c6:	2300      	movs	r3, #0
 80059c8:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 80059ca:	2300      	movs	r3, #0
 80059cc:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	699b      	ldr	r3, [r3, #24]
 80059d4:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	69db      	ldr	r3, [r3, #28]
 80059dc:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	699b      	ldr	r3, [r3, #24]
 80059e4:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 80059e6:	8a7a      	ldrh	r2, [r7, #18]
 80059e8:	8a3b      	ldrh	r3, [r7, #16]
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d008      	beq.n	8005a00 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80059ee:	8a3b      	ldrh	r3, [r7, #16]
 80059f0:	041a      	lsls	r2, r3, #16
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	69db      	ldr	r3, [r3, #28]
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	4313      	orrs	r3, r2
 80059fc:	617b      	str	r3, [r7, #20]
 80059fe:	e004      	b.n	8005a0a <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8005a00:	8a7b      	ldrh	r3, [r7, #18]
 8005a02:	041a      	lsls	r2, r3, #16
 8005a04:	89fb      	ldrh	r3, [r7, #14]
 8005a06:	4313      	orrs	r3, r2
 8005a08:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8005a0a:	697b      	ldr	r3, [r7, #20]
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	371c      	adds	r7, #28
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bc80      	pop	{r7}
 8005a14:	4770      	bx	lr

08005a16 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8005a16:	b580      	push	{r7, lr}
 8005a18:	b084      	sub	sp, #16
 8005a1a:	af00      	add	r7, sp, #0
 8005a1c:	6078      	str	r0, [r7, #4]
 8005a1e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a20:	2300      	movs	r3, #0
 8005a22:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f000 f85d 	bl	8005ae4 <RTC_EnterInitMode>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d002      	beq.n	8005a36 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8005a30:	2301      	movs	r3, #1
 8005a32:	73fb      	strb	r3, [r7, #15]
 8005a34:	e011      	b.n	8005a5a <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	683a      	ldr	r2, [r7, #0]
 8005a3c:	0c12      	lsrs	r2, r2, #16
 8005a3e:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	683a      	ldr	r2, [r7, #0]
 8005a46:	b292      	uxth	r2, r2
 8005a48:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f000 f872 	bl	8005b34 <RTC_ExitInitMode>
 8005a50:	4603      	mov	r3, r0
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d001      	beq.n	8005a5a <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3710      	adds	r7, #16
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}

08005a64 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b085      	sub	sp, #20
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	81fb      	strh	r3, [r7, #14]
 8005a70:	2300      	movs	r3, #0
 8005a72:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	6a1b      	ldr	r3, [r3, #32]
 8005a7a:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a82:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8005a84:	89fb      	ldrh	r3, [r7, #14]
 8005a86:	041a      	lsls	r2, r3, #16
 8005a88:	89bb      	ldrh	r3, [r7, #12]
 8005a8a:	4313      	orrs	r3, r2
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3714      	adds	r7, #20
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bc80      	pop	{r7}
 8005a94:	4770      	bx	lr

08005a96 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8005a96:	b580      	push	{r7, lr}
 8005a98:	b084      	sub	sp, #16
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	6078      	str	r0, [r7, #4]
 8005a9e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f000 f81d 	bl	8005ae4 <RTC_EnterInitMode>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d002      	beq.n	8005ab6 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	73fb      	strb	r3, [r7, #15]
 8005ab4:	e011      	b.n	8005ada <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	683a      	ldr	r2, [r7, #0]
 8005abc:	0c12      	lsrs	r2, r2, #16
 8005abe:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	683a      	ldr	r2, [r7, #0]
 8005ac6:	b292      	uxth	r2, r2
 8005ac8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f000 f832 	bl	8005b34 <RTC_ExitInitMode>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d001      	beq.n	8005ada <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005ada:	7bfb      	ldrb	r3, [r7, #15]
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3710      	adds	r7, #16
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}

08005ae4 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b084      	sub	sp, #16
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005aec:	2300      	movs	r3, #0
 8005aee:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8005af0:	f7fc ffb6 	bl	8002a60 <HAL_GetTick>
 8005af4:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005af6:	e009      	b.n	8005b0c <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005af8:	f7fc ffb2 	bl	8002a60 <HAL_GetTick>
 8005afc:	4602      	mov	r2, r0
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	1ad3      	subs	r3, r2, r3
 8005b02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b06:	d901      	bls.n	8005b0c <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8005b08:	2303      	movs	r3, #3
 8005b0a:	e00f      	b.n	8005b2c <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	f003 0320 	and.w	r3, r3, #32
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d0ee      	beq.n	8005af8 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	685a      	ldr	r2, [r3, #4]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f042 0210 	orr.w	r2, r2, #16
 8005b28:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8005b2a:	2300      	movs	r3, #0
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3710      	adds	r7, #16
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}

08005b34 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b084      	sub	sp, #16
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	685a      	ldr	r2, [r3, #4]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f022 0210 	bic.w	r2, r2, #16
 8005b4e:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8005b50:	f7fc ff86 	bl	8002a60 <HAL_GetTick>
 8005b54:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005b56:	e009      	b.n	8005b6c <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005b58:	f7fc ff82 	bl	8002a60 <HAL_GetTick>
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	1ad3      	subs	r3, r2, r3
 8005b62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b66:	d901      	bls.n	8005b6c <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8005b68:	2303      	movs	r3, #3
 8005b6a:	e007      	b.n	8005b7c <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	f003 0320 	and.w	r3, r3, #32
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d0ee      	beq.n	8005b58 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8005b7a:	2300      	movs	r3, #0
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3710      	adds	r7, #16
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}

08005b84 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b085      	sub	sp, #20
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8005b92:	e005      	b.n	8005ba0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	3301      	adds	r3, #1
 8005b98:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8005b9a:	79fb      	ldrb	r3, [r7, #7]
 8005b9c:	3b0a      	subs	r3, #10
 8005b9e:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8005ba0:	79fb      	ldrb	r3, [r7, #7]
 8005ba2:	2b09      	cmp	r3, #9
 8005ba4:	d8f6      	bhi.n	8005b94 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	b2db      	uxtb	r3, r3
 8005baa:	011b      	lsls	r3, r3, #4
 8005bac:	b2da      	uxtb	r2, r3
 8005bae:	79fb      	ldrb	r3, [r7, #7]
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	b2db      	uxtb	r3, r3
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3714      	adds	r7, #20
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bc80      	pop	{r7}
 8005bbc:	4770      	bx	lr

08005bbe <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005bbe:	b480      	push	{r7}
 8005bc0:	b085      	sub	sp, #20
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8005bcc:	79fb      	ldrb	r3, [r7, #7]
 8005bce:	091b      	lsrs	r3, r3, #4
 8005bd0:	b2db      	uxtb	r3, r3
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	4613      	mov	r3, r2
 8005bd6:	009b      	lsls	r3, r3, #2
 8005bd8:	4413      	add	r3, r2
 8005bda:	005b      	lsls	r3, r3, #1
 8005bdc:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8005bde:	79fb      	ldrb	r3, [r7, #7]
 8005be0:	f003 030f 	and.w	r3, r3, #15
 8005be4:	b2da      	uxtb	r2, r3
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	4413      	add	r3, r2
 8005bec:	b2db      	uxtb	r3, r3
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3714      	adds	r7, #20
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bc80      	pop	{r7}
 8005bf6:	4770      	bx	lr

08005bf8 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b086      	sub	sp, #24
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8005c02:	2300      	movs	r3, #0
 8005c04:	617b      	str	r3, [r7, #20]
 8005c06:	2300      	movs	r3, #0
 8005c08:	613b      	str	r3, [r7, #16]
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	7bdb      	ldrb	r3, [r3, #15]
 8005c16:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	7b5b      	ldrb	r3, [r3, #13]
 8005c1c:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	7b9b      	ldrb	r3, [r3, #14]
 8005c22:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8005c24:	2300      	movs	r3, #0
 8005c26:	60bb      	str	r3, [r7, #8]
 8005c28:	e06f      	b.n	8005d0a <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d011      	beq.n	8005c54 <RTC_DateUpdate+0x5c>
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	2b03      	cmp	r3, #3
 8005c34:	d00e      	beq.n	8005c54 <RTC_DateUpdate+0x5c>
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	2b05      	cmp	r3, #5
 8005c3a:	d00b      	beq.n	8005c54 <RTC_DateUpdate+0x5c>
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	2b07      	cmp	r3, #7
 8005c40:	d008      	beq.n	8005c54 <RTC_DateUpdate+0x5c>
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	2b08      	cmp	r3, #8
 8005c46:	d005      	beq.n	8005c54 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	2b0a      	cmp	r3, #10
 8005c4c:	d002      	beq.n	8005c54 <RTC_DateUpdate+0x5c>
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	2b0c      	cmp	r3, #12
 8005c52:	d117      	bne.n	8005c84 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2b1e      	cmp	r3, #30
 8005c58:	d803      	bhi.n	8005c62 <RTC_DateUpdate+0x6a>
      {
        day++;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	3301      	adds	r3, #1
 8005c5e:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8005c60:	e050      	b.n	8005d04 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	2b0c      	cmp	r3, #12
 8005c66:	d005      	beq.n	8005c74 <RTC_DateUpdate+0x7c>
        {
          month++;
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	3301      	adds	r3, #1
 8005c6c:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8005c72:	e047      	b.n	8005d04 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8005c74:	2301      	movs	r3, #1
 8005c76:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	60fb      	str	r3, [r7, #12]
          year++;
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	3301      	adds	r3, #1
 8005c80:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8005c82:	e03f      	b.n	8005d04 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	2b04      	cmp	r3, #4
 8005c88:	d008      	beq.n	8005c9c <RTC_DateUpdate+0xa4>
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	2b06      	cmp	r3, #6
 8005c8e:	d005      	beq.n	8005c9c <RTC_DateUpdate+0xa4>
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	2b09      	cmp	r3, #9
 8005c94:	d002      	beq.n	8005c9c <RTC_DateUpdate+0xa4>
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	2b0b      	cmp	r3, #11
 8005c9a:	d10c      	bne.n	8005cb6 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2b1d      	cmp	r3, #29
 8005ca0:	d803      	bhi.n	8005caa <RTC_DateUpdate+0xb2>
      {
        day++;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	3301      	adds	r3, #1
 8005ca6:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8005ca8:	e02c      	b.n	8005d04 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	3301      	adds	r3, #1
 8005cae:	613b      	str	r3, [r7, #16]
        day = 1U;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8005cb4:	e026      	b.n	8005d04 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	2b02      	cmp	r3, #2
 8005cba:	d123      	bne.n	8005d04 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2b1b      	cmp	r3, #27
 8005cc0:	d803      	bhi.n	8005cca <RTC_DateUpdate+0xd2>
      {
        day++;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	3301      	adds	r3, #1
 8005cc6:	60fb      	str	r3, [r7, #12]
 8005cc8:	e01c      	b.n	8005d04 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2b1c      	cmp	r3, #28
 8005cce:	d111      	bne.n	8005cf4 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f000 f839 	bl	8005d4c <RTC_IsLeapYear>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d003      	beq.n	8005ce8 <RTC_DateUpdate+0xf0>
        {
          day++;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	3301      	adds	r3, #1
 8005ce4:	60fb      	str	r3, [r7, #12]
 8005ce6:	e00d      	b.n	8005d04 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	3301      	adds	r3, #1
 8005cec:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	60fb      	str	r3, [r7, #12]
 8005cf2:	e007      	b.n	8005d04 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2b1d      	cmp	r3, #29
 8005cf8:	d104      	bne.n	8005d04 <RTC_DateUpdate+0x10c>
      {
        month++;
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	3301      	adds	r3, #1
 8005cfe:	613b      	str	r3, [r7, #16]
        day = 1U;
 8005d00:	2301      	movs	r3, #1
 8005d02:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	3301      	adds	r3, #1
 8005d08:	60bb      	str	r3, [r7, #8]
 8005d0a:	68ba      	ldr	r2, [r7, #8]
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	d38b      	bcc.n	8005c2a <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	b2da      	uxtb	r2, r3
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	b2da      	uxtb	r2, r3
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	b2da      	uxtb	r2, r3
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	b2db      	uxtb	r3, r3
 8005d2e:	68fa      	ldr	r2, [r7, #12]
 8005d30:	b2d2      	uxtb	r2, r2
 8005d32:	4619      	mov	r1, r3
 8005d34:	6978      	ldr	r0, [r7, #20]
 8005d36:	f000 f83b 	bl	8005db0 <RTC_WeekDayNum>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	461a      	mov	r2, r3
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	731a      	strb	r2, [r3, #12]
}
 8005d42:	bf00      	nop
 8005d44:	3718      	adds	r7, #24
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}
	...

08005d4c <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b083      	sub	sp, #12
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	4603      	mov	r3, r0
 8005d54:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8005d56:	88fb      	ldrh	r3, [r7, #6]
 8005d58:	f003 0303 	and.w	r3, r3, #3
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d001      	beq.n	8005d66 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8005d62:	2300      	movs	r3, #0
 8005d64:	e01d      	b.n	8005da2 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8005d66:	88fb      	ldrh	r3, [r7, #6]
 8005d68:	4a10      	ldr	r2, [pc, #64]	; (8005dac <RTC_IsLeapYear+0x60>)
 8005d6a:	fba2 1203 	umull	r1, r2, r2, r3
 8005d6e:	0952      	lsrs	r2, r2, #5
 8005d70:	2164      	movs	r1, #100	; 0x64
 8005d72:	fb01 f202 	mul.w	r2, r1, r2
 8005d76:	1a9b      	subs	r3, r3, r2
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d001      	beq.n	8005d82 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e00f      	b.n	8005da2 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8005d82:	88fb      	ldrh	r3, [r7, #6]
 8005d84:	4a09      	ldr	r2, [pc, #36]	; (8005dac <RTC_IsLeapYear+0x60>)
 8005d86:	fba2 1203 	umull	r1, r2, r2, r3
 8005d8a:	09d2      	lsrs	r2, r2, #7
 8005d8c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005d90:	fb01 f202 	mul.w	r2, r1, r2
 8005d94:	1a9b      	subs	r3, r3, r2
 8005d96:	b29b      	uxth	r3, r3
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d101      	bne.n	8005da0 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	e000      	b.n	8005da2 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8005da0:	2300      	movs	r3, #0
  }
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	370c      	adds	r7, #12
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bc80      	pop	{r7}
 8005daa:	4770      	bx	lr
 8005dac:	51eb851f 	.word	0x51eb851f

08005db0 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b085      	sub	sp, #20
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	460b      	mov	r3, r1
 8005dba:	70fb      	strb	r3, [r7, #3]
 8005dbc:	4613      	mov	r3, r2
 8005dbe:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	60bb      	str	r3, [r7, #8]
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8005dce:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8005dd0:	78fb      	ldrb	r3, [r7, #3]
 8005dd2:	2b02      	cmp	r3, #2
 8005dd4:	d82d      	bhi.n	8005e32 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8005dd6:	78fa      	ldrb	r2, [r7, #3]
 8005dd8:	4613      	mov	r3, r2
 8005dda:	005b      	lsls	r3, r3, #1
 8005ddc:	4413      	add	r3, r2
 8005dde:	00db      	lsls	r3, r3, #3
 8005de0:	1a9b      	subs	r3, r3, r2
 8005de2:	4a2c      	ldr	r2, [pc, #176]	; (8005e94 <RTC_WeekDayNum+0xe4>)
 8005de4:	fba2 2303 	umull	r2, r3, r2, r3
 8005de8:	085a      	lsrs	r2, r3, #1
 8005dea:	78bb      	ldrb	r3, [r7, #2]
 8005dec:	441a      	add	r2, r3
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	441a      	add	r2, r3
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	3b01      	subs	r3, #1
 8005df6:	089b      	lsrs	r3, r3, #2
 8005df8:	441a      	add	r2, r3
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	3b01      	subs	r3, #1
 8005dfe:	4926      	ldr	r1, [pc, #152]	; (8005e98 <RTC_WeekDayNum+0xe8>)
 8005e00:	fba1 1303 	umull	r1, r3, r1, r3
 8005e04:	095b      	lsrs	r3, r3, #5
 8005e06:	1ad2      	subs	r2, r2, r3
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	3b01      	subs	r3, #1
 8005e0c:	4922      	ldr	r1, [pc, #136]	; (8005e98 <RTC_WeekDayNum+0xe8>)
 8005e0e:	fba1 1303 	umull	r1, r3, r1, r3
 8005e12:	09db      	lsrs	r3, r3, #7
 8005e14:	4413      	add	r3, r2
 8005e16:	1d1a      	adds	r2, r3, #4
 8005e18:	4b20      	ldr	r3, [pc, #128]	; (8005e9c <RTC_WeekDayNum+0xec>)
 8005e1a:	fba3 1302 	umull	r1, r3, r3, r2
 8005e1e:	1ad1      	subs	r1, r2, r3
 8005e20:	0849      	lsrs	r1, r1, #1
 8005e22:	440b      	add	r3, r1
 8005e24:	0899      	lsrs	r1, r3, #2
 8005e26:	460b      	mov	r3, r1
 8005e28:	00db      	lsls	r3, r3, #3
 8005e2a:	1a5b      	subs	r3, r3, r1
 8005e2c:	1ad3      	subs	r3, r2, r3
 8005e2e:	60fb      	str	r3, [r7, #12]
 8005e30:	e029      	b.n	8005e86 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8005e32:	78fa      	ldrb	r2, [r7, #3]
 8005e34:	4613      	mov	r3, r2
 8005e36:	005b      	lsls	r3, r3, #1
 8005e38:	4413      	add	r3, r2
 8005e3a:	00db      	lsls	r3, r3, #3
 8005e3c:	1a9b      	subs	r3, r3, r2
 8005e3e:	4a15      	ldr	r2, [pc, #84]	; (8005e94 <RTC_WeekDayNum+0xe4>)
 8005e40:	fba2 2303 	umull	r2, r3, r2, r3
 8005e44:	085a      	lsrs	r2, r3, #1
 8005e46:	78bb      	ldrb	r3, [r7, #2]
 8005e48:	441a      	add	r2, r3
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	441a      	add	r2, r3
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	089b      	lsrs	r3, r3, #2
 8005e52:	441a      	add	r2, r3
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	4910      	ldr	r1, [pc, #64]	; (8005e98 <RTC_WeekDayNum+0xe8>)
 8005e58:	fba1 1303 	umull	r1, r3, r1, r3
 8005e5c:	095b      	lsrs	r3, r3, #5
 8005e5e:	1ad2      	subs	r2, r2, r3
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	490d      	ldr	r1, [pc, #52]	; (8005e98 <RTC_WeekDayNum+0xe8>)
 8005e64:	fba1 1303 	umull	r1, r3, r1, r3
 8005e68:	09db      	lsrs	r3, r3, #7
 8005e6a:	4413      	add	r3, r2
 8005e6c:	1c9a      	adds	r2, r3, #2
 8005e6e:	4b0b      	ldr	r3, [pc, #44]	; (8005e9c <RTC_WeekDayNum+0xec>)
 8005e70:	fba3 1302 	umull	r1, r3, r3, r2
 8005e74:	1ad1      	subs	r1, r2, r3
 8005e76:	0849      	lsrs	r1, r1, #1
 8005e78:	440b      	add	r3, r1
 8005e7a:	0899      	lsrs	r1, r3, #2
 8005e7c:	460b      	mov	r3, r1
 8005e7e:	00db      	lsls	r3, r3, #3
 8005e80:	1a5b      	subs	r3, r3, r1
 8005e82:	1ad3      	subs	r3, r2, r3
 8005e84:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	b2db      	uxtb	r3, r3
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3714      	adds	r7, #20
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bc80      	pop	{r7}
 8005e92:	4770      	bx	lr
 8005e94:	38e38e39 	.word	0x38e38e39
 8005e98:	51eb851f 	.word	0x51eb851f
 8005e9c:	24924925 	.word	0x24924925

08005ea0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b082      	sub	sp, #8
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d101      	bne.n	8005eb2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e0b2      	b.n	8006018 <HAL_TIM_Base_Init+0x178>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a5a      	ldr	r2, [pc, #360]	; (8006020 <HAL_TIM_Base_Init+0x180>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d027      	beq.n	8005f0c <HAL_TIM_Base_Init+0x6c>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a58      	ldr	r2, [pc, #352]	; (8006024 <HAL_TIM_Base_Init+0x184>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d022      	beq.n	8005f0c <HAL_TIM_Base_Init+0x6c>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ece:	d01d      	beq.n	8005f0c <HAL_TIM_Base_Init+0x6c>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a54      	ldr	r2, [pc, #336]	; (8006028 <HAL_TIM_Base_Init+0x188>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d018      	beq.n	8005f0c <HAL_TIM_Base_Init+0x6c>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a53      	ldr	r2, [pc, #332]	; (800602c <HAL_TIM_Base_Init+0x18c>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d013      	beq.n	8005f0c <HAL_TIM_Base_Init+0x6c>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a51      	ldr	r2, [pc, #324]	; (8006030 <HAL_TIM_Base_Init+0x190>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d00e      	beq.n	8005f0c <HAL_TIM_Base_Init+0x6c>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a50      	ldr	r2, [pc, #320]	; (8006034 <HAL_TIM_Base_Init+0x194>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d009      	beq.n	8005f0c <HAL_TIM_Base_Init+0x6c>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a4e      	ldr	r2, [pc, #312]	; (8006038 <HAL_TIM_Base_Init+0x198>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d004      	beq.n	8005f0c <HAL_TIM_Base_Init+0x6c>
 8005f02:	f240 1113 	movw	r1, #275	; 0x113
 8005f06:	484d      	ldr	r0, [pc, #308]	; (800603c <HAL_TIM_Base_Init+0x19c>)
 8005f08:	f7fc f8da 	bl	80020c0 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d014      	beq.n	8005f3e <HAL_TIM_Base_Init+0x9e>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	2b10      	cmp	r3, #16
 8005f1a:	d010      	beq.n	8005f3e <HAL_TIM_Base_Init+0x9e>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	2b20      	cmp	r3, #32
 8005f22:	d00c      	beq.n	8005f3e <HAL_TIM_Base_Init+0x9e>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	2b40      	cmp	r3, #64	; 0x40
 8005f2a:	d008      	beq.n	8005f3e <HAL_TIM_Base_Init+0x9e>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	2b60      	cmp	r3, #96	; 0x60
 8005f32:	d004      	beq.n	8005f3e <HAL_TIM_Base_Init+0x9e>
 8005f34:	f44f 718a 	mov.w	r1, #276	; 0x114
 8005f38:	4840      	ldr	r0, [pc, #256]	; (800603c <HAL_TIM_Base_Init+0x19c>)
 8005f3a:	f7fc f8c1 	bl	80020c0 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	691b      	ldr	r3, [r3, #16]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d00e      	beq.n	8005f64 <HAL_TIM_Base_Init+0xc4>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	691b      	ldr	r3, [r3, #16]
 8005f4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f4e:	d009      	beq.n	8005f64 <HAL_TIM_Base_Init+0xc4>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	691b      	ldr	r3, [r3, #16]
 8005f54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f58:	d004      	beq.n	8005f64 <HAL_TIM_Base_Init+0xc4>
 8005f5a:	f240 1115 	movw	r1, #277	; 0x115
 8005f5e:	4837      	ldr	r0, [pc, #220]	; (800603c <HAL_TIM_Base_Init+0x19c>)
 8005f60:	f7fc f8ae 	bl	80020c0 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	699b      	ldr	r3, [r3, #24]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d008      	beq.n	8005f7e <HAL_TIM_Base_Init+0xde>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	699b      	ldr	r3, [r3, #24]
 8005f70:	2b80      	cmp	r3, #128	; 0x80
 8005f72:	d004      	beq.n	8005f7e <HAL_TIM_Base_Init+0xde>
 8005f74:	f44f 718b 	mov.w	r1, #278	; 0x116
 8005f78:	4830      	ldr	r0, [pc, #192]	; (800603c <HAL_TIM_Base_Init+0x19c>)
 8005f7a:	f7fc f8a1 	bl	80020c0 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f84:	b2db      	uxtb	r3, r3
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d111      	bne.n	8005fae <HAL_TIM_Base_Init+0x10e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f001 ffc0 	bl	8007f18 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d102      	bne.n	8005fa6 <HAL_TIM_Base_Init+0x106>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	4a27      	ldr	r2, [pc, #156]	; (8006040 <HAL_TIM_Base_Init+0x1a0>)
 8005fa4:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2202      	movs	r2, #2
 8005fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	3304      	adds	r3, #4
 8005fbe:	4619      	mov	r1, r3
 8005fc0:	4610      	mov	r0, r2
 8005fc2:	f001 fbff 	bl	80077c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2201      	movs	r2, #1
 8005fca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2201      	movs	r2, #1
 8005fda:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2201      	movs	r2, #1
 8005fea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2201      	movs	r2, #1
 8006002:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2201      	movs	r2, #1
 800600a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2201      	movs	r2, #1
 8006012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006016:	2300      	movs	r3, #0
}
 8006018:	4618      	mov	r0, r3
 800601a:	3708      	adds	r7, #8
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}
 8006020:	40012c00 	.word	0x40012c00
 8006024:	40013400 	.word	0x40013400
 8006028:	40000400 	.word	0x40000400
 800602c:	40000800 	.word	0x40000800
 8006030:	40000c00 	.word	0x40000c00
 8006034:	40001000 	.word	0x40001000
 8006038:	40001400 	.word	0x40001400
 800603c:	0800f064 	.word	0x0800f064
 8006040:	08002209 	.word	0x08002209

08006044 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b084      	sub	sp, #16
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a39      	ldr	r2, [pc, #228]	; (8006138 <HAL_TIM_Base_Start+0xf4>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d027      	beq.n	80060a6 <HAL_TIM_Base_Start+0x62>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a38      	ldr	r2, [pc, #224]	; (800613c <HAL_TIM_Base_Start+0xf8>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d022      	beq.n	80060a6 <HAL_TIM_Base_Start+0x62>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006068:	d01d      	beq.n	80060a6 <HAL_TIM_Base_Start+0x62>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a34      	ldr	r2, [pc, #208]	; (8006140 <HAL_TIM_Base_Start+0xfc>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d018      	beq.n	80060a6 <HAL_TIM_Base_Start+0x62>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a32      	ldr	r2, [pc, #200]	; (8006144 <HAL_TIM_Base_Start+0x100>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d013      	beq.n	80060a6 <HAL_TIM_Base_Start+0x62>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a31      	ldr	r2, [pc, #196]	; (8006148 <HAL_TIM_Base_Start+0x104>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d00e      	beq.n	80060a6 <HAL_TIM_Base_Start+0x62>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a2f      	ldr	r2, [pc, #188]	; (800614c <HAL_TIM_Base_Start+0x108>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d009      	beq.n	80060a6 <HAL_TIM_Base_Start+0x62>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a2e      	ldr	r2, [pc, #184]	; (8006150 <HAL_TIM_Base_Start+0x10c>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d004      	beq.n	80060a6 <HAL_TIM_Base_Start+0x62>
 800609c:	f44f 71ca 	mov.w	r1, #404	; 0x194
 80060a0:	482c      	ldr	r0, [pc, #176]	; (8006154 <HAL_TIM_Base_Start+0x110>)
 80060a2:	f7fc f80d 	bl	80020c0 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060ac:	b2db      	uxtb	r3, r3
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	d001      	beq.n	80060b6 <HAL_TIM_Base_Start+0x72>
  {
    return HAL_ERROR;
 80060b2:	2301      	movs	r3, #1
 80060b4:	e03c      	b.n	8006130 <HAL_TIM_Base_Start+0xec>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2202      	movs	r2, #2
 80060ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a1d      	ldr	r2, [pc, #116]	; (8006138 <HAL_TIM_Base_Start+0xf4>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d018      	beq.n	80060fa <HAL_TIM_Base_Start+0xb6>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a1b      	ldr	r2, [pc, #108]	; (800613c <HAL_TIM_Base_Start+0xf8>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d013      	beq.n	80060fa <HAL_TIM_Base_Start+0xb6>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060da:	d00e      	beq.n	80060fa <HAL_TIM_Base_Start+0xb6>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a17      	ldr	r2, [pc, #92]	; (8006140 <HAL_TIM_Base_Start+0xfc>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d009      	beq.n	80060fa <HAL_TIM_Base_Start+0xb6>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a16      	ldr	r2, [pc, #88]	; (8006144 <HAL_TIM_Base_Start+0x100>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d004      	beq.n	80060fa <HAL_TIM_Base_Start+0xb6>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a14      	ldr	r2, [pc, #80]	; (8006148 <HAL_TIM_Base_Start+0x104>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d111      	bne.n	800611e <HAL_TIM_Base_Start+0xda>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	f003 0307 	and.w	r3, r3, #7
 8006104:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2b06      	cmp	r3, #6
 800610a:	d010      	beq.n	800612e <HAL_TIM_Base_Start+0xea>
    {
      __HAL_TIM_ENABLE(htim);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	681a      	ldr	r2, [r3, #0]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f042 0201 	orr.w	r2, r2, #1
 800611a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800611c:	e007      	b.n	800612e <HAL_TIM_Base_Start+0xea>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f042 0201 	orr.w	r2, r2, #1
 800612c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800612e:	2300      	movs	r3, #0
}
 8006130:	4618      	mov	r0, r3
 8006132:	3710      	adds	r7, #16
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}
 8006138:	40012c00 	.word	0x40012c00
 800613c:	40013400 	.word	0x40013400
 8006140:	40000400 	.word	0x40000400
 8006144:	40000800 	.word	0x40000800
 8006148:	40000c00 	.word	0x40000c00
 800614c:	40001000 	.word	0x40001000
 8006150:	40001400 	.word	0x40001400
 8006154:	0800f064 	.word	0x0800f064

08006158 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b084      	sub	sp, #16
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a3d      	ldr	r2, [pc, #244]	; (800625c <HAL_TIM_Base_Start_IT+0x104>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d027      	beq.n	80061ba <HAL_TIM_Base_Start_IT+0x62>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a3c      	ldr	r2, [pc, #240]	; (8006260 <HAL_TIM_Base_Start_IT+0x108>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d022      	beq.n	80061ba <HAL_TIM_Base_Start_IT+0x62>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800617c:	d01d      	beq.n	80061ba <HAL_TIM_Base_Start_IT+0x62>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a38      	ldr	r2, [pc, #224]	; (8006264 <HAL_TIM_Base_Start_IT+0x10c>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d018      	beq.n	80061ba <HAL_TIM_Base_Start_IT+0x62>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a36      	ldr	r2, [pc, #216]	; (8006268 <HAL_TIM_Base_Start_IT+0x110>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d013      	beq.n	80061ba <HAL_TIM_Base_Start_IT+0x62>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a35      	ldr	r2, [pc, #212]	; (800626c <HAL_TIM_Base_Start_IT+0x114>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d00e      	beq.n	80061ba <HAL_TIM_Base_Start_IT+0x62>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a33      	ldr	r2, [pc, #204]	; (8006270 <HAL_TIM_Base_Start_IT+0x118>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d009      	beq.n	80061ba <HAL_TIM_Base_Start_IT+0x62>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a32      	ldr	r2, [pc, #200]	; (8006274 <HAL_TIM_Base_Start_IT+0x11c>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d004      	beq.n	80061ba <HAL_TIM_Base_Start_IT+0x62>
 80061b0:	f240 11cf 	movw	r1, #463	; 0x1cf
 80061b4:	4830      	ldr	r0, [pc, #192]	; (8006278 <HAL_TIM_Base_Start_IT+0x120>)
 80061b6:	f7fb ff83 	bl	80020c0 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	2b01      	cmp	r3, #1
 80061c4:	d001      	beq.n	80061ca <HAL_TIM_Base_Start_IT+0x72>
  {
    return HAL_ERROR;
 80061c6:	2301      	movs	r3, #1
 80061c8:	e044      	b.n	8006254 <HAL_TIM_Base_Start_IT+0xfc>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2202      	movs	r2, #2
 80061ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	68da      	ldr	r2, [r3, #12]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f042 0201 	orr.w	r2, r2, #1
 80061e0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a1d      	ldr	r2, [pc, #116]	; (800625c <HAL_TIM_Base_Start_IT+0x104>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d018      	beq.n	800621e <HAL_TIM_Base_Start_IT+0xc6>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a1b      	ldr	r2, [pc, #108]	; (8006260 <HAL_TIM_Base_Start_IT+0x108>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d013      	beq.n	800621e <HAL_TIM_Base_Start_IT+0xc6>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061fe:	d00e      	beq.n	800621e <HAL_TIM_Base_Start_IT+0xc6>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a17      	ldr	r2, [pc, #92]	; (8006264 <HAL_TIM_Base_Start_IT+0x10c>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d009      	beq.n	800621e <HAL_TIM_Base_Start_IT+0xc6>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a16      	ldr	r2, [pc, #88]	; (8006268 <HAL_TIM_Base_Start_IT+0x110>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d004      	beq.n	800621e <HAL_TIM_Base_Start_IT+0xc6>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a14      	ldr	r2, [pc, #80]	; (800626c <HAL_TIM_Base_Start_IT+0x114>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d111      	bne.n	8006242 <HAL_TIM_Base_Start_IT+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	f003 0307 	and.w	r3, r3, #7
 8006228:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2b06      	cmp	r3, #6
 800622e:	d010      	beq.n	8006252 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	681a      	ldr	r2, [r3, #0]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f042 0201 	orr.w	r2, r2, #1
 800623e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006240:	e007      	b.n	8006252 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	681a      	ldr	r2, [r3, #0]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f042 0201 	orr.w	r2, r2, #1
 8006250:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006252:	2300      	movs	r3, #0
}
 8006254:	4618      	mov	r0, r3
 8006256:	3710      	adds	r7, #16
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}
 800625c:	40012c00 	.word	0x40012c00
 8006260:	40013400 	.word	0x40013400
 8006264:	40000400 	.word	0x40000400
 8006268:	40000800 	.word	0x40000800
 800626c:	40000c00 	.word	0x40000c00
 8006270:	40001000 	.word	0x40001000
 8006274:	40001400 	.word	0x40001400
 8006278:	0800f064 	.word	0x0800f064

0800627c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b082      	sub	sp, #8
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d101      	bne.n	800628e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800628a:	2301      	movs	r3, #1
 800628c:	e0b2      	b.n	80063f4 <HAL_TIM_PWM_Init+0x178>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a5a      	ldr	r2, [pc, #360]	; (80063fc <HAL_TIM_PWM_Init+0x180>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d027      	beq.n	80062e8 <HAL_TIM_PWM_Init+0x6c>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a58      	ldr	r2, [pc, #352]	; (8006400 <HAL_TIM_PWM_Init+0x184>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d022      	beq.n	80062e8 <HAL_TIM_PWM_Init+0x6c>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062aa:	d01d      	beq.n	80062e8 <HAL_TIM_PWM_Init+0x6c>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a54      	ldr	r2, [pc, #336]	; (8006404 <HAL_TIM_PWM_Init+0x188>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d018      	beq.n	80062e8 <HAL_TIM_PWM_Init+0x6c>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a53      	ldr	r2, [pc, #332]	; (8006408 <HAL_TIM_PWM_Init+0x18c>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d013      	beq.n	80062e8 <HAL_TIM_PWM_Init+0x6c>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a51      	ldr	r2, [pc, #324]	; (800640c <HAL_TIM_PWM_Init+0x190>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d00e      	beq.n	80062e8 <HAL_TIM_PWM_Init+0x6c>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a50      	ldr	r2, [pc, #320]	; (8006410 <HAL_TIM_PWM_Init+0x194>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d009      	beq.n	80062e8 <HAL_TIM_PWM_Init+0x6c>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a4e      	ldr	r2, [pc, #312]	; (8006414 <HAL_TIM_PWM_Init+0x198>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d004      	beq.n	80062e8 <HAL_TIM_PWM_Init+0x6c>
 80062de:	f240 5113 	movw	r1, #1299	; 0x513
 80062e2:	484d      	ldr	r0, [pc, #308]	; (8006418 <HAL_TIM_PWM_Init+0x19c>)
 80062e4:	f7fb feec 	bl	80020c0 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d014      	beq.n	800631a <HAL_TIM_PWM_Init+0x9e>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	2b10      	cmp	r3, #16
 80062f6:	d010      	beq.n	800631a <HAL_TIM_PWM_Init+0x9e>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	2b20      	cmp	r3, #32
 80062fe:	d00c      	beq.n	800631a <HAL_TIM_PWM_Init+0x9e>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	2b40      	cmp	r3, #64	; 0x40
 8006306:	d008      	beq.n	800631a <HAL_TIM_PWM_Init+0x9e>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	689b      	ldr	r3, [r3, #8]
 800630c:	2b60      	cmp	r3, #96	; 0x60
 800630e:	d004      	beq.n	800631a <HAL_TIM_PWM_Init+0x9e>
 8006310:	f240 5114 	movw	r1, #1300	; 0x514
 8006314:	4840      	ldr	r0, [pc, #256]	; (8006418 <HAL_TIM_PWM_Init+0x19c>)
 8006316:	f7fb fed3 	bl	80020c0 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	691b      	ldr	r3, [r3, #16]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d00e      	beq.n	8006340 <HAL_TIM_PWM_Init+0xc4>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	691b      	ldr	r3, [r3, #16]
 8006326:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800632a:	d009      	beq.n	8006340 <HAL_TIM_PWM_Init+0xc4>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	691b      	ldr	r3, [r3, #16]
 8006330:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006334:	d004      	beq.n	8006340 <HAL_TIM_PWM_Init+0xc4>
 8006336:	f240 5115 	movw	r1, #1301	; 0x515
 800633a:	4837      	ldr	r0, [pc, #220]	; (8006418 <HAL_TIM_PWM_Init+0x19c>)
 800633c:	f7fb fec0 	bl	80020c0 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	699b      	ldr	r3, [r3, #24]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d008      	beq.n	800635a <HAL_TIM_PWM_Init+0xde>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	699b      	ldr	r3, [r3, #24]
 800634c:	2b80      	cmp	r3, #128	; 0x80
 800634e:	d004      	beq.n	800635a <HAL_TIM_PWM_Init+0xde>
 8006350:	f240 5116 	movw	r1, #1302	; 0x516
 8006354:	4830      	ldr	r0, [pc, #192]	; (8006418 <HAL_TIM_PWM_Init+0x19c>)
 8006356:	f7fb feb3 	bl	80020c0 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006360:	b2db      	uxtb	r3, r3
 8006362:	2b00      	cmp	r3, #0
 8006364:	d111      	bne.n	800638a <HAL_TIM_PWM_Init+0x10e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2200      	movs	r2, #0
 800636a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f001 fdd2 	bl	8007f18 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006378:	2b00      	cmp	r3, #0
 800637a:	d102      	bne.n	8006382 <HAL_TIM_PWM_Init+0x106>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	4a27      	ldr	r2, [pc, #156]	; (800641c <HAL_TIM_PWM_Init+0x1a0>)
 8006380:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2202      	movs	r2, #2
 800638e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681a      	ldr	r2, [r3, #0]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	3304      	adds	r3, #4
 800639a:	4619      	mov	r1, r3
 800639c:	4610      	mov	r0, r2
 800639e:	f001 fa11 	bl	80077c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2201      	movs	r2, #1
 80063a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2201      	movs	r2, #1
 80063ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2201      	movs	r2, #1
 80063b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2201      	movs	r2, #1
 80063be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2201      	movs	r2, #1
 80063c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2201      	movs	r2, #1
 80063ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2201      	movs	r2, #1
 80063d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2201      	movs	r2, #1
 80063de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2201      	movs	r2, #1
 80063e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2201      	movs	r2, #1
 80063ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063f2:	2300      	movs	r3, #0
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3708      	adds	r7, #8
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}
 80063fc:	40012c00 	.word	0x40012c00
 8006400:	40013400 	.word	0x40013400
 8006404:	40000400 	.word	0x40000400
 8006408:	40000800 	.word	0x40000800
 800640c:	40000c00 	.word	0x40000c00
 8006410:	40001000 	.word	0x40001000
 8006414:	40001400 	.word	0x40001400
 8006418:	0800f064 	.word	0x0800f064
 800641c:	08006421 	.word	0x08006421

08006420 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006420:	b480      	push	{r7}
 8006422:	b083      	sub	sp, #12
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006428:	bf00      	nop
 800642a:	370c      	adds	r7, #12
 800642c:	46bd      	mov	sp, r7
 800642e:	bc80      	pop	{r7}
 8006430:	4770      	bx	lr
	...

08006434 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b084      	sub	sp, #16
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a8a      	ldr	r2, [pc, #552]	; (800666c <HAL_TIM_PWM_Start+0x238>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d10b      	bne.n	8006460 <HAL_TIM_PWM_Start+0x2c>
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d062      	beq.n	8006514 <HAL_TIM_PWM_Start+0xe0>
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	2b04      	cmp	r3, #4
 8006452:	d05f      	beq.n	8006514 <HAL_TIM_PWM_Start+0xe0>
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	2b08      	cmp	r3, #8
 8006458:	d05c      	beq.n	8006514 <HAL_TIM_PWM_Start+0xe0>
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	2b0c      	cmp	r3, #12
 800645e:	d059      	beq.n	8006514 <HAL_TIM_PWM_Start+0xe0>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a82      	ldr	r2, [pc, #520]	; (8006670 <HAL_TIM_PWM_Start+0x23c>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d10b      	bne.n	8006482 <HAL_TIM_PWM_Start+0x4e>
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d051      	beq.n	8006514 <HAL_TIM_PWM_Start+0xe0>
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	2b04      	cmp	r3, #4
 8006474:	d04e      	beq.n	8006514 <HAL_TIM_PWM_Start+0xe0>
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	2b08      	cmp	r3, #8
 800647a:	d04b      	beq.n	8006514 <HAL_TIM_PWM_Start+0xe0>
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	2b0c      	cmp	r3, #12
 8006480:	d048      	beq.n	8006514 <HAL_TIM_PWM_Start+0xe0>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800648a:	d10b      	bne.n	80064a4 <HAL_TIM_PWM_Start+0x70>
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d040      	beq.n	8006514 <HAL_TIM_PWM_Start+0xe0>
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	2b04      	cmp	r3, #4
 8006496:	d03d      	beq.n	8006514 <HAL_TIM_PWM_Start+0xe0>
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	2b08      	cmp	r3, #8
 800649c:	d03a      	beq.n	8006514 <HAL_TIM_PWM_Start+0xe0>
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	2b0c      	cmp	r3, #12
 80064a2:	d037      	beq.n	8006514 <HAL_TIM_PWM_Start+0xe0>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a72      	ldr	r2, [pc, #456]	; (8006674 <HAL_TIM_PWM_Start+0x240>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d10b      	bne.n	80064c6 <HAL_TIM_PWM_Start+0x92>
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d02f      	beq.n	8006514 <HAL_TIM_PWM_Start+0xe0>
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	2b04      	cmp	r3, #4
 80064b8:	d02c      	beq.n	8006514 <HAL_TIM_PWM_Start+0xe0>
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	2b08      	cmp	r3, #8
 80064be:	d029      	beq.n	8006514 <HAL_TIM_PWM_Start+0xe0>
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	2b0c      	cmp	r3, #12
 80064c4:	d026      	beq.n	8006514 <HAL_TIM_PWM_Start+0xe0>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a6b      	ldr	r2, [pc, #428]	; (8006678 <HAL_TIM_PWM_Start+0x244>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d10b      	bne.n	80064e8 <HAL_TIM_PWM_Start+0xb4>
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d01e      	beq.n	8006514 <HAL_TIM_PWM_Start+0xe0>
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	2b04      	cmp	r3, #4
 80064da:	d01b      	beq.n	8006514 <HAL_TIM_PWM_Start+0xe0>
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	2b08      	cmp	r3, #8
 80064e0:	d018      	beq.n	8006514 <HAL_TIM_PWM_Start+0xe0>
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	2b0c      	cmp	r3, #12
 80064e6:	d015      	beq.n	8006514 <HAL_TIM_PWM_Start+0xe0>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a63      	ldr	r2, [pc, #396]	; (800667c <HAL_TIM_PWM_Start+0x248>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d10b      	bne.n	800650a <HAL_TIM_PWM_Start+0xd6>
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d00d      	beq.n	8006514 <HAL_TIM_PWM_Start+0xe0>
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	2b04      	cmp	r3, #4
 80064fc:	d00a      	beq.n	8006514 <HAL_TIM_PWM_Start+0xe0>
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	2b08      	cmp	r3, #8
 8006502:	d007      	beq.n	8006514 <HAL_TIM_PWM_Start+0xe0>
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	2b0c      	cmp	r3, #12
 8006508:	d004      	beq.n	8006514 <HAL_TIM_PWM_Start+0xe0>
 800650a:	f240 5199 	movw	r1, #1433	; 0x599
 800650e:	485c      	ldr	r0, [pc, #368]	; (8006680 <HAL_TIM_PWM_Start+0x24c>)
 8006510:	f7fb fdd6 	bl	80020c0 <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d109      	bne.n	800652e <HAL_TIM_PWM_Start+0xfa>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006520:	b2db      	uxtb	r3, r3
 8006522:	2b01      	cmp	r3, #1
 8006524:	bf14      	ite	ne
 8006526:	2301      	movne	r3, #1
 8006528:	2300      	moveq	r3, #0
 800652a:	b2db      	uxtb	r3, r3
 800652c:	e022      	b.n	8006574 <HAL_TIM_PWM_Start+0x140>
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	2b04      	cmp	r3, #4
 8006532:	d109      	bne.n	8006548 <HAL_TIM_PWM_Start+0x114>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800653a:	b2db      	uxtb	r3, r3
 800653c:	2b01      	cmp	r3, #1
 800653e:	bf14      	ite	ne
 8006540:	2301      	movne	r3, #1
 8006542:	2300      	moveq	r3, #0
 8006544:	b2db      	uxtb	r3, r3
 8006546:	e015      	b.n	8006574 <HAL_TIM_PWM_Start+0x140>
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	2b08      	cmp	r3, #8
 800654c:	d109      	bne.n	8006562 <HAL_TIM_PWM_Start+0x12e>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006554:	b2db      	uxtb	r3, r3
 8006556:	2b01      	cmp	r3, #1
 8006558:	bf14      	ite	ne
 800655a:	2301      	movne	r3, #1
 800655c:	2300      	moveq	r3, #0
 800655e:	b2db      	uxtb	r3, r3
 8006560:	e008      	b.n	8006574 <HAL_TIM_PWM_Start+0x140>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006568:	b2db      	uxtb	r3, r3
 800656a:	2b01      	cmp	r3, #1
 800656c:	bf14      	ite	ne
 800656e:	2301      	movne	r3, #1
 8006570:	2300      	moveq	r3, #0
 8006572:	b2db      	uxtb	r3, r3
 8006574:	2b00      	cmp	r3, #0
 8006576:	d001      	beq.n	800657c <HAL_TIM_PWM_Start+0x148>
  {
    return HAL_ERROR;
 8006578:	2301      	movs	r3, #1
 800657a:	e072      	b.n	8006662 <HAL_TIM_PWM_Start+0x22e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d104      	bne.n	800658c <HAL_TIM_PWM_Start+0x158>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2202      	movs	r2, #2
 8006586:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800658a:	e013      	b.n	80065b4 <HAL_TIM_PWM_Start+0x180>
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	2b04      	cmp	r3, #4
 8006590:	d104      	bne.n	800659c <HAL_TIM_PWM_Start+0x168>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2202      	movs	r2, #2
 8006596:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800659a:	e00b      	b.n	80065b4 <HAL_TIM_PWM_Start+0x180>
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	2b08      	cmp	r3, #8
 80065a0:	d104      	bne.n	80065ac <HAL_TIM_PWM_Start+0x178>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2202      	movs	r2, #2
 80065a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80065aa:	e003      	b.n	80065b4 <HAL_TIM_PWM_Start+0x180>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2202      	movs	r2, #2
 80065b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	2201      	movs	r2, #1
 80065ba:	6839      	ldr	r1, [r7, #0]
 80065bc:	4618      	mov	r0, r3
 80065be:	f001 fc4b 	bl	8007e58 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a29      	ldr	r2, [pc, #164]	; (800666c <HAL_TIM_PWM_Start+0x238>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d004      	beq.n	80065d6 <HAL_TIM_PWM_Start+0x1a2>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a27      	ldr	r2, [pc, #156]	; (8006670 <HAL_TIM_PWM_Start+0x23c>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d101      	bne.n	80065da <HAL_TIM_PWM_Start+0x1a6>
 80065d6:	2301      	movs	r3, #1
 80065d8:	e000      	b.n	80065dc <HAL_TIM_PWM_Start+0x1a8>
 80065da:	2300      	movs	r3, #0
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d007      	beq.n	80065f0 <HAL_TIM_PWM_Start+0x1bc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80065ee:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a1d      	ldr	r2, [pc, #116]	; (800666c <HAL_TIM_PWM_Start+0x238>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d018      	beq.n	800662c <HAL_TIM_PWM_Start+0x1f8>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a1c      	ldr	r2, [pc, #112]	; (8006670 <HAL_TIM_PWM_Start+0x23c>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d013      	beq.n	800662c <HAL_TIM_PWM_Start+0x1f8>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800660c:	d00e      	beq.n	800662c <HAL_TIM_PWM_Start+0x1f8>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a18      	ldr	r2, [pc, #96]	; (8006674 <HAL_TIM_PWM_Start+0x240>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d009      	beq.n	800662c <HAL_TIM_PWM_Start+0x1f8>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a16      	ldr	r2, [pc, #88]	; (8006678 <HAL_TIM_PWM_Start+0x244>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d004      	beq.n	800662c <HAL_TIM_PWM_Start+0x1f8>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a15      	ldr	r2, [pc, #84]	; (800667c <HAL_TIM_PWM_Start+0x248>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d111      	bne.n	8006650 <HAL_TIM_PWM_Start+0x21c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	f003 0307 	and.w	r3, r3, #7
 8006636:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2b06      	cmp	r3, #6
 800663c:	d010      	beq.n	8006660 <HAL_TIM_PWM_Start+0x22c>
    {
      __HAL_TIM_ENABLE(htim);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f042 0201 	orr.w	r2, r2, #1
 800664c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800664e:	e007      	b.n	8006660 <HAL_TIM_PWM_Start+0x22c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	681a      	ldr	r2, [r3, #0]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f042 0201 	orr.w	r2, r2, #1
 800665e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006660:	2300      	movs	r3, #0
}
 8006662:	4618      	mov	r0, r3
 8006664:	3710      	adds	r7, #16
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}
 800666a:	bf00      	nop
 800666c:	40012c00 	.word	0x40012c00
 8006670:	40013400 	.word	0x40013400
 8006674:	40000400 	.word	0x40000400
 8006678:	40000800 	.word	0x40000800
 800667c:	40000c00 	.word	0x40000c00
 8006680:	0800f064 	.word	0x0800f064

08006684 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b086      	sub	sp, #24
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d101      	bne.n	8006698 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006694:	2301      	movs	r3, #1
 8006696:	e192      	b.n	80069be <HAL_TIM_Encoder_Init+0x33a>
  }

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a7d      	ldr	r2, [pc, #500]	; (8006894 <HAL_TIM_Encoder_Init+0x210>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d01d      	beq.n	80066de <HAL_TIM_Encoder_Init+0x5a>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a7c      	ldr	r2, [pc, #496]	; (8006898 <HAL_TIM_Encoder_Init+0x214>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d018      	beq.n	80066de <HAL_TIM_Encoder_Init+0x5a>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066b4:	d013      	beq.n	80066de <HAL_TIM_Encoder_Init+0x5a>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a78      	ldr	r2, [pc, #480]	; (800689c <HAL_TIM_Encoder_Init+0x218>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d00e      	beq.n	80066de <HAL_TIM_Encoder_Init+0x5a>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a76      	ldr	r2, [pc, #472]	; (80068a0 <HAL_TIM_Encoder_Init+0x21c>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d009      	beq.n	80066de <HAL_TIM_Encoder_Init+0x5a>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a75      	ldr	r2, [pc, #468]	; (80068a4 <HAL_TIM_Encoder_Init+0x220>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d004      	beq.n	80066de <HAL_TIM_Encoder_Init+0x5a>
 80066d4:	f640 318e 	movw	r1, #2958	; 0xb8e
 80066d8:	4873      	ldr	r0, [pc, #460]	; (80068a8 <HAL_TIM_Encoder_Init+0x224>)
 80066da:	f7fb fcf1 	bl	80020c0 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	689b      	ldr	r3, [r3, #8]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d014      	beq.n	8006710 <HAL_TIM_Encoder_Init+0x8c>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	2b10      	cmp	r3, #16
 80066ec:	d010      	beq.n	8006710 <HAL_TIM_Encoder_Init+0x8c>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	2b20      	cmp	r3, #32
 80066f4:	d00c      	beq.n	8006710 <HAL_TIM_Encoder_Init+0x8c>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	689b      	ldr	r3, [r3, #8]
 80066fa:	2b40      	cmp	r3, #64	; 0x40
 80066fc:	d008      	beq.n	8006710 <HAL_TIM_Encoder_Init+0x8c>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	689b      	ldr	r3, [r3, #8]
 8006702:	2b60      	cmp	r3, #96	; 0x60
 8006704:	d004      	beq.n	8006710 <HAL_TIM_Encoder_Init+0x8c>
 8006706:	f640 318f 	movw	r1, #2959	; 0xb8f
 800670a:	4867      	ldr	r0, [pc, #412]	; (80068a8 <HAL_TIM_Encoder_Init+0x224>)
 800670c:	f7fb fcd8 	bl	80020c0 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	691b      	ldr	r3, [r3, #16]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d00e      	beq.n	8006736 <HAL_TIM_Encoder_Init+0xb2>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	691b      	ldr	r3, [r3, #16]
 800671c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006720:	d009      	beq.n	8006736 <HAL_TIM_Encoder_Init+0xb2>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	691b      	ldr	r3, [r3, #16]
 8006726:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800672a:	d004      	beq.n	8006736 <HAL_TIM_Encoder_Init+0xb2>
 800672c:	f44f 6139 	mov.w	r1, #2960	; 0xb90
 8006730:	485d      	ldr	r0, [pc, #372]	; (80068a8 <HAL_TIM_Encoder_Init+0x224>)
 8006732:	f7fb fcc5 	bl	80020c0 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	699b      	ldr	r3, [r3, #24]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d008      	beq.n	8006750 <HAL_TIM_Encoder_Init+0xcc>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	699b      	ldr	r3, [r3, #24]
 8006742:	2b80      	cmp	r3, #128	; 0x80
 8006744:	d004      	beq.n	8006750 <HAL_TIM_Encoder_Init+0xcc>
 8006746:	f640 3191 	movw	r1, #2961	; 0xb91
 800674a:	4857      	ldr	r0, [pc, #348]	; (80068a8 <HAL_TIM_Encoder_Init+0x224>)
 800674c:	f7fb fcb8 	bl	80020c0 <assert_failed>
  assert_param(IS_TIM_ENCODER_MODE(sConfig->EncoderMode));
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	2b01      	cmp	r3, #1
 8006756:	d00c      	beq.n	8006772 <HAL_TIM_Encoder_Init+0xee>
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	2b02      	cmp	r3, #2
 800675e:	d008      	beq.n	8006772 <HAL_TIM_Encoder_Init+0xee>
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	2b03      	cmp	r3, #3
 8006766:	d004      	beq.n	8006772 <HAL_TIM_Encoder_Init+0xee>
 8006768:	f640 3192 	movw	r1, #2962	; 0xb92
 800676c:	484e      	ldr	r0, [pc, #312]	; (80068a8 <HAL_TIM_Encoder_Init+0x224>)
 800676e:	f7fb fca7 	bl	80020c0 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC1Selection));
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	2b01      	cmp	r3, #1
 8006778:	d00c      	beq.n	8006794 <HAL_TIM_Encoder_Init+0x110>
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	689b      	ldr	r3, [r3, #8]
 800677e:	2b02      	cmp	r3, #2
 8006780:	d008      	beq.n	8006794 <HAL_TIM_Encoder_Init+0x110>
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	689b      	ldr	r3, [r3, #8]
 8006786:	2b03      	cmp	r3, #3
 8006788:	d004      	beq.n	8006794 <HAL_TIM_Encoder_Init+0x110>
 800678a:	f640 3193 	movw	r1, #2963	; 0xb93
 800678e:	4846      	ldr	r0, [pc, #280]	; (80068a8 <HAL_TIM_Encoder_Init+0x224>)
 8006790:	f7fb fc96 	bl	80020c0 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC2Selection));
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	699b      	ldr	r3, [r3, #24]
 8006798:	2b01      	cmp	r3, #1
 800679a:	d00c      	beq.n	80067b6 <HAL_TIM_Encoder_Init+0x132>
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	699b      	ldr	r3, [r3, #24]
 80067a0:	2b02      	cmp	r3, #2
 80067a2:	d008      	beq.n	80067b6 <HAL_TIM_Encoder_Init+0x132>
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	699b      	ldr	r3, [r3, #24]
 80067a8:	2b03      	cmp	r3, #3
 80067aa:	d004      	beq.n	80067b6 <HAL_TIM_Encoder_Init+0x132>
 80067ac:	f640 3194 	movw	r1, #2964	; 0xb94
 80067b0:	483d      	ldr	r0, [pc, #244]	; (80068a8 <HAL_TIM_Encoder_Init+0x224>)
 80067b2:	f7fb fc85 	bl	80020c0 <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC1Polarity));
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d008      	beq.n	80067d0 <HAL_TIM_Encoder_Init+0x14c>
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	2b02      	cmp	r3, #2
 80067c4:	d004      	beq.n	80067d0 <HAL_TIM_Encoder_Init+0x14c>
 80067c6:	f640 3195 	movw	r1, #2965	; 0xb95
 80067ca:	4837      	ldr	r0, [pc, #220]	; (80068a8 <HAL_TIM_Encoder_Init+0x224>)
 80067cc:	f7fb fc78 	bl	80020c0 <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC2Polarity));
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	695b      	ldr	r3, [r3, #20]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d008      	beq.n	80067ea <HAL_TIM_Encoder_Init+0x166>
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	695b      	ldr	r3, [r3, #20]
 80067dc:	2b02      	cmp	r3, #2
 80067de:	d004      	beq.n	80067ea <HAL_TIM_Encoder_Init+0x166>
 80067e0:	f640 3196 	movw	r1, #2966	; 0xb96
 80067e4:	4830      	ldr	r0, [pc, #192]	; (80068a8 <HAL_TIM_Encoder_Init+0x224>)
 80067e6:	f7fb fc6b 	bl	80020c0 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	68db      	ldr	r3, [r3, #12]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d010      	beq.n	8006814 <HAL_TIM_Encoder_Init+0x190>
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	68db      	ldr	r3, [r3, #12]
 80067f6:	2b04      	cmp	r3, #4
 80067f8:	d00c      	beq.n	8006814 <HAL_TIM_Encoder_Init+0x190>
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	68db      	ldr	r3, [r3, #12]
 80067fe:	2b08      	cmp	r3, #8
 8006800:	d008      	beq.n	8006814 <HAL_TIM_Encoder_Init+0x190>
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	68db      	ldr	r3, [r3, #12]
 8006806:	2b0c      	cmp	r3, #12
 8006808:	d004      	beq.n	8006814 <HAL_TIM_Encoder_Init+0x190>
 800680a:	f640 3197 	movw	r1, #2967	; 0xb97
 800680e:	4826      	ldr	r0, [pc, #152]	; (80068a8 <HAL_TIM_Encoder_Init+0x224>)
 8006810:	f7fb fc56 	bl	80020c0 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	69db      	ldr	r3, [r3, #28]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d010      	beq.n	800683e <HAL_TIM_Encoder_Init+0x1ba>
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	69db      	ldr	r3, [r3, #28]
 8006820:	2b04      	cmp	r3, #4
 8006822:	d00c      	beq.n	800683e <HAL_TIM_Encoder_Init+0x1ba>
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	69db      	ldr	r3, [r3, #28]
 8006828:	2b08      	cmp	r3, #8
 800682a:	d008      	beq.n	800683e <HAL_TIM_Encoder_Init+0x1ba>
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	69db      	ldr	r3, [r3, #28]
 8006830:	2b0c      	cmp	r3, #12
 8006832:	d004      	beq.n	800683e <HAL_TIM_Encoder_Init+0x1ba>
 8006834:	f640 3198 	movw	r1, #2968	; 0xb98
 8006838:	481b      	ldr	r0, [pc, #108]	; (80068a8 <HAL_TIM_Encoder_Init+0x224>)
 800683a:	f7fb fc41 	bl	80020c0 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	691b      	ldr	r3, [r3, #16]
 8006842:	2b0f      	cmp	r3, #15
 8006844:	d904      	bls.n	8006850 <HAL_TIM_Encoder_Init+0x1cc>
 8006846:	f640 3199 	movw	r1, #2969	; 0xb99
 800684a:	4817      	ldr	r0, [pc, #92]	; (80068a8 <HAL_TIM_Encoder_Init+0x224>)
 800684c:	f7fb fc38 	bl	80020c0 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	6a1b      	ldr	r3, [r3, #32]
 8006854:	2b0f      	cmp	r3, #15
 8006856:	d904      	bls.n	8006862 <HAL_TIM_Encoder_Init+0x1de>
 8006858:	f640 319a 	movw	r1, #2970	; 0xb9a
 800685c:	4812      	ldr	r0, [pc, #72]	; (80068a8 <HAL_TIM_Encoder_Init+0x224>)
 800685e:	f7fb fc2f 	bl	80020c0 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006868:	b2db      	uxtb	r3, r3
 800686a:	2b00      	cmp	r3, #0
 800686c:	d120      	bne.n	80068b0 <HAL_TIM_Encoder_Init+0x22c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2200      	movs	r2, #0
 8006872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f001 fb4e 	bl	8007f18 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006880:	2b00      	cmp	r3, #0
 8006882:	d102      	bne.n	800688a <HAL_TIM_Encoder_Init+0x206>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	4a09      	ldr	r2, [pc, #36]	; (80068ac <HAL_TIM_Encoder_Init+0x228>)
 8006888:	671a      	str	r2, [r3, #112]	; 0x70
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	4798      	blx	r3
 8006892:	e00d      	b.n	80068b0 <HAL_TIM_Encoder_Init+0x22c>
 8006894:	40012c00 	.word	0x40012c00
 8006898:	40013400 	.word	0x40013400
 800689c:	40000400 	.word	0x40000400
 80068a0:	40000800 	.word	0x40000800
 80068a4:	40000c00 	.word	0x40000c00
 80068a8:	0800f064 	.word	0x0800f064
 80068ac:	080022cd 	.word	0x080022cd
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2202      	movs	r2, #2
 80068b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	689b      	ldr	r3, [r3, #8]
 80068be:	687a      	ldr	r2, [r7, #4]
 80068c0:	6812      	ldr	r2, [r2, #0]
 80068c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068c6:	f023 0307 	bic.w	r3, r3, #7
 80068ca:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681a      	ldr	r2, [r3, #0]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	3304      	adds	r3, #4
 80068d4:	4619      	mov	r1, r3
 80068d6:	4610      	mov	r0, r2
 80068d8:	f000 ff74 	bl	80077c4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	689b      	ldr	r3, [r3, #8]
 80068e2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	699b      	ldr	r3, [r3, #24]
 80068ea:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	6a1b      	ldr	r3, [r3, #32]
 80068f2:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	697a      	ldr	r2, [r7, #20]
 80068fa:	4313      	orrs	r3, r2
 80068fc:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006904:	f023 0303 	bic.w	r3, r3, #3
 8006908:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	689a      	ldr	r2, [r3, #8]
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	699b      	ldr	r3, [r3, #24]
 8006912:	021b      	lsls	r3, r3, #8
 8006914:	4313      	orrs	r3, r2
 8006916:	693a      	ldr	r2, [r7, #16]
 8006918:	4313      	orrs	r3, r2
 800691a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006922:	f023 030c 	bic.w	r3, r3, #12
 8006926:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800692e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006932:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	68da      	ldr	r2, [r3, #12]
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	69db      	ldr	r3, [r3, #28]
 800693c:	021b      	lsls	r3, r3, #8
 800693e:	4313      	orrs	r3, r2
 8006940:	693a      	ldr	r2, [r7, #16]
 8006942:	4313      	orrs	r3, r2
 8006944:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	691b      	ldr	r3, [r3, #16]
 800694a:	011a      	lsls	r2, r3, #4
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	6a1b      	ldr	r3, [r3, #32]
 8006950:	031b      	lsls	r3, r3, #12
 8006952:	4313      	orrs	r3, r2
 8006954:	693a      	ldr	r2, [r7, #16]
 8006956:	4313      	orrs	r3, r2
 8006958:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006960:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	685a      	ldr	r2, [r3, #4]
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	695b      	ldr	r3, [r3, #20]
 800696a:	011b      	lsls	r3, r3, #4
 800696c:	4313      	orrs	r3, r2
 800696e:	68fa      	ldr	r2, [r7, #12]
 8006970:	4313      	orrs	r3, r2
 8006972:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	697a      	ldr	r2, [r7, #20]
 800697a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	693a      	ldr	r2, [r7, #16]
 8006982:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	68fa      	ldr	r2, [r7, #12]
 800698a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2201      	movs	r2, #1
 8006990:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2201      	movs	r2, #1
 8006998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2201      	movs	r2, #1
 80069a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2201      	movs	r2, #1
 80069a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2201      	movs	r2, #1
 80069b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2201      	movs	r2, #1
 80069b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80069bc:	2300      	movs	r3, #0
}
 80069be:	4618      	mov	r0, r3
 80069c0:	3718      	adds	r7, #24
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}
 80069c6:	bf00      	nop

080069c8 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b084      	sub	sp, #16
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80069d8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80069e0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80069e8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80069f0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a5d      	ldr	r2, [pc, #372]	; (8006b6c <HAL_TIM_Encoder_Start_IT+0x1a4>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d01d      	beq.n	8006a38 <HAL_TIM_Encoder_Start_IT+0x70>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a5b      	ldr	r2, [pc, #364]	; (8006b70 <HAL_TIM_Encoder_Start_IT+0x1a8>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d018      	beq.n	8006a38 <HAL_TIM_Encoder_Start_IT+0x70>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a0e:	d013      	beq.n	8006a38 <HAL_TIM_Encoder_Start_IT+0x70>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a57      	ldr	r2, [pc, #348]	; (8006b74 <HAL_TIM_Encoder_Start_IT+0x1ac>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d00e      	beq.n	8006a38 <HAL_TIM_Encoder_Start_IT+0x70>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a56      	ldr	r2, [pc, #344]	; (8006b78 <HAL_TIM_Encoder_Start_IT+0x1b0>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d009      	beq.n	8006a38 <HAL_TIM_Encoder_Start_IT+0x70>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a54      	ldr	r2, [pc, #336]	; (8006b7c <HAL_TIM_Encoder_Start_IT+0x1b4>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d004      	beq.n	8006a38 <HAL_TIM_Encoder_Start_IT+0x70>
 8006a2e:	f640 41e4 	movw	r1, #3300	; 0xce4
 8006a32:	4853      	ldr	r0, [pc, #332]	; (8006b80 <HAL_TIM_Encoder_Start_IT+0x1b8>)
 8006a34:	f7fb fb44 	bl	80020c0 <assert_failed>

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d110      	bne.n	8006a60 <HAL_TIM_Encoder_Start_IT+0x98>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006a3e:	7bfb      	ldrb	r3, [r7, #15]
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d102      	bne.n	8006a4a <HAL_TIM_Encoder_Start_IT+0x82>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006a44:	7b7b      	ldrb	r3, [r7, #13]
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d001      	beq.n	8006a4e <HAL_TIM_Encoder_Start_IT+0x86>
    {
      return HAL_ERROR;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	e089      	b.n	8006b62 <HAL_TIM_Encoder_Start_IT+0x19a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2202      	movs	r2, #2
 8006a52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2202      	movs	r2, #2
 8006a5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a5e:	e031      	b.n	8006ac4 <HAL_TIM_Encoder_Start_IT+0xfc>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	2b04      	cmp	r3, #4
 8006a64:	d110      	bne.n	8006a88 <HAL_TIM_Encoder_Start_IT+0xc0>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006a66:	7bbb      	ldrb	r3, [r7, #14]
 8006a68:	2b01      	cmp	r3, #1
 8006a6a:	d102      	bne.n	8006a72 <HAL_TIM_Encoder_Start_IT+0xaa>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006a6c:	7b3b      	ldrb	r3, [r7, #12]
 8006a6e:	2b01      	cmp	r3, #1
 8006a70:	d001      	beq.n	8006a76 <HAL_TIM_Encoder_Start_IT+0xae>
    {
      return HAL_ERROR;
 8006a72:	2301      	movs	r3, #1
 8006a74:	e075      	b.n	8006b62 <HAL_TIM_Encoder_Start_IT+0x19a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2202      	movs	r2, #2
 8006a7a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2202      	movs	r2, #2
 8006a82:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006a86:	e01d      	b.n	8006ac4 <HAL_TIM_Encoder_Start_IT+0xfc>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006a88:	7bfb      	ldrb	r3, [r7, #15]
 8006a8a:	2b01      	cmp	r3, #1
 8006a8c:	d108      	bne.n	8006aa0 <HAL_TIM_Encoder_Start_IT+0xd8>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006a8e:	7bbb      	ldrb	r3, [r7, #14]
 8006a90:	2b01      	cmp	r3, #1
 8006a92:	d105      	bne.n	8006aa0 <HAL_TIM_Encoder_Start_IT+0xd8>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006a94:	7b7b      	ldrb	r3, [r7, #13]
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d102      	bne.n	8006aa0 <HAL_TIM_Encoder_Start_IT+0xd8>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006a9a:	7b3b      	ldrb	r3, [r7, #12]
 8006a9c:	2b01      	cmp	r3, #1
 8006a9e:	d001      	beq.n	8006aa4 <HAL_TIM_Encoder_Start_IT+0xdc>
    {
      return HAL_ERROR;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	e05e      	b.n	8006b62 <HAL_TIM_Encoder_Start_IT+0x19a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2202      	movs	r2, #2
 8006aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2202      	movs	r2, #2
 8006ab0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2202      	movs	r2, #2
 8006ab8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2202      	movs	r2, #2
 8006ac0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d003      	beq.n	8006ad2 <HAL_TIM_Encoder_Start_IT+0x10a>
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	2b04      	cmp	r3, #4
 8006ace:	d010      	beq.n	8006af2 <HAL_TIM_Encoder_Start_IT+0x12a>
 8006ad0:	e01f      	b.n	8006b12 <HAL_TIM_Encoder_Start_IT+0x14a>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	2100      	movs	r1, #0
 8006ada:	4618      	mov	r0, r3
 8006adc:	f001 f9bc 	bl	8007e58 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	68da      	ldr	r2, [r3, #12]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f042 0202 	orr.w	r2, r2, #2
 8006aee:	60da      	str	r2, [r3, #12]
      break;
 8006af0:	e02e      	b.n	8006b50 <HAL_TIM_Encoder_Start_IT+0x188>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	2201      	movs	r2, #1
 8006af8:	2104      	movs	r1, #4
 8006afa:	4618      	mov	r0, r3
 8006afc:	f001 f9ac 	bl	8007e58 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	68da      	ldr	r2, [r3, #12]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f042 0204 	orr.w	r2, r2, #4
 8006b0e:	60da      	str	r2, [r3, #12]
      break;
 8006b10:	e01e      	b.n	8006b50 <HAL_TIM_Encoder_Start_IT+0x188>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	2201      	movs	r2, #1
 8006b18:	2100      	movs	r1, #0
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f001 f99c 	bl	8007e58 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	2201      	movs	r2, #1
 8006b26:	2104      	movs	r1, #4
 8006b28:	4618      	mov	r0, r3
 8006b2a:	f001 f995 	bl	8007e58 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	68da      	ldr	r2, [r3, #12]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f042 0202 	orr.w	r2, r2, #2
 8006b3c:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	68da      	ldr	r2, [r3, #12]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f042 0204 	orr.w	r2, r2, #4
 8006b4c:	60da      	str	r2, [r3, #12]
      break;
 8006b4e:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	681a      	ldr	r2, [r3, #0]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f042 0201 	orr.w	r2, r2, #1
 8006b5e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006b60:	2300      	movs	r3, #0
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3710      	adds	r7, #16
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}
 8006b6a:	bf00      	nop
 8006b6c:	40012c00 	.word	0x40012c00
 8006b70:	40013400 	.word	0x40013400
 8006b74:	40000400 	.word	0x40000400
 8006b78:	40000800 	.word	0x40000800
 8006b7c:	40000c00 	.word	0x40000c00
 8006b80:	0800f064 	.word	0x0800f064

08006b84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b082      	sub	sp, #8
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	691b      	ldr	r3, [r3, #16]
 8006b92:	f003 0302 	and.w	r3, r3, #2
 8006b96:	2b02      	cmp	r3, #2
 8006b98:	d128      	bne.n	8006bec <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	68db      	ldr	r3, [r3, #12]
 8006ba0:	f003 0302 	and.w	r3, r3, #2
 8006ba4:	2b02      	cmp	r3, #2
 8006ba6:	d121      	bne.n	8006bec <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f06f 0202 	mvn.w	r2, #2
 8006bb0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	699b      	ldr	r3, [r3, #24]
 8006bbe:	f003 0303 	and.w	r3, r3, #3
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d005      	beq.n	8006bd2 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	4798      	blx	r3
 8006bd0:	e009      	b.n	8006be6 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2200      	movs	r2, #0
 8006bea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	691b      	ldr	r3, [r3, #16]
 8006bf2:	f003 0304 	and.w	r3, r3, #4
 8006bf6:	2b04      	cmp	r3, #4
 8006bf8:	d128      	bne.n	8006c4c <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	68db      	ldr	r3, [r3, #12]
 8006c00:	f003 0304 	and.w	r3, r3, #4
 8006c04:	2b04      	cmp	r3, #4
 8006c06:	d121      	bne.n	8006c4c <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f06f 0204 	mvn.w	r2, #4
 8006c10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2202      	movs	r2, #2
 8006c16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	699b      	ldr	r3, [r3, #24]
 8006c1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d005      	beq.n	8006c32 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	4798      	blx	r3
 8006c30:	e009      	b.n	8006c46 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	691b      	ldr	r3, [r3, #16]
 8006c52:	f003 0308 	and.w	r3, r3, #8
 8006c56:	2b08      	cmp	r3, #8
 8006c58:	d128      	bne.n	8006cac <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	68db      	ldr	r3, [r3, #12]
 8006c60:	f003 0308 	and.w	r3, r3, #8
 8006c64:	2b08      	cmp	r3, #8
 8006c66:	d121      	bne.n	8006cac <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f06f 0208 	mvn.w	r2, #8
 8006c70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2204      	movs	r2, #4
 8006c76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	69db      	ldr	r3, [r3, #28]
 8006c7e:	f003 0303 	and.w	r3, r3, #3
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d005      	beq.n	8006c92 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	4798      	blx	r3
 8006c90:	e009      	b.n	8006ca6 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	691b      	ldr	r3, [r3, #16]
 8006cb2:	f003 0310 	and.w	r3, r3, #16
 8006cb6:	2b10      	cmp	r3, #16
 8006cb8:	d128      	bne.n	8006d0c <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	68db      	ldr	r3, [r3, #12]
 8006cc0:	f003 0310 	and.w	r3, r3, #16
 8006cc4:	2b10      	cmp	r3, #16
 8006cc6:	d121      	bne.n	8006d0c <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f06f 0210 	mvn.w	r2, #16
 8006cd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2208      	movs	r2, #8
 8006cd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	69db      	ldr	r3, [r3, #28]
 8006cde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d005      	beq.n	8006cf2 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	4798      	blx	r3
 8006cf0:	e009      	b.n	8006d06 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	691b      	ldr	r3, [r3, #16]
 8006d12:	f003 0301 	and.w	r3, r3, #1
 8006d16:	2b01      	cmp	r3, #1
 8006d18:	d110      	bne.n	8006d3c <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	68db      	ldr	r3, [r3, #12]
 8006d20:	f003 0301 	and.w	r3, r3, #1
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	d109      	bne.n	8006d3c <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f06f 0201 	mvn.w	r2, #1
 8006d30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	691b      	ldr	r3, [r3, #16]
 8006d42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d46:	2b80      	cmp	r3, #128	; 0x80
 8006d48:	d110      	bne.n	8006d6c <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	68db      	ldr	r3, [r3, #12]
 8006d50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d54:	2b80      	cmp	r3, #128	; 0x80
 8006d56:	d109      	bne.n	8006d6c <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006d60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	691b      	ldr	r3, [r3, #16]
 8006d72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d76:	2b40      	cmp	r3, #64	; 0x40
 8006d78:	d110      	bne.n	8006d9c <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	68db      	ldr	r3, [r3, #12]
 8006d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d84:	2b40      	cmp	r3, #64	; 0x40
 8006d86:	d109      	bne.n	8006d9c <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006d90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	691b      	ldr	r3, [r3, #16]
 8006da2:	f003 0320 	and.w	r3, r3, #32
 8006da6:	2b20      	cmp	r3, #32
 8006da8:	d110      	bne.n	8006dcc <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	68db      	ldr	r3, [r3, #12]
 8006db0:	f003 0320 	and.w	r3, r3, #32
 8006db4:	2b20      	cmp	r3, #32
 8006db6:	d109      	bne.n	8006dcc <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f06f 0220 	mvn.w	r2, #32
 8006dc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006dcc:	bf00      	nop
 8006dce:	3708      	adds	r7, #8
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}

08006dd4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b084      	sub	sp, #16
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	60f8      	str	r0, [r7, #12]
 8006ddc:	60b9      	str	r1, [r7, #8]
 8006dde:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d010      	beq.n	8006e08 <HAL_TIM_PWM_ConfigChannel+0x34>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2b04      	cmp	r3, #4
 8006dea:	d00d      	beq.n	8006e08 <HAL_TIM_PWM_ConfigChannel+0x34>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2b08      	cmp	r3, #8
 8006df0:	d00a      	beq.n	8006e08 <HAL_TIM_PWM_ConfigChannel+0x34>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2b0c      	cmp	r3, #12
 8006df6:	d007      	beq.n	8006e08 <HAL_TIM_PWM_ConfigChannel+0x34>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2b3c      	cmp	r3, #60	; 0x3c
 8006dfc:	d004      	beq.n	8006e08 <HAL_TIM_PWM_ConfigChannel+0x34>
 8006dfe:	f241 0127 	movw	r1, #4135	; 0x1027
 8006e02:	4890      	ldr	r0, [pc, #576]	; (8007044 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8006e04:	f7fb f95c 	bl	80020c0 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	2b60      	cmp	r3, #96	; 0x60
 8006e0e:	d008      	beq.n	8006e22 <HAL_TIM_PWM_ConfigChannel+0x4e>
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	2b70      	cmp	r3, #112	; 0x70
 8006e16:	d004      	beq.n	8006e22 <HAL_TIM_PWM_ConfigChannel+0x4e>
 8006e18:	f241 0128 	movw	r1, #4136	; 0x1028
 8006e1c:	4889      	ldr	r0, [pc, #548]	; (8007044 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8006e1e:	f7fb f94f 	bl	80020c0 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	689b      	ldr	r3, [r3, #8]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d008      	beq.n	8006e3c <HAL_TIM_PWM_ConfigChannel+0x68>
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	2b02      	cmp	r3, #2
 8006e30:	d004      	beq.n	8006e3c <HAL_TIM_PWM_ConfigChannel+0x68>
 8006e32:	f241 0129 	movw	r1, #4137	; 0x1029
 8006e36:	4883      	ldr	r0, [pc, #524]	; (8007044 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8006e38:	f7fb f942 	bl	80020c0 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	691b      	ldr	r3, [r3, #16]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d008      	beq.n	8006e56 <HAL_TIM_PWM_ConfigChannel+0x82>
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	691b      	ldr	r3, [r3, #16]
 8006e48:	2b04      	cmp	r3, #4
 8006e4a:	d004      	beq.n	8006e56 <HAL_TIM_PWM_ConfigChannel+0x82>
 8006e4c:	f241 012a 	movw	r1, #4138	; 0x102a
 8006e50:	487c      	ldr	r0, [pc, #496]	; (8007044 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8006e52:	f7fb f935 	bl	80020c0 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	d101      	bne.n	8006e64 <HAL_TIM_PWM_ConfigChannel+0x90>
 8006e60:	2302      	movs	r3, #2
 8006e62:	e145      	b.n	80070f0 <HAL_TIM_PWM_ConfigChannel+0x31c>
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2201      	movs	r2, #1
 8006e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2b0c      	cmp	r3, #12
 8006e70:	f200 8138 	bhi.w	80070e4 <HAL_TIM_PWM_ConfigChannel+0x310>
 8006e74:	a201      	add	r2, pc, #4	; (adr r2, 8006e7c <HAL_TIM_PWM_ConfigChannel+0xa8>)
 8006e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e7a:	bf00      	nop
 8006e7c:	08006eb1 	.word	0x08006eb1
 8006e80:	080070e5 	.word	0x080070e5
 8006e84:	080070e5 	.word	0x080070e5
 8006e88:	080070e5 	.word	0x080070e5
 8006e8c:	08006f37 	.word	0x08006f37
 8006e90:	080070e5 	.word	0x080070e5
 8006e94:	080070e5 	.word	0x080070e5
 8006e98:	080070e5 	.word	0x080070e5
 8006e9c:	08006fbf 	.word	0x08006fbf
 8006ea0:	080070e5 	.word	0x080070e5
 8006ea4:	080070e5 	.word	0x080070e5
 8006ea8:	080070e5 	.word	0x080070e5
 8006eac:	0800705d 	.word	0x0800705d
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a64      	ldr	r2, [pc, #400]	; (8007048 <HAL_TIM_PWM_ConfigChannel+0x274>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d01d      	beq.n	8006ef6 <HAL_TIM_PWM_ConfigChannel+0x122>
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a63      	ldr	r2, [pc, #396]	; (800704c <HAL_TIM_PWM_ConfigChannel+0x278>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d018      	beq.n	8006ef6 <HAL_TIM_PWM_ConfigChannel+0x122>
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ecc:	d013      	beq.n	8006ef6 <HAL_TIM_PWM_ConfigChannel+0x122>
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a5f      	ldr	r2, [pc, #380]	; (8007050 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d00e      	beq.n	8006ef6 <HAL_TIM_PWM_ConfigChannel+0x122>
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a5d      	ldr	r2, [pc, #372]	; (8007054 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d009      	beq.n	8006ef6 <HAL_TIM_PWM_ConfigChannel+0x122>
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a5c      	ldr	r2, [pc, #368]	; (8007058 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d004      	beq.n	8006ef6 <HAL_TIM_PWM_ConfigChannel+0x122>
 8006eec:	f241 0134 	movw	r1, #4148	; 0x1034
 8006ef0:	4854      	ldr	r0, [pc, #336]	; (8007044 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8006ef2:	f7fb f8e5 	bl	80020c0 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	68b9      	ldr	r1, [r7, #8]
 8006efc:	4618      	mov	r0, r3
 8006efe:	f000 fcdb 	bl	80078b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	699a      	ldr	r2, [r3, #24]
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f042 0208 	orr.w	r2, r2, #8
 8006f10:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	699a      	ldr	r2, [r3, #24]
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f022 0204 	bic.w	r2, r2, #4
 8006f20:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	6999      	ldr	r1, [r3, #24]
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	691a      	ldr	r2, [r3, #16]
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	430a      	orrs	r2, r1
 8006f32:	619a      	str	r2, [r3, #24]
      break;
 8006f34:	e0d7      	b.n	80070e6 <HAL_TIM_PWM_ConfigChannel+0x312>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a43      	ldr	r2, [pc, #268]	; (8007048 <HAL_TIM_PWM_ConfigChannel+0x274>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d01d      	beq.n	8006f7c <HAL_TIM_PWM_ConfigChannel+0x1a8>
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a41      	ldr	r2, [pc, #260]	; (800704c <HAL_TIM_PWM_ConfigChannel+0x278>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d018      	beq.n	8006f7c <HAL_TIM_PWM_ConfigChannel+0x1a8>
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f52:	d013      	beq.n	8006f7c <HAL_TIM_PWM_ConfigChannel+0x1a8>
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a3d      	ldr	r2, [pc, #244]	; (8007050 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d00e      	beq.n	8006f7c <HAL_TIM_PWM_ConfigChannel+0x1a8>
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a3c      	ldr	r2, [pc, #240]	; (8007054 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d009      	beq.n	8006f7c <HAL_TIM_PWM_ConfigChannel+0x1a8>
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a3a      	ldr	r2, [pc, #232]	; (8007058 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d004      	beq.n	8006f7c <HAL_TIM_PWM_ConfigChannel+0x1a8>
 8006f72:	f241 0145 	movw	r1, #4165	; 0x1045
 8006f76:	4833      	ldr	r0, [pc, #204]	; (8007044 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8006f78:	f7fb f8a2 	bl	80020c0 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	68b9      	ldr	r1, [r7, #8]
 8006f82:	4618      	mov	r0, r3
 8006f84:	f000 fd32 	bl	80079ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	699a      	ldr	r2, [r3, #24]
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	699a      	ldr	r2, [r3, #24]
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006fa6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	6999      	ldr	r1, [r3, #24]
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	691b      	ldr	r3, [r3, #16]
 8006fb2:	021a      	lsls	r2, r3, #8
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	430a      	orrs	r2, r1
 8006fba:	619a      	str	r2, [r3, #24]
      break;
 8006fbc:	e093      	b.n	80070e6 <HAL_TIM_PWM_ConfigChannel+0x312>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a21      	ldr	r2, [pc, #132]	; (8007048 <HAL_TIM_PWM_ConfigChannel+0x274>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d01d      	beq.n	8007004 <HAL_TIM_PWM_ConfigChannel+0x230>
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a1f      	ldr	r2, [pc, #124]	; (800704c <HAL_TIM_PWM_ConfigChannel+0x278>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d018      	beq.n	8007004 <HAL_TIM_PWM_ConfigChannel+0x230>
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fda:	d013      	beq.n	8007004 <HAL_TIM_PWM_ConfigChannel+0x230>
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a1b      	ldr	r2, [pc, #108]	; (8007050 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d00e      	beq.n	8007004 <HAL_TIM_PWM_ConfigChannel+0x230>
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a1a      	ldr	r2, [pc, #104]	; (8007054 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d009      	beq.n	8007004 <HAL_TIM_PWM_ConfigChannel+0x230>
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a18      	ldr	r2, [pc, #96]	; (8007058 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d004      	beq.n	8007004 <HAL_TIM_PWM_ConfigChannel+0x230>
 8006ffa:	f241 0156 	movw	r1, #4182	; 0x1056
 8006ffe:	4811      	ldr	r0, [pc, #68]	; (8007044 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8007000:	f7fb f85e 	bl	80020c0 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	68b9      	ldr	r1, [r7, #8]
 800700a:	4618      	mov	r0, r3
 800700c:	f000 fd8c 	bl	8007b28 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	69da      	ldr	r2, [r3, #28]
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f042 0208 	orr.w	r2, r2, #8
 800701e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	69da      	ldr	r2, [r3, #28]
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f022 0204 	bic.w	r2, r2, #4
 800702e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	69d9      	ldr	r1, [r3, #28]
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	691a      	ldr	r2, [r3, #16]
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	430a      	orrs	r2, r1
 8007040:	61da      	str	r2, [r3, #28]
      break;
 8007042:	e050      	b.n	80070e6 <HAL_TIM_PWM_ConfigChannel+0x312>
 8007044:	0800f064 	.word	0x0800f064
 8007048:	40012c00 	.word	0x40012c00
 800704c:	40013400 	.word	0x40013400
 8007050:	40000400 	.word	0x40000400
 8007054:	40000800 	.word	0x40000800
 8007058:	40000c00 	.word	0x40000c00
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a25      	ldr	r2, [pc, #148]	; (80070f8 <HAL_TIM_PWM_ConfigChannel+0x324>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d01d      	beq.n	80070a2 <HAL_TIM_PWM_ConfigChannel+0x2ce>
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a24      	ldr	r2, [pc, #144]	; (80070fc <HAL_TIM_PWM_ConfigChannel+0x328>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d018      	beq.n	80070a2 <HAL_TIM_PWM_ConfigChannel+0x2ce>
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007078:	d013      	beq.n	80070a2 <HAL_TIM_PWM_ConfigChannel+0x2ce>
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4a20      	ldr	r2, [pc, #128]	; (8007100 <HAL_TIM_PWM_ConfigChannel+0x32c>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d00e      	beq.n	80070a2 <HAL_TIM_PWM_ConfigChannel+0x2ce>
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a1e      	ldr	r2, [pc, #120]	; (8007104 <HAL_TIM_PWM_ConfigChannel+0x330>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d009      	beq.n	80070a2 <HAL_TIM_PWM_ConfigChannel+0x2ce>
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a1d      	ldr	r2, [pc, #116]	; (8007108 <HAL_TIM_PWM_ConfigChannel+0x334>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d004      	beq.n	80070a2 <HAL_TIM_PWM_ConfigChannel+0x2ce>
 8007098:	f241 0167 	movw	r1, #4199	; 0x1067
 800709c:	481b      	ldr	r0, [pc, #108]	; (800710c <HAL_TIM_PWM_ConfigChannel+0x338>)
 800709e:	f7fb f80f 	bl	80020c0 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	68b9      	ldr	r1, [r7, #8]
 80070a8:	4618      	mov	r0, r3
 80070aa:	f000 fddb 	bl	8007c64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	69da      	ldr	r2, [r3, #28]
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80070bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	69da      	ldr	r2, [r3, #28]
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	69d9      	ldr	r1, [r3, #28]
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	691b      	ldr	r3, [r3, #16]
 80070d8:	021a      	lsls	r2, r3, #8
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	430a      	orrs	r2, r1
 80070e0:	61da      	str	r2, [r3, #28]
      break;
 80070e2:	e000      	b.n	80070e6 <HAL_TIM_PWM_ConfigChannel+0x312>
    }

    default:
      break;
 80070e4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2200      	movs	r2, #0
 80070ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80070ee:	2300      	movs	r3, #0
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3710      	adds	r7, #16
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}
 80070f8:	40012c00 	.word	0x40012c00
 80070fc:	40013400 	.word	0x40013400
 8007100:	40000400 	.word	0x40000400
 8007104:	40000800 	.word	0x40000800
 8007108:	40000c00 	.word	0x40000c00
 800710c:	0800f064 	.word	0x0800f064

08007110 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b084      	sub	sp, #16
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
 8007118:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007120:	2b01      	cmp	r3, #1
 8007122:	d101      	bne.n	8007128 <HAL_TIM_ConfigClockSource+0x18>
 8007124:	2302      	movs	r3, #2
 8007126:	e2f5      	b.n	8007714 <HAL_TIM_ConfigClockSource+0x604>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2201      	movs	r2, #1
 800712c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2202      	movs	r2, #2
 8007134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007140:	d029      	beq.n	8007196 <HAL_TIM_ConfigClockSource+0x86>
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800714a:	d024      	beq.n	8007196 <HAL_TIM_ConfigClockSource+0x86>
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d020      	beq.n	8007196 <HAL_TIM_ConfigClockSource+0x86>
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	2b10      	cmp	r3, #16
 800715a:	d01c      	beq.n	8007196 <HAL_TIM_ConfigClockSource+0x86>
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	2b20      	cmp	r3, #32
 8007162:	d018      	beq.n	8007196 <HAL_TIM_ConfigClockSource+0x86>
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	2b30      	cmp	r3, #48	; 0x30
 800716a:	d014      	beq.n	8007196 <HAL_TIM_ConfigClockSource+0x86>
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	2b40      	cmp	r3, #64	; 0x40
 8007172:	d010      	beq.n	8007196 <HAL_TIM_ConfigClockSource+0x86>
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	2b50      	cmp	r3, #80	; 0x50
 800717a:	d00c      	beq.n	8007196 <HAL_TIM_ConfigClockSource+0x86>
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	2b60      	cmp	r3, #96	; 0x60
 8007182:	d008      	beq.n	8007196 <HAL_TIM_ConfigClockSource+0x86>
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	2b70      	cmp	r3, #112	; 0x70
 800718a:	d004      	beq.n	8007196 <HAL_TIM_ConfigClockSource+0x86>
 800718c:	f241 4132 	movw	r1, #5170	; 0x1432
 8007190:	487c      	ldr	r0, [pc, #496]	; (8007384 <HAL_TIM_ConfigClockSource+0x274>)
 8007192:	f7fa ff95 	bl	80020c0 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	689b      	ldr	r3, [r3, #8]
 800719c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80071a4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80071ac:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	68fa      	ldr	r2, [r7, #12]
 80071b4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071be:	f000 80f1 	beq.w	80073a4 <HAL_TIM_ConfigClockSource+0x294>
 80071c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071c6:	f200 8299 	bhi.w	80076fc <HAL_TIM_ConfigClockSource+0x5ec>
 80071ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071ce:	d02d      	beq.n	800722c <HAL_TIM_ConfigClockSource+0x11c>
 80071d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071d4:	f200 8292 	bhi.w	80076fc <HAL_TIM_ConfigClockSource+0x5ec>
 80071d8:	2b70      	cmp	r3, #112	; 0x70
 80071da:	d05d      	beq.n	8007298 <HAL_TIM_ConfigClockSource+0x188>
 80071dc:	2b70      	cmp	r3, #112	; 0x70
 80071de:	f200 828d 	bhi.w	80076fc <HAL_TIM_ConfigClockSource+0x5ec>
 80071e2:	2b60      	cmp	r3, #96	; 0x60
 80071e4:	f000 81a5 	beq.w	8007532 <HAL_TIM_ConfigClockSource+0x422>
 80071e8:	2b60      	cmp	r3, #96	; 0x60
 80071ea:	f200 8287 	bhi.w	80076fc <HAL_TIM_ConfigClockSource+0x5ec>
 80071ee:	2b50      	cmp	r3, #80	; 0x50
 80071f0:	f000 8149 	beq.w	8007486 <HAL_TIM_ConfigClockSource+0x376>
 80071f4:	2b50      	cmp	r3, #80	; 0x50
 80071f6:	f200 8281 	bhi.w	80076fc <HAL_TIM_ConfigClockSource+0x5ec>
 80071fa:	2b40      	cmp	r3, #64	; 0x40
 80071fc:	f000 81fc 	beq.w	80075f8 <HAL_TIM_ConfigClockSource+0x4e8>
 8007200:	2b40      	cmp	r3, #64	; 0x40
 8007202:	f200 827b 	bhi.w	80076fc <HAL_TIM_ConfigClockSource+0x5ec>
 8007206:	2b30      	cmp	r3, #48	; 0x30
 8007208:	f000 824c 	beq.w	80076a4 <HAL_TIM_ConfigClockSource+0x594>
 800720c:	2b30      	cmp	r3, #48	; 0x30
 800720e:	f200 8275 	bhi.w	80076fc <HAL_TIM_ConfigClockSource+0x5ec>
 8007212:	2b20      	cmp	r3, #32
 8007214:	f000 8246 	beq.w	80076a4 <HAL_TIM_ConfigClockSource+0x594>
 8007218:	2b20      	cmp	r3, #32
 800721a:	f200 826f 	bhi.w	80076fc <HAL_TIM_ConfigClockSource+0x5ec>
 800721e:	2b00      	cmp	r3, #0
 8007220:	f000 8240 	beq.w	80076a4 <HAL_TIM_ConfigClockSource+0x594>
 8007224:	2b10      	cmp	r3, #16
 8007226:	f000 823d 	beq.w	80076a4 <HAL_TIM_ConfigClockSource+0x594>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800722a:	e267      	b.n	80076fc <HAL_TIM_ConfigClockSource+0x5ec>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a55      	ldr	r2, [pc, #340]	; (8007388 <HAL_TIM_ConfigClockSource+0x278>)
 8007232:	4293      	cmp	r3, r2
 8007234:	f000 8264 	beq.w	8007700 <HAL_TIM_ConfigClockSource+0x5f0>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4a53      	ldr	r2, [pc, #332]	; (800738c <HAL_TIM_ConfigClockSource+0x27c>)
 800723e:	4293      	cmp	r3, r2
 8007240:	f000 825e 	beq.w	8007700 <HAL_TIM_ConfigClockSource+0x5f0>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800724c:	f000 8258 	beq.w	8007700 <HAL_TIM_ConfigClockSource+0x5f0>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a4e      	ldr	r2, [pc, #312]	; (8007390 <HAL_TIM_ConfigClockSource+0x280>)
 8007256:	4293      	cmp	r3, r2
 8007258:	f000 8252 	beq.w	8007700 <HAL_TIM_ConfigClockSource+0x5f0>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a4c      	ldr	r2, [pc, #304]	; (8007394 <HAL_TIM_ConfigClockSource+0x284>)
 8007262:	4293      	cmp	r3, r2
 8007264:	f000 824c 	beq.w	8007700 <HAL_TIM_ConfigClockSource+0x5f0>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a4a      	ldr	r2, [pc, #296]	; (8007398 <HAL_TIM_ConfigClockSource+0x288>)
 800726e:	4293      	cmp	r3, r2
 8007270:	f000 8246 	beq.w	8007700 <HAL_TIM_ConfigClockSource+0x5f0>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a48      	ldr	r2, [pc, #288]	; (800739c <HAL_TIM_ConfigClockSource+0x28c>)
 800727a:	4293      	cmp	r3, r2
 800727c:	f000 8240 	beq.w	8007700 <HAL_TIM_ConfigClockSource+0x5f0>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4a46      	ldr	r2, [pc, #280]	; (80073a0 <HAL_TIM_ConfigClockSource+0x290>)
 8007286:	4293      	cmp	r3, r2
 8007288:	f000 823a 	beq.w	8007700 <HAL_TIM_ConfigClockSource+0x5f0>
 800728c:	f241 413e 	movw	r1, #5182	; 0x143e
 8007290:	483c      	ldr	r0, [pc, #240]	; (8007384 <HAL_TIM_ConfigClockSource+0x274>)
 8007292:	f7fa ff15 	bl	80020c0 <assert_failed>
      break;
 8007296:	e233      	b.n	8007700 <HAL_TIM_ConfigClockSource+0x5f0>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a3a      	ldr	r2, [pc, #232]	; (8007388 <HAL_TIM_ConfigClockSource+0x278>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d01d      	beq.n	80072de <HAL_TIM_ConfigClockSource+0x1ce>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4a39      	ldr	r2, [pc, #228]	; (800738c <HAL_TIM_ConfigClockSource+0x27c>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d018      	beq.n	80072de <HAL_TIM_ConfigClockSource+0x1ce>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072b4:	d013      	beq.n	80072de <HAL_TIM_ConfigClockSource+0x1ce>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4a35      	ldr	r2, [pc, #212]	; (8007390 <HAL_TIM_ConfigClockSource+0x280>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d00e      	beq.n	80072de <HAL_TIM_ConfigClockSource+0x1ce>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4a33      	ldr	r2, [pc, #204]	; (8007394 <HAL_TIM_ConfigClockSource+0x284>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d009      	beq.n	80072de <HAL_TIM_ConfigClockSource+0x1ce>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4a32      	ldr	r2, [pc, #200]	; (8007398 <HAL_TIM_ConfigClockSource+0x288>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d004      	beq.n	80072de <HAL_TIM_ConfigClockSource+0x1ce>
 80072d4:	f241 4145 	movw	r1, #5189	; 0x1445
 80072d8:	482a      	ldr	r0, [pc, #168]	; (8007384 <HAL_TIM_ConfigClockSource+0x274>)
 80072da:	f7fa fef1 	bl	80020c0 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	689b      	ldr	r3, [r3, #8]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d013      	beq.n	800730e <HAL_TIM_ConfigClockSource+0x1fe>
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	689b      	ldr	r3, [r3, #8]
 80072ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072ee:	d00e      	beq.n	800730e <HAL_TIM_ConfigClockSource+0x1fe>
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	689b      	ldr	r3, [r3, #8]
 80072f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072f8:	d009      	beq.n	800730e <HAL_TIM_ConfigClockSource+0x1fe>
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	689b      	ldr	r3, [r3, #8]
 80072fe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007302:	d004      	beq.n	800730e <HAL_TIM_ConfigClockSource+0x1fe>
 8007304:	f241 4148 	movw	r1, #5192	; 0x1448
 8007308:	481e      	ldr	r0, [pc, #120]	; (8007384 <HAL_TIM_ConfigClockSource+0x274>)
 800730a:	f7fa fed9 	bl	80020c0 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007316:	d014      	beq.n	8007342 <HAL_TIM_ConfigClockSource+0x232>
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d010      	beq.n	8007342 <HAL_TIM_ConfigClockSource+0x232>
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d00c      	beq.n	8007342 <HAL_TIM_ConfigClockSource+0x232>
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	685b      	ldr	r3, [r3, #4]
 800732c:	2b02      	cmp	r3, #2
 800732e:	d008      	beq.n	8007342 <HAL_TIM_ConfigClockSource+0x232>
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	685b      	ldr	r3, [r3, #4]
 8007334:	2b0a      	cmp	r3, #10
 8007336:	d004      	beq.n	8007342 <HAL_TIM_ConfigClockSource+0x232>
 8007338:	f241 4149 	movw	r1, #5193	; 0x1449
 800733c:	4811      	ldr	r0, [pc, #68]	; (8007384 <HAL_TIM_ConfigClockSource+0x274>)
 800733e:	f7fa febf 	bl	80020c0 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	68db      	ldr	r3, [r3, #12]
 8007346:	2b0f      	cmp	r3, #15
 8007348:	d904      	bls.n	8007354 <HAL_TIM_ConfigClockSource+0x244>
 800734a:	f241 414a 	movw	r1, #5194	; 0x144a
 800734e:	480d      	ldr	r0, [pc, #52]	; (8007384 <HAL_TIM_ConfigClockSource+0x274>)
 8007350:	f7fa feb6 	bl	80020c0 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6818      	ldr	r0, [r3, #0]
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	6899      	ldr	r1, [r3, #8]
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	685a      	ldr	r2, [r3, #4]
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	68db      	ldr	r3, [r3, #12]
 8007364:	f000 fd59 	bl	8007e1a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	689b      	ldr	r3, [r3, #8]
 800736e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007376:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	68fa      	ldr	r2, [r7, #12]
 800737e:	609a      	str	r2, [r3, #8]
      break;
 8007380:	e1bf      	b.n	8007702 <HAL_TIM_ConfigClockSource+0x5f2>
 8007382:	bf00      	nop
 8007384:	0800f064 	.word	0x0800f064
 8007388:	40012c00 	.word	0x40012c00
 800738c:	40013400 	.word	0x40013400
 8007390:	40000400 	.word	0x40000400
 8007394:	40000800 	.word	0x40000800
 8007398:	40000c00 	.word	0x40000c00
 800739c:	40001000 	.word	0x40001000
 80073a0:	40001400 	.word	0x40001400
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a8d      	ldr	r2, [pc, #564]	; (80075e0 <HAL_TIM_ConfigClockSource+0x4d0>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d01d      	beq.n	80073ea <HAL_TIM_ConfigClockSource+0x2da>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a8c      	ldr	r2, [pc, #560]	; (80075e4 <HAL_TIM_ConfigClockSource+0x4d4>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d018      	beq.n	80073ea <HAL_TIM_ConfigClockSource+0x2da>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073c0:	d013      	beq.n	80073ea <HAL_TIM_ConfigClockSource+0x2da>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a88      	ldr	r2, [pc, #544]	; (80075e8 <HAL_TIM_ConfigClockSource+0x4d8>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d00e      	beq.n	80073ea <HAL_TIM_ConfigClockSource+0x2da>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a86      	ldr	r2, [pc, #536]	; (80075ec <HAL_TIM_ConfigClockSource+0x4dc>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d009      	beq.n	80073ea <HAL_TIM_ConfigClockSource+0x2da>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a85      	ldr	r2, [pc, #532]	; (80075f0 <HAL_TIM_ConfigClockSource+0x4e0>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d004      	beq.n	80073ea <HAL_TIM_ConfigClockSource+0x2da>
 80073e0:	f241 415d 	movw	r1, #5213	; 0x145d
 80073e4:	4883      	ldr	r0, [pc, #524]	; (80075f4 <HAL_TIM_ConfigClockSource+0x4e4>)
 80073e6:	f7fa fe6b 	bl	80020c0 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	689b      	ldr	r3, [r3, #8]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d013      	beq.n	800741a <HAL_TIM_ConfigClockSource+0x30a>
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	689b      	ldr	r3, [r3, #8]
 80073f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073fa:	d00e      	beq.n	800741a <HAL_TIM_ConfigClockSource+0x30a>
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	689b      	ldr	r3, [r3, #8]
 8007400:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007404:	d009      	beq.n	800741a <HAL_TIM_ConfigClockSource+0x30a>
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	689b      	ldr	r3, [r3, #8]
 800740a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800740e:	d004      	beq.n	800741a <HAL_TIM_ConfigClockSource+0x30a>
 8007410:	f44f 51a3 	mov.w	r1, #5216	; 0x1460
 8007414:	4877      	ldr	r0, [pc, #476]	; (80075f4 <HAL_TIM_ConfigClockSource+0x4e4>)
 8007416:	f7fa fe53 	bl	80020c0 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007422:	d014      	beq.n	800744e <HAL_TIM_ConfigClockSource+0x33e>
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d010      	beq.n	800744e <HAL_TIM_ConfigClockSource+0x33e>
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d00c      	beq.n	800744e <HAL_TIM_ConfigClockSource+0x33e>
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	2b02      	cmp	r3, #2
 800743a:	d008      	beq.n	800744e <HAL_TIM_ConfigClockSource+0x33e>
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	2b0a      	cmp	r3, #10
 8007442:	d004      	beq.n	800744e <HAL_TIM_ConfigClockSource+0x33e>
 8007444:	f241 4161 	movw	r1, #5217	; 0x1461
 8007448:	486a      	ldr	r0, [pc, #424]	; (80075f4 <HAL_TIM_ConfigClockSource+0x4e4>)
 800744a:	f7fa fe39 	bl	80020c0 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	68db      	ldr	r3, [r3, #12]
 8007452:	2b0f      	cmp	r3, #15
 8007454:	d904      	bls.n	8007460 <HAL_TIM_ConfigClockSource+0x350>
 8007456:	f241 4162 	movw	r1, #5218	; 0x1462
 800745a:	4866      	ldr	r0, [pc, #408]	; (80075f4 <HAL_TIM_ConfigClockSource+0x4e4>)
 800745c:	f7fa fe30 	bl	80020c0 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6818      	ldr	r0, [r3, #0]
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	6899      	ldr	r1, [r3, #8]
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	685a      	ldr	r2, [r3, #4]
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	68db      	ldr	r3, [r3, #12]
 8007470:	f000 fcd3 	bl	8007e1a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	689a      	ldr	r2, [r3, #8]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007482:	609a      	str	r2, [r3, #8]
      break;
 8007484:	e13d      	b.n	8007702 <HAL_TIM_ConfigClockSource+0x5f2>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4a55      	ldr	r2, [pc, #340]	; (80075e0 <HAL_TIM_ConfigClockSource+0x4d0>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d01d      	beq.n	80074cc <HAL_TIM_ConfigClockSource+0x3bc>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4a53      	ldr	r2, [pc, #332]	; (80075e4 <HAL_TIM_ConfigClockSource+0x4d4>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d018      	beq.n	80074cc <HAL_TIM_ConfigClockSource+0x3bc>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074a2:	d013      	beq.n	80074cc <HAL_TIM_ConfigClockSource+0x3bc>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a4f      	ldr	r2, [pc, #316]	; (80075e8 <HAL_TIM_ConfigClockSource+0x4d8>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d00e      	beq.n	80074cc <HAL_TIM_ConfigClockSource+0x3bc>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4a4e      	ldr	r2, [pc, #312]	; (80075ec <HAL_TIM_ConfigClockSource+0x4dc>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d009      	beq.n	80074cc <HAL_TIM_ConfigClockSource+0x3bc>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4a4c      	ldr	r2, [pc, #304]	; (80075f0 <HAL_TIM_ConfigClockSource+0x4e0>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d004      	beq.n	80074cc <HAL_TIM_ConfigClockSource+0x3bc>
 80074c2:	f241 4171 	movw	r1, #5233	; 0x1471
 80074c6:	484b      	ldr	r0, [pc, #300]	; (80075f4 <HAL_TIM_ConfigClockSource+0x4e4>)
 80074c8:	f7fa fdfa 	bl	80020c0 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	685b      	ldr	r3, [r3, #4]
 80074d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074d4:	d014      	beq.n	8007500 <HAL_TIM_ConfigClockSource+0x3f0>
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	685b      	ldr	r3, [r3, #4]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d010      	beq.n	8007500 <HAL_TIM_ConfigClockSource+0x3f0>
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	685b      	ldr	r3, [r3, #4]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d00c      	beq.n	8007500 <HAL_TIM_ConfigClockSource+0x3f0>
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	685b      	ldr	r3, [r3, #4]
 80074ea:	2b02      	cmp	r3, #2
 80074ec:	d008      	beq.n	8007500 <HAL_TIM_ConfigClockSource+0x3f0>
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	685b      	ldr	r3, [r3, #4]
 80074f2:	2b0a      	cmp	r3, #10
 80074f4:	d004      	beq.n	8007500 <HAL_TIM_ConfigClockSource+0x3f0>
 80074f6:	f241 4174 	movw	r1, #5236	; 0x1474
 80074fa:	483e      	ldr	r0, [pc, #248]	; (80075f4 <HAL_TIM_ConfigClockSource+0x4e4>)
 80074fc:	f7fa fde0 	bl	80020c0 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	68db      	ldr	r3, [r3, #12]
 8007504:	2b0f      	cmp	r3, #15
 8007506:	d904      	bls.n	8007512 <HAL_TIM_ConfigClockSource+0x402>
 8007508:	f241 4175 	movw	r1, #5237	; 0x1475
 800750c:	4839      	ldr	r0, [pc, #228]	; (80075f4 <HAL_TIM_ConfigClockSource+0x4e4>)
 800750e:	f7fa fdd7 	bl	80020c0 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6818      	ldr	r0, [r3, #0]
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	6859      	ldr	r1, [r3, #4]
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	68db      	ldr	r3, [r3, #12]
 800751e:	461a      	mov	r2, r3
 8007520:	f000 fc04 	bl	8007d2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	2150      	movs	r1, #80	; 0x50
 800752a:	4618      	mov	r0, r3
 800752c:	f000 fc5b 	bl	8007de6 <TIM_ITRx_SetConfig>
      break;
 8007530:	e0e7      	b.n	8007702 <HAL_TIM_ConfigClockSource+0x5f2>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4a2a      	ldr	r2, [pc, #168]	; (80075e0 <HAL_TIM_ConfigClockSource+0x4d0>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d01d      	beq.n	8007578 <HAL_TIM_ConfigClockSource+0x468>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a28      	ldr	r2, [pc, #160]	; (80075e4 <HAL_TIM_ConfigClockSource+0x4d4>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d018      	beq.n	8007578 <HAL_TIM_ConfigClockSource+0x468>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800754e:	d013      	beq.n	8007578 <HAL_TIM_ConfigClockSource+0x468>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a24      	ldr	r2, [pc, #144]	; (80075e8 <HAL_TIM_ConfigClockSource+0x4d8>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d00e      	beq.n	8007578 <HAL_TIM_ConfigClockSource+0x468>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a23      	ldr	r2, [pc, #140]	; (80075ec <HAL_TIM_ConfigClockSource+0x4dc>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d009      	beq.n	8007578 <HAL_TIM_ConfigClockSource+0x468>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a21      	ldr	r2, [pc, #132]	; (80075f0 <HAL_TIM_ConfigClockSource+0x4e0>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d004      	beq.n	8007578 <HAL_TIM_ConfigClockSource+0x468>
 800756e:	f241 4181 	movw	r1, #5249	; 0x1481
 8007572:	4820      	ldr	r0, [pc, #128]	; (80075f4 <HAL_TIM_ConfigClockSource+0x4e4>)
 8007574:	f7fa fda4 	bl	80020c0 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	685b      	ldr	r3, [r3, #4]
 800757c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007580:	d014      	beq.n	80075ac <HAL_TIM_ConfigClockSource+0x49c>
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d010      	beq.n	80075ac <HAL_TIM_ConfigClockSource+0x49c>
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	685b      	ldr	r3, [r3, #4]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d00c      	beq.n	80075ac <HAL_TIM_ConfigClockSource+0x49c>
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	685b      	ldr	r3, [r3, #4]
 8007596:	2b02      	cmp	r3, #2
 8007598:	d008      	beq.n	80075ac <HAL_TIM_ConfigClockSource+0x49c>
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	685b      	ldr	r3, [r3, #4]
 800759e:	2b0a      	cmp	r3, #10
 80075a0:	d004      	beq.n	80075ac <HAL_TIM_ConfigClockSource+0x49c>
 80075a2:	f241 4184 	movw	r1, #5252	; 0x1484
 80075a6:	4813      	ldr	r0, [pc, #76]	; (80075f4 <HAL_TIM_ConfigClockSource+0x4e4>)
 80075a8:	f7fa fd8a 	bl	80020c0 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	68db      	ldr	r3, [r3, #12]
 80075b0:	2b0f      	cmp	r3, #15
 80075b2:	d904      	bls.n	80075be <HAL_TIM_ConfigClockSource+0x4ae>
 80075b4:	f241 4185 	movw	r1, #5253	; 0x1485
 80075b8:	480e      	ldr	r0, [pc, #56]	; (80075f4 <HAL_TIM_ConfigClockSource+0x4e4>)
 80075ba:	f7fa fd81 	bl	80020c0 <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6818      	ldr	r0, [r3, #0]
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	6859      	ldr	r1, [r3, #4]
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	68db      	ldr	r3, [r3, #12]
 80075ca:	461a      	mov	r2, r3
 80075cc:	f000 fbdc 	bl	8007d88 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	2160      	movs	r1, #96	; 0x60
 80075d6:	4618      	mov	r0, r3
 80075d8:	f000 fc05 	bl	8007de6 <TIM_ITRx_SetConfig>
      break;
 80075dc:	e091      	b.n	8007702 <HAL_TIM_ConfigClockSource+0x5f2>
 80075de:	bf00      	nop
 80075e0:	40012c00 	.word	0x40012c00
 80075e4:	40013400 	.word	0x40013400
 80075e8:	40000400 	.word	0x40000400
 80075ec:	40000800 	.word	0x40000800
 80075f0:	40000c00 	.word	0x40000c00
 80075f4:	0800f064 	.word	0x0800f064
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a47      	ldr	r2, [pc, #284]	; (800771c <HAL_TIM_ConfigClockSource+0x60c>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d01d      	beq.n	800763e <HAL_TIM_ConfigClockSource+0x52e>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4a46      	ldr	r2, [pc, #280]	; (8007720 <HAL_TIM_ConfigClockSource+0x610>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d018      	beq.n	800763e <HAL_TIM_ConfigClockSource+0x52e>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007614:	d013      	beq.n	800763e <HAL_TIM_ConfigClockSource+0x52e>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4a42      	ldr	r2, [pc, #264]	; (8007724 <HAL_TIM_ConfigClockSource+0x614>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d00e      	beq.n	800763e <HAL_TIM_ConfigClockSource+0x52e>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a40      	ldr	r2, [pc, #256]	; (8007728 <HAL_TIM_ConfigClockSource+0x618>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d009      	beq.n	800763e <HAL_TIM_ConfigClockSource+0x52e>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a3f      	ldr	r2, [pc, #252]	; (800772c <HAL_TIM_ConfigClockSource+0x61c>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d004      	beq.n	800763e <HAL_TIM_ConfigClockSource+0x52e>
 8007634:	f241 4191 	movw	r1, #5265	; 0x1491
 8007638:	483d      	ldr	r0, [pc, #244]	; (8007730 <HAL_TIM_ConfigClockSource+0x620>)
 800763a:	f7fa fd41 	bl	80020c0 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	685b      	ldr	r3, [r3, #4]
 8007642:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007646:	d014      	beq.n	8007672 <HAL_TIM_ConfigClockSource+0x562>
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d010      	beq.n	8007672 <HAL_TIM_ConfigClockSource+0x562>
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d00c      	beq.n	8007672 <HAL_TIM_ConfigClockSource+0x562>
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	2b02      	cmp	r3, #2
 800765e:	d008      	beq.n	8007672 <HAL_TIM_ConfigClockSource+0x562>
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	2b0a      	cmp	r3, #10
 8007666:	d004      	beq.n	8007672 <HAL_TIM_ConfigClockSource+0x562>
 8007668:	f241 4194 	movw	r1, #5268	; 0x1494
 800766c:	4830      	ldr	r0, [pc, #192]	; (8007730 <HAL_TIM_ConfigClockSource+0x620>)
 800766e:	f7fa fd27 	bl	80020c0 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	68db      	ldr	r3, [r3, #12]
 8007676:	2b0f      	cmp	r3, #15
 8007678:	d904      	bls.n	8007684 <HAL_TIM_ConfigClockSource+0x574>
 800767a:	f241 4195 	movw	r1, #5269	; 0x1495
 800767e:	482c      	ldr	r0, [pc, #176]	; (8007730 <HAL_TIM_ConfigClockSource+0x620>)
 8007680:	f7fa fd1e 	bl	80020c0 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6818      	ldr	r0, [r3, #0]
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	6859      	ldr	r1, [r3, #4]
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	68db      	ldr	r3, [r3, #12]
 8007690:	461a      	mov	r2, r3
 8007692:	f000 fb4b 	bl	8007d2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	2140      	movs	r1, #64	; 0x40
 800769c:	4618      	mov	r0, r3
 800769e:	f000 fba2 	bl	8007de6 <TIM_ITRx_SetConfig>
      break;
 80076a2:	e02e      	b.n	8007702 <HAL_TIM_ConfigClockSource+0x5f2>
        assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a1c      	ldr	r2, [pc, #112]	; (800771c <HAL_TIM_ConfigClockSource+0x60c>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d01d      	beq.n	80076ea <HAL_TIM_ConfigClockSource+0x5da>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a1b      	ldr	r2, [pc, #108]	; (8007720 <HAL_TIM_ConfigClockSource+0x610>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d018      	beq.n	80076ea <HAL_TIM_ConfigClockSource+0x5da>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076c0:	d013      	beq.n	80076ea <HAL_TIM_ConfigClockSource+0x5da>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4a17      	ldr	r2, [pc, #92]	; (8007724 <HAL_TIM_ConfigClockSource+0x614>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d00e      	beq.n	80076ea <HAL_TIM_ConfigClockSource+0x5da>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a15      	ldr	r2, [pc, #84]	; (8007728 <HAL_TIM_ConfigClockSource+0x618>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d009      	beq.n	80076ea <HAL_TIM_ConfigClockSource+0x5da>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a14      	ldr	r2, [pc, #80]	; (800772c <HAL_TIM_ConfigClockSource+0x61c>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d004      	beq.n	80076ea <HAL_TIM_ConfigClockSource+0x5da>
 80076e0:	f241 41a4 	movw	r1, #5284	; 0x14a4
 80076e4:	4812      	ldr	r0, [pc, #72]	; (8007730 <HAL_TIM_ConfigClockSource+0x620>)
 80076e6:	f7fa fceb 	bl	80020c0 <assert_failed>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681a      	ldr	r2, [r3, #0]
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4619      	mov	r1, r3
 80076f4:	4610      	mov	r0, r2
 80076f6:	f000 fb76 	bl	8007de6 <TIM_ITRx_SetConfig>
        break;
 80076fa:	e002      	b.n	8007702 <HAL_TIM_ConfigClockSource+0x5f2>
      break;
 80076fc:	bf00      	nop
 80076fe:	e000      	b.n	8007702 <HAL_TIM_ConfigClockSource+0x5f2>
      break;
 8007700:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2201      	movs	r2, #1
 8007706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2200      	movs	r2, #0
 800770e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007712:	2300      	movs	r3, #0
}
 8007714:	4618      	mov	r0, r3
 8007716:	3710      	adds	r7, #16
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}
 800771c:	40012c00 	.word	0x40012c00
 8007720:	40013400 	.word	0x40013400
 8007724:	40000400 	.word	0x40000400
 8007728:	40000800 	.word	0x40000800
 800772c:	40000c00 	.word	0x40000c00
 8007730:	0800f064 	.word	0x0800f064

08007734 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007734:	b480      	push	{r7}
 8007736:	b083      	sub	sp, #12
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800773c:	bf00      	nop
 800773e:	370c      	adds	r7, #12
 8007740:	46bd      	mov	sp, r7
 8007742:	bc80      	pop	{r7}
 8007744:	4770      	bx	lr

08007746 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007746:	b480      	push	{r7}
 8007748:	b083      	sub	sp, #12
 800774a:	af00      	add	r7, sp, #0
 800774c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800774e:	bf00      	nop
 8007750:	370c      	adds	r7, #12
 8007752:	46bd      	mov	sp, r7
 8007754:	bc80      	pop	{r7}
 8007756:	4770      	bx	lr

08007758 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007758:	b480      	push	{r7}
 800775a:	b083      	sub	sp, #12
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8007760:	bf00      	nop
 8007762:	370c      	adds	r7, #12
 8007764:	46bd      	mov	sp, r7
 8007766:	bc80      	pop	{r7}
 8007768:	4770      	bx	lr

0800776a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800776a:	b480      	push	{r7}
 800776c:	b083      	sub	sp, #12
 800776e:	af00      	add	r7, sp, #0
 8007770:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007772:	bf00      	nop
 8007774:	370c      	adds	r7, #12
 8007776:	46bd      	mov	sp, r7
 8007778:	bc80      	pop	{r7}
 800777a:	4770      	bx	lr

0800777c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800777c:	b480      	push	{r7}
 800777e:	b083      	sub	sp, #12
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8007784:	bf00      	nop
 8007786:	370c      	adds	r7, #12
 8007788:	46bd      	mov	sp, r7
 800778a:	bc80      	pop	{r7}
 800778c:	4770      	bx	lr

0800778e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800778e:	b480      	push	{r7}
 8007790:	b083      	sub	sp, #12
 8007792:	af00      	add	r7, sp, #0
 8007794:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007796:	bf00      	nop
 8007798:	370c      	adds	r7, #12
 800779a:	46bd      	mov	sp, r7
 800779c:	bc80      	pop	{r7}
 800779e:	4770      	bx	lr

080077a0 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b083      	sub	sp, #12
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 80077a8:	bf00      	nop
 80077aa:	370c      	adds	r7, #12
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bc80      	pop	{r7}
 80077b0:	4770      	bx	lr

080077b2 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80077b2:	b480      	push	{r7}
 80077b4:	b083      	sub	sp, #12
 80077b6:	af00      	add	r7, sp, #0
 80077b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80077ba:	bf00      	nop
 80077bc:	370c      	adds	r7, #12
 80077be:	46bd      	mov	sp, r7
 80077c0:	bc80      	pop	{r7}
 80077c2:	4770      	bx	lr

080077c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b085      	sub	sp, #20
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
 80077cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	4a33      	ldr	r2, [pc, #204]	; (80078a4 <TIM_Base_SetConfig+0xe0>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d013      	beq.n	8007804 <TIM_Base_SetConfig+0x40>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	4a32      	ldr	r2, [pc, #200]	; (80078a8 <TIM_Base_SetConfig+0xe4>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d00f      	beq.n	8007804 <TIM_Base_SetConfig+0x40>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077ea:	d00b      	beq.n	8007804 <TIM_Base_SetConfig+0x40>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	4a2f      	ldr	r2, [pc, #188]	; (80078ac <TIM_Base_SetConfig+0xe8>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d007      	beq.n	8007804 <TIM_Base_SetConfig+0x40>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	4a2e      	ldr	r2, [pc, #184]	; (80078b0 <TIM_Base_SetConfig+0xec>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d003      	beq.n	8007804 <TIM_Base_SetConfig+0x40>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	4a2d      	ldr	r2, [pc, #180]	; (80078b4 <TIM_Base_SetConfig+0xf0>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d108      	bne.n	8007816 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800780a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	685b      	ldr	r3, [r3, #4]
 8007810:	68fa      	ldr	r2, [r7, #12]
 8007812:	4313      	orrs	r3, r2
 8007814:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	4a22      	ldr	r2, [pc, #136]	; (80078a4 <TIM_Base_SetConfig+0xe0>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d013      	beq.n	8007846 <TIM_Base_SetConfig+0x82>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	4a21      	ldr	r2, [pc, #132]	; (80078a8 <TIM_Base_SetConfig+0xe4>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d00f      	beq.n	8007846 <TIM_Base_SetConfig+0x82>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800782c:	d00b      	beq.n	8007846 <TIM_Base_SetConfig+0x82>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	4a1e      	ldr	r2, [pc, #120]	; (80078ac <TIM_Base_SetConfig+0xe8>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d007      	beq.n	8007846 <TIM_Base_SetConfig+0x82>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	4a1d      	ldr	r2, [pc, #116]	; (80078b0 <TIM_Base_SetConfig+0xec>)
 800783a:	4293      	cmp	r3, r2
 800783c:	d003      	beq.n	8007846 <TIM_Base_SetConfig+0x82>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	4a1c      	ldr	r2, [pc, #112]	; (80078b4 <TIM_Base_SetConfig+0xf0>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d108      	bne.n	8007858 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800784c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	68db      	ldr	r3, [r3, #12]
 8007852:	68fa      	ldr	r2, [r7, #12]
 8007854:	4313      	orrs	r3, r2
 8007856:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	695b      	ldr	r3, [r3, #20]
 8007862:	4313      	orrs	r3, r2
 8007864:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	68fa      	ldr	r2, [r7, #12]
 800786a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	689a      	ldr	r2, [r3, #8]
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	681a      	ldr	r2, [r3, #0]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	4a09      	ldr	r2, [pc, #36]	; (80078a4 <TIM_Base_SetConfig+0xe0>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d003      	beq.n	800788c <TIM_Base_SetConfig+0xc8>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	4a08      	ldr	r2, [pc, #32]	; (80078a8 <TIM_Base_SetConfig+0xe4>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d103      	bne.n	8007894 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	691a      	ldr	r2, [r3, #16]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2201      	movs	r2, #1
 8007898:	615a      	str	r2, [r3, #20]
}
 800789a:	bf00      	nop
 800789c:	3714      	adds	r7, #20
 800789e:	46bd      	mov	sp, r7
 80078a0:	bc80      	pop	{r7}
 80078a2:	4770      	bx	lr
 80078a4:	40012c00 	.word	0x40012c00
 80078a8:	40013400 	.word	0x40013400
 80078ac:	40000400 	.word	0x40000400
 80078b0:	40000800 	.word	0x40000800
 80078b4:	40000c00 	.word	0x40000c00

080078b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b086      	sub	sp, #24
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
 80078c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6a1b      	ldr	r3, [r3, #32]
 80078c6:	f023 0201 	bic.w	r2, r3, #1
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6a1b      	ldr	r3, [r3, #32]
 80078d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	685b      	ldr	r3, [r3, #4]
 80078d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	699b      	ldr	r3, [r3, #24]
 80078de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	f023 0303 	bic.w	r3, r3, #3
 80078ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	68fa      	ldr	r2, [r7, #12]
 80078f6:	4313      	orrs	r3, r2
 80078f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	f023 0302 	bic.w	r3, r3, #2
 8007900:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	689b      	ldr	r3, [r3, #8]
 8007906:	697a      	ldr	r2, [r7, #20]
 8007908:	4313      	orrs	r3, r2
 800790a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	4a34      	ldr	r2, [pc, #208]	; (80079e0 <TIM_OC1_SetConfig+0x128>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d003      	beq.n	800791c <TIM_OC1_SetConfig+0x64>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	4a33      	ldr	r2, [pc, #204]	; (80079e4 <TIM_OC1_SetConfig+0x12c>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d119      	bne.n	8007950 <TIM_OC1_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	68db      	ldr	r3, [r3, #12]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d008      	beq.n	8007936 <TIM_OC1_SetConfig+0x7e>
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	68db      	ldr	r3, [r3, #12]
 8007928:	2b08      	cmp	r3, #8
 800792a:	d004      	beq.n	8007936 <TIM_OC1_SetConfig+0x7e>
 800792c:	f641 2141 	movw	r1, #6721	; 0x1a41
 8007930:	482d      	ldr	r0, [pc, #180]	; (80079e8 <TIM_OC1_SetConfig+0x130>)
 8007932:	f7fa fbc5 	bl	80020c0 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	f023 0308 	bic.w	r3, r3, #8
 800793c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	68db      	ldr	r3, [r3, #12]
 8007942:	697a      	ldr	r2, [r7, #20]
 8007944:	4313      	orrs	r3, r2
 8007946:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	f023 0304 	bic.w	r3, r3, #4
 800794e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	4a23      	ldr	r2, [pc, #140]	; (80079e0 <TIM_OC1_SetConfig+0x128>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d003      	beq.n	8007960 <TIM_OC1_SetConfig+0xa8>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	4a22      	ldr	r2, [pc, #136]	; (80079e4 <TIM_OC1_SetConfig+0x12c>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d12d      	bne.n	80079bc <TIM_OC1_SetConfig+0x104>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	699b      	ldr	r3, [r3, #24]
 8007964:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007968:	d008      	beq.n	800797c <TIM_OC1_SetConfig+0xc4>
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	699b      	ldr	r3, [r3, #24]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d004      	beq.n	800797c <TIM_OC1_SetConfig+0xc4>
 8007972:	f641 214e 	movw	r1, #6734	; 0x1a4e
 8007976:	481c      	ldr	r0, [pc, #112]	; (80079e8 <TIM_OC1_SetConfig+0x130>)
 8007978:	f7fa fba2 	bl	80020c0 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	695b      	ldr	r3, [r3, #20]
 8007980:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007984:	d008      	beq.n	8007998 <TIM_OC1_SetConfig+0xe0>
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	695b      	ldr	r3, [r3, #20]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d004      	beq.n	8007998 <TIM_OC1_SetConfig+0xe0>
 800798e:	f641 214f 	movw	r1, #6735	; 0x1a4f
 8007992:	4815      	ldr	r0, [pc, #84]	; (80079e8 <TIM_OC1_SetConfig+0x130>)
 8007994:	f7fa fb94 	bl	80020c0 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800799e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80079a0:	693b      	ldr	r3, [r7, #16]
 80079a2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80079a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	695b      	ldr	r3, [r3, #20]
 80079ac:	693a      	ldr	r2, [r7, #16]
 80079ae:	4313      	orrs	r3, r2
 80079b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	699b      	ldr	r3, [r3, #24]
 80079b6:	693a      	ldr	r2, [r7, #16]
 80079b8:	4313      	orrs	r3, r2
 80079ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	693a      	ldr	r2, [r7, #16]
 80079c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	68fa      	ldr	r2, [r7, #12]
 80079c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	685a      	ldr	r2, [r3, #4]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	697a      	ldr	r2, [r7, #20]
 80079d4:	621a      	str	r2, [r3, #32]
}
 80079d6:	bf00      	nop
 80079d8:	3718      	adds	r7, #24
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}
 80079de:	bf00      	nop
 80079e0:	40012c00 	.word	0x40012c00
 80079e4:	40013400 	.word	0x40013400
 80079e8:	0800f064 	.word	0x0800f064

080079ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b086      	sub	sp, #24
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
 80079f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6a1b      	ldr	r3, [r3, #32]
 80079fa:	f023 0210 	bic.w	r2, r3, #16
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6a1b      	ldr	r3, [r3, #32]
 8007a06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	685b      	ldr	r3, [r3, #4]
 8007a0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	699b      	ldr	r3, [r3, #24]
 8007a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	021b      	lsls	r3, r3, #8
 8007a2a:	68fa      	ldr	r2, [r7, #12]
 8007a2c:	4313      	orrs	r3, r2
 8007a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007a30:	697b      	ldr	r3, [r7, #20]
 8007a32:	f023 0320 	bic.w	r3, r3, #32
 8007a36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	689b      	ldr	r3, [r3, #8]
 8007a3c:	011b      	lsls	r3, r3, #4
 8007a3e:	697a      	ldr	r2, [r7, #20]
 8007a40:	4313      	orrs	r3, r2
 8007a42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	4a35      	ldr	r2, [pc, #212]	; (8007b1c <TIM_OC2_SetConfig+0x130>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d003      	beq.n	8007a54 <TIM_OC2_SetConfig+0x68>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	4a34      	ldr	r2, [pc, #208]	; (8007b20 <TIM_OC2_SetConfig+0x134>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d11a      	bne.n	8007a8a <TIM_OC2_SetConfig+0x9e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	68db      	ldr	r3, [r3, #12]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d008      	beq.n	8007a6e <TIM_OC2_SetConfig+0x82>
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	68db      	ldr	r3, [r3, #12]
 8007a60:	2b08      	cmp	r3, #8
 8007a62:	d004      	beq.n	8007a6e <TIM_OC2_SetConfig+0x82>
 8007a64:	f641 218c 	movw	r1, #6796	; 0x1a8c
 8007a68:	482e      	ldr	r0, [pc, #184]	; (8007b24 <TIM_OC2_SetConfig+0x138>)
 8007a6a:	f7fa fb29 	bl	80020c0 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	68db      	ldr	r3, [r3, #12]
 8007a7a:	011b      	lsls	r3, r3, #4
 8007a7c:	697a      	ldr	r2, [r7, #20]
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a88:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	4a23      	ldr	r2, [pc, #140]	; (8007b1c <TIM_OC2_SetConfig+0x130>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d003      	beq.n	8007a9a <TIM_OC2_SetConfig+0xae>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	4a22      	ldr	r2, [pc, #136]	; (8007b20 <TIM_OC2_SetConfig+0x134>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d12f      	bne.n	8007afa <TIM_OC2_SetConfig+0x10e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	699b      	ldr	r3, [r3, #24]
 8007a9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007aa2:	d008      	beq.n	8007ab6 <TIM_OC2_SetConfig+0xca>
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	699b      	ldr	r3, [r3, #24]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d004      	beq.n	8007ab6 <TIM_OC2_SetConfig+0xca>
 8007aac:	f641 219a 	movw	r1, #6810	; 0x1a9a
 8007ab0:	481c      	ldr	r0, [pc, #112]	; (8007b24 <TIM_OC2_SetConfig+0x138>)
 8007ab2:	f7fa fb05 	bl	80020c0 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	695b      	ldr	r3, [r3, #20]
 8007aba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007abe:	d008      	beq.n	8007ad2 <TIM_OC2_SetConfig+0xe6>
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	695b      	ldr	r3, [r3, #20]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d004      	beq.n	8007ad2 <TIM_OC2_SetConfig+0xe6>
 8007ac8:	f641 219b 	movw	r1, #6811	; 0x1a9b
 8007acc:	4815      	ldr	r0, [pc, #84]	; (8007b24 <TIM_OC2_SetConfig+0x138>)
 8007ace:	f7fa faf7 	bl	80020c0 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007ad8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007ada:	693b      	ldr	r3, [r7, #16]
 8007adc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007ae0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	695b      	ldr	r3, [r3, #20]
 8007ae6:	009b      	lsls	r3, r3, #2
 8007ae8:	693a      	ldr	r2, [r7, #16]
 8007aea:	4313      	orrs	r3, r2
 8007aec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	699b      	ldr	r3, [r3, #24]
 8007af2:	009b      	lsls	r3, r3, #2
 8007af4:	693a      	ldr	r2, [r7, #16]
 8007af6:	4313      	orrs	r3, r2
 8007af8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	693a      	ldr	r2, [r7, #16]
 8007afe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	68fa      	ldr	r2, [r7, #12]
 8007b04:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	685a      	ldr	r2, [r3, #4]
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	697a      	ldr	r2, [r7, #20]
 8007b12:	621a      	str	r2, [r3, #32]
}
 8007b14:	bf00      	nop
 8007b16:	3718      	adds	r7, #24
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}
 8007b1c:	40012c00 	.word	0x40012c00
 8007b20:	40013400 	.word	0x40013400
 8007b24:	0800f064 	.word	0x0800f064

08007b28 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b086      	sub	sp, #24
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
 8007b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6a1b      	ldr	r3, [r3, #32]
 8007b36:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6a1b      	ldr	r3, [r3, #32]
 8007b42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	685b      	ldr	r3, [r3, #4]
 8007b48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	69db      	ldr	r3, [r3, #28]
 8007b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f023 0303 	bic.w	r3, r3, #3
 8007b5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	68fa      	ldr	r2, [r7, #12]
 8007b66:	4313      	orrs	r3, r2
 8007b68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007b70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	689b      	ldr	r3, [r3, #8]
 8007b76:	021b      	lsls	r3, r3, #8
 8007b78:	697a      	ldr	r2, [r7, #20]
 8007b7a:	4313      	orrs	r3, r2
 8007b7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	4a35      	ldr	r2, [pc, #212]	; (8007c58 <TIM_OC3_SetConfig+0x130>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d003      	beq.n	8007b8e <TIM_OC3_SetConfig+0x66>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	4a34      	ldr	r2, [pc, #208]	; (8007c5c <TIM_OC3_SetConfig+0x134>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d11a      	bne.n	8007bc4 <TIM_OC3_SetConfig+0x9c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	68db      	ldr	r3, [r3, #12]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d008      	beq.n	8007ba8 <TIM_OC3_SetConfig+0x80>
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	68db      	ldr	r3, [r3, #12]
 8007b9a:	2b08      	cmp	r3, #8
 8007b9c:	d004      	beq.n	8007ba8 <TIM_OC3_SetConfig+0x80>
 8007b9e:	f641 21d7 	movw	r1, #6871	; 0x1ad7
 8007ba2:	482f      	ldr	r0, [pc, #188]	; (8007c60 <TIM_OC3_SetConfig+0x138>)
 8007ba4:	f7fa fa8c 	bl	80020c0 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007bae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	68db      	ldr	r3, [r3, #12]
 8007bb4:	021b      	lsls	r3, r3, #8
 8007bb6:	697a      	ldr	r2, [r7, #20]
 8007bb8:	4313      	orrs	r3, r2
 8007bba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007bc2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	4a24      	ldr	r2, [pc, #144]	; (8007c58 <TIM_OC3_SetConfig+0x130>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d003      	beq.n	8007bd4 <TIM_OC3_SetConfig+0xac>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	4a23      	ldr	r2, [pc, #140]	; (8007c5c <TIM_OC3_SetConfig+0x134>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d12f      	bne.n	8007c34 <TIM_OC3_SetConfig+0x10c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	699b      	ldr	r3, [r3, #24]
 8007bd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007bdc:	d008      	beq.n	8007bf0 <TIM_OC3_SetConfig+0xc8>
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	699b      	ldr	r3, [r3, #24]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d004      	beq.n	8007bf0 <TIM_OC3_SetConfig+0xc8>
 8007be6:	f641 21e4 	movw	r1, #6884	; 0x1ae4
 8007bea:	481d      	ldr	r0, [pc, #116]	; (8007c60 <TIM_OC3_SetConfig+0x138>)
 8007bec:	f7fa fa68 	bl	80020c0 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	695b      	ldr	r3, [r3, #20]
 8007bf4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bf8:	d008      	beq.n	8007c0c <TIM_OC3_SetConfig+0xe4>
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	695b      	ldr	r3, [r3, #20]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d004      	beq.n	8007c0c <TIM_OC3_SetConfig+0xe4>
 8007c02:	f641 21e5 	movw	r1, #6885	; 0x1ae5
 8007c06:	4816      	ldr	r0, [pc, #88]	; (8007c60 <TIM_OC3_SetConfig+0x138>)
 8007c08:	f7fa fa5a 	bl	80020c0 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007c0c:	693b      	ldr	r3, [r7, #16]
 8007c0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c12:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007c14:	693b      	ldr	r3, [r7, #16]
 8007c16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007c1a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	695b      	ldr	r3, [r3, #20]
 8007c20:	011b      	lsls	r3, r3, #4
 8007c22:	693a      	ldr	r2, [r7, #16]
 8007c24:	4313      	orrs	r3, r2
 8007c26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	699b      	ldr	r3, [r3, #24]
 8007c2c:	011b      	lsls	r3, r3, #4
 8007c2e:	693a      	ldr	r2, [r7, #16]
 8007c30:	4313      	orrs	r3, r2
 8007c32:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	693a      	ldr	r2, [r7, #16]
 8007c38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	68fa      	ldr	r2, [r7, #12]
 8007c3e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	685a      	ldr	r2, [r3, #4]
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	697a      	ldr	r2, [r7, #20]
 8007c4c:	621a      	str	r2, [r3, #32]
}
 8007c4e:	bf00      	nop
 8007c50:	3718      	adds	r7, #24
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}
 8007c56:	bf00      	nop
 8007c58:	40012c00 	.word	0x40012c00
 8007c5c:	40013400 	.word	0x40013400
 8007c60:	0800f064 	.word	0x0800f064

08007c64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b086      	sub	sp, #24
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
 8007c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6a1b      	ldr	r3, [r3, #32]
 8007c72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6a1b      	ldr	r3, [r3, #32]
 8007c7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	69db      	ldr	r3, [r3, #28]
 8007c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	021b      	lsls	r3, r3, #8
 8007ca2:	68fa      	ldr	r2, [r7, #12]
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007ca8:	693b      	ldr	r3, [r7, #16]
 8007caa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007cae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	689b      	ldr	r3, [r3, #8]
 8007cb4:	031b      	lsls	r3, r3, #12
 8007cb6:	693a      	ldr	r2, [r7, #16]
 8007cb8:	4313      	orrs	r3, r2
 8007cba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	4a18      	ldr	r2, [pc, #96]	; (8007d20 <TIM_OC4_SetConfig+0xbc>)
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d003      	beq.n	8007ccc <TIM_OC4_SetConfig+0x68>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	4a17      	ldr	r2, [pc, #92]	; (8007d24 <TIM_OC4_SetConfig+0xc0>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d117      	bne.n	8007cfc <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	695b      	ldr	r3, [r3, #20]
 8007cd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007cd4:	d008      	beq.n	8007ce8 <TIM_OC4_SetConfig+0x84>
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	695b      	ldr	r3, [r3, #20]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d004      	beq.n	8007ce8 <TIM_OC4_SetConfig+0x84>
 8007cde:	f641 3123 	movw	r1, #6947	; 0x1b23
 8007ce2:	4811      	ldr	r0, [pc, #68]	; (8007d28 <TIM_OC4_SetConfig+0xc4>)
 8007ce4:	f7fa f9ec 	bl	80020c0 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007cee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	695b      	ldr	r3, [r3, #20]
 8007cf4:	019b      	lsls	r3, r3, #6
 8007cf6:	697a      	ldr	r2, [r7, #20]
 8007cf8:	4313      	orrs	r3, r2
 8007cfa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	697a      	ldr	r2, [r7, #20]
 8007d00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	68fa      	ldr	r2, [r7, #12]
 8007d06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	685a      	ldr	r2, [r3, #4]
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	693a      	ldr	r2, [r7, #16]
 8007d14:	621a      	str	r2, [r3, #32]
}
 8007d16:	bf00      	nop
 8007d18:	3718      	adds	r7, #24
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}
 8007d1e:	bf00      	nop
 8007d20:	40012c00 	.word	0x40012c00
 8007d24:	40013400 	.word	0x40013400
 8007d28:	0800f064 	.word	0x0800f064

08007d2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b087      	sub	sp, #28
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	60f8      	str	r0, [r7, #12]
 8007d34:	60b9      	str	r1, [r7, #8]
 8007d36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	6a1b      	ldr	r3, [r3, #32]
 8007d3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	6a1b      	ldr	r3, [r3, #32]
 8007d42:	f023 0201 	bic.w	r2, r3, #1
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	699b      	ldr	r3, [r3, #24]
 8007d4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007d50:	693b      	ldr	r3, [r7, #16]
 8007d52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007d56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	011b      	lsls	r3, r3, #4
 8007d5c:	693a      	ldr	r2, [r7, #16]
 8007d5e:	4313      	orrs	r3, r2
 8007d60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007d62:	697b      	ldr	r3, [r7, #20]
 8007d64:	f023 030a 	bic.w	r3, r3, #10
 8007d68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007d6a:	697a      	ldr	r2, [r7, #20]
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	693a      	ldr	r2, [r7, #16]
 8007d76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	697a      	ldr	r2, [r7, #20]
 8007d7c:	621a      	str	r2, [r3, #32]
}
 8007d7e:	bf00      	nop
 8007d80:	371c      	adds	r7, #28
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bc80      	pop	{r7}
 8007d86:	4770      	bx	lr

08007d88 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b087      	sub	sp, #28
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	60f8      	str	r0, [r7, #12]
 8007d90:	60b9      	str	r1, [r7, #8]
 8007d92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	6a1b      	ldr	r3, [r3, #32]
 8007d98:	f023 0210 	bic.w	r2, r3, #16
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	699b      	ldr	r3, [r3, #24]
 8007da4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	6a1b      	ldr	r3, [r3, #32]
 8007daa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007dac:	697b      	ldr	r3, [r7, #20]
 8007dae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007db2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	031b      	lsls	r3, r3, #12
 8007db8:	697a      	ldr	r2, [r7, #20]
 8007dba:	4313      	orrs	r3, r2
 8007dbc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007dbe:	693b      	ldr	r3, [r7, #16]
 8007dc0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007dc4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	011b      	lsls	r3, r3, #4
 8007dca:	693a      	ldr	r2, [r7, #16]
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	697a      	ldr	r2, [r7, #20]
 8007dd4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	693a      	ldr	r2, [r7, #16]
 8007dda:	621a      	str	r2, [r3, #32]
}
 8007ddc:	bf00      	nop
 8007dde:	371c      	adds	r7, #28
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bc80      	pop	{r7}
 8007de4:	4770      	bx	lr

08007de6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007de6:	b480      	push	{r7}
 8007de8:	b085      	sub	sp, #20
 8007dea:	af00      	add	r7, sp, #0
 8007dec:	6078      	str	r0, [r7, #4]
 8007dee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	689b      	ldr	r3, [r3, #8]
 8007df4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dfc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007dfe:	683a      	ldr	r2, [r7, #0]
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	4313      	orrs	r3, r2
 8007e04:	f043 0307 	orr.w	r3, r3, #7
 8007e08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	68fa      	ldr	r2, [r7, #12]
 8007e0e:	609a      	str	r2, [r3, #8]
}
 8007e10:	bf00      	nop
 8007e12:	3714      	adds	r7, #20
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bc80      	pop	{r7}
 8007e18:	4770      	bx	lr

08007e1a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007e1a:	b480      	push	{r7}
 8007e1c:	b087      	sub	sp, #28
 8007e1e:	af00      	add	r7, sp, #0
 8007e20:	60f8      	str	r0, [r7, #12]
 8007e22:	60b9      	str	r1, [r7, #8]
 8007e24:	607a      	str	r2, [r7, #4]
 8007e26:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	689b      	ldr	r3, [r3, #8]
 8007e2c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e2e:	697b      	ldr	r3, [r7, #20]
 8007e30:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007e34:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	021a      	lsls	r2, r3, #8
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	431a      	orrs	r2, r3
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	4313      	orrs	r3, r2
 8007e42:	697a      	ldr	r2, [r7, #20]
 8007e44:	4313      	orrs	r3, r2
 8007e46:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	697a      	ldr	r2, [r7, #20]
 8007e4c:	609a      	str	r2, [r3, #8]
}
 8007e4e:	bf00      	nop
 8007e50:	371c      	adds	r7, #28
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bc80      	pop	{r7}
 8007e56:	4770      	bx	lr

08007e58 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b086      	sub	sp, #24
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	60f8      	str	r0, [r7, #12]
 8007e60:	60b9      	str	r1, [r7, #8]
 8007e62:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	4a26      	ldr	r2, [pc, #152]	; (8007f00 <TIM_CCxChannelCmd+0xa8>)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d018      	beq.n	8007e9e <TIM_CCxChannelCmd+0x46>
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	4a25      	ldr	r2, [pc, #148]	; (8007f04 <TIM_CCxChannelCmd+0xac>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d014      	beq.n	8007e9e <TIM_CCxChannelCmd+0x46>
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e7a:	d010      	beq.n	8007e9e <TIM_CCxChannelCmd+0x46>
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	4a22      	ldr	r2, [pc, #136]	; (8007f08 <TIM_CCxChannelCmd+0xb0>)
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d00c      	beq.n	8007e9e <TIM_CCxChannelCmd+0x46>
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	4a21      	ldr	r2, [pc, #132]	; (8007f0c <TIM_CCxChannelCmd+0xb4>)
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d008      	beq.n	8007e9e <TIM_CCxChannelCmd+0x46>
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	4a20      	ldr	r2, [pc, #128]	; (8007f10 <TIM_CCxChannelCmd+0xb8>)
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d004      	beq.n	8007e9e <TIM_CCxChannelCmd+0x46>
 8007e94:	f641 5109 	movw	r1, #7433	; 0x1d09
 8007e98:	481e      	ldr	r0, [pc, #120]	; (8007f14 <TIM_CCxChannelCmd+0xbc>)
 8007e9a:	f7fa f911 	bl	80020c0 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d010      	beq.n	8007ec6 <TIM_CCxChannelCmd+0x6e>
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	2b04      	cmp	r3, #4
 8007ea8:	d00d      	beq.n	8007ec6 <TIM_CCxChannelCmd+0x6e>
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	2b08      	cmp	r3, #8
 8007eae:	d00a      	beq.n	8007ec6 <TIM_CCxChannelCmd+0x6e>
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	2b0c      	cmp	r3, #12
 8007eb4:	d007      	beq.n	8007ec6 <TIM_CCxChannelCmd+0x6e>
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	2b3c      	cmp	r3, #60	; 0x3c
 8007eba:	d004      	beq.n	8007ec6 <TIM_CCxChannelCmd+0x6e>
 8007ebc:	f641 510a 	movw	r1, #7434	; 0x1d0a
 8007ec0:	4814      	ldr	r0, [pc, #80]	; (8007f14 <TIM_CCxChannelCmd+0xbc>)
 8007ec2:	f7fa f8fd 	bl	80020c0 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	f003 031f 	and.w	r3, r3, #31
 8007ecc:	2201      	movs	r2, #1
 8007ece:	fa02 f303 	lsl.w	r3, r2, r3
 8007ed2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	6a1a      	ldr	r2, [r3, #32]
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	43db      	mvns	r3, r3
 8007edc:	401a      	ands	r2, r3
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	6a1a      	ldr	r2, [r3, #32]
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	f003 031f 	and.w	r3, r3, #31
 8007eec:	6879      	ldr	r1, [r7, #4]
 8007eee:	fa01 f303 	lsl.w	r3, r1, r3
 8007ef2:	431a      	orrs	r2, r3
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	621a      	str	r2, [r3, #32]
}
 8007ef8:	bf00      	nop
 8007efa:	3718      	adds	r7, #24
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bd80      	pop	{r7, pc}
 8007f00:	40012c00 	.word	0x40012c00
 8007f04:	40013400 	.word	0x40013400
 8007f08:	40000400 	.word	0x40000400
 8007f0c:	40000800 	.word	0x40000800
 8007f10:	40000c00 	.word	0x40000c00
 8007f14:	0800f064 	.word	0x0800f064

08007f18 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b083      	sub	sp, #12
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	4a1c      	ldr	r2, [pc, #112]	; (8007f94 <TIM_ResetCallback+0x7c>)
 8007f24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	4a1b      	ldr	r2, [pc, #108]	; (8007f98 <TIM_ResetCallback+0x80>)
 8007f2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	4a1a      	ldr	r2, [pc, #104]	; (8007f9c <TIM_ResetCallback+0x84>)
 8007f34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	4a19      	ldr	r2, [pc, #100]	; (8007fa0 <TIM_ResetCallback+0x88>)
 8007f3c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	4a18      	ldr	r2, [pc, #96]	; (8007fa4 <TIM_ResetCallback+0x8c>)
 8007f44:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	4a17      	ldr	r2, [pc, #92]	; (8007fa8 <TIM_ResetCallback+0x90>)
 8007f4c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	4a16      	ldr	r2, [pc, #88]	; (8007fac <TIM_ResetCallback+0x94>)
 8007f54:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	4a15      	ldr	r2, [pc, #84]	; (8007fb0 <TIM_ResetCallback+0x98>)
 8007f5c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	4a14      	ldr	r2, [pc, #80]	; (8007fb4 <TIM_ResetCallback+0x9c>)
 8007f64:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	4a13      	ldr	r2, [pc, #76]	; (8007fb8 <TIM_ResetCallback+0xa0>)
 8007f6c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	4a12      	ldr	r2, [pc, #72]	; (8007fbc <TIM_ResetCallback+0xa4>)
 8007f74:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	4a11      	ldr	r2, [pc, #68]	; (8007fc0 <TIM_ResetCallback+0xa8>)
 8007f7c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	4a10      	ldr	r2, [pc, #64]	; (8007fc4 <TIM_ResetCallback+0xac>)
 8007f84:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8007f88:	bf00      	nop
 8007f8a:	370c      	adds	r7, #12
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bc80      	pop	{r7}
 8007f90:	4770      	bx	lr
 8007f92:	bf00      	nop
 8007f94:	08002055 	.word	0x08002055
 8007f98:	08007735 	.word	0x08007735
 8007f9c:	0800778f 	.word	0x0800778f
 8007fa0:	080077a1 	.word	0x080077a1
 8007fa4:	0800200d 	.word	0x0800200d
 8007fa8:	08007759 	.word	0x08007759
 8007fac:	08007747 	.word	0x08007747
 8007fb0:	0800776b 	.word	0x0800776b
 8007fb4:	0800777d 	.word	0x0800777d
 8007fb8:	080077b3 	.word	0x080077b3
 8007fbc:	08008301 	.word	0x08008301
 8007fc0:	08008313 	.word	0x08008313
 8007fc4:	08008325 	.word	0x08008325

08007fc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b084      	sub	sp, #16
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
 8007fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	4a5c      	ldr	r2, [pc, #368]	; (8008148 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d027      	beq.n	800802c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	4a5a      	ldr	r2, [pc, #360]	; (800814c <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d022      	beq.n	800802c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fee:	d01d      	beq.n	800802c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	4a56      	ldr	r2, [pc, #344]	; (8008150 <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d018      	beq.n	800802c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	4a55      	ldr	r2, [pc, #340]	; (8008154 <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 8008000:	4293      	cmp	r3, r2
 8008002:	d013      	beq.n	800802c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	4a53      	ldr	r2, [pc, #332]	; (8008158 <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d00e      	beq.n	800802c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	4a52      	ldr	r2, [pc, #328]	; (800815c <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 8008014:	4293      	cmp	r3, r2
 8008016:	d009      	beq.n	800802c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	4a50      	ldr	r2, [pc, #320]	; (8008160 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 800801e:	4293      	cmp	r3, r2
 8008020:	d004      	beq.n	800802c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8008022:	f240 7186 	movw	r1, #1926	; 0x786
 8008026:	484f      	ldr	r0, [pc, #316]	; (8008164 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 8008028:	f7fa f84a 	bl	80020c0 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d020      	beq.n	8008076 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	2b10      	cmp	r3, #16
 800803a:	d01c      	beq.n	8008076 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	2b20      	cmp	r3, #32
 8008042:	d018      	beq.n	8008076 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	2b30      	cmp	r3, #48	; 0x30
 800804a:	d014      	beq.n	8008076 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	2b40      	cmp	r3, #64	; 0x40
 8008052:	d010      	beq.n	8008076 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	2b50      	cmp	r3, #80	; 0x50
 800805a:	d00c      	beq.n	8008076 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	2b60      	cmp	r3, #96	; 0x60
 8008062:	d008      	beq.n	8008076 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	2b70      	cmp	r3, #112	; 0x70
 800806a:	d004      	beq.n	8008076 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800806c:	f240 7187 	movw	r1, #1927	; 0x787
 8008070:	483c      	ldr	r0, [pc, #240]	; (8008164 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 8008072:	f7fa f825 	bl	80020c0 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	685b      	ldr	r3, [r3, #4]
 800807a:	2b80      	cmp	r3, #128	; 0x80
 800807c:	d008      	beq.n	8008090 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	685b      	ldr	r3, [r3, #4]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d004      	beq.n	8008090 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008086:	f44f 61f1 	mov.w	r1, #1928	; 0x788
 800808a:	4836      	ldr	r0, [pc, #216]	; (8008164 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 800808c:	f7fa f818 	bl	80020c0 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008096:	2b01      	cmp	r3, #1
 8008098:	d101      	bne.n	800809e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800809a:	2302      	movs	r3, #2
 800809c:	e050      	b.n	8008140 <HAL_TIMEx_MasterConfigSynchronization+0x178>
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2201      	movs	r2, #1
 80080a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2202      	movs	r2, #2
 80080aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	685b      	ldr	r3, [r3, #4]
 80080b4:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	689b      	ldr	r3, [r3, #8]
 80080bc:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080c4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	68fa      	ldr	r2, [r7, #12]
 80080cc:	4313      	orrs	r3, r2
 80080ce:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	68fa      	ldr	r2, [r7, #12]
 80080d6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	4a1a      	ldr	r2, [pc, #104]	; (8008148 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	d018      	beq.n	8008114 <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	4a19      	ldr	r2, [pc, #100]	; (800814c <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d013      	beq.n	8008114 <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080f4:	d00e      	beq.n	8008114 <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4a15      	ldr	r2, [pc, #84]	; (8008150 <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d009      	beq.n	8008114 <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	4a13      	ldr	r2, [pc, #76]	; (8008154 <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d004      	beq.n	8008114 <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	4a12      	ldr	r2, [pc, #72]	; (8008158 <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 8008110:	4293      	cmp	r3, r2
 8008112:	d10c      	bne.n	800812e <HAL_TIMEx_MasterConfigSynchronization+0x166>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800811a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	685b      	ldr	r3, [r3, #4]
 8008120:	68ba      	ldr	r2, [r7, #8]
 8008122:	4313      	orrs	r3, r2
 8008124:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	68ba      	ldr	r2, [r7, #8]
 800812c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2201      	movs	r2, #1
 8008132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2200      	movs	r2, #0
 800813a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800813e:	2300      	movs	r3, #0
}
 8008140:	4618      	mov	r0, r3
 8008142:	3710      	adds	r7, #16
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}
 8008148:	40012c00 	.word	0x40012c00
 800814c:	40013400 	.word	0x40013400
 8008150:	40000400 	.word	0x40000400
 8008154:	40000800 	.word	0x40000800
 8008158:	40000c00 	.word	0x40000c00
 800815c:	40001000 	.word	0x40001000
 8008160:	40001400 	.word	0x40001400
 8008164:	0800f09c 	.word	0x0800f09c

08008168 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b084      	sub	sp, #16
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
 8008170:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008172:	2300      	movs	r3, #0
 8008174:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	4a5e      	ldr	r2, [pc, #376]	; (80082f4 <HAL_TIMEx_ConfigBreakDeadTime+0x18c>)
 800817c:	4293      	cmp	r3, r2
 800817e:	d009      	beq.n	8008194 <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	4a5c      	ldr	r2, [pc, #368]	; (80082f8 <HAL_TIMEx_ConfigBreakDeadTime+0x190>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d004      	beq.n	8008194 <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 800818a:	f240 71c3 	movw	r1, #1987	; 0x7c3
 800818e:	485b      	ldr	r0, [pc, #364]	; (80082fc <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8008190:	f7f9 ff96 	bl	80020c0 <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800819c:	d008      	beq.n	80081b0 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d004      	beq.n	80081b0 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 80081a6:	f240 71c4 	movw	r1, #1988	; 0x7c4
 80081aa:	4854      	ldr	r0, [pc, #336]	; (80082fc <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 80081ac:	f7f9 ff88 	bl	80020c0 <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	685b      	ldr	r3, [r3, #4]
 80081b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081b8:	d008      	beq.n	80081cc <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	685b      	ldr	r3, [r3, #4]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d004      	beq.n	80081cc <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 80081c2:	f240 71c5 	movw	r1, #1989	; 0x7c5
 80081c6:	484d      	ldr	r0, [pc, #308]	; (80082fc <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 80081c8:	f7f9 ff7a 	bl	80020c0 <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	689b      	ldr	r3, [r3, #8]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d013      	beq.n	80081fc <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	689b      	ldr	r3, [r3, #8]
 80081d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081dc:	d00e      	beq.n	80081fc <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	689b      	ldr	r3, [r3, #8]
 80081e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081e6:	d009      	beq.n	80081fc <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	689b      	ldr	r3, [r3, #8]
 80081ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80081f0:	d004      	beq.n	80081fc <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 80081f2:	f240 71c6 	movw	r1, #1990	; 0x7c6
 80081f6:	4841      	ldr	r0, [pc, #260]	; (80082fc <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 80081f8:	f7f9 ff62 	bl	80020c0 <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	68db      	ldr	r3, [r3, #12]
 8008200:	2bff      	cmp	r3, #255	; 0xff
 8008202:	d904      	bls.n	800820e <HAL_TIMEx_ConfigBreakDeadTime+0xa6>
 8008204:	f240 71c7 	movw	r1, #1991	; 0x7c7
 8008208:	483c      	ldr	r0, [pc, #240]	; (80082fc <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800820a:	f7f9 ff59 	bl	80020c0 <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	691b      	ldr	r3, [r3, #16]
 8008212:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008216:	d008      	beq.n	800822a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	691b      	ldr	r3, [r3, #16]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d004      	beq.n	800822a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8008220:	f44f 61f9 	mov.w	r1, #1992	; 0x7c8
 8008224:	4835      	ldr	r0, [pc, #212]	; (80082fc <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8008226:	f7f9 ff4b 	bl	80020c0 <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	695b      	ldr	r3, [r3, #20]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d009      	beq.n	8008246 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	695b      	ldr	r3, [r3, #20]
 8008236:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800823a:	d004      	beq.n	8008246 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800823c:	f240 71c9 	movw	r1, #1993	; 0x7c9
 8008240:	482e      	ldr	r0, [pc, #184]	; (80082fc <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8008242:	f7f9 ff3d 	bl	80020c0 <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	69db      	ldr	r3, [r3, #28]
 800824a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800824e:	d008      	beq.n	8008262 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	69db      	ldr	r3, [r3, #28]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d004      	beq.n	8008262 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 8008258:	f240 71ca 	movw	r1, #1994	; 0x7ca
 800825c:	4827      	ldr	r0, [pc, #156]	; (80082fc <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800825e:	f7f9 ff2f 	bl	80020c0 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008268:	2b01      	cmp	r3, #1
 800826a:	d101      	bne.n	8008270 <HAL_TIMEx_ConfigBreakDeadTime+0x108>
 800826c:	2302      	movs	r3, #2
 800826e:	e03d      	b.n	80082ec <HAL_TIMEx_ConfigBreakDeadTime+0x184>
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2201      	movs	r2, #1
 8008274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	68db      	ldr	r3, [r3, #12]
 8008282:	4313      	orrs	r3, r2
 8008284:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	689b      	ldr	r3, [r3, #8]
 8008290:	4313      	orrs	r3, r2
 8008292:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	685b      	ldr	r3, [r3, #4]
 800829e:	4313      	orrs	r3, r2
 80082a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	4313      	orrs	r3, r2
 80082ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	691b      	ldr	r3, [r3, #16]
 80082ba:	4313      	orrs	r3, r2
 80082bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	695b      	ldr	r3, [r3, #20]
 80082c8:	4313      	orrs	r3, r2
 80082ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	69db      	ldr	r3, [r3, #28]
 80082d6:	4313      	orrs	r3, r2
 80082d8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	68fa      	ldr	r2, [r7, #12]
 80082e0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2200      	movs	r2, #0
 80082e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80082ea:	2300      	movs	r3, #0
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	3710      	adds	r7, #16
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}
 80082f4:	40012c00 	.word	0x40012c00
 80082f8:	40013400 	.word	0x40013400
 80082fc:	0800f09c 	.word	0x0800f09c

08008300 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008300:	b480      	push	{r7}
 8008302:	b083      	sub	sp, #12
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008308:	bf00      	nop
 800830a:	370c      	adds	r7, #12
 800830c:	46bd      	mov	sp, r7
 800830e:	bc80      	pop	{r7}
 8008310:	4770      	bx	lr

08008312 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008312:	b480      	push	{r7}
 8008314:	b083      	sub	sp, #12
 8008316:	af00      	add	r7, sp, #0
 8008318:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800831a:	bf00      	nop
 800831c:	370c      	adds	r7, #12
 800831e:	46bd      	mov	sp, r7
 8008320:	bc80      	pop	{r7}
 8008322:	4770      	bx	lr

08008324 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008324:	b480      	push	{r7}
 8008326:	b083      	sub	sp, #12
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800832c:	bf00      	nop
 800832e:	370c      	adds	r7, #12
 8008330:	46bd      	mov	sp, r7
 8008332:	bc80      	pop	{r7}
 8008334:	4770      	bx	lr
	...

08008338 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b082      	sub	sp, #8
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d101      	bne.n	800834a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008346:	2301      	movs	r3, #1
 8008348:	e0a7      	b.n	800849a <HAL_UART_Init+0x162>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	699b      	ldr	r3, [r3, #24]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d02c      	beq.n	80083ac <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2 and USART3 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4a53      	ldr	r2, [pc, #332]	; (80084a4 <HAL_UART_Init+0x16c>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d00e      	beq.n	800837a <HAL_UART_Init+0x42>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a51      	ldr	r2, [pc, #324]	; (80084a8 <HAL_UART_Init+0x170>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d009      	beq.n	800837a <HAL_UART_Init+0x42>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4a50      	ldr	r2, [pc, #320]	; (80084ac <HAL_UART_Init+0x174>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d004      	beq.n	800837a <HAL_UART_Init+0x42>
 8008370:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 8008374:	484e      	ldr	r0, [pc, #312]	; (80084b0 <HAL_UART_Init+0x178>)
 8008376:	f7f9 fea3 	bl	80020c0 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	699b      	ldr	r3, [r3, #24]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d032      	beq.n	80083e8 <HAL_UART_Init+0xb0>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	699b      	ldr	r3, [r3, #24]
 8008386:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800838a:	d02d      	beq.n	80083e8 <HAL_UART_Init+0xb0>
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	699b      	ldr	r3, [r3, #24]
 8008390:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008394:	d028      	beq.n	80083e8 <HAL_UART_Init+0xb0>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	699b      	ldr	r3, [r3, #24]
 800839a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800839e:	d023      	beq.n	80083e8 <HAL_UART_Init+0xb0>
 80083a0:	f240 116d 	movw	r1, #365	; 0x16d
 80083a4:	4842      	ldr	r0, [pc, #264]	; (80084b0 <HAL_UART_Init+0x178>)
 80083a6:	f7f9 fe8b 	bl	80020c0 <assert_failed>
 80083aa:	e01d      	b.n	80083e8 <HAL_UART_Init+0xb0>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4a3c      	ldr	r2, [pc, #240]	; (80084a4 <HAL_UART_Init+0x16c>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d018      	beq.n	80083e8 <HAL_UART_Init+0xb0>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	4a3b      	ldr	r2, [pc, #236]	; (80084a8 <HAL_UART_Init+0x170>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d013      	beq.n	80083e8 <HAL_UART_Init+0xb0>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	4a39      	ldr	r2, [pc, #228]	; (80084ac <HAL_UART_Init+0x174>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d00e      	beq.n	80083e8 <HAL_UART_Init+0xb0>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	4a39      	ldr	r2, [pc, #228]	; (80084b4 <HAL_UART_Init+0x17c>)
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d009      	beq.n	80083e8 <HAL_UART_Init+0xb0>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	4a37      	ldr	r2, [pc, #220]	; (80084b8 <HAL_UART_Init+0x180>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	d004      	beq.n	80083e8 <HAL_UART_Init+0xb0>
 80083de:	f240 1171 	movw	r1, #369	; 0x171
 80083e2:	4833      	ldr	r0, [pc, #204]	; (80084b0 <HAL_UART_Init+0x178>)
 80083e4:	f7f9 fe6c 	bl	80020c0 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	689b      	ldr	r3, [r3, #8]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d009      	beq.n	8008404 <HAL_UART_Init+0xcc>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	689b      	ldr	r3, [r3, #8]
 80083f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083f8:	d004      	beq.n	8008404 <HAL_UART_Init+0xcc>
 80083fa:	f240 1173 	movw	r1, #371	; 0x173
 80083fe:	482c      	ldr	r0, [pc, #176]	; (80084b0 <HAL_UART_Init+0x178>)
 8008400:	f7f9 fe5e 	bl	80020c0 <assert_failed>
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800840a:	b2db      	uxtb	r3, r3
 800840c:	2b00      	cmp	r3, #0
 800840e:	d111      	bne.n	8008434 <HAL_UART_Init+0xfc>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2200      	movs	r2, #0
 8008414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f000 fb0d 	bl	8008a38 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008422:	2b00      	cmp	r3, #0
 8008424:	d102      	bne.n	800842c <HAL_UART_Init+0xf4>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	4a24      	ldr	r2, [pc, #144]	; (80084bc <HAL_UART_Init+0x184>)
 800842a:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2224      	movs	r2, #36	; 0x24
 8008438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	68da      	ldr	r2, [r3, #12]
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800844a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f000 fd01 	bl	8008e54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	691a      	ldr	r2, [r3, #16]
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008460:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	695a      	ldr	r2, [r3, #20]
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008470:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	68da      	ldr	r2, [r3, #12]
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008480:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2200      	movs	r2, #0
 8008486:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2220      	movs	r2, #32
 800848c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2220      	movs	r2, #32
 8008494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008498:	2300      	movs	r3, #0
}
 800849a:	4618      	mov	r0, r3
 800849c:	3708      	adds	r7, #8
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}
 80084a2:	bf00      	nop
 80084a4:	40013800 	.word	0x40013800
 80084a8:	40004400 	.word	0x40004400
 80084ac:	40004800 	.word	0x40004800
 80084b0:	0800f0d8 	.word	0x0800f0d8
 80084b4:	40004c00 	.word	0x40004c00
 80084b8:	40005000 	.word	0x40005000
 80084bc:	08002555 	.word	0x08002555

080084c0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b08a      	sub	sp, #40	; 0x28
 80084c4:	af02      	add	r7, sp, #8
 80084c6:	60f8      	str	r0, [r7, #12]
 80084c8:	60b9      	str	r1, [r7, #8]
 80084ca:	603b      	str	r3, [r7, #0]
 80084cc:	4613      	mov	r3, r2
 80084ce:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80084d0:	2300      	movs	r3, #0
 80084d2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084da:	b2db      	uxtb	r3, r3
 80084dc:	2b20      	cmp	r3, #32
 80084de:	d17c      	bne.n	80085da <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d002      	beq.n	80084ec <HAL_UART_Transmit+0x2c>
 80084e6:	88fb      	ldrh	r3, [r7, #6]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d101      	bne.n	80084f0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80084ec:	2301      	movs	r3, #1
 80084ee:	e075      	b.n	80085dc <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084f6:	2b01      	cmp	r3, #1
 80084f8:	d101      	bne.n	80084fe <HAL_UART_Transmit+0x3e>
 80084fa:	2302      	movs	r3, #2
 80084fc:	e06e      	b.n	80085dc <HAL_UART_Transmit+0x11c>
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	2201      	movs	r2, #1
 8008502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	2200      	movs	r2, #0
 800850a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	2221      	movs	r2, #33	; 0x21
 8008510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008514:	f7fa faa4 	bl	8002a60 <HAL_GetTick>
 8008518:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	88fa      	ldrh	r2, [r7, #6]
 800851e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	88fa      	ldrh	r2, [r7, #6]
 8008524:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	689b      	ldr	r3, [r3, #8]
 800852a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800852e:	d108      	bne.n	8008542 <HAL_UART_Transmit+0x82>
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	691b      	ldr	r3, [r3, #16]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d104      	bne.n	8008542 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008538:	2300      	movs	r3, #0
 800853a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	61bb      	str	r3, [r7, #24]
 8008540:	e003      	b.n	800854a <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008542:	68bb      	ldr	r3, [r7, #8]
 8008544:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008546:	2300      	movs	r3, #0
 8008548:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	2200      	movs	r2, #0
 800854e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008552:	e02a      	b.n	80085aa <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	9300      	str	r3, [sp, #0]
 8008558:	697b      	ldr	r3, [r7, #20]
 800855a:	2200      	movs	r2, #0
 800855c:	2180      	movs	r1, #128	; 0x80
 800855e:	68f8      	ldr	r0, [r7, #12]
 8008560:	f000 faa0 	bl	8008aa4 <UART_WaitOnFlagUntilTimeout>
 8008564:	4603      	mov	r3, r0
 8008566:	2b00      	cmp	r3, #0
 8008568:	d001      	beq.n	800856e <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800856a:	2303      	movs	r3, #3
 800856c:	e036      	b.n	80085dc <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800856e:	69fb      	ldr	r3, [r7, #28]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d10b      	bne.n	800858c <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008574:	69bb      	ldr	r3, [r7, #24]
 8008576:	881b      	ldrh	r3, [r3, #0]
 8008578:	461a      	mov	r2, r3
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008582:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008584:	69bb      	ldr	r3, [r7, #24]
 8008586:	3302      	adds	r3, #2
 8008588:	61bb      	str	r3, [r7, #24]
 800858a:	e007      	b.n	800859c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800858c:	69fb      	ldr	r3, [r7, #28]
 800858e:	781a      	ldrb	r2, [r3, #0]
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008596:	69fb      	ldr	r3, [r7, #28]
 8008598:	3301      	adds	r3, #1
 800859a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80085a0:	b29b      	uxth	r3, r3
 80085a2:	3b01      	subs	r3, #1
 80085a4:	b29a      	uxth	r2, r3
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80085ae:	b29b      	uxth	r3, r3
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d1cf      	bne.n	8008554 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	9300      	str	r3, [sp, #0]
 80085b8:	697b      	ldr	r3, [r7, #20]
 80085ba:	2200      	movs	r2, #0
 80085bc:	2140      	movs	r1, #64	; 0x40
 80085be:	68f8      	ldr	r0, [r7, #12]
 80085c0:	f000 fa70 	bl	8008aa4 <UART_WaitOnFlagUntilTimeout>
 80085c4:	4603      	mov	r3, r0
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d001      	beq.n	80085ce <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80085ca:	2303      	movs	r3, #3
 80085cc:	e006      	b.n	80085dc <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	2220      	movs	r2, #32
 80085d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80085d6:	2300      	movs	r3, #0
 80085d8:	e000      	b.n	80085dc <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80085da:	2302      	movs	r3, #2
  }
}
 80085dc:	4618      	mov	r0, r3
 80085de:	3720      	adds	r7, #32
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}

080085e4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b084      	sub	sp, #16
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	60f8      	str	r0, [r7, #12]
 80085ec:	60b9      	str	r1, [r7, #8]
 80085ee:	4613      	mov	r3, r2
 80085f0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80085f8:	b2db      	uxtb	r3, r3
 80085fa:	2b20      	cmp	r3, #32
 80085fc:	d11d      	bne.n	800863a <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d002      	beq.n	800860a <HAL_UART_Receive_IT+0x26>
 8008604:	88fb      	ldrh	r3, [r7, #6]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d101      	bne.n	800860e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800860a:	2301      	movs	r3, #1
 800860c:	e016      	b.n	800863c <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008614:	2b01      	cmp	r3, #1
 8008616:	d101      	bne.n	800861c <HAL_UART_Receive_IT+0x38>
 8008618:	2302      	movs	r3, #2
 800861a:	e00f      	b.n	800863c <HAL_UART_Receive_IT+0x58>
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	2201      	movs	r2, #1
 8008620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	2200      	movs	r2, #0
 8008628:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800862a:	88fb      	ldrh	r3, [r7, #6]
 800862c:	461a      	mov	r2, r3
 800862e:	68b9      	ldr	r1, [r7, #8]
 8008630:	68f8      	ldr	r0, [r7, #12]
 8008632:	f000 fa81 	bl	8008b38 <UART_Start_Receive_IT>
 8008636:	4603      	mov	r3, r0
 8008638:	e000      	b.n	800863c <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800863a:	2302      	movs	r3, #2
  }
}
 800863c:	4618      	mov	r0, r3
 800863e:	3710      	adds	r7, #16
 8008640:	46bd      	mov	sp, r7
 8008642:	bd80      	pop	{r7, pc}

08008644 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b08a      	sub	sp, #40	; 0x28
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	68db      	ldr	r3, [r3, #12]
 800865a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	695b      	ldr	r3, [r3, #20]
 8008662:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8008664:	2300      	movs	r3, #0
 8008666:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8008668:	2300      	movs	r3, #0
 800866a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800866c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800866e:	f003 030f 	and.w	r3, r3, #15
 8008672:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8008674:	69bb      	ldr	r3, [r7, #24]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d10d      	bne.n	8008696 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800867a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800867c:	f003 0320 	and.w	r3, r3, #32
 8008680:	2b00      	cmp	r3, #0
 8008682:	d008      	beq.n	8008696 <HAL_UART_IRQHandler+0x52>
 8008684:	6a3b      	ldr	r3, [r7, #32]
 8008686:	f003 0320 	and.w	r3, r3, #32
 800868a:	2b00      	cmp	r3, #0
 800868c:	d003      	beq.n	8008696 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	f000 fb34 	bl	8008cfc <UART_Receive_IT>
      return;
 8008694:	e180      	b.n	8008998 <HAL_UART_IRQHandler+0x354>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008696:	69bb      	ldr	r3, [r7, #24]
 8008698:	2b00      	cmp	r3, #0
 800869a:	f000 80b4 	beq.w	8008806 <HAL_UART_IRQHandler+0x1c2>
 800869e:	69fb      	ldr	r3, [r7, #28]
 80086a0:	f003 0301 	and.w	r3, r3, #1
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d105      	bne.n	80086b4 <HAL_UART_IRQHandler+0x70>
 80086a8:	6a3b      	ldr	r3, [r7, #32]
 80086aa:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	f000 80a9 	beq.w	8008806 <HAL_UART_IRQHandler+0x1c2>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80086b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b6:	f003 0301 	and.w	r3, r3, #1
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d00a      	beq.n	80086d4 <HAL_UART_IRQHandler+0x90>
 80086be:	6a3b      	ldr	r3, [r7, #32]
 80086c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d005      	beq.n	80086d4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086cc:	f043 0201 	orr.w	r2, r3, #1
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80086d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d6:	f003 0304 	and.w	r3, r3, #4
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d00a      	beq.n	80086f4 <HAL_UART_IRQHandler+0xb0>
 80086de:	69fb      	ldr	r3, [r7, #28]
 80086e0:	f003 0301 	and.w	r3, r3, #1
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d005      	beq.n	80086f4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ec:	f043 0202 	orr.w	r2, r3, #2
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80086f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f6:	f003 0302 	and.w	r3, r3, #2
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d00a      	beq.n	8008714 <HAL_UART_IRQHandler+0xd0>
 80086fe:	69fb      	ldr	r3, [r7, #28]
 8008700:	f003 0301 	and.w	r3, r3, #1
 8008704:	2b00      	cmp	r3, #0
 8008706:	d005      	beq.n	8008714 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800870c:	f043 0204 	orr.w	r2, r3, #4
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8008714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008716:	f003 0308 	and.w	r3, r3, #8
 800871a:	2b00      	cmp	r3, #0
 800871c:	d00f      	beq.n	800873e <HAL_UART_IRQHandler+0xfa>
 800871e:	6a3b      	ldr	r3, [r7, #32]
 8008720:	f003 0320 	and.w	r3, r3, #32
 8008724:	2b00      	cmp	r3, #0
 8008726:	d104      	bne.n	8008732 <HAL_UART_IRQHandler+0xee>
 8008728:	69fb      	ldr	r3, [r7, #28]
 800872a:	f003 0301 	and.w	r3, r3, #1
 800872e:	2b00      	cmp	r3, #0
 8008730:	d005      	beq.n	800873e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008736:	f043 0208 	orr.w	r2, r3, #8
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008742:	2b00      	cmp	r3, #0
 8008744:	f000 8123 	beq.w	800898e <HAL_UART_IRQHandler+0x34a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800874a:	f003 0320 	and.w	r3, r3, #32
 800874e:	2b00      	cmp	r3, #0
 8008750:	d007      	beq.n	8008762 <HAL_UART_IRQHandler+0x11e>
 8008752:	6a3b      	ldr	r3, [r7, #32]
 8008754:	f003 0320 	and.w	r3, r3, #32
 8008758:	2b00      	cmp	r3, #0
 800875a:	d002      	beq.n	8008762 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f000 facd 	bl	8008cfc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	695b      	ldr	r3, [r3, #20]
 8008768:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800876c:	2b00      	cmp	r3, #0
 800876e:	bf14      	ite	ne
 8008770:	2301      	movne	r3, #1
 8008772:	2300      	moveq	r3, #0
 8008774:	b2db      	uxtb	r3, r3
 8008776:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800877c:	f003 0308 	and.w	r3, r3, #8
 8008780:	2b00      	cmp	r3, #0
 8008782:	d102      	bne.n	800878a <HAL_UART_IRQHandler+0x146>
 8008784:	697b      	ldr	r3, [r7, #20]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d033      	beq.n	80087f2 <HAL_UART_IRQHandler+0x1ae>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f000 fa0d 	bl	8008baa <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	695b      	ldr	r3, [r3, #20]
 8008796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800879a:	2b00      	cmp	r3, #0
 800879c:	d024      	beq.n	80087e8 <HAL_UART_IRQHandler+0x1a4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	695a      	ldr	r2, [r3, #20]
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80087ac:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d013      	beq.n	80087de <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087ba:	4a79      	ldr	r2, [pc, #484]	; (80089a0 <HAL_UART_IRQHandler+0x35c>)
 80087bc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087c2:	4618      	mov	r0, r3
 80087c4:	f7fb f8e6 	bl	8003994 <HAL_DMA_Abort_IT>
 80087c8:	4603      	mov	r3, r0
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d019      	beq.n	8008802 <HAL_UART_IRQHandler+0x1be>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087d4:	687a      	ldr	r2, [r7, #4]
 80087d6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80087d8:	4610      	mov	r0, r2
 80087da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087dc:	e011      	b.n	8008802 <HAL_UART_IRQHandler+0x1be>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087e6:	e00c      	b.n	8008802 <HAL_UART_IRQHandler+0x1be>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087f0:	e007      	b.n	8008802 <HAL_UART_IRQHandler+0x1be>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2200      	movs	r2, #0
 80087fe:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008800:	e0c5      	b.n	800898e <HAL_UART_IRQHandler+0x34a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008802:	bf00      	nop
    return;
 8008804:	e0c3      	b.n	800898e <HAL_UART_IRQHandler+0x34a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800880a:	2b01      	cmp	r3, #1
 800880c:	f040 80a3 	bne.w	8008956 <HAL_UART_IRQHandler+0x312>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8008810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008812:	f003 0310 	and.w	r3, r3, #16
 8008816:	2b00      	cmp	r3, #0
 8008818:	f000 809d 	beq.w	8008956 <HAL_UART_IRQHandler+0x312>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800881c:	6a3b      	ldr	r3, [r7, #32]
 800881e:	f003 0310 	and.w	r3, r3, #16
 8008822:	2b00      	cmp	r3, #0
 8008824:	f000 8097 	beq.w	8008956 <HAL_UART_IRQHandler+0x312>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008828:	2300      	movs	r3, #0
 800882a:	60fb      	str	r3, [r7, #12]
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	60fb      	str	r3, [r7, #12]
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	685b      	ldr	r3, [r3, #4]
 800883a:	60fb      	str	r3, [r7, #12]
 800883c:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	695b      	ldr	r3, [r3, #20]
 8008844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008848:	2b00      	cmp	r3, #0
 800884a:	d04f      	beq.n	80088ec <HAL_UART_IRQHandler+0x2a8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	685b      	ldr	r3, [r3, #4]
 8008854:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8008856:	8a3b      	ldrh	r3, [r7, #16]
 8008858:	2b00      	cmp	r3, #0
 800885a:	f000 809a 	beq.w	8008992 <HAL_UART_IRQHandler+0x34e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008862:	8a3a      	ldrh	r2, [r7, #16]
 8008864:	429a      	cmp	r2, r3
 8008866:	f080 8094 	bcs.w	8008992 <HAL_UART_IRQHandler+0x34e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	8a3a      	ldrh	r2, [r7, #16]
 800886e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008874:	699b      	ldr	r3, [r3, #24]
 8008876:	2b20      	cmp	r3, #32
 8008878:	d02b      	beq.n	80088d2 <HAL_UART_IRQHandler+0x28e>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	68da      	ldr	r2, [r3, #12]
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008888:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	695a      	ldr	r2, [r3, #20]
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f022 0201 	bic.w	r2, r2, #1
 8008898:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	695a      	ldr	r2, [r3, #20]
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80088a8:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2220      	movs	r2, #32
 80088ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2200      	movs	r2, #0
 80088b6:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	68da      	ldr	r2, [r3, #12]
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f022 0210 	bic.w	r2, r2, #16
 80088c6:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088cc:	4618      	mov	r0, r3
 80088ce:	f7fb f827 	bl	8003920 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80088d6:	687a      	ldr	r2, [r7, #4]
 80088d8:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 80088da:	687a      	ldr	r2, [r7, #4]
 80088dc:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 80088de:	b292      	uxth	r2, r2
 80088e0:	1a8a      	subs	r2, r1, r2
 80088e2:	b292      	uxth	r2, r2
 80088e4:	4611      	mov	r1, r2
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif
      }
      return;
 80088ea:	e052      	b.n	8008992 <HAL_UART_IRQHandler+0x34e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80088f4:	b29b      	uxth	r3, r3
 80088f6:	1ad3      	subs	r3, r2, r3
 80088f8:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80088fe:	b29b      	uxth	r3, r3
 8008900:	2b00      	cmp	r3, #0
 8008902:	d048      	beq.n	8008996 <HAL_UART_IRQHandler+0x352>
          &&(nb_rx_data > 0U) )
 8008904:	8a7b      	ldrh	r3, [r7, #18]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d045      	beq.n	8008996 <HAL_UART_IRQHandler+0x352>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	68da      	ldr	r2, [r3, #12]
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008918:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	695a      	ldr	r2, [r3, #20]
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f022 0201 	bic.w	r2, r2, #1
 8008928:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2220      	movs	r2, #32
 800892e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2200      	movs	r2, #0
 8008936:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	68da      	ldr	r2, [r3, #12]
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f022 0210 	bic.w	r2, r2, #16
 8008946:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800894c:	8a7a      	ldrh	r2, [r7, #18]
 800894e:	4611      	mov	r1, r2
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif
      }
      return;
 8008954:	e01f      	b.n	8008996 <HAL_UART_IRQHandler+0x352>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008958:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800895c:	2b00      	cmp	r3, #0
 800895e:	d008      	beq.n	8008972 <HAL_UART_IRQHandler+0x32e>
 8008960:	6a3b      	ldr	r3, [r7, #32]
 8008962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008966:	2b00      	cmp	r3, #0
 8008968:	d003      	beq.n	8008972 <HAL_UART_IRQHandler+0x32e>
  {
    UART_Transmit_IT(huart);
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f000 f95e 	bl	8008c2c <UART_Transmit_IT>
    return;
 8008970:	e012      	b.n	8008998 <HAL_UART_IRQHandler+0x354>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008978:	2b00      	cmp	r3, #0
 800897a:	d00d      	beq.n	8008998 <HAL_UART_IRQHandler+0x354>
 800897c:	6a3b      	ldr	r3, [r7, #32]
 800897e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008982:	2b00      	cmp	r3, #0
 8008984:	d008      	beq.n	8008998 <HAL_UART_IRQHandler+0x354>
  {
    UART_EndTransmit_IT(huart);
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f000 f99f 	bl	8008cca <UART_EndTransmit_IT>
    return;
 800898c:	e004      	b.n	8008998 <HAL_UART_IRQHandler+0x354>
    return;
 800898e:	bf00      	nop
 8008990:	e002      	b.n	8008998 <HAL_UART_IRQHandler+0x354>
      return;
 8008992:	bf00      	nop
 8008994:	e000      	b.n	8008998 <HAL_UART_IRQHandler+0x354>
      return;
 8008996:	bf00      	nop
  }
}
 8008998:	3728      	adds	r7, #40	; 0x28
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}
 800899e:	bf00      	nop
 80089a0:	08008c03 	.word	0x08008c03

080089a4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80089a4:	b480      	push	{r7}
 80089a6:	b083      	sub	sp, #12
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80089ac:	bf00      	nop
 80089ae:	370c      	adds	r7, #12
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bc80      	pop	{r7}
 80089b4:	4770      	bx	lr

080089b6 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80089b6:	b480      	push	{r7}
 80089b8:	b083      	sub	sp, #12
 80089ba:	af00      	add	r7, sp, #0
 80089bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80089be:	bf00      	nop
 80089c0:	370c      	adds	r7, #12
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bc80      	pop	{r7}
 80089c6:	4770      	bx	lr

080089c8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80089c8:	b480      	push	{r7}
 80089ca:	b083      	sub	sp, #12
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80089d0:	bf00      	nop
 80089d2:	370c      	adds	r7, #12
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bc80      	pop	{r7}
 80089d8:	4770      	bx	lr

080089da <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80089da:	b480      	push	{r7}
 80089dc:	b083      	sub	sp, #12
 80089de:	af00      	add	r7, sp, #0
 80089e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80089e2:	bf00      	nop
 80089e4:	370c      	adds	r7, #12
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bc80      	pop	{r7}
 80089ea:	4770      	bx	lr

080089ec <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80089ec:	b480      	push	{r7}
 80089ee:	b083      	sub	sp, #12
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80089f4:	bf00      	nop
 80089f6:	370c      	adds	r7, #12
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bc80      	pop	{r7}
 80089fc:	4770      	bx	lr

080089fe <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 80089fe:	b480      	push	{r7}
 8008a00:	b083      	sub	sp, #12
 8008a02:	af00      	add	r7, sp, #0
 8008a04:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8008a06:	bf00      	nop
 8008a08:	370c      	adds	r7, #12
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bc80      	pop	{r7}
 8008a0e:	4770      	bx	lr

08008a10 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8008a10:	b480      	push	{r7}
 8008a12:	b083      	sub	sp, #12
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8008a18:	bf00      	nop
 8008a1a:	370c      	adds	r7, #12
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	bc80      	pop	{r7}
 8008a20:	4770      	bx	lr

08008a22 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008a22:	b480      	push	{r7}
 8008a24:	b083      	sub	sp, #12
 8008a26:	af00      	add	r7, sp, #0
 8008a28:	6078      	str	r0, [r7, #4]
 8008a2a:	460b      	mov	r3, r1
 8008a2c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008a2e:	bf00      	nop
 8008a30:	370c      	adds	r7, #12
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bc80      	pop	{r7}
 8008a36:	4770      	bx	lr

08008a38 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8008a38:	b480      	push	{r7}
 8008a3a:	b083      	sub	sp, #12
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	4a0f      	ldr	r2, [pc, #60]	; (8008a80 <UART_InitCallbacksToDefault+0x48>)
 8008a44:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	4a0e      	ldr	r2, [pc, #56]	; (8008a84 <UART_InitCallbacksToDefault+0x4c>)
 8008a4a:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	4a0e      	ldr	r2, [pc, #56]	; (8008a88 <UART_InitCallbacksToDefault+0x50>)
 8008a50:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	4a0d      	ldr	r2, [pc, #52]	; (8008a8c <UART_InitCallbacksToDefault+0x54>)
 8008a56:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	4a0d      	ldr	r2, [pc, #52]	; (8008a90 <UART_InitCallbacksToDefault+0x58>)
 8008a5c:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	4a0c      	ldr	r2, [pc, #48]	; (8008a94 <UART_InitCallbacksToDefault+0x5c>)
 8008a62:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	4a0c      	ldr	r2, [pc, #48]	; (8008a98 <UART_InitCallbacksToDefault+0x60>)
 8008a68:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	4a0b      	ldr	r2, [pc, #44]	; (8008a9c <UART_InitCallbacksToDefault+0x64>)
 8008a6e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	4a0b      	ldr	r2, [pc, #44]	; (8008aa0 <UART_InitCallbacksToDefault+0x68>)
 8008a74:	669a      	str	r2, [r3, #104]	; 0x68

}
 8008a76:	bf00      	nop
 8008a78:	370c      	adds	r7, #12
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bc80      	pop	{r7}
 8008a7e:	4770      	bx	lr
 8008a80:	080089b7 	.word	0x080089b7
 8008a84:	080089a5 	.word	0x080089a5
 8008a88:	080089c9 	.word	0x080089c9
 8008a8c:	08002075 	.word	0x08002075
 8008a90:	080089db 	.word	0x080089db
 8008a94:	080089ed 	.word	0x080089ed
 8008a98:	080089ff 	.word	0x080089ff
 8008a9c:	08008a11 	.word	0x08008a11
 8008aa0:	08008a23 	.word	0x08008a23

08008aa4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b084      	sub	sp, #16
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	60f8      	str	r0, [r7, #12]
 8008aac:	60b9      	str	r1, [r7, #8]
 8008aae:	603b      	str	r3, [r7, #0]
 8008ab0:	4613      	mov	r3, r2
 8008ab2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ab4:	e02c      	b.n	8008b10 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ab6:	69bb      	ldr	r3, [r7, #24]
 8008ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008abc:	d028      	beq.n	8008b10 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008abe:	69bb      	ldr	r3, [r7, #24]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d007      	beq.n	8008ad4 <UART_WaitOnFlagUntilTimeout+0x30>
 8008ac4:	f7f9 ffcc 	bl	8002a60 <HAL_GetTick>
 8008ac8:	4602      	mov	r2, r0
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	1ad3      	subs	r3, r2, r3
 8008ace:	69ba      	ldr	r2, [r7, #24]
 8008ad0:	429a      	cmp	r2, r3
 8008ad2:	d21d      	bcs.n	8008b10 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	68da      	ldr	r2, [r3, #12]
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008ae2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	695a      	ldr	r2, [r3, #20]
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f022 0201 	bic.w	r2, r2, #1
 8008af2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	2220      	movs	r2, #32
 8008af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	2220      	movs	r2, #32
 8008b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	2200      	movs	r2, #0
 8008b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008b0c:	2303      	movs	r3, #3
 8008b0e:	e00f      	b.n	8008b30 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	681a      	ldr	r2, [r3, #0]
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	4013      	ands	r3, r2
 8008b1a:	68ba      	ldr	r2, [r7, #8]
 8008b1c:	429a      	cmp	r2, r3
 8008b1e:	bf0c      	ite	eq
 8008b20:	2301      	moveq	r3, #1
 8008b22:	2300      	movne	r3, #0
 8008b24:	b2db      	uxtb	r3, r3
 8008b26:	461a      	mov	r2, r3
 8008b28:	79fb      	ldrb	r3, [r7, #7]
 8008b2a:	429a      	cmp	r2, r3
 8008b2c:	d0c3      	beq.n	8008ab6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008b2e:	2300      	movs	r3, #0
}
 8008b30:	4618      	mov	r0, r3
 8008b32:	3710      	adds	r7, #16
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bd80      	pop	{r7, pc}

08008b38 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b085      	sub	sp, #20
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	60f8      	str	r0, [r7, #12]
 8008b40:	60b9      	str	r1, [r7, #8]
 8008b42:	4613      	mov	r3, r2
 8008b44:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	68ba      	ldr	r2, [r7, #8]
 8008b4a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	88fa      	ldrh	r2, [r7, #6]
 8008b50:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	88fa      	ldrh	r2, [r7, #6]
 8008b56:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	2222      	movs	r2, #34	; 0x22
 8008b62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	68da      	ldr	r2, [r3, #12]
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008b7c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	695a      	ldr	r2, [r3, #20]
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f042 0201 	orr.w	r2, r2, #1
 8008b8c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	68da      	ldr	r2, [r3, #12]
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f042 0220 	orr.w	r2, r2, #32
 8008b9c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008b9e:	2300      	movs	r3, #0
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	3714      	adds	r7, #20
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bc80      	pop	{r7}
 8008ba8:	4770      	bx	lr

08008baa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008baa:	b480      	push	{r7}
 8008bac:	b083      	sub	sp, #12
 8008bae:	af00      	add	r7, sp, #0
 8008bb0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	68da      	ldr	r2, [r3, #12]
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008bc0:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	695a      	ldr	r2, [r3, #20]
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f022 0201 	bic.w	r2, r2, #1
 8008bd0:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bd6:	2b01      	cmp	r3, #1
 8008bd8:	d107      	bne.n	8008bea <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	68da      	ldr	r2, [r3, #12]
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f022 0210 	bic.w	r2, r2, #16
 8008be8:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2220      	movs	r2, #32
 8008bee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008bf8:	bf00      	nop
 8008bfa:	370c      	adds	r7, #12
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bc80      	pop	{r7}
 8008c00:	4770      	bx	lr

08008c02 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008c02:	b580      	push	{r7, lr}
 8008c04:	b084      	sub	sp, #16
 8008c06:	af00      	add	r7, sp, #0
 8008c08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c0e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	2200      	movs	r2, #0
 8008c14:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	2200      	movs	r2, #0
 8008c1a:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c20:	68f8      	ldr	r0, [r7, #12]
 8008c22:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c24:	bf00      	nop
 8008c26:	3710      	adds	r7, #16
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bd80      	pop	{r7, pc}

08008c2c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	b085      	sub	sp, #20
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c3a:	b2db      	uxtb	r3, r3
 8008c3c:	2b21      	cmp	r3, #33	; 0x21
 8008c3e:	d13e      	bne.n	8008cbe <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	689b      	ldr	r3, [r3, #8]
 8008c44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c48:	d114      	bne.n	8008c74 <UART_Transmit_IT+0x48>
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	691b      	ldr	r3, [r3, #16]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d110      	bne.n	8008c74 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6a1b      	ldr	r3, [r3, #32]
 8008c56:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	881b      	ldrh	r3, [r3, #0]
 8008c5c:	461a      	mov	r2, r3
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008c66:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	6a1b      	ldr	r3, [r3, #32]
 8008c6c:	1c9a      	adds	r2, r3, #2
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	621a      	str	r2, [r3, #32]
 8008c72:	e008      	b.n	8008c86 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	6a1b      	ldr	r3, [r3, #32]
 8008c78:	1c59      	adds	r1, r3, #1
 8008c7a:	687a      	ldr	r2, [r7, #4]
 8008c7c:	6211      	str	r1, [r2, #32]
 8008c7e:	781a      	ldrb	r2, [r3, #0]
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008c8a:	b29b      	uxth	r3, r3
 8008c8c:	3b01      	subs	r3, #1
 8008c8e:	b29b      	uxth	r3, r3
 8008c90:	687a      	ldr	r2, [r7, #4]
 8008c92:	4619      	mov	r1, r3
 8008c94:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d10f      	bne.n	8008cba <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	68da      	ldr	r2, [r3, #12]
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008ca8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	68da      	ldr	r2, [r3, #12]
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008cb8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008cba:	2300      	movs	r3, #0
 8008cbc:	e000      	b.n	8008cc0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008cbe:	2302      	movs	r3, #2
  }
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	3714      	adds	r7, #20
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bc80      	pop	{r7}
 8008cc8:	4770      	bx	lr

08008cca <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008cca:	b580      	push	{r7, lr}
 8008ccc:	b082      	sub	sp, #8
 8008cce:	af00      	add	r7, sp, #0
 8008cd0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	68da      	ldr	r2, [r3, #12]
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ce0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2220      	movs	r2, #32
 8008ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008cf2:	2300      	movs	r3, #0
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	3708      	adds	r7, #8
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}

08008cfc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b086      	sub	sp, #24
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008d0a:	b2db      	uxtb	r3, r3
 8008d0c:	2b22      	cmp	r3, #34	; 0x22
 8008d0e:	f040 809b 	bne.w	8008e48 <UART_Receive_IT+0x14c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	689b      	ldr	r3, [r3, #8]
 8008d16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d1a:	d117      	bne.n	8008d4c <UART_Receive_IT+0x50>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	691b      	ldr	r3, [r3, #16]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d113      	bne.n	8008d4c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008d24:	2300      	movs	r3, #0
 8008d26:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d2c:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	685b      	ldr	r3, [r3, #4]
 8008d34:	b29b      	uxth	r3, r3
 8008d36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d3a:	b29a      	uxth	r2, r3
 8008d3c:	693b      	ldr	r3, [r7, #16]
 8008d3e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d44:	1c9a      	adds	r2, r3, #2
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	629a      	str	r2, [r3, #40]	; 0x28
 8008d4a:	e026      	b.n	8008d9a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d50:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8008d52:	2300      	movs	r3, #0
 8008d54:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	689b      	ldr	r3, [r3, #8]
 8008d5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d5e:	d007      	beq.n	8008d70 <UART_Receive_IT+0x74>
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	689b      	ldr	r3, [r3, #8]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d10a      	bne.n	8008d7e <UART_Receive_IT+0x82>
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	691b      	ldr	r3, [r3, #16]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d106      	bne.n	8008d7e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	685b      	ldr	r3, [r3, #4]
 8008d76:	b2da      	uxtb	r2, r3
 8008d78:	697b      	ldr	r3, [r7, #20]
 8008d7a:	701a      	strb	r2, [r3, #0]
 8008d7c:	e008      	b.n	8008d90 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	685b      	ldr	r3, [r3, #4]
 8008d84:	b2db      	uxtb	r3, r3
 8008d86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d8a:	b2da      	uxtb	r2, r3
 8008d8c:	697b      	ldr	r3, [r7, #20]
 8008d8e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d94:	1c5a      	adds	r2, r3, #1
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008d9e:	b29b      	uxth	r3, r3
 8008da0:	3b01      	subs	r3, #1
 8008da2:	b29b      	uxth	r3, r3
 8008da4:	687a      	ldr	r2, [r7, #4]
 8008da6:	4619      	mov	r1, r3
 8008da8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d14a      	bne.n	8008e44 <UART_Receive_IT+0x148>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	68da      	ldr	r2, [r3, #12]
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f022 0220 	bic.w	r2, r2, #32
 8008dbc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	68da      	ldr	r2, [r3, #12]
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008dcc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	695a      	ldr	r2, [r3, #20]
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f022 0201 	bic.w	r2, r2, #1
 8008ddc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2220      	movs	r2, #32
 8008de2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dea:	2b01      	cmp	r3, #1
 8008dec:	d124      	bne.n	8008e38 <UART_Receive_IT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2200      	movs	r2, #0
 8008df2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	68da      	ldr	r2, [r3, #12]
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f022 0210 	bic.w	r2, r2, #16
 8008e02:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f003 0310 	and.w	r3, r3, #16
 8008e0e:	2b10      	cmp	r3, #16
 8008e10:	d10a      	bne.n	8008e28 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008e12:	2300      	movs	r3, #0
 8008e14:	60fb      	str	r3, [r7, #12]
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	60fb      	str	r3, [r7, #12]
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	685b      	ldr	r3, [r3, #4]
 8008e24:	60fb      	str	r3, [r7, #12]
 8008e26:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008e2c:	687a      	ldr	r2, [r7, #4]
 8008e2e:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8008e30:	4611      	mov	r1, r2
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	4798      	blx	r3
 8008e36:	e003      	b.n	8008e40 <UART_Receive_IT+0x144>
      else
      {
       /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	4798      	blx	r3
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008e40:	2300      	movs	r3, #0
 8008e42:	e002      	b.n	8008e4a <UART_Receive_IT+0x14e>
    }
    return HAL_OK;
 8008e44:	2300      	movs	r3, #0
 8008e46:	e000      	b.n	8008e4a <UART_Receive_IT+0x14e>
  }
  else
  {
    return HAL_BUSY;
 8008e48:	2302      	movs	r3, #2
  }
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	3718      	adds	r7, #24
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}
	...

08008e54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b084      	sub	sp, #16
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	685b      	ldr	r3, [r3, #4]
 8008e60:	4a5f      	ldr	r2, [pc, #380]	; (8008fe0 <UART_SetConfig+0x18c>)
 8008e62:	4293      	cmp	r3, r2
 8008e64:	d904      	bls.n	8008e70 <UART_SetConfig+0x1c>
 8008e66:	f640 6153 	movw	r1, #3667	; 0xe53
 8008e6a:	485e      	ldr	r0, [pc, #376]	; (8008fe4 <UART_SetConfig+0x190>)
 8008e6c:	f7f9 f928 	bl	80020c0 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	68db      	ldr	r3, [r3, #12]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d009      	beq.n	8008e8c <UART_SetConfig+0x38>
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	68db      	ldr	r3, [r3, #12]
 8008e7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e80:	d004      	beq.n	8008e8c <UART_SetConfig+0x38>
 8008e82:	f640 6154 	movw	r1, #3668	; 0xe54
 8008e86:	4857      	ldr	r0, [pc, #348]	; (8008fe4 <UART_SetConfig+0x190>)
 8008e88:	f7f9 f91a 	bl	80020c0 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	691b      	ldr	r3, [r3, #16]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d00e      	beq.n	8008eb2 <UART_SetConfig+0x5e>
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	691b      	ldr	r3, [r3, #16]
 8008e98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e9c:	d009      	beq.n	8008eb2 <UART_SetConfig+0x5e>
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	691b      	ldr	r3, [r3, #16]
 8008ea2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008ea6:	d004      	beq.n	8008eb2 <UART_SetConfig+0x5e>
 8008ea8:	f640 6155 	movw	r1, #3669	; 0xe55
 8008eac:	484d      	ldr	r0, [pc, #308]	; (8008fe4 <UART_SetConfig+0x190>)
 8008eae:	f7f9 f907 	bl	80020c0 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	695a      	ldr	r2, [r3, #20]
 8008eb6:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8008eba:	4013      	ands	r3, r2
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d103      	bne.n	8008ec8 <UART_SetConfig+0x74>
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	695b      	ldr	r3, [r3, #20]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d104      	bne.n	8008ed2 <UART_SetConfig+0x7e>
 8008ec8:	f640 6156 	movw	r1, #3670	; 0xe56
 8008ecc:	4845      	ldr	r0, [pc, #276]	; (8008fe4 <UART_SetConfig+0x190>)
 8008ece:	f7f9 f8f7 	bl	80020c0 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	691b      	ldr	r3, [r3, #16]
 8008ed8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	68da      	ldr	r2, [r3, #12]
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	430a      	orrs	r2, r1
 8008ee6:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	689a      	ldr	r2, [r3, #8]
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	691b      	ldr	r3, [r3, #16]
 8008ef0:	431a      	orrs	r2, r3
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	695b      	ldr	r3, [r3, #20]
 8008ef6:	4313      	orrs	r3, r2
 8008ef8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	68db      	ldr	r3, [r3, #12]
 8008f00:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8008f04:	f023 030c 	bic.w	r3, r3, #12
 8008f08:	687a      	ldr	r2, [r7, #4]
 8008f0a:	6812      	ldr	r2, [r2, #0]
 8008f0c:	68b9      	ldr	r1, [r7, #8]
 8008f0e:	430b      	orrs	r3, r1
 8008f10:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	695b      	ldr	r3, [r3, #20]
 8008f18:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	699a      	ldr	r2, [r3, #24]
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	430a      	orrs	r2, r1
 8008f26:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	4a2e      	ldr	r2, [pc, #184]	; (8008fe8 <UART_SetConfig+0x194>)
 8008f2e:	4293      	cmp	r3, r2
 8008f30:	d103      	bne.n	8008f3a <UART_SetConfig+0xe6>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008f32:	f7fb feaf 	bl	8004c94 <HAL_RCC_GetPCLK2Freq>
 8008f36:	60f8      	str	r0, [r7, #12]
 8008f38:	e002      	b.n	8008f40 <UART_SetConfig+0xec>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008f3a:	f7fb fe97 	bl	8004c6c <HAL_RCC_GetPCLK1Freq>
 8008f3e:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008f40:	68fa      	ldr	r2, [r7, #12]
 8008f42:	4613      	mov	r3, r2
 8008f44:	009b      	lsls	r3, r3, #2
 8008f46:	4413      	add	r3, r2
 8008f48:	009a      	lsls	r2, r3, #2
 8008f4a:	441a      	add	r2, r3
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	685b      	ldr	r3, [r3, #4]
 8008f50:	009b      	lsls	r3, r3, #2
 8008f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f56:	4a25      	ldr	r2, [pc, #148]	; (8008fec <UART_SetConfig+0x198>)
 8008f58:	fba2 2303 	umull	r2, r3, r2, r3
 8008f5c:	095b      	lsrs	r3, r3, #5
 8008f5e:	0119      	lsls	r1, r3, #4
 8008f60:	68fa      	ldr	r2, [r7, #12]
 8008f62:	4613      	mov	r3, r2
 8008f64:	009b      	lsls	r3, r3, #2
 8008f66:	4413      	add	r3, r2
 8008f68:	009a      	lsls	r2, r3, #2
 8008f6a:	441a      	add	r2, r3
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	685b      	ldr	r3, [r3, #4]
 8008f70:	009b      	lsls	r3, r3, #2
 8008f72:	fbb2 f2f3 	udiv	r2, r2, r3
 8008f76:	4b1d      	ldr	r3, [pc, #116]	; (8008fec <UART_SetConfig+0x198>)
 8008f78:	fba3 0302 	umull	r0, r3, r3, r2
 8008f7c:	095b      	lsrs	r3, r3, #5
 8008f7e:	2064      	movs	r0, #100	; 0x64
 8008f80:	fb00 f303 	mul.w	r3, r0, r3
 8008f84:	1ad3      	subs	r3, r2, r3
 8008f86:	011b      	lsls	r3, r3, #4
 8008f88:	3332      	adds	r3, #50	; 0x32
 8008f8a:	4a18      	ldr	r2, [pc, #96]	; (8008fec <UART_SetConfig+0x198>)
 8008f8c:	fba2 2303 	umull	r2, r3, r2, r3
 8008f90:	095b      	lsrs	r3, r3, #5
 8008f92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008f96:	4419      	add	r1, r3
 8008f98:	68fa      	ldr	r2, [r7, #12]
 8008f9a:	4613      	mov	r3, r2
 8008f9c:	009b      	lsls	r3, r3, #2
 8008f9e:	4413      	add	r3, r2
 8008fa0:	009a      	lsls	r2, r3, #2
 8008fa2:	441a      	add	r2, r3
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	685b      	ldr	r3, [r3, #4]
 8008fa8:	009b      	lsls	r3, r3, #2
 8008faa:	fbb2 f2f3 	udiv	r2, r2, r3
 8008fae:	4b0f      	ldr	r3, [pc, #60]	; (8008fec <UART_SetConfig+0x198>)
 8008fb0:	fba3 0302 	umull	r0, r3, r3, r2
 8008fb4:	095b      	lsrs	r3, r3, #5
 8008fb6:	2064      	movs	r0, #100	; 0x64
 8008fb8:	fb00 f303 	mul.w	r3, r0, r3
 8008fbc:	1ad3      	subs	r3, r2, r3
 8008fbe:	011b      	lsls	r3, r3, #4
 8008fc0:	3332      	adds	r3, #50	; 0x32
 8008fc2:	4a0a      	ldr	r2, [pc, #40]	; (8008fec <UART_SetConfig+0x198>)
 8008fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8008fc8:	095b      	lsrs	r3, r3, #5
 8008fca:	f003 020f 	and.w	r2, r3, #15
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	440a      	add	r2, r1
 8008fd4:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008fd6:	bf00      	nop
 8008fd8:	3710      	adds	r7, #16
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}
 8008fde:	bf00      	nop
 8008fe0:	0044aa20 	.word	0x0044aa20
 8008fe4:	0800f0d8 	.word	0x0800f0d8
 8008fe8:	40013800 	.word	0x40013800
 8008fec:	51eb851f 	.word	0x51eb851f

08008ff0 <BAT_init>:
static ADC_HandleTypeDef *g_BAT_adcHandle;
static RTC_HandleTypeDef *g_BAT_rtcHandle;
static RTC_TimeTypeDef    g_BAT_lastReadTime;

void BAT_init(ADC_HandleTypeDef *p_adcHandle, RTC_HandleTypeDef *p_rtcHandle)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b084      	sub	sp, #16
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
 8008ff8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef l_halReturnCode;
  RTC_TimeTypeDef   l_time;
  RTC_DateTypeDef   l_date;

  LOG_info("Initializing battery check");
 8008ffa:	491e      	ldr	r1, [pc, #120]	; (8009074 <BAT_init+0x84>)
 8008ffc:	2001      	movs	r0, #1
 8008ffe:	f001 fed5 	bl	800adac <LOG_log>

  g_BAT_adcHandle = p_adcHandle;
 8009002:	4a1d      	ldr	r2, [pc, #116]	; (8009078 <BAT_init+0x88>)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	6013      	str	r3, [r2, #0]
  g_BAT_rtcHandle = p_rtcHandle;
 8009008:	4a1c      	ldr	r2, [pc, #112]	; (800907c <BAT_init+0x8c>)
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	6013      	str	r3, [r2, #0]

  l_halReturnCode = HAL_RTC_GetTime(g_BAT_rtcHandle, &l_time, RTC_FORMAT_BCD);
 800900e:	4b1b      	ldr	r3, [pc, #108]	; (800907c <BAT_init+0x8c>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f107 010c 	add.w	r1, r7, #12
 8009016:	2201      	movs	r2, #1
 8009018:	4618      	mov	r0, r3
 800901a:	f7fc fa39 	bl	8005490 <HAL_RTC_GetTime>
 800901e:	4603      	mov	r3, r0
 8009020:	73fb      	strb	r3, [r7, #15]

  if (l_halReturnCode != HAL_OK)
 8009022:	7bfb      	ldrb	r3, [r7, #15]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d005      	beq.n	8009034 <BAT_init+0x44>
  {
    LOG_error("HAL_RTC_GetTime() returned an error code: %d", l_halReturnCode);
 8009028:	7bfb      	ldrb	r3, [r7, #15]
 800902a:	461a      	mov	r2, r3
 800902c:	4914      	ldr	r1, [pc, #80]	; (8009080 <BAT_init+0x90>)
 800902e:	2003      	movs	r0, #3
 8009030:	f001 febc 	bl	800adac <LOG_log>
  else
  {
    ; /* Nothing to to */
  }

  l_halReturnCode = HAL_RTC_GetDate(g_BAT_rtcHandle, &l_date, RTC_FORMAT_BCD);
 8009034:	4b11      	ldr	r3, [pc, #68]	; (800907c <BAT_init+0x8c>)
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f107 0108 	add.w	r1, r7, #8
 800903c:	2201      	movs	r2, #1
 800903e:	4618      	mov	r0, r3
 8009040:	f7fc fc2a 	bl	8005898 <HAL_RTC_GetDate>
 8009044:	4603      	mov	r3, r0
 8009046:	73fb      	strb	r3, [r7, #15]

  if (l_halReturnCode != HAL_OK)
 8009048:	7bfb      	ldrb	r3, [r7, #15]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d005      	beq.n	800905a <BAT_init+0x6a>
  {
    LOG_error("HAL_RTC_GetDate() returned an error code: %d", l_halReturnCode);
 800904e:	7bfb      	ldrb	r3, [r7, #15]
 8009050:	461a      	mov	r2, r3
 8009052:	490c      	ldr	r1, [pc, #48]	; (8009084 <BAT_init+0x94>)
 8009054:	2003      	movs	r0, #3
 8009056:	f001 fea9 	bl	800adac <LOG_log>
  else
  {
    ; /* Nothing to to */
  }

  g_BAT_lastReadTime = l_time;
 800905a:	4b0b      	ldr	r3, [pc, #44]	; (8009088 <BAT_init+0x98>)
 800905c:	f107 020c 	add.w	r2, r7, #12
 8009060:	6812      	ldr	r2, [r2, #0]
 8009062:	4611      	mov	r1, r2
 8009064:	8019      	strh	r1, [r3, #0]
 8009066:	3302      	adds	r3, #2
 8009068:	0c12      	lsrs	r2, r2, #16
 800906a:	701a      	strb	r2, [r3, #0]

  return;
 800906c:	bf00      	nop
}
 800906e:	3710      	adds	r7, #16
 8009070:	46bd      	mov	sp, r7
 8009072:	bd80      	pop	{r7, pc}
 8009074:	0800f114 	.word	0x0800f114
 8009078:	2000021c 	.word	0x2000021c
 800907c:	20000220 	.word	0x20000220
 8009080:	0800f130 	.word	0x0800f130
 8009084:	0800f160 	.word	0x0800f160
 8009088:	20000224 	.word	0x20000224

0800908c <BAT_update>:

void BAT_update(uint32_t *p_voltageInMv)
{
 800908c:	b590      	push	{r4, r7, lr}
 800908e:	b089      	sub	sp, #36	; 0x24
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
  RTC_TimeTypeDef   l_time;
  RTC_DateTypeDef   l_date;
  uint32_t          l_adcRawData;
  float             l_voltageInV;

  l_halReturnCode = HAL_RTC_GetTime(g_BAT_rtcHandle, &l_time, RTC_FORMAT_BCD);
 8009094:	4b48      	ldr	r3, [pc, #288]	; (80091b8 <BAT_update+0x12c>)
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f107 0110 	add.w	r1, r7, #16
 800909c:	2201      	movs	r2, #1
 800909e:	4618      	mov	r0, r3
 80090a0:	f7fc f9f6 	bl	8005490 <HAL_RTC_GetTime>
 80090a4:	4603      	mov	r3, r0
 80090a6:	77fb      	strb	r3, [r7, #31]

  if (l_halReturnCode != HAL_OK)
 80090a8:	7ffb      	ldrb	r3, [r7, #31]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d005      	beq.n	80090ba <BAT_update+0x2e>
  {
    LOG_error("HAL_RTC_GetTime() returned an error code: %d", l_halReturnCode);
 80090ae:	7ffb      	ldrb	r3, [r7, #31]
 80090b0:	461a      	mov	r2, r3
 80090b2:	4942      	ldr	r1, [pc, #264]	; (80091bc <BAT_update+0x130>)
 80090b4:	2003      	movs	r0, #3
 80090b6:	f001 fe79 	bl	800adac <LOG_log>
  else
  {
    ; /* Nothing to to */
  }

  l_halReturnCode = HAL_RTC_GetDate(g_BAT_rtcHandle, &l_date, RTC_FORMAT_BCD);
 80090ba:	4b3f      	ldr	r3, [pc, #252]	; (80091b8 <BAT_update+0x12c>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f107 010c 	add.w	r1, r7, #12
 80090c2:	2201      	movs	r2, #1
 80090c4:	4618      	mov	r0, r3
 80090c6:	f7fc fbe7 	bl	8005898 <HAL_RTC_GetDate>
 80090ca:	4603      	mov	r3, r0
 80090cc:	77fb      	strb	r3, [r7, #31]

  if (l_halReturnCode != HAL_OK)
 80090ce:	7ffb      	ldrb	r3, [r7, #31]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d005      	beq.n	80090e0 <BAT_update+0x54>
  {
    LOG_error("HAL_RTC_GetDate() returned an error code: %d", l_halReturnCode);
 80090d4:	7ffb      	ldrb	r3, [r7, #31]
 80090d6:	461a      	mov	r2, r3
 80090d8:	4939      	ldr	r1, [pc, #228]	; (80091c0 <BAT_update+0x134>)
 80090da:	2003      	movs	r0, #3
 80090dc:	f001 fe66 	bl	800adac <LOG_log>
  else
  {
    ; /* Nothing to to */
  }

  if (UTI_turnRtcTimeToSeconds(&l_time) - UTI_turnRtcTimeToSeconds(&g_BAT_lastReadTime) >= BAT_POLLING_PERIOD_IN_S)
 80090e0:	f107 0310 	add.w	r3, r7, #16
 80090e4:	4618      	mov	r0, r3
 80090e6:	f002 fba4 	bl	800b832 <UTI_turnRtcTimeToSeconds>
 80090ea:	4604      	mov	r4, r0
 80090ec:	4835      	ldr	r0, [pc, #212]	; (80091c4 <BAT_update+0x138>)
 80090ee:	f002 fba0 	bl	800b832 <UTI_turnRtcTimeToSeconds>
 80090f2:	4603      	mov	r3, r0
 80090f4:	1ae3      	subs	r3, r4, r3
 80090f6:	2b09      	cmp	r3, #9
 80090f8:	d959      	bls.n	80091ae <BAT_update+0x122>
  {
    g_BAT_lastReadTime = l_time;
 80090fa:	4b32      	ldr	r3, [pc, #200]	; (80091c4 <BAT_update+0x138>)
 80090fc:	f107 0210 	add.w	r2, r7, #16
 8009100:	6812      	ldr	r2, [r2, #0]
 8009102:	4611      	mov	r1, r2
 8009104:	8019      	strh	r1, [r3, #0]
 8009106:	3302      	adds	r3, #2
 8009108:	0c12      	lsrs	r2, r2, #16
 800910a:	701a      	strb	r2, [r3, #0]

    l_halReturnCode = HAL_ADC_Start(g_BAT_adcHandle);
 800910c:	4b2e      	ldr	r3, [pc, #184]	; (80091c8 <BAT_update+0x13c>)
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	4618      	mov	r0, r3
 8009112:	f7f9 fe51 	bl	8002db8 <HAL_ADC_Start>
 8009116:	4603      	mov	r3, r0
 8009118:	77fb      	strb	r3, [r7, #31]

    if (l_halReturnCode != HAL_OK)
 800911a:	7ffb      	ldrb	r3, [r7, #31]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d005      	beq.n	800912c <BAT_update+0xa0>
    {
      LOG_error("HAL_ADC_Start() returned an error code: %d", l_halReturnCode);
 8009120:	7ffb      	ldrb	r3, [r7, #31]
 8009122:	461a      	mov	r2, r3
 8009124:	4929      	ldr	r1, [pc, #164]	; (80091cc <BAT_update+0x140>)
 8009126:	2003      	movs	r0, #3
 8009128:	f001 fe40 	bl	800adac <LOG_log>
    else
    {
      ; /* Nothing to to */
    }

    l_halReturnCode = HAL_ADC_PollForConversion(g_BAT_adcHandle, HAL_MAX_DELAY);
 800912c:	4b26      	ldr	r3, [pc, #152]	; (80091c8 <BAT_update+0x13c>)
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f04f 31ff 	mov.w	r1, #4294967295
 8009134:	4618      	mov	r0, r3
 8009136:	f7f9 ff05 	bl	8002f44 <HAL_ADC_PollForConversion>
 800913a:	4603      	mov	r3, r0
 800913c:	77fb      	strb	r3, [r7, #31]

    if (l_halReturnCode != HAL_OK)
 800913e:	7ffb      	ldrb	r3, [r7, #31]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d005      	beq.n	8009150 <BAT_update+0xc4>
    {
      LOG_error("HAL_ADC_PollForConversion() returned an error code: %d", l_halReturnCode);
 8009144:	7ffb      	ldrb	r3, [r7, #31]
 8009146:	461a      	mov	r2, r3
 8009148:	4921      	ldr	r1, [pc, #132]	; (80091d0 <BAT_update+0x144>)
 800914a:	2003      	movs	r0, #3
 800914c:	f001 fe2e 	bl	800adac <LOG_log>
    else
    {
      ; /* Nothing to to */
    }

    l_adcRawData = HAL_ADC_GetValue(g_BAT_adcHandle);
 8009150:	4b1d      	ldr	r3, [pc, #116]	; (80091c8 <BAT_update+0x13c>)
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	4618      	mov	r0, r3
 8009156:	f7fa f817 	bl	8003188 <HAL_ADC_GetValue>
 800915a:	61b8      	str	r0, [r7, #24]

    /* Apply conversion based on STM32 reference voltage & resolution */
    l_voltageInV  = (l_adcRawData * 3.30f ) / 4096.0f;
 800915c:	69b8      	ldr	r0, [r7, #24]
 800915e:	f7f7 fdb5 	bl	8000ccc <__aeabi_ui2f>
 8009162:	4603      	mov	r3, r0
 8009164:	491b      	ldr	r1, [pc, #108]	; (80091d4 <BAT_update+0x148>)
 8009166:	4618      	mov	r0, r3
 8009168:	f7f7 fe08 	bl	8000d7c <__aeabi_fmul>
 800916c:	4603      	mov	r3, r0
 800916e:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 8009172:	4618      	mov	r0, r3
 8009174:	f7f7 feb6 	bl	8000ee4 <__aeabi_fdiv>
 8009178:	4603      	mov	r3, r0
 800917a:	617b      	str	r3, [r7, #20]

    /* Consider voltage divider used between the battery & the ADC input */
    l_voltageInV *= 11.0f;
 800917c:	4916      	ldr	r1, [pc, #88]	; (80091d8 <BAT_update+0x14c>)
 800917e:	6978      	ldr	r0, [r7, #20]
 8009180:	f7f7 fdfc 	bl	8000d7c <__aeabi_fmul>
 8009184:	4603      	mov	r3, r0
 8009186:	617b      	str	r3, [r7, #20]

    *p_voltageInMv = (uint32_t)(l_voltageInV * 1000.0f);
 8009188:	4914      	ldr	r1, [pc, #80]	; (80091dc <BAT_update+0x150>)
 800918a:	6978      	ldr	r0, [r7, #20]
 800918c:	f7f7 fdf6 	bl	8000d7c <__aeabi_fmul>
 8009190:	4603      	mov	r3, r0
 8009192:	4618      	mov	r0, r3
 8009194:	f7f7 ff68 	bl	8001068 <__aeabi_f2uiz>
 8009198:	4602      	mov	r2, r0
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	601a      	str	r2, [r3, #0]

    LOG_debug("Battery level: %u mV", *p_voltageInMv);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	461a      	mov	r2, r3
 80091a4:	490e      	ldr	r1, [pc, #56]	; (80091e0 <BAT_update+0x154>)
 80091a6:	2000      	movs	r0, #0
 80091a8:	f001 fe00 	bl	800adac <LOG_log>
  else
  {
    ; /* Nothing to do */
  }

  return;
 80091ac:	bf00      	nop
 80091ae:	bf00      	nop
}
 80091b0:	3724      	adds	r7, #36	; 0x24
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bd90      	pop	{r4, r7, pc}
 80091b6:	bf00      	nop
 80091b8:	20000220 	.word	0x20000220
 80091bc:	0800f130 	.word	0x0800f130
 80091c0:	0800f160 	.word	0x0800f160
 80091c4:	20000224 	.word	0x20000224
 80091c8:	2000021c 	.word	0x2000021c
 80091cc:	0800f190 	.word	0x0800f190
 80091d0:	0800f1bc 	.word	0x0800f1bc
 80091d4:	40533333 	.word	0x40533333
 80091d8:	41300000 	.word	0x41300000
 80091dc:	447a0000 	.word	0x447a0000
 80091e0:	0800f1f4 	.word	0x0800f1f4

080091e4 <BLU_sendCommand>:
static void         BLU_sendCommand(uint8_t  p_command);
static void         BLU_readData   (uint8_t *p_buffer );
static T_BLU_BUTTON BLU_getButton  (uint8_t *p_buffer );

static void BLU_sendCommand(uint8_t p_command)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b084      	sub	sp, #16
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	4603      	mov	r3, r0
 80091ec:	71fb      	strb	r3, [r7, #7]
  volatile uint16_t l_bitValue;

  for (l_bitValue = 0x01; l_bitValue < 0x0100; l_bitValue <<= 1)
 80091ee:	2301      	movs	r3, #1
 80091f0:	81fb      	strh	r3, [r7, #14]
 80091f2:	e030      	b.n	8009256 <BLU_sendCommand+0x72>
  {
    if ((l_bitValue & p_command) != 0)
 80091f4:	89fb      	ldrh	r3, [r7, #14]
 80091f6:	b29b      	uxth	r3, r3
 80091f8:	461a      	mov	r2, r3
 80091fa:	79fb      	ldrb	r3, [r7, #7]
 80091fc:	4013      	ands	r3, r2
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d006      	beq.n	8009210 <BLU_sendCommand+0x2c>
    {
      SET_BIT(GPIOC->ODR, BLUETOOTH_SPI_CMD_Pin);
 8009202:	4b1a      	ldr	r3, [pc, #104]	; (800926c <BLU_sendCommand+0x88>)
 8009204:	68db      	ldr	r3, [r3, #12]
 8009206:	4a19      	ldr	r2, [pc, #100]	; (800926c <BLU_sendCommand+0x88>)
 8009208:	f043 0302 	orr.w	r3, r3, #2
 800920c:	60d3      	str	r3, [r2, #12]
 800920e:	e005      	b.n	800921c <BLU_sendCommand+0x38>
    }
    else
    {
      CLEAR_BIT(GPIOC->ODR, BLUETOOTH_SPI_CMD_Pin);
 8009210:	4b16      	ldr	r3, [pc, #88]	; (800926c <BLU_sendCommand+0x88>)
 8009212:	68db      	ldr	r3, [r3, #12]
 8009214:	4a15      	ldr	r2, [pc, #84]	; (800926c <BLU_sendCommand+0x88>)
 8009216:	f023 0302 	bic.w	r3, r3, #2
 800921a:	60d3      	str	r3, [r2, #12]
    }

    SET_BIT(GPIOA->ODR  , BLUETOOTH_SPI_CLK_Pin);
 800921c:	4b14      	ldr	r3, [pc, #80]	; (8009270 <BLU_sendCommand+0x8c>)
 800921e:	68db      	ldr	r3, [r3, #12]
 8009220:	4a13      	ldr	r2, [pc, #76]	; (8009270 <BLU_sendCommand+0x8c>)
 8009222:	f043 0310 	orr.w	r3, r3, #16
 8009226:	60d3      	str	r3, [r2, #12]
    UTI_delayUs(5);
 8009228:	2005      	movs	r0, #5
 800922a:	f002 fac1 	bl	800b7b0 <UTI_delayUs>
    CLEAR_BIT(GPIOA->ODR, BLUETOOTH_SPI_CLK_Pin);
 800922e:	4b10      	ldr	r3, [pc, #64]	; (8009270 <BLU_sendCommand+0x8c>)
 8009230:	68db      	ldr	r3, [r3, #12]
 8009232:	4a0f      	ldr	r2, [pc, #60]	; (8009270 <BLU_sendCommand+0x8c>)
 8009234:	f023 0310 	bic.w	r3, r3, #16
 8009238:	60d3      	str	r3, [r2, #12]
    UTI_delayUs(5);
 800923a:	2005      	movs	r0, #5
 800923c:	f002 fab8 	bl	800b7b0 <UTI_delayUs>
    SET_BIT(GPIOA->ODR  , BLUETOOTH_SPI_CLK_Pin);
 8009240:	4b0b      	ldr	r3, [pc, #44]	; (8009270 <BLU_sendCommand+0x8c>)
 8009242:	68db      	ldr	r3, [r3, #12]
 8009244:	4a0a      	ldr	r2, [pc, #40]	; (8009270 <BLU_sendCommand+0x8c>)
 8009246:	f043 0310 	orr.w	r3, r3, #16
 800924a:	60d3      	str	r3, [r2, #12]
  for (l_bitValue = 0x01; l_bitValue < 0x0100; l_bitValue <<= 1)
 800924c:	89fb      	ldrh	r3, [r7, #14]
 800924e:	b29b      	uxth	r3, r3
 8009250:	005b      	lsls	r3, r3, #1
 8009252:	b29b      	uxth	r3, r3
 8009254:	81fb      	strh	r3, [r7, #14]
 8009256:	89fb      	ldrh	r3, [r7, #14]
 8009258:	b29b      	uxth	r3, r3
 800925a:	2bff      	cmp	r3, #255	; 0xff
 800925c:	d9ca      	bls.n	80091f4 <BLU_sendCommand+0x10>
  }
  UTI_delayUs(16);
 800925e:	2010      	movs	r0, #16
 8009260:	f002 faa6 	bl	800b7b0 <UTI_delayUs>

  return;
 8009264:	bf00      	nop
}
 8009266:	3710      	adds	r7, #16
 8009268:	46bd      	mov	sp, r7
 800926a:	bd80      	pop	{r7, pc}
 800926c:	40011000 	.word	0x40011000
 8009270:	40010800 	.word	0x40010800

08009274 <BLU_readData>:

static void BLU_readData(uint8_t *p_buffer)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b084      	sub	sp, #16
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
  volatile uint8_t  l_index;
  volatile uint16_t l_bitValue;

  /* Reset buffer */
  for (l_index = 0; l_index < BLU_DATA_BUFFER_LENGTH; l_index++)
 800927c:	2300      	movs	r3, #0
 800927e:	73fb      	strb	r3, [r7, #15]
 8009280:	e00b      	b.n	800929a <BLU_readData+0x26>
  {
    p_buffer[l_index] = 0x00;
 8009282:	7bfb      	ldrb	r3, [r7, #15]
 8009284:	b2db      	uxtb	r3, r3
 8009286:	461a      	mov	r2, r3
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	4413      	add	r3, r2
 800928c:	2200      	movs	r2, #0
 800928e:	701a      	strb	r2, [r3, #0]
  for (l_index = 0; l_index < BLU_DATA_BUFFER_LENGTH; l_index++)
 8009290:	7bfb      	ldrb	r3, [r7, #15]
 8009292:	b2db      	uxtb	r3, r3
 8009294:	3301      	adds	r3, #1
 8009296:	b2db      	uxtb	r3, r3
 8009298:	73fb      	strb	r3, [r7, #15]
 800929a:	7bfb      	ldrb	r3, [r7, #15]
 800929c:	b2db      	uxtb	r3, r3
 800929e:	2b06      	cmp	r3, #6
 80092a0:	d9ef      	bls.n	8009282 <BLU_readData+0xe>
  }

  CLEAR_BIT(GPIOC->ODR, BLUETOOTH_SPI_CS_Pin);
 80092a2:	4b2e      	ldr	r3, [pc, #184]	; (800935c <BLU_readData+0xe8>)
 80092a4:	68db      	ldr	r3, [r3, #12]
 80092a6:	4a2d      	ldr	r2, [pc, #180]	; (800935c <BLU_readData+0xe8>)
 80092a8:	f023 0308 	bic.w	r3, r3, #8
 80092ac:	60d3      	str	r3, [r2, #12]

  BLU_sendCommand(0x01);
 80092ae:	2001      	movs	r0, #1
 80092b0:	f7ff ff98 	bl	80091e4 <BLU_sendCommand>
  BLU_sendCommand(0x42);
 80092b4:	2042      	movs	r0, #66	; 0x42
 80092b6:	f7ff ff95 	bl	80091e4 <BLU_sendCommand>

  for (l_index = 0; l_index < BLU_DATA_BUFFER_LENGTH; l_index++)
 80092ba:	2300      	movs	r3, #0
 80092bc:	73fb      	strb	r3, [r7, #15]
 80092be:	e03f      	b.n	8009340 <BLU_readData+0xcc>
  {
    for (l_bitValue = 0x01; l_bitValue < 0x100; l_bitValue <<= 1)
 80092c0:	2301      	movs	r3, #1
 80092c2:	81bb      	strh	r3, [r7, #12]
 80092c4:	e030      	b.n	8009328 <BLU_readData+0xb4>
    {
      SET_BIT(GPIOA->ODR  , BLUETOOTH_SPI_CLK_Pin);
 80092c6:	4b26      	ldr	r3, [pc, #152]	; (8009360 <BLU_readData+0xec>)
 80092c8:	68db      	ldr	r3, [r3, #12]
 80092ca:	4a25      	ldr	r2, [pc, #148]	; (8009360 <BLU_readData+0xec>)
 80092cc:	f043 0310 	orr.w	r3, r3, #16
 80092d0:	60d3      	str	r3, [r2, #12]
      UTI_delayUs(5);
 80092d2:	2005      	movs	r0, #5
 80092d4:	f002 fa6c 	bl	800b7b0 <UTI_delayUs>
      CLEAR_BIT(GPIOA->ODR, BLUETOOTH_SPI_CLK_Pin);
 80092d8:	4b21      	ldr	r3, [pc, #132]	; (8009360 <BLU_readData+0xec>)
 80092da:	68db      	ldr	r3, [r3, #12]
 80092dc:	4a20      	ldr	r2, [pc, #128]	; (8009360 <BLU_readData+0xec>)
 80092de:	f023 0310 	bic.w	r3, r3, #16
 80092e2:	60d3      	str	r3, [r2, #12]
      UTI_delayUs(5);
 80092e4:	2005      	movs	r0, #5
 80092e6:	f002 fa63 	bl	800b7b0 <UTI_delayUs>
      SET_BIT(GPIOA->ODR  , BLUETOOTH_SPI_CLK_Pin);
 80092ea:	4b1d      	ldr	r3, [pc, #116]	; (8009360 <BLU_readData+0xec>)
 80092ec:	68db      	ldr	r3, [r3, #12]
 80092ee:	4a1c      	ldr	r2, [pc, #112]	; (8009360 <BLU_readData+0xec>)
 80092f0:	f043 0310 	orr.w	r3, r3, #16
 80092f4:	60d3      	str	r3, [r2, #12]

      if (READ_BIT(GPIOC->IDR, BLUETOOTH_SPI_DAT_Pin) != GPIO_PIN_RESET)
 80092f6:	4b19      	ldr	r3, [pc, #100]	; (800935c <BLU_readData+0xe8>)
 80092f8:	689b      	ldr	r3, [r3, #8]
 80092fa:	f003 0304 	and.w	r3, r3, #4
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d00d      	beq.n	800931e <BLU_readData+0xaa>
      {
        p_buffer[l_index] |= l_bitValue;
 8009302:	89bb      	ldrh	r3, [r7, #12]
 8009304:	b29a      	uxth	r2, r3
 8009306:	7bfb      	ldrb	r3, [r7, #15]
 8009308:	b2d8      	uxtb	r0, r3
 800930a:	4601      	mov	r1, r0
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	440b      	add	r3, r1
 8009310:	7819      	ldrb	r1, [r3, #0]
 8009312:	b2d2      	uxtb	r2, r2
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	4403      	add	r3, r0
 8009318:	430a      	orrs	r2, r1
 800931a:	b2d2      	uxtb	r2, r2
 800931c:	701a      	strb	r2, [r3, #0]
    for (l_bitValue = 0x01; l_bitValue < 0x100; l_bitValue <<= 1)
 800931e:	89bb      	ldrh	r3, [r7, #12]
 8009320:	b29b      	uxth	r3, r3
 8009322:	005b      	lsls	r3, r3, #1
 8009324:	b29b      	uxth	r3, r3
 8009326:	81bb      	strh	r3, [r7, #12]
 8009328:	89bb      	ldrh	r3, [r7, #12]
 800932a:	b29b      	uxth	r3, r3
 800932c:	2bff      	cmp	r3, #255	; 0xff
 800932e:	d9ca      	bls.n	80092c6 <BLU_readData+0x52>
      else
      {
        ; /* Nothing to do */
      }
    }
      UTI_delayUs(16);
 8009330:	2010      	movs	r0, #16
 8009332:	f002 fa3d 	bl	800b7b0 <UTI_delayUs>
  for (l_index = 0; l_index < BLU_DATA_BUFFER_LENGTH; l_index++)
 8009336:	7bfb      	ldrb	r3, [r7, #15]
 8009338:	b2db      	uxtb	r3, r3
 800933a:	3301      	adds	r3, #1
 800933c:	b2db      	uxtb	r3, r3
 800933e:	73fb      	strb	r3, [r7, #15]
 8009340:	7bfb      	ldrb	r3, [r7, #15]
 8009342:	b2db      	uxtb	r3, r3
 8009344:	2b06      	cmp	r3, #6
 8009346:	d9bb      	bls.n	80092c0 <BLU_readData+0x4c>
  }

  SET_BIT(GPIOC->ODR, BLUETOOTH_SPI_CS_Pin);
 8009348:	4b04      	ldr	r3, [pc, #16]	; (800935c <BLU_readData+0xe8>)
 800934a:	68db      	ldr	r3, [r3, #12]
 800934c:	4a03      	ldr	r2, [pc, #12]	; (800935c <BLU_readData+0xe8>)
 800934e:	f043 0308 	orr.w	r3, r3, #8
 8009352:	60d3      	str	r3, [r2, #12]

  return;
 8009354:	bf00      	nop
}
 8009356:	3710      	adds	r7, #16
 8009358:	46bd      	mov	sp, r7
 800935a:	bd80      	pop	{r7, pc}
 800935c:	40011000 	.word	0x40011000
 8009360:	40010800 	.word	0x40010800

08009364 <BLU_getButton>:

static T_BLU_BUTTON BLU_getButton(uint8_t *p_buffer)
{
 8009364:	b480      	push	{r7}
 8009366:	b085      	sub	sp, #20
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
  uint16_t l_buttonRawValue;
  uint8_t  l_index;

  l_buttonRawValue = (p_buffer[BLU_BUTTON_HIGH_OFFSET] << 8) | p_buffer[BLU_BUTTON_LOW_OFFSET];
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	3302      	adds	r3, #2
 8009370:	781b      	ldrb	r3, [r3, #0]
 8009372:	021b      	lsls	r3, r3, #8
 8009374:	b21a      	sxth	r2, r3
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	3301      	adds	r3, #1
 800937a:	781b      	ldrb	r3, [r3, #0]
 800937c:	b21b      	sxth	r3, r3
 800937e:	4313      	orrs	r3, r2
 8009380:	b21b      	sxth	r3, r3
 8009382:	81bb      	strh	r3, [r7, #12]

  /* Ignore BLU_BUTTON_NONE value as it is not directly coded in raw data */
  for (l_index = BLU_BUTTON_SELECT; l_index < BLU_BUTTON_COUNT_VALUE; l_index++)
 8009384:	2301      	movs	r3, #1
 8009386:	73fb      	strb	r3, [r7, #15]
 8009388:	e00d      	b.n	80093a6 <BLU_getButton+0x42>
  {
    /* Stop decoding button data on 1st match (do not deal with multiple presses case) */
    if ((l_buttonRawValue & (1 << (l_index - 1))) == 0)
 800938a:	89ba      	ldrh	r2, [r7, #12]
 800938c:	7bfb      	ldrb	r3, [r7, #15]
 800938e:	3b01      	subs	r3, #1
 8009390:	fa42 f303 	asr.w	r3, r2, r3
 8009394:	f003 0301 	and.w	r3, r3, #1
 8009398:	2b00      	cmp	r3, #0
 800939a:	d101      	bne.n	80093a0 <BLU_getButton+0x3c>
    {
      return l_index;
 800939c:	7bfb      	ldrb	r3, [r7, #15]
 800939e:	e006      	b.n	80093ae <BLU_getButton+0x4a>
  for (l_index = BLU_BUTTON_SELECT; l_index < BLU_BUTTON_COUNT_VALUE; l_index++)
 80093a0:	7bfb      	ldrb	r3, [r7, #15]
 80093a2:	3301      	adds	r3, #1
 80093a4:	73fb      	strb	r3, [r7, #15]
 80093a6:	7bfb      	ldrb	r3, [r7, #15]
 80093a8:	2b10      	cmp	r3, #16
 80093aa:	d9ee      	bls.n	800938a <BLU_getButton+0x26>
    {
      ; /* Nothing to do */
    }
  }

  return BLU_BUTTON_NONE;
 80093ac:	2300      	movs	r3, #0
}
 80093ae:	4618      	mov	r0, r3
 80093b0:	3714      	adds	r7, #20
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bc80      	pop	{r7}
 80093b6:	4770      	bx	lr

080093b8 <BLU_init>:

void BLU_init(void)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	af00      	add	r7, sp, #0
  LOG_info("Initializing bluetooth control");
 80093bc:	4904      	ldr	r1, [pc, #16]	; (80093d0 <BLU_init+0x18>)
 80093be:	2001      	movs	r0, #1
 80093c0:	f001 fcf4 	bl	800adac <LOG_log>

  BLU_initData(&g_BLU_lastData);
 80093c4:	4803      	ldr	r0, [pc, #12]	; (80093d4 <BLU_init+0x1c>)
 80093c6:	f000 f807 	bl	80093d8 <BLU_initData>

  return;
 80093ca:	bf00      	nop
}
 80093cc:	bd80      	pop	{r7, pc}
 80093ce:	bf00      	nop
 80093d0:	0800f20c 	.word	0x0800f20c
 80093d4:	20000228 	.word	0x20000228

080093d8 <BLU_initData>:

void BLU_initData(T_BLU_Data *p_data)
{
 80093d8:	b480      	push	{r7}
 80093da:	b083      	sub	sp, #12
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
  p_data->leftX  = BLU_DATA_DEFAUT_DIRECTION;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2280      	movs	r2, #128	; 0x80
 80093e4:	601a      	str	r2, [r3, #0]
  p_data->leftY  = BLU_DATA_DEFAUT_DIRECTION;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2280      	movs	r2, #128	; 0x80
 80093ea:	605a      	str	r2, [r3, #4]
  p_data->rightX = BLU_DATA_DEFAUT_DIRECTION;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2280      	movs	r2, #128	; 0x80
 80093f0:	609a      	str	r2, [r3, #8]
  p_data->rightY = BLU_DATA_DEFAUT_DIRECTION;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	2280      	movs	r2, #128	; 0x80
 80093f6:	60da      	str	r2, [r3, #12]
  p_data->button = BLU_BUTTON_NONE;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2200      	movs	r2, #0
 80093fc:	741a      	strb	r2, [r3, #16]

  return;
 80093fe:	bf00      	nop
}
 8009400:	370c      	adds	r7, #12
 8009402:	46bd      	mov	sp, r7
 8009404:	bc80      	pop	{r7}
 8009406:	4770      	bx	lr

08009408 <BLU_receiveData>:

void BLU_receiveData(T_BLU_Data *p_data)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b08c      	sub	sp, #48	; 0x30
 800940c:	af02      	add	r7, sp, #8
 800940e:	6078      	str	r0, [r7, #4]
  uint8_t    l_buffer[BLU_DATA_BUFFER_LENGTH];
  T_BLU_Data l_readData;

  /* Read raw data */
  BLU_readData(l_buffer);
 8009410:	f107 0320 	add.w	r3, r7, #32
 8009414:	4618      	mov	r0, r3
 8009416:	f7ff ff2d 	bl	8009274 <BLU_readData>

  /* Start and decode raw data */
  l_readData.leftX  = l_buffer[BLU_LEFT_X_OFFSET ];
 800941a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800941e:	60fb      	str	r3, [r7, #12]
  l_readData.leftY  = l_buffer[BLU_LEFT_Y_OFFSET ];
 8009420:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009424:	613b      	str	r3, [r7, #16]
  l_readData.rightX = l_buffer[BLU_RIGHT_X_OFFSET];
 8009426:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800942a:	617b      	str	r3, [r7, #20]
  l_readData.rightY = l_buffer[BLU_RIGHT_Y_OFFSET];
 800942c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009430:	61bb      	str	r3, [r7, #24]
  l_readData.button = BLU_getButton(l_buffer);
 8009432:	f107 0320 	add.w	r3, r7, #32
 8009436:	4618      	mov	r0, r3
 8009438:	f7ff ff94 	bl	8009364 <BLU_getButton>
 800943c:	4603      	mov	r3, r0
 800943e:	773b      	strb	r3, [r7, #28]

  /* Deal with startup condition, while read data is not valid yet */
  if  ((l_readData.leftX == 255 && l_readData.leftY == 255 && l_readData.rightX == 255 && l_readData.rightY ==255)
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	2bff      	cmp	r3, #255	; 0xff
 8009444:	d108      	bne.n	8009458 <BLU_receiveData+0x50>
 8009446:	693b      	ldr	r3, [r7, #16]
 8009448:	2bff      	cmp	r3, #255	; 0xff
 800944a:	d105      	bne.n	8009458 <BLU_receiveData+0x50>
 800944c:	697b      	ldr	r3, [r7, #20]
 800944e:	2bff      	cmp	r3, #255	; 0xff
 8009450:	d102      	bne.n	8009458 <BLU_receiveData+0x50>
 8009452:	69bb      	ldr	r3, [r7, #24]
 8009454:	2bff      	cmp	r3, #255	; 0xff
 8009456:	d00b      	beq.n	8009470 <BLU_receiveData+0x68>
    || (l_readData.leftX ==   0 && l_readData.leftY ==   0 && l_readData.rightX ==   0 && l_readData.rightY ==  0))
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d10e      	bne.n	800947c <BLU_receiveData+0x74>
 800945e:	693b      	ldr	r3, [r7, #16]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d10b      	bne.n	800947c <BLU_receiveData+0x74>
 8009464:	697b      	ldr	r3, [r7, #20]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d108      	bne.n	800947c <BLU_receiveData+0x74>
 800946a:	69bb      	ldr	r3, [r7, #24]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d105      	bne.n	800947c <BLU_receiveData+0x74>
  {
    BLU_initData(&l_readData);
 8009470:	f107 030c 	add.w	r3, r7, #12
 8009474:	4618      	mov	r0, r3
 8009476:	f7ff ffaf 	bl	80093d8 <BLU_initData>
 800947a:	e053      	b.n	8009524 <BLU_receiveData+0x11c>
  }
  /* Use a confirmation mechanism, on 2 cycles, as glitches are observed */
  else if ((l_readData.leftX  == g_BLU_lastData.leftX) &&
 800947c:	68fa      	ldr	r2, [r7, #12]
 800947e:	4b33      	ldr	r3, [pc, #204]	; (800954c <BLU_receiveData+0x144>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	429a      	cmp	r2, r3
 8009484:	d14e      	bne.n	8009524 <BLU_receiveData+0x11c>
           (l_readData.leftY  == g_BLU_lastData.leftY) &&
 8009486:	693a      	ldr	r2, [r7, #16]
 8009488:	4b30      	ldr	r3, [pc, #192]	; (800954c <BLU_receiveData+0x144>)
 800948a:	685b      	ldr	r3, [r3, #4]
  else if ((l_readData.leftX  == g_BLU_lastData.leftX) &&
 800948c:	429a      	cmp	r2, r3
 800948e:	d149      	bne.n	8009524 <BLU_receiveData+0x11c>
           (l_readData.rightX == g_BLU_lastData.rightX) &&
 8009490:	697a      	ldr	r2, [r7, #20]
 8009492:	4b2e      	ldr	r3, [pc, #184]	; (800954c <BLU_receiveData+0x144>)
 8009494:	689b      	ldr	r3, [r3, #8]
           (l_readData.leftY  == g_BLU_lastData.leftY) &&
 8009496:	429a      	cmp	r2, r3
 8009498:	d144      	bne.n	8009524 <BLU_receiveData+0x11c>
           (l_readData.rightY == g_BLU_lastData.rightY) &&
 800949a:	69ba      	ldr	r2, [r7, #24]
 800949c:	4b2b      	ldr	r3, [pc, #172]	; (800954c <BLU_receiveData+0x144>)
 800949e:	68db      	ldr	r3, [r3, #12]
           (l_readData.rightX == g_BLU_lastData.rightX) &&
 80094a0:	429a      	cmp	r2, r3
 80094a2:	d13f      	bne.n	8009524 <BLU_receiveData+0x11c>
           (l_readData.button == g_BLU_lastData.button))
 80094a4:	7f3a      	ldrb	r2, [r7, #28]
 80094a6:	4b29      	ldr	r3, [pc, #164]	; (800954c <BLU_receiveData+0x144>)
 80094a8:	7c1b      	ldrb	r3, [r3, #16]
           (l_readData.rightY == g_BLU_lastData.rightY) &&
 80094aa:	429a      	cmp	r2, r3
 80094ac:	d13a      	bne.n	8009524 <BLU_receiveData+0x11c>
  {
    /* Normalize directions data in range [-MAX..MAX] */
    p_data->leftX  = UTI_normalizeIntValue(l_readData.leftX , 0, 255, -STP_DRIVE_MAX_SPEED, STP_DRIVE_MAX_SPEED, false);
 80094ae:	68f8      	ldr	r0, [r7, #12]
 80094b0:	2300      	movs	r3, #0
 80094b2:	9301      	str	r3, [sp, #4]
 80094b4:	2328      	movs	r3, #40	; 0x28
 80094b6:	9300      	str	r3, [sp, #0]
 80094b8:	f06f 0327 	mvn.w	r3, #39	; 0x27
 80094bc:	22ff      	movs	r2, #255	; 0xff
 80094be:	2100      	movs	r1, #0
 80094c0:	f002 f9fb 	bl	800b8ba <UTI_normalizeIntValue>
 80094c4:	4602      	mov	r2, r0
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	601a      	str	r2, [r3, #0]
    p_data->leftY  = UTI_normalizeIntValue(l_readData.leftY , 0, 255, -STP_DRIVE_MAX_SPEED, STP_DRIVE_MAX_SPEED, true );
 80094ca:	6938      	ldr	r0, [r7, #16]
 80094cc:	2301      	movs	r3, #1
 80094ce:	9301      	str	r3, [sp, #4]
 80094d0:	2328      	movs	r3, #40	; 0x28
 80094d2:	9300      	str	r3, [sp, #0]
 80094d4:	f06f 0327 	mvn.w	r3, #39	; 0x27
 80094d8:	22ff      	movs	r2, #255	; 0xff
 80094da:	2100      	movs	r1, #0
 80094dc:	f002 f9ed 	bl	800b8ba <UTI_normalizeIntValue>
 80094e0:	4602      	mov	r2, r0
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	605a      	str	r2, [r3, #4]
    p_data->rightX = UTI_normalizeIntValue(l_readData.rightX, 0, 255, -STP_DRIVE_MAX_SPEED, STP_DRIVE_MAX_SPEED, false);
 80094e6:	6978      	ldr	r0, [r7, #20]
 80094e8:	2300      	movs	r3, #0
 80094ea:	9301      	str	r3, [sp, #4]
 80094ec:	2328      	movs	r3, #40	; 0x28
 80094ee:	9300      	str	r3, [sp, #0]
 80094f0:	f06f 0327 	mvn.w	r3, #39	; 0x27
 80094f4:	22ff      	movs	r2, #255	; 0xff
 80094f6:	2100      	movs	r1, #0
 80094f8:	f002 f9df 	bl	800b8ba <UTI_normalizeIntValue>
 80094fc:	4602      	mov	r2, r0
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	609a      	str	r2, [r3, #8]
    p_data->rightY = UTI_normalizeIntValue(l_readData.rightY, 0, 255, -STP_DRIVE_MAX_SPEED, STP_DRIVE_MAX_SPEED, true );
 8009502:	69b8      	ldr	r0, [r7, #24]
 8009504:	2301      	movs	r3, #1
 8009506:	9301      	str	r3, [sp, #4]
 8009508:	2328      	movs	r3, #40	; 0x28
 800950a:	9300      	str	r3, [sp, #0]
 800950c:	f06f 0327 	mvn.w	r3, #39	; 0x27
 8009510:	22ff      	movs	r2, #255	; 0xff
 8009512:	2100      	movs	r1, #0
 8009514:	f002 f9d1 	bl	800b8ba <UTI_normalizeIntValue>
 8009518:	4602      	mov	r2, r0
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	60da      	str	r2, [r3, #12]
    p_data->button = l_readData.button;
 800951e:	7f3a      	ldrb	r2, [r7, #28]
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	741a      	strb	r2, [r3, #16]
  {
    ; /* Nothing to do */
  }

  /* Saved received data for later use in confirmation mechanism */
  g_BLU_lastData.leftX  = l_readData.leftX;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	4a09      	ldr	r2, [pc, #36]	; (800954c <BLU_receiveData+0x144>)
 8009528:	6013      	str	r3, [r2, #0]
  g_BLU_lastData.leftY  = l_readData.leftY;
 800952a:	693b      	ldr	r3, [r7, #16]
 800952c:	4a07      	ldr	r2, [pc, #28]	; (800954c <BLU_receiveData+0x144>)
 800952e:	6053      	str	r3, [r2, #4]
  g_BLU_lastData.rightX = l_readData.rightX;
 8009530:	697b      	ldr	r3, [r7, #20]
 8009532:	4a06      	ldr	r2, [pc, #24]	; (800954c <BLU_receiveData+0x144>)
 8009534:	6093      	str	r3, [r2, #8]
  g_BLU_lastData.rightY = l_readData.rightY;
 8009536:	69bb      	ldr	r3, [r7, #24]
 8009538:	4a04      	ldr	r2, [pc, #16]	; (800954c <BLU_receiveData+0x144>)
 800953a:	60d3      	str	r3, [r2, #12]
  g_BLU_lastData.button = l_readData.button;
 800953c:	7f3a      	ldrb	r2, [r7, #28]
 800953e:	4b03      	ldr	r3, [pc, #12]	; (800954c <BLU_receiveData+0x144>)
 8009540:	741a      	strb	r2, [r3, #16]

  return;
 8009542:	bf00      	nop
}
 8009544:	3728      	adds	r7, #40	; 0x28
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}
 800954a:	bf00      	nop
 800954c:	20000228 	.word	0x20000228

08009550 <CBU_init>:
#include "circular_buffer.h"

#include "log.h"

void CBU_init(T_CBU_Context *p_buffer)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b084      	sub	sp, #16
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
  uint32_t l_index;

  LOG_debug("Initializing circular buffer");
 8009558:	490e      	ldr	r1, [pc, #56]	; (8009594 <CBU_init+0x44>)
 800955a:	2000      	movs	r0, #0
 800955c:	f001 fc26 	bl	800adac <LOG_log>

  for (l_index = 0; l_index < CST_CIRCULAR_BUFFER_MAX_ELEMENTS; l_index++)
 8009560:	2300      	movs	r3, #0
 8009562:	60fb      	str	r3, [r7, #12]
 8009564:	e008      	b.n	8009578 <CBU_init+0x28>
  {
    p_buffer->elements[l_index] = 0.0f;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	68fa      	ldr	r2, [r7, #12]
 800956a:	f04f 0100 	mov.w	r1, #0
 800956e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (l_index = 0; l_index < CST_CIRCULAR_BUFFER_MAX_ELEMENTS; l_index++)
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	3301      	adds	r3, #1
 8009576:	60fb      	str	r3, [r7, #12]
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	2b09      	cmp	r3, #9
 800957c:	d9f3      	bls.n	8009566 <CBU_init+0x16>
  }

  p_buffer->count = 0;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2200      	movs	r2, #0
 8009582:	62da      	str	r2, [r3, #44]	; 0x2c
  p_buffer->index = 0;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2200      	movs	r2, #0
 8009588:	629a      	str	r2, [r3, #40]	; 0x28

  return;
 800958a:	bf00      	nop
}
 800958c:	3710      	adds	r7, #16
 800958e:	46bd      	mov	sp, r7
 8009590:	bd80      	pop	{r7, pc}
 8009592:	bf00      	nop
 8009594:	0800f22c 	.word	0x0800f22c

08009598 <CBU_push>:

void CBU_push(T_CBU_Context *p_buffer, float p_element)
{
 8009598:	b480      	push	{r7}
 800959a:	b083      	sub	sp, #12
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
 80095a0:	6039      	str	r1, [r7, #0]
  if (p_buffer->index == CST_CIRCULAR_BUFFER_MAX_ELEMENTS - 1)
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095a6:	2b09      	cmp	r3, #9
 80095a8:	d103      	bne.n	80095b2 <CBU_push+0x1a>
  {
    p_buffer->index = 0;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2200      	movs	r2, #0
 80095ae:	629a      	str	r2, [r3, #40]	; 0x28
 80095b0:	e004      	b.n	80095bc <CBU_push+0x24>
  }
  else
  {
    p_buffer->index++;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095b6:	1c5a      	adds	r2, r3, #1
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	629a      	str	r2, [r3, #40]	; 0x28
  }

  p_buffer->elements[p_buffer->index] = p_element;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	6839      	ldr	r1, [r7, #0]
 80095c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  if (p_buffer->count < CST_CIRCULAR_BUFFER_MAX_ELEMENTS)
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095cc:	2b09      	cmp	r3, #9
 80095ce:	d805      	bhi.n	80095dc <CBU_push+0x44>
  {
    p_buffer->count++;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095d4:	1c5a      	adds	r2, r3, #1
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	62da      	str	r2, [r3, #44]	; 0x2c
  else
  {
    ; /* Nothing to do */
  }

  return;
 80095da:	bf00      	nop
 80095dc:	bf00      	nop
}
 80095de:	370c      	adds	r7, #12
 80095e0:	46bd      	mov	sp, r7
 80095e2:	bc80      	pop	{r7}
 80095e4:	4770      	bx	lr

080095e6 <CBU_getAverage>:
{
  return p_buffer->count;
}

float CBU_getAverage(T_CBU_Context *p_buffer)
{
 80095e6:	b580      	push	{r7, lr}
 80095e8:	b086      	sub	sp, #24
 80095ea:	af00      	add	r7, sp, #0
 80095ec:	6078      	str	r0, [r7, #4]
  uint32_t l_index;
  uint32_t l_count;
  float    l_average;

  l_index   = p_buffer->index;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095f2:	617b      	str	r3, [r7, #20]
  l_count   = 0;
 80095f4:	2300      	movs	r3, #0
 80095f6:	613b      	str	r3, [r7, #16]
  l_average = 0.0f;
 80095f8:	f04f 0300 	mov.w	r3, #0
 80095fc:	60fb      	str	r3, [r7, #12]

  while (l_count < p_buffer->count)
 80095fe:	e015      	b.n	800962c <CBU_getAverage+0x46>
  {
    l_average += p_buffer->elements[l_index];
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	697a      	ldr	r2, [r7, #20]
 8009604:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009608:	4619      	mov	r1, r3
 800960a:	68f8      	ldr	r0, [r7, #12]
 800960c:	f7f7 faae 	bl	8000b6c <__addsf3>
 8009610:	4603      	mov	r3, r0
 8009612:	60fb      	str	r3, [r7, #12]

    if (l_index == CST_CIRCULAR_BUFFER_MAX_ELEMENTS - 1)
 8009614:	697b      	ldr	r3, [r7, #20]
 8009616:	2b09      	cmp	r3, #9
 8009618:	d102      	bne.n	8009620 <CBU_getAverage+0x3a>
    {
      l_index = 0;
 800961a:	2300      	movs	r3, #0
 800961c:	617b      	str	r3, [r7, #20]
 800961e:	e002      	b.n	8009626 <CBU_getAverage+0x40>
    }
    else
    {
      l_index++;
 8009620:	697b      	ldr	r3, [r7, #20]
 8009622:	3301      	adds	r3, #1
 8009624:	617b      	str	r3, [r7, #20]
    }

    l_count++;
 8009626:	693b      	ldr	r3, [r7, #16]
 8009628:	3301      	adds	r3, #1
 800962a:	613b      	str	r3, [r7, #16]
  while (l_count < p_buffer->count)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009630:	693a      	ldr	r2, [r7, #16]
 8009632:	429a      	cmp	r2, r3
 8009634:	d3e4      	bcc.n	8009600 <CBU_getAverage+0x1a>
  }

  l_average /= (float)p_buffer->count;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800963a:	4618      	mov	r0, r3
 800963c:	f7f7 fb46 	bl	8000ccc <__aeabi_ui2f>
 8009640:	4603      	mov	r3, r0
 8009642:	4619      	mov	r1, r3
 8009644:	68f8      	ldr	r0, [r7, #12]
 8009646:	f7f7 fc4d 	bl	8000ee4 <__aeabi_fdiv>
 800964a:	4603      	mov	r3, r0
 800964c:	60fb      	str	r3, [r7, #12]

  return l_average;
 800964e:	68fb      	ldr	r3, [r7, #12]
}
 8009650:	4618      	mov	r0, r3
 8009652:	3718      	adds	r7, #24
 8009654:	46bd      	mov	sp, r7
 8009656:	bd80      	pop	{r7, pc}

08009658 <CON_init>:
static T_SFO_data          g_CON_data;
static uint32_t            g_CON_dataSize;
static bool                g_CON_isDataComplete;

void CON_init(UART_HandleTypeDef *p_uartHandle)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b082      	sub	sp, #8
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
  LOG_info("Initializing console");
 8009660:	490d      	ldr	r1, [pc, #52]	; (8009698 <CON_init+0x40>)
 8009662:	2001      	movs	r0, #1
 8009664:	f001 fba2 	bl	800adac <LOG_log>

  g_CON_uartHandle     = p_uartHandle;
 8009668:	4a0c      	ldr	r2, [pc, #48]	; (800969c <CON_init+0x44>)
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6013      	str	r3, [r2, #0]
  g_CON_dataSize       = 0;
 800966e:	4b0c      	ldr	r3, [pc, #48]	; (80096a0 <CON_init+0x48>)
 8009670:	2200      	movs	r2, #0
 8009672:	601a      	str	r2, [r3, #0]
  g_CON_isDataComplete = false;
 8009674:	4b0b      	ldr	r3, [pc, #44]	; (80096a4 <CON_init+0x4c>)
 8009676:	2200      	movs	r2, #0
 8009678:	701a      	strb	r2, [r3, #0]

  SFO_initData(&g_CON_data);
 800967a:	480b      	ldr	r0, [pc, #44]	; (80096a8 <CON_init+0x50>)
 800967c:	f001 ff76 	bl	800b56c <SFO_initData>

  HAL_UART_Receive_IT(g_CON_uartHandle, &g_CON_datum, 1);
 8009680:	4b06      	ldr	r3, [pc, #24]	; (800969c <CON_init+0x44>)
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	2201      	movs	r2, #1
 8009686:	4909      	ldr	r1, [pc, #36]	; (80096ac <CON_init+0x54>)
 8009688:	4618      	mov	r0, r3
 800968a:	f7fe ffab 	bl	80085e4 <HAL_UART_Receive_IT>

  return;
 800968e:	bf00      	nop
}
 8009690:	3708      	adds	r7, #8
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}
 8009696:	bf00      	nop
 8009698:	0800f290 	.word	0x0800f290
 800969c:	2000023c 	.word	0x2000023c
 80096a0:	20000254 	.word	0x20000254
 80096a4:	20000258 	.word	0x20000258
 80096a8:	20000244 	.word	0x20000244
 80096ac:	20000240 	.word	0x20000240

080096b0 <CON_receiveData>:

void CON_receiveData(void)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	af00      	add	r7, sp, #0
  /* If previous command was not processed yet, drop datum, */
  /* which will lead to an error, showing a design issue... */
  if (g_CON_isDataComplete == true)
 80096b4:	4b0f      	ldr	r3, [pc, #60]	; (80096f4 <CON_receiveData+0x44>)
 80096b6:	781b      	ldrb	r3, [r3, #0]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d112      	bne.n	80096e2 <CON_receiveData+0x32>
  {
    ; /* Nothing to do */
  }
  else
  {
    if (g_CON_datum == '\r')
 80096bc:	4b0e      	ldr	r3, [pc, #56]	; (80096f8 <CON_receiveData+0x48>)
 80096be:	781b      	ldrb	r3, [r3, #0]
 80096c0:	2b0d      	cmp	r3, #13
 80096c2:	d103      	bne.n	80096cc <CON_receiveData+0x1c>
    {
      g_CON_isDataComplete = true;
 80096c4:	4b0b      	ldr	r3, [pc, #44]	; (80096f4 <CON_receiveData+0x44>)
 80096c6:	2201      	movs	r2, #1
 80096c8:	701a      	strb	r2, [r3, #0]
 80096ca:	e00a      	b.n	80096e2 <CON_receiveData+0x32>
    }
    else
    {
      g_CON_data[g_CON_dataSize] = g_CON_datum;
 80096cc:	4b0b      	ldr	r3, [pc, #44]	; (80096fc <CON_receiveData+0x4c>)
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	4a09      	ldr	r2, [pc, #36]	; (80096f8 <CON_receiveData+0x48>)
 80096d2:	7811      	ldrb	r1, [r2, #0]
 80096d4:	4a0a      	ldr	r2, [pc, #40]	; (8009700 <CON_receiveData+0x50>)
 80096d6:	54d1      	strb	r1, [r2, r3]
      g_CON_dataSize++;
 80096d8:	4b08      	ldr	r3, [pc, #32]	; (80096fc <CON_receiveData+0x4c>)
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	3301      	adds	r3, #1
 80096de:	4a07      	ldr	r2, [pc, #28]	; (80096fc <CON_receiveData+0x4c>)
 80096e0:	6013      	str	r3, [r2, #0]
    }
  }

  HAL_UART_Receive_IT(g_CON_uartHandle, &g_CON_datum, 1);
 80096e2:	4b08      	ldr	r3, [pc, #32]	; (8009704 <CON_receiveData+0x54>)
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	2201      	movs	r2, #1
 80096e8:	4903      	ldr	r1, [pc, #12]	; (80096f8 <CON_receiveData+0x48>)
 80096ea:	4618      	mov	r0, r3
 80096ec:	f7fe ff7a 	bl	80085e4 <HAL_UART_Receive_IT>

  return;
 80096f0:	bf00      	nop
}
 80096f2:	bd80      	pop	{r7, pc}
 80096f4:	20000258 	.word	0x20000258
 80096f8:	20000240 	.word	0x20000240
 80096fc:	20000254 	.word	0x20000254
 8009700:	20000244 	.word	0x20000244
 8009704:	2000023c 	.word	0x2000023c

08009708 <CON_updateFifo>:

void CON_updateFifo(T_SFO_Context *p_fifo)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b082      	sub	sp, #8
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
  if (g_CON_isDataComplete == false)
 8009710:	4b0c      	ldr	r3, [pc, #48]	; (8009744 <CON_updateFifo+0x3c>)
 8009712:	781b      	ldrb	r3, [r3, #0]
 8009714:	f083 0301 	eor.w	r3, r3, #1
 8009718:	b2db      	uxtb	r3, r3
 800971a:	2b00      	cmp	r3, #0
 800971c:	d10d      	bne.n	800973a <CON_updateFifo+0x32>
  {
    ; /* Nothing to do */
  }
  else
  {
    SFO_push    (p_fifo, &g_CON_data);
 800971e:	490a      	ldr	r1, [pc, #40]	; (8009748 <CON_updateFifo+0x40>)
 8009720:	6878      	ldr	r0, [r7, #4]
 8009722:	f001 ff49 	bl	800b5b8 <SFO_push>
    SFO_initData(&g_CON_data);
 8009726:	4808      	ldr	r0, [pc, #32]	; (8009748 <CON_updateFifo+0x40>)
 8009728:	f001 ff20 	bl	800b56c <SFO_initData>

    g_CON_dataSize       = 0;
 800972c:	4b07      	ldr	r3, [pc, #28]	; (800974c <CON_updateFifo+0x44>)
 800972e:	2200      	movs	r2, #0
 8009730:	601a      	str	r2, [r3, #0]
    g_CON_isDataComplete = false;
 8009732:	4b04      	ldr	r3, [pc, #16]	; (8009744 <CON_updateFifo+0x3c>)
 8009734:	2200      	movs	r2, #0
 8009736:	701a      	strb	r2, [r3, #0]
  }

  return;
 8009738:	bf00      	nop
 800973a:	bf00      	nop
}
 800973c:	3708      	adds	r7, #8
 800973e:	46bd      	mov	sp, r7
 8009740:	bd80      	pop	{r7, pc}
 8009742:	bf00      	nop
 8009744:	20000258 	.word	0x20000258
 8009748:	20000244 	.word	0x20000244
 800974c:	20000254 	.word	0x20000254

08009750 <CON_sendString>:

void CON_sendString(char *p_string, uint32_t p_length)
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b082      	sub	sp, #8
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
 8009758:	6039      	str	r1, [r7, #0]
  /* As this method is using for logging/debug, we will not deal with failure cases */
  (void)HAL_UART_Transmit(g_CON_uartHandle,
 800975a:	4b06      	ldr	r3, [pc, #24]	; (8009774 <CON_sendString+0x24>)
 800975c:	6818      	ldr	r0, [r3, #0]
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	b29a      	uxth	r2, r3
 8009762:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009766:	6879      	ldr	r1, [r7, #4]
 8009768:	f7fe feaa 	bl	80084c0 <HAL_UART_Transmit>
               (uint8_t *)p_string,
                          p_length,
                          CST_UART_TRANSMIT_TIMEOUT_IN_MS);

  return;
 800976c:	bf00      	nop
}
 800976e:	3708      	adds	r7, #8
 8009770:	46bd      	mov	sp, r7
 8009772:	bd80      	pop	{r7, pc}
 8009774:	2000023c 	.word	0x2000023c

08009778 <DRV_init>:
void DRV_init(TIM_HandleTypeDef *p_pwmTimerHandle,
              TIM_HandleTypeDef *p_rearLeftEncoderTimerHandle,
              TIM_HandleTypeDef *p_rearRightEncoderTimerHandle,
              TIM_HandleTypeDef *p_frontRightEncoderTimerHandle,
              TIM_HandleTypeDef *p_frontLeftEncoderTimerHandle)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b088      	sub	sp, #32
 800977c:	af04      	add	r7, sp, #16
 800977e:	60f8      	str	r0, [r7, #12]
 8009780:	60b9      	str	r1, [r7, #8]
 8009782:	607a      	str	r2, [r7, #4]
 8009784:	603b      	str	r3, [r7, #0]
  LOG_info("Initializing Drive module");
 8009786:	495d      	ldr	r1, [pc, #372]	; (80098fc <DRV_init+0x184>)
 8009788:	2001      	movs	r0, #1
 800978a:	f001 fb0f 	bl	800adac <LOG_log>

  /* Setup PIDs with a target speed to 0 */
  PID_init(&g_DRV_pidFrontRight, STD_DRIVE_PID_P_FACTOR, STD_DRIVE_PID_I_FACTOR, STD_DRIVE_PID_D_FACTOR, 0, STP_DRIVE_MIN_SPEED, STP_DRIVE_MAX_SPEED, STD_DRIVE_PID_ANTI_WIND_UP_FACTOR);
 800978e:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 8009792:	9303      	str	r3, [sp, #12]
 8009794:	4b5a      	ldr	r3, [pc, #360]	; (8009900 <DRV_init+0x188>)
 8009796:	9302      	str	r3, [sp, #8]
 8009798:	f04f 0300 	mov.w	r3, #0
 800979c:	9301      	str	r3, [sp, #4]
 800979e:	f04f 0300 	mov.w	r3, #0
 80097a2:	9300      	str	r3, [sp, #0]
 80097a4:	f04f 0300 	mov.w	r3, #0
 80097a8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80097ac:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80097b0:	4854      	ldr	r0, [pc, #336]	; (8009904 <DRV_init+0x18c>)
 80097b2:	f001 fd0f 	bl	800b1d4 <PID_init>
  PID_init(&g_DRV_pidFrontLeft , STD_DRIVE_PID_P_FACTOR, STD_DRIVE_PID_I_FACTOR, STD_DRIVE_PID_D_FACTOR, 0, STP_DRIVE_MIN_SPEED, STP_DRIVE_MAX_SPEED, STD_DRIVE_PID_ANTI_WIND_UP_FACTOR);
 80097b6:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 80097ba:	9303      	str	r3, [sp, #12]
 80097bc:	4b50      	ldr	r3, [pc, #320]	; (8009900 <DRV_init+0x188>)
 80097be:	9302      	str	r3, [sp, #8]
 80097c0:	f04f 0300 	mov.w	r3, #0
 80097c4:	9301      	str	r3, [sp, #4]
 80097c6:	f04f 0300 	mov.w	r3, #0
 80097ca:	9300      	str	r3, [sp, #0]
 80097cc:	f04f 0300 	mov.w	r3, #0
 80097d0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80097d4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80097d8:	484b      	ldr	r0, [pc, #300]	; (8009908 <DRV_init+0x190>)
 80097da:	f001 fcfb 	bl	800b1d4 <PID_init>
  PID_init(&g_DRV_pidRearLeft  , STD_DRIVE_PID_P_FACTOR, STD_DRIVE_PID_I_FACTOR, STD_DRIVE_PID_D_FACTOR, 0, STP_DRIVE_MIN_SPEED, STP_DRIVE_MAX_SPEED, STD_DRIVE_PID_ANTI_WIND_UP_FACTOR);
 80097de:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 80097e2:	9303      	str	r3, [sp, #12]
 80097e4:	4b46      	ldr	r3, [pc, #280]	; (8009900 <DRV_init+0x188>)
 80097e6:	9302      	str	r3, [sp, #8]
 80097e8:	f04f 0300 	mov.w	r3, #0
 80097ec:	9301      	str	r3, [sp, #4]
 80097ee:	f04f 0300 	mov.w	r3, #0
 80097f2:	9300      	str	r3, [sp, #0]
 80097f4:	f04f 0300 	mov.w	r3, #0
 80097f8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80097fc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8009800:	4842      	ldr	r0, [pc, #264]	; (800990c <DRV_init+0x194>)
 8009802:	f001 fce7 	bl	800b1d4 <PID_init>
  PID_init(&g_DRV_pidRearRight , STD_DRIVE_PID_P_FACTOR, STD_DRIVE_PID_I_FACTOR, STD_DRIVE_PID_D_FACTOR, 0, STP_DRIVE_MIN_SPEED, STP_DRIVE_MAX_SPEED, STD_DRIVE_PID_ANTI_WIND_UP_FACTOR);
 8009806:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 800980a:	9303      	str	r3, [sp, #12]
 800980c:	4b3c      	ldr	r3, [pc, #240]	; (8009900 <DRV_init+0x188>)
 800980e:	9302      	str	r3, [sp, #8]
 8009810:	f04f 0300 	mov.w	r3, #0
 8009814:	9301      	str	r3, [sp, #4]
 8009816:	f04f 0300 	mov.w	r3, #0
 800981a:	9300      	str	r3, [sp, #0]
 800981c:	f04f 0300 	mov.w	r3, #0
 8009820:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8009824:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8009828:	4839      	ldr	r0, [pc, #228]	; (8009910 <DRV_init+0x198>)
 800982a:	f001 fcd3 	bl	800b1d4 <PID_init>

  /* Setup motors (with a 0 speed & stopped direction, at this point) */
  MTR_init(&g_DRV_motorFrontRight,
 800982e:	230c      	movs	r3, #12
 8009830:	9303      	str	r3, [sp, #12]
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	9302      	str	r3, [sp, #8]
 8009836:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800983a:	9301      	str	r3, [sp, #4]
 800983c:	4b35      	ldr	r3, [pc, #212]	; (8009914 <DRV_init+0x19c>)
 800983e:	9300      	str	r3, [sp, #0]
 8009840:	2304      	movs	r3, #4
 8009842:	4a35      	ldr	r2, [pc, #212]	; (8009918 <DRV_init+0x1a0>)
 8009844:	4935      	ldr	r1, [pc, #212]	; (800991c <DRV_init+0x1a4>)
 8009846:	4836      	ldr	r0, [pc, #216]	; (8009920 <DRV_init+0x1a8>)
 8009848:	f001 fbd2 	bl	800aff0 <MTR_init>
           MOTOR_FRONT_RIGHT_OUT_2_GPIO_Port,
           MOTOR_FRONT_RIGHT_OUT_2_Pin,
           p_pwmTimerHandle,
           TIM_CHANNEL_4);

  MTR_init(&g_DRV_motorFrontLeft,
 800984c:	2308      	movs	r3, #8
 800984e:	9303      	str	r3, [sp, #12]
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	9302      	str	r3, [sp, #8]
 8009854:	2310      	movs	r3, #16
 8009856:	9301      	str	r3, [sp, #4]
 8009858:	4b32      	ldr	r3, [pc, #200]	; (8009924 <DRV_init+0x1ac>)
 800985a:	9300      	str	r3, [sp, #0]
 800985c:	2320      	movs	r3, #32
 800985e:	4a31      	ldr	r2, [pc, #196]	; (8009924 <DRV_init+0x1ac>)
 8009860:	4931      	ldr	r1, [pc, #196]	; (8009928 <DRV_init+0x1b0>)
 8009862:	4832      	ldr	r0, [pc, #200]	; (800992c <DRV_init+0x1b4>)
 8009864:	f001 fbc4 	bl	800aff0 <MTR_init>
           MOTOR_FRONT_LEFT_OUT_2_GPIO_Port,
           MOTOR_FRONT_LEFT_OUT_2_Pin,
           p_pwmTimerHandle,
           TIM_CHANNEL_3);

  MTR_init(&g_DRV_motorRearLeft,
 8009868:	2304      	movs	r3, #4
 800986a:	9303      	str	r3, [sp, #12]
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	9302      	str	r3, [sp, #8]
 8009870:	2320      	movs	r3, #32
 8009872:	9301      	str	r3, [sp, #4]
 8009874:	4b27      	ldr	r3, [pc, #156]	; (8009914 <DRV_init+0x19c>)
 8009876:	9300      	str	r3, [sp, #0]
 8009878:	2310      	movs	r3, #16
 800987a:	4a26      	ldr	r2, [pc, #152]	; (8009914 <DRV_init+0x19c>)
 800987c:	492c      	ldr	r1, [pc, #176]	; (8009930 <DRV_init+0x1b8>)
 800987e:	482d      	ldr	r0, [pc, #180]	; (8009934 <DRV_init+0x1bc>)
 8009880:	f001 fbb6 	bl	800aff0 <MTR_init>
           MOTOR_REAR_LEFT_OUT_2_GPIO_Port,
           MOTOR_REAR_LEFT_OUT_2_Pin,
           p_pwmTimerHandle,
           TIM_CHANNEL_2);

  MTR_init(&g_DRV_motorRearRight,
 8009884:	2300      	movs	r3, #0
 8009886:	9303      	str	r3, [sp, #12]
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	9302      	str	r3, [sp, #8]
 800988c:	2302      	movs	r3, #2
 800988e:	9301      	str	r3, [sp, #4]
 8009890:	4b24      	ldr	r3, [pc, #144]	; (8009924 <DRV_init+0x1ac>)
 8009892:	9300      	str	r3, [sp, #0]
 8009894:	2301      	movs	r3, #1
 8009896:	4a23      	ldr	r2, [pc, #140]	; (8009924 <DRV_init+0x1ac>)
 8009898:	4927      	ldr	r1, [pc, #156]	; (8009938 <DRV_init+0x1c0>)
 800989a:	4828      	ldr	r0, [pc, #160]	; (800993c <DRV_init+0x1c4>)
 800989c:	f001 fba8 	bl	800aff0 <MTR_init>
           MOTOR_REAR_RIGHT_OUT_2_Pin,
           p_pwmTimerHandle,
           TIM_CHANNEL_1);

  /* Setup encoders */
  ENC_init(&g_DRV_encoderFrontRight, DRV_FRONT_RIGHT_MOTOR_NAME, true , p_frontRightEncoderTimerHandle);
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	2201      	movs	r2, #1
 80098a4:	491d      	ldr	r1, [pc, #116]	; (800991c <DRV_init+0x1a4>)
 80098a6:	4826      	ldr	r0, [pc, #152]	; (8009940 <DRV_init+0x1c8>)
 80098a8:	f001 f902 	bl	800aab0 <ENC_init>
  ENC_init(&g_DRV_encoderFrontLeft , DRV_FRONT_LEFT_MOTOR_NAME , false, p_frontLeftEncoderTimerHandle );
 80098ac:	69bb      	ldr	r3, [r7, #24]
 80098ae:	2200      	movs	r2, #0
 80098b0:	491d      	ldr	r1, [pc, #116]	; (8009928 <DRV_init+0x1b0>)
 80098b2:	4824      	ldr	r0, [pc, #144]	; (8009944 <DRV_init+0x1cc>)
 80098b4:	f001 f8fc 	bl	800aab0 <ENC_init>
  ENC_init(&g_DRV_encoderRearLeft  , DRV_REAR_LEFT_MOTOR_NAME  , false, p_rearLeftEncoderTimerHandle  );
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	2200      	movs	r2, #0
 80098bc:	491c      	ldr	r1, [pc, #112]	; (8009930 <DRV_init+0x1b8>)
 80098be:	4822      	ldr	r0, [pc, #136]	; (8009948 <DRV_init+0x1d0>)
 80098c0:	f001 f8f6 	bl	800aab0 <ENC_init>
  ENC_init(&g_DRV_encoderRearRight , DRV_REAR_RIGHT_MOTOR_NAME , true , p_rearRightEncoderTimerHandle );
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2201      	movs	r2, #1
 80098c8:	491b      	ldr	r1, [pc, #108]	; (8009938 <DRV_init+0x1c0>)
 80098ca:	4820      	ldr	r0, [pc, #128]	; (800994c <DRV_init+0x1d4>)
 80098cc:	f001 f8f0 	bl	800aab0 <ENC_init>

  /* Setup speed buffers */
  CBU_init(&g_DRV_speedBufferFrontRight);
 80098d0:	481f      	ldr	r0, [pc, #124]	; (8009950 <DRV_init+0x1d8>)
 80098d2:	f7ff fe3d 	bl	8009550 <CBU_init>
  CBU_init(&g_DRV_speedBufferFrontLeft );
 80098d6:	481f      	ldr	r0, [pc, #124]	; (8009954 <DRV_init+0x1dc>)
 80098d8:	f7ff fe3a 	bl	8009550 <CBU_init>
  CBU_init(&g_DRV_speedBufferRearLeft  );
 80098dc:	481e      	ldr	r0, [pc, #120]	; (8009958 <DRV_init+0x1e0>)
 80098de:	f7ff fe37 	bl	8009550 <CBU_init>
  CBU_init(&g_DRV_speedBufferRearRight );
 80098e2:	481e      	ldr	r0, [pc, #120]	; (800995c <DRV_init+0x1e4>)
 80098e4:	f7ff fe34 	bl	8009550 <CBU_init>

  /* Activate motors by default (de-activating them is used for debug)  */
  g_DRV_areMotorsOn = true;
 80098e8:	4b1d      	ldr	r3, [pc, #116]	; (8009960 <DRV_init+0x1e8>)
 80098ea:	2201      	movs	r2, #1
 80098ec:	701a      	strb	r2, [r3, #0]

  /* Start with master board control mode */
  g_DRV_mode = DRV_MODE_MASTER_BOARD_CONTROL;
 80098ee:	4b1d      	ldr	r3, [pc, #116]	; (8009964 <DRV_init+0x1ec>)
 80098f0:	2202      	movs	r2, #2
 80098f2:	701a      	strb	r2, [r3, #0]

  return;
 80098f4:	bf00      	nop
}
 80098f6:	3710      	adds	r7, #16
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}
 80098fc:	0800f2a8 	.word	0x0800f2a8
 8009900:	42200000 	.word	0x42200000
 8009904:	2000025c 	.word	0x2000025c
 8009908:	2000028c 	.word	0x2000028c
 800990c:	200002bc 	.word	0x200002bc
 8009910:	200002ec 	.word	0x200002ec
 8009914:	40011000 	.word	0x40011000
 8009918:	40011400 	.word	0x40011400
 800991c:	0800f2c4 	.word	0x0800f2c4
 8009920:	2000031c 	.word	0x2000031c
 8009924:	40010c00 	.word	0x40010c00
 8009928:	0800f2d0 	.word	0x0800f2d0
 800992c:	20000340 	.word	0x20000340
 8009930:	0800f2dc 	.word	0x0800f2dc
 8009934:	20000364 	.word	0x20000364
 8009938:	0800f2e8 	.word	0x0800f2e8
 800993c:	20000388 	.word	0x20000388
 8009940:	200003ac 	.word	0x200003ac
 8009944:	200003b8 	.word	0x200003b8
 8009948:	200003c4 	.word	0x200003c4
 800994c:	200003d0 	.word	0x200003d0
 8009950:	200003dc 	.word	0x200003dc
 8009954:	2000040c 	.word	0x2000040c
 8009958:	2000043c 	.word	0x2000043c
 800995c:	2000046c 	.word	0x2000046c
 8009960:	20000259 	.word	0x20000259
 8009964:	2000025a 	.word	0x2000025a

08009968 <DRV_updateEncoder>:

void DRV_updateEncoder(TIM_HandleTypeDef *p_encoderTimerHandle)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b084      	sub	sp, #16
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
  int16_t l_count;

  l_count = __HAL_TIM_GET_COUNTER(p_encoderTimerHandle);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009976:	81fb      	strh	r3, [r7, #14]

  /* Check the handle of the triggering timer and update encoder accordingly */
  if (p_encoderTimerHandle == g_DRV_encoderRearLeft.timerHandle)
 8009978:	4b19      	ldr	r3, [pc, #100]	; (80099e0 <DRV_updateEncoder+0x78>)
 800997a:	689b      	ldr	r3, [r3, #8]
 800997c:	687a      	ldr	r2, [r7, #4]
 800997e:	429a      	cmp	r2, r3
 8009980:	d106      	bne.n	8009990 <DRV_updateEncoder+0x28>
  {
    ENC_update(&g_DRV_encoderRearLeft, l_count);
 8009982:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009986:	4619      	mov	r1, r3
 8009988:	4815      	ldr	r0, [pc, #84]	; (80099e0 <DRV_updateEncoder+0x78>)
 800998a:	f001 f8c2 	bl	800ab12 <ENC_update>
  else
  {
    ; /* Nothing to do */
  }

  return;
 800998e:	e023      	b.n	80099d8 <DRV_updateEncoder+0x70>
  else if (p_encoderTimerHandle == g_DRV_encoderRearRight.timerHandle)
 8009990:	4b14      	ldr	r3, [pc, #80]	; (80099e4 <DRV_updateEncoder+0x7c>)
 8009992:	689b      	ldr	r3, [r3, #8]
 8009994:	687a      	ldr	r2, [r7, #4]
 8009996:	429a      	cmp	r2, r3
 8009998:	d106      	bne.n	80099a8 <DRV_updateEncoder+0x40>
    ENC_update(&g_DRV_encoderRearRight, l_count);
 800999a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800999e:	4619      	mov	r1, r3
 80099a0:	4810      	ldr	r0, [pc, #64]	; (80099e4 <DRV_updateEncoder+0x7c>)
 80099a2:	f001 f8b6 	bl	800ab12 <ENC_update>
  return;
 80099a6:	e017      	b.n	80099d8 <DRV_updateEncoder+0x70>
  else if (p_encoderTimerHandle == g_DRV_encoderFrontRight.timerHandle)
 80099a8:	4b0f      	ldr	r3, [pc, #60]	; (80099e8 <DRV_updateEncoder+0x80>)
 80099aa:	689b      	ldr	r3, [r3, #8]
 80099ac:	687a      	ldr	r2, [r7, #4]
 80099ae:	429a      	cmp	r2, r3
 80099b0:	d106      	bne.n	80099c0 <DRV_updateEncoder+0x58>
    ENC_update(&g_DRV_encoderFrontRight, l_count);
 80099b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80099b6:	4619      	mov	r1, r3
 80099b8:	480b      	ldr	r0, [pc, #44]	; (80099e8 <DRV_updateEncoder+0x80>)
 80099ba:	f001 f8aa 	bl	800ab12 <ENC_update>
  return;
 80099be:	e00b      	b.n	80099d8 <DRV_updateEncoder+0x70>
  else if (p_encoderTimerHandle == g_DRV_encoderFrontLeft.timerHandle)
 80099c0:	4b0a      	ldr	r3, [pc, #40]	; (80099ec <DRV_updateEncoder+0x84>)
 80099c2:	689b      	ldr	r3, [r3, #8]
 80099c4:	687a      	ldr	r2, [r7, #4]
 80099c6:	429a      	cmp	r2, r3
 80099c8:	d106      	bne.n	80099d8 <DRV_updateEncoder+0x70>
    ENC_update(&g_DRV_encoderFrontLeft, l_count);
 80099ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80099ce:	4619      	mov	r1, r3
 80099d0:	4806      	ldr	r0, [pc, #24]	; (80099ec <DRV_updateEncoder+0x84>)
 80099d2:	f001 f89e 	bl	800ab12 <ENC_update>
  return;
 80099d6:	bf00      	nop
 80099d8:	bf00      	nop
}
 80099da:	3710      	adds	r7, #16
 80099dc:	46bd      	mov	sp, r7
 80099de:	bd80      	pop	{r7, pc}
 80099e0:	200003c4 	.word	0x200003c4
 80099e4:	200003d0 	.word	0x200003d0
 80099e8:	200003ac 	.word	0x200003ac
 80099ec:	200003b8 	.word	0x200003b8

080099f0 <DRV_updateFromBluetooth>:

void DRV_updateFromBluetooth(T_BLU_Data *p_bluetoothData)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b084      	sub	sp, #16
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
  uint32_t l_speed;

  /* Check possible requested mode change */
  switch (p_bluetoothData->button)
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	7c1b      	ldrb	r3, [r3, #16]
 80099fc:	3b01      	subs	r3, #1
 80099fe:	2b0f      	cmp	r3, #15
 8009a00:	d861      	bhi.n	8009ac6 <DRV_updateFromBluetooth+0xd6>
 8009a02:	a201      	add	r2, pc, #4	; (adr r2, 8009a08 <DRV_updateFromBluetooth+0x18>)
 8009a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a08:	08009a91 	.word	0x08009a91
 8009a0c:	08009ac7 	.word	0x08009ac7
 8009a10:	08009ac7 	.word	0x08009ac7
 8009a14:	08009aa9 	.word	0x08009aa9
 8009a18:	08009ac7 	.word	0x08009ac7
 8009a1c:	08009ac7 	.word	0x08009ac7
 8009a20:	08009ac7 	.word	0x08009ac7
 8009a24:	08009ac7 	.word	0x08009ac7
 8009a28:	08009ac7 	.word	0x08009ac7
 8009a2c:	08009ac7 	.word	0x08009ac7
 8009a30:	08009ac7 	.word	0x08009ac7
 8009a34:	08009ac7 	.word	0x08009ac7
 8009a38:	08009ac7 	.word	0x08009ac7
 8009a3c:	08009a79 	.word	0x08009a79
 8009a40:	08009a61 	.word	0x08009a61
 8009a44:	08009a49 	.word	0x08009a49
  {
    case BLU_BUTTON_PINK_SQUARE:
      if (g_DRV_mode != DRV_MODE_MANUAL_FIXED_SPEED)
 8009a48:	4b82      	ldr	r3, [pc, #520]	; (8009c54 <DRV_updateFromBluetooth+0x264>)
 8009a4a:	781b      	ldrb	r3, [r3, #0]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d03c      	beq.n	8009aca <DRV_updateFromBluetooth+0xda>
      {
        LOG_info("Drive mode now DRV_MODE_MANUAL_FIXED_SPEED");
 8009a50:	4981      	ldr	r1, [pc, #516]	; (8009c58 <DRV_updateFromBluetooth+0x268>)
 8009a52:	2001      	movs	r0, #1
 8009a54:	f001 f9aa 	bl	800adac <LOG_log>
        g_DRV_mode = DRV_MODE_MANUAL_FIXED_SPEED;
 8009a58:	4b7e      	ldr	r3, [pc, #504]	; (8009c54 <DRV_updateFromBluetooth+0x264>)
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	701a      	strb	r2, [r3, #0]
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 8009a5e:	e034      	b.n	8009aca <DRV_updateFromBluetooth+0xda>

    case BLU_BUTTON_BLUE_CROSS:
      if (g_DRV_mode != DRV_MODE_MANUAL_VARIABLE_SPEED)
 8009a60:	4b7c      	ldr	r3, [pc, #496]	; (8009c54 <DRV_updateFromBluetooth+0x264>)
 8009a62:	781b      	ldrb	r3, [r3, #0]
 8009a64:	2b01      	cmp	r3, #1
 8009a66:	d032      	beq.n	8009ace <DRV_updateFromBluetooth+0xde>
      {
        LOG_info("Drive mode now DRV_MODE_MANUAL_VARIABLE_SPEED");
 8009a68:	497c      	ldr	r1, [pc, #496]	; (8009c5c <DRV_updateFromBluetooth+0x26c>)
 8009a6a:	2001      	movs	r0, #1
 8009a6c:	f001 f99e 	bl	800adac <LOG_log>
        g_DRV_mode = DRV_MODE_MANUAL_VARIABLE_SPEED;
 8009a70:	4b78      	ldr	r3, [pc, #480]	; (8009c54 <DRV_updateFromBluetooth+0x264>)
 8009a72:	2201      	movs	r2, #1
 8009a74:	701a      	strb	r2, [r3, #0]
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 8009a76:	e02a      	b.n	8009ace <DRV_updateFromBluetooth+0xde>

    case BLU_BUTTON_RED_CIRCLE:
      if (g_DRV_mode != DRV_MODE_MASTER_BOARD_CONTROL)
 8009a78:	4b76      	ldr	r3, [pc, #472]	; (8009c54 <DRV_updateFromBluetooth+0x264>)
 8009a7a:	781b      	ldrb	r3, [r3, #0]
 8009a7c:	2b02      	cmp	r3, #2
 8009a7e:	d028      	beq.n	8009ad2 <DRV_updateFromBluetooth+0xe2>
      {
        LOG_info("Drive mode now DRV_MODE_MASTER_BOARD_CONTROL");
 8009a80:	4977      	ldr	r1, [pc, #476]	; (8009c60 <DRV_updateFromBluetooth+0x270>)
 8009a82:	2001      	movs	r0, #1
 8009a84:	f001 f992 	bl	800adac <LOG_log>
        g_DRV_mode = DRV_MODE_MASTER_BOARD_CONTROL;
 8009a88:	4b72      	ldr	r3, [pc, #456]	; (8009c54 <DRV_updateFromBluetooth+0x264>)
 8009a8a:	2202      	movs	r2, #2
 8009a8c:	701a      	strb	r2, [r3, #0]
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 8009a8e:	e020      	b.n	8009ad2 <DRV_updateFromBluetooth+0xe2>

    case BLU_BUTTON_SELECT:
      if (g_DRV_areMotorsOn == true)
 8009a90:	4b74      	ldr	r3, [pc, #464]	; (8009c64 <DRV_updateFromBluetooth+0x274>)
 8009a92:	781b      	ldrb	r3, [r3, #0]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d01e      	beq.n	8009ad6 <DRV_updateFromBluetooth+0xe6>
      {
        LOG_info("Drive turning motor OFF");
 8009a98:	4973      	ldr	r1, [pc, #460]	; (8009c68 <DRV_updateFromBluetooth+0x278>)
 8009a9a:	2001      	movs	r0, #1
 8009a9c:	f001 f986 	bl	800adac <LOG_log>
        g_DRV_areMotorsOn = false;
 8009aa0:	4b70      	ldr	r3, [pc, #448]	; (8009c64 <DRV_updateFromBluetooth+0x274>)
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	701a      	strb	r2, [r3, #0]
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 8009aa6:	e016      	b.n	8009ad6 <DRV_updateFromBluetooth+0xe6>

    case BLU_BUTTON_START:
      if (g_DRV_areMotorsOn == false)
 8009aa8:	4b6e      	ldr	r3, [pc, #440]	; (8009c64 <DRV_updateFromBluetooth+0x274>)
 8009aaa:	781b      	ldrb	r3, [r3, #0]
 8009aac:	f083 0301 	eor.w	r3, r3, #1
 8009ab0:	b2db      	uxtb	r3, r3
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d011      	beq.n	8009ada <DRV_updateFromBluetooth+0xea>
      {
        LOG_info("Drive turning motors ON");
 8009ab6:	496d      	ldr	r1, [pc, #436]	; (8009c6c <DRV_updateFromBluetooth+0x27c>)
 8009ab8:	2001      	movs	r0, #1
 8009aba:	f001 f977 	bl	800adac <LOG_log>
        g_DRV_areMotorsOn = true;
 8009abe:	4b69      	ldr	r3, [pc, #420]	; (8009c64 <DRV_updateFromBluetooth+0x274>)
 8009ac0:	2201      	movs	r2, #1
 8009ac2:	701a      	strb	r2, [r3, #0]
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 8009ac4:	e009      	b.n	8009ada <DRV_updateFromBluetooth+0xea>

    case BLU_BUTTON_NONE:
    default:
      ; /* Nothing to do */
      break;
 8009ac6:	bf00      	nop
 8009ac8:	e008      	b.n	8009adc <DRV_updateFromBluetooth+0xec>
      break;
 8009aca:	bf00      	nop
 8009acc:	e006      	b.n	8009adc <DRV_updateFromBluetooth+0xec>
      break;
 8009ace:	bf00      	nop
 8009ad0:	e004      	b.n	8009adc <DRV_updateFromBluetooth+0xec>
      break;
 8009ad2:	bf00      	nop
 8009ad4:	e002      	b.n	8009adc <DRV_updateFromBluetooth+0xec>
      break;
 8009ad6:	bf00      	nop
 8009ad8:	e000      	b.n	8009adc <DRV_updateFromBluetooth+0xec>
      break;
 8009ada:	bf00      	nop
  }

  /* Master board control mode is an automated mode, so that we will */
  /* ignore any direction/button press received via bluetooth.       */
  if (g_DRV_mode == DRV_MODE_MASTER_BOARD_CONTROL)
 8009adc:	4b5d      	ldr	r3, [pc, #372]	; (8009c54 <DRV_updateFromBluetooth+0x264>)
 8009ade:	781b      	ldrb	r3, [r3, #0]
 8009ae0:	2b02      	cmp	r3, #2
 8009ae2:	f000 80b3 	beq.w	8009c4c <DRV_updateFromBluetooth+0x25c>
    ; /* Nothing to do */
  }
  /* Manual mode, applying directions received by bluetooth */
  else
  {
    if (p_bluetoothData->leftY > DRV_JOYSTICKS_THRESHOLD)
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	685b      	ldr	r3, [r3, #4]
 8009aea:	2b0a      	cmp	r3, #10
 8009aec:	dd0c      	ble.n	8009b08 <DRV_updateFromBluetooth+0x118>
    {
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? DRV_JOYSTICKS_FIXED_SPEED : p_bluetoothData->leftY;
 8009aee:	4b59      	ldr	r3, [pc, #356]	; (8009c54 <DRV_updateFromBluetooth+0x264>)
 8009af0:	781b      	ldrb	r3, [r3, #0]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d002      	beq.n	8009afc <DRV_updateFromBluetooth+0x10c>
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	685b      	ldr	r3, [r3, #4]
 8009afa:	e000      	b.n	8009afe <DRV_updateFromBluetooth+0x10e>
 8009afc:	2314      	movs	r3, #20
 8009afe:	60fb      	str	r3, [r7, #12]

      DRV_moveForward(l_speed);
 8009b00:	68f8      	ldr	r0, [r7, #12]
 8009b02:	f000 fdb9 	bl	800a678 <DRV_moveForward>
      /* Most of the time, we will get here */
      DRV_stop();
    }
  }

  return;
 8009b06:	e0a1      	b.n	8009c4c <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->rightY > DRV_JOYSTICKS_THRESHOLD)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	68db      	ldr	r3, [r3, #12]
 8009b0c:	2b0a      	cmp	r3, #10
 8009b0e:	dd0c      	ble.n	8009b2a <DRV_updateFromBluetooth+0x13a>
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? DRV_JOYSTICKS_FIXED_SPEED : p_bluetoothData->rightY;
 8009b10:	4b50      	ldr	r3, [pc, #320]	; (8009c54 <DRV_updateFromBluetooth+0x264>)
 8009b12:	781b      	ldrb	r3, [r3, #0]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d002      	beq.n	8009b1e <DRV_updateFromBluetooth+0x12e>
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	68db      	ldr	r3, [r3, #12]
 8009b1c:	e000      	b.n	8009b20 <DRV_updateFromBluetooth+0x130>
 8009b1e:	2314      	movs	r3, #20
 8009b20:	60fb      	str	r3, [r7, #12]
      DRV_moveForward(l_speed);
 8009b22:	68f8      	ldr	r0, [r7, #12]
 8009b24:	f000 fda8 	bl	800a678 <DRV_moveForward>
  return;
 8009b28:	e090      	b.n	8009c4c <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->leftY < -DRV_JOYSTICKS_THRESHOLD)
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	685b      	ldr	r3, [r3, #4]
 8009b2e:	f113 0f0a 	cmn.w	r3, #10
 8009b32:	da0d      	bge.n	8009b50 <DRV_updateFromBluetooth+0x160>
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? DRV_JOYSTICKS_FIXED_SPEED : -p_bluetoothData->leftY;
 8009b34:	4b47      	ldr	r3, [pc, #284]	; (8009c54 <DRV_updateFromBluetooth+0x264>)
 8009b36:	781b      	ldrb	r3, [r3, #0]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d003      	beq.n	8009b44 <DRV_updateFromBluetooth+0x154>
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	685b      	ldr	r3, [r3, #4]
 8009b40:	425b      	negs	r3, r3
 8009b42:	e000      	b.n	8009b46 <DRV_updateFromBluetooth+0x156>
 8009b44:	2314      	movs	r3, #20
 8009b46:	60fb      	str	r3, [r7, #12]
      DRV_moveBackward(l_speed);
 8009b48:	68f8      	ldr	r0, [r7, #12]
 8009b4a:	f000 fdcb 	bl	800a6e4 <DRV_moveBackward>
  return;
 8009b4e:	e07d      	b.n	8009c4c <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->rightY < -DRV_JOYSTICKS_THRESHOLD)
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	68db      	ldr	r3, [r3, #12]
 8009b54:	f113 0f0a 	cmn.w	r3, #10
 8009b58:	da0d      	bge.n	8009b76 <DRV_updateFromBluetooth+0x186>
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? DRV_JOYSTICKS_FIXED_SPEED : -p_bluetoothData->rightY;
 8009b5a:	4b3e      	ldr	r3, [pc, #248]	; (8009c54 <DRV_updateFromBluetooth+0x264>)
 8009b5c:	781b      	ldrb	r3, [r3, #0]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d003      	beq.n	8009b6a <DRV_updateFromBluetooth+0x17a>
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	68db      	ldr	r3, [r3, #12]
 8009b66:	425b      	negs	r3, r3
 8009b68:	e000      	b.n	8009b6c <DRV_updateFromBluetooth+0x17c>
 8009b6a:	2314      	movs	r3, #20
 8009b6c:	60fb      	str	r3, [r7, #12]
      DRV_moveBackward(l_speed);
 8009b6e:	68f8      	ldr	r0, [r7, #12]
 8009b70:	f000 fdb8 	bl	800a6e4 <DRV_moveBackward>
  return;
 8009b74:	e06a      	b.n	8009c4c <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->leftX < -DRV_JOYSTICKS_THRESHOLD)
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	f113 0f0a 	cmn.w	r3, #10
 8009b7e:	da0d      	bge.n	8009b9c <DRV_updateFromBluetooth+0x1ac>
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? DRV_JOYSTICKS_FIXED_SPEED : -p_bluetoothData->leftX;
 8009b80:	4b34      	ldr	r3, [pc, #208]	; (8009c54 <DRV_updateFromBluetooth+0x264>)
 8009b82:	781b      	ldrb	r3, [r3, #0]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d003      	beq.n	8009b90 <DRV_updateFromBluetooth+0x1a0>
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	425b      	negs	r3, r3
 8009b8e:	e000      	b.n	8009b92 <DRV_updateFromBluetooth+0x1a2>
 8009b90:	2314      	movs	r3, #20
 8009b92:	60fb      	str	r3, [r7, #12]
      DRV_turnLeft(l_speed);
 8009b94:	68f8      	ldr	r0, [r7, #12]
 8009b96:	f000 feb3 	bl	800a900 <DRV_turnLeft>
  return;
 8009b9a:	e057      	b.n	8009c4c <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->leftX > DRV_JOYSTICKS_THRESHOLD)
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	2b0a      	cmp	r3, #10
 8009ba2:	dd0c      	ble.n	8009bbe <DRV_updateFromBluetooth+0x1ce>
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? DRV_JOYSTICKS_FIXED_SPEED : p_bluetoothData->leftX;
 8009ba4:	4b2b      	ldr	r3, [pc, #172]	; (8009c54 <DRV_updateFromBluetooth+0x264>)
 8009ba6:	781b      	ldrb	r3, [r3, #0]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d002      	beq.n	8009bb2 <DRV_updateFromBluetooth+0x1c2>
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	e000      	b.n	8009bb4 <DRV_updateFromBluetooth+0x1c4>
 8009bb2:	2314      	movs	r3, #20
 8009bb4:	60fb      	str	r3, [r7, #12]
      DRV_turnRight(l_speed);
 8009bb6:	68f8      	ldr	r0, [r7, #12]
 8009bb8:	f000 fed8 	bl	800a96c <DRV_turnRight>
  return;
 8009bbc:	e046      	b.n	8009c4c <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->rightX < -DRV_JOYSTICKS_THRESHOLD)
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	689b      	ldr	r3, [r3, #8]
 8009bc2:	f113 0f0a 	cmn.w	r3, #10
 8009bc6:	da0d      	bge.n	8009be4 <DRV_updateFromBluetooth+0x1f4>
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? DRV_JOYSTICKS_FIXED_SPEED : -p_bluetoothData->rightX;
 8009bc8:	4b22      	ldr	r3, [pc, #136]	; (8009c54 <DRV_updateFromBluetooth+0x264>)
 8009bca:	781b      	ldrb	r3, [r3, #0]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d003      	beq.n	8009bd8 <DRV_updateFromBluetooth+0x1e8>
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	689b      	ldr	r3, [r3, #8]
 8009bd4:	425b      	negs	r3, r3
 8009bd6:	e000      	b.n	8009bda <DRV_updateFromBluetooth+0x1ea>
 8009bd8:	2314      	movs	r3, #20
 8009bda:	60fb      	str	r3, [r7, #12]
      DRV_translateLeft(l_speed);
 8009bdc:	68f8      	ldr	r0, [r7, #12]
 8009bde:	f000 fefb 	bl	800a9d8 <DRV_translateLeft>
  return;
 8009be2:	e033      	b.n	8009c4c <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->rightX > DRV_JOYSTICKS_THRESHOLD)
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	689b      	ldr	r3, [r3, #8]
 8009be8:	2b0a      	cmp	r3, #10
 8009bea:	dd0c      	ble.n	8009c06 <DRV_updateFromBluetooth+0x216>
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? DRV_JOYSTICKS_FIXED_SPEED : p_bluetoothData->rightX;
 8009bec:	4b19      	ldr	r3, [pc, #100]	; (8009c54 <DRV_updateFromBluetooth+0x264>)
 8009bee:	781b      	ldrb	r3, [r3, #0]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d002      	beq.n	8009bfa <DRV_updateFromBluetooth+0x20a>
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	689b      	ldr	r3, [r3, #8]
 8009bf8:	e000      	b.n	8009bfc <DRV_updateFromBluetooth+0x20c>
 8009bfa:	2314      	movs	r3, #20
 8009bfc:	60fb      	str	r3, [r7, #12]
      DRV_translateRight(l_speed);
 8009bfe:	68f8      	ldr	r0, [r7, #12]
 8009c00:	f000 ff20 	bl	800aa44 <DRV_translateRight>
  return;
 8009c04:	e022      	b.n	8009c4c <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->button == BLU_BUTTON_L1)
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	7c1b      	ldrb	r3, [r3, #16]
 8009c0a:	2b0b      	cmp	r3, #11
 8009c0c:	d103      	bne.n	8009c16 <DRV_updateFromBluetooth+0x226>
      DRV_moveForwardLeft(DRV_BUTTONS_FIXED_SPEED);
 8009c0e:	2028      	movs	r0, #40	; 0x28
 8009c10:	f000 fdd4 	bl	800a7bc <DRV_moveForwardLeft>
  return;
 8009c14:	e01a      	b.n	8009c4c <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->button == BLU_BUTTON_L2)
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	7c1b      	ldrb	r3, [r3, #16]
 8009c1a:	2b09      	cmp	r3, #9
 8009c1c:	d103      	bne.n	8009c26 <DRV_updateFromBluetooth+0x236>
      DRV_moveBackwardRight(DRV_BUTTONS_FIXED_SPEED);
 8009c1e:	2028      	movs	r0, #40	; 0x28
 8009c20:	f000 fe02 	bl	800a828 <DRV_moveBackwardRight>
  return;
 8009c24:	e012      	b.n	8009c4c <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->button == BLU_BUTTON_R1)
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	7c1b      	ldrb	r3, [r3, #16]
 8009c2a:	2b0c      	cmp	r3, #12
 8009c2c:	d103      	bne.n	8009c36 <DRV_updateFromBluetooth+0x246>
      DRV_moveForwardRight(DRV_BUTTONS_FIXED_SPEED);
 8009c2e:	2028      	movs	r0, #40	; 0x28
 8009c30:	f000 fd8e 	bl	800a750 <DRV_moveForwardRight>
  return;
 8009c34:	e00a      	b.n	8009c4c <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->button == BLU_BUTTON_R2)
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	7c1b      	ldrb	r3, [r3, #16]
 8009c3a:	2b0a      	cmp	r3, #10
 8009c3c:	d103      	bne.n	8009c46 <DRV_updateFromBluetooth+0x256>
      DRV_moveBackwardLeft(DRV_BUTTONS_FIXED_SPEED);
 8009c3e:	2028      	movs	r0, #40	; 0x28
 8009c40:	f000 fe28 	bl	800a894 <DRV_moveBackwardLeft>
  return;
 8009c44:	e002      	b.n	8009c4c <DRV_updateFromBluetooth+0x25c>
      DRV_stop();
 8009c46:	f000 fcf9 	bl	800a63c <DRV_stop>
  return;
 8009c4a:	bf00      	nop
 8009c4c:	bf00      	nop
}
 8009c4e:	3710      	adds	r7, #16
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bd80      	pop	{r7, pc}
 8009c54:	2000025a 	.word	0x2000025a
 8009c58:	0800f2f4 	.word	0x0800f2f4
 8009c5c:	0800f320 	.word	0x0800f320
 8009c60:	0800f350 	.word	0x0800f350
 8009c64:	20000259 	.word	0x20000259
 8009c68:	0800f380 	.word	0x0800f380
 8009c6c:	0800f398 	.word	0x0800f398

08009c70 <DRV_updateFromMaster>:

void DRV_updateFromMaster(T_SFO_Context *p_commandsFifo, uint16_t p_deltaTime)
{
 8009c70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c72:	b099      	sub	sp, #100	; 0x64
 8009c74:	af02      	add	r7, sp, #8
 8009c76:	6078      	str	r0, [r7, #4]
 8009c78:	460b      	mov	r3, r1
 8009c7a:	807b      	strh	r3, [r7, #2]
  RTC_TimeTypeDef   l_time;
  RTC_DateTypeDef   l_date;
  static RTC_TimeTypeDef   l_lastTime;

  /* Ignore master board data only whenever a manual mode is selected */
  if (g_DRV_mode != DRV_MODE_MASTER_BOARD_CONTROL)
 8009c7c:	4ba6      	ldr	r3, [pc, #664]	; (8009f18 <DRV_updateFromMaster+0x2a8>)
 8009c7e:	781b      	ldrb	r3, [r3, #0]
 8009c80:	2b02      	cmp	r3, #2
 8009c82:	f040 82fd 	bne.w	800a280 <DRV_updateFromMaster+0x610>
  }
  else
  {
    /* Deal with only one command per cycle. If a FIFO overflow occurs, */
    /* FIFO string will report an error, showing us a design issue...   */
    if (SFO_getCount(p_commandsFifo) != 0)
 8009c86:	6878      	ldr	r0, [r7, #4]
 8009c88:	f001 fd14 	bl	800b6b4 <SFO_getCount>
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	f000 81eb 	beq.w	800a06a <DRV_updateFromMaster+0x3fa>
    {
      SFO_logInfo(p_commandsFifo);
 8009c94:	6878      	ldr	r0, [r7, #4]
 8009c96:	f001 fd19 	bl	800b6cc <SFO_logInfo>
      SFO_pop    (p_commandsFifo         , &l_command);
 8009c9a:	f107 0314 	add.w	r3, r7, #20
 8009c9e:	4619      	mov	r1, r3
 8009ca0:	6878      	ldr	r0, [r7, #4]
 8009ca2:	f001 fcc7 	bl	800b634 <SFO_pop>
      LOG_info   ("Drive got command: %s",  l_command);
 8009ca6:	f107 0314 	add.w	r3, r7, #20
 8009caa:	461a      	mov	r2, r3
 8009cac:	499b      	ldr	r1, [pc, #620]	; (8009f1c <DRV_updateFromMaster+0x2ac>)
 8009cae:	2001      	movs	r0, #1
 8009cb0:	f001 f87c 	bl	800adac <LOG_log>

      l_speed = atoi(&l_command[2]);
 8009cb4:	f107 0314 	add.w	r3, r7, #20
 8009cb8:	3302      	adds	r3, #2
 8009cba:	4618      	mov	r0, r3
 8009cbc:	f001 fe4c 	bl	800b958 <atoi>
 8009cc0:	6578      	str	r0, [r7, #84]	; 0x54

      /* Check that speed is in allowed range */
      if ((l_speed < STP_MASTER_MIN_SPEED) || (l_speed > STP_MASTER_MAX_SPEED))
 8009cc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	db02      	blt.n	8009cce <DRV_updateFromMaster+0x5e>
 8009cc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009cca:	2b64      	cmp	r3, #100	; 0x64
 8009ccc:	dd05      	ble.n	8009cda <DRV_updateFromMaster+0x6a>
      {
        LOG_error("Drive got out of range speed: %d", l_speed);
 8009cce:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009cd0:	4993      	ldr	r1, [pc, #588]	; (8009f20 <DRV_updateFromMaster+0x2b0>)
 8009cd2:	2003      	movs	r0, #3
 8009cd4:	f001 f86a 	bl	800adac <LOG_log>
 8009cd8:	e1c7      	b.n	800a06a <DRV_updateFromMaster+0x3fa>
      }
      else
      {
        l_speed = UTI_normalizeIntValue(l_speed ,
 8009cda:	2300      	movs	r3, #0
 8009cdc:	9301      	str	r3, [sp, #4]
 8009cde:	2328      	movs	r3, #40	; 0x28
 8009ce0:	9300      	str	r3, [sp, #0]
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	2264      	movs	r2, #100	; 0x64
 8009ce6:	2100      	movs	r1, #0
 8009ce8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009cea:	f001 fde6 	bl	800b8ba <UTI_normalizeIntValue>
 8009cee:	6578      	str	r0, [r7, #84]	; 0x54
                                        STP_DRIVE_MIN_SPEED,
                                        STP_DRIVE_MAX_SPEED,
                                        false);

        /* Stop */
        if ((l_command[0] == 'S') && (l_command[1] == 'T'))
 8009cf0:	7d3b      	ldrb	r3, [r7, #20]
 8009cf2:	2b53      	cmp	r3, #83	; 0x53
 8009cf4:	d119      	bne.n	8009d2a <DRV_updateFromMaster+0xba>
 8009cf6:	7d7b      	ldrb	r3, [r7, #21]
 8009cf8:	2b54      	cmp	r3, #84	; 0x54
 8009cfa:	d116      	bne.n	8009d2a <DRV_updateFromMaster+0xba>
        {
          DRV_setDirectionsStop();
 8009cfc:	f000 fb9a 	bl	800a434 <DRV_setDirectionsStop>

          PID_setTargetValue(&g_DRV_pidFrontRight, 0);
 8009d00:	f04f 0100 	mov.w	r1, #0
 8009d04:	4887      	ldr	r0, [pc, #540]	; (8009f24 <DRV_updateFromMaster+0x2b4>)
 8009d06:	f001 fae4 	bl	800b2d2 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidFrontLeft , 0);
 8009d0a:	f04f 0100 	mov.w	r1, #0
 8009d0e:	4886      	ldr	r0, [pc, #536]	; (8009f28 <DRV_updateFromMaster+0x2b8>)
 8009d10:	f001 fadf 	bl	800b2d2 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidRearRight , 0);
 8009d14:	f04f 0100 	mov.w	r1, #0
 8009d18:	4884      	ldr	r0, [pc, #528]	; (8009f2c <DRV_updateFromMaster+0x2bc>)
 8009d1a:	f001 fada 	bl	800b2d2 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidRearLeft  , 0);
 8009d1e:	f04f 0100 	mov.w	r1, #0
 8009d22:	4883      	ldr	r0, [pc, #524]	; (8009f30 <DRV_updateFromMaster+0x2c0>)
 8009d24:	f001 fad5 	bl	800b2d2 <PID_setTargetValue>
 8009d28:	e19f      	b.n	800a06a <DRV_updateFromMaster+0x3fa>
        }
        /* Forward Straight */
        else if ((l_command[0] == 'F') && (l_command[1] == 'S'))
 8009d2a:	7d3b      	ldrb	r3, [r7, #20]
 8009d2c:	2b46      	cmp	r3, #70	; 0x46
 8009d2e:	d125      	bne.n	8009d7c <DRV_updateFromMaster+0x10c>
 8009d30:	7d7b      	ldrb	r3, [r7, #21]
 8009d32:	2b53      	cmp	r3, #83	; 0x53
 8009d34:	d122      	bne.n	8009d7c <DRV_updateFromMaster+0x10c>
        {
          DRV_setDirectionsForward();
 8009d36:	f000 fb99 	bl	800a46c <DRV_setDirectionsForward>

          PID_setTargetValue(&g_DRV_pidFrontRight, l_speed);
 8009d3a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009d3c:	f7f6 ffca 	bl	8000cd4 <__aeabi_i2f>
 8009d40:	4603      	mov	r3, r0
 8009d42:	4619      	mov	r1, r3
 8009d44:	4877      	ldr	r0, [pc, #476]	; (8009f24 <DRV_updateFromMaster+0x2b4>)
 8009d46:	f001 fac4 	bl	800b2d2 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidFrontLeft , l_speed);
 8009d4a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009d4c:	f7f6 ffc2 	bl	8000cd4 <__aeabi_i2f>
 8009d50:	4603      	mov	r3, r0
 8009d52:	4619      	mov	r1, r3
 8009d54:	4874      	ldr	r0, [pc, #464]	; (8009f28 <DRV_updateFromMaster+0x2b8>)
 8009d56:	f001 fabc 	bl	800b2d2 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidRearRight , l_speed);
 8009d5a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009d5c:	f7f6 ffba 	bl	8000cd4 <__aeabi_i2f>
 8009d60:	4603      	mov	r3, r0
 8009d62:	4619      	mov	r1, r3
 8009d64:	4871      	ldr	r0, [pc, #452]	; (8009f2c <DRV_updateFromMaster+0x2bc>)
 8009d66:	f001 fab4 	bl	800b2d2 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidRearLeft  , l_speed);
 8009d6a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009d6c:	f7f6 ffb2 	bl	8000cd4 <__aeabi_i2f>
 8009d70:	4603      	mov	r3, r0
 8009d72:	4619      	mov	r1, r3
 8009d74:	486e      	ldr	r0, [pc, #440]	; (8009f30 <DRV_updateFromMaster+0x2c0>)
 8009d76:	f001 faac 	bl	800b2d2 <PID_setTargetValue>
 8009d7a:	e176      	b.n	800a06a <DRV_updateFromMaster+0x3fa>
        }
        /* Move Backward */
        else if ((l_command[0] == 'B') && (l_command[1] == 'S'))
 8009d7c:	7d3b      	ldrb	r3, [r7, #20]
 8009d7e:	2b42      	cmp	r3, #66	; 0x42
 8009d80:	d125      	bne.n	8009dce <DRV_updateFromMaster+0x15e>
 8009d82:	7d7b      	ldrb	r3, [r7, #21]
 8009d84:	2b53      	cmp	r3, #83	; 0x53
 8009d86:	d122      	bne.n	8009dce <DRV_updateFromMaster+0x15e>
        {
          DRV_setDirectionsBackward();
 8009d88:	f000 fb8c 	bl	800a4a4 <DRV_setDirectionsBackward>

          PID_setTargetValue(&g_DRV_pidFrontRight, l_speed);
 8009d8c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009d8e:	f7f6 ffa1 	bl	8000cd4 <__aeabi_i2f>
 8009d92:	4603      	mov	r3, r0
 8009d94:	4619      	mov	r1, r3
 8009d96:	4863      	ldr	r0, [pc, #396]	; (8009f24 <DRV_updateFromMaster+0x2b4>)
 8009d98:	f001 fa9b 	bl	800b2d2 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidFrontLeft , l_speed);
 8009d9c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009d9e:	f7f6 ff99 	bl	8000cd4 <__aeabi_i2f>
 8009da2:	4603      	mov	r3, r0
 8009da4:	4619      	mov	r1, r3
 8009da6:	4860      	ldr	r0, [pc, #384]	; (8009f28 <DRV_updateFromMaster+0x2b8>)
 8009da8:	f001 fa93 	bl	800b2d2 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidRearRight , l_speed);
 8009dac:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009dae:	f7f6 ff91 	bl	8000cd4 <__aeabi_i2f>
 8009db2:	4603      	mov	r3, r0
 8009db4:	4619      	mov	r1, r3
 8009db6:	485d      	ldr	r0, [pc, #372]	; (8009f2c <DRV_updateFromMaster+0x2bc>)
 8009db8:	f001 fa8b 	bl	800b2d2 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidRearLeft  , l_speed);
 8009dbc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009dbe:	f7f6 ff89 	bl	8000cd4 <__aeabi_i2f>
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	4619      	mov	r1, r3
 8009dc6:	485a      	ldr	r0, [pc, #360]	; (8009f30 <DRV_updateFromMaster+0x2c0>)
 8009dc8:	f001 fa83 	bl	800b2d2 <PID_setTargetValue>
 8009dcc:	e14d      	b.n	800a06a <DRV_updateFromMaster+0x3fa>
        }
        /* TurN (i.e. Rotate) Left */
        else if ((l_command[0] == 'R') && (l_command[1] == 'L'))
 8009dce:	7d3b      	ldrb	r3, [r7, #20]
 8009dd0:	2b52      	cmp	r3, #82	; 0x52
 8009dd2:	d125      	bne.n	8009e20 <DRV_updateFromMaster+0x1b0>
 8009dd4:	7d7b      	ldrb	r3, [r7, #21]
 8009dd6:	2b4c      	cmp	r3, #76	; 0x4c
 8009dd8:	d122      	bne.n	8009e20 <DRV_updateFromMaster+0x1b0>
        {
          DRV_setDirectionsTurnLeft();
 8009dda:	f000 fbbf 	bl	800a55c <DRV_setDirectionsTurnLeft>

          PID_setTargetValue(&g_DRV_pidFrontRight, l_speed);
 8009dde:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009de0:	f7f6 ff78 	bl	8000cd4 <__aeabi_i2f>
 8009de4:	4603      	mov	r3, r0
 8009de6:	4619      	mov	r1, r3
 8009de8:	484e      	ldr	r0, [pc, #312]	; (8009f24 <DRV_updateFromMaster+0x2b4>)
 8009dea:	f001 fa72 	bl	800b2d2 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidFrontLeft , l_speed);
 8009dee:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009df0:	f7f6 ff70 	bl	8000cd4 <__aeabi_i2f>
 8009df4:	4603      	mov	r3, r0
 8009df6:	4619      	mov	r1, r3
 8009df8:	484b      	ldr	r0, [pc, #300]	; (8009f28 <DRV_updateFromMaster+0x2b8>)
 8009dfa:	f001 fa6a 	bl	800b2d2 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidRearRight , l_speed);
 8009dfe:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009e00:	f7f6 ff68 	bl	8000cd4 <__aeabi_i2f>
 8009e04:	4603      	mov	r3, r0
 8009e06:	4619      	mov	r1, r3
 8009e08:	4848      	ldr	r0, [pc, #288]	; (8009f2c <DRV_updateFromMaster+0x2bc>)
 8009e0a:	f001 fa62 	bl	800b2d2 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidRearLeft  , l_speed);
 8009e0e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009e10:	f7f6 ff60 	bl	8000cd4 <__aeabi_i2f>
 8009e14:	4603      	mov	r3, r0
 8009e16:	4619      	mov	r1, r3
 8009e18:	4845      	ldr	r0, [pc, #276]	; (8009f30 <DRV_updateFromMaster+0x2c0>)
 8009e1a:	f001 fa5a 	bl	800b2d2 <PID_setTargetValue>
 8009e1e:	e124      	b.n	800a06a <DRV_updateFromMaster+0x3fa>
        }
        /* TurN (i.e. Rotate) Right */
        else if ((l_command[0] == 'R') && (l_command[1] == 'R'))
 8009e20:	7d3b      	ldrb	r3, [r7, #20]
 8009e22:	2b52      	cmp	r3, #82	; 0x52
 8009e24:	d125      	bne.n	8009e72 <DRV_updateFromMaster+0x202>
 8009e26:	7d7b      	ldrb	r3, [r7, #21]
 8009e28:	2b52      	cmp	r3, #82	; 0x52
 8009e2a:	d122      	bne.n	8009e72 <DRV_updateFromMaster+0x202>
        {
          DRV_setDirectionsTurnRight();
 8009e2c:	f000 fbb2 	bl	800a594 <DRV_setDirectionsTurnRight>

          PID_setTargetValue(&g_DRV_pidFrontRight, l_speed);
 8009e30:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009e32:	f7f6 ff4f 	bl	8000cd4 <__aeabi_i2f>
 8009e36:	4603      	mov	r3, r0
 8009e38:	4619      	mov	r1, r3
 8009e3a:	483a      	ldr	r0, [pc, #232]	; (8009f24 <DRV_updateFromMaster+0x2b4>)
 8009e3c:	f001 fa49 	bl	800b2d2 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidFrontLeft , l_speed);
 8009e40:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009e42:	f7f6 ff47 	bl	8000cd4 <__aeabi_i2f>
 8009e46:	4603      	mov	r3, r0
 8009e48:	4619      	mov	r1, r3
 8009e4a:	4837      	ldr	r0, [pc, #220]	; (8009f28 <DRV_updateFromMaster+0x2b8>)
 8009e4c:	f001 fa41 	bl	800b2d2 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidRearRight , l_speed);
 8009e50:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009e52:	f7f6 ff3f 	bl	8000cd4 <__aeabi_i2f>
 8009e56:	4603      	mov	r3, r0
 8009e58:	4619      	mov	r1, r3
 8009e5a:	4834      	ldr	r0, [pc, #208]	; (8009f2c <DRV_updateFromMaster+0x2bc>)
 8009e5c:	f001 fa39 	bl	800b2d2 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidRearLeft  , l_speed);
 8009e60:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009e62:	f7f6 ff37 	bl	8000cd4 <__aeabi_i2f>
 8009e66:	4603      	mov	r3, r0
 8009e68:	4619      	mov	r1, r3
 8009e6a:	4831      	ldr	r0, [pc, #196]	; (8009f30 <DRV_updateFromMaster+0x2c0>)
 8009e6c:	f001 fa31 	bl	800b2d2 <PID_setTargetValue>
 8009e70:	e0fb      	b.n	800a06a <DRV_updateFromMaster+0x3fa>
        }
        /* Translate Left */
        else if ((l_command[0] == 'T') && (l_command[1] == 'L'))
 8009e72:	7d3b      	ldrb	r3, [r7, #20]
 8009e74:	2b54      	cmp	r3, #84	; 0x54
 8009e76:	d125      	bne.n	8009ec4 <DRV_updateFromMaster+0x254>
 8009e78:	7d7b      	ldrb	r3, [r7, #21]
 8009e7a:	2b4c      	cmp	r3, #76	; 0x4c
 8009e7c:	d122      	bne.n	8009ec4 <DRV_updateFromMaster+0x254>
        {
          DRV_setDirectionsTranslateLeft();
 8009e7e:	f000 fba5 	bl	800a5cc <DRV_setDirectionsTranslateLeft>

          PID_setTargetValue(&g_DRV_pidFrontRight, l_speed);
 8009e82:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009e84:	f7f6 ff26 	bl	8000cd4 <__aeabi_i2f>
 8009e88:	4603      	mov	r3, r0
 8009e8a:	4619      	mov	r1, r3
 8009e8c:	4825      	ldr	r0, [pc, #148]	; (8009f24 <DRV_updateFromMaster+0x2b4>)
 8009e8e:	f001 fa20 	bl	800b2d2 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidFrontLeft , l_speed);
 8009e92:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009e94:	f7f6 ff1e 	bl	8000cd4 <__aeabi_i2f>
 8009e98:	4603      	mov	r3, r0
 8009e9a:	4619      	mov	r1, r3
 8009e9c:	4822      	ldr	r0, [pc, #136]	; (8009f28 <DRV_updateFromMaster+0x2b8>)
 8009e9e:	f001 fa18 	bl	800b2d2 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidRearRight , l_speed);
 8009ea2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009ea4:	f7f6 ff16 	bl	8000cd4 <__aeabi_i2f>
 8009ea8:	4603      	mov	r3, r0
 8009eaa:	4619      	mov	r1, r3
 8009eac:	481f      	ldr	r0, [pc, #124]	; (8009f2c <DRV_updateFromMaster+0x2bc>)
 8009eae:	f001 fa10 	bl	800b2d2 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidRearLeft  , l_speed);
 8009eb2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009eb4:	f7f6 ff0e 	bl	8000cd4 <__aeabi_i2f>
 8009eb8:	4603      	mov	r3, r0
 8009eba:	4619      	mov	r1, r3
 8009ebc:	481c      	ldr	r0, [pc, #112]	; (8009f30 <DRV_updateFromMaster+0x2c0>)
 8009ebe:	f001 fa08 	bl	800b2d2 <PID_setTargetValue>
 8009ec2:	e0d2      	b.n	800a06a <DRV_updateFromMaster+0x3fa>
        }
        /* Translate Right */
        else if ((l_command[0] == 'T') && (l_command[1] == 'R'))
 8009ec4:	7d3b      	ldrb	r3, [r7, #20]
 8009ec6:	2b54      	cmp	r3, #84	; 0x54
 8009ec8:	d134      	bne.n	8009f34 <DRV_updateFromMaster+0x2c4>
 8009eca:	7d7b      	ldrb	r3, [r7, #21]
 8009ecc:	2b52      	cmp	r3, #82	; 0x52
 8009ece:	d131      	bne.n	8009f34 <DRV_updateFromMaster+0x2c4>
        {
          DRV_setDirectionsTranslateRight();
 8009ed0:	f000 fb98 	bl	800a604 <DRV_setDirectionsTranslateRight>

          PID_setTargetValue(&g_DRV_pidFrontRight, l_speed);
 8009ed4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009ed6:	f7f6 fefd 	bl	8000cd4 <__aeabi_i2f>
 8009eda:	4603      	mov	r3, r0
 8009edc:	4619      	mov	r1, r3
 8009ede:	4811      	ldr	r0, [pc, #68]	; (8009f24 <DRV_updateFromMaster+0x2b4>)
 8009ee0:	f001 f9f7 	bl	800b2d2 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidFrontLeft , l_speed);
 8009ee4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009ee6:	f7f6 fef5 	bl	8000cd4 <__aeabi_i2f>
 8009eea:	4603      	mov	r3, r0
 8009eec:	4619      	mov	r1, r3
 8009eee:	480e      	ldr	r0, [pc, #56]	; (8009f28 <DRV_updateFromMaster+0x2b8>)
 8009ef0:	f001 f9ef 	bl	800b2d2 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidRearRight , l_speed);
 8009ef4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009ef6:	f7f6 feed 	bl	8000cd4 <__aeabi_i2f>
 8009efa:	4603      	mov	r3, r0
 8009efc:	4619      	mov	r1, r3
 8009efe:	480b      	ldr	r0, [pc, #44]	; (8009f2c <DRV_updateFromMaster+0x2bc>)
 8009f00:	f001 f9e7 	bl	800b2d2 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidRearLeft  , l_speed);
 8009f04:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009f06:	f7f6 fee5 	bl	8000cd4 <__aeabi_i2f>
 8009f0a:	4603      	mov	r3, r0
 8009f0c:	4619      	mov	r1, r3
 8009f0e:	4808      	ldr	r0, [pc, #32]	; (8009f30 <DRV_updateFromMaster+0x2c0>)
 8009f10:	f001 f9df 	bl	800b2d2 <PID_setTargetValue>
 8009f14:	e0a9      	b.n	800a06a <DRV_updateFromMaster+0x3fa>
 8009f16:	bf00      	nop
 8009f18:	2000025a 	.word	0x2000025a
 8009f1c:	0800f3b0 	.word	0x0800f3b0
 8009f20:	0800f3c8 	.word	0x0800f3c8
 8009f24:	2000025c 	.word	0x2000025c
 8009f28:	2000028c 	.word	0x2000028c
 8009f2c:	200002ec 	.word	0x200002ec
 8009f30:	200002bc 	.word	0x200002bc
        }
        /* Forward Left */
        else if ((l_command[0] == 'F') && (l_command[1] == 'L'))
 8009f34:	7d3b      	ldrb	r3, [r7, #20]
 8009f36:	2b46      	cmp	r3, #70	; 0x46
 8009f38:	d11f      	bne.n	8009f7a <DRV_updateFromMaster+0x30a>
 8009f3a:	7d7b      	ldrb	r3, [r7, #21]
 8009f3c:	2b4c      	cmp	r3, #76	; 0x4c
 8009f3e:	d11c      	bne.n	8009f7a <DRV_updateFromMaster+0x30a>
        {
          DRV_setDirectionsForwardLeft();
 8009f40:	f000 fadc 	bl	800a4fc <DRV_setDirectionsForwardLeft>

          PID_setTargetValue(&g_DRV_pidFrontRight, l_speed);
 8009f44:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009f46:	f7f6 fec5 	bl	8000cd4 <__aeabi_i2f>
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	4619      	mov	r1, r3
 8009f4e:	483f      	ldr	r0, [pc, #252]	; (800a04c <DRV_updateFromMaster+0x3dc>)
 8009f50:	f001 f9bf 	bl	800b2d2 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidFrontLeft ,       0);
 8009f54:	f04f 0100 	mov.w	r1, #0
 8009f58:	483d      	ldr	r0, [pc, #244]	; (800a050 <DRV_updateFromMaster+0x3e0>)
 8009f5a:	f001 f9ba 	bl	800b2d2 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidRearRight ,       0);
 8009f5e:	f04f 0100 	mov.w	r1, #0
 8009f62:	483c      	ldr	r0, [pc, #240]	; (800a054 <DRV_updateFromMaster+0x3e4>)
 8009f64:	f001 f9b5 	bl	800b2d2 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidRearLeft  , l_speed);
 8009f68:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009f6a:	f7f6 feb3 	bl	8000cd4 <__aeabi_i2f>
 8009f6e:	4603      	mov	r3, r0
 8009f70:	4619      	mov	r1, r3
 8009f72:	4839      	ldr	r0, [pc, #228]	; (800a058 <DRV_updateFromMaster+0x3e8>)
 8009f74:	f001 f9ad 	bl	800b2d2 <PID_setTargetValue>
 8009f78:	e077      	b.n	800a06a <DRV_updateFromMaster+0x3fa>
        }
        /* Forward Right */
        else if ((l_command[0] == 'F') && (l_command[1] == 'R'))
 8009f7a:	7d3b      	ldrb	r3, [r7, #20]
 8009f7c:	2b46      	cmp	r3, #70	; 0x46
 8009f7e:	d11f      	bne.n	8009fc0 <DRV_updateFromMaster+0x350>
 8009f80:	7d7b      	ldrb	r3, [r7, #21]
 8009f82:	2b52      	cmp	r3, #82	; 0x52
 8009f84:	d11c      	bne.n	8009fc0 <DRV_updateFromMaster+0x350>
        {
          DRV_setDirectionsForwardRight();
 8009f86:	f000 faa9 	bl	800a4dc <DRV_setDirectionsForwardRight>

          PID_setTargetValue(&g_DRV_pidFrontRight,       0);
 8009f8a:	f04f 0100 	mov.w	r1, #0
 8009f8e:	482f      	ldr	r0, [pc, #188]	; (800a04c <DRV_updateFromMaster+0x3dc>)
 8009f90:	f001 f99f 	bl	800b2d2 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidFrontLeft , l_speed);
 8009f94:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009f96:	f7f6 fe9d 	bl	8000cd4 <__aeabi_i2f>
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	4619      	mov	r1, r3
 8009f9e:	482c      	ldr	r0, [pc, #176]	; (800a050 <DRV_updateFromMaster+0x3e0>)
 8009fa0:	f001 f997 	bl	800b2d2 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidRearRight , l_speed);
 8009fa4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009fa6:	f7f6 fe95 	bl	8000cd4 <__aeabi_i2f>
 8009faa:	4603      	mov	r3, r0
 8009fac:	4619      	mov	r1, r3
 8009fae:	4829      	ldr	r0, [pc, #164]	; (800a054 <DRV_updateFromMaster+0x3e4>)
 8009fb0:	f001 f98f 	bl	800b2d2 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidRearLeft  ,       0);
 8009fb4:	f04f 0100 	mov.w	r1, #0
 8009fb8:	4827      	ldr	r0, [pc, #156]	; (800a058 <DRV_updateFromMaster+0x3e8>)
 8009fba:	f001 f98a 	bl	800b2d2 <PID_setTargetValue>
 8009fbe:	e054      	b.n	800a06a <DRV_updateFromMaster+0x3fa>
        }
        /* Backward Left */
        else if ((l_command[0] == 'B') && (l_command[1] == 'L'))
 8009fc0:	7d3b      	ldrb	r3, [r7, #20]
 8009fc2:	2b42      	cmp	r3, #66	; 0x42
 8009fc4:	d11f      	bne.n	800a006 <DRV_updateFromMaster+0x396>
 8009fc6:	7d7b      	ldrb	r3, [r7, #21]
 8009fc8:	2b4c      	cmp	r3, #76	; 0x4c
 8009fca:	d11c      	bne.n	800a006 <DRV_updateFromMaster+0x396>
        {
          DRV_setDirectionsBackwardLeft();
 8009fcc:	f000 fab6 	bl	800a53c <DRV_setDirectionsBackwardLeft>

          PID_setTargetValue(&g_DRV_pidFrontRight,       0);
 8009fd0:	f04f 0100 	mov.w	r1, #0
 8009fd4:	481d      	ldr	r0, [pc, #116]	; (800a04c <DRV_updateFromMaster+0x3dc>)
 8009fd6:	f001 f97c 	bl	800b2d2 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidFrontLeft , l_speed);
 8009fda:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009fdc:	f7f6 fe7a 	bl	8000cd4 <__aeabi_i2f>
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	4619      	mov	r1, r3
 8009fe4:	481a      	ldr	r0, [pc, #104]	; (800a050 <DRV_updateFromMaster+0x3e0>)
 8009fe6:	f001 f974 	bl	800b2d2 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidRearRight , l_speed);
 8009fea:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009fec:	f7f6 fe72 	bl	8000cd4 <__aeabi_i2f>
 8009ff0:	4603      	mov	r3, r0
 8009ff2:	4619      	mov	r1, r3
 8009ff4:	4817      	ldr	r0, [pc, #92]	; (800a054 <DRV_updateFromMaster+0x3e4>)
 8009ff6:	f001 f96c 	bl	800b2d2 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidRearLeft  ,       0);
 8009ffa:	f04f 0100 	mov.w	r1, #0
 8009ffe:	4816      	ldr	r0, [pc, #88]	; (800a058 <DRV_updateFromMaster+0x3e8>)
 800a000:	f001 f967 	bl	800b2d2 <PID_setTargetValue>
 800a004:	e031      	b.n	800a06a <DRV_updateFromMaster+0x3fa>
        }
        /* Forward Right */
        else if ((l_command[0] == 'B') && (l_command[1] == 'R'))
 800a006:	7d3b      	ldrb	r3, [r7, #20]
 800a008:	2b42      	cmp	r3, #66	; 0x42
 800a00a:	d127      	bne.n	800a05c <DRV_updateFromMaster+0x3ec>
 800a00c:	7d7b      	ldrb	r3, [r7, #21]
 800a00e:	2b52      	cmp	r3, #82	; 0x52
 800a010:	d124      	bne.n	800a05c <DRV_updateFromMaster+0x3ec>
        {
          DRV_setDirectionsBackwardRight();
 800a012:	f000 fa83 	bl	800a51c <DRV_setDirectionsBackwardRight>

          PID_setTargetValue(&g_DRV_pidFrontRight, l_speed);
 800a016:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800a018:	f7f6 fe5c 	bl	8000cd4 <__aeabi_i2f>
 800a01c:	4603      	mov	r3, r0
 800a01e:	4619      	mov	r1, r3
 800a020:	480a      	ldr	r0, [pc, #40]	; (800a04c <DRV_updateFromMaster+0x3dc>)
 800a022:	f001 f956 	bl	800b2d2 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidFrontLeft ,       0);
 800a026:	f04f 0100 	mov.w	r1, #0
 800a02a:	4809      	ldr	r0, [pc, #36]	; (800a050 <DRV_updateFromMaster+0x3e0>)
 800a02c:	f001 f951 	bl	800b2d2 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidRearRight ,       0);
 800a030:	f04f 0100 	mov.w	r1, #0
 800a034:	4807      	ldr	r0, [pc, #28]	; (800a054 <DRV_updateFromMaster+0x3e4>)
 800a036:	f001 f94c 	bl	800b2d2 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidRearLeft  , l_speed);
 800a03a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800a03c:	f7f6 fe4a 	bl	8000cd4 <__aeabi_i2f>
 800a040:	4603      	mov	r3, r0
 800a042:	4619      	mov	r1, r3
 800a044:	4804      	ldr	r0, [pc, #16]	; (800a058 <DRV_updateFromMaster+0x3e8>)
 800a046:	f001 f944 	bl	800b2d2 <PID_setTargetValue>
 800a04a:	e00e      	b.n	800a06a <DRV_updateFromMaster+0x3fa>
 800a04c:	2000025c 	.word	0x2000025c
 800a050:	2000028c 	.word	0x2000028c
 800a054:	200002ec 	.word	0x200002ec
 800a058:	200002bc 	.word	0x200002bc
        }
        else
        {
          LOG_error("Drive got unsupported command: '%s'", l_command);
 800a05c:	f107 0314 	add.w	r3, r7, #20
 800a060:	461a      	mov	r2, r3
 800a062:	4989      	ldr	r1, [pc, #548]	; (800a288 <DRV_updateFromMaster+0x618>)
 800a064:	2003      	movs	r0, #3
 800a066:	f000 fea1 	bl	800adac <LOG_log>
        }
      }
    }

    /* Get measurements */
    l_measuredSpeedFrontRight = fabs((float)ENC_getCount(&g_DRV_encoderFrontRight) / (float)p_deltaTime * STD_DRIVE_PID_ENCODER_TO_SPEED_FACTOR);
 800a06a:	4888      	ldr	r0, [pc, #544]	; (800a28c <DRV_updateFromMaster+0x61c>)
 800a06c:	f000 fd6d 	bl	800ab4a <ENC_getCount>
 800a070:	4603      	mov	r3, r0
 800a072:	4618      	mov	r0, r3
 800a074:	f7f6 fe2e 	bl	8000cd4 <__aeabi_i2f>
 800a078:	4604      	mov	r4, r0
 800a07a:	887b      	ldrh	r3, [r7, #2]
 800a07c:	4618      	mov	r0, r3
 800a07e:	f7f6 fe25 	bl	8000ccc <__aeabi_ui2f>
 800a082:	4603      	mov	r3, r0
 800a084:	4619      	mov	r1, r3
 800a086:	4620      	mov	r0, r4
 800a088:	f7f6 ff2c 	bl	8000ee4 <__aeabi_fdiv>
 800a08c:	4603      	mov	r3, r0
 800a08e:	4980      	ldr	r1, [pc, #512]	; (800a290 <DRV_updateFromMaster+0x620>)
 800a090:	4618      	mov	r0, r3
 800a092:	f7f6 fe73 	bl	8000d7c <__aeabi_fmul>
 800a096:	4603      	mov	r3, r0
 800a098:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a09c:	653b      	str	r3, [r7, #80]	; 0x50
    l_measuredSpeedFrontLeft  = fabs((float)ENC_getCount(&g_DRV_encoderFrontLeft ) / (float)p_deltaTime * STD_DRIVE_PID_ENCODER_TO_SPEED_FACTOR);
 800a09e:	487d      	ldr	r0, [pc, #500]	; (800a294 <DRV_updateFromMaster+0x624>)
 800a0a0:	f000 fd53 	bl	800ab4a <ENC_getCount>
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	f7f6 fe14 	bl	8000cd4 <__aeabi_i2f>
 800a0ac:	4604      	mov	r4, r0
 800a0ae:	887b      	ldrh	r3, [r7, #2]
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	f7f6 fe0b 	bl	8000ccc <__aeabi_ui2f>
 800a0b6:	4603      	mov	r3, r0
 800a0b8:	4619      	mov	r1, r3
 800a0ba:	4620      	mov	r0, r4
 800a0bc:	f7f6 ff12 	bl	8000ee4 <__aeabi_fdiv>
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	4973      	ldr	r1, [pc, #460]	; (800a290 <DRV_updateFromMaster+0x620>)
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	f7f6 fe59 	bl	8000d7c <__aeabi_fmul>
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a0d0:	64fb      	str	r3, [r7, #76]	; 0x4c
    l_measuredSpeedRearRight  = fabs((float)ENC_getCount(&g_DRV_encoderRearRight ) / (float)p_deltaTime * STD_DRIVE_PID_ENCODER_TO_SPEED_FACTOR);
 800a0d2:	4871      	ldr	r0, [pc, #452]	; (800a298 <DRV_updateFromMaster+0x628>)
 800a0d4:	f000 fd39 	bl	800ab4a <ENC_getCount>
 800a0d8:	4603      	mov	r3, r0
 800a0da:	4618      	mov	r0, r3
 800a0dc:	f7f6 fdfa 	bl	8000cd4 <__aeabi_i2f>
 800a0e0:	4604      	mov	r4, r0
 800a0e2:	887b      	ldrh	r3, [r7, #2]
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	f7f6 fdf1 	bl	8000ccc <__aeabi_ui2f>
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	4619      	mov	r1, r3
 800a0ee:	4620      	mov	r0, r4
 800a0f0:	f7f6 fef8 	bl	8000ee4 <__aeabi_fdiv>
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	4966      	ldr	r1, [pc, #408]	; (800a290 <DRV_updateFromMaster+0x620>)
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	f7f6 fe3f 	bl	8000d7c <__aeabi_fmul>
 800a0fe:	4603      	mov	r3, r0
 800a100:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a104:	64bb      	str	r3, [r7, #72]	; 0x48
    l_measuredSpeedRearLeft   = fabs((float)ENC_getCount(&g_DRV_encoderRearLeft  ) / (float)p_deltaTime * STD_DRIVE_PID_ENCODER_TO_SPEED_FACTOR);
 800a106:	4865      	ldr	r0, [pc, #404]	; (800a29c <DRV_updateFromMaster+0x62c>)
 800a108:	f000 fd1f 	bl	800ab4a <ENC_getCount>
 800a10c:	4603      	mov	r3, r0
 800a10e:	4618      	mov	r0, r3
 800a110:	f7f6 fde0 	bl	8000cd4 <__aeabi_i2f>
 800a114:	4604      	mov	r4, r0
 800a116:	887b      	ldrh	r3, [r7, #2]
 800a118:	4618      	mov	r0, r3
 800a11a:	f7f6 fdd7 	bl	8000ccc <__aeabi_ui2f>
 800a11e:	4603      	mov	r3, r0
 800a120:	4619      	mov	r1, r3
 800a122:	4620      	mov	r0, r4
 800a124:	f7f6 fede 	bl	8000ee4 <__aeabi_fdiv>
 800a128:	4603      	mov	r3, r0
 800a12a:	4959      	ldr	r1, [pc, #356]	; (800a290 <DRV_updateFromMaster+0x620>)
 800a12c:	4618      	mov	r0, r3
 800a12e:	f7f6 fe25 	bl	8000d7c <__aeabi_fmul>
 800a132:	4603      	mov	r3, r0
 800a134:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a138:	647b      	str	r3, [r7, #68]	; 0x44

    CBU_push(&g_DRV_speedBufferFrontRight, l_measuredSpeedFrontRight);
 800a13a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a13c:	4858      	ldr	r0, [pc, #352]	; (800a2a0 <DRV_updateFromMaster+0x630>)
 800a13e:	f7ff fa2b 	bl	8009598 <CBU_push>
    CBU_push(&g_DRV_speedBufferFrontLeft , l_measuredSpeedFrontLeft );
 800a142:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800a144:	4857      	ldr	r0, [pc, #348]	; (800a2a4 <DRV_updateFromMaster+0x634>)
 800a146:	f7ff fa27 	bl	8009598 <CBU_push>
    CBU_push(&g_DRV_speedBufferRearRight , l_measuredSpeedRearRight );
 800a14a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a14c:	4856      	ldr	r0, [pc, #344]	; (800a2a8 <DRV_updateFromMaster+0x638>)
 800a14e:	f7ff fa23 	bl	8009598 <CBU_push>
    CBU_push(&g_DRV_speedBufferRearLeft  , l_measuredSpeedRearLeft  );
 800a152:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a154:	4855      	ldr	r0, [pc, #340]	; (800a2ac <DRV_updateFromMaster+0x63c>)
 800a156:	f7ff fa1f 	bl	8009598 <CBU_push>

    l_averageSpeedFrontRight = CBU_getAverage(&g_DRV_speedBufferFrontRight);
 800a15a:	4851      	ldr	r0, [pc, #324]	; (800a2a0 <DRV_updateFromMaster+0x630>)
 800a15c:	f7ff fa43 	bl	80095e6 <CBU_getAverage>
 800a160:	6438      	str	r0, [r7, #64]	; 0x40
    l_averageSpeedFrontLeft  = CBU_getAverage(&g_DRV_speedBufferFrontLeft );
 800a162:	4850      	ldr	r0, [pc, #320]	; (800a2a4 <DRV_updateFromMaster+0x634>)
 800a164:	f7ff fa3f 	bl	80095e6 <CBU_getAverage>
 800a168:	63f8      	str	r0, [r7, #60]	; 0x3c
    l_averageSpeedRearRight  = CBU_getAverage(&g_DRV_speedBufferRearRight );
 800a16a:	484f      	ldr	r0, [pc, #316]	; (800a2a8 <DRV_updateFromMaster+0x638>)
 800a16c:	f7ff fa3b 	bl	80095e6 <CBU_getAverage>
 800a170:	63b8      	str	r0, [r7, #56]	; 0x38
    l_averageSpeedRearLeft   = CBU_getAverage(&g_DRV_speedBufferRearLeft  );
 800a172:	484e      	ldr	r0, [pc, #312]	; (800a2ac <DRV_updateFromMaster+0x63c>)
 800a174:	f7ff fa37 	bl	80095e6 <CBU_getAverage>
 800a178:	6378      	str	r0, [r7, #52]	; 0x34

    HAL_RTC_GetTime(&hrtc, &l_time, RTC_FORMAT_BCD);
 800a17a:	f107 0310 	add.w	r3, r7, #16
 800a17e:	2201      	movs	r2, #1
 800a180:	4619      	mov	r1, r3
 800a182:	484b      	ldr	r0, [pc, #300]	; (800a2b0 <DRV_updateFromMaster+0x640>)
 800a184:	f7fb f984 	bl	8005490 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &l_date, RTC_FORMAT_BCD);
 800a188:	f107 030c 	add.w	r3, r7, #12
 800a18c:	2201      	movs	r2, #1
 800a18e:	4619      	mov	r1, r3
 800a190:	4847      	ldr	r0, [pc, #284]	; (800a2b0 <DRV_updateFromMaster+0x640>)
 800a192:	f7fb fb81 	bl	8005898 <HAL_RTC_GetDate>

    if (UTI_turnRtcTimeToSeconds(&l_time) - UTI_turnRtcTimeToSeconds(&l_lastTime) >= 3)
 800a196:	f107 0310 	add.w	r3, r7, #16
 800a19a:	4618      	mov	r0, r3
 800a19c:	f001 fb49 	bl	800b832 <UTI_turnRtcTimeToSeconds>
 800a1a0:	4604      	mov	r4, r0
 800a1a2:	4844      	ldr	r0, [pc, #272]	; (800a2b4 <DRV_updateFromMaster+0x644>)
 800a1a4:	f001 fb45 	bl	800b832 <UTI_turnRtcTimeToSeconds>
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	1ae3      	subs	r3, r4, r3
 800a1ac:	2b02      	cmp	r3, #2
 800a1ae:	d923      	bls.n	800a1f8 <DRV_updateFromMaster+0x588>
    {
      l_lastTime = l_time;
 800a1b0:	4b40      	ldr	r3, [pc, #256]	; (800a2b4 <DRV_updateFromMaster+0x644>)
 800a1b2:	f107 0210 	add.w	r2, r7, #16
 800a1b6:	6812      	ldr	r2, [r2, #0]
 800a1b8:	4611      	mov	r1, r2
 800a1ba:	8019      	strh	r1, [r3, #0]
 800a1bc:	3302      	adds	r3, #2
 800a1be:	0c12      	lsrs	r2, r2, #16
 800a1c0:	701a      	strb	r2, [r3, #0]
      PID_logInfo(&g_DRV_pidFrontRight);
 800a1c2:	483d      	ldr	r0, [pc, #244]	; (800a2b8 <DRV_updateFromMaster+0x648>)
 800a1c4:	f001 f94c 	bl	800b460 <PID_logInfo>
      LOG_info("%d, %d, %d, %d",
 800a1c8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800a1ca:	f7f6 ff27 	bl	800101c <__aeabi_f2iz>
 800a1ce:	4605      	mov	r5, r0
 800a1d0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a1d2:	f7f6 ff23 	bl	800101c <__aeabi_f2iz>
 800a1d6:	4606      	mov	r6, r0
 800a1d8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a1da:	f7f6 ff1f 	bl	800101c <__aeabi_f2iz>
 800a1de:	4604      	mov	r4, r0
 800a1e0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a1e2:	f7f6 ff1b 	bl	800101c <__aeabi_f2iz>
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	9301      	str	r3, [sp, #4]
 800a1ea:	9400      	str	r4, [sp, #0]
 800a1ec:	4633      	mov	r3, r6
 800a1ee:	462a      	mov	r2, r5
 800a1f0:	4932      	ldr	r1, [pc, #200]	; (800a2bc <DRV_updateFromMaster+0x64c>)
 800a1f2:	2001      	movs	r0, #1
 800a1f4:	f000 fdda 	bl	800adac <LOG_log>
               (int32_t)l_averageSpeedRearRight,
               (int32_t)l_averageSpeedRearLeft);
    }

    /* Update PIDs */
    l_pidSpeedFrontRight = PID_update(&g_DRV_pidFrontRight, l_averageSpeedFrontRight, p_deltaTime);
 800a1f8:	887b      	ldrh	r3, [r7, #2]
 800a1fa:	461a      	mov	r2, r3
 800a1fc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a1fe:	482e      	ldr	r0, [pc, #184]	; (800a2b8 <DRV_updateFromMaster+0x648>)
 800a200:	f001 f874 	bl	800b2ec <PID_update>
 800a204:	6338      	str	r0, [r7, #48]	; 0x30
    l_pidSpeedFrontLeft  = PID_update(&g_DRV_pidFrontLeft , l_averageSpeedFrontLeft , p_deltaTime);
 800a206:	887b      	ldrh	r3, [r7, #2]
 800a208:	461a      	mov	r2, r3
 800a20a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a20c:	482c      	ldr	r0, [pc, #176]	; (800a2c0 <DRV_updateFromMaster+0x650>)
 800a20e:	f001 f86d 	bl	800b2ec <PID_update>
 800a212:	62f8      	str	r0, [r7, #44]	; 0x2c
    l_pidSpeedRearRight  = PID_update(&g_DRV_pidRearRight , l_averageSpeedRearRight , p_deltaTime);
 800a214:	887b      	ldrh	r3, [r7, #2]
 800a216:	461a      	mov	r2, r3
 800a218:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a21a:	482a      	ldr	r0, [pc, #168]	; (800a2c4 <DRV_updateFromMaster+0x654>)
 800a21c:	f001 f866 	bl	800b2ec <PID_update>
 800a220:	62b8      	str	r0, [r7, #40]	; 0x28
    l_pidSpeedRearLeft   = PID_update(&g_DRV_pidRearLeft  , l_averageSpeedRearLeft  , p_deltaTime);
 800a222:	887b      	ldrh	r3, [r7, #2]
 800a224:	461a      	mov	r2, r3
 800a226:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a228:	4827      	ldr	r0, [pc, #156]	; (800a2c8 <DRV_updateFromMaster+0x658>)
 800a22a:	f001 f85f 	bl	800b2ec <PID_update>
 800a22e:	6278      	str	r0, [r7, #36]	; 0x24

    if (g_DRV_areMotorsOn == false)
 800a230:	4b26      	ldr	r3, [pc, #152]	; (800a2cc <DRV_updateFromMaster+0x65c>)
 800a232:	781b      	ldrb	r3, [r3, #0]
 800a234:	f083 0301 	eor.w	r3, r3, #1
 800a238:	b2db      	uxtb	r3, r3
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d120      	bne.n	800a280 <DRV_updateFromMaster+0x610>
      ; /* Nothing to do */
    }
    else
    {
      /* Update motors */
      MTR_setSpeed(&g_DRV_motorFrontRight, l_pidSpeedFrontRight);
 800a23e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a240:	f7f6 ff12 	bl	8001068 <__aeabi_f2uiz>
 800a244:	4603      	mov	r3, r0
 800a246:	4619      	mov	r1, r3
 800a248:	4821      	ldr	r0, [pc, #132]	; (800a2d0 <DRV_updateFromMaster+0x660>)
 800a24a:	f000 ff79 	bl	800b140 <MTR_setSpeed>
      MTR_setSpeed(&g_DRV_motorFrontLeft , l_pidSpeedFrontLeft );
 800a24e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a250:	f7f6 ff0a 	bl	8001068 <__aeabi_f2uiz>
 800a254:	4603      	mov	r3, r0
 800a256:	4619      	mov	r1, r3
 800a258:	481e      	ldr	r0, [pc, #120]	; (800a2d4 <DRV_updateFromMaster+0x664>)
 800a25a:	f000 ff71 	bl	800b140 <MTR_setSpeed>
      MTR_setSpeed(&g_DRV_motorRearRight , l_pidSpeedRearRight );
 800a25e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a260:	f7f6 ff02 	bl	8001068 <__aeabi_f2uiz>
 800a264:	4603      	mov	r3, r0
 800a266:	4619      	mov	r1, r3
 800a268:	481b      	ldr	r0, [pc, #108]	; (800a2d8 <DRV_updateFromMaster+0x668>)
 800a26a:	f000 ff69 	bl	800b140 <MTR_setSpeed>
      MTR_setSpeed(&g_DRV_motorRearLeft  , l_pidSpeedRearLeft  );
 800a26e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a270:	f7f6 fefa 	bl	8001068 <__aeabi_f2uiz>
 800a274:	4603      	mov	r3, r0
 800a276:	4619      	mov	r1, r3
 800a278:	4818      	ldr	r0, [pc, #96]	; (800a2dc <DRV_updateFromMaster+0x66c>)
 800a27a:	f000 ff61 	bl	800b140 <MTR_setSpeed>
    }
  }

  return;
 800a27e:	bf00      	nop
 800a280:	bf00      	nop
}
 800a282:	375c      	adds	r7, #92	; 0x5c
 800a284:	46bd      	mov	sp, r7
 800a286:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a288:	0800f3ec 	.word	0x0800f3ec
 800a28c:	200003ac 	.word	0x200003ac
 800a290:	47927c00 	.word	0x47927c00
 800a294:	200003b8 	.word	0x200003b8
 800a298:	200003d0 	.word	0x200003d0
 800a29c:	200003c4 	.word	0x200003c4
 800a2a0:	200003dc 	.word	0x200003dc
 800a2a4:	2000040c 	.word	0x2000040c
 800a2a8:	2000046c 	.word	0x2000046c
 800a2ac:	2000043c 	.word	0x2000043c
 800a2b0:	2000084c 	.word	0x2000084c
 800a2b4:	2000049c 	.word	0x2000049c
 800a2b8:	2000025c 	.word	0x2000025c
 800a2bc:	0800f410 	.word	0x0800f410
 800a2c0:	2000028c 	.word	0x2000028c
 800a2c4:	200002ec 	.word	0x200002ec
 800a2c8:	200002bc 	.word	0x200002bc
 800a2cc:	20000259 	.word	0x20000259
 800a2d0:	2000031c 	.word	0x2000031c
 800a2d4:	20000340 	.word	0x20000340
 800a2d8:	20000388 	.word	0x20000388
 800a2dc:	20000364 	.word	0x20000364

0800a2e0 <DRV_getMode>:

T_DRV_MODE DRV_getMode(void)
{
 800a2e0:	b480      	push	{r7}
 800a2e2:	af00      	add	r7, sp, #0
  return g_DRV_mode;
 800a2e4:	4b02      	ldr	r3, [pc, #8]	; (800a2f0 <DRV_getMode+0x10>)
 800a2e6:	781b      	ldrb	r3, [r3, #0]
}
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	bc80      	pop	{r7}
 800a2ee:	4770      	bx	lr
 800a2f0:	2000025a 	.word	0x2000025a

0800a2f4 <DRV_logInfo>:

void DRV_logInfo(void)
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b084      	sub	sp, #16
 800a2f8:	af02      	add	r7, sp, #8
  T_MTR_DIRECTION l_direction;
  uint32_t        l_speed;

  if (g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED)
 800a2fa:	4b3d      	ldr	r3, [pc, #244]	; (800a3f0 <DRV_logInfo+0xfc>)
 800a2fc:	781b      	ldrb	r3, [r3, #0]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d104      	bne.n	800a30c <DRV_logInfo+0x18>
  {
    LOG_info("Mode  : MANUAL FIXED SPEED");
 800a302:	493c      	ldr	r1, [pc, #240]	; (800a3f4 <DRV_logInfo+0x100>)
 800a304:	2001      	movs	r0, #1
 800a306:	f000 fd51 	bl	800adac <LOG_log>
 800a30a:	e018      	b.n	800a33e <DRV_logInfo+0x4a>
  }
  else if (g_DRV_mode == DRV_MODE_MANUAL_VARIABLE_SPEED)
 800a30c:	4b38      	ldr	r3, [pc, #224]	; (800a3f0 <DRV_logInfo+0xfc>)
 800a30e:	781b      	ldrb	r3, [r3, #0]
 800a310:	2b01      	cmp	r3, #1
 800a312:	d104      	bne.n	800a31e <DRV_logInfo+0x2a>
  {
    LOG_info("Mode  : MANUAL VARIABLE SPEED");
 800a314:	4938      	ldr	r1, [pc, #224]	; (800a3f8 <DRV_logInfo+0x104>)
 800a316:	2001      	movs	r0, #1
 800a318:	f000 fd48 	bl	800adac <LOG_log>
 800a31c:	e00f      	b.n	800a33e <DRV_logInfo+0x4a>
  }
  else if (g_DRV_mode == DRV_MODE_MASTER_BOARD_CONTROL)
 800a31e:	4b34      	ldr	r3, [pc, #208]	; (800a3f0 <DRV_logInfo+0xfc>)
 800a320:	781b      	ldrb	r3, [r3, #0]
 800a322:	2b02      	cmp	r3, #2
 800a324:	d104      	bne.n	800a330 <DRV_logInfo+0x3c>
  {
    LOG_info("Mode  : MASTER BOARD CONTROL");
 800a326:	4935      	ldr	r1, [pc, #212]	; (800a3fc <DRV_logInfo+0x108>)
 800a328:	2001      	movs	r0, #1
 800a32a:	f000 fd3f 	bl	800adac <LOG_log>
 800a32e:	e006      	b.n	800a33e <DRV_logInfo+0x4a>
  }
  else
  {
    LOG_error("Unsupported drive mode: %u", g_DRV_mode);
 800a330:	4b2f      	ldr	r3, [pc, #188]	; (800a3f0 <DRV_logInfo+0xfc>)
 800a332:	781b      	ldrb	r3, [r3, #0]
 800a334:	461a      	mov	r2, r3
 800a336:	4932      	ldr	r1, [pc, #200]	; (800a400 <DRV_logInfo+0x10c>)
 800a338:	2003      	movs	r0, #3
 800a33a:	f000 fd37 	bl	800adac <LOG_log>
  }

  if (g_DRV_areMotorsOn == true)
 800a33e:	4b31      	ldr	r3, [pc, #196]	; (800a404 <DRV_logInfo+0x110>)
 800a340:	781b      	ldrb	r3, [r3, #0]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d004      	beq.n	800a350 <DRV_logInfo+0x5c>
  {
    LOG_info("Motors: ON");
 800a346:	4930      	ldr	r1, [pc, #192]	; (800a408 <DRV_logInfo+0x114>)
 800a348:	2001      	movs	r0, #1
 800a34a:	f000 fd2f 	bl	800adac <LOG_log>
 800a34e:	e003      	b.n	800a358 <DRV_logInfo+0x64>
  }
  else
  {
    LOG_info("Motors: OFF");
 800a350:	492e      	ldr	r1, [pc, #184]	; (800a40c <DRV_logInfo+0x118>)
 800a352:	2001      	movs	r0, #1
 800a354:	f000 fd2a 	bl	800adac <LOG_log>
  }

  l_direction = MTR_getDirection(&g_DRV_motorFrontLeft);
 800a358:	482d      	ldr	r0, [pc, #180]	; (800a410 <DRV_logInfo+0x11c>)
 800a35a:	f000 fee5 	bl	800b128 <MTR_getDirection>
 800a35e:	4603      	mov	r3, r0
 800a360:	71fb      	strb	r3, [r7, #7]
  l_speed     = MTR_getSpeed    (&g_DRV_motorFrontLeft);
 800a362:	482b      	ldr	r0, [pc, #172]	; (800a410 <DRV_logInfo+0x11c>)
 800a364:	f000 ff2a 	bl	800b1bc <MTR_getSpeed>
 800a368:	6038      	str	r0, [r7, #0]

  LOG_info("%s motor direction/speed: %u/%u", DRV_FRONT_LEFT_MOTOR_NAME, l_direction, l_speed);
 800a36a:	79fa      	ldrb	r2, [r7, #7]
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	9300      	str	r3, [sp, #0]
 800a370:	4613      	mov	r3, r2
 800a372:	4a28      	ldr	r2, [pc, #160]	; (800a414 <DRV_logInfo+0x120>)
 800a374:	4928      	ldr	r1, [pc, #160]	; (800a418 <DRV_logInfo+0x124>)
 800a376:	2001      	movs	r0, #1
 800a378:	f000 fd18 	bl	800adac <LOG_log>

  l_direction = MTR_getDirection(&g_DRV_motorFrontRight);
 800a37c:	4827      	ldr	r0, [pc, #156]	; (800a41c <DRV_logInfo+0x128>)
 800a37e:	f000 fed3 	bl	800b128 <MTR_getDirection>
 800a382:	4603      	mov	r3, r0
 800a384:	71fb      	strb	r3, [r7, #7]
  l_speed     = MTR_getSpeed    (&g_DRV_motorFrontRight);
 800a386:	4825      	ldr	r0, [pc, #148]	; (800a41c <DRV_logInfo+0x128>)
 800a388:	f000 ff18 	bl	800b1bc <MTR_getSpeed>
 800a38c:	6038      	str	r0, [r7, #0]

  LOG_info("%s motor direction/speed: %u/%u", DRV_FRONT_RIGHT_MOTOR_NAME, l_direction, l_speed);
 800a38e:	79fa      	ldrb	r2, [r7, #7]
 800a390:	683b      	ldr	r3, [r7, #0]
 800a392:	9300      	str	r3, [sp, #0]
 800a394:	4613      	mov	r3, r2
 800a396:	4a22      	ldr	r2, [pc, #136]	; (800a420 <DRV_logInfo+0x12c>)
 800a398:	491f      	ldr	r1, [pc, #124]	; (800a418 <DRV_logInfo+0x124>)
 800a39a:	2001      	movs	r0, #1
 800a39c:	f000 fd06 	bl	800adac <LOG_log>

  l_direction = MTR_getDirection(&g_DRV_motorRearLeft);
 800a3a0:	4820      	ldr	r0, [pc, #128]	; (800a424 <DRV_logInfo+0x130>)
 800a3a2:	f000 fec1 	bl	800b128 <MTR_getDirection>
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	71fb      	strb	r3, [r7, #7]
  l_speed     = MTR_getSpeed    (&g_DRV_motorRearLeft);
 800a3aa:	481e      	ldr	r0, [pc, #120]	; (800a424 <DRV_logInfo+0x130>)
 800a3ac:	f000 ff06 	bl	800b1bc <MTR_getSpeed>
 800a3b0:	6038      	str	r0, [r7, #0]

  LOG_info("%s motor direction/speed: %u/%u", DRV_REAR_LEFT_MOTOR_NAME, l_direction, l_speed);
 800a3b2:	79fa      	ldrb	r2, [r7, #7]
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	9300      	str	r3, [sp, #0]
 800a3b8:	4613      	mov	r3, r2
 800a3ba:	4a1b      	ldr	r2, [pc, #108]	; (800a428 <DRV_logInfo+0x134>)
 800a3bc:	4916      	ldr	r1, [pc, #88]	; (800a418 <DRV_logInfo+0x124>)
 800a3be:	2001      	movs	r0, #1
 800a3c0:	f000 fcf4 	bl	800adac <LOG_log>

  l_direction = MTR_getDirection(&g_DRV_motorRearRight);
 800a3c4:	4819      	ldr	r0, [pc, #100]	; (800a42c <DRV_logInfo+0x138>)
 800a3c6:	f000 feaf 	bl	800b128 <MTR_getDirection>
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	71fb      	strb	r3, [r7, #7]
  l_speed     = MTR_getSpeed    (&g_DRV_motorRearRight);
 800a3ce:	4817      	ldr	r0, [pc, #92]	; (800a42c <DRV_logInfo+0x138>)
 800a3d0:	f000 fef4 	bl	800b1bc <MTR_getSpeed>
 800a3d4:	6038      	str	r0, [r7, #0]

  LOG_info("%s motor direction/speed: %u/%u", DRV_REAR_RIGHT_MOTOR_NAME, l_direction, l_speed);
 800a3d6:	79fa      	ldrb	r2, [r7, #7]
 800a3d8:	683b      	ldr	r3, [r7, #0]
 800a3da:	9300      	str	r3, [sp, #0]
 800a3dc:	4613      	mov	r3, r2
 800a3de:	4a14      	ldr	r2, [pc, #80]	; (800a430 <DRV_logInfo+0x13c>)
 800a3e0:	490d      	ldr	r1, [pc, #52]	; (800a418 <DRV_logInfo+0x124>)
 800a3e2:	2001      	movs	r0, #1
 800a3e4:	f000 fce2 	bl	800adac <LOG_log>

  return;
 800a3e8:	bf00      	nop
}
 800a3ea:	3708      	adds	r7, #8
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	bd80      	pop	{r7, pc}
 800a3f0:	2000025a 	.word	0x2000025a
 800a3f4:	0800f420 	.word	0x0800f420
 800a3f8:	0800f43c 	.word	0x0800f43c
 800a3fc:	0800f45c 	.word	0x0800f45c
 800a400:	0800f47c 	.word	0x0800f47c
 800a404:	20000259 	.word	0x20000259
 800a408:	0800f498 	.word	0x0800f498
 800a40c:	0800f4a4 	.word	0x0800f4a4
 800a410:	20000340 	.word	0x20000340
 800a414:	0800f2d0 	.word	0x0800f2d0
 800a418:	0800f4b0 	.word	0x0800f4b0
 800a41c:	2000031c 	.word	0x2000031c
 800a420:	0800f2c4 	.word	0x0800f2c4
 800a424:	20000364 	.word	0x20000364
 800a428:	0800f2dc 	.word	0x0800f2dc
 800a42c:	20000388 	.word	0x20000388
 800a430:	0800f2e8 	.word	0x0800f2e8

0800a434 <DRV_setDirectionsStop>:

static void DRV_setDirectionsStop(void)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	af00      	add	r7, sp, #0
  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_STOP);
 800a438:	2100      	movs	r1, #0
 800a43a:	4808      	ldr	r0, [pc, #32]	; (800a45c <DRV_setDirectionsStop+0x28>)
 800a43c:	f000 fe08 	bl	800b050 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorFrontLeft , MTR_DIRECTION_STOP);
 800a440:	2100      	movs	r1, #0
 800a442:	4807      	ldr	r0, [pc, #28]	; (800a460 <DRV_setDirectionsStop+0x2c>)
 800a444:	f000 fe04 	bl	800b050 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight , MTR_DIRECTION_STOP);
 800a448:	2100      	movs	r1, #0
 800a44a:	4806      	ldr	r0, [pc, #24]	; (800a464 <DRV_setDirectionsStop+0x30>)
 800a44c:	f000 fe00 	bl	800b050 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_STOP);
 800a450:	2100      	movs	r1, #0
 800a452:	4805      	ldr	r0, [pc, #20]	; (800a468 <DRV_setDirectionsStop+0x34>)
 800a454:	f000 fdfc 	bl	800b050 <MTR_setDirection>

  return;
 800a458:	bf00      	nop
}
 800a45a:	bd80      	pop	{r7, pc}
 800a45c:	2000031c 	.word	0x2000031c
 800a460:	20000340 	.word	0x20000340
 800a464:	20000388 	.word	0x20000388
 800a468:	20000364 	.word	0x20000364

0800a46c <DRV_setDirectionsForward>:

static void DRV_setDirectionsForward(void)
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	af00      	add	r7, sp, #0
  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_FORWARD);
 800a470:	2101      	movs	r1, #1
 800a472:	4808      	ldr	r0, [pc, #32]	; (800a494 <DRV_setDirectionsForward+0x28>)
 800a474:	f000 fdec 	bl	800b050 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorFrontLeft , MTR_DIRECTION_FORWARD);
 800a478:	2101      	movs	r1, #1
 800a47a:	4807      	ldr	r0, [pc, #28]	; (800a498 <DRV_setDirectionsForward+0x2c>)
 800a47c:	f000 fde8 	bl	800b050 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight , MTR_DIRECTION_FORWARD);
 800a480:	2101      	movs	r1, #1
 800a482:	4806      	ldr	r0, [pc, #24]	; (800a49c <DRV_setDirectionsForward+0x30>)
 800a484:	f000 fde4 	bl	800b050 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_FORWARD);
 800a488:	2101      	movs	r1, #1
 800a48a:	4805      	ldr	r0, [pc, #20]	; (800a4a0 <DRV_setDirectionsForward+0x34>)
 800a48c:	f000 fde0 	bl	800b050 <MTR_setDirection>

  return;
 800a490:	bf00      	nop
}
 800a492:	bd80      	pop	{r7, pc}
 800a494:	2000031c 	.word	0x2000031c
 800a498:	20000340 	.word	0x20000340
 800a49c:	20000388 	.word	0x20000388
 800a4a0:	20000364 	.word	0x20000364

0800a4a4 <DRV_setDirectionsBackward>:

static void DRV_setDirectionsBackward(void)
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	af00      	add	r7, sp, #0
  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_BACKWARD);
 800a4a8:	2102      	movs	r1, #2
 800a4aa:	4808      	ldr	r0, [pc, #32]	; (800a4cc <DRV_setDirectionsBackward+0x28>)
 800a4ac:	f000 fdd0 	bl	800b050 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorFrontLeft , MTR_DIRECTION_BACKWARD);
 800a4b0:	2102      	movs	r1, #2
 800a4b2:	4807      	ldr	r0, [pc, #28]	; (800a4d0 <DRV_setDirectionsBackward+0x2c>)
 800a4b4:	f000 fdcc 	bl	800b050 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight , MTR_DIRECTION_BACKWARD);
 800a4b8:	2102      	movs	r1, #2
 800a4ba:	4806      	ldr	r0, [pc, #24]	; (800a4d4 <DRV_setDirectionsBackward+0x30>)
 800a4bc:	f000 fdc8 	bl	800b050 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_BACKWARD);
 800a4c0:	2102      	movs	r1, #2
 800a4c2:	4805      	ldr	r0, [pc, #20]	; (800a4d8 <DRV_setDirectionsBackward+0x34>)
 800a4c4:	f000 fdc4 	bl	800b050 <MTR_setDirection>

  return;
 800a4c8:	bf00      	nop
}
 800a4ca:	bd80      	pop	{r7, pc}
 800a4cc:	2000031c 	.word	0x2000031c
 800a4d0:	20000340 	.word	0x20000340
 800a4d4:	20000388 	.word	0x20000388
 800a4d8:	20000364 	.word	0x20000364

0800a4dc <DRV_setDirectionsForwardRight>:

static void DRV_setDirectionsForwardRight(void)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	af00      	add	r7, sp, #0
  MTR_setDirection(&g_DRV_motorFrontLeft, MTR_DIRECTION_FORWARD);
 800a4e0:	2101      	movs	r1, #1
 800a4e2:	4804      	ldr	r0, [pc, #16]	; (800a4f4 <DRV_setDirectionsForwardRight+0x18>)
 800a4e4:	f000 fdb4 	bl	800b050 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight, MTR_DIRECTION_FORWARD);
 800a4e8:	2101      	movs	r1, #1
 800a4ea:	4803      	ldr	r0, [pc, #12]	; (800a4f8 <DRV_setDirectionsForwardRight+0x1c>)
 800a4ec:	f000 fdb0 	bl	800b050 <MTR_setDirection>

  return;
 800a4f0:	bf00      	nop
}
 800a4f2:	bd80      	pop	{r7, pc}
 800a4f4:	20000340 	.word	0x20000340
 800a4f8:	20000388 	.word	0x20000388

0800a4fc <DRV_setDirectionsForwardLeft>:

static void DRV_setDirectionsForwardLeft(void)
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	af00      	add	r7, sp, #0
  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_FORWARD);
 800a500:	2101      	movs	r1, #1
 800a502:	4804      	ldr	r0, [pc, #16]	; (800a514 <DRV_setDirectionsForwardLeft+0x18>)
 800a504:	f000 fda4 	bl	800b050 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_FORWARD);
 800a508:	2101      	movs	r1, #1
 800a50a:	4803      	ldr	r0, [pc, #12]	; (800a518 <DRV_setDirectionsForwardLeft+0x1c>)
 800a50c:	f000 fda0 	bl	800b050 <MTR_setDirection>

  return;
 800a510:	bf00      	nop
}
 800a512:	bd80      	pop	{r7, pc}
 800a514:	2000031c 	.word	0x2000031c
 800a518:	20000364 	.word	0x20000364

0800a51c <DRV_setDirectionsBackwardRight>:

static void DRV_setDirectionsBackwardRight(void)
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	af00      	add	r7, sp, #0
  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_BACKWARD);
 800a520:	2102      	movs	r1, #2
 800a522:	4804      	ldr	r0, [pc, #16]	; (800a534 <DRV_setDirectionsBackwardRight+0x18>)
 800a524:	f000 fd94 	bl	800b050 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_BACKWARD);
 800a528:	2102      	movs	r1, #2
 800a52a:	4803      	ldr	r0, [pc, #12]	; (800a538 <DRV_setDirectionsBackwardRight+0x1c>)
 800a52c:	f000 fd90 	bl	800b050 <MTR_setDirection>

  return;
 800a530:	bf00      	nop
}
 800a532:	bd80      	pop	{r7, pc}
 800a534:	2000031c 	.word	0x2000031c
 800a538:	20000364 	.word	0x20000364

0800a53c <DRV_setDirectionsBackwardLeft>:

static void DRV_setDirectionsBackwardLeft(void)
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	af00      	add	r7, sp, #0
  MTR_setDirection(&g_DRV_motorFrontLeft, MTR_DIRECTION_BACKWARD);
 800a540:	2102      	movs	r1, #2
 800a542:	4804      	ldr	r0, [pc, #16]	; (800a554 <DRV_setDirectionsBackwardLeft+0x18>)
 800a544:	f000 fd84 	bl	800b050 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight, MTR_DIRECTION_BACKWARD);
 800a548:	2102      	movs	r1, #2
 800a54a:	4803      	ldr	r0, [pc, #12]	; (800a558 <DRV_setDirectionsBackwardLeft+0x1c>)
 800a54c:	f000 fd80 	bl	800b050 <MTR_setDirection>

  return;
 800a550:	bf00      	nop
}
 800a552:	bd80      	pop	{r7, pc}
 800a554:	20000340 	.word	0x20000340
 800a558:	20000388 	.word	0x20000388

0800a55c <DRV_setDirectionsTurnLeft>:

static void DRV_setDirectionsTurnLeft(void)
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	af00      	add	r7, sp, #0
  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_FORWARD );
 800a560:	2101      	movs	r1, #1
 800a562:	4808      	ldr	r0, [pc, #32]	; (800a584 <DRV_setDirectionsTurnLeft+0x28>)
 800a564:	f000 fd74 	bl	800b050 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorFrontLeft , MTR_DIRECTION_BACKWARD);
 800a568:	2102      	movs	r1, #2
 800a56a:	4807      	ldr	r0, [pc, #28]	; (800a588 <DRV_setDirectionsTurnLeft+0x2c>)
 800a56c:	f000 fd70 	bl	800b050 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight , MTR_DIRECTION_FORWARD );
 800a570:	2101      	movs	r1, #1
 800a572:	4806      	ldr	r0, [pc, #24]	; (800a58c <DRV_setDirectionsTurnLeft+0x30>)
 800a574:	f000 fd6c 	bl	800b050 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_BACKWARD);
 800a578:	2102      	movs	r1, #2
 800a57a:	4805      	ldr	r0, [pc, #20]	; (800a590 <DRV_setDirectionsTurnLeft+0x34>)
 800a57c:	f000 fd68 	bl	800b050 <MTR_setDirection>

  return;
 800a580:	bf00      	nop
}
 800a582:	bd80      	pop	{r7, pc}
 800a584:	2000031c 	.word	0x2000031c
 800a588:	20000340 	.word	0x20000340
 800a58c:	20000388 	.word	0x20000388
 800a590:	20000364 	.word	0x20000364

0800a594 <DRV_setDirectionsTurnRight>:

static void DRV_setDirectionsTurnRight(void)
{
 800a594:	b580      	push	{r7, lr}
 800a596:	af00      	add	r7, sp, #0
  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_BACKWARD);
 800a598:	2102      	movs	r1, #2
 800a59a:	4808      	ldr	r0, [pc, #32]	; (800a5bc <DRV_setDirectionsTurnRight+0x28>)
 800a59c:	f000 fd58 	bl	800b050 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorFrontLeft , MTR_DIRECTION_FORWARD );
 800a5a0:	2101      	movs	r1, #1
 800a5a2:	4807      	ldr	r0, [pc, #28]	; (800a5c0 <DRV_setDirectionsTurnRight+0x2c>)
 800a5a4:	f000 fd54 	bl	800b050 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight , MTR_DIRECTION_BACKWARD);
 800a5a8:	2102      	movs	r1, #2
 800a5aa:	4806      	ldr	r0, [pc, #24]	; (800a5c4 <DRV_setDirectionsTurnRight+0x30>)
 800a5ac:	f000 fd50 	bl	800b050 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_FORWARD );
 800a5b0:	2101      	movs	r1, #1
 800a5b2:	4805      	ldr	r0, [pc, #20]	; (800a5c8 <DRV_setDirectionsTurnRight+0x34>)
 800a5b4:	f000 fd4c 	bl	800b050 <MTR_setDirection>

  return;
 800a5b8:	bf00      	nop
}
 800a5ba:	bd80      	pop	{r7, pc}
 800a5bc:	2000031c 	.word	0x2000031c
 800a5c0:	20000340 	.word	0x20000340
 800a5c4:	20000388 	.word	0x20000388
 800a5c8:	20000364 	.word	0x20000364

0800a5cc <DRV_setDirectionsTranslateLeft>:

static void DRV_setDirectionsTranslateLeft(void)
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	af00      	add	r7, sp, #0
  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_FORWARD );
 800a5d0:	2101      	movs	r1, #1
 800a5d2:	4808      	ldr	r0, [pc, #32]	; (800a5f4 <DRV_setDirectionsTranslateLeft+0x28>)
 800a5d4:	f000 fd3c 	bl	800b050 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorFrontLeft , MTR_DIRECTION_BACKWARD);
 800a5d8:	2102      	movs	r1, #2
 800a5da:	4807      	ldr	r0, [pc, #28]	; (800a5f8 <DRV_setDirectionsTranslateLeft+0x2c>)
 800a5dc:	f000 fd38 	bl	800b050 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight , MTR_DIRECTION_BACKWARD);
 800a5e0:	2102      	movs	r1, #2
 800a5e2:	4806      	ldr	r0, [pc, #24]	; (800a5fc <DRV_setDirectionsTranslateLeft+0x30>)
 800a5e4:	f000 fd34 	bl	800b050 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_FORWARD );
 800a5e8:	2101      	movs	r1, #1
 800a5ea:	4805      	ldr	r0, [pc, #20]	; (800a600 <DRV_setDirectionsTranslateLeft+0x34>)
 800a5ec:	f000 fd30 	bl	800b050 <MTR_setDirection>

  return;
 800a5f0:	bf00      	nop
}
 800a5f2:	bd80      	pop	{r7, pc}
 800a5f4:	2000031c 	.word	0x2000031c
 800a5f8:	20000340 	.word	0x20000340
 800a5fc:	20000388 	.word	0x20000388
 800a600:	20000364 	.word	0x20000364

0800a604 <DRV_setDirectionsTranslateRight>:

static void DRV_setDirectionsTranslateRight(void)
{
 800a604:	b580      	push	{r7, lr}
 800a606:	af00      	add	r7, sp, #0
  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_BACKWARD);
 800a608:	2102      	movs	r1, #2
 800a60a:	4808      	ldr	r0, [pc, #32]	; (800a62c <DRV_setDirectionsTranslateRight+0x28>)
 800a60c:	f000 fd20 	bl	800b050 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorFrontLeft , MTR_DIRECTION_FORWARD );
 800a610:	2101      	movs	r1, #1
 800a612:	4807      	ldr	r0, [pc, #28]	; (800a630 <DRV_setDirectionsTranslateRight+0x2c>)
 800a614:	f000 fd1c 	bl	800b050 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight , MTR_DIRECTION_FORWARD );
 800a618:	2101      	movs	r1, #1
 800a61a:	4806      	ldr	r0, [pc, #24]	; (800a634 <DRV_setDirectionsTranslateRight+0x30>)
 800a61c:	f000 fd18 	bl	800b050 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_BACKWARD);
 800a620:	2102      	movs	r1, #2
 800a622:	4805      	ldr	r0, [pc, #20]	; (800a638 <DRV_setDirectionsTranslateRight+0x34>)
 800a624:	f000 fd14 	bl	800b050 <MTR_setDirection>

  return;
 800a628:	bf00      	nop
}
 800a62a:	bd80      	pop	{r7, pc}
 800a62c:	2000031c 	.word	0x2000031c
 800a630:	20000340 	.word	0x20000340
 800a634:	20000388 	.word	0x20000388
 800a638:	20000364 	.word	0x20000364

0800a63c <DRV_stop>:

static void DRV_stop(void)
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	af00      	add	r7, sp, #0
  DRV_setDirectionsStop();
 800a640:	f7ff fef8 	bl	800a434 <DRV_setDirectionsStop>

  MTR_setSpeed(&g_DRV_motorFrontRight, 0);
 800a644:	2100      	movs	r1, #0
 800a646:	4808      	ldr	r0, [pc, #32]	; (800a668 <DRV_stop+0x2c>)
 800a648:	f000 fd7a 	bl	800b140 <MTR_setSpeed>
  MTR_setSpeed(&g_DRV_motorFrontLeft , 0);
 800a64c:	2100      	movs	r1, #0
 800a64e:	4807      	ldr	r0, [pc, #28]	; (800a66c <DRV_stop+0x30>)
 800a650:	f000 fd76 	bl	800b140 <MTR_setSpeed>
  MTR_setSpeed(&g_DRV_motorRearRight , 0);
 800a654:	2100      	movs	r1, #0
 800a656:	4806      	ldr	r0, [pc, #24]	; (800a670 <DRV_stop+0x34>)
 800a658:	f000 fd72 	bl	800b140 <MTR_setSpeed>
  MTR_setSpeed(&g_DRV_motorRearLeft  , 0);
 800a65c:	2100      	movs	r1, #0
 800a65e:	4805      	ldr	r0, [pc, #20]	; (800a674 <DRV_stop+0x38>)
 800a660:	f000 fd6e 	bl	800b140 <MTR_setSpeed>

  return;
 800a664:	bf00      	nop
}
 800a666:	bd80      	pop	{r7, pc}
 800a668:	2000031c 	.word	0x2000031c
 800a66c:	20000340 	.word	0x20000340
 800a670:	20000388 	.word	0x20000388
 800a674:	20000364 	.word	0x20000364

0800a678 <DRV_moveForward>:

static void DRV_moveForward(uint32_t p_speed)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b084      	sub	sp, #16
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	60fb      	str	r3, [r7, #12]

  LOG_debug("Moving forward @%u", l_speed);
 800a684:	68fa      	ldr	r2, [r7, #12]
 800a686:	4911      	ldr	r1, [pc, #68]	; (800a6cc <DRV_moveForward+0x54>)
 800a688:	2000      	movs	r0, #0
 800a68a:	f000 fb8f 	bl	800adac <LOG_log>

  DRV_setDirectionsForward();
 800a68e:	f7ff feed 	bl	800a46c <DRV_setDirectionsForward>

  if (g_DRV_areMotorsOn == false)
 800a692:	4b0f      	ldr	r3, [pc, #60]	; (800a6d0 <DRV_moveForward+0x58>)
 800a694:	781b      	ldrb	r3, [r3, #0]
 800a696:	f083 0301 	eor.w	r3, r3, #1
 800a69a:	b2db      	uxtb	r3, r3
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d110      	bne.n	800a6c2 <DRV_moveForward+0x4a>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 800a6a0:	68f9      	ldr	r1, [r7, #12]
 800a6a2:	480c      	ldr	r0, [pc, #48]	; (800a6d4 <DRV_moveForward+0x5c>)
 800a6a4:	f000 fd4c 	bl	800b140 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 800a6a8:	68f9      	ldr	r1, [r7, #12]
 800a6aa:	480b      	ldr	r0, [pc, #44]	; (800a6d8 <DRV_moveForward+0x60>)
 800a6ac:	f000 fd48 	bl	800b140 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 800a6b0:	68f9      	ldr	r1, [r7, #12]
 800a6b2:	480a      	ldr	r0, [pc, #40]	; (800a6dc <DRV_moveForward+0x64>)
 800a6b4:	f000 fd44 	bl	800b140 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 800a6b8:	68f9      	ldr	r1, [r7, #12]
 800a6ba:	4809      	ldr	r0, [pc, #36]	; (800a6e0 <DRV_moveForward+0x68>)
 800a6bc:	f000 fd40 	bl	800b140 <MTR_setSpeed>
  }

  return;
 800a6c0:	bf00      	nop
 800a6c2:	bf00      	nop
}
 800a6c4:	3710      	adds	r7, #16
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	bd80      	pop	{r7, pc}
 800a6ca:	bf00      	nop
 800a6cc:	0800f4d0 	.word	0x0800f4d0
 800a6d0:	20000259 	.word	0x20000259
 800a6d4:	2000031c 	.word	0x2000031c
 800a6d8:	20000340 	.word	0x20000340
 800a6dc:	20000388 	.word	0x20000388
 800a6e0:	20000364 	.word	0x20000364

0800a6e4 <DRV_moveBackward>:

static void DRV_moveBackward(uint32_t p_speed)
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b084      	sub	sp, #16
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	60fb      	str	r3, [r7, #12]

  LOG_debug("Moving backward @%u", l_speed);
 800a6f0:	68fa      	ldr	r2, [r7, #12]
 800a6f2:	4911      	ldr	r1, [pc, #68]	; (800a738 <DRV_moveBackward+0x54>)
 800a6f4:	2000      	movs	r0, #0
 800a6f6:	f000 fb59 	bl	800adac <LOG_log>

  DRV_setDirectionsBackward();
 800a6fa:	f7ff fed3 	bl	800a4a4 <DRV_setDirectionsBackward>

  if (g_DRV_areMotorsOn == false)
 800a6fe:	4b0f      	ldr	r3, [pc, #60]	; (800a73c <DRV_moveBackward+0x58>)
 800a700:	781b      	ldrb	r3, [r3, #0]
 800a702:	f083 0301 	eor.w	r3, r3, #1
 800a706:	b2db      	uxtb	r3, r3
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d110      	bne.n	800a72e <DRV_moveBackward+0x4a>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 800a70c:	68f9      	ldr	r1, [r7, #12]
 800a70e:	480c      	ldr	r0, [pc, #48]	; (800a740 <DRV_moveBackward+0x5c>)
 800a710:	f000 fd16 	bl	800b140 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 800a714:	68f9      	ldr	r1, [r7, #12]
 800a716:	480b      	ldr	r0, [pc, #44]	; (800a744 <DRV_moveBackward+0x60>)
 800a718:	f000 fd12 	bl	800b140 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 800a71c:	68f9      	ldr	r1, [r7, #12]
 800a71e:	480a      	ldr	r0, [pc, #40]	; (800a748 <DRV_moveBackward+0x64>)
 800a720:	f000 fd0e 	bl	800b140 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 800a724:	68f9      	ldr	r1, [r7, #12]
 800a726:	4809      	ldr	r0, [pc, #36]	; (800a74c <DRV_moveBackward+0x68>)
 800a728:	f000 fd0a 	bl	800b140 <MTR_setSpeed>
  }

  return;
 800a72c:	bf00      	nop
 800a72e:	bf00      	nop
}
 800a730:	3710      	adds	r7, #16
 800a732:	46bd      	mov	sp, r7
 800a734:	bd80      	pop	{r7, pc}
 800a736:	bf00      	nop
 800a738:	0800f4e4 	.word	0x0800f4e4
 800a73c:	20000259 	.word	0x20000259
 800a740:	2000031c 	.word	0x2000031c
 800a744:	20000340 	.word	0x20000340
 800a748:	20000388 	.word	0x20000388
 800a74c:	20000364 	.word	0x20000364

0800a750 <DRV_moveForwardRight>:

static void DRV_moveForwardRight(uint32_t p_speed)
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b084      	sub	sp, #16
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	60fb      	str	r3, [r7, #12]

  LOG_debug("Moving forward-right @%u", l_speed);
 800a75c:	68fa      	ldr	r2, [r7, #12]
 800a75e:	4911      	ldr	r1, [pc, #68]	; (800a7a4 <DRV_moveForwardRight+0x54>)
 800a760:	2000      	movs	r0, #0
 800a762:	f000 fb23 	bl	800adac <LOG_log>

  DRV_setDirectionsForwardRight();
 800a766:	f7ff feb9 	bl	800a4dc <DRV_setDirectionsForwardRight>

  if (g_DRV_areMotorsOn == false)
 800a76a:	4b0f      	ldr	r3, [pc, #60]	; (800a7a8 <DRV_moveForwardRight+0x58>)
 800a76c:	781b      	ldrb	r3, [r3, #0]
 800a76e:	f083 0301 	eor.w	r3, r3, #1
 800a772:	b2db      	uxtb	r3, r3
 800a774:	2b00      	cmp	r3, #0
 800a776:	d110      	bne.n	800a79a <DRV_moveForwardRight+0x4a>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight,       0);
 800a778:	2100      	movs	r1, #0
 800a77a:	480c      	ldr	r0, [pc, #48]	; (800a7ac <DRV_moveForwardRight+0x5c>)
 800a77c:	f000 fce0 	bl	800b140 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 800a780:	68f9      	ldr	r1, [r7, #12]
 800a782:	480b      	ldr	r0, [pc, #44]	; (800a7b0 <DRV_moveForwardRight+0x60>)
 800a784:	f000 fcdc 	bl	800b140 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 800a788:	68f9      	ldr	r1, [r7, #12]
 800a78a:	480a      	ldr	r0, [pc, #40]	; (800a7b4 <DRV_moveForwardRight+0x64>)
 800a78c:	f000 fcd8 	bl	800b140 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  ,       0);
 800a790:	2100      	movs	r1, #0
 800a792:	4809      	ldr	r0, [pc, #36]	; (800a7b8 <DRV_moveForwardRight+0x68>)
 800a794:	f000 fcd4 	bl	800b140 <MTR_setSpeed>
  }

  return;
 800a798:	bf00      	nop
 800a79a:	bf00      	nop
}
 800a79c:	3710      	adds	r7, #16
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	bd80      	pop	{r7, pc}
 800a7a2:	bf00      	nop
 800a7a4:	0800f4f8 	.word	0x0800f4f8
 800a7a8:	20000259 	.word	0x20000259
 800a7ac:	2000031c 	.word	0x2000031c
 800a7b0:	20000340 	.word	0x20000340
 800a7b4:	20000388 	.word	0x20000388
 800a7b8:	20000364 	.word	0x20000364

0800a7bc <DRV_moveForwardLeft>:

static void DRV_moveForwardLeft(uint32_t p_speed)
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b084      	sub	sp, #16
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	60fb      	str	r3, [r7, #12]

  LOG_debug("Moving forward-left @%u", l_speed);
 800a7c8:	68fa      	ldr	r2, [r7, #12]
 800a7ca:	4911      	ldr	r1, [pc, #68]	; (800a810 <DRV_moveForwardLeft+0x54>)
 800a7cc:	2000      	movs	r0, #0
 800a7ce:	f000 faed 	bl	800adac <LOG_log>

  DRV_setDirectionsForwardLeft();
 800a7d2:	f7ff fe93 	bl	800a4fc <DRV_setDirectionsForwardLeft>

  if (g_DRV_areMotorsOn == false)
 800a7d6:	4b0f      	ldr	r3, [pc, #60]	; (800a814 <DRV_moveForwardLeft+0x58>)
 800a7d8:	781b      	ldrb	r3, [r3, #0]
 800a7da:	f083 0301 	eor.w	r3, r3, #1
 800a7de:	b2db      	uxtb	r3, r3
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d110      	bne.n	800a806 <DRV_moveForwardLeft+0x4a>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 800a7e4:	68f9      	ldr	r1, [r7, #12]
 800a7e6:	480c      	ldr	r0, [pc, #48]	; (800a818 <DRV_moveForwardLeft+0x5c>)
 800a7e8:	f000 fcaa 	bl	800b140 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft ,       0);
 800a7ec:	2100      	movs	r1, #0
 800a7ee:	480b      	ldr	r0, [pc, #44]	; (800a81c <DRV_moveForwardLeft+0x60>)
 800a7f0:	f000 fca6 	bl	800b140 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight ,       0);
 800a7f4:	2100      	movs	r1, #0
 800a7f6:	480a      	ldr	r0, [pc, #40]	; (800a820 <DRV_moveForwardLeft+0x64>)
 800a7f8:	f000 fca2 	bl	800b140 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 800a7fc:	68f9      	ldr	r1, [r7, #12]
 800a7fe:	4809      	ldr	r0, [pc, #36]	; (800a824 <DRV_moveForwardLeft+0x68>)
 800a800:	f000 fc9e 	bl	800b140 <MTR_setSpeed>
  }

  return;
 800a804:	bf00      	nop
 800a806:	bf00      	nop
}
 800a808:	3710      	adds	r7, #16
 800a80a:	46bd      	mov	sp, r7
 800a80c:	bd80      	pop	{r7, pc}
 800a80e:	bf00      	nop
 800a810:	0800f514 	.word	0x0800f514
 800a814:	20000259 	.word	0x20000259
 800a818:	2000031c 	.word	0x2000031c
 800a81c:	20000340 	.word	0x20000340
 800a820:	20000388 	.word	0x20000388
 800a824:	20000364 	.word	0x20000364

0800a828 <DRV_moveBackwardRight>:

static void DRV_moveBackwardRight(uint32_t p_speed)
{
 800a828:	b580      	push	{r7, lr}
 800a82a:	b084      	sub	sp, #16
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	60fb      	str	r3, [r7, #12]

  LOG_debug("Moving backward-right @%u", l_speed);
 800a834:	68fa      	ldr	r2, [r7, #12]
 800a836:	4911      	ldr	r1, [pc, #68]	; (800a87c <DRV_moveBackwardRight+0x54>)
 800a838:	2000      	movs	r0, #0
 800a83a:	f000 fab7 	bl	800adac <LOG_log>

  DRV_setDirectionsBackwardRight();
 800a83e:	f7ff fe6d 	bl	800a51c <DRV_setDirectionsBackwardRight>

  if (g_DRV_areMotorsOn == false)
 800a842:	4b0f      	ldr	r3, [pc, #60]	; (800a880 <DRV_moveBackwardRight+0x58>)
 800a844:	781b      	ldrb	r3, [r3, #0]
 800a846:	f083 0301 	eor.w	r3, r3, #1
 800a84a:	b2db      	uxtb	r3, r3
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d110      	bne.n	800a872 <DRV_moveBackwardRight+0x4a>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 800a850:	68f9      	ldr	r1, [r7, #12]
 800a852:	480c      	ldr	r0, [pc, #48]	; (800a884 <DRV_moveBackwardRight+0x5c>)
 800a854:	f000 fc74 	bl	800b140 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft ,       0);
 800a858:	2100      	movs	r1, #0
 800a85a:	480b      	ldr	r0, [pc, #44]	; (800a888 <DRV_moveBackwardRight+0x60>)
 800a85c:	f000 fc70 	bl	800b140 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight ,       0);
 800a860:	2100      	movs	r1, #0
 800a862:	480a      	ldr	r0, [pc, #40]	; (800a88c <DRV_moveBackwardRight+0x64>)
 800a864:	f000 fc6c 	bl	800b140 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 800a868:	68f9      	ldr	r1, [r7, #12]
 800a86a:	4809      	ldr	r0, [pc, #36]	; (800a890 <DRV_moveBackwardRight+0x68>)
 800a86c:	f000 fc68 	bl	800b140 <MTR_setSpeed>
  }

  return;
 800a870:	bf00      	nop
 800a872:	bf00      	nop
}
 800a874:	3710      	adds	r7, #16
 800a876:	46bd      	mov	sp, r7
 800a878:	bd80      	pop	{r7, pc}
 800a87a:	bf00      	nop
 800a87c:	0800f52c 	.word	0x0800f52c
 800a880:	20000259 	.word	0x20000259
 800a884:	2000031c 	.word	0x2000031c
 800a888:	20000340 	.word	0x20000340
 800a88c:	20000388 	.word	0x20000388
 800a890:	20000364 	.word	0x20000364

0800a894 <DRV_moveBackwardLeft>:

static void DRV_moveBackwardLeft(uint32_t p_speed)
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b084      	sub	sp, #16
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	60fb      	str	r3, [r7, #12]

  LOG_debug("Moving backward-left @%u", l_speed);
 800a8a0:	68fa      	ldr	r2, [r7, #12]
 800a8a2:	4911      	ldr	r1, [pc, #68]	; (800a8e8 <DRV_moveBackwardLeft+0x54>)
 800a8a4:	2000      	movs	r0, #0
 800a8a6:	f000 fa81 	bl	800adac <LOG_log>

  DRV_setDirectionsBackwardLeft();
 800a8aa:	f7ff fe47 	bl	800a53c <DRV_setDirectionsBackwardLeft>

  if (g_DRV_areMotorsOn == false)
 800a8ae:	4b0f      	ldr	r3, [pc, #60]	; (800a8ec <DRV_moveBackwardLeft+0x58>)
 800a8b0:	781b      	ldrb	r3, [r3, #0]
 800a8b2:	f083 0301 	eor.w	r3, r3, #1
 800a8b6:	b2db      	uxtb	r3, r3
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d110      	bne.n	800a8de <DRV_moveBackwardLeft+0x4a>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight,       0);
 800a8bc:	2100      	movs	r1, #0
 800a8be:	480c      	ldr	r0, [pc, #48]	; (800a8f0 <DRV_moveBackwardLeft+0x5c>)
 800a8c0:	f000 fc3e 	bl	800b140 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 800a8c4:	68f9      	ldr	r1, [r7, #12]
 800a8c6:	480b      	ldr	r0, [pc, #44]	; (800a8f4 <DRV_moveBackwardLeft+0x60>)
 800a8c8:	f000 fc3a 	bl	800b140 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 800a8cc:	68f9      	ldr	r1, [r7, #12]
 800a8ce:	480a      	ldr	r0, [pc, #40]	; (800a8f8 <DRV_moveBackwardLeft+0x64>)
 800a8d0:	f000 fc36 	bl	800b140 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  ,       0);
 800a8d4:	2100      	movs	r1, #0
 800a8d6:	4809      	ldr	r0, [pc, #36]	; (800a8fc <DRV_moveBackwardLeft+0x68>)
 800a8d8:	f000 fc32 	bl	800b140 <MTR_setSpeed>
  }

  return;
 800a8dc:	bf00      	nop
 800a8de:	bf00      	nop
}
 800a8e0:	3710      	adds	r7, #16
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	bd80      	pop	{r7, pc}
 800a8e6:	bf00      	nop
 800a8e8:	0800f548 	.word	0x0800f548
 800a8ec:	20000259 	.word	0x20000259
 800a8f0:	2000031c 	.word	0x2000031c
 800a8f4:	20000340 	.word	0x20000340
 800a8f8:	20000388 	.word	0x20000388
 800a8fc:	20000364 	.word	0x20000364

0800a900 <DRV_turnLeft>:

static void DRV_turnLeft(uint32_t p_speed)
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b084      	sub	sp, #16
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	60fb      	str	r3, [r7, #12]

  LOG_debug("Turning left @%u", l_speed);
 800a90c:	68fa      	ldr	r2, [r7, #12]
 800a90e:	4911      	ldr	r1, [pc, #68]	; (800a954 <DRV_turnLeft+0x54>)
 800a910:	2000      	movs	r0, #0
 800a912:	f000 fa4b 	bl	800adac <LOG_log>

  DRV_setDirectionsTurnLeft();
 800a916:	f7ff fe21 	bl	800a55c <DRV_setDirectionsTurnLeft>

  if (g_DRV_areMotorsOn == false)
 800a91a:	4b0f      	ldr	r3, [pc, #60]	; (800a958 <DRV_turnLeft+0x58>)
 800a91c:	781b      	ldrb	r3, [r3, #0]
 800a91e:	f083 0301 	eor.w	r3, r3, #1
 800a922:	b2db      	uxtb	r3, r3
 800a924:	2b00      	cmp	r3, #0
 800a926:	d110      	bne.n	800a94a <DRV_turnLeft+0x4a>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 800a928:	68f9      	ldr	r1, [r7, #12]
 800a92a:	480c      	ldr	r0, [pc, #48]	; (800a95c <DRV_turnLeft+0x5c>)
 800a92c:	f000 fc08 	bl	800b140 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 800a930:	68f9      	ldr	r1, [r7, #12]
 800a932:	480b      	ldr	r0, [pc, #44]	; (800a960 <DRV_turnLeft+0x60>)
 800a934:	f000 fc04 	bl	800b140 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 800a938:	68f9      	ldr	r1, [r7, #12]
 800a93a:	480a      	ldr	r0, [pc, #40]	; (800a964 <DRV_turnLeft+0x64>)
 800a93c:	f000 fc00 	bl	800b140 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 800a940:	68f9      	ldr	r1, [r7, #12]
 800a942:	4809      	ldr	r0, [pc, #36]	; (800a968 <DRV_turnLeft+0x68>)
 800a944:	f000 fbfc 	bl	800b140 <MTR_setSpeed>
  }

  return;
 800a948:	bf00      	nop
 800a94a:	bf00      	nop
}
 800a94c:	3710      	adds	r7, #16
 800a94e:	46bd      	mov	sp, r7
 800a950:	bd80      	pop	{r7, pc}
 800a952:	bf00      	nop
 800a954:	0800f564 	.word	0x0800f564
 800a958:	20000259 	.word	0x20000259
 800a95c:	2000031c 	.word	0x2000031c
 800a960:	20000340 	.word	0x20000340
 800a964:	20000388 	.word	0x20000388
 800a968:	20000364 	.word	0x20000364

0800a96c <DRV_turnRight>:

static void DRV_turnRight(uint32_t p_speed)
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b084      	sub	sp, #16
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	60fb      	str	r3, [r7, #12]

  LOG_debug("Turning right @%u", l_speed);
 800a978:	68fa      	ldr	r2, [r7, #12]
 800a97a:	4911      	ldr	r1, [pc, #68]	; (800a9c0 <DRV_turnRight+0x54>)
 800a97c:	2000      	movs	r0, #0
 800a97e:	f000 fa15 	bl	800adac <LOG_log>

  DRV_setDirectionsTurnRight();
 800a982:	f7ff fe07 	bl	800a594 <DRV_setDirectionsTurnRight>

  if (g_DRV_areMotorsOn == false)
 800a986:	4b0f      	ldr	r3, [pc, #60]	; (800a9c4 <DRV_turnRight+0x58>)
 800a988:	781b      	ldrb	r3, [r3, #0]
 800a98a:	f083 0301 	eor.w	r3, r3, #1
 800a98e:	b2db      	uxtb	r3, r3
 800a990:	2b00      	cmp	r3, #0
 800a992:	d110      	bne.n	800a9b6 <DRV_turnRight+0x4a>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 800a994:	68f9      	ldr	r1, [r7, #12]
 800a996:	480c      	ldr	r0, [pc, #48]	; (800a9c8 <DRV_turnRight+0x5c>)
 800a998:	f000 fbd2 	bl	800b140 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 800a99c:	68f9      	ldr	r1, [r7, #12]
 800a99e:	480b      	ldr	r0, [pc, #44]	; (800a9cc <DRV_turnRight+0x60>)
 800a9a0:	f000 fbce 	bl	800b140 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 800a9a4:	68f9      	ldr	r1, [r7, #12]
 800a9a6:	480a      	ldr	r0, [pc, #40]	; (800a9d0 <DRV_turnRight+0x64>)
 800a9a8:	f000 fbca 	bl	800b140 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 800a9ac:	68f9      	ldr	r1, [r7, #12]
 800a9ae:	4809      	ldr	r0, [pc, #36]	; (800a9d4 <DRV_turnRight+0x68>)
 800a9b0:	f000 fbc6 	bl	800b140 <MTR_setSpeed>
  }

  return;
 800a9b4:	bf00      	nop
 800a9b6:	bf00      	nop
}
 800a9b8:	3710      	adds	r7, #16
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	bd80      	pop	{r7, pc}
 800a9be:	bf00      	nop
 800a9c0:	0800f578 	.word	0x0800f578
 800a9c4:	20000259 	.word	0x20000259
 800a9c8:	2000031c 	.word	0x2000031c
 800a9cc:	20000340 	.word	0x20000340
 800a9d0:	20000388 	.word	0x20000388
 800a9d4:	20000364 	.word	0x20000364

0800a9d8 <DRV_translateLeft>:

static void DRV_translateLeft(uint32_t p_speed)
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b084      	sub	sp, #16
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	60fb      	str	r3, [r7, #12]

  LOG_debug("Translating left @%u", l_speed);
 800a9e4:	68fa      	ldr	r2, [r7, #12]
 800a9e6:	4911      	ldr	r1, [pc, #68]	; (800aa2c <DRV_translateLeft+0x54>)
 800a9e8:	2000      	movs	r0, #0
 800a9ea:	f000 f9df 	bl	800adac <LOG_log>

  DRV_setDirectionsTranslateLeft();
 800a9ee:	f7ff fded 	bl	800a5cc <DRV_setDirectionsTranslateLeft>

  if (g_DRV_areMotorsOn == false)
 800a9f2:	4b0f      	ldr	r3, [pc, #60]	; (800aa30 <DRV_translateLeft+0x58>)
 800a9f4:	781b      	ldrb	r3, [r3, #0]
 800a9f6:	f083 0301 	eor.w	r3, r3, #1
 800a9fa:	b2db      	uxtb	r3, r3
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d110      	bne.n	800aa22 <DRV_translateLeft+0x4a>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 800aa00:	68f9      	ldr	r1, [r7, #12]
 800aa02:	480c      	ldr	r0, [pc, #48]	; (800aa34 <DRV_translateLeft+0x5c>)
 800aa04:	f000 fb9c 	bl	800b140 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 800aa08:	68f9      	ldr	r1, [r7, #12]
 800aa0a:	480b      	ldr	r0, [pc, #44]	; (800aa38 <DRV_translateLeft+0x60>)
 800aa0c:	f000 fb98 	bl	800b140 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 800aa10:	68f9      	ldr	r1, [r7, #12]
 800aa12:	480a      	ldr	r0, [pc, #40]	; (800aa3c <DRV_translateLeft+0x64>)
 800aa14:	f000 fb94 	bl	800b140 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 800aa18:	68f9      	ldr	r1, [r7, #12]
 800aa1a:	4809      	ldr	r0, [pc, #36]	; (800aa40 <DRV_translateLeft+0x68>)
 800aa1c:	f000 fb90 	bl	800b140 <MTR_setSpeed>
  }

  return;
 800aa20:	bf00      	nop
 800aa22:	bf00      	nop
}
 800aa24:	3710      	adds	r7, #16
 800aa26:	46bd      	mov	sp, r7
 800aa28:	bd80      	pop	{r7, pc}
 800aa2a:	bf00      	nop
 800aa2c:	0800f58c 	.word	0x0800f58c
 800aa30:	20000259 	.word	0x20000259
 800aa34:	2000031c 	.word	0x2000031c
 800aa38:	20000340 	.word	0x20000340
 800aa3c:	20000388 	.word	0x20000388
 800aa40:	20000364 	.word	0x20000364

0800aa44 <DRV_translateRight>:

static void DRV_translateRight(uint32_t p_speed)
{
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b084      	sub	sp, #16
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	60fb      	str	r3, [r7, #12]

  LOG_debug("Translating right @%u", l_speed);
 800aa50:	68fa      	ldr	r2, [r7, #12]
 800aa52:	4911      	ldr	r1, [pc, #68]	; (800aa98 <DRV_translateRight+0x54>)
 800aa54:	2000      	movs	r0, #0
 800aa56:	f000 f9a9 	bl	800adac <LOG_log>

  DRV_setDirectionsTranslateRight();
 800aa5a:	f7ff fdd3 	bl	800a604 <DRV_setDirectionsTranslateRight>

  if (g_DRV_areMotorsOn == false)
 800aa5e:	4b0f      	ldr	r3, [pc, #60]	; (800aa9c <DRV_translateRight+0x58>)
 800aa60:	781b      	ldrb	r3, [r3, #0]
 800aa62:	f083 0301 	eor.w	r3, r3, #1
 800aa66:	b2db      	uxtb	r3, r3
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d110      	bne.n	800aa8e <DRV_translateRight+0x4a>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 800aa6c:	68f9      	ldr	r1, [r7, #12]
 800aa6e:	480c      	ldr	r0, [pc, #48]	; (800aaa0 <DRV_translateRight+0x5c>)
 800aa70:	f000 fb66 	bl	800b140 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 800aa74:	68f9      	ldr	r1, [r7, #12]
 800aa76:	480b      	ldr	r0, [pc, #44]	; (800aaa4 <DRV_translateRight+0x60>)
 800aa78:	f000 fb62 	bl	800b140 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 800aa7c:	68f9      	ldr	r1, [r7, #12]
 800aa7e:	480a      	ldr	r0, [pc, #40]	; (800aaa8 <DRV_translateRight+0x64>)
 800aa80:	f000 fb5e 	bl	800b140 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 800aa84:	68f9      	ldr	r1, [r7, #12]
 800aa86:	4809      	ldr	r0, [pc, #36]	; (800aaac <DRV_translateRight+0x68>)
 800aa88:	f000 fb5a 	bl	800b140 <MTR_setSpeed>
  }

  return;
 800aa8c:	bf00      	nop
 800aa8e:	bf00      	nop
}
 800aa90:	3710      	adds	r7, #16
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bd80      	pop	{r7, pc}
 800aa96:	bf00      	nop
 800aa98:	0800f5a4 	.word	0x0800f5a4
 800aa9c:	20000259 	.word	0x20000259
 800aaa0:	2000031c 	.word	0x2000031c
 800aaa4:	20000340 	.word	0x20000340
 800aaa8:	20000388 	.word	0x20000388
 800aaac:	20000364 	.word	0x20000364

0800aab0 <ENC_init>:
#include "encoder.h"

#include "log.h"

void ENC_init(T_ENC_Handle *p_handle, char *p_name, bool p_invertOnUpdate, TIM_HandleTypeDef *p_encoderTimerHandle)
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b084      	sub	sp, #16
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	60f8      	str	r0, [r7, #12]
 800aab8:	60b9      	str	r1, [r7, #8]
 800aaba:	603b      	str	r3, [r7, #0]
 800aabc:	4613      	mov	r3, r2
 800aabe:	71fb      	strb	r3, [r7, #7]
  LOG_info("Initializing Encoder module for %s", p_name);
 800aac0:	68ba      	ldr	r2, [r7, #8]
 800aac2:	490a      	ldr	r1, [pc, #40]	; (800aaec <ENC_init+0x3c>)
 800aac4:	2001      	movs	r0, #1
 800aac6:	f000 f971 	bl	800adac <LOG_log>

  p_handle->name           = p_name;
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	68ba      	ldr	r2, [r7, #8]
 800aace:	601a      	str	r2, [r3, #0]
  p_handle->invertOnUpdate = p_invertOnUpdate;
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	79fa      	ldrb	r2, [r7, #7]
 800aad4:	719a      	strb	r2, [r3, #6]
  p_handle->timerHandle    = p_encoderTimerHandle;
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	683a      	ldr	r2, [r7, #0]
 800aada:	609a      	str	r2, [r3, #8]

  ENC_reset(p_handle);
 800aadc:	68f8      	ldr	r0, [r7, #12]
 800aade:	f000 f807 	bl	800aaf0 <ENC_reset>

  return;
 800aae2:	bf00      	nop
}
 800aae4:	3710      	adds	r7, #16
 800aae6:	46bd      	mov	sp, r7
 800aae8:	bd80      	pop	{r7, pc}
 800aaea:	bf00      	nop
 800aaec:	0800f5bc 	.word	0x0800f5bc

0800aaf0 <ENC_reset>:

void ENC_reset(T_ENC_Handle *p_handle)
{
 800aaf0:	b480      	push	{r7}
 800aaf2:	b083      	sub	sp, #12
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
  p_handle->value = 0;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	2200      	movs	r2, #0
 800aafc:	809a      	strh	r2, [r3, #4]

  __HAL_TIM_SET_COUNTER(p_handle->timerHandle, 0);
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	689b      	ldr	r3, [r3, #8]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	2200      	movs	r2, #0
 800ab06:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 800ab08:	bf00      	nop
}
 800ab0a:	370c      	adds	r7, #12
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	bc80      	pop	{r7}
 800ab10:	4770      	bx	lr

0800ab12 <ENC_update>:

void ENC_update(T_ENC_Handle *p_handle, int16_t p_value)
{
 800ab12:	b480      	push	{r7}
 800ab14:	b083      	sub	sp, #12
 800ab16:	af00      	add	r7, sp, #0
 800ab18:	6078      	str	r0, [r7, #4]
 800ab1a:	460b      	mov	r3, r1
 800ab1c:	807b      	strh	r3, [r7, #2]
  if (p_handle->invertOnUpdate == false)
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	799b      	ldrb	r3, [r3, #6]
 800ab22:	f083 0301 	eor.w	r3, r3, #1
 800ab26:	b2db      	uxtb	r3, r3
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d003      	beq.n	800ab34 <ENC_update+0x22>
  {
    p_handle->value = p_value;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	887a      	ldrh	r2, [r7, #2]
 800ab30:	809a      	strh	r2, [r3, #4]
  else
  {
    p_handle->value = -p_value;
  }

  return;
 800ab32:	e006      	b.n	800ab42 <ENC_update+0x30>
    p_handle->value = -p_value;
 800ab34:	887b      	ldrh	r3, [r7, #2]
 800ab36:	425b      	negs	r3, r3
 800ab38:	b29b      	uxth	r3, r3
 800ab3a:	b21a      	sxth	r2, r3
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	809a      	strh	r2, [r3, #4]
  return;
 800ab40:	bf00      	nop
}
 800ab42:	370c      	adds	r7, #12
 800ab44:	46bd      	mov	sp, r7
 800ab46:	bc80      	pop	{r7}
 800ab48:	4770      	bx	lr

0800ab4a <ENC_getCount>:

int16_t ENC_getCount(T_ENC_Handle *p_handle)
{
 800ab4a:	b580      	push	{r7, lr}
 800ab4c:	b084      	sub	sp, #16
 800ab4e:	af00      	add	r7, sp, #0
 800ab50:	6078      	str	r0, [r7, #4]
  int16_t l_count;

  l_count = p_handle->value;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	889b      	ldrh	r3, [r3, #4]
 800ab56:	81fb      	strh	r3, [r7, #14]

  ENC_reset(p_handle);
 800ab58:	6878      	ldr	r0, [r7, #4]
 800ab5a:	f7ff ffc9 	bl	800aaf0 <ENC_reset>

  return l_count;
 800ab5e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800ab62:	4618      	mov	r0, r3
 800ab64:	3710      	adds	r7, #16
 800ab66:	46bd      	mov	sp, r7
 800ab68:	bd80      	pop	{r7, pc}
	...

0800ab6c <LED_setMode>:
#include "log.h"

static T_LED_MODE g_LED_mode = LED_MODE_BLINK_SLOW;

void LED_setMode(T_LED_MODE p_mode)
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b082      	sub	sp, #8
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	4603      	mov	r3, r0
 800ab74:	71fb      	strb	r3, [r7, #7]
  if (p_mode != g_LED_mode)
 800ab76:	4b1b      	ldr	r3, [pc, #108]	; (800abe4 <LED_setMode+0x78>)
 800ab78:	781b      	ldrb	r3, [r3, #0]
 800ab7a:	79fa      	ldrb	r2, [r7, #7]
 800ab7c:	429a      	cmp	r2, r3
 800ab7e:	d02d      	beq.n	800abdc <LED_setMode+0x70>
  {
    switch (p_mode)
 800ab80:	79fb      	ldrb	r3, [r7, #7]
 800ab82:	2b04      	cmp	r3, #4
 800ab84:	d825      	bhi.n	800abd2 <LED_setMode+0x66>
 800ab86:	a201      	add	r2, pc, #4	; (adr r2, 800ab8c <LED_setMode+0x20>)
 800ab88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab8c:	0800aba1 	.word	0x0800aba1
 800ab90:	0800abab 	.word	0x0800abab
 800ab94:	0800abb5 	.word	0x0800abb5
 800ab98:	0800abbf 	.word	0x0800abbf
 800ab9c:	0800abc9 	.word	0x0800abc9
    {
      case LED_MODE_FORCED_OFF:
        LOG_info("Turning LED OFF");
 800aba0:	4911      	ldr	r1, [pc, #68]	; (800abe8 <LED_setMode+0x7c>)
 800aba2:	2001      	movs	r0, #1
 800aba4:	f000 f902 	bl	800adac <LOG_log>
        break;
 800aba8:	e014      	b.n	800abd4 <LED_setMode+0x68>

      case LED_MODE_FORCED_ON:
        LOG_info("Turning LED ON");
 800abaa:	4910      	ldr	r1, [pc, #64]	; (800abec <LED_setMode+0x80>)
 800abac:	2001      	movs	r0, #1
 800abae:	f000 f8fd 	bl	800adac <LOG_log>
        break;
 800abb2:	e00f      	b.n	800abd4 <LED_setMode+0x68>

      case LED_MODE_BLINK_SLOW:
        LOG_info("Setting LED to blink slow");
 800abb4:	490e      	ldr	r1, [pc, #56]	; (800abf0 <LED_setMode+0x84>)
 800abb6:	2001      	movs	r0, #1
 800abb8:	f000 f8f8 	bl	800adac <LOG_log>
        break;
 800abbc:	e00a      	b.n	800abd4 <LED_setMode+0x68>

      case LED_MODE_BLINK_MEDIUM:
        LOG_info("Setting LED to blink medium");
 800abbe:	490d      	ldr	r1, [pc, #52]	; (800abf4 <LED_setMode+0x88>)
 800abc0:	2001      	movs	r0, #1
 800abc2:	f000 f8f3 	bl	800adac <LOG_log>
        break;
 800abc6:	e005      	b.n	800abd4 <LED_setMode+0x68>

      case LED_MODE_BLINK_FAST:
        LOG_info("Setting LED to blink fast");
 800abc8:	490b      	ldr	r1, [pc, #44]	; (800abf8 <LED_setMode+0x8c>)
 800abca:	2001      	movs	r0, #1
 800abcc:	f000 f8ee 	bl	800adac <LOG_log>
        break;
 800abd0:	e000      	b.n	800abd4 <LED_setMode+0x68>

      default:
        ; /* Nothing to do */
        break;
 800abd2:	bf00      	nop
    }

    g_LED_mode = p_mode;
 800abd4:	4a03      	ldr	r2, [pc, #12]	; (800abe4 <LED_setMode+0x78>)
 800abd6:	79fb      	ldrb	r3, [r7, #7]
 800abd8:	7013      	strb	r3, [r2, #0]
  else
  {
    ; /* Nothong to do */
  }

  return;
 800abda:	bf00      	nop
 800abdc:	bf00      	nop
}
 800abde:	3708      	adds	r7, #8
 800abe0:	46bd      	mov	sp, r7
 800abe2:	bd80      	pop	{r7, pc}
 800abe4:	20000009 	.word	0x20000009
 800abe8:	0800f5e0 	.word	0x0800f5e0
 800abec:	0800f5f0 	.word	0x0800f5f0
 800abf0:	0800f600 	.word	0x0800f600
 800abf4:	0800f61c 	.word	0x0800f61c
 800abf8:	0800f638 	.word	0x0800f638

0800abfc <LED_update>:
{
  return g_LED_mode;
}

void LED_update(void)
{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	af00      	add	r7, sp, #0
  static uint32_t l_blinkCounter = 0;

  switch (g_LED_mode)
 800ac00:	4b2a      	ldr	r3, [pc, #168]	; (800acac <LED_update+0xb0>)
 800ac02:	781b      	ldrb	r3, [r3, #0]
 800ac04:	2b04      	cmp	r3, #4
 800ac06:	d849      	bhi.n	800ac9c <LED_update+0xa0>
 800ac08:	a201      	add	r2, pc, #4	; (adr r2, 800ac10 <LED_update+0x14>)
 800ac0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac0e:	bf00      	nop
 800ac10:	0800ac25 	.word	0x0800ac25
 800ac14:	0800ac33 	.word	0x0800ac33
 800ac18:	0800ac41 	.word	0x0800ac41
 800ac1c:	0800ac6f 	.word	0x0800ac6f
 800ac20:	0800ac91 	.word	0x0800ac91
  {
    case LED_MODE_FORCED_OFF:
      HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_SET);
 800ac24:	2201      	movs	r2, #1
 800ac26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800ac2a:	4821      	ldr	r0, [pc, #132]	; (800acb0 <LED_update+0xb4>)
 800ac2c:	f7f9 fa4e 	bl	80040cc <HAL_GPIO_WritePin>
      break;
 800ac30:	e039      	b.n	800aca6 <LED_update+0xaa>

    case LED_MODE_FORCED_ON:
      HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 800ac32:	2200      	movs	r2, #0
 800ac34:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800ac38:	481d      	ldr	r0, [pc, #116]	; (800acb0 <LED_update+0xb4>)
 800ac3a:	f7f9 fa47 	bl	80040cc <HAL_GPIO_WritePin>
      break;
 800ac3e:	e032      	b.n	800aca6 <LED_update+0xaa>

    case LED_MODE_BLINK_SLOW:
      l_blinkCounter++;
 800ac40:	4b1c      	ldr	r3, [pc, #112]	; (800acb4 <LED_update+0xb8>)
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	3301      	adds	r3, #1
 800ac46:	4a1b      	ldr	r2, [pc, #108]	; (800acb4 <LED_update+0xb8>)
 800ac48:	6013      	str	r3, [r2, #0]
      if (l_blinkCounter % 5 == 0)
 800ac4a:	4b1a      	ldr	r3, [pc, #104]	; (800acb4 <LED_update+0xb8>)
 800ac4c:	6819      	ldr	r1, [r3, #0]
 800ac4e:	4b1a      	ldr	r3, [pc, #104]	; (800acb8 <LED_update+0xbc>)
 800ac50:	fba3 2301 	umull	r2, r3, r3, r1
 800ac54:	089a      	lsrs	r2, r3, #2
 800ac56:	4613      	mov	r3, r2
 800ac58:	009b      	lsls	r3, r3, #2
 800ac5a:	4413      	add	r3, r2
 800ac5c:	1aca      	subs	r2, r1, r3
 800ac5e:	2a00      	cmp	r2, #0
 800ac60:	d11e      	bne.n	800aca0 <LED_update+0xa4>
      {
        HAL_GPIO_TogglePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
 800ac62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800ac66:	4812      	ldr	r0, [pc, #72]	; (800acb0 <LED_update+0xb4>)
 800ac68:	f7f9 fa62 	bl	8004130 <HAL_GPIO_TogglePin>
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 800ac6c:	e018      	b.n	800aca0 <LED_update+0xa4>

    case LED_MODE_BLINK_MEDIUM:
      l_blinkCounter++;
 800ac6e:	4b11      	ldr	r3, [pc, #68]	; (800acb4 <LED_update+0xb8>)
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	3301      	adds	r3, #1
 800ac74:	4a0f      	ldr	r2, [pc, #60]	; (800acb4 <LED_update+0xb8>)
 800ac76:	6013      	str	r3, [r2, #0]
      if (l_blinkCounter % 2 == 0)
 800ac78:	4b0e      	ldr	r3, [pc, #56]	; (800acb4 <LED_update+0xb8>)
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	f003 0301 	and.w	r3, r3, #1
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d10f      	bne.n	800aca4 <LED_update+0xa8>
      {
        HAL_GPIO_TogglePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
 800ac84:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800ac88:	4809      	ldr	r0, [pc, #36]	; (800acb0 <LED_update+0xb4>)
 800ac8a:	f7f9 fa51 	bl	8004130 <HAL_GPIO_TogglePin>
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 800ac8e:	e009      	b.n	800aca4 <LED_update+0xa8>

    case LED_MODE_BLINK_FAST:
      HAL_GPIO_TogglePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
 800ac90:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800ac94:	4806      	ldr	r0, [pc, #24]	; (800acb0 <LED_update+0xb4>)
 800ac96:	f7f9 fa4b 	bl	8004130 <HAL_GPIO_TogglePin>
      break;
 800ac9a:	e004      	b.n	800aca6 <LED_update+0xaa>

    default:
      ; /* Nothing to do */
      break;
 800ac9c:	bf00      	nop
 800ac9e:	e002      	b.n	800aca6 <LED_update+0xaa>
      break;
 800aca0:	bf00      	nop
 800aca2:	e000      	b.n	800aca6 <LED_update+0xaa>
      break;
 800aca4:	bf00      	nop
  }

  return;
 800aca6:	bf00      	nop
}
 800aca8:	bd80      	pop	{r7, pc}
 800acaa:	bf00      	nop
 800acac:	20000009 	.word	0x20000009
 800acb0:	40011000 	.word	0x40011000
 800acb4:	200004a0 	.word	0x200004a0
 800acb8:	cccccccd 	.word	0xcccccccd

0800acbc <LOG_init>:
{
  "DEBUG", "INFO", "WARNING", "ERROR"
};

void LOG_init(RTC_HandleTypeDef *p_rctHandle, bool p_isLogOn)
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b082      	sub	sp, #8
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
 800acc4:	460b      	mov	r3, r1
 800acc6:	70fb      	strb	r3, [r7, #3]
  g_LOG_isOn      = p_isLogOn;
 800acc8:	4a06      	ldr	r2, [pc, #24]	; (800ace4 <LOG_init+0x28>)
 800acca:	78fb      	ldrb	r3, [r7, #3]
 800accc:	7013      	strb	r3, [r2, #0]
  g_LOG_rtcHandle = p_rctHandle;
 800acce:	4a06      	ldr	r2, [pc, #24]	; (800ace8 <LOG_init+0x2c>)
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	6013      	str	r3, [r2, #0]

  LOG_info("LOG initialized");
 800acd4:	4905      	ldr	r1, [pc, #20]	; (800acec <LOG_init+0x30>)
 800acd6:	2001      	movs	r0, #1
 800acd8:	f000 f868 	bl	800adac <LOG_log>

  return;
 800acdc:	bf00      	nop
}
 800acde:	3708      	adds	r7, #8
 800ace0:	46bd      	mov	sp, r7
 800ace2:	bd80      	pop	{r7, pc}
 800ace4:	200004a4 	.word	0x200004a4
 800ace8:	200004a8 	.word	0x200004a8
 800acec:	0800f674 	.word	0x0800f674

0800acf0 <LOG_toggleOnOff>:

void LOG_toggleOnOff(void)
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	af00      	add	r7, sp, #0
  if (g_LOG_isOn == true)
 800acf4:	4b0a      	ldr	r3, [pc, #40]	; (800ad20 <LOG_toggleOnOff+0x30>)
 800acf6:	781b      	ldrb	r3, [r3, #0]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d007      	beq.n	800ad0c <LOG_toggleOnOff+0x1c>
  {
    LOG_info("Turning LOG OFF");
 800acfc:	4909      	ldr	r1, [pc, #36]	; (800ad24 <LOG_toggleOnOff+0x34>)
 800acfe:	2001      	movs	r0, #1
 800ad00:	f000 f854 	bl	800adac <LOG_log>

    g_LOG_isOn = false;
 800ad04:	4b06      	ldr	r3, [pc, #24]	; (800ad20 <LOG_toggleOnOff+0x30>)
 800ad06:	2200      	movs	r2, #0
 800ad08:	701a      	strb	r2, [r3, #0]
    g_LOG_isOn = true;

    LOG_info("Turning LOG ON");
  }

  return;
 800ad0a:	e007      	b.n	800ad1c <LOG_toggleOnOff+0x2c>
    g_LOG_isOn = true;
 800ad0c:	4b04      	ldr	r3, [pc, #16]	; (800ad20 <LOG_toggleOnOff+0x30>)
 800ad0e:	2201      	movs	r2, #1
 800ad10:	701a      	strb	r2, [r3, #0]
    LOG_info("Turning LOG ON");
 800ad12:	4905      	ldr	r1, [pc, #20]	; (800ad28 <LOG_toggleOnOff+0x38>)
 800ad14:	2001      	movs	r0, #1
 800ad16:	f000 f849 	bl	800adac <LOG_log>
  return;
 800ad1a:	bf00      	nop
}
 800ad1c:	bd80      	pop	{r7, pc}
 800ad1e:	bf00      	nop
 800ad20:	200004a4 	.word	0x200004a4
 800ad24:	0800f684 	.word	0x0800f684
 800ad28:	0800f694 	.word	0x0800f694

0800ad2c <LOG_setLevel>:

void LOG_setLevel(T_LOG_LEVEL p_level)
{
 800ad2c:	b480      	push	{r7}
 800ad2e:	b083      	sub	sp, #12
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	4603      	mov	r3, r0
 800ad34:	71fb      	strb	r3, [r7, #7]
  g_LOG_level = p_level;
 800ad36:	4a04      	ldr	r2, [pc, #16]	; (800ad48 <LOG_setLevel+0x1c>)
 800ad38:	79fb      	ldrb	r3, [r7, #7]
 800ad3a:	7013      	strb	r3, [r2, #0]

  return;
 800ad3c:	bf00      	nop
}
 800ad3e:	370c      	adds	r7, #12
 800ad40:	46bd      	mov	sp, r7
 800ad42:	bc80      	pop	{r7}
 800ad44:	4770      	bx	lr
 800ad46:	bf00      	nop
 800ad48:	200004a5 	.word	0x200004a5

0800ad4c <LOG_increaseLevel>:

void LOG_increaseLevel(void)
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	af00      	add	r7, sp, #0
  /* Display more detailed logs */
  if (g_LOG_level > LOG_LEVEL_DEBUG)
 800ad50:	4b08      	ldr	r3, [pc, #32]	; (800ad74 <LOG_increaseLevel+0x28>)
 800ad52:	781b      	ldrb	r3, [r3, #0]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d00a      	beq.n	800ad6e <LOG_increaseLevel+0x22>
  {
    LOG_info("Increasing LOG level");
 800ad58:	4907      	ldr	r1, [pc, #28]	; (800ad78 <LOG_increaseLevel+0x2c>)
 800ad5a:	2001      	movs	r0, #1
 800ad5c:	f000 f826 	bl	800adac <LOG_log>

    g_LOG_level--;
 800ad60:	4b04      	ldr	r3, [pc, #16]	; (800ad74 <LOG_increaseLevel+0x28>)
 800ad62:	781b      	ldrb	r3, [r3, #0]
 800ad64:	3b01      	subs	r3, #1
 800ad66:	b2da      	uxtb	r2, r3
 800ad68:	4b02      	ldr	r3, [pc, #8]	; (800ad74 <LOG_increaseLevel+0x28>)
 800ad6a:	701a      	strb	r2, [r3, #0]
  else
  {
    ; /* Nothing to do */
  }

  return;
 800ad6c:	bf00      	nop
 800ad6e:	bf00      	nop
}
 800ad70:	bd80      	pop	{r7, pc}
 800ad72:	bf00      	nop
 800ad74:	200004a5 	.word	0x200004a5
 800ad78:	0800f6a4 	.word	0x0800f6a4

0800ad7c <LOG_decreaseLevel>:

void LOG_decreaseLevel(void)
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	af00      	add	r7, sp, #0
  /* Display less detailed logs */
  if (g_LOG_level < LOG_LEVEL_ERROR)
 800ad80:	4b08      	ldr	r3, [pc, #32]	; (800ada4 <LOG_decreaseLevel+0x28>)
 800ad82:	781b      	ldrb	r3, [r3, #0]
 800ad84:	2b02      	cmp	r3, #2
 800ad86:	d80a      	bhi.n	800ad9e <LOG_decreaseLevel+0x22>
  {
    LOG_info("Decreasing LOG level");
 800ad88:	4907      	ldr	r1, [pc, #28]	; (800ada8 <LOG_decreaseLevel+0x2c>)
 800ad8a:	2001      	movs	r0, #1
 800ad8c:	f000 f80e 	bl	800adac <LOG_log>

    g_LOG_level++;
 800ad90:	4b04      	ldr	r3, [pc, #16]	; (800ada4 <LOG_decreaseLevel+0x28>)
 800ad92:	781b      	ldrb	r3, [r3, #0]
 800ad94:	3301      	adds	r3, #1
 800ad96:	b2da      	uxtb	r2, r3
 800ad98:	4b02      	ldr	r3, [pc, #8]	; (800ada4 <LOG_decreaseLevel+0x28>)
 800ad9a:	701a      	strb	r2, [r3, #0]
  else
  {
    ; /* Nothing to do */
  }

  return;
 800ad9c:	bf00      	nop
 800ad9e:	bf00      	nop
}
 800ada0:	bd80      	pop	{r7, pc}
 800ada2:	bf00      	nop
 800ada4:	200004a5 	.word	0x200004a5
 800ada8:	0800f6bc 	.word	0x0800f6bc

0800adac <LOG_log>:

void LOG_log(T_LOG_LEVEL p_level, const char *p_format, ...)
{
 800adac:	b40e      	push	{r1, r2, r3}
 800adae:	b590      	push	{r4, r7, lr}
 800adb0:	b0a8      	sub	sp, #160	; 0xa0
 800adb2:	af02      	add	r7, sp, #8
 800adb4:	4603      	mov	r3, r0
 800adb6:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef l_halReturnCode;
  va_list           l_argumentsList;
  RTC_TimeTypeDef   l_time;
  RTC_DateTypeDef   l_date;

  if ((g_LOG_isOn == true) && (p_level >= g_LOG_level))
 800adb8:	4b3e      	ldr	r3, [pc, #248]	; (800aeb4 <LOG_log+0x108>)
 800adba:	781b      	ldrb	r3, [r3, #0]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d071      	beq.n	800aea4 <LOG_log+0xf8>
 800adc0:	4b3d      	ldr	r3, [pc, #244]	; (800aeb8 <LOG_log+0x10c>)
 800adc2:	781b      	ldrb	r3, [r3, #0]
 800adc4:	79fa      	ldrb	r2, [r7, #7]
 800adc6:	429a      	cmp	r2, r3
 800adc8:	d36c      	bcc.n	800aea4 <LOG_log+0xf8>
  {
    l_halReturnCode = HAL_RTC_GetTime(g_LOG_rtcHandle, &l_time, RTC_FORMAT_BCD);
 800adca:	4b3c      	ldr	r3, [pc, #240]	; (800aebc <LOG_log+0x110>)
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	f107 010c 	add.w	r1, r7, #12
 800add2:	2201      	movs	r2, #1
 800add4:	4618      	mov	r0, r3
 800add6:	f7fa fb5b 	bl	8005490 <HAL_RTC_GetTime>
 800adda:	4603      	mov	r3, r0
 800addc:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

    if (l_halReturnCode != HAL_OK)
 800ade0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d004      	beq.n	800adf2 <LOG_log+0x46>
    {
      /* As this method is for logging/debug, just reset time in case of failure */
      UTI_resetRtcTime(&l_time);
 800ade8:	f107 030c 	add.w	r3, r7, #12
 800adec:	4618      	mov	r0, r3
 800adee:	f000 fd0e 	bl	800b80e <UTI_resetRtcTime>
    else
    {
      ; /* Nothing to do */
    }

    l_halReturnCode = HAL_RTC_GetDate(g_LOG_rtcHandle, &l_date, RTC_FORMAT_BCD);
 800adf2:	4b32      	ldr	r3, [pc, #200]	; (800aebc <LOG_log+0x110>)
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	f107 0108 	add.w	r1, r7, #8
 800adfa:	2201      	movs	r2, #1
 800adfc:	4618      	mov	r0, r3
 800adfe:	f7fa fd4b 	bl	8005898 <HAL_RTC_GetDate>
 800ae02:	4603      	mov	r3, r0
 800ae04:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

    if (l_halReturnCode != HAL_OK)
 800ae08:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d004      	beq.n	800ae1a <LOG_log+0x6e>
    {
      /* As this method is for logging/debug, just reset date in case of failure */
      UTI_resetRtcDate(&l_date);
 800ae10:	f107 0308 	add.w	r3, r7, #8
 800ae14:	4618      	mov	r0, r3
 800ae16:	f000 fce5 	bl	800b7e4 <UTI_resetRtcDate>
    else
    {
      ; /* Nothing to do */
    }

    va_start(l_argumentsList, p_format);
 800ae1a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800ae1e:	613b      	str	r3, [r7, #16]

    (void)sprintf  ( l_buffer, "%-7s - %02x:%02x:%02x - ", g_LOG_levelStrings[p_level], l_time.Hours, l_time.Minutes, l_time.Seconds);
 800ae20:	79fb      	ldrb	r3, [r7, #7]
 800ae22:	4a27      	ldr	r2, [pc, #156]	; (800aec0 <LOG_log+0x114>)
 800ae24:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800ae28:	7b3b      	ldrb	r3, [r7, #12]
 800ae2a:	461c      	mov	r4, r3
 800ae2c:	7b7b      	ldrb	r3, [r7, #13]
 800ae2e:	7bb9      	ldrb	r1, [r7, #14]
 800ae30:	f107 0014 	add.w	r0, r7, #20
 800ae34:	9101      	str	r1, [sp, #4]
 800ae36:	9300      	str	r3, [sp, #0]
 800ae38:	4623      	mov	r3, r4
 800ae3a:	4922      	ldr	r1, [pc, #136]	; (800aec4 <LOG_log+0x118>)
 800ae3c:	f001 fb00 	bl	800c440 <siprintf>
    /* 21 is the length of string "%-7s - %02x:%02x:%02x - ". 2 is the length of string "\r\n". */
    /* So we start and write format right after the former and we keep space for the latter.    */
    (void)vsnprintf(&l_buffer[21], CST_CONSOLE_TX_MAX_STRING_LENGTH - 21 - 2, p_format, l_argumentsList);
 800ae40:	f107 0314 	add.w	r3, r7, #20
 800ae44:	f103 0015 	add.w	r0, r3, #21
 800ae48:	693b      	ldr	r3, [r7, #16]
 800ae4a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800ae4e:	2169      	movs	r1, #105	; 0x69
 800ae50:	f001 fbf2 	bl	800c638 <vsniprintf>
    (void)strcat   ( l_buffer    , "\r\n");
 800ae54:	f107 0314 	add.w	r3, r7, #20
 800ae58:	4618      	mov	r0, r3
 800ae5a:	f7f5 f9e5 	bl	8000228 <strlen>
 800ae5e:	4603      	mov	r3, r0
 800ae60:	461a      	mov	r2, r3
 800ae62:	f107 0314 	add.w	r3, r7, #20
 800ae66:	4413      	add	r3, r2
 800ae68:	4a17      	ldr	r2, [pc, #92]	; (800aec8 <LOG_log+0x11c>)
 800ae6a:	8811      	ldrh	r1, [r2, #0]
 800ae6c:	7892      	ldrb	r2, [r2, #2]
 800ae6e:	8019      	strh	r1, [r3, #0]
 800ae70:	709a      	strb	r2, [r3, #2]

    /* -1 is there to consider the end/null character, which strnlen() does not count */
    if (strnlen(l_buffer, CST_CONSOLE_TX_MAX_STRING_LENGTH) == CST_CONSOLE_TX_MAX_STRING_LENGTH - 1)
 800ae72:	f107 0314 	add.w	r3, r7, #20
 800ae76:	2180      	movs	r1, #128	; 0x80
 800ae78:	4618      	mov	r0, r3
 800ae7a:	f001 fb14 	bl	800c4a6 <strnlen>
 800ae7e:	4603      	mov	r3, r0
 800ae80:	2b7f      	cmp	r3, #127	; 0x7f
 800ae82:	d108      	bne.n	800ae96 <LOG_log+0xea>
    {
      /* At -1, we got the end/null character. At -2 & 3, we got "\r\n". */
      l_buffer[CST_CONSOLE_TX_MAX_STRING_LENGTH - 4] = '.';
 800ae84:	232e      	movs	r3, #46	; 0x2e
 800ae86:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
      l_buffer[CST_CONSOLE_TX_MAX_STRING_LENGTH - 5] = '.';
 800ae8a:	232e      	movs	r3, #46	; 0x2e
 800ae8c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
      l_buffer[CST_CONSOLE_TX_MAX_STRING_LENGTH - 6] = '.';
 800ae90:	232e      	movs	r3, #46	; 0x2e
 800ae92:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
    else
    {
      ; /* Nothing to do */
    }

    (void)printf("%s", l_buffer);
 800ae96:	f107 0314 	add.w	r3, r7, #20
 800ae9a:	4619      	mov	r1, r3
 800ae9c:	480b      	ldr	r0, [pc, #44]	; (800aecc <LOG_log+0x120>)
 800ae9e:	f001 faa7 	bl	800c3f0 <iprintf>
  else
  {
    ; /* Nothing to do */
  }

  return;
 800aea2:	bf00      	nop
 800aea4:	bf00      	nop
}
 800aea6:	3798      	adds	r7, #152	; 0x98
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800aeae:	b003      	add	sp, #12
 800aeb0:	4770      	bx	lr
 800aeb2:	bf00      	nop
 800aeb4:	200004a4 	.word	0x200004a4
 800aeb8:	200004a5 	.word	0x200004a5
 800aebc:	200004a8 	.word	0x200004a8
 800aec0:	2000000c 	.word	0x2000000c
 800aec4:	0800f6d4 	.word	0x0800f6d4
 800aec8:	0800f6f0 	.word	0x0800f6f0
 800aecc:	0800f6f4 	.word	0x0800f6f4

0800aed0 <MAS_init>:
static T_SFO_data          g_MAS_data;
static uint32_t            g_MAS_dataSize;
static bool                g_MAS_isDataComplete;

void MAS_init(UART_HandleTypeDef *p_uartHandle)
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b082      	sub	sp, #8
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
  LOG_info("Initializing master connection");
 800aed8:	490d      	ldr	r1, [pc, #52]	; (800af10 <MAS_init+0x40>)
 800aeda:	2001      	movs	r0, #1
 800aedc:	f7ff ff66 	bl	800adac <LOG_log>

  g_MAS_uartHandle     = p_uartHandle;
 800aee0:	4a0c      	ldr	r2, [pc, #48]	; (800af14 <MAS_init+0x44>)
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	6013      	str	r3, [r2, #0]
  g_MAS_dataSize       = 0;
 800aee6:	4b0c      	ldr	r3, [pc, #48]	; (800af18 <MAS_init+0x48>)
 800aee8:	2200      	movs	r2, #0
 800aeea:	601a      	str	r2, [r3, #0]
  g_MAS_isDataComplete = false;
 800aeec:	4b0b      	ldr	r3, [pc, #44]	; (800af1c <MAS_init+0x4c>)
 800aeee:	2200      	movs	r2, #0
 800aef0:	701a      	strb	r2, [r3, #0]

  SFO_initData(&g_MAS_data);
 800aef2:	480b      	ldr	r0, [pc, #44]	; (800af20 <MAS_init+0x50>)
 800aef4:	f000 fb3a 	bl	800b56c <SFO_initData>

  HAL_UART_Receive_IT(g_MAS_uartHandle, &g_MAS_datum, 1);
 800aef8:	4b06      	ldr	r3, [pc, #24]	; (800af14 <MAS_init+0x44>)
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	2201      	movs	r2, #1
 800aefe:	4909      	ldr	r1, [pc, #36]	; (800af24 <MAS_init+0x54>)
 800af00:	4618      	mov	r0, r3
 800af02:	f7fd fb6f 	bl	80085e4 <HAL_UART_Receive_IT>

  return;
 800af06:	bf00      	nop
}
 800af08:	3708      	adds	r7, #8
 800af0a:	46bd      	mov	sp, r7
 800af0c:	bd80      	pop	{r7, pc}
 800af0e:	bf00      	nop
 800af10:	0800f6f8 	.word	0x0800f6f8
 800af14:	200004ac 	.word	0x200004ac
 800af18:	200004c4 	.word	0x200004c4
 800af1c:	200004c8 	.word	0x200004c8
 800af20:	200004b4 	.word	0x200004b4
 800af24:	200004b0 	.word	0x200004b0

0800af28 <MAS_receiveData>:

void MAS_receiveData(void)
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	af00      	add	r7, sp, #0
  /* If previous command was not processed yet, drop datum, */
  /* which will lead to an error, showing a design issue... */
  if (g_MAS_isDataComplete == true)
 800af2c:	4b0f      	ldr	r3, [pc, #60]	; (800af6c <MAS_receiveData+0x44>)
 800af2e:	781b      	ldrb	r3, [r3, #0]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d112      	bne.n	800af5a <MAS_receiveData+0x32>
  {
    ; /* Nothing to do */
  }
  else
  {
    if (g_MAS_datum == '\r')
 800af34:	4b0e      	ldr	r3, [pc, #56]	; (800af70 <MAS_receiveData+0x48>)
 800af36:	781b      	ldrb	r3, [r3, #0]
 800af38:	2b0d      	cmp	r3, #13
 800af3a:	d103      	bne.n	800af44 <MAS_receiveData+0x1c>
    {
      g_MAS_isDataComplete = true;
 800af3c:	4b0b      	ldr	r3, [pc, #44]	; (800af6c <MAS_receiveData+0x44>)
 800af3e:	2201      	movs	r2, #1
 800af40:	701a      	strb	r2, [r3, #0]
 800af42:	e00a      	b.n	800af5a <MAS_receiveData+0x32>
    }
    else
    {
      g_MAS_data[g_MAS_dataSize] = g_MAS_datum;
 800af44:	4b0b      	ldr	r3, [pc, #44]	; (800af74 <MAS_receiveData+0x4c>)
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	4a09      	ldr	r2, [pc, #36]	; (800af70 <MAS_receiveData+0x48>)
 800af4a:	7811      	ldrb	r1, [r2, #0]
 800af4c:	4a0a      	ldr	r2, [pc, #40]	; (800af78 <MAS_receiveData+0x50>)
 800af4e:	54d1      	strb	r1, [r2, r3]
      g_MAS_dataSize++;
 800af50:	4b08      	ldr	r3, [pc, #32]	; (800af74 <MAS_receiveData+0x4c>)
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	3301      	adds	r3, #1
 800af56:	4a07      	ldr	r2, [pc, #28]	; (800af74 <MAS_receiveData+0x4c>)
 800af58:	6013      	str	r3, [r2, #0]
    }
  }

  HAL_UART_Receive_IT(g_MAS_uartHandle, &g_MAS_datum, 1);
 800af5a:	4b08      	ldr	r3, [pc, #32]	; (800af7c <MAS_receiveData+0x54>)
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	2201      	movs	r2, #1
 800af60:	4903      	ldr	r1, [pc, #12]	; (800af70 <MAS_receiveData+0x48>)
 800af62:	4618      	mov	r0, r3
 800af64:	f7fd fb3e 	bl	80085e4 <HAL_UART_Receive_IT>

  return;
 800af68:	bf00      	nop
}
 800af6a:	bd80      	pop	{r7, pc}
 800af6c:	200004c8 	.word	0x200004c8
 800af70:	200004b0 	.word	0x200004b0
 800af74:	200004c4 	.word	0x200004c4
 800af78:	200004b4 	.word	0x200004b4
 800af7c:	200004ac 	.word	0x200004ac

0800af80 <MAS_updateFifo>:

void MAS_updateFifo(T_SFO_Context *p_fifo)
{
 800af80:	b580      	push	{r7, lr}
 800af82:	b082      	sub	sp, #8
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
  if (g_MAS_isDataComplete == false)
 800af88:	4b0c      	ldr	r3, [pc, #48]	; (800afbc <MAS_updateFifo+0x3c>)
 800af8a:	781b      	ldrb	r3, [r3, #0]
 800af8c:	f083 0301 	eor.w	r3, r3, #1
 800af90:	b2db      	uxtb	r3, r3
 800af92:	2b00      	cmp	r3, #0
 800af94:	d10d      	bne.n	800afb2 <MAS_updateFifo+0x32>
  {
    ; /* Nothing to do */
  }
  else
  {
    SFO_push    (p_fifo, &g_MAS_data);
 800af96:	490a      	ldr	r1, [pc, #40]	; (800afc0 <MAS_updateFifo+0x40>)
 800af98:	6878      	ldr	r0, [r7, #4]
 800af9a:	f000 fb0d 	bl	800b5b8 <SFO_push>
    SFO_initData(&g_MAS_data);
 800af9e:	4808      	ldr	r0, [pc, #32]	; (800afc0 <MAS_updateFifo+0x40>)
 800afa0:	f000 fae4 	bl	800b56c <SFO_initData>

    g_MAS_dataSize       = 0;
 800afa4:	4b07      	ldr	r3, [pc, #28]	; (800afc4 <MAS_updateFifo+0x44>)
 800afa6:	2200      	movs	r2, #0
 800afa8:	601a      	str	r2, [r3, #0]
    g_MAS_isDataComplete = false;
 800afaa:	4b04      	ldr	r3, [pc, #16]	; (800afbc <MAS_updateFifo+0x3c>)
 800afac:	2200      	movs	r2, #0
 800afae:	701a      	strb	r2, [r3, #0]
  }

  return;
 800afb0:	bf00      	nop
 800afb2:	bf00      	nop
}
 800afb4:	3708      	adds	r7, #8
 800afb6:	46bd      	mov	sp, r7
 800afb8:	bd80      	pop	{r7, pc}
 800afba:	bf00      	nop
 800afbc:	200004c8 	.word	0x200004c8
 800afc0:	200004b4 	.word	0x200004b4
 800afc4:	200004c4 	.word	0x200004c4

0800afc8 <MAS_sendString>:

void MAS_sendString(char *p_string, uint32_t p_length)
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	b082      	sub	sp, #8
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
 800afd0:	6039      	str	r1, [r7, #0]
  /* As this method is using for logging/debug, we will not deal with failure cases */
 (void)HAL_UART_Transmit(g_MAS_uartHandle,
 800afd2:	4b06      	ldr	r3, [pc, #24]	; (800afec <MAS_sendString+0x24>)
 800afd4:	6818      	ldr	r0, [r3, #0]
 800afd6:	683b      	ldr	r3, [r7, #0]
 800afd8:	b29a      	uxth	r2, r3
 800afda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800afde:	6879      	ldr	r1, [r7, #4]
 800afe0:	f7fd fa6e 	bl	80084c0 <HAL_UART_Transmit>
              (uint8_t *)p_string,
                         p_length,
                         CST_UART_TRANSMIT_TIMEOUT_IN_MS);

  return;
 800afe4:	bf00      	nop
}
 800afe6:	3708      	adds	r7, #8
 800afe8:	46bd      	mov	sp, r7
 800afea:	bd80      	pop	{r7, pc}
 800afec:	200004ac 	.word	0x200004ac

0800aff0 <MTR_init>:
              uint32_t           p_dirPin1,
              GPIO_TypeDef      *p_dirPin2Port,
              uint32_t           p_dirPin2,
              TIM_HandleTypeDef *p_pwmTimerHandle,
              uint32_t           p_pwmChannel)
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b084      	sub	sp, #16
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	60f8      	str	r0, [r7, #12]
 800aff8:	60b9      	str	r1, [r7, #8]
 800affa:	607a      	str	r2, [r7, #4]
 800affc:	603b      	str	r3, [r7, #0]
  LOG_info("Initializing Motor module for %s", p_name);
 800affe:	68ba      	ldr	r2, [r7, #8]
 800b000:	4912      	ldr	r1, [pc, #72]	; (800b04c <MTR_init+0x5c>)
 800b002:	2001      	movs	r0, #1
 800b004:	f7ff fed2 	bl	800adac <LOG_log>

  p_handle->name           = p_name;
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	68ba      	ldr	r2, [r7, #8]
 800b00c:	601a      	str	r2, [r3, #0]
  p_handle->dirPin1Port    = p_dirPin1Port;
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	687a      	ldr	r2, [r7, #4]
 800b012:	605a      	str	r2, [r3, #4]
  p_handle->dirPin1        = p_dirPin1;
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	683a      	ldr	r2, [r7, #0]
 800b018:	609a      	str	r2, [r3, #8]
  p_handle->dirPin2Port    = p_dirPin2Port;
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	69ba      	ldr	r2, [r7, #24]
 800b01e:	60da      	str	r2, [r3, #12]
  p_handle->dirPin2        = p_dirPin2;
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	69fa      	ldr	r2, [r7, #28]
 800b024:	611a      	str	r2, [r3, #16]
  p_handle->pwmTimerHandle = p_pwmTimerHandle;
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	6a3a      	ldr	r2, [r7, #32]
 800b02a:	61da      	str	r2, [r3, #28]
  p_handle->pwmChannel     = p_pwmChannel;
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b030:	621a      	str	r2, [r3, #32]

  MTR_setDirection(p_handle, MTR_DIRECTION_STOP);
 800b032:	2100      	movs	r1, #0
 800b034:	68f8      	ldr	r0, [r7, #12]
 800b036:	f000 f80b 	bl	800b050 <MTR_setDirection>
  MTR_setSpeed    (p_handle, 0                 );
 800b03a:	2100      	movs	r1, #0
 800b03c:	68f8      	ldr	r0, [r7, #12]
 800b03e:	f000 f87f 	bl	800b140 <MTR_setSpeed>

  return;
 800b042:	bf00      	nop
}
 800b044:	3710      	adds	r7, #16
 800b046:	46bd      	mov	sp, r7
 800b048:	bd80      	pop	{r7, pc}
 800b04a:	bf00      	nop
 800b04c:	0800f718 	.word	0x0800f718

0800b050 <MTR_setDirection>:

void MTR_setDirection(T_MTR_Handle *p_handle, T_MTR_DIRECTION p_direction)
{
 800b050:	b580      	push	{r7, lr}
 800b052:	b082      	sub	sp, #8
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
 800b058:	460b      	mov	r3, r1
 800b05a:	70fb      	strb	r3, [r7, #3]
  if (p_direction == p_handle->direction)
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	7d1b      	ldrb	r3, [r3, #20]
 800b060:	78fa      	ldrb	r2, [r7, #3]
 800b062:	429a      	cmp	r2, r3
 800b064:	d056      	beq.n	800b114 <MTR_setDirection+0xc4>
  {
    ; /* Nothing to do */
  }
  else
  {
    if (p_direction == MTR_DIRECTION_STOP)
 800b066:	78fb      	ldrb	r3, [r7, #3]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d119      	bne.n	800b0a0 <MTR_setDirection+0x50>
    {
      LOG_debug("%s motor STOP", p_handle->name);
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	461a      	mov	r2, r3
 800b072:	492a      	ldr	r1, [pc, #168]	; (800b11c <MTR_setDirection+0xcc>)
 800b074:	2000      	movs	r0, #0
 800b076:	f7ff fe99 	bl	800adac <LOG_log>

      HAL_GPIO_WritePin(p_handle->dirPin1Port, p_handle->dirPin1, GPIO_PIN_RESET);
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	6858      	ldr	r0, [r3, #4]
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	689b      	ldr	r3, [r3, #8]
 800b082:	b29b      	uxth	r3, r3
 800b084:	2200      	movs	r2, #0
 800b086:	4619      	mov	r1, r3
 800b088:	f7f9 f820 	bl	80040cc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(p_handle->dirPin2Port, p_handle->dirPin2, GPIO_PIN_RESET);
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	68d8      	ldr	r0, [r3, #12]
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	691b      	ldr	r3, [r3, #16]
 800b094:	b29b      	uxth	r3, r3
 800b096:	2200      	movs	r2, #0
 800b098:	4619      	mov	r1, r3
 800b09a:	f7f9 f817 	bl	80040cc <HAL_GPIO_WritePin>
 800b09e:	e035      	b.n	800b10c <MTR_setDirection+0xbc>
    }
    else if (p_direction == MTR_DIRECTION_FORWARD)
 800b0a0:	78fb      	ldrb	r3, [r7, #3]
 800b0a2:	2b01      	cmp	r3, #1
 800b0a4:	d119      	bne.n	800b0da <MTR_setDirection+0x8a>
    {
      LOG_debug("%s motor go FORWARD", p_handle->name);
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	461a      	mov	r2, r3
 800b0ac:	491c      	ldr	r1, [pc, #112]	; (800b120 <MTR_setDirection+0xd0>)
 800b0ae:	2000      	movs	r0, #0
 800b0b0:	f7ff fe7c 	bl	800adac <LOG_log>

      HAL_GPIO_WritePin(p_handle->dirPin1Port, p_handle->dirPin1, GPIO_PIN_SET  );
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	6858      	ldr	r0, [r3, #4]
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	689b      	ldr	r3, [r3, #8]
 800b0bc:	b29b      	uxth	r3, r3
 800b0be:	2201      	movs	r2, #1
 800b0c0:	4619      	mov	r1, r3
 800b0c2:	f7f9 f803 	bl	80040cc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(p_handle->dirPin2Port, p_handle->dirPin2, GPIO_PIN_RESET);
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	68d8      	ldr	r0, [r3, #12]
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	691b      	ldr	r3, [r3, #16]
 800b0ce:	b29b      	uxth	r3, r3
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	4619      	mov	r1, r3
 800b0d4:	f7f8 fffa 	bl	80040cc <HAL_GPIO_WritePin>
 800b0d8:	e018      	b.n	800b10c <MTR_setDirection+0xbc>
    }
    else
    {
      LOG_debug("%s motor go BACKWARD", p_handle->name);
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	461a      	mov	r2, r3
 800b0e0:	4910      	ldr	r1, [pc, #64]	; (800b124 <MTR_setDirection+0xd4>)
 800b0e2:	2000      	movs	r0, #0
 800b0e4:	f7ff fe62 	bl	800adac <LOG_log>

      HAL_GPIO_WritePin(p_handle->dirPin1Port, p_handle->dirPin1, GPIO_PIN_RESET);
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	6858      	ldr	r0, [r3, #4]
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	689b      	ldr	r3, [r3, #8]
 800b0f0:	b29b      	uxth	r3, r3
 800b0f2:	2200      	movs	r2, #0
 800b0f4:	4619      	mov	r1, r3
 800b0f6:	f7f8 ffe9 	bl	80040cc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(p_handle->dirPin2Port, p_handle->dirPin2, GPIO_PIN_SET  );
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	68d8      	ldr	r0, [r3, #12]
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	691b      	ldr	r3, [r3, #16]
 800b102:	b29b      	uxth	r3, r3
 800b104:	2201      	movs	r2, #1
 800b106:	4619      	mov	r1, r3
 800b108:	f7f8 ffe0 	bl	80040cc <HAL_GPIO_WritePin>
    }

    p_handle->direction = p_direction;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	78fa      	ldrb	r2, [r7, #3]
 800b110:	751a      	strb	r2, [r3, #20]
  }

  return;
 800b112:	bf00      	nop
 800b114:	bf00      	nop
}
 800b116:	3708      	adds	r7, #8
 800b118:	46bd      	mov	sp, r7
 800b11a:	bd80      	pop	{r7, pc}
 800b11c:	0800f73c 	.word	0x0800f73c
 800b120:	0800f74c 	.word	0x0800f74c
 800b124:	0800f760 	.word	0x0800f760

0800b128 <MTR_getDirection>:

T_MTR_DIRECTION MTR_getDirection(T_MTR_Handle *p_handle)
{
 800b128:	b480      	push	{r7}
 800b12a:	b083      	sub	sp, #12
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
  return p_handle->direction;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	7d1b      	ldrb	r3, [r3, #20]
}
 800b134:	4618      	mov	r0, r3
 800b136:	370c      	adds	r7, #12
 800b138:	46bd      	mov	sp, r7
 800b13a:	bc80      	pop	{r7}
 800b13c:	4770      	bx	lr
	...

0800b140 <MTR_setSpeed>:

void MTR_setSpeed(T_MTR_Handle *p_handle, uint32_t p_speed)
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b082      	sub	sp, #8
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
 800b148:	6039      	str	r1, [r7, #0]
  if (p_speed == p_handle->speed)
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	699b      	ldr	r3, [r3, #24]
 800b14e:	683a      	ldr	r2, [r7, #0]
 800b150:	429a      	cmp	r2, r3
 800b152:	d02d      	beq.n	800b1b0 <MTR_setSpeed+0x70>
  {
    ; /* Nothing to do */
  }
  else
  {
    LOG_debug("Setting  %s motor p_speed to %u", p_handle->name, p_speed);
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681a      	ldr	r2, [r3, #0]
 800b158:	683b      	ldr	r3, [r7, #0]
 800b15a:	4917      	ldr	r1, [pc, #92]	; (800b1b8 <MTR_setSpeed+0x78>)
 800b15c:	2000      	movs	r0, #0
 800b15e:	f7ff fe25 	bl	800adac <LOG_log>

    __HAL_TIM_SET_COMPARE(p_handle->pwmTimerHandle, p_handle->pwmChannel, p_speed);
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	6a1b      	ldr	r3, [r3, #32]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d105      	bne.n	800b176 <MTR_setSpeed+0x36>
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	69db      	ldr	r3, [r3, #28]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	683a      	ldr	r2, [r7, #0]
 800b172:	635a      	str	r2, [r3, #52]	; 0x34
 800b174:	e018      	b.n	800b1a8 <MTR_setSpeed+0x68>
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	6a1b      	ldr	r3, [r3, #32]
 800b17a:	2b04      	cmp	r3, #4
 800b17c:	d105      	bne.n	800b18a <MTR_setSpeed+0x4a>
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	69db      	ldr	r3, [r3, #28]
 800b182:	681a      	ldr	r2, [r3, #0]
 800b184:	683b      	ldr	r3, [r7, #0]
 800b186:	6393      	str	r3, [r2, #56]	; 0x38
 800b188:	e00e      	b.n	800b1a8 <MTR_setSpeed+0x68>
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	6a1b      	ldr	r3, [r3, #32]
 800b18e:	2b08      	cmp	r3, #8
 800b190:	d105      	bne.n	800b19e <MTR_setSpeed+0x5e>
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	69db      	ldr	r3, [r3, #28]
 800b196:	681a      	ldr	r2, [r3, #0]
 800b198:	683b      	ldr	r3, [r7, #0]
 800b19a:	63d3      	str	r3, [r2, #60]	; 0x3c
 800b19c:	e004      	b.n	800b1a8 <MTR_setSpeed+0x68>
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	69db      	ldr	r3, [r3, #28]
 800b1a2:	681a      	ldr	r2, [r3, #0]
 800b1a4:	683b      	ldr	r3, [r7, #0]
 800b1a6:	6413      	str	r3, [r2, #64]	; 0x40

    p_handle->speed = p_speed;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	683a      	ldr	r2, [r7, #0]
 800b1ac:	619a      	str	r2, [r3, #24]
  }

  return;
 800b1ae:	bf00      	nop
 800b1b0:	bf00      	nop
}
 800b1b2:	3708      	adds	r7, #8
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	bd80      	pop	{r7, pc}
 800b1b8:	0800f778 	.word	0x0800f778

0800b1bc <MTR_getSpeed>:

uint32_t MTR_getSpeed(T_MTR_Handle *p_handle)
{
 800b1bc:	b480      	push	{r7}
 800b1be:	b083      	sub	sp, #12
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
  return p_handle->speed;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	699b      	ldr	r3, [r3, #24]
}
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	370c      	adds	r7, #12
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	bc80      	pop	{r7}
 800b1d0:	4770      	bx	lr
	...

0800b1d4 <PID_init>:

#include "utils.h"
#include "log.h"

void PID_init(T_PID_Handle *p_handle, float p_kp, float p_ki, float p_kd, float p_targetValue, float p_minValue, float p_maxValue, float p_antiWindUpFactor)
{
 800b1d4:	b590      	push	{r4, r7, lr}
 800b1d6:	b085      	sub	sp, #20
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	60f8      	str	r0, [r7, #12]
 800b1dc:	60b9      	str	r1, [r7, #8]
 800b1de:	607a      	str	r2, [r7, #4]
 800b1e0:	603b      	str	r3, [r7, #0]
  LOG_info("Initializing PID");
 800b1e2:	492c      	ldr	r1, [pc, #176]	; (800b294 <PID_init+0xc0>)
 800b1e4:	2001      	movs	r0, #1
 800b1e6:	f7ff fde1 	bl	800adac <LOG_log>

  p_handle->kp              = p_kp;
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	68ba      	ldr	r2, [r7, #8]
 800b1ee:	601a      	str	r2, [r3, #0]
  p_handle->ki              = p_ki;
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	687a      	ldr	r2, [r7, #4]
 800b1f4:	605a      	str	r2, [r3, #4]
  p_handle->kd              = p_kd;
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	683a      	ldr	r2, [r7, #0]
 800b1fa:	609a      	str	r2, [r3, #8]
  p_handle->targetValue     = p_targetValue;
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	6a3a      	ldr	r2, [r7, #32]
 800b200:	60da      	str	r2, [r3, #12]
  p_handle->minValue        = p_minValue;
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b206:	611a      	str	r2, [r3, #16]
  p_handle->maxValue        = p_maxValue;
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b20c:	615a      	str	r2, [r3, #20]
  p_handle->antiWindUpValue = p_antiWindUpFactor * UTI_MAX(abs(p_handle->minValue), abs(p_handle->maxValue));
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	691b      	ldr	r3, [r3, #16]
 800b212:	4618      	mov	r0, r3
 800b214:	f7f5 ff02 	bl	800101c <__aeabi_f2iz>
 800b218:	4603      	mov	r3, r0
 800b21a:	ea83 74e3 	eor.w	r4, r3, r3, asr #31
 800b21e:	eba4 74e3 	sub.w	r4, r4, r3, asr #31
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	695b      	ldr	r3, [r3, #20]
 800b226:	4618      	mov	r0, r3
 800b228:	f7f5 fef8 	bl	800101c <__aeabi_f2iz>
 800b22c:	4603      	mov	r3, r0
 800b22e:	2b00      	cmp	r3, #0
 800b230:	bfb8      	it	lt
 800b232:	425b      	neglt	r3, r3
 800b234:	429c      	cmp	r4, r3
 800b236:	dd0d      	ble.n	800b254 <PID_init+0x80>
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	691b      	ldr	r3, [r3, #16]
 800b23c:	4618      	mov	r0, r3
 800b23e:	f7f5 feed 	bl	800101c <__aeabi_f2iz>
 800b242:	4603      	mov	r3, r0
 800b244:	2b00      	cmp	r3, #0
 800b246:	bfb8      	it	lt
 800b248:	425b      	neglt	r3, r3
 800b24a:	4618      	mov	r0, r3
 800b24c:	f7f5 fd42 	bl	8000cd4 <__aeabi_i2f>
 800b250:	4603      	mov	r3, r0
 800b252:	e00c      	b.n	800b26e <PID_init+0x9a>
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	695b      	ldr	r3, [r3, #20]
 800b258:	4618      	mov	r0, r3
 800b25a:	f7f5 fedf 	bl	800101c <__aeabi_f2iz>
 800b25e:	4603      	mov	r3, r0
 800b260:	2b00      	cmp	r3, #0
 800b262:	bfb8      	it	lt
 800b264:	425b      	neglt	r3, r3
 800b266:	4618      	mov	r0, r3
 800b268:	f7f5 fd34 	bl	8000cd4 <__aeabi_i2f>
 800b26c:	4603      	mov	r3, r0
 800b26e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b270:	4618      	mov	r0, r3
 800b272:	f7f5 fd83 	bl	8000d7c <__aeabi_fmul>
 800b276:	4603      	mov	r3, r0
 800b278:	461a      	mov	r2, r3
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	619a      	str	r2, [r3, #24]

  PID_reset  (p_handle);
 800b27e:	68f8      	ldr	r0, [r7, #12]
 800b280:	f000 f80a 	bl	800b298 <PID_reset>
  PID_logInfo(p_handle);
 800b284:	68f8      	ldr	r0, [r7, #12]
 800b286:	f000 f8eb 	bl	800b460 <PID_logInfo>

  return;
 800b28a:	bf00      	nop
}
 800b28c:	3714      	adds	r7, #20
 800b28e:	46bd      	mov	sp, r7
 800b290:	bd90      	pop	{r4, r7, pc}
 800b292:	bf00      	nop
 800b294:	0800f798 	.word	0x0800f798

0800b298 <PID_reset>:

void PID_reset(T_PID_Handle *p_handle)
{
 800b298:	b480      	push	{r7}
 800b29a:	b083      	sub	sp, #12
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
  p_handle->pValue        = 0.0f;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	f04f 0200 	mov.w	r2, #0
 800b2a6:	61da      	str	r2, [r3, #28]
  p_handle->iValue        = 0.0f;
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	f04f 0200 	mov.w	r2, #0
 800b2ae:	621a      	str	r2, [r3, #32]
  p_handle->dValue        = 0.0f;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	f04f 0200 	mov.w	r2, #0
 800b2b6:	625a      	str	r2, [r3, #36]	; 0x24
  p_handle->computedValue = 0.0f;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	f04f 0200 	mov.w	r2, #0
 800b2be:	629a      	str	r2, [r3, #40]	; 0x28
  p_handle->lastError     = 0.0f;
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	f04f 0200 	mov.w	r2, #0
 800b2c6:	62da      	str	r2, [r3, #44]	; 0x2c

  return;
 800b2c8:	bf00      	nop
}
 800b2ca:	370c      	adds	r7, #12
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	bc80      	pop	{r7}
 800b2d0:	4770      	bx	lr

0800b2d2 <PID_setTargetValue>:

  return;
}

void PID_setTargetValue(T_PID_Handle *p_handle, float p_targetValue)
{
 800b2d2:	b480      	push	{r7}
 800b2d4:	b083      	sub	sp, #12
 800b2d6:	af00      	add	r7, sp, #0
 800b2d8:	6078      	str	r0, [r7, #4]
 800b2da:	6039      	str	r1, [r7, #0]
  p_handle->targetValue = p_targetValue;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	683a      	ldr	r2, [r7, #0]
 800b2e0:	60da      	str	r2, [r3, #12]

  return;
 800b2e2:	bf00      	nop
}
 800b2e4:	370c      	adds	r7, #12
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	bc80      	pop	{r7}
 800b2ea:	4770      	bx	lr

0800b2ec <PID_update>:
{
  return p_handle->antiWindUpValue;
}

float PID_update(T_PID_Handle *p_handle, float p_currentValue, uint32_t p_timeDelta)
{
 800b2ec:	b5b0      	push	{r4, r5, r7, lr}
 800b2ee:	b088      	sub	sp, #32
 800b2f0:	af02      	add	r7, sp, #8
 800b2f2:	60f8      	str	r0, [r7, #12]
 800b2f4:	60b9      	str	r1, [r7, #8]
 800b2f6:	607a      	str	r2, [r7, #4]
  int32_t l_currentError;

  l_currentError = p_handle->targetValue - p_currentValue;
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	68db      	ldr	r3, [r3, #12]
 800b2fc:	68b9      	ldr	r1, [r7, #8]
 800b2fe:	4618      	mov	r0, r3
 800b300:	f7f5 fc32 	bl	8000b68 <__aeabi_fsub>
 800b304:	4603      	mov	r3, r0
 800b306:	4618      	mov	r0, r3
 800b308:	f7f5 fe88 	bl	800101c <__aeabi_f2iz>
 800b30c:	4603      	mov	r3, r0
 800b30e:	617b      	str	r3, [r7, #20]

  p_handle->pValue    =  l_currentError;
 800b310:	6978      	ldr	r0, [r7, #20]
 800b312:	f7f5 fcdf 	bl	8000cd4 <__aeabi_i2f>
 800b316:	4602      	mov	r2, r0
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	61da      	str	r2, [r3, #28]
  p_handle->iValue   +=  l_currentError * p_timeDelta;
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	6a1c      	ldr	r4, [r3, #32]
 800b320:	697b      	ldr	r3, [r7, #20]
 800b322:	687a      	ldr	r2, [r7, #4]
 800b324:	fb02 f303 	mul.w	r3, r2, r3
 800b328:	4618      	mov	r0, r3
 800b32a:	f7f5 fccf 	bl	8000ccc <__aeabi_ui2f>
 800b32e:	4603      	mov	r3, r0
 800b330:	4619      	mov	r1, r3
 800b332:	4620      	mov	r0, r4
 800b334:	f7f5 fc1a 	bl	8000b6c <__addsf3>
 800b338:	4603      	mov	r3, r0
 800b33a:	461a      	mov	r2, r3
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	621a      	str	r2, [r3, #32]
  p_handle->iValue    =  UTI_clampIntValue(p_handle->iValue, -p_handle->antiWindUpValue, p_handle->antiWindUpValue, true, 0);
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	6a1b      	ldr	r3, [r3, #32]
 800b344:	4618      	mov	r0, r3
 800b346:	f7f5 fe69 	bl	800101c <__aeabi_f2iz>
 800b34a:	4604      	mov	r4, r0
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	699b      	ldr	r3, [r3, #24]
 800b350:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800b354:	4618      	mov	r0, r3
 800b356:	f7f5 fe61 	bl	800101c <__aeabi_f2iz>
 800b35a:	4605      	mov	r5, r0
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	699b      	ldr	r3, [r3, #24]
 800b360:	4618      	mov	r0, r3
 800b362:	f7f5 fe5b 	bl	800101c <__aeabi_f2iz>
 800b366:	4602      	mov	r2, r0
 800b368:	2300      	movs	r3, #0
 800b36a:	9300      	str	r3, [sp, #0]
 800b36c:	2301      	movs	r3, #1
 800b36e:	4629      	mov	r1, r5
 800b370:	4620      	mov	r0, r4
 800b372:	f000 fa79 	bl	800b868 <UTI_clampIntValue>
 800b376:	4603      	mov	r3, r0
 800b378:	4618      	mov	r0, r3
 800b37a:	f7f5 fcab 	bl	8000cd4 <__aeabi_i2f>
 800b37e:	4602      	mov	r2, r0
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	621a      	str	r2, [r3, #32]
  p_handle->dValue    = (l_currentError - p_handle->lastError) / p_timeDelta;
 800b384:	6978      	ldr	r0, [r7, #20]
 800b386:	f7f5 fca5 	bl	8000cd4 <__aeabi_i2f>
 800b38a:	4602      	mov	r2, r0
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b390:	4619      	mov	r1, r3
 800b392:	4610      	mov	r0, r2
 800b394:	f7f5 fbe8 	bl	8000b68 <__aeabi_fsub>
 800b398:	4603      	mov	r3, r0
 800b39a:	461c      	mov	r4, r3
 800b39c:	6878      	ldr	r0, [r7, #4]
 800b39e:	f7f5 fc95 	bl	8000ccc <__aeabi_ui2f>
 800b3a2:	4603      	mov	r3, r0
 800b3a4:	4619      	mov	r1, r3
 800b3a6:	4620      	mov	r0, r4
 800b3a8:	f7f5 fd9c 	bl	8000ee4 <__aeabi_fdiv>
 800b3ac:	4603      	mov	r3, r0
 800b3ae:	461a      	mov	r2, r3
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	625a      	str	r2, [r3, #36]	; 0x24
  p_handle->lastError =  l_currentError;
 800b3b4:	6978      	ldr	r0, [r7, #20]
 800b3b6:	f7f5 fc8d 	bl	8000cd4 <__aeabi_i2f>
 800b3ba:	4602      	mov	r2, r0
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	62da      	str	r2, [r3, #44]	; 0x2c

  p_handle->computedValue = p_handle->kp * p_handle->pValue + p_handle->ki * p_handle->iValue + p_handle->kd * p_handle->dValue;
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	681a      	ldr	r2, [r3, #0]
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	69db      	ldr	r3, [r3, #28]
 800b3c8:	4619      	mov	r1, r3
 800b3ca:	4610      	mov	r0, r2
 800b3cc:	f7f5 fcd6 	bl	8000d7c <__aeabi_fmul>
 800b3d0:	4603      	mov	r3, r0
 800b3d2:	461c      	mov	r4, r3
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	685a      	ldr	r2, [r3, #4]
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	6a1b      	ldr	r3, [r3, #32]
 800b3dc:	4619      	mov	r1, r3
 800b3de:	4610      	mov	r0, r2
 800b3e0:	f7f5 fccc 	bl	8000d7c <__aeabi_fmul>
 800b3e4:	4603      	mov	r3, r0
 800b3e6:	4619      	mov	r1, r3
 800b3e8:	4620      	mov	r0, r4
 800b3ea:	f7f5 fbbf 	bl	8000b6c <__addsf3>
 800b3ee:	4603      	mov	r3, r0
 800b3f0:	461c      	mov	r4, r3
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	689a      	ldr	r2, [r3, #8]
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3fa:	4619      	mov	r1, r3
 800b3fc:	4610      	mov	r0, r2
 800b3fe:	f7f5 fcbd 	bl	8000d7c <__aeabi_fmul>
 800b402:	4603      	mov	r3, r0
 800b404:	4619      	mov	r1, r3
 800b406:	4620      	mov	r0, r4
 800b408:	f7f5 fbb0 	bl	8000b6c <__addsf3>
 800b40c:	4603      	mov	r3, r0
 800b40e:	461a      	mov	r2, r3
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	629a      	str	r2, [r3, #40]	; 0x28
  p_handle->computedValue = UTI_clampIntValue(p_handle->computedValue, p_handle->minValue, p_handle->maxValue, true, 0);
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b418:	4618      	mov	r0, r3
 800b41a:	f7f5 fdff 	bl	800101c <__aeabi_f2iz>
 800b41e:	4604      	mov	r4, r0
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	691b      	ldr	r3, [r3, #16]
 800b424:	4618      	mov	r0, r3
 800b426:	f7f5 fdf9 	bl	800101c <__aeabi_f2iz>
 800b42a:	4605      	mov	r5, r0
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	695b      	ldr	r3, [r3, #20]
 800b430:	4618      	mov	r0, r3
 800b432:	f7f5 fdf3 	bl	800101c <__aeabi_f2iz>
 800b436:	4602      	mov	r2, r0
 800b438:	2300      	movs	r3, #0
 800b43a:	9300      	str	r3, [sp, #0]
 800b43c:	2301      	movs	r3, #1
 800b43e:	4629      	mov	r1, r5
 800b440:	4620      	mov	r0, r4
 800b442:	f000 fa11 	bl	800b868 <UTI_clampIntValue>
 800b446:	4603      	mov	r3, r0
 800b448:	4618      	mov	r0, r3
 800b44a:	f7f5 fc43 	bl	8000cd4 <__aeabi_i2f>
 800b44e:	4602      	mov	r2, r0
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	629a      	str	r2, [r3, #40]	; 0x28

  return p_handle->computedValue;
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 800b458:	4618      	mov	r0, r3
 800b45a:	3718      	adds	r7, #24
 800b45c:	46bd      	mov	sp, r7
 800b45e:	bdb0      	pop	{r4, r5, r7, pc}

0800b460 <PID_logInfo>:

void PID_logInfo(T_PID_Handle *p_handle)
{
 800b460:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800b464:	b086      	sub	sp, #24
 800b466:	af04      	add	r7, sp, #16
 800b468:	6078      	str	r0, [r7, #4]
  LOG_info(" kp = %6.2f -  ki = %6.2f -     kd = %6.2f", p_handle->kp         , p_handle->ki      , p_handle->kd             );
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	4618      	mov	r0, r3
 800b470:	f7f5 f846 	bl	8000500 <__aeabi_f2d>
 800b474:	4680      	mov	r8, r0
 800b476:	4689      	mov	r9, r1
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	685b      	ldr	r3, [r3, #4]
 800b47c:	4618      	mov	r0, r3
 800b47e:	f7f5 f83f 	bl	8000500 <__aeabi_f2d>
 800b482:	4604      	mov	r4, r0
 800b484:	460d      	mov	r5, r1
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	689b      	ldr	r3, [r3, #8]
 800b48a:	4618      	mov	r0, r3
 800b48c:	f7f5 f838 	bl	8000500 <__aeabi_f2d>
 800b490:	4602      	mov	r2, r0
 800b492:	460b      	mov	r3, r1
 800b494:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b498:	e9cd 4500 	strd	r4, r5, [sp]
 800b49c:	4642      	mov	r2, r8
 800b49e:	464b      	mov	r3, r9
 800b4a0:	492e      	ldr	r1, [pc, #184]	; (800b55c <PID_logInfo+0xfc>)
 800b4a2:	2001      	movs	r0, #1
 800b4a4:	f7ff fc82 	bl	800adac <LOG_log>
  LOG_info("  p = %6.2f -   i = %6.2f -      d = %6.2f", p_handle->pValue     , p_handle->iValue  , p_handle->dValue         );
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	69db      	ldr	r3, [r3, #28]
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	f7f5 f827 	bl	8000500 <__aeabi_f2d>
 800b4b2:	4680      	mov	r8, r0
 800b4b4:	4689      	mov	r9, r1
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	6a1b      	ldr	r3, [r3, #32]
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	f7f5 f820 	bl	8000500 <__aeabi_f2d>
 800b4c0:	4604      	mov	r4, r0
 800b4c2:	460d      	mov	r5, r1
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	f7f5 f819 	bl	8000500 <__aeabi_f2d>
 800b4ce:	4602      	mov	r2, r0
 800b4d0:	460b      	mov	r3, r1
 800b4d2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b4d6:	e9cd 4500 	strd	r4, r5, [sp]
 800b4da:	4642      	mov	r2, r8
 800b4dc:	464b      	mov	r3, r9
 800b4de:	4920      	ldr	r1, [pc, #128]	; (800b560 <PID_logInfo+0x100>)
 800b4e0:	2001      	movs	r0, #1
 800b4e2:	f7ff fc63 	bl	800adac <LOG_log>
  LOG_info("min = %6.2f - max = %6.2f - a.w.up = %6.2f", p_handle->minValue   , p_handle->maxValue, p_handle->antiWindUpValue);
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	691b      	ldr	r3, [r3, #16]
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	f7f5 f808 	bl	8000500 <__aeabi_f2d>
 800b4f0:	4680      	mov	r8, r0
 800b4f2:	4689      	mov	r9, r1
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	695b      	ldr	r3, [r3, #20]
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	f7f5 f801 	bl	8000500 <__aeabi_f2d>
 800b4fe:	4604      	mov	r4, r0
 800b500:	460d      	mov	r5, r1
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	699b      	ldr	r3, [r3, #24]
 800b506:	4618      	mov	r0, r3
 800b508:	f7f4 fffa 	bl	8000500 <__aeabi_f2d>
 800b50c:	4602      	mov	r2, r0
 800b50e:	460b      	mov	r3, r1
 800b510:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b514:	e9cd 4500 	strd	r4, r5, [sp]
 800b518:	4642      	mov	r2, r8
 800b51a:	464b      	mov	r3, r9
 800b51c:	4911      	ldr	r1, [pc, #68]	; (800b564 <PID_logInfo+0x104>)
 800b51e:	2001      	movs	r0, #1
 800b520:	f7ff fc44 	bl	800adac <LOG_log>
  LOG_info("  t = %6.2f - val = %6.2f               ", p_handle->targetValue, p_handle->computedValue                      );
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	68db      	ldr	r3, [r3, #12]
 800b528:	4618      	mov	r0, r3
 800b52a:	f7f4 ffe9 	bl	8000500 <__aeabi_f2d>
 800b52e:	4604      	mov	r4, r0
 800b530:	460d      	mov	r5, r1
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b536:	4618      	mov	r0, r3
 800b538:	f7f4 ffe2 	bl	8000500 <__aeabi_f2d>
 800b53c:	4602      	mov	r2, r0
 800b53e:	460b      	mov	r3, r1
 800b540:	e9cd 2300 	strd	r2, r3, [sp]
 800b544:	4622      	mov	r2, r4
 800b546:	462b      	mov	r3, r5
 800b548:	4907      	ldr	r1, [pc, #28]	; (800b568 <PID_logInfo+0x108>)
 800b54a:	2001      	movs	r0, #1
 800b54c:	f7ff fc2e 	bl	800adac <LOG_log>

  return;
 800b550:	bf00      	nop
}
 800b552:	3708      	adds	r7, #8
 800b554:	46bd      	mov	sp, r7
 800b556:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800b55a:	bf00      	nop
 800b55c:	0800f7ac 	.word	0x0800f7ac
 800b560:	0800f7d8 	.word	0x0800f7d8
 800b564:	0800f804 	.word	0x0800f804
 800b568:	0800f830 	.word	0x0800f830

0800b56c <SFO_initData>:

#include "log.h"


void SFO_initData(T_SFO_data *p_data)
{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	b082      	sub	sp, #8
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
  (void)memset(p_data, 0, CST_STRING_FIFO_MAX_STRING_LENGTH);
 800b574:	2210      	movs	r2, #16
 800b576:	2100      	movs	r1, #0
 800b578:	6878      	ldr	r0, [r7, #4]
 800b57a:	f000 fa2b 	bl	800b9d4 <memset>

  return;
 800b57e:	bf00      	nop
}
 800b580:	3708      	adds	r7, #8
 800b582:	46bd      	mov	sp, r7
 800b584:	bd80      	pop	{r7, pc}
	...

0800b588 <SFO_init>:

void SFO_init(T_SFO_Context *p_fifo)
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b082      	sub	sp, #8
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
  LOG_debug("String FIFO now empty");
 800b590:	4908      	ldr	r1, [pc, #32]	; (800b5b4 <SFO_init+0x2c>)
 800b592:	2000      	movs	r0, #0
 800b594:	f7ff fc0a 	bl	800adac <LOG_log>

  p_fifo->head  = NULL;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	2200      	movs	r2, #0
 800b59c:	601a      	str	r2, [r3, #0]
  p_fifo->tail  = NULL;
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	605a      	str	r2, [r3, #4]
  p_fifo->count = 0;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	609a      	str	r2, [r3, #8]

  return;
 800b5aa:	bf00      	nop
}
 800b5ac:	3708      	adds	r7, #8
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	bd80      	pop	{r7, pc}
 800b5b2:	bf00      	nop
 800b5b4:	0800f85c 	.word	0x0800f85c

0800b5b8 <SFO_push>:

void SFO_push(T_SFO_Context *p_fifo, T_SFO_data *p_dataIn)
{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	b084      	sub	sp, #16
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]
 800b5c0:	6039      	str	r1, [r7, #0]
  T_SFO_Element *l_element;

  if (p_fifo->count == CST_STRING_FIFO_MAX_ELEMENTS)
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	689b      	ldr	r3, [r3, #8]
 800b5c6:	2b0a      	cmp	r3, #10
 800b5c8:	d105      	bne.n	800b5d6 <SFO_push+0x1e>
  {
    LOG_error("SFO_push() failure - String FIFO is full (%u elements)", CST_STRING_FIFO_MAX_ELEMENTS);
 800b5ca:	220a      	movs	r2, #10
 800b5cc:	4917      	ldr	r1, [pc, #92]	; (800b62c <SFO_push+0x74>)
 800b5ce:	2003      	movs	r0, #3
 800b5d0:	f7ff fbec 	bl	800adac <LOG_log>

      p_fifo->count++;
    }
  }

  return;
 800b5d4:	e027      	b.n	800b626 <SFO_push+0x6e>
    l_element = (T_SFO_Element *)malloc(sizeof(T_SFO_Element));
 800b5d6:	2014      	movs	r0, #20
 800b5d8:	f000 f9ec 	bl	800b9b4 <malloc>
 800b5dc:	4603      	mov	r3, r0
 800b5de:	60fb      	str	r3, [r7, #12]
    if (l_element == NULL)
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d104      	bne.n	800b5f0 <SFO_push+0x38>
      LOG_error("SFO_push() failure - Could not allocate new memory");
 800b5e6:	4912      	ldr	r1, [pc, #72]	; (800b630 <SFO_push+0x78>)
 800b5e8:	2003      	movs	r0, #3
 800b5ea:	f7ff fbdf 	bl	800adac <LOG_log>
  return;
 800b5ee:	e01a      	b.n	800b626 <SFO_push+0x6e>
      (void)strncpy(l_element->data, *p_dataIn, CST_STRING_FIFO_MAX_STRING_LENGTH);
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	2210      	movs	r2, #16
 800b5f4:	6839      	ldr	r1, [r7, #0]
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	f000 ff42 	bl	800c480 <strncpy>
      l_element->nextElement = p_fifo->head;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681a      	ldr	r2, [r3, #0]
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	611a      	str	r2, [r3, #16]
      p_fifo->head           = l_element;
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	68fa      	ldr	r2, [r7, #12]
 800b608:	601a      	str	r2, [r3, #0]
      if (p_fifo->tail == NULL)
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	685b      	ldr	r3, [r3, #4]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d103      	bne.n	800b61a <SFO_push+0x62>
        p_fifo->tail = p_fifo->head;
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	681a      	ldr	r2, [r3, #0]
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	605a      	str	r2, [r3, #4]
      p_fifo->count++;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	689b      	ldr	r3, [r3, #8]
 800b61e:	1c5a      	adds	r2, r3, #1
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	609a      	str	r2, [r3, #8]
  return;
 800b624:	bf00      	nop
}
 800b626:	3710      	adds	r7, #16
 800b628:	46bd      	mov	sp, r7
 800b62a:	bd80      	pop	{r7, pc}
 800b62c:	0800f874 	.word	0x0800f874
 800b630:	0800f8ac 	.word	0x0800f8ac

0800b634 <SFO_pop>:

void SFO_pop(T_SFO_Context *p_fifo, T_SFO_data *p_dataOut)
{
 800b634:	b580      	push	{r7, lr}
 800b636:	b084      	sub	sp, #16
 800b638:	af00      	add	r7, sp, #0
 800b63a:	6078      	str	r0, [r7, #4]
 800b63c:	6039      	str	r1, [r7, #0]
  T_SFO_Element *l_element;

  if (p_fifo->count == 0)
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	689b      	ldr	r3, [r3, #8]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d104      	bne.n	800b650 <SFO_pop+0x1c>
  {
    LOG_error("SFO_pop() failure - String FIFO is empty");
 800b646:	491a      	ldr	r1, [pc, #104]	; (800b6b0 <SFO_pop+0x7c>)
 800b648:	2003      	movs	r0, #3
 800b64a:	f7ff fbaf 	bl	800adac <LOG_log>
    {
      SFO_init(p_fifo);
    }
  }

  return;
 800b64e:	e02c      	b.n	800b6aa <SFO_pop+0x76>
    (void)strncpy(*p_dataOut, p_fifo->tail->data, CST_STRING_FIFO_MAX_STRING_LENGTH);
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	685b      	ldr	r3, [r3, #4]
 800b654:	2210      	movs	r2, #16
 800b656:	4619      	mov	r1, r3
 800b658:	6838      	ldr	r0, [r7, #0]
 800b65a:	f000 ff11 	bl	800c480 <strncpy>
    free(p_fifo->tail);
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	685b      	ldr	r3, [r3, #4]
 800b662:	4618      	mov	r0, r3
 800b664:	f000 f9ae 	bl	800b9c4 <free>
    if (p_fifo->count > 1)
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	689b      	ldr	r3, [r3, #8]
 800b66c:	2b01      	cmp	r3, #1
 800b66e:	d918      	bls.n	800b6a2 <SFO_pop+0x6e>
      l_element = p_fifo->head;
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	60fb      	str	r3, [r7, #12]
      while (l_element->nextElement != p_fifo->tail)
 800b676:	e002      	b.n	800b67e <SFO_pop+0x4a>
        l_element = l_element->nextElement;
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	691b      	ldr	r3, [r3, #16]
 800b67c:	60fb      	str	r3, [r7, #12]
      while (l_element->nextElement != p_fifo->tail)
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	691a      	ldr	r2, [r3, #16]
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	685b      	ldr	r3, [r3, #4]
 800b686:	429a      	cmp	r2, r3
 800b688:	d1f6      	bne.n	800b678 <SFO_pop+0x44>
      l_element->nextElement = NULL;
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	2200      	movs	r2, #0
 800b68e:	611a      	str	r2, [r3, #16]
      p_fifo->tail           = l_element;
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	68fa      	ldr	r2, [r7, #12]
 800b694:	605a      	str	r2, [r3, #4]
      p_fifo->count--;
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	689b      	ldr	r3, [r3, #8]
 800b69a:	1e5a      	subs	r2, r3, #1
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	609a      	str	r2, [r3, #8]
  return;
 800b6a0:	e003      	b.n	800b6aa <SFO_pop+0x76>
      SFO_init(p_fifo);
 800b6a2:	6878      	ldr	r0, [r7, #4]
 800b6a4:	f7ff ff70 	bl	800b588 <SFO_init>
  return;
 800b6a8:	bf00      	nop
}
 800b6aa:	3710      	adds	r7, #16
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	bd80      	pop	{r7, pc}
 800b6b0:	0800f8e0 	.word	0x0800f8e0

0800b6b4 <SFO_getCount>:

uint32_t SFO_getCount(T_SFO_Context *p_fifo)
{
 800b6b4:	b480      	push	{r7}
 800b6b6:	b083      	sub	sp, #12
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]
  return p_fifo->count;
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	689b      	ldr	r3, [r3, #8]
}
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	370c      	adds	r7, #12
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	bc80      	pop	{r7}
 800b6c8:	4770      	bx	lr
	...

0800b6cc <SFO_logInfo>:

void SFO_logInfo(T_SFO_Context *p_fifo)
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b084      	sub	sp, #16
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
  T_SFO_Element *l_element;

  if (p_fifo->count == 0)
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	689b      	ldr	r3, [r3, #8]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d104      	bne.n	800b6e6 <SFO_logInfo+0x1a>
  {
    LOG_info("String FIFO is empty");
 800b6dc:	4924      	ldr	r1, [pc, #144]	; (800b770 <SFO_logInfo+0xa4>)
 800b6de:	2001      	movs	r0, #1
 800b6e0:	f7ff fb64 	bl	800adac <LOG_log>

      l_element = l_element->nextElement;
    }
  }

  return;
 800b6e4:	e040      	b.n	800b768 <SFO_logInfo+0x9c>
    LOG_info("String FIFO: %u element(s)", p_fifo->count);
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	689b      	ldr	r3, [r3, #8]
 800b6ea:	461a      	mov	r2, r3
 800b6ec:	4921      	ldr	r1, [pc, #132]	; (800b774 <SFO_logInfo+0xa8>)
 800b6ee:	2001      	movs	r0, #1
 800b6f0:	f7ff fb5c 	bl	800adac <LOG_log>
    l_element = p_fifo->head;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	60fb      	str	r3, [r7, #12]
    while (l_element != NULL)
 800b6fa:	e031      	b.n	800b760 <SFO_logInfo+0x94>
      if ((l_element == p_fifo->head) && (l_element == p_fifo->tail))
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	68fa      	ldr	r2, [r7, #12]
 800b702:	429a      	cmp	r2, r3
 800b704:	d10b      	bne.n	800b71e <SFO_logInfo+0x52>
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	685b      	ldr	r3, [r3, #4]
 800b70a:	68fa      	ldr	r2, [r7, #12]
 800b70c:	429a      	cmp	r2, r3
 800b70e:	d106      	bne.n	800b71e <SFO_logInfo+0x52>
        LOG_info("HEAD -> '%s' <- TAIL", l_element->data);
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	461a      	mov	r2, r3
 800b714:	4918      	ldr	r1, [pc, #96]	; (800b778 <SFO_logInfo+0xac>)
 800b716:	2001      	movs	r0, #1
 800b718:	f7ff fb48 	bl	800adac <LOG_log>
 800b71c:	e01d      	b.n	800b75a <SFO_logInfo+0x8e>
      else if (l_element == p_fifo->head)
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	68fa      	ldr	r2, [r7, #12]
 800b724:	429a      	cmp	r2, r3
 800b726:	d106      	bne.n	800b736 <SFO_logInfo+0x6a>
        LOG_info("HEAD -> '%s'", l_element->data);
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	461a      	mov	r2, r3
 800b72c:	4913      	ldr	r1, [pc, #76]	; (800b77c <SFO_logInfo+0xb0>)
 800b72e:	2001      	movs	r0, #1
 800b730:	f7ff fb3c 	bl	800adac <LOG_log>
 800b734:	e011      	b.n	800b75a <SFO_logInfo+0x8e>
      else if (l_element == p_fifo->tail)
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	685b      	ldr	r3, [r3, #4]
 800b73a:	68fa      	ldr	r2, [r7, #12]
 800b73c:	429a      	cmp	r2, r3
 800b73e:	d106      	bne.n	800b74e <SFO_logInfo+0x82>
        LOG_info("TAIL -> '%s'", l_element->data);
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	461a      	mov	r2, r3
 800b744:	490e      	ldr	r1, [pc, #56]	; (800b780 <SFO_logInfo+0xb4>)
 800b746:	2001      	movs	r0, #1
 800b748:	f7ff fb30 	bl	800adac <LOG_log>
 800b74c:	e005      	b.n	800b75a <SFO_logInfo+0x8e>
        LOG_info("        '%s'", l_element->data);
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	461a      	mov	r2, r3
 800b752:	490c      	ldr	r1, [pc, #48]	; (800b784 <SFO_logInfo+0xb8>)
 800b754:	2001      	movs	r0, #1
 800b756:	f7ff fb29 	bl	800adac <LOG_log>
      l_element = l_element->nextElement;
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	691b      	ldr	r3, [r3, #16]
 800b75e:	60fb      	str	r3, [r7, #12]
    while (l_element != NULL)
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	2b00      	cmp	r3, #0
 800b764:	d1ca      	bne.n	800b6fc <SFO_logInfo+0x30>
  return;
 800b766:	bf00      	nop
}
 800b768:	3710      	adds	r7, #16
 800b76a:	46bd      	mov	sp, r7
 800b76c:	bd80      	pop	{r7, pc}
 800b76e:	bf00      	nop
 800b770:	0800f90c 	.word	0x0800f90c
 800b774:	0800f924 	.word	0x0800f924
 800b778:	0800f940 	.word	0x0800f940
 800b77c:	0800f958 	.word	0x0800f958
 800b780:	0800f968 	.word	0x0800f968
 800b784:	0800f978 	.word	0x0800f978

0800b788 <UTI_init>:
#include "log.h"

static TIM_HandleTypeDef *g_UTI_delayTimerHandle;

void UTI_init(TIM_HandleTypeDef *p_delayTimerHandle)
{
 800b788:	b580      	push	{r7, lr}
 800b78a:	b082      	sub	sp, #8
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
  LOG_info("Initializing utilities");
 800b790:	4905      	ldr	r1, [pc, #20]	; (800b7a8 <UTI_init+0x20>)
 800b792:	2001      	movs	r0, #1
 800b794:	f7ff fb0a 	bl	800adac <LOG_log>

  g_UTI_delayTimerHandle = p_delayTimerHandle;
 800b798:	4a04      	ldr	r2, [pc, #16]	; (800b7ac <UTI_init+0x24>)
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	6013      	str	r3, [r2, #0]

  return;
 800b79e:	bf00      	nop
}
 800b7a0:	3708      	adds	r7, #8
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	bd80      	pop	{r7, pc}
 800b7a6:	bf00      	nop
 800b7a8:	0800f988 	.word	0x0800f988
 800b7ac:	200004cc 	.word	0x200004cc

0800b7b0 <UTI_delayUs>:

void UTI_delayUs(uint16_t p_delay)
{
 800b7b0:	b480      	push	{r7}
 800b7b2:	b083      	sub	sp, #12
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	4603      	mov	r3, r0
 800b7b8:	80fb      	strh	r3, [r7, #6]
  /* Reset the micro-seconds counter */
  __HAL_TIM_SET_COUNTER(g_UTI_delayTimerHandle, 0);
 800b7ba:	4b09      	ldr	r3, [pc, #36]	; (800b7e0 <UTI_delayUs+0x30>)
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	2200      	movs	r2, #0
 800b7c2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Wait for the counter to reach the input micro-seconds number */
  while (__HAL_TIM_GET_COUNTER(g_UTI_delayTimerHandle) < p_delay)
 800b7c4:	bf00      	nop
 800b7c6:	4b06      	ldr	r3, [pc, #24]	; (800b7e0 <UTI_delayUs+0x30>)
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b7ce:	88fb      	ldrh	r3, [r7, #6]
 800b7d0:	429a      	cmp	r2, r3
 800b7d2:	d3f8      	bcc.n	800b7c6 <UTI_delayUs+0x16>
  {
    ; /* Nothing to do */
  }

  return;
 800b7d4:	bf00      	nop
}
 800b7d6:	370c      	adds	r7, #12
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	bc80      	pop	{r7}
 800b7dc:	4770      	bx	lr
 800b7de:	bf00      	nop
 800b7e0:	200004cc 	.word	0x200004cc

0800b7e4 <UTI_resetRtcDate>:

void UTI_resetRtcDate(RTC_DateTypeDef *p_date)
{
 800b7e4:	b480      	push	{r7}
 800b7e6:	b083      	sub	sp, #12
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
  p_date->Date    = 0;
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	709a      	strb	r2, [r3, #2]
  p_date->Month   = 0;
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	2200      	movs	r2, #0
 800b7f6:	705a      	strb	r2, [r3, #1]
  p_date->WeekDay = 0;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	701a      	strb	r2, [r3, #0]
  p_date->Year    = 0;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	2200      	movs	r2, #0
 800b802:	70da      	strb	r2, [r3, #3]

  return;
 800b804:	bf00      	nop
}
 800b806:	370c      	adds	r7, #12
 800b808:	46bd      	mov	sp, r7
 800b80a:	bc80      	pop	{r7}
 800b80c:	4770      	bx	lr

0800b80e <UTI_resetRtcTime>:


void UTI_resetRtcTime(RTC_TimeTypeDef *p_time)
{
 800b80e:	b480      	push	{r7}
 800b810:	b083      	sub	sp, #12
 800b812:	af00      	add	r7, sp, #0
 800b814:	6078      	str	r0, [r7, #4]
  p_time->Hours   = 0;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	2200      	movs	r2, #0
 800b81a:	701a      	strb	r2, [r3, #0]
  p_time->Minutes = 0;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	2200      	movs	r2, #0
 800b820:	705a      	strb	r2, [r3, #1]
  p_time->Seconds = 0;
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	2200      	movs	r2, #0
 800b826:	709a      	strb	r2, [r3, #2]

  return;
 800b828:	bf00      	nop
}
 800b82a:	370c      	adds	r7, #12
 800b82c:	46bd      	mov	sp, r7
 800b82e:	bc80      	pop	{r7}
 800b830:	4770      	bx	lr

0800b832 <UTI_turnRtcTimeToSeconds>:

uint32_t UTI_turnRtcTimeToSeconds(RTC_TimeTypeDef *p_time)
{
 800b832:	b480      	push	{r7}
 800b834:	b083      	sub	sp, #12
 800b836:	af00      	add	r7, sp, #0
 800b838:	6078      	str	r0, [r7, #4]
  return p_time->Hours * 3600 + p_time->Minutes * 60 + p_time->Seconds;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	781b      	ldrb	r3, [r3, #0]
 800b83e:	461a      	mov	r2, r3
 800b840:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800b844:	fb03 f202 	mul.w	r2, r3, r2
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	785b      	ldrb	r3, [r3, #1]
 800b84c:	4619      	mov	r1, r3
 800b84e:	460b      	mov	r3, r1
 800b850:	011b      	lsls	r3, r3, #4
 800b852:	1a5b      	subs	r3, r3, r1
 800b854:	009b      	lsls	r3, r3, #2
 800b856:	4413      	add	r3, r2
 800b858:	687a      	ldr	r2, [r7, #4]
 800b85a:	7892      	ldrb	r2, [r2, #2]
 800b85c:	4413      	add	r3, r2
}
 800b85e:	4618      	mov	r0, r3
 800b860:	370c      	adds	r7, #12
 800b862:	46bd      	mov	sp, r7
 800b864:	bc80      	pop	{r7}
 800b866:	4770      	bx	lr

0800b868 <UTI_clampIntValue>:

int32_t UTI_clampIntValue(int32_t p_value, int32_t p_minValue, int32_t p_maxValue, bool p_clampToNearest, int32_t p_clampValue)
{
 800b868:	b480      	push	{r7}
 800b86a:	b087      	sub	sp, #28
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	60f8      	str	r0, [r7, #12]
 800b870:	60b9      	str	r1, [r7, #8]
 800b872:	607a      	str	r2, [r7, #4]
 800b874:	70fb      	strb	r3, [r7, #3]
  int32_t l_returnValue;

  if (p_value < p_minValue)
 800b876:	68fa      	ldr	r2, [r7, #12]
 800b878:	68bb      	ldr	r3, [r7, #8]
 800b87a:	429a      	cmp	r2, r3
 800b87c:	da08      	bge.n	800b890 <UTI_clampIntValue+0x28>
  {
    if (p_clampToNearest == true)
 800b87e:	78fb      	ldrb	r3, [r7, #3]
 800b880:	2b00      	cmp	r3, #0
 800b882:	d002      	beq.n	800b88a <UTI_clampIntValue+0x22>
    {
      l_returnValue = p_minValue;
 800b884:	68bb      	ldr	r3, [r7, #8]
 800b886:	617b      	str	r3, [r7, #20]
 800b888:	e011      	b.n	800b8ae <UTI_clampIntValue+0x46>
    }
    else
    {
      l_returnValue = p_clampValue;
 800b88a:	6a3b      	ldr	r3, [r7, #32]
 800b88c:	617b      	str	r3, [r7, #20]
 800b88e:	e00e      	b.n	800b8ae <UTI_clampIntValue+0x46>
    }
  }
  else if (p_value > p_maxValue)
 800b890:	68fa      	ldr	r2, [r7, #12]
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	429a      	cmp	r2, r3
 800b896:	dd08      	ble.n	800b8aa <UTI_clampIntValue+0x42>
  {
    if (p_clampToNearest == true)
 800b898:	78fb      	ldrb	r3, [r7, #3]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d002      	beq.n	800b8a4 <UTI_clampIntValue+0x3c>
    {
      l_returnValue = p_maxValue;
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	617b      	str	r3, [r7, #20]
 800b8a2:	e004      	b.n	800b8ae <UTI_clampIntValue+0x46>
    }
    else
    {
      l_returnValue = p_clampValue;
 800b8a4:	6a3b      	ldr	r3, [r7, #32]
 800b8a6:	617b      	str	r3, [r7, #20]
 800b8a8:	e001      	b.n	800b8ae <UTI_clampIntValue+0x46>
    }
  }
  else
  {
    l_returnValue = p_value;
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	617b      	str	r3, [r7, #20]
  }

  return l_returnValue;
 800b8ae:	697b      	ldr	r3, [r7, #20]
}
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	371c      	adds	r7, #28
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	bc80      	pop	{r7}
 800b8b8:	4770      	bx	lr

0800b8ba <UTI_normalizeIntValue>:

  return l_returnValue;
}

int32_t UTI_normalizeIntValue(int32_t p_value, int32_t p_inMinValue, int32_t p_inMaxValue, int32_t p_outMinValue, int32_t p_outMaxValue, bool p_isInversionNeeded)
{
 800b8ba:	b5b0      	push	{r4, r5, r7, lr}
 800b8bc:	b086      	sub	sp, #24
 800b8be:	af00      	add	r7, sp, #0
 800b8c0:	60f8      	str	r0, [r7, #12]
 800b8c2:	60b9      	str	r1, [r7, #8]
 800b8c4:	607a      	str	r2, [r7, #4]
 800b8c6:	603b      	str	r3, [r7, #0]
  float l_returnValue;
  float l_ratio;

  l_ratio       = ((float)p_outMaxValue - (float)p_outMinValue) / ((float)p_inMaxValue - (float)p_inMinValue);
 800b8c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b8ca:	f7f5 fa03 	bl	8000cd4 <__aeabi_i2f>
 800b8ce:	4604      	mov	r4, r0
 800b8d0:	6838      	ldr	r0, [r7, #0]
 800b8d2:	f7f5 f9ff 	bl	8000cd4 <__aeabi_i2f>
 800b8d6:	4603      	mov	r3, r0
 800b8d8:	4619      	mov	r1, r3
 800b8da:	4620      	mov	r0, r4
 800b8dc:	f7f5 f944 	bl	8000b68 <__aeabi_fsub>
 800b8e0:	4603      	mov	r3, r0
 800b8e2:	461d      	mov	r5, r3
 800b8e4:	6878      	ldr	r0, [r7, #4]
 800b8e6:	f7f5 f9f5 	bl	8000cd4 <__aeabi_i2f>
 800b8ea:	4604      	mov	r4, r0
 800b8ec:	68b8      	ldr	r0, [r7, #8]
 800b8ee:	f7f5 f9f1 	bl	8000cd4 <__aeabi_i2f>
 800b8f2:	4603      	mov	r3, r0
 800b8f4:	4619      	mov	r1, r3
 800b8f6:	4620      	mov	r0, r4
 800b8f8:	f7f5 f936 	bl	8000b68 <__aeabi_fsub>
 800b8fc:	4603      	mov	r3, r0
 800b8fe:	4619      	mov	r1, r3
 800b900:	4628      	mov	r0, r5
 800b902:	f7f5 faef 	bl	8000ee4 <__aeabi_fdiv>
 800b906:	4603      	mov	r3, r0
 800b908:	613b      	str	r3, [r7, #16]
  l_returnValue =  (float)(p_value - p_inMinValue) * l_ratio + p_outMinValue;
 800b90a:	68fa      	ldr	r2, [r7, #12]
 800b90c:	68bb      	ldr	r3, [r7, #8]
 800b90e:	1ad3      	subs	r3, r2, r3
 800b910:	4618      	mov	r0, r3
 800b912:	f7f5 f9df 	bl	8000cd4 <__aeabi_i2f>
 800b916:	4603      	mov	r3, r0
 800b918:	6939      	ldr	r1, [r7, #16]
 800b91a:	4618      	mov	r0, r3
 800b91c:	f7f5 fa2e 	bl	8000d7c <__aeabi_fmul>
 800b920:	4603      	mov	r3, r0
 800b922:	461c      	mov	r4, r3
 800b924:	6838      	ldr	r0, [r7, #0]
 800b926:	f7f5 f9d5 	bl	8000cd4 <__aeabi_i2f>
 800b92a:	4603      	mov	r3, r0
 800b92c:	4619      	mov	r1, r3
 800b92e:	4620      	mov	r0, r4
 800b930:	f7f5 f91c 	bl	8000b6c <__addsf3>
 800b934:	4603      	mov	r3, r0
 800b936:	617b      	str	r3, [r7, #20]

  if (p_isInversionNeeded == true)
 800b938:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d003      	beq.n	800b948 <UTI_normalizeIntValue+0x8e>
  {
    l_returnValue *= -1.0f;
 800b940:	697b      	ldr	r3, [r7, #20]
 800b942:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800b946:	617b      	str	r3, [r7, #20]
  else
  {
    ; /* Nothing to do */
  }

  return (int32_t)l_returnValue;
 800b948:	6978      	ldr	r0, [r7, #20]
 800b94a:	f7f5 fb67 	bl	800101c <__aeabi_f2iz>
 800b94e:	4603      	mov	r3, r0
}
 800b950:	4618      	mov	r0, r3
 800b952:	3718      	adds	r7, #24
 800b954:	46bd      	mov	sp, r7
 800b956:	bdb0      	pop	{r4, r5, r7, pc}

0800b958 <atoi>:
 800b958:	220a      	movs	r2, #10
 800b95a:	2100      	movs	r1, #0
 800b95c:	f000 be36 	b.w	800c5cc <strtol>

0800b960 <__errno>:
 800b960:	4b01      	ldr	r3, [pc, #4]	; (800b968 <__errno+0x8>)
 800b962:	6818      	ldr	r0, [r3, #0]
 800b964:	4770      	bx	lr
 800b966:	bf00      	nop
 800b968:	2000001c 	.word	0x2000001c

0800b96c <__libc_init_array>:
 800b96c:	b570      	push	{r4, r5, r6, lr}
 800b96e:	2600      	movs	r6, #0
 800b970:	4d0c      	ldr	r5, [pc, #48]	; (800b9a4 <__libc_init_array+0x38>)
 800b972:	4c0d      	ldr	r4, [pc, #52]	; (800b9a8 <__libc_init_array+0x3c>)
 800b974:	1b64      	subs	r4, r4, r5
 800b976:	10a4      	asrs	r4, r4, #2
 800b978:	42a6      	cmp	r6, r4
 800b97a:	d109      	bne.n	800b990 <__libc_init_array+0x24>
 800b97c:	f002 ffc4 	bl	800e908 <_init>
 800b980:	2600      	movs	r6, #0
 800b982:	4d0a      	ldr	r5, [pc, #40]	; (800b9ac <__libc_init_array+0x40>)
 800b984:	4c0a      	ldr	r4, [pc, #40]	; (800b9b0 <__libc_init_array+0x44>)
 800b986:	1b64      	subs	r4, r4, r5
 800b988:	10a4      	asrs	r4, r4, #2
 800b98a:	42a6      	cmp	r6, r4
 800b98c:	d105      	bne.n	800b99a <__libc_init_array+0x2e>
 800b98e:	bd70      	pop	{r4, r5, r6, pc}
 800b990:	f855 3b04 	ldr.w	r3, [r5], #4
 800b994:	4798      	blx	r3
 800b996:	3601      	adds	r6, #1
 800b998:	e7ee      	b.n	800b978 <__libc_init_array+0xc>
 800b99a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b99e:	4798      	blx	r3
 800b9a0:	3601      	adds	r6, #1
 800b9a2:	e7f2      	b.n	800b98a <__libc_init_array+0x1e>
 800b9a4:	0800fd9c 	.word	0x0800fd9c
 800b9a8:	0800fd9c 	.word	0x0800fd9c
 800b9ac:	0800fd9c 	.word	0x0800fd9c
 800b9b0:	0800fda0 	.word	0x0800fda0

0800b9b4 <malloc>:
 800b9b4:	4b02      	ldr	r3, [pc, #8]	; (800b9c0 <malloc+0xc>)
 800b9b6:	4601      	mov	r1, r0
 800b9b8:	6818      	ldr	r0, [r3, #0]
 800b9ba:	f000 b85f 	b.w	800ba7c <_malloc_r>
 800b9be:	bf00      	nop
 800b9c0:	2000001c 	.word	0x2000001c

0800b9c4 <free>:
 800b9c4:	4b02      	ldr	r3, [pc, #8]	; (800b9d0 <free+0xc>)
 800b9c6:	4601      	mov	r1, r0
 800b9c8:	6818      	ldr	r0, [r3, #0]
 800b9ca:	f000 b80b 	b.w	800b9e4 <_free_r>
 800b9ce:	bf00      	nop
 800b9d0:	2000001c 	.word	0x2000001c

0800b9d4 <memset>:
 800b9d4:	4603      	mov	r3, r0
 800b9d6:	4402      	add	r2, r0
 800b9d8:	4293      	cmp	r3, r2
 800b9da:	d100      	bne.n	800b9de <memset+0xa>
 800b9dc:	4770      	bx	lr
 800b9de:	f803 1b01 	strb.w	r1, [r3], #1
 800b9e2:	e7f9      	b.n	800b9d8 <memset+0x4>

0800b9e4 <_free_r>:
 800b9e4:	b538      	push	{r3, r4, r5, lr}
 800b9e6:	4605      	mov	r5, r0
 800b9e8:	2900      	cmp	r1, #0
 800b9ea:	d043      	beq.n	800ba74 <_free_r+0x90>
 800b9ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b9f0:	1f0c      	subs	r4, r1, #4
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	bfb8      	it	lt
 800b9f6:	18e4      	addlt	r4, r4, r3
 800b9f8:	f001 fdc2 	bl	800d580 <__malloc_lock>
 800b9fc:	4a1e      	ldr	r2, [pc, #120]	; (800ba78 <_free_r+0x94>)
 800b9fe:	6813      	ldr	r3, [r2, #0]
 800ba00:	4610      	mov	r0, r2
 800ba02:	b933      	cbnz	r3, 800ba12 <_free_r+0x2e>
 800ba04:	6063      	str	r3, [r4, #4]
 800ba06:	6014      	str	r4, [r2, #0]
 800ba08:	4628      	mov	r0, r5
 800ba0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba0e:	f001 bdbd 	b.w	800d58c <__malloc_unlock>
 800ba12:	42a3      	cmp	r3, r4
 800ba14:	d90a      	bls.n	800ba2c <_free_r+0x48>
 800ba16:	6821      	ldr	r1, [r4, #0]
 800ba18:	1862      	adds	r2, r4, r1
 800ba1a:	4293      	cmp	r3, r2
 800ba1c:	bf01      	itttt	eq
 800ba1e:	681a      	ldreq	r2, [r3, #0]
 800ba20:	685b      	ldreq	r3, [r3, #4]
 800ba22:	1852      	addeq	r2, r2, r1
 800ba24:	6022      	streq	r2, [r4, #0]
 800ba26:	6063      	str	r3, [r4, #4]
 800ba28:	6004      	str	r4, [r0, #0]
 800ba2a:	e7ed      	b.n	800ba08 <_free_r+0x24>
 800ba2c:	461a      	mov	r2, r3
 800ba2e:	685b      	ldr	r3, [r3, #4]
 800ba30:	b10b      	cbz	r3, 800ba36 <_free_r+0x52>
 800ba32:	42a3      	cmp	r3, r4
 800ba34:	d9fa      	bls.n	800ba2c <_free_r+0x48>
 800ba36:	6811      	ldr	r1, [r2, #0]
 800ba38:	1850      	adds	r0, r2, r1
 800ba3a:	42a0      	cmp	r0, r4
 800ba3c:	d10b      	bne.n	800ba56 <_free_r+0x72>
 800ba3e:	6820      	ldr	r0, [r4, #0]
 800ba40:	4401      	add	r1, r0
 800ba42:	1850      	adds	r0, r2, r1
 800ba44:	4283      	cmp	r3, r0
 800ba46:	6011      	str	r1, [r2, #0]
 800ba48:	d1de      	bne.n	800ba08 <_free_r+0x24>
 800ba4a:	6818      	ldr	r0, [r3, #0]
 800ba4c:	685b      	ldr	r3, [r3, #4]
 800ba4e:	4401      	add	r1, r0
 800ba50:	6011      	str	r1, [r2, #0]
 800ba52:	6053      	str	r3, [r2, #4]
 800ba54:	e7d8      	b.n	800ba08 <_free_r+0x24>
 800ba56:	d902      	bls.n	800ba5e <_free_r+0x7a>
 800ba58:	230c      	movs	r3, #12
 800ba5a:	602b      	str	r3, [r5, #0]
 800ba5c:	e7d4      	b.n	800ba08 <_free_r+0x24>
 800ba5e:	6820      	ldr	r0, [r4, #0]
 800ba60:	1821      	adds	r1, r4, r0
 800ba62:	428b      	cmp	r3, r1
 800ba64:	bf01      	itttt	eq
 800ba66:	6819      	ldreq	r1, [r3, #0]
 800ba68:	685b      	ldreq	r3, [r3, #4]
 800ba6a:	1809      	addeq	r1, r1, r0
 800ba6c:	6021      	streq	r1, [r4, #0]
 800ba6e:	6063      	str	r3, [r4, #4]
 800ba70:	6054      	str	r4, [r2, #4]
 800ba72:	e7c9      	b.n	800ba08 <_free_r+0x24>
 800ba74:	bd38      	pop	{r3, r4, r5, pc}
 800ba76:	bf00      	nop
 800ba78:	200004d0 	.word	0x200004d0

0800ba7c <_malloc_r>:
 800ba7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba7e:	1ccd      	adds	r5, r1, #3
 800ba80:	f025 0503 	bic.w	r5, r5, #3
 800ba84:	3508      	adds	r5, #8
 800ba86:	2d0c      	cmp	r5, #12
 800ba88:	bf38      	it	cc
 800ba8a:	250c      	movcc	r5, #12
 800ba8c:	2d00      	cmp	r5, #0
 800ba8e:	4606      	mov	r6, r0
 800ba90:	db01      	blt.n	800ba96 <_malloc_r+0x1a>
 800ba92:	42a9      	cmp	r1, r5
 800ba94:	d903      	bls.n	800ba9e <_malloc_r+0x22>
 800ba96:	230c      	movs	r3, #12
 800ba98:	6033      	str	r3, [r6, #0]
 800ba9a:	2000      	movs	r0, #0
 800ba9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba9e:	f001 fd6f 	bl	800d580 <__malloc_lock>
 800baa2:	4921      	ldr	r1, [pc, #132]	; (800bb28 <_malloc_r+0xac>)
 800baa4:	680a      	ldr	r2, [r1, #0]
 800baa6:	4614      	mov	r4, r2
 800baa8:	b99c      	cbnz	r4, 800bad2 <_malloc_r+0x56>
 800baaa:	4f20      	ldr	r7, [pc, #128]	; (800bb2c <_malloc_r+0xb0>)
 800baac:	683b      	ldr	r3, [r7, #0]
 800baae:	b923      	cbnz	r3, 800baba <_malloc_r+0x3e>
 800bab0:	4621      	mov	r1, r4
 800bab2:	4630      	mov	r0, r6
 800bab4:	f000 fcb4 	bl	800c420 <_sbrk_r>
 800bab8:	6038      	str	r0, [r7, #0]
 800baba:	4629      	mov	r1, r5
 800babc:	4630      	mov	r0, r6
 800babe:	f000 fcaf 	bl	800c420 <_sbrk_r>
 800bac2:	1c43      	adds	r3, r0, #1
 800bac4:	d123      	bne.n	800bb0e <_malloc_r+0x92>
 800bac6:	230c      	movs	r3, #12
 800bac8:	4630      	mov	r0, r6
 800baca:	6033      	str	r3, [r6, #0]
 800bacc:	f001 fd5e 	bl	800d58c <__malloc_unlock>
 800bad0:	e7e3      	b.n	800ba9a <_malloc_r+0x1e>
 800bad2:	6823      	ldr	r3, [r4, #0]
 800bad4:	1b5b      	subs	r3, r3, r5
 800bad6:	d417      	bmi.n	800bb08 <_malloc_r+0x8c>
 800bad8:	2b0b      	cmp	r3, #11
 800bada:	d903      	bls.n	800bae4 <_malloc_r+0x68>
 800badc:	6023      	str	r3, [r4, #0]
 800bade:	441c      	add	r4, r3
 800bae0:	6025      	str	r5, [r4, #0]
 800bae2:	e004      	b.n	800baee <_malloc_r+0x72>
 800bae4:	6863      	ldr	r3, [r4, #4]
 800bae6:	42a2      	cmp	r2, r4
 800bae8:	bf0c      	ite	eq
 800baea:	600b      	streq	r3, [r1, #0]
 800baec:	6053      	strne	r3, [r2, #4]
 800baee:	4630      	mov	r0, r6
 800baf0:	f001 fd4c 	bl	800d58c <__malloc_unlock>
 800baf4:	f104 000b 	add.w	r0, r4, #11
 800baf8:	1d23      	adds	r3, r4, #4
 800bafa:	f020 0007 	bic.w	r0, r0, #7
 800bafe:	1ac2      	subs	r2, r0, r3
 800bb00:	d0cc      	beq.n	800ba9c <_malloc_r+0x20>
 800bb02:	1a1b      	subs	r3, r3, r0
 800bb04:	50a3      	str	r3, [r4, r2]
 800bb06:	e7c9      	b.n	800ba9c <_malloc_r+0x20>
 800bb08:	4622      	mov	r2, r4
 800bb0a:	6864      	ldr	r4, [r4, #4]
 800bb0c:	e7cc      	b.n	800baa8 <_malloc_r+0x2c>
 800bb0e:	1cc4      	adds	r4, r0, #3
 800bb10:	f024 0403 	bic.w	r4, r4, #3
 800bb14:	42a0      	cmp	r0, r4
 800bb16:	d0e3      	beq.n	800bae0 <_malloc_r+0x64>
 800bb18:	1a21      	subs	r1, r4, r0
 800bb1a:	4630      	mov	r0, r6
 800bb1c:	f000 fc80 	bl	800c420 <_sbrk_r>
 800bb20:	3001      	adds	r0, #1
 800bb22:	d1dd      	bne.n	800bae0 <_malloc_r+0x64>
 800bb24:	e7cf      	b.n	800bac6 <_malloc_r+0x4a>
 800bb26:	bf00      	nop
 800bb28:	200004d0 	.word	0x200004d0
 800bb2c:	200004d4 	.word	0x200004d4

0800bb30 <__cvt>:
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb36:	461f      	mov	r7, r3
 800bb38:	bfbb      	ittet	lt
 800bb3a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800bb3e:	461f      	movlt	r7, r3
 800bb40:	2300      	movge	r3, #0
 800bb42:	232d      	movlt	r3, #45	; 0x2d
 800bb44:	b088      	sub	sp, #32
 800bb46:	4614      	mov	r4, r2
 800bb48:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bb4a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800bb4c:	7013      	strb	r3, [r2, #0]
 800bb4e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bb50:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800bb54:	f023 0820 	bic.w	r8, r3, #32
 800bb58:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bb5c:	d005      	beq.n	800bb6a <__cvt+0x3a>
 800bb5e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800bb62:	d100      	bne.n	800bb66 <__cvt+0x36>
 800bb64:	3501      	adds	r5, #1
 800bb66:	2302      	movs	r3, #2
 800bb68:	e000      	b.n	800bb6c <__cvt+0x3c>
 800bb6a:	2303      	movs	r3, #3
 800bb6c:	aa07      	add	r2, sp, #28
 800bb6e:	9204      	str	r2, [sp, #16]
 800bb70:	aa06      	add	r2, sp, #24
 800bb72:	e9cd a202 	strd	sl, r2, [sp, #8]
 800bb76:	e9cd 3500 	strd	r3, r5, [sp]
 800bb7a:	4622      	mov	r2, r4
 800bb7c:	463b      	mov	r3, r7
 800bb7e:	f000 fdf7 	bl	800c770 <_dtoa_r>
 800bb82:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800bb86:	4606      	mov	r6, r0
 800bb88:	d102      	bne.n	800bb90 <__cvt+0x60>
 800bb8a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bb8c:	07db      	lsls	r3, r3, #31
 800bb8e:	d522      	bpl.n	800bbd6 <__cvt+0xa6>
 800bb90:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bb94:	eb06 0905 	add.w	r9, r6, r5
 800bb98:	d110      	bne.n	800bbbc <__cvt+0x8c>
 800bb9a:	7833      	ldrb	r3, [r6, #0]
 800bb9c:	2b30      	cmp	r3, #48	; 0x30
 800bb9e:	d10a      	bne.n	800bbb6 <__cvt+0x86>
 800bba0:	2200      	movs	r2, #0
 800bba2:	2300      	movs	r3, #0
 800bba4:	4620      	mov	r0, r4
 800bba6:	4639      	mov	r1, r7
 800bba8:	f7f4 ff6a 	bl	8000a80 <__aeabi_dcmpeq>
 800bbac:	b918      	cbnz	r0, 800bbb6 <__cvt+0x86>
 800bbae:	f1c5 0501 	rsb	r5, r5, #1
 800bbb2:	f8ca 5000 	str.w	r5, [sl]
 800bbb6:	f8da 3000 	ldr.w	r3, [sl]
 800bbba:	4499      	add	r9, r3
 800bbbc:	2200      	movs	r2, #0
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	4620      	mov	r0, r4
 800bbc2:	4639      	mov	r1, r7
 800bbc4:	f7f4 ff5c 	bl	8000a80 <__aeabi_dcmpeq>
 800bbc8:	b108      	cbz	r0, 800bbce <__cvt+0x9e>
 800bbca:	f8cd 901c 	str.w	r9, [sp, #28]
 800bbce:	2230      	movs	r2, #48	; 0x30
 800bbd0:	9b07      	ldr	r3, [sp, #28]
 800bbd2:	454b      	cmp	r3, r9
 800bbd4:	d307      	bcc.n	800bbe6 <__cvt+0xb6>
 800bbd6:	4630      	mov	r0, r6
 800bbd8:	9b07      	ldr	r3, [sp, #28]
 800bbda:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800bbdc:	1b9b      	subs	r3, r3, r6
 800bbde:	6013      	str	r3, [r2, #0]
 800bbe0:	b008      	add	sp, #32
 800bbe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbe6:	1c59      	adds	r1, r3, #1
 800bbe8:	9107      	str	r1, [sp, #28]
 800bbea:	701a      	strb	r2, [r3, #0]
 800bbec:	e7f0      	b.n	800bbd0 <__cvt+0xa0>

0800bbee <__exponent>:
 800bbee:	4603      	mov	r3, r0
 800bbf0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bbf2:	2900      	cmp	r1, #0
 800bbf4:	f803 2b02 	strb.w	r2, [r3], #2
 800bbf8:	bfb6      	itet	lt
 800bbfa:	222d      	movlt	r2, #45	; 0x2d
 800bbfc:	222b      	movge	r2, #43	; 0x2b
 800bbfe:	4249      	neglt	r1, r1
 800bc00:	2909      	cmp	r1, #9
 800bc02:	7042      	strb	r2, [r0, #1]
 800bc04:	dd2b      	ble.n	800bc5e <__exponent+0x70>
 800bc06:	f10d 0407 	add.w	r4, sp, #7
 800bc0a:	46a4      	mov	ip, r4
 800bc0c:	270a      	movs	r7, #10
 800bc0e:	fb91 f6f7 	sdiv	r6, r1, r7
 800bc12:	460a      	mov	r2, r1
 800bc14:	46a6      	mov	lr, r4
 800bc16:	fb07 1516 	mls	r5, r7, r6, r1
 800bc1a:	2a63      	cmp	r2, #99	; 0x63
 800bc1c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800bc20:	4631      	mov	r1, r6
 800bc22:	f104 34ff 	add.w	r4, r4, #4294967295
 800bc26:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800bc2a:	dcf0      	bgt.n	800bc0e <__exponent+0x20>
 800bc2c:	3130      	adds	r1, #48	; 0x30
 800bc2e:	f1ae 0502 	sub.w	r5, lr, #2
 800bc32:	f804 1c01 	strb.w	r1, [r4, #-1]
 800bc36:	4629      	mov	r1, r5
 800bc38:	1c44      	adds	r4, r0, #1
 800bc3a:	4561      	cmp	r1, ip
 800bc3c:	d30a      	bcc.n	800bc54 <__exponent+0x66>
 800bc3e:	f10d 0209 	add.w	r2, sp, #9
 800bc42:	eba2 020e 	sub.w	r2, r2, lr
 800bc46:	4565      	cmp	r5, ip
 800bc48:	bf88      	it	hi
 800bc4a:	2200      	movhi	r2, #0
 800bc4c:	4413      	add	r3, r2
 800bc4e:	1a18      	subs	r0, r3, r0
 800bc50:	b003      	add	sp, #12
 800bc52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc54:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bc58:	f804 2f01 	strb.w	r2, [r4, #1]!
 800bc5c:	e7ed      	b.n	800bc3a <__exponent+0x4c>
 800bc5e:	2330      	movs	r3, #48	; 0x30
 800bc60:	3130      	adds	r1, #48	; 0x30
 800bc62:	7083      	strb	r3, [r0, #2]
 800bc64:	70c1      	strb	r1, [r0, #3]
 800bc66:	1d03      	adds	r3, r0, #4
 800bc68:	e7f1      	b.n	800bc4e <__exponent+0x60>
	...

0800bc6c <_printf_float>:
 800bc6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc70:	b091      	sub	sp, #68	; 0x44
 800bc72:	460c      	mov	r4, r1
 800bc74:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800bc78:	4616      	mov	r6, r2
 800bc7a:	461f      	mov	r7, r3
 800bc7c:	4605      	mov	r5, r0
 800bc7e:	f001 fc5b 	bl	800d538 <_localeconv_r>
 800bc82:	6803      	ldr	r3, [r0, #0]
 800bc84:	4618      	mov	r0, r3
 800bc86:	9309      	str	r3, [sp, #36]	; 0x24
 800bc88:	f7f4 face 	bl	8000228 <strlen>
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	930e      	str	r3, [sp, #56]	; 0x38
 800bc90:	f8d8 3000 	ldr.w	r3, [r8]
 800bc94:	900a      	str	r0, [sp, #40]	; 0x28
 800bc96:	3307      	adds	r3, #7
 800bc98:	f023 0307 	bic.w	r3, r3, #7
 800bc9c:	f103 0208 	add.w	r2, r3, #8
 800bca0:	f894 9018 	ldrb.w	r9, [r4, #24]
 800bca4:	f8d4 b000 	ldr.w	fp, [r4]
 800bca8:	f8c8 2000 	str.w	r2, [r8]
 800bcac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcb0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800bcb4:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800bcb8:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800bcbc:	930b      	str	r3, [sp, #44]	; 0x2c
 800bcbe:	f04f 32ff 	mov.w	r2, #4294967295
 800bcc2:	4640      	mov	r0, r8
 800bcc4:	4b9c      	ldr	r3, [pc, #624]	; (800bf38 <_printf_float+0x2cc>)
 800bcc6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bcc8:	f7f4 ff0c 	bl	8000ae4 <__aeabi_dcmpun>
 800bccc:	bb70      	cbnz	r0, 800bd2c <_printf_float+0xc0>
 800bcce:	f04f 32ff 	mov.w	r2, #4294967295
 800bcd2:	4640      	mov	r0, r8
 800bcd4:	4b98      	ldr	r3, [pc, #608]	; (800bf38 <_printf_float+0x2cc>)
 800bcd6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bcd8:	f7f4 fee6 	bl	8000aa8 <__aeabi_dcmple>
 800bcdc:	bb30      	cbnz	r0, 800bd2c <_printf_float+0xc0>
 800bcde:	2200      	movs	r2, #0
 800bce0:	2300      	movs	r3, #0
 800bce2:	4640      	mov	r0, r8
 800bce4:	4651      	mov	r1, sl
 800bce6:	f7f4 fed5 	bl	8000a94 <__aeabi_dcmplt>
 800bcea:	b110      	cbz	r0, 800bcf2 <_printf_float+0x86>
 800bcec:	232d      	movs	r3, #45	; 0x2d
 800bcee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bcf2:	4b92      	ldr	r3, [pc, #584]	; (800bf3c <_printf_float+0x2d0>)
 800bcf4:	4892      	ldr	r0, [pc, #584]	; (800bf40 <_printf_float+0x2d4>)
 800bcf6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800bcfa:	bf94      	ite	ls
 800bcfc:	4698      	movls	r8, r3
 800bcfe:	4680      	movhi	r8, r0
 800bd00:	2303      	movs	r3, #3
 800bd02:	f04f 0a00 	mov.w	sl, #0
 800bd06:	6123      	str	r3, [r4, #16]
 800bd08:	f02b 0304 	bic.w	r3, fp, #4
 800bd0c:	6023      	str	r3, [r4, #0]
 800bd0e:	4633      	mov	r3, r6
 800bd10:	4621      	mov	r1, r4
 800bd12:	4628      	mov	r0, r5
 800bd14:	9700      	str	r7, [sp, #0]
 800bd16:	aa0f      	add	r2, sp, #60	; 0x3c
 800bd18:	f000 f9d4 	bl	800c0c4 <_printf_common>
 800bd1c:	3001      	adds	r0, #1
 800bd1e:	f040 8090 	bne.w	800be42 <_printf_float+0x1d6>
 800bd22:	f04f 30ff 	mov.w	r0, #4294967295
 800bd26:	b011      	add	sp, #68	; 0x44
 800bd28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd2c:	4642      	mov	r2, r8
 800bd2e:	4653      	mov	r3, sl
 800bd30:	4640      	mov	r0, r8
 800bd32:	4651      	mov	r1, sl
 800bd34:	f7f4 fed6 	bl	8000ae4 <__aeabi_dcmpun>
 800bd38:	b148      	cbz	r0, 800bd4e <_printf_float+0xe2>
 800bd3a:	f1ba 0f00 	cmp.w	sl, #0
 800bd3e:	bfb8      	it	lt
 800bd40:	232d      	movlt	r3, #45	; 0x2d
 800bd42:	4880      	ldr	r0, [pc, #512]	; (800bf44 <_printf_float+0x2d8>)
 800bd44:	bfb8      	it	lt
 800bd46:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800bd4a:	4b7f      	ldr	r3, [pc, #508]	; (800bf48 <_printf_float+0x2dc>)
 800bd4c:	e7d3      	b.n	800bcf6 <_printf_float+0x8a>
 800bd4e:	6863      	ldr	r3, [r4, #4]
 800bd50:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800bd54:	1c5a      	adds	r2, r3, #1
 800bd56:	d142      	bne.n	800bdde <_printf_float+0x172>
 800bd58:	2306      	movs	r3, #6
 800bd5a:	6063      	str	r3, [r4, #4]
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	9206      	str	r2, [sp, #24]
 800bd60:	aa0e      	add	r2, sp, #56	; 0x38
 800bd62:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800bd66:	aa0d      	add	r2, sp, #52	; 0x34
 800bd68:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800bd6c:	9203      	str	r2, [sp, #12]
 800bd6e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800bd72:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800bd76:	6023      	str	r3, [r4, #0]
 800bd78:	6863      	ldr	r3, [r4, #4]
 800bd7a:	4642      	mov	r2, r8
 800bd7c:	9300      	str	r3, [sp, #0]
 800bd7e:	4628      	mov	r0, r5
 800bd80:	4653      	mov	r3, sl
 800bd82:	910b      	str	r1, [sp, #44]	; 0x2c
 800bd84:	f7ff fed4 	bl	800bb30 <__cvt>
 800bd88:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bd8a:	4680      	mov	r8, r0
 800bd8c:	2947      	cmp	r1, #71	; 0x47
 800bd8e:	990d      	ldr	r1, [sp, #52]	; 0x34
 800bd90:	d108      	bne.n	800bda4 <_printf_float+0x138>
 800bd92:	1cc8      	adds	r0, r1, #3
 800bd94:	db02      	blt.n	800bd9c <_printf_float+0x130>
 800bd96:	6863      	ldr	r3, [r4, #4]
 800bd98:	4299      	cmp	r1, r3
 800bd9a:	dd40      	ble.n	800be1e <_printf_float+0x1b2>
 800bd9c:	f1a9 0902 	sub.w	r9, r9, #2
 800bda0:	fa5f f989 	uxtb.w	r9, r9
 800bda4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800bda8:	d81f      	bhi.n	800bdea <_printf_float+0x17e>
 800bdaa:	464a      	mov	r2, r9
 800bdac:	3901      	subs	r1, #1
 800bdae:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800bdb2:	910d      	str	r1, [sp, #52]	; 0x34
 800bdb4:	f7ff ff1b 	bl	800bbee <__exponent>
 800bdb8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bdba:	4682      	mov	sl, r0
 800bdbc:	1813      	adds	r3, r2, r0
 800bdbe:	2a01      	cmp	r2, #1
 800bdc0:	6123      	str	r3, [r4, #16]
 800bdc2:	dc02      	bgt.n	800bdca <_printf_float+0x15e>
 800bdc4:	6822      	ldr	r2, [r4, #0]
 800bdc6:	07d2      	lsls	r2, r2, #31
 800bdc8:	d501      	bpl.n	800bdce <_printf_float+0x162>
 800bdca:	3301      	adds	r3, #1
 800bdcc:	6123      	str	r3, [r4, #16]
 800bdce:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d09b      	beq.n	800bd0e <_printf_float+0xa2>
 800bdd6:	232d      	movs	r3, #45	; 0x2d
 800bdd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bddc:	e797      	b.n	800bd0e <_printf_float+0xa2>
 800bdde:	2947      	cmp	r1, #71	; 0x47
 800bde0:	d1bc      	bne.n	800bd5c <_printf_float+0xf0>
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d1ba      	bne.n	800bd5c <_printf_float+0xf0>
 800bde6:	2301      	movs	r3, #1
 800bde8:	e7b7      	b.n	800bd5a <_printf_float+0xee>
 800bdea:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800bdee:	d118      	bne.n	800be22 <_printf_float+0x1b6>
 800bdf0:	2900      	cmp	r1, #0
 800bdf2:	6863      	ldr	r3, [r4, #4]
 800bdf4:	dd0b      	ble.n	800be0e <_printf_float+0x1a2>
 800bdf6:	6121      	str	r1, [r4, #16]
 800bdf8:	b913      	cbnz	r3, 800be00 <_printf_float+0x194>
 800bdfa:	6822      	ldr	r2, [r4, #0]
 800bdfc:	07d0      	lsls	r0, r2, #31
 800bdfe:	d502      	bpl.n	800be06 <_printf_float+0x19a>
 800be00:	3301      	adds	r3, #1
 800be02:	440b      	add	r3, r1
 800be04:	6123      	str	r3, [r4, #16]
 800be06:	f04f 0a00 	mov.w	sl, #0
 800be0a:	65a1      	str	r1, [r4, #88]	; 0x58
 800be0c:	e7df      	b.n	800bdce <_printf_float+0x162>
 800be0e:	b913      	cbnz	r3, 800be16 <_printf_float+0x1aa>
 800be10:	6822      	ldr	r2, [r4, #0]
 800be12:	07d2      	lsls	r2, r2, #31
 800be14:	d501      	bpl.n	800be1a <_printf_float+0x1ae>
 800be16:	3302      	adds	r3, #2
 800be18:	e7f4      	b.n	800be04 <_printf_float+0x198>
 800be1a:	2301      	movs	r3, #1
 800be1c:	e7f2      	b.n	800be04 <_printf_float+0x198>
 800be1e:	f04f 0967 	mov.w	r9, #103	; 0x67
 800be22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800be24:	4299      	cmp	r1, r3
 800be26:	db05      	blt.n	800be34 <_printf_float+0x1c8>
 800be28:	6823      	ldr	r3, [r4, #0]
 800be2a:	6121      	str	r1, [r4, #16]
 800be2c:	07d8      	lsls	r0, r3, #31
 800be2e:	d5ea      	bpl.n	800be06 <_printf_float+0x19a>
 800be30:	1c4b      	adds	r3, r1, #1
 800be32:	e7e7      	b.n	800be04 <_printf_float+0x198>
 800be34:	2900      	cmp	r1, #0
 800be36:	bfcc      	ite	gt
 800be38:	2201      	movgt	r2, #1
 800be3a:	f1c1 0202 	rsble	r2, r1, #2
 800be3e:	4413      	add	r3, r2
 800be40:	e7e0      	b.n	800be04 <_printf_float+0x198>
 800be42:	6823      	ldr	r3, [r4, #0]
 800be44:	055a      	lsls	r2, r3, #21
 800be46:	d407      	bmi.n	800be58 <_printf_float+0x1ec>
 800be48:	6923      	ldr	r3, [r4, #16]
 800be4a:	4642      	mov	r2, r8
 800be4c:	4631      	mov	r1, r6
 800be4e:	4628      	mov	r0, r5
 800be50:	47b8      	blx	r7
 800be52:	3001      	adds	r0, #1
 800be54:	d12b      	bne.n	800beae <_printf_float+0x242>
 800be56:	e764      	b.n	800bd22 <_printf_float+0xb6>
 800be58:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800be5c:	f240 80dd 	bls.w	800c01a <_printf_float+0x3ae>
 800be60:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800be64:	2200      	movs	r2, #0
 800be66:	2300      	movs	r3, #0
 800be68:	f7f4 fe0a 	bl	8000a80 <__aeabi_dcmpeq>
 800be6c:	2800      	cmp	r0, #0
 800be6e:	d033      	beq.n	800bed8 <_printf_float+0x26c>
 800be70:	2301      	movs	r3, #1
 800be72:	4631      	mov	r1, r6
 800be74:	4628      	mov	r0, r5
 800be76:	4a35      	ldr	r2, [pc, #212]	; (800bf4c <_printf_float+0x2e0>)
 800be78:	47b8      	blx	r7
 800be7a:	3001      	adds	r0, #1
 800be7c:	f43f af51 	beq.w	800bd22 <_printf_float+0xb6>
 800be80:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800be84:	429a      	cmp	r2, r3
 800be86:	db02      	blt.n	800be8e <_printf_float+0x222>
 800be88:	6823      	ldr	r3, [r4, #0]
 800be8a:	07d8      	lsls	r0, r3, #31
 800be8c:	d50f      	bpl.n	800beae <_printf_float+0x242>
 800be8e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800be92:	4631      	mov	r1, r6
 800be94:	4628      	mov	r0, r5
 800be96:	47b8      	blx	r7
 800be98:	3001      	adds	r0, #1
 800be9a:	f43f af42 	beq.w	800bd22 <_printf_float+0xb6>
 800be9e:	f04f 0800 	mov.w	r8, #0
 800bea2:	f104 091a 	add.w	r9, r4, #26
 800bea6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bea8:	3b01      	subs	r3, #1
 800beaa:	4543      	cmp	r3, r8
 800beac:	dc09      	bgt.n	800bec2 <_printf_float+0x256>
 800beae:	6823      	ldr	r3, [r4, #0]
 800beb0:	079b      	lsls	r3, r3, #30
 800beb2:	f100 8102 	bmi.w	800c0ba <_printf_float+0x44e>
 800beb6:	68e0      	ldr	r0, [r4, #12]
 800beb8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800beba:	4298      	cmp	r0, r3
 800bebc:	bfb8      	it	lt
 800bebe:	4618      	movlt	r0, r3
 800bec0:	e731      	b.n	800bd26 <_printf_float+0xba>
 800bec2:	2301      	movs	r3, #1
 800bec4:	464a      	mov	r2, r9
 800bec6:	4631      	mov	r1, r6
 800bec8:	4628      	mov	r0, r5
 800beca:	47b8      	blx	r7
 800becc:	3001      	adds	r0, #1
 800bece:	f43f af28 	beq.w	800bd22 <_printf_float+0xb6>
 800bed2:	f108 0801 	add.w	r8, r8, #1
 800bed6:	e7e6      	b.n	800bea6 <_printf_float+0x23a>
 800bed8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800beda:	2b00      	cmp	r3, #0
 800bedc:	dc38      	bgt.n	800bf50 <_printf_float+0x2e4>
 800bede:	2301      	movs	r3, #1
 800bee0:	4631      	mov	r1, r6
 800bee2:	4628      	mov	r0, r5
 800bee4:	4a19      	ldr	r2, [pc, #100]	; (800bf4c <_printf_float+0x2e0>)
 800bee6:	47b8      	blx	r7
 800bee8:	3001      	adds	r0, #1
 800beea:	f43f af1a 	beq.w	800bd22 <_printf_float+0xb6>
 800beee:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800bef2:	4313      	orrs	r3, r2
 800bef4:	d102      	bne.n	800befc <_printf_float+0x290>
 800bef6:	6823      	ldr	r3, [r4, #0]
 800bef8:	07d9      	lsls	r1, r3, #31
 800befa:	d5d8      	bpl.n	800beae <_printf_float+0x242>
 800befc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bf00:	4631      	mov	r1, r6
 800bf02:	4628      	mov	r0, r5
 800bf04:	47b8      	blx	r7
 800bf06:	3001      	adds	r0, #1
 800bf08:	f43f af0b 	beq.w	800bd22 <_printf_float+0xb6>
 800bf0c:	f04f 0900 	mov.w	r9, #0
 800bf10:	f104 0a1a 	add.w	sl, r4, #26
 800bf14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bf16:	425b      	negs	r3, r3
 800bf18:	454b      	cmp	r3, r9
 800bf1a:	dc01      	bgt.n	800bf20 <_printf_float+0x2b4>
 800bf1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bf1e:	e794      	b.n	800be4a <_printf_float+0x1de>
 800bf20:	2301      	movs	r3, #1
 800bf22:	4652      	mov	r2, sl
 800bf24:	4631      	mov	r1, r6
 800bf26:	4628      	mov	r0, r5
 800bf28:	47b8      	blx	r7
 800bf2a:	3001      	adds	r0, #1
 800bf2c:	f43f aef9 	beq.w	800bd22 <_printf_float+0xb6>
 800bf30:	f109 0901 	add.w	r9, r9, #1
 800bf34:	e7ee      	b.n	800bf14 <_printf_float+0x2a8>
 800bf36:	bf00      	nop
 800bf38:	7fefffff 	.word	0x7fefffff
 800bf3c:	0800f9bc 	.word	0x0800f9bc
 800bf40:	0800f9c0 	.word	0x0800f9c0
 800bf44:	0800f9c8 	.word	0x0800f9c8
 800bf48:	0800f9c4 	.word	0x0800f9c4
 800bf4c:	0800f9cc 	.word	0x0800f9cc
 800bf50:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bf52:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bf54:	429a      	cmp	r2, r3
 800bf56:	bfa8      	it	ge
 800bf58:	461a      	movge	r2, r3
 800bf5a:	2a00      	cmp	r2, #0
 800bf5c:	4691      	mov	r9, r2
 800bf5e:	dc37      	bgt.n	800bfd0 <_printf_float+0x364>
 800bf60:	f04f 0b00 	mov.w	fp, #0
 800bf64:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bf68:	f104 021a 	add.w	r2, r4, #26
 800bf6c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800bf70:	ebaa 0309 	sub.w	r3, sl, r9
 800bf74:	455b      	cmp	r3, fp
 800bf76:	dc33      	bgt.n	800bfe0 <_printf_float+0x374>
 800bf78:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800bf7c:	429a      	cmp	r2, r3
 800bf7e:	db3b      	blt.n	800bff8 <_printf_float+0x38c>
 800bf80:	6823      	ldr	r3, [r4, #0]
 800bf82:	07da      	lsls	r2, r3, #31
 800bf84:	d438      	bmi.n	800bff8 <_printf_float+0x38c>
 800bf86:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bf88:	990d      	ldr	r1, [sp, #52]	; 0x34
 800bf8a:	eba2 030a 	sub.w	r3, r2, sl
 800bf8e:	eba2 0901 	sub.w	r9, r2, r1
 800bf92:	4599      	cmp	r9, r3
 800bf94:	bfa8      	it	ge
 800bf96:	4699      	movge	r9, r3
 800bf98:	f1b9 0f00 	cmp.w	r9, #0
 800bf9c:	dc34      	bgt.n	800c008 <_printf_float+0x39c>
 800bf9e:	f04f 0800 	mov.w	r8, #0
 800bfa2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bfa6:	f104 0a1a 	add.w	sl, r4, #26
 800bfaa:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800bfae:	1a9b      	subs	r3, r3, r2
 800bfb0:	eba3 0309 	sub.w	r3, r3, r9
 800bfb4:	4543      	cmp	r3, r8
 800bfb6:	f77f af7a 	ble.w	800beae <_printf_float+0x242>
 800bfba:	2301      	movs	r3, #1
 800bfbc:	4652      	mov	r2, sl
 800bfbe:	4631      	mov	r1, r6
 800bfc0:	4628      	mov	r0, r5
 800bfc2:	47b8      	blx	r7
 800bfc4:	3001      	adds	r0, #1
 800bfc6:	f43f aeac 	beq.w	800bd22 <_printf_float+0xb6>
 800bfca:	f108 0801 	add.w	r8, r8, #1
 800bfce:	e7ec      	b.n	800bfaa <_printf_float+0x33e>
 800bfd0:	4613      	mov	r3, r2
 800bfd2:	4631      	mov	r1, r6
 800bfd4:	4642      	mov	r2, r8
 800bfd6:	4628      	mov	r0, r5
 800bfd8:	47b8      	blx	r7
 800bfda:	3001      	adds	r0, #1
 800bfdc:	d1c0      	bne.n	800bf60 <_printf_float+0x2f4>
 800bfde:	e6a0      	b.n	800bd22 <_printf_float+0xb6>
 800bfe0:	2301      	movs	r3, #1
 800bfe2:	4631      	mov	r1, r6
 800bfe4:	4628      	mov	r0, r5
 800bfe6:	920b      	str	r2, [sp, #44]	; 0x2c
 800bfe8:	47b8      	blx	r7
 800bfea:	3001      	adds	r0, #1
 800bfec:	f43f ae99 	beq.w	800bd22 <_printf_float+0xb6>
 800bff0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bff2:	f10b 0b01 	add.w	fp, fp, #1
 800bff6:	e7b9      	b.n	800bf6c <_printf_float+0x300>
 800bff8:	4631      	mov	r1, r6
 800bffa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bffe:	4628      	mov	r0, r5
 800c000:	47b8      	blx	r7
 800c002:	3001      	adds	r0, #1
 800c004:	d1bf      	bne.n	800bf86 <_printf_float+0x31a>
 800c006:	e68c      	b.n	800bd22 <_printf_float+0xb6>
 800c008:	464b      	mov	r3, r9
 800c00a:	4631      	mov	r1, r6
 800c00c:	4628      	mov	r0, r5
 800c00e:	eb08 020a 	add.w	r2, r8, sl
 800c012:	47b8      	blx	r7
 800c014:	3001      	adds	r0, #1
 800c016:	d1c2      	bne.n	800bf9e <_printf_float+0x332>
 800c018:	e683      	b.n	800bd22 <_printf_float+0xb6>
 800c01a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c01c:	2a01      	cmp	r2, #1
 800c01e:	dc01      	bgt.n	800c024 <_printf_float+0x3b8>
 800c020:	07db      	lsls	r3, r3, #31
 800c022:	d537      	bpl.n	800c094 <_printf_float+0x428>
 800c024:	2301      	movs	r3, #1
 800c026:	4642      	mov	r2, r8
 800c028:	4631      	mov	r1, r6
 800c02a:	4628      	mov	r0, r5
 800c02c:	47b8      	blx	r7
 800c02e:	3001      	adds	r0, #1
 800c030:	f43f ae77 	beq.w	800bd22 <_printf_float+0xb6>
 800c034:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c038:	4631      	mov	r1, r6
 800c03a:	4628      	mov	r0, r5
 800c03c:	47b8      	blx	r7
 800c03e:	3001      	adds	r0, #1
 800c040:	f43f ae6f 	beq.w	800bd22 <_printf_float+0xb6>
 800c044:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c048:	2200      	movs	r2, #0
 800c04a:	2300      	movs	r3, #0
 800c04c:	f7f4 fd18 	bl	8000a80 <__aeabi_dcmpeq>
 800c050:	b9d8      	cbnz	r0, 800c08a <_printf_float+0x41e>
 800c052:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c054:	f108 0201 	add.w	r2, r8, #1
 800c058:	3b01      	subs	r3, #1
 800c05a:	4631      	mov	r1, r6
 800c05c:	4628      	mov	r0, r5
 800c05e:	47b8      	blx	r7
 800c060:	3001      	adds	r0, #1
 800c062:	d10e      	bne.n	800c082 <_printf_float+0x416>
 800c064:	e65d      	b.n	800bd22 <_printf_float+0xb6>
 800c066:	2301      	movs	r3, #1
 800c068:	464a      	mov	r2, r9
 800c06a:	4631      	mov	r1, r6
 800c06c:	4628      	mov	r0, r5
 800c06e:	47b8      	blx	r7
 800c070:	3001      	adds	r0, #1
 800c072:	f43f ae56 	beq.w	800bd22 <_printf_float+0xb6>
 800c076:	f108 0801 	add.w	r8, r8, #1
 800c07a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c07c:	3b01      	subs	r3, #1
 800c07e:	4543      	cmp	r3, r8
 800c080:	dcf1      	bgt.n	800c066 <_printf_float+0x3fa>
 800c082:	4653      	mov	r3, sl
 800c084:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c088:	e6e0      	b.n	800be4c <_printf_float+0x1e0>
 800c08a:	f04f 0800 	mov.w	r8, #0
 800c08e:	f104 091a 	add.w	r9, r4, #26
 800c092:	e7f2      	b.n	800c07a <_printf_float+0x40e>
 800c094:	2301      	movs	r3, #1
 800c096:	4642      	mov	r2, r8
 800c098:	e7df      	b.n	800c05a <_printf_float+0x3ee>
 800c09a:	2301      	movs	r3, #1
 800c09c:	464a      	mov	r2, r9
 800c09e:	4631      	mov	r1, r6
 800c0a0:	4628      	mov	r0, r5
 800c0a2:	47b8      	blx	r7
 800c0a4:	3001      	adds	r0, #1
 800c0a6:	f43f ae3c 	beq.w	800bd22 <_printf_float+0xb6>
 800c0aa:	f108 0801 	add.w	r8, r8, #1
 800c0ae:	68e3      	ldr	r3, [r4, #12]
 800c0b0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c0b2:	1a5b      	subs	r3, r3, r1
 800c0b4:	4543      	cmp	r3, r8
 800c0b6:	dcf0      	bgt.n	800c09a <_printf_float+0x42e>
 800c0b8:	e6fd      	b.n	800beb6 <_printf_float+0x24a>
 800c0ba:	f04f 0800 	mov.w	r8, #0
 800c0be:	f104 0919 	add.w	r9, r4, #25
 800c0c2:	e7f4      	b.n	800c0ae <_printf_float+0x442>

0800c0c4 <_printf_common>:
 800c0c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0c8:	4616      	mov	r6, r2
 800c0ca:	4699      	mov	r9, r3
 800c0cc:	688a      	ldr	r2, [r1, #8]
 800c0ce:	690b      	ldr	r3, [r1, #16]
 800c0d0:	4607      	mov	r7, r0
 800c0d2:	4293      	cmp	r3, r2
 800c0d4:	bfb8      	it	lt
 800c0d6:	4613      	movlt	r3, r2
 800c0d8:	6033      	str	r3, [r6, #0]
 800c0da:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c0de:	460c      	mov	r4, r1
 800c0e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c0e4:	b10a      	cbz	r2, 800c0ea <_printf_common+0x26>
 800c0e6:	3301      	adds	r3, #1
 800c0e8:	6033      	str	r3, [r6, #0]
 800c0ea:	6823      	ldr	r3, [r4, #0]
 800c0ec:	0699      	lsls	r1, r3, #26
 800c0ee:	bf42      	ittt	mi
 800c0f0:	6833      	ldrmi	r3, [r6, #0]
 800c0f2:	3302      	addmi	r3, #2
 800c0f4:	6033      	strmi	r3, [r6, #0]
 800c0f6:	6825      	ldr	r5, [r4, #0]
 800c0f8:	f015 0506 	ands.w	r5, r5, #6
 800c0fc:	d106      	bne.n	800c10c <_printf_common+0x48>
 800c0fe:	f104 0a19 	add.w	sl, r4, #25
 800c102:	68e3      	ldr	r3, [r4, #12]
 800c104:	6832      	ldr	r2, [r6, #0]
 800c106:	1a9b      	subs	r3, r3, r2
 800c108:	42ab      	cmp	r3, r5
 800c10a:	dc28      	bgt.n	800c15e <_printf_common+0x9a>
 800c10c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c110:	1e13      	subs	r3, r2, #0
 800c112:	6822      	ldr	r2, [r4, #0]
 800c114:	bf18      	it	ne
 800c116:	2301      	movne	r3, #1
 800c118:	0692      	lsls	r2, r2, #26
 800c11a:	d42d      	bmi.n	800c178 <_printf_common+0xb4>
 800c11c:	4649      	mov	r1, r9
 800c11e:	4638      	mov	r0, r7
 800c120:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c124:	47c0      	blx	r8
 800c126:	3001      	adds	r0, #1
 800c128:	d020      	beq.n	800c16c <_printf_common+0xa8>
 800c12a:	6823      	ldr	r3, [r4, #0]
 800c12c:	68e5      	ldr	r5, [r4, #12]
 800c12e:	f003 0306 	and.w	r3, r3, #6
 800c132:	2b04      	cmp	r3, #4
 800c134:	bf18      	it	ne
 800c136:	2500      	movne	r5, #0
 800c138:	6832      	ldr	r2, [r6, #0]
 800c13a:	f04f 0600 	mov.w	r6, #0
 800c13e:	68a3      	ldr	r3, [r4, #8]
 800c140:	bf08      	it	eq
 800c142:	1aad      	subeq	r5, r5, r2
 800c144:	6922      	ldr	r2, [r4, #16]
 800c146:	bf08      	it	eq
 800c148:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c14c:	4293      	cmp	r3, r2
 800c14e:	bfc4      	itt	gt
 800c150:	1a9b      	subgt	r3, r3, r2
 800c152:	18ed      	addgt	r5, r5, r3
 800c154:	341a      	adds	r4, #26
 800c156:	42b5      	cmp	r5, r6
 800c158:	d11a      	bne.n	800c190 <_printf_common+0xcc>
 800c15a:	2000      	movs	r0, #0
 800c15c:	e008      	b.n	800c170 <_printf_common+0xac>
 800c15e:	2301      	movs	r3, #1
 800c160:	4652      	mov	r2, sl
 800c162:	4649      	mov	r1, r9
 800c164:	4638      	mov	r0, r7
 800c166:	47c0      	blx	r8
 800c168:	3001      	adds	r0, #1
 800c16a:	d103      	bne.n	800c174 <_printf_common+0xb0>
 800c16c:	f04f 30ff 	mov.w	r0, #4294967295
 800c170:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c174:	3501      	adds	r5, #1
 800c176:	e7c4      	b.n	800c102 <_printf_common+0x3e>
 800c178:	2030      	movs	r0, #48	; 0x30
 800c17a:	18e1      	adds	r1, r4, r3
 800c17c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c180:	1c5a      	adds	r2, r3, #1
 800c182:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c186:	4422      	add	r2, r4
 800c188:	3302      	adds	r3, #2
 800c18a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c18e:	e7c5      	b.n	800c11c <_printf_common+0x58>
 800c190:	2301      	movs	r3, #1
 800c192:	4622      	mov	r2, r4
 800c194:	4649      	mov	r1, r9
 800c196:	4638      	mov	r0, r7
 800c198:	47c0      	blx	r8
 800c19a:	3001      	adds	r0, #1
 800c19c:	d0e6      	beq.n	800c16c <_printf_common+0xa8>
 800c19e:	3601      	adds	r6, #1
 800c1a0:	e7d9      	b.n	800c156 <_printf_common+0x92>
	...

0800c1a4 <_printf_i>:
 800c1a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c1a8:	460c      	mov	r4, r1
 800c1aa:	7e27      	ldrb	r7, [r4, #24]
 800c1ac:	4691      	mov	r9, r2
 800c1ae:	2f78      	cmp	r7, #120	; 0x78
 800c1b0:	4680      	mov	r8, r0
 800c1b2:	469a      	mov	sl, r3
 800c1b4:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c1b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c1ba:	d807      	bhi.n	800c1cc <_printf_i+0x28>
 800c1bc:	2f62      	cmp	r7, #98	; 0x62
 800c1be:	d80a      	bhi.n	800c1d6 <_printf_i+0x32>
 800c1c0:	2f00      	cmp	r7, #0
 800c1c2:	f000 80d9 	beq.w	800c378 <_printf_i+0x1d4>
 800c1c6:	2f58      	cmp	r7, #88	; 0x58
 800c1c8:	f000 80a4 	beq.w	800c314 <_printf_i+0x170>
 800c1cc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c1d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c1d4:	e03a      	b.n	800c24c <_printf_i+0xa8>
 800c1d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c1da:	2b15      	cmp	r3, #21
 800c1dc:	d8f6      	bhi.n	800c1cc <_printf_i+0x28>
 800c1de:	a001      	add	r0, pc, #4	; (adr r0, 800c1e4 <_printf_i+0x40>)
 800c1e0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800c1e4:	0800c23d 	.word	0x0800c23d
 800c1e8:	0800c251 	.word	0x0800c251
 800c1ec:	0800c1cd 	.word	0x0800c1cd
 800c1f0:	0800c1cd 	.word	0x0800c1cd
 800c1f4:	0800c1cd 	.word	0x0800c1cd
 800c1f8:	0800c1cd 	.word	0x0800c1cd
 800c1fc:	0800c251 	.word	0x0800c251
 800c200:	0800c1cd 	.word	0x0800c1cd
 800c204:	0800c1cd 	.word	0x0800c1cd
 800c208:	0800c1cd 	.word	0x0800c1cd
 800c20c:	0800c1cd 	.word	0x0800c1cd
 800c210:	0800c35f 	.word	0x0800c35f
 800c214:	0800c281 	.word	0x0800c281
 800c218:	0800c341 	.word	0x0800c341
 800c21c:	0800c1cd 	.word	0x0800c1cd
 800c220:	0800c1cd 	.word	0x0800c1cd
 800c224:	0800c381 	.word	0x0800c381
 800c228:	0800c1cd 	.word	0x0800c1cd
 800c22c:	0800c281 	.word	0x0800c281
 800c230:	0800c1cd 	.word	0x0800c1cd
 800c234:	0800c1cd 	.word	0x0800c1cd
 800c238:	0800c349 	.word	0x0800c349
 800c23c:	680b      	ldr	r3, [r1, #0]
 800c23e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c242:	1d1a      	adds	r2, r3, #4
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	600a      	str	r2, [r1, #0]
 800c248:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c24c:	2301      	movs	r3, #1
 800c24e:	e0a4      	b.n	800c39a <_printf_i+0x1f6>
 800c250:	6825      	ldr	r5, [r4, #0]
 800c252:	6808      	ldr	r0, [r1, #0]
 800c254:	062e      	lsls	r6, r5, #24
 800c256:	f100 0304 	add.w	r3, r0, #4
 800c25a:	d50a      	bpl.n	800c272 <_printf_i+0xce>
 800c25c:	6805      	ldr	r5, [r0, #0]
 800c25e:	600b      	str	r3, [r1, #0]
 800c260:	2d00      	cmp	r5, #0
 800c262:	da03      	bge.n	800c26c <_printf_i+0xc8>
 800c264:	232d      	movs	r3, #45	; 0x2d
 800c266:	426d      	negs	r5, r5
 800c268:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c26c:	230a      	movs	r3, #10
 800c26e:	485e      	ldr	r0, [pc, #376]	; (800c3e8 <_printf_i+0x244>)
 800c270:	e019      	b.n	800c2a6 <_printf_i+0x102>
 800c272:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c276:	6805      	ldr	r5, [r0, #0]
 800c278:	600b      	str	r3, [r1, #0]
 800c27a:	bf18      	it	ne
 800c27c:	b22d      	sxthne	r5, r5
 800c27e:	e7ef      	b.n	800c260 <_printf_i+0xbc>
 800c280:	680b      	ldr	r3, [r1, #0]
 800c282:	6825      	ldr	r5, [r4, #0]
 800c284:	1d18      	adds	r0, r3, #4
 800c286:	6008      	str	r0, [r1, #0]
 800c288:	0628      	lsls	r0, r5, #24
 800c28a:	d501      	bpl.n	800c290 <_printf_i+0xec>
 800c28c:	681d      	ldr	r5, [r3, #0]
 800c28e:	e002      	b.n	800c296 <_printf_i+0xf2>
 800c290:	0669      	lsls	r1, r5, #25
 800c292:	d5fb      	bpl.n	800c28c <_printf_i+0xe8>
 800c294:	881d      	ldrh	r5, [r3, #0]
 800c296:	2f6f      	cmp	r7, #111	; 0x6f
 800c298:	bf0c      	ite	eq
 800c29a:	2308      	moveq	r3, #8
 800c29c:	230a      	movne	r3, #10
 800c29e:	4852      	ldr	r0, [pc, #328]	; (800c3e8 <_printf_i+0x244>)
 800c2a0:	2100      	movs	r1, #0
 800c2a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c2a6:	6866      	ldr	r6, [r4, #4]
 800c2a8:	2e00      	cmp	r6, #0
 800c2aa:	bfa8      	it	ge
 800c2ac:	6821      	ldrge	r1, [r4, #0]
 800c2ae:	60a6      	str	r6, [r4, #8]
 800c2b0:	bfa4      	itt	ge
 800c2b2:	f021 0104 	bicge.w	r1, r1, #4
 800c2b6:	6021      	strge	r1, [r4, #0]
 800c2b8:	b90d      	cbnz	r5, 800c2be <_printf_i+0x11a>
 800c2ba:	2e00      	cmp	r6, #0
 800c2bc:	d04d      	beq.n	800c35a <_printf_i+0x1b6>
 800c2be:	4616      	mov	r6, r2
 800c2c0:	fbb5 f1f3 	udiv	r1, r5, r3
 800c2c4:	fb03 5711 	mls	r7, r3, r1, r5
 800c2c8:	5dc7      	ldrb	r7, [r0, r7]
 800c2ca:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c2ce:	462f      	mov	r7, r5
 800c2d0:	42bb      	cmp	r3, r7
 800c2d2:	460d      	mov	r5, r1
 800c2d4:	d9f4      	bls.n	800c2c0 <_printf_i+0x11c>
 800c2d6:	2b08      	cmp	r3, #8
 800c2d8:	d10b      	bne.n	800c2f2 <_printf_i+0x14e>
 800c2da:	6823      	ldr	r3, [r4, #0]
 800c2dc:	07df      	lsls	r7, r3, #31
 800c2de:	d508      	bpl.n	800c2f2 <_printf_i+0x14e>
 800c2e0:	6923      	ldr	r3, [r4, #16]
 800c2e2:	6861      	ldr	r1, [r4, #4]
 800c2e4:	4299      	cmp	r1, r3
 800c2e6:	bfde      	ittt	le
 800c2e8:	2330      	movle	r3, #48	; 0x30
 800c2ea:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c2ee:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c2f2:	1b92      	subs	r2, r2, r6
 800c2f4:	6122      	str	r2, [r4, #16]
 800c2f6:	464b      	mov	r3, r9
 800c2f8:	4621      	mov	r1, r4
 800c2fa:	4640      	mov	r0, r8
 800c2fc:	f8cd a000 	str.w	sl, [sp]
 800c300:	aa03      	add	r2, sp, #12
 800c302:	f7ff fedf 	bl	800c0c4 <_printf_common>
 800c306:	3001      	adds	r0, #1
 800c308:	d14c      	bne.n	800c3a4 <_printf_i+0x200>
 800c30a:	f04f 30ff 	mov.w	r0, #4294967295
 800c30e:	b004      	add	sp, #16
 800c310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c314:	4834      	ldr	r0, [pc, #208]	; (800c3e8 <_printf_i+0x244>)
 800c316:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c31a:	680e      	ldr	r6, [r1, #0]
 800c31c:	6823      	ldr	r3, [r4, #0]
 800c31e:	f856 5b04 	ldr.w	r5, [r6], #4
 800c322:	061f      	lsls	r7, r3, #24
 800c324:	600e      	str	r6, [r1, #0]
 800c326:	d514      	bpl.n	800c352 <_printf_i+0x1ae>
 800c328:	07d9      	lsls	r1, r3, #31
 800c32a:	bf44      	itt	mi
 800c32c:	f043 0320 	orrmi.w	r3, r3, #32
 800c330:	6023      	strmi	r3, [r4, #0]
 800c332:	b91d      	cbnz	r5, 800c33c <_printf_i+0x198>
 800c334:	6823      	ldr	r3, [r4, #0]
 800c336:	f023 0320 	bic.w	r3, r3, #32
 800c33a:	6023      	str	r3, [r4, #0]
 800c33c:	2310      	movs	r3, #16
 800c33e:	e7af      	b.n	800c2a0 <_printf_i+0xfc>
 800c340:	6823      	ldr	r3, [r4, #0]
 800c342:	f043 0320 	orr.w	r3, r3, #32
 800c346:	6023      	str	r3, [r4, #0]
 800c348:	2378      	movs	r3, #120	; 0x78
 800c34a:	4828      	ldr	r0, [pc, #160]	; (800c3ec <_printf_i+0x248>)
 800c34c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c350:	e7e3      	b.n	800c31a <_printf_i+0x176>
 800c352:	065e      	lsls	r6, r3, #25
 800c354:	bf48      	it	mi
 800c356:	b2ad      	uxthmi	r5, r5
 800c358:	e7e6      	b.n	800c328 <_printf_i+0x184>
 800c35a:	4616      	mov	r6, r2
 800c35c:	e7bb      	b.n	800c2d6 <_printf_i+0x132>
 800c35e:	680b      	ldr	r3, [r1, #0]
 800c360:	6826      	ldr	r6, [r4, #0]
 800c362:	1d1d      	adds	r5, r3, #4
 800c364:	6960      	ldr	r0, [r4, #20]
 800c366:	600d      	str	r5, [r1, #0]
 800c368:	0635      	lsls	r5, r6, #24
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	d501      	bpl.n	800c372 <_printf_i+0x1ce>
 800c36e:	6018      	str	r0, [r3, #0]
 800c370:	e002      	b.n	800c378 <_printf_i+0x1d4>
 800c372:	0671      	lsls	r1, r6, #25
 800c374:	d5fb      	bpl.n	800c36e <_printf_i+0x1ca>
 800c376:	8018      	strh	r0, [r3, #0]
 800c378:	2300      	movs	r3, #0
 800c37a:	4616      	mov	r6, r2
 800c37c:	6123      	str	r3, [r4, #16]
 800c37e:	e7ba      	b.n	800c2f6 <_printf_i+0x152>
 800c380:	680b      	ldr	r3, [r1, #0]
 800c382:	1d1a      	adds	r2, r3, #4
 800c384:	600a      	str	r2, [r1, #0]
 800c386:	681e      	ldr	r6, [r3, #0]
 800c388:	2100      	movs	r1, #0
 800c38a:	4630      	mov	r0, r6
 800c38c:	6862      	ldr	r2, [r4, #4]
 800c38e:	f001 f8da 	bl	800d546 <memchr>
 800c392:	b108      	cbz	r0, 800c398 <_printf_i+0x1f4>
 800c394:	1b80      	subs	r0, r0, r6
 800c396:	6060      	str	r0, [r4, #4]
 800c398:	6863      	ldr	r3, [r4, #4]
 800c39a:	6123      	str	r3, [r4, #16]
 800c39c:	2300      	movs	r3, #0
 800c39e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c3a2:	e7a8      	b.n	800c2f6 <_printf_i+0x152>
 800c3a4:	4632      	mov	r2, r6
 800c3a6:	4649      	mov	r1, r9
 800c3a8:	4640      	mov	r0, r8
 800c3aa:	6923      	ldr	r3, [r4, #16]
 800c3ac:	47d0      	blx	sl
 800c3ae:	3001      	adds	r0, #1
 800c3b0:	d0ab      	beq.n	800c30a <_printf_i+0x166>
 800c3b2:	6823      	ldr	r3, [r4, #0]
 800c3b4:	079b      	lsls	r3, r3, #30
 800c3b6:	d413      	bmi.n	800c3e0 <_printf_i+0x23c>
 800c3b8:	68e0      	ldr	r0, [r4, #12]
 800c3ba:	9b03      	ldr	r3, [sp, #12]
 800c3bc:	4298      	cmp	r0, r3
 800c3be:	bfb8      	it	lt
 800c3c0:	4618      	movlt	r0, r3
 800c3c2:	e7a4      	b.n	800c30e <_printf_i+0x16a>
 800c3c4:	2301      	movs	r3, #1
 800c3c6:	4632      	mov	r2, r6
 800c3c8:	4649      	mov	r1, r9
 800c3ca:	4640      	mov	r0, r8
 800c3cc:	47d0      	blx	sl
 800c3ce:	3001      	adds	r0, #1
 800c3d0:	d09b      	beq.n	800c30a <_printf_i+0x166>
 800c3d2:	3501      	adds	r5, #1
 800c3d4:	68e3      	ldr	r3, [r4, #12]
 800c3d6:	9903      	ldr	r1, [sp, #12]
 800c3d8:	1a5b      	subs	r3, r3, r1
 800c3da:	42ab      	cmp	r3, r5
 800c3dc:	dcf2      	bgt.n	800c3c4 <_printf_i+0x220>
 800c3de:	e7eb      	b.n	800c3b8 <_printf_i+0x214>
 800c3e0:	2500      	movs	r5, #0
 800c3e2:	f104 0619 	add.w	r6, r4, #25
 800c3e6:	e7f5      	b.n	800c3d4 <_printf_i+0x230>
 800c3e8:	0800f9ce 	.word	0x0800f9ce
 800c3ec:	0800f9df 	.word	0x0800f9df

0800c3f0 <iprintf>:
 800c3f0:	b40f      	push	{r0, r1, r2, r3}
 800c3f2:	4b0a      	ldr	r3, [pc, #40]	; (800c41c <iprintf+0x2c>)
 800c3f4:	b513      	push	{r0, r1, r4, lr}
 800c3f6:	681c      	ldr	r4, [r3, #0]
 800c3f8:	b124      	cbz	r4, 800c404 <iprintf+0x14>
 800c3fa:	69a3      	ldr	r3, [r4, #24]
 800c3fc:	b913      	cbnz	r3, 800c404 <iprintf+0x14>
 800c3fe:	4620      	mov	r0, r4
 800c400:	f000 fffc 	bl	800d3fc <__sinit>
 800c404:	ab05      	add	r3, sp, #20
 800c406:	4620      	mov	r0, r4
 800c408:	9a04      	ldr	r2, [sp, #16]
 800c40a:	68a1      	ldr	r1, [r4, #8]
 800c40c:	9301      	str	r3, [sp, #4]
 800c40e:	f001 fdd7 	bl	800dfc0 <_vfiprintf_r>
 800c412:	b002      	add	sp, #8
 800c414:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c418:	b004      	add	sp, #16
 800c41a:	4770      	bx	lr
 800c41c:	2000001c 	.word	0x2000001c

0800c420 <_sbrk_r>:
 800c420:	b538      	push	{r3, r4, r5, lr}
 800c422:	2300      	movs	r3, #0
 800c424:	4d05      	ldr	r5, [pc, #20]	; (800c43c <_sbrk_r+0x1c>)
 800c426:	4604      	mov	r4, r0
 800c428:	4608      	mov	r0, r1
 800c42a:	602b      	str	r3, [r5, #0]
 800c42c:	f7f6 fa5e 	bl	80028ec <_sbrk>
 800c430:	1c43      	adds	r3, r0, #1
 800c432:	d102      	bne.n	800c43a <_sbrk_r+0x1a>
 800c434:	682b      	ldr	r3, [r5, #0]
 800c436:	b103      	cbz	r3, 800c43a <_sbrk_r+0x1a>
 800c438:	6023      	str	r3, [r4, #0]
 800c43a:	bd38      	pop	{r3, r4, r5, pc}
 800c43c:	20000bb8 	.word	0x20000bb8

0800c440 <siprintf>:
 800c440:	b40e      	push	{r1, r2, r3}
 800c442:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c446:	b500      	push	{lr}
 800c448:	b09c      	sub	sp, #112	; 0x70
 800c44a:	ab1d      	add	r3, sp, #116	; 0x74
 800c44c:	9002      	str	r0, [sp, #8]
 800c44e:	9006      	str	r0, [sp, #24]
 800c450:	9107      	str	r1, [sp, #28]
 800c452:	9104      	str	r1, [sp, #16]
 800c454:	4808      	ldr	r0, [pc, #32]	; (800c478 <siprintf+0x38>)
 800c456:	4909      	ldr	r1, [pc, #36]	; (800c47c <siprintf+0x3c>)
 800c458:	f853 2b04 	ldr.w	r2, [r3], #4
 800c45c:	9105      	str	r1, [sp, #20]
 800c45e:	6800      	ldr	r0, [r0, #0]
 800c460:	a902      	add	r1, sp, #8
 800c462:	9301      	str	r3, [sp, #4]
 800c464:	f001 fc84 	bl	800dd70 <_svfiprintf_r>
 800c468:	2200      	movs	r2, #0
 800c46a:	9b02      	ldr	r3, [sp, #8]
 800c46c:	701a      	strb	r2, [r3, #0]
 800c46e:	b01c      	add	sp, #112	; 0x70
 800c470:	f85d eb04 	ldr.w	lr, [sp], #4
 800c474:	b003      	add	sp, #12
 800c476:	4770      	bx	lr
 800c478:	2000001c 	.word	0x2000001c
 800c47c:	ffff0208 	.word	0xffff0208

0800c480 <strncpy>:
 800c480:	4603      	mov	r3, r0
 800c482:	b510      	push	{r4, lr}
 800c484:	3901      	subs	r1, #1
 800c486:	b132      	cbz	r2, 800c496 <strncpy+0x16>
 800c488:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c48c:	3a01      	subs	r2, #1
 800c48e:	f803 4b01 	strb.w	r4, [r3], #1
 800c492:	2c00      	cmp	r4, #0
 800c494:	d1f7      	bne.n	800c486 <strncpy+0x6>
 800c496:	2100      	movs	r1, #0
 800c498:	441a      	add	r2, r3
 800c49a:	4293      	cmp	r3, r2
 800c49c:	d100      	bne.n	800c4a0 <strncpy+0x20>
 800c49e:	bd10      	pop	{r4, pc}
 800c4a0:	f803 1b01 	strb.w	r1, [r3], #1
 800c4a4:	e7f9      	b.n	800c49a <strncpy+0x1a>

0800c4a6 <strnlen>:
 800c4a6:	4602      	mov	r2, r0
 800c4a8:	b510      	push	{r4, lr}
 800c4aa:	4401      	add	r1, r0
 800c4ac:	428a      	cmp	r2, r1
 800c4ae:	4613      	mov	r3, r2
 800c4b0:	d101      	bne.n	800c4b6 <strnlen+0x10>
 800c4b2:	1a18      	subs	r0, r3, r0
 800c4b4:	bd10      	pop	{r4, pc}
 800c4b6:	781c      	ldrb	r4, [r3, #0]
 800c4b8:	3201      	adds	r2, #1
 800c4ba:	2c00      	cmp	r4, #0
 800c4bc:	d1f6      	bne.n	800c4ac <strnlen+0x6>
 800c4be:	e7f8      	b.n	800c4b2 <strnlen+0xc>

0800c4c0 <_strtol_l.isra.0>:
 800c4c0:	2b01      	cmp	r3, #1
 800c4c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4c6:	4686      	mov	lr, r0
 800c4c8:	d001      	beq.n	800c4ce <_strtol_l.isra.0+0xe>
 800c4ca:	2b24      	cmp	r3, #36	; 0x24
 800c4cc:	d906      	bls.n	800c4dc <_strtol_l.isra.0+0x1c>
 800c4ce:	f7ff fa47 	bl	800b960 <__errno>
 800c4d2:	2316      	movs	r3, #22
 800c4d4:	6003      	str	r3, [r0, #0]
 800c4d6:	2000      	movs	r0, #0
 800c4d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4dc:	468c      	mov	ip, r1
 800c4de:	4e3a      	ldr	r6, [pc, #232]	; (800c5c8 <_strtol_l.isra.0+0x108>)
 800c4e0:	4660      	mov	r0, ip
 800c4e2:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800c4e6:	5da5      	ldrb	r5, [r4, r6]
 800c4e8:	f015 0508 	ands.w	r5, r5, #8
 800c4ec:	d1f8      	bne.n	800c4e0 <_strtol_l.isra.0+0x20>
 800c4ee:	2c2d      	cmp	r4, #45	; 0x2d
 800c4f0:	d133      	bne.n	800c55a <_strtol_l.isra.0+0x9a>
 800c4f2:	f04f 0801 	mov.w	r8, #1
 800c4f6:	f89c 4000 	ldrb.w	r4, [ip]
 800c4fa:	f100 0c02 	add.w	ip, r0, #2
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d05d      	beq.n	800c5be <_strtol_l.isra.0+0xfe>
 800c502:	2b10      	cmp	r3, #16
 800c504:	d10c      	bne.n	800c520 <_strtol_l.isra.0+0x60>
 800c506:	2c30      	cmp	r4, #48	; 0x30
 800c508:	d10a      	bne.n	800c520 <_strtol_l.isra.0+0x60>
 800c50a:	f89c 0000 	ldrb.w	r0, [ip]
 800c50e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800c512:	2858      	cmp	r0, #88	; 0x58
 800c514:	d14e      	bne.n	800c5b4 <_strtol_l.isra.0+0xf4>
 800c516:	2310      	movs	r3, #16
 800c518:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800c51c:	f10c 0c02 	add.w	ip, ip, #2
 800c520:	2500      	movs	r5, #0
 800c522:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 800c526:	3f01      	subs	r7, #1
 800c528:	fbb7 f9f3 	udiv	r9, r7, r3
 800c52c:	4628      	mov	r0, r5
 800c52e:	fb03 7a19 	mls	sl, r3, r9, r7
 800c532:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800c536:	2e09      	cmp	r6, #9
 800c538:	d818      	bhi.n	800c56c <_strtol_l.isra.0+0xac>
 800c53a:	4634      	mov	r4, r6
 800c53c:	42a3      	cmp	r3, r4
 800c53e:	dd24      	ble.n	800c58a <_strtol_l.isra.0+0xca>
 800c540:	2d00      	cmp	r5, #0
 800c542:	db1f      	blt.n	800c584 <_strtol_l.isra.0+0xc4>
 800c544:	4581      	cmp	r9, r0
 800c546:	d31d      	bcc.n	800c584 <_strtol_l.isra.0+0xc4>
 800c548:	d101      	bne.n	800c54e <_strtol_l.isra.0+0x8e>
 800c54a:	45a2      	cmp	sl, r4
 800c54c:	db1a      	blt.n	800c584 <_strtol_l.isra.0+0xc4>
 800c54e:	2501      	movs	r5, #1
 800c550:	fb00 4003 	mla	r0, r0, r3, r4
 800c554:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800c558:	e7eb      	b.n	800c532 <_strtol_l.isra.0+0x72>
 800c55a:	2c2b      	cmp	r4, #43	; 0x2b
 800c55c:	bf08      	it	eq
 800c55e:	f89c 4000 	ldrbeq.w	r4, [ip]
 800c562:	46a8      	mov	r8, r5
 800c564:	bf08      	it	eq
 800c566:	f100 0c02 	addeq.w	ip, r0, #2
 800c56a:	e7c8      	b.n	800c4fe <_strtol_l.isra.0+0x3e>
 800c56c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800c570:	2e19      	cmp	r6, #25
 800c572:	d801      	bhi.n	800c578 <_strtol_l.isra.0+0xb8>
 800c574:	3c37      	subs	r4, #55	; 0x37
 800c576:	e7e1      	b.n	800c53c <_strtol_l.isra.0+0x7c>
 800c578:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800c57c:	2e19      	cmp	r6, #25
 800c57e:	d804      	bhi.n	800c58a <_strtol_l.isra.0+0xca>
 800c580:	3c57      	subs	r4, #87	; 0x57
 800c582:	e7db      	b.n	800c53c <_strtol_l.isra.0+0x7c>
 800c584:	f04f 35ff 	mov.w	r5, #4294967295
 800c588:	e7e4      	b.n	800c554 <_strtol_l.isra.0+0x94>
 800c58a:	2d00      	cmp	r5, #0
 800c58c:	da08      	bge.n	800c5a0 <_strtol_l.isra.0+0xe0>
 800c58e:	2322      	movs	r3, #34	; 0x22
 800c590:	4638      	mov	r0, r7
 800c592:	f8ce 3000 	str.w	r3, [lr]
 800c596:	2a00      	cmp	r2, #0
 800c598:	d09e      	beq.n	800c4d8 <_strtol_l.isra.0+0x18>
 800c59a:	f10c 31ff 	add.w	r1, ip, #4294967295
 800c59e:	e007      	b.n	800c5b0 <_strtol_l.isra.0+0xf0>
 800c5a0:	f1b8 0f00 	cmp.w	r8, #0
 800c5a4:	d000      	beq.n	800c5a8 <_strtol_l.isra.0+0xe8>
 800c5a6:	4240      	negs	r0, r0
 800c5a8:	2a00      	cmp	r2, #0
 800c5aa:	d095      	beq.n	800c4d8 <_strtol_l.isra.0+0x18>
 800c5ac:	2d00      	cmp	r5, #0
 800c5ae:	d1f4      	bne.n	800c59a <_strtol_l.isra.0+0xda>
 800c5b0:	6011      	str	r1, [r2, #0]
 800c5b2:	e791      	b.n	800c4d8 <_strtol_l.isra.0+0x18>
 800c5b4:	2430      	movs	r4, #48	; 0x30
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d1b2      	bne.n	800c520 <_strtol_l.isra.0+0x60>
 800c5ba:	2308      	movs	r3, #8
 800c5bc:	e7b0      	b.n	800c520 <_strtol_l.isra.0+0x60>
 800c5be:	2c30      	cmp	r4, #48	; 0x30
 800c5c0:	d0a3      	beq.n	800c50a <_strtol_l.isra.0+0x4a>
 800c5c2:	230a      	movs	r3, #10
 800c5c4:	e7ac      	b.n	800c520 <_strtol_l.isra.0+0x60>
 800c5c6:	bf00      	nop
 800c5c8:	0800f9f1 	.word	0x0800f9f1

0800c5cc <strtol>:
 800c5cc:	4613      	mov	r3, r2
 800c5ce:	460a      	mov	r2, r1
 800c5d0:	4601      	mov	r1, r0
 800c5d2:	4802      	ldr	r0, [pc, #8]	; (800c5dc <strtol+0x10>)
 800c5d4:	6800      	ldr	r0, [r0, #0]
 800c5d6:	f7ff bf73 	b.w	800c4c0 <_strtol_l.isra.0>
 800c5da:	bf00      	nop
 800c5dc:	2000001c 	.word	0x2000001c

0800c5e0 <_vsniprintf_r>:
 800c5e0:	b530      	push	{r4, r5, lr}
 800c5e2:	1e14      	subs	r4, r2, #0
 800c5e4:	4605      	mov	r5, r0
 800c5e6:	b09b      	sub	sp, #108	; 0x6c
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	da05      	bge.n	800c5f8 <_vsniprintf_r+0x18>
 800c5ec:	238b      	movs	r3, #139	; 0x8b
 800c5ee:	f04f 30ff 	mov.w	r0, #4294967295
 800c5f2:	602b      	str	r3, [r5, #0]
 800c5f4:	b01b      	add	sp, #108	; 0x6c
 800c5f6:	bd30      	pop	{r4, r5, pc}
 800c5f8:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c5fc:	f8ad 300c 	strh.w	r3, [sp, #12]
 800c600:	bf0c      	ite	eq
 800c602:	4623      	moveq	r3, r4
 800c604:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c608:	9302      	str	r3, [sp, #8]
 800c60a:	9305      	str	r3, [sp, #20]
 800c60c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c610:	4602      	mov	r2, r0
 800c612:	9100      	str	r1, [sp, #0]
 800c614:	9104      	str	r1, [sp, #16]
 800c616:	f8ad 300e 	strh.w	r3, [sp, #14]
 800c61a:	4669      	mov	r1, sp
 800c61c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c61e:	4628      	mov	r0, r5
 800c620:	f001 fba6 	bl	800dd70 <_svfiprintf_r>
 800c624:	1c43      	adds	r3, r0, #1
 800c626:	bfbc      	itt	lt
 800c628:	238b      	movlt	r3, #139	; 0x8b
 800c62a:	602b      	strlt	r3, [r5, #0]
 800c62c:	2c00      	cmp	r4, #0
 800c62e:	d0e1      	beq.n	800c5f4 <_vsniprintf_r+0x14>
 800c630:	2200      	movs	r2, #0
 800c632:	9b00      	ldr	r3, [sp, #0]
 800c634:	701a      	strb	r2, [r3, #0]
 800c636:	e7dd      	b.n	800c5f4 <_vsniprintf_r+0x14>

0800c638 <vsniprintf>:
 800c638:	b507      	push	{r0, r1, r2, lr}
 800c63a:	9300      	str	r3, [sp, #0]
 800c63c:	4613      	mov	r3, r2
 800c63e:	460a      	mov	r2, r1
 800c640:	4601      	mov	r1, r0
 800c642:	4803      	ldr	r0, [pc, #12]	; (800c650 <vsniprintf+0x18>)
 800c644:	6800      	ldr	r0, [r0, #0]
 800c646:	f7ff ffcb 	bl	800c5e0 <_vsniprintf_r>
 800c64a:	b003      	add	sp, #12
 800c64c:	f85d fb04 	ldr.w	pc, [sp], #4
 800c650:	2000001c 	.word	0x2000001c

0800c654 <quorem>:
 800c654:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c658:	6903      	ldr	r3, [r0, #16]
 800c65a:	690c      	ldr	r4, [r1, #16]
 800c65c:	4607      	mov	r7, r0
 800c65e:	42a3      	cmp	r3, r4
 800c660:	f2c0 8083 	blt.w	800c76a <quorem+0x116>
 800c664:	3c01      	subs	r4, #1
 800c666:	f100 0514 	add.w	r5, r0, #20
 800c66a:	f101 0814 	add.w	r8, r1, #20
 800c66e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c672:	9301      	str	r3, [sp, #4]
 800c674:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c678:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c67c:	3301      	adds	r3, #1
 800c67e:	429a      	cmp	r2, r3
 800c680:	fbb2 f6f3 	udiv	r6, r2, r3
 800c684:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c688:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c68c:	d332      	bcc.n	800c6f4 <quorem+0xa0>
 800c68e:	f04f 0e00 	mov.w	lr, #0
 800c692:	4640      	mov	r0, r8
 800c694:	46ac      	mov	ip, r5
 800c696:	46f2      	mov	sl, lr
 800c698:	f850 2b04 	ldr.w	r2, [r0], #4
 800c69c:	b293      	uxth	r3, r2
 800c69e:	fb06 e303 	mla	r3, r6, r3, lr
 800c6a2:	0c12      	lsrs	r2, r2, #16
 800c6a4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c6a8:	fb06 e202 	mla	r2, r6, r2, lr
 800c6ac:	b29b      	uxth	r3, r3
 800c6ae:	ebaa 0303 	sub.w	r3, sl, r3
 800c6b2:	f8dc a000 	ldr.w	sl, [ip]
 800c6b6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c6ba:	fa1f fa8a 	uxth.w	sl, sl
 800c6be:	4453      	add	r3, sl
 800c6c0:	fa1f fa82 	uxth.w	sl, r2
 800c6c4:	f8dc 2000 	ldr.w	r2, [ip]
 800c6c8:	4581      	cmp	r9, r0
 800c6ca:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800c6ce:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c6d2:	b29b      	uxth	r3, r3
 800c6d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c6d8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c6dc:	f84c 3b04 	str.w	r3, [ip], #4
 800c6e0:	d2da      	bcs.n	800c698 <quorem+0x44>
 800c6e2:	f855 300b 	ldr.w	r3, [r5, fp]
 800c6e6:	b92b      	cbnz	r3, 800c6f4 <quorem+0xa0>
 800c6e8:	9b01      	ldr	r3, [sp, #4]
 800c6ea:	3b04      	subs	r3, #4
 800c6ec:	429d      	cmp	r5, r3
 800c6ee:	461a      	mov	r2, r3
 800c6f0:	d32f      	bcc.n	800c752 <quorem+0xfe>
 800c6f2:	613c      	str	r4, [r7, #16]
 800c6f4:	4638      	mov	r0, r7
 800c6f6:	f001 f9c9 	bl	800da8c <__mcmp>
 800c6fa:	2800      	cmp	r0, #0
 800c6fc:	db25      	blt.n	800c74a <quorem+0xf6>
 800c6fe:	4628      	mov	r0, r5
 800c700:	f04f 0c00 	mov.w	ip, #0
 800c704:	3601      	adds	r6, #1
 800c706:	f858 1b04 	ldr.w	r1, [r8], #4
 800c70a:	f8d0 e000 	ldr.w	lr, [r0]
 800c70e:	b28b      	uxth	r3, r1
 800c710:	ebac 0303 	sub.w	r3, ip, r3
 800c714:	fa1f f28e 	uxth.w	r2, lr
 800c718:	4413      	add	r3, r2
 800c71a:	0c0a      	lsrs	r2, r1, #16
 800c71c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c720:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c724:	b29b      	uxth	r3, r3
 800c726:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c72a:	45c1      	cmp	r9, r8
 800c72c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c730:	f840 3b04 	str.w	r3, [r0], #4
 800c734:	d2e7      	bcs.n	800c706 <quorem+0xb2>
 800c736:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c73a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c73e:	b922      	cbnz	r2, 800c74a <quorem+0xf6>
 800c740:	3b04      	subs	r3, #4
 800c742:	429d      	cmp	r5, r3
 800c744:	461a      	mov	r2, r3
 800c746:	d30a      	bcc.n	800c75e <quorem+0x10a>
 800c748:	613c      	str	r4, [r7, #16]
 800c74a:	4630      	mov	r0, r6
 800c74c:	b003      	add	sp, #12
 800c74e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c752:	6812      	ldr	r2, [r2, #0]
 800c754:	3b04      	subs	r3, #4
 800c756:	2a00      	cmp	r2, #0
 800c758:	d1cb      	bne.n	800c6f2 <quorem+0x9e>
 800c75a:	3c01      	subs	r4, #1
 800c75c:	e7c6      	b.n	800c6ec <quorem+0x98>
 800c75e:	6812      	ldr	r2, [r2, #0]
 800c760:	3b04      	subs	r3, #4
 800c762:	2a00      	cmp	r2, #0
 800c764:	d1f0      	bne.n	800c748 <quorem+0xf4>
 800c766:	3c01      	subs	r4, #1
 800c768:	e7eb      	b.n	800c742 <quorem+0xee>
 800c76a:	2000      	movs	r0, #0
 800c76c:	e7ee      	b.n	800c74c <quorem+0xf8>
	...

0800c770 <_dtoa_r>:
 800c770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c774:	4616      	mov	r6, r2
 800c776:	461f      	mov	r7, r3
 800c778:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800c77a:	b099      	sub	sp, #100	; 0x64
 800c77c:	4605      	mov	r5, r0
 800c77e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800c782:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800c786:	b974      	cbnz	r4, 800c7a6 <_dtoa_r+0x36>
 800c788:	2010      	movs	r0, #16
 800c78a:	f7ff f913 	bl	800b9b4 <malloc>
 800c78e:	4602      	mov	r2, r0
 800c790:	6268      	str	r0, [r5, #36]	; 0x24
 800c792:	b920      	cbnz	r0, 800c79e <_dtoa_r+0x2e>
 800c794:	21ea      	movs	r1, #234	; 0xea
 800c796:	4bae      	ldr	r3, [pc, #696]	; (800ca50 <_dtoa_r+0x2e0>)
 800c798:	48ae      	ldr	r0, [pc, #696]	; (800ca54 <_dtoa_r+0x2e4>)
 800c79a:	f001 fe57 	bl	800e44c <__assert_func>
 800c79e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c7a2:	6004      	str	r4, [r0, #0]
 800c7a4:	60c4      	str	r4, [r0, #12]
 800c7a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c7a8:	6819      	ldr	r1, [r3, #0]
 800c7aa:	b151      	cbz	r1, 800c7c2 <_dtoa_r+0x52>
 800c7ac:	685a      	ldr	r2, [r3, #4]
 800c7ae:	2301      	movs	r3, #1
 800c7b0:	4093      	lsls	r3, r2
 800c7b2:	604a      	str	r2, [r1, #4]
 800c7b4:	608b      	str	r3, [r1, #8]
 800c7b6:	4628      	mov	r0, r5
 800c7b8:	f000 ff2e 	bl	800d618 <_Bfree>
 800c7bc:	2200      	movs	r2, #0
 800c7be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c7c0:	601a      	str	r2, [r3, #0]
 800c7c2:	1e3b      	subs	r3, r7, #0
 800c7c4:	bfaf      	iteee	ge
 800c7c6:	2300      	movge	r3, #0
 800c7c8:	2201      	movlt	r2, #1
 800c7ca:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c7ce:	9305      	strlt	r3, [sp, #20]
 800c7d0:	bfa8      	it	ge
 800c7d2:	f8c8 3000 	strge.w	r3, [r8]
 800c7d6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800c7da:	4b9f      	ldr	r3, [pc, #636]	; (800ca58 <_dtoa_r+0x2e8>)
 800c7dc:	bfb8      	it	lt
 800c7de:	f8c8 2000 	strlt.w	r2, [r8]
 800c7e2:	ea33 0309 	bics.w	r3, r3, r9
 800c7e6:	d119      	bne.n	800c81c <_dtoa_r+0xac>
 800c7e8:	f242 730f 	movw	r3, #9999	; 0x270f
 800c7ec:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800c7ee:	6013      	str	r3, [r2, #0]
 800c7f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c7f4:	4333      	orrs	r3, r6
 800c7f6:	f000 8580 	beq.w	800d2fa <_dtoa_r+0xb8a>
 800c7fa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c7fc:	b953      	cbnz	r3, 800c814 <_dtoa_r+0xa4>
 800c7fe:	4b97      	ldr	r3, [pc, #604]	; (800ca5c <_dtoa_r+0x2ec>)
 800c800:	e022      	b.n	800c848 <_dtoa_r+0xd8>
 800c802:	4b97      	ldr	r3, [pc, #604]	; (800ca60 <_dtoa_r+0x2f0>)
 800c804:	9308      	str	r3, [sp, #32]
 800c806:	3308      	adds	r3, #8
 800c808:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800c80a:	6013      	str	r3, [r2, #0]
 800c80c:	9808      	ldr	r0, [sp, #32]
 800c80e:	b019      	add	sp, #100	; 0x64
 800c810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c814:	4b91      	ldr	r3, [pc, #580]	; (800ca5c <_dtoa_r+0x2ec>)
 800c816:	9308      	str	r3, [sp, #32]
 800c818:	3303      	adds	r3, #3
 800c81a:	e7f5      	b.n	800c808 <_dtoa_r+0x98>
 800c81c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800c820:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800c824:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c828:	2200      	movs	r2, #0
 800c82a:	2300      	movs	r3, #0
 800c82c:	f7f4 f928 	bl	8000a80 <__aeabi_dcmpeq>
 800c830:	4680      	mov	r8, r0
 800c832:	b158      	cbz	r0, 800c84c <_dtoa_r+0xdc>
 800c834:	2301      	movs	r3, #1
 800c836:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800c838:	6013      	str	r3, [r2, #0]
 800c83a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	f000 8559 	beq.w	800d2f4 <_dtoa_r+0xb84>
 800c842:	4888      	ldr	r0, [pc, #544]	; (800ca64 <_dtoa_r+0x2f4>)
 800c844:	6018      	str	r0, [r3, #0]
 800c846:	1e43      	subs	r3, r0, #1
 800c848:	9308      	str	r3, [sp, #32]
 800c84a:	e7df      	b.n	800c80c <_dtoa_r+0x9c>
 800c84c:	ab16      	add	r3, sp, #88	; 0x58
 800c84e:	9301      	str	r3, [sp, #4]
 800c850:	ab17      	add	r3, sp, #92	; 0x5c
 800c852:	9300      	str	r3, [sp, #0]
 800c854:	4628      	mov	r0, r5
 800c856:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c85a:	f001 f9c3 	bl	800dbe4 <__d2b>
 800c85e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800c862:	4682      	mov	sl, r0
 800c864:	2c00      	cmp	r4, #0
 800c866:	d07e      	beq.n	800c966 <_dtoa_r+0x1f6>
 800c868:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c86c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c86e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800c872:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c876:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800c87a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800c87e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800c882:	2200      	movs	r2, #0
 800c884:	4b78      	ldr	r3, [pc, #480]	; (800ca68 <_dtoa_r+0x2f8>)
 800c886:	f7f3 fcdb 	bl	8000240 <__aeabi_dsub>
 800c88a:	a36b      	add	r3, pc, #428	; (adr r3, 800ca38 <_dtoa_r+0x2c8>)
 800c88c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c890:	f7f3 fe8e 	bl	80005b0 <__aeabi_dmul>
 800c894:	a36a      	add	r3, pc, #424	; (adr r3, 800ca40 <_dtoa_r+0x2d0>)
 800c896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c89a:	f7f3 fcd3 	bl	8000244 <__adddf3>
 800c89e:	4606      	mov	r6, r0
 800c8a0:	4620      	mov	r0, r4
 800c8a2:	460f      	mov	r7, r1
 800c8a4:	f7f3 fe1a 	bl	80004dc <__aeabi_i2d>
 800c8a8:	a367      	add	r3, pc, #412	; (adr r3, 800ca48 <_dtoa_r+0x2d8>)
 800c8aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8ae:	f7f3 fe7f 	bl	80005b0 <__aeabi_dmul>
 800c8b2:	4602      	mov	r2, r0
 800c8b4:	460b      	mov	r3, r1
 800c8b6:	4630      	mov	r0, r6
 800c8b8:	4639      	mov	r1, r7
 800c8ba:	f7f3 fcc3 	bl	8000244 <__adddf3>
 800c8be:	4606      	mov	r6, r0
 800c8c0:	460f      	mov	r7, r1
 800c8c2:	f7f4 f925 	bl	8000b10 <__aeabi_d2iz>
 800c8c6:	2200      	movs	r2, #0
 800c8c8:	4681      	mov	r9, r0
 800c8ca:	2300      	movs	r3, #0
 800c8cc:	4630      	mov	r0, r6
 800c8ce:	4639      	mov	r1, r7
 800c8d0:	f7f4 f8e0 	bl	8000a94 <__aeabi_dcmplt>
 800c8d4:	b148      	cbz	r0, 800c8ea <_dtoa_r+0x17a>
 800c8d6:	4648      	mov	r0, r9
 800c8d8:	f7f3 fe00 	bl	80004dc <__aeabi_i2d>
 800c8dc:	4632      	mov	r2, r6
 800c8de:	463b      	mov	r3, r7
 800c8e0:	f7f4 f8ce 	bl	8000a80 <__aeabi_dcmpeq>
 800c8e4:	b908      	cbnz	r0, 800c8ea <_dtoa_r+0x17a>
 800c8e6:	f109 39ff 	add.w	r9, r9, #4294967295
 800c8ea:	f1b9 0f16 	cmp.w	r9, #22
 800c8ee:	d857      	bhi.n	800c9a0 <_dtoa_r+0x230>
 800c8f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c8f4:	4b5d      	ldr	r3, [pc, #372]	; (800ca6c <_dtoa_r+0x2fc>)
 800c8f6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800c8fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8fe:	f7f4 f8c9 	bl	8000a94 <__aeabi_dcmplt>
 800c902:	2800      	cmp	r0, #0
 800c904:	d04e      	beq.n	800c9a4 <_dtoa_r+0x234>
 800c906:	2300      	movs	r3, #0
 800c908:	f109 39ff 	add.w	r9, r9, #4294967295
 800c90c:	930f      	str	r3, [sp, #60]	; 0x3c
 800c90e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c910:	1b1c      	subs	r4, r3, r4
 800c912:	1e63      	subs	r3, r4, #1
 800c914:	9309      	str	r3, [sp, #36]	; 0x24
 800c916:	bf49      	itett	mi
 800c918:	f1c4 0301 	rsbmi	r3, r4, #1
 800c91c:	2300      	movpl	r3, #0
 800c91e:	9306      	strmi	r3, [sp, #24]
 800c920:	2300      	movmi	r3, #0
 800c922:	bf54      	ite	pl
 800c924:	9306      	strpl	r3, [sp, #24]
 800c926:	9309      	strmi	r3, [sp, #36]	; 0x24
 800c928:	f1b9 0f00 	cmp.w	r9, #0
 800c92c:	db3c      	blt.n	800c9a8 <_dtoa_r+0x238>
 800c92e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c930:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800c934:	444b      	add	r3, r9
 800c936:	9309      	str	r3, [sp, #36]	; 0x24
 800c938:	2300      	movs	r3, #0
 800c93a:	930a      	str	r3, [sp, #40]	; 0x28
 800c93c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c93e:	2b09      	cmp	r3, #9
 800c940:	d86c      	bhi.n	800ca1c <_dtoa_r+0x2ac>
 800c942:	2b05      	cmp	r3, #5
 800c944:	bfc4      	itt	gt
 800c946:	3b04      	subgt	r3, #4
 800c948:	9322      	strgt	r3, [sp, #136]	; 0x88
 800c94a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c94c:	bfc8      	it	gt
 800c94e:	2400      	movgt	r4, #0
 800c950:	f1a3 0302 	sub.w	r3, r3, #2
 800c954:	bfd8      	it	le
 800c956:	2401      	movle	r4, #1
 800c958:	2b03      	cmp	r3, #3
 800c95a:	f200 808b 	bhi.w	800ca74 <_dtoa_r+0x304>
 800c95e:	e8df f003 	tbb	[pc, r3]
 800c962:	4f2d      	.short	0x4f2d
 800c964:	5b4d      	.short	0x5b4d
 800c966:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800c96a:	441c      	add	r4, r3
 800c96c:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800c970:	2b20      	cmp	r3, #32
 800c972:	bfc3      	ittte	gt
 800c974:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c978:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800c97c:	fa09 f303 	lslgt.w	r3, r9, r3
 800c980:	f1c3 0320 	rsble	r3, r3, #32
 800c984:	bfc6      	itte	gt
 800c986:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c98a:	4318      	orrgt	r0, r3
 800c98c:	fa06 f003 	lslle.w	r0, r6, r3
 800c990:	f7f3 fd94 	bl	80004bc <__aeabi_ui2d>
 800c994:	2301      	movs	r3, #1
 800c996:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800c99a:	3c01      	subs	r4, #1
 800c99c:	9313      	str	r3, [sp, #76]	; 0x4c
 800c99e:	e770      	b.n	800c882 <_dtoa_r+0x112>
 800c9a0:	2301      	movs	r3, #1
 800c9a2:	e7b3      	b.n	800c90c <_dtoa_r+0x19c>
 800c9a4:	900f      	str	r0, [sp, #60]	; 0x3c
 800c9a6:	e7b2      	b.n	800c90e <_dtoa_r+0x19e>
 800c9a8:	9b06      	ldr	r3, [sp, #24]
 800c9aa:	eba3 0309 	sub.w	r3, r3, r9
 800c9ae:	9306      	str	r3, [sp, #24]
 800c9b0:	f1c9 0300 	rsb	r3, r9, #0
 800c9b4:	930a      	str	r3, [sp, #40]	; 0x28
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	930e      	str	r3, [sp, #56]	; 0x38
 800c9ba:	e7bf      	b.n	800c93c <_dtoa_r+0x1cc>
 800c9bc:	2300      	movs	r3, #0
 800c9be:	930b      	str	r3, [sp, #44]	; 0x2c
 800c9c0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	dc59      	bgt.n	800ca7a <_dtoa_r+0x30a>
 800c9c6:	f04f 0b01 	mov.w	fp, #1
 800c9ca:	465b      	mov	r3, fp
 800c9cc:	f8cd b008 	str.w	fp, [sp, #8]
 800c9d0:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800c9d4:	2200      	movs	r2, #0
 800c9d6:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800c9d8:	6042      	str	r2, [r0, #4]
 800c9da:	2204      	movs	r2, #4
 800c9dc:	f102 0614 	add.w	r6, r2, #20
 800c9e0:	429e      	cmp	r6, r3
 800c9e2:	6841      	ldr	r1, [r0, #4]
 800c9e4:	d94f      	bls.n	800ca86 <_dtoa_r+0x316>
 800c9e6:	4628      	mov	r0, r5
 800c9e8:	f000 fdd6 	bl	800d598 <_Balloc>
 800c9ec:	9008      	str	r0, [sp, #32]
 800c9ee:	2800      	cmp	r0, #0
 800c9f0:	d14d      	bne.n	800ca8e <_dtoa_r+0x31e>
 800c9f2:	4602      	mov	r2, r0
 800c9f4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c9f8:	4b1d      	ldr	r3, [pc, #116]	; (800ca70 <_dtoa_r+0x300>)
 800c9fa:	e6cd      	b.n	800c798 <_dtoa_r+0x28>
 800c9fc:	2301      	movs	r3, #1
 800c9fe:	e7de      	b.n	800c9be <_dtoa_r+0x24e>
 800ca00:	2300      	movs	r3, #0
 800ca02:	930b      	str	r3, [sp, #44]	; 0x2c
 800ca04:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ca06:	eb09 0b03 	add.w	fp, r9, r3
 800ca0a:	f10b 0301 	add.w	r3, fp, #1
 800ca0e:	2b01      	cmp	r3, #1
 800ca10:	9302      	str	r3, [sp, #8]
 800ca12:	bfb8      	it	lt
 800ca14:	2301      	movlt	r3, #1
 800ca16:	e7dd      	b.n	800c9d4 <_dtoa_r+0x264>
 800ca18:	2301      	movs	r3, #1
 800ca1a:	e7f2      	b.n	800ca02 <_dtoa_r+0x292>
 800ca1c:	2401      	movs	r4, #1
 800ca1e:	2300      	movs	r3, #0
 800ca20:	940b      	str	r4, [sp, #44]	; 0x2c
 800ca22:	9322      	str	r3, [sp, #136]	; 0x88
 800ca24:	f04f 3bff 	mov.w	fp, #4294967295
 800ca28:	2200      	movs	r2, #0
 800ca2a:	2312      	movs	r3, #18
 800ca2c:	f8cd b008 	str.w	fp, [sp, #8]
 800ca30:	9223      	str	r2, [sp, #140]	; 0x8c
 800ca32:	e7cf      	b.n	800c9d4 <_dtoa_r+0x264>
 800ca34:	f3af 8000 	nop.w
 800ca38:	636f4361 	.word	0x636f4361
 800ca3c:	3fd287a7 	.word	0x3fd287a7
 800ca40:	8b60c8b3 	.word	0x8b60c8b3
 800ca44:	3fc68a28 	.word	0x3fc68a28
 800ca48:	509f79fb 	.word	0x509f79fb
 800ca4c:	3fd34413 	.word	0x3fd34413
 800ca50:	0800fafe 	.word	0x0800fafe
 800ca54:	0800fb15 	.word	0x0800fb15
 800ca58:	7ff00000 	.word	0x7ff00000
 800ca5c:	0800fafa 	.word	0x0800fafa
 800ca60:	0800faf1 	.word	0x0800faf1
 800ca64:	0800f9cd 	.word	0x0800f9cd
 800ca68:	3ff80000 	.word	0x3ff80000
 800ca6c:	0800fc70 	.word	0x0800fc70
 800ca70:	0800fb74 	.word	0x0800fb74
 800ca74:	2301      	movs	r3, #1
 800ca76:	930b      	str	r3, [sp, #44]	; 0x2c
 800ca78:	e7d4      	b.n	800ca24 <_dtoa_r+0x2b4>
 800ca7a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800ca7e:	465b      	mov	r3, fp
 800ca80:	f8cd b008 	str.w	fp, [sp, #8]
 800ca84:	e7a6      	b.n	800c9d4 <_dtoa_r+0x264>
 800ca86:	3101      	adds	r1, #1
 800ca88:	6041      	str	r1, [r0, #4]
 800ca8a:	0052      	lsls	r2, r2, #1
 800ca8c:	e7a6      	b.n	800c9dc <_dtoa_r+0x26c>
 800ca8e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ca90:	9a08      	ldr	r2, [sp, #32]
 800ca92:	601a      	str	r2, [r3, #0]
 800ca94:	9b02      	ldr	r3, [sp, #8]
 800ca96:	2b0e      	cmp	r3, #14
 800ca98:	f200 80a8 	bhi.w	800cbec <_dtoa_r+0x47c>
 800ca9c:	2c00      	cmp	r4, #0
 800ca9e:	f000 80a5 	beq.w	800cbec <_dtoa_r+0x47c>
 800caa2:	f1b9 0f00 	cmp.w	r9, #0
 800caa6:	dd34      	ble.n	800cb12 <_dtoa_r+0x3a2>
 800caa8:	4a9a      	ldr	r2, [pc, #616]	; (800cd14 <_dtoa_r+0x5a4>)
 800caaa:	f009 030f 	and.w	r3, r9, #15
 800caae:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800cab2:	f419 7f80 	tst.w	r9, #256	; 0x100
 800cab6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800caba:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800cabe:	ea4f 1429 	mov.w	r4, r9, asr #4
 800cac2:	d016      	beq.n	800caf2 <_dtoa_r+0x382>
 800cac4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800cac8:	4b93      	ldr	r3, [pc, #588]	; (800cd18 <_dtoa_r+0x5a8>)
 800caca:	2703      	movs	r7, #3
 800cacc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cad0:	f7f3 fe98 	bl	8000804 <__aeabi_ddiv>
 800cad4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cad8:	f004 040f 	and.w	r4, r4, #15
 800cadc:	4e8e      	ldr	r6, [pc, #568]	; (800cd18 <_dtoa_r+0x5a8>)
 800cade:	b954      	cbnz	r4, 800caf6 <_dtoa_r+0x386>
 800cae0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800cae4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cae8:	f7f3 fe8c 	bl	8000804 <__aeabi_ddiv>
 800caec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800caf0:	e029      	b.n	800cb46 <_dtoa_r+0x3d6>
 800caf2:	2702      	movs	r7, #2
 800caf4:	e7f2      	b.n	800cadc <_dtoa_r+0x36c>
 800caf6:	07e1      	lsls	r1, r4, #31
 800caf8:	d508      	bpl.n	800cb0c <_dtoa_r+0x39c>
 800cafa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800cafe:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cb02:	f7f3 fd55 	bl	80005b0 <__aeabi_dmul>
 800cb06:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800cb0a:	3701      	adds	r7, #1
 800cb0c:	1064      	asrs	r4, r4, #1
 800cb0e:	3608      	adds	r6, #8
 800cb10:	e7e5      	b.n	800cade <_dtoa_r+0x36e>
 800cb12:	f000 80a5 	beq.w	800cc60 <_dtoa_r+0x4f0>
 800cb16:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800cb1a:	f1c9 0400 	rsb	r4, r9, #0
 800cb1e:	4b7d      	ldr	r3, [pc, #500]	; (800cd14 <_dtoa_r+0x5a4>)
 800cb20:	f004 020f 	and.w	r2, r4, #15
 800cb24:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cb28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb2c:	f7f3 fd40 	bl	80005b0 <__aeabi_dmul>
 800cb30:	2702      	movs	r7, #2
 800cb32:	2300      	movs	r3, #0
 800cb34:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cb38:	4e77      	ldr	r6, [pc, #476]	; (800cd18 <_dtoa_r+0x5a8>)
 800cb3a:	1124      	asrs	r4, r4, #4
 800cb3c:	2c00      	cmp	r4, #0
 800cb3e:	f040 8084 	bne.w	800cc4a <_dtoa_r+0x4da>
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d1d2      	bne.n	800caec <_dtoa_r+0x37c>
 800cb46:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	f000 808b 	beq.w	800cc64 <_dtoa_r+0x4f4>
 800cb4e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800cb52:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800cb56:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800cb5a:	2200      	movs	r2, #0
 800cb5c:	4b6f      	ldr	r3, [pc, #444]	; (800cd1c <_dtoa_r+0x5ac>)
 800cb5e:	f7f3 ff99 	bl	8000a94 <__aeabi_dcmplt>
 800cb62:	2800      	cmp	r0, #0
 800cb64:	d07e      	beq.n	800cc64 <_dtoa_r+0x4f4>
 800cb66:	9b02      	ldr	r3, [sp, #8]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d07b      	beq.n	800cc64 <_dtoa_r+0x4f4>
 800cb6c:	f1bb 0f00 	cmp.w	fp, #0
 800cb70:	dd38      	ble.n	800cbe4 <_dtoa_r+0x474>
 800cb72:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800cb76:	2200      	movs	r2, #0
 800cb78:	4b69      	ldr	r3, [pc, #420]	; (800cd20 <_dtoa_r+0x5b0>)
 800cb7a:	f7f3 fd19 	bl	80005b0 <__aeabi_dmul>
 800cb7e:	465c      	mov	r4, fp
 800cb80:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cb84:	f109 38ff 	add.w	r8, r9, #4294967295
 800cb88:	3701      	adds	r7, #1
 800cb8a:	4638      	mov	r0, r7
 800cb8c:	f7f3 fca6 	bl	80004dc <__aeabi_i2d>
 800cb90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cb94:	f7f3 fd0c 	bl	80005b0 <__aeabi_dmul>
 800cb98:	2200      	movs	r2, #0
 800cb9a:	4b62      	ldr	r3, [pc, #392]	; (800cd24 <_dtoa_r+0x5b4>)
 800cb9c:	f7f3 fb52 	bl	8000244 <__adddf3>
 800cba0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800cba4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800cba8:	9611      	str	r6, [sp, #68]	; 0x44
 800cbaa:	2c00      	cmp	r4, #0
 800cbac:	d15d      	bne.n	800cc6a <_dtoa_r+0x4fa>
 800cbae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cbb2:	2200      	movs	r2, #0
 800cbb4:	4b5c      	ldr	r3, [pc, #368]	; (800cd28 <_dtoa_r+0x5b8>)
 800cbb6:	f7f3 fb43 	bl	8000240 <__aeabi_dsub>
 800cbba:	4602      	mov	r2, r0
 800cbbc:	460b      	mov	r3, r1
 800cbbe:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800cbc2:	4633      	mov	r3, r6
 800cbc4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800cbc6:	f7f3 ff83 	bl	8000ad0 <__aeabi_dcmpgt>
 800cbca:	2800      	cmp	r0, #0
 800cbcc:	f040 829e 	bne.w	800d10c <_dtoa_r+0x99c>
 800cbd0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cbd4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800cbd6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800cbda:	f7f3 ff5b 	bl	8000a94 <__aeabi_dcmplt>
 800cbde:	2800      	cmp	r0, #0
 800cbe0:	f040 8292 	bne.w	800d108 <_dtoa_r+0x998>
 800cbe4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800cbe8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800cbec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	f2c0 8153 	blt.w	800ce9a <_dtoa_r+0x72a>
 800cbf4:	f1b9 0f0e 	cmp.w	r9, #14
 800cbf8:	f300 814f 	bgt.w	800ce9a <_dtoa_r+0x72a>
 800cbfc:	4b45      	ldr	r3, [pc, #276]	; (800cd14 <_dtoa_r+0x5a4>)
 800cbfe:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800cc02:	e9d3 3400 	ldrd	r3, r4, [r3]
 800cc06:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800cc0a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	f280 80db 	bge.w	800cdc8 <_dtoa_r+0x658>
 800cc12:	9b02      	ldr	r3, [sp, #8]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	f300 80d7 	bgt.w	800cdc8 <_dtoa_r+0x658>
 800cc1a:	f040 8274 	bne.w	800d106 <_dtoa_r+0x996>
 800cc1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cc22:	2200      	movs	r2, #0
 800cc24:	4b40      	ldr	r3, [pc, #256]	; (800cd28 <_dtoa_r+0x5b8>)
 800cc26:	f7f3 fcc3 	bl	80005b0 <__aeabi_dmul>
 800cc2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cc2e:	f7f3 ff45 	bl	8000abc <__aeabi_dcmpge>
 800cc32:	9c02      	ldr	r4, [sp, #8]
 800cc34:	4626      	mov	r6, r4
 800cc36:	2800      	cmp	r0, #0
 800cc38:	f040 824a 	bne.w	800d0d0 <_dtoa_r+0x960>
 800cc3c:	2331      	movs	r3, #49	; 0x31
 800cc3e:	9f08      	ldr	r7, [sp, #32]
 800cc40:	f109 0901 	add.w	r9, r9, #1
 800cc44:	f807 3b01 	strb.w	r3, [r7], #1
 800cc48:	e246      	b.n	800d0d8 <_dtoa_r+0x968>
 800cc4a:	07e2      	lsls	r2, r4, #31
 800cc4c:	d505      	bpl.n	800cc5a <_dtoa_r+0x4ea>
 800cc4e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cc52:	f7f3 fcad 	bl	80005b0 <__aeabi_dmul>
 800cc56:	2301      	movs	r3, #1
 800cc58:	3701      	adds	r7, #1
 800cc5a:	1064      	asrs	r4, r4, #1
 800cc5c:	3608      	adds	r6, #8
 800cc5e:	e76d      	b.n	800cb3c <_dtoa_r+0x3cc>
 800cc60:	2702      	movs	r7, #2
 800cc62:	e770      	b.n	800cb46 <_dtoa_r+0x3d6>
 800cc64:	46c8      	mov	r8, r9
 800cc66:	9c02      	ldr	r4, [sp, #8]
 800cc68:	e78f      	b.n	800cb8a <_dtoa_r+0x41a>
 800cc6a:	9908      	ldr	r1, [sp, #32]
 800cc6c:	4b29      	ldr	r3, [pc, #164]	; (800cd14 <_dtoa_r+0x5a4>)
 800cc6e:	4421      	add	r1, r4
 800cc70:	9112      	str	r1, [sp, #72]	; 0x48
 800cc72:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cc74:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cc78:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800cc7c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cc80:	2900      	cmp	r1, #0
 800cc82:	d055      	beq.n	800cd30 <_dtoa_r+0x5c0>
 800cc84:	2000      	movs	r0, #0
 800cc86:	4929      	ldr	r1, [pc, #164]	; (800cd2c <_dtoa_r+0x5bc>)
 800cc88:	f7f3 fdbc 	bl	8000804 <__aeabi_ddiv>
 800cc8c:	463b      	mov	r3, r7
 800cc8e:	4632      	mov	r2, r6
 800cc90:	f7f3 fad6 	bl	8000240 <__aeabi_dsub>
 800cc94:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800cc98:	9f08      	ldr	r7, [sp, #32]
 800cc9a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cc9e:	f7f3 ff37 	bl	8000b10 <__aeabi_d2iz>
 800cca2:	4604      	mov	r4, r0
 800cca4:	f7f3 fc1a 	bl	80004dc <__aeabi_i2d>
 800cca8:	4602      	mov	r2, r0
 800ccaa:	460b      	mov	r3, r1
 800ccac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ccb0:	f7f3 fac6 	bl	8000240 <__aeabi_dsub>
 800ccb4:	4602      	mov	r2, r0
 800ccb6:	460b      	mov	r3, r1
 800ccb8:	3430      	adds	r4, #48	; 0x30
 800ccba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ccbe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ccc2:	f807 4b01 	strb.w	r4, [r7], #1
 800ccc6:	f7f3 fee5 	bl	8000a94 <__aeabi_dcmplt>
 800ccca:	2800      	cmp	r0, #0
 800cccc:	d174      	bne.n	800cdb8 <_dtoa_r+0x648>
 800ccce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ccd2:	2000      	movs	r0, #0
 800ccd4:	4911      	ldr	r1, [pc, #68]	; (800cd1c <_dtoa_r+0x5ac>)
 800ccd6:	f7f3 fab3 	bl	8000240 <__aeabi_dsub>
 800ccda:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ccde:	f7f3 fed9 	bl	8000a94 <__aeabi_dcmplt>
 800cce2:	2800      	cmp	r0, #0
 800cce4:	f040 80b6 	bne.w	800ce54 <_dtoa_r+0x6e4>
 800cce8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ccea:	429f      	cmp	r7, r3
 800ccec:	f43f af7a 	beq.w	800cbe4 <_dtoa_r+0x474>
 800ccf0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ccf4:	2200      	movs	r2, #0
 800ccf6:	4b0a      	ldr	r3, [pc, #40]	; (800cd20 <_dtoa_r+0x5b0>)
 800ccf8:	f7f3 fc5a 	bl	80005b0 <__aeabi_dmul>
 800ccfc:	2200      	movs	r2, #0
 800ccfe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800cd02:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cd06:	4b06      	ldr	r3, [pc, #24]	; (800cd20 <_dtoa_r+0x5b0>)
 800cd08:	f7f3 fc52 	bl	80005b0 <__aeabi_dmul>
 800cd0c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cd10:	e7c3      	b.n	800cc9a <_dtoa_r+0x52a>
 800cd12:	bf00      	nop
 800cd14:	0800fc70 	.word	0x0800fc70
 800cd18:	0800fc48 	.word	0x0800fc48
 800cd1c:	3ff00000 	.word	0x3ff00000
 800cd20:	40240000 	.word	0x40240000
 800cd24:	401c0000 	.word	0x401c0000
 800cd28:	40140000 	.word	0x40140000
 800cd2c:	3fe00000 	.word	0x3fe00000
 800cd30:	4630      	mov	r0, r6
 800cd32:	4639      	mov	r1, r7
 800cd34:	f7f3 fc3c 	bl	80005b0 <__aeabi_dmul>
 800cd38:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cd3a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800cd3e:	9c08      	ldr	r4, [sp, #32]
 800cd40:	9314      	str	r3, [sp, #80]	; 0x50
 800cd42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cd46:	f7f3 fee3 	bl	8000b10 <__aeabi_d2iz>
 800cd4a:	9015      	str	r0, [sp, #84]	; 0x54
 800cd4c:	f7f3 fbc6 	bl	80004dc <__aeabi_i2d>
 800cd50:	4602      	mov	r2, r0
 800cd52:	460b      	mov	r3, r1
 800cd54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cd58:	f7f3 fa72 	bl	8000240 <__aeabi_dsub>
 800cd5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cd5e:	4606      	mov	r6, r0
 800cd60:	3330      	adds	r3, #48	; 0x30
 800cd62:	f804 3b01 	strb.w	r3, [r4], #1
 800cd66:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cd68:	460f      	mov	r7, r1
 800cd6a:	429c      	cmp	r4, r3
 800cd6c:	f04f 0200 	mov.w	r2, #0
 800cd70:	d124      	bne.n	800cdbc <_dtoa_r+0x64c>
 800cd72:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800cd76:	4bb3      	ldr	r3, [pc, #716]	; (800d044 <_dtoa_r+0x8d4>)
 800cd78:	f7f3 fa64 	bl	8000244 <__adddf3>
 800cd7c:	4602      	mov	r2, r0
 800cd7e:	460b      	mov	r3, r1
 800cd80:	4630      	mov	r0, r6
 800cd82:	4639      	mov	r1, r7
 800cd84:	f7f3 fea4 	bl	8000ad0 <__aeabi_dcmpgt>
 800cd88:	2800      	cmp	r0, #0
 800cd8a:	d162      	bne.n	800ce52 <_dtoa_r+0x6e2>
 800cd8c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800cd90:	2000      	movs	r0, #0
 800cd92:	49ac      	ldr	r1, [pc, #688]	; (800d044 <_dtoa_r+0x8d4>)
 800cd94:	f7f3 fa54 	bl	8000240 <__aeabi_dsub>
 800cd98:	4602      	mov	r2, r0
 800cd9a:	460b      	mov	r3, r1
 800cd9c:	4630      	mov	r0, r6
 800cd9e:	4639      	mov	r1, r7
 800cda0:	f7f3 fe78 	bl	8000a94 <__aeabi_dcmplt>
 800cda4:	2800      	cmp	r0, #0
 800cda6:	f43f af1d 	beq.w	800cbe4 <_dtoa_r+0x474>
 800cdaa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800cdac:	1e7b      	subs	r3, r7, #1
 800cdae:	9314      	str	r3, [sp, #80]	; 0x50
 800cdb0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800cdb4:	2b30      	cmp	r3, #48	; 0x30
 800cdb6:	d0f8      	beq.n	800cdaa <_dtoa_r+0x63a>
 800cdb8:	46c1      	mov	r9, r8
 800cdba:	e03a      	b.n	800ce32 <_dtoa_r+0x6c2>
 800cdbc:	4ba2      	ldr	r3, [pc, #648]	; (800d048 <_dtoa_r+0x8d8>)
 800cdbe:	f7f3 fbf7 	bl	80005b0 <__aeabi_dmul>
 800cdc2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cdc6:	e7bc      	b.n	800cd42 <_dtoa_r+0x5d2>
 800cdc8:	9f08      	ldr	r7, [sp, #32]
 800cdca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cdce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cdd2:	f7f3 fd17 	bl	8000804 <__aeabi_ddiv>
 800cdd6:	f7f3 fe9b 	bl	8000b10 <__aeabi_d2iz>
 800cdda:	4604      	mov	r4, r0
 800cddc:	f7f3 fb7e 	bl	80004dc <__aeabi_i2d>
 800cde0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cde4:	f7f3 fbe4 	bl	80005b0 <__aeabi_dmul>
 800cde8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800cdec:	460b      	mov	r3, r1
 800cdee:	4602      	mov	r2, r0
 800cdf0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cdf4:	f7f3 fa24 	bl	8000240 <__aeabi_dsub>
 800cdf8:	f807 6b01 	strb.w	r6, [r7], #1
 800cdfc:	9e08      	ldr	r6, [sp, #32]
 800cdfe:	9b02      	ldr	r3, [sp, #8]
 800ce00:	1bbe      	subs	r6, r7, r6
 800ce02:	42b3      	cmp	r3, r6
 800ce04:	d13a      	bne.n	800ce7c <_dtoa_r+0x70c>
 800ce06:	4602      	mov	r2, r0
 800ce08:	460b      	mov	r3, r1
 800ce0a:	f7f3 fa1b 	bl	8000244 <__adddf3>
 800ce0e:	4602      	mov	r2, r0
 800ce10:	460b      	mov	r3, r1
 800ce12:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ce16:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ce1a:	f7f3 fe59 	bl	8000ad0 <__aeabi_dcmpgt>
 800ce1e:	bb58      	cbnz	r0, 800ce78 <_dtoa_r+0x708>
 800ce20:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ce24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ce28:	f7f3 fe2a 	bl	8000a80 <__aeabi_dcmpeq>
 800ce2c:	b108      	cbz	r0, 800ce32 <_dtoa_r+0x6c2>
 800ce2e:	07e1      	lsls	r1, r4, #31
 800ce30:	d422      	bmi.n	800ce78 <_dtoa_r+0x708>
 800ce32:	4628      	mov	r0, r5
 800ce34:	4651      	mov	r1, sl
 800ce36:	f000 fbef 	bl	800d618 <_Bfree>
 800ce3a:	2300      	movs	r3, #0
 800ce3c:	703b      	strb	r3, [r7, #0]
 800ce3e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800ce40:	f109 0001 	add.w	r0, r9, #1
 800ce44:	6018      	str	r0, [r3, #0]
 800ce46:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	f43f acdf 	beq.w	800c80c <_dtoa_r+0x9c>
 800ce4e:	601f      	str	r7, [r3, #0]
 800ce50:	e4dc      	b.n	800c80c <_dtoa_r+0x9c>
 800ce52:	4627      	mov	r7, r4
 800ce54:	463b      	mov	r3, r7
 800ce56:	461f      	mov	r7, r3
 800ce58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ce5c:	2a39      	cmp	r2, #57	; 0x39
 800ce5e:	d107      	bne.n	800ce70 <_dtoa_r+0x700>
 800ce60:	9a08      	ldr	r2, [sp, #32]
 800ce62:	429a      	cmp	r2, r3
 800ce64:	d1f7      	bne.n	800ce56 <_dtoa_r+0x6e6>
 800ce66:	2230      	movs	r2, #48	; 0x30
 800ce68:	9908      	ldr	r1, [sp, #32]
 800ce6a:	f108 0801 	add.w	r8, r8, #1
 800ce6e:	700a      	strb	r2, [r1, #0]
 800ce70:	781a      	ldrb	r2, [r3, #0]
 800ce72:	3201      	adds	r2, #1
 800ce74:	701a      	strb	r2, [r3, #0]
 800ce76:	e79f      	b.n	800cdb8 <_dtoa_r+0x648>
 800ce78:	46c8      	mov	r8, r9
 800ce7a:	e7eb      	b.n	800ce54 <_dtoa_r+0x6e4>
 800ce7c:	2200      	movs	r2, #0
 800ce7e:	4b72      	ldr	r3, [pc, #456]	; (800d048 <_dtoa_r+0x8d8>)
 800ce80:	f7f3 fb96 	bl	80005b0 <__aeabi_dmul>
 800ce84:	4602      	mov	r2, r0
 800ce86:	460b      	mov	r3, r1
 800ce88:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ce8c:	2200      	movs	r2, #0
 800ce8e:	2300      	movs	r3, #0
 800ce90:	f7f3 fdf6 	bl	8000a80 <__aeabi_dcmpeq>
 800ce94:	2800      	cmp	r0, #0
 800ce96:	d098      	beq.n	800cdca <_dtoa_r+0x65a>
 800ce98:	e7cb      	b.n	800ce32 <_dtoa_r+0x6c2>
 800ce9a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ce9c:	2a00      	cmp	r2, #0
 800ce9e:	f000 80cd 	beq.w	800d03c <_dtoa_r+0x8cc>
 800cea2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800cea4:	2a01      	cmp	r2, #1
 800cea6:	f300 80af 	bgt.w	800d008 <_dtoa_r+0x898>
 800ceaa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ceac:	2a00      	cmp	r2, #0
 800ceae:	f000 80a7 	beq.w	800d000 <_dtoa_r+0x890>
 800ceb2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ceb6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ceb8:	9f06      	ldr	r7, [sp, #24]
 800ceba:	9a06      	ldr	r2, [sp, #24]
 800cebc:	2101      	movs	r1, #1
 800cebe:	441a      	add	r2, r3
 800cec0:	9206      	str	r2, [sp, #24]
 800cec2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cec4:	4628      	mov	r0, r5
 800cec6:	441a      	add	r2, r3
 800cec8:	9209      	str	r2, [sp, #36]	; 0x24
 800ceca:	f000 fc5f 	bl	800d78c <__i2b>
 800cece:	4606      	mov	r6, r0
 800ced0:	2f00      	cmp	r7, #0
 800ced2:	dd0c      	ble.n	800ceee <_dtoa_r+0x77e>
 800ced4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	dd09      	ble.n	800ceee <_dtoa_r+0x77e>
 800ceda:	42bb      	cmp	r3, r7
 800cedc:	bfa8      	it	ge
 800cede:	463b      	movge	r3, r7
 800cee0:	9a06      	ldr	r2, [sp, #24]
 800cee2:	1aff      	subs	r7, r7, r3
 800cee4:	1ad2      	subs	r2, r2, r3
 800cee6:	9206      	str	r2, [sp, #24]
 800cee8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ceea:	1ad3      	subs	r3, r2, r3
 800ceec:	9309      	str	r3, [sp, #36]	; 0x24
 800ceee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cef0:	b1f3      	cbz	r3, 800cf30 <_dtoa_r+0x7c0>
 800cef2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	f000 80a9 	beq.w	800d04c <_dtoa_r+0x8dc>
 800cefa:	2c00      	cmp	r4, #0
 800cefc:	dd10      	ble.n	800cf20 <_dtoa_r+0x7b0>
 800cefe:	4631      	mov	r1, r6
 800cf00:	4622      	mov	r2, r4
 800cf02:	4628      	mov	r0, r5
 800cf04:	f000 fcfc 	bl	800d900 <__pow5mult>
 800cf08:	4652      	mov	r2, sl
 800cf0a:	4601      	mov	r1, r0
 800cf0c:	4606      	mov	r6, r0
 800cf0e:	4628      	mov	r0, r5
 800cf10:	f000 fc52 	bl	800d7b8 <__multiply>
 800cf14:	4680      	mov	r8, r0
 800cf16:	4651      	mov	r1, sl
 800cf18:	4628      	mov	r0, r5
 800cf1a:	f000 fb7d 	bl	800d618 <_Bfree>
 800cf1e:	46c2      	mov	sl, r8
 800cf20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf22:	1b1a      	subs	r2, r3, r4
 800cf24:	d004      	beq.n	800cf30 <_dtoa_r+0x7c0>
 800cf26:	4651      	mov	r1, sl
 800cf28:	4628      	mov	r0, r5
 800cf2a:	f000 fce9 	bl	800d900 <__pow5mult>
 800cf2e:	4682      	mov	sl, r0
 800cf30:	2101      	movs	r1, #1
 800cf32:	4628      	mov	r0, r5
 800cf34:	f000 fc2a 	bl	800d78c <__i2b>
 800cf38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cf3a:	4604      	mov	r4, r0
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	f340 8087 	ble.w	800d050 <_dtoa_r+0x8e0>
 800cf42:	461a      	mov	r2, r3
 800cf44:	4601      	mov	r1, r0
 800cf46:	4628      	mov	r0, r5
 800cf48:	f000 fcda 	bl	800d900 <__pow5mult>
 800cf4c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cf4e:	4604      	mov	r4, r0
 800cf50:	2b01      	cmp	r3, #1
 800cf52:	f340 8080 	ble.w	800d056 <_dtoa_r+0x8e6>
 800cf56:	f04f 0800 	mov.w	r8, #0
 800cf5a:	6923      	ldr	r3, [r4, #16]
 800cf5c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cf60:	6918      	ldr	r0, [r3, #16]
 800cf62:	f000 fbc5 	bl	800d6f0 <__hi0bits>
 800cf66:	f1c0 0020 	rsb	r0, r0, #32
 800cf6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf6c:	4418      	add	r0, r3
 800cf6e:	f010 001f 	ands.w	r0, r0, #31
 800cf72:	f000 8092 	beq.w	800d09a <_dtoa_r+0x92a>
 800cf76:	f1c0 0320 	rsb	r3, r0, #32
 800cf7a:	2b04      	cmp	r3, #4
 800cf7c:	f340 808a 	ble.w	800d094 <_dtoa_r+0x924>
 800cf80:	f1c0 001c 	rsb	r0, r0, #28
 800cf84:	9b06      	ldr	r3, [sp, #24]
 800cf86:	4407      	add	r7, r0
 800cf88:	4403      	add	r3, r0
 800cf8a:	9306      	str	r3, [sp, #24]
 800cf8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf8e:	4403      	add	r3, r0
 800cf90:	9309      	str	r3, [sp, #36]	; 0x24
 800cf92:	9b06      	ldr	r3, [sp, #24]
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	dd05      	ble.n	800cfa4 <_dtoa_r+0x834>
 800cf98:	4651      	mov	r1, sl
 800cf9a:	461a      	mov	r2, r3
 800cf9c:	4628      	mov	r0, r5
 800cf9e:	f000 fd09 	bl	800d9b4 <__lshift>
 800cfa2:	4682      	mov	sl, r0
 800cfa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	dd05      	ble.n	800cfb6 <_dtoa_r+0x846>
 800cfaa:	4621      	mov	r1, r4
 800cfac:	461a      	mov	r2, r3
 800cfae:	4628      	mov	r0, r5
 800cfb0:	f000 fd00 	bl	800d9b4 <__lshift>
 800cfb4:	4604      	mov	r4, r0
 800cfb6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d070      	beq.n	800d09e <_dtoa_r+0x92e>
 800cfbc:	4621      	mov	r1, r4
 800cfbe:	4650      	mov	r0, sl
 800cfc0:	f000 fd64 	bl	800da8c <__mcmp>
 800cfc4:	2800      	cmp	r0, #0
 800cfc6:	da6a      	bge.n	800d09e <_dtoa_r+0x92e>
 800cfc8:	2300      	movs	r3, #0
 800cfca:	4651      	mov	r1, sl
 800cfcc:	220a      	movs	r2, #10
 800cfce:	4628      	mov	r0, r5
 800cfd0:	f000 fb44 	bl	800d65c <__multadd>
 800cfd4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cfd6:	4682      	mov	sl, r0
 800cfd8:	f109 39ff 	add.w	r9, r9, #4294967295
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	f000 8193 	beq.w	800d308 <_dtoa_r+0xb98>
 800cfe2:	4631      	mov	r1, r6
 800cfe4:	2300      	movs	r3, #0
 800cfe6:	220a      	movs	r2, #10
 800cfe8:	4628      	mov	r0, r5
 800cfea:	f000 fb37 	bl	800d65c <__multadd>
 800cfee:	f1bb 0f00 	cmp.w	fp, #0
 800cff2:	4606      	mov	r6, r0
 800cff4:	f300 8093 	bgt.w	800d11e <_dtoa_r+0x9ae>
 800cff8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cffa:	2b02      	cmp	r3, #2
 800cffc:	dc57      	bgt.n	800d0ae <_dtoa_r+0x93e>
 800cffe:	e08e      	b.n	800d11e <_dtoa_r+0x9ae>
 800d000:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d002:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d006:	e756      	b.n	800ceb6 <_dtoa_r+0x746>
 800d008:	9b02      	ldr	r3, [sp, #8]
 800d00a:	1e5c      	subs	r4, r3, #1
 800d00c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d00e:	42a3      	cmp	r3, r4
 800d010:	bfb7      	itett	lt
 800d012:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800d014:	1b1c      	subge	r4, r3, r4
 800d016:	1ae2      	sublt	r2, r4, r3
 800d018:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800d01a:	bfbe      	ittt	lt
 800d01c:	940a      	strlt	r4, [sp, #40]	; 0x28
 800d01e:	189b      	addlt	r3, r3, r2
 800d020:	930e      	strlt	r3, [sp, #56]	; 0x38
 800d022:	9b02      	ldr	r3, [sp, #8]
 800d024:	bfb8      	it	lt
 800d026:	2400      	movlt	r4, #0
 800d028:	2b00      	cmp	r3, #0
 800d02a:	bfbb      	ittet	lt
 800d02c:	9b06      	ldrlt	r3, [sp, #24]
 800d02e:	9a02      	ldrlt	r2, [sp, #8]
 800d030:	9f06      	ldrge	r7, [sp, #24]
 800d032:	1a9f      	sublt	r7, r3, r2
 800d034:	bfac      	ite	ge
 800d036:	9b02      	ldrge	r3, [sp, #8]
 800d038:	2300      	movlt	r3, #0
 800d03a:	e73e      	b.n	800ceba <_dtoa_r+0x74a>
 800d03c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d03e:	9f06      	ldr	r7, [sp, #24]
 800d040:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800d042:	e745      	b.n	800ced0 <_dtoa_r+0x760>
 800d044:	3fe00000 	.word	0x3fe00000
 800d048:	40240000 	.word	0x40240000
 800d04c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d04e:	e76a      	b.n	800cf26 <_dtoa_r+0x7b6>
 800d050:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d052:	2b01      	cmp	r3, #1
 800d054:	dc19      	bgt.n	800d08a <_dtoa_r+0x91a>
 800d056:	9b04      	ldr	r3, [sp, #16]
 800d058:	b9bb      	cbnz	r3, 800d08a <_dtoa_r+0x91a>
 800d05a:	9b05      	ldr	r3, [sp, #20]
 800d05c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d060:	b99b      	cbnz	r3, 800d08a <_dtoa_r+0x91a>
 800d062:	9b05      	ldr	r3, [sp, #20]
 800d064:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d068:	0d1b      	lsrs	r3, r3, #20
 800d06a:	051b      	lsls	r3, r3, #20
 800d06c:	b183      	cbz	r3, 800d090 <_dtoa_r+0x920>
 800d06e:	f04f 0801 	mov.w	r8, #1
 800d072:	9b06      	ldr	r3, [sp, #24]
 800d074:	3301      	adds	r3, #1
 800d076:	9306      	str	r3, [sp, #24]
 800d078:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d07a:	3301      	adds	r3, #1
 800d07c:	9309      	str	r3, [sp, #36]	; 0x24
 800d07e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d080:	2b00      	cmp	r3, #0
 800d082:	f47f af6a 	bne.w	800cf5a <_dtoa_r+0x7ea>
 800d086:	2001      	movs	r0, #1
 800d088:	e76f      	b.n	800cf6a <_dtoa_r+0x7fa>
 800d08a:	f04f 0800 	mov.w	r8, #0
 800d08e:	e7f6      	b.n	800d07e <_dtoa_r+0x90e>
 800d090:	4698      	mov	r8, r3
 800d092:	e7f4      	b.n	800d07e <_dtoa_r+0x90e>
 800d094:	f43f af7d 	beq.w	800cf92 <_dtoa_r+0x822>
 800d098:	4618      	mov	r0, r3
 800d09a:	301c      	adds	r0, #28
 800d09c:	e772      	b.n	800cf84 <_dtoa_r+0x814>
 800d09e:	9b02      	ldr	r3, [sp, #8]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	dc36      	bgt.n	800d112 <_dtoa_r+0x9a2>
 800d0a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d0a6:	2b02      	cmp	r3, #2
 800d0a8:	dd33      	ble.n	800d112 <_dtoa_r+0x9a2>
 800d0aa:	f8dd b008 	ldr.w	fp, [sp, #8]
 800d0ae:	f1bb 0f00 	cmp.w	fp, #0
 800d0b2:	d10d      	bne.n	800d0d0 <_dtoa_r+0x960>
 800d0b4:	4621      	mov	r1, r4
 800d0b6:	465b      	mov	r3, fp
 800d0b8:	2205      	movs	r2, #5
 800d0ba:	4628      	mov	r0, r5
 800d0bc:	f000 face 	bl	800d65c <__multadd>
 800d0c0:	4601      	mov	r1, r0
 800d0c2:	4604      	mov	r4, r0
 800d0c4:	4650      	mov	r0, sl
 800d0c6:	f000 fce1 	bl	800da8c <__mcmp>
 800d0ca:	2800      	cmp	r0, #0
 800d0cc:	f73f adb6 	bgt.w	800cc3c <_dtoa_r+0x4cc>
 800d0d0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d0d2:	9f08      	ldr	r7, [sp, #32]
 800d0d4:	ea6f 0903 	mvn.w	r9, r3
 800d0d8:	f04f 0800 	mov.w	r8, #0
 800d0dc:	4621      	mov	r1, r4
 800d0de:	4628      	mov	r0, r5
 800d0e0:	f000 fa9a 	bl	800d618 <_Bfree>
 800d0e4:	2e00      	cmp	r6, #0
 800d0e6:	f43f aea4 	beq.w	800ce32 <_dtoa_r+0x6c2>
 800d0ea:	f1b8 0f00 	cmp.w	r8, #0
 800d0ee:	d005      	beq.n	800d0fc <_dtoa_r+0x98c>
 800d0f0:	45b0      	cmp	r8, r6
 800d0f2:	d003      	beq.n	800d0fc <_dtoa_r+0x98c>
 800d0f4:	4641      	mov	r1, r8
 800d0f6:	4628      	mov	r0, r5
 800d0f8:	f000 fa8e 	bl	800d618 <_Bfree>
 800d0fc:	4631      	mov	r1, r6
 800d0fe:	4628      	mov	r0, r5
 800d100:	f000 fa8a 	bl	800d618 <_Bfree>
 800d104:	e695      	b.n	800ce32 <_dtoa_r+0x6c2>
 800d106:	2400      	movs	r4, #0
 800d108:	4626      	mov	r6, r4
 800d10a:	e7e1      	b.n	800d0d0 <_dtoa_r+0x960>
 800d10c:	46c1      	mov	r9, r8
 800d10e:	4626      	mov	r6, r4
 800d110:	e594      	b.n	800cc3c <_dtoa_r+0x4cc>
 800d112:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d114:	f8dd b008 	ldr.w	fp, [sp, #8]
 800d118:	2b00      	cmp	r3, #0
 800d11a:	f000 80fc 	beq.w	800d316 <_dtoa_r+0xba6>
 800d11e:	2f00      	cmp	r7, #0
 800d120:	dd05      	ble.n	800d12e <_dtoa_r+0x9be>
 800d122:	4631      	mov	r1, r6
 800d124:	463a      	mov	r2, r7
 800d126:	4628      	mov	r0, r5
 800d128:	f000 fc44 	bl	800d9b4 <__lshift>
 800d12c:	4606      	mov	r6, r0
 800d12e:	f1b8 0f00 	cmp.w	r8, #0
 800d132:	d05c      	beq.n	800d1ee <_dtoa_r+0xa7e>
 800d134:	4628      	mov	r0, r5
 800d136:	6871      	ldr	r1, [r6, #4]
 800d138:	f000 fa2e 	bl	800d598 <_Balloc>
 800d13c:	4607      	mov	r7, r0
 800d13e:	b928      	cbnz	r0, 800d14c <_dtoa_r+0x9dc>
 800d140:	4602      	mov	r2, r0
 800d142:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d146:	4b7e      	ldr	r3, [pc, #504]	; (800d340 <_dtoa_r+0xbd0>)
 800d148:	f7ff bb26 	b.w	800c798 <_dtoa_r+0x28>
 800d14c:	6932      	ldr	r2, [r6, #16]
 800d14e:	f106 010c 	add.w	r1, r6, #12
 800d152:	3202      	adds	r2, #2
 800d154:	0092      	lsls	r2, r2, #2
 800d156:	300c      	adds	r0, #12
 800d158:	f000 fa03 	bl	800d562 <memcpy>
 800d15c:	2201      	movs	r2, #1
 800d15e:	4639      	mov	r1, r7
 800d160:	4628      	mov	r0, r5
 800d162:	f000 fc27 	bl	800d9b4 <__lshift>
 800d166:	46b0      	mov	r8, r6
 800d168:	4606      	mov	r6, r0
 800d16a:	9b08      	ldr	r3, [sp, #32]
 800d16c:	3301      	adds	r3, #1
 800d16e:	9302      	str	r3, [sp, #8]
 800d170:	9b08      	ldr	r3, [sp, #32]
 800d172:	445b      	add	r3, fp
 800d174:	930a      	str	r3, [sp, #40]	; 0x28
 800d176:	9b04      	ldr	r3, [sp, #16]
 800d178:	f003 0301 	and.w	r3, r3, #1
 800d17c:	9309      	str	r3, [sp, #36]	; 0x24
 800d17e:	9b02      	ldr	r3, [sp, #8]
 800d180:	4621      	mov	r1, r4
 800d182:	4650      	mov	r0, sl
 800d184:	f103 3bff 	add.w	fp, r3, #4294967295
 800d188:	f7ff fa64 	bl	800c654 <quorem>
 800d18c:	4603      	mov	r3, r0
 800d18e:	4641      	mov	r1, r8
 800d190:	3330      	adds	r3, #48	; 0x30
 800d192:	9004      	str	r0, [sp, #16]
 800d194:	4650      	mov	r0, sl
 800d196:	930b      	str	r3, [sp, #44]	; 0x2c
 800d198:	f000 fc78 	bl	800da8c <__mcmp>
 800d19c:	4632      	mov	r2, r6
 800d19e:	9006      	str	r0, [sp, #24]
 800d1a0:	4621      	mov	r1, r4
 800d1a2:	4628      	mov	r0, r5
 800d1a4:	f000 fc8e 	bl	800dac4 <__mdiff>
 800d1a8:	68c2      	ldr	r2, [r0, #12]
 800d1aa:	4607      	mov	r7, r0
 800d1ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d1ae:	bb02      	cbnz	r2, 800d1f2 <_dtoa_r+0xa82>
 800d1b0:	4601      	mov	r1, r0
 800d1b2:	4650      	mov	r0, sl
 800d1b4:	f000 fc6a 	bl	800da8c <__mcmp>
 800d1b8:	4602      	mov	r2, r0
 800d1ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d1bc:	4639      	mov	r1, r7
 800d1be:	4628      	mov	r0, r5
 800d1c0:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800d1c4:	f000 fa28 	bl	800d618 <_Bfree>
 800d1c8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d1ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d1cc:	9f02      	ldr	r7, [sp, #8]
 800d1ce:	ea43 0102 	orr.w	r1, r3, r2
 800d1d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1d4:	430b      	orrs	r3, r1
 800d1d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d1d8:	d10d      	bne.n	800d1f6 <_dtoa_r+0xa86>
 800d1da:	2b39      	cmp	r3, #57	; 0x39
 800d1dc:	d027      	beq.n	800d22e <_dtoa_r+0xabe>
 800d1de:	9a06      	ldr	r2, [sp, #24]
 800d1e0:	2a00      	cmp	r2, #0
 800d1e2:	dd01      	ble.n	800d1e8 <_dtoa_r+0xa78>
 800d1e4:	9b04      	ldr	r3, [sp, #16]
 800d1e6:	3331      	adds	r3, #49	; 0x31
 800d1e8:	f88b 3000 	strb.w	r3, [fp]
 800d1ec:	e776      	b.n	800d0dc <_dtoa_r+0x96c>
 800d1ee:	4630      	mov	r0, r6
 800d1f0:	e7b9      	b.n	800d166 <_dtoa_r+0x9f6>
 800d1f2:	2201      	movs	r2, #1
 800d1f4:	e7e2      	b.n	800d1bc <_dtoa_r+0xa4c>
 800d1f6:	9906      	ldr	r1, [sp, #24]
 800d1f8:	2900      	cmp	r1, #0
 800d1fa:	db04      	blt.n	800d206 <_dtoa_r+0xa96>
 800d1fc:	9822      	ldr	r0, [sp, #136]	; 0x88
 800d1fe:	4301      	orrs	r1, r0
 800d200:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d202:	4301      	orrs	r1, r0
 800d204:	d120      	bne.n	800d248 <_dtoa_r+0xad8>
 800d206:	2a00      	cmp	r2, #0
 800d208:	ddee      	ble.n	800d1e8 <_dtoa_r+0xa78>
 800d20a:	4651      	mov	r1, sl
 800d20c:	2201      	movs	r2, #1
 800d20e:	4628      	mov	r0, r5
 800d210:	9302      	str	r3, [sp, #8]
 800d212:	f000 fbcf 	bl	800d9b4 <__lshift>
 800d216:	4621      	mov	r1, r4
 800d218:	4682      	mov	sl, r0
 800d21a:	f000 fc37 	bl	800da8c <__mcmp>
 800d21e:	2800      	cmp	r0, #0
 800d220:	9b02      	ldr	r3, [sp, #8]
 800d222:	dc02      	bgt.n	800d22a <_dtoa_r+0xaba>
 800d224:	d1e0      	bne.n	800d1e8 <_dtoa_r+0xa78>
 800d226:	07da      	lsls	r2, r3, #31
 800d228:	d5de      	bpl.n	800d1e8 <_dtoa_r+0xa78>
 800d22a:	2b39      	cmp	r3, #57	; 0x39
 800d22c:	d1da      	bne.n	800d1e4 <_dtoa_r+0xa74>
 800d22e:	2339      	movs	r3, #57	; 0x39
 800d230:	f88b 3000 	strb.w	r3, [fp]
 800d234:	463b      	mov	r3, r7
 800d236:	461f      	mov	r7, r3
 800d238:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800d23c:	3b01      	subs	r3, #1
 800d23e:	2a39      	cmp	r2, #57	; 0x39
 800d240:	d050      	beq.n	800d2e4 <_dtoa_r+0xb74>
 800d242:	3201      	adds	r2, #1
 800d244:	701a      	strb	r2, [r3, #0]
 800d246:	e749      	b.n	800d0dc <_dtoa_r+0x96c>
 800d248:	2a00      	cmp	r2, #0
 800d24a:	dd03      	ble.n	800d254 <_dtoa_r+0xae4>
 800d24c:	2b39      	cmp	r3, #57	; 0x39
 800d24e:	d0ee      	beq.n	800d22e <_dtoa_r+0xabe>
 800d250:	3301      	adds	r3, #1
 800d252:	e7c9      	b.n	800d1e8 <_dtoa_r+0xa78>
 800d254:	9a02      	ldr	r2, [sp, #8]
 800d256:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d258:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d25c:	428a      	cmp	r2, r1
 800d25e:	d02a      	beq.n	800d2b6 <_dtoa_r+0xb46>
 800d260:	4651      	mov	r1, sl
 800d262:	2300      	movs	r3, #0
 800d264:	220a      	movs	r2, #10
 800d266:	4628      	mov	r0, r5
 800d268:	f000 f9f8 	bl	800d65c <__multadd>
 800d26c:	45b0      	cmp	r8, r6
 800d26e:	4682      	mov	sl, r0
 800d270:	f04f 0300 	mov.w	r3, #0
 800d274:	f04f 020a 	mov.w	r2, #10
 800d278:	4641      	mov	r1, r8
 800d27a:	4628      	mov	r0, r5
 800d27c:	d107      	bne.n	800d28e <_dtoa_r+0xb1e>
 800d27e:	f000 f9ed 	bl	800d65c <__multadd>
 800d282:	4680      	mov	r8, r0
 800d284:	4606      	mov	r6, r0
 800d286:	9b02      	ldr	r3, [sp, #8]
 800d288:	3301      	adds	r3, #1
 800d28a:	9302      	str	r3, [sp, #8]
 800d28c:	e777      	b.n	800d17e <_dtoa_r+0xa0e>
 800d28e:	f000 f9e5 	bl	800d65c <__multadd>
 800d292:	4631      	mov	r1, r6
 800d294:	4680      	mov	r8, r0
 800d296:	2300      	movs	r3, #0
 800d298:	220a      	movs	r2, #10
 800d29a:	4628      	mov	r0, r5
 800d29c:	f000 f9de 	bl	800d65c <__multadd>
 800d2a0:	4606      	mov	r6, r0
 800d2a2:	e7f0      	b.n	800d286 <_dtoa_r+0xb16>
 800d2a4:	f1bb 0f00 	cmp.w	fp, #0
 800d2a8:	bfcc      	ite	gt
 800d2aa:	465f      	movgt	r7, fp
 800d2ac:	2701      	movle	r7, #1
 800d2ae:	f04f 0800 	mov.w	r8, #0
 800d2b2:	9a08      	ldr	r2, [sp, #32]
 800d2b4:	4417      	add	r7, r2
 800d2b6:	4651      	mov	r1, sl
 800d2b8:	2201      	movs	r2, #1
 800d2ba:	4628      	mov	r0, r5
 800d2bc:	9302      	str	r3, [sp, #8]
 800d2be:	f000 fb79 	bl	800d9b4 <__lshift>
 800d2c2:	4621      	mov	r1, r4
 800d2c4:	4682      	mov	sl, r0
 800d2c6:	f000 fbe1 	bl	800da8c <__mcmp>
 800d2ca:	2800      	cmp	r0, #0
 800d2cc:	dcb2      	bgt.n	800d234 <_dtoa_r+0xac4>
 800d2ce:	d102      	bne.n	800d2d6 <_dtoa_r+0xb66>
 800d2d0:	9b02      	ldr	r3, [sp, #8]
 800d2d2:	07db      	lsls	r3, r3, #31
 800d2d4:	d4ae      	bmi.n	800d234 <_dtoa_r+0xac4>
 800d2d6:	463b      	mov	r3, r7
 800d2d8:	461f      	mov	r7, r3
 800d2da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d2de:	2a30      	cmp	r2, #48	; 0x30
 800d2e0:	d0fa      	beq.n	800d2d8 <_dtoa_r+0xb68>
 800d2e2:	e6fb      	b.n	800d0dc <_dtoa_r+0x96c>
 800d2e4:	9a08      	ldr	r2, [sp, #32]
 800d2e6:	429a      	cmp	r2, r3
 800d2e8:	d1a5      	bne.n	800d236 <_dtoa_r+0xac6>
 800d2ea:	2331      	movs	r3, #49	; 0x31
 800d2ec:	f109 0901 	add.w	r9, r9, #1
 800d2f0:	7013      	strb	r3, [r2, #0]
 800d2f2:	e6f3      	b.n	800d0dc <_dtoa_r+0x96c>
 800d2f4:	4b13      	ldr	r3, [pc, #76]	; (800d344 <_dtoa_r+0xbd4>)
 800d2f6:	f7ff baa7 	b.w	800c848 <_dtoa_r+0xd8>
 800d2fa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	f47f aa80 	bne.w	800c802 <_dtoa_r+0x92>
 800d302:	4b11      	ldr	r3, [pc, #68]	; (800d348 <_dtoa_r+0xbd8>)
 800d304:	f7ff baa0 	b.w	800c848 <_dtoa_r+0xd8>
 800d308:	f1bb 0f00 	cmp.w	fp, #0
 800d30c:	dc03      	bgt.n	800d316 <_dtoa_r+0xba6>
 800d30e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d310:	2b02      	cmp	r3, #2
 800d312:	f73f aecc 	bgt.w	800d0ae <_dtoa_r+0x93e>
 800d316:	9f08      	ldr	r7, [sp, #32]
 800d318:	4621      	mov	r1, r4
 800d31a:	4650      	mov	r0, sl
 800d31c:	f7ff f99a 	bl	800c654 <quorem>
 800d320:	9a08      	ldr	r2, [sp, #32]
 800d322:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800d326:	f807 3b01 	strb.w	r3, [r7], #1
 800d32a:	1aba      	subs	r2, r7, r2
 800d32c:	4593      	cmp	fp, r2
 800d32e:	ddb9      	ble.n	800d2a4 <_dtoa_r+0xb34>
 800d330:	4651      	mov	r1, sl
 800d332:	2300      	movs	r3, #0
 800d334:	220a      	movs	r2, #10
 800d336:	4628      	mov	r0, r5
 800d338:	f000 f990 	bl	800d65c <__multadd>
 800d33c:	4682      	mov	sl, r0
 800d33e:	e7eb      	b.n	800d318 <_dtoa_r+0xba8>
 800d340:	0800fb74 	.word	0x0800fb74
 800d344:	0800f9cc 	.word	0x0800f9cc
 800d348:	0800faf1 	.word	0x0800faf1

0800d34c <std>:
 800d34c:	2300      	movs	r3, #0
 800d34e:	b510      	push	{r4, lr}
 800d350:	4604      	mov	r4, r0
 800d352:	e9c0 3300 	strd	r3, r3, [r0]
 800d356:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d35a:	6083      	str	r3, [r0, #8]
 800d35c:	8181      	strh	r1, [r0, #12]
 800d35e:	6643      	str	r3, [r0, #100]	; 0x64
 800d360:	81c2      	strh	r2, [r0, #14]
 800d362:	6183      	str	r3, [r0, #24]
 800d364:	4619      	mov	r1, r3
 800d366:	2208      	movs	r2, #8
 800d368:	305c      	adds	r0, #92	; 0x5c
 800d36a:	f7fe fb33 	bl	800b9d4 <memset>
 800d36e:	4b05      	ldr	r3, [pc, #20]	; (800d384 <std+0x38>)
 800d370:	6224      	str	r4, [r4, #32]
 800d372:	6263      	str	r3, [r4, #36]	; 0x24
 800d374:	4b04      	ldr	r3, [pc, #16]	; (800d388 <std+0x3c>)
 800d376:	62a3      	str	r3, [r4, #40]	; 0x28
 800d378:	4b04      	ldr	r3, [pc, #16]	; (800d38c <std+0x40>)
 800d37a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d37c:	4b04      	ldr	r3, [pc, #16]	; (800d390 <std+0x44>)
 800d37e:	6323      	str	r3, [r4, #48]	; 0x30
 800d380:	bd10      	pop	{r4, pc}
 800d382:	bf00      	nop
 800d384:	0800e221 	.word	0x0800e221
 800d388:	0800e243 	.word	0x0800e243
 800d38c:	0800e27b 	.word	0x0800e27b
 800d390:	0800e29f 	.word	0x0800e29f

0800d394 <_cleanup_r>:
 800d394:	4901      	ldr	r1, [pc, #4]	; (800d39c <_cleanup_r+0x8>)
 800d396:	f000 b8af 	b.w	800d4f8 <_fwalk_reent>
 800d39a:	bf00      	nop
 800d39c:	0800e5b5 	.word	0x0800e5b5

0800d3a0 <__sfmoreglue>:
 800d3a0:	b570      	push	{r4, r5, r6, lr}
 800d3a2:	2568      	movs	r5, #104	; 0x68
 800d3a4:	1e4a      	subs	r2, r1, #1
 800d3a6:	4355      	muls	r5, r2
 800d3a8:	460e      	mov	r6, r1
 800d3aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d3ae:	f7fe fb65 	bl	800ba7c <_malloc_r>
 800d3b2:	4604      	mov	r4, r0
 800d3b4:	b140      	cbz	r0, 800d3c8 <__sfmoreglue+0x28>
 800d3b6:	2100      	movs	r1, #0
 800d3b8:	e9c0 1600 	strd	r1, r6, [r0]
 800d3bc:	300c      	adds	r0, #12
 800d3be:	60a0      	str	r0, [r4, #8]
 800d3c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d3c4:	f7fe fb06 	bl	800b9d4 <memset>
 800d3c8:	4620      	mov	r0, r4
 800d3ca:	bd70      	pop	{r4, r5, r6, pc}

0800d3cc <__sfp_lock_acquire>:
 800d3cc:	4801      	ldr	r0, [pc, #4]	; (800d3d4 <__sfp_lock_acquire+0x8>)
 800d3ce:	f000 b8b8 	b.w	800d542 <__retarget_lock_acquire_recursive>
 800d3d2:	bf00      	nop
 800d3d4:	20000bb4 	.word	0x20000bb4

0800d3d8 <__sfp_lock_release>:
 800d3d8:	4801      	ldr	r0, [pc, #4]	; (800d3e0 <__sfp_lock_release+0x8>)
 800d3da:	f000 b8b3 	b.w	800d544 <__retarget_lock_release_recursive>
 800d3de:	bf00      	nop
 800d3e0:	20000bb4 	.word	0x20000bb4

0800d3e4 <__sinit_lock_acquire>:
 800d3e4:	4801      	ldr	r0, [pc, #4]	; (800d3ec <__sinit_lock_acquire+0x8>)
 800d3e6:	f000 b8ac 	b.w	800d542 <__retarget_lock_acquire_recursive>
 800d3ea:	bf00      	nop
 800d3ec:	20000baf 	.word	0x20000baf

0800d3f0 <__sinit_lock_release>:
 800d3f0:	4801      	ldr	r0, [pc, #4]	; (800d3f8 <__sinit_lock_release+0x8>)
 800d3f2:	f000 b8a7 	b.w	800d544 <__retarget_lock_release_recursive>
 800d3f6:	bf00      	nop
 800d3f8:	20000baf 	.word	0x20000baf

0800d3fc <__sinit>:
 800d3fc:	b510      	push	{r4, lr}
 800d3fe:	4604      	mov	r4, r0
 800d400:	f7ff fff0 	bl	800d3e4 <__sinit_lock_acquire>
 800d404:	69a3      	ldr	r3, [r4, #24]
 800d406:	b11b      	cbz	r3, 800d410 <__sinit+0x14>
 800d408:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d40c:	f7ff bff0 	b.w	800d3f0 <__sinit_lock_release>
 800d410:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d414:	6523      	str	r3, [r4, #80]	; 0x50
 800d416:	4b13      	ldr	r3, [pc, #76]	; (800d464 <__sinit+0x68>)
 800d418:	4a13      	ldr	r2, [pc, #76]	; (800d468 <__sinit+0x6c>)
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	62a2      	str	r2, [r4, #40]	; 0x28
 800d41e:	42a3      	cmp	r3, r4
 800d420:	bf08      	it	eq
 800d422:	2301      	moveq	r3, #1
 800d424:	4620      	mov	r0, r4
 800d426:	bf08      	it	eq
 800d428:	61a3      	streq	r3, [r4, #24]
 800d42a:	f000 f81f 	bl	800d46c <__sfp>
 800d42e:	6060      	str	r0, [r4, #4]
 800d430:	4620      	mov	r0, r4
 800d432:	f000 f81b 	bl	800d46c <__sfp>
 800d436:	60a0      	str	r0, [r4, #8]
 800d438:	4620      	mov	r0, r4
 800d43a:	f000 f817 	bl	800d46c <__sfp>
 800d43e:	2200      	movs	r2, #0
 800d440:	2104      	movs	r1, #4
 800d442:	60e0      	str	r0, [r4, #12]
 800d444:	6860      	ldr	r0, [r4, #4]
 800d446:	f7ff ff81 	bl	800d34c <std>
 800d44a:	2201      	movs	r2, #1
 800d44c:	2109      	movs	r1, #9
 800d44e:	68a0      	ldr	r0, [r4, #8]
 800d450:	f7ff ff7c 	bl	800d34c <std>
 800d454:	2202      	movs	r2, #2
 800d456:	2112      	movs	r1, #18
 800d458:	68e0      	ldr	r0, [r4, #12]
 800d45a:	f7ff ff77 	bl	800d34c <std>
 800d45e:	2301      	movs	r3, #1
 800d460:	61a3      	str	r3, [r4, #24]
 800d462:	e7d1      	b.n	800d408 <__sinit+0xc>
 800d464:	0800f9b8 	.word	0x0800f9b8
 800d468:	0800d395 	.word	0x0800d395

0800d46c <__sfp>:
 800d46c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d46e:	4607      	mov	r7, r0
 800d470:	f7ff ffac 	bl	800d3cc <__sfp_lock_acquire>
 800d474:	4b1e      	ldr	r3, [pc, #120]	; (800d4f0 <__sfp+0x84>)
 800d476:	681e      	ldr	r6, [r3, #0]
 800d478:	69b3      	ldr	r3, [r6, #24]
 800d47a:	b913      	cbnz	r3, 800d482 <__sfp+0x16>
 800d47c:	4630      	mov	r0, r6
 800d47e:	f7ff ffbd 	bl	800d3fc <__sinit>
 800d482:	3648      	adds	r6, #72	; 0x48
 800d484:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d488:	3b01      	subs	r3, #1
 800d48a:	d503      	bpl.n	800d494 <__sfp+0x28>
 800d48c:	6833      	ldr	r3, [r6, #0]
 800d48e:	b30b      	cbz	r3, 800d4d4 <__sfp+0x68>
 800d490:	6836      	ldr	r6, [r6, #0]
 800d492:	e7f7      	b.n	800d484 <__sfp+0x18>
 800d494:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d498:	b9d5      	cbnz	r5, 800d4d0 <__sfp+0x64>
 800d49a:	4b16      	ldr	r3, [pc, #88]	; (800d4f4 <__sfp+0x88>)
 800d49c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d4a0:	60e3      	str	r3, [r4, #12]
 800d4a2:	6665      	str	r5, [r4, #100]	; 0x64
 800d4a4:	f000 f84c 	bl	800d540 <__retarget_lock_init_recursive>
 800d4a8:	f7ff ff96 	bl	800d3d8 <__sfp_lock_release>
 800d4ac:	2208      	movs	r2, #8
 800d4ae:	4629      	mov	r1, r5
 800d4b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d4b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d4b8:	6025      	str	r5, [r4, #0]
 800d4ba:	61a5      	str	r5, [r4, #24]
 800d4bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d4c0:	f7fe fa88 	bl	800b9d4 <memset>
 800d4c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d4c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d4cc:	4620      	mov	r0, r4
 800d4ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d4d0:	3468      	adds	r4, #104	; 0x68
 800d4d2:	e7d9      	b.n	800d488 <__sfp+0x1c>
 800d4d4:	2104      	movs	r1, #4
 800d4d6:	4638      	mov	r0, r7
 800d4d8:	f7ff ff62 	bl	800d3a0 <__sfmoreglue>
 800d4dc:	4604      	mov	r4, r0
 800d4de:	6030      	str	r0, [r6, #0]
 800d4e0:	2800      	cmp	r0, #0
 800d4e2:	d1d5      	bne.n	800d490 <__sfp+0x24>
 800d4e4:	f7ff ff78 	bl	800d3d8 <__sfp_lock_release>
 800d4e8:	230c      	movs	r3, #12
 800d4ea:	603b      	str	r3, [r7, #0]
 800d4ec:	e7ee      	b.n	800d4cc <__sfp+0x60>
 800d4ee:	bf00      	nop
 800d4f0:	0800f9b8 	.word	0x0800f9b8
 800d4f4:	ffff0001 	.word	0xffff0001

0800d4f8 <_fwalk_reent>:
 800d4f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d4fc:	4606      	mov	r6, r0
 800d4fe:	4688      	mov	r8, r1
 800d500:	2700      	movs	r7, #0
 800d502:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d506:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d50a:	f1b9 0901 	subs.w	r9, r9, #1
 800d50e:	d505      	bpl.n	800d51c <_fwalk_reent+0x24>
 800d510:	6824      	ldr	r4, [r4, #0]
 800d512:	2c00      	cmp	r4, #0
 800d514:	d1f7      	bne.n	800d506 <_fwalk_reent+0xe>
 800d516:	4638      	mov	r0, r7
 800d518:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d51c:	89ab      	ldrh	r3, [r5, #12]
 800d51e:	2b01      	cmp	r3, #1
 800d520:	d907      	bls.n	800d532 <_fwalk_reent+0x3a>
 800d522:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d526:	3301      	adds	r3, #1
 800d528:	d003      	beq.n	800d532 <_fwalk_reent+0x3a>
 800d52a:	4629      	mov	r1, r5
 800d52c:	4630      	mov	r0, r6
 800d52e:	47c0      	blx	r8
 800d530:	4307      	orrs	r7, r0
 800d532:	3568      	adds	r5, #104	; 0x68
 800d534:	e7e9      	b.n	800d50a <_fwalk_reent+0x12>
	...

0800d538 <_localeconv_r>:
 800d538:	4800      	ldr	r0, [pc, #0]	; (800d53c <_localeconv_r+0x4>)
 800d53a:	4770      	bx	lr
 800d53c:	20000170 	.word	0x20000170

0800d540 <__retarget_lock_init_recursive>:
 800d540:	4770      	bx	lr

0800d542 <__retarget_lock_acquire_recursive>:
 800d542:	4770      	bx	lr

0800d544 <__retarget_lock_release_recursive>:
 800d544:	4770      	bx	lr

0800d546 <memchr>:
 800d546:	4603      	mov	r3, r0
 800d548:	b510      	push	{r4, lr}
 800d54a:	b2c9      	uxtb	r1, r1
 800d54c:	4402      	add	r2, r0
 800d54e:	4293      	cmp	r3, r2
 800d550:	4618      	mov	r0, r3
 800d552:	d101      	bne.n	800d558 <memchr+0x12>
 800d554:	2000      	movs	r0, #0
 800d556:	e003      	b.n	800d560 <memchr+0x1a>
 800d558:	7804      	ldrb	r4, [r0, #0]
 800d55a:	3301      	adds	r3, #1
 800d55c:	428c      	cmp	r4, r1
 800d55e:	d1f6      	bne.n	800d54e <memchr+0x8>
 800d560:	bd10      	pop	{r4, pc}

0800d562 <memcpy>:
 800d562:	440a      	add	r2, r1
 800d564:	4291      	cmp	r1, r2
 800d566:	f100 33ff 	add.w	r3, r0, #4294967295
 800d56a:	d100      	bne.n	800d56e <memcpy+0xc>
 800d56c:	4770      	bx	lr
 800d56e:	b510      	push	{r4, lr}
 800d570:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d574:	4291      	cmp	r1, r2
 800d576:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d57a:	d1f9      	bne.n	800d570 <memcpy+0xe>
 800d57c:	bd10      	pop	{r4, pc}
	...

0800d580 <__malloc_lock>:
 800d580:	4801      	ldr	r0, [pc, #4]	; (800d588 <__malloc_lock+0x8>)
 800d582:	f7ff bfde 	b.w	800d542 <__retarget_lock_acquire_recursive>
 800d586:	bf00      	nop
 800d588:	20000bb0 	.word	0x20000bb0

0800d58c <__malloc_unlock>:
 800d58c:	4801      	ldr	r0, [pc, #4]	; (800d594 <__malloc_unlock+0x8>)
 800d58e:	f7ff bfd9 	b.w	800d544 <__retarget_lock_release_recursive>
 800d592:	bf00      	nop
 800d594:	20000bb0 	.word	0x20000bb0

0800d598 <_Balloc>:
 800d598:	b570      	push	{r4, r5, r6, lr}
 800d59a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d59c:	4604      	mov	r4, r0
 800d59e:	460d      	mov	r5, r1
 800d5a0:	b976      	cbnz	r6, 800d5c0 <_Balloc+0x28>
 800d5a2:	2010      	movs	r0, #16
 800d5a4:	f7fe fa06 	bl	800b9b4 <malloc>
 800d5a8:	4602      	mov	r2, r0
 800d5aa:	6260      	str	r0, [r4, #36]	; 0x24
 800d5ac:	b920      	cbnz	r0, 800d5b8 <_Balloc+0x20>
 800d5ae:	2166      	movs	r1, #102	; 0x66
 800d5b0:	4b17      	ldr	r3, [pc, #92]	; (800d610 <_Balloc+0x78>)
 800d5b2:	4818      	ldr	r0, [pc, #96]	; (800d614 <_Balloc+0x7c>)
 800d5b4:	f000 ff4a 	bl	800e44c <__assert_func>
 800d5b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d5bc:	6006      	str	r6, [r0, #0]
 800d5be:	60c6      	str	r6, [r0, #12]
 800d5c0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d5c2:	68f3      	ldr	r3, [r6, #12]
 800d5c4:	b183      	cbz	r3, 800d5e8 <_Balloc+0x50>
 800d5c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d5c8:	68db      	ldr	r3, [r3, #12]
 800d5ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d5ce:	b9b8      	cbnz	r0, 800d600 <_Balloc+0x68>
 800d5d0:	2101      	movs	r1, #1
 800d5d2:	fa01 f605 	lsl.w	r6, r1, r5
 800d5d6:	1d72      	adds	r2, r6, #5
 800d5d8:	4620      	mov	r0, r4
 800d5da:	0092      	lsls	r2, r2, #2
 800d5dc:	f000 fb5e 	bl	800dc9c <_calloc_r>
 800d5e0:	b160      	cbz	r0, 800d5fc <_Balloc+0x64>
 800d5e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d5e6:	e00e      	b.n	800d606 <_Balloc+0x6e>
 800d5e8:	2221      	movs	r2, #33	; 0x21
 800d5ea:	2104      	movs	r1, #4
 800d5ec:	4620      	mov	r0, r4
 800d5ee:	f000 fb55 	bl	800dc9c <_calloc_r>
 800d5f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d5f4:	60f0      	str	r0, [r6, #12]
 800d5f6:	68db      	ldr	r3, [r3, #12]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d1e4      	bne.n	800d5c6 <_Balloc+0x2e>
 800d5fc:	2000      	movs	r0, #0
 800d5fe:	bd70      	pop	{r4, r5, r6, pc}
 800d600:	6802      	ldr	r2, [r0, #0]
 800d602:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d606:	2300      	movs	r3, #0
 800d608:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d60c:	e7f7      	b.n	800d5fe <_Balloc+0x66>
 800d60e:	bf00      	nop
 800d610:	0800fafe 	.word	0x0800fafe
 800d614:	0800fbe8 	.word	0x0800fbe8

0800d618 <_Bfree>:
 800d618:	b570      	push	{r4, r5, r6, lr}
 800d61a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d61c:	4605      	mov	r5, r0
 800d61e:	460c      	mov	r4, r1
 800d620:	b976      	cbnz	r6, 800d640 <_Bfree+0x28>
 800d622:	2010      	movs	r0, #16
 800d624:	f7fe f9c6 	bl	800b9b4 <malloc>
 800d628:	4602      	mov	r2, r0
 800d62a:	6268      	str	r0, [r5, #36]	; 0x24
 800d62c:	b920      	cbnz	r0, 800d638 <_Bfree+0x20>
 800d62e:	218a      	movs	r1, #138	; 0x8a
 800d630:	4b08      	ldr	r3, [pc, #32]	; (800d654 <_Bfree+0x3c>)
 800d632:	4809      	ldr	r0, [pc, #36]	; (800d658 <_Bfree+0x40>)
 800d634:	f000 ff0a 	bl	800e44c <__assert_func>
 800d638:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d63c:	6006      	str	r6, [r0, #0]
 800d63e:	60c6      	str	r6, [r0, #12]
 800d640:	b13c      	cbz	r4, 800d652 <_Bfree+0x3a>
 800d642:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d644:	6862      	ldr	r2, [r4, #4]
 800d646:	68db      	ldr	r3, [r3, #12]
 800d648:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d64c:	6021      	str	r1, [r4, #0]
 800d64e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d652:	bd70      	pop	{r4, r5, r6, pc}
 800d654:	0800fafe 	.word	0x0800fafe
 800d658:	0800fbe8 	.word	0x0800fbe8

0800d65c <__multadd>:
 800d65c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d660:	4698      	mov	r8, r3
 800d662:	460c      	mov	r4, r1
 800d664:	2300      	movs	r3, #0
 800d666:	690e      	ldr	r6, [r1, #16]
 800d668:	4607      	mov	r7, r0
 800d66a:	f101 0014 	add.w	r0, r1, #20
 800d66e:	6805      	ldr	r5, [r0, #0]
 800d670:	3301      	adds	r3, #1
 800d672:	b2a9      	uxth	r1, r5
 800d674:	fb02 8101 	mla	r1, r2, r1, r8
 800d678:	0c2d      	lsrs	r5, r5, #16
 800d67a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800d67e:	fb02 c505 	mla	r5, r2, r5, ip
 800d682:	b289      	uxth	r1, r1
 800d684:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800d688:	429e      	cmp	r6, r3
 800d68a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800d68e:	f840 1b04 	str.w	r1, [r0], #4
 800d692:	dcec      	bgt.n	800d66e <__multadd+0x12>
 800d694:	f1b8 0f00 	cmp.w	r8, #0
 800d698:	d022      	beq.n	800d6e0 <__multadd+0x84>
 800d69a:	68a3      	ldr	r3, [r4, #8]
 800d69c:	42b3      	cmp	r3, r6
 800d69e:	dc19      	bgt.n	800d6d4 <__multadd+0x78>
 800d6a0:	6861      	ldr	r1, [r4, #4]
 800d6a2:	4638      	mov	r0, r7
 800d6a4:	3101      	adds	r1, #1
 800d6a6:	f7ff ff77 	bl	800d598 <_Balloc>
 800d6aa:	4605      	mov	r5, r0
 800d6ac:	b928      	cbnz	r0, 800d6ba <__multadd+0x5e>
 800d6ae:	4602      	mov	r2, r0
 800d6b0:	21b5      	movs	r1, #181	; 0xb5
 800d6b2:	4b0d      	ldr	r3, [pc, #52]	; (800d6e8 <__multadd+0x8c>)
 800d6b4:	480d      	ldr	r0, [pc, #52]	; (800d6ec <__multadd+0x90>)
 800d6b6:	f000 fec9 	bl	800e44c <__assert_func>
 800d6ba:	6922      	ldr	r2, [r4, #16]
 800d6bc:	f104 010c 	add.w	r1, r4, #12
 800d6c0:	3202      	adds	r2, #2
 800d6c2:	0092      	lsls	r2, r2, #2
 800d6c4:	300c      	adds	r0, #12
 800d6c6:	f7ff ff4c 	bl	800d562 <memcpy>
 800d6ca:	4621      	mov	r1, r4
 800d6cc:	4638      	mov	r0, r7
 800d6ce:	f7ff ffa3 	bl	800d618 <_Bfree>
 800d6d2:	462c      	mov	r4, r5
 800d6d4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800d6d8:	3601      	adds	r6, #1
 800d6da:	f8c3 8014 	str.w	r8, [r3, #20]
 800d6de:	6126      	str	r6, [r4, #16]
 800d6e0:	4620      	mov	r0, r4
 800d6e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6e6:	bf00      	nop
 800d6e8:	0800fb74 	.word	0x0800fb74
 800d6ec:	0800fbe8 	.word	0x0800fbe8

0800d6f0 <__hi0bits>:
 800d6f0:	0c02      	lsrs	r2, r0, #16
 800d6f2:	0412      	lsls	r2, r2, #16
 800d6f4:	4603      	mov	r3, r0
 800d6f6:	b9ca      	cbnz	r2, 800d72c <__hi0bits+0x3c>
 800d6f8:	0403      	lsls	r3, r0, #16
 800d6fa:	2010      	movs	r0, #16
 800d6fc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800d700:	bf04      	itt	eq
 800d702:	021b      	lsleq	r3, r3, #8
 800d704:	3008      	addeq	r0, #8
 800d706:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800d70a:	bf04      	itt	eq
 800d70c:	011b      	lsleq	r3, r3, #4
 800d70e:	3004      	addeq	r0, #4
 800d710:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800d714:	bf04      	itt	eq
 800d716:	009b      	lsleq	r3, r3, #2
 800d718:	3002      	addeq	r0, #2
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	db05      	blt.n	800d72a <__hi0bits+0x3a>
 800d71e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800d722:	f100 0001 	add.w	r0, r0, #1
 800d726:	bf08      	it	eq
 800d728:	2020      	moveq	r0, #32
 800d72a:	4770      	bx	lr
 800d72c:	2000      	movs	r0, #0
 800d72e:	e7e5      	b.n	800d6fc <__hi0bits+0xc>

0800d730 <__lo0bits>:
 800d730:	6803      	ldr	r3, [r0, #0]
 800d732:	4602      	mov	r2, r0
 800d734:	f013 0007 	ands.w	r0, r3, #7
 800d738:	d00b      	beq.n	800d752 <__lo0bits+0x22>
 800d73a:	07d9      	lsls	r1, r3, #31
 800d73c:	d422      	bmi.n	800d784 <__lo0bits+0x54>
 800d73e:	0798      	lsls	r0, r3, #30
 800d740:	bf49      	itett	mi
 800d742:	085b      	lsrmi	r3, r3, #1
 800d744:	089b      	lsrpl	r3, r3, #2
 800d746:	2001      	movmi	r0, #1
 800d748:	6013      	strmi	r3, [r2, #0]
 800d74a:	bf5c      	itt	pl
 800d74c:	2002      	movpl	r0, #2
 800d74e:	6013      	strpl	r3, [r2, #0]
 800d750:	4770      	bx	lr
 800d752:	b299      	uxth	r1, r3
 800d754:	b909      	cbnz	r1, 800d75a <__lo0bits+0x2a>
 800d756:	2010      	movs	r0, #16
 800d758:	0c1b      	lsrs	r3, r3, #16
 800d75a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d75e:	bf04      	itt	eq
 800d760:	0a1b      	lsreq	r3, r3, #8
 800d762:	3008      	addeq	r0, #8
 800d764:	0719      	lsls	r1, r3, #28
 800d766:	bf04      	itt	eq
 800d768:	091b      	lsreq	r3, r3, #4
 800d76a:	3004      	addeq	r0, #4
 800d76c:	0799      	lsls	r1, r3, #30
 800d76e:	bf04      	itt	eq
 800d770:	089b      	lsreq	r3, r3, #2
 800d772:	3002      	addeq	r0, #2
 800d774:	07d9      	lsls	r1, r3, #31
 800d776:	d403      	bmi.n	800d780 <__lo0bits+0x50>
 800d778:	085b      	lsrs	r3, r3, #1
 800d77a:	f100 0001 	add.w	r0, r0, #1
 800d77e:	d003      	beq.n	800d788 <__lo0bits+0x58>
 800d780:	6013      	str	r3, [r2, #0]
 800d782:	4770      	bx	lr
 800d784:	2000      	movs	r0, #0
 800d786:	4770      	bx	lr
 800d788:	2020      	movs	r0, #32
 800d78a:	4770      	bx	lr

0800d78c <__i2b>:
 800d78c:	b510      	push	{r4, lr}
 800d78e:	460c      	mov	r4, r1
 800d790:	2101      	movs	r1, #1
 800d792:	f7ff ff01 	bl	800d598 <_Balloc>
 800d796:	4602      	mov	r2, r0
 800d798:	b928      	cbnz	r0, 800d7a6 <__i2b+0x1a>
 800d79a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d79e:	4b04      	ldr	r3, [pc, #16]	; (800d7b0 <__i2b+0x24>)
 800d7a0:	4804      	ldr	r0, [pc, #16]	; (800d7b4 <__i2b+0x28>)
 800d7a2:	f000 fe53 	bl	800e44c <__assert_func>
 800d7a6:	2301      	movs	r3, #1
 800d7a8:	6144      	str	r4, [r0, #20]
 800d7aa:	6103      	str	r3, [r0, #16]
 800d7ac:	bd10      	pop	{r4, pc}
 800d7ae:	bf00      	nop
 800d7b0:	0800fb74 	.word	0x0800fb74
 800d7b4:	0800fbe8 	.word	0x0800fbe8

0800d7b8 <__multiply>:
 800d7b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7bc:	4614      	mov	r4, r2
 800d7be:	690a      	ldr	r2, [r1, #16]
 800d7c0:	6923      	ldr	r3, [r4, #16]
 800d7c2:	460d      	mov	r5, r1
 800d7c4:	429a      	cmp	r2, r3
 800d7c6:	bfbe      	ittt	lt
 800d7c8:	460b      	movlt	r3, r1
 800d7ca:	4625      	movlt	r5, r4
 800d7cc:	461c      	movlt	r4, r3
 800d7ce:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800d7d2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d7d6:	68ab      	ldr	r3, [r5, #8]
 800d7d8:	6869      	ldr	r1, [r5, #4]
 800d7da:	eb0a 0709 	add.w	r7, sl, r9
 800d7de:	42bb      	cmp	r3, r7
 800d7e0:	b085      	sub	sp, #20
 800d7e2:	bfb8      	it	lt
 800d7e4:	3101      	addlt	r1, #1
 800d7e6:	f7ff fed7 	bl	800d598 <_Balloc>
 800d7ea:	b930      	cbnz	r0, 800d7fa <__multiply+0x42>
 800d7ec:	4602      	mov	r2, r0
 800d7ee:	f240 115d 	movw	r1, #349	; 0x15d
 800d7f2:	4b41      	ldr	r3, [pc, #260]	; (800d8f8 <__multiply+0x140>)
 800d7f4:	4841      	ldr	r0, [pc, #260]	; (800d8fc <__multiply+0x144>)
 800d7f6:	f000 fe29 	bl	800e44c <__assert_func>
 800d7fa:	f100 0614 	add.w	r6, r0, #20
 800d7fe:	4633      	mov	r3, r6
 800d800:	2200      	movs	r2, #0
 800d802:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800d806:	4543      	cmp	r3, r8
 800d808:	d31e      	bcc.n	800d848 <__multiply+0x90>
 800d80a:	f105 0c14 	add.w	ip, r5, #20
 800d80e:	f104 0314 	add.w	r3, r4, #20
 800d812:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800d816:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800d81a:	9202      	str	r2, [sp, #8]
 800d81c:	ebac 0205 	sub.w	r2, ip, r5
 800d820:	3a15      	subs	r2, #21
 800d822:	f022 0203 	bic.w	r2, r2, #3
 800d826:	3204      	adds	r2, #4
 800d828:	f105 0115 	add.w	r1, r5, #21
 800d82c:	458c      	cmp	ip, r1
 800d82e:	bf38      	it	cc
 800d830:	2204      	movcc	r2, #4
 800d832:	9201      	str	r2, [sp, #4]
 800d834:	9a02      	ldr	r2, [sp, #8]
 800d836:	9303      	str	r3, [sp, #12]
 800d838:	429a      	cmp	r2, r3
 800d83a:	d808      	bhi.n	800d84e <__multiply+0x96>
 800d83c:	2f00      	cmp	r7, #0
 800d83e:	dc55      	bgt.n	800d8ec <__multiply+0x134>
 800d840:	6107      	str	r7, [r0, #16]
 800d842:	b005      	add	sp, #20
 800d844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d848:	f843 2b04 	str.w	r2, [r3], #4
 800d84c:	e7db      	b.n	800d806 <__multiply+0x4e>
 800d84e:	f8b3 a000 	ldrh.w	sl, [r3]
 800d852:	f1ba 0f00 	cmp.w	sl, #0
 800d856:	d020      	beq.n	800d89a <__multiply+0xe2>
 800d858:	46b1      	mov	r9, r6
 800d85a:	2200      	movs	r2, #0
 800d85c:	f105 0e14 	add.w	lr, r5, #20
 800d860:	f85e 4b04 	ldr.w	r4, [lr], #4
 800d864:	f8d9 b000 	ldr.w	fp, [r9]
 800d868:	b2a1      	uxth	r1, r4
 800d86a:	fa1f fb8b 	uxth.w	fp, fp
 800d86e:	fb0a b101 	mla	r1, sl, r1, fp
 800d872:	4411      	add	r1, r2
 800d874:	f8d9 2000 	ldr.w	r2, [r9]
 800d878:	0c24      	lsrs	r4, r4, #16
 800d87a:	0c12      	lsrs	r2, r2, #16
 800d87c:	fb0a 2404 	mla	r4, sl, r4, r2
 800d880:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800d884:	b289      	uxth	r1, r1
 800d886:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800d88a:	45f4      	cmp	ip, lr
 800d88c:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800d890:	f849 1b04 	str.w	r1, [r9], #4
 800d894:	d8e4      	bhi.n	800d860 <__multiply+0xa8>
 800d896:	9901      	ldr	r1, [sp, #4]
 800d898:	5072      	str	r2, [r6, r1]
 800d89a:	9a03      	ldr	r2, [sp, #12]
 800d89c:	3304      	adds	r3, #4
 800d89e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d8a2:	f1b9 0f00 	cmp.w	r9, #0
 800d8a6:	d01f      	beq.n	800d8e8 <__multiply+0x130>
 800d8a8:	46b6      	mov	lr, r6
 800d8aa:	f04f 0a00 	mov.w	sl, #0
 800d8ae:	6834      	ldr	r4, [r6, #0]
 800d8b0:	f105 0114 	add.w	r1, r5, #20
 800d8b4:	880a      	ldrh	r2, [r1, #0]
 800d8b6:	f8be b002 	ldrh.w	fp, [lr, #2]
 800d8ba:	b2a4      	uxth	r4, r4
 800d8bc:	fb09 b202 	mla	r2, r9, r2, fp
 800d8c0:	4492      	add	sl, r2
 800d8c2:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800d8c6:	f84e 4b04 	str.w	r4, [lr], #4
 800d8ca:	f851 4b04 	ldr.w	r4, [r1], #4
 800d8ce:	f8be 2000 	ldrh.w	r2, [lr]
 800d8d2:	0c24      	lsrs	r4, r4, #16
 800d8d4:	fb09 2404 	mla	r4, r9, r4, r2
 800d8d8:	458c      	cmp	ip, r1
 800d8da:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800d8de:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d8e2:	d8e7      	bhi.n	800d8b4 <__multiply+0xfc>
 800d8e4:	9a01      	ldr	r2, [sp, #4]
 800d8e6:	50b4      	str	r4, [r6, r2]
 800d8e8:	3604      	adds	r6, #4
 800d8ea:	e7a3      	b.n	800d834 <__multiply+0x7c>
 800d8ec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d1a5      	bne.n	800d840 <__multiply+0x88>
 800d8f4:	3f01      	subs	r7, #1
 800d8f6:	e7a1      	b.n	800d83c <__multiply+0x84>
 800d8f8:	0800fb74 	.word	0x0800fb74
 800d8fc:	0800fbe8 	.word	0x0800fbe8

0800d900 <__pow5mult>:
 800d900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d904:	4615      	mov	r5, r2
 800d906:	f012 0203 	ands.w	r2, r2, #3
 800d90a:	4606      	mov	r6, r0
 800d90c:	460f      	mov	r7, r1
 800d90e:	d007      	beq.n	800d920 <__pow5mult+0x20>
 800d910:	4c25      	ldr	r4, [pc, #148]	; (800d9a8 <__pow5mult+0xa8>)
 800d912:	3a01      	subs	r2, #1
 800d914:	2300      	movs	r3, #0
 800d916:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d91a:	f7ff fe9f 	bl	800d65c <__multadd>
 800d91e:	4607      	mov	r7, r0
 800d920:	10ad      	asrs	r5, r5, #2
 800d922:	d03d      	beq.n	800d9a0 <__pow5mult+0xa0>
 800d924:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d926:	b97c      	cbnz	r4, 800d948 <__pow5mult+0x48>
 800d928:	2010      	movs	r0, #16
 800d92a:	f7fe f843 	bl	800b9b4 <malloc>
 800d92e:	4602      	mov	r2, r0
 800d930:	6270      	str	r0, [r6, #36]	; 0x24
 800d932:	b928      	cbnz	r0, 800d940 <__pow5mult+0x40>
 800d934:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d938:	4b1c      	ldr	r3, [pc, #112]	; (800d9ac <__pow5mult+0xac>)
 800d93a:	481d      	ldr	r0, [pc, #116]	; (800d9b0 <__pow5mult+0xb0>)
 800d93c:	f000 fd86 	bl	800e44c <__assert_func>
 800d940:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d944:	6004      	str	r4, [r0, #0]
 800d946:	60c4      	str	r4, [r0, #12]
 800d948:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d94c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d950:	b94c      	cbnz	r4, 800d966 <__pow5mult+0x66>
 800d952:	f240 2171 	movw	r1, #625	; 0x271
 800d956:	4630      	mov	r0, r6
 800d958:	f7ff ff18 	bl	800d78c <__i2b>
 800d95c:	2300      	movs	r3, #0
 800d95e:	4604      	mov	r4, r0
 800d960:	f8c8 0008 	str.w	r0, [r8, #8]
 800d964:	6003      	str	r3, [r0, #0]
 800d966:	f04f 0900 	mov.w	r9, #0
 800d96a:	07eb      	lsls	r3, r5, #31
 800d96c:	d50a      	bpl.n	800d984 <__pow5mult+0x84>
 800d96e:	4639      	mov	r1, r7
 800d970:	4622      	mov	r2, r4
 800d972:	4630      	mov	r0, r6
 800d974:	f7ff ff20 	bl	800d7b8 <__multiply>
 800d978:	4680      	mov	r8, r0
 800d97a:	4639      	mov	r1, r7
 800d97c:	4630      	mov	r0, r6
 800d97e:	f7ff fe4b 	bl	800d618 <_Bfree>
 800d982:	4647      	mov	r7, r8
 800d984:	106d      	asrs	r5, r5, #1
 800d986:	d00b      	beq.n	800d9a0 <__pow5mult+0xa0>
 800d988:	6820      	ldr	r0, [r4, #0]
 800d98a:	b938      	cbnz	r0, 800d99c <__pow5mult+0x9c>
 800d98c:	4622      	mov	r2, r4
 800d98e:	4621      	mov	r1, r4
 800d990:	4630      	mov	r0, r6
 800d992:	f7ff ff11 	bl	800d7b8 <__multiply>
 800d996:	6020      	str	r0, [r4, #0]
 800d998:	f8c0 9000 	str.w	r9, [r0]
 800d99c:	4604      	mov	r4, r0
 800d99e:	e7e4      	b.n	800d96a <__pow5mult+0x6a>
 800d9a0:	4638      	mov	r0, r7
 800d9a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d9a6:	bf00      	nop
 800d9a8:	0800fd38 	.word	0x0800fd38
 800d9ac:	0800fafe 	.word	0x0800fafe
 800d9b0:	0800fbe8 	.word	0x0800fbe8

0800d9b4 <__lshift>:
 800d9b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d9b8:	460c      	mov	r4, r1
 800d9ba:	4607      	mov	r7, r0
 800d9bc:	4691      	mov	r9, r2
 800d9be:	6923      	ldr	r3, [r4, #16]
 800d9c0:	6849      	ldr	r1, [r1, #4]
 800d9c2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d9c6:	68a3      	ldr	r3, [r4, #8]
 800d9c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d9cc:	f108 0601 	add.w	r6, r8, #1
 800d9d0:	42b3      	cmp	r3, r6
 800d9d2:	db0b      	blt.n	800d9ec <__lshift+0x38>
 800d9d4:	4638      	mov	r0, r7
 800d9d6:	f7ff fddf 	bl	800d598 <_Balloc>
 800d9da:	4605      	mov	r5, r0
 800d9dc:	b948      	cbnz	r0, 800d9f2 <__lshift+0x3e>
 800d9de:	4602      	mov	r2, r0
 800d9e0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d9e4:	4b27      	ldr	r3, [pc, #156]	; (800da84 <__lshift+0xd0>)
 800d9e6:	4828      	ldr	r0, [pc, #160]	; (800da88 <__lshift+0xd4>)
 800d9e8:	f000 fd30 	bl	800e44c <__assert_func>
 800d9ec:	3101      	adds	r1, #1
 800d9ee:	005b      	lsls	r3, r3, #1
 800d9f0:	e7ee      	b.n	800d9d0 <__lshift+0x1c>
 800d9f2:	2300      	movs	r3, #0
 800d9f4:	f100 0114 	add.w	r1, r0, #20
 800d9f8:	f100 0210 	add.w	r2, r0, #16
 800d9fc:	4618      	mov	r0, r3
 800d9fe:	4553      	cmp	r3, sl
 800da00:	db33      	blt.n	800da6a <__lshift+0xb6>
 800da02:	6920      	ldr	r0, [r4, #16]
 800da04:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800da08:	f104 0314 	add.w	r3, r4, #20
 800da0c:	f019 091f 	ands.w	r9, r9, #31
 800da10:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800da14:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800da18:	d02b      	beq.n	800da72 <__lshift+0xbe>
 800da1a:	468a      	mov	sl, r1
 800da1c:	2200      	movs	r2, #0
 800da1e:	f1c9 0e20 	rsb	lr, r9, #32
 800da22:	6818      	ldr	r0, [r3, #0]
 800da24:	fa00 f009 	lsl.w	r0, r0, r9
 800da28:	4302      	orrs	r2, r0
 800da2a:	f84a 2b04 	str.w	r2, [sl], #4
 800da2e:	f853 2b04 	ldr.w	r2, [r3], #4
 800da32:	459c      	cmp	ip, r3
 800da34:	fa22 f20e 	lsr.w	r2, r2, lr
 800da38:	d8f3      	bhi.n	800da22 <__lshift+0x6e>
 800da3a:	ebac 0304 	sub.w	r3, ip, r4
 800da3e:	3b15      	subs	r3, #21
 800da40:	f023 0303 	bic.w	r3, r3, #3
 800da44:	3304      	adds	r3, #4
 800da46:	f104 0015 	add.w	r0, r4, #21
 800da4a:	4584      	cmp	ip, r0
 800da4c:	bf38      	it	cc
 800da4e:	2304      	movcc	r3, #4
 800da50:	50ca      	str	r2, [r1, r3]
 800da52:	b10a      	cbz	r2, 800da58 <__lshift+0xa4>
 800da54:	f108 0602 	add.w	r6, r8, #2
 800da58:	3e01      	subs	r6, #1
 800da5a:	4638      	mov	r0, r7
 800da5c:	4621      	mov	r1, r4
 800da5e:	612e      	str	r6, [r5, #16]
 800da60:	f7ff fdda 	bl	800d618 <_Bfree>
 800da64:	4628      	mov	r0, r5
 800da66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da6a:	f842 0f04 	str.w	r0, [r2, #4]!
 800da6e:	3301      	adds	r3, #1
 800da70:	e7c5      	b.n	800d9fe <__lshift+0x4a>
 800da72:	3904      	subs	r1, #4
 800da74:	f853 2b04 	ldr.w	r2, [r3], #4
 800da78:	459c      	cmp	ip, r3
 800da7a:	f841 2f04 	str.w	r2, [r1, #4]!
 800da7e:	d8f9      	bhi.n	800da74 <__lshift+0xc0>
 800da80:	e7ea      	b.n	800da58 <__lshift+0xa4>
 800da82:	bf00      	nop
 800da84:	0800fb74 	.word	0x0800fb74
 800da88:	0800fbe8 	.word	0x0800fbe8

0800da8c <__mcmp>:
 800da8c:	4603      	mov	r3, r0
 800da8e:	690a      	ldr	r2, [r1, #16]
 800da90:	6900      	ldr	r0, [r0, #16]
 800da92:	b530      	push	{r4, r5, lr}
 800da94:	1a80      	subs	r0, r0, r2
 800da96:	d10d      	bne.n	800dab4 <__mcmp+0x28>
 800da98:	3314      	adds	r3, #20
 800da9a:	3114      	adds	r1, #20
 800da9c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800daa0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800daa4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800daa8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800daac:	4295      	cmp	r5, r2
 800daae:	d002      	beq.n	800dab6 <__mcmp+0x2a>
 800dab0:	d304      	bcc.n	800dabc <__mcmp+0x30>
 800dab2:	2001      	movs	r0, #1
 800dab4:	bd30      	pop	{r4, r5, pc}
 800dab6:	42a3      	cmp	r3, r4
 800dab8:	d3f4      	bcc.n	800daa4 <__mcmp+0x18>
 800daba:	e7fb      	b.n	800dab4 <__mcmp+0x28>
 800dabc:	f04f 30ff 	mov.w	r0, #4294967295
 800dac0:	e7f8      	b.n	800dab4 <__mcmp+0x28>
	...

0800dac4 <__mdiff>:
 800dac4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dac8:	460c      	mov	r4, r1
 800daca:	4606      	mov	r6, r0
 800dacc:	4611      	mov	r1, r2
 800dace:	4620      	mov	r0, r4
 800dad0:	4692      	mov	sl, r2
 800dad2:	f7ff ffdb 	bl	800da8c <__mcmp>
 800dad6:	1e05      	subs	r5, r0, #0
 800dad8:	d111      	bne.n	800dafe <__mdiff+0x3a>
 800dada:	4629      	mov	r1, r5
 800dadc:	4630      	mov	r0, r6
 800dade:	f7ff fd5b 	bl	800d598 <_Balloc>
 800dae2:	4602      	mov	r2, r0
 800dae4:	b928      	cbnz	r0, 800daf2 <__mdiff+0x2e>
 800dae6:	f240 2132 	movw	r1, #562	; 0x232
 800daea:	4b3c      	ldr	r3, [pc, #240]	; (800dbdc <__mdiff+0x118>)
 800daec:	483c      	ldr	r0, [pc, #240]	; (800dbe0 <__mdiff+0x11c>)
 800daee:	f000 fcad 	bl	800e44c <__assert_func>
 800daf2:	2301      	movs	r3, #1
 800daf4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800daf8:	4610      	mov	r0, r2
 800dafa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dafe:	bfa4      	itt	ge
 800db00:	4653      	movge	r3, sl
 800db02:	46a2      	movge	sl, r4
 800db04:	4630      	mov	r0, r6
 800db06:	f8da 1004 	ldr.w	r1, [sl, #4]
 800db0a:	bfa6      	itte	ge
 800db0c:	461c      	movge	r4, r3
 800db0e:	2500      	movge	r5, #0
 800db10:	2501      	movlt	r5, #1
 800db12:	f7ff fd41 	bl	800d598 <_Balloc>
 800db16:	4602      	mov	r2, r0
 800db18:	b918      	cbnz	r0, 800db22 <__mdiff+0x5e>
 800db1a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800db1e:	4b2f      	ldr	r3, [pc, #188]	; (800dbdc <__mdiff+0x118>)
 800db20:	e7e4      	b.n	800daec <__mdiff+0x28>
 800db22:	f100 0814 	add.w	r8, r0, #20
 800db26:	f8da 7010 	ldr.w	r7, [sl, #16]
 800db2a:	60c5      	str	r5, [r0, #12]
 800db2c:	f04f 0c00 	mov.w	ip, #0
 800db30:	f10a 0514 	add.w	r5, sl, #20
 800db34:	f10a 0010 	add.w	r0, sl, #16
 800db38:	46c2      	mov	sl, r8
 800db3a:	6926      	ldr	r6, [r4, #16]
 800db3c:	f104 0914 	add.w	r9, r4, #20
 800db40:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800db44:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800db48:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800db4c:	f859 3b04 	ldr.w	r3, [r9], #4
 800db50:	fa1f f18b 	uxth.w	r1, fp
 800db54:	4461      	add	r1, ip
 800db56:	fa1f fc83 	uxth.w	ip, r3
 800db5a:	0c1b      	lsrs	r3, r3, #16
 800db5c:	eba1 010c 	sub.w	r1, r1, ip
 800db60:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800db64:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800db68:	b289      	uxth	r1, r1
 800db6a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800db6e:	454e      	cmp	r6, r9
 800db70:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800db74:	f84a 3b04 	str.w	r3, [sl], #4
 800db78:	d8e6      	bhi.n	800db48 <__mdiff+0x84>
 800db7a:	1b33      	subs	r3, r6, r4
 800db7c:	3b15      	subs	r3, #21
 800db7e:	f023 0303 	bic.w	r3, r3, #3
 800db82:	3415      	adds	r4, #21
 800db84:	3304      	adds	r3, #4
 800db86:	42a6      	cmp	r6, r4
 800db88:	bf38      	it	cc
 800db8a:	2304      	movcc	r3, #4
 800db8c:	441d      	add	r5, r3
 800db8e:	4443      	add	r3, r8
 800db90:	461e      	mov	r6, r3
 800db92:	462c      	mov	r4, r5
 800db94:	4574      	cmp	r4, lr
 800db96:	d30e      	bcc.n	800dbb6 <__mdiff+0xf2>
 800db98:	f10e 0103 	add.w	r1, lr, #3
 800db9c:	1b49      	subs	r1, r1, r5
 800db9e:	f021 0103 	bic.w	r1, r1, #3
 800dba2:	3d03      	subs	r5, #3
 800dba4:	45ae      	cmp	lr, r5
 800dba6:	bf38      	it	cc
 800dba8:	2100      	movcc	r1, #0
 800dbaa:	4419      	add	r1, r3
 800dbac:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800dbb0:	b18b      	cbz	r3, 800dbd6 <__mdiff+0x112>
 800dbb2:	6117      	str	r7, [r2, #16]
 800dbb4:	e7a0      	b.n	800daf8 <__mdiff+0x34>
 800dbb6:	f854 8b04 	ldr.w	r8, [r4], #4
 800dbba:	fa1f f188 	uxth.w	r1, r8
 800dbbe:	4461      	add	r1, ip
 800dbc0:	1408      	asrs	r0, r1, #16
 800dbc2:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800dbc6:	b289      	uxth	r1, r1
 800dbc8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800dbcc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800dbd0:	f846 1b04 	str.w	r1, [r6], #4
 800dbd4:	e7de      	b.n	800db94 <__mdiff+0xd0>
 800dbd6:	3f01      	subs	r7, #1
 800dbd8:	e7e8      	b.n	800dbac <__mdiff+0xe8>
 800dbda:	bf00      	nop
 800dbdc:	0800fb74 	.word	0x0800fb74
 800dbe0:	0800fbe8 	.word	0x0800fbe8

0800dbe4 <__d2b>:
 800dbe4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800dbe8:	2101      	movs	r1, #1
 800dbea:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800dbee:	4690      	mov	r8, r2
 800dbf0:	461d      	mov	r5, r3
 800dbf2:	f7ff fcd1 	bl	800d598 <_Balloc>
 800dbf6:	4604      	mov	r4, r0
 800dbf8:	b930      	cbnz	r0, 800dc08 <__d2b+0x24>
 800dbfa:	4602      	mov	r2, r0
 800dbfc:	f240 310a 	movw	r1, #778	; 0x30a
 800dc00:	4b24      	ldr	r3, [pc, #144]	; (800dc94 <__d2b+0xb0>)
 800dc02:	4825      	ldr	r0, [pc, #148]	; (800dc98 <__d2b+0xb4>)
 800dc04:	f000 fc22 	bl	800e44c <__assert_func>
 800dc08:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800dc0c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800dc10:	bb2d      	cbnz	r5, 800dc5e <__d2b+0x7a>
 800dc12:	9301      	str	r3, [sp, #4]
 800dc14:	f1b8 0300 	subs.w	r3, r8, #0
 800dc18:	d026      	beq.n	800dc68 <__d2b+0x84>
 800dc1a:	4668      	mov	r0, sp
 800dc1c:	9300      	str	r3, [sp, #0]
 800dc1e:	f7ff fd87 	bl	800d730 <__lo0bits>
 800dc22:	9900      	ldr	r1, [sp, #0]
 800dc24:	b1f0      	cbz	r0, 800dc64 <__d2b+0x80>
 800dc26:	9a01      	ldr	r2, [sp, #4]
 800dc28:	f1c0 0320 	rsb	r3, r0, #32
 800dc2c:	fa02 f303 	lsl.w	r3, r2, r3
 800dc30:	430b      	orrs	r3, r1
 800dc32:	40c2      	lsrs	r2, r0
 800dc34:	6163      	str	r3, [r4, #20]
 800dc36:	9201      	str	r2, [sp, #4]
 800dc38:	9b01      	ldr	r3, [sp, #4]
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	bf14      	ite	ne
 800dc3e:	2102      	movne	r1, #2
 800dc40:	2101      	moveq	r1, #1
 800dc42:	61a3      	str	r3, [r4, #24]
 800dc44:	6121      	str	r1, [r4, #16]
 800dc46:	b1c5      	cbz	r5, 800dc7a <__d2b+0x96>
 800dc48:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800dc4c:	4405      	add	r5, r0
 800dc4e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800dc52:	603d      	str	r5, [r7, #0]
 800dc54:	6030      	str	r0, [r6, #0]
 800dc56:	4620      	mov	r0, r4
 800dc58:	b002      	add	sp, #8
 800dc5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dc62:	e7d6      	b.n	800dc12 <__d2b+0x2e>
 800dc64:	6161      	str	r1, [r4, #20]
 800dc66:	e7e7      	b.n	800dc38 <__d2b+0x54>
 800dc68:	a801      	add	r0, sp, #4
 800dc6a:	f7ff fd61 	bl	800d730 <__lo0bits>
 800dc6e:	2101      	movs	r1, #1
 800dc70:	9b01      	ldr	r3, [sp, #4]
 800dc72:	6121      	str	r1, [r4, #16]
 800dc74:	6163      	str	r3, [r4, #20]
 800dc76:	3020      	adds	r0, #32
 800dc78:	e7e5      	b.n	800dc46 <__d2b+0x62>
 800dc7a:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800dc7e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800dc82:	6038      	str	r0, [r7, #0]
 800dc84:	6918      	ldr	r0, [r3, #16]
 800dc86:	f7ff fd33 	bl	800d6f0 <__hi0bits>
 800dc8a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800dc8e:	6031      	str	r1, [r6, #0]
 800dc90:	e7e1      	b.n	800dc56 <__d2b+0x72>
 800dc92:	bf00      	nop
 800dc94:	0800fb74 	.word	0x0800fb74
 800dc98:	0800fbe8 	.word	0x0800fbe8

0800dc9c <_calloc_r>:
 800dc9c:	b538      	push	{r3, r4, r5, lr}
 800dc9e:	fb02 f501 	mul.w	r5, r2, r1
 800dca2:	4629      	mov	r1, r5
 800dca4:	f7fd feea 	bl	800ba7c <_malloc_r>
 800dca8:	4604      	mov	r4, r0
 800dcaa:	b118      	cbz	r0, 800dcb4 <_calloc_r+0x18>
 800dcac:	462a      	mov	r2, r5
 800dcae:	2100      	movs	r1, #0
 800dcb0:	f7fd fe90 	bl	800b9d4 <memset>
 800dcb4:	4620      	mov	r0, r4
 800dcb6:	bd38      	pop	{r3, r4, r5, pc}

0800dcb8 <__ssputs_r>:
 800dcb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dcbc:	688e      	ldr	r6, [r1, #8]
 800dcbe:	4682      	mov	sl, r0
 800dcc0:	429e      	cmp	r6, r3
 800dcc2:	460c      	mov	r4, r1
 800dcc4:	4690      	mov	r8, r2
 800dcc6:	461f      	mov	r7, r3
 800dcc8:	d838      	bhi.n	800dd3c <__ssputs_r+0x84>
 800dcca:	898a      	ldrh	r2, [r1, #12]
 800dccc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800dcd0:	d032      	beq.n	800dd38 <__ssputs_r+0x80>
 800dcd2:	6825      	ldr	r5, [r4, #0]
 800dcd4:	6909      	ldr	r1, [r1, #16]
 800dcd6:	3301      	adds	r3, #1
 800dcd8:	eba5 0901 	sub.w	r9, r5, r1
 800dcdc:	6965      	ldr	r5, [r4, #20]
 800dcde:	444b      	add	r3, r9
 800dce0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dce4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dce8:	106d      	asrs	r5, r5, #1
 800dcea:	429d      	cmp	r5, r3
 800dcec:	bf38      	it	cc
 800dcee:	461d      	movcc	r5, r3
 800dcf0:	0553      	lsls	r3, r2, #21
 800dcf2:	d531      	bpl.n	800dd58 <__ssputs_r+0xa0>
 800dcf4:	4629      	mov	r1, r5
 800dcf6:	f7fd fec1 	bl	800ba7c <_malloc_r>
 800dcfa:	4606      	mov	r6, r0
 800dcfc:	b950      	cbnz	r0, 800dd14 <__ssputs_r+0x5c>
 800dcfe:	230c      	movs	r3, #12
 800dd00:	f04f 30ff 	mov.w	r0, #4294967295
 800dd04:	f8ca 3000 	str.w	r3, [sl]
 800dd08:	89a3      	ldrh	r3, [r4, #12]
 800dd0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dd0e:	81a3      	strh	r3, [r4, #12]
 800dd10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd14:	464a      	mov	r2, r9
 800dd16:	6921      	ldr	r1, [r4, #16]
 800dd18:	f7ff fc23 	bl	800d562 <memcpy>
 800dd1c:	89a3      	ldrh	r3, [r4, #12]
 800dd1e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800dd22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dd26:	81a3      	strh	r3, [r4, #12]
 800dd28:	6126      	str	r6, [r4, #16]
 800dd2a:	444e      	add	r6, r9
 800dd2c:	6026      	str	r6, [r4, #0]
 800dd2e:	463e      	mov	r6, r7
 800dd30:	6165      	str	r5, [r4, #20]
 800dd32:	eba5 0509 	sub.w	r5, r5, r9
 800dd36:	60a5      	str	r5, [r4, #8]
 800dd38:	42be      	cmp	r6, r7
 800dd3a:	d900      	bls.n	800dd3e <__ssputs_r+0x86>
 800dd3c:	463e      	mov	r6, r7
 800dd3e:	4632      	mov	r2, r6
 800dd40:	4641      	mov	r1, r8
 800dd42:	6820      	ldr	r0, [r4, #0]
 800dd44:	f000 fd0c 	bl	800e760 <memmove>
 800dd48:	68a3      	ldr	r3, [r4, #8]
 800dd4a:	6822      	ldr	r2, [r4, #0]
 800dd4c:	1b9b      	subs	r3, r3, r6
 800dd4e:	4432      	add	r2, r6
 800dd50:	2000      	movs	r0, #0
 800dd52:	60a3      	str	r3, [r4, #8]
 800dd54:	6022      	str	r2, [r4, #0]
 800dd56:	e7db      	b.n	800dd10 <__ssputs_r+0x58>
 800dd58:	462a      	mov	r2, r5
 800dd5a:	f000 fd1b 	bl	800e794 <_realloc_r>
 800dd5e:	4606      	mov	r6, r0
 800dd60:	2800      	cmp	r0, #0
 800dd62:	d1e1      	bne.n	800dd28 <__ssputs_r+0x70>
 800dd64:	4650      	mov	r0, sl
 800dd66:	6921      	ldr	r1, [r4, #16]
 800dd68:	f7fd fe3c 	bl	800b9e4 <_free_r>
 800dd6c:	e7c7      	b.n	800dcfe <__ssputs_r+0x46>
	...

0800dd70 <_svfiprintf_r>:
 800dd70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd74:	4698      	mov	r8, r3
 800dd76:	898b      	ldrh	r3, [r1, #12]
 800dd78:	4607      	mov	r7, r0
 800dd7a:	061b      	lsls	r3, r3, #24
 800dd7c:	460d      	mov	r5, r1
 800dd7e:	4614      	mov	r4, r2
 800dd80:	b09d      	sub	sp, #116	; 0x74
 800dd82:	d50e      	bpl.n	800dda2 <_svfiprintf_r+0x32>
 800dd84:	690b      	ldr	r3, [r1, #16]
 800dd86:	b963      	cbnz	r3, 800dda2 <_svfiprintf_r+0x32>
 800dd88:	2140      	movs	r1, #64	; 0x40
 800dd8a:	f7fd fe77 	bl	800ba7c <_malloc_r>
 800dd8e:	6028      	str	r0, [r5, #0]
 800dd90:	6128      	str	r0, [r5, #16]
 800dd92:	b920      	cbnz	r0, 800dd9e <_svfiprintf_r+0x2e>
 800dd94:	230c      	movs	r3, #12
 800dd96:	603b      	str	r3, [r7, #0]
 800dd98:	f04f 30ff 	mov.w	r0, #4294967295
 800dd9c:	e0d1      	b.n	800df42 <_svfiprintf_r+0x1d2>
 800dd9e:	2340      	movs	r3, #64	; 0x40
 800dda0:	616b      	str	r3, [r5, #20]
 800dda2:	2300      	movs	r3, #0
 800dda4:	9309      	str	r3, [sp, #36]	; 0x24
 800dda6:	2320      	movs	r3, #32
 800dda8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ddac:	2330      	movs	r3, #48	; 0x30
 800ddae:	f04f 0901 	mov.w	r9, #1
 800ddb2:	f8cd 800c 	str.w	r8, [sp, #12]
 800ddb6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800df5c <_svfiprintf_r+0x1ec>
 800ddba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ddbe:	4623      	mov	r3, r4
 800ddc0:	469a      	mov	sl, r3
 800ddc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ddc6:	b10a      	cbz	r2, 800ddcc <_svfiprintf_r+0x5c>
 800ddc8:	2a25      	cmp	r2, #37	; 0x25
 800ddca:	d1f9      	bne.n	800ddc0 <_svfiprintf_r+0x50>
 800ddcc:	ebba 0b04 	subs.w	fp, sl, r4
 800ddd0:	d00b      	beq.n	800ddea <_svfiprintf_r+0x7a>
 800ddd2:	465b      	mov	r3, fp
 800ddd4:	4622      	mov	r2, r4
 800ddd6:	4629      	mov	r1, r5
 800ddd8:	4638      	mov	r0, r7
 800ddda:	f7ff ff6d 	bl	800dcb8 <__ssputs_r>
 800ddde:	3001      	adds	r0, #1
 800dde0:	f000 80aa 	beq.w	800df38 <_svfiprintf_r+0x1c8>
 800dde4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dde6:	445a      	add	r2, fp
 800dde8:	9209      	str	r2, [sp, #36]	; 0x24
 800ddea:	f89a 3000 	ldrb.w	r3, [sl]
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	f000 80a2 	beq.w	800df38 <_svfiprintf_r+0x1c8>
 800ddf4:	2300      	movs	r3, #0
 800ddf6:	f04f 32ff 	mov.w	r2, #4294967295
 800ddfa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ddfe:	f10a 0a01 	add.w	sl, sl, #1
 800de02:	9304      	str	r3, [sp, #16]
 800de04:	9307      	str	r3, [sp, #28]
 800de06:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800de0a:	931a      	str	r3, [sp, #104]	; 0x68
 800de0c:	4654      	mov	r4, sl
 800de0e:	2205      	movs	r2, #5
 800de10:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de14:	4851      	ldr	r0, [pc, #324]	; (800df5c <_svfiprintf_r+0x1ec>)
 800de16:	f7ff fb96 	bl	800d546 <memchr>
 800de1a:	9a04      	ldr	r2, [sp, #16]
 800de1c:	b9d8      	cbnz	r0, 800de56 <_svfiprintf_r+0xe6>
 800de1e:	06d0      	lsls	r0, r2, #27
 800de20:	bf44      	itt	mi
 800de22:	2320      	movmi	r3, #32
 800de24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800de28:	0711      	lsls	r1, r2, #28
 800de2a:	bf44      	itt	mi
 800de2c:	232b      	movmi	r3, #43	; 0x2b
 800de2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800de32:	f89a 3000 	ldrb.w	r3, [sl]
 800de36:	2b2a      	cmp	r3, #42	; 0x2a
 800de38:	d015      	beq.n	800de66 <_svfiprintf_r+0xf6>
 800de3a:	4654      	mov	r4, sl
 800de3c:	2000      	movs	r0, #0
 800de3e:	f04f 0c0a 	mov.w	ip, #10
 800de42:	9a07      	ldr	r2, [sp, #28]
 800de44:	4621      	mov	r1, r4
 800de46:	f811 3b01 	ldrb.w	r3, [r1], #1
 800de4a:	3b30      	subs	r3, #48	; 0x30
 800de4c:	2b09      	cmp	r3, #9
 800de4e:	d94e      	bls.n	800deee <_svfiprintf_r+0x17e>
 800de50:	b1b0      	cbz	r0, 800de80 <_svfiprintf_r+0x110>
 800de52:	9207      	str	r2, [sp, #28]
 800de54:	e014      	b.n	800de80 <_svfiprintf_r+0x110>
 800de56:	eba0 0308 	sub.w	r3, r0, r8
 800de5a:	fa09 f303 	lsl.w	r3, r9, r3
 800de5e:	4313      	orrs	r3, r2
 800de60:	46a2      	mov	sl, r4
 800de62:	9304      	str	r3, [sp, #16]
 800de64:	e7d2      	b.n	800de0c <_svfiprintf_r+0x9c>
 800de66:	9b03      	ldr	r3, [sp, #12]
 800de68:	1d19      	adds	r1, r3, #4
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	9103      	str	r1, [sp, #12]
 800de6e:	2b00      	cmp	r3, #0
 800de70:	bfbb      	ittet	lt
 800de72:	425b      	neglt	r3, r3
 800de74:	f042 0202 	orrlt.w	r2, r2, #2
 800de78:	9307      	strge	r3, [sp, #28]
 800de7a:	9307      	strlt	r3, [sp, #28]
 800de7c:	bfb8      	it	lt
 800de7e:	9204      	strlt	r2, [sp, #16]
 800de80:	7823      	ldrb	r3, [r4, #0]
 800de82:	2b2e      	cmp	r3, #46	; 0x2e
 800de84:	d10c      	bne.n	800dea0 <_svfiprintf_r+0x130>
 800de86:	7863      	ldrb	r3, [r4, #1]
 800de88:	2b2a      	cmp	r3, #42	; 0x2a
 800de8a:	d135      	bne.n	800def8 <_svfiprintf_r+0x188>
 800de8c:	9b03      	ldr	r3, [sp, #12]
 800de8e:	3402      	adds	r4, #2
 800de90:	1d1a      	adds	r2, r3, #4
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	9203      	str	r2, [sp, #12]
 800de96:	2b00      	cmp	r3, #0
 800de98:	bfb8      	it	lt
 800de9a:	f04f 33ff 	movlt.w	r3, #4294967295
 800de9e:	9305      	str	r3, [sp, #20]
 800dea0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800df6c <_svfiprintf_r+0x1fc>
 800dea4:	2203      	movs	r2, #3
 800dea6:	4650      	mov	r0, sl
 800dea8:	7821      	ldrb	r1, [r4, #0]
 800deaa:	f7ff fb4c 	bl	800d546 <memchr>
 800deae:	b140      	cbz	r0, 800dec2 <_svfiprintf_r+0x152>
 800deb0:	2340      	movs	r3, #64	; 0x40
 800deb2:	eba0 000a 	sub.w	r0, r0, sl
 800deb6:	fa03 f000 	lsl.w	r0, r3, r0
 800deba:	9b04      	ldr	r3, [sp, #16]
 800debc:	3401      	adds	r4, #1
 800debe:	4303      	orrs	r3, r0
 800dec0:	9304      	str	r3, [sp, #16]
 800dec2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dec6:	2206      	movs	r2, #6
 800dec8:	4825      	ldr	r0, [pc, #148]	; (800df60 <_svfiprintf_r+0x1f0>)
 800deca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dece:	f7ff fb3a 	bl	800d546 <memchr>
 800ded2:	2800      	cmp	r0, #0
 800ded4:	d038      	beq.n	800df48 <_svfiprintf_r+0x1d8>
 800ded6:	4b23      	ldr	r3, [pc, #140]	; (800df64 <_svfiprintf_r+0x1f4>)
 800ded8:	bb1b      	cbnz	r3, 800df22 <_svfiprintf_r+0x1b2>
 800deda:	9b03      	ldr	r3, [sp, #12]
 800dedc:	3307      	adds	r3, #7
 800dede:	f023 0307 	bic.w	r3, r3, #7
 800dee2:	3308      	adds	r3, #8
 800dee4:	9303      	str	r3, [sp, #12]
 800dee6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dee8:	4433      	add	r3, r6
 800deea:	9309      	str	r3, [sp, #36]	; 0x24
 800deec:	e767      	b.n	800ddbe <_svfiprintf_r+0x4e>
 800deee:	460c      	mov	r4, r1
 800def0:	2001      	movs	r0, #1
 800def2:	fb0c 3202 	mla	r2, ip, r2, r3
 800def6:	e7a5      	b.n	800de44 <_svfiprintf_r+0xd4>
 800def8:	2300      	movs	r3, #0
 800defa:	f04f 0c0a 	mov.w	ip, #10
 800defe:	4619      	mov	r1, r3
 800df00:	3401      	adds	r4, #1
 800df02:	9305      	str	r3, [sp, #20]
 800df04:	4620      	mov	r0, r4
 800df06:	f810 2b01 	ldrb.w	r2, [r0], #1
 800df0a:	3a30      	subs	r2, #48	; 0x30
 800df0c:	2a09      	cmp	r2, #9
 800df0e:	d903      	bls.n	800df18 <_svfiprintf_r+0x1a8>
 800df10:	2b00      	cmp	r3, #0
 800df12:	d0c5      	beq.n	800dea0 <_svfiprintf_r+0x130>
 800df14:	9105      	str	r1, [sp, #20]
 800df16:	e7c3      	b.n	800dea0 <_svfiprintf_r+0x130>
 800df18:	4604      	mov	r4, r0
 800df1a:	2301      	movs	r3, #1
 800df1c:	fb0c 2101 	mla	r1, ip, r1, r2
 800df20:	e7f0      	b.n	800df04 <_svfiprintf_r+0x194>
 800df22:	ab03      	add	r3, sp, #12
 800df24:	9300      	str	r3, [sp, #0]
 800df26:	462a      	mov	r2, r5
 800df28:	4638      	mov	r0, r7
 800df2a:	4b0f      	ldr	r3, [pc, #60]	; (800df68 <_svfiprintf_r+0x1f8>)
 800df2c:	a904      	add	r1, sp, #16
 800df2e:	f7fd fe9d 	bl	800bc6c <_printf_float>
 800df32:	1c42      	adds	r2, r0, #1
 800df34:	4606      	mov	r6, r0
 800df36:	d1d6      	bne.n	800dee6 <_svfiprintf_r+0x176>
 800df38:	89ab      	ldrh	r3, [r5, #12]
 800df3a:	065b      	lsls	r3, r3, #25
 800df3c:	f53f af2c 	bmi.w	800dd98 <_svfiprintf_r+0x28>
 800df40:	9809      	ldr	r0, [sp, #36]	; 0x24
 800df42:	b01d      	add	sp, #116	; 0x74
 800df44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df48:	ab03      	add	r3, sp, #12
 800df4a:	9300      	str	r3, [sp, #0]
 800df4c:	462a      	mov	r2, r5
 800df4e:	4638      	mov	r0, r7
 800df50:	4b05      	ldr	r3, [pc, #20]	; (800df68 <_svfiprintf_r+0x1f8>)
 800df52:	a904      	add	r1, sp, #16
 800df54:	f7fe f926 	bl	800c1a4 <_printf_i>
 800df58:	e7eb      	b.n	800df32 <_svfiprintf_r+0x1c2>
 800df5a:	bf00      	nop
 800df5c:	0800fd44 	.word	0x0800fd44
 800df60:	0800fd4e 	.word	0x0800fd4e
 800df64:	0800bc6d 	.word	0x0800bc6d
 800df68:	0800dcb9 	.word	0x0800dcb9
 800df6c:	0800fd4a 	.word	0x0800fd4a

0800df70 <__sfputc_r>:
 800df70:	6893      	ldr	r3, [r2, #8]
 800df72:	b410      	push	{r4}
 800df74:	3b01      	subs	r3, #1
 800df76:	2b00      	cmp	r3, #0
 800df78:	6093      	str	r3, [r2, #8]
 800df7a:	da07      	bge.n	800df8c <__sfputc_r+0x1c>
 800df7c:	6994      	ldr	r4, [r2, #24]
 800df7e:	42a3      	cmp	r3, r4
 800df80:	db01      	blt.n	800df86 <__sfputc_r+0x16>
 800df82:	290a      	cmp	r1, #10
 800df84:	d102      	bne.n	800df8c <__sfputc_r+0x1c>
 800df86:	bc10      	pop	{r4}
 800df88:	f000 b98e 	b.w	800e2a8 <__swbuf_r>
 800df8c:	6813      	ldr	r3, [r2, #0]
 800df8e:	1c58      	adds	r0, r3, #1
 800df90:	6010      	str	r0, [r2, #0]
 800df92:	7019      	strb	r1, [r3, #0]
 800df94:	4608      	mov	r0, r1
 800df96:	bc10      	pop	{r4}
 800df98:	4770      	bx	lr

0800df9a <__sfputs_r>:
 800df9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df9c:	4606      	mov	r6, r0
 800df9e:	460f      	mov	r7, r1
 800dfa0:	4614      	mov	r4, r2
 800dfa2:	18d5      	adds	r5, r2, r3
 800dfa4:	42ac      	cmp	r4, r5
 800dfa6:	d101      	bne.n	800dfac <__sfputs_r+0x12>
 800dfa8:	2000      	movs	r0, #0
 800dfaa:	e007      	b.n	800dfbc <__sfputs_r+0x22>
 800dfac:	463a      	mov	r2, r7
 800dfae:	4630      	mov	r0, r6
 800dfb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dfb4:	f7ff ffdc 	bl	800df70 <__sfputc_r>
 800dfb8:	1c43      	adds	r3, r0, #1
 800dfba:	d1f3      	bne.n	800dfa4 <__sfputs_r+0xa>
 800dfbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dfc0 <_vfiprintf_r>:
 800dfc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfc4:	460d      	mov	r5, r1
 800dfc6:	4614      	mov	r4, r2
 800dfc8:	4698      	mov	r8, r3
 800dfca:	4606      	mov	r6, r0
 800dfcc:	b09d      	sub	sp, #116	; 0x74
 800dfce:	b118      	cbz	r0, 800dfd8 <_vfiprintf_r+0x18>
 800dfd0:	6983      	ldr	r3, [r0, #24]
 800dfd2:	b90b      	cbnz	r3, 800dfd8 <_vfiprintf_r+0x18>
 800dfd4:	f7ff fa12 	bl	800d3fc <__sinit>
 800dfd8:	4b89      	ldr	r3, [pc, #548]	; (800e200 <_vfiprintf_r+0x240>)
 800dfda:	429d      	cmp	r5, r3
 800dfdc:	d11b      	bne.n	800e016 <_vfiprintf_r+0x56>
 800dfde:	6875      	ldr	r5, [r6, #4]
 800dfe0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dfe2:	07d9      	lsls	r1, r3, #31
 800dfe4:	d405      	bmi.n	800dff2 <_vfiprintf_r+0x32>
 800dfe6:	89ab      	ldrh	r3, [r5, #12]
 800dfe8:	059a      	lsls	r2, r3, #22
 800dfea:	d402      	bmi.n	800dff2 <_vfiprintf_r+0x32>
 800dfec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dfee:	f7ff faa8 	bl	800d542 <__retarget_lock_acquire_recursive>
 800dff2:	89ab      	ldrh	r3, [r5, #12]
 800dff4:	071b      	lsls	r3, r3, #28
 800dff6:	d501      	bpl.n	800dffc <_vfiprintf_r+0x3c>
 800dff8:	692b      	ldr	r3, [r5, #16]
 800dffa:	b9eb      	cbnz	r3, 800e038 <_vfiprintf_r+0x78>
 800dffc:	4629      	mov	r1, r5
 800dffe:	4630      	mov	r0, r6
 800e000:	f000 f9b6 	bl	800e370 <__swsetup_r>
 800e004:	b1c0      	cbz	r0, 800e038 <_vfiprintf_r+0x78>
 800e006:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e008:	07dc      	lsls	r4, r3, #31
 800e00a:	d50e      	bpl.n	800e02a <_vfiprintf_r+0x6a>
 800e00c:	f04f 30ff 	mov.w	r0, #4294967295
 800e010:	b01d      	add	sp, #116	; 0x74
 800e012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e016:	4b7b      	ldr	r3, [pc, #492]	; (800e204 <_vfiprintf_r+0x244>)
 800e018:	429d      	cmp	r5, r3
 800e01a:	d101      	bne.n	800e020 <_vfiprintf_r+0x60>
 800e01c:	68b5      	ldr	r5, [r6, #8]
 800e01e:	e7df      	b.n	800dfe0 <_vfiprintf_r+0x20>
 800e020:	4b79      	ldr	r3, [pc, #484]	; (800e208 <_vfiprintf_r+0x248>)
 800e022:	429d      	cmp	r5, r3
 800e024:	bf08      	it	eq
 800e026:	68f5      	ldreq	r5, [r6, #12]
 800e028:	e7da      	b.n	800dfe0 <_vfiprintf_r+0x20>
 800e02a:	89ab      	ldrh	r3, [r5, #12]
 800e02c:	0598      	lsls	r0, r3, #22
 800e02e:	d4ed      	bmi.n	800e00c <_vfiprintf_r+0x4c>
 800e030:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e032:	f7ff fa87 	bl	800d544 <__retarget_lock_release_recursive>
 800e036:	e7e9      	b.n	800e00c <_vfiprintf_r+0x4c>
 800e038:	2300      	movs	r3, #0
 800e03a:	9309      	str	r3, [sp, #36]	; 0x24
 800e03c:	2320      	movs	r3, #32
 800e03e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e042:	2330      	movs	r3, #48	; 0x30
 800e044:	f04f 0901 	mov.w	r9, #1
 800e048:	f8cd 800c 	str.w	r8, [sp, #12]
 800e04c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800e20c <_vfiprintf_r+0x24c>
 800e050:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e054:	4623      	mov	r3, r4
 800e056:	469a      	mov	sl, r3
 800e058:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e05c:	b10a      	cbz	r2, 800e062 <_vfiprintf_r+0xa2>
 800e05e:	2a25      	cmp	r2, #37	; 0x25
 800e060:	d1f9      	bne.n	800e056 <_vfiprintf_r+0x96>
 800e062:	ebba 0b04 	subs.w	fp, sl, r4
 800e066:	d00b      	beq.n	800e080 <_vfiprintf_r+0xc0>
 800e068:	465b      	mov	r3, fp
 800e06a:	4622      	mov	r2, r4
 800e06c:	4629      	mov	r1, r5
 800e06e:	4630      	mov	r0, r6
 800e070:	f7ff ff93 	bl	800df9a <__sfputs_r>
 800e074:	3001      	adds	r0, #1
 800e076:	f000 80aa 	beq.w	800e1ce <_vfiprintf_r+0x20e>
 800e07a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e07c:	445a      	add	r2, fp
 800e07e:	9209      	str	r2, [sp, #36]	; 0x24
 800e080:	f89a 3000 	ldrb.w	r3, [sl]
 800e084:	2b00      	cmp	r3, #0
 800e086:	f000 80a2 	beq.w	800e1ce <_vfiprintf_r+0x20e>
 800e08a:	2300      	movs	r3, #0
 800e08c:	f04f 32ff 	mov.w	r2, #4294967295
 800e090:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e094:	f10a 0a01 	add.w	sl, sl, #1
 800e098:	9304      	str	r3, [sp, #16]
 800e09a:	9307      	str	r3, [sp, #28]
 800e09c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e0a0:	931a      	str	r3, [sp, #104]	; 0x68
 800e0a2:	4654      	mov	r4, sl
 800e0a4:	2205      	movs	r2, #5
 800e0a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e0aa:	4858      	ldr	r0, [pc, #352]	; (800e20c <_vfiprintf_r+0x24c>)
 800e0ac:	f7ff fa4b 	bl	800d546 <memchr>
 800e0b0:	9a04      	ldr	r2, [sp, #16]
 800e0b2:	b9d8      	cbnz	r0, 800e0ec <_vfiprintf_r+0x12c>
 800e0b4:	06d1      	lsls	r1, r2, #27
 800e0b6:	bf44      	itt	mi
 800e0b8:	2320      	movmi	r3, #32
 800e0ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e0be:	0713      	lsls	r3, r2, #28
 800e0c0:	bf44      	itt	mi
 800e0c2:	232b      	movmi	r3, #43	; 0x2b
 800e0c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e0c8:	f89a 3000 	ldrb.w	r3, [sl]
 800e0cc:	2b2a      	cmp	r3, #42	; 0x2a
 800e0ce:	d015      	beq.n	800e0fc <_vfiprintf_r+0x13c>
 800e0d0:	4654      	mov	r4, sl
 800e0d2:	2000      	movs	r0, #0
 800e0d4:	f04f 0c0a 	mov.w	ip, #10
 800e0d8:	9a07      	ldr	r2, [sp, #28]
 800e0da:	4621      	mov	r1, r4
 800e0dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e0e0:	3b30      	subs	r3, #48	; 0x30
 800e0e2:	2b09      	cmp	r3, #9
 800e0e4:	d94e      	bls.n	800e184 <_vfiprintf_r+0x1c4>
 800e0e6:	b1b0      	cbz	r0, 800e116 <_vfiprintf_r+0x156>
 800e0e8:	9207      	str	r2, [sp, #28]
 800e0ea:	e014      	b.n	800e116 <_vfiprintf_r+0x156>
 800e0ec:	eba0 0308 	sub.w	r3, r0, r8
 800e0f0:	fa09 f303 	lsl.w	r3, r9, r3
 800e0f4:	4313      	orrs	r3, r2
 800e0f6:	46a2      	mov	sl, r4
 800e0f8:	9304      	str	r3, [sp, #16]
 800e0fa:	e7d2      	b.n	800e0a2 <_vfiprintf_r+0xe2>
 800e0fc:	9b03      	ldr	r3, [sp, #12]
 800e0fe:	1d19      	adds	r1, r3, #4
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	9103      	str	r1, [sp, #12]
 800e104:	2b00      	cmp	r3, #0
 800e106:	bfbb      	ittet	lt
 800e108:	425b      	neglt	r3, r3
 800e10a:	f042 0202 	orrlt.w	r2, r2, #2
 800e10e:	9307      	strge	r3, [sp, #28]
 800e110:	9307      	strlt	r3, [sp, #28]
 800e112:	bfb8      	it	lt
 800e114:	9204      	strlt	r2, [sp, #16]
 800e116:	7823      	ldrb	r3, [r4, #0]
 800e118:	2b2e      	cmp	r3, #46	; 0x2e
 800e11a:	d10c      	bne.n	800e136 <_vfiprintf_r+0x176>
 800e11c:	7863      	ldrb	r3, [r4, #1]
 800e11e:	2b2a      	cmp	r3, #42	; 0x2a
 800e120:	d135      	bne.n	800e18e <_vfiprintf_r+0x1ce>
 800e122:	9b03      	ldr	r3, [sp, #12]
 800e124:	3402      	adds	r4, #2
 800e126:	1d1a      	adds	r2, r3, #4
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	9203      	str	r2, [sp, #12]
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	bfb8      	it	lt
 800e130:	f04f 33ff 	movlt.w	r3, #4294967295
 800e134:	9305      	str	r3, [sp, #20]
 800e136:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e21c <_vfiprintf_r+0x25c>
 800e13a:	2203      	movs	r2, #3
 800e13c:	4650      	mov	r0, sl
 800e13e:	7821      	ldrb	r1, [r4, #0]
 800e140:	f7ff fa01 	bl	800d546 <memchr>
 800e144:	b140      	cbz	r0, 800e158 <_vfiprintf_r+0x198>
 800e146:	2340      	movs	r3, #64	; 0x40
 800e148:	eba0 000a 	sub.w	r0, r0, sl
 800e14c:	fa03 f000 	lsl.w	r0, r3, r0
 800e150:	9b04      	ldr	r3, [sp, #16]
 800e152:	3401      	adds	r4, #1
 800e154:	4303      	orrs	r3, r0
 800e156:	9304      	str	r3, [sp, #16]
 800e158:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e15c:	2206      	movs	r2, #6
 800e15e:	482c      	ldr	r0, [pc, #176]	; (800e210 <_vfiprintf_r+0x250>)
 800e160:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e164:	f7ff f9ef 	bl	800d546 <memchr>
 800e168:	2800      	cmp	r0, #0
 800e16a:	d03f      	beq.n	800e1ec <_vfiprintf_r+0x22c>
 800e16c:	4b29      	ldr	r3, [pc, #164]	; (800e214 <_vfiprintf_r+0x254>)
 800e16e:	bb1b      	cbnz	r3, 800e1b8 <_vfiprintf_r+0x1f8>
 800e170:	9b03      	ldr	r3, [sp, #12]
 800e172:	3307      	adds	r3, #7
 800e174:	f023 0307 	bic.w	r3, r3, #7
 800e178:	3308      	adds	r3, #8
 800e17a:	9303      	str	r3, [sp, #12]
 800e17c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e17e:	443b      	add	r3, r7
 800e180:	9309      	str	r3, [sp, #36]	; 0x24
 800e182:	e767      	b.n	800e054 <_vfiprintf_r+0x94>
 800e184:	460c      	mov	r4, r1
 800e186:	2001      	movs	r0, #1
 800e188:	fb0c 3202 	mla	r2, ip, r2, r3
 800e18c:	e7a5      	b.n	800e0da <_vfiprintf_r+0x11a>
 800e18e:	2300      	movs	r3, #0
 800e190:	f04f 0c0a 	mov.w	ip, #10
 800e194:	4619      	mov	r1, r3
 800e196:	3401      	adds	r4, #1
 800e198:	9305      	str	r3, [sp, #20]
 800e19a:	4620      	mov	r0, r4
 800e19c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e1a0:	3a30      	subs	r2, #48	; 0x30
 800e1a2:	2a09      	cmp	r2, #9
 800e1a4:	d903      	bls.n	800e1ae <_vfiprintf_r+0x1ee>
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d0c5      	beq.n	800e136 <_vfiprintf_r+0x176>
 800e1aa:	9105      	str	r1, [sp, #20]
 800e1ac:	e7c3      	b.n	800e136 <_vfiprintf_r+0x176>
 800e1ae:	4604      	mov	r4, r0
 800e1b0:	2301      	movs	r3, #1
 800e1b2:	fb0c 2101 	mla	r1, ip, r1, r2
 800e1b6:	e7f0      	b.n	800e19a <_vfiprintf_r+0x1da>
 800e1b8:	ab03      	add	r3, sp, #12
 800e1ba:	9300      	str	r3, [sp, #0]
 800e1bc:	462a      	mov	r2, r5
 800e1be:	4630      	mov	r0, r6
 800e1c0:	4b15      	ldr	r3, [pc, #84]	; (800e218 <_vfiprintf_r+0x258>)
 800e1c2:	a904      	add	r1, sp, #16
 800e1c4:	f7fd fd52 	bl	800bc6c <_printf_float>
 800e1c8:	4607      	mov	r7, r0
 800e1ca:	1c78      	adds	r0, r7, #1
 800e1cc:	d1d6      	bne.n	800e17c <_vfiprintf_r+0x1bc>
 800e1ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e1d0:	07d9      	lsls	r1, r3, #31
 800e1d2:	d405      	bmi.n	800e1e0 <_vfiprintf_r+0x220>
 800e1d4:	89ab      	ldrh	r3, [r5, #12]
 800e1d6:	059a      	lsls	r2, r3, #22
 800e1d8:	d402      	bmi.n	800e1e0 <_vfiprintf_r+0x220>
 800e1da:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e1dc:	f7ff f9b2 	bl	800d544 <__retarget_lock_release_recursive>
 800e1e0:	89ab      	ldrh	r3, [r5, #12]
 800e1e2:	065b      	lsls	r3, r3, #25
 800e1e4:	f53f af12 	bmi.w	800e00c <_vfiprintf_r+0x4c>
 800e1e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e1ea:	e711      	b.n	800e010 <_vfiprintf_r+0x50>
 800e1ec:	ab03      	add	r3, sp, #12
 800e1ee:	9300      	str	r3, [sp, #0]
 800e1f0:	462a      	mov	r2, r5
 800e1f2:	4630      	mov	r0, r6
 800e1f4:	4b08      	ldr	r3, [pc, #32]	; (800e218 <_vfiprintf_r+0x258>)
 800e1f6:	a904      	add	r1, sp, #16
 800e1f8:	f7fd ffd4 	bl	800c1a4 <_printf_i>
 800e1fc:	e7e4      	b.n	800e1c8 <_vfiprintf_r+0x208>
 800e1fe:	bf00      	nop
 800e200:	0800fba8 	.word	0x0800fba8
 800e204:	0800fbc8 	.word	0x0800fbc8
 800e208:	0800fb88 	.word	0x0800fb88
 800e20c:	0800fd44 	.word	0x0800fd44
 800e210:	0800fd4e 	.word	0x0800fd4e
 800e214:	0800bc6d 	.word	0x0800bc6d
 800e218:	0800df9b 	.word	0x0800df9b
 800e21c:	0800fd4a 	.word	0x0800fd4a

0800e220 <__sread>:
 800e220:	b510      	push	{r4, lr}
 800e222:	460c      	mov	r4, r1
 800e224:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e228:	f000 fada 	bl	800e7e0 <_read_r>
 800e22c:	2800      	cmp	r0, #0
 800e22e:	bfab      	itete	ge
 800e230:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e232:	89a3      	ldrhlt	r3, [r4, #12]
 800e234:	181b      	addge	r3, r3, r0
 800e236:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e23a:	bfac      	ite	ge
 800e23c:	6563      	strge	r3, [r4, #84]	; 0x54
 800e23e:	81a3      	strhlt	r3, [r4, #12]
 800e240:	bd10      	pop	{r4, pc}

0800e242 <__swrite>:
 800e242:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e246:	461f      	mov	r7, r3
 800e248:	898b      	ldrh	r3, [r1, #12]
 800e24a:	4605      	mov	r5, r0
 800e24c:	05db      	lsls	r3, r3, #23
 800e24e:	460c      	mov	r4, r1
 800e250:	4616      	mov	r6, r2
 800e252:	d505      	bpl.n	800e260 <__swrite+0x1e>
 800e254:	2302      	movs	r3, #2
 800e256:	2200      	movs	r2, #0
 800e258:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e25c:	f000 f9f8 	bl	800e650 <_lseek_r>
 800e260:	89a3      	ldrh	r3, [r4, #12]
 800e262:	4632      	mov	r2, r6
 800e264:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e268:	81a3      	strh	r3, [r4, #12]
 800e26a:	4628      	mov	r0, r5
 800e26c:	463b      	mov	r3, r7
 800e26e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e272:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e276:	f000 b869 	b.w	800e34c <_write_r>

0800e27a <__sseek>:
 800e27a:	b510      	push	{r4, lr}
 800e27c:	460c      	mov	r4, r1
 800e27e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e282:	f000 f9e5 	bl	800e650 <_lseek_r>
 800e286:	1c43      	adds	r3, r0, #1
 800e288:	89a3      	ldrh	r3, [r4, #12]
 800e28a:	bf15      	itete	ne
 800e28c:	6560      	strne	r0, [r4, #84]	; 0x54
 800e28e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e292:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e296:	81a3      	strheq	r3, [r4, #12]
 800e298:	bf18      	it	ne
 800e29a:	81a3      	strhne	r3, [r4, #12]
 800e29c:	bd10      	pop	{r4, pc}

0800e29e <__sclose>:
 800e29e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e2a2:	f000 b8f1 	b.w	800e488 <_close_r>
	...

0800e2a8 <__swbuf_r>:
 800e2a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2aa:	460e      	mov	r6, r1
 800e2ac:	4614      	mov	r4, r2
 800e2ae:	4605      	mov	r5, r0
 800e2b0:	b118      	cbz	r0, 800e2ba <__swbuf_r+0x12>
 800e2b2:	6983      	ldr	r3, [r0, #24]
 800e2b4:	b90b      	cbnz	r3, 800e2ba <__swbuf_r+0x12>
 800e2b6:	f7ff f8a1 	bl	800d3fc <__sinit>
 800e2ba:	4b21      	ldr	r3, [pc, #132]	; (800e340 <__swbuf_r+0x98>)
 800e2bc:	429c      	cmp	r4, r3
 800e2be:	d12b      	bne.n	800e318 <__swbuf_r+0x70>
 800e2c0:	686c      	ldr	r4, [r5, #4]
 800e2c2:	69a3      	ldr	r3, [r4, #24]
 800e2c4:	60a3      	str	r3, [r4, #8]
 800e2c6:	89a3      	ldrh	r3, [r4, #12]
 800e2c8:	071a      	lsls	r2, r3, #28
 800e2ca:	d52f      	bpl.n	800e32c <__swbuf_r+0x84>
 800e2cc:	6923      	ldr	r3, [r4, #16]
 800e2ce:	b36b      	cbz	r3, 800e32c <__swbuf_r+0x84>
 800e2d0:	6923      	ldr	r3, [r4, #16]
 800e2d2:	6820      	ldr	r0, [r4, #0]
 800e2d4:	b2f6      	uxtb	r6, r6
 800e2d6:	1ac0      	subs	r0, r0, r3
 800e2d8:	6963      	ldr	r3, [r4, #20]
 800e2da:	4637      	mov	r7, r6
 800e2dc:	4283      	cmp	r3, r0
 800e2de:	dc04      	bgt.n	800e2ea <__swbuf_r+0x42>
 800e2e0:	4621      	mov	r1, r4
 800e2e2:	4628      	mov	r0, r5
 800e2e4:	f000 f966 	bl	800e5b4 <_fflush_r>
 800e2e8:	bb30      	cbnz	r0, 800e338 <__swbuf_r+0x90>
 800e2ea:	68a3      	ldr	r3, [r4, #8]
 800e2ec:	3001      	adds	r0, #1
 800e2ee:	3b01      	subs	r3, #1
 800e2f0:	60a3      	str	r3, [r4, #8]
 800e2f2:	6823      	ldr	r3, [r4, #0]
 800e2f4:	1c5a      	adds	r2, r3, #1
 800e2f6:	6022      	str	r2, [r4, #0]
 800e2f8:	701e      	strb	r6, [r3, #0]
 800e2fa:	6963      	ldr	r3, [r4, #20]
 800e2fc:	4283      	cmp	r3, r0
 800e2fe:	d004      	beq.n	800e30a <__swbuf_r+0x62>
 800e300:	89a3      	ldrh	r3, [r4, #12]
 800e302:	07db      	lsls	r3, r3, #31
 800e304:	d506      	bpl.n	800e314 <__swbuf_r+0x6c>
 800e306:	2e0a      	cmp	r6, #10
 800e308:	d104      	bne.n	800e314 <__swbuf_r+0x6c>
 800e30a:	4621      	mov	r1, r4
 800e30c:	4628      	mov	r0, r5
 800e30e:	f000 f951 	bl	800e5b4 <_fflush_r>
 800e312:	b988      	cbnz	r0, 800e338 <__swbuf_r+0x90>
 800e314:	4638      	mov	r0, r7
 800e316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e318:	4b0a      	ldr	r3, [pc, #40]	; (800e344 <__swbuf_r+0x9c>)
 800e31a:	429c      	cmp	r4, r3
 800e31c:	d101      	bne.n	800e322 <__swbuf_r+0x7a>
 800e31e:	68ac      	ldr	r4, [r5, #8]
 800e320:	e7cf      	b.n	800e2c2 <__swbuf_r+0x1a>
 800e322:	4b09      	ldr	r3, [pc, #36]	; (800e348 <__swbuf_r+0xa0>)
 800e324:	429c      	cmp	r4, r3
 800e326:	bf08      	it	eq
 800e328:	68ec      	ldreq	r4, [r5, #12]
 800e32a:	e7ca      	b.n	800e2c2 <__swbuf_r+0x1a>
 800e32c:	4621      	mov	r1, r4
 800e32e:	4628      	mov	r0, r5
 800e330:	f000 f81e 	bl	800e370 <__swsetup_r>
 800e334:	2800      	cmp	r0, #0
 800e336:	d0cb      	beq.n	800e2d0 <__swbuf_r+0x28>
 800e338:	f04f 37ff 	mov.w	r7, #4294967295
 800e33c:	e7ea      	b.n	800e314 <__swbuf_r+0x6c>
 800e33e:	bf00      	nop
 800e340:	0800fba8 	.word	0x0800fba8
 800e344:	0800fbc8 	.word	0x0800fbc8
 800e348:	0800fb88 	.word	0x0800fb88

0800e34c <_write_r>:
 800e34c:	b538      	push	{r3, r4, r5, lr}
 800e34e:	4604      	mov	r4, r0
 800e350:	4608      	mov	r0, r1
 800e352:	4611      	mov	r1, r2
 800e354:	2200      	movs	r2, #0
 800e356:	4d05      	ldr	r5, [pc, #20]	; (800e36c <_write_r+0x20>)
 800e358:	602a      	str	r2, [r5, #0]
 800e35a:	461a      	mov	r2, r3
 800e35c:	f7f4 fa6c 	bl	8002838 <_write>
 800e360:	1c43      	adds	r3, r0, #1
 800e362:	d102      	bne.n	800e36a <_write_r+0x1e>
 800e364:	682b      	ldr	r3, [r5, #0]
 800e366:	b103      	cbz	r3, 800e36a <_write_r+0x1e>
 800e368:	6023      	str	r3, [r4, #0]
 800e36a:	bd38      	pop	{r3, r4, r5, pc}
 800e36c:	20000bb8 	.word	0x20000bb8

0800e370 <__swsetup_r>:
 800e370:	4b32      	ldr	r3, [pc, #200]	; (800e43c <__swsetup_r+0xcc>)
 800e372:	b570      	push	{r4, r5, r6, lr}
 800e374:	681d      	ldr	r5, [r3, #0]
 800e376:	4606      	mov	r6, r0
 800e378:	460c      	mov	r4, r1
 800e37a:	b125      	cbz	r5, 800e386 <__swsetup_r+0x16>
 800e37c:	69ab      	ldr	r3, [r5, #24]
 800e37e:	b913      	cbnz	r3, 800e386 <__swsetup_r+0x16>
 800e380:	4628      	mov	r0, r5
 800e382:	f7ff f83b 	bl	800d3fc <__sinit>
 800e386:	4b2e      	ldr	r3, [pc, #184]	; (800e440 <__swsetup_r+0xd0>)
 800e388:	429c      	cmp	r4, r3
 800e38a:	d10f      	bne.n	800e3ac <__swsetup_r+0x3c>
 800e38c:	686c      	ldr	r4, [r5, #4]
 800e38e:	89a3      	ldrh	r3, [r4, #12]
 800e390:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e394:	0719      	lsls	r1, r3, #28
 800e396:	d42c      	bmi.n	800e3f2 <__swsetup_r+0x82>
 800e398:	06dd      	lsls	r5, r3, #27
 800e39a:	d411      	bmi.n	800e3c0 <__swsetup_r+0x50>
 800e39c:	2309      	movs	r3, #9
 800e39e:	6033      	str	r3, [r6, #0]
 800e3a0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e3a4:	f04f 30ff 	mov.w	r0, #4294967295
 800e3a8:	81a3      	strh	r3, [r4, #12]
 800e3aa:	e03e      	b.n	800e42a <__swsetup_r+0xba>
 800e3ac:	4b25      	ldr	r3, [pc, #148]	; (800e444 <__swsetup_r+0xd4>)
 800e3ae:	429c      	cmp	r4, r3
 800e3b0:	d101      	bne.n	800e3b6 <__swsetup_r+0x46>
 800e3b2:	68ac      	ldr	r4, [r5, #8]
 800e3b4:	e7eb      	b.n	800e38e <__swsetup_r+0x1e>
 800e3b6:	4b24      	ldr	r3, [pc, #144]	; (800e448 <__swsetup_r+0xd8>)
 800e3b8:	429c      	cmp	r4, r3
 800e3ba:	bf08      	it	eq
 800e3bc:	68ec      	ldreq	r4, [r5, #12]
 800e3be:	e7e6      	b.n	800e38e <__swsetup_r+0x1e>
 800e3c0:	0758      	lsls	r0, r3, #29
 800e3c2:	d512      	bpl.n	800e3ea <__swsetup_r+0x7a>
 800e3c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e3c6:	b141      	cbz	r1, 800e3da <__swsetup_r+0x6a>
 800e3c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e3cc:	4299      	cmp	r1, r3
 800e3ce:	d002      	beq.n	800e3d6 <__swsetup_r+0x66>
 800e3d0:	4630      	mov	r0, r6
 800e3d2:	f7fd fb07 	bl	800b9e4 <_free_r>
 800e3d6:	2300      	movs	r3, #0
 800e3d8:	6363      	str	r3, [r4, #52]	; 0x34
 800e3da:	89a3      	ldrh	r3, [r4, #12]
 800e3dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e3e0:	81a3      	strh	r3, [r4, #12]
 800e3e2:	2300      	movs	r3, #0
 800e3e4:	6063      	str	r3, [r4, #4]
 800e3e6:	6923      	ldr	r3, [r4, #16]
 800e3e8:	6023      	str	r3, [r4, #0]
 800e3ea:	89a3      	ldrh	r3, [r4, #12]
 800e3ec:	f043 0308 	orr.w	r3, r3, #8
 800e3f0:	81a3      	strh	r3, [r4, #12]
 800e3f2:	6923      	ldr	r3, [r4, #16]
 800e3f4:	b94b      	cbnz	r3, 800e40a <__swsetup_r+0x9a>
 800e3f6:	89a3      	ldrh	r3, [r4, #12]
 800e3f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e3fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e400:	d003      	beq.n	800e40a <__swsetup_r+0x9a>
 800e402:	4621      	mov	r1, r4
 800e404:	4630      	mov	r0, r6
 800e406:	f000 f959 	bl	800e6bc <__smakebuf_r>
 800e40a:	89a0      	ldrh	r0, [r4, #12]
 800e40c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e410:	f010 0301 	ands.w	r3, r0, #1
 800e414:	d00a      	beq.n	800e42c <__swsetup_r+0xbc>
 800e416:	2300      	movs	r3, #0
 800e418:	60a3      	str	r3, [r4, #8]
 800e41a:	6963      	ldr	r3, [r4, #20]
 800e41c:	425b      	negs	r3, r3
 800e41e:	61a3      	str	r3, [r4, #24]
 800e420:	6923      	ldr	r3, [r4, #16]
 800e422:	b943      	cbnz	r3, 800e436 <__swsetup_r+0xc6>
 800e424:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e428:	d1ba      	bne.n	800e3a0 <__swsetup_r+0x30>
 800e42a:	bd70      	pop	{r4, r5, r6, pc}
 800e42c:	0781      	lsls	r1, r0, #30
 800e42e:	bf58      	it	pl
 800e430:	6963      	ldrpl	r3, [r4, #20]
 800e432:	60a3      	str	r3, [r4, #8]
 800e434:	e7f4      	b.n	800e420 <__swsetup_r+0xb0>
 800e436:	2000      	movs	r0, #0
 800e438:	e7f7      	b.n	800e42a <__swsetup_r+0xba>
 800e43a:	bf00      	nop
 800e43c:	2000001c 	.word	0x2000001c
 800e440:	0800fba8 	.word	0x0800fba8
 800e444:	0800fbc8 	.word	0x0800fbc8
 800e448:	0800fb88 	.word	0x0800fb88

0800e44c <__assert_func>:
 800e44c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e44e:	4614      	mov	r4, r2
 800e450:	461a      	mov	r2, r3
 800e452:	4b09      	ldr	r3, [pc, #36]	; (800e478 <__assert_func+0x2c>)
 800e454:	4605      	mov	r5, r0
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	68d8      	ldr	r0, [r3, #12]
 800e45a:	b14c      	cbz	r4, 800e470 <__assert_func+0x24>
 800e45c:	4b07      	ldr	r3, [pc, #28]	; (800e47c <__assert_func+0x30>)
 800e45e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e462:	9100      	str	r1, [sp, #0]
 800e464:	462b      	mov	r3, r5
 800e466:	4906      	ldr	r1, [pc, #24]	; (800e480 <__assert_func+0x34>)
 800e468:	f000 f8e0 	bl	800e62c <fiprintf>
 800e46c:	f000 f9d7 	bl	800e81e <abort>
 800e470:	4b04      	ldr	r3, [pc, #16]	; (800e484 <__assert_func+0x38>)
 800e472:	461c      	mov	r4, r3
 800e474:	e7f3      	b.n	800e45e <__assert_func+0x12>
 800e476:	bf00      	nop
 800e478:	2000001c 	.word	0x2000001c
 800e47c:	0800fd55 	.word	0x0800fd55
 800e480:	0800fd62 	.word	0x0800fd62
 800e484:	0800fd90 	.word	0x0800fd90

0800e488 <_close_r>:
 800e488:	b538      	push	{r3, r4, r5, lr}
 800e48a:	2300      	movs	r3, #0
 800e48c:	4d05      	ldr	r5, [pc, #20]	; (800e4a4 <_close_r+0x1c>)
 800e48e:	4604      	mov	r4, r0
 800e490:	4608      	mov	r0, r1
 800e492:	602b      	str	r3, [r5, #0]
 800e494:	f7f4 f9fa 	bl	800288c <_close>
 800e498:	1c43      	adds	r3, r0, #1
 800e49a:	d102      	bne.n	800e4a2 <_close_r+0x1a>
 800e49c:	682b      	ldr	r3, [r5, #0]
 800e49e:	b103      	cbz	r3, 800e4a2 <_close_r+0x1a>
 800e4a0:	6023      	str	r3, [r4, #0]
 800e4a2:	bd38      	pop	{r3, r4, r5, pc}
 800e4a4:	20000bb8 	.word	0x20000bb8

0800e4a8 <__sflush_r>:
 800e4a8:	898a      	ldrh	r2, [r1, #12]
 800e4aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4ae:	4605      	mov	r5, r0
 800e4b0:	0710      	lsls	r0, r2, #28
 800e4b2:	460c      	mov	r4, r1
 800e4b4:	d458      	bmi.n	800e568 <__sflush_r+0xc0>
 800e4b6:	684b      	ldr	r3, [r1, #4]
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	dc05      	bgt.n	800e4c8 <__sflush_r+0x20>
 800e4bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	dc02      	bgt.n	800e4c8 <__sflush_r+0x20>
 800e4c2:	2000      	movs	r0, #0
 800e4c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e4c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e4ca:	2e00      	cmp	r6, #0
 800e4cc:	d0f9      	beq.n	800e4c2 <__sflush_r+0x1a>
 800e4ce:	2300      	movs	r3, #0
 800e4d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e4d4:	682f      	ldr	r7, [r5, #0]
 800e4d6:	602b      	str	r3, [r5, #0]
 800e4d8:	d032      	beq.n	800e540 <__sflush_r+0x98>
 800e4da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e4dc:	89a3      	ldrh	r3, [r4, #12]
 800e4de:	075a      	lsls	r2, r3, #29
 800e4e0:	d505      	bpl.n	800e4ee <__sflush_r+0x46>
 800e4e2:	6863      	ldr	r3, [r4, #4]
 800e4e4:	1ac0      	subs	r0, r0, r3
 800e4e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e4e8:	b10b      	cbz	r3, 800e4ee <__sflush_r+0x46>
 800e4ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e4ec:	1ac0      	subs	r0, r0, r3
 800e4ee:	2300      	movs	r3, #0
 800e4f0:	4602      	mov	r2, r0
 800e4f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e4f4:	4628      	mov	r0, r5
 800e4f6:	6a21      	ldr	r1, [r4, #32]
 800e4f8:	47b0      	blx	r6
 800e4fa:	1c43      	adds	r3, r0, #1
 800e4fc:	89a3      	ldrh	r3, [r4, #12]
 800e4fe:	d106      	bne.n	800e50e <__sflush_r+0x66>
 800e500:	6829      	ldr	r1, [r5, #0]
 800e502:	291d      	cmp	r1, #29
 800e504:	d82c      	bhi.n	800e560 <__sflush_r+0xb8>
 800e506:	4a2a      	ldr	r2, [pc, #168]	; (800e5b0 <__sflush_r+0x108>)
 800e508:	40ca      	lsrs	r2, r1
 800e50a:	07d6      	lsls	r6, r2, #31
 800e50c:	d528      	bpl.n	800e560 <__sflush_r+0xb8>
 800e50e:	2200      	movs	r2, #0
 800e510:	6062      	str	r2, [r4, #4]
 800e512:	6922      	ldr	r2, [r4, #16]
 800e514:	04d9      	lsls	r1, r3, #19
 800e516:	6022      	str	r2, [r4, #0]
 800e518:	d504      	bpl.n	800e524 <__sflush_r+0x7c>
 800e51a:	1c42      	adds	r2, r0, #1
 800e51c:	d101      	bne.n	800e522 <__sflush_r+0x7a>
 800e51e:	682b      	ldr	r3, [r5, #0]
 800e520:	b903      	cbnz	r3, 800e524 <__sflush_r+0x7c>
 800e522:	6560      	str	r0, [r4, #84]	; 0x54
 800e524:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e526:	602f      	str	r7, [r5, #0]
 800e528:	2900      	cmp	r1, #0
 800e52a:	d0ca      	beq.n	800e4c2 <__sflush_r+0x1a>
 800e52c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e530:	4299      	cmp	r1, r3
 800e532:	d002      	beq.n	800e53a <__sflush_r+0x92>
 800e534:	4628      	mov	r0, r5
 800e536:	f7fd fa55 	bl	800b9e4 <_free_r>
 800e53a:	2000      	movs	r0, #0
 800e53c:	6360      	str	r0, [r4, #52]	; 0x34
 800e53e:	e7c1      	b.n	800e4c4 <__sflush_r+0x1c>
 800e540:	6a21      	ldr	r1, [r4, #32]
 800e542:	2301      	movs	r3, #1
 800e544:	4628      	mov	r0, r5
 800e546:	47b0      	blx	r6
 800e548:	1c41      	adds	r1, r0, #1
 800e54a:	d1c7      	bne.n	800e4dc <__sflush_r+0x34>
 800e54c:	682b      	ldr	r3, [r5, #0]
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d0c4      	beq.n	800e4dc <__sflush_r+0x34>
 800e552:	2b1d      	cmp	r3, #29
 800e554:	d001      	beq.n	800e55a <__sflush_r+0xb2>
 800e556:	2b16      	cmp	r3, #22
 800e558:	d101      	bne.n	800e55e <__sflush_r+0xb6>
 800e55a:	602f      	str	r7, [r5, #0]
 800e55c:	e7b1      	b.n	800e4c2 <__sflush_r+0x1a>
 800e55e:	89a3      	ldrh	r3, [r4, #12]
 800e560:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e564:	81a3      	strh	r3, [r4, #12]
 800e566:	e7ad      	b.n	800e4c4 <__sflush_r+0x1c>
 800e568:	690f      	ldr	r7, [r1, #16]
 800e56a:	2f00      	cmp	r7, #0
 800e56c:	d0a9      	beq.n	800e4c2 <__sflush_r+0x1a>
 800e56e:	0793      	lsls	r3, r2, #30
 800e570:	bf18      	it	ne
 800e572:	2300      	movne	r3, #0
 800e574:	680e      	ldr	r6, [r1, #0]
 800e576:	bf08      	it	eq
 800e578:	694b      	ldreq	r3, [r1, #20]
 800e57a:	eba6 0807 	sub.w	r8, r6, r7
 800e57e:	600f      	str	r7, [r1, #0]
 800e580:	608b      	str	r3, [r1, #8]
 800e582:	f1b8 0f00 	cmp.w	r8, #0
 800e586:	dd9c      	ble.n	800e4c2 <__sflush_r+0x1a>
 800e588:	4643      	mov	r3, r8
 800e58a:	463a      	mov	r2, r7
 800e58c:	4628      	mov	r0, r5
 800e58e:	6a21      	ldr	r1, [r4, #32]
 800e590:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e592:	47b0      	blx	r6
 800e594:	2800      	cmp	r0, #0
 800e596:	dc06      	bgt.n	800e5a6 <__sflush_r+0xfe>
 800e598:	89a3      	ldrh	r3, [r4, #12]
 800e59a:	f04f 30ff 	mov.w	r0, #4294967295
 800e59e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e5a2:	81a3      	strh	r3, [r4, #12]
 800e5a4:	e78e      	b.n	800e4c4 <__sflush_r+0x1c>
 800e5a6:	4407      	add	r7, r0
 800e5a8:	eba8 0800 	sub.w	r8, r8, r0
 800e5ac:	e7e9      	b.n	800e582 <__sflush_r+0xda>
 800e5ae:	bf00      	nop
 800e5b0:	20400001 	.word	0x20400001

0800e5b4 <_fflush_r>:
 800e5b4:	b538      	push	{r3, r4, r5, lr}
 800e5b6:	690b      	ldr	r3, [r1, #16]
 800e5b8:	4605      	mov	r5, r0
 800e5ba:	460c      	mov	r4, r1
 800e5bc:	b913      	cbnz	r3, 800e5c4 <_fflush_r+0x10>
 800e5be:	2500      	movs	r5, #0
 800e5c0:	4628      	mov	r0, r5
 800e5c2:	bd38      	pop	{r3, r4, r5, pc}
 800e5c4:	b118      	cbz	r0, 800e5ce <_fflush_r+0x1a>
 800e5c6:	6983      	ldr	r3, [r0, #24]
 800e5c8:	b90b      	cbnz	r3, 800e5ce <_fflush_r+0x1a>
 800e5ca:	f7fe ff17 	bl	800d3fc <__sinit>
 800e5ce:	4b14      	ldr	r3, [pc, #80]	; (800e620 <_fflush_r+0x6c>)
 800e5d0:	429c      	cmp	r4, r3
 800e5d2:	d11b      	bne.n	800e60c <_fflush_r+0x58>
 800e5d4:	686c      	ldr	r4, [r5, #4]
 800e5d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d0ef      	beq.n	800e5be <_fflush_r+0xa>
 800e5de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e5e0:	07d0      	lsls	r0, r2, #31
 800e5e2:	d404      	bmi.n	800e5ee <_fflush_r+0x3a>
 800e5e4:	0599      	lsls	r1, r3, #22
 800e5e6:	d402      	bmi.n	800e5ee <_fflush_r+0x3a>
 800e5e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e5ea:	f7fe ffaa 	bl	800d542 <__retarget_lock_acquire_recursive>
 800e5ee:	4628      	mov	r0, r5
 800e5f0:	4621      	mov	r1, r4
 800e5f2:	f7ff ff59 	bl	800e4a8 <__sflush_r>
 800e5f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e5f8:	4605      	mov	r5, r0
 800e5fa:	07da      	lsls	r2, r3, #31
 800e5fc:	d4e0      	bmi.n	800e5c0 <_fflush_r+0xc>
 800e5fe:	89a3      	ldrh	r3, [r4, #12]
 800e600:	059b      	lsls	r3, r3, #22
 800e602:	d4dd      	bmi.n	800e5c0 <_fflush_r+0xc>
 800e604:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e606:	f7fe ff9d 	bl	800d544 <__retarget_lock_release_recursive>
 800e60a:	e7d9      	b.n	800e5c0 <_fflush_r+0xc>
 800e60c:	4b05      	ldr	r3, [pc, #20]	; (800e624 <_fflush_r+0x70>)
 800e60e:	429c      	cmp	r4, r3
 800e610:	d101      	bne.n	800e616 <_fflush_r+0x62>
 800e612:	68ac      	ldr	r4, [r5, #8]
 800e614:	e7df      	b.n	800e5d6 <_fflush_r+0x22>
 800e616:	4b04      	ldr	r3, [pc, #16]	; (800e628 <_fflush_r+0x74>)
 800e618:	429c      	cmp	r4, r3
 800e61a:	bf08      	it	eq
 800e61c:	68ec      	ldreq	r4, [r5, #12]
 800e61e:	e7da      	b.n	800e5d6 <_fflush_r+0x22>
 800e620:	0800fba8 	.word	0x0800fba8
 800e624:	0800fbc8 	.word	0x0800fbc8
 800e628:	0800fb88 	.word	0x0800fb88

0800e62c <fiprintf>:
 800e62c:	b40e      	push	{r1, r2, r3}
 800e62e:	b503      	push	{r0, r1, lr}
 800e630:	4601      	mov	r1, r0
 800e632:	ab03      	add	r3, sp, #12
 800e634:	4805      	ldr	r0, [pc, #20]	; (800e64c <fiprintf+0x20>)
 800e636:	f853 2b04 	ldr.w	r2, [r3], #4
 800e63a:	6800      	ldr	r0, [r0, #0]
 800e63c:	9301      	str	r3, [sp, #4]
 800e63e:	f7ff fcbf 	bl	800dfc0 <_vfiprintf_r>
 800e642:	b002      	add	sp, #8
 800e644:	f85d eb04 	ldr.w	lr, [sp], #4
 800e648:	b003      	add	sp, #12
 800e64a:	4770      	bx	lr
 800e64c:	2000001c 	.word	0x2000001c

0800e650 <_lseek_r>:
 800e650:	b538      	push	{r3, r4, r5, lr}
 800e652:	4604      	mov	r4, r0
 800e654:	4608      	mov	r0, r1
 800e656:	4611      	mov	r1, r2
 800e658:	2200      	movs	r2, #0
 800e65a:	4d05      	ldr	r5, [pc, #20]	; (800e670 <_lseek_r+0x20>)
 800e65c:	602a      	str	r2, [r5, #0]
 800e65e:	461a      	mov	r2, r3
 800e660:	f7f4 f938 	bl	80028d4 <_lseek>
 800e664:	1c43      	adds	r3, r0, #1
 800e666:	d102      	bne.n	800e66e <_lseek_r+0x1e>
 800e668:	682b      	ldr	r3, [r5, #0]
 800e66a:	b103      	cbz	r3, 800e66e <_lseek_r+0x1e>
 800e66c:	6023      	str	r3, [r4, #0]
 800e66e:	bd38      	pop	{r3, r4, r5, pc}
 800e670:	20000bb8 	.word	0x20000bb8

0800e674 <__swhatbuf_r>:
 800e674:	b570      	push	{r4, r5, r6, lr}
 800e676:	460e      	mov	r6, r1
 800e678:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e67c:	4614      	mov	r4, r2
 800e67e:	2900      	cmp	r1, #0
 800e680:	461d      	mov	r5, r3
 800e682:	b096      	sub	sp, #88	; 0x58
 800e684:	da07      	bge.n	800e696 <__swhatbuf_r+0x22>
 800e686:	2300      	movs	r3, #0
 800e688:	602b      	str	r3, [r5, #0]
 800e68a:	89b3      	ldrh	r3, [r6, #12]
 800e68c:	061a      	lsls	r2, r3, #24
 800e68e:	d410      	bmi.n	800e6b2 <__swhatbuf_r+0x3e>
 800e690:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e694:	e00e      	b.n	800e6b4 <__swhatbuf_r+0x40>
 800e696:	466a      	mov	r2, sp
 800e698:	f000 f8c8 	bl	800e82c <_fstat_r>
 800e69c:	2800      	cmp	r0, #0
 800e69e:	dbf2      	blt.n	800e686 <__swhatbuf_r+0x12>
 800e6a0:	9a01      	ldr	r2, [sp, #4]
 800e6a2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e6a6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e6aa:	425a      	negs	r2, r3
 800e6ac:	415a      	adcs	r2, r3
 800e6ae:	602a      	str	r2, [r5, #0]
 800e6b0:	e7ee      	b.n	800e690 <__swhatbuf_r+0x1c>
 800e6b2:	2340      	movs	r3, #64	; 0x40
 800e6b4:	2000      	movs	r0, #0
 800e6b6:	6023      	str	r3, [r4, #0]
 800e6b8:	b016      	add	sp, #88	; 0x58
 800e6ba:	bd70      	pop	{r4, r5, r6, pc}

0800e6bc <__smakebuf_r>:
 800e6bc:	898b      	ldrh	r3, [r1, #12]
 800e6be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e6c0:	079d      	lsls	r5, r3, #30
 800e6c2:	4606      	mov	r6, r0
 800e6c4:	460c      	mov	r4, r1
 800e6c6:	d507      	bpl.n	800e6d8 <__smakebuf_r+0x1c>
 800e6c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e6cc:	6023      	str	r3, [r4, #0]
 800e6ce:	6123      	str	r3, [r4, #16]
 800e6d0:	2301      	movs	r3, #1
 800e6d2:	6163      	str	r3, [r4, #20]
 800e6d4:	b002      	add	sp, #8
 800e6d6:	bd70      	pop	{r4, r5, r6, pc}
 800e6d8:	466a      	mov	r2, sp
 800e6da:	ab01      	add	r3, sp, #4
 800e6dc:	f7ff ffca 	bl	800e674 <__swhatbuf_r>
 800e6e0:	9900      	ldr	r1, [sp, #0]
 800e6e2:	4605      	mov	r5, r0
 800e6e4:	4630      	mov	r0, r6
 800e6e6:	f7fd f9c9 	bl	800ba7c <_malloc_r>
 800e6ea:	b948      	cbnz	r0, 800e700 <__smakebuf_r+0x44>
 800e6ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e6f0:	059a      	lsls	r2, r3, #22
 800e6f2:	d4ef      	bmi.n	800e6d4 <__smakebuf_r+0x18>
 800e6f4:	f023 0303 	bic.w	r3, r3, #3
 800e6f8:	f043 0302 	orr.w	r3, r3, #2
 800e6fc:	81a3      	strh	r3, [r4, #12]
 800e6fe:	e7e3      	b.n	800e6c8 <__smakebuf_r+0xc>
 800e700:	4b0d      	ldr	r3, [pc, #52]	; (800e738 <__smakebuf_r+0x7c>)
 800e702:	62b3      	str	r3, [r6, #40]	; 0x28
 800e704:	89a3      	ldrh	r3, [r4, #12]
 800e706:	6020      	str	r0, [r4, #0]
 800e708:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e70c:	81a3      	strh	r3, [r4, #12]
 800e70e:	9b00      	ldr	r3, [sp, #0]
 800e710:	6120      	str	r0, [r4, #16]
 800e712:	6163      	str	r3, [r4, #20]
 800e714:	9b01      	ldr	r3, [sp, #4]
 800e716:	b15b      	cbz	r3, 800e730 <__smakebuf_r+0x74>
 800e718:	4630      	mov	r0, r6
 800e71a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e71e:	f000 f897 	bl	800e850 <_isatty_r>
 800e722:	b128      	cbz	r0, 800e730 <__smakebuf_r+0x74>
 800e724:	89a3      	ldrh	r3, [r4, #12]
 800e726:	f023 0303 	bic.w	r3, r3, #3
 800e72a:	f043 0301 	orr.w	r3, r3, #1
 800e72e:	81a3      	strh	r3, [r4, #12]
 800e730:	89a0      	ldrh	r0, [r4, #12]
 800e732:	4305      	orrs	r5, r0
 800e734:	81a5      	strh	r5, [r4, #12]
 800e736:	e7cd      	b.n	800e6d4 <__smakebuf_r+0x18>
 800e738:	0800d395 	.word	0x0800d395

0800e73c <__ascii_mbtowc>:
 800e73c:	b082      	sub	sp, #8
 800e73e:	b901      	cbnz	r1, 800e742 <__ascii_mbtowc+0x6>
 800e740:	a901      	add	r1, sp, #4
 800e742:	b142      	cbz	r2, 800e756 <__ascii_mbtowc+0x1a>
 800e744:	b14b      	cbz	r3, 800e75a <__ascii_mbtowc+0x1e>
 800e746:	7813      	ldrb	r3, [r2, #0]
 800e748:	600b      	str	r3, [r1, #0]
 800e74a:	7812      	ldrb	r2, [r2, #0]
 800e74c:	1e10      	subs	r0, r2, #0
 800e74e:	bf18      	it	ne
 800e750:	2001      	movne	r0, #1
 800e752:	b002      	add	sp, #8
 800e754:	4770      	bx	lr
 800e756:	4610      	mov	r0, r2
 800e758:	e7fb      	b.n	800e752 <__ascii_mbtowc+0x16>
 800e75a:	f06f 0001 	mvn.w	r0, #1
 800e75e:	e7f8      	b.n	800e752 <__ascii_mbtowc+0x16>

0800e760 <memmove>:
 800e760:	4288      	cmp	r0, r1
 800e762:	b510      	push	{r4, lr}
 800e764:	eb01 0402 	add.w	r4, r1, r2
 800e768:	d902      	bls.n	800e770 <memmove+0x10>
 800e76a:	4284      	cmp	r4, r0
 800e76c:	4623      	mov	r3, r4
 800e76e:	d807      	bhi.n	800e780 <memmove+0x20>
 800e770:	1e43      	subs	r3, r0, #1
 800e772:	42a1      	cmp	r1, r4
 800e774:	d008      	beq.n	800e788 <memmove+0x28>
 800e776:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e77a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e77e:	e7f8      	b.n	800e772 <memmove+0x12>
 800e780:	4601      	mov	r1, r0
 800e782:	4402      	add	r2, r0
 800e784:	428a      	cmp	r2, r1
 800e786:	d100      	bne.n	800e78a <memmove+0x2a>
 800e788:	bd10      	pop	{r4, pc}
 800e78a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e78e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e792:	e7f7      	b.n	800e784 <memmove+0x24>

0800e794 <_realloc_r>:
 800e794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e796:	4607      	mov	r7, r0
 800e798:	4614      	mov	r4, r2
 800e79a:	460e      	mov	r6, r1
 800e79c:	b921      	cbnz	r1, 800e7a8 <_realloc_r+0x14>
 800e79e:	4611      	mov	r1, r2
 800e7a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e7a4:	f7fd b96a 	b.w	800ba7c <_malloc_r>
 800e7a8:	b922      	cbnz	r2, 800e7b4 <_realloc_r+0x20>
 800e7aa:	f7fd f91b 	bl	800b9e4 <_free_r>
 800e7ae:	4625      	mov	r5, r4
 800e7b0:	4628      	mov	r0, r5
 800e7b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e7b4:	f000 f85c 	bl	800e870 <_malloc_usable_size_r>
 800e7b8:	42a0      	cmp	r0, r4
 800e7ba:	d20f      	bcs.n	800e7dc <_realloc_r+0x48>
 800e7bc:	4621      	mov	r1, r4
 800e7be:	4638      	mov	r0, r7
 800e7c0:	f7fd f95c 	bl	800ba7c <_malloc_r>
 800e7c4:	4605      	mov	r5, r0
 800e7c6:	2800      	cmp	r0, #0
 800e7c8:	d0f2      	beq.n	800e7b0 <_realloc_r+0x1c>
 800e7ca:	4631      	mov	r1, r6
 800e7cc:	4622      	mov	r2, r4
 800e7ce:	f7fe fec8 	bl	800d562 <memcpy>
 800e7d2:	4631      	mov	r1, r6
 800e7d4:	4638      	mov	r0, r7
 800e7d6:	f7fd f905 	bl	800b9e4 <_free_r>
 800e7da:	e7e9      	b.n	800e7b0 <_realloc_r+0x1c>
 800e7dc:	4635      	mov	r5, r6
 800e7de:	e7e7      	b.n	800e7b0 <_realloc_r+0x1c>

0800e7e0 <_read_r>:
 800e7e0:	b538      	push	{r3, r4, r5, lr}
 800e7e2:	4604      	mov	r4, r0
 800e7e4:	4608      	mov	r0, r1
 800e7e6:	4611      	mov	r1, r2
 800e7e8:	2200      	movs	r2, #0
 800e7ea:	4d05      	ldr	r5, [pc, #20]	; (800e800 <_read_r+0x20>)
 800e7ec:	602a      	str	r2, [r5, #0]
 800e7ee:	461a      	mov	r2, r3
 800e7f0:	f7f4 f805 	bl	80027fe <_read>
 800e7f4:	1c43      	adds	r3, r0, #1
 800e7f6:	d102      	bne.n	800e7fe <_read_r+0x1e>
 800e7f8:	682b      	ldr	r3, [r5, #0]
 800e7fa:	b103      	cbz	r3, 800e7fe <_read_r+0x1e>
 800e7fc:	6023      	str	r3, [r4, #0]
 800e7fe:	bd38      	pop	{r3, r4, r5, pc}
 800e800:	20000bb8 	.word	0x20000bb8

0800e804 <__ascii_wctomb>:
 800e804:	4603      	mov	r3, r0
 800e806:	4608      	mov	r0, r1
 800e808:	b141      	cbz	r1, 800e81c <__ascii_wctomb+0x18>
 800e80a:	2aff      	cmp	r2, #255	; 0xff
 800e80c:	d904      	bls.n	800e818 <__ascii_wctomb+0x14>
 800e80e:	228a      	movs	r2, #138	; 0x8a
 800e810:	f04f 30ff 	mov.w	r0, #4294967295
 800e814:	601a      	str	r2, [r3, #0]
 800e816:	4770      	bx	lr
 800e818:	2001      	movs	r0, #1
 800e81a:	700a      	strb	r2, [r1, #0]
 800e81c:	4770      	bx	lr

0800e81e <abort>:
 800e81e:	2006      	movs	r0, #6
 800e820:	b508      	push	{r3, lr}
 800e822:	f000 f855 	bl	800e8d0 <raise>
 800e826:	2001      	movs	r0, #1
 800e828:	f7f3 ffdf 	bl	80027ea <_exit>

0800e82c <_fstat_r>:
 800e82c:	b538      	push	{r3, r4, r5, lr}
 800e82e:	2300      	movs	r3, #0
 800e830:	4d06      	ldr	r5, [pc, #24]	; (800e84c <_fstat_r+0x20>)
 800e832:	4604      	mov	r4, r0
 800e834:	4608      	mov	r0, r1
 800e836:	4611      	mov	r1, r2
 800e838:	602b      	str	r3, [r5, #0]
 800e83a:	f7f4 f832 	bl	80028a2 <_fstat>
 800e83e:	1c43      	adds	r3, r0, #1
 800e840:	d102      	bne.n	800e848 <_fstat_r+0x1c>
 800e842:	682b      	ldr	r3, [r5, #0]
 800e844:	b103      	cbz	r3, 800e848 <_fstat_r+0x1c>
 800e846:	6023      	str	r3, [r4, #0]
 800e848:	bd38      	pop	{r3, r4, r5, pc}
 800e84a:	bf00      	nop
 800e84c:	20000bb8 	.word	0x20000bb8

0800e850 <_isatty_r>:
 800e850:	b538      	push	{r3, r4, r5, lr}
 800e852:	2300      	movs	r3, #0
 800e854:	4d05      	ldr	r5, [pc, #20]	; (800e86c <_isatty_r+0x1c>)
 800e856:	4604      	mov	r4, r0
 800e858:	4608      	mov	r0, r1
 800e85a:	602b      	str	r3, [r5, #0]
 800e85c:	f7f4 f830 	bl	80028c0 <_isatty>
 800e860:	1c43      	adds	r3, r0, #1
 800e862:	d102      	bne.n	800e86a <_isatty_r+0x1a>
 800e864:	682b      	ldr	r3, [r5, #0]
 800e866:	b103      	cbz	r3, 800e86a <_isatty_r+0x1a>
 800e868:	6023      	str	r3, [r4, #0]
 800e86a:	bd38      	pop	{r3, r4, r5, pc}
 800e86c:	20000bb8 	.word	0x20000bb8

0800e870 <_malloc_usable_size_r>:
 800e870:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e874:	1f18      	subs	r0, r3, #4
 800e876:	2b00      	cmp	r3, #0
 800e878:	bfbc      	itt	lt
 800e87a:	580b      	ldrlt	r3, [r1, r0]
 800e87c:	18c0      	addlt	r0, r0, r3
 800e87e:	4770      	bx	lr

0800e880 <_raise_r>:
 800e880:	291f      	cmp	r1, #31
 800e882:	b538      	push	{r3, r4, r5, lr}
 800e884:	4604      	mov	r4, r0
 800e886:	460d      	mov	r5, r1
 800e888:	d904      	bls.n	800e894 <_raise_r+0x14>
 800e88a:	2316      	movs	r3, #22
 800e88c:	6003      	str	r3, [r0, #0]
 800e88e:	f04f 30ff 	mov.w	r0, #4294967295
 800e892:	bd38      	pop	{r3, r4, r5, pc}
 800e894:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e896:	b112      	cbz	r2, 800e89e <_raise_r+0x1e>
 800e898:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e89c:	b94b      	cbnz	r3, 800e8b2 <_raise_r+0x32>
 800e89e:	4620      	mov	r0, r4
 800e8a0:	f000 f830 	bl	800e904 <_getpid_r>
 800e8a4:	462a      	mov	r2, r5
 800e8a6:	4601      	mov	r1, r0
 800e8a8:	4620      	mov	r0, r4
 800e8aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e8ae:	f000 b817 	b.w	800e8e0 <_kill_r>
 800e8b2:	2b01      	cmp	r3, #1
 800e8b4:	d00a      	beq.n	800e8cc <_raise_r+0x4c>
 800e8b6:	1c59      	adds	r1, r3, #1
 800e8b8:	d103      	bne.n	800e8c2 <_raise_r+0x42>
 800e8ba:	2316      	movs	r3, #22
 800e8bc:	6003      	str	r3, [r0, #0]
 800e8be:	2001      	movs	r0, #1
 800e8c0:	e7e7      	b.n	800e892 <_raise_r+0x12>
 800e8c2:	2400      	movs	r4, #0
 800e8c4:	4628      	mov	r0, r5
 800e8c6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e8ca:	4798      	blx	r3
 800e8cc:	2000      	movs	r0, #0
 800e8ce:	e7e0      	b.n	800e892 <_raise_r+0x12>

0800e8d0 <raise>:
 800e8d0:	4b02      	ldr	r3, [pc, #8]	; (800e8dc <raise+0xc>)
 800e8d2:	4601      	mov	r1, r0
 800e8d4:	6818      	ldr	r0, [r3, #0]
 800e8d6:	f7ff bfd3 	b.w	800e880 <_raise_r>
 800e8da:	bf00      	nop
 800e8dc:	2000001c 	.word	0x2000001c

0800e8e0 <_kill_r>:
 800e8e0:	b538      	push	{r3, r4, r5, lr}
 800e8e2:	2300      	movs	r3, #0
 800e8e4:	4d06      	ldr	r5, [pc, #24]	; (800e900 <_kill_r+0x20>)
 800e8e6:	4604      	mov	r4, r0
 800e8e8:	4608      	mov	r0, r1
 800e8ea:	4611      	mov	r1, r2
 800e8ec:	602b      	str	r3, [r5, #0]
 800e8ee:	f7f3 ff6c 	bl	80027ca <_kill>
 800e8f2:	1c43      	adds	r3, r0, #1
 800e8f4:	d102      	bne.n	800e8fc <_kill_r+0x1c>
 800e8f6:	682b      	ldr	r3, [r5, #0]
 800e8f8:	b103      	cbz	r3, 800e8fc <_kill_r+0x1c>
 800e8fa:	6023      	str	r3, [r4, #0]
 800e8fc:	bd38      	pop	{r3, r4, r5, pc}
 800e8fe:	bf00      	nop
 800e900:	20000bb8 	.word	0x20000bb8

0800e904 <_getpid_r>:
 800e904:	f7f3 bf5a 	b.w	80027bc <_getpid>

0800e908 <_init>:
 800e908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e90a:	bf00      	nop
 800e90c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e90e:	bc08      	pop	{r3}
 800e910:	469e      	mov	lr, r3
 800e912:	4770      	bx	lr

0800e914 <_fini>:
 800e914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e916:	bf00      	nop
 800e918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e91a:	bc08      	pop	{r3}
 800e91c:	469e      	mov	lr, r3
 800e91e:	4770      	bx	lr
