
RCFW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ace4  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bfc  0800aec8  0800aec8  0001aec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bac4  0800bac4  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  0800bac4  0800bac4  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bac4  0800bac4  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bac4  0800bac4  0001bac4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bac8  0800bac8  0001bac8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800bacc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008e4  20000080  0800bb4c  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000964  0800bb4c  00020964  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   000194b7  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b3b  00000000  00000000  00039560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013a0  00000000  00000000  0003d0a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011f8  00000000  00000000  0003e440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e5ac  00000000  00000000  0003f638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ab66  00000000  00000000  0005dbe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a56a8  00000000  00000000  0007874a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011ddf2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058f0  00000000  00000000  0011de48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000080 	.word	0x20000080
 8000200:	00000000 	.word	0x00000000
 8000204:	0800aeb0 	.word	0x0800aeb0

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000084 	.word	0x20000084
 8000220:	0800aeb0 	.word	0x0800aeb0

08000224 <__aeabi_frsub>:
 8000224:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000228:	e002      	b.n	8000230 <__addsf3>
 800022a:	bf00      	nop

0800022c <__aeabi_fsub>:
 800022c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000230 <__addsf3>:
 8000230:	0042      	lsls	r2, r0, #1
 8000232:	bf1f      	itttt	ne
 8000234:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000238:	ea92 0f03 	teqne	r2, r3
 800023c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000240:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000244:	d06a      	beq.n	800031c <__addsf3+0xec>
 8000246:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800024a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800024e:	bfc1      	itttt	gt
 8000250:	18d2      	addgt	r2, r2, r3
 8000252:	4041      	eorgt	r1, r0
 8000254:	4048      	eorgt	r0, r1
 8000256:	4041      	eorgt	r1, r0
 8000258:	bfb8      	it	lt
 800025a:	425b      	neglt	r3, r3
 800025c:	2b19      	cmp	r3, #25
 800025e:	bf88      	it	hi
 8000260:	4770      	bxhi	lr
 8000262:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000266:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800026a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800026e:	bf18      	it	ne
 8000270:	4240      	negne	r0, r0
 8000272:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000276:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800027a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800027e:	bf18      	it	ne
 8000280:	4249      	negne	r1, r1
 8000282:	ea92 0f03 	teq	r2, r3
 8000286:	d03f      	beq.n	8000308 <__addsf3+0xd8>
 8000288:	f1a2 0201 	sub.w	r2, r2, #1
 800028c:	fa41 fc03 	asr.w	ip, r1, r3
 8000290:	eb10 000c 	adds.w	r0, r0, ip
 8000294:	f1c3 0320 	rsb	r3, r3, #32
 8000298:	fa01 f103 	lsl.w	r1, r1, r3
 800029c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002a0:	d502      	bpl.n	80002a8 <__addsf3+0x78>
 80002a2:	4249      	negs	r1, r1
 80002a4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80002a8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80002ac:	d313      	bcc.n	80002d6 <__addsf3+0xa6>
 80002ae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002b2:	d306      	bcc.n	80002c2 <__addsf3+0x92>
 80002b4:	0840      	lsrs	r0, r0, #1
 80002b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80002ba:	f102 0201 	add.w	r2, r2, #1
 80002be:	2afe      	cmp	r2, #254	; 0xfe
 80002c0:	d251      	bcs.n	8000366 <__addsf3+0x136>
 80002c2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80002c6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80002ca:	bf08      	it	eq
 80002cc:	f020 0001 	biceq.w	r0, r0, #1
 80002d0:	ea40 0003 	orr.w	r0, r0, r3
 80002d4:	4770      	bx	lr
 80002d6:	0049      	lsls	r1, r1, #1
 80002d8:	eb40 0000 	adc.w	r0, r0, r0
 80002dc:	3a01      	subs	r2, #1
 80002de:	bf28      	it	cs
 80002e0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80002e4:	d2ed      	bcs.n	80002c2 <__addsf3+0x92>
 80002e6:	fab0 fc80 	clz	ip, r0
 80002ea:	f1ac 0c08 	sub.w	ip, ip, #8
 80002ee:	ebb2 020c 	subs.w	r2, r2, ip
 80002f2:	fa00 f00c 	lsl.w	r0, r0, ip
 80002f6:	bfaa      	itet	ge
 80002f8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80002fc:	4252      	neglt	r2, r2
 80002fe:	4318      	orrge	r0, r3
 8000300:	bfbc      	itt	lt
 8000302:	40d0      	lsrlt	r0, r2
 8000304:	4318      	orrlt	r0, r3
 8000306:	4770      	bx	lr
 8000308:	f092 0f00 	teq	r2, #0
 800030c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000310:	bf06      	itte	eq
 8000312:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000316:	3201      	addeq	r2, #1
 8000318:	3b01      	subne	r3, #1
 800031a:	e7b5      	b.n	8000288 <__addsf3+0x58>
 800031c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000320:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000324:	bf18      	it	ne
 8000326:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800032a:	d021      	beq.n	8000370 <__addsf3+0x140>
 800032c:	ea92 0f03 	teq	r2, r3
 8000330:	d004      	beq.n	800033c <__addsf3+0x10c>
 8000332:	f092 0f00 	teq	r2, #0
 8000336:	bf08      	it	eq
 8000338:	4608      	moveq	r0, r1
 800033a:	4770      	bx	lr
 800033c:	ea90 0f01 	teq	r0, r1
 8000340:	bf1c      	itt	ne
 8000342:	2000      	movne	r0, #0
 8000344:	4770      	bxne	lr
 8000346:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800034a:	d104      	bne.n	8000356 <__addsf3+0x126>
 800034c:	0040      	lsls	r0, r0, #1
 800034e:	bf28      	it	cs
 8000350:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000354:	4770      	bx	lr
 8000356:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800035a:	bf3c      	itt	cc
 800035c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000360:	4770      	bxcc	lr
 8000362:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000366:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800036a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800036e:	4770      	bx	lr
 8000370:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000374:	bf16      	itet	ne
 8000376:	4608      	movne	r0, r1
 8000378:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800037c:	4601      	movne	r1, r0
 800037e:	0242      	lsls	r2, r0, #9
 8000380:	bf06      	itte	eq
 8000382:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000386:	ea90 0f01 	teqeq	r0, r1
 800038a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800038e:	4770      	bx	lr

08000390 <__aeabi_ui2f>:
 8000390:	f04f 0300 	mov.w	r3, #0
 8000394:	e004      	b.n	80003a0 <__aeabi_i2f+0x8>
 8000396:	bf00      	nop

08000398 <__aeabi_i2f>:
 8000398:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 800039c:	bf48      	it	mi
 800039e:	4240      	negmi	r0, r0
 80003a0:	ea5f 0c00 	movs.w	ip, r0
 80003a4:	bf08      	it	eq
 80003a6:	4770      	bxeq	lr
 80003a8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80003ac:	4601      	mov	r1, r0
 80003ae:	f04f 0000 	mov.w	r0, #0
 80003b2:	e01c      	b.n	80003ee <__aeabi_l2f+0x2a>

080003b4 <__aeabi_ul2f>:
 80003b4:	ea50 0201 	orrs.w	r2, r0, r1
 80003b8:	bf08      	it	eq
 80003ba:	4770      	bxeq	lr
 80003bc:	f04f 0300 	mov.w	r3, #0
 80003c0:	e00a      	b.n	80003d8 <__aeabi_l2f+0x14>
 80003c2:	bf00      	nop

080003c4 <__aeabi_l2f>:
 80003c4:	ea50 0201 	orrs.w	r2, r0, r1
 80003c8:	bf08      	it	eq
 80003ca:	4770      	bxeq	lr
 80003cc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80003d0:	d502      	bpl.n	80003d8 <__aeabi_l2f+0x14>
 80003d2:	4240      	negs	r0, r0
 80003d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003d8:	ea5f 0c01 	movs.w	ip, r1
 80003dc:	bf02      	ittt	eq
 80003de:	4684      	moveq	ip, r0
 80003e0:	4601      	moveq	r1, r0
 80003e2:	2000      	moveq	r0, #0
 80003e4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80003e8:	bf08      	it	eq
 80003ea:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80003ee:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80003f2:	fabc f28c 	clz	r2, ip
 80003f6:	3a08      	subs	r2, #8
 80003f8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80003fc:	db10      	blt.n	8000420 <__aeabi_l2f+0x5c>
 80003fe:	fa01 fc02 	lsl.w	ip, r1, r2
 8000402:	4463      	add	r3, ip
 8000404:	fa00 fc02 	lsl.w	ip, r0, r2
 8000408:	f1c2 0220 	rsb	r2, r2, #32
 800040c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000410:	fa20 f202 	lsr.w	r2, r0, r2
 8000414:	eb43 0002 	adc.w	r0, r3, r2
 8000418:	bf08      	it	eq
 800041a:	f020 0001 	biceq.w	r0, r0, #1
 800041e:	4770      	bx	lr
 8000420:	f102 0220 	add.w	r2, r2, #32
 8000424:	fa01 fc02 	lsl.w	ip, r1, r2
 8000428:	f1c2 0220 	rsb	r2, r2, #32
 800042c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000430:	fa21 f202 	lsr.w	r2, r1, r2
 8000434:	eb43 0002 	adc.w	r0, r3, r2
 8000438:	bf08      	it	eq
 800043a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800043e:	4770      	bx	lr

08000440 <__aeabi_fmul>:
 8000440:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000444:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000448:	bf1e      	ittt	ne
 800044a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800044e:	ea92 0f0c 	teqne	r2, ip
 8000452:	ea93 0f0c 	teqne	r3, ip
 8000456:	d06f      	beq.n	8000538 <__aeabi_fmul+0xf8>
 8000458:	441a      	add	r2, r3
 800045a:	ea80 0c01 	eor.w	ip, r0, r1
 800045e:	0240      	lsls	r0, r0, #9
 8000460:	bf18      	it	ne
 8000462:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000466:	d01e      	beq.n	80004a6 <__aeabi_fmul+0x66>
 8000468:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800046c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000470:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000474:	fba0 3101 	umull	r3, r1, r0, r1
 8000478:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800047c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000480:	bf3e      	ittt	cc
 8000482:	0049      	lslcc	r1, r1, #1
 8000484:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000488:	005b      	lslcc	r3, r3, #1
 800048a:	ea40 0001 	orr.w	r0, r0, r1
 800048e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000492:	2afd      	cmp	r2, #253	; 0xfd
 8000494:	d81d      	bhi.n	80004d2 <__aeabi_fmul+0x92>
 8000496:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800049a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800049e:	bf08      	it	eq
 80004a0:	f020 0001 	biceq.w	r0, r0, #1
 80004a4:	4770      	bx	lr
 80004a6:	f090 0f00 	teq	r0, #0
 80004aa:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80004ae:	bf08      	it	eq
 80004b0:	0249      	lsleq	r1, r1, #9
 80004b2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80004b6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80004ba:	3a7f      	subs	r2, #127	; 0x7f
 80004bc:	bfc2      	ittt	gt
 80004be:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80004c2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80004c6:	4770      	bxgt	lr
 80004c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004cc:	f04f 0300 	mov.w	r3, #0
 80004d0:	3a01      	subs	r2, #1
 80004d2:	dc5d      	bgt.n	8000590 <__aeabi_fmul+0x150>
 80004d4:	f112 0f19 	cmn.w	r2, #25
 80004d8:	bfdc      	itt	le
 80004da:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80004de:	4770      	bxle	lr
 80004e0:	f1c2 0200 	rsb	r2, r2, #0
 80004e4:	0041      	lsls	r1, r0, #1
 80004e6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ea:	f1c2 0220 	rsb	r2, r2, #32
 80004ee:	fa00 fc02 	lsl.w	ip, r0, r2
 80004f2:	ea5f 0031 	movs.w	r0, r1, rrx
 80004f6:	f140 0000 	adc.w	r0, r0, #0
 80004fa:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80004fe:	bf08      	it	eq
 8000500:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000504:	4770      	bx	lr
 8000506:	f092 0f00 	teq	r2, #0
 800050a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800050e:	bf02      	ittt	eq
 8000510:	0040      	lsleq	r0, r0, #1
 8000512:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000516:	3a01      	subeq	r2, #1
 8000518:	d0f9      	beq.n	800050e <__aeabi_fmul+0xce>
 800051a:	ea40 000c 	orr.w	r0, r0, ip
 800051e:	f093 0f00 	teq	r3, #0
 8000522:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000526:	bf02      	ittt	eq
 8000528:	0049      	lsleq	r1, r1, #1
 800052a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800052e:	3b01      	subeq	r3, #1
 8000530:	d0f9      	beq.n	8000526 <__aeabi_fmul+0xe6>
 8000532:	ea41 010c 	orr.w	r1, r1, ip
 8000536:	e78f      	b.n	8000458 <__aeabi_fmul+0x18>
 8000538:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800053c:	ea92 0f0c 	teq	r2, ip
 8000540:	bf18      	it	ne
 8000542:	ea93 0f0c 	teqne	r3, ip
 8000546:	d00a      	beq.n	800055e <__aeabi_fmul+0x11e>
 8000548:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800054c:	bf18      	it	ne
 800054e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000552:	d1d8      	bne.n	8000506 <__aeabi_fmul+0xc6>
 8000554:	ea80 0001 	eor.w	r0, r0, r1
 8000558:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800055c:	4770      	bx	lr
 800055e:	f090 0f00 	teq	r0, #0
 8000562:	bf17      	itett	ne
 8000564:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000568:	4608      	moveq	r0, r1
 800056a:	f091 0f00 	teqne	r1, #0
 800056e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000572:	d014      	beq.n	800059e <__aeabi_fmul+0x15e>
 8000574:	ea92 0f0c 	teq	r2, ip
 8000578:	d101      	bne.n	800057e <__aeabi_fmul+0x13e>
 800057a:	0242      	lsls	r2, r0, #9
 800057c:	d10f      	bne.n	800059e <__aeabi_fmul+0x15e>
 800057e:	ea93 0f0c 	teq	r3, ip
 8000582:	d103      	bne.n	800058c <__aeabi_fmul+0x14c>
 8000584:	024b      	lsls	r3, r1, #9
 8000586:	bf18      	it	ne
 8000588:	4608      	movne	r0, r1
 800058a:	d108      	bne.n	800059e <__aeabi_fmul+0x15e>
 800058c:	ea80 0001 	eor.w	r0, r0, r1
 8000590:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000594:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000598:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800059c:	4770      	bx	lr
 800059e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005a2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80005a6:	4770      	bx	lr

080005a8 <__aeabi_fdiv>:
 80005a8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80005b0:	bf1e      	ittt	ne
 80005b2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80005b6:	ea92 0f0c 	teqne	r2, ip
 80005ba:	ea93 0f0c 	teqne	r3, ip
 80005be:	d069      	beq.n	8000694 <__aeabi_fdiv+0xec>
 80005c0:	eba2 0203 	sub.w	r2, r2, r3
 80005c4:	ea80 0c01 	eor.w	ip, r0, r1
 80005c8:	0249      	lsls	r1, r1, #9
 80005ca:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80005ce:	d037      	beq.n	8000640 <__aeabi_fdiv+0x98>
 80005d0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80005d4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80005d8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80005dc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80005e0:	428b      	cmp	r3, r1
 80005e2:	bf38      	it	cc
 80005e4:	005b      	lslcc	r3, r3, #1
 80005e6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80005ea:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80005ee:	428b      	cmp	r3, r1
 80005f0:	bf24      	itt	cs
 80005f2:	1a5b      	subcs	r3, r3, r1
 80005f4:	ea40 000c 	orrcs.w	r0, r0, ip
 80005f8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80005fc:	bf24      	itt	cs
 80005fe:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000602:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000606:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800060a:	bf24      	itt	cs
 800060c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000610:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000614:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000618:	bf24      	itt	cs
 800061a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800061e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000622:	011b      	lsls	r3, r3, #4
 8000624:	bf18      	it	ne
 8000626:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800062a:	d1e0      	bne.n	80005ee <__aeabi_fdiv+0x46>
 800062c:	2afd      	cmp	r2, #253	; 0xfd
 800062e:	f63f af50 	bhi.w	80004d2 <__aeabi_fmul+0x92>
 8000632:	428b      	cmp	r3, r1
 8000634:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000638:	bf08      	it	eq
 800063a:	f020 0001 	biceq.w	r0, r0, #1
 800063e:	4770      	bx	lr
 8000640:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000644:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000648:	327f      	adds	r2, #127	; 0x7f
 800064a:	bfc2      	ittt	gt
 800064c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000650:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000654:	4770      	bxgt	lr
 8000656:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800065a:	f04f 0300 	mov.w	r3, #0
 800065e:	3a01      	subs	r2, #1
 8000660:	e737      	b.n	80004d2 <__aeabi_fmul+0x92>
 8000662:	f092 0f00 	teq	r2, #0
 8000666:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800066a:	bf02      	ittt	eq
 800066c:	0040      	lsleq	r0, r0, #1
 800066e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000672:	3a01      	subeq	r2, #1
 8000674:	d0f9      	beq.n	800066a <__aeabi_fdiv+0xc2>
 8000676:	ea40 000c 	orr.w	r0, r0, ip
 800067a:	f093 0f00 	teq	r3, #0
 800067e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000682:	bf02      	ittt	eq
 8000684:	0049      	lsleq	r1, r1, #1
 8000686:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800068a:	3b01      	subeq	r3, #1
 800068c:	d0f9      	beq.n	8000682 <__aeabi_fdiv+0xda>
 800068e:	ea41 010c 	orr.w	r1, r1, ip
 8000692:	e795      	b.n	80005c0 <__aeabi_fdiv+0x18>
 8000694:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000698:	ea92 0f0c 	teq	r2, ip
 800069c:	d108      	bne.n	80006b0 <__aeabi_fdiv+0x108>
 800069e:	0242      	lsls	r2, r0, #9
 80006a0:	f47f af7d 	bne.w	800059e <__aeabi_fmul+0x15e>
 80006a4:	ea93 0f0c 	teq	r3, ip
 80006a8:	f47f af70 	bne.w	800058c <__aeabi_fmul+0x14c>
 80006ac:	4608      	mov	r0, r1
 80006ae:	e776      	b.n	800059e <__aeabi_fmul+0x15e>
 80006b0:	ea93 0f0c 	teq	r3, ip
 80006b4:	d104      	bne.n	80006c0 <__aeabi_fdiv+0x118>
 80006b6:	024b      	lsls	r3, r1, #9
 80006b8:	f43f af4c 	beq.w	8000554 <__aeabi_fmul+0x114>
 80006bc:	4608      	mov	r0, r1
 80006be:	e76e      	b.n	800059e <__aeabi_fmul+0x15e>
 80006c0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80006c4:	bf18      	it	ne
 80006c6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80006ca:	d1ca      	bne.n	8000662 <__aeabi_fdiv+0xba>
 80006cc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80006d0:	f47f af5c 	bne.w	800058c <__aeabi_fmul+0x14c>
 80006d4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80006d8:	f47f af3c 	bne.w	8000554 <__aeabi_fmul+0x114>
 80006dc:	e75f      	b.n	800059e <__aeabi_fmul+0x15e>
 80006de:	bf00      	nop

080006e0 <__gesf2>:
 80006e0:	f04f 3cff 	mov.w	ip, #4294967295
 80006e4:	e006      	b.n	80006f4 <__cmpsf2+0x4>
 80006e6:	bf00      	nop

080006e8 <__lesf2>:
 80006e8:	f04f 0c01 	mov.w	ip, #1
 80006ec:	e002      	b.n	80006f4 <__cmpsf2+0x4>
 80006ee:	bf00      	nop

080006f0 <__cmpsf2>:
 80006f0:	f04f 0c01 	mov.w	ip, #1
 80006f4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80006f8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80006fc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000700:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000704:	bf18      	it	ne
 8000706:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800070a:	d011      	beq.n	8000730 <__cmpsf2+0x40>
 800070c:	b001      	add	sp, #4
 800070e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000712:	bf18      	it	ne
 8000714:	ea90 0f01 	teqne	r0, r1
 8000718:	bf58      	it	pl
 800071a:	ebb2 0003 	subspl.w	r0, r2, r3
 800071e:	bf88      	it	hi
 8000720:	17c8      	asrhi	r0, r1, #31
 8000722:	bf38      	it	cc
 8000724:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000728:	bf18      	it	ne
 800072a:	f040 0001 	orrne.w	r0, r0, #1
 800072e:	4770      	bx	lr
 8000730:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000734:	d102      	bne.n	800073c <__cmpsf2+0x4c>
 8000736:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800073a:	d105      	bne.n	8000748 <__cmpsf2+0x58>
 800073c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000740:	d1e4      	bne.n	800070c <__cmpsf2+0x1c>
 8000742:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000746:	d0e1      	beq.n	800070c <__cmpsf2+0x1c>
 8000748:	f85d 0b04 	ldr.w	r0, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop

08000750 <__aeabi_cfrcmple>:
 8000750:	4684      	mov	ip, r0
 8000752:	4608      	mov	r0, r1
 8000754:	4661      	mov	r1, ip
 8000756:	e7ff      	b.n	8000758 <__aeabi_cfcmpeq>

08000758 <__aeabi_cfcmpeq>:
 8000758:	b50f      	push	{r0, r1, r2, r3, lr}
 800075a:	f7ff ffc9 	bl	80006f0 <__cmpsf2>
 800075e:	2800      	cmp	r0, #0
 8000760:	bf48      	it	mi
 8000762:	f110 0f00 	cmnmi.w	r0, #0
 8000766:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000768 <__aeabi_fcmpeq>:
 8000768:	f84d ed08 	str.w	lr, [sp, #-8]!
 800076c:	f7ff fff4 	bl	8000758 <__aeabi_cfcmpeq>
 8000770:	bf0c      	ite	eq
 8000772:	2001      	moveq	r0, #1
 8000774:	2000      	movne	r0, #0
 8000776:	f85d fb08 	ldr.w	pc, [sp], #8
 800077a:	bf00      	nop

0800077c <__aeabi_fcmplt>:
 800077c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000780:	f7ff ffea 	bl	8000758 <__aeabi_cfcmpeq>
 8000784:	bf34      	ite	cc
 8000786:	2001      	movcc	r0, #1
 8000788:	2000      	movcs	r0, #0
 800078a:	f85d fb08 	ldr.w	pc, [sp], #8
 800078e:	bf00      	nop

08000790 <__aeabi_fcmple>:
 8000790:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000794:	f7ff ffe0 	bl	8000758 <__aeabi_cfcmpeq>
 8000798:	bf94      	ite	ls
 800079a:	2001      	movls	r0, #1
 800079c:	2000      	movhi	r0, #0
 800079e:	f85d fb08 	ldr.w	pc, [sp], #8
 80007a2:	bf00      	nop

080007a4 <__aeabi_fcmpge>:
 80007a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007a8:	f7ff ffd2 	bl	8000750 <__aeabi_cfrcmple>
 80007ac:	bf94      	ite	ls
 80007ae:	2001      	movls	r0, #1
 80007b0:	2000      	movhi	r0, #0
 80007b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80007b6:	bf00      	nop

080007b8 <__aeabi_fcmpgt>:
 80007b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007bc:	f7ff ffc8 	bl	8000750 <__aeabi_cfrcmple>
 80007c0:	bf34      	ite	cc
 80007c2:	2001      	movcc	r0, #1
 80007c4:	2000      	movcs	r0, #0
 80007c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80007ca:	bf00      	nop

080007cc <__aeabi_f2iz>:
 80007cc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80007d0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80007d4:	d30f      	bcc.n	80007f6 <__aeabi_f2iz+0x2a>
 80007d6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80007da:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80007de:	d90d      	bls.n	80007fc <__aeabi_f2iz+0x30>
 80007e0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80007e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007e8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80007ec:	fa23 f002 	lsr.w	r0, r3, r2
 80007f0:	bf18      	it	ne
 80007f2:	4240      	negne	r0, r0
 80007f4:	4770      	bx	lr
 80007f6:	f04f 0000 	mov.w	r0, #0
 80007fa:	4770      	bx	lr
 80007fc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000800:	d101      	bne.n	8000806 <__aeabi_f2iz+0x3a>
 8000802:	0242      	lsls	r2, r0, #9
 8000804:	d105      	bne.n	8000812 <__aeabi_f2iz+0x46>
 8000806:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800080a:	bf08      	it	eq
 800080c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000810:	4770      	bx	lr
 8000812:	f04f 0000 	mov.w	r0, #0
 8000816:	4770      	bx	lr

08000818 <__aeabi_f2uiz>:
 8000818:	0042      	lsls	r2, r0, #1
 800081a:	d20e      	bcs.n	800083a <__aeabi_f2uiz+0x22>
 800081c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000820:	d30b      	bcc.n	800083a <__aeabi_f2uiz+0x22>
 8000822:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000826:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800082a:	d409      	bmi.n	8000840 <__aeabi_f2uiz+0x28>
 800082c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000830:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000834:	fa23 f002 	lsr.w	r0, r3, r2
 8000838:	4770      	bx	lr
 800083a:	f04f 0000 	mov.w	r0, #0
 800083e:	4770      	bx	lr
 8000840:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000844:	d101      	bne.n	800084a <__aeabi_f2uiz+0x32>
 8000846:	0242      	lsls	r2, r0, #9
 8000848:	d102      	bne.n	8000850 <__aeabi_f2uiz+0x38>
 800084a:	f04f 30ff 	mov.w	r0, #4294967295
 800084e:	4770      	bx	lr
 8000850:	f04f 0000 	mov.w	r0, #0
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop

08000858 <MAIN_displayRcfwBanner>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static void MAIN_displayRcfwBanner(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* Used ASCII art generator from https://patorjk.com with font called "Colossal" */
  LOG_info("");
 800085c:	4914      	ldr	r1, [pc, #80]	; (80008b0 <MAIN_displayRcfwBanner+0x58>)
 800085e:	2001      	movs	r0, #1
 8000860:	f009 f870 	bl	8009944 <LOG_log>
  LOG_info("    8888888b.        .d8888b.       8888888888      888       888"  );
 8000864:	4913      	ldr	r1, [pc, #76]	; (80008b4 <MAIN_displayRcfwBanner+0x5c>)
 8000866:	2001      	movs	r0, #1
 8000868:	f009 f86c 	bl	8009944 <LOG_log>
  LOG_info("    888   Y88b      d88P  Y88b      888             888   o   888"  );
 800086c:	4912      	ldr	r1, [pc, #72]	; (80008b8 <MAIN_displayRcfwBanner+0x60>)
 800086e:	2001      	movs	r0, #1
 8000870:	f009 f868 	bl	8009944 <LOG_log>
  LOG_info("    888    888      888    888      888             888  d8b  888"  );
 8000874:	4911      	ldr	r1, [pc, #68]	; (80008bc <MAIN_displayRcfwBanner+0x64>)
 8000876:	2001      	movs	r0, #1
 8000878:	f009 f864 	bl	8009944 <LOG_log>
  LOG_info("    888   d88P      888             8888888         888 d888b 888"  );
 800087c:	4910      	ldr	r1, [pc, #64]	; (80008c0 <MAIN_displayRcfwBanner+0x68>)
 800087e:	2001      	movs	r0, #1
 8000880:	f009 f860 	bl	8009944 <LOG_log>
  LOG_info("    8888888P\"       888             888             888d88888b888" );
 8000884:	490f      	ldr	r1, [pc, #60]	; (80008c4 <MAIN_displayRcfwBanner+0x6c>)
 8000886:	2001      	movs	r0, #1
 8000888:	f009 f85c 	bl	8009944 <LOG_log>
  LOG_info("    888 T88b        888    888      888             88888P Y88888"  );
 800088c:	490e      	ldr	r1, [pc, #56]	; (80008c8 <MAIN_displayRcfwBanner+0x70>)
 800088e:	2001      	movs	r0, #1
 8000890:	f009 f858 	bl	8009944 <LOG_log>
  LOG_info("    888  T88b       Y88b  d88P      888             8888P   Y8888"  );
 8000894:	490d      	ldr	r1, [pc, #52]	; (80008cc <MAIN_displayRcfwBanner+0x74>)
 8000896:	2001      	movs	r0, #1
 8000898:	f009 f854 	bl	8009944 <LOG_log>
  LOG_info("    888   T88b       \"Y8888P\"       888             888P     Y888");
 800089c:	490c      	ldr	r1, [pc, #48]	; (80008d0 <MAIN_displayRcfwBanner+0x78>)
 800089e:	2001      	movs	r0, #1
 80008a0:	f009 f850 	bl	8009944 <LOG_log>
  LOG_info("");
 80008a4:	4902      	ldr	r1, [pc, #8]	; (80008b0 <MAIN_displayRcfwBanner+0x58>)
 80008a6:	2001      	movs	r0, #1
 80008a8:	f009 f84c 	bl	8009944 <LOG_log>

  return;
 80008ac:	bf00      	nop
}
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	0800aec8 	.word	0x0800aec8
 80008b4:	0800aecc 	.word	0x0800aecc
 80008b8:	0800af10 	.word	0x0800af10
 80008bc:	0800af54 	.word	0x0800af54
 80008c0:	0800af98 	.word	0x0800af98
 80008c4:	0800afdc 	.word	0x0800afdc
 80008c8:	0800b020 	.word	0x0800b020
 80008cc:	0800b064 	.word	0x0800b064
 80008d0:	0800b0a8 	.word	0x0800b0a8

080008d4 <MAIN_updateLogLevel>:

static void MAIN_updateLogLevel(T_BLU_Data *p_data)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  RTC_TimeTypeDef l_time;
  RTC_DateTypeDef l_date;

  HAL_RTC_GetTime(&hrtc, &l_time, RTC_FORMAT_BCD);
 80008dc:	f107 030c 	add.w	r3, r7, #12
 80008e0:	2201      	movs	r2, #1
 80008e2:	4619      	mov	r1, r3
 80008e4:	4839      	ldr	r0, [pc, #228]	; (80009cc <MAIN_updateLogLevel+0xf8>)
 80008e6:	f004 f89d 	bl	8004a24 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &l_date, RTC_FORMAT_BCD);
 80008ea:	f107 0308 	add.w	r3, r7, #8
 80008ee:	2201      	movs	r2, #1
 80008f0:	4619      	mov	r1, r3
 80008f2:	4836      	ldr	r0, [pc, #216]	; (80009cc <MAIN_updateLogLevel+0xf8>)
 80008f4:	f004 fa9a 	bl	8004e2c <HAL_RTC_GetDate>

  switch (p_data->button)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	7c1b      	ldrb	r3, [r3, #16]
 80008fc:	3b05      	subs	r3, #5
 80008fe:	2b03      	cmp	r3, #3
 8000900:	d84c      	bhi.n	800099c <MAIN_updateLogLevel+0xc8>
 8000902:	a201      	add	r2, pc, #4	; (adr r2, 8000908 <MAIN_updateLogLevel+0x34>)
 8000904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000908:	08000919 	.word	0x08000919
 800090c:	08000997 	.word	0x08000997
 8000910:	08000955 	.word	0x08000955
 8000914:	08000991 	.word	0x08000991
  {
    case BLU_BUTTON_PAD_UP:
      if (g_MAIN_padUpPressedStartTime == 0)
 8000918:	4b2d      	ldr	r3, [pc, #180]	; (80009d0 <MAIN_updateLogLevel+0xfc>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d10a      	bne.n	8000936 <MAIN_updateLogLevel+0x62>
      {
        g_MAIN_padUpPressedStartTime = UTI_turnRtcTimeToSeconds(&l_time);
 8000920:	f107 030c 	add.w	r3, r7, #12
 8000924:	4618      	mov	r0, r3
 8000926:	f009 fa61 	bl	8009dec <UTI_turnRtcTimeToSeconds>
 800092a:	4603      	mov	r3, r0
 800092c:	4a28      	ldr	r2, [pc, #160]	; (80009d0 <MAIN_updateLogLevel+0xfc>)
 800092e:	6013      	str	r3, [r2, #0]

        LOG_increaseLevel();
 8000930:	f008 ffd8 	bl	80098e4 <LOG_increaseLevel>
      }
      else
      {
        g_MAIN_padUpPressedStartTime = 0;
      }
      break;
 8000934:	e034      	b.n	80009a0 <MAIN_updateLogLevel+0xcc>
      else if (UTI_turnRtcTimeToSeconds(&l_time) - g_MAIN_padUpPressedStartTime < MAIN_PAD_BUTTON_PERIOD_IN_S)
 8000936:	f107 030c 	add.w	r3, r7, #12
 800093a:	4618      	mov	r0, r3
 800093c:	f009 fa56 	bl	8009dec <UTI_turnRtcTimeToSeconds>
 8000940:	4602      	mov	r2, r0
 8000942:	4b23      	ldr	r3, [pc, #140]	; (80009d0 <MAIN_updateLogLevel+0xfc>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	1ad3      	subs	r3, r2, r3
 8000948:	2b01      	cmp	r3, #1
 800094a:	d929      	bls.n	80009a0 <MAIN_updateLogLevel+0xcc>
        g_MAIN_padUpPressedStartTime = 0;
 800094c:	4b20      	ldr	r3, [pc, #128]	; (80009d0 <MAIN_updateLogLevel+0xfc>)
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
      break;
 8000952:	e025      	b.n	80009a0 <MAIN_updateLogLevel+0xcc>

    case BLU_BUTTON_PAD_DOWN:
      if (g_MAIN_padDownPressedStartTime == 0)
 8000954:	4b1f      	ldr	r3, [pc, #124]	; (80009d4 <MAIN_updateLogLevel+0x100>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d10a      	bne.n	8000972 <MAIN_updateLogLevel+0x9e>
      {
        g_MAIN_padDownPressedStartTime = UTI_turnRtcTimeToSeconds(&l_time);
 800095c:	f107 030c 	add.w	r3, r7, #12
 8000960:	4618      	mov	r0, r3
 8000962:	f009 fa43 	bl	8009dec <UTI_turnRtcTimeToSeconds>
 8000966:	4603      	mov	r3, r0
 8000968:	4a1a      	ldr	r2, [pc, #104]	; (80009d4 <MAIN_updateLogLevel+0x100>)
 800096a:	6013      	str	r3, [r2, #0]

        LOG_decreaseLevel();
 800096c:	f008 ffd2 	bl	8009914 <LOG_decreaseLevel>
      }
      else
      {
        g_MAIN_padDownPressedStartTime = 0;
      }
      break;
 8000970:	e018      	b.n	80009a4 <MAIN_updateLogLevel+0xd0>
      else if (UTI_turnRtcTimeToSeconds(&l_time) - g_MAIN_padDownPressedStartTime < MAIN_PAD_BUTTON_PERIOD_IN_S)
 8000972:	f107 030c 	add.w	r3, r7, #12
 8000976:	4618      	mov	r0, r3
 8000978:	f009 fa38 	bl	8009dec <UTI_turnRtcTimeToSeconds>
 800097c:	4602      	mov	r2, r0
 800097e:	4b15      	ldr	r3, [pc, #84]	; (80009d4 <MAIN_updateLogLevel+0x100>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	1ad3      	subs	r3, r2, r3
 8000984:	2b01      	cmp	r3, #1
 8000986:	d90d      	bls.n	80009a4 <MAIN_updateLogLevel+0xd0>
        g_MAIN_padDownPressedStartTime = 0;
 8000988:	4b12      	ldr	r3, [pc, #72]	; (80009d4 <MAIN_updateLogLevel+0x100>)
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
      break;
 800098e:	e009      	b.n	80009a4 <MAIN_updateLogLevel+0xd0>

    case BLU_BUTTON_PAD_LEFT:
      LOG_turnOff();
 8000990:	f008 ff84 	bl	800989c <LOG_turnOff>
      break;
 8000994:	e007      	b.n	80009a6 <MAIN_updateLogLevel+0xd2>

    case BLU_BUTTON_PAD_RIGHT:
      LOG_turnOn();
 8000996:	f008 ff69 	bl	800986c <LOG_turnOn>
      break;
 800099a:	e004      	b.n	80009a6 <MAIN_updateLogLevel+0xd2>

    default:
      ; /* Nothing to do */;
      break;
 800099c:	bf00      	nop
 800099e:	e002      	b.n	80009a6 <MAIN_updateLogLevel+0xd2>
      break;
 80009a0:	bf00      	nop
 80009a2:	e000      	b.n	80009a6 <MAIN_updateLogLevel+0xd2>
      break;
 80009a4:	bf00      	nop
  }

  if ((p_data->button != BLU_BUTTON_PAD_UP) && (p_data->button != BLU_BUTTON_PAD_DOWN))
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	7c1b      	ldrb	r3, [r3, #16]
 80009aa:	2b05      	cmp	r3, #5
 80009ac:	d00a      	beq.n	80009c4 <MAIN_updateLogLevel+0xf0>
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	7c1b      	ldrb	r3, [r3, #16]
 80009b2:	2b07      	cmp	r3, #7
 80009b4:	d006      	beq.n	80009c4 <MAIN_updateLogLevel+0xf0>
  {
    g_MAIN_padUpPressedStartTime   = 0;
 80009b6:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <MAIN_updateLogLevel+0xfc>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
    g_MAIN_padDownPressedStartTime = 0;
 80009bc:	4b05      	ldr	r3, [pc, #20]	; (80009d4 <MAIN_updateLogLevel+0x100>)
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
  else
  {
    ; /* Nothing to do */;
  }

  return;
 80009c2:	bf00      	nop
 80009c4:	bf00      	nop
}
 80009c6:	3710      	adds	r7, #16
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	200005f8 	.word	0x200005f8
 80009d0:	2000009c 	.word	0x2000009c
 80009d4:	200000a0 	.word	0x200000a0

080009d8 <MAIN_updateLedMode>:

static void MAIN_updateLedMode(T_DRV_MODE p_driveMode, uint32_t p_voltageInMv)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	6039      	str	r1, [r7, #0]
 80009e2:	71fb      	strb	r3, [r7, #7]
  /* Regarding LED mode, battery check is prioritary on user requests. */
  /* Ignore 0 value as we could get it at startup or while debugging.  */
  if ((p_voltageInMv != 0) && (p_voltageInMv < MAIN_MIN_BATTERY_LEVEL_IN_MV))
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d00d      	beq.n	8000a06 <MAIN_updateLedMode+0x2e>
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	f242 720f 	movw	r2, #9999	; 0x270f
 80009f0:	4293      	cmp	r3, r2
 80009f2:	d808      	bhi.n	8000a06 <MAIN_updateLedMode+0x2e>
  {
    LOG_warning("Battery is getting low: %u mV", p_voltageInMv);
 80009f4:	683a      	ldr	r2, [r7, #0]
 80009f6:	4911      	ldr	r1, [pc, #68]	; (8000a3c <MAIN_updateLedMode+0x64>)
 80009f8:	2002      	movs	r0, #2
 80009fa:	f008 ffa3 	bl	8009944 <LOG_log>

    LED_setMode(LED_MODE_FORCED_OFF);
 80009fe:	2000      	movs	r0, #0
 8000a00:	f008 fe7e 	bl	8009700 <LED_setMode>
 8000a04:	e016      	b.n	8000a34 <MAIN_updateLedMode+0x5c>
  }
  else
  {
    switch (p_driveMode)
 8000a06:	79fb      	ldrb	r3, [r7, #7]
 8000a08:	2b02      	cmp	r3, #2
 8000a0a:	d00e      	beq.n	8000a2a <MAIN_updateLedMode+0x52>
 8000a0c:	2b02      	cmp	r3, #2
 8000a0e:	dc10      	bgt.n	8000a32 <MAIN_updateLedMode+0x5a>
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d002      	beq.n	8000a1a <MAIN_updateLedMode+0x42>
 8000a14:	2b01      	cmp	r3, #1
 8000a16:	d004      	beq.n	8000a22 <MAIN_updateLedMode+0x4a>
        LED_setMode(LED_MODE_BLINK_FAST);
        break;

      default:
        ; /* Nothing to do */
        break;
 8000a18:	e00b      	b.n	8000a32 <MAIN_updateLedMode+0x5a>
        LED_setMode(LED_MODE_BLINK_SLOW);
 8000a1a:	2002      	movs	r0, #2
 8000a1c:	f008 fe70 	bl	8009700 <LED_setMode>
        break;
 8000a20:	e008      	b.n	8000a34 <MAIN_updateLedMode+0x5c>
        LED_setMode(LED_MODE_BLINK_MEDIUM);
 8000a22:	2003      	movs	r0, #3
 8000a24:	f008 fe6c 	bl	8009700 <LED_setMode>
        break;
 8000a28:	e004      	b.n	8000a34 <MAIN_updateLedMode+0x5c>
        LED_setMode(LED_MODE_BLINK_FAST);
 8000a2a:	2004      	movs	r0, #4
 8000a2c:	f008 fe68 	bl	8009700 <LED_setMode>
        break;
 8000a30:	e000      	b.n	8000a34 <MAIN_updateLedMode+0x5c>
        break;
 8000a32:	bf00      	nop
    }
  }

  return;
 8000a34:	bf00      	nop
}
 8000a36:	3708      	adds	r7, #8
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	0800b0ec 	.word	0x0800b0ec

08000a40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b08c      	sub	sp, #48	; 0x30
 8000a44:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a46:	f001 fa59 	bl	8001efc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a4a:	f000 f8f3 	bl	8000c34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a4e:	f000 fcf5 	bl	800143c <MX_GPIO_Init>
  MX_TIM1_Init();
 8000a52:	f000 f9cf 	bl	8000df4 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000a56:	f000 fc9d 	bl	8001394 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000a5a:	f000 fcc5 	bl	80013e8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000a5e:	f000 f941 	bl	8000ce4 <MX_ADC1_Init>
  MX_TIM8_Init();
 8000a62:	f000 fbd3 	bl	800120c <MX_TIM8_Init>
  MX_RTC_Init();
 8000a66:	f000 f97b 	bl	8000d60 <MX_RTC_Init>
  MX_TIM7_Init();
 8000a6a:	f000 fb99 	bl	80011a0 <MX_TIM7_Init>
  MX_TIM2_Init();
 8000a6e:	f000 fa11 	bl	8000e94 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000a72:	f000 fa63 	bl	8000f3c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000a76:	f000 fab5 	bl	8000fe4 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000a7a:	f000 fb07 	bl	800108c <MX_TIM5_Init>
  MX_TIM6_Init();
 8000a7e:	f000 fb59 	bl	8001134 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  /* Setup global variables */
  g_MAIN_padUpPressedStartTime   = 0;
 8000a82:	4b58      	ldr	r3, [pc, #352]	; (8000be4 <main+0x1a4>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
  g_MAIN_padDownPressedStartTime = 0;
 8000a88:	4b57      	ldr	r3, [pc, #348]	; (8000be8 <main+0x1a8>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]

  /* Setup console */
  CON_init(&huart1);
 8000a8e:	4857      	ldr	r0, [pc, #348]	; (8000bec <main+0x1ac>)
 8000a90:	f008 f814 	bl	8008abc <CON_init>

  for (int i = 0; i < 15000; i++)
 8000a94:	2300      	movs	r3, #0
 8000a96:	623b      	str	r3, [r7, #32]
 8000a98:	e005      	b.n	8000aa6 <main+0x66>
  {
    HAL_Delay(1);
 8000a9a:	2001      	movs	r0, #1
 8000a9c:	f001 fa90 	bl	8001fc0 <HAL_Delay>
  for (int i = 0; i < 15000; i++)
 8000aa0:	6a3b      	ldr	r3, [r7, #32]
 8000aa2:	3301      	adds	r3, #1
 8000aa4:	623b      	str	r3, [r7, #32]
 8000aa6:	6a3b      	ldr	r3, [r7, #32]
 8000aa8:	f643 2297 	movw	r2, #14999	; 0x3a97
 8000aac:	4293      	cmp	r3, r2
 8000aae:	ddf4      	ble.n	8000a9a <main+0x5a>
  }

  /* Setup and start using logs */
  LOG_init    (&hrtc          );
 8000ab0:	484f      	ldr	r0, [pc, #316]	; (8000bf0 <main+0x1b0>)
 8000ab2:	f008 fecd 	bl	8009850 <LOG_init>
  LOG_setLevel(LOG_LEVEL_INFO);
 8000ab6:	2001      	movs	r0, #1
 8000ab8:	f008 ff04 	bl	80098c4 <LOG_setLevel>
  LOG_turnOn  (               );
 8000abc:	f008 fed6 	bl	800986c <LOG_turnOn>
  LOG_info    ("Starting RCFW");
 8000ac0:	494c      	ldr	r1, [pc, #304]	; (8000bf4 <main+0x1b4>)
 8000ac2:	2001      	movs	r0, #1
 8000ac4:	f008 ff3e 	bl	8009944 <LOG_log>

  /* Display RCFW banner */
  MAIN_displayRcfwBanner();
 8000ac8:	f7ff fec6 	bl	8000858 <MAIN_displayRcfwBanner>

  /* Initialize Timer 6 */
  HAL_TIM_Base_Start(&htim6);
 8000acc:	484a      	ldr	r0, [pc, #296]	; (8000bf8 <main+0x1b8>)
 8000ace:	f004 fd83 	bl	80055d8 <HAL_TIM_Base_Start>

  LOG_info("Started TIMER 6 (time measurement)");
 8000ad2:	494a      	ldr	r1, [pc, #296]	; (8000bfc <main+0x1bc>)
 8000ad4:	2001      	movs	r0, #1
 8000ad6:	f008 ff35 	bl	8009944 <LOG_log>

  /* Initialize Timer 7 and delay function in utilities */
  HAL_TIM_Base_Start_IT(&htim7);
 8000ada:	4849      	ldr	r0, [pc, #292]	; (8000c00 <main+0x1c0>)
 8000adc:	f004 fe06 	bl	80056ec <HAL_TIM_Base_Start_IT>
  UTI_init             (&htim7);
 8000ae0:	4847      	ldr	r0, [pc, #284]	; (8000c00 <main+0x1c0>)
 8000ae2:	f009 f955 	bl	8009d90 <UTI_init>

  LOG_info("Started TIMER 7 (utilities/delay)");
 8000ae6:	4947      	ldr	r1, [pc, #284]	; (8000c04 <main+0x1c4>)
 8000ae8:	2001      	movs	r0, #1
 8000aea:	f008 ff2b 	bl	8009944 <LOG_log>

  /* Initialize Timer 1 & green LED */
  HAL_TIM_Base_Start_IT(&htim1);
 8000aee:	4846      	ldr	r0, [pc, #280]	; (8000c08 <main+0x1c8>)
 8000af0:	f004 fdfc 	bl	80056ec <HAL_TIM_Base_Start_IT>
  LED_setMode(LED_MODE_BLINK_FAST);
 8000af4:	2004      	movs	r0, #4
 8000af6:	f008 fe03 	bl	8009700 <LED_setMode>

  LOG_info("Started TIMER 1 (green LED)");
 8000afa:	4944      	ldr	r1, [pc, #272]	; (8000c0c <main+0x1cc>)
 8000afc:	2001      	movs	r0, #1
 8000afe:	f008 ff21 	bl	8009944 <LOG_log>

  /* Initialize Timers 2, 3, 4 & 5 */
  HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 8000b02:	213c      	movs	r1, #60	; 0x3c
 8000b04:	4842      	ldr	r0, [pc, #264]	; (8000c10 <main+0x1d0>)
 8000b06:	f005 fa29 	bl	8005f5c <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 8000b0a:	213c      	movs	r1, #60	; 0x3c
 8000b0c:	4841      	ldr	r0, [pc, #260]	; (8000c14 <main+0x1d4>)
 8000b0e:	f005 fa25 	bl	8005f5c <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 8000b12:	213c      	movs	r1, #60	; 0x3c
 8000b14:	4840      	ldr	r0, [pc, #256]	; (8000c18 <main+0x1d8>)
 8000b16:	f005 fa21 	bl	8005f5c <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim5, TIM_CHANNEL_ALL);
 8000b1a:	213c      	movs	r1, #60	; 0x3c
 8000b1c:	483f      	ldr	r0, [pc, #252]	; (8000c1c <main+0x1dc>)
 8000b1e:	f005 fa1d 	bl	8005f5c <HAL_TIM_Encoder_Start_IT>

  LOG_info("Started TIMER 2, 3, 4, 5 (encoders)");
 8000b22:	493f      	ldr	r1, [pc, #252]	; (8000c20 <main+0x1e0>)
 8000b24:	2001      	movs	r0, #1
 8000b26:	f008 ff0d 	bl	8009944 <LOG_log>

  /* Initialize Timer 8 */
  HAL_TIM_Base_Start(&htim8);
 8000b2a:	483e      	ldr	r0, [pc, #248]	; (8000c24 <main+0x1e4>)
 8000b2c:	f004 fd54 	bl	80055d8 <HAL_TIM_Base_Start>

  LOG_info("Started TIMER 8 (PWM channels)");
 8000b30:	493d      	ldr	r1, [pc, #244]	; (8000c28 <main+0x1e8>)
 8000b32:	2001      	movs	r0, #1
 8000b34:	f008 ff06 	bl	8009944 <LOG_log>

  /* Initialize battery monitor */
  BAT_init(&hadc1, &hrtc);
 8000b38:	492d      	ldr	r1, [pc, #180]	; (8000bf0 <main+0x1b0>)
 8000b3a:	483c      	ldr	r0, [pc, #240]	; (8000c2c <main+0x1ec>)
 8000b3c:	f007 fd22 	bl	8008584 <BAT_init>

  /* Initialize PWM channels */
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8000b40:	2100      	movs	r1, #0
 8000b42:	4838      	ldr	r0, [pc, #224]	; (8000c24 <main+0x1e4>)
 8000b44:	f004 ff40 	bl	80059c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8000b48:	2104      	movs	r1, #4
 8000b4a:	4836      	ldr	r0, [pc, #216]	; (8000c24 <main+0x1e4>)
 8000b4c:	f004 ff3c 	bl	80059c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8000b50:	2108      	movs	r1, #8
 8000b52:	4834      	ldr	r0, [pc, #208]	; (8000c24 <main+0x1e4>)
 8000b54:	f004 ff38 	bl	80059c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8000b58:	210c      	movs	r1, #12
 8000b5a:	4832      	ldr	r0, [pc, #200]	; (8000c24 <main+0x1e4>)
 8000b5c:	f004 ff34 	bl	80059c8 <HAL_TIM_PWM_Start>

  LOG_info("Started PWM channels");
 8000b60:	4933      	ldr	r1, [pc, #204]	; (8000c30 <main+0x1f0>)
 8000b62:	2001      	movs	r0, #1
 8000b64:	f008 feee 	bl	8009944 <LOG_log>

  /* Initialize bluetooth control */
  BLU_init(DRV_MAXIMUM_SPEED);
 8000b68:	2028      	movs	r0, #40	; 0x28
 8000b6a:	f007 feed 	bl	8008948 <BLU_init>

  /* Initialize driving module */
  DRV_init(&htim8, &htim2, &htim3, &htim4, &htim5);
 8000b6e:	4b2b      	ldr	r3, [pc, #172]	; (8000c1c <main+0x1dc>)
 8000b70:	9300      	str	r3, [sp, #0]
 8000b72:	4b29      	ldr	r3, [pc, #164]	; (8000c18 <main+0x1d8>)
 8000b74:	4a27      	ldr	r2, [pc, #156]	; (8000c14 <main+0x1d4>)
 8000b76:	4926      	ldr	r1, [pc, #152]	; (8000c10 <main+0x1d0>)
 8000b78:	482a      	ldr	r0, [pc, #168]	; (8000c24 <main+0x1e4>)
 8000b7a:	f007 ffc3 	bl	8008b04 <DRV_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  /* Initialize ime measurement for master board control */
  l_lastTime = __HAL_TIM_GET_COUNTER(&htim6);
 8000b7e:	4b1e      	ldr	r3, [pc, #120]	; (8000bf8 <main+0x1b8>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b84:	84fb      	strh	r3, [r7, #38]	; 0x26

  while (1)
  {
    CON_receiveData        (                );
 8000b86:	f007 ffad 	bl	8008ae4 <CON_receiveData>
    BLU_receiveData        (&l_bluetoothData);
 8000b8a:	1d3b      	adds	r3, r7, #4
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f007 feff 	bl	8008990 <BLU_receiveData>
    DRV_updateFromBluetooth(&l_bluetoothData);
 8000b92:	1d3b      	adds	r3, r7, #4
 8000b94:	4618      	mov	r0, r3
 8000b96:	f008 f8cd 	bl	8008d34 <DRV_updateFromBluetooth>

    l_driveMode = DRV_getMode();
 8000b9a:	f008 fa77 	bl	800908c <DRV_getMode>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	77fb      	strb	r3, [r7, #31]

    BAT_update         (&l_voltageInMv            );
 8000ba2:	463b      	mov	r3, r7
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f007 fd21 	bl	80085ec <BAT_update>
    MAIN_updateLedMode (l_driveMode, l_voltageInMv);
 8000baa:	683a      	ldr	r2, [r7, #0]
 8000bac:	7ffb      	ldrb	r3, [r7, #31]
 8000bae:	4611      	mov	r1, r2
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f7ff ff11 	bl	80009d8 <MAIN_updateLedMode>
    MAIN_updateLogLevel(&l_bluetoothData          );
 8000bb6:	1d3b      	adds	r3, r7, #4
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f7ff fe8b 	bl	80008d4 <MAIN_updateLogLevel>

    UTI_delayUs(MAIN_LOOP_DELAY_IN_MS);
 8000bbe:	f242 7010 	movw	r0, #10000	; 0x2710
 8000bc2:	f009 f8f9 	bl	8009db8 <UTI_delayUs>

    l_currentTime = __HAL_TIM_GET_COUNTER(&htim6);
 8000bc6:	4b0c      	ldr	r3, [pc, #48]	; (8000bf8 <main+0x1b8>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bcc:	83bb      	strh	r3, [r7, #28]
    l_deltaTime   = l_lastTime - l_currentTime;
 8000bce:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000bd0:	8bbb      	ldrh	r3, [r7, #28]
 8000bd2:	1ad3      	subs	r3, r2, r3
 8000bd4:	837b      	strh	r3, [r7, #26]
    l_lastTime    = l_currentTime;
 8000bd6:	8bbb      	ldrh	r3, [r7, #28]
 8000bd8:	84fb      	strh	r3, [r7, #38]	; 0x26

    DRV_updateFromMaster(l_deltaTime);
 8000bda:	8b7b      	ldrh	r3, [r7, #26]
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f008 f9e9 	bl	8008fb4 <DRV_updateFromMaster>
    CON_receiveData        (                );
 8000be2:	e7d0      	b.n	8000b86 <main+0x146>
 8000be4:	2000009c 	.word	0x2000009c
 8000be8:	200000a0 	.word	0x200000a0
 8000bec:	20000584 	.word	0x20000584
 8000bf0:	200005f8 	.word	0x200005f8
 8000bf4:	0800b10c 	.word	0x0800b10c
 8000bf8:	2000060c 	.word	0x2000060c
 8000bfc:	0800b11c 	.word	0x0800b11c
 8000c00:	2000089c 	.word	0x2000089c
 8000c04:	0800b140 	.word	0x0800b140
 8000c08:	200006c0 	.word	0x200006c0
 8000c0c:	0800b164 	.word	0x0800b164
 8000c10:	20000774 	.word	0x20000774
 8000c14:	200004a0 	.word	0x200004a0
 8000c18:	20000338 	.word	0x20000338
 8000c1c:	200003ec 	.word	0x200003ec
 8000c20:	0800b180 	.word	0x0800b180
 8000c24:	20000284 	.word	0x20000284
 8000c28:	0800b1a4 	.word	0x0800b1a4
 8000c2c:	20000554 	.word	0x20000554
 8000c30:	0800b1c4 	.word	0x0800b1c4

08000c34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b096      	sub	sp, #88	; 0x58
 8000c38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c3a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c3e:	2228      	movs	r2, #40	; 0x28
 8000c40:	2100      	movs	r1, #0
 8000c42:	4618      	mov	r0, r3
 8000c44:	f009 f940 	bl	8009ec8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c48:	f107 031c 	add.w	r3, r7, #28
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	605a      	str	r2, [r3, #4]
 8000c52:	609a      	str	r2, [r3, #8]
 8000c54:	60da      	str	r2, [r3, #12]
 8000c56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c58:	1d3b      	adds	r3, r7, #4
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	601a      	str	r2, [r3, #0]
 8000c5e:	605a      	str	r2, [r3, #4]
 8000c60:	609a      	str	r2, [r3, #8]
 8000c62:	60da      	str	r2, [r3, #12]
 8000c64:	611a      	str	r2, [r3, #16]
 8000c66:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000c68:	230a      	movs	r3, #10
 8000c6a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c70:	2310      	movs	r3, #16
 8000c72:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000c74:	2301      	movs	r3, #1
 8000c76:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c7c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c80:	4618      	mov	r0, r3
 8000c82:	f002 fd53 	bl	800372c <HAL_RCC_OscConfig>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000c8c:	f000 fcd6 	bl	800163c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c90:	230f      	movs	r3, #15
 8000c92:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c94:	2300      	movs	r3, #0
 8000c96:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ca4:	f107 031c 	add.w	r3, r7, #28
 8000ca8:	2100      	movs	r1, #0
 8000caa:	4618      	mov	r0, r3
 8000cac:	f003 f8ae 	bl	8003e0c <HAL_RCC_ClockConfig>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000cb6:	f000 fcc1 	bl	800163c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 8000cba:	2303      	movs	r3, #3
 8000cbc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000cbe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cc2:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cc8:	1d3b      	adds	r3, r7, #4
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f003 fade 	bl	800428c <HAL_RCCEx_PeriphCLKConfig>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000cd6:	f000 fcb1 	bl	800163c <Error_Handler>
  }
}
 8000cda:	bf00      	nop
 8000cdc:	3758      	adds	r7, #88	; 0x58
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
	...

08000ce4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000cea:	1d3b      	adds	r3, r7, #4
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000cf4:	4b18      	ldr	r3, [pc, #96]	; (8000d58 <MX_ADC1_Init+0x74>)
 8000cf6:	4a19      	ldr	r2, [pc, #100]	; (8000d5c <MX_ADC1_Init+0x78>)
 8000cf8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000cfa:	4b17      	ldr	r3, [pc, #92]	; (8000d58 <MX_ADC1_Init+0x74>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d00:	4b15      	ldr	r3, [pc, #84]	; (8000d58 <MX_ADC1_Init+0x74>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d06:	4b14      	ldr	r3, [pc, #80]	; (8000d58 <MX_ADC1_Init+0x74>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d0c:	4b12      	ldr	r3, [pc, #72]	; (8000d58 <MX_ADC1_Init+0x74>)
 8000d0e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000d12:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d14:	4b10      	ldr	r3, [pc, #64]	; (8000d58 <MX_ADC1_Init+0x74>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000d1a:	4b0f      	ldr	r3, [pc, #60]	; (8000d58 <MX_ADC1_Init+0x74>)
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d20:	480d      	ldr	r0, [pc, #52]	; (8000d58 <MX_ADC1_Init+0x74>)
 8000d22:	f001 f971 	bl	8002008 <HAL_ADC_Init>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000d2c:	f000 fc86 	bl	800163c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000d30:	2305      	movs	r3, #5
 8000d32:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d34:	2301      	movs	r3, #1
 8000d36:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d3c:	1d3b      	adds	r3, r7, #4
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4805      	ldr	r0, [pc, #20]	; (8000d58 <MX_ADC1_Init+0x74>)
 8000d42:	f001 fd13 	bl	800276c <HAL_ADC_ConfigChannel>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000d4c:	f000 fc76 	bl	800163c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d50:	bf00      	nop
 8000d52:	3710      	adds	r7, #16
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	20000554 	.word	0x20000554
 8000d5c:	40012400 	.word	0x40012400

08000d60 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000d66:	1d3b      	adds	r3, r7, #4
 8000d68:	2100      	movs	r1, #0
 8000d6a:	460a      	mov	r2, r1
 8000d6c:	801a      	strh	r2, [r3, #0]
 8000d6e:	460a      	mov	r2, r1
 8000d70:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8000d72:	2300      	movs	r3, #0
 8000d74:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000d76:	4b1d      	ldr	r3, [pc, #116]	; (8000dec <MX_RTC_Init+0x8c>)
 8000d78:	4a1d      	ldr	r2, [pc, #116]	; (8000df0 <MX_RTC_Init+0x90>)
 8000d7a:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000d7c:	4b1b      	ldr	r3, [pc, #108]	; (8000dec <MX_RTC_Init+0x8c>)
 8000d7e:	f04f 32ff 	mov.w	r2, #4294967295
 8000d82:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 8000d84:	4b19      	ldr	r3, [pc, #100]	; (8000dec <MX_RTC_Init+0x8c>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000d8a:	4818      	ldr	r0, [pc, #96]	; (8000dec <MX_RTC_Init+0x8c>)
 8000d8c:	f003 fc9a 	bl	80046c4 <HAL_RTC_Init>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_RTC_Init+0x3a>
  {
    Error_Handler();
 8000d96:	f000 fc51 	bl	800163c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000da2:	2300      	movs	r3, #0
 8000da4:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000da6:	1d3b      	adds	r3, r7, #4
 8000da8:	2201      	movs	r2, #1
 8000daa:	4619      	mov	r1, r3
 8000dac:	480f      	ldr	r0, [pc, #60]	; (8000dec <MX_RTC_Init+0x8c>)
 8000dae:	f003 fd53 	bl	8004858 <HAL_RTC_SetTime>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_RTC_Init+0x5c>
  {
    Error_Handler();
 8000db8:	f000 fc40 	bl	800163c <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8000dcc:	463b      	mov	r3, r7
 8000dce:	2201      	movs	r2, #1
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4806      	ldr	r0, [pc, #24]	; (8000dec <MX_RTC_Init+0x8c>)
 8000dd4:	f003 ff0c 	bl	8004bf0 <HAL_RTC_SetDate>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8000dde:	f000 fc2d 	bl	800163c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000de2:	bf00      	nop
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	200005f8 	.word	0x200005f8
 8000df0:	40002800 	.word	0x40002800

08000df4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b086      	sub	sp, #24
 8000df8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dfa:	f107 0308 	add.w	r3, r7, #8
 8000dfe:	2200      	movs	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]
 8000e02:	605a      	str	r2, [r3, #4]
 8000e04:	609a      	str	r2, [r3, #8]
 8000e06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e08:	463b      	mov	r3, r7
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e10:	4b1e      	ldr	r3, [pc, #120]	; (8000e8c <MX_TIM1_Init+0x98>)
 8000e12:	4a1f      	ldr	r2, [pc, #124]	; (8000e90 <MX_TIM1_Init+0x9c>)
 8000e14:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7999;
 8000e16:	4b1d      	ldr	r3, [pc, #116]	; (8000e8c <MX_TIM1_Init+0x98>)
 8000e18:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000e1c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e1e:	4b1b      	ldr	r3, [pc, #108]	; (8000e8c <MX_TIM1_Init+0x98>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 249;
 8000e24:	4b19      	ldr	r3, [pc, #100]	; (8000e8c <MX_TIM1_Init+0x98>)
 8000e26:	22f9      	movs	r2, #249	; 0xf9
 8000e28:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e2a:	4b18      	ldr	r3, [pc, #96]	; (8000e8c <MX_TIM1_Init+0x98>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e30:	4b16      	ldr	r3, [pc, #88]	; (8000e8c <MX_TIM1_Init+0x98>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e36:	4b15      	ldr	r3, [pc, #84]	; (8000e8c <MX_TIM1_Init+0x98>)
 8000e38:	2280      	movs	r2, #128	; 0x80
 8000e3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e3c:	4813      	ldr	r0, [pc, #76]	; (8000e8c <MX_TIM1_Init+0x98>)
 8000e3e:	f004 faf9 	bl	8005434 <HAL_TIM_Base_Init>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000e48:	f000 fbf8 	bl	800163c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e50:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e52:	f107 0308 	add.w	r3, r7, #8
 8000e56:	4619      	mov	r1, r3
 8000e58:	480c      	ldr	r0, [pc, #48]	; (8000e8c <MX_TIM1_Init+0x98>)
 8000e5a:	f005 fc23 	bl	80066a4 <HAL_TIM_ConfigClockSource>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000e64:	f000 fbea 	bl	800163c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e70:	463b      	mov	r3, r7
 8000e72:	4619      	mov	r1, r3
 8000e74:	4805      	ldr	r0, [pc, #20]	; (8000e8c <MX_TIM1_Init+0x98>)
 8000e76:	f006 fb71 	bl	800755c <HAL_TIMEx_MasterConfigSynchronization>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000e80:	f000 fbdc 	bl	800163c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000e84:	bf00      	nop
 8000e86:	3718      	adds	r7, #24
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	200006c0 	.word	0x200006c0
 8000e90:	40012c00 	.word	0x40012c00

08000e94 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b08c      	sub	sp, #48	; 0x30
 8000e98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000e9a:	f107 030c 	add.w	r3, r7, #12
 8000e9e:	2224      	movs	r2, #36	; 0x24
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f009 f810 	bl	8009ec8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ea8:	1d3b      	adds	r3, r7, #4
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000eb0:	4b21      	ldr	r3, [pc, #132]	; (8000f38 <MX_TIM2_Init+0xa4>)
 8000eb2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000eb6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000eb8:	4b1f      	ldr	r3, [pc, #124]	; (8000f38 <MX_TIM2_Init+0xa4>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ebe:	4b1e      	ldr	r3, [pc, #120]	; (8000f38 <MX_TIM2_Init+0xa4>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000ec4:	4b1c      	ldr	r3, [pc, #112]	; (8000f38 <MX_TIM2_Init+0xa4>)
 8000ec6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000eca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ecc:	4b1a      	ldr	r3, [pc, #104]	; (8000f38 <MX_TIM2_Init+0xa4>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ed2:	4b19      	ldr	r3, [pc, #100]	; (8000f38 <MX_TIM2_Init+0xa4>)
 8000ed4:	2280      	movs	r2, #128	; 0x80
 8000ed6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000ed8:	2303      	movs	r3, #3
 8000eda:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000edc:	2300      	movs	r3, #0
 8000ede:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000ee8:	230a      	movs	r3, #10
 8000eea:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000eec:	2300      	movs	r3, #0
 8000eee:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000efc:	f107 030c 	add.w	r3, r7, #12
 8000f00:	4619      	mov	r1, r3
 8000f02:	480d      	ldr	r0, [pc, #52]	; (8000f38 <MX_TIM2_Init+0xa4>)
 8000f04:	f004 fe88 	bl	8005c18 <HAL_TIM_Encoder_Init>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000f0e:	f000 fb95 	bl	800163c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f12:	2300      	movs	r3, #0
 8000f14:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f16:	2300      	movs	r3, #0
 8000f18:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f1a:	1d3b      	adds	r3, r7, #4
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4806      	ldr	r0, [pc, #24]	; (8000f38 <MX_TIM2_Init+0xa4>)
 8000f20:	f006 fb1c 	bl	800755c <HAL_TIMEx_MasterConfigSynchronization>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000f2a:	f000 fb87 	bl	800163c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f2e:	bf00      	nop
 8000f30:	3730      	adds	r7, #48	; 0x30
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	20000774 	.word	0x20000774

08000f3c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b08c      	sub	sp, #48	; 0x30
 8000f40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000f42:	f107 030c 	add.w	r3, r7, #12
 8000f46:	2224      	movs	r2, #36	; 0x24
 8000f48:	2100      	movs	r1, #0
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f008 ffbc 	bl	8009ec8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f50:	1d3b      	adds	r3, r7, #4
 8000f52:	2200      	movs	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]
 8000f56:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f58:	4b20      	ldr	r3, [pc, #128]	; (8000fdc <MX_TIM3_Init+0xa0>)
 8000f5a:	4a21      	ldr	r2, [pc, #132]	; (8000fe0 <MX_TIM3_Init+0xa4>)
 8000f5c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000f5e:	4b1f      	ldr	r3, [pc, #124]	; (8000fdc <MX_TIM3_Init+0xa0>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f64:	4b1d      	ldr	r3, [pc, #116]	; (8000fdc <MX_TIM3_Init+0xa0>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000f6a:	4b1c      	ldr	r3, [pc, #112]	; (8000fdc <MX_TIM3_Init+0xa0>)
 8000f6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f70:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f72:	4b1a      	ldr	r3, [pc, #104]	; (8000fdc <MX_TIM3_Init+0xa0>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f78:	4b18      	ldr	r3, [pc, #96]	; (8000fdc <MX_TIM3_Init+0xa0>)
 8000f7a:	2280      	movs	r2, #128	; 0x80
 8000f7c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000f7e:	2303      	movs	r3, #3
 8000f80:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000f82:	2300      	movs	r3, #0
 8000f84:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000f86:	2301      	movs	r3, #1
 8000f88:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000f8e:	230a      	movs	r3, #10
 8000f90:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000f92:	2300      	movs	r3, #0
 8000f94:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000f96:	2301      	movs	r3, #1
 8000f98:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000fa2:	f107 030c 	add.w	r3, r7, #12
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	480c      	ldr	r0, [pc, #48]	; (8000fdc <MX_TIM3_Init+0xa0>)
 8000faa:	f004 fe35 	bl	8005c18 <HAL_TIM_Encoder_Init>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000fb4:	f000 fb42 	bl	800163c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fc0:	1d3b      	adds	r3, r7, #4
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4805      	ldr	r0, [pc, #20]	; (8000fdc <MX_TIM3_Init+0xa0>)
 8000fc6:	f006 fac9 	bl	800755c <HAL_TIMEx_MasterConfigSynchronization>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000fd0:	f000 fb34 	bl	800163c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000fd4:	bf00      	nop
 8000fd6:	3730      	adds	r7, #48	; 0x30
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	200004a0 	.word	0x200004a0
 8000fe0:	40000400 	.word	0x40000400

08000fe4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b08c      	sub	sp, #48	; 0x30
 8000fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000fea:	f107 030c 	add.w	r3, r7, #12
 8000fee:	2224      	movs	r2, #36	; 0x24
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f008 ff68 	bl	8009ec8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ff8:	1d3b      	adds	r3, r7, #4
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001000:	4b20      	ldr	r3, [pc, #128]	; (8001084 <MX_TIM4_Init+0xa0>)
 8001002:	4a21      	ldr	r2, [pc, #132]	; (8001088 <MX_TIM4_Init+0xa4>)
 8001004:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001006:	4b1f      	ldr	r3, [pc, #124]	; (8001084 <MX_TIM4_Init+0xa0>)
 8001008:	2200      	movs	r2, #0
 800100a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800100c:	4b1d      	ldr	r3, [pc, #116]	; (8001084 <MX_TIM4_Init+0xa0>)
 800100e:	2200      	movs	r2, #0
 8001010:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001012:	4b1c      	ldr	r3, [pc, #112]	; (8001084 <MX_TIM4_Init+0xa0>)
 8001014:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001018:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800101a:	4b1a      	ldr	r3, [pc, #104]	; (8001084 <MX_TIM4_Init+0xa0>)
 800101c:	2200      	movs	r2, #0
 800101e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001020:	4b18      	ldr	r3, [pc, #96]	; (8001084 <MX_TIM4_Init+0xa0>)
 8001022:	2280      	movs	r2, #128	; 0x80
 8001024:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001026:	2303      	movs	r3, #3
 8001028:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800102a:	2300      	movs	r3, #0
 800102c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800102e:	2301      	movs	r3, #1
 8001030:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001032:	2300      	movs	r3, #0
 8001034:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001036:	230a      	movs	r3, #10
 8001038:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800103a:	2300      	movs	r3, #0
 800103c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800103e:	2301      	movs	r3, #1
 8001040:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001042:	2300      	movs	r3, #0
 8001044:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001046:	2300      	movs	r3, #0
 8001048:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800104a:	f107 030c 	add.w	r3, r7, #12
 800104e:	4619      	mov	r1, r3
 8001050:	480c      	ldr	r0, [pc, #48]	; (8001084 <MX_TIM4_Init+0xa0>)
 8001052:	f004 fde1 	bl	8005c18 <HAL_TIM_Encoder_Init>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800105c:	f000 faee 	bl	800163c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001060:	2300      	movs	r3, #0
 8001062:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001064:	2300      	movs	r3, #0
 8001066:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001068:	1d3b      	adds	r3, r7, #4
 800106a:	4619      	mov	r1, r3
 800106c:	4805      	ldr	r0, [pc, #20]	; (8001084 <MX_TIM4_Init+0xa0>)
 800106e:	f006 fa75 	bl	800755c <HAL_TIMEx_MasterConfigSynchronization>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001078:	f000 fae0 	bl	800163c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800107c:	bf00      	nop
 800107e:	3730      	adds	r7, #48	; 0x30
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	20000338 	.word	0x20000338
 8001088:	40000800 	.word	0x40000800

0800108c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b08c      	sub	sp, #48	; 0x30
 8001090:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001092:	f107 030c 	add.w	r3, r7, #12
 8001096:	2224      	movs	r2, #36	; 0x24
 8001098:	2100      	movs	r1, #0
 800109a:	4618      	mov	r0, r3
 800109c:	f008 ff14 	bl	8009ec8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010a0:	1d3b      	adds	r3, r7, #4
 80010a2:	2200      	movs	r2, #0
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80010a8:	4b20      	ldr	r3, [pc, #128]	; (800112c <MX_TIM5_Init+0xa0>)
 80010aa:	4a21      	ldr	r2, [pc, #132]	; (8001130 <MX_TIM5_Init+0xa4>)
 80010ac:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80010ae:	4b1f      	ldr	r3, [pc, #124]	; (800112c <MX_TIM5_Init+0xa0>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010b4:	4b1d      	ldr	r3, [pc, #116]	; (800112c <MX_TIM5_Init+0xa0>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 80010ba:	4b1c      	ldr	r3, [pc, #112]	; (800112c <MX_TIM5_Init+0xa0>)
 80010bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010c0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010c2:	4b1a      	ldr	r3, [pc, #104]	; (800112c <MX_TIM5_Init+0xa0>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010c8:	4b18      	ldr	r3, [pc, #96]	; (800112c <MX_TIM5_Init+0xa0>)
 80010ca:	2280      	movs	r2, #128	; 0x80
 80010cc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80010ce:	2303      	movs	r3, #3
 80010d0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80010d2:	2300      	movs	r3, #0
 80010d4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80010d6:	2301      	movs	r3, #1
 80010d8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80010da:	2300      	movs	r3, #0
 80010dc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80010de:	230a      	movs	r3, #10
 80010e0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80010e2:	2300      	movs	r3, #0
 80010e4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80010e6:	2301      	movs	r3, #1
 80010e8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80010ea:	2300      	movs	r3, #0
 80010ec:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80010ee:	2300      	movs	r3, #0
 80010f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 80010f2:	f107 030c 	add.w	r3, r7, #12
 80010f6:	4619      	mov	r1, r3
 80010f8:	480c      	ldr	r0, [pc, #48]	; (800112c <MX_TIM5_Init+0xa0>)
 80010fa:	f004 fd8d 	bl	8005c18 <HAL_TIM_Encoder_Init>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001104:	f000 fa9a 	bl	800163c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001108:	2300      	movs	r3, #0
 800110a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800110c:	2300      	movs	r3, #0
 800110e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001110:	1d3b      	adds	r3, r7, #4
 8001112:	4619      	mov	r1, r3
 8001114:	4805      	ldr	r0, [pc, #20]	; (800112c <MX_TIM5_Init+0xa0>)
 8001116:	f006 fa21 	bl	800755c <HAL_TIMEx_MasterConfigSynchronization>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001120:	f000 fa8c 	bl	800163c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001124:	bf00      	nop
 8001126:	3730      	adds	r7, #48	; 0x30
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	200003ec 	.word	0x200003ec
 8001130:	40000c00 	.word	0x40000c00

08001134 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800113a:	463b      	mov	r3, r7
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001142:	4b15      	ldr	r3, [pc, #84]	; (8001198 <MX_TIM6_Init+0x64>)
 8001144:	4a15      	ldr	r2, [pc, #84]	; (800119c <MX_TIM6_Init+0x68>)
 8001146:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7;
 8001148:	4b13      	ldr	r3, [pc, #76]	; (8001198 <MX_TIM6_Init+0x64>)
 800114a:	2207      	movs	r2, #7
 800114c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800114e:	4b12      	ldr	r3, [pc, #72]	; (8001198 <MX_TIM6_Init+0x64>)
 8001150:	2200      	movs	r2, #0
 8001152:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001154:	4b10      	ldr	r3, [pc, #64]	; (8001198 <MX_TIM6_Init+0x64>)
 8001156:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800115a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800115c:	4b0e      	ldr	r3, [pc, #56]	; (8001198 <MX_TIM6_Init+0x64>)
 800115e:	2280      	movs	r2, #128	; 0x80
 8001160:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001162:	480d      	ldr	r0, [pc, #52]	; (8001198 <MX_TIM6_Init+0x64>)
 8001164:	f004 f966 	bl	8005434 <HAL_TIM_Base_Init>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800116e:	f000 fa65 	bl	800163c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001172:	2300      	movs	r3, #0
 8001174:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001176:	2300      	movs	r3, #0
 8001178:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800117a:	463b      	mov	r3, r7
 800117c:	4619      	mov	r1, r3
 800117e:	4806      	ldr	r0, [pc, #24]	; (8001198 <MX_TIM6_Init+0x64>)
 8001180:	f006 f9ec 	bl	800755c <HAL_TIMEx_MasterConfigSynchronization>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800118a:	f000 fa57 	bl	800163c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800118e:	bf00      	nop
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	2000060c 	.word	0x2000060c
 800119c:	40001000 	.word	0x40001000

080011a0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011a6:	463b      	mov	r3, r7
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80011ae:	4b15      	ldr	r3, [pc, #84]	; (8001204 <MX_TIM7_Init+0x64>)
 80011b0:	4a15      	ldr	r2, [pc, #84]	; (8001208 <MX_TIM7_Init+0x68>)
 80011b2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7;
 80011b4:	4b13      	ldr	r3, [pc, #76]	; (8001204 <MX_TIM7_Init+0x64>)
 80011b6:	2207      	movs	r2, #7
 80011b8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ba:	4b12      	ldr	r3, [pc, #72]	; (8001204 <MX_TIM7_Init+0x64>)
 80011bc:	2200      	movs	r2, #0
 80011be:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80011c0:	4b10      	ldr	r3, [pc, #64]	; (8001204 <MX_TIM7_Init+0x64>)
 80011c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011c6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011c8:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <MX_TIM7_Init+0x64>)
 80011ca:	2280      	movs	r2, #128	; 0x80
 80011cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80011ce:	480d      	ldr	r0, [pc, #52]	; (8001204 <MX_TIM7_Init+0x64>)
 80011d0:	f004 f930 	bl	8005434 <HAL_TIM_Base_Init>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80011da:	f000 fa2f 	bl	800163c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011de:	2300      	movs	r3, #0
 80011e0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011e2:	2300      	movs	r3, #0
 80011e4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80011e6:	463b      	mov	r3, r7
 80011e8:	4619      	mov	r1, r3
 80011ea:	4806      	ldr	r0, [pc, #24]	; (8001204 <MX_TIM7_Init+0x64>)
 80011ec:	f006 f9b6 	bl	800755c <HAL_TIMEx_MasterConfigSynchronization>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80011f6:	f000 fa21 	bl	800163c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80011fa:	bf00      	nop
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	2000089c 	.word	0x2000089c
 8001208:	40001400 	.word	0x40001400

0800120c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b096      	sub	sp, #88	; 0x58
 8001210:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001212:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	605a      	str	r2, [r3, #4]
 800121c:	609a      	str	r2, [r3, #8]
 800121e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001220:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800122a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800122e:	2200      	movs	r2, #0
 8001230:	601a      	str	r2, [r3, #0]
 8001232:	605a      	str	r2, [r3, #4]
 8001234:	609a      	str	r2, [r3, #8]
 8001236:	60da      	str	r2, [r3, #12]
 8001238:	611a      	str	r2, [r3, #16]
 800123a:	615a      	str	r2, [r3, #20]
 800123c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800123e:	1d3b      	adds	r3, r7, #4
 8001240:	2220      	movs	r2, #32
 8001242:	2100      	movs	r1, #0
 8001244:	4618      	mov	r0, r3
 8001246:	f008 fe3f 	bl	8009ec8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800124a:	4b50      	ldr	r3, [pc, #320]	; (800138c <MX_TIM8_Init+0x180>)
 800124c:	4a50      	ldr	r2, [pc, #320]	; (8001390 <MX_TIM8_Init+0x184>)
 800124e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 7;
 8001250:	4b4e      	ldr	r3, [pc, #312]	; (800138c <MX_TIM8_Init+0x180>)
 8001252:	2207      	movs	r2, #7
 8001254:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001256:	4b4d      	ldr	r3, [pc, #308]	; (800138c <MX_TIM8_Init+0x180>)
 8001258:	2200      	movs	r2, #0
 800125a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 100;
 800125c:	4b4b      	ldr	r3, [pc, #300]	; (800138c <MX_TIM8_Init+0x180>)
 800125e:	2264      	movs	r2, #100	; 0x64
 8001260:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001262:	4b4a      	ldr	r3, [pc, #296]	; (800138c <MX_TIM8_Init+0x180>)
 8001264:	2200      	movs	r2, #0
 8001266:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001268:	4b48      	ldr	r3, [pc, #288]	; (800138c <MX_TIM8_Init+0x180>)
 800126a:	2200      	movs	r2, #0
 800126c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800126e:	4b47      	ldr	r3, [pc, #284]	; (800138c <MX_TIM8_Init+0x180>)
 8001270:	2280      	movs	r2, #128	; 0x80
 8001272:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001274:	4845      	ldr	r0, [pc, #276]	; (800138c <MX_TIM8_Init+0x180>)
 8001276:	f004 f8dd 	bl	8005434 <HAL_TIM_Base_Init>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8001280:	f000 f9dc 	bl	800163c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001284:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001288:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800128a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800128e:	4619      	mov	r1, r3
 8001290:	483e      	ldr	r0, [pc, #248]	; (800138c <MX_TIM8_Init+0x180>)
 8001292:	f005 fa07 	bl	80066a4 <HAL_TIM_ConfigClockSource>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 800129c:	f000 f9ce 	bl	800163c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80012a0:	483a      	ldr	r0, [pc, #232]	; (800138c <MX_TIM8_Init+0x180>)
 80012a2:	f004 fab5 	bl	8005810 <HAL_TIM_PWM_Init>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 80012ac:	f000 f9c6 	bl	800163c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012b0:	2300      	movs	r3, #0
 80012b2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012b4:	2300      	movs	r3, #0
 80012b6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80012b8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80012bc:	4619      	mov	r1, r3
 80012be:	4833      	ldr	r0, [pc, #204]	; (800138c <MX_TIM8_Init+0x180>)
 80012c0:	f006 f94c 	bl	800755c <HAL_TIMEx_MasterConfigSynchronization>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 80012ca:	f000 f9b7 	bl	800163c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012ce:	2360      	movs	r3, #96	; 0x60
 80012d0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80012d2:	2300      	movs	r3, #0
 80012d4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012d6:	2300      	movs	r3, #0
 80012d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012da:	2300      	movs	r3, #0
 80012dc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012de:	2300      	movs	r3, #0
 80012e0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012e2:	2300      	movs	r3, #0
 80012e4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012e6:	2300      	movs	r3, #0
 80012e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ee:	2200      	movs	r2, #0
 80012f0:	4619      	mov	r1, r3
 80012f2:	4826      	ldr	r0, [pc, #152]	; (800138c <MX_TIM8_Init+0x180>)
 80012f4:	f005 f838 	bl	8006368 <HAL_TIM_PWM_ConfigChannel>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 80012fe:	f000 f99d 	bl	800163c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001302:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001306:	2204      	movs	r2, #4
 8001308:	4619      	mov	r1, r3
 800130a:	4820      	ldr	r0, [pc, #128]	; (800138c <MX_TIM8_Init+0x180>)
 800130c:	f005 f82c 	bl	8006368 <HAL_TIM_PWM_ConfigChannel>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_TIM8_Init+0x10e>
  {
    Error_Handler();
 8001316:	f000 f991 	bl	800163c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800131a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800131e:	2208      	movs	r2, #8
 8001320:	4619      	mov	r1, r3
 8001322:	481a      	ldr	r0, [pc, #104]	; (800138c <MX_TIM8_Init+0x180>)
 8001324:	f005 f820 	bl	8006368 <HAL_TIM_PWM_ConfigChannel>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_TIM8_Init+0x126>
  {
    Error_Handler();
 800132e:	f000 f985 	bl	800163c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001332:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001336:	220c      	movs	r2, #12
 8001338:	4619      	mov	r1, r3
 800133a:	4814      	ldr	r0, [pc, #80]	; (800138c <MX_TIM8_Init+0x180>)
 800133c:	f005 f814 	bl	8006368 <HAL_TIM_PWM_ConfigChannel>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_TIM8_Init+0x13e>
  {
    Error_Handler();
 8001346:	f000 f979 	bl	800163c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800134a:	2300      	movs	r3, #0
 800134c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800134e:	2300      	movs	r3, #0
 8001350:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001352:	2300      	movs	r3, #0
 8001354:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001356:	2300      	movs	r3, #0
 8001358:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800135a:	2300      	movs	r3, #0
 800135c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800135e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001362:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001364:	2300      	movs	r3, #0
 8001366:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001368:	1d3b      	adds	r3, r7, #4
 800136a:	4619      	mov	r1, r3
 800136c:	4807      	ldr	r0, [pc, #28]	; (800138c <MX_TIM8_Init+0x180>)
 800136e:	f006 f9c5 	bl	80076fc <HAL_TIMEx_ConfigBreakDeadTime>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_TIM8_Init+0x170>
  {
    Error_Handler();
 8001378:	f000 f960 	bl	800163c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800137c:	4803      	ldr	r0, [pc, #12]	; (800138c <MX_TIM8_Init+0x180>)
 800137e:	f000 fb7f 	bl	8001a80 <HAL_TIM_MspPostInit>

}
 8001382:	bf00      	nop
 8001384:	3758      	adds	r7, #88	; 0x58
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	20000284 	.word	0x20000284
 8001390:	40013400 	.word	0x40013400

08001394 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001398:	4b11      	ldr	r3, [pc, #68]	; (80013e0 <MX_USART1_UART_Init+0x4c>)
 800139a:	4a12      	ldr	r2, [pc, #72]	; (80013e4 <MX_USART1_UART_Init+0x50>)
 800139c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800139e:	4b10      	ldr	r3, [pc, #64]	; (80013e0 <MX_USART1_UART_Init+0x4c>)
 80013a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013a6:	4b0e      	ldr	r3, [pc, #56]	; (80013e0 <MX_USART1_UART_Init+0x4c>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013ac:	4b0c      	ldr	r3, [pc, #48]	; (80013e0 <MX_USART1_UART_Init+0x4c>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013b2:	4b0b      	ldr	r3, [pc, #44]	; (80013e0 <MX_USART1_UART_Init+0x4c>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013b8:	4b09      	ldr	r3, [pc, #36]	; (80013e0 <MX_USART1_UART_Init+0x4c>)
 80013ba:	220c      	movs	r2, #12
 80013bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013be:	4b08      	ldr	r3, [pc, #32]	; (80013e0 <MX_USART1_UART_Init+0x4c>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013c4:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <MX_USART1_UART_Init+0x4c>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013ca:	4805      	ldr	r0, [pc, #20]	; (80013e0 <MX_USART1_UART_Init+0x4c>)
 80013cc:	f006 fa7e 	bl	80078cc <HAL_UART_Init>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80013d6:	f000 f931 	bl	800163c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013da:	bf00      	nop
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	20000584 	.word	0x20000584
 80013e4:	40013800 	.word	0x40013800

080013e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013ec:	4b11      	ldr	r3, [pc, #68]	; (8001434 <MX_USART2_UART_Init+0x4c>)
 80013ee:	4a12      	ldr	r2, [pc, #72]	; (8001438 <MX_USART2_UART_Init+0x50>)
 80013f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80013f2:	4b10      	ldr	r3, [pc, #64]	; (8001434 <MX_USART2_UART_Init+0x4c>)
 80013f4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80013f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013fa:	4b0e      	ldr	r3, [pc, #56]	; (8001434 <MX_USART2_UART_Init+0x4c>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001400:	4b0c      	ldr	r3, [pc, #48]	; (8001434 <MX_USART2_UART_Init+0x4c>)
 8001402:	2200      	movs	r2, #0
 8001404:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001406:	4b0b      	ldr	r3, [pc, #44]	; (8001434 <MX_USART2_UART_Init+0x4c>)
 8001408:	2200      	movs	r2, #0
 800140a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800140c:	4b09      	ldr	r3, [pc, #36]	; (8001434 <MX_USART2_UART_Init+0x4c>)
 800140e:	220c      	movs	r2, #12
 8001410:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001412:	4b08      	ldr	r3, [pc, #32]	; (8001434 <MX_USART2_UART_Init+0x4c>)
 8001414:	2200      	movs	r2, #0
 8001416:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001418:	4b06      	ldr	r3, [pc, #24]	; (8001434 <MX_USART2_UART_Init+0x4c>)
 800141a:	2200      	movs	r2, #0
 800141c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800141e:	4805      	ldr	r0, [pc, #20]	; (8001434 <MX_USART2_UART_Init+0x4c>)
 8001420:	f006 fa54 	bl	80078cc <HAL_UART_Init>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800142a:	f000 f907 	bl	800163c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	20000828 	.word	0x20000828
 8001438:	40004400 	.word	0x40004400

0800143c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b088      	sub	sp, #32
 8001440:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001442:	f107 0310 	add.w	r3, r7, #16
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	605a      	str	r2, [r3, #4]
 800144c:	609a      	str	r2, [r3, #8]
 800144e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001450:	4b4e      	ldr	r3, [pc, #312]	; (800158c <MX_GPIO_Init+0x150>)
 8001452:	699b      	ldr	r3, [r3, #24]
 8001454:	4a4d      	ldr	r2, [pc, #308]	; (800158c <MX_GPIO_Init+0x150>)
 8001456:	f043 0310 	orr.w	r3, r3, #16
 800145a:	6193      	str	r3, [r2, #24]
 800145c:	4b4b      	ldr	r3, [pc, #300]	; (800158c <MX_GPIO_Init+0x150>)
 800145e:	699b      	ldr	r3, [r3, #24]
 8001460:	f003 0310 	and.w	r3, r3, #16
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001468:	4b48      	ldr	r3, [pc, #288]	; (800158c <MX_GPIO_Init+0x150>)
 800146a:	699b      	ldr	r3, [r3, #24]
 800146c:	4a47      	ldr	r2, [pc, #284]	; (800158c <MX_GPIO_Init+0x150>)
 800146e:	f043 0304 	orr.w	r3, r3, #4
 8001472:	6193      	str	r3, [r2, #24]
 8001474:	4b45      	ldr	r3, [pc, #276]	; (800158c <MX_GPIO_Init+0x150>)
 8001476:	699b      	ldr	r3, [r3, #24]
 8001478:	f003 0304 	and.w	r3, r3, #4
 800147c:	60bb      	str	r3, [r7, #8]
 800147e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001480:	4b42      	ldr	r3, [pc, #264]	; (800158c <MX_GPIO_Init+0x150>)
 8001482:	699b      	ldr	r3, [r3, #24]
 8001484:	4a41      	ldr	r2, [pc, #260]	; (800158c <MX_GPIO_Init+0x150>)
 8001486:	f043 0308 	orr.w	r3, r3, #8
 800148a:	6193      	str	r3, [r2, #24]
 800148c:	4b3f      	ldr	r3, [pc, #252]	; (800158c <MX_GPIO_Init+0x150>)
 800148e:	699b      	ldr	r3, [r3, #24]
 8001490:	f003 0308 	and.w	r3, r3, #8
 8001494:	607b      	str	r3, [r7, #4]
 8001496:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001498:	4b3c      	ldr	r3, [pc, #240]	; (800158c <MX_GPIO_Init+0x150>)
 800149a:	699b      	ldr	r3, [r3, #24]
 800149c:	4a3b      	ldr	r2, [pc, #236]	; (800158c <MX_GPIO_Init+0x150>)
 800149e:	f043 0320 	orr.w	r3, r3, #32
 80014a2:	6193      	str	r3, [r2, #24]
 80014a4:	4b39      	ldr	r3, [pc, #228]	; (800158c <MX_GPIO_Init+0x150>)
 80014a6:	699b      	ldr	r3, [r3, #24]
 80014a8:	f003 0320 	and.w	r3, r3, #32
 80014ac:	603b      	str	r3, [r7, #0]
 80014ae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BLUE_LED_Pin|BLUETOOTH_SPI_CMD_Pin|BLUETOOTH_SPI_CS_Pin|MOTOR_FRONT_RIGHT_IN_1_Pin
 80014b0:	2200      	movs	r2, #0
 80014b2:	f243 013a 	movw	r1, #12346	; 0x303a
 80014b6:	4836      	ldr	r0, [pc, #216]	; (8001590 <MX_GPIO_Init+0x154>)
 80014b8:	f002 f8d2 	bl	8003660 <HAL_GPIO_WritePin>
                          |MOTOR_FRONT_RIGHT_IN_2_Pin|MOTOR_REAR_LEFT_IN_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLUETOOTH_SPI_CLK_GPIO_Port, BLUETOOTH_SPI_CLK_Pin, GPIO_PIN_RESET);
 80014bc:	2200      	movs	r2, #0
 80014be:	2110      	movs	r1, #16
 80014c0:	4834      	ldr	r0, [pc, #208]	; (8001594 <MX_GPIO_Init+0x158>)
 80014c2:	f002 f8cd 	bl	8003660 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR_FRONT_LEFT_IN_1_Pin|MOTOR_FRONT_LEFT_IN_2_Pin|MOTOR_REAR_RIGHT_IN_2_Pin|MOTOR_REAR_RIGHT_IN_1_Pin, GPIO_PIN_RESET);
 80014c6:	2200      	movs	r2, #0
 80014c8:	2133      	movs	r1, #51	; 0x33
 80014ca:	4833      	ldr	r0, [pc, #204]	; (8001598 <MX_GPIO_Init+0x15c>)
 80014cc:	f002 f8c8 	bl	8003660 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_REAR_LEFT_IN_1_GPIO_Port, MOTOR_REAR_LEFT_IN_1_Pin, GPIO_PIN_RESET);
 80014d0:	2200      	movs	r2, #0
 80014d2:	2104      	movs	r1, #4
 80014d4:	4831      	ldr	r0, [pc, #196]	; (800159c <MX_GPIO_Init+0x160>)
 80014d6:	f002 f8c3 	bl	8003660 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_LED_Pin */
  GPIO_InitStruct.Pin = BLUE_LED_Pin;
 80014da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e0:	2301      	movs	r3, #1
 80014e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e4:	2300      	movs	r3, #0
 80014e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e8:	2302      	movs	r3, #2
 80014ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLUE_LED_GPIO_Port, &GPIO_InitStruct);
 80014ec:	f107 0310 	add.w	r3, r7, #16
 80014f0:	4619      	mov	r1, r3
 80014f2:	4827      	ldr	r0, [pc, #156]	; (8001590 <MX_GPIO_Init+0x154>)
 80014f4:	f001 fe20 	bl	8003138 <HAL_GPIO_Init>

  /*Configure GPIO pins : BLUETOOTH_SPI_CMD_Pin BLUETOOTH_SPI_CS_Pin MOTOR_FRONT_RIGHT_IN_1_Pin MOTOR_FRONT_RIGHT_IN_2_Pin
                           MOTOR_REAR_LEFT_IN_2_Pin */
  GPIO_InitStruct.Pin = BLUETOOTH_SPI_CMD_Pin|BLUETOOTH_SPI_CS_Pin|MOTOR_FRONT_RIGHT_IN_1_Pin|MOTOR_FRONT_RIGHT_IN_2_Pin
 80014f8:	f241 033a 	movw	r3, #4154	; 0x103a
 80014fc:	613b      	str	r3, [r7, #16]
                          |MOTOR_REAR_LEFT_IN_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014fe:	2301      	movs	r3, #1
 8001500:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001502:	2300      	movs	r3, #0
 8001504:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001506:	2303      	movs	r3, #3
 8001508:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800150a:	f107 0310 	add.w	r3, r7, #16
 800150e:	4619      	mov	r1, r3
 8001510:	481f      	ldr	r0, [pc, #124]	; (8001590 <MX_GPIO_Init+0x154>)
 8001512:	f001 fe11 	bl	8003138 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUETOOTH_SPI_DAT_Pin */
  GPIO_InitStruct.Pin = BLUETOOTH_SPI_DAT_Pin;
 8001516:	2304      	movs	r3, #4
 8001518:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800151a:	2300      	movs	r3, #0
 800151c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	2300      	movs	r3, #0
 8001520:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BLUETOOTH_SPI_DAT_GPIO_Port, &GPIO_InitStruct);
 8001522:	f107 0310 	add.w	r3, r7, #16
 8001526:	4619      	mov	r1, r3
 8001528:	4819      	ldr	r0, [pc, #100]	; (8001590 <MX_GPIO_Init+0x154>)
 800152a:	f001 fe05 	bl	8003138 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUETOOTH_SPI_CLK_Pin */
  GPIO_InitStruct.Pin = BLUETOOTH_SPI_CLK_Pin;
 800152e:	2310      	movs	r3, #16
 8001530:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001532:	2301      	movs	r3, #1
 8001534:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001536:	2300      	movs	r3, #0
 8001538:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800153a:	2303      	movs	r3, #3
 800153c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLUETOOTH_SPI_CLK_GPIO_Port, &GPIO_InitStruct);
 800153e:	f107 0310 	add.w	r3, r7, #16
 8001542:	4619      	mov	r1, r3
 8001544:	4813      	ldr	r0, [pc, #76]	; (8001594 <MX_GPIO_Init+0x158>)
 8001546:	f001 fdf7 	bl	8003138 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_FRONT_LEFT_IN_1_Pin MOTOR_FRONT_LEFT_IN_2_Pin MOTOR_REAR_RIGHT_IN_2_Pin MOTOR_REAR_RIGHT_IN_1_Pin */
  GPIO_InitStruct.Pin = MOTOR_FRONT_LEFT_IN_1_Pin|MOTOR_FRONT_LEFT_IN_2_Pin|MOTOR_REAR_RIGHT_IN_2_Pin|MOTOR_REAR_RIGHT_IN_1_Pin;
 800154a:	2333      	movs	r3, #51	; 0x33
 800154c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800154e:	2301      	movs	r3, #1
 8001550:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001552:	2300      	movs	r3, #0
 8001554:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001556:	2303      	movs	r3, #3
 8001558:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800155a:	f107 0310 	add.w	r3, r7, #16
 800155e:	4619      	mov	r1, r3
 8001560:	480d      	ldr	r0, [pc, #52]	; (8001598 <MX_GPIO_Init+0x15c>)
 8001562:	f001 fde9 	bl	8003138 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTOR_REAR_LEFT_IN_1_Pin */
  GPIO_InitStruct.Pin = MOTOR_REAR_LEFT_IN_1_Pin;
 8001566:	2304      	movs	r3, #4
 8001568:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800156a:	2301      	movs	r3, #1
 800156c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156e:	2300      	movs	r3, #0
 8001570:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001572:	2303      	movs	r3, #3
 8001574:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MOTOR_REAR_LEFT_IN_1_GPIO_Port, &GPIO_InitStruct);
 8001576:	f107 0310 	add.w	r3, r7, #16
 800157a:	4619      	mov	r1, r3
 800157c:	4807      	ldr	r0, [pc, #28]	; (800159c <MX_GPIO_Init+0x160>)
 800157e:	f001 fddb 	bl	8003138 <HAL_GPIO_Init>

}
 8001582:	bf00      	nop
 8001584:	3720      	adds	r7, #32
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40021000 	.word	0x40021000
 8001590:	40011000 	.word	0x40011000
 8001594:	40010800 	.word	0x40010800
 8001598:	40010c00 	.word	0x40010c00
 800159c:	40011400 	.word	0x40011400

080015a0 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  if ((htim == &htim2) || (htim == &htim3) || (htim == &htim4) || (htim == &htim5))
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	4a0b      	ldr	r2, [pc, #44]	; (80015d8 <HAL_TIM_IC_CaptureCallback+0x38>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d00b      	beq.n	80015c8 <HAL_TIM_IC_CaptureCallback+0x28>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	4a0a      	ldr	r2, [pc, #40]	; (80015dc <HAL_TIM_IC_CaptureCallback+0x3c>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d007      	beq.n	80015c8 <HAL_TIM_IC_CaptureCallback+0x28>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	4a09      	ldr	r2, [pc, #36]	; (80015e0 <HAL_TIM_IC_CaptureCallback+0x40>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d003      	beq.n	80015c8 <HAL_TIM_IC_CaptureCallback+0x28>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	4a08      	ldr	r2, [pc, #32]	; (80015e4 <HAL_TIM_IC_CaptureCallback+0x44>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d103      	bne.n	80015d0 <HAL_TIM_IC_CaptureCallback+0x30>
  {
    DRV_updateEncoder(htim);
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f007 fb6f 	bl	8008cac <DRV_updateEncoder>
  else
  {
    ; /* Nothing to do */
  }

  return;
 80015ce:	bf00      	nop
 80015d0:	bf00      	nop
}
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	20000774 	.word	0x20000774
 80015dc:	200004a0 	.word	0x200004a0
 80015e0:	20000338 	.word	0x20000338
 80015e4:	200003ec 	.word	0x200003ec

080015e8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  /* Check the handle of the timer triggering this callback and update LED */
  if (htim == &htim1)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	4a04      	ldr	r2, [pc, #16]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d101      	bne.n	80015fc <HAL_TIM_PeriodElapsedCallback+0x14>
  {
    LED_update();
 80015f8:	f008 f8ca 	bl	8009790 <LED_update>
  }
  else
  {
    ; /* Nothing to do */
  }
}
 80015fc:	bf00      	nop
 80015fe:	3708      	adds	r7, #8
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	200006c0 	.word	0x200006c0

08001608 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  /* Check the handle of the UART triggering this callback and actually receive date */
  if (huart == &huart1)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	4a08      	ldr	r2, [pc, #32]	; (8001634 <HAL_UART_RxCpltCallback+0x2c>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d102      	bne.n	800161e <HAL_UART_RxCpltCallback+0x16>
  {
    CON_receiveData();
 8001618:	f007 fa64 	bl	8008ae4 <CON_receiveData>
  }
  else
  {
    ; /* Nothing to do */
  }
}
 800161c:	e006      	b.n	800162c <HAL_UART_RxCpltCallback+0x24>
  else if (huart == &huart2)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4a05      	ldr	r2, [pc, #20]	; (8001638 <HAL_UART_RxCpltCallback+0x30>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d102      	bne.n	800162c <HAL_UART_RxCpltCallback+0x24>
    MAS_receiveData(&huart2);
 8001626:	4804      	ldr	r0, [pc, #16]	; (8001638 <HAL_UART_RxCpltCallback+0x30>)
 8001628:	f008 f9d8 	bl	80099dc <MAS_receiveData>
}
 800162c:	bf00      	nop
 800162e:	3708      	adds	r7, #8
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	20000584 	.word	0x20000584
 8001638:	20000828 	.word	0x20000828

0800163c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001640:	b672      	cpsid	i
}
 8001642:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();

  LOG_error("Error_Handler() triggered");
 8001644:	4902      	ldr	r1, [pc, #8]	; (8001650 <Error_Handler+0x14>)
 8001646:	2003      	movs	r0, #3
 8001648:	f008 f97c 	bl	8009944 <LOG_log>

  while (1)
 800164c:	e7fe      	b.n	800164c <Error_Handler+0x10>
 800164e:	bf00      	nop
 8001650:	0800b1dc 	.word	0x0800b1dc

08001654 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
     LOG_error("Wrong parameters: %s@%d", file, line);
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	687a      	ldr	r2, [r7, #4]
 8001662:	4904      	ldr	r1, [pc, #16]	; (8001674 <assert_failed+0x20>)
 8001664:	2003      	movs	r0, #3
 8001666:	f008 f96d 	bl	8009944 <LOG_log>

    return;
 800166a:	bf00      	nop
  /* USER CODE END 6 */
}
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	0800b1f8 	.word	0x0800b1f8

08001678 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001678:	b480      	push	{r7}
 800167a:	b085      	sub	sp, #20
 800167c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800167e:	4b15      	ldr	r3, [pc, #84]	; (80016d4 <HAL_MspInit+0x5c>)
 8001680:	699b      	ldr	r3, [r3, #24]
 8001682:	4a14      	ldr	r2, [pc, #80]	; (80016d4 <HAL_MspInit+0x5c>)
 8001684:	f043 0301 	orr.w	r3, r3, #1
 8001688:	6193      	str	r3, [r2, #24]
 800168a:	4b12      	ldr	r3, [pc, #72]	; (80016d4 <HAL_MspInit+0x5c>)
 800168c:	699b      	ldr	r3, [r3, #24]
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	60bb      	str	r3, [r7, #8]
 8001694:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001696:	4b0f      	ldr	r3, [pc, #60]	; (80016d4 <HAL_MspInit+0x5c>)
 8001698:	69db      	ldr	r3, [r3, #28]
 800169a:	4a0e      	ldr	r2, [pc, #56]	; (80016d4 <HAL_MspInit+0x5c>)
 800169c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016a0:	61d3      	str	r3, [r2, #28]
 80016a2:	4b0c      	ldr	r3, [pc, #48]	; (80016d4 <HAL_MspInit+0x5c>)
 80016a4:	69db      	ldr	r3, [r3, #28]
 80016a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016aa:	607b      	str	r3, [r7, #4]
 80016ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80016ae:	4b0a      	ldr	r3, [pc, #40]	; (80016d8 <HAL_MspInit+0x60>)
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80016ba:	60fb      	str	r3, [r7, #12]
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016c2:	60fb      	str	r3, [r7, #12]
 80016c4:	4a04      	ldr	r2, [pc, #16]	; (80016d8 <HAL_MspInit+0x60>)
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ca:	bf00      	nop
 80016cc:	3714      	adds	r7, #20
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bc80      	pop	{r7}
 80016d2:	4770      	bx	lr
 80016d4:	40021000 	.word	0x40021000
 80016d8:	40010000 	.word	0x40010000

080016dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b088      	sub	sp, #32
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e4:	f107 0310 	add.w	r3, r7, #16
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	605a      	str	r2, [r3, #4]
 80016ee:	609a      	str	r2, [r3, #8]
 80016f0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a14      	ldr	r2, [pc, #80]	; (8001748 <HAL_ADC_MspInit+0x6c>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d121      	bne.n	8001740 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80016fc:	4b13      	ldr	r3, [pc, #76]	; (800174c <HAL_ADC_MspInit+0x70>)
 80016fe:	699b      	ldr	r3, [r3, #24]
 8001700:	4a12      	ldr	r2, [pc, #72]	; (800174c <HAL_ADC_MspInit+0x70>)
 8001702:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001706:	6193      	str	r3, [r2, #24]
 8001708:	4b10      	ldr	r3, [pc, #64]	; (800174c <HAL_ADC_MspInit+0x70>)
 800170a:	699b      	ldr	r3, [r3, #24]
 800170c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001710:	60fb      	str	r3, [r7, #12]
 8001712:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001714:	4b0d      	ldr	r3, [pc, #52]	; (800174c <HAL_ADC_MspInit+0x70>)
 8001716:	699b      	ldr	r3, [r3, #24]
 8001718:	4a0c      	ldr	r2, [pc, #48]	; (800174c <HAL_ADC_MspInit+0x70>)
 800171a:	f043 0304 	orr.w	r3, r3, #4
 800171e:	6193      	str	r3, [r2, #24]
 8001720:	4b0a      	ldr	r3, [pc, #40]	; (800174c <HAL_ADC_MspInit+0x70>)
 8001722:	699b      	ldr	r3, [r3, #24]
 8001724:	f003 0304 	and.w	r3, r3, #4
 8001728:	60bb      	str	r3, [r7, #8]
 800172a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = BATTERY_ADC_Pin;
 800172c:	2320      	movs	r3, #32
 800172e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001730:	2303      	movs	r3, #3
 8001732:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(BATTERY_ADC_GPIO_Port, &GPIO_InitStruct);
 8001734:	f107 0310 	add.w	r3, r7, #16
 8001738:	4619      	mov	r1, r3
 800173a:	4805      	ldr	r0, [pc, #20]	; (8001750 <HAL_ADC_MspInit+0x74>)
 800173c:	f001 fcfc 	bl	8003138 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001740:	bf00      	nop
 8001742:	3720      	adds	r7, #32
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	40012400 	.word	0x40012400
 800174c:	40021000 	.word	0x40021000
 8001750:	40010800 	.word	0x40010800

08001754 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a0b      	ldr	r2, [pc, #44]	; (8001790 <HAL_RTC_MspInit+0x3c>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d110      	bne.n	8001788 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8001766:	f001 ffd5 	bl	8003714 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 800176a:	4b0a      	ldr	r3, [pc, #40]	; (8001794 <HAL_RTC_MspInit+0x40>)
 800176c:	69db      	ldr	r3, [r3, #28]
 800176e:	4a09      	ldr	r2, [pc, #36]	; (8001794 <HAL_RTC_MspInit+0x40>)
 8001770:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001774:	61d3      	str	r3, [r2, #28]
 8001776:	4b07      	ldr	r3, [pc, #28]	; (8001794 <HAL_RTC_MspInit+0x40>)
 8001778:	69db      	ldr	r3, [r3, #28]
 800177a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001782:	4b05      	ldr	r3, [pc, #20]	; (8001798 <HAL_RTC_MspInit+0x44>)
 8001784:	2201      	movs	r2, #1
 8001786:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001788:	bf00      	nop
 800178a:	3710      	adds	r7, #16
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	40002800 	.word	0x40002800
 8001794:	40021000 	.word	0x40021000
 8001798:	4242043c 	.word	0x4242043c

0800179c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b086      	sub	sp, #24
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a28      	ldr	r2, [pc, #160]	; (800184c <HAL_TIM_Base_MspInit+0xb0>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d114      	bne.n	80017d8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80017ae:	4b28      	ldr	r3, [pc, #160]	; (8001850 <HAL_TIM_Base_MspInit+0xb4>)
 80017b0:	699b      	ldr	r3, [r3, #24]
 80017b2:	4a27      	ldr	r2, [pc, #156]	; (8001850 <HAL_TIM_Base_MspInit+0xb4>)
 80017b4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80017b8:	6193      	str	r3, [r2, #24]
 80017ba:	4b25      	ldr	r3, [pc, #148]	; (8001850 <HAL_TIM_Base_MspInit+0xb4>)
 80017bc:	699b      	ldr	r3, [r3, #24]
 80017be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017c2:	617b      	str	r3, [r7, #20]
 80017c4:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 4, 0);
 80017c6:	2200      	movs	r2, #0
 80017c8:	2104      	movs	r1, #4
 80017ca:	2019      	movs	r0, #25
 80017cc:	f001 fb22 	bl	8002e14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80017d0:	2019      	movs	r0, #25
 80017d2:	f001 fb4b 	bl	8002e6c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80017d6:	e034      	b.n	8001842 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM6)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a1d      	ldr	r2, [pc, #116]	; (8001854 <HAL_TIM_Base_MspInit+0xb8>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d10c      	bne.n	80017fc <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80017e2:	4b1b      	ldr	r3, [pc, #108]	; (8001850 <HAL_TIM_Base_MspInit+0xb4>)
 80017e4:	69db      	ldr	r3, [r3, #28]
 80017e6:	4a1a      	ldr	r2, [pc, #104]	; (8001850 <HAL_TIM_Base_MspInit+0xb4>)
 80017e8:	f043 0310 	orr.w	r3, r3, #16
 80017ec:	61d3      	str	r3, [r2, #28]
 80017ee:	4b18      	ldr	r3, [pc, #96]	; (8001850 <HAL_TIM_Base_MspInit+0xb4>)
 80017f0:	69db      	ldr	r3, [r3, #28]
 80017f2:	f003 0310 	and.w	r3, r3, #16
 80017f6:	613b      	str	r3, [r7, #16]
 80017f8:	693b      	ldr	r3, [r7, #16]
}
 80017fa:	e022      	b.n	8001842 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM7)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a15      	ldr	r2, [pc, #84]	; (8001858 <HAL_TIM_Base_MspInit+0xbc>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d10c      	bne.n	8001820 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001806:	4b12      	ldr	r3, [pc, #72]	; (8001850 <HAL_TIM_Base_MspInit+0xb4>)
 8001808:	69db      	ldr	r3, [r3, #28]
 800180a:	4a11      	ldr	r2, [pc, #68]	; (8001850 <HAL_TIM_Base_MspInit+0xb4>)
 800180c:	f043 0320 	orr.w	r3, r3, #32
 8001810:	61d3      	str	r3, [r2, #28]
 8001812:	4b0f      	ldr	r3, [pc, #60]	; (8001850 <HAL_TIM_Base_MspInit+0xb4>)
 8001814:	69db      	ldr	r3, [r3, #28]
 8001816:	f003 0320 	and.w	r3, r3, #32
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	68fb      	ldr	r3, [r7, #12]
}
 800181e:	e010      	b.n	8001842 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM8)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a0d      	ldr	r2, [pc, #52]	; (800185c <HAL_TIM_Base_MspInit+0xc0>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d10b      	bne.n	8001842 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800182a:	4b09      	ldr	r3, [pc, #36]	; (8001850 <HAL_TIM_Base_MspInit+0xb4>)
 800182c:	699b      	ldr	r3, [r3, #24]
 800182e:	4a08      	ldr	r2, [pc, #32]	; (8001850 <HAL_TIM_Base_MspInit+0xb4>)
 8001830:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001834:	6193      	str	r3, [r2, #24]
 8001836:	4b06      	ldr	r3, [pc, #24]	; (8001850 <HAL_TIM_Base_MspInit+0xb4>)
 8001838:	699b      	ldr	r3, [r3, #24]
 800183a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800183e:	60bb      	str	r3, [r7, #8]
 8001840:	68bb      	ldr	r3, [r7, #8]
}
 8001842:	bf00      	nop
 8001844:	3718      	adds	r7, #24
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	40012c00 	.word	0x40012c00
 8001850:	40021000 	.word	0x40021000
 8001854:	40001000 	.word	0x40001000
 8001858:	40001400 	.word	0x40001400
 800185c:	40013400 	.word	0x40013400

08001860 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b090      	sub	sp, #64	; 0x40
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001868:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	605a      	str	r2, [r3, #4]
 8001872:	609a      	str	r2, [r3, #8]
 8001874:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800187e:	d157      	bne.n	8001930 <HAL_TIM_Encoder_MspInit+0xd0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001880:	4b78      	ldr	r3, [pc, #480]	; (8001a64 <HAL_TIM_Encoder_MspInit+0x204>)
 8001882:	69db      	ldr	r3, [r3, #28]
 8001884:	4a77      	ldr	r2, [pc, #476]	; (8001a64 <HAL_TIM_Encoder_MspInit+0x204>)
 8001886:	f043 0301 	orr.w	r3, r3, #1
 800188a:	61d3      	str	r3, [r2, #28]
 800188c:	4b75      	ldr	r3, [pc, #468]	; (8001a64 <HAL_TIM_Encoder_MspInit+0x204>)
 800188e:	69db      	ldr	r3, [r3, #28]
 8001890:	f003 0301 	and.w	r3, r3, #1
 8001894:	62bb      	str	r3, [r7, #40]	; 0x28
 8001896:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001898:	4b72      	ldr	r3, [pc, #456]	; (8001a64 <HAL_TIM_Encoder_MspInit+0x204>)
 800189a:	699b      	ldr	r3, [r3, #24]
 800189c:	4a71      	ldr	r2, [pc, #452]	; (8001a64 <HAL_TIM_Encoder_MspInit+0x204>)
 800189e:	f043 0304 	orr.w	r3, r3, #4
 80018a2:	6193      	str	r3, [r2, #24]
 80018a4:	4b6f      	ldr	r3, [pc, #444]	; (8001a64 <HAL_TIM_Encoder_MspInit+0x204>)
 80018a6:	699b      	ldr	r3, [r3, #24]
 80018a8:	f003 0304 	and.w	r3, r3, #4
 80018ac:	627b      	str	r3, [r7, #36]	; 0x24
 80018ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018b0:	4b6c      	ldr	r3, [pc, #432]	; (8001a64 <HAL_TIM_Encoder_MspInit+0x204>)
 80018b2:	699b      	ldr	r3, [r3, #24]
 80018b4:	4a6b      	ldr	r2, [pc, #428]	; (8001a64 <HAL_TIM_Encoder_MspInit+0x204>)
 80018b6:	f043 0308 	orr.w	r3, r3, #8
 80018ba:	6193      	str	r3, [r2, #24]
 80018bc:	4b69      	ldr	r3, [pc, #420]	; (8001a64 <HAL_TIM_Encoder_MspInit+0x204>)
 80018be:	699b      	ldr	r3, [r3, #24]
 80018c0:	f003 0308 	and.w	r3, r3, #8
 80018c4:	623b      	str	r3, [r7, #32]
 80018c6:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_1_IN_1_Pin;
 80018c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80018cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018ce:	2300      	movs	r3, #0
 80018d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d2:	2300      	movs	r3, #0
 80018d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENCODER_1_IN_1_GPIO_Port, &GPIO_InitStruct);
 80018d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018da:	4619      	mov	r1, r3
 80018dc:	4862      	ldr	r0, [pc, #392]	; (8001a68 <HAL_TIM_Encoder_MspInit+0x208>)
 80018de:	f001 fc2b 	bl	8003138 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENCODER_1_IN_2_Pin;
 80018e2:	2308      	movs	r3, #8
 80018e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018e6:	2300      	movs	r3, #0
 80018e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ea:	2300      	movs	r3, #0
 80018ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENCODER_1_IN_2_GPIO_Port, &GPIO_InitStruct);
 80018ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018f2:	4619      	mov	r1, r3
 80018f4:	485d      	ldr	r0, [pc, #372]	; (8001a6c <HAL_TIM_Encoder_MspInit+0x20c>)
 80018f6:	f001 fc1f 	bl	8003138 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 80018fa:	4b5d      	ldr	r3, [pc, #372]	; (8001a70 <HAL_TIM_Encoder_MspInit+0x210>)
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001900:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001902:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001906:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001908:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800190a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800190e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001910:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001912:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001916:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001918:	4a55      	ldr	r2, [pc, #340]	; (8001a70 <HAL_TIM_Encoder_MspInit+0x210>)
 800191a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800191c:	6053      	str	r3, [r2, #4]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800191e:	2200      	movs	r2, #0
 8001920:	2105      	movs	r1, #5
 8001922:	201c      	movs	r0, #28
 8001924:	f001 fa76 	bl	8002e14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001928:	201c      	movs	r0, #28
 800192a:	f001 fa9f 	bl	8002e6c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800192e:	e094      	b.n	8001a5a <HAL_TIM_Encoder_MspInit+0x1fa>
  else if(htim_encoder->Instance==TIM3)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a4f      	ldr	r2, [pc, #316]	; (8001a74 <HAL_TIM_Encoder_MspInit+0x214>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d12c      	bne.n	8001994 <HAL_TIM_Encoder_MspInit+0x134>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800193a:	4b4a      	ldr	r3, [pc, #296]	; (8001a64 <HAL_TIM_Encoder_MspInit+0x204>)
 800193c:	69db      	ldr	r3, [r3, #28]
 800193e:	4a49      	ldr	r2, [pc, #292]	; (8001a64 <HAL_TIM_Encoder_MspInit+0x204>)
 8001940:	f043 0302 	orr.w	r3, r3, #2
 8001944:	61d3      	str	r3, [r2, #28]
 8001946:	4b47      	ldr	r3, [pc, #284]	; (8001a64 <HAL_TIM_Encoder_MspInit+0x204>)
 8001948:	69db      	ldr	r3, [r3, #28]
 800194a:	f003 0302 	and.w	r3, r3, #2
 800194e:	61fb      	str	r3, [r7, #28]
 8001950:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001952:	4b44      	ldr	r3, [pc, #272]	; (8001a64 <HAL_TIM_Encoder_MspInit+0x204>)
 8001954:	699b      	ldr	r3, [r3, #24]
 8001956:	4a43      	ldr	r2, [pc, #268]	; (8001a64 <HAL_TIM_Encoder_MspInit+0x204>)
 8001958:	f043 0304 	orr.w	r3, r3, #4
 800195c:	6193      	str	r3, [r2, #24]
 800195e:	4b41      	ldr	r3, [pc, #260]	; (8001a64 <HAL_TIM_Encoder_MspInit+0x204>)
 8001960:	699b      	ldr	r3, [r3, #24]
 8001962:	f003 0304 	and.w	r3, r3, #4
 8001966:	61bb      	str	r3, [r7, #24]
 8001968:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ENCODER_2_IN_1_Pin|ENCODER_2_IN_2_Pin;
 800196a:	23c0      	movs	r3, #192	; 0xc0
 800196c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800196e:	2300      	movs	r3, #0
 8001970:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001972:	2300      	movs	r3, #0
 8001974:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001976:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800197a:	4619      	mov	r1, r3
 800197c:	483a      	ldr	r0, [pc, #232]	; (8001a68 <HAL_TIM_Encoder_MspInit+0x208>)
 800197e:	f001 fbdb 	bl	8003138 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001982:	2200      	movs	r2, #0
 8001984:	2105      	movs	r1, #5
 8001986:	201d      	movs	r0, #29
 8001988:	f001 fa44 	bl	8002e14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800198c:	201d      	movs	r0, #29
 800198e:	f001 fa6d 	bl	8002e6c <HAL_NVIC_EnableIRQ>
}
 8001992:	e062      	b.n	8001a5a <HAL_TIM_Encoder_MspInit+0x1fa>
  else if(htim_encoder->Instance==TIM4)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a37      	ldr	r2, [pc, #220]	; (8001a78 <HAL_TIM_Encoder_MspInit+0x218>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d12c      	bne.n	80019f8 <HAL_TIM_Encoder_MspInit+0x198>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800199e:	4b31      	ldr	r3, [pc, #196]	; (8001a64 <HAL_TIM_Encoder_MspInit+0x204>)
 80019a0:	69db      	ldr	r3, [r3, #28]
 80019a2:	4a30      	ldr	r2, [pc, #192]	; (8001a64 <HAL_TIM_Encoder_MspInit+0x204>)
 80019a4:	f043 0304 	orr.w	r3, r3, #4
 80019a8:	61d3      	str	r3, [r2, #28]
 80019aa:	4b2e      	ldr	r3, [pc, #184]	; (8001a64 <HAL_TIM_Encoder_MspInit+0x204>)
 80019ac:	69db      	ldr	r3, [r3, #28]
 80019ae:	f003 0304 	and.w	r3, r3, #4
 80019b2:	617b      	str	r3, [r7, #20]
 80019b4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019b6:	4b2b      	ldr	r3, [pc, #172]	; (8001a64 <HAL_TIM_Encoder_MspInit+0x204>)
 80019b8:	699b      	ldr	r3, [r3, #24]
 80019ba:	4a2a      	ldr	r2, [pc, #168]	; (8001a64 <HAL_TIM_Encoder_MspInit+0x204>)
 80019bc:	f043 0308 	orr.w	r3, r3, #8
 80019c0:	6193      	str	r3, [r2, #24]
 80019c2:	4b28      	ldr	r3, [pc, #160]	; (8001a64 <HAL_TIM_Encoder_MspInit+0x204>)
 80019c4:	699b      	ldr	r3, [r3, #24]
 80019c6:	f003 0308 	and.w	r3, r3, #8
 80019ca:	613b      	str	r3, [r7, #16]
 80019cc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ENCODER_3_IN_1_Pin|ENCODER_3_IN_2_Pin;
 80019ce:	23c0      	movs	r3, #192	; 0xc0
 80019d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019d2:	2300      	movs	r3, #0
 80019d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d6:	2300      	movs	r3, #0
 80019d8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019de:	4619      	mov	r1, r3
 80019e0:	4822      	ldr	r0, [pc, #136]	; (8001a6c <HAL_TIM_Encoder_MspInit+0x20c>)
 80019e2:	f001 fba9 	bl	8003138 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 80019e6:	2200      	movs	r2, #0
 80019e8:	2105      	movs	r1, #5
 80019ea:	201e      	movs	r0, #30
 80019ec:	f001 fa12 	bl	8002e14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80019f0:	201e      	movs	r0, #30
 80019f2:	f001 fa3b 	bl	8002e6c <HAL_NVIC_EnableIRQ>
}
 80019f6:	e030      	b.n	8001a5a <HAL_TIM_Encoder_MspInit+0x1fa>
  else if(htim_encoder->Instance==TIM5)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a1f      	ldr	r2, [pc, #124]	; (8001a7c <HAL_TIM_Encoder_MspInit+0x21c>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d12b      	bne.n	8001a5a <HAL_TIM_Encoder_MspInit+0x1fa>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001a02:	4b18      	ldr	r3, [pc, #96]	; (8001a64 <HAL_TIM_Encoder_MspInit+0x204>)
 8001a04:	69db      	ldr	r3, [r3, #28]
 8001a06:	4a17      	ldr	r2, [pc, #92]	; (8001a64 <HAL_TIM_Encoder_MspInit+0x204>)
 8001a08:	f043 0308 	orr.w	r3, r3, #8
 8001a0c:	61d3      	str	r3, [r2, #28]
 8001a0e:	4b15      	ldr	r3, [pc, #84]	; (8001a64 <HAL_TIM_Encoder_MspInit+0x204>)
 8001a10:	69db      	ldr	r3, [r3, #28]
 8001a12:	f003 0308 	and.w	r3, r3, #8
 8001a16:	60fb      	str	r3, [r7, #12]
 8001a18:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a1a:	4b12      	ldr	r3, [pc, #72]	; (8001a64 <HAL_TIM_Encoder_MspInit+0x204>)
 8001a1c:	699b      	ldr	r3, [r3, #24]
 8001a1e:	4a11      	ldr	r2, [pc, #68]	; (8001a64 <HAL_TIM_Encoder_MspInit+0x204>)
 8001a20:	f043 0304 	orr.w	r3, r3, #4
 8001a24:	6193      	str	r3, [r2, #24]
 8001a26:	4b0f      	ldr	r3, [pc, #60]	; (8001a64 <HAL_TIM_Encoder_MspInit+0x204>)
 8001a28:	699b      	ldr	r3, [r3, #24]
 8001a2a:	f003 0304 	and.w	r3, r3, #4
 8001a2e:	60bb      	str	r3, [r7, #8]
 8001a30:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENCODER_4_IN_1_Pin|ENCODER_4_IN_2_Pin;
 8001a32:	2303      	movs	r3, #3
 8001a34:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a36:	2300      	movs	r3, #0
 8001a38:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a42:	4619      	mov	r1, r3
 8001a44:	4808      	ldr	r0, [pc, #32]	; (8001a68 <HAL_TIM_Encoder_MspInit+0x208>)
 8001a46:	f001 fb77 	bl	8003138 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	2105      	movs	r1, #5
 8001a4e:	2032      	movs	r0, #50	; 0x32
 8001a50:	f001 f9e0 	bl	8002e14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001a54:	2032      	movs	r0, #50	; 0x32
 8001a56:	f001 fa09 	bl	8002e6c <HAL_NVIC_EnableIRQ>
}
 8001a5a:	bf00      	nop
 8001a5c:	3740      	adds	r7, #64	; 0x40
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	40021000 	.word	0x40021000
 8001a68:	40010800 	.word	0x40010800
 8001a6c:	40010c00 	.word	0x40010c00
 8001a70:	40010000 	.word	0x40010000
 8001a74:	40000400 	.word	0x40000400
 8001a78:	40000800 	.word	0x40000800
 8001a7c:	40000c00 	.word	0x40000c00

08001a80 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b088      	sub	sp, #32
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a88:	f107 0310 	add.w	r3, r7, #16
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	605a      	str	r2, [r3, #4]
 8001a92:	609a      	str	r2, [r3, #8]
 8001a94:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM8)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a10      	ldr	r2, [pc, #64]	; (8001adc <HAL_TIM_MspPostInit+0x5c>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d118      	bne.n	8001ad2 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aa0:	4b0f      	ldr	r3, [pc, #60]	; (8001ae0 <HAL_TIM_MspPostInit+0x60>)
 8001aa2:	699b      	ldr	r3, [r3, #24]
 8001aa4:	4a0e      	ldr	r2, [pc, #56]	; (8001ae0 <HAL_TIM_MspPostInit+0x60>)
 8001aa6:	f043 0310 	orr.w	r3, r3, #16
 8001aaa:	6193      	str	r3, [r2, #24]
 8001aac:	4b0c      	ldr	r3, [pc, #48]	; (8001ae0 <HAL_TIM_MspPostInit+0x60>)
 8001aae:	699b      	ldr	r3, [r3, #24]
 8001ab0:	f003 0310 	and.w	r3, r3, #16
 8001ab4:	60fb      	str	r3, [r7, #12]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    PC8     ------> TIM8_CH3
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = MOTOR_FRONT_LEFT_PWM_Pin|MOTOR_FRONT_RIGHT_PWM_Pin|MOTOR_REAR_LEFT_PWM_Pin|MOTOR_REAR_RIGHT_PWM_Pin;
 8001ab8:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001abc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001abe:	2302      	movs	r3, #2
 8001ac0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ac6:	f107 0310 	add.w	r3, r7, #16
 8001aca:	4619      	mov	r1, r3
 8001acc:	4805      	ldr	r0, [pc, #20]	; (8001ae4 <HAL_TIM_MspPostInit+0x64>)
 8001ace:	f001 fb33 	bl	8003138 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001ad2:	bf00      	nop
 8001ad4:	3720      	adds	r7, #32
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	40013400 	.word	0x40013400
 8001ae0:	40021000 	.word	0x40021000
 8001ae4:	40011000 	.word	0x40011000

08001ae8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b08a      	sub	sp, #40	; 0x28
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af0:	f107 0318 	add.w	r3, r7, #24
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	605a      	str	r2, [r3, #4]
 8001afa:	609a      	str	r2, [r3, #8]
 8001afc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a3f      	ldr	r2, [pc, #252]	; (8001c00 <HAL_UART_MspInit+0x118>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d13a      	bne.n	8001b7e <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b08:	4b3e      	ldr	r3, [pc, #248]	; (8001c04 <HAL_UART_MspInit+0x11c>)
 8001b0a:	699b      	ldr	r3, [r3, #24]
 8001b0c:	4a3d      	ldr	r2, [pc, #244]	; (8001c04 <HAL_UART_MspInit+0x11c>)
 8001b0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b12:	6193      	str	r3, [r2, #24]
 8001b14:	4b3b      	ldr	r3, [pc, #236]	; (8001c04 <HAL_UART_MspInit+0x11c>)
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b1c:	617b      	str	r3, [r7, #20]
 8001b1e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b20:	4b38      	ldr	r3, [pc, #224]	; (8001c04 <HAL_UART_MspInit+0x11c>)
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	4a37      	ldr	r2, [pc, #220]	; (8001c04 <HAL_UART_MspInit+0x11c>)
 8001b26:	f043 0304 	orr.w	r3, r3, #4
 8001b2a:	6193      	str	r3, [r2, #24]
 8001b2c:	4b35      	ldr	r3, [pc, #212]	; (8001c04 <HAL_UART_MspInit+0x11c>)
 8001b2e:	699b      	ldr	r3, [r3, #24]
 8001b30:	f003 0304 	and.w	r3, r3, #4
 8001b34:	613b      	str	r3, [r7, #16]
 8001b36:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3e:	2302      	movs	r3, #2
 8001b40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b42:	2303      	movs	r3, #3
 8001b44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b46:	f107 0318 	add.w	r3, r7, #24
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	482e      	ldr	r0, [pc, #184]	; (8001c08 <HAL_UART_MspInit+0x120>)
 8001b4e:	f001 faf3 	bl	8003138 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b60:	f107 0318 	add.w	r3, r7, #24
 8001b64:	4619      	mov	r1, r3
 8001b66:	4828      	ldr	r0, [pc, #160]	; (8001c08 <HAL_UART_MspInit+0x120>)
 8001b68:	f001 fae6 	bl	8003138 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	2103      	movs	r1, #3
 8001b70:	2025      	movs	r0, #37	; 0x25
 8001b72:	f001 f94f 	bl	8002e14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b76:	2025      	movs	r0, #37	; 0x25
 8001b78:	f001 f978 	bl	8002e6c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b7c:	e03c      	b.n	8001bf8 <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a22      	ldr	r2, [pc, #136]	; (8001c0c <HAL_UART_MspInit+0x124>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d137      	bne.n	8001bf8 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b88:	4b1e      	ldr	r3, [pc, #120]	; (8001c04 <HAL_UART_MspInit+0x11c>)
 8001b8a:	69db      	ldr	r3, [r3, #28]
 8001b8c:	4a1d      	ldr	r2, [pc, #116]	; (8001c04 <HAL_UART_MspInit+0x11c>)
 8001b8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b92:	61d3      	str	r3, [r2, #28]
 8001b94:	4b1b      	ldr	r3, [pc, #108]	; (8001c04 <HAL_UART_MspInit+0x11c>)
 8001b96:	69db      	ldr	r3, [r3, #28]
 8001b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9c:	60fb      	str	r3, [r7, #12]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ba0:	4b18      	ldr	r3, [pc, #96]	; (8001c04 <HAL_UART_MspInit+0x11c>)
 8001ba2:	699b      	ldr	r3, [r3, #24]
 8001ba4:	4a17      	ldr	r2, [pc, #92]	; (8001c04 <HAL_UART_MspInit+0x11c>)
 8001ba6:	f043 0304 	orr.w	r3, r3, #4
 8001baa:	6193      	str	r3, [r2, #24]
 8001bac:	4b15      	ldr	r3, [pc, #84]	; (8001c04 <HAL_UART_MspInit+0x11c>)
 8001bae:	699b      	ldr	r3, [r3, #24]
 8001bb0:	f003 0304 	and.w	r3, r3, #4
 8001bb4:	60bb      	str	r3, [r7, #8]
 8001bb6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001bb8:	2304      	movs	r3, #4
 8001bba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc4:	f107 0318 	add.w	r3, r7, #24
 8001bc8:	4619      	mov	r1, r3
 8001bca:	480f      	ldr	r0, [pc, #60]	; (8001c08 <HAL_UART_MspInit+0x120>)
 8001bcc:	f001 fab4 	bl	8003138 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001bd0:	2308      	movs	r3, #8
 8001bd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bdc:	f107 0318 	add.w	r3, r7, #24
 8001be0:	4619      	mov	r1, r3
 8001be2:	4809      	ldr	r0, [pc, #36]	; (8001c08 <HAL_UART_MspInit+0x120>)
 8001be4:	f001 faa8 	bl	8003138 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8001be8:	2200      	movs	r2, #0
 8001bea:	2102      	movs	r1, #2
 8001bec:	2026      	movs	r0, #38	; 0x26
 8001bee:	f001 f911 	bl	8002e14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001bf2:	2026      	movs	r0, #38	; 0x26
 8001bf4:	f001 f93a 	bl	8002e6c <HAL_NVIC_EnableIRQ>
}
 8001bf8:	bf00      	nop
 8001bfa:	3728      	adds	r7, #40	; 0x28
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	40013800 	.word	0x40013800
 8001c04:	40021000 	.word	0x40021000
 8001c08:	40010800 	.word	0x40010800
 8001c0c:	40004400 	.word	0x40004400

08001c10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  LOG_error("NMI_Handler() triggered");
 8001c14:	4902      	ldr	r1, [pc, #8]	; (8001c20 <NMI_Handler+0x10>)
 8001c16:	2003      	movs	r0, #3
 8001c18:	f007 fe94 	bl	8009944 <LOG_log>
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c1c:	e7fe      	b.n	8001c1c <NMI_Handler+0xc>
 8001c1e:	bf00      	nop
 8001c20:	0800b210 	.word	0x0800b210

08001c24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  LOG_error("HardFault_Handler() triggered");
 8001c28:	4902      	ldr	r1, [pc, #8]	; (8001c34 <HardFault_Handler+0x10>)
 8001c2a:	2003      	movs	r0, #3
 8001c2c:	f007 fe8a 	bl	8009944 <LOG_log>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c30:	e7fe      	b.n	8001c30 <HardFault_Handler+0xc>
 8001c32:	bf00      	nop
 8001c34:	0800b228 	.word	0x0800b228

08001c38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
  LOG_error("MemManage_Handler() triggered");
 8001c3c:	4902      	ldr	r1, [pc, #8]	; (8001c48 <MemManage_Handler+0x10>)
 8001c3e:	2003      	movs	r0, #3
 8001c40:	f007 fe80 	bl	8009944 <LOG_log>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c44:	e7fe      	b.n	8001c44 <MemManage_Handler+0xc>
 8001c46:	bf00      	nop
 8001c48:	0800b248 	.word	0x0800b248

08001c4c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
  LOG_error("BusFault_Handler() triggered");
 8001c50:	4902      	ldr	r1, [pc, #8]	; (8001c5c <BusFault_Handler+0x10>)
 8001c52:	2003      	movs	r0, #3
 8001c54:	f007 fe76 	bl	8009944 <LOG_log>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c58:	e7fe      	b.n	8001c58 <BusFault_Handler+0xc>
 8001c5a:	bf00      	nop
 8001c5c:	0800b268 	.word	0x0800b268

08001c60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
  LOG_error("UsageFault_Handler() triggered");
 8001c64:	4902      	ldr	r1, [pc, #8]	; (8001c70 <UsageFault_Handler+0x10>)
 8001c66:	2003      	movs	r0, #3
 8001c68:	f007 fe6c 	bl	8009944 <LOG_log>
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c6c:	e7fe      	b.n	8001c6c <UsageFault_Handler+0xc>
 8001c6e:	bf00      	nop
 8001c70:	0800b288 	.word	0x0800b288

08001c74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SVCall_IRQn 0 */
  LOG_error("SVC_Handler() triggered");
 8001c78:	4902      	ldr	r1, [pc, #8]	; (8001c84 <SVC_Handler+0x10>)
 8001c7a:	2003      	movs	r0, #3
 8001c7c:	f007 fe62 	bl	8009944 <LOG_log>
  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c80:	bf00      	nop
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	0800b2a8 	.word	0x0800b2a8

08001c88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */
  LOG_error("DebugMon_Handler() triggered");
 8001c8c:	4902      	ldr	r1, [pc, #8]	; (8001c98 <DebugMon_Handler+0x10>)
 8001c8e:	2003      	movs	r0, #3
 8001c90:	f007 fe58 	bl	8009944 <LOG_log>
  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c94:	bf00      	nop
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	0800b2c0 	.word	0x0800b2c0

08001c9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PendSV_IRQn 0 */
  LOG_error("PendSV_Handler() triggered");
 8001ca0:	4902      	ldr	r1, [pc, #8]	; (8001cac <PendSV_Handler+0x10>)
 8001ca2:	2003      	movs	r0, #3
 8001ca4:	f007 fe4e 	bl	8009944 <LOG_log>
  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ca8:	bf00      	nop
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	0800b2e0 	.word	0x0800b2e0

08001cb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cb4:	f000 f968 	bl	8001f88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cb8:	bf00      	nop
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001cc0:	4802      	ldr	r0, [pc, #8]	; (8001ccc <TIM1_UP_IRQHandler+0x10>)
 8001cc2:	f004 fa29 	bl	8006118 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001cc6:	bf00      	nop
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	200006c0 	.word	0x200006c0

08001cd0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001cd4:	4802      	ldr	r0, [pc, #8]	; (8001ce0 <TIM2_IRQHandler+0x10>)
 8001cd6:	f004 fa1f 	bl	8006118 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001cda:	bf00      	nop
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	20000774 	.word	0x20000774

08001ce4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001ce8:	4802      	ldr	r0, [pc, #8]	; (8001cf4 <TIM3_IRQHandler+0x10>)
 8001cea:	f004 fa15 	bl	8006118 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001cee:	bf00      	nop
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	200004a0 	.word	0x200004a0

08001cf8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001cfc:	4802      	ldr	r0, [pc, #8]	; (8001d08 <TIM4_IRQHandler+0x10>)
 8001cfe:	f004 fa0b 	bl	8006118 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001d02:	bf00      	nop
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	20000338 	.word	0x20000338

08001d0c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d10:	4802      	ldr	r0, [pc, #8]	; (8001d1c <USART1_IRQHandler+0x10>)
 8001d12:	f005 ff61 	bl	8007bd8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001d16:	bf00      	nop
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	20000584 	.word	0x20000584

08001d20 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d24:	4802      	ldr	r0, [pc, #8]	; (8001d30 <USART2_IRQHandler+0x10>)
 8001d26:	f005 ff57 	bl	8007bd8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d2a:	bf00      	nop
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	20000828 	.word	0x20000828

08001d34 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001d38:	4802      	ldr	r0, [pc, #8]	; (8001d44 <TIM5_IRQHandler+0x10>)
 8001d3a:	f004 f9ed 	bl	8006118 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001d3e:	bf00      	nop
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	200003ec 	.word	0x200003ec

08001d48 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b086      	sub	sp, #24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	60b9      	str	r1, [r7, #8]
 8001d52:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d54:	2300      	movs	r3, #0
 8001d56:	617b      	str	r3, [r7, #20]
 8001d58:	e00a      	b.n	8001d70 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d5a:	f3af 8000 	nop.w
 8001d5e:	4601      	mov	r1, r0
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	1c5a      	adds	r2, r3, #1
 8001d64:	60ba      	str	r2, [r7, #8]
 8001d66:	b2ca      	uxtb	r2, r1
 8001d68:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	617b      	str	r3, [r7, #20]
 8001d70:	697a      	ldr	r2, [r7, #20]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	dbf0      	blt.n	8001d5a <_read+0x12>
	}

return len;
 8001d78:	687b      	ldr	r3, [r7, #4]
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3718      	adds	r7, #24
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
	...

08001d84 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b086      	sub	sp, #24
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	60f8      	str	r0, [r7, #12]
 8001d8c:	60b9      	str	r1, [r7, #8]
 8001d8e:	607a      	str	r2, [r7, #4]
  if ((file != STDOUT_FILENO) && (file != STDERR_FILENO))
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d00a      	beq.n	8001dac <_write+0x28>
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d007      	beq.n	8001dac <_write+0x28>
  {
    errno = EBADF;
 8001d9c:	f008 f86a 	bl	8009e74 <__errno>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2209      	movs	r2, #9
 8001da4:	601a      	str	r2, [r3, #0]
    return -1;
 8001da6:	f04f 33ff 	mov.w	r3, #4294967295
 8001daa:	e00f      	b.n	8001dcc <_write+0x48>
  }

  HAL_StatusTypeDef status = HAL_UART_Transmit(&huart1, (uint8_t *)ptr, len, 1000);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	b29a      	uxth	r2, r3
 8001db0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001db4:	68b9      	ldr	r1, [r7, #8]
 8001db6:	4807      	ldr	r0, [pc, #28]	; (8001dd4 <_write+0x50>)
 8001db8:	f005 fe4c 	bl	8007a54 <HAL_UART_Transmit>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	75fb      	strb	r3, [r7, #23]
  return (status == HAL_OK ? len : 0);
 8001dc0:	7dfb      	ldrb	r3, [r7, #23]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d101      	bne.n	8001dca <_write+0x46>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	e000      	b.n	8001dcc <_write+0x48>
 8001dca:	2300      	movs	r3, #0

}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3718      	adds	r7, #24
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	20000584 	.word	0x20000584

08001dd8 <_close>:

int _close(int file)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
	return -1;
 8001de0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bc80      	pop	{r7}
 8001dec:	4770      	bx	lr

08001dee <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dee:	b480      	push	{r7}
 8001df0:	b083      	sub	sp, #12
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
 8001df6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001dfe:	605a      	str	r2, [r3, #4]
	return 0;
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bc80      	pop	{r7}
 8001e0a:	4770      	bx	lr

08001e0c <_isatty>:

int _isatty(int file)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
	return 1;
 8001e14:	2301      	movs	r3, #1
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bc80      	pop	{r7}
 8001e1e:	4770      	bx	lr

08001e20 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b085      	sub	sp, #20
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	60b9      	str	r1, [r7, #8]
 8001e2a:	607a      	str	r2, [r7, #4]
	return 0;
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3714      	adds	r7, #20
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bc80      	pop	{r7}
 8001e36:	4770      	bx	lr

08001e38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b086      	sub	sp, #24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e40:	4a14      	ldr	r2, [pc, #80]	; (8001e94 <_sbrk+0x5c>)
 8001e42:	4b15      	ldr	r3, [pc, #84]	; (8001e98 <_sbrk+0x60>)
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e4c:	4b13      	ldr	r3, [pc, #76]	; (8001e9c <_sbrk+0x64>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d102      	bne.n	8001e5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e54:	4b11      	ldr	r3, [pc, #68]	; (8001e9c <_sbrk+0x64>)
 8001e56:	4a12      	ldr	r2, [pc, #72]	; (8001ea0 <_sbrk+0x68>)
 8001e58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e5a:	4b10      	ldr	r3, [pc, #64]	; (8001e9c <_sbrk+0x64>)
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4413      	add	r3, r2
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d207      	bcs.n	8001e78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e68:	f008 f804 	bl	8009e74 <__errno>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	220c      	movs	r2, #12
 8001e70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e72:	f04f 33ff 	mov.w	r3, #4294967295
 8001e76:	e009      	b.n	8001e8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e78:	4b08      	ldr	r3, [pc, #32]	; (8001e9c <_sbrk+0x64>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e7e:	4b07      	ldr	r3, [pc, #28]	; (8001e9c <_sbrk+0x64>)
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4413      	add	r3, r2
 8001e86:	4a05      	ldr	r2, [pc, #20]	; (8001e9c <_sbrk+0x64>)
 8001e88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3718      	adds	r7, #24
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	2000c000 	.word	0x2000c000
 8001e98:	00000400 	.word	0x00000400
 8001e9c:	200000a4 	.word	0x200000a4
 8001ea0:	20000968 	.word	0x20000968

08001ea4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ea8:	bf00      	nop
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bc80      	pop	{r7}
 8001eae:	4770      	bx	lr

08001eb0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001eb0:	480c      	ldr	r0, [pc, #48]	; (8001ee4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001eb2:	490d      	ldr	r1, [pc, #52]	; (8001ee8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001eb4:	4a0d      	ldr	r2, [pc, #52]	; (8001eec <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001eb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001eb8:	e002      	b.n	8001ec0 <LoopCopyDataInit>

08001eba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ebc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ebe:	3304      	adds	r3, #4

08001ec0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ec0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ec2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ec4:	d3f9      	bcc.n	8001eba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ec6:	4a0a      	ldr	r2, [pc, #40]	; (8001ef0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ec8:	4c0a      	ldr	r4, [pc, #40]	; (8001ef4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001eca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ecc:	e001      	b.n	8001ed2 <LoopFillZerobss>

08001ece <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ece:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ed0:	3204      	adds	r2, #4

08001ed2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ed2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ed4:	d3fb      	bcc.n	8001ece <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001ed6:	f7ff ffe5 	bl	8001ea4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001eda:	f007 ffd1 	bl	8009e80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ede:	f7fe fdaf 	bl	8000a40 <main>
  bx lr
 8001ee2:	4770      	bx	lr
  ldr r0, =_sdata
 8001ee4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ee8:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001eec:	0800bacc 	.word	0x0800bacc
  ldr r2, =_sbss
 8001ef0:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001ef4:	20000964 	.word	0x20000964

08001ef8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ef8:	e7fe      	b.n	8001ef8 <ADC1_2_IRQHandler>
	...

08001efc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f00:	4b08      	ldr	r3, [pc, #32]	; (8001f24 <HAL_Init+0x28>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a07      	ldr	r2, [pc, #28]	; (8001f24 <HAL_Init+0x28>)
 8001f06:	f043 0310 	orr.w	r3, r3, #16
 8001f0a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f0c:	2003      	movs	r0, #3
 8001f0e:	f000 ff61 	bl	8002dd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f12:	2000      	movs	r0, #0
 8001f14:	f000 f808 	bl	8001f28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f18:	f7ff fbae 	bl	8001678 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	40022000 	.word	0x40022000

08001f28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f30:	4b12      	ldr	r3, [pc, #72]	; (8001f7c <HAL_InitTick+0x54>)
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	4b12      	ldr	r3, [pc, #72]	; (8001f80 <HAL_InitTick+0x58>)
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	4619      	mov	r1, r3
 8001f3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f46:	4618      	mov	r0, r3
 8001f48:	f000 ffa8 	bl	8002e9c <HAL_SYSTICK_Config>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e00e      	b.n	8001f74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2b0f      	cmp	r3, #15
 8001f5a:	d80a      	bhi.n	8001f72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	6879      	ldr	r1, [r7, #4]
 8001f60:	f04f 30ff 	mov.w	r0, #4294967295
 8001f64:	f000 ff56 	bl	8002e14 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f68:	4a06      	ldr	r2, [pc, #24]	; (8001f84 <HAL_InitTick+0x5c>)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	e000      	b.n	8001f74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3708      	adds	r7, #8
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	20000000 	.word	0x20000000
 8001f80:	20000008 	.word	0x20000008
 8001f84:	20000004 	.word	0x20000004

08001f88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f8c:	4b05      	ldr	r3, [pc, #20]	; (8001fa4 <HAL_IncTick+0x1c>)
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	461a      	mov	r2, r3
 8001f92:	4b05      	ldr	r3, [pc, #20]	; (8001fa8 <HAL_IncTick+0x20>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4413      	add	r3, r2
 8001f98:	4a03      	ldr	r2, [pc, #12]	; (8001fa8 <HAL_IncTick+0x20>)
 8001f9a:	6013      	str	r3, [r2, #0]
}
 8001f9c:	bf00      	nop
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bc80      	pop	{r7}
 8001fa2:	4770      	bx	lr
 8001fa4:	20000008 	.word	0x20000008
 8001fa8:	20000950 	.word	0x20000950

08001fac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  return uwTick;
 8001fb0:	4b02      	ldr	r3, [pc, #8]	; (8001fbc <HAL_GetTick+0x10>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bc80      	pop	{r7}
 8001fba:	4770      	bx	lr
 8001fbc:	20000950 	.word	0x20000950

08001fc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fc8:	f7ff fff0 	bl	8001fac <HAL_GetTick>
 8001fcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fd8:	d005      	beq.n	8001fe6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fda:	4b0a      	ldr	r3, [pc, #40]	; (8002004 <HAL_Delay+0x44>)
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	461a      	mov	r2, r3
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fe6:	bf00      	nop
 8001fe8:	f7ff ffe0 	bl	8001fac <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	68fa      	ldr	r2, [r7, #12]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d8f7      	bhi.n	8001fe8 <HAL_Delay+0x28>
  {
  }
}
 8001ff8:	bf00      	nop
 8001ffa:	bf00      	nop
 8001ffc:	3710      	adds	r7, #16
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	20000008 	.word	0x20000008

08002008 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b086      	sub	sp, #24
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002010:	2300      	movs	r3, #0
 8002012:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002014:	2300      	movs	r3, #0
 8002016:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002018:	2300      	movs	r3, #0
 800201a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800201c:	2300      	movs	r3, #0
 800201e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d101      	bne.n	800202a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e188      	b.n	800233c <HAL_ADC_Init+0x334>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a8c      	ldr	r2, [pc, #560]	; (8002260 <HAL_ADC_Init+0x258>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d00e      	beq.n	8002052 <HAL_ADC_Init+0x4a>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a8a      	ldr	r2, [pc, #552]	; (8002264 <HAL_ADC_Init+0x25c>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d009      	beq.n	8002052 <HAL_ADC_Init+0x4a>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a89      	ldr	r2, [pc, #548]	; (8002268 <HAL_ADC_Init+0x260>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d004      	beq.n	8002052 <HAL_ADC_Init+0x4a>
 8002048:	f240 11b3 	movw	r1, #435	; 0x1b3
 800204c:	4887      	ldr	r0, [pc, #540]	; (800226c <HAL_ADC_Init+0x264>)
 800204e:	f7ff fb01 	bl	8001654 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d009      	beq.n	800206e <HAL_ADC_Init+0x66>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002062:	d004      	beq.n	800206e <HAL_ADC_Init+0x66>
 8002064:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 8002068:	4880      	ldr	r0, [pc, #512]	; (800226c <HAL_ADC_Init+0x264>)
 800206a:	f7ff faf3 	bl	8001654 <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d009      	beq.n	800208a <HAL_ADC_Init+0x82>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800207e:	d004      	beq.n	800208a <HAL_ADC_Init+0x82>
 8002080:	f240 11b5 	movw	r1, #437	; 0x1b5
 8002084:	4879      	ldr	r0, [pc, #484]	; (800226c <HAL_ADC_Init+0x264>)
 8002086:	f7ff fae5 	bl	8001654 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	7b1b      	ldrb	r3, [r3, #12]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d008      	beq.n	80020a4 <HAL_ADC_Init+0x9c>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	7b1b      	ldrb	r3, [r3, #12]
 8002096:	2b01      	cmp	r3, #1
 8002098:	d004      	beq.n	80020a4 <HAL_ADC_Init+0x9c>
 800209a:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 800209e:	4873      	ldr	r0, [pc, #460]	; (800226c <HAL_ADC_Init+0x264>)
 80020a0:	f7ff fad8 	bl	8001654 <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	69db      	ldr	r3, [r3, #28]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d044      	beq.n	8002136 <HAL_ADC_Init+0x12e>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	69db      	ldr	r3, [r3, #28]
 80020b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80020b4:	d03f      	beq.n	8002136 <HAL_ADC_Init+0x12e>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	69db      	ldr	r3, [r3, #28]
 80020ba:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80020be:	d03a      	beq.n	8002136 <HAL_ADC_Init+0x12e>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	69db      	ldr	r3, [r3, #28]
 80020c4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80020c8:	d035      	beq.n	8002136 <HAL_ADC_Init+0x12e>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	69db      	ldr	r3, [r3, #28]
 80020ce:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 80020d2:	d030      	beq.n	8002136 <HAL_ADC_Init+0x12e>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	69db      	ldr	r3, [r3, #28]
 80020d8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80020dc:	d02b      	beq.n	8002136 <HAL_ADC_Init+0x12e>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	69db      	ldr	r3, [r3, #28]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d027      	beq.n	8002136 <HAL_ADC_Init+0x12e>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	69db      	ldr	r3, [r3, #28]
 80020ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80020ee:	d022      	beq.n	8002136 <HAL_ADC_Init+0x12e>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	69db      	ldr	r3, [r3, #28]
 80020f4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80020f8:	d01d      	beq.n	8002136 <HAL_ADC_Init+0x12e>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	69db      	ldr	r3, [r3, #28]
 80020fe:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 8002102:	d018      	beq.n	8002136 <HAL_ADC_Init+0x12e>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	69db      	ldr	r3, [r3, #28]
 8002108:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800210c:	d013      	beq.n	8002136 <HAL_ADC_Init+0x12e>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	69db      	ldr	r3, [r3, #28]
 8002112:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002116:	d00e      	beq.n	8002136 <HAL_ADC_Init+0x12e>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	69db      	ldr	r3, [r3, #28]
 800211c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002120:	d009      	beq.n	8002136 <HAL_ADC_Init+0x12e>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	69db      	ldr	r3, [r3, #28]
 8002126:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800212a:	d004      	beq.n	8002136 <HAL_ADC_Init+0x12e>
 800212c:	f240 11b7 	movw	r1, #439	; 0x1b7
 8002130:	484e      	ldr	r0, [pc, #312]	; (800226c <HAL_ADC_Init+0x264>)
 8002132:	f7ff fa8f 	bl	8001654 <assert_failed>
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d02a      	beq.n	8002194 <HAL_ADC_Init+0x18c>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	691b      	ldr	r3, [r3, #16]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d003      	beq.n	800214e <HAL_ADC_Init+0x146>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	691b      	ldr	r3, [r3, #16]
 800214a:	2b10      	cmp	r3, #16
 800214c:	d904      	bls.n	8002158 <HAL_ADC_Init+0x150>
 800214e:	f240 11bb 	movw	r1, #443	; 0x1bb
 8002152:	4846      	ldr	r0, [pc, #280]	; (800226c <HAL_ADC_Init+0x264>)
 8002154:	f7ff fa7e 	bl	8001654 <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	7d1b      	ldrb	r3, [r3, #20]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d008      	beq.n	8002172 <HAL_ADC_Init+0x16a>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	7d1b      	ldrb	r3, [r3, #20]
 8002164:	2b01      	cmp	r3, #1
 8002166:	d004      	beq.n	8002172 <HAL_ADC_Init+0x16a>
 8002168:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 800216c:	483f      	ldr	r0, [pc, #252]	; (800226c <HAL_ADC_Init+0x264>)
 800216e:	f7ff fa71 	bl	8001654 <assert_failed>
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	7d1b      	ldrb	r3, [r3, #20]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d00c      	beq.n	8002194 <HAL_ADC_Init+0x18c>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	699b      	ldr	r3, [r3, #24]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d003      	beq.n	800218a <HAL_ADC_Init+0x182>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	699b      	ldr	r3, [r3, #24]
 8002186:	2b08      	cmp	r3, #8
 8002188:	d904      	bls.n	8002194 <HAL_ADC_Init+0x18c>
 800218a:	f240 11bf 	movw	r1, #447	; 0x1bf
 800218e:	4837      	ldr	r0, [pc, #220]	; (800226c <HAL_ADC_Init+0x264>)
 8002190:	f7ff fa60 	bl	8001654 <assert_failed>
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002198:	2b00      	cmp	r3, #0
 800219a:	d109      	bne.n	80021b0 <HAL_ADC_Init+0x1a8>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f7ff fa96 	bl	80016dc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f000 fd01 	bl	8002bb8 <ADC_ConversionStop_Disable>
 80021b6:	4603      	mov	r3, r0
 80021b8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021be:	f003 0310 	and.w	r3, r3, #16
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	f040 80b1 	bne.w	800232a <HAL_ADC_Init+0x322>
 80021c8:	7dfb      	ldrb	r3, [r7, #23]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	f040 80ad 	bne.w	800232a <HAL_ADC_Init+0x322>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80021d8:	f023 0302 	bic.w	r3, r3, #2
 80021dc:	f043 0202 	orr.w	r2, r3, #2
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	491e      	ldr	r1, [pc, #120]	; (8002268 <HAL_ADC_Init+0x260>)
 80021ee:	428b      	cmp	r3, r1
 80021f0:	d10a      	bne.n	8002208 <HAL_ADC_Init+0x200>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	69db      	ldr	r3, [r3, #28]
 80021f6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80021fa:	d002      	beq.n	8002202 <HAL_ADC_Init+0x1fa>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	69db      	ldr	r3, [r3, #28]
 8002200:	e004      	b.n	800220c <HAL_ADC_Init+0x204>
 8002202:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002206:	e001      	b.n	800220c <HAL_ADC_Init+0x204>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800220c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	7b1b      	ldrb	r3, [r3, #12]
 8002212:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002214:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002216:	68ba      	ldr	r2, [r7, #8]
 8002218:	4313      	orrs	r3, r2
 800221a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002224:	d003      	beq.n	800222e <HAL_ADC_Init+0x226>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	2b01      	cmp	r3, #1
 800222c:	d102      	bne.n	8002234 <HAL_ADC_Init+0x22c>
 800222e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002232:	e000      	b.n	8002236 <HAL_ADC_Init+0x22e>
 8002234:	2300      	movs	r3, #0
 8002236:	693a      	ldr	r2, [r7, #16]
 8002238:	4313      	orrs	r3, r2
 800223a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	7d1b      	ldrb	r3, [r3, #20]
 8002240:	2b01      	cmp	r3, #1
 8002242:	d121      	bne.n	8002288 <HAL_ADC_Init+0x280>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	7b1b      	ldrb	r3, [r3, #12]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d111      	bne.n	8002270 <HAL_ADC_Init+0x268>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	699b      	ldr	r3, [r3, #24]
 8002250:	3b01      	subs	r3, #1
 8002252:	035a      	lsls	r2, r3, #13
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	4313      	orrs	r3, r2
 8002258:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800225c:	613b      	str	r3, [r7, #16]
 800225e:	e013      	b.n	8002288 <HAL_ADC_Init+0x280>
 8002260:	40012400 	.word	0x40012400
 8002264:	40012800 	.word	0x40012800
 8002268:	40013c00 	.word	0x40013c00
 800226c:	0800b2fc 	.word	0x0800b2fc
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002274:	f043 0220 	orr.w	r2, r3, #32
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002280:	f043 0201 	orr.w	r2, r3, #1
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	693a      	ldr	r2, [r7, #16]
 8002298:	430a      	orrs	r2, r1
 800229a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	689a      	ldr	r2, [r3, #8]
 80022a2:	4b28      	ldr	r3, [pc, #160]	; (8002344 <HAL_ADC_Init+0x33c>)
 80022a4:	4013      	ands	r3, r2
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	6812      	ldr	r2, [r2, #0]
 80022aa:	68b9      	ldr	r1, [r7, #8]
 80022ac:	430b      	orrs	r3, r1
 80022ae:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022b8:	d003      	beq.n	80022c2 <HAL_ADC_Init+0x2ba>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d104      	bne.n	80022cc <HAL_ADC_Init+0x2c4>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	691b      	ldr	r3, [r3, #16]
 80022c6:	3b01      	subs	r3, #1
 80022c8:	051b      	lsls	r3, r3, #20
 80022ca:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	68fa      	ldr	r2, [r7, #12]
 80022dc:	430a      	orrs	r2, r1
 80022de:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	689a      	ldr	r2, [r3, #8]
 80022e6:	4b18      	ldr	r3, [pc, #96]	; (8002348 <HAL_ADC_Init+0x340>)
 80022e8:	4013      	ands	r3, r2
 80022ea:	68ba      	ldr	r2, [r7, #8]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d10b      	bne.n	8002308 <HAL_ADC_Init+0x300>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022fa:	f023 0303 	bic.w	r3, r3, #3
 80022fe:	f043 0201 	orr.w	r2, r3, #1
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002306:	e018      	b.n	800233a <HAL_ADC_Init+0x332>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800230c:	f023 0312 	bic.w	r3, r3, #18
 8002310:	f043 0210 	orr.w	r2, r3, #16
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800231c:	f043 0201 	orr.w	r2, r3, #1
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002328:	e007      	b.n	800233a <HAL_ADC_Init+0x332>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800232e:	f043 0210 	orr.w	r2, r3, #16
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800233a:	7dfb      	ldrb	r3, [r7, #23]
}
 800233c:	4618      	mov	r0, r3
 800233e:	3718      	adds	r7, #24
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	ffe1f7fd 	.word	0xffe1f7fd
 8002348:	ff1f0efe 	.word	0xff1f0efe

0800234c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002354:	2300      	movs	r3, #0
 8002356:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a5a      	ldr	r2, [pc, #360]	; (80024c8 <HAL_ADC_Start+0x17c>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d00e      	beq.n	8002380 <HAL_ADC_Start+0x34>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a59      	ldr	r2, [pc, #356]	; (80024cc <HAL_ADC_Start+0x180>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d009      	beq.n	8002380 <HAL_ADC_Start+0x34>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a57      	ldr	r2, [pc, #348]	; (80024d0 <HAL_ADC_Start+0x184>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d004      	beq.n	8002380 <HAL_ADC_Start+0x34>
 8002376:	f240 411b 	movw	r1, #1051	; 0x41b
 800237a:	4856      	ldr	r0, [pc, #344]	; (80024d4 <HAL_ADC_Start+0x188>)
 800237c:	f7ff f96a 	bl	8001654 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002386:	2b01      	cmp	r3, #1
 8002388:	d101      	bne.n	800238e <HAL_ADC_Start+0x42>
 800238a:	2302      	movs	r3, #2
 800238c:	e098      	b.n	80024c0 <HAL_ADC_Start+0x174>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2201      	movs	r2, #1
 8002392:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f000 fbb4 	bl	8002b04 <ADC_Enable>
 800239c:	4603      	mov	r3, r0
 800239e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80023a0:	7bfb      	ldrb	r3, [r7, #15]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	f040 8087 	bne.w	80024b6 <HAL_ADC_Start+0x16a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023b0:	f023 0301 	bic.w	r3, r3, #1
 80023b4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a42      	ldr	r2, [pc, #264]	; (80024cc <HAL_ADC_Start+0x180>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d105      	bne.n	80023d2 <HAL_ADC_Start+0x86>
 80023c6:	4b40      	ldr	r3, [pc, #256]	; (80024c8 <HAL_ADC_Start+0x17c>)
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d115      	bne.n	80023fe <HAL_ADC_Start+0xb2>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d026      	beq.n	800243a <HAL_ADC_Start+0xee>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80023f4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80023fc:	e01d      	b.n	800243a <HAL_ADC_Start+0xee>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002402:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a2e      	ldr	r2, [pc, #184]	; (80024c8 <HAL_ADC_Start+0x17c>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d004      	beq.n	800241e <HAL_ADC_Start+0xd2>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a2c      	ldr	r2, [pc, #176]	; (80024cc <HAL_ADC_Start+0x180>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d10d      	bne.n	800243a <HAL_ADC_Start+0xee>
 800241e:	4b2a      	ldr	r3, [pc, #168]	; (80024c8 <HAL_ADC_Start+0x17c>)
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002426:	2b00      	cmp	r3, #0
 8002428:	d007      	beq.n	800243a <HAL_ADC_Start+0xee>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800242e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002432:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800243e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d006      	beq.n	8002454 <HAL_ADC_Start+0x108>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800244a:	f023 0206 	bic.w	r2, r3, #6
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	62da      	str	r2, [r3, #44]	; 0x2c
 8002452:	e002      	b.n	800245a <HAL_ADC_Start+0x10e>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f06f 0202 	mvn.w	r2, #2
 800246a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002476:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800247a:	d113      	bne.n	80024a4 <HAL_ADC_Start+0x158>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002480:	4a12      	ldr	r2, [pc, #72]	; (80024cc <HAL_ADC_Start+0x180>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d105      	bne.n	8002492 <HAL_ADC_Start+0x146>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002486:	4b10      	ldr	r3, [pc, #64]	; (80024c8 <HAL_ADC_Start+0x17c>)
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800248e:	2b00      	cmp	r3, #0
 8002490:	d108      	bne.n	80024a4 <HAL_ADC_Start+0x158>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	689a      	ldr	r2, [r3, #8]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80024a0:	609a      	str	r2, [r3, #8]
 80024a2:	e00c      	b.n	80024be <HAL_ADC_Start+0x172>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	689a      	ldr	r2, [r3, #8]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80024b2:	609a      	str	r2, [r3, #8]
 80024b4:	e003      	b.n	80024be <HAL_ADC_Start+0x172>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80024be:	7bfb      	ldrb	r3, [r7, #15]
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3710      	adds	r7, #16
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	40012400 	.word	0x40012400
 80024cc:	40012800 	.word	0x40012800
 80024d0:	40013c00 	.word	0x40013c00
 80024d4:	0800b2fc 	.word	0x0800b2fc

080024d8 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80024d8:	b590      	push	{r4, r7, lr}
 80024da:	b087      	sub	sp, #28
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80024e2:	2300      	movs	r3, #0
 80024e4:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80024e6:	2300      	movs	r3, #0
 80024e8:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80024ea:	2300      	movs	r3, #0
 80024ec:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a80      	ldr	r2, [pc, #512]	; (80026f4 <HAL_ADC_PollForConversion+0x21c>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d00e      	beq.n	8002516 <HAL_ADC_PollForConversion+0x3e>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a7e      	ldr	r2, [pc, #504]	; (80026f8 <HAL_ADC_PollForConversion+0x220>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d009      	beq.n	8002516 <HAL_ADC_PollForConversion+0x3e>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a7d      	ldr	r2, [pc, #500]	; (80026fc <HAL_ADC_PollForConversion+0x224>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d004      	beq.n	8002516 <HAL_ADC_PollForConversion+0x3e>
 800250c:	f240 41bd 	movw	r1, #1213	; 0x4bd
 8002510:	487b      	ldr	r0, [pc, #492]	; (8002700 <HAL_ADC_PollForConversion+0x228>)
 8002512:	f7ff f89f 	bl	8001654 <assert_failed>
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002516:	f7ff fd49 	bl	8001fac <HAL_GetTick>
 800251a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002526:	2b00      	cmp	r3, #0
 8002528:	d00b      	beq.n	8002542 <HAL_ADC_PollForConversion+0x6a>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800252e:	f043 0220 	orr.w	r2, r3, #32
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e0d3      	b.n	80026ea <HAL_ADC_PollForConversion+0x212>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800254c:	2b00      	cmp	r3, #0
 800254e:	d131      	bne.n	80025b4 <HAL_ADC_PollForConversion+0xdc>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002556:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800255a:	2b00      	cmp	r3, #0
 800255c:	d12a      	bne.n	80025b4 <HAL_ADC_PollForConversion+0xdc>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800255e:	e021      	b.n	80025a4 <HAL_ADC_PollForConversion+0xcc>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002566:	d01d      	beq.n	80025a4 <HAL_ADC_PollForConversion+0xcc>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d007      	beq.n	800257e <HAL_ADC_PollForConversion+0xa6>
 800256e:	f7ff fd1d 	bl	8001fac <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	683a      	ldr	r2, [r7, #0]
 800257a:	429a      	cmp	r2, r3
 800257c:	d212      	bcs.n	80025a4 <HAL_ADC_PollForConversion+0xcc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0302 	and.w	r3, r3, #2
 8002588:	2b00      	cmp	r3, #0
 800258a:	d10b      	bne.n	80025a4 <HAL_ADC_PollForConversion+0xcc>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002590:	f043 0204 	orr.w	r2, r3, #4
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e0a2      	b.n	80026ea <HAL_ADC_PollForConversion+0x212>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0302 	and.w	r3, r3, #2
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d0d6      	beq.n	8002560 <HAL_ADC_PollForConversion+0x88>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80025b2:	e070      	b.n	8002696 <HAL_ADC_PollForConversion+0x1be>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80025b4:	4b53      	ldr	r3, [pc, #332]	; (8002704 <HAL_ADC_PollForConversion+0x22c>)
 80025b6:	681c      	ldr	r4, [r3, #0]
 80025b8:	2002      	movs	r0, #2
 80025ba:	f001 ff7d 	bl	80044b8 <HAL_RCCEx_GetPeriphCLKFreq>
 80025be:	4603      	mov	r3, r0
 80025c0:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	6919      	ldr	r1, [r3, #16]
 80025ca:	4b4f      	ldr	r3, [pc, #316]	; (8002708 <HAL_ADC_PollForConversion+0x230>)
 80025cc:	400b      	ands	r3, r1
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d118      	bne.n	8002604 <HAL_ADC_PollForConversion+0x12c>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	68d9      	ldr	r1, [r3, #12]
 80025d8:	4b4c      	ldr	r3, [pc, #304]	; (800270c <HAL_ADC_PollForConversion+0x234>)
 80025da:	400b      	ands	r3, r1
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d111      	bne.n	8002604 <HAL_ADC_PollForConversion+0x12c>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	6919      	ldr	r1, [r3, #16]
 80025e6:	4b4a      	ldr	r3, [pc, #296]	; (8002710 <HAL_ADC_PollForConversion+0x238>)
 80025e8:	400b      	ands	r3, r1
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d108      	bne.n	8002600 <HAL_ADC_PollForConversion+0x128>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	68d9      	ldr	r1, [r3, #12]
 80025f4:	4b47      	ldr	r3, [pc, #284]	; (8002714 <HAL_ADC_PollForConversion+0x23c>)
 80025f6:	400b      	ands	r3, r1
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d101      	bne.n	8002600 <HAL_ADC_PollForConversion+0x128>
 80025fc:	2314      	movs	r3, #20
 80025fe:	e020      	b.n	8002642 <HAL_ADC_PollForConversion+0x16a>
 8002600:	2329      	movs	r3, #41	; 0x29
 8002602:	e01e      	b.n	8002642 <HAL_ADC_PollForConversion+0x16a>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	6919      	ldr	r1, [r3, #16]
 800260a:	4b41      	ldr	r3, [pc, #260]	; (8002710 <HAL_ADC_PollForConversion+0x238>)
 800260c:	400b      	ands	r3, r1
 800260e:	2b00      	cmp	r3, #0
 8002610:	d106      	bne.n	8002620 <HAL_ADC_PollForConversion+0x148>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	68d9      	ldr	r1, [r3, #12]
 8002618:	4b3e      	ldr	r3, [pc, #248]	; (8002714 <HAL_ADC_PollForConversion+0x23c>)
 800261a:	400b      	ands	r3, r1
 800261c:	2b00      	cmp	r3, #0
 800261e:	d00d      	beq.n	800263c <HAL_ADC_PollForConversion+0x164>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	6919      	ldr	r1, [r3, #16]
 8002626:	4b3c      	ldr	r3, [pc, #240]	; (8002718 <HAL_ADC_PollForConversion+0x240>)
 8002628:	400b      	ands	r3, r1
 800262a:	2b00      	cmp	r3, #0
 800262c:	d108      	bne.n	8002640 <HAL_ADC_PollForConversion+0x168>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	68d9      	ldr	r1, [r3, #12]
 8002634:	4b38      	ldr	r3, [pc, #224]	; (8002718 <HAL_ADC_PollForConversion+0x240>)
 8002636:	400b      	ands	r3, r1
 8002638:	2b00      	cmp	r3, #0
 800263a:	d101      	bne.n	8002640 <HAL_ADC_PollForConversion+0x168>
 800263c:	2354      	movs	r3, #84	; 0x54
 800263e:	e000      	b.n	8002642 <HAL_ADC_PollForConversion+0x16a>
 8002640:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002642:	fb02 f303 	mul.w	r3, r2, r3
 8002646:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002648:	e021      	b.n	800268e <HAL_ADC_PollForConversion+0x1b6>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002650:	d01a      	beq.n	8002688 <HAL_ADC_PollForConversion+0x1b0>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d007      	beq.n	8002668 <HAL_ADC_PollForConversion+0x190>
 8002658:	f7ff fca8 	bl	8001fac <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	683a      	ldr	r2, [r7, #0]
 8002664:	429a      	cmp	r2, r3
 8002666:	d20f      	bcs.n	8002688 <HAL_ADC_PollForConversion+0x1b0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	693a      	ldr	r2, [r7, #16]
 800266c:	429a      	cmp	r2, r3
 800266e:	d90b      	bls.n	8002688 <HAL_ADC_PollForConversion+0x1b0>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002674:	f043 0204 	orr.w	r2, r3, #4
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e030      	b.n	80026ea <HAL_ADC_PollForConversion+0x212>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	3301      	adds	r3, #1
 800268c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	693a      	ldr	r2, [r7, #16]
 8002692:	429a      	cmp	r2, r3
 8002694:	d8d9      	bhi.n	800264a <HAL_ADC_PollForConversion+0x172>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f06f 0212 	mvn.w	r2, #18
 800269e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80026b6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80026ba:	d115      	bne.n	80026e8 <HAL_ADC_PollForConversion+0x210>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d111      	bne.n	80026e8 <HAL_ADC_PollForConversion+0x210>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d105      	bne.n	80026e8 <HAL_ADC_PollForConversion+0x210>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e0:	f043 0201 	orr.w	r2, r3, #1
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80026e8:	2300      	movs	r3, #0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	371c      	adds	r7, #28
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd90      	pop	{r4, r7, pc}
 80026f2:	bf00      	nop
 80026f4:	40012400 	.word	0x40012400
 80026f8:	40012800 	.word	0x40012800
 80026fc:	40013c00 	.word	0x40013c00
 8002700:	0800b2fc 	.word	0x0800b2fc
 8002704:	20000000 	.word	0x20000000
 8002708:	24924924 	.word	0x24924924
 800270c:	00924924 	.word	0x00924924
 8002710:	12492492 	.word	0x12492492
 8002714:	00492492 	.word	0x00492492
 8002718:	00249249 	.word	0x00249249

0800271c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a0c      	ldr	r2, [pc, #48]	; (800275c <HAL_ADC_GetValue+0x40>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d00e      	beq.n	800274c <HAL_ADC_GetValue+0x30>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a0b      	ldr	r2, [pc, #44]	; (8002760 <HAL_ADC_GetValue+0x44>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d009      	beq.n	800274c <HAL_ADC_GetValue+0x30>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a09      	ldr	r2, [pc, #36]	; (8002764 <HAL_ADC_GetValue+0x48>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d004      	beq.n	800274c <HAL_ADC_GetValue+0x30>
 8002742:	f240 61ef 	movw	r1, #1775	; 0x6ef
 8002746:	4808      	ldr	r0, [pc, #32]	; (8002768 <HAL_ADC_GetValue+0x4c>)
 8002748:	f7fe ff84 	bl	8001654 <assert_failed>

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002752:	4618      	mov	r0, r3
 8002754:	3708      	adds	r7, #8
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	40012400 	.word	0x40012400
 8002760:	40012800 	.word	0x40012800
 8002764:	40013c00 	.word	0x40013c00
 8002768:	0800b2fc 	.word	0x0800b2fc

0800276c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002776:	2300      	movs	r3, #0
 8002778:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800277a:	2300      	movs	r3, #0
 800277c:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a8b      	ldr	r2, [pc, #556]	; (80029b0 <HAL_ADC_ConfigChannel+0x244>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d00e      	beq.n	80027a6 <HAL_ADC_ConfigChannel+0x3a>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a89      	ldr	r2, [pc, #548]	; (80029b4 <HAL_ADC_ConfigChannel+0x248>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d009      	beq.n	80027a6 <HAL_ADC_ConfigChannel+0x3a>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a88      	ldr	r2, [pc, #544]	; (80029b8 <HAL_ADC_ConfigChannel+0x24c>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d004      	beq.n	80027a6 <HAL_ADC_ConfigChannel+0x3a>
 800279c:	f240 71dd 	movw	r1, #2013	; 0x7dd
 80027a0:	4886      	ldr	r0, [pc, #536]	; (80029bc <HAL_ADC_ConfigChannel+0x250>)
 80027a2:	f7fe ff57 	bl	8001654 <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d048      	beq.n	8002840 <HAL_ADC_ConfigChannel+0xd4>
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d044      	beq.n	8002840 <HAL_ADC_ConfigChannel+0xd4>
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d040      	beq.n	8002840 <HAL_ADC_ConfigChannel+0xd4>
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	2b03      	cmp	r3, #3
 80027c4:	d03c      	beq.n	8002840 <HAL_ADC_ConfigChannel+0xd4>
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	2b04      	cmp	r3, #4
 80027cc:	d038      	beq.n	8002840 <HAL_ADC_ConfigChannel+0xd4>
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	2b05      	cmp	r3, #5
 80027d4:	d034      	beq.n	8002840 <HAL_ADC_ConfigChannel+0xd4>
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	2b06      	cmp	r3, #6
 80027dc:	d030      	beq.n	8002840 <HAL_ADC_ConfigChannel+0xd4>
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	2b07      	cmp	r3, #7
 80027e4:	d02c      	beq.n	8002840 <HAL_ADC_ConfigChannel+0xd4>
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	2b08      	cmp	r3, #8
 80027ec:	d028      	beq.n	8002840 <HAL_ADC_ConfigChannel+0xd4>
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	2b09      	cmp	r3, #9
 80027f4:	d024      	beq.n	8002840 <HAL_ADC_ConfigChannel+0xd4>
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2b0a      	cmp	r3, #10
 80027fc:	d020      	beq.n	8002840 <HAL_ADC_ConfigChannel+0xd4>
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2b0b      	cmp	r3, #11
 8002804:	d01c      	beq.n	8002840 <HAL_ADC_ConfigChannel+0xd4>
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2b0c      	cmp	r3, #12
 800280c:	d018      	beq.n	8002840 <HAL_ADC_ConfigChannel+0xd4>
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	2b0d      	cmp	r3, #13
 8002814:	d014      	beq.n	8002840 <HAL_ADC_ConfigChannel+0xd4>
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	2b0e      	cmp	r3, #14
 800281c:	d010      	beq.n	8002840 <HAL_ADC_ConfigChannel+0xd4>
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	2b0f      	cmp	r3, #15
 8002824:	d00c      	beq.n	8002840 <HAL_ADC_ConfigChannel+0xd4>
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	2b10      	cmp	r3, #16
 800282c:	d008      	beq.n	8002840 <HAL_ADC_ConfigChannel+0xd4>
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2b11      	cmp	r3, #17
 8002834:	d004      	beq.n	8002840 <HAL_ADC_ConfigChannel+0xd4>
 8002836:	f240 71de 	movw	r1, #2014	; 0x7de
 800283a:	4860      	ldr	r0, [pc, #384]	; (80029bc <HAL_ADC_ConfigChannel+0x250>)
 800283c:	f7fe ff0a 	bl	8001654 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	2b01      	cmp	r3, #1
 8002846:	d040      	beq.n	80028ca <HAL_ADC_ConfigChannel+0x15e>
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	2b02      	cmp	r3, #2
 800284e:	d03c      	beq.n	80028ca <HAL_ADC_ConfigChannel+0x15e>
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	2b03      	cmp	r3, #3
 8002856:	d038      	beq.n	80028ca <HAL_ADC_ConfigChannel+0x15e>
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	2b04      	cmp	r3, #4
 800285e:	d034      	beq.n	80028ca <HAL_ADC_ConfigChannel+0x15e>
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	2b05      	cmp	r3, #5
 8002866:	d030      	beq.n	80028ca <HAL_ADC_ConfigChannel+0x15e>
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	2b06      	cmp	r3, #6
 800286e:	d02c      	beq.n	80028ca <HAL_ADC_ConfigChannel+0x15e>
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	2b07      	cmp	r3, #7
 8002876:	d028      	beq.n	80028ca <HAL_ADC_ConfigChannel+0x15e>
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	2b08      	cmp	r3, #8
 800287e:	d024      	beq.n	80028ca <HAL_ADC_ConfigChannel+0x15e>
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	2b09      	cmp	r3, #9
 8002886:	d020      	beq.n	80028ca <HAL_ADC_ConfigChannel+0x15e>
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	2b0a      	cmp	r3, #10
 800288e:	d01c      	beq.n	80028ca <HAL_ADC_ConfigChannel+0x15e>
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	2b0b      	cmp	r3, #11
 8002896:	d018      	beq.n	80028ca <HAL_ADC_ConfigChannel+0x15e>
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	2b0c      	cmp	r3, #12
 800289e:	d014      	beq.n	80028ca <HAL_ADC_ConfigChannel+0x15e>
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	2b0d      	cmp	r3, #13
 80028a6:	d010      	beq.n	80028ca <HAL_ADC_ConfigChannel+0x15e>
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	2b0e      	cmp	r3, #14
 80028ae:	d00c      	beq.n	80028ca <HAL_ADC_ConfigChannel+0x15e>
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	2b0f      	cmp	r3, #15
 80028b6:	d008      	beq.n	80028ca <HAL_ADC_ConfigChannel+0x15e>
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	2b10      	cmp	r3, #16
 80028be:	d004      	beq.n	80028ca <HAL_ADC_ConfigChannel+0x15e>
 80028c0:	f240 71df 	movw	r1, #2015	; 0x7df
 80028c4:	483d      	ldr	r0, [pc, #244]	; (80029bc <HAL_ADC_ConfigChannel+0x250>)
 80028c6:	f7fe fec5 	bl	8001654 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d020      	beq.n	8002914 <HAL_ADC_ConfigChannel+0x1a8>
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d01c      	beq.n	8002914 <HAL_ADC_ConfigChannel+0x1a8>
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d018      	beq.n	8002914 <HAL_ADC_ConfigChannel+0x1a8>
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	2b03      	cmp	r3, #3
 80028e8:	d014      	beq.n	8002914 <HAL_ADC_ConfigChannel+0x1a8>
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	2b04      	cmp	r3, #4
 80028f0:	d010      	beq.n	8002914 <HAL_ADC_ConfigChannel+0x1a8>
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	2b05      	cmp	r3, #5
 80028f8:	d00c      	beq.n	8002914 <HAL_ADC_ConfigChannel+0x1a8>
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	2b06      	cmp	r3, #6
 8002900:	d008      	beq.n	8002914 <HAL_ADC_ConfigChannel+0x1a8>
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	2b07      	cmp	r3, #7
 8002908:	d004      	beq.n	8002914 <HAL_ADC_ConfigChannel+0x1a8>
 800290a:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 800290e:	482b      	ldr	r0, [pc, #172]	; (80029bc <HAL_ADC_ConfigChannel+0x250>)
 8002910:	f7fe fea0 	bl	8001654 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800291a:	2b01      	cmp	r3, #1
 800291c:	d101      	bne.n	8002922 <HAL_ADC_ConfigChannel+0x1b6>
 800291e:	2302      	movs	r3, #2
 8002920:	e0e5      	b.n	8002aee <HAL_ADC_ConfigChannel+0x382>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2201      	movs	r2, #1
 8002926:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	2b06      	cmp	r3, #6
 8002930:	d81c      	bhi.n	800296c <HAL_ADC_ConfigChannel+0x200>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	685a      	ldr	r2, [r3, #4]
 800293c:	4613      	mov	r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	4413      	add	r3, r2
 8002942:	3b05      	subs	r3, #5
 8002944:	221f      	movs	r2, #31
 8002946:	fa02 f303 	lsl.w	r3, r2, r3
 800294a:	43db      	mvns	r3, r3
 800294c:	4019      	ands	r1, r3
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	6818      	ldr	r0, [r3, #0]
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685a      	ldr	r2, [r3, #4]
 8002956:	4613      	mov	r3, r2
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	4413      	add	r3, r2
 800295c:	3b05      	subs	r3, #5
 800295e:	fa00 f203 	lsl.w	r2, r0, r3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	430a      	orrs	r2, r1
 8002968:	635a      	str	r2, [r3, #52]	; 0x34
 800296a:	e045      	b.n	80029f8 <HAL_ADC_ConfigChannel+0x28c>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	2b0c      	cmp	r3, #12
 8002972:	d825      	bhi.n	80029c0 <HAL_ADC_ConfigChannel+0x254>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	685a      	ldr	r2, [r3, #4]
 800297e:	4613      	mov	r3, r2
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	4413      	add	r3, r2
 8002984:	3b23      	subs	r3, #35	; 0x23
 8002986:	221f      	movs	r2, #31
 8002988:	fa02 f303 	lsl.w	r3, r2, r3
 800298c:	43db      	mvns	r3, r3
 800298e:	4019      	ands	r1, r3
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	6818      	ldr	r0, [r3, #0]
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685a      	ldr	r2, [r3, #4]
 8002998:	4613      	mov	r3, r2
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	4413      	add	r3, r2
 800299e:	3b23      	subs	r3, #35	; 0x23
 80029a0:	fa00 f203 	lsl.w	r2, r0, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	430a      	orrs	r2, r1
 80029aa:	631a      	str	r2, [r3, #48]	; 0x30
 80029ac:	e024      	b.n	80029f8 <HAL_ADC_ConfigChannel+0x28c>
 80029ae:	bf00      	nop
 80029b0:	40012400 	.word	0x40012400
 80029b4:	40012800 	.word	0x40012800
 80029b8:	40013c00 	.word	0x40013c00
 80029bc:	0800b2fc 	.word	0x0800b2fc
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	685a      	ldr	r2, [r3, #4]
 80029ca:	4613      	mov	r3, r2
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	4413      	add	r3, r2
 80029d0:	3b41      	subs	r3, #65	; 0x41
 80029d2:	221f      	movs	r2, #31
 80029d4:	fa02 f303 	lsl.w	r3, r2, r3
 80029d8:	43db      	mvns	r3, r3
 80029da:	4019      	ands	r1, r3
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	6818      	ldr	r0, [r3, #0]
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685a      	ldr	r2, [r3, #4]
 80029e4:	4613      	mov	r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	4413      	add	r3, r2
 80029ea:	3b41      	subs	r3, #65	; 0x41
 80029ec:	fa00 f203 	lsl.w	r2, r0, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	430a      	orrs	r2, r1
 80029f6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2b09      	cmp	r3, #9
 80029fe:	d91c      	bls.n	8002a3a <HAL_ADC_ConfigChannel+0x2ce>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	68d9      	ldr	r1, [r3, #12]
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	005b      	lsls	r3, r3, #1
 8002a0e:	4413      	add	r3, r2
 8002a10:	3b1e      	subs	r3, #30
 8002a12:	2207      	movs	r2, #7
 8002a14:	fa02 f303 	lsl.w	r3, r2, r3
 8002a18:	43db      	mvns	r3, r3
 8002a1a:	4019      	ands	r1, r3
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	6898      	ldr	r0, [r3, #8]
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	4613      	mov	r3, r2
 8002a26:	005b      	lsls	r3, r3, #1
 8002a28:	4413      	add	r3, r2
 8002a2a:	3b1e      	subs	r3, #30
 8002a2c:	fa00 f203 	lsl.w	r2, r0, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	430a      	orrs	r2, r1
 8002a36:	60da      	str	r2, [r3, #12]
 8002a38:	e019      	b.n	8002a6e <HAL_ADC_ConfigChannel+0x302>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	6919      	ldr	r1, [r3, #16]
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	4613      	mov	r3, r2
 8002a46:	005b      	lsls	r3, r3, #1
 8002a48:	4413      	add	r3, r2
 8002a4a:	2207      	movs	r2, #7
 8002a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a50:	43db      	mvns	r3, r3
 8002a52:	4019      	ands	r1, r3
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	6898      	ldr	r0, [r3, #8]
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	005b      	lsls	r3, r3, #1
 8002a60:	4413      	add	r3, r2
 8002a62:	fa00 f203 	lsl.w	r2, r0, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	430a      	orrs	r2, r1
 8002a6c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	2b10      	cmp	r3, #16
 8002a74:	d003      	beq.n	8002a7e <HAL_ADC_ConfigChannel+0x312>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002a7a:	2b11      	cmp	r3, #17
 8002a7c:	d132      	bne.n	8002ae4 <HAL_ADC_ConfigChannel+0x378>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a1d      	ldr	r2, [pc, #116]	; (8002af8 <HAL_ADC_ConfigChannel+0x38c>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d125      	bne.n	8002ad4 <HAL_ADC_ConfigChannel+0x368>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d126      	bne.n	8002ae4 <HAL_ADC_ConfigChannel+0x378>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	689a      	ldr	r2, [r3, #8]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002aa4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2b10      	cmp	r3, #16
 8002aac:	d11a      	bne.n	8002ae4 <HAL_ADC_ConfigChannel+0x378>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002aae:	4b13      	ldr	r3, [pc, #76]	; (8002afc <HAL_ADC_ConfigChannel+0x390>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a13      	ldr	r2, [pc, #76]	; (8002b00 <HAL_ADC_ConfigChannel+0x394>)
 8002ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab8:	0c9a      	lsrs	r2, r3, #18
 8002aba:	4613      	mov	r3, r2
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	4413      	add	r3, r2
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002ac4:	e002      	b.n	8002acc <HAL_ADC_ConfigChannel+0x360>
          {
            wait_loop_index--;
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	3b01      	subs	r3, #1
 8002aca:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d1f9      	bne.n	8002ac6 <HAL_ADC_ConfigChannel+0x35a>
 8002ad2:	e007      	b.n	8002ae4 <HAL_ADC_ConfigChannel+0x378>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad8:	f043 0220 	orr.w	r2, r3, #32
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3710      	adds	r7, #16
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	40012400 	.word	0x40012400
 8002afc:	20000000 	.word	0x20000000
 8002b00:	431bde83 	.word	0x431bde83

08002b04 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002b10:	2300      	movs	r3, #0
 8002b12:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d040      	beq.n	8002ba4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	689a      	ldr	r2, [r3, #8]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f042 0201 	orr.w	r2, r2, #1
 8002b30:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002b32:	4b1f      	ldr	r3, [pc, #124]	; (8002bb0 <ADC_Enable+0xac>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a1f      	ldr	r2, [pc, #124]	; (8002bb4 <ADC_Enable+0xb0>)
 8002b38:	fba2 2303 	umull	r2, r3, r2, r3
 8002b3c:	0c9b      	lsrs	r3, r3, #18
 8002b3e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002b40:	e002      	b.n	8002b48 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	3b01      	subs	r3, #1
 8002b46:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d1f9      	bne.n	8002b42 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002b4e:	f7ff fa2d 	bl	8001fac <HAL_GetTick>
 8002b52:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002b54:	e01f      	b.n	8002b96 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002b56:	f7ff fa29 	bl	8001fac <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d918      	bls.n	8002b96 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f003 0301 	and.w	r3, r3, #1
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d011      	beq.n	8002b96 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b76:	f043 0210 	orr.w	r2, r3, #16
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b82:	f043 0201 	orr.w	r2, r3, #1
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e007      	b.n	8002ba6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f003 0301 	and.w	r3, r3, #1
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d1d8      	bne.n	8002b56 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3710      	adds	r7, #16
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	20000000 	.word	0x20000000
 8002bb4:	431bde83 	.word	0x431bde83

08002bb8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f003 0301 	and.w	r3, r3, #1
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d12e      	bne.n	8002c30 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	689a      	ldr	r2, [r3, #8]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f022 0201 	bic.w	r2, r2, #1
 8002be0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002be2:	f7ff f9e3 	bl	8001fac <HAL_GetTick>
 8002be6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002be8:	e01b      	b.n	8002c22 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002bea:	f7ff f9df 	bl	8001fac <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d914      	bls.n	8002c22 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f003 0301 	and.w	r3, r3, #1
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d10d      	bne.n	8002c22 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c0a:	f043 0210 	orr.w	r2, r3, #16
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c16:	f043 0201 	orr.w	r2, r3, #1
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e007      	b.n	8002c32 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f003 0301 	and.w	r3, r3, #1
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d0dc      	beq.n	8002bea <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3710      	adds	r7, #16
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
	...

08002c3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b085      	sub	sp, #20
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f003 0307 	and.w	r3, r3, #7
 8002c4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c4c:	4b0c      	ldr	r3, [pc, #48]	; (8002c80 <__NVIC_SetPriorityGrouping+0x44>)
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c52:	68ba      	ldr	r2, [r7, #8]
 8002c54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c58:	4013      	ands	r3, r2
 8002c5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c6e:	4a04      	ldr	r2, [pc, #16]	; (8002c80 <__NVIC_SetPriorityGrouping+0x44>)
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	60d3      	str	r3, [r2, #12]
}
 8002c74:	bf00      	nop
 8002c76:	3714      	adds	r7, #20
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bc80      	pop	{r7}
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	e000ed00 	.word	0xe000ed00

08002c84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c88:	4b04      	ldr	r3, [pc, #16]	; (8002c9c <__NVIC_GetPriorityGrouping+0x18>)
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	0a1b      	lsrs	r3, r3, #8
 8002c8e:	f003 0307 	and.w	r3, r3, #7
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bc80      	pop	{r7}
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	e000ed00 	.word	0xe000ed00

08002ca0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	db0b      	blt.n	8002cca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cb2:	79fb      	ldrb	r3, [r7, #7]
 8002cb4:	f003 021f 	and.w	r2, r3, #31
 8002cb8:	4906      	ldr	r1, [pc, #24]	; (8002cd4 <__NVIC_EnableIRQ+0x34>)
 8002cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cbe:	095b      	lsrs	r3, r3, #5
 8002cc0:	2001      	movs	r0, #1
 8002cc2:	fa00 f202 	lsl.w	r2, r0, r2
 8002cc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002cca:	bf00      	nop
 8002ccc:	370c      	adds	r7, #12
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bc80      	pop	{r7}
 8002cd2:	4770      	bx	lr
 8002cd4:	e000e100 	.word	0xe000e100

08002cd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	4603      	mov	r3, r0
 8002ce0:	6039      	str	r1, [r7, #0]
 8002ce2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	db0a      	blt.n	8002d02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	b2da      	uxtb	r2, r3
 8002cf0:	490c      	ldr	r1, [pc, #48]	; (8002d24 <__NVIC_SetPriority+0x4c>)
 8002cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cf6:	0112      	lsls	r2, r2, #4
 8002cf8:	b2d2      	uxtb	r2, r2
 8002cfa:	440b      	add	r3, r1
 8002cfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d00:	e00a      	b.n	8002d18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	b2da      	uxtb	r2, r3
 8002d06:	4908      	ldr	r1, [pc, #32]	; (8002d28 <__NVIC_SetPriority+0x50>)
 8002d08:	79fb      	ldrb	r3, [r7, #7]
 8002d0a:	f003 030f 	and.w	r3, r3, #15
 8002d0e:	3b04      	subs	r3, #4
 8002d10:	0112      	lsls	r2, r2, #4
 8002d12:	b2d2      	uxtb	r2, r2
 8002d14:	440b      	add	r3, r1
 8002d16:	761a      	strb	r2, [r3, #24]
}
 8002d18:	bf00      	nop
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bc80      	pop	{r7}
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	e000e100 	.word	0xe000e100
 8002d28:	e000ed00 	.word	0xe000ed00

08002d2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b089      	sub	sp, #36	; 0x24
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	60b9      	str	r1, [r7, #8]
 8002d36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f003 0307 	and.w	r3, r3, #7
 8002d3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	f1c3 0307 	rsb	r3, r3, #7
 8002d46:	2b04      	cmp	r3, #4
 8002d48:	bf28      	it	cs
 8002d4a:	2304      	movcs	r3, #4
 8002d4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	3304      	adds	r3, #4
 8002d52:	2b06      	cmp	r3, #6
 8002d54:	d902      	bls.n	8002d5c <NVIC_EncodePriority+0x30>
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	3b03      	subs	r3, #3
 8002d5a:	e000      	b.n	8002d5e <NVIC_EncodePriority+0x32>
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d60:	f04f 32ff 	mov.w	r2, #4294967295
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6a:	43da      	mvns	r2, r3
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	401a      	ands	r2, r3
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d74:	f04f 31ff 	mov.w	r1, #4294967295
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d7e:	43d9      	mvns	r1, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d84:	4313      	orrs	r3, r2
         );
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3724      	adds	r7, #36	; 0x24
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bc80      	pop	{r7}
 8002d8e:	4770      	bx	lr

08002d90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002da0:	d301      	bcc.n	8002da6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002da2:	2301      	movs	r3, #1
 8002da4:	e00f      	b.n	8002dc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002da6:	4a0a      	ldr	r2, [pc, #40]	; (8002dd0 <SysTick_Config+0x40>)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	3b01      	subs	r3, #1
 8002dac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002dae:	210f      	movs	r1, #15
 8002db0:	f04f 30ff 	mov.w	r0, #4294967295
 8002db4:	f7ff ff90 	bl	8002cd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002db8:	4b05      	ldr	r3, [pc, #20]	; (8002dd0 <SysTick_Config+0x40>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dbe:	4b04      	ldr	r3, [pc, #16]	; (8002dd0 <SysTick_Config+0x40>)
 8002dc0:	2207      	movs	r2, #7
 8002dc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3708      	adds	r7, #8
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	e000e010 	.word	0xe000e010

08002dd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2b07      	cmp	r3, #7
 8002de0:	d00f      	beq.n	8002e02 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2b06      	cmp	r3, #6
 8002de6:	d00c      	beq.n	8002e02 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2b05      	cmp	r3, #5
 8002dec:	d009      	beq.n	8002e02 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2b04      	cmp	r3, #4
 8002df2:	d006      	beq.n	8002e02 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2b03      	cmp	r3, #3
 8002df8:	d003      	beq.n	8002e02 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002dfa:	2192      	movs	r1, #146	; 0x92
 8002dfc:	4804      	ldr	r0, [pc, #16]	; (8002e10 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8002dfe:	f7fe fc29 	bl	8001654 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f7ff ff1a 	bl	8002c3c <__NVIC_SetPriorityGrouping>
}
 8002e08:	bf00      	nop
 8002e0a:	3708      	adds	r7, #8
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	0800b334 	.word	0x0800b334

08002e14 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b086      	sub	sp, #24
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	60b9      	str	r1, [r7, #8]
 8002e1e:	607a      	str	r2, [r7, #4]
 8002e20:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e22:	2300      	movs	r3, #0
 8002e24:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2b0f      	cmp	r3, #15
 8002e2a:	d903      	bls.n	8002e34 <HAL_NVIC_SetPriority+0x20>
 8002e2c:	21aa      	movs	r1, #170	; 0xaa
 8002e2e:	480e      	ldr	r0, [pc, #56]	; (8002e68 <HAL_NVIC_SetPriority+0x54>)
 8002e30:	f7fe fc10 	bl	8001654 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	2b0f      	cmp	r3, #15
 8002e38:	d903      	bls.n	8002e42 <HAL_NVIC_SetPriority+0x2e>
 8002e3a:	21ab      	movs	r1, #171	; 0xab
 8002e3c:	480a      	ldr	r0, [pc, #40]	; (8002e68 <HAL_NVIC_SetPriority+0x54>)
 8002e3e:	f7fe fc09 	bl	8001654 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e42:	f7ff ff1f 	bl	8002c84 <__NVIC_GetPriorityGrouping>
 8002e46:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	68b9      	ldr	r1, [r7, #8]
 8002e4c:	6978      	ldr	r0, [r7, #20]
 8002e4e:	f7ff ff6d 	bl	8002d2c <NVIC_EncodePriority>
 8002e52:	4602      	mov	r2, r0
 8002e54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e58:	4611      	mov	r1, r2
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f7ff ff3c 	bl	8002cd8 <__NVIC_SetPriority>
}
 8002e60:	bf00      	nop
 8002e62:	3718      	adds	r7, #24
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	0800b334 	.word	0x0800b334

08002e6c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	4603      	mov	r3, r0
 8002e74:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	da03      	bge.n	8002e86 <HAL_NVIC_EnableIRQ+0x1a>
 8002e7e:	21be      	movs	r1, #190	; 0xbe
 8002e80:	4805      	ldr	r0, [pc, #20]	; (8002e98 <HAL_NVIC_EnableIRQ+0x2c>)
 8002e82:	f7fe fbe7 	bl	8001654 <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7ff ff08 	bl	8002ca0 <__NVIC_EnableIRQ>
}
 8002e90:	bf00      	nop
 8002e92:	3708      	adds	r7, #8
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	0800b334 	.word	0x0800b334

08002e9c <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f7ff ff73 	bl	8002d90 <SysTick_Config>
 8002eaa:	4603      	mov	r3, r0
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3708      	adds	r7, #8
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b085      	sub	sp, #20
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d008      	beq.n	8002edc <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2204      	movs	r2, #4
 8002ece:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e020      	b.n	8002f1e <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f022 020e 	bic.w	r2, r2, #14
 8002eea:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f022 0201 	bic.w	r2, r2, #1
 8002efa:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f04:	2101      	movs	r1, #1
 8002f06:	fa01 f202 	lsl.w	r2, r1, r2
 8002f0a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3714      	adds	r7, #20
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bc80      	pop	{r7}
 8002f26:	4770      	bx	lr

08002f28 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f30:	2300      	movs	r3, #0
 8002f32:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d005      	beq.n	8002f4a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2204      	movs	r2, #4
 8002f42:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	73fb      	strb	r3, [r7, #15]
 8002f48:	e0d6      	b.n	80030f8 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f022 020e 	bic.w	r2, r2, #14
 8002f58:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f022 0201 	bic.w	r2, r2, #1
 8002f68:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	461a      	mov	r2, r3
 8002f70:	4b64      	ldr	r3, [pc, #400]	; (8003104 <HAL_DMA_Abort_IT+0x1dc>)
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d958      	bls.n	8003028 <HAL_DMA_Abort_IT+0x100>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a63      	ldr	r2, [pc, #396]	; (8003108 <HAL_DMA_Abort_IT+0x1e0>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d04f      	beq.n	8003020 <HAL_DMA_Abort_IT+0xf8>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a61      	ldr	r2, [pc, #388]	; (800310c <HAL_DMA_Abort_IT+0x1e4>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d048      	beq.n	800301c <HAL_DMA_Abort_IT+0xf4>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a60      	ldr	r2, [pc, #384]	; (8003110 <HAL_DMA_Abort_IT+0x1e8>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d040      	beq.n	8003016 <HAL_DMA_Abort_IT+0xee>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a5e      	ldr	r2, [pc, #376]	; (8003114 <HAL_DMA_Abort_IT+0x1ec>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d038      	beq.n	8003010 <HAL_DMA_Abort_IT+0xe8>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a5d      	ldr	r2, [pc, #372]	; (8003118 <HAL_DMA_Abort_IT+0x1f0>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d030      	beq.n	800300a <HAL_DMA_Abort_IT+0xe2>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a5b      	ldr	r2, [pc, #364]	; (800311c <HAL_DMA_Abort_IT+0x1f4>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d028      	beq.n	8003004 <HAL_DMA_Abort_IT+0xdc>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a53      	ldr	r2, [pc, #332]	; (8003104 <HAL_DMA_Abort_IT+0x1dc>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d020      	beq.n	8002ffe <HAL_DMA_Abort_IT+0xd6>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a57      	ldr	r2, [pc, #348]	; (8003120 <HAL_DMA_Abort_IT+0x1f8>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d019      	beq.n	8002ffa <HAL_DMA_Abort_IT+0xd2>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a56      	ldr	r2, [pc, #344]	; (8003124 <HAL_DMA_Abort_IT+0x1fc>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d012      	beq.n	8002ff6 <HAL_DMA_Abort_IT+0xce>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a54      	ldr	r2, [pc, #336]	; (8003128 <HAL_DMA_Abort_IT+0x200>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d00a      	beq.n	8002ff0 <HAL_DMA_Abort_IT+0xc8>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a53      	ldr	r2, [pc, #332]	; (800312c <HAL_DMA_Abort_IT+0x204>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d102      	bne.n	8002fea <HAL_DMA_Abort_IT+0xc2>
 8002fe4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fe8:	e01b      	b.n	8003022 <HAL_DMA_Abort_IT+0xfa>
 8002fea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002fee:	e018      	b.n	8003022 <HAL_DMA_Abort_IT+0xfa>
 8002ff0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ff4:	e015      	b.n	8003022 <HAL_DMA_Abort_IT+0xfa>
 8002ff6:	2310      	movs	r3, #16
 8002ff8:	e013      	b.n	8003022 <HAL_DMA_Abort_IT+0xfa>
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e011      	b.n	8003022 <HAL_DMA_Abort_IT+0xfa>
 8002ffe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003002:	e00e      	b.n	8003022 <HAL_DMA_Abort_IT+0xfa>
 8003004:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003008:	e00b      	b.n	8003022 <HAL_DMA_Abort_IT+0xfa>
 800300a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800300e:	e008      	b.n	8003022 <HAL_DMA_Abort_IT+0xfa>
 8003010:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003014:	e005      	b.n	8003022 <HAL_DMA_Abort_IT+0xfa>
 8003016:	f44f 7380 	mov.w	r3, #256	; 0x100
 800301a:	e002      	b.n	8003022 <HAL_DMA_Abort_IT+0xfa>
 800301c:	2310      	movs	r3, #16
 800301e:	e000      	b.n	8003022 <HAL_DMA_Abort_IT+0xfa>
 8003020:	2301      	movs	r3, #1
 8003022:	4a43      	ldr	r2, [pc, #268]	; (8003130 <HAL_DMA_Abort_IT+0x208>)
 8003024:	6053      	str	r3, [r2, #4]
 8003026:	e057      	b.n	80030d8 <HAL_DMA_Abort_IT+0x1b0>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a36      	ldr	r2, [pc, #216]	; (8003108 <HAL_DMA_Abort_IT+0x1e0>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d04f      	beq.n	80030d2 <HAL_DMA_Abort_IT+0x1aa>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a35      	ldr	r2, [pc, #212]	; (800310c <HAL_DMA_Abort_IT+0x1e4>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d048      	beq.n	80030ce <HAL_DMA_Abort_IT+0x1a6>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a33      	ldr	r2, [pc, #204]	; (8003110 <HAL_DMA_Abort_IT+0x1e8>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d040      	beq.n	80030c8 <HAL_DMA_Abort_IT+0x1a0>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a32      	ldr	r2, [pc, #200]	; (8003114 <HAL_DMA_Abort_IT+0x1ec>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d038      	beq.n	80030c2 <HAL_DMA_Abort_IT+0x19a>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a30      	ldr	r2, [pc, #192]	; (8003118 <HAL_DMA_Abort_IT+0x1f0>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d030      	beq.n	80030bc <HAL_DMA_Abort_IT+0x194>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a2f      	ldr	r2, [pc, #188]	; (800311c <HAL_DMA_Abort_IT+0x1f4>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d028      	beq.n	80030b6 <HAL_DMA_Abort_IT+0x18e>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a26      	ldr	r2, [pc, #152]	; (8003104 <HAL_DMA_Abort_IT+0x1dc>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d020      	beq.n	80030b0 <HAL_DMA_Abort_IT+0x188>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a2b      	ldr	r2, [pc, #172]	; (8003120 <HAL_DMA_Abort_IT+0x1f8>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d019      	beq.n	80030ac <HAL_DMA_Abort_IT+0x184>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a29      	ldr	r2, [pc, #164]	; (8003124 <HAL_DMA_Abort_IT+0x1fc>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d012      	beq.n	80030a8 <HAL_DMA_Abort_IT+0x180>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a28      	ldr	r2, [pc, #160]	; (8003128 <HAL_DMA_Abort_IT+0x200>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d00a      	beq.n	80030a2 <HAL_DMA_Abort_IT+0x17a>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a26      	ldr	r2, [pc, #152]	; (800312c <HAL_DMA_Abort_IT+0x204>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d102      	bne.n	800309c <HAL_DMA_Abort_IT+0x174>
 8003096:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800309a:	e01b      	b.n	80030d4 <HAL_DMA_Abort_IT+0x1ac>
 800309c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030a0:	e018      	b.n	80030d4 <HAL_DMA_Abort_IT+0x1ac>
 80030a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030a6:	e015      	b.n	80030d4 <HAL_DMA_Abort_IT+0x1ac>
 80030a8:	2310      	movs	r3, #16
 80030aa:	e013      	b.n	80030d4 <HAL_DMA_Abort_IT+0x1ac>
 80030ac:	2301      	movs	r3, #1
 80030ae:	e011      	b.n	80030d4 <HAL_DMA_Abort_IT+0x1ac>
 80030b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030b4:	e00e      	b.n	80030d4 <HAL_DMA_Abort_IT+0x1ac>
 80030b6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80030ba:	e00b      	b.n	80030d4 <HAL_DMA_Abort_IT+0x1ac>
 80030bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030c0:	e008      	b.n	80030d4 <HAL_DMA_Abort_IT+0x1ac>
 80030c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030c6:	e005      	b.n	80030d4 <HAL_DMA_Abort_IT+0x1ac>
 80030c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030cc:	e002      	b.n	80030d4 <HAL_DMA_Abort_IT+0x1ac>
 80030ce:	2310      	movs	r3, #16
 80030d0:	e000      	b.n	80030d4 <HAL_DMA_Abort_IT+0x1ac>
 80030d2:	2301      	movs	r3, #1
 80030d4:	4a17      	ldr	r2, [pc, #92]	; (8003134 <HAL_DMA_Abort_IT+0x20c>)
 80030d6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d003      	beq.n	80030f8 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	4798      	blx	r3
    } 
  }
  return status;
 80030f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3710      	adds	r7, #16
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	40020080 	.word	0x40020080
 8003108:	40020008 	.word	0x40020008
 800310c:	4002001c 	.word	0x4002001c
 8003110:	40020030 	.word	0x40020030
 8003114:	40020044 	.word	0x40020044
 8003118:	40020058 	.word	0x40020058
 800311c:	4002006c 	.word	0x4002006c
 8003120:	40020408 	.word	0x40020408
 8003124:	4002041c 	.word	0x4002041c
 8003128:	40020430 	.word	0x40020430
 800312c:	40020444 	.word	0x40020444
 8003130:	40020400 	.word	0x40020400
 8003134:	40020000 	.word	0x40020000

08003138 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b08a      	sub	sp, #40	; 0x28
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003142:	2300      	movs	r3, #0
 8003144:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003146:	2300      	movs	r3, #0
 8003148:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4aa9      	ldr	r2, [pc, #676]	; (80033f4 <HAL_GPIO_Init+0x2bc>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d01b      	beq.n	800318a <HAL_GPIO_Init+0x52>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4aa8      	ldr	r2, [pc, #672]	; (80033f8 <HAL_GPIO_Init+0x2c0>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d017      	beq.n	800318a <HAL_GPIO_Init+0x52>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4aa7      	ldr	r2, [pc, #668]	; (80033fc <HAL_GPIO_Init+0x2c4>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d013      	beq.n	800318a <HAL_GPIO_Init+0x52>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4aa6      	ldr	r2, [pc, #664]	; (8003400 <HAL_GPIO_Init+0x2c8>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d00f      	beq.n	800318a <HAL_GPIO_Init+0x52>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4aa5      	ldr	r2, [pc, #660]	; (8003404 <HAL_GPIO_Init+0x2cc>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d00b      	beq.n	800318a <HAL_GPIO_Init+0x52>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4aa4      	ldr	r2, [pc, #656]	; (8003408 <HAL_GPIO_Init+0x2d0>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d007      	beq.n	800318a <HAL_GPIO_Init+0x52>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4aa3      	ldr	r2, [pc, #652]	; (800340c <HAL_GPIO_Init+0x2d4>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d003      	beq.n	800318a <HAL_GPIO_Init+0x52>
 8003182:	21bd      	movs	r1, #189	; 0xbd
 8003184:	48a2      	ldr	r0, [pc, #648]	; (8003410 <HAL_GPIO_Init+0x2d8>)
 8003186:	f7fe fa65 	bl	8001654 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	b29b      	uxth	r3, r3
 8003190:	2b00      	cmp	r3, #0
 8003192:	d005      	beq.n	80031a0 <HAL_GPIO_Init+0x68>
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	0c1b      	lsrs	r3, r3, #16
 800319a:	041b      	lsls	r3, r3, #16
 800319c:	2b00      	cmp	r3, #0
 800319e:	d003      	beq.n	80031a8 <HAL_GPIO_Init+0x70>
 80031a0:	21be      	movs	r1, #190	; 0xbe
 80031a2:	489b      	ldr	r0, [pc, #620]	; (8003410 <HAL_GPIO_Init+0x2d8>)
 80031a4:	f7fe fa56 	bl	8001654 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	f000 8235 	beq.w	800361c <HAL_GPIO_Init+0x4e4>
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	f000 8230 	beq.w	800361c <HAL_GPIO_Init+0x4e4>
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	2b11      	cmp	r3, #17
 80031c2:	f000 822b 	beq.w	800361c <HAL_GPIO_Init+0x4e4>
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	f000 8226 	beq.w	800361c <HAL_GPIO_Init+0x4e4>
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	2b12      	cmp	r3, #18
 80031d6:	f000 8221 	beq.w	800361c <HAL_GPIO_Init+0x4e4>
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	4a8d      	ldr	r2, [pc, #564]	; (8003414 <HAL_GPIO_Init+0x2dc>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	f000 821b 	beq.w	800361c <HAL_GPIO_Init+0x4e4>
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	4a8b      	ldr	r2, [pc, #556]	; (8003418 <HAL_GPIO_Init+0x2e0>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	f000 8215 	beq.w	800361c <HAL_GPIO_Init+0x4e4>
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	4a89      	ldr	r2, [pc, #548]	; (800341c <HAL_GPIO_Init+0x2e4>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	f000 820f 	beq.w	800361c <HAL_GPIO_Init+0x4e4>
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	4a87      	ldr	r2, [pc, #540]	; (8003420 <HAL_GPIO_Init+0x2e8>)
 8003204:	4293      	cmp	r3, r2
 8003206:	f000 8209 	beq.w	800361c <HAL_GPIO_Init+0x4e4>
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	4a85      	ldr	r2, [pc, #532]	; (8003424 <HAL_GPIO_Init+0x2ec>)
 8003210:	4293      	cmp	r3, r2
 8003212:	f000 8203 	beq.w	800361c <HAL_GPIO_Init+0x4e4>
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	4a83      	ldr	r2, [pc, #524]	; (8003428 <HAL_GPIO_Init+0x2f0>)
 800321c:	4293      	cmp	r3, r2
 800321e:	f000 81fd 	beq.w	800361c <HAL_GPIO_Init+0x4e4>
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	2b03      	cmp	r3, #3
 8003228:	f000 81f8 	beq.w	800361c <HAL_GPIO_Init+0x4e4>
 800322c:	21bf      	movs	r1, #191	; 0xbf
 800322e:	4878      	ldr	r0, [pc, #480]	; (8003410 <HAL_GPIO_Init+0x2d8>)
 8003230:	f7fe fa10 	bl	8001654 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003234:	e1f2      	b.n	800361c <HAL_GPIO_Init+0x4e4>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003236:	2201      	movs	r2, #1
 8003238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323a:	fa02 f303 	lsl.w	r3, r2, r3
 800323e:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	69fa      	ldr	r2, [r7, #28]
 8003246:	4013      	ands	r3, r2
 8003248:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800324a:	69ba      	ldr	r2, [r7, #24]
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	429a      	cmp	r2, r3
 8003250:	f040 81e1 	bne.w	8003616 <HAL_GPIO_Init+0x4de>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	4a67      	ldr	r2, [pc, #412]	; (80033f4 <HAL_GPIO_Init+0x2bc>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d01b      	beq.n	8003294 <HAL_GPIO_Init+0x15c>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	4a66      	ldr	r2, [pc, #408]	; (80033f8 <HAL_GPIO_Init+0x2c0>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d017      	beq.n	8003294 <HAL_GPIO_Init+0x15c>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	4a65      	ldr	r2, [pc, #404]	; (80033fc <HAL_GPIO_Init+0x2c4>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d013      	beq.n	8003294 <HAL_GPIO_Init+0x15c>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	4a64      	ldr	r2, [pc, #400]	; (8003400 <HAL_GPIO_Init+0x2c8>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d00f      	beq.n	8003294 <HAL_GPIO_Init+0x15c>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	4a63      	ldr	r2, [pc, #396]	; (8003404 <HAL_GPIO_Init+0x2cc>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d00b      	beq.n	8003294 <HAL_GPIO_Init+0x15c>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	4a62      	ldr	r2, [pc, #392]	; (8003408 <HAL_GPIO_Init+0x2d0>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d007      	beq.n	8003294 <HAL_GPIO_Init+0x15c>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	4a61      	ldr	r2, [pc, #388]	; (800340c <HAL_GPIO_Init+0x2d4>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d003      	beq.n	8003294 <HAL_GPIO_Init+0x15c>
 800328c:	21cd      	movs	r1, #205	; 0xcd
 800328e:	4860      	ldr	r0, [pc, #384]	; (8003410 <HAL_GPIO_Init+0x2d8>)
 8003290:	f7fe f9e0 	bl	8001654 <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	4a63      	ldr	r2, [pc, #396]	; (8003428 <HAL_GPIO_Init+0x2f0>)
 800329a:	4293      	cmp	r3, r2
 800329c:	f000 80c6 	beq.w	800342c <HAL_GPIO_Init+0x2f4>
 80032a0:	4a61      	ldr	r2, [pc, #388]	; (8003428 <HAL_GPIO_Init+0x2f0>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	f200 80ec 	bhi.w	8003480 <HAL_GPIO_Init+0x348>
 80032a8:	4a5c      	ldr	r2, [pc, #368]	; (800341c <HAL_GPIO_Init+0x2e4>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	f000 80be 	beq.w	800342c <HAL_GPIO_Init+0x2f4>
 80032b0:	4a5a      	ldr	r2, [pc, #360]	; (800341c <HAL_GPIO_Init+0x2e4>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	f200 80e4 	bhi.w	8003480 <HAL_GPIO_Init+0x348>
 80032b8:	4a5a      	ldr	r2, [pc, #360]	; (8003424 <HAL_GPIO_Init+0x2ec>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	f000 80b6 	beq.w	800342c <HAL_GPIO_Init+0x2f4>
 80032c0:	4a58      	ldr	r2, [pc, #352]	; (8003424 <HAL_GPIO_Init+0x2ec>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	f200 80dc 	bhi.w	8003480 <HAL_GPIO_Init+0x348>
 80032c8:	4a53      	ldr	r2, [pc, #332]	; (8003418 <HAL_GPIO_Init+0x2e0>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	f000 80ae 	beq.w	800342c <HAL_GPIO_Init+0x2f4>
 80032d0:	4a51      	ldr	r2, [pc, #324]	; (8003418 <HAL_GPIO_Init+0x2e0>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	f200 80d4 	bhi.w	8003480 <HAL_GPIO_Init+0x348>
 80032d8:	4a51      	ldr	r2, [pc, #324]	; (8003420 <HAL_GPIO_Init+0x2e8>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	f000 80a6 	beq.w	800342c <HAL_GPIO_Init+0x2f4>
 80032e0:	4a4f      	ldr	r2, [pc, #316]	; (8003420 <HAL_GPIO_Init+0x2e8>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	f200 80cc 	bhi.w	8003480 <HAL_GPIO_Init+0x348>
 80032e8:	2b12      	cmp	r3, #18
 80032ea:	d82b      	bhi.n	8003344 <HAL_GPIO_Init+0x20c>
 80032ec:	2b12      	cmp	r3, #18
 80032ee:	f200 80c7 	bhi.w	8003480 <HAL_GPIO_Init+0x348>
 80032f2:	a201      	add	r2, pc, #4	; (adr r2, 80032f8 <HAL_GPIO_Init+0x1c0>)
 80032f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032f8:	0800342d 	.word	0x0800342d
 80032fc:	0800334d 	.word	0x0800334d
 8003300:	0800339f 	.word	0x0800339f
 8003304:	0800347b 	.word	0x0800347b
 8003308:	08003481 	.word	0x08003481
 800330c:	08003481 	.word	0x08003481
 8003310:	08003481 	.word	0x08003481
 8003314:	08003481 	.word	0x08003481
 8003318:	08003481 	.word	0x08003481
 800331c:	08003481 	.word	0x08003481
 8003320:	08003481 	.word	0x08003481
 8003324:	08003481 	.word	0x08003481
 8003328:	08003481 	.word	0x08003481
 800332c:	08003481 	.word	0x08003481
 8003330:	08003481 	.word	0x08003481
 8003334:	08003481 	.word	0x08003481
 8003338:	08003481 	.word	0x08003481
 800333c:	08003375 	.word	0x08003375
 8003340:	080033c9 	.word	0x080033c9
 8003344:	4a33      	ldr	r2, [pc, #204]	; (8003414 <HAL_GPIO_Init+0x2dc>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d070      	beq.n	800342c <HAL_GPIO_Init+0x2f4>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800334a:	e099      	b.n	8003480 <HAL_GPIO_Init+0x348>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	2b02      	cmp	r3, #2
 8003352:	d00b      	beq.n	800336c <HAL_GPIO_Init+0x234>
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	2b01      	cmp	r3, #1
 800335a:	d007      	beq.n	800336c <HAL_GPIO_Init+0x234>
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	2b03      	cmp	r3, #3
 8003362:	d003      	beq.n	800336c <HAL_GPIO_Init+0x234>
 8003364:	21d5      	movs	r1, #213	; 0xd5
 8003366:	482a      	ldr	r0, [pc, #168]	; (8003410 <HAL_GPIO_Init+0x2d8>)
 8003368:	f7fe f974 	bl	8001654 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	623b      	str	r3, [r7, #32]
          break;
 8003372:	e086      	b.n	8003482 <HAL_GPIO_Init+0x34a>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	2b02      	cmp	r3, #2
 800337a:	d00b      	beq.n	8003394 <HAL_GPIO_Init+0x25c>
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	2b01      	cmp	r3, #1
 8003382:	d007      	beq.n	8003394 <HAL_GPIO_Init+0x25c>
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	2b03      	cmp	r3, #3
 800338a:	d003      	beq.n	8003394 <HAL_GPIO_Init+0x25c>
 800338c:	21dc      	movs	r1, #220	; 0xdc
 800338e:	4820      	ldr	r0, [pc, #128]	; (8003410 <HAL_GPIO_Init+0x2d8>)
 8003390:	f7fe f960 	bl	8001654 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	3304      	adds	r3, #4
 800339a:	623b      	str	r3, [r7, #32]
          break;
 800339c:	e071      	b.n	8003482 <HAL_GPIO_Init+0x34a>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d00b      	beq.n	80033be <HAL_GPIO_Init+0x286>
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d007      	beq.n	80033be <HAL_GPIO_Init+0x286>
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	2b03      	cmp	r3, #3
 80033b4:	d003      	beq.n	80033be <HAL_GPIO_Init+0x286>
 80033b6:	21e3      	movs	r1, #227	; 0xe3
 80033b8:	4815      	ldr	r0, [pc, #84]	; (8003410 <HAL_GPIO_Init+0x2d8>)
 80033ba:	f7fe f94b 	bl	8001654 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	3308      	adds	r3, #8
 80033c4:	623b      	str	r3, [r7, #32]
          break;
 80033c6:	e05c      	b.n	8003482 <HAL_GPIO_Init+0x34a>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d00b      	beq.n	80033e8 <HAL_GPIO_Init+0x2b0>
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d007      	beq.n	80033e8 <HAL_GPIO_Init+0x2b0>
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	2b03      	cmp	r3, #3
 80033de:	d003      	beq.n	80033e8 <HAL_GPIO_Init+0x2b0>
 80033e0:	21ea      	movs	r1, #234	; 0xea
 80033e2:	480b      	ldr	r0, [pc, #44]	; (8003410 <HAL_GPIO_Init+0x2d8>)
 80033e4:	f7fe f936 	bl	8001654 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	330c      	adds	r3, #12
 80033ee:	623b      	str	r3, [r7, #32]
          break;
 80033f0:	e047      	b.n	8003482 <HAL_GPIO_Init+0x34a>
 80033f2:	bf00      	nop
 80033f4:	40010800 	.word	0x40010800
 80033f8:	40010c00 	.word	0x40010c00
 80033fc:	40011000 	.word	0x40011000
 8003400:	40011400 	.word	0x40011400
 8003404:	40011800 	.word	0x40011800
 8003408:	40011c00 	.word	0x40011c00
 800340c:	40012000 	.word	0x40012000
 8003410:	0800b370 	.word	0x0800b370
 8003414:	10110000 	.word	0x10110000
 8003418:	10210000 	.word	0x10210000
 800341c:	10310000 	.word	0x10310000
 8003420:	10120000 	.word	0x10120000
 8003424:	10220000 	.word	0x10220000
 8003428:	10320000 	.word	0x10320000
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d00b      	beq.n	800344c <HAL_GPIO_Init+0x314>
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	2b01      	cmp	r3, #1
 800343a:	d007      	beq.n	800344c <HAL_GPIO_Init+0x314>
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	2b02      	cmp	r3, #2
 8003442:	d003      	beq.n	800344c <HAL_GPIO_Init+0x314>
 8003444:	21f7      	movs	r1, #247	; 0xf7
 8003446:	487c      	ldr	r0, [pc, #496]	; (8003638 <HAL_GPIO_Init+0x500>)
 8003448:	f7fe f904 	bl	8001654 <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d102      	bne.n	800345a <HAL_GPIO_Init+0x322>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003454:	2304      	movs	r3, #4
 8003456:	623b      	str	r3, [r7, #32]
          break;
 8003458:	e013      	b.n	8003482 <HAL_GPIO_Init+0x34a>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	2b01      	cmp	r3, #1
 8003460:	d105      	bne.n	800346e <HAL_GPIO_Init+0x336>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003462:	2308      	movs	r3, #8
 8003464:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	69fa      	ldr	r2, [r7, #28]
 800346a:	611a      	str	r2, [r3, #16]
          break;
 800346c:	e009      	b.n	8003482 <HAL_GPIO_Init+0x34a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800346e:	2308      	movs	r3, #8
 8003470:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	69fa      	ldr	r2, [r7, #28]
 8003476:	615a      	str	r2, [r3, #20]
          break;
 8003478:	e003      	b.n	8003482 <HAL_GPIO_Init+0x34a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800347a:	2300      	movs	r3, #0
 800347c:	623b      	str	r3, [r7, #32]
          break;
 800347e:	e000      	b.n	8003482 <HAL_GPIO_Init+0x34a>
          break;
 8003480:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	2bff      	cmp	r3, #255	; 0xff
 8003486:	d801      	bhi.n	800348c <HAL_GPIO_Init+0x354>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	e001      	b.n	8003490 <HAL_GPIO_Init+0x358>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	3304      	adds	r3, #4
 8003490:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003492:	69bb      	ldr	r3, [r7, #24]
 8003494:	2bff      	cmp	r3, #255	; 0xff
 8003496:	d802      	bhi.n	800349e <HAL_GPIO_Init+0x366>
 8003498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	e002      	b.n	80034a4 <HAL_GPIO_Init+0x36c>
 800349e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a0:	3b08      	subs	r3, #8
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	210f      	movs	r1, #15
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	fa01 f303 	lsl.w	r3, r1, r3
 80034b2:	43db      	mvns	r3, r3
 80034b4:	401a      	ands	r2, r3
 80034b6:	6a39      	ldr	r1, [r7, #32]
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	fa01 f303 	lsl.w	r3, r1, r3
 80034be:	431a      	orrs	r2, r3
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	f000 80a2 	beq.w	8003616 <HAL_GPIO_Init+0x4de>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80034d2:	4b5a      	ldr	r3, [pc, #360]	; (800363c <HAL_GPIO_Init+0x504>)
 80034d4:	699b      	ldr	r3, [r3, #24]
 80034d6:	4a59      	ldr	r2, [pc, #356]	; (800363c <HAL_GPIO_Init+0x504>)
 80034d8:	f043 0301 	orr.w	r3, r3, #1
 80034dc:	6193      	str	r3, [r2, #24]
 80034de:	4b57      	ldr	r3, [pc, #348]	; (800363c <HAL_GPIO_Init+0x504>)
 80034e0:	699b      	ldr	r3, [r3, #24]
 80034e2:	f003 0301 	and.w	r3, r3, #1
 80034e6:	60bb      	str	r3, [r7, #8]
 80034e8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80034ea:	4a55      	ldr	r2, [pc, #340]	; (8003640 <HAL_GPIO_Init+0x508>)
 80034ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ee:	089b      	lsrs	r3, r3, #2
 80034f0:	3302      	adds	r3, #2
 80034f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034f6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80034f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fa:	f003 0303 	and.w	r3, r3, #3
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	220f      	movs	r2, #15
 8003502:	fa02 f303 	lsl.w	r3, r2, r3
 8003506:	43db      	mvns	r3, r3
 8003508:	68fa      	ldr	r2, [r7, #12]
 800350a:	4013      	ands	r3, r2
 800350c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4a4c      	ldr	r2, [pc, #304]	; (8003644 <HAL_GPIO_Init+0x50c>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d01f      	beq.n	8003556 <HAL_GPIO_Init+0x41e>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a4b      	ldr	r2, [pc, #300]	; (8003648 <HAL_GPIO_Init+0x510>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d019      	beq.n	8003552 <HAL_GPIO_Init+0x41a>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a4a      	ldr	r2, [pc, #296]	; (800364c <HAL_GPIO_Init+0x514>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d013      	beq.n	800354e <HAL_GPIO_Init+0x416>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a49      	ldr	r2, [pc, #292]	; (8003650 <HAL_GPIO_Init+0x518>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d00d      	beq.n	800354a <HAL_GPIO_Init+0x412>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a48      	ldr	r2, [pc, #288]	; (8003654 <HAL_GPIO_Init+0x51c>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d007      	beq.n	8003546 <HAL_GPIO_Init+0x40e>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a47      	ldr	r2, [pc, #284]	; (8003658 <HAL_GPIO_Init+0x520>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d101      	bne.n	8003542 <HAL_GPIO_Init+0x40a>
 800353e:	2305      	movs	r3, #5
 8003540:	e00a      	b.n	8003558 <HAL_GPIO_Init+0x420>
 8003542:	2306      	movs	r3, #6
 8003544:	e008      	b.n	8003558 <HAL_GPIO_Init+0x420>
 8003546:	2304      	movs	r3, #4
 8003548:	e006      	b.n	8003558 <HAL_GPIO_Init+0x420>
 800354a:	2303      	movs	r3, #3
 800354c:	e004      	b.n	8003558 <HAL_GPIO_Init+0x420>
 800354e:	2302      	movs	r3, #2
 8003550:	e002      	b.n	8003558 <HAL_GPIO_Init+0x420>
 8003552:	2301      	movs	r3, #1
 8003554:	e000      	b.n	8003558 <HAL_GPIO_Init+0x420>
 8003556:	2300      	movs	r3, #0
 8003558:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800355a:	f002 0203 	and.w	r2, r2, #3
 800355e:	0092      	lsls	r2, r2, #2
 8003560:	4093      	lsls	r3, r2
 8003562:	68fa      	ldr	r2, [r7, #12]
 8003564:	4313      	orrs	r3, r2
 8003566:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003568:	4935      	ldr	r1, [pc, #212]	; (8003640 <HAL_GPIO_Init+0x508>)
 800356a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356c:	089b      	lsrs	r3, r3, #2
 800356e:	3302      	adds	r3, #2
 8003570:	68fa      	ldr	r2, [r7, #12]
 8003572:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d006      	beq.n	8003590 <HAL_GPIO_Init+0x458>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003582:	4b36      	ldr	r3, [pc, #216]	; (800365c <HAL_GPIO_Init+0x524>)
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	4935      	ldr	r1, [pc, #212]	; (800365c <HAL_GPIO_Init+0x524>)
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	4313      	orrs	r3, r2
 800358c:	600b      	str	r3, [r1, #0]
 800358e:	e006      	b.n	800359e <HAL_GPIO_Init+0x466>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003590:	4b32      	ldr	r3, [pc, #200]	; (800365c <HAL_GPIO_Init+0x524>)
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	43db      	mvns	r3, r3
 8003598:	4930      	ldr	r1, [pc, #192]	; (800365c <HAL_GPIO_Init+0x524>)
 800359a:	4013      	ands	r3, r2
 800359c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d006      	beq.n	80035b8 <HAL_GPIO_Init+0x480>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80035aa:	4b2c      	ldr	r3, [pc, #176]	; (800365c <HAL_GPIO_Init+0x524>)
 80035ac:	685a      	ldr	r2, [r3, #4]
 80035ae:	492b      	ldr	r1, [pc, #172]	; (800365c <HAL_GPIO_Init+0x524>)
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	604b      	str	r3, [r1, #4]
 80035b6:	e006      	b.n	80035c6 <HAL_GPIO_Init+0x48e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80035b8:	4b28      	ldr	r3, [pc, #160]	; (800365c <HAL_GPIO_Init+0x524>)
 80035ba:	685a      	ldr	r2, [r3, #4]
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	43db      	mvns	r3, r3
 80035c0:	4926      	ldr	r1, [pc, #152]	; (800365c <HAL_GPIO_Init+0x524>)
 80035c2:	4013      	ands	r3, r2
 80035c4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d006      	beq.n	80035e0 <HAL_GPIO_Init+0x4a8>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80035d2:	4b22      	ldr	r3, [pc, #136]	; (800365c <HAL_GPIO_Init+0x524>)
 80035d4:	689a      	ldr	r2, [r3, #8]
 80035d6:	4921      	ldr	r1, [pc, #132]	; (800365c <HAL_GPIO_Init+0x524>)
 80035d8:	69bb      	ldr	r3, [r7, #24]
 80035da:	4313      	orrs	r3, r2
 80035dc:	608b      	str	r3, [r1, #8]
 80035de:	e006      	b.n	80035ee <HAL_GPIO_Init+0x4b6>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80035e0:	4b1e      	ldr	r3, [pc, #120]	; (800365c <HAL_GPIO_Init+0x524>)
 80035e2:	689a      	ldr	r2, [r3, #8]
 80035e4:	69bb      	ldr	r3, [r7, #24]
 80035e6:	43db      	mvns	r3, r3
 80035e8:	491c      	ldr	r1, [pc, #112]	; (800365c <HAL_GPIO_Init+0x524>)
 80035ea:	4013      	ands	r3, r2
 80035ec:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d006      	beq.n	8003608 <HAL_GPIO_Init+0x4d0>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80035fa:	4b18      	ldr	r3, [pc, #96]	; (800365c <HAL_GPIO_Init+0x524>)
 80035fc:	68da      	ldr	r2, [r3, #12]
 80035fe:	4917      	ldr	r1, [pc, #92]	; (800365c <HAL_GPIO_Init+0x524>)
 8003600:	69bb      	ldr	r3, [r7, #24]
 8003602:	4313      	orrs	r3, r2
 8003604:	60cb      	str	r3, [r1, #12]
 8003606:	e006      	b.n	8003616 <HAL_GPIO_Init+0x4de>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003608:	4b14      	ldr	r3, [pc, #80]	; (800365c <HAL_GPIO_Init+0x524>)
 800360a:	68da      	ldr	r2, [r3, #12]
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	43db      	mvns	r3, r3
 8003610:	4912      	ldr	r1, [pc, #72]	; (800365c <HAL_GPIO_Init+0x524>)
 8003612:	4013      	ands	r3, r2
 8003614:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003618:	3301      	adds	r3, #1
 800361a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003622:	fa22 f303 	lsr.w	r3, r2, r3
 8003626:	2b00      	cmp	r3, #0
 8003628:	f47f ae05 	bne.w	8003236 <HAL_GPIO_Init+0xfe>
  }
}
 800362c:	bf00      	nop
 800362e:	bf00      	nop
 8003630:	3728      	adds	r7, #40	; 0x28
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	0800b370 	.word	0x0800b370
 800363c:	40021000 	.word	0x40021000
 8003640:	40010000 	.word	0x40010000
 8003644:	40010800 	.word	0x40010800
 8003648:	40010c00 	.word	0x40010c00
 800364c:	40011000 	.word	0x40011000
 8003650:	40011400 	.word	0x40011400
 8003654:	40011800 	.word	0x40011800
 8003658:	40011c00 	.word	0x40011c00
 800365c:	40010400 	.word	0x40010400

08003660 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	460b      	mov	r3, r1
 800366a:	807b      	strh	r3, [r7, #2]
 800366c:	4613      	mov	r3, r2
 800366e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003670:	887b      	ldrh	r3, [r7, #2]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d004      	beq.n	8003680 <HAL_GPIO_WritePin+0x20>
 8003676:	887b      	ldrh	r3, [r7, #2]
 8003678:	0c1b      	lsrs	r3, r3, #16
 800367a:	041b      	lsls	r3, r3, #16
 800367c:	2b00      	cmp	r3, #0
 800367e:	d004      	beq.n	800368a <HAL_GPIO_WritePin+0x2a>
 8003680:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8003684:	480e      	ldr	r0, [pc, #56]	; (80036c0 <HAL_GPIO_WritePin+0x60>)
 8003686:	f7fd ffe5 	bl	8001654 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800368a:	787b      	ldrb	r3, [r7, #1]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d007      	beq.n	80036a0 <HAL_GPIO_WritePin+0x40>
 8003690:	787b      	ldrb	r3, [r7, #1]
 8003692:	2b01      	cmp	r3, #1
 8003694:	d004      	beq.n	80036a0 <HAL_GPIO_WritePin+0x40>
 8003696:	f240 11d5 	movw	r1, #469	; 0x1d5
 800369a:	4809      	ldr	r0, [pc, #36]	; (80036c0 <HAL_GPIO_WritePin+0x60>)
 800369c:	f7fd ffda 	bl	8001654 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 80036a0:	787b      	ldrb	r3, [r7, #1]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d003      	beq.n	80036ae <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036a6:	887a      	ldrh	r2, [r7, #2]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80036ac:	e003      	b.n	80036b6 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80036ae:	887b      	ldrh	r3, [r7, #2]
 80036b0:	041a      	lsls	r2, r3, #16
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	611a      	str	r2, [r3, #16]
}
 80036b6:	bf00      	nop
 80036b8:	3708      	adds	r7, #8
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	0800b370 	.word	0x0800b370

080036c4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	460b      	mov	r3, r1
 80036ce:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80036d0:	887b      	ldrh	r3, [r7, #2]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d004      	beq.n	80036e0 <HAL_GPIO_TogglePin+0x1c>
 80036d6:	887b      	ldrh	r3, [r7, #2]
 80036d8:	0c1b      	lsrs	r3, r3, #16
 80036da:	041b      	lsls	r3, r3, #16
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d004      	beq.n	80036ea <HAL_GPIO_TogglePin+0x26>
 80036e0:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 80036e4:	480a      	ldr	r0, [pc, #40]	; (8003710 <HAL_GPIO_TogglePin+0x4c>)
 80036e6:	f7fd ffb5 	bl	8001654 <assert_failed>

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80036f0:	887a      	ldrh	r2, [r7, #2]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	4013      	ands	r3, r2
 80036f6:	041a      	lsls	r2, r3, #16
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	43d9      	mvns	r1, r3
 80036fc:	887b      	ldrh	r3, [r7, #2]
 80036fe:	400b      	ands	r3, r1
 8003700:	431a      	orrs	r2, r3
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	611a      	str	r2, [r3, #16]
}
 8003706:	bf00      	nop
 8003708:	3710      	adds	r7, #16
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	0800b370 	.word	0x0800b370

08003714 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003714:	b480      	push	{r7}
 8003716:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8003718:	4b03      	ldr	r3, [pc, #12]	; (8003728 <HAL_PWR_EnableBkUpAccess+0x14>)
 800371a:	2201      	movs	r2, #1
 800371c:	601a      	str	r2, [r3, #0]
}
 800371e:	bf00      	nop
 8003720:	46bd      	mov	sp, r7
 8003722:	bc80      	pop	{r7}
 8003724:	4770      	bx	lr
 8003726:	bf00      	nop
 8003728:	420e0020 	.word	0x420e0020

0800372c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b086      	sub	sp, #24
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d101      	bne.n	800373e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e35c      	b.n	8003df8 <HAL_RCC_OscConfig+0x6cc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d01c      	beq.n	8003780 <HAL_RCC_OscConfig+0x54>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0301 	and.w	r3, r3, #1
 800374e:	2b00      	cmp	r3, #0
 8003750:	d116      	bne.n	8003780 <HAL_RCC_OscConfig+0x54>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0302 	and.w	r3, r3, #2
 800375a:	2b00      	cmp	r3, #0
 800375c:	d110      	bne.n	8003780 <HAL_RCC_OscConfig+0x54>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0308 	and.w	r3, r3, #8
 8003766:	2b00      	cmp	r3, #0
 8003768:	d10a      	bne.n	8003780 <HAL_RCC_OscConfig+0x54>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0304 	and.w	r3, r3, #4
 8003772:	2b00      	cmp	r3, #0
 8003774:	d104      	bne.n	8003780 <HAL_RCC_OscConfig+0x54>
 8003776:	f240 1167 	movw	r1, #359	; 0x167
 800377a:	48a5      	ldr	r0, [pc, #660]	; (8003a10 <HAL_RCC_OscConfig+0x2e4>)
 800377c:	f7fd ff6a 	bl	8001654 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0301 	and.w	r3, r3, #1
 8003788:	2b00      	cmp	r3, #0
 800378a:	f000 809a 	beq.w	80038c2 <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d00e      	beq.n	80037b4 <HAL_RCC_OscConfig+0x88>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800379e:	d009      	beq.n	80037b4 <HAL_RCC_OscConfig+0x88>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037a8:	d004      	beq.n	80037b4 <HAL_RCC_OscConfig+0x88>
 80037aa:	f240 116d 	movw	r1, #365	; 0x16d
 80037ae:	4898      	ldr	r0, [pc, #608]	; (8003a10 <HAL_RCC_OscConfig+0x2e4>)
 80037b0:	f7fd ff50 	bl	8001654 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80037b4:	4b97      	ldr	r3, [pc, #604]	; (8003a14 <HAL_RCC_OscConfig+0x2e8>)
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f003 030c 	and.w	r3, r3, #12
 80037bc:	2b04      	cmp	r3, #4
 80037be:	d00c      	beq.n	80037da <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80037c0:	4b94      	ldr	r3, [pc, #592]	; (8003a14 <HAL_RCC_OscConfig+0x2e8>)
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f003 030c 	and.w	r3, r3, #12
 80037c8:	2b08      	cmp	r3, #8
 80037ca:	d112      	bne.n	80037f2 <HAL_RCC_OscConfig+0xc6>
 80037cc:	4b91      	ldr	r3, [pc, #580]	; (8003a14 <HAL_RCC_OscConfig+0x2e8>)
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037d8:	d10b      	bne.n	80037f2 <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037da:	4b8e      	ldr	r3, [pc, #568]	; (8003a14 <HAL_RCC_OscConfig+0x2e8>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d06c      	beq.n	80038c0 <HAL_RCC_OscConfig+0x194>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d168      	bne.n	80038c0 <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e302      	b.n	8003df8 <HAL_RCC_OscConfig+0x6cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037fa:	d106      	bne.n	800380a <HAL_RCC_OscConfig+0xde>
 80037fc:	4b85      	ldr	r3, [pc, #532]	; (8003a14 <HAL_RCC_OscConfig+0x2e8>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a84      	ldr	r2, [pc, #528]	; (8003a14 <HAL_RCC_OscConfig+0x2e8>)
 8003802:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003806:	6013      	str	r3, [r2, #0]
 8003808:	e02e      	b.n	8003868 <HAL_RCC_OscConfig+0x13c>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d10c      	bne.n	800382c <HAL_RCC_OscConfig+0x100>
 8003812:	4b80      	ldr	r3, [pc, #512]	; (8003a14 <HAL_RCC_OscConfig+0x2e8>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a7f      	ldr	r2, [pc, #508]	; (8003a14 <HAL_RCC_OscConfig+0x2e8>)
 8003818:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800381c:	6013      	str	r3, [r2, #0]
 800381e:	4b7d      	ldr	r3, [pc, #500]	; (8003a14 <HAL_RCC_OscConfig+0x2e8>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a7c      	ldr	r2, [pc, #496]	; (8003a14 <HAL_RCC_OscConfig+0x2e8>)
 8003824:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003828:	6013      	str	r3, [r2, #0]
 800382a:	e01d      	b.n	8003868 <HAL_RCC_OscConfig+0x13c>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003834:	d10c      	bne.n	8003850 <HAL_RCC_OscConfig+0x124>
 8003836:	4b77      	ldr	r3, [pc, #476]	; (8003a14 <HAL_RCC_OscConfig+0x2e8>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a76      	ldr	r2, [pc, #472]	; (8003a14 <HAL_RCC_OscConfig+0x2e8>)
 800383c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003840:	6013      	str	r3, [r2, #0]
 8003842:	4b74      	ldr	r3, [pc, #464]	; (8003a14 <HAL_RCC_OscConfig+0x2e8>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a73      	ldr	r2, [pc, #460]	; (8003a14 <HAL_RCC_OscConfig+0x2e8>)
 8003848:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800384c:	6013      	str	r3, [r2, #0]
 800384e:	e00b      	b.n	8003868 <HAL_RCC_OscConfig+0x13c>
 8003850:	4b70      	ldr	r3, [pc, #448]	; (8003a14 <HAL_RCC_OscConfig+0x2e8>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a6f      	ldr	r2, [pc, #444]	; (8003a14 <HAL_RCC_OscConfig+0x2e8>)
 8003856:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800385a:	6013      	str	r3, [r2, #0]
 800385c:	4b6d      	ldr	r3, [pc, #436]	; (8003a14 <HAL_RCC_OscConfig+0x2e8>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a6c      	ldr	r2, [pc, #432]	; (8003a14 <HAL_RCC_OscConfig+0x2e8>)
 8003862:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003866:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d013      	beq.n	8003898 <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003870:	f7fe fb9c 	bl	8001fac <HAL_GetTick>
 8003874:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003876:	e008      	b.n	800388a <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003878:	f7fe fb98 	bl	8001fac <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	2b64      	cmp	r3, #100	; 0x64
 8003884:	d901      	bls.n	800388a <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e2b6      	b.n	8003df8 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800388a:	4b62      	ldr	r3, [pc, #392]	; (8003a14 <HAL_RCC_OscConfig+0x2e8>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d0f0      	beq.n	8003878 <HAL_RCC_OscConfig+0x14c>
 8003896:	e014      	b.n	80038c2 <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003898:	f7fe fb88 	bl	8001fac <HAL_GetTick>
 800389c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800389e:	e008      	b.n	80038b2 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038a0:	f7fe fb84 	bl	8001fac <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	2b64      	cmp	r3, #100	; 0x64
 80038ac:	d901      	bls.n	80038b2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e2a2      	b.n	8003df8 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038b2:	4b58      	ldr	r3, [pc, #352]	; (8003a14 <HAL_RCC_OscConfig+0x2e8>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d1f0      	bne.n	80038a0 <HAL_RCC_OscConfig+0x174>
 80038be:	e000      	b.n	80038c2 <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0302 	and.w	r3, r3, #2
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d079      	beq.n	80039c2 <HAL_RCC_OscConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d008      	beq.n	80038e8 <HAL_RCC_OscConfig+0x1bc>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d004      	beq.n	80038e8 <HAL_RCC_OscConfig+0x1bc>
 80038de:	f240 11a1 	movw	r1, #417	; 0x1a1
 80038e2:	484b      	ldr	r0, [pc, #300]	; (8003a10 <HAL_RCC_OscConfig+0x2e4>)
 80038e4:	f7fd feb6 	bl	8001654 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	695b      	ldr	r3, [r3, #20]
 80038ec:	2b1f      	cmp	r3, #31
 80038ee:	d904      	bls.n	80038fa <HAL_RCC_OscConfig+0x1ce>
 80038f0:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 80038f4:	4846      	ldr	r0, [pc, #280]	; (8003a10 <HAL_RCC_OscConfig+0x2e4>)
 80038f6:	f7fd fead 	bl	8001654 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80038fa:	4b46      	ldr	r3, [pc, #280]	; (8003a14 <HAL_RCC_OscConfig+0x2e8>)
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	f003 030c 	and.w	r3, r3, #12
 8003902:	2b00      	cmp	r3, #0
 8003904:	d00b      	beq.n	800391e <HAL_RCC_OscConfig+0x1f2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003906:	4b43      	ldr	r3, [pc, #268]	; (8003a14 <HAL_RCC_OscConfig+0x2e8>)
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	f003 030c 	and.w	r3, r3, #12
 800390e:	2b08      	cmp	r3, #8
 8003910:	d11c      	bne.n	800394c <HAL_RCC_OscConfig+0x220>
 8003912:	4b40      	ldr	r3, [pc, #256]	; (8003a14 <HAL_RCC_OscConfig+0x2e8>)
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d116      	bne.n	800394c <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800391e:	4b3d      	ldr	r3, [pc, #244]	; (8003a14 <HAL_RCC_OscConfig+0x2e8>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0302 	and.w	r3, r3, #2
 8003926:	2b00      	cmp	r3, #0
 8003928:	d005      	beq.n	8003936 <HAL_RCC_OscConfig+0x20a>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	691b      	ldr	r3, [r3, #16]
 800392e:	2b01      	cmp	r3, #1
 8003930:	d001      	beq.n	8003936 <HAL_RCC_OscConfig+0x20a>
      {
        return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e260      	b.n	8003df8 <HAL_RCC_OscConfig+0x6cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003936:	4b37      	ldr	r3, [pc, #220]	; (8003a14 <HAL_RCC_OscConfig+0x2e8>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	695b      	ldr	r3, [r3, #20]
 8003942:	00db      	lsls	r3, r3, #3
 8003944:	4933      	ldr	r1, [pc, #204]	; (8003a14 <HAL_RCC_OscConfig+0x2e8>)
 8003946:	4313      	orrs	r3, r2
 8003948:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800394a:	e03a      	b.n	80039c2 <HAL_RCC_OscConfig+0x296>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	691b      	ldr	r3, [r3, #16]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d020      	beq.n	8003996 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003954:	4b30      	ldr	r3, [pc, #192]	; (8003a18 <HAL_RCC_OscConfig+0x2ec>)
 8003956:	2201      	movs	r2, #1
 8003958:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800395a:	f7fe fb27 	bl	8001fac <HAL_GetTick>
 800395e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003960:	e008      	b.n	8003974 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003962:	f7fe fb23 	bl	8001fac <HAL_GetTick>
 8003966:	4602      	mov	r2, r0
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	2b02      	cmp	r3, #2
 800396e:	d901      	bls.n	8003974 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003970:	2303      	movs	r3, #3
 8003972:	e241      	b.n	8003df8 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003974:	4b27      	ldr	r3, [pc, #156]	; (8003a14 <HAL_RCC_OscConfig+0x2e8>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0302 	and.w	r3, r3, #2
 800397c:	2b00      	cmp	r3, #0
 800397e:	d0f0      	beq.n	8003962 <HAL_RCC_OscConfig+0x236>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003980:	4b24      	ldr	r3, [pc, #144]	; (8003a14 <HAL_RCC_OscConfig+0x2e8>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	695b      	ldr	r3, [r3, #20]
 800398c:	00db      	lsls	r3, r3, #3
 800398e:	4921      	ldr	r1, [pc, #132]	; (8003a14 <HAL_RCC_OscConfig+0x2e8>)
 8003990:	4313      	orrs	r3, r2
 8003992:	600b      	str	r3, [r1, #0]
 8003994:	e015      	b.n	80039c2 <HAL_RCC_OscConfig+0x296>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003996:	4b20      	ldr	r3, [pc, #128]	; (8003a18 <HAL_RCC_OscConfig+0x2ec>)
 8003998:	2200      	movs	r2, #0
 800399a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800399c:	f7fe fb06 	bl	8001fac <HAL_GetTick>
 80039a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039a2:	e008      	b.n	80039b6 <HAL_RCC_OscConfig+0x28a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039a4:	f7fe fb02 	bl	8001fac <HAL_GetTick>
 80039a8:	4602      	mov	r2, r0
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d901      	bls.n	80039b6 <HAL_RCC_OscConfig+0x28a>
          {
            return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e220      	b.n	8003df8 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039b6:	4b17      	ldr	r3, [pc, #92]	; (8003a14 <HAL_RCC_OscConfig+0x2e8>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0302 	and.w	r3, r3, #2
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d1f0      	bne.n	80039a4 <HAL_RCC_OscConfig+0x278>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0308 	and.w	r3, r3, #8
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d048      	beq.n	8003a60 <HAL_RCC_OscConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	699b      	ldr	r3, [r3, #24]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d008      	beq.n	80039e8 <HAL_RCC_OscConfig+0x2bc>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	699b      	ldr	r3, [r3, #24]
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d004      	beq.n	80039e8 <HAL_RCC_OscConfig+0x2bc>
 80039de:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 80039e2:	480b      	ldr	r0, [pc, #44]	; (8003a10 <HAL_RCC_OscConfig+0x2e4>)
 80039e4:	f7fd fe36 	bl	8001654 <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	699b      	ldr	r3, [r3, #24]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d021      	beq.n	8003a34 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039f0:	4b0a      	ldr	r3, [pc, #40]	; (8003a1c <HAL_RCC_OscConfig+0x2f0>)
 80039f2:	2201      	movs	r2, #1
 80039f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039f6:	f7fe fad9 	bl	8001fac <HAL_GetTick>
 80039fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039fc:	e010      	b.n	8003a20 <HAL_RCC_OscConfig+0x2f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039fe:	f7fe fad5 	bl	8001fac <HAL_GetTick>
 8003a02:	4602      	mov	r2, r0
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	2b02      	cmp	r3, #2
 8003a0a:	d909      	bls.n	8003a20 <HAL_RCC_OscConfig+0x2f4>
        {
          return HAL_TIMEOUT;
 8003a0c:	2303      	movs	r3, #3
 8003a0e:	e1f3      	b.n	8003df8 <HAL_RCC_OscConfig+0x6cc>
 8003a10:	0800b3ac 	.word	0x0800b3ac
 8003a14:	40021000 	.word	0x40021000
 8003a18:	42420000 	.word	0x42420000
 8003a1c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a20:	4b67      	ldr	r3, [pc, #412]	; (8003bc0 <HAL_RCC_OscConfig+0x494>)
 8003a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a24:	f003 0302 	and.w	r3, r3, #2
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d0e8      	beq.n	80039fe <HAL_RCC_OscConfig+0x2d2>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003a2c:	2001      	movs	r0, #1
 8003a2e:	f000 fc0f 	bl	8004250 <RCC_Delay>
 8003a32:	e015      	b.n	8003a60 <HAL_RCC_OscConfig+0x334>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a34:	4b63      	ldr	r3, [pc, #396]	; (8003bc4 <HAL_RCC_OscConfig+0x498>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a3a:	f7fe fab7 	bl	8001fac <HAL_GetTick>
 8003a3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a40:	e008      	b.n	8003a54 <HAL_RCC_OscConfig+0x328>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a42:	f7fe fab3 	bl	8001fac <HAL_GetTick>
 8003a46:	4602      	mov	r2, r0
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d901      	bls.n	8003a54 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 8003a50:	2303      	movs	r3, #3
 8003a52:	e1d1      	b.n	8003df8 <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a54:	4b5a      	ldr	r3, [pc, #360]	; (8003bc0 <HAL_RCC_OscConfig+0x494>)
 8003a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a58:	f003 0302 	and.w	r3, r3, #2
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d1f0      	bne.n	8003a42 <HAL_RCC_OscConfig+0x316>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0304 	and.w	r3, r3, #4
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	f000 80c0 	beq.w	8003bee <HAL_RCC_OscConfig+0x4c2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d00c      	beq.n	8003a94 <HAL_RCC_OscConfig+0x368>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d008      	beq.n	8003a94 <HAL_RCC_OscConfig+0x368>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	2b05      	cmp	r3, #5
 8003a88:	d004      	beq.n	8003a94 <HAL_RCC_OscConfig+0x368>
 8003a8a:	f240 2111 	movw	r1, #529	; 0x211
 8003a8e:	484e      	ldr	r0, [pc, #312]	; (8003bc8 <HAL_RCC_OscConfig+0x49c>)
 8003a90:	f7fd fde0 	bl	8001654 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a94:	4b4a      	ldr	r3, [pc, #296]	; (8003bc0 <HAL_RCC_OscConfig+0x494>)
 8003a96:	69db      	ldr	r3, [r3, #28]
 8003a98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d10d      	bne.n	8003abc <HAL_RCC_OscConfig+0x390>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003aa0:	4b47      	ldr	r3, [pc, #284]	; (8003bc0 <HAL_RCC_OscConfig+0x494>)
 8003aa2:	69db      	ldr	r3, [r3, #28]
 8003aa4:	4a46      	ldr	r2, [pc, #280]	; (8003bc0 <HAL_RCC_OscConfig+0x494>)
 8003aa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aaa:	61d3      	str	r3, [r2, #28]
 8003aac:	4b44      	ldr	r3, [pc, #272]	; (8003bc0 <HAL_RCC_OscConfig+0x494>)
 8003aae:	69db      	ldr	r3, [r3, #28]
 8003ab0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ab4:	60bb      	str	r3, [r7, #8]
 8003ab6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003abc:	4b43      	ldr	r3, [pc, #268]	; (8003bcc <HAL_RCC_OscConfig+0x4a0>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d118      	bne.n	8003afa <HAL_RCC_OscConfig+0x3ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ac8:	4b40      	ldr	r3, [pc, #256]	; (8003bcc <HAL_RCC_OscConfig+0x4a0>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a3f      	ldr	r2, [pc, #252]	; (8003bcc <HAL_RCC_OscConfig+0x4a0>)
 8003ace:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ad2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ad4:	f7fe fa6a 	bl	8001fac <HAL_GetTick>
 8003ad8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ada:	e008      	b.n	8003aee <HAL_RCC_OscConfig+0x3c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003adc:	f7fe fa66 	bl	8001fac <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	2b64      	cmp	r3, #100	; 0x64
 8003ae8:	d901      	bls.n	8003aee <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e184      	b.n	8003df8 <HAL_RCC_OscConfig+0x6cc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aee:	4b37      	ldr	r3, [pc, #220]	; (8003bcc <HAL_RCC_OscConfig+0x4a0>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d0f0      	beq.n	8003adc <HAL_RCC_OscConfig+0x3b0>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d106      	bne.n	8003b10 <HAL_RCC_OscConfig+0x3e4>
 8003b02:	4b2f      	ldr	r3, [pc, #188]	; (8003bc0 <HAL_RCC_OscConfig+0x494>)
 8003b04:	6a1b      	ldr	r3, [r3, #32]
 8003b06:	4a2e      	ldr	r2, [pc, #184]	; (8003bc0 <HAL_RCC_OscConfig+0x494>)
 8003b08:	f043 0301 	orr.w	r3, r3, #1
 8003b0c:	6213      	str	r3, [r2, #32]
 8003b0e:	e02d      	b.n	8003b6c <HAL_RCC_OscConfig+0x440>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d10c      	bne.n	8003b32 <HAL_RCC_OscConfig+0x406>
 8003b18:	4b29      	ldr	r3, [pc, #164]	; (8003bc0 <HAL_RCC_OscConfig+0x494>)
 8003b1a:	6a1b      	ldr	r3, [r3, #32]
 8003b1c:	4a28      	ldr	r2, [pc, #160]	; (8003bc0 <HAL_RCC_OscConfig+0x494>)
 8003b1e:	f023 0301 	bic.w	r3, r3, #1
 8003b22:	6213      	str	r3, [r2, #32]
 8003b24:	4b26      	ldr	r3, [pc, #152]	; (8003bc0 <HAL_RCC_OscConfig+0x494>)
 8003b26:	6a1b      	ldr	r3, [r3, #32]
 8003b28:	4a25      	ldr	r2, [pc, #148]	; (8003bc0 <HAL_RCC_OscConfig+0x494>)
 8003b2a:	f023 0304 	bic.w	r3, r3, #4
 8003b2e:	6213      	str	r3, [r2, #32]
 8003b30:	e01c      	b.n	8003b6c <HAL_RCC_OscConfig+0x440>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	2b05      	cmp	r3, #5
 8003b38:	d10c      	bne.n	8003b54 <HAL_RCC_OscConfig+0x428>
 8003b3a:	4b21      	ldr	r3, [pc, #132]	; (8003bc0 <HAL_RCC_OscConfig+0x494>)
 8003b3c:	6a1b      	ldr	r3, [r3, #32]
 8003b3e:	4a20      	ldr	r2, [pc, #128]	; (8003bc0 <HAL_RCC_OscConfig+0x494>)
 8003b40:	f043 0304 	orr.w	r3, r3, #4
 8003b44:	6213      	str	r3, [r2, #32]
 8003b46:	4b1e      	ldr	r3, [pc, #120]	; (8003bc0 <HAL_RCC_OscConfig+0x494>)
 8003b48:	6a1b      	ldr	r3, [r3, #32]
 8003b4a:	4a1d      	ldr	r2, [pc, #116]	; (8003bc0 <HAL_RCC_OscConfig+0x494>)
 8003b4c:	f043 0301 	orr.w	r3, r3, #1
 8003b50:	6213      	str	r3, [r2, #32]
 8003b52:	e00b      	b.n	8003b6c <HAL_RCC_OscConfig+0x440>
 8003b54:	4b1a      	ldr	r3, [pc, #104]	; (8003bc0 <HAL_RCC_OscConfig+0x494>)
 8003b56:	6a1b      	ldr	r3, [r3, #32]
 8003b58:	4a19      	ldr	r2, [pc, #100]	; (8003bc0 <HAL_RCC_OscConfig+0x494>)
 8003b5a:	f023 0301 	bic.w	r3, r3, #1
 8003b5e:	6213      	str	r3, [r2, #32]
 8003b60:	4b17      	ldr	r3, [pc, #92]	; (8003bc0 <HAL_RCC_OscConfig+0x494>)
 8003b62:	6a1b      	ldr	r3, [r3, #32]
 8003b64:	4a16      	ldr	r2, [pc, #88]	; (8003bc0 <HAL_RCC_OscConfig+0x494>)
 8003b66:	f023 0304 	bic.w	r3, r3, #4
 8003b6a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d015      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x474>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b74:	f7fe fa1a 	bl	8001fac <HAL_GetTick>
 8003b78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b7a:	e00a      	b.n	8003b92 <HAL_RCC_OscConfig+0x466>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b7c:	f7fe fa16 	bl	8001fac <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d901      	bls.n	8003b92 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e132      	b.n	8003df8 <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b92:	4b0b      	ldr	r3, [pc, #44]	; (8003bc0 <HAL_RCC_OscConfig+0x494>)
 8003b94:	6a1b      	ldr	r3, [r3, #32]
 8003b96:	f003 0302 	and.w	r3, r3, #2
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d0ee      	beq.n	8003b7c <HAL_RCC_OscConfig+0x450>
 8003b9e:	e01d      	b.n	8003bdc <HAL_RCC_OscConfig+0x4b0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ba0:	f7fe fa04 	bl	8001fac <HAL_GetTick>
 8003ba4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ba6:	e013      	b.n	8003bd0 <HAL_RCC_OscConfig+0x4a4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ba8:	f7fe fa00 	bl	8001fac <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d90a      	bls.n	8003bd0 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e11c      	b.n	8003df8 <HAL_RCC_OscConfig+0x6cc>
 8003bbe:	bf00      	nop
 8003bc0:	40021000 	.word	0x40021000
 8003bc4:	42420480 	.word	0x42420480
 8003bc8:	0800b3ac 	.word	0x0800b3ac
 8003bcc:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bd0:	4b8b      	ldr	r3, [pc, #556]	; (8003e00 <HAL_RCC_OscConfig+0x6d4>)
 8003bd2:	6a1b      	ldr	r3, [r3, #32]
 8003bd4:	f003 0302 	and.w	r3, r3, #2
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d1e5      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x47c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003bdc:	7dfb      	ldrb	r3, [r7, #23]
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d105      	bne.n	8003bee <HAL_RCC_OscConfig+0x4c2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003be2:	4b87      	ldr	r3, [pc, #540]	; (8003e00 <HAL_RCC_OscConfig+0x6d4>)
 8003be4:	69db      	ldr	r3, [r3, #28]
 8003be6:	4a86      	ldr	r2, [pc, #536]	; (8003e00 <HAL_RCC_OscConfig+0x6d4>)
 8003be8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bec:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	69db      	ldr	r3, [r3, #28]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d00c      	beq.n	8003c10 <HAL_RCC_OscConfig+0x4e4>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	69db      	ldr	r3, [r3, #28]
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d008      	beq.n	8003c10 <HAL_RCC_OscConfig+0x4e4>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	69db      	ldr	r3, [r3, #28]
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d004      	beq.n	8003c10 <HAL_RCC_OscConfig+0x4e4>
 8003c06:	f240 21af 	movw	r1, #687	; 0x2af
 8003c0a:	487e      	ldr	r0, [pc, #504]	; (8003e04 <HAL_RCC_OscConfig+0x6d8>)
 8003c0c:	f7fd fd22 	bl	8001654 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	69db      	ldr	r3, [r3, #28]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	f000 80ee 	beq.w	8003df6 <HAL_RCC_OscConfig+0x6ca>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c1a:	4b79      	ldr	r3, [pc, #484]	; (8003e00 <HAL_RCC_OscConfig+0x6d4>)
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	f003 030c 	and.w	r3, r3, #12
 8003c22:	2b08      	cmp	r3, #8
 8003c24:	f000 80ce 	beq.w	8003dc4 <HAL_RCC_OscConfig+0x698>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	69db      	ldr	r3, [r3, #28]
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	f040 80b2 	bne.w	8003d96 <HAL_RCC_OscConfig+0x66a>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a1b      	ldr	r3, [r3, #32]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d009      	beq.n	8003c4e <HAL_RCC_OscConfig+0x522>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a1b      	ldr	r3, [r3, #32]
 8003c3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c42:	d004      	beq.n	8003c4e <HAL_RCC_OscConfig+0x522>
 8003c44:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 8003c48:	486e      	ldr	r0, [pc, #440]	; (8003e04 <HAL_RCC_OscConfig+0x6d8>)
 8003c4a:	f7fd fd03 	bl	8001654 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d04a      	beq.n	8003cec <HAL_RCC_OscConfig+0x5c0>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c5e:	d045      	beq.n	8003cec <HAL_RCC_OscConfig+0x5c0>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c64:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003c68:	d040      	beq.n	8003cec <HAL_RCC_OscConfig+0x5c0>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003c72:	d03b      	beq.n	8003cec <HAL_RCC_OscConfig+0x5c0>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c7c:	d036      	beq.n	8003cec <HAL_RCC_OscConfig+0x5c0>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c82:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003c86:	d031      	beq.n	8003cec <HAL_RCC_OscConfig+0x5c0>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003c90:	d02c      	beq.n	8003cec <HAL_RCC_OscConfig+0x5c0>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c96:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003c9a:	d027      	beq.n	8003cec <HAL_RCC_OscConfig+0x5c0>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ca4:	d022      	beq.n	8003cec <HAL_RCC_OscConfig+0x5c0>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003caa:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003cae:	d01d      	beq.n	8003cec <HAL_RCC_OscConfig+0x5c0>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb4:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003cb8:	d018      	beq.n	8003cec <HAL_RCC_OscConfig+0x5c0>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbe:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003cc2:	d013      	beq.n	8003cec <HAL_RCC_OscConfig+0x5c0>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003ccc:	d00e      	beq.n	8003cec <HAL_RCC_OscConfig+0x5c0>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd2:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 8003cd6:	d009      	beq.n	8003cec <HAL_RCC_OscConfig+0x5c0>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cdc:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8003ce0:	d004      	beq.n	8003cec <HAL_RCC_OscConfig+0x5c0>
 8003ce2:	f240 21b9 	movw	r1, #697	; 0x2b9
 8003ce6:	4847      	ldr	r0, [pc, #284]	; (8003e04 <HAL_RCC_OscConfig+0x6d8>)
 8003ce8:	f7fd fcb4 	bl	8001654 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cec:	4b46      	ldr	r3, [pc, #280]	; (8003e08 <HAL_RCC_OscConfig+0x6dc>)
 8003cee:	2200      	movs	r2, #0
 8003cf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cf2:	f7fe f95b 	bl	8001fac <HAL_GetTick>
 8003cf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cf8:	e008      	b.n	8003d0c <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cfa:	f7fe f957 	bl	8001fac <HAL_GetTick>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	2b02      	cmp	r3, #2
 8003d06:	d901      	bls.n	8003d0c <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 8003d08:	2303      	movs	r3, #3
 8003d0a:	e075      	b.n	8003df8 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d0c:	4b3c      	ldr	r3, [pc, #240]	; (8003e00 <HAL_RCC_OscConfig+0x6d4>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d1f0      	bne.n	8003cfa <HAL_RCC_OscConfig+0x5ce>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6a1b      	ldr	r3, [r3, #32]
 8003d1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d20:	d116      	bne.n	8003d50 <HAL_RCC_OscConfig+0x624>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d009      	beq.n	8003d3e <HAL_RCC_OscConfig+0x612>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d32:	d004      	beq.n	8003d3e <HAL_RCC_OscConfig+0x612>
 8003d34:	f240 21cf 	movw	r1, #719	; 0x2cf
 8003d38:	4832      	ldr	r0, [pc, #200]	; (8003e04 <HAL_RCC_OscConfig+0x6d8>)
 8003d3a:	f7fd fc8b 	bl	8001654 <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003d3e:	4b30      	ldr	r3, [pc, #192]	; (8003e00 <HAL_RCC_OscConfig+0x6d4>)
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	492d      	ldr	r1, [pc, #180]	; (8003e00 <HAL_RCC_OscConfig+0x6d4>)
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d50:	4b2b      	ldr	r3, [pc, #172]	; (8003e00 <HAL_RCC_OscConfig+0x6d4>)
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a19      	ldr	r1, [r3, #32]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d60:	430b      	orrs	r3, r1
 8003d62:	4927      	ldr	r1, [pc, #156]	; (8003e00 <HAL_RCC_OscConfig+0x6d4>)
 8003d64:	4313      	orrs	r3, r2
 8003d66:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d68:	4b27      	ldr	r3, [pc, #156]	; (8003e08 <HAL_RCC_OscConfig+0x6dc>)
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d6e:	f7fe f91d 	bl	8001fac <HAL_GetTick>
 8003d72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d74:	e008      	b.n	8003d88 <HAL_RCC_OscConfig+0x65c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d76:	f7fe f919 	bl	8001fac <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d901      	bls.n	8003d88 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8003d84:	2303      	movs	r3, #3
 8003d86:	e037      	b.n	8003df8 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d88:	4b1d      	ldr	r3, [pc, #116]	; (8003e00 <HAL_RCC_OscConfig+0x6d4>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d0f0      	beq.n	8003d76 <HAL_RCC_OscConfig+0x64a>
 8003d94:	e02f      	b.n	8003df6 <HAL_RCC_OscConfig+0x6ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d96:	4b1c      	ldr	r3, [pc, #112]	; (8003e08 <HAL_RCC_OscConfig+0x6dc>)
 8003d98:	2200      	movs	r2, #0
 8003d9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d9c:	f7fe f906 	bl	8001fac <HAL_GetTick>
 8003da0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003da2:	e008      	b.n	8003db6 <HAL_RCC_OscConfig+0x68a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003da4:	f7fe f902 	bl	8001fac <HAL_GetTick>
 8003da8:	4602      	mov	r2, r0
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	2b02      	cmp	r3, #2
 8003db0:	d901      	bls.n	8003db6 <HAL_RCC_OscConfig+0x68a>
          {
            return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e020      	b.n	8003df8 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003db6:	4b12      	ldr	r3, [pc, #72]	; (8003e00 <HAL_RCC_OscConfig+0x6d4>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d1f0      	bne.n	8003da4 <HAL_RCC_OscConfig+0x678>
 8003dc2:	e018      	b.n	8003df6 <HAL_RCC_OscConfig+0x6ca>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	69db      	ldr	r3, [r3, #28]
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d101      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x6a4>
      {
        return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e013      	b.n	8003df8 <HAL_RCC_OscConfig+0x6cc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003dd0:	4b0b      	ldr	r3, [pc, #44]	; (8003e00 <HAL_RCC_OscConfig+0x6d4>)
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6a1b      	ldr	r3, [r3, #32]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d106      	bne.n	8003df2 <HAL_RCC_OscConfig+0x6c6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d001      	beq.n	8003df6 <HAL_RCC_OscConfig+0x6ca>
        {
          return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e000      	b.n	8003df8 <HAL_RCC_OscConfig+0x6cc>
        }
      }
    }
  }

  return HAL_OK;
 8003df6:	2300      	movs	r3, #0
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3718      	adds	r7, #24
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	40021000 	.word	0x40021000
 8003e04:	0800b3ac 	.word	0x0800b3ac
 8003e08:	42420060 	.word	0x42420060

08003e0c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d101      	bne.n	8003e20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e176      	b.n	800410e <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0301 	and.w	r3, r3, #1
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d116      	bne.n	8003e5a <HAL_RCC_ClockConfig+0x4e>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 0302 	and.w	r3, r3, #2
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d110      	bne.n	8003e5a <HAL_RCC_ClockConfig+0x4e>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0304 	and.w	r3, r3, #4
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d10a      	bne.n	8003e5a <HAL_RCC_ClockConfig+0x4e>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0308 	and.w	r3, r3, #8
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d104      	bne.n	8003e5a <HAL_RCC_ClockConfig+0x4e>
 8003e50:	f44f 714e 	mov.w	r1, #824	; 0x338
 8003e54:	4874      	ldr	r0, [pc, #464]	; (8004028 <HAL_RCC_ClockConfig+0x21c>)
 8003e56:	f7fd fbfd 	bl	8001654 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d00a      	beq.n	8003e76 <HAL_RCC_ClockConfig+0x6a>
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d007      	beq.n	8003e76 <HAL_RCC_ClockConfig+0x6a>
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	d004      	beq.n	8003e76 <HAL_RCC_ClockConfig+0x6a>
 8003e6c:	f240 3139 	movw	r1, #825	; 0x339
 8003e70:	486d      	ldr	r0, [pc, #436]	; (8004028 <HAL_RCC_ClockConfig+0x21c>)
 8003e72:	f7fd fbef 	bl	8001654 <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e76:	4b6d      	ldr	r3, [pc, #436]	; (800402c <HAL_RCC_ClockConfig+0x220>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0307 	and.w	r3, r3, #7
 8003e7e:	683a      	ldr	r2, [r7, #0]
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d910      	bls.n	8003ea6 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e84:	4b69      	ldr	r3, [pc, #420]	; (800402c <HAL_RCC_ClockConfig+0x220>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f023 0207 	bic.w	r2, r3, #7
 8003e8c:	4967      	ldr	r1, [pc, #412]	; (800402c <HAL_RCC_ClockConfig+0x220>)
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	4313      	orrs	r3, r2
 8003e92:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e94:	4b65      	ldr	r3, [pc, #404]	; (800402c <HAL_RCC_ClockConfig+0x220>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0307 	and.w	r3, r3, #7
 8003e9c:	683a      	ldr	r2, [r7, #0]
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d001      	beq.n	8003ea6 <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e133      	b.n	800410e <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0302 	and.w	r3, r3, #2
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d049      	beq.n	8003f46 <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 0304 	and.w	r3, r3, #4
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d005      	beq.n	8003eca <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ebe:	4b5c      	ldr	r3, [pc, #368]	; (8004030 <HAL_RCC_ClockConfig+0x224>)
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	4a5b      	ldr	r2, [pc, #364]	; (8004030 <HAL_RCC_ClockConfig+0x224>)
 8003ec4:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003ec8:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0308 	and.w	r3, r3, #8
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d005      	beq.n	8003ee2 <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ed6:	4b56      	ldr	r3, [pc, #344]	; (8004030 <HAL_RCC_ClockConfig+0x224>)
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	4a55      	ldr	r2, [pc, #340]	; (8004030 <HAL_RCC_ClockConfig+0x224>)
 8003edc:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003ee0:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d024      	beq.n	8003f34 <HAL_RCC_ClockConfig+0x128>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	2b80      	cmp	r3, #128	; 0x80
 8003ef0:	d020      	beq.n	8003f34 <HAL_RCC_ClockConfig+0x128>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	2b90      	cmp	r3, #144	; 0x90
 8003ef8:	d01c      	beq.n	8003f34 <HAL_RCC_ClockConfig+0x128>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	2ba0      	cmp	r3, #160	; 0xa0
 8003f00:	d018      	beq.n	8003f34 <HAL_RCC_ClockConfig+0x128>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	2bb0      	cmp	r3, #176	; 0xb0
 8003f08:	d014      	beq.n	8003f34 <HAL_RCC_ClockConfig+0x128>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	2bc0      	cmp	r3, #192	; 0xc0
 8003f10:	d010      	beq.n	8003f34 <HAL_RCC_ClockConfig+0x128>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	2bd0      	cmp	r3, #208	; 0xd0
 8003f18:	d00c      	beq.n	8003f34 <HAL_RCC_ClockConfig+0x128>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	2be0      	cmp	r3, #224	; 0xe0
 8003f20:	d008      	beq.n	8003f34 <HAL_RCC_ClockConfig+0x128>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	2bf0      	cmp	r3, #240	; 0xf0
 8003f28:	d004      	beq.n	8003f34 <HAL_RCC_ClockConfig+0x128>
 8003f2a:	f240 315f 	movw	r1, #863	; 0x35f
 8003f2e:	483e      	ldr	r0, [pc, #248]	; (8004028 <HAL_RCC_ClockConfig+0x21c>)
 8003f30:	f7fd fb90 	bl	8001654 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f34:	4b3e      	ldr	r3, [pc, #248]	; (8004030 <HAL_RCC_ClockConfig+0x224>)
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	493b      	ldr	r1, [pc, #236]	; (8004030 <HAL_RCC_ClockConfig+0x224>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0301 	and.w	r3, r3, #1
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d051      	beq.n	8003ff6 <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d00c      	beq.n	8003f74 <HAL_RCC_ClockConfig+0x168>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d008      	beq.n	8003f74 <HAL_RCC_ClockConfig+0x168>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	2b02      	cmp	r3, #2
 8003f68:	d004      	beq.n	8003f74 <HAL_RCC_ClockConfig+0x168>
 8003f6a:	f240 3166 	movw	r1, #870	; 0x366
 8003f6e:	482e      	ldr	r0, [pc, #184]	; (8004028 <HAL_RCC_ClockConfig+0x21c>)
 8003f70:	f7fd fb70 	bl	8001654 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d107      	bne.n	8003f8c <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f7c:	4b2c      	ldr	r3, [pc, #176]	; (8004030 <HAL_RCC_ClockConfig+0x224>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d115      	bne.n	8003fb4 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e0c0      	b.n	800410e <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	2b02      	cmp	r3, #2
 8003f92:	d107      	bne.n	8003fa4 <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f94:	4b26      	ldr	r3, [pc, #152]	; (8004030 <HAL_RCC_ClockConfig+0x224>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d109      	bne.n	8003fb4 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e0b4      	b.n	800410e <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fa4:	4b22      	ldr	r3, [pc, #136]	; (8004030 <HAL_RCC_ClockConfig+0x224>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0302 	and.w	r3, r3, #2
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d101      	bne.n	8003fb4 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e0ac      	b.n	800410e <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fb4:	4b1e      	ldr	r3, [pc, #120]	; (8004030 <HAL_RCC_ClockConfig+0x224>)
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	f023 0203 	bic.w	r2, r3, #3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	491b      	ldr	r1, [pc, #108]	; (8004030 <HAL_RCC_ClockConfig+0x224>)
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fc6:	f7fd fff1 	bl	8001fac <HAL_GetTick>
 8003fca:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fcc:	e00a      	b.n	8003fe4 <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fce:	f7fd ffed 	bl	8001fac <HAL_GetTick>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d901      	bls.n	8003fe4 <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	e094      	b.n	800410e <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fe4:	4b12      	ldr	r3, [pc, #72]	; (8004030 <HAL_RCC_ClockConfig+0x224>)
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	f003 020c 	and.w	r2, r3, #12
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d1eb      	bne.n	8003fce <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ff6:	4b0d      	ldr	r3, [pc, #52]	; (800402c <HAL_RCC_ClockConfig+0x220>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0307 	and.w	r3, r3, #7
 8003ffe:	683a      	ldr	r2, [r7, #0]
 8004000:	429a      	cmp	r2, r3
 8004002:	d217      	bcs.n	8004034 <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004004:	4b09      	ldr	r3, [pc, #36]	; (800402c <HAL_RCC_ClockConfig+0x220>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f023 0207 	bic.w	r2, r3, #7
 800400c:	4907      	ldr	r1, [pc, #28]	; (800402c <HAL_RCC_ClockConfig+0x220>)
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	4313      	orrs	r3, r2
 8004012:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004014:	4b05      	ldr	r3, [pc, #20]	; (800402c <HAL_RCC_ClockConfig+0x220>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0307 	and.w	r3, r3, #7
 800401c:	683a      	ldr	r2, [r7, #0]
 800401e:	429a      	cmp	r2, r3
 8004020:	d008      	beq.n	8004034 <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e073      	b.n	800410e <HAL_RCC_ClockConfig+0x302>
 8004026:	bf00      	nop
 8004028:	0800b3ac 	.word	0x0800b3ac
 800402c:	40022000 	.word	0x40022000
 8004030:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 0304 	and.w	r3, r3, #4
 800403c:	2b00      	cmp	r3, #0
 800403e:	d025      	beq.n	800408c <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d018      	beq.n	800407a <HAL_RCC_ClockConfig+0x26e>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004050:	d013      	beq.n	800407a <HAL_RCC_ClockConfig+0x26e>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800405a:	d00e      	beq.n	800407a <HAL_RCC_ClockConfig+0x26e>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004064:	d009      	beq.n	800407a <HAL_RCC_ClockConfig+0x26e>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800406e:	d004      	beq.n	800407a <HAL_RCC_ClockConfig+0x26e>
 8004070:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 8004074:	4828      	ldr	r0, [pc, #160]	; (8004118 <HAL_RCC_ClockConfig+0x30c>)
 8004076:	f7fd faed 	bl	8001654 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800407a:	4b28      	ldr	r3, [pc, #160]	; (800411c <HAL_RCC_ClockConfig+0x310>)
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	4925      	ldr	r1, [pc, #148]	; (800411c <HAL_RCC_ClockConfig+0x310>)
 8004088:	4313      	orrs	r3, r2
 800408a:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0308 	and.w	r3, r3, #8
 8004094:	2b00      	cmp	r3, #0
 8004096:	d026      	beq.n	80040e6 <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	691b      	ldr	r3, [r3, #16]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d018      	beq.n	80040d2 <HAL_RCC_ClockConfig+0x2c6>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040a8:	d013      	beq.n	80040d2 <HAL_RCC_ClockConfig+0x2c6>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80040b2:	d00e      	beq.n	80040d2 <HAL_RCC_ClockConfig+0x2c6>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	691b      	ldr	r3, [r3, #16]
 80040b8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80040bc:	d009      	beq.n	80040d2 <HAL_RCC_ClockConfig+0x2c6>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80040c6:	d004      	beq.n	80040d2 <HAL_RCC_ClockConfig+0x2c6>
 80040c8:	f240 31ab 	movw	r1, #939	; 0x3ab
 80040cc:	4812      	ldr	r0, [pc, #72]	; (8004118 <HAL_RCC_ClockConfig+0x30c>)
 80040ce:	f7fd fac1 	bl	8001654 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80040d2:	4b12      	ldr	r3, [pc, #72]	; (800411c <HAL_RCC_ClockConfig+0x310>)
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	00db      	lsls	r3, r3, #3
 80040e0:	490e      	ldr	r1, [pc, #56]	; (800411c <HAL_RCC_ClockConfig+0x310>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80040e6:	f000 f821 	bl	800412c <HAL_RCC_GetSysClockFreq>
 80040ea:	4602      	mov	r2, r0
 80040ec:	4b0b      	ldr	r3, [pc, #44]	; (800411c <HAL_RCC_ClockConfig+0x310>)
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	091b      	lsrs	r3, r3, #4
 80040f2:	f003 030f 	and.w	r3, r3, #15
 80040f6:	490a      	ldr	r1, [pc, #40]	; (8004120 <HAL_RCC_ClockConfig+0x314>)
 80040f8:	5ccb      	ldrb	r3, [r1, r3]
 80040fa:	fa22 f303 	lsr.w	r3, r2, r3
 80040fe:	4a09      	ldr	r2, [pc, #36]	; (8004124 <HAL_RCC_ClockConfig+0x318>)
 8004100:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004102:	4b09      	ldr	r3, [pc, #36]	; (8004128 <HAL_RCC_ClockConfig+0x31c>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4618      	mov	r0, r3
 8004108:	f7fd ff0e 	bl	8001f28 <HAL_InitTick>

  return HAL_OK;
 800410c:	2300      	movs	r3, #0
}
 800410e:	4618      	mov	r0, r3
 8004110:	3710      	adds	r7, #16
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	0800b3ac 	.word	0x0800b3ac
 800411c:	40021000 	.word	0x40021000
 8004120:	0800ba14 	.word	0x0800ba14
 8004124:	20000000 	.word	0x20000000
 8004128:	20000004 	.word	0x20000004

0800412c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800412c:	b490      	push	{r4, r7}
 800412e:	b08a      	sub	sp, #40	; 0x28
 8004130:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004132:	4b2a      	ldr	r3, [pc, #168]	; (80041dc <HAL_RCC_GetSysClockFreq+0xb0>)
 8004134:	1d3c      	adds	r4, r7, #4
 8004136:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004138:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800413c:	f240 2301 	movw	r3, #513	; 0x201
 8004140:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004142:	2300      	movs	r3, #0
 8004144:	61fb      	str	r3, [r7, #28]
 8004146:	2300      	movs	r3, #0
 8004148:	61bb      	str	r3, [r7, #24]
 800414a:	2300      	movs	r3, #0
 800414c:	627b      	str	r3, [r7, #36]	; 0x24
 800414e:	2300      	movs	r3, #0
 8004150:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004152:	2300      	movs	r3, #0
 8004154:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004156:	4b22      	ldr	r3, [pc, #136]	; (80041e0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800415c:	69fb      	ldr	r3, [r7, #28]
 800415e:	f003 030c 	and.w	r3, r3, #12
 8004162:	2b04      	cmp	r3, #4
 8004164:	d002      	beq.n	800416c <HAL_RCC_GetSysClockFreq+0x40>
 8004166:	2b08      	cmp	r3, #8
 8004168:	d003      	beq.n	8004172 <HAL_RCC_GetSysClockFreq+0x46>
 800416a:	e02d      	b.n	80041c8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800416c:	4b1d      	ldr	r3, [pc, #116]	; (80041e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800416e:	623b      	str	r3, [r7, #32]
      break;
 8004170:	e02d      	b.n	80041ce <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004172:	69fb      	ldr	r3, [r7, #28]
 8004174:	0c9b      	lsrs	r3, r3, #18
 8004176:	f003 030f 	and.w	r3, r3, #15
 800417a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800417e:	4413      	add	r3, r2
 8004180:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004184:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800418c:	2b00      	cmp	r3, #0
 800418e:	d013      	beq.n	80041b8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004190:	4b13      	ldr	r3, [pc, #76]	; (80041e0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	0c5b      	lsrs	r3, r3, #17
 8004196:	f003 0301 	and.w	r3, r3, #1
 800419a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800419e:	4413      	add	r3, r2
 80041a0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80041a4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	4a0e      	ldr	r2, [pc, #56]	; (80041e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80041aa:	fb02 f203 	mul.w	r2, r2, r3
 80041ae:	69bb      	ldr	r3, [r7, #24]
 80041b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041b4:	627b      	str	r3, [r7, #36]	; 0x24
 80041b6:	e004      	b.n	80041c2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	4a0b      	ldr	r2, [pc, #44]	; (80041e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80041bc:	fb02 f303 	mul.w	r3, r2, r3
 80041c0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80041c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c4:	623b      	str	r3, [r7, #32]
      break;
 80041c6:	e002      	b.n	80041ce <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80041c8:	4b06      	ldr	r3, [pc, #24]	; (80041e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80041ca:	623b      	str	r3, [r7, #32]
      break;
 80041cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041ce:	6a3b      	ldr	r3, [r7, #32]
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3728      	adds	r7, #40	; 0x28
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bc90      	pop	{r4, r7}
 80041d8:	4770      	bx	lr
 80041da:	bf00      	nop
 80041dc:	0800b3e4 	.word	0x0800b3e4
 80041e0:	40021000 	.word	0x40021000
 80041e4:	007a1200 	.word	0x007a1200
 80041e8:	003d0900 	.word	0x003d0900

080041ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041ec:	b480      	push	{r7}
 80041ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041f0:	4b02      	ldr	r3, [pc, #8]	; (80041fc <HAL_RCC_GetHCLKFreq+0x10>)
 80041f2:	681b      	ldr	r3, [r3, #0]
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bc80      	pop	{r7}
 80041fa:	4770      	bx	lr
 80041fc:	20000000 	.word	0x20000000

08004200 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004204:	f7ff fff2 	bl	80041ec <HAL_RCC_GetHCLKFreq>
 8004208:	4602      	mov	r2, r0
 800420a:	4b05      	ldr	r3, [pc, #20]	; (8004220 <HAL_RCC_GetPCLK1Freq+0x20>)
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	0a1b      	lsrs	r3, r3, #8
 8004210:	f003 0307 	and.w	r3, r3, #7
 8004214:	4903      	ldr	r1, [pc, #12]	; (8004224 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004216:	5ccb      	ldrb	r3, [r1, r3]
 8004218:	fa22 f303 	lsr.w	r3, r2, r3
}
 800421c:	4618      	mov	r0, r3
 800421e:	bd80      	pop	{r7, pc}
 8004220:	40021000 	.word	0x40021000
 8004224:	0800ba24 	.word	0x0800ba24

08004228 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800422c:	f7ff ffde 	bl	80041ec <HAL_RCC_GetHCLKFreq>
 8004230:	4602      	mov	r2, r0
 8004232:	4b05      	ldr	r3, [pc, #20]	; (8004248 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	0adb      	lsrs	r3, r3, #11
 8004238:	f003 0307 	and.w	r3, r3, #7
 800423c:	4903      	ldr	r1, [pc, #12]	; (800424c <HAL_RCC_GetPCLK2Freq+0x24>)
 800423e:	5ccb      	ldrb	r3, [r1, r3]
 8004240:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004244:	4618      	mov	r0, r3
 8004246:	bd80      	pop	{r7, pc}
 8004248:	40021000 	.word	0x40021000
 800424c:	0800ba24 	.word	0x0800ba24

08004250 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004250:	b480      	push	{r7}
 8004252:	b085      	sub	sp, #20
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004258:	4b0a      	ldr	r3, [pc, #40]	; (8004284 <RCC_Delay+0x34>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a0a      	ldr	r2, [pc, #40]	; (8004288 <RCC_Delay+0x38>)
 800425e:	fba2 2303 	umull	r2, r3, r2, r3
 8004262:	0a5b      	lsrs	r3, r3, #9
 8004264:	687a      	ldr	r2, [r7, #4]
 8004266:	fb02 f303 	mul.w	r3, r2, r3
 800426a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800426c:	bf00      	nop
  }
  while (Delay --);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	1e5a      	subs	r2, r3, #1
 8004272:	60fa      	str	r2, [r7, #12]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d1f9      	bne.n	800426c <RCC_Delay+0x1c>
}
 8004278:	bf00      	nop
 800427a:	bf00      	nop
 800427c:	3714      	adds	r7, #20
 800427e:	46bd      	mov	sp, r7
 8004280:	bc80      	pop	{r7}
 8004282:	4770      	bx	lr
 8004284:	20000000 	.word	0x20000000
 8004288:	10624dd3 	.word	0x10624dd3

0800428c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b086      	sub	sp, #24
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004294:	2300      	movs	r3, #0
 8004296:	613b      	str	r3, [r7, #16]
 8004298:	2300      	movs	r3, #0
 800429a:	60fb      	str	r3, [r7, #12]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
#endif /* STM32F105xC || STM32F107xC */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 0301 	and.w	r3, r3, #1
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d11b      	bne.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0302 	and.w	r3, r3, #2
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d115      	bne.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 0304 	and.w	r3, r3, #4
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d10f      	bne.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0308 	and.w	r3, r3, #8
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d109      	bne.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0310 	and.w	r3, r3, #16
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d103      	bne.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80042d8:	216c      	movs	r1, #108	; 0x6c
 80042da:	4873      	ldr	r0, [pc, #460]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 80042dc:	f7fd f9ba 	bl	8001654 <assert_failed>

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0301 	and.w	r3, r3, #1
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	f000 8095 	beq.w	8004418 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    FlagStatus pwrclkchanged = RESET;
 80042ee:	2300      	movs	r3, #0
 80042f0:	75fb      	strb	r3, [r7, #23]

    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d012      	beq.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x94>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004302:	d00d      	beq.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x94>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800430c:	d008      	beq.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x94>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004316:	d003      	beq.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x94>
 8004318:	2174      	movs	r1, #116	; 0x74
 800431a:	4863      	ldr	r0, [pc, #396]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 800431c:	f7fd f99a 	bl	8001654 <assert_failed>

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004320:	4b62      	ldr	r3, [pc, #392]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004322:	69db      	ldr	r3, [r3, #28]
 8004324:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004328:	2b00      	cmp	r3, #0
 800432a:	d10d      	bne.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0xbc>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800432c:	4b5f      	ldr	r3, [pc, #380]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x220>)
 800432e:	69db      	ldr	r3, [r3, #28]
 8004330:	4a5e      	ldr	r2, [pc, #376]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004332:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004336:	61d3      	str	r3, [r2, #28]
 8004338:	4b5c      	ldr	r3, [pc, #368]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x220>)
 800433a:	69db      	ldr	r3, [r3, #28]
 800433c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004340:	60bb      	str	r3, [r7, #8]
 8004342:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004344:	2301      	movs	r3, #1
 8004346:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004348:	4b59      	ldr	r3, [pc, #356]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004350:	2b00      	cmp	r3, #0
 8004352:	d118      	bne.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0xfa>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004354:	4b56      	ldr	r3, [pc, #344]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a55      	ldr	r2, [pc, #340]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800435a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800435e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004360:	f7fd fe24 	bl	8001fac <HAL_GetTick>
 8004364:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004366:	e008      	b.n	800437a <HAL_RCCEx_PeriphCLKConfig+0xee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004368:	f7fd fe20 	bl	8001fac <HAL_GetTick>
 800436c:	4602      	mov	r2, r0
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	2b64      	cmp	r3, #100	; 0x64
 8004374:	d901      	bls.n	800437a <HAL_RCCEx_PeriphCLKConfig+0xee>
        {
          return HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	e092      	b.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x214>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800437a:	4b4d      	ldr	r3, [pc, #308]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004382:	2b00      	cmp	r3, #0
 8004384:	d0f0      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0xdc>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004386:	4b49      	ldr	r3, [pc, #292]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004388:	6a1b      	ldr	r3, [r3, #32]
 800438a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800438e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d02e      	beq.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800439e:	68fa      	ldr	r2, [r7, #12]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d027      	beq.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80043a4:	4b41      	ldr	r3, [pc, #260]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80043a6:	6a1b      	ldr	r3, [r3, #32]
 80043a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043ac:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80043ae:	4b41      	ldr	r3, [pc, #260]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80043b0:	2201      	movs	r2, #1
 80043b2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80043b4:	4b3f      	ldr	r3, [pc, #252]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80043b6:	2200      	movs	r2, #0
 80043b8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80043ba:	4a3c      	ldr	r2, [pc, #240]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f003 0301 	and.w	r3, r3, #1
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d014      	beq.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043ca:	f7fd fdef 	bl	8001fac <HAL_GetTick>
 80043ce:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043d0:	e00a      	b.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043d2:	f7fd fdeb 	bl	8001fac <HAL_GetTick>
 80043d6:	4602      	mov	r2, r0
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d901      	bls.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          {
            return HAL_TIMEOUT;
 80043e4:	2303      	movs	r3, #3
 80043e6:	e05b      	b.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x214>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043e8:	4b30      	ldr	r3, [pc, #192]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80043ea:	6a1b      	ldr	r3, [r3, #32]
 80043ec:	f003 0302 	and.w	r3, r3, #2
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d0ee      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x146>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043f4:	4b2d      	ldr	r3, [pc, #180]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80043f6:	6a1b      	ldr	r3, [r3, #32]
 80043f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	492a      	ldr	r1, [pc, #168]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004402:	4313      	orrs	r3, r2
 8004404:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004406:	7dfb      	ldrb	r3, [r7, #23]
 8004408:	2b01      	cmp	r3, #1
 800440a:	d105      	bne.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800440c:	4b27      	ldr	r3, [pc, #156]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x220>)
 800440e:	69db      	ldr	r3, [r3, #28]
 8004410:	4a26      	ldr	r2, [pc, #152]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004412:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004416:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0302 	and.w	r3, r3, #2
 8004420:	2b00      	cmp	r3, #0
 8004422:	d01f      	beq.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d012      	beq.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004434:	d00d      	beq.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800443e:	d008      	beq.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004448:	d003      	beq.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 800444a:	21b9      	movs	r1, #185	; 0xb9
 800444c:	4816      	ldr	r0, [pc, #88]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 800444e:	f7fd f901 	bl	8001654 <assert_failed>

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004452:	4b16      	ldr	r3, [pc, #88]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	4913      	ldr	r1, [pc, #76]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004460:	4313      	orrs	r3, r2
 8004462:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 0310 	and.w	r3, r3, #16
 800446c:	2b00      	cmp	r3, #0
 800446e:	d016      	beq.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x212>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	695b      	ldr	r3, [r3, #20]
 8004474:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004478:	d008      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	695b      	ldr	r3, [r3, #20]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d004      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004482:	f240 1115 	movw	r1, #277	; 0x115
 8004486:	4808      	ldr	r0, [pc, #32]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8004488:	f7fd f8e4 	bl	8001654 <assert_failed>

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800448c:	4b07      	ldr	r3, [pc, #28]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x220>)
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	695b      	ldr	r3, [r3, #20]
 8004498:	4904      	ldr	r1, [pc, #16]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x220>)
 800449a:	4313      	orrs	r3, r2
 800449c:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800449e:	2300      	movs	r3, #0
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3718      	adds	r7, #24
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	0800b3f4 	.word	0x0800b3f4
 80044ac:	40021000 	.word	0x40021000
 80044b0:	40007000 	.word	0x40007000
 80044b4:	42420440 	.word	0x42420440

080044b8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80044b8:	b590      	push	{r4, r7, lr}
 80044ba:	b08d      	sub	sp, #52	; 0x34
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80044c0:	4b7a      	ldr	r3, [pc, #488]	; (80046ac <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>)
 80044c2:	f107 040c 	add.w	r4, r7, #12
 80044c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80044c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80044cc:	f240 2301 	movw	r3, #513	; 0x201
 80044d0:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80044d2:	2300      	movs	r3, #0
 80044d4:	627b      	str	r3, [r7, #36]	; 0x24
 80044d6:	2300      	movs	r3, #0
 80044d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044da:	2300      	movs	r3, #0
 80044dc:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80044de:	2300      	movs	r3, #0
 80044e0:	61fb      	str	r3, [r7, #28]
 80044e2:	2300      	movs	r3, #0
 80044e4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f003 0301 	and.w	r3, r3, #1
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d118      	bne.n	8004522 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f003 0302 	and.w	r3, r3, #2
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d113      	bne.n	8004522 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f003 0304 	and.w	r3, r3, #4
 8004500:	2b00      	cmp	r3, #0
 8004502:	d10e      	bne.n	8004522 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f003 0308 	and.w	r3, r3, #8
 800450a:	2b00      	cmp	r3, #0
 800450c:	d109      	bne.n	8004522 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f003 0310 	and.w	r3, r3, #16
 8004514:	2b00      	cmp	r3, #0
 8004516:	d104      	bne.n	8004522 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 8004518:	f44f 71cb 	mov.w	r1, #406	; 0x196
 800451c:	4864      	ldr	r0, [pc, #400]	; (80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8>)
 800451e:	f7fd f899 	bl	8001654 <assert_failed>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	3b01      	subs	r3, #1
 8004526:	2b0f      	cmp	r3, #15
 8004528:	f200 80b6 	bhi.w	8004698 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800452c:	a201      	add	r2, pc, #4	; (adr r2, 8004534 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>)
 800452e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004532:	bf00      	nop
 8004534:	08004617 	.word	0x08004617
 8004538:	0800467d 	.word	0x0800467d
 800453c:	08004699 	.word	0x08004699
 8004540:	08004607 	.word	0x08004607
 8004544:	08004699 	.word	0x08004699
 8004548:	08004699 	.word	0x08004699
 800454c:	08004699 	.word	0x08004699
 8004550:	0800460f 	.word	0x0800460f
 8004554:	08004699 	.word	0x08004699
 8004558:	08004699 	.word	0x08004699
 800455c:	08004699 	.word	0x08004699
 8004560:	08004699 	.word	0x08004699
 8004564:	08004699 	.word	0x08004699
 8004568:	08004699 	.word	0x08004699
 800456c:	08004699 	.word	0x08004699
 8004570:	08004575 	.word	0x08004575
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8004574:	4b4f      	ldr	r3, [pc, #316]	; (80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	61fb      	str	r3, [r7, #28]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800457a:	4b4e      	ldr	r3, [pc, #312]	; (80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004582:	2b00      	cmp	r3, #0
 8004584:	f000 808a 	beq.w	800469c <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004588:	69fb      	ldr	r3, [r7, #28]
 800458a:	0c9b      	lsrs	r3, r3, #18
 800458c:	f003 030f 	and.w	r3, r3, #15
 8004590:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004594:	4413      	add	r3, r2
 8004596:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800459a:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d018      	beq.n	80045d8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80045a6:	4b43      	ldr	r3, [pc, #268]	; (80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	0c5b      	lsrs	r3, r3, #17
 80045ac:	f003 0301 	and.w	r3, r3, #1
 80045b0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80045b4:	4413      	add	r3, r2
 80045b6:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80045ba:	627b      	str	r3, [r7, #36]	; 0x24
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80045bc:	69fb      	ldr	r3, [r7, #28]
 80045be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d00d      	beq.n	80045e2 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80045c6:	4a3c      	ldr	r2, [pc, #240]	; (80046b8 <HAL_RCCEx_GetPeriphCLKFreq+0x200>)
 80045c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ca:	fbb2 f2f3 	udiv	r2, r2, r3
 80045ce:	6a3b      	ldr	r3, [r7, #32]
 80045d0:	fb02 f303 	mul.w	r3, r2, r3
 80045d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045d6:	e004      	b.n	80045e2 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80045d8:	6a3b      	ldr	r3, [r7, #32]
 80045da:	4a38      	ldr	r2, [pc, #224]	; (80046bc <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 80045dc:	fb02 f303 	mul.w	r3, r2, r3
 80045e0:	62fb      	str	r3, [r7, #44]	; 0x2c
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80045e2:	4b34      	ldr	r3, [pc, #208]	; (80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045ee:	d102      	bne.n	80045f6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 80045f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045f2:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 80045f4:	e052      	b.n	800469c <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
          frequency = (pllclk * 2) / 3;
 80045f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045f8:	005b      	lsls	r3, r3, #1
 80045fa:	4a31      	ldr	r2, [pc, #196]	; (80046c0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>)
 80045fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004600:	085b      	lsrs	r3, r3, #1
 8004602:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004604:	e04a      	b.n	800469c <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 8004606:	f7ff fd91 	bl	800412c <HAL_RCC_GetSysClockFreq>
 800460a:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 800460c:	e049      	b.n	80046a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 800460e:	f7ff fd8d 	bl	800412c <HAL_RCC_GetSysClockFreq>
 8004612:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8004614:	e045      	b.n	80046a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8004616:	4b27      	ldr	r3, [pc, #156]	; (80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 8004618:	6a1b      	ldr	r3, [r3, #32]
 800461a:	61fb      	str	r3, [r7, #28]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004622:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004626:	d108      	bne.n	800463a <HAL_RCCEx_GetPeriphCLKFreq+0x182>
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	f003 0302 	and.w	r3, r3, #2
 800462e:	2b00      	cmp	r3, #0
 8004630:	d003      	beq.n	800463a <HAL_RCCEx_GetPeriphCLKFreq+0x182>
      {
        frequency = LSE_VALUE;
 8004632:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004636:	62bb      	str	r3, [r7, #40]	; 0x28
 8004638:	e01f      	b.n	800467a <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004640:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004644:	d109      	bne.n	800465a <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 8004646:	4b1b      	ldr	r3, [pc, #108]	; (80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 8004648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464a:	f003 0302 	and.w	r3, r3, #2
 800464e:	2b00      	cmp	r3, #0
 8004650:	d003      	beq.n	800465a <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
      {
        frequency = LSI_VALUE;
 8004652:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004656:	62bb      	str	r3, [r7, #40]	; 0x28
 8004658:	e00f      	b.n	800467a <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800465a:	69fb      	ldr	r3, [r7, #28]
 800465c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004660:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004664:	d11c      	bne.n	80046a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
 8004666:	4b13      	ldr	r3, [pc, #76]	; (80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800466e:	2b00      	cmp	r3, #0
 8004670:	d016      	beq.n	80046a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
      {
        frequency = HSE_VALUE / 128U;
 8004672:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004676:	62bb      	str	r3, [r7, #40]	; 0x28
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8004678:	e012      	b.n	80046a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
 800467a:	e011      	b.n	80046a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800467c:	f7ff fdd4 	bl	8004228 <HAL_RCC_GetPCLK2Freq>
 8004680:	4602      	mov	r2, r0
 8004682:	4b0c      	ldr	r3, [pc, #48]	; (80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	0b9b      	lsrs	r3, r3, #14
 8004688:	f003 0303 	and.w	r3, r3, #3
 800468c:	3301      	adds	r3, #1
 800468e:	005b      	lsls	r3, r3, #1
 8004690:	fbb2 f3f3 	udiv	r3, r2, r3
 8004694:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004696:	e004      	b.n	80046a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
    }
    default:
    {
      break;
 8004698:	bf00      	nop
 800469a:	e002      	b.n	80046a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
      break;
 800469c:	bf00      	nop
 800469e:	e000      	b.n	80046a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
      break;
 80046a0:	bf00      	nop
    }
  }
  return (frequency);
 80046a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3734      	adds	r7, #52	; 0x34
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd90      	pop	{r4, r7, pc}
 80046ac:	0800b430 	.word	0x0800b430
 80046b0:	0800b3f4 	.word	0x0800b3f4
 80046b4:	40021000 	.word	0x40021000
 80046b8:	007a1200 	.word	0x007a1200
 80046bc:	003d0900 	.word	0x003d0900
 80046c0:	aaaaaaab 	.word	0xaaaaaaab

080046c4 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b084      	sub	sp, #16
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80046cc:	2300      	movs	r3, #0
 80046ce:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d101      	bne.n	80046da <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e0b4      	b.n	8004844 <HAL_RTC_Init+0x180>
  }

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a5b      	ldr	r2, [pc, #364]	; (800484c <HAL_RTC_Init+0x188>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d004      	beq.n	80046ee <HAL_RTC_Init+0x2a>
 80046e4:	f240 111d 	movw	r1, #285	; 0x11d
 80046e8:	4859      	ldr	r0, [pc, #356]	; (8004850 <HAL_RTC_Init+0x18c>)
 80046ea:	f7fc ffb3 	bl	8001654 <assert_failed>
  assert_param(IS_RTC_CALIB_OUTPUT(hrtc->Init.OutPut));
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d012      	beq.n	800471c <HAL_RTC_Init+0x58>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	2b80      	cmp	r3, #128	; 0x80
 80046fc:	d00e      	beq.n	800471c <HAL_RTC_Init+0x58>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004706:	d009      	beq.n	800471c <HAL_RTC_Init+0x58>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004710:	d004      	beq.n	800471c <HAL_RTC_Init+0x58>
 8004712:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8004716:	484e      	ldr	r0, [pc, #312]	; (8004850 <HAL_RTC_Init+0x18c>)
 8004718:	f7fc ff9c 	bl	8001654 <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004724:	d309      	bcc.n	800473a <HAL_RTC_Init+0x76>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800472e:	d004      	beq.n	800473a <HAL_RTC_Init+0x76>
 8004730:	f240 111f 	movw	r1, #287	; 0x11f
 8004734:	4846      	ldr	r0, [pc, #280]	; (8004850 <HAL_RTC_Init+0x18c>)
 8004736:	f7fc ff8d 	bl	8001654 <assert_failed>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	7c5b      	ldrb	r3, [r3, #17]
 800473e:	b2db      	uxtb	r3, r3
 8004740:	2b00      	cmp	r3, #0
 8004742:	d105      	bne.n	8004750 <HAL_RTC_Init+0x8c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f7fd f802 	bl	8001754 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2202      	movs	r2, #2
 8004754:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f000 fbca 	bl	8004ef0 <HAL_RTC_WaitForSynchro>
 800475c:	4603      	mov	r3, r0
 800475e:	2b00      	cmp	r3, #0
 8004760:	d004      	beq.n	800476c <HAL_RTC_Init+0xa8>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2204      	movs	r2, #4
 8004766:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	e06b      	b.n	8004844 <HAL_RTC_Init+0x180>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f000 fc83 	bl	8005078 <RTC_EnterInitMode>
 8004772:	4603      	mov	r3, r0
 8004774:	2b00      	cmp	r3, #0
 8004776:	d004      	beq.n	8004782 <HAL_RTC_Init+0xbe>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2204      	movs	r2, #4
 800477c:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e060      	b.n	8004844 <HAL_RTC_Init+0x180>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	685a      	ldr	r2, [r3, #4]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f022 0207 	bic.w	r2, r2, #7
 8004790:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d005      	beq.n	80047a6 <HAL_RTC_Init+0xe2>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800479a:	4b2e      	ldr	r3, [pc, #184]	; (8004854 <HAL_RTC_Init+0x190>)
 800479c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800479e:	4a2d      	ldr	r2, [pc, #180]	; (8004854 <HAL_RTC_Init+0x190>)
 80047a0:	f023 0301 	bic.w	r3, r3, #1
 80047a4:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80047a6:	4b2b      	ldr	r3, [pc, #172]	; (8004854 <HAL_RTC_Init+0x190>)
 80047a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047aa:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	4928      	ldr	r1, [pc, #160]	; (8004854 <HAL_RTC_Init+0x190>)
 80047b4:	4313      	orrs	r3, r2
 80047b6:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047c0:	d003      	beq.n	80047ca <HAL_RTC_Init+0x106>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	60fb      	str	r3, [r7, #12]
 80047c8:	e00e      	b.n	80047e8 <HAL_RTC_Init+0x124>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80047ca:	2001      	movs	r0, #1
 80047cc:	f7ff fe74 	bl	80044b8 <HAL_RCCEx_GetPeriphCLKFreq>
 80047d0:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d104      	bne.n	80047e2 <HAL_RTC_Init+0x11e>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2204      	movs	r2, #4
 80047dc:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e030      	b.n	8004844 <HAL_RTC_Init+0x180>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	3b01      	subs	r3, #1
 80047e6:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	f023 010f 	bic.w	r1, r3, #15
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	0c1a      	lsrs	r2, r3, #16
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	430a      	orrs	r2, r1
 80047fc:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	0c1b      	lsrs	r3, r3, #16
 8004806:	041b      	lsls	r3, r3, #16
 8004808:	68fa      	ldr	r2, [r7, #12]
 800480a:	b291      	uxth	r1, r2
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	6812      	ldr	r2, [r2, #0]
 8004810:	430b      	orrs	r3, r1
 8004812:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f000 fc57 	bl	80050c8 <RTC_ExitInitMode>
 800481a:	4603      	mov	r3, r0
 800481c:	2b00      	cmp	r3, #0
 800481e:	d004      	beq.n	800482a <HAL_RTC_Init+0x166>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2204      	movs	r2, #4
 8004824:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e00c      	b.n	8004844 <HAL_RTC_Init+0x180>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2200      	movs	r2, #0
 800482e:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2201      	movs	r2, #1
 800483a:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8004842:	2300      	movs	r3, #0
  }
}
 8004844:	4618      	mov	r0, r3
 8004846:	3710      	adds	r7, #16
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}
 800484c:	40002800 	.word	0x40002800
 8004850:	0800b440 	.word	0x0800b440
 8004854:	40006c00 	.word	0x40006c00

08004858 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004858:	b590      	push	{r4, r7, lr}
 800485a:	b087      	sub	sp, #28
 800485c:	af00      	add	r7, sp, #0
 800485e:	60f8      	str	r0, [r7, #12]
 8004860:	60b9      	str	r1, [r7, #8]
 8004862:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8004864:	2300      	movs	r3, #0
 8004866:	617b      	str	r3, [r7, #20]
 8004868:	2300      	movs	r3, #0
 800486a:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d002      	beq.n	8004878 <HAL_RTC_SetTime+0x20>
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d101      	bne.n	800487c <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	e0cd      	b.n	8004a18 <HAL_RTC_SetTime+0x1c0>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d007      	beq.n	8004892 <HAL_RTC_SetTime+0x3a>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2b01      	cmp	r3, #1
 8004886:	d004      	beq.n	8004892 <HAL_RTC_SetTime+0x3a>
 8004888:	f240 21ca 	movw	r1, #714	; 0x2ca
 800488c:	4864      	ldr	r0, [pc, #400]	; (8004a20 <HAL_RTC_SetTime+0x1c8>)
 800488e:	f7fc fee1 	bl	8001654 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	7c1b      	ldrb	r3, [r3, #16]
 8004896:	2b01      	cmp	r3, #1
 8004898:	d101      	bne.n	800489e <HAL_RTC_SetTime+0x46>
 800489a:	2302      	movs	r3, #2
 800489c:	e0bc      	b.n	8004a18 <HAL_RTC_SetTime+0x1c0>
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2201      	movs	r2, #1
 80048a2:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2202      	movs	r2, #2
 80048a8:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d12e      	bne.n	800490e <HAL_RTC_SetTime+0xb6>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	2b17      	cmp	r3, #23
 80048b6:	d904      	bls.n	80048c2 <HAL_RTC_SetTime+0x6a>
 80048b8:	f240 21d3 	movw	r1, #723	; 0x2d3
 80048bc:	4858      	ldr	r0, [pc, #352]	; (8004a20 <HAL_RTC_SetTime+0x1c8>)
 80048be:	f7fc fec9 	bl	8001654 <assert_failed>
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	785b      	ldrb	r3, [r3, #1]
 80048c6:	2b3b      	cmp	r3, #59	; 0x3b
 80048c8:	d904      	bls.n	80048d4 <HAL_RTC_SetTime+0x7c>
 80048ca:	f44f 7135 	mov.w	r1, #724	; 0x2d4
 80048ce:	4854      	ldr	r0, [pc, #336]	; (8004a20 <HAL_RTC_SetTime+0x1c8>)
 80048d0:	f7fc fec0 	bl	8001654 <assert_failed>
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	789b      	ldrb	r3, [r3, #2]
 80048d8:	2b3b      	cmp	r3, #59	; 0x3b
 80048da:	d904      	bls.n	80048e6 <HAL_RTC_SetTime+0x8e>
 80048dc:	f240 21d5 	movw	r1, #725	; 0x2d5
 80048e0:	484f      	ldr	r0, [pc, #316]	; (8004a20 <HAL_RTC_SetTime+0x1c8>)
 80048e2:	f7fc feb7 	bl	8001654 <assert_failed>

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	781b      	ldrb	r3, [r3, #0]
 80048ea:	461a      	mov	r2, r3
 80048ec:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80048f0:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	785b      	ldrb	r3, [r3, #1]
 80048f8:	4619      	mov	r1, r3
 80048fa:	460b      	mov	r3, r1
 80048fc:	011b      	lsls	r3, r3, #4
 80048fe:	1a5b      	subs	r3, r3, r1
 8004900:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8004902:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8004904:	68ba      	ldr	r2, [r7, #8]
 8004906:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8004908:	4413      	add	r3, r2
 800490a:	617b      	str	r3, [r7, #20]
 800490c:	e045      	b.n	800499a <HAL_RTC_SetTime+0x142>
  }
  else
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	781b      	ldrb	r3, [r3, #0]
 8004912:	4618      	mov	r0, r3
 8004914:	f000 fc1d 	bl	8005152 <RTC_Bcd2ToByte>
 8004918:	4603      	mov	r3, r0
 800491a:	2b17      	cmp	r3, #23
 800491c:	d904      	bls.n	8004928 <HAL_RTC_SetTime+0xd0>
 800491e:	f240 21dd 	movw	r1, #733	; 0x2dd
 8004922:	483f      	ldr	r0, [pc, #252]	; (8004a20 <HAL_RTC_SetTime+0x1c8>)
 8004924:	f7fc fe96 	bl	8001654 <assert_failed>
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	785b      	ldrb	r3, [r3, #1]
 800492c:	4618      	mov	r0, r3
 800492e:	f000 fc10 	bl	8005152 <RTC_Bcd2ToByte>
 8004932:	4603      	mov	r3, r0
 8004934:	2b3b      	cmp	r3, #59	; 0x3b
 8004936:	d904      	bls.n	8004942 <HAL_RTC_SetTime+0xea>
 8004938:	f240 21de 	movw	r1, #734	; 0x2de
 800493c:	4838      	ldr	r0, [pc, #224]	; (8004a20 <HAL_RTC_SetTime+0x1c8>)
 800493e:	f7fc fe89 	bl	8001654 <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	789b      	ldrb	r3, [r3, #2]
 8004946:	4618      	mov	r0, r3
 8004948:	f000 fc03 	bl	8005152 <RTC_Bcd2ToByte>
 800494c:	4603      	mov	r3, r0
 800494e:	2b3b      	cmp	r3, #59	; 0x3b
 8004950:	d904      	bls.n	800495c <HAL_RTC_SetTime+0x104>
 8004952:	f240 21df 	movw	r1, #735	; 0x2df
 8004956:	4832      	ldr	r0, [pc, #200]	; (8004a20 <HAL_RTC_SetTime+0x1c8>)
 8004958:	f7fc fe7c 	bl	8001654 <assert_failed>

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	781b      	ldrb	r3, [r3, #0]
 8004960:	4618      	mov	r0, r3
 8004962:	f000 fbf6 	bl	8005152 <RTC_Bcd2ToByte>
 8004966:	4603      	mov	r3, r0
 8004968:	461a      	mov	r2, r3
 800496a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800496e:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	785b      	ldrb	r3, [r3, #1]
 8004976:	4618      	mov	r0, r3
 8004978:	f000 fbeb 	bl	8005152 <RTC_Bcd2ToByte>
 800497c:	4603      	mov	r3, r0
 800497e:	461a      	mov	r2, r3
 8004980:	4613      	mov	r3, r2
 8004982:	011b      	lsls	r3, r3, #4
 8004984:	1a9b      	subs	r3, r3, r2
 8004986:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004988:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	789b      	ldrb	r3, [r3, #2]
 800498e:	4618      	mov	r0, r3
 8004990:	f000 fbdf 	bl	8005152 <RTC_Bcd2ToByte>
 8004994:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004996:	4423      	add	r3, r4
 8004998:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800499a:	6979      	ldr	r1, [r7, #20]
 800499c:	68f8      	ldr	r0, [r7, #12]
 800499e:	f000 fb04 	bl	8004faa <RTC_WriteTimeCounter>
 80049a2:	4603      	mov	r3, r0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d007      	beq.n	80049b8 <HAL_RTC_SetTime+0x160>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2204      	movs	r2, #4
 80049ac:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2200      	movs	r2, #0
 80049b2:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e02f      	b.n	8004a18 <HAL_RTC_SetTime+0x1c0>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	685a      	ldr	r2, [r3, #4]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f022 0205 	bic.w	r2, r2, #5
 80049c6:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80049c8:	68f8      	ldr	r0, [r7, #12]
 80049ca:	f000 fb15 	bl	8004ff8 <RTC_ReadAlarmCounter>
 80049ce:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049d6:	d018      	beq.n	8004a0a <HAL_RTC_SetTime+0x1b2>
    {
      if (counter_alarm < counter_time)
 80049d8:	693a      	ldr	r2, [r7, #16]
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d214      	bcs.n	8004a0a <HAL_RTC_SetTime+0x1b2>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80049e6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80049ea:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80049ec:	6939      	ldr	r1, [r7, #16]
 80049ee:	68f8      	ldr	r0, [r7, #12]
 80049f0:	f000 fb1b 	bl	800502a <RTC_WriteAlarmCounter>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d007      	beq.n	8004a0a <HAL_RTC_SetTime+0x1b2>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2204      	movs	r2, #4
 80049fe:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2200      	movs	r2, #0
 8004a04:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e006      	b.n	8004a18 <HAL_RTC_SetTime+0x1c0>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2200      	movs	r2, #0
 8004a14:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8004a16:	2300      	movs	r3, #0
  }
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	371c      	adds	r7, #28
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd90      	pop	{r4, r7, pc}
 8004a20:	0800b440 	.word	0x0800b440

08004a24 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b088      	sub	sp, #32
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8004a30:	2300      	movs	r3, #0
 8004a32:	61bb      	str	r3, [r7, #24]
 8004a34:	2300      	movs	r3, #0
 8004a36:	61fb      	str	r3, [r7, #28]
 8004a38:	2300      	movs	r3, #0
 8004a3a:	617b      	str	r3, [r7, #20]
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d002      	beq.n	8004a4c <HAL_RTC_GetTime+0x28>
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d101      	bne.n	8004a50 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e0c0      	b.n	8004bd2 <HAL_RTC_GetTime+0x1ae>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d007      	beq.n	8004a66 <HAL_RTC_GetTime+0x42>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d004      	beq.n	8004a66 <HAL_RTC_GetTime+0x42>
 8004a5c:	f240 312d 	movw	r1, #813	; 0x32d
 8004a60:	485e      	ldr	r0, [pc, #376]	; (8004bdc <HAL_RTC_GetTime+0x1b8>)
 8004a62:	f7fc fdf7 	bl	8001654 <assert_failed>

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	f003 0304 	and.w	r3, r3, #4
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d001      	beq.n	8004a78 <HAL_RTC_GetTime+0x54>
  {
    return HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e0ac      	b.n	8004bd2 <HAL_RTC_GetTime+0x1ae>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8004a78:	68f8      	ldr	r0, [r7, #12]
 8004a7a:	f000 fa66 	bl	8004f4a <RTC_ReadTimeCounter>
 8004a7e:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8004a80:	69bb      	ldr	r3, [r7, #24]
 8004a82:	4a57      	ldr	r2, [pc, #348]	; (8004be0 <HAL_RTC_GetTime+0x1bc>)
 8004a84:	fba2 2303 	umull	r2, r3, r2, r3
 8004a88:	0adb      	lsrs	r3, r3, #11
 8004a8a:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8004a8c:	69ba      	ldr	r2, [r7, #24]
 8004a8e:	4b54      	ldr	r3, [pc, #336]	; (8004be0 <HAL_RTC_GetTime+0x1bc>)
 8004a90:	fba3 1302 	umull	r1, r3, r3, r2
 8004a94:	0adb      	lsrs	r3, r3, #11
 8004a96:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8004a9a:	fb01 f303 	mul.w	r3, r1, r3
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	4a50      	ldr	r2, [pc, #320]	; (8004be4 <HAL_RTC_GetTime+0x1c0>)
 8004aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8004aa6:	095b      	lsrs	r3, r3, #5
 8004aa8:	b2da      	uxtb	r2, r3
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8004aae:	69bb      	ldr	r3, [r7, #24]
 8004ab0:	4a4b      	ldr	r2, [pc, #300]	; (8004be0 <HAL_RTC_GetTime+0x1bc>)
 8004ab2:	fba2 1203 	umull	r1, r2, r2, r3
 8004ab6:	0ad2      	lsrs	r2, r2, #11
 8004ab8:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8004abc:	fb01 f202 	mul.w	r2, r1, r2
 8004ac0:	1a9a      	subs	r2, r3, r2
 8004ac2:	4b48      	ldr	r3, [pc, #288]	; (8004be4 <HAL_RTC_GetTime+0x1c0>)
 8004ac4:	fba3 1302 	umull	r1, r3, r3, r2
 8004ac8:	0959      	lsrs	r1, r3, #5
 8004aca:	460b      	mov	r3, r1
 8004acc:	011b      	lsls	r3, r3, #4
 8004ace:	1a5b      	subs	r3, r3, r1
 8004ad0:	009b      	lsls	r3, r3, #2
 8004ad2:	1ad1      	subs	r1, r2, r3
 8004ad4:	b2ca      	uxtb	r2, r1
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	2b17      	cmp	r3, #23
 8004ade:	d955      	bls.n	8004b8c <HAL_RTC_GetTime+0x168>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	4a41      	ldr	r2, [pc, #260]	; (8004be8 <HAL_RTC_GetTime+0x1c4>)
 8004ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ae8:	091b      	lsrs	r3, r3, #4
 8004aea:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8004aec:	6939      	ldr	r1, [r7, #16]
 8004aee:	4b3e      	ldr	r3, [pc, #248]	; (8004be8 <HAL_RTC_GetTime+0x1c4>)
 8004af0:	fba3 2301 	umull	r2, r3, r3, r1
 8004af4:	091a      	lsrs	r2, r3, #4
 8004af6:	4613      	mov	r3, r2
 8004af8:	005b      	lsls	r3, r3, #1
 8004afa:	4413      	add	r3, r2
 8004afc:	00db      	lsls	r3, r3, #3
 8004afe:	1aca      	subs	r2, r1, r3
 8004b00:	b2d2      	uxtb	r2, r2
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004b06:	68f8      	ldr	r0, [r7, #12]
 8004b08:	f000 fa76 	bl	8004ff8 <RTC_ReadAlarmCounter>
 8004b0c:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8004b0e:	69fb      	ldr	r3, [r7, #28]
 8004b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b14:	d008      	beq.n	8004b28 <HAL_RTC_GetTime+0x104>
 8004b16:	69fa      	ldr	r2, [r7, #28]
 8004b18:	69bb      	ldr	r3, [r7, #24]
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d904      	bls.n	8004b28 <HAL_RTC_GetTime+0x104>
    {
      counter_alarm -= counter_time;
 8004b1e:	69fa      	ldr	r2, [r7, #28]
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	1ad3      	subs	r3, r2, r3
 8004b24:	61fb      	str	r3, [r7, #28]
 8004b26:	e002      	b.n	8004b2e <HAL_RTC_GetTime+0x10a>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8004b28:	f04f 33ff 	mov.w	r3, #4294967295
 8004b2c:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	4a2e      	ldr	r2, [pc, #184]	; (8004bec <HAL_RTC_GetTime+0x1c8>)
 8004b32:	fb02 f303 	mul.w	r3, r2, r3
 8004b36:	69ba      	ldr	r2, [r7, #24]
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004b3c:	69b9      	ldr	r1, [r7, #24]
 8004b3e:	68f8      	ldr	r0, [r7, #12]
 8004b40:	f000 fa33 	bl	8004faa <RTC_WriteTimeCounter>
 8004b44:	4603      	mov	r3, r0
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d001      	beq.n	8004b4e <HAL_RTC_GetTime+0x12a>
    {
      return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e041      	b.n	8004bd2 <HAL_RTC_GetTime+0x1ae>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004b4e:	69fb      	ldr	r3, [r7, #28]
 8004b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b54:	d00c      	beq.n	8004b70 <HAL_RTC_GetTime+0x14c>
    {
      counter_alarm += counter_time;
 8004b56:	69fa      	ldr	r2, [r7, #28]
 8004b58:	69bb      	ldr	r3, [r7, #24]
 8004b5a:	4413      	add	r3, r2
 8004b5c:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004b5e:	69f9      	ldr	r1, [r7, #28]
 8004b60:	68f8      	ldr	r0, [r7, #12]
 8004b62:	f000 fa62 	bl	800502a <RTC_WriteAlarmCounter>
 8004b66:	4603      	mov	r3, r0
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d00a      	beq.n	8004b82 <HAL_RTC_GetTime+0x15e>
      {
        return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e030      	b.n	8004bd2 <HAL_RTC_GetTime+0x1ae>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004b70:	69f9      	ldr	r1, [r7, #28]
 8004b72:	68f8      	ldr	r0, [r7, #12]
 8004b74:	f000 fa59 	bl	800502a <RTC_WriteAlarmCounter>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d001      	beq.n	8004b82 <HAL_RTC_GetTime+0x15e>
      {
        return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e027      	b.n	8004bd2 <HAL_RTC_GetTime+0x1ae>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8004b82:	6979      	ldr	r1, [r7, #20]
 8004b84:	68f8      	ldr	r0, [r7, #12]
 8004b86:	f000 fb01 	bl	800518c <RTC_DateUpdate>
 8004b8a:	e003      	b.n	8004b94 <HAL_RTC_GetTime+0x170>
  }
  else
  {
    sTime->Hours = hours;
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	b2da      	uxtb	r2, r3
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d01a      	beq.n	8004bd0 <HAL_RTC_GetTime+0x1ac>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f000 faba 	bl	8005118 <RTC_ByteToBcd2>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	785b      	ldrb	r3, [r3, #1]
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f000 fab1 	bl	8005118 <RTC_ByteToBcd2>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	461a      	mov	r2, r3
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	789b      	ldrb	r3, [r3, #2]
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f000 faa8 	bl	8005118 <RTC_ByteToBcd2>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	461a      	mov	r2, r3
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004bd0:	2300      	movs	r3, #0
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3720      	adds	r7, #32
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	bf00      	nop
 8004bdc:	0800b440 	.word	0x0800b440
 8004be0:	91a2b3c5 	.word	0x91a2b3c5
 8004be4:	88888889 	.word	0x88888889
 8004be8:	aaaaaaab 	.word	0xaaaaaaab
 8004bec:	00015180 	.word	0x00015180

08004bf0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b088      	sub	sp, #32
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	60f8      	str	r0, [r7, #12]
 8004bf8:	60b9      	str	r1, [r7, #8]
 8004bfa:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	61fb      	str	r3, [r7, #28]
 8004c00:	2300      	movs	r3, #0
 8004c02:	61bb      	str	r3, [r7, #24]
 8004c04:	2300      	movs	r3, #0
 8004c06:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d002      	beq.n	8004c14 <HAL_RTC_SetDate+0x24>
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d101      	bne.n	8004c18 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e0fc      	b.n	8004e12 <HAL_RTC_SetDate+0x222>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d007      	beq.n	8004c2e <HAL_RTC_SetDate+0x3e>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d004      	beq.n	8004c2e <HAL_RTC_SetDate+0x3e>
 8004c24:	f44f 7167 	mov.w	r1, #924	; 0x39c
 8004c28:	487c      	ldr	r0, [pc, #496]	; (8004e1c <HAL_RTC_SetDate+0x22c>)
 8004c2a:	f7fc fd13 	bl	8001654 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	7c1b      	ldrb	r3, [r3, #16]
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d101      	bne.n	8004c3a <HAL_RTC_SetDate+0x4a>
 8004c36:	2302      	movs	r3, #2
 8004c38:	e0eb      	b.n	8004e12 <HAL_RTC_SetDate+0x222>
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2202      	movs	r2, #2
 8004c44:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d12f      	bne.n	8004cac <HAL_RTC_SetDate+0xbc>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	78db      	ldrb	r3, [r3, #3]
 8004c50:	2b63      	cmp	r3, #99	; 0x63
 8004c52:	d904      	bls.n	8004c5e <HAL_RTC_SetDate+0x6e>
 8004c54:	f240 31a5 	movw	r1, #933	; 0x3a5
 8004c58:	4870      	ldr	r0, [pc, #448]	; (8004e1c <HAL_RTC_SetDate+0x22c>)
 8004c5a:	f7fc fcfb 	bl	8001654 <assert_failed>
    assert_param(IS_RTC_MONTH(sDate->Month));
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	785b      	ldrb	r3, [r3, #1]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d003      	beq.n	8004c6e <HAL_RTC_SetDate+0x7e>
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	785b      	ldrb	r3, [r3, #1]
 8004c6a:	2b0c      	cmp	r3, #12
 8004c6c:	d904      	bls.n	8004c78 <HAL_RTC_SetDate+0x88>
 8004c6e:	f240 31a6 	movw	r1, #934	; 0x3a6
 8004c72:	486a      	ldr	r0, [pc, #424]	; (8004e1c <HAL_RTC_SetDate+0x22c>)
 8004c74:	f7fc fcee 	bl	8001654 <assert_failed>
    assert_param(IS_RTC_DATE(sDate->Date));
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	789b      	ldrb	r3, [r3, #2]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d003      	beq.n	8004c88 <HAL_RTC_SetDate+0x98>
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	789b      	ldrb	r3, [r3, #2]
 8004c84:	2b1f      	cmp	r3, #31
 8004c86:	d904      	bls.n	8004c92 <HAL_RTC_SetDate+0xa2>
 8004c88:	f240 31a7 	movw	r1, #935	; 0x3a7
 8004c8c:	4863      	ldr	r0, [pc, #396]	; (8004e1c <HAL_RTC_SetDate+0x22c>)
 8004c8e:	f7fc fce1 	bl	8001654 <assert_failed>

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	78da      	ldrb	r2, [r3, #3]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	785a      	ldrb	r2, [r3, #1]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	789a      	ldrb	r2, [r3, #2]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	739a      	strb	r2, [r3, #14]
 8004caa:	e051      	b.n	8004d50 <HAL_RTC_SetDate+0x160>
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	78db      	ldrb	r3, [r3, #3]
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f000 fa4e 	bl	8005152 <RTC_Bcd2ToByte>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	2b63      	cmp	r3, #99	; 0x63
 8004cba:	d904      	bls.n	8004cc6 <HAL_RTC_SetDate+0xd6>
 8004cbc:	f44f 716c 	mov.w	r1, #944	; 0x3b0
 8004cc0:	4856      	ldr	r0, [pc, #344]	; (8004e1c <HAL_RTC_SetDate+0x22c>)
 8004cc2:	f7fc fcc7 	bl	8001654 <assert_failed>
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	785b      	ldrb	r3, [r3, #1]
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f000 fa41 	bl	8005152 <RTC_Bcd2ToByte>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d007      	beq.n	8004ce6 <HAL_RTC_SetDate+0xf6>
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	785b      	ldrb	r3, [r3, #1]
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f000 fa39 	bl	8005152 <RTC_Bcd2ToByte>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	2b0c      	cmp	r3, #12
 8004ce4:	d904      	bls.n	8004cf0 <HAL_RTC_SetDate+0x100>
 8004ce6:	f240 31b1 	movw	r1, #945	; 0x3b1
 8004cea:	484c      	ldr	r0, [pc, #304]	; (8004e1c <HAL_RTC_SetDate+0x22c>)
 8004cec:	f7fc fcb2 	bl	8001654 <assert_failed>
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	789b      	ldrb	r3, [r3, #2]
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f000 fa2c 	bl	8005152 <RTC_Bcd2ToByte>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d007      	beq.n	8004d10 <HAL_RTC_SetDate+0x120>
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	789b      	ldrb	r3, [r3, #2]
 8004d04:	4618      	mov	r0, r3
 8004d06:	f000 fa24 	bl	8005152 <RTC_Bcd2ToByte>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	2b1f      	cmp	r3, #31
 8004d0e:	d904      	bls.n	8004d1a <HAL_RTC_SetDate+0x12a>
 8004d10:	f240 31b2 	movw	r1, #946	; 0x3b2
 8004d14:	4841      	ldr	r0, [pc, #260]	; (8004e1c <HAL_RTC_SetDate+0x22c>)
 8004d16:	f7fc fc9d 	bl	8001654 <assert_failed>

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	78db      	ldrb	r3, [r3, #3]
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f000 fa17 	bl	8005152 <RTC_Bcd2ToByte>
 8004d24:	4603      	mov	r3, r0
 8004d26:	461a      	mov	r2, r3
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	785b      	ldrb	r3, [r3, #1]
 8004d30:	4618      	mov	r0, r3
 8004d32:	f000 fa0e 	bl	8005152 <RTC_Bcd2ToByte>
 8004d36:	4603      	mov	r3, r0
 8004d38:	461a      	mov	r2, r3
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	789b      	ldrb	r3, [r3, #2]
 8004d42:	4618      	mov	r0, r3
 8004d44:	f000 fa05 	bl	8005152 <RTC_Bcd2ToByte>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	7bdb      	ldrb	r3, [r3, #15]
 8004d54:	4618      	mov	r0, r3
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	7b59      	ldrb	r1, [r3, #13]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	7b9b      	ldrb	r3, [r3, #14]
 8004d5e:	461a      	mov	r2, r3
 8004d60:	f000 faf0 	bl	8005344 <RTC_WeekDayNum>
 8004d64:	4603      	mov	r3, r0
 8004d66:	461a      	mov	r2, r3
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	7b1a      	ldrb	r2, [r3, #12]
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8004d74:	68f8      	ldr	r0, [r7, #12]
 8004d76:	f000 f8e8 	bl	8004f4a <RTC_ReadTimeCounter>
 8004d7a:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8004d7c:	69fb      	ldr	r3, [r7, #28]
 8004d7e:	4a28      	ldr	r2, [pc, #160]	; (8004e20 <HAL_RTC_SetDate+0x230>)
 8004d80:	fba2 2303 	umull	r2, r3, r2, r3
 8004d84:	0adb      	lsrs	r3, r3, #11
 8004d86:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	2b18      	cmp	r3, #24
 8004d8c:	d93a      	bls.n	8004e04 <HAL_RTC_SetDate+0x214>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	4a24      	ldr	r2, [pc, #144]	; (8004e24 <HAL_RTC_SetDate+0x234>)
 8004d92:	fba2 2303 	umull	r2, r3, r2, r3
 8004d96:	091b      	lsrs	r3, r3, #4
 8004d98:	4a23      	ldr	r2, [pc, #140]	; (8004e28 <HAL_RTC_SetDate+0x238>)
 8004d9a:	fb02 f303 	mul.w	r3, r2, r3
 8004d9e:	69fa      	ldr	r2, [r7, #28]
 8004da0:	1ad3      	subs	r3, r2, r3
 8004da2:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004da4:	69f9      	ldr	r1, [r7, #28]
 8004da6:	68f8      	ldr	r0, [r7, #12]
 8004da8:	f000 f8ff 	bl	8004faa <RTC_WriteTimeCounter>
 8004dac:	4603      	mov	r3, r0
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d007      	beq.n	8004dc2 <HAL_RTC_SetDate+0x1d2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2204      	movs	r2, #4
 8004db6:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e027      	b.n	8004e12 <HAL_RTC_SetDate+0x222>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004dc2:	68f8      	ldr	r0, [r7, #12]
 8004dc4:	f000 f918 	bl	8004ff8 <RTC_ReadAlarmCounter>
 8004dc8:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004dca:	69bb      	ldr	r3, [r7, #24]
 8004dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dd0:	d018      	beq.n	8004e04 <HAL_RTC_SetDate+0x214>
    {
      if (counter_alarm < counter_time)
 8004dd2:	69ba      	ldr	r2, [r7, #24]
 8004dd4:	69fb      	ldr	r3, [r7, #28]
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d214      	bcs.n	8004e04 <HAL_RTC_SetDate+0x214>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8004dda:	69bb      	ldr	r3, [r7, #24]
 8004ddc:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8004de0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004de4:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004de6:	69b9      	ldr	r1, [r7, #24]
 8004de8:	68f8      	ldr	r0, [r7, #12]
 8004dea:	f000 f91e 	bl	800502a <RTC_WriteAlarmCounter>
 8004dee:	4603      	mov	r3, r0
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d007      	beq.n	8004e04 <HAL_RTC_SetDate+0x214>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2204      	movs	r2, #4
 8004df8:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	e006      	b.n	8004e12 <HAL_RTC_SetDate+0x222>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2201      	movs	r2, #1
 8004e08:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004e10:	2300      	movs	r3, #0
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3720      	adds	r7, #32
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}
 8004e1a:	bf00      	nop
 8004e1c:	0800b440 	.word	0x0800b440
 8004e20:	91a2b3c5 	.word	0x91a2b3c5
 8004e24:	aaaaaaab 	.word	0xaaaaaaab
 8004e28:	00015180 	.word	0x00015180

08004e2c <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b086      	sub	sp, #24
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	60f8      	str	r0, [r7, #12]
 8004e34:	60b9      	str	r1, [r7, #8]
 8004e36:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 8004e38:	f107 0314 	add.w	r3, r7, #20
 8004e3c:	2100      	movs	r1, #0
 8004e3e:	460a      	mov	r2, r1
 8004e40:	801a      	strh	r2, [r3, #0]
 8004e42:	460a      	mov	r2, r1
 8004e44:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d002      	beq.n	8004e52 <HAL_RTC_GetDate+0x26>
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d101      	bne.n	8004e56 <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e045      	b.n	8004ee2 <HAL_RTC_GetDate+0xb6>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d007      	beq.n	8004e6c <HAL_RTC_GetDate+0x40>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d004      	beq.n	8004e6c <HAL_RTC_GetDate+0x40>
 8004e62:	f240 410e 	movw	r1, #1038	; 0x40e
 8004e66:	4821      	ldr	r0, [pc, #132]	; (8004eec <HAL_RTC_GetDate+0xc0>)
 8004e68:	f7fc fbf4 	bl	8001654 <assert_failed>

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8004e6c:	f107 0314 	add.w	r3, r7, #20
 8004e70:	2200      	movs	r2, #0
 8004e72:	4619      	mov	r1, r3
 8004e74:	68f8      	ldr	r0, [r7, #12]
 8004e76:	f7ff fdd5 	bl	8004a24 <HAL_RTC_GetTime>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d001      	beq.n	8004e84 <HAL_RTC_GetDate+0x58>
  {
    return HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	e02e      	b.n	8004ee2 <HAL_RTC_GetDate+0xb6>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	7b1a      	ldrb	r2, [r3, #12]
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	7bda      	ldrb	r2, [r3, #15]
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	7b5a      	ldrb	r2, [r3, #13]
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	7b9a      	ldrb	r2, [r3, #14]
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d01a      	beq.n	8004ee0 <HAL_RTC_GetDate+0xb4>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	78db      	ldrb	r3, [r3, #3]
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f000 f932 	bl	8005118 <RTC_ByteToBcd2>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	785b      	ldrb	r3, [r3, #1]
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f000 f929 	bl	8005118 <RTC_ByteToBcd2>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	461a      	mov	r2, r3
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	789b      	ldrb	r3, [r3, #2]
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f000 f920 	bl	8005118 <RTC_ByteToBcd2>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	461a      	mov	r2, r3
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004ee0:	2300      	movs	r3, #0
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3718      	adds	r7, #24
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	bf00      	nop
 8004eec:	0800b440 	.word	0x0800b440

08004ef0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b084      	sub	sp, #16
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d101      	bne.n	8004f06 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	e01d      	b.n	8004f42 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	685a      	ldr	r2, [r3, #4]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f022 0208 	bic.w	r2, r2, #8
 8004f14:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004f16:	f7fd f849 	bl	8001fac <HAL_GetTick>
 8004f1a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004f1c:	e009      	b.n	8004f32 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004f1e:	f7fd f845 	bl	8001fac <HAL_GetTick>
 8004f22:	4602      	mov	r2, r0
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	1ad3      	subs	r3, r2, r3
 8004f28:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f2c:	d901      	bls.n	8004f32 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	e007      	b.n	8004f42 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	f003 0308 	and.w	r3, r3, #8
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d0ee      	beq.n	8004f1e <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8004f40:	2300      	movs	r3, #0
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3710      	adds	r7, #16
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}

08004f4a <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8004f4a:	b480      	push	{r7}
 8004f4c:	b087      	sub	sp, #28
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8004f52:	2300      	movs	r3, #0
 8004f54:	827b      	strh	r3, [r7, #18]
 8004f56:	2300      	movs	r3, #0
 8004f58:	823b      	strh	r3, [r7, #16]
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	699b      	ldr	r3, [r3, #24]
 8004f68:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	69db      	ldr	r3, [r3, #28]
 8004f70:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	699b      	ldr	r3, [r3, #24]
 8004f78:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8004f7a:	8a7a      	ldrh	r2, [r7, #18]
 8004f7c:	8a3b      	ldrh	r3, [r7, #16]
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d008      	beq.n	8004f94 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8004f82:	8a3b      	ldrh	r3, [r7, #16]
 8004f84:	041a      	lsls	r2, r3, #16
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	69db      	ldr	r3, [r3, #28]
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	617b      	str	r3, [r7, #20]
 8004f92:	e004      	b.n	8004f9e <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8004f94:	8a7b      	ldrh	r3, [r7, #18]
 8004f96:	041a      	lsls	r2, r3, #16
 8004f98:	89fb      	ldrh	r3, [r7, #14]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8004f9e:	697b      	ldr	r3, [r7, #20]
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	371c      	adds	r7, #28
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bc80      	pop	{r7}
 8004fa8:	4770      	bx	lr

08004faa <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8004faa:	b580      	push	{r7, lr}
 8004fac:	b084      	sub	sp, #16
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	6078      	str	r0, [r7, #4]
 8004fb2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f000 f85d 	bl	8005078 <RTC_EnterInitMode>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d002      	beq.n	8004fca <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	73fb      	strb	r3, [r7, #15]
 8004fc8:	e011      	b.n	8004fee <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	683a      	ldr	r2, [r7, #0]
 8004fd0:	0c12      	lsrs	r2, r2, #16
 8004fd2:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	683a      	ldr	r2, [r7, #0]
 8004fda:	b292      	uxth	r2, r2
 8004fdc:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f000 f872 	bl	80050c8 <RTC_ExitInitMode>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d001      	beq.n	8004fee <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004fee:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3710      	adds	r7, #16
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}

08004ff8 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b085      	sub	sp, #20
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8005000:	2300      	movs	r3, #0
 8005002:	81fb      	strh	r3, [r7, #14]
 8005004:	2300      	movs	r3, #0
 8005006:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	6a1b      	ldr	r3, [r3, #32]
 800500e:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005016:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8005018:	89fb      	ldrh	r3, [r7, #14]
 800501a:	041a      	lsls	r2, r3, #16
 800501c:	89bb      	ldrh	r3, [r7, #12]
 800501e:	4313      	orrs	r3, r2
}
 8005020:	4618      	mov	r0, r3
 8005022:	3714      	adds	r7, #20
 8005024:	46bd      	mov	sp, r7
 8005026:	bc80      	pop	{r7}
 8005028:	4770      	bx	lr

0800502a <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 800502a:	b580      	push	{r7, lr}
 800502c:	b084      	sub	sp, #16
 800502e:	af00      	add	r7, sp, #0
 8005030:	6078      	str	r0, [r7, #4]
 8005032:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005034:	2300      	movs	r3, #0
 8005036:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f000 f81d 	bl	8005078 <RTC_EnterInitMode>
 800503e:	4603      	mov	r3, r0
 8005040:	2b00      	cmp	r3, #0
 8005042:	d002      	beq.n	800504a <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	73fb      	strb	r3, [r7, #15]
 8005048:	e011      	b.n	800506e <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	683a      	ldr	r2, [r7, #0]
 8005050:	0c12      	lsrs	r2, r2, #16
 8005052:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	683a      	ldr	r2, [r7, #0]
 800505a:	b292      	uxth	r2, r2
 800505c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f000 f832 	bl	80050c8 <RTC_ExitInitMode>
 8005064:	4603      	mov	r3, r0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d001      	beq.n	800506e <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800506e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005070:	4618      	mov	r0, r3
 8005072:	3710      	adds	r7, #16
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}

08005078 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b084      	sub	sp, #16
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005080:	2300      	movs	r3, #0
 8005082:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8005084:	f7fc ff92 	bl	8001fac <HAL_GetTick>
 8005088:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800508a:	e009      	b.n	80050a0 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800508c:	f7fc ff8e 	bl	8001fac <HAL_GetTick>
 8005090:	4602      	mov	r2, r0
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	1ad3      	subs	r3, r2, r3
 8005096:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800509a:	d901      	bls.n	80050a0 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 800509c:	2303      	movs	r3, #3
 800509e:	e00f      	b.n	80050c0 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	f003 0320 	and.w	r3, r3, #32
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d0ee      	beq.n	800508c <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	685a      	ldr	r2, [r3, #4]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f042 0210 	orr.w	r2, r2, #16
 80050bc:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 80050be:	2300      	movs	r3, #0
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3710      	adds	r7, #16
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}

080050c8 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b084      	sub	sp, #16
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80050d0:	2300      	movs	r3, #0
 80050d2:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	685a      	ldr	r2, [r3, #4]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f022 0210 	bic.w	r2, r2, #16
 80050e2:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80050e4:	f7fc ff62 	bl	8001fac <HAL_GetTick>
 80050e8:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80050ea:	e009      	b.n	8005100 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80050ec:	f7fc ff5e 	bl	8001fac <HAL_GetTick>
 80050f0:	4602      	mov	r2, r0
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80050fa:	d901      	bls.n	8005100 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 80050fc:	2303      	movs	r3, #3
 80050fe:	e007      	b.n	8005110 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	f003 0320 	and.w	r3, r3, #32
 800510a:	2b00      	cmp	r3, #0
 800510c:	d0ee      	beq.n	80050ec <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 800510e:	2300      	movs	r3, #0
}
 8005110:	4618      	mov	r0, r3
 8005112:	3710      	adds	r7, #16
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}

08005118 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005118:	b480      	push	{r7}
 800511a:	b085      	sub	sp, #20
 800511c:	af00      	add	r7, sp, #0
 800511e:	4603      	mov	r3, r0
 8005120:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005122:	2300      	movs	r3, #0
 8005124:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8005126:	e005      	b.n	8005134 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	3301      	adds	r3, #1
 800512c:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800512e:	79fb      	ldrb	r3, [r7, #7]
 8005130:	3b0a      	subs	r3, #10
 8005132:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8005134:	79fb      	ldrb	r3, [r7, #7]
 8005136:	2b09      	cmp	r3, #9
 8005138:	d8f6      	bhi.n	8005128 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	b2db      	uxtb	r3, r3
 800513e:	011b      	lsls	r3, r3, #4
 8005140:	b2da      	uxtb	r2, r3
 8005142:	79fb      	ldrb	r3, [r7, #7]
 8005144:	4313      	orrs	r3, r2
 8005146:	b2db      	uxtb	r3, r3
}
 8005148:	4618      	mov	r0, r3
 800514a:	3714      	adds	r7, #20
 800514c:	46bd      	mov	sp, r7
 800514e:	bc80      	pop	{r7}
 8005150:	4770      	bx	lr

08005152 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005152:	b480      	push	{r7}
 8005154:	b085      	sub	sp, #20
 8005156:	af00      	add	r7, sp, #0
 8005158:	4603      	mov	r3, r0
 800515a:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800515c:	2300      	movs	r3, #0
 800515e:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8005160:	79fb      	ldrb	r3, [r7, #7]
 8005162:	091b      	lsrs	r3, r3, #4
 8005164:	b2db      	uxtb	r3, r3
 8005166:	461a      	mov	r2, r3
 8005168:	4613      	mov	r3, r2
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	4413      	add	r3, r2
 800516e:	005b      	lsls	r3, r3, #1
 8005170:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8005172:	79fb      	ldrb	r3, [r7, #7]
 8005174:	f003 030f 	and.w	r3, r3, #15
 8005178:	b2da      	uxtb	r2, r3
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	b2db      	uxtb	r3, r3
 800517e:	4413      	add	r3, r2
 8005180:	b2db      	uxtb	r3, r3
}
 8005182:	4618      	mov	r0, r3
 8005184:	3714      	adds	r7, #20
 8005186:	46bd      	mov	sp, r7
 8005188:	bc80      	pop	{r7}
 800518a:	4770      	bx	lr

0800518c <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b086      	sub	sp, #24
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8005196:	2300      	movs	r3, #0
 8005198:	617b      	str	r3, [r7, #20]
 800519a:	2300      	movs	r3, #0
 800519c:	613b      	str	r3, [r7, #16]
 800519e:	2300      	movs	r3, #0
 80051a0:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 80051a2:	2300      	movs	r3, #0
 80051a4:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	7bdb      	ldrb	r3, [r3, #15]
 80051aa:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	7b5b      	ldrb	r3, [r3, #13]
 80051b0:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	7b9b      	ldrb	r3, [r3, #14]
 80051b6:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 80051b8:	2300      	movs	r3, #0
 80051ba:	60bb      	str	r3, [r7, #8]
 80051bc:	e06f      	b.n	800529e <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d011      	beq.n	80051e8 <RTC_DateUpdate+0x5c>
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	2b03      	cmp	r3, #3
 80051c8:	d00e      	beq.n	80051e8 <RTC_DateUpdate+0x5c>
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	2b05      	cmp	r3, #5
 80051ce:	d00b      	beq.n	80051e8 <RTC_DateUpdate+0x5c>
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	2b07      	cmp	r3, #7
 80051d4:	d008      	beq.n	80051e8 <RTC_DateUpdate+0x5c>
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	2b08      	cmp	r3, #8
 80051da:	d005      	beq.n	80051e8 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	2b0a      	cmp	r3, #10
 80051e0:	d002      	beq.n	80051e8 <RTC_DateUpdate+0x5c>
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	2b0c      	cmp	r3, #12
 80051e6:	d117      	bne.n	8005218 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2b1e      	cmp	r3, #30
 80051ec:	d803      	bhi.n	80051f6 <RTC_DateUpdate+0x6a>
      {
        day++;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	3301      	adds	r3, #1
 80051f2:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80051f4:	e050      	b.n	8005298 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	2b0c      	cmp	r3, #12
 80051fa:	d005      	beq.n	8005208 <RTC_DateUpdate+0x7c>
        {
          month++;
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	3301      	adds	r3, #1
 8005200:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005202:	2301      	movs	r3, #1
 8005204:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8005206:	e047      	b.n	8005298 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8005208:	2301      	movs	r3, #1
 800520a:	613b      	str	r3, [r7, #16]
          day = 1U;
 800520c:	2301      	movs	r3, #1
 800520e:	60fb      	str	r3, [r7, #12]
          year++;
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	3301      	adds	r3, #1
 8005214:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8005216:	e03f      	b.n	8005298 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	2b04      	cmp	r3, #4
 800521c:	d008      	beq.n	8005230 <RTC_DateUpdate+0xa4>
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	2b06      	cmp	r3, #6
 8005222:	d005      	beq.n	8005230 <RTC_DateUpdate+0xa4>
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	2b09      	cmp	r3, #9
 8005228:	d002      	beq.n	8005230 <RTC_DateUpdate+0xa4>
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	2b0b      	cmp	r3, #11
 800522e:	d10c      	bne.n	800524a <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2b1d      	cmp	r3, #29
 8005234:	d803      	bhi.n	800523e <RTC_DateUpdate+0xb2>
      {
        day++;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	3301      	adds	r3, #1
 800523a:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 800523c:	e02c      	b.n	8005298 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	3301      	adds	r3, #1
 8005242:	613b      	str	r3, [r7, #16]
        day = 1U;
 8005244:	2301      	movs	r3, #1
 8005246:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8005248:	e026      	b.n	8005298 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	2b02      	cmp	r3, #2
 800524e:	d123      	bne.n	8005298 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2b1b      	cmp	r3, #27
 8005254:	d803      	bhi.n	800525e <RTC_DateUpdate+0xd2>
      {
        day++;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	3301      	adds	r3, #1
 800525a:	60fb      	str	r3, [r7, #12]
 800525c:	e01c      	b.n	8005298 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2b1c      	cmp	r3, #28
 8005262:	d111      	bne.n	8005288 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	b29b      	uxth	r3, r3
 8005268:	4618      	mov	r0, r3
 800526a:	f000 f839 	bl	80052e0 <RTC_IsLeapYear>
 800526e:	4603      	mov	r3, r0
 8005270:	2b00      	cmp	r3, #0
 8005272:	d003      	beq.n	800527c <RTC_DateUpdate+0xf0>
        {
          day++;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	3301      	adds	r3, #1
 8005278:	60fb      	str	r3, [r7, #12]
 800527a:	e00d      	b.n	8005298 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	3301      	adds	r3, #1
 8005280:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005282:	2301      	movs	r3, #1
 8005284:	60fb      	str	r3, [r7, #12]
 8005286:	e007      	b.n	8005298 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2b1d      	cmp	r3, #29
 800528c:	d104      	bne.n	8005298 <RTC_DateUpdate+0x10c>
      {
        month++;
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	3301      	adds	r3, #1
 8005292:	613b      	str	r3, [r7, #16]
        day = 1U;
 8005294:	2301      	movs	r3, #1
 8005296:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	3301      	adds	r3, #1
 800529c:	60bb      	str	r3, [r7, #8]
 800529e:	68ba      	ldr	r2, [r7, #8]
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	429a      	cmp	r2, r3
 80052a4:	d38b      	bcc.n	80051be <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	b2da      	uxtb	r2, r3
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	b2da      	uxtb	r2, r3
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	b2da      	uxtb	r2, r3
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	68fa      	ldr	r2, [r7, #12]
 80052c4:	b2d2      	uxtb	r2, r2
 80052c6:	4619      	mov	r1, r3
 80052c8:	6978      	ldr	r0, [r7, #20]
 80052ca:	f000 f83b 	bl	8005344 <RTC_WeekDayNum>
 80052ce:	4603      	mov	r3, r0
 80052d0:	461a      	mov	r2, r3
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	731a      	strb	r2, [r3, #12]
}
 80052d6:	bf00      	nop
 80052d8:	3718      	adds	r7, #24
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}
	...

080052e0 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b083      	sub	sp, #12
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	4603      	mov	r3, r0
 80052e8:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 80052ea:	88fb      	ldrh	r3, [r7, #6]
 80052ec:	f003 0303 	and.w	r3, r3, #3
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d001      	beq.n	80052fa <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 80052f6:	2300      	movs	r3, #0
 80052f8:	e01d      	b.n	8005336 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 80052fa:	88fb      	ldrh	r3, [r7, #6]
 80052fc:	4a10      	ldr	r2, [pc, #64]	; (8005340 <RTC_IsLeapYear+0x60>)
 80052fe:	fba2 1203 	umull	r1, r2, r2, r3
 8005302:	0952      	lsrs	r2, r2, #5
 8005304:	2164      	movs	r1, #100	; 0x64
 8005306:	fb01 f202 	mul.w	r2, r1, r2
 800530a:	1a9b      	subs	r3, r3, r2
 800530c:	b29b      	uxth	r3, r3
 800530e:	2b00      	cmp	r3, #0
 8005310:	d001      	beq.n	8005316 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8005312:	2301      	movs	r3, #1
 8005314:	e00f      	b.n	8005336 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8005316:	88fb      	ldrh	r3, [r7, #6]
 8005318:	4a09      	ldr	r2, [pc, #36]	; (8005340 <RTC_IsLeapYear+0x60>)
 800531a:	fba2 1203 	umull	r1, r2, r2, r3
 800531e:	09d2      	lsrs	r2, r2, #7
 8005320:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005324:	fb01 f202 	mul.w	r2, r1, r2
 8005328:	1a9b      	subs	r3, r3, r2
 800532a:	b29b      	uxth	r3, r3
 800532c:	2b00      	cmp	r3, #0
 800532e:	d101      	bne.n	8005334 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8005330:	2301      	movs	r3, #1
 8005332:	e000      	b.n	8005336 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8005334:	2300      	movs	r3, #0
  }
}
 8005336:	4618      	mov	r0, r3
 8005338:	370c      	adds	r7, #12
 800533a:	46bd      	mov	sp, r7
 800533c:	bc80      	pop	{r7}
 800533e:	4770      	bx	lr
 8005340:	51eb851f 	.word	0x51eb851f

08005344 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8005344:	b480      	push	{r7}
 8005346:	b085      	sub	sp, #20
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	460b      	mov	r3, r1
 800534e:	70fb      	strb	r3, [r7, #3]
 8005350:	4613      	mov	r3, r2
 8005352:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8005354:	2300      	movs	r3, #0
 8005356:	60bb      	str	r3, [r7, #8]
 8005358:	2300      	movs	r3, #0
 800535a:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8005362:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8005364:	78fb      	ldrb	r3, [r7, #3]
 8005366:	2b02      	cmp	r3, #2
 8005368:	d82d      	bhi.n	80053c6 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 800536a:	78fa      	ldrb	r2, [r7, #3]
 800536c:	4613      	mov	r3, r2
 800536e:	005b      	lsls	r3, r3, #1
 8005370:	4413      	add	r3, r2
 8005372:	00db      	lsls	r3, r3, #3
 8005374:	1a9b      	subs	r3, r3, r2
 8005376:	4a2c      	ldr	r2, [pc, #176]	; (8005428 <RTC_WeekDayNum+0xe4>)
 8005378:	fba2 2303 	umull	r2, r3, r2, r3
 800537c:	085a      	lsrs	r2, r3, #1
 800537e:	78bb      	ldrb	r3, [r7, #2]
 8005380:	441a      	add	r2, r3
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	441a      	add	r2, r3
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	3b01      	subs	r3, #1
 800538a:	089b      	lsrs	r3, r3, #2
 800538c:	441a      	add	r2, r3
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	3b01      	subs	r3, #1
 8005392:	4926      	ldr	r1, [pc, #152]	; (800542c <RTC_WeekDayNum+0xe8>)
 8005394:	fba1 1303 	umull	r1, r3, r1, r3
 8005398:	095b      	lsrs	r3, r3, #5
 800539a:	1ad2      	subs	r2, r2, r3
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	3b01      	subs	r3, #1
 80053a0:	4922      	ldr	r1, [pc, #136]	; (800542c <RTC_WeekDayNum+0xe8>)
 80053a2:	fba1 1303 	umull	r1, r3, r1, r3
 80053a6:	09db      	lsrs	r3, r3, #7
 80053a8:	4413      	add	r3, r2
 80053aa:	1d1a      	adds	r2, r3, #4
 80053ac:	4b20      	ldr	r3, [pc, #128]	; (8005430 <RTC_WeekDayNum+0xec>)
 80053ae:	fba3 1302 	umull	r1, r3, r3, r2
 80053b2:	1ad1      	subs	r1, r2, r3
 80053b4:	0849      	lsrs	r1, r1, #1
 80053b6:	440b      	add	r3, r1
 80053b8:	0899      	lsrs	r1, r3, #2
 80053ba:	460b      	mov	r3, r1
 80053bc:	00db      	lsls	r3, r3, #3
 80053be:	1a5b      	subs	r3, r3, r1
 80053c0:	1ad3      	subs	r3, r2, r3
 80053c2:	60fb      	str	r3, [r7, #12]
 80053c4:	e029      	b.n	800541a <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 80053c6:	78fa      	ldrb	r2, [r7, #3]
 80053c8:	4613      	mov	r3, r2
 80053ca:	005b      	lsls	r3, r3, #1
 80053cc:	4413      	add	r3, r2
 80053ce:	00db      	lsls	r3, r3, #3
 80053d0:	1a9b      	subs	r3, r3, r2
 80053d2:	4a15      	ldr	r2, [pc, #84]	; (8005428 <RTC_WeekDayNum+0xe4>)
 80053d4:	fba2 2303 	umull	r2, r3, r2, r3
 80053d8:	085a      	lsrs	r2, r3, #1
 80053da:	78bb      	ldrb	r3, [r7, #2]
 80053dc:	441a      	add	r2, r3
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	441a      	add	r2, r3
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	089b      	lsrs	r3, r3, #2
 80053e6:	441a      	add	r2, r3
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	4910      	ldr	r1, [pc, #64]	; (800542c <RTC_WeekDayNum+0xe8>)
 80053ec:	fba1 1303 	umull	r1, r3, r1, r3
 80053f0:	095b      	lsrs	r3, r3, #5
 80053f2:	1ad2      	subs	r2, r2, r3
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	490d      	ldr	r1, [pc, #52]	; (800542c <RTC_WeekDayNum+0xe8>)
 80053f8:	fba1 1303 	umull	r1, r3, r1, r3
 80053fc:	09db      	lsrs	r3, r3, #7
 80053fe:	4413      	add	r3, r2
 8005400:	1c9a      	adds	r2, r3, #2
 8005402:	4b0b      	ldr	r3, [pc, #44]	; (8005430 <RTC_WeekDayNum+0xec>)
 8005404:	fba3 1302 	umull	r1, r3, r3, r2
 8005408:	1ad1      	subs	r1, r2, r3
 800540a:	0849      	lsrs	r1, r1, #1
 800540c:	440b      	add	r3, r1
 800540e:	0899      	lsrs	r1, r3, #2
 8005410:	460b      	mov	r3, r1
 8005412:	00db      	lsls	r3, r3, #3
 8005414:	1a5b      	subs	r3, r3, r1
 8005416:	1ad3      	subs	r3, r2, r3
 8005418:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	b2db      	uxtb	r3, r3
}
 800541e:	4618      	mov	r0, r3
 8005420:	3714      	adds	r7, #20
 8005422:	46bd      	mov	sp, r7
 8005424:	bc80      	pop	{r7}
 8005426:	4770      	bx	lr
 8005428:	38e38e39 	.word	0x38e38e39
 800542c:	51eb851f 	.word	0x51eb851f
 8005430:	24924925 	.word	0x24924925

08005434 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b082      	sub	sp, #8
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d101      	bne.n	8005446 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	e0b2      	b.n	80055ac <HAL_TIM_Base_Init+0x178>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a5a      	ldr	r2, [pc, #360]	; (80055b4 <HAL_TIM_Base_Init+0x180>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d027      	beq.n	80054a0 <HAL_TIM_Base_Init+0x6c>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a58      	ldr	r2, [pc, #352]	; (80055b8 <HAL_TIM_Base_Init+0x184>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d022      	beq.n	80054a0 <HAL_TIM_Base_Init+0x6c>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005462:	d01d      	beq.n	80054a0 <HAL_TIM_Base_Init+0x6c>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a54      	ldr	r2, [pc, #336]	; (80055bc <HAL_TIM_Base_Init+0x188>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d018      	beq.n	80054a0 <HAL_TIM_Base_Init+0x6c>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a53      	ldr	r2, [pc, #332]	; (80055c0 <HAL_TIM_Base_Init+0x18c>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d013      	beq.n	80054a0 <HAL_TIM_Base_Init+0x6c>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a51      	ldr	r2, [pc, #324]	; (80055c4 <HAL_TIM_Base_Init+0x190>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d00e      	beq.n	80054a0 <HAL_TIM_Base_Init+0x6c>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a50      	ldr	r2, [pc, #320]	; (80055c8 <HAL_TIM_Base_Init+0x194>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d009      	beq.n	80054a0 <HAL_TIM_Base_Init+0x6c>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a4e      	ldr	r2, [pc, #312]	; (80055cc <HAL_TIM_Base_Init+0x198>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d004      	beq.n	80054a0 <HAL_TIM_Base_Init+0x6c>
 8005496:	f240 1113 	movw	r1, #275	; 0x113
 800549a:	484d      	ldr	r0, [pc, #308]	; (80055d0 <HAL_TIM_Base_Init+0x19c>)
 800549c:	f7fc f8da 	bl	8001654 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d014      	beq.n	80054d2 <HAL_TIM_Base_Init+0x9e>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	2b10      	cmp	r3, #16
 80054ae:	d010      	beq.n	80054d2 <HAL_TIM_Base_Init+0x9e>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	2b20      	cmp	r3, #32
 80054b6:	d00c      	beq.n	80054d2 <HAL_TIM_Base_Init+0x9e>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	2b40      	cmp	r3, #64	; 0x40
 80054be:	d008      	beq.n	80054d2 <HAL_TIM_Base_Init+0x9e>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	2b60      	cmp	r3, #96	; 0x60
 80054c6:	d004      	beq.n	80054d2 <HAL_TIM_Base_Init+0x9e>
 80054c8:	f44f 718a 	mov.w	r1, #276	; 0x114
 80054cc:	4840      	ldr	r0, [pc, #256]	; (80055d0 <HAL_TIM_Base_Init+0x19c>)
 80054ce:	f7fc f8c1 	bl	8001654 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	691b      	ldr	r3, [r3, #16]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d00e      	beq.n	80054f8 <HAL_TIM_Base_Init+0xc4>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	691b      	ldr	r3, [r3, #16]
 80054de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054e2:	d009      	beq.n	80054f8 <HAL_TIM_Base_Init+0xc4>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	691b      	ldr	r3, [r3, #16]
 80054e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054ec:	d004      	beq.n	80054f8 <HAL_TIM_Base_Init+0xc4>
 80054ee:	f240 1115 	movw	r1, #277	; 0x115
 80054f2:	4837      	ldr	r0, [pc, #220]	; (80055d0 <HAL_TIM_Base_Init+0x19c>)
 80054f4:	f7fc f8ae 	bl	8001654 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	699b      	ldr	r3, [r3, #24]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d008      	beq.n	8005512 <HAL_TIM_Base_Init+0xde>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	699b      	ldr	r3, [r3, #24]
 8005504:	2b80      	cmp	r3, #128	; 0x80
 8005506:	d004      	beq.n	8005512 <HAL_TIM_Base_Init+0xde>
 8005508:	f44f 718b 	mov.w	r1, #278	; 0x116
 800550c:	4830      	ldr	r0, [pc, #192]	; (80055d0 <HAL_TIM_Base_Init+0x19c>)
 800550e:	f7fc f8a1 	bl	8001654 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005518:	b2db      	uxtb	r3, r3
 800551a:	2b00      	cmp	r3, #0
 800551c:	d111      	bne.n	8005542 <HAL_TIM_Base_Init+0x10e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2200      	movs	r2, #0
 8005522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f001 ffc0 	bl	80074ac <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005530:	2b00      	cmp	r3, #0
 8005532:	d102      	bne.n	800553a <HAL_TIM_Base_Init+0x106>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	4a27      	ldr	r2, [pc, #156]	; (80055d4 <HAL_TIM_Base_Init+0x1a0>)
 8005538:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2202      	movs	r2, #2
 8005546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	3304      	adds	r3, #4
 8005552:	4619      	mov	r1, r3
 8005554:	4610      	mov	r0, r2
 8005556:	f001 fbff 	bl	8006d58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2201      	movs	r2, #1
 800555e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2201      	movs	r2, #1
 8005566:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2201      	movs	r2, #1
 800556e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2201      	movs	r2, #1
 8005576:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2201      	movs	r2, #1
 800557e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2201      	movs	r2, #1
 8005586:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2201      	movs	r2, #1
 800558e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2201      	movs	r2, #1
 8005596:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2201      	movs	r2, #1
 800559e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2201      	movs	r2, #1
 80055a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055aa:	2300      	movs	r3, #0
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	3708      	adds	r7, #8
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}
 80055b4:	40012c00 	.word	0x40012c00
 80055b8:	40013400 	.word	0x40013400
 80055bc:	40000400 	.word	0x40000400
 80055c0:	40000800 	.word	0x40000800
 80055c4:	40000c00 	.word	0x40000c00
 80055c8:	40001000 	.word	0x40001000
 80055cc:	40001400 	.word	0x40001400
 80055d0:	0800b478 	.word	0x0800b478
 80055d4:	0800179d 	.word	0x0800179d

080055d8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b084      	sub	sp, #16
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a39      	ldr	r2, [pc, #228]	; (80056cc <HAL_TIM_Base_Start+0xf4>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d027      	beq.n	800563a <HAL_TIM_Base_Start+0x62>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a38      	ldr	r2, [pc, #224]	; (80056d0 <HAL_TIM_Base_Start+0xf8>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d022      	beq.n	800563a <HAL_TIM_Base_Start+0x62>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055fc:	d01d      	beq.n	800563a <HAL_TIM_Base_Start+0x62>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a34      	ldr	r2, [pc, #208]	; (80056d4 <HAL_TIM_Base_Start+0xfc>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d018      	beq.n	800563a <HAL_TIM_Base_Start+0x62>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a32      	ldr	r2, [pc, #200]	; (80056d8 <HAL_TIM_Base_Start+0x100>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d013      	beq.n	800563a <HAL_TIM_Base_Start+0x62>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a31      	ldr	r2, [pc, #196]	; (80056dc <HAL_TIM_Base_Start+0x104>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d00e      	beq.n	800563a <HAL_TIM_Base_Start+0x62>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a2f      	ldr	r2, [pc, #188]	; (80056e0 <HAL_TIM_Base_Start+0x108>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d009      	beq.n	800563a <HAL_TIM_Base_Start+0x62>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a2e      	ldr	r2, [pc, #184]	; (80056e4 <HAL_TIM_Base_Start+0x10c>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d004      	beq.n	800563a <HAL_TIM_Base_Start+0x62>
 8005630:	f44f 71ca 	mov.w	r1, #404	; 0x194
 8005634:	482c      	ldr	r0, [pc, #176]	; (80056e8 <HAL_TIM_Base_Start+0x110>)
 8005636:	f7fc f80d 	bl	8001654 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005640:	b2db      	uxtb	r3, r3
 8005642:	2b01      	cmp	r3, #1
 8005644:	d001      	beq.n	800564a <HAL_TIM_Base_Start+0x72>
  {
    return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e03c      	b.n	80056c4 <HAL_TIM_Base_Start+0xec>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2202      	movs	r2, #2
 800564e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a1d      	ldr	r2, [pc, #116]	; (80056cc <HAL_TIM_Base_Start+0xf4>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d018      	beq.n	800568e <HAL_TIM_Base_Start+0xb6>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a1b      	ldr	r2, [pc, #108]	; (80056d0 <HAL_TIM_Base_Start+0xf8>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d013      	beq.n	800568e <HAL_TIM_Base_Start+0xb6>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800566e:	d00e      	beq.n	800568e <HAL_TIM_Base_Start+0xb6>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a17      	ldr	r2, [pc, #92]	; (80056d4 <HAL_TIM_Base_Start+0xfc>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d009      	beq.n	800568e <HAL_TIM_Base_Start+0xb6>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a16      	ldr	r2, [pc, #88]	; (80056d8 <HAL_TIM_Base_Start+0x100>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d004      	beq.n	800568e <HAL_TIM_Base_Start+0xb6>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a14      	ldr	r2, [pc, #80]	; (80056dc <HAL_TIM_Base_Start+0x104>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d111      	bne.n	80056b2 <HAL_TIM_Base_Start+0xda>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	f003 0307 	and.w	r3, r3, #7
 8005698:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2b06      	cmp	r3, #6
 800569e:	d010      	beq.n	80056c2 <HAL_TIM_Base_Start+0xea>
    {
      __HAL_TIM_ENABLE(htim);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	681a      	ldr	r2, [r3, #0]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f042 0201 	orr.w	r2, r2, #1
 80056ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056b0:	e007      	b.n	80056c2 <HAL_TIM_Base_Start+0xea>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f042 0201 	orr.w	r2, r2, #1
 80056c0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80056c2:	2300      	movs	r3, #0
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	3710      	adds	r7, #16
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}
 80056cc:	40012c00 	.word	0x40012c00
 80056d0:	40013400 	.word	0x40013400
 80056d4:	40000400 	.word	0x40000400
 80056d8:	40000800 	.word	0x40000800
 80056dc:	40000c00 	.word	0x40000c00
 80056e0:	40001000 	.word	0x40001000
 80056e4:	40001400 	.word	0x40001400
 80056e8:	0800b478 	.word	0x0800b478

080056ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b084      	sub	sp, #16
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a3d      	ldr	r2, [pc, #244]	; (80057f0 <HAL_TIM_Base_Start_IT+0x104>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d027      	beq.n	800574e <HAL_TIM_Base_Start_IT+0x62>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a3c      	ldr	r2, [pc, #240]	; (80057f4 <HAL_TIM_Base_Start_IT+0x108>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d022      	beq.n	800574e <HAL_TIM_Base_Start_IT+0x62>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005710:	d01d      	beq.n	800574e <HAL_TIM_Base_Start_IT+0x62>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a38      	ldr	r2, [pc, #224]	; (80057f8 <HAL_TIM_Base_Start_IT+0x10c>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d018      	beq.n	800574e <HAL_TIM_Base_Start_IT+0x62>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a36      	ldr	r2, [pc, #216]	; (80057fc <HAL_TIM_Base_Start_IT+0x110>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d013      	beq.n	800574e <HAL_TIM_Base_Start_IT+0x62>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a35      	ldr	r2, [pc, #212]	; (8005800 <HAL_TIM_Base_Start_IT+0x114>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d00e      	beq.n	800574e <HAL_TIM_Base_Start_IT+0x62>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a33      	ldr	r2, [pc, #204]	; (8005804 <HAL_TIM_Base_Start_IT+0x118>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d009      	beq.n	800574e <HAL_TIM_Base_Start_IT+0x62>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a32      	ldr	r2, [pc, #200]	; (8005808 <HAL_TIM_Base_Start_IT+0x11c>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d004      	beq.n	800574e <HAL_TIM_Base_Start_IT+0x62>
 8005744:	f240 11cf 	movw	r1, #463	; 0x1cf
 8005748:	4830      	ldr	r0, [pc, #192]	; (800580c <HAL_TIM_Base_Start_IT+0x120>)
 800574a:	f7fb ff83 	bl	8001654 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005754:	b2db      	uxtb	r3, r3
 8005756:	2b01      	cmp	r3, #1
 8005758:	d001      	beq.n	800575e <HAL_TIM_Base_Start_IT+0x72>
  {
    return HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	e044      	b.n	80057e8 <HAL_TIM_Base_Start_IT+0xfc>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2202      	movs	r2, #2
 8005762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	68da      	ldr	r2, [r3, #12]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f042 0201 	orr.w	r2, r2, #1
 8005774:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a1d      	ldr	r2, [pc, #116]	; (80057f0 <HAL_TIM_Base_Start_IT+0x104>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d018      	beq.n	80057b2 <HAL_TIM_Base_Start_IT+0xc6>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a1b      	ldr	r2, [pc, #108]	; (80057f4 <HAL_TIM_Base_Start_IT+0x108>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d013      	beq.n	80057b2 <HAL_TIM_Base_Start_IT+0xc6>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005792:	d00e      	beq.n	80057b2 <HAL_TIM_Base_Start_IT+0xc6>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a17      	ldr	r2, [pc, #92]	; (80057f8 <HAL_TIM_Base_Start_IT+0x10c>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d009      	beq.n	80057b2 <HAL_TIM_Base_Start_IT+0xc6>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a16      	ldr	r2, [pc, #88]	; (80057fc <HAL_TIM_Base_Start_IT+0x110>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d004      	beq.n	80057b2 <HAL_TIM_Base_Start_IT+0xc6>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a14      	ldr	r2, [pc, #80]	; (8005800 <HAL_TIM_Base_Start_IT+0x114>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d111      	bne.n	80057d6 <HAL_TIM_Base_Start_IT+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	f003 0307 	and.w	r3, r3, #7
 80057bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2b06      	cmp	r3, #6
 80057c2:	d010      	beq.n	80057e6 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f042 0201 	orr.w	r2, r2, #1
 80057d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057d4:	e007      	b.n	80057e6 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f042 0201 	orr.w	r2, r2, #1
 80057e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80057e6:	2300      	movs	r3, #0
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3710      	adds	r7, #16
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}
 80057f0:	40012c00 	.word	0x40012c00
 80057f4:	40013400 	.word	0x40013400
 80057f8:	40000400 	.word	0x40000400
 80057fc:	40000800 	.word	0x40000800
 8005800:	40000c00 	.word	0x40000c00
 8005804:	40001000 	.word	0x40001000
 8005808:	40001400 	.word	0x40001400
 800580c:	0800b478 	.word	0x0800b478

08005810 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b082      	sub	sp, #8
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d101      	bne.n	8005822 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	e0b2      	b.n	8005988 <HAL_TIM_PWM_Init+0x178>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a5a      	ldr	r2, [pc, #360]	; (8005990 <HAL_TIM_PWM_Init+0x180>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d027      	beq.n	800587c <HAL_TIM_PWM_Init+0x6c>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a58      	ldr	r2, [pc, #352]	; (8005994 <HAL_TIM_PWM_Init+0x184>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d022      	beq.n	800587c <HAL_TIM_PWM_Init+0x6c>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800583e:	d01d      	beq.n	800587c <HAL_TIM_PWM_Init+0x6c>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a54      	ldr	r2, [pc, #336]	; (8005998 <HAL_TIM_PWM_Init+0x188>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d018      	beq.n	800587c <HAL_TIM_PWM_Init+0x6c>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a53      	ldr	r2, [pc, #332]	; (800599c <HAL_TIM_PWM_Init+0x18c>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d013      	beq.n	800587c <HAL_TIM_PWM_Init+0x6c>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a51      	ldr	r2, [pc, #324]	; (80059a0 <HAL_TIM_PWM_Init+0x190>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d00e      	beq.n	800587c <HAL_TIM_PWM_Init+0x6c>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a50      	ldr	r2, [pc, #320]	; (80059a4 <HAL_TIM_PWM_Init+0x194>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d009      	beq.n	800587c <HAL_TIM_PWM_Init+0x6c>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a4e      	ldr	r2, [pc, #312]	; (80059a8 <HAL_TIM_PWM_Init+0x198>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d004      	beq.n	800587c <HAL_TIM_PWM_Init+0x6c>
 8005872:	f240 5113 	movw	r1, #1299	; 0x513
 8005876:	484d      	ldr	r0, [pc, #308]	; (80059ac <HAL_TIM_PWM_Init+0x19c>)
 8005878:	f7fb feec 	bl	8001654 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d014      	beq.n	80058ae <HAL_TIM_PWM_Init+0x9e>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	2b10      	cmp	r3, #16
 800588a:	d010      	beq.n	80058ae <HAL_TIM_PWM_Init+0x9e>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	2b20      	cmp	r3, #32
 8005892:	d00c      	beq.n	80058ae <HAL_TIM_PWM_Init+0x9e>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	2b40      	cmp	r3, #64	; 0x40
 800589a:	d008      	beq.n	80058ae <HAL_TIM_PWM_Init+0x9e>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	2b60      	cmp	r3, #96	; 0x60
 80058a2:	d004      	beq.n	80058ae <HAL_TIM_PWM_Init+0x9e>
 80058a4:	f240 5114 	movw	r1, #1300	; 0x514
 80058a8:	4840      	ldr	r0, [pc, #256]	; (80059ac <HAL_TIM_PWM_Init+0x19c>)
 80058aa:	f7fb fed3 	bl	8001654 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	691b      	ldr	r3, [r3, #16]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d00e      	beq.n	80058d4 <HAL_TIM_PWM_Init+0xc4>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	691b      	ldr	r3, [r3, #16]
 80058ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058be:	d009      	beq.n	80058d4 <HAL_TIM_PWM_Init+0xc4>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	691b      	ldr	r3, [r3, #16]
 80058c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058c8:	d004      	beq.n	80058d4 <HAL_TIM_PWM_Init+0xc4>
 80058ca:	f240 5115 	movw	r1, #1301	; 0x515
 80058ce:	4837      	ldr	r0, [pc, #220]	; (80059ac <HAL_TIM_PWM_Init+0x19c>)
 80058d0:	f7fb fec0 	bl	8001654 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	699b      	ldr	r3, [r3, #24]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d008      	beq.n	80058ee <HAL_TIM_PWM_Init+0xde>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	699b      	ldr	r3, [r3, #24]
 80058e0:	2b80      	cmp	r3, #128	; 0x80
 80058e2:	d004      	beq.n	80058ee <HAL_TIM_PWM_Init+0xde>
 80058e4:	f240 5116 	movw	r1, #1302	; 0x516
 80058e8:	4830      	ldr	r0, [pc, #192]	; (80059ac <HAL_TIM_PWM_Init+0x19c>)
 80058ea:	f7fb feb3 	bl	8001654 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058f4:	b2db      	uxtb	r3, r3
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d111      	bne.n	800591e <HAL_TIM_PWM_Init+0x10e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f001 fdd2 	bl	80074ac <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800590c:	2b00      	cmp	r3, #0
 800590e:	d102      	bne.n	8005916 <HAL_TIM_PWM_Init+0x106>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	4a27      	ldr	r2, [pc, #156]	; (80059b0 <HAL_TIM_PWM_Init+0x1a0>)
 8005914:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2202      	movs	r2, #2
 8005922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	3304      	adds	r3, #4
 800592e:	4619      	mov	r1, r3
 8005930:	4610      	mov	r0, r2
 8005932:	f001 fa11 	bl	8006d58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2201      	movs	r2, #1
 800593a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2201      	movs	r2, #1
 8005942:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2201      	movs	r2, #1
 800594a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2201      	movs	r2, #1
 8005952:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2201      	movs	r2, #1
 800595a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2201      	movs	r2, #1
 8005962:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2201      	movs	r2, #1
 800596a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2201      	movs	r2, #1
 8005972:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2201      	movs	r2, #1
 800597a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2201      	movs	r2, #1
 8005982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005986:	2300      	movs	r3, #0
}
 8005988:	4618      	mov	r0, r3
 800598a:	3708      	adds	r7, #8
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}
 8005990:	40012c00 	.word	0x40012c00
 8005994:	40013400 	.word	0x40013400
 8005998:	40000400 	.word	0x40000400
 800599c:	40000800 	.word	0x40000800
 80059a0:	40000c00 	.word	0x40000c00
 80059a4:	40001000 	.word	0x40001000
 80059a8:	40001400 	.word	0x40001400
 80059ac:	0800b478 	.word	0x0800b478
 80059b0:	080059b5 	.word	0x080059b5

080059b4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b083      	sub	sp, #12
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80059bc:	bf00      	nop
 80059be:	370c      	adds	r7, #12
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bc80      	pop	{r7}
 80059c4:	4770      	bx	lr
	...

080059c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b084      	sub	sp, #16
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a8a      	ldr	r2, [pc, #552]	; (8005c00 <HAL_TIM_PWM_Start+0x238>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d10b      	bne.n	80059f4 <HAL_TIM_PWM_Start+0x2c>
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d062      	beq.n	8005aa8 <HAL_TIM_PWM_Start+0xe0>
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	2b04      	cmp	r3, #4
 80059e6:	d05f      	beq.n	8005aa8 <HAL_TIM_PWM_Start+0xe0>
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	2b08      	cmp	r3, #8
 80059ec:	d05c      	beq.n	8005aa8 <HAL_TIM_PWM_Start+0xe0>
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	2b0c      	cmp	r3, #12
 80059f2:	d059      	beq.n	8005aa8 <HAL_TIM_PWM_Start+0xe0>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a82      	ldr	r2, [pc, #520]	; (8005c04 <HAL_TIM_PWM_Start+0x23c>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d10b      	bne.n	8005a16 <HAL_TIM_PWM_Start+0x4e>
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d051      	beq.n	8005aa8 <HAL_TIM_PWM_Start+0xe0>
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	2b04      	cmp	r3, #4
 8005a08:	d04e      	beq.n	8005aa8 <HAL_TIM_PWM_Start+0xe0>
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	2b08      	cmp	r3, #8
 8005a0e:	d04b      	beq.n	8005aa8 <HAL_TIM_PWM_Start+0xe0>
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	2b0c      	cmp	r3, #12
 8005a14:	d048      	beq.n	8005aa8 <HAL_TIM_PWM_Start+0xe0>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a1e:	d10b      	bne.n	8005a38 <HAL_TIM_PWM_Start+0x70>
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d040      	beq.n	8005aa8 <HAL_TIM_PWM_Start+0xe0>
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	2b04      	cmp	r3, #4
 8005a2a:	d03d      	beq.n	8005aa8 <HAL_TIM_PWM_Start+0xe0>
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	2b08      	cmp	r3, #8
 8005a30:	d03a      	beq.n	8005aa8 <HAL_TIM_PWM_Start+0xe0>
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	2b0c      	cmp	r3, #12
 8005a36:	d037      	beq.n	8005aa8 <HAL_TIM_PWM_Start+0xe0>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a72      	ldr	r2, [pc, #456]	; (8005c08 <HAL_TIM_PWM_Start+0x240>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d10b      	bne.n	8005a5a <HAL_TIM_PWM_Start+0x92>
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d02f      	beq.n	8005aa8 <HAL_TIM_PWM_Start+0xe0>
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	2b04      	cmp	r3, #4
 8005a4c:	d02c      	beq.n	8005aa8 <HAL_TIM_PWM_Start+0xe0>
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	2b08      	cmp	r3, #8
 8005a52:	d029      	beq.n	8005aa8 <HAL_TIM_PWM_Start+0xe0>
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	2b0c      	cmp	r3, #12
 8005a58:	d026      	beq.n	8005aa8 <HAL_TIM_PWM_Start+0xe0>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a6b      	ldr	r2, [pc, #428]	; (8005c0c <HAL_TIM_PWM_Start+0x244>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d10b      	bne.n	8005a7c <HAL_TIM_PWM_Start+0xb4>
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d01e      	beq.n	8005aa8 <HAL_TIM_PWM_Start+0xe0>
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	2b04      	cmp	r3, #4
 8005a6e:	d01b      	beq.n	8005aa8 <HAL_TIM_PWM_Start+0xe0>
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	2b08      	cmp	r3, #8
 8005a74:	d018      	beq.n	8005aa8 <HAL_TIM_PWM_Start+0xe0>
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	2b0c      	cmp	r3, #12
 8005a7a:	d015      	beq.n	8005aa8 <HAL_TIM_PWM_Start+0xe0>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a63      	ldr	r2, [pc, #396]	; (8005c10 <HAL_TIM_PWM_Start+0x248>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d10b      	bne.n	8005a9e <HAL_TIM_PWM_Start+0xd6>
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d00d      	beq.n	8005aa8 <HAL_TIM_PWM_Start+0xe0>
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	2b04      	cmp	r3, #4
 8005a90:	d00a      	beq.n	8005aa8 <HAL_TIM_PWM_Start+0xe0>
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	2b08      	cmp	r3, #8
 8005a96:	d007      	beq.n	8005aa8 <HAL_TIM_PWM_Start+0xe0>
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	2b0c      	cmp	r3, #12
 8005a9c:	d004      	beq.n	8005aa8 <HAL_TIM_PWM_Start+0xe0>
 8005a9e:	f240 5199 	movw	r1, #1433	; 0x599
 8005aa2:	485c      	ldr	r0, [pc, #368]	; (8005c14 <HAL_TIM_PWM_Start+0x24c>)
 8005aa4:	f7fb fdd6 	bl	8001654 <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d109      	bne.n	8005ac2 <HAL_TIM_PWM_Start+0xfa>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	bf14      	ite	ne
 8005aba:	2301      	movne	r3, #1
 8005abc:	2300      	moveq	r3, #0
 8005abe:	b2db      	uxtb	r3, r3
 8005ac0:	e022      	b.n	8005b08 <HAL_TIM_PWM_Start+0x140>
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	2b04      	cmp	r3, #4
 8005ac6:	d109      	bne.n	8005adc <HAL_TIM_PWM_Start+0x114>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005ace:	b2db      	uxtb	r3, r3
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	bf14      	ite	ne
 8005ad4:	2301      	movne	r3, #1
 8005ad6:	2300      	moveq	r3, #0
 8005ad8:	b2db      	uxtb	r3, r3
 8005ada:	e015      	b.n	8005b08 <HAL_TIM_PWM_Start+0x140>
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	2b08      	cmp	r3, #8
 8005ae0:	d109      	bne.n	8005af6 <HAL_TIM_PWM_Start+0x12e>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	bf14      	ite	ne
 8005aee:	2301      	movne	r3, #1
 8005af0:	2300      	moveq	r3, #0
 8005af2:	b2db      	uxtb	r3, r3
 8005af4:	e008      	b.n	8005b08 <HAL_TIM_PWM_Start+0x140>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	bf14      	ite	ne
 8005b02:	2301      	movne	r3, #1
 8005b04:	2300      	moveq	r3, #0
 8005b06:	b2db      	uxtb	r3, r3
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d001      	beq.n	8005b10 <HAL_TIM_PWM_Start+0x148>
  {
    return HAL_ERROR;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	e072      	b.n	8005bf6 <HAL_TIM_PWM_Start+0x22e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d104      	bne.n	8005b20 <HAL_TIM_PWM_Start+0x158>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2202      	movs	r2, #2
 8005b1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b1e:	e013      	b.n	8005b48 <HAL_TIM_PWM_Start+0x180>
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	2b04      	cmp	r3, #4
 8005b24:	d104      	bne.n	8005b30 <HAL_TIM_PWM_Start+0x168>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2202      	movs	r2, #2
 8005b2a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b2e:	e00b      	b.n	8005b48 <HAL_TIM_PWM_Start+0x180>
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	2b08      	cmp	r3, #8
 8005b34:	d104      	bne.n	8005b40 <HAL_TIM_PWM_Start+0x178>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2202      	movs	r2, #2
 8005b3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b3e:	e003      	b.n	8005b48 <HAL_TIM_PWM_Start+0x180>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2202      	movs	r2, #2
 8005b44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	6839      	ldr	r1, [r7, #0]
 8005b50:	4618      	mov	r0, r3
 8005b52:	f001 fc4b 	bl	80073ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a29      	ldr	r2, [pc, #164]	; (8005c00 <HAL_TIM_PWM_Start+0x238>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d004      	beq.n	8005b6a <HAL_TIM_PWM_Start+0x1a2>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a27      	ldr	r2, [pc, #156]	; (8005c04 <HAL_TIM_PWM_Start+0x23c>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d101      	bne.n	8005b6e <HAL_TIM_PWM_Start+0x1a6>
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e000      	b.n	8005b70 <HAL_TIM_PWM_Start+0x1a8>
 8005b6e:	2300      	movs	r3, #0
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d007      	beq.n	8005b84 <HAL_TIM_PWM_Start+0x1bc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005b82:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a1d      	ldr	r2, [pc, #116]	; (8005c00 <HAL_TIM_PWM_Start+0x238>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d018      	beq.n	8005bc0 <HAL_TIM_PWM_Start+0x1f8>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a1c      	ldr	r2, [pc, #112]	; (8005c04 <HAL_TIM_PWM_Start+0x23c>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d013      	beq.n	8005bc0 <HAL_TIM_PWM_Start+0x1f8>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ba0:	d00e      	beq.n	8005bc0 <HAL_TIM_PWM_Start+0x1f8>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a18      	ldr	r2, [pc, #96]	; (8005c08 <HAL_TIM_PWM_Start+0x240>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d009      	beq.n	8005bc0 <HAL_TIM_PWM_Start+0x1f8>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a16      	ldr	r2, [pc, #88]	; (8005c0c <HAL_TIM_PWM_Start+0x244>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d004      	beq.n	8005bc0 <HAL_TIM_PWM_Start+0x1f8>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a15      	ldr	r2, [pc, #84]	; (8005c10 <HAL_TIM_PWM_Start+0x248>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d111      	bne.n	8005be4 <HAL_TIM_PWM_Start+0x21c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	f003 0307 	and.w	r3, r3, #7
 8005bca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2b06      	cmp	r3, #6
 8005bd0:	d010      	beq.n	8005bf4 <HAL_TIM_PWM_Start+0x22c>
    {
      __HAL_TIM_ENABLE(htim);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	681a      	ldr	r2, [r3, #0]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f042 0201 	orr.w	r2, r2, #1
 8005be0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005be2:	e007      	b.n	8005bf4 <HAL_TIM_PWM_Start+0x22c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f042 0201 	orr.w	r2, r2, #1
 8005bf2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005bf4:	2300      	movs	r3, #0
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3710      	adds	r7, #16
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	bf00      	nop
 8005c00:	40012c00 	.word	0x40012c00
 8005c04:	40013400 	.word	0x40013400
 8005c08:	40000400 	.word	0x40000400
 8005c0c:	40000800 	.word	0x40000800
 8005c10:	40000c00 	.word	0x40000c00
 8005c14:	0800b478 	.word	0x0800b478

08005c18 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b086      	sub	sp, #24
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d101      	bne.n	8005c2c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	e192      	b.n	8005f52 <HAL_TIM_Encoder_Init+0x33a>
  }

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a7d      	ldr	r2, [pc, #500]	; (8005e28 <HAL_TIM_Encoder_Init+0x210>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d01d      	beq.n	8005c72 <HAL_TIM_Encoder_Init+0x5a>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a7c      	ldr	r2, [pc, #496]	; (8005e2c <HAL_TIM_Encoder_Init+0x214>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d018      	beq.n	8005c72 <HAL_TIM_Encoder_Init+0x5a>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c48:	d013      	beq.n	8005c72 <HAL_TIM_Encoder_Init+0x5a>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a78      	ldr	r2, [pc, #480]	; (8005e30 <HAL_TIM_Encoder_Init+0x218>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d00e      	beq.n	8005c72 <HAL_TIM_Encoder_Init+0x5a>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a76      	ldr	r2, [pc, #472]	; (8005e34 <HAL_TIM_Encoder_Init+0x21c>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d009      	beq.n	8005c72 <HAL_TIM_Encoder_Init+0x5a>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a75      	ldr	r2, [pc, #468]	; (8005e38 <HAL_TIM_Encoder_Init+0x220>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d004      	beq.n	8005c72 <HAL_TIM_Encoder_Init+0x5a>
 8005c68:	f640 318e 	movw	r1, #2958	; 0xb8e
 8005c6c:	4873      	ldr	r0, [pc, #460]	; (8005e3c <HAL_TIM_Encoder_Init+0x224>)
 8005c6e:	f7fb fcf1 	bl	8001654 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d014      	beq.n	8005ca4 <HAL_TIM_Encoder_Init+0x8c>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	2b10      	cmp	r3, #16
 8005c80:	d010      	beq.n	8005ca4 <HAL_TIM_Encoder_Init+0x8c>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	2b20      	cmp	r3, #32
 8005c88:	d00c      	beq.n	8005ca4 <HAL_TIM_Encoder_Init+0x8c>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	2b40      	cmp	r3, #64	; 0x40
 8005c90:	d008      	beq.n	8005ca4 <HAL_TIM_Encoder_Init+0x8c>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	2b60      	cmp	r3, #96	; 0x60
 8005c98:	d004      	beq.n	8005ca4 <HAL_TIM_Encoder_Init+0x8c>
 8005c9a:	f640 318f 	movw	r1, #2959	; 0xb8f
 8005c9e:	4867      	ldr	r0, [pc, #412]	; (8005e3c <HAL_TIM_Encoder_Init+0x224>)
 8005ca0:	f7fb fcd8 	bl	8001654 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	691b      	ldr	r3, [r3, #16]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d00e      	beq.n	8005cca <HAL_TIM_Encoder_Init+0xb2>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	691b      	ldr	r3, [r3, #16]
 8005cb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cb4:	d009      	beq.n	8005cca <HAL_TIM_Encoder_Init+0xb2>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	691b      	ldr	r3, [r3, #16]
 8005cba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cbe:	d004      	beq.n	8005cca <HAL_TIM_Encoder_Init+0xb2>
 8005cc0:	f44f 6139 	mov.w	r1, #2960	; 0xb90
 8005cc4:	485d      	ldr	r0, [pc, #372]	; (8005e3c <HAL_TIM_Encoder_Init+0x224>)
 8005cc6:	f7fb fcc5 	bl	8001654 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	699b      	ldr	r3, [r3, #24]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d008      	beq.n	8005ce4 <HAL_TIM_Encoder_Init+0xcc>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	699b      	ldr	r3, [r3, #24]
 8005cd6:	2b80      	cmp	r3, #128	; 0x80
 8005cd8:	d004      	beq.n	8005ce4 <HAL_TIM_Encoder_Init+0xcc>
 8005cda:	f640 3191 	movw	r1, #2961	; 0xb91
 8005cde:	4857      	ldr	r0, [pc, #348]	; (8005e3c <HAL_TIM_Encoder_Init+0x224>)
 8005ce0:	f7fb fcb8 	bl	8001654 <assert_failed>
  assert_param(IS_TIM_ENCODER_MODE(sConfig->EncoderMode));
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d00c      	beq.n	8005d06 <HAL_TIM_Encoder_Init+0xee>
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	2b02      	cmp	r3, #2
 8005cf2:	d008      	beq.n	8005d06 <HAL_TIM_Encoder_Init+0xee>
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	2b03      	cmp	r3, #3
 8005cfa:	d004      	beq.n	8005d06 <HAL_TIM_Encoder_Init+0xee>
 8005cfc:	f640 3192 	movw	r1, #2962	; 0xb92
 8005d00:	484e      	ldr	r0, [pc, #312]	; (8005e3c <HAL_TIM_Encoder_Init+0x224>)
 8005d02:	f7fb fca7 	bl	8001654 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC1Selection));
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	d00c      	beq.n	8005d28 <HAL_TIM_Encoder_Init+0x110>
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	2b02      	cmp	r3, #2
 8005d14:	d008      	beq.n	8005d28 <HAL_TIM_Encoder_Init+0x110>
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	2b03      	cmp	r3, #3
 8005d1c:	d004      	beq.n	8005d28 <HAL_TIM_Encoder_Init+0x110>
 8005d1e:	f640 3193 	movw	r1, #2963	; 0xb93
 8005d22:	4846      	ldr	r0, [pc, #280]	; (8005e3c <HAL_TIM_Encoder_Init+0x224>)
 8005d24:	f7fb fc96 	bl	8001654 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC2Selection));
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	699b      	ldr	r3, [r3, #24]
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d00c      	beq.n	8005d4a <HAL_TIM_Encoder_Init+0x132>
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	699b      	ldr	r3, [r3, #24]
 8005d34:	2b02      	cmp	r3, #2
 8005d36:	d008      	beq.n	8005d4a <HAL_TIM_Encoder_Init+0x132>
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	699b      	ldr	r3, [r3, #24]
 8005d3c:	2b03      	cmp	r3, #3
 8005d3e:	d004      	beq.n	8005d4a <HAL_TIM_Encoder_Init+0x132>
 8005d40:	f640 3194 	movw	r1, #2964	; 0xb94
 8005d44:	483d      	ldr	r0, [pc, #244]	; (8005e3c <HAL_TIM_Encoder_Init+0x224>)
 8005d46:	f7fb fc85 	bl	8001654 <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC1Polarity));
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d008      	beq.n	8005d64 <HAL_TIM_Encoder_Init+0x14c>
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	2b02      	cmp	r3, #2
 8005d58:	d004      	beq.n	8005d64 <HAL_TIM_Encoder_Init+0x14c>
 8005d5a:	f640 3195 	movw	r1, #2965	; 0xb95
 8005d5e:	4837      	ldr	r0, [pc, #220]	; (8005e3c <HAL_TIM_Encoder_Init+0x224>)
 8005d60:	f7fb fc78 	bl	8001654 <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC2Polarity));
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	695b      	ldr	r3, [r3, #20]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d008      	beq.n	8005d7e <HAL_TIM_Encoder_Init+0x166>
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	695b      	ldr	r3, [r3, #20]
 8005d70:	2b02      	cmp	r3, #2
 8005d72:	d004      	beq.n	8005d7e <HAL_TIM_Encoder_Init+0x166>
 8005d74:	f640 3196 	movw	r1, #2966	; 0xb96
 8005d78:	4830      	ldr	r0, [pc, #192]	; (8005e3c <HAL_TIM_Encoder_Init+0x224>)
 8005d7a:	f7fb fc6b 	bl	8001654 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	68db      	ldr	r3, [r3, #12]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d010      	beq.n	8005da8 <HAL_TIM_Encoder_Init+0x190>
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	68db      	ldr	r3, [r3, #12]
 8005d8a:	2b04      	cmp	r3, #4
 8005d8c:	d00c      	beq.n	8005da8 <HAL_TIM_Encoder_Init+0x190>
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	68db      	ldr	r3, [r3, #12]
 8005d92:	2b08      	cmp	r3, #8
 8005d94:	d008      	beq.n	8005da8 <HAL_TIM_Encoder_Init+0x190>
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	68db      	ldr	r3, [r3, #12]
 8005d9a:	2b0c      	cmp	r3, #12
 8005d9c:	d004      	beq.n	8005da8 <HAL_TIM_Encoder_Init+0x190>
 8005d9e:	f640 3197 	movw	r1, #2967	; 0xb97
 8005da2:	4826      	ldr	r0, [pc, #152]	; (8005e3c <HAL_TIM_Encoder_Init+0x224>)
 8005da4:	f7fb fc56 	bl	8001654 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	69db      	ldr	r3, [r3, #28]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d010      	beq.n	8005dd2 <HAL_TIM_Encoder_Init+0x1ba>
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	69db      	ldr	r3, [r3, #28]
 8005db4:	2b04      	cmp	r3, #4
 8005db6:	d00c      	beq.n	8005dd2 <HAL_TIM_Encoder_Init+0x1ba>
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	69db      	ldr	r3, [r3, #28]
 8005dbc:	2b08      	cmp	r3, #8
 8005dbe:	d008      	beq.n	8005dd2 <HAL_TIM_Encoder_Init+0x1ba>
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	69db      	ldr	r3, [r3, #28]
 8005dc4:	2b0c      	cmp	r3, #12
 8005dc6:	d004      	beq.n	8005dd2 <HAL_TIM_Encoder_Init+0x1ba>
 8005dc8:	f640 3198 	movw	r1, #2968	; 0xb98
 8005dcc:	481b      	ldr	r0, [pc, #108]	; (8005e3c <HAL_TIM_Encoder_Init+0x224>)
 8005dce:	f7fb fc41 	bl	8001654 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	691b      	ldr	r3, [r3, #16]
 8005dd6:	2b0f      	cmp	r3, #15
 8005dd8:	d904      	bls.n	8005de4 <HAL_TIM_Encoder_Init+0x1cc>
 8005dda:	f640 3199 	movw	r1, #2969	; 0xb99
 8005dde:	4817      	ldr	r0, [pc, #92]	; (8005e3c <HAL_TIM_Encoder_Init+0x224>)
 8005de0:	f7fb fc38 	bl	8001654 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	6a1b      	ldr	r3, [r3, #32]
 8005de8:	2b0f      	cmp	r3, #15
 8005dea:	d904      	bls.n	8005df6 <HAL_TIM_Encoder_Init+0x1de>
 8005dec:	f640 319a 	movw	r1, #2970	; 0xb9a
 8005df0:	4812      	ldr	r0, [pc, #72]	; (8005e3c <HAL_TIM_Encoder_Init+0x224>)
 8005df2:	f7fb fc2f 	bl	8001654 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d120      	bne.n	8005e44 <HAL_TIM_Encoder_Init+0x22c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2200      	movs	r2, #0
 8005e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f001 fb4e 	bl	80074ac <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d102      	bne.n	8005e1e <HAL_TIM_Encoder_Init+0x206>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	4a09      	ldr	r2, [pc, #36]	; (8005e40 <HAL_TIM_Encoder_Init+0x228>)
 8005e1c:	671a      	str	r2, [r3, #112]	; 0x70
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	4798      	blx	r3
 8005e26:	e00d      	b.n	8005e44 <HAL_TIM_Encoder_Init+0x22c>
 8005e28:	40012c00 	.word	0x40012c00
 8005e2c:	40013400 	.word	0x40013400
 8005e30:	40000400 	.word	0x40000400
 8005e34:	40000800 	.word	0x40000800
 8005e38:	40000c00 	.word	0x40000c00
 8005e3c:	0800b478 	.word	0x0800b478
 8005e40:	08001861 	.word	0x08001861
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2202      	movs	r2, #2
 8005e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	687a      	ldr	r2, [r7, #4]
 8005e54:	6812      	ldr	r2, [r2, #0]
 8005e56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e5a:	f023 0307 	bic.w	r3, r3, #7
 8005e5e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	3304      	adds	r3, #4
 8005e68:	4619      	mov	r1, r3
 8005e6a:	4610      	mov	r0, r2
 8005e6c:	f000 ff74 	bl	8006d58 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	699b      	ldr	r3, [r3, #24]
 8005e7e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	6a1b      	ldr	r3, [r3, #32]
 8005e86:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	697a      	ldr	r2, [r7, #20]
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e98:	f023 0303 	bic.w	r3, r3, #3
 8005e9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	689a      	ldr	r2, [r3, #8]
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	699b      	ldr	r3, [r3, #24]
 8005ea6:	021b      	lsls	r3, r3, #8
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	693a      	ldr	r2, [r7, #16]
 8005eac:	4313      	orrs	r3, r2
 8005eae:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005eb6:	f023 030c 	bic.w	r3, r3, #12
 8005eba:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ec2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ec6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	68da      	ldr	r2, [r3, #12]
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	69db      	ldr	r3, [r3, #28]
 8005ed0:	021b      	lsls	r3, r3, #8
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	693a      	ldr	r2, [r7, #16]
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	691b      	ldr	r3, [r3, #16]
 8005ede:	011a      	lsls	r2, r3, #4
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	6a1b      	ldr	r3, [r3, #32]
 8005ee4:	031b      	lsls	r3, r3, #12
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	693a      	ldr	r2, [r7, #16]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005ef4:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	685a      	ldr	r2, [r3, #4]
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	695b      	ldr	r3, [r3, #20]
 8005efe:	011b      	lsls	r3, r3, #4
 8005f00:	4313      	orrs	r3, r2
 8005f02:	68fa      	ldr	r2, [r7, #12]
 8005f04:	4313      	orrs	r3, r2
 8005f06:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	697a      	ldr	r2, [r7, #20]
 8005f0e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	693a      	ldr	r2, [r7, #16]
 8005f16:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	68fa      	ldr	r2, [r7, #12]
 8005f1e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2201      	movs	r2, #1
 8005f24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2201      	movs	r2, #1
 8005f34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2201      	movs	r2, #1
 8005f44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f50:	2300      	movs	r3, #0
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3718      	adds	r7, #24
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}
 8005f5a:	bf00      	nop

08005f5c <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b084      	sub	sp, #16
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
 8005f64:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f6c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005f74:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005f7c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005f84:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a5d      	ldr	r2, [pc, #372]	; (8006100 <HAL_TIM_Encoder_Start_IT+0x1a4>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d01d      	beq.n	8005fcc <HAL_TIM_Encoder_Start_IT+0x70>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a5b      	ldr	r2, [pc, #364]	; (8006104 <HAL_TIM_Encoder_Start_IT+0x1a8>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d018      	beq.n	8005fcc <HAL_TIM_Encoder_Start_IT+0x70>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fa2:	d013      	beq.n	8005fcc <HAL_TIM_Encoder_Start_IT+0x70>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a57      	ldr	r2, [pc, #348]	; (8006108 <HAL_TIM_Encoder_Start_IT+0x1ac>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d00e      	beq.n	8005fcc <HAL_TIM_Encoder_Start_IT+0x70>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a56      	ldr	r2, [pc, #344]	; (800610c <HAL_TIM_Encoder_Start_IT+0x1b0>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d009      	beq.n	8005fcc <HAL_TIM_Encoder_Start_IT+0x70>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a54      	ldr	r2, [pc, #336]	; (8006110 <HAL_TIM_Encoder_Start_IT+0x1b4>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d004      	beq.n	8005fcc <HAL_TIM_Encoder_Start_IT+0x70>
 8005fc2:	f640 41e4 	movw	r1, #3300	; 0xce4
 8005fc6:	4853      	ldr	r0, [pc, #332]	; (8006114 <HAL_TIM_Encoder_Start_IT+0x1b8>)
 8005fc8:	f7fb fb44 	bl	8001654 <assert_failed>

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d110      	bne.n	8005ff4 <HAL_TIM_Encoder_Start_IT+0x98>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005fd2:	7bfb      	ldrb	r3, [r7, #15]
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	d102      	bne.n	8005fde <HAL_TIM_Encoder_Start_IT+0x82>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005fd8:	7b7b      	ldrb	r3, [r7, #13]
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d001      	beq.n	8005fe2 <HAL_TIM_Encoder_Start_IT+0x86>
    {
      return HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	e089      	b.n	80060f6 <HAL_TIM_Encoder_Start_IT+0x19a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2202      	movs	r2, #2
 8005fe6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2202      	movs	r2, #2
 8005fee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ff2:	e031      	b.n	8006058 <HAL_TIM_Encoder_Start_IT+0xfc>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	2b04      	cmp	r3, #4
 8005ff8:	d110      	bne.n	800601c <HAL_TIM_Encoder_Start_IT+0xc0>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ffa:	7bbb      	ldrb	r3, [r7, #14]
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	d102      	bne.n	8006006 <HAL_TIM_Encoder_Start_IT+0xaa>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006000:	7b3b      	ldrb	r3, [r7, #12]
 8006002:	2b01      	cmp	r3, #1
 8006004:	d001      	beq.n	800600a <HAL_TIM_Encoder_Start_IT+0xae>
    {
      return HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	e075      	b.n	80060f6 <HAL_TIM_Encoder_Start_IT+0x19a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2202      	movs	r2, #2
 800600e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2202      	movs	r2, #2
 8006016:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800601a:	e01d      	b.n	8006058 <HAL_TIM_Encoder_Start_IT+0xfc>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800601c:	7bfb      	ldrb	r3, [r7, #15]
 800601e:	2b01      	cmp	r3, #1
 8006020:	d108      	bne.n	8006034 <HAL_TIM_Encoder_Start_IT+0xd8>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006022:	7bbb      	ldrb	r3, [r7, #14]
 8006024:	2b01      	cmp	r3, #1
 8006026:	d105      	bne.n	8006034 <HAL_TIM_Encoder_Start_IT+0xd8>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006028:	7b7b      	ldrb	r3, [r7, #13]
 800602a:	2b01      	cmp	r3, #1
 800602c:	d102      	bne.n	8006034 <HAL_TIM_Encoder_Start_IT+0xd8>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800602e:	7b3b      	ldrb	r3, [r7, #12]
 8006030:	2b01      	cmp	r3, #1
 8006032:	d001      	beq.n	8006038 <HAL_TIM_Encoder_Start_IT+0xdc>
    {
      return HAL_ERROR;
 8006034:	2301      	movs	r3, #1
 8006036:	e05e      	b.n	80060f6 <HAL_TIM_Encoder_Start_IT+0x19a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2202      	movs	r2, #2
 800603c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2202      	movs	r2, #2
 8006044:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2202      	movs	r2, #2
 800604c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2202      	movs	r2, #2
 8006054:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d003      	beq.n	8006066 <HAL_TIM_Encoder_Start_IT+0x10a>
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	2b04      	cmp	r3, #4
 8006062:	d010      	beq.n	8006086 <HAL_TIM_Encoder_Start_IT+0x12a>
 8006064:	e01f      	b.n	80060a6 <HAL_TIM_Encoder_Start_IT+0x14a>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	2201      	movs	r2, #1
 800606c:	2100      	movs	r1, #0
 800606e:	4618      	mov	r0, r3
 8006070:	f001 f9bc 	bl	80073ec <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	68da      	ldr	r2, [r3, #12]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f042 0202 	orr.w	r2, r2, #2
 8006082:	60da      	str	r2, [r3, #12]
      break;
 8006084:	e02e      	b.n	80060e4 <HAL_TIM_Encoder_Start_IT+0x188>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	2201      	movs	r2, #1
 800608c:	2104      	movs	r1, #4
 800608e:	4618      	mov	r0, r3
 8006090:	f001 f9ac 	bl	80073ec <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	68da      	ldr	r2, [r3, #12]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f042 0204 	orr.w	r2, r2, #4
 80060a2:	60da      	str	r2, [r3, #12]
      break;
 80060a4:	e01e      	b.n	80060e4 <HAL_TIM_Encoder_Start_IT+0x188>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	2201      	movs	r2, #1
 80060ac:	2100      	movs	r1, #0
 80060ae:	4618      	mov	r0, r3
 80060b0:	f001 f99c 	bl	80073ec <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	2201      	movs	r2, #1
 80060ba:	2104      	movs	r1, #4
 80060bc:	4618      	mov	r0, r3
 80060be:	f001 f995 	bl	80073ec <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	68da      	ldr	r2, [r3, #12]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f042 0202 	orr.w	r2, r2, #2
 80060d0:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	68da      	ldr	r2, [r3, #12]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f042 0204 	orr.w	r2, r2, #4
 80060e0:	60da      	str	r2, [r3, #12]
      break;
 80060e2:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f042 0201 	orr.w	r2, r2, #1
 80060f2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80060f4:	2300      	movs	r3, #0
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3710      	adds	r7, #16
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}
 80060fe:	bf00      	nop
 8006100:	40012c00 	.word	0x40012c00
 8006104:	40013400 	.word	0x40013400
 8006108:	40000400 	.word	0x40000400
 800610c:	40000800 	.word	0x40000800
 8006110:	40000c00 	.word	0x40000c00
 8006114:	0800b478 	.word	0x0800b478

08006118 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b082      	sub	sp, #8
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	691b      	ldr	r3, [r3, #16]
 8006126:	f003 0302 	and.w	r3, r3, #2
 800612a:	2b02      	cmp	r3, #2
 800612c:	d128      	bne.n	8006180 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	68db      	ldr	r3, [r3, #12]
 8006134:	f003 0302 	and.w	r3, r3, #2
 8006138:	2b02      	cmp	r3, #2
 800613a:	d121      	bne.n	8006180 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f06f 0202 	mvn.w	r2, #2
 8006144:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2201      	movs	r2, #1
 800614a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	699b      	ldr	r3, [r3, #24]
 8006152:	f003 0303 	and.w	r3, r3, #3
 8006156:	2b00      	cmp	r3, #0
 8006158:	d005      	beq.n	8006166 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	4798      	blx	r3
 8006164:	e009      	b.n	800617a <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2200      	movs	r2, #0
 800617e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	691b      	ldr	r3, [r3, #16]
 8006186:	f003 0304 	and.w	r3, r3, #4
 800618a:	2b04      	cmp	r3, #4
 800618c:	d128      	bne.n	80061e0 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	68db      	ldr	r3, [r3, #12]
 8006194:	f003 0304 	and.w	r3, r3, #4
 8006198:	2b04      	cmp	r3, #4
 800619a:	d121      	bne.n	80061e0 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f06f 0204 	mvn.w	r2, #4
 80061a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2202      	movs	r2, #2
 80061aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	699b      	ldr	r3, [r3, #24]
 80061b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d005      	beq.n	80061c6 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	4798      	blx	r3
 80061c4:	e009      	b.n	80061da <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2200      	movs	r2, #0
 80061de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	691b      	ldr	r3, [r3, #16]
 80061e6:	f003 0308 	and.w	r3, r3, #8
 80061ea:	2b08      	cmp	r3, #8
 80061ec:	d128      	bne.n	8006240 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	68db      	ldr	r3, [r3, #12]
 80061f4:	f003 0308 	and.w	r3, r3, #8
 80061f8:	2b08      	cmp	r3, #8
 80061fa:	d121      	bne.n	8006240 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f06f 0208 	mvn.w	r2, #8
 8006204:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2204      	movs	r2, #4
 800620a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	69db      	ldr	r3, [r3, #28]
 8006212:	f003 0303 	and.w	r3, r3, #3
 8006216:	2b00      	cmp	r3, #0
 8006218:	d005      	beq.n	8006226 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	4798      	blx	r3
 8006224:	e009      	b.n	800623a <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2200      	movs	r2, #0
 800623e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	691b      	ldr	r3, [r3, #16]
 8006246:	f003 0310 	and.w	r3, r3, #16
 800624a:	2b10      	cmp	r3, #16
 800624c:	d128      	bne.n	80062a0 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	68db      	ldr	r3, [r3, #12]
 8006254:	f003 0310 	and.w	r3, r3, #16
 8006258:	2b10      	cmp	r3, #16
 800625a:	d121      	bne.n	80062a0 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f06f 0210 	mvn.w	r2, #16
 8006264:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2208      	movs	r2, #8
 800626a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	69db      	ldr	r3, [r3, #28]
 8006272:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006276:	2b00      	cmp	r3, #0
 8006278:	d005      	beq.n	8006286 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	4798      	blx	r3
 8006284:	e009      	b.n	800629a <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2200      	movs	r2, #0
 800629e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	691b      	ldr	r3, [r3, #16]
 80062a6:	f003 0301 	and.w	r3, r3, #1
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d110      	bne.n	80062d0 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	68db      	ldr	r3, [r3, #12]
 80062b4:	f003 0301 	and.w	r3, r3, #1
 80062b8:	2b01      	cmp	r3, #1
 80062ba:	d109      	bne.n	80062d0 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f06f 0201 	mvn.w	r2, #1
 80062c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	691b      	ldr	r3, [r3, #16]
 80062d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062da:	2b80      	cmp	r3, #128	; 0x80
 80062dc:	d110      	bne.n	8006300 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	68db      	ldr	r3, [r3, #12]
 80062e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062e8:	2b80      	cmp	r3, #128	; 0x80
 80062ea:	d109      	bne.n	8006300 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80062f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	691b      	ldr	r3, [r3, #16]
 8006306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800630a:	2b40      	cmp	r3, #64	; 0x40
 800630c:	d110      	bne.n	8006330 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006318:	2b40      	cmp	r3, #64	; 0x40
 800631a:	d109      	bne.n	8006330 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006324:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	691b      	ldr	r3, [r3, #16]
 8006336:	f003 0320 	and.w	r3, r3, #32
 800633a:	2b20      	cmp	r3, #32
 800633c:	d110      	bne.n	8006360 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	68db      	ldr	r3, [r3, #12]
 8006344:	f003 0320 	and.w	r3, r3, #32
 8006348:	2b20      	cmp	r3, #32
 800634a:	d109      	bne.n	8006360 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f06f 0220 	mvn.w	r2, #32
 8006354:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006360:	bf00      	nop
 8006362:	3708      	adds	r7, #8
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}

08006368 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b084      	sub	sp, #16
 800636c:	af00      	add	r7, sp, #0
 800636e:	60f8      	str	r0, [r7, #12]
 8006370:	60b9      	str	r1, [r7, #8]
 8006372:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d010      	beq.n	800639c <HAL_TIM_PWM_ConfigChannel+0x34>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2b04      	cmp	r3, #4
 800637e:	d00d      	beq.n	800639c <HAL_TIM_PWM_ConfigChannel+0x34>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2b08      	cmp	r3, #8
 8006384:	d00a      	beq.n	800639c <HAL_TIM_PWM_ConfigChannel+0x34>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2b0c      	cmp	r3, #12
 800638a:	d007      	beq.n	800639c <HAL_TIM_PWM_ConfigChannel+0x34>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2b3c      	cmp	r3, #60	; 0x3c
 8006390:	d004      	beq.n	800639c <HAL_TIM_PWM_ConfigChannel+0x34>
 8006392:	f241 0127 	movw	r1, #4135	; 0x1027
 8006396:	4890      	ldr	r0, [pc, #576]	; (80065d8 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8006398:	f7fb f95c 	bl	8001654 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	2b60      	cmp	r3, #96	; 0x60
 80063a2:	d008      	beq.n	80063b6 <HAL_TIM_PWM_ConfigChannel+0x4e>
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	2b70      	cmp	r3, #112	; 0x70
 80063aa:	d004      	beq.n	80063b6 <HAL_TIM_PWM_ConfigChannel+0x4e>
 80063ac:	f241 0128 	movw	r1, #4136	; 0x1028
 80063b0:	4889      	ldr	r0, [pc, #548]	; (80065d8 <HAL_TIM_PWM_ConfigChannel+0x270>)
 80063b2:	f7fb f94f 	bl	8001654 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d008      	beq.n	80063d0 <HAL_TIM_PWM_ConfigChannel+0x68>
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	689b      	ldr	r3, [r3, #8]
 80063c2:	2b02      	cmp	r3, #2
 80063c4:	d004      	beq.n	80063d0 <HAL_TIM_PWM_ConfigChannel+0x68>
 80063c6:	f241 0129 	movw	r1, #4137	; 0x1029
 80063ca:	4883      	ldr	r0, [pc, #524]	; (80065d8 <HAL_TIM_PWM_ConfigChannel+0x270>)
 80063cc:	f7fb f942 	bl	8001654 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	691b      	ldr	r3, [r3, #16]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d008      	beq.n	80063ea <HAL_TIM_PWM_ConfigChannel+0x82>
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	691b      	ldr	r3, [r3, #16]
 80063dc:	2b04      	cmp	r3, #4
 80063de:	d004      	beq.n	80063ea <HAL_TIM_PWM_ConfigChannel+0x82>
 80063e0:	f241 012a 	movw	r1, #4138	; 0x102a
 80063e4:	487c      	ldr	r0, [pc, #496]	; (80065d8 <HAL_TIM_PWM_ConfigChannel+0x270>)
 80063e6:	f7fb f935 	bl	8001654 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d101      	bne.n	80063f8 <HAL_TIM_PWM_ConfigChannel+0x90>
 80063f4:	2302      	movs	r3, #2
 80063f6:	e145      	b.n	8006684 <HAL_TIM_PWM_ConfigChannel+0x31c>
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2201      	movs	r2, #1
 80063fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2b0c      	cmp	r3, #12
 8006404:	f200 8138 	bhi.w	8006678 <HAL_TIM_PWM_ConfigChannel+0x310>
 8006408:	a201      	add	r2, pc, #4	; (adr r2, 8006410 <HAL_TIM_PWM_ConfigChannel+0xa8>)
 800640a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800640e:	bf00      	nop
 8006410:	08006445 	.word	0x08006445
 8006414:	08006679 	.word	0x08006679
 8006418:	08006679 	.word	0x08006679
 800641c:	08006679 	.word	0x08006679
 8006420:	080064cb 	.word	0x080064cb
 8006424:	08006679 	.word	0x08006679
 8006428:	08006679 	.word	0x08006679
 800642c:	08006679 	.word	0x08006679
 8006430:	08006553 	.word	0x08006553
 8006434:	08006679 	.word	0x08006679
 8006438:	08006679 	.word	0x08006679
 800643c:	08006679 	.word	0x08006679
 8006440:	080065f1 	.word	0x080065f1
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a64      	ldr	r2, [pc, #400]	; (80065dc <HAL_TIM_PWM_ConfigChannel+0x274>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d01d      	beq.n	800648a <HAL_TIM_PWM_ConfigChannel+0x122>
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a63      	ldr	r2, [pc, #396]	; (80065e0 <HAL_TIM_PWM_ConfigChannel+0x278>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d018      	beq.n	800648a <HAL_TIM_PWM_ConfigChannel+0x122>
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006460:	d013      	beq.n	800648a <HAL_TIM_PWM_ConfigChannel+0x122>
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a5f      	ldr	r2, [pc, #380]	; (80065e4 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d00e      	beq.n	800648a <HAL_TIM_PWM_ConfigChannel+0x122>
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a5d      	ldr	r2, [pc, #372]	; (80065e8 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d009      	beq.n	800648a <HAL_TIM_PWM_ConfigChannel+0x122>
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a5c      	ldr	r2, [pc, #368]	; (80065ec <HAL_TIM_PWM_ConfigChannel+0x284>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d004      	beq.n	800648a <HAL_TIM_PWM_ConfigChannel+0x122>
 8006480:	f241 0134 	movw	r1, #4148	; 0x1034
 8006484:	4854      	ldr	r0, [pc, #336]	; (80065d8 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8006486:	f7fb f8e5 	bl	8001654 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	68b9      	ldr	r1, [r7, #8]
 8006490:	4618      	mov	r0, r3
 8006492:	f000 fcdb 	bl	8006e4c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	699a      	ldr	r2, [r3, #24]
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f042 0208 	orr.w	r2, r2, #8
 80064a4:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	699a      	ldr	r2, [r3, #24]
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f022 0204 	bic.w	r2, r2, #4
 80064b4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	6999      	ldr	r1, [r3, #24]
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	691a      	ldr	r2, [r3, #16]
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	430a      	orrs	r2, r1
 80064c6:	619a      	str	r2, [r3, #24]
      break;
 80064c8:	e0d7      	b.n	800667a <HAL_TIM_PWM_ConfigChannel+0x312>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a43      	ldr	r2, [pc, #268]	; (80065dc <HAL_TIM_PWM_ConfigChannel+0x274>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d01d      	beq.n	8006510 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a41      	ldr	r2, [pc, #260]	; (80065e0 <HAL_TIM_PWM_ConfigChannel+0x278>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d018      	beq.n	8006510 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064e6:	d013      	beq.n	8006510 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a3d      	ldr	r2, [pc, #244]	; (80065e4 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d00e      	beq.n	8006510 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a3c      	ldr	r2, [pc, #240]	; (80065e8 <HAL_TIM_PWM_ConfigChannel+0x280>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d009      	beq.n	8006510 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a3a      	ldr	r2, [pc, #232]	; (80065ec <HAL_TIM_PWM_ConfigChannel+0x284>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d004      	beq.n	8006510 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 8006506:	f241 0145 	movw	r1, #4165	; 0x1045
 800650a:	4833      	ldr	r0, [pc, #204]	; (80065d8 <HAL_TIM_PWM_ConfigChannel+0x270>)
 800650c:	f7fb f8a2 	bl	8001654 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	68b9      	ldr	r1, [r7, #8]
 8006516:	4618      	mov	r0, r3
 8006518:	f000 fd32 	bl	8006f80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	699a      	ldr	r2, [r3, #24]
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800652a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	699a      	ldr	r2, [r3, #24]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800653a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	6999      	ldr	r1, [r3, #24]
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	691b      	ldr	r3, [r3, #16]
 8006546:	021a      	lsls	r2, r3, #8
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	430a      	orrs	r2, r1
 800654e:	619a      	str	r2, [r3, #24]
      break;
 8006550:	e093      	b.n	800667a <HAL_TIM_PWM_ConfigChannel+0x312>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a21      	ldr	r2, [pc, #132]	; (80065dc <HAL_TIM_PWM_ConfigChannel+0x274>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d01d      	beq.n	8006598 <HAL_TIM_PWM_ConfigChannel+0x230>
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a1f      	ldr	r2, [pc, #124]	; (80065e0 <HAL_TIM_PWM_ConfigChannel+0x278>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d018      	beq.n	8006598 <HAL_TIM_PWM_ConfigChannel+0x230>
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800656e:	d013      	beq.n	8006598 <HAL_TIM_PWM_ConfigChannel+0x230>
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a1b      	ldr	r2, [pc, #108]	; (80065e4 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d00e      	beq.n	8006598 <HAL_TIM_PWM_ConfigChannel+0x230>
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a1a      	ldr	r2, [pc, #104]	; (80065e8 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d009      	beq.n	8006598 <HAL_TIM_PWM_ConfigChannel+0x230>
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a18      	ldr	r2, [pc, #96]	; (80065ec <HAL_TIM_PWM_ConfigChannel+0x284>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d004      	beq.n	8006598 <HAL_TIM_PWM_ConfigChannel+0x230>
 800658e:	f241 0156 	movw	r1, #4182	; 0x1056
 8006592:	4811      	ldr	r0, [pc, #68]	; (80065d8 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8006594:	f7fb f85e 	bl	8001654 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	68b9      	ldr	r1, [r7, #8]
 800659e:	4618      	mov	r0, r3
 80065a0:	f000 fd8c 	bl	80070bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	69da      	ldr	r2, [r3, #28]
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f042 0208 	orr.w	r2, r2, #8
 80065b2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	69da      	ldr	r2, [r3, #28]
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f022 0204 	bic.w	r2, r2, #4
 80065c2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	69d9      	ldr	r1, [r3, #28]
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	691a      	ldr	r2, [r3, #16]
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	430a      	orrs	r2, r1
 80065d4:	61da      	str	r2, [r3, #28]
      break;
 80065d6:	e050      	b.n	800667a <HAL_TIM_PWM_ConfigChannel+0x312>
 80065d8:	0800b478 	.word	0x0800b478
 80065dc:	40012c00 	.word	0x40012c00
 80065e0:	40013400 	.word	0x40013400
 80065e4:	40000400 	.word	0x40000400
 80065e8:	40000800 	.word	0x40000800
 80065ec:	40000c00 	.word	0x40000c00
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a25      	ldr	r2, [pc, #148]	; (800668c <HAL_TIM_PWM_ConfigChannel+0x324>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d01d      	beq.n	8006636 <HAL_TIM_PWM_ConfigChannel+0x2ce>
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a24      	ldr	r2, [pc, #144]	; (8006690 <HAL_TIM_PWM_ConfigChannel+0x328>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d018      	beq.n	8006636 <HAL_TIM_PWM_ConfigChannel+0x2ce>
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800660c:	d013      	beq.n	8006636 <HAL_TIM_PWM_ConfigChannel+0x2ce>
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a20      	ldr	r2, [pc, #128]	; (8006694 <HAL_TIM_PWM_ConfigChannel+0x32c>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d00e      	beq.n	8006636 <HAL_TIM_PWM_ConfigChannel+0x2ce>
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a1e      	ldr	r2, [pc, #120]	; (8006698 <HAL_TIM_PWM_ConfigChannel+0x330>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d009      	beq.n	8006636 <HAL_TIM_PWM_ConfigChannel+0x2ce>
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a1d      	ldr	r2, [pc, #116]	; (800669c <HAL_TIM_PWM_ConfigChannel+0x334>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d004      	beq.n	8006636 <HAL_TIM_PWM_ConfigChannel+0x2ce>
 800662c:	f241 0167 	movw	r1, #4199	; 0x1067
 8006630:	481b      	ldr	r0, [pc, #108]	; (80066a0 <HAL_TIM_PWM_ConfigChannel+0x338>)
 8006632:	f7fb f80f 	bl	8001654 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	68b9      	ldr	r1, [r7, #8]
 800663c:	4618      	mov	r0, r3
 800663e:	f000 fddb 	bl	80071f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	69da      	ldr	r2, [r3, #28]
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006650:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	69da      	ldr	r2, [r3, #28]
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006660:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	69d9      	ldr	r1, [r3, #28]
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	691b      	ldr	r3, [r3, #16]
 800666c:	021a      	lsls	r2, r3, #8
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	430a      	orrs	r2, r1
 8006674:	61da      	str	r2, [r3, #28]
      break;
 8006676:	e000      	b.n	800667a <HAL_TIM_PWM_ConfigChannel+0x312>
    }

    default:
      break;
 8006678:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2200      	movs	r2, #0
 800667e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006682:	2300      	movs	r3, #0
}
 8006684:	4618      	mov	r0, r3
 8006686:	3710      	adds	r7, #16
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}
 800668c:	40012c00 	.word	0x40012c00
 8006690:	40013400 	.word	0x40013400
 8006694:	40000400 	.word	0x40000400
 8006698:	40000800 	.word	0x40000800
 800669c:	40000c00 	.word	0x40000c00
 80066a0:	0800b478 	.word	0x0800b478

080066a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b084      	sub	sp, #16
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
 80066ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066b4:	2b01      	cmp	r3, #1
 80066b6:	d101      	bne.n	80066bc <HAL_TIM_ConfigClockSource+0x18>
 80066b8:	2302      	movs	r3, #2
 80066ba:	e2f5      	b.n	8006ca8 <HAL_TIM_ConfigClockSource+0x604>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2201      	movs	r2, #1
 80066c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2202      	movs	r2, #2
 80066c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066d4:	d029      	beq.n	800672a <HAL_TIM_ConfigClockSource+0x86>
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066de:	d024      	beq.n	800672a <HAL_TIM_ConfigClockSource+0x86>
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d020      	beq.n	800672a <HAL_TIM_ConfigClockSource+0x86>
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	2b10      	cmp	r3, #16
 80066ee:	d01c      	beq.n	800672a <HAL_TIM_ConfigClockSource+0x86>
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	2b20      	cmp	r3, #32
 80066f6:	d018      	beq.n	800672a <HAL_TIM_ConfigClockSource+0x86>
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	2b30      	cmp	r3, #48	; 0x30
 80066fe:	d014      	beq.n	800672a <HAL_TIM_ConfigClockSource+0x86>
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	2b40      	cmp	r3, #64	; 0x40
 8006706:	d010      	beq.n	800672a <HAL_TIM_ConfigClockSource+0x86>
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	2b50      	cmp	r3, #80	; 0x50
 800670e:	d00c      	beq.n	800672a <HAL_TIM_ConfigClockSource+0x86>
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	2b60      	cmp	r3, #96	; 0x60
 8006716:	d008      	beq.n	800672a <HAL_TIM_ConfigClockSource+0x86>
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	2b70      	cmp	r3, #112	; 0x70
 800671e:	d004      	beq.n	800672a <HAL_TIM_ConfigClockSource+0x86>
 8006720:	f241 4132 	movw	r1, #5170	; 0x1432
 8006724:	487c      	ldr	r0, [pc, #496]	; (8006918 <HAL_TIM_ConfigClockSource+0x274>)
 8006726:	f7fa ff95 	bl	8001654 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	689b      	ldr	r3, [r3, #8]
 8006730:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006738:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006740:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	68fa      	ldr	r2, [r7, #12]
 8006748:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006752:	f000 80f1 	beq.w	8006938 <HAL_TIM_ConfigClockSource+0x294>
 8006756:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800675a:	f200 8299 	bhi.w	8006c90 <HAL_TIM_ConfigClockSource+0x5ec>
 800675e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006762:	d02d      	beq.n	80067c0 <HAL_TIM_ConfigClockSource+0x11c>
 8006764:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006768:	f200 8292 	bhi.w	8006c90 <HAL_TIM_ConfigClockSource+0x5ec>
 800676c:	2b70      	cmp	r3, #112	; 0x70
 800676e:	d05d      	beq.n	800682c <HAL_TIM_ConfigClockSource+0x188>
 8006770:	2b70      	cmp	r3, #112	; 0x70
 8006772:	f200 828d 	bhi.w	8006c90 <HAL_TIM_ConfigClockSource+0x5ec>
 8006776:	2b60      	cmp	r3, #96	; 0x60
 8006778:	f000 81a5 	beq.w	8006ac6 <HAL_TIM_ConfigClockSource+0x422>
 800677c:	2b60      	cmp	r3, #96	; 0x60
 800677e:	f200 8287 	bhi.w	8006c90 <HAL_TIM_ConfigClockSource+0x5ec>
 8006782:	2b50      	cmp	r3, #80	; 0x50
 8006784:	f000 8149 	beq.w	8006a1a <HAL_TIM_ConfigClockSource+0x376>
 8006788:	2b50      	cmp	r3, #80	; 0x50
 800678a:	f200 8281 	bhi.w	8006c90 <HAL_TIM_ConfigClockSource+0x5ec>
 800678e:	2b40      	cmp	r3, #64	; 0x40
 8006790:	f000 81fc 	beq.w	8006b8c <HAL_TIM_ConfigClockSource+0x4e8>
 8006794:	2b40      	cmp	r3, #64	; 0x40
 8006796:	f200 827b 	bhi.w	8006c90 <HAL_TIM_ConfigClockSource+0x5ec>
 800679a:	2b30      	cmp	r3, #48	; 0x30
 800679c:	f000 824c 	beq.w	8006c38 <HAL_TIM_ConfigClockSource+0x594>
 80067a0:	2b30      	cmp	r3, #48	; 0x30
 80067a2:	f200 8275 	bhi.w	8006c90 <HAL_TIM_ConfigClockSource+0x5ec>
 80067a6:	2b20      	cmp	r3, #32
 80067a8:	f000 8246 	beq.w	8006c38 <HAL_TIM_ConfigClockSource+0x594>
 80067ac:	2b20      	cmp	r3, #32
 80067ae:	f200 826f 	bhi.w	8006c90 <HAL_TIM_ConfigClockSource+0x5ec>
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	f000 8240 	beq.w	8006c38 <HAL_TIM_ConfigClockSource+0x594>
 80067b8:	2b10      	cmp	r3, #16
 80067ba:	f000 823d 	beq.w	8006c38 <HAL_TIM_ConfigClockSource+0x594>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80067be:	e267      	b.n	8006c90 <HAL_TIM_ConfigClockSource+0x5ec>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a55      	ldr	r2, [pc, #340]	; (800691c <HAL_TIM_ConfigClockSource+0x278>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	f000 8264 	beq.w	8006c94 <HAL_TIM_ConfigClockSource+0x5f0>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a53      	ldr	r2, [pc, #332]	; (8006920 <HAL_TIM_ConfigClockSource+0x27c>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	f000 825e 	beq.w	8006c94 <HAL_TIM_ConfigClockSource+0x5f0>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067e0:	f000 8258 	beq.w	8006c94 <HAL_TIM_ConfigClockSource+0x5f0>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a4e      	ldr	r2, [pc, #312]	; (8006924 <HAL_TIM_ConfigClockSource+0x280>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	f000 8252 	beq.w	8006c94 <HAL_TIM_ConfigClockSource+0x5f0>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a4c      	ldr	r2, [pc, #304]	; (8006928 <HAL_TIM_ConfigClockSource+0x284>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	f000 824c 	beq.w	8006c94 <HAL_TIM_ConfigClockSource+0x5f0>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a4a      	ldr	r2, [pc, #296]	; (800692c <HAL_TIM_ConfigClockSource+0x288>)
 8006802:	4293      	cmp	r3, r2
 8006804:	f000 8246 	beq.w	8006c94 <HAL_TIM_ConfigClockSource+0x5f0>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a48      	ldr	r2, [pc, #288]	; (8006930 <HAL_TIM_ConfigClockSource+0x28c>)
 800680e:	4293      	cmp	r3, r2
 8006810:	f000 8240 	beq.w	8006c94 <HAL_TIM_ConfigClockSource+0x5f0>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a46      	ldr	r2, [pc, #280]	; (8006934 <HAL_TIM_ConfigClockSource+0x290>)
 800681a:	4293      	cmp	r3, r2
 800681c:	f000 823a 	beq.w	8006c94 <HAL_TIM_ConfigClockSource+0x5f0>
 8006820:	f241 413e 	movw	r1, #5182	; 0x143e
 8006824:	483c      	ldr	r0, [pc, #240]	; (8006918 <HAL_TIM_ConfigClockSource+0x274>)
 8006826:	f7fa ff15 	bl	8001654 <assert_failed>
      break;
 800682a:	e233      	b.n	8006c94 <HAL_TIM_ConfigClockSource+0x5f0>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a3a      	ldr	r2, [pc, #232]	; (800691c <HAL_TIM_ConfigClockSource+0x278>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d01d      	beq.n	8006872 <HAL_TIM_ConfigClockSource+0x1ce>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a39      	ldr	r2, [pc, #228]	; (8006920 <HAL_TIM_ConfigClockSource+0x27c>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d018      	beq.n	8006872 <HAL_TIM_ConfigClockSource+0x1ce>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006848:	d013      	beq.n	8006872 <HAL_TIM_ConfigClockSource+0x1ce>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a35      	ldr	r2, [pc, #212]	; (8006924 <HAL_TIM_ConfigClockSource+0x280>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d00e      	beq.n	8006872 <HAL_TIM_ConfigClockSource+0x1ce>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a33      	ldr	r2, [pc, #204]	; (8006928 <HAL_TIM_ConfigClockSource+0x284>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d009      	beq.n	8006872 <HAL_TIM_ConfigClockSource+0x1ce>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a32      	ldr	r2, [pc, #200]	; (800692c <HAL_TIM_ConfigClockSource+0x288>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d004      	beq.n	8006872 <HAL_TIM_ConfigClockSource+0x1ce>
 8006868:	f241 4145 	movw	r1, #5189	; 0x1445
 800686c:	482a      	ldr	r0, [pc, #168]	; (8006918 <HAL_TIM_ConfigClockSource+0x274>)
 800686e:	f7fa fef1 	bl	8001654 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	689b      	ldr	r3, [r3, #8]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d013      	beq.n	80068a2 <HAL_TIM_ConfigClockSource+0x1fe>
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	689b      	ldr	r3, [r3, #8]
 800687e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006882:	d00e      	beq.n	80068a2 <HAL_TIM_ConfigClockSource+0x1fe>
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	689b      	ldr	r3, [r3, #8]
 8006888:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800688c:	d009      	beq.n	80068a2 <HAL_TIM_ConfigClockSource+0x1fe>
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	689b      	ldr	r3, [r3, #8]
 8006892:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006896:	d004      	beq.n	80068a2 <HAL_TIM_ConfigClockSource+0x1fe>
 8006898:	f241 4148 	movw	r1, #5192	; 0x1448
 800689c:	481e      	ldr	r0, [pc, #120]	; (8006918 <HAL_TIM_ConfigClockSource+0x274>)
 800689e:	f7fa fed9 	bl	8001654 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068aa:	d014      	beq.n	80068d6 <HAL_TIM_ConfigClockSource+0x232>
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d010      	beq.n	80068d6 <HAL_TIM_ConfigClockSource+0x232>
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d00c      	beq.n	80068d6 <HAL_TIM_ConfigClockSource+0x232>
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	2b02      	cmp	r3, #2
 80068c2:	d008      	beq.n	80068d6 <HAL_TIM_ConfigClockSource+0x232>
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	2b0a      	cmp	r3, #10
 80068ca:	d004      	beq.n	80068d6 <HAL_TIM_ConfigClockSource+0x232>
 80068cc:	f241 4149 	movw	r1, #5193	; 0x1449
 80068d0:	4811      	ldr	r0, [pc, #68]	; (8006918 <HAL_TIM_ConfigClockSource+0x274>)
 80068d2:	f7fa febf 	bl	8001654 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	68db      	ldr	r3, [r3, #12]
 80068da:	2b0f      	cmp	r3, #15
 80068dc:	d904      	bls.n	80068e8 <HAL_TIM_ConfigClockSource+0x244>
 80068de:	f241 414a 	movw	r1, #5194	; 0x144a
 80068e2:	480d      	ldr	r0, [pc, #52]	; (8006918 <HAL_TIM_ConfigClockSource+0x274>)
 80068e4:	f7fa feb6 	bl	8001654 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6818      	ldr	r0, [r3, #0]
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	6899      	ldr	r1, [r3, #8]
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	685a      	ldr	r2, [r3, #4]
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	68db      	ldr	r3, [r3, #12]
 80068f8:	f000 fd59 	bl	80073ae <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	689b      	ldr	r3, [r3, #8]
 8006902:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800690a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	68fa      	ldr	r2, [r7, #12]
 8006912:	609a      	str	r2, [r3, #8]
      break;
 8006914:	e1bf      	b.n	8006c96 <HAL_TIM_ConfigClockSource+0x5f2>
 8006916:	bf00      	nop
 8006918:	0800b478 	.word	0x0800b478
 800691c:	40012c00 	.word	0x40012c00
 8006920:	40013400 	.word	0x40013400
 8006924:	40000400 	.word	0x40000400
 8006928:	40000800 	.word	0x40000800
 800692c:	40000c00 	.word	0x40000c00
 8006930:	40001000 	.word	0x40001000
 8006934:	40001400 	.word	0x40001400
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a8d      	ldr	r2, [pc, #564]	; (8006b74 <HAL_TIM_ConfigClockSource+0x4d0>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d01d      	beq.n	800697e <HAL_TIM_ConfigClockSource+0x2da>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a8c      	ldr	r2, [pc, #560]	; (8006b78 <HAL_TIM_ConfigClockSource+0x4d4>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d018      	beq.n	800697e <HAL_TIM_ConfigClockSource+0x2da>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006954:	d013      	beq.n	800697e <HAL_TIM_ConfigClockSource+0x2da>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a88      	ldr	r2, [pc, #544]	; (8006b7c <HAL_TIM_ConfigClockSource+0x4d8>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d00e      	beq.n	800697e <HAL_TIM_ConfigClockSource+0x2da>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a86      	ldr	r2, [pc, #536]	; (8006b80 <HAL_TIM_ConfigClockSource+0x4dc>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d009      	beq.n	800697e <HAL_TIM_ConfigClockSource+0x2da>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a85      	ldr	r2, [pc, #532]	; (8006b84 <HAL_TIM_ConfigClockSource+0x4e0>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d004      	beq.n	800697e <HAL_TIM_ConfigClockSource+0x2da>
 8006974:	f241 415d 	movw	r1, #5213	; 0x145d
 8006978:	4883      	ldr	r0, [pc, #524]	; (8006b88 <HAL_TIM_ConfigClockSource+0x4e4>)
 800697a:	f7fa fe6b 	bl	8001654 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	689b      	ldr	r3, [r3, #8]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d013      	beq.n	80069ae <HAL_TIM_ConfigClockSource+0x30a>
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	689b      	ldr	r3, [r3, #8]
 800698a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800698e:	d00e      	beq.n	80069ae <HAL_TIM_ConfigClockSource+0x30a>
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	689b      	ldr	r3, [r3, #8]
 8006994:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006998:	d009      	beq.n	80069ae <HAL_TIM_ConfigClockSource+0x30a>
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	689b      	ldr	r3, [r3, #8]
 800699e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80069a2:	d004      	beq.n	80069ae <HAL_TIM_ConfigClockSource+0x30a>
 80069a4:	f44f 51a3 	mov.w	r1, #5216	; 0x1460
 80069a8:	4877      	ldr	r0, [pc, #476]	; (8006b88 <HAL_TIM_ConfigClockSource+0x4e4>)
 80069aa:	f7fa fe53 	bl	8001654 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069b6:	d014      	beq.n	80069e2 <HAL_TIM_ConfigClockSource+0x33e>
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d010      	beq.n	80069e2 <HAL_TIM_ConfigClockSource+0x33e>
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d00c      	beq.n	80069e2 <HAL_TIM_ConfigClockSource+0x33e>
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	2b02      	cmp	r3, #2
 80069ce:	d008      	beq.n	80069e2 <HAL_TIM_ConfigClockSource+0x33e>
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	2b0a      	cmp	r3, #10
 80069d6:	d004      	beq.n	80069e2 <HAL_TIM_ConfigClockSource+0x33e>
 80069d8:	f241 4161 	movw	r1, #5217	; 0x1461
 80069dc:	486a      	ldr	r0, [pc, #424]	; (8006b88 <HAL_TIM_ConfigClockSource+0x4e4>)
 80069de:	f7fa fe39 	bl	8001654 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	68db      	ldr	r3, [r3, #12]
 80069e6:	2b0f      	cmp	r3, #15
 80069e8:	d904      	bls.n	80069f4 <HAL_TIM_ConfigClockSource+0x350>
 80069ea:	f241 4162 	movw	r1, #5218	; 0x1462
 80069ee:	4866      	ldr	r0, [pc, #408]	; (8006b88 <HAL_TIM_ConfigClockSource+0x4e4>)
 80069f0:	f7fa fe30 	bl	8001654 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6818      	ldr	r0, [r3, #0]
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	6899      	ldr	r1, [r3, #8]
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	685a      	ldr	r2, [r3, #4]
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	68db      	ldr	r3, [r3, #12]
 8006a04:	f000 fcd3 	bl	80073ae <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	689a      	ldr	r2, [r3, #8]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006a16:	609a      	str	r2, [r3, #8]
      break;
 8006a18:	e13d      	b.n	8006c96 <HAL_TIM_ConfigClockSource+0x5f2>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a55      	ldr	r2, [pc, #340]	; (8006b74 <HAL_TIM_ConfigClockSource+0x4d0>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d01d      	beq.n	8006a60 <HAL_TIM_ConfigClockSource+0x3bc>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a53      	ldr	r2, [pc, #332]	; (8006b78 <HAL_TIM_ConfigClockSource+0x4d4>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d018      	beq.n	8006a60 <HAL_TIM_ConfigClockSource+0x3bc>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a36:	d013      	beq.n	8006a60 <HAL_TIM_ConfigClockSource+0x3bc>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a4f      	ldr	r2, [pc, #316]	; (8006b7c <HAL_TIM_ConfigClockSource+0x4d8>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d00e      	beq.n	8006a60 <HAL_TIM_ConfigClockSource+0x3bc>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a4e      	ldr	r2, [pc, #312]	; (8006b80 <HAL_TIM_ConfigClockSource+0x4dc>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d009      	beq.n	8006a60 <HAL_TIM_ConfigClockSource+0x3bc>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a4c      	ldr	r2, [pc, #304]	; (8006b84 <HAL_TIM_ConfigClockSource+0x4e0>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d004      	beq.n	8006a60 <HAL_TIM_ConfigClockSource+0x3bc>
 8006a56:	f241 4171 	movw	r1, #5233	; 0x1471
 8006a5a:	484b      	ldr	r0, [pc, #300]	; (8006b88 <HAL_TIM_ConfigClockSource+0x4e4>)
 8006a5c:	f7fa fdfa 	bl	8001654 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a68:	d014      	beq.n	8006a94 <HAL_TIM_ConfigClockSource+0x3f0>
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d010      	beq.n	8006a94 <HAL_TIM_ConfigClockSource+0x3f0>
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d00c      	beq.n	8006a94 <HAL_TIM_ConfigClockSource+0x3f0>
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	2b02      	cmp	r3, #2
 8006a80:	d008      	beq.n	8006a94 <HAL_TIM_ConfigClockSource+0x3f0>
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	685b      	ldr	r3, [r3, #4]
 8006a86:	2b0a      	cmp	r3, #10
 8006a88:	d004      	beq.n	8006a94 <HAL_TIM_ConfigClockSource+0x3f0>
 8006a8a:	f241 4174 	movw	r1, #5236	; 0x1474
 8006a8e:	483e      	ldr	r0, [pc, #248]	; (8006b88 <HAL_TIM_ConfigClockSource+0x4e4>)
 8006a90:	f7fa fde0 	bl	8001654 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	68db      	ldr	r3, [r3, #12]
 8006a98:	2b0f      	cmp	r3, #15
 8006a9a:	d904      	bls.n	8006aa6 <HAL_TIM_ConfigClockSource+0x402>
 8006a9c:	f241 4175 	movw	r1, #5237	; 0x1475
 8006aa0:	4839      	ldr	r0, [pc, #228]	; (8006b88 <HAL_TIM_ConfigClockSource+0x4e4>)
 8006aa2:	f7fa fdd7 	bl	8001654 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6818      	ldr	r0, [r3, #0]
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	6859      	ldr	r1, [r3, #4]
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	68db      	ldr	r3, [r3, #12]
 8006ab2:	461a      	mov	r2, r3
 8006ab4:	f000 fc04 	bl	80072c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	2150      	movs	r1, #80	; 0x50
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f000 fc5b 	bl	800737a <TIM_ITRx_SetConfig>
      break;
 8006ac4:	e0e7      	b.n	8006c96 <HAL_TIM_ConfigClockSource+0x5f2>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a2a      	ldr	r2, [pc, #168]	; (8006b74 <HAL_TIM_ConfigClockSource+0x4d0>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d01d      	beq.n	8006b0c <HAL_TIM_ConfigClockSource+0x468>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a28      	ldr	r2, [pc, #160]	; (8006b78 <HAL_TIM_ConfigClockSource+0x4d4>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d018      	beq.n	8006b0c <HAL_TIM_ConfigClockSource+0x468>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ae2:	d013      	beq.n	8006b0c <HAL_TIM_ConfigClockSource+0x468>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a24      	ldr	r2, [pc, #144]	; (8006b7c <HAL_TIM_ConfigClockSource+0x4d8>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d00e      	beq.n	8006b0c <HAL_TIM_ConfigClockSource+0x468>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a23      	ldr	r2, [pc, #140]	; (8006b80 <HAL_TIM_ConfigClockSource+0x4dc>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d009      	beq.n	8006b0c <HAL_TIM_ConfigClockSource+0x468>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a21      	ldr	r2, [pc, #132]	; (8006b84 <HAL_TIM_ConfigClockSource+0x4e0>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d004      	beq.n	8006b0c <HAL_TIM_ConfigClockSource+0x468>
 8006b02:	f241 4181 	movw	r1, #5249	; 0x1481
 8006b06:	4820      	ldr	r0, [pc, #128]	; (8006b88 <HAL_TIM_ConfigClockSource+0x4e4>)
 8006b08:	f7fa fda4 	bl	8001654 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b14:	d014      	beq.n	8006b40 <HAL_TIM_ConfigClockSource+0x49c>
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	685b      	ldr	r3, [r3, #4]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d010      	beq.n	8006b40 <HAL_TIM_ConfigClockSource+0x49c>
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d00c      	beq.n	8006b40 <HAL_TIM_ConfigClockSource+0x49c>
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	2b02      	cmp	r3, #2
 8006b2c:	d008      	beq.n	8006b40 <HAL_TIM_ConfigClockSource+0x49c>
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	2b0a      	cmp	r3, #10
 8006b34:	d004      	beq.n	8006b40 <HAL_TIM_ConfigClockSource+0x49c>
 8006b36:	f241 4184 	movw	r1, #5252	; 0x1484
 8006b3a:	4813      	ldr	r0, [pc, #76]	; (8006b88 <HAL_TIM_ConfigClockSource+0x4e4>)
 8006b3c:	f7fa fd8a 	bl	8001654 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	68db      	ldr	r3, [r3, #12]
 8006b44:	2b0f      	cmp	r3, #15
 8006b46:	d904      	bls.n	8006b52 <HAL_TIM_ConfigClockSource+0x4ae>
 8006b48:	f241 4185 	movw	r1, #5253	; 0x1485
 8006b4c:	480e      	ldr	r0, [pc, #56]	; (8006b88 <HAL_TIM_ConfigClockSource+0x4e4>)
 8006b4e:	f7fa fd81 	bl	8001654 <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6818      	ldr	r0, [r3, #0]
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	6859      	ldr	r1, [r3, #4]
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	68db      	ldr	r3, [r3, #12]
 8006b5e:	461a      	mov	r2, r3
 8006b60:	f000 fbdc 	bl	800731c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	2160      	movs	r1, #96	; 0x60
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f000 fc05 	bl	800737a <TIM_ITRx_SetConfig>
      break;
 8006b70:	e091      	b.n	8006c96 <HAL_TIM_ConfigClockSource+0x5f2>
 8006b72:	bf00      	nop
 8006b74:	40012c00 	.word	0x40012c00
 8006b78:	40013400 	.word	0x40013400
 8006b7c:	40000400 	.word	0x40000400
 8006b80:	40000800 	.word	0x40000800
 8006b84:	40000c00 	.word	0x40000c00
 8006b88:	0800b478 	.word	0x0800b478
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a47      	ldr	r2, [pc, #284]	; (8006cb0 <HAL_TIM_ConfigClockSource+0x60c>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d01d      	beq.n	8006bd2 <HAL_TIM_ConfigClockSource+0x52e>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a46      	ldr	r2, [pc, #280]	; (8006cb4 <HAL_TIM_ConfigClockSource+0x610>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d018      	beq.n	8006bd2 <HAL_TIM_ConfigClockSource+0x52e>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ba8:	d013      	beq.n	8006bd2 <HAL_TIM_ConfigClockSource+0x52e>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a42      	ldr	r2, [pc, #264]	; (8006cb8 <HAL_TIM_ConfigClockSource+0x614>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d00e      	beq.n	8006bd2 <HAL_TIM_ConfigClockSource+0x52e>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a40      	ldr	r2, [pc, #256]	; (8006cbc <HAL_TIM_ConfigClockSource+0x618>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d009      	beq.n	8006bd2 <HAL_TIM_ConfigClockSource+0x52e>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a3f      	ldr	r2, [pc, #252]	; (8006cc0 <HAL_TIM_ConfigClockSource+0x61c>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d004      	beq.n	8006bd2 <HAL_TIM_ConfigClockSource+0x52e>
 8006bc8:	f241 4191 	movw	r1, #5265	; 0x1491
 8006bcc:	483d      	ldr	r0, [pc, #244]	; (8006cc4 <HAL_TIM_ConfigClockSource+0x620>)
 8006bce:	f7fa fd41 	bl	8001654 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bda:	d014      	beq.n	8006c06 <HAL_TIM_ConfigClockSource+0x562>
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d010      	beq.n	8006c06 <HAL_TIM_ConfigClockSource+0x562>
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d00c      	beq.n	8006c06 <HAL_TIM_ConfigClockSource+0x562>
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	2b02      	cmp	r3, #2
 8006bf2:	d008      	beq.n	8006c06 <HAL_TIM_ConfigClockSource+0x562>
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	2b0a      	cmp	r3, #10
 8006bfa:	d004      	beq.n	8006c06 <HAL_TIM_ConfigClockSource+0x562>
 8006bfc:	f241 4194 	movw	r1, #5268	; 0x1494
 8006c00:	4830      	ldr	r0, [pc, #192]	; (8006cc4 <HAL_TIM_ConfigClockSource+0x620>)
 8006c02:	f7fa fd27 	bl	8001654 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	68db      	ldr	r3, [r3, #12]
 8006c0a:	2b0f      	cmp	r3, #15
 8006c0c:	d904      	bls.n	8006c18 <HAL_TIM_ConfigClockSource+0x574>
 8006c0e:	f241 4195 	movw	r1, #5269	; 0x1495
 8006c12:	482c      	ldr	r0, [pc, #176]	; (8006cc4 <HAL_TIM_ConfigClockSource+0x620>)
 8006c14:	f7fa fd1e 	bl	8001654 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6818      	ldr	r0, [r3, #0]
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	6859      	ldr	r1, [r3, #4]
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	68db      	ldr	r3, [r3, #12]
 8006c24:	461a      	mov	r2, r3
 8006c26:	f000 fb4b 	bl	80072c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	2140      	movs	r1, #64	; 0x40
 8006c30:	4618      	mov	r0, r3
 8006c32:	f000 fba2 	bl	800737a <TIM_ITRx_SetConfig>
      break;
 8006c36:	e02e      	b.n	8006c96 <HAL_TIM_ConfigClockSource+0x5f2>
        assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a1c      	ldr	r2, [pc, #112]	; (8006cb0 <HAL_TIM_ConfigClockSource+0x60c>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d01d      	beq.n	8006c7e <HAL_TIM_ConfigClockSource+0x5da>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a1b      	ldr	r2, [pc, #108]	; (8006cb4 <HAL_TIM_ConfigClockSource+0x610>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d018      	beq.n	8006c7e <HAL_TIM_ConfigClockSource+0x5da>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c54:	d013      	beq.n	8006c7e <HAL_TIM_ConfigClockSource+0x5da>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a17      	ldr	r2, [pc, #92]	; (8006cb8 <HAL_TIM_ConfigClockSource+0x614>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d00e      	beq.n	8006c7e <HAL_TIM_ConfigClockSource+0x5da>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a15      	ldr	r2, [pc, #84]	; (8006cbc <HAL_TIM_ConfigClockSource+0x618>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d009      	beq.n	8006c7e <HAL_TIM_ConfigClockSource+0x5da>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a14      	ldr	r2, [pc, #80]	; (8006cc0 <HAL_TIM_ConfigClockSource+0x61c>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d004      	beq.n	8006c7e <HAL_TIM_ConfigClockSource+0x5da>
 8006c74:	f241 41a4 	movw	r1, #5284	; 0x14a4
 8006c78:	4812      	ldr	r0, [pc, #72]	; (8006cc4 <HAL_TIM_ConfigClockSource+0x620>)
 8006c7a:	f7fa fceb 	bl	8001654 <assert_failed>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681a      	ldr	r2, [r3, #0]
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4619      	mov	r1, r3
 8006c88:	4610      	mov	r0, r2
 8006c8a:	f000 fb76 	bl	800737a <TIM_ITRx_SetConfig>
        break;
 8006c8e:	e002      	b.n	8006c96 <HAL_TIM_ConfigClockSource+0x5f2>
      break;
 8006c90:	bf00      	nop
 8006c92:	e000      	b.n	8006c96 <HAL_TIM_ConfigClockSource+0x5f2>
      break;
 8006c94:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2201      	movs	r2, #1
 8006c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ca6:	2300      	movs	r3, #0
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	3710      	adds	r7, #16
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}
 8006cb0:	40012c00 	.word	0x40012c00
 8006cb4:	40013400 	.word	0x40013400
 8006cb8:	40000400 	.word	0x40000400
 8006cbc:	40000800 	.word	0x40000800
 8006cc0:	40000c00 	.word	0x40000c00
 8006cc4:	0800b478 	.word	0x0800b478

08006cc8 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b083      	sub	sp, #12
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8006cd0:	bf00      	nop
 8006cd2:	370c      	adds	r7, #12
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bc80      	pop	{r7}
 8006cd8:	4770      	bx	lr

08006cda <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006cda:	b480      	push	{r7}
 8006cdc:	b083      	sub	sp, #12
 8006cde:	af00      	add	r7, sp, #0
 8006ce0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006ce2:	bf00      	nop
 8006ce4:	370c      	adds	r7, #12
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bc80      	pop	{r7}
 8006cea:	4770      	bx	lr

08006cec <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b083      	sub	sp, #12
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8006cf4:	bf00      	nop
 8006cf6:	370c      	adds	r7, #12
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bc80      	pop	{r7}
 8006cfc:	4770      	bx	lr

08006cfe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006cfe:	b480      	push	{r7}
 8006d00:	b083      	sub	sp, #12
 8006d02:	af00      	add	r7, sp, #0
 8006d04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006d06:	bf00      	nop
 8006d08:	370c      	adds	r7, #12
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bc80      	pop	{r7}
 8006d0e:	4770      	bx	lr

08006d10 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b083      	sub	sp, #12
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8006d18:	bf00      	nop
 8006d1a:	370c      	adds	r7, #12
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bc80      	pop	{r7}
 8006d20:	4770      	bx	lr

08006d22 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006d22:	b480      	push	{r7}
 8006d24:	b083      	sub	sp, #12
 8006d26:	af00      	add	r7, sp, #0
 8006d28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006d2a:	bf00      	nop
 8006d2c:	370c      	adds	r7, #12
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bc80      	pop	{r7}
 8006d32:	4770      	bx	lr

08006d34 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b083      	sub	sp, #12
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8006d3c:	bf00      	nop
 8006d3e:	370c      	adds	r7, #12
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bc80      	pop	{r7}
 8006d44:	4770      	bx	lr

08006d46 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8006d46:	b480      	push	{r7}
 8006d48:	b083      	sub	sp, #12
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8006d4e:	bf00      	nop
 8006d50:	370c      	adds	r7, #12
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bc80      	pop	{r7}
 8006d56:	4770      	bx	lr

08006d58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b085      	sub	sp, #20
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
 8006d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	4a33      	ldr	r2, [pc, #204]	; (8006e38 <TIM_Base_SetConfig+0xe0>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d013      	beq.n	8006d98 <TIM_Base_SetConfig+0x40>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	4a32      	ldr	r2, [pc, #200]	; (8006e3c <TIM_Base_SetConfig+0xe4>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d00f      	beq.n	8006d98 <TIM_Base_SetConfig+0x40>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d7e:	d00b      	beq.n	8006d98 <TIM_Base_SetConfig+0x40>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	4a2f      	ldr	r2, [pc, #188]	; (8006e40 <TIM_Base_SetConfig+0xe8>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d007      	beq.n	8006d98 <TIM_Base_SetConfig+0x40>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	4a2e      	ldr	r2, [pc, #184]	; (8006e44 <TIM_Base_SetConfig+0xec>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d003      	beq.n	8006d98 <TIM_Base_SetConfig+0x40>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	4a2d      	ldr	r2, [pc, #180]	; (8006e48 <TIM_Base_SetConfig+0xf0>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d108      	bne.n	8006daa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	68fa      	ldr	r2, [r7, #12]
 8006da6:	4313      	orrs	r3, r2
 8006da8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	4a22      	ldr	r2, [pc, #136]	; (8006e38 <TIM_Base_SetConfig+0xe0>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d013      	beq.n	8006dda <TIM_Base_SetConfig+0x82>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	4a21      	ldr	r2, [pc, #132]	; (8006e3c <TIM_Base_SetConfig+0xe4>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d00f      	beq.n	8006dda <TIM_Base_SetConfig+0x82>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dc0:	d00b      	beq.n	8006dda <TIM_Base_SetConfig+0x82>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	4a1e      	ldr	r2, [pc, #120]	; (8006e40 <TIM_Base_SetConfig+0xe8>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d007      	beq.n	8006dda <TIM_Base_SetConfig+0x82>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	4a1d      	ldr	r2, [pc, #116]	; (8006e44 <TIM_Base_SetConfig+0xec>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d003      	beq.n	8006dda <TIM_Base_SetConfig+0x82>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	4a1c      	ldr	r2, [pc, #112]	; (8006e48 <TIM_Base_SetConfig+0xf0>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d108      	bne.n	8006dec <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006de0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	68db      	ldr	r3, [r3, #12]
 8006de6:	68fa      	ldr	r2, [r7, #12]
 8006de8:	4313      	orrs	r3, r2
 8006dea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	695b      	ldr	r3, [r3, #20]
 8006df6:	4313      	orrs	r3, r2
 8006df8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	68fa      	ldr	r2, [r7, #12]
 8006dfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	689a      	ldr	r2, [r3, #8]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	681a      	ldr	r2, [r3, #0]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	4a09      	ldr	r2, [pc, #36]	; (8006e38 <TIM_Base_SetConfig+0xe0>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d003      	beq.n	8006e20 <TIM_Base_SetConfig+0xc8>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	4a08      	ldr	r2, [pc, #32]	; (8006e3c <TIM_Base_SetConfig+0xe4>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d103      	bne.n	8006e28 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	691a      	ldr	r2, [r3, #16]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	615a      	str	r2, [r3, #20]
}
 8006e2e:	bf00      	nop
 8006e30:	3714      	adds	r7, #20
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bc80      	pop	{r7}
 8006e36:	4770      	bx	lr
 8006e38:	40012c00 	.word	0x40012c00
 8006e3c:	40013400 	.word	0x40013400
 8006e40:	40000400 	.word	0x40000400
 8006e44:	40000800 	.word	0x40000800
 8006e48:	40000c00 	.word	0x40000c00

08006e4c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b086      	sub	sp, #24
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
 8006e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6a1b      	ldr	r3, [r3, #32]
 8006e5a:	f023 0201 	bic.w	r2, r3, #1
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6a1b      	ldr	r3, [r3, #32]
 8006e66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	699b      	ldr	r3, [r3, #24]
 8006e72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	f023 0303 	bic.w	r3, r3, #3
 8006e82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	68fa      	ldr	r2, [r7, #12]
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	f023 0302 	bic.w	r3, r3, #2
 8006e94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	689b      	ldr	r3, [r3, #8]
 8006e9a:	697a      	ldr	r2, [r7, #20]
 8006e9c:	4313      	orrs	r3, r2
 8006e9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	4a34      	ldr	r2, [pc, #208]	; (8006f74 <TIM_OC1_SetConfig+0x128>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d003      	beq.n	8006eb0 <TIM_OC1_SetConfig+0x64>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	4a33      	ldr	r2, [pc, #204]	; (8006f78 <TIM_OC1_SetConfig+0x12c>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d119      	bne.n	8006ee4 <TIM_OC1_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	68db      	ldr	r3, [r3, #12]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d008      	beq.n	8006eca <TIM_OC1_SetConfig+0x7e>
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	68db      	ldr	r3, [r3, #12]
 8006ebc:	2b08      	cmp	r3, #8
 8006ebe:	d004      	beq.n	8006eca <TIM_OC1_SetConfig+0x7e>
 8006ec0:	f641 2141 	movw	r1, #6721	; 0x1a41
 8006ec4:	482d      	ldr	r0, [pc, #180]	; (8006f7c <TIM_OC1_SetConfig+0x130>)
 8006ec6:	f7fa fbc5 	bl	8001654 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	f023 0308 	bic.w	r3, r3, #8
 8006ed0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	68db      	ldr	r3, [r3, #12]
 8006ed6:	697a      	ldr	r2, [r7, #20]
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	f023 0304 	bic.w	r3, r3, #4
 8006ee2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	4a23      	ldr	r2, [pc, #140]	; (8006f74 <TIM_OC1_SetConfig+0x128>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d003      	beq.n	8006ef4 <TIM_OC1_SetConfig+0xa8>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	4a22      	ldr	r2, [pc, #136]	; (8006f78 <TIM_OC1_SetConfig+0x12c>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d12d      	bne.n	8006f50 <TIM_OC1_SetConfig+0x104>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	699b      	ldr	r3, [r3, #24]
 8006ef8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006efc:	d008      	beq.n	8006f10 <TIM_OC1_SetConfig+0xc4>
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	699b      	ldr	r3, [r3, #24]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d004      	beq.n	8006f10 <TIM_OC1_SetConfig+0xc4>
 8006f06:	f641 214e 	movw	r1, #6734	; 0x1a4e
 8006f0a:	481c      	ldr	r0, [pc, #112]	; (8006f7c <TIM_OC1_SetConfig+0x130>)
 8006f0c:	f7fa fba2 	bl	8001654 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	695b      	ldr	r3, [r3, #20]
 8006f14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f18:	d008      	beq.n	8006f2c <TIM_OC1_SetConfig+0xe0>
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	695b      	ldr	r3, [r3, #20]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d004      	beq.n	8006f2c <TIM_OC1_SetConfig+0xe0>
 8006f22:	f641 214f 	movw	r1, #6735	; 0x1a4f
 8006f26:	4815      	ldr	r0, [pc, #84]	; (8006f7c <TIM_OC1_SetConfig+0x130>)
 8006f28:	f7fa fb94 	bl	8001654 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	695b      	ldr	r3, [r3, #20]
 8006f40:	693a      	ldr	r2, [r7, #16]
 8006f42:	4313      	orrs	r3, r2
 8006f44:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	699b      	ldr	r3, [r3, #24]
 8006f4a:	693a      	ldr	r2, [r7, #16]
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	693a      	ldr	r2, [r7, #16]
 8006f54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	68fa      	ldr	r2, [r7, #12]
 8006f5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	685a      	ldr	r2, [r3, #4]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	697a      	ldr	r2, [r7, #20]
 8006f68:	621a      	str	r2, [r3, #32]
}
 8006f6a:	bf00      	nop
 8006f6c:	3718      	adds	r7, #24
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}
 8006f72:	bf00      	nop
 8006f74:	40012c00 	.word	0x40012c00
 8006f78:	40013400 	.word	0x40013400
 8006f7c:	0800b478 	.word	0x0800b478

08006f80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b086      	sub	sp, #24
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6a1b      	ldr	r3, [r3, #32]
 8006f8e:	f023 0210 	bic.w	r2, r3, #16
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6a1b      	ldr	r3, [r3, #32]
 8006f9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	699b      	ldr	r3, [r3, #24]
 8006fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	021b      	lsls	r3, r3, #8
 8006fbe:	68fa      	ldr	r2, [r7, #12]
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	f023 0320 	bic.w	r3, r3, #32
 8006fca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	689b      	ldr	r3, [r3, #8]
 8006fd0:	011b      	lsls	r3, r3, #4
 8006fd2:	697a      	ldr	r2, [r7, #20]
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	4a35      	ldr	r2, [pc, #212]	; (80070b0 <TIM_OC2_SetConfig+0x130>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d003      	beq.n	8006fe8 <TIM_OC2_SetConfig+0x68>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	4a34      	ldr	r2, [pc, #208]	; (80070b4 <TIM_OC2_SetConfig+0x134>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d11a      	bne.n	800701e <TIM_OC2_SetConfig+0x9e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	68db      	ldr	r3, [r3, #12]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d008      	beq.n	8007002 <TIM_OC2_SetConfig+0x82>
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	68db      	ldr	r3, [r3, #12]
 8006ff4:	2b08      	cmp	r3, #8
 8006ff6:	d004      	beq.n	8007002 <TIM_OC2_SetConfig+0x82>
 8006ff8:	f641 218c 	movw	r1, #6796	; 0x1a8c
 8006ffc:	482e      	ldr	r0, [pc, #184]	; (80070b8 <TIM_OC2_SetConfig+0x138>)
 8006ffe:	f7fa fb29 	bl	8001654 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007008:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	68db      	ldr	r3, [r3, #12]
 800700e:	011b      	lsls	r3, r3, #4
 8007010:	697a      	ldr	r2, [r7, #20]
 8007012:	4313      	orrs	r3, r2
 8007014:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800701c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	4a23      	ldr	r2, [pc, #140]	; (80070b0 <TIM_OC2_SetConfig+0x130>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d003      	beq.n	800702e <TIM_OC2_SetConfig+0xae>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	4a22      	ldr	r2, [pc, #136]	; (80070b4 <TIM_OC2_SetConfig+0x134>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d12f      	bne.n	800708e <TIM_OC2_SetConfig+0x10e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	699b      	ldr	r3, [r3, #24]
 8007032:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007036:	d008      	beq.n	800704a <TIM_OC2_SetConfig+0xca>
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	699b      	ldr	r3, [r3, #24]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d004      	beq.n	800704a <TIM_OC2_SetConfig+0xca>
 8007040:	f641 219a 	movw	r1, #6810	; 0x1a9a
 8007044:	481c      	ldr	r0, [pc, #112]	; (80070b8 <TIM_OC2_SetConfig+0x138>)
 8007046:	f7fa fb05 	bl	8001654 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	695b      	ldr	r3, [r3, #20]
 800704e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007052:	d008      	beq.n	8007066 <TIM_OC2_SetConfig+0xe6>
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	695b      	ldr	r3, [r3, #20]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d004      	beq.n	8007066 <TIM_OC2_SetConfig+0xe6>
 800705c:	f641 219b 	movw	r1, #6811	; 0x1a9b
 8007060:	4815      	ldr	r0, [pc, #84]	; (80070b8 <TIM_OC2_SetConfig+0x138>)
 8007062:	f7fa faf7 	bl	8001654 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800706c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007074:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	695b      	ldr	r3, [r3, #20]
 800707a:	009b      	lsls	r3, r3, #2
 800707c:	693a      	ldr	r2, [r7, #16]
 800707e:	4313      	orrs	r3, r2
 8007080:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	699b      	ldr	r3, [r3, #24]
 8007086:	009b      	lsls	r3, r3, #2
 8007088:	693a      	ldr	r2, [r7, #16]
 800708a:	4313      	orrs	r3, r2
 800708c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	693a      	ldr	r2, [r7, #16]
 8007092:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	68fa      	ldr	r2, [r7, #12]
 8007098:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	685a      	ldr	r2, [r3, #4]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	697a      	ldr	r2, [r7, #20]
 80070a6:	621a      	str	r2, [r3, #32]
}
 80070a8:	bf00      	nop
 80070aa:	3718      	adds	r7, #24
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bd80      	pop	{r7, pc}
 80070b0:	40012c00 	.word	0x40012c00
 80070b4:	40013400 	.word	0x40013400
 80070b8:	0800b478 	.word	0x0800b478

080070bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b086      	sub	sp, #24
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6a1b      	ldr	r3, [r3, #32]
 80070ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6a1b      	ldr	r3, [r3, #32]
 80070d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	69db      	ldr	r3, [r3, #28]
 80070e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	f023 0303 	bic.w	r3, r3, #3
 80070f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	68fa      	ldr	r2, [r7, #12]
 80070fa:	4313      	orrs	r3, r2
 80070fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007104:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	689b      	ldr	r3, [r3, #8]
 800710a:	021b      	lsls	r3, r3, #8
 800710c:	697a      	ldr	r2, [r7, #20]
 800710e:	4313      	orrs	r3, r2
 8007110:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	4a35      	ldr	r2, [pc, #212]	; (80071ec <TIM_OC3_SetConfig+0x130>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d003      	beq.n	8007122 <TIM_OC3_SetConfig+0x66>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	4a34      	ldr	r2, [pc, #208]	; (80071f0 <TIM_OC3_SetConfig+0x134>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d11a      	bne.n	8007158 <TIM_OC3_SetConfig+0x9c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	68db      	ldr	r3, [r3, #12]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d008      	beq.n	800713c <TIM_OC3_SetConfig+0x80>
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	68db      	ldr	r3, [r3, #12]
 800712e:	2b08      	cmp	r3, #8
 8007130:	d004      	beq.n	800713c <TIM_OC3_SetConfig+0x80>
 8007132:	f641 21d7 	movw	r1, #6871	; 0x1ad7
 8007136:	482f      	ldr	r0, [pc, #188]	; (80071f4 <TIM_OC3_SetConfig+0x138>)
 8007138:	f7fa fa8c 	bl	8001654 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007142:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	68db      	ldr	r3, [r3, #12]
 8007148:	021b      	lsls	r3, r3, #8
 800714a:	697a      	ldr	r2, [r7, #20]
 800714c:	4313      	orrs	r3, r2
 800714e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007156:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	4a24      	ldr	r2, [pc, #144]	; (80071ec <TIM_OC3_SetConfig+0x130>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d003      	beq.n	8007168 <TIM_OC3_SetConfig+0xac>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	4a23      	ldr	r2, [pc, #140]	; (80071f0 <TIM_OC3_SetConfig+0x134>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d12f      	bne.n	80071c8 <TIM_OC3_SetConfig+0x10c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	699b      	ldr	r3, [r3, #24]
 800716c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007170:	d008      	beq.n	8007184 <TIM_OC3_SetConfig+0xc8>
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	699b      	ldr	r3, [r3, #24]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d004      	beq.n	8007184 <TIM_OC3_SetConfig+0xc8>
 800717a:	f641 21e4 	movw	r1, #6884	; 0x1ae4
 800717e:	481d      	ldr	r0, [pc, #116]	; (80071f4 <TIM_OC3_SetConfig+0x138>)
 8007180:	f7fa fa68 	bl	8001654 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	695b      	ldr	r3, [r3, #20]
 8007188:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800718c:	d008      	beq.n	80071a0 <TIM_OC3_SetConfig+0xe4>
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	695b      	ldr	r3, [r3, #20]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d004      	beq.n	80071a0 <TIM_OC3_SetConfig+0xe4>
 8007196:	f641 21e5 	movw	r1, #6885	; 0x1ae5
 800719a:	4816      	ldr	r0, [pc, #88]	; (80071f4 <TIM_OC3_SetConfig+0x138>)
 800719c:	f7fa fa5a 	bl	8001654 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80071a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80071ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	695b      	ldr	r3, [r3, #20]
 80071b4:	011b      	lsls	r3, r3, #4
 80071b6:	693a      	ldr	r2, [r7, #16]
 80071b8:	4313      	orrs	r3, r2
 80071ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	699b      	ldr	r3, [r3, #24]
 80071c0:	011b      	lsls	r3, r3, #4
 80071c2:	693a      	ldr	r2, [r7, #16]
 80071c4:	4313      	orrs	r3, r2
 80071c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	693a      	ldr	r2, [r7, #16]
 80071cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	68fa      	ldr	r2, [r7, #12]
 80071d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	685a      	ldr	r2, [r3, #4]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	697a      	ldr	r2, [r7, #20]
 80071e0:	621a      	str	r2, [r3, #32]
}
 80071e2:	bf00      	nop
 80071e4:	3718      	adds	r7, #24
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}
 80071ea:	bf00      	nop
 80071ec:	40012c00 	.word	0x40012c00
 80071f0:	40013400 	.word	0x40013400
 80071f4:	0800b478 	.word	0x0800b478

080071f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b086      	sub	sp, #24
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
 8007200:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6a1b      	ldr	r3, [r3, #32]
 8007206:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6a1b      	ldr	r3, [r3, #32]
 8007212:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	69db      	ldr	r3, [r3, #28]
 800721e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007226:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800722e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	021b      	lsls	r3, r3, #8
 8007236:	68fa      	ldr	r2, [r7, #12]
 8007238:	4313      	orrs	r3, r2
 800723a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007242:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	689b      	ldr	r3, [r3, #8]
 8007248:	031b      	lsls	r3, r3, #12
 800724a:	693a      	ldr	r2, [r7, #16]
 800724c:	4313      	orrs	r3, r2
 800724e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	4a18      	ldr	r2, [pc, #96]	; (80072b4 <TIM_OC4_SetConfig+0xbc>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d003      	beq.n	8007260 <TIM_OC4_SetConfig+0x68>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	4a17      	ldr	r2, [pc, #92]	; (80072b8 <TIM_OC4_SetConfig+0xc0>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d117      	bne.n	8007290 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	695b      	ldr	r3, [r3, #20]
 8007264:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007268:	d008      	beq.n	800727c <TIM_OC4_SetConfig+0x84>
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	695b      	ldr	r3, [r3, #20]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d004      	beq.n	800727c <TIM_OC4_SetConfig+0x84>
 8007272:	f641 3123 	movw	r1, #6947	; 0x1b23
 8007276:	4811      	ldr	r0, [pc, #68]	; (80072bc <TIM_OC4_SetConfig+0xc4>)
 8007278:	f7fa f9ec 	bl	8001654 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007282:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	695b      	ldr	r3, [r3, #20]
 8007288:	019b      	lsls	r3, r3, #6
 800728a:	697a      	ldr	r2, [r7, #20]
 800728c:	4313      	orrs	r3, r2
 800728e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	697a      	ldr	r2, [r7, #20]
 8007294:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	68fa      	ldr	r2, [r7, #12]
 800729a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	685a      	ldr	r2, [r3, #4]
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	693a      	ldr	r2, [r7, #16]
 80072a8:	621a      	str	r2, [r3, #32]
}
 80072aa:	bf00      	nop
 80072ac:	3718      	adds	r7, #24
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}
 80072b2:	bf00      	nop
 80072b4:	40012c00 	.word	0x40012c00
 80072b8:	40013400 	.word	0x40013400
 80072bc:	0800b478 	.word	0x0800b478

080072c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b087      	sub	sp, #28
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	60f8      	str	r0, [r7, #12]
 80072c8:	60b9      	str	r1, [r7, #8]
 80072ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	6a1b      	ldr	r3, [r3, #32]
 80072d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	6a1b      	ldr	r3, [r3, #32]
 80072d6:	f023 0201 	bic.w	r2, r3, #1
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	699b      	ldr	r3, [r3, #24]
 80072e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80072ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	011b      	lsls	r3, r3, #4
 80072f0:	693a      	ldr	r2, [r7, #16]
 80072f2:	4313      	orrs	r3, r2
 80072f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	f023 030a 	bic.w	r3, r3, #10
 80072fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80072fe:	697a      	ldr	r2, [r7, #20]
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	4313      	orrs	r3, r2
 8007304:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	693a      	ldr	r2, [r7, #16]
 800730a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	697a      	ldr	r2, [r7, #20]
 8007310:	621a      	str	r2, [r3, #32]
}
 8007312:	bf00      	nop
 8007314:	371c      	adds	r7, #28
 8007316:	46bd      	mov	sp, r7
 8007318:	bc80      	pop	{r7}
 800731a:	4770      	bx	lr

0800731c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800731c:	b480      	push	{r7}
 800731e:	b087      	sub	sp, #28
 8007320:	af00      	add	r7, sp, #0
 8007322:	60f8      	str	r0, [r7, #12]
 8007324:	60b9      	str	r1, [r7, #8]
 8007326:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	6a1b      	ldr	r3, [r3, #32]
 800732c:	f023 0210 	bic.w	r2, r3, #16
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	699b      	ldr	r3, [r3, #24]
 8007338:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	6a1b      	ldr	r3, [r3, #32]
 800733e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007346:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	031b      	lsls	r3, r3, #12
 800734c:	697a      	ldr	r2, [r7, #20]
 800734e:	4313      	orrs	r3, r2
 8007350:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007358:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	011b      	lsls	r3, r3, #4
 800735e:	693a      	ldr	r2, [r7, #16]
 8007360:	4313      	orrs	r3, r2
 8007362:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	697a      	ldr	r2, [r7, #20]
 8007368:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	693a      	ldr	r2, [r7, #16]
 800736e:	621a      	str	r2, [r3, #32]
}
 8007370:	bf00      	nop
 8007372:	371c      	adds	r7, #28
 8007374:	46bd      	mov	sp, r7
 8007376:	bc80      	pop	{r7}
 8007378:	4770      	bx	lr

0800737a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800737a:	b480      	push	{r7}
 800737c:	b085      	sub	sp, #20
 800737e:	af00      	add	r7, sp, #0
 8007380:	6078      	str	r0, [r7, #4]
 8007382:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	689b      	ldr	r3, [r3, #8]
 8007388:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007390:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007392:	683a      	ldr	r2, [r7, #0]
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	4313      	orrs	r3, r2
 8007398:	f043 0307 	orr.w	r3, r3, #7
 800739c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	68fa      	ldr	r2, [r7, #12]
 80073a2:	609a      	str	r2, [r3, #8]
}
 80073a4:	bf00      	nop
 80073a6:	3714      	adds	r7, #20
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bc80      	pop	{r7}
 80073ac:	4770      	bx	lr

080073ae <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80073ae:	b480      	push	{r7}
 80073b0:	b087      	sub	sp, #28
 80073b2:	af00      	add	r7, sp, #0
 80073b4:	60f8      	str	r0, [r7, #12]
 80073b6:	60b9      	str	r1, [r7, #8]
 80073b8:	607a      	str	r2, [r7, #4]
 80073ba:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	689b      	ldr	r3, [r3, #8]
 80073c0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80073c8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	021a      	lsls	r2, r3, #8
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	431a      	orrs	r2, r3
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	4313      	orrs	r3, r2
 80073d6:	697a      	ldr	r2, [r7, #20]
 80073d8:	4313      	orrs	r3, r2
 80073da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	697a      	ldr	r2, [r7, #20]
 80073e0:	609a      	str	r2, [r3, #8]
}
 80073e2:	bf00      	nop
 80073e4:	371c      	adds	r7, #28
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bc80      	pop	{r7}
 80073ea:	4770      	bx	lr

080073ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b086      	sub	sp, #24
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	60f8      	str	r0, [r7, #12]
 80073f4:	60b9      	str	r1, [r7, #8]
 80073f6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	4a26      	ldr	r2, [pc, #152]	; (8007494 <TIM_CCxChannelCmd+0xa8>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d018      	beq.n	8007432 <TIM_CCxChannelCmd+0x46>
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	4a25      	ldr	r2, [pc, #148]	; (8007498 <TIM_CCxChannelCmd+0xac>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d014      	beq.n	8007432 <TIM_CCxChannelCmd+0x46>
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800740e:	d010      	beq.n	8007432 <TIM_CCxChannelCmd+0x46>
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	4a22      	ldr	r2, [pc, #136]	; (800749c <TIM_CCxChannelCmd+0xb0>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d00c      	beq.n	8007432 <TIM_CCxChannelCmd+0x46>
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	4a21      	ldr	r2, [pc, #132]	; (80074a0 <TIM_CCxChannelCmd+0xb4>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d008      	beq.n	8007432 <TIM_CCxChannelCmd+0x46>
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	4a20      	ldr	r2, [pc, #128]	; (80074a4 <TIM_CCxChannelCmd+0xb8>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d004      	beq.n	8007432 <TIM_CCxChannelCmd+0x46>
 8007428:	f641 5109 	movw	r1, #7433	; 0x1d09
 800742c:	481e      	ldr	r0, [pc, #120]	; (80074a8 <TIM_CCxChannelCmd+0xbc>)
 800742e:	f7fa f911 	bl	8001654 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d010      	beq.n	800745a <TIM_CCxChannelCmd+0x6e>
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	2b04      	cmp	r3, #4
 800743c:	d00d      	beq.n	800745a <TIM_CCxChannelCmd+0x6e>
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	2b08      	cmp	r3, #8
 8007442:	d00a      	beq.n	800745a <TIM_CCxChannelCmd+0x6e>
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	2b0c      	cmp	r3, #12
 8007448:	d007      	beq.n	800745a <TIM_CCxChannelCmd+0x6e>
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	2b3c      	cmp	r3, #60	; 0x3c
 800744e:	d004      	beq.n	800745a <TIM_CCxChannelCmd+0x6e>
 8007450:	f641 510a 	movw	r1, #7434	; 0x1d0a
 8007454:	4814      	ldr	r0, [pc, #80]	; (80074a8 <TIM_CCxChannelCmd+0xbc>)
 8007456:	f7fa f8fd 	bl	8001654 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	f003 031f 	and.w	r3, r3, #31
 8007460:	2201      	movs	r2, #1
 8007462:	fa02 f303 	lsl.w	r3, r2, r3
 8007466:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	6a1a      	ldr	r2, [r3, #32]
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	43db      	mvns	r3, r3
 8007470:	401a      	ands	r2, r3
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	6a1a      	ldr	r2, [r3, #32]
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	f003 031f 	and.w	r3, r3, #31
 8007480:	6879      	ldr	r1, [r7, #4]
 8007482:	fa01 f303 	lsl.w	r3, r1, r3
 8007486:	431a      	orrs	r2, r3
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	621a      	str	r2, [r3, #32]
}
 800748c:	bf00      	nop
 800748e:	3718      	adds	r7, #24
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}
 8007494:	40012c00 	.word	0x40012c00
 8007498:	40013400 	.word	0x40013400
 800749c:	40000400 	.word	0x40000400
 80074a0:	40000800 	.word	0x40000800
 80074a4:	40000c00 	.word	0x40000c00
 80074a8:	0800b478 	.word	0x0800b478

080074ac <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 80074ac:	b480      	push	{r7}
 80074ae:	b083      	sub	sp, #12
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	4a1c      	ldr	r2, [pc, #112]	; (8007528 <TIM_ResetCallback+0x7c>)
 80074b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	4a1b      	ldr	r2, [pc, #108]	; (800752c <TIM_ResetCallback+0x80>)
 80074c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	4a1a      	ldr	r2, [pc, #104]	; (8007530 <TIM_ResetCallback+0x84>)
 80074c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	4a19      	ldr	r2, [pc, #100]	; (8007534 <TIM_ResetCallback+0x88>)
 80074d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	4a18      	ldr	r2, [pc, #96]	; (8007538 <TIM_ResetCallback+0x8c>)
 80074d8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	4a17      	ldr	r2, [pc, #92]	; (800753c <TIM_ResetCallback+0x90>)
 80074e0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	4a16      	ldr	r2, [pc, #88]	; (8007540 <TIM_ResetCallback+0x94>)
 80074e8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	4a15      	ldr	r2, [pc, #84]	; (8007544 <TIM_ResetCallback+0x98>)
 80074f0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	4a14      	ldr	r2, [pc, #80]	; (8007548 <TIM_ResetCallback+0x9c>)
 80074f8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	4a13      	ldr	r2, [pc, #76]	; (800754c <TIM_ResetCallback+0xa0>)
 8007500:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	4a12      	ldr	r2, [pc, #72]	; (8007550 <TIM_ResetCallback+0xa4>)
 8007508:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	4a11      	ldr	r2, [pc, #68]	; (8007554 <TIM_ResetCallback+0xa8>)
 8007510:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	4a10      	ldr	r2, [pc, #64]	; (8007558 <TIM_ResetCallback+0xac>)
 8007518:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800751c:	bf00      	nop
 800751e:	370c      	adds	r7, #12
 8007520:	46bd      	mov	sp, r7
 8007522:	bc80      	pop	{r7}
 8007524:	4770      	bx	lr
 8007526:	bf00      	nop
 8007528:	080015e9 	.word	0x080015e9
 800752c:	08006cc9 	.word	0x08006cc9
 8007530:	08006d23 	.word	0x08006d23
 8007534:	08006d35 	.word	0x08006d35
 8007538:	080015a1 	.word	0x080015a1
 800753c:	08006ced 	.word	0x08006ced
 8007540:	08006cdb 	.word	0x08006cdb
 8007544:	08006cff 	.word	0x08006cff
 8007548:	08006d11 	.word	0x08006d11
 800754c:	08006d47 	.word	0x08006d47
 8007550:	08007895 	.word	0x08007895
 8007554:	080078a7 	.word	0x080078a7
 8007558:	080078b9 	.word	0x080078b9

0800755c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b084      	sub	sp, #16
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
 8007564:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4a5c      	ldr	r2, [pc, #368]	; (80076dc <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d027      	beq.n	80075c0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4a5a      	ldr	r2, [pc, #360]	; (80076e0 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d022      	beq.n	80075c0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007582:	d01d      	beq.n	80075c0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a56      	ldr	r2, [pc, #344]	; (80076e4 <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d018      	beq.n	80075c0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a55      	ldr	r2, [pc, #340]	; (80076e8 <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d013      	beq.n	80075c0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a53      	ldr	r2, [pc, #332]	; (80076ec <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d00e      	beq.n	80075c0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a52      	ldr	r2, [pc, #328]	; (80076f0 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d009      	beq.n	80075c0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a50      	ldr	r2, [pc, #320]	; (80076f4 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d004      	beq.n	80075c0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80075b6:	f240 7186 	movw	r1, #1926	; 0x786
 80075ba:	484f      	ldr	r0, [pc, #316]	; (80076f8 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 80075bc:	f7fa f84a 	bl	8001654 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d020      	beq.n	800760a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	2b10      	cmp	r3, #16
 80075ce:	d01c      	beq.n	800760a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	2b20      	cmp	r3, #32
 80075d6:	d018      	beq.n	800760a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	2b30      	cmp	r3, #48	; 0x30
 80075de:	d014      	beq.n	800760a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	2b40      	cmp	r3, #64	; 0x40
 80075e6:	d010      	beq.n	800760a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	2b50      	cmp	r3, #80	; 0x50
 80075ee:	d00c      	beq.n	800760a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	2b60      	cmp	r3, #96	; 0x60
 80075f6:	d008      	beq.n	800760a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	2b70      	cmp	r3, #112	; 0x70
 80075fe:	d004      	beq.n	800760a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007600:	f240 7187 	movw	r1, #1927	; 0x787
 8007604:	483c      	ldr	r0, [pc, #240]	; (80076f8 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 8007606:	f7fa f825 	bl	8001654 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	2b80      	cmp	r3, #128	; 0x80
 8007610:	d008      	beq.n	8007624 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	685b      	ldr	r3, [r3, #4]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d004      	beq.n	8007624 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800761a:	f44f 61f1 	mov.w	r1, #1928	; 0x788
 800761e:	4836      	ldr	r0, [pc, #216]	; (80076f8 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 8007620:	f7fa f818 	bl	8001654 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800762a:	2b01      	cmp	r3, #1
 800762c:	d101      	bne.n	8007632 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800762e:	2302      	movs	r3, #2
 8007630:	e050      	b.n	80076d4 <HAL_TIMEx_MasterConfigSynchronization+0x178>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2201      	movs	r2, #1
 8007636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2202      	movs	r2, #2
 800763e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	689b      	ldr	r3, [r3, #8]
 8007650:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007658:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	68fa      	ldr	r2, [r7, #12]
 8007660:	4313      	orrs	r3, r2
 8007662:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	68fa      	ldr	r2, [r7, #12]
 800766a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a1a      	ldr	r2, [pc, #104]	; (80076dc <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d018      	beq.n	80076a8 <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4a19      	ldr	r2, [pc, #100]	; (80076e0 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d013      	beq.n	80076a8 <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007688:	d00e      	beq.n	80076a8 <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4a15      	ldr	r2, [pc, #84]	; (80076e4 <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d009      	beq.n	80076a8 <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a13      	ldr	r2, [pc, #76]	; (80076e8 <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d004      	beq.n	80076a8 <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4a12      	ldr	r2, [pc, #72]	; (80076ec <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d10c      	bne.n	80076c2 <HAL_TIMEx_MasterConfigSynchronization+0x166>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80076ae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	68ba      	ldr	r2, [r7, #8]
 80076b6:	4313      	orrs	r3, r2
 80076b8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	68ba      	ldr	r2, [r7, #8]
 80076c0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2201      	movs	r2, #1
 80076c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2200      	movs	r2, #0
 80076ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80076d2:	2300      	movs	r3, #0
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	3710      	adds	r7, #16
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}
 80076dc:	40012c00 	.word	0x40012c00
 80076e0:	40013400 	.word	0x40013400
 80076e4:	40000400 	.word	0x40000400
 80076e8:	40000800 	.word	0x40000800
 80076ec:	40000c00 	.word	0x40000c00
 80076f0:	40001000 	.word	0x40001000
 80076f4:	40001400 	.word	0x40001400
 80076f8:	0800b4b0 	.word	0x0800b4b0

080076fc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b084      	sub	sp, #16
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
 8007704:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007706:	2300      	movs	r3, #0
 8007708:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	4a5e      	ldr	r2, [pc, #376]	; (8007888 <HAL_TIMEx_ConfigBreakDeadTime+0x18c>)
 8007710:	4293      	cmp	r3, r2
 8007712:	d009      	beq.n	8007728 <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4a5c      	ldr	r2, [pc, #368]	; (800788c <HAL_TIMEx_ConfigBreakDeadTime+0x190>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d004      	beq.n	8007728 <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 800771e:	f240 71c3 	movw	r1, #1987	; 0x7c3
 8007722:	485b      	ldr	r0, [pc, #364]	; (8007890 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8007724:	f7f9 ff96 	bl	8001654 <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007730:	d008      	beq.n	8007744 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d004      	beq.n	8007744 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 800773a:	f240 71c4 	movw	r1, #1988	; 0x7c4
 800773e:	4854      	ldr	r0, [pc, #336]	; (8007890 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8007740:	f7f9 ff88 	bl	8001654 <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	685b      	ldr	r3, [r3, #4]
 8007748:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800774c:	d008      	beq.n	8007760 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d004      	beq.n	8007760 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 8007756:	f240 71c5 	movw	r1, #1989	; 0x7c5
 800775a:	484d      	ldr	r0, [pc, #308]	; (8007890 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800775c:	f7f9 ff7a 	bl	8001654 <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	689b      	ldr	r3, [r3, #8]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d013      	beq.n	8007790 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	689b      	ldr	r3, [r3, #8]
 800776c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007770:	d00e      	beq.n	8007790 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	689b      	ldr	r3, [r3, #8]
 8007776:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800777a:	d009      	beq.n	8007790 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	689b      	ldr	r3, [r3, #8]
 8007780:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007784:	d004      	beq.n	8007790 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 8007786:	f240 71c6 	movw	r1, #1990	; 0x7c6
 800778a:	4841      	ldr	r0, [pc, #260]	; (8007890 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800778c:	f7f9 ff62 	bl	8001654 <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	68db      	ldr	r3, [r3, #12]
 8007794:	2bff      	cmp	r3, #255	; 0xff
 8007796:	d904      	bls.n	80077a2 <HAL_TIMEx_ConfigBreakDeadTime+0xa6>
 8007798:	f240 71c7 	movw	r1, #1991	; 0x7c7
 800779c:	483c      	ldr	r0, [pc, #240]	; (8007890 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800779e:	f7f9 ff59 	bl	8001654 <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	691b      	ldr	r3, [r3, #16]
 80077a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077aa:	d008      	beq.n	80077be <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	691b      	ldr	r3, [r3, #16]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d004      	beq.n	80077be <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80077b4:	f44f 61f9 	mov.w	r1, #1992	; 0x7c8
 80077b8:	4835      	ldr	r0, [pc, #212]	; (8007890 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 80077ba:	f7f9 ff4b 	bl	8001654 <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	695b      	ldr	r3, [r3, #20]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d009      	beq.n	80077da <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	695b      	ldr	r3, [r3, #20]
 80077ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077ce:	d004      	beq.n	80077da <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80077d0:	f240 71c9 	movw	r1, #1993	; 0x7c9
 80077d4:	482e      	ldr	r0, [pc, #184]	; (8007890 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 80077d6:	f7f9 ff3d 	bl	8001654 <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	69db      	ldr	r3, [r3, #28]
 80077de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80077e2:	d008      	beq.n	80077f6 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	69db      	ldr	r3, [r3, #28]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d004      	beq.n	80077f6 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 80077ec:	f240 71ca 	movw	r1, #1994	; 0x7ca
 80077f0:	4827      	ldr	r0, [pc, #156]	; (8007890 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 80077f2:	f7f9 ff2f 	bl	8001654 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077fc:	2b01      	cmp	r3, #1
 80077fe:	d101      	bne.n	8007804 <HAL_TIMEx_ConfigBreakDeadTime+0x108>
 8007800:	2302      	movs	r3, #2
 8007802:	e03d      	b.n	8007880 <HAL_TIMEx_ConfigBreakDeadTime+0x184>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2201      	movs	r2, #1
 8007808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	68db      	ldr	r3, [r3, #12]
 8007816:	4313      	orrs	r3, r2
 8007818:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	689b      	ldr	r3, [r3, #8]
 8007824:	4313      	orrs	r3, r2
 8007826:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	4313      	orrs	r3, r2
 8007834:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4313      	orrs	r3, r2
 8007842:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	691b      	ldr	r3, [r3, #16]
 800784e:	4313      	orrs	r3, r2
 8007850:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	695b      	ldr	r3, [r3, #20]
 800785c:	4313      	orrs	r3, r2
 800785e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	69db      	ldr	r3, [r3, #28]
 800786a:	4313      	orrs	r3, r2
 800786c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	68fa      	ldr	r2, [r7, #12]
 8007874:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2200      	movs	r2, #0
 800787a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800787e:	2300      	movs	r3, #0
}
 8007880:	4618      	mov	r0, r3
 8007882:	3710      	adds	r7, #16
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}
 8007888:	40012c00 	.word	0x40012c00
 800788c:	40013400 	.word	0x40013400
 8007890:	0800b4b0 	.word	0x0800b4b0

08007894 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007894:	b480      	push	{r7}
 8007896:	b083      	sub	sp, #12
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800789c:	bf00      	nop
 800789e:	370c      	adds	r7, #12
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bc80      	pop	{r7}
 80078a4:	4770      	bx	lr

080078a6 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80078a6:	b480      	push	{r7}
 80078a8:	b083      	sub	sp, #12
 80078aa:	af00      	add	r7, sp, #0
 80078ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 80078ae:	bf00      	nop
 80078b0:	370c      	adds	r7, #12
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bc80      	pop	{r7}
 80078b6:	4770      	bx	lr

080078b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b083      	sub	sp, #12
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80078c0:	bf00      	nop
 80078c2:	370c      	adds	r7, #12
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bc80      	pop	{r7}
 80078c8:	4770      	bx	lr
	...

080078cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b082      	sub	sp, #8
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d101      	bne.n	80078de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80078da:	2301      	movs	r3, #1
 80078dc:	e0a7      	b.n	8007a2e <HAL_UART_Init+0x162>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	699b      	ldr	r3, [r3, #24]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d02c      	beq.n	8007940 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2 and USART3 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a53      	ldr	r2, [pc, #332]	; (8007a38 <HAL_UART_Init+0x16c>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d00e      	beq.n	800790e <HAL_UART_Init+0x42>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a51      	ldr	r2, [pc, #324]	; (8007a3c <HAL_UART_Init+0x170>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d009      	beq.n	800790e <HAL_UART_Init+0x42>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a50      	ldr	r2, [pc, #320]	; (8007a40 <HAL_UART_Init+0x174>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d004      	beq.n	800790e <HAL_UART_Init+0x42>
 8007904:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 8007908:	484e      	ldr	r0, [pc, #312]	; (8007a44 <HAL_UART_Init+0x178>)
 800790a:	f7f9 fea3 	bl	8001654 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	699b      	ldr	r3, [r3, #24]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d032      	beq.n	800797c <HAL_UART_Init+0xb0>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	699b      	ldr	r3, [r3, #24]
 800791a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800791e:	d02d      	beq.n	800797c <HAL_UART_Init+0xb0>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	699b      	ldr	r3, [r3, #24]
 8007924:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007928:	d028      	beq.n	800797c <HAL_UART_Init+0xb0>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	699b      	ldr	r3, [r3, #24]
 800792e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007932:	d023      	beq.n	800797c <HAL_UART_Init+0xb0>
 8007934:	f240 116d 	movw	r1, #365	; 0x16d
 8007938:	4842      	ldr	r0, [pc, #264]	; (8007a44 <HAL_UART_Init+0x178>)
 800793a:	f7f9 fe8b 	bl	8001654 <assert_failed>
 800793e:	e01d      	b.n	800797c <HAL_UART_Init+0xb0>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4a3c      	ldr	r2, [pc, #240]	; (8007a38 <HAL_UART_Init+0x16c>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d018      	beq.n	800797c <HAL_UART_Init+0xb0>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4a3b      	ldr	r2, [pc, #236]	; (8007a3c <HAL_UART_Init+0x170>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d013      	beq.n	800797c <HAL_UART_Init+0xb0>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4a39      	ldr	r2, [pc, #228]	; (8007a40 <HAL_UART_Init+0x174>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d00e      	beq.n	800797c <HAL_UART_Init+0xb0>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	4a39      	ldr	r2, [pc, #228]	; (8007a48 <HAL_UART_Init+0x17c>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d009      	beq.n	800797c <HAL_UART_Init+0xb0>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a37      	ldr	r2, [pc, #220]	; (8007a4c <HAL_UART_Init+0x180>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d004      	beq.n	800797c <HAL_UART_Init+0xb0>
 8007972:	f240 1171 	movw	r1, #369	; 0x171
 8007976:	4833      	ldr	r0, [pc, #204]	; (8007a44 <HAL_UART_Init+0x178>)
 8007978:	f7f9 fe6c 	bl	8001654 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	689b      	ldr	r3, [r3, #8]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d009      	beq.n	8007998 <HAL_UART_Init+0xcc>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	689b      	ldr	r3, [r3, #8]
 8007988:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800798c:	d004      	beq.n	8007998 <HAL_UART_Init+0xcc>
 800798e:	f240 1173 	movw	r1, #371	; 0x173
 8007992:	482c      	ldr	r0, [pc, #176]	; (8007a44 <HAL_UART_Init+0x178>)
 8007994:	f7f9 fe5e 	bl	8001654 <assert_failed>
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800799e:	b2db      	uxtb	r3, r3
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d111      	bne.n	80079c8 <HAL_UART_Init+0xfc>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2200      	movs	r2, #0
 80079a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f000 fb0d 	bl	8007fcc <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d102      	bne.n	80079c0 <HAL_UART_Init+0xf4>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	4a24      	ldr	r2, [pc, #144]	; (8007a50 <HAL_UART_Init+0x184>)
 80079be:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2224      	movs	r2, #36	; 0x24
 80079cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	68da      	ldr	r2, [r3, #12]
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80079de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f000 fd01 	bl	80083e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	691a      	ldr	r2, [r3, #16]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80079f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	695a      	ldr	r2, [r3, #20]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007a04:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	68da      	ldr	r2, [r3, #12]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007a14:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2220      	movs	r2, #32
 8007a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2220      	movs	r2, #32
 8007a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007a2c:	2300      	movs	r3, #0
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3708      	adds	r7, #8
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}
 8007a36:	bf00      	nop
 8007a38:	40013800 	.word	0x40013800
 8007a3c:	40004400 	.word	0x40004400
 8007a40:	40004800 	.word	0x40004800
 8007a44:	0800b4ec 	.word	0x0800b4ec
 8007a48:	40004c00 	.word	0x40004c00
 8007a4c:	40005000 	.word	0x40005000
 8007a50:	08001ae9 	.word	0x08001ae9

08007a54 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b08a      	sub	sp, #40	; 0x28
 8007a58:	af02      	add	r7, sp, #8
 8007a5a:	60f8      	str	r0, [r7, #12]
 8007a5c:	60b9      	str	r1, [r7, #8]
 8007a5e:	603b      	str	r3, [r7, #0]
 8007a60:	4613      	mov	r3, r2
 8007a62:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007a64:	2300      	movs	r3, #0
 8007a66:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a6e:	b2db      	uxtb	r3, r3
 8007a70:	2b20      	cmp	r3, #32
 8007a72:	d17c      	bne.n	8007b6e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d002      	beq.n	8007a80 <HAL_UART_Transmit+0x2c>
 8007a7a:	88fb      	ldrh	r3, [r7, #6]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d101      	bne.n	8007a84 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007a80:	2301      	movs	r3, #1
 8007a82:	e075      	b.n	8007b70 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a8a:	2b01      	cmp	r3, #1
 8007a8c:	d101      	bne.n	8007a92 <HAL_UART_Transmit+0x3e>
 8007a8e:	2302      	movs	r3, #2
 8007a90:	e06e      	b.n	8007b70 <HAL_UART_Transmit+0x11c>
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	2201      	movs	r2, #1
 8007a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	2221      	movs	r2, #33	; 0x21
 8007aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007aa8:	f7fa fa80 	bl	8001fac <HAL_GetTick>
 8007aac:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	88fa      	ldrh	r2, [r7, #6]
 8007ab2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	88fa      	ldrh	r2, [r7, #6]
 8007ab8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	689b      	ldr	r3, [r3, #8]
 8007abe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ac2:	d108      	bne.n	8007ad6 <HAL_UART_Transmit+0x82>
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	691b      	ldr	r3, [r3, #16]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d104      	bne.n	8007ad6 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007acc:	2300      	movs	r3, #0
 8007ace:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	61bb      	str	r3, [r7, #24]
 8007ad4:	e003      	b.n	8007ade <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007ada:	2300      	movs	r3, #0
 8007adc:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007ae6:	e02a      	b.n	8007b3e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	9300      	str	r3, [sp, #0]
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	2200      	movs	r2, #0
 8007af0:	2180      	movs	r1, #128	; 0x80
 8007af2:	68f8      	ldr	r0, [r7, #12]
 8007af4:	f000 faa0 	bl	8008038 <UART_WaitOnFlagUntilTimeout>
 8007af8:	4603      	mov	r3, r0
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d001      	beq.n	8007b02 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007afe:	2303      	movs	r3, #3
 8007b00:	e036      	b.n	8007b70 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007b02:	69fb      	ldr	r3, [r7, #28]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d10b      	bne.n	8007b20 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007b08:	69bb      	ldr	r3, [r7, #24]
 8007b0a:	881b      	ldrh	r3, [r3, #0]
 8007b0c:	461a      	mov	r2, r3
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b16:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007b18:	69bb      	ldr	r3, [r7, #24]
 8007b1a:	3302      	adds	r3, #2
 8007b1c:	61bb      	str	r3, [r7, #24]
 8007b1e:	e007      	b.n	8007b30 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007b20:	69fb      	ldr	r3, [r7, #28]
 8007b22:	781a      	ldrb	r2, [r3, #0]
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007b2a:	69fb      	ldr	r3, [r7, #28]
 8007b2c:	3301      	adds	r3, #1
 8007b2e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007b34:	b29b      	uxth	r3, r3
 8007b36:	3b01      	subs	r3, #1
 8007b38:	b29a      	uxth	r2, r3
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007b42:	b29b      	uxth	r3, r3
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d1cf      	bne.n	8007ae8 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	9300      	str	r3, [sp, #0]
 8007b4c:	697b      	ldr	r3, [r7, #20]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	2140      	movs	r1, #64	; 0x40
 8007b52:	68f8      	ldr	r0, [r7, #12]
 8007b54:	f000 fa70 	bl	8008038 <UART_WaitOnFlagUntilTimeout>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d001      	beq.n	8007b62 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007b5e:	2303      	movs	r3, #3
 8007b60:	e006      	b.n	8007b70 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	2220      	movs	r2, #32
 8007b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	e000      	b.n	8007b70 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007b6e:	2302      	movs	r3, #2
  }
}
 8007b70:	4618      	mov	r0, r3
 8007b72:	3720      	adds	r7, #32
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}

08007b78 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b084      	sub	sp, #16
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	60f8      	str	r0, [r7, #12]
 8007b80:	60b9      	str	r1, [r7, #8]
 8007b82:	4613      	mov	r3, r2
 8007b84:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007b8c:	b2db      	uxtb	r3, r3
 8007b8e:	2b20      	cmp	r3, #32
 8007b90:	d11d      	bne.n	8007bce <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d002      	beq.n	8007b9e <HAL_UART_Receive_IT+0x26>
 8007b98:	88fb      	ldrh	r3, [r7, #6]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d101      	bne.n	8007ba2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	e016      	b.n	8007bd0 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ba8:	2b01      	cmp	r3, #1
 8007baa:	d101      	bne.n	8007bb0 <HAL_UART_Receive_IT+0x38>
 8007bac:	2302      	movs	r3, #2
 8007bae:	e00f      	b.n	8007bd0 <HAL_UART_Receive_IT+0x58>
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8007bbe:	88fb      	ldrh	r3, [r7, #6]
 8007bc0:	461a      	mov	r2, r3
 8007bc2:	68b9      	ldr	r1, [r7, #8]
 8007bc4:	68f8      	ldr	r0, [r7, #12]
 8007bc6:	f000 fa81 	bl	80080cc <UART_Start_Receive_IT>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	e000      	b.n	8007bd0 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007bce:	2302      	movs	r3, #2
  }
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	3710      	adds	r7, #16
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bd80      	pop	{r7, pc}

08007bd8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b08a      	sub	sp, #40	; 0x28
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	68db      	ldr	r3, [r3, #12]
 8007bee:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	695b      	ldr	r3, [r3, #20]
 8007bf6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c02:	f003 030f 	and.w	r3, r3, #15
 8007c06:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8007c08:	69bb      	ldr	r3, [r7, #24]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d10d      	bne.n	8007c2a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c10:	f003 0320 	and.w	r3, r3, #32
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d008      	beq.n	8007c2a <HAL_UART_IRQHandler+0x52>
 8007c18:	6a3b      	ldr	r3, [r7, #32]
 8007c1a:	f003 0320 	and.w	r3, r3, #32
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d003      	beq.n	8007c2a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f000 fb34 	bl	8008290 <UART_Receive_IT>
      return;
 8007c28:	e180      	b.n	8007f2c <HAL_UART_IRQHandler+0x354>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007c2a:	69bb      	ldr	r3, [r7, #24]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	f000 80b4 	beq.w	8007d9a <HAL_UART_IRQHandler+0x1c2>
 8007c32:	69fb      	ldr	r3, [r7, #28]
 8007c34:	f003 0301 	and.w	r3, r3, #1
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d105      	bne.n	8007c48 <HAL_UART_IRQHandler+0x70>
 8007c3c:	6a3b      	ldr	r3, [r7, #32]
 8007c3e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	f000 80a9 	beq.w	8007d9a <HAL_UART_IRQHandler+0x1c2>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c4a:	f003 0301 	and.w	r3, r3, #1
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d00a      	beq.n	8007c68 <HAL_UART_IRQHandler+0x90>
 8007c52:	6a3b      	ldr	r3, [r7, #32]
 8007c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d005      	beq.n	8007c68 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c60:	f043 0201 	orr.w	r2, r3, #1
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c6a:	f003 0304 	and.w	r3, r3, #4
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d00a      	beq.n	8007c88 <HAL_UART_IRQHandler+0xb0>
 8007c72:	69fb      	ldr	r3, [r7, #28]
 8007c74:	f003 0301 	and.w	r3, r3, #1
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d005      	beq.n	8007c88 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c80:	f043 0202 	orr.w	r2, r3, #2
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c8a:	f003 0302 	and.w	r3, r3, #2
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d00a      	beq.n	8007ca8 <HAL_UART_IRQHandler+0xd0>
 8007c92:	69fb      	ldr	r3, [r7, #28]
 8007c94:	f003 0301 	and.w	r3, r3, #1
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d005      	beq.n	8007ca8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ca0:	f043 0204 	orr.w	r2, r3, #4
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007caa:	f003 0308 	and.w	r3, r3, #8
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d00f      	beq.n	8007cd2 <HAL_UART_IRQHandler+0xfa>
 8007cb2:	6a3b      	ldr	r3, [r7, #32]
 8007cb4:	f003 0320 	and.w	r3, r3, #32
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d104      	bne.n	8007cc6 <HAL_UART_IRQHandler+0xee>
 8007cbc:	69fb      	ldr	r3, [r7, #28]
 8007cbe:	f003 0301 	and.w	r3, r3, #1
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d005      	beq.n	8007cd2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cca:	f043 0208 	orr.w	r2, r3, #8
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	f000 8123 	beq.w	8007f22 <HAL_UART_IRQHandler+0x34a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cde:	f003 0320 	and.w	r3, r3, #32
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d007      	beq.n	8007cf6 <HAL_UART_IRQHandler+0x11e>
 8007ce6:	6a3b      	ldr	r3, [r7, #32]
 8007ce8:	f003 0320 	and.w	r3, r3, #32
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d002      	beq.n	8007cf6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f000 facd 	bl	8008290 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	695b      	ldr	r3, [r3, #20]
 8007cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	bf14      	ite	ne
 8007d04:	2301      	movne	r3, #1
 8007d06:	2300      	moveq	r3, #0
 8007d08:	b2db      	uxtb	r3, r3
 8007d0a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d10:	f003 0308 	and.w	r3, r3, #8
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d102      	bne.n	8007d1e <HAL_UART_IRQHandler+0x146>
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d033      	beq.n	8007d86 <HAL_UART_IRQHandler+0x1ae>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f000 fa0d 	bl	800813e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	695b      	ldr	r3, [r3, #20]
 8007d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d024      	beq.n	8007d7c <HAL_UART_IRQHandler+0x1a4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	695a      	ldr	r2, [r3, #20]
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d40:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d013      	beq.n	8007d72 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d4e:	4a79      	ldr	r2, [pc, #484]	; (8007f34 <HAL_UART_IRQHandler+0x35c>)
 8007d50:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d56:	4618      	mov	r0, r3
 8007d58:	f7fb f8e6 	bl	8002f28 <HAL_DMA_Abort_IT>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d019      	beq.n	8007d96 <HAL_UART_IRQHandler+0x1be>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d68:	687a      	ldr	r2, [r7, #4]
 8007d6a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007d6c:	4610      	mov	r0, r2
 8007d6e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d70:	e011      	b.n	8007d96 <HAL_UART_IRQHandler+0x1be>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d7a:	e00c      	b.n	8007d96 <HAL_UART_IRQHandler+0x1be>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d84:	e007      	b.n	8007d96 <HAL_UART_IRQHandler+0x1be>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2200      	movs	r2, #0
 8007d92:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007d94:	e0c5      	b.n	8007f22 <HAL_UART_IRQHandler+0x34a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d96:	bf00      	nop
    return;
 8007d98:	e0c3      	b.n	8007f22 <HAL_UART_IRQHandler+0x34a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d9e:	2b01      	cmp	r3, #1
 8007da0:	f040 80a3 	bne.w	8007eea <HAL_UART_IRQHandler+0x312>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8007da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da6:	f003 0310 	and.w	r3, r3, #16
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	f000 809d 	beq.w	8007eea <HAL_UART_IRQHandler+0x312>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8007db0:	6a3b      	ldr	r3, [r7, #32]
 8007db2:	f003 0310 	and.w	r3, r3, #16
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	f000 8097 	beq.w	8007eea <HAL_UART_IRQHandler+0x312>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	60fb      	str	r3, [r7, #12]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	60fb      	str	r3, [r7, #12]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	685b      	ldr	r3, [r3, #4]
 8007dce:	60fb      	str	r3, [r7, #12]
 8007dd0:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	695b      	ldr	r3, [r3, #20]
 8007dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d04f      	beq.n	8007e80 <HAL_UART_IRQHandler+0x2a8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	685b      	ldr	r3, [r3, #4]
 8007de8:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8007dea:	8a3b      	ldrh	r3, [r7, #16]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	f000 809a 	beq.w	8007f26 <HAL_UART_IRQHandler+0x34e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007df6:	8a3a      	ldrh	r2, [r7, #16]
 8007df8:	429a      	cmp	r2, r3
 8007dfa:	f080 8094 	bcs.w	8007f26 <HAL_UART_IRQHandler+0x34e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	8a3a      	ldrh	r2, [r7, #16]
 8007e02:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e08:	699b      	ldr	r3, [r3, #24]
 8007e0a:	2b20      	cmp	r3, #32
 8007e0c:	d02b      	beq.n	8007e66 <HAL_UART_IRQHandler+0x28e>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	68da      	ldr	r2, [r3, #12]
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007e1c:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	695a      	ldr	r2, [r3, #20]
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f022 0201 	bic.w	r2, r2, #1
 8007e2c:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	695a      	ldr	r2, [r3, #20]
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e3c:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2220      	movs	r2, #32
 8007e42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	68da      	ldr	r2, [r3, #12]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f022 0210 	bic.w	r2, r2, #16
 8007e5a:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e60:	4618      	mov	r0, r3
 8007e62:	f7fb f827 	bl	8002eb4 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e6a:	687a      	ldr	r2, [r7, #4]
 8007e6c:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8007e6e:	687a      	ldr	r2, [r7, #4]
 8007e70:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8007e72:	b292      	uxth	r2, r2
 8007e74:	1a8a      	subs	r2, r1, r2
 8007e76:	b292      	uxth	r2, r2
 8007e78:	4611      	mov	r1, r2
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif
      }
      return;
 8007e7e:	e052      	b.n	8007f26 <HAL_UART_IRQHandler+0x34e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007e88:	b29b      	uxth	r3, r3
 8007e8a:	1ad3      	subs	r3, r2, r3
 8007e8c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007e92:	b29b      	uxth	r3, r3
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d048      	beq.n	8007f2a <HAL_UART_IRQHandler+0x352>
          &&(nb_rx_data > 0U) )
 8007e98:	8a7b      	ldrh	r3, [r7, #18]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d045      	beq.n	8007f2a <HAL_UART_IRQHandler+0x352>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	68da      	ldr	r2, [r3, #12]
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007eac:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	695a      	ldr	r2, [r3, #20]
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f022 0201 	bic.w	r2, r2, #1
 8007ebc:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2220      	movs	r2, #32
 8007ec2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	68da      	ldr	r2, [r3, #12]
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f022 0210 	bic.w	r2, r2, #16
 8007eda:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ee0:	8a7a      	ldrh	r2, [r7, #18]
 8007ee2:	4611      	mov	r1, r2
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif
      }
      return;
 8007ee8:	e01f      	b.n	8007f2a <HAL_UART_IRQHandler+0x352>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d008      	beq.n	8007f06 <HAL_UART_IRQHandler+0x32e>
 8007ef4:	6a3b      	ldr	r3, [r7, #32]
 8007ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d003      	beq.n	8007f06 <HAL_UART_IRQHandler+0x32e>
  {
    UART_Transmit_IT(huart);
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f000 f95e 	bl	80081c0 <UART_Transmit_IT>
    return;
 8007f04:	e012      	b.n	8007f2c <HAL_UART_IRQHandler+0x354>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d00d      	beq.n	8007f2c <HAL_UART_IRQHandler+0x354>
 8007f10:	6a3b      	ldr	r3, [r7, #32]
 8007f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d008      	beq.n	8007f2c <HAL_UART_IRQHandler+0x354>
  {
    UART_EndTransmit_IT(huart);
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f000 f99f 	bl	800825e <UART_EndTransmit_IT>
    return;
 8007f20:	e004      	b.n	8007f2c <HAL_UART_IRQHandler+0x354>
    return;
 8007f22:	bf00      	nop
 8007f24:	e002      	b.n	8007f2c <HAL_UART_IRQHandler+0x354>
      return;
 8007f26:	bf00      	nop
 8007f28:	e000      	b.n	8007f2c <HAL_UART_IRQHandler+0x354>
      return;
 8007f2a:	bf00      	nop
  }
}
 8007f2c:	3728      	adds	r7, #40	; 0x28
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}
 8007f32:	bf00      	nop
 8007f34:	08008197 	.word	0x08008197

08007f38 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b083      	sub	sp, #12
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007f40:	bf00      	nop
 8007f42:	370c      	adds	r7, #12
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bc80      	pop	{r7}
 8007f48:	4770      	bx	lr

08007f4a <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007f4a:	b480      	push	{r7}
 8007f4c:	b083      	sub	sp, #12
 8007f4e:	af00      	add	r7, sp, #0
 8007f50:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007f52:	bf00      	nop
 8007f54:	370c      	adds	r7, #12
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bc80      	pop	{r7}
 8007f5a:	4770      	bx	lr

08007f5c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b083      	sub	sp, #12
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007f64:	bf00      	nop
 8007f66:	370c      	adds	r7, #12
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bc80      	pop	{r7}
 8007f6c:	4770      	bx	lr

08007f6e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007f6e:	b480      	push	{r7}
 8007f70:	b083      	sub	sp, #12
 8007f72:	af00      	add	r7, sp, #0
 8007f74:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007f76:	bf00      	nop
 8007f78:	370c      	adds	r7, #12
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bc80      	pop	{r7}
 8007f7e:	4770      	bx	lr

08007f80 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8007f80:	b480      	push	{r7}
 8007f82:	b083      	sub	sp, #12
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8007f88:	bf00      	nop
 8007f8a:	370c      	adds	r7, #12
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bc80      	pop	{r7}
 8007f90:	4770      	bx	lr

08007f92 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8007f92:	b480      	push	{r7}
 8007f94:	b083      	sub	sp, #12
 8007f96:	af00      	add	r7, sp, #0
 8007f98:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8007f9a:	bf00      	nop
 8007f9c:	370c      	adds	r7, #12
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bc80      	pop	{r7}
 8007fa2:	4770      	bx	lr

08007fa4 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b083      	sub	sp, #12
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8007fac:	bf00      	nop
 8007fae:	370c      	adds	r7, #12
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bc80      	pop	{r7}
 8007fb4:	4770      	bx	lr

08007fb6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007fb6:	b480      	push	{r7}
 8007fb8:	b083      	sub	sp, #12
 8007fba:	af00      	add	r7, sp, #0
 8007fbc:	6078      	str	r0, [r7, #4]
 8007fbe:	460b      	mov	r3, r1
 8007fc0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007fc2:	bf00      	nop
 8007fc4:	370c      	adds	r7, #12
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bc80      	pop	{r7}
 8007fca:	4770      	bx	lr

08007fcc <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8007fcc:	b480      	push	{r7}
 8007fce:	b083      	sub	sp, #12
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	4a0f      	ldr	r2, [pc, #60]	; (8008014 <UART_InitCallbacksToDefault+0x48>)
 8007fd8:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	4a0e      	ldr	r2, [pc, #56]	; (8008018 <UART_InitCallbacksToDefault+0x4c>)
 8007fde:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	4a0e      	ldr	r2, [pc, #56]	; (800801c <UART_InitCallbacksToDefault+0x50>)
 8007fe4:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	4a0d      	ldr	r2, [pc, #52]	; (8008020 <UART_InitCallbacksToDefault+0x54>)
 8007fea:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	4a0d      	ldr	r2, [pc, #52]	; (8008024 <UART_InitCallbacksToDefault+0x58>)
 8007ff0:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	4a0c      	ldr	r2, [pc, #48]	; (8008028 <UART_InitCallbacksToDefault+0x5c>)
 8007ff6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	4a0c      	ldr	r2, [pc, #48]	; (800802c <UART_InitCallbacksToDefault+0x60>)
 8007ffc:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	4a0b      	ldr	r2, [pc, #44]	; (8008030 <UART_InitCallbacksToDefault+0x64>)
 8008002:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	4a0b      	ldr	r2, [pc, #44]	; (8008034 <UART_InitCallbacksToDefault+0x68>)
 8008008:	669a      	str	r2, [r3, #104]	; 0x68

}
 800800a:	bf00      	nop
 800800c:	370c      	adds	r7, #12
 800800e:	46bd      	mov	sp, r7
 8008010:	bc80      	pop	{r7}
 8008012:	4770      	bx	lr
 8008014:	08007f4b 	.word	0x08007f4b
 8008018:	08007f39 	.word	0x08007f39
 800801c:	08007f5d 	.word	0x08007f5d
 8008020:	08001609 	.word	0x08001609
 8008024:	08007f6f 	.word	0x08007f6f
 8008028:	08007f81 	.word	0x08007f81
 800802c:	08007f93 	.word	0x08007f93
 8008030:	08007fa5 	.word	0x08007fa5
 8008034:	08007fb7 	.word	0x08007fb7

08008038 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b084      	sub	sp, #16
 800803c:	af00      	add	r7, sp, #0
 800803e:	60f8      	str	r0, [r7, #12]
 8008040:	60b9      	str	r1, [r7, #8]
 8008042:	603b      	str	r3, [r7, #0]
 8008044:	4613      	mov	r3, r2
 8008046:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008048:	e02c      	b.n	80080a4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800804a:	69bb      	ldr	r3, [r7, #24]
 800804c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008050:	d028      	beq.n	80080a4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008052:	69bb      	ldr	r3, [r7, #24]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d007      	beq.n	8008068 <UART_WaitOnFlagUntilTimeout+0x30>
 8008058:	f7f9 ffa8 	bl	8001fac <HAL_GetTick>
 800805c:	4602      	mov	r2, r0
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	1ad3      	subs	r3, r2, r3
 8008062:	69ba      	ldr	r2, [r7, #24]
 8008064:	429a      	cmp	r2, r3
 8008066:	d21d      	bcs.n	80080a4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	68da      	ldr	r2, [r3, #12]
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008076:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	695a      	ldr	r2, [r3, #20]
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f022 0201 	bic.w	r2, r2, #1
 8008086:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	2220      	movs	r2, #32
 800808c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	2220      	movs	r2, #32
 8008094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	2200      	movs	r2, #0
 800809c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80080a0:	2303      	movs	r3, #3
 80080a2:	e00f      	b.n	80080c4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	681a      	ldr	r2, [r3, #0]
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	4013      	ands	r3, r2
 80080ae:	68ba      	ldr	r2, [r7, #8]
 80080b0:	429a      	cmp	r2, r3
 80080b2:	bf0c      	ite	eq
 80080b4:	2301      	moveq	r3, #1
 80080b6:	2300      	movne	r3, #0
 80080b8:	b2db      	uxtb	r3, r3
 80080ba:	461a      	mov	r2, r3
 80080bc:	79fb      	ldrb	r3, [r7, #7]
 80080be:	429a      	cmp	r2, r3
 80080c0:	d0c3      	beq.n	800804a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80080c2:	2300      	movs	r3, #0
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	3710      	adds	r7, #16
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}

080080cc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80080cc:	b480      	push	{r7}
 80080ce:	b085      	sub	sp, #20
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	60f8      	str	r0, [r7, #12]
 80080d4:	60b9      	str	r1, [r7, #8]
 80080d6:	4613      	mov	r3, r2
 80080d8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	68ba      	ldr	r2, [r7, #8]
 80080de:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	88fa      	ldrh	r2, [r7, #6]
 80080e4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	88fa      	ldrh	r2, [r7, #6]
 80080ea:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	2200      	movs	r2, #0
 80080f0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	2222      	movs	r2, #34	; 0x22
 80080f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	2200      	movs	r2, #0
 80080fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	68da      	ldr	r2, [r3, #12]
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008110:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	695a      	ldr	r2, [r3, #20]
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f042 0201 	orr.w	r2, r2, #1
 8008120:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	68da      	ldr	r2, [r3, #12]
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f042 0220 	orr.w	r2, r2, #32
 8008130:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008132:	2300      	movs	r3, #0
}
 8008134:	4618      	mov	r0, r3
 8008136:	3714      	adds	r7, #20
 8008138:	46bd      	mov	sp, r7
 800813a:	bc80      	pop	{r7}
 800813c:	4770      	bx	lr

0800813e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800813e:	b480      	push	{r7}
 8008140:	b083      	sub	sp, #12
 8008142:	af00      	add	r7, sp, #0
 8008144:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	68da      	ldr	r2, [r3, #12]
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008154:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	695a      	ldr	r2, [r3, #20]
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f022 0201 	bic.w	r2, r2, #1
 8008164:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800816a:	2b01      	cmp	r3, #1
 800816c:	d107      	bne.n	800817e <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	68da      	ldr	r2, [r3, #12]
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f022 0210 	bic.w	r2, r2, #16
 800817c:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2220      	movs	r2, #32
 8008182:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2200      	movs	r2, #0
 800818a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800818c:	bf00      	nop
 800818e:	370c      	adds	r7, #12
 8008190:	46bd      	mov	sp, r7
 8008192:	bc80      	pop	{r7}
 8008194:	4770      	bx	lr

08008196 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008196:	b580      	push	{r7, lr}
 8008198:	b084      	sub	sp, #16
 800819a:	af00      	add	r7, sp, #0
 800819c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	2200      	movs	r2, #0
 80081a8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	2200      	movs	r2, #0
 80081ae:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081b4:	68f8      	ldr	r0, [r7, #12]
 80081b6:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80081b8:	bf00      	nop
 80081ba:	3710      	adds	r7, #16
 80081bc:	46bd      	mov	sp, r7
 80081be:	bd80      	pop	{r7, pc}

080081c0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80081c0:	b480      	push	{r7}
 80081c2:	b085      	sub	sp, #20
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081ce:	b2db      	uxtb	r3, r3
 80081d0:	2b21      	cmp	r3, #33	; 0x21
 80081d2:	d13e      	bne.n	8008252 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	689b      	ldr	r3, [r3, #8]
 80081d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081dc:	d114      	bne.n	8008208 <UART_Transmit_IT+0x48>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	691b      	ldr	r3, [r3, #16]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d110      	bne.n	8008208 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6a1b      	ldr	r3, [r3, #32]
 80081ea:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	881b      	ldrh	r3, [r3, #0]
 80081f0:	461a      	mov	r2, r3
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80081fa:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6a1b      	ldr	r3, [r3, #32]
 8008200:	1c9a      	adds	r2, r3, #2
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	621a      	str	r2, [r3, #32]
 8008206:	e008      	b.n	800821a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6a1b      	ldr	r3, [r3, #32]
 800820c:	1c59      	adds	r1, r3, #1
 800820e:	687a      	ldr	r2, [r7, #4]
 8008210:	6211      	str	r1, [r2, #32]
 8008212:	781a      	ldrb	r2, [r3, #0]
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800821e:	b29b      	uxth	r3, r3
 8008220:	3b01      	subs	r3, #1
 8008222:	b29b      	uxth	r3, r3
 8008224:	687a      	ldr	r2, [r7, #4]
 8008226:	4619      	mov	r1, r3
 8008228:	84d1      	strh	r1, [r2, #38]	; 0x26
 800822a:	2b00      	cmp	r3, #0
 800822c:	d10f      	bne.n	800824e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	68da      	ldr	r2, [r3, #12]
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800823c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	68da      	ldr	r2, [r3, #12]
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800824c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800824e:	2300      	movs	r3, #0
 8008250:	e000      	b.n	8008254 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008252:	2302      	movs	r3, #2
  }
}
 8008254:	4618      	mov	r0, r3
 8008256:	3714      	adds	r7, #20
 8008258:	46bd      	mov	sp, r7
 800825a:	bc80      	pop	{r7}
 800825c:	4770      	bx	lr

0800825e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800825e:	b580      	push	{r7, lr}
 8008260:	b082      	sub	sp, #8
 8008262:	af00      	add	r7, sp, #0
 8008264:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	68da      	ldr	r2, [r3, #12]
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008274:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2220      	movs	r2, #32
 800827a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008286:	2300      	movs	r3, #0
}
 8008288:	4618      	mov	r0, r3
 800828a:	3708      	adds	r7, #8
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}

08008290 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b086      	sub	sp, #24
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800829e:	b2db      	uxtb	r3, r3
 80082a0:	2b22      	cmp	r3, #34	; 0x22
 80082a2:	f040 809b 	bne.w	80083dc <UART_Receive_IT+0x14c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	689b      	ldr	r3, [r3, #8]
 80082aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082ae:	d117      	bne.n	80082e0 <UART_Receive_IT+0x50>
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	691b      	ldr	r3, [r3, #16]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d113      	bne.n	80082e0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80082b8:	2300      	movs	r3, #0
 80082ba:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082c0:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	685b      	ldr	r3, [r3, #4]
 80082c8:	b29b      	uxth	r3, r3
 80082ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082ce:	b29a      	uxth	r2, r3
 80082d0:	693b      	ldr	r3, [r7, #16]
 80082d2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082d8:	1c9a      	adds	r2, r3, #2
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	629a      	str	r2, [r3, #40]	; 0x28
 80082de:	e026      	b.n	800832e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082e4:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80082e6:	2300      	movs	r3, #0
 80082e8:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	689b      	ldr	r3, [r3, #8]
 80082ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082f2:	d007      	beq.n	8008304 <UART_Receive_IT+0x74>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	689b      	ldr	r3, [r3, #8]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d10a      	bne.n	8008312 <UART_Receive_IT+0x82>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	691b      	ldr	r3, [r3, #16]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d106      	bne.n	8008312 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	685b      	ldr	r3, [r3, #4]
 800830a:	b2da      	uxtb	r2, r3
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	701a      	strb	r2, [r3, #0]
 8008310:	e008      	b.n	8008324 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	685b      	ldr	r3, [r3, #4]
 8008318:	b2db      	uxtb	r3, r3
 800831a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800831e:	b2da      	uxtb	r2, r3
 8008320:	697b      	ldr	r3, [r7, #20]
 8008322:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008328:	1c5a      	adds	r2, r3, #1
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008332:	b29b      	uxth	r3, r3
 8008334:	3b01      	subs	r3, #1
 8008336:	b29b      	uxth	r3, r3
 8008338:	687a      	ldr	r2, [r7, #4]
 800833a:	4619      	mov	r1, r3
 800833c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800833e:	2b00      	cmp	r3, #0
 8008340:	d14a      	bne.n	80083d8 <UART_Receive_IT+0x148>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	68da      	ldr	r2, [r3, #12]
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f022 0220 	bic.w	r2, r2, #32
 8008350:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	68da      	ldr	r2, [r3, #12]
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008360:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	695a      	ldr	r2, [r3, #20]
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f022 0201 	bic.w	r2, r2, #1
 8008370:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2220      	movs	r2, #32
 8008376:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800837e:	2b01      	cmp	r3, #1
 8008380:	d124      	bne.n	80083cc <UART_Receive_IT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2200      	movs	r2, #0
 8008386:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	68da      	ldr	r2, [r3, #12]
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f022 0210 	bic.w	r2, r2, #16
 8008396:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f003 0310 	and.w	r3, r3, #16
 80083a2:	2b10      	cmp	r3, #16
 80083a4:	d10a      	bne.n	80083bc <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80083a6:	2300      	movs	r3, #0
 80083a8:	60fb      	str	r3, [r7, #12]
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	60fb      	str	r3, [r7, #12]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	685b      	ldr	r3, [r3, #4]
 80083b8:	60fb      	str	r3, [r7, #12]
 80083ba:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80083c0:	687a      	ldr	r2, [r7, #4]
 80083c2:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 80083c4:	4611      	mov	r1, r2
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	4798      	blx	r3
 80083ca:	e003      	b.n	80083d4 <UART_Receive_IT+0x144>
      else
      {
       /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	4798      	blx	r3
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80083d4:	2300      	movs	r3, #0
 80083d6:	e002      	b.n	80083de <UART_Receive_IT+0x14e>
    }
    return HAL_OK;
 80083d8:	2300      	movs	r3, #0
 80083da:	e000      	b.n	80083de <UART_Receive_IT+0x14e>
  }
  else
  {
    return HAL_BUSY;
 80083dc:	2302      	movs	r3, #2
  }
}
 80083de:	4618      	mov	r0, r3
 80083e0:	3718      	adds	r7, #24
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}
	...

080083e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b084      	sub	sp, #16
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	685b      	ldr	r3, [r3, #4]
 80083f4:	4a5f      	ldr	r2, [pc, #380]	; (8008574 <UART_SetConfig+0x18c>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d904      	bls.n	8008404 <UART_SetConfig+0x1c>
 80083fa:	f640 6153 	movw	r1, #3667	; 0xe53
 80083fe:	485e      	ldr	r0, [pc, #376]	; (8008578 <UART_SetConfig+0x190>)
 8008400:	f7f9 f928 	bl	8001654 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	68db      	ldr	r3, [r3, #12]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d009      	beq.n	8008420 <UART_SetConfig+0x38>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	68db      	ldr	r3, [r3, #12]
 8008410:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008414:	d004      	beq.n	8008420 <UART_SetConfig+0x38>
 8008416:	f640 6154 	movw	r1, #3668	; 0xe54
 800841a:	4857      	ldr	r0, [pc, #348]	; (8008578 <UART_SetConfig+0x190>)
 800841c:	f7f9 f91a 	bl	8001654 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	691b      	ldr	r3, [r3, #16]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d00e      	beq.n	8008446 <UART_SetConfig+0x5e>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	691b      	ldr	r3, [r3, #16]
 800842c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008430:	d009      	beq.n	8008446 <UART_SetConfig+0x5e>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	691b      	ldr	r3, [r3, #16]
 8008436:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800843a:	d004      	beq.n	8008446 <UART_SetConfig+0x5e>
 800843c:	f640 6155 	movw	r1, #3669	; 0xe55
 8008440:	484d      	ldr	r0, [pc, #308]	; (8008578 <UART_SetConfig+0x190>)
 8008442:	f7f9 f907 	bl	8001654 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	695a      	ldr	r2, [r3, #20]
 800844a:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 800844e:	4013      	ands	r3, r2
 8008450:	2b00      	cmp	r3, #0
 8008452:	d103      	bne.n	800845c <UART_SetConfig+0x74>
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	695b      	ldr	r3, [r3, #20]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d104      	bne.n	8008466 <UART_SetConfig+0x7e>
 800845c:	f640 6156 	movw	r1, #3670	; 0xe56
 8008460:	4845      	ldr	r0, [pc, #276]	; (8008578 <UART_SetConfig+0x190>)
 8008462:	f7f9 f8f7 	bl	8001654 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	691b      	ldr	r3, [r3, #16]
 800846c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	68da      	ldr	r2, [r3, #12]
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	430a      	orrs	r2, r1
 800847a:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	689a      	ldr	r2, [r3, #8]
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	691b      	ldr	r3, [r3, #16]
 8008484:	431a      	orrs	r2, r3
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	695b      	ldr	r3, [r3, #20]
 800848a:	4313      	orrs	r3, r2
 800848c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	68db      	ldr	r3, [r3, #12]
 8008494:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8008498:	f023 030c 	bic.w	r3, r3, #12
 800849c:	687a      	ldr	r2, [r7, #4]
 800849e:	6812      	ldr	r2, [r2, #0]
 80084a0:	68b9      	ldr	r1, [r7, #8]
 80084a2:	430b      	orrs	r3, r1
 80084a4:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	695b      	ldr	r3, [r3, #20]
 80084ac:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	699a      	ldr	r2, [r3, #24]
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	430a      	orrs	r2, r1
 80084ba:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4a2e      	ldr	r2, [pc, #184]	; (800857c <UART_SetConfig+0x194>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d103      	bne.n	80084ce <UART_SetConfig+0xe6>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80084c6:	f7fb feaf 	bl	8004228 <HAL_RCC_GetPCLK2Freq>
 80084ca:	60f8      	str	r0, [r7, #12]
 80084cc:	e002      	b.n	80084d4 <UART_SetConfig+0xec>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80084ce:	f7fb fe97 	bl	8004200 <HAL_RCC_GetPCLK1Freq>
 80084d2:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80084d4:	68fa      	ldr	r2, [r7, #12]
 80084d6:	4613      	mov	r3, r2
 80084d8:	009b      	lsls	r3, r3, #2
 80084da:	4413      	add	r3, r2
 80084dc:	009a      	lsls	r2, r3, #2
 80084de:	441a      	add	r2, r3
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	685b      	ldr	r3, [r3, #4]
 80084e4:	009b      	lsls	r3, r3, #2
 80084e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80084ea:	4a25      	ldr	r2, [pc, #148]	; (8008580 <UART_SetConfig+0x198>)
 80084ec:	fba2 2303 	umull	r2, r3, r2, r3
 80084f0:	095b      	lsrs	r3, r3, #5
 80084f2:	0119      	lsls	r1, r3, #4
 80084f4:	68fa      	ldr	r2, [r7, #12]
 80084f6:	4613      	mov	r3, r2
 80084f8:	009b      	lsls	r3, r3, #2
 80084fa:	4413      	add	r3, r2
 80084fc:	009a      	lsls	r2, r3, #2
 80084fe:	441a      	add	r2, r3
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	685b      	ldr	r3, [r3, #4]
 8008504:	009b      	lsls	r3, r3, #2
 8008506:	fbb2 f2f3 	udiv	r2, r2, r3
 800850a:	4b1d      	ldr	r3, [pc, #116]	; (8008580 <UART_SetConfig+0x198>)
 800850c:	fba3 0302 	umull	r0, r3, r3, r2
 8008510:	095b      	lsrs	r3, r3, #5
 8008512:	2064      	movs	r0, #100	; 0x64
 8008514:	fb00 f303 	mul.w	r3, r0, r3
 8008518:	1ad3      	subs	r3, r2, r3
 800851a:	011b      	lsls	r3, r3, #4
 800851c:	3332      	adds	r3, #50	; 0x32
 800851e:	4a18      	ldr	r2, [pc, #96]	; (8008580 <UART_SetConfig+0x198>)
 8008520:	fba2 2303 	umull	r2, r3, r2, r3
 8008524:	095b      	lsrs	r3, r3, #5
 8008526:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800852a:	4419      	add	r1, r3
 800852c:	68fa      	ldr	r2, [r7, #12]
 800852e:	4613      	mov	r3, r2
 8008530:	009b      	lsls	r3, r3, #2
 8008532:	4413      	add	r3, r2
 8008534:	009a      	lsls	r2, r3, #2
 8008536:	441a      	add	r2, r3
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	685b      	ldr	r3, [r3, #4]
 800853c:	009b      	lsls	r3, r3, #2
 800853e:	fbb2 f2f3 	udiv	r2, r2, r3
 8008542:	4b0f      	ldr	r3, [pc, #60]	; (8008580 <UART_SetConfig+0x198>)
 8008544:	fba3 0302 	umull	r0, r3, r3, r2
 8008548:	095b      	lsrs	r3, r3, #5
 800854a:	2064      	movs	r0, #100	; 0x64
 800854c:	fb00 f303 	mul.w	r3, r0, r3
 8008550:	1ad3      	subs	r3, r2, r3
 8008552:	011b      	lsls	r3, r3, #4
 8008554:	3332      	adds	r3, #50	; 0x32
 8008556:	4a0a      	ldr	r2, [pc, #40]	; (8008580 <UART_SetConfig+0x198>)
 8008558:	fba2 2303 	umull	r2, r3, r2, r3
 800855c:	095b      	lsrs	r3, r3, #5
 800855e:	f003 020f 	and.w	r2, r3, #15
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	440a      	add	r2, r1
 8008568:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800856a:	bf00      	nop
 800856c:	3710      	adds	r7, #16
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}
 8008572:	bf00      	nop
 8008574:	0044aa20 	.word	0x0044aa20
 8008578:	0800b4ec 	.word	0x0800b4ec
 800857c:	40013800 	.word	0x40013800
 8008580:	51eb851f 	.word	0x51eb851f

08008584 <BAT_init>:
static ADC_HandleTypeDef *g_BAT_adcHandle;
static RTC_HandleTypeDef *g_BAT_rtcHandle;
static RTC_TimeTypeDef    g_BAT_lastReadTime;

void BAT_init(ADC_HandleTypeDef *p_adcHandle, RTC_HandleTypeDef *p_rtcHandle)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b084      	sub	sp, #16
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
 800858c:	6039      	str	r1, [r7, #0]
  RTC_TimeTypeDef l_time;
  RTC_DateTypeDef l_date;

  LOG_info("Initializing battery check");
 800858e:	4913      	ldr	r1, [pc, #76]	; (80085dc <BAT_init+0x58>)
 8008590:	2001      	movs	r0, #1
 8008592:	f001 f9d7 	bl	8009944 <LOG_log>

  g_BAT_adcHandle = p_adcHandle;
 8008596:	4a12      	ldr	r2, [pc, #72]	; (80085e0 <BAT_init+0x5c>)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6013      	str	r3, [r2, #0]
  g_BAT_rtcHandle = p_rtcHandle;
 800859c:	4a11      	ldr	r2, [pc, #68]	; (80085e4 <BAT_init+0x60>)
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	6013      	str	r3, [r2, #0]

  HAL_RTC_GetTime(g_BAT_rtcHandle, &l_time, RTC_FORMAT_BCD);
 80085a2:	4b10      	ldr	r3, [pc, #64]	; (80085e4 <BAT_init+0x60>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f107 010c 	add.w	r1, r7, #12
 80085aa:	2201      	movs	r2, #1
 80085ac:	4618      	mov	r0, r3
 80085ae:	f7fc fa39 	bl	8004a24 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(g_BAT_rtcHandle, &l_date, RTC_FORMAT_BCD);
 80085b2:	4b0c      	ldr	r3, [pc, #48]	; (80085e4 <BAT_init+0x60>)
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f107 0108 	add.w	r1, r7, #8
 80085ba:	2201      	movs	r2, #1
 80085bc:	4618      	mov	r0, r3
 80085be:	f7fc fc35 	bl	8004e2c <HAL_RTC_GetDate>

  g_BAT_lastReadTime = l_time;
 80085c2:	4b09      	ldr	r3, [pc, #36]	; (80085e8 <BAT_init+0x64>)
 80085c4:	f107 020c 	add.w	r2, r7, #12
 80085c8:	6812      	ldr	r2, [r2, #0]
 80085ca:	4611      	mov	r1, r2
 80085cc:	8019      	strh	r1, [r3, #0]
 80085ce:	3302      	adds	r3, #2
 80085d0:	0c12      	lsrs	r2, r2, #16
 80085d2:	701a      	strb	r2, [r3, #0]

  return;
 80085d4:	bf00      	nop
}
 80085d6:	3710      	adds	r7, #16
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}
 80085dc:	0800b528 	.word	0x0800b528
 80085e0:	200000a8 	.word	0x200000a8
 80085e4:	200000ac 	.word	0x200000ac
 80085e8:	200000b0 	.word	0x200000b0

080085ec <BAT_update>:

void BAT_update(uint32_t *p_voltageInMv)
{
 80085ec:	b590      	push	{r4, r7, lr}
 80085ee:	b087      	sub	sp, #28
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
  RTC_TimeTypeDef l_time;
  RTC_DateTypeDef l_date;
  uint32_t        l_adcRawData;
  float           l_voltageInV;

  HAL_RTC_GetTime(g_BAT_rtcHandle, &l_time, RTC_FORMAT_BCD);
 80085f4:	4b32      	ldr	r3, [pc, #200]	; (80086c0 <BAT_update+0xd4>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f107 010c 	add.w	r1, r7, #12
 80085fc:	2201      	movs	r2, #1
 80085fe:	4618      	mov	r0, r3
 8008600:	f7fc fa10 	bl	8004a24 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(g_BAT_rtcHandle, &l_date, RTC_FORMAT_BCD);
 8008604:	4b2e      	ldr	r3, [pc, #184]	; (80086c0 <BAT_update+0xd4>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f107 0108 	add.w	r1, r7, #8
 800860c:	2201      	movs	r2, #1
 800860e:	4618      	mov	r0, r3
 8008610:	f7fc fc0c 	bl	8004e2c <HAL_RTC_GetDate>

  if (UTI_turnRtcTimeToSeconds(&l_time) - UTI_turnRtcTimeToSeconds(&g_BAT_lastReadTime) >= BAT_POLLING_PERIOD_IN_S)
 8008614:	f107 030c 	add.w	r3, r7, #12
 8008618:	4618      	mov	r0, r3
 800861a:	f001 fbe7 	bl	8009dec <UTI_turnRtcTimeToSeconds>
 800861e:	4604      	mov	r4, r0
 8008620:	4828      	ldr	r0, [pc, #160]	; (80086c4 <BAT_update+0xd8>)
 8008622:	f001 fbe3 	bl	8009dec <UTI_turnRtcTimeToSeconds>
 8008626:	4603      	mov	r3, r0
 8008628:	1ae3      	subs	r3, r4, r3
 800862a:	2b09      	cmp	r3, #9
 800862c:	d943      	bls.n	80086b6 <BAT_update+0xca>
  {
    g_BAT_lastReadTime = l_time;
 800862e:	4b25      	ldr	r3, [pc, #148]	; (80086c4 <BAT_update+0xd8>)
 8008630:	f107 020c 	add.w	r2, r7, #12
 8008634:	6812      	ldr	r2, [r2, #0]
 8008636:	4611      	mov	r1, r2
 8008638:	8019      	strh	r1, [r3, #0]
 800863a:	3302      	adds	r3, #2
 800863c:	0c12      	lsrs	r2, r2, #16
 800863e:	701a      	strb	r2, [r3, #0]

    HAL_ADC_Start                  (g_BAT_adcHandle);
 8008640:	4b21      	ldr	r3, [pc, #132]	; (80086c8 <BAT_update+0xdc>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	4618      	mov	r0, r3
 8008646:	f7f9 fe81 	bl	800234c <HAL_ADC_Start>
    HAL_ADC_PollForConversion      (g_BAT_adcHandle, HAL_MAX_DELAY);
 800864a:	4b1f      	ldr	r3, [pc, #124]	; (80086c8 <BAT_update+0xdc>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f04f 31ff 	mov.w	r1, #4294967295
 8008652:	4618      	mov	r0, r3
 8008654:	f7f9 ff40 	bl	80024d8 <HAL_ADC_PollForConversion>
    l_adcRawData = HAL_ADC_GetValue(g_BAT_adcHandle);
 8008658:	4b1b      	ldr	r3, [pc, #108]	; (80086c8 <BAT_update+0xdc>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	4618      	mov	r0, r3
 800865e:	f7fa f85d 	bl	800271c <HAL_ADC_GetValue>
 8008662:	6178      	str	r0, [r7, #20]

    /* Apply conversion based on STM32 reference voltage & resolution */
    l_voltageInV  = (l_adcRawData * 3.30f ) / 4096.0f;
 8008664:	6978      	ldr	r0, [r7, #20]
 8008666:	f7f7 fe93 	bl	8000390 <__aeabi_ui2f>
 800866a:	4603      	mov	r3, r0
 800866c:	4917      	ldr	r1, [pc, #92]	; (80086cc <BAT_update+0xe0>)
 800866e:	4618      	mov	r0, r3
 8008670:	f7f7 fee6 	bl	8000440 <__aeabi_fmul>
 8008674:	4603      	mov	r3, r0
 8008676:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 800867a:	4618      	mov	r0, r3
 800867c:	f7f7 ff94 	bl	80005a8 <__aeabi_fdiv>
 8008680:	4603      	mov	r3, r0
 8008682:	613b      	str	r3, [r7, #16]

    /* Consider voltage divider used between the battery & the ADC input */
    l_voltageInV *= 11.0f;
 8008684:	4912      	ldr	r1, [pc, #72]	; (80086d0 <BAT_update+0xe4>)
 8008686:	6938      	ldr	r0, [r7, #16]
 8008688:	f7f7 feda 	bl	8000440 <__aeabi_fmul>
 800868c:	4603      	mov	r3, r0
 800868e:	613b      	str	r3, [r7, #16]

    *p_voltageInMv = (uint32_t)(l_voltageInV * 1000.0f);
 8008690:	4910      	ldr	r1, [pc, #64]	; (80086d4 <BAT_update+0xe8>)
 8008692:	6938      	ldr	r0, [r7, #16]
 8008694:	f7f7 fed4 	bl	8000440 <__aeabi_fmul>
 8008698:	4603      	mov	r3, r0
 800869a:	4618      	mov	r0, r3
 800869c:	f7f8 f8bc 	bl	8000818 <__aeabi_f2uiz>
 80086a0:	4602      	mov	r2, r0
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	601a      	str	r2, [r3, #0]

    LOG_debug("Battery level: %u mV", *p_voltageInMv);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	461a      	mov	r2, r3
 80086ac:	490a      	ldr	r1, [pc, #40]	; (80086d8 <BAT_update+0xec>)
 80086ae:	2000      	movs	r0, #0
 80086b0:	f001 f948 	bl	8009944 <LOG_log>
  else
  {
    ; /* Nothing to do */
  }

  return;
 80086b4:	bf00      	nop
 80086b6:	bf00      	nop
}
 80086b8:	371c      	adds	r7, #28
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd90      	pop	{r4, r7, pc}
 80086be:	bf00      	nop
 80086c0:	200000ac 	.word	0x200000ac
 80086c4:	200000b0 	.word	0x200000b0
 80086c8:	200000a8 	.word	0x200000a8
 80086cc:	40533333 	.word	0x40533333
 80086d0:	41300000 	.word	0x41300000
 80086d4:	447a0000 	.word	0x447a0000
 80086d8:	0800b544 	.word	0x0800b544

080086dc <BLU_sendCommand>:
static void         BLU_readData     (uint8_t *p_buffer                                                );
static T_BLU_BUTTON BLU_getButton    (uint8_t *p_buffer                                                );
static int32_t      BLU_normalizeData(uint32_t p_rawData, uint32_t p_maxValue, bool p_isInversionNeeded);

static void BLU_sendCommand(uint8_t p_command)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b084      	sub	sp, #16
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	4603      	mov	r3, r0
 80086e4:	71fb      	strb	r3, [r7, #7]
  volatile uint16_t l_bitValue;

  for (l_bitValue = 0x01; l_bitValue < 0x0100; l_bitValue <<= 1)
 80086e6:	2301      	movs	r3, #1
 80086e8:	81fb      	strh	r3, [r7, #14]
 80086ea:	e030      	b.n	800874e <BLU_sendCommand+0x72>
  {
    if ((l_bitValue & p_command) != 0)
 80086ec:	89fb      	ldrh	r3, [r7, #14]
 80086ee:	b29b      	uxth	r3, r3
 80086f0:	461a      	mov	r2, r3
 80086f2:	79fb      	ldrb	r3, [r7, #7]
 80086f4:	4013      	ands	r3, r2
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d006      	beq.n	8008708 <BLU_sendCommand+0x2c>
    {
      SET_BIT(GPIOC->ODR, BLUETOOTH_SPI_CMD_Pin);
 80086fa:	4b1a      	ldr	r3, [pc, #104]	; (8008764 <BLU_sendCommand+0x88>)
 80086fc:	68db      	ldr	r3, [r3, #12]
 80086fe:	4a19      	ldr	r2, [pc, #100]	; (8008764 <BLU_sendCommand+0x88>)
 8008700:	f043 0302 	orr.w	r3, r3, #2
 8008704:	60d3      	str	r3, [r2, #12]
 8008706:	e005      	b.n	8008714 <BLU_sendCommand+0x38>
    }
    else
    {
      CLEAR_BIT(GPIOC->ODR, BLUETOOTH_SPI_CMD_Pin);
 8008708:	4b16      	ldr	r3, [pc, #88]	; (8008764 <BLU_sendCommand+0x88>)
 800870a:	68db      	ldr	r3, [r3, #12]
 800870c:	4a15      	ldr	r2, [pc, #84]	; (8008764 <BLU_sendCommand+0x88>)
 800870e:	f023 0302 	bic.w	r3, r3, #2
 8008712:	60d3      	str	r3, [r2, #12]
    }

    SET_BIT(GPIOA->ODR  , BLUETOOTH_SPI_CLK_Pin);
 8008714:	4b14      	ldr	r3, [pc, #80]	; (8008768 <BLU_sendCommand+0x8c>)
 8008716:	68db      	ldr	r3, [r3, #12]
 8008718:	4a13      	ldr	r2, [pc, #76]	; (8008768 <BLU_sendCommand+0x8c>)
 800871a:	f043 0310 	orr.w	r3, r3, #16
 800871e:	60d3      	str	r3, [r2, #12]
    UTI_delayUs(5);
 8008720:	2005      	movs	r0, #5
 8008722:	f001 fb49 	bl	8009db8 <UTI_delayUs>
    CLEAR_BIT(GPIOA->ODR, BLUETOOTH_SPI_CLK_Pin);
 8008726:	4b10      	ldr	r3, [pc, #64]	; (8008768 <BLU_sendCommand+0x8c>)
 8008728:	68db      	ldr	r3, [r3, #12]
 800872a:	4a0f      	ldr	r2, [pc, #60]	; (8008768 <BLU_sendCommand+0x8c>)
 800872c:	f023 0310 	bic.w	r3, r3, #16
 8008730:	60d3      	str	r3, [r2, #12]
    UTI_delayUs(5);
 8008732:	2005      	movs	r0, #5
 8008734:	f001 fb40 	bl	8009db8 <UTI_delayUs>
    SET_BIT(GPIOA->ODR  , BLUETOOTH_SPI_CLK_Pin);
 8008738:	4b0b      	ldr	r3, [pc, #44]	; (8008768 <BLU_sendCommand+0x8c>)
 800873a:	68db      	ldr	r3, [r3, #12]
 800873c:	4a0a      	ldr	r2, [pc, #40]	; (8008768 <BLU_sendCommand+0x8c>)
 800873e:	f043 0310 	orr.w	r3, r3, #16
 8008742:	60d3      	str	r3, [r2, #12]
  for (l_bitValue = 0x01; l_bitValue < 0x0100; l_bitValue <<= 1)
 8008744:	89fb      	ldrh	r3, [r7, #14]
 8008746:	b29b      	uxth	r3, r3
 8008748:	005b      	lsls	r3, r3, #1
 800874a:	b29b      	uxth	r3, r3
 800874c:	81fb      	strh	r3, [r7, #14]
 800874e:	89fb      	ldrh	r3, [r7, #14]
 8008750:	b29b      	uxth	r3, r3
 8008752:	2bff      	cmp	r3, #255	; 0xff
 8008754:	d9ca      	bls.n	80086ec <BLU_sendCommand+0x10>
  }
  UTI_delayUs(16);
 8008756:	2010      	movs	r0, #16
 8008758:	f001 fb2e 	bl	8009db8 <UTI_delayUs>

  return;
 800875c:	bf00      	nop
}
 800875e:	3710      	adds	r7, #16
 8008760:	46bd      	mov	sp, r7
 8008762:	bd80      	pop	{r7, pc}
 8008764:	40011000 	.word	0x40011000
 8008768:	40010800 	.word	0x40010800

0800876c <BLU_readData>:

static void BLU_readData(uint8_t *p_buffer)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b084      	sub	sp, #16
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
  volatile uint8_t  l_index;
  volatile uint16_t l_bitValue;

  /* Reset buffer */
  for (l_index = 0; l_index < BLU_DATA_BUFFER_LENGTH; l_index++)
 8008774:	2300      	movs	r3, #0
 8008776:	73fb      	strb	r3, [r7, #15]
 8008778:	e00b      	b.n	8008792 <BLU_readData+0x26>
  {
    p_buffer[l_index] = 0x00;
 800877a:	7bfb      	ldrb	r3, [r7, #15]
 800877c:	b2db      	uxtb	r3, r3
 800877e:	461a      	mov	r2, r3
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	4413      	add	r3, r2
 8008784:	2200      	movs	r2, #0
 8008786:	701a      	strb	r2, [r3, #0]
  for (l_index = 0; l_index < BLU_DATA_BUFFER_LENGTH; l_index++)
 8008788:	7bfb      	ldrb	r3, [r7, #15]
 800878a:	b2db      	uxtb	r3, r3
 800878c:	3301      	adds	r3, #1
 800878e:	b2db      	uxtb	r3, r3
 8008790:	73fb      	strb	r3, [r7, #15]
 8008792:	7bfb      	ldrb	r3, [r7, #15]
 8008794:	b2db      	uxtb	r3, r3
 8008796:	2b06      	cmp	r3, #6
 8008798:	d9ef      	bls.n	800877a <BLU_readData+0xe>
  }

  CLEAR_BIT(GPIOC->ODR, BLUETOOTH_SPI_CS_Pin);
 800879a:	4b2e      	ldr	r3, [pc, #184]	; (8008854 <BLU_readData+0xe8>)
 800879c:	68db      	ldr	r3, [r3, #12]
 800879e:	4a2d      	ldr	r2, [pc, #180]	; (8008854 <BLU_readData+0xe8>)
 80087a0:	f023 0308 	bic.w	r3, r3, #8
 80087a4:	60d3      	str	r3, [r2, #12]

  BLU_sendCommand(0x01);
 80087a6:	2001      	movs	r0, #1
 80087a8:	f7ff ff98 	bl	80086dc <BLU_sendCommand>
  BLU_sendCommand(0x42);
 80087ac:	2042      	movs	r0, #66	; 0x42
 80087ae:	f7ff ff95 	bl	80086dc <BLU_sendCommand>

  for (l_index = 0; l_index < BLU_DATA_BUFFER_LENGTH; l_index++)
 80087b2:	2300      	movs	r3, #0
 80087b4:	73fb      	strb	r3, [r7, #15]
 80087b6:	e03f      	b.n	8008838 <BLU_readData+0xcc>
  {
    for (l_bitValue = 0x01; l_bitValue < 0x100; l_bitValue <<= 1)
 80087b8:	2301      	movs	r3, #1
 80087ba:	81bb      	strh	r3, [r7, #12]
 80087bc:	e030      	b.n	8008820 <BLU_readData+0xb4>
    {
      SET_BIT(GPIOA->ODR  , BLUETOOTH_SPI_CLK_Pin);
 80087be:	4b26      	ldr	r3, [pc, #152]	; (8008858 <BLU_readData+0xec>)
 80087c0:	68db      	ldr	r3, [r3, #12]
 80087c2:	4a25      	ldr	r2, [pc, #148]	; (8008858 <BLU_readData+0xec>)
 80087c4:	f043 0310 	orr.w	r3, r3, #16
 80087c8:	60d3      	str	r3, [r2, #12]
      UTI_delayUs(5);
 80087ca:	2005      	movs	r0, #5
 80087cc:	f001 faf4 	bl	8009db8 <UTI_delayUs>
      CLEAR_BIT(GPIOA->ODR, BLUETOOTH_SPI_CLK_Pin);
 80087d0:	4b21      	ldr	r3, [pc, #132]	; (8008858 <BLU_readData+0xec>)
 80087d2:	68db      	ldr	r3, [r3, #12]
 80087d4:	4a20      	ldr	r2, [pc, #128]	; (8008858 <BLU_readData+0xec>)
 80087d6:	f023 0310 	bic.w	r3, r3, #16
 80087da:	60d3      	str	r3, [r2, #12]
      UTI_delayUs(5);
 80087dc:	2005      	movs	r0, #5
 80087de:	f001 faeb 	bl	8009db8 <UTI_delayUs>
      SET_BIT(GPIOA->ODR  , BLUETOOTH_SPI_CLK_Pin);
 80087e2:	4b1d      	ldr	r3, [pc, #116]	; (8008858 <BLU_readData+0xec>)
 80087e4:	68db      	ldr	r3, [r3, #12]
 80087e6:	4a1c      	ldr	r2, [pc, #112]	; (8008858 <BLU_readData+0xec>)
 80087e8:	f043 0310 	orr.w	r3, r3, #16
 80087ec:	60d3      	str	r3, [r2, #12]

      if (READ_BIT(GPIOC->IDR, BLUETOOTH_SPI_DAT_Pin) != GPIO_PIN_RESET)
 80087ee:	4b19      	ldr	r3, [pc, #100]	; (8008854 <BLU_readData+0xe8>)
 80087f0:	689b      	ldr	r3, [r3, #8]
 80087f2:	f003 0304 	and.w	r3, r3, #4
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d00d      	beq.n	8008816 <BLU_readData+0xaa>
      {
        p_buffer[l_index] |= l_bitValue;
 80087fa:	89bb      	ldrh	r3, [r7, #12]
 80087fc:	b29a      	uxth	r2, r3
 80087fe:	7bfb      	ldrb	r3, [r7, #15]
 8008800:	b2d8      	uxtb	r0, r3
 8008802:	4601      	mov	r1, r0
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	440b      	add	r3, r1
 8008808:	7819      	ldrb	r1, [r3, #0]
 800880a:	b2d2      	uxtb	r2, r2
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	4403      	add	r3, r0
 8008810:	430a      	orrs	r2, r1
 8008812:	b2d2      	uxtb	r2, r2
 8008814:	701a      	strb	r2, [r3, #0]
    for (l_bitValue = 0x01; l_bitValue < 0x100; l_bitValue <<= 1)
 8008816:	89bb      	ldrh	r3, [r7, #12]
 8008818:	b29b      	uxth	r3, r3
 800881a:	005b      	lsls	r3, r3, #1
 800881c:	b29b      	uxth	r3, r3
 800881e:	81bb      	strh	r3, [r7, #12]
 8008820:	89bb      	ldrh	r3, [r7, #12]
 8008822:	b29b      	uxth	r3, r3
 8008824:	2bff      	cmp	r3, #255	; 0xff
 8008826:	d9ca      	bls.n	80087be <BLU_readData+0x52>
      else
      {
        ; /* Nothing to do */
      }
    }
      UTI_delayUs(16);
 8008828:	2010      	movs	r0, #16
 800882a:	f001 fac5 	bl	8009db8 <UTI_delayUs>
  for (l_index = 0; l_index < BLU_DATA_BUFFER_LENGTH; l_index++)
 800882e:	7bfb      	ldrb	r3, [r7, #15]
 8008830:	b2db      	uxtb	r3, r3
 8008832:	3301      	adds	r3, #1
 8008834:	b2db      	uxtb	r3, r3
 8008836:	73fb      	strb	r3, [r7, #15]
 8008838:	7bfb      	ldrb	r3, [r7, #15]
 800883a:	b2db      	uxtb	r3, r3
 800883c:	2b06      	cmp	r3, #6
 800883e:	d9bb      	bls.n	80087b8 <BLU_readData+0x4c>
  }

  SET_BIT(GPIOC->ODR, BLUETOOTH_SPI_CS_Pin);
 8008840:	4b04      	ldr	r3, [pc, #16]	; (8008854 <BLU_readData+0xe8>)
 8008842:	68db      	ldr	r3, [r3, #12]
 8008844:	4a03      	ldr	r2, [pc, #12]	; (8008854 <BLU_readData+0xe8>)
 8008846:	f043 0308 	orr.w	r3, r3, #8
 800884a:	60d3      	str	r3, [r2, #12]

  return;
 800884c:	bf00      	nop
}
 800884e:	3710      	adds	r7, #16
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}
 8008854:	40011000 	.word	0x40011000
 8008858:	40010800 	.word	0x40010800

0800885c <BLU_getButton>:

static T_BLU_BUTTON BLU_getButton(uint8_t *p_buffer)
{
 800885c:	b480      	push	{r7}
 800885e:	b085      	sub	sp, #20
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
  uint16_t l_buttonRawValue;
  uint8_t  l_index;

  l_buttonRawValue = (p_buffer[BLU_BUTTON_HIGH_OFFSET] << 8) | p_buffer[BLU_BUTTON_LOW_OFFSET];
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	3302      	adds	r3, #2
 8008868:	781b      	ldrb	r3, [r3, #0]
 800886a:	021b      	lsls	r3, r3, #8
 800886c:	b21a      	sxth	r2, r3
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	3301      	adds	r3, #1
 8008872:	781b      	ldrb	r3, [r3, #0]
 8008874:	b21b      	sxth	r3, r3
 8008876:	4313      	orrs	r3, r2
 8008878:	b21b      	sxth	r3, r3
 800887a:	81bb      	strh	r3, [r7, #12]

  /* Ignore BLU_BUTTON_NONE value as it is not directly coded in raw data */
  for (l_index = BLU_BUTTON_SELECT; l_index < BLU_BUTTON_COUNT_VALUE; l_index++)
 800887c:	2301      	movs	r3, #1
 800887e:	73fb      	strb	r3, [r7, #15]
 8008880:	e00d      	b.n	800889e <BLU_getButton+0x42>
  {
    /* Stop decoding button data on 1st match (do not deal with multiple presses case) */
    if ((l_buttonRawValue & (1 << (l_index - 1))) == 0)
 8008882:	89ba      	ldrh	r2, [r7, #12]
 8008884:	7bfb      	ldrb	r3, [r7, #15]
 8008886:	3b01      	subs	r3, #1
 8008888:	fa42 f303 	asr.w	r3, r2, r3
 800888c:	f003 0301 	and.w	r3, r3, #1
 8008890:	2b00      	cmp	r3, #0
 8008892:	d101      	bne.n	8008898 <BLU_getButton+0x3c>
    {
      return l_index;
 8008894:	7bfb      	ldrb	r3, [r7, #15]
 8008896:	e006      	b.n	80088a6 <BLU_getButton+0x4a>
  for (l_index = BLU_BUTTON_SELECT; l_index < BLU_BUTTON_COUNT_VALUE; l_index++)
 8008898:	7bfb      	ldrb	r3, [r7, #15]
 800889a:	3301      	adds	r3, #1
 800889c:	73fb      	strb	r3, [r7, #15]
 800889e:	7bfb      	ldrb	r3, [r7, #15]
 80088a0:	2b10      	cmp	r3, #16
 80088a2:	d9ee      	bls.n	8008882 <BLU_getButton+0x26>
    {
      ; /* Nothing to do */
    }
  }

  return BLU_BUTTON_NONE;
 80088a4:	2300      	movs	r3, #0
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	3714      	adds	r7, #20
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bc80      	pop	{r7}
 80088ae:	4770      	bx	lr

080088b0 <BLU_normalizeData>:

static int32_t BLU_normalizeData(uint32_t p_rawData, uint32_t p_maxValue, bool p_isInversionNeeded)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b086      	sub	sp, #24
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	60f8      	str	r0, [r7, #12]
 80088b8:	60b9      	str	r1, [r7, #8]
 80088ba:	4613      	mov	r3, r2
 80088bc:	71fb      	strb	r3, [r7, #7]
  float l_normalizedData;

  l_normalizedData = p_rawData - 128.0f;
 80088be:	68f8      	ldr	r0, [r7, #12]
 80088c0:	f7f7 fd66 	bl	8000390 <__aeabi_ui2f>
 80088c4:	4603      	mov	r3, r0
 80088c6:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
 80088ca:	4618      	mov	r0, r3
 80088cc:	f7f7 fcae 	bl	800022c <__aeabi_fsub>
 80088d0:	4603      	mov	r3, r0
 80088d2:	617b      	str	r3, [r7, #20]

  if (l_normalizedData > 0.0f)
 80088d4:	f04f 0100 	mov.w	r1, #0
 80088d8:	6978      	ldr	r0, [r7, #20]
 80088da:	f7f7 ff6d 	bl	80007b8 <__aeabi_fcmpgt>
 80088de:	4603      	mov	r3, r0
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d00f      	beq.n	8008904 <BLU_normalizeData+0x54>
  {
    l_normalizedData *= (float)p_maxValue / 127.0f;
 80088e4:	68b8      	ldr	r0, [r7, #8]
 80088e6:	f7f7 fd53 	bl	8000390 <__aeabi_ui2f>
 80088ea:	4603      	mov	r3, r0
 80088ec:	4915      	ldr	r1, [pc, #84]	; (8008944 <BLU_normalizeData+0x94>)
 80088ee:	4618      	mov	r0, r3
 80088f0:	f7f7 fe5a 	bl	80005a8 <__aeabi_fdiv>
 80088f4:	4603      	mov	r3, r0
 80088f6:	4619      	mov	r1, r3
 80088f8:	6978      	ldr	r0, [r7, #20]
 80088fa:	f7f7 fda1 	bl	8000440 <__aeabi_fmul>
 80088fe:	4603      	mov	r3, r0
 8008900:	617b      	str	r3, [r7, #20]
 8008902:	e00f      	b.n	8008924 <BLU_normalizeData+0x74>
  }
  else
  {
    l_normalizedData *= (float)p_maxValue / 128.0f;
 8008904:	68b8      	ldr	r0, [r7, #8]
 8008906:	f7f7 fd43 	bl	8000390 <__aeabi_ui2f>
 800890a:	4603      	mov	r3, r0
 800890c:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
 8008910:	4618      	mov	r0, r3
 8008912:	f7f7 fe49 	bl	80005a8 <__aeabi_fdiv>
 8008916:	4603      	mov	r3, r0
 8008918:	4619      	mov	r1, r3
 800891a:	6978      	ldr	r0, [r7, #20]
 800891c:	f7f7 fd90 	bl	8000440 <__aeabi_fmul>
 8008920:	4603      	mov	r3, r0
 8008922:	617b      	str	r3, [r7, #20]
  }

  if (p_isInversionNeeded == true)
 8008924:	79fb      	ldrb	r3, [r7, #7]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d003      	beq.n	8008932 <BLU_normalizeData+0x82>
  {
    l_normalizedData *= -1.0f;
 800892a:	697b      	ldr	r3, [r7, #20]
 800892c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8008930:	617b      	str	r3, [r7, #20]
  else
  {
    ; /* Nothing to do */
  }

  return (int32_t)l_normalizedData;
 8008932:	6978      	ldr	r0, [r7, #20]
 8008934:	f7f7 ff4a 	bl	80007cc <__aeabi_f2iz>
 8008938:	4603      	mov	r3, r0
}
 800893a:	4618      	mov	r0, r3
 800893c:	3718      	adds	r7, #24
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}
 8008942:	bf00      	nop
 8008944:	42fe0000 	.word	0x42fe0000

08008948 <BLU_init>:

void BLU_init(uint32_t p_maxDataValue)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b082      	sub	sp, #8
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
  LOG_info("Initializing bluetooth control");
 8008950:	490c      	ldr	r1, [pc, #48]	; (8008984 <BLU_init+0x3c>)
 8008952:	2001      	movs	r0, #1
 8008954:	f000 fff6 	bl	8009944 <LOG_log>

  g_BLU_maxDataValue = p_maxDataValue;
 8008958:	4a0b      	ldr	r2, [pc, #44]	; (8008988 <BLU_init+0x40>)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6013      	str	r3, [r2, #0]

  g_BLU_lastData.leftX  = BLU_DATA_DEFAUT_DIRECTION;
 800895e:	4b0b      	ldr	r3, [pc, #44]	; (800898c <BLU_init+0x44>)
 8008960:	2280      	movs	r2, #128	; 0x80
 8008962:	601a      	str	r2, [r3, #0]
  g_BLU_lastData.leftY  = BLU_DATA_DEFAUT_DIRECTION;
 8008964:	4b09      	ldr	r3, [pc, #36]	; (800898c <BLU_init+0x44>)
 8008966:	2280      	movs	r2, #128	; 0x80
 8008968:	605a      	str	r2, [r3, #4]
  g_BLU_lastData.rightX = BLU_DATA_DEFAUT_DIRECTION;
 800896a:	4b08      	ldr	r3, [pc, #32]	; (800898c <BLU_init+0x44>)
 800896c:	2280      	movs	r2, #128	; 0x80
 800896e:	609a      	str	r2, [r3, #8]
  g_BLU_lastData.rightY = BLU_DATA_DEFAUT_DIRECTION;
 8008970:	4b06      	ldr	r3, [pc, #24]	; (800898c <BLU_init+0x44>)
 8008972:	2280      	movs	r2, #128	; 0x80
 8008974:	60da      	str	r2, [r3, #12]
  g_BLU_lastData.button = BLU_BUTTON_NONE;
 8008976:	4b05      	ldr	r3, [pc, #20]	; (800898c <BLU_init+0x44>)
 8008978:	2200      	movs	r2, #0
 800897a:	741a      	strb	r2, [r3, #16]

  return;
 800897c:	bf00      	nop
}
 800897e:	3708      	adds	r7, #8
 8008980:	46bd      	mov	sp, r7
 8008982:	bd80      	pop	{r7, pc}
 8008984:	0800b55c 	.word	0x0800b55c
 8008988:	200000b4 	.word	0x200000b4
 800898c:	200000b8 	.word	0x200000b8

08008990 <BLU_receiveData>:

void BLU_receiveData(T_BLU_Data *p_data)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b088      	sub	sp, #32
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
  T_BLU_BUTTON l_button;

  // LOG_info("Receiving Bluetooth data");

  /* Read raw data */
  BLU_readData(l_buffer);
 8008998:	f107 0308 	add.w	r3, r7, #8
 800899c:	4618      	mov	r0, r3
 800899e:	f7ff fee5 	bl	800876c <BLU_readData>

  /* Start and decode raw data */
  l_leftX  = l_buffer[BLU_LEFT_X_OFFSET ];
 80089a2:	7b7b      	ldrb	r3, [r7, #13]
 80089a4:	61fb      	str	r3, [r7, #28]
  l_leftY  = l_buffer[BLU_LEFT_Y_OFFSET ];
 80089a6:	7bbb      	ldrb	r3, [r7, #14]
 80089a8:	61bb      	str	r3, [r7, #24]
  l_rightX = l_buffer[BLU_RIGHT_X_OFFSET];
 80089aa:	7afb      	ldrb	r3, [r7, #11]
 80089ac:	617b      	str	r3, [r7, #20]
  l_rightY = l_buffer[BLU_RIGHT_Y_OFFSET];
 80089ae:	7b3b      	ldrb	r3, [r7, #12]
 80089b0:	613b      	str	r3, [r7, #16]
  l_button = BLU_getButton(l_buffer);
 80089b2:	f107 0308 	add.w	r3, r7, #8
 80089b6:	4618      	mov	r0, r3
 80089b8:	f7ff ff50 	bl	800885c <BLU_getButton>
 80089bc:	4603      	mov	r3, r0
 80089be:	73fb      	strb	r3, [r7, #15]

  /* Deal with startup condition, while read data is not valid yet */
  if  ((l_leftX == 255 && l_leftY == 255 && l_rightX == 255 && l_rightY ==255)
 80089c0:	69fb      	ldr	r3, [r7, #28]
 80089c2:	2bff      	cmp	r3, #255	; 0xff
 80089c4:	d108      	bne.n	80089d8 <BLU_receiveData+0x48>
 80089c6:	69bb      	ldr	r3, [r7, #24]
 80089c8:	2bff      	cmp	r3, #255	; 0xff
 80089ca:	d105      	bne.n	80089d8 <BLU_receiveData+0x48>
 80089cc:	697b      	ldr	r3, [r7, #20]
 80089ce:	2bff      	cmp	r3, #255	; 0xff
 80089d0:	d102      	bne.n	80089d8 <BLU_receiveData+0x48>
 80089d2:	693b      	ldr	r3, [r7, #16]
 80089d4:	2bff      	cmp	r3, #255	; 0xff
 80089d6:	d00b      	beq.n	80089f0 <BLU_receiveData+0x60>
    || (l_leftX ==   0 && l_leftY ==   0 && l_rightX ==   0 && l_rightY ==  0))
 80089d8:	69fb      	ldr	r3, [r7, #28]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d113      	bne.n	8008a06 <BLU_receiveData+0x76>
 80089de:	69bb      	ldr	r3, [r7, #24]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d110      	bne.n	8008a06 <BLU_receiveData+0x76>
 80089e4:	697b      	ldr	r3, [r7, #20]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d10d      	bne.n	8008a06 <BLU_receiveData+0x76>
 80089ea:	693b      	ldr	r3, [r7, #16]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d10a      	bne.n	8008a06 <BLU_receiveData+0x76>
  {
    l_leftX  = BLU_DATA_DEFAUT_DIRECTION;
 80089f0:	2380      	movs	r3, #128	; 0x80
 80089f2:	61fb      	str	r3, [r7, #28]
    l_leftY  = BLU_DATA_DEFAUT_DIRECTION;
 80089f4:	2380      	movs	r3, #128	; 0x80
 80089f6:	61bb      	str	r3, [r7, #24]
    l_rightX = BLU_DATA_DEFAUT_DIRECTION;
 80089f8:	2380      	movs	r3, #128	; 0x80
 80089fa:	617b      	str	r3, [r7, #20]
    l_rightY = BLU_DATA_DEFAUT_DIRECTION;
 80089fc:	2380      	movs	r3, #128	; 0x80
 80089fe:	613b      	str	r3, [r7, #16]
    l_button = BLU_BUTTON_NONE;
 8008a00:	2300      	movs	r3, #0
 8008a02:	73fb      	strb	r3, [r7, #15]
 8008a04:	e043      	b.n	8008a8e <BLU_receiveData+0xfe>
  }
  /* Use a confirmation mechanism, on 2 cycles, as glitches are observed */
  else if ((l_leftX  == g_BLU_lastData.leftX) &&
 8008a06:	4b2b      	ldr	r3, [pc, #172]	; (8008ab4 <BLU_receiveData+0x124>)
 8008a08:	681a      	ldr	r2, [r3, #0]
 8008a0a:	69fb      	ldr	r3, [r7, #28]
 8008a0c:	429a      	cmp	r2, r3
 8008a0e:	d13e      	bne.n	8008a8e <BLU_receiveData+0xfe>
           (l_leftY  == g_BLU_lastData.leftY) &&
 8008a10:	4b28      	ldr	r3, [pc, #160]	; (8008ab4 <BLU_receiveData+0x124>)
 8008a12:	685a      	ldr	r2, [r3, #4]
 8008a14:	69bb      	ldr	r3, [r7, #24]
  else if ((l_leftX  == g_BLU_lastData.leftX) &&
 8008a16:	429a      	cmp	r2, r3
 8008a18:	d139      	bne.n	8008a8e <BLU_receiveData+0xfe>
           (l_rightX == g_BLU_lastData.rightX) &&
 8008a1a:	4b26      	ldr	r3, [pc, #152]	; (8008ab4 <BLU_receiveData+0x124>)
 8008a1c:	689a      	ldr	r2, [r3, #8]
 8008a1e:	697b      	ldr	r3, [r7, #20]
           (l_leftY  == g_BLU_lastData.leftY) &&
 8008a20:	429a      	cmp	r2, r3
 8008a22:	d134      	bne.n	8008a8e <BLU_receiveData+0xfe>
           (l_rightY == g_BLU_lastData.rightY) &&
 8008a24:	4b23      	ldr	r3, [pc, #140]	; (8008ab4 <BLU_receiveData+0x124>)
 8008a26:	68da      	ldr	r2, [r3, #12]
 8008a28:	693b      	ldr	r3, [r7, #16]
           (l_rightX == g_BLU_lastData.rightX) &&
 8008a2a:	429a      	cmp	r2, r3
 8008a2c:	d12f      	bne.n	8008a8e <BLU_receiveData+0xfe>
           (l_button == g_BLU_lastData.button))
 8008a2e:	4b21      	ldr	r3, [pc, #132]	; (8008ab4 <BLU_receiveData+0x124>)
 8008a30:	7c1b      	ldrb	r3, [r3, #16]
           (l_rightY == g_BLU_lastData.rightY) &&
 8008a32:	7bfa      	ldrb	r2, [r7, #15]
 8008a34:	429a      	cmp	r2, r3
 8008a36:	d12a      	bne.n	8008a8e <BLU_receiveData+0xfe>
  {
    /* Normalize directions data in range [-100..100] */
    p_data->leftX  = BLU_normalizeData(l_leftX , g_BLU_maxDataValue, false);
 8008a38:	4b1f      	ldr	r3, [pc, #124]	; (8008ab8 <BLU_receiveData+0x128>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	4619      	mov	r1, r3
 8008a40:	69f8      	ldr	r0, [r7, #28]
 8008a42:	f7ff ff35 	bl	80088b0 <BLU_normalizeData>
 8008a46:	4602      	mov	r2, r0
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	601a      	str	r2, [r3, #0]
    p_data->leftY  = BLU_normalizeData(l_leftY , g_BLU_maxDataValue, true );
 8008a4c:	4b1a      	ldr	r3, [pc, #104]	; (8008ab8 <BLU_receiveData+0x128>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	2201      	movs	r2, #1
 8008a52:	4619      	mov	r1, r3
 8008a54:	69b8      	ldr	r0, [r7, #24]
 8008a56:	f7ff ff2b 	bl	80088b0 <BLU_normalizeData>
 8008a5a:	4602      	mov	r2, r0
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	605a      	str	r2, [r3, #4]
    p_data->rightX = BLU_normalizeData(l_rightX, g_BLU_maxDataValue, false);
 8008a60:	4b15      	ldr	r3, [pc, #84]	; (8008ab8 <BLU_receiveData+0x128>)
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	2200      	movs	r2, #0
 8008a66:	4619      	mov	r1, r3
 8008a68:	6978      	ldr	r0, [r7, #20]
 8008a6a:	f7ff ff21 	bl	80088b0 <BLU_normalizeData>
 8008a6e:	4602      	mov	r2, r0
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	609a      	str	r2, [r3, #8]
    p_data->rightY = BLU_normalizeData(l_rightY, g_BLU_maxDataValue, true );
 8008a74:	4b10      	ldr	r3, [pc, #64]	; (8008ab8 <BLU_receiveData+0x128>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	2201      	movs	r2, #1
 8008a7a:	4619      	mov	r1, r3
 8008a7c:	6938      	ldr	r0, [r7, #16]
 8008a7e:	f7ff ff17 	bl	80088b0 <BLU_normalizeData>
 8008a82:	4602      	mov	r2, r0
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	60da      	str	r2, [r3, #12]
    p_data->button = l_button;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	7bfa      	ldrb	r2, [r7, #15]
 8008a8c:	741a      	strb	r2, [r3, #16]
  {
    ; /* Nothing to do */
  }

  /* Saved received data for later use in confirmation mechanism */
  g_BLU_lastData.leftX  = l_leftX;
 8008a8e:	69fb      	ldr	r3, [r7, #28]
 8008a90:	4a08      	ldr	r2, [pc, #32]	; (8008ab4 <BLU_receiveData+0x124>)
 8008a92:	6013      	str	r3, [r2, #0]
  g_BLU_lastData.leftY  = l_leftY;
 8008a94:	69bb      	ldr	r3, [r7, #24]
 8008a96:	4a07      	ldr	r2, [pc, #28]	; (8008ab4 <BLU_receiveData+0x124>)
 8008a98:	6053      	str	r3, [r2, #4]
  g_BLU_lastData.rightX = l_rightX;
 8008a9a:	697b      	ldr	r3, [r7, #20]
 8008a9c:	4a05      	ldr	r2, [pc, #20]	; (8008ab4 <BLU_receiveData+0x124>)
 8008a9e:	6093      	str	r3, [r2, #8]
  g_BLU_lastData.rightY = l_rightY;
 8008aa0:	693b      	ldr	r3, [r7, #16]
 8008aa2:	4a04      	ldr	r2, [pc, #16]	; (8008ab4 <BLU_receiveData+0x124>)
 8008aa4:	60d3      	str	r3, [r2, #12]
  g_BLU_lastData.button = l_button;
 8008aa6:	4a03      	ldr	r2, [pc, #12]	; (8008ab4 <BLU_receiveData+0x124>)
 8008aa8:	7bfb      	ldrb	r3, [r7, #15]
 8008aaa:	7413      	strb	r3, [r2, #16]

  return;
 8008aac:	bf00      	nop
}
 8008aae:	3720      	adds	r7, #32
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd80      	pop	{r7, pc}
 8008ab4:	200000b8 	.word	0x200000b8
 8008ab8:	200000b4 	.word	0x200000b4

08008abc <CON_init>:

static UART_HandleTypeDef *g_CON_uartHandle;
static uint8_t             g_CON_rxBuffer[12] = {0};

void CON_init(UART_HandleTypeDef *p_uartHandle)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b082      	sub	sp, #8
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
  LOG_info("Initializing console");
 8008ac4:	4905      	ldr	r1, [pc, #20]	; (8008adc <CON_init+0x20>)
 8008ac6:	2001      	movs	r0, #1
 8008ac8:	f000 ff3c 	bl	8009944 <LOG_log>

  g_CON_uartHandle = p_uartHandle;
 8008acc:	4a04      	ldr	r2, [pc, #16]	; (8008ae0 <CON_init+0x24>)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6013      	str	r3, [r2, #0]

  return;
 8008ad2:	bf00      	nop
}
 8008ad4:	3708      	adds	r7, #8
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}
 8008ada:	bf00      	nop
 8008adc:	0800b57c 	.word	0x0800b57c
 8008ae0:	200000cc 	.word	0x200000cc

08008ae4 <CON_receiveData>:

void CON_receiveData(void)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	af00      	add	r7, sp, #0
  HAL_UART_Receive_IT(g_CON_uartHandle, g_CON_rxBuffer, 12);
 8008ae8:	4b04      	ldr	r3, [pc, #16]	; (8008afc <CON_receiveData+0x18>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	220c      	movs	r2, #12
 8008aee:	4904      	ldr	r1, [pc, #16]	; (8008b00 <CON_receiveData+0x1c>)
 8008af0:	4618      	mov	r0, r3
 8008af2:	f7ff f841 	bl	8007b78 <HAL_UART_Receive_IT>

  /* Resend received data (echo) */
//  HAL_UART_Transmit(CON_uartHandle, CON_rxBuffer, 12, 100);

  return;
 8008af6:	bf00      	nop
}
 8008af8:	bd80      	pop	{r7, pc}
 8008afa:	bf00      	nop
 8008afc:	200000cc 	.word	0x200000cc
 8008b00:	200000d0 	.word	0x200000d0

08008b04 <DRV_init>:
void DRV_init(TIM_HandleTypeDef *p_pwmTimerHandle,
              TIM_HandleTypeDef *p_rearLeftEncoderTimerHandle,
              TIM_HandleTypeDef *p_rearRightEncoderTimerHandle,
              TIM_HandleTypeDef *p_frontRightEncoderTimerHandle,
              TIM_HandleTypeDef *p_frontLeftEncoderTimerHandle)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b088      	sub	sp, #32
 8008b08:	af04      	add	r7, sp, #16
 8008b0a:	60f8      	str	r0, [r7, #12]
 8008b0c:	60b9      	str	r1, [r7, #8]
 8008b0e:	607a      	str	r2, [r7, #4]
 8008b10:	603b      	str	r3, [r7, #0]
  LOG_info("Initializing Drive module");
 8008b12:	494f      	ldr	r1, [pc, #316]	; (8008c50 <DRV_init+0x14c>)
 8008b14:	2001      	movs	r0, #1
 8008b16:	f000 ff15 	bl	8009944 <LOG_log>

  /* Setup PIDs */
  PID_init(&g_DRV_pidFrontRight, 1, 1, 1, 0, -100, 100, 0.5);
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	9303      	str	r3, [sp, #12]
 8008b1e:	2364      	movs	r3, #100	; 0x64
 8008b20:	9302      	str	r3, [sp, #8]
 8008b22:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8008b26:	9301      	str	r3, [sp, #4]
 8008b28:	2300      	movs	r3, #0
 8008b2a:	9300      	str	r3, [sp, #0]
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	2201      	movs	r2, #1
 8008b30:	2101      	movs	r1, #1
 8008b32:	4848      	ldr	r0, [pc, #288]	; (8008c54 <DRV_init+0x150>)
 8008b34:	f001 f83c 	bl	8009bb0 <PID_init>
  PID_init(&g_DRV_pidFrontLeft , 1, 1, 1, 0, -100, 100, 0.5);
 8008b38:	2300      	movs	r3, #0
 8008b3a:	9303      	str	r3, [sp, #12]
 8008b3c:	2364      	movs	r3, #100	; 0x64
 8008b3e:	9302      	str	r3, [sp, #8]
 8008b40:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8008b44:	9301      	str	r3, [sp, #4]
 8008b46:	2300      	movs	r3, #0
 8008b48:	9300      	str	r3, [sp, #0]
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	2201      	movs	r2, #1
 8008b4e:	2101      	movs	r1, #1
 8008b50:	4841      	ldr	r0, [pc, #260]	; (8008c58 <DRV_init+0x154>)
 8008b52:	f001 f82d 	bl	8009bb0 <PID_init>
  PID_init(&g_DRV_pidRearLeft  , 1, 1, 1, 0, -100, 100, 0.5);
 8008b56:	2300      	movs	r3, #0
 8008b58:	9303      	str	r3, [sp, #12]
 8008b5a:	2364      	movs	r3, #100	; 0x64
 8008b5c:	9302      	str	r3, [sp, #8]
 8008b5e:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8008b62:	9301      	str	r3, [sp, #4]
 8008b64:	2300      	movs	r3, #0
 8008b66:	9300      	str	r3, [sp, #0]
 8008b68:	2301      	movs	r3, #1
 8008b6a:	2201      	movs	r2, #1
 8008b6c:	2101      	movs	r1, #1
 8008b6e:	483b      	ldr	r0, [pc, #236]	; (8008c5c <DRV_init+0x158>)
 8008b70:	f001 f81e 	bl	8009bb0 <PID_init>
  PID_init(&g_DRV_pidRearRight , 1, 1, 1, 0, -100, 100, 0.5);
 8008b74:	2300      	movs	r3, #0
 8008b76:	9303      	str	r3, [sp, #12]
 8008b78:	2364      	movs	r3, #100	; 0x64
 8008b7a:	9302      	str	r3, [sp, #8]
 8008b7c:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8008b80:	9301      	str	r3, [sp, #4]
 8008b82:	2300      	movs	r3, #0
 8008b84:	9300      	str	r3, [sp, #0]
 8008b86:	2301      	movs	r3, #1
 8008b88:	2201      	movs	r2, #1
 8008b8a:	2101      	movs	r1, #1
 8008b8c:	4834      	ldr	r0, [pc, #208]	; (8008c60 <DRV_init+0x15c>)
 8008b8e:	f001 f80f 	bl	8009bb0 <PID_init>

  /* Setup motors (with a 0 speed & stopped direction, at this point) */
  MTR_init(&g_DRV_motorFrontRight,
 8008b92:	2304      	movs	r3, #4
 8008b94:	9303      	str	r3, [sp, #12]
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	9302      	str	r3, [sp, #8]
 8008b9a:	2320      	movs	r3, #32
 8008b9c:	9301      	str	r3, [sp, #4]
 8008b9e:	4b31      	ldr	r3, [pc, #196]	; (8008c64 <DRV_init+0x160>)
 8008ba0:	9300      	str	r3, [sp, #0]
 8008ba2:	2310      	movs	r3, #16
 8008ba4:	4a2f      	ldr	r2, [pc, #188]	; (8008c64 <DRV_init+0x160>)
 8008ba6:	4930      	ldr	r1, [pc, #192]	; (8008c68 <DRV_init+0x164>)
 8008ba8:	4830      	ldr	r0, [pc, #192]	; (8008c6c <DRV_init+0x168>)
 8008baa:	f000 ff27 	bl	80099fc <MTR_init>
           MOTOR_FRONT_RIGHT_IN_2_GPIO_Port,
           MOTOR_FRONT_RIGHT_IN_2_Pin,
           p_pwmTimerHandle,
           TIM_CHANNEL_2);

  MTR_init(&g_DRV_motorFrontLeft,
 8008bae:	2300      	movs	r3, #0
 8008bb0:	9303      	str	r3, [sp, #12]
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	9302      	str	r3, [sp, #8]
 8008bb6:	2302      	movs	r3, #2
 8008bb8:	9301      	str	r3, [sp, #4]
 8008bba:	4b2d      	ldr	r3, [pc, #180]	; (8008c70 <DRV_init+0x16c>)
 8008bbc:	9300      	str	r3, [sp, #0]
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	4a2b      	ldr	r2, [pc, #172]	; (8008c70 <DRV_init+0x16c>)
 8008bc2:	492c      	ldr	r1, [pc, #176]	; (8008c74 <DRV_init+0x170>)
 8008bc4:	482c      	ldr	r0, [pc, #176]	; (8008c78 <DRV_init+0x174>)
 8008bc6:	f000 ff19 	bl	80099fc <MTR_init>
           MOTOR_FRONT_LEFT_IN_2_GPIO_Port,
           MOTOR_FRONT_LEFT_IN_2_Pin,
           p_pwmTimerHandle,
           TIM_CHANNEL_1);

  MTR_init(&g_DRV_motorRearLeft,
 8008bca:	230c      	movs	r3, #12
 8008bcc:	9303      	str	r3, [sp, #12]
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	9302      	str	r3, [sp, #8]
 8008bd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008bd6:	9301      	str	r3, [sp, #4]
 8008bd8:	4b22      	ldr	r3, [pc, #136]	; (8008c64 <DRV_init+0x160>)
 8008bda:	9300      	str	r3, [sp, #0]
 8008bdc:	2304      	movs	r3, #4
 8008bde:	4a27      	ldr	r2, [pc, #156]	; (8008c7c <DRV_init+0x178>)
 8008be0:	4927      	ldr	r1, [pc, #156]	; (8008c80 <DRV_init+0x17c>)
 8008be2:	4828      	ldr	r0, [pc, #160]	; (8008c84 <DRV_init+0x180>)
 8008be4:	f000 ff0a 	bl	80099fc <MTR_init>
           MOTOR_REAR_LEFT_IN_2_GPIO_Port,
           MOTOR_REAR_LEFT_IN_2_Pin,
           p_pwmTimerHandle,
           TIM_CHANNEL_4);

  MTR_init(&g_DRV_motorRearRight,
 8008be8:	2308      	movs	r3, #8
 8008bea:	9303      	str	r3, [sp, #12]
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	9302      	str	r3, [sp, #8]
 8008bf0:	2310      	movs	r3, #16
 8008bf2:	9301      	str	r3, [sp, #4]
 8008bf4:	4b1e      	ldr	r3, [pc, #120]	; (8008c70 <DRV_init+0x16c>)
 8008bf6:	9300      	str	r3, [sp, #0]
 8008bf8:	2320      	movs	r3, #32
 8008bfa:	4a1d      	ldr	r2, [pc, #116]	; (8008c70 <DRV_init+0x16c>)
 8008bfc:	4922      	ldr	r1, [pc, #136]	; (8008c88 <DRV_init+0x184>)
 8008bfe:	4823      	ldr	r0, [pc, #140]	; (8008c8c <DRV_init+0x188>)
 8008c00:	f000 fefc 	bl	80099fc <MTR_init>
           MOTOR_REAR_RIGHT_IN_2_Pin,
           p_pwmTimerHandle,
           TIM_CHANNEL_3);

  /* Setup encoders */
  ENC_init(&g_DRV_encoderFrontRight, DRV_FRONT_RIGHT_MOTOR_NAME, true , p_frontRightEncoderTimerHandle);
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	2201      	movs	r2, #1
 8008c08:	4917      	ldr	r1, [pc, #92]	; (8008c68 <DRV_init+0x164>)
 8008c0a:	4821      	ldr	r0, [pc, #132]	; (8008c90 <DRV_init+0x18c>)
 8008c0c:	f000 fd24 	bl	8009658 <ENC_init>
  ENC_init(&g_DRV_encoderFrontLeft , DRV_FRONT_LEFT_MOTOR_NAME , false, p_frontLeftEncoderTimerHandle );
 8008c10:	69bb      	ldr	r3, [r7, #24]
 8008c12:	2200      	movs	r2, #0
 8008c14:	4917      	ldr	r1, [pc, #92]	; (8008c74 <DRV_init+0x170>)
 8008c16:	481f      	ldr	r0, [pc, #124]	; (8008c94 <DRV_init+0x190>)
 8008c18:	f000 fd1e 	bl	8009658 <ENC_init>
  ENC_init(&g_DRV_encoderRearLeft  , DRV_REAR_LEFT_MOTOR_NAME  , false, p_rearLeftEncoderTimerHandle  );
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	2200      	movs	r2, #0
 8008c20:	4917      	ldr	r1, [pc, #92]	; (8008c80 <DRV_init+0x17c>)
 8008c22:	481d      	ldr	r0, [pc, #116]	; (8008c98 <DRV_init+0x194>)
 8008c24:	f000 fd18 	bl	8009658 <ENC_init>
  ENC_init(&g_DRV_encoderRearRight , DRV_REAR_RIGHT_MOTOR_NAME , true , p_rearRightEncoderTimerHandle );
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2201      	movs	r2, #1
 8008c2c:	4916      	ldr	r1, [pc, #88]	; (8008c88 <DRV_init+0x184>)
 8008c2e:	481b      	ldr	r0, [pc, #108]	; (8008c9c <DRV_init+0x198>)
 8008c30:	f000 fd12 	bl	8009658 <ENC_init>

  /* Activate motors by default (de-activating them is used for debug  */
  g_DRV_areMotorsOn = false;
 8008c34:	4b1a      	ldr	r3, [pc, #104]	; (8008ca0 <DRV_init+0x19c>)
 8008c36:	2200      	movs	r2, #0
 8008c38:	701a      	strb	r2, [r3, #0]

  /* Considered that drive is inactive when the code starts */
  g_DRV_isActive = false;
 8008c3a:	4b1a      	ldr	r3, [pc, #104]	; (8008ca4 <DRV_init+0x1a0>)
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	701a      	strb	r2, [r3, #0]

  /* Start with master board control mode. BLink green LED accordingly */
  g_DRV_mode = DRV_MODE_MANUAL_FIXED_SPEED;
 8008c40:	4b19      	ldr	r3, [pc, #100]	; (8008ca8 <DRV_init+0x1a4>)
 8008c42:	2200      	movs	r2, #0
 8008c44:	701a      	strb	r2, [r3, #0]

  return;
 8008c46:	bf00      	nop
}
 8008c48:	3710      	adds	r7, #16
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}
 8008c4e:	bf00      	nop
 8008c50:	0800b594 	.word	0x0800b594
 8008c54:	200000e0 	.word	0x200000e0
 8008c58:	20000110 	.word	0x20000110
 8008c5c:	20000140 	.word	0x20000140
 8008c60:	20000170 	.word	0x20000170
 8008c64:	40011000 	.word	0x40011000
 8008c68:	0800b5b0 	.word	0x0800b5b0
 8008c6c:	200001a0 	.word	0x200001a0
 8008c70:	40010c00 	.word	0x40010c00
 8008c74:	0800b5bc 	.word	0x0800b5bc
 8008c78:	200001c4 	.word	0x200001c4
 8008c7c:	40011400 	.word	0x40011400
 8008c80:	0800b5c8 	.word	0x0800b5c8
 8008c84:	200001e8 	.word	0x200001e8
 8008c88:	0800b5d4 	.word	0x0800b5d4
 8008c8c:	2000020c 	.word	0x2000020c
 8008c90:	20000230 	.word	0x20000230
 8008c94:	2000023c 	.word	0x2000023c
 8008c98:	20000248 	.word	0x20000248
 8008c9c:	20000254 	.word	0x20000254
 8008ca0:	200000dc 	.word	0x200000dc
 8008ca4:	200000dd 	.word	0x200000dd
 8008ca8:	200000de 	.word	0x200000de

08008cac <DRV_updateEncoder>:

void DRV_updateEncoder(TIM_HandleTypeDef *p_encoderTimerHandle)
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b084      	sub	sp, #16
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
  int16_t l_count;

  l_count = __HAL_TIM_GET_COUNTER(p_encoderTimerHandle);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cba:	81fb      	strh	r3, [r7, #14]

  /* Check the handle of the triggering timer and update encoder accordingly */
  if (p_encoderTimerHandle == g_DRV_encoderRearLeft.timerHandle)
 8008cbc:	4b19      	ldr	r3, [pc, #100]	; (8008d24 <DRV_updateEncoder+0x78>)
 8008cbe:	689b      	ldr	r3, [r3, #8]
 8008cc0:	687a      	ldr	r2, [r7, #4]
 8008cc2:	429a      	cmp	r2, r3
 8008cc4:	d106      	bne.n	8008cd4 <DRV_updateEncoder+0x28>
  {
    ENC_update(&g_DRV_encoderRearLeft, l_count);
 8008cc6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008cca:	4619      	mov	r1, r3
 8008ccc:	4815      	ldr	r0, [pc, #84]	; (8008d24 <DRV_updateEncoder+0x78>)
 8008cce:	f000 fcef 	bl	80096b0 <ENC_update>
  else
  {
    ; /* Nothing to do */
  }

  return;
 8008cd2:	e023      	b.n	8008d1c <DRV_updateEncoder+0x70>
  else if (p_encoderTimerHandle == g_DRV_encoderRearRight.timerHandle)
 8008cd4:	4b14      	ldr	r3, [pc, #80]	; (8008d28 <DRV_updateEncoder+0x7c>)
 8008cd6:	689b      	ldr	r3, [r3, #8]
 8008cd8:	687a      	ldr	r2, [r7, #4]
 8008cda:	429a      	cmp	r2, r3
 8008cdc:	d106      	bne.n	8008cec <DRV_updateEncoder+0x40>
    ENC_update(&g_DRV_encoderRearRight, l_count);
 8008cde:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008ce2:	4619      	mov	r1, r3
 8008ce4:	4810      	ldr	r0, [pc, #64]	; (8008d28 <DRV_updateEncoder+0x7c>)
 8008ce6:	f000 fce3 	bl	80096b0 <ENC_update>
  return;
 8008cea:	e017      	b.n	8008d1c <DRV_updateEncoder+0x70>
  else if (p_encoderTimerHandle == g_DRV_encoderFrontRight.timerHandle)
 8008cec:	4b0f      	ldr	r3, [pc, #60]	; (8008d2c <DRV_updateEncoder+0x80>)
 8008cee:	689b      	ldr	r3, [r3, #8]
 8008cf0:	687a      	ldr	r2, [r7, #4]
 8008cf2:	429a      	cmp	r2, r3
 8008cf4:	d106      	bne.n	8008d04 <DRV_updateEncoder+0x58>
    ENC_update(&g_DRV_encoderFrontRight, l_count);
 8008cf6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008cfa:	4619      	mov	r1, r3
 8008cfc:	480b      	ldr	r0, [pc, #44]	; (8008d2c <DRV_updateEncoder+0x80>)
 8008cfe:	f000 fcd7 	bl	80096b0 <ENC_update>
  return;
 8008d02:	e00b      	b.n	8008d1c <DRV_updateEncoder+0x70>
  else if (p_encoderTimerHandle == g_DRV_encoderFrontLeft.timerHandle)
 8008d04:	4b0a      	ldr	r3, [pc, #40]	; (8008d30 <DRV_updateEncoder+0x84>)
 8008d06:	689b      	ldr	r3, [r3, #8]
 8008d08:	687a      	ldr	r2, [r7, #4]
 8008d0a:	429a      	cmp	r2, r3
 8008d0c:	d106      	bne.n	8008d1c <DRV_updateEncoder+0x70>
    ENC_update(&g_DRV_encoderFrontLeft, l_count);
 8008d0e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008d12:	4619      	mov	r1, r3
 8008d14:	4806      	ldr	r0, [pc, #24]	; (8008d30 <DRV_updateEncoder+0x84>)
 8008d16:	f000 fccb 	bl	80096b0 <ENC_update>
  return;
 8008d1a:	bf00      	nop
 8008d1c:	bf00      	nop
}
 8008d1e:	3710      	adds	r7, #16
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}
 8008d24:	20000248 	.word	0x20000248
 8008d28:	20000254 	.word	0x20000254
 8008d2c:	20000230 	.word	0x20000230
 8008d30:	2000023c 	.word	0x2000023c

08008d34 <DRV_updateFromBluetooth>:

void DRV_updateFromBluetooth(T_BLU_Data *p_bluetoothData)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b084      	sub	sp, #16
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
  uint32_t l_speed;

  /* Check possible requested mode change */
  switch (p_bluetoothData->button)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	7c1b      	ldrb	r3, [r3, #16]
 8008d40:	3b01      	subs	r3, #1
 8008d42:	2b0f      	cmp	r3, #15
 8008d44:	d861      	bhi.n	8008e0a <DRV_updateFromBluetooth+0xd6>
 8008d46:	a201      	add	r2, pc, #4	; (adr r2, 8008d4c <DRV_updateFromBluetooth+0x18>)
 8008d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d4c:	08008dd5 	.word	0x08008dd5
 8008d50:	08008e0b 	.word	0x08008e0b
 8008d54:	08008e0b 	.word	0x08008e0b
 8008d58:	08008ded 	.word	0x08008ded
 8008d5c:	08008e0b 	.word	0x08008e0b
 8008d60:	08008e0b 	.word	0x08008e0b
 8008d64:	08008e0b 	.word	0x08008e0b
 8008d68:	08008e0b 	.word	0x08008e0b
 8008d6c:	08008e0b 	.word	0x08008e0b
 8008d70:	08008e0b 	.word	0x08008e0b
 8008d74:	08008e0b 	.word	0x08008e0b
 8008d78:	08008e0b 	.word	0x08008e0b
 8008d7c:	08008e0b 	.word	0x08008e0b
 8008d80:	08008dbd 	.word	0x08008dbd
 8008d84:	08008da5 	.word	0x08008da5
 8008d88:	08008d8d 	.word	0x08008d8d
  {
    case BLU_BUTTON_PINK_SQUARE:
      if (g_DRV_mode != DRV_MODE_MANUAL_FIXED_SPEED)
 8008d8c:	4b82      	ldr	r3, [pc, #520]	; (8008f98 <DRV_updateFromBluetooth+0x264>)
 8008d8e:	781b      	ldrb	r3, [r3, #0]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d03c      	beq.n	8008e0e <DRV_updateFromBluetooth+0xda>
      {
        LOG_info("Drive mode now DRV_MODE_MANUAL_FIXED_SPEED");
 8008d94:	4981      	ldr	r1, [pc, #516]	; (8008f9c <DRV_updateFromBluetooth+0x268>)
 8008d96:	2001      	movs	r0, #1
 8008d98:	f000 fdd4 	bl	8009944 <LOG_log>
        g_DRV_mode = DRV_MODE_MANUAL_FIXED_SPEED;
 8008d9c:	4b7e      	ldr	r3, [pc, #504]	; (8008f98 <DRV_updateFromBluetooth+0x264>)
 8008d9e:	2200      	movs	r2, #0
 8008da0:	701a      	strb	r2, [r3, #0]
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 8008da2:	e034      	b.n	8008e0e <DRV_updateFromBluetooth+0xda>

    case BLU_BUTTON_BLUE_CROSS:
      if (g_DRV_mode != DRV_MODE_MANUAL_VARIABLE_SPEED)
 8008da4:	4b7c      	ldr	r3, [pc, #496]	; (8008f98 <DRV_updateFromBluetooth+0x264>)
 8008da6:	781b      	ldrb	r3, [r3, #0]
 8008da8:	2b01      	cmp	r3, #1
 8008daa:	d032      	beq.n	8008e12 <DRV_updateFromBluetooth+0xde>
      {
        LOG_info("Drive mode now DRV_MODE_MANUAL_VARIABLE_SPEED");
 8008dac:	497c      	ldr	r1, [pc, #496]	; (8008fa0 <DRV_updateFromBluetooth+0x26c>)
 8008dae:	2001      	movs	r0, #1
 8008db0:	f000 fdc8 	bl	8009944 <LOG_log>
        g_DRV_mode = DRV_MODE_MANUAL_VARIABLE_SPEED;
 8008db4:	4b78      	ldr	r3, [pc, #480]	; (8008f98 <DRV_updateFromBluetooth+0x264>)
 8008db6:	2201      	movs	r2, #1
 8008db8:	701a      	strb	r2, [r3, #0]
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 8008dba:	e02a      	b.n	8008e12 <DRV_updateFromBluetooth+0xde>

    case BLU_BUTTON_RED_CIRCLE:
      if (g_DRV_mode != DRV_MODE_MASTER_BOARD_CONTROL)
 8008dbc:	4b76      	ldr	r3, [pc, #472]	; (8008f98 <DRV_updateFromBluetooth+0x264>)
 8008dbe:	781b      	ldrb	r3, [r3, #0]
 8008dc0:	2b02      	cmp	r3, #2
 8008dc2:	d028      	beq.n	8008e16 <DRV_updateFromBluetooth+0xe2>
      {
        LOG_info("Drive mode now DRV_MODE_MASTER_BOARD_CONTROL");
 8008dc4:	4977      	ldr	r1, [pc, #476]	; (8008fa4 <DRV_updateFromBluetooth+0x270>)
 8008dc6:	2001      	movs	r0, #1
 8008dc8:	f000 fdbc 	bl	8009944 <LOG_log>
        g_DRV_mode = DRV_MODE_MASTER_BOARD_CONTROL;
 8008dcc:	4b72      	ldr	r3, [pc, #456]	; (8008f98 <DRV_updateFromBluetooth+0x264>)
 8008dce:	2202      	movs	r2, #2
 8008dd0:	701a      	strb	r2, [r3, #0]
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 8008dd2:	e020      	b.n	8008e16 <DRV_updateFromBluetooth+0xe2>

    case BLU_BUTTON_SELECT:
      if (g_DRV_areMotorsOn == true)
 8008dd4:	4b74      	ldr	r3, [pc, #464]	; (8008fa8 <DRV_updateFromBluetooth+0x274>)
 8008dd6:	781b      	ldrb	r3, [r3, #0]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d01e      	beq.n	8008e1a <DRV_updateFromBluetooth+0xe6>
      {
        LOG_info("Drive turning motor OFF");
 8008ddc:	4973      	ldr	r1, [pc, #460]	; (8008fac <DRV_updateFromBluetooth+0x278>)
 8008dde:	2001      	movs	r0, #1
 8008de0:	f000 fdb0 	bl	8009944 <LOG_log>
        g_DRV_areMotorsOn = false;
 8008de4:	4b70      	ldr	r3, [pc, #448]	; (8008fa8 <DRV_updateFromBluetooth+0x274>)
 8008de6:	2200      	movs	r2, #0
 8008de8:	701a      	strb	r2, [r3, #0]
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 8008dea:	e016      	b.n	8008e1a <DRV_updateFromBluetooth+0xe6>

    case BLU_BUTTON_START:
      if (g_DRV_areMotorsOn == false)
 8008dec:	4b6e      	ldr	r3, [pc, #440]	; (8008fa8 <DRV_updateFromBluetooth+0x274>)
 8008dee:	781b      	ldrb	r3, [r3, #0]
 8008df0:	f083 0301 	eor.w	r3, r3, #1
 8008df4:	b2db      	uxtb	r3, r3
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d011      	beq.n	8008e1e <DRV_updateFromBluetooth+0xea>
      {
        LOG_info("Drive turning motors ON");
 8008dfa:	496d      	ldr	r1, [pc, #436]	; (8008fb0 <DRV_updateFromBluetooth+0x27c>)
 8008dfc:	2001      	movs	r0, #1
 8008dfe:	f000 fda1 	bl	8009944 <LOG_log>
        g_DRV_areMotorsOn = true;
 8008e02:	4b69      	ldr	r3, [pc, #420]	; (8008fa8 <DRV_updateFromBluetooth+0x274>)
 8008e04:	2201      	movs	r2, #1
 8008e06:	701a      	strb	r2, [r3, #0]
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 8008e08:	e009      	b.n	8008e1e <DRV_updateFromBluetooth+0xea>

    default:
      ; /* Nothing to do */
      break;
 8008e0a:	bf00      	nop
 8008e0c:	e008      	b.n	8008e20 <DRV_updateFromBluetooth+0xec>
      break;
 8008e0e:	bf00      	nop
 8008e10:	e006      	b.n	8008e20 <DRV_updateFromBluetooth+0xec>
      break;
 8008e12:	bf00      	nop
 8008e14:	e004      	b.n	8008e20 <DRV_updateFromBluetooth+0xec>
      break;
 8008e16:	bf00      	nop
 8008e18:	e002      	b.n	8008e20 <DRV_updateFromBluetooth+0xec>
      break;
 8008e1a:	bf00      	nop
 8008e1c:	e000      	b.n	8008e20 <DRV_updateFromBluetooth+0xec>
      break;
 8008e1e:	bf00      	nop
  }

  /* Master board control mode is an automated mode, so that we will */
  /* ignore any direction/button press received via bluetooth.       */
  if (g_DRV_mode == DRV_MODE_MASTER_BOARD_CONTROL)
 8008e20:	4b5d      	ldr	r3, [pc, #372]	; (8008f98 <DRV_updateFromBluetooth+0x264>)
 8008e22:	781b      	ldrb	r3, [r3, #0]
 8008e24:	2b02      	cmp	r3, #2
 8008e26:	f000 80b3 	beq.w	8008f90 <DRV_updateFromBluetooth+0x25c>
    ; /* Nothing to do */
  }
  /* Manual mode, applying directions received by bluetooth */
  else
  {
    if (p_bluetoothData->leftY > DRV_JOYSTICKS_THRESHOLD)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	685b      	ldr	r3, [r3, #4]
 8008e2e:	2b0a      	cmp	r3, #10
 8008e30:	dd0c      	ble.n	8008e4c <DRV_updateFromBluetooth+0x118>
    {
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? DRV_JOYSTICKS_FIXED_SPEED : p_bluetoothData->leftY;
 8008e32:	4b59      	ldr	r3, [pc, #356]	; (8008f98 <DRV_updateFromBluetooth+0x264>)
 8008e34:	781b      	ldrb	r3, [r3, #0]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d002      	beq.n	8008e40 <DRV_updateFromBluetooth+0x10c>
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	685b      	ldr	r3, [r3, #4]
 8008e3e:	e000      	b.n	8008e42 <DRV_updateFromBluetooth+0x10e>
 8008e40:	2314      	movs	r3, #20
 8008e42:	60fb      	str	r3, [r7, #12]

      DRV_moveForward(l_speed);
 8008e44:	68f8      	ldr	r0, [r7, #12]
 8008e46:	f000 f957 	bl	80090f8 <DRV_moveForward>
      /* Most of the time, we will get here */
      DRV_sleep();
    }
  }

  return;
 8008e4a:	e0a1      	b.n	8008f90 <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->rightY > DRV_JOYSTICKS_THRESHOLD)
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	68db      	ldr	r3, [r3, #12]
 8008e50:	2b0a      	cmp	r3, #10
 8008e52:	dd0c      	ble.n	8008e6e <DRV_updateFromBluetooth+0x13a>
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? DRV_JOYSTICKS_FIXED_SPEED : p_bluetoothData->rightY;
 8008e54:	4b50      	ldr	r3, [pc, #320]	; (8008f98 <DRV_updateFromBluetooth+0x264>)
 8008e56:	781b      	ldrb	r3, [r3, #0]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d002      	beq.n	8008e62 <DRV_updateFromBluetooth+0x12e>
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	68db      	ldr	r3, [r3, #12]
 8008e60:	e000      	b.n	8008e64 <DRV_updateFromBluetooth+0x130>
 8008e62:	2314      	movs	r3, #20
 8008e64:	60fb      	str	r3, [r7, #12]
      DRV_moveForward(l_speed);
 8008e66:	68f8      	ldr	r0, [r7, #12]
 8008e68:	f000 f946 	bl	80090f8 <DRV_moveForward>
  return;
 8008e6c:	e090      	b.n	8008f90 <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->leftY < -DRV_JOYSTICKS_THRESHOLD)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	685b      	ldr	r3, [r3, #4]
 8008e72:	f113 0f0a 	cmn.w	r3, #10
 8008e76:	da0d      	bge.n	8008e94 <DRV_updateFromBluetooth+0x160>
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? DRV_JOYSTICKS_FIXED_SPEED : -p_bluetoothData->leftY;
 8008e78:	4b47      	ldr	r3, [pc, #284]	; (8008f98 <DRV_updateFromBluetooth+0x264>)
 8008e7a:	781b      	ldrb	r3, [r3, #0]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d003      	beq.n	8008e88 <DRV_updateFromBluetooth+0x154>
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	685b      	ldr	r3, [r3, #4]
 8008e84:	425b      	negs	r3, r3
 8008e86:	e000      	b.n	8008e8a <DRV_updateFromBluetooth+0x156>
 8008e88:	2314      	movs	r3, #20
 8008e8a:	60fb      	str	r3, [r7, #12]
      DRV_moveBackward(l_speed);
 8008e8c:	68f8      	ldr	r0, [r7, #12]
 8008e8e:	f000 f97b 	bl	8009188 <DRV_moveBackward>
  return;
 8008e92:	e07d      	b.n	8008f90 <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->rightY < -DRV_JOYSTICKS_THRESHOLD)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	68db      	ldr	r3, [r3, #12]
 8008e98:	f113 0f0a 	cmn.w	r3, #10
 8008e9c:	da0d      	bge.n	8008eba <DRV_updateFromBluetooth+0x186>
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? DRV_JOYSTICKS_FIXED_SPEED : -p_bluetoothData->rightY;
 8008e9e:	4b3e      	ldr	r3, [pc, #248]	; (8008f98 <DRV_updateFromBluetooth+0x264>)
 8008ea0:	781b      	ldrb	r3, [r3, #0]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d003      	beq.n	8008eae <DRV_updateFromBluetooth+0x17a>
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	68db      	ldr	r3, [r3, #12]
 8008eaa:	425b      	negs	r3, r3
 8008eac:	e000      	b.n	8008eb0 <DRV_updateFromBluetooth+0x17c>
 8008eae:	2314      	movs	r3, #20
 8008eb0:	60fb      	str	r3, [r7, #12]
      DRV_moveBackward(l_speed);
 8008eb2:	68f8      	ldr	r0, [r7, #12]
 8008eb4:	f000 f968 	bl	8009188 <DRV_moveBackward>
  return;
 8008eb8:	e06a      	b.n	8008f90 <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->leftX < -DRV_JOYSTICKS_THRESHOLD)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	f113 0f0a 	cmn.w	r3, #10
 8008ec2:	da0d      	bge.n	8008ee0 <DRV_updateFromBluetooth+0x1ac>
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? DRV_JOYSTICKS_FIXED_SPEED : -p_bluetoothData->leftX;
 8008ec4:	4b34      	ldr	r3, [pc, #208]	; (8008f98 <DRV_updateFromBluetooth+0x264>)
 8008ec6:	781b      	ldrb	r3, [r3, #0]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d003      	beq.n	8008ed4 <DRV_updateFromBluetooth+0x1a0>
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	425b      	negs	r3, r3
 8008ed2:	e000      	b.n	8008ed6 <DRV_updateFromBluetooth+0x1a2>
 8008ed4:	2314      	movs	r3, #20
 8008ed6:	60fb      	str	r3, [r7, #12]
      DRV_turnLeft(l_speed);
 8008ed8:	68f8      	ldr	r0, [r7, #12]
 8008eda:	f000 fa9d 	bl	8009418 <DRV_turnLeft>
  return;
 8008ede:	e057      	b.n	8008f90 <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->leftX > DRV_JOYSTICKS_THRESHOLD)
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	2b0a      	cmp	r3, #10
 8008ee6:	dd0c      	ble.n	8008f02 <DRV_updateFromBluetooth+0x1ce>
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? DRV_JOYSTICKS_FIXED_SPEED : p_bluetoothData->leftX;
 8008ee8:	4b2b      	ldr	r3, [pc, #172]	; (8008f98 <DRV_updateFromBluetooth+0x264>)
 8008eea:	781b      	ldrb	r3, [r3, #0]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d002      	beq.n	8008ef6 <DRV_updateFromBluetooth+0x1c2>
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	e000      	b.n	8008ef8 <DRV_updateFromBluetooth+0x1c4>
 8008ef6:	2314      	movs	r3, #20
 8008ef8:	60fb      	str	r3, [r7, #12]
      DRV_turnRight(l_speed);
 8008efa:	68f8      	ldr	r0, [r7, #12]
 8008efc:	f000 fad4 	bl	80094a8 <DRV_turnRight>
  return;
 8008f00:	e046      	b.n	8008f90 <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->rightX < -DRV_JOYSTICKS_THRESHOLD)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	689b      	ldr	r3, [r3, #8]
 8008f06:	f113 0f0a 	cmn.w	r3, #10
 8008f0a:	da0d      	bge.n	8008f28 <DRV_updateFromBluetooth+0x1f4>
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? DRV_JOYSTICKS_FIXED_SPEED : -p_bluetoothData->rightX;
 8008f0c:	4b22      	ldr	r3, [pc, #136]	; (8008f98 <DRV_updateFromBluetooth+0x264>)
 8008f0e:	781b      	ldrb	r3, [r3, #0]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d003      	beq.n	8008f1c <DRV_updateFromBluetooth+0x1e8>
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	689b      	ldr	r3, [r3, #8]
 8008f18:	425b      	negs	r3, r3
 8008f1a:	e000      	b.n	8008f1e <DRV_updateFromBluetooth+0x1ea>
 8008f1c:	2314      	movs	r3, #20
 8008f1e:	60fb      	str	r3, [r7, #12]
      DRV_translateLeft(l_speed);
 8008f20:	68f8      	ldr	r0, [r7, #12]
 8008f22:	f000 fb09 	bl	8009538 <DRV_translateLeft>
  return;
 8008f26:	e033      	b.n	8008f90 <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->rightX > DRV_JOYSTICKS_THRESHOLD)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	689b      	ldr	r3, [r3, #8]
 8008f2c:	2b0a      	cmp	r3, #10
 8008f2e:	dd0c      	ble.n	8008f4a <DRV_updateFromBluetooth+0x216>
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? DRV_JOYSTICKS_FIXED_SPEED : p_bluetoothData->rightX;
 8008f30:	4b19      	ldr	r3, [pc, #100]	; (8008f98 <DRV_updateFromBluetooth+0x264>)
 8008f32:	781b      	ldrb	r3, [r3, #0]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d002      	beq.n	8008f3e <DRV_updateFromBluetooth+0x20a>
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	689b      	ldr	r3, [r3, #8]
 8008f3c:	e000      	b.n	8008f40 <DRV_updateFromBluetooth+0x20c>
 8008f3e:	2314      	movs	r3, #20
 8008f40:	60fb      	str	r3, [r7, #12]
      DRV_translateRight(l_speed);
 8008f42:	68f8      	ldr	r0, [r7, #12]
 8008f44:	f000 fb40 	bl	80095c8 <DRV_translateRight>
  return;
 8008f48:	e022      	b.n	8008f90 <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->button == BLU_BUTTON_L1)
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	7c1b      	ldrb	r3, [r3, #16]
 8008f4e:	2b0b      	cmp	r3, #11
 8008f50:	d103      	bne.n	8008f5a <DRV_updateFromBluetooth+0x226>
      DRV_moveForwardLeft(DRV_BUTTONS_FIXED_SPEED);
 8008f52:	2028      	movs	r0, #40	; 0x28
 8008f54:	f000 f9a0 	bl	8009298 <DRV_moveForwardLeft>
  return;
 8008f58:	e01a      	b.n	8008f90 <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->button == BLU_BUTTON_L2)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	7c1b      	ldrb	r3, [r3, #16]
 8008f5e:	2b09      	cmp	r3, #9
 8008f60:	d103      	bne.n	8008f6a <DRV_updateFromBluetooth+0x236>
      DRV_moveBackwardRight(DRV_BUTTONS_FIXED_SPEED);
 8008f62:	2028      	movs	r0, #40	; 0x28
 8008f64:	f000 f9d8 	bl	8009318 <DRV_moveBackwardRight>
  return;
 8008f68:	e012      	b.n	8008f90 <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->button == BLU_BUTTON_R1)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	7c1b      	ldrb	r3, [r3, #16]
 8008f6e:	2b0c      	cmp	r3, #12
 8008f70:	d103      	bne.n	8008f7a <DRV_updateFromBluetooth+0x246>
      DRV_moveForwardRight(DRV_BUTTONS_FIXED_SPEED);
 8008f72:	2028      	movs	r0, #40	; 0x28
 8008f74:	f000 f950 	bl	8009218 <DRV_moveForwardRight>
  return;
 8008f78:	e00a      	b.n	8008f90 <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->button == BLU_BUTTON_R2)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	7c1b      	ldrb	r3, [r3, #16]
 8008f7e:	2b0a      	cmp	r3, #10
 8008f80:	d103      	bne.n	8008f8a <DRV_updateFromBluetooth+0x256>
      DRV_moveBackwardLeft(DRV_BUTTONS_FIXED_SPEED);
 8008f82:	2028      	movs	r0, #40	; 0x28
 8008f84:	f000 fa08 	bl	8009398 <DRV_moveBackwardLeft>
  return;
 8008f88:	e002      	b.n	8008f90 <DRV_updateFromBluetooth+0x25c>
      DRV_sleep();
 8008f8a:	f000 f889 	bl	80090a0 <DRV_sleep>
  return;
 8008f8e:	bf00      	nop
 8008f90:	bf00      	nop
}
 8008f92:	3710      	adds	r7, #16
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bd80      	pop	{r7, pc}
 8008f98:	200000de 	.word	0x200000de
 8008f9c:	0800b5e0 	.word	0x0800b5e0
 8008fa0:	0800b60c 	.word	0x0800b60c
 8008fa4:	0800b63c 	.word	0x0800b63c
 8008fa8:	200000dc 	.word	0x200000dc
 8008fac:	0800b66c 	.word	0x0800b66c
 8008fb0:	0800b684 	.word	0x0800b684

08008fb4 <DRV_updateFromMaster>:

void DRV_updateFromMaster(uint16_t p_deltaTime)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b08a      	sub	sp, #40	; 0x28
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	4603      	mov	r3, r0
 8008fbc:	80fb      	strh	r3, [r7, #6]
  int32_t l_pidSpeedFrontLeft;
  int32_t l_pidSpeedRearRight;
  int32_t l_pidSpeedRearLeft;

  /* Ignore master board data only whenever a manual mode is selected */
  if (g_DRV_mode != DRV_MODE_MASTER_BOARD_CONTROL)
 8008fbe:	4b26      	ldr	r3, [pc, #152]	; (8009058 <DRV_updateFromMaster+0xa4>)
 8008fc0:	781b      	ldrb	r3, [r3, #0]
 8008fc2:	2b02      	cmp	r3, #2
 8008fc4:	d144      	bne.n	8009050 <DRV_updateFromMaster+0x9c>
    ; /* Nothing to do */
  }
  else
  {
    /* Get measurements */
    l_measuredSpeedFrontRight = ENC_getCount(&g_DRV_encoderFrontRight);
 8008fc6:	4825      	ldr	r0, [pc, #148]	; (800905c <DRV_updateFromMaster+0xa8>)
 8008fc8:	f000 fb8e 	bl	80096e8 <ENC_getCount>
 8008fcc:	4603      	mov	r3, r0
 8008fce:	627b      	str	r3, [r7, #36]	; 0x24
    l_measuredSpeedFrontLeft  = ENC_getCount(&g_DRV_encoderFrontLeft );
 8008fd0:	4823      	ldr	r0, [pc, #140]	; (8009060 <DRV_updateFromMaster+0xac>)
 8008fd2:	f000 fb89 	bl	80096e8 <ENC_getCount>
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	623b      	str	r3, [r7, #32]
    l_measuredSpeedRearRight  = ENC_getCount(&g_DRV_encoderRearRight );
 8008fda:	4822      	ldr	r0, [pc, #136]	; (8009064 <DRV_updateFromMaster+0xb0>)
 8008fdc:	f000 fb84 	bl	80096e8 <ENC_getCount>
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	61fb      	str	r3, [r7, #28]
    l_measuredSpeedRearLeft   = ENC_getCount(&g_DRV_encoderRearLeft  );
 8008fe4:	4820      	ldr	r0, [pc, #128]	; (8009068 <DRV_updateFromMaster+0xb4>)
 8008fe6:	f000 fb7f 	bl	80096e8 <ENC_getCount>
 8008fea:	4603      	mov	r3, r0
 8008fec:	61bb      	str	r3, [r7, #24]

    /* Update PIDs */
    l_pidSpeedFrontRight = PID_update(&g_DRV_pidFrontRight, l_measuredSpeedFrontRight, p_deltaTime);
 8008fee:	88fb      	ldrh	r3, [r7, #6]
 8008ff0:	461a      	mov	r2, r3
 8008ff2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008ff4:	481d      	ldr	r0, [pc, #116]	; (800906c <DRV_updateFromMaster+0xb8>)
 8008ff6:	f000 fe2f 	bl	8009c58 <PID_update>
 8008ffa:	6178      	str	r0, [r7, #20]
    l_pidSpeedFrontLeft  = PID_update(&g_DRV_pidFrontLeft , l_measuredSpeedFrontLeft , p_deltaTime);
 8008ffc:	88fb      	ldrh	r3, [r7, #6]
 8008ffe:	461a      	mov	r2, r3
 8009000:	6a39      	ldr	r1, [r7, #32]
 8009002:	481b      	ldr	r0, [pc, #108]	; (8009070 <DRV_updateFromMaster+0xbc>)
 8009004:	f000 fe28 	bl	8009c58 <PID_update>
 8009008:	6138      	str	r0, [r7, #16]
    l_pidSpeedRearRight  = PID_update(&g_DRV_pidRearRight , l_measuredSpeedRearRight , p_deltaTime);
 800900a:	88fb      	ldrh	r3, [r7, #6]
 800900c:	461a      	mov	r2, r3
 800900e:	69f9      	ldr	r1, [r7, #28]
 8009010:	4818      	ldr	r0, [pc, #96]	; (8009074 <DRV_updateFromMaster+0xc0>)
 8009012:	f000 fe21 	bl	8009c58 <PID_update>
 8009016:	60f8      	str	r0, [r7, #12]
    l_pidSpeedRearLeft   = PID_update(&g_DRV_pidRearLeft  , l_measuredSpeedRearLeft  , p_deltaTime);
 8009018:	88fb      	ldrh	r3, [r7, #6]
 800901a:	461a      	mov	r2, r3
 800901c:	69b9      	ldr	r1, [r7, #24]
 800901e:	4816      	ldr	r0, [pc, #88]	; (8009078 <DRV_updateFromMaster+0xc4>)
 8009020:	f000 fe1a 	bl	8009c58 <PID_update>
 8009024:	60b8      	str	r0, [r7, #8]

    /* Update motors */
    MTR_setSpeed(&g_DRV_motorFrontRight, l_pidSpeedFrontRight);
 8009026:	697b      	ldr	r3, [r7, #20]
 8009028:	4619      	mov	r1, r3
 800902a:	4814      	ldr	r0, [pc, #80]	; (800907c <DRV_updateFromMaster+0xc8>)
 800902c:	f000 fd82 	bl	8009b34 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_pidSpeedFrontLeft );
 8009030:	693b      	ldr	r3, [r7, #16]
 8009032:	4619      	mov	r1, r3
 8009034:	4812      	ldr	r0, [pc, #72]	; (8009080 <DRV_updateFromMaster+0xcc>)
 8009036:	f000 fd7d 	bl	8009b34 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_pidSpeedRearRight );
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	4619      	mov	r1, r3
 800903e:	4811      	ldr	r0, [pc, #68]	; (8009084 <DRV_updateFromMaster+0xd0>)
 8009040:	f000 fd78 	bl	8009b34 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_pidSpeedRearLeft  );
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	4619      	mov	r1, r3
 8009048:	480f      	ldr	r0, [pc, #60]	; (8009088 <DRV_updateFromMaster+0xd4>)
 800904a:	f000 fd73 	bl	8009b34 <MTR_setSpeed>
  }

  return;
 800904e:	bf00      	nop
 8009050:	bf00      	nop
}
 8009052:	3728      	adds	r7, #40	; 0x28
 8009054:	46bd      	mov	sp, r7
 8009056:	bd80      	pop	{r7, pc}
 8009058:	200000de 	.word	0x200000de
 800905c:	20000230 	.word	0x20000230
 8009060:	2000023c 	.word	0x2000023c
 8009064:	20000254 	.word	0x20000254
 8009068:	20000248 	.word	0x20000248
 800906c:	200000e0 	.word	0x200000e0
 8009070:	20000110 	.word	0x20000110
 8009074:	20000170 	.word	0x20000170
 8009078:	20000140 	.word	0x20000140
 800907c:	200001a0 	.word	0x200001a0
 8009080:	200001c4 	.word	0x200001c4
 8009084:	2000020c 	.word	0x2000020c
 8009088:	200001e8 	.word	0x200001e8

0800908c <DRV_getMode>:

T_DRV_MODE DRV_getMode(void)
{
 800908c:	b480      	push	{r7}
 800908e:	af00      	add	r7, sp, #0
  return g_DRV_mode;
 8009090:	4b02      	ldr	r3, [pc, #8]	; (800909c <DRV_getMode+0x10>)
 8009092:	781b      	ldrb	r3, [r3, #0]
}
 8009094:	4618      	mov	r0, r3
 8009096:	46bd      	mov	sp, r7
 8009098:	bc80      	pop	{r7}
 800909a:	4770      	bx	lr
 800909c:	200000de 	.word	0x200000de

080090a0 <DRV_sleep>:

static void DRV_sleep(void)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	af00      	add	r7, sp, #0
  if (g_DRV_isActive == true)
 80090a4:	4b0e      	ldr	r3, [pc, #56]	; (80090e0 <DRV_sleep+0x40>)
 80090a6:	781b      	ldrb	r3, [r3, #0]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d017      	beq.n	80090dc <DRV_sleep+0x3c>
  {
    LOG_debug("Drive going to sleep");
 80090ac:	490d      	ldr	r1, [pc, #52]	; (80090e4 <DRV_sleep+0x44>)
 80090ae:	2000      	movs	r0, #0
 80090b0:	f000 fc48 	bl	8009944 <LOG_log>

    MTR_setSpeed(&g_DRV_motorFrontRight, 0);
 80090b4:	2100      	movs	r1, #0
 80090b6:	480c      	ldr	r0, [pc, #48]	; (80090e8 <DRV_sleep+0x48>)
 80090b8:	f000 fd3c 	bl	8009b34 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , 0);
 80090bc:	2100      	movs	r1, #0
 80090be:	480b      	ldr	r0, [pc, #44]	; (80090ec <DRV_sleep+0x4c>)
 80090c0:	f000 fd38 	bl	8009b34 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , 0);
 80090c4:	2100      	movs	r1, #0
 80090c6:	480a      	ldr	r0, [pc, #40]	; (80090f0 <DRV_sleep+0x50>)
 80090c8:	f000 fd34 	bl	8009b34 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , 0);
 80090cc:	2100      	movs	r1, #0
 80090ce:	4809      	ldr	r0, [pc, #36]	; (80090f4 <DRV_sleep+0x54>)
 80090d0:	f000 fd30 	bl	8009b34 <MTR_setSpeed>

    g_DRV_isActive = false;
 80090d4:	4b02      	ldr	r3, [pc, #8]	; (80090e0 <DRV_sleep+0x40>)
 80090d6:	2200      	movs	r2, #0
 80090d8:	701a      	strb	r2, [r3, #0]
  else
  {
    ; /* Nothing to do */
  }

  return;
 80090da:	bf00      	nop
 80090dc:	bf00      	nop
}
 80090de:	bd80      	pop	{r7, pc}
 80090e0:	200000dd 	.word	0x200000dd
 80090e4:	0800b69c 	.word	0x0800b69c
 80090e8:	200001a0 	.word	0x200001a0
 80090ec:	200001c4 	.word	0x200001c4
 80090f0:	2000020c 	.word	0x2000020c
 80090f4:	200001e8 	.word	0x200001e8

080090f8 <DRV_moveForward>:

static void DRV_moveForward(uint32_t p_speed)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b084      	sub	sp, #16
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	60fb      	str	r3, [r7, #12]

  LOG_debug("Moving forward @%u", l_speed);
 8009104:	68fa      	ldr	r2, [r7, #12]
 8009106:	4919      	ldr	r1, [pc, #100]	; (800916c <DRV_moveForward+0x74>)
 8009108:	2000      	movs	r0, #0
 800910a:	f000 fc1b 	bl	8009944 <LOG_log>

  g_DRV_isActive = true;
 800910e:	4b18      	ldr	r3, [pc, #96]	; (8009170 <DRV_moveForward+0x78>)
 8009110:	2201      	movs	r2, #1
 8009112:	701a      	strb	r2, [r3, #0]

  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_FORWARD);
 8009114:	2101      	movs	r1, #1
 8009116:	4817      	ldr	r0, [pc, #92]	; (8009174 <DRV_moveForward+0x7c>)
 8009118:	f000 fca0 	bl	8009a5c <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorFrontLeft , MTR_DIRECTION_FORWARD);
 800911c:	2101      	movs	r1, #1
 800911e:	4816      	ldr	r0, [pc, #88]	; (8009178 <DRV_moveForward+0x80>)
 8009120:	f000 fc9c 	bl	8009a5c <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight , MTR_DIRECTION_FORWARD);
 8009124:	2101      	movs	r1, #1
 8009126:	4815      	ldr	r0, [pc, #84]	; (800917c <DRV_moveForward+0x84>)
 8009128:	f000 fc98 	bl	8009a5c <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_FORWARD);
 800912c:	2101      	movs	r1, #1
 800912e:	4814      	ldr	r0, [pc, #80]	; (8009180 <DRV_moveForward+0x88>)
 8009130:	f000 fc94 	bl	8009a5c <MTR_setDirection>

  if (g_DRV_areMotorsOn == false)
 8009134:	4b13      	ldr	r3, [pc, #76]	; (8009184 <DRV_moveForward+0x8c>)
 8009136:	781b      	ldrb	r3, [r3, #0]
 8009138:	f083 0301 	eor.w	r3, r3, #1
 800913c:	b2db      	uxtb	r3, r3
 800913e:	2b00      	cmp	r3, #0
 8009140:	d110      	bne.n	8009164 <DRV_moveForward+0x6c>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 8009142:	68f9      	ldr	r1, [r7, #12]
 8009144:	480b      	ldr	r0, [pc, #44]	; (8009174 <DRV_moveForward+0x7c>)
 8009146:	f000 fcf5 	bl	8009b34 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 800914a:	68f9      	ldr	r1, [r7, #12]
 800914c:	480a      	ldr	r0, [pc, #40]	; (8009178 <DRV_moveForward+0x80>)
 800914e:	f000 fcf1 	bl	8009b34 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 8009152:	68f9      	ldr	r1, [r7, #12]
 8009154:	4809      	ldr	r0, [pc, #36]	; (800917c <DRV_moveForward+0x84>)
 8009156:	f000 fced 	bl	8009b34 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 800915a:	68f9      	ldr	r1, [r7, #12]
 800915c:	4808      	ldr	r0, [pc, #32]	; (8009180 <DRV_moveForward+0x88>)
 800915e:	f000 fce9 	bl	8009b34 <MTR_setSpeed>
  }

  return;
 8009162:	bf00      	nop
 8009164:	bf00      	nop
}
 8009166:	3710      	adds	r7, #16
 8009168:	46bd      	mov	sp, r7
 800916a:	bd80      	pop	{r7, pc}
 800916c:	0800b6b4 	.word	0x0800b6b4
 8009170:	200000dd 	.word	0x200000dd
 8009174:	200001a0 	.word	0x200001a0
 8009178:	200001c4 	.word	0x200001c4
 800917c:	2000020c 	.word	0x2000020c
 8009180:	200001e8 	.word	0x200001e8
 8009184:	200000dc 	.word	0x200000dc

08009188 <DRV_moveBackward>:

static void DRV_moveBackward(uint32_t p_speed)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b084      	sub	sp, #16
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	60fb      	str	r3, [r7, #12]

  LOG_debug("Moving backward @%u", l_speed);
 8009194:	68fa      	ldr	r2, [r7, #12]
 8009196:	4919      	ldr	r1, [pc, #100]	; (80091fc <DRV_moveBackward+0x74>)
 8009198:	2000      	movs	r0, #0
 800919a:	f000 fbd3 	bl	8009944 <LOG_log>

  g_DRV_isActive = true;
 800919e:	4b18      	ldr	r3, [pc, #96]	; (8009200 <DRV_moveBackward+0x78>)
 80091a0:	2201      	movs	r2, #1
 80091a2:	701a      	strb	r2, [r3, #0]

  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_BACKWARD);
 80091a4:	2102      	movs	r1, #2
 80091a6:	4817      	ldr	r0, [pc, #92]	; (8009204 <DRV_moveBackward+0x7c>)
 80091a8:	f000 fc58 	bl	8009a5c <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorFrontLeft , MTR_DIRECTION_BACKWARD);
 80091ac:	2102      	movs	r1, #2
 80091ae:	4816      	ldr	r0, [pc, #88]	; (8009208 <DRV_moveBackward+0x80>)
 80091b0:	f000 fc54 	bl	8009a5c <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight , MTR_DIRECTION_BACKWARD);
 80091b4:	2102      	movs	r1, #2
 80091b6:	4815      	ldr	r0, [pc, #84]	; (800920c <DRV_moveBackward+0x84>)
 80091b8:	f000 fc50 	bl	8009a5c <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_BACKWARD);
 80091bc:	2102      	movs	r1, #2
 80091be:	4814      	ldr	r0, [pc, #80]	; (8009210 <DRV_moveBackward+0x88>)
 80091c0:	f000 fc4c 	bl	8009a5c <MTR_setDirection>

  if (g_DRV_areMotorsOn == false)
 80091c4:	4b13      	ldr	r3, [pc, #76]	; (8009214 <DRV_moveBackward+0x8c>)
 80091c6:	781b      	ldrb	r3, [r3, #0]
 80091c8:	f083 0301 	eor.w	r3, r3, #1
 80091cc:	b2db      	uxtb	r3, r3
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d110      	bne.n	80091f4 <DRV_moveBackward+0x6c>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 80091d2:	68f9      	ldr	r1, [r7, #12]
 80091d4:	480b      	ldr	r0, [pc, #44]	; (8009204 <DRV_moveBackward+0x7c>)
 80091d6:	f000 fcad 	bl	8009b34 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 80091da:	68f9      	ldr	r1, [r7, #12]
 80091dc:	480a      	ldr	r0, [pc, #40]	; (8009208 <DRV_moveBackward+0x80>)
 80091de:	f000 fca9 	bl	8009b34 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 80091e2:	68f9      	ldr	r1, [r7, #12]
 80091e4:	4809      	ldr	r0, [pc, #36]	; (800920c <DRV_moveBackward+0x84>)
 80091e6:	f000 fca5 	bl	8009b34 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 80091ea:	68f9      	ldr	r1, [r7, #12]
 80091ec:	4808      	ldr	r0, [pc, #32]	; (8009210 <DRV_moveBackward+0x88>)
 80091ee:	f000 fca1 	bl	8009b34 <MTR_setSpeed>
  }

  return;
 80091f2:	bf00      	nop
 80091f4:	bf00      	nop
}
 80091f6:	3710      	adds	r7, #16
 80091f8:	46bd      	mov	sp, r7
 80091fa:	bd80      	pop	{r7, pc}
 80091fc:	0800b6c8 	.word	0x0800b6c8
 8009200:	200000dd 	.word	0x200000dd
 8009204:	200001a0 	.word	0x200001a0
 8009208:	200001c4 	.word	0x200001c4
 800920c:	2000020c 	.word	0x2000020c
 8009210:	200001e8 	.word	0x200001e8
 8009214:	200000dc 	.word	0x200000dc

08009218 <DRV_moveForwardRight>:

static void DRV_moveForwardRight (uint32_t p_speed)
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b084      	sub	sp, #16
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	60fb      	str	r3, [r7, #12]

  LOG_debug("Moving forward-right @%u", l_speed);
 8009224:	68fa      	ldr	r2, [r7, #12]
 8009226:	4915      	ldr	r1, [pc, #84]	; (800927c <DRV_moveForwardRight+0x64>)
 8009228:	2000      	movs	r0, #0
 800922a:	f000 fb8b 	bl	8009944 <LOG_log>

  g_DRV_isActive = true;
 800922e:	4b14      	ldr	r3, [pc, #80]	; (8009280 <DRV_moveForwardRight+0x68>)
 8009230:	2201      	movs	r2, #1
 8009232:	701a      	strb	r2, [r3, #0]

  MTR_setDirection(&g_DRV_motorFrontLeft, MTR_DIRECTION_FORWARD);
 8009234:	2101      	movs	r1, #1
 8009236:	4813      	ldr	r0, [pc, #76]	; (8009284 <DRV_moveForwardRight+0x6c>)
 8009238:	f000 fc10 	bl	8009a5c <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight, MTR_DIRECTION_FORWARD);
 800923c:	2101      	movs	r1, #1
 800923e:	4812      	ldr	r0, [pc, #72]	; (8009288 <DRV_moveForwardRight+0x70>)
 8009240:	f000 fc0c 	bl	8009a5c <MTR_setDirection>

  if (g_DRV_areMotorsOn == false)
 8009244:	4b11      	ldr	r3, [pc, #68]	; (800928c <DRV_moveForwardRight+0x74>)
 8009246:	781b      	ldrb	r3, [r3, #0]
 8009248:	f083 0301 	eor.w	r3, r3, #1
 800924c:	b2db      	uxtb	r3, r3
 800924e:	2b00      	cmp	r3, #0
 8009250:	d110      	bne.n	8009274 <DRV_moveForwardRight+0x5c>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight,       0);
 8009252:	2100      	movs	r1, #0
 8009254:	480e      	ldr	r0, [pc, #56]	; (8009290 <DRV_moveForwardRight+0x78>)
 8009256:	f000 fc6d 	bl	8009b34 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 800925a:	68f9      	ldr	r1, [r7, #12]
 800925c:	4809      	ldr	r0, [pc, #36]	; (8009284 <DRV_moveForwardRight+0x6c>)
 800925e:	f000 fc69 	bl	8009b34 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 8009262:	68f9      	ldr	r1, [r7, #12]
 8009264:	4808      	ldr	r0, [pc, #32]	; (8009288 <DRV_moveForwardRight+0x70>)
 8009266:	f000 fc65 	bl	8009b34 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  ,       0);
 800926a:	2100      	movs	r1, #0
 800926c:	4809      	ldr	r0, [pc, #36]	; (8009294 <DRV_moveForwardRight+0x7c>)
 800926e:	f000 fc61 	bl	8009b34 <MTR_setSpeed>
  }

  return;
 8009272:	bf00      	nop
 8009274:	bf00      	nop
}
 8009276:	3710      	adds	r7, #16
 8009278:	46bd      	mov	sp, r7
 800927a:	bd80      	pop	{r7, pc}
 800927c:	0800b6dc 	.word	0x0800b6dc
 8009280:	200000dd 	.word	0x200000dd
 8009284:	200001c4 	.word	0x200001c4
 8009288:	2000020c 	.word	0x2000020c
 800928c:	200000dc 	.word	0x200000dc
 8009290:	200001a0 	.word	0x200001a0
 8009294:	200001e8 	.word	0x200001e8

08009298 <DRV_moveForwardLeft>:

static void DRV_moveForwardLeft  (uint32_t p_speed)
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b084      	sub	sp, #16
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	60fb      	str	r3, [r7, #12]

  LOG_debug("Moving forward-left @%u", l_speed);
 80092a4:	68fa      	ldr	r2, [r7, #12]
 80092a6:	4915      	ldr	r1, [pc, #84]	; (80092fc <DRV_moveForwardLeft+0x64>)
 80092a8:	2000      	movs	r0, #0
 80092aa:	f000 fb4b 	bl	8009944 <LOG_log>

  g_DRV_isActive = true;
 80092ae:	4b14      	ldr	r3, [pc, #80]	; (8009300 <DRV_moveForwardLeft+0x68>)
 80092b0:	2201      	movs	r2, #1
 80092b2:	701a      	strb	r2, [r3, #0]

  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_FORWARD);
 80092b4:	2101      	movs	r1, #1
 80092b6:	4813      	ldr	r0, [pc, #76]	; (8009304 <DRV_moveForwardLeft+0x6c>)
 80092b8:	f000 fbd0 	bl	8009a5c <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_FORWARD);
 80092bc:	2101      	movs	r1, #1
 80092be:	4812      	ldr	r0, [pc, #72]	; (8009308 <DRV_moveForwardLeft+0x70>)
 80092c0:	f000 fbcc 	bl	8009a5c <MTR_setDirection>

  if (g_DRV_areMotorsOn == false)
 80092c4:	4b11      	ldr	r3, [pc, #68]	; (800930c <DRV_moveForwardLeft+0x74>)
 80092c6:	781b      	ldrb	r3, [r3, #0]
 80092c8:	f083 0301 	eor.w	r3, r3, #1
 80092cc:	b2db      	uxtb	r3, r3
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d110      	bne.n	80092f4 <DRV_moveForwardLeft+0x5c>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 80092d2:	68f9      	ldr	r1, [r7, #12]
 80092d4:	480b      	ldr	r0, [pc, #44]	; (8009304 <DRV_moveForwardLeft+0x6c>)
 80092d6:	f000 fc2d 	bl	8009b34 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft ,       0);
 80092da:	2100      	movs	r1, #0
 80092dc:	480c      	ldr	r0, [pc, #48]	; (8009310 <DRV_moveForwardLeft+0x78>)
 80092de:	f000 fc29 	bl	8009b34 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight ,       0);
 80092e2:	2100      	movs	r1, #0
 80092e4:	480b      	ldr	r0, [pc, #44]	; (8009314 <DRV_moveForwardLeft+0x7c>)
 80092e6:	f000 fc25 	bl	8009b34 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 80092ea:	68f9      	ldr	r1, [r7, #12]
 80092ec:	4806      	ldr	r0, [pc, #24]	; (8009308 <DRV_moveForwardLeft+0x70>)
 80092ee:	f000 fc21 	bl	8009b34 <MTR_setSpeed>
  }

  return;
 80092f2:	bf00      	nop
 80092f4:	bf00      	nop
}
 80092f6:	3710      	adds	r7, #16
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd80      	pop	{r7, pc}
 80092fc:	0800b6f8 	.word	0x0800b6f8
 8009300:	200000dd 	.word	0x200000dd
 8009304:	200001a0 	.word	0x200001a0
 8009308:	200001e8 	.word	0x200001e8
 800930c:	200000dc 	.word	0x200000dc
 8009310:	200001c4 	.word	0x200001c4
 8009314:	2000020c 	.word	0x2000020c

08009318 <DRV_moveBackwardRight>:

static void DRV_moveBackwardRight(uint32_t p_speed)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b084      	sub	sp, #16
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	60fb      	str	r3, [r7, #12]

  LOG_debug("Moving backward-right @%u", l_speed);
 8009324:	68fa      	ldr	r2, [r7, #12]
 8009326:	4915      	ldr	r1, [pc, #84]	; (800937c <DRV_moveBackwardRight+0x64>)
 8009328:	2000      	movs	r0, #0
 800932a:	f000 fb0b 	bl	8009944 <LOG_log>

  g_DRV_isActive = true;
 800932e:	4b14      	ldr	r3, [pc, #80]	; (8009380 <DRV_moveBackwardRight+0x68>)
 8009330:	2201      	movs	r2, #1
 8009332:	701a      	strb	r2, [r3, #0]

  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_BACKWARD);
 8009334:	2102      	movs	r1, #2
 8009336:	4813      	ldr	r0, [pc, #76]	; (8009384 <DRV_moveBackwardRight+0x6c>)
 8009338:	f000 fb90 	bl	8009a5c <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_BACKWARD);
 800933c:	2102      	movs	r1, #2
 800933e:	4812      	ldr	r0, [pc, #72]	; (8009388 <DRV_moveBackwardRight+0x70>)
 8009340:	f000 fb8c 	bl	8009a5c <MTR_setDirection>

  if (g_DRV_areMotorsOn == false)
 8009344:	4b11      	ldr	r3, [pc, #68]	; (800938c <DRV_moveBackwardRight+0x74>)
 8009346:	781b      	ldrb	r3, [r3, #0]
 8009348:	f083 0301 	eor.w	r3, r3, #1
 800934c:	b2db      	uxtb	r3, r3
 800934e:	2b00      	cmp	r3, #0
 8009350:	d110      	bne.n	8009374 <DRV_moveBackwardRight+0x5c>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 8009352:	68f9      	ldr	r1, [r7, #12]
 8009354:	480b      	ldr	r0, [pc, #44]	; (8009384 <DRV_moveBackwardRight+0x6c>)
 8009356:	f000 fbed 	bl	8009b34 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft ,       0);
 800935a:	2100      	movs	r1, #0
 800935c:	480c      	ldr	r0, [pc, #48]	; (8009390 <DRV_moveBackwardRight+0x78>)
 800935e:	f000 fbe9 	bl	8009b34 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight ,       0);
 8009362:	2100      	movs	r1, #0
 8009364:	480b      	ldr	r0, [pc, #44]	; (8009394 <DRV_moveBackwardRight+0x7c>)
 8009366:	f000 fbe5 	bl	8009b34 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 800936a:	68f9      	ldr	r1, [r7, #12]
 800936c:	4806      	ldr	r0, [pc, #24]	; (8009388 <DRV_moveBackwardRight+0x70>)
 800936e:	f000 fbe1 	bl	8009b34 <MTR_setSpeed>
  }

  return;
 8009372:	bf00      	nop
 8009374:	bf00      	nop
}
 8009376:	3710      	adds	r7, #16
 8009378:	46bd      	mov	sp, r7
 800937a:	bd80      	pop	{r7, pc}
 800937c:	0800b710 	.word	0x0800b710
 8009380:	200000dd 	.word	0x200000dd
 8009384:	200001a0 	.word	0x200001a0
 8009388:	200001e8 	.word	0x200001e8
 800938c:	200000dc 	.word	0x200000dc
 8009390:	200001c4 	.word	0x200001c4
 8009394:	2000020c 	.word	0x2000020c

08009398 <DRV_moveBackwardLeft>:

static void DRV_moveBackwardLeft (uint32_t p_speed)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b084      	sub	sp, #16
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	60fb      	str	r3, [r7, #12]

  LOG_debug("Moving backward-left @%u", l_speed);
 80093a4:	68fa      	ldr	r2, [r7, #12]
 80093a6:	4915      	ldr	r1, [pc, #84]	; (80093fc <DRV_moveBackwardLeft+0x64>)
 80093a8:	2000      	movs	r0, #0
 80093aa:	f000 facb 	bl	8009944 <LOG_log>

  g_DRV_isActive = true;
 80093ae:	4b14      	ldr	r3, [pc, #80]	; (8009400 <DRV_moveBackwardLeft+0x68>)
 80093b0:	2201      	movs	r2, #1
 80093b2:	701a      	strb	r2, [r3, #0]

  MTR_setDirection(&g_DRV_motorFrontLeft, MTR_DIRECTION_BACKWARD);
 80093b4:	2102      	movs	r1, #2
 80093b6:	4813      	ldr	r0, [pc, #76]	; (8009404 <DRV_moveBackwardLeft+0x6c>)
 80093b8:	f000 fb50 	bl	8009a5c <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight, MTR_DIRECTION_BACKWARD);
 80093bc:	2102      	movs	r1, #2
 80093be:	4812      	ldr	r0, [pc, #72]	; (8009408 <DRV_moveBackwardLeft+0x70>)
 80093c0:	f000 fb4c 	bl	8009a5c <MTR_setDirection>

  if (g_DRV_areMotorsOn == false)
 80093c4:	4b11      	ldr	r3, [pc, #68]	; (800940c <DRV_moveBackwardLeft+0x74>)
 80093c6:	781b      	ldrb	r3, [r3, #0]
 80093c8:	f083 0301 	eor.w	r3, r3, #1
 80093cc:	b2db      	uxtb	r3, r3
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d110      	bne.n	80093f4 <DRV_moveBackwardLeft+0x5c>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight,       0);
 80093d2:	2100      	movs	r1, #0
 80093d4:	480e      	ldr	r0, [pc, #56]	; (8009410 <DRV_moveBackwardLeft+0x78>)
 80093d6:	f000 fbad 	bl	8009b34 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 80093da:	68f9      	ldr	r1, [r7, #12]
 80093dc:	4809      	ldr	r0, [pc, #36]	; (8009404 <DRV_moveBackwardLeft+0x6c>)
 80093de:	f000 fba9 	bl	8009b34 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 80093e2:	68f9      	ldr	r1, [r7, #12]
 80093e4:	4808      	ldr	r0, [pc, #32]	; (8009408 <DRV_moveBackwardLeft+0x70>)
 80093e6:	f000 fba5 	bl	8009b34 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  ,       0);
 80093ea:	2100      	movs	r1, #0
 80093ec:	4809      	ldr	r0, [pc, #36]	; (8009414 <DRV_moveBackwardLeft+0x7c>)
 80093ee:	f000 fba1 	bl	8009b34 <MTR_setSpeed>
  }

  return;
 80093f2:	bf00      	nop
 80093f4:	bf00      	nop
}
 80093f6:	3710      	adds	r7, #16
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}
 80093fc:	0800b72c 	.word	0x0800b72c
 8009400:	200000dd 	.word	0x200000dd
 8009404:	200001c4 	.word	0x200001c4
 8009408:	2000020c 	.word	0x2000020c
 800940c:	200000dc 	.word	0x200000dc
 8009410:	200001a0 	.word	0x200001a0
 8009414:	200001e8 	.word	0x200001e8

08009418 <DRV_turnLeft>:

static void DRV_turnLeft(uint32_t p_speed)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b084      	sub	sp, #16
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	60fb      	str	r3, [r7, #12]

  LOG_debug("Turning left @%u", l_speed);
 8009424:	68fa      	ldr	r2, [r7, #12]
 8009426:	4919      	ldr	r1, [pc, #100]	; (800948c <DRV_turnLeft+0x74>)
 8009428:	2000      	movs	r0, #0
 800942a:	f000 fa8b 	bl	8009944 <LOG_log>

  g_DRV_isActive = true;
 800942e:	4b18      	ldr	r3, [pc, #96]	; (8009490 <DRV_turnLeft+0x78>)
 8009430:	2201      	movs	r2, #1
 8009432:	701a      	strb	r2, [r3, #0]

  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_FORWARD );
 8009434:	2101      	movs	r1, #1
 8009436:	4817      	ldr	r0, [pc, #92]	; (8009494 <DRV_turnLeft+0x7c>)
 8009438:	f000 fb10 	bl	8009a5c <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorFrontLeft , MTR_DIRECTION_BACKWARD);
 800943c:	2102      	movs	r1, #2
 800943e:	4816      	ldr	r0, [pc, #88]	; (8009498 <DRV_turnLeft+0x80>)
 8009440:	f000 fb0c 	bl	8009a5c <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight , MTR_DIRECTION_FORWARD );
 8009444:	2101      	movs	r1, #1
 8009446:	4815      	ldr	r0, [pc, #84]	; (800949c <DRV_turnLeft+0x84>)
 8009448:	f000 fb08 	bl	8009a5c <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_BACKWARD);
 800944c:	2102      	movs	r1, #2
 800944e:	4814      	ldr	r0, [pc, #80]	; (80094a0 <DRV_turnLeft+0x88>)
 8009450:	f000 fb04 	bl	8009a5c <MTR_setDirection>

  if (g_DRV_areMotorsOn == false)
 8009454:	4b13      	ldr	r3, [pc, #76]	; (80094a4 <DRV_turnLeft+0x8c>)
 8009456:	781b      	ldrb	r3, [r3, #0]
 8009458:	f083 0301 	eor.w	r3, r3, #1
 800945c:	b2db      	uxtb	r3, r3
 800945e:	2b00      	cmp	r3, #0
 8009460:	d110      	bne.n	8009484 <DRV_turnLeft+0x6c>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 8009462:	68f9      	ldr	r1, [r7, #12]
 8009464:	480b      	ldr	r0, [pc, #44]	; (8009494 <DRV_turnLeft+0x7c>)
 8009466:	f000 fb65 	bl	8009b34 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 800946a:	68f9      	ldr	r1, [r7, #12]
 800946c:	480a      	ldr	r0, [pc, #40]	; (8009498 <DRV_turnLeft+0x80>)
 800946e:	f000 fb61 	bl	8009b34 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 8009472:	68f9      	ldr	r1, [r7, #12]
 8009474:	4809      	ldr	r0, [pc, #36]	; (800949c <DRV_turnLeft+0x84>)
 8009476:	f000 fb5d 	bl	8009b34 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 800947a:	68f9      	ldr	r1, [r7, #12]
 800947c:	4808      	ldr	r0, [pc, #32]	; (80094a0 <DRV_turnLeft+0x88>)
 800947e:	f000 fb59 	bl	8009b34 <MTR_setSpeed>
  }

  return;
 8009482:	bf00      	nop
 8009484:	bf00      	nop
}
 8009486:	3710      	adds	r7, #16
 8009488:	46bd      	mov	sp, r7
 800948a:	bd80      	pop	{r7, pc}
 800948c:	0800b748 	.word	0x0800b748
 8009490:	200000dd 	.word	0x200000dd
 8009494:	200001a0 	.word	0x200001a0
 8009498:	200001c4 	.word	0x200001c4
 800949c:	2000020c 	.word	0x2000020c
 80094a0:	200001e8 	.word	0x200001e8
 80094a4:	200000dc 	.word	0x200000dc

080094a8 <DRV_turnRight>:

static void DRV_turnRight(uint32_t p_speed)
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b084      	sub	sp, #16
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	60fb      	str	r3, [r7, #12]

  LOG_debug("Turning right @%u", l_speed);
 80094b4:	68fa      	ldr	r2, [r7, #12]
 80094b6:	4919      	ldr	r1, [pc, #100]	; (800951c <DRV_turnRight+0x74>)
 80094b8:	2000      	movs	r0, #0
 80094ba:	f000 fa43 	bl	8009944 <LOG_log>

  g_DRV_isActive = true;
 80094be:	4b18      	ldr	r3, [pc, #96]	; (8009520 <DRV_turnRight+0x78>)
 80094c0:	2201      	movs	r2, #1
 80094c2:	701a      	strb	r2, [r3, #0]

  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_BACKWARD);
 80094c4:	2102      	movs	r1, #2
 80094c6:	4817      	ldr	r0, [pc, #92]	; (8009524 <DRV_turnRight+0x7c>)
 80094c8:	f000 fac8 	bl	8009a5c <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorFrontLeft , MTR_DIRECTION_FORWARD );
 80094cc:	2101      	movs	r1, #1
 80094ce:	4816      	ldr	r0, [pc, #88]	; (8009528 <DRV_turnRight+0x80>)
 80094d0:	f000 fac4 	bl	8009a5c <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight , MTR_DIRECTION_BACKWARD);
 80094d4:	2102      	movs	r1, #2
 80094d6:	4815      	ldr	r0, [pc, #84]	; (800952c <DRV_turnRight+0x84>)
 80094d8:	f000 fac0 	bl	8009a5c <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_FORWARD );
 80094dc:	2101      	movs	r1, #1
 80094de:	4814      	ldr	r0, [pc, #80]	; (8009530 <DRV_turnRight+0x88>)
 80094e0:	f000 fabc 	bl	8009a5c <MTR_setDirection>

  if (g_DRV_areMotorsOn == false)
 80094e4:	4b13      	ldr	r3, [pc, #76]	; (8009534 <DRV_turnRight+0x8c>)
 80094e6:	781b      	ldrb	r3, [r3, #0]
 80094e8:	f083 0301 	eor.w	r3, r3, #1
 80094ec:	b2db      	uxtb	r3, r3
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d110      	bne.n	8009514 <DRV_turnRight+0x6c>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 80094f2:	68f9      	ldr	r1, [r7, #12]
 80094f4:	480b      	ldr	r0, [pc, #44]	; (8009524 <DRV_turnRight+0x7c>)
 80094f6:	f000 fb1d 	bl	8009b34 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 80094fa:	68f9      	ldr	r1, [r7, #12]
 80094fc:	480a      	ldr	r0, [pc, #40]	; (8009528 <DRV_turnRight+0x80>)
 80094fe:	f000 fb19 	bl	8009b34 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 8009502:	68f9      	ldr	r1, [r7, #12]
 8009504:	4809      	ldr	r0, [pc, #36]	; (800952c <DRV_turnRight+0x84>)
 8009506:	f000 fb15 	bl	8009b34 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 800950a:	68f9      	ldr	r1, [r7, #12]
 800950c:	4808      	ldr	r0, [pc, #32]	; (8009530 <DRV_turnRight+0x88>)
 800950e:	f000 fb11 	bl	8009b34 <MTR_setSpeed>
  }

  return;
 8009512:	bf00      	nop
 8009514:	bf00      	nop
}
 8009516:	3710      	adds	r7, #16
 8009518:	46bd      	mov	sp, r7
 800951a:	bd80      	pop	{r7, pc}
 800951c:	0800b75c 	.word	0x0800b75c
 8009520:	200000dd 	.word	0x200000dd
 8009524:	200001a0 	.word	0x200001a0
 8009528:	200001c4 	.word	0x200001c4
 800952c:	2000020c 	.word	0x2000020c
 8009530:	200001e8 	.word	0x200001e8
 8009534:	200000dc 	.word	0x200000dc

08009538 <DRV_translateLeft>:

static void DRV_translateLeft(uint32_t p_speed)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b084      	sub	sp, #16
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	60fb      	str	r3, [r7, #12]

  LOG_debug("Translating left @%u", l_speed);
 8009544:	68fa      	ldr	r2, [r7, #12]
 8009546:	4919      	ldr	r1, [pc, #100]	; (80095ac <DRV_translateLeft+0x74>)
 8009548:	2000      	movs	r0, #0
 800954a:	f000 f9fb 	bl	8009944 <LOG_log>

  g_DRV_isActive = true;
 800954e:	4b18      	ldr	r3, [pc, #96]	; (80095b0 <DRV_translateLeft+0x78>)
 8009550:	2201      	movs	r2, #1
 8009552:	701a      	strb	r2, [r3, #0]

  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_FORWARD );
 8009554:	2101      	movs	r1, #1
 8009556:	4817      	ldr	r0, [pc, #92]	; (80095b4 <DRV_translateLeft+0x7c>)
 8009558:	f000 fa80 	bl	8009a5c <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorFrontLeft , MTR_DIRECTION_BACKWARD);
 800955c:	2102      	movs	r1, #2
 800955e:	4816      	ldr	r0, [pc, #88]	; (80095b8 <DRV_translateLeft+0x80>)
 8009560:	f000 fa7c 	bl	8009a5c <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight , MTR_DIRECTION_BACKWARD);
 8009564:	2102      	movs	r1, #2
 8009566:	4815      	ldr	r0, [pc, #84]	; (80095bc <DRV_translateLeft+0x84>)
 8009568:	f000 fa78 	bl	8009a5c <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_FORWARD );
 800956c:	2101      	movs	r1, #1
 800956e:	4814      	ldr	r0, [pc, #80]	; (80095c0 <DRV_translateLeft+0x88>)
 8009570:	f000 fa74 	bl	8009a5c <MTR_setDirection>

  if (g_DRV_areMotorsOn == false)
 8009574:	4b13      	ldr	r3, [pc, #76]	; (80095c4 <DRV_translateLeft+0x8c>)
 8009576:	781b      	ldrb	r3, [r3, #0]
 8009578:	f083 0301 	eor.w	r3, r3, #1
 800957c:	b2db      	uxtb	r3, r3
 800957e:	2b00      	cmp	r3, #0
 8009580:	d110      	bne.n	80095a4 <DRV_translateLeft+0x6c>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 8009582:	68f9      	ldr	r1, [r7, #12]
 8009584:	480b      	ldr	r0, [pc, #44]	; (80095b4 <DRV_translateLeft+0x7c>)
 8009586:	f000 fad5 	bl	8009b34 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 800958a:	68f9      	ldr	r1, [r7, #12]
 800958c:	480a      	ldr	r0, [pc, #40]	; (80095b8 <DRV_translateLeft+0x80>)
 800958e:	f000 fad1 	bl	8009b34 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 8009592:	68f9      	ldr	r1, [r7, #12]
 8009594:	4809      	ldr	r0, [pc, #36]	; (80095bc <DRV_translateLeft+0x84>)
 8009596:	f000 facd 	bl	8009b34 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 800959a:	68f9      	ldr	r1, [r7, #12]
 800959c:	4808      	ldr	r0, [pc, #32]	; (80095c0 <DRV_translateLeft+0x88>)
 800959e:	f000 fac9 	bl	8009b34 <MTR_setSpeed>
  }

  return;
 80095a2:	bf00      	nop
 80095a4:	bf00      	nop
}
 80095a6:	3710      	adds	r7, #16
 80095a8:	46bd      	mov	sp, r7
 80095aa:	bd80      	pop	{r7, pc}
 80095ac:	0800b770 	.word	0x0800b770
 80095b0:	200000dd 	.word	0x200000dd
 80095b4:	200001a0 	.word	0x200001a0
 80095b8:	200001c4 	.word	0x200001c4
 80095bc:	2000020c 	.word	0x2000020c
 80095c0:	200001e8 	.word	0x200001e8
 80095c4:	200000dc 	.word	0x200000dc

080095c8 <DRV_translateRight>:

static void DRV_translateRight(uint32_t p_speed)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b084      	sub	sp, #16
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	60fb      	str	r3, [r7, #12]

  LOG_debug("Translating right @%u", l_speed);
 80095d4:	68fa      	ldr	r2, [r7, #12]
 80095d6:	4919      	ldr	r1, [pc, #100]	; (800963c <DRV_translateRight+0x74>)
 80095d8:	2000      	movs	r0, #0
 80095da:	f000 f9b3 	bl	8009944 <LOG_log>

  g_DRV_isActive = true;
 80095de:	4b18      	ldr	r3, [pc, #96]	; (8009640 <DRV_translateRight+0x78>)
 80095e0:	2201      	movs	r2, #1
 80095e2:	701a      	strb	r2, [r3, #0]

  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_BACKWARD);
 80095e4:	2102      	movs	r1, #2
 80095e6:	4817      	ldr	r0, [pc, #92]	; (8009644 <DRV_translateRight+0x7c>)
 80095e8:	f000 fa38 	bl	8009a5c <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorFrontLeft , MTR_DIRECTION_FORWARD );
 80095ec:	2101      	movs	r1, #1
 80095ee:	4816      	ldr	r0, [pc, #88]	; (8009648 <DRV_translateRight+0x80>)
 80095f0:	f000 fa34 	bl	8009a5c <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight , MTR_DIRECTION_FORWARD );
 80095f4:	2101      	movs	r1, #1
 80095f6:	4815      	ldr	r0, [pc, #84]	; (800964c <DRV_translateRight+0x84>)
 80095f8:	f000 fa30 	bl	8009a5c <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_BACKWARD);
 80095fc:	2102      	movs	r1, #2
 80095fe:	4814      	ldr	r0, [pc, #80]	; (8009650 <DRV_translateRight+0x88>)
 8009600:	f000 fa2c 	bl	8009a5c <MTR_setDirection>

  if (g_DRV_areMotorsOn == false)
 8009604:	4b13      	ldr	r3, [pc, #76]	; (8009654 <DRV_translateRight+0x8c>)
 8009606:	781b      	ldrb	r3, [r3, #0]
 8009608:	f083 0301 	eor.w	r3, r3, #1
 800960c:	b2db      	uxtb	r3, r3
 800960e:	2b00      	cmp	r3, #0
 8009610:	d110      	bne.n	8009634 <DRV_translateRight+0x6c>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 8009612:	68f9      	ldr	r1, [r7, #12]
 8009614:	480b      	ldr	r0, [pc, #44]	; (8009644 <DRV_translateRight+0x7c>)
 8009616:	f000 fa8d 	bl	8009b34 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 800961a:	68f9      	ldr	r1, [r7, #12]
 800961c:	480a      	ldr	r0, [pc, #40]	; (8009648 <DRV_translateRight+0x80>)
 800961e:	f000 fa89 	bl	8009b34 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 8009622:	68f9      	ldr	r1, [r7, #12]
 8009624:	4809      	ldr	r0, [pc, #36]	; (800964c <DRV_translateRight+0x84>)
 8009626:	f000 fa85 	bl	8009b34 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 800962a:	68f9      	ldr	r1, [r7, #12]
 800962c:	4808      	ldr	r0, [pc, #32]	; (8009650 <DRV_translateRight+0x88>)
 800962e:	f000 fa81 	bl	8009b34 <MTR_setSpeed>
  }

  return;
 8009632:	bf00      	nop
 8009634:	bf00      	nop
}
 8009636:	3710      	adds	r7, #16
 8009638:	46bd      	mov	sp, r7
 800963a:	bd80      	pop	{r7, pc}
 800963c:	0800b788 	.word	0x0800b788
 8009640:	200000dd 	.word	0x200000dd
 8009644:	200001a0 	.word	0x200001a0
 8009648:	200001c4 	.word	0x200001c4
 800964c:	2000020c 	.word	0x2000020c
 8009650:	200001e8 	.word	0x200001e8
 8009654:	200000dc 	.word	0x200000dc

08009658 <ENC_init>:
#include "encoder.h"

#include "log.h"

void ENC_init(T_ENC_Handle *p_handle, char *p_name, bool p_invertOnUpdate, TIM_HandleTypeDef *p_encoderTimerHandle)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b084      	sub	sp, #16
 800965c:	af00      	add	r7, sp, #0
 800965e:	60f8      	str	r0, [r7, #12]
 8009660:	60b9      	str	r1, [r7, #8]
 8009662:	603b      	str	r3, [r7, #0]
 8009664:	4613      	mov	r3, r2
 8009666:	71fb      	strb	r3, [r7, #7]
  LOG_info("Initializing Encoder module for %s", p_name);
 8009668:	68ba      	ldr	r2, [r7, #8]
 800966a:	490a      	ldr	r1, [pc, #40]	; (8009694 <ENC_init+0x3c>)
 800966c:	2001      	movs	r0, #1
 800966e:	f000 f969 	bl	8009944 <LOG_log>

  p_handle->name           = p_name;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	68ba      	ldr	r2, [r7, #8]
 8009676:	601a      	str	r2, [r3, #0]
  p_handle->invertOnUpdate = p_invertOnUpdate;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	79fa      	ldrb	r2, [r7, #7]
 800967c:	719a      	strb	r2, [r3, #6]
  p_handle->timerHandle    = p_encoderTimerHandle;
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	683a      	ldr	r2, [r7, #0]
 8009682:	609a      	str	r2, [r3, #8]

  ENC_reset(p_handle);
 8009684:	68f8      	ldr	r0, [r7, #12]
 8009686:	f000 f807 	bl	8009698 <ENC_reset>

  return;
 800968a:	bf00      	nop
}
 800968c:	3710      	adds	r7, #16
 800968e:	46bd      	mov	sp, r7
 8009690:	bd80      	pop	{r7, pc}
 8009692:	bf00      	nop
 8009694:	0800b7a0 	.word	0x0800b7a0

08009698 <ENC_reset>:

void ENC_reset(T_ENC_Handle *p_handle)
{
 8009698:	b480      	push	{r7}
 800969a:	b083      	sub	sp, #12
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
  p_handle->value = 0;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2200      	movs	r2, #0
 80096a4:	809a      	strh	r2, [r3, #4]

  return;
 80096a6:	bf00      	nop
}
 80096a8:	370c      	adds	r7, #12
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bc80      	pop	{r7}
 80096ae:	4770      	bx	lr

080096b0 <ENC_update>:

void ENC_update(T_ENC_Handle *p_handle, int16_t p_value)
{
 80096b0:	b480      	push	{r7}
 80096b2:	b083      	sub	sp, #12
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
 80096b8:	460b      	mov	r3, r1
 80096ba:	807b      	strh	r3, [r7, #2]
  if (p_handle->invertOnUpdate == false)
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	799b      	ldrb	r3, [r3, #6]
 80096c0:	f083 0301 	eor.w	r3, r3, #1
 80096c4:	b2db      	uxtb	r3, r3
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d003      	beq.n	80096d2 <ENC_update+0x22>
  {
    p_handle->value = p_value;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	887a      	ldrh	r2, [r7, #2]
 80096ce:	809a      	strh	r2, [r3, #4]
  else
  {
    p_handle->value = -p_value;
  }

  return;
 80096d0:	e006      	b.n	80096e0 <ENC_update+0x30>
    p_handle->value = -p_value;
 80096d2:	887b      	ldrh	r3, [r7, #2]
 80096d4:	425b      	negs	r3, r3
 80096d6:	b29b      	uxth	r3, r3
 80096d8:	b21a      	sxth	r2, r3
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	809a      	strh	r2, [r3, #4]
  return;
 80096de:	bf00      	nop
}
 80096e0:	370c      	adds	r7, #12
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bc80      	pop	{r7}
 80096e6:	4770      	bx	lr

080096e8 <ENC_getCount>:

int16_t ENC_getCount(T_ENC_Handle *p_handle)
{
 80096e8:	b480      	push	{r7}
 80096ea:	b083      	sub	sp, #12
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
  return p_handle->value;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
}
 80096f6:	4618      	mov	r0, r3
 80096f8:	370c      	adds	r7, #12
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bc80      	pop	{r7}
 80096fe:	4770      	bx	lr

08009700 <LED_setMode>:
#include "log.h"

static T_LED_MODE g_LED_mode = LED_MODE_BLINK_SLOW;

void LED_setMode(T_LED_MODE p_mode)
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b082      	sub	sp, #8
 8009704:	af00      	add	r7, sp, #0
 8009706:	4603      	mov	r3, r0
 8009708:	71fb      	strb	r3, [r7, #7]
  if (p_mode != g_LED_mode)
 800970a:	4b1b      	ldr	r3, [pc, #108]	; (8009778 <LED_setMode+0x78>)
 800970c:	781b      	ldrb	r3, [r3, #0]
 800970e:	79fa      	ldrb	r2, [r7, #7]
 8009710:	429a      	cmp	r2, r3
 8009712:	d02d      	beq.n	8009770 <LED_setMode+0x70>
  {
    switch (p_mode)
 8009714:	79fb      	ldrb	r3, [r7, #7]
 8009716:	2b04      	cmp	r3, #4
 8009718:	d825      	bhi.n	8009766 <LED_setMode+0x66>
 800971a:	a201      	add	r2, pc, #4	; (adr r2, 8009720 <LED_setMode+0x20>)
 800971c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009720:	08009735 	.word	0x08009735
 8009724:	0800973f 	.word	0x0800973f
 8009728:	08009749 	.word	0x08009749
 800972c:	08009753 	.word	0x08009753
 8009730:	0800975d 	.word	0x0800975d
    {
      case LED_MODE_FORCED_OFF:
        LOG_info("Turning LED OFF");
 8009734:	4911      	ldr	r1, [pc, #68]	; (800977c <LED_setMode+0x7c>)
 8009736:	2001      	movs	r0, #1
 8009738:	f000 f904 	bl	8009944 <LOG_log>
        break;
 800973c:	e014      	b.n	8009768 <LED_setMode+0x68>

      case LED_MODE_FORCED_ON:
        LOG_info("Turning LED ON");
 800973e:	4910      	ldr	r1, [pc, #64]	; (8009780 <LED_setMode+0x80>)
 8009740:	2001      	movs	r0, #1
 8009742:	f000 f8ff 	bl	8009944 <LOG_log>
        break;
 8009746:	e00f      	b.n	8009768 <LED_setMode+0x68>

      case LED_MODE_BLINK_SLOW:
        LOG_info("Setting LED to blink slow");
 8009748:	490e      	ldr	r1, [pc, #56]	; (8009784 <LED_setMode+0x84>)
 800974a:	2001      	movs	r0, #1
 800974c:	f000 f8fa 	bl	8009944 <LOG_log>
        break;
 8009750:	e00a      	b.n	8009768 <LED_setMode+0x68>

      case LED_MODE_BLINK_MEDIUM:
        LOG_info("Setting LED to blink medium");
 8009752:	490d      	ldr	r1, [pc, #52]	; (8009788 <LED_setMode+0x88>)
 8009754:	2001      	movs	r0, #1
 8009756:	f000 f8f5 	bl	8009944 <LOG_log>
        break;
 800975a:	e005      	b.n	8009768 <LED_setMode+0x68>

      case LED_MODE_BLINK_FAST:
        LOG_info("Setting LED to blink fast");
 800975c:	490b      	ldr	r1, [pc, #44]	; (800978c <LED_setMode+0x8c>)
 800975e:	2001      	movs	r0, #1
 8009760:	f000 f8f0 	bl	8009944 <LOG_log>
        break;
 8009764:	e000      	b.n	8009768 <LED_setMode+0x68>

      default:
        ; /* Nothing to do */
        break;
 8009766:	bf00      	nop
    }

    g_LED_mode = p_mode;
 8009768:	4a03      	ldr	r2, [pc, #12]	; (8009778 <LED_setMode+0x78>)
 800976a:	79fb      	ldrb	r3, [r7, #7]
 800976c:	7013      	strb	r3, [r2, #0]
  else
  {
    ; /* Nothong to do */
  }

  return;
 800976e:	bf00      	nop
 8009770:	bf00      	nop
}
 8009772:	3708      	adds	r7, #8
 8009774:	46bd      	mov	sp, r7
 8009776:	bd80      	pop	{r7, pc}
 8009778:	20000009 	.word	0x20000009
 800977c:	0800b7c4 	.word	0x0800b7c4
 8009780:	0800b7d4 	.word	0x0800b7d4
 8009784:	0800b7e4 	.word	0x0800b7e4
 8009788:	0800b800 	.word	0x0800b800
 800978c:	0800b81c 	.word	0x0800b81c

08009790 <LED_update>:
{
  return g_LED_mode;
}

void LED_update(void)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	af00      	add	r7, sp, #0
  static uint32_t l_blinkCounter = 0;

  switch (g_LED_mode)
 8009794:	4b2a      	ldr	r3, [pc, #168]	; (8009840 <LED_update+0xb0>)
 8009796:	781b      	ldrb	r3, [r3, #0]
 8009798:	2b04      	cmp	r3, #4
 800979a:	d849      	bhi.n	8009830 <LED_update+0xa0>
 800979c:	a201      	add	r2, pc, #4	; (adr r2, 80097a4 <LED_update+0x14>)
 800979e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097a2:	bf00      	nop
 80097a4:	080097b9 	.word	0x080097b9
 80097a8:	080097c7 	.word	0x080097c7
 80097ac:	080097d5 	.word	0x080097d5
 80097b0:	08009803 	.word	0x08009803
 80097b4:	08009825 	.word	0x08009825
  {
    case LED_MODE_FORCED_OFF:
      HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_SET);
 80097b8:	2201      	movs	r2, #1
 80097ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80097be:	4821      	ldr	r0, [pc, #132]	; (8009844 <LED_update+0xb4>)
 80097c0:	f7f9 ff4e 	bl	8003660 <HAL_GPIO_WritePin>
      break;
 80097c4:	e039      	b.n	800983a <LED_update+0xaa>

    case LED_MODE_FORCED_ON:
      HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 80097c6:	2200      	movs	r2, #0
 80097c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80097cc:	481d      	ldr	r0, [pc, #116]	; (8009844 <LED_update+0xb4>)
 80097ce:	f7f9 ff47 	bl	8003660 <HAL_GPIO_WritePin>
      break;
 80097d2:	e032      	b.n	800983a <LED_update+0xaa>

    case LED_MODE_BLINK_SLOW:
      l_blinkCounter++;
 80097d4:	4b1c      	ldr	r3, [pc, #112]	; (8009848 <LED_update+0xb8>)
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	3301      	adds	r3, #1
 80097da:	4a1b      	ldr	r2, [pc, #108]	; (8009848 <LED_update+0xb8>)
 80097dc:	6013      	str	r3, [r2, #0]
      if (l_blinkCounter % 5 == 0)
 80097de:	4b1a      	ldr	r3, [pc, #104]	; (8009848 <LED_update+0xb8>)
 80097e0:	6819      	ldr	r1, [r3, #0]
 80097e2:	4b1a      	ldr	r3, [pc, #104]	; (800984c <LED_update+0xbc>)
 80097e4:	fba3 2301 	umull	r2, r3, r3, r1
 80097e8:	089a      	lsrs	r2, r3, #2
 80097ea:	4613      	mov	r3, r2
 80097ec:	009b      	lsls	r3, r3, #2
 80097ee:	4413      	add	r3, r2
 80097f0:	1aca      	subs	r2, r1, r3
 80097f2:	2a00      	cmp	r2, #0
 80097f4:	d11e      	bne.n	8009834 <LED_update+0xa4>
      {
        HAL_GPIO_TogglePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
 80097f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80097fa:	4812      	ldr	r0, [pc, #72]	; (8009844 <LED_update+0xb4>)
 80097fc:	f7f9 ff62 	bl	80036c4 <HAL_GPIO_TogglePin>
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 8009800:	e018      	b.n	8009834 <LED_update+0xa4>

    case LED_MODE_BLINK_MEDIUM:
      l_blinkCounter++;
 8009802:	4b11      	ldr	r3, [pc, #68]	; (8009848 <LED_update+0xb8>)
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	3301      	adds	r3, #1
 8009808:	4a0f      	ldr	r2, [pc, #60]	; (8009848 <LED_update+0xb8>)
 800980a:	6013      	str	r3, [r2, #0]
      if (l_blinkCounter % 2 == 0)
 800980c:	4b0e      	ldr	r3, [pc, #56]	; (8009848 <LED_update+0xb8>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	f003 0301 	and.w	r3, r3, #1
 8009814:	2b00      	cmp	r3, #0
 8009816:	d10f      	bne.n	8009838 <LED_update+0xa8>
      {
        HAL_GPIO_TogglePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
 8009818:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800981c:	4809      	ldr	r0, [pc, #36]	; (8009844 <LED_update+0xb4>)
 800981e:	f7f9 ff51 	bl	80036c4 <HAL_GPIO_TogglePin>
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 8009822:	e009      	b.n	8009838 <LED_update+0xa8>

    case LED_MODE_BLINK_FAST:
      HAL_GPIO_TogglePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
 8009824:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009828:	4806      	ldr	r0, [pc, #24]	; (8009844 <LED_update+0xb4>)
 800982a:	f7f9 ff4b 	bl	80036c4 <HAL_GPIO_TogglePin>
      break;
 800982e:	e004      	b.n	800983a <LED_update+0xaa>

    default:
      ; /* Nothing to do */
      break;
 8009830:	bf00      	nop
 8009832:	e002      	b.n	800983a <LED_update+0xaa>
      break;
 8009834:	bf00      	nop
 8009836:	e000      	b.n	800983a <LED_update+0xaa>
      break;
 8009838:	bf00      	nop
  }

  return;
 800983a:	bf00      	nop
}
 800983c:	bd80      	pop	{r7, pc}
 800983e:	bf00      	nop
 8009840:	20000009 	.word	0x20000009
 8009844:	40011000 	.word	0x40011000
 8009848:	20000260 	.word	0x20000260
 800984c:	cccccccd 	.word	0xcccccccd

08009850 <LOG_init>:
{
  "DEBUG", "INFO", "WARNING", "ERROR"
};

void LOG_init(RTC_HandleTypeDef *p_rctHandle)
{
 8009850:	b480      	push	{r7}
 8009852:	b083      	sub	sp, #12
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
  g_LOG_rtcHandle = p_rctHandle;
 8009858:	4a03      	ldr	r2, [pc, #12]	; (8009868 <LOG_init+0x18>)
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6013      	str	r3, [r2, #0]

  return;
 800985e:	bf00      	nop
}
 8009860:	370c      	adds	r7, #12
 8009862:	46bd      	mov	sp, r7
 8009864:	bc80      	pop	{r7}
 8009866:	4770      	bx	lr
 8009868:	20000268 	.word	0x20000268

0800986c <LOG_turnOn>:

void LOG_turnOn(void)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	af00      	add	r7, sp, #0
  if (g_LOG_isOn == false)
 8009870:	4b08      	ldr	r3, [pc, #32]	; (8009894 <LOG_turnOn+0x28>)
 8009872:	781b      	ldrb	r3, [r3, #0]
 8009874:	f083 0301 	eor.w	r3, r3, #1
 8009878:	b2db      	uxtb	r3, r3
 800987a:	2b00      	cmp	r3, #0
 800987c:	d007      	beq.n	800988e <LOG_turnOn+0x22>
  {
    g_LOG_isOn = true;
 800987e:	4b05      	ldr	r3, [pc, #20]	; (8009894 <LOG_turnOn+0x28>)
 8009880:	2201      	movs	r2, #1
 8009882:	701a      	strb	r2, [r3, #0]

    LOG_info("Turning LOG ON");
 8009884:	4904      	ldr	r1, [pc, #16]	; (8009898 <LOG_turnOn+0x2c>)
 8009886:	2001      	movs	r0, #1
 8009888:	f000 f85c 	bl	8009944 <LOG_log>
  else
  {
    ; /* Nothing to do */
  }

  return;
 800988c:	bf00      	nop
 800988e:	bf00      	nop
}
 8009890:	bd80      	pop	{r7, pc}
 8009892:	bf00      	nop
 8009894:	20000264 	.word	0x20000264
 8009898:	0800b858 	.word	0x0800b858

0800989c <LOG_turnOff>:

void LOG_turnOff(void)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	af00      	add	r7, sp, #0
  if (g_LOG_isOn == true)
 80098a0:	4b06      	ldr	r3, [pc, #24]	; (80098bc <LOG_turnOff+0x20>)
 80098a2:	781b      	ldrb	r3, [r3, #0]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d007      	beq.n	80098b8 <LOG_turnOff+0x1c>
  {
    LOG_info("Turning LOG OFF");
 80098a8:	4905      	ldr	r1, [pc, #20]	; (80098c0 <LOG_turnOff+0x24>)
 80098aa:	2001      	movs	r0, #1
 80098ac:	f000 f84a 	bl	8009944 <LOG_log>

    g_LOG_isOn = false;
 80098b0:	4b02      	ldr	r3, [pc, #8]	; (80098bc <LOG_turnOff+0x20>)
 80098b2:	2200      	movs	r2, #0
 80098b4:	701a      	strb	r2, [r3, #0]
  else
  {
    ; /* Nothing to do */
  }

  return;
 80098b6:	bf00      	nop
 80098b8:	bf00      	nop
}
 80098ba:	bd80      	pop	{r7, pc}
 80098bc:	20000264 	.word	0x20000264
 80098c0:	0800b868 	.word	0x0800b868

080098c4 <LOG_setLevel>:

void LOG_setLevel(T_LOG_LEVEL p_level)
{
 80098c4:	b480      	push	{r7}
 80098c6:	b083      	sub	sp, #12
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	4603      	mov	r3, r0
 80098cc:	71fb      	strb	r3, [r7, #7]
  g_LOG_level = p_level;
 80098ce:	4a04      	ldr	r2, [pc, #16]	; (80098e0 <LOG_setLevel+0x1c>)
 80098d0:	79fb      	ldrb	r3, [r7, #7]
 80098d2:	7013      	strb	r3, [r2, #0]

  return;
 80098d4:	bf00      	nop
}
 80098d6:	370c      	adds	r7, #12
 80098d8:	46bd      	mov	sp, r7
 80098da:	bc80      	pop	{r7}
 80098dc:	4770      	bx	lr
 80098de:	bf00      	nop
 80098e0:	20000265 	.word	0x20000265

080098e4 <LOG_increaseLevel>:

void LOG_increaseLevel(void)
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	af00      	add	r7, sp, #0
  /* Display more detailed logs */
  if (g_LOG_level > LOG_LEVEL_DEBUG)
 80098e8:	4b08      	ldr	r3, [pc, #32]	; (800990c <LOG_increaseLevel+0x28>)
 80098ea:	781b      	ldrb	r3, [r3, #0]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d00a      	beq.n	8009906 <LOG_increaseLevel+0x22>
  {
    LOG_info("Increasing LOG level");
 80098f0:	4907      	ldr	r1, [pc, #28]	; (8009910 <LOG_increaseLevel+0x2c>)
 80098f2:	2001      	movs	r0, #1
 80098f4:	f000 f826 	bl	8009944 <LOG_log>

    g_LOG_level--;
 80098f8:	4b04      	ldr	r3, [pc, #16]	; (800990c <LOG_increaseLevel+0x28>)
 80098fa:	781b      	ldrb	r3, [r3, #0]
 80098fc:	3b01      	subs	r3, #1
 80098fe:	b2da      	uxtb	r2, r3
 8009900:	4b02      	ldr	r3, [pc, #8]	; (800990c <LOG_increaseLevel+0x28>)
 8009902:	701a      	strb	r2, [r3, #0]
  else
  {
    ; /* Nothing to do */
  }

  return;
 8009904:	bf00      	nop
 8009906:	bf00      	nop
}
 8009908:	bd80      	pop	{r7, pc}
 800990a:	bf00      	nop
 800990c:	20000265 	.word	0x20000265
 8009910:	0800b878 	.word	0x0800b878

08009914 <LOG_decreaseLevel>:

void LOG_decreaseLevel(void)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	af00      	add	r7, sp, #0
  /* Display less detailed logs */
  if (g_LOG_level < LOG_LEVEL_ERROR)
 8009918:	4b08      	ldr	r3, [pc, #32]	; (800993c <LOG_decreaseLevel+0x28>)
 800991a:	781b      	ldrb	r3, [r3, #0]
 800991c:	2b02      	cmp	r3, #2
 800991e:	d80a      	bhi.n	8009936 <LOG_decreaseLevel+0x22>
  {
    LOG_info("Decreasing LOG level");
 8009920:	4907      	ldr	r1, [pc, #28]	; (8009940 <LOG_decreaseLevel+0x2c>)
 8009922:	2001      	movs	r0, #1
 8009924:	f000 f80e 	bl	8009944 <LOG_log>

    g_LOG_level++;
 8009928:	4b04      	ldr	r3, [pc, #16]	; (800993c <LOG_decreaseLevel+0x28>)
 800992a:	781b      	ldrb	r3, [r3, #0]
 800992c:	3301      	adds	r3, #1
 800992e:	b2da      	uxtb	r2, r3
 8009930:	4b02      	ldr	r3, [pc, #8]	; (800993c <LOG_decreaseLevel+0x28>)
 8009932:	701a      	strb	r2, [r3, #0]
  else
  {
    ; /* Nothing to do */
  }

  return;
 8009934:	bf00      	nop
 8009936:	bf00      	nop
}
 8009938:	bd80      	pop	{r7, pc}
 800993a:	bf00      	nop
 800993c:	20000265 	.word	0x20000265
 8009940:	0800b890 	.word	0x0800b890

08009944 <LOG_log>:

void LOG_log(T_LOG_LEVEL p_level, const char *p_format, ...)
{
 8009944:	b40e      	push	{r1, r2, r3}
 8009946:	b580      	push	{r7, lr}
 8009948:	b089      	sub	sp, #36	; 0x24
 800994a:	af02      	add	r7, sp, #8
 800994c:	4603      	mov	r3, r0
 800994e:	71fb      	strb	r3, [r7, #7]
  va_list         l_argumentsList;
  RTC_TimeTypeDef l_time;
  RTC_DateTypeDef l_date;

  if ((g_LOG_isOn == true) && (p_level >= g_LOG_level))
 8009950:	4b1c      	ldr	r3, [pc, #112]	; (80099c4 <LOG_log+0x80>)
 8009952:	781b      	ldrb	r3, [r3, #0]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d02d      	beq.n	80099b4 <LOG_log+0x70>
 8009958:	4b1b      	ldr	r3, [pc, #108]	; (80099c8 <LOG_log+0x84>)
 800995a:	781b      	ldrb	r3, [r3, #0]
 800995c:	79fa      	ldrb	r2, [r7, #7]
 800995e:	429a      	cmp	r2, r3
 8009960:	d328      	bcc.n	80099b4 <LOG_log+0x70>
  {
    HAL_RTC_GetTime(g_LOG_rtcHandle, &l_time, RTC_FORMAT_BCD);
 8009962:	4b1a      	ldr	r3, [pc, #104]	; (80099cc <LOG_log+0x88>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	f107 0110 	add.w	r1, r7, #16
 800996a:	2201      	movs	r2, #1
 800996c:	4618      	mov	r0, r3
 800996e:	f7fb f859 	bl	8004a24 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(g_LOG_rtcHandle, &l_date, RTC_FORMAT_BCD);
 8009972:	4b16      	ldr	r3, [pc, #88]	; (80099cc <LOG_log+0x88>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	f107 010c 	add.w	r1, r7, #12
 800997a:	2201      	movs	r2, #1
 800997c:	4618      	mov	r0, r3
 800997e:	f7fb fa55 	bl	8004e2c <HAL_RTC_GetDate>

    va_start(l_argumentsList, p_format);
 8009982:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009986:	617b      	str	r3, [r7, #20]

    (void)printf("%-7s - %02x:%02x:%02x - ", g_LOG_levelStrings[p_level], l_time.Hours, l_time.Minutes, l_time.Seconds);
 8009988:	79fb      	ldrb	r3, [r7, #7]
 800998a:	4a11      	ldr	r2, [pc, #68]	; (80099d0 <LOG_log+0x8c>)
 800998c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009990:	7c3b      	ldrb	r3, [r7, #16]
 8009992:	461a      	mov	r2, r3
 8009994:	7c7b      	ldrb	r3, [r7, #17]
 8009996:	4618      	mov	r0, r3
 8009998:	7cbb      	ldrb	r3, [r7, #18]
 800999a:	9300      	str	r3, [sp, #0]
 800999c:	4603      	mov	r3, r0
 800999e:	480d      	ldr	r0, [pc, #52]	; (80099d4 <LOG_log+0x90>)
 80099a0:	f000 fa9a 	bl	8009ed8 <iprintf>
    (void)vprintf(p_format, l_argumentsList);
 80099a4:	6979      	ldr	r1, [r7, #20]
 80099a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80099a8:	f000 fb24 	bl	8009ff4 <viprintf>
    (void)printf("\r\n");
 80099ac:	480a      	ldr	r0, [pc, #40]	; (80099d8 <LOG_log+0x94>)
 80099ae:	f000 fb19 	bl	8009fe4 <puts>
  else
  {
    ; /* Nothing to do */
  }

  return;
 80099b2:	bf00      	nop
 80099b4:	bf00      	nop
}
 80099b6:	371c      	adds	r7, #28
 80099b8:	46bd      	mov	sp, r7
 80099ba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80099be:	b003      	add	sp, #12
 80099c0:	4770      	bx	lr
 80099c2:	bf00      	nop
 80099c4:	20000264 	.word	0x20000264
 80099c8:	20000265 	.word	0x20000265
 80099cc:	20000268 	.word	0x20000268
 80099d0:	2000000c 	.word	0x2000000c
 80099d4:	0800b8a8 	.word	0x0800b8a8
 80099d8:	0800b8c4 	.word	0x0800b8c4

080099dc <MAS_receiveData>:
#include "stm32f1xx_hal.h"

static uint8_t g_MAS_rxBuffer[12] = {0};

void MAS_receiveData(UART_HandleTypeDef *p_huart)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b082      	sub	sp, #8
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(p_huart, g_MAS_rxBuffer, 1);
 80099e4:	2201      	movs	r2, #1
 80099e6:	4904      	ldr	r1, [pc, #16]	; (80099f8 <MAS_receiveData+0x1c>)
 80099e8:	6878      	ldr	r0, [r7, #4]
 80099ea:	f7fe f8c5 	bl	8007b78 <HAL_UART_Receive_IT>

  return;
 80099ee:	bf00      	nop
}
 80099f0:	3708      	adds	r7, #8
 80099f2:	46bd      	mov	sp, r7
 80099f4:	bd80      	pop	{r7, pc}
 80099f6:	bf00      	nop
 80099f8:	2000026c 	.word	0x2000026c

080099fc <MTR_init>:
              uint32_t           p_dirPin1,
              GPIO_TypeDef      *p_dirPin2Port,
              uint32_t           p_dirPin2,
              TIM_HandleTypeDef *p_pwmTimerHandle,
              uint32_t           p_pwmChannel)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b084      	sub	sp, #16
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	60f8      	str	r0, [r7, #12]
 8009a04:	60b9      	str	r1, [r7, #8]
 8009a06:	607a      	str	r2, [r7, #4]
 8009a08:	603b      	str	r3, [r7, #0]
  LOG_info("Initializing Motor module for %s", p_name);
 8009a0a:	68ba      	ldr	r2, [r7, #8]
 8009a0c:	4912      	ldr	r1, [pc, #72]	; (8009a58 <MTR_init+0x5c>)
 8009a0e:	2001      	movs	r0, #1
 8009a10:	f7ff ff98 	bl	8009944 <LOG_log>

  p_handle->name           = p_name;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	68ba      	ldr	r2, [r7, #8]
 8009a18:	601a      	str	r2, [r3, #0]
  p_handle->dirPin1Port    = p_dirPin1Port;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	687a      	ldr	r2, [r7, #4]
 8009a1e:	605a      	str	r2, [r3, #4]
  p_handle->dirPin1        = p_dirPin1;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	683a      	ldr	r2, [r7, #0]
 8009a24:	609a      	str	r2, [r3, #8]
  p_handle->dirPin2Port    = p_dirPin2Port;
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	69ba      	ldr	r2, [r7, #24]
 8009a2a:	60da      	str	r2, [r3, #12]
  p_handle->dirPin2        = p_dirPin2;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	69fa      	ldr	r2, [r7, #28]
 8009a30:	611a      	str	r2, [r3, #16]
  p_handle->pwmTimerHandle = p_pwmTimerHandle;
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	6a3a      	ldr	r2, [r7, #32]
 8009a36:	61da      	str	r2, [r3, #28]
  p_handle->pwmChannel     = p_pwmChannel;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a3c:	621a      	str	r2, [r3, #32]

  MTR_setDirection(p_handle, MTR_DIRECTION_STOP);
 8009a3e:	2100      	movs	r1, #0
 8009a40:	68f8      	ldr	r0, [r7, #12]
 8009a42:	f000 f80b 	bl	8009a5c <MTR_setDirection>
  MTR_setSpeed    (p_handle, 0                 );
 8009a46:	2100      	movs	r1, #0
 8009a48:	68f8      	ldr	r0, [r7, #12]
 8009a4a:	f000 f873 	bl	8009b34 <MTR_setSpeed>

  return;
 8009a4e:	bf00      	nop
}
 8009a50:	3710      	adds	r7, #16
 8009a52:	46bd      	mov	sp, r7
 8009a54:	bd80      	pop	{r7, pc}
 8009a56:	bf00      	nop
 8009a58:	0800b8c8 	.word	0x0800b8c8

08009a5c <MTR_setDirection>:

void MTR_setDirection(T_MTR_Handle *p_handle, T_MTR_DIRECTION p_direction)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b082      	sub	sp, #8
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
 8009a64:	460b      	mov	r3, r1
 8009a66:	70fb      	strb	r3, [r7, #3]
  if (p_direction == p_handle->direction)
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	7d1b      	ldrb	r3, [r3, #20]
 8009a6c:	78fa      	ldrb	r2, [r7, #3]
 8009a6e:	429a      	cmp	r2, r3
 8009a70:	d056      	beq.n	8009b20 <MTR_setDirection+0xc4>
  {
    ; /* Nothing to do */
  }
  else
  {
    if (p_direction == MTR_DIRECTION_STOP)
 8009a72:	78fb      	ldrb	r3, [r7, #3]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d119      	bne.n	8009aac <MTR_setDirection+0x50>
    {
      LOG_debug("%s motor STOP", p_handle->name);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	461a      	mov	r2, r3
 8009a7e:	492a      	ldr	r1, [pc, #168]	; (8009b28 <MTR_setDirection+0xcc>)
 8009a80:	2000      	movs	r0, #0
 8009a82:	f7ff ff5f 	bl	8009944 <LOG_log>

      HAL_GPIO_WritePin(p_handle->dirPin1Port, p_handle->dirPin1, GPIO_PIN_RESET);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6858      	ldr	r0, [r3, #4]
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	689b      	ldr	r3, [r3, #8]
 8009a8e:	b29b      	uxth	r3, r3
 8009a90:	2200      	movs	r2, #0
 8009a92:	4619      	mov	r1, r3
 8009a94:	f7f9 fde4 	bl	8003660 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(p_handle->dirPin2Port, p_handle->dirPin2, GPIO_PIN_RESET);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	68d8      	ldr	r0, [r3, #12]
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	691b      	ldr	r3, [r3, #16]
 8009aa0:	b29b      	uxth	r3, r3
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	4619      	mov	r1, r3
 8009aa6:	f7f9 fddb 	bl	8003660 <HAL_GPIO_WritePin>
 8009aaa:	e035      	b.n	8009b18 <MTR_setDirection+0xbc>
    }
    else if (p_direction == MTR_DIRECTION_FORWARD)
 8009aac:	78fb      	ldrb	r3, [r7, #3]
 8009aae:	2b01      	cmp	r3, #1
 8009ab0:	d119      	bne.n	8009ae6 <MTR_setDirection+0x8a>
    {
      LOG_debug("%s motor go FORWARD", p_handle->name);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	461a      	mov	r2, r3
 8009ab8:	491c      	ldr	r1, [pc, #112]	; (8009b2c <MTR_setDirection+0xd0>)
 8009aba:	2000      	movs	r0, #0
 8009abc:	f7ff ff42 	bl	8009944 <LOG_log>

      HAL_GPIO_WritePin(p_handle->dirPin1Port, p_handle->dirPin1, GPIO_PIN_RESET);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	6858      	ldr	r0, [r3, #4]
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	689b      	ldr	r3, [r3, #8]
 8009ac8:	b29b      	uxth	r3, r3
 8009aca:	2200      	movs	r2, #0
 8009acc:	4619      	mov	r1, r3
 8009ace:	f7f9 fdc7 	bl	8003660 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(p_handle->dirPin2Port, p_handle->dirPin2, GPIO_PIN_SET  );
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	68d8      	ldr	r0, [r3, #12]
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	691b      	ldr	r3, [r3, #16]
 8009ada:	b29b      	uxth	r3, r3
 8009adc:	2201      	movs	r2, #1
 8009ade:	4619      	mov	r1, r3
 8009ae0:	f7f9 fdbe 	bl	8003660 <HAL_GPIO_WritePin>
 8009ae4:	e018      	b.n	8009b18 <MTR_setDirection+0xbc>
    }
    else
    {
      LOG_debug("%s motor go BACKWARD", p_handle->name);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	461a      	mov	r2, r3
 8009aec:	4910      	ldr	r1, [pc, #64]	; (8009b30 <MTR_setDirection+0xd4>)
 8009aee:	2000      	movs	r0, #0
 8009af0:	f7ff ff28 	bl	8009944 <LOG_log>

      HAL_GPIO_WritePin(p_handle->dirPin1Port, p_handle->dirPin1, GPIO_PIN_SET  );
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	6858      	ldr	r0, [r3, #4]
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	689b      	ldr	r3, [r3, #8]
 8009afc:	b29b      	uxth	r3, r3
 8009afe:	2201      	movs	r2, #1
 8009b00:	4619      	mov	r1, r3
 8009b02:	f7f9 fdad 	bl	8003660 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(p_handle->dirPin2Port, p_handle->dirPin2, GPIO_PIN_RESET);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	68d8      	ldr	r0, [r3, #12]
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	691b      	ldr	r3, [r3, #16]
 8009b0e:	b29b      	uxth	r3, r3
 8009b10:	2200      	movs	r2, #0
 8009b12:	4619      	mov	r1, r3
 8009b14:	f7f9 fda4 	bl	8003660 <HAL_GPIO_WritePin>
    }

    p_handle->direction = p_direction;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	78fa      	ldrb	r2, [r7, #3]
 8009b1c:	751a      	strb	r2, [r3, #20]
  }

  return;
 8009b1e:	bf00      	nop
 8009b20:	bf00      	nop
}
 8009b22:	3708      	adds	r7, #8
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bd80      	pop	{r7, pc}
 8009b28:	0800b8ec 	.word	0x0800b8ec
 8009b2c:	0800b8fc 	.word	0x0800b8fc
 8009b30:	0800b910 	.word	0x0800b910

08009b34 <MTR_setSpeed>:

void MTR_setSpeed(T_MTR_Handle *p_handle, uint32_t p_speed)
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b082      	sub	sp, #8
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
 8009b3c:	6039      	str	r1, [r7, #0]
  if (p_speed == p_handle->speed)
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	699b      	ldr	r3, [r3, #24]
 8009b42:	683a      	ldr	r2, [r7, #0]
 8009b44:	429a      	cmp	r2, r3
 8009b46:	d02d      	beq.n	8009ba4 <MTR_setSpeed+0x70>
  {
    ; /* Nothing to do */
  }
  else
  {
    LOG_debug("Setting  %s motor p_speed to %u", p_handle->name, p_speed);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681a      	ldr	r2, [r3, #0]
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	4917      	ldr	r1, [pc, #92]	; (8009bac <MTR_setSpeed+0x78>)
 8009b50:	2000      	movs	r0, #0
 8009b52:	f7ff fef7 	bl	8009944 <LOG_log>

    __HAL_TIM_SET_COMPARE(p_handle->pwmTimerHandle, p_handle->pwmChannel, p_speed);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	6a1b      	ldr	r3, [r3, #32]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d105      	bne.n	8009b6a <MTR_setSpeed+0x36>
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	69db      	ldr	r3, [r3, #28]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	683a      	ldr	r2, [r7, #0]
 8009b66:	635a      	str	r2, [r3, #52]	; 0x34
 8009b68:	e018      	b.n	8009b9c <MTR_setSpeed+0x68>
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6a1b      	ldr	r3, [r3, #32]
 8009b6e:	2b04      	cmp	r3, #4
 8009b70:	d105      	bne.n	8009b7e <MTR_setSpeed+0x4a>
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	69db      	ldr	r3, [r3, #28]
 8009b76:	681a      	ldr	r2, [r3, #0]
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	6393      	str	r3, [r2, #56]	; 0x38
 8009b7c:	e00e      	b.n	8009b9c <MTR_setSpeed+0x68>
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	6a1b      	ldr	r3, [r3, #32]
 8009b82:	2b08      	cmp	r3, #8
 8009b84:	d105      	bne.n	8009b92 <MTR_setSpeed+0x5e>
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	69db      	ldr	r3, [r3, #28]
 8009b8a:	681a      	ldr	r2, [r3, #0]
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	63d3      	str	r3, [r2, #60]	; 0x3c
 8009b90:	e004      	b.n	8009b9c <MTR_setSpeed+0x68>
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	69db      	ldr	r3, [r3, #28]
 8009b96:	681a      	ldr	r2, [r3, #0]
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	6413      	str	r3, [r2, #64]	; 0x40

    p_handle->speed = p_speed;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	683a      	ldr	r2, [r7, #0]
 8009ba0:	619a      	str	r2, [r3, #24]
  }

  return;
 8009ba2:	bf00      	nop
 8009ba4:	bf00      	nop
}
 8009ba6:	3708      	adds	r7, #8
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}
 8009bac:	0800b928 	.word	0x0800b928

08009bb0 <PID_init>:

#include "utils.h"
#include "log.h"

void PID_init(T_PID_Handle *p_handle, int32_t p_kp, int32_t p_ki, int32_t p_kd, int32_t p_targetValue, int32_t p_minValue, int32_t p_maxValue, int32_t p_antiWindUpFactor)
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b084      	sub	sp, #16
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	60f8      	str	r0, [r7, #12]
 8009bb8:	60b9      	str	r1, [r7, #8]
 8009bba:	607a      	str	r2, [r7, #4]
 8009bbc:	603b      	str	r3, [r7, #0]
  LOG_info("Initializing PID");
 8009bbe:	4919      	ldr	r1, [pc, #100]	; (8009c24 <PID_init+0x74>)
 8009bc0:	2001      	movs	r0, #1
 8009bc2:	f7ff febf 	bl	8009944 <LOG_log>

  p_handle->kp              = p_kp;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	68ba      	ldr	r2, [r7, #8]
 8009bca:	601a      	str	r2, [r3, #0]
  p_handle->ki              = p_ki;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	687a      	ldr	r2, [r7, #4]
 8009bd0:	605a      	str	r2, [r3, #4]
  p_handle->kd              = p_kd;
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	683a      	ldr	r2, [r7, #0]
 8009bd6:	609a      	str	r2, [r3, #8]
  p_handle->targetValue     = p_targetValue;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	69ba      	ldr	r2, [r7, #24]
 8009bdc:	60da      	str	r2, [r3, #12]
  p_handle->minValue        = p_minValue;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	69fa      	ldr	r2, [r7, #28]
 8009be2:	611a      	str	r2, [r3, #16]
  p_handle->maxValue        = p_maxValue;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	6a3a      	ldr	r2, [r7, #32]
 8009be8:	615a      	str	r2, [r3, #20]
  p_handle->antiWindUpValue = p_antiWindUpFactor * UTI_MAX(abs(p_handle->minValue), abs(p_handle->maxValue));
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	695b      	ldr	r3, [r3, #20]
 8009bee:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8009bf2:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	691b      	ldr	r3, [r3, #16]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	bfb8      	it	lt
 8009bfe:	425b      	neglt	r3, r3
 8009c00:	4293      	cmp	r3, r2
 8009c02:	bfb8      	it	lt
 8009c04:	4613      	movlt	r3, r2
 8009c06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c08:	fb02 f203 	mul.w	r2, r2, r3
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	619a      	str	r2, [r3, #24]

  PID_reset  (p_handle);
 8009c10:	68f8      	ldr	r0, [r7, #12]
 8009c12:	f000 f809 	bl	8009c28 <PID_reset>
  PID_logInfo(p_handle);
 8009c16:	68f8      	ldr	r0, [r7, #12]
 8009c18:	f000 f87e 	bl	8009d18 <PID_logInfo>

  return;
 8009c1c:	bf00      	nop
}
 8009c1e:	3710      	adds	r7, #16
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd80      	pop	{r7, pc}
 8009c24:	0800b948 	.word	0x0800b948

08009c28 <PID_reset>:

void PID_reset(T_PID_Handle *p_handle)
{
 8009c28:	b480      	push	{r7}
 8009c2a:	b083      	sub	sp, #12
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
  p_handle->pValue        = 0;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2200      	movs	r2, #0
 8009c34:	61da      	str	r2, [r3, #28]
  p_handle->iValue        = 0;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2200      	movs	r2, #0
 8009c3a:	621a      	str	r2, [r3, #32]
  p_handle->dValue        = 0;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2200      	movs	r2, #0
 8009c40:	625a      	str	r2, [r3, #36]	; 0x24
  p_handle->computedValue = 0;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	2200      	movs	r2, #0
 8009c46:	629a      	str	r2, [r3, #40]	; 0x28
  p_handle->lastError     = 0;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	62da      	str	r2, [r3, #44]	; 0x2c

  return;
 8009c4e:	bf00      	nop
}
 8009c50:	370c      	adds	r7, #12
 8009c52:	46bd      	mov	sp, r7
 8009c54:	bc80      	pop	{r7}
 8009c56:	4770      	bx	lr

08009c58 <PID_update>:
{
  return p_handle->antiWindUpValue;
}

int32_t PID_update(T_PID_Handle *p_handle, int32_t p_currentValue, uint32_t p_timeDelta)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b088      	sub	sp, #32
 8009c5c:	af02      	add	r7, sp, #8
 8009c5e:	60f8      	str	r0, [r7, #12]
 8009c60:	60b9      	str	r1, [r7, #8]
 8009c62:	607a      	str	r2, [r7, #4]
  int32_t l_currentError;

  l_currentError = p_handle->targetValue - p_currentValue;
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	68da      	ldr	r2, [r3, #12]
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	1ad3      	subs	r3, r2, r3
 8009c6c:	617b      	str	r3, [r7, #20]

  p_handle->pValue    =  l_currentError;
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	697a      	ldr	r2, [r7, #20]
 8009c72:	61da      	str	r2, [r3, #28]
  p_handle->iValue   +=  l_currentError * p_timeDelta;
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	6a1b      	ldr	r3, [r3, #32]
 8009c78:	4619      	mov	r1, r3
 8009c7a:	697b      	ldr	r3, [r7, #20]
 8009c7c:	687a      	ldr	r2, [r7, #4]
 8009c7e:	fb02 f303 	mul.w	r3, r2, r3
 8009c82:	440b      	add	r3, r1
 8009c84:	461a      	mov	r2, r3
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	621a      	str	r2, [r3, #32]
  p_handle->iValue    =  UTI_clampIntValue(p_handle->iValue, -p_handle->antiWindUpValue, p_handle->antiWindUpValue, false, 0);
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	6a18      	ldr	r0, [r3, #32]
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	699b      	ldr	r3, [r3, #24]
 8009c92:	4259      	negs	r1, r3
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	699a      	ldr	r2, [r3, #24]
 8009c98:	2300      	movs	r3, #0
 8009c9a:	9300      	str	r3, [sp, #0]
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	f000 f8c0 	bl	8009e22 <UTI_clampIntValue>
 8009ca2:	4602      	mov	r2, r0
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	621a      	str	r2, [r3, #32]
  p_handle->dValue    = (l_currentError - p_handle->lastError) / p_timeDelta;
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cac:	697a      	ldr	r2, [r7, #20]
 8009cae:	1ad3      	subs	r3, r2, r3
 8009cb0:	461a      	mov	r2, r3
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cb8:	461a      	mov	r2, r3
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	625a      	str	r2, [r3, #36]	; 0x24
  p_handle->lastError =  l_currentError;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	697a      	ldr	r2, [r7, #20]
 8009cc2:	62da      	str	r2, [r3, #44]	; 0x2c

  p_handle->computedValue = p_handle->kp * p_handle->pValue + p_handle->ki * p_handle->iValue + p_handle->kd * p_handle->dValue;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	68fa      	ldr	r2, [r7, #12]
 8009cca:	69d2      	ldr	r2, [r2, #28]
 8009ccc:	fb02 f203 	mul.w	r2, r2, r3
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	685b      	ldr	r3, [r3, #4]
 8009cd4:	68f9      	ldr	r1, [r7, #12]
 8009cd6:	6a09      	ldr	r1, [r1, #32]
 8009cd8:	fb01 f303 	mul.w	r3, r1, r3
 8009cdc:	441a      	add	r2, r3
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	689b      	ldr	r3, [r3, #8]
 8009ce2:	68f9      	ldr	r1, [r7, #12]
 8009ce4:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8009ce6:	fb01 f303 	mul.w	r3, r1, r3
 8009cea:	441a      	add	r2, r3
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	629a      	str	r2, [r3, #40]	; 0x28
  p_handle->computedValue = UTI_clampIntValue(p_handle->computedValue, p_handle->minValue, p_handle->maxValue, false, 0);
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	6919      	ldr	r1, [r3, #16]
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	695a      	ldr	r2, [r3, #20]
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	9300      	str	r3, [sp, #0]
 8009d00:	2300      	movs	r3, #0
 8009d02:	f000 f88e 	bl	8009e22 <UTI_clampIntValue>
 8009d06:	4602      	mov	r2, r0
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	629a      	str	r2, [r3, #40]	; 0x28

  return p_currentValue;
 8009d0c:	68bb      	ldr	r3, [r7, #8]
}
 8009d0e:	4618      	mov	r0, r3
 8009d10:	3718      	adds	r7, #24
 8009d12:	46bd      	mov	sp, r7
 8009d14:	bd80      	pop	{r7, pc}
	...

08009d18 <PID_logInfo>:

void PID_logInfo(T_PID_Handle *p_handle)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b084      	sub	sp, #16
 8009d1c:	af02      	add	r7, sp, #8
 8009d1e:	6078      	str	r0, [r7, #4]
  LOG_info(" kp = %4d -  ki = %4d -     kd = %4d", p_handle->kp         , p_handle->ki      , p_handle->kd             );
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681a      	ldr	r2, [r3, #0]
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	6859      	ldr	r1, [r3, #4]
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	689b      	ldr	r3, [r3, #8]
 8009d2c:	9300      	str	r3, [sp, #0]
 8009d2e:	460b      	mov	r3, r1
 8009d30:	4913      	ldr	r1, [pc, #76]	; (8009d80 <PID_logInfo+0x68>)
 8009d32:	2001      	movs	r0, #1
 8009d34:	f7ff fe06 	bl	8009944 <LOG_log>
  LOG_info("  p = %4d -   i = %4d -      d = %4d", p_handle->pValue     , p_handle->iValue  , p_handle->dValue         );
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	69da      	ldr	r2, [r3, #28]
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	6a19      	ldr	r1, [r3, #32]
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d44:	9300      	str	r3, [sp, #0]
 8009d46:	460b      	mov	r3, r1
 8009d48:	490e      	ldr	r1, [pc, #56]	; (8009d84 <PID_logInfo+0x6c>)
 8009d4a:	2001      	movs	r0, #1
 8009d4c:	f7ff fdfa 	bl	8009944 <LOG_log>
  LOG_info("min = %4d - max = %4d - a.w.up = %4d", p_handle->minValue   , p_handle->maxValue, p_handle->antiWindUpValue);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	691a      	ldr	r2, [r3, #16]
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	6959      	ldr	r1, [r3, #20]
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	699b      	ldr	r3, [r3, #24]
 8009d5c:	9300      	str	r3, [sp, #0]
 8009d5e:	460b      	mov	r3, r1
 8009d60:	4909      	ldr	r1, [pc, #36]	; (8009d88 <PID_logInfo+0x70>)
 8009d62:	2001      	movs	r0, #1
 8009d64:	f7ff fdee 	bl	8009944 <LOG_log>
  LOG_info("  t = %4d - val = %4d               ", p_handle->targetValue, p_handle->computedValue                      );
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	68da      	ldr	r2, [r3, #12]
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d70:	4906      	ldr	r1, [pc, #24]	; (8009d8c <PID_logInfo+0x74>)
 8009d72:	2001      	movs	r0, #1
 8009d74:	f7ff fde6 	bl	8009944 <LOG_log>

  return;
 8009d78:	bf00      	nop
}
 8009d7a:	3708      	adds	r7, #8
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	bd80      	pop	{r7, pc}
 8009d80:	0800b95c 	.word	0x0800b95c
 8009d84:	0800b984 	.word	0x0800b984
 8009d88:	0800b9ac 	.word	0x0800b9ac
 8009d8c:	0800b9d4 	.word	0x0800b9d4

08009d90 <UTI_init>:
#include "log.h"

static TIM_HandleTypeDef *g_UTI_delayTimerHandle;

void UTI_init(TIM_HandleTypeDef *p_delayTimerHandle)
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b082      	sub	sp, #8
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
  LOG_info("Initializing utilities");
 8009d98:	4905      	ldr	r1, [pc, #20]	; (8009db0 <UTI_init+0x20>)
 8009d9a:	2001      	movs	r0, #1
 8009d9c:	f7ff fdd2 	bl	8009944 <LOG_log>

  g_UTI_delayTimerHandle = p_delayTimerHandle;
 8009da0:	4a04      	ldr	r2, [pc, #16]	; (8009db4 <UTI_init+0x24>)
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	6013      	str	r3, [r2, #0]

  return;
 8009da6:	bf00      	nop
}
 8009da8:	3708      	adds	r7, #8
 8009daa:	46bd      	mov	sp, r7
 8009dac:	bd80      	pop	{r7, pc}
 8009dae:	bf00      	nop
 8009db0:	0800b9fc 	.word	0x0800b9fc
 8009db4:	20000278 	.word	0x20000278

08009db8 <UTI_delayUs>:

void UTI_delayUs(uint16_t p_delay)
{
 8009db8:	b480      	push	{r7}
 8009dba:	b083      	sub	sp, #12
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	80fb      	strh	r3, [r7, #6]
  /* Reset the micro-seconds counter */
  __HAL_TIM_SET_COUNTER(g_UTI_delayTimerHandle, 0);
 8009dc2:	4b09      	ldr	r3, [pc, #36]	; (8009de8 <UTI_delayUs+0x30>)
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	2200      	movs	r2, #0
 8009dca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Wait for the counter to reach the input micro-seconds number */
  while (__HAL_TIM_GET_COUNTER(g_UTI_delayTimerHandle) < p_delay)
 8009dcc:	bf00      	nop
 8009dce:	4b06      	ldr	r3, [pc, #24]	; (8009de8 <UTI_delayUs+0x30>)
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009dd6:	88fb      	ldrh	r3, [r7, #6]
 8009dd8:	429a      	cmp	r2, r3
 8009dda:	d3f8      	bcc.n	8009dce <UTI_delayUs+0x16>
  {
    ; /* Nothing to do */
  }

  return;
 8009ddc:	bf00      	nop
}
 8009dde:	370c      	adds	r7, #12
 8009de0:	46bd      	mov	sp, r7
 8009de2:	bc80      	pop	{r7}
 8009de4:	4770      	bx	lr
 8009de6:	bf00      	nop
 8009de8:	20000278 	.word	0x20000278

08009dec <UTI_turnRtcTimeToSeconds>:

  return;
}

uint32_t UTI_turnRtcTimeToSeconds(RTC_TimeTypeDef *p_time)
{
 8009dec:	b480      	push	{r7}
 8009dee:	b083      	sub	sp, #12
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
  return p_time->Hours * 3600 + p_time->Minutes * 60 + p_time->Seconds;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	781b      	ldrb	r3, [r3, #0]
 8009df8:	461a      	mov	r2, r3
 8009dfa:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8009dfe:	fb03 f202 	mul.w	r2, r3, r2
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	785b      	ldrb	r3, [r3, #1]
 8009e06:	4619      	mov	r1, r3
 8009e08:	460b      	mov	r3, r1
 8009e0a:	011b      	lsls	r3, r3, #4
 8009e0c:	1a5b      	subs	r3, r3, r1
 8009e0e:	009b      	lsls	r3, r3, #2
 8009e10:	4413      	add	r3, r2
 8009e12:	687a      	ldr	r2, [r7, #4]
 8009e14:	7892      	ldrb	r2, [r2, #2]
 8009e16:	4413      	add	r3, r2
}
 8009e18:	4618      	mov	r0, r3
 8009e1a:	370c      	adds	r7, #12
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bc80      	pop	{r7}
 8009e20:	4770      	bx	lr

08009e22 <UTI_clampIntValue>:

int32_t UTI_clampIntValue(int32_t p_value, int32_t p_minValue, int32_t p_maxValue, bool p_clampToNearest, int32_t p_clampValue)
{
 8009e22:	b480      	push	{r7}
 8009e24:	b087      	sub	sp, #28
 8009e26:	af00      	add	r7, sp, #0
 8009e28:	60f8      	str	r0, [r7, #12]
 8009e2a:	60b9      	str	r1, [r7, #8]
 8009e2c:	607a      	str	r2, [r7, #4]
 8009e2e:	70fb      	strb	r3, [r7, #3]
  int32_t l_returnValue;

  if (p_value < p_minValue)
 8009e30:	68fa      	ldr	r2, [r7, #12]
 8009e32:	68bb      	ldr	r3, [r7, #8]
 8009e34:	429a      	cmp	r2, r3
 8009e36:	da08      	bge.n	8009e4a <UTI_clampIntValue+0x28>
  {
    if (p_clampToNearest == true)
 8009e38:	78fb      	ldrb	r3, [r7, #3]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d002      	beq.n	8009e44 <UTI_clampIntValue+0x22>
    {
      l_returnValue = p_minValue;
 8009e3e:	68bb      	ldr	r3, [r7, #8]
 8009e40:	617b      	str	r3, [r7, #20]
 8009e42:	e011      	b.n	8009e68 <UTI_clampIntValue+0x46>
    }
    else
    {
      l_returnValue = p_clampValue;
 8009e44:	6a3b      	ldr	r3, [r7, #32]
 8009e46:	617b      	str	r3, [r7, #20]
 8009e48:	e00e      	b.n	8009e68 <UTI_clampIntValue+0x46>
    }
  }
  else if (p_value > p_maxValue)
 8009e4a:	68fa      	ldr	r2, [r7, #12]
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	429a      	cmp	r2, r3
 8009e50:	dd08      	ble.n	8009e64 <UTI_clampIntValue+0x42>
  {
    if (p_clampToNearest == true)
 8009e52:	78fb      	ldrb	r3, [r7, #3]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d002      	beq.n	8009e5e <UTI_clampIntValue+0x3c>
    {
      l_returnValue = p_maxValue;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	617b      	str	r3, [r7, #20]
 8009e5c:	e004      	b.n	8009e68 <UTI_clampIntValue+0x46>
    }
    else
    {
      l_returnValue = p_clampValue;
 8009e5e:	6a3b      	ldr	r3, [r7, #32]
 8009e60:	617b      	str	r3, [r7, #20]
 8009e62:	e001      	b.n	8009e68 <UTI_clampIntValue+0x46>
    }
  }
  else
  {
    l_returnValue = p_value;
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	617b      	str	r3, [r7, #20]
  }

  return l_returnValue;
 8009e68:	697b      	ldr	r3, [r7, #20]
}
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	371c      	adds	r7, #28
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bc80      	pop	{r7}
 8009e72:	4770      	bx	lr

08009e74 <__errno>:
 8009e74:	4b01      	ldr	r3, [pc, #4]	; (8009e7c <__errno+0x8>)
 8009e76:	6818      	ldr	r0, [r3, #0]
 8009e78:	4770      	bx	lr
 8009e7a:	bf00      	nop
 8009e7c:	2000001c 	.word	0x2000001c

08009e80 <__libc_init_array>:
 8009e80:	b570      	push	{r4, r5, r6, lr}
 8009e82:	2600      	movs	r6, #0
 8009e84:	4d0c      	ldr	r5, [pc, #48]	; (8009eb8 <__libc_init_array+0x38>)
 8009e86:	4c0d      	ldr	r4, [pc, #52]	; (8009ebc <__libc_init_array+0x3c>)
 8009e88:	1b64      	subs	r4, r4, r5
 8009e8a:	10a4      	asrs	r4, r4, #2
 8009e8c:	42a6      	cmp	r6, r4
 8009e8e:	d109      	bne.n	8009ea4 <__libc_init_array+0x24>
 8009e90:	f001 f80e 	bl	800aeb0 <_init>
 8009e94:	2600      	movs	r6, #0
 8009e96:	4d0a      	ldr	r5, [pc, #40]	; (8009ec0 <__libc_init_array+0x40>)
 8009e98:	4c0a      	ldr	r4, [pc, #40]	; (8009ec4 <__libc_init_array+0x44>)
 8009e9a:	1b64      	subs	r4, r4, r5
 8009e9c:	10a4      	asrs	r4, r4, #2
 8009e9e:	42a6      	cmp	r6, r4
 8009ea0:	d105      	bne.n	8009eae <__libc_init_array+0x2e>
 8009ea2:	bd70      	pop	{r4, r5, r6, pc}
 8009ea4:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ea8:	4798      	blx	r3
 8009eaa:	3601      	adds	r6, #1
 8009eac:	e7ee      	b.n	8009e8c <__libc_init_array+0xc>
 8009eae:	f855 3b04 	ldr.w	r3, [r5], #4
 8009eb2:	4798      	blx	r3
 8009eb4:	3601      	adds	r6, #1
 8009eb6:	e7f2      	b.n	8009e9e <__libc_init_array+0x1e>
 8009eb8:	0800bac4 	.word	0x0800bac4
 8009ebc:	0800bac4 	.word	0x0800bac4
 8009ec0:	0800bac4 	.word	0x0800bac4
 8009ec4:	0800bac8 	.word	0x0800bac8

08009ec8 <memset>:
 8009ec8:	4603      	mov	r3, r0
 8009eca:	4402      	add	r2, r0
 8009ecc:	4293      	cmp	r3, r2
 8009ece:	d100      	bne.n	8009ed2 <memset+0xa>
 8009ed0:	4770      	bx	lr
 8009ed2:	f803 1b01 	strb.w	r1, [r3], #1
 8009ed6:	e7f9      	b.n	8009ecc <memset+0x4>

08009ed8 <iprintf>:
 8009ed8:	b40f      	push	{r0, r1, r2, r3}
 8009eda:	4b0a      	ldr	r3, [pc, #40]	; (8009f04 <iprintf+0x2c>)
 8009edc:	b513      	push	{r0, r1, r4, lr}
 8009ede:	681c      	ldr	r4, [r3, #0]
 8009ee0:	b124      	cbz	r4, 8009eec <iprintf+0x14>
 8009ee2:	69a3      	ldr	r3, [r4, #24]
 8009ee4:	b913      	cbnz	r3, 8009eec <iprintf+0x14>
 8009ee6:	4620      	mov	r0, r4
 8009ee8:	f000 fa74 	bl	800a3d4 <__sinit>
 8009eec:	ab05      	add	r3, sp, #20
 8009eee:	4620      	mov	r0, r4
 8009ef0:	9a04      	ldr	r2, [sp, #16]
 8009ef2:	68a1      	ldr	r1, [r4, #8]
 8009ef4:	9301      	str	r3, [sp, #4]
 8009ef6:	f000 fc3f 	bl	800a778 <_vfiprintf_r>
 8009efa:	b002      	add	sp, #8
 8009efc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f00:	b004      	add	sp, #16
 8009f02:	4770      	bx	lr
 8009f04:	2000001c 	.word	0x2000001c

08009f08 <_puts_r>:
 8009f08:	b570      	push	{r4, r5, r6, lr}
 8009f0a:	460e      	mov	r6, r1
 8009f0c:	4605      	mov	r5, r0
 8009f0e:	b118      	cbz	r0, 8009f18 <_puts_r+0x10>
 8009f10:	6983      	ldr	r3, [r0, #24]
 8009f12:	b90b      	cbnz	r3, 8009f18 <_puts_r+0x10>
 8009f14:	f000 fa5e 	bl	800a3d4 <__sinit>
 8009f18:	69ab      	ldr	r3, [r5, #24]
 8009f1a:	68ac      	ldr	r4, [r5, #8]
 8009f1c:	b913      	cbnz	r3, 8009f24 <_puts_r+0x1c>
 8009f1e:	4628      	mov	r0, r5
 8009f20:	f000 fa58 	bl	800a3d4 <__sinit>
 8009f24:	4b2c      	ldr	r3, [pc, #176]	; (8009fd8 <_puts_r+0xd0>)
 8009f26:	429c      	cmp	r4, r3
 8009f28:	d120      	bne.n	8009f6c <_puts_r+0x64>
 8009f2a:	686c      	ldr	r4, [r5, #4]
 8009f2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009f2e:	07db      	lsls	r3, r3, #31
 8009f30:	d405      	bmi.n	8009f3e <_puts_r+0x36>
 8009f32:	89a3      	ldrh	r3, [r4, #12]
 8009f34:	0598      	lsls	r0, r3, #22
 8009f36:	d402      	bmi.n	8009f3e <_puts_r+0x36>
 8009f38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f3a:	f000 fae9 	bl	800a510 <__retarget_lock_acquire_recursive>
 8009f3e:	89a3      	ldrh	r3, [r4, #12]
 8009f40:	0719      	lsls	r1, r3, #28
 8009f42:	d51d      	bpl.n	8009f80 <_puts_r+0x78>
 8009f44:	6923      	ldr	r3, [r4, #16]
 8009f46:	b1db      	cbz	r3, 8009f80 <_puts_r+0x78>
 8009f48:	3e01      	subs	r6, #1
 8009f4a:	68a3      	ldr	r3, [r4, #8]
 8009f4c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009f50:	3b01      	subs	r3, #1
 8009f52:	60a3      	str	r3, [r4, #8]
 8009f54:	bb39      	cbnz	r1, 8009fa6 <_puts_r+0x9e>
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	da38      	bge.n	8009fcc <_puts_r+0xc4>
 8009f5a:	4622      	mov	r2, r4
 8009f5c:	210a      	movs	r1, #10
 8009f5e:	4628      	mov	r0, r5
 8009f60:	f000 f85e 	bl	800a020 <__swbuf_r>
 8009f64:	3001      	adds	r0, #1
 8009f66:	d011      	beq.n	8009f8c <_puts_r+0x84>
 8009f68:	250a      	movs	r5, #10
 8009f6a:	e011      	b.n	8009f90 <_puts_r+0x88>
 8009f6c:	4b1b      	ldr	r3, [pc, #108]	; (8009fdc <_puts_r+0xd4>)
 8009f6e:	429c      	cmp	r4, r3
 8009f70:	d101      	bne.n	8009f76 <_puts_r+0x6e>
 8009f72:	68ac      	ldr	r4, [r5, #8]
 8009f74:	e7da      	b.n	8009f2c <_puts_r+0x24>
 8009f76:	4b1a      	ldr	r3, [pc, #104]	; (8009fe0 <_puts_r+0xd8>)
 8009f78:	429c      	cmp	r4, r3
 8009f7a:	bf08      	it	eq
 8009f7c:	68ec      	ldreq	r4, [r5, #12]
 8009f7e:	e7d5      	b.n	8009f2c <_puts_r+0x24>
 8009f80:	4621      	mov	r1, r4
 8009f82:	4628      	mov	r0, r5
 8009f84:	f000 f89e 	bl	800a0c4 <__swsetup_r>
 8009f88:	2800      	cmp	r0, #0
 8009f8a:	d0dd      	beq.n	8009f48 <_puts_r+0x40>
 8009f8c:	f04f 35ff 	mov.w	r5, #4294967295
 8009f90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009f92:	07da      	lsls	r2, r3, #31
 8009f94:	d405      	bmi.n	8009fa2 <_puts_r+0x9a>
 8009f96:	89a3      	ldrh	r3, [r4, #12]
 8009f98:	059b      	lsls	r3, r3, #22
 8009f9a:	d402      	bmi.n	8009fa2 <_puts_r+0x9a>
 8009f9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f9e:	f000 fab8 	bl	800a512 <__retarget_lock_release_recursive>
 8009fa2:	4628      	mov	r0, r5
 8009fa4:	bd70      	pop	{r4, r5, r6, pc}
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	da04      	bge.n	8009fb4 <_puts_r+0xac>
 8009faa:	69a2      	ldr	r2, [r4, #24]
 8009fac:	429a      	cmp	r2, r3
 8009fae:	dc06      	bgt.n	8009fbe <_puts_r+0xb6>
 8009fb0:	290a      	cmp	r1, #10
 8009fb2:	d004      	beq.n	8009fbe <_puts_r+0xb6>
 8009fb4:	6823      	ldr	r3, [r4, #0]
 8009fb6:	1c5a      	adds	r2, r3, #1
 8009fb8:	6022      	str	r2, [r4, #0]
 8009fba:	7019      	strb	r1, [r3, #0]
 8009fbc:	e7c5      	b.n	8009f4a <_puts_r+0x42>
 8009fbe:	4622      	mov	r2, r4
 8009fc0:	4628      	mov	r0, r5
 8009fc2:	f000 f82d 	bl	800a020 <__swbuf_r>
 8009fc6:	3001      	adds	r0, #1
 8009fc8:	d1bf      	bne.n	8009f4a <_puts_r+0x42>
 8009fca:	e7df      	b.n	8009f8c <_puts_r+0x84>
 8009fcc:	250a      	movs	r5, #10
 8009fce:	6823      	ldr	r3, [r4, #0]
 8009fd0:	1c5a      	adds	r2, r3, #1
 8009fd2:	6022      	str	r2, [r4, #0]
 8009fd4:	701d      	strb	r5, [r3, #0]
 8009fd6:	e7db      	b.n	8009f90 <_puts_r+0x88>
 8009fd8:	0800ba50 	.word	0x0800ba50
 8009fdc:	0800ba70 	.word	0x0800ba70
 8009fe0:	0800ba30 	.word	0x0800ba30

08009fe4 <puts>:
 8009fe4:	4b02      	ldr	r3, [pc, #8]	; (8009ff0 <puts+0xc>)
 8009fe6:	4601      	mov	r1, r0
 8009fe8:	6818      	ldr	r0, [r3, #0]
 8009fea:	f7ff bf8d 	b.w	8009f08 <_puts_r>
 8009fee:	bf00      	nop
 8009ff0:	2000001c 	.word	0x2000001c

08009ff4 <viprintf>:
 8009ff4:	4b09      	ldr	r3, [pc, #36]	; (800a01c <viprintf+0x28>)
 8009ff6:	b570      	push	{r4, r5, r6, lr}
 8009ff8:	681c      	ldr	r4, [r3, #0]
 8009ffa:	4605      	mov	r5, r0
 8009ffc:	460e      	mov	r6, r1
 8009ffe:	b124      	cbz	r4, 800a00a <viprintf+0x16>
 800a000:	69a3      	ldr	r3, [r4, #24]
 800a002:	b913      	cbnz	r3, 800a00a <viprintf+0x16>
 800a004:	4620      	mov	r0, r4
 800a006:	f000 f9e5 	bl	800a3d4 <__sinit>
 800a00a:	4633      	mov	r3, r6
 800a00c:	462a      	mov	r2, r5
 800a00e:	4620      	mov	r0, r4
 800a010:	68a1      	ldr	r1, [r4, #8]
 800a012:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a016:	f000 bbaf 	b.w	800a778 <_vfiprintf_r>
 800a01a:	bf00      	nop
 800a01c:	2000001c 	.word	0x2000001c

0800a020 <__swbuf_r>:
 800a020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a022:	460e      	mov	r6, r1
 800a024:	4614      	mov	r4, r2
 800a026:	4605      	mov	r5, r0
 800a028:	b118      	cbz	r0, 800a032 <__swbuf_r+0x12>
 800a02a:	6983      	ldr	r3, [r0, #24]
 800a02c:	b90b      	cbnz	r3, 800a032 <__swbuf_r+0x12>
 800a02e:	f000 f9d1 	bl	800a3d4 <__sinit>
 800a032:	4b21      	ldr	r3, [pc, #132]	; (800a0b8 <__swbuf_r+0x98>)
 800a034:	429c      	cmp	r4, r3
 800a036:	d12b      	bne.n	800a090 <__swbuf_r+0x70>
 800a038:	686c      	ldr	r4, [r5, #4]
 800a03a:	69a3      	ldr	r3, [r4, #24]
 800a03c:	60a3      	str	r3, [r4, #8]
 800a03e:	89a3      	ldrh	r3, [r4, #12]
 800a040:	071a      	lsls	r2, r3, #28
 800a042:	d52f      	bpl.n	800a0a4 <__swbuf_r+0x84>
 800a044:	6923      	ldr	r3, [r4, #16]
 800a046:	b36b      	cbz	r3, 800a0a4 <__swbuf_r+0x84>
 800a048:	6923      	ldr	r3, [r4, #16]
 800a04a:	6820      	ldr	r0, [r4, #0]
 800a04c:	b2f6      	uxtb	r6, r6
 800a04e:	1ac0      	subs	r0, r0, r3
 800a050:	6963      	ldr	r3, [r4, #20]
 800a052:	4637      	mov	r7, r6
 800a054:	4283      	cmp	r3, r0
 800a056:	dc04      	bgt.n	800a062 <__swbuf_r+0x42>
 800a058:	4621      	mov	r1, r4
 800a05a:	4628      	mov	r0, r5
 800a05c:	f000 f926 	bl	800a2ac <_fflush_r>
 800a060:	bb30      	cbnz	r0, 800a0b0 <__swbuf_r+0x90>
 800a062:	68a3      	ldr	r3, [r4, #8]
 800a064:	3001      	adds	r0, #1
 800a066:	3b01      	subs	r3, #1
 800a068:	60a3      	str	r3, [r4, #8]
 800a06a:	6823      	ldr	r3, [r4, #0]
 800a06c:	1c5a      	adds	r2, r3, #1
 800a06e:	6022      	str	r2, [r4, #0]
 800a070:	701e      	strb	r6, [r3, #0]
 800a072:	6963      	ldr	r3, [r4, #20]
 800a074:	4283      	cmp	r3, r0
 800a076:	d004      	beq.n	800a082 <__swbuf_r+0x62>
 800a078:	89a3      	ldrh	r3, [r4, #12]
 800a07a:	07db      	lsls	r3, r3, #31
 800a07c:	d506      	bpl.n	800a08c <__swbuf_r+0x6c>
 800a07e:	2e0a      	cmp	r6, #10
 800a080:	d104      	bne.n	800a08c <__swbuf_r+0x6c>
 800a082:	4621      	mov	r1, r4
 800a084:	4628      	mov	r0, r5
 800a086:	f000 f911 	bl	800a2ac <_fflush_r>
 800a08a:	b988      	cbnz	r0, 800a0b0 <__swbuf_r+0x90>
 800a08c:	4638      	mov	r0, r7
 800a08e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a090:	4b0a      	ldr	r3, [pc, #40]	; (800a0bc <__swbuf_r+0x9c>)
 800a092:	429c      	cmp	r4, r3
 800a094:	d101      	bne.n	800a09a <__swbuf_r+0x7a>
 800a096:	68ac      	ldr	r4, [r5, #8]
 800a098:	e7cf      	b.n	800a03a <__swbuf_r+0x1a>
 800a09a:	4b09      	ldr	r3, [pc, #36]	; (800a0c0 <__swbuf_r+0xa0>)
 800a09c:	429c      	cmp	r4, r3
 800a09e:	bf08      	it	eq
 800a0a0:	68ec      	ldreq	r4, [r5, #12]
 800a0a2:	e7ca      	b.n	800a03a <__swbuf_r+0x1a>
 800a0a4:	4621      	mov	r1, r4
 800a0a6:	4628      	mov	r0, r5
 800a0a8:	f000 f80c 	bl	800a0c4 <__swsetup_r>
 800a0ac:	2800      	cmp	r0, #0
 800a0ae:	d0cb      	beq.n	800a048 <__swbuf_r+0x28>
 800a0b0:	f04f 37ff 	mov.w	r7, #4294967295
 800a0b4:	e7ea      	b.n	800a08c <__swbuf_r+0x6c>
 800a0b6:	bf00      	nop
 800a0b8:	0800ba50 	.word	0x0800ba50
 800a0bc:	0800ba70 	.word	0x0800ba70
 800a0c0:	0800ba30 	.word	0x0800ba30

0800a0c4 <__swsetup_r>:
 800a0c4:	4b32      	ldr	r3, [pc, #200]	; (800a190 <__swsetup_r+0xcc>)
 800a0c6:	b570      	push	{r4, r5, r6, lr}
 800a0c8:	681d      	ldr	r5, [r3, #0]
 800a0ca:	4606      	mov	r6, r0
 800a0cc:	460c      	mov	r4, r1
 800a0ce:	b125      	cbz	r5, 800a0da <__swsetup_r+0x16>
 800a0d0:	69ab      	ldr	r3, [r5, #24]
 800a0d2:	b913      	cbnz	r3, 800a0da <__swsetup_r+0x16>
 800a0d4:	4628      	mov	r0, r5
 800a0d6:	f000 f97d 	bl	800a3d4 <__sinit>
 800a0da:	4b2e      	ldr	r3, [pc, #184]	; (800a194 <__swsetup_r+0xd0>)
 800a0dc:	429c      	cmp	r4, r3
 800a0de:	d10f      	bne.n	800a100 <__swsetup_r+0x3c>
 800a0e0:	686c      	ldr	r4, [r5, #4]
 800a0e2:	89a3      	ldrh	r3, [r4, #12]
 800a0e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a0e8:	0719      	lsls	r1, r3, #28
 800a0ea:	d42c      	bmi.n	800a146 <__swsetup_r+0x82>
 800a0ec:	06dd      	lsls	r5, r3, #27
 800a0ee:	d411      	bmi.n	800a114 <__swsetup_r+0x50>
 800a0f0:	2309      	movs	r3, #9
 800a0f2:	6033      	str	r3, [r6, #0]
 800a0f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a0f8:	f04f 30ff 	mov.w	r0, #4294967295
 800a0fc:	81a3      	strh	r3, [r4, #12]
 800a0fe:	e03e      	b.n	800a17e <__swsetup_r+0xba>
 800a100:	4b25      	ldr	r3, [pc, #148]	; (800a198 <__swsetup_r+0xd4>)
 800a102:	429c      	cmp	r4, r3
 800a104:	d101      	bne.n	800a10a <__swsetup_r+0x46>
 800a106:	68ac      	ldr	r4, [r5, #8]
 800a108:	e7eb      	b.n	800a0e2 <__swsetup_r+0x1e>
 800a10a:	4b24      	ldr	r3, [pc, #144]	; (800a19c <__swsetup_r+0xd8>)
 800a10c:	429c      	cmp	r4, r3
 800a10e:	bf08      	it	eq
 800a110:	68ec      	ldreq	r4, [r5, #12]
 800a112:	e7e6      	b.n	800a0e2 <__swsetup_r+0x1e>
 800a114:	0758      	lsls	r0, r3, #29
 800a116:	d512      	bpl.n	800a13e <__swsetup_r+0x7a>
 800a118:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a11a:	b141      	cbz	r1, 800a12e <__swsetup_r+0x6a>
 800a11c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a120:	4299      	cmp	r1, r3
 800a122:	d002      	beq.n	800a12a <__swsetup_r+0x66>
 800a124:	4630      	mov	r0, r6
 800a126:	f000 fa59 	bl	800a5dc <_free_r>
 800a12a:	2300      	movs	r3, #0
 800a12c:	6363      	str	r3, [r4, #52]	; 0x34
 800a12e:	89a3      	ldrh	r3, [r4, #12]
 800a130:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a134:	81a3      	strh	r3, [r4, #12]
 800a136:	2300      	movs	r3, #0
 800a138:	6063      	str	r3, [r4, #4]
 800a13a:	6923      	ldr	r3, [r4, #16]
 800a13c:	6023      	str	r3, [r4, #0]
 800a13e:	89a3      	ldrh	r3, [r4, #12]
 800a140:	f043 0308 	orr.w	r3, r3, #8
 800a144:	81a3      	strh	r3, [r4, #12]
 800a146:	6923      	ldr	r3, [r4, #16]
 800a148:	b94b      	cbnz	r3, 800a15e <__swsetup_r+0x9a>
 800a14a:	89a3      	ldrh	r3, [r4, #12]
 800a14c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a150:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a154:	d003      	beq.n	800a15e <__swsetup_r+0x9a>
 800a156:	4621      	mov	r1, r4
 800a158:	4630      	mov	r0, r6
 800a15a:	f000 f9ff 	bl	800a55c <__smakebuf_r>
 800a15e:	89a0      	ldrh	r0, [r4, #12]
 800a160:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a164:	f010 0301 	ands.w	r3, r0, #1
 800a168:	d00a      	beq.n	800a180 <__swsetup_r+0xbc>
 800a16a:	2300      	movs	r3, #0
 800a16c:	60a3      	str	r3, [r4, #8]
 800a16e:	6963      	ldr	r3, [r4, #20]
 800a170:	425b      	negs	r3, r3
 800a172:	61a3      	str	r3, [r4, #24]
 800a174:	6923      	ldr	r3, [r4, #16]
 800a176:	b943      	cbnz	r3, 800a18a <__swsetup_r+0xc6>
 800a178:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a17c:	d1ba      	bne.n	800a0f4 <__swsetup_r+0x30>
 800a17e:	bd70      	pop	{r4, r5, r6, pc}
 800a180:	0781      	lsls	r1, r0, #30
 800a182:	bf58      	it	pl
 800a184:	6963      	ldrpl	r3, [r4, #20]
 800a186:	60a3      	str	r3, [r4, #8]
 800a188:	e7f4      	b.n	800a174 <__swsetup_r+0xb0>
 800a18a:	2000      	movs	r0, #0
 800a18c:	e7f7      	b.n	800a17e <__swsetup_r+0xba>
 800a18e:	bf00      	nop
 800a190:	2000001c 	.word	0x2000001c
 800a194:	0800ba50 	.word	0x0800ba50
 800a198:	0800ba70 	.word	0x0800ba70
 800a19c:	0800ba30 	.word	0x0800ba30

0800a1a0 <__sflush_r>:
 800a1a0:	898a      	ldrh	r2, [r1, #12]
 800a1a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1a6:	4605      	mov	r5, r0
 800a1a8:	0710      	lsls	r0, r2, #28
 800a1aa:	460c      	mov	r4, r1
 800a1ac:	d458      	bmi.n	800a260 <__sflush_r+0xc0>
 800a1ae:	684b      	ldr	r3, [r1, #4]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	dc05      	bgt.n	800a1c0 <__sflush_r+0x20>
 800a1b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	dc02      	bgt.n	800a1c0 <__sflush_r+0x20>
 800a1ba:	2000      	movs	r0, #0
 800a1bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a1c2:	2e00      	cmp	r6, #0
 800a1c4:	d0f9      	beq.n	800a1ba <__sflush_r+0x1a>
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a1cc:	682f      	ldr	r7, [r5, #0]
 800a1ce:	602b      	str	r3, [r5, #0]
 800a1d0:	d032      	beq.n	800a238 <__sflush_r+0x98>
 800a1d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a1d4:	89a3      	ldrh	r3, [r4, #12]
 800a1d6:	075a      	lsls	r2, r3, #29
 800a1d8:	d505      	bpl.n	800a1e6 <__sflush_r+0x46>
 800a1da:	6863      	ldr	r3, [r4, #4]
 800a1dc:	1ac0      	subs	r0, r0, r3
 800a1de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a1e0:	b10b      	cbz	r3, 800a1e6 <__sflush_r+0x46>
 800a1e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a1e4:	1ac0      	subs	r0, r0, r3
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	4602      	mov	r2, r0
 800a1ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a1ec:	4628      	mov	r0, r5
 800a1ee:	6a21      	ldr	r1, [r4, #32]
 800a1f0:	47b0      	blx	r6
 800a1f2:	1c43      	adds	r3, r0, #1
 800a1f4:	89a3      	ldrh	r3, [r4, #12]
 800a1f6:	d106      	bne.n	800a206 <__sflush_r+0x66>
 800a1f8:	6829      	ldr	r1, [r5, #0]
 800a1fa:	291d      	cmp	r1, #29
 800a1fc:	d82c      	bhi.n	800a258 <__sflush_r+0xb8>
 800a1fe:	4a2a      	ldr	r2, [pc, #168]	; (800a2a8 <__sflush_r+0x108>)
 800a200:	40ca      	lsrs	r2, r1
 800a202:	07d6      	lsls	r6, r2, #31
 800a204:	d528      	bpl.n	800a258 <__sflush_r+0xb8>
 800a206:	2200      	movs	r2, #0
 800a208:	6062      	str	r2, [r4, #4]
 800a20a:	6922      	ldr	r2, [r4, #16]
 800a20c:	04d9      	lsls	r1, r3, #19
 800a20e:	6022      	str	r2, [r4, #0]
 800a210:	d504      	bpl.n	800a21c <__sflush_r+0x7c>
 800a212:	1c42      	adds	r2, r0, #1
 800a214:	d101      	bne.n	800a21a <__sflush_r+0x7a>
 800a216:	682b      	ldr	r3, [r5, #0]
 800a218:	b903      	cbnz	r3, 800a21c <__sflush_r+0x7c>
 800a21a:	6560      	str	r0, [r4, #84]	; 0x54
 800a21c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a21e:	602f      	str	r7, [r5, #0]
 800a220:	2900      	cmp	r1, #0
 800a222:	d0ca      	beq.n	800a1ba <__sflush_r+0x1a>
 800a224:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a228:	4299      	cmp	r1, r3
 800a22a:	d002      	beq.n	800a232 <__sflush_r+0x92>
 800a22c:	4628      	mov	r0, r5
 800a22e:	f000 f9d5 	bl	800a5dc <_free_r>
 800a232:	2000      	movs	r0, #0
 800a234:	6360      	str	r0, [r4, #52]	; 0x34
 800a236:	e7c1      	b.n	800a1bc <__sflush_r+0x1c>
 800a238:	6a21      	ldr	r1, [r4, #32]
 800a23a:	2301      	movs	r3, #1
 800a23c:	4628      	mov	r0, r5
 800a23e:	47b0      	blx	r6
 800a240:	1c41      	adds	r1, r0, #1
 800a242:	d1c7      	bne.n	800a1d4 <__sflush_r+0x34>
 800a244:	682b      	ldr	r3, [r5, #0]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d0c4      	beq.n	800a1d4 <__sflush_r+0x34>
 800a24a:	2b1d      	cmp	r3, #29
 800a24c:	d001      	beq.n	800a252 <__sflush_r+0xb2>
 800a24e:	2b16      	cmp	r3, #22
 800a250:	d101      	bne.n	800a256 <__sflush_r+0xb6>
 800a252:	602f      	str	r7, [r5, #0]
 800a254:	e7b1      	b.n	800a1ba <__sflush_r+0x1a>
 800a256:	89a3      	ldrh	r3, [r4, #12]
 800a258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a25c:	81a3      	strh	r3, [r4, #12]
 800a25e:	e7ad      	b.n	800a1bc <__sflush_r+0x1c>
 800a260:	690f      	ldr	r7, [r1, #16]
 800a262:	2f00      	cmp	r7, #0
 800a264:	d0a9      	beq.n	800a1ba <__sflush_r+0x1a>
 800a266:	0793      	lsls	r3, r2, #30
 800a268:	bf18      	it	ne
 800a26a:	2300      	movne	r3, #0
 800a26c:	680e      	ldr	r6, [r1, #0]
 800a26e:	bf08      	it	eq
 800a270:	694b      	ldreq	r3, [r1, #20]
 800a272:	eba6 0807 	sub.w	r8, r6, r7
 800a276:	600f      	str	r7, [r1, #0]
 800a278:	608b      	str	r3, [r1, #8]
 800a27a:	f1b8 0f00 	cmp.w	r8, #0
 800a27e:	dd9c      	ble.n	800a1ba <__sflush_r+0x1a>
 800a280:	4643      	mov	r3, r8
 800a282:	463a      	mov	r2, r7
 800a284:	4628      	mov	r0, r5
 800a286:	6a21      	ldr	r1, [r4, #32]
 800a288:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a28a:	47b0      	blx	r6
 800a28c:	2800      	cmp	r0, #0
 800a28e:	dc06      	bgt.n	800a29e <__sflush_r+0xfe>
 800a290:	89a3      	ldrh	r3, [r4, #12]
 800a292:	f04f 30ff 	mov.w	r0, #4294967295
 800a296:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a29a:	81a3      	strh	r3, [r4, #12]
 800a29c:	e78e      	b.n	800a1bc <__sflush_r+0x1c>
 800a29e:	4407      	add	r7, r0
 800a2a0:	eba8 0800 	sub.w	r8, r8, r0
 800a2a4:	e7e9      	b.n	800a27a <__sflush_r+0xda>
 800a2a6:	bf00      	nop
 800a2a8:	20400001 	.word	0x20400001

0800a2ac <_fflush_r>:
 800a2ac:	b538      	push	{r3, r4, r5, lr}
 800a2ae:	690b      	ldr	r3, [r1, #16]
 800a2b0:	4605      	mov	r5, r0
 800a2b2:	460c      	mov	r4, r1
 800a2b4:	b913      	cbnz	r3, 800a2bc <_fflush_r+0x10>
 800a2b6:	2500      	movs	r5, #0
 800a2b8:	4628      	mov	r0, r5
 800a2ba:	bd38      	pop	{r3, r4, r5, pc}
 800a2bc:	b118      	cbz	r0, 800a2c6 <_fflush_r+0x1a>
 800a2be:	6983      	ldr	r3, [r0, #24]
 800a2c0:	b90b      	cbnz	r3, 800a2c6 <_fflush_r+0x1a>
 800a2c2:	f000 f887 	bl	800a3d4 <__sinit>
 800a2c6:	4b14      	ldr	r3, [pc, #80]	; (800a318 <_fflush_r+0x6c>)
 800a2c8:	429c      	cmp	r4, r3
 800a2ca:	d11b      	bne.n	800a304 <_fflush_r+0x58>
 800a2cc:	686c      	ldr	r4, [r5, #4]
 800a2ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d0ef      	beq.n	800a2b6 <_fflush_r+0xa>
 800a2d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a2d8:	07d0      	lsls	r0, r2, #31
 800a2da:	d404      	bmi.n	800a2e6 <_fflush_r+0x3a>
 800a2dc:	0599      	lsls	r1, r3, #22
 800a2de:	d402      	bmi.n	800a2e6 <_fflush_r+0x3a>
 800a2e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a2e2:	f000 f915 	bl	800a510 <__retarget_lock_acquire_recursive>
 800a2e6:	4628      	mov	r0, r5
 800a2e8:	4621      	mov	r1, r4
 800a2ea:	f7ff ff59 	bl	800a1a0 <__sflush_r>
 800a2ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a2f0:	4605      	mov	r5, r0
 800a2f2:	07da      	lsls	r2, r3, #31
 800a2f4:	d4e0      	bmi.n	800a2b8 <_fflush_r+0xc>
 800a2f6:	89a3      	ldrh	r3, [r4, #12]
 800a2f8:	059b      	lsls	r3, r3, #22
 800a2fa:	d4dd      	bmi.n	800a2b8 <_fflush_r+0xc>
 800a2fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a2fe:	f000 f908 	bl	800a512 <__retarget_lock_release_recursive>
 800a302:	e7d9      	b.n	800a2b8 <_fflush_r+0xc>
 800a304:	4b05      	ldr	r3, [pc, #20]	; (800a31c <_fflush_r+0x70>)
 800a306:	429c      	cmp	r4, r3
 800a308:	d101      	bne.n	800a30e <_fflush_r+0x62>
 800a30a:	68ac      	ldr	r4, [r5, #8]
 800a30c:	e7df      	b.n	800a2ce <_fflush_r+0x22>
 800a30e:	4b04      	ldr	r3, [pc, #16]	; (800a320 <_fflush_r+0x74>)
 800a310:	429c      	cmp	r4, r3
 800a312:	bf08      	it	eq
 800a314:	68ec      	ldreq	r4, [r5, #12]
 800a316:	e7da      	b.n	800a2ce <_fflush_r+0x22>
 800a318:	0800ba50 	.word	0x0800ba50
 800a31c:	0800ba70 	.word	0x0800ba70
 800a320:	0800ba30 	.word	0x0800ba30

0800a324 <std>:
 800a324:	2300      	movs	r3, #0
 800a326:	b510      	push	{r4, lr}
 800a328:	4604      	mov	r4, r0
 800a32a:	e9c0 3300 	strd	r3, r3, [r0]
 800a32e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a332:	6083      	str	r3, [r0, #8]
 800a334:	8181      	strh	r1, [r0, #12]
 800a336:	6643      	str	r3, [r0, #100]	; 0x64
 800a338:	81c2      	strh	r2, [r0, #14]
 800a33a:	6183      	str	r3, [r0, #24]
 800a33c:	4619      	mov	r1, r3
 800a33e:	2208      	movs	r2, #8
 800a340:	305c      	adds	r0, #92	; 0x5c
 800a342:	f7ff fdc1 	bl	8009ec8 <memset>
 800a346:	4b05      	ldr	r3, [pc, #20]	; (800a35c <std+0x38>)
 800a348:	6224      	str	r4, [r4, #32]
 800a34a:	6263      	str	r3, [r4, #36]	; 0x24
 800a34c:	4b04      	ldr	r3, [pc, #16]	; (800a360 <std+0x3c>)
 800a34e:	62a3      	str	r3, [r4, #40]	; 0x28
 800a350:	4b04      	ldr	r3, [pc, #16]	; (800a364 <std+0x40>)
 800a352:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a354:	4b04      	ldr	r3, [pc, #16]	; (800a368 <std+0x44>)
 800a356:	6323      	str	r3, [r4, #48]	; 0x30
 800a358:	bd10      	pop	{r4, pc}
 800a35a:	bf00      	nop
 800a35c:	0800ad25 	.word	0x0800ad25
 800a360:	0800ad47 	.word	0x0800ad47
 800a364:	0800ad7f 	.word	0x0800ad7f
 800a368:	0800ada3 	.word	0x0800ada3

0800a36c <_cleanup_r>:
 800a36c:	4901      	ldr	r1, [pc, #4]	; (800a374 <_cleanup_r+0x8>)
 800a36e:	f000 b8af 	b.w	800a4d0 <_fwalk_reent>
 800a372:	bf00      	nop
 800a374:	0800a2ad 	.word	0x0800a2ad

0800a378 <__sfmoreglue>:
 800a378:	b570      	push	{r4, r5, r6, lr}
 800a37a:	2568      	movs	r5, #104	; 0x68
 800a37c:	1e4a      	subs	r2, r1, #1
 800a37e:	4355      	muls	r5, r2
 800a380:	460e      	mov	r6, r1
 800a382:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a386:	f000 f975 	bl	800a674 <_malloc_r>
 800a38a:	4604      	mov	r4, r0
 800a38c:	b140      	cbz	r0, 800a3a0 <__sfmoreglue+0x28>
 800a38e:	2100      	movs	r1, #0
 800a390:	e9c0 1600 	strd	r1, r6, [r0]
 800a394:	300c      	adds	r0, #12
 800a396:	60a0      	str	r0, [r4, #8]
 800a398:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a39c:	f7ff fd94 	bl	8009ec8 <memset>
 800a3a0:	4620      	mov	r0, r4
 800a3a2:	bd70      	pop	{r4, r5, r6, pc}

0800a3a4 <__sfp_lock_acquire>:
 800a3a4:	4801      	ldr	r0, [pc, #4]	; (800a3ac <__sfp_lock_acquire+0x8>)
 800a3a6:	f000 b8b3 	b.w	800a510 <__retarget_lock_acquire_recursive>
 800a3aa:	bf00      	nop
 800a3ac:	2000095c 	.word	0x2000095c

0800a3b0 <__sfp_lock_release>:
 800a3b0:	4801      	ldr	r0, [pc, #4]	; (800a3b8 <__sfp_lock_release+0x8>)
 800a3b2:	f000 b8ae 	b.w	800a512 <__retarget_lock_release_recursive>
 800a3b6:	bf00      	nop
 800a3b8:	2000095c 	.word	0x2000095c

0800a3bc <__sinit_lock_acquire>:
 800a3bc:	4801      	ldr	r0, [pc, #4]	; (800a3c4 <__sinit_lock_acquire+0x8>)
 800a3be:	f000 b8a7 	b.w	800a510 <__retarget_lock_acquire_recursive>
 800a3c2:	bf00      	nop
 800a3c4:	20000957 	.word	0x20000957

0800a3c8 <__sinit_lock_release>:
 800a3c8:	4801      	ldr	r0, [pc, #4]	; (800a3d0 <__sinit_lock_release+0x8>)
 800a3ca:	f000 b8a2 	b.w	800a512 <__retarget_lock_release_recursive>
 800a3ce:	bf00      	nop
 800a3d0:	20000957 	.word	0x20000957

0800a3d4 <__sinit>:
 800a3d4:	b510      	push	{r4, lr}
 800a3d6:	4604      	mov	r4, r0
 800a3d8:	f7ff fff0 	bl	800a3bc <__sinit_lock_acquire>
 800a3dc:	69a3      	ldr	r3, [r4, #24]
 800a3de:	b11b      	cbz	r3, 800a3e8 <__sinit+0x14>
 800a3e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3e4:	f7ff bff0 	b.w	800a3c8 <__sinit_lock_release>
 800a3e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a3ec:	6523      	str	r3, [r4, #80]	; 0x50
 800a3ee:	4b13      	ldr	r3, [pc, #76]	; (800a43c <__sinit+0x68>)
 800a3f0:	4a13      	ldr	r2, [pc, #76]	; (800a440 <__sinit+0x6c>)
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	62a2      	str	r2, [r4, #40]	; 0x28
 800a3f6:	42a3      	cmp	r3, r4
 800a3f8:	bf08      	it	eq
 800a3fa:	2301      	moveq	r3, #1
 800a3fc:	4620      	mov	r0, r4
 800a3fe:	bf08      	it	eq
 800a400:	61a3      	streq	r3, [r4, #24]
 800a402:	f000 f81f 	bl	800a444 <__sfp>
 800a406:	6060      	str	r0, [r4, #4]
 800a408:	4620      	mov	r0, r4
 800a40a:	f000 f81b 	bl	800a444 <__sfp>
 800a40e:	60a0      	str	r0, [r4, #8]
 800a410:	4620      	mov	r0, r4
 800a412:	f000 f817 	bl	800a444 <__sfp>
 800a416:	2200      	movs	r2, #0
 800a418:	2104      	movs	r1, #4
 800a41a:	60e0      	str	r0, [r4, #12]
 800a41c:	6860      	ldr	r0, [r4, #4]
 800a41e:	f7ff ff81 	bl	800a324 <std>
 800a422:	2201      	movs	r2, #1
 800a424:	2109      	movs	r1, #9
 800a426:	68a0      	ldr	r0, [r4, #8]
 800a428:	f7ff ff7c 	bl	800a324 <std>
 800a42c:	2202      	movs	r2, #2
 800a42e:	2112      	movs	r1, #18
 800a430:	68e0      	ldr	r0, [r4, #12]
 800a432:	f7ff ff77 	bl	800a324 <std>
 800a436:	2301      	movs	r3, #1
 800a438:	61a3      	str	r3, [r4, #24]
 800a43a:	e7d1      	b.n	800a3e0 <__sinit+0xc>
 800a43c:	0800ba2c 	.word	0x0800ba2c
 800a440:	0800a36d 	.word	0x0800a36d

0800a444 <__sfp>:
 800a444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a446:	4607      	mov	r7, r0
 800a448:	f7ff ffac 	bl	800a3a4 <__sfp_lock_acquire>
 800a44c:	4b1e      	ldr	r3, [pc, #120]	; (800a4c8 <__sfp+0x84>)
 800a44e:	681e      	ldr	r6, [r3, #0]
 800a450:	69b3      	ldr	r3, [r6, #24]
 800a452:	b913      	cbnz	r3, 800a45a <__sfp+0x16>
 800a454:	4630      	mov	r0, r6
 800a456:	f7ff ffbd 	bl	800a3d4 <__sinit>
 800a45a:	3648      	adds	r6, #72	; 0x48
 800a45c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a460:	3b01      	subs	r3, #1
 800a462:	d503      	bpl.n	800a46c <__sfp+0x28>
 800a464:	6833      	ldr	r3, [r6, #0]
 800a466:	b30b      	cbz	r3, 800a4ac <__sfp+0x68>
 800a468:	6836      	ldr	r6, [r6, #0]
 800a46a:	e7f7      	b.n	800a45c <__sfp+0x18>
 800a46c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a470:	b9d5      	cbnz	r5, 800a4a8 <__sfp+0x64>
 800a472:	4b16      	ldr	r3, [pc, #88]	; (800a4cc <__sfp+0x88>)
 800a474:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a478:	60e3      	str	r3, [r4, #12]
 800a47a:	6665      	str	r5, [r4, #100]	; 0x64
 800a47c:	f000 f847 	bl	800a50e <__retarget_lock_init_recursive>
 800a480:	f7ff ff96 	bl	800a3b0 <__sfp_lock_release>
 800a484:	2208      	movs	r2, #8
 800a486:	4629      	mov	r1, r5
 800a488:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a48c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a490:	6025      	str	r5, [r4, #0]
 800a492:	61a5      	str	r5, [r4, #24]
 800a494:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a498:	f7ff fd16 	bl	8009ec8 <memset>
 800a49c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a4a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a4a4:	4620      	mov	r0, r4
 800a4a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4a8:	3468      	adds	r4, #104	; 0x68
 800a4aa:	e7d9      	b.n	800a460 <__sfp+0x1c>
 800a4ac:	2104      	movs	r1, #4
 800a4ae:	4638      	mov	r0, r7
 800a4b0:	f7ff ff62 	bl	800a378 <__sfmoreglue>
 800a4b4:	4604      	mov	r4, r0
 800a4b6:	6030      	str	r0, [r6, #0]
 800a4b8:	2800      	cmp	r0, #0
 800a4ba:	d1d5      	bne.n	800a468 <__sfp+0x24>
 800a4bc:	f7ff ff78 	bl	800a3b0 <__sfp_lock_release>
 800a4c0:	230c      	movs	r3, #12
 800a4c2:	603b      	str	r3, [r7, #0]
 800a4c4:	e7ee      	b.n	800a4a4 <__sfp+0x60>
 800a4c6:	bf00      	nop
 800a4c8:	0800ba2c 	.word	0x0800ba2c
 800a4cc:	ffff0001 	.word	0xffff0001

0800a4d0 <_fwalk_reent>:
 800a4d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4d4:	4606      	mov	r6, r0
 800a4d6:	4688      	mov	r8, r1
 800a4d8:	2700      	movs	r7, #0
 800a4da:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a4de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a4e2:	f1b9 0901 	subs.w	r9, r9, #1
 800a4e6:	d505      	bpl.n	800a4f4 <_fwalk_reent+0x24>
 800a4e8:	6824      	ldr	r4, [r4, #0]
 800a4ea:	2c00      	cmp	r4, #0
 800a4ec:	d1f7      	bne.n	800a4de <_fwalk_reent+0xe>
 800a4ee:	4638      	mov	r0, r7
 800a4f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4f4:	89ab      	ldrh	r3, [r5, #12]
 800a4f6:	2b01      	cmp	r3, #1
 800a4f8:	d907      	bls.n	800a50a <_fwalk_reent+0x3a>
 800a4fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a4fe:	3301      	adds	r3, #1
 800a500:	d003      	beq.n	800a50a <_fwalk_reent+0x3a>
 800a502:	4629      	mov	r1, r5
 800a504:	4630      	mov	r0, r6
 800a506:	47c0      	blx	r8
 800a508:	4307      	orrs	r7, r0
 800a50a:	3568      	adds	r5, #104	; 0x68
 800a50c:	e7e9      	b.n	800a4e2 <_fwalk_reent+0x12>

0800a50e <__retarget_lock_init_recursive>:
 800a50e:	4770      	bx	lr

0800a510 <__retarget_lock_acquire_recursive>:
 800a510:	4770      	bx	lr

0800a512 <__retarget_lock_release_recursive>:
 800a512:	4770      	bx	lr

0800a514 <__swhatbuf_r>:
 800a514:	b570      	push	{r4, r5, r6, lr}
 800a516:	460e      	mov	r6, r1
 800a518:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a51c:	4614      	mov	r4, r2
 800a51e:	2900      	cmp	r1, #0
 800a520:	461d      	mov	r5, r3
 800a522:	b096      	sub	sp, #88	; 0x58
 800a524:	da07      	bge.n	800a536 <__swhatbuf_r+0x22>
 800a526:	2300      	movs	r3, #0
 800a528:	602b      	str	r3, [r5, #0]
 800a52a:	89b3      	ldrh	r3, [r6, #12]
 800a52c:	061a      	lsls	r2, r3, #24
 800a52e:	d410      	bmi.n	800a552 <__swhatbuf_r+0x3e>
 800a530:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a534:	e00e      	b.n	800a554 <__swhatbuf_r+0x40>
 800a536:	466a      	mov	r2, sp
 800a538:	f000 fc5a 	bl	800adf0 <_fstat_r>
 800a53c:	2800      	cmp	r0, #0
 800a53e:	dbf2      	blt.n	800a526 <__swhatbuf_r+0x12>
 800a540:	9a01      	ldr	r2, [sp, #4]
 800a542:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a546:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a54a:	425a      	negs	r2, r3
 800a54c:	415a      	adcs	r2, r3
 800a54e:	602a      	str	r2, [r5, #0]
 800a550:	e7ee      	b.n	800a530 <__swhatbuf_r+0x1c>
 800a552:	2340      	movs	r3, #64	; 0x40
 800a554:	2000      	movs	r0, #0
 800a556:	6023      	str	r3, [r4, #0]
 800a558:	b016      	add	sp, #88	; 0x58
 800a55a:	bd70      	pop	{r4, r5, r6, pc}

0800a55c <__smakebuf_r>:
 800a55c:	898b      	ldrh	r3, [r1, #12]
 800a55e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a560:	079d      	lsls	r5, r3, #30
 800a562:	4606      	mov	r6, r0
 800a564:	460c      	mov	r4, r1
 800a566:	d507      	bpl.n	800a578 <__smakebuf_r+0x1c>
 800a568:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a56c:	6023      	str	r3, [r4, #0]
 800a56e:	6123      	str	r3, [r4, #16]
 800a570:	2301      	movs	r3, #1
 800a572:	6163      	str	r3, [r4, #20]
 800a574:	b002      	add	sp, #8
 800a576:	bd70      	pop	{r4, r5, r6, pc}
 800a578:	466a      	mov	r2, sp
 800a57a:	ab01      	add	r3, sp, #4
 800a57c:	f7ff ffca 	bl	800a514 <__swhatbuf_r>
 800a580:	9900      	ldr	r1, [sp, #0]
 800a582:	4605      	mov	r5, r0
 800a584:	4630      	mov	r0, r6
 800a586:	f000 f875 	bl	800a674 <_malloc_r>
 800a58a:	b948      	cbnz	r0, 800a5a0 <__smakebuf_r+0x44>
 800a58c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a590:	059a      	lsls	r2, r3, #22
 800a592:	d4ef      	bmi.n	800a574 <__smakebuf_r+0x18>
 800a594:	f023 0303 	bic.w	r3, r3, #3
 800a598:	f043 0302 	orr.w	r3, r3, #2
 800a59c:	81a3      	strh	r3, [r4, #12]
 800a59e:	e7e3      	b.n	800a568 <__smakebuf_r+0xc>
 800a5a0:	4b0d      	ldr	r3, [pc, #52]	; (800a5d8 <__smakebuf_r+0x7c>)
 800a5a2:	62b3      	str	r3, [r6, #40]	; 0x28
 800a5a4:	89a3      	ldrh	r3, [r4, #12]
 800a5a6:	6020      	str	r0, [r4, #0]
 800a5a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5ac:	81a3      	strh	r3, [r4, #12]
 800a5ae:	9b00      	ldr	r3, [sp, #0]
 800a5b0:	6120      	str	r0, [r4, #16]
 800a5b2:	6163      	str	r3, [r4, #20]
 800a5b4:	9b01      	ldr	r3, [sp, #4]
 800a5b6:	b15b      	cbz	r3, 800a5d0 <__smakebuf_r+0x74>
 800a5b8:	4630      	mov	r0, r6
 800a5ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a5be:	f000 fc29 	bl	800ae14 <_isatty_r>
 800a5c2:	b128      	cbz	r0, 800a5d0 <__smakebuf_r+0x74>
 800a5c4:	89a3      	ldrh	r3, [r4, #12]
 800a5c6:	f023 0303 	bic.w	r3, r3, #3
 800a5ca:	f043 0301 	orr.w	r3, r3, #1
 800a5ce:	81a3      	strh	r3, [r4, #12]
 800a5d0:	89a0      	ldrh	r0, [r4, #12]
 800a5d2:	4305      	orrs	r5, r0
 800a5d4:	81a5      	strh	r5, [r4, #12]
 800a5d6:	e7cd      	b.n	800a574 <__smakebuf_r+0x18>
 800a5d8:	0800a36d 	.word	0x0800a36d

0800a5dc <_free_r>:
 800a5dc:	b538      	push	{r3, r4, r5, lr}
 800a5de:	4605      	mov	r5, r0
 800a5e0:	2900      	cmp	r1, #0
 800a5e2:	d043      	beq.n	800a66c <_free_r+0x90>
 800a5e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a5e8:	1f0c      	subs	r4, r1, #4
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	bfb8      	it	lt
 800a5ee:	18e4      	addlt	r4, r4, r3
 800a5f0:	f000 fc40 	bl	800ae74 <__malloc_lock>
 800a5f4:	4a1e      	ldr	r2, [pc, #120]	; (800a670 <_free_r+0x94>)
 800a5f6:	6813      	ldr	r3, [r2, #0]
 800a5f8:	4610      	mov	r0, r2
 800a5fa:	b933      	cbnz	r3, 800a60a <_free_r+0x2e>
 800a5fc:	6063      	str	r3, [r4, #4]
 800a5fe:	6014      	str	r4, [r2, #0]
 800a600:	4628      	mov	r0, r5
 800a602:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a606:	f000 bc3b 	b.w	800ae80 <__malloc_unlock>
 800a60a:	42a3      	cmp	r3, r4
 800a60c:	d90a      	bls.n	800a624 <_free_r+0x48>
 800a60e:	6821      	ldr	r1, [r4, #0]
 800a610:	1862      	adds	r2, r4, r1
 800a612:	4293      	cmp	r3, r2
 800a614:	bf01      	itttt	eq
 800a616:	681a      	ldreq	r2, [r3, #0]
 800a618:	685b      	ldreq	r3, [r3, #4]
 800a61a:	1852      	addeq	r2, r2, r1
 800a61c:	6022      	streq	r2, [r4, #0]
 800a61e:	6063      	str	r3, [r4, #4]
 800a620:	6004      	str	r4, [r0, #0]
 800a622:	e7ed      	b.n	800a600 <_free_r+0x24>
 800a624:	461a      	mov	r2, r3
 800a626:	685b      	ldr	r3, [r3, #4]
 800a628:	b10b      	cbz	r3, 800a62e <_free_r+0x52>
 800a62a:	42a3      	cmp	r3, r4
 800a62c:	d9fa      	bls.n	800a624 <_free_r+0x48>
 800a62e:	6811      	ldr	r1, [r2, #0]
 800a630:	1850      	adds	r0, r2, r1
 800a632:	42a0      	cmp	r0, r4
 800a634:	d10b      	bne.n	800a64e <_free_r+0x72>
 800a636:	6820      	ldr	r0, [r4, #0]
 800a638:	4401      	add	r1, r0
 800a63a:	1850      	adds	r0, r2, r1
 800a63c:	4283      	cmp	r3, r0
 800a63e:	6011      	str	r1, [r2, #0]
 800a640:	d1de      	bne.n	800a600 <_free_r+0x24>
 800a642:	6818      	ldr	r0, [r3, #0]
 800a644:	685b      	ldr	r3, [r3, #4]
 800a646:	4401      	add	r1, r0
 800a648:	6011      	str	r1, [r2, #0]
 800a64a:	6053      	str	r3, [r2, #4]
 800a64c:	e7d8      	b.n	800a600 <_free_r+0x24>
 800a64e:	d902      	bls.n	800a656 <_free_r+0x7a>
 800a650:	230c      	movs	r3, #12
 800a652:	602b      	str	r3, [r5, #0]
 800a654:	e7d4      	b.n	800a600 <_free_r+0x24>
 800a656:	6820      	ldr	r0, [r4, #0]
 800a658:	1821      	adds	r1, r4, r0
 800a65a:	428b      	cmp	r3, r1
 800a65c:	bf01      	itttt	eq
 800a65e:	6819      	ldreq	r1, [r3, #0]
 800a660:	685b      	ldreq	r3, [r3, #4]
 800a662:	1809      	addeq	r1, r1, r0
 800a664:	6021      	streq	r1, [r4, #0]
 800a666:	6063      	str	r3, [r4, #4]
 800a668:	6054      	str	r4, [r2, #4]
 800a66a:	e7c9      	b.n	800a600 <_free_r+0x24>
 800a66c:	bd38      	pop	{r3, r4, r5, pc}
 800a66e:	bf00      	nop
 800a670:	2000027c 	.word	0x2000027c

0800a674 <_malloc_r>:
 800a674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a676:	1ccd      	adds	r5, r1, #3
 800a678:	f025 0503 	bic.w	r5, r5, #3
 800a67c:	3508      	adds	r5, #8
 800a67e:	2d0c      	cmp	r5, #12
 800a680:	bf38      	it	cc
 800a682:	250c      	movcc	r5, #12
 800a684:	2d00      	cmp	r5, #0
 800a686:	4606      	mov	r6, r0
 800a688:	db01      	blt.n	800a68e <_malloc_r+0x1a>
 800a68a:	42a9      	cmp	r1, r5
 800a68c:	d903      	bls.n	800a696 <_malloc_r+0x22>
 800a68e:	230c      	movs	r3, #12
 800a690:	6033      	str	r3, [r6, #0]
 800a692:	2000      	movs	r0, #0
 800a694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a696:	f000 fbed 	bl	800ae74 <__malloc_lock>
 800a69a:	4921      	ldr	r1, [pc, #132]	; (800a720 <_malloc_r+0xac>)
 800a69c:	680a      	ldr	r2, [r1, #0]
 800a69e:	4614      	mov	r4, r2
 800a6a0:	b99c      	cbnz	r4, 800a6ca <_malloc_r+0x56>
 800a6a2:	4f20      	ldr	r7, [pc, #128]	; (800a724 <_malloc_r+0xb0>)
 800a6a4:	683b      	ldr	r3, [r7, #0]
 800a6a6:	b923      	cbnz	r3, 800a6b2 <_malloc_r+0x3e>
 800a6a8:	4621      	mov	r1, r4
 800a6aa:	4630      	mov	r0, r6
 800a6ac:	f000 fb2a 	bl	800ad04 <_sbrk_r>
 800a6b0:	6038      	str	r0, [r7, #0]
 800a6b2:	4629      	mov	r1, r5
 800a6b4:	4630      	mov	r0, r6
 800a6b6:	f000 fb25 	bl	800ad04 <_sbrk_r>
 800a6ba:	1c43      	adds	r3, r0, #1
 800a6bc:	d123      	bne.n	800a706 <_malloc_r+0x92>
 800a6be:	230c      	movs	r3, #12
 800a6c0:	4630      	mov	r0, r6
 800a6c2:	6033      	str	r3, [r6, #0]
 800a6c4:	f000 fbdc 	bl	800ae80 <__malloc_unlock>
 800a6c8:	e7e3      	b.n	800a692 <_malloc_r+0x1e>
 800a6ca:	6823      	ldr	r3, [r4, #0]
 800a6cc:	1b5b      	subs	r3, r3, r5
 800a6ce:	d417      	bmi.n	800a700 <_malloc_r+0x8c>
 800a6d0:	2b0b      	cmp	r3, #11
 800a6d2:	d903      	bls.n	800a6dc <_malloc_r+0x68>
 800a6d4:	6023      	str	r3, [r4, #0]
 800a6d6:	441c      	add	r4, r3
 800a6d8:	6025      	str	r5, [r4, #0]
 800a6da:	e004      	b.n	800a6e6 <_malloc_r+0x72>
 800a6dc:	6863      	ldr	r3, [r4, #4]
 800a6de:	42a2      	cmp	r2, r4
 800a6e0:	bf0c      	ite	eq
 800a6e2:	600b      	streq	r3, [r1, #0]
 800a6e4:	6053      	strne	r3, [r2, #4]
 800a6e6:	4630      	mov	r0, r6
 800a6e8:	f000 fbca 	bl	800ae80 <__malloc_unlock>
 800a6ec:	f104 000b 	add.w	r0, r4, #11
 800a6f0:	1d23      	adds	r3, r4, #4
 800a6f2:	f020 0007 	bic.w	r0, r0, #7
 800a6f6:	1ac2      	subs	r2, r0, r3
 800a6f8:	d0cc      	beq.n	800a694 <_malloc_r+0x20>
 800a6fa:	1a1b      	subs	r3, r3, r0
 800a6fc:	50a3      	str	r3, [r4, r2]
 800a6fe:	e7c9      	b.n	800a694 <_malloc_r+0x20>
 800a700:	4622      	mov	r2, r4
 800a702:	6864      	ldr	r4, [r4, #4]
 800a704:	e7cc      	b.n	800a6a0 <_malloc_r+0x2c>
 800a706:	1cc4      	adds	r4, r0, #3
 800a708:	f024 0403 	bic.w	r4, r4, #3
 800a70c:	42a0      	cmp	r0, r4
 800a70e:	d0e3      	beq.n	800a6d8 <_malloc_r+0x64>
 800a710:	1a21      	subs	r1, r4, r0
 800a712:	4630      	mov	r0, r6
 800a714:	f000 faf6 	bl	800ad04 <_sbrk_r>
 800a718:	3001      	adds	r0, #1
 800a71a:	d1dd      	bne.n	800a6d8 <_malloc_r+0x64>
 800a71c:	e7cf      	b.n	800a6be <_malloc_r+0x4a>
 800a71e:	bf00      	nop
 800a720:	2000027c 	.word	0x2000027c
 800a724:	20000280 	.word	0x20000280

0800a728 <__sfputc_r>:
 800a728:	6893      	ldr	r3, [r2, #8]
 800a72a:	b410      	push	{r4}
 800a72c:	3b01      	subs	r3, #1
 800a72e:	2b00      	cmp	r3, #0
 800a730:	6093      	str	r3, [r2, #8]
 800a732:	da07      	bge.n	800a744 <__sfputc_r+0x1c>
 800a734:	6994      	ldr	r4, [r2, #24]
 800a736:	42a3      	cmp	r3, r4
 800a738:	db01      	blt.n	800a73e <__sfputc_r+0x16>
 800a73a:	290a      	cmp	r1, #10
 800a73c:	d102      	bne.n	800a744 <__sfputc_r+0x1c>
 800a73e:	bc10      	pop	{r4}
 800a740:	f7ff bc6e 	b.w	800a020 <__swbuf_r>
 800a744:	6813      	ldr	r3, [r2, #0]
 800a746:	1c58      	adds	r0, r3, #1
 800a748:	6010      	str	r0, [r2, #0]
 800a74a:	7019      	strb	r1, [r3, #0]
 800a74c:	4608      	mov	r0, r1
 800a74e:	bc10      	pop	{r4}
 800a750:	4770      	bx	lr

0800a752 <__sfputs_r>:
 800a752:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a754:	4606      	mov	r6, r0
 800a756:	460f      	mov	r7, r1
 800a758:	4614      	mov	r4, r2
 800a75a:	18d5      	adds	r5, r2, r3
 800a75c:	42ac      	cmp	r4, r5
 800a75e:	d101      	bne.n	800a764 <__sfputs_r+0x12>
 800a760:	2000      	movs	r0, #0
 800a762:	e007      	b.n	800a774 <__sfputs_r+0x22>
 800a764:	463a      	mov	r2, r7
 800a766:	4630      	mov	r0, r6
 800a768:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a76c:	f7ff ffdc 	bl	800a728 <__sfputc_r>
 800a770:	1c43      	adds	r3, r0, #1
 800a772:	d1f3      	bne.n	800a75c <__sfputs_r+0xa>
 800a774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a778 <_vfiprintf_r>:
 800a778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a77c:	460d      	mov	r5, r1
 800a77e:	4614      	mov	r4, r2
 800a780:	4698      	mov	r8, r3
 800a782:	4606      	mov	r6, r0
 800a784:	b09d      	sub	sp, #116	; 0x74
 800a786:	b118      	cbz	r0, 800a790 <_vfiprintf_r+0x18>
 800a788:	6983      	ldr	r3, [r0, #24]
 800a78a:	b90b      	cbnz	r3, 800a790 <_vfiprintf_r+0x18>
 800a78c:	f7ff fe22 	bl	800a3d4 <__sinit>
 800a790:	4b89      	ldr	r3, [pc, #548]	; (800a9b8 <_vfiprintf_r+0x240>)
 800a792:	429d      	cmp	r5, r3
 800a794:	d11b      	bne.n	800a7ce <_vfiprintf_r+0x56>
 800a796:	6875      	ldr	r5, [r6, #4]
 800a798:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a79a:	07d9      	lsls	r1, r3, #31
 800a79c:	d405      	bmi.n	800a7aa <_vfiprintf_r+0x32>
 800a79e:	89ab      	ldrh	r3, [r5, #12]
 800a7a0:	059a      	lsls	r2, r3, #22
 800a7a2:	d402      	bmi.n	800a7aa <_vfiprintf_r+0x32>
 800a7a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a7a6:	f7ff feb3 	bl	800a510 <__retarget_lock_acquire_recursive>
 800a7aa:	89ab      	ldrh	r3, [r5, #12]
 800a7ac:	071b      	lsls	r3, r3, #28
 800a7ae:	d501      	bpl.n	800a7b4 <_vfiprintf_r+0x3c>
 800a7b0:	692b      	ldr	r3, [r5, #16]
 800a7b2:	b9eb      	cbnz	r3, 800a7f0 <_vfiprintf_r+0x78>
 800a7b4:	4629      	mov	r1, r5
 800a7b6:	4630      	mov	r0, r6
 800a7b8:	f7ff fc84 	bl	800a0c4 <__swsetup_r>
 800a7bc:	b1c0      	cbz	r0, 800a7f0 <_vfiprintf_r+0x78>
 800a7be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a7c0:	07dc      	lsls	r4, r3, #31
 800a7c2:	d50e      	bpl.n	800a7e2 <_vfiprintf_r+0x6a>
 800a7c4:	f04f 30ff 	mov.w	r0, #4294967295
 800a7c8:	b01d      	add	sp, #116	; 0x74
 800a7ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7ce:	4b7b      	ldr	r3, [pc, #492]	; (800a9bc <_vfiprintf_r+0x244>)
 800a7d0:	429d      	cmp	r5, r3
 800a7d2:	d101      	bne.n	800a7d8 <_vfiprintf_r+0x60>
 800a7d4:	68b5      	ldr	r5, [r6, #8]
 800a7d6:	e7df      	b.n	800a798 <_vfiprintf_r+0x20>
 800a7d8:	4b79      	ldr	r3, [pc, #484]	; (800a9c0 <_vfiprintf_r+0x248>)
 800a7da:	429d      	cmp	r5, r3
 800a7dc:	bf08      	it	eq
 800a7de:	68f5      	ldreq	r5, [r6, #12]
 800a7e0:	e7da      	b.n	800a798 <_vfiprintf_r+0x20>
 800a7e2:	89ab      	ldrh	r3, [r5, #12]
 800a7e4:	0598      	lsls	r0, r3, #22
 800a7e6:	d4ed      	bmi.n	800a7c4 <_vfiprintf_r+0x4c>
 800a7e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a7ea:	f7ff fe92 	bl	800a512 <__retarget_lock_release_recursive>
 800a7ee:	e7e9      	b.n	800a7c4 <_vfiprintf_r+0x4c>
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	9309      	str	r3, [sp, #36]	; 0x24
 800a7f4:	2320      	movs	r3, #32
 800a7f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a7fa:	2330      	movs	r3, #48	; 0x30
 800a7fc:	f04f 0901 	mov.w	r9, #1
 800a800:	f8cd 800c 	str.w	r8, [sp, #12]
 800a804:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800a9c4 <_vfiprintf_r+0x24c>
 800a808:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a80c:	4623      	mov	r3, r4
 800a80e:	469a      	mov	sl, r3
 800a810:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a814:	b10a      	cbz	r2, 800a81a <_vfiprintf_r+0xa2>
 800a816:	2a25      	cmp	r2, #37	; 0x25
 800a818:	d1f9      	bne.n	800a80e <_vfiprintf_r+0x96>
 800a81a:	ebba 0b04 	subs.w	fp, sl, r4
 800a81e:	d00b      	beq.n	800a838 <_vfiprintf_r+0xc0>
 800a820:	465b      	mov	r3, fp
 800a822:	4622      	mov	r2, r4
 800a824:	4629      	mov	r1, r5
 800a826:	4630      	mov	r0, r6
 800a828:	f7ff ff93 	bl	800a752 <__sfputs_r>
 800a82c:	3001      	adds	r0, #1
 800a82e:	f000 80aa 	beq.w	800a986 <_vfiprintf_r+0x20e>
 800a832:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a834:	445a      	add	r2, fp
 800a836:	9209      	str	r2, [sp, #36]	; 0x24
 800a838:	f89a 3000 	ldrb.w	r3, [sl]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	f000 80a2 	beq.w	800a986 <_vfiprintf_r+0x20e>
 800a842:	2300      	movs	r3, #0
 800a844:	f04f 32ff 	mov.w	r2, #4294967295
 800a848:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a84c:	f10a 0a01 	add.w	sl, sl, #1
 800a850:	9304      	str	r3, [sp, #16]
 800a852:	9307      	str	r3, [sp, #28]
 800a854:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a858:	931a      	str	r3, [sp, #104]	; 0x68
 800a85a:	4654      	mov	r4, sl
 800a85c:	2205      	movs	r2, #5
 800a85e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a862:	4858      	ldr	r0, [pc, #352]	; (800a9c4 <_vfiprintf_r+0x24c>)
 800a864:	f000 faf8 	bl	800ae58 <memchr>
 800a868:	9a04      	ldr	r2, [sp, #16]
 800a86a:	b9d8      	cbnz	r0, 800a8a4 <_vfiprintf_r+0x12c>
 800a86c:	06d1      	lsls	r1, r2, #27
 800a86e:	bf44      	itt	mi
 800a870:	2320      	movmi	r3, #32
 800a872:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a876:	0713      	lsls	r3, r2, #28
 800a878:	bf44      	itt	mi
 800a87a:	232b      	movmi	r3, #43	; 0x2b
 800a87c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a880:	f89a 3000 	ldrb.w	r3, [sl]
 800a884:	2b2a      	cmp	r3, #42	; 0x2a
 800a886:	d015      	beq.n	800a8b4 <_vfiprintf_r+0x13c>
 800a888:	4654      	mov	r4, sl
 800a88a:	2000      	movs	r0, #0
 800a88c:	f04f 0c0a 	mov.w	ip, #10
 800a890:	9a07      	ldr	r2, [sp, #28]
 800a892:	4621      	mov	r1, r4
 800a894:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a898:	3b30      	subs	r3, #48	; 0x30
 800a89a:	2b09      	cmp	r3, #9
 800a89c:	d94e      	bls.n	800a93c <_vfiprintf_r+0x1c4>
 800a89e:	b1b0      	cbz	r0, 800a8ce <_vfiprintf_r+0x156>
 800a8a0:	9207      	str	r2, [sp, #28]
 800a8a2:	e014      	b.n	800a8ce <_vfiprintf_r+0x156>
 800a8a4:	eba0 0308 	sub.w	r3, r0, r8
 800a8a8:	fa09 f303 	lsl.w	r3, r9, r3
 800a8ac:	4313      	orrs	r3, r2
 800a8ae:	46a2      	mov	sl, r4
 800a8b0:	9304      	str	r3, [sp, #16]
 800a8b2:	e7d2      	b.n	800a85a <_vfiprintf_r+0xe2>
 800a8b4:	9b03      	ldr	r3, [sp, #12]
 800a8b6:	1d19      	adds	r1, r3, #4
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	9103      	str	r1, [sp, #12]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	bfbb      	ittet	lt
 800a8c0:	425b      	neglt	r3, r3
 800a8c2:	f042 0202 	orrlt.w	r2, r2, #2
 800a8c6:	9307      	strge	r3, [sp, #28]
 800a8c8:	9307      	strlt	r3, [sp, #28]
 800a8ca:	bfb8      	it	lt
 800a8cc:	9204      	strlt	r2, [sp, #16]
 800a8ce:	7823      	ldrb	r3, [r4, #0]
 800a8d0:	2b2e      	cmp	r3, #46	; 0x2e
 800a8d2:	d10c      	bne.n	800a8ee <_vfiprintf_r+0x176>
 800a8d4:	7863      	ldrb	r3, [r4, #1]
 800a8d6:	2b2a      	cmp	r3, #42	; 0x2a
 800a8d8:	d135      	bne.n	800a946 <_vfiprintf_r+0x1ce>
 800a8da:	9b03      	ldr	r3, [sp, #12]
 800a8dc:	3402      	adds	r4, #2
 800a8de:	1d1a      	adds	r2, r3, #4
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	9203      	str	r2, [sp, #12]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	bfb8      	it	lt
 800a8e8:	f04f 33ff 	movlt.w	r3, #4294967295
 800a8ec:	9305      	str	r3, [sp, #20]
 800a8ee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a9d4 <_vfiprintf_r+0x25c>
 800a8f2:	2203      	movs	r2, #3
 800a8f4:	4650      	mov	r0, sl
 800a8f6:	7821      	ldrb	r1, [r4, #0]
 800a8f8:	f000 faae 	bl	800ae58 <memchr>
 800a8fc:	b140      	cbz	r0, 800a910 <_vfiprintf_r+0x198>
 800a8fe:	2340      	movs	r3, #64	; 0x40
 800a900:	eba0 000a 	sub.w	r0, r0, sl
 800a904:	fa03 f000 	lsl.w	r0, r3, r0
 800a908:	9b04      	ldr	r3, [sp, #16]
 800a90a:	3401      	adds	r4, #1
 800a90c:	4303      	orrs	r3, r0
 800a90e:	9304      	str	r3, [sp, #16]
 800a910:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a914:	2206      	movs	r2, #6
 800a916:	482c      	ldr	r0, [pc, #176]	; (800a9c8 <_vfiprintf_r+0x250>)
 800a918:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a91c:	f000 fa9c 	bl	800ae58 <memchr>
 800a920:	2800      	cmp	r0, #0
 800a922:	d03f      	beq.n	800a9a4 <_vfiprintf_r+0x22c>
 800a924:	4b29      	ldr	r3, [pc, #164]	; (800a9cc <_vfiprintf_r+0x254>)
 800a926:	bb1b      	cbnz	r3, 800a970 <_vfiprintf_r+0x1f8>
 800a928:	9b03      	ldr	r3, [sp, #12]
 800a92a:	3307      	adds	r3, #7
 800a92c:	f023 0307 	bic.w	r3, r3, #7
 800a930:	3308      	adds	r3, #8
 800a932:	9303      	str	r3, [sp, #12]
 800a934:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a936:	443b      	add	r3, r7
 800a938:	9309      	str	r3, [sp, #36]	; 0x24
 800a93a:	e767      	b.n	800a80c <_vfiprintf_r+0x94>
 800a93c:	460c      	mov	r4, r1
 800a93e:	2001      	movs	r0, #1
 800a940:	fb0c 3202 	mla	r2, ip, r2, r3
 800a944:	e7a5      	b.n	800a892 <_vfiprintf_r+0x11a>
 800a946:	2300      	movs	r3, #0
 800a948:	f04f 0c0a 	mov.w	ip, #10
 800a94c:	4619      	mov	r1, r3
 800a94e:	3401      	adds	r4, #1
 800a950:	9305      	str	r3, [sp, #20]
 800a952:	4620      	mov	r0, r4
 800a954:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a958:	3a30      	subs	r2, #48	; 0x30
 800a95a:	2a09      	cmp	r2, #9
 800a95c:	d903      	bls.n	800a966 <_vfiprintf_r+0x1ee>
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d0c5      	beq.n	800a8ee <_vfiprintf_r+0x176>
 800a962:	9105      	str	r1, [sp, #20]
 800a964:	e7c3      	b.n	800a8ee <_vfiprintf_r+0x176>
 800a966:	4604      	mov	r4, r0
 800a968:	2301      	movs	r3, #1
 800a96a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a96e:	e7f0      	b.n	800a952 <_vfiprintf_r+0x1da>
 800a970:	ab03      	add	r3, sp, #12
 800a972:	9300      	str	r3, [sp, #0]
 800a974:	462a      	mov	r2, r5
 800a976:	4630      	mov	r0, r6
 800a978:	4b15      	ldr	r3, [pc, #84]	; (800a9d0 <_vfiprintf_r+0x258>)
 800a97a:	a904      	add	r1, sp, #16
 800a97c:	f3af 8000 	nop.w
 800a980:	4607      	mov	r7, r0
 800a982:	1c78      	adds	r0, r7, #1
 800a984:	d1d6      	bne.n	800a934 <_vfiprintf_r+0x1bc>
 800a986:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a988:	07d9      	lsls	r1, r3, #31
 800a98a:	d405      	bmi.n	800a998 <_vfiprintf_r+0x220>
 800a98c:	89ab      	ldrh	r3, [r5, #12]
 800a98e:	059a      	lsls	r2, r3, #22
 800a990:	d402      	bmi.n	800a998 <_vfiprintf_r+0x220>
 800a992:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a994:	f7ff fdbd 	bl	800a512 <__retarget_lock_release_recursive>
 800a998:	89ab      	ldrh	r3, [r5, #12]
 800a99a:	065b      	lsls	r3, r3, #25
 800a99c:	f53f af12 	bmi.w	800a7c4 <_vfiprintf_r+0x4c>
 800a9a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a9a2:	e711      	b.n	800a7c8 <_vfiprintf_r+0x50>
 800a9a4:	ab03      	add	r3, sp, #12
 800a9a6:	9300      	str	r3, [sp, #0]
 800a9a8:	462a      	mov	r2, r5
 800a9aa:	4630      	mov	r0, r6
 800a9ac:	4b08      	ldr	r3, [pc, #32]	; (800a9d0 <_vfiprintf_r+0x258>)
 800a9ae:	a904      	add	r1, sp, #16
 800a9b0:	f000 f882 	bl	800aab8 <_printf_i>
 800a9b4:	e7e4      	b.n	800a980 <_vfiprintf_r+0x208>
 800a9b6:	bf00      	nop
 800a9b8:	0800ba50 	.word	0x0800ba50
 800a9bc:	0800ba70 	.word	0x0800ba70
 800a9c0:	0800ba30 	.word	0x0800ba30
 800a9c4:	0800ba90 	.word	0x0800ba90
 800a9c8:	0800ba9a 	.word	0x0800ba9a
 800a9cc:	00000000 	.word	0x00000000
 800a9d0:	0800a753 	.word	0x0800a753
 800a9d4:	0800ba96 	.word	0x0800ba96

0800a9d8 <_printf_common>:
 800a9d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9dc:	4616      	mov	r6, r2
 800a9de:	4699      	mov	r9, r3
 800a9e0:	688a      	ldr	r2, [r1, #8]
 800a9e2:	690b      	ldr	r3, [r1, #16]
 800a9e4:	4607      	mov	r7, r0
 800a9e6:	4293      	cmp	r3, r2
 800a9e8:	bfb8      	it	lt
 800a9ea:	4613      	movlt	r3, r2
 800a9ec:	6033      	str	r3, [r6, #0]
 800a9ee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a9f2:	460c      	mov	r4, r1
 800a9f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a9f8:	b10a      	cbz	r2, 800a9fe <_printf_common+0x26>
 800a9fa:	3301      	adds	r3, #1
 800a9fc:	6033      	str	r3, [r6, #0]
 800a9fe:	6823      	ldr	r3, [r4, #0]
 800aa00:	0699      	lsls	r1, r3, #26
 800aa02:	bf42      	ittt	mi
 800aa04:	6833      	ldrmi	r3, [r6, #0]
 800aa06:	3302      	addmi	r3, #2
 800aa08:	6033      	strmi	r3, [r6, #0]
 800aa0a:	6825      	ldr	r5, [r4, #0]
 800aa0c:	f015 0506 	ands.w	r5, r5, #6
 800aa10:	d106      	bne.n	800aa20 <_printf_common+0x48>
 800aa12:	f104 0a19 	add.w	sl, r4, #25
 800aa16:	68e3      	ldr	r3, [r4, #12]
 800aa18:	6832      	ldr	r2, [r6, #0]
 800aa1a:	1a9b      	subs	r3, r3, r2
 800aa1c:	42ab      	cmp	r3, r5
 800aa1e:	dc28      	bgt.n	800aa72 <_printf_common+0x9a>
 800aa20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aa24:	1e13      	subs	r3, r2, #0
 800aa26:	6822      	ldr	r2, [r4, #0]
 800aa28:	bf18      	it	ne
 800aa2a:	2301      	movne	r3, #1
 800aa2c:	0692      	lsls	r2, r2, #26
 800aa2e:	d42d      	bmi.n	800aa8c <_printf_common+0xb4>
 800aa30:	4649      	mov	r1, r9
 800aa32:	4638      	mov	r0, r7
 800aa34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aa38:	47c0      	blx	r8
 800aa3a:	3001      	adds	r0, #1
 800aa3c:	d020      	beq.n	800aa80 <_printf_common+0xa8>
 800aa3e:	6823      	ldr	r3, [r4, #0]
 800aa40:	68e5      	ldr	r5, [r4, #12]
 800aa42:	f003 0306 	and.w	r3, r3, #6
 800aa46:	2b04      	cmp	r3, #4
 800aa48:	bf18      	it	ne
 800aa4a:	2500      	movne	r5, #0
 800aa4c:	6832      	ldr	r2, [r6, #0]
 800aa4e:	f04f 0600 	mov.w	r6, #0
 800aa52:	68a3      	ldr	r3, [r4, #8]
 800aa54:	bf08      	it	eq
 800aa56:	1aad      	subeq	r5, r5, r2
 800aa58:	6922      	ldr	r2, [r4, #16]
 800aa5a:	bf08      	it	eq
 800aa5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aa60:	4293      	cmp	r3, r2
 800aa62:	bfc4      	itt	gt
 800aa64:	1a9b      	subgt	r3, r3, r2
 800aa66:	18ed      	addgt	r5, r5, r3
 800aa68:	341a      	adds	r4, #26
 800aa6a:	42b5      	cmp	r5, r6
 800aa6c:	d11a      	bne.n	800aaa4 <_printf_common+0xcc>
 800aa6e:	2000      	movs	r0, #0
 800aa70:	e008      	b.n	800aa84 <_printf_common+0xac>
 800aa72:	2301      	movs	r3, #1
 800aa74:	4652      	mov	r2, sl
 800aa76:	4649      	mov	r1, r9
 800aa78:	4638      	mov	r0, r7
 800aa7a:	47c0      	blx	r8
 800aa7c:	3001      	adds	r0, #1
 800aa7e:	d103      	bne.n	800aa88 <_printf_common+0xb0>
 800aa80:	f04f 30ff 	mov.w	r0, #4294967295
 800aa84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa88:	3501      	adds	r5, #1
 800aa8a:	e7c4      	b.n	800aa16 <_printf_common+0x3e>
 800aa8c:	2030      	movs	r0, #48	; 0x30
 800aa8e:	18e1      	adds	r1, r4, r3
 800aa90:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aa94:	1c5a      	adds	r2, r3, #1
 800aa96:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aa9a:	4422      	add	r2, r4
 800aa9c:	3302      	adds	r3, #2
 800aa9e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aaa2:	e7c5      	b.n	800aa30 <_printf_common+0x58>
 800aaa4:	2301      	movs	r3, #1
 800aaa6:	4622      	mov	r2, r4
 800aaa8:	4649      	mov	r1, r9
 800aaaa:	4638      	mov	r0, r7
 800aaac:	47c0      	blx	r8
 800aaae:	3001      	adds	r0, #1
 800aab0:	d0e6      	beq.n	800aa80 <_printf_common+0xa8>
 800aab2:	3601      	adds	r6, #1
 800aab4:	e7d9      	b.n	800aa6a <_printf_common+0x92>
	...

0800aab8 <_printf_i>:
 800aab8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aabc:	460c      	mov	r4, r1
 800aabe:	7e27      	ldrb	r7, [r4, #24]
 800aac0:	4691      	mov	r9, r2
 800aac2:	2f78      	cmp	r7, #120	; 0x78
 800aac4:	4680      	mov	r8, r0
 800aac6:	469a      	mov	sl, r3
 800aac8:	990c      	ldr	r1, [sp, #48]	; 0x30
 800aaca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aace:	d807      	bhi.n	800aae0 <_printf_i+0x28>
 800aad0:	2f62      	cmp	r7, #98	; 0x62
 800aad2:	d80a      	bhi.n	800aaea <_printf_i+0x32>
 800aad4:	2f00      	cmp	r7, #0
 800aad6:	f000 80d9 	beq.w	800ac8c <_printf_i+0x1d4>
 800aada:	2f58      	cmp	r7, #88	; 0x58
 800aadc:	f000 80a4 	beq.w	800ac28 <_printf_i+0x170>
 800aae0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800aae4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800aae8:	e03a      	b.n	800ab60 <_printf_i+0xa8>
 800aaea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800aaee:	2b15      	cmp	r3, #21
 800aaf0:	d8f6      	bhi.n	800aae0 <_printf_i+0x28>
 800aaf2:	a001      	add	r0, pc, #4	; (adr r0, 800aaf8 <_printf_i+0x40>)
 800aaf4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800aaf8:	0800ab51 	.word	0x0800ab51
 800aafc:	0800ab65 	.word	0x0800ab65
 800ab00:	0800aae1 	.word	0x0800aae1
 800ab04:	0800aae1 	.word	0x0800aae1
 800ab08:	0800aae1 	.word	0x0800aae1
 800ab0c:	0800aae1 	.word	0x0800aae1
 800ab10:	0800ab65 	.word	0x0800ab65
 800ab14:	0800aae1 	.word	0x0800aae1
 800ab18:	0800aae1 	.word	0x0800aae1
 800ab1c:	0800aae1 	.word	0x0800aae1
 800ab20:	0800aae1 	.word	0x0800aae1
 800ab24:	0800ac73 	.word	0x0800ac73
 800ab28:	0800ab95 	.word	0x0800ab95
 800ab2c:	0800ac55 	.word	0x0800ac55
 800ab30:	0800aae1 	.word	0x0800aae1
 800ab34:	0800aae1 	.word	0x0800aae1
 800ab38:	0800ac95 	.word	0x0800ac95
 800ab3c:	0800aae1 	.word	0x0800aae1
 800ab40:	0800ab95 	.word	0x0800ab95
 800ab44:	0800aae1 	.word	0x0800aae1
 800ab48:	0800aae1 	.word	0x0800aae1
 800ab4c:	0800ac5d 	.word	0x0800ac5d
 800ab50:	680b      	ldr	r3, [r1, #0]
 800ab52:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ab56:	1d1a      	adds	r2, r3, #4
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	600a      	str	r2, [r1, #0]
 800ab5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ab60:	2301      	movs	r3, #1
 800ab62:	e0a4      	b.n	800acae <_printf_i+0x1f6>
 800ab64:	6825      	ldr	r5, [r4, #0]
 800ab66:	6808      	ldr	r0, [r1, #0]
 800ab68:	062e      	lsls	r6, r5, #24
 800ab6a:	f100 0304 	add.w	r3, r0, #4
 800ab6e:	d50a      	bpl.n	800ab86 <_printf_i+0xce>
 800ab70:	6805      	ldr	r5, [r0, #0]
 800ab72:	600b      	str	r3, [r1, #0]
 800ab74:	2d00      	cmp	r5, #0
 800ab76:	da03      	bge.n	800ab80 <_printf_i+0xc8>
 800ab78:	232d      	movs	r3, #45	; 0x2d
 800ab7a:	426d      	negs	r5, r5
 800ab7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab80:	230a      	movs	r3, #10
 800ab82:	485e      	ldr	r0, [pc, #376]	; (800acfc <_printf_i+0x244>)
 800ab84:	e019      	b.n	800abba <_printf_i+0x102>
 800ab86:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ab8a:	6805      	ldr	r5, [r0, #0]
 800ab8c:	600b      	str	r3, [r1, #0]
 800ab8e:	bf18      	it	ne
 800ab90:	b22d      	sxthne	r5, r5
 800ab92:	e7ef      	b.n	800ab74 <_printf_i+0xbc>
 800ab94:	680b      	ldr	r3, [r1, #0]
 800ab96:	6825      	ldr	r5, [r4, #0]
 800ab98:	1d18      	adds	r0, r3, #4
 800ab9a:	6008      	str	r0, [r1, #0]
 800ab9c:	0628      	lsls	r0, r5, #24
 800ab9e:	d501      	bpl.n	800aba4 <_printf_i+0xec>
 800aba0:	681d      	ldr	r5, [r3, #0]
 800aba2:	e002      	b.n	800abaa <_printf_i+0xf2>
 800aba4:	0669      	lsls	r1, r5, #25
 800aba6:	d5fb      	bpl.n	800aba0 <_printf_i+0xe8>
 800aba8:	881d      	ldrh	r5, [r3, #0]
 800abaa:	2f6f      	cmp	r7, #111	; 0x6f
 800abac:	bf0c      	ite	eq
 800abae:	2308      	moveq	r3, #8
 800abb0:	230a      	movne	r3, #10
 800abb2:	4852      	ldr	r0, [pc, #328]	; (800acfc <_printf_i+0x244>)
 800abb4:	2100      	movs	r1, #0
 800abb6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800abba:	6866      	ldr	r6, [r4, #4]
 800abbc:	2e00      	cmp	r6, #0
 800abbe:	bfa8      	it	ge
 800abc0:	6821      	ldrge	r1, [r4, #0]
 800abc2:	60a6      	str	r6, [r4, #8]
 800abc4:	bfa4      	itt	ge
 800abc6:	f021 0104 	bicge.w	r1, r1, #4
 800abca:	6021      	strge	r1, [r4, #0]
 800abcc:	b90d      	cbnz	r5, 800abd2 <_printf_i+0x11a>
 800abce:	2e00      	cmp	r6, #0
 800abd0:	d04d      	beq.n	800ac6e <_printf_i+0x1b6>
 800abd2:	4616      	mov	r6, r2
 800abd4:	fbb5 f1f3 	udiv	r1, r5, r3
 800abd8:	fb03 5711 	mls	r7, r3, r1, r5
 800abdc:	5dc7      	ldrb	r7, [r0, r7]
 800abde:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800abe2:	462f      	mov	r7, r5
 800abe4:	42bb      	cmp	r3, r7
 800abe6:	460d      	mov	r5, r1
 800abe8:	d9f4      	bls.n	800abd4 <_printf_i+0x11c>
 800abea:	2b08      	cmp	r3, #8
 800abec:	d10b      	bne.n	800ac06 <_printf_i+0x14e>
 800abee:	6823      	ldr	r3, [r4, #0]
 800abf0:	07df      	lsls	r7, r3, #31
 800abf2:	d508      	bpl.n	800ac06 <_printf_i+0x14e>
 800abf4:	6923      	ldr	r3, [r4, #16]
 800abf6:	6861      	ldr	r1, [r4, #4]
 800abf8:	4299      	cmp	r1, r3
 800abfa:	bfde      	ittt	le
 800abfc:	2330      	movle	r3, #48	; 0x30
 800abfe:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ac02:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ac06:	1b92      	subs	r2, r2, r6
 800ac08:	6122      	str	r2, [r4, #16]
 800ac0a:	464b      	mov	r3, r9
 800ac0c:	4621      	mov	r1, r4
 800ac0e:	4640      	mov	r0, r8
 800ac10:	f8cd a000 	str.w	sl, [sp]
 800ac14:	aa03      	add	r2, sp, #12
 800ac16:	f7ff fedf 	bl	800a9d8 <_printf_common>
 800ac1a:	3001      	adds	r0, #1
 800ac1c:	d14c      	bne.n	800acb8 <_printf_i+0x200>
 800ac1e:	f04f 30ff 	mov.w	r0, #4294967295
 800ac22:	b004      	add	sp, #16
 800ac24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac28:	4834      	ldr	r0, [pc, #208]	; (800acfc <_printf_i+0x244>)
 800ac2a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ac2e:	680e      	ldr	r6, [r1, #0]
 800ac30:	6823      	ldr	r3, [r4, #0]
 800ac32:	f856 5b04 	ldr.w	r5, [r6], #4
 800ac36:	061f      	lsls	r7, r3, #24
 800ac38:	600e      	str	r6, [r1, #0]
 800ac3a:	d514      	bpl.n	800ac66 <_printf_i+0x1ae>
 800ac3c:	07d9      	lsls	r1, r3, #31
 800ac3e:	bf44      	itt	mi
 800ac40:	f043 0320 	orrmi.w	r3, r3, #32
 800ac44:	6023      	strmi	r3, [r4, #0]
 800ac46:	b91d      	cbnz	r5, 800ac50 <_printf_i+0x198>
 800ac48:	6823      	ldr	r3, [r4, #0]
 800ac4a:	f023 0320 	bic.w	r3, r3, #32
 800ac4e:	6023      	str	r3, [r4, #0]
 800ac50:	2310      	movs	r3, #16
 800ac52:	e7af      	b.n	800abb4 <_printf_i+0xfc>
 800ac54:	6823      	ldr	r3, [r4, #0]
 800ac56:	f043 0320 	orr.w	r3, r3, #32
 800ac5a:	6023      	str	r3, [r4, #0]
 800ac5c:	2378      	movs	r3, #120	; 0x78
 800ac5e:	4828      	ldr	r0, [pc, #160]	; (800ad00 <_printf_i+0x248>)
 800ac60:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ac64:	e7e3      	b.n	800ac2e <_printf_i+0x176>
 800ac66:	065e      	lsls	r6, r3, #25
 800ac68:	bf48      	it	mi
 800ac6a:	b2ad      	uxthmi	r5, r5
 800ac6c:	e7e6      	b.n	800ac3c <_printf_i+0x184>
 800ac6e:	4616      	mov	r6, r2
 800ac70:	e7bb      	b.n	800abea <_printf_i+0x132>
 800ac72:	680b      	ldr	r3, [r1, #0]
 800ac74:	6826      	ldr	r6, [r4, #0]
 800ac76:	1d1d      	adds	r5, r3, #4
 800ac78:	6960      	ldr	r0, [r4, #20]
 800ac7a:	600d      	str	r5, [r1, #0]
 800ac7c:	0635      	lsls	r5, r6, #24
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	d501      	bpl.n	800ac86 <_printf_i+0x1ce>
 800ac82:	6018      	str	r0, [r3, #0]
 800ac84:	e002      	b.n	800ac8c <_printf_i+0x1d4>
 800ac86:	0671      	lsls	r1, r6, #25
 800ac88:	d5fb      	bpl.n	800ac82 <_printf_i+0x1ca>
 800ac8a:	8018      	strh	r0, [r3, #0]
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	4616      	mov	r6, r2
 800ac90:	6123      	str	r3, [r4, #16]
 800ac92:	e7ba      	b.n	800ac0a <_printf_i+0x152>
 800ac94:	680b      	ldr	r3, [r1, #0]
 800ac96:	1d1a      	adds	r2, r3, #4
 800ac98:	600a      	str	r2, [r1, #0]
 800ac9a:	681e      	ldr	r6, [r3, #0]
 800ac9c:	2100      	movs	r1, #0
 800ac9e:	4630      	mov	r0, r6
 800aca0:	6862      	ldr	r2, [r4, #4]
 800aca2:	f000 f8d9 	bl	800ae58 <memchr>
 800aca6:	b108      	cbz	r0, 800acac <_printf_i+0x1f4>
 800aca8:	1b80      	subs	r0, r0, r6
 800acaa:	6060      	str	r0, [r4, #4]
 800acac:	6863      	ldr	r3, [r4, #4]
 800acae:	6123      	str	r3, [r4, #16]
 800acb0:	2300      	movs	r3, #0
 800acb2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800acb6:	e7a8      	b.n	800ac0a <_printf_i+0x152>
 800acb8:	4632      	mov	r2, r6
 800acba:	4649      	mov	r1, r9
 800acbc:	4640      	mov	r0, r8
 800acbe:	6923      	ldr	r3, [r4, #16]
 800acc0:	47d0      	blx	sl
 800acc2:	3001      	adds	r0, #1
 800acc4:	d0ab      	beq.n	800ac1e <_printf_i+0x166>
 800acc6:	6823      	ldr	r3, [r4, #0]
 800acc8:	079b      	lsls	r3, r3, #30
 800acca:	d413      	bmi.n	800acf4 <_printf_i+0x23c>
 800accc:	68e0      	ldr	r0, [r4, #12]
 800acce:	9b03      	ldr	r3, [sp, #12]
 800acd0:	4298      	cmp	r0, r3
 800acd2:	bfb8      	it	lt
 800acd4:	4618      	movlt	r0, r3
 800acd6:	e7a4      	b.n	800ac22 <_printf_i+0x16a>
 800acd8:	2301      	movs	r3, #1
 800acda:	4632      	mov	r2, r6
 800acdc:	4649      	mov	r1, r9
 800acde:	4640      	mov	r0, r8
 800ace0:	47d0      	blx	sl
 800ace2:	3001      	adds	r0, #1
 800ace4:	d09b      	beq.n	800ac1e <_printf_i+0x166>
 800ace6:	3501      	adds	r5, #1
 800ace8:	68e3      	ldr	r3, [r4, #12]
 800acea:	9903      	ldr	r1, [sp, #12]
 800acec:	1a5b      	subs	r3, r3, r1
 800acee:	42ab      	cmp	r3, r5
 800acf0:	dcf2      	bgt.n	800acd8 <_printf_i+0x220>
 800acf2:	e7eb      	b.n	800accc <_printf_i+0x214>
 800acf4:	2500      	movs	r5, #0
 800acf6:	f104 0619 	add.w	r6, r4, #25
 800acfa:	e7f5      	b.n	800ace8 <_printf_i+0x230>
 800acfc:	0800baa1 	.word	0x0800baa1
 800ad00:	0800bab2 	.word	0x0800bab2

0800ad04 <_sbrk_r>:
 800ad04:	b538      	push	{r3, r4, r5, lr}
 800ad06:	2300      	movs	r3, #0
 800ad08:	4d05      	ldr	r5, [pc, #20]	; (800ad20 <_sbrk_r+0x1c>)
 800ad0a:	4604      	mov	r4, r0
 800ad0c:	4608      	mov	r0, r1
 800ad0e:	602b      	str	r3, [r5, #0]
 800ad10:	f7f7 f892 	bl	8001e38 <_sbrk>
 800ad14:	1c43      	adds	r3, r0, #1
 800ad16:	d102      	bne.n	800ad1e <_sbrk_r+0x1a>
 800ad18:	682b      	ldr	r3, [r5, #0]
 800ad1a:	b103      	cbz	r3, 800ad1e <_sbrk_r+0x1a>
 800ad1c:	6023      	str	r3, [r4, #0]
 800ad1e:	bd38      	pop	{r3, r4, r5, pc}
 800ad20:	20000960 	.word	0x20000960

0800ad24 <__sread>:
 800ad24:	b510      	push	{r4, lr}
 800ad26:	460c      	mov	r4, r1
 800ad28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad2c:	f000 f8ae 	bl	800ae8c <_read_r>
 800ad30:	2800      	cmp	r0, #0
 800ad32:	bfab      	itete	ge
 800ad34:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ad36:	89a3      	ldrhlt	r3, [r4, #12]
 800ad38:	181b      	addge	r3, r3, r0
 800ad3a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ad3e:	bfac      	ite	ge
 800ad40:	6563      	strge	r3, [r4, #84]	; 0x54
 800ad42:	81a3      	strhlt	r3, [r4, #12]
 800ad44:	bd10      	pop	{r4, pc}

0800ad46 <__swrite>:
 800ad46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad4a:	461f      	mov	r7, r3
 800ad4c:	898b      	ldrh	r3, [r1, #12]
 800ad4e:	4605      	mov	r5, r0
 800ad50:	05db      	lsls	r3, r3, #23
 800ad52:	460c      	mov	r4, r1
 800ad54:	4616      	mov	r6, r2
 800ad56:	d505      	bpl.n	800ad64 <__swrite+0x1e>
 800ad58:	2302      	movs	r3, #2
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad60:	f000 f868 	bl	800ae34 <_lseek_r>
 800ad64:	89a3      	ldrh	r3, [r4, #12]
 800ad66:	4632      	mov	r2, r6
 800ad68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ad6c:	81a3      	strh	r3, [r4, #12]
 800ad6e:	4628      	mov	r0, r5
 800ad70:	463b      	mov	r3, r7
 800ad72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad7a:	f000 b817 	b.w	800adac <_write_r>

0800ad7e <__sseek>:
 800ad7e:	b510      	push	{r4, lr}
 800ad80:	460c      	mov	r4, r1
 800ad82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad86:	f000 f855 	bl	800ae34 <_lseek_r>
 800ad8a:	1c43      	adds	r3, r0, #1
 800ad8c:	89a3      	ldrh	r3, [r4, #12]
 800ad8e:	bf15      	itete	ne
 800ad90:	6560      	strne	r0, [r4, #84]	; 0x54
 800ad92:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ad96:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ad9a:	81a3      	strheq	r3, [r4, #12]
 800ad9c:	bf18      	it	ne
 800ad9e:	81a3      	strhne	r3, [r4, #12]
 800ada0:	bd10      	pop	{r4, pc}

0800ada2 <__sclose>:
 800ada2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ada6:	f000 b813 	b.w	800add0 <_close_r>
	...

0800adac <_write_r>:
 800adac:	b538      	push	{r3, r4, r5, lr}
 800adae:	4604      	mov	r4, r0
 800adb0:	4608      	mov	r0, r1
 800adb2:	4611      	mov	r1, r2
 800adb4:	2200      	movs	r2, #0
 800adb6:	4d05      	ldr	r5, [pc, #20]	; (800adcc <_write_r+0x20>)
 800adb8:	602a      	str	r2, [r5, #0]
 800adba:	461a      	mov	r2, r3
 800adbc:	f7f6 ffe2 	bl	8001d84 <_write>
 800adc0:	1c43      	adds	r3, r0, #1
 800adc2:	d102      	bne.n	800adca <_write_r+0x1e>
 800adc4:	682b      	ldr	r3, [r5, #0]
 800adc6:	b103      	cbz	r3, 800adca <_write_r+0x1e>
 800adc8:	6023      	str	r3, [r4, #0]
 800adca:	bd38      	pop	{r3, r4, r5, pc}
 800adcc:	20000960 	.word	0x20000960

0800add0 <_close_r>:
 800add0:	b538      	push	{r3, r4, r5, lr}
 800add2:	2300      	movs	r3, #0
 800add4:	4d05      	ldr	r5, [pc, #20]	; (800adec <_close_r+0x1c>)
 800add6:	4604      	mov	r4, r0
 800add8:	4608      	mov	r0, r1
 800adda:	602b      	str	r3, [r5, #0]
 800addc:	f7f6 fffc 	bl	8001dd8 <_close>
 800ade0:	1c43      	adds	r3, r0, #1
 800ade2:	d102      	bne.n	800adea <_close_r+0x1a>
 800ade4:	682b      	ldr	r3, [r5, #0]
 800ade6:	b103      	cbz	r3, 800adea <_close_r+0x1a>
 800ade8:	6023      	str	r3, [r4, #0]
 800adea:	bd38      	pop	{r3, r4, r5, pc}
 800adec:	20000960 	.word	0x20000960

0800adf0 <_fstat_r>:
 800adf0:	b538      	push	{r3, r4, r5, lr}
 800adf2:	2300      	movs	r3, #0
 800adf4:	4d06      	ldr	r5, [pc, #24]	; (800ae10 <_fstat_r+0x20>)
 800adf6:	4604      	mov	r4, r0
 800adf8:	4608      	mov	r0, r1
 800adfa:	4611      	mov	r1, r2
 800adfc:	602b      	str	r3, [r5, #0]
 800adfe:	f7f6 fff6 	bl	8001dee <_fstat>
 800ae02:	1c43      	adds	r3, r0, #1
 800ae04:	d102      	bne.n	800ae0c <_fstat_r+0x1c>
 800ae06:	682b      	ldr	r3, [r5, #0]
 800ae08:	b103      	cbz	r3, 800ae0c <_fstat_r+0x1c>
 800ae0a:	6023      	str	r3, [r4, #0]
 800ae0c:	bd38      	pop	{r3, r4, r5, pc}
 800ae0e:	bf00      	nop
 800ae10:	20000960 	.word	0x20000960

0800ae14 <_isatty_r>:
 800ae14:	b538      	push	{r3, r4, r5, lr}
 800ae16:	2300      	movs	r3, #0
 800ae18:	4d05      	ldr	r5, [pc, #20]	; (800ae30 <_isatty_r+0x1c>)
 800ae1a:	4604      	mov	r4, r0
 800ae1c:	4608      	mov	r0, r1
 800ae1e:	602b      	str	r3, [r5, #0]
 800ae20:	f7f6 fff4 	bl	8001e0c <_isatty>
 800ae24:	1c43      	adds	r3, r0, #1
 800ae26:	d102      	bne.n	800ae2e <_isatty_r+0x1a>
 800ae28:	682b      	ldr	r3, [r5, #0]
 800ae2a:	b103      	cbz	r3, 800ae2e <_isatty_r+0x1a>
 800ae2c:	6023      	str	r3, [r4, #0]
 800ae2e:	bd38      	pop	{r3, r4, r5, pc}
 800ae30:	20000960 	.word	0x20000960

0800ae34 <_lseek_r>:
 800ae34:	b538      	push	{r3, r4, r5, lr}
 800ae36:	4604      	mov	r4, r0
 800ae38:	4608      	mov	r0, r1
 800ae3a:	4611      	mov	r1, r2
 800ae3c:	2200      	movs	r2, #0
 800ae3e:	4d05      	ldr	r5, [pc, #20]	; (800ae54 <_lseek_r+0x20>)
 800ae40:	602a      	str	r2, [r5, #0]
 800ae42:	461a      	mov	r2, r3
 800ae44:	f7f6 ffec 	bl	8001e20 <_lseek>
 800ae48:	1c43      	adds	r3, r0, #1
 800ae4a:	d102      	bne.n	800ae52 <_lseek_r+0x1e>
 800ae4c:	682b      	ldr	r3, [r5, #0]
 800ae4e:	b103      	cbz	r3, 800ae52 <_lseek_r+0x1e>
 800ae50:	6023      	str	r3, [r4, #0]
 800ae52:	bd38      	pop	{r3, r4, r5, pc}
 800ae54:	20000960 	.word	0x20000960

0800ae58 <memchr>:
 800ae58:	4603      	mov	r3, r0
 800ae5a:	b510      	push	{r4, lr}
 800ae5c:	b2c9      	uxtb	r1, r1
 800ae5e:	4402      	add	r2, r0
 800ae60:	4293      	cmp	r3, r2
 800ae62:	4618      	mov	r0, r3
 800ae64:	d101      	bne.n	800ae6a <memchr+0x12>
 800ae66:	2000      	movs	r0, #0
 800ae68:	e003      	b.n	800ae72 <memchr+0x1a>
 800ae6a:	7804      	ldrb	r4, [r0, #0]
 800ae6c:	3301      	adds	r3, #1
 800ae6e:	428c      	cmp	r4, r1
 800ae70:	d1f6      	bne.n	800ae60 <memchr+0x8>
 800ae72:	bd10      	pop	{r4, pc}

0800ae74 <__malloc_lock>:
 800ae74:	4801      	ldr	r0, [pc, #4]	; (800ae7c <__malloc_lock+0x8>)
 800ae76:	f7ff bb4b 	b.w	800a510 <__retarget_lock_acquire_recursive>
 800ae7a:	bf00      	nop
 800ae7c:	20000958 	.word	0x20000958

0800ae80 <__malloc_unlock>:
 800ae80:	4801      	ldr	r0, [pc, #4]	; (800ae88 <__malloc_unlock+0x8>)
 800ae82:	f7ff bb46 	b.w	800a512 <__retarget_lock_release_recursive>
 800ae86:	bf00      	nop
 800ae88:	20000958 	.word	0x20000958

0800ae8c <_read_r>:
 800ae8c:	b538      	push	{r3, r4, r5, lr}
 800ae8e:	4604      	mov	r4, r0
 800ae90:	4608      	mov	r0, r1
 800ae92:	4611      	mov	r1, r2
 800ae94:	2200      	movs	r2, #0
 800ae96:	4d05      	ldr	r5, [pc, #20]	; (800aeac <_read_r+0x20>)
 800ae98:	602a      	str	r2, [r5, #0]
 800ae9a:	461a      	mov	r2, r3
 800ae9c:	f7f6 ff54 	bl	8001d48 <_read>
 800aea0:	1c43      	adds	r3, r0, #1
 800aea2:	d102      	bne.n	800aeaa <_read_r+0x1e>
 800aea4:	682b      	ldr	r3, [r5, #0]
 800aea6:	b103      	cbz	r3, 800aeaa <_read_r+0x1e>
 800aea8:	6023      	str	r3, [r4, #0]
 800aeaa:	bd38      	pop	{r3, r4, r5, pc}
 800aeac:	20000960 	.word	0x20000960

0800aeb0 <_init>:
 800aeb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeb2:	bf00      	nop
 800aeb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aeb6:	bc08      	pop	{r3}
 800aeb8:	469e      	mov	lr, r3
 800aeba:	4770      	bx	lr

0800aebc <_fini>:
 800aebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aebe:	bf00      	nop
 800aec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aec2:	bc08      	pop	{r3}
 800aec4:	469e      	mov	lr, r3
 800aec6:	4770      	bx	lr
