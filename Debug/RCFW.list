
RCFW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb0c  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011e0  0800bcf0  0800bcf0  0001bcf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ced0  0800ced0  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  0800ced0  0800ced0  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ced0  0800ced0  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ced0  0800ced0  0001ced0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ced4  0800ced4  0001ced4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800ced8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000090c  20000080  0800cf58  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000098c  0800cf58  0002098c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b397  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e9f  00000000  00000000  0003b440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001430  00000000  00000000  0003f2e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001278  00000000  00000000  00040710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ec7c  00000000  00000000  00041988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bda4  00000000  00000000  00060604  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a5c21  00000000  00000000  0007c3a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00121fc9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ce0  00000000  00000000  0012201c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000080 	.word	0x20000080
 8000200:	00000000 	.word	0x00000000
 8000204:	0800bcd8 	.word	0x0800bcd8

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000084 	.word	0x20000084
 8000220:	0800bcd8 	.word	0x0800bcd8

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <__aeabi_frsub>:
 8000234:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000238:	e002      	b.n	8000240 <__addsf3>
 800023a:	bf00      	nop

0800023c <__aeabi_fsub>:
 800023c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000240 <__addsf3>:
 8000240:	0042      	lsls	r2, r0, #1
 8000242:	bf1f      	itttt	ne
 8000244:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000248:	ea92 0f03 	teqne	r2, r3
 800024c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000250:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000254:	d06a      	beq.n	800032c <__addsf3+0xec>
 8000256:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800025a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800025e:	bfc1      	itttt	gt
 8000260:	18d2      	addgt	r2, r2, r3
 8000262:	4041      	eorgt	r1, r0
 8000264:	4048      	eorgt	r0, r1
 8000266:	4041      	eorgt	r1, r0
 8000268:	bfb8      	it	lt
 800026a:	425b      	neglt	r3, r3
 800026c:	2b19      	cmp	r3, #25
 800026e:	bf88      	it	hi
 8000270:	4770      	bxhi	lr
 8000272:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000276:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800027a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800027e:	bf18      	it	ne
 8000280:	4240      	negne	r0, r0
 8000282:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000286:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800028a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800028e:	bf18      	it	ne
 8000290:	4249      	negne	r1, r1
 8000292:	ea92 0f03 	teq	r2, r3
 8000296:	d03f      	beq.n	8000318 <__addsf3+0xd8>
 8000298:	f1a2 0201 	sub.w	r2, r2, #1
 800029c:	fa41 fc03 	asr.w	ip, r1, r3
 80002a0:	eb10 000c 	adds.w	r0, r0, ip
 80002a4:	f1c3 0320 	rsb	r3, r3, #32
 80002a8:	fa01 f103 	lsl.w	r1, r1, r3
 80002ac:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002b0:	d502      	bpl.n	80002b8 <__addsf3+0x78>
 80002b2:	4249      	negs	r1, r1
 80002b4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80002b8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80002bc:	d313      	bcc.n	80002e6 <__addsf3+0xa6>
 80002be:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002c2:	d306      	bcc.n	80002d2 <__addsf3+0x92>
 80002c4:	0840      	lsrs	r0, r0, #1
 80002c6:	ea4f 0131 	mov.w	r1, r1, rrx
 80002ca:	f102 0201 	add.w	r2, r2, #1
 80002ce:	2afe      	cmp	r2, #254	; 0xfe
 80002d0:	d251      	bcs.n	8000376 <__addsf3+0x136>
 80002d2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80002d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80002da:	bf08      	it	eq
 80002dc:	f020 0001 	biceq.w	r0, r0, #1
 80002e0:	ea40 0003 	orr.w	r0, r0, r3
 80002e4:	4770      	bx	lr
 80002e6:	0049      	lsls	r1, r1, #1
 80002e8:	eb40 0000 	adc.w	r0, r0, r0
 80002ec:	3a01      	subs	r2, #1
 80002ee:	bf28      	it	cs
 80002f0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80002f4:	d2ed      	bcs.n	80002d2 <__addsf3+0x92>
 80002f6:	fab0 fc80 	clz	ip, r0
 80002fa:	f1ac 0c08 	sub.w	ip, ip, #8
 80002fe:	ebb2 020c 	subs.w	r2, r2, ip
 8000302:	fa00 f00c 	lsl.w	r0, r0, ip
 8000306:	bfaa      	itet	ge
 8000308:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800030c:	4252      	neglt	r2, r2
 800030e:	4318      	orrge	r0, r3
 8000310:	bfbc      	itt	lt
 8000312:	40d0      	lsrlt	r0, r2
 8000314:	4318      	orrlt	r0, r3
 8000316:	4770      	bx	lr
 8000318:	f092 0f00 	teq	r2, #0
 800031c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000320:	bf06      	itte	eq
 8000322:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000326:	3201      	addeq	r2, #1
 8000328:	3b01      	subne	r3, #1
 800032a:	e7b5      	b.n	8000298 <__addsf3+0x58>
 800032c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000330:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000334:	bf18      	it	ne
 8000336:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800033a:	d021      	beq.n	8000380 <__addsf3+0x140>
 800033c:	ea92 0f03 	teq	r2, r3
 8000340:	d004      	beq.n	800034c <__addsf3+0x10c>
 8000342:	f092 0f00 	teq	r2, #0
 8000346:	bf08      	it	eq
 8000348:	4608      	moveq	r0, r1
 800034a:	4770      	bx	lr
 800034c:	ea90 0f01 	teq	r0, r1
 8000350:	bf1c      	itt	ne
 8000352:	2000      	movne	r0, #0
 8000354:	4770      	bxne	lr
 8000356:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800035a:	d104      	bne.n	8000366 <__addsf3+0x126>
 800035c:	0040      	lsls	r0, r0, #1
 800035e:	bf28      	it	cs
 8000360:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000364:	4770      	bx	lr
 8000366:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800036a:	bf3c      	itt	cc
 800036c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000370:	4770      	bxcc	lr
 8000372:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000376:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800037a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800037e:	4770      	bx	lr
 8000380:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000384:	bf16      	itet	ne
 8000386:	4608      	movne	r0, r1
 8000388:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800038c:	4601      	movne	r1, r0
 800038e:	0242      	lsls	r2, r0, #9
 8000390:	bf06      	itte	eq
 8000392:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000396:	ea90 0f01 	teqeq	r0, r1
 800039a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800039e:	4770      	bx	lr

080003a0 <__aeabi_ui2f>:
 80003a0:	f04f 0300 	mov.w	r3, #0
 80003a4:	e004      	b.n	80003b0 <__aeabi_i2f+0x8>
 80003a6:	bf00      	nop

080003a8 <__aeabi_i2f>:
 80003a8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80003ac:	bf48      	it	mi
 80003ae:	4240      	negmi	r0, r0
 80003b0:	ea5f 0c00 	movs.w	ip, r0
 80003b4:	bf08      	it	eq
 80003b6:	4770      	bxeq	lr
 80003b8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80003bc:	4601      	mov	r1, r0
 80003be:	f04f 0000 	mov.w	r0, #0
 80003c2:	e01c      	b.n	80003fe <__aeabi_l2f+0x2a>

080003c4 <__aeabi_ul2f>:
 80003c4:	ea50 0201 	orrs.w	r2, r0, r1
 80003c8:	bf08      	it	eq
 80003ca:	4770      	bxeq	lr
 80003cc:	f04f 0300 	mov.w	r3, #0
 80003d0:	e00a      	b.n	80003e8 <__aeabi_l2f+0x14>
 80003d2:	bf00      	nop

080003d4 <__aeabi_l2f>:
 80003d4:	ea50 0201 	orrs.w	r2, r0, r1
 80003d8:	bf08      	it	eq
 80003da:	4770      	bxeq	lr
 80003dc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80003e0:	d502      	bpl.n	80003e8 <__aeabi_l2f+0x14>
 80003e2:	4240      	negs	r0, r0
 80003e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003e8:	ea5f 0c01 	movs.w	ip, r1
 80003ec:	bf02      	ittt	eq
 80003ee:	4684      	moveq	ip, r0
 80003f0:	4601      	moveq	r1, r0
 80003f2:	2000      	moveq	r0, #0
 80003f4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80003f8:	bf08      	it	eq
 80003fa:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80003fe:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000402:	fabc f28c 	clz	r2, ip
 8000406:	3a08      	subs	r2, #8
 8000408:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800040c:	db10      	blt.n	8000430 <__aeabi_l2f+0x5c>
 800040e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000412:	4463      	add	r3, ip
 8000414:	fa00 fc02 	lsl.w	ip, r0, r2
 8000418:	f1c2 0220 	rsb	r2, r2, #32
 800041c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000420:	fa20 f202 	lsr.w	r2, r0, r2
 8000424:	eb43 0002 	adc.w	r0, r3, r2
 8000428:	bf08      	it	eq
 800042a:	f020 0001 	biceq.w	r0, r0, #1
 800042e:	4770      	bx	lr
 8000430:	f102 0220 	add.w	r2, r2, #32
 8000434:	fa01 fc02 	lsl.w	ip, r1, r2
 8000438:	f1c2 0220 	rsb	r2, r2, #32
 800043c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000440:	fa21 f202 	lsr.w	r2, r1, r2
 8000444:	eb43 0002 	adc.w	r0, r3, r2
 8000448:	bf08      	it	eq
 800044a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800044e:	4770      	bx	lr

08000450 <__aeabi_fmul>:
 8000450:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000454:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000458:	bf1e      	ittt	ne
 800045a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800045e:	ea92 0f0c 	teqne	r2, ip
 8000462:	ea93 0f0c 	teqne	r3, ip
 8000466:	d06f      	beq.n	8000548 <__aeabi_fmul+0xf8>
 8000468:	441a      	add	r2, r3
 800046a:	ea80 0c01 	eor.w	ip, r0, r1
 800046e:	0240      	lsls	r0, r0, #9
 8000470:	bf18      	it	ne
 8000472:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000476:	d01e      	beq.n	80004b6 <__aeabi_fmul+0x66>
 8000478:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800047c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000480:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000484:	fba0 3101 	umull	r3, r1, r0, r1
 8000488:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800048c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000490:	bf3e      	ittt	cc
 8000492:	0049      	lslcc	r1, r1, #1
 8000494:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000498:	005b      	lslcc	r3, r3, #1
 800049a:	ea40 0001 	orr.w	r0, r0, r1
 800049e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80004a2:	2afd      	cmp	r2, #253	; 0xfd
 80004a4:	d81d      	bhi.n	80004e2 <__aeabi_fmul+0x92>
 80004a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80004aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80004ae:	bf08      	it	eq
 80004b0:	f020 0001 	biceq.w	r0, r0, #1
 80004b4:	4770      	bx	lr
 80004b6:	f090 0f00 	teq	r0, #0
 80004ba:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80004be:	bf08      	it	eq
 80004c0:	0249      	lsleq	r1, r1, #9
 80004c2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80004c6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80004ca:	3a7f      	subs	r2, #127	; 0x7f
 80004cc:	bfc2      	ittt	gt
 80004ce:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80004d2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80004d6:	4770      	bxgt	lr
 80004d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004dc:	f04f 0300 	mov.w	r3, #0
 80004e0:	3a01      	subs	r2, #1
 80004e2:	dc5d      	bgt.n	80005a0 <__aeabi_fmul+0x150>
 80004e4:	f112 0f19 	cmn.w	r2, #25
 80004e8:	bfdc      	itt	le
 80004ea:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80004ee:	4770      	bxle	lr
 80004f0:	f1c2 0200 	rsb	r2, r2, #0
 80004f4:	0041      	lsls	r1, r0, #1
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	f1c2 0220 	rsb	r2, r2, #32
 80004fe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000502:	ea5f 0031 	movs.w	r0, r1, rrx
 8000506:	f140 0000 	adc.w	r0, r0, #0
 800050a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800050e:	bf08      	it	eq
 8000510:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000514:	4770      	bx	lr
 8000516:	f092 0f00 	teq	r2, #0
 800051a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800051e:	bf02      	ittt	eq
 8000520:	0040      	lsleq	r0, r0, #1
 8000522:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000526:	3a01      	subeq	r2, #1
 8000528:	d0f9      	beq.n	800051e <__aeabi_fmul+0xce>
 800052a:	ea40 000c 	orr.w	r0, r0, ip
 800052e:	f093 0f00 	teq	r3, #0
 8000532:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000536:	bf02      	ittt	eq
 8000538:	0049      	lsleq	r1, r1, #1
 800053a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800053e:	3b01      	subeq	r3, #1
 8000540:	d0f9      	beq.n	8000536 <__aeabi_fmul+0xe6>
 8000542:	ea41 010c 	orr.w	r1, r1, ip
 8000546:	e78f      	b.n	8000468 <__aeabi_fmul+0x18>
 8000548:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800054c:	ea92 0f0c 	teq	r2, ip
 8000550:	bf18      	it	ne
 8000552:	ea93 0f0c 	teqne	r3, ip
 8000556:	d00a      	beq.n	800056e <__aeabi_fmul+0x11e>
 8000558:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800055c:	bf18      	it	ne
 800055e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000562:	d1d8      	bne.n	8000516 <__aeabi_fmul+0xc6>
 8000564:	ea80 0001 	eor.w	r0, r0, r1
 8000568:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800056c:	4770      	bx	lr
 800056e:	f090 0f00 	teq	r0, #0
 8000572:	bf17      	itett	ne
 8000574:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000578:	4608      	moveq	r0, r1
 800057a:	f091 0f00 	teqne	r1, #0
 800057e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000582:	d014      	beq.n	80005ae <__aeabi_fmul+0x15e>
 8000584:	ea92 0f0c 	teq	r2, ip
 8000588:	d101      	bne.n	800058e <__aeabi_fmul+0x13e>
 800058a:	0242      	lsls	r2, r0, #9
 800058c:	d10f      	bne.n	80005ae <__aeabi_fmul+0x15e>
 800058e:	ea93 0f0c 	teq	r3, ip
 8000592:	d103      	bne.n	800059c <__aeabi_fmul+0x14c>
 8000594:	024b      	lsls	r3, r1, #9
 8000596:	bf18      	it	ne
 8000598:	4608      	movne	r0, r1
 800059a:	d108      	bne.n	80005ae <__aeabi_fmul+0x15e>
 800059c:	ea80 0001 	eor.w	r0, r0, r1
 80005a0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80005a4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005a8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005ac:	4770      	bx	lr
 80005ae:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005b2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80005b6:	4770      	bx	lr

080005b8 <__aeabi_fdiv>:
 80005b8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005bc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80005c0:	bf1e      	ittt	ne
 80005c2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80005c6:	ea92 0f0c 	teqne	r2, ip
 80005ca:	ea93 0f0c 	teqne	r3, ip
 80005ce:	d069      	beq.n	80006a4 <__aeabi_fdiv+0xec>
 80005d0:	eba2 0203 	sub.w	r2, r2, r3
 80005d4:	ea80 0c01 	eor.w	ip, r0, r1
 80005d8:	0249      	lsls	r1, r1, #9
 80005da:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80005de:	d037      	beq.n	8000650 <__aeabi_fdiv+0x98>
 80005e0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80005e4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80005e8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80005ec:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80005f0:	428b      	cmp	r3, r1
 80005f2:	bf38      	it	cc
 80005f4:	005b      	lslcc	r3, r3, #1
 80005f6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80005fa:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80005fe:	428b      	cmp	r3, r1
 8000600:	bf24      	itt	cs
 8000602:	1a5b      	subcs	r3, r3, r1
 8000604:	ea40 000c 	orrcs.w	r0, r0, ip
 8000608:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 800060c:	bf24      	itt	cs
 800060e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000612:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000616:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800061a:	bf24      	itt	cs
 800061c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000620:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000624:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000628:	bf24      	itt	cs
 800062a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800062e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000632:	011b      	lsls	r3, r3, #4
 8000634:	bf18      	it	ne
 8000636:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800063a:	d1e0      	bne.n	80005fe <__aeabi_fdiv+0x46>
 800063c:	2afd      	cmp	r2, #253	; 0xfd
 800063e:	f63f af50 	bhi.w	80004e2 <__aeabi_fmul+0x92>
 8000642:	428b      	cmp	r3, r1
 8000644:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000648:	bf08      	it	eq
 800064a:	f020 0001 	biceq.w	r0, r0, #1
 800064e:	4770      	bx	lr
 8000650:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000654:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000658:	327f      	adds	r2, #127	; 0x7f
 800065a:	bfc2      	ittt	gt
 800065c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000660:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000664:	4770      	bxgt	lr
 8000666:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800066a:	f04f 0300 	mov.w	r3, #0
 800066e:	3a01      	subs	r2, #1
 8000670:	e737      	b.n	80004e2 <__aeabi_fmul+0x92>
 8000672:	f092 0f00 	teq	r2, #0
 8000676:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800067a:	bf02      	ittt	eq
 800067c:	0040      	lsleq	r0, r0, #1
 800067e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000682:	3a01      	subeq	r2, #1
 8000684:	d0f9      	beq.n	800067a <__aeabi_fdiv+0xc2>
 8000686:	ea40 000c 	orr.w	r0, r0, ip
 800068a:	f093 0f00 	teq	r3, #0
 800068e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000692:	bf02      	ittt	eq
 8000694:	0049      	lsleq	r1, r1, #1
 8000696:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800069a:	3b01      	subeq	r3, #1
 800069c:	d0f9      	beq.n	8000692 <__aeabi_fdiv+0xda>
 800069e:	ea41 010c 	orr.w	r1, r1, ip
 80006a2:	e795      	b.n	80005d0 <__aeabi_fdiv+0x18>
 80006a4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80006a8:	ea92 0f0c 	teq	r2, ip
 80006ac:	d108      	bne.n	80006c0 <__aeabi_fdiv+0x108>
 80006ae:	0242      	lsls	r2, r0, #9
 80006b0:	f47f af7d 	bne.w	80005ae <__aeabi_fmul+0x15e>
 80006b4:	ea93 0f0c 	teq	r3, ip
 80006b8:	f47f af70 	bne.w	800059c <__aeabi_fmul+0x14c>
 80006bc:	4608      	mov	r0, r1
 80006be:	e776      	b.n	80005ae <__aeabi_fmul+0x15e>
 80006c0:	ea93 0f0c 	teq	r3, ip
 80006c4:	d104      	bne.n	80006d0 <__aeabi_fdiv+0x118>
 80006c6:	024b      	lsls	r3, r1, #9
 80006c8:	f43f af4c 	beq.w	8000564 <__aeabi_fmul+0x114>
 80006cc:	4608      	mov	r0, r1
 80006ce:	e76e      	b.n	80005ae <__aeabi_fmul+0x15e>
 80006d0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80006d4:	bf18      	it	ne
 80006d6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80006da:	d1ca      	bne.n	8000672 <__aeabi_fdiv+0xba>
 80006dc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80006e0:	f47f af5c 	bne.w	800059c <__aeabi_fmul+0x14c>
 80006e4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80006e8:	f47f af3c 	bne.w	8000564 <__aeabi_fmul+0x114>
 80006ec:	e75f      	b.n	80005ae <__aeabi_fmul+0x15e>
 80006ee:	bf00      	nop

080006f0 <__aeabi_f2iz>:
 80006f0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80006f4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80006f8:	d30f      	bcc.n	800071a <__aeabi_f2iz+0x2a>
 80006fa:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80006fe:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000702:	d90d      	bls.n	8000720 <__aeabi_f2iz+0x30>
 8000704:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000708:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800070c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000710:	fa23 f002 	lsr.w	r0, r3, r2
 8000714:	bf18      	it	ne
 8000716:	4240      	negne	r0, r0
 8000718:	4770      	bx	lr
 800071a:	f04f 0000 	mov.w	r0, #0
 800071e:	4770      	bx	lr
 8000720:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000724:	d101      	bne.n	800072a <__aeabi_f2iz+0x3a>
 8000726:	0242      	lsls	r2, r0, #9
 8000728:	d105      	bne.n	8000736 <__aeabi_f2iz+0x46>
 800072a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800072e:	bf08      	it	eq
 8000730:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000734:	4770      	bx	lr
 8000736:	f04f 0000 	mov.w	r0, #0
 800073a:	4770      	bx	lr

0800073c <__aeabi_f2uiz>:
 800073c:	0042      	lsls	r2, r0, #1
 800073e:	d20e      	bcs.n	800075e <__aeabi_f2uiz+0x22>
 8000740:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000744:	d30b      	bcc.n	800075e <__aeabi_f2uiz+0x22>
 8000746:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800074a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800074e:	d409      	bmi.n	8000764 <__aeabi_f2uiz+0x28>
 8000750:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000754:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000758:	fa23 f002 	lsr.w	r0, r3, r2
 800075c:	4770      	bx	lr
 800075e:	f04f 0000 	mov.w	r0, #0
 8000762:	4770      	bx	lr
 8000764:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000768:	d101      	bne.n	800076e <__aeabi_f2uiz+0x32>
 800076a:	0242      	lsls	r2, r0, #9
 800076c:	d102      	bne.n	8000774 <__aeabi_f2uiz+0x38>
 800076e:	f04f 30ff 	mov.w	r0, #4294967295
 8000772:	4770      	bx	lr
 8000774:	f04f 0000 	mov.w	r0, #0
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop

0800077c <MAIN_displayRcfwBanner>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static void MAIN_displayRcfwBanner(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* Used ASCII art generator from https://patorjk.com with font called "Colossal" */
  LOG_info("");
 8000780:	4914      	ldr	r1, [pc, #80]	; (80007d4 <MAIN_displayRcfwBanner+0x58>)
 8000782:	2001      	movs	r0, #1
 8000784:	f009 fb4c 	bl	8009e20 <LOG_log>
  LOG_info("    8888888b.        .d8888b.       8888888888      888       888"  );
 8000788:	4913      	ldr	r1, [pc, #76]	; (80007d8 <MAIN_displayRcfwBanner+0x5c>)
 800078a:	2001      	movs	r0, #1
 800078c:	f009 fb48 	bl	8009e20 <LOG_log>
  LOG_info("    888   Y88b      d88P  Y88b      888             888   o   888"  );
 8000790:	4912      	ldr	r1, [pc, #72]	; (80007dc <MAIN_displayRcfwBanner+0x60>)
 8000792:	2001      	movs	r0, #1
 8000794:	f009 fb44 	bl	8009e20 <LOG_log>
  LOG_info("    888    888      888    888      888             888  d8b  888"  );
 8000798:	4911      	ldr	r1, [pc, #68]	; (80007e0 <MAIN_displayRcfwBanner+0x64>)
 800079a:	2001      	movs	r0, #1
 800079c:	f009 fb40 	bl	8009e20 <LOG_log>
  LOG_info("    888   d88P      888             8888888         888 d888b 888"  );
 80007a0:	4910      	ldr	r1, [pc, #64]	; (80007e4 <MAIN_displayRcfwBanner+0x68>)
 80007a2:	2001      	movs	r0, #1
 80007a4:	f009 fb3c 	bl	8009e20 <LOG_log>
  LOG_info("    8888888P\"       888             888             888d88888b888" );
 80007a8:	490f      	ldr	r1, [pc, #60]	; (80007e8 <MAIN_displayRcfwBanner+0x6c>)
 80007aa:	2001      	movs	r0, #1
 80007ac:	f009 fb38 	bl	8009e20 <LOG_log>
  LOG_info("    888 T88b        888    888      888             88888P Y88888"  );
 80007b0:	490e      	ldr	r1, [pc, #56]	; (80007ec <MAIN_displayRcfwBanner+0x70>)
 80007b2:	2001      	movs	r0, #1
 80007b4:	f009 fb34 	bl	8009e20 <LOG_log>
  LOG_info("    888  T88b       Y88b  d88P      888             8888P   Y8888"  );
 80007b8:	490d      	ldr	r1, [pc, #52]	; (80007f0 <MAIN_displayRcfwBanner+0x74>)
 80007ba:	2001      	movs	r0, #1
 80007bc:	f009 fb30 	bl	8009e20 <LOG_log>
  LOG_info("    888   T88b       \"Y8888P\"       888             888P     Y888");
 80007c0:	490c      	ldr	r1, [pc, #48]	; (80007f4 <MAIN_displayRcfwBanner+0x78>)
 80007c2:	2001      	movs	r0, #1
 80007c4:	f009 fb2c 	bl	8009e20 <LOG_log>
  LOG_info("");
 80007c8:	4902      	ldr	r1, [pc, #8]	; (80007d4 <MAIN_displayRcfwBanner+0x58>)
 80007ca:	2001      	movs	r0, #1
 80007cc:	f009 fb28 	bl	8009e20 <LOG_log>

  return;
 80007d0:	bf00      	nop
}
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	0800bcf0 	.word	0x0800bcf0
 80007d8:	0800bcf4 	.word	0x0800bcf4
 80007dc:	0800bd38 	.word	0x0800bd38
 80007e0:	0800bd7c 	.word	0x0800bd7c
 80007e4:	0800bdc0 	.word	0x0800bdc0
 80007e8:	0800be04 	.word	0x0800be04
 80007ec:	0800be48 	.word	0x0800be48
 80007f0:	0800be8c 	.word	0x0800be8c
 80007f4:	0800bed0 	.word	0x0800bed0

080007f8 <MAIN_togglePrintOutput>:

static void MAIN_togglePrintOutput(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  if (g_MAIN_printOutput == MAIN_PRINT_OUTPUT_TO_CONSOLE)
 80007fc:	4b0a      	ldr	r3, [pc, #40]	; (8000828 <MAIN_togglePrintOutput+0x30>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d107      	bne.n	8000814 <MAIN_togglePrintOutput+0x1c>
  {
    LOG_info("Directing print to MASTER");
 8000804:	4909      	ldr	r1, [pc, #36]	; (800082c <MAIN_togglePrintOutput+0x34>)
 8000806:	2001      	movs	r0, #1
 8000808:	f009 fb0a 	bl	8009e20 <LOG_log>

    g_MAIN_printOutput = MAIN_PRINT_OUTPUT_TO_MASTER;
 800080c:	4b06      	ldr	r3, [pc, #24]	; (8000828 <MAIN_togglePrintOutput+0x30>)
 800080e:	2201      	movs	r2, #1
 8000810:	701a      	strb	r2, [r3, #0]
    LOG_info("Directing print to CONSOLE");

    g_MAIN_printOutput = MAIN_PRINT_OUTPUT_TO_CONSOLE;
  }

  return;
 8000812:	e007      	b.n	8000824 <MAIN_togglePrintOutput+0x2c>
    LOG_info("Directing print to CONSOLE");
 8000814:	4906      	ldr	r1, [pc, #24]	; (8000830 <MAIN_togglePrintOutput+0x38>)
 8000816:	2001      	movs	r0, #1
 8000818:	f009 fb02 	bl	8009e20 <LOG_log>
    g_MAIN_printOutput = MAIN_PRINT_OUTPUT_TO_CONSOLE;
 800081c:	4b02      	ldr	r3, [pc, #8]	; (8000828 <MAIN_togglePrintOutput+0x30>)
 800081e:	2200      	movs	r2, #0
 8000820:	701a      	strb	r2, [r3, #0]
  return;
 8000822:	bf00      	nop
}
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20000798 	.word	0x20000798
 800082c:	0800bf14 	.word	0x0800bf14
 8000830:	0800bf30 	.word	0x0800bf30

08000834 <MAIN_updateLogSetup>:

static void MAIN_updateLogSetup(T_BLU_Data *p_data)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b084      	sub	sp, #16
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  RTC_TimeTypeDef l_time;
  RTC_DateTypeDef l_date;

  /* As this method is using for logging/debug, we will not deal with failure cases */
  (void)HAL_RTC_GetTime(&hrtc, &l_time, RTC_FORMAT_BCD);
 800083c:	f107 030c 	add.w	r3, r7, #12
 8000840:	2201      	movs	r2, #1
 8000842:	4619      	mov	r1, r3
 8000844:	4857      	ldr	r0, [pc, #348]	; (80009a4 <MAIN_updateLogSetup+0x170>)
 8000846:	f004 f96d 	bl	8004b24 <HAL_RTC_GetTime>
  (void)HAL_RTC_GetDate(&hrtc, &l_date, RTC_FORMAT_BCD);
 800084a:	f107 0308 	add.w	r3, r7, #8
 800084e:	2201      	movs	r2, #1
 8000850:	4619      	mov	r1, r3
 8000852:	4854      	ldr	r0, [pc, #336]	; (80009a4 <MAIN_updateLogSetup+0x170>)
 8000854:	f004 fb6a 	bl	8004f2c <HAL_RTC_GetDate>

  switch (p_data->button)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	7c1b      	ldrb	r3, [r3, #16]
 800085c:	3b05      	subs	r3, #5
 800085e:	2b03      	cmp	r3, #3
 8000860:	f200 8084 	bhi.w	800096c <MAIN_updateLogSetup+0x138>
 8000864:	a201      	add	r2, pc, #4	; (adr r2, 800086c <MAIN_updateLogSetup+0x38>)
 8000866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800086a:	bf00      	nop
 800086c:	0800087d 	.word	0x0800087d
 8000870:	08000931 	.word	0x08000931
 8000874:	080008b9 	.word	0x080008b9
 8000878:	080008f5 	.word	0x080008f5
  {
    case BLU_BUTTON_PAD_UP:
      if (g_MAIN_padUpPressedStartTime == 0)
 800087c:	4b4a      	ldr	r3, [pc, #296]	; (80009a8 <MAIN_updateLogSetup+0x174>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d10a      	bne.n	800089a <MAIN_updateLogSetup+0x66>
      {
        g_MAIN_padUpPressedStartTime = UTI_turnRtcTimeToSeconds(&l_time);
 8000884:	f107 030c 	add.w	r3, r7, #12
 8000888:	4618      	mov	r0, r3
 800088a:	f009 ff30 	bl	800a6ee <UTI_turnRtcTimeToSeconds>
 800088e:	4603      	mov	r3, r0
 8000890:	4a45      	ldr	r2, [pc, #276]	; (80009a8 <MAIN_updateLogSetup+0x174>)
 8000892:	6013      	str	r3, [r2, #0]

        LOG_increaseLevel();
 8000894:	f009 fa94 	bl	8009dc0 <LOG_increaseLevel>
      }
      else
      {
        g_MAIN_padUpPressedStartTime = 0;
      }
      break;
 8000898:	e06a      	b.n	8000970 <MAIN_updateLogSetup+0x13c>
      else if (UTI_turnRtcTimeToSeconds(&l_time) - g_MAIN_padUpPressedStartTime < STP_PAD_BUTTONS_DEBOUNCE_PERIOD_IN_S)
 800089a:	f107 030c 	add.w	r3, r7, #12
 800089e:	4618      	mov	r0, r3
 80008a0:	f009 ff25 	bl	800a6ee <UTI_turnRtcTimeToSeconds>
 80008a4:	4602      	mov	r2, r0
 80008a6:	4b40      	ldr	r3, [pc, #256]	; (80009a8 <MAIN_updateLogSetup+0x174>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	1ad3      	subs	r3, r2, r3
 80008ac:	2b01      	cmp	r3, #1
 80008ae:	d95f      	bls.n	8000970 <MAIN_updateLogSetup+0x13c>
        g_MAIN_padUpPressedStartTime = 0;
 80008b0:	4b3d      	ldr	r3, [pc, #244]	; (80009a8 <MAIN_updateLogSetup+0x174>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
      break;
 80008b6:	e05b      	b.n	8000970 <MAIN_updateLogSetup+0x13c>

    case BLU_BUTTON_PAD_DOWN:
      if (g_MAIN_padDownPressedStartTime == 0)
 80008b8:	4b3c      	ldr	r3, [pc, #240]	; (80009ac <MAIN_updateLogSetup+0x178>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d10a      	bne.n	80008d6 <MAIN_updateLogSetup+0xa2>
      {
        g_MAIN_padDownPressedStartTime = UTI_turnRtcTimeToSeconds(&l_time);
 80008c0:	f107 030c 	add.w	r3, r7, #12
 80008c4:	4618      	mov	r0, r3
 80008c6:	f009 ff12 	bl	800a6ee <UTI_turnRtcTimeToSeconds>
 80008ca:	4603      	mov	r3, r0
 80008cc:	4a37      	ldr	r2, [pc, #220]	; (80009ac <MAIN_updateLogSetup+0x178>)
 80008ce:	6013      	str	r3, [r2, #0]

        LOG_decreaseLevel();
 80008d0:	f009 fa8e 	bl	8009df0 <LOG_decreaseLevel>
      }
      else
      {
        g_MAIN_padDownPressedStartTime = 0;
      }
      break;
 80008d4:	e04e      	b.n	8000974 <MAIN_updateLogSetup+0x140>
      else if (UTI_turnRtcTimeToSeconds(&l_time) - g_MAIN_padDownPressedStartTime < STP_PAD_BUTTONS_DEBOUNCE_PERIOD_IN_S)
 80008d6:	f107 030c 	add.w	r3, r7, #12
 80008da:	4618      	mov	r0, r3
 80008dc:	f009 ff07 	bl	800a6ee <UTI_turnRtcTimeToSeconds>
 80008e0:	4602      	mov	r2, r0
 80008e2:	4b32      	ldr	r3, [pc, #200]	; (80009ac <MAIN_updateLogSetup+0x178>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	1ad3      	subs	r3, r2, r3
 80008e8:	2b01      	cmp	r3, #1
 80008ea:	d943      	bls.n	8000974 <MAIN_updateLogSetup+0x140>
        g_MAIN_padDownPressedStartTime = 0;
 80008ec:	4b2f      	ldr	r3, [pc, #188]	; (80009ac <MAIN_updateLogSetup+0x178>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
      break;
 80008f2:	e03f      	b.n	8000974 <MAIN_updateLogSetup+0x140>

    case BLU_BUTTON_PAD_LEFT:
      if (g_MAIN_padLeftPressedStartTime == 0)
 80008f4:	4b2e      	ldr	r3, [pc, #184]	; (80009b0 <MAIN_updateLogSetup+0x17c>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d10a      	bne.n	8000912 <MAIN_updateLogSetup+0xde>
      {
        g_MAIN_padLeftPressedStartTime = UTI_turnRtcTimeToSeconds(&l_time);
 80008fc:	f107 030c 	add.w	r3, r7, #12
 8000900:	4618      	mov	r0, r3
 8000902:	f009 fef4 	bl	800a6ee <UTI_turnRtcTimeToSeconds>
 8000906:	4603      	mov	r3, r0
 8000908:	4a29      	ldr	r2, [pc, #164]	; (80009b0 <MAIN_updateLogSetup+0x17c>)
 800090a:	6013      	str	r3, [r2, #0]

        LOG_toggleOnOff();
 800090c:	f009 fa2a 	bl	8009d64 <LOG_toggleOnOff>
      }
      else
      {
        g_MAIN_padLeftPressedStartTime = 0;
      }
      break;
 8000910:	e032      	b.n	8000978 <MAIN_updateLogSetup+0x144>
      else if (UTI_turnRtcTimeToSeconds(&l_time) - g_MAIN_padLeftPressedStartTime < STP_PAD_BUTTONS_DEBOUNCE_PERIOD_IN_S)
 8000912:	f107 030c 	add.w	r3, r7, #12
 8000916:	4618      	mov	r0, r3
 8000918:	f009 fee9 	bl	800a6ee <UTI_turnRtcTimeToSeconds>
 800091c:	4602      	mov	r2, r0
 800091e:	4b24      	ldr	r3, [pc, #144]	; (80009b0 <MAIN_updateLogSetup+0x17c>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	1ad3      	subs	r3, r2, r3
 8000924:	2b01      	cmp	r3, #1
 8000926:	d927      	bls.n	8000978 <MAIN_updateLogSetup+0x144>
        g_MAIN_padLeftPressedStartTime = 0;
 8000928:	4b21      	ldr	r3, [pc, #132]	; (80009b0 <MAIN_updateLogSetup+0x17c>)
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]
      break;
 800092e:	e023      	b.n	8000978 <MAIN_updateLogSetup+0x144>

    case BLU_BUTTON_PAD_RIGHT:
      if (g_MAIN_padRightPressedStartTime == 0)
 8000930:	4b20      	ldr	r3, [pc, #128]	; (80009b4 <MAIN_updateLogSetup+0x180>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d10a      	bne.n	800094e <MAIN_updateLogSetup+0x11a>
      {
        g_MAIN_padRightPressedStartTime = UTI_turnRtcTimeToSeconds(&l_time);
 8000938:	f107 030c 	add.w	r3, r7, #12
 800093c:	4618      	mov	r0, r3
 800093e:	f009 fed6 	bl	800a6ee <UTI_turnRtcTimeToSeconds>
 8000942:	4603      	mov	r3, r0
 8000944:	4a1b      	ldr	r2, [pc, #108]	; (80009b4 <MAIN_updateLogSetup+0x180>)
 8000946:	6013      	str	r3, [r2, #0]

        MAIN_togglePrintOutput();
 8000948:	f7ff ff56 	bl	80007f8 <MAIN_togglePrintOutput>
      }
      else
      {
        g_MAIN_padRightPressedStartTime = 0;
      }
      break;
 800094c:	e016      	b.n	800097c <MAIN_updateLogSetup+0x148>
      else if (UTI_turnRtcTimeToSeconds(&l_time) - g_MAIN_padRightPressedStartTime < STP_PAD_BUTTONS_DEBOUNCE_PERIOD_IN_S)
 800094e:	f107 030c 	add.w	r3, r7, #12
 8000952:	4618      	mov	r0, r3
 8000954:	f009 fecb 	bl	800a6ee <UTI_turnRtcTimeToSeconds>
 8000958:	4602      	mov	r2, r0
 800095a:	4b16      	ldr	r3, [pc, #88]	; (80009b4 <MAIN_updateLogSetup+0x180>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	1ad3      	subs	r3, r2, r3
 8000960:	2b01      	cmp	r3, #1
 8000962:	d90b      	bls.n	800097c <MAIN_updateLogSetup+0x148>
        g_MAIN_padRightPressedStartTime = 0;
 8000964:	4b13      	ldr	r3, [pc, #76]	; (80009b4 <MAIN_updateLogSetup+0x180>)
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
      break;
 800096a:	e007      	b.n	800097c <MAIN_updateLogSetup+0x148>

    default:
      ; /* Nothing to do */;
      break;
 800096c:	bf00      	nop
 800096e:	e006      	b.n	800097e <MAIN_updateLogSetup+0x14a>
      break;
 8000970:	bf00      	nop
 8000972:	e004      	b.n	800097e <MAIN_updateLogSetup+0x14a>
      break;
 8000974:	bf00      	nop
 8000976:	e002      	b.n	800097e <MAIN_updateLogSetup+0x14a>
      break;
 8000978:	bf00      	nop
 800097a:	e000      	b.n	800097e <MAIN_updateLogSetup+0x14a>
      break;
 800097c:	bf00      	nop
  }

  if ((p_data->button != BLU_BUTTON_PAD_UP) && (p_data->button != BLU_BUTTON_PAD_DOWN))
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	7c1b      	ldrb	r3, [r3, #16]
 8000982:	2b05      	cmp	r3, #5
 8000984:	d00a      	beq.n	800099c <MAIN_updateLogSetup+0x168>
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	7c1b      	ldrb	r3, [r3, #16]
 800098a:	2b07      	cmp	r3, #7
 800098c:	d006      	beq.n	800099c <MAIN_updateLogSetup+0x168>
  {
    g_MAIN_padUpPressedStartTime   = 0;
 800098e:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <MAIN_updateLogSetup+0x174>)
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
    g_MAIN_padDownPressedStartTime = 0;
 8000994:	4b05      	ldr	r3, [pc, #20]	; (80009ac <MAIN_updateLogSetup+0x178>)
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
  else
  {
    ; /* Nothing to do */;
  }

  return;
 800099a:	bf00      	nop
 800099c:	bf00      	nop
}
 800099e:	3710      	adds	r7, #16
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	2000061c 	.word	0x2000061c
 80009a8:	2000009c 	.word	0x2000009c
 80009ac:	200000a0 	.word	0x200000a0
 80009b0:	200000a4 	.word	0x200000a4
 80009b4:	200000a8 	.word	0x200000a8

080009b8 <MAIN_updateLedMode>:

static void MAIN_updateLedMode(T_DRV_MODE p_driveMode, uint32_t p_voltageInMv)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	4603      	mov	r3, r0
 80009c0:	6039      	str	r1, [r7, #0]
 80009c2:	71fb      	strb	r3, [r7, #7]
  /* Regarding LED mode, battery check is prioritary on user requests. */
  /* Ignore 0 value as we could get it at startup or while debugging.  */
  if ((p_voltageInMv != 0) && (p_voltageInMv < MAIN_MIN_BATTERY_LEVEL_IN_MV))
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d00d      	beq.n	80009e6 <MAIN_updateLedMode+0x2e>
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	f242 720f 	movw	r2, #9999	; 0x270f
 80009d0:	4293      	cmp	r3, r2
 80009d2:	d808      	bhi.n	80009e6 <MAIN_updateLedMode+0x2e>
  {
    LOG_warning("Battery is getting low: %u mV", p_voltageInMv);
 80009d4:	683a      	ldr	r2, [r7, #0]
 80009d6:	4911      	ldr	r1, [pc, #68]	; (8000a1c <MAIN_updateLedMode+0x64>)
 80009d8:	2002      	movs	r0, #2
 80009da:	f009 fa21 	bl	8009e20 <LOG_log>

    LED_setMode(LED_MODE_FORCED_OFF);
 80009de:	2000      	movs	r0, #0
 80009e0:	f009 f8fe 	bl	8009be0 <LED_setMode>
 80009e4:	e016      	b.n	8000a14 <MAIN_updateLedMode+0x5c>
  }
  else
  {
    switch (p_driveMode)
 80009e6:	79fb      	ldrb	r3, [r7, #7]
 80009e8:	2b02      	cmp	r3, #2
 80009ea:	d00e      	beq.n	8000a0a <MAIN_updateLedMode+0x52>
 80009ec:	2b02      	cmp	r3, #2
 80009ee:	dc10      	bgt.n	8000a12 <MAIN_updateLedMode+0x5a>
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d002      	beq.n	80009fa <MAIN_updateLedMode+0x42>
 80009f4:	2b01      	cmp	r3, #1
 80009f6:	d004      	beq.n	8000a02 <MAIN_updateLedMode+0x4a>
        LED_setMode(LED_MODE_BLINK_FAST);
        break;

      default:
        ; /* Nothing to do */
        break;
 80009f8:	e00b      	b.n	8000a12 <MAIN_updateLedMode+0x5a>
        LED_setMode(LED_MODE_BLINK_SLOW);
 80009fa:	2002      	movs	r0, #2
 80009fc:	f009 f8f0 	bl	8009be0 <LED_setMode>
        break;
 8000a00:	e008      	b.n	8000a14 <MAIN_updateLedMode+0x5c>
        LED_setMode(LED_MODE_BLINK_MEDIUM);
 8000a02:	2003      	movs	r0, #3
 8000a04:	f009 f8ec 	bl	8009be0 <LED_setMode>
        break;
 8000a08:	e004      	b.n	8000a14 <MAIN_updateLedMode+0x5c>
        LED_setMode(LED_MODE_BLINK_FAST);
 8000a0a:	2004      	movs	r0, #4
 8000a0c:	f009 f8e8 	bl	8009be0 <LED_setMode>
        break;
 8000a10:	e000      	b.n	8000a14 <MAIN_updateLedMode+0x5c>
        break;
 8000a12:	bf00      	nop
    }
  }

  return;
 8000a14:	bf00      	nop
}
 8000a16:	3708      	adds	r7, #8
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	0800bf4c 	.word	0x0800bf4c

08000a20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b08e      	sub	sp, #56	; 0x38
 8000a24:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a26:	f001 fb0d 	bl	8002044 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a2a:	f000 f9a3 	bl	8000d74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a2e:	f000 fda5 	bl	800157c <MX_GPIO_Init>
  MX_TIM1_Init();
 8000a32:	f000 fa7f 	bl	8000f34 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000a36:	f000 fd77 	bl	8001528 <MX_USART1_UART_Init>
  MX_UART4_Init();
 8000a3a:	f000 fd4b 	bl	80014d4 <MX_UART4_Init>
  MX_ADC1_Init();
 8000a3e:	f000 f9f1 	bl	8000e24 <MX_ADC1_Init>
  MX_TIM8_Init();
 8000a42:	f000 fc83 	bl	800134c <MX_TIM8_Init>
  MX_RTC_Init();
 8000a46:	f000 fa2b 	bl	8000ea0 <MX_RTC_Init>
  MX_TIM7_Init();
 8000a4a:	f000 fc49 	bl	80012e0 <MX_TIM7_Init>
  MX_TIM2_Init();
 8000a4e:	f000 fac1 	bl	8000fd4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000a52:	f000 fb13 	bl	800107c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000a56:	f000 fb65 	bl	8001124 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000a5a:	f000 fbb7 	bl	80011cc <MX_TIM5_Init>
  MX_TIM6_Init();
 8000a5e:	f000 fc09 	bl	8001274 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  /* Setup global variables */
  g_MAIN_padUpPressedStartTime    = 0;
 8000a62:	4ba6      	ldr	r3, [pc, #664]	; (8000cfc <main+0x2dc>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
  g_MAIN_padDownPressedStartTime  = 0;
 8000a68:	4ba5      	ldr	r3, [pc, #660]	; (8000d00 <main+0x2e0>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
  g_MAIN_padLeftPressedStartTime  = 0;
 8000a6e:	4ba5      	ldr	r3, [pc, #660]	; (8000d04 <main+0x2e4>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
  g_MAIN_padRightPressedStartTime = 0;
 8000a74:	4ba4      	ldr	r3, [pc, #656]	; (8000d08 <main+0x2e8>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
  g_MAIN_printOutput              = MAIN_PRINT_OUTPUT_TO_CONSOLE;
 8000a7a:	4ba4      	ldr	r3, [pc, #656]	; (8000d0c <main+0x2ec>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	701a      	strb	r2, [r3, #0]

  /* Initialize commands string FIFO */
  SFO_init(&l_commandsFifo);
 8000a80:	f107 031c 	add.w	r3, r7, #28
 8000a84:	4618      	mov	r0, r3
 8000a86:	f009 fcdd 	bl	800a444 <SFO_init>

  /* Setup console */
  CON_init(&huart1);
 8000a8a:	48a1      	ldr	r0, [pc, #644]	; (8000d10 <main+0x2f0>)
 8000a8c:	f008 f8aa 	bl	8008be4 <CON_init>

  /* Setup master connection */
  MAS_init(&huart4);
 8000a90:	48a0      	ldr	r0, [pc, #640]	; (8000d14 <main+0x2f4>)
 8000a92:	f009 fa57 	bl	8009f44 <MAS_init>
//  {
//    HAL_Delay(1000);
//  }

  /* Setup and start using logs */
  LOG_init    (&hrtc, STP_DEFAULT_IS_LOG_ON);
 8000a96:	2101      	movs	r1, #1
 8000a98:	489f      	ldr	r0, [pc, #636]	; (8000d18 <main+0x2f8>)
 8000a9a:	f009 f949 	bl	8009d30 <LOG_init>
  LOG_setLevel(STP_DEFAULT_LOG_LEVEL       );
 8000a9e:	2000      	movs	r0, #0
 8000aa0:	f009 f97e 	bl	8009da0 <LOG_setLevel>
  LOG_info    ("Starting RCFW"             );
 8000aa4:	499d      	ldr	r1, [pc, #628]	; (8000d1c <main+0x2fc>)
 8000aa6:	2001      	movs	r0, #1
 8000aa8:	f009 f9ba 	bl	8009e20 <LOG_log>

  /* Display RCFW banner */
  MAIN_displayRcfwBanner();
 8000aac:	f7ff fe66 	bl	800077c <MAIN_displayRcfwBanner>

  /* Initialize Timer 6 */
  l_halReturnCode = HAL_TIM_Base_Start(&htim6);
 8000ab0:	489b      	ldr	r0, [pc, #620]	; (8000d20 <main+0x300>)
 8000ab2:	f004 fe11 	bl	80056d8 <HAL_TIM_Base_Start>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

  if (l_halReturnCode != HAL_OK)
 8000abc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d007      	beq.n	8000ad4 <main+0xb4>
  {
    LOG_error("HAL_TIM_Base_Start(&htim6) returned an error code: %d", l_halReturnCode);
 8000ac4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000ac8:	461a      	mov	r2, r3
 8000aca:	4996      	ldr	r1, [pc, #600]	; (8000d24 <main+0x304>)
 8000acc:	2003      	movs	r0, #3
 8000ace:	f009 f9a7 	bl	8009e20 <LOG_log>
 8000ad2:	e003      	b.n	8000adc <main+0xbc>
  }
  else
  {
    LOG_info("Started TIMER 6 (time measurement)");
 8000ad4:	4994      	ldr	r1, [pc, #592]	; (8000d28 <main+0x308>)
 8000ad6:	2001      	movs	r0, #1
 8000ad8:	f009 f9a2 	bl	8009e20 <LOG_log>
  }

  /* Initialize Timer 7 and delay function in utilities */
  UTI_init(&htim7);
 8000adc:	4893      	ldr	r0, [pc, #588]	; (8000d2c <main+0x30c>)
 8000ade:	f009 fdb1 	bl	800a644 <UTI_init>

  l_halReturnCode = HAL_TIM_Base_Start_IT(&htim7);
 8000ae2:	4892      	ldr	r0, [pc, #584]	; (8000d2c <main+0x30c>)
 8000ae4:	f004 fe82 	bl	80057ec <HAL_TIM_Base_Start_IT>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

  if (l_halReturnCode != HAL_OK)
 8000aee:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d007      	beq.n	8000b06 <main+0xe6>
  {
    LOG_error("HAL_TIM_Base_Start_IT(&htim7) returned an error code: %d", l_halReturnCode);
 8000af6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000afa:	461a      	mov	r2, r3
 8000afc:	498c      	ldr	r1, [pc, #560]	; (8000d30 <main+0x310>)
 8000afe:	2003      	movs	r0, #3
 8000b00:	f009 f98e 	bl	8009e20 <LOG_log>
 8000b04:	e003      	b.n	8000b0e <main+0xee>
  }
  else
  {
    LOG_info("Started TIMER 7 (utilities/delay)");
 8000b06:	498b      	ldr	r1, [pc, #556]	; (8000d34 <main+0x314>)
 8000b08:	2001      	movs	r0, #1
 8000b0a:	f009 f989 	bl	8009e20 <LOG_log>
  }

  /* Initialize Timer 1 & green LED */
  LED_setMode(LED_MODE_BLINK_FAST);
 8000b0e:	2004      	movs	r0, #4
 8000b10:	f009 f866 	bl	8009be0 <LED_setMode>

  l_halReturnCode = HAL_TIM_Base_Start_IT(&htim1);
 8000b14:	4888      	ldr	r0, [pc, #544]	; (8000d38 <main+0x318>)
 8000b16:	f004 fe69 	bl	80057ec <HAL_TIM_Base_Start_IT>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

  if (l_halReturnCode != HAL_OK)
 8000b20:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d007      	beq.n	8000b38 <main+0x118>
  {
    LOG_error("HAL_TIM_Base_Start_IT(&htim1) returned an error code: %d", l_halReturnCode);
 8000b28:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	4983      	ldr	r1, [pc, #524]	; (8000d3c <main+0x31c>)
 8000b30:	2003      	movs	r0, #3
 8000b32:	f009 f975 	bl	8009e20 <LOG_log>
 8000b36:	e003      	b.n	8000b40 <main+0x120>
  }
  else
  {
    LOG_info("Started TIMER 1 (green LED)");
 8000b38:	4981      	ldr	r1, [pc, #516]	; (8000d40 <main+0x320>)
 8000b3a:	2001      	movs	r0, #1
 8000b3c:	f009 f970 	bl	8009e20 <LOG_log>
  }

  /* Initialize Timers 2, 3, 4 & 5 */
  l_halReturnCode  = HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 8000b40:	213c      	movs	r1, #60	; 0x3c
 8000b42:	4880      	ldr	r0, [pc, #512]	; (8000d44 <main+0x324>)
 8000b44:	f005 fa8a 	bl	800605c <HAL_TIM_Encoder_Start_IT>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  l_halReturnCode |= HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 8000b4e:	213c      	movs	r1, #60	; 0x3c
 8000b50:	487d      	ldr	r0, [pc, #500]	; (8000d48 <main+0x328>)
 8000b52:	f005 fa83 	bl	800605c <HAL_TIM_Encoder_Start_IT>
 8000b56:	4603      	mov	r3, r0
 8000b58:	461a      	mov	r2, r3
 8000b5a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000b5e:	4313      	orrs	r3, r2
 8000b60:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  l_halReturnCode |= HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 8000b64:	213c      	movs	r1, #60	; 0x3c
 8000b66:	4879      	ldr	r0, [pc, #484]	; (8000d4c <main+0x32c>)
 8000b68:	f005 fa78 	bl	800605c <HAL_TIM_Encoder_Start_IT>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	461a      	mov	r2, r3
 8000b70:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000b74:	4313      	orrs	r3, r2
 8000b76:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  l_halReturnCode |= HAL_TIM_Encoder_Start_IT(&htim5, TIM_CHANNEL_ALL);
 8000b7a:	213c      	movs	r1, #60	; 0x3c
 8000b7c:	4874      	ldr	r0, [pc, #464]	; (8000d50 <main+0x330>)
 8000b7e:	f005 fa6d 	bl	800605c <HAL_TIM_Encoder_Start_IT>
 8000b82:	4603      	mov	r3, r0
 8000b84:	461a      	mov	r2, r3
 8000b86:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000b8a:	4313      	orrs	r3, r2
 8000b8c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

  if (l_halReturnCode != HAL_OK)
 8000b90:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d007      	beq.n	8000ba8 <main+0x188>
  {
    LOG_error("HAL_TIM_Encoder_Start_IT(&htimX) returned error code(s): %d", l_halReturnCode);
 8000b98:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	496d      	ldr	r1, [pc, #436]	; (8000d54 <main+0x334>)
 8000ba0:	2003      	movs	r0, #3
 8000ba2:	f009 f93d 	bl	8009e20 <LOG_log>
 8000ba6:	e003      	b.n	8000bb0 <main+0x190>
  }
  else
  {
    LOG_info("Started TIMER 2, 3, 4, 5 (encoders)");
 8000ba8:	496b      	ldr	r1, [pc, #428]	; (8000d58 <main+0x338>)
 8000baa:	2001      	movs	r0, #1
 8000bac:	f009 f938 	bl	8009e20 <LOG_log>
  }

  /* Initialize Timer 8 */
  l_halReturnCode = HAL_TIM_Base_Start(&htim8);
 8000bb0:	486a      	ldr	r0, [pc, #424]	; (8000d5c <main+0x33c>)
 8000bb2:	f004 fd91 	bl	80056d8 <HAL_TIM_Base_Start>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

  if (l_halReturnCode != HAL_OK)
 8000bbc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d007      	beq.n	8000bd4 <main+0x1b4>
  {
    LOG_error("HAL_TIM_Base_Start(&htim8) returned an error code: %d", l_halReturnCode);
 8000bc4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000bc8:	461a      	mov	r2, r3
 8000bca:	4965      	ldr	r1, [pc, #404]	; (8000d60 <main+0x340>)
 8000bcc:	2003      	movs	r0, #3
 8000bce:	f009 f927 	bl	8009e20 <LOG_log>
 8000bd2:	e003      	b.n	8000bdc <main+0x1bc>
  }
  else
  {
    LOG_info("Started TIMER 8 (PWM channels)");
 8000bd4:	4963      	ldr	r1, [pc, #396]	; (8000d64 <main+0x344>)
 8000bd6:	2001      	movs	r0, #1
 8000bd8:	f009 f922 	bl	8009e20 <LOG_log>
  }

  /* Initialize battery monitor */
  BAT_init(&hadc1, &hrtc);
 8000bdc:	494e      	ldr	r1, [pc, #312]	; (8000d18 <main+0x2f8>)
 8000bde:	4862      	ldr	r0, [pc, #392]	; (8000d68 <main+0x348>)
 8000be0:	f007 fd50 	bl	8008684 <BAT_init>

  /* Initialize PWM channels */
  l_halReturnCode  = HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8000be4:	2100      	movs	r1, #0
 8000be6:	485d      	ldr	r0, [pc, #372]	; (8000d5c <main+0x33c>)
 8000be8:	f004 ff6e 	bl	8005ac8 <HAL_TIM_PWM_Start>
 8000bec:	4603      	mov	r3, r0
 8000bee:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  l_halReturnCode |= HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8000bf2:	2104      	movs	r1, #4
 8000bf4:	4859      	ldr	r0, [pc, #356]	; (8000d5c <main+0x33c>)
 8000bf6:	f004 ff67 	bl	8005ac8 <HAL_TIM_PWM_Start>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000c02:	4313      	orrs	r3, r2
 8000c04:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  l_halReturnCode |= HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8000c08:	2108      	movs	r1, #8
 8000c0a:	4854      	ldr	r0, [pc, #336]	; (8000d5c <main+0x33c>)
 8000c0c:	f004 ff5c 	bl	8005ac8 <HAL_TIM_PWM_Start>
 8000c10:	4603      	mov	r3, r0
 8000c12:	461a      	mov	r2, r3
 8000c14:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  l_halReturnCode |= HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8000c1e:	210c      	movs	r1, #12
 8000c20:	484e      	ldr	r0, [pc, #312]	; (8000d5c <main+0x33c>)
 8000c22:	f004 ff51 	bl	8005ac8 <HAL_TIM_PWM_Start>
 8000c26:	4603      	mov	r3, r0
 8000c28:	461a      	mov	r2, r3
 8000c2a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000c2e:	4313      	orrs	r3, r2
 8000c30:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

  if (l_halReturnCode != HAL_OK)
 8000c34:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d007      	beq.n	8000c4c <main+0x22c>
  {
    LOG_error("HAL_TIM_PWM_Start(&htim8) returned error code(s): %d", l_halReturnCode);
 8000c3c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000c40:	461a      	mov	r2, r3
 8000c42:	494a      	ldr	r1, [pc, #296]	; (8000d6c <main+0x34c>)
 8000c44:	2003      	movs	r0, #3
 8000c46:	f009 f8eb 	bl	8009e20 <LOG_log>
 8000c4a:	e003      	b.n	8000c54 <main+0x234>
  }
  else
  {
    LOG_info("Started PWM channels");
 8000c4c:	4948      	ldr	r1, [pc, #288]	; (8000d70 <main+0x350>)
 8000c4e:	2001      	movs	r0, #1
 8000c50:	f009 f8e6 	bl	8009e20 <LOG_log>
  }

  /* Initialize bluetooth control and data */
  BLU_init    ();
 8000c54:	f007 fefa 	bl	8008a4c <BLU_init>
  BLU_initData(&l_bluetoothData);
 8000c58:	f107 0308 	add.w	r3, r7, #8
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f007 ff05 	bl	8008a6c <BLU_initData>

  /* Initialize driving module */
  DRV_init(&htim8, &htim2, &htim3, &htim4, &htim5);
 8000c62:	4b3b      	ldr	r3, [pc, #236]	; (8000d50 <main+0x330>)
 8000c64:	9300      	str	r3, [sp, #0]
 8000c66:	4b39      	ldr	r3, [pc, #228]	; (8000d4c <main+0x32c>)
 8000c68:	4a37      	ldr	r2, [pc, #220]	; (8000d48 <main+0x328>)
 8000c6a:	4936      	ldr	r1, [pc, #216]	; (8000d44 <main+0x324>)
 8000c6c:	483b      	ldr	r0, [pc, #236]	; (8000d5c <main+0x33c>)
 8000c6e:	f008 f849 	bl	8008d04 <DRV_init>
  DRV_logInfo();
 8000c72:	f008 fbd1 	bl	8009418 <DRV_logInfo>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  /* Initialize time measurement for master board control */
  l_lastTime = __HAL_TIM_GET_COUNTER(&htim6);
 8000c76:	4b2a      	ldr	r3, [pc, #168]	; (8000d20 <main+0x300>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c7c:	85fb      	strh	r3, [r7, #46]	; 0x2e

  while (1)
  {
    BLU_receiveData        (&l_bluetoothData);
 8000c7e:	f107 0308 	add.w	r3, r7, #8
 8000c82:	4618      	mov	r0, r3
 8000c84:	f007 ff0a 	bl	8008a9c <BLU_receiveData>
    DRV_updateFromBluetooth(&l_bluetoothData);
 8000c88:	f107 0308 	add.w	r3, r7, #8
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f008 f951 	bl	8008f34 <DRV_updateFromBluetooth>

    l_driveMode = DRV_getMode();
 8000c92:	f008 fbb7 	bl	8009404 <DRV_getMode>
 8000c96:	4603      	mov	r3, r0
 8000c98:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    BAT_update         (&l_voltageInMv            );
 8000c9c:	1d3b      	adds	r3, r7, #4
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f007 fd3e 	bl	8008720 <BAT_update>
    MAIN_updateLedMode (l_driveMode, l_voltageInMv);
 8000ca4:	687a      	ldr	r2, [r7, #4]
 8000ca6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000caa:	4611      	mov	r1, r2
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff fe83 	bl	80009b8 <MAIN_updateLedMode>
    MAIN_updateLogSetup(&l_bluetoothData          );
 8000cb2:	f107 0308 	add.w	r3, r7, #8
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f7ff fdbc 	bl	8000834 <MAIN_updateLogSetup>

    UTI_delayUs(MAIN_LOOP_DELAY_IN_MS);
 8000cbc:	f242 7010 	movw	r0, #10000	; 0x2710
 8000cc0:	f009 fcd4 	bl	800a66c <UTI_delayUs>

    CON_updateFifo(&l_commandsFifo);
 8000cc4:	f107 031c 	add.w	r3, r7, #28
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f007 ffe3 	bl	8008c94 <CON_updateFifo>
    MAS_updateFifo(&l_commandsFifo);
 8000cce:	f107 031c 	add.w	r3, r7, #28
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f009 f98e 	bl	8009ff4 <MAS_updateFifo>

    l_currentTime = __HAL_TIM_GET_COUNTER(&htim6);
 8000cd8:	4b11      	ldr	r3, [pc, #68]	; (8000d20 <main+0x300>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cde:	857b      	strh	r3, [r7, #42]	; 0x2a
    l_deltaTime   = l_lastTime - l_currentTime;
 8000ce0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000ce2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000ce4:	1ad3      	subs	r3, r2, r3
 8000ce6:	853b      	strh	r3, [r7, #40]	; 0x28
    l_lastTime    = l_currentTime;
 8000ce8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000cea:	85fb      	strh	r3, [r7, #46]	; 0x2e

    DRV_updateFromMaster(&l_commandsFifo, l_deltaTime);
 8000cec:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000cee:	f107 031c 	add.w	r3, r7, #28
 8000cf2:	4611      	mov	r1, r2
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f008 fa5d 	bl	80091b4 <DRV_updateFromMaster>
    BLU_receiveData        (&l_bluetoothData);
 8000cfa:	e7c0      	b.n	8000c7e <main+0x25e>
 8000cfc:	2000009c 	.word	0x2000009c
 8000d00:	200000a0 	.word	0x200000a0
 8000d04:	200000a4 	.word	0x200000a4
 8000d08:	200000a8 	.word	0x200000a8
 8000d0c:	20000798 	.word	0x20000798
 8000d10:	200005a8 	.word	0x200005a8
 8000d14:	2000079c 	.word	0x2000079c
 8000d18:	2000061c 	.word	0x2000061c
 8000d1c:	0800bf6c 	.word	0x0800bf6c
 8000d20:	20000630 	.word	0x20000630
 8000d24:	0800bf7c 	.word	0x0800bf7c
 8000d28:	0800bfb4 	.word	0x0800bfb4
 8000d2c:	200008c4 	.word	0x200008c4
 8000d30:	0800bfd8 	.word	0x0800bfd8
 8000d34:	0800c014 	.word	0x0800c014
 8000d38:	200006e4 	.word	0x200006e4
 8000d3c:	0800c038 	.word	0x0800c038
 8000d40:	0800c074 	.word	0x0800c074
 8000d44:	20000810 	.word	0x20000810
 8000d48:	200004c4 	.word	0x200004c4
 8000d4c:	2000035c 	.word	0x2000035c
 8000d50:	20000410 	.word	0x20000410
 8000d54:	0800c090 	.word	0x0800c090
 8000d58:	0800c0cc 	.word	0x0800c0cc
 8000d5c:	200002a8 	.word	0x200002a8
 8000d60:	0800c0f0 	.word	0x0800c0f0
 8000d64:	0800c128 	.word	0x0800c128
 8000d68:	20000578 	.word	0x20000578
 8000d6c:	0800c148 	.word	0x0800c148
 8000d70:	0800c180 	.word	0x0800c180

08000d74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b096      	sub	sp, #88	; 0x58
 8000d78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d7a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d7e:	2228      	movs	r2, #40	; 0x28
 8000d80:	2100      	movs	r1, #0
 8000d82:	4618      	mov	r0, r3
 8000d84:	f009 fd84 	bl	800a890 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d88:	f107 031c 	add.w	r3, r7, #28
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]
 8000d94:	60da      	str	r2, [r3, #12]
 8000d96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d98:	1d3b      	adds	r3, r7, #4
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]
 8000d9e:	605a      	str	r2, [r3, #4]
 8000da0:	609a      	str	r2, [r3, #8]
 8000da2:	60da      	str	r2, [r3, #12]
 8000da4:	611a      	str	r2, [r3, #16]
 8000da6:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000da8:	230a      	movs	r3, #10
 8000daa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dac:	2301      	movs	r3, #1
 8000dae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000db0:	2310      	movs	r3, #16
 8000db2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000db4:	2301      	movs	r3, #1
 8000db6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000db8:	2300      	movs	r3, #0
 8000dba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dbc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f002 fd33 	bl	800382c <HAL_RCC_OscConfig>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000dcc:	f000 fcd6 	bl	800177c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dd0:	230f      	movs	r3, #15
 8000dd2:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000de0:	2300      	movs	r3, #0
 8000de2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000de4:	f107 031c 	add.w	r3, r7, #28
 8000de8:	2100      	movs	r1, #0
 8000dea:	4618      	mov	r0, r3
 8000dec:	f003 f88e 	bl	8003f0c <HAL_RCC_ClockConfig>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000df6:	f000 fcc1 	bl	800177c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 8000dfa:	2303      	movs	r3, #3
 8000dfc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000dfe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e02:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000e04:	2300      	movs	r3, #0
 8000e06:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e08:	1d3b      	adds	r3, r7, #4
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f003 fabe 	bl	800438c <HAL_RCCEx_PeriphCLKConfig>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000e16:	f000 fcb1 	bl	800177c <Error_Handler>
  }
}
 8000e1a:	bf00      	nop
 8000e1c:	3758      	adds	r7, #88	; 0x58
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
	...

08000e24 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e2a:	1d3b      	adds	r3, r7, #4
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	605a      	str	r2, [r3, #4]
 8000e32:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e34:	4b18      	ldr	r3, [pc, #96]	; (8000e98 <MX_ADC1_Init+0x74>)
 8000e36:	4a19      	ldr	r2, [pc, #100]	; (8000e9c <MX_ADC1_Init+0x78>)
 8000e38:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e3a:	4b17      	ldr	r3, [pc, #92]	; (8000e98 <MX_ADC1_Init+0x74>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e40:	4b15      	ldr	r3, [pc, #84]	; (8000e98 <MX_ADC1_Init+0x74>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e46:	4b14      	ldr	r3, [pc, #80]	; (8000e98 <MX_ADC1_Init+0x74>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e4c:	4b12      	ldr	r3, [pc, #72]	; (8000e98 <MX_ADC1_Init+0x74>)
 8000e4e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000e52:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e54:	4b10      	ldr	r3, [pc, #64]	; (8000e98 <MX_ADC1_Init+0x74>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000e5a:	4b0f      	ldr	r3, [pc, #60]	; (8000e98 <MX_ADC1_Init+0x74>)
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e60:	480d      	ldr	r0, [pc, #52]	; (8000e98 <MX_ADC1_Init+0x74>)
 8000e62:	f001 f951 	bl	8002108 <HAL_ADC_Init>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000e6c:	f000 fc86 	bl	800177c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000e70:	2305      	movs	r3, #5
 8000e72:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e74:	2301      	movs	r3, #1
 8000e76:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e7c:	1d3b      	adds	r3, r7, #4
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4805      	ldr	r0, [pc, #20]	; (8000e98 <MX_ADC1_Init+0x74>)
 8000e82:	f001 fcf3 	bl	800286c <HAL_ADC_ConfigChannel>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000e8c:	f000 fc76 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e90:	bf00      	nop
 8000e92:	3710      	adds	r7, #16
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	20000578 	.word	0x20000578
 8000e9c:	40012400 	.word	0x40012400

08000ea0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000ea6:	1d3b      	adds	r3, r7, #4
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	460a      	mov	r2, r1
 8000eac:	801a      	strh	r2, [r3, #0]
 8000eae:	460a      	mov	r2, r1
 8000eb0:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000eb6:	4b1d      	ldr	r3, [pc, #116]	; (8000f2c <MX_RTC_Init+0x8c>)
 8000eb8:	4a1d      	ldr	r2, [pc, #116]	; (8000f30 <MX_RTC_Init+0x90>)
 8000eba:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000ebc:	4b1b      	ldr	r3, [pc, #108]	; (8000f2c <MX_RTC_Init+0x8c>)
 8000ebe:	f04f 32ff 	mov.w	r2, #4294967295
 8000ec2:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 8000ec4:	4b19      	ldr	r3, [pc, #100]	; (8000f2c <MX_RTC_Init+0x8c>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000eca:	4818      	ldr	r0, [pc, #96]	; (8000f2c <MX_RTC_Init+0x8c>)
 8000ecc:	f003 fc7a 	bl	80047c4 <HAL_RTC_Init>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_RTC_Init+0x3a>
  {
    Error_Handler();
 8000ed6:	f000 fc51 	bl	800177c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000eda:	2300      	movs	r3, #0
 8000edc:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000ee6:	1d3b      	adds	r3, r7, #4
 8000ee8:	2201      	movs	r2, #1
 8000eea:	4619      	mov	r1, r3
 8000eec:	480f      	ldr	r0, [pc, #60]	; (8000f2c <MX_RTC_Init+0x8c>)
 8000eee:	f003 fd33 	bl	8004958 <HAL_RTC_SetTime>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_RTC_Init+0x5c>
  {
    Error_Handler();
 8000ef8:	f000 fc40 	bl	800177c <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000efc:	2301      	movs	r3, #1
 8000efe:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8000f00:	2301      	movs	r3, #1
 8000f02:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 8000f04:	2301      	movs	r3, #1
 8000f06:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8000f0c:	463b      	mov	r3, r7
 8000f0e:	2201      	movs	r2, #1
 8000f10:	4619      	mov	r1, r3
 8000f12:	4806      	ldr	r0, [pc, #24]	; (8000f2c <MX_RTC_Init+0x8c>)
 8000f14:	f003 feec 	bl	8004cf0 <HAL_RTC_SetDate>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8000f1e:	f000 fc2d 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000f22:	bf00      	nop
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	2000061c 	.word	0x2000061c
 8000f30:	40002800 	.word	0x40002800

08000f34 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b086      	sub	sp, #24
 8000f38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f3a:	f107 0308 	add.w	r3, r7, #8
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	605a      	str	r2, [r3, #4]
 8000f44:	609a      	str	r2, [r3, #8]
 8000f46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f48:	463b      	mov	r3, r7
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f50:	4b1e      	ldr	r3, [pc, #120]	; (8000fcc <MX_TIM1_Init+0x98>)
 8000f52:	4a1f      	ldr	r2, [pc, #124]	; (8000fd0 <MX_TIM1_Init+0x9c>)
 8000f54:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7999;
 8000f56:	4b1d      	ldr	r3, [pc, #116]	; (8000fcc <MX_TIM1_Init+0x98>)
 8000f58:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000f5c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f5e:	4b1b      	ldr	r3, [pc, #108]	; (8000fcc <MX_TIM1_Init+0x98>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 249;
 8000f64:	4b19      	ldr	r3, [pc, #100]	; (8000fcc <MX_TIM1_Init+0x98>)
 8000f66:	22f9      	movs	r2, #249	; 0xf9
 8000f68:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f6a:	4b18      	ldr	r3, [pc, #96]	; (8000fcc <MX_TIM1_Init+0x98>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f70:	4b16      	ldr	r3, [pc, #88]	; (8000fcc <MX_TIM1_Init+0x98>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f76:	4b15      	ldr	r3, [pc, #84]	; (8000fcc <MX_TIM1_Init+0x98>)
 8000f78:	2280      	movs	r2, #128	; 0x80
 8000f7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f7c:	4813      	ldr	r0, [pc, #76]	; (8000fcc <MX_TIM1_Init+0x98>)
 8000f7e:	f004 fad9 	bl	8005534 <HAL_TIM_Base_Init>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000f88:	f000 fbf8 	bl	800177c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f90:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f92:	f107 0308 	add.w	r3, r7, #8
 8000f96:	4619      	mov	r1, r3
 8000f98:	480c      	ldr	r0, [pc, #48]	; (8000fcc <MX_TIM1_Init+0x98>)
 8000f9a:	f005 fc03 	bl	80067a4 <HAL_TIM_ConfigClockSource>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000fa4:	f000 fbea 	bl	800177c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fac:	2300      	movs	r3, #0
 8000fae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fb0:	463b      	mov	r3, r7
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4805      	ldr	r0, [pc, #20]	; (8000fcc <MX_TIM1_Init+0x98>)
 8000fb6:	f006 fb51 	bl	800765c <HAL_TIMEx_MasterConfigSynchronization>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000fc0:	f000 fbdc 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000fc4:	bf00      	nop
 8000fc6:	3718      	adds	r7, #24
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	200006e4 	.word	0x200006e4
 8000fd0:	40012c00 	.word	0x40012c00

08000fd4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b08c      	sub	sp, #48	; 0x30
 8000fd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000fda:	f107 030c 	add.w	r3, r7, #12
 8000fde:	2224      	movs	r2, #36	; 0x24
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f009 fc54 	bl	800a890 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fe8:	1d3b      	adds	r3, r7, #4
 8000fea:	2200      	movs	r2, #0
 8000fec:	601a      	str	r2, [r3, #0]
 8000fee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ff0:	4b21      	ldr	r3, [pc, #132]	; (8001078 <MX_TIM2_Init+0xa4>)
 8000ff2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ff6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000ff8:	4b1f      	ldr	r3, [pc, #124]	; (8001078 <MX_TIM2_Init+0xa4>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ffe:	4b1e      	ldr	r3, [pc, #120]	; (8001078 <MX_TIM2_Init+0xa4>)
 8001000:	2200      	movs	r2, #0
 8001002:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001004:	4b1c      	ldr	r3, [pc, #112]	; (8001078 <MX_TIM2_Init+0xa4>)
 8001006:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800100a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800100c:	4b1a      	ldr	r3, [pc, #104]	; (8001078 <MX_TIM2_Init+0xa4>)
 800100e:	2200      	movs	r2, #0
 8001010:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001012:	4b19      	ldr	r3, [pc, #100]	; (8001078 <MX_TIM2_Init+0xa4>)
 8001014:	2280      	movs	r2, #128	; 0x80
 8001016:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001018:	2303      	movs	r3, #3
 800101a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800101c:	2300      	movs	r3, #0
 800101e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001020:	2301      	movs	r3, #1
 8001022:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001024:	2300      	movs	r3, #0
 8001026:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001028:	230a      	movs	r3, #10
 800102a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800102c:	2300      	movs	r3, #0
 800102e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001030:	2301      	movs	r3, #1
 8001032:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001034:	2300      	movs	r3, #0
 8001036:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001038:	2300      	movs	r3, #0
 800103a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800103c:	f107 030c 	add.w	r3, r7, #12
 8001040:	4619      	mov	r1, r3
 8001042:	480d      	ldr	r0, [pc, #52]	; (8001078 <MX_TIM2_Init+0xa4>)
 8001044:	f004 fe68 	bl	8005d18 <HAL_TIM_Encoder_Init>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800104e:	f000 fb95 	bl	800177c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001052:	2300      	movs	r3, #0
 8001054:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001056:	2300      	movs	r3, #0
 8001058:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800105a:	1d3b      	adds	r3, r7, #4
 800105c:	4619      	mov	r1, r3
 800105e:	4806      	ldr	r0, [pc, #24]	; (8001078 <MX_TIM2_Init+0xa4>)
 8001060:	f006 fafc 	bl	800765c <HAL_TIMEx_MasterConfigSynchronization>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800106a:	f000 fb87 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800106e:	bf00      	nop
 8001070:	3730      	adds	r7, #48	; 0x30
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	20000810 	.word	0x20000810

0800107c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b08c      	sub	sp, #48	; 0x30
 8001080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001082:	f107 030c 	add.w	r3, r7, #12
 8001086:	2224      	movs	r2, #36	; 0x24
 8001088:	2100      	movs	r1, #0
 800108a:	4618      	mov	r0, r3
 800108c:	f009 fc00 	bl	800a890 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001090:	1d3b      	adds	r3, r7, #4
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001098:	4b20      	ldr	r3, [pc, #128]	; (800111c <MX_TIM3_Init+0xa0>)
 800109a:	4a21      	ldr	r2, [pc, #132]	; (8001120 <MX_TIM3_Init+0xa4>)
 800109c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800109e:	4b1f      	ldr	r3, [pc, #124]	; (800111c <MX_TIM3_Init+0xa0>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010a4:	4b1d      	ldr	r3, [pc, #116]	; (800111c <MX_TIM3_Init+0xa0>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80010aa:	4b1c      	ldr	r3, [pc, #112]	; (800111c <MX_TIM3_Init+0xa0>)
 80010ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010b0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010b2:	4b1a      	ldr	r3, [pc, #104]	; (800111c <MX_TIM3_Init+0xa0>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010b8:	4b18      	ldr	r3, [pc, #96]	; (800111c <MX_TIM3_Init+0xa0>)
 80010ba:	2280      	movs	r2, #128	; 0x80
 80010bc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80010be:	2303      	movs	r3, #3
 80010c0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80010c2:	2300      	movs	r3, #0
 80010c4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80010c6:	2301      	movs	r3, #1
 80010c8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80010ca:	2300      	movs	r3, #0
 80010cc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80010ce:	230a      	movs	r3, #10
 80010d0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80010d2:	2300      	movs	r3, #0
 80010d4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80010d6:	2301      	movs	r3, #1
 80010d8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80010da:	2300      	movs	r3, #0
 80010dc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80010de:	2300      	movs	r3, #0
 80010e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80010e2:	f107 030c 	add.w	r3, r7, #12
 80010e6:	4619      	mov	r1, r3
 80010e8:	480c      	ldr	r0, [pc, #48]	; (800111c <MX_TIM3_Init+0xa0>)
 80010ea:	f004 fe15 	bl	8005d18 <HAL_TIM_Encoder_Init>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80010f4:	f000 fb42 	bl	800177c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010f8:	2300      	movs	r3, #0
 80010fa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010fc:	2300      	movs	r3, #0
 80010fe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001100:	1d3b      	adds	r3, r7, #4
 8001102:	4619      	mov	r1, r3
 8001104:	4805      	ldr	r0, [pc, #20]	; (800111c <MX_TIM3_Init+0xa0>)
 8001106:	f006 faa9 	bl	800765c <HAL_TIMEx_MasterConfigSynchronization>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001110:	f000 fb34 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001114:	bf00      	nop
 8001116:	3730      	adds	r7, #48	; 0x30
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	200004c4 	.word	0x200004c4
 8001120:	40000400 	.word	0x40000400

08001124 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b08c      	sub	sp, #48	; 0x30
 8001128:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800112a:	f107 030c 	add.w	r3, r7, #12
 800112e:	2224      	movs	r2, #36	; 0x24
 8001130:	2100      	movs	r1, #0
 8001132:	4618      	mov	r0, r3
 8001134:	f009 fbac 	bl	800a890 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001138:	1d3b      	adds	r3, r7, #4
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001140:	4b20      	ldr	r3, [pc, #128]	; (80011c4 <MX_TIM4_Init+0xa0>)
 8001142:	4a21      	ldr	r2, [pc, #132]	; (80011c8 <MX_TIM4_Init+0xa4>)
 8001144:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001146:	4b1f      	ldr	r3, [pc, #124]	; (80011c4 <MX_TIM4_Init+0xa0>)
 8001148:	2200      	movs	r2, #0
 800114a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800114c:	4b1d      	ldr	r3, [pc, #116]	; (80011c4 <MX_TIM4_Init+0xa0>)
 800114e:	2200      	movs	r2, #0
 8001150:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001152:	4b1c      	ldr	r3, [pc, #112]	; (80011c4 <MX_TIM4_Init+0xa0>)
 8001154:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001158:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800115a:	4b1a      	ldr	r3, [pc, #104]	; (80011c4 <MX_TIM4_Init+0xa0>)
 800115c:	2200      	movs	r2, #0
 800115e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001160:	4b18      	ldr	r3, [pc, #96]	; (80011c4 <MX_TIM4_Init+0xa0>)
 8001162:	2280      	movs	r2, #128	; 0x80
 8001164:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001166:	2303      	movs	r3, #3
 8001168:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800116a:	2300      	movs	r3, #0
 800116c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800116e:	2301      	movs	r3, #1
 8001170:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001172:	2300      	movs	r3, #0
 8001174:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001176:	230a      	movs	r3, #10
 8001178:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800117a:	2300      	movs	r3, #0
 800117c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800117e:	2301      	movs	r3, #1
 8001180:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001182:	2300      	movs	r3, #0
 8001184:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001186:	2300      	movs	r3, #0
 8001188:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800118a:	f107 030c 	add.w	r3, r7, #12
 800118e:	4619      	mov	r1, r3
 8001190:	480c      	ldr	r0, [pc, #48]	; (80011c4 <MX_TIM4_Init+0xa0>)
 8001192:	f004 fdc1 	bl	8005d18 <HAL_TIM_Encoder_Init>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800119c:	f000 faee 	bl	800177c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011a0:	2300      	movs	r3, #0
 80011a2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011a4:	2300      	movs	r3, #0
 80011a6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80011a8:	1d3b      	adds	r3, r7, #4
 80011aa:	4619      	mov	r1, r3
 80011ac:	4805      	ldr	r0, [pc, #20]	; (80011c4 <MX_TIM4_Init+0xa0>)
 80011ae:	f006 fa55 	bl	800765c <HAL_TIMEx_MasterConfigSynchronization>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80011b8:	f000 fae0 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80011bc:	bf00      	nop
 80011be:	3730      	adds	r7, #48	; 0x30
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	2000035c 	.word	0x2000035c
 80011c8:	40000800 	.word	0x40000800

080011cc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b08c      	sub	sp, #48	; 0x30
 80011d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80011d2:	f107 030c 	add.w	r3, r7, #12
 80011d6:	2224      	movs	r2, #36	; 0x24
 80011d8:	2100      	movs	r1, #0
 80011da:	4618      	mov	r0, r3
 80011dc:	f009 fb58 	bl	800a890 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011e0:	1d3b      	adds	r3, r7, #4
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80011e8:	4b20      	ldr	r3, [pc, #128]	; (800126c <MX_TIM5_Init+0xa0>)
 80011ea:	4a21      	ldr	r2, [pc, #132]	; (8001270 <MX_TIM5_Init+0xa4>)
 80011ec:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80011ee:	4b1f      	ldr	r3, [pc, #124]	; (800126c <MX_TIM5_Init+0xa0>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011f4:	4b1d      	ldr	r3, [pc, #116]	; (800126c <MX_TIM5_Init+0xa0>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 80011fa:	4b1c      	ldr	r3, [pc, #112]	; (800126c <MX_TIM5_Init+0xa0>)
 80011fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001200:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001202:	4b1a      	ldr	r3, [pc, #104]	; (800126c <MX_TIM5_Init+0xa0>)
 8001204:	2200      	movs	r2, #0
 8001206:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001208:	4b18      	ldr	r3, [pc, #96]	; (800126c <MX_TIM5_Init+0xa0>)
 800120a:	2280      	movs	r2, #128	; 0x80
 800120c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800120e:	2303      	movs	r3, #3
 8001210:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001212:	2300      	movs	r3, #0
 8001214:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001216:	2301      	movs	r3, #1
 8001218:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800121a:	2300      	movs	r3, #0
 800121c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 800121e:	230a      	movs	r3, #10
 8001220:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001222:	2300      	movs	r3, #0
 8001224:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001226:	2301      	movs	r3, #1
 8001228:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800122a:	2300      	movs	r3, #0
 800122c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800122e:	2300      	movs	r3, #0
 8001230:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001232:	f107 030c 	add.w	r3, r7, #12
 8001236:	4619      	mov	r1, r3
 8001238:	480c      	ldr	r0, [pc, #48]	; (800126c <MX_TIM5_Init+0xa0>)
 800123a:	f004 fd6d 	bl	8005d18 <HAL_TIM_Encoder_Init>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001244:	f000 fa9a 	bl	800177c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001248:	2300      	movs	r3, #0
 800124a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800124c:	2300      	movs	r3, #0
 800124e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001250:	1d3b      	adds	r3, r7, #4
 8001252:	4619      	mov	r1, r3
 8001254:	4805      	ldr	r0, [pc, #20]	; (800126c <MX_TIM5_Init+0xa0>)
 8001256:	f006 fa01 	bl	800765c <HAL_TIMEx_MasterConfigSynchronization>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001260:	f000 fa8c 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001264:	bf00      	nop
 8001266:	3730      	adds	r7, #48	; 0x30
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	20000410 	.word	0x20000410
 8001270:	40000c00 	.word	0x40000c00

08001274 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800127a:	463b      	mov	r3, r7
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001282:	4b15      	ldr	r3, [pc, #84]	; (80012d8 <MX_TIM6_Init+0x64>)
 8001284:	4a15      	ldr	r2, [pc, #84]	; (80012dc <MX_TIM6_Init+0x68>)
 8001286:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7;
 8001288:	4b13      	ldr	r3, [pc, #76]	; (80012d8 <MX_TIM6_Init+0x64>)
 800128a:	2207      	movs	r2, #7
 800128c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800128e:	4b12      	ldr	r3, [pc, #72]	; (80012d8 <MX_TIM6_Init+0x64>)
 8001290:	2200      	movs	r2, #0
 8001292:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001294:	4b10      	ldr	r3, [pc, #64]	; (80012d8 <MX_TIM6_Init+0x64>)
 8001296:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800129a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800129c:	4b0e      	ldr	r3, [pc, #56]	; (80012d8 <MX_TIM6_Init+0x64>)
 800129e:	2280      	movs	r2, #128	; 0x80
 80012a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80012a2:	480d      	ldr	r0, [pc, #52]	; (80012d8 <MX_TIM6_Init+0x64>)
 80012a4:	f004 f946 	bl	8005534 <HAL_TIM_Base_Init>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80012ae:	f000 fa65 	bl	800177c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012b2:	2300      	movs	r3, #0
 80012b4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012b6:	2300      	movs	r3, #0
 80012b8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80012ba:	463b      	mov	r3, r7
 80012bc:	4619      	mov	r1, r3
 80012be:	4806      	ldr	r0, [pc, #24]	; (80012d8 <MX_TIM6_Init+0x64>)
 80012c0:	f006 f9cc 	bl	800765c <HAL_TIMEx_MasterConfigSynchronization>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80012ca:	f000 fa57 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80012ce:	bf00      	nop
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20000630 	.word	0x20000630
 80012dc:	40001000 	.word	0x40001000

080012e0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012e6:	463b      	mov	r3, r7
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80012ee:	4b15      	ldr	r3, [pc, #84]	; (8001344 <MX_TIM7_Init+0x64>)
 80012f0:	4a15      	ldr	r2, [pc, #84]	; (8001348 <MX_TIM7_Init+0x68>)
 80012f2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7;
 80012f4:	4b13      	ldr	r3, [pc, #76]	; (8001344 <MX_TIM7_Init+0x64>)
 80012f6:	2207      	movs	r2, #7
 80012f8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012fa:	4b12      	ldr	r3, [pc, #72]	; (8001344 <MX_TIM7_Init+0x64>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8001300:	4b10      	ldr	r3, [pc, #64]	; (8001344 <MX_TIM7_Init+0x64>)
 8001302:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001306:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001308:	4b0e      	ldr	r3, [pc, #56]	; (8001344 <MX_TIM7_Init+0x64>)
 800130a:	2280      	movs	r2, #128	; 0x80
 800130c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800130e:	480d      	ldr	r0, [pc, #52]	; (8001344 <MX_TIM7_Init+0x64>)
 8001310:	f004 f910 	bl	8005534 <HAL_TIM_Base_Init>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800131a:	f000 fa2f 	bl	800177c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800131e:	2300      	movs	r3, #0
 8001320:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001322:	2300      	movs	r3, #0
 8001324:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001326:	463b      	mov	r3, r7
 8001328:	4619      	mov	r1, r3
 800132a:	4806      	ldr	r0, [pc, #24]	; (8001344 <MX_TIM7_Init+0x64>)
 800132c:	f006 f996 	bl	800765c <HAL_TIMEx_MasterConfigSynchronization>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001336:	f000 fa21 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800133a:	bf00      	nop
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	200008c4 	.word	0x200008c4
 8001348:	40001400 	.word	0x40001400

0800134c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b096      	sub	sp, #88	; 0x58
 8001350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001352:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	605a      	str	r2, [r3, #4]
 800135c:	609a      	str	r2, [r3, #8]
 800135e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001360:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800136a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	605a      	str	r2, [r3, #4]
 8001374:	609a      	str	r2, [r3, #8]
 8001376:	60da      	str	r2, [r3, #12]
 8001378:	611a      	str	r2, [r3, #16]
 800137a:	615a      	str	r2, [r3, #20]
 800137c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800137e:	1d3b      	adds	r3, r7, #4
 8001380:	2220      	movs	r2, #32
 8001382:	2100      	movs	r1, #0
 8001384:	4618      	mov	r0, r3
 8001386:	f009 fa83 	bl	800a890 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800138a:	4b50      	ldr	r3, [pc, #320]	; (80014cc <MX_TIM8_Init+0x180>)
 800138c:	4a50      	ldr	r2, [pc, #320]	; (80014d0 <MX_TIM8_Init+0x184>)
 800138e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 7;
 8001390:	4b4e      	ldr	r3, [pc, #312]	; (80014cc <MX_TIM8_Init+0x180>)
 8001392:	2207      	movs	r2, #7
 8001394:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001396:	4b4d      	ldr	r3, [pc, #308]	; (80014cc <MX_TIM8_Init+0x180>)
 8001398:	2200      	movs	r2, #0
 800139a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 100;
 800139c:	4b4b      	ldr	r3, [pc, #300]	; (80014cc <MX_TIM8_Init+0x180>)
 800139e:	2264      	movs	r2, #100	; 0x64
 80013a0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013a2:	4b4a      	ldr	r3, [pc, #296]	; (80014cc <MX_TIM8_Init+0x180>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80013a8:	4b48      	ldr	r3, [pc, #288]	; (80014cc <MX_TIM8_Init+0x180>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013ae:	4b47      	ldr	r3, [pc, #284]	; (80014cc <MX_TIM8_Init+0x180>)
 80013b0:	2280      	movs	r2, #128	; 0x80
 80013b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80013b4:	4845      	ldr	r0, [pc, #276]	; (80014cc <MX_TIM8_Init+0x180>)
 80013b6:	f004 f8bd 	bl	8005534 <HAL_TIM_Base_Init>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 80013c0:	f000 f9dc 	bl	800177c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013c8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80013ca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80013ce:	4619      	mov	r1, r3
 80013d0:	483e      	ldr	r0, [pc, #248]	; (80014cc <MX_TIM8_Init+0x180>)
 80013d2:	f005 f9e7 	bl	80067a4 <HAL_TIM_ConfigClockSource>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 80013dc:	f000 f9ce 	bl	800177c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80013e0:	483a      	ldr	r0, [pc, #232]	; (80014cc <MX_TIM8_Init+0x180>)
 80013e2:	f004 fa95 	bl	8005910 <HAL_TIM_PWM_Init>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 80013ec:	f000 f9c6 	bl	800177c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013f0:	2300      	movs	r3, #0
 80013f2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013f4:	2300      	movs	r3, #0
 80013f6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80013f8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80013fc:	4619      	mov	r1, r3
 80013fe:	4833      	ldr	r0, [pc, #204]	; (80014cc <MX_TIM8_Init+0x180>)
 8001400:	f006 f92c 	bl	800765c <HAL_TIMEx_MasterConfigSynchronization>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 800140a:	f000 f9b7 	bl	800177c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800140e:	2360      	movs	r3, #96	; 0x60
 8001410:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001412:	2300      	movs	r3, #0
 8001414:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001416:	2300      	movs	r3, #0
 8001418:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800141a:	2300      	movs	r3, #0
 800141c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800141e:	2300      	movs	r3, #0
 8001420:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001422:	2300      	movs	r3, #0
 8001424:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001426:	2300      	movs	r3, #0
 8001428:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800142a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800142e:	2200      	movs	r2, #0
 8001430:	4619      	mov	r1, r3
 8001432:	4826      	ldr	r0, [pc, #152]	; (80014cc <MX_TIM8_Init+0x180>)
 8001434:	f005 f818 	bl	8006468 <HAL_TIM_PWM_ConfigChannel>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 800143e:	f000 f99d 	bl	800177c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001442:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001446:	2204      	movs	r2, #4
 8001448:	4619      	mov	r1, r3
 800144a:	4820      	ldr	r0, [pc, #128]	; (80014cc <MX_TIM8_Init+0x180>)
 800144c:	f005 f80c 	bl	8006468 <HAL_TIM_PWM_ConfigChannel>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <MX_TIM8_Init+0x10e>
  {
    Error_Handler();
 8001456:	f000 f991 	bl	800177c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800145a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800145e:	2208      	movs	r2, #8
 8001460:	4619      	mov	r1, r3
 8001462:	481a      	ldr	r0, [pc, #104]	; (80014cc <MX_TIM8_Init+0x180>)
 8001464:	f005 f800 	bl	8006468 <HAL_TIM_PWM_ConfigChannel>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_TIM8_Init+0x126>
  {
    Error_Handler();
 800146e:	f000 f985 	bl	800177c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001472:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001476:	220c      	movs	r2, #12
 8001478:	4619      	mov	r1, r3
 800147a:	4814      	ldr	r0, [pc, #80]	; (80014cc <MX_TIM8_Init+0x180>)
 800147c:	f004 fff4 	bl	8006468 <HAL_TIM_PWM_ConfigChannel>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_TIM8_Init+0x13e>
  {
    Error_Handler();
 8001486:	f000 f979 	bl	800177c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800148a:	2300      	movs	r3, #0
 800148c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800148e:	2300      	movs	r3, #0
 8001490:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001492:	2300      	movs	r3, #0
 8001494:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001496:	2300      	movs	r3, #0
 8001498:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800149a:	2300      	movs	r3, #0
 800149c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800149e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014a2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014a4:	2300      	movs	r3, #0
 80014a6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80014a8:	1d3b      	adds	r3, r7, #4
 80014aa:	4619      	mov	r1, r3
 80014ac:	4807      	ldr	r0, [pc, #28]	; (80014cc <MX_TIM8_Init+0x180>)
 80014ae:	f006 f9a5 	bl	80077fc <HAL_TIMEx_ConfigBreakDeadTime>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_TIM8_Init+0x170>
  {
    Error_Handler();
 80014b8:	f000 f960 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80014bc:	4803      	ldr	r0, [pc, #12]	; (80014cc <MX_TIM8_Init+0x180>)
 80014be:	f000 fb7f 	bl	8001bc0 <HAL_TIM_MspPostInit>

}
 80014c2:	bf00      	nop
 80014c4:	3758      	adds	r7, #88	; 0x58
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	200002a8 	.word	0x200002a8
 80014d0:	40013400 	.word	0x40013400

080014d4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80014d8:	4b11      	ldr	r3, [pc, #68]	; (8001520 <MX_UART4_Init+0x4c>)
 80014da:	4a12      	ldr	r2, [pc, #72]	; (8001524 <MX_UART4_Init+0x50>)
 80014dc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80014de:	4b10      	ldr	r3, [pc, #64]	; (8001520 <MX_UART4_Init+0x4c>)
 80014e0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80014e4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80014e6:	4b0e      	ldr	r3, [pc, #56]	; (8001520 <MX_UART4_Init+0x4c>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80014ec:	4b0c      	ldr	r3, [pc, #48]	; (8001520 <MX_UART4_Init+0x4c>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80014f2:	4b0b      	ldr	r3, [pc, #44]	; (8001520 <MX_UART4_Init+0x4c>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80014f8:	4b09      	ldr	r3, [pc, #36]	; (8001520 <MX_UART4_Init+0x4c>)
 80014fa:	220c      	movs	r2, #12
 80014fc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014fe:	4b08      	ldr	r3, [pc, #32]	; (8001520 <MX_UART4_Init+0x4c>)
 8001500:	2200      	movs	r2, #0
 8001502:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001504:	4b06      	ldr	r3, [pc, #24]	; (8001520 <MX_UART4_Init+0x4c>)
 8001506:	2200      	movs	r2, #0
 8001508:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800150a:	4805      	ldr	r0, [pc, #20]	; (8001520 <MX_UART4_Init+0x4c>)
 800150c:	f006 fa5e 	bl	80079cc <HAL_UART_Init>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001516:	f000 f931 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800151a:	bf00      	nop
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	2000079c 	.word	0x2000079c
 8001524:	40004c00 	.word	0x40004c00

08001528 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800152c:	4b11      	ldr	r3, [pc, #68]	; (8001574 <MX_USART1_UART_Init+0x4c>)
 800152e:	4a12      	ldr	r2, [pc, #72]	; (8001578 <MX_USART1_UART_Init+0x50>)
 8001530:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001532:	4b10      	ldr	r3, [pc, #64]	; (8001574 <MX_USART1_UART_Init+0x4c>)
 8001534:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001538:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800153a:	4b0e      	ldr	r3, [pc, #56]	; (8001574 <MX_USART1_UART_Init+0x4c>)
 800153c:	2200      	movs	r2, #0
 800153e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001540:	4b0c      	ldr	r3, [pc, #48]	; (8001574 <MX_USART1_UART_Init+0x4c>)
 8001542:	2200      	movs	r2, #0
 8001544:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001546:	4b0b      	ldr	r3, [pc, #44]	; (8001574 <MX_USART1_UART_Init+0x4c>)
 8001548:	2200      	movs	r2, #0
 800154a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800154c:	4b09      	ldr	r3, [pc, #36]	; (8001574 <MX_USART1_UART_Init+0x4c>)
 800154e:	220c      	movs	r2, #12
 8001550:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001552:	4b08      	ldr	r3, [pc, #32]	; (8001574 <MX_USART1_UART_Init+0x4c>)
 8001554:	2200      	movs	r2, #0
 8001556:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001558:	4b06      	ldr	r3, [pc, #24]	; (8001574 <MX_USART1_UART_Init+0x4c>)
 800155a:	2200      	movs	r2, #0
 800155c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800155e:	4805      	ldr	r0, [pc, #20]	; (8001574 <MX_USART1_UART_Init+0x4c>)
 8001560:	f006 fa34 	bl	80079cc <HAL_UART_Init>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800156a:	f000 f907 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	200005a8 	.word	0x200005a8
 8001578:	40013800 	.word	0x40013800

0800157c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b088      	sub	sp, #32
 8001580:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001582:	f107 0310 	add.w	r3, r7, #16
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	605a      	str	r2, [r3, #4]
 800158c:	609a      	str	r2, [r3, #8]
 800158e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001590:	4b4e      	ldr	r3, [pc, #312]	; (80016cc <MX_GPIO_Init+0x150>)
 8001592:	699b      	ldr	r3, [r3, #24]
 8001594:	4a4d      	ldr	r2, [pc, #308]	; (80016cc <MX_GPIO_Init+0x150>)
 8001596:	f043 0310 	orr.w	r3, r3, #16
 800159a:	6193      	str	r3, [r2, #24]
 800159c:	4b4b      	ldr	r3, [pc, #300]	; (80016cc <MX_GPIO_Init+0x150>)
 800159e:	699b      	ldr	r3, [r3, #24]
 80015a0:	f003 0310 	and.w	r3, r3, #16
 80015a4:	60fb      	str	r3, [r7, #12]
 80015a6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a8:	4b48      	ldr	r3, [pc, #288]	; (80016cc <MX_GPIO_Init+0x150>)
 80015aa:	699b      	ldr	r3, [r3, #24]
 80015ac:	4a47      	ldr	r2, [pc, #284]	; (80016cc <MX_GPIO_Init+0x150>)
 80015ae:	f043 0304 	orr.w	r3, r3, #4
 80015b2:	6193      	str	r3, [r2, #24]
 80015b4:	4b45      	ldr	r3, [pc, #276]	; (80016cc <MX_GPIO_Init+0x150>)
 80015b6:	699b      	ldr	r3, [r3, #24]
 80015b8:	f003 0304 	and.w	r3, r3, #4
 80015bc:	60bb      	str	r3, [r7, #8]
 80015be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015c0:	4b42      	ldr	r3, [pc, #264]	; (80016cc <MX_GPIO_Init+0x150>)
 80015c2:	699b      	ldr	r3, [r3, #24]
 80015c4:	4a41      	ldr	r2, [pc, #260]	; (80016cc <MX_GPIO_Init+0x150>)
 80015c6:	f043 0308 	orr.w	r3, r3, #8
 80015ca:	6193      	str	r3, [r2, #24]
 80015cc:	4b3f      	ldr	r3, [pc, #252]	; (80016cc <MX_GPIO_Init+0x150>)
 80015ce:	699b      	ldr	r3, [r3, #24]
 80015d0:	f003 0308 	and.w	r3, r3, #8
 80015d4:	607b      	str	r3, [r7, #4]
 80015d6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015d8:	4b3c      	ldr	r3, [pc, #240]	; (80016cc <MX_GPIO_Init+0x150>)
 80015da:	699b      	ldr	r3, [r3, #24]
 80015dc:	4a3b      	ldr	r2, [pc, #236]	; (80016cc <MX_GPIO_Init+0x150>)
 80015de:	f043 0320 	orr.w	r3, r3, #32
 80015e2:	6193      	str	r3, [r2, #24]
 80015e4:	4b39      	ldr	r3, [pc, #228]	; (80016cc <MX_GPIO_Init+0x150>)
 80015e6:	699b      	ldr	r3, [r3, #24]
 80015e8:	f003 0320 	and.w	r3, r3, #32
 80015ec:	603b      	str	r3, [r7, #0]
 80015ee:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BLUE_LED_Pin|BLUETOOTH_SPI_CMD_Pin|BLUETOOTH_SPI_CS_Pin|MOTOR_FRONT_RIGHT_IN_1_Pin
 80015f0:	2200      	movs	r2, #0
 80015f2:	f243 013a 	movw	r1, #12346	; 0x303a
 80015f6:	4836      	ldr	r0, [pc, #216]	; (80016d0 <MX_GPIO_Init+0x154>)
 80015f8:	f002 f8b2 	bl	8003760 <HAL_GPIO_WritePin>
                          |MOTOR_FRONT_RIGHT_IN_2_Pin|MOTOR_REAR_LEFT_IN_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLUETOOTH_SPI_CLK_GPIO_Port, BLUETOOTH_SPI_CLK_Pin, GPIO_PIN_RESET);
 80015fc:	2200      	movs	r2, #0
 80015fe:	2110      	movs	r1, #16
 8001600:	4834      	ldr	r0, [pc, #208]	; (80016d4 <MX_GPIO_Init+0x158>)
 8001602:	f002 f8ad 	bl	8003760 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR_FRONT_LEFT_IN_1_Pin|MOTOR_FRONT_LEFT_IN_2_Pin|MOTOR_REAR_RIGHT_IN_2_Pin|MOTOR_REAR_RIGHT_IN_1_Pin, GPIO_PIN_RESET);
 8001606:	2200      	movs	r2, #0
 8001608:	2133      	movs	r1, #51	; 0x33
 800160a:	4833      	ldr	r0, [pc, #204]	; (80016d8 <MX_GPIO_Init+0x15c>)
 800160c:	f002 f8a8 	bl	8003760 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_REAR_LEFT_IN_1_GPIO_Port, MOTOR_REAR_LEFT_IN_1_Pin, GPIO_PIN_RESET);
 8001610:	2200      	movs	r2, #0
 8001612:	2104      	movs	r1, #4
 8001614:	4831      	ldr	r0, [pc, #196]	; (80016dc <MX_GPIO_Init+0x160>)
 8001616:	f002 f8a3 	bl	8003760 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_LED_Pin */
  GPIO_InitStruct.Pin = BLUE_LED_Pin;
 800161a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800161e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001620:	2301      	movs	r3, #1
 8001622:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001624:	2300      	movs	r3, #0
 8001626:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001628:	2302      	movs	r3, #2
 800162a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLUE_LED_GPIO_Port, &GPIO_InitStruct);
 800162c:	f107 0310 	add.w	r3, r7, #16
 8001630:	4619      	mov	r1, r3
 8001632:	4827      	ldr	r0, [pc, #156]	; (80016d0 <MX_GPIO_Init+0x154>)
 8001634:	f001 fe00 	bl	8003238 <HAL_GPIO_Init>

  /*Configure GPIO pins : BLUETOOTH_SPI_CMD_Pin BLUETOOTH_SPI_CS_Pin MOTOR_FRONT_RIGHT_IN_1_Pin MOTOR_FRONT_RIGHT_IN_2_Pin
                           MOTOR_REAR_LEFT_IN_2_Pin */
  GPIO_InitStruct.Pin = BLUETOOTH_SPI_CMD_Pin|BLUETOOTH_SPI_CS_Pin|MOTOR_FRONT_RIGHT_IN_1_Pin|MOTOR_FRONT_RIGHT_IN_2_Pin
 8001638:	f241 033a 	movw	r3, #4154	; 0x103a
 800163c:	613b      	str	r3, [r7, #16]
                          |MOTOR_REAR_LEFT_IN_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800163e:	2301      	movs	r3, #1
 8001640:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001642:	2300      	movs	r3, #0
 8001644:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001646:	2303      	movs	r3, #3
 8001648:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800164a:	f107 0310 	add.w	r3, r7, #16
 800164e:	4619      	mov	r1, r3
 8001650:	481f      	ldr	r0, [pc, #124]	; (80016d0 <MX_GPIO_Init+0x154>)
 8001652:	f001 fdf1 	bl	8003238 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUETOOTH_SPI_DAT_Pin */
  GPIO_InitStruct.Pin = BLUETOOTH_SPI_DAT_Pin;
 8001656:	2304      	movs	r3, #4
 8001658:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800165a:	2300      	movs	r3, #0
 800165c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165e:	2300      	movs	r3, #0
 8001660:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BLUETOOTH_SPI_DAT_GPIO_Port, &GPIO_InitStruct);
 8001662:	f107 0310 	add.w	r3, r7, #16
 8001666:	4619      	mov	r1, r3
 8001668:	4819      	ldr	r0, [pc, #100]	; (80016d0 <MX_GPIO_Init+0x154>)
 800166a:	f001 fde5 	bl	8003238 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUETOOTH_SPI_CLK_Pin */
  GPIO_InitStruct.Pin = BLUETOOTH_SPI_CLK_Pin;
 800166e:	2310      	movs	r3, #16
 8001670:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001672:	2301      	movs	r3, #1
 8001674:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001676:	2300      	movs	r3, #0
 8001678:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800167a:	2303      	movs	r3, #3
 800167c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLUETOOTH_SPI_CLK_GPIO_Port, &GPIO_InitStruct);
 800167e:	f107 0310 	add.w	r3, r7, #16
 8001682:	4619      	mov	r1, r3
 8001684:	4813      	ldr	r0, [pc, #76]	; (80016d4 <MX_GPIO_Init+0x158>)
 8001686:	f001 fdd7 	bl	8003238 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_FRONT_LEFT_IN_1_Pin MOTOR_FRONT_LEFT_IN_2_Pin MOTOR_REAR_RIGHT_IN_2_Pin MOTOR_REAR_RIGHT_IN_1_Pin */
  GPIO_InitStruct.Pin = MOTOR_FRONT_LEFT_IN_1_Pin|MOTOR_FRONT_LEFT_IN_2_Pin|MOTOR_REAR_RIGHT_IN_2_Pin|MOTOR_REAR_RIGHT_IN_1_Pin;
 800168a:	2333      	movs	r3, #51	; 0x33
 800168c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800168e:	2301      	movs	r3, #1
 8001690:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001692:	2300      	movs	r3, #0
 8001694:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001696:	2303      	movs	r3, #3
 8001698:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800169a:	f107 0310 	add.w	r3, r7, #16
 800169e:	4619      	mov	r1, r3
 80016a0:	480d      	ldr	r0, [pc, #52]	; (80016d8 <MX_GPIO_Init+0x15c>)
 80016a2:	f001 fdc9 	bl	8003238 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTOR_REAR_LEFT_IN_1_Pin */
  GPIO_InitStruct.Pin = MOTOR_REAR_LEFT_IN_1_Pin;
 80016a6:	2304      	movs	r3, #4
 80016a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016aa:	2301      	movs	r3, #1
 80016ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ae:	2300      	movs	r3, #0
 80016b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016b2:	2303      	movs	r3, #3
 80016b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MOTOR_REAR_LEFT_IN_1_GPIO_Port, &GPIO_InitStruct);
 80016b6:	f107 0310 	add.w	r3, r7, #16
 80016ba:	4619      	mov	r1, r3
 80016bc:	4807      	ldr	r0, [pc, #28]	; (80016dc <MX_GPIO_Init+0x160>)
 80016be:	f001 fdbb 	bl	8003238 <HAL_GPIO_Init>

}
 80016c2:	bf00      	nop
 80016c4:	3720      	adds	r7, #32
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40021000 	.word	0x40021000
 80016d0:	40011000 	.word	0x40011000
 80016d4:	40010800 	.word	0x40010800
 80016d8:	40010c00 	.word	0x40010c00
 80016dc:	40011400 	.word	0x40011400

080016e0 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  if ((htim == &htim2) || (htim == &htim3) || (htim == &htim4) || (htim == &htim5))
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	4a0b      	ldr	r2, [pc, #44]	; (8001718 <HAL_TIM_IC_CaptureCallback+0x38>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d00b      	beq.n	8001708 <HAL_TIM_IC_CaptureCallback+0x28>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	4a0a      	ldr	r2, [pc, #40]	; (800171c <HAL_TIM_IC_CaptureCallback+0x3c>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d007      	beq.n	8001708 <HAL_TIM_IC_CaptureCallback+0x28>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	4a09      	ldr	r2, [pc, #36]	; (8001720 <HAL_TIM_IC_CaptureCallback+0x40>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d003      	beq.n	8001708 <HAL_TIM_IC_CaptureCallback+0x28>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	4a08      	ldr	r2, [pc, #32]	; (8001724 <HAL_TIM_IC_CaptureCallback+0x44>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d103      	bne.n	8001710 <HAL_TIM_IC_CaptureCallback+0x30>
  {
    DRV_updateEncoder(htim);
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f007 fbcf 	bl	8008eac <DRV_updateEncoder>
  else
  {
    ; /* Nothing to do */
  }

  return;
 800170e:	bf00      	nop
 8001710:	bf00      	nop
}
 8001712:	3708      	adds	r7, #8
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	20000810 	.word	0x20000810
 800171c:	200004c4 	.word	0x200004c4
 8001720:	2000035c 	.word	0x2000035c
 8001724:	20000410 	.word	0x20000410

08001728 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  /* Check the handle of the timer triggering this callback and update LED */
  if (htim == &htim1)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	4a04      	ldr	r2, [pc, #16]	; (8001744 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d101      	bne.n	800173c <HAL_TIM_PeriodElapsedCallback+0x14>
  {
    LED_update();
 8001738:	f008 fa9a 	bl	8009c70 <LED_update>
  }
  else
  {
    ; /* Nothing to do */
  }
}
 800173c:	bf00      	nop
 800173e:	3708      	adds	r7, #8
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	200006e4 	.word	0x200006e4

08001748 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  /* Check the handle of the UART triggering this callback and actually receive date */
  if (huart == &huart1)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	4a08      	ldr	r2, [pc, #32]	; (8001774 <HAL_UART_RxCpltCallback+0x2c>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d102      	bne.n	800175e <HAL_UART_RxCpltCallback+0x16>
  {
    CON_receiveData();
 8001758:	f007 fa70 	bl	8008c3c <CON_receiveData>
  }
  else
  {
    ; /* Nothing to do */
  }
}
 800175c:	e005      	b.n	800176a <HAL_UART_RxCpltCallback+0x22>
  else if (huart == &huart4)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4a05      	ldr	r2, [pc, #20]	; (8001778 <HAL_UART_RxCpltCallback+0x30>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d101      	bne.n	800176a <HAL_UART_RxCpltCallback+0x22>
    MAS_receiveData();
 8001766:	f008 fc19 	bl	8009f9c <MAS_receiveData>
}
 800176a:	bf00      	nop
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	200005a8 	.word	0x200005a8
 8001778:	2000079c 	.word	0x2000079c

0800177c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001780:	b672      	cpsid	i
}
 8001782:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();

  LOG_error("Error_Handler() triggered");
 8001784:	4902      	ldr	r1, [pc, #8]	; (8001790 <Error_Handler+0x14>)
 8001786:	2003      	movs	r0, #3
 8001788:	f008 fb4a 	bl	8009e20 <LOG_log>

  while (1)
 800178c:	e7fe      	b.n	800178c <Error_Handler+0x10>
 800178e:	bf00      	nop
 8001790:	0800c198 	.word	0x0800c198

08001794 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
     LOG_error("Wrong parameters: %s@%d", file, line);
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	687a      	ldr	r2, [r7, #4]
 80017a2:	4904      	ldr	r1, [pc, #16]	; (80017b4 <assert_failed+0x20>)
 80017a4:	2003      	movs	r0, #3
 80017a6:	f008 fb3b 	bl	8009e20 <LOG_log>

    return;
 80017aa:	bf00      	nop
  /* USER CODE END 6 */
}
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	0800c1b4 	.word	0x0800c1b4

080017b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017be:	4b15      	ldr	r3, [pc, #84]	; (8001814 <HAL_MspInit+0x5c>)
 80017c0:	699b      	ldr	r3, [r3, #24]
 80017c2:	4a14      	ldr	r2, [pc, #80]	; (8001814 <HAL_MspInit+0x5c>)
 80017c4:	f043 0301 	orr.w	r3, r3, #1
 80017c8:	6193      	str	r3, [r2, #24]
 80017ca:	4b12      	ldr	r3, [pc, #72]	; (8001814 <HAL_MspInit+0x5c>)
 80017cc:	699b      	ldr	r3, [r3, #24]
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	60bb      	str	r3, [r7, #8]
 80017d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017d6:	4b0f      	ldr	r3, [pc, #60]	; (8001814 <HAL_MspInit+0x5c>)
 80017d8:	69db      	ldr	r3, [r3, #28]
 80017da:	4a0e      	ldr	r2, [pc, #56]	; (8001814 <HAL_MspInit+0x5c>)
 80017dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017e0:	61d3      	str	r3, [r2, #28]
 80017e2:	4b0c      	ldr	r3, [pc, #48]	; (8001814 <HAL_MspInit+0x5c>)
 80017e4:	69db      	ldr	r3, [r3, #28]
 80017e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ea:	607b      	str	r3, [r7, #4]
 80017ec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80017ee:	4b0a      	ldr	r3, [pc, #40]	; (8001818 <HAL_MspInit+0x60>)
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001802:	60fb      	str	r3, [r7, #12]
 8001804:	4a04      	ldr	r2, [pc, #16]	; (8001818 <HAL_MspInit+0x60>)
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800180a:	bf00      	nop
 800180c:	3714      	adds	r7, #20
 800180e:	46bd      	mov	sp, r7
 8001810:	bc80      	pop	{r7}
 8001812:	4770      	bx	lr
 8001814:	40021000 	.word	0x40021000
 8001818:	40010000 	.word	0x40010000

0800181c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b088      	sub	sp, #32
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001824:	f107 0310 	add.w	r3, r7, #16
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
 800182c:	605a      	str	r2, [r3, #4]
 800182e:	609a      	str	r2, [r3, #8]
 8001830:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a14      	ldr	r2, [pc, #80]	; (8001888 <HAL_ADC_MspInit+0x6c>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d121      	bne.n	8001880 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800183c:	4b13      	ldr	r3, [pc, #76]	; (800188c <HAL_ADC_MspInit+0x70>)
 800183e:	699b      	ldr	r3, [r3, #24]
 8001840:	4a12      	ldr	r2, [pc, #72]	; (800188c <HAL_ADC_MspInit+0x70>)
 8001842:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001846:	6193      	str	r3, [r2, #24]
 8001848:	4b10      	ldr	r3, [pc, #64]	; (800188c <HAL_ADC_MspInit+0x70>)
 800184a:	699b      	ldr	r3, [r3, #24]
 800184c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001850:	60fb      	str	r3, [r7, #12]
 8001852:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001854:	4b0d      	ldr	r3, [pc, #52]	; (800188c <HAL_ADC_MspInit+0x70>)
 8001856:	699b      	ldr	r3, [r3, #24]
 8001858:	4a0c      	ldr	r2, [pc, #48]	; (800188c <HAL_ADC_MspInit+0x70>)
 800185a:	f043 0304 	orr.w	r3, r3, #4
 800185e:	6193      	str	r3, [r2, #24]
 8001860:	4b0a      	ldr	r3, [pc, #40]	; (800188c <HAL_ADC_MspInit+0x70>)
 8001862:	699b      	ldr	r3, [r3, #24]
 8001864:	f003 0304 	and.w	r3, r3, #4
 8001868:	60bb      	str	r3, [r7, #8]
 800186a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = BATTERY_ADC_Pin;
 800186c:	2320      	movs	r3, #32
 800186e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001870:	2303      	movs	r3, #3
 8001872:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(BATTERY_ADC_GPIO_Port, &GPIO_InitStruct);
 8001874:	f107 0310 	add.w	r3, r7, #16
 8001878:	4619      	mov	r1, r3
 800187a:	4805      	ldr	r0, [pc, #20]	; (8001890 <HAL_ADC_MspInit+0x74>)
 800187c:	f001 fcdc 	bl	8003238 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001880:	bf00      	nop
 8001882:	3720      	adds	r7, #32
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	40012400 	.word	0x40012400
 800188c:	40021000 	.word	0x40021000
 8001890:	40010800 	.word	0x40010800

08001894 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a0b      	ldr	r2, [pc, #44]	; (80018d0 <HAL_RTC_MspInit+0x3c>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d110      	bne.n	80018c8 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80018a6:	f001 ffb5 	bl	8003814 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80018aa:	4b0a      	ldr	r3, [pc, #40]	; (80018d4 <HAL_RTC_MspInit+0x40>)
 80018ac:	69db      	ldr	r3, [r3, #28]
 80018ae:	4a09      	ldr	r2, [pc, #36]	; (80018d4 <HAL_RTC_MspInit+0x40>)
 80018b0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80018b4:	61d3      	str	r3, [r2, #28]
 80018b6:	4b07      	ldr	r3, [pc, #28]	; (80018d4 <HAL_RTC_MspInit+0x40>)
 80018b8:	69db      	ldr	r3, [r3, #28]
 80018ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80018be:	60fb      	str	r3, [r7, #12]
 80018c0:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80018c2:	4b05      	ldr	r3, [pc, #20]	; (80018d8 <HAL_RTC_MspInit+0x44>)
 80018c4:	2201      	movs	r2, #1
 80018c6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80018c8:	bf00      	nop
 80018ca:	3710      	adds	r7, #16
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	40002800 	.word	0x40002800
 80018d4:	40021000 	.word	0x40021000
 80018d8:	4242043c 	.word	0x4242043c

080018dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b086      	sub	sp, #24
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a28      	ldr	r2, [pc, #160]	; (800198c <HAL_TIM_Base_MspInit+0xb0>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d114      	bne.n	8001918 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018ee:	4b28      	ldr	r3, [pc, #160]	; (8001990 <HAL_TIM_Base_MspInit+0xb4>)
 80018f0:	699b      	ldr	r3, [r3, #24]
 80018f2:	4a27      	ldr	r2, [pc, #156]	; (8001990 <HAL_TIM_Base_MspInit+0xb4>)
 80018f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80018f8:	6193      	str	r3, [r2, #24]
 80018fa:	4b25      	ldr	r3, [pc, #148]	; (8001990 <HAL_TIM_Base_MspInit+0xb4>)
 80018fc:	699b      	ldr	r3, [r3, #24]
 80018fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001902:	617b      	str	r3, [r7, #20]
 8001904:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 6, 0);
 8001906:	2200      	movs	r2, #0
 8001908:	2106      	movs	r1, #6
 800190a:	2019      	movs	r0, #25
 800190c:	f001 fb02 	bl	8002f14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001910:	2019      	movs	r0, #25
 8001912:	f001 fb2b 	bl	8002f6c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001916:	e034      	b.n	8001982 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM6)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a1d      	ldr	r2, [pc, #116]	; (8001994 <HAL_TIM_Base_MspInit+0xb8>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d10c      	bne.n	800193c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001922:	4b1b      	ldr	r3, [pc, #108]	; (8001990 <HAL_TIM_Base_MspInit+0xb4>)
 8001924:	69db      	ldr	r3, [r3, #28]
 8001926:	4a1a      	ldr	r2, [pc, #104]	; (8001990 <HAL_TIM_Base_MspInit+0xb4>)
 8001928:	f043 0310 	orr.w	r3, r3, #16
 800192c:	61d3      	str	r3, [r2, #28]
 800192e:	4b18      	ldr	r3, [pc, #96]	; (8001990 <HAL_TIM_Base_MspInit+0xb4>)
 8001930:	69db      	ldr	r3, [r3, #28]
 8001932:	f003 0310 	and.w	r3, r3, #16
 8001936:	613b      	str	r3, [r7, #16]
 8001938:	693b      	ldr	r3, [r7, #16]
}
 800193a:	e022      	b.n	8001982 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM7)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a15      	ldr	r2, [pc, #84]	; (8001998 <HAL_TIM_Base_MspInit+0xbc>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d10c      	bne.n	8001960 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001946:	4b12      	ldr	r3, [pc, #72]	; (8001990 <HAL_TIM_Base_MspInit+0xb4>)
 8001948:	69db      	ldr	r3, [r3, #28]
 800194a:	4a11      	ldr	r2, [pc, #68]	; (8001990 <HAL_TIM_Base_MspInit+0xb4>)
 800194c:	f043 0320 	orr.w	r3, r3, #32
 8001950:	61d3      	str	r3, [r2, #28]
 8001952:	4b0f      	ldr	r3, [pc, #60]	; (8001990 <HAL_TIM_Base_MspInit+0xb4>)
 8001954:	69db      	ldr	r3, [r3, #28]
 8001956:	f003 0320 	and.w	r3, r3, #32
 800195a:	60fb      	str	r3, [r7, #12]
 800195c:	68fb      	ldr	r3, [r7, #12]
}
 800195e:	e010      	b.n	8001982 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM8)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a0d      	ldr	r2, [pc, #52]	; (800199c <HAL_TIM_Base_MspInit+0xc0>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d10b      	bne.n	8001982 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800196a:	4b09      	ldr	r3, [pc, #36]	; (8001990 <HAL_TIM_Base_MspInit+0xb4>)
 800196c:	699b      	ldr	r3, [r3, #24]
 800196e:	4a08      	ldr	r2, [pc, #32]	; (8001990 <HAL_TIM_Base_MspInit+0xb4>)
 8001970:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001974:	6193      	str	r3, [r2, #24]
 8001976:	4b06      	ldr	r3, [pc, #24]	; (8001990 <HAL_TIM_Base_MspInit+0xb4>)
 8001978:	699b      	ldr	r3, [r3, #24]
 800197a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800197e:	60bb      	str	r3, [r7, #8]
 8001980:	68bb      	ldr	r3, [r7, #8]
}
 8001982:	bf00      	nop
 8001984:	3718      	adds	r7, #24
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	40012c00 	.word	0x40012c00
 8001990:	40021000 	.word	0x40021000
 8001994:	40001000 	.word	0x40001000
 8001998:	40001400 	.word	0x40001400
 800199c:	40013400 	.word	0x40013400

080019a0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b090      	sub	sp, #64	; 0x40
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019ac:	2200      	movs	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]
 80019b0:	605a      	str	r2, [r3, #4]
 80019b2:	609a      	str	r2, [r3, #8]
 80019b4:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019be:	d157      	bne.n	8001a70 <HAL_TIM_Encoder_MspInit+0xd0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019c0:	4b78      	ldr	r3, [pc, #480]	; (8001ba4 <HAL_TIM_Encoder_MspInit+0x204>)
 80019c2:	69db      	ldr	r3, [r3, #28]
 80019c4:	4a77      	ldr	r2, [pc, #476]	; (8001ba4 <HAL_TIM_Encoder_MspInit+0x204>)
 80019c6:	f043 0301 	orr.w	r3, r3, #1
 80019ca:	61d3      	str	r3, [r2, #28]
 80019cc:	4b75      	ldr	r3, [pc, #468]	; (8001ba4 <HAL_TIM_Encoder_MspInit+0x204>)
 80019ce:	69db      	ldr	r3, [r3, #28]
 80019d0:	f003 0301 	and.w	r3, r3, #1
 80019d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80019d6:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d8:	4b72      	ldr	r3, [pc, #456]	; (8001ba4 <HAL_TIM_Encoder_MspInit+0x204>)
 80019da:	699b      	ldr	r3, [r3, #24]
 80019dc:	4a71      	ldr	r2, [pc, #452]	; (8001ba4 <HAL_TIM_Encoder_MspInit+0x204>)
 80019de:	f043 0304 	orr.w	r3, r3, #4
 80019e2:	6193      	str	r3, [r2, #24]
 80019e4:	4b6f      	ldr	r3, [pc, #444]	; (8001ba4 <HAL_TIM_Encoder_MspInit+0x204>)
 80019e6:	699b      	ldr	r3, [r3, #24]
 80019e8:	f003 0304 	and.w	r3, r3, #4
 80019ec:	627b      	str	r3, [r7, #36]	; 0x24
 80019ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019f0:	4b6c      	ldr	r3, [pc, #432]	; (8001ba4 <HAL_TIM_Encoder_MspInit+0x204>)
 80019f2:	699b      	ldr	r3, [r3, #24]
 80019f4:	4a6b      	ldr	r2, [pc, #428]	; (8001ba4 <HAL_TIM_Encoder_MspInit+0x204>)
 80019f6:	f043 0308 	orr.w	r3, r3, #8
 80019fa:	6193      	str	r3, [r2, #24]
 80019fc:	4b69      	ldr	r3, [pc, #420]	; (8001ba4 <HAL_TIM_Encoder_MspInit+0x204>)
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	f003 0308 	and.w	r3, r3, #8
 8001a04:	623b      	str	r3, [r7, #32]
 8001a06:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_1_IN_1_Pin;
 8001a08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a12:	2300      	movs	r3, #0
 8001a14:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENCODER_1_IN_1_GPIO_Port, &GPIO_InitStruct);
 8001a16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4862      	ldr	r0, [pc, #392]	; (8001ba8 <HAL_TIM_Encoder_MspInit+0x208>)
 8001a1e:	f001 fc0b 	bl	8003238 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENCODER_1_IN_2_Pin;
 8001a22:	2308      	movs	r3, #8
 8001a24:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a26:	2300      	movs	r3, #0
 8001a28:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENCODER_1_IN_2_GPIO_Port, &GPIO_InitStruct);
 8001a2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a32:	4619      	mov	r1, r3
 8001a34:	485d      	ldr	r0, [pc, #372]	; (8001bac <HAL_TIM_Encoder_MspInit+0x20c>)
 8001a36:	f001 fbff 	bl	8003238 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8001a3a:	4b5d      	ldr	r3, [pc, #372]	; (8001bb0 <HAL_TIM_Encoder_MspInit+0x210>)
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a4a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a58:	4a55      	ldr	r2, [pc, #340]	; (8001bb0 <HAL_TIM_Encoder_MspInit+0x210>)
 8001a5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a5c:	6053      	str	r3, [r2, #4]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 4, 0);
 8001a5e:	2200      	movs	r2, #0
 8001a60:	2104      	movs	r1, #4
 8001a62:	201c      	movs	r0, #28
 8001a64:	f001 fa56 	bl	8002f14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a68:	201c      	movs	r0, #28
 8001a6a:	f001 fa7f 	bl	8002f6c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001a6e:	e094      	b.n	8001b9a <HAL_TIM_Encoder_MspInit+0x1fa>
  else if(htim_encoder->Instance==TIM3)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a4f      	ldr	r2, [pc, #316]	; (8001bb4 <HAL_TIM_Encoder_MspInit+0x214>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d12c      	bne.n	8001ad4 <HAL_TIM_Encoder_MspInit+0x134>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a7a:	4b4a      	ldr	r3, [pc, #296]	; (8001ba4 <HAL_TIM_Encoder_MspInit+0x204>)
 8001a7c:	69db      	ldr	r3, [r3, #28]
 8001a7e:	4a49      	ldr	r2, [pc, #292]	; (8001ba4 <HAL_TIM_Encoder_MspInit+0x204>)
 8001a80:	f043 0302 	orr.w	r3, r3, #2
 8001a84:	61d3      	str	r3, [r2, #28]
 8001a86:	4b47      	ldr	r3, [pc, #284]	; (8001ba4 <HAL_TIM_Encoder_MspInit+0x204>)
 8001a88:	69db      	ldr	r3, [r3, #28]
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	61fb      	str	r3, [r7, #28]
 8001a90:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a92:	4b44      	ldr	r3, [pc, #272]	; (8001ba4 <HAL_TIM_Encoder_MspInit+0x204>)
 8001a94:	699b      	ldr	r3, [r3, #24]
 8001a96:	4a43      	ldr	r2, [pc, #268]	; (8001ba4 <HAL_TIM_Encoder_MspInit+0x204>)
 8001a98:	f043 0304 	orr.w	r3, r3, #4
 8001a9c:	6193      	str	r3, [r2, #24]
 8001a9e:	4b41      	ldr	r3, [pc, #260]	; (8001ba4 <HAL_TIM_Encoder_MspInit+0x204>)
 8001aa0:	699b      	ldr	r3, [r3, #24]
 8001aa2:	f003 0304 	and.w	r3, r3, #4
 8001aa6:	61bb      	str	r3, [r7, #24]
 8001aa8:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ENCODER_2_IN_1_Pin|ENCODER_2_IN_2_Pin;
 8001aaa:	23c0      	movs	r3, #192	; 0xc0
 8001aac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ab6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001aba:	4619      	mov	r1, r3
 8001abc:	483a      	ldr	r0, [pc, #232]	; (8001ba8 <HAL_TIM_Encoder_MspInit+0x208>)
 8001abe:	f001 fbbb 	bl	8003238 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 4, 0);
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	2104      	movs	r1, #4
 8001ac6:	201d      	movs	r0, #29
 8001ac8:	f001 fa24 	bl	8002f14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001acc:	201d      	movs	r0, #29
 8001ace:	f001 fa4d 	bl	8002f6c <HAL_NVIC_EnableIRQ>
}
 8001ad2:	e062      	b.n	8001b9a <HAL_TIM_Encoder_MspInit+0x1fa>
  else if(htim_encoder->Instance==TIM4)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a37      	ldr	r2, [pc, #220]	; (8001bb8 <HAL_TIM_Encoder_MspInit+0x218>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d12c      	bne.n	8001b38 <HAL_TIM_Encoder_MspInit+0x198>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001ade:	4b31      	ldr	r3, [pc, #196]	; (8001ba4 <HAL_TIM_Encoder_MspInit+0x204>)
 8001ae0:	69db      	ldr	r3, [r3, #28]
 8001ae2:	4a30      	ldr	r2, [pc, #192]	; (8001ba4 <HAL_TIM_Encoder_MspInit+0x204>)
 8001ae4:	f043 0304 	orr.w	r3, r3, #4
 8001ae8:	61d3      	str	r3, [r2, #28]
 8001aea:	4b2e      	ldr	r3, [pc, #184]	; (8001ba4 <HAL_TIM_Encoder_MspInit+0x204>)
 8001aec:	69db      	ldr	r3, [r3, #28]
 8001aee:	f003 0304 	and.w	r3, r3, #4
 8001af2:	617b      	str	r3, [r7, #20]
 8001af4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001af6:	4b2b      	ldr	r3, [pc, #172]	; (8001ba4 <HAL_TIM_Encoder_MspInit+0x204>)
 8001af8:	699b      	ldr	r3, [r3, #24]
 8001afa:	4a2a      	ldr	r2, [pc, #168]	; (8001ba4 <HAL_TIM_Encoder_MspInit+0x204>)
 8001afc:	f043 0308 	orr.w	r3, r3, #8
 8001b00:	6193      	str	r3, [r2, #24]
 8001b02:	4b28      	ldr	r3, [pc, #160]	; (8001ba4 <HAL_TIM_Encoder_MspInit+0x204>)
 8001b04:	699b      	ldr	r3, [r3, #24]
 8001b06:	f003 0308 	and.w	r3, r3, #8
 8001b0a:	613b      	str	r3, [r7, #16]
 8001b0c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ENCODER_3_IN_1_Pin|ENCODER_3_IN_2_Pin;
 8001b0e:	23c0      	movs	r3, #192	; 0xc0
 8001b10:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b12:	2300      	movs	r3, #0
 8001b14:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b16:	2300      	movs	r3, #0
 8001b18:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4822      	ldr	r0, [pc, #136]	; (8001bac <HAL_TIM_Encoder_MspInit+0x20c>)
 8001b22:	f001 fb89 	bl	8003238 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 4, 0);
 8001b26:	2200      	movs	r2, #0
 8001b28:	2104      	movs	r1, #4
 8001b2a:	201e      	movs	r0, #30
 8001b2c:	f001 f9f2 	bl	8002f14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001b30:	201e      	movs	r0, #30
 8001b32:	f001 fa1b 	bl	8002f6c <HAL_NVIC_EnableIRQ>
}
 8001b36:	e030      	b.n	8001b9a <HAL_TIM_Encoder_MspInit+0x1fa>
  else if(htim_encoder->Instance==TIM5)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a1f      	ldr	r2, [pc, #124]	; (8001bbc <HAL_TIM_Encoder_MspInit+0x21c>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d12b      	bne.n	8001b9a <HAL_TIM_Encoder_MspInit+0x1fa>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001b42:	4b18      	ldr	r3, [pc, #96]	; (8001ba4 <HAL_TIM_Encoder_MspInit+0x204>)
 8001b44:	69db      	ldr	r3, [r3, #28]
 8001b46:	4a17      	ldr	r2, [pc, #92]	; (8001ba4 <HAL_TIM_Encoder_MspInit+0x204>)
 8001b48:	f043 0308 	orr.w	r3, r3, #8
 8001b4c:	61d3      	str	r3, [r2, #28]
 8001b4e:	4b15      	ldr	r3, [pc, #84]	; (8001ba4 <HAL_TIM_Encoder_MspInit+0x204>)
 8001b50:	69db      	ldr	r3, [r3, #28]
 8001b52:	f003 0308 	and.w	r3, r3, #8
 8001b56:	60fb      	str	r3, [r7, #12]
 8001b58:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b5a:	4b12      	ldr	r3, [pc, #72]	; (8001ba4 <HAL_TIM_Encoder_MspInit+0x204>)
 8001b5c:	699b      	ldr	r3, [r3, #24]
 8001b5e:	4a11      	ldr	r2, [pc, #68]	; (8001ba4 <HAL_TIM_Encoder_MspInit+0x204>)
 8001b60:	f043 0304 	orr.w	r3, r3, #4
 8001b64:	6193      	str	r3, [r2, #24]
 8001b66:	4b0f      	ldr	r3, [pc, #60]	; (8001ba4 <HAL_TIM_Encoder_MspInit+0x204>)
 8001b68:	699b      	ldr	r3, [r3, #24]
 8001b6a:	f003 0304 	and.w	r3, r3, #4
 8001b6e:	60bb      	str	r3, [r7, #8]
 8001b70:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENCODER_4_IN_1_Pin|ENCODER_4_IN_2_Pin;
 8001b72:	2303      	movs	r3, #3
 8001b74:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b76:	2300      	movs	r3, #0
 8001b78:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b82:	4619      	mov	r1, r3
 8001b84:	4808      	ldr	r0, [pc, #32]	; (8001ba8 <HAL_TIM_Encoder_MspInit+0x208>)
 8001b86:	f001 fb57 	bl	8003238 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 4, 0);
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	2104      	movs	r1, #4
 8001b8e:	2032      	movs	r0, #50	; 0x32
 8001b90:	f001 f9c0 	bl	8002f14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001b94:	2032      	movs	r0, #50	; 0x32
 8001b96:	f001 f9e9 	bl	8002f6c <HAL_NVIC_EnableIRQ>
}
 8001b9a:	bf00      	nop
 8001b9c:	3740      	adds	r7, #64	; 0x40
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	40021000 	.word	0x40021000
 8001ba8:	40010800 	.word	0x40010800
 8001bac:	40010c00 	.word	0x40010c00
 8001bb0:	40010000 	.word	0x40010000
 8001bb4:	40000400 	.word	0x40000400
 8001bb8:	40000800 	.word	0x40000800
 8001bbc:	40000c00 	.word	0x40000c00

08001bc0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b088      	sub	sp, #32
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc8:	f107 0310 	add.w	r3, r7, #16
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	605a      	str	r2, [r3, #4]
 8001bd2:	609a      	str	r2, [r3, #8]
 8001bd4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM8)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a10      	ldr	r2, [pc, #64]	; (8001c1c <HAL_TIM_MspPostInit+0x5c>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d118      	bne.n	8001c12 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001be0:	4b0f      	ldr	r3, [pc, #60]	; (8001c20 <HAL_TIM_MspPostInit+0x60>)
 8001be2:	699b      	ldr	r3, [r3, #24]
 8001be4:	4a0e      	ldr	r2, [pc, #56]	; (8001c20 <HAL_TIM_MspPostInit+0x60>)
 8001be6:	f043 0310 	orr.w	r3, r3, #16
 8001bea:	6193      	str	r3, [r2, #24]
 8001bec:	4b0c      	ldr	r3, [pc, #48]	; (8001c20 <HAL_TIM_MspPostInit+0x60>)
 8001bee:	699b      	ldr	r3, [r3, #24]
 8001bf0:	f003 0310 	and.w	r3, r3, #16
 8001bf4:	60fb      	str	r3, [r7, #12]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    PC8     ------> TIM8_CH3
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = MOTOR_FRONT_LEFT_PWM_Pin|MOTOR_FRONT_RIGHT_PWM_Pin|MOTOR_REAR_LEFT_PWM_Pin|MOTOR_REAR_RIGHT_PWM_Pin;
 8001bf8:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001bfc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bfe:	2302      	movs	r3, #2
 8001c00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c02:	2303      	movs	r3, #3
 8001c04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c06:	f107 0310 	add.w	r3, r7, #16
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	4805      	ldr	r0, [pc, #20]	; (8001c24 <HAL_TIM_MspPostInit+0x64>)
 8001c0e:	f001 fb13 	bl	8003238 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001c12:	bf00      	nop
 8001c14:	3720      	adds	r7, #32
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	40013400 	.word	0x40013400
 8001c20:	40021000 	.word	0x40021000
 8001c24:	40011000 	.word	0x40011000

08001c28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b08a      	sub	sp, #40	; 0x28
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c30:	f107 0318 	add.w	r3, r7, #24
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	605a      	str	r2, [r3, #4]
 8001c3a:	609a      	str	r2, [r3, #8]
 8001c3c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==UART4)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a40      	ldr	r2, [pc, #256]	; (8001d44 <HAL_UART_MspInit+0x11c>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d13a      	bne.n	8001cbe <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001c48:	4b3f      	ldr	r3, [pc, #252]	; (8001d48 <HAL_UART_MspInit+0x120>)
 8001c4a:	69db      	ldr	r3, [r3, #28]
 8001c4c:	4a3e      	ldr	r2, [pc, #248]	; (8001d48 <HAL_UART_MspInit+0x120>)
 8001c4e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001c52:	61d3      	str	r3, [r2, #28]
 8001c54:	4b3c      	ldr	r3, [pc, #240]	; (8001d48 <HAL_UART_MspInit+0x120>)
 8001c56:	69db      	ldr	r3, [r3, #28]
 8001c58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c5c:	617b      	str	r3, [r7, #20]
 8001c5e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c60:	4b39      	ldr	r3, [pc, #228]	; (8001d48 <HAL_UART_MspInit+0x120>)
 8001c62:	699b      	ldr	r3, [r3, #24]
 8001c64:	4a38      	ldr	r2, [pc, #224]	; (8001d48 <HAL_UART_MspInit+0x120>)
 8001c66:	f043 0310 	orr.w	r3, r3, #16
 8001c6a:	6193      	str	r3, [r2, #24]
 8001c6c:	4b36      	ldr	r3, [pc, #216]	; (8001d48 <HAL_UART_MspInit+0x120>)
 8001c6e:	699b      	ldr	r3, [r3, #24]
 8001c70:	f003 0310 	and.w	r3, r3, #16
 8001c74:	613b      	str	r3, [r7, #16]
 8001c76:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = MASTER_USART_TX_Pin;
 8001c78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7e:	2302      	movs	r3, #2
 8001c80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c82:	2303      	movs	r3, #3
 8001c84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MASTER_USART_TX_GPIO_Port, &GPIO_InitStruct);
 8001c86:	f107 0318 	add.w	r3, r7, #24
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	482f      	ldr	r0, [pc, #188]	; (8001d4c <HAL_UART_MspInit+0x124>)
 8001c8e:	f001 fad3 	bl	8003238 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MASTER_USART_RX_Pin;
 8001c92:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(MASTER_USART_RX_GPIO_Port, &GPIO_InitStruct);
 8001ca0:	f107 0318 	add.w	r3, r7, #24
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4829      	ldr	r0, [pc, #164]	; (8001d4c <HAL_UART_MspInit+0x124>)
 8001ca8:	f001 fac6 	bl	8003238 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8001cac:	2200      	movs	r2, #0
 8001cae:	2105      	movs	r1, #5
 8001cb0:	2034      	movs	r0, #52	; 0x34
 8001cb2:	f001 f92f 	bl	8002f14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001cb6:	2034      	movs	r0, #52	; 0x34
 8001cb8:	f001 f958 	bl	8002f6c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001cbc:	e03e      	b.n	8001d3c <HAL_UART_MspInit+0x114>
  else if(huart->Instance==USART1)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a23      	ldr	r2, [pc, #140]	; (8001d50 <HAL_UART_MspInit+0x128>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d139      	bne.n	8001d3c <HAL_UART_MspInit+0x114>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001cc8:	4b1f      	ldr	r3, [pc, #124]	; (8001d48 <HAL_UART_MspInit+0x120>)
 8001cca:	699b      	ldr	r3, [r3, #24]
 8001ccc:	4a1e      	ldr	r2, [pc, #120]	; (8001d48 <HAL_UART_MspInit+0x120>)
 8001cce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cd2:	6193      	str	r3, [r2, #24]
 8001cd4:	4b1c      	ldr	r3, [pc, #112]	; (8001d48 <HAL_UART_MspInit+0x120>)
 8001cd6:	699b      	ldr	r3, [r3, #24]
 8001cd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cdc:	60fb      	str	r3, [r7, #12]
 8001cde:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce0:	4b19      	ldr	r3, [pc, #100]	; (8001d48 <HAL_UART_MspInit+0x120>)
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	4a18      	ldr	r2, [pc, #96]	; (8001d48 <HAL_UART_MspInit+0x120>)
 8001ce6:	f043 0304 	orr.w	r3, r3, #4
 8001cea:	6193      	str	r3, [r2, #24]
 8001cec:	4b16      	ldr	r3, [pc, #88]	; (8001d48 <HAL_UART_MspInit+0x120>)
 8001cee:	699b      	ldr	r3, [r3, #24]
 8001cf0:	f003 0304 	and.w	r3, r3, #4
 8001cf4:	60bb      	str	r3, [r7, #8]
 8001cf6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = CONSOLE_USART_TX_Pin;
 8001cf8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfe:	2302      	movs	r3, #2
 8001d00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d02:	2303      	movs	r3, #3
 8001d04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(CONSOLE_USART_TX_GPIO_Port, &GPIO_InitStruct);
 8001d06:	f107 0318 	add.w	r3, r7, #24
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	4811      	ldr	r0, [pc, #68]	; (8001d54 <HAL_UART_MspInit+0x12c>)
 8001d0e:	f001 fa93 	bl	8003238 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = CONSOLE_USART_RX_Pin;
 8001d12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(CONSOLE_USART_RX_GPIO_Port, &GPIO_InitStruct);
 8001d20:	f107 0318 	add.w	r3, r7, #24
 8001d24:	4619      	mov	r1, r3
 8001d26:	480b      	ldr	r0, [pc, #44]	; (8001d54 <HAL_UART_MspInit+0x12c>)
 8001d28:	f001 fa86 	bl	8003238 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	2105      	movs	r1, #5
 8001d30:	2025      	movs	r0, #37	; 0x25
 8001d32:	f001 f8ef 	bl	8002f14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001d36:	2025      	movs	r0, #37	; 0x25
 8001d38:	f001 f918 	bl	8002f6c <HAL_NVIC_EnableIRQ>
}
 8001d3c:	bf00      	nop
 8001d3e:	3728      	adds	r7, #40	; 0x28
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	40004c00 	.word	0x40004c00
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	40011000 	.word	0x40011000
 8001d50:	40013800 	.word	0x40013800
 8001d54:	40010800 	.word	0x40010800

08001d58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  LOG_error("NMI_Handler() triggered");
 8001d5c:	4902      	ldr	r1, [pc, #8]	; (8001d68 <NMI_Handler+0x10>)
 8001d5e:	2003      	movs	r0, #3
 8001d60:	f008 f85e 	bl	8009e20 <LOG_log>
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d64:	e7fe      	b.n	8001d64 <NMI_Handler+0xc>
 8001d66:	bf00      	nop
 8001d68:	0800c1cc 	.word	0x0800c1cc

08001d6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  LOG_error("HardFault_Handler() triggered");
 8001d70:	4902      	ldr	r1, [pc, #8]	; (8001d7c <HardFault_Handler+0x10>)
 8001d72:	2003      	movs	r0, #3
 8001d74:	f008 f854 	bl	8009e20 <LOG_log>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d78:	e7fe      	b.n	8001d78 <HardFault_Handler+0xc>
 8001d7a:	bf00      	nop
 8001d7c:	0800c1e4 	.word	0x0800c1e4

08001d80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
  LOG_error("MemManage_Handler() triggered");
 8001d84:	4902      	ldr	r1, [pc, #8]	; (8001d90 <MemManage_Handler+0x10>)
 8001d86:	2003      	movs	r0, #3
 8001d88:	f008 f84a 	bl	8009e20 <LOG_log>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d8c:	e7fe      	b.n	8001d8c <MemManage_Handler+0xc>
 8001d8e:	bf00      	nop
 8001d90:	0800c204 	.word	0x0800c204

08001d94 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
  LOG_error("BusFault_Handler() triggered");
 8001d98:	4902      	ldr	r1, [pc, #8]	; (8001da4 <BusFault_Handler+0x10>)
 8001d9a:	2003      	movs	r0, #3
 8001d9c:	f008 f840 	bl	8009e20 <LOG_log>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001da0:	e7fe      	b.n	8001da0 <BusFault_Handler+0xc>
 8001da2:	bf00      	nop
 8001da4:	0800c224 	.word	0x0800c224

08001da8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
  LOG_error("UsageFault_Handler() triggered");
 8001dac:	4902      	ldr	r1, [pc, #8]	; (8001db8 <UsageFault_Handler+0x10>)
 8001dae:	2003      	movs	r0, #3
 8001db0:	f008 f836 	bl	8009e20 <LOG_log>
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001db4:	e7fe      	b.n	8001db4 <UsageFault_Handler+0xc>
 8001db6:	bf00      	nop
 8001db8:	0800c244 	.word	0x0800c244

08001dbc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SVCall_IRQn 0 */
  LOG_error("SVC_Handler() triggered");
 8001dc0:	4902      	ldr	r1, [pc, #8]	; (8001dcc <SVC_Handler+0x10>)
 8001dc2:	2003      	movs	r0, #3
 8001dc4:	f008 f82c 	bl	8009e20 <LOG_log>
  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dc8:	bf00      	nop
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	0800c264 	.word	0x0800c264

08001dd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */
  LOG_error("DebugMon_Handler() triggered");
 8001dd4:	4902      	ldr	r1, [pc, #8]	; (8001de0 <DebugMon_Handler+0x10>)
 8001dd6:	2003      	movs	r0, #3
 8001dd8:	f008 f822 	bl	8009e20 <LOG_log>
  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ddc:	bf00      	nop
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	0800c27c 	.word	0x0800c27c

08001de4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PendSV_IRQn 0 */
  LOG_error("PendSV_Handler() triggered");
 8001de8:	4902      	ldr	r1, [pc, #8]	; (8001df4 <PendSV_Handler+0x10>)
 8001dea:	2003      	movs	r0, #3
 8001dec:	f008 f818 	bl	8009e20 <LOG_log>
  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001df0:	bf00      	nop
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	0800c29c 	.word	0x0800c29c

08001df8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dfc:	f000 f968 	bl	80020d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e00:	bf00      	nop
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e08:	4802      	ldr	r0, [pc, #8]	; (8001e14 <TIM1_UP_IRQHandler+0x10>)
 8001e0a:	f004 fa05 	bl	8006218 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001e0e:	bf00      	nop
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	200006e4 	.word	0x200006e4

08001e18 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001e1c:	4802      	ldr	r0, [pc, #8]	; (8001e28 <TIM2_IRQHandler+0x10>)
 8001e1e:	f004 f9fb 	bl	8006218 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001e22:	bf00      	nop
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	20000810 	.word	0x20000810

08001e2c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001e30:	4802      	ldr	r0, [pc, #8]	; (8001e3c <TIM3_IRQHandler+0x10>)
 8001e32:	f004 f9f1 	bl	8006218 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001e36:	bf00      	nop
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	200004c4 	.word	0x200004c4

08001e40 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001e44:	4802      	ldr	r0, [pc, #8]	; (8001e50 <TIM4_IRQHandler+0x10>)
 8001e46:	f004 f9e7 	bl	8006218 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001e4a:	bf00      	nop
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	2000035c 	.word	0x2000035c

08001e54 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001e58:	4802      	ldr	r0, [pc, #8]	; (8001e64 <USART1_IRQHandler+0x10>)
 8001e5a:	f005 ff3d 	bl	8007cd8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001e5e:	bf00      	nop
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	200005a8 	.word	0x200005a8

08001e68 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001e6c:	4802      	ldr	r0, [pc, #8]	; (8001e78 <TIM5_IRQHandler+0x10>)
 8001e6e:	f004 f9d3 	bl	8006218 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001e72:	bf00      	nop
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	20000410 	.word	0x20000410

08001e7c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001e80:	4802      	ldr	r0, [pc, #8]	; (8001e8c <UART4_IRQHandler+0x10>)
 8001e82:	f005 ff29 	bl	8007cd8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001e86:	bf00      	nop
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	2000079c 	.word	0x2000079c

08001e90 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b086      	sub	sp, #24
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	60b9      	str	r1, [r7, #8]
 8001e9a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	617b      	str	r3, [r7, #20]
 8001ea0:	e00a      	b.n	8001eb8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001ea2:	f3af 8000 	nop.w
 8001ea6:	4601      	mov	r1, r0
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	1c5a      	adds	r2, r3, #1
 8001eac:	60ba      	str	r2, [r7, #8]
 8001eae:	b2ca      	uxtb	r2, r1
 8001eb0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	617b      	str	r3, [r7, #20]
 8001eb8:	697a      	ldr	r2, [r7, #20]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	dbf0      	blt.n	8001ea2 <_read+0x12>
	}

return len;
 8001ec0:	687b      	ldr	r3, [r7, #4]
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3718      	adds	r7, #24
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
	...

08001ecc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	60f8      	str	r0, [r7, #12]
 8001ed4:	60b9      	str	r1, [r7, #8]
 8001ed6:	607a      	str	r2, [r7, #4]
  if ((file != STDOUT_FILENO) && (file != STDERR_FILENO))
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d00a      	beq.n	8001ef4 <_write+0x28>
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d007      	beq.n	8001ef4 <_write+0x28>
  {
    errno = EBADF;
 8001ee4:	f008 fc9a 	bl	800a81c <__errno>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2209      	movs	r2, #9
 8001eec:	601a      	str	r2, [r3, #0]
    return -1;
 8001eee:	f04f 33ff 	mov.w	r3, #4294967295
 8001ef2:	e00f      	b.n	8001f14 <_write+0x48>
  }

  if (g_MAIN_printOutput == MAIN_PRINT_OUTPUT_TO_CONSOLE)
 8001ef4:	4b09      	ldr	r3, [pc, #36]	; (8001f1c <_write+0x50>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d105      	bne.n	8001f08 <_write+0x3c>
  {
    CON_sendString(ptr, len);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	4619      	mov	r1, r3
 8001f00:	68b8      	ldr	r0, [r7, #8]
 8001f02:	f006 feeb 	bl	8008cdc <CON_sendString>
 8001f06:	e004      	b.n	8001f12 <_write+0x46>
  }
  else
  {
    MAS_sendString(ptr, len);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	68b8      	ldr	r0, [r7, #8]
 8001f0e:	f008 f895 	bl	800a03c <MAS_sendString>
  }

  return len;
 8001f12:	687b      	ldr	r3, [r7, #4]
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3710      	adds	r7, #16
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	20000798 	.word	0x20000798

08001f20 <_close>:

int _close(int file)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
	return -1;
 8001f28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bc80      	pop	{r7}
 8001f34:	4770      	bx	lr

08001f36 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f36:	b480      	push	{r7}
 8001f38:	b083      	sub	sp, #12
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
 8001f3e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f46:	605a      	str	r2, [r3, #4]
	return 0;
 8001f48:	2300      	movs	r3, #0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	370c      	adds	r7, #12
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bc80      	pop	{r7}
 8001f52:	4770      	bx	lr

08001f54 <_isatty>:

int _isatty(int file)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
	return 1;
 8001f5c:	2301      	movs	r3, #1
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	370c      	adds	r7, #12
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bc80      	pop	{r7}
 8001f66:	4770      	bx	lr

08001f68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b085      	sub	sp, #20
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	60b9      	str	r1, [r7, #8]
 8001f72:	607a      	str	r2, [r7, #4]
	return 0;
 8001f74:	2300      	movs	r3, #0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3714      	adds	r7, #20
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bc80      	pop	{r7}
 8001f7e:	4770      	bx	lr

08001f80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b086      	sub	sp, #24
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f88:	4a14      	ldr	r2, [pc, #80]	; (8001fdc <_sbrk+0x5c>)
 8001f8a:	4b15      	ldr	r3, [pc, #84]	; (8001fe0 <_sbrk+0x60>)
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f94:	4b13      	ldr	r3, [pc, #76]	; (8001fe4 <_sbrk+0x64>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d102      	bne.n	8001fa2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f9c:	4b11      	ldr	r3, [pc, #68]	; (8001fe4 <_sbrk+0x64>)
 8001f9e:	4a12      	ldr	r2, [pc, #72]	; (8001fe8 <_sbrk+0x68>)
 8001fa0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fa2:	4b10      	ldr	r3, [pc, #64]	; (8001fe4 <_sbrk+0x64>)
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4413      	add	r3, r2
 8001faa:	693a      	ldr	r2, [r7, #16]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d207      	bcs.n	8001fc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fb0:	f008 fc34 	bl	800a81c <__errno>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	220c      	movs	r2, #12
 8001fb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fba:	f04f 33ff 	mov.w	r3, #4294967295
 8001fbe:	e009      	b.n	8001fd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fc0:	4b08      	ldr	r3, [pc, #32]	; (8001fe4 <_sbrk+0x64>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fc6:	4b07      	ldr	r3, [pc, #28]	; (8001fe4 <_sbrk+0x64>)
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4413      	add	r3, r2
 8001fce:	4a05      	ldr	r2, [pc, #20]	; (8001fe4 <_sbrk+0x64>)
 8001fd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3718      	adds	r7, #24
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	2000c000 	.word	0x2000c000
 8001fe0:	00000400 	.word	0x00000400
 8001fe4:	200000ac 	.word	0x200000ac
 8001fe8:	20000990 	.word	0x20000990

08001fec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ff0:	bf00      	nop
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bc80      	pop	{r7}
 8001ff6:	4770      	bx	lr

08001ff8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ff8:	480c      	ldr	r0, [pc, #48]	; (800202c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ffa:	490d      	ldr	r1, [pc, #52]	; (8002030 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ffc:	4a0d      	ldr	r2, [pc, #52]	; (8002034 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ffe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002000:	e002      	b.n	8002008 <LoopCopyDataInit>

08002002 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002002:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002004:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002006:	3304      	adds	r3, #4

08002008 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002008:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800200a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800200c:	d3f9      	bcc.n	8002002 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800200e:	4a0a      	ldr	r2, [pc, #40]	; (8002038 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002010:	4c0a      	ldr	r4, [pc, #40]	; (800203c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002012:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002014:	e001      	b.n	800201a <LoopFillZerobss>

08002016 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002016:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002018:	3204      	adds	r2, #4

0800201a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800201a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800201c:	d3fb      	bcc.n	8002016 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800201e:	f7ff ffe5 	bl	8001fec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002022:	f008 fc01 	bl	800a828 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002026:	f7fe fcfb 	bl	8000a20 <main>
  bx lr
 800202a:	4770      	bx	lr
  ldr r0, =_sdata
 800202c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002030:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8002034:	0800ced8 	.word	0x0800ced8
  ldr r2, =_sbss
 8002038:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 800203c:	2000098c 	.word	0x2000098c

08002040 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002040:	e7fe      	b.n	8002040 <ADC1_2_IRQHandler>
	...

08002044 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002048:	4b08      	ldr	r3, [pc, #32]	; (800206c <HAL_Init+0x28>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a07      	ldr	r2, [pc, #28]	; (800206c <HAL_Init+0x28>)
 800204e:	f043 0310 	orr.w	r3, r3, #16
 8002052:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002054:	2003      	movs	r0, #3
 8002056:	f000 ff3d 	bl	8002ed4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800205a:	2000      	movs	r0, #0
 800205c:	f000 f808 	bl	8002070 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002060:	f7ff fbaa 	bl	80017b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002064:	2300      	movs	r3, #0
}
 8002066:	4618      	mov	r0, r3
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	40022000 	.word	0x40022000

08002070 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002078:	4b12      	ldr	r3, [pc, #72]	; (80020c4 <HAL_InitTick+0x54>)
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	4b12      	ldr	r3, [pc, #72]	; (80020c8 <HAL_InitTick+0x58>)
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	4619      	mov	r1, r3
 8002082:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002086:	fbb3 f3f1 	udiv	r3, r3, r1
 800208a:	fbb2 f3f3 	udiv	r3, r2, r3
 800208e:	4618      	mov	r0, r3
 8002090:	f000 ff84 	bl	8002f9c <HAL_SYSTICK_Config>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e00e      	b.n	80020bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2b0f      	cmp	r3, #15
 80020a2:	d80a      	bhi.n	80020ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020a4:	2200      	movs	r2, #0
 80020a6:	6879      	ldr	r1, [r7, #4]
 80020a8:	f04f 30ff 	mov.w	r0, #4294967295
 80020ac:	f000 ff32 	bl	8002f14 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020b0:	4a06      	ldr	r2, [pc, #24]	; (80020cc <HAL_InitTick+0x5c>)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020b6:	2300      	movs	r3, #0
 80020b8:	e000      	b.n	80020bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3708      	adds	r7, #8
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	20000000 	.word	0x20000000
 80020c8:	20000008 	.word	0x20000008
 80020cc:	20000004 	.word	0x20000004

080020d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020d4:	4b05      	ldr	r3, [pc, #20]	; (80020ec <HAL_IncTick+0x1c>)
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	461a      	mov	r2, r3
 80020da:	4b05      	ldr	r3, [pc, #20]	; (80020f0 <HAL_IncTick+0x20>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4413      	add	r3, r2
 80020e0:	4a03      	ldr	r2, [pc, #12]	; (80020f0 <HAL_IncTick+0x20>)
 80020e2:	6013      	str	r3, [r2, #0]
}
 80020e4:	bf00      	nop
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bc80      	pop	{r7}
 80020ea:	4770      	bx	lr
 80020ec:	20000008 	.word	0x20000008
 80020f0:	20000978 	.word	0x20000978

080020f4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  return uwTick;
 80020f8:	4b02      	ldr	r3, [pc, #8]	; (8002104 <HAL_GetTick+0x10>)
 80020fa:	681b      	ldr	r3, [r3, #0]
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	46bd      	mov	sp, r7
 8002100:	bc80      	pop	{r7}
 8002102:	4770      	bx	lr
 8002104:	20000978 	.word	0x20000978

08002108 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b086      	sub	sp, #24
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002110:	2300      	movs	r3, #0
 8002112:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002114:	2300      	movs	r3, #0
 8002116:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002118:	2300      	movs	r3, #0
 800211a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800211c:	2300      	movs	r3, #0
 800211e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d101      	bne.n	800212a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e188      	b.n	800243c <HAL_ADC_Init+0x334>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a8c      	ldr	r2, [pc, #560]	; (8002360 <HAL_ADC_Init+0x258>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d00e      	beq.n	8002152 <HAL_ADC_Init+0x4a>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a8a      	ldr	r2, [pc, #552]	; (8002364 <HAL_ADC_Init+0x25c>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d009      	beq.n	8002152 <HAL_ADC_Init+0x4a>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a89      	ldr	r2, [pc, #548]	; (8002368 <HAL_ADC_Init+0x260>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d004      	beq.n	8002152 <HAL_ADC_Init+0x4a>
 8002148:	f240 11b3 	movw	r1, #435	; 0x1b3
 800214c:	4887      	ldr	r0, [pc, #540]	; (800236c <HAL_ADC_Init+0x264>)
 800214e:	f7ff fb21 	bl	8001794 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d009      	beq.n	800216e <HAL_ADC_Init+0x66>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002162:	d004      	beq.n	800216e <HAL_ADC_Init+0x66>
 8002164:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 8002168:	4880      	ldr	r0, [pc, #512]	; (800236c <HAL_ADC_Init+0x264>)
 800216a:	f7ff fb13 	bl	8001794 <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d009      	beq.n	800218a <HAL_ADC_Init+0x82>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800217e:	d004      	beq.n	800218a <HAL_ADC_Init+0x82>
 8002180:	f240 11b5 	movw	r1, #437	; 0x1b5
 8002184:	4879      	ldr	r0, [pc, #484]	; (800236c <HAL_ADC_Init+0x264>)
 8002186:	f7ff fb05 	bl	8001794 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	7b1b      	ldrb	r3, [r3, #12]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d008      	beq.n	80021a4 <HAL_ADC_Init+0x9c>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	7b1b      	ldrb	r3, [r3, #12]
 8002196:	2b01      	cmp	r3, #1
 8002198:	d004      	beq.n	80021a4 <HAL_ADC_Init+0x9c>
 800219a:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 800219e:	4873      	ldr	r0, [pc, #460]	; (800236c <HAL_ADC_Init+0x264>)
 80021a0:	f7ff faf8 	bl	8001794 <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	69db      	ldr	r3, [r3, #28]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d044      	beq.n	8002236 <HAL_ADC_Init+0x12e>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	69db      	ldr	r3, [r3, #28]
 80021b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80021b4:	d03f      	beq.n	8002236 <HAL_ADC_Init+0x12e>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	69db      	ldr	r3, [r3, #28]
 80021ba:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80021be:	d03a      	beq.n	8002236 <HAL_ADC_Init+0x12e>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	69db      	ldr	r3, [r3, #28]
 80021c4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80021c8:	d035      	beq.n	8002236 <HAL_ADC_Init+0x12e>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	69db      	ldr	r3, [r3, #28]
 80021ce:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 80021d2:	d030      	beq.n	8002236 <HAL_ADC_Init+0x12e>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	69db      	ldr	r3, [r3, #28]
 80021d8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80021dc:	d02b      	beq.n	8002236 <HAL_ADC_Init+0x12e>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	69db      	ldr	r3, [r3, #28]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d027      	beq.n	8002236 <HAL_ADC_Init+0x12e>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	69db      	ldr	r3, [r3, #28]
 80021ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80021ee:	d022      	beq.n	8002236 <HAL_ADC_Init+0x12e>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	69db      	ldr	r3, [r3, #28]
 80021f4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80021f8:	d01d      	beq.n	8002236 <HAL_ADC_Init+0x12e>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	69db      	ldr	r3, [r3, #28]
 80021fe:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 8002202:	d018      	beq.n	8002236 <HAL_ADC_Init+0x12e>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	69db      	ldr	r3, [r3, #28]
 8002208:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800220c:	d013      	beq.n	8002236 <HAL_ADC_Init+0x12e>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	69db      	ldr	r3, [r3, #28]
 8002212:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002216:	d00e      	beq.n	8002236 <HAL_ADC_Init+0x12e>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	69db      	ldr	r3, [r3, #28]
 800221c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002220:	d009      	beq.n	8002236 <HAL_ADC_Init+0x12e>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	69db      	ldr	r3, [r3, #28]
 8002226:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800222a:	d004      	beq.n	8002236 <HAL_ADC_Init+0x12e>
 800222c:	f240 11b7 	movw	r1, #439	; 0x1b7
 8002230:	484e      	ldr	r0, [pc, #312]	; (800236c <HAL_ADC_Init+0x264>)
 8002232:	f7ff faaf 	bl	8001794 <assert_failed>
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d02a      	beq.n	8002294 <HAL_ADC_Init+0x18c>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	691b      	ldr	r3, [r3, #16]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d003      	beq.n	800224e <HAL_ADC_Init+0x146>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	691b      	ldr	r3, [r3, #16]
 800224a:	2b10      	cmp	r3, #16
 800224c:	d904      	bls.n	8002258 <HAL_ADC_Init+0x150>
 800224e:	f240 11bb 	movw	r1, #443	; 0x1bb
 8002252:	4846      	ldr	r0, [pc, #280]	; (800236c <HAL_ADC_Init+0x264>)
 8002254:	f7ff fa9e 	bl	8001794 <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	7d1b      	ldrb	r3, [r3, #20]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d008      	beq.n	8002272 <HAL_ADC_Init+0x16a>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	7d1b      	ldrb	r3, [r3, #20]
 8002264:	2b01      	cmp	r3, #1
 8002266:	d004      	beq.n	8002272 <HAL_ADC_Init+0x16a>
 8002268:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 800226c:	483f      	ldr	r0, [pc, #252]	; (800236c <HAL_ADC_Init+0x264>)
 800226e:	f7ff fa91 	bl	8001794 <assert_failed>
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	7d1b      	ldrb	r3, [r3, #20]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d00c      	beq.n	8002294 <HAL_ADC_Init+0x18c>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	699b      	ldr	r3, [r3, #24]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d003      	beq.n	800228a <HAL_ADC_Init+0x182>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	699b      	ldr	r3, [r3, #24]
 8002286:	2b08      	cmp	r3, #8
 8002288:	d904      	bls.n	8002294 <HAL_ADC_Init+0x18c>
 800228a:	f240 11bf 	movw	r1, #447	; 0x1bf
 800228e:	4837      	ldr	r0, [pc, #220]	; (800236c <HAL_ADC_Init+0x264>)
 8002290:	f7ff fa80 	bl	8001794 <assert_failed>
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002298:	2b00      	cmp	r3, #0
 800229a:	d109      	bne.n	80022b0 <HAL_ADC_Init+0x1a8>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f7ff fab6 	bl	800181c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f000 fd01 	bl	8002cb8 <ADC_ConversionStop_Disable>
 80022b6:	4603      	mov	r3, r0
 80022b8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022be:	f003 0310 	and.w	r3, r3, #16
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	f040 80b1 	bne.w	800242a <HAL_ADC_Init+0x322>
 80022c8:	7dfb      	ldrb	r3, [r7, #23]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	f040 80ad 	bne.w	800242a <HAL_ADC_Init+0x322>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80022d8:	f023 0302 	bic.w	r3, r3, #2
 80022dc:	f043 0202 	orr.w	r2, r3, #2
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	491e      	ldr	r1, [pc, #120]	; (8002368 <HAL_ADC_Init+0x260>)
 80022ee:	428b      	cmp	r3, r1
 80022f0:	d10a      	bne.n	8002308 <HAL_ADC_Init+0x200>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	69db      	ldr	r3, [r3, #28]
 80022f6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80022fa:	d002      	beq.n	8002302 <HAL_ADC_Init+0x1fa>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	69db      	ldr	r3, [r3, #28]
 8002300:	e004      	b.n	800230c <HAL_ADC_Init+0x204>
 8002302:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002306:	e001      	b.n	800230c <HAL_ADC_Init+0x204>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800230c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	7b1b      	ldrb	r3, [r3, #12]
 8002312:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002314:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002316:	68ba      	ldr	r2, [r7, #8]
 8002318:	4313      	orrs	r3, r2
 800231a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002324:	d003      	beq.n	800232e <HAL_ADC_Init+0x226>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d102      	bne.n	8002334 <HAL_ADC_Init+0x22c>
 800232e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002332:	e000      	b.n	8002336 <HAL_ADC_Init+0x22e>
 8002334:	2300      	movs	r3, #0
 8002336:	693a      	ldr	r2, [r7, #16]
 8002338:	4313      	orrs	r3, r2
 800233a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	7d1b      	ldrb	r3, [r3, #20]
 8002340:	2b01      	cmp	r3, #1
 8002342:	d121      	bne.n	8002388 <HAL_ADC_Init+0x280>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	7b1b      	ldrb	r3, [r3, #12]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d111      	bne.n	8002370 <HAL_ADC_Init+0x268>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	699b      	ldr	r3, [r3, #24]
 8002350:	3b01      	subs	r3, #1
 8002352:	035a      	lsls	r2, r3, #13
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	4313      	orrs	r3, r2
 8002358:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800235c:	613b      	str	r3, [r7, #16]
 800235e:	e013      	b.n	8002388 <HAL_ADC_Init+0x280>
 8002360:	40012400 	.word	0x40012400
 8002364:	40012800 	.word	0x40012800
 8002368:	40013c00 	.word	0x40013c00
 800236c:	0800c2b8 	.word	0x0800c2b8
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002374:	f043 0220 	orr.w	r2, r3, #32
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002380:	f043 0201 	orr.w	r2, r3, #1
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	693a      	ldr	r2, [r7, #16]
 8002398:	430a      	orrs	r2, r1
 800239a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	689a      	ldr	r2, [r3, #8]
 80023a2:	4b28      	ldr	r3, [pc, #160]	; (8002444 <HAL_ADC_Init+0x33c>)
 80023a4:	4013      	ands	r3, r2
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	6812      	ldr	r2, [r2, #0]
 80023aa:	68b9      	ldr	r1, [r7, #8]
 80023ac:	430b      	orrs	r3, r1
 80023ae:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023b8:	d003      	beq.n	80023c2 <HAL_ADC_Init+0x2ba>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d104      	bne.n	80023cc <HAL_ADC_Init+0x2c4>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	3b01      	subs	r3, #1
 80023c8:	051b      	lsls	r3, r3, #20
 80023ca:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	68fa      	ldr	r2, [r7, #12]
 80023dc:	430a      	orrs	r2, r1
 80023de:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	689a      	ldr	r2, [r3, #8]
 80023e6:	4b18      	ldr	r3, [pc, #96]	; (8002448 <HAL_ADC_Init+0x340>)
 80023e8:	4013      	ands	r3, r2
 80023ea:	68ba      	ldr	r2, [r7, #8]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d10b      	bne.n	8002408 <HAL_ADC_Init+0x300>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023fa:	f023 0303 	bic.w	r3, r3, #3
 80023fe:	f043 0201 	orr.w	r2, r3, #1
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002406:	e018      	b.n	800243a <HAL_ADC_Init+0x332>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800240c:	f023 0312 	bic.w	r3, r3, #18
 8002410:	f043 0210 	orr.w	r2, r3, #16
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800241c:	f043 0201 	orr.w	r2, r3, #1
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002428:	e007      	b.n	800243a <HAL_ADC_Init+0x332>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800242e:	f043 0210 	orr.w	r2, r3, #16
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800243a:	7dfb      	ldrb	r3, [r7, #23]
}
 800243c:	4618      	mov	r0, r3
 800243e:	3718      	adds	r7, #24
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	ffe1f7fd 	.word	0xffe1f7fd
 8002448:	ff1f0efe 	.word	0xff1f0efe

0800244c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002454:	2300      	movs	r3, #0
 8002456:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a5a      	ldr	r2, [pc, #360]	; (80025c8 <HAL_ADC_Start+0x17c>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d00e      	beq.n	8002480 <HAL_ADC_Start+0x34>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a59      	ldr	r2, [pc, #356]	; (80025cc <HAL_ADC_Start+0x180>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d009      	beq.n	8002480 <HAL_ADC_Start+0x34>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a57      	ldr	r2, [pc, #348]	; (80025d0 <HAL_ADC_Start+0x184>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d004      	beq.n	8002480 <HAL_ADC_Start+0x34>
 8002476:	f240 411b 	movw	r1, #1051	; 0x41b
 800247a:	4856      	ldr	r0, [pc, #344]	; (80025d4 <HAL_ADC_Start+0x188>)
 800247c:	f7ff f98a 	bl	8001794 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002486:	2b01      	cmp	r3, #1
 8002488:	d101      	bne.n	800248e <HAL_ADC_Start+0x42>
 800248a:	2302      	movs	r3, #2
 800248c:	e098      	b.n	80025c0 <HAL_ADC_Start+0x174>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2201      	movs	r2, #1
 8002492:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f000 fbb4 	bl	8002c04 <ADC_Enable>
 800249c:	4603      	mov	r3, r0
 800249e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80024a0:	7bfb      	ldrb	r3, [r7, #15]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	f040 8087 	bne.w	80025b6 <HAL_ADC_Start+0x16a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024b0:	f023 0301 	bic.w	r3, r3, #1
 80024b4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a42      	ldr	r2, [pc, #264]	; (80025cc <HAL_ADC_Start+0x180>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d105      	bne.n	80024d2 <HAL_ADC_Start+0x86>
 80024c6:	4b40      	ldr	r3, [pc, #256]	; (80025c8 <HAL_ADC_Start+0x17c>)
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d115      	bne.n	80024fe <HAL_ADC_Start+0xb2>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d026      	beq.n	800253a <HAL_ADC_Start+0xee>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80024f4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80024fc:	e01d      	b.n	800253a <HAL_ADC_Start+0xee>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002502:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a2e      	ldr	r2, [pc, #184]	; (80025c8 <HAL_ADC_Start+0x17c>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d004      	beq.n	800251e <HAL_ADC_Start+0xd2>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a2c      	ldr	r2, [pc, #176]	; (80025cc <HAL_ADC_Start+0x180>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d10d      	bne.n	800253a <HAL_ADC_Start+0xee>
 800251e:	4b2a      	ldr	r3, [pc, #168]	; (80025c8 <HAL_ADC_Start+0x17c>)
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002526:	2b00      	cmp	r3, #0
 8002528:	d007      	beq.n	800253a <HAL_ADC_Start+0xee>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800252e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002532:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800253e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d006      	beq.n	8002554 <HAL_ADC_Start+0x108>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800254a:	f023 0206 	bic.w	r2, r3, #6
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	62da      	str	r2, [r3, #44]	; 0x2c
 8002552:	e002      	b.n	800255a <HAL_ADC_Start+0x10e>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f06f 0202 	mvn.w	r2, #2
 800256a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002576:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800257a:	d113      	bne.n	80025a4 <HAL_ADC_Start+0x158>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002580:	4a12      	ldr	r2, [pc, #72]	; (80025cc <HAL_ADC_Start+0x180>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d105      	bne.n	8002592 <HAL_ADC_Start+0x146>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002586:	4b10      	ldr	r3, [pc, #64]	; (80025c8 <HAL_ADC_Start+0x17c>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800258e:	2b00      	cmp	r3, #0
 8002590:	d108      	bne.n	80025a4 <HAL_ADC_Start+0x158>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	689a      	ldr	r2, [r3, #8]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80025a0:	609a      	str	r2, [r3, #8]
 80025a2:	e00c      	b.n	80025be <HAL_ADC_Start+0x172>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	689a      	ldr	r2, [r3, #8]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80025b2:	609a      	str	r2, [r3, #8]
 80025b4:	e003      	b.n	80025be <HAL_ADC_Start+0x172>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80025be:	7bfb      	ldrb	r3, [r7, #15]
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3710      	adds	r7, #16
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	40012400 	.word	0x40012400
 80025cc:	40012800 	.word	0x40012800
 80025d0:	40013c00 	.word	0x40013c00
 80025d4:	0800c2b8 	.word	0x0800c2b8

080025d8 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80025d8:	b590      	push	{r4, r7, lr}
 80025da:	b087      	sub	sp, #28
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80025e2:	2300      	movs	r3, #0
 80025e4:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80025e6:	2300      	movs	r3, #0
 80025e8:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80025ea:	2300      	movs	r3, #0
 80025ec:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a80      	ldr	r2, [pc, #512]	; (80027f4 <HAL_ADC_PollForConversion+0x21c>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d00e      	beq.n	8002616 <HAL_ADC_PollForConversion+0x3e>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a7e      	ldr	r2, [pc, #504]	; (80027f8 <HAL_ADC_PollForConversion+0x220>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d009      	beq.n	8002616 <HAL_ADC_PollForConversion+0x3e>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a7d      	ldr	r2, [pc, #500]	; (80027fc <HAL_ADC_PollForConversion+0x224>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d004      	beq.n	8002616 <HAL_ADC_PollForConversion+0x3e>
 800260c:	f240 41bd 	movw	r1, #1213	; 0x4bd
 8002610:	487b      	ldr	r0, [pc, #492]	; (8002800 <HAL_ADC_PollForConversion+0x228>)
 8002612:	f7ff f8bf 	bl	8001794 <assert_failed>
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002616:	f7ff fd6d 	bl	80020f4 <HAL_GetTick>
 800261a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002626:	2b00      	cmp	r3, #0
 8002628:	d00b      	beq.n	8002642 <HAL_ADC_PollForConversion+0x6a>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800262e:	f043 0220 	orr.w	r2, r3, #32
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e0d3      	b.n	80027ea <HAL_ADC_PollForConversion+0x212>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800264c:	2b00      	cmp	r3, #0
 800264e:	d131      	bne.n	80026b4 <HAL_ADC_PollForConversion+0xdc>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002656:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800265a:	2b00      	cmp	r3, #0
 800265c:	d12a      	bne.n	80026b4 <HAL_ADC_PollForConversion+0xdc>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800265e:	e021      	b.n	80026a4 <HAL_ADC_PollForConversion+0xcc>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002666:	d01d      	beq.n	80026a4 <HAL_ADC_PollForConversion+0xcc>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d007      	beq.n	800267e <HAL_ADC_PollForConversion+0xa6>
 800266e:	f7ff fd41 	bl	80020f4 <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	683a      	ldr	r2, [r7, #0]
 800267a:	429a      	cmp	r2, r3
 800267c:	d212      	bcs.n	80026a4 <HAL_ADC_PollForConversion+0xcc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0302 	and.w	r3, r3, #2
 8002688:	2b00      	cmp	r3, #0
 800268a:	d10b      	bne.n	80026a4 <HAL_ADC_PollForConversion+0xcc>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002690:	f043 0204 	orr.w	r2, r3, #4
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 80026a0:	2303      	movs	r3, #3
 80026a2:	e0a2      	b.n	80027ea <HAL_ADC_PollForConversion+0x212>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0302 	and.w	r3, r3, #2
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d0d6      	beq.n	8002660 <HAL_ADC_PollForConversion+0x88>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80026b2:	e070      	b.n	8002796 <HAL_ADC_PollForConversion+0x1be>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80026b4:	4b53      	ldr	r3, [pc, #332]	; (8002804 <HAL_ADC_PollForConversion+0x22c>)
 80026b6:	681c      	ldr	r4, [r3, #0]
 80026b8:	2002      	movs	r0, #2
 80026ba:	f001 ff7d 	bl	80045b8 <HAL_RCCEx_GetPeriphCLKFreq>
 80026be:	4603      	mov	r3, r0
 80026c0:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	6919      	ldr	r1, [r3, #16]
 80026ca:	4b4f      	ldr	r3, [pc, #316]	; (8002808 <HAL_ADC_PollForConversion+0x230>)
 80026cc:	400b      	ands	r3, r1
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d118      	bne.n	8002704 <HAL_ADC_PollForConversion+0x12c>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	68d9      	ldr	r1, [r3, #12]
 80026d8:	4b4c      	ldr	r3, [pc, #304]	; (800280c <HAL_ADC_PollForConversion+0x234>)
 80026da:	400b      	ands	r3, r1
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d111      	bne.n	8002704 <HAL_ADC_PollForConversion+0x12c>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	6919      	ldr	r1, [r3, #16]
 80026e6:	4b4a      	ldr	r3, [pc, #296]	; (8002810 <HAL_ADC_PollForConversion+0x238>)
 80026e8:	400b      	ands	r3, r1
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d108      	bne.n	8002700 <HAL_ADC_PollForConversion+0x128>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	68d9      	ldr	r1, [r3, #12]
 80026f4:	4b47      	ldr	r3, [pc, #284]	; (8002814 <HAL_ADC_PollForConversion+0x23c>)
 80026f6:	400b      	ands	r3, r1
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d101      	bne.n	8002700 <HAL_ADC_PollForConversion+0x128>
 80026fc:	2314      	movs	r3, #20
 80026fe:	e020      	b.n	8002742 <HAL_ADC_PollForConversion+0x16a>
 8002700:	2329      	movs	r3, #41	; 0x29
 8002702:	e01e      	b.n	8002742 <HAL_ADC_PollForConversion+0x16a>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	6919      	ldr	r1, [r3, #16]
 800270a:	4b41      	ldr	r3, [pc, #260]	; (8002810 <HAL_ADC_PollForConversion+0x238>)
 800270c:	400b      	ands	r3, r1
 800270e:	2b00      	cmp	r3, #0
 8002710:	d106      	bne.n	8002720 <HAL_ADC_PollForConversion+0x148>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	68d9      	ldr	r1, [r3, #12]
 8002718:	4b3e      	ldr	r3, [pc, #248]	; (8002814 <HAL_ADC_PollForConversion+0x23c>)
 800271a:	400b      	ands	r3, r1
 800271c:	2b00      	cmp	r3, #0
 800271e:	d00d      	beq.n	800273c <HAL_ADC_PollForConversion+0x164>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	6919      	ldr	r1, [r3, #16]
 8002726:	4b3c      	ldr	r3, [pc, #240]	; (8002818 <HAL_ADC_PollForConversion+0x240>)
 8002728:	400b      	ands	r3, r1
 800272a:	2b00      	cmp	r3, #0
 800272c:	d108      	bne.n	8002740 <HAL_ADC_PollForConversion+0x168>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	68d9      	ldr	r1, [r3, #12]
 8002734:	4b38      	ldr	r3, [pc, #224]	; (8002818 <HAL_ADC_PollForConversion+0x240>)
 8002736:	400b      	ands	r3, r1
 8002738:	2b00      	cmp	r3, #0
 800273a:	d101      	bne.n	8002740 <HAL_ADC_PollForConversion+0x168>
 800273c:	2354      	movs	r3, #84	; 0x54
 800273e:	e000      	b.n	8002742 <HAL_ADC_PollForConversion+0x16a>
 8002740:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002742:	fb02 f303 	mul.w	r3, r2, r3
 8002746:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002748:	e021      	b.n	800278e <HAL_ADC_PollForConversion+0x1b6>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002750:	d01a      	beq.n	8002788 <HAL_ADC_PollForConversion+0x1b0>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d007      	beq.n	8002768 <HAL_ADC_PollForConversion+0x190>
 8002758:	f7ff fccc 	bl	80020f4 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	683a      	ldr	r2, [r7, #0]
 8002764:	429a      	cmp	r2, r3
 8002766:	d20f      	bcs.n	8002788 <HAL_ADC_PollForConversion+0x1b0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	693a      	ldr	r2, [r7, #16]
 800276c:	429a      	cmp	r2, r3
 800276e:	d90b      	bls.n	8002788 <HAL_ADC_PollForConversion+0x1b0>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002774:	f043 0204 	orr.w	r2, r3, #4
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	e030      	b.n	80027ea <HAL_ADC_PollForConversion+0x212>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	3301      	adds	r3, #1
 800278c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	693a      	ldr	r2, [r7, #16]
 8002792:	429a      	cmp	r2, r3
 8002794:	d8d9      	bhi.n	800274a <HAL_ADC_PollForConversion+0x172>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f06f 0212 	mvn.w	r2, #18
 800279e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80027b6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80027ba:	d115      	bne.n	80027e8 <HAL_ADC_PollForConversion+0x210>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d111      	bne.n	80027e8 <HAL_ADC_PollForConversion+0x210>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d105      	bne.n	80027e8 <HAL_ADC_PollForConversion+0x210>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e0:	f043 0201 	orr.w	r2, r3, #1
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	371c      	adds	r7, #28
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd90      	pop	{r4, r7, pc}
 80027f2:	bf00      	nop
 80027f4:	40012400 	.word	0x40012400
 80027f8:	40012800 	.word	0x40012800
 80027fc:	40013c00 	.word	0x40013c00
 8002800:	0800c2b8 	.word	0x0800c2b8
 8002804:	20000000 	.word	0x20000000
 8002808:	24924924 	.word	0x24924924
 800280c:	00924924 	.word	0x00924924
 8002810:	12492492 	.word	0x12492492
 8002814:	00492492 	.word	0x00492492
 8002818:	00249249 	.word	0x00249249

0800281c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a0c      	ldr	r2, [pc, #48]	; (800285c <HAL_ADC_GetValue+0x40>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d00e      	beq.n	800284c <HAL_ADC_GetValue+0x30>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a0b      	ldr	r2, [pc, #44]	; (8002860 <HAL_ADC_GetValue+0x44>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d009      	beq.n	800284c <HAL_ADC_GetValue+0x30>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a09      	ldr	r2, [pc, #36]	; (8002864 <HAL_ADC_GetValue+0x48>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d004      	beq.n	800284c <HAL_ADC_GetValue+0x30>
 8002842:	f240 61ef 	movw	r1, #1775	; 0x6ef
 8002846:	4808      	ldr	r0, [pc, #32]	; (8002868 <HAL_ADC_GetValue+0x4c>)
 8002848:	f7fe ffa4 	bl	8001794 <assert_failed>

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002852:	4618      	mov	r0, r3
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	40012400 	.word	0x40012400
 8002860:	40012800 	.word	0x40012800
 8002864:	40013c00 	.word	0x40013c00
 8002868:	0800c2b8 	.word	0x0800c2b8

0800286c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002876:	2300      	movs	r3, #0
 8002878:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800287a:	2300      	movs	r3, #0
 800287c:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a8b      	ldr	r2, [pc, #556]	; (8002ab0 <HAL_ADC_ConfigChannel+0x244>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d00e      	beq.n	80028a6 <HAL_ADC_ConfigChannel+0x3a>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a89      	ldr	r2, [pc, #548]	; (8002ab4 <HAL_ADC_ConfigChannel+0x248>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d009      	beq.n	80028a6 <HAL_ADC_ConfigChannel+0x3a>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a88      	ldr	r2, [pc, #544]	; (8002ab8 <HAL_ADC_ConfigChannel+0x24c>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d004      	beq.n	80028a6 <HAL_ADC_ConfigChannel+0x3a>
 800289c:	f240 71dd 	movw	r1, #2013	; 0x7dd
 80028a0:	4886      	ldr	r0, [pc, #536]	; (8002abc <HAL_ADC_ConfigChannel+0x250>)
 80028a2:	f7fe ff77 	bl	8001794 <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d048      	beq.n	8002940 <HAL_ADC_ConfigChannel+0xd4>
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d044      	beq.n	8002940 <HAL_ADC_ConfigChannel+0xd4>
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d040      	beq.n	8002940 <HAL_ADC_ConfigChannel+0xd4>
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	2b03      	cmp	r3, #3
 80028c4:	d03c      	beq.n	8002940 <HAL_ADC_ConfigChannel+0xd4>
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2b04      	cmp	r3, #4
 80028cc:	d038      	beq.n	8002940 <HAL_ADC_ConfigChannel+0xd4>
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	2b05      	cmp	r3, #5
 80028d4:	d034      	beq.n	8002940 <HAL_ADC_ConfigChannel+0xd4>
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	2b06      	cmp	r3, #6
 80028dc:	d030      	beq.n	8002940 <HAL_ADC_ConfigChannel+0xd4>
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	2b07      	cmp	r3, #7
 80028e4:	d02c      	beq.n	8002940 <HAL_ADC_ConfigChannel+0xd4>
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	2b08      	cmp	r3, #8
 80028ec:	d028      	beq.n	8002940 <HAL_ADC_ConfigChannel+0xd4>
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2b09      	cmp	r3, #9
 80028f4:	d024      	beq.n	8002940 <HAL_ADC_ConfigChannel+0xd4>
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	2b0a      	cmp	r3, #10
 80028fc:	d020      	beq.n	8002940 <HAL_ADC_ConfigChannel+0xd4>
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2b0b      	cmp	r3, #11
 8002904:	d01c      	beq.n	8002940 <HAL_ADC_ConfigChannel+0xd4>
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	2b0c      	cmp	r3, #12
 800290c:	d018      	beq.n	8002940 <HAL_ADC_ConfigChannel+0xd4>
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2b0d      	cmp	r3, #13
 8002914:	d014      	beq.n	8002940 <HAL_ADC_ConfigChannel+0xd4>
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2b0e      	cmp	r3, #14
 800291c:	d010      	beq.n	8002940 <HAL_ADC_ConfigChannel+0xd4>
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	2b0f      	cmp	r3, #15
 8002924:	d00c      	beq.n	8002940 <HAL_ADC_ConfigChannel+0xd4>
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	2b10      	cmp	r3, #16
 800292c:	d008      	beq.n	8002940 <HAL_ADC_ConfigChannel+0xd4>
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	2b11      	cmp	r3, #17
 8002934:	d004      	beq.n	8002940 <HAL_ADC_ConfigChannel+0xd4>
 8002936:	f240 71de 	movw	r1, #2014	; 0x7de
 800293a:	4860      	ldr	r0, [pc, #384]	; (8002abc <HAL_ADC_ConfigChannel+0x250>)
 800293c:	f7fe ff2a 	bl	8001794 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	2b01      	cmp	r3, #1
 8002946:	d040      	beq.n	80029ca <HAL_ADC_ConfigChannel+0x15e>
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	2b02      	cmp	r3, #2
 800294e:	d03c      	beq.n	80029ca <HAL_ADC_ConfigChannel+0x15e>
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	2b03      	cmp	r3, #3
 8002956:	d038      	beq.n	80029ca <HAL_ADC_ConfigChannel+0x15e>
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	2b04      	cmp	r3, #4
 800295e:	d034      	beq.n	80029ca <HAL_ADC_ConfigChannel+0x15e>
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	2b05      	cmp	r3, #5
 8002966:	d030      	beq.n	80029ca <HAL_ADC_ConfigChannel+0x15e>
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	2b06      	cmp	r3, #6
 800296e:	d02c      	beq.n	80029ca <HAL_ADC_ConfigChannel+0x15e>
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	2b07      	cmp	r3, #7
 8002976:	d028      	beq.n	80029ca <HAL_ADC_ConfigChannel+0x15e>
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	2b08      	cmp	r3, #8
 800297e:	d024      	beq.n	80029ca <HAL_ADC_ConfigChannel+0x15e>
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	2b09      	cmp	r3, #9
 8002986:	d020      	beq.n	80029ca <HAL_ADC_ConfigChannel+0x15e>
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	2b0a      	cmp	r3, #10
 800298e:	d01c      	beq.n	80029ca <HAL_ADC_ConfigChannel+0x15e>
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	2b0b      	cmp	r3, #11
 8002996:	d018      	beq.n	80029ca <HAL_ADC_ConfigChannel+0x15e>
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	2b0c      	cmp	r3, #12
 800299e:	d014      	beq.n	80029ca <HAL_ADC_ConfigChannel+0x15e>
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	2b0d      	cmp	r3, #13
 80029a6:	d010      	beq.n	80029ca <HAL_ADC_ConfigChannel+0x15e>
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	2b0e      	cmp	r3, #14
 80029ae:	d00c      	beq.n	80029ca <HAL_ADC_ConfigChannel+0x15e>
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	2b0f      	cmp	r3, #15
 80029b6:	d008      	beq.n	80029ca <HAL_ADC_ConfigChannel+0x15e>
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	2b10      	cmp	r3, #16
 80029be:	d004      	beq.n	80029ca <HAL_ADC_ConfigChannel+0x15e>
 80029c0:	f240 71df 	movw	r1, #2015	; 0x7df
 80029c4:	483d      	ldr	r0, [pc, #244]	; (8002abc <HAL_ADC_ConfigChannel+0x250>)
 80029c6:	f7fe fee5 	bl	8001794 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d020      	beq.n	8002a14 <HAL_ADC_ConfigChannel+0x1a8>
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d01c      	beq.n	8002a14 <HAL_ADC_ConfigChannel+0x1a8>
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d018      	beq.n	8002a14 <HAL_ADC_ConfigChannel+0x1a8>
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	2b03      	cmp	r3, #3
 80029e8:	d014      	beq.n	8002a14 <HAL_ADC_ConfigChannel+0x1a8>
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	2b04      	cmp	r3, #4
 80029f0:	d010      	beq.n	8002a14 <HAL_ADC_ConfigChannel+0x1a8>
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	2b05      	cmp	r3, #5
 80029f8:	d00c      	beq.n	8002a14 <HAL_ADC_ConfigChannel+0x1a8>
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	2b06      	cmp	r3, #6
 8002a00:	d008      	beq.n	8002a14 <HAL_ADC_ConfigChannel+0x1a8>
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	2b07      	cmp	r3, #7
 8002a08:	d004      	beq.n	8002a14 <HAL_ADC_ConfigChannel+0x1a8>
 8002a0a:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 8002a0e:	482b      	ldr	r0, [pc, #172]	; (8002abc <HAL_ADC_ConfigChannel+0x250>)
 8002a10:	f7fe fec0 	bl	8001794 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d101      	bne.n	8002a22 <HAL_ADC_ConfigChannel+0x1b6>
 8002a1e:	2302      	movs	r3, #2
 8002a20:	e0e5      	b.n	8002bee <HAL_ADC_ConfigChannel+0x382>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2201      	movs	r2, #1
 8002a26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	2b06      	cmp	r3, #6
 8002a30:	d81c      	bhi.n	8002a6c <HAL_ADC_ConfigChannel+0x200>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	685a      	ldr	r2, [r3, #4]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	4413      	add	r3, r2
 8002a42:	3b05      	subs	r3, #5
 8002a44:	221f      	movs	r2, #31
 8002a46:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4a:	43db      	mvns	r3, r3
 8002a4c:	4019      	ands	r1, r3
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	6818      	ldr	r0, [r3, #0]
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	685a      	ldr	r2, [r3, #4]
 8002a56:	4613      	mov	r3, r2
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	4413      	add	r3, r2
 8002a5c:	3b05      	subs	r3, #5
 8002a5e:	fa00 f203 	lsl.w	r2, r0, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	430a      	orrs	r2, r1
 8002a68:	635a      	str	r2, [r3, #52]	; 0x34
 8002a6a:	e045      	b.n	8002af8 <HAL_ADC_ConfigChannel+0x28c>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	2b0c      	cmp	r3, #12
 8002a72:	d825      	bhi.n	8002ac0 <HAL_ADC_ConfigChannel+0x254>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	685a      	ldr	r2, [r3, #4]
 8002a7e:	4613      	mov	r3, r2
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	4413      	add	r3, r2
 8002a84:	3b23      	subs	r3, #35	; 0x23
 8002a86:	221f      	movs	r2, #31
 8002a88:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8c:	43db      	mvns	r3, r3
 8002a8e:	4019      	ands	r1, r3
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	6818      	ldr	r0, [r3, #0]
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	685a      	ldr	r2, [r3, #4]
 8002a98:	4613      	mov	r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	4413      	add	r3, r2
 8002a9e:	3b23      	subs	r3, #35	; 0x23
 8002aa0:	fa00 f203 	lsl.w	r2, r0, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	430a      	orrs	r2, r1
 8002aaa:	631a      	str	r2, [r3, #48]	; 0x30
 8002aac:	e024      	b.n	8002af8 <HAL_ADC_ConfigChannel+0x28c>
 8002aae:	bf00      	nop
 8002ab0:	40012400 	.word	0x40012400
 8002ab4:	40012800 	.word	0x40012800
 8002ab8:	40013c00 	.word	0x40013c00
 8002abc:	0800c2b8 	.word	0x0800c2b8
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	685a      	ldr	r2, [r3, #4]
 8002aca:	4613      	mov	r3, r2
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	4413      	add	r3, r2
 8002ad0:	3b41      	subs	r3, #65	; 0x41
 8002ad2:	221f      	movs	r2, #31
 8002ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad8:	43db      	mvns	r3, r3
 8002ada:	4019      	ands	r1, r3
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	6818      	ldr	r0, [r3, #0]
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685a      	ldr	r2, [r3, #4]
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	4413      	add	r3, r2
 8002aea:	3b41      	subs	r3, #65	; 0x41
 8002aec:	fa00 f203 	lsl.w	r2, r0, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	430a      	orrs	r2, r1
 8002af6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2b09      	cmp	r3, #9
 8002afe:	d91c      	bls.n	8002b3a <HAL_ADC_ConfigChannel+0x2ce>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	68d9      	ldr	r1, [r3, #12]
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	005b      	lsls	r3, r3, #1
 8002b0e:	4413      	add	r3, r2
 8002b10:	3b1e      	subs	r3, #30
 8002b12:	2207      	movs	r2, #7
 8002b14:	fa02 f303 	lsl.w	r3, r2, r3
 8002b18:	43db      	mvns	r3, r3
 8002b1a:	4019      	ands	r1, r3
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	6898      	ldr	r0, [r3, #8]
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	4613      	mov	r3, r2
 8002b26:	005b      	lsls	r3, r3, #1
 8002b28:	4413      	add	r3, r2
 8002b2a:	3b1e      	subs	r3, #30
 8002b2c:	fa00 f203 	lsl.w	r2, r0, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	430a      	orrs	r2, r1
 8002b36:	60da      	str	r2, [r3, #12]
 8002b38:	e019      	b.n	8002b6e <HAL_ADC_ConfigChannel+0x302>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	6919      	ldr	r1, [r3, #16]
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	4613      	mov	r3, r2
 8002b46:	005b      	lsls	r3, r3, #1
 8002b48:	4413      	add	r3, r2
 8002b4a:	2207      	movs	r2, #7
 8002b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b50:	43db      	mvns	r3, r3
 8002b52:	4019      	ands	r1, r3
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	6898      	ldr	r0, [r3, #8]
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	005b      	lsls	r3, r3, #1
 8002b60:	4413      	add	r3, r2
 8002b62:	fa00 f203 	lsl.w	r2, r0, r3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2b10      	cmp	r3, #16
 8002b74:	d003      	beq.n	8002b7e <HAL_ADC_ConfigChannel+0x312>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002b7a:	2b11      	cmp	r3, #17
 8002b7c:	d132      	bne.n	8002be4 <HAL_ADC_ConfigChannel+0x378>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a1d      	ldr	r2, [pc, #116]	; (8002bf8 <HAL_ADC_ConfigChannel+0x38c>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d125      	bne.n	8002bd4 <HAL_ADC_ConfigChannel+0x368>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d126      	bne.n	8002be4 <HAL_ADC_ConfigChannel+0x378>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	689a      	ldr	r2, [r3, #8]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002ba4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2b10      	cmp	r3, #16
 8002bac:	d11a      	bne.n	8002be4 <HAL_ADC_ConfigChannel+0x378>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002bae:	4b13      	ldr	r3, [pc, #76]	; (8002bfc <HAL_ADC_ConfigChannel+0x390>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a13      	ldr	r2, [pc, #76]	; (8002c00 <HAL_ADC_ConfigChannel+0x394>)
 8002bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb8:	0c9a      	lsrs	r2, r3, #18
 8002bba:	4613      	mov	r3, r2
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	4413      	add	r3, r2
 8002bc0:	005b      	lsls	r3, r3, #1
 8002bc2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002bc4:	e002      	b.n	8002bcc <HAL_ADC_ConfigChannel+0x360>
          {
            wait_loop_index--;
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	3b01      	subs	r3, #1
 8002bca:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d1f9      	bne.n	8002bc6 <HAL_ADC_ConfigChannel+0x35a>
 8002bd2:	e007      	b.n	8002be4 <HAL_ADC_ConfigChannel+0x378>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd8:	f043 0220 	orr.w	r2, r3, #32
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3710      	adds	r7, #16
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	40012400 	.word	0x40012400
 8002bfc:	20000000 	.word	0x20000000
 8002c00:	431bde83 	.word	0x431bde83

08002c04 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002c10:	2300      	movs	r3, #0
 8002c12:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f003 0301 	and.w	r3, r3, #1
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d040      	beq.n	8002ca4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	689a      	ldr	r2, [r3, #8]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f042 0201 	orr.w	r2, r2, #1
 8002c30:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002c32:	4b1f      	ldr	r3, [pc, #124]	; (8002cb0 <ADC_Enable+0xac>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a1f      	ldr	r2, [pc, #124]	; (8002cb4 <ADC_Enable+0xb0>)
 8002c38:	fba2 2303 	umull	r2, r3, r2, r3
 8002c3c:	0c9b      	lsrs	r3, r3, #18
 8002c3e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002c40:	e002      	b.n	8002c48 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	3b01      	subs	r3, #1
 8002c46:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d1f9      	bne.n	8002c42 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002c4e:	f7ff fa51 	bl	80020f4 <HAL_GetTick>
 8002c52:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002c54:	e01f      	b.n	8002c96 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002c56:	f7ff fa4d 	bl	80020f4 <HAL_GetTick>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d918      	bls.n	8002c96 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f003 0301 	and.w	r3, r3, #1
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d011      	beq.n	8002c96 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c76:	f043 0210 	orr.w	r2, r3, #16
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c82:	f043 0201 	orr.w	r2, r3, #1
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e007      	b.n	8002ca6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f003 0301 	and.w	r3, r3, #1
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d1d8      	bne.n	8002c56 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3710      	adds	r7, #16
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	20000000 	.word	0x20000000
 8002cb4:	431bde83 	.word	0x431bde83

08002cb8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b084      	sub	sp, #16
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f003 0301 	and.w	r3, r3, #1
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d12e      	bne.n	8002d30 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	689a      	ldr	r2, [r3, #8]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f022 0201 	bic.w	r2, r2, #1
 8002ce0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002ce2:	f7ff fa07 	bl	80020f4 <HAL_GetTick>
 8002ce6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002ce8:	e01b      	b.n	8002d22 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002cea:	f7ff fa03 	bl	80020f4 <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d914      	bls.n	8002d22 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	f003 0301 	and.w	r3, r3, #1
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d10d      	bne.n	8002d22 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d0a:	f043 0210 	orr.w	r2, r3, #16
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d16:	f043 0201 	orr.w	r2, r3, #1
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e007      	b.n	8002d32 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	f003 0301 	and.w	r3, r3, #1
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d0dc      	beq.n	8002cea <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002d30:	2300      	movs	r3, #0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3710      	adds	r7, #16
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
	...

08002d3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b085      	sub	sp, #20
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f003 0307 	and.w	r3, r3, #7
 8002d4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d4c:	4b0c      	ldr	r3, [pc, #48]	; (8002d80 <__NVIC_SetPriorityGrouping+0x44>)
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d52:	68ba      	ldr	r2, [r7, #8]
 8002d54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d58:	4013      	ands	r3, r2
 8002d5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d6e:	4a04      	ldr	r2, [pc, #16]	; (8002d80 <__NVIC_SetPriorityGrouping+0x44>)
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	60d3      	str	r3, [r2, #12]
}
 8002d74:	bf00      	nop
 8002d76:	3714      	adds	r7, #20
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bc80      	pop	{r7}
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	e000ed00 	.word	0xe000ed00

08002d84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d84:	b480      	push	{r7}
 8002d86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d88:	4b04      	ldr	r3, [pc, #16]	; (8002d9c <__NVIC_GetPriorityGrouping+0x18>)
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	0a1b      	lsrs	r3, r3, #8
 8002d8e:	f003 0307 	and.w	r3, r3, #7
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bc80      	pop	{r7}
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	e000ed00 	.word	0xe000ed00

08002da0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	4603      	mov	r3, r0
 8002da8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	db0b      	blt.n	8002dca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002db2:	79fb      	ldrb	r3, [r7, #7]
 8002db4:	f003 021f 	and.w	r2, r3, #31
 8002db8:	4906      	ldr	r1, [pc, #24]	; (8002dd4 <__NVIC_EnableIRQ+0x34>)
 8002dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dbe:	095b      	lsrs	r3, r3, #5
 8002dc0:	2001      	movs	r0, #1
 8002dc2:	fa00 f202 	lsl.w	r2, r0, r2
 8002dc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002dca:	bf00      	nop
 8002dcc:	370c      	adds	r7, #12
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bc80      	pop	{r7}
 8002dd2:	4770      	bx	lr
 8002dd4:	e000e100 	.word	0xe000e100

08002dd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	4603      	mov	r3, r0
 8002de0:	6039      	str	r1, [r7, #0]
 8002de2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002de4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	db0a      	blt.n	8002e02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	b2da      	uxtb	r2, r3
 8002df0:	490c      	ldr	r1, [pc, #48]	; (8002e24 <__NVIC_SetPriority+0x4c>)
 8002df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002df6:	0112      	lsls	r2, r2, #4
 8002df8:	b2d2      	uxtb	r2, r2
 8002dfa:	440b      	add	r3, r1
 8002dfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e00:	e00a      	b.n	8002e18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	b2da      	uxtb	r2, r3
 8002e06:	4908      	ldr	r1, [pc, #32]	; (8002e28 <__NVIC_SetPriority+0x50>)
 8002e08:	79fb      	ldrb	r3, [r7, #7]
 8002e0a:	f003 030f 	and.w	r3, r3, #15
 8002e0e:	3b04      	subs	r3, #4
 8002e10:	0112      	lsls	r2, r2, #4
 8002e12:	b2d2      	uxtb	r2, r2
 8002e14:	440b      	add	r3, r1
 8002e16:	761a      	strb	r2, [r3, #24]
}
 8002e18:	bf00      	nop
 8002e1a:	370c      	adds	r7, #12
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bc80      	pop	{r7}
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	e000e100 	.word	0xe000e100
 8002e28:	e000ed00 	.word	0xe000ed00

08002e2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b089      	sub	sp, #36	; 0x24
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	60b9      	str	r1, [r7, #8]
 8002e36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f003 0307 	and.w	r3, r3, #7
 8002e3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	f1c3 0307 	rsb	r3, r3, #7
 8002e46:	2b04      	cmp	r3, #4
 8002e48:	bf28      	it	cs
 8002e4a:	2304      	movcs	r3, #4
 8002e4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	3304      	adds	r3, #4
 8002e52:	2b06      	cmp	r3, #6
 8002e54:	d902      	bls.n	8002e5c <NVIC_EncodePriority+0x30>
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	3b03      	subs	r3, #3
 8002e5a:	e000      	b.n	8002e5e <NVIC_EncodePriority+0x32>
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e60:	f04f 32ff 	mov.w	r2, #4294967295
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6a:	43da      	mvns	r2, r3
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	401a      	ands	r2, r3
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e74:	f04f 31ff 	mov.w	r1, #4294967295
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e7e:	43d9      	mvns	r1, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e84:	4313      	orrs	r3, r2
         );
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3724      	adds	r7, #36	; 0x24
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bc80      	pop	{r7}
 8002e8e:	4770      	bx	lr

08002e90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	3b01      	subs	r3, #1
 8002e9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ea0:	d301      	bcc.n	8002ea6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e00f      	b.n	8002ec6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ea6:	4a0a      	ldr	r2, [pc, #40]	; (8002ed0 <SysTick_Config+0x40>)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	3b01      	subs	r3, #1
 8002eac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002eae:	210f      	movs	r1, #15
 8002eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8002eb4:	f7ff ff90 	bl	8002dd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002eb8:	4b05      	ldr	r3, [pc, #20]	; (8002ed0 <SysTick_Config+0x40>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ebe:	4b04      	ldr	r3, [pc, #16]	; (8002ed0 <SysTick_Config+0x40>)
 8002ec0:	2207      	movs	r2, #7
 8002ec2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ec4:	2300      	movs	r3, #0
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3708      	adds	r7, #8
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	e000e010 	.word	0xe000e010

08002ed4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2b07      	cmp	r3, #7
 8002ee0:	d00f      	beq.n	8002f02 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2b06      	cmp	r3, #6
 8002ee6:	d00c      	beq.n	8002f02 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2b05      	cmp	r3, #5
 8002eec:	d009      	beq.n	8002f02 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2b04      	cmp	r3, #4
 8002ef2:	d006      	beq.n	8002f02 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2b03      	cmp	r3, #3
 8002ef8:	d003      	beq.n	8002f02 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002efa:	2192      	movs	r1, #146	; 0x92
 8002efc:	4804      	ldr	r0, [pc, #16]	; (8002f10 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8002efe:	f7fe fc49 	bl	8001794 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f7ff ff1a 	bl	8002d3c <__NVIC_SetPriorityGrouping>
}
 8002f08:	bf00      	nop
 8002f0a:	3708      	adds	r7, #8
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	0800c2f0 	.word	0x0800c2f0

08002f14 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b086      	sub	sp, #24
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	607a      	str	r2, [r7, #4]
 8002f20:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f22:	2300      	movs	r3, #0
 8002f24:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2b0f      	cmp	r3, #15
 8002f2a:	d903      	bls.n	8002f34 <HAL_NVIC_SetPriority+0x20>
 8002f2c:	21aa      	movs	r1, #170	; 0xaa
 8002f2e:	480e      	ldr	r0, [pc, #56]	; (8002f68 <HAL_NVIC_SetPriority+0x54>)
 8002f30:	f7fe fc30 	bl	8001794 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	2b0f      	cmp	r3, #15
 8002f38:	d903      	bls.n	8002f42 <HAL_NVIC_SetPriority+0x2e>
 8002f3a:	21ab      	movs	r1, #171	; 0xab
 8002f3c:	480a      	ldr	r0, [pc, #40]	; (8002f68 <HAL_NVIC_SetPriority+0x54>)
 8002f3e:	f7fe fc29 	bl	8001794 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f42:	f7ff ff1f 	bl	8002d84 <__NVIC_GetPriorityGrouping>
 8002f46:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	68b9      	ldr	r1, [r7, #8]
 8002f4c:	6978      	ldr	r0, [r7, #20]
 8002f4e:	f7ff ff6d 	bl	8002e2c <NVIC_EncodePriority>
 8002f52:	4602      	mov	r2, r0
 8002f54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f58:	4611      	mov	r1, r2
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7ff ff3c 	bl	8002dd8 <__NVIC_SetPriority>
}
 8002f60:	bf00      	nop
 8002f62:	3718      	adds	r7, #24
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	0800c2f0 	.word	0x0800c2f0

08002f6c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	4603      	mov	r3, r0
 8002f74:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	da03      	bge.n	8002f86 <HAL_NVIC_EnableIRQ+0x1a>
 8002f7e:	21be      	movs	r1, #190	; 0xbe
 8002f80:	4805      	ldr	r0, [pc, #20]	; (8002f98 <HAL_NVIC_EnableIRQ+0x2c>)
 8002f82:	f7fe fc07 	bl	8001794 <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7ff ff08 	bl	8002da0 <__NVIC_EnableIRQ>
}
 8002f90:	bf00      	nop
 8002f92:	3708      	adds	r7, #8
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	0800c2f0 	.word	0x0800c2f0

08002f9c <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b082      	sub	sp, #8
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f7ff ff73 	bl	8002e90 <SysTick_Config>
 8002faa:	4603      	mov	r3, r0
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3708      	adds	r7, #8
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b085      	sub	sp, #20
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d008      	beq.n	8002fdc <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2204      	movs	r2, #4
 8002fce:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e020      	b.n	800301e <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f022 020e 	bic.w	r2, r2, #14
 8002fea:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f022 0201 	bic.w	r2, r2, #1
 8002ffa:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003004:	2101      	movs	r1, #1
 8003006:	fa01 f202 	lsl.w	r2, r1, r2
 800300a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800301c:	7bfb      	ldrb	r3, [r7, #15]
}
 800301e:	4618      	mov	r0, r3
 8003020:	3714      	adds	r7, #20
 8003022:	46bd      	mov	sp, r7
 8003024:	bc80      	pop	{r7}
 8003026:	4770      	bx	lr

08003028 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003030:	2300      	movs	r3, #0
 8003032:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800303a:	2b02      	cmp	r3, #2
 800303c:	d005      	beq.n	800304a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2204      	movs	r2, #4
 8003042:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	73fb      	strb	r3, [r7, #15]
 8003048:	e0d6      	b.n	80031f8 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f022 020e 	bic.w	r2, r2, #14
 8003058:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f022 0201 	bic.w	r2, r2, #1
 8003068:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	461a      	mov	r2, r3
 8003070:	4b64      	ldr	r3, [pc, #400]	; (8003204 <HAL_DMA_Abort_IT+0x1dc>)
 8003072:	429a      	cmp	r2, r3
 8003074:	d958      	bls.n	8003128 <HAL_DMA_Abort_IT+0x100>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a63      	ldr	r2, [pc, #396]	; (8003208 <HAL_DMA_Abort_IT+0x1e0>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d04f      	beq.n	8003120 <HAL_DMA_Abort_IT+0xf8>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a61      	ldr	r2, [pc, #388]	; (800320c <HAL_DMA_Abort_IT+0x1e4>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d048      	beq.n	800311c <HAL_DMA_Abort_IT+0xf4>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a60      	ldr	r2, [pc, #384]	; (8003210 <HAL_DMA_Abort_IT+0x1e8>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d040      	beq.n	8003116 <HAL_DMA_Abort_IT+0xee>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a5e      	ldr	r2, [pc, #376]	; (8003214 <HAL_DMA_Abort_IT+0x1ec>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d038      	beq.n	8003110 <HAL_DMA_Abort_IT+0xe8>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a5d      	ldr	r2, [pc, #372]	; (8003218 <HAL_DMA_Abort_IT+0x1f0>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d030      	beq.n	800310a <HAL_DMA_Abort_IT+0xe2>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a5b      	ldr	r2, [pc, #364]	; (800321c <HAL_DMA_Abort_IT+0x1f4>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d028      	beq.n	8003104 <HAL_DMA_Abort_IT+0xdc>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a53      	ldr	r2, [pc, #332]	; (8003204 <HAL_DMA_Abort_IT+0x1dc>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d020      	beq.n	80030fe <HAL_DMA_Abort_IT+0xd6>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a57      	ldr	r2, [pc, #348]	; (8003220 <HAL_DMA_Abort_IT+0x1f8>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d019      	beq.n	80030fa <HAL_DMA_Abort_IT+0xd2>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a56      	ldr	r2, [pc, #344]	; (8003224 <HAL_DMA_Abort_IT+0x1fc>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d012      	beq.n	80030f6 <HAL_DMA_Abort_IT+0xce>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a54      	ldr	r2, [pc, #336]	; (8003228 <HAL_DMA_Abort_IT+0x200>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d00a      	beq.n	80030f0 <HAL_DMA_Abort_IT+0xc8>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a53      	ldr	r2, [pc, #332]	; (800322c <HAL_DMA_Abort_IT+0x204>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d102      	bne.n	80030ea <HAL_DMA_Abort_IT+0xc2>
 80030e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030e8:	e01b      	b.n	8003122 <HAL_DMA_Abort_IT+0xfa>
 80030ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030ee:	e018      	b.n	8003122 <HAL_DMA_Abort_IT+0xfa>
 80030f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030f4:	e015      	b.n	8003122 <HAL_DMA_Abort_IT+0xfa>
 80030f6:	2310      	movs	r3, #16
 80030f8:	e013      	b.n	8003122 <HAL_DMA_Abort_IT+0xfa>
 80030fa:	2301      	movs	r3, #1
 80030fc:	e011      	b.n	8003122 <HAL_DMA_Abort_IT+0xfa>
 80030fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003102:	e00e      	b.n	8003122 <HAL_DMA_Abort_IT+0xfa>
 8003104:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003108:	e00b      	b.n	8003122 <HAL_DMA_Abort_IT+0xfa>
 800310a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800310e:	e008      	b.n	8003122 <HAL_DMA_Abort_IT+0xfa>
 8003110:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003114:	e005      	b.n	8003122 <HAL_DMA_Abort_IT+0xfa>
 8003116:	f44f 7380 	mov.w	r3, #256	; 0x100
 800311a:	e002      	b.n	8003122 <HAL_DMA_Abort_IT+0xfa>
 800311c:	2310      	movs	r3, #16
 800311e:	e000      	b.n	8003122 <HAL_DMA_Abort_IT+0xfa>
 8003120:	2301      	movs	r3, #1
 8003122:	4a43      	ldr	r2, [pc, #268]	; (8003230 <HAL_DMA_Abort_IT+0x208>)
 8003124:	6053      	str	r3, [r2, #4]
 8003126:	e057      	b.n	80031d8 <HAL_DMA_Abort_IT+0x1b0>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a36      	ldr	r2, [pc, #216]	; (8003208 <HAL_DMA_Abort_IT+0x1e0>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d04f      	beq.n	80031d2 <HAL_DMA_Abort_IT+0x1aa>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a35      	ldr	r2, [pc, #212]	; (800320c <HAL_DMA_Abort_IT+0x1e4>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d048      	beq.n	80031ce <HAL_DMA_Abort_IT+0x1a6>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a33      	ldr	r2, [pc, #204]	; (8003210 <HAL_DMA_Abort_IT+0x1e8>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d040      	beq.n	80031c8 <HAL_DMA_Abort_IT+0x1a0>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a32      	ldr	r2, [pc, #200]	; (8003214 <HAL_DMA_Abort_IT+0x1ec>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d038      	beq.n	80031c2 <HAL_DMA_Abort_IT+0x19a>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a30      	ldr	r2, [pc, #192]	; (8003218 <HAL_DMA_Abort_IT+0x1f0>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d030      	beq.n	80031bc <HAL_DMA_Abort_IT+0x194>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a2f      	ldr	r2, [pc, #188]	; (800321c <HAL_DMA_Abort_IT+0x1f4>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d028      	beq.n	80031b6 <HAL_DMA_Abort_IT+0x18e>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a26      	ldr	r2, [pc, #152]	; (8003204 <HAL_DMA_Abort_IT+0x1dc>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d020      	beq.n	80031b0 <HAL_DMA_Abort_IT+0x188>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a2b      	ldr	r2, [pc, #172]	; (8003220 <HAL_DMA_Abort_IT+0x1f8>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d019      	beq.n	80031ac <HAL_DMA_Abort_IT+0x184>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a29      	ldr	r2, [pc, #164]	; (8003224 <HAL_DMA_Abort_IT+0x1fc>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d012      	beq.n	80031a8 <HAL_DMA_Abort_IT+0x180>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a28      	ldr	r2, [pc, #160]	; (8003228 <HAL_DMA_Abort_IT+0x200>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d00a      	beq.n	80031a2 <HAL_DMA_Abort_IT+0x17a>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a26      	ldr	r2, [pc, #152]	; (800322c <HAL_DMA_Abort_IT+0x204>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d102      	bne.n	800319c <HAL_DMA_Abort_IT+0x174>
 8003196:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800319a:	e01b      	b.n	80031d4 <HAL_DMA_Abort_IT+0x1ac>
 800319c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80031a0:	e018      	b.n	80031d4 <HAL_DMA_Abort_IT+0x1ac>
 80031a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031a6:	e015      	b.n	80031d4 <HAL_DMA_Abort_IT+0x1ac>
 80031a8:	2310      	movs	r3, #16
 80031aa:	e013      	b.n	80031d4 <HAL_DMA_Abort_IT+0x1ac>
 80031ac:	2301      	movs	r3, #1
 80031ae:	e011      	b.n	80031d4 <HAL_DMA_Abort_IT+0x1ac>
 80031b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80031b4:	e00e      	b.n	80031d4 <HAL_DMA_Abort_IT+0x1ac>
 80031b6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80031ba:	e00b      	b.n	80031d4 <HAL_DMA_Abort_IT+0x1ac>
 80031bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80031c0:	e008      	b.n	80031d4 <HAL_DMA_Abort_IT+0x1ac>
 80031c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031c6:	e005      	b.n	80031d4 <HAL_DMA_Abort_IT+0x1ac>
 80031c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031cc:	e002      	b.n	80031d4 <HAL_DMA_Abort_IT+0x1ac>
 80031ce:	2310      	movs	r3, #16
 80031d0:	e000      	b.n	80031d4 <HAL_DMA_Abort_IT+0x1ac>
 80031d2:	2301      	movs	r3, #1
 80031d4:	4a17      	ldr	r2, [pc, #92]	; (8003234 <HAL_DMA_Abort_IT+0x20c>)
 80031d6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d003      	beq.n	80031f8 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	4798      	blx	r3
    } 
  }
  return status;
 80031f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3710      	adds	r7, #16
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	40020080 	.word	0x40020080
 8003208:	40020008 	.word	0x40020008
 800320c:	4002001c 	.word	0x4002001c
 8003210:	40020030 	.word	0x40020030
 8003214:	40020044 	.word	0x40020044
 8003218:	40020058 	.word	0x40020058
 800321c:	4002006c 	.word	0x4002006c
 8003220:	40020408 	.word	0x40020408
 8003224:	4002041c 	.word	0x4002041c
 8003228:	40020430 	.word	0x40020430
 800322c:	40020444 	.word	0x40020444
 8003230:	40020400 	.word	0x40020400
 8003234:	40020000 	.word	0x40020000

08003238 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b08a      	sub	sp, #40	; 0x28
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003242:	2300      	movs	r3, #0
 8003244:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003246:	2300      	movs	r3, #0
 8003248:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4aa9      	ldr	r2, [pc, #676]	; (80034f4 <HAL_GPIO_Init+0x2bc>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d01b      	beq.n	800328a <HAL_GPIO_Init+0x52>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4aa8      	ldr	r2, [pc, #672]	; (80034f8 <HAL_GPIO_Init+0x2c0>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d017      	beq.n	800328a <HAL_GPIO_Init+0x52>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4aa7      	ldr	r2, [pc, #668]	; (80034fc <HAL_GPIO_Init+0x2c4>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d013      	beq.n	800328a <HAL_GPIO_Init+0x52>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4aa6      	ldr	r2, [pc, #664]	; (8003500 <HAL_GPIO_Init+0x2c8>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d00f      	beq.n	800328a <HAL_GPIO_Init+0x52>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4aa5      	ldr	r2, [pc, #660]	; (8003504 <HAL_GPIO_Init+0x2cc>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d00b      	beq.n	800328a <HAL_GPIO_Init+0x52>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4aa4      	ldr	r2, [pc, #656]	; (8003508 <HAL_GPIO_Init+0x2d0>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d007      	beq.n	800328a <HAL_GPIO_Init+0x52>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4aa3      	ldr	r2, [pc, #652]	; (800350c <HAL_GPIO_Init+0x2d4>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d003      	beq.n	800328a <HAL_GPIO_Init+0x52>
 8003282:	21bd      	movs	r1, #189	; 0xbd
 8003284:	48a2      	ldr	r0, [pc, #648]	; (8003510 <HAL_GPIO_Init+0x2d8>)
 8003286:	f7fe fa85 	bl	8001794 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	b29b      	uxth	r3, r3
 8003290:	2b00      	cmp	r3, #0
 8003292:	d005      	beq.n	80032a0 <HAL_GPIO_Init+0x68>
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	0c1b      	lsrs	r3, r3, #16
 800329a:	041b      	lsls	r3, r3, #16
 800329c:	2b00      	cmp	r3, #0
 800329e:	d003      	beq.n	80032a8 <HAL_GPIO_Init+0x70>
 80032a0:	21be      	movs	r1, #190	; 0xbe
 80032a2:	489b      	ldr	r0, [pc, #620]	; (8003510 <HAL_GPIO_Init+0x2d8>)
 80032a4:	f7fe fa76 	bl	8001794 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	f000 8235 	beq.w	800371c <HAL_GPIO_Init+0x4e4>
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	f000 8230 	beq.w	800371c <HAL_GPIO_Init+0x4e4>
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	2b11      	cmp	r3, #17
 80032c2:	f000 822b 	beq.w	800371c <HAL_GPIO_Init+0x4e4>
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	f000 8226 	beq.w	800371c <HAL_GPIO_Init+0x4e4>
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	2b12      	cmp	r3, #18
 80032d6:	f000 8221 	beq.w	800371c <HAL_GPIO_Init+0x4e4>
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	4a8d      	ldr	r2, [pc, #564]	; (8003514 <HAL_GPIO_Init+0x2dc>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	f000 821b 	beq.w	800371c <HAL_GPIO_Init+0x4e4>
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	4a8b      	ldr	r2, [pc, #556]	; (8003518 <HAL_GPIO_Init+0x2e0>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	f000 8215 	beq.w	800371c <HAL_GPIO_Init+0x4e4>
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	4a89      	ldr	r2, [pc, #548]	; (800351c <HAL_GPIO_Init+0x2e4>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	f000 820f 	beq.w	800371c <HAL_GPIO_Init+0x4e4>
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	4a87      	ldr	r2, [pc, #540]	; (8003520 <HAL_GPIO_Init+0x2e8>)
 8003304:	4293      	cmp	r3, r2
 8003306:	f000 8209 	beq.w	800371c <HAL_GPIO_Init+0x4e4>
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	4a85      	ldr	r2, [pc, #532]	; (8003524 <HAL_GPIO_Init+0x2ec>)
 8003310:	4293      	cmp	r3, r2
 8003312:	f000 8203 	beq.w	800371c <HAL_GPIO_Init+0x4e4>
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	4a83      	ldr	r2, [pc, #524]	; (8003528 <HAL_GPIO_Init+0x2f0>)
 800331c:	4293      	cmp	r3, r2
 800331e:	f000 81fd 	beq.w	800371c <HAL_GPIO_Init+0x4e4>
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	2b03      	cmp	r3, #3
 8003328:	f000 81f8 	beq.w	800371c <HAL_GPIO_Init+0x4e4>
 800332c:	21bf      	movs	r1, #191	; 0xbf
 800332e:	4878      	ldr	r0, [pc, #480]	; (8003510 <HAL_GPIO_Init+0x2d8>)
 8003330:	f7fe fa30 	bl	8001794 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003334:	e1f2      	b.n	800371c <HAL_GPIO_Init+0x4e4>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003336:	2201      	movs	r2, #1
 8003338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333a:	fa02 f303 	lsl.w	r3, r2, r3
 800333e:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	69fa      	ldr	r2, [r7, #28]
 8003346:	4013      	ands	r3, r2
 8003348:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800334a:	69ba      	ldr	r2, [r7, #24]
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	429a      	cmp	r2, r3
 8003350:	f040 81e1 	bne.w	8003716 <HAL_GPIO_Init+0x4de>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	4a67      	ldr	r2, [pc, #412]	; (80034f4 <HAL_GPIO_Init+0x2bc>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d01b      	beq.n	8003394 <HAL_GPIO_Init+0x15c>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4a66      	ldr	r2, [pc, #408]	; (80034f8 <HAL_GPIO_Init+0x2c0>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d017      	beq.n	8003394 <HAL_GPIO_Init+0x15c>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	4a65      	ldr	r2, [pc, #404]	; (80034fc <HAL_GPIO_Init+0x2c4>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d013      	beq.n	8003394 <HAL_GPIO_Init+0x15c>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	4a64      	ldr	r2, [pc, #400]	; (8003500 <HAL_GPIO_Init+0x2c8>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d00f      	beq.n	8003394 <HAL_GPIO_Init+0x15c>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	4a63      	ldr	r2, [pc, #396]	; (8003504 <HAL_GPIO_Init+0x2cc>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d00b      	beq.n	8003394 <HAL_GPIO_Init+0x15c>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	4a62      	ldr	r2, [pc, #392]	; (8003508 <HAL_GPIO_Init+0x2d0>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d007      	beq.n	8003394 <HAL_GPIO_Init+0x15c>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	4a61      	ldr	r2, [pc, #388]	; (800350c <HAL_GPIO_Init+0x2d4>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d003      	beq.n	8003394 <HAL_GPIO_Init+0x15c>
 800338c:	21cd      	movs	r1, #205	; 0xcd
 800338e:	4860      	ldr	r0, [pc, #384]	; (8003510 <HAL_GPIO_Init+0x2d8>)
 8003390:	f7fe fa00 	bl	8001794 <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	4a63      	ldr	r2, [pc, #396]	; (8003528 <HAL_GPIO_Init+0x2f0>)
 800339a:	4293      	cmp	r3, r2
 800339c:	f000 80c6 	beq.w	800352c <HAL_GPIO_Init+0x2f4>
 80033a0:	4a61      	ldr	r2, [pc, #388]	; (8003528 <HAL_GPIO_Init+0x2f0>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	f200 80ec 	bhi.w	8003580 <HAL_GPIO_Init+0x348>
 80033a8:	4a5c      	ldr	r2, [pc, #368]	; (800351c <HAL_GPIO_Init+0x2e4>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	f000 80be 	beq.w	800352c <HAL_GPIO_Init+0x2f4>
 80033b0:	4a5a      	ldr	r2, [pc, #360]	; (800351c <HAL_GPIO_Init+0x2e4>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	f200 80e4 	bhi.w	8003580 <HAL_GPIO_Init+0x348>
 80033b8:	4a5a      	ldr	r2, [pc, #360]	; (8003524 <HAL_GPIO_Init+0x2ec>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	f000 80b6 	beq.w	800352c <HAL_GPIO_Init+0x2f4>
 80033c0:	4a58      	ldr	r2, [pc, #352]	; (8003524 <HAL_GPIO_Init+0x2ec>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	f200 80dc 	bhi.w	8003580 <HAL_GPIO_Init+0x348>
 80033c8:	4a53      	ldr	r2, [pc, #332]	; (8003518 <HAL_GPIO_Init+0x2e0>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	f000 80ae 	beq.w	800352c <HAL_GPIO_Init+0x2f4>
 80033d0:	4a51      	ldr	r2, [pc, #324]	; (8003518 <HAL_GPIO_Init+0x2e0>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	f200 80d4 	bhi.w	8003580 <HAL_GPIO_Init+0x348>
 80033d8:	4a51      	ldr	r2, [pc, #324]	; (8003520 <HAL_GPIO_Init+0x2e8>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	f000 80a6 	beq.w	800352c <HAL_GPIO_Init+0x2f4>
 80033e0:	4a4f      	ldr	r2, [pc, #316]	; (8003520 <HAL_GPIO_Init+0x2e8>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	f200 80cc 	bhi.w	8003580 <HAL_GPIO_Init+0x348>
 80033e8:	2b12      	cmp	r3, #18
 80033ea:	d82b      	bhi.n	8003444 <HAL_GPIO_Init+0x20c>
 80033ec:	2b12      	cmp	r3, #18
 80033ee:	f200 80c7 	bhi.w	8003580 <HAL_GPIO_Init+0x348>
 80033f2:	a201      	add	r2, pc, #4	; (adr r2, 80033f8 <HAL_GPIO_Init+0x1c0>)
 80033f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033f8:	0800352d 	.word	0x0800352d
 80033fc:	0800344d 	.word	0x0800344d
 8003400:	0800349f 	.word	0x0800349f
 8003404:	0800357b 	.word	0x0800357b
 8003408:	08003581 	.word	0x08003581
 800340c:	08003581 	.word	0x08003581
 8003410:	08003581 	.word	0x08003581
 8003414:	08003581 	.word	0x08003581
 8003418:	08003581 	.word	0x08003581
 800341c:	08003581 	.word	0x08003581
 8003420:	08003581 	.word	0x08003581
 8003424:	08003581 	.word	0x08003581
 8003428:	08003581 	.word	0x08003581
 800342c:	08003581 	.word	0x08003581
 8003430:	08003581 	.word	0x08003581
 8003434:	08003581 	.word	0x08003581
 8003438:	08003581 	.word	0x08003581
 800343c:	08003475 	.word	0x08003475
 8003440:	080034c9 	.word	0x080034c9
 8003444:	4a33      	ldr	r2, [pc, #204]	; (8003514 <HAL_GPIO_Init+0x2dc>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d070      	beq.n	800352c <HAL_GPIO_Init+0x2f4>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800344a:	e099      	b.n	8003580 <HAL_GPIO_Init+0x348>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	2b02      	cmp	r3, #2
 8003452:	d00b      	beq.n	800346c <HAL_GPIO_Init+0x234>
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	2b01      	cmp	r3, #1
 800345a:	d007      	beq.n	800346c <HAL_GPIO_Init+0x234>
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	2b03      	cmp	r3, #3
 8003462:	d003      	beq.n	800346c <HAL_GPIO_Init+0x234>
 8003464:	21d5      	movs	r1, #213	; 0xd5
 8003466:	482a      	ldr	r0, [pc, #168]	; (8003510 <HAL_GPIO_Init+0x2d8>)
 8003468:	f7fe f994 	bl	8001794 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	623b      	str	r3, [r7, #32]
          break;
 8003472:	e086      	b.n	8003582 <HAL_GPIO_Init+0x34a>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	2b02      	cmp	r3, #2
 800347a:	d00b      	beq.n	8003494 <HAL_GPIO_Init+0x25c>
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	2b01      	cmp	r3, #1
 8003482:	d007      	beq.n	8003494 <HAL_GPIO_Init+0x25c>
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	2b03      	cmp	r3, #3
 800348a:	d003      	beq.n	8003494 <HAL_GPIO_Init+0x25c>
 800348c:	21dc      	movs	r1, #220	; 0xdc
 800348e:	4820      	ldr	r0, [pc, #128]	; (8003510 <HAL_GPIO_Init+0x2d8>)
 8003490:	f7fe f980 	bl	8001794 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	3304      	adds	r3, #4
 800349a:	623b      	str	r3, [r7, #32]
          break;
 800349c:	e071      	b.n	8003582 <HAL_GPIO_Init+0x34a>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d00b      	beq.n	80034be <HAL_GPIO_Init+0x286>
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d007      	beq.n	80034be <HAL_GPIO_Init+0x286>
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	2b03      	cmp	r3, #3
 80034b4:	d003      	beq.n	80034be <HAL_GPIO_Init+0x286>
 80034b6:	21e3      	movs	r1, #227	; 0xe3
 80034b8:	4815      	ldr	r0, [pc, #84]	; (8003510 <HAL_GPIO_Init+0x2d8>)
 80034ba:	f7fe f96b 	bl	8001794 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	3308      	adds	r3, #8
 80034c4:	623b      	str	r3, [r7, #32]
          break;
 80034c6:	e05c      	b.n	8003582 <HAL_GPIO_Init+0x34a>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	d00b      	beq.n	80034e8 <HAL_GPIO_Init+0x2b0>
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d007      	beq.n	80034e8 <HAL_GPIO_Init+0x2b0>
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	2b03      	cmp	r3, #3
 80034de:	d003      	beq.n	80034e8 <HAL_GPIO_Init+0x2b0>
 80034e0:	21ea      	movs	r1, #234	; 0xea
 80034e2:	480b      	ldr	r0, [pc, #44]	; (8003510 <HAL_GPIO_Init+0x2d8>)
 80034e4:	f7fe f956 	bl	8001794 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	330c      	adds	r3, #12
 80034ee:	623b      	str	r3, [r7, #32]
          break;
 80034f0:	e047      	b.n	8003582 <HAL_GPIO_Init+0x34a>
 80034f2:	bf00      	nop
 80034f4:	40010800 	.word	0x40010800
 80034f8:	40010c00 	.word	0x40010c00
 80034fc:	40011000 	.word	0x40011000
 8003500:	40011400 	.word	0x40011400
 8003504:	40011800 	.word	0x40011800
 8003508:	40011c00 	.word	0x40011c00
 800350c:	40012000 	.word	0x40012000
 8003510:	0800c32c 	.word	0x0800c32c
 8003514:	10110000 	.word	0x10110000
 8003518:	10210000 	.word	0x10210000
 800351c:	10310000 	.word	0x10310000
 8003520:	10120000 	.word	0x10120000
 8003524:	10220000 	.word	0x10220000
 8003528:	10320000 	.word	0x10320000
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d00b      	beq.n	800354c <HAL_GPIO_Init+0x314>
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	2b01      	cmp	r3, #1
 800353a:	d007      	beq.n	800354c <HAL_GPIO_Init+0x314>
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	2b02      	cmp	r3, #2
 8003542:	d003      	beq.n	800354c <HAL_GPIO_Init+0x314>
 8003544:	21f7      	movs	r1, #247	; 0xf7
 8003546:	487c      	ldr	r0, [pc, #496]	; (8003738 <HAL_GPIO_Init+0x500>)
 8003548:	f7fe f924 	bl	8001794 <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d102      	bne.n	800355a <HAL_GPIO_Init+0x322>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003554:	2304      	movs	r3, #4
 8003556:	623b      	str	r3, [r7, #32]
          break;
 8003558:	e013      	b.n	8003582 <HAL_GPIO_Init+0x34a>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	2b01      	cmp	r3, #1
 8003560:	d105      	bne.n	800356e <HAL_GPIO_Init+0x336>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003562:	2308      	movs	r3, #8
 8003564:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	69fa      	ldr	r2, [r7, #28]
 800356a:	611a      	str	r2, [r3, #16]
          break;
 800356c:	e009      	b.n	8003582 <HAL_GPIO_Init+0x34a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800356e:	2308      	movs	r3, #8
 8003570:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	69fa      	ldr	r2, [r7, #28]
 8003576:	615a      	str	r2, [r3, #20]
          break;
 8003578:	e003      	b.n	8003582 <HAL_GPIO_Init+0x34a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800357a:	2300      	movs	r3, #0
 800357c:	623b      	str	r3, [r7, #32]
          break;
 800357e:	e000      	b.n	8003582 <HAL_GPIO_Init+0x34a>
          break;
 8003580:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	2bff      	cmp	r3, #255	; 0xff
 8003586:	d801      	bhi.n	800358c <HAL_GPIO_Init+0x354>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	e001      	b.n	8003590 <HAL_GPIO_Init+0x358>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	3304      	adds	r3, #4
 8003590:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003592:	69bb      	ldr	r3, [r7, #24]
 8003594:	2bff      	cmp	r3, #255	; 0xff
 8003596:	d802      	bhi.n	800359e <HAL_GPIO_Init+0x366>
 8003598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	e002      	b.n	80035a4 <HAL_GPIO_Init+0x36c>
 800359e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a0:	3b08      	subs	r3, #8
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	210f      	movs	r1, #15
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	fa01 f303 	lsl.w	r3, r1, r3
 80035b2:	43db      	mvns	r3, r3
 80035b4:	401a      	ands	r2, r3
 80035b6:	6a39      	ldr	r1, [r7, #32]
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	fa01 f303 	lsl.w	r3, r1, r3
 80035be:	431a      	orrs	r2, r3
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	f000 80a2 	beq.w	8003716 <HAL_GPIO_Init+0x4de>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80035d2:	4b5a      	ldr	r3, [pc, #360]	; (800373c <HAL_GPIO_Init+0x504>)
 80035d4:	699b      	ldr	r3, [r3, #24]
 80035d6:	4a59      	ldr	r2, [pc, #356]	; (800373c <HAL_GPIO_Init+0x504>)
 80035d8:	f043 0301 	orr.w	r3, r3, #1
 80035dc:	6193      	str	r3, [r2, #24]
 80035de:	4b57      	ldr	r3, [pc, #348]	; (800373c <HAL_GPIO_Init+0x504>)
 80035e0:	699b      	ldr	r3, [r3, #24]
 80035e2:	f003 0301 	and.w	r3, r3, #1
 80035e6:	60bb      	str	r3, [r7, #8]
 80035e8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80035ea:	4a55      	ldr	r2, [pc, #340]	; (8003740 <HAL_GPIO_Init+0x508>)
 80035ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ee:	089b      	lsrs	r3, r3, #2
 80035f0:	3302      	adds	r3, #2
 80035f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035f6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80035f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fa:	f003 0303 	and.w	r3, r3, #3
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	220f      	movs	r2, #15
 8003602:	fa02 f303 	lsl.w	r3, r2, r3
 8003606:	43db      	mvns	r3, r3
 8003608:	68fa      	ldr	r2, [r7, #12]
 800360a:	4013      	ands	r3, r2
 800360c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a4c      	ldr	r2, [pc, #304]	; (8003744 <HAL_GPIO_Init+0x50c>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d01f      	beq.n	8003656 <HAL_GPIO_Init+0x41e>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a4b      	ldr	r2, [pc, #300]	; (8003748 <HAL_GPIO_Init+0x510>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d019      	beq.n	8003652 <HAL_GPIO_Init+0x41a>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a4a      	ldr	r2, [pc, #296]	; (800374c <HAL_GPIO_Init+0x514>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d013      	beq.n	800364e <HAL_GPIO_Init+0x416>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a49      	ldr	r2, [pc, #292]	; (8003750 <HAL_GPIO_Init+0x518>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d00d      	beq.n	800364a <HAL_GPIO_Init+0x412>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a48      	ldr	r2, [pc, #288]	; (8003754 <HAL_GPIO_Init+0x51c>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d007      	beq.n	8003646 <HAL_GPIO_Init+0x40e>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a47      	ldr	r2, [pc, #284]	; (8003758 <HAL_GPIO_Init+0x520>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d101      	bne.n	8003642 <HAL_GPIO_Init+0x40a>
 800363e:	2305      	movs	r3, #5
 8003640:	e00a      	b.n	8003658 <HAL_GPIO_Init+0x420>
 8003642:	2306      	movs	r3, #6
 8003644:	e008      	b.n	8003658 <HAL_GPIO_Init+0x420>
 8003646:	2304      	movs	r3, #4
 8003648:	e006      	b.n	8003658 <HAL_GPIO_Init+0x420>
 800364a:	2303      	movs	r3, #3
 800364c:	e004      	b.n	8003658 <HAL_GPIO_Init+0x420>
 800364e:	2302      	movs	r3, #2
 8003650:	e002      	b.n	8003658 <HAL_GPIO_Init+0x420>
 8003652:	2301      	movs	r3, #1
 8003654:	e000      	b.n	8003658 <HAL_GPIO_Init+0x420>
 8003656:	2300      	movs	r3, #0
 8003658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800365a:	f002 0203 	and.w	r2, r2, #3
 800365e:	0092      	lsls	r2, r2, #2
 8003660:	4093      	lsls	r3, r2
 8003662:	68fa      	ldr	r2, [r7, #12]
 8003664:	4313      	orrs	r3, r2
 8003666:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003668:	4935      	ldr	r1, [pc, #212]	; (8003740 <HAL_GPIO_Init+0x508>)
 800366a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366c:	089b      	lsrs	r3, r3, #2
 800366e:	3302      	adds	r3, #2
 8003670:	68fa      	ldr	r2, [r7, #12]
 8003672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d006      	beq.n	8003690 <HAL_GPIO_Init+0x458>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003682:	4b36      	ldr	r3, [pc, #216]	; (800375c <HAL_GPIO_Init+0x524>)
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	4935      	ldr	r1, [pc, #212]	; (800375c <HAL_GPIO_Init+0x524>)
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	4313      	orrs	r3, r2
 800368c:	600b      	str	r3, [r1, #0]
 800368e:	e006      	b.n	800369e <HAL_GPIO_Init+0x466>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003690:	4b32      	ldr	r3, [pc, #200]	; (800375c <HAL_GPIO_Init+0x524>)
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	43db      	mvns	r3, r3
 8003698:	4930      	ldr	r1, [pc, #192]	; (800375c <HAL_GPIO_Init+0x524>)
 800369a:	4013      	ands	r3, r2
 800369c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d006      	beq.n	80036b8 <HAL_GPIO_Init+0x480>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80036aa:	4b2c      	ldr	r3, [pc, #176]	; (800375c <HAL_GPIO_Init+0x524>)
 80036ac:	685a      	ldr	r2, [r3, #4]
 80036ae:	492b      	ldr	r1, [pc, #172]	; (800375c <HAL_GPIO_Init+0x524>)
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	604b      	str	r3, [r1, #4]
 80036b6:	e006      	b.n	80036c6 <HAL_GPIO_Init+0x48e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80036b8:	4b28      	ldr	r3, [pc, #160]	; (800375c <HAL_GPIO_Init+0x524>)
 80036ba:	685a      	ldr	r2, [r3, #4]
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	43db      	mvns	r3, r3
 80036c0:	4926      	ldr	r1, [pc, #152]	; (800375c <HAL_GPIO_Init+0x524>)
 80036c2:	4013      	ands	r3, r2
 80036c4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d006      	beq.n	80036e0 <HAL_GPIO_Init+0x4a8>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80036d2:	4b22      	ldr	r3, [pc, #136]	; (800375c <HAL_GPIO_Init+0x524>)
 80036d4:	689a      	ldr	r2, [r3, #8]
 80036d6:	4921      	ldr	r1, [pc, #132]	; (800375c <HAL_GPIO_Init+0x524>)
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	4313      	orrs	r3, r2
 80036dc:	608b      	str	r3, [r1, #8]
 80036de:	e006      	b.n	80036ee <HAL_GPIO_Init+0x4b6>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80036e0:	4b1e      	ldr	r3, [pc, #120]	; (800375c <HAL_GPIO_Init+0x524>)
 80036e2:	689a      	ldr	r2, [r3, #8]
 80036e4:	69bb      	ldr	r3, [r7, #24]
 80036e6:	43db      	mvns	r3, r3
 80036e8:	491c      	ldr	r1, [pc, #112]	; (800375c <HAL_GPIO_Init+0x524>)
 80036ea:	4013      	ands	r3, r2
 80036ec:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d006      	beq.n	8003708 <HAL_GPIO_Init+0x4d0>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80036fa:	4b18      	ldr	r3, [pc, #96]	; (800375c <HAL_GPIO_Init+0x524>)
 80036fc:	68da      	ldr	r2, [r3, #12]
 80036fe:	4917      	ldr	r1, [pc, #92]	; (800375c <HAL_GPIO_Init+0x524>)
 8003700:	69bb      	ldr	r3, [r7, #24]
 8003702:	4313      	orrs	r3, r2
 8003704:	60cb      	str	r3, [r1, #12]
 8003706:	e006      	b.n	8003716 <HAL_GPIO_Init+0x4de>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003708:	4b14      	ldr	r3, [pc, #80]	; (800375c <HAL_GPIO_Init+0x524>)
 800370a:	68da      	ldr	r2, [r3, #12]
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	43db      	mvns	r3, r3
 8003710:	4912      	ldr	r1, [pc, #72]	; (800375c <HAL_GPIO_Init+0x524>)
 8003712:	4013      	ands	r3, r2
 8003714:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003718:	3301      	adds	r3, #1
 800371a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003722:	fa22 f303 	lsr.w	r3, r2, r3
 8003726:	2b00      	cmp	r3, #0
 8003728:	f47f ae05 	bne.w	8003336 <HAL_GPIO_Init+0xfe>
  }
}
 800372c:	bf00      	nop
 800372e:	bf00      	nop
 8003730:	3728      	adds	r7, #40	; 0x28
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	0800c32c 	.word	0x0800c32c
 800373c:	40021000 	.word	0x40021000
 8003740:	40010000 	.word	0x40010000
 8003744:	40010800 	.word	0x40010800
 8003748:	40010c00 	.word	0x40010c00
 800374c:	40011000 	.word	0x40011000
 8003750:	40011400 	.word	0x40011400
 8003754:	40011800 	.word	0x40011800
 8003758:	40011c00 	.word	0x40011c00
 800375c:	40010400 	.word	0x40010400

08003760 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	460b      	mov	r3, r1
 800376a:	807b      	strh	r3, [r7, #2]
 800376c:	4613      	mov	r3, r2
 800376e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003770:	887b      	ldrh	r3, [r7, #2]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d004      	beq.n	8003780 <HAL_GPIO_WritePin+0x20>
 8003776:	887b      	ldrh	r3, [r7, #2]
 8003778:	0c1b      	lsrs	r3, r3, #16
 800377a:	041b      	lsls	r3, r3, #16
 800377c:	2b00      	cmp	r3, #0
 800377e:	d004      	beq.n	800378a <HAL_GPIO_WritePin+0x2a>
 8003780:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8003784:	480e      	ldr	r0, [pc, #56]	; (80037c0 <HAL_GPIO_WritePin+0x60>)
 8003786:	f7fe f805 	bl	8001794 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800378a:	787b      	ldrb	r3, [r7, #1]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d007      	beq.n	80037a0 <HAL_GPIO_WritePin+0x40>
 8003790:	787b      	ldrb	r3, [r7, #1]
 8003792:	2b01      	cmp	r3, #1
 8003794:	d004      	beq.n	80037a0 <HAL_GPIO_WritePin+0x40>
 8003796:	f240 11d5 	movw	r1, #469	; 0x1d5
 800379a:	4809      	ldr	r0, [pc, #36]	; (80037c0 <HAL_GPIO_WritePin+0x60>)
 800379c:	f7fd fffa 	bl	8001794 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 80037a0:	787b      	ldrb	r3, [r7, #1]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d003      	beq.n	80037ae <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037a6:	887a      	ldrh	r2, [r7, #2]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80037ac:	e003      	b.n	80037b6 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80037ae:	887b      	ldrh	r3, [r7, #2]
 80037b0:	041a      	lsls	r2, r3, #16
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	611a      	str	r2, [r3, #16]
}
 80037b6:	bf00      	nop
 80037b8:	3708      	adds	r7, #8
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	0800c32c 	.word	0x0800c32c

080037c4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b084      	sub	sp, #16
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	460b      	mov	r3, r1
 80037ce:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80037d0:	887b      	ldrh	r3, [r7, #2]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d004      	beq.n	80037e0 <HAL_GPIO_TogglePin+0x1c>
 80037d6:	887b      	ldrh	r3, [r7, #2]
 80037d8:	0c1b      	lsrs	r3, r3, #16
 80037da:	041b      	lsls	r3, r3, #16
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d004      	beq.n	80037ea <HAL_GPIO_TogglePin+0x26>
 80037e0:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 80037e4:	480a      	ldr	r0, [pc, #40]	; (8003810 <HAL_GPIO_TogglePin+0x4c>)
 80037e6:	f7fd ffd5 	bl	8001794 <assert_failed>

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80037f0:	887a      	ldrh	r2, [r7, #2]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	4013      	ands	r3, r2
 80037f6:	041a      	lsls	r2, r3, #16
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	43d9      	mvns	r1, r3
 80037fc:	887b      	ldrh	r3, [r7, #2]
 80037fe:	400b      	ands	r3, r1
 8003800:	431a      	orrs	r2, r3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	611a      	str	r2, [r3, #16]
}
 8003806:	bf00      	nop
 8003808:	3710      	adds	r7, #16
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	0800c32c 	.word	0x0800c32c

08003814 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003814:	b480      	push	{r7}
 8003816:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8003818:	4b03      	ldr	r3, [pc, #12]	; (8003828 <HAL_PWR_EnableBkUpAccess+0x14>)
 800381a:	2201      	movs	r2, #1
 800381c:	601a      	str	r2, [r3, #0]
}
 800381e:	bf00      	nop
 8003820:	46bd      	mov	sp, r7
 8003822:	bc80      	pop	{r7}
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop
 8003828:	420e0020 	.word	0x420e0020

0800382c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b086      	sub	sp, #24
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d101      	bne.n	800383e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e35c      	b.n	8003ef8 <HAL_RCC_OscConfig+0x6cc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d01c      	beq.n	8003880 <HAL_RCC_OscConfig+0x54>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0301 	and.w	r3, r3, #1
 800384e:	2b00      	cmp	r3, #0
 8003850:	d116      	bne.n	8003880 <HAL_RCC_OscConfig+0x54>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0302 	and.w	r3, r3, #2
 800385a:	2b00      	cmp	r3, #0
 800385c:	d110      	bne.n	8003880 <HAL_RCC_OscConfig+0x54>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0308 	and.w	r3, r3, #8
 8003866:	2b00      	cmp	r3, #0
 8003868:	d10a      	bne.n	8003880 <HAL_RCC_OscConfig+0x54>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0304 	and.w	r3, r3, #4
 8003872:	2b00      	cmp	r3, #0
 8003874:	d104      	bne.n	8003880 <HAL_RCC_OscConfig+0x54>
 8003876:	f240 1167 	movw	r1, #359	; 0x167
 800387a:	48a5      	ldr	r0, [pc, #660]	; (8003b10 <HAL_RCC_OscConfig+0x2e4>)
 800387c:	f7fd ff8a 	bl	8001794 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0301 	and.w	r3, r3, #1
 8003888:	2b00      	cmp	r3, #0
 800388a:	f000 809a 	beq.w	80039c2 <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00e      	beq.n	80038b4 <HAL_RCC_OscConfig+0x88>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800389e:	d009      	beq.n	80038b4 <HAL_RCC_OscConfig+0x88>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038a8:	d004      	beq.n	80038b4 <HAL_RCC_OscConfig+0x88>
 80038aa:	f240 116d 	movw	r1, #365	; 0x16d
 80038ae:	4898      	ldr	r0, [pc, #608]	; (8003b10 <HAL_RCC_OscConfig+0x2e4>)
 80038b0:	f7fd ff70 	bl	8001794 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80038b4:	4b97      	ldr	r3, [pc, #604]	; (8003b14 <HAL_RCC_OscConfig+0x2e8>)
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f003 030c 	and.w	r3, r3, #12
 80038bc:	2b04      	cmp	r3, #4
 80038be:	d00c      	beq.n	80038da <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80038c0:	4b94      	ldr	r3, [pc, #592]	; (8003b14 <HAL_RCC_OscConfig+0x2e8>)
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f003 030c 	and.w	r3, r3, #12
 80038c8:	2b08      	cmp	r3, #8
 80038ca:	d112      	bne.n	80038f2 <HAL_RCC_OscConfig+0xc6>
 80038cc:	4b91      	ldr	r3, [pc, #580]	; (8003b14 <HAL_RCC_OscConfig+0x2e8>)
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038d8:	d10b      	bne.n	80038f2 <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038da:	4b8e      	ldr	r3, [pc, #568]	; (8003b14 <HAL_RCC_OscConfig+0x2e8>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d06c      	beq.n	80039c0 <HAL_RCC_OscConfig+0x194>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d168      	bne.n	80039c0 <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e302      	b.n	8003ef8 <HAL_RCC_OscConfig+0x6cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038fa:	d106      	bne.n	800390a <HAL_RCC_OscConfig+0xde>
 80038fc:	4b85      	ldr	r3, [pc, #532]	; (8003b14 <HAL_RCC_OscConfig+0x2e8>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a84      	ldr	r2, [pc, #528]	; (8003b14 <HAL_RCC_OscConfig+0x2e8>)
 8003902:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003906:	6013      	str	r3, [r2, #0]
 8003908:	e02e      	b.n	8003968 <HAL_RCC_OscConfig+0x13c>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d10c      	bne.n	800392c <HAL_RCC_OscConfig+0x100>
 8003912:	4b80      	ldr	r3, [pc, #512]	; (8003b14 <HAL_RCC_OscConfig+0x2e8>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a7f      	ldr	r2, [pc, #508]	; (8003b14 <HAL_RCC_OscConfig+0x2e8>)
 8003918:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800391c:	6013      	str	r3, [r2, #0]
 800391e:	4b7d      	ldr	r3, [pc, #500]	; (8003b14 <HAL_RCC_OscConfig+0x2e8>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a7c      	ldr	r2, [pc, #496]	; (8003b14 <HAL_RCC_OscConfig+0x2e8>)
 8003924:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003928:	6013      	str	r3, [r2, #0]
 800392a:	e01d      	b.n	8003968 <HAL_RCC_OscConfig+0x13c>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003934:	d10c      	bne.n	8003950 <HAL_RCC_OscConfig+0x124>
 8003936:	4b77      	ldr	r3, [pc, #476]	; (8003b14 <HAL_RCC_OscConfig+0x2e8>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a76      	ldr	r2, [pc, #472]	; (8003b14 <HAL_RCC_OscConfig+0x2e8>)
 800393c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003940:	6013      	str	r3, [r2, #0]
 8003942:	4b74      	ldr	r3, [pc, #464]	; (8003b14 <HAL_RCC_OscConfig+0x2e8>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a73      	ldr	r2, [pc, #460]	; (8003b14 <HAL_RCC_OscConfig+0x2e8>)
 8003948:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800394c:	6013      	str	r3, [r2, #0]
 800394e:	e00b      	b.n	8003968 <HAL_RCC_OscConfig+0x13c>
 8003950:	4b70      	ldr	r3, [pc, #448]	; (8003b14 <HAL_RCC_OscConfig+0x2e8>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a6f      	ldr	r2, [pc, #444]	; (8003b14 <HAL_RCC_OscConfig+0x2e8>)
 8003956:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800395a:	6013      	str	r3, [r2, #0]
 800395c:	4b6d      	ldr	r3, [pc, #436]	; (8003b14 <HAL_RCC_OscConfig+0x2e8>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a6c      	ldr	r2, [pc, #432]	; (8003b14 <HAL_RCC_OscConfig+0x2e8>)
 8003962:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003966:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d013      	beq.n	8003998 <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003970:	f7fe fbc0 	bl	80020f4 <HAL_GetTick>
 8003974:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003976:	e008      	b.n	800398a <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003978:	f7fe fbbc 	bl	80020f4 <HAL_GetTick>
 800397c:	4602      	mov	r2, r0
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	2b64      	cmp	r3, #100	; 0x64
 8003984:	d901      	bls.n	800398a <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e2b6      	b.n	8003ef8 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800398a:	4b62      	ldr	r3, [pc, #392]	; (8003b14 <HAL_RCC_OscConfig+0x2e8>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d0f0      	beq.n	8003978 <HAL_RCC_OscConfig+0x14c>
 8003996:	e014      	b.n	80039c2 <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003998:	f7fe fbac 	bl	80020f4 <HAL_GetTick>
 800399c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800399e:	e008      	b.n	80039b2 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039a0:	f7fe fba8 	bl	80020f4 <HAL_GetTick>
 80039a4:	4602      	mov	r2, r0
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	2b64      	cmp	r3, #100	; 0x64
 80039ac:	d901      	bls.n	80039b2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e2a2      	b.n	8003ef8 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039b2:	4b58      	ldr	r3, [pc, #352]	; (8003b14 <HAL_RCC_OscConfig+0x2e8>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d1f0      	bne.n	80039a0 <HAL_RCC_OscConfig+0x174>
 80039be:	e000      	b.n	80039c2 <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0302 	and.w	r3, r3, #2
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d079      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d008      	beq.n	80039e8 <HAL_RCC_OscConfig+0x1bc>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d004      	beq.n	80039e8 <HAL_RCC_OscConfig+0x1bc>
 80039de:	f240 11a1 	movw	r1, #417	; 0x1a1
 80039e2:	484b      	ldr	r0, [pc, #300]	; (8003b10 <HAL_RCC_OscConfig+0x2e4>)
 80039e4:	f7fd fed6 	bl	8001794 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	695b      	ldr	r3, [r3, #20]
 80039ec:	2b1f      	cmp	r3, #31
 80039ee:	d904      	bls.n	80039fa <HAL_RCC_OscConfig+0x1ce>
 80039f0:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 80039f4:	4846      	ldr	r0, [pc, #280]	; (8003b10 <HAL_RCC_OscConfig+0x2e4>)
 80039f6:	f7fd fecd 	bl	8001794 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80039fa:	4b46      	ldr	r3, [pc, #280]	; (8003b14 <HAL_RCC_OscConfig+0x2e8>)
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	f003 030c 	and.w	r3, r3, #12
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d00b      	beq.n	8003a1e <HAL_RCC_OscConfig+0x1f2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003a06:	4b43      	ldr	r3, [pc, #268]	; (8003b14 <HAL_RCC_OscConfig+0x2e8>)
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	f003 030c 	and.w	r3, r3, #12
 8003a0e:	2b08      	cmp	r3, #8
 8003a10:	d11c      	bne.n	8003a4c <HAL_RCC_OscConfig+0x220>
 8003a12:	4b40      	ldr	r3, [pc, #256]	; (8003b14 <HAL_RCC_OscConfig+0x2e8>)
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d116      	bne.n	8003a4c <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a1e:	4b3d      	ldr	r3, [pc, #244]	; (8003b14 <HAL_RCC_OscConfig+0x2e8>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0302 	and.w	r3, r3, #2
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d005      	beq.n	8003a36 <HAL_RCC_OscConfig+0x20a>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	691b      	ldr	r3, [r3, #16]
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d001      	beq.n	8003a36 <HAL_RCC_OscConfig+0x20a>
      {
        return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e260      	b.n	8003ef8 <HAL_RCC_OscConfig+0x6cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a36:	4b37      	ldr	r3, [pc, #220]	; (8003b14 <HAL_RCC_OscConfig+0x2e8>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	695b      	ldr	r3, [r3, #20]
 8003a42:	00db      	lsls	r3, r3, #3
 8003a44:	4933      	ldr	r1, [pc, #204]	; (8003b14 <HAL_RCC_OscConfig+0x2e8>)
 8003a46:	4313      	orrs	r3, r2
 8003a48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a4a:	e03a      	b.n	8003ac2 <HAL_RCC_OscConfig+0x296>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	691b      	ldr	r3, [r3, #16]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d020      	beq.n	8003a96 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a54:	4b30      	ldr	r3, [pc, #192]	; (8003b18 <HAL_RCC_OscConfig+0x2ec>)
 8003a56:	2201      	movs	r2, #1
 8003a58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a5a:	f7fe fb4b 	bl	80020f4 <HAL_GetTick>
 8003a5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a60:	e008      	b.n	8003a74 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a62:	f7fe fb47 	bl	80020f4 <HAL_GetTick>
 8003a66:	4602      	mov	r2, r0
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	d901      	bls.n	8003a74 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003a70:	2303      	movs	r3, #3
 8003a72:	e241      	b.n	8003ef8 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a74:	4b27      	ldr	r3, [pc, #156]	; (8003b14 <HAL_RCC_OscConfig+0x2e8>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0302 	and.w	r3, r3, #2
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d0f0      	beq.n	8003a62 <HAL_RCC_OscConfig+0x236>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a80:	4b24      	ldr	r3, [pc, #144]	; (8003b14 <HAL_RCC_OscConfig+0x2e8>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	695b      	ldr	r3, [r3, #20]
 8003a8c:	00db      	lsls	r3, r3, #3
 8003a8e:	4921      	ldr	r1, [pc, #132]	; (8003b14 <HAL_RCC_OscConfig+0x2e8>)
 8003a90:	4313      	orrs	r3, r2
 8003a92:	600b      	str	r3, [r1, #0]
 8003a94:	e015      	b.n	8003ac2 <HAL_RCC_OscConfig+0x296>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a96:	4b20      	ldr	r3, [pc, #128]	; (8003b18 <HAL_RCC_OscConfig+0x2ec>)
 8003a98:	2200      	movs	r2, #0
 8003a9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a9c:	f7fe fb2a 	bl	80020f4 <HAL_GetTick>
 8003aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aa2:	e008      	b.n	8003ab6 <HAL_RCC_OscConfig+0x28a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003aa4:	f7fe fb26 	bl	80020f4 <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	2b02      	cmp	r3, #2
 8003ab0:	d901      	bls.n	8003ab6 <HAL_RCC_OscConfig+0x28a>
          {
            return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e220      	b.n	8003ef8 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ab6:	4b17      	ldr	r3, [pc, #92]	; (8003b14 <HAL_RCC_OscConfig+0x2e8>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0302 	and.w	r3, r3, #2
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d1f0      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x278>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0308 	and.w	r3, r3, #8
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d048      	beq.n	8003b60 <HAL_RCC_OscConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	699b      	ldr	r3, [r3, #24]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d008      	beq.n	8003ae8 <HAL_RCC_OscConfig+0x2bc>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	699b      	ldr	r3, [r3, #24]
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d004      	beq.n	8003ae8 <HAL_RCC_OscConfig+0x2bc>
 8003ade:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8003ae2:	480b      	ldr	r0, [pc, #44]	; (8003b10 <HAL_RCC_OscConfig+0x2e4>)
 8003ae4:	f7fd fe56 	bl	8001794 <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	699b      	ldr	r3, [r3, #24]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d021      	beq.n	8003b34 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003af0:	4b0a      	ldr	r3, [pc, #40]	; (8003b1c <HAL_RCC_OscConfig+0x2f0>)
 8003af2:	2201      	movs	r2, #1
 8003af4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003af6:	f7fe fafd 	bl	80020f4 <HAL_GetTick>
 8003afa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003afc:	e010      	b.n	8003b20 <HAL_RCC_OscConfig+0x2f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003afe:	f7fe faf9 	bl	80020f4 <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d909      	bls.n	8003b20 <HAL_RCC_OscConfig+0x2f4>
        {
          return HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	e1f3      	b.n	8003ef8 <HAL_RCC_OscConfig+0x6cc>
 8003b10:	0800c368 	.word	0x0800c368
 8003b14:	40021000 	.word	0x40021000
 8003b18:	42420000 	.word	0x42420000
 8003b1c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b20:	4b67      	ldr	r3, [pc, #412]	; (8003cc0 <HAL_RCC_OscConfig+0x494>)
 8003b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b24:	f003 0302 	and.w	r3, r3, #2
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d0e8      	beq.n	8003afe <HAL_RCC_OscConfig+0x2d2>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003b2c:	2001      	movs	r0, #1
 8003b2e:	f000 fc0f 	bl	8004350 <RCC_Delay>
 8003b32:	e015      	b.n	8003b60 <HAL_RCC_OscConfig+0x334>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b34:	4b63      	ldr	r3, [pc, #396]	; (8003cc4 <HAL_RCC_OscConfig+0x498>)
 8003b36:	2200      	movs	r2, #0
 8003b38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b3a:	f7fe fadb 	bl	80020f4 <HAL_GetTick>
 8003b3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b40:	e008      	b.n	8003b54 <HAL_RCC_OscConfig+0x328>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b42:	f7fe fad7 	bl	80020f4 <HAL_GetTick>
 8003b46:	4602      	mov	r2, r0
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	2b02      	cmp	r3, #2
 8003b4e:	d901      	bls.n	8003b54 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 8003b50:	2303      	movs	r3, #3
 8003b52:	e1d1      	b.n	8003ef8 <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b54:	4b5a      	ldr	r3, [pc, #360]	; (8003cc0 <HAL_RCC_OscConfig+0x494>)
 8003b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b58:	f003 0302 	and.w	r3, r3, #2
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d1f0      	bne.n	8003b42 <HAL_RCC_OscConfig+0x316>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0304 	and.w	r3, r3, #4
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	f000 80c0 	beq.w	8003cee <HAL_RCC_OscConfig+0x4c2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d00c      	beq.n	8003b94 <HAL_RCC_OscConfig+0x368>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d008      	beq.n	8003b94 <HAL_RCC_OscConfig+0x368>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	2b05      	cmp	r3, #5
 8003b88:	d004      	beq.n	8003b94 <HAL_RCC_OscConfig+0x368>
 8003b8a:	f240 2111 	movw	r1, #529	; 0x211
 8003b8e:	484e      	ldr	r0, [pc, #312]	; (8003cc8 <HAL_RCC_OscConfig+0x49c>)
 8003b90:	f7fd fe00 	bl	8001794 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b94:	4b4a      	ldr	r3, [pc, #296]	; (8003cc0 <HAL_RCC_OscConfig+0x494>)
 8003b96:	69db      	ldr	r3, [r3, #28]
 8003b98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d10d      	bne.n	8003bbc <HAL_RCC_OscConfig+0x390>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ba0:	4b47      	ldr	r3, [pc, #284]	; (8003cc0 <HAL_RCC_OscConfig+0x494>)
 8003ba2:	69db      	ldr	r3, [r3, #28]
 8003ba4:	4a46      	ldr	r2, [pc, #280]	; (8003cc0 <HAL_RCC_OscConfig+0x494>)
 8003ba6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003baa:	61d3      	str	r3, [r2, #28]
 8003bac:	4b44      	ldr	r3, [pc, #272]	; (8003cc0 <HAL_RCC_OscConfig+0x494>)
 8003bae:	69db      	ldr	r3, [r3, #28]
 8003bb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bb4:	60bb      	str	r3, [r7, #8]
 8003bb6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bbc:	4b43      	ldr	r3, [pc, #268]	; (8003ccc <HAL_RCC_OscConfig+0x4a0>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d118      	bne.n	8003bfa <HAL_RCC_OscConfig+0x3ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bc8:	4b40      	ldr	r3, [pc, #256]	; (8003ccc <HAL_RCC_OscConfig+0x4a0>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a3f      	ldr	r2, [pc, #252]	; (8003ccc <HAL_RCC_OscConfig+0x4a0>)
 8003bce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bd2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bd4:	f7fe fa8e 	bl	80020f4 <HAL_GetTick>
 8003bd8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bda:	e008      	b.n	8003bee <HAL_RCC_OscConfig+0x3c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bdc:	f7fe fa8a 	bl	80020f4 <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	2b64      	cmp	r3, #100	; 0x64
 8003be8:	d901      	bls.n	8003bee <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e184      	b.n	8003ef8 <HAL_RCC_OscConfig+0x6cc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bee:	4b37      	ldr	r3, [pc, #220]	; (8003ccc <HAL_RCC_OscConfig+0x4a0>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d0f0      	beq.n	8003bdc <HAL_RCC_OscConfig+0x3b0>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d106      	bne.n	8003c10 <HAL_RCC_OscConfig+0x3e4>
 8003c02:	4b2f      	ldr	r3, [pc, #188]	; (8003cc0 <HAL_RCC_OscConfig+0x494>)
 8003c04:	6a1b      	ldr	r3, [r3, #32]
 8003c06:	4a2e      	ldr	r2, [pc, #184]	; (8003cc0 <HAL_RCC_OscConfig+0x494>)
 8003c08:	f043 0301 	orr.w	r3, r3, #1
 8003c0c:	6213      	str	r3, [r2, #32]
 8003c0e:	e02d      	b.n	8003c6c <HAL_RCC_OscConfig+0x440>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d10c      	bne.n	8003c32 <HAL_RCC_OscConfig+0x406>
 8003c18:	4b29      	ldr	r3, [pc, #164]	; (8003cc0 <HAL_RCC_OscConfig+0x494>)
 8003c1a:	6a1b      	ldr	r3, [r3, #32]
 8003c1c:	4a28      	ldr	r2, [pc, #160]	; (8003cc0 <HAL_RCC_OscConfig+0x494>)
 8003c1e:	f023 0301 	bic.w	r3, r3, #1
 8003c22:	6213      	str	r3, [r2, #32]
 8003c24:	4b26      	ldr	r3, [pc, #152]	; (8003cc0 <HAL_RCC_OscConfig+0x494>)
 8003c26:	6a1b      	ldr	r3, [r3, #32]
 8003c28:	4a25      	ldr	r2, [pc, #148]	; (8003cc0 <HAL_RCC_OscConfig+0x494>)
 8003c2a:	f023 0304 	bic.w	r3, r3, #4
 8003c2e:	6213      	str	r3, [r2, #32]
 8003c30:	e01c      	b.n	8003c6c <HAL_RCC_OscConfig+0x440>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	2b05      	cmp	r3, #5
 8003c38:	d10c      	bne.n	8003c54 <HAL_RCC_OscConfig+0x428>
 8003c3a:	4b21      	ldr	r3, [pc, #132]	; (8003cc0 <HAL_RCC_OscConfig+0x494>)
 8003c3c:	6a1b      	ldr	r3, [r3, #32]
 8003c3e:	4a20      	ldr	r2, [pc, #128]	; (8003cc0 <HAL_RCC_OscConfig+0x494>)
 8003c40:	f043 0304 	orr.w	r3, r3, #4
 8003c44:	6213      	str	r3, [r2, #32]
 8003c46:	4b1e      	ldr	r3, [pc, #120]	; (8003cc0 <HAL_RCC_OscConfig+0x494>)
 8003c48:	6a1b      	ldr	r3, [r3, #32]
 8003c4a:	4a1d      	ldr	r2, [pc, #116]	; (8003cc0 <HAL_RCC_OscConfig+0x494>)
 8003c4c:	f043 0301 	orr.w	r3, r3, #1
 8003c50:	6213      	str	r3, [r2, #32]
 8003c52:	e00b      	b.n	8003c6c <HAL_RCC_OscConfig+0x440>
 8003c54:	4b1a      	ldr	r3, [pc, #104]	; (8003cc0 <HAL_RCC_OscConfig+0x494>)
 8003c56:	6a1b      	ldr	r3, [r3, #32]
 8003c58:	4a19      	ldr	r2, [pc, #100]	; (8003cc0 <HAL_RCC_OscConfig+0x494>)
 8003c5a:	f023 0301 	bic.w	r3, r3, #1
 8003c5e:	6213      	str	r3, [r2, #32]
 8003c60:	4b17      	ldr	r3, [pc, #92]	; (8003cc0 <HAL_RCC_OscConfig+0x494>)
 8003c62:	6a1b      	ldr	r3, [r3, #32]
 8003c64:	4a16      	ldr	r2, [pc, #88]	; (8003cc0 <HAL_RCC_OscConfig+0x494>)
 8003c66:	f023 0304 	bic.w	r3, r3, #4
 8003c6a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d015      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x474>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c74:	f7fe fa3e 	bl	80020f4 <HAL_GetTick>
 8003c78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c7a:	e00a      	b.n	8003c92 <HAL_RCC_OscConfig+0x466>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c7c:	f7fe fa3a 	bl	80020f4 <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d901      	bls.n	8003c92 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e132      	b.n	8003ef8 <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c92:	4b0b      	ldr	r3, [pc, #44]	; (8003cc0 <HAL_RCC_OscConfig+0x494>)
 8003c94:	6a1b      	ldr	r3, [r3, #32]
 8003c96:	f003 0302 	and.w	r3, r3, #2
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d0ee      	beq.n	8003c7c <HAL_RCC_OscConfig+0x450>
 8003c9e:	e01d      	b.n	8003cdc <HAL_RCC_OscConfig+0x4b0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ca0:	f7fe fa28 	bl	80020f4 <HAL_GetTick>
 8003ca4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ca6:	e013      	b.n	8003cd0 <HAL_RCC_OscConfig+0x4a4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ca8:	f7fe fa24 	bl	80020f4 <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d90a      	bls.n	8003cd0 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e11c      	b.n	8003ef8 <HAL_RCC_OscConfig+0x6cc>
 8003cbe:	bf00      	nop
 8003cc0:	40021000 	.word	0x40021000
 8003cc4:	42420480 	.word	0x42420480
 8003cc8:	0800c368 	.word	0x0800c368
 8003ccc:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cd0:	4b8b      	ldr	r3, [pc, #556]	; (8003f00 <HAL_RCC_OscConfig+0x6d4>)
 8003cd2:	6a1b      	ldr	r3, [r3, #32]
 8003cd4:	f003 0302 	and.w	r3, r3, #2
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d1e5      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x47c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003cdc:	7dfb      	ldrb	r3, [r7, #23]
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d105      	bne.n	8003cee <HAL_RCC_OscConfig+0x4c2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ce2:	4b87      	ldr	r3, [pc, #540]	; (8003f00 <HAL_RCC_OscConfig+0x6d4>)
 8003ce4:	69db      	ldr	r3, [r3, #28]
 8003ce6:	4a86      	ldr	r2, [pc, #536]	; (8003f00 <HAL_RCC_OscConfig+0x6d4>)
 8003ce8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cec:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	69db      	ldr	r3, [r3, #28]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d00c      	beq.n	8003d10 <HAL_RCC_OscConfig+0x4e4>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	69db      	ldr	r3, [r3, #28]
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d008      	beq.n	8003d10 <HAL_RCC_OscConfig+0x4e4>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	69db      	ldr	r3, [r3, #28]
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d004      	beq.n	8003d10 <HAL_RCC_OscConfig+0x4e4>
 8003d06:	f240 21af 	movw	r1, #687	; 0x2af
 8003d0a:	487e      	ldr	r0, [pc, #504]	; (8003f04 <HAL_RCC_OscConfig+0x6d8>)
 8003d0c:	f7fd fd42 	bl	8001794 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	69db      	ldr	r3, [r3, #28]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	f000 80ee 	beq.w	8003ef6 <HAL_RCC_OscConfig+0x6ca>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d1a:	4b79      	ldr	r3, [pc, #484]	; (8003f00 <HAL_RCC_OscConfig+0x6d4>)
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	f003 030c 	and.w	r3, r3, #12
 8003d22:	2b08      	cmp	r3, #8
 8003d24:	f000 80ce 	beq.w	8003ec4 <HAL_RCC_OscConfig+0x698>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	69db      	ldr	r3, [r3, #28]
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	f040 80b2 	bne.w	8003e96 <HAL_RCC_OscConfig+0x66a>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a1b      	ldr	r3, [r3, #32]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d009      	beq.n	8003d4e <HAL_RCC_OscConfig+0x522>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6a1b      	ldr	r3, [r3, #32]
 8003d3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d42:	d004      	beq.n	8003d4e <HAL_RCC_OscConfig+0x522>
 8003d44:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 8003d48:	486e      	ldr	r0, [pc, #440]	; (8003f04 <HAL_RCC_OscConfig+0x6d8>)
 8003d4a:	f7fd fd23 	bl	8001794 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d04a      	beq.n	8003dec <HAL_RCC_OscConfig+0x5c0>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003d5e:	d045      	beq.n	8003dec <HAL_RCC_OscConfig+0x5c0>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d64:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003d68:	d040      	beq.n	8003dec <HAL_RCC_OscConfig+0x5c0>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003d72:	d03b      	beq.n	8003dec <HAL_RCC_OscConfig+0x5c0>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d7c:	d036      	beq.n	8003dec <HAL_RCC_OscConfig+0x5c0>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d82:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003d86:	d031      	beq.n	8003dec <HAL_RCC_OscConfig+0x5c0>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003d90:	d02c      	beq.n	8003dec <HAL_RCC_OscConfig+0x5c0>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d96:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003d9a:	d027      	beq.n	8003dec <HAL_RCC_OscConfig+0x5c0>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003da4:	d022      	beq.n	8003dec <HAL_RCC_OscConfig+0x5c0>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003daa:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003dae:	d01d      	beq.n	8003dec <HAL_RCC_OscConfig+0x5c0>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db4:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003db8:	d018      	beq.n	8003dec <HAL_RCC_OscConfig+0x5c0>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dbe:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003dc2:	d013      	beq.n	8003dec <HAL_RCC_OscConfig+0x5c0>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003dcc:	d00e      	beq.n	8003dec <HAL_RCC_OscConfig+0x5c0>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd2:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 8003dd6:	d009      	beq.n	8003dec <HAL_RCC_OscConfig+0x5c0>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ddc:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8003de0:	d004      	beq.n	8003dec <HAL_RCC_OscConfig+0x5c0>
 8003de2:	f240 21b9 	movw	r1, #697	; 0x2b9
 8003de6:	4847      	ldr	r0, [pc, #284]	; (8003f04 <HAL_RCC_OscConfig+0x6d8>)
 8003de8:	f7fd fcd4 	bl	8001794 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dec:	4b46      	ldr	r3, [pc, #280]	; (8003f08 <HAL_RCC_OscConfig+0x6dc>)
 8003dee:	2200      	movs	r2, #0
 8003df0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003df2:	f7fe f97f 	bl	80020f4 <HAL_GetTick>
 8003df6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003df8:	e008      	b.n	8003e0c <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dfa:	f7fe f97b 	bl	80020f4 <HAL_GetTick>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	d901      	bls.n	8003e0c <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 8003e08:	2303      	movs	r3, #3
 8003e0a:	e075      	b.n	8003ef8 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e0c:	4b3c      	ldr	r3, [pc, #240]	; (8003f00 <HAL_RCC_OscConfig+0x6d4>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d1f0      	bne.n	8003dfa <HAL_RCC_OscConfig+0x5ce>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6a1b      	ldr	r3, [r3, #32]
 8003e1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e20:	d116      	bne.n	8003e50 <HAL_RCC_OscConfig+0x624>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d009      	beq.n	8003e3e <HAL_RCC_OscConfig+0x612>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e32:	d004      	beq.n	8003e3e <HAL_RCC_OscConfig+0x612>
 8003e34:	f240 21cf 	movw	r1, #719	; 0x2cf
 8003e38:	4832      	ldr	r0, [pc, #200]	; (8003f04 <HAL_RCC_OscConfig+0x6d8>)
 8003e3a:	f7fd fcab 	bl	8001794 <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003e3e:	4b30      	ldr	r3, [pc, #192]	; (8003f00 <HAL_RCC_OscConfig+0x6d4>)
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	492d      	ldr	r1, [pc, #180]	; (8003f00 <HAL_RCC_OscConfig+0x6d4>)
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e50:	4b2b      	ldr	r3, [pc, #172]	; (8003f00 <HAL_RCC_OscConfig+0x6d4>)
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6a19      	ldr	r1, [r3, #32]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e60:	430b      	orrs	r3, r1
 8003e62:	4927      	ldr	r1, [pc, #156]	; (8003f00 <HAL_RCC_OscConfig+0x6d4>)
 8003e64:	4313      	orrs	r3, r2
 8003e66:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e68:	4b27      	ldr	r3, [pc, #156]	; (8003f08 <HAL_RCC_OscConfig+0x6dc>)
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e6e:	f7fe f941 	bl	80020f4 <HAL_GetTick>
 8003e72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e74:	e008      	b.n	8003e88 <HAL_RCC_OscConfig+0x65c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e76:	f7fe f93d 	bl	80020f4 <HAL_GetTick>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	1ad3      	subs	r3, r2, r3
 8003e80:	2b02      	cmp	r3, #2
 8003e82:	d901      	bls.n	8003e88 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8003e84:	2303      	movs	r3, #3
 8003e86:	e037      	b.n	8003ef8 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e88:	4b1d      	ldr	r3, [pc, #116]	; (8003f00 <HAL_RCC_OscConfig+0x6d4>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d0f0      	beq.n	8003e76 <HAL_RCC_OscConfig+0x64a>
 8003e94:	e02f      	b.n	8003ef6 <HAL_RCC_OscConfig+0x6ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e96:	4b1c      	ldr	r3, [pc, #112]	; (8003f08 <HAL_RCC_OscConfig+0x6dc>)
 8003e98:	2200      	movs	r2, #0
 8003e9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e9c:	f7fe f92a 	bl	80020f4 <HAL_GetTick>
 8003ea0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ea2:	e008      	b.n	8003eb6 <HAL_RCC_OscConfig+0x68a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ea4:	f7fe f926 	bl	80020f4 <HAL_GetTick>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	d901      	bls.n	8003eb6 <HAL_RCC_OscConfig+0x68a>
          {
            return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e020      	b.n	8003ef8 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003eb6:	4b12      	ldr	r3, [pc, #72]	; (8003f00 <HAL_RCC_OscConfig+0x6d4>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d1f0      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x678>
 8003ec2:	e018      	b.n	8003ef6 <HAL_RCC_OscConfig+0x6ca>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	69db      	ldr	r3, [r3, #28]
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d101      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x6a4>
      {
        return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e013      	b.n	8003ef8 <HAL_RCC_OscConfig+0x6cc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003ed0:	4b0b      	ldr	r3, [pc, #44]	; (8003f00 <HAL_RCC_OscConfig+0x6d4>)
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6a1b      	ldr	r3, [r3, #32]
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d106      	bne.n	8003ef2 <HAL_RCC_OscConfig+0x6c6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d001      	beq.n	8003ef6 <HAL_RCC_OscConfig+0x6ca>
        {
          return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e000      	b.n	8003ef8 <HAL_RCC_OscConfig+0x6cc>
        }
      }
    }
  }

  return HAL_OK;
 8003ef6:	2300      	movs	r3, #0
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3718      	adds	r7, #24
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	40021000 	.word	0x40021000
 8003f04:	0800c368 	.word	0x0800c368
 8003f08:	42420060 	.word	0x42420060

08003f0c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d101      	bne.n	8003f20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e176      	b.n	800420e <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0301 	and.w	r3, r3, #1
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d116      	bne.n	8003f5a <HAL_RCC_ClockConfig+0x4e>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0302 	and.w	r3, r3, #2
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d110      	bne.n	8003f5a <HAL_RCC_ClockConfig+0x4e>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0304 	and.w	r3, r3, #4
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d10a      	bne.n	8003f5a <HAL_RCC_ClockConfig+0x4e>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0308 	and.w	r3, r3, #8
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d104      	bne.n	8003f5a <HAL_RCC_ClockConfig+0x4e>
 8003f50:	f44f 714e 	mov.w	r1, #824	; 0x338
 8003f54:	4874      	ldr	r0, [pc, #464]	; (8004128 <HAL_RCC_ClockConfig+0x21c>)
 8003f56:	f7fd fc1d 	bl	8001794 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d00a      	beq.n	8003f76 <HAL_RCC_ClockConfig+0x6a>
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d007      	beq.n	8003f76 <HAL_RCC_ClockConfig+0x6a>
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	d004      	beq.n	8003f76 <HAL_RCC_ClockConfig+0x6a>
 8003f6c:	f240 3139 	movw	r1, #825	; 0x339
 8003f70:	486d      	ldr	r0, [pc, #436]	; (8004128 <HAL_RCC_ClockConfig+0x21c>)
 8003f72:	f7fd fc0f 	bl	8001794 <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f76:	4b6d      	ldr	r3, [pc, #436]	; (800412c <HAL_RCC_ClockConfig+0x220>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 0307 	and.w	r3, r3, #7
 8003f7e:	683a      	ldr	r2, [r7, #0]
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d910      	bls.n	8003fa6 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f84:	4b69      	ldr	r3, [pc, #420]	; (800412c <HAL_RCC_ClockConfig+0x220>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f023 0207 	bic.w	r2, r3, #7
 8003f8c:	4967      	ldr	r1, [pc, #412]	; (800412c <HAL_RCC_ClockConfig+0x220>)
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f94:	4b65      	ldr	r3, [pc, #404]	; (800412c <HAL_RCC_ClockConfig+0x220>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0307 	and.w	r3, r3, #7
 8003f9c:	683a      	ldr	r2, [r7, #0]
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d001      	beq.n	8003fa6 <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e133      	b.n	800420e <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0302 	and.w	r3, r3, #2
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d049      	beq.n	8004046 <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 0304 	and.w	r3, r3, #4
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d005      	beq.n	8003fca <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fbe:	4b5c      	ldr	r3, [pc, #368]	; (8004130 <HAL_RCC_ClockConfig+0x224>)
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	4a5b      	ldr	r2, [pc, #364]	; (8004130 <HAL_RCC_ClockConfig+0x224>)
 8003fc4:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003fc8:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 0308 	and.w	r3, r3, #8
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d005      	beq.n	8003fe2 <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fd6:	4b56      	ldr	r3, [pc, #344]	; (8004130 <HAL_RCC_ClockConfig+0x224>)
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	4a55      	ldr	r2, [pc, #340]	; (8004130 <HAL_RCC_ClockConfig+0x224>)
 8003fdc:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003fe0:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d024      	beq.n	8004034 <HAL_RCC_ClockConfig+0x128>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	2b80      	cmp	r3, #128	; 0x80
 8003ff0:	d020      	beq.n	8004034 <HAL_RCC_ClockConfig+0x128>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	2b90      	cmp	r3, #144	; 0x90
 8003ff8:	d01c      	beq.n	8004034 <HAL_RCC_ClockConfig+0x128>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	2ba0      	cmp	r3, #160	; 0xa0
 8004000:	d018      	beq.n	8004034 <HAL_RCC_ClockConfig+0x128>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	2bb0      	cmp	r3, #176	; 0xb0
 8004008:	d014      	beq.n	8004034 <HAL_RCC_ClockConfig+0x128>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	2bc0      	cmp	r3, #192	; 0xc0
 8004010:	d010      	beq.n	8004034 <HAL_RCC_ClockConfig+0x128>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	2bd0      	cmp	r3, #208	; 0xd0
 8004018:	d00c      	beq.n	8004034 <HAL_RCC_ClockConfig+0x128>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	2be0      	cmp	r3, #224	; 0xe0
 8004020:	d008      	beq.n	8004034 <HAL_RCC_ClockConfig+0x128>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	2bf0      	cmp	r3, #240	; 0xf0
 8004028:	d004      	beq.n	8004034 <HAL_RCC_ClockConfig+0x128>
 800402a:	f240 315f 	movw	r1, #863	; 0x35f
 800402e:	483e      	ldr	r0, [pc, #248]	; (8004128 <HAL_RCC_ClockConfig+0x21c>)
 8004030:	f7fd fbb0 	bl	8001794 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004034:	4b3e      	ldr	r3, [pc, #248]	; (8004130 <HAL_RCC_ClockConfig+0x224>)
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	493b      	ldr	r1, [pc, #236]	; (8004130 <HAL_RCC_ClockConfig+0x224>)
 8004042:	4313      	orrs	r3, r2
 8004044:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0301 	and.w	r3, r3, #1
 800404e:	2b00      	cmp	r3, #0
 8004050:	d051      	beq.n	80040f6 <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d00c      	beq.n	8004074 <HAL_RCC_ClockConfig+0x168>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	2b01      	cmp	r3, #1
 8004060:	d008      	beq.n	8004074 <HAL_RCC_ClockConfig+0x168>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	2b02      	cmp	r3, #2
 8004068:	d004      	beq.n	8004074 <HAL_RCC_ClockConfig+0x168>
 800406a:	f240 3166 	movw	r1, #870	; 0x366
 800406e:	482e      	ldr	r0, [pc, #184]	; (8004128 <HAL_RCC_ClockConfig+0x21c>)
 8004070:	f7fd fb90 	bl	8001794 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	2b01      	cmp	r3, #1
 800407a:	d107      	bne.n	800408c <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800407c:	4b2c      	ldr	r3, [pc, #176]	; (8004130 <HAL_RCC_ClockConfig+0x224>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d115      	bne.n	80040b4 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e0c0      	b.n	800420e <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	2b02      	cmp	r3, #2
 8004092:	d107      	bne.n	80040a4 <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004094:	4b26      	ldr	r3, [pc, #152]	; (8004130 <HAL_RCC_ClockConfig+0x224>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800409c:	2b00      	cmp	r3, #0
 800409e:	d109      	bne.n	80040b4 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e0b4      	b.n	800420e <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040a4:	4b22      	ldr	r3, [pc, #136]	; (8004130 <HAL_RCC_ClockConfig+0x224>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0302 	and.w	r3, r3, #2
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d101      	bne.n	80040b4 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	e0ac      	b.n	800420e <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040b4:	4b1e      	ldr	r3, [pc, #120]	; (8004130 <HAL_RCC_ClockConfig+0x224>)
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f023 0203 	bic.w	r2, r3, #3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	491b      	ldr	r1, [pc, #108]	; (8004130 <HAL_RCC_ClockConfig+0x224>)
 80040c2:	4313      	orrs	r3, r2
 80040c4:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040c6:	f7fe f815 	bl	80020f4 <HAL_GetTick>
 80040ca:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040cc:	e00a      	b.n	80040e4 <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040ce:	f7fe f811 	bl	80020f4 <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80040dc:	4293      	cmp	r3, r2
 80040de:	d901      	bls.n	80040e4 <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 80040e0:	2303      	movs	r3, #3
 80040e2:	e094      	b.n	800420e <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040e4:	4b12      	ldr	r3, [pc, #72]	; (8004130 <HAL_RCC_ClockConfig+0x224>)
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	f003 020c 	and.w	r2, r3, #12
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d1eb      	bne.n	80040ce <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040f6:	4b0d      	ldr	r3, [pc, #52]	; (800412c <HAL_RCC_ClockConfig+0x220>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0307 	and.w	r3, r3, #7
 80040fe:	683a      	ldr	r2, [r7, #0]
 8004100:	429a      	cmp	r2, r3
 8004102:	d217      	bcs.n	8004134 <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004104:	4b09      	ldr	r3, [pc, #36]	; (800412c <HAL_RCC_ClockConfig+0x220>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f023 0207 	bic.w	r2, r3, #7
 800410c:	4907      	ldr	r1, [pc, #28]	; (800412c <HAL_RCC_ClockConfig+0x220>)
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	4313      	orrs	r3, r2
 8004112:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004114:	4b05      	ldr	r3, [pc, #20]	; (800412c <HAL_RCC_ClockConfig+0x220>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 0307 	and.w	r3, r3, #7
 800411c:	683a      	ldr	r2, [r7, #0]
 800411e:	429a      	cmp	r2, r3
 8004120:	d008      	beq.n	8004134 <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e073      	b.n	800420e <HAL_RCC_ClockConfig+0x302>
 8004126:	bf00      	nop
 8004128:	0800c368 	.word	0x0800c368
 800412c:	40022000 	.word	0x40022000
 8004130:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0304 	and.w	r3, r3, #4
 800413c:	2b00      	cmp	r3, #0
 800413e:	d025      	beq.n	800418c <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d018      	beq.n	800417a <HAL_RCC_ClockConfig+0x26e>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004150:	d013      	beq.n	800417a <HAL_RCC_ClockConfig+0x26e>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800415a:	d00e      	beq.n	800417a <HAL_RCC_ClockConfig+0x26e>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004164:	d009      	beq.n	800417a <HAL_RCC_ClockConfig+0x26e>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800416e:	d004      	beq.n	800417a <HAL_RCC_ClockConfig+0x26e>
 8004170:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 8004174:	4828      	ldr	r0, [pc, #160]	; (8004218 <HAL_RCC_ClockConfig+0x30c>)
 8004176:	f7fd fb0d 	bl	8001794 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800417a:	4b28      	ldr	r3, [pc, #160]	; (800421c <HAL_RCC_ClockConfig+0x310>)
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	4925      	ldr	r1, [pc, #148]	; (800421c <HAL_RCC_ClockConfig+0x310>)
 8004188:	4313      	orrs	r3, r2
 800418a:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0308 	and.w	r3, r3, #8
 8004194:	2b00      	cmp	r3, #0
 8004196:	d026      	beq.n	80041e6 <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	691b      	ldr	r3, [r3, #16]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d018      	beq.n	80041d2 <HAL_RCC_ClockConfig+0x2c6>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	691b      	ldr	r3, [r3, #16]
 80041a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041a8:	d013      	beq.n	80041d2 <HAL_RCC_ClockConfig+0x2c6>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	691b      	ldr	r3, [r3, #16]
 80041ae:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80041b2:	d00e      	beq.n	80041d2 <HAL_RCC_ClockConfig+0x2c6>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	691b      	ldr	r3, [r3, #16]
 80041b8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80041bc:	d009      	beq.n	80041d2 <HAL_RCC_ClockConfig+0x2c6>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80041c6:	d004      	beq.n	80041d2 <HAL_RCC_ClockConfig+0x2c6>
 80041c8:	f240 31ab 	movw	r1, #939	; 0x3ab
 80041cc:	4812      	ldr	r0, [pc, #72]	; (8004218 <HAL_RCC_ClockConfig+0x30c>)
 80041ce:	f7fd fae1 	bl	8001794 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80041d2:	4b12      	ldr	r3, [pc, #72]	; (800421c <HAL_RCC_ClockConfig+0x310>)
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	00db      	lsls	r3, r3, #3
 80041e0:	490e      	ldr	r1, [pc, #56]	; (800421c <HAL_RCC_ClockConfig+0x310>)
 80041e2:	4313      	orrs	r3, r2
 80041e4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80041e6:	f000 f821 	bl	800422c <HAL_RCC_GetSysClockFreq>
 80041ea:	4602      	mov	r2, r0
 80041ec:	4b0b      	ldr	r3, [pc, #44]	; (800421c <HAL_RCC_ClockConfig+0x310>)
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	091b      	lsrs	r3, r3, #4
 80041f2:	f003 030f 	and.w	r3, r3, #15
 80041f6:	490a      	ldr	r1, [pc, #40]	; (8004220 <HAL_RCC_ClockConfig+0x314>)
 80041f8:	5ccb      	ldrb	r3, [r1, r3]
 80041fa:	fa22 f303 	lsr.w	r3, r2, r3
 80041fe:	4a09      	ldr	r2, [pc, #36]	; (8004224 <HAL_RCC_ClockConfig+0x318>)
 8004200:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004202:	4b09      	ldr	r3, [pc, #36]	; (8004228 <HAL_RCC_ClockConfig+0x31c>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4618      	mov	r0, r3
 8004208:	f7fd ff32 	bl	8002070 <HAL_InitTick>

  return HAL_OK;
 800420c:	2300      	movs	r3, #0
}
 800420e:	4618      	mov	r0, r3
 8004210:	3710      	adds	r7, #16
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	0800c368 	.word	0x0800c368
 800421c:	40021000 	.word	0x40021000
 8004220:	0800cd1c 	.word	0x0800cd1c
 8004224:	20000000 	.word	0x20000000
 8004228:	20000004 	.word	0x20000004

0800422c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800422c:	b490      	push	{r4, r7}
 800422e:	b08a      	sub	sp, #40	; 0x28
 8004230:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004232:	4b2a      	ldr	r3, [pc, #168]	; (80042dc <HAL_RCC_GetSysClockFreq+0xb0>)
 8004234:	1d3c      	adds	r4, r7, #4
 8004236:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004238:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800423c:	f240 2301 	movw	r3, #513	; 0x201
 8004240:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004242:	2300      	movs	r3, #0
 8004244:	61fb      	str	r3, [r7, #28]
 8004246:	2300      	movs	r3, #0
 8004248:	61bb      	str	r3, [r7, #24]
 800424a:	2300      	movs	r3, #0
 800424c:	627b      	str	r3, [r7, #36]	; 0x24
 800424e:	2300      	movs	r3, #0
 8004250:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004252:	2300      	movs	r3, #0
 8004254:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004256:	4b22      	ldr	r3, [pc, #136]	; (80042e0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	f003 030c 	and.w	r3, r3, #12
 8004262:	2b04      	cmp	r3, #4
 8004264:	d002      	beq.n	800426c <HAL_RCC_GetSysClockFreq+0x40>
 8004266:	2b08      	cmp	r3, #8
 8004268:	d003      	beq.n	8004272 <HAL_RCC_GetSysClockFreq+0x46>
 800426a:	e02d      	b.n	80042c8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800426c:	4b1d      	ldr	r3, [pc, #116]	; (80042e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800426e:	623b      	str	r3, [r7, #32]
      break;
 8004270:	e02d      	b.n	80042ce <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	0c9b      	lsrs	r3, r3, #18
 8004276:	f003 030f 	and.w	r3, r3, #15
 800427a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800427e:	4413      	add	r3, r2
 8004280:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004284:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800428c:	2b00      	cmp	r3, #0
 800428e:	d013      	beq.n	80042b8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004290:	4b13      	ldr	r3, [pc, #76]	; (80042e0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	0c5b      	lsrs	r3, r3, #17
 8004296:	f003 0301 	and.w	r3, r3, #1
 800429a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800429e:	4413      	add	r3, r2
 80042a0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80042a4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	4a0e      	ldr	r2, [pc, #56]	; (80042e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80042aa:	fb02 f203 	mul.w	r2, r2, r3
 80042ae:	69bb      	ldr	r3, [r7, #24]
 80042b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80042b4:	627b      	str	r3, [r7, #36]	; 0x24
 80042b6:	e004      	b.n	80042c2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	4a0b      	ldr	r2, [pc, #44]	; (80042e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80042bc:	fb02 f303 	mul.w	r3, r2, r3
 80042c0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80042c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c4:	623b      	str	r3, [r7, #32]
      break;
 80042c6:	e002      	b.n	80042ce <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80042c8:	4b06      	ldr	r3, [pc, #24]	; (80042e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80042ca:	623b      	str	r3, [r7, #32]
      break;
 80042cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042ce:	6a3b      	ldr	r3, [r7, #32]
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3728      	adds	r7, #40	; 0x28
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bc90      	pop	{r4, r7}
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	0800c3a0 	.word	0x0800c3a0
 80042e0:	40021000 	.word	0x40021000
 80042e4:	007a1200 	.word	0x007a1200
 80042e8:	003d0900 	.word	0x003d0900

080042ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042ec:	b480      	push	{r7}
 80042ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042f0:	4b02      	ldr	r3, [pc, #8]	; (80042fc <HAL_RCC_GetHCLKFreq+0x10>)
 80042f2:	681b      	ldr	r3, [r3, #0]
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bc80      	pop	{r7}
 80042fa:	4770      	bx	lr
 80042fc:	20000000 	.word	0x20000000

08004300 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004304:	f7ff fff2 	bl	80042ec <HAL_RCC_GetHCLKFreq>
 8004308:	4602      	mov	r2, r0
 800430a:	4b05      	ldr	r3, [pc, #20]	; (8004320 <HAL_RCC_GetPCLK1Freq+0x20>)
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	0a1b      	lsrs	r3, r3, #8
 8004310:	f003 0307 	and.w	r3, r3, #7
 8004314:	4903      	ldr	r1, [pc, #12]	; (8004324 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004316:	5ccb      	ldrb	r3, [r1, r3]
 8004318:	fa22 f303 	lsr.w	r3, r2, r3
}
 800431c:	4618      	mov	r0, r3
 800431e:	bd80      	pop	{r7, pc}
 8004320:	40021000 	.word	0x40021000
 8004324:	0800cd2c 	.word	0x0800cd2c

08004328 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800432c:	f7ff ffde 	bl	80042ec <HAL_RCC_GetHCLKFreq>
 8004330:	4602      	mov	r2, r0
 8004332:	4b05      	ldr	r3, [pc, #20]	; (8004348 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	0adb      	lsrs	r3, r3, #11
 8004338:	f003 0307 	and.w	r3, r3, #7
 800433c:	4903      	ldr	r1, [pc, #12]	; (800434c <HAL_RCC_GetPCLK2Freq+0x24>)
 800433e:	5ccb      	ldrb	r3, [r1, r3]
 8004340:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004344:	4618      	mov	r0, r3
 8004346:	bd80      	pop	{r7, pc}
 8004348:	40021000 	.word	0x40021000
 800434c:	0800cd2c 	.word	0x0800cd2c

08004350 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004350:	b480      	push	{r7}
 8004352:	b085      	sub	sp, #20
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004358:	4b0a      	ldr	r3, [pc, #40]	; (8004384 <RCC_Delay+0x34>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a0a      	ldr	r2, [pc, #40]	; (8004388 <RCC_Delay+0x38>)
 800435e:	fba2 2303 	umull	r2, r3, r2, r3
 8004362:	0a5b      	lsrs	r3, r3, #9
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	fb02 f303 	mul.w	r3, r2, r3
 800436a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800436c:	bf00      	nop
  }
  while (Delay --);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	1e5a      	subs	r2, r3, #1
 8004372:	60fa      	str	r2, [r7, #12]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d1f9      	bne.n	800436c <RCC_Delay+0x1c>
}
 8004378:	bf00      	nop
 800437a:	bf00      	nop
 800437c:	3714      	adds	r7, #20
 800437e:	46bd      	mov	sp, r7
 8004380:	bc80      	pop	{r7}
 8004382:	4770      	bx	lr
 8004384:	20000000 	.word	0x20000000
 8004388:	10624dd3 	.word	0x10624dd3

0800438c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b086      	sub	sp, #24
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004394:	2300      	movs	r3, #0
 8004396:	613b      	str	r3, [r7, #16]
 8004398:	2300      	movs	r3, #0
 800439a:	60fb      	str	r3, [r7, #12]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
#endif /* STM32F105xC || STM32F107xC */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0301 	and.w	r3, r3, #1
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d11b      	bne.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0302 	and.w	r3, r3, #2
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d115      	bne.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0304 	and.w	r3, r3, #4
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d10f      	bne.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 0308 	and.w	r3, r3, #8
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d109      	bne.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 0310 	and.w	r3, r3, #16
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d103      	bne.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80043d8:	216c      	movs	r1, #108	; 0x6c
 80043da:	4873      	ldr	r0, [pc, #460]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 80043dc:	f7fd f9da 	bl	8001794 <assert_failed>

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 0301 	and.w	r3, r3, #1
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	f000 8095 	beq.w	8004518 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    FlagStatus pwrclkchanged = RESET;
 80043ee:	2300      	movs	r3, #0
 80043f0:	75fb      	strb	r3, [r7, #23]

    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d012      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x94>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004402:	d00d      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x94>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800440c:	d008      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x94>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004416:	d003      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x94>
 8004418:	2174      	movs	r1, #116	; 0x74
 800441a:	4863      	ldr	r0, [pc, #396]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 800441c:	f7fd f9ba 	bl	8001794 <assert_failed>

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004420:	4b62      	ldr	r3, [pc, #392]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004422:	69db      	ldr	r3, [r3, #28]
 8004424:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004428:	2b00      	cmp	r3, #0
 800442a:	d10d      	bne.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0xbc>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800442c:	4b5f      	ldr	r3, [pc, #380]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x220>)
 800442e:	69db      	ldr	r3, [r3, #28]
 8004430:	4a5e      	ldr	r2, [pc, #376]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004432:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004436:	61d3      	str	r3, [r2, #28]
 8004438:	4b5c      	ldr	r3, [pc, #368]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x220>)
 800443a:	69db      	ldr	r3, [r3, #28]
 800443c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004440:	60bb      	str	r3, [r7, #8]
 8004442:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004444:	2301      	movs	r3, #1
 8004446:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004448:	4b59      	ldr	r3, [pc, #356]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004450:	2b00      	cmp	r3, #0
 8004452:	d118      	bne.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0xfa>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004454:	4b56      	ldr	r3, [pc, #344]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a55      	ldr	r2, [pc, #340]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800445a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800445e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004460:	f7fd fe48 	bl	80020f4 <HAL_GetTick>
 8004464:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004466:	e008      	b.n	800447a <HAL_RCCEx_PeriphCLKConfig+0xee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004468:	f7fd fe44 	bl	80020f4 <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	2b64      	cmp	r3, #100	; 0x64
 8004474:	d901      	bls.n	800447a <HAL_RCCEx_PeriphCLKConfig+0xee>
        {
          return HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	e092      	b.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x214>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800447a:	4b4d      	ldr	r3, [pc, #308]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004482:	2b00      	cmp	r3, #0
 8004484:	d0f0      	beq.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0xdc>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004486:	4b49      	ldr	r3, [pc, #292]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004488:	6a1b      	ldr	r3, [r3, #32]
 800448a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800448e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d02e      	beq.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800449e:	68fa      	ldr	r2, [r7, #12]
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d027      	beq.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80044a4:	4b41      	ldr	r3, [pc, #260]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80044a6:	6a1b      	ldr	r3, [r3, #32]
 80044a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044ac:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80044ae:	4b41      	ldr	r3, [pc, #260]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80044b0:	2201      	movs	r2, #1
 80044b2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80044b4:	4b3f      	ldr	r3, [pc, #252]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80044b6:	2200      	movs	r2, #0
 80044b8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80044ba:	4a3c      	ldr	r2, [pc, #240]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f003 0301 	and.w	r3, r3, #1
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d014      	beq.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044ca:	f7fd fe13 	bl	80020f4 <HAL_GetTick>
 80044ce:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044d0:	e00a      	b.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044d2:	f7fd fe0f 	bl	80020f4 <HAL_GetTick>
 80044d6:	4602      	mov	r2, r0
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	1ad3      	subs	r3, r2, r3
 80044dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d901      	bls.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          {
            return HAL_TIMEOUT;
 80044e4:	2303      	movs	r3, #3
 80044e6:	e05b      	b.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x214>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044e8:	4b30      	ldr	r3, [pc, #192]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80044ea:	6a1b      	ldr	r3, [r3, #32]
 80044ec:	f003 0302 	and.w	r3, r3, #2
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d0ee      	beq.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x146>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044f4:	4b2d      	ldr	r3, [pc, #180]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80044f6:	6a1b      	ldr	r3, [r3, #32]
 80044f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	492a      	ldr	r1, [pc, #168]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004502:	4313      	orrs	r3, r2
 8004504:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004506:	7dfb      	ldrb	r3, [r7, #23]
 8004508:	2b01      	cmp	r3, #1
 800450a:	d105      	bne.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800450c:	4b27      	ldr	r3, [pc, #156]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x220>)
 800450e:	69db      	ldr	r3, [r3, #28]
 8004510:	4a26      	ldr	r2, [pc, #152]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004512:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004516:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0302 	and.w	r3, r3, #2
 8004520:	2b00      	cmp	r3, #0
 8004522:	d01f      	beq.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d012      	beq.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004534:	d00d      	beq.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800453e:	d008      	beq.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004548:	d003      	beq.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 800454a:	21b9      	movs	r1, #185	; 0xb9
 800454c:	4816      	ldr	r0, [pc, #88]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 800454e:	f7fd f921 	bl	8001794 <assert_failed>

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004552:	4b16      	ldr	r3, [pc, #88]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	4913      	ldr	r1, [pc, #76]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004560:	4313      	orrs	r3, r2
 8004562:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0310 	and.w	r3, r3, #16
 800456c:	2b00      	cmp	r3, #0
 800456e:	d016      	beq.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x212>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	695b      	ldr	r3, [r3, #20]
 8004574:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004578:	d008      	beq.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	695b      	ldr	r3, [r3, #20]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d004      	beq.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004582:	f240 1115 	movw	r1, #277	; 0x115
 8004586:	4808      	ldr	r0, [pc, #32]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8004588:	f7fd f904 	bl	8001794 <assert_failed>

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800458c:	4b07      	ldr	r3, [pc, #28]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x220>)
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	695b      	ldr	r3, [r3, #20]
 8004598:	4904      	ldr	r1, [pc, #16]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x220>)
 800459a:	4313      	orrs	r3, r2
 800459c:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800459e:	2300      	movs	r3, #0
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3718      	adds	r7, #24
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}
 80045a8:	0800c3b0 	.word	0x0800c3b0
 80045ac:	40021000 	.word	0x40021000
 80045b0:	40007000 	.word	0x40007000
 80045b4:	42420440 	.word	0x42420440

080045b8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80045b8:	b590      	push	{r4, r7, lr}
 80045ba:	b08d      	sub	sp, #52	; 0x34
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80045c0:	4b7a      	ldr	r3, [pc, #488]	; (80047ac <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>)
 80045c2:	f107 040c 	add.w	r4, r7, #12
 80045c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80045c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80045cc:	f240 2301 	movw	r3, #513	; 0x201
 80045d0:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80045d2:	2300      	movs	r3, #0
 80045d4:	627b      	str	r3, [r7, #36]	; 0x24
 80045d6:	2300      	movs	r3, #0
 80045d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045da:	2300      	movs	r3, #0
 80045dc:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80045de:	2300      	movs	r3, #0
 80045e0:	61fb      	str	r3, [r7, #28]
 80045e2:	2300      	movs	r3, #0
 80045e4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f003 0301 	and.w	r3, r3, #1
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d118      	bne.n	8004622 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f003 0302 	and.w	r3, r3, #2
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d113      	bne.n	8004622 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f003 0304 	and.w	r3, r3, #4
 8004600:	2b00      	cmp	r3, #0
 8004602:	d10e      	bne.n	8004622 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f003 0308 	and.w	r3, r3, #8
 800460a:	2b00      	cmp	r3, #0
 800460c:	d109      	bne.n	8004622 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f003 0310 	and.w	r3, r3, #16
 8004614:	2b00      	cmp	r3, #0
 8004616:	d104      	bne.n	8004622 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 8004618:	f44f 71cb 	mov.w	r1, #406	; 0x196
 800461c:	4864      	ldr	r0, [pc, #400]	; (80047b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8>)
 800461e:	f7fd f8b9 	bl	8001794 <assert_failed>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	3b01      	subs	r3, #1
 8004626:	2b0f      	cmp	r3, #15
 8004628:	f200 80b6 	bhi.w	8004798 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800462c:	a201      	add	r2, pc, #4	; (adr r2, 8004634 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>)
 800462e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004632:	bf00      	nop
 8004634:	08004717 	.word	0x08004717
 8004638:	0800477d 	.word	0x0800477d
 800463c:	08004799 	.word	0x08004799
 8004640:	08004707 	.word	0x08004707
 8004644:	08004799 	.word	0x08004799
 8004648:	08004799 	.word	0x08004799
 800464c:	08004799 	.word	0x08004799
 8004650:	0800470f 	.word	0x0800470f
 8004654:	08004799 	.word	0x08004799
 8004658:	08004799 	.word	0x08004799
 800465c:	08004799 	.word	0x08004799
 8004660:	08004799 	.word	0x08004799
 8004664:	08004799 	.word	0x08004799
 8004668:	08004799 	.word	0x08004799
 800466c:	08004799 	.word	0x08004799
 8004670:	08004675 	.word	0x08004675
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8004674:	4b4f      	ldr	r3, [pc, #316]	; (80047b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	61fb      	str	r3, [r7, #28]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800467a:	4b4e      	ldr	r3, [pc, #312]	; (80047b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004682:	2b00      	cmp	r3, #0
 8004684:	f000 808a 	beq.w	800479c <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004688:	69fb      	ldr	r3, [r7, #28]
 800468a:	0c9b      	lsrs	r3, r3, #18
 800468c:	f003 030f 	and.w	r3, r3, #15
 8004690:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004694:	4413      	add	r3, r2
 8004696:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800469a:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d018      	beq.n	80046d8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80046a6:	4b43      	ldr	r3, [pc, #268]	; (80047b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	0c5b      	lsrs	r3, r3, #17
 80046ac:	f003 0301 	and.w	r3, r3, #1
 80046b0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80046b4:	4413      	add	r3, r2
 80046b6:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80046ba:	627b      	str	r3, [r7, #36]	; 0x24
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80046bc:	69fb      	ldr	r3, [r7, #28]
 80046be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d00d      	beq.n	80046e2 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80046c6:	4a3c      	ldr	r2, [pc, #240]	; (80047b8 <HAL_RCCEx_GetPeriphCLKFreq+0x200>)
 80046c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ca:	fbb2 f2f3 	udiv	r2, r2, r3
 80046ce:	6a3b      	ldr	r3, [r7, #32]
 80046d0:	fb02 f303 	mul.w	r3, r2, r3
 80046d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046d6:	e004      	b.n	80046e2 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80046d8:	6a3b      	ldr	r3, [r7, #32]
 80046da:	4a38      	ldr	r2, [pc, #224]	; (80047bc <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 80046dc:	fb02 f303 	mul.w	r3, r2, r3
 80046e0:	62fb      	str	r3, [r7, #44]	; 0x2c
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80046e2:	4b34      	ldr	r3, [pc, #208]	; (80047b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046ee:	d102      	bne.n	80046f6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 80046f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046f2:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 80046f4:	e052      	b.n	800479c <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
          frequency = (pllclk * 2) / 3;
 80046f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046f8:	005b      	lsls	r3, r3, #1
 80046fa:	4a31      	ldr	r2, [pc, #196]	; (80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>)
 80046fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004700:	085b      	lsrs	r3, r3, #1
 8004702:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004704:	e04a      	b.n	800479c <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 8004706:	f7ff fd91 	bl	800422c <HAL_RCC_GetSysClockFreq>
 800470a:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 800470c:	e049      	b.n	80047a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 800470e:	f7ff fd8d 	bl	800422c <HAL_RCC_GetSysClockFreq>
 8004712:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8004714:	e045      	b.n	80047a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8004716:	4b27      	ldr	r3, [pc, #156]	; (80047b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 8004718:	6a1b      	ldr	r3, [r3, #32]
 800471a:	61fb      	str	r3, [r7, #28]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004722:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004726:	d108      	bne.n	800473a <HAL_RCCEx_GetPeriphCLKFreq+0x182>
 8004728:	69fb      	ldr	r3, [r7, #28]
 800472a:	f003 0302 	and.w	r3, r3, #2
 800472e:	2b00      	cmp	r3, #0
 8004730:	d003      	beq.n	800473a <HAL_RCCEx_GetPeriphCLKFreq+0x182>
      {
        frequency = LSE_VALUE;
 8004732:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004736:	62bb      	str	r3, [r7, #40]	; 0x28
 8004738:	e01f      	b.n	800477a <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004740:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004744:	d109      	bne.n	800475a <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 8004746:	4b1b      	ldr	r3, [pc, #108]	; (80047b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 8004748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474a:	f003 0302 	and.w	r3, r3, #2
 800474e:	2b00      	cmp	r3, #0
 8004750:	d003      	beq.n	800475a <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
      {
        frequency = LSI_VALUE;
 8004752:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004756:	62bb      	str	r3, [r7, #40]	; 0x28
 8004758:	e00f      	b.n	800477a <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004760:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004764:	d11c      	bne.n	80047a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
 8004766:	4b13      	ldr	r3, [pc, #76]	; (80047b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800476e:	2b00      	cmp	r3, #0
 8004770:	d016      	beq.n	80047a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
      {
        frequency = HSE_VALUE / 128U;
 8004772:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004776:	62bb      	str	r3, [r7, #40]	; 0x28
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8004778:	e012      	b.n	80047a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
 800477a:	e011      	b.n	80047a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800477c:	f7ff fdd4 	bl	8004328 <HAL_RCC_GetPCLK2Freq>
 8004780:	4602      	mov	r2, r0
 8004782:	4b0c      	ldr	r3, [pc, #48]	; (80047b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	0b9b      	lsrs	r3, r3, #14
 8004788:	f003 0303 	and.w	r3, r3, #3
 800478c:	3301      	adds	r3, #1
 800478e:	005b      	lsls	r3, r3, #1
 8004790:	fbb2 f3f3 	udiv	r3, r2, r3
 8004794:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004796:	e004      	b.n	80047a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
    }
    default:
    {
      break;
 8004798:	bf00      	nop
 800479a:	e002      	b.n	80047a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
      break;
 800479c:	bf00      	nop
 800479e:	e000      	b.n	80047a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
      break;
 80047a0:	bf00      	nop
    }
  }
  return (frequency);
 80047a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3734      	adds	r7, #52	; 0x34
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd90      	pop	{r4, r7, pc}
 80047ac:	0800c3ec 	.word	0x0800c3ec
 80047b0:	0800c3b0 	.word	0x0800c3b0
 80047b4:	40021000 	.word	0x40021000
 80047b8:	007a1200 	.word	0x007a1200
 80047bc:	003d0900 	.word	0x003d0900
 80047c0:	aaaaaaab 	.word	0xaaaaaaab

080047c4 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b084      	sub	sp, #16
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80047cc:	2300      	movs	r3, #0
 80047ce:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d101      	bne.n	80047da <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e0b4      	b.n	8004944 <HAL_RTC_Init+0x180>
  }

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a5b      	ldr	r2, [pc, #364]	; (800494c <HAL_RTC_Init+0x188>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d004      	beq.n	80047ee <HAL_RTC_Init+0x2a>
 80047e4:	f240 111d 	movw	r1, #285	; 0x11d
 80047e8:	4859      	ldr	r0, [pc, #356]	; (8004950 <HAL_RTC_Init+0x18c>)
 80047ea:	f7fc ffd3 	bl	8001794 <assert_failed>
  assert_param(IS_RTC_CALIB_OUTPUT(hrtc->Init.OutPut));
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d012      	beq.n	800481c <HAL_RTC_Init+0x58>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	2b80      	cmp	r3, #128	; 0x80
 80047fc:	d00e      	beq.n	800481c <HAL_RTC_Init+0x58>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004806:	d009      	beq.n	800481c <HAL_RTC_Init+0x58>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004810:	d004      	beq.n	800481c <HAL_RTC_Init+0x58>
 8004812:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8004816:	484e      	ldr	r0, [pc, #312]	; (8004950 <HAL_RTC_Init+0x18c>)
 8004818:	f7fc ffbc 	bl	8001794 <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004824:	d309      	bcc.n	800483a <HAL_RTC_Init+0x76>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800482e:	d004      	beq.n	800483a <HAL_RTC_Init+0x76>
 8004830:	f240 111f 	movw	r1, #287	; 0x11f
 8004834:	4846      	ldr	r0, [pc, #280]	; (8004950 <HAL_RTC_Init+0x18c>)
 8004836:	f7fc ffad 	bl	8001794 <assert_failed>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	7c5b      	ldrb	r3, [r3, #17]
 800483e:	b2db      	uxtb	r3, r3
 8004840:	2b00      	cmp	r3, #0
 8004842:	d105      	bne.n	8004850 <HAL_RTC_Init+0x8c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2200      	movs	r2, #0
 8004848:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f7fd f822 	bl	8001894 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2202      	movs	r2, #2
 8004854:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f000 fbca 	bl	8004ff0 <HAL_RTC_WaitForSynchro>
 800485c:	4603      	mov	r3, r0
 800485e:	2b00      	cmp	r3, #0
 8004860:	d004      	beq.n	800486c <HAL_RTC_Init+0xa8>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2204      	movs	r2, #4
 8004866:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	e06b      	b.n	8004944 <HAL_RTC_Init+0x180>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f000 fc83 	bl	8005178 <RTC_EnterInitMode>
 8004872:	4603      	mov	r3, r0
 8004874:	2b00      	cmp	r3, #0
 8004876:	d004      	beq.n	8004882 <HAL_RTC_Init+0xbe>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2204      	movs	r2, #4
 800487c:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e060      	b.n	8004944 <HAL_RTC_Init+0x180>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	685a      	ldr	r2, [r3, #4]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f022 0207 	bic.w	r2, r2, #7
 8004890:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d005      	beq.n	80048a6 <HAL_RTC_Init+0xe2>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800489a:	4b2e      	ldr	r3, [pc, #184]	; (8004954 <HAL_RTC_Init+0x190>)
 800489c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800489e:	4a2d      	ldr	r2, [pc, #180]	; (8004954 <HAL_RTC_Init+0x190>)
 80048a0:	f023 0301 	bic.w	r3, r3, #1
 80048a4:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80048a6:	4b2b      	ldr	r3, [pc, #172]	; (8004954 <HAL_RTC_Init+0x190>)
 80048a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048aa:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	4928      	ldr	r1, [pc, #160]	; (8004954 <HAL_RTC_Init+0x190>)
 80048b4:	4313      	orrs	r3, r2
 80048b6:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048c0:	d003      	beq.n	80048ca <HAL_RTC_Init+0x106>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	60fb      	str	r3, [r7, #12]
 80048c8:	e00e      	b.n	80048e8 <HAL_RTC_Init+0x124>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80048ca:	2001      	movs	r0, #1
 80048cc:	f7ff fe74 	bl	80045b8 <HAL_RCCEx_GetPeriphCLKFreq>
 80048d0:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d104      	bne.n	80048e2 <HAL_RTC_Init+0x11e>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2204      	movs	r2, #4
 80048dc:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e030      	b.n	8004944 <HAL_RTC_Init+0x180>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	3b01      	subs	r3, #1
 80048e6:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	f023 010f 	bic.w	r1, r3, #15
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	0c1a      	lsrs	r2, r3, #16
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	430a      	orrs	r2, r1
 80048fc:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	0c1b      	lsrs	r3, r3, #16
 8004906:	041b      	lsls	r3, r3, #16
 8004908:	68fa      	ldr	r2, [r7, #12]
 800490a:	b291      	uxth	r1, r2
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	6812      	ldr	r2, [r2, #0]
 8004910:	430b      	orrs	r3, r1
 8004912:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f000 fc57 	bl	80051c8 <RTC_ExitInitMode>
 800491a:	4603      	mov	r3, r0
 800491c:	2b00      	cmp	r3, #0
 800491e:	d004      	beq.n	800492a <HAL_RTC_Init+0x166>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2204      	movs	r2, #4
 8004924:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e00c      	b.n	8004944 <HAL_RTC_Init+0x180>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2201      	movs	r2, #1
 800493a:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8004942:	2300      	movs	r3, #0
  }
}
 8004944:	4618      	mov	r0, r3
 8004946:	3710      	adds	r7, #16
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}
 800494c:	40002800 	.word	0x40002800
 8004950:	0800c3fc 	.word	0x0800c3fc
 8004954:	40006c00 	.word	0x40006c00

08004958 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004958:	b590      	push	{r4, r7, lr}
 800495a:	b087      	sub	sp, #28
 800495c:	af00      	add	r7, sp, #0
 800495e:	60f8      	str	r0, [r7, #12]
 8004960:	60b9      	str	r1, [r7, #8]
 8004962:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8004964:	2300      	movs	r3, #0
 8004966:	617b      	str	r3, [r7, #20]
 8004968:	2300      	movs	r3, #0
 800496a:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d002      	beq.n	8004978 <HAL_RTC_SetTime+0x20>
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d101      	bne.n	800497c <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	e0cd      	b.n	8004b18 <HAL_RTC_SetTime+0x1c0>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d007      	beq.n	8004992 <HAL_RTC_SetTime+0x3a>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2b01      	cmp	r3, #1
 8004986:	d004      	beq.n	8004992 <HAL_RTC_SetTime+0x3a>
 8004988:	f240 21ca 	movw	r1, #714	; 0x2ca
 800498c:	4864      	ldr	r0, [pc, #400]	; (8004b20 <HAL_RTC_SetTime+0x1c8>)
 800498e:	f7fc ff01 	bl	8001794 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	7c1b      	ldrb	r3, [r3, #16]
 8004996:	2b01      	cmp	r3, #1
 8004998:	d101      	bne.n	800499e <HAL_RTC_SetTime+0x46>
 800499a:	2302      	movs	r3, #2
 800499c:	e0bc      	b.n	8004b18 <HAL_RTC_SetTime+0x1c0>
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2201      	movs	r2, #1
 80049a2:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2202      	movs	r2, #2
 80049a8:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d12e      	bne.n	8004a0e <HAL_RTC_SetTime+0xb6>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	781b      	ldrb	r3, [r3, #0]
 80049b4:	2b17      	cmp	r3, #23
 80049b6:	d904      	bls.n	80049c2 <HAL_RTC_SetTime+0x6a>
 80049b8:	f240 21d3 	movw	r1, #723	; 0x2d3
 80049bc:	4858      	ldr	r0, [pc, #352]	; (8004b20 <HAL_RTC_SetTime+0x1c8>)
 80049be:	f7fc fee9 	bl	8001794 <assert_failed>
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	785b      	ldrb	r3, [r3, #1]
 80049c6:	2b3b      	cmp	r3, #59	; 0x3b
 80049c8:	d904      	bls.n	80049d4 <HAL_RTC_SetTime+0x7c>
 80049ca:	f44f 7135 	mov.w	r1, #724	; 0x2d4
 80049ce:	4854      	ldr	r0, [pc, #336]	; (8004b20 <HAL_RTC_SetTime+0x1c8>)
 80049d0:	f7fc fee0 	bl	8001794 <assert_failed>
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	789b      	ldrb	r3, [r3, #2]
 80049d8:	2b3b      	cmp	r3, #59	; 0x3b
 80049da:	d904      	bls.n	80049e6 <HAL_RTC_SetTime+0x8e>
 80049dc:	f240 21d5 	movw	r1, #725	; 0x2d5
 80049e0:	484f      	ldr	r0, [pc, #316]	; (8004b20 <HAL_RTC_SetTime+0x1c8>)
 80049e2:	f7fc fed7 	bl	8001794 <assert_failed>

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	781b      	ldrb	r3, [r3, #0]
 80049ea:	461a      	mov	r2, r3
 80049ec:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80049f0:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	785b      	ldrb	r3, [r3, #1]
 80049f8:	4619      	mov	r1, r3
 80049fa:	460b      	mov	r3, r1
 80049fc:	011b      	lsls	r3, r3, #4
 80049fe:	1a5b      	subs	r3, r3, r1
 8004a00:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8004a02:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8004a04:	68ba      	ldr	r2, [r7, #8]
 8004a06:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8004a08:	4413      	add	r3, r2
 8004a0a:	617b      	str	r3, [r7, #20]
 8004a0c:	e045      	b.n	8004a9a <HAL_RTC_SetTime+0x142>
  }
  else
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	781b      	ldrb	r3, [r3, #0]
 8004a12:	4618      	mov	r0, r3
 8004a14:	f000 fc1d 	bl	8005252 <RTC_Bcd2ToByte>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b17      	cmp	r3, #23
 8004a1c:	d904      	bls.n	8004a28 <HAL_RTC_SetTime+0xd0>
 8004a1e:	f240 21dd 	movw	r1, #733	; 0x2dd
 8004a22:	483f      	ldr	r0, [pc, #252]	; (8004b20 <HAL_RTC_SetTime+0x1c8>)
 8004a24:	f7fc feb6 	bl	8001794 <assert_failed>
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	785b      	ldrb	r3, [r3, #1]
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f000 fc10 	bl	8005252 <RTC_Bcd2ToByte>
 8004a32:	4603      	mov	r3, r0
 8004a34:	2b3b      	cmp	r3, #59	; 0x3b
 8004a36:	d904      	bls.n	8004a42 <HAL_RTC_SetTime+0xea>
 8004a38:	f240 21de 	movw	r1, #734	; 0x2de
 8004a3c:	4838      	ldr	r0, [pc, #224]	; (8004b20 <HAL_RTC_SetTime+0x1c8>)
 8004a3e:	f7fc fea9 	bl	8001794 <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	789b      	ldrb	r3, [r3, #2]
 8004a46:	4618      	mov	r0, r3
 8004a48:	f000 fc03 	bl	8005252 <RTC_Bcd2ToByte>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	2b3b      	cmp	r3, #59	; 0x3b
 8004a50:	d904      	bls.n	8004a5c <HAL_RTC_SetTime+0x104>
 8004a52:	f240 21df 	movw	r1, #735	; 0x2df
 8004a56:	4832      	ldr	r0, [pc, #200]	; (8004b20 <HAL_RTC_SetTime+0x1c8>)
 8004a58:	f7fc fe9c 	bl	8001794 <assert_failed>

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	781b      	ldrb	r3, [r3, #0]
 8004a60:	4618      	mov	r0, r3
 8004a62:	f000 fbf6 	bl	8005252 <RTC_Bcd2ToByte>
 8004a66:	4603      	mov	r3, r0
 8004a68:	461a      	mov	r2, r3
 8004a6a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004a6e:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	785b      	ldrb	r3, [r3, #1]
 8004a76:	4618      	mov	r0, r3
 8004a78:	f000 fbeb 	bl	8005252 <RTC_Bcd2ToByte>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	461a      	mov	r2, r3
 8004a80:	4613      	mov	r3, r2
 8004a82:	011b      	lsls	r3, r3, #4
 8004a84:	1a9b      	subs	r3, r3, r2
 8004a86:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004a88:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	789b      	ldrb	r3, [r3, #2]
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f000 fbdf 	bl	8005252 <RTC_Bcd2ToByte>
 8004a94:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004a96:	4423      	add	r3, r4
 8004a98:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004a9a:	6979      	ldr	r1, [r7, #20]
 8004a9c:	68f8      	ldr	r0, [r7, #12]
 8004a9e:	f000 fb04 	bl	80050aa <RTC_WriteTimeCounter>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d007      	beq.n	8004ab8 <HAL_RTC_SetTime+0x160>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2204      	movs	r2, #4
 8004aac:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e02f      	b.n	8004b18 <HAL_RTC_SetTime+0x1c0>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	685a      	ldr	r2, [r3, #4]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f022 0205 	bic.w	r2, r2, #5
 8004ac6:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004ac8:	68f8      	ldr	r0, [r7, #12]
 8004aca:	f000 fb15 	bl	80050f8 <RTC_ReadAlarmCounter>
 8004ace:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ad6:	d018      	beq.n	8004b0a <HAL_RTC_SetTime+0x1b2>
    {
      if (counter_alarm < counter_time)
 8004ad8:	693a      	ldr	r2, [r7, #16]
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d214      	bcs.n	8004b0a <HAL_RTC_SetTime+0x1b2>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8004ae6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004aea:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004aec:	6939      	ldr	r1, [r7, #16]
 8004aee:	68f8      	ldr	r0, [r7, #12]
 8004af0:	f000 fb1b 	bl	800512a <RTC_WriteAlarmCounter>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d007      	beq.n	8004b0a <HAL_RTC_SetTime+0x1b2>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2204      	movs	r2, #4
 8004afe:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2200      	movs	r2, #0
 8004b04:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e006      	b.n	8004b18 <HAL_RTC_SetTime+0x1c0>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2200      	movs	r2, #0
 8004b14:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8004b16:	2300      	movs	r3, #0
  }
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	371c      	adds	r7, #28
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd90      	pop	{r4, r7, pc}
 8004b20:	0800c3fc 	.word	0x0800c3fc

08004b24 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b088      	sub	sp, #32
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8004b30:	2300      	movs	r3, #0
 8004b32:	61bb      	str	r3, [r7, #24]
 8004b34:	2300      	movs	r3, #0
 8004b36:	61fb      	str	r3, [r7, #28]
 8004b38:	2300      	movs	r3, #0
 8004b3a:	617b      	str	r3, [r7, #20]
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d002      	beq.n	8004b4c <HAL_RTC_GetTime+0x28>
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d101      	bne.n	8004b50 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e0c0      	b.n	8004cd2 <HAL_RTC_GetTime+0x1ae>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d007      	beq.n	8004b66 <HAL_RTC_GetTime+0x42>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d004      	beq.n	8004b66 <HAL_RTC_GetTime+0x42>
 8004b5c:	f240 312d 	movw	r1, #813	; 0x32d
 8004b60:	485e      	ldr	r0, [pc, #376]	; (8004cdc <HAL_RTC_GetTime+0x1b8>)
 8004b62:	f7fc fe17 	bl	8001794 <assert_failed>

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	f003 0304 	and.w	r3, r3, #4
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d001      	beq.n	8004b78 <HAL_RTC_GetTime+0x54>
  {
    return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e0ac      	b.n	8004cd2 <HAL_RTC_GetTime+0x1ae>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8004b78:	68f8      	ldr	r0, [r7, #12]
 8004b7a:	f000 fa66 	bl	800504a <RTC_ReadTimeCounter>
 8004b7e:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8004b80:	69bb      	ldr	r3, [r7, #24]
 8004b82:	4a57      	ldr	r2, [pc, #348]	; (8004ce0 <HAL_RTC_GetTime+0x1bc>)
 8004b84:	fba2 2303 	umull	r2, r3, r2, r3
 8004b88:	0adb      	lsrs	r3, r3, #11
 8004b8a:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8004b8c:	69ba      	ldr	r2, [r7, #24]
 8004b8e:	4b54      	ldr	r3, [pc, #336]	; (8004ce0 <HAL_RTC_GetTime+0x1bc>)
 8004b90:	fba3 1302 	umull	r1, r3, r3, r2
 8004b94:	0adb      	lsrs	r3, r3, #11
 8004b96:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8004b9a:	fb01 f303 	mul.w	r3, r1, r3
 8004b9e:	1ad3      	subs	r3, r2, r3
 8004ba0:	4a50      	ldr	r2, [pc, #320]	; (8004ce4 <HAL_RTC_GetTime+0x1c0>)
 8004ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ba6:	095b      	lsrs	r3, r3, #5
 8004ba8:	b2da      	uxtb	r2, r3
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8004bae:	69bb      	ldr	r3, [r7, #24]
 8004bb0:	4a4b      	ldr	r2, [pc, #300]	; (8004ce0 <HAL_RTC_GetTime+0x1bc>)
 8004bb2:	fba2 1203 	umull	r1, r2, r2, r3
 8004bb6:	0ad2      	lsrs	r2, r2, #11
 8004bb8:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8004bbc:	fb01 f202 	mul.w	r2, r1, r2
 8004bc0:	1a9a      	subs	r2, r3, r2
 8004bc2:	4b48      	ldr	r3, [pc, #288]	; (8004ce4 <HAL_RTC_GetTime+0x1c0>)
 8004bc4:	fba3 1302 	umull	r1, r3, r3, r2
 8004bc8:	0959      	lsrs	r1, r3, #5
 8004bca:	460b      	mov	r3, r1
 8004bcc:	011b      	lsls	r3, r3, #4
 8004bce:	1a5b      	subs	r3, r3, r1
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	1ad1      	subs	r1, r2, r3
 8004bd4:	b2ca      	uxtb	r2, r1
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	2b17      	cmp	r3, #23
 8004bde:	d955      	bls.n	8004c8c <HAL_RTC_GetTime+0x168>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	4a41      	ldr	r2, [pc, #260]	; (8004ce8 <HAL_RTC_GetTime+0x1c4>)
 8004be4:	fba2 2303 	umull	r2, r3, r2, r3
 8004be8:	091b      	lsrs	r3, r3, #4
 8004bea:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8004bec:	6939      	ldr	r1, [r7, #16]
 8004bee:	4b3e      	ldr	r3, [pc, #248]	; (8004ce8 <HAL_RTC_GetTime+0x1c4>)
 8004bf0:	fba3 2301 	umull	r2, r3, r3, r1
 8004bf4:	091a      	lsrs	r2, r3, #4
 8004bf6:	4613      	mov	r3, r2
 8004bf8:	005b      	lsls	r3, r3, #1
 8004bfa:	4413      	add	r3, r2
 8004bfc:	00db      	lsls	r3, r3, #3
 8004bfe:	1aca      	subs	r2, r1, r3
 8004c00:	b2d2      	uxtb	r2, r2
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004c06:	68f8      	ldr	r0, [r7, #12]
 8004c08:	f000 fa76 	bl	80050f8 <RTC_ReadAlarmCounter>
 8004c0c:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c14:	d008      	beq.n	8004c28 <HAL_RTC_GetTime+0x104>
 8004c16:	69fa      	ldr	r2, [r7, #28]
 8004c18:	69bb      	ldr	r3, [r7, #24]
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d904      	bls.n	8004c28 <HAL_RTC_GetTime+0x104>
    {
      counter_alarm -= counter_time;
 8004c1e:	69fa      	ldr	r2, [r7, #28]
 8004c20:	69bb      	ldr	r3, [r7, #24]
 8004c22:	1ad3      	subs	r3, r2, r3
 8004c24:	61fb      	str	r3, [r7, #28]
 8004c26:	e002      	b.n	8004c2e <HAL_RTC_GetTime+0x10a>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8004c28:	f04f 33ff 	mov.w	r3, #4294967295
 8004c2c:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	4a2e      	ldr	r2, [pc, #184]	; (8004cec <HAL_RTC_GetTime+0x1c8>)
 8004c32:	fb02 f303 	mul.w	r3, r2, r3
 8004c36:	69ba      	ldr	r2, [r7, #24]
 8004c38:	1ad3      	subs	r3, r2, r3
 8004c3a:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004c3c:	69b9      	ldr	r1, [r7, #24]
 8004c3e:	68f8      	ldr	r0, [r7, #12]
 8004c40:	f000 fa33 	bl	80050aa <RTC_WriteTimeCounter>
 8004c44:	4603      	mov	r3, r0
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d001      	beq.n	8004c4e <HAL_RTC_GetTime+0x12a>
    {
      return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e041      	b.n	8004cd2 <HAL_RTC_GetTime+0x1ae>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004c4e:	69fb      	ldr	r3, [r7, #28]
 8004c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c54:	d00c      	beq.n	8004c70 <HAL_RTC_GetTime+0x14c>
    {
      counter_alarm += counter_time;
 8004c56:	69fa      	ldr	r2, [r7, #28]
 8004c58:	69bb      	ldr	r3, [r7, #24]
 8004c5a:	4413      	add	r3, r2
 8004c5c:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004c5e:	69f9      	ldr	r1, [r7, #28]
 8004c60:	68f8      	ldr	r0, [r7, #12]
 8004c62:	f000 fa62 	bl	800512a <RTC_WriteAlarmCounter>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d00a      	beq.n	8004c82 <HAL_RTC_GetTime+0x15e>
      {
        return HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e030      	b.n	8004cd2 <HAL_RTC_GetTime+0x1ae>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004c70:	69f9      	ldr	r1, [r7, #28]
 8004c72:	68f8      	ldr	r0, [r7, #12]
 8004c74:	f000 fa59 	bl	800512a <RTC_WriteAlarmCounter>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d001      	beq.n	8004c82 <HAL_RTC_GetTime+0x15e>
      {
        return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e027      	b.n	8004cd2 <HAL_RTC_GetTime+0x1ae>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8004c82:	6979      	ldr	r1, [r7, #20]
 8004c84:	68f8      	ldr	r0, [r7, #12]
 8004c86:	f000 fb01 	bl	800528c <RTC_DateUpdate>
 8004c8a:	e003      	b.n	8004c94 <HAL_RTC_GetTime+0x170>
  }
  else
  {
    sTime->Hours = hours;
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	b2da      	uxtb	r2, r3
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d01a      	beq.n	8004cd0 <HAL_RTC_GetTime+0x1ac>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f000 faba 	bl	8005218 <RTC_ByteToBcd2>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	785b      	ldrb	r3, [r3, #1]
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f000 fab1 	bl	8005218 <RTC_ByteToBcd2>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	461a      	mov	r2, r3
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	789b      	ldrb	r3, [r3, #2]
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f000 faa8 	bl	8005218 <RTC_ByteToBcd2>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	461a      	mov	r2, r3
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004cd0:	2300      	movs	r3, #0
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3720      	adds	r7, #32
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	bf00      	nop
 8004cdc:	0800c3fc 	.word	0x0800c3fc
 8004ce0:	91a2b3c5 	.word	0x91a2b3c5
 8004ce4:	88888889 	.word	0x88888889
 8004ce8:	aaaaaaab 	.word	0xaaaaaaab
 8004cec:	00015180 	.word	0x00015180

08004cf0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b088      	sub	sp, #32
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	60f8      	str	r0, [r7, #12]
 8004cf8:	60b9      	str	r1, [r7, #8]
 8004cfa:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	61fb      	str	r3, [r7, #28]
 8004d00:	2300      	movs	r3, #0
 8004d02:	61bb      	str	r3, [r7, #24]
 8004d04:	2300      	movs	r3, #0
 8004d06:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d002      	beq.n	8004d14 <HAL_RTC_SetDate+0x24>
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d101      	bne.n	8004d18 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	e0fc      	b.n	8004f12 <HAL_RTC_SetDate+0x222>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d007      	beq.n	8004d2e <HAL_RTC_SetDate+0x3e>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d004      	beq.n	8004d2e <HAL_RTC_SetDate+0x3e>
 8004d24:	f44f 7167 	mov.w	r1, #924	; 0x39c
 8004d28:	487c      	ldr	r0, [pc, #496]	; (8004f1c <HAL_RTC_SetDate+0x22c>)
 8004d2a:	f7fc fd33 	bl	8001794 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	7c1b      	ldrb	r3, [r3, #16]
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d101      	bne.n	8004d3a <HAL_RTC_SetDate+0x4a>
 8004d36:	2302      	movs	r3, #2
 8004d38:	e0eb      	b.n	8004f12 <HAL_RTC_SetDate+0x222>
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2202      	movs	r2, #2
 8004d44:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d12f      	bne.n	8004dac <HAL_RTC_SetDate+0xbc>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	78db      	ldrb	r3, [r3, #3]
 8004d50:	2b63      	cmp	r3, #99	; 0x63
 8004d52:	d904      	bls.n	8004d5e <HAL_RTC_SetDate+0x6e>
 8004d54:	f240 31a5 	movw	r1, #933	; 0x3a5
 8004d58:	4870      	ldr	r0, [pc, #448]	; (8004f1c <HAL_RTC_SetDate+0x22c>)
 8004d5a:	f7fc fd1b 	bl	8001794 <assert_failed>
    assert_param(IS_RTC_MONTH(sDate->Month));
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	785b      	ldrb	r3, [r3, #1]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d003      	beq.n	8004d6e <HAL_RTC_SetDate+0x7e>
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	785b      	ldrb	r3, [r3, #1]
 8004d6a:	2b0c      	cmp	r3, #12
 8004d6c:	d904      	bls.n	8004d78 <HAL_RTC_SetDate+0x88>
 8004d6e:	f240 31a6 	movw	r1, #934	; 0x3a6
 8004d72:	486a      	ldr	r0, [pc, #424]	; (8004f1c <HAL_RTC_SetDate+0x22c>)
 8004d74:	f7fc fd0e 	bl	8001794 <assert_failed>
    assert_param(IS_RTC_DATE(sDate->Date));
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	789b      	ldrb	r3, [r3, #2]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d003      	beq.n	8004d88 <HAL_RTC_SetDate+0x98>
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	789b      	ldrb	r3, [r3, #2]
 8004d84:	2b1f      	cmp	r3, #31
 8004d86:	d904      	bls.n	8004d92 <HAL_RTC_SetDate+0xa2>
 8004d88:	f240 31a7 	movw	r1, #935	; 0x3a7
 8004d8c:	4863      	ldr	r0, [pc, #396]	; (8004f1c <HAL_RTC_SetDate+0x22c>)
 8004d8e:	f7fc fd01 	bl	8001794 <assert_failed>

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	78da      	ldrb	r2, [r3, #3]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	785a      	ldrb	r2, [r3, #1]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	789a      	ldrb	r2, [r3, #2]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	739a      	strb	r2, [r3, #14]
 8004daa:	e051      	b.n	8004e50 <HAL_RTC_SetDate+0x160>
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	78db      	ldrb	r3, [r3, #3]
 8004db0:	4618      	mov	r0, r3
 8004db2:	f000 fa4e 	bl	8005252 <RTC_Bcd2ToByte>
 8004db6:	4603      	mov	r3, r0
 8004db8:	2b63      	cmp	r3, #99	; 0x63
 8004dba:	d904      	bls.n	8004dc6 <HAL_RTC_SetDate+0xd6>
 8004dbc:	f44f 716c 	mov.w	r1, #944	; 0x3b0
 8004dc0:	4856      	ldr	r0, [pc, #344]	; (8004f1c <HAL_RTC_SetDate+0x22c>)
 8004dc2:	f7fc fce7 	bl	8001794 <assert_failed>
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	785b      	ldrb	r3, [r3, #1]
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f000 fa41 	bl	8005252 <RTC_Bcd2ToByte>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d007      	beq.n	8004de6 <HAL_RTC_SetDate+0xf6>
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	785b      	ldrb	r3, [r3, #1]
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f000 fa39 	bl	8005252 <RTC_Bcd2ToByte>
 8004de0:	4603      	mov	r3, r0
 8004de2:	2b0c      	cmp	r3, #12
 8004de4:	d904      	bls.n	8004df0 <HAL_RTC_SetDate+0x100>
 8004de6:	f240 31b1 	movw	r1, #945	; 0x3b1
 8004dea:	484c      	ldr	r0, [pc, #304]	; (8004f1c <HAL_RTC_SetDate+0x22c>)
 8004dec:	f7fc fcd2 	bl	8001794 <assert_failed>
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	789b      	ldrb	r3, [r3, #2]
 8004df4:	4618      	mov	r0, r3
 8004df6:	f000 fa2c 	bl	8005252 <RTC_Bcd2ToByte>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d007      	beq.n	8004e10 <HAL_RTC_SetDate+0x120>
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	789b      	ldrb	r3, [r3, #2]
 8004e04:	4618      	mov	r0, r3
 8004e06:	f000 fa24 	bl	8005252 <RTC_Bcd2ToByte>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	2b1f      	cmp	r3, #31
 8004e0e:	d904      	bls.n	8004e1a <HAL_RTC_SetDate+0x12a>
 8004e10:	f240 31b2 	movw	r1, #946	; 0x3b2
 8004e14:	4841      	ldr	r0, [pc, #260]	; (8004f1c <HAL_RTC_SetDate+0x22c>)
 8004e16:	f7fc fcbd 	bl	8001794 <assert_failed>

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	78db      	ldrb	r3, [r3, #3]
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f000 fa17 	bl	8005252 <RTC_Bcd2ToByte>
 8004e24:	4603      	mov	r3, r0
 8004e26:	461a      	mov	r2, r3
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	785b      	ldrb	r3, [r3, #1]
 8004e30:	4618      	mov	r0, r3
 8004e32:	f000 fa0e 	bl	8005252 <RTC_Bcd2ToByte>
 8004e36:	4603      	mov	r3, r0
 8004e38:	461a      	mov	r2, r3
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	789b      	ldrb	r3, [r3, #2]
 8004e42:	4618      	mov	r0, r3
 8004e44:	f000 fa05 	bl	8005252 <RTC_Bcd2ToByte>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	7bdb      	ldrb	r3, [r3, #15]
 8004e54:	4618      	mov	r0, r3
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	7b59      	ldrb	r1, [r3, #13]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	7b9b      	ldrb	r3, [r3, #14]
 8004e5e:	461a      	mov	r2, r3
 8004e60:	f000 faf0 	bl	8005444 <RTC_WeekDayNum>
 8004e64:	4603      	mov	r3, r0
 8004e66:	461a      	mov	r2, r3
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	7b1a      	ldrb	r2, [r3, #12]
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8004e74:	68f8      	ldr	r0, [r7, #12]
 8004e76:	f000 f8e8 	bl	800504a <RTC_ReadTimeCounter>
 8004e7a:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8004e7c:	69fb      	ldr	r3, [r7, #28]
 8004e7e:	4a28      	ldr	r2, [pc, #160]	; (8004f20 <HAL_RTC_SetDate+0x230>)
 8004e80:	fba2 2303 	umull	r2, r3, r2, r3
 8004e84:	0adb      	lsrs	r3, r3, #11
 8004e86:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	2b18      	cmp	r3, #24
 8004e8c:	d93a      	bls.n	8004f04 <HAL_RTC_SetDate+0x214>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	4a24      	ldr	r2, [pc, #144]	; (8004f24 <HAL_RTC_SetDate+0x234>)
 8004e92:	fba2 2303 	umull	r2, r3, r2, r3
 8004e96:	091b      	lsrs	r3, r3, #4
 8004e98:	4a23      	ldr	r2, [pc, #140]	; (8004f28 <HAL_RTC_SetDate+0x238>)
 8004e9a:	fb02 f303 	mul.w	r3, r2, r3
 8004e9e:	69fa      	ldr	r2, [r7, #28]
 8004ea0:	1ad3      	subs	r3, r2, r3
 8004ea2:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004ea4:	69f9      	ldr	r1, [r7, #28]
 8004ea6:	68f8      	ldr	r0, [r7, #12]
 8004ea8:	f000 f8ff 	bl	80050aa <RTC_WriteTimeCounter>
 8004eac:	4603      	mov	r3, r0
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d007      	beq.n	8004ec2 <HAL_RTC_SetDate+0x1d2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2204      	movs	r2, #4
 8004eb6:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e027      	b.n	8004f12 <HAL_RTC_SetDate+0x222>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004ec2:	68f8      	ldr	r0, [r7, #12]
 8004ec4:	f000 f918 	bl	80050f8 <RTC_ReadAlarmCounter>
 8004ec8:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004eca:	69bb      	ldr	r3, [r7, #24]
 8004ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ed0:	d018      	beq.n	8004f04 <HAL_RTC_SetDate+0x214>
    {
      if (counter_alarm < counter_time)
 8004ed2:	69ba      	ldr	r2, [r7, #24]
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	d214      	bcs.n	8004f04 <HAL_RTC_SetDate+0x214>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8004eda:	69bb      	ldr	r3, [r7, #24]
 8004edc:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8004ee0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004ee4:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004ee6:	69b9      	ldr	r1, [r7, #24]
 8004ee8:	68f8      	ldr	r0, [r7, #12]
 8004eea:	f000 f91e 	bl	800512a <RTC_WriteAlarmCounter>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d007      	beq.n	8004f04 <HAL_RTC_SetDate+0x214>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2204      	movs	r2, #4
 8004ef8:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2200      	movs	r2, #0
 8004efe:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	e006      	b.n	8004f12 <HAL_RTC_SetDate+0x222>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2201      	movs	r2, #1
 8004f08:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004f10:	2300      	movs	r3, #0
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3720      	adds	r7, #32
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
 8004f1a:	bf00      	nop
 8004f1c:	0800c3fc 	.word	0x0800c3fc
 8004f20:	91a2b3c5 	.word	0x91a2b3c5
 8004f24:	aaaaaaab 	.word	0xaaaaaaab
 8004f28:	00015180 	.word	0x00015180

08004f2c <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b086      	sub	sp, #24
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	60f8      	str	r0, [r7, #12]
 8004f34:	60b9      	str	r1, [r7, #8]
 8004f36:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 8004f38:	f107 0314 	add.w	r3, r7, #20
 8004f3c:	2100      	movs	r1, #0
 8004f3e:	460a      	mov	r2, r1
 8004f40:	801a      	strh	r2, [r3, #0]
 8004f42:	460a      	mov	r2, r1
 8004f44:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d002      	beq.n	8004f52 <HAL_RTC_GetDate+0x26>
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d101      	bne.n	8004f56 <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e045      	b.n	8004fe2 <HAL_RTC_GetDate+0xb6>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d007      	beq.n	8004f6c <HAL_RTC_GetDate+0x40>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d004      	beq.n	8004f6c <HAL_RTC_GetDate+0x40>
 8004f62:	f240 410e 	movw	r1, #1038	; 0x40e
 8004f66:	4821      	ldr	r0, [pc, #132]	; (8004fec <HAL_RTC_GetDate+0xc0>)
 8004f68:	f7fc fc14 	bl	8001794 <assert_failed>

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8004f6c:	f107 0314 	add.w	r3, r7, #20
 8004f70:	2200      	movs	r2, #0
 8004f72:	4619      	mov	r1, r3
 8004f74:	68f8      	ldr	r0, [r7, #12]
 8004f76:	f7ff fdd5 	bl	8004b24 <HAL_RTC_GetTime>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d001      	beq.n	8004f84 <HAL_RTC_GetDate+0x58>
  {
    return HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	e02e      	b.n	8004fe2 <HAL_RTC_GetDate+0xb6>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	7b1a      	ldrb	r2, [r3, #12]
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	7bda      	ldrb	r2, [r3, #15]
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	7b5a      	ldrb	r2, [r3, #13]
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	7b9a      	ldrb	r2, [r3, #14]
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d01a      	beq.n	8004fe0 <HAL_RTC_GetDate+0xb4>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	78db      	ldrb	r3, [r3, #3]
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f000 f932 	bl	8005218 <RTC_ByteToBcd2>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	785b      	ldrb	r3, [r3, #1]
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f000 f929 	bl	8005218 <RTC_ByteToBcd2>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	461a      	mov	r2, r3
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	789b      	ldrb	r3, [r3, #2]
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f000 f920 	bl	8005218 <RTC_ByteToBcd2>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	461a      	mov	r2, r3
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004fe0:	2300      	movs	r3, #0
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3718      	adds	r7, #24
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}
 8004fea:	bf00      	nop
 8004fec:	0800c3fc 	.word	0x0800c3fc

08004ff0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b084      	sub	sp, #16
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d101      	bne.n	8005006 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	e01d      	b.n	8005042 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	685a      	ldr	r2, [r3, #4]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f022 0208 	bic.w	r2, r2, #8
 8005014:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8005016:	f7fd f86d 	bl	80020f4 <HAL_GetTick>
 800501a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800501c:	e009      	b.n	8005032 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800501e:	f7fd f869 	bl	80020f4 <HAL_GetTick>
 8005022:	4602      	mov	r2, r0
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	1ad3      	subs	r3, r2, r3
 8005028:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800502c:	d901      	bls.n	8005032 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 800502e:	2303      	movs	r3, #3
 8005030:	e007      	b.n	8005042 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	f003 0308 	and.w	r3, r3, #8
 800503c:	2b00      	cmp	r3, #0
 800503e:	d0ee      	beq.n	800501e <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8005040:	2300      	movs	r3, #0
}
 8005042:	4618      	mov	r0, r3
 8005044:	3710      	adds	r7, #16
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}

0800504a <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 800504a:	b480      	push	{r7}
 800504c:	b087      	sub	sp, #28
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8005052:	2300      	movs	r3, #0
 8005054:	827b      	strh	r3, [r7, #18]
 8005056:	2300      	movs	r3, #0
 8005058:	823b      	strh	r3, [r7, #16]
 800505a:	2300      	movs	r3, #0
 800505c:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 800505e:	2300      	movs	r3, #0
 8005060:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	699b      	ldr	r3, [r3, #24]
 8005068:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	69db      	ldr	r3, [r3, #28]
 8005070:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	699b      	ldr	r3, [r3, #24]
 8005078:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 800507a:	8a7a      	ldrh	r2, [r7, #18]
 800507c:	8a3b      	ldrh	r3, [r7, #16]
 800507e:	429a      	cmp	r2, r3
 8005080:	d008      	beq.n	8005094 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8005082:	8a3b      	ldrh	r3, [r7, #16]
 8005084:	041a      	lsls	r2, r3, #16
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	69db      	ldr	r3, [r3, #28]
 800508c:	b29b      	uxth	r3, r3
 800508e:	4313      	orrs	r3, r2
 8005090:	617b      	str	r3, [r7, #20]
 8005092:	e004      	b.n	800509e <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8005094:	8a7b      	ldrh	r3, [r7, #18]
 8005096:	041a      	lsls	r2, r3, #16
 8005098:	89fb      	ldrh	r3, [r7, #14]
 800509a:	4313      	orrs	r3, r2
 800509c:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 800509e:	697b      	ldr	r3, [r7, #20]
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	371c      	adds	r7, #28
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bc80      	pop	{r7}
 80050a8:	4770      	bx	lr

080050aa <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 80050aa:	b580      	push	{r7, lr}
 80050ac:	b084      	sub	sp, #16
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]
 80050b2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050b4:	2300      	movs	r3, #0
 80050b6:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f000 f85d 	bl	8005178 <RTC_EnterInitMode>
 80050be:	4603      	mov	r3, r0
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d002      	beq.n	80050ca <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	73fb      	strb	r3, [r7, #15]
 80050c8:	e011      	b.n	80050ee <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	683a      	ldr	r2, [r7, #0]
 80050d0:	0c12      	lsrs	r2, r2, #16
 80050d2:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	683a      	ldr	r2, [r7, #0]
 80050da:	b292      	uxth	r2, r2
 80050dc:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f000 f872 	bl	80051c8 <RTC_ExitInitMode>
 80050e4:	4603      	mov	r3, r0
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d001      	beq.n	80050ee <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80050ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3710      	adds	r7, #16
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}

080050f8 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b085      	sub	sp, #20
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8005100:	2300      	movs	r3, #0
 8005102:	81fb      	strh	r3, [r7, #14]
 8005104:	2300      	movs	r3, #0
 8005106:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	6a1b      	ldr	r3, [r3, #32]
 800510e:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005116:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8005118:	89fb      	ldrh	r3, [r7, #14]
 800511a:	041a      	lsls	r2, r3, #16
 800511c:	89bb      	ldrh	r3, [r7, #12]
 800511e:	4313      	orrs	r3, r2
}
 8005120:	4618      	mov	r0, r3
 8005122:	3714      	adds	r7, #20
 8005124:	46bd      	mov	sp, r7
 8005126:	bc80      	pop	{r7}
 8005128:	4770      	bx	lr

0800512a <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 800512a:	b580      	push	{r7, lr}
 800512c:	b084      	sub	sp, #16
 800512e:	af00      	add	r7, sp, #0
 8005130:	6078      	str	r0, [r7, #4]
 8005132:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005134:	2300      	movs	r3, #0
 8005136:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f000 f81d 	bl	8005178 <RTC_EnterInitMode>
 800513e:	4603      	mov	r3, r0
 8005140:	2b00      	cmp	r3, #0
 8005142:	d002      	beq.n	800514a <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	73fb      	strb	r3, [r7, #15]
 8005148:	e011      	b.n	800516e <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	683a      	ldr	r2, [r7, #0]
 8005150:	0c12      	lsrs	r2, r2, #16
 8005152:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	683a      	ldr	r2, [r7, #0]
 800515a:	b292      	uxth	r2, r2
 800515c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f000 f832 	bl	80051c8 <RTC_ExitInitMode>
 8005164:	4603      	mov	r3, r0
 8005166:	2b00      	cmp	r3, #0
 8005168:	d001      	beq.n	800516e <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800516e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005170:	4618      	mov	r0, r3
 8005172:	3710      	adds	r7, #16
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}

08005178 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b084      	sub	sp, #16
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005180:	2300      	movs	r3, #0
 8005182:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8005184:	f7fc ffb6 	bl	80020f4 <HAL_GetTick>
 8005188:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800518a:	e009      	b.n	80051a0 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800518c:	f7fc ffb2 	bl	80020f4 <HAL_GetTick>
 8005190:	4602      	mov	r2, r0
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	1ad3      	subs	r3, r2, r3
 8005196:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800519a:	d901      	bls.n	80051a0 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 800519c:	2303      	movs	r3, #3
 800519e:	e00f      	b.n	80051c0 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	f003 0320 	and.w	r3, r3, #32
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d0ee      	beq.n	800518c <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	685a      	ldr	r2, [r3, #4]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f042 0210 	orr.w	r2, r2, #16
 80051bc:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 80051be:	2300      	movs	r3, #0
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3710      	adds	r7, #16
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b084      	sub	sp, #16
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80051d0:	2300      	movs	r3, #0
 80051d2:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	685a      	ldr	r2, [r3, #4]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f022 0210 	bic.w	r2, r2, #16
 80051e2:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80051e4:	f7fc ff86 	bl	80020f4 <HAL_GetTick>
 80051e8:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80051ea:	e009      	b.n	8005200 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80051ec:	f7fc ff82 	bl	80020f4 <HAL_GetTick>
 80051f0:	4602      	mov	r2, r0
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	1ad3      	subs	r3, r2, r3
 80051f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80051fa:	d901      	bls.n	8005200 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 80051fc:	2303      	movs	r3, #3
 80051fe:	e007      	b.n	8005210 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	f003 0320 	and.w	r3, r3, #32
 800520a:	2b00      	cmp	r3, #0
 800520c:	d0ee      	beq.n	80051ec <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 800520e:	2300      	movs	r3, #0
}
 8005210:	4618      	mov	r0, r3
 8005212:	3710      	adds	r7, #16
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}

08005218 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005218:	b480      	push	{r7}
 800521a:	b085      	sub	sp, #20
 800521c:	af00      	add	r7, sp, #0
 800521e:	4603      	mov	r3, r0
 8005220:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005222:	2300      	movs	r3, #0
 8005224:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8005226:	e005      	b.n	8005234 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	3301      	adds	r3, #1
 800522c:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800522e:	79fb      	ldrb	r3, [r7, #7]
 8005230:	3b0a      	subs	r3, #10
 8005232:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8005234:	79fb      	ldrb	r3, [r7, #7]
 8005236:	2b09      	cmp	r3, #9
 8005238:	d8f6      	bhi.n	8005228 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	b2db      	uxtb	r3, r3
 800523e:	011b      	lsls	r3, r3, #4
 8005240:	b2da      	uxtb	r2, r3
 8005242:	79fb      	ldrb	r3, [r7, #7]
 8005244:	4313      	orrs	r3, r2
 8005246:	b2db      	uxtb	r3, r3
}
 8005248:	4618      	mov	r0, r3
 800524a:	3714      	adds	r7, #20
 800524c:	46bd      	mov	sp, r7
 800524e:	bc80      	pop	{r7}
 8005250:	4770      	bx	lr

08005252 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005252:	b480      	push	{r7}
 8005254:	b085      	sub	sp, #20
 8005256:	af00      	add	r7, sp, #0
 8005258:	4603      	mov	r3, r0
 800525a:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800525c:	2300      	movs	r3, #0
 800525e:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8005260:	79fb      	ldrb	r3, [r7, #7]
 8005262:	091b      	lsrs	r3, r3, #4
 8005264:	b2db      	uxtb	r3, r3
 8005266:	461a      	mov	r2, r3
 8005268:	4613      	mov	r3, r2
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	4413      	add	r3, r2
 800526e:	005b      	lsls	r3, r3, #1
 8005270:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8005272:	79fb      	ldrb	r3, [r7, #7]
 8005274:	f003 030f 	and.w	r3, r3, #15
 8005278:	b2da      	uxtb	r2, r3
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	b2db      	uxtb	r3, r3
 800527e:	4413      	add	r3, r2
 8005280:	b2db      	uxtb	r3, r3
}
 8005282:	4618      	mov	r0, r3
 8005284:	3714      	adds	r7, #20
 8005286:	46bd      	mov	sp, r7
 8005288:	bc80      	pop	{r7}
 800528a:	4770      	bx	lr

0800528c <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b086      	sub	sp, #24
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8005296:	2300      	movs	r3, #0
 8005298:	617b      	str	r3, [r7, #20]
 800529a:	2300      	movs	r3, #0
 800529c:	613b      	str	r3, [r7, #16]
 800529e:	2300      	movs	r3, #0
 80052a0:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 80052a2:	2300      	movs	r3, #0
 80052a4:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	7bdb      	ldrb	r3, [r3, #15]
 80052aa:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	7b5b      	ldrb	r3, [r3, #13]
 80052b0:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	7b9b      	ldrb	r3, [r3, #14]
 80052b6:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 80052b8:	2300      	movs	r3, #0
 80052ba:	60bb      	str	r3, [r7, #8]
 80052bc:	e06f      	b.n	800539e <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d011      	beq.n	80052e8 <RTC_DateUpdate+0x5c>
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	2b03      	cmp	r3, #3
 80052c8:	d00e      	beq.n	80052e8 <RTC_DateUpdate+0x5c>
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	2b05      	cmp	r3, #5
 80052ce:	d00b      	beq.n	80052e8 <RTC_DateUpdate+0x5c>
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	2b07      	cmp	r3, #7
 80052d4:	d008      	beq.n	80052e8 <RTC_DateUpdate+0x5c>
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	2b08      	cmp	r3, #8
 80052da:	d005      	beq.n	80052e8 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	2b0a      	cmp	r3, #10
 80052e0:	d002      	beq.n	80052e8 <RTC_DateUpdate+0x5c>
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	2b0c      	cmp	r3, #12
 80052e6:	d117      	bne.n	8005318 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2b1e      	cmp	r3, #30
 80052ec:	d803      	bhi.n	80052f6 <RTC_DateUpdate+0x6a>
      {
        day++;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	3301      	adds	r3, #1
 80052f2:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80052f4:	e050      	b.n	8005398 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	2b0c      	cmp	r3, #12
 80052fa:	d005      	beq.n	8005308 <RTC_DateUpdate+0x7c>
        {
          month++;
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	3301      	adds	r3, #1
 8005300:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005302:	2301      	movs	r3, #1
 8005304:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8005306:	e047      	b.n	8005398 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8005308:	2301      	movs	r3, #1
 800530a:	613b      	str	r3, [r7, #16]
          day = 1U;
 800530c:	2301      	movs	r3, #1
 800530e:	60fb      	str	r3, [r7, #12]
          year++;
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	3301      	adds	r3, #1
 8005314:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8005316:	e03f      	b.n	8005398 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	2b04      	cmp	r3, #4
 800531c:	d008      	beq.n	8005330 <RTC_DateUpdate+0xa4>
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	2b06      	cmp	r3, #6
 8005322:	d005      	beq.n	8005330 <RTC_DateUpdate+0xa4>
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	2b09      	cmp	r3, #9
 8005328:	d002      	beq.n	8005330 <RTC_DateUpdate+0xa4>
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	2b0b      	cmp	r3, #11
 800532e:	d10c      	bne.n	800534a <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2b1d      	cmp	r3, #29
 8005334:	d803      	bhi.n	800533e <RTC_DateUpdate+0xb2>
      {
        day++;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	3301      	adds	r3, #1
 800533a:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 800533c:	e02c      	b.n	8005398 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	3301      	adds	r3, #1
 8005342:	613b      	str	r3, [r7, #16]
        day = 1U;
 8005344:	2301      	movs	r3, #1
 8005346:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8005348:	e026      	b.n	8005398 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	2b02      	cmp	r3, #2
 800534e:	d123      	bne.n	8005398 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2b1b      	cmp	r3, #27
 8005354:	d803      	bhi.n	800535e <RTC_DateUpdate+0xd2>
      {
        day++;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	3301      	adds	r3, #1
 800535a:	60fb      	str	r3, [r7, #12]
 800535c:	e01c      	b.n	8005398 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2b1c      	cmp	r3, #28
 8005362:	d111      	bne.n	8005388 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	b29b      	uxth	r3, r3
 8005368:	4618      	mov	r0, r3
 800536a:	f000 f839 	bl	80053e0 <RTC_IsLeapYear>
 800536e:	4603      	mov	r3, r0
 8005370:	2b00      	cmp	r3, #0
 8005372:	d003      	beq.n	800537c <RTC_DateUpdate+0xf0>
        {
          day++;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	3301      	adds	r3, #1
 8005378:	60fb      	str	r3, [r7, #12]
 800537a:	e00d      	b.n	8005398 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	3301      	adds	r3, #1
 8005380:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005382:	2301      	movs	r3, #1
 8005384:	60fb      	str	r3, [r7, #12]
 8005386:	e007      	b.n	8005398 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2b1d      	cmp	r3, #29
 800538c:	d104      	bne.n	8005398 <RTC_DateUpdate+0x10c>
      {
        month++;
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	3301      	adds	r3, #1
 8005392:	613b      	str	r3, [r7, #16]
        day = 1U;
 8005394:	2301      	movs	r3, #1
 8005396:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	3301      	adds	r3, #1
 800539c:	60bb      	str	r3, [r7, #8]
 800539e:	68ba      	ldr	r2, [r7, #8]
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	429a      	cmp	r2, r3
 80053a4:	d38b      	bcc.n	80052be <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	b2da      	uxtb	r2, r3
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	b2da      	uxtb	r2, r3
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	b2da      	uxtb	r2, r3
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	68fa      	ldr	r2, [r7, #12]
 80053c4:	b2d2      	uxtb	r2, r2
 80053c6:	4619      	mov	r1, r3
 80053c8:	6978      	ldr	r0, [r7, #20]
 80053ca:	f000 f83b 	bl	8005444 <RTC_WeekDayNum>
 80053ce:	4603      	mov	r3, r0
 80053d0:	461a      	mov	r2, r3
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	731a      	strb	r2, [r3, #12]
}
 80053d6:	bf00      	nop
 80053d8:	3718      	adds	r7, #24
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
	...

080053e0 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b083      	sub	sp, #12
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	4603      	mov	r3, r0
 80053e8:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 80053ea:	88fb      	ldrh	r3, [r7, #6]
 80053ec:	f003 0303 	and.w	r3, r3, #3
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d001      	beq.n	80053fa <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 80053f6:	2300      	movs	r3, #0
 80053f8:	e01d      	b.n	8005436 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 80053fa:	88fb      	ldrh	r3, [r7, #6]
 80053fc:	4a10      	ldr	r2, [pc, #64]	; (8005440 <RTC_IsLeapYear+0x60>)
 80053fe:	fba2 1203 	umull	r1, r2, r2, r3
 8005402:	0952      	lsrs	r2, r2, #5
 8005404:	2164      	movs	r1, #100	; 0x64
 8005406:	fb01 f202 	mul.w	r2, r1, r2
 800540a:	1a9b      	subs	r3, r3, r2
 800540c:	b29b      	uxth	r3, r3
 800540e:	2b00      	cmp	r3, #0
 8005410:	d001      	beq.n	8005416 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8005412:	2301      	movs	r3, #1
 8005414:	e00f      	b.n	8005436 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8005416:	88fb      	ldrh	r3, [r7, #6]
 8005418:	4a09      	ldr	r2, [pc, #36]	; (8005440 <RTC_IsLeapYear+0x60>)
 800541a:	fba2 1203 	umull	r1, r2, r2, r3
 800541e:	09d2      	lsrs	r2, r2, #7
 8005420:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005424:	fb01 f202 	mul.w	r2, r1, r2
 8005428:	1a9b      	subs	r3, r3, r2
 800542a:	b29b      	uxth	r3, r3
 800542c:	2b00      	cmp	r3, #0
 800542e:	d101      	bne.n	8005434 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8005430:	2301      	movs	r3, #1
 8005432:	e000      	b.n	8005436 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8005434:	2300      	movs	r3, #0
  }
}
 8005436:	4618      	mov	r0, r3
 8005438:	370c      	adds	r7, #12
 800543a:	46bd      	mov	sp, r7
 800543c:	bc80      	pop	{r7}
 800543e:	4770      	bx	lr
 8005440:	51eb851f 	.word	0x51eb851f

08005444 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8005444:	b480      	push	{r7}
 8005446:	b085      	sub	sp, #20
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	460b      	mov	r3, r1
 800544e:	70fb      	strb	r3, [r7, #3]
 8005450:	4613      	mov	r3, r2
 8005452:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8005454:	2300      	movs	r3, #0
 8005456:	60bb      	str	r3, [r7, #8]
 8005458:	2300      	movs	r3, #0
 800545a:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8005462:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8005464:	78fb      	ldrb	r3, [r7, #3]
 8005466:	2b02      	cmp	r3, #2
 8005468:	d82d      	bhi.n	80054c6 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 800546a:	78fa      	ldrb	r2, [r7, #3]
 800546c:	4613      	mov	r3, r2
 800546e:	005b      	lsls	r3, r3, #1
 8005470:	4413      	add	r3, r2
 8005472:	00db      	lsls	r3, r3, #3
 8005474:	1a9b      	subs	r3, r3, r2
 8005476:	4a2c      	ldr	r2, [pc, #176]	; (8005528 <RTC_WeekDayNum+0xe4>)
 8005478:	fba2 2303 	umull	r2, r3, r2, r3
 800547c:	085a      	lsrs	r2, r3, #1
 800547e:	78bb      	ldrb	r3, [r7, #2]
 8005480:	441a      	add	r2, r3
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	441a      	add	r2, r3
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	3b01      	subs	r3, #1
 800548a:	089b      	lsrs	r3, r3, #2
 800548c:	441a      	add	r2, r3
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	3b01      	subs	r3, #1
 8005492:	4926      	ldr	r1, [pc, #152]	; (800552c <RTC_WeekDayNum+0xe8>)
 8005494:	fba1 1303 	umull	r1, r3, r1, r3
 8005498:	095b      	lsrs	r3, r3, #5
 800549a:	1ad2      	subs	r2, r2, r3
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	3b01      	subs	r3, #1
 80054a0:	4922      	ldr	r1, [pc, #136]	; (800552c <RTC_WeekDayNum+0xe8>)
 80054a2:	fba1 1303 	umull	r1, r3, r1, r3
 80054a6:	09db      	lsrs	r3, r3, #7
 80054a8:	4413      	add	r3, r2
 80054aa:	1d1a      	adds	r2, r3, #4
 80054ac:	4b20      	ldr	r3, [pc, #128]	; (8005530 <RTC_WeekDayNum+0xec>)
 80054ae:	fba3 1302 	umull	r1, r3, r3, r2
 80054b2:	1ad1      	subs	r1, r2, r3
 80054b4:	0849      	lsrs	r1, r1, #1
 80054b6:	440b      	add	r3, r1
 80054b8:	0899      	lsrs	r1, r3, #2
 80054ba:	460b      	mov	r3, r1
 80054bc:	00db      	lsls	r3, r3, #3
 80054be:	1a5b      	subs	r3, r3, r1
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	60fb      	str	r3, [r7, #12]
 80054c4:	e029      	b.n	800551a <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 80054c6:	78fa      	ldrb	r2, [r7, #3]
 80054c8:	4613      	mov	r3, r2
 80054ca:	005b      	lsls	r3, r3, #1
 80054cc:	4413      	add	r3, r2
 80054ce:	00db      	lsls	r3, r3, #3
 80054d0:	1a9b      	subs	r3, r3, r2
 80054d2:	4a15      	ldr	r2, [pc, #84]	; (8005528 <RTC_WeekDayNum+0xe4>)
 80054d4:	fba2 2303 	umull	r2, r3, r2, r3
 80054d8:	085a      	lsrs	r2, r3, #1
 80054da:	78bb      	ldrb	r3, [r7, #2]
 80054dc:	441a      	add	r2, r3
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	441a      	add	r2, r3
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	089b      	lsrs	r3, r3, #2
 80054e6:	441a      	add	r2, r3
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	4910      	ldr	r1, [pc, #64]	; (800552c <RTC_WeekDayNum+0xe8>)
 80054ec:	fba1 1303 	umull	r1, r3, r1, r3
 80054f0:	095b      	lsrs	r3, r3, #5
 80054f2:	1ad2      	subs	r2, r2, r3
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	490d      	ldr	r1, [pc, #52]	; (800552c <RTC_WeekDayNum+0xe8>)
 80054f8:	fba1 1303 	umull	r1, r3, r1, r3
 80054fc:	09db      	lsrs	r3, r3, #7
 80054fe:	4413      	add	r3, r2
 8005500:	1c9a      	adds	r2, r3, #2
 8005502:	4b0b      	ldr	r3, [pc, #44]	; (8005530 <RTC_WeekDayNum+0xec>)
 8005504:	fba3 1302 	umull	r1, r3, r3, r2
 8005508:	1ad1      	subs	r1, r2, r3
 800550a:	0849      	lsrs	r1, r1, #1
 800550c:	440b      	add	r3, r1
 800550e:	0899      	lsrs	r1, r3, #2
 8005510:	460b      	mov	r3, r1
 8005512:	00db      	lsls	r3, r3, #3
 8005514:	1a5b      	subs	r3, r3, r1
 8005516:	1ad3      	subs	r3, r2, r3
 8005518:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	b2db      	uxtb	r3, r3
}
 800551e:	4618      	mov	r0, r3
 8005520:	3714      	adds	r7, #20
 8005522:	46bd      	mov	sp, r7
 8005524:	bc80      	pop	{r7}
 8005526:	4770      	bx	lr
 8005528:	38e38e39 	.word	0x38e38e39
 800552c:	51eb851f 	.word	0x51eb851f
 8005530:	24924925 	.word	0x24924925

08005534 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b082      	sub	sp, #8
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d101      	bne.n	8005546 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	e0b2      	b.n	80056ac <HAL_TIM_Base_Init+0x178>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a5a      	ldr	r2, [pc, #360]	; (80056b4 <HAL_TIM_Base_Init+0x180>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d027      	beq.n	80055a0 <HAL_TIM_Base_Init+0x6c>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a58      	ldr	r2, [pc, #352]	; (80056b8 <HAL_TIM_Base_Init+0x184>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d022      	beq.n	80055a0 <HAL_TIM_Base_Init+0x6c>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005562:	d01d      	beq.n	80055a0 <HAL_TIM_Base_Init+0x6c>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a54      	ldr	r2, [pc, #336]	; (80056bc <HAL_TIM_Base_Init+0x188>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d018      	beq.n	80055a0 <HAL_TIM_Base_Init+0x6c>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a53      	ldr	r2, [pc, #332]	; (80056c0 <HAL_TIM_Base_Init+0x18c>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d013      	beq.n	80055a0 <HAL_TIM_Base_Init+0x6c>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a51      	ldr	r2, [pc, #324]	; (80056c4 <HAL_TIM_Base_Init+0x190>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d00e      	beq.n	80055a0 <HAL_TIM_Base_Init+0x6c>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a50      	ldr	r2, [pc, #320]	; (80056c8 <HAL_TIM_Base_Init+0x194>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d009      	beq.n	80055a0 <HAL_TIM_Base_Init+0x6c>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a4e      	ldr	r2, [pc, #312]	; (80056cc <HAL_TIM_Base_Init+0x198>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d004      	beq.n	80055a0 <HAL_TIM_Base_Init+0x6c>
 8005596:	f240 1113 	movw	r1, #275	; 0x113
 800559a:	484d      	ldr	r0, [pc, #308]	; (80056d0 <HAL_TIM_Base_Init+0x19c>)
 800559c:	f7fc f8fa 	bl	8001794 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d014      	beq.n	80055d2 <HAL_TIM_Base_Init+0x9e>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	2b10      	cmp	r3, #16
 80055ae:	d010      	beq.n	80055d2 <HAL_TIM_Base_Init+0x9e>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	2b20      	cmp	r3, #32
 80055b6:	d00c      	beq.n	80055d2 <HAL_TIM_Base_Init+0x9e>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	2b40      	cmp	r3, #64	; 0x40
 80055be:	d008      	beq.n	80055d2 <HAL_TIM_Base_Init+0x9e>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	2b60      	cmp	r3, #96	; 0x60
 80055c6:	d004      	beq.n	80055d2 <HAL_TIM_Base_Init+0x9e>
 80055c8:	f44f 718a 	mov.w	r1, #276	; 0x114
 80055cc:	4840      	ldr	r0, [pc, #256]	; (80056d0 <HAL_TIM_Base_Init+0x19c>)
 80055ce:	f7fc f8e1 	bl	8001794 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	691b      	ldr	r3, [r3, #16]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d00e      	beq.n	80055f8 <HAL_TIM_Base_Init+0xc4>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	691b      	ldr	r3, [r3, #16]
 80055de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055e2:	d009      	beq.n	80055f8 <HAL_TIM_Base_Init+0xc4>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	691b      	ldr	r3, [r3, #16]
 80055e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055ec:	d004      	beq.n	80055f8 <HAL_TIM_Base_Init+0xc4>
 80055ee:	f240 1115 	movw	r1, #277	; 0x115
 80055f2:	4837      	ldr	r0, [pc, #220]	; (80056d0 <HAL_TIM_Base_Init+0x19c>)
 80055f4:	f7fc f8ce 	bl	8001794 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	699b      	ldr	r3, [r3, #24]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d008      	beq.n	8005612 <HAL_TIM_Base_Init+0xde>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	699b      	ldr	r3, [r3, #24]
 8005604:	2b80      	cmp	r3, #128	; 0x80
 8005606:	d004      	beq.n	8005612 <HAL_TIM_Base_Init+0xde>
 8005608:	f44f 718b 	mov.w	r1, #278	; 0x116
 800560c:	4830      	ldr	r0, [pc, #192]	; (80056d0 <HAL_TIM_Base_Init+0x19c>)
 800560e:	f7fc f8c1 	bl	8001794 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005618:	b2db      	uxtb	r3, r3
 800561a:	2b00      	cmp	r3, #0
 800561c:	d111      	bne.n	8005642 <HAL_TIM_Base_Init+0x10e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2200      	movs	r2, #0
 8005622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f001 ffc0 	bl	80075ac <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005630:	2b00      	cmp	r3, #0
 8005632:	d102      	bne.n	800563a <HAL_TIM_Base_Init+0x106>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	4a27      	ldr	r2, [pc, #156]	; (80056d4 <HAL_TIM_Base_Init+0x1a0>)
 8005638:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2202      	movs	r2, #2
 8005646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	3304      	adds	r3, #4
 8005652:	4619      	mov	r1, r3
 8005654:	4610      	mov	r0, r2
 8005656:	f001 fbff 	bl	8006e58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2201      	movs	r2, #1
 800565e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2201      	movs	r2, #1
 8005666:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2201      	movs	r2, #1
 800566e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2201      	movs	r2, #1
 8005676:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2201      	movs	r2, #1
 800567e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2201      	movs	r2, #1
 8005686:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2201      	movs	r2, #1
 800568e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2201      	movs	r2, #1
 8005696:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2201      	movs	r2, #1
 800569e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2201      	movs	r2, #1
 80056a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056aa:	2300      	movs	r3, #0
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3708      	adds	r7, #8
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}
 80056b4:	40012c00 	.word	0x40012c00
 80056b8:	40013400 	.word	0x40013400
 80056bc:	40000400 	.word	0x40000400
 80056c0:	40000800 	.word	0x40000800
 80056c4:	40000c00 	.word	0x40000c00
 80056c8:	40001000 	.word	0x40001000
 80056cc:	40001400 	.word	0x40001400
 80056d0:	0800c434 	.word	0x0800c434
 80056d4:	080018dd 	.word	0x080018dd

080056d8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b084      	sub	sp, #16
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a39      	ldr	r2, [pc, #228]	; (80057cc <HAL_TIM_Base_Start+0xf4>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d027      	beq.n	800573a <HAL_TIM_Base_Start+0x62>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a38      	ldr	r2, [pc, #224]	; (80057d0 <HAL_TIM_Base_Start+0xf8>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d022      	beq.n	800573a <HAL_TIM_Base_Start+0x62>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056fc:	d01d      	beq.n	800573a <HAL_TIM_Base_Start+0x62>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a34      	ldr	r2, [pc, #208]	; (80057d4 <HAL_TIM_Base_Start+0xfc>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d018      	beq.n	800573a <HAL_TIM_Base_Start+0x62>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a32      	ldr	r2, [pc, #200]	; (80057d8 <HAL_TIM_Base_Start+0x100>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d013      	beq.n	800573a <HAL_TIM_Base_Start+0x62>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a31      	ldr	r2, [pc, #196]	; (80057dc <HAL_TIM_Base_Start+0x104>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d00e      	beq.n	800573a <HAL_TIM_Base_Start+0x62>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a2f      	ldr	r2, [pc, #188]	; (80057e0 <HAL_TIM_Base_Start+0x108>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d009      	beq.n	800573a <HAL_TIM_Base_Start+0x62>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a2e      	ldr	r2, [pc, #184]	; (80057e4 <HAL_TIM_Base_Start+0x10c>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d004      	beq.n	800573a <HAL_TIM_Base_Start+0x62>
 8005730:	f44f 71ca 	mov.w	r1, #404	; 0x194
 8005734:	482c      	ldr	r0, [pc, #176]	; (80057e8 <HAL_TIM_Base_Start+0x110>)
 8005736:	f7fc f82d 	bl	8001794 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005740:	b2db      	uxtb	r3, r3
 8005742:	2b01      	cmp	r3, #1
 8005744:	d001      	beq.n	800574a <HAL_TIM_Base_Start+0x72>
  {
    return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	e03c      	b.n	80057c4 <HAL_TIM_Base_Start+0xec>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2202      	movs	r2, #2
 800574e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a1d      	ldr	r2, [pc, #116]	; (80057cc <HAL_TIM_Base_Start+0xf4>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d018      	beq.n	800578e <HAL_TIM_Base_Start+0xb6>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a1b      	ldr	r2, [pc, #108]	; (80057d0 <HAL_TIM_Base_Start+0xf8>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d013      	beq.n	800578e <HAL_TIM_Base_Start+0xb6>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800576e:	d00e      	beq.n	800578e <HAL_TIM_Base_Start+0xb6>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a17      	ldr	r2, [pc, #92]	; (80057d4 <HAL_TIM_Base_Start+0xfc>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d009      	beq.n	800578e <HAL_TIM_Base_Start+0xb6>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a16      	ldr	r2, [pc, #88]	; (80057d8 <HAL_TIM_Base_Start+0x100>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d004      	beq.n	800578e <HAL_TIM_Base_Start+0xb6>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a14      	ldr	r2, [pc, #80]	; (80057dc <HAL_TIM_Base_Start+0x104>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d111      	bne.n	80057b2 <HAL_TIM_Base_Start+0xda>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	f003 0307 	and.w	r3, r3, #7
 8005798:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2b06      	cmp	r3, #6
 800579e:	d010      	beq.n	80057c2 <HAL_TIM_Base_Start+0xea>
    {
      __HAL_TIM_ENABLE(htim);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f042 0201 	orr.w	r2, r2, #1
 80057ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057b0:	e007      	b.n	80057c2 <HAL_TIM_Base_Start+0xea>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f042 0201 	orr.w	r2, r2, #1
 80057c0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80057c2:	2300      	movs	r3, #0
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	3710      	adds	r7, #16
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}
 80057cc:	40012c00 	.word	0x40012c00
 80057d0:	40013400 	.word	0x40013400
 80057d4:	40000400 	.word	0x40000400
 80057d8:	40000800 	.word	0x40000800
 80057dc:	40000c00 	.word	0x40000c00
 80057e0:	40001000 	.word	0x40001000
 80057e4:	40001400 	.word	0x40001400
 80057e8:	0800c434 	.word	0x0800c434

080057ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b084      	sub	sp, #16
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a3d      	ldr	r2, [pc, #244]	; (80058f0 <HAL_TIM_Base_Start_IT+0x104>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d027      	beq.n	800584e <HAL_TIM_Base_Start_IT+0x62>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a3c      	ldr	r2, [pc, #240]	; (80058f4 <HAL_TIM_Base_Start_IT+0x108>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d022      	beq.n	800584e <HAL_TIM_Base_Start_IT+0x62>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005810:	d01d      	beq.n	800584e <HAL_TIM_Base_Start_IT+0x62>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a38      	ldr	r2, [pc, #224]	; (80058f8 <HAL_TIM_Base_Start_IT+0x10c>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d018      	beq.n	800584e <HAL_TIM_Base_Start_IT+0x62>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a36      	ldr	r2, [pc, #216]	; (80058fc <HAL_TIM_Base_Start_IT+0x110>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d013      	beq.n	800584e <HAL_TIM_Base_Start_IT+0x62>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a35      	ldr	r2, [pc, #212]	; (8005900 <HAL_TIM_Base_Start_IT+0x114>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d00e      	beq.n	800584e <HAL_TIM_Base_Start_IT+0x62>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a33      	ldr	r2, [pc, #204]	; (8005904 <HAL_TIM_Base_Start_IT+0x118>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d009      	beq.n	800584e <HAL_TIM_Base_Start_IT+0x62>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a32      	ldr	r2, [pc, #200]	; (8005908 <HAL_TIM_Base_Start_IT+0x11c>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d004      	beq.n	800584e <HAL_TIM_Base_Start_IT+0x62>
 8005844:	f240 11cf 	movw	r1, #463	; 0x1cf
 8005848:	4830      	ldr	r0, [pc, #192]	; (800590c <HAL_TIM_Base_Start_IT+0x120>)
 800584a:	f7fb ffa3 	bl	8001794 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005854:	b2db      	uxtb	r3, r3
 8005856:	2b01      	cmp	r3, #1
 8005858:	d001      	beq.n	800585e <HAL_TIM_Base_Start_IT+0x72>
  {
    return HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	e044      	b.n	80058e8 <HAL_TIM_Base_Start_IT+0xfc>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2202      	movs	r2, #2
 8005862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	68da      	ldr	r2, [r3, #12]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f042 0201 	orr.w	r2, r2, #1
 8005874:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a1d      	ldr	r2, [pc, #116]	; (80058f0 <HAL_TIM_Base_Start_IT+0x104>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d018      	beq.n	80058b2 <HAL_TIM_Base_Start_IT+0xc6>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a1b      	ldr	r2, [pc, #108]	; (80058f4 <HAL_TIM_Base_Start_IT+0x108>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d013      	beq.n	80058b2 <HAL_TIM_Base_Start_IT+0xc6>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005892:	d00e      	beq.n	80058b2 <HAL_TIM_Base_Start_IT+0xc6>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a17      	ldr	r2, [pc, #92]	; (80058f8 <HAL_TIM_Base_Start_IT+0x10c>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d009      	beq.n	80058b2 <HAL_TIM_Base_Start_IT+0xc6>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a16      	ldr	r2, [pc, #88]	; (80058fc <HAL_TIM_Base_Start_IT+0x110>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d004      	beq.n	80058b2 <HAL_TIM_Base_Start_IT+0xc6>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a14      	ldr	r2, [pc, #80]	; (8005900 <HAL_TIM_Base_Start_IT+0x114>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d111      	bne.n	80058d6 <HAL_TIM_Base_Start_IT+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	f003 0307 	and.w	r3, r3, #7
 80058bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2b06      	cmp	r3, #6
 80058c2:	d010      	beq.n	80058e6 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f042 0201 	orr.w	r2, r2, #1
 80058d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058d4:	e007      	b.n	80058e6 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f042 0201 	orr.w	r2, r2, #1
 80058e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80058e6:	2300      	movs	r3, #0
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3710      	adds	r7, #16
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}
 80058f0:	40012c00 	.word	0x40012c00
 80058f4:	40013400 	.word	0x40013400
 80058f8:	40000400 	.word	0x40000400
 80058fc:	40000800 	.word	0x40000800
 8005900:	40000c00 	.word	0x40000c00
 8005904:	40001000 	.word	0x40001000
 8005908:	40001400 	.word	0x40001400
 800590c:	0800c434 	.word	0x0800c434

08005910 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b082      	sub	sp, #8
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d101      	bne.n	8005922 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	e0b2      	b.n	8005a88 <HAL_TIM_PWM_Init+0x178>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a5a      	ldr	r2, [pc, #360]	; (8005a90 <HAL_TIM_PWM_Init+0x180>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d027      	beq.n	800597c <HAL_TIM_PWM_Init+0x6c>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a58      	ldr	r2, [pc, #352]	; (8005a94 <HAL_TIM_PWM_Init+0x184>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d022      	beq.n	800597c <HAL_TIM_PWM_Init+0x6c>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800593e:	d01d      	beq.n	800597c <HAL_TIM_PWM_Init+0x6c>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a54      	ldr	r2, [pc, #336]	; (8005a98 <HAL_TIM_PWM_Init+0x188>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d018      	beq.n	800597c <HAL_TIM_PWM_Init+0x6c>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a53      	ldr	r2, [pc, #332]	; (8005a9c <HAL_TIM_PWM_Init+0x18c>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d013      	beq.n	800597c <HAL_TIM_PWM_Init+0x6c>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a51      	ldr	r2, [pc, #324]	; (8005aa0 <HAL_TIM_PWM_Init+0x190>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d00e      	beq.n	800597c <HAL_TIM_PWM_Init+0x6c>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a50      	ldr	r2, [pc, #320]	; (8005aa4 <HAL_TIM_PWM_Init+0x194>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d009      	beq.n	800597c <HAL_TIM_PWM_Init+0x6c>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a4e      	ldr	r2, [pc, #312]	; (8005aa8 <HAL_TIM_PWM_Init+0x198>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d004      	beq.n	800597c <HAL_TIM_PWM_Init+0x6c>
 8005972:	f240 5113 	movw	r1, #1299	; 0x513
 8005976:	484d      	ldr	r0, [pc, #308]	; (8005aac <HAL_TIM_PWM_Init+0x19c>)
 8005978:	f7fb ff0c 	bl	8001794 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d014      	beq.n	80059ae <HAL_TIM_PWM_Init+0x9e>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	2b10      	cmp	r3, #16
 800598a:	d010      	beq.n	80059ae <HAL_TIM_PWM_Init+0x9e>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	2b20      	cmp	r3, #32
 8005992:	d00c      	beq.n	80059ae <HAL_TIM_PWM_Init+0x9e>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	2b40      	cmp	r3, #64	; 0x40
 800599a:	d008      	beq.n	80059ae <HAL_TIM_PWM_Init+0x9e>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	2b60      	cmp	r3, #96	; 0x60
 80059a2:	d004      	beq.n	80059ae <HAL_TIM_PWM_Init+0x9e>
 80059a4:	f240 5114 	movw	r1, #1300	; 0x514
 80059a8:	4840      	ldr	r0, [pc, #256]	; (8005aac <HAL_TIM_PWM_Init+0x19c>)
 80059aa:	f7fb fef3 	bl	8001794 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	691b      	ldr	r3, [r3, #16]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d00e      	beq.n	80059d4 <HAL_TIM_PWM_Init+0xc4>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	691b      	ldr	r3, [r3, #16]
 80059ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059be:	d009      	beq.n	80059d4 <HAL_TIM_PWM_Init+0xc4>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	691b      	ldr	r3, [r3, #16]
 80059c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059c8:	d004      	beq.n	80059d4 <HAL_TIM_PWM_Init+0xc4>
 80059ca:	f240 5115 	movw	r1, #1301	; 0x515
 80059ce:	4837      	ldr	r0, [pc, #220]	; (8005aac <HAL_TIM_PWM_Init+0x19c>)
 80059d0:	f7fb fee0 	bl	8001794 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	699b      	ldr	r3, [r3, #24]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d008      	beq.n	80059ee <HAL_TIM_PWM_Init+0xde>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	699b      	ldr	r3, [r3, #24]
 80059e0:	2b80      	cmp	r3, #128	; 0x80
 80059e2:	d004      	beq.n	80059ee <HAL_TIM_PWM_Init+0xde>
 80059e4:	f240 5116 	movw	r1, #1302	; 0x516
 80059e8:	4830      	ldr	r0, [pc, #192]	; (8005aac <HAL_TIM_PWM_Init+0x19c>)
 80059ea:	f7fb fed3 	bl	8001794 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d111      	bne.n	8005a1e <HAL_TIM_PWM_Init+0x10e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2200      	movs	r2, #0
 80059fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f001 fdd2 	bl	80075ac <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d102      	bne.n	8005a16 <HAL_TIM_PWM_Init+0x106>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	4a27      	ldr	r2, [pc, #156]	; (8005ab0 <HAL_TIM_PWM_Init+0x1a0>)
 8005a14:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2202      	movs	r2, #2
 8005a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	3304      	adds	r3, #4
 8005a2e:	4619      	mov	r1, r3
 8005a30:	4610      	mov	r0, r2
 8005a32:	f001 fa11 	bl	8006e58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2201      	movs	r2, #1
 8005a3a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2201      	movs	r2, #1
 8005a42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2201      	movs	r2, #1
 8005a4a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2201      	movs	r2, #1
 8005a52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2201      	movs	r2, #1
 8005a5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2201      	movs	r2, #1
 8005a62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2201      	movs	r2, #1
 8005a6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2201      	movs	r2, #1
 8005a72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2201      	movs	r2, #1
 8005a7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2201      	movs	r2, #1
 8005a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a86:	2300      	movs	r3, #0
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3708      	adds	r7, #8
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}
 8005a90:	40012c00 	.word	0x40012c00
 8005a94:	40013400 	.word	0x40013400
 8005a98:	40000400 	.word	0x40000400
 8005a9c:	40000800 	.word	0x40000800
 8005aa0:	40000c00 	.word	0x40000c00
 8005aa4:	40001000 	.word	0x40001000
 8005aa8:	40001400 	.word	0x40001400
 8005aac:	0800c434 	.word	0x0800c434
 8005ab0:	08005ab5 	.word	0x08005ab5

08005ab4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b083      	sub	sp, #12
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005abc:	bf00      	nop
 8005abe:	370c      	adds	r7, #12
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bc80      	pop	{r7}
 8005ac4:	4770      	bx	lr
	...

08005ac8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b084      	sub	sp, #16
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a8a      	ldr	r2, [pc, #552]	; (8005d00 <HAL_TIM_PWM_Start+0x238>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d10b      	bne.n	8005af4 <HAL_TIM_PWM_Start+0x2c>
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d062      	beq.n	8005ba8 <HAL_TIM_PWM_Start+0xe0>
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	2b04      	cmp	r3, #4
 8005ae6:	d05f      	beq.n	8005ba8 <HAL_TIM_PWM_Start+0xe0>
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	2b08      	cmp	r3, #8
 8005aec:	d05c      	beq.n	8005ba8 <HAL_TIM_PWM_Start+0xe0>
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	2b0c      	cmp	r3, #12
 8005af2:	d059      	beq.n	8005ba8 <HAL_TIM_PWM_Start+0xe0>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a82      	ldr	r2, [pc, #520]	; (8005d04 <HAL_TIM_PWM_Start+0x23c>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d10b      	bne.n	8005b16 <HAL_TIM_PWM_Start+0x4e>
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d051      	beq.n	8005ba8 <HAL_TIM_PWM_Start+0xe0>
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	2b04      	cmp	r3, #4
 8005b08:	d04e      	beq.n	8005ba8 <HAL_TIM_PWM_Start+0xe0>
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	2b08      	cmp	r3, #8
 8005b0e:	d04b      	beq.n	8005ba8 <HAL_TIM_PWM_Start+0xe0>
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	2b0c      	cmp	r3, #12
 8005b14:	d048      	beq.n	8005ba8 <HAL_TIM_PWM_Start+0xe0>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b1e:	d10b      	bne.n	8005b38 <HAL_TIM_PWM_Start+0x70>
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d040      	beq.n	8005ba8 <HAL_TIM_PWM_Start+0xe0>
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	2b04      	cmp	r3, #4
 8005b2a:	d03d      	beq.n	8005ba8 <HAL_TIM_PWM_Start+0xe0>
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	2b08      	cmp	r3, #8
 8005b30:	d03a      	beq.n	8005ba8 <HAL_TIM_PWM_Start+0xe0>
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	2b0c      	cmp	r3, #12
 8005b36:	d037      	beq.n	8005ba8 <HAL_TIM_PWM_Start+0xe0>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a72      	ldr	r2, [pc, #456]	; (8005d08 <HAL_TIM_PWM_Start+0x240>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d10b      	bne.n	8005b5a <HAL_TIM_PWM_Start+0x92>
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d02f      	beq.n	8005ba8 <HAL_TIM_PWM_Start+0xe0>
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	2b04      	cmp	r3, #4
 8005b4c:	d02c      	beq.n	8005ba8 <HAL_TIM_PWM_Start+0xe0>
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	2b08      	cmp	r3, #8
 8005b52:	d029      	beq.n	8005ba8 <HAL_TIM_PWM_Start+0xe0>
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	2b0c      	cmp	r3, #12
 8005b58:	d026      	beq.n	8005ba8 <HAL_TIM_PWM_Start+0xe0>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a6b      	ldr	r2, [pc, #428]	; (8005d0c <HAL_TIM_PWM_Start+0x244>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d10b      	bne.n	8005b7c <HAL_TIM_PWM_Start+0xb4>
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d01e      	beq.n	8005ba8 <HAL_TIM_PWM_Start+0xe0>
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	2b04      	cmp	r3, #4
 8005b6e:	d01b      	beq.n	8005ba8 <HAL_TIM_PWM_Start+0xe0>
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	2b08      	cmp	r3, #8
 8005b74:	d018      	beq.n	8005ba8 <HAL_TIM_PWM_Start+0xe0>
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	2b0c      	cmp	r3, #12
 8005b7a:	d015      	beq.n	8005ba8 <HAL_TIM_PWM_Start+0xe0>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a63      	ldr	r2, [pc, #396]	; (8005d10 <HAL_TIM_PWM_Start+0x248>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d10b      	bne.n	8005b9e <HAL_TIM_PWM_Start+0xd6>
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d00d      	beq.n	8005ba8 <HAL_TIM_PWM_Start+0xe0>
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	2b04      	cmp	r3, #4
 8005b90:	d00a      	beq.n	8005ba8 <HAL_TIM_PWM_Start+0xe0>
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	2b08      	cmp	r3, #8
 8005b96:	d007      	beq.n	8005ba8 <HAL_TIM_PWM_Start+0xe0>
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	2b0c      	cmp	r3, #12
 8005b9c:	d004      	beq.n	8005ba8 <HAL_TIM_PWM_Start+0xe0>
 8005b9e:	f240 5199 	movw	r1, #1433	; 0x599
 8005ba2:	485c      	ldr	r0, [pc, #368]	; (8005d14 <HAL_TIM_PWM_Start+0x24c>)
 8005ba4:	f7fb fdf6 	bl	8001794 <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d109      	bne.n	8005bc2 <HAL_TIM_PWM_Start+0xfa>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005bb4:	b2db      	uxtb	r3, r3
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	bf14      	ite	ne
 8005bba:	2301      	movne	r3, #1
 8005bbc:	2300      	moveq	r3, #0
 8005bbe:	b2db      	uxtb	r3, r3
 8005bc0:	e022      	b.n	8005c08 <HAL_TIM_PWM_Start+0x140>
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	2b04      	cmp	r3, #4
 8005bc6:	d109      	bne.n	8005bdc <HAL_TIM_PWM_Start+0x114>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005bce:	b2db      	uxtb	r3, r3
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	bf14      	ite	ne
 8005bd4:	2301      	movne	r3, #1
 8005bd6:	2300      	moveq	r3, #0
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	e015      	b.n	8005c08 <HAL_TIM_PWM_Start+0x140>
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	2b08      	cmp	r3, #8
 8005be0:	d109      	bne.n	8005bf6 <HAL_TIM_PWM_Start+0x12e>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	bf14      	ite	ne
 8005bee:	2301      	movne	r3, #1
 8005bf0:	2300      	moveq	r3, #0
 8005bf2:	b2db      	uxtb	r3, r3
 8005bf4:	e008      	b.n	8005c08 <HAL_TIM_PWM_Start+0x140>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005bfc:	b2db      	uxtb	r3, r3
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	bf14      	ite	ne
 8005c02:	2301      	movne	r3, #1
 8005c04:	2300      	moveq	r3, #0
 8005c06:	b2db      	uxtb	r3, r3
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d001      	beq.n	8005c10 <HAL_TIM_PWM_Start+0x148>
  {
    return HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	e072      	b.n	8005cf6 <HAL_TIM_PWM_Start+0x22e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d104      	bne.n	8005c20 <HAL_TIM_PWM_Start+0x158>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2202      	movs	r2, #2
 8005c1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c1e:	e013      	b.n	8005c48 <HAL_TIM_PWM_Start+0x180>
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	2b04      	cmp	r3, #4
 8005c24:	d104      	bne.n	8005c30 <HAL_TIM_PWM_Start+0x168>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2202      	movs	r2, #2
 8005c2a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c2e:	e00b      	b.n	8005c48 <HAL_TIM_PWM_Start+0x180>
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	2b08      	cmp	r3, #8
 8005c34:	d104      	bne.n	8005c40 <HAL_TIM_PWM_Start+0x178>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2202      	movs	r2, #2
 8005c3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c3e:	e003      	b.n	8005c48 <HAL_TIM_PWM_Start+0x180>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2202      	movs	r2, #2
 8005c44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	6839      	ldr	r1, [r7, #0]
 8005c50:	4618      	mov	r0, r3
 8005c52:	f001 fc4b 	bl	80074ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a29      	ldr	r2, [pc, #164]	; (8005d00 <HAL_TIM_PWM_Start+0x238>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d004      	beq.n	8005c6a <HAL_TIM_PWM_Start+0x1a2>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a27      	ldr	r2, [pc, #156]	; (8005d04 <HAL_TIM_PWM_Start+0x23c>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d101      	bne.n	8005c6e <HAL_TIM_PWM_Start+0x1a6>
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e000      	b.n	8005c70 <HAL_TIM_PWM_Start+0x1a8>
 8005c6e:	2300      	movs	r3, #0
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d007      	beq.n	8005c84 <HAL_TIM_PWM_Start+0x1bc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c82:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a1d      	ldr	r2, [pc, #116]	; (8005d00 <HAL_TIM_PWM_Start+0x238>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d018      	beq.n	8005cc0 <HAL_TIM_PWM_Start+0x1f8>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a1c      	ldr	r2, [pc, #112]	; (8005d04 <HAL_TIM_PWM_Start+0x23c>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d013      	beq.n	8005cc0 <HAL_TIM_PWM_Start+0x1f8>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ca0:	d00e      	beq.n	8005cc0 <HAL_TIM_PWM_Start+0x1f8>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a18      	ldr	r2, [pc, #96]	; (8005d08 <HAL_TIM_PWM_Start+0x240>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d009      	beq.n	8005cc0 <HAL_TIM_PWM_Start+0x1f8>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a16      	ldr	r2, [pc, #88]	; (8005d0c <HAL_TIM_PWM_Start+0x244>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d004      	beq.n	8005cc0 <HAL_TIM_PWM_Start+0x1f8>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a15      	ldr	r2, [pc, #84]	; (8005d10 <HAL_TIM_PWM_Start+0x248>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d111      	bne.n	8005ce4 <HAL_TIM_PWM_Start+0x21c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	f003 0307 	and.w	r3, r3, #7
 8005cca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2b06      	cmp	r3, #6
 8005cd0:	d010      	beq.n	8005cf4 <HAL_TIM_PWM_Start+0x22c>
    {
      __HAL_TIM_ENABLE(htim);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f042 0201 	orr.w	r2, r2, #1
 8005ce0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ce2:	e007      	b.n	8005cf4 <HAL_TIM_PWM_Start+0x22c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f042 0201 	orr.w	r2, r2, #1
 8005cf2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005cf4:	2300      	movs	r3, #0
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3710      	adds	r7, #16
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}
 8005cfe:	bf00      	nop
 8005d00:	40012c00 	.word	0x40012c00
 8005d04:	40013400 	.word	0x40013400
 8005d08:	40000400 	.word	0x40000400
 8005d0c:	40000800 	.word	0x40000800
 8005d10:	40000c00 	.word	0x40000c00
 8005d14:	0800c434 	.word	0x0800c434

08005d18 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b086      	sub	sp, #24
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d101      	bne.n	8005d2c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e192      	b.n	8006052 <HAL_TIM_Encoder_Init+0x33a>
  }

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a7d      	ldr	r2, [pc, #500]	; (8005f28 <HAL_TIM_Encoder_Init+0x210>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d01d      	beq.n	8005d72 <HAL_TIM_Encoder_Init+0x5a>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a7c      	ldr	r2, [pc, #496]	; (8005f2c <HAL_TIM_Encoder_Init+0x214>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d018      	beq.n	8005d72 <HAL_TIM_Encoder_Init+0x5a>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d48:	d013      	beq.n	8005d72 <HAL_TIM_Encoder_Init+0x5a>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a78      	ldr	r2, [pc, #480]	; (8005f30 <HAL_TIM_Encoder_Init+0x218>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d00e      	beq.n	8005d72 <HAL_TIM_Encoder_Init+0x5a>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a76      	ldr	r2, [pc, #472]	; (8005f34 <HAL_TIM_Encoder_Init+0x21c>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d009      	beq.n	8005d72 <HAL_TIM_Encoder_Init+0x5a>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a75      	ldr	r2, [pc, #468]	; (8005f38 <HAL_TIM_Encoder_Init+0x220>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d004      	beq.n	8005d72 <HAL_TIM_Encoder_Init+0x5a>
 8005d68:	f640 318e 	movw	r1, #2958	; 0xb8e
 8005d6c:	4873      	ldr	r0, [pc, #460]	; (8005f3c <HAL_TIM_Encoder_Init+0x224>)
 8005d6e:	f7fb fd11 	bl	8001794 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	689b      	ldr	r3, [r3, #8]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d014      	beq.n	8005da4 <HAL_TIM_Encoder_Init+0x8c>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	2b10      	cmp	r3, #16
 8005d80:	d010      	beq.n	8005da4 <HAL_TIM_Encoder_Init+0x8c>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	2b20      	cmp	r3, #32
 8005d88:	d00c      	beq.n	8005da4 <HAL_TIM_Encoder_Init+0x8c>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	2b40      	cmp	r3, #64	; 0x40
 8005d90:	d008      	beq.n	8005da4 <HAL_TIM_Encoder_Init+0x8c>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	2b60      	cmp	r3, #96	; 0x60
 8005d98:	d004      	beq.n	8005da4 <HAL_TIM_Encoder_Init+0x8c>
 8005d9a:	f640 318f 	movw	r1, #2959	; 0xb8f
 8005d9e:	4867      	ldr	r0, [pc, #412]	; (8005f3c <HAL_TIM_Encoder_Init+0x224>)
 8005da0:	f7fb fcf8 	bl	8001794 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	691b      	ldr	r3, [r3, #16]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d00e      	beq.n	8005dca <HAL_TIM_Encoder_Init+0xb2>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	691b      	ldr	r3, [r3, #16]
 8005db0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005db4:	d009      	beq.n	8005dca <HAL_TIM_Encoder_Init+0xb2>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	691b      	ldr	r3, [r3, #16]
 8005dba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dbe:	d004      	beq.n	8005dca <HAL_TIM_Encoder_Init+0xb2>
 8005dc0:	f44f 6139 	mov.w	r1, #2960	; 0xb90
 8005dc4:	485d      	ldr	r0, [pc, #372]	; (8005f3c <HAL_TIM_Encoder_Init+0x224>)
 8005dc6:	f7fb fce5 	bl	8001794 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	699b      	ldr	r3, [r3, #24]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d008      	beq.n	8005de4 <HAL_TIM_Encoder_Init+0xcc>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	699b      	ldr	r3, [r3, #24]
 8005dd6:	2b80      	cmp	r3, #128	; 0x80
 8005dd8:	d004      	beq.n	8005de4 <HAL_TIM_Encoder_Init+0xcc>
 8005dda:	f640 3191 	movw	r1, #2961	; 0xb91
 8005dde:	4857      	ldr	r0, [pc, #348]	; (8005f3c <HAL_TIM_Encoder_Init+0x224>)
 8005de0:	f7fb fcd8 	bl	8001794 <assert_failed>
  assert_param(IS_TIM_ENCODER_MODE(sConfig->EncoderMode));
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d00c      	beq.n	8005e06 <HAL_TIM_Encoder_Init+0xee>
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	2b02      	cmp	r3, #2
 8005df2:	d008      	beq.n	8005e06 <HAL_TIM_Encoder_Init+0xee>
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	2b03      	cmp	r3, #3
 8005dfa:	d004      	beq.n	8005e06 <HAL_TIM_Encoder_Init+0xee>
 8005dfc:	f640 3192 	movw	r1, #2962	; 0xb92
 8005e00:	484e      	ldr	r0, [pc, #312]	; (8005f3c <HAL_TIM_Encoder_Init+0x224>)
 8005e02:	f7fb fcc7 	bl	8001794 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC1Selection));
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	d00c      	beq.n	8005e28 <HAL_TIM_Encoder_Init+0x110>
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	2b02      	cmp	r3, #2
 8005e14:	d008      	beq.n	8005e28 <HAL_TIM_Encoder_Init+0x110>
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	2b03      	cmp	r3, #3
 8005e1c:	d004      	beq.n	8005e28 <HAL_TIM_Encoder_Init+0x110>
 8005e1e:	f640 3193 	movw	r1, #2963	; 0xb93
 8005e22:	4846      	ldr	r0, [pc, #280]	; (8005f3c <HAL_TIM_Encoder_Init+0x224>)
 8005e24:	f7fb fcb6 	bl	8001794 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC2Selection));
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	699b      	ldr	r3, [r3, #24]
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d00c      	beq.n	8005e4a <HAL_TIM_Encoder_Init+0x132>
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	699b      	ldr	r3, [r3, #24]
 8005e34:	2b02      	cmp	r3, #2
 8005e36:	d008      	beq.n	8005e4a <HAL_TIM_Encoder_Init+0x132>
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	699b      	ldr	r3, [r3, #24]
 8005e3c:	2b03      	cmp	r3, #3
 8005e3e:	d004      	beq.n	8005e4a <HAL_TIM_Encoder_Init+0x132>
 8005e40:	f640 3194 	movw	r1, #2964	; 0xb94
 8005e44:	483d      	ldr	r0, [pc, #244]	; (8005f3c <HAL_TIM_Encoder_Init+0x224>)
 8005e46:	f7fb fca5 	bl	8001794 <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC1Polarity));
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d008      	beq.n	8005e64 <HAL_TIM_Encoder_Init+0x14c>
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	2b02      	cmp	r3, #2
 8005e58:	d004      	beq.n	8005e64 <HAL_TIM_Encoder_Init+0x14c>
 8005e5a:	f640 3195 	movw	r1, #2965	; 0xb95
 8005e5e:	4837      	ldr	r0, [pc, #220]	; (8005f3c <HAL_TIM_Encoder_Init+0x224>)
 8005e60:	f7fb fc98 	bl	8001794 <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC2Polarity));
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	695b      	ldr	r3, [r3, #20]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d008      	beq.n	8005e7e <HAL_TIM_Encoder_Init+0x166>
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	695b      	ldr	r3, [r3, #20]
 8005e70:	2b02      	cmp	r3, #2
 8005e72:	d004      	beq.n	8005e7e <HAL_TIM_Encoder_Init+0x166>
 8005e74:	f640 3196 	movw	r1, #2966	; 0xb96
 8005e78:	4830      	ldr	r0, [pc, #192]	; (8005f3c <HAL_TIM_Encoder_Init+0x224>)
 8005e7a:	f7fb fc8b 	bl	8001794 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	68db      	ldr	r3, [r3, #12]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d010      	beq.n	8005ea8 <HAL_TIM_Encoder_Init+0x190>
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	68db      	ldr	r3, [r3, #12]
 8005e8a:	2b04      	cmp	r3, #4
 8005e8c:	d00c      	beq.n	8005ea8 <HAL_TIM_Encoder_Init+0x190>
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	68db      	ldr	r3, [r3, #12]
 8005e92:	2b08      	cmp	r3, #8
 8005e94:	d008      	beq.n	8005ea8 <HAL_TIM_Encoder_Init+0x190>
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	68db      	ldr	r3, [r3, #12]
 8005e9a:	2b0c      	cmp	r3, #12
 8005e9c:	d004      	beq.n	8005ea8 <HAL_TIM_Encoder_Init+0x190>
 8005e9e:	f640 3197 	movw	r1, #2967	; 0xb97
 8005ea2:	4826      	ldr	r0, [pc, #152]	; (8005f3c <HAL_TIM_Encoder_Init+0x224>)
 8005ea4:	f7fb fc76 	bl	8001794 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	69db      	ldr	r3, [r3, #28]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d010      	beq.n	8005ed2 <HAL_TIM_Encoder_Init+0x1ba>
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	69db      	ldr	r3, [r3, #28]
 8005eb4:	2b04      	cmp	r3, #4
 8005eb6:	d00c      	beq.n	8005ed2 <HAL_TIM_Encoder_Init+0x1ba>
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	69db      	ldr	r3, [r3, #28]
 8005ebc:	2b08      	cmp	r3, #8
 8005ebe:	d008      	beq.n	8005ed2 <HAL_TIM_Encoder_Init+0x1ba>
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	69db      	ldr	r3, [r3, #28]
 8005ec4:	2b0c      	cmp	r3, #12
 8005ec6:	d004      	beq.n	8005ed2 <HAL_TIM_Encoder_Init+0x1ba>
 8005ec8:	f640 3198 	movw	r1, #2968	; 0xb98
 8005ecc:	481b      	ldr	r0, [pc, #108]	; (8005f3c <HAL_TIM_Encoder_Init+0x224>)
 8005ece:	f7fb fc61 	bl	8001794 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	691b      	ldr	r3, [r3, #16]
 8005ed6:	2b0f      	cmp	r3, #15
 8005ed8:	d904      	bls.n	8005ee4 <HAL_TIM_Encoder_Init+0x1cc>
 8005eda:	f640 3199 	movw	r1, #2969	; 0xb99
 8005ede:	4817      	ldr	r0, [pc, #92]	; (8005f3c <HAL_TIM_Encoder_Init+0x224>)
 8005ee0:	f7fb fc58 	bl	8001794 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	6a1b      	ldr	r3, [r3, #32]
 8005ee8:	2b0f      	cmp	r3, #15
 8005eea:	d904      	bls.n	8005ef6 <HAL_TIM_Encoder_Init+0x1de>
 8005eec:	f640 319a 	movw	r1, #2970	; 0xb9a
 8005ef0:	4812      	ldr	r0, [pc, #72]	; (8005f3c <HAL_TIM_Encoder_Init+0x224>)
 8005ef2:	f7fb fc4f 	bl	8001794 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005efc:	b2db      	uxtb	r3, r3
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d120      	bne.n	8005f44 <HAL_TIM_Encoder_Init+0x22c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2200      	movs	r2, #0
 8005f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f001 fb4e 	bl	80075ac <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d102      	bne.n	8005f1e <HAL_TIM_Encoder_Init+0x206>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	4a09      	ldr	r2, [pc, #36]	; (8005f40 <HAL_TIM_Encoder_Init+0x228>)
 8005f1c:	671a      	str	r2, [r3, #112]	; 0x70
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	4798      	blx	r3
 8005f26:	e00d      	b.n	8005f44 <HAL_TIM_Encoder_Init+0x22c>
 8005f28:	40012c00 	.word	0x40012c00
 8005f2c:	40013400 	.word	0x40013400
 8005f30:	40000400 	.word	0x40000400
 8005f34:	40000800 	.word	0x40000800
 8005f38:	40000c00 	.word	0x40000c00
 8005f3c:	0800c434 	.word	0x0800c434
 8005f40:	080019a1 	.word	0x080019a1
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2202      	movs	r2, #2
 8005f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	687a      	ldr	r2, [r7, #4]
 8005f54:	6812      	ldr	r2, [r2, #0]
 8005f56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f5a:	f023 0307 	bic.w	r3, r3, #7
 8005f5e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	3304      	adds	r3, #4
 8005f68:	4619      	mov	r1, r3
 8005f6a:	4610      	mov	r0, r2
 8005f6c:	f000 ff74 	bl	8006e58 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	699b      	ldr	r3, [r3, #24]
 8005f7e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	6a1b      	ldr	r3, [r3, #32]
 8005f86:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	697a      	ldr	r2, [r7, #20]
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f98:	f023 0303 	bic.w	r3, r3, #3
 8005f9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	689a      	ldr	r2, [r3, #8]
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	699b      	ldr	r3, [r3, #24]
 8005fa6:	021b      	lsls	r3, r3, #8
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	693a      	ldr	r2, [r7, #16]
 8005fac:	4313      	orrs	r3, r2
 8005fae:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005fb6:	f023 030c 	bic.w	r3, r3, #12
 8005fba:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005fc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005fc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	68da      	ldr	r2, [r3, #12]
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	69db      	ldr	r3, [r3, #28]
 8005fd0:	021b      	lsls	r3, r3, #8
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	693a      	ldr	r2, [r7, #16]
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	691b      	ldr	r3, [r3, #16]
 8005fde:	011a      	lsls	r2, r3, #4
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	6a1b      	ldr	r3, [r3, #32]
 8005fe4:	031b      	lsls	r3, r3, #12
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	693a      	ldr	r2, [r7, #16]
 8005fea:	4313      	orrs	r3, r2
 8005fec:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005ff4:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	685a      	ldr	r2, [r3, #4]
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	695b      	ldr	r3, [r3, #20]
 8005ffe:	011b      	lsls	r3, r3, #4
 8006000:	4313      	orrs	r3, r2
 8006002:	68fa      	ldr	r2, [r7, #12]
 8006004:	4313      	orrs	r3, r2
 8006006:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	697a      	ldr	r2, [r7, #20]
 800600e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	693a      	ldr	r2, [r7, #16]
 8006016:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	68fa      	ldr	r2, [r7, #12]
 800601e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2201      	movs	r2, #1
 8006024:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2201      	movs	r2, #1
 800602c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2201      	movs	r2, #1
 8006034:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2201      	movs	r2, #1
 800603c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2201      	movs	r2, #1
 8006044:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2201      	movs	r2, #1
 800604c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006050:	2300      	movs	r3, #0
}
 8006052:	4618      	mov	r0, r3
 8006054:	3718      	adds	r7, #24
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}
 800605a:	bf00      	nop

0800605c <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b084      	sub	sp, #16
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800606c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006074:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800607c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006084:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a5d      	ldr	r2, [pc, #372]	; (8006200 <HAL_TIM_Encoder_Start_IT+0x1a4>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d01d      	beq.n	80060cc <HAL_TIM_Encoder_Start_IT+0x70>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a5b      	ldr	r2, [pc, #364]	; (8006204 <HAL_TIM_Encoder_Start_IT+0x1a8>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d018      	beq.n	80060cc <HAL_TIM_Encoder_Start_IT+0x70>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060a2:	d013      	beq.n	80060cc <HAL_TIM_Encoder_Start_IT+0x70>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a57      	ldr	r2, [pc, #348]	; (8006208 <HAL_TIM_Encoder_Start_IT+0x1ac>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d00e      	beq.n	80060cc <HAL_TIM_Encoder_Start_IT+0x70>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a56      	ldr	r2, [pc, #344]	; (800620c <HAL_TIM_Encoder_Start_IT+0x1b0>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d009      	beq.n	80060cc <HAL_TIM_Encoder_Start_IT+0x70>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a54      	ldr	r2, [pc, #336]	; (8006210 <HAL_TIM_Encoder_Start_IT+0x1b4>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d004      	beq.n	80060cc <HAL_TIM_Encoder_Start_IT+0x70>
 80060c2:	f640 41e4 	movw	r1, #3300	; 0xce4
 80060c6:	4853      	ldr	r0, [pc, #332]	; (8006214 <HAL_TIM_Encoder_Start_IT+0x1b8>)
 80060c8:	f7fb fb64 	bl	8001794 <assert_failed>

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d110      	bne.n	80060f4 <HAL_TIM_Encoder_Start_IT+0x98>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80060d2:	7bfb      	ldrb	r3, [r7, #15]
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	d102      	bne.n	80060de <HAL_TIM_Encoder_Start_IT+0x82>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80060d8:	7b7b      	ldrb	r3, [r7, #13]
 80060da:	2b01      	cmp	r3, #1
 80060dc:	d001      	beq.n	80060e2 <HAL_TIM_Encoder_Start_IT+0x86>
    {
      return HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	e089      	b.n	80061f6 <HAL_TIM_Encoder_Start_IT+0x19a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2202      	movs	r2, #2
 80060e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2202      	movs	r2, #2
 80060ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80060f2:	e031      	b.n	8006158 <HAL_TIM_Encoder_Start_IT+0xfc>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	2b04      	cmp	r3, #4
 80060f8:	d110      	bne.n	800611c <HAL_TIM_Encoder_Start_IT+0xc0>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80060fa:	7bbb      	ldrb	r3, [r7, #14]
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d102      	bne.n	8006106 <HAL_TIM_Encoder_Start_IT+0xaa>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006100:	7b3b      	ldrb	r3, [r7, #12]
 8006102:	2b01      	cmp	r3, #1
 8006104:	d001      	beq.n	800610a <HAL_TIM_Encoder_Start_IT+0xae>
    {
      return HAL_ERROR;
 8006106:	2301      	movs	r3, #1
 8006108:	e075      	b.n	80061f6 <HAL_TIM_Encoder_Start_IT+0x19a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2202      	movs	r2, #2
 800610e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2202      	movs	r2, #2
 8006116:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800611a:	e01d      	b.n	8006158 <HAL_TIM_Encoder_Start_IT+0xfc>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800611c:	7bfb      	ldrb	r3, [r7, #15]
 800611e:	2b01      	cmp	r3, #1
 8006120:	d108      	bne.n	8006134 <HAL_TIM_Encoder_Start_IT+0xd8>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006122:	7bbb      	ldrb	r3, [r7, #14]
 8006124:	2b01      	cmp	r3, #1
 8006126:	d105      	bne.n	8006134 <HAL_TIM_Encoder_Start_IT+0xd8>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006128:	7b7b      	ldrb	r3, [r7, #13]
 800612a:	2b01      	cmp	r3, #1
 800612c:	d102      	bne.n	8006134 <HAL_TIM_Encoder_Start_IT+0xd8>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800612e:	7b3b      	ldrb	r3, [r7, #12]
 8006130:	2b01      	cmp	r3, #1
 8006132:	d001      	beq.n	8006138 <HAL_TIM_Encoder_Start_IT+0xdc>
    {
      return HAL_ERROR;
 8006134:	2301      	movs	r3, #1
 8006136:	e05e      	b.n	80061f6 <HAL_TIM_Encoder_Start_IT+0x19a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2202      	movs	r2, #2
 800613c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2202      	movs	r2, #2
 8006144:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2202      	movs	r2, #2
 800614c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2202      	movs	r2, #2
 8006154:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d003      	beq.n	8006166 <HAL_TIM_Encoder_Start_IT+0x10a>
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	2b04      	cmp	r3, #4
 8006162:	d010      	beq.n	8006186 <HAL_TIM_Encoder_Start_IT+0x12a>
 8006164:	e01f      	b.n	80061a6 <HAL_TIM_Encoder_Start_IT+0x14a>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	2201      	movs	r2, #1
 800616c:	2100      	movs	r1, #0
 800616e:	4618      	mov	r0, r3
 8006170:	f001 f9bc 	bl	80074ec <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	68da      	ldr	r2, [r3, #12]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f042 0202 	orr.w	r2, r2, #2
 8006182:	60da      	str	r2, [r3, #12]
      break;
 8006184:	e02e      	b.n	80061e4 <HAL_TIM_Encoder_Start_IT+0x188>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	2201      	movs	r2, #1
 800618c:	2104      	movs	r1, #4
 800618e:	4618      	mov	r0, r3
 8006190:	f001 f9ac 	bl	80074ec <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	68da      	ldr	r2, [r3, #12]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f042 0204 	orr.w	r2, r2, #4
 80061a2:	60da      	str	r2, [r3, #12]
      break;
 80061a4:	e01e      	b.n	80061e4 <HAL_TIM_Encoder_Start_IT+0x188>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	2201      	movs	r2, #1
 80061ac:	2100      	movs	r1, #0
 80061ae:	4618      	mov	r0, r3
 80061b0:	f001 f99c 	bl	80074ec <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	2201      	movs	r2, #1
 80061ba:	2104      	movs	r1, #4
 80061bc:	4618      	mov	r0, r3
 80061be:	f001 f995 	bl	80074ec <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	68da      	ldr	r2, [r3, #12]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f042 0202 	orr.w	r2, r2, #2
 80061d0:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	68da      	ldr	r2, [r3, #12]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f042 0204 	orr.w	r2, r2, #4
 80061e0:	60da      	str	r2, [r3, #12]
      break;
 80061e2:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	681a      	ldr	r2, [r3, #0]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f042 0201 	orr.w	r2, r2, #1
 80061f2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80061f4:	2300      	movs	r3, #0
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3710      	adds	r7, #16
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}
 80061fe:	bf00      	nop
 8006200:	40012c00 	.word	0x40012c00
 8006204:	40013400 	.word	0x40013400
 8006208:	40000400 	.word	0x40000400
 800620c:	40000800 	.word	0x40000800
 8006210:	40000c00 	.word	0x40000c00
 8006214:	0800c434 	.word	0x0800c434

08006218 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b082      	sub	sp, #8
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	691b      	ldr	r3, [r3, #16]
 8006226:	f003 0302 	and.w	r3, r3, #2
 800622a:	2b02      	cmp	r3, #2
 800622c:	d128      	bne.n	8006280 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	68db      	ldr	r3, [r3, #12]
 8006234:	f003 0302 	and.w	r3, r3, #2
 8006238:	2b02      	cmp	r3, #2
 800623a:	d121      	bne.n	8006280 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f06f 0202 	mvn.w	r2, #2
 8006244:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2201      	movs	r2, #1
 800624a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	699b      	ldr	r3, [r3, #24]
 8006252:	f003 0303 	and.w	r3, r3, #3
 8006256:	2b00      	cmp	r3, #0
 8006258:	d005      	beq.n	8006266 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	4798      	blx	r3
 8006264:	e009      	b.n	800627a <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2200      	movs	r2, #0
 800627e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	691b      	ldr	r3, [r3, #16]
 8006286:	f003 0304 	and.w	r3, r3, #4
 800628a:	2b04      	cmp	r3, #4
 800628c:	d128      	bne.n	80062e0 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	f003 0304 	and.w	r3, r3, #4
 8006298:	2b04      	cmp	r3, #4
 800629a:	d121      	bne.n	80062e0 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f06f 0204 	mvn.w	r2, #4
 80062a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2202      	movs	r2, #2
 80062aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	699b      	ldr	r3, [r3, #24]
 80062b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d005      	beq.n	80062c6 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	4798      	blx	r3
 80062c4:	e009      	b.n	80062da <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2200      	movs	r2, #0
 80062de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	691b      	ldr	r3, [r3, #16]
 80062e6:	f003 0308 	and.w	r3, r3, #8
 80062ea:	2b08      	cmp	r3, #8
 80062ec:	d128      	bne.n	8006340 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	68db      	ldr	r3, [r3, #12]
 80062f4:	f003 0308 	and.w	r3, r3, #8
 80062f8:	2b08      	cmp	r3, #8
 80062fa:	d121      	bne.n	8006340 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f06f 0208 	mvn.w	r2, #8
 8006304:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2204      	movs	r2, #4
 800630a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	69db      	ldr	r3, [r3, #28]
 8006312:	f003 0303 	and.w	r3, r3, #3
 8006316:	2b00      	cmp	r3, #0
 8006318:	d005      	beq.n	8006326 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	4798      	blx	r3
 8006324:	e009      	b.n	800633a <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2200      	movs	r2, #0
 800633e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	691b      	ldr	r3, [r3, #16]
 8006346:	f003 0310 	and.w	r3, r3, #16
 800634a:	2b10      	cmp	r3, #16
 800634c:	d128      	bne.n	80063a0 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	68db      	ldr	r3, [r3, #12]
 8006354:	f003 0310 	and.w	r3, r3, #16
 8006358:	2b10      	cmp	r3, #16
 800635a:	d121      	bne.n	80063a0 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f06f 0210 	mvn.w	r2, #16
 8006364:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2208      	movs	r2, #8
 800636a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	69db      	ldr	r3, [r3, #28]
 8006372:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006376:	2b00      	cmp	r3, #0
 8006378:	d005      	beq.n	8006386 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	4798      	blx	r3
 8006384:	e009      	b.n	800639a <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2200      	movs	r2, #0
 800639e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	691b      	ldr	r3, [r3, #16]
 80063a6:	f003 0301 	and.w	r3, r3, #1
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	d110      	bne.n	80063d0 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	68db      	ldr	r3, [r3, #12]
 80063b4:	f003 0301 	and.w	r3, r3, #1
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d109      	bne.n	80063d0 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f06f 0201 	mvn.w	r2, #1
 80063c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	691b      	ldr	r3, [r3, #16]
 80063d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063da:	2b80      	cmp	r3, #128	; 0x80
 80063dc:	d110      	bne.n	8006400 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	68db      	ldr	r3, [r3, #12]
 80063e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063e8:	2b80      	cmp	r3, #128	; 0x80
 80063ea:	d109      	bne.n	8006400 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80063f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	691b      	ldr	r3, [r3, #16]
 8006406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800640a:	2b40      	cmp	r3, #64	; 0x40
 800640c:	d110      	bne.n	8006430 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	68db      	ldr	r3, [r3, #12]
 8006414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006418:	2b40      	cmp	r3, #64	; 0x40
 800641a:	d109      	bne.n	8006430 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006424:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	691b      	ldr	r3, [r3, #16]
 8006436:	f003 0320 	and.w	r3, r3, #32
 800643a:	2b20      	cmp	r3, #32
 800643c:	d110      	bne.n	8006460 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	68db      	ldr	r3, [r3, #12]
 8006444:	f003 0320 	and.w	r3, r3, #32
 8006448:	2b20      	cmp	r3, #32
 800644a:	d109      	bne.n	8006460 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f06f 0220 	mvn.w	r2, #32
 8006454:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006460:	bf00      	nop
 8006462:	3708      	adds	r7, #8
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}

08006468 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b084      	sub	sp, #16
 800646c:	af00      	add	r7, sp, #0
 800646e:	60f8      	str	r0, [r7, #12]
 8006470:	60b9      	str	r1, [r7, #8]
 8006472:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d010      	beq.n	800649c <HAL_TIM_PWM_ConfigChannel+0x34>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2b04      	cmp	r3, #4
 800647e:	d00d      	beq.n	800649c <HAL_TIM_PWM_ConfigChannel+0x34>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2b08      	cmp	r3, #8
 8006484:	d00a      	beq.n	800649c <HAL_TIM_PWM_ConfigChannel+0x34>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2b0c      	cmp	r3, #12
 800648a:	d007      	beq.n	800649c <HAL_TIM_PWM_ConfigChannel+0x34>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2b3c      	cmp	r3, #60	; 0x3c
 8006490:	d004      	beq.n	800649c <HAL_TIM_PWM_ConfigChannel+0x34>
 8006492:	f241 0127 	movw	r1, #4135	; 0x1027
 8006496:	4890      	ldr	r0, [pc, #576]	; (80066d8 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8006498:	f7fb f97c 	bl	8001794 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	2b60      	cmp	r3, #96	; 0x60
 80064a2:	d008      	beq.n	80064b6 <HAL_TIM_PWM_ConfigChannel+0x4e>
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	2b70      	cmp	r3, #112	; 0x70
 80064aa:	d004      	beq.n	80064b6 <HAL_TIM_PWM_ConfigChannel+0x4e>
 80064ac:	f241 0128 	movw	r1, #4136	; 0x1028
 80064b0:	4889      	ldr	r0, [pc, #548]	; (80066d8 <HAL_TIM_PWM_ConfigChannel+0x270>)
 80064b2:	f7fb f96f 	bl	8001794 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d008      	beq.n	80064d0 <HAL_TIM_PWM_ConfigChannel+0x68>
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	2b02      	cmp	r3, #2
 80064c4:	d004      	beq.n	80064d0 <HAL_TIM_PWM_ConfigChannel+0x68>
 80064c6:	f241 0129 	movw	r1, #4137	; 0x1029
 80064ca:	4883      	ldr	r0, [pc, #524]	; (80066d8 <HAL_TIM_PWM_ConfigChannel+0x270>)
 80064cc:	f7fb f962 	bl	8001794 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	691b      	ldr	r3, [r3, #16]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d008      	beq.n	80064ea <HAL_TIM_PWM_ConfigChannel+0x82>
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	691b      	ldr	r3, [r3, #16]
 80064dc:	2b04      	cmp	r3, #4
 80064de:	d004      	beq.n	80064ea <HAL_TIM_PWM_ConfigChannel+0x82>
 80064e0:	f241 012a 	movw	r1, #4138	; 0x102a
 80064e4:	487c      	ldr	r0, [pc, #496]	; (80066d8 <HAL_TIM_PWM_ConfigChannel+0x270>)
 80064e6:	f7fb f955 	bl	8001794 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064f0:	2b01      	cmp	r3, #1
 80064f2:	d101      	bne.n	80064f8 <HAL_TIM_PWM_ConfigChannel+0x90>
 80064f4:	2302      	movs	r3, #2
 80064f6:	e145      	b.n	8006784 <HAL_TIM_PWM_ConfigChannel+0x31c>
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2201      	movs	r2, #1
 80064fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2b0c      	cmp	r3, #12
 8006504:	f200 8138 	bhi.w	8006778 <HAL_TIM_PWM_ConfigChannel+0x310>
 8006508:	a201      	add	r2, pc, #4	; (adr r2, 8006510 <HAL_TIM_PWM_ConfigChannel+0xa8>)
 800650a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800650e:	bf00      	nop
 8006510:	08006545 	.word	0x08006545
 8006514:	08006779 	.word	0x08006779
 8006518:	08006779 	.word	0x08006779
 800651c:	08006779 	.word	0x08006779
 8006520:	080065cb 	.word	0x080065cb
 8006524:	08006779 	.word	0x08006779
 8006528:	08006779 	.word	0x08006779
 800652c:	08006779 	.word	0x08006779
 8006530:	08006653 	.word	0x08006653
 8006534:	08006779 	.word	0x08006779
 8006538:	08006779 	.word	0x08006779
 800653c:	08006779 	.word	0x08006779
 8006540:	080066f1 	.word	0x080066f1
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a64      	ldr	r2, [pc, #400]	; (80066dc <HAL_TIM_PWM_ConfigChannel+0x274>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d01d      	beq.n	800658a <HAL_TIM_PWM_ConfigChannel+0x122>
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a63      	ldr	r2, [pc, #396]	; (80066e0 <HAL_TIM_PWM_ConfigChannel+0x278>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d018      	beq.n	800658a <HAL_TIM_PWM_ConfigChannel+0x122>
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006560:	d013      	beq.n	800658a <HAL_TIM_PWM_ConfigChannel+0x122>
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a5f      	ldr	r2, [pc, #380]	; (80066e4 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d00e      	beq.n	800658a <HAL_TIM_PWM_ConfigChannel+0x122>
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a5d      	ldr	r2, [pc, #372]	; (80066e8 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d009      	beq.n	800658a <HAL_TIM_PWM_ConfigChannel+0x122>
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a5c      	ldr	r2, [pc, #368]	; (80066ec <HAL_TIM_PWM_ConfigChannel+0x284>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d004      	beq.n	800658a <HAL_TIM_PWM_ConfigChannel+0x122>
 8006580:	f241 0134 	movw	r1, #4148	; 0x1034
 8006584:	4854      	ldr	r0, [pc, #336]	; (80066d8 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8006586:	f7fb f905 	bl	8001794 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	68b9      	ldr	r1, [r7, #8]
 8006590:	4618      	mov	r0, r3
 8006592:	f000 fcdb 	bl	8006f4c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	699a      	ldr	r2, [r3, #24]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f042 0208 	orr.w	r2, r2, #8
 80065a4:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	699a      	ldr	r2, [r3, #24]
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f022 0204 	bic.w	r2, r2, #4
 80065b4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	6999      	ldr	r1, [r3, #24]
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	691a      	ldr	r2, [r3, #16]
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	430a      	orrs	r2, r1
 80065c6:	619a      	str	r2, [r3, #24]
      break;
 80065c8:	e0d7      	b.n	800677a <HAL_TIM_PWM_ConfigChannel+0x312>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a43      	ldr	r2, [pc, #268]	; (80066dc <HAL_TIM_PWM_ConfigChannel+0x274>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d01d      	beq.n	8006610 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a41      	ldr	r2, [pc, #260]	; (80066e0 <HAL_TIM_PWM_ConfigChannel+0x278>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d018      	beq.n	8006610 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065e6:	d013      	beq.n	8006610 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a3d      	ldr	r2, [pc, #244]	; (80066e4 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d00e      	beq.n	8006610 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a3c      	ldr	r2, [pc, #240]	; (80066e8 <HAL_TIM_PWM_ConfigChannel+0x280>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d009      	beq.n	8006610 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a3a      	ldr	r2, [pc, #232]	; (80066ec <HAL_TIM_PWM_ConfigChannel+0x284>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d004      	beq.n	8006610 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 8006606:	f241 0145 	movw	r1, #4165	; 0x1045
 800660a:	4833      	ldr	r0, [pc, #204]	; (80066d8 <HAL_TIM_PWM_ConfigChannel+0x270>)
 800660c:	f7fb f8c2 	bl	8001794 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	68b9      	ldr	r1, [r7, #8]
 8006616:	4618      	mov	r0, r3
 8006618:	f000 fd32 	bl	8007080 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	699a      	ldr	r2, [r3, #24]
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800662a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	699a      	ldr	r2, [r3, #24]
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800663a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	6999      	ldr	r1, [r3, #24]
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	691b      	ldr	r3, [r3, #16]
 8006646:	021a      	lsls	r2, r3, #8
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	430a      	orrs	r2, r1
 800664e:	619a      	str	r2, [r3, #24]
      break;
 8006650:	e093      	b.n	800677a <HAL_TIM_PWM_ConfigChannel+0x312>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a21      	ldr	r2, [pc, #132]	; (80066dc <HAL_TIM_PWM_ConfigChannel+0x274>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d01d      	beq.n	8006698 <HAL_TIM_PWM_ConfigChannel+0x230>
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a1f      	ldr	r2, [pc, #124]	; (80066e0 <HAL_TIM_PWM_ConfigChannel+0x278>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d018      	beq.n	8006698 <HAL_TIM_PWM_ConfigChannel+0x230>
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800666e:	d013      	beq.n	8006698 <HAL_TIM_PWM_ConfigChannel+0x230>
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a1b      	ldr	r2, [pc, #108]	; (80066e4 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d00e      	beq.n	8006698 <HAL_TIM_PWM_ConfigChannel+0x230>
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a1a      	ldr	r2, [pc, #104]	; (80066e8 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d009      	beq.n	8006698 <HAL_TIM_PWM_ConfigChannel+0x230>
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a18      	ldr	r2, [pc, #96]	; (80066ec <HAL_TIM_PWM_ConfigChannel+0x284>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d004      	beq.n	8006698 <HAL_TIM_PWM_ConfigChannel+0x230>
 800668e:	f241 0156 	movw	r1, #4182	; 0x1056
 8006692:	4811      	ldr	r0, [pc, #68]	; (80066d8 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8006694:	f7fb f87e 	bl	8001794 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	68b9      	ldr	r1, [r7, #8]
 800669e:	4618      	mov	r0, r3
 80066a0:	f000 fd8c 	bl	80071bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	69da      	ldr	r2, [r3, #28]
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f042 0208 	orr.w	r2, r2, #8
 80066b2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	69da      	ldr	r2, [r3, #28]
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f022 0204 	bic.w	r2, r2, #4
 80066c2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	69d9      	ldr	r1, [r3, #28]
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	691a      	ldr	r2, [r3, #16]
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	430a      	orrs	r2, r1
 80066d4:	61da      	str	r2, [r3, #28]
      break;
 80066d6:	e050      	b.n	800677a <HAL_TIM_PWM_ConfigChannel+0x312>
 80066d8:	0800c434 	.word	0x0800c434
 80066dc:	40012c00 	.word	0x40012c00
 80066e0:	40013400 	.word	0x40013400
 80066e4:	40000400 	.word	0x40000400
 80066e8:	40000800 	.word	0x40000800
 80066ec:	40000c00 	.word	0x40000c00
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a25      	ldr	r2, [pc, #148]	; (800678c <HAL_TIM_PWM_ConfigChannel+0x324>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d01d      	beq.n	8006736 <HAL_TIM_PWM_ConfigChannel+0x2ce>
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a24      	ldr	r2, [pc, #144]	; (8006790 <HAL_TIM_PWM_ConfigChannel+0x328>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d018      	beq.n	8006736 <HAL_TIM_PWM_ConfigChannel+0x2ce>
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800670c:	d013      	beq.n	8006736 <HAL_TIM_PWM_ConfigChannel+0x2ce>
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a20      	ldr	r2, [pc, #128]	; (8006794 <HAL_TIM_PWM_ConfigChannel+0x32c>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d00e      	beq.n	8006736 <HAL_TIM_PWM_ConfigChannel+0x2ce>
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a1e      	ldr	r2, [pc, #120]	; (8006798 <HAL_TIM_PWM_ConfigChannel+0x330>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d009      	beq.n	8006736 <HAL_TIM_PWM_ConfigChannel+0x2ce>
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a1d      	ldr	r2, [pc, #116]	; (800679c <HAL_TIM_PWM_ConfigChannel+0x334>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d004      	beq.n	8006736 <HAL_TIM_PWM_ConfigChannel+0x2ce>
 800672c:	f241 0167 	movw	r1, #4199	; 0x1067
 8006730:	481b      	ldr	r0, [pc, #108]	; (80067a0 <HAL_TIM_PWM_ConfigChannel+0x338>)
 8006732:	f7fb f82f 	bl	8001794 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	68b9      	ldr	r1, [r7, #8]
 800673c:	4618      	mov	r0, r3
 800673e:	f000 fddb 	bl	80072f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	69da      	ldr	r2, [r3, #28]
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006750:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	69da      	ldr	r2, [r3, #28]
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006760:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	69d9      	ldr	r1, [r3, #28]
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	691b      	ldr	r3, [r3, #16]
 800676c:	021a      	lsls	r2, r3, #8
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	430a      	orrs	r2, r1
 8006774:	61da      	str	r2, [r3, #28]
      break;
 8006776:	e000      	b.n	800677a <HAL_TIM_PWM_ConfigChannel+0x312>
    }

    default:
      break;
 8006778:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2200      	movs	r2, #0
 800677e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006782:	2300      	movs	r3, #0
}
 8006784:	4618      	mov	r0, r3
 8006786:	3710      	adds	r7, #16
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}
 800678c:	40012c00 	.word	0x40012c00
 8006790:	40013400 	.word	0x40013400
 8006794:	40000400 	.word	0x40000400
 8006798:	40000800 	.word	0x40000800
 800679c:	40000c00 	.word	0x40000c00
 80067a0:	0800c434 	.word	0x0800c434

080067a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b084      	sub	sp, #16
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
 80067ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d101      	bne.n	80067bc <HAL_TIM_ConfigClockSource+0x18>
 80067b8:	2302      	movs	r3, #2
 80067ba:	e2f5      	b.n	8006da8 <HAL_TIM_ConfigClockSource+0x604>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2201      	movs	r2, #1
 80067c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2202      	movs	r2, #2
 80067c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067d4:	d029      	beq.n	800682a <HAL_TIM_ConfigClockSource+0x86>
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067de:	d024      	beq.n	800682a <HAL_TIM_ConfigClockSource+0x86>
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d020      	beq.n	800682a <HAL_TIM_ConfigClockSource+0x86>
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	2b10      	cmp	r3, #16
 80067ee:	d01c      	beq.n	800682a <HAL_TIM_ConfigClockSource+0x86>
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	2b20      	cmp	r3, #32
 80067f6:	d018      	beq.n	800682a <HAL_TIM_ConfigClockSource+0x86>
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	2b30      	cmp	r3, #48	; 0x30
 80067fe:	d014      	beq.n	800682a <HAL_TIM_ConfigClockSource+0x86>
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	2b40      	cmp	r3, #64	; 0x40
 8006806:	d010      	beq.n	800682a <HAL_TIM_ConfigClockSource+0x86>
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	2b50      	cmp	r3, #80	; 0x50
 800680e:	d00c      	beq.n	800682a <HAL_TIM_ConfigClockSource+0x86>
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	2b60      	cmp	r3, #96	; 0x60
 8006816:	d008      	beq.n	800682a <HAL_TIM_ConfigClockSource+0x86>
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	2b70      	cmp	r3, #112	; 0x70
 800681e:	d004      	beq.n	800682a <HAL_TIM_ConfigClockSource+0x86>
 8006820:	f241 4132 	movw	r1, #5170	; 0x1432
 8006824:	487c      	ldr	r0, [pc, #496]	; (8006a18 <HAL_TIM_ConfigClockSource+0x274>)
 8006826:	f7fa ffb5 	bl	8001794 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	689b      	ldr	r3, [r3, #8]
 8006830:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006838:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006840:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	68fa      	ldr	r2, [r7, #12]
 8006848:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006852:	f000 80f1 	beq.w	8006a38 <HAL_TIM_ConfigClockSource+0x294>
 8006856:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800685a:	f200 8299 	bhi.w	8006d90 <HAL_TIM_ConfigClockSource+0x5ec>
 800685e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006862:	d02d      	beq.n	80068c0 <HAL_TIM_ConfigClockSource+0x11c>
 8006864:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006868:	f200 8292 	bhi.w	8006d90 <HAL_TIM_ConfigClockSource+0x5ec>
 800686c:	2b70      	cmp	r3, #112	; 0x70
 800686e:	d05d      	beq.n	800692c <HAL_TIM_ConfigClockSource+0x188>
 8006870:	2b70      	cmp	r3, #112	; 0x70
 8006872:	f200 828d 	bhi.w	8006d90 <HAL_TIM_ConfigClockSource+0x5ec>
 8006876:	2b60      	cmp	r3, #96	; 0x60
 8006878:	f000 81a5 	beq.w	8006bc6 <HAL_TIM_ConfigClockSource+0x422>
 800687c:	2b60      	cmp	r3, #96	; 0x60
 800687e:	f200 8287 	bhi.w	8006d90 <HAL_TIM_ConfigClockSource+0x5ec>
 8006882:	2b50      	cmp	r3, #80	; 0x50
 8006884:	f000 8149 	beq.w	8006b1a <HAL_TIM_ConfigClockSource+0x376>
 8006888:	2b50      	cmp	r3, #80	; 0x50
 800688a:	f200 8281 	bhi.w	8006d90 <HAL_TIM_ConfigClockSource+0x5ec>
 800688e:	2b40      	cmp	r3, #64	; 0x40
 8006890:	f000 81fc 	beq.w	8006c8c <HAL_TIM_ConfigClockSource+0x4e8>
 8006894:	2b40      	cmp	r3, #64	; 0x40
 8006896:	f200 827b 	bhi.w	8006d90 <HAL_TIM_ConfigClockSource+0x5ec>
 800689a:	2b30      	cmp	r3, #48	; 0x30
 800689c:	f000 824c 	beq.w	8006d38 <HAL_TIM_ConfigClockSource+0x594>
 80068a0:	2b30      	cmp	r3, #48	; 0x30
 80068a2:	f200 8275 	bhi.w	8006d90 <HAL_TIM_ConfigClockSource+0x5ec>
 80068a6:	2b20      	cmp	r3, #32
 80068a8:	f000 8246 	beq.w	8006d38 <HAL_TIM_ConfigClockSource+0x594>
 80068ac:	2b20      	cmp	r3, #32
 80068ae:	f200 826f 	bhi.w	8006d90 <HAL_TIM_ConfigClockSource+0x5ec>
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	f000 8240 	beq.w	8006d38 <HAL_TIM_ConfigClockSource+0x594>
 80068b8:	2b10      	cmp	r3, #16
 80068ba:	f000 823d 	beq.w	8006d38 <HAL_TIM_ConfigClockSource+0x594>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80068be:	e267      	b.n	8006d90 <HAL_TIM_ConfigClockSource+0x5ec>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a55      	ldr	r2, [pc, #340]	; (8006a1c <HAL_TIM_ConfigClockSource+0x278>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	f000 8264 	beq.w	8006d94 <HAL_TIM_ConfigClockSource+0x5f0>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a53      	ldr	r2, [pc, #332]	; (8006a20 <HAL_TIM_ConfigClockSource+0x27c>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	f000 825e 	beq.w	8006d94 <HAL_TIM_ConfigClockSource+0x5f0>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068e0:	f000 8258 	beq.w	8006d94 <HAL_TIM_ConfigClockSource+0x5f0>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a4e      	ldr	r2, [pc, #312]	; (8006a24 <HAL_TIM_ConfigClockSource+0x280>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	f000 8252 	beq.w	8006d94 <HAL_TIM_ConfigClockSource+0x5f0>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a4c      	ldr	r2, [pc, #304]	; (8006a28 <HAL_TIM_ConfigClockSource+0x284>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	f000 824c 	beq.w	8006d94 <HAL_TIM_ConfigClockSource+0x5f0>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a4a      	ldr	r2, [pc, #296]	; (8006a2c <HAL_TIM_ConfigClockSource+0x288>)
 8006902:	4293      	cmp	r3, r2
 8006904:	f000 8246 	beq.w	8006d94 <HAL_TIM_ConfigClockSource+0x5f0>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a48      	ldr	r2, [pc, #288]	; (8006a30 <HAL_TIM_ConfigClockSource+0x28c>)
 800690e:	4293      	cmp	r3, r2
 8006910:	f000 8240 	beq.w	8006d94 <HAL_TIM_ConfigClockSource+0x5f0>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a46      	ldr	r2, [pc, #280]	; (8006a34 <HAL_TIM_ConfigClockSource+0x290>)
 800691a:	4293      	cmp	r3, r2
 800691c:	f000 823a 	beq.w	8006d94 <HAL_TIM_ConfigClockSource+0x5f0>
 8006920:	f241 413e 	movw	r1, #5182	; 0x143e
 8006924:	483c      	ldr	r0, [pc, #240]	; (8006a18 <HAL_TIM_ConfigClockSource+0x274>)
 8006926:	f7fa ff35 	bl	8001794 <assert_failed>
      break;
 800692a:	e233      	b.n	8006d94 <HAL_TIM_ConfigClockSource+0x5f0>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a3a      	ldr	r2, [pc, #232]	; (8006a1c <HAL_TIM_ConfigClockSource+0x278>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d01d      	beq.n	8006972 <HAL_TIM_ConfigClockSource+0x1ce>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a39      	ldr	r2, [pc, #228]	; (8006a20 <HAL_TIM_ConfigClockSource+0x27c>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d018      	beq.n	8006972 <HAL_TIM_ConfigClockSource+0x1ce>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006948:	d013      	beq.n	8006972 <HAL_TIM_ConfigClockSource+0x1ce>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a35      	ldr	r2, [pc, #212]	; (8006a24 <HAL_TIM_ConfigClockSource+0x280>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d00e      	beq.n	8006972 <HAL_TIM_ConfigClockSource+0x1ce>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a33      	ldr	r2, [pc, #204]	; (8006a28 <HAL_TIM_ConfigClockSource+0x284>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d009      	beq.n	8006972 <HAL_TIM_ConfigClockSource+0x1ce>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a32      	ldr	r2, [pc, #200]	; (8006a2c <HAL_TIM_ConfigClockSource+0x288>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d004      	beq.n	8006972 <HAL_TIM_ConfigClockSource+0x1ce>
 8006968:	f241 4145 	movw	r1, #5189	; 0x1445
 800696c:	482a      	ldr	r0, [pc, #168]	; (8006a18 <HAL_TIM_ConfigClockSource+0x274>)
 800696e:	f7fa ff11 	bl	8001794 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	689b      	ldr	r3, [r3, #8]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d013      	beq.n	80069a2 <HAL_TIM_ConfigClockSource+0x1fe>
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	689b      	ldr	r3, [r3, #8]
 800697e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006982:	d00e      	beq.n	80069a2 <HAL_TIM_ConfigClockSource+0x1fe>
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	689b      	ldr	r3, [r3, #8]
 8006988:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800698c:	d009      	beq.n	80069a2 <HAL_TIM_ConfigClockSource+0x1fe>
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	689b      	ldr	r3, [r3, #8]
 8006992:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006996:	d004      	beq.n	80069a2 <HAL_TIM_ConfigClockSource+0x1fe>
 8006998:	f241 4148 	movw	r1, #5192	; 0x1448
 800699c:	481e      	ldr	r0, [pc, #120]	; (8006a18 <HAL_TIM_ConfigClockSource+0x274>)
 800699e:	f7fa fef9 	bl	8001794 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069aa:	d014      	beq.n	80069d6 <HAL_TIM_ConfigClockSource+0x232>
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d010      	beq.n	80069d6 <HAL_TIM_ConfigClockSource+0x232>
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d00c      	beq.n	80069d6 <HAL_TIM_ConfigClockSource+0x232>
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	2b02      	cmp	r3, #2
 80069c2:	d008      	beq.n	80069d6 <HAL_TIM_ConfigClockSource+0x232>
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	2b0a      	cmp	r3, #10
 80069ca:	d004      	beq.n	80069d6 <HAL_TIM_ConfigClockSource+0x232>
 80069cc:	f241 4149 	movw	r1, #5193	; 0x1449
 80069d0:	4811      	ldr	r0, [pc, #68]	; (8006a18 <HAL_TIM_ConfigClockSource+0x274>)
 80069d2:	f7fa fedf 	bl	8001794 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	68db      	ldr	r3, [r3, #12]
 80069da:	2b0f      	cmp	r3, #15
 80069dc:	d904      	bls.n	80069e8 <HAL_TIM_ConfigClockSource+0x244>
 80069de:	f241 414a 	movw	r1, #5194	; 0x144a
 80069e2:	480d      	ldr	r0, [pc, #52]	; (8006a18 <HAL_TIM_ConfigClockSource+0x274>)
 80069e4:	f7fa fed6 	bl	8001794 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6818      	ldr	r0, [r3, #0]
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	6899      	ldr	r1, [r3, #8]
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	685a      	ldr	r2, [r3, #4]
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	68db      	ldr	r3, [r3, #12]
 80069f8:	f000 fd59 	bl	80074ae <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006a0a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	68fa      	ldr	r2, [r7, #12]
 8006a12:	609a      	str	r2, [r3, #8]
      break;
 8006a14:	e1bf      	b.n	8006d96 <HAL_TIM_ConfigClockSource+0x5f2>
 8006a16:	bf00      	nop
 8006a18:	0800c434 	.word	0x0800c434
 8006a1c:	40012c00 	.word	0x40012c00
 8006a20:	40013400 	.word	0x40013400
 8006a24:	40000400 	.word	0x40000400
 8006a28:	40000800 	.word	0x40000800
 8006a2c:	40000c00 	.word	0x40000c00
 8006a30:	40001000 	.word	0x40001000
 8006a34:	40001400 	.word	0x40001400
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a8d      	ldr	r2, [pc, #564]	; (8006c74 <HAL_TIM_ConfigClockSource+0x4d0>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d01d      	beq.n	8006a7e <HAL_TIM_ConfigClockSource+0x2da>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a8c      	ldr	r2, [pc, #560]	; (8006c78 <HAL_TIM_ConfigClockSource+0x4d4>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d018      	beq.n	8006a7e <HAL_TIM_ConfigClockSource+0x2da>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a54:	d013      	beq.n	8006a7e <HAL_TIM_ConfigClockSource+0x2da>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a88      	ldr	r2, [pc, #544]	; (8006c7c <HAL_TIM_ConfigClockSource+0x4d8>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d00e      	beq.n	8006a7e <HAL_TIM_ConfigClockSource+0x2da>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a86      	ldr	r2, [pc, #536]	; (8006c80 <HAL_TIM_ConfigClockSource+0x4dc>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d009      	beq.n	8006a7e <HAL_TIM_ConfigClockSource+0x2da>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a85      	ldr	r2, [pc, #532]	; (8006c84 <HAL_TIM_ConfigClockSource+0x4e0>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d004      	beq.n	8006a7e <HAL_TIM_ConfigClockSource+0x2da>
 8006a74:	f241 415d 	movw	r1, #5213	; 0x145d
 8006a78:	4883      	ldr	r0, [pc, #524]	; (8006c88 <HAL_TIM_ConfigClockSource+0x4e4>)
 8006a7a:	f7fa fe8b 	bl	8001794 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d013      	beq.n	8006aae <HAL_TIM_ConfigClockSource+0x30a>
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	689b      	ldr	r3, [r3, #8]
 8006a8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a8e:	d00e      	beq.n	8006aae <HAL_TIM_ConfigClockSource+0x30a>
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a98:	d009      	beq.n	8006aae <HAL_TIM_ConfigClockSource+0x30a>
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	689b      	ldr	r3, [r3, #8]
 8006a9e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006aa2:	d004      	beq.n	8006aae <HAL_TIM_ConfigClockSource+0x30a>
 8006aa4:	f44f 51a3 	mov.w	r1, #5216	; 0x1460
 8006aa8:	4877      	ldr	r0, [pc, #476]	; (8006c88 <HAL_TIM_ConfigClockSource+0x4e4>)
 8006aaa:	f7fa fe73 	bl	8001794 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ab6:	d014      	beq.n	8006ae2 <HAL_TIM_ConfigClockSource+0x33e>
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d010      	beq.n	8006ae2 <HAL_TIM_ConfigClockSource+0x33e>
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d00c      	beq.n	8006ae2 <HAL_TIM_ConfigClockSource+0x33e>
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	2b02      	cmp	r3, #2
 8006ace:	d008      	beq.n	8006ae2 <HAL_TIM_ConfigClockSource+0x33e>
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	2b0a      	cmp	r3, #10
 8006ad6:	d004      	beq.n	8006ae2 <HAL_TIM_ConfigClockSource+0x33e>
 8006ad8:	f241 4161 	movw	r1, #5217	; 0x1461
 8006adc:	486a      	ldr	r0, [pc, #424]	; (8006c88 <HAL_TIM_ConfigClockSource+0x4e4>)
 8006ade:	f7fa fe59 	bl	8001794 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	68db      	ldr	r3, [r3, #12]
 8006ae6:	2b0f      	cmp	r3, #15
 8006ae8:	d904      	bls.n	8006af4 <HAL_TIM_ConfigClockSource+0x350>
 8006aea:	f241 4162 	movw	r1, #5218	; 0x1462
 8006aee:	4866      	ldr	r0, [pc, #408]	; (8006c88 <HAL_TIM_ConfigClockSource+0x4e4>)
 8006af0:	f7fa fe50 	bl	8001794 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6818      	ldr	r0, [r3, #0]
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	6899      	ldr	r1, [r3, #8]
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	685a      	ldr	r2, [r3, #4]
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	68db      	ldr	r3, [r3, #12]
 8006b04:	f000 fcd3 	bl	80074ae <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	689a      	ldr	r2, [r3, #8]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b16:	609a      	str	r2, [r3, #8]
      break;
 8006b18:	e13d      	b.n	8006d96 <HAL_TIM_ConfigClockSource+0x5f2>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a55      	ldr	r2, [pc, #340]	; (8006c74 <HAL_TIM_ConfigClockSource+0x4d0>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d01d      	beq.n	8006b60 <HAL_TIM_ConfigClockSource+0x3bc>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a53      	ldr	r2, [pc, #332]	; (8006c78 <HAL_TIM_ConfigClockSource+0x4d4>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d018      	beq.n	8006b60 <HAL_TIM_ConfigClockSource+0x3bc>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b36:	d013      	beq.n	8006b60 <HAL_TIM_ConfigClockSource+0x3bc>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a4f      	ldr	r2, [pc, #316]	; (8006c7c <HAL_TIM_ConfigClockSource+0x4d8>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d00e      	beq.n	8006b60 <HAL_TIM_ConfigClockSource+0x3bc>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a4e      	ldr	r2, [pc, #312]	; (8006c80 <HAL_TIM_ConfigClockSource+0x4dc>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d009      	beq.n	8006b60 <HAL_TIM_ConfigClockSource+0x3bc>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a4c      	ldr	r2, [pc, #304]	; (8006c84 <HAL_TIM_ConfigClockSource+0x4e0>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d004      	beq.n	8006b60 <HAL_TIM_ConfigClockSource+0x3bc>
 8006b56:	f241 4171 	movw	r1, #5233	; 0x1471
 8006b5a:	484b      	ldr	r0, [pc, #300]	; (8006c88 <HAL_TIM_ConfigClockSource+0x4e4>)
 8006b5c:	f7fa fe1a 	bl	8001794 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b68:	d014      	beq.n	8006b94 <HAL_TIM_ConfigClockSource+0x3f0>
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d010      	beq.n	8006b94 <HAL_TIM_ConfigClockSource+0x3f0>
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d00c      	beq.n	8006b94 <HAL_TIM_ConfigClockSource+0x3f0>
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	2b02      	cmp	r3, #2
 8006b80:	d008      	beq.n	8006b94 <HAL_TIM_ConfigClockSource+0x3f0>
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	2b0a      	cmp	r3, #10
 8006b88:	d004      	beq.n	8006b94 <HAL_TIM_ConfigClockSource+0x3f0>
 8006b8a:	f241 4174 	movw	r1, #5236	; 0x1474
 8006b8e:	483e      	ldr	r0, [pc, #248]	; (8006c88 <HAL_TIM_ConfigClockSource+0x4e4>)
 8006b90:	f7fa fe00 	bl	8001794 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	68db      	ldr	r3, [r3, #12]
 8006b98:	2b0f      	cmp	r3, #15
 8006b9a:	d904      	bls.n	8006ba6 <HAL_TIM_ConfigClockSource+0x402>
 8006b9c:	f241 4175 	movw	r1, #5237	; 0x1475
 8006ba0:	4839      	ldr	r0, [pc, #228]	; (8006c88 <HAL_TIM_ConfigClockSource+0x4e4>)
 8006ba2:	f7fa fdf7 	bl	8001794 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6818      	ldr	r0, [r3, #0]
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	6859      	ldr	r1, [r3, #4]
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	68db      	ldr	r3, [r3, #12]
 8006bb2:	461a      	mov	r2, r3
 8006bb4:	f000 fc04 	bl	80073c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	2150      	movs	r1, #80	; 0x50
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f000 fc5b 	bl	800747a <TIM_ITRx_SetConfig>
      break;
 8006bc4:	e0e7      	b.n	8006d96 <HAL_TIM_ConfigClockSource+0x5f2>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a2a      	ldr	r2, [pc, #168]	; (8006c74 <HAL_TIM_ConfigClockSource+0x4d0>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d01d      	beq.n	8006c0c <HAL_TIM_ConfigClockSource+0x468>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a28      	ldr	r2, [pc, #160]	; (8006c78 <HAL_TIM_ConfigClockSource+0x4d4>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d018      	beq.n	8006c0c <HAL_TIM_ConfigClockSource+0x468>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006be2:	d013      	beq.n	8006c0c <HAL_TIM_ConfigClockSource+0x468>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a24      	ldr	r2, [pc, #144]	; (8006c7c <HAL_TIM_ConfigClockSource+0x4d8>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d00e      	beq.n	8006c0c <HAL_TIM_ConfigClockSource+0x468>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a23      	ldr	r2, [pc, #140]	; (8006c80 <HAL_TIM_ConfigClockSource+0x4dc>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d009      	beq.n	8006c0c <HAL_TIM_ConfigClockSource+0x468>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a21      	ldr	r2, [pc, #132]	; (8006c84 <HAL_TIM_ConfigClockSource+0x4e0>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d004      	beq.n	8006c0c <HAL_TIM_ConfigClockSource+0x468>
 8006c02:	f241 4181 	movw	r1, #5249	; 0x1481
 8006c06:	4820      	ldr	r0, [pc, #128]	; (8006c88 <HAL_TIM_ConfigClockSource+0x4e4>)
 8006c08:	f7fa fdc4 	bl	8001794 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c14:	d014      	beq.n	8006c40 <HAL_TIM_ConfigClockSource+0x49c>
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d010      	beq.n	8006c40 <HAL_TIM_ConfigClockSource+0x49c>
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d00c      	beq.n	8006c40 <HAL_TIM_ConfigClockSource+0x49c>
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	2b02      	cmp	r3, #2
 8006c2c:	d008      	beq.n	8006c40 <HAL_TIM_ConfigClockSource+0x49c>
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	2b0a      	cmp	r3, #10
 8006c34:	d004      	beq.n	8006c40 <HAL_TIM_ConfigClockSource+0x49c>
 8006c36:	f241 4184 	movw	r1, #5252	; 0x1484
 8006c3a:	4813      	ldr	r0, [pc, #76]	; (8006c88 <HAL_TIM_ConfigClockSource+0x4e4>)
 8006c3c:	f7fa fdaa 	bl	8001794 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	68db      	ldr	r3, [r3, #12]
 8006c44:	2b0f      	cmp	r3, #15
 8006c46:	d904      	bls.n	8006c52 <HAL_TIM_ConfigClockSource+0x4ae>
 8006c48:	f241 4185 	movw	r1, #5253	; 0x1485
 8006c4c:	480e      	ldr	r0, [pc, #56]	; (8006c88 <HAL_TIM_ConfigClockSource+0x4e4>)
 8006c4e:	f7fa fda1 	bl	8001794 <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6818      	ldr	r0, [r3, #0]
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	6859      	ldr	r1, [r3, #4]
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	68db      	ldr	r3, [r3, #12]
 8006c5e:	461a      	mov	r2, r3
 8006c60:	f000 fbdc 	bl	800741c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	2160      	movs	r1, #96	; 0x60
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f000 fc05 	bl	800747a <TIM_ITRx_SetConfig>
      break;
 8006c70:	e091      	b.n	8006d96 <HAL_TIM_ConfigClockSource+0x5f2>
 8006c72:	bf00      	nop
 8006c74:	40012c00 	.word	0x40012c00
 8006c78:	40013400 	.word	0x40013400
 8006c7c:	40000400 	.word	0x40000400
 8006c80:	40000800 	.word	0x40000800
 8006c84:	40000c00 	.word	0x40000c00
 8006c88:	0800c434 	.word	0x0800c434
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a47      	ldr	r2, [pc, #284]	; (8006db0 <HAL_TIM_ConfigClockSource+0x60c>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d01d      	beq.n	8006cd2 <HAL_TIM_ConfigClockSource+0x52e>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a46      	ldr	r2, [pc, #280]	; (8006db4 <HAL_TIM_ConfigClockSource+0x610>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d018      	beq.n	8006cd2 <HAL_TIM_ConfigClockSource+0x52e>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ca8:	d013      	beq.n	8006cd2 <HAL_TIM_ConfigClockSource+0x52e>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a42      	ldr	r2, [pc, #264]	; (8006db8 <HAL_TIM_ConfigClockSource+0x614>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d00e      	beq.n	8006cd2 <HAL_TIM_ConfigClockSource+0x52e>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a40      	ldr	r2, [pc, #256]	; (8006dbc <HAL_TIM_ConfigClockSource+0x618>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d009      	beq.n	8006cd2 <HAL_TIM_ConfigClockSource+0x52e>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a3f      	ldr	r2, [pc, #252]	; (8006dc0 <HAL_TIM_ConfigClockSource+0x61c>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d004      	beq.n	8006cd2 <HAL_TIM_ConfigClockSource+0x52e>
 8006cc8:	f241 4191 	movw	r1, #5265	; 0x1491
 8006ccc:	483d      	ldr	r0, [pc, #244]	; (8006dc4 <HAL_TIM_ConfigClockSource+0x620>)
 8006cce:	f7fa fd61 	bl	8001794 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cda:	d014      	beq.n	8006d06 <HAL_TIM_ConfigClockSource+0x562>
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	685b      	ldr	r3, [r3, #4]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d010      	beq.n	8006d06 <HAL_TIM_ConfigClockSource+0x562>
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d00c      	beq.n	8006d06 <HAL_TIM_ConfigClockSource+0x562>
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	2b02      	cmp	r3, #2
 8006cf2:	d008      	beq.n	8006d06 <HAL_TIM_ConfigClockSource+0x562>
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	2b0a      	cmp	r3, #10
 8006cfa:	d004      	beq.n	8006d06 <HAL_TIM_ConfigClockSource+0x562>
 8006cfc:	f241 4194 	movw	r1, #5268	; 0x1494
 8006d00:	4830      	ldr	r0, [pc, #192]	; (8006dc4 <HAL_TIM_ConfigClockSource+0x620>)
 8006d02:	f7fa fd47 	bl	8001794 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	68db      	ldr	r3, [r3, #12]
 8006d0a:	2b0f      	cmp	r3, #15
 8006d0c:	d904      	bls.n	8006d18 <HAL_TIM_ConfigClockSource+0x574>
 8006d0e:	f241 4195 	movw	r1, #5269	; 0x1495
 8006d12:	482c      	ldr	r0, [pc, #176]	; (8006dc4 <HAL_TIM_ConfigClockSource+0x620>)
 8006d14:	f7fa fd3e 	bl	8001794 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6818      	ldr	r0, [r3, #0]
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	6859      	ldr	r1, [r3, #4]
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	68db      	ldr	r3, [r3, #12]
 8006d24:	461a      	mov	r2, r3
 8006d26:	f000 fb4b 	bl	80073c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	2140      	movs	r1, #64	; 0x40
 8006d30:	4618      	mov	r0, r3
 8006d32:	f000 fba2 	bl	800747a <TIM_ITRx_SetConfig>
      break;
 8006d36:	e02e      	b.n	8006d96 <HAL_TIM_ConfigClockSource+0x5f2>
        assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a1c      	ldr	r2, [pc, #112]	; (8006db0 <HAL_TIM_ConfigClockSource+0x60c>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d01d      	beq.n	8006d7e <HAL_TIM_ConfigClockSource+0x5da>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a1b      	ldr	r2, [pc, #108]	; (8006db4 <HAL_TIM_ConfigClockSource+0x610>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d018      	beq.n	8006d7e <HAL_TIM_ConfigClockSource+0x5da>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d54:	d013      	beq.n	8006d7e <HAL_TIM_ConfigClockSource+0x5da>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a17      	ldr	r2, [pc, #92]	; (8006db8 <HAL_TIM_ConfigClockSource+0x614>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d00e      	beq.n	8006d7e <HAL_TIM_ConfigClockSource+0x5da>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a15      	ldr	r2, [pc, #84]	; (8006dbc <HAL_TIM_ConfigClockSource+0x618>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d009      	beq.n	8006d7e <HAL_TIM_ConfigClockSource+0x5da>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a14      	ldr	r2, [pc, #80]	; (8006dc0 <HAL_TIM_ConfigClockSource+0x61c>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d004      	beq.n	8006d7e <HAL_TIM_ConfigClockSource+0x5da>
 8006d74:	f241 41a4 	movw	r1, #5284	; 0x14a4
 8006d78:	4812      	ldr	r0, [pc, #72]	; (8006dc4 <HAL_TIM_ConfigClockSource+0x620>)
 8006d7a:	f7fa fd0b 	bl	8001794 <assert_failed>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681a      	ldr	r2, [r3, #0]
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4619      	mov	r1, r3
 8006d88:	4610      	mov	r0, r2
 8006d8a:	f000 fb76 	bl	800747a <TIM_ITRx_SetConfig>
        break;
 8006d8e:	e002      	b.n	8006d96 <HAL_TIM_ConfigClockSource+0x5f2>
      break;
 8006d90:	bf00      	nop
 8006d92:	e000      	b.n	8006d96 <HAL_TIM_ConfigClockSource+0x5f2>
      break;
 8006d94:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2201      	movs	r2, #1
 8006d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2200      	movs	r2, #0
 8006da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006da6:	2300      	movs	r3, #0
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	3710      	adds	r7, #16
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}
 8006db0:	40012c00 	.word	0x40012c00
 8006db4:	40013400 	.word	0x40013400
 8006db8:	40000400 	.word	0x40000400
 8006dbc:	40000800 	.word	0x40000800
 8006dc0:	40000c00 	.word	0x40000c00
 8006dc4:	0800c434 	.word	0x0800c434

08006dc8 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b083      	sub	sp, #12
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8006dd0:	bf00      	nop
 8006dd2:	370c      	adds	r7, #12
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bc80      	pop	{r7}
 8006dd8:	4770      	bx	lr

08006dda <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006dda:	b480      	push	{r7}
 8006ddc:	b083      	sub	sp, #12
 8006dde:	af00      	add	r7, sp, #0
 8006de0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006de2:	bf00      	nop
 8006de4:	370c      	adds	r7, #12
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bc80      	pop	{r7}
 8006dea:	4770      	bx	lr

08006dec <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b083      	sub	sp, #12
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8006df4:	bf00      	nop
 8006df6:	370c      	adds	r7, #12
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bc80      	pop	{r7}
 8006dfc:	4770      	bx	lr

08006dfe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006dfe:	b480      	push	{r7}
 8006e00:	b083      	sub	sp, #12
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006e06:	bf00      	nop
 8006e08:	370c      	adds	r7, #12
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bc80      	pop	{r7}
 8006e0e:	4770      	bx	lr

08006e10 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b083      	sub	sp, #12
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8006e18:	bf00      	nop
 8006e1a:	370c      	adds	r7, #12
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bc80      	pop	{r7}
 8006e20:	4770      	bx	lr

08006e22 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006e22:	b480      	push	{r7}
 8006e24:	b083      	sub	sp, #12
 8006e26:	af00      	add	r7, sp, #0
 8006e28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006e2a:	bf00      	nop
 8006e2c:	370c      	adds	r7, #12
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bc80      	pop	{r7}
 8006e32:	4770      	bx	lr

08006e34 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b083      	sub	sp, #12
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8006e3c:	bf00      	nop
 8006e3e:	370c      	adds	r7, #12
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bc80      	pop	{r7}
 8006e44:	4770      	bx	lr

08006e46 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8006e46:	b480      	push	{r7}
 8006e48:	b083      	sub	sp, #12
 8006e4a:	af00      	add	r7, sp, #0
 8006e4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8006e4e:	bf00      	nop
 8006e50:	370c      	adds	r7, #12
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bc80      	pop	{r7}
 8006e56:	4770      	bx	lr

08006e58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b085      	sub	sp, #20
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
 8006e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	4a33      	ldr	r2, [pc, #204]	; (8006f38 <TIM_Base_SetConfig+0xe0>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d013      	beq.n	8006e98 <TIM_Base_SetConfig+0x40>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	4a32      	ldr	r2, [pc, #200]	; (8006f3c <TIM_Base_SetConfig+0xe4>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d00f      	beq.n	8006e98 <TIM_Base_SetConfig+0x40>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e7e:	d00b      	beq.n	8006e98 <TIM_Base_SetConfig+0x40>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	4a2f      	ldr	r2, [pc, #188]	; (8006f40 <TIM_Base_SetConfig+0xe8>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d007      	beq.n	8006e98 <TIM_Base_SetConfig+0x40>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	4a2e      	ldr	r2, [pc, #184]	; (8006f44 <TIM_Base_SetConfig+0xec>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d003      	beq.n	8006e98 <TIM_Base_SetConfig+0x40>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	4a2d      	ldr	r2, [pc, #180]	; (8006f48 <TIM_Base_SetConfig+0xf0>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d108      	bne.n	8006eaa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	68fa      	ldr	r2, [r7, #12]
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	4a22      	ldr	r2, [pc, #136]	; (8006f38 <TIM_Base_SetConfig+0xe0>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d013      	beq.n	8006eda <TIM_Base_SetConfig+0x82>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	4a21      	ldr	r2, [pc, #132]	; (8006f3c <TIM_Base_SetConfig+0xe4>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d00f      	beq.n	8006eda <TIM_Base_SetConfig+0x82>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ec0:	d00b      	beq.n	8006eda <TIM_Base_SetConfig+0x82>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	4a1e      	ldr	r2, [pc, #120]	; (8006f40 <TIM_Base_SetConfig+0xe8>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d007      	beq.n	8006eda <TIM_Base_SetConfig+0x82>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	4a1d      	ldr	r2, [pc, #116]	; (8006f44 <TIM_Base_SetConfig+0xec>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d003      	beq.n	8006eda <TIM_Base_SetConfig+0x82>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	4a1c      	ldr	r2, [pc, #112]	; (8006f48 <TIM_Base_SetConfig+0xf0>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d108      	bne.n	8006eec <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ee0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	68db      	ldr	r3, [r3, #12]
 8006ee6:	68fa      	ldr	r2, [r7, #12]
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	695b      	ldr	r3, [r3, #20]
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	68fa      	ldr	r2, [r7, #12]
 8006efe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	689a      	ldr	r2, [r3, #8]
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	681a      	ldr	r2, [r3, #0]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	4a09      	ldr	r2, [pc, #36]	; (8006f38 <TIM_Base_SetConfig+0xe0>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d003      	beq.n	8006f20 <TIM_Base_SetConfig+0xc8>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	4a08      	ldr	r2, [pc, #32]	; (8006f3c <TIM_Base_SetConfig+0xe4>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d103      	bne.n	8006f28 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	691a      	ldr	r2, [r3, #16]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	615a      	str	r2, [r3, #20]
}
 8006f2e:	bf00      	nop
 8006f30:	3714      	adds	r7, #20
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bc80      	pop	{r7}
 8006f36:	4770      	bx	lr
 8006f38:	40012c00 	.word	0x40012c00
 8006f3c:	40013400 	.word	0x40013400
 8006f40:	40000400 	.word	0x40000400
 8006f44:	40000800 	.word	0x40000800
 8006f48:	40000c00 	.word	0x40000c00

08006f4c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b086      	sub	sp, #24
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
 8006f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6a1b      	ldr	r3, [r3, #32]
 8006f5a:	f023 0201 	bic.w	r2, r3, #1
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6a1b      	ldr	r3, [r3, #32]
 8006f66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	699b      	ldr	r3, [r3, #24]
 8006f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	f023 0303 	bic.w	r3, r3, #3
 8006f82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	68fa      	ldr	r2, [r7, #12]
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	f023 0302 	bic.w	r3, r3, #2
 8006f94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	689b      	ldr	r3, [r3, #8]
 8006f9a:	697a      	ldr	r2, [r7, #20]
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	4a34      	ldr	r2, [pc, #208]	; (8007074 <TIM_OC1_SetConfig+0x128>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d003      	beq.n	8006fb0 <TIM_OC1_SetConfig+0x64>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	4a33      	ldr	r2, [pc, #204]	; (8007078 <TIM_OC1_SetConfig+0x12c>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d119      	bne.n	8006fe4 <TIM_OC1_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	68db      	ldr	r3, [r3, #12]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d008      	beq.n	8006fca <TIM_OC1_SetConfig+0x7e>
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	68db      	ldr	r3, [r3, #12]
 8006fbc:	2b08      	cmp	r3, #8
 8006fbe:	d004      	beq.n	8006fca <TIM_OC1_SetConfig+0x7e>
 8006fc0:	f641 2141 	movw	r1, #6721	; 0x1a41
 8006fc4:	482d      	ldr	r0, [pc, #180]	; (800707c <TIM_OC1_SetConfig+0x130>)
 8006fc6:	f7fa fbe5 	bl	8001794 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	f023 0308 	bic.w	r3, r3, #8
 8006fd0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	68db      	ldr	r3, [r3, #12]
 8006fd6:	697a      	ldr	r2, [r7, #20]
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	f023 0304 	bic.w	r3, r3, #4
 8006fe2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	4a23      	ldr	r2, [pc, #140]	; (8007074 <TIM_OC1_SetConfig+0x128>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d003      	beq.n	8006ff4 <TIM_OC1_SetConfig+0xa8>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	4a22      	ldr	r2, [pc, #136]	; (8007078 <TIM_OC1_SetConfig+0x12c>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d12d      	bne.n	8007050 <TIM_OC1_SetConfig+0x104>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	699b      	ldr	r3, [r3, #24]
 8006ff8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ffc:	d008      	beq.n	8007010 <TIM_OC1_SetConfig+0xc4>
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	699b      	ldr	r3, [r3, #24]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d004      	beq.n	8007010 <TIM_OC1_SetConfig+0xc4>
 8007006:	f641 214e 	movw	r1, #6734	; 0x1a4e
 800700a:	481c      	ldr	r0, [pc, #112]	; (800707c <TIM_OC1_SetConfig+0x130>)
 800700c:	f7fa fbc2 	bl	8001794 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	695b      	ldr	r3, [r3, #20]
 8007014:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007018:	d008      	beq.n	800702c <TIM_OC1_SetConfig+0xe0>
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	695b      	ldr	r3, [r3, #20]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d004      	beq.n	800702c <TIM_OC1_SetConfig+0xe0>
 8007022:	f641 214f 	movw	r1, #6735	; 0x1a4f
 8007026:	4815      	ldr	r0, [pc, #84]	; (800707c <TIM_OC1_SetConfig+0x130>)
 8007028:	f7fa fbb4 	bl	8001794 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007032:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800703a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	695b      	ldr	r3, [r3, #20]
 8007040:	693a      	ldr	r2, [r7, #16]
 8007042:	4313      	orrs	r3, r2
 8007044:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	699b      	ldr	r3, [r3, #24]
 800704a:	693a      	ldr	r2, [r7, #16]
 800704c:	4313      	orrs	r3, r2
 800704e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	693a      	ldr	r2, [r7, #16]
 8007054:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	68fa      	ldr	r2, [r7, #12]
 800705a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	685a      	ldr	r2, [r3, #4]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	697a      	ldr	r2, [r7, #20]
 8007068:	621a      	str	r2, [r3, #32]
}
 800706a:	bf00      	nop
 800706c:	3718      	adds	r7, #24
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}
 8007072:	bf00      	nop
 8007074:	40012c00 	.word	0x40012c00
 8007078:	40013400 	.word	0x40013400
 800707c:	0800c434 	.word	0x0800c434

08007080 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b086      	sub	sp, #24
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
 8007088:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6a1b      	ldr	r3, [r3, #32]
 800708e:	f023 0210 	bic.w	r2, r3, #16
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6a1b      	ldr	r3, [r3, #32]
 800709a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	685b      	ldr	r3, [r3, #4]
 80070a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	699b      	ldr	r3, [r3, #24]
 80070a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	021b      	lsls	r3, r3, #8
 80070be:	68fa      	ldr	r2, [r7, #12]
 80070c0:	4313      	orrs	r3, r2
 80070c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	f023 0320 	bic.w	r3, r3, #32
 80070ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	689b      	ldr	r3, [r3, #8]
 80070d0:	011b      	lsls	r3, r3, #4
 80070d2:	697a      	ldr	r2, [r7, #20]
 80070d4:	4313      	orrs	r3, r2
 80070d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	4a35      	ldr	r2, [pc, #212]	; (80071b0 <TIM_OC2_SetConfig+0x130>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d003      	beq.n	80070e8 <TIM_OC2_SetConfig+0x68>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	4a34      	ldr	r2, [pc, #208]	; (80071b4 <TIM_OC2_SetConfig+0x134>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d11a      	bne.n	800711e <TIM_OC2_SetConfig+0x9e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	68db      	ldr	r3, [r3, #12]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d008      	beq.n	8007102 <TIM_OC2_SetConfig+0x82>
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	68db      	ldr	r3, [r3, #12]
 80070f4:	2b08      	cmp	r3, #8
 80070f6:	d004      	beq.n	8007102 <TIM_OC2_SetConfig+0x82>
 80070f8:	f641 218c 	movw	r1, #6796	; 0x1a8c
 80070fc:	482e      	ldr	r0, [pc, #184]	; (80071b8 <TIM_OC2_SetConfig+0x138>)
 80070fe:	f7fa fb49 	bl	8001794 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007108:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	68db      	ldr	r3, [r3, #12]
 800710e:	011b      	lsls	r3, r3, #4
 8007110:	697a      	ldr	r2, [r7, #20]
 8007112:	4313      	orrs	r3, r2
 8007114:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800711c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	4a23      	ldr	r2, [pc, #140]	; (80071b0 <TIM_OC2_SetConfig+0x130>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d003      	beq.n	800712e <TIM_OC2_SetConfig+0xae>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	4a22      	ldr	r2, [pc, #136]	; (80071b4 <TIM_OC2_SetConfig+0x134>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d12f      	bne.n	800718e <TIM_OC2_SetConfig+0x10e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	699b      	ldr	r3, [r3, #24]
 8007132:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007136:	d008      	beq.n	800714a <TIM_OC2_SetConfig+0xca>
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	699b      	ldr	r3, [r3, #24]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d004      	beq.n	800714a <TIM_OC2_SetConfig+0xca>
 8007140:	f641 219a 	movw	r1, #6810	; 0x1a9a
 8007144:	481c      	ldr	r0, [pc, #112]	; (80071b8 <TIM_OC2_SetConfig+0x138>)
 8007146:	f7fa fb25 	bl	8001794 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	695b      	ldr	r3, [r3, #20]
 800714e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007152:	d008      	beq.n	8007166 <TIM_OC2_SetConfig+0xe6>
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	695b      	ldr	r3, [r3, #20]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d004      	beq.n	8007166 <TIM_OC2_SetConfig+0xe6>
 800715c:	f641 219b 	movw	r1, #6811	; 0x1a9b
 8007160:	4815      	ldr	r0, [pc, #84]	; (80071b8 <TIM_OC2_SetConfig+0x138>)
 8007162:	f7fa fb17 	bl	8001794 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800716c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007174:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	695b      	ldr	r3, [r3, #20]
 800717a:	009b      	lsls	r3, r3, #2
 800717c:	693a      	ldr	r2, [r7, #16]
 800717e:	4313      	orrs	r3, r2
 8007180:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	699b      	ldr	r3, [r3, #24]
 8007186:	009b      	lsls	r3, r3, #2
 8007188:	693a      	ldr	r2, [r7, #16]
 800718a:	4313      	orrs	r3, r2
 800718c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	693a      	ldr	r2, [r7, #16]
 8007192:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	68fa      	ldr	r2, [r7, #12]
 8007198:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	685a      	ldr	r2, [r3, #4]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	697a      	ldr	r2, [r7, #20]
 80071a6:	621a      	str	r2, [r3, #32]
}
 80071a8:	bf00      	nop
 80071aa:	3718      	adds	r7, #24
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}
 80071b0:	40012c00 	.word	0x40012c00
 80071b4:	40013400 	.word	0x40013400
 80071b8:	0800c434 	.word	0x0800c434

080071bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b086      	sub	sp, #24
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
 80071c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6a1b      	ldr	r3, [r3, #32]
 80071ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6a1b      	ldr	r3, [r3, #32]
 80071d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	69db      	ldr	r3, [r3, #28]
 80071e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f023 0303 	bic.w	r3, r3, #3
 80071f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	68fa      	ldr	r2, [r7, #12]
 80071fa:	4313      	orrs	r3, r2
 80071fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007204:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	689b      	ldr	r3, [r3, #8]
 800720a:	021b      	lsls	r3, r3, #8
 800720c:	697a      	ldr	r2, [r7, #20]
 800720e:	4313      	orrs	r3, r2
 8007210:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	4a35      	ldr	r2, [pc, #212]	; (80072ec <TIM_OC3_SetConfig+0x130>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d003      	beq.n	8007222 <TIM_OC3_SetConfig+0x66>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	4a34      	ldr	r2, [pc, #208]	; (80072f0 <TIM_OC3_SetConfig+0x134>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d11a      	bne.n	8007258 <TIM_OC3_SetConfig+0x9c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	68db      	ldr	r3, [r3, #12]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d008      	beq.n	800723c <TIM_OC3_SetConfig+0x80>
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	68db      	ldr	r3, [r3, #12]
 800722e:	2b08      	cmp	r3, #8
 8007230:	d004      	beq.n	800723c <TIM_OC3_SetConfig+0x80>
 8007232:	f641 21d7 	movw	r1, #6871	; 0x1ad7
 8007236:	482f      	ldr	r0, [pc, #188]	; (80072f4 <TIM_OC3_SetConfig+0x138>)
 8007238:	f7fa faac 	bl	8001794 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007242:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	68db      	ldr	r3, [r3, #12]
 8007248:	021b      	lsls	r3, r3, #8
 800724a:	697a      	ldr	r2, [r7, #20]
 800724c:	4313      	orrs	r3, r2
 800724e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007256:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	4a24      	ldr	r2, [pc, #144]	; (80072ec <TIM_OC3_SetConfig+0x130>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d003      	beq.n	8007268 <TIM_OC3_SetConfig+0xac>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	4a23      	ldr	r2, [pc, #140]	; (80072f0 <TIM_OC3_SetConfig+0x134>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d12f      	bne.n	80072c8 <TIM_OC3_SetConfig+0x10c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	699b      	ldr	r3, [r3, #24]
 800726c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007270:	d008      	beq.n	8007284 <TIM_OC3_SetConfig+0xc8>
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	699b      	ldr	r3, [r3, #24]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d004      	beq.n	8007284 <TIM_OC3_SetConfig+0xc8>
 800727a:	f641 21e4 	movw	r1, #6884	; 0x1ae4
 800727e:	481d      	ldr	r0, [pc, #116]	; (80072f4 <TIM_OC3_SetConfig+0x138>)
 8007280:	f7fa fa88 	bl	8001794 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	695b      	ldr	r3, [r3, #20]
 8007288:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800728c:	d008      	beq.n	80072a0 <TIM_OC3_SetConfig+0xe4>
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	695b      	ldr	r3, [r3, #20]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d004      	beq.n	80072a0 <TIM_OC3_SetConfig+0xe4>
 8007296:	f641 21e5 	movw	r1, #6885	; 0x1ae5
 800729a:	4816      	ldr	r0, [pc, #88]	; (80072f4 <TIM_OC3_SetConfig+0x138>)
 800729c:	f7fa fa7a 	bl	8001794 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80072a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80072ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	695b      	ldr	r3, [r3, #20]
 80072b4:	011b      	lsls	r3, r3, #4
 80072b6:	693a      	ldr	r2, [r7, #16]
 80072b8:	4313      	orrs	r3, r2
 80072ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	699b      	ldr	r3, [r3, #24]
 80072c0:	011b      	lsls	r3, r3, #4
 80072c2:	693a      	ldr	r2, [r7, #16]
 80072c4:	4313      	orrs	r3, r2
 80072c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	693a      	ldr	r2, [r7, #16]
 80072cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	68fa      	ldr	r2, [r7, #12]
 80072d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	685a      	ldr	r2, [r3, #4]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	697a      	ldr	r2, [r7, #20]
 80072e0:	621a      	str	r2, [r3, #32]
}
 80072e2:	bf00      	nop
 80072e4:	3718      	adds	r7, #24
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}
 80072ea:	bf00      	nop
 80072ec:	40012c00 	.word	0x40012c00
 80072f0:	40013400 	.word	0x40013400
 80072f4:	0800c434 	.word	0x0800c434

080072f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b086      	sub	sp, #24
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
 8007300:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6a1b      	ldr	r3, [r3, #32]
 8007306:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6a1b      	ldr	r3, [r3, #32]
 8007312:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	69db      	ldr	r3, [r3, #28]
 800731e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007326:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800732e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	021b      	lsls	r3, r3, #8
 8007336:	68fa      	ldr	r2, [r7, #12]
 8007338:	4313      	orrs	r3, r2
 800733a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007342:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	031b      	lsls	r3, r3, #12
 800734a:	693a      	ldr	r2, [r7, #16]
 800734c:	4313      	orrs	r3, r2
 800734e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	4a18      	ldr	r2, [pc, #96]	; (80073b4 <TIM_OC4_SetConfig+0xbc>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d003      	beq.n	8007360 <TIM_OC4_SetConfig+0x68>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	4a17      	ldr	r2, [pc, #92]	; (80073b8 <TIM_OC4_SetConfig+0xc0>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d117      	bne.n	8007390 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	695b      	ldr	r3, [r3, #20]
 8007364:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007368:	d008      	beq.n	800737c <TIM_OC4_SetConfig+0x84>
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	695b      	ldr	r3, [r3, #20]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d004      	beq.n	800737c <TIM_OC4_SetConfig+0x84>
 8007372:	f641 3123 	movw	r1, #6947	; 0x1b23
 8007376:	4811      	ldr	r0, [pc, #68]	; (80073bc <TIM_OC4_SetConfig+0xc4>)
 8007378:	f7fa fa0c 	bl	8001794 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007382:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	695b      	ldr	r3, [r3, #20]
 8007388:	019b      	lsls	r3, r3, #6
 800738a:	697a      	ldr	r2, [r7, #20]
 800738c:	4313      	orrs	r3, r2
 800738e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	697a      	ldr	r2, [r7, #20]
 8007394:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	68fa      	ldr	r2, [r7, #12]
 800739a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	685a      	ldr	r2, [r3, #4]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	693a      	ldr	r2, [r7, #16]
 80073a8:	621a      	str	r2, [r3, #32]
}
 80073aa:	bf00      	nop
 80073ac:	3718      	adds	r7, #24
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}
 80073b2:	bf00      	nop
 80073b4:	40012c00 	.word	0x40012c00
 80073b8:	40013400 	.word	0x40013400
 80073bc:	0800c434 	.word	0x0800c434

080073c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b087      	sub	sp, #28
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	60f8      	str	r0, [r7, #12]
 80073c8:	60b9      	str	r1, [r7, #8]
 80073ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	6a1b      	ldr	r3, [r3, #32]
 80073d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	6a1b      	ldr	r3, [r3, #32]
 80073d6:	f023 0201 	bic.w	r2, r3, #1
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	699b      	ldr	r3, [r3, #24]
 80073e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80073e4:	693b      	ldr	r3, [r7, #16]
 80073e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80073ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	011b      	lsls	r3, r3, #4
 80073f0:	693a      	ldr	r2, [r7, #16]
 80073f2:	4313      	orrs	r3, r2
 80073f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80073f6:	697b      	ldr	r3, [r7, #20]
 80073f8:	f023 030a 	bic.w	r3, r3, #10
 80073fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80073fe:	697a      	ldr	r2, [r7, #20]
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	4313      	orrs	r3, r2
 8007404:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	693a      	ldr	r2, [r7, #16]
 800740a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	697a      	ldr	r2, [r7, #20]
 8007410:	621a      	str	r2, [r3, #32]
}
 8007412:	bf00      	nop
 8007414:	371c      	adds	r7, #28
 8007416:	46bd      	mov	sp, r7
 8007418:	bc80      	pop	{r7}
 800741a:	4770      	bx	lr

0800741c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800741c:	b480      	push	{r7}
 800741e:	b087      	sub	sp, #28
 8007420:	af00      	add	r7, sp, #0
 8007422:	60f8      	str	r0, [r7, #12]
 8007424:	60b9      	str	r1, [r7, #8]
 8007426:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	6a1b      	ldr	r3, [r3, #32]
 800742c:	f023 0210 	bic.w	r2, r3, #16
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	699b      	ldr	r3, [r3, #24]
 8007438:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	6a1b      	ldr	r3, [r3, #32]
 800743e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007446:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	031b      	lsls	r3, r3, #12
 800744c:	697a      	ldr	r2, [r7, #20]
 800744e:	4313      	orrs	r3, r2
 8007450:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007458:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	011b      	lsls	r3, r3, #4
 800745e:	693a      	ldr	r2, [r7, #16]
 8007460:	4313      	orrs	r3, r2
 8007462:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	697a      	ldr	r2, [r7, #20]
 8007468:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	693a      	ldr	r2, [r7, #16]
 800746e:	621a      	str	r2, [r3, #32]
}
 8007470:	bf00      	nop
 8007472:	371c      	adds	r7, #28
 8007474:	46bd      	mov	sp, r7
 8007476:	bc80      	pop	{r7}
 8007478:	4770      	bx	lr

0800747a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800747a:	b480      	push	{r7}
 800747c:	b085      	sub	sp, #20
 800747e:	af00      	add	r7, sp, #0
 8007480:	6078      	str	r0, [r7, #4]
 8007482:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	689b      	ldr	r3, [r3, #8]
 8007488:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007490:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007492:	683a      	ldr	r2, [r7, #0]
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	4313      	orrs	r3, r2
 8007498:	f043 0307 	orr.w	r3, r3, #7
 800749c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	68fa      	ldr	r2, [r7, #12]
 80074a2:	609a      	str	r2, [r3, #8]
}
 80074a4:	bf00      	nop
 80074a6:	3714      	adds	r7, #20
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bc80      	pop	{r7}
 80074ac:	4770      	bx	lr

080074ae <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80074ae:	b480      	push	{r7}
 80074b0:	b087      	sub	sp, #28
 80074b2:	af00      	add	r7, sp, #0
 80074b4:	60f8      	str	r0, [r7, #12]
 80074b6:	60b9      	str	r1, [r7, #8]
 80074b8:	607a      	str	r2, [r7, #4]
 80074ba:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	689b      	ldr	r3, [r3, #8]
 80074c0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80074c8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	021a      	lsls	r2, r3, #8
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	431a      	orrs	r2, r3
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	4313      	orrs	r3, r2
 80074d6:	697a      	ldr	r2, [r7, #20]
 80074d8:	4313      	orrs	r3, r2
 80074da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	697a      	ldr	r2, [r7, #20]
 80074e0:	609a      	str	r2, [r3, #8]
}
 80074e2:	bf00      	nop
 80074e4:	371c      	adds	r7, #28
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bc80      	pop	{r7}
 80074ea:	4770      	bx	lr

080074ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b086      	sub	sp, #24
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	60f8      	str	r0, [r7, #12]
 80074f4:	60b9      	str	r1, [r7, #8]
 80074f6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	4a26      	ldr	r2, [pc, #152]	; (8007594 <TIM_CCxChannelCmd+0xa8>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d018      	beq.n	8007532 <TIM_CCxChannelCmd+0x46>
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	4a25      	ldr	r2, [pc, #148]	; (8007598 <TIM_CCxChannelCmd+0xac>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d014      	beq.n	8007532 <TIM_CCxChannelCmd+0x46>
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800750e:	d010      	beq.n	8007532 <TIM_CCxChannelCmd+0x46>
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	4a22      	ldr	r2, [pc, #136]	; (800759c <TIM_CCxChannelCmd+0xb0>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d00c      	beq.n	8007532 <TIM_CCxChannelCmd+0x46>
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	4a21      	ldr	r2, [pc, #132]	; (80075a0 <TIM_CCxChannelCmd+0xb4>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d008      	beq.n	8007532 <TIM_CCxChannelCmd+0x46>
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	4a20      	ldr	r2, [pc, #128]	; (80075a4 <TIM_CCxChannelCmd+0xb8>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d004      	beq.n	8007532 <TIM_CCxChannelCmd+0x46>
 8007528:	f641 5109 	movw	r1, #7433	; 0x1d09
 800752c:	481e      	ldr	r0, [pc, #120]	; (80075a8 <TIM_CCxChannelCmd+0xbc>)
 800752e:	f7fa f931 	bl	8001794 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d010      	beq.n	800755a <TIM_CCxChannelCmd+0x6e>
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	2b04      	cmp	r3, #4
 800753c:	d00d      	beq.n	800755a <TIM_CCxChannelCmd+0x6e>
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	2b08      	cmp	r3, #8
 8007542:	d00a      	beq.n	800755a <TIM_CCxChannelCmd+0x6e>
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	2b0c      	cmp	r3, #12
 8007548:	d007      	beq.n	800755a <TIM_CCxChannelCmd+0x6e>
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	2b3c      	cmp	r3, #60	; 0x3c
 800754e:	d004      	beq.n	800755a <TIM_CCxChannelCmd+0x6e>
 8007550:	f641 510a 	movw	r1, #7434	; 0x1d0a
 8007554:	4814      	ldr	r0, [pc, #80]	; (80075a8 <TIM_CCxChannelCmd+0xbc>)
 8007556:	f7fa f91d 	bl	8001794 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	f003 031f 	and.w	r3, r3, #31
 8007560:	2201      	movs	r2, #1
 8007562:	fa02 f303 	lsl.w	r3, r2, r3
 8007566:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	6a1a      	ldr	r2, [r3, #32]
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	43db      	mvns	r3, r3
 8007570:	401a      	ands	r2, r3
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	6a1a      	ldr	r2, [r3, #32]
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	f003 031f 	and.w	r3, r3, #31
 8007580:	6879      	ldr	r1, [r7, #4]
 8007582:	fa01 f303 	lsl.w	r3, r1, r3
 8007586:	431a      	orrs	r2, r3
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	621a      	str	r2, [r3, #32]
}
 800758c:	bf00      	nop
 800758e:	3718      	adds	r7, #24
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}
 8007594:	40012c00 	.word	0x40012c00
 8007598:	40013400 	.word	0x40013400
 800759c:	40000400 	.word	0x40000400
 80075a0:	40000800 	.word	0x40000800
 80075a4:	40000c00 	.word	0x40000c00
 80075a8:	0800c434 	.word	0x0800c434

080075ac <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b083      	sub	sp, #12
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	4a1c      	ldr	r2, [pc, #112]	; (8007628 <TIM_ResetCallback+0x7c>)
 80075b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	4a1b      	ldr	r2, [pc, #108]	; (800762c <TIM_ResetCallback+0x80>)
 80075c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	4a1a      	ldr	r2, [pc, #104]	; (8007630 <TIM_ResetCallback+0x84>)
 80075c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	4a19      	ldr	r2, [pc, #100]	; (8007634 <TIM_ResetCallback+0x88>)
 80075d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	4a18      	ldr	r2, [pc, #96]	; (8007638 <TIM_ResetCallback+0x8c>)
 80075d8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	4a17      	ldr	r2, [pc, #92]	; (800763c <TIM_ResetCallback+0x90>)
 80075e0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	4a16      	ldr	r2, [pc, #88]	; (8007640 <TIM_ResetCallback+0x94>)
 80075e8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	4a15      	ldr	r2, [pc, #84]	; (8007644 <TIM_ResetCallback+0x98>)
 80075f0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	4a14      	ldr	r2, [pc, #80]	; (8007648 <TIM_ResetCallback+0x9c>)
 80075f8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	4a13      	ldr	r2, [pc, #76]	; (800764c <TIM_ResetCallback+0xa0>)
 8007600:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	4a12      	ldr	r2, [pc, #72]	; (8007650 <TIM_ResetCallback+0xa4>)
 8007608:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	4a11      	ldr	r2, [pc, #68]	; (8007654 <TIM_ResetCallback+0xa8>)
 8007610:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	4a10      	ldr	r2, [pc, #64]	; (8007658 <TIM_ResetCallback+0xac>)
 8007618:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800761c:	bf00      	nop
 800761e:	370c      	adds	r7, #12
 8007620:	46bd      	mov	sp, r7
 8007622:	bc80      	pop	{r7}
 8007624:	4770      	bx	lr
 8007626:	bf00      	nop
 8007628:	08001729 	.word	0x08001729
 800762c:	08006dc9 	.word	0x08006dc9
 8007630:	08006e23 	.word	0x08006e23
 8007634:	08006e35 	.word	0x08006e35
 8007638:	080016e1 	.word	0x080016e1
 800763c:	08006ded 	.word	0x08006ded
 8007640:	08006ddb 	.word	0x08006ddb
 8007644:	08006dff 	.word	0x08006dff
 8007648:	08006e11 	.word	0x08006e11
 800764c:	08006e47 	.word	0x08006e47
 8007650:	08007995 	.word	0x08007995
 8007654:	080079a7 	.word	0x080079a7
 8007658:	080079b9 	.word	0x080079b9

0800765c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b084      	sub	sp, #16
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
 8007664:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a5c      	ldr	r2, [pc, #368]	; (80077dc <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d027      	beq.n	80076c0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a5a      	ldr	r2, [pc, #360]	; (80077e0 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d022      	beq.n	80076c0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007682:	d01d      	beq.n	80076c0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a56      	ldr	r2, [pc, #344]	; (80077e4 <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d018      	beq.n	80076c0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4a55      	ldr	r2, [pc, #340]	; (80077e8 <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d013      	beq.n	80076c0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a53      	ldr	r2, [pc, #332]	; (80077ec <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d00e      	beq.n	80076c0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4a52      	ldr	r2, [pc, #328]	; (80077f0 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d009      	beq.n	80076c0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a50      	ldr	r2, [pc, #320]	; (80077f4 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d004      	beq.n	80076c0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80076b6:	f240 7186 	movw	r1, #1926	; 0x786
 80076ba:	484f      	ldr	r0, [pc, #316]	; (80077f8 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 80076bc:	f7fa f86a 	bl	8001794 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d020      	beq.n	800770a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	2b10      	cmp	r3, #16
 80076ce:	d01c      	beq.n	800770a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	2b20      	cmp	r3, #32
 80076d6:	d018      	beq.n	800770a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	2b30      	cmp	r3, #48	; 0x30
 80076de:	d014      	beq.n	800770a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	2b40      	cmp	r3, #64	; 0x40
 80076e6:	d010      	beq.n	800770a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	2b50      	cmp	r3, #80	; 0x50
 80076ee:	d00c      	beq.n	800770a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	2b60      	cmp	r3, #96	; 0x60
 80076f6:	d008      	beq.n	800770a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	2b70      	cmp	r3, #112	; 0x70
 80076fe:	d004      	beq.n	800770a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007700:	f240 7187 	movw	r1, #1927	; 0x787
 8007704:	483c      	ldr	r0, [pc, #240]	; (80077f8 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 8007706:	f7fa f845 	bl	8001794 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	685b      	ldr	r3, [r3, #4]
 800770e:	2b80      	cmp	r3, #128	; 0x80
 8007710:	d008      	beq.n	8007724 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d004      	beq.n	8007724 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800771a:	f44f 61f1 	mov.w	r1, #1928	; 0x788
 800771e:	4836      	ldr	r0, [pc, #216]	; (80077f8 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 8007720:	f7fa f838 	bl	8001794 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800772a:	2b01      	cmp	r3, #1
 800772c:	d101      	bne.n	8007732 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800772e:	2302      	movs	r3, #2
 8007730:	e050      	b.n	80077d4 <HAL_TIMEx_MasterConfigSynchronization+0x178>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2201      	movs	r2, #1
 8007736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2202      	movs	r2, #2
 800773e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	685b      	ldr	r3, [r3, #4]
 8007748:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	689b      	ldr	r3, [r3, #8]
 8007750:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007758:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	68fa      	ldr	r2, [r7, #12]
 8007760:	4313      	orrs	r3, r2
 8007762:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	68fa      	ldr	r2, [r7, #12]
 800776a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4a1a      	ldr	r2, [pc, #104]	; (80077dc <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d018      	beq.n	80077a8 <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a19      	ldr	r2, [pc, #100]	; (80077e0 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d013      	beq.n	80077a8 <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007788:	d00e      	beq.n	80077a8 <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4a15      	ldr	r2, [pc, #84]	; (80077e4 <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d009      	beq.n	80077a8 <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a13      	ldr	r2, [pc, #76]	; (80077e8 <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d004      	beq.n	80077a8 <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a12      	ldr	r2, [pc, #72]	; (80077ec <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d10c      	bne.n	80077c2 <HAL_TIMEx_MasterConfigSynchronization+0x166>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077ae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	685b      	ldr	r3, [r3, #4]
 80077b4:	68ba      	ldr	r2, [r7, #8]
 80077b6:	4313      	orrs	r3, r2
 80077b8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	68ba      	ldr	r2, [r7, #8]
 80077c0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2201      	movs	r2, #1
 80077c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2200      	movs	r2, #0
 80077ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80077d2:	2300      	movs	r3, #0
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	3710      	adds	r7, #16
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}
 80077dc:	40012c00 	.word	0x40012c00
 80077e0:	40013400 	.word	0x40013400
 80077e4:	40000400 	.word	0x40000400
 80077e8:	40000800 	.word	0x40000800
 80077ec:	40000c00 	.word	0x40000c00
 80077f0:	40001000 	.word	0x40001000
 80077f4:	40001400 	.word	0x40001400
 80077f8:	0800c46c 	.word	0x0800c46c

080077fc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b084      	sub	sp, #16
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
 8007804:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007806:	2300      	movs	r3, #0
 8007808:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4a5e      	ldr	r2, [pc, #376]	; (8007988 <HAL_TIMEx_ConfigBreakDeadTime+0x18c>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d009      	beq.n	8007828 <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4a5c      	ldr	r2, [pc, #368]	; (800798c <HAL_TIMEx_ConfigBreakDeadTime+0x190>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d004      	beq.n	8007828 <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 800781e:	f240 71c3 	movw	r1, #1987	; 0x7c3
 8007822:	485b      	ldr	r0, [pc, #364]	; (8007990 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8007824:	f7f9 ffb6 	bl	8001794 <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007830:	d008      	beq.n	8007844 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d004      	beq.n	8007844 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 800783a:	f240 71c4 	movw	r1, #1988	; 0x7c4
 800783e:	4854      	ldr	r0, [pc, #336]	; (8007990 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8007840:	f7f9 ffa8 	bl	8001794 <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800784c:	d008      	beq.n	8007860 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	685b      	ldr	r3, [r3, #4]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d004      	beq.n	8007860 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 8007856:	f240 71c5 	movw	r1, #1989	; 0x7c5
 800785a:	484d      	ldr	r0, [pc, #308]	; (8007990 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800785c:	f7f9 ff9a 	bl	8001794 <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	689b      	ldr	r3, [r3, #8]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d013      	beq.n	8007890 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	689b      	ldr	r3, [r3, #8]
 800786c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007870:	d00e      	beq.n	8007890 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	689b      	ldr	r3, [r3, #8]
 8007876:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800787a:	d009      	beq.n	8007890 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	689b      	ldr	r3, [r3, #8]
 8007880:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007884:	d004      	beq.n	8007890 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 8007886:	f240 71c6 	movw	r1, #1990	; 0x7c6
 800788a:	4841      	ldr	r0, [pc, #260]	; (8007990 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800788c:	f7f9 ff82 	bl	8001794 <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	68db      	ldr	r3, [r3, #12]
 8007894:	2bff      	cmp	r3, #255	; 0xff
 8007896:	d904      	bls.n	80078a2 <HAL_TIMEx_ConfigBreakDeadTime+0xa6>
 8007898:	f240 71c7 	movw	r1, #1991	; 0x7c7
 800789c:	483c      	ldr	r0, [pc, #240]	; (8007990 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800789e:	f7f9 ff79 	bl	8001794 <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	691b      	ldr	r3, [r3, #16]
 80078a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078aa:	d008      	beq.n	80078be <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	691b      	ldr	r3, [r3, #16]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d004      	beq.n	80078be <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80078b4:	f44f 61f9 	mov.w	r1, #1992	; 0x7c8
 80078b8:	4835      	ldr	r0, [pc, #212]	; (8007990 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 80078ba:	f7f9 ff6b 	bl	8001794 <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	695b      	ldr	r3, [r3, #20]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d009      	beq.n	80078da <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	695b      	ldr	r3, [r3, #20]
 80078ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078ce:	d004      	beq.n	80078da <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80078d0:	f240 71c9 	movw	r1, #1993	; 0x7c9
 80078d4:	482e      	ldr	r0, [pc, #184]	; (8007990 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 80078d6:	f7f9 ff5d 	bl	8001794 <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	69db      	ldr	r3, [r3, #28]
 80078de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80078e2:	d008      	beq.n	80078f6 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	69db      	ldr	r3, [r3, #28]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d004      	beq.n	80078f6 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 80078ec:	f240 71ca 	movw	r1, #1994	; 0x7ca
 80078f0:	4827      	ldr	r0, [pc, #156]	; (8007990 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 80078f2:	f7f9 ff4f 	bl	8001794 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078fc:	2b01      	cmp	r3, #1
 80078fe:	d101      	bne.n	8007904 <HAL_TIMEx_ConfigBreakDeadTime+0x108>
 8007900:	2302      	movs	r3, #2
 8007902:	e03d      	b.n	8007980 <HAL_TIMEx_ConfigBreakDeadTime+0x184>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2201      	movs	r2, #1
 8007908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	68db      	ldr	r3, [r3, #12]
 8007916:	4313      	orrs	r3, r2
 8007918:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	689b      	ldr	r3, [r3, #8]
 8007924:	4313      	orrs	r3, r2
 8007926:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	685b      	ldr	r3, [r3, #4]
 8007932:	4313      	orrs	r3, r2
 8007934:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4313      	orrs	r3, r2
 8007942:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	691b      	ldr	r3, [r3, #16]
 800794e:	4313      	orrs	r3, r2
 8007950:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	695b      	ldr	r3, [r3, #20]
 800795c:	4313      	orrs	r3, r2
 800795e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	69db      	ldr	r3, [r3, #28]
 800796a:	4313      	orrs	r3, r2
 800796c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	68fa      	ldr	r2, [r7, #12]
 8007974:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2200      	movs	r2, #0
 800797a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800797e:	2300      	movs	r3, #0
}
 8007980:	4618      	mov	r0, r3
 8007982:	3710      	adds	r7, #16
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}
 8007988:	40012c00 	.word	0x40012c00
 800798c:	40013400 	.word	0x40013400
 8007990:	0800c46c 	.word	0x0800c46c

08007994 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007994:	b480      	push	{r7}
 8007996:	b083      	sub	sp, #12
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800799c:	bf00      	nop
 800799e:	370c      	adds	r7, #12
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bc80      	pop	{r7}
 80079a4:	4770      	bx	lr

080079a6 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80079a6:	b480      	push	{r7}
 80079a8:	b083      	sub	sp, #12
 80079aa:	af00      	add	r7, sp, #0
 80079ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 80079ae:	bf00      	nop
 80079b0:	370c      	adds	r7, #12
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bc80      	pop	{r7}
 80079b6:	4770      	bx	lr

080079b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b083      	sub	sp, #12
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80079c0:	bf00      	nop
 80079c2:	370c      	adds	r7, #12
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bc80      	pop	{r7}
 80079c8:	4770      	bx	lr
	...

080079cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b082      	sub	sp, #8
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d101      	bne.n	80079de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80079da:	2301      	movs	r3, #1
 80079dc:	e0a7      	b.n	8007b2e <HAL_UART_Init+0x162>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	699b      	ldr	r3, [r3, #24]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d02c      	beq.n	8007a40 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2 and USART3 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a53      	ldr	r2, [pc, #332]	; (8007b38 <HAL_UART_Init+0x16c>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d00e      	beq.n	8007a0e <HAL_UART_Init+0x42>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a51      	ldr	r2, [pc, #324]	; (8007b3c <HAL_UART_Init+0x170>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d009      	beq.n	8007a0e <HAL_UART_Init+0x42>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4a50      	ldr	r2, [pc, #320]	; (8007b40 <HAL_UART_Init+0x174>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d004      	beq.n	8007a0e <HAL_UART_Init+0x42>
 8007a04:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 8007a08:	484e      	ldr	r0, [pc, #312]	; (8007b44 <HAL_UART_Init+0x178>)
 8007a0a:	f7f9 fec3 	bl	8001794 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	699b      	ldr	r3, [r3, #24]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d032      	beq.n	8007a7c <HAL_UART_Init+0xb0>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	699b      	ldr	r3, [r3, #24]
 8007a1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a1e:	d02d      	beq.n	8007a7c <HAL_UART_Init+0xb0>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	699b      	ldr	r3, [r3, #24]
 8007a24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a28:	d028      	beq.n	8007a7c <HAL_UART_Init+0xb0>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	699b      	ldr	r3, [r3, #24]
 8007a2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a32:	d023      	beq.n	8007a7c <HAL_UART_Init+0xb0>
 8007a34:	f240 116d 	movw	r1, #365	; 0x16d
 8007a38:	4842      	ldr	r0, [pc, #264]	; (8007b44 <HAL_UART_Init+0x178>)
 8007a3a:	f7f9 feab 	bl	8001794 <assert_failed>
 8007a3e:	e01d      	b.n	8007a7c <HAL_UART_Init+0xb0>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4a3c      	ldr	r2, [pc, #240]	; (8007b38 <HAL_UART_Init+0x16c>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d018      	beq.n	8007a7c <HAL_UART_Init+0xb0>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4a3b      	ldr	r2, [pc, #236]	; (8007b3c <HAL_UART_Init+0x170>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d013      	beq.n	8007a7c <HAL_UART_Init+0xb0>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	4a39      	ldr	r2, [pc, #228]	; (8007b40 <HAL_UART_Init+0x174>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d00e      	beq.n	8007a7c <HAL_UART_Init+0xb0>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4a39      	ldr	r2, [pc, #228]	; (8007b48 <HAL_UART_Init+0x17c>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d009      	beq.n	8007a7c <HAL_UART_Init+0xb0>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	4a37      	ldr	r2, [pc, #220]	; (8007b4c <HAL_UART_Init+0x180>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d004      	beq.n	8007a7c <HAL_UART_Init+0xb0>
 8007a72:	f240 1171 	movw	r1, #369	; 0x171
 8007a76:	4833      	ldr	r0, [pc, #204]	; (8007b44 <HAL_UART_Init+0x178>)
 8007a78:	f7f9 fe8c 	bl	8001794 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	689b      	ldr	r3, [r3, #8]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d009      	beq.n	8007a98 <HAL_UART_Init+0xcc>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	689b      	ldr	r3, [r3, #8]
 8007a88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a8c:	d004      	beq.n	8007a98 <HAL_UART_Init+0xcc>
 8007a8e:	f240 1173 	movw	r1, #371	; 0x173
 8007a92:	482c      	ldr	r0, [pc, #176]	; (8007b44 <HAL_UART_Init+0x178>)
 8007a94:	f7f9 fe7e 	bl	8001794 <assert_failed>
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a9e:	b2db      	uxtb	r3, r3
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d111      	bne.n	8007ac8 <HAL_UART_Init+0xfc>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f000 fb0d 	bl	80080cc <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d102      	bne.n	8007ac0 <HAL_UART_Init+0xf4>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	4a24      	ldr	r2, [pc, #144]	; (8007b50 <HAL_UART_Init+0x184>)
 8007abe:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2224      	movs	r2, #36	; 0x24
 8007acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	68da      	ldr	r2, [r3, #12]
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007ade:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f000 fd01 	bl	80084e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	691a      	ldr	r2, [r3, #16]
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007af4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	695a      	ldr	r2, [r3, #20]
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007b04:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	68da      	ldr	r2, [r3, #12]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007b14:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2220      	movs	r2, #32
 8007b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2220      	movs	r2, #32
 8007b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007b2c:	2300      	movs	r3, #0
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3708      	adds	r7, #8
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}
 8007b36:	bf00      	nop
 8007b38:	40013800 	.word	0x40013800
 8007b3c:	40004400 	.word	0x40004400
 8007b40:	40004800 	.word	0x40004800
 8007b44:	0800c4a8 	.word	0x0800c4a8
 8007b48:	40004c00 	.word	0x40004c00
 8007b4c:	40005000 	.word	0x40005000
 8007b50:	08001c29 	.word	0x08001c29

08007b54 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b08a      	sub	sp, #40	; 0x28
 8007b58:	af02      	add	r7, sp, #8
 8007b5a:	60f8      	str	r0, [r7, #12]
 8007b5c:	60b9      	str	r1, [r7, #8]
 8007b5e:	603b      	str	r3, [r7, #0]
 8007b60:	4613      	mov	r3, r2
 8007b62:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007b64:	2300      	movs	r3, #0
 8007b66:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b6e:	b2db      	uxtb	r3, r3
 8007b70:	2b20      	cmp	r3, #32
 8007b72:	d17c      	bne.n	8007c6e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d002      	beq.n	8007b80 <HAL_UART_Transmit+0x2c>
 8007b7a:	88fb      	ldrh	r3, [r7, #6]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d101      	bne.n	8007b84 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007b80:	2301      	movs	r3, #1
 8007b82:	e075      	b.n	8007c70 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b8a:	2b01      	cmp	r3, #1
 8007b8c:	d101      	bne.n	8007b92 <HAL_UART_Transmit+0x3e>
 8007b8e:	2302      	movs	r3, #2
 8007b90:	e06e      	b.n	8007c70 <HAL_UART_Transmit+0x11c>
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	2201      	movs	r2, #1
 8007b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	2221      	movs	r2, #33	; 0x21
 8007ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007ba8:	f7fa faa4 	bl	80020f4 <HAL_GetTick>
 8007bac:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	88fa      	ldrh	r2, [r7, #6]
 8007bb2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	88fa      	ldrh	r2, [r7, #6]
 8007bb8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	689b      	ldr	r3, [r3, #8]
 8007bbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bc2:	d108      	bne.n	8007bd6 <HAL_UART_Transmit+0x82>
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	691b      	ldr	r3, [r3, #16]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d104      	bne.n	8007bd6 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007bcc:	2300      	movs	r3, #0
 8007bce:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	61bb      	str	r3, [r7, #24]
 8007bd4:	e003      	b.n	8007bde <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007bda:	2300      	movs	r3, #0
 8007bdc:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2200      	movs	r2, #0
 8007be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007be6:	e02a      	b.n	8007c3e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	9300      	str	r3, [sp, #0]
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	2180      	movs	r1, #128	; 0x80
 8007bf2:	68f8      	ldr	r0, [r7, #12]
 8007bf4:	f000 faa0 	bl	8008138 <UART_WaitOnFlagUntilTimeout>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d001      	beq.n	8007c02 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007bfe:	2303      	movs	r3, #3
 8007c00:	e036      	b.n	8007c70 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007c02:	69fb      	ldr	r3, [r7, #28]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d10b      	bne.n	8007c20 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007c08:	69bb      	ldr	r3, [r7, #24]
 8007c0a:	881b      	ldrh	r3, [r3, #0]
 8007c0c:	461a      	mov	r2, r3
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007c16:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007c18:	69bb      	ldr	r3, [r7, #24]
 8007c1a:	3302      	adds	r3, #2
 8007c1c:	61bb      	str	r3, [r7, #24]
 8007c1e:	e007      	b.n	8007c30 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007c20:	69fb      	ldr	r3, [r7, #28]
 8007c22:	781a      	ldrb	r2, [r3, #0]
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007c2a:	69fb      	ldr	r3, [r7, #28]
 8007c2c:	3301      	adds	r3, #1
 8007c2e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007c34:	b29b      	uxth	r3, r3
 8007c36:	3b01      	subs	r3, #1
 8007c38:	b29a      	uxth	r2, r3
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007c42:	b29b      	uxth	r3, r3
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d1cf      	bne.n	8007be8 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	9300      	str	r3, [sp, #0]
 8007c4c:	697b      	ldr	r3, [r7, #20]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	2140      	movs	r1, #64	; 0x40
 8007c52:	68f8      	ldr	r0, [r7, #12]
 8007c54:	f000 fa70 	bl	8008138 <UART_WaitOnFlagUntilTimeout>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d001      	beq.n	8007c62 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007c5e:	2303      	movs	r3, #3
 8007c60:	e006      	b.n	8007c70 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	2220      	movs	r2, #32
 8007c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	e000      	b.n	8007c70 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007c6e:	2302      	movs	r3, #2
  }
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	3720      	adds	r7, #32
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}

08007c78 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b084      	sub	sp, #16
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	60f8      	str	r0, [r7, #12]
 8007c80:	60b9      	str	r1, [r7, #8]
 8007c82:	4613      	mov	r3, r2
 8007c84:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c8c:	b2db      	uxtb	r3, r3
 8007c8e:	2b20      	cmp	r3, #32
 8007c90:	d11d      	bne.n	8007cce <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d002      	beq.n	8007c9e <HAL_UART_Receive_IT+0x26>
 8007c98:	88fb      	ldrh	r3, [r7, #6]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d101      	bne.n	8007ca2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	e016      	b.n	8007cd0 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ca8:	2b01      	cmp	r3, #1
 8007caa:	d101      	bne.n	8007cb0 <HAL_UART_Receive_IT+0x38>
 8007cac:	2302      	movs	r3, #2
 8007cae:	e00f      	b.n	8007cd0 <HAL_UART_Receive_IT+0x58>
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8007cbe:	88fb      	ldrh	r3, [r7, #6]
 8007cc0:	461a      	mov	r2, r3
 8007cc2:	68b9      	ldr	r1, [r7, #8]
 8007cc4:	68f8      	ldr	r0, [r7, #12]
 8007cc6:	f000 fa81 	bl	80081cc <UART_Start_Receive_IT>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	e000      	b.n	8007cd0 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007cce:	2302      	movs	r3, #2
  }
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	3710      	adds	r7, #16
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}

08007cd8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b08a      	sub	sp, #40	; 0x28
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	68db      	ldr	r3, [r3, #12]
 8007cee:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	695b      	ldr	r3, [r3, #20]
 8007cf6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d02:	f003 030f 	and.w	r3, r3, #15
 8007d06:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8007d08:	69bb      	ldr	r3, [r7, #24]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d10d      	bne.n	8007d2a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d10:	f003 0320 	and.w	r3, r3, #32
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d008      	beq.n	8007d2a <HAL_UART_IRQHandler+0x52>
 8007d18:	6a3b      	ldr	r3, [r7, #32]
 8007d1a:	f003 0320 	and.w	r3, r3, #32
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d003      	beq.n	8007d2a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 fb34 	bl	8008390 <UART_Receive_IT>
      return;
 8007d28:	e180      	b.n	800802c <HAL_UART_IRQHandler+0x354>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007d2a:	69bb      	ldr	r3, [r7, #24]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	f000 80b4 	beq.w	8007e9a <HAL_UART_IRQHandler+0x1c2>
 8007d32:	69fb      	ldr	r3, [r7, #28]
 8007d34:	f003 0301 	and.w	r3, r3, #1
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d105      	bne.n	8007d48 <HAL_UART_IRQHandler+0x70>
 8007d3c:	6a3b      	ldr	r3, [r7, #32]
 8007d3e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	f000 80a9 	beq.w	8007e9a <HAL_UART_IRQHandler+0x1c2>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d4a:	f003 0301 	and.w	r3, r3, #1
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d00a      	beq.n	8007d68 <HAL_UART_IRQHandler+0x90>
 8007d52:	6a3b      	ldr	r3, [r7, #32]
 8007d54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d005      	beq.n	8007d68 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d60:	f043 0201 	orr.w	r2, r3, #1
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d6a:	f003 0304 	and.w	r3, r3, #4
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d00a      	beq.n	8007d88 <HAL_UART_IRQHandler+0xb0>
 8007d72:	69fb      	ldr	r3, [r7, #28]
 8007d74:	f003 0301 	and.w	r3, r3, #1
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d005      	beq.n	8007d88 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d80:	f043 0202 	orr.w	r2, r3, #2
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d8a:	f003 0302 	and.w	r3, r3, #2
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d00a      	beq.n	8007da8 <HAL_UART_IRQHandler+0xd0>
 8007d92:	69fb      	ldr	r3, [r7, #28]
 8007d94:	f003 0301 	and.w	r3, r3, #1
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d005      	beq.n	8007da8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007da0:	f043 0204 	orr.w	r2, r3, #4
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007daa:	f003 0308 	and.w	r3, r3, #8
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d00f      	beq.n	8007dd2 <HAL_UART_IRQHandler+0xfa>
 8007db2:	6a3b      	ldr	r3, [r7, #32]
 8007db4:	f003 0320 	and.w	r3, r3, #32
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d104      	bne.n	8007dc6 <HAL_UART_IRQHandler+0xee>
 8007dbc:	69fb      	ldr	r3, [r7, #28]
 8007dbe:	f003 0301 	and.w	r3, r3, #1
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d005      	beq.n	8007dd2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dca:	f043 0208 	orr.w	r2, r3, #8
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	f000 8123 	beq.w	8008022 <HAL_UART_IRQHandler+0x34a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dde:	f003 0320 	and.w	r3, r3, #32
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d007      	beq.n	8007df6 <HAL_UART_IRQHandler+0x11e>
 8007de6:	6a3b      	ldr	r3, [r7, #32]
 8007de8:	f003 0320 	and.w	r3, r3, #32
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d002      	beq.n	8007df6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f000 facd 	bl	8008390 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	695b      	ldr	r3, [r3, #20]
 8007dfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	bf14      	ite	ne
 8007e04:	2301      	movne	r3, #1
 8007e06:	2300      	moveq	r3, #0
 8007e08:	b2db      	uxtb	r3, r3
 8007e0a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e10:	f003 0308 	and.w	r3, r3, #8
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d102      	bne.n	8007e1e <HAL_UART_IRQHandler+0x146>
 8007e18:	697b      	ldr	r3, [r7, #20]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d033      	beq.n	8007e86 <HAL_UART_IRQHandler+0x1ae>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f000 fa0d 	bl	800823e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	695b      	ldr	r3, [r3, #20]
 8007e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d024      	beq.n	8007e7c <HAL_UART_IRQHandler+0x1a4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	695a      	ldr	r2, [r3, #20]
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e40:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d013      	beq.n	8007e72 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e4e:	4a79      	ldr	r2, [pc, #484]	; (8008034 <HAL_UART_IRQHandler+0x35c>)
 8007e50:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e56:	4618      	mov	r0, r3
 8007e58:	f7fb f8e6 	bl	8003028 <HAL_DMA_Abort_IT>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d019      	beq.n	8007e96 <HAL_UART_IRQHandler+0x1be>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e68:	687a      	ldr	r2, [r7, #4]
 8007e6a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007e6c:	4610      	mov	r0, r2
 8007e6e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e70:	e011      	b.n	8007e96 <HAL_UART_IRQHandler+0x1be>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e7a:	e00c      	b.n	8007e96 <HAL_UART_IRQHandler+0x1be>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e84:	e007      	b.n	8007e96 <HAL_UART_IRQHandler+0x1be>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2200      	movs	r2, #0
 8007e92:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007e94:	e0c5      	b.n	8008022 <HAL_UART_IRQHandler+0x34a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e96:	bf00      	nop
    return;
 8007e98:	e0c3      	b.n	8008022 <HAL_UART_IRQHandler+0x34a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e9e:	2b01      	cmp	r3, #1
 8007ea0:	f040 80a3 	bne.w	8007fea <HAL_UART_IRQHandler+0x312>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8007ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea6:	f003 0310 	and.w	r3, r3, #16
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	f000 809d 	beq.w	8007fea <HAL_UART_IRQHandler+0x312>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8007eb0:	6a3b      	ldr	r3, [r7, #32]
 8007eb2:	f003 0310 	and.w	r3, r3, #16
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	f000 8097 	beq.w	8007fea <HAL_UART_IRQHandler+0x312>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	60fb      	str	r3, [r7, #12]
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	60fb      	str	r3, [r7, #12]
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	685b      	ldr	r3, [r3, #4]
 8007ece:	60fb      	str	r3, [r7, #12]
 8007ed0:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	695b      	ldr	r3, [r3, #20]
 8007ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d04f      	beq.n	8007f80 <HAL_UART_IRQHandler+0x2a8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	685b      	ldr	r3, [r3, #4]
 8007ee8:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8007eea:	8a3b      	ldrh	r3, [r7, #16]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	f000 809a 	beq.w	8008026 <HAL_UART_IRQHandler+0x34e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007ef6:	8a3a      	ldrh	r2, [r7, #16]
 8007ef8:	429a      	cmp	r2, r3
 8007efa:	f080 8094 	bcs.w	8008026 <HAL_UART_IRQHandler+0x34e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	8a3a      	ldrh	r2, [r7, #16]
 8007f02:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f08:	699b      	ldr	r3, [r3, #24]
 8007f0a:	2b20      	cmp	r3, #32
 8007f0c:	d02b      	beq.n	8007f66 <HAL_UART_IRQHandler+0x28e>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	68da      	ldr	r2, [r3, #12]
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007f1c:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	695a      	ldr	r2, [r3, #20]
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f022 0201 	bic.w	r2, r2, #1
 8007f2c:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	695a      	ldr	r2, [r3, #20]
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f3c:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2220      	movs	r2, #32
 8007f42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	68da      	ldr	r2, [r3, #12]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f022 0210 	bic.w	r2, r2, #16
 8007f5a:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f60:	4618      	mov	r0, r3
 8007f62:	f7fb f827 	bl	8002fb4 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f6a:	687a      	ldr	r2, [r7, #4]
 8007f6c:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8007f6e:	687a      	ldr	r2, [r7, #4]
 8007f70:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8007f72:	b292      	uxth	r2, r2
 8007f74:	1a8a      	subs	r2, r1, r2
 8007f76:	b292      	uxth	r2, r2
 8007f78:	4611      	mov	r1, r2
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif
      }
      return;
 8007f7e:	e052      	b.n	8008026 <HAL_UART_IRQHandler+0x34e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007f88:	b29b      	uxth	r3, r3
 8007f8a:	1ad3      	subs	r3, r2, r3
 8007f8c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007f92:	b29b      	uxth	r3, r3
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d048      	beq.n	800802a <HAL_UART_IRQHandler+0x352>
          &&(nb_rx_data > 0U) )
 8007f98:	8a7b      	ldrh	r3, [r7, #18]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d045      	beq.n	800802a <HAL_UART_IRQHandler+0x352>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	68da      	ldr	r2, [r3, #12]
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007fac:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	695a      	ldr	r2, [r3, #20]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f022 0201 	bic.w	r2, r2, #1
 8007fbc:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2220      	movs	r2, #32
 8007fc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	68da      	ldr	r2, [r3, #12]
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f022 0210 	bic.w	r2, r2, #16
 8007fda:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007fe0:	8a7a      	ldrh	r2, [r7, #18]
 8007fe2:	4611      	mov	r1, r2
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif
      }
      return;
 8007fe8:	e01f      	b.n	800802a <HAL_UART_IRQHandler+0x352>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d008      	beq.n	8008006 <HAL_UART_IRQHandler+0x32e>
 8007ff4:	6a3b      	ldr	r3, [r7, #32]
 8007ff6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d003      	beq.n	8008006 <HAL_UART_IRQHandler+0x32e>
  {
    UART_Transmit_IT(huart);
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f000 f95e 	bl	80082c0 <UART_Transmit_IT>
    return;
 8008004:	e012      	b.n	800802c <HAL_UART_IRQHandler+0x354>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008008:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800800c:	2b00      	cmp	r3, #0
 800800e:	d00d      	beq.n	800802c <HAL_UART_IRQHandler+0x354>
 8008010:	6a3b      	ldr	r3, [r7, #32]
 8008012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008016:	2b00      	cmp	r3, #0
 8008018:	d008      	beq.n	800802c <HAL_UART_IRQHandler+0x354>
  {
    UART_EndTransmit_IT(huart);
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f000 f99f 	bl	800835e <UART_EndTransmit_IT>
    return;
 8008020:	e004      	b.n	800802c <HAL_UART_IRQHandler+0x354>
    return;
 8008022:	bf00      	nop
 8008024:	e002      	b.n	800802c <HAL_UART_IRQHandler+0x354>
      return;
 8008026:	bf00      	nop
 8008028:	e000      	b.n	800802c <HAL_UART_IRQHandler+0x354>
      return;
 800802a:	bf00      	nop
  }
}
 800802c:	3728      	adds	r7, #40	; 0x28
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}
 8008032:	bf00      	nop
 8008034:	08008297 	.word	0x08008297

08008038 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008038:	b480      	push	{r7}
 800803a:	b083      	sub	sp, #12
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008040:	bf00      	nop
 8008042:	370c      	adds	r7, #12
 8008044:	46bd      	mov	sp, r7
 8008046:	bc80      	pop	{r7}
 8008048:	4770      	bx	lr

0800804a <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800804a:	b480      	push	{r7}
 800804c:	b083      	sub	sp, #12
 800804e:	af00      	add	r7, sp, #0
 8008050:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008052:	bf00      	nop
 8008054:	370c      	adds	r7, #12
 8008056:	46bd      	mov	sp, r7
 8008058:	bc80      	pop	{r7}
 800805a:	4770      	bx	lr

0800805c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800805c:	b480      	push	{r7}
 800805e:	b083      	sub	sp, #12
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008064:	bf00      	nop
 8008066:	370c      	adds	r7, #12
 8008068:	46bd      	mov	sp, r7
 800806a:	bc80      	pop	{r7}
 800806c:	4770      	bx	lr

0800806e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800806e:	b480      	push	{r7}
 8008070:	b083      	sub	sp, #12
 8008072:	af00      	add	r7, sp, #0
 8008074:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008076:	bf00      	nop
 8008078:	370c      	adds	r7, #12
 800807a:	46bd      	mov	sp, r7
 800807c:	bc80      	pop	{r7}
 800807e:	4770      	bx	lr

08008080 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8008080:	b480      	push	{r7}
 8008082:	b083      	sub	sp, #12
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8008088:	bf00      	nop
 800808a:	370c      	adds	r7, #12
 800808c:	46bd      	mov	sp, r7
 800808e:	bc80      	pop	{r7}
 8008090:	4770      	bx	lr

08008092 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8008092:	b480      	push	{r7}
 8008094:	b083      	sub	sp, #12
 8008096:	af00      	add	r7, sp, #0
 8008098:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800809a:	bf00      	nop
 800809c:	370c      	adds	r7, #12
 800809e:	46bd      	mov	sp, r7
 80080a0:	bc80      	pop	{r7}
 80080a2:	4770      	bx	lr

080080a4 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80080a4:	b480      	push	{r7}
 80080a6:	b083      	sub	sp, #12
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80080ac:	bf00      	nop
 80080ae:	370c      	adds	r7, #12
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bc80      	pop	{r7}
 80080b4:	4770      	bx	lr

080080b6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80080b6:	b480      	push	{r7}
 80080b8:	b083      	sub	sp, #12
 80080ba:	af00      	add	r7, sp, #0
 80080bc:	6078      	str	r0, [r7, #4]
 80080be:	460b      	mov	r3, r1
 80080c0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80080c2:	bf00      	nop
 80080c4:	370c      	adds	r7, #12
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bc80      	pop	{r7}
 80080ca:	4770      	bx	lr

080080cc <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 80080cc:	b480      	push	{r7}
 80080ce:	b083      	sub	sp, #12
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	4a0f      	ldr	r2, [pc, #60]	; (8008114 <UART_InitCallbacksToDefault+0x48>)
 80080d8:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	4a0e      	ldr	r2, [pc, #56]	; (8008118 <UART_InitCallbacksToDefault+0x4c>)
 80080de:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	4a0e      	ldr	r2, [pc, #56]	; (800811c <UART_InitCallbacksToDefault+0x50>)
 80080e4:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	4a0d      	ldr	r2, [pc, #52]	; (8008120 <UART_InitCallbacksToDefault+0x54>)
 80080ea:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	4a0d      	ldr	r2, [pc, #52]	; (8008124 <UART_InitCallbacksToDefault+0x58>)
 80080f0:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	4a0c      	ldr	r2, [pc, #48]	; (8008128 <UART_InitCallbacksToDefault+0x5c>)
 80080f6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	4a0c      	ldr	r2, [pc, #48]	; (800812c <UART_InitCallbacksToDefault+0x60>)
 80080fc:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	4a0b      	ldr	r2, [pc, #44]	; (8008130 <UART_InitCallbacksToDefault+0x64>)
 8008102:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	4a0b      	ldr	r2, [pc, #44]	; (8008134 <UART_InitCallbacksToDefault+0x68>)
 8008108:	669a      	str	r2, [r3, #104]	; 0x68

}
 800810a:	bf00      	nop
 800810c:	370c      	adds	r7, #12
 800810e:	46bd      	mov	sp, r7
 8008110:	bc80      	pop	{r7}
 8008112:	4770      	bx	lr
 8008114:	0800804b 	.word	0x0800804b
 8008118:	08008039 	.word	0x08008039
 800811c:	0800805d 	.word	0x0800805d
 8008120:	08001749 	.word	0x08001749
 8008124:	0800806f 	.word	0x0800806f
 8008128:	08008081 	.word	0x08008081
 800812c:	08008093 	.word	0x08008093
 8008130:	080080a5 	.word	0x080080a5
 8008134:	080080b7 	.word	0x080080b7

08008138 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b084      	sub	sp, #16
 800813c:	af00      	add	r7, sp, #0
 800813e:	60f8      	str	r0, [r7, #12]
 8008140:	60b9      	str	r1, [r7, #8]
 8008142:	603b      	str	r3, [r7, #0]
 8008144:	4613      	mov	r3, r2
 8008146:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008148:	e02c      	b.n	80081a4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800814a:	69bb      	ldr	r3, [r7, #24]
 800814c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008150:	d028      	beq.n	80081a4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008152:	69bb      	ldr	r3, [r7, #24]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d007      	beq.n	8008168 <UART_WaitOnFlagUntilTimeout+0x30>
 8008158:	f7f9 ffcc 	bl	80020f4 <HAL_GetTick>
 800815c:	4602      	mov	r2, r0
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	1ad3      	subs	r3, r2, r3
 8008162:	69ba      	ldr	r2, [r7, #24]
 8008164:	429a      	cmp	r2, r3
 8008166:	d21d      	bcs.n	80081a4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	68da      	ldr	r2, [r3, #12]
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008176:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	695a      	ldr	r2, [r3, #20]
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f022 0201 	bic.w	r2, r2, #1
 8008186:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	2220      	movs	r2, #32
 800818c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	2220      	movs	r2, #32
 8008194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	2200      	movs	r2, #0
 800819c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80081a0:	2303      	movs	r3, #3
 80081a2:	e00f      	b.n	80081c4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	681a      	ldr	r2, [r3, #0]
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	4013      	ands	r3, r2
 80081ae:	68ba      	ldr	r2, [r7, #8]
 80081b0:	429a      	cmp	r2, r3
 80081b2:	bf0c      	ite	eq
 80081b4:	2301      	moveq	r3, #1
 80081b6:	2300      	movne	r3, #0
 80081b8:	b2db      	uxtb	r3, r3
 80081ba:	461a      	mov	r2, r3
 80081bc:	79fb      	ldrb	r3, [r7, #7]
 80081be:	429a      	cmp	r2, r3
 80081c0:	d0c3      	beq.n	800814a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80081c2:	2300      	movs	r3, #0
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	3710      	adds	r7, #16
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd80      	pop	{r7, pc}

080081cc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80081cc:	b480      	push	{r7}
 80081ce:	b085      	sub	sp, #20
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	60f8      	str	r0, [r7, #12]
 80081d4:	60b9      	str	r1, [r7, #8]
 80081d6:	4613      	mov	r3, r2
 80081d8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	68ba      	ldr	r2, [r7, #8]
 80081de:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	88fa      	ldrh	r2, [r7, #6]
 80081e4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	88fa      	ldrh	r2, [r7, #6]
 80081ea:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	2200      	movs	r2, #0
 80081f0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	2222      	movs	r2, #34	; 0x22
 80081f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	2200      	movs	r2, #0
 80081fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	68da      	ldr	r2, [r3, #12]
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008210:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	695a      	ldr	r2, [r3, #20]
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f042 0201 	orr.w	r2, r2, #1
 8008220:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	68da      	ldr	r2, [r3, #12]
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f042 0220 	orr.w	r2, r2, #32
 8008230:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008232:	2300      	movs	r3, #0
}
 8008234:	4618      	mov	r0, r3
 8008236:	3714      	adds	r7, #20
 8008238:	46bd      	mov	sp, r7
 800823a:	bc80      	pop	{r7}
 800823c:	4770      	bx	lr

0800823e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800823e:	b480      	push	{r7}
 8008240:	b083      	sub	sp, #12
 8008242:	af00      	add	r7, sp, #0
 8008244:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	68da      	ldr	r2, [r3, #12]
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008254:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	695a      	ldr	r2, [r3, #20]
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f022 0201 	bic.w	r2, r2, #1
 8008264:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800826a:	2b01      	cmp	r3, #1
 800826c:	d107      	bne.n	800827e <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	68da      	ldr	r2, [r3, #12]
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f022 0210 	bic.w	r2, r2, #16
 800827c:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2220      	movs	r2, #32
 8008282:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2200      	movs	r2, #0
 800828a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800828c:	bf00      	nop
 800828e:	370c      	adds	r7, #12
 8008290:	46bd      	mov	sp, r7
 8008292:	bc80      	pop	{r7}
 8008294:	4770      	bx	lr

08008296 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008296:	b580      	push	{r7, lr}
 8008298:	b084      	sub	sp, #16
 800829a:	af00      	add	r7, sp, #0
 800829c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	2200      	movs	r2, #0
 80082a8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	2200      	movs	r2, #0
 80082ae:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082b4:	68f8      	ldr	r0, [r7, #12]
 80082b6:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80082b8:	bf00      	nop
 80082ba:	3710      	adds	r7, #16
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}

080082c0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80082c0:	b480      	push	{r7}
 80082c2:	b085      	sub	sp, #20
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082ce:	b2db      	uxtb	r3, r3
 80082d0:	2b21      	cmp	r3, #33	; 0x21
 80082d2:	d13e      	bne.n	8008352 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	689b      	ldr	r3, [r3, #8]
 80082d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082dc:	d114      	bne.n	8008308 <UART_Transmit_IT+0x48>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	691b      	ldr	r3, [r3, #16]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d110      	bne.n	8008308 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6a1b      	ldr	r3, [r3, #32]
 80082ea:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	881b      	ldrh	r3, [r3, #0]
 80082f0:	461a      	mov	r2, r3
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80082fa:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6a1b      	ldr	r3, [r3, #32]
 8008300:	1c9a      	adds	r2, r3, #2
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	621a      	str	r2, [r3, #32]
 8008306:	e008      	b.n	800831a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6a1b      	ldr	r3, [r3, #32]
 800830c:	1c59      	adds	r1, r3, #1
 800830e:	687a      	ldr	r2, [r7, #4]
 8008310:	6211      	str	r1, [r2, #32]
 8008312:	781a      	ldrb	r2, [r3, #0]
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800831e:	b29b      	uxth	r3, r3
 8008320:	3b01      	subs	r3, #1
 8008322:	b29b      	uxth	r3, r3
 8008324:	687a      	ldr	r2, [r7, #4]
 8008326:	4619      	mov	r1, r3
 8008328:	84d1      	strh	r1, [r2, #38]	; 0x26
 800832a:	2b00      	cmp	r3, #0
 800832c:	d10f      	bne.n	800834e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	68da      	ldr	r2, [r3, #12]
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800833c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	68da      	ldr	r2, [r3, #12]
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800834c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800834e:	2300      	movs	r3, #0
 8008350:	e000      	b.n	8008354 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008352:	2302      	movs	r3, #2
  }
}
 8008354:	4618      	mov	r0, r3
 8008356:	3714      	adds	r7, #20
 8008358:	46bd      	mov	sp, r7
 800835a:	bc80      	pop	{r7}
 800835c:	4770      	bx	lr

0800835e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800835e:	b580      	push	{r7, lr}
 8008360:	b082      	sub	sp, #8
 8008362:	af00      	add	r7, sp, #0
 8008364:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	68da      	ldr	r2, [r3, #12]
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008374:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2220      	movs	r2, #32
 800837a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008386:	2300      	movs	r3, #0
}
 8008388:	4618      	mov	r0, r3
 800838a:	3708      	adds	r7, #8
 800838c:	46bd      	mov	sp, r7
 800838e:	bd80      	pop	{r7, pc}

08008390 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b086      	sub	sp, #24
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800839e:	b2db      	uxtb	r3, r3
 80083a0:	2b22      	cmp	r3, #34	; 0x22
 80083a2:	f040 809b 	bne.w	80084dc <UART_Receive_IT+0x14c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	689b      	ldr	r3, [r3, #8]
 80083aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083ae:	d117      	bne.n	80083e0 <UART_Receive_IT+0x50>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	691b      	ldr	r3, [r3, #16]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d113      	bne.n	80083e0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80083b8:	2300      	movs	r3, #0
 80083ba:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083c0:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	685b      	ldr	r3, [r3, #4]
 80083c8:	b29b      	uxth	r3, r3
 80083ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083ce:	b29a      	uxth	r2, r3
 80083d0:	693b      	ldr	r3, [r7, #16]
 80083d2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083d8:	1c9a      	adds	r2, r3, #2
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	629a      	str	r2, [r3, #40]	; 0x28
 80083de:	e026      	b.n	800842e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083e4:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80083e6:	2300      	movs	r3, #0
 80083e8:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	689b      	ldr	r3, [r3, #8]
 80083ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083f2:	d007      	beq.n	8008404 <UART_Receive_IT+0x74>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	689b      	ldr	r3, [r3, #8]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d10a      	bne.n	8008412 <UART_Receive_IT+0x82>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	691b      	ldr	r3, [r3, #16]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d106      	bne.n	8008412 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	685b      	ldr	r3, [r3, #4]
 800840a:	b2da      	uxtb	r2, r3
 800840c:	697b      	ldr	r3, [r7, #20]
 800840e:	701a      	strb	r2, [r3, #0]
 8008410:	e008      	b.n	8008424 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	685b      	ldr	r3, [r3, #4]
 8008418:	b2db      	uxtb	r3, r3
 800841a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800841e:	b2da      	uxtb	r2, r3
 8008420:	697b      	ldr	r3, [r7, #20]
 8008422:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008428:	1c5a      	adds	r2, r3, #1
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008432:	b29b      	uxth	r3, r3
 8008434:	3b01      	subs	r3, #1
 8008436:	b29b      	uxth	r3, r3
 8008438:	687a      	ldr	r2, [r7, #4]
 800843a:	4619      	mov	r1, r3
 800843c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800843e:	2b00      	cmp	r3, #0
 8008440:	d14a      	bne.n	80084d8 <UART_Receive_IT+0x148>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	68da      	ldr	r2, [r3, #12]
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f022 0220 	bic.w	r2, r2, #32
 8008450:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	68da      	ldr	r2, [r3, #12]
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008460:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	695a      	ldr	r2, [r3, #20]
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f022 0201 	bic.w	r2, r2, #1
 8008470:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2220      	movs	r2, #32
 8008476:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800847e:	2b01      	cmp	r3, #1
 8008480:	d124      	bne.n	80084cc <UART_Receive_IT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2200      	movs	r2, #0
 8008486:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	68da      	ldr	r2, [r3, #12]
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f022 0210 	bic.w	r2, r2, #16
 8008496:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f003 0310 	and.w	r3, r3, #16
 80084a2:	2b10      	cmp	r3, #16
 80084a4:	d10a      	bne.n	80084bc <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80084a6:	2300      	movs	r3, #0
 80084a8:	60fb      	str	r3, [r7, #12]
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	60fb      	str	r3, [r7, #12]
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	685b      	ldr	r3, [r3, #4]
 80084b8:	60fb      	str	r3, [r7, #12]
 80084ba:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80084c0:	687a      	ldr	r2, [r7, #4]
 80084c2:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 80084c4:	4611      	mov	r1, r2
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	4798      	blx	r3
 80084ca:	e003      	b.n	80084d4 <UART_Receive_IT+0x144>
      else
      {
       /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	4798      	blx	r3
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80084d4:	2300      	movs	r3, #0
 80084d6:	e002      	b.n	80084de <UART_Receive_IT+0x14e>
    }
    return HAL_OK;
 80084d8:	2300      	movs	r3, #0
 80084da:	e000      	b.n	80084de <UART_Receive_IT+0x14e>
  }
  else
  {
    return HAL_BUSY;
 80084dc:	2302      	movs	r3, #2
  }
}
 80084de:	4618      	mov	r0, r3
 80084e0:	3718      	adds	r7, #24
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}
	...

080084e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b084      	sub	sp, #16
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	685b      	ldr	r3, [r3, #4]
 80084f4:	4a5f      	ldr	r2, [pc, #380]	; (8008674 <UART_SetConfig+0x18c>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d904      	bls.n	8008504 <UART_SetConfig+0x1c>
 80084fa:	f640 6153 	movw	r1, #3667	; 0xe53
 80084fe:	485e      	ldr	r0, [pc, #376]	; (8008678 <UART_SetConfig+0x190>)
 8008500:	f7f9 f948 	bl	8001794 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	68db      	ldr	r3, [r3, #12]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d009      	beq.n	8008520 <UART_SetConfig+0x38>
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	68db      	ldr	r3, [r3, #12]
 8008510:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008514:	d004      	beq.n	8008520 <UART_SetConfig+0x38>
 8008516:	f640 6154 	movw	r1, #3668	; 0xe54
 800851a:	4857      	ldr	r0, [pc, #348]	; (8008678 <UART_SetConfig+0x190>)
 800851c:	f7f9 f93a 	bl	8001794 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	691b      	ldr	r3, [r3, #16]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d00e      	beq.n	8008546 <UART_SetConfig+0x5e>
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	691b      	ldr	r3, [r3, #16]
 800852c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008530:	d009      	beq.n	8008546 <UART_SetConfig+0x5e>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	691b      	ldr	r3, [r3, #16]
 8008536:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800853a:	d004      	beq.n	8008546 <UART_SetConfig+0x5e>
 800853c:	f640 6155 	movw	r1, #3669	; 0xe55
 8008540:	484d      	ldr	r0, [pc, #308]	; (8008678 <UART_SetConfig+0x190>)
 8008542:	f7f9 f927 	bl	8001794 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	695a      	ldr	r2, [r3, #20]
 800854a:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 800854e:	4013      	ands	r3, r2
 8008550:	2b00      	cmp	r3, #0
 8008552:	d103      	bne.n	800855c <UART_SetConfig+0x74>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	695b      	ldr	r3, [r3, #20]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d104      	bne.n	8008566 <UART_SetConfig+0x7e>
 800855c:	f640 6156 	movw	r1, #3670	; 0xe56
 8008560:	4845      	ldr	r0, [pc, #276]	; (8008678 <UART_SetConfig+0x190>)
 8008562:	f7f9 f917 	bl	8001794 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	691b      	ldr	r3, [r3, #16]
 800856c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	68da      	ldr	r2, [r3, #12]
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	430a      	orrs	r2, r1
 800857a:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	689a      	ldr	r2, [r3, #8]
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	691b      	ldr	r3, [r3, #16]
 8008584:	431a      	orrs	r2, r3
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	695b      	ldr	r3, [r3, #20]
 800858a:	4313      	orrs	r3, r2
 800858c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	68db      	ldr	r3, [r3, #12]
 8008594:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8008598:	f023 030c 	bic.w	r3, r3, #12
 800859c:	687a      	ldr	r2, [r7, #4]
 800859e:	6812      	ldr	r2, [r2, #0]
 80085a0:	68b9      	ldr	r1, [r7, #8]
 80085a2:	430b      	orrs	r3, r1
 80085a4:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	695b      	ldr	r3, [r3, #20]
 80085ac:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	699a      	ldr	r2, [r3, #24]
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	430a      	orrs	r2, r1
 80085ba:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	4a2e      	ldr	r2, [pc, #184]	; (800867c <UART_SetConfig+0x194>)
 80085c2:	4293      	cmp	r3, r2
 80085c4:	d103      	bne.n	80085ce <UART_SetConfig+0xe6>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80085c6:	f7fb feaf 	bl	8004328 <HAL_RCC_GetPCLK2Freq>
 80085ca:	60f8      	str	r0, [r7, #12]
 80085cc:	e002      	b.n	80085d4 <UART_SetConfig+0xec>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80085ce:	f7fb fe97 	bl	8004300 <HAL_RCC_GetPCLK1Freq>
 80085d2:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80085d4:	68fa      	ldr	r2, [r7, #12]
 80085d6:	4613      	mov	r3, r2
 80085d8:	009b      	lsls	r3, r3, #2
 80085da:	4413      	add	r3, r2
 80085dc:	009a      	lsls	r2, r3, #2
 80085de:	441a      	add	r2, r3
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	685b      	ldr	r3, [r3, #4]
 80085e4:	009b      	lsls	r3, r3, #2
 80085e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80085ea:	4a25      	ldr	r2, [pc, #148]	; (8008680 <UART_SetConfig+0x198>)
 80085ec:	fba2 2303 	umull	r2, r3, r2, r3
 80085f0:	095b      	lsrs	r3, r3, #5
 80085f2:	0119      	lsls	r1, r3, #4
 80085f4:	68fa      	ldr	r2, [r7, #12]
 80085f6:	4613      	mov	r3, r2
 80085f8:	009b      	lsls	r3, r3, #2
 80085fa:	4413      	add	r3, r2
 80085fc:	009a      	lsls	r2, r3, #2
 80085fe:	441a      	add	r2, r3
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	685b      	ldr	r3, [r3, #4]
 8008604:	009b      	lsls	r3, r3, #2
 8008606:	fbb2 f2f3 	udiv	r2, r2, r3
 800860a:	4b1d      	ldr	r3, [pc, #116]	; (8008680 <UART_SetConfig+0x198>)
 800860c:	fba3 0302 	umull	r0, r3, r3, r2
 8008610:	095b      	lsrs	r3, r3, #5
 8008612:	2064      	movs	r0, #100	; 0x64
 8008614:	fb00 f303 	mul.w	r3, r0, r3
 8008618:	1ad3      	subs	r3, r2, r3
 800861a:	011b      	lsls	r3, r3, #4
 800861c:	3332      	adds	r3, #50	; 0x32
 800861e:	4a18      	ldr	r2, [pc, #96]	; (8008680 <UART_SetConfig+0x198>)
 8008620:	fba2 2303 	umull	r2, r3, r2, r3
 8008624:	095b      	lsrs	r3, r3, #5
 8008626:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800862a:	4419      	add	r1, r3
 800862c:	68fa      	ldr	r2, [r7, #12]
 800862e:	4613      	mov	r3, r2
 8008630:	009b      	lsls	r3, r3, #2
 8008632:	4413      	add	r3, r2
 8008634:	009a      	lsls	r2, r3, #2
 8008636:	441a      	add	r2, r3
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	685b      	ldr	r3, [r3, #4]
 800863c:	009b      	lsls	r3, r3, #2
 800863e:	fbb2 f2f3 	udiv	r2, r2, r3
 8008642:	4b0f      	ldr	r3, [pc, #60]	; (8008680 <UART_SetConfig+0x198>)
 8008644:	fba3 0302 	umull	r0, r3, r3, r2
 8008648:	095b      	lsrs	r3, r3, #5
 800864a:	2064      	movs	r0, #100	; 0x64
 800864c:	fb00 f303 	mul.w	r3, r0, r3
 8008650:	1ad3      	subs	r3, r2, r3
 8008652:	011b      	lsls	r3, r3, #4
 8008654:	3332      	adds	r3, #50	; 0x32
 8008656:	4a0a      	ldr	r2, [pc, #40]	; (8008680 <UART_SetConfig+0x198>)
 8008658:	fba2 2303 	umull	r2, r3, r2, r3
 800865c:	095b      	lsrs	r3, r3, #5
 800865e:	f003 020f 	and.w	r2, r3, #15
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	440a      	add	r2, r1
 8008668:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800866a:	bf00      	nop
 800866c:	3710      	adds	r7, #16
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}
 8008672:	bf00      	nop
 8008674:	0044aa20 	.word	0x0044aa20
 8008678:	0800c4a8 	.word	0x0800c4a8
 800867c:	40013800 	.word	0x40013800
 8008680:	51eb851f 	.word	0x51eb851f

08008684 <BAT_init>:
static ADC_HandleTypeDef *g_BAT_adcHandle;
static RTC_HandleTypeDef *g_BAT_rtcHandle;
static RTC_TimeTypeDef    g_BAT_lastReadTime;

void BAT_init(ADC_HandleTypeDef *p_adcHandle, RTC_HandleTypeDef *p_rtcHandle)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b084      	sub	sp, #16
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
 800868c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef l_halReturnCode;
  RTC_TimeTypeDef   l_time;
  RTC_DateTypeDef   l_date;

  LOG_info("Initializing battery check");
 800868e:	491e      	ldr	r1, [pc, #120]	; (8008708 <BAT_init+0x84>)
 8008690:	2001      	movs	r0, #1
 8008692:	f001 fbc5 	bl	8009e20 <LOG_log>

  g_BAT_adcHandle = p_adcHandle;
 8008696:	4a1d      	ldr	r2, [pc, #116]	; (800870c <BAT_init+0x88>)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6013      	str	r3, [r2, #0]
  g_BAT_rtcHandle = p_rtcHandle;
 800869c:	4a1c      	ldr	r2, [pc, #112]	; (8008710 <BAT_init+0x8c>)
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	6013      	str	r3, [r2, #0]

  l_halReturnCode = HAL_RTC_GetTime(g_BAT_rtcHandle, &l_time, RTC_FORMAT_BCD);
 80086a2:	4b1b      	ldr	r3, [pc, #108]	; (8008710 <BAT_init+0x8c>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f107 010c 	add.w	r1, r7, #12
 80086aa:	2201      	movs	r2, #1
 80086ac:	4618      	mov	r0, r3
 80086ae:	f7fc fa39 	bl	8004b24 <HAL_RTC_GetTime>
 80086b2:	4603      	mov	r3, r0
 80086b4:	73fb      	strb	r3, [r7, #15]

  if (l_halReturnCode != HAL_OK)
 80086b6:	7bfb      	ldrb	r3, [r7, #15]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d005      	beq.n	80086c8 <BAT_init+0x44>
  {
    LOG_error("HAL_RTC_GetTime() returned an error code: %d", l_halReturnCode);
 80086bc:	7bfb      	ldrb	r3, [r7, #15]
 80086be:	461a      	mov	r2, r3
 80086c0:	4914      	ldr	r1, [pc, #80]	; (8008714 <BAT_init+0x90>)
 80086c2:	2003      	movs	r0, #3
 80086c4:	f001 fbac 	bl	8009e20 <LOG_log>
  else
  {
    ; /* Nothing to to */
  }

  l_halReturnCode = HAL_RTC_GetDate(g_BAT_rtcHandle, &l_date, RTC_FORMAT_BCD);
 80086c8:	4b11      	ldr	r3, [pc, #68]	; (8008710 <BAT_init+0x8c>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f107 0108 	add.w	r1, r7, #8
 80086d0:	2201      	movs	r2, #1
 80086d2:	4618      	mov	r0, r3
 80086d4:	f7fc fc2a 	bl	8004f2c <HAL_RTC_GetDate>
 80086d8:	4603      	mov	r3, r0
 80086da:	73fb      	strb	r3, [r7, #15]

  if (l_halReturnCode != HAL_OK)
 80086dc:	7bfb      	ldrb	r3, [r7, #15]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d005      	beq.n	80086ee <BAT_init+0x6a>
  {
    LOG_error("HAL_RTC_GetDate() returned an error code: %d", l_halReturnCode);
 80086e2:	7bfb      	ldrb	r3, [r7, #15]
 80086e4:	461a      	mov	r2, r3
 80086e6:	490c      	ldr	r1, [pc, #48]	; (8008718 <BAT_init+0x94>)
 80086e8:	2003      	movs	r0, #3
 80086ea:	f001 fb99 	bl	8009e20 <LOG_log>
  else
  {
    ; /* Nothing to to */
  }

  g_BAT_lastReadTime = l_time;
 80086ee:	4b0b      	ldr	r3, [pc, #44]	; (800871c <BAT_init+0x98>)
 80086f0:	f107 020c 	add.w	r2, r7, #12
 80086f4:	6812      	ldr	r2, [r2, #0]
 80086f6:	4611      	mov	r1, r2
 80086f8:	8019      	strh	r1, [r3, #0]
 80086fa:	3302      	adds	r3, #2
 80086fc:	0c12      	lsrs	r2, r2, #16
 80086fe:	701a      	strb	r2, [r3, #0]

  return;
 8008700:	bf00      	nop
}
 8008702:	3710      	adds	r7, #16
 8008704:	46bd      	mov	sp, r7
 8008706:	bd80      	pop	{r7, pc}
 8008708:	0800c4e4 	.word	0x0800c4e4
 800870c:	200000b0 	.word	0x200000b0
 8008710:	200000b4 	.word	0x200000b4
 8008714:	0800c500 	.word	0x0800c500
 8008718:	0800c530 	.word	0x0800c530
 800871c:	200000b8 	.word	0x200000b8

08008720 <BAT_update>:

void BAT_update(uint32_t *p_voltageInMv)
{
 8008720:	b590      	push	{r4, r7, lr}
 8008722:	b089      	sub	sp, #36	; 0x24
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
  RTC_TimeTypeDef   l_time;
  RTC_DateTypeDef   l_date;
  uint32_t          l_adcRawData;
  float             l_voltageInV;

  l_halReturnCode = HAL_RTC_GetTime(g_BAT_rtcHandle, &l_time, RTC_FORMAT_BCD);
 8008728:	4b48      	ldr	r3, [pc, #288]	; (800884c <BAT_update+0x12c>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f107 0110 	add.w	r1, r7, #16
 8008730:	2201      	movs	r2, #1
 8008732:	4618      	mov	r0, r3
 8008734:	f7fc f9f6 	bl	8004b24 <HAL_RTC_GetTime>
 8008738:	4603      	mov	r3, r0
 800873a:	77fb      	strb	r3, [r7, #31]

  if (l_halReturnCode != HAL_OK)
 800873c:	7ffb      	ldrb	r3, [r7, #31]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d005      	beq.n	800874e <BAT_update+0x2e>
  {
    LOG_error("HAL_RTC_GetTime() returned an error code: %d", l_halReturnCode);
 8008742:	7ffb      	ldrb	r3, [r7, #31]
 8008744:	461a      	mov	r2, r3
 8008746:	4942      	ldr	r1, [pc, #264]	; (8008850 <BAT_update+0x130>)
 8008748:	2003      	movs	r0, #3
 800874a:	f001 fb69 	bl	8009e20 <LOG_log>
  else
  {
    ; /* Nothing to to */
  }

  l_halReturnCode = HAL_RTC_GetDate(g_BAT_rtcHandle, &l_date, RTC_FORMAT_BCD);
 800874e:	4b3f      	ldr	r3, [pc, #252]	; (800884c <BAT_update+0x12c>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f107 010c 	add.w	r1, r7, #12
 8008756:	2201      	movs	r2, #1
 8008758:	4618      	mov	r0, r3
 800875a:	f7fc fbe7 	bl	8004f2c <HAL_RTC_GetDate>
 800875e:	4603      	mov	r3, r0
 8008760:	77fb      	strb	r3, [r7, #31]

  if (l_halReturnCode != HAL_OK)
 8008762:	7ffb      	ldrb	r3, [r7, #31]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d005      	beq.n	8008774 <BAT_update+0x54>
  {
    LOG_error("HAL_RTC_GetDate() returned an error code: %d", l_halReturnCode);
 8008768:	7ffb      	ldrb	r3, [r7, #31]
 800876a:	461a      	mov	r2, r3
 800876c:	4939      	ldr	r1, [pc, #228]	; (8008854 <BAT_update+0x134>)
 800876e:	2003      	movs	r0, #3
 8008770:	f001 fb56 	bl	8009e20 <LOG_log>
  else
  {
    ; /* Nothing to to */
  }

  if (UTI_turnRtcTimeToSeconds(&l_time) - UTI_turnRtcTimeToSeconds(&g_BAT_lastReadTime) >= BAT_POLLING_PERIOD_IN_S)
 8008774:	f107 0310 	add.w	r3, r7, #16
 8008778:	4618      	mov	r0, r3
 800877a:	f001 ffb8 	bl	800a6ee <UTI_turnRtcTimeToSeconds>
 800877e:	4604      	mov	r4, r0
 8008780:	4835      	ldr	r0, [pc, #212]	; (8008858 <BAT_update+0x138>)
 8008782:	f001 ffb4 	bl	800a6ee <UTI_turnRtcTimeToSeconds>
 8008786:	4603      	mov	r3, r0
 8008788:	1ae3      	subs	r3, r4, r3
 800878a:	2b09      	cmp	r3, #9
 800878c:	d959      	bls.n	8008842 <BAT_update+0x122>
  {
    g_BAT_lastReadTime = l_time;
 800878e:	4b32      	ldr	r3, [pc, #200]	; (8008858 <BAT_update+0x138>)
 8008790:	f107 0210 	add.w	r2, r7, #16
 8008794:	6812      	ldr	r2, [r2, #0]
 8008796:	4611      	mov	r1, r2
 8008798:	8019      	strh	r1, [r3, #0]
 800879a:	3302      	adds	r3, #2
 800879c:	0c12      	lsrs	r2, r2, #16
 800879e:	701a      	strb	r2, [r3, #0]

    l_halReturnCode = HAL_ADC_Start(g_BAT_adcHandle);
 80087a0:	4b2e      	ldr	r3, [pc, #184]	; (800885c <BAT_update+0x13c>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4618      	mov	r0, r3
 80087a6:	f7f9 fe51 	bl	800244c <HAL_ADC_Start>
 80087aa:	4603      	mov	r3, r0
 80087ac:	77fb      	strb	r3, [r7, #31]

    if (l_halReturnCode != HAL_OK)
 80087ae:	7ffb      	ldrb	r3, [r7, #31]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d005      	beq.n	80087c0 <BAT_update+0xa0>
    {
      LOG_error("HAL_ADC_Start() returned an error code: %d", l_halReturnCode);
 80087b4:	7ffb      	ldrb	r3, [r7, #31]
 80087b6:	461a      	mov	r2, r3
 80087b8:	4929      	ldr	r1, [pc, #164]	; (8008860 <BAT_update+0x140>)
 80087ba:	2003      	movs	r0, #3
 80087bc:	f001 fb30 	bl	8009e20 <LOG_log>
    else
    {
      ; /* Nothing to to */
    }

    l_halReturnCode = HAL_ADC_PollForConversion(g_BAT_adcHandle, HAL_MAX_DELAY);
 80087c0:	4b26      	ldr	r3, [pc, #152]	; (800885c <BAT_update+0x13c>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f04f 31ff 	mov.w	r1, #4294967295
 80087c8:	4618      	mov	r0, r3
 80087ca:	f7f9 ff05 	bl	80025d8 <HAL_ADC_PollForConversion>
 80087ce:	4603      	mov	r3, r0
 80087d0:	77fb      	strb	r3, [r7, #31]

    if (l_halReturnCode != HAL_OK)
 80087d2:	7ffb      	ldrb	r3, [r7, #31]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d005      	beq.n	80087e4 <BAT_update+0xc4>
    {
      LOG_error("HAL_ADC_PollForConversion() returned an error code: %d", l_halReturnCode);
 80087d8:	7ffb      	ldrb	r3, [r7, #31]
 80087da:	461a      	mov	r2, r3
 80087dc:	4921      	ldr	r1, [pc, #132]	; (8008864 <BAT_update+0x144>)
 80087de:	2003      	movs	r0, #3
 80087e0:	f001 fb1e 	bl	8009e20 <LOG_log>
    else
    {
      ; /* Nothing to to */
    }

    l_adcRawData = HAL_ADC_GetValue(g_BAT_adcHandle);
 80087e4:	4b1d      	ldr	r3, [pc, #116]	; (800885c <BAT_update+0x13c>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4618      	mov	r0, r3
 80087ea:	f7fa f817 	bl	800281c <HAL_ADC_GetValue>
 80087ee:	61b8      	str	r0, [r7, #24]

    /* Apply conversion based on STM32 reference voltage & resolution */
    l_voltageInV  = (l_adcRawData * 3.30f ) / 4096.0f;
 80087f0:	69b8      	ldr	r0, [r7, #24]
 80087f2:	f7f7 fdd5 	bl	80003a0 <__aeabi_ui2f>
 80087f6:	4603      	mov	r3, r0
 80087f8:	491b      	ldr	r1, [pc, #108]	; (8008868 <BAT_update+0x148>)
 80087fa:	4618      	mov	r0, r3
 80087fc:	f7f7 fe28 	bl	8000450 <__aeabi_fmul>
 8008800:	4603      	mov	r3, r0
 8008802:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 8008806:	4618      	mov	r0, r3
 8008808:	f7f7 fed6 	bl	80005b8 <__aeabi_fdiv>
 800880c:	4603      	mov	r3, r0
 800880e:	617b      	str	r3, [r7, #20]

    /* Consider voltage divider used between the battery & the ADC input */
    l_voltageInV *= 11.0f;
 8008810:	4916      	ldr	r1, [pc, #88]	; (800886c <BAT_update+0x14c>)
 8008812:	6978      	ldr	r0, [r7, #20]
 8008814:	f7f7 fe1c 	bl	8000450 <__aeabi_fmul>
 8008818:	4603      	mov	r3, r0
 800881a:	617b      	str	r3, [r7, #20]

    *p_voltageInMv = (uint32_t)(l_voltageInV * 1000.0f);
 800881c:	4914      	ldr	r1, [pc, #80]	; (8008870 <BAT_update+0x150>)
 800881e:	6978      	ldr	r0, [r7, #20]
 8008820:	f7f7 fe16 	bl	8000450 <__aeabi_fmul>
 8008824:	4603      	mov	r3, r0
 8008826:	4618      	mov	r0, r3
 8008828:	f7f7 ff88 	bl	800073c <__aeabi_f2uiz>
 800882c:	4602      	mov	r2, r0
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	601a      	str	r2, [r3, #0]

    LOG_debug("Battery level: %u mV", *p_voltageInMv);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	461a      	mov	r2, r3
 8008838:	490e      	ldr	r1, [pc, #56]	; (8008874 <BAT_update+0x154>)
 800883a:	2000      	movs	r0, #0
 800883c:	f001 faf0 	bl	8009e20 <LOG_log>
  else
  {
    ; /* Nothing to do */
  }

  return;
 8008840:	bf00      	nop
 8008842:	bf00      	nop
}
 8008844:	3724      	adds	r7, #36	; 0x24
 8008846:	46bd      	mov	sp, r7
 8008848:	bd90      	pop	{r4, r7, pc}
 800884a:	bf00      	nop
 800884c:	200000b4 	.word	0x200000b4
 8008850:	0800c500 	.word	0x0800c500
 8008854:	0800c530 	.word	0x0800c530
 8008858:	200000b8 	.word	0x200000b8
 800885c:	200000b0 	.word	0x200000b0
 8008860:	0800c560 	.word	0x0800c560
 8008864:	0800c58c 	.word	0x0800c58c
 8008868:	40533333 	.word	0x40533333
 800886c:	41300000 	.word	0x41300000
 8008870:	447a0000 	.word	0x447a0000
 8008874:	0800c5c4 	.word	0x0800c5c4

08008878 <BLU_sendCommand>:
static void         BLU_sendCommand(uint8_t  p_command);
static void         BLU_readData   (uint8_t *p_buffer );
static T_BLU_BUTTON BLU_getButton  (uint8_t *p_buffer );

static void BLU_sendCommand(uint8_t p_command)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b084      	sub	sp, #16
 800887c:	af00      	add	r7, sp, #0
 800887e:	4603      	mov	r3, r0
 8008880:	71fb      	strb	r3, [r7, #7]
  volatile uint16_t l_bitValue;

  for (l_bitValue = 0x01; l_bitValue < 0x0100; l_bitValue <<= 1)
 8008882:	2301      	movs	r3, #1
 8008884:	81fb      	strh	r3, [r7, #14]
 8008886:	e030      	b.n	80088ea <BLU_sendCommand+0x72>
  {
    if ((l_bitValue & p_command) != 0)
 8008888:	89fb      	ldrh	r3, [r7, #14]
 800888a:	b29b      	uxth	r3, r3
 800888c:	461a      	mov	r2, r3
 800888e:	79fb      	ldrb	r3, [r7, #7]
 8008890:	4013      	ands	r3, r2
 8008892:	2b00      	cmp	r3, #0
 8008894:	d006      	beq.n	80088a4 <BLU_sendCommand+0x2c>
    {
      SET_BIT(GPIOC->ODR, BLUETOOTH_SPI_CMD_Pin);
 8008896:	4b1a      	ldr	r3, [pc, #104]	; (8008900 <BLU_sendCommand+0x88>)
 8008898:	68db      	ldr	r3, [r3, #12]
 800889a:	4a19      	ldr	r2, [pc, #100]	; (8008900 <BLU_sendCommand+0x88>)
 800889c:	f043 0302 	orr.w	r3, r3, #2
 80088a0:	60d3      	str	r3, [r2, #12]
 80088a2:	e005      	b.n	80088b0 <BLU_sendCommand+0x38>
    }
    else
    {
      CLEAR_BIT(GPIOC->ODR, BLUETOOTH_SPI_CMD_Pin);
 80088a4:	4b16      	ldr	r3, [pc, #88]	; (8008900 <BLU_sendCommand+0x88>)
 80088a6:	68db      	ldr	r3, [r3, #12]
 80088a8:	4a15      	ldr	r2, [pc, #84]	; (8008900 <BLU_sendCommand+0x88>)
 80088aa:	f023 0302 	bic.w	r3, r3, #2
 80088ae:	60d3      	str	r3, [r2, #12]
    }

    SET_BIT(GPIOA->ODR  , BLUETOOTH_SPI_CLK_Pin);
 80088b0:	4b14      	ldr	r3, [pc, #80]	; (8008904 <BLU_sendCommand+0x8c>)
 80088b2:	68db      	ldr	r3, [r3, #12]
 80088b4:	4a13      	ldr	r2, [pc, #76]	; (8008904 <BLU_sendCommand+0x8c>)
 80088b6:	f043 0310 	orr.w	r3, r3, #16
 80088ba:	60d3      	str	r3, [r2, #12]
    UTI_delayUs(5);
 80088bc:	2005      	movs	r0, #5
 80088be:	f001 fed5 	bl	800a66c <UTI_delayUs>
    CLEAR_BIT(GPIOA->ODR, BLUETOOTH_SPI_CLK_Pin);
 80088c2:	4b10      	ldr	r3, [pc, #64]	; (8008904 <BLU_sendCommand+0x8c>)
 80088c4:	68db      	ldr	r3, [r3, #12]
 80088c6:	4a0f      	ldr	r2, [pc, #60]	; (8008904 <BLU_sendCommand+0x8c>)
 80088c8:	f023 0310 	bic.w	r3, r3, #16
 80088cc:	60d3      	str	r3, [r2, #12]
    UTI_delayUs(5);
 80088ce:	2005      	movs	r0, #5
 80088d0:	f001 fecc 	bl	800a66c <UTI_delayUs>
    SET_BIT(GPIOA->ODR  , BLUETOOTH_SPI_CLK_Pin);
 80088d4:	4b0b      	ldr	r3, [pc, #44]	; (8008904 <BLU_sendCommand+0x8c>)
 80088d6:	68db      	ldr	r3, [r3, #12]
 80088d8:	4a0a      	ldr	r2, [pc, #40]	; (8008904 <BLU_sendCommand+0x8c>)
 80088da:	f043 0310 	orr.w	r3, r3, #16
 80088de:	60d3      	str	r3, [r2, #12]
  for (l_bitValue = 0x01; l_bitValue < 0x0100; l_bitValue <<= 1)
 80088e0:	89fb      	ldrh	r3, [r7, #14]
 80088e2:	b29b      	uxth	r3, r3
 80088e4:	005b      	lsls	r3, r3, #1
 80088e6:	b29b      	uxth	r3, r3
 80088e8:	81fb      	strh	r3, [r7, #14]
 80088ea:	89fb      	ldrh	r3, [r7, #14]
 80088ec:	b29b      	uxth	r3, r3
 80088ee:	2bff      	cmp	r3, #255	; 0xff
 80088f0:	d9ca      	bls.n	8008888 <BLU_sendCommand+0x10>
  }
  UTI_delayUs(16);
 80088f2:	2010      	movs	r0, #16
 80088f4:	f001 feba 	bl	800a66c <UTI_delayUs>

  return;
 80088f8:	bf00      	nop
}
 80088fa:	3710      	adds	r7, #16
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bd80      	pop	{r7, pc}
 8008900:	40011000 	.word	0x40011000
 8008904:	40010800 	.word	0x40010800

08008908 <BLU_readData>:

static void BLU_readData(uint8_t *p_buffer)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b084      	sub	sp, #16
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
  volatile uint8_t  l_index;
  volatile uint16_t l_bitValue;

  /* Reset buffer */
  for (l_index = 0; l_index < BLU_DATA_BUFFER_LENGTH; l_index++)
 8008910:	2300      	movs	r3, #0
 8008912:	73fb      	strb	r3, [r7, #15]
 8008914:	e00b      	b.n	800892e <BLU_readData+0x26>
  {
    p_buffer[l_index] = 0x00;
 8008916:	7bfb      	ldrb	r3, [r7, #15]
 8008918:	b2db      	uxtb	r3, r3
 800891a:	461a      	mov	r2, r3
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	4413      	add	r3, r2
 8008920:	2200      	movs	r2, #0
 8008922:	701a      	strb	r2, [r3, #0]
  for (l_index = 0; l_index < BLU_DATA_BUFFER_LENGTH; l_index++)
 8008924:	7bfb      	ldrb	r3, [r7, #15]
 8008926:	b2db      	uxtb	r3, r3
 8008928:	3301      	adds	r3, #1
 800892a:	b2db      	uxtb	r3, r3
 800892c:	73fb      	strb	r3, [r7, #15]
 800892e:	7bfb      	ldrb	r3, [r7, #15]
 8008930:	b2db      	uxtb	r3, r3
 8008932:	2b06      	cmp	r3, #6
 8008934:	d9ef      	bls.n	8008916 <BLU_readData+0xe>
  }

  CLEAR_BIT(GPIOC->ODR, BLUETOOTH_SPI_CS_Pin);
 8008936:	4b2e      	ldr	r3, [pc, #184]	; (80089f0 <BLU_readData+0xe8>)
 8008938:	68db      	ldr	r3, [r3, #12]
 800893a:	4a2d      	ldr	r2, [pc, #180]	; (80089f0 <BLU_readData+0xe8>)
 800893c:	f023 0308 	bic.w	r3, r3, #8
 8008940:	60d3      	str	r3, [r2, #12]

  BLU_sendCommand(0x01);
 8008942:	2001      	movs	r0, #1
 8008944:	f7ff ff98 	bl	8008878 <BLU_sendCommand>
  BLU_sendCommand(0x42);
 8008948:	2042      	movs	r0, #66	; 0x42
 800894a:	f7ff ff95 	bl	8008878 <BLU_sendCommand>

  for (l_index = 0; l_index < BLU_DATA_BUFFER_LENGTH; l_index++)
 800894e:	2300      	movs	r3, #0
 8008950:	73fb      	strb	r3, [r7, #15]
 8008952:	e03f      	b.n	80089d4 <BLU_readData+0xcc>
  {
    for (l_bitValue = 0x01; l_bitValue < 0x100; l_bitValue <<= 1)
 8008954:	2301      	movs	r3, #1
 8008956:	81bb      	strh	r3, [r7, #12]
 8008958:	e030      	b.n	80089bc <BLU_readData+0xb4>
    {
      SET_BIT(GPIOA->ODR  , BLUETOOTH_SPI_CLK_Pin);
 800895a:	4b26      	ldr	r3, [pc, #152]	; (80089f4 <BLU_readData+0xec>)
 800895c:	68db      	ldr	r3, [r3, #12]
 800895e:	4a25      	ldr	r2, [pc, #148]	; (80089f4 <BLU_readData+0xec>)
 8008960:	f043 0310 	orr.w	r3, r3, #16
 8008964:	60d3      	str	r3, [r2, #12]
      UTI_delayUs(5);
 8008966:	2005      	movs	r0, #5
 8008968:	f001 fe80 	bl	800a66c <UTI_delayUs>
      CLEAR_BIT(GPIOA->ODR, BLUETOOTH_SPI_CLK_Pin);
 800896c:	4b21      	ldr	r3, [pc, #132]	; (80089f4 <BLU_readData+0xec>)
 800896e:	68db      	ldr	r3, [r3, #12]
 8008970:	4a20      	ldr	r2, [pc, #128]	; (80089f4 <BLU_readData+0xec>)
 8008972:	f023 0310 	bic.w	r3, r3, #16
 8008976:	60d3      	str	r3, [r2, #12]
      UTI_delayUs(5);
 8008978:	2005      	movs	r0, #5
 800897a:	f001 fe77 	bl	800a66c <UTI_delayUs>
      SET_BIT(GPIOA->ODR  , BLUETOOTH_SPI_CLK_Pin);
 800897e:	4b1d      	ldr	r3, [pc, #116]	; (80089f4 <BLU_readData+0xec>)
 8008980:	68db      	ldr	r3, [r3, #12]
 8008982:	4a1c      	ldr	r2, [pc, #112]	; (80089f4 <BLU_readData+0xec>)
 8008984:	f043 0310 	orr.w	r3, r3, #16
 8008988:	60d3      	str	r3, [r2, #12]

      if (READ_BIT(GPIOC->IDR, BLUETOOTH_SPI_DAT_Pin) != GPIO_PIN_RESET)
 800898a:	4b19      	ldr	r3, [pc, #100]	; (80089f0 <BLU_readData+0xe8>)
 800898c:	689b      	ldr	r3, [r3, #8]
 800898e:	f003 0304 	and.w	r3, r3, #4
 8008992:	2b00      	cmp	r3, #0
 8008994:	d00d      	beq.n	80089b2 <BLU_readData+0xaa>
      {
        p_buffer[l_index] |= l_bitValue;
 8008996:	89bb      	ldrh	r3, [r7, #12]
 8008998:	b29a      	uxth	r2, r3
 800899a:	7bfb      	ldrb	r3, [r7, #15]
 800899c:	b2d8      	uxtb	r0, r3
 800899e:	4601      	mov	r1, r0
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	440b      	add	r3, r1
 80089a4:	7819      	ldrb	r1, [r3, #0]
 80089a6:	b2d2      	uxtb	r2, r2
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	4403      	add	r3, r0
 80089ac:	430a      	orrs	r2, r1
 80089ae:	b2d2      	uxtb	r2, r2
 80089b0:	701a      	strb	r2, [r3, #0]
    for (l_bitValue = 0x01; l_bitValue < 0x100; l_bitValue <<= 1)
 80089b2:	89bb      	ldrh	r3, [r7, #12]
 80089b4:	b29b      	uxth	r3, r3
 80089b6:	005b      	lsls	r3, r3, #1
 80089b8:	b29b      	uxth	r3, r3
 80089ba:	81bb      	strh	r3, [r7, #12]
 80089bc:	89bb      	ldrh	r3, [r7, #12]
 80089be:	b29b      	uxth	r3, r3
 80089c0:	2bff      	cmp	r3, #255	; 0xff
 80089c2:	d9ca      	bls.n	800895a <BLU_readData+0x52>
      else
      {
        ; /* Nothing to do */
      }
    }
      UTI_delayUs(16);
 80089c4:	2010      	movs	r0, #16
 80089c6:	f001 fe51 	bl	800a66c <UTI_delayUs>
  for (l_index = 0; l_index < BLU_DATA_BUFFER_LENGTH; l_index++)
 80089ca:	7bfb      	ldrb	r3, [r7, #15]
 80089cc:	b2db      	uxtb	r3, r3
 80089ce:	3301      	adds	r3, #1
 80089d0:	b2db      	uxtb	r3, r3
 80089d2:	73fb      	strb	r3, [r7, #15]
 80089d4:	7bfb      	ldrb	r3, [r7, #15]
 80089d6:	b2db      	uxtb	r3, r3
 80089d8:	2b06      	cmp	r3, #6
 80089da:	d9bb      	bls.n	8008954 <BLU_readData+0x4c>
  }

  SET_BIT(GPIOC->ODR, BLUETOOTH_SPI_CS_Pin);
 80089dc:	4b04      	ldr	r3, [pc, #16]	; (80089f0 <BLU_readData+0xe8>)
 80089de:	68db      	ldr	r3, [r3, #12]
 80089e0:	4a03      	ldr	r2, [pc, #12]	; (80089f0 <BLU_readData+0xe8>)
 80089e2:	f043 0308 	orr.w	r3, r3, #8
 80089e6:	60d3      	str	r3, [r2, #12]

  return;
 80089e8:	bf00      	nop
}
 80089ea:	3710      	adds	r7, #16
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bd80      	pop	{r7, pc}
 80089f0:	40011000 	.word	0x40011000
 80089f4:	40010800 	.word	0x40010800

080089f8 <BLU_getButton>:

static T_BLU_BUTTON BLU_getButton(uint8_t *p_buffer)
{
 80089f8:	b480      	push	{r7}
 80089fa:	b085      	sub	sp, #20
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
  uint16_t l_buttonRawValue;
  uint8_t  l_index;

  l_buttonRawValue = (p_buffer[BLU_BUTTON_HIGH_OFFSET] << 8) | p_buffer[BLU_BUTTON_LOW_OFFSET];
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	3302      	adds	r3, #2
 8008a04:	781b      	ldrb	r3, [r3, #0]
 8008a06:	021b      	lsls	r3, r3, #8
 8008a08:	b21a      	sxth	r2, r3
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	3301      	adds	r3, #1
 8008a0e:	781b      	ldrb	r3, [r3, #0]
 8008a10:	b21b      	sxth	r3, r3
 8008a12:	4313      	orrs	r3, r2
 8008a14:	b21b      	sxth	r3, r3
 8008a16:	81bb      	strh	r3, [r7, #12]

  /* Ignore BLU_BUTTON_NONE value as it is not directly coded in raw data */
  for (l_index = BLU_BUTTON_SELECT; l_index < BLU_BUTTON_COUNT_VALUE; l_index++)
 8008a18:	2301      	movs	r3, #1
 8008a1a:	73fb      	strb	r3, [r7, #15]
 8008a1c:	e00d      	b.n	8008a3a <BLU_getButton+0x42>
  {
    /* Stop decoding button data on 1st match (do not deal with multiple presses case) */
    if ((l_buttonRawValue & (1 << (l_index - 1))) == 0)
 8008a1e:	89ba      	ldrh	r2, [r7, #12]
 8008a20:	7bfb      	ldrb	r3, [r7, #15]
 8008a22:	3b01      	subs	r3, #1
 8008a24:	fa42 f303 	asr.w	r3, r2, r3
 8008a28:	f003 0301 	and.w	r3, r3, #1
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d101      	bne.n	8008a34 <BLU_getButton+0x3c>
    {
      return l_index;
 8008a30:	7bfb      	ldrb	r3, [r7, #15]
 8008a32:	e006      	b.n	8008a42 <BLU_getButton+0x4a>
  for (l_index = BLU_BUTTON_SELECT; l_index < BLU_BUTTON_COUNT_VALUE; l_index++)
 8008a34:	7bfb      	ldrb	r3, [r7, #15]
 8008a36:	3301      	adds	r3, #1
 8008a38:	73fb      	strb	r3, [r7, #15]
 8008a3a:	7bfb      	ldrb	r3, [r7, #15]
 8008a3c:	2b10      	cmp	r3, #16
 8008a3e:	d9ee      	bls.n	8008a1e <BLU_getButton+0x26>
    {
      ; /* Nothing to do */
    }
  }

  return BLU_BUTTON_NONE;
 8008a40:	2300      	movs	r3, #0
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	3714      	adds	r7, #20
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bc80      	pop	{r7}
 8008a4a:	4770      	bx	lr

08008a4c <BLU_init>:

void BLU_init(void)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	af00      	add	r7, sp, #0
  LOG_info("Initializing bluetooth control");
 8008a50:	4904      	ldr	r1, [pc, #16]	; (8008a64 <BLU_init+0x18>)
 8008a52:	2001      	movs	r0, #1
 8008a54:	f001 f9e4 	bl	8009e20 <LOG_log>

  BLU_initData(&g_BLU_lastData);
 8008a58:	4803      	ldr	r0, [pc, #12]	; (8008a68 <BLU_init+0x1c>)
 8008a5a:	f000 f807 	bl	8008a6c <BLU_initData>

  return;
 8008a5e:	bf00      	nop
}
 8008a60:	bd80      	pop	{r7, pc}
 8008a62:	bf00      	nop
 8008a64:	0800c5dc 	.word	0x0800c5dc
 8008a68:	200000bc 	.word	0x200000bc

08008a6c <BLU_initData>:

void BLU_initData(T_BLU_Data *p_data)
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b083      	sub	sp, #12
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
  p_data->leftX  = BLU_DATA_DEFAUT_DIRECTION;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2280      	movs	r2, #128	; 0x80
 8008a78:	601a      	str	r2, [r3, #0]
  p_data->leftY  = BLU_DATA_DEFAUT_DIRECTION;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2280      	movs	r2, #128	; 0x80
 8008a7e:	605a      	str	r2, [r3, #4]
  p_data->rightX = BLU_DATA_DEFAUT_DIRECTION;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2280      	movs	r2, #128	; 0x80
 8008a84:	609a      	str	r2, [r3, #8]
  p_data->rightY = BLU_DATA_DEFAUT_DIRECTION;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	2280      	movs	r2, #128	; 0x80
 8008a8a:	60da      	str	r2, [r3, #12]
  p_data->button = BLU_BUTTON_NONE;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2200      	movs	r2, #0
 8008a90:	741a      	strb	r2, [r3, #16]

  return;
 8008a92:	bf00      	nop
}
 8008a94:	370c      	adds	r7, #12
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bc80      	pop	{r7}
 8008a9a:	4770      	bx	lr

08008a9c <BLU_receiveData>:

void BLU_receiveData(T_BLU_Data *p_data)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b08c      	sub	sp, #48	; 0x30
 8008aa0:	af02      	add	r7, sp, #8
 8008aa2:	6078      	str	r0, [r7, #4]
  uint8_t    l_buffer[BLU_DATA_BUFFER_LENGTH];
  T_BLU_Data l_readData;

  /* Read raw data */
  BLU_readData(l_buffer);
 8008aa4:	f107 0320 	add.w	r3, r7, #32
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	f7ff ff2d 	bl	8008908 <BLU_readData>

  /* Start and decode raw data */
  l_readData.leftX  = l_buffer[BLU_LEFT_X_OFFSET ];
 8008aae:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8008ab2:	60fb      	str	r3, [r7, #12]
  l_readData.leftY  = l_buffer[BLU_LEFT_Y_OFFSET ];
 8008ab4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008ab8:	613b      	str	r3, [r7, #16]
  l_readData.rightX = l_buffer[BLU_RIGHT_X_OFFSET];
 8008aba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008abe:	617b      	str	r3, [r7, #20]
  l_readData.rightY = l_buffer[BLU_RIGHT_Y_OFFSET];
 8008ac0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008ac4:	61bb      	str	r3, [r7, #24]
  l_readData.button = BLU_getButton(l_buffer);
 8008ac6:	f107 0320 	add.w	r3, r7, #32
 8008aca:	4618      	mov	r0, r3
 8008acc:	f7ff ff94 	bl	80089f8 <BLU_getButton>
 8008ad0:	4603      	mov	r3, r0
 8008ad2:	773b      	strb	r3, [r7, #28]

  /* Deal with startup condition, while read data is not valid yet */
  if  ((l_readData.leftX == 255 && l_readData.leftY == 255 && l_readData.rightX == 255 && l_readData.rightY ==255)
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	2bff      	cmp	r3, #255	; 0xff
 8008ad8:	d108      	bne.n	8008aec <BLU_receiveData+0x50>
 8008ada:	693b      	ldr	r3, [r7, #16]
 8008adc:	2bff      	cmp	r3, #255	; 0xff
 8008ade:	d105      	bne.n	8008aec <BLU_receiveData+0x50>
 8008ae0:	697b      	ldr	r3, [r7, #20]
 8008ae2:	2bff      	cmp	r3, #255	; 0xff
 8008ae4:	d102      	bne.n	8008aec <BLU_receiveData+0x50>
 8008ae6:	69bb      	ldr	r3, [r7, #24]
 8008ae8:	2bff      	cmp	r3, #255	; 0xff
 8008aea:	d00b      	beq.n	8008b04 <BLU_receiveData+0x68>
    || (l_readData.leftX ==   0 && l_readData.leftY ==   0 && l_readData.rightX ==   0 && l_readData.rightY ==  0))
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d10e      	bne.n	8008b10 <BLU_receiveData+0x74>
 8008af2:	693b      	ldr	r3, [r7, #16]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d10b      	bne.n	8008b10 <BLU_receiveData+0x74>
 8008af8:	697b      	ldr	r3, [r7, #20]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d108      	bne.n	8008b10 <BLU_receiveData+0x74>
 8008afe:	69bb      	ldr	r3, [r7, #24]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d105      	bne.n	8008b10 <BLU_receiveData+0x74>
  {
    BLU_initData(&l_readData);
 8008b04:	f107 030c 	add.w	r3, r7, #12
 8008b08:	4618      	mov	r0, r3
 8008b0a:	f7ff ffaf 	bl	8008a6c <BLU_initData>
 8008b0e:	e053      	b.n	8008bb8 <BLU_receiveData+0x11c>
  }
  /* Use a confirmation mechanism, on 2 cycles, as glitches are observed */
  else if ((l_readData.leftX  == g_BLU_lastData.leftX) &&
 8008b10:	68fa      	ldr	r2, [r7, #12]
 8008b12:	4b33      	ldr	r3, [pc, #204]	; (8008be0 <BLU_receiveData+0x144>)
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	429a      	cmp	r2, r3
 8008b18:	d14e      	bne.n	8008bb8 <BLU_receiveData+0x11c>
           (l_readData.leftY  == g_BLU_lastData.leftY) &&
 8008b1a:	693a      	ldr	r2, [r7, #16]
 8008b1c:	4b30      	ldr	r3, [pc, #192]	; (8008be0 <BLU_receiveData+0x144>)
 8008b1e:	685b      	ldr	r3, [r3, #4]
  else if ((l_readData.leftX  == g_BLU_lastData.leftX) &&
 8008b20:	429a      	cmp	r2, r3
 8008b22:	d149      	bne.n	8008bb8 <BLU_receiveData+0x11c>
           (l_readData.rightX == g_BLU_lastData.rightX) &&
 8008b24:	697a      	ldr	r2, [r7, #20]
 8008b26:	4b2e      	ldr	r3, [pc, #184]	; (8008be0 <BLU_receiveData+0x144>)
 8008b28:	689b      	ldr	r3, [r3, #8]
           (l_readData.leftY  == g_BLU_lastData.leftY) &&
 8008b2a:	429a      	cmp	r2, r3
 8008b2c:	d144      	bne.n	8008bb8 <BLU_receiveData+0x11c>
           (l_readData.rightY == g_BLU_lastData.rightY) &&
 8008b2e:	69ba      	ldr	r2, [r7, #24]
 8008b30:	4b2b      	ldr	r3, [pc, #172]	; (8008be0 <BLU_receiveData+0x144>)
 8008b32:	68db      	ldr	r3, [r3, #12]
           (l_readData.rightX == g_BLU_lastData.rightX) &&
 8008b34:	429a      	cmp	r2, r3
 8008b36:	d13f      	bne.n	8008bb8 <BLU_receiveData+0x11c>
           (l_readData.button == g_BLU_lastData.button))
 8008b38:	7f3a      	ldrb	r2, [r7, #28]
 8008b3a:	4b29      	ldr	r3, [pc, #164]	; (8008be0 <BLU_receiveData+0x144>)
 8008b3c:	7c1b      	ldrb	r3, [r3, #16]
           (l_readData.rightY == g_BLU_lastData.rightY) &&
 8008b3e:	429a      	cmp	r2, r3
 8008b40:	d13a      	bne.n	8008bb8 <BLU_receiveData+0x11c>
  {
    /* Normalize directions data in range [-MAX..MAX] */
    p_data->leftX  = UTI_normalizeIntValue(l_readData.leftX , 0, 255, -STP_DRIVE_MAX_SPEED, STP_DRIVE_MAX_SPEED, false);
 8008b42:	68f8      	ldr	r0, [r7, #12]
 8008b44:	2300      	movs	r3, #0
 8008b46:	9301      	str	r3, [sp, #4]
 8008b48:	2328      	movs	r3, #40	; 0x28
 8008b4a:	9300      	str	r3, [sp, #0]
 8008b4c:	f06f 0327 	mvn.w	r3, #39	; 0x27
 8008b50:	22ff      	movs	r2, #255	; 0xff
 8008b52:	2100      	movs	r1, #0
 8008b54:	f001 fe0f 	bl	800a776 <UTI_normalizeIntValue>
 8008b58:	4602      	mov	r2, r0
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	601a      	str	r2, [r3, #0]
    p_data->leftY  = UTI_normalizeIntValue(l_readData.leftY , 0, 255, -STP_DRIVE_MAX_SPEED, STP_DRIVE_MAX_SPEED, true );
 8008b5e:	6938      	ldr	r0, [r7, #16]
 8008b60:	2301      	movs	r3, #1
 8008b62:	9301      	str	r3, [sp, #4]
 8008b64:	2328      	movs	r3, #40	; 0x28
 8008b66:	9300      	str	r3, [sp, #0]
 8008b68:	f06f 0327 	mvn.w	r3, #39	; 0x27
 8008b6c:	22ff      	movs	r2, #255	; 0xff
 8008b6e:	2100      	movs	r1, #0
 8008b70:	f001 fe01 	bl	800a776 <UTI_normalizeIntValue>
 8008b74:	4602      	mov	r2, r0
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	605a      	str	r2, [r3, #4]
    p_data->rightX = UTI_normalizeIntValue(l_readData.rightX, 0, 255, -STP_DRIVE_MAX_SPEED, STP_DRIVE_MAX_SPEED, false);
 8008b7a:	6978      	ldr	r0, [r7, #20]
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	9301      	str	r3, [sp, #4]
 8008b80:	2328      	movs	r3, #40	; 0x28
 8008b82:	9300      	str	r3, [sp, #0]
 8008b84:	f06f 0327 	mvn.w	r3, #39	; 0x27
 8008b88:	22ff      	movs	r2, #255	; 0xff
 8008b8a:	2100      	movs	r1, #0
 8008b8c:	f001 fdf3 	bl	800a776 <UTI_normalizeIntValue>
 8008b90:	4602      	mov	r2, r0
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	609a      	str	r2, [r3, #8]
    p_data->rightY = UTI_normalizeIntValue(l_readData.rightY, 0, 255, -STP_DRIVE_MAX_SPEED, STP_DRIVE_MAX_SPEED, true );
 8008b96:	69b8      	ldr	r0, [r7, #24]
 8008b98:	2301      	movs	r3, #1
 8008b9a:	9301      	str	r3, [sp, #4]
 8008b9c:	2328      	movs	r3, #40	; 0x28
 8008b9e:	9300      	str	r3, [sp, #0]
 8008ba0:	f06f 0327 	mvn.w	r3, #39	; 0x27
 8008ba4:	22ff      	movs	r2, #255	; 0xff
 8008ba6:	2100      	movs	r1, #0
 8008ba8:	f001 fde5 	bl	800a776 <UTI_normalizeIntValue>
 8008bac:	4602      	mov	r2, r0
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	60da      	str	r2, [r3, #12]
    p_data->button = l_readData.button;
 8008bb2:	7f3a      	ldrb	r2, [r7, #28]
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	741a      	strb	r2, [r3, #16]
  {
    ; /* Nothing to do */
  }

  /* Saved received data for later use in confirmation mechanism */
  g_BLU_lastData.leftX  = l_readData.leftX;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	4a09      	ldr	r2, [pc, #36]	; (8008be0 <BLU_receiveData+0x144>)
 8008bbc:	6013      	str	r3, [r2, #0]
  g_BLU_lastData.leftY  = l_readData.leftY;
 8008bbe:	693b      	ldr	r3, [r7, #16]
 8008bc0:	4a07      	ldr	r2, [pc, #28]	; (8008be0 <BLU_receiveData+0x144>)
 8008bc2:	6053      	str	r3, [r2, #4]
  g_BLU_lastData.rightX = l_readData.rightX;
 8008bc4:	697b      	ldr	r3, [r7, #20]
 8008bc6:	4a06      	ldr	r2, [pc, #24]	; (8008be0 <BLU_receiveData+0x144>)
 8008bc8:	6093      	str	r3, [r2, #8]
  g_BLU_lastData.rightY = l_readData.rightY;
 8008bca:	69bb      	ldr	r3, [r7, #24]
 8008bcc:	4a04      	ldr	r2, [pc, #16]	; (8008be0 <BLU_receiveData+0x144>)
 8008bce:	60d3      	str	r3, [r2, #12]
  g_BLU_lastData.button = l_readData.button;
 8008bd0:	7f3a      	ldrb	r2, [r7, #28]
 8008bd2:	4b03      	ldr	r3, [pc, #12]	; (8008be0 <BLU_receiveData+0x144>)
 8008bd4:	741a      	strb	r2, [r3, #16]

  return;
 8008bd6:	bf00      	nop
}
 8008bd8:	3728      	adds	r7, #40	; 0x28
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bd80      	pop	{r7, pc}
 8008bde:	bf00      	nop
 8008be0:	200000bc 	.word	0x200000bc

08008be4 <CON_init>:
static T_SFO_data          g_CON_data;
static uint32_t            g_CON_dataSize;
static bool                g_CON_isDataComplete;

void CON_init(UART_HandleTypeDef *p_uartHandle)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b082      	sub	sp, #8
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
  LOG_info("Initializing console");
 8008bec:	490d      	ldr	r1, [pc, #52]	; (8008c24 <CON_init+0x40>)
 8008bee:	2001      	movs	r0, #1
 8008bf0:	f001 f916 	bl	8009e20 <LOG_log>

  g_CON_uartHandle     = p_uartHandle;
 8008bf4:	4a0c      	ldr	r2, [pc, #48]	; (8008c28 <CON_init+0x44>)
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6013      	str	r3, [r2, #0]
  g_CON_dataSize       = 0;
 8008bfa:	4b0c      	ldr	r3, [pc, #48]	; (8008c2c <CON_init+0x48>)
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	601a      	str	r2, [r3, #0]
  g_CON_isDataComplete = false;
 8008c00:	4b0b      	ldr	r3, [pc, #44]	; (8008c30 <CON_init+0x4c>)
 8008c02:	2200      	movs	r2, #0
 8008c04:	701a      	strb	r2, [r3, #0]

  SFO_initData(&g_CON_data);
 8008c06:	480b      	ldr	r0, [pc, #44]	; (8008c34 <CON_init+0x50>)
 8008c08:	f001 fc0e 	bl	800a428 <SFO_initData>

  HAL_UART_Receive_IT(g_CON_uartHandle, &g_CON_datum, 1);
 8008c0c:	4b06      	ldr	r3, [pc, #24]	; (8008c28 <CON_init+0x44>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	2201      	movs	r2, #1
 8008c12:	4909      	ldr	r1, [pc, #36]	; (8008c38 <CON_init+0x54>)
 8008c14:	4618      	mov	r0, r3
 8008c16:	f7ff f82f 	bl	8007c78 <HAL_UART_Receive_IT>

  return;
 8008c1a:	bf00      	nop
}
 8008c1c:	3708      	adds	r7, #8
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd80      	pop	{r7, pc}
 8008c22:	bf00      	nop
 8008c24:	0800c5fc 	.word	0x0800c5fc
 8008c28:	200000d0 	.word	0x200000d0
 8008c2c:	200000e8 	.word	0x200000e8
 8008c30:	200000ec 	.word	0x200000ec
 8008c34:	200000d8 	.word	0x200000d8
 8008c38:	200000d4 	.word	0x200000d4

08008c3c <CON_receiveData>:

void CON_receiveData(void)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	af00      	add	r7, sp, #0
  /* If previous command was not processed yet, drop datum, */
  /* which will lead to an error, showing a design issue... */
  if (g_CON_isDataComplete == true)
 8008c40:	4b0f      	ldr	r3, [pc, #60]	; (8008c80 <CON_receiveData+0x44>)
 8008c42:	781b      	ldrb	r3, [r3, #0]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d112      	bne.n	8008c6e <CON_receiveData+0x32>
  {
    ; /* Nothing to do */
  }
  else
  {
    if (g_CON_datum == '\r')
 8008c48:	4b0e      	ldr	r3, [pc, #56]	; (8008c84 <CON_receiveData+0x48>)
 8008c4a:	781b      	ldrb	r3, [r3, #0]
 8008c4c:	2b0d      	cmp	r3, #13
 8008c4e:	d103      	bne.n	8008c58 <CON_receiveData+0x1c>
    {
      g_CON_isDataComplete = true;
 8008c50:	4b0b      	ldr	r3, [pc, #44]	; (8008c80 <CON_receiveData+0x44>)
 8008c52:	2201      	movs	r2, #1
 8008c54:	701a      	strb	r2, [r3, #0]
 8008c56:	e00a      	b.n	8008c6e <CON_receiveData+0x32>
    }
    else
    {
      g_CON_data[g_CON_dataSize] = g_CON_datum;
 8008c58:	4b0b      	ldr	r3, [pc, #44]	; (8008c88 <CON_receiveData+0x4c>)
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	4a09      	ldr	r2, [pc, #36]	; (8008c84 <CON_receiveData+0x48>)
 8008c5e:	7811      	ldrb	r1, [r2, #0]
 8008c60:	4a0a      	ldr	r2, [pc, #40]	; (8008c8c <CON_receiveData+0x50>)
 8008c62:	54d1      	strb	r1, [r2, r3]
      g_CON_dataSize++;
 8008c64:	4b08      	ldr	r3, [pc, #32]	; (8008c88 <CON_receiveData+0x4c>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	3301      	adds	r3, #1
 8008c6a:	4a07      	ldr	r2, [pc, #28]	; (8008c88 <CON_receiveData+0x4c>)
 8008c6c:	6013      	str	r3, [r2, #0]
    }
  }

  HAL_UART_Receive_IT(g_CON_uartHandle, &g_CON_datum, 1);
 8008c6e:	4b08      	ldr	r3, [pc, #32]	; (8008c90 <CON_receiveData+0x54>)
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	2201      	movs	r2, #1
 8008c74:	4903      	ldr	r1, [pc, #12]	; (8008c84 <CON_receiveData+0x48>)
 8008c76:	4618      	mov	r0, r3
 8008c78:	f7fe fffe 	bl	8007c78 <HAL_UART_Receive_IT>

  return;
 8008c7c:	bf00      	nop
}
 8008c7e:	bd80      	pop	{r7, pc}
 8008c80:	200000ec 	.word	0x200000ec
 8008c84:	200000d4 	.word	0x200000d4
 8008c88:	200000e8 	.word	0x200000e8
 8008c8c:	200000d8 	.word	0x200000d8
 8008c90:	200000d0 	.word	0x200000d0

08008c94 <CON_updateFifo>:

void CON_updateFifo(T_SFO_Context *p_fifo)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b082      	sub	sp, #8
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
  if (g_CON_isDataComplete == false)
 8008c9c:	4b0c      	ldr	r3, [pc, #48]	; (8008cd0 <CON_updateFifo+0x3c>)
 8008c9e:	781b      	ldrb	r3, [r3, #0]
 8008ca0:	f083 0301 	eor.w	r3, r3, #1
 8008ca4:	b2db      	uxtb	r3, r3
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d10d      	bne.n	8008cc6 <CON_updateFifo+0x32>
  {
    ; /* Nothing to do */
  }
  else
  {
    SFO_push    (p_fifo, &g_CON_data);
 8008caa:	490a      	ldr	r1, [pc, #40]	; (8008cd4 <CON_updateFifo+0x40>)
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	f001 fbe1 	bl	800a474 <SFO_push>
    SFO_initData(&g_CON_data);
 8008cb2:	4808      	ldr	r0, [pc, #32]	; (8008cd4 <CON_updateFifo+0x40>)
 8008cb4:	f001 fbb8 	bl	800a428 <SFO_initData>

    g_CON_dataSize       = 0;
 8008cb8:	4b07      	ldr	r3, [pc, #28]	; (8008cd8 <CON_updateFifo+0x44>)
 8008cba:	2200      	movs	r2, #0
 8008cbc:	601a      	str	r2, [r3, #0]
    g_CON_isDataComplete = false;
 8008cbe:	4b04      	ldr	r3, [pc, #16]	; (8008cd0 <CON_updateFifo+0x3c>)
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	701a      	strb	r2, [r3, #0]
  }

  return;
 8008cc4:	bf00      	nop
 8008cc6:	bf00      	nop
}
 8008cc8:	3708      	adds	r7, #8
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}
 8008cce:	bf00      	nop
 8008cd0:	200000ec 	.word	0x200000ec
 8008cd4:	200000d8 	.word	0x200000d8
 8008cd8:	200000e8 	.word	0x200000e8

08008cdc <CON_sendString>:

void CON_sendString(char *p_string, uint32_t p_length)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b082      	sub	sp, #8
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
 8008ce4:	6039      	str	r1, [r7, #0]
  /* As this method is using for logging/debug, we will not deal with failure cases */
  (void)HAL_UART_Transmit(g_CON_uartHandle,
 8008ce6:	4b06      	ldr	r3, [pc, #24]	; (8008d00 <CON_sendString+0x24>)
 8008ce8:	6818      	ldr	r0, [r3, #0]
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	b29a      	uxth	r2, r3
 8008cee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008cf2:	6879      	ldr	r1, [r7, #4]
 8008cf4:	f7fe ff2e 	bl	8007b54 <HAL_UART_Transmit>
               (uint8_t *)p_string,
                          p_length,
                          CST_UART_TRANSMIT_TIMEOUT_IN_MS);

  return;
 8008cf8:	bf00      	nop
}
 8008cfa:	3708      	adds	r7, #8
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bd80      	pop	{r7, pc}
 8008d00:	200000d0 	.word	0x200000d0

08008d04 <DRV_init>:
void DRV_init(TIM_HandleTypeDef *p_pwmTimerHandle,
              TIM_HandleTypeDef *p_rearLeftEncoderTimerHandle,
              TIM_HandleTypeDef *p_rearRightEncoderTimerHandle,
              TIM_HandleTypeDef *p_frontRightEncoderTimerHandle,
              TIM_HandleTypeDef *p_frontLeftEncoderTimerHandle)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b088      	sub	sp, #32
 8008d08:	af04      	add	r7, sp, #16
 8008d0a:	60f8      	str	r0, [r7, #12]
 8008d0c:	60b9      	str	r1, [r7, #8]
 8008d0e:	607a      	str	r2, [r7, #4]
 8008d10:	603b      	str	r3, [r7, #0]
  LOG_info("Initializing Drive module");
 8008d12:	494f      	ldr	r1, [pc, #316]	; (8008e50 <DRV_init+0x14c>)
 8008d14:	2001      	movs	r0, #1
 8008d16:	f001 f883 	bl	8009e20 <LOG_log>

  /* Setup PIDs */
  PID_init(&g_DRV_pidFrontRight, 1, 1, 1, 0, -100, 100, 0.5);
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	9303      	str	r3, [sp, #12]
 8008d1e:	2364      	movs	r3, #100	; 0x64
 8008d20:	9302      	str	r3, [sp, #8]
 8008d22:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8008d26:	9301      	str	r3, [sp, #4]
 8008d28:	2300      	movs	r3, #0
 8008d2a:	9300      	str	r3, [sp, #0]
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	2201      	movs	r2, #1
 8008d30:	2101      	movs	r1, #1
 8008d32:	4848      	ldr	r0, [pc, #288]	; (8008e54 <DRV_init+0x150>)
 8008d34:	f001 fa88 	bl	800a248 <PID_init>
  PID_init(&g_DRV_pidFrontLeft , 1, 1, 1, 0, -100, 100, 0.5);
 8008d38:	2300      	movs	r3, #0
 8008d3a:	9303      	str	r3, [sp, #12]
 8008d3c:	2364      	movs	r3, #100	; 0x64
 8008d3e:	9302      	str	r3, [sp, #8]
 8008d40:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8008d44:	9301      	str	r3, [sp, #4]
 8008d46:	2300      	movs	r3, #0
 8008d48:	9300      	str	r3, [sp, #0]
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	2201      	movs	r2, #1
 8008d4e:	2101      	movs	r1, #1
 8008d50:	4841      	ldr	r0, [pc, #260]	; (8008e58 <DRV_init+0x154>)
 8008d52:	f001 fa79 	bl	800a248 <PID_init>
  PID_init(&g_DRV_pidRearLeft  , 1, 1, 1, 0, -100, 100, 0.5);
 8008d56:	2300      	movs	r3, #0
 8008d58:	9303      	str	r3, [sp, #12]
 8008d5a:	2364      	movs	r3, #100	; 0x64
 8008d5c:	9302      	str	r3, [sp, #8]
 8008d5e:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8008d62:	9301      	str	r3, [sp, #4]
 8008d64:	2300      	movs	r3, #0
 8008d66:	9300      	str	r3, [sp, #0]
 8008d68:	2301      	movs	r3, #1
 8008d6a:	2201      	movs	r2, #1
 8008d6c:	2101      	movs	r1, #1
 8008d6e:	483b      	ldr	r0, [pc, #236]	; (8008e5c <DRV_init+0x158>)
 8008d70:	f001 fa6a 	bl	800a248 <PID_init>
  PID_init(&g_DRV_pidRearRight , 1, 1, 1, 0, -100, 100, 0.5);
 8008d74:	2300      	movs	r3, #0
 8008d76:	9303      	str	r3, [sp, #12]
 8008d78:	2364      	movs	r3, #100	; 0x64
 8008d7a:	9302      	str	r3, [sp, #8]
 8008d7c:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8008d80:	9301      	str	r3, [sp, #4]
 8008d82:	2300      	movs	r3, #0
 8008d84:	9300      	str	r3, [sp, #0]
 8008d86:	2301      	movs	r3, #1
 8008d88:	2201      	movs	r2, #1
 8008d8a:	2101      	movs	r1, #1
 8008d8c:	4834      	ldr	r0, [pc, #208]	; (8008e60 <DRV_init+0x15c>)
 8008d8e:	f001 fa5b 	bl	800a248 <PID_init>

  /* Setup motors (with a 0 speed & stopped direction, at this point) */
  MTR_init(&g_DRV_motorFrontRight,
 8008d92:	2304      	movs	r3, #4
 8008d94:	9303      	str	r3, [sp, #12]
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	9302      	str	r3, [sp, #8]
 8008d9a:	2320      	movs	r3, #32
 8008d9c:	9301      	str	r3, [sp, #4]
 8008d9e:	4b31      	ldr	r3, [pc, #196]	; (8008e64 <DRV_init+0x160>)
 8008da0:	9300      	str	r3, [sp, #0]
 8008da2:	2310      	movs	r3, #16
 8008da4:	4a2f      	ldr	r2, [pc, #188]	; (8008e64 <DRV_init+0x160>)
 8008da6:	4930      	ldr	r1, [pc, #192]	; (8008e68 <DRV_init+0x164>)
 8008da8:	4830      	ldr	r0, [pc, #192]	; (8008e6c <DRV_init+0x168>)
 8008daa:	f001 f95b 	bl	800a064 <MTR_init>
           MOTOR_FRONT_RIGHT_IN_2_GPIO_Port,
           MOTOR_FRONT_RIGHT_IN_2_Pin,
           p_pwmTimerHandle,
           TIM_CHANNEL_2);

  MTR_init(&g_DRV_motorFrontLeft,
 8008dae:	2300      	movs	r3, #0
 8008db0:	9303      	str	r3, [sp, #12]
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	9302      	str	r3, [sp, #8]
 8008db6:	2302      	movs	r3, #2
 8008db8:	9301      	str	r3, [sp, #4]
 8008dba:	4b2d      	ldr	r3, [pc, #180]	; (8008e70 <DRV_init+0x16c>)
 8008dbc:	9300      	str	r3, [sp, #0]
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	4a2b      	ldr	r2, [pc, #172]	; (8008e70 <DRV_init+0x16c>)
 8008dc2:	492c      	ldr	r1, [pc, #176]	; (8008e74 <DRV_init+0x170>)
 8008dc4:	482c      	ldr	r0, [pc, #176]	; (8008e78 <DRV_init+0x174>)
 8008dc6:	f001 f94d 	bl	800a064 <MTR_init>
           MOTOR_FRONT_LEFT_IN_2_GPIO_Port,
           MOTOR_FRONT_LEFT_IN_2_Pin,
           p_pwmTimerHandle,
           TIM_CHANNEL_1);

  MTR_init(&g_DRV_motorRearLeft,
 8008dca:	230c      	movs	r3, #12
 8008dcc:	9303      	str	r3, [sp, #12]
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	9302      	str	r3, [sp, #8]
 8008dd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008dd6:	9301      	str	r3, [sp, #4]
 8008dd8:	4b22      	ldr	r3, [pc, #136]	; (8008e64 <DRV_init+0x160>)
 8008dda:	9300      	str	r3, [sp, #0]
 8008ddc:	2304      	movs	r3, #4
 8008dde:	4a27      	ldr	r2, [pc, #156]	; (8008e7c <DRV_init+0x178>)
 8008de0:	4927      	ldr	r1, [pc, #156]	; (8008e80 <DRV_init+0x17c>)
 8008de2:	4828      	ldr	r0, [pc, #160]	; (8008e84 <DRV_init+0x180>)
 8008de4:	f001 f93e 	bl	800a064 <MTR_init>
           MOTOR_REAR_LEFT_IN_2_GPIO_Port,
           MOTOR_REAR_LEFT_IN_2_Pin,
           p_pwmTimerHandle,
           TIM_CHANNEL_4);

  MTR_init(&g_DRV_motorRearRight,
 8008de8:	2308      	movs	r3, #8
 8008dea:	9303      	str	r3, [sp, #12]
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	9302      	str	r3, [sp, #8]
 8008df0:	2310      	movs	r3, #16
 8008df2:	9301      	str	r3, [sp, #4]
 8008df4:	4b1e      	ldr	r3, [pc, #120]	; (8008e70 <DRV_init+0x16c>)
 8008df6:	9300      	str	r3, [sp, #0]
 8008df8:	2320      	movs	r3, #32
 8008dfa:	4a1d      	ldr	r2, [pc, #116]	; (8008e70 <DRV_init+0x16c>)
 8008dfc:	4922      	ldr	r1, [pc, #136]	; (8008e88 <DRV_init+0x184>)
 8008dfe:	4823      	ldr	r0, [pc, #140]	; (8008e8c <DRV_init+0x188>)
 8008e00:	f001 f930 	bl	800a064 <MTR_init>
           MOTOR_REAR_RIGHT_IN_2_Pin,
           p_pwmTimerHandle,
           TIM_CHANNEL_3);

  /* Setup encoders */
  ENC_init(&g_DRV_encoderFrontRight, DRV_FRONT_RIGHT_MOTOR_NAME, true , p_frontRightEncoderTimerHandle);
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	2201      	movs	r2, #1
 8008e08:	4917      	ldr	r1, [pc, #92]	; (8008e68 <DRV_init+0x164>)
 8008e0a:	4821      	ldr	r0, [pc, #132]	; (8008e90 <DRV_init+0x18c>)
 8008e0c:	f000 fe94 	bl	8009b38 <ENC_init>
  ENC_init(&g_DRV_encoderFrontLeft , DRV_FRONT_LEFT_MOTOR_NAME , false, p_frontLeftEncoderTimerHandle );
 8008e10:	69bb      	ldr	r3, [r7, #24]
 8008e12:	2200      	movs	r2, #0
 8008e14:	4917      	ldr	r1, [pc, #92]	; (8008e74 <DRV_init+0x170>)
 8008e16:	481f      	ldr	r0, [pc, #124]	; (8008e94 <DRV_init+0x190>)
 8008e18:	f000 fe8e 	bl	8009b38 <ENC_init>
  ENC_init(&g_DRV_encoderRearLeft  , DRV_REAR_LEFT_MOTOR_NAME  , false, p_rearLeftEncoderTimerHandle  );
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	2200      	movs	r2, #0
 8008e20:	4917      	ldr	r1, [pc, #92]	; (8008e80 <DRV_init+0x17c>)
 8008e22:	481d      	ldr	r0, [pc, #116]	; (8008e98 <DRV_init+0x194>)
 8008e24:	f000 fe88 	bl	8009b38 <ENC_init>
  ENC_init(&g_DRV_encoderRearRight , DRV_REAR_RIGHT_MOTOR_NAME , true , p_rearRightEncoderTimerHandle );
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2201      	movs	r2, #1
 8008e2c:	4916      	ldr	r1, [pc, #88]	; (8008e88 <DRV_init+0x184>)
 8008e2e:	481b      	ldr	r0, [pc, #108]	; (8008e9c <DRV_init+0x198>)
 8008e30:	f000 fe82 	bl	8009b38 <ENC_init>

  /* Activate motors by default (de-activating them is used for debug)  */
  g_DRV_areMotorsOn = true;
 8008e34:	4b1a      	ldr	r3, [pc, #104]	; (8008ea0 <DRV_init+0x19c>)
 8008e36:	2201      	movs	r2, #1
 8008e38:	701a      	strb	r2, [r3, #0]

  /* Assume that drive is not ON by default */
  g_DRV_isDriveOn = false;
 8008e3a:	4b1a      	ldr	r3, [pc, #104]	; (8008ea4 <DRV_init+0x1a0>)
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	701a      	strb	r2, [r3, #0]

  /* Start with master board control mode */
  g_DRV_mode = DRV_MODE_MASTER_BOARD_CONTROL;
 8008e40:	4b19      	ldr	r3, [pc, #100]	; (8008ea8 <DRV_init+0x1a4>)
 8008e42:	2202      	movs	r2, #2
 8008e44:	701a      	strb	r2, [r3, #0]

  return;
 8008e46:	bf00      	nop
}
 8008e48:	3710      	adds	r7, #16
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}
 8008e4e:	bf00      	nop
 8008e50:	0800c614 	.word	0x0800c614
 8008e54:	200000f0 	.word	0x200000f0
 8008e58:	20000120 	.word	0x20000120
 8008e5c:	20000150 	.word	0x20000150
 8008e60:	20000180 	.word	0x20000180
 8008e64:	40011000 	.word	0x40011000
 8008e68:	0800c630 	.word	0x0800c630
 8008e6c:	200001b0 	.word	0x200001b0
 8008e70:	40010c00 	.word	0x40010c00
 8008e74:	0800c63c 	.word	0x0800c63c
 8008e78:	200001d4 	.word	0x200001d4
 8008e7c:	40011400 	.word	0x40011400
 8008e80:	0800c648 	.word	0x0800c648
 8008e84:	200001f8 	.word	0x200001f8
 8008e88:	0800c654 	.word	0x0800c654
 8008e8c:	2000021c 	.word	0x2000021c
 8008e90:	20000240 	.word	0x20000240
 8008e94:	2000024c 	.word	0x2000024c
 8008e98:	20000258 	.word	0x20000258
 8008e9c:	20000264 	.word	0x20000264
 8008ea0:	200000ed 	.word	0x200000ed
 8008ea4:	200000ee 	.word	0x200000ee
 8008ea8:	200000ef 	.word	0x200000ef

08008eac <DRV_updateEncoder>:

void DRV_updateEncoder(TIM_HandleTypeDef *p_encoderTimerHandle)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b084      	sub	sp, #16
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
  int16_t l_count;

  l_count = __HAL_TIM_GET_COUNTER(p_encoderTimerHandle);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eba:	81fb      	strh	r3, [r7, #14]

  /* Check the handle of the triggering timer and update encoder accordingly */
  if (p_encoderTimerHandle == g_DRV_encoderRearLeft.timerHandle)
 8008ebc:	4b19      	ldr	r3, [pc, #100]	; (8008f24 <DRV_updateEncoder+0x78>)
 8008ebe:	689b      	ldr	r3, [r3, #8]
 8008ec0:	687a      	ldr	r2, [r7, #4]
 8008ec2:	429a      	cmp	r2, r3
 8008ec4:	d106      	bne.n	8008ed4 <DRV_updateEncoder+0x28>
  {
    ENC_update(&g_DRV_encoderRearLeft, l_count);
 8008ec6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008eca:	4619      	mov	r1, r3
 8008ecc:	4815      	ldr	r0, [pc, #84]	; (8008f24 <DRV_updateEncoder+0x78>)
 8008ece:	f000 fe5f 	bl	8009b90 <ENC_update>
  else
  {
    ; /* Nothing to do */
  }

  return;
 8008ed2:	e023      	b.n	8008f1c <DRV_updateEncoder+0x70>
  else if (p_encoderTimerHandle == g_DRV_encoderRearRight.timerHandle)
 8008ed4:	4b14      	ldr	r3, [pc, #80]	; (8008f28 <DRV_updateEncoder+0x7c>)
 8008ed6:	689b      	ldr	r3, [r3, #8]
 8008ed8:	687a      	ldr	r2, [r7, #4]
 8008eda:	429a      	cmp	r2, r3
 8008edc:	d106      	bne.n	8008eec <DRV_updateEncoder+0x40>
    ENC_update(&g_DRV_encoderRearRight, l_count);
 8008ede:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008ee2:	4619      	mov	r1, r3
 8008ee4:	4810      	ldr	r0, [pc, #64]	; (8008f28 <DRV_updateEncoder+0x7c>)
 8008ee6:	f000 fe53 	bl	8009b90 <ENC_update>
  return;
 8008eea:	e017      	b.n	8008f1c <DRV_updateEncoder+0x70>
  else if (p_encoderTimerHandle == g_DRV_encoderFrontRight.timerHandle)
 8008eec:	4b0f      	ldr	r3, [pc, #60]	; (8008f2c <DRV_updateEncoder+0x80>)
 8008eee:	689b      	ldr	r3, [r3, #8]
 8008ef0:	687a      	ldr	r2, [r7, #4]
 8008ef2:	429a      	cmp	r2, r3
 8008ef4:	d106      	bne.n	8008f04 <DRV_updateEncoder+0x58>
    ENC_update(&g_DRV_encoderFrontRight, l_count);
 8008ef6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008efa:	4619      	mov	r1, r3
 8008efc:	480b      	ldr	r0, [pc, #44]	; (8008f2c <DRV_updateEncoder+0x80>)
 8008efe:	f000 fe47 	bl	8009b90 <ENC_update>
  return;
 8008f02:	e00b      	b.n	8008f1c <DRV_updateEncoder+0x70>
  else if (p_encoderTimerHandle == g_DRV_encoderFrontLeft.timerHandle)
 8008f04:	4b0a      	ldr	r3, [pc, #40]	; (8008f30 <DRV_updateEncoder+0x84>)
 8008f06:	689b      	ldr	r3, [r3, #8]
 8008f08:	687a      	ldr	r2, [r7, #4]
 8008f0a:	429a      	cmp	r2, r3
 8008f0c:	d106      	bne.n	8008f1c <DRV_updateEncoder+0x70>
    ENC_update(&g_DRV_encoderFrontLeft, l_count);
 8008f0e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008f12:	4619      	mov	r1, r3
 8008f14:	4806      	ldr	r0, [pc, #24]	; (8008f30 <DRV_updateEncoder+0x84>)
 8008f16:	f000 fe3b 	bl	8009b90 <ENC_update>
  return;
 8008f1a:	bf00      	nop
 8008f1c:	bf00      	nop
}
 8008f1e:	3710      	adds	r7, #16
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}
 8008f24:	20000258 	.word	0x20000258
 8008f28:	20000264 	.word	0x20000264
 8008f2c:	20000240 	.word	0x20000240
 8008f30:	2000024c 	.word	0x2000024c

08008f34 <DRV_updateFromBluetooth>:

void DRV_updateFromBluetooth(T_BLU_Data *p_bluetoothData)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b084      	sub	sp, #16
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
  uint32_t l_speed;

  /* Check possible requested mode change */
  switch (p_bluetoothData->button)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	7c1b      	ldrb	r3, [r3, #16]
 8008f40:	3b01      	subs	r3, #1
 8008f42:	2b0f      	cmp	r3, #15
 8008f44:	d861      	bhi.n	800900a <DRV_updateFromBluetooth+0xd6>
 8008f46:	a201      	add	r2, pc, #4	; (adr r2, 8008f4c <DRV_updateFromBluetooth+0x18>)
 8008f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f4c:	08008fd5 	.word	0x08008fd5
 8008f50:	0800900b 	.word	0x0800900b
 8008f54:	0800900b 	.word	0x0800900b
 8008f58:	08008fed 	.word	0x08008fed
 8008f5c:	0800900b 	.word	0x0800900b
 8008f60:	0800900b 	.word	0x0800900b
 8008f64:	0800900b 	.word	0x0800900b
 8008f68:	0800900b 	.word	0x0800900b
 8008f6c:	0800900b 	.word	0x0800900b
 8008f70:	0800900b 	.word	0x0800900b
 8008f74:	0800900b 	.word	0x0800900b
 8008f78:	0800900b 	.word	0x0800900b
 8008f7c:	0800900b 	.word	0x0800900b
 8008f80:	08008fbd 	.word	0x08008fbd
 8008f84:	08008fa5 	.word	0x08008fa5
 8008f88:	08008f8d 	.word	0x08008f8d
  {
    case BLU_BUTTON_PINK_SQUARE:
      if (g_DRV_mode != DRV_MODE_MANUAL_FIXED_SPEED)
 8008f8c:	4b82      	ldr	r3, [pc, #520]	; (8009198 <DRV_updateFromBluetooth+0x264>)
 8008f8e:	781b      	ldrb	r3, [r3, #0]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d03c      	beq.n	800900e <DRV_updateFromBluetooth+0xda>
      {
        LOG_info("Drive mode now DRV_MODE_MANUAL_FIXED_SPEED");
 8008f94:	4981      	ldr	r1, [pc, #516]	; (800919c <DRV_updateFromBluetooth+0x268>)
 8008f96:	2001      	movs	r0, #1
 8008f98:	f000 ff42 	bl	8009e20 <LOG_log>
        g_DRV_mode = DRV_MODE_MANUAL_FIXED_SPEED;
 8008f9c:	4b7e      	ldr	r3, [pc, #504]	; (8009198 <DRV_updateFromBluetooth+0x264>)
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	701a      	strb	r2, [r3, #0]
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 8008fa2:	e034      	b.n	800900e <DRV_updateFromBluetooth+0xda>

    case BLU_BUTTON_BLUE_CROSS:
      if (g_DRV_mode != DRV_MODE_MANUAL_VARIABLE_SPEED)
 8008fa4:	4b7c      	ldr	r3, [pc, #496]	; (8009198 <DRV_updateFromBluetooth+0x264>)
 8008fa6:	781b      	ldrb	r3, [r3, #0]
 8008fa8:	2b01      	cmp	r3, #1
 8008faa:	d032      	beq.n	8009012 <DRV_updateFromBluetooth+0xde>
      {
        LOG_info("Drive mode now DRV_MODE_MANUAL_VARIABLE_SPEED");
 8008fac:	497c      	ldr	r1, [pc, #496]	; (80091a0 <DRV_updateFromBluetooth+0x26c>)
 8008fae:	2001      	movs	r0, #1
 8008fb0:	f000 ff36 	bl	8009e20 <LOG_log>
        g_DRV_mode = DRV_MODE_MANUAL_VARIABLE_SPEED;
 8008fb4:	4b78      	ldr	r3, [pc, #480]	; (8009198 <DRV_updateFromBluetooth+0x264>)
 8008fb6:	2201      	movs	r2, #1
 8008fb8:	701a      	strb	r2, [r3, #0]
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 8008fba:	e02a      	b.n	8009012 <DRV_updateFromBluetooth+0xde>

    case BLU_BUTTON_RED_CIRCLE:
      if (g_DRV_mode != DRV_MODE_MASTER_BOARD_CONTROL)
 8008fbc:	4b76      	ldr	r3, [pc, #472]	; (8009198 <DRV_updateFromBluetooth+0x264>)
 8008fbe:	781b      	ldrb	r3, [r3, #0]
 8008fc0:	2b02      	cmp	r3, #2
 8008fc2:	d028      	beq.n	8009016 <DRV_updateFromBluetooth+0xe2>
      {
        LOG_info("Drive mode now DRV_MODE_MASTER_BOARD_CONTROL");
 8008fc4:	4977      	ldr	r1, [pc, #476]	; (80091a4 <DRV_updateFromBluetooth+0x270>)
 8008fc6:	2001      	movs	r0, #1
 8008fc8:	f000 ff2a 	bl	8009e20 <LOG_log>
        g_DRV_mode = DRV_MODE_MASTER_BOARD_CONTROL;
 8008fcc:	4b72      	ldr	r3, [pc, #456]	; (8009198 <DRV_updateFromBluetooth+0x264>)
 8008fce:	2202      	movs	r2, #2
 8008fd0:	701a      	strb	r2, [r3, #0]
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 8008fd2:	e020      	b.n	8009016 <DRV_updateFromBluetooth+0xe2>

    case BLU_BUTTON_SELECT:
      if (g_DRV_areMotorsOn == true)
 8008fd4:	4b74      	ldr	r3, [pc, #464]	; (80091a8 <DRV_updateFromBluetooth+0x274>)
 8008fd6:	781b      	ldrb	r3, [r3, #0]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d01e      	beq.n	800901a <DRV_updateFromBluetooth+0xe6>
      {
        LOG_info("Drive turning motor OFF");
 8008fdc:	4973      	ldr	r1, [pc, #460]	; (80091ac <DRV_updateFromBluetooth+0x278>)
 8008fde:	2001      	movs	r0, #1
 8008fe0:	f000 ff1e 	bl	8009e20 <LOG_log>
        g_DRV_areMotorsOn = false;
 8008fe4:	4b70      	ldr	r3, [pc, #448]	; (80091a8 <DRV_updateFromBluetooth+0x274>)
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	701a      	strb	r2, [r3, #0]
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 8008fea:	e016      	b.n	800901a <DRV_updateFromBluetooth+0xe6>

    case BLU_BUTTON_START:
      if (g_DRV_areMotorsOn == false)
 8008fec:	4b6e      	ldr	r3, [pc, #440]	; (80091a8 <DRV_updateFromBluetooth+0x274>)
 8008fee:	781b      	ldrb	r3, [r3, #0]
 8008ff0:	f083 0301 	eor.w	r3, r3, #1
 8008ff4:	b2db      	uxtb	r3, r3
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d011      	beq.n	800901e <DRV_updateFromBluetooth+0xea>
      {
        LOG_info("Drive turning motors ON");
 8008ffa:	496d      	ldr	r1, [pc, #436]	; (80091b0 <DRV_updateFromBluetooth+0x27c>)
 8008ffc:	2001      	movs	r0, #1
 8008ffe:	f000 ff0f 	bl	8009e20 <LOG_log>
        g_DRV_areMotorsOn = true;
 8009002:	4b69      	ldr	r3, [pc, #420]	; (80091a8 <DRV_updateFromBluetooth+0x274>)
 8009004:	2201      	movs	r2, #1
 8009006:	701a      	strb	r2, [r3, #0]
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 8009008:	e009      	b.n	800901e <DRV_updateFromBluetooth+0xea>

    case BLU_BUTTON_NONE:
    default:
      ; /* Nothing to do */
      break;
 800900a:	bf00      	nop
 800900c:	e008      	b.n	8009020 <DRV_updateFromBluetooth+0xec>
      break;
 800900e:	bf00      	nop
 8009010:	e006      	b.n	8009020 <DRV_updateFromBluetooth+0xec>
      break;
 8009012:	bf00      	nop
 8009014:	e004      	b.n	8009020 <DRV_updateFromBluetooth+0xec>
      break;
 8009016:	bf00      	nop
 8009018:	e002      	b.n	8009020 <DRV_updateFromBluetooth+0xec>
      break;
 800901a:	bf00      	nop
 800901c:	e000      	b.n	8009020 <DRV_updateFromBluetooth+0xec>
      break;
 800901e:	bf00      	nop
  }

  /* Master board control mode is an automated mode, so that we will */
  /* ignore any direction/button press received via bluetooth.       */
  if (g_DRV_mode == DRV_MODE_MASTER_BOARD_CONTROL)
 8009020:	4b5d      	ldr	r3, [pc, #372]	; (8009198 <DRV_updateFromBluetooth+0x264>)
 8009022:	781b      	ldrb	r3, [r3, #0]
 8009024:	2b02      	cmp	r3, #2
 8009026:	f000 80b3 	beq.w	8009190 <DRV_updateFromBluetooth+0x25c>
    ; /* Nothing to do */
  }
  /* Manual mode, applying directions received by bluetooth */
  else
  {
    if (p_bluetoothData->leftY > DRV_JOYSTICKS_THRESHOLD)
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	685b      	ldr	r3, [r3, #4]
 800902e:	2b0a      	cmp	r3, #10
 8009030:	dd0c      	ble.n	800904c <DRV_updateFromBluetooth+0x118>
    {
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? DRV_JOYSTICKS_FIXED_SPEED : p_bluetoothData->leftY;
 8009032:	4b59      	ldr	r3, [pc, #356]	; (8009198 <DRV_updateFromBluetooth+0x264>)
 8009034:	781b      	ldrb	r3, [r3, #0]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d002      	beq.n	8009040 <DRV_updateFromBluetooth+0x10c>
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	685b      	ldr	r3, [r3, #4]
 800903e:	e000      	b.n	8009042 <DRV_updateFromBluetooth+0x10e>
 8009040:	2314      	movs	r3, #20
 8009042:	60fb      	str	r3, [r7, #12]

      DRV_moveForward(l_speed);
 8009044:	68f8      	ldr	r0, [r7, #12]
 8009046:	f000 fac7 	bl	80095d8 <DRV_moveForward>
      /* Most of the time, we will get here */
      DRV_sleep();
    }
  }

  return;
 800904a:	e0a1      	b.n	8009190 <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->rightY > DRV_JOYSTICKS_THRESHOLD)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	68db      	ldr	r3, [r3, #12]
 8009050:	2b0a      	cmp	r3, #10
 8009052:	dd0c      	ble.n	800906e <DRV_updateFromBluetooth+0x13a>
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? DRV_JOYSTICKS_FIXED_SPEED : p_bluetoothData->rightY;
 8009054:	4b50      	ldr	r3, [pc, #320]	; (8009198 <DRV_updateFromBluetooth+0x264>)
 8009056:	781b      	ldrb	r3, [r3, #0]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d002      	beq.n	8009062 <DRV_updateFromBluetooth+0x12e>
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	68db      	ldr	r3, [r3, #12]
 8009060:	e000      	b.n	8009064 <DRV_updateFromBluetooth+0x130>
 8009062:	2314      	movs	r3, #20
 8009064:	60fb      	str	r3, [r7, #12]
      DRV_moveForward(l_speed);
 8009066:	68f8      	ldr	r0, [r7, #12]
 8009068:	f000 fab6 	bl	80095d8 <DRV_moveForward>
  return;
 800906c:	e090      	b.n	8009190 <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->leftY < -DRV_JOYSTICKS_THRESHOLD)
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	685b      	ldr	r3, [r3, #4]
 8009072:	f113 0f0a 	cmn.w	r3, #10
 8009076:	da0d      	bge.n	8009094 <DRV_updateFromBluetooth+0x160>
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? DRV_JOYSTICKS_FIXED_SPEED : -p_bluetoothData->leftY;
 8009078:	4b47      	ldr	r3, [pc, #284]	; (8009198 <DRV_updateFromBluetooth+0x264>)
 800907a:	781b      	ldrb	r3, [r3, #0]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d003      	beq.n	8009088 <DRV_updateFromBluetooth+0x154>
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	685b      	ldr	r3, [r3, #4]
 8009084:	425b      	negs	r3, r3
 8009086:	e000      	b.n	800908a <DRV_updateFromBluetooth+0x156>
 8009088:	2314      	movs	r3, #20
 800908a:	60fb      	str	r3, [r7, #12]
      DRV_moveBackward(l_speed);
 800908c:	68f8      	ldr	r0, [r7, #12]
 800908e:	f000 faeb 	bl	8009668 <DRV_moveBackward>
  return;
 8009092:	e07d      	b.n	8009190 <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->rightY < -DRV_JOYSTICKS_THRESHOLD)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	68db      	ldr	r3, [r3, #12]
 8009098:	f113 0f0a 	cmn.w	r3, #10
 800909c:	da0d      	bge.n	80090ba <DRV_updateFromBluetooth+0x186>
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? DRV_JOYSTICKS_FIXED_SPEED : -p_bluetoothData->rightY;
 800909e:	4b3e      	ldr	r3, [pc, #248]	; (8009198 <DRV_updateFromBluetooth+0x264>)
 80090a0:	781b      	ldrb	r3, [r3, #0]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d003      	beq.n	80090ae <DRV_updateFromBluetooth+0x17a>
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	68db      	ldr	r3, [r3, #12]
 80090aa:	425b      	negs	r3, r3
 80090ac:	e000      	b.n	80090b0 <DRV_updateFromBluetooth+0x17c>
 80090ae:	2314      	movs	r3, #20
 80090b0:	60fb      	str	r3, [r7, #12]
      DRV_moveBackward(l_speed);
 80090b2:	68f8      	ldr	r0, [r7, #12]
 80090b4:	f000 fad8 	bl	8009668 <DRV_moveBackward>
  return;
 80090b8:	e06a      	b.n	8009190 <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->leftX < -DRV_JOYSTICKS_THRESHOLD)
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f113 0f0a 	cmn.w	r3, #10
 80090c2:	da0d      	bge.n	80090e0 <DRV_updateFromBluetooth+0x1ac>
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? DRV_JOYSTICKS_FIXED_SPEED : -p_bluetoothData->leftX;
 80090c4:	4b34      	ldr	r3, [pc, #208]	; (8009198 <DRV_updateFromBluetooth+0x264>)
 80090c6:	781b      	ldrb	r3, [r3, #0]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d003      	beq.n	80090d4 <DRV_updateFromBluetooth+0x1a0>
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	425b      	negs	r3, r3
 80090d2:	e000      	b.n	80090d6 <DRV_updateFromBluetooth+0x1a2>
 80090d4:	2314      	movs	r3, #20
 80090d6:	60fb      	str	r3, [r7, #12]
      DRV_turnLeft(l_speed);
 80090d8:	68f8      	ldr	r0, [r7, #12]
 80090da:	f000 fc0d 	bl	80098f8 <DRV_turnLeft>
  return;
 80090de:	e057      	b.n	8009190 <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->leftX > DRV_JOYSTICKS_THRESHOLD)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	2b0a      	cmp	r3, #10
 80090e6:	dd0c      	ble.n	8009102 <DRV_updateFromBluetooth+0x1ce>
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? DRV_JOYSTICKS_FIXED_SPEED : p_bluetoothData->leftX;
 80090e8:	4b2b      	ldr	r3, [pc, #172]	; (8009198 <DRV_updateFromBluetooth+0x264>)
 80090ea:	781b      	ldrb	r3, [r3, #0]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d002      	beq.n	80090f6 <DRV_updateFromBluetooth+0x1c2>
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	e000      	b.n	80090f8 <DRV_updateFromBluetooth+0x1c4>
 80090f6:	2314      	movs	r3, #20
 80090f8:	60fb      	str	r3, [r7, #12]
      DRV_turnRight(l_speed);
 80090fa:	68f8      	ldr	r0, [r7, #12]
 80090fc:	f000 fc44 	bl	8009988 <DRV_turnRight>
  return;
 8009100:	e046      	b.n	8009190 <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->rightX < -DRV_JOYSTICKS_THRESHOLD)
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	689b      	ldr	r3, [r3, #8]
 8009106:	f113 0f0a 	cmn.w	r3, #10
 800910a:	da0d      	bge.n	8009128 <DRV_updateFromBluetooth+0x1f4>
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? DRV_JOYSTICKS_FIXED_SPEED : -p_bluetoothData->rightX;
 800910c:	4b22      	ldr	r3, [pc, #136]	; (8009198 <DRV_updateFromBluetooth+0x264>)
 800910e:	781b      	ldrb	r3, [r3, #0]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d003      	beq.n	800911c <DRV_updateFromBluetooth+0x1e8>
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	689b      	ldr	r3, [r3, #8]
 8009118:	425b      	negs	r3, r3
 800911a:	e000      	b.n	800911e <DRV_updateFromBluetooth+0x1ea>
 800911c:	2314      	movs	r3, #20
 800911e:	60fb      	str	r3, [r7, #12]
      DRV_translateLeft(l_speed);
 8009120:	68f8      	ldr	r0, [r7, #12]
 8009122:	f000 fc79 	bl	8009a18 <DRV_translateLeft>
  return;
 8009126:	e033      	b.n	8009190 <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->rightX > DRV_JOYSTICKS_THRESHOLD)
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	689b      	ldr	r3, [r3, #8]
 800912c:	2b0a      	cmp	r3, #10
 800912e:	dd0c      	ble.n	800914a <DRV_updateFromBluetooth+0x216>
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? DRV_JOYSTICKS_FIXED_SPEED : p_bluetoothData->rightX;
 8009130:	4b19      	ldr	r3, [pc, #100]	; (8009198 <DRV_updateFromBluetooth+0x264>)
 8009132:	781b      	ldrb	r3, [r3, #0]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d002      	beq.n	800913e <DRV_updateFromBluetooth+0x20a>
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	689b      	ldr	r3, [r3, #8]
 800913c:	e000      	b.n	8009140 <DRV_updateFromBluetooth+0x20c>
 800913e:	2314      	movs	r3, #20
 8009140:	60fb      	str	r3, [r7, #12]
      DRV_translateRight(l_speed);
 8009142:	68f8      	ldr	r0, [r7, #12]
 8009144:	f000 fcb0 	bl	8009aa8 <DRV_translateRight>
  return;
 8009148:	e022      	b.n	8009190 <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->button == BLU_BUTTON_L1)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	7c1b      	ldrb	r3, [r3, #16]
 800914e:	2b0b      	cmp	r3, #11
 8009150:	d103      	bne.n	800915a <DRV_updateFromBluetooth+0x226>
      DRV_moveForwardLeft(DRV_BUTTONS_FIXED_SPEED);
 8009152:	2028      	movs	r0, #40	; 0x28
 8009154:	f000 fb10 	bl	8009778 <DRV_moveForwardLeft>
  return;
 8009158:	e01a      	b.n	8009190 <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->button == BLU_BUTTON_L2)
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	7c1b      	ldrb	r3, [r3, #16]
 800915e:	2b09      	cmp	r3, #9
 8009160:	d103      	bne.n	800916a <DRV_updateFromBluetooth+0x236>
      DRV_moveBackwardRight(DRV_BUTTONS_FIXED_SPEED);
 8009162:	2028      	movs	r0, #40	; 0x28
 8009164:	f000 fb48 	bl	80097f8 <DRV_moveBackwardRight>
  return;
 8009168:	e012      	b.n	8009190 <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->button == BLU_BUTTON_R1)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	7c1b      	ldrb	r3, [r3, #16]
 800916e:	2b0c      	cmp	r3, #12
 8009170:	d103      	bne.n	800917a <DRV_updateFromBluetooth+0x246>
      DRV_moveForwardRight(DRV_BUTTONS_FIXED_SPEED);
 8009172:	2028      	movs	r0, #40	; 0x28
 8009174:	f000 fac0 	bl	80096f8 <DRV_moveForwardRight>
  return;
 8009178:	e00a      	b.n	8009190 <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->button == BLU_BUTTON_R2)
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	7c1b      	ldrb	r3, [r3, #16]
 800917e:	2b0a      	cmp	r3, #10
 8009180:	d103      	bne.n	800918a <DRV_updateFromBluetooth+0x256>
      DRV_moveBackwardLeft(DRV_BUTTONS_FIXED_SPEED);
 8009182:	2028      	movs	r0, #40	; 0x28
 8009184:	f000 fb78 	bl	8009878 <DRV_moveBackwardLeft>
  return;
 8009188:	e002      	b.n	8009190 <DRV_updateFromBluetooth+0x25c>
      DRV_sleep();
 800918a:	f000 f9f9 	bl	8009580 <DRV_sleep>
  return;
 800918e:	bf00      	nop
 8009190:	bf00      	nop
}
 8009192:	3710      	adds	r7, #16
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}
 8009198:	200000ef 	.word	0x200000ef
 800919c:	0800c660 	.word	0x0800c660
 80091a0:	0800c68c 	.word	0x0800c68c
 80091a4:	0800c6bc 	.word	0x0800c6bc
 80091a8:	200000ed 	.word	0x200000ed
 80091ac:	0800c6ec 	.word	0x0800c6ec
 80091b0:	0800c704 	.word	0x0800c704

080091b4 <DRV_updateFromMaster>:

void DRV_updateFromMaster(T_SFO_Context *p_commandsFifo, uint16_t p_deltaTime)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b092      	sub	sp, #72	; 0x48
 80091b8:	af02      	add	r7, sp, #8
 80091ba:	6078      	str	r0, [r7, #4]
 80091bc:	460b      	mov	r3, r1
 80091be:	807b      	strh	r3, [r7, #2]
  int32_t    l_pidSpeedRearLeft;
  T_SFO_data l_command;
  int32_t    l_speed;

  /* Ignore master board data only whenever a manual mode is selected */
  if (g_DRV_mode != DRV_MODE_MASTER_BOARD_CONTROL)
 80091c0:	4b80      	ldr	r3, [pc, #512]	; (80093c4 <DRV_updateFromMaster+0x210>)
 80091c2:	781b      	ldrb	r3, [r3, #0]
 80091c4:	2b02      	cmp	r3, #2
 80091c6:	f040 80f8 	bne.w	80093ba <DRV_updateFromMaster+0x206>
  }
  else
  {
    /* Deal with only one command per cycle. If a FIFO overflow occurs, */
    /* FIFO string will report an error, showing us a design issue...   */
    if (SFO_getCount(p_commandsFifo) != 0)
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	f001 f9d0 	bl	800a570 <SFO_getCount>
 80091d0:	4603      	mov	r3, r0
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	f000 80ac 	beq.w	8009330 <DRV_updateFromMaster+0x17c>
    {
      SFO_logInfo(p_commandsFifo);
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	f001 f9d5 	bl	800a588 <SFO_logInfo>
      SFO_pop    (p_commandsFifo         , &l_command);
 80091de:	f107 030c 	add.w	r3, r7, #12
 80091e2:	4619      	mov	r1, r3
 80091e4:	6878      	ldr	r0, [r7, #4]
 80091e6:	f001 f983 	bl	800a4f0 <SFO_pop>
      LOG_info   ("Drive got command: %s",  l_command);
 80091ea:	f107 030c 	add.w	r3, r7, #12
 80091ee:	461a      	mov	r2, r3
 80091f0:	4975      	ldr	r1, [pc, #468]	; (80093c8 <DRV_updateFromMaster+0x214>)
 80091f2:	2001      	movs	r0, #1
 80091f4:	f000 fe14 	bl	8009e20 <LOG_log>

      l_speed = atoi(&l_command[2]);
 80091f8:	f107 030c 	add.w	r3, r7, #12
 80091fc:	3302      	adds	r3, #2
 80091fe:	4618      	mov	r0, r3
 8009200:	f001 fb08 	bl	800a814 <atoi>
 8009204:	63f8      	str	r0, [r7, #60]	; 0x3c

      /* Check that speed is in allowed range */
      if ((l_speed < STP_CONSOLE_MIN_SPEED) || (l_speed > STP_CONSOLE_MAX_SPEED))
 8009206:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009208:	2b00      	cmp	r3, #0
 800920a:	db02      	blt.n	8009212 <DRV_updateFromMaster+0x5e>
 800920c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800920e:	2b64      	cmp	r3, #100	; 0x64
 8009210:	dd05      	ble.n	800921e <DRV_updateFromMaster+0x6a>
      {
        LOG_error("Drive got out of range speed: %d", l_speed);
 8009212:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009214:	496d      	ldr	r1, [pc, #436]	; (80093cc <DRV_updateFromMaster+0x218>)
 8009216:	2003      	movs	r0, #3
 8009218:	f000 fe02 	bl	8009e20 <LOG_log>
 800921c:	e088      	b.n	8009330 <DRV_updateFromMaster+0x17c>
      }
      else
      {
        l_speed = UTI_normalizeIntValue(l_speed ,
 800921e:	2300      	movs	r3, #0
 8009220:	9301      	str	r3, [sp, #4]
 8009222:	2328      	movs	r3, #40	; 0x28
 8009224:	9300      	str	r3, [sp, #0]
 8009226:	2300      	movs	r3, #0
 8009228:	2264      	movs	r2, #100	; 0x64
 800922a:	2100      	movs	r1, #0
 800922c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800922e:	f001 faa2 	bl	800a776 <UTI_normalizeIntValue>
 8009232:	63f8      	str	r0, [r7, #60]	; 0x3c
                                        STP_DRIVE_MIN_SPEED,
                                        STP_DRIVE_MAX_SPEED,
                                        false);

        /* Forward Straight */
        if ((l_command[0] == 'S') && (l_command[1] == 'T'))
 8009234:	7b3b      	ldrb	r3, [r7, #12]
 8009236:	2b53      	cmp	r3, #83	; 0x53
 8009238:	d105      	bne.n	8009246 <DRV_updateFromMaster+0x92>
 800923a:	7b7b      	ldrb	r3, [r7, #13]
 800923c:	2b54      	cmp	r3, #84	; 0x54
 800923e:	d102      	bne.n	8009246 <DRV_updateFromMaster+0x92>
        {
          DRV_sleep();
 8009240:	f000 f99e 	bl	8009580 <DRV_sleep>
 8009244:	e074      	b.n	8009330 <DRV_updateFromMaster+0x17c>
        }
        else if ((l_command[0] == 'F') && (l_command[1] == 'S'))
 8009246:	7b3b      	ldrb	r3, [r7, #12]
 8009248:	2b46      	cmp	r3, #70	; 0x46
 800924a:	d107      	bne.n	800925c <DRV_updateFromMaster+0xa8>
 800924c:	7b7b      	ldrb	r3, [r7, #13]
 800924e:	2b53      	cmp	r3, #83	; 0x53
 8009250:	d104      	bne.n	800925c <DRV_updateFromMaster+0xa8>
        {
          DRV_moveForward(l_speed);
 8009252:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009254:	4618      	mov	r0, r3
 8009256:	f000 f9bf 	bl	80095d8 <DRV_moveForward>
 800925a:	e069      	b.n	8009330 <DRV_updateFromMaster+0x17c>
        }
        /* Move Backward */
        else if ((l_command[0] == 'B') && (l_command[1] == 'S'))
 800925c:	7b3b      	ldrb	r3, [r7, #12]
 800925e:	2b42      	cmp	r3, #66	; 0x42
 8009260:	d107      	bne.n	8009272 <DRV_updateFromMaster+0xbe>
 8009262:	7b7b      	ldrb	r3, [r7, #13]
 8009264:	2b53      	cmp	r3, #83	; 0x53
 8009266:	d104      	bne.n	8009272 <DRV_updateFromMaster+0xbe>
        {
          DRV_moveBackward(l_speed);
 8009268:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800926a:	4618      	mov	r0, r3
 800926c:	f000 f9fc 	bl	8009668 <DRV_moveBackward>
 8009270:	e05e      	b.n	8009330 <DRV_updateFromMaster+0x17c>
        }
        /* TurN (i.e. Rotate) Left */
        else if ((l_command[0] == 'R') && (l_command[1] == 'L'))
 8009272:	7b3b      	ldrb	r3, [r7, #12]
 8009274:	2b52      	cmp	r3, #82	; 0x52
 8009276:	d107      	bne.n	8009288 <DRV_updateFromMaster+0xd4>
 8009278:	7b7b      	ldrb	r3, [r7, #13]
 800927a:	2b4c      	cmp	r3, #76	; 0x4c
 800927c:	d104      	bne.n	8009288 <DRV_updateFromMaster+0xd4>
        {
          DRV_turnLeft(l_speed);
 800927e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009280:	4618      	mov	r0, r3
 8009282:	f000 fb39 	bl	80098f8 <DRV_turnLeft>
 8009286:	e053      	b.n	8009330 <DRV_updateFromMaster+0x17c>
        }
        /* TurN (i.e. Rotate) Right */
        else if ((l_command[0] == 'R') && (l_command[1] == 'R'))
 8009288:	7b3b      	ldrb	r3, [r7, #12]
 800928a:	2b52      	cmp	r3, #82	; 0x52
 800928c:	d107      	bne.n	800929e <DRV_updateFromMaster+0xea>
 800928e:	7b7b      	ldrb	r3, [r7, #13]
 8009290:	2b52      	cmp	r3, #82	; 0x52
 8009292:	d104      	bne.n	800929e <DRV_updateFromMaster+0xea>
        {
          DRV_turnRight(l_speed);
 8009294:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009296:	4618      	mov	r0, r3
 8009298:	f000 fb76 	bl	8009988 <DRV_turnRight>
 800929c:	e048      	b.n	8009330 <DRV_updateFromMaster+0x17c>
        }
        /* Translate Left */
        else if ((l_command[0] == 'T') && (l_command[1] == 'L'))
 800929e:	7b3b      	ldrb	r3, [r7, #12]
 80092a0:	2b54      	cmp	r3, #84	; 0x54
 80092a2:	d107      	bne.n	80092b4 <DRV_updateFromMaster+0x100>
 80092a4:	7b7b      	ldrb	r3, [r7, #13]
 80092a6:	2b4c      	cmp	r3, #76	; 0x4c
 80092a8:	d104      	bne.n	80092b4 <DRV_updateFromMaster+0x100>
        {
          DRV_translateLeft(l_speed);
 80092aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092ac:	4618      	mov	r0, r3
 80092ae:	f000 fbb3 	bl	8009a18 <DRV_translateLeft>
 80092b2:	e03d      	b.n	8009330 <DRV_updateFromMaster+0x17c>
        }
        /* Translate Right */
        else if ((l_command[0] == 'T') && (l_command[1] == 'R'))
 80092b4:	7b3b      	ldrb	r3, [r7, #12]
 80092b6:	2b54      	cmp	r3, #84	; 0x54
 80092b8:	d107      	bne.n	80092ca <DRV_updateFromMaster+0x116>
 80092ba:	7b7b      	ldrb	r3, [r7, #13]
 80092bc:	2b52      	cmp	r3, #82	; 0x52
 80092be:	d104      	bne.n	80092ca <DRV_updateFromMaster+0x116>
        {
          DRV_translateRight(l_speed);
 80092c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092c2:	4618      	mov	r0, r3
 80092c4:	f000 fbf0 	bl	8009aa8 <DRV_translateRight>
 80092c8:	e032      	b.n	8009330 <DRV_updateFromMaster+0x17c>
        }
        /* Forward Left */
        else if ((l_command[0] == 'F') && (l_command[1] == 'L'))
 80092ca:	7b3b      	ldrb	r3, [r7, #12]
 80092cc:	2b46      	cmp	r3, #70	; 0x46
 80092ce:	d107      	bne.n	80092e0 <DRV_updateFromMaster+0x12c>
 80092d0:	7b7b      	ldrb	r3, [r7, #13]
 80092d2:	2b4c      	cmp	r3, #76	; 0x4c
 80092d4:	d104      	bne.n	80092e0 <DRV_updateFromMaster+0x12c>
        {
          DRV_moveForwardLeft(l_speed);
 80092d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092d8:	4618      	mov	r0, r3
 80092da:	f000 fa4d 	bl	8009778 <DRV_moveForwardLeft>
 80092de:	e027      	b.n	8009330 <DRV_updateFromMaster+0x17c>
        }
        /* Forward Right */
        else if ((l_command[0] == 'F') && (l_command[1] == 'R'))
 80092e0:	7b3b      	ldrb	r3, [r7, #12]
 80092e2:	2b46      	cmp	r3, #70	; 0x46
 80092e4:	d107      	bne.n	80092f6 <DRV_updateFromMaster+0x142>
 80092e6:	7b7b      	ldrb	r3, [r7, #13]
 80092e8:	2b52      	cmp	r3, #82	; 0x52
 80092ea:	d104      	bne.n	80092f6 <DRV_updateFromMaster+0x142>
        {
          DRV_moveForwardRight(l_speed);
 80092ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092ee:	4618      	mov	r0, r3
 80092f0:	f000 fa02 	bl	80096f8 <DRV_moveForwardRight>
 80092f4:	e01c      	b.n	8009330 <DRV_updateFromMaster+0x17c>
        }
        /* Backward Left */
        else if ((l_command[0] == 'B') && (l_command[1] == 'L'))
 80092f6:	7b3b      	ldrb	r3, [r7, #12]
 80092f8:	2b42      	cmp	r3, #66	; 0x42
 80092fa:	d107      	bne.n	800930c <DRV_updateFromMaster+0x158>
 80092fc:	7b7b      	ldrb	r3, [r7, #13]
 80092fe:	2b4c      	cmp	r3, #76	; 0x4c
 8009300:	d104      	bne.n	800930c <DRV_updateFromMaster+0x158>
        {
          DRV_moveBackwardLeft(l_speed);
 8009302:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009304:	4618      	mov	r0, r3
 8009306:	f000 fab7 	bl	8009878 <DRV_moveBackwardLeft>
 800930a:	e011      	b.n	8009330 <DRV_updateFromMaster+0x17c>
        }
        /* Forward Right */
        else if ((l_command[0] == 'B') && (l_command[1] == 'R'))
 800930c:	7b3b      	ldrb	r3, [r7, #12]
 800930e:	2b42      	cmp	r3, #66	; 0x42
 8009310:	d107      	bne.n	8009322 <DRV_updateFromMaster+0x16e>
 8009312:	7b7b      	ldrb	r3, [r7, #13]
 8009314:	2b52      	cmp	r3, #82	; 0x52
 8009316:	d104      	bne.n	8009322 <DRV_updateFromMaster+0x16e>
        {
          DRV_moveBackwardRight(l_speed);
 8009318:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800931a:	4618      	mov	r0, r3
 800931c:	f000 fa6c 	bl	80097f8 <DRV_moveBackwardRight>
 8009320:	e006      	b.n	8009330 <DRV_updateFromMaster+0x17c>
        }
        else
        {
          LOG_error("Drive got unsupported command: '%s'", l_command);
 8009322:	f107 030c 	add.w	r3, r7, #12
 8009326:	461a      	mov	r2, r3
 8009328:	4929      	ldr	r1, [pc, #164]	; (80093d0 <DRV_updateFromMaster+0x21c>)
 800932a:	2003      	movs	r0, #3
 800932c:	f000 fd78 	bl	8009e20 <LOG_log>
        }
      }
    }

    /* Get measurements */
    l_measuredSpeedFrontRight = ENC_getCount(&g_DRV_encoderFrontRight);
 8009330:	4828      	ldr	r0, [pc, #160]	; (80093d4 <DRV_updateFromMaster+0x220>)
 8009332:	f000 fc49 	bl	8009bc8 <ENC_getCount>
 8009336:	4603      	mov	r3, r0
 8009338:	63bb      	str	r3, [r7, #56]	; 0x38
    l_measuredSpeedFrontLeft  = ENC_getCount(&g_DRV_encoderFrontLeft );
 800933a:	4827      	ldr	r0, [pc, #156]	; (80093d8 <DRV_updateFromMaster+0x224>)
 800933c:	f000 fc44 	bl	8009bc8 <ENC_getCount>
 8009340:	4603      	mov	r3, r0
 8009342:	637b      	str	r3, [r7, #52]	; 0x34
    l_measuredSpeedRearRight  = ENC_getCount(&g_DRV_encoderRearRight );
 8009344:	4825      	ldr	r0, [pc, #148]	; (80093dc <DRV_updateFromMaster+0x228>)
 8009346:	f000 fc3f 	bl	8009bc8 <ENC_getCount>
 800934a:	4603      	mov	r3, r0
 800934c:	633b      	str	r3, [r7, #48]	; 0x30
    l_measuredSpeedRearLeft   = ENC_getCount(&g_DRV_encoderRearLeft  );
 800934e:	4824      	ldr	r0, [pc, #144]	; (80093e0 <DRV_updateFromMaster+0x22c>)
 8009350:	f000 fc3a 	bl	8009bc8 <ENC_getCount>
 8009354:	4603      	mov	r3, r0
 8009356:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Update PIDs */
    l_pidSpeedFrontRight = PID_update(&g_DRV_pidFrontRight, l_measuredSpeedFrontRight, p_deltaTime);
 8009358:	887b      	ldrh	r3, [r7, #2]
 800935a:	461a      	mov	r2, r3
 800935c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800935e:	4821      	ldr	r0, [pc, #132]	; (80093e4 <DRV_updateFromMaster+0x230>)
 8009360:	f000 ffc6 	bl	800a2f0 <PID_update>
 8009364:	62b8      	str	r0, [r7, #40]	; 0x28
    l_pidSpeedFrontLeft  = PID_update(&g_DRV_pidFrontLeft , l_measuredSpeedFrontLeft , p_deltaTime);
 8009366:	887b      	ldrh	r3, [r7, #2]
 8009368:	461a      	mov	r2, r3
 800936a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800936c:	481e      	ldr	r0, [pc, #120]	; (80093e8 <DRV_updateFromMaster+0x234>)
 800936e:	f000 ffbf 	bl	800a2f0 <PID_update>
 8009372:	6278      	str	r0, [r7, #36]	; 0x24
    l_pidSpeedRearRight  = PID_update(&g_DRV_pidRearRight , l_measuredSpeedRearRight , p_deltaTime);
 8009374:	887b      	ldrh	r3, [r7, #2]
 8009376:	461a      	mov	r2, r3
 8009378:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800937a:	481c      	ldr	r0, [pc, #112]	; (80093ec <DRV_updateFromMaster+0x238>)
 800937c:	f000 ffb8 	bl	800a2f0 <PID_update>
 8009380:	6238      	str	r0, [r7, #32]
    l_pidSpeedRearLeft   = PID_update(&g_DRV_pidRearLeft  , l_measuredSpeedRearLeft  , p_deltaTime);
 8009382:	887b      	ldrh	r3, [r7, #2]
 8009384:	461a      	mov	r2, r3
 8009386:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009388:	4819      	ldr	r0, [pc, #100]	; (80093f0 <DRV_updateFromMaster+0x23c>)
 800938a:	f000 ffb1 	bl	800a2f0 <PID_update>
 800938e:	61f8      	str	r0, [r7, #28]

    /* Update motors */
    MTR_setSpeed(&g_DRV_motorFrontRight, l_pidSpeedFrontRight);
 8009390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009392:	4619      	mov	r1, r3
 8009394:	4817      	ldr	r0, [pc, #92]	; (80093f4 <DRV_updateFromMaster+0x240>)
 8009396:	f000 ff0d 	bl	800a1b4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_pidSpeedFrontLeft );
 800939a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800939c:	4619      	mov	r1, r3
 800939e:	4816      	ldr	r0, [pc, #88]	; (80093f8 <DRV_updateFromMaster+0x244>)
 80093a0:	f000 ff08 	bl	800a1b4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_pidSpeedRearRight );
 80093a4:	6a3b      	ldr	r3, [r7, #32]
 80093a6:	4619      	mov	r1, r3
 80093a8:	4814      	ldr	r0, [pc, #80]	; (80093fc <DRV_updateFromMaster+0x248>)
 80093aa:	f000 ff03 	bl	800a1b4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_pidSpeedRearLeft  );
 80093ae:	69fb      	ldr	r3, [r7, #28]
 80093b0:	4619      	mov	r1, r3
 80093b2:	4813      	ldr	r0, [pc, #76]	; (8009400 <DRV_updateFromMaster+0x24c>)
 80093b4:	f000 fefe 	bl	800a1b4 <MTR_setSpeed>
  }

  return;
 80093b8:	bf00      	nop
 80093ba:	bf00      	nop
}
 80093bc:	3740      	adds	r7, #64	; 0x40
 80093be:	46bd      	mov	sp, r7
 80093c0:	bd80      	pop	{r7, pc}
 80093c2:	bf00      	nop
 80093c4:	200000ef 	.word	0x200000ef
 80093c8:	0800c71c 	.word	0x0800c71c
 80093cc:	0800c734 	.word	0x0800c734
 80093d0:	0800c758 	.word	0x0800c758
 80093d4:	20000240 	.word	0x20000240
 80093d8:	2000024c 	.word	0x2000024c
 80093dc:	20000264 	.word	0x20000264
 80093e0:	20000258 	.word	0x20000258
 80093e4:	200000f0 	.word	0x200000f0
 80093e8:	20000120 	.word	0x20000120
 80093ec:	20000180 	.word	0x20000180
 80093f0:	20000150 	.word	0x20000150
 80093f4:	200001b0 	.word	0x200001b0
 80093f8:	200001d4 	.word	0x200001d4
 80093fc:	2000021c 	.word	0x2000021c
 8009400:	200001f8 	.word	0x200001f8

08009404 <DRV_getMode>:

T_DRV_MODE DRV_getMode(void)
{
 8009404:	b480      	push	{r7}
 8009406:	af00      	add	r7, sp, #0
  return g_DRV_mode;
 8009408:	4b02      	ldr	r3, [pc, #8]	; (8009414 <DRV_getMode+0x10>)
 800940a:	781b      	ldrb	r3, [r3, #0]
}
 800940c:	4618      	mov	r0, r3
 800940e:	46bd      	mov	sp, r7
 8009410:	bc80      	pop	{r7}
 8009412:	4770      	bx	lr
 8009414:	200000ef 	.word	0x200000ef

08009418 <DRV_logInfo>:

void DRV_logInfo(void)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b084      	sub	sp, #16
 800941c:	af02      	add	r7, sp, #8
  T_MTR_DIRECTION l_direction;
  uint32_t        l_speed;

  if (g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED)
 800941e:	4b44      	ldr	r3, [pc, #272]	; (8009530 <DRV_logInfo+0x118>)
 8009420:	781b      	ldrb	r3, [r3, #0]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d104      	bne.n	8009430 <DRV_logInfo+0x18>
  {
    LOG_info("Mode  : MANUAL FIXED SPEED");
 8009426:	4943      	ldr	r1, [pc, #268]	; (8009534 <DRV_logInfo+0x11c>)
 8009428:	2001      	movs	r0, #1
 800942a:	f000 fcf9 	bl	8009e20 <LOG_log>
 800942e:	e018      	b.n	8009462 <DRV_logInfo+0x4a>
  }
  else if (g_DRV_mode == DRV_MODE_MANUAL_VARIABLE_SPEED)
 8009430:	4b3f      	ldr	r3, [pc, #252]	; (8009530 <DRV_logInfo+0x118>)
 8009432:	781b      	ldrb	r3, [r3, #0]
 8009434:	2b01      	cmp	r3, #1
 8009436:	d104      	bne.n	8009442 <DRV_logInfo+0x2a>
  {
    LOG_info("Mode  : MANUAL VARIABLE SPEED");
 8009438:	493f      	ldr	r1, [pc, #252]	; (8009538 <DRV_logInfo+0x120>)
 800943a:	2001      	movs	r0, #1
 800943c:	f000 fcf0 	bl	8009e20 <LOG_log>
 8009440:	e00f      	b.n	8009462 <DRV_logInfo+0x4a>
  }
  else if (g_DRV_mode == DRV_MODE_MASTER_BOARD_CONTROL)
 8009442:	4b3b      	ldr	r3, [pc, #236]	; (8009530 <DRV_logInfo+0x118>)
 8009444:	781b      	ldrb	r3, [r3, #0]
 8009446:	2b02      	cmp	r3, #2
 8009448:	d104      	bne.n	8009454 <DRV_logInfo+0x3c>
  {
    LOG_info("Mode  : MASTER BOARD CONTROL");
 800944a:	493c      	ldr	r1, [pc, #240]	; (800953c <DRV_logInfo+0x124>)
 800944c:	2001      	movs	r0, #1
 800944e:	f000 fce7 	bl	8009e20 <LOG_log>
 8009452:	e006      	b.n	8009462 <DRV_logInfo+0x4a>
  }
  else
  {
    LOG_error("Unsupported drive mode: %u", g_DRV_mode);
 8009454:	4b36      	ldr	r3, [pc, #216]	; (8009530 <DRV_logInfo+0x118>)
 8009456:	781b      	ldrb	r3, [r3, #0]
 8009458:	461a      	mov	r2, r3
 800945a:	4939      	ldr	r1, [pc, #228]	; (8009540 <DRV_logInfo+0x128>)
 800945c:	2003      	movs	r0, #3
 800945e:	f000 fcdf 	bl	8009e20 <LOG_log>
  }

  if (g_DRV_isDriveOn == true)
 8009462:	4b38      	ldr	r3, [pc, #224]	; (8009544 <DRV_logInfo+0x12c>)
 8009464:	781b      	ldrb	r3, [r3, #0]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d004      	beq.n	8009474 <DRV_logInfo+0x5c>
  {
    LOG_info("Drive : ON");
 800946a:	4937      	ldr	r1, [pc, #220]	; (8009548 <DRV_logInfo+0x130>)
 800946c:	2001      	movs	r0, #1
 800946e:	f000 fcd7 	bl	8009e20 <LOG_log>
 8009472:	e003      	b.n	800947c <DRV_logInfo+0x64>
  }
  else
  {
    LOG_info("Drive : OFF");
 8009474:	4935      	ldr	r1, [pc, #212]	; (800954c <DRV_logInfo+0x134>)
 8009476:	2001      	movs	r0, #1
 8009478:	f000 fcd2 	bl	8009e20 <LOG_log>
  }

  if (g_DRV_areMotorsOn == true)
 800947c:	4b34      	ldr	r3, [pc, #208]	; (8009550 <DRV_logInfo+0x138>)
 800947e:	781b      	ldrb	r3, [r3, #0]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d004      	beq.n	800948e <DRV_logInfo+0x76>
  {
    LOG_info("Motors: ON");
 8009484:	4933      	ldr	r1, [pc, #204]	; (8009554 <DRV_logInfo+0x13c>)
 8009486:	2001      	movs	r0, #1
 8009488:	f000 fcca 	bl	8009e20 <LOG_log>
 800948c:	e003      	b.n	8009496 <DRV_logInfo+0x7e>
  }
  else
  {
    LOG_info("Motors: OFF");
 800948e:	4932      	ldr	r1, [pc, #200]	; (8009558 <DRV_logInfo+0x140>)
 8009490:	2001      	movs	r0, #1
 8009492:	f000 fcc5 	bl	8009e20 <LOG_log>
  }

  l_direction = MTR_getDirection(&g_DRV_motorFrontLeft);
 8009496:	4831      	ldr	r0, [pc, #196]	; (800955c <DRV_logInfo+0x144>)
 8009498:	f000 fe80 	bl	800a19c <MTR_getDirection>
 800949c:	4603      	mov	r3, r0
 800949e:	71fb      	strb	r3, [r7, #7]
  l_speed     = MTR_getSpeed    (&g_DRV_motorFrontLeft);
 80094a0:	482e      	ldr	r0, [pc, #184]	; (800955c <DRV_logInfo+0x144>)
 80094a2:	f000 fec5 	bl	800a230 <MTR_getSpeed>
 80094a6:	6038      	str	r0, [r7, #0]

  LOG_info("%s motor direction/speed: %u/%u", DRV_FRONT_LEFT_MOTOR_NAME, l_direction, l_speed);
 80094a8:	79fa      	ldrb	r2, [r7, #7]
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	9300      	str	r3, [sp, #0]
 80094ae:	4613      	mov	r3, r2
 80094b0:	4a2b      	ldr	r2, [pc, #172]	; (8009560 <DRV_logInfo+0x148>)
 80094b2:	492c      	ldr	r1, [pc, #176]	; (8009564 <DRV_logInfo+0x14c>)
 80094b4:	2001      	movs	r0, #1
 80094b6:	f000 fcb3 	bl	8009e20 <LOG_log>

  l_direction = MTR_getDirection(&g_DRV_motorFrontRight);
 80094ba:	482b      	ldr	r0, [pc, #172]	; (8009568 <DRV_logInfo+0x150>)
 80094bc:	f000 fe6e 	bl	800a19c <MTR_getDirection>
 80094c0:	4603      	mov	r3, r0
 80094c2:	71fb      	strb	r3, [r7, #7]
  l_speed     = MTR_getSpeed    (&g_DRV_motorFrontRight);
 80094c4:	4828      	ldr	r0, [pc, #160]	; (8009568 <DRV_logInfo+0x150>)
 80094c6:	f000 feb3 	bl	800a230 <MTR_getSpeed>
 80094ca:	6038      	str	r0, [r7, #0]

  LOG_info("%s motor direction/speed: %u/%u", DRV_FRONT_RIGHT_MOTOR_NAME, l_direction, l_speed);
 80094cc:	79fa      	ldrb	r2, [r7, #7]
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	9300      	str	r3, [sp, #0]
 80094d2:	4613      	mov	r3, r2
 80094d4:	4a25      	ldr	r2, [pc, #148]	; (800956c <DRV_logInfo+0x154>)
 80094d6:	4923      	ldr	r1, [pc, #140]	; (8009564 <DRV_logInfo+0x14c>)
 80094d8:	2001      	movs	r0, #1
 80094da:	f000 fca1 	bl	8009e20 <LOG_log>

  l_direction = MTR_getDirection(&g_DRV_motorRearLeft);
 80094de:	4824      	ldr	r0, [pc, #144]	; (8009570 <DRV_logInfo+0x158>)
 80094e0:	f000 fe5c 	bl	800a19c <MTR_getDirection>
 80094e4:	4603      	mov	r3, r0
 80094e6:	71fb      	strb	r3, [r7, #7]
  l_speed     = MTR_getSpeed    (&g_DRV_motorRearLeft);
 80094e8:	4821      	ldr	r0, [pc, #132]	; (8009570 <DRV_logInfo+0x158>)
 80094ea:	f000 fea1 	bl	800a230 <MTR_getSpeed>
 80094ee:	6038      	str	r0, [r7, #0]

  LOG_info("%s motor direction/speed: %u/%u", DRV_REAR_LEFT_MOTOR_NAME, l_direction, l_speed);
 80094f0:	79fa      	ldrb	r2, [r7, #7]
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	9300      	str	r3, [sp, #0]
 80094f6:	4613      	mov	r3, r2
 80094f8:	4a1e      	ldr	r2, [pc, #120]	; (8009574 <DRV_logInfo+0x15c>)
 80094fa:	491a      	ldr	r1, [pc, #104]	; (8009564 <DRV_logInfo+0x14c>)
 80094fc:	2001      	movs	r0, #1
 80094fe:	f000 fc8f 	bl	8009e20 <LOG_log>

  l_direction = MTR_getDirection(&g_DRV_motorRearRight);
 8009502:	481d      	ldr	r0, [pc, #116]	; (8009578 <DRV_logInfo+0x160>)
 8009504:	f000 fe4a 	bl	800a19c <MTR_getDirection>
 8009508:	4603      	mov	r3, r0
 800950a:	71fb      	strb	r3, [r7, #7]
  l_speed     = MTR_getSpeed    (&g_DRV_motorRearRight);
 800950c:	481a      	ldr	r0, [pc, #104]	; (8009578 <DRV_logInfo+0x160>)
 800950e:	f000 fe8f 	bl	800a230 <MTR_getSpeed>
 8009512:	6038      	str	r0, [r7, #0]

  LOG_info("%s motor direction/speed: %u/%u", DRV_REAR_RIGHT_MOTOR_NAME, l_direction, l_speed);
 8009514:	79fa      	ldrb	r2, [r7, #7]
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	9300      	str	r3, [sp, #0]
 800951a:	4613      	mov	r3, r2
 800951c:	4a17      	ldr	r2, [pc, #92]	; (800957c <DRV_logInfo+0x164>)
 800951e:	4911      	ldr	r1, [pc, #68]	; (8009564 <DRV_logInfo+0x14c>)
 8009520:	2001      	movs	r0, #1
 8009522:	f000 fc7d 	bl	8009e20 <LOG_log>

  return;
 8009526:	bf00      	nop
}
 8009528:	3708      	adds	r7, #8
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}
 800952e:	bf00      	nop
 8009530:	200000ef 	.word	0x200000ef
 8009534:	0800c77c 	.word	0x0800c77c
 8009538:	0800c798 	.word	0x0800c798
 800953c:	0800c7b8 	.word	0x0800c7b8
 8009540:	0800c7d8 	.word	0x0800c7d8
 8009544:	200000ee 	.word	0x200000ee
 8009548:	0800c7f4 	.word	0x0800c7f4
 800954c:	0800c800 	.word	0x0800c800
 8009550:	200000ed 	.word	0x200000ed
 8009554:	0800c80c 	.word	0x0800c80c
 8009558:	0800c818 	.word	0x0800c818
 800955c:	200001d4 	.word	0x200001d4
 8009560:	0800c63c 	.word	0x0800c63c
 8009564:	0800c824 	.word	0x0800c824
 8009568:	200001b0 	.word	0x200001b0
 800956c:	0800c630 	.word	0x0800c630
 8009570:	200001f8 	.word	0x200001f8
 8009574:	0800c648 	.word	0x0800c648
 8009578:	2000021c 	.word	0x2000021c
 800957c:	0800c654 	.word	0x0800c654

08009580 <DRV_sleep>:

static void DRV_sleep(void)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	af00      	add	r7, sp, #0
  if (g_DRV_isDriveOn == true)
 8009584:	4b0e      	ldr	r3, [pc, #56]	; (80095c0 <DRV_sleep+0x40>)
 8009586:	781b      	ldrb	r3, [r3, #0]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d017      	beq.n	80095bc <DRV_sleep+0x3c>
  {
    LOG_debug("Drive going to sleep");
 800958c:	490d      	ldr	r1, [pc, #52]	; (80095c4 <DRV_sleep+0x44>)
 800958e:	2000      	movs	r0, #0
 8009590:	f000 fc46 	bl	8009e20 <LOG_log>

    MTR_setSpeed(&g_DRV_motorFrontRight, 0);
 8009594:	2100      	movs	r1, #0
 8009596:	480c      	ldr	r0, [pc, #48]	; (80095c8 <DRV_sleep+0x48>)
 8009598:	f000 fe0c 	bl	800a1b4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , 0);
 800959c:	2100      	movs	r1, #0
 800959e:	480b      	ldr	r0, [pc, #44]	; (80095cc <DRV_sleep+0x4c>)
 80095a0:	f000 fe08 	bl	800a1b4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , 0);
 80095a4:	2100      	movs	r1, #0
 80095a6:	480a      	ldr	r0, [pc, #40]	; (80095d0 <DRV_sleep+0x50>)
 80095a8:	f000 fe04 	bl	800a1b4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , 0);
 80095ac:	2100      	movs	r1, #0
 80095ae:	4809      	ldr	r0, [pc, #36]	; (80095d4 <DRV_sleep+0x54>)
 80095b0:	f000 fe00 	bl	800a1b4 <MTR_setSpeed>

    g_DRV_isDriveOn = false;
 80095b4:	4b02      	ldr	r3, [pc, #8]	; (80095c0 <DRV_sleep+0x40>)
 80095b6:	2200      	movs	r2, #0
 80095b8:	701a      	strb	r2, [r3, #0]
  else
  {
    ; /* Nothing to do */
  }

  return;
 80095ba:	bf00      	nop
 80095bc:	bf00      	nop
}
 80095be:	bd80      	pop	{r7, pc}
 80095c0:	200000ee 	.word	0x200000ee
 80095c4:	0800c844 	.word	0x0800c844
 80095c8:	200001b0 	.word	0x200001b0
 80095cc:	200001d4 	.word	0x200001d4
 80095d0:	2000021c 	.word	0x2000021c
 80095d4:	200001f8 	.word	0x200001f8

080095d8 <DRV_moveForward>:

static void DRV_moveForward(uint32_t p_speed)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b084      	sub	sp, #16
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	60fb      	str	r3, [r7, #12]

  LOG_debug("Moving forward @%u", l_speed);
 80095e4:	68fa      	ldr	r2, [r7, #12]
 80095e6:	4919      	ldr	r1, [pc, #100]	; (800964c <DRV_moveForward+0x74>)
 80095e8:	2000      	movs	r0, #0
 80095ea:	f000 fc19 	bl	8009e20 <LOG_log>

  g_DRV_isDriveOn = true;
 80095ee:	4b18      	ldr	r3, [pc, #96]	; (8009650 <DRV_moveForward+0x78>)
 80095f0:	2201      	movs	r2, #1
 80095f2:	701a      	strb	r2, [r3, #0]

  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_FORWARD);
 80095f4:	2101      	movs	r1, #1
 80095f6:	4817      	ldr	r0, [pc, #92]	; (8009654 <DRV_moveForward+0x7c>)
 80095f8:	f000 fd64 	bl	800a0c4 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorFrontLeft , MTR_DIRECTION_FORWARD);
 80095fc:	2101      	movs	r1, #1
 80095fe:	4816      	ldr	r0, [pc, #88]	; (8009658 <DRV_moveForward+0x80>)
 8009600:	f000 fd60 	bl	800a0c4 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight , MTR_DIRECTION_FORWARD);
 8009604:	2101      	movs	r1, #1
 8009606:	4815      	ldr	r0, [pc, #84]	; (800965c <DRV_moveForward+0x84>)
 8009608:	f000 fd5c 	bl	800a0c4 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_FORWARD);
 800960c:	2101      	movs	r1, #1
 800960e:	4814      	ldr	r0, [pc, #80]	; (8009660 <DRV_moveForward+0x88>)
 8009610:	f000 fd58 	bl	800a0c4 <MTR_setDirection>

  if (g_DRV_areMotorsOn == false)
 8009614:	4b13      	ldr	r3, [pc, #76]	; (8009664 <DRV_moveForward+0x8c>)
 8009616:	781b      	ldrb	r3, [r3, #0]
 8009618:	f083 0301 	eor.w	r3, r3, #1
 800961c:	b2db      	uxtb	r3, r3
 800961e:	2b00      	cmp	r3, #0
 8009620:	d110      	bne.n	8009644 <DRV_moveForward+0x6c>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 8009622:	68f9      	ldr	r1, [r7, #12]
 8009624:	480b      	ldr	r0, [pc, #44]	; (8009654 <DRV_moveForward+0x7c>)
 8009626:	f000 fdc5 	bl	800a1b4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 800962a:	68f9      	ldr	r1, [r7, #12]
 800962c:	480a      	ldr	r0, [pc, #40]	; (8009658 <DRV_moveForward+0x80>)
 800962e:	f000 fdc1 	bl	800a1b4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 8009632:	68f9      	ldr	r1, [r7, #12]
 8009634:	4809      	ldr	r0, [pc, #36]	; (800965c <DRV_moveForward+0x84>)
 8009636:	f000 fdbd 	bl	800a1b4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 800963a:	68f9      	ldr	r1, [r7, #12]
 800963c:	4808      	ldr	r0, [pc, #32]	; (8009660 <DRV_moveForward+0x88>)
 800963e:	f000 fdb9 	bl	800a1b4 <MTR_setSpeed>
  }

  return;
 8009642:	bf00      	nop
 8009644:	bf00      	nop
}
 8009646:	3710      	adds	r7, #16
 8009648:	46bd      	mov	sp, r7
 800964a:	bd80      	pop	{r7, pc}
 800964c:	0800c85c 	.word	0x0800c85c
 8009650:	200000ee 	.word	0x200000ee
 8009654:	200001b0 	.word	0x200001b0
 8009658:	200001d4 	.word	0x200001d4
 800965c:	2000021c 	.word	0x2000021c
 8009660:	200001f8 	.word	0x200001f8
 8009664:	200000ed 	.word	0x200000ed

08009668 <DRV_moveBackward>:

static void DRV_moveBackward(uint32_t p_speed)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b084      	sub	sp, #16
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	60fb      	str	r3, [r7, #12]

  LOG_debug("Moving backward @%u", l_speed);
 8009674:	68fa      	ldr	r2, [r7, #12]
 8009676:	4919      	ldr	r1, [pc, #100]	; (80096dc <DRV_moveBackward+0x74>)
 8009678:	2000      	movs	r0, #0
 800967a:	f000 fbd1 	bl	8009e20 <LOG_log>

  g_DRV_isDriveOn = true;
 800967e:	4b18      	ldr	r3, [pc, #96]	; (80096e0 <DRV_moveBackward+0x78>)
 8009680:	2201      	movs	r2, #1
 8009682:	701a      	strb	r2, [r3, #0]

  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_BACKWARD);
 8009684:	2102      	movs	r1, #2
 8009686:	4817      	ldr	r0, [pc, #92]	; (80096e4 <DRV_moveBackward+0x7c>)
 8009688:	f000 fd1c 	bl	800a0c4 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorFrontLeft , MTR_DIRECTION_BACKWARD);
 800968c:	2102      	movs	r1, #2
 800968e:	4816      	ldr	r0, [pc, #88]	; (80096e8 <DRV_moveBackward+0x80>)
 8009690:	f000 fd18 	bl	800a0c4 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight , MTR_DIRECTION_BACKWARD);
 8009694:	2102      	movs	r1, #2
 8009696:	4815      	ldr	r0, [pc, #84]	; (80096ec <DRV_moveBackward+0x84>)
 8009698:	f000 fd14 	bl	800a0c4 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_BACKWARD);
 800969c:	2102      	movs	r1, #2
 800969e:	4814      	ldr	r0, [pc, #80]	; (80096f0 <DRV_moveBackward+0x88>)
 80096a0:	f000 fd10 	bl	800a0c4 <MTR_setDirection>

  if (g_DRV_areMotorsOn == false)
 80096a4:	4b13      	ldr	r3, [pc, #76]	; (80096f4 <DRV_moveBackward+0x8c>)
 80096a6:	781b      	ldrb	r3, [r3, #0]
 80096a8:	f083 0301 	eor.w	r3, r3, #1
 80096ac:	b2db      	uxtb	r3, r3
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d110      	bne.n	80096d4 <DRV_moveBackward+0x6c>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 80096b2:	68f9      	ldr	r1, [r7, #12]
 80096b4:	480b      	ldr	r0, [pc, #44]	; (80096e4 <DRV_moveBackward+0x7c>)
 80096b6:	f000 fd7d 	bl	800a1b4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 80096ba:	68f9      	ldr	r1, [r7, #12]
 80096bc:	480a      	ldr	r0, [pc, #40]	; (80096e8 <DRV_moveBackward+0x80>)
 80096be:	f000 fd79 	bl	800a1b4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 80096c2:	68f9      	ldr	r1, [r7, #12]
 80096c4:	4809      	ldr	r0, [pc, #36]	; (80096ec <DRV_moveBackward+0x84>)
 80096c6:	f000 fd75 	bl	800a1b4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 80096ca:	68f9      	ldr	r1, [r7, #12]
 80096cc:	4808      	ldr	r0, [pc, #32]	; (80096f0 <DRV_moveBackward+0x88>)
 80096ce:	f000 fd71 	bl	800a1b4 <MTR_setSpeed>
  }

  return;
 80096d2:	bf00      	nop
 80096d4:	bf00      	nop
}
 80096d6:	3710      	adds	r7, #16
 80096d8:	46bd      	mov	sp, r7
 80096da:	bd80      	pop	{r7, pc}
 80096dc:	0800c870 	.word	0x0800c870
 80096e0:	200000ee 	.word	0x200000ee
 80096e4:	200001b0 	.word	0x200001b0
 80096e8:	200001d4 	.word	0x200001d4
 80096ec:	2000021c 	.word	0x2000021c
 80096f0:	200001f8 	.word	0x200001f8
 80096f4:	200000ed 	.word	0x200000ed

080096f8 <DRV_moveForwardRight>:

static void DRV_moveForwardRight (uint32_t p_speed)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b084      	sub	sp, #16
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	60fb      	str	r3, [r7, #12]

  LOG_debug("Moving forward-right @%u", l_speed);
 8009704:	68fa      	ldr	r2, [r7, #12]
 8009706:	4915      	ldr	r1, [pc, #84]	; (800975c <DRV_moveForwardRight+0x64>)
 8009708:	2000      	movs	r0, #0
 800970a:	f000 fb89 	bl	8009e20 <LOG_log>

  g_DRV_isDriveOn = true;
 800970e:	4b14      	ldr	r3, [pc, #80]	; (8009760 <DRV_moveForwardRight+0x68>)
 8009710:	2201      	movs	r2, #1
 8009712:	701a      	strb	r2, [r3, #0]

  MTR_setDirection(&g_DRV_motorFrontLeft, MTR_DIRECTION_FORWARD);
 8009714:	2101      	movs	r1, #1
 8009716:	4813      	ldr	r0, [pc, #76]	; (8009764 <DRV_moveForwardRight+0x6c>)
 8009718:	f000 fcd4 	bl	800a0c4 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight, MTR_DIRECTION_FORWARD);
 800971c:	2101      	movs	r1, #1
 800971e:	4812      	ldr	r0, [pc, #72]	; (8009768 <DRV_moveForwardRight+0x70>)
 8009720:	f000 fcd0 	bl	800a0c4 <MTR_setDirection>

  if (g_DRV_areMotorsOn == false)
 8009724:	4b11      	ldr	r3, [pc, #68]	; (800976c <DRV_moveForwardRight+0x74>)
 8009726:	781b      	ldrb	r3, [r3, #0]
 8009728:	f083 0301 	eor.w	r3, r3, #1
 800972c:	b2db      	uxtb	r3, r3
 800972e:	2b00      	cmp	r3, #0
 8009730:	d110      	bne.n	8009754 <DRV_moveForwardRight+0x5c>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight,       0);
 8009732:	2100      	movs	r1, #0
 8009734:	480e      	ldr	r0, [pc, #56]	; (8009770 <DRV_moveForwardRight+0x78>)
 8009736:	f000 fd3d 	bl	800a1b4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 800973a:	68f9      	ldr	r1, [r7, #12]
 800973c:	4809      	ldr	r0, [pc, #36]	; (8009764 <DRV_moveForwardRight+0x6c>)
 800973e:	f000 fd39 	bl	800a1b4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 8009742:	68f9      	ldr	r1, [r7, #12]
 8009744:	4808      	ldr	r0, [pc, #32]	; (8009768 <DRV_moveForwardRight+0x70>)
 8009746:	f000 fd35 	bl	800a1b4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  ,       0);
 800974a:	2100      	movs	r1, #0
 800974c:	4809      	ldr	r0, [pc, #36]	; (8009774 <DRV_moveForwardRight+0x7c>)
 800974e:	f000 fd31 	bl	800a1b4 <MTR_setSpeed>
  }

  return;
 8009752:	bf00      	nop
 8009754:	bf00      	nop
}
 8009756:	3710      	adds	r7, #16
 8009758:	46bd      	mov	sp, r7
 800975a:	bd80      	pop	{r7, pc}
 800975c:	0800c884 	.word	0x0800c884
 8009760:	200000ee 	.word	0x200000ee
 8009764:	200001d4 	.word	0x200001d4
 8009768:	2000021c 	.word	0x2000021c
 800976c:	200000ed 	.word	0x200000ed
 8009770:	200001b0 	.word	0x200001b0
 8009774:	200001f8 	.word	0x200001f8

08009778 <DRV_moveForwardLeft>:

static void DRV_moveForwardLeft  (uint32_t p_speed)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b084      	sub	sp, #16
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	60fb      	str	r3, [r7, #12]

  LOG_debug("Moving forward-left @%u", l_speed);
 8009784:	68fa      	ldr	r2, [r7, #12]
 8009786:	4915      	ldr	r1, [pc, #84]	; (80097dc <DRV_moveForwardLeft+0x64>)
 8009788:	2000      	movs	r0, #0
 800978a:	f000 fb49 	bl	8009e20 <LOG_log>

  g_DRV_isDriveOn = true;
 800978e:	4b14      	ldr	r3, [pc, #80]	; (80097e0 <DRV_moveForwardLeft+0x68>)
 8009790:	2201      	movs	r2, #1
 8009792:	701a      	strb	r2, [r3, #0]

  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_FORWARD);
 8009794:	2101      	movs	r1, #1
 8009796:	4813      	ldr	r0, [pc, #76]	; (80097e4 <DRV_moveForwardLeft+0x6c>)
 8009798:	f000 fc94 	bl	800a0c4 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_FORWARD);
 800979c:	2101      	movs	r1, #1
 800979e:	4812      	ldr	r0, [pc, #72]	; (80097e8 <DRV_moveForwardLeft+0x70>)
 80097a0:	f000 fc90 	bl	800a0c4 <MTR_setDirection>

  if (g_DRV_areMotorsOn == false)
 80097a4:	4b11      	ldr	r3, [pc, #68]	; (80097ec <DRV_moveForwardLeft+0x74>)
 80097a6:	781b      	ldrb	r3, [r3, #0]
 80097a8:	f083 0301 	eor.w	r3, r3, #1
 80097ac:	b2db      	uxtb	r3, r3
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d110      	bne.n	80097d4 <DRV_moveForwardLeft+0x5c>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 80097b2:	68f9      	ldr	r1, [r7, #12]
 80097b4:	480b      	ldr	r0, [pc, #44]	; (80097e4 <DRV_moveForwardLeft+0x6c>)
 80097b6:	f000 fcfd 	bl	800a1b4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft ,       0);
 80097ba:	2100      	movs	r1, #0
 80097bc:	480c      	ldr	r0, [pc, #48]	; (80097f0 <DRV_moveForwardLeft+0x78>)
 80097be:	f000 fcf9 	bl	800a1b4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight ,       0);
 80097c2:	2100      	movs	r1, #0
 80097c4:	480b      	ldr	r0, [pc, #44]	; (80097f4 <DRV_moveForwardLeft+0x7c>)
 80097c6:	f000 fcf5 	bl	800a1b4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 80097ca:	68f9      	ldr	r1, [r7, #12]
 80097cc:	4806      	ldr	r0, [pc, #24]	; (80097e8 <DRV_moveForwardLeft+0x70>)
 80097ce:	f000 fcf1 	bl	800a1b4 <MTR_setSpeed>
  }

  return;
 80097d2:	bf00      	nop
 80097d4:	bf00      	nop
}
 80097d6:	3710      	adds	r7, #16
 80097d8:	46bd      	mov	sp, r7
 80097da:	bd80      	pop	{r7, pc}
 80097dc:	0800c8a0 	.word	0x0800c8a0
 80097e0:	200000ee 	.word	0x200000ee
 80097e4:	200001b0 	.word	0x200001b0
 80097e8:	200001f8 	.word	0x200001f8
 80097ec:	200000ed 	.word	0x200000ed
 80097f0:	200001d4 	.word	0x200001d4
 80097f4:	2000021c 	.word	0x2000021c

080097f8 <DRV_moveBackwardRight>:

static void DRV_moveBackwardRight(uint32_t p_speed)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b084      	sub	sp, #16
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	60fb      	str	r3, [r7, #12]

  LOG_debug("Moving backward-right @%u", l_speed);
 8009804:	68fa      	ldr	r2, [r7, #12]
 8009806:	4915      	ldr	r1, [pc, #84]	; (800985c <DRV_moveBackwardRight+0x64>)
 8009808:	2000      	movs	r0, #0
 800980a:	f000 fb09 	bl	8009e20 <LOG_log>

  g_DRV_isDriveOn = true;
 800980e:	4b14      	ldr	r3, [pc, #80]	; (8009860 <DRV_moveBackwardRight+0x68>)
 8009810:	2201      	movs	r2, #1
 8009812:	701a      	strb	r2, [r3, #0]

  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_BACKWARD);
 8009814:	2102      	movs	r1, #2
 8009816:	4813      	ldr	r0, [pc, #76]	; (8009864 <DRV_moveBackwardRight+0x6c>)
 8009818:	f000 fc54 	bl	800a0c4 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_BACKWARD);
 800981c:	2102      	movs	r1, #2
 800981e:	4812      	ldr	r0, [pc, #72]	; (8009868 <DRV_moveBackwardRight+0x70>)
 8009820:	f000 fc50 	bl	800a0c4 <MTR_setDirection>

  if (g_DRV_areMotorsOn == false)
 8009824:	4b11      	ldr	r3, [pc, #68]	; (800986c <DRV_moveBackwardRight+0x74>)
 8009826:	781b      	ldrb	r3, [r3, #0]
 8009828:	f083 0301 	eor.w	r3, r3, #1
 800982c:	b2db      	uxtb	r3, r3
 800982e:	2b00      	cmp	r3, #0
 8009830:	d110      	bne.n	8009854 <DRV_moveBackwardRight+0x5c>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 8009832:	68f9      	ldr	r1, [r7, #12]
 8009834:	480b      	ldr	r0, [pc, #44]	; (8009864 <DRV_moveBackwardRight+0x6c>)
 8009836:	f000 fcbd 	bl	800a1b4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft ,       0);
 800983a:	2100      	movs	r1, #0
 800983c:	480c      	ldr	r0, [pc, #48]	; (8009870 <DRV_moveBackwardRight+0x78>)
 800983e:	f000 fcb9 	bl	800a1b4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight ,       0);
 8009842:	2100      	movs	r1, #0
 8009844:	480b      	ldr	r0, [pc, #44]	; (8009874 <DRV_moveBackwardRight+0x7c>)
 8009846:	f000 fcb5 	bl	800a1b4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 800984a:	68f9      	ldr	r1, [r7, #12]
 800984c:	4806      	ldr	r0, [pc, #24]	; (8009868 <DRV_moveBackwardRight+0x70>)
 800984e:	f000 fcb1 	bl	800a1b4 <MTR_setSpeed>
  }

  return;
 8009852:	bf00      	nop
 8009854:	bf00      	nop
}
 8009856:	3710      	adds	r7, #16
 8009858:	46bd      	mov	sp, r7
 800985a:	bd80      	pop	{r7, pc}
 800985c:	0800c8b8 	.word	0x0800c8b8
 8009860:	200000ee 	.word	0x200000ee
 8009864:	200001b0 	.word	0x200001b0
 8009868:	200001f8 	.word	0x200001f8
 800986c:	200000ed 	.word	0x200000ed
 8009870:	200001d4 	.word	0x200001d4
 8009874:	2000021c 	.word	0x2000021c

08009878 <DRV_moveBackwardLeft>:

static void DRV_moveBackwardLeft (uint32_t p_speed)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b084      	sub	sp, #16
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	60fb      	str	r3, [r7, #12]

  LOG_debug("Moving backward-left @%u", l_speed);
 8009884:	68fa      	ldr	r2, [r7, #12]
 8009886:	4915      	ldr	r1, [pc, #84]	; (80098dc <DRV_moveBackwardLeft+0x64>)
 8009888:	2000      	movs	r0, #0
 800988a:	f000 fac9 	bl	8009e20 <LOG_log>

  g_DRV_isDriveOn = true;
 800988e:	4b14      	ldr	r3, [pc, #80]	; (80098e0 <DRV_moveBackwardLeft+0x68>)
 8009890:	2201      	movs	r2, #1
 8009892:	701a      	strb	r2, [r3, #0]

  MTR_setDirection(&g_DRV_motorFrontLeft, MTR_DIRECTION_BACKWARD);
 8009894:	2102      	movs	r1, #2
 8009896:	4813      	ldr	r0, [pc, #76]	; (80098e4 <DRV_moveBackwardLeft+0x6c>)
 8009898:	f000 fc14 	bl	800a0c4 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight, MTR_DIRECTION_BACKWARD);
 800989c:	2102      	movs	r1, #2
 800989e:	4812      	ldr	r0, [pc, #72]	; (80098e8 <DRV_moveBackwardLeft+0x70>)
 80098a0:	f000 fc10 	bl	800a0c4 <MTR_setDirection>

  if (g_DRV_areMotorsOn == false)
 80098a4:	4b11      	ldr	r3, [pc, #68]	; (80098ec <DRV_moveBackwardLeft+0x74>)
 80098a6:	781b      	ldrb	r3, [r3, #0]
 80098a8:	f083 0301 	eor.w	r3, r3, #1
 80098ac:	b2db      	uxtb	r3, r3
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d110      	bne.n	80098d4 <DRV_moveBackwardLeft+0x5c>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight,       0);
 80098b2:	2100      	movs	r1, #0
 80098b4:	480e      	ldr	r0, [pc, #56]	; (80098f0 <DRV_moveBackwardLeft+0x78>)
 80098b6:	f000 fc7d 	bl	800a1b4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 80098ba:	68f9      	ldr	r1, [r7, #12]
 80098bc:	4809      	ldr	r0, [pc, #36]	; (80098e4 <DRV_moveBackwardLeft+0x6c>)
 80098be:	f000 fc79 	bl	800a1b4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 80098c2:	68f9      	ldr	r1, [r7, #12]
 80098c4:	4808      	ldr	r0, [pc, #32]	; (80098e8 <DRV_moveBackwardLeft+0x70>)
 80098c6:	f000 fc75 	bl	800a1b4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  ,       0);
 80098ca:	2100      	movs	r1, #0
 80098cc:	4809      	ldr	r0, [pc, #36]	; (80098f4 <DRV_moveBackwardLeft+0x7c>)
 80098ce:	f000 fc71 	bl	800a1b4 <MTR_setSpeed>
  }

  return;
 80098d2:	bf00      	nop
 80098d4:	bf00      	nop
}
 80098d6:	3710      	adds	r7, #16
 80098d8:	46bd      	mov	sp, r7
 80098da:	bd80      	pop	{r7, pc}
 80098dc:	0800c8d4 	.word	0x0800c8d4
 80098e0:	200000ee 	.word	0x200000ee
 80098e4:	200001d4 	.word	0x200001d4
 80098e8:	2000021c 	.word	0x2000021c
 80098ec:	200000ed 	.word	0x200000ed
 80098f0:	200001b0 	.word	0x200001b0
 80098f4:	200001f8 	.word	0x200001f8

080098f8 <DRV_turnLeft>:

static void DRV_turnLeft(uint32_t p_speed)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b084      	sub	sp, #16
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	60fb      	str	r3, [r7, #12]

  LOG_debug("Turning left @%u", l_speed);
 8009904:	68fa      	ldr	r2, [r7, #12]
 8009906:	4919      	ldr	r1, [pc, #100]	; (800996c <DRV_turnLeft+0x74>)
 8009908:	2000      	movs	r0, #0
 800990a:	f000 fa89 	bl	8009e20 <LOG_log>

  g_DRV_isDriveOn = true;
 800990e:	4b18      	ldr	r3, [pc, #96]	; (8009970 <DRV_turnLeft+0x78>)
 8009910:	2201      	movs	r2, #1
 8009912:	701a      	strb	r2, [r3, #0]

  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_FORWARD );
 8009914:	2101      	movs	r1, #1
 8009916:	4817      	ldr	r0, [pc, #92]	; (8009974 <DRV_turnLeft+0x7c>)
 8009918:	f000 fbd4 	bl	800a0c4 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorFrontLeft , MTR_DIRECTION_BACKWARD);
 800991c:	2102      	movs	r1, #2
 800991e:	4816      	ldr	r0, [pc, #88]	; (8009978 <DRV_turnLeft+0x80>)
 8009920:	f000 fbd0 	bl	800a0c4 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight , MTR_DIRECTION_FORWARD );
 8009924:	2101      	movs	r1, #1
 8009926:	4815      	ldr	r0, [pc, #84]	; (800997c <DRV_turnLeft+0x84>)
 8009928:	f000 fbcc 	bl	800a0c4 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_BACKWARD);
 800992c:	2102      	movs	r1, #2
 800992e:	4814      	ldr	r0, [pc, #80]	; (8009980 <DRV_turnLeft+0x88>)
 8009930:	f000 fbc8 	bl	800a0c4 <MTR_setDirection>

  if (g_DRV_areMotorsOn == false)
 8009934:	4b13      	ldr	r3, [pc, #76]	; (8009984 <DRV_turnLeft+0x8c>)
 8009936:	781b      	ldrb	r3, [r3, #0]
 8009938:	f083 0301 	eor.w	r3, r3, #1
 800993c:	b2db      	uxtb	r3, r3
 800993e:	2b00      	cmp	r3, #0
 8009940:	d110      	bne.n	8009964 <DRV_turnLeft+0x6c>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 8009942:	68f9      	ldr	r1, [r7, #12]
 8009944:	480b      	ldr	r0, [pc, #44]	; (8009974 <DRV_turnLeft+0x7c>)
 8009946:	f000 fc35 	bl	800a1b4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 800994a:	68f9      	ldr	r1, [r7, #12]
 800994c:	480a      	ldr	r0, [pc, #40]	; (8009978 <DRV_turnLeft+0x80>)
 800994e:	f000 fc31 	bl	800a1b4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 8009952:	68f9      	ldr	r1, [r7, #12]
 8009954:	4809      	ldr	r0, [pc, #36]	; (800997c <DRV_turnLeft+0x84>)
 8009956:	f000 fc2d 	bl	800a1b4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 800995a:	68f9      	ldr	r1, [r7, #12]
 800995c:	4808      	ldr	r0, [pc, #32]	; (8009980 <DRV_turnLeft+0x88>)
 800995e:	f000 fc29 	bl	800a1b4 <MTR_setSpeed>
  }

  return;
 8009962:	bf00      	nop
 8009964:	bf00      	nop
}
 8009966:	3710      	adds	r7, #16
 8009968:	46bd      	mov	sp, r7
 800996a:	bd80      	pop	{r7, pc}
 800996c:	0800c8f0 	.word	0x0800c8f0
 8009970:	200000ee 	.word	0x200000ee
 8009974:	200001b0 	.word	0x200001b0
 8009978:	200001d4 	.word	0x200001d4
 800997c:	2000021c 	.word	0x2000021c
 8009980:	200001f8 	.word	0x200001f8
 8009984:	200000ed 	.word	0x200000ed

08009988 <DRV_turnRight>:

static void DRV_turnRight(uint32_t p_speed)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b084      	sub	sp, #16
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	60fb      	str	r3, [r7, #12]

  LOG_debug("Turning right @%u", l_speed);
 8009994:	68fa      	ldr	r2, [r7, #12]
 8009996:	4919      	ldr	r1, [pc, #100]	; (80099fc <DRV_turnRight+0x74>)
 8009998:	2000      	movs	r0, #0
 800999a:	f000 fa41 	bl	8009e20 <LOG_log>

  g_DRV_isDriveOn = true;
 800999e:	4b18      	ldr	r3, [pc, #96]	; (8009a00 <DRV_turnRight+0x78>)
 80099a0:	2201      	movs	r2, #1
 80099a2:	701a      	strb	r2, [r3, #0]

  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_BACKWARD);
 80099a4:	2102      	movs	r1, #2
 80099a6:	4817      	ldr	r0, [pc, #92]	; (8009a04 <DRV_turnRight+0x7c>)
 80099a8:	f000 fb8c 	bl	800a0c4 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorFrontLeft , MTR_DIRECTION_FORWARD );
 80099ac:	2101      	movs	r1, #1
 80099ae:	4816      	ldr	r0, [pc, #88]	; (8009a08 <DRV_turnRight+0x80>)
 80099b0:	f000 fb88 	bl	800a0c4 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight , MTR_DIRECTION_BACKWARD);
 80099b4:	2102      	movs	r1, #2
 80099b6:	4815      	ldr	r0, [pc, #84]	; (8009a0c <DRV_turnRight+0x84>)
 80099b8:	f000 fb84 	bl	800a0c4 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_FORWARD );
 80099bc:	2101      	movs	r1, #1
 80099be:	4814      	ldr	r0, [pc, #80]	; (8009a10 <DRV_turnRight+0x88>)
 80099c0:	f000 fb80 	bl	800a0c4 <MTR_setDirection>

  if (g_DRV_areMotorsOn == false)
 80099c4:	4b13      	ldr	r3, [pc, #76]	; (8009a14 <DRV_turnRight+0x8c>)
 80099c6:	781b      	ldrb	r3, [r3, #0]
 80099c8:	f083 0301 	eor.w	r3, r3, #1
 80099cc:	b2db      	uxtb	r3, r3
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d110      	bne.n	80099f4 <DRV_turnRight+0x6c>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 80099d2:	68f9      	ldr	r1, [r7, #12]
 80099d4:	480b      	ldr	r0, [pc, #44]	; (8009a04 <DRV_turnRight+0x7c>)
 80099d6:	f000 fbed 	bl	800a1b4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 80099da:	68f9      	ldr	r1, [r7, #12]
 80099dc:	480a      	ldr	r0, [pc, #40]	; (8009a08 <DRV_turnRight+0x80>)
 80099de:	f000 fbe9 	bl	800a1b4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 80099e2:	68f9      	ldr	r1, [r7, #12]
 80099e4:	4809      	ldr	r0, [pc, #36]	; (8009a0c <DRV_turnRight+0x84>)
 80099e6:	f000 fbe5 	bl	800a1b4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 80099ea:	68f9      	ldr	r1, [r7, #12]
 80099ec:	4808      	ldr	r0, [pc, #32]	; (8009a10 <DRV_turnRight+0x88>)
 80099ee:	f000 fbe1 	bl	800a1b4 <MTR_setSpeed>
  }

  return;
 80099f2:	bf00      	nop
 80099f4:	bf00      	nop
}
 80099f6:	3710      	adds	r7, #16
 80099f8:	46bd      	mov	sp, r7
 80099fa:	bd80      	pop	{r7, pc}
 80099fc:	0800c904 	.word	0x0800c904
 8009a00:	200000ee 	.word	0x200000ee
 8009a04:	200001b0 	.word	0x200001b0
 8009a08:	200001d4 	.word	0x200001d4
 8009a0c:	2000021c 	.word	0x2000021c
 8009a10:	200001f8 	.word	0x200001f8
 8009a14:	200000ed 	.word	0x200000ed

08009a18 <DRV_translateLeft>:

static void DRV_translateLeft(uint32_t p_speed)
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b084      	sub	sp, #16
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	60fb      	str	r3, [r7, #12]

  LOG_debug("Translating left @%u", l_speed);
 8009a24:	68fa      	ldr	r2, [r7, #12]
 8009a26:	4919      	ldr	r1, [pc, #100]	; (8009a8c <DRV_translateLeft+0x74>)
 8009a28:	2000      	movs	r0, #0
 8009a2a:	f000 f9f9 	bl	8009e20 <LOG_log>

  g_DRV_isDriveOn = true;
 8009a2e:	4b18      	ldr	r3, [pc, #96]	; (8009a90 <DRV_translateLeft+0x78>)
 8009a30:	2201      	movs	r2, #1
 8009a32:	701a      	strb	r2, [r3, #0]

  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_FORWARD );
 8009a34:	2101      	movs	r1, #1
 8009a36:	4817      	ldr	r0, [pc, #92]	; (8009a94 <DRV_translateLeft+0x7c>)
 8009a38:	f000 fb44 	bl	800a0c4 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorFrontLeft , MTR_DIRECTION_BACKWARD);
 8009a3c:	2102      	movs	r1, #2
 8009a3e:	4816      	ldr	r0, [pc, #88]	; (8009a98 <DRV_translateLeft+0x80>)
 8009a40:	f000 fb40 	bl	800a0c4 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight , MTR_DIRECTION_BACKWARD);
 8009a44:	2102      	movs	r1, #2
 8009a46:	4815      	ldr	r0, [pc, #84]	; (8009a9c <DRV_translateLeft+0x84>)
 8009a48:	f000 fb3c 	bl	800a0c4 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_FORWARD );
 8009a4c:	2101      	movs	r1, #1
 8009a4e:	4814      	ldr	r0, [pc, #80]	; (8009aa0 <DRV_translateLeft+0x88>)
 8009a50:	f000 fb38 	bl	800a0c4 <MTR_setDirection>

  if (g_DRV_areMotorsOn == false)
 8009a54:	4b13      	ldr	r3, [pc, #76]	; (8009aa4 <DRV_translateLeft+0x8c>)
 8009a56:	781b      	ldrb	r3, [r3, #0]
 8009a58:	f083 0301 	eor.w	r3, r3, #1
 8009a5c:	b2db      	uxtb	r3, r3
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d110      	bne.n	8009a84 <DRV_translateLeft+0x6c>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 8009a62:	68f9      	ldr	r1, [r7, #12]
 8009a64:	480b      	ldr	r0, [pc, #44]	; (8009a94 <DRV_translateLeft+0x7c>)
 8009a66:	f000 fba5 	bl	800a1b4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 8009a6a:	68f9      	ldr	r1, [r7, #12]
 8009a6c:	480a      	ldr	r0, [pc, #40]	; (8009a98 <DRV_translateLeft+0x80>)
 8009a6e:	f000 fba1 	bl	800a1b4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 8009a72:	68f9      	ldr	r1, [r7, #12]
 8009a74:	4809      	ldr	r0, [pc, #36]	; (8009a9c <DRV_translateLeft+0x84>)
 8009a76:	f000 fb9d 	bl	800a1b4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 8009a7a:	68f9      	ldr	r1, [r7, #12]
 8009a7c:	4808      	ldr	r0, [pc, #32]	; (8009aa0 <DRV_translateLeft+0x88>)
 8009a7e:	f000 fb99 	bl	800a1b4 <MTR_setSpeed>
  }

  return;
 8009a82:	bf00      	nop
 8009a84:	bf00      	nop
}
 8009a86:	3710      	adds	r7, #16
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	bd80      	pop	{r7, pc}
 8009a8c:	0800c918 	.word	0x0800c918
 8009a90:	200000ee 	.word	0x200000ee
 8009a94:	200001b0 	.word	0x200001b0
 8009a98:	200001d4 	.word	0x200001d4
 8009a9c:	2000021c 	.word	0x2000021c
 8009aa0:	200001f8 	.word	0x200001f8
 8009aa4:	200000ed 	.word	0x200000ed

08009aa8 <DRV_translateRight>:

static void DRV_translateRight(uint32_t p_speed)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b084      	sub	sp, #16
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	60fb      	str	r3, [r7, #12]

  LOG_debug("Translating right @%u", l_speed);
 8009ab4:	68fa      	ldr	r2, [r7, #12]
 8009ab6:	4919      	ldr	r1, [pc, #100]	; (8009b1c <DRV_translateRight+0x74>)
 8009ab8:	2000      	movs	r0, #0
 8009aba:	f000 f9b1 	bl	8009e20 <LOG_log>

  g_DRV_isDriveOn = true;
 8009abe:	4b18      	ldr	r3, [pc, #96]	; (8009b20 <DRV_translateRight+0x78>)
 8009ac0:	2201      	movs	r2, #1
 8009ac2:	701a      	strb	r2, [r3, #0]

  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_BACKWARD);
 8009ac4:	2102      	movs	r1, #2
 8009ac6:	4817      	ldr	r0, [pc, #92]	; (8009b24 <DRV_translateRight+0x7c>)
 8009ac8:	f000 fafc 	bl	800a0c4 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorFrontLeft , MTR_DIRECTION_FORWARD );
 8009acc:	2101      	movs	r1, #1
 8009ace:	4816      	ldr	r0, [pc, #88]	; (8009b28 <DRV_translateRight+0x80>)
 8009ad0:	f000 faf8 	bl	800a0c4 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight , MTR_DIRECTION_FORWARD );
 8009ad4:	2101      	movs	r1, #1
 8009ad6:	4815      	ldr	r0, [pc, #84]	; (8009b2c <DRV_translateRight+0x84>)
 8009ad8:	f000 faf4 	bl	800a0c4 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_BACKWARD);
 8009adc:	2102      	movs	r1, #2
 8009ade:	4814      	ldr	r0, [pc, #80]	; (8009b30 <DRV_translateRight+0x88>)
 8009ae0:	f000 faf0 	bl	800a0c4 <MTR_setDirection>

  if (g_DRV_areMotorsOn == false)
 8009ae4:	4b13      	ldr	r3, [pc, #76]	; (8009b34 <DRV_translateRight+0x8c>)
 8009ae6:	781b      	ldrb	r3, [r3, #0]
 8009ae8:	f083 0301 	eor.w	r3, r3, #1
 8009aec:	b2db      	uxtb	r3, r3
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d110      	bne.n	8009b14 <DRV_translateRight+0x6c>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 8009af2:	68f9      	ldr	r1, [r7, #12]
 8009af4:	480b      	ldr	r0, [pc, #44]	; (8009b24 <DRV_translateRight+0x7c>)
 8009af6:	f000 fb5d 	bl	800a1b4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 8009afa:	68f9      	ldr	r1, [r7, #12]
 8009afc:	480a      	ldr	r0, [pc, #40]	; (8009b28 <DRV_translateRight+0x80>)
 8009afe:	f000 fb59 	bl	800a1b4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 8009b02:	68f9      	ldr	r1, [r7, #12]
 8009b04:	4809      	ldr	r0, [pc, #36]	; (8009b2c <DRV_translateRight+0x84>)
 8009b06:	f000 fb55 	bl	800a1b4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 8009b0a:	68f9      	ldr	r1, [r7, #12]
 8009b0c:	4808      	ldr	r0, [pc, #32]	; (8009b30 <DRV_translateRight+0x88>)
 8009b0e:	f000 fb51 	bl	800a1b4 <MTR_setSpeed>
  }

  return;
 8009b12:	bf00      	nop
 8009b14:	bf00      	nop
}
 8009b16:	3710      	adds	r7, #16
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	bd80      	pop	{r7, pc}
 8009b1c:	0800c930 	.word	0x0800c930
 8009b20:	200000ee 	.word	0x200000ee
 8009b24:	200001b0 	.word	0x200001b0
 8009b28:	200001d4 	.word	0x200001d4
 8009b2c:	2000021c 	.word	0x2000021c
 8009b30:	200001f8 	.word	0x200001f8
 8009b34:	200000ed 	.word	0x200000ed

08009b38 <ENC_init>:
#include "encoder.h"

#include "log.h"

void ENC_init(T_ENC_Handle *p_handle, char *p_name, bool p_invertOnUpdate, TIM_HandleTypeDef *p_encoderTimerHandle)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b084      	sub	sp, #16
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	60f8      	str	r0, [r7, #12]
 8009b40:	60b9      	str	r1, [r7, #8]
 8009b42:	603b      	str	r3, [r7, #0]
 8009b44:	4613      	mov	r3, r2
 8009b46:	71fb      	strb	r3, [r7, #7]
  LOG_info("Initializing Encoder module for %s", p_name);
 8009b48:	68ba      	ldr	r2, [r7, #8]
 8009b4a:	490a      	ldr	r1, [pc, #40]	; (8009b74 <ENC_init+0x3c>)
 8009b4c:	2001      	movs	r0, #1
 8009b4e:	f000 f967 	bl	8009e20 <LOG_log>

  p_handle->name           = p_name;
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	68ba      	ldr	r2, [r7, #8]
 8009b56:	601a      	str	r2, [r3, #0]
  p_handle->invertOnUpdate = p_invertOnUpdate;
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	79fa      	ldrb	r2, [r7, #7]
 8009b5c:	719a      	strb	r2, [r3, #6]
  p_handle->timerHandle    = p_encoderTimerHandle;
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	683a      	ldr	r2, [r7, #0]
 8009b62:	609a      	str	r2, [r3, #8]

  ENC_reset(p_handle);
 8009b64:	68f8      	ldr	r0, [r7, #12]
 8009b66:	f000 f807 	bl	8009b78 <ENC_reset>

  return;
 8009b6a:	bf00      	nop
}
 8009b6c:	3710      	adds	r7, #16
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bd80      	pop	{r7, pc}
 8009b72:	bf00      	nop
 8009b74:	0800c948 	.word	0x0800c948

08009b78 <ENC_reset>:

void ENC_reset(T_ENC_Handle *p_handle)
{
 8009b78:	b480      	push	{r7}
 8009b7a:	b083      	sub	sp, #12
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
  p_handle->value = 0;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2200      	movs	r2, #0
 8009b84:	809a      	strh	r2, [r3, #4]

  return;
 8009b86:	bf00      	nop
}
 8009b88:	370c      	adds	r7, #12
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	bc80      	pop	{r7}
 8009b8e:	4770      	bx	lr

08009b90 <ENC_update>:

void ENC_update(T_ENC_Handle *p_handle, int16_t p_value)
{
 8009b90:	b480      	push	{r7}
 8009b92:	b083      	sub	sp, #12
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
 8009b98:	460b      	mov	r3, r1
 8009b9a:	807b      	strh	r3, [r7, #2]
  if (p_handle->invertOnUpdate == false)
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	799b      	ldrb	r3, [r3, #6]
 8009ba0:	f083 0301 	eor.w	r3, r3, #1
 8009ba4:	b2db      	uxtb	r3, r3
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d003      	beq.n	8009bb2 <ENC_update+0x22>
  {
    p_handle->value = p_value;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	887a      	ldrh	r2, [r7, #2]
 8009bae:	809a      	strh	r2, [r3, #4]
  else
  {
    p_handle->value = -p_value;
  }

  return;
 8009bb0:	e006      	b.n	8009bc0 <ENC_update+0x30>
    p_handle->value = -p_value;
 8009bb2:	887b      	ldrh	r3, [r7, #2]
 8009bb4:	425b      	negs	r3, r3
 8009bb6:	b29b      	uxth	r3, r3
 8009bb8:	b21a      	sxth	r2, r3
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	809a      	strh	r2, [r3, #4]
  return;
 8009bbe:	bf00      	nop
}
 8009bc0:	370c      	adds	r7, #12
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	bc80      	pop	{r7}
 8009bc6:	4770      	bx	lr

08009bc8 <ENC_getCount>:

int16_t ENC_getCount(T_ENC_Handle *p_handle)
{
 8009bc8:	b480      	push	{r7}
 8009bca:	b083      	sub	sp, #12
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
  return p_handle->value;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
}
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	370c      	adds	r7, #12
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	bc80      	pop	{r7}
 8009bde:	4770      	bx	lr

08009be0 <LED_setMode>:
#include "log.h"

static T_LED_MODE g_LED_mode = LED_MODE_BLINK_SLOW;

void LED_setMode(T_LED_MODE p_mode)
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b082      	sub	sp, #8
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	4603      	mov	r3, r0
 8009be8:	71fb      	strb	r3, [r7, #7]
  if (p_mode != g_LED_mode)
 8009bea:	4b1b      	ldr	r3, [pc, #108]	; (8009c58 <LED_setMode+0x78>)
 8009bec:	781b      	ldrb	r3, [r3, #0]
 8009bee:	79fa      	ldrb	r2, [r7, #7]
 8009bf0:	429a      	cmp	r2, r3
 8009bf2:	d02d      	beq.n	8009c50 <LED_setMode+0x70>
  {
    switch (p_mode)
 8009bf4:	79fb      	ldrb	r3, [r7, #7]
 8009bf6:	2b04      	cmp	r3, #4
 8009bf8:	d825      	bhi.n	8009c46 <LED_setMode+0x66>
 8009bfa:	a201      	add	r2, pc, #4	; (adr r2, 8009c00 <LED_setMode+0x20>)
 8009bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c00:	08009c15 	.word	0x08009c15
 8009c04:	08009c1f 	.word	0x08009c1f
 8009c08:	08009c29 	.word	0x08009c29
 8009c0c:	08009c33 	.word	0x08009c33
 8009c10:	08009c3d 	.word	0x08009c3d
    {
      case LED_MODE_FORCED_OFF:
        LOG_info("Turning LED OFF");
 8009c14:	4911      	ldr	r1, [pc, #68]	; (8009c5c <LED_setMode+0x7c>)
 8009c16:	2001      	movs	r0, #1
 8009c18:	f000 f902 	bl	8009e20 <LOG_log>
        break;
 8009c1c:	e014      	b.n	8009c48 <LED_setMode+0x68>

      case LED_MODE_FORCED_ON:
        LOG_info("Turning LED ON");
 8009c1e:	4910      	ldr	r1, [pc, #64]	; (8009c60 <LED_setMode+0x80>)
 8009c20:	2001      	movs	r0, #1
 8009c22:	f000 f8fd 	bl	8009e20 <LOG_log>
        break;
 8009c26:	e00f      	b.n	8009c48 <LED_setMode+0x68>

      case LED_MODE_BLINK_SLOW:
        LOG_info("Setting LED to blink slow");
 8009c28:	490e      	ldr	r1, [pc, #56]	; (8009c64 <LED_setMode+0x84>)
 8009c2a:	2001      	movs	r0, #1
 8009c2c:	f000 f8f8 	bl	8009e20 <LOG_log>
        break;
 8009c30:	e00a      	b.n	8009c48 <LED_setMode+0x68>

      case LED_MODE_BLINK_MEDIUM:
        LOG_info("Setting LED to blink medium");
 8009c32:	490d      	ldr	r1, [pc, #52]	; (8009c68 <LED_setMode+0x88>)
 8009c34:	2001      	movs	r0, #1
 8009c36:	f000 f8f3 	bl	8009e20 <LOG_log>
        break;
 8009c3a:	e005      	b.n	8009c48 <LED_setMode+0x68>

      case LED_MODE_BLINK_FAST:
        LOG_info("Setting LED to blink fast");
 8009c3c:	490b      	ldr	r1, [pc, #44]	; (8009c6c <LED_setMode+0x8c>)
 8009c3e:	2001      	movs	r0, #1
 8009c40:	f000 f8ee 	bl	8009e20 <LOG_log>
        break;
 8009c44:	e000      	b.n	8009c48 <LED_setMode+0x68>

      default:
        ; /* Nothing to do */
        break;
 8009c46:	bf00      	nop
    }

    g_LED_mode = p_mode;
 8009c48:	4a03      	ldr	r2, [pc, #12]	; (8009c58 <LED_setMode+0x78>)
 8009c4a:	79fb      	ldrb	r3, [r7, #7]
 8009c4c:	7013      	strb	r3, [r2, #0]
  else
  {
    ; /* Nothong to do */
  }

  return;
 8009c4e:	bf00      	nop
 8009c50:	bf00      	nop
}
 8009c52:	3708      	adds	r7, #8
 8009c54:	46bd      	mov	sp, r7
 8009c56:	bd80      	pop	{r7, pc}
 8009c58:	20000009 	.word	0x20000009
 8009c5c:	0800c96c 	.word	0x0800c96c
 8009c60:	0800c97c 	.word	0x0800c97c
 8009c64:	0800c98c 	.word	0x0800c98c
 8009c68:	0800c9a8 	.word	0x0800c9a8
 8009c6c:	0800c9c4 	.word	0x0800c9c4

08009c70 <LED_update>:
{
  return g_LED_mode;
}

void LED_update(void)
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	af00      	add	r7, sp, #0
  static uint32_t l_blinkCounter = 0;

  switch (g_LED_mode)
 8009c74:	4b2a      	ldr	r3, [pc, #168]	; (8009d20 <LED_update+0xb0>)
 8009c76:	781b      	ldrb	r3, [r3, #0]
 8009c78:	2b04      	cmp	r3, #4
 8009c7a:	d849      	bhi.n	8009d10 <LED_update+0xa0>
 8009c7c:	a201      	add	r2, pc, #4	; (adr r2, 8009c84 <LED_update+0x14>)
 8009c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c82:	bf00      	nop
 8009c84:	08009c99 	.word	0x08009c99
 8009c88:	08009ca7 	.word	0x08009ca7
 8009c8c:	08009cb5 	.word	0x08009cb5
 8009c90:	08009ce3 	.word	0x08009ce3
 8009c94:	08009d05 	.word	0x08009d05
  {
    case LED_MODE_FORCED_OFF:
      HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_SET);
 8009c98:	2201      	movs	r2, #1
 8009c9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009c9e:	4821      	ldr	r0, [pc, #132]	; (8009d24 <LED_update+0xb4>)
 8009ca0:	f7f9 fd5e 	bl	8003760 <HAL_GPIO_WritePin>
      break;
 8009ca4:	e039      	b.n	8009d1a <LED_update+0xaa>

    case LED_MODE_FORCED_ON:
      HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009cac:	481d      	ldr	r0, [pc, #116]	; (8009d24 <LED_update+0xb4>)
 8009cae:	f7f9 fd57 	bl	8003760 <HAL_GPIO_WritePin>
      break;
 8009cb2:	e032      	b.n	8009d1a <LED_update+0xaa>

    case LED_MODE_BLINK_SLOW:
      l_blinkCounter++;
 8009cb4:	4b1c      	ldr	r3, [pc, #112]	; (8009d28 <LED_update+0xb8>)
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	3301      	adds	r3, #1
 8009cba:	4a1b      	ldr	r2, [pc, #108]	; (8009d28 <LED_update+0xb8>)
 8009cbc:	6013      	str	r3, [r2, #0]
      if (l_blinkCounter % 5 == 0)
 8009cbe:	4b1a      	ldr	r3, [pc, #104]	; (8009d28 <LED_update+0xb8>)
 8009cc0:	6819      	ldr	r1, [r3, #0]
 8009cc2:	4b1a      	ldr	r3, [pc, #104]	; (8009d2c <LED_update+0xbc>)
 8009cc4:	fba3 2301 	umull	r2, r3, r3, r1
 8009cc8:	089a      	lsrs	r2, r3, #2
 8009cca:	4613      	mov	r3, r2
 8009ccc:	009b      	lsls	r3, r3, #2
 8009cce:	4413      	add	r3, r2
 8009cd0:	1aca      	subs	r2, r1, r3
 8009cd2:	2a00      	cmp	r2, #0
 8009cd4:	d11e      	bne.n	8009d14 <LED_update+0xa4>
      {
        HAL_GPIO_TogglePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
 8009cd6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009cda:	4812      	ldr	r0, [pc, #72]	; (8009d24 <LED_update+0xb4>)
 8009cdc:	f7f9 fd72 	bl	80037c4 <HAL_GPIO_TogglePin>
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 8009ce0:	e018      	b.n	8009d14 <LED_update+0xa4>

    case LED_MODE_BLINK_MEDIUM:
      l_blinkCounter++;
 8009ce2:	4b11      	ldr	r3, [pc, #68]	; (8009d28 <LED_update+0xb8>)
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	3301      	adds	r3, #1
 8009ce8:	4a0f      	ldr	r2, [pc, #60]	; (8009d28 <LED_update+0xb8>)
 8009cea:	6013      	str	r3, [r2, #0]
      if (l_blinkCounter % 2 == 0)
 8009cec:	4b0e      	ldr	r3, [pc, #56]	; (8009d28 <LED_update+0xb8>)
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	f003 0301 	and.w	r3, r3, #1
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d10f      	bne.n	8009d18 <LED_update+0xa8>
      {
        HAL_GPIO_TogglePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
 8009cf8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009cfc:	4809      	ldr	r0, [pc, #36]	; (8009d24 <LED_update+0xb4>)
 8009cfe:	f7f9 fd61 	bl	80037c4 <HAL_GPIO_TogglePin>
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 8009d02:	e009      	b.n	8009d18 <LED_update+0xa8>

    case LED_MODE_BLINK_FAST:
      HAL_GPIO_TogglePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
 8009d04:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009d08:	4806      	ldr	r0, [pc, #24]	; (8009d24 <LED_update+0xb4>)
 8009d0a:	f7f9 fd5b 	bl	80037c4 <HAL_GPIO_TogglePin>
      break;
 8009d0e:	e004      	b.n	8009d1a <LED_update+0xaa>

    default:
      ; /* Nothing to do */
      break;
 8009d10:	bf00      	nop
 8009d12:	e002      	b.n	8009d1a <LED_update+0xaa>
      break;
 8009d14:	bf00      	nop
 8009d16:	e000      	b.n	8009d1a <LED_update+0xaa>
      break;
 8009d18:	bf00      	nop
  }

  return;
 8009d1a:	bf00      	nop
}
 8009d1c:	bd80      	pop	{r7, pc}
 8009d1e:	bf00      	nop
 8009d20:	20000009 	.word	0x20000009
 8009d24:	40011000 	.word	0x40011000
 8009d28:	20000270 	.word	0x20000270
 8009d2c:	cccccccd 	.word	0xcccccccd

08009d30 <LOG_init>:
{
  "DEBUG", "INFO", "WARNING", "ERROR"
};

void LOG_init(RTC_HandleTypeDef *p_rctHandle, bool p_isLogOn)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b082      	sub	sp, #8
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
 8009d38:	460b      	mov	r3, r1
 8009d3a:	70fb      	strb	r3, [r7, #3]
  g_LOG_isOn      = p_isLogOn;
 8009d3c:	4a06      	ldr	r2, [pc, #24]	; (8009d58 <LOG_init+0x28>)
 8009d3e:	78fb      	ldrb	r3, [r7, #3]
 8009d40:	7013      	strb	r3, [r2, #0]
  g_LOG_rtcHandle = p_rctHandle;
 8009d42:	4a06      	ldr	r2, [pc, #24]	; (8009d5c <LOG_init+0x2c>)
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	6013      	str	r3, [r2, #0]

  LOG_info("LOG initialized");
 8009d48:	4905      	ldr	r1, [pc, #20]	; (8009d60 <LOG_init+0x30>)
 8009d4a:	2001      	movs	r0, #1
 8009d4c:	f000 f868 	bl	8009e20 <LOG_log>

  return;
 8009d50:	bf00      	nop
}
 8009d52:	3708      	adds	r7, #8
 8009d54:	46bd      	mov	sp, r7
 8009d56:	bd80      	pop	{r7, pc}
 8009d58:	20000274 	.word	0x20000274
 8009d5c:	20000278 	.word	0x20000278
 8009d60:	0800ca00 	.word	0x0800ca00

08009d64 <LOG_toggleOnOff>:

void LOG_toggleOnOff(void)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	af00      	add	r7, sp, #0
  if (g_LOG_isOn == true)
 8009d68:	4b0a      	ldr	r3, [pc, #40]	; (8009d94 <LOG_toggleOnOff+0x30>)
 8009d6a:	781b      	ldrb	r3, [r3, #0]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d007      	beq.n	8009d80 <LOG_toggleOnOff+0x1c>
  {
    LOG_info("Turning LOG OFF");
 8009d70:	4909      	ldr	r1, [pc, #36]	; (8009d98 <LOG_toggleOnOff+0x34>)
 8009d72:	2001      	movs	r0, #1
 8009d74:	f000 f854 	bl	8009e20 <LOG_log>

    g_LOG_isOn = false;
 8009d78:	4b06      	ldr	r3, [pc, #24]	; (8009d94 <LOG_toggleOnOff+0x30>)
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	701a      	strb	r2, [r3, #0]
    g_LOG_isOn = true;

    LOG_info("Turning LOG ON");
  }

  return;
 8009d7e:	e007      	b.n	8009d90 <LOG_toggleOnOff+0x2c>
    g_LOG_isOn = true;
 8009d80:	4b04      	ldr	r3, [pc, #16]	; (8009d94 <LOG_toggleOnOff+0x30>)
 8009d82:	2201      	movs	r2, #1
 8009d84:	701a      	strb	r2, [r3, #0]
    LOG_info("Turning LOG ON");
 8009d86:	4905      	ldr	r1, [pc, #20]	; (8009d9c <LOG_toggleOnOff+0x38>)
 8009d88:	2001      	movs	r0, #1
 8009d8a:	f000 f849 	bl	8009e20 <LOG_log>
  return;
 8009d8e:	bf00      	nop
}
 8009d90:	bd80      	pop	{r7, pc}
 8009d92:	bf00      	nop
 8009d94:	20000274 	.word	0x20000274
 8009d98:	0800ca10 	.word	0x0800ca10
 8009d9c:	0800ca20 	.word	0x0800ca20

08009da0 <LOG_setLevel>:

void LOG_setLevel(T_LOG_LEVEL p_level)
{
 8009da0:	b480      	push	{r7}
 8009da2:	b083      	sub	sp, #12
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	4603      	mov	r3, r0
 8009da8:	71fb      	strb	r3, [r7, #7]
  g_LOG_level = p_level;
 8009daa:	4a04      	ldr	r2, [pc, #16]	; (8009dbc <LOG_setLevel+0x1c>)
 8009dac:	79fb      	ldrb	r3, [r7, #7]
 8009dae:	7013      	strb	r3, [r2, #0]

  return;
 8009db0:	bf00      	nop
}
 8009db2:	370c      	adds	r7, #12
 8009db4:	46bd      	mov	sp, r7
 8009db6:	bc80      	pop	{r7}
 8009db8:	4770      	bx	lr
 8009dba:	bf00      	nop
 8009dbc:	20000275 	.word	0x20000275

08009dc0 <LOG_increaseLevel>:

void LOG_increaseLevel(void)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	af00      	add	r7, sp, #0
  /* Display more detailed logs */
  if (g_LOG_level > LOG_LEVEL_DEBUG)
 8009dc4:	4b08      	ldr	r3, [pc, #32]	; (8009de8 <LOG_increaseLevel+0x28>)
 8009dc6:	781b      	ldrb	r3, [r3, #0]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d00a      	beq.n	8009de2 <LOG_increaseLevel+0x22>
  {
    LOG_info("Increasing LOG level");
 8009dcc:	4907      	ldr	r1, [pc, #28]	; (8009dec <LOG_increaseLevel+0x2c>)
 8009dce:	2001      	movs	r0, #1
 8009dd0:	f000 f826 	bl	8009e20 <LOG_log>

    g_LOG_level--;
 8009dd4:	4b04      	ldr	r3, [pc, #16]	; (8009de8 <LOG_increaseLevel+0x28>)
 8009dd6:	781b      	ldrb	r3, [r3, #0]
 8009dd8:	3b01      	subs	r3, #1
 8009dda:	b2da      	uxtb	r2, r3
 8009ddc:	4b02      	ldr	r3, [pc, #8]	; (8009de8 <LOG_increaseLevel+0x28>)
 8009dde:	701a      	strb	r2, [r3, #0]
  else
  {
    ; /* Nothing to do */
  }

  return;
 8009de0:	bf00      	nop
 8009de2:	bf00      	nop
}
 8009de4:	bd80      	pop	{r7, pc}
 8009de6:	bf00      	nop
 8009de8:	20000275 	.word	0x20000275
 8009dec:	0800ca30 	.word	0x0800ca30

08009df0 <LOG_decreaseLevel>:

void LOG_decreaseLevel(void)
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	af00      	add	r7, sp, #0
  /* Display less detailed logs */
  if (g_LOG_level < LOG_LEVEL_ERROR)
 8009df4:	4b08      	ldr	r3, [pc, #32]	; (8009e18 <LOG_decreaseLevel+0x28>)
 8009df6:	781b      	ldrb	r3, [r3, #0]
 8009df8:	2b02      	cmp	r3, #2
 8009dfa:	d80a      	bhi.n	8009e12 <LOG_decreaseLevel+0x22>
  {
    LOG_info("Decreasing LOG level");
 8009dfc:	4907      	ldr	r1, [pc, #28]	; (8009e1c <LOG_decreaseLevel+0x2c>)
 8009dfe:	2001      	movs	r0, #1
 8009e00:	f000 f80e 	bl	8009e20 <LOG_log>

    g_LOG_level++;
 8009e04:	4b04      	ldr	r3, [pc, #16]	; (8009e18 <LOG_decreaseLevel+0x28>)
 8009e06:	781b      	ldrb	r3, [r3, #0]
 8009e08:	3301      	adds	r3, #1
 8009e0a:	b2da      	uxtb	r2, r3
 8009e0c:	4b02      	ldr	r3, [pc, #8]	; (8009e18 <LOG_decreaseLevel+0x28>)
 8009e0e:	701a      	strb	r2, [r3, #0]
  else
  {
    ; /* Nothing to do */
  }

  return;
 8009e10:	bf00      	nop
 8009e12:	bf00      	nop
}
 8009e14:	bd80      	pop	{r7, pc}
 8009e16:	bf00      	nop
 8009e18:	20000275 	.word	0x20000275
 8009e1c:	0800ca48 	.word	0x0800ca48

08009e20 <LOG_log>:

void LOG_log(T_LOG_LEVEL p_level, const char *p_format, ...)
{
 8009e20:	b40e      	push	{r1, r2, r3}
 8009e22:	b590      	push	{r4, r7, lr}
 8009e24:	b0a8      	sub	sp, #160	; 0xa0
 8009e26:	af02      	add	r7, sp, #8
 8009e28:	4603      	mov	r3, r0
 8009e2a:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef l_halReturnCode;
  va_list           l_argumentsList;
  RTC_TimeTypeDef   l_time;
  RTC_DateTypeDef   l_date;

  if ((g_LOG_isOn == true) && (p_level >= g_LOG_level))
 8009e2c:	4b3e      	ldr	r3, [pc, #248]	; (8009f28 <LOG_log+0x108>)
 8009e2e:	781b      	ldrb	r3, [r3, #0]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d071      	beq.n	8009f18 <LOG_log+0xf8>
 8009e34:	4b3d      	ldr	r3, [pc, #244]	; (8009f2c <LOG_log+0x10c>)
 8009e36:	781b      	ldrb	r3, [r3, #0]
 8009e38:	79fa      	ldrb	r2, [r7, #7]
 8009e3a:	429a      	cmp	r2, r3
 8009e3c:	d36c      	bcc.n	8009f18 <LOG_log+0xf8>
  {
    l_halReturnCode = HAL_RTC_GetTime(g_LOG_rtcHandle, &l_time, RTC_FORMAT_BCD);
 8009e3e:	4b3c      	ldr	r3, [pc, #240]	; (8009f30 <LOG_log+0x110>)
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	f107 010c 	add.w	r1, r7, #12
 8009e46:	2201      	movs	r2, #1
 8009e48:	4618      	mov	r0, r3
 8009e4a:	f7fa fe6b 	bl	8004b24 <HAL_RTC_GetTime>
 8009e4e:	4603      	mov	r3, r0
 8009e50:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

    if (l_halReturnCode != HAL_OK)
 8009e54:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d004      	beq.n	8009e66 <LOG_log+0x46>
    {
      /* As this method is for logging/debug, just reset time in case of failure */
      UTI_resetRtcTime(&l_time);
 8009e5c:	f107 030c 	add.w	r3, r7, #12
 8009e60:	4618      	mov	r0, r3
 8009e62:	f000 fc32 	bl	800a6ca <UTI_resetRtcTime>
    else
    {
      ; /* Nothing to do */
    }

    l_halReturnCode = HAL_RTC_GetDate(g_LOG_rtcHandle, &l_date, RTC_FORMAT_BCD);
 8009e66:	4b32      	ldr	r3, [pc, #200]	; (8009f30 <LOG_log+0x110>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	f107 0108 	add.w	r1, r7, #8
 8009e6e:	2201      	movs	r2, #1
 8009e70:	4618      	mov	r0, r3
 8009e72:	f7fb f85b 	bl	8004f2c <HAL_RTC_GetDate>
 8009e76:	4603      	mov	r3, r0
 8009e78:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

    if (l_halReturnCode != HAL_OK)
 8009e7c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d004      	beq.n	8009e8e <LOG_log+0x6e>
    {
      /* As this method is for logging/debug, just reset date in case of failure */
      UTI_resetRtcDate(&l_date);
 8009e84:	f107 0308 	add.w	r3, r7, #8
 8009e88:	4618      	mov	r0, r3
 8009e8a:	f000 fc09 	bl	800a6a0 <UTI_resetRtcDate>
    else
    {
      ; /* Nothing to do */
    }

    va_start(l_argumentsList, p_format);
 8009e8e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8009e92:	613b      	str	r3, [r7, #16]

    (void)sprintf  ( l_buffer, "%-7s - %02x:%02x:%02x - ", g_LOG_levelStrings[p_level], l_time.Hours, l_time.Minutes, l_time.Seconds);
 8009e94:	79fb      	ldrb	r3, [r7, #7]
 8009e96:	4a27      	ldr	r2, [pc, #156]	; (8009f34 <LOG_log+0x114>)
 8009e98:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009e9c:	7b3b      	ldrb	r3, [r7, #12]
 8009e9e:	461c      	mov	r4, r3
 8009ea0:	7b7b      	ldrb	r3, [r7, #13]
 8009ea2:	7bb9      	ldrb	r1, [r7, #14]
 8009ea4:	f107 0014 	add.w	r0, r7, #20
 8009ea8:	9101      	str	r1, [sp, #4]
 8009eaa:	9300      	str	r3, [sp, #0]
 8009eac:	4623      	mov	r3, r4
 8009eae:	4922      	ldr	r1, [pc, #136]	; (8009f38 <LOG_log+0x118>)
 8009eb0:	f000 fdc4 	bl	800aa3c <siprintf>
    /* 21 is the length of string "%-7s - %02x:%02x:%02x - ". 2 is the length of string "\r\n". */
    /* So we start and write format right after the former and we keep space for the latter.    */
    (void)vsnprintf(&l_buffer[21], CST_CONSOLE_TX_MAX_STRING_LENGTH - 21 - 2, p_format, l_argumentsList);
 8009eb4:	f107 0314 	add.w	r3, r7, #20
 8009eb8:	f103 0015 	add.w	r0, r3, #21
 8009ebc:	693b      	ldr	r3, [r7, #16]
 8009ebe:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8009ec2:	2169      	movs	r1, #105	; 0x69
 8009ec4:	f000 feb6 	bl	800ac34 <vsniprintf>
    (void)strcat   ( l_buffer    , "\r\n");
 8009ec8:	f107 0314 	add.w	r3, r7, #20
 8009ecc:	4618      	mov	r0, r3
 8009ece:	f7f6 f9a9 	bl	8000224 <strlen>
 8009ed2:	4603      	mov	r3, r0
 8009ed4:	461a      	mov	r2, r3
 8009ed6:	f107 0314 	add.w	r3, r7, #20
 8009eda:	4413      	add	r3, r2
 8009edc:	4a17      	ldr	r2, [pc, #92]	; (8009f3c <LOG_log+0x11c>)
 8009ede:	8811      	ldrh	r1, [r2, #0]
 8009ee0:	7892      	ldrb	r2, [r2, #2]
 8009ee2:	8019      	strh	r1, [r3, #0]
 8009ee4:	709a      	strb	r2, [r3, #2]

    /* -1 is there to consider the end/null character, which strnlen() does not count */
    if (strnlen(l_buffer, CST_CONSOLE_TX_MAX_STRING_LENGTH) == CST_CONSOLE_TX_MAX_STRING_LENGTH - 1)
 8009ee6:	f107 0314 	add.w	r3, r7, #20
 8009eea:	2180      	movs	r1, #128	; 0x80
 8009eec:	4618      	mov	r0, r3
 8009eee:	f000 fdd8 	bl	800aaa2 <strnlen>
 8009ef2:	4603      	mov	r3, r0
 8009ef4:	2b7f      	cmp	r3, #127	; 0x7f
 8009ef6:	d108      	bne.n	8009f0a <LOG_log+0xea>
    {
      /* At -1, we got the end/null character. At -2 & 3, we got "\r\n". */
      l_buffer[CST_CONSOLE_TX_MAX_STRING_LENGTH - 4] = '.';
 8009ef8:	232e      	movs	r3, #46	; 0x2e
 8009efa:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
      l_buffer[CST_CONSOLE_TX_MAX_STRING_LENGTH - 5] = '.';
 8009efe:	232e      	movs	r3, #46	; 0x2e
 8009f00:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
      l_buffer[CST_CONSOLE_TX_MAX_STRING_LENGTH - 6] = '.';
 8009f04:	232e      	movs	r3, #46	; 0x2e
 8009f06:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
    else
    {
      ; /* Nothing to do */
    }

    (void)printf("%s", l_buffer);
 8009f0a:	f107 0314 	add.w	r3, r7, #20
 8009f0e:	4619      	mov	r1, r3
 8009f10:	480b      	ldr	r0, [pc, #44]	; (8009f40 <LOG_log+0x120>)
 8009f12:	f000 fd6b 	bl	800a9ec <iprintf>
  else
  {
    ; /* Nothing to do */
  }

  return;
 8009f16:	bf00      	nop
 8009f18:	bf00      	nop
}
 8009f1a:	3798      	adds	r7, #152	; 0x98
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8009f22:	b003      	add	sp, #12
 8009f24:	4770      	bx	lr
 8009f26:	bf00      	nop
 8009f28:	20000274 	.word	0x20000274
 8009f2c:	20000275 	.word	0x20000275
 8009f30:	20000278 	.word	0x20000278
 8009f34:	2000000c 	.word	0x2000000c
 8009f38:	0800ca60 	.word	0x0800ca60
 8009f3c:	0800ca7c 	.word	0x0800ca7c
 8009f40:	0800ca80 	.word	0x0800ca80

08009f44 <MAS_init>:
static T_SFO_data          g_MAS_data;
static uint32_t            g_MAS_dataSize;
static bool                g_MAS_isDataComplete;

void MAS_init(UART_HandleTypeDef *p_uartHandle)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b082      	sub	sp, #8
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
  LOG_info("Initializing master connection");
 8009f4c:	490d      	ldr	r1, [pc, #52]	; (8009f84 <MAS_init+0x40>)
 8009f4e:	2001      	movs	r0, #1
 8009f50:	f7ff ff66 	bl	8009e20 <LOG_log>

  g_MAS_uartHandle     = p_uartHandle;
 8009f54:	4a0c      	ldr	r2, [pc, #48]	; (8009f88 <MAS_init+0x44>)
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	6013      	str	r3, [r2, #0]
  g_MAS_dataSize       = 0;
 8009f5a:	4b0c      	ldr	r3, [pc, #48]	; (8009f8c <MAS_init+0x48>)
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	601a      	str	r2, [r3, #0]
  g_MAS_isDataComplete = false;
 8009f60:	4b0b      	ldr	r3, [pc, #44]	; (8009f90 <MAS_init+0x4c>)
 8009f62:	2200      	movs	r2, #0
 8009f64:	701a      	strb	r2, [r3, #0]

  SFO_initData(&g_MAS_data);
 8009f66:	480b      	ldr	r0, [pc, #44]	; (8009f94 <MAS_init+0x50>)
 8009f68:	f000 fa5e 	bl	800a428 <SFO_initData>

  HAL_UART_Receive_IT(g_MAS_uartHandle, &g_MAS_datum, 1);
 8009f6c:	4b06      	ldr	r3, [pc, #24]	; (8009f88 <MAS_init+0x44>)
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	2201      	movs	r2, #1
 8009f72:	4909      	ldr	r1, [pc, #36]	; (8009f98 <MAS_init+0x54>)
 8009f74:	4618      	mov	r0, r3
 8009f76:	f7fd fe7f 	bl	8007c78 <HAL_UART_Receive_IT>

  return;
 8009f7a:	bf00      	nop
}
 8009f7c:	3708      	adds	r7, #8
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	bd80      	pop	{r7, pc}
 8009f82:	bf00      	nop
 8009f84:	0800ca84 	.word	0x0800ca84
 8009f88:	2000027c 	.word	0x2000027c
 8009f8c:	20000294 	.word	0x20000294
 8009f90:	20000298 	.word	0x20000298
 8009f94:	20000284 	.word	0x20000284
 8009f98:	20000280 	.word	0x20000280

08009f9c <MAS_receiveData>:

void MAS_receiveData(void)
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	af00      	add	r7, sp, #0
  /* If previous command was not processed yet, drop datum, */
  /* which will lead to an error, showing a design issue... */
  if (g_MAS_isDataComplete == true)
 8009fa0:	4b0f      	ldr	r3, [pc, #60]	; (8009fe0 <MAS_receiveData+0x44>)
 8009fa2:	781b      	ldrb	r3, [r3, #0]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d112      	bne.n	8009fce <MAS_receiveData+0x32>
  {
    ; /* Nothing to do */
  }
  else
  {
    if (g_MAS_datum == '\r')
 8009fa8:	4b0e      	ldr	r3, [pc, #56]	; (8009fe4 <MAS_receiveData+0x48>)
 8009faa:	781b      	ldrb	r3, [r3, #0]
 8009fac:	2b0d      	cmp	r3, #13
 8009fae:	d103      	bne.n	8009fb8 <MAS_receiveData+0x1c>
    {
      g_MAS_isDataComplete = true;
 8009fb0:	4b0b      	ldr	r3, [pc, #44]	; (8009fe0 <MAS_receiveData+0x44>)
 8009fb2:	2201      	movs	r2, #1
 8009fb4:	701a      	strb	r2, [r3, #0]
 8009fb6:	e00a      	b.n	8009fce <MAS_receiveData+0x32>
    }
    else
    {
      g_MAS_data[g_MAS_dataSize] = g_MAS_datum;
 8009fb8:	4b0b      	ldr	r3, [pc, #44]	; (8009fe8 <MAS_receiveData+0x4c>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	4a09      	ldr	r2, [pc, #36]	; (8009fe4 <MAS_receiveData+0x48>)
 8009fbe:	7811      	ldrb	r1, [r2, #0]
 8009fc0:	4a0a      	ldr	r2, [pc, #40]	; (8009fec <MAS_receiveData+0x50>)
 8009fc2:	54d1      	strb	r1, [r2, r3]
      g_MAS_dataSize++;
 8009fc4:	4b08      	ldr	r3, [pc, #32]	; (8009fe8 <MAS_receiveData+0x4c>)
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	3301      	adds	r3, #1
 8009fca:	4a07      	ldr	r2, [pc, #28]	; (8009fe8 <MAS_receiveData+0x4c>)
 8009fcc:	6013      	str	r3, [r2, #0]
    }
  }

  HAL_UART_Receive_IT(g_MAS_uartHandle, &g_MAS_datum, 1);
 8009fce:	4b08      	ldr	r3, [pc, #32]	; (8009ff0 <MAS_receiveData+0x54>)
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	2201      	movs	r2, #1
 8009fd4:	4903      	ldr	r1, [pc, #12]	; (8009fe4 <MAS_receiveData+0x48>)
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	f7fd fe4e 	bl	8007c78 <HAL_UART_Receive_IT>

  return;
 8009fdc:	bf00      	nop
}
 8009fde:	bd80      	pop	{r7, pc}
 8009fe0:	20000298 	.word	0x20000298
 8009fe4:	20000280 	.word	0x20000280
 8009fe8:	20000294 	.word	0x20000294
 8009fec:	20000284 	.word	0x20000284
 8009ff0:	2000027c 	.word	0x2000027c

08009ff4 <MAS_updateFifo>:

void MAS_updateFifo(T_SFO_Context *p_fifo)
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b082      	sub	sp, #8
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
  if (g_MAS_isDataComplete == false)
 8009ffc:	4b0c      	ldr	r3, [pc, #48]	; (800a030 <MAS_updateFifo+0x3c>)
 8009ffe:	781b      	ldrb	r3, [r3, #0]
 800a000:	f083 0301 	eor.w	r3, r3, #1
 800a004:	b2db      	uxtb	r3, r3
 800a006:	2b00      	cmp	r3, #0
 800a008:	d10d      	bne.n	800a026 <MAS_updateFifo+0x32>
  {
    ; /* Nothing to do */
  }
  else
  {
    SFO_push    (p_fifo, &g_MAS_data);
 800a00a:	490a      	ldr	r1, [pc, #40]	; (800a034 <MAS_updateFifo+0x40>)
 800a00c:	6878      	ldr	r0, [r7, #4]
 800a00e:	f000 fa31 	bl	800a474 <SFO_push>
    SFO_initData(&g_MAS_data);
 800a012:	4808      	ldr	r0, [pc, #32]	; (800a034 <MAS_updateFifo+0x40>)
 800a014:	f000 fa08 	bl	800a428 <SFO_initData>

    g_MAS_dataSize       = 0;
 800a018:	4b07      	ldr	r3, [pc, #28]	; (800a038 <MAS_updateFifo+0x44>)
 800a01a:	2200      	movs	r2, #0
 800a01c:	601a      	str	r2, [r3, #0]
    g_MAS_isDataComplete = false;
 800a01e:	4b04      	ldr	r3, [pc, #16]	; (800a030 <MAS_updateFifo+0x3c>)
 800a020:	2200      	movs	r2, #0
 800a022:	701a      	strb	r2, [r3, #0]
  }

  return;
 800a024:	bf00      	nop
 800a026:	bf00      	nop
}
 800a028:	3708      	adds	r7, #8
 800a02a:	46bd      	mov	sp, r7
 800a02c:	bd80      	pop	{r7, pc}
 800a02e:	bf00      	nop
 800a030:	20000298 	.word	0x20000298
 800a034:	20000284 	.word	0x20000284
 800a038:	20000294 	.word	0x20000294

0800a03c <MAS_sendString>:

void MAS_sendString(char *p_string, uint32_t p_length)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b082      	sub	sp, #8
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
 800a044:	6039      	str	r1, [r7, #0]
  /* As this method is using for logging/debug, we will not deal with failure cases */
 (void)HAL_UART_Transmit(g_MAS_uartHandle,
 800a046:	4b06      	ldr	r3, [pc, #24]	; (800a060 <MAS_sendString+0x24>)
 800a048:	6818      	ldr	r0, [r3, #0]
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	b29a      	uxth	r2, r3
 800a04e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a052:	6879      	ldr	r1, [r7, #4]
 800a054:	f7fd fd7e 	bl	8007b54 <HAL_UART_Transmit>
              (uint8_t *)p_string,
                         p_length,
                         CST_UART_TRANSMIT_TIMEOUT_IN_MS);

  return;
 800a058:	bf00      	nop
}
 800a05a:	3708      	adds	r7, #8
 800a05c:	46bd      	mov	sp, r7
 800a05e:	bd80      	pop	{r7, pc}
 800a060:	2000027c 	.word	0x2000027c

0800a064 <MTR_init>:
              uint32_t           p_dirPin1,
              GPIO_TypeDef      *p_dirPin2Port,
              uint32_t           p_dirPin2,
              TIM_HandleTypeDef *p_pwmTimerHandle,
              uint32_t           p_pwmChannel)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b084      	sub	sp, #16
 800a068:	af00      	add	r7, sp, #0
 800a06a:	60f8      	str	r0, [r7, #12]
 800a06c:	60b9      	str	r1, [r7, #8]
 800a06e:	607a      	str	r2, [r7, #4]
 800a070:	603b      	str	r3, [r7, #0]
  LOG_info("Initializing Motor module for %s", p_name);
 800a072:	68ba      	ldr	r2, [r7, #8]
 800a074:	4912      	ldr	r1, [pc, #72]	; (800a0c0 <MTR_init+0x5c>)
 800a076:	2001      	movs	r0, #1
 800a078:	f7ff fed2 	bl	8009e20 <LOG_log>

  p_handle->name           = p_name;
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	68ba      	ldr	r2, [r7, #8]
 800a080:	601a      	str	r2, [r3, #0]
  p_handle->dirPin1Port    = p_dirPin1Port;
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	687a      	ldr	r2, [r7, #4]
 800a086:	605a      	str	r2, [r3, #4]
  p_handle->dirPin1        = p_dirPin1;
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	683a      	ldr	r2, [r7, #0]
 800a08c:	609a      	str	r2, [r3, #8]
  p_handle->dirPin2Port    = p_dirPin2Port;
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	69ba      	ldr	r2, [r7, #24]
 800a092:	60da      	str	r2, [r3, #12]
  p_handle->dirPin2        = p_dirPin2;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	69fa      	ldr	r2, [r7, #28]
 800a098:	611a      	str	r2, [r3, #16]
  p_handle->pwmTimerHandle = p_pwmTimerHandle;
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	6a3a      	ldr	r2, [r7, #32]
 800a09e:	61da      	str	r2, [r3, #28]
  p_handle->pwmChannel     = p_pwmChannel;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0a4:	621a      	str	r2, [r3, #32]

  MTR_setDirection(p_handle, MTR_DIRECTION_STOP);
 800a0a6:	2100      	movs	r1, #0
 800a0a8:	68f8      	ldr	r0, [r7, #12]
 800a0aa:	f000 f80b 	bl	800a0c4 <MTR_setDirection>
  MTR_setSpeed    (p_handle, 0                 );
 800a0ae:	2100      	movs	r1, #0
 800a0b0:	68f8      	ldr	r0, [r7, #12]
 800a0b2:	f000 f87f 	bl	800a1b4 <MTR_setSpeed>

  return;
 800a0b6:	bf00      	nop
}
 800a0b8:	3710      	adds	r7, #16
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bd80      	pop	{r7, pc}
 800a0be:	bf00      	nop
 800a0c0:	0800caa4 	.word	0x0800caa4

0800a0c4 <MTR_setDirection>:

void MTR_setDirection(T_MTR_Handle *p_handle, T_MTR_DIRECTION p_direction)
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b082      	sub	sp, #8
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
 800a0cc:	460b      	mov	r3, r1
 800a0ce:	70fb      	strb	r3, [r7, #3]
  if (p_direction == p_handle->direction)
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	7d1b      	ldrb	r3, [r3, #20]
 800a0d4:	78fa      	ldrb	r2, [r7, #3]
 800a0d6:	429a      	cmp	r2, r3
 800a0d8:	d056      	beq.n	800a188 <MTR_setDirection+0xc4>
  {
    ; /* Nothing to do */
  }
  else
  {
    if (p_direction == MTR_DIRECTION_STOP)
 800a0da:	78fb      	ldrb	r3, [r7, #3]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d119      	bne.n	800a114 <MTR_setDirection+0x50>
    {
      LOG_debug("%s motor STOP", p_handle->name);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	461a      	mov	r2, r3
 800a0e6:	492a      	ldr	r1, [pc, #168]	; (800a190 <MTR_setDirection+0xcc>)
 800a0e8:	2000      	movs	r0, #0
 800a0ea:	f7ff fe99 	bl	8009e20 <LOG_log>

      HAL_GPIO_WritePin(p_handle->dirPin1Port, p_handle->dirPin1, GPIO_PIN_RESET);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	6858      	ldr	r0, [r3, #4]
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	689b      	ldr	r3, [r3, #8]
 800a0f6:	b29b      	uxth	r3, r3
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	4619      	mov	r1, r3
 800a0fc:	f7f9 fb30 	bl	8003760 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(p_handle->dirPin2Port, p_handle->dirPin2, GPIO_PIN_RESET);
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	68d8      	ldr	r0, [r3, #12]
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	691b      	ldr	r3, [r3, #16]
 800a108:	b29b      	uxth	r3, r3
 800a10a:	2200      	movs	r2, #0
 800a10c:	4619      	mov	r1, r3
 800a10e:	f7f9 fb27 	bl	8003760 <HAL_GPIO_WritePin>
 800a112:	e035      	b.n	800a180 <MTR_setDirection+0xbc>
    }
    else if (p_direction == MTR_DIRECTION_FORWARD)
 800a114:	78fb      	ldrb	r3, [r7, #3]
 800a116:	2b01      	cmp	r3, #1
 800a118:	d119      	bne.n	800a14e <MTR_setDirection+0x8a>
    {
      LOG_debug("%s motor go FORWARD", p_handle->name);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	461a      	mov	r2, r3
 800a120:	491c      	ldr	r1, [pc, #112]	; (800a194 <MTR_setDirection+0xd0>)
 800a122:	2000      	movs	r0, #0
 800a124:	f7ff fe7c 	bl	8009e20 <LOG_log>

      HAL_GPIO_WritePin(p_handle->dirPin1Port, p_handle->dirPin1, GPIO_PIN_RESET);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	6858      	ldr	r0, [r3, #4]
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	689b      	ldr	r3, [r3, #8]
 800a130:	b29b      	uxth	r3, r3
 800a132:	2200      	movs	r2, #0
 800a134:	4619      	mov	r1, r3
 800a136:	f7f9 fb13 	bl	8003760 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(p_handle->dirPin2Port, p_handle->dirPin2, GPIO_PIN_SET  );
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	68d8      	ldr	r0, [r3, #12]
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	691b      	ldr	r3, [r3, #16]
 800a142:	b29b      	uxth	r3, r3
 800a144:	2201      	movs	r2, #1
 800a146:	4619      	mov	r1, r3
 800a148:	f7f9 fb0a 	bl	8003760 <HAL_GPIO_WritePin>
 800a14c:	e018      	b.n	800a180 <MTR_setDirection+0xbc>
    }
    else
    {
      LOG_debug("%s motor go BACKWARD", p_handle->name);
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	461a      	mov	r2, r3
 800a154:	4910      	ldr	r1, [pc, #64]	; (800a198 <MTR_setDirection+0xd4>)
 800a156:	2000      	movs	r0, #0
 800a158:	f7ff fe62 	bl	8009e20 <LOG_log>

      HAL_GPIO_WritePin(p_handle->dirPin1Port, p_handle->dirPin1, GPIO_PIN_SET  );
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	6858      	ldr	r0, [r3, #4]
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	689b      	ldr	r3, [r3, #8]
 800a164:	b29b      	uxth	r3, r3
 800a166:	2201      	movs	r2, #1
 800a168:	4619      	mov	r1, r3
 800a16a:	f7f9 faf9 	bl	8003760 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(p_handle->dirPin2Port, p_handle->dirPin2, GPIO_PIN_RESET);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	68d8      	ldr	r0, [r3, #12]
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	691b      	ldr	r3, [r3, #16]
 800a176:	b29b      	uxth	r3, r3
 800a178:	2200      	movs	r2, #0
 800a17a:	4619      	mov	r1, r3
 800a17c:	f7f9 faf0 	bl	8003760 <HAL_GPIO_WritePin>
    }

    p_handle->direction = p_direction;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	78fa      	ldrb	r2, [r7, #3]
 800a184:	751a      	strb	r2, [r3, #20]
  }

  return;
 800a186:	bf00      	nop
 800a188:	bf00      	nop
}
 800a18a:	3708      	adds	r7, #8
 800a18c:	46bd      	mov	sp, r7
 800a18e:	bd80      	pop	{r7, pc}
 800a190:	0800cac8 	.word	0x0800cac8
 800a194:	0800cad8 	.word	0x0800cad8
 800a198:	0800caec 	.word	0x0800caec

0800a19c <MTR_getDirection>:

T_MTR_DIRECTION MTR_getDirection(T_MTR_Handle *p_handle)
{
 800a19c:	b480      	push	{r7}
 800a19e:	b083      	sub	sp, #12
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
  return p_handle->direction;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	7d1b      	ldrb	r3, [r3, #20]
}
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	370c      	adds	r7, #12
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	bc80      	pop	{r7}
 800a1b0:	4770      	bx	lr
	...

0800a1b4 <MTR_setSpeed>:

void MTR_setSpeed(T_MTR_Handle *p_handle, uint32_t p_speed)
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b082      	sub	sp, #8
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
 800a1bc:	6039      	str	r1, [r7, #0]
  if (p_speed == p_handle->speed)
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	699b      	ldr	r3, [r3, #24]
 800a1c2:	683a      	ldr	r2, [r7, #0]
 800a1c4:	429a      	cmp	r2, r3
 800a1c6:	d02d      	beq.n	800a224 <MTR_setSpeed+0x70>
  {
    ; /* Nothing to do */
  }
  else
  {
    LOG_debug("Setting  %s motor p_speed to %u", p_handle->name, p_speed);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681a      	ldr	r2, [r3, #0]
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	4917      	ldr	r1, [pc, #92]	; (800a22c <MTR_setSpeed+0x78>)
 800a1d0:	2000      	movs	r0, #0
 800a1d2:	f7ff fe25 	bl	8009e20 <LOG_log>

    __HAL_TIM_SET_COMPARE(p_handle->pwmTimerHandle, p_handle->pwmChannel, p_speed);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	6a1b      	ldr	r3, [r3, #32]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d105      	bne.n	800a1ea <MTR_setSpeed+0x36>
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	69db      	ldr	r3, [r3, #28]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	683a      	ldr	r2, [r7, #0]
 800a1e6:	635a      	str	r2, [r3, #52]	; 0x34
 800a1e8:	e018      	b.n	800a21c <MTR_setSpeed+0x68>
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	6a1b      	ldr	r3, [r3, #32]
 800a1ee:	2b04      	cmp	r3, #4
 800a1f0:	d105      	bne.n	800a1fe <MTR_setSpeed+0x4a>
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	69db      	ldr	r3, [r3, #28]
 800a1f6:	681a      	ldr	r2, [r3, #0]
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	6393      	str	r3, [r2, #56]	; 0x38
 800a1fc:	e00e      	b.n	800a21c <MTR_setSpeed+0x68>
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	6a1b      	ldr	r3, [r3, #32]
 800a202:	2b08      	cmp	r3, #8
 800a204:	d105      	bne.n	800a212 <MTR_setSpeed+0x5e>
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	69db      	ldr	r3, [r3, #28]
 800a20a:	681a      	ldr	r2, [r3, #0]
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	63d3      	str	r3, [r2, #60]	; 0x3c
 800a210:	e004      	b.n	800a21c <MTR_setSpeed+0x68>
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	69db      	ldr	r3, [r3, #28]
 800a216:	681a      	ldr	r2, [r3, #0]
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	6413      	str	r3, [r2, #64]	; 0x40

    p_handle->speed = p_speed;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	683a      	ldr	r2, [r7, #0]
 800a220:	619a      	str	r2, [r3, #24]
  }

  return;
 800a222:	bf00      	nop
 800a224:	bf00      	nop
}
 800a226:	3708      	adds	r7, #8
 800a228:	46bd      	mov	sp, r7
 800a22a:	bd80      	pop	{r7, pc}
 800a22c:	0800cb04 	.word	0x0800cb04

0800a230 <MTR_getSpeed>:

uint32_t MTR_getSpeed(T_MTR_Handle *p_handle)
{
 800a230:	b480      	push	{r7}
 800a232:	b083      	sub	sp, #12
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
  return p_handle->speed;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	699b      	ldr	r3, [r3, #24]
}
 800a23c:	4618      	mov	r0, r3
 800a23e:	370c      	adds	r7, #12
 800a240:	46bd      	mov	sp, r7
 800a242:	bc80      	pop	{r7}
 800a244:	4770      	bx	lr
	...

0800a248 <PID_init>:

#include "utils.h"
#include "log.h"

void PID_init(T_PID_Handle *p_handle, int32_t p_kp, int32_t p_ki, int32_t p_kd, int32_t p_targetValue, int32_t p_minValue, int32_t p_maxValue, int32_t p_antiWindUpFactor)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b084      	sub	sp, #16
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	60f8      	str	r0, [r7, #12]
 800a250:	60b9      	str	r1, [r7, #8]
 800a252:	607a      	str	r2, [r7, #4]
 800a254:	603b      	str	r3, [r7, #0]
  LOG_info("Initializing PID");
 800a256:	4919      	ldr	r1, [pc, #100]	; (800a2bc <PID_init+0x74>)
 800a258:	2001      	movs	r0, #1
 800a25a:	f7ff fde1 	bl	8009e20 <LOG_log>

  p_handle->kp              = p_kp;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	68ba      	ldr	r2, [r7, #8]
 800a262:	601a      	str	r2, [r3, #0]
  p_handle->ki              = p_ki;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	687a      	ldr	r2, [r7, #4]
 800a268:	605a      	str	r2, [r3, #4]
  p_handle->kd              = p_kd;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	683a      	ldr	r2, [r7, #0]
 800a26e:	609a      	str	r2, [r3, #8]
  p_handle->targetValue     = p_targetValue;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	69ba      	ldr	r2, [r7, #24]
 800a274:	60da      	str	r2, [r3, #12]
  p_handle->minValue        = p_minValue;
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	69fa      	ldr	r2, [r7, #28]
 800a27a:	611a      	str	r2, [r3, #16]
  p_handle->maxValue        = p_maxValue;
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	6a3a      	ldr	r2, [r7, #32]
 800a280:	615a      	str	r2, [r3, #20]
  p_handle->antiWindUpValue = p_antiWindUpFactor * UTI_MAX(abs(p_handle->minValue), abs(p_handle->maxValue));
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	695b      	ldr	r3, [r3, #20]
 800a286:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800a28a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	691b      	ldr	r3, [r3, #16]
 800a292:	2b00      	cmp	r3, #0
 800a294:	bfb8      	it	lt
 800a296:	425b      	neglt	r3, r3
 800a298:	4293      	cmp	r3, r2
 800a29a:	bfb8      	it	lt
 800a29c:	4613      	movlt	r3, r2
 800a29e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2a0:	fb02 f203 	mul.w	r2, r2, r3
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	619a      	str	r2, [r3, #24]

  PID_reset  (p_handle);
 800a2a8:	68f8      	ldr	r0, [r7, #12]
 800a2aa:	f000 f809 	bl	800a2c0 <PID_reset>
  PID_logInfo(p_handle);
 800a2ae:	68f8      	ldr	r0, [r7, #12]
 800a2b0:	f000 f87e 	bl	800a3b0 <PID_logInfo>

  return;
 800a2b4:	bf00      	nop
}
 800a2b6:	3710      	adds	r7, #16
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	bd80      	pop	{r7, pc}
 800a2bc:	0800cb24 	.word	0x0800cb24

0800a2c0 <PID_reset>:

void PID_reset(T_PID_Handle *p_handle)
{
 800a2c0:	b480      	push	{r7}
 800a2c2:	b083      	sub	sp, #12
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
  p_handle->pValue        = 0;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	61da      	str	r2, [r3, #28]
  p_handle->iValue        = 0;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	621a      	str	r2, [r3, #32]
  p_handle->dValue        = 0;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	625a      	str	r2, [r3, #36]	; 0x24
  p_handle->computedValue = 0;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2200      	movs	r2, #0
 800a2de:	629a      	str	r2, [r3, #40]	; 0x28
  p_handle->lastError     = 0;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	62da      	str	r2, [r3, #44]	; 0x2c

  return;
 800a2e6:	bf00      	nop
}
 800a2e8:	370c      	adds	r7, #12
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	bc80      	pop	{r7}
 800a2ee:	4770      	bx	lr

0800a2f0 <PID_update>:
{
  return p_handle->antiWindUpValue;
}

int32_t PID_update(T_PID_Handle *p_handle, int32_t p_currentValue, uint32_t p_timeDelta)
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b088      	sub	sp, #32
 800a2f4:	af02      	add	r7, sp, #8
 800a2f6:	60f8      	str	r0, [r7, #12]
 800a2f8:	60b9      	str	r1, [r7, #8]
 800a2fa:	607a      	str	r2, [r7, #4]
  int32_t l_currentError;

  l_currentError = p_handle->targetValue - p_currentValue;
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	68da      	ldr	r2, [r3, #12]
 800a300:	68bb      	ldr	r3, [r7, #8]
 800a302:	1ad3      	subs	r3, r2, r3
 800a304:	617b      	str	r3, [r7, #20]

  p_handle->pValue    =  l_currentError;
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	697a      	ldr	r2, [r7, #20]
 800a30a:	61da      	str	r2, [r3, #28]
  p_handle->iValue   +=  l_currentError * p_timeDelta;
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	6a1b      	ldr	r3, [r3, #32]
 800a310:	4619      	mov	r1, r3
 800a312:	697b      	ldr	r3, [r7, #20]
 800a314:	687a      	ldr	r2, [r7, #4]
 800a316:	fb02 f303 	mul.w	r3, r2, r3
 800a31a:	440b      	add	r3, r1
 800a31c:	461a      	mov	r2, r3
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	621a      	str	r2, [r3, #32]
  p_handle->iValue    =  UTI_clampIntValue(p_handle->iValue, -p_handle->antiWindUpValue, p_handle->antiWindUpValue, false, 0);
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	6a18      	ldr	r0, [r3, #32]
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	699b      	ldr	r3, [r3, #24]
 800a32a:	4259      	negs	r1, r3
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	699a      	ldr	r2, [r3, #24]
 800a330:	2300      	movs	r3, #0
 800a332:	9300      	str	r3, [sp, #0]
 800a334:	2300      	movs	r3, #0
 800a336:	f000 f9f5 	bl	800a724 <UTI_clampIntValue>
 800a33a:	4602      	mov	r2, r0
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	621a      	str	r2, [r3, #32]
  p_handle->dValue    = (l_currentError - p_handle->lastError) / p_timeDelta;
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a344:	697a      	ldr	r2, [r7, #20]
 800a346:	1ad3      	subs	r3, r2, r3
 800a348:	461a      	mov	r2, r3
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a350:	461a      	mov	r2, r3
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	625a      	str	r2, [r3, #36]	; 0x24
  p_handle->lastError =  l_currentError;
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	697a      	ldr	r2, [r7, #20]
 800a35a:	62da      	str	r2, [r3, #44]	; 0x2c

  p_handle->computedValue = p_handle->kp * p_handle->pValue + p_handle->ki * p_handle->iValue + p_handle->kd * p_handle->dValue;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	68fa      	ldr	r2, [r7, #12]
 800a362:	69d2      	ldr	r2, [r2, #28]
 800a364:	fb02 f203 	mul.w	r2, r2, r3
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	685b      	ldr	r3, [r3, #4]
 800a36c:	68f9      	ldr	r1, [r7, #12]
 800a36e:	6a09      	ldr	r1, [r1, #32]
 800a370:	fb01 f303 	mul.w	r3, r1, r3
 800a374:	441a      	add	r2, r3
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	689b      	ldr	r3, [r3, #8]
 800a37a:	68f9      	ldr	r1, [r7, #12]
 800a37c:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800a37e:	fb01 f303 	mul.w	r3, r1, r3
 800a382:	441a      	add	r2, r3
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	629a      	str	r2, [r3, #40]	; 0x28
  p_handle->computedValue = UTI_clampIntValue(p_handle->computedValue, p_handle->minValue, p_handle->maxValue, false, 0);
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	6919      	ldr	r1, [r3, #16]
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	695a      	ldr	r2, [r3, #20]
 800a394:	2300      	movs	r3, #0
 800a396:	9300      	str	r3, [sp, #0]
 800a398:	2300      	movs	r3, #0
 800a39a:	f000 f9c3 	bl	800a724 <UTI_clampIntValue>
 800a39e:	4602      	mov	r2, r0
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	629a      	str	r2, [r3, #40]	; 0x28

  return p_currentValue;
 800a3a4:	68bb      	ldr	r3, [r7, #8]
}
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	3718      	adds	r7, #24
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	bd80      	pop	{r7, pc}
	...

0800a3b0 <PID_logInfo>:

void PID_logInfo(T_PID_Handle *p_handle)
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b084      	sub	sp, #16
 800a3b4:	af02      	add	r7, sp, #8
 800a3b6:	6078      	str	r0, [r7, #4]
  LOG_info(" kp = %4d -  ki = %4d -     kd = %4d", p_handle->kp         , p_handle->ki      , p_handle->kd             );
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681a      	ldr	r2, [r3, #0]
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	6859      	ldr	r1, [r3, #4]
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	689b      	ldr	r3, [r3, #8]
 800a3c4:	9300      	str	r3, [sp, #0]
 800a3c6:	460b      	mov	r3, r1
 800a3c8:	4913      	ldr	r1, [pc, #76]	; (800a418 <PID_logInfo+0x68>)
 800a3ca:	2001      	movs	r0, #1
 800a3cc:	f7ff fd28 	bl	8009e20 <LOG_log>
  LOG_info("  p = %4d -   i = %4d -      d = %4d", p_handle->pValue     , p_handle->iValue  , p_handle->dValue         );
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	69da      	ldr	r2, [r3, #28]
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	6a19      	ldr	r1, [r3, #32]
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3dc:	9300      	str	r3, [sp, #0]
 800a3de:	460b      	mov	r3, r1
 800a3e0:	490e      	ldr	r1, [pc, #56]	; (800a41c <PID_logInfo+0x6c>)
 800a3e2:	2001      	movs	r0, #1
 800a3e4:	f7ff fd1c 	bl	8009e20 <LOG_log>
  LOG_info("min = %4d - max = %4d - a.w.up = %4d", p_handle->minValue   , p_handle->maxValue, p_handle->antiWindUpValue);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	691a      	ldr	r2, [r3, #16]
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	6959      	ldr	r1, [r3, #20]
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	699b      	ldr	r3, [r3, #24]
 800a3f4:	9300      	str	r3, [sp, #0]
 800a3f6:	460b      	mov	r3, r1
 800a3f8:	4909      	ldr	r1, [pc, #36]	; (800a420 <PID_logInfo+0x70>)
 800a3fa:	2001      	movs	r0, #1
 800a3fc:	f7ff fd10 	bl	8009e20 <LOG_log>
  LOG_info("  t = %4d - val = %4d               ", p_handle->targetValue, p_handle->computedValue                      );
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	68da      	ldr	r2, [r3, #12]
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a408:	4906      	ldr	r1, [pc, #24]	; (800a424 <PID_logInfo+0x74>)
 800a40a:	2001      	movs	r0, #1
 800a40c:	f7ff fd08 	bl	8009e20 <LOG_log>

  return;
 800a410:	bf00      	nop
}
 800a412:	3708      	adds	r7, #8
 800a414:	46bd      	mov	sp, r7
 800a416:	bd80      	pop	{r7, pc}
 800a418:	0800cb38 	.word	0x0800cb38
 800a41c:	0800cb60 	.word	0x0800cb60
 800a420:	0800cb88 	.word	0x0800cb88
 800a424:	0800cbb0 	.word	0x0800cbb0

0800a428 <SFO_initData>:

#include "log.h"


void SFO_initData(T_SFO_data *p_data)
{
 800a428:	b580      	push	{r7, lr}
 800a42a:	b082      	sub	sp, #8
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
  (void)memset(p_data, 0, CST_STRING_FIFO_MAX_STRING_LENGTH);
 800a430:	2210      	movs	r2, #16
 800a432:	2100      	movs	r1, #0
 800a434:	6878      	ldr	r0, [r7, #4]
 800a436:	f000 fa2b 	bl	800a890 <memset>

  return;
 800a43a:	bf00      	nop
}
 800a43c:	3708      	adds	r7, #8
 800a43e:	46bd      	mov	sp, r7
 800a440:	bd80      	pop	{r7, pc}
	...

0800a444 <SFO_init>:

void SFO_init(T_SFO_Context *p_fifo)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b082      	sub	sp, #8
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
  LOG_debug("String FIFO now empty");
 800a44c:	4908      	ldr	r1, [pc, #32]	; (800a470 <SFO_init+0x2c>)
 800a44e:	2000      	movs	r0, #0
 800a450:	f7ff fce6 	bl	8009e20 <LOG_log>

  p_fifo->head  = NULL;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2200      	movs	r2, #0
 800a458:	601a      	str	r2, [r3, #0]
  p_fifo->tail  = NULL;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	2200      	movs	r2, #0
 800a45e:	605a      	str	r2, [r3, #4]
  p_fifo->count = 0;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2200      	movs	r2, #0
 800a464:	609a      	str	r2, [r3, #8]

  return;
 800a466:	bf00      	nop
}
 800a468:	3708      	adds	r7, #8
 800a46a:	46bd      	mov	sp, r7
 800a46c:	bd80      	pop	{r7, pc}
 800a46e:	bf00      	nop
 800a470:	0800cbd8 	.word	0x0800cbd8

0800a474 <SFO_push>:

void SFO_push(T_SFO_Context *p_fifo, T_SFO_data *p_dataIn)
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b084      	sub	sp, #16
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
 800a47c:	6039      	str	r1, [r7, #0]
  T_SFO_Element *l_element;

  if (p_fifo->count == CST_STRING_FIFO_MAX_ELEMENTS)
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	689b      	ldr	r3, [r3, #8]
 800a482:	2b0a      	cmp	r3, #10
 800a484:	d105      	bne.n	800a492 <SFO_push+0x1e>
  {
    LOG_error("SFO_push() failure - String FIFO is full (%u elements)", CST_STRING_FIFO_MAX_ELEMENTS);
 800a486:	220a      	movs	r2, #10
 800a488:	4917      	ldr	r1, [pc, #92]	; (800a4e8 <SFO_push+0x74>)
 800a48a:	2003      	movs	r0, #3
 800a48c:	f7ff fcc8 	bl	8009e20 <LOG_log>

      p_fifo->count++;
    }
  }

  return;
 800a490:	e027      	b.n	800a4e2 <SFO_push+0x6e>
    l_element = (T_SFO_Element *)malloc(sizeof(T_SFO_Element));
 800a492:	2014      	movs	r0, #20
 800a494:	f000 f9ec 	bl	800a870 <malloc>
 800a498:	4603      	mov	r3, r0
 800a49a:	60fb      	str	r3, [r7, #12]
    if (l_element == NULL)
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d104      	bne.n	800a4ac <SFO_push+0x38>
      LOG_error("SFO_push() failure - Could not allocate new memory");
 800a4a2:	4912      	ldr	r1, [pc, #72]	; (800a4ec <SFO_push+0x78>)
 800a4a4:	2003      	movs	r0, #3
 800a4a6:	f7ff fcbb 	bl	8009e20 <LOG_log>
  return;
 800a4aa:	e01a      	b.n	800a4e2 <SFO_push+0x6e>
      (void)strncpy(l_element->data, *p_dataIn, CST_STRING_FIFO_MAX_STRING_LENGTH);
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	2210      	movs	r2, #16
 800a4b0:	6839      	ldr	r1, [r7, #0]
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	f000 fae2 	bl	800aa7c <strncpy>
      l_element->nextElement = p_fifo->head;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681a      	ldr	r2, [r3, #0]
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	611a      	str	r2, [r3, #16]
      p_fifo->head           = l_element;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	68fa      	ldr	r2, [r7, #12]
 800a4c4:	601a      	str	r2, [r3, #0]
      if (p_fifo->tail == NULL)
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	685b      	ldr	r3, [r3, #4]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d103      	bne.n	800a4d6 <SFO_push+0x62>
        p_fifo->tail = p_fifo->head;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681a      	ldr	r2, [r3, #0]
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	605a      	str	r2, [r3, #4]
      p_fifo->count++;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	689b      	ldr	r3, [r3, #8]
 800a4da:	1c5a      	adds	r2, r3, #1
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	609a      	str	r2, [r3, #8]
  return;
 800a4e0:	bf00      	nop
}
 800a4e2:	3710      	adds	r7, #16
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	bd80      	pop	{r7, pc}
 800a4e8:	0800cbf0 	.word	0x0800cbf0
 800a4ec:	0800cc28 	.word	0x0800cc28

0800a4f0 <SFO_pop>:

void SFO_pop(T_SFO_Context *p_fifo, T_SFO_data *p_dataOut)
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b084      	sub	sp, #16
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
 800a4f8:	6039      	str	r1, [r7, #0]
  T_SFO_Element *l_element;

  if (p_fifo->count == 0)
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	689b      	ldr	r3, [r3, #8]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d104      	bne.n	800a50c <SFO_pop+0x1c>
  {
    LOG_error("SFO_pop() failure - String FIFO is empty");
 800a502:	491a      	ldr	r1, [pc, #104]	; (800a56c <SFO_pop+0x7c>)
 800a504:	2003      	movs	r0, #3
 800a506:	f7ff fc8b 	bl	8009e20 <LOG_log>
    {
      SFO_init(p_fifo);
    }
  }

  return;
 800a50a:	e02c      	b.n	800a566 <SFO_pop+0x76>
    (void)strncpy(*p_dataOut, p_fifo->tail->data, CST_STRING_FIFO_MAX_STRING_LENGTH);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	685b      	ldr	r3, [r3, #4]
 800a510:	2210      	movs	r2, #16
 800a512:	4619      	mov	r1, r3
 800a514:	6838      	ldr	r0, [r7, #0]
 800a516:	f000 fab1 	bl	800aa7c <strncpy>
    free(p_fifo->tail);
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	685b      	ldr	r3, [r3, #4]
 800a51e:	4618      	mov	r0, r3
 800a520:	f000 f9ae 	bl	800a880 <free>
    if (p_fifo->count > 1)
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	689b      	ldr	r3, [r3, #8]
 800a528:	2b01      	cmp	r3, #1
 800a52a:	d918      	bls.n	800a55e <SFO_pop+0x6e>
      l_element = p_fifo->head;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	60fb      	str	r3, [r7, #12]
      while (l_element->nextElement != p_fifo->tail)
 800a532:	e002      	b.n	800a53a <SFO_pop+0x4a>
        l_element = l_element->nextElement;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	691b      	ldr	r3, [r3, #16]
 800a538:	60fb      	str	r3, [r7, #12]
      while (l_element->nextElement != p_fifo->tail)
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	691a      	ldr	r2, [r3, #16]
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	685b      	ldr	r3, [r3, #4]
 800a542:	429a      	cmp	r2, r3
 800a544:	d1f6      	bne.n	800a534 <SFO_pop+0x44>
      l_element->nextElement = NULL;
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	2200      	movs	r2, #0
 800a54a:	611a      	str	r2, [r3, #16]
      p_fifo->tail           = l_element;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	68fa      	ldr	r2, [r7, #12]
 800a550:	605a      	str	r2, [r3, #4]
      p_fifo->count--;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	689b      	ldr	r3, [r3, #8]
 800a556:	1e5a      	subs	r2, r3, #1
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	609a      	str	r2, [r3, #8]
  return;
 800a55c:	e003      	b.n	800a566 <SFO_pop+0x76>
      SFO_init(p_fifo);
 800a55e:	6878      	ldr	r0, [r7, #4]
 800a560:	f7ff ff70 	bl	800a444 <SFO_init>
  return;
 800a564:	bf00      	nop
}
 800a566:	3710      	adds	r7, #16
 800a568:	46bd      	mov	sp, r7
 800a56a:	bd80      	pop	{r7, pc}
 800a56c:	0800cc5c 	.word	0x0800cc5c

0800a570 <SFO_getCount>:

uint32_t SFO_getCount(T_SFO_Context *p_fifo)
{
 800a570:	b480      	push	{r7}
 800a572:	b083      	sub	sp, #12
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
  return p_fifo->count;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	689b      	ldr	r3, [r3, #8]
}
 800a57c:	4618      	mov	r0, r3
 800a57e:	370c      	adds	r7, #12
 800a580:	46bd      	mov	sp, r7
 800a582:	bc80      	pop	{r7}
 800a584:	4770      	bx	lr
	...

0800a588 <SFO_logInfo>:

void SFO_logInfo(T_SFO_Context *p_fifo)
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	b084      	sub	sp, #16
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]
  T_SFO_Element *l_element;

  if (p_fifo->count == 0)
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	689b      	ldr	r3, [r3, #8]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d104      	bne.n	800a5a2 <SFO_logInfo+0x1a>
  {
    LOG_info("String FIFO is empty");
 800a598:	4924      	ldr	r1, [pc, #144]	; (800a62c <SFO_logInfo+0xa4>)
 800a59a:	2001      	movs	r0, #1
 800a59c:	f7ff fc40 	bl	8009e20 <LOG_log>

      l_element = l_element->nextElement;
    }
  }

  return;
 800a5a0:	e040      	b.n	800a624 <SFO_logInfo+0x9c>
    LOG_info("String FIFO: %u element(s)", p_fifo->count);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	689b      	ldr	r3, [r3, #8]
 800a5a6:	461a      	mov	r2, r3
 800a5a8:	4921      	ldr	r1, [pc, #132]	; (800a630 <SFO_logInfo+0xa8>)
 800a5aa:	2001      	movs	r0, #1
 800a5ac:	f7ff fc38 	bl	8009e20 <LOG_log>
    l_element = p_fifo->head;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	60fb      	str	r3, [r7, #12]
    while (l_element != NULL)
 800a5b6:	e031      	b.n	800a61c <SFO_logInfo+0x94>
      if ((l_element == p_fifo->head) && (l_element == p_fifo->tail))
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	68fa      	ldr	r2, [r7, #12]
 800a5be:	429a      	cmp	r2, r3
 800a5c0:	d10b      	bne.n	800a5da <SFO_logInfo+0x52>
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	685b      	ldr	r3, [r3, #4]
 800a5c6:	68fa      	ldr	r2, [r7, #12]
 800a5c8:	429a      	cmp	r2, r3
 800a5ca:	d106      	bne.n	800a5da <SFO_logInfo+0x52>
        LOG_info("HEAD -> '%s' <- TAIL", l_element->data);
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	461a      	mov	r2, r3
 800a5d0:	4918      	ldr	r1, [pc, #96]	; (800a634 <SFO_logInfo+0xac>)
 800a5d2:	2001      	movs	r0, #1
 800a5d4:	f7ff fc24 	bl	8009e20 <LOG_log>
 800a5d8:	e01d      	b.n	800a616 <SFO_logInfo+0x8e>
      else if (l_element == p_fifo->head)
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	68fa      	ldr	r2, [r7, #12]
 800a5e0:	429a      	cmp	r2, r3
 800a5e2:	d106      	bne.n	800a5f2 <SFO_logInfo+0x6a>
        LOG_info("HEAD -> '%s'", l_element->data);
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	461a      	mov	r2, r3
 800a5e8:	4913      	ldr	r1, [pc, #76]	; (800a638 <SFO_logInfo+0xb0>)
 800a5ea:	2001      	movs	r0, #1
 800a5ec:	f7ff fc18 	bl	8009e20 <LOG_log>
 800a5f0:	e011      	b.n	800a616 <SFO_logInfo+0x8e>
      else if (l_element == p_fifo->tail)
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	685b      	ldr	r3, [r3, #4]
 800a5f6:	68fa      	ldr	r2, [r7, #12]
 800a5f8:	429a      	cmp	r2, r3
 800a5fa:	d106      	bne.n	800a60a <SFO_logInfo+0x82>
        LOG_info("TAIL -> '%s'", l_element->data);
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	461a      	mov	r2, r3
 800a600:	490e      	ldr	r1, [pc, #56]	; (800a63c <SFO_logInfo+0xb4>)
 800a602:	2001      	movs	r0, #1
 800a604:	f7ff fc0c 	bl	8009e20 <LOG_log>
 800a608:	e005      	b.n	800a616 <SFO_logInfo+0x8e>
        LOG_info("        '%s'", l_element->data);
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	461a      	mov	r2, r3
 800a60e:	490c      	ldr	r1, [pc, #48]	; (800a640 <SFO_logInfo+0xb8>)
 800a610:	2001      	movs	r0, #1
 800a612:	f7ff fc05 	bl	8009e20 <LOG_log>
      l_element = l_element->nextElement;
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	691b      	ldr	r3, [r3, #16]
 800a61a:	60fb      	str	r3, [r7, #12]
    while (l_element != NULL)
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d1ca      	bne.n	800a5b8 <SFO_logInfo+0x30>
  return;
 800a622:	bf00      	nop
}
 800a624:	3710      	adds	r7, #16
 800a626:	46bd      	mov	sp, r7
 800a628:	bd80      	pop	{r7, pc}
 800a62a:	bf00      	nop
 800a62c:	0800cc88 	.word	0x0800cc88
 800a630:	0800cca0 	.word	0x0800cca0
 800a634:	0800ccbc 	.word	0x0800ccbc
 800a638:	0800ccd4 	.word	0x0800ccd4
 800a63c:	0800cce4 	.word	0x0800cce4
 800a640:	0800ccf4 	.word	0x0800ccf4

0800a644 <UTI_init>:
#include "log.h"

static TIM_HandleTypeDef *g_UTI_delayTimerHandle;

void UTI_init(TIM_HandleTypeDef *p_delayTimerHandle)
{
 800a644:	b580      	push	{r7, lr}
 800a646:	b082      	sub	sp, #8
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
  LOG_info("Initializing utilities");
 800a64c:	4905      	ldr	r1, [pc, #20]	; (800a664 <UTI_init+0x20>)
 800a64e:	2001      	movs	r0, #1
 800a650:	f7ff fbe6 	bl	8009e20 <LOG_log>

  g_UTI_delayTimerHandle = p_delayTimerHandle;
 800a654:	4a04      	ldr	r2, [pc, #16]	; (800a668 <UTI_init+0x24>)
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	6013      	str	r3, [r2, #0]

  return;
 800a65a:	bf00      	nop
}
 800a65c:	3708      	adds	r7, #8
 800a65e:	46bd      	mov	sp, r7
 800a660:	bd80      	pop	{r7, pc}
 800a662:	bf00      	nop
 800a664:	0800cd04 	.word	0x0800cd04
 800a668:	2000029c 	.word	0x2000029c

0800a66c <UTI_delayUs>:

void UTI_delayUs(uint16_t p_delay)
{
 800a66c:	b480      	push	{r7}
 800a66e:	b083      	sub	sp, #12
 800a670:	af00      	add	r7, sp, #0
 800a672:	4603      	mov	r3, r0
 800a674:	80fb      	strh	r3, [r7, #6]
  /* Reset the micro-seconds counter */
  __HAL_TIM_SET_COUNTER(g_UTI_delayTimerHandle, 0);
 800a676:	4b09      	ldr	r3, [pc, #36]	; (800a69c <UTI_delayUs+0x30>)
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	2200      	movs	r2, #0
 800a67e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Wait for the counter to reach the input micro-seconds number */
  while (__HAL_TIM_GET_COUNTER(g_UTI_delayTimerHandle) < p_delay)
 800a680:	bf00      	nop
 800a682:	4b06      	ldr	r3, [pc, #24]	; (800a69c <UTI_delayUs+0x30>)
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a68a:	88fb      	ldrh	r3, [r7, #6]
 800a68c:	429a      	cmp	r2, r3
 800a68e:	d3f8      	bcc.n	800a682 <UTI_delayUs+0x16>
  {
    ; /* Nothing to do */
  }

  return;
 800a690:	bf00      	nop
}
 800a692:	370c      	adds	r7, #12
 800a694:	46bd      	mov	sp, r7
 800a696:	bc80      	pop	{r7}
 800a698:	4770      	bx	lr
 800a69a:	bf00      	nop
 800a69c:	2000029c 	.word	0x2000029c

0800a6a0 <UTI_resetRtcDate>:

void UTI_resetRtcDate(RTC_DateTypeDef *p_date)
{
 800a6a0:	b480      	push	{r7}
 800a6a2:	b083      	sub	sp, #12
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
  p_date->Date    = 0;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	709a      	strb	r2, [r3, #2]
  p_date->Month   = 0;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	705a      	strb	r2, [r3, #1]
  p_date->WeekDay = 0;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	701a      	strb	r2, [r3, #0]
  p_date->Year    = 0;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	2200      	movs	r2, #0
 800a6be:	70da      	strb	r2, [r3, #3]

  return;
 800a6c0:	bf00      	nop
}
 800a6c2:	370c      	adds	r7, #12
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	bc80      	pop	{r7}
 800a6c8:	4770      	bx	lr

0800a6ca <UTI_resetRtcTime>:


void UTI_resetRtcTime(RTC_TimeTypeDef *p_time)
{
 800a6ca:	b480      	push	{r7}
 800a6cc:	b083      	sub	sp, #12
 800a6ce:	af00      	add	r7, sp, #0
 800a6d0:	6078      	str	r0, [r7, #4]
  p_time->Hours   = 0;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	701a      	strb	r2, [r3, #0]
  p_time->Minutes = 0;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	2200      	movs	r2, #0
 800a6dc:	705a      	strb	r2, [r3, #1]
  p_time->Seconds = 0;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	709a      	strb	r2, [r3, #2]

  return;
 800a6e4:	bf00      	nop
}
 800a6e6:	370c      	adds	r7, #12
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	bc80      	pop	{r7}
 800a6ec:	4770      	bx	lr

0800a6ee <UTI_turnRtcTimeToSeconds>:

uint32_t UTI_turnRtcTimeToSeconds(RTC_TimeTypeDef *p_time)
{
 800a6ee:	b480      	push	{r7}
 800a6f0:	b083      	sub	sp, #12
 800a6f2:	af00      	add	r7, sp, #0
 800a6f4:	6078      	str	r0, [r7, #4]
  return p_time->Hours * 3600 + p_time->Minutes * 60 + p_time->Seconds;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	781b      	ldrb	r3, [r3, #0]
 800a6fa:	461a      	mov	r2, r3
 800a6fc:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800a700:	fb03 f202 	mul.w	r2, r3, r2
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	785b      	ldrb	r3, [r3, #1]
 800a708:	4619      	mov	r1, r3
 800a70a:	460b      	mov	r3, r1
 800a70c:	011b      	lsls	r3, r3, #4
 800a70e:	1a5b      	subs	r3, r3, r1
 800a710:	009b      	lsls	r3, r3, #2
 800a712:	4413      	add	r3, r2
 800a714:	687a      	ldr	r2, [r7, #4]
 800a716:	7892      	ldrb	r2, [r2, #2]
 800a718:	4413      	add	r3, r2
}
 800a71a:	4618      	mov	r0, r3
 800a71c:	370c      	adds	r7, #12
 800a71e:	46bd      	mov	sp, r7
 800a720:	bc80      	pop	{r7}
 800a722:	4770      	bx	lr

0800a724 <UTI_clampIntValue>:

int32_t UTI_clampIntValue(int32_t p_value, int32_t p_minValue, int32_t p_maxValue, bool p_clampToNearest, int32_t p_clampValue)
{
 800a724:	b480      	push	{r7}
 800a726:	b087      	sub	sp, #28
 800a728:	af00      	add	r7, sp, #0
 800a72a:	60f8      	str	r0, [r7, #12]
 800a72c:	60b9      	str	r1, [r7, #8]
 800a72e:	607a      	str	r2, [r7, #4]
 800a730:	70fb      	strb	r3, [r7, #3]
  int32_t l_returnValue;

  if (p_value < p_minValue)
 800a732:	68fa      	ldr	r2, [r7, #12]
 800a734:	68bb      	ldr	r3, [r7, #8]
 800a736:	429a      	cmp	r2, r3
 800a738:	da08      	bge.n	800a74c <UTI_clampIntValue+0x28>
  {
    if (p_clampToNearest == true)
 800a73a:	78fb      	ldrb	r3, [r7, #3]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d002      	beq.n	800a746 <UTI_clampIntValue+0x22>
    {
      l_returnValue = p_minValue;
 800a740:	68bb      	ldr	r3, [r7, #8]
 800a742:	617b      	str	r3, [r7, #20]
 800a744:	e011      	b.n	800a76a <UTI_clampIntValue+0x46>
    }
    else
    {
      l_returnValue = p_clampValue;
 800a746:	6a3b      	ldr	r3, [r7, #32]
 800a748:	617b      	str	r3, [r7, #20]
 800a74a:	e00e      	b.n	800a76a <UTI_clampIntValue+0x46>
    }
  }
  else if (p_value > p_maxValue)
 800a74c:	68fa      	ldr	r2, [r7, #12]
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	429a      	cmp	r2, r3
 800a752:	dd08      	ble.n	800a766 <UTI_clampIntValue+0x42>
  {
    if (p_clampToNearest == true)
 800a754:	78fb      	ldrb	r3, [r7, #3]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d002      	beq.n	800a760 <UTI_clampIntValue+0x3c>
    {
      l_returnValue = p_maxValue;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	617b      	str	r3, [r7, #20]
 800a75e:	e004      	b.n	800a76a <UTI_clampIntValue+0x46>
    }
    else
    {
      l_returnValue = p_clampValue;
 800a760:	6a3b      	ldr	r3, [r7, #32]
 800a762:	617b      	str	r3, [r7, #20]
 800a764:	e001      	b.n	800a76a <UTI_clampIntValue+0x46>
    }
  }
  else
  {
    l_returnValue = p_value;
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	617b      	str	r3, [r7, #20]
  }

  return l_returnValue;
 800a76a:	697b      	ldr	r3, [r7, #20]
}
 800a76c:	4618      	mov	r0, r3
 800a76e:	371c      	adds	r7, #28
 800a770:	46bd      	mov	sp, r7
 800a772:	bc80      	pop	{r7}
 800a774:	4770      	bx	lr

0800a776 <UTI_normalizeIntValue>:

int32_t UTI_normalizeIntValue(int32_t p_value, int32_t p_inMinValue, int32_t p_inMaxValue, int32_t p_outMinValue, int32_t p_outMaxValue, bool p_isInversionNeeded)
{
 800a776:	b5b0      	push	{r4, r5, r7, lr}
 800a778:	b086      	sub	sp, #24
 800a77a:	af00      	add	r7, sp, #0
 800a77c:	60f8      	str	r0, [r7, #12]
 800a77e:	60b9      	str	r1, [r7, #8]
 800a780:	607a      	str	r2, [r7, #4]
 800a782:	603b      	str	r3, [r7, #0]
  float l_returnValue;
  float l_ratio;

  l_ratio       = ((float)p_outMaxValue - (float)p_outMinValue) / ((float)p_inMaxValue - (float)p_inMinValue);
 800a784:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a786:	f7f5 fe0f 	bl	80003a8 <__aeabi_i2f>
 800a78a:	4604      	mov	r4, r0
 800a78c:	6838      	ldr	r0, [r7, #0]
 800a78e:	f7f5 fe0b 	bl	80003a8 <__aeabi_i2f>
 800a792:	4603      	mov	r3, r0
 800a794:	4619      	mov	r1, r3
 800a796:	4620      	mov	r0, r4
 800a798:	f7f5 fd50 	bl	800023c <__aeabi_fsub>
 800a79c:	4603      	mov	r3, r0
 800a79e:	461d      	mov	r5, r3
 800a7a0:	6878      	ldr	r0, [r7, #4]
 800a7a2:	f7f5 fe01 	bl	80003a8 <__aeabi_i2f>
 800a7a6:	4604      	mov	r4, r0
 800a7a8:	68b8      	ldr	r0, [r7, #8]
 800a7aa:	f7f5 fdfd 	bl	80003a8 <__aeabi_i2f>
 800a7ae:	4603      	mov	r3, r0
 800a7b0:	4619      	mov	r1, r3
 800a7b2:	4620      	mov	r0, r4
 800a7b4:	f7f5 fd42 	bl	800023c <__aeabi_fsub>
 800a7b8:	4603      	mov	r3, r0
 800a7ba:	4619      	mov	r1, r3
 800a7bc:	4628      	mov	r0, r5
 800a7be:	f7f5 fefb 	bl	80005b8 <__aeabi_fdiv>
 800a7c2:	4603      	mov	r3, r0
 800a7c4:	613b      	str	r3, [r7, #16]
  l_returnValue =  (float)(p_value - p_inMinValue) * l_ratio + p_outMinValue;
 800a7c6:	68fa      	ldr	r2, [r7, #12]
 800a7c8:	68bb      	ldr	r3, [r7, #8]
 800a7ca:	1ad3      	subs	r3, r2, r3
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	f7f5 fdeb 	bl	80003a8 <__aeabi_i2f>
 800a7d2:	4603      	mov	r3, r0
 800a7d4:	6939      	ldr	r1, [r7, #16]
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	f7f5 fe3a 	bl	8000450 <__aeabi_fmul>
 800a7dc:	4603      	mov	r3, r0
 800a7de:	461c      	mov	r4, r3
 800a7e0:	6838      	ldr	r0, [r7, #0]
 800a7e2:	f7f5 fde1 	bl	80003a8 <__aeabi_i2f>
 800a7e6:	4603      	mov	r3, r0
 800a7e8:	4619      	mov	r1, r3
 800a7ea:	4620      	mov	r0, r4
 800a7ec:	f7f5 fd28 	bl	8000240 <__addsf3>
 800a7f0:	4603      	mov	r3, r0
 800a7f2:	617b      	str	r3, [r7, #20]

  if (p_isInversionNeeded == true)
 800a7f4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d003      	beq.n	800a804 <UTI_normalizeIntValue+0x8e>
  {
    l_returnValue *= -1.0f;
 800a7fc:	697b      	ldr	r3, [r7, #20]
 800a7fe:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800a802:	617b      	str	r3, [r7, #20]
  else
  {
    ; /* Nothing to do */
  }

  return (int32_t)l_returnValue;
 800a804:	6978      	ldr	r0, [r7, #20]
 800a806:	f7f5 ff73 	bl	80006f0 <__aeabi_f2iz>
 800a80a:	4603      	mov	r3, r0
}
 800a80c:	4618      	mov	r0, r3
 800a80e:	3718      	adds	r7, #24
 800a810:	46bd      	mov	sp, r7
 800a812:	bdb0      	pop	{r4, r5, r7, pc}

0800a814 <atoi>:
 800a814:	220a      	movs	r2, #10
 800a816:	2100      	movs	r1, #0
 800a818:	f000 b9d6 	b.w	800abc8 <strtol>

0800a81c <__errno>:
 800a81c:	4b01      	ldr	r3, [pc, #4]	; (800a824 <__errno+0x8>)
 800a81e:	6818      	ldr	r0, [r3, #0]
 800a820:	4770      	bx	lr
 800a822:	bf00      	nop
 800a824:	2000001c 	.word	0x2000001c

0800a828 <__libc_init_array>:
 800a828:	b570      	push	{r4, r5, r6, lr}
 800a82a:	2600      	movs	r6, #0
 800a82c:	4d0c      	ldr	r5, [pc, #48]	; (800a860 <__libc_init_array+0x38>)
 800a82e:	4c0d      	ldr	r4, [pc, #52]	; (800a864 <__libc_init_array+0x3c>)
 800a830:	1b64      	subs	r4, r4, r5
 800a832:	10a4      	asrs	r4, r4, #2
 800a834:	42a6      	cmp	r6, r4
 800a836:	d109      	bne.n	800a84c <__libc_init_array+0x24>
 800a838:	f001 fa4e 	bl	800bcd8 <_init>
 800a83c:	2600      	movs	r6, #0
 800a83e:	4d0a      	ldr	r5, [pc, #40]	; (800a868 <__libc_init_array+0x40>)
 800a840:	4c0a      	ldr	r4, [pc, #40]	; (800a86c <__libc_init_array+0x44>)
 800a842:	1b64      	subs	r4, r4, r5
 800a844:	10a4      	asrs	r4, r4, #2
 800a846:	42a6      	cmp	r6, r4
 800a848:	d105      	bne.n	800a856 <__libc_init_array+0x2e>
 800a84a:	bd70      	pop	{r4, r5, r6, pc}
 800a84c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a850:	4798      	blx	r3
 800a852:	3601      	adds	r6, #1
 800a854:	e7ee      	b.n	800a834 <__libc_init_array+0xc>
 800a856:	f855 3b04 	ldr.w	r3, [r5], #4
 800a85a:	4798      	blx	r3
 800a85c:	3601      	adds	r6, #1
 800a85e:	e7f2      	b.n	800a846 <__libc_init_array+0x1e>
 800a860:	0800ced0 	.word	0x0800ced0
 800a864:	0800ced0 	.word	0x0800ced0
 800a868:	0800ced0 	.word	0x0800ced0
 800a86c:	0800ced4 	.word	0x0800ced4

0800a870 <malloc>:
 800a870:	4b02      	ldr	r3, [pc, #8]	; (800a87c <malloc+0xc>)
 800a872:	4601      	mov	r1, r0
 800a874:	6818      	ldr	r0, [r3, #0]
 800a876:	f000 b85f 	b.w	800a938 <_malloc_r>
 800a87a:	bf00      	nop
 800a87c:	2000001c 	.word	0x2000001c

0800a880 <free>:
 800a880:	4b02      	ldr	r3, [pc, #8]	; (800a88c <free+0xc>)
 800a882:	4601      	mov	r1, r0
 800a884:	6818      	ldr	r0, [r3, #0]
 800a886:	f000 b80b 	b.w	800a8a0 <_free_r>
 800a88a:	bf00      	nop
 800a88c:	2000001c 	.word	0x2000001c

0800a890 <memset>:
 800a890:	4603      	mov	r3, r0
 800a892:	4402      	add	r2, r0
 800a894:	4293      	cmp	r3, r2
 800a896:	d100      	bne.n	800a89a <memset+0xa>
 800a898:	4770      	bx	lr
 800a89a:	f803 1b01 	strb.w	r1, [r3], #1
 800a89e:	e7f9      	b.n	800a894 <memset+0x4>

0800a8a0 <_free_r>:
 800a8a0:	b538      	push	{r3, r4, r5, lr}
 800a8a2:	4605      	mov	r5, r0
 800a8a4:	2900      	cmp	r1, #0
 800a8a6:	d043      	beq.n	800a930 <_free_r+0x90>
 800a8a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8ac:	1f0c      	subs	r4, r1, #4
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	bfb8      	it	lt
 800a8b2:	18e4      	addlt	r4, r4, r3
 800a8b4:	f000 fac4 	bl	800ae40 <__malloc_lock>
 800a8b8:	4a1e      	ldr	r2, [pc, #120]	; (800a934 <_free_r+0x94>)
 800a8ba:	6813      	ldr	r3, [r2, #0]
 800a8bc:	4610      	mov	r0, r2
 800a8be:	b933      	cbnz	r3, 800a8ce <_free_r+0x2e>
 800a8c0:	6063      	str	r3, [r4, #4]
 800a8c2:	6014      	str	r4, [r2, #0]
 800a8c4:	4628      	mov	r0, r5
 800a8c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a8ca:	f000 babf 	b.w	800ae4c <__malloc_unlock>
 800a8ce:	42a3      	cmp	r3, r4
 800a8d0:	d90a      	bls.n	800a8e8 <_free_r+0x48>
 800a8d2:	6821      	ldr	r1, [r4, #0]
 800a8d4:	1862      	adds	r2, r4, r1
 800a8d6:	4293      	cmp	r3, r2
 800a8d8:	bf01      	itttt	eq
 800a8da:	681a      	ldreq	r2, [r3, #0]
 800a8dc:	685b      	ldreq	r3, [r3, #4]
 800a8de:	1852      	addeq	r2, r2, r1
 800a8e0:	6022      	streq	r2, [r4, #0]
 800a8e2:	6063      	str	r3, [r4, #4]
 800a8e4:	6004      	str	r4, [r0, #0]
 800a8e6:	e7ed      	b.n	800a8c4 <_free_r+0x24>
 800a8e8:	461a      	mov	r2, r3
 800a8ea:	685b      	ldr	r3, [r3, #4]
 800a8ec:	b10b      	cbz	r3, 800a8f2 <_free_r+0x52>
 800a8ee:	42a3      	cmp	r3, r4
 800a8f0:	d9fa      	bls.n	800a8e8 <_free_r+0x48>
 800a8f2:	6811      	ldr	r1, [r2, #0]
 800a8f4:	1850      	adds	r0, r2, r1
 800a8f6:	42a0      	cmp	r0, r4
 800a8f8:	d10b      	bne.n	800a912 <_free_r+0x72>
 800a8fa:	6820      	ldr	r0, [r4, #0]
 800a8fc:	4401      	add	r1, r0
 800a8fe:	1850      	adds	r0, r2, r1
 800a900:	4283      	cmp	r3, r0
 800a902:	6011      	str	r1, [r2, #0]
 800a904:	d1de      	bne.n	800a8c4 <_free_r+0x24>
 800a906:	6818      	ldr	r0, [r3, #0]
 800a908:	685b      	ldr	r3, [r3, #4]
 800a90a:	4401      	add	r1, r0
 800a90c:	6011      	str	r1, [r2, #0]
 800a90e:	6053      	str	r3, [r2, #4]
 800a910:	e7d8      	b.n	800a8c4 <_free_r+0x24>
 800a912:	d902      	bls.n	800a91a <_free_r+0x7a>
 800a914:	230c      	movs	r3, #12
 800a916:	602b      	str	r3, [r5, #0]
 800a918:	e7d4      	b.n	800a8c4 <_free_r+0x24>
 800a91a:	6820      	ldr	r0, [r4, #0]
 800a91c:	1821      	adds	r1, r4, r0
 800a91e:	428b      	cmp	r3, r1
 800a920:	bf01      	itttt	eq
 800a922:	6819      	ldreq	r1, [r3, #0]
 800a924:	685b      	ldreq	r3, [r3, #4]
 800a926:	1809      	addeq	r1, r1, r0
 800a928:	6021      	streq	r1, [r4, #0]
 800a92a:	6063      	str	r3, [r4, #4]
 800a92c:	6054      	str	r4, [r2, #4]
 800a92e:	e7c9      	b.n	800a8c4 <_free_r+0x24>
 800a930:	bd38      	pop	{r3, r4, r5, pc}
 800a932:	bf00      	nop
 800a934:	200002a0 	.word	0x200002a0

0800a938 <_malloc_r>:
 800a938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a93a:	1ccd      	adds	r5, r1, #3
 800a93c:	f025 0503 	bic.w	r5, r5, #3
 800a940:	3508      	adds	r5, #8
 800a942:	2d0c      	cmp	r5, #12
 800a944:	bf38      	it	cc
 800a946:	250c      	movcc	r5, #12
 800a948:	2d00      	cmp	r5, #0
 800a94a:	4606      	mov	r6, r0
 800a94c:	db01      	blt.n	800a952 <_malloc_r+0x1a>
 800a94e:	42a9      	cmp	r1, r5
 800a950:	d903      	bls.n	800a95a <_malloc_r+0x22>
 800a952:	230c      	movs	r3, #12
 800a954:	6033      	str	r3, [r6, #0]
 800a956:	2000      	movs	r0, #0
 800a958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a95a:	f000 fa71 	bl	800ae40 <__malloc_lock>
 800a95e:	4921      	ldr	r1, [pc, #132]	; (800a9e4 <_malloc_r+0xac>)
 800a960:	680a      	ldr	r2, [r1, #0]
 800a962:	4614      	mov	r4, r2
 800a964:	b99c      	cbnz	r4, 800a98e <_malloc_r+0x56>
 800a966:	4f20      	ldr	r7, [pc, #128]	; (800a9e8 <_malloc_r+0xb0>)
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	b923      	cbnz	r3, 800a976 <_malloc_r+0x3e>
 800a96c:	4621      	mov	r1, r4
 800a96e:	4630      	mov	r0, r6
 800a970:	f000 f854 	bl	800aa1c <_sbrk_r>
 800a974:	6038      	str	r0, [r7, #0]
 800a976:	4629      	mov	r1, r5
 800a978:	4630      	mov	r0, r6
 800a97a:	f000 f84f 	bl	800aa1c <_sbrk_r>
 800a97e:	1c43      	adds	r3, r0, #1
 800a980:	d123      	bne.n	800a9ca <_malloc_r+0x92>
 800a982:	230c      	movs	r3, #12
 800a984:	4630      	mov	r0, r6
 800a986:	6033      	str	r3, [r6, #0]
 800a988:	f000 fa60 	bl	800ae4c <__malloc_unlock>
 800a98c:	e7e3      	b.n	800a956 <_malloc_r+0x1e>
 800a98e:	6823      	ldr	r3, [r4, #0]
 800a990:	1b5b      	subs	r3, r3, r5
 800a992:	d417      	bmi.n	800a9c4 <_malloc_r+0x8c>
 800a994:	2b0b      	cmp	r3, #11
 800a996:	d903      	bls.n	800a9a0 <_malloc_r+0x68>
 800a998:	6023      	str	r3, [r4, #0]
 800a99a:	441c      	add	r4, r3
 800a99c:	6025      	str	r5, [r4, #0]
 800a99e:	e004      	b.n	800a9aa <_malloc_r+0x72>
 800a9a0:	6863      	ldr	r3, [r4, #4]
 800a9a2:	42a2      	cmp	r2, r4
 800a9a4:	bf0c      	ite	eq
 800a9a6:	600b      	streq	r3, [r1, #0]
 800a9a8:	6053      	strne	r3, [r2, #4]
 800a9aa:	4630      	mov	r0, r6
 800a9ac:	f000 fa4e 	bl	800ae4c <__malloc_unlock>
 800a9b0:	f104 000b 	add.w	r0, r4, #11
 800a9b4:	1d23      	adds	r3, r4, #4
 800a9b6:	f020 0007 	bic.w	r0, r0, #7
 800a9ba:	1ac2      	subs	r2, r0, r3
 800a9bc:	d0cc      	beq.n	800a958 <_malloc_r+0x20>
 800a9be:	1a1b      	subs	r3, r3, r0
 800a9c0:	50a3      	str	r3, [r4, r2]
 800a9c2:	e7c9      	b.n	800a958 <_malloc_r+0x20>
 800a9c4:	4622      	mov	r2, r4
 800a9c6:	6864      	ldr	r4, [r4, #4]
 800a9c8:	e7cc      	b.n	800a964 <_malloc_r+0x2c>
 800a9ca:	1cc4      	adds	r4, r0, #3
 800a9cc:	f024 0403 	bic.w	r4, r4, #3
 800a9d0:	42a0      	cmp	r0, r4
 800a9d2:	d0e3      	beq.n	800a99c <_malloc_r+0x64>
 800a9d4:	1a21      	subs	r1, r4, r0
 800a9d6:	4630      	mov	r0, r6
 800a9d8:	f000 f820 	bl	800aa1c <_sbrk_r>
 800a9dc:	3001      	adds	r0, #1
 800a9de:	d1dd      	bne.n	800a99c <_malloc_r+0x64>
 800a9e0:	e7cf      	b.n	800a982 <_malloc_r+0x4a>
 800a9e2:	bf00      	nop
 800a9e4:	200002a0 	.word	0x200002a0
 800a9e8:	200002a4 	.word	0x200002a4

0800a9ec <iprintf>:
 800a9ec:	b40f      	push	{r0, r1, r2, r3}
 800a9ee:	4b0a      	ldr	r3, [pc, #40]	; (800aa18 <iprintf+0x2c>)
 800a9f0:	b513      	push	{r0, r1, r4, lr}
 800a9f2:	681c      	ldr	r4, [r3, #0]
 800a9f4:	b124      	cbz	r4, 800aa00 <iprintf+0x14>
 800a9f6:	69a3      	ldr	r3, [r4, #24]
 800a9f8:	b913      	cbnz	r3, 800aa00 <iprintf+0x14>
 800a9fa:	4620      	mov	r0, r4
 800a9fc:	f000 f980 	bl	800ad00 <__sinit>
 800aa00:	ab05      	add	r3, sp, #20
 800aa02:	4620      	mov	r0, r4
 800aa04:	9a04      	ldr	r2, [sp, #16]
 800aa06:	68a1      	ldr	r1, [r4, #8]
 800aa08:	9301      	str	r3, [sp, #4]
 800aa0a:	f000 fba9 	bl	800b160 <_vfiprintf_r>
 800aa0e:	b002      	add	sp, #8
 800aa10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa14:	b004      	add	sp, #16
 800aa16:	4770      	bx	lr
 800aa18:	2000001c 	.word	0x2000001c

0800aa1c <_sbrk_r>:
 800aa1c:	b538      	push	{r3, r4, r5, lr}
 800aa1e:	2300      	movs	r3, #0
 800aa20:	4d05      	ldr	r5, [pc, #20]	; (800aa38 <_sbrk_r+0x1c>)
 800aa22:	4604      	mov	r4, r0
 800aa24:	4608      	mov	r0, r1
 800aa26:	602b      	str	r3, [r5, #0]
 800aa28:	f7f7 faaa 	bl	8001f80 <_sbrk>
 800aa2c:	1c43      	adds	r3, r0, #1
 800aa2e:	d102      	bne.n	800aa36 <_sbrk_r+0x1a>
 800aa30:	682b      	ldr	r3, [r5, #0]
 800aa32:	b103      	cbz	r3, 800aa36 <_sbrk_r+0x1a>
 800aa34:	6023      	str	r3, [r4, #0]
 800aa36:	bd38      	pop	{r3, r4, r5, pc}
 800aa38:	20000988 	.word	0x20000988

0800aa3c <siprintf>:
 800aa3c:	b40e      	push	{r1, r2, r3}
 800aa3e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800aa42:	b500      	push	{lr}
 800aa44:	b09c      	sub	sp, #112	; 0x70
 800aa46:	ab1d      	add	r3, sp, #116	; 0x74
 800aa48:	9002      	str	r0, [sp, #8]
 800aa4a:	9006      	str	r0, [sp, #24]
 800aa4c:	9107      	str	r1, [sp, #28]
 800aa4e:	9104      	str	r1, [sp, #16]
 800aa50:	4808      	ldr	r0, [pc, #32]	; (800aa74 <siprintf+0x38>)
 800aa52:	4909      	ldr	r1, [pc, #36]	; (800aa78 <siprintf+0x3c>)
 800aa54:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa58:	9105      	str	r1, [sp, #20]
 800aa5a:	6800      	ldr	r0, [r0, #0]
 800aa5c:	a902      	add	r1, sp, #8
 800aa5e:	9301      	str	r3, [sp, #4]
 800aa60:	f000 fa56 	bl	800af10 <_svfiprintf_r>
 800aa64:	2200      	movs	r2, #0
 800aa66:	9b02      	ldr	r3, [sp, #8]
 800aa68:	701a      	strb	r2, [r3, #0]
 800aa6a:	b01c      	add	sp, #112	; 0x70
 800aa6c:	f85d eb04 	ldr.w	lr, [sp], #4
 800aa70:	b003      	add	sp, #12
 800aa72:	4770      	bx	lr
 800aa74:	2000001c 	.word	0x2000001c
 800aa78:	ffff0208 	.word	0xffff0208

0800aa7c <strncpy>:
 800aa7c:	4603      	mov	r3, r0
 800aa7e:	b510      	push	{r4, lr}
 800aa80:	3901      	subs	r1, #1
 800aa82:	b132      	cbz	r2, 800aa92 <strncpy+0x16>
 800aa84:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800aa88:	3a01      	subs	r2, #1
 800aa8a:	f803 4b01 	strb.w	r4, [r3], #1
 800aa8e:	2c00      	cmp	r4, #0
 800aa90:	d1f7      	bne.n	800aa82 <strncpy+0x6>
 800aa92:	2100      	movs	r1, #0
 800aa94:	441a      	add	r2, r3
 800aa96:	4293      	cmp	r3, r2
 800aa98:	d100      	bne.n	800aa9c <strncpy+0x20>
 800aa9a:	bd10      	pop	{r4, pc}
 800aa9c:	f803 1b01 	strb.w	r1, [r3], #1
 800aaa0:	e7f9      	b.n	800aa96 <strncpy+0x1a>

0800aaa2 <strnlen>:
 800aaa2:	4602      	mov	r2, r0
 800aaa4:	b510      	push	{r4, lr}
 800aaa6:	4401      	add	r1, r0
 800aaa8:	428a      	cmp	r2, r1
 800aaaa:	4613      	mov	r3, r2
 800aaac:	d101      	bne.n	800aab2 <strnlen+0x10>
 800aaae:	1a18      	subs	r0, r3, r0
 800aab0:	bd10      	pop	{r4, pc}
 800aab2:	781c      	ldrb	r4, [r3, #0]
 800aab4:	3201      	adds	r2, #1
 800aab6:	2c00      	cmp	r4, #0
 800aab8:	d1f6      	bne.n	800aaa8 <strnlen+0x6>
 800aaba:	e7f8      	b.n	800aaae <strnlen+0xc>

0800aabc <_strtol_l.isra.0>:
 800aabc:	2b01      	cmp	r3, #1
 800aabe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aac2:	4686      	mov	lr, r0
 800aac4:	d001      	beq.n	800aaca <_strtol_l.isra.0+0xe>
 800aac6:	2b24      	cmp	r3, #36	; 0x24
 800aac8:	d906      	bls.n	800aad8 <_strtol_l.isra.0+0x1c>
 800aaca:	f7ff fea7 	bl	800a81c <__errno>
 800aace:	2316      	movs	r3, #22
 800aad0:	6003      	str	r3, [r0, #0]
 800aad2:	2000      	movs	r0, #0
 800aad4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aad8:	468c      	mov	ip, r1
 800aada:	4e3a      	ldr	r6, [pc, #232]	; (800abc4 <_strtol_l.isra.0+0x108>)
 800aadc:	4660      	mov	r0, ip
 800aade:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800aae2:	5da5      	ldrb	r5, [r4, r6]
 800aae4:	f015 0508 	ands.w	r5, r5, #8
 800aae8:	d1f8      	bne.n	800aadc <_strtol_l.isra.0+0x20>
 800aaea:	2c2d      	cmp	r4, #45	; 0x2d
 800aaec:	d133      	bne.n	800ab56 <_strtol_l.isra.0+0x9a>
 800aaee:	f04f 0801 	mov.w	r8, #1
 800aaf2:	f89c 4000 	ldrb.w	r4, [ip]
 800aaf6:	f100 0c02 	add.w	ip, r0, #2
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d05d      	beq.n	800abba <_strtol_l.isra.0+0xfe>
 800aafe:	2b10      	cmp	r3, #16
 800ab00:	d10c      	bne.n	800ab1c <_strtol_l.isra.0+0x60>
 800ab02:	2c30      	cmp	r4, #48	; 0x30
 800ab04:	d10a      	bne.n	800ab1c <_strtol_l.isra.0+0x60>
 800ab06:	f89c 0000 	ldrb.w	r0, [ip]
 800ab0a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800ab0e:	2858      	cmp	r0, #88	; 0x58
 800ab10:	d14e      	bne.n	800abb0 <_strtol_l.isra.0+0xf4>
 800ab12:	2310      	movs	r3, #16
 800ab14:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800ab18:	f10c 0c02 	add.w	ip, ip, #2
 800ab1c:	2500      	movs	r5, #0
 800ab1e:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 800ab22:	3f01      	subs	r7, #1
 800ab24:	fbb7 f9f3 	udiv	r9, r7, r3
 800ab28:	4628      	mov	r0, r5
 800ab2a:	fb03 7a19 	mls	sl, r3, r9, r7
 800ab2e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800ab32:	2e09      	cmp	r6, #9
 800ab34:	d818      	bhi.n	800ab68 <_strtol_l.isra.0+0xac>
 800ab36:	4634      	mov	r4, r6
 800ab38:	42a3      	cmp	r3, r4
 800ab3a:	dd24      	ble.n	800ab86 <_strtol_l.isra.0+0xca>
 800ab3c:	2d00      	cmp	r5, #0
 800ab3e:	db1f      	blt.n	800ab80 <_strtol_l.isra.0+0xc4>
 800ab40:	4581      	cmp	r9, r0
 800ab42:	d31d      	bcc.n	800ab80 <_strtol_l.isra.0+0xc4>
 800ab44:	d101      	bne.n	800ab4a <_strtol_l.isra.0+0x8e>
 800ab46:	45a2      	cmp	sl, r4
 800ab48:	db1a      	blt.n	800ab80 <_strtol_l.isra.0+0xc4>
 800ab4a:	2501      	movs	r5, #1
 800ab4c:	fb00 4003 	mla	r0, r0, r3, r4
 800ab50:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800ab54:	e7eb      	b.n	800ab2e <_strtol_l.isra.0+0x72>
 800ab56:	2c2b      	cmp	r4, #43	; 0x2b
 800ab58:	bf08      	it	eq
 800ab5a:	f89c 4000 	ldrbeq.w	r4, [ip]
 800ab5e:	46a8      	mov	r8, r5
 800ab60:	bf08      	it	eq
 800ab62:	f100 0c02 	addeq.w	ip, r0, #2
 800ab66:	e7c8      	b.n	800aafa <_strtol_l.isra.0+0x3e>
 800ab68:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800ab6c:	2e19      	cmp	r6, #25
 800ab6e:	d801      	bhi.n	800ab74 <_strtol_l.isra.0+0xb8>
 800ab70:	3c37      	subs	r4, #55	; 0x37
 800ab72:	e7e1      	b.n	800ab38 <_strtol_l.isra.0+0x7c>
 800ab74:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800ab78:	2e19      	cmp	r6, #25
 800ab7a:	d804      	bhi.n	800ab86 <_strtol_l.isra.0+0xca>
 800ab7c:	3c57      	subs	r4, #87	; 0x57
 800ab7e:	e7db      	b.n	800ab38 <_strtol_l.isra.0+0x7c>
 800ab80:	f04f 35ff 	mov.w	r5, #4294967295
 800ab84:	e7e4      	b.n	800ab50 <_strtol_l.isra.0+0x94>
 800ab86:	2d00      	cmp	r5, #0
 800ab88:	da08      	bge.n	800ab9c <_strtol_l.isra.0+0xe0>
 800ab8a:	2322      	movs	r3, #34	; 0x22
 800ab8c:	4638      	mov	r0, r7
 800ab8e:	f8ce 3000 	str.w	r3, [lr]
 800ab92:	2a00      	cmp	r2, #0
 800ab94:	d09e      	beq.n	800aad4 <_strtol_l.isra.0+0x18>
 800ab96:	f10c 31ff 	add.w	r1, ip, #4294967295
 800ab9a:	e007      	b.n	800abac <_strtol_l.isra.0+0xf0>
 800ab9c:	f1b8 0f00 	cmp.w	r8, #0
 800aba0:	d000      	beq.n	800aba4 <_strtol_l.isra.0+0xe8>
 800aba2:	4240      	negs	r0, r0
 800aba4:	2a00      	cmp	r2, #0
 800aba6:	d095      	beq.n	800aad4 <_strtol_l.isra.0+0x18>
 800aba8:	2d00      	cmp	r5, #0
 800abaa:	d1f4      	bne.n	800ab96 <_strtol_l.isra.0+0xda>
 800abac:	6011      	str	r1, [r2, #0]
 800abae:	e791      	b.n	800aad4 <_strtol_l.isra.0+0x18>
 800abb0:	2430      	movs	r4, #48	; 0x30
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d1b2      	bne.n	800ab1c <_strtol_l.isra.0+0x60>
 800abb6:	2308      	movs	r3, #8
 800abb8:	e7b0      	b.n	800ab1c <_strtol_l.isra.0+0x60>
 800abba:	2c30      	cmp	r4, #48	; 0x30
 800abbc:	d0a3      	beq.n	800ab06 <_strtol_l.isra.0+0x4a>
 800abbe:	230a      	movs	r3, #10
 800abc0:	e7ac      	b.n	800ab1c <_strtol_l.isra.0+0x60>
 800abc2:	bf00      	nop
 800abc4:	0800cd39 	.word	0x0800cd39

0800abc8 <strtol>:
 800abc8:	4613      	mov	r3, r2
 800abca:	460a      	mov	r2, r1
 800abcc:	4601      	mov	r1, r0
 800abce:	4802      	ldr	r0, [pc, #8]	; (800abd8 <strtol+0x10>)
 800abd0:	6800      	ldr	r0, [r0, #0]
 800abd2:	f7ff bf73 	b.w	800aabc <_strtol_l.isra.0>
 800abd6:	bf00      	nop
 800abd8:	2000001c 	.word	0x2000001c

0800abdc <_vsniprintf_r>:
 800abdc:	b530      	push	{r4, r5, lr}
 800abde:	1e14      	subs	r4, r2, #0
 800abe0:	4605      	mov	r5, r0
 800abe2:	b09b      	sub	sp, #108	; 0x6c
 800abe4:	4618      	mov	r0, r3
 800abe6:	da05      	bge.n	800abf4 <_vsniprintf_r+0x18>
 800abe8:	238b      	movs	r3, #139	; 0x8b
 800abea:	f04f 30ff 	mov.w	r0, #4294967295
 800abee:	602b      	str	r3, [r5, #0]
 800abf0:	b01b      	add	sp, #108	; 0x6c
 800abf2:	bd30      	pop	{r4, r5, pc}
 800abf4:	f44f 7302 	mov.w	r3, #520	; 0x208
 800abf8:	f8ad 300c 	strh.w	r3, [sp, #12]
 800abfc:	bf0c      	ite	eq
 800abfe:	4623      	moveq	r3, r4
 800ac00:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ac04:	9302      	str	r3, [sp, #8]
 800ac06:	9305      	str	r3, [sp, #20]
 800ac08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ac0c:	4602      	mov	r2, r0
 800ac0e:	9100      	str	r1, [sp, #0]
 800ac10:	9104      	str	r1, [sp, #16]
 800ac12:	f8ad 300e 	strh.w	r3, [sp, #14]
 800ac16:	4669      	mov	r1, sp
 800ac18:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ac1a:	4628      	mov	r0, r5
 800ac1c:	f000 f978 	bl	800af10 <_svfiprintf_r>
 800ac20:	1c43      	adds	r3, r0, #1
 800ac22:	bfbc      	itt	lt
 800ac24:	238b      	movlt	r3, #139	; 0x8b
 800ac26:	602b      	strlt	r3, [r5, #0]
 800ac28:	2c00      	cmp	r4, #0
 800ac2a:	d0e1      	beq.n	800abf0 <_vsniprintf_r+0x14>
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	9b00      	ldr	r3, [sp, #0]
 800ac30:	701a      	strb	r2, [r3, #0]
 800ac32:	e7dd      	b.n	800abf0 <_vsniprintf_r+0x14>

0800ac34 <vsniprintf>:
 800ac34:	b507      	push	{r0, r1, r2, lr}
 800ac36:	9300      	str	r3, [sp, #0]
 800ac38:	4613      	mov	r3, r2
 800ac3a:	460a      	mov	r2, r1
 800ac3c:	4601      	mov	r1, r0
 800ac3e:	4803      	ldr	r0, [pc, #12]	; (800ac4c <vsniprintf+0x18>)
 800ac40:	6800      	ldr	r0, [r0, #0]
 800ac42:	f7ff ffcb 	bl	800abdc <_vsniprintf_r>
 800ac46:	b003      	add	sp, #12
 800ac48:	f85d fb04 	ldr.w	pc, [sp], #4
 800ac4c:	2000001c 	.word	0x2000001c

0800ac50 <std>:
 800ac50:	2300      	movs	r3, #0
 800ac52:	b510      	push	{r4, lr}
 800ac54:	4604      	mov	r4, r0
 800ac56:	e9c0 3300 	strd	r3, r3, [r0]
 800ac5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ac5e:	6083      	str	r3, [r0, #8]
 800ac60:	8181      	strh	r1, [r0, #12]
 800ac62:	6643      	str	r3, [r0, #100]	; 0x64
 800ac64:	81c2      	strh	r2, [r0, #14]
 800ac66:	6183      	str	r3, [r0, #24]
 800ac68:	4619      	mov	r1, r3
 800ac6a:	2208      	movs	r2, #8
 800ac6c:	305c      	adds	r0, #92	; 0x5c
 800ac6e:	f7ff fe0f 	bl	800a890 <memset>
 800ac72:	4b05      	ldr	r3, [pc, #20]	; (800ac88 <std+0x38>)
 800ac74:	6224      	str	r4, [r4, #32]
 800ac76:	6263      	str	r3, [r4, #36]	; 0x24
 800ac78:	4b04      	ldr	r3, [pc, #16]	; (800ac8c <std+0x3c>)
 800ac7a:	62a3      	str	r3, [r4, #40]	; 0x28
 800ac7c:	4b04      	ldr	r3, [pc, #16]	; (800ac90 <std+0x40>)
 800ac7e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ac80:	4b04      	ldr	r3, [pc, #16]	; (800ac94 <std+0x44>)
 800ac82:	6323      	str	r3, [r4, #48]	; 0x30
 800ac84:	bd10      	pop	{r4, pc}
 800ac86:	bf00      	nop
 800ac88:	0800b6ed 	.word	0x0800b6ed
 800ac8c:	0800b70f 	.word	0x0800b70f
 800ac90:	0800b747 	.word	0x0800b747
 800ac94:	0800b76b 	.word	0x0800b76b

0800ac98 <_cleanup_r>:
 800ac98:	4901      	ldr	r1, [pc, #4]	; (800aca0 <_cleanup_r+0x8>)
 800ac9a:	f000 b8af 	b.w	800adfc <_fwalk_reent>
 800ac9e:	bf00      	nop
 800aca0:	0800ba45 	.word	0x0800ba45

0800aca4 <__sfmoreglue>:
 800aca4:	b570      	push	{r4, r5, r6, lr}
 800aca6:	2568      	movs	r5, #104	; 0x68
 800aca8:	1e4a      	subs	r2, r1, #1
 800acaa:	4355      	muls	r5, r2
 800acac:	460e      	mov	r6, r1
 800acae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800acb2:	f7ff fe41 	bl	800a938 <_malloc_r>
 800acb6:	4604      	mov	r4, r0
 800acb8:	b140      	cbz	r0, 800accc <__sfmoreglue+0x28>
 800acba:	2100      	movs	r1, #0
 800acbc:	e9c0 1600 	strd	r1, r6, [r0]
 800acc0:	300c      	adds	r0, #12
 800acc2:	60a0      	str	r0, [r4, #8]
 800acc4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800acc8:	f7ff fde2 	bl	800a890 <memset>
 800accc:	4620      	mov	r0, r4
 800acce:	bd70      	pop	{r4, r5, r6, pc}

0800acd0 <__sfp_lock_acquire>:
 800acd0:	4801      	ldr	r0, [pc, #4]	; (800acd8 <__sfp_lock_acquire+0x8>)
 800acd2:	f000 b8b3 	b.w	800ae3c <__retarget_lock_acquire_recursive>
 800acd6:	bf00      	nop
 800acd8:	20000984 	.word	0x20000984

0800acdc <__sfp_lock_release>:
 800acdc:	4801      	ldr	r0, [pc, #4]	; (800ace4 <__sfp_lock_release+0x8>)
 800acde:	f000 b8ae 	b.w	800ae3e <__retarget_lock_release_recursive>
 800ace2:	bf00      	nop
 800ace4:	20000984 	.word	0x20000984

0800ace8 <__sinit_lock_acquire>:
 800ace8:	4801      	ldr	r0, [pc, #4]	; (800acf0 <__sinit_lock_acquire+0x8>)
 800acea:	f000 b8a7 	b.w	800ae3c <__retarget_lock_acquire_recursive>
 800acee:	bf00      	nop
 800acf0:	2000097f 	.word	0x2000097f

0800acf4 <__sinit_lock_release>:
 800acf4:	4801      	ldr	r0, [pc, #4]	; (800acfc <__sinit_lock_release+0x8>)
 800acf6:	f000 b8a2 	b.w	800ae3e <__retarget_lock_release_recursive>
 800acfa:	bf00      	nop
 800acfc:	2000097f 	.word	0x2000097f

0800ad00 <__sinit>:
 800ad00:	b510      	push	{r4, lr}
 800ad02:	4604      	mov	r4, r0
 800ad04:	f7ff fff0 	bl	800ace8 <__sinit_lock_acquire>
 800ad08:	69a3      	ldr	r3, [r4, #24]
 800ad0a:	b11b      	cbz	r3, 800ad14 <__sinit+0x14>
 800ad0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad10:	f7ff bff0 	b.w	800acf4 <__sinit_lock_release>
 800ad14:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ad18:	6523      	str	r3, [r4, #80]	; 0x50
 800ad1a:	4b13      	ldr	r3, [pc, #76]	; (800ad68 <__sinit+0x68>)
 800ad1c:	4a13      	ldr	r2, [pc, #76]	; (800ad6c <__sinit+0x6c>)
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	62a2      	str	r2, [r4, #40]	; 0x28
 800ad22:	42a3      	cmp	r3, r4
 800ad24:	bf08      	it	eq
 800ad26:	2301      	moveq	r3, #1
 800ad28:	4620      	mov	r0, r4
 800ad2a:	bf08      	it	eq
 800ad2c:	61a3      	streq	r3, [r4, #24]
 800ad2e:	f000 f81f 	bl	800ad70 <__sfp>
 800ad32:	6060      	str	r0, [r4, #4]
 800ad34:	4620      	mov	r0, r4
 800ad36:	f000 f81b 	bl	800ad70 <__sfp>
 800ad3a:	60a0      	str	r0, [r4, #8]
 800ad3c:	4620      	mov	r0, r4
 800ad3e:	f000 f817 	bl	800ad70 <__sfp>
 800ad42:	2200      	movs	r2, #0
 800ad44:	2104      	movs	r1, #4
 800ad46:	60e0      	str	r0, [r4, #12]
 800ad48:	6860      	ldr	r0, [r4, #4]
 800ad4a:	f7ff ff81 	bl	800ac50 <std>
 800ad4e:	2201      	movs	r2, #1
 800ad50:	2109      	movs	r1, #9
 800ad52:	68a0      	ldr	r0, [r4, #8]
 800ad54:	f7ff ff7c 	bl	800ac50 <std>
 800ad58:	2202      	movs	r2, #2
 800ad5a:	2112      	movs	r1, #18
 800ad5c:	68e0      	ldr	r0, [r4, #12]
 800ad5e:	f7ff ff77 	bl	800ac50 <std>
 800ad62:	2301      	movs	r3, #1
 800ad64:	61a3      	str	r3, [r4, #24]
 800ad66:	e7d1      	b.n	800ad0c <__sinit+0xc>
 800ad68:	0800cd34 	.word	0x0800cd34
 800ad6c:	0800ac99 	.word	0x0800ac99

0800ad70 <__sfp>:
 800ad70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad72:	4607      	mov	r7, r0
 800ad74:	f7ff ffac 	bl	800acd0 <__sfp_lock_acquire>
 800ad78:	4b1e      	ldr	r3, [pc, #120]	; (800adf4 <__sfp+0x84>)
 800ad7a:	681e      	ldr	r6, [r3, #0]
 800ad7c:	69b3      	ldr	r3, [r6, #24]
 800ad7e:	b913      	cbnz	r3, 800ad86 <__sfp+0x16>
 800ad80:	4630      	mov	r0, r6
 800ad82:	f7ff ffbd 	bl	800ad00 <__sinit>
 800ad86:	3648      	adds	r6, #72	; 0x48
 800ad88:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ad8c:	3b01      	subs	r3, #1
 800ad8e:	d503      	bpl.n	800ad98 <__sfp+0x28>
 800ad90:	6833      	ldr	r3, [r6, #0]
 800ad92:	b30b      	cbz	r3, 800add8 <__sfp+0x68>
 800ad94:	6836      	ldr	r6, [r6, #0]
 800ad96:	e7f7      	b.n	800ad88 <__sfp+0x18>
 800ad98:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ad9c:	b9d5      	cbnz	r5, 800add4 <__sfp+0x64>
 800ad9e:	4b16      	ldr	r3, [pc, #88]	; (800adf8 <__sfp+0x88>)
 800ada0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ada4:	60e3      	str	r3, [r4, #12]
 800ada6:	6665      	str	r5, [r4, #100]	; 0x64
 800ada8:	f000 f847 	bl	800ae3a <__retarget_lock_init_recursive>
 800adac:	f7ff ff96 	bl	800acdc <__sfp_lock_release>
 800adb0:	2208      	movs	r2, #8
 800adb2:	4629      	mov	r1, r5
 800adb4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800adb8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800adbc:	6025      	str	r5, [r4, #0]
 800adbe:	61a5      	str	r5, [r4, #24]
 800adc0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800adc4:	f7ff fd64 	bl	800a890 <memset>
 800adc8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800adcc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800add0:	4620      	mov	r0, r4
 800add2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800add4:	3468      	adds	r4, #104	; 0x68
 800add6:	e7d9      	b.n	800ad8c <__sfp+0x1c>
 800add8:	2104      	movs	r1, #4
 800adda:	4638      	mov	r0, r7
 800addc:	f7ff ff62 	bl	800aca4 <__sfmoreglue>
 800ade0:	4604      	mov	r4, r0
 800ade2:	6030      	str	r0, [r6, #0]
 800ade4:	2800      	cmp	r0, #0
 800ade6:	d1d5      	bne.n	800ad94 <__sfp+0x24>
 800ade8:	f7ff ff78 	bl	800acdc <__sfp_lock_release>
 800adec:	230c      	movs	r3, #12
 800adee:	603b      	str	r3, [r7, #0]
 800adf0:	e7ee      	b.n	800add0 <__sfp+0x60>
 800adf2:	bf00      	nop
 800adf4:	0800cd34 	.word	0x0800cd34
 800adf8:	ffff0001 	.word	0xffff0001

0800adfc <_fwalk_reent>:
 800adfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae00:	4606      	mov	r6, r0
 800ae02:	4688      	mov	r8, r1
 800ae04:	2700      	movs	r7, #0
 800ae06:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ae0a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ae0e:	f1b9 0901 	subs.w	r9, r9, #1
 800ae12:	d505      	bpl.n	800ae20 <_fwalk_reent+0x24>
 800ae14:	6824      	ldr	r4, [r4, #0]
 800ae16:	2c00      	cmp	r4, #0
 800ae18:	d1f7      	bne.n	800ae0a <_fwalk_reent+0xe>
 800ae1a:	4638      	mov	r0, r7
 800ae1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae20:	89ab      	ldrh	r3, [r5, #12]
 800ae22:	2b01      	cmp	r3, #1
 800ae24:	d907      	bls.n	800ae36 <_fwalk_reent+0x3a>
 800ae26:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ae2a:	3301      	adds	r3, #1
 800ae2c:	d003      	beq.n	800ae36 <_fwalk_reent+0x3a>
 800ae2e:	4629      	mov	r1, r5
 800ae30:	4630      	mov	r0, r6
 800ae32:	47c0      	blx	r8
 800ae34:	4307      	orrs	r7, r0
 800ae36:	3568      	adds	r5, #104	; 0x68
 800ae38:	e7e9      	b.n	800ae0e <_fwalk_reent+0x12>

0800ae3a <__retarget_lock_init_recursive>:
 800ae3a:	4770      	bx	lr

0800ae3c <__retarget_lock_acquire_recursive>:
 800ae3c:	4770      	bx	lr

0800ae3e <__retarget_lock_release_recursive>:
 800ae3e:	4770      	bx	lr

0800ae40 <__malloc_lock>:
 800ae40:	4801      	ldr	r0, [pc, #4]	; (800ae48 <__malloc_lock+0x8>)
 800ae42:	f7ff bffb 	b.w	800ae3c <__retarget_lock_acquire_recursive>
 800ae46:	bf00      	nop
 800ae48:	20000980 	.word	0x20000980

0800ae4c <__malloc_unlock>:
 800ae4c:	4801      	ldr	r0, [pc, #4]	; (800ae54 <__malloc_unlock+0x8>)
 800ae4e:	f7ff bff6 	b.w	800ae3e <__retarget_lock_release_recursive>
 800ae52:	bf00      	nop
 800ae54:	20000980 	.word	0x20000980

0800ae58 <__ssputs_r>:
 800ae58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae5c:	688e      	ldr	r6, [r1, #8]
 800ae5e:	4682      	mov	sl, r0
 800ae60:	429e      	cmp	r6, r3
 800ae62:	460c      	mov	r4, r1
 800ae64:	4690      	mov	r8, r2
 800ae66:	461f      	mov	r7, r3
 800ae68:	d838      	bhi.n	800aedc <__ssputs_r+0x84>
 800ae6a:	898a      	ldrh	r2, [r1, #12]
 800ae6c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ae70:	d032      	beq.n	800aed8 <__ssputs_r+0x80>
 800ae72:	6825      	ldr	r5, [r4, #0]
 800ae74:	6909      	ldr	r1, [r1, #16]
 800ae76:	3301      	adds	r3, #1
 800ae78:	eba5 0901 	sub.w	r9, r5, r1
 800ae7c:	6965      	ldr	r5, [r4, #20]
 800ae7e:	444b      	add	r3, r9
 800ae80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ae84:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ae88:	106d      	asrs	r5, r5, #1
 800ae8a:	429d      	cmp	r5, r3
 800ae8c:	bf38      	it	cc
 800ae8e:	461d      	movcc	r5, r3
 800ae90:	0553      	lsls	r3, r2, #21
 800ae92:	d531      	bpl.n	800aef8 <__ssputs_r+0xa0>
 800ae94:	4629      	mov	r1, r5
 800ae96:	f7ff fd4f 	bl	800a938 <_malloc_r>
 800ae9a:	4606      	mov	r6, r0
 800ae9c:	b950      	cbnz	r0, 800aeb4 <__ssputs_r+0x5c>
 800ae9e:	230c      	movs	r3, #12
 800aea0:	f04f 30ff 	mov.w	r0, #4294967295
 800aea4:	f8ca 3000 	str.w	r3, [sl]
 800aea8:	89a3      	ldrh	r3, [r4, #12]
 800aeaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aeae:	81a3      	strh	r3, [r4, #12]
 800aeb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aeb4:	464a      	mov	r2, r9
 800aeb6:	6921      	ldr	r1, [r4, #16]
 800aeb8:	f000 fe84 	bl	800bbc4 <memcpy>
 800aebc:	89a3      	ldrh	r3, [r4, #12]
 800aebe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800aec2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aec6:	81a3      	strh	r3, [r4, #12]
 800aec8:	6126      	str	r6, [r4, #16]
 800aeca:	444e      	add	r6, r9
 800aecc:	6026      	str	r6, [r4, #0]
 800aece:	463e      	mov	r6, r7
 800aed0:	6165      	str	r5, [r4, #20]
 800aed2:	eba5 0509 	sub.w	r5, r5, r9
 800aed6:	60a5      	str	r5, [r4, #8]
 800aed8:	42be      	cmp	r6, r7
 800aeda:	d900      	bls.n	800aede <__ssputs_r+0x86>
 800aedc:	463e      	mov	r6, r7
 800aede:	4632      	mov	r2, r6
 800aee0:	4641      	mov	r1, r8
 800aee2:	6820      	ldr	r0, [r4, #0]
 800aee4:	f000 fe7c 	bl	800bbe0 <memmove>
 800aee8:	68a3      	ldr	r3, [r4, #8]
 800aeea:	6822      	ldr	r2, [r4, #0]
 800aeec:	1b9b      	subs	r3, r3, r6
 800aeee:	4432      	add	r2, r6
 800aef0:	2000      	movs	r0, #0
 800aef2:	60a3      	str	r3, [r4, #8]
 800aef4:	6022      	str	r2, [r4, #0]
 800aef6:	e7db      	b.n	800aeb0 <__ssputs_r+0x58>
 800aef8:	462a      	mov	r2, r5
 800aefa:	f000 fe8b 	bl	800bc14 <_realloc_r>
 800aefe:	4606      	mov	r6, r0
 800af00:	2800      	cmp	r0, #0
 800af02:	d1e1      	bne.n	800aec8 <__ssputs_r+0x70>
 800af04:	4650      	mov	r0, sl
 800af06:	6921      	ldr	r1, [r4, #16]
 800af08:	f7ff fcca 	bl	800a8a0 <_free_r>
 800af0c:	e7c7      	b.n	800ae9e <__ssputs_r+0x46>
	...

0800af10 <_svfiprintf_r>:
 800af10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af14:	4698      	mov	r8, r3
 800af16:	898b      	ldrh	r3, [r1, #12]
 800af18:	4607      	mov	r7, r0
 800af1a:	061b      	lsls	r3, r3, #24
 800af1c:	460d      	mov	r5, r1
 800af1e:	4614      	mov	r4, r2
 800af20:	b09d      	sub	sp, #116	; 0x74
 800af22:	d50e      	bpl.n	800af42 <_svfiprintf_r+0x32>
 800af24:	690b      	ldr	r3, [r1, #16]
 800af26:	b963      	cbnz	r3, 800af42 <_svfiprintf_r+0x32>
 800af28:	2140      	movs	r1, #64	; 0x40
 800af2a:	f7ff fd05 	bl	800a938 <_malloc_r>
 800af2e:	6028      	str	r0, [r5, #0]
 800af30:	6128      	str	r0, [r5, #16]
 800af32:	b920      	cbnz	r0, 800af3e <_svfiprintf_r+0x2e>
 800af34:	230c      	movs	r3, #12
 800af36:	603b      	str	r3, [r7, #0]
 800af38:	f04f 30ff 	mov.w	r0, #4294967295
 800af3c:	e0d1      	b.n	800b0e2 <_svfiprintf_r+0x1d2>
 800af3e:	2340      	movs	r3, #64	; 0x40
 800af40:	616b      	str	r3, [r5, #20]
 800af42:	2300      	movs	r3, #0
 800af44:	9309      	str	r3, [sp, #36]	; 0x24
 800af46:	2320      	movs	r3, #32
 800af48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800af4c:	2330      	movs	r3, #48	; 0x30
 800af4e:	f04f 0901 	mov.w	r9, #1
 800af52:	f8cd 800c 	str.w	r8, [sp, #12]
 800af56:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b0fc <_svfiprintf_r+0x1ec>
 800af5a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800af5e:	4623      	mov	r3, r4
 800af60:	469a      	mov	sl, r3
 800af62:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af66:	b10a      	cbz	r2, 800af6c <_svfiprintf_r+0x5c>
 800af68:	2a25      	cmp	r2, #37	; 0x25
 800af6a:	d1f9      	bne.n	800af60 <_svfiprintf_r+0x50>
 800af6c:	ebba 0b04 	subs.w	fp, sl, r4
 800af70:	d00b      	beq.n	800af8a <_svfiprintf_r+0x7a>
 800af72:	465b      	mov	r3, fp
 800af74:	4622      	mov	r2, r4
 800af76:	4629      	mov	r1, r5
 800af78:	4638      	mov	r0, r7
 800af7a:	f7ff ff6d 	bl	800ae58 <__ssputs_r>
 800af7e:	3001      	adds	r0, #1
 800af80:	f000 80aa 	beq.w	800b0d8 <_svfiprintf_r+0x1c8>
 800af84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af86:	445a      	add	r2, fp
 800af88:	9209      	str	r2, [sp, #36]	; 0x24
 800af8a:	f89a 3000 	ldrb.w	r3, [sl]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	f000 80a2 	beq.w	800b0d8 <_svfiprintf_r+0x1c8>
 800af94:	2300      	movs	r3, #0
 800af96:	f04f 32ff 	mov.w	r2, #4294967295
 800af9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800af9e:	f10a 0a01 	add.w	sl, sl, #1
 800afa2:	9304      	str	r3, [sp, #16]
 800afa4:	9307      	str	r3, [sp, #28]
 800afa6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800afaa:	931a      	str	r3, [sp, #104]	; 0x68
 800afac:	4654      	mov	r4, sl
 800afae:	2205      	movs	r2, #5
 800afb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afb4:	4851      	ldr	r0, [pc, #324]	; (800b0fc <_svfiprintf_r+0x1ec>)
 800afb6:	f000 fdf7 	bl	800bba8 <memchr>
 800afba:	9a04      	ldr	r2, [sp, #16]
 800afbc:	b9d8      	cbnz	r0, 800aff6 <_svfiprintf_r+0xe6>
 800afbe:	06d0      	lsls	r0, r2, #27
 800afc0:	bf44      	itt	mi
 800afc2:	2320      	movmi	r3, #32
 800afc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800afc8:	0711      	lsls	r1, r2, #28
 800afca:	bf44      	itt	mi
 800afcc:	232b      	movmi	r3, #43	; 0x2b
 800afce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800afd2:	f89a 3000 	ldrb.w	r3, [sl]
 800afd6:	2b2a      	cmp	r3, #42	; 0x2a
 800afd8:	d015      	beq.n	800b006 <_svfiprintf_r+0xf6>
 800afda:	4654      	mov	r4, sl
 800afdc:	2000      	movs	r0, #0
 800afde:	f04f 0c0a 	mov.w	ip, #10
 800afe2:	9a07      	ldr	r2, [sp, #28]
 800afe4:	4621      	mov	r1, r4
 800afe6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800afea:	3b30      	subs	r3, #48	; 0x30
 800afec:	2b09      	cmp	r3, #9
 800afee:	d94e      	bls.n	800b08e <_svfiprintf_r+0x17e>
 800aff0:	b1b0      	cbz	r0, 800b020 <_svfiprintf_r+0x110>
 800aff2:	9207      	str	r2, [sp, #28]
 800aff4:	e014      	b.n	800b020 <_svfiprintf_r+0x110>
 800aff6:	eba0 0308 	sub.w	r3, r0, r8
 800affa:	fa09 f303 	lsl.w	r3, r9, r3
 800affe:	4313      	orrs	r3, r2
 800b000:	46a2      	mov	sl, r4
 800b002:	9304      	str	r3, [sp, #16]
 800b004:	e7d2      	b.n	800afac <_svfiprintf_r+0x9c>
 800b006:	9b03      	ldr	r3, [sp, #12]
 800b008:	1d19      	adds	r1, r3, #4
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	9103      	str	r1, [sp, #12]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	bfbb      	ittet	lt
 800b012:	425b      	neglt	r3, r3
 800b014:	f042 0202 	orrlt.w	r2, r2, #2
 800b018:	9307      	strge	r3, [sp, #28]
 800b01a:	9307      	strlt	r3, [sp, #28]
 800b01c:	bfb8      	it	lt
 800b01e:	9204      	strlt	r2, [sp, #16]
 800b020:	7823      	ldrb	r3, [r4, #0]
 800b022:	2b2e      	cmp	r3, #46	; 0x2e
 800b024:	d10c      	bne.n	800b040 <_svfiprintf_r+0x130>
 800b026:	7863      	ldrb	r3, [r4, #1]
 800b028:	2b2a      	cmp	r3, #42	; 0x2a
 800b02a:	d135      	bne.n	800b098 <_svfiprintf_r+0x188>
 800b02c:	9b03      	ldr	r3, [sp, #12]
 800b02e:	3402      	adds	r4, #2
 800b030:	1d1a      	adds	r2, r3, #4
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	9203      	str	r2, [sp, #12]
 800b036:	2b00      	cmp	r3, #0
 800b038:	bfb8      	it	lt
 800b03a:	f04f 33ff 	movlt.w	r3, #4294967295
 800b03e:	9305      	str	r3, [sp, #20]
 800b040:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b10c <_svfiprintf_r+0x1fc>
 800b044:	2203      	movs	r2, #3
 800b046:	4650      	mov	r0, sl
 800b048:	7821      	ldrb	r1, [r4, #0]
 800b04a:	f000 fdad 	bl	800bba8 <memchr>
 800b04e:	b140      	cbz	r0, 800b062 <_svfiprintf_r+0x152>
 800b050:	2340      	movs	r3, #64	; 0x40
 800b052:	eba0 000a 	sub.w	r0, r0, sl
 800b056:	fa03 f000 	lsl.w	r0, r3, r0
 800b05a:	9b04      	ldr	r3, [sp, #16]
 800b05c:	3401      	adds	r4, #1
 800b05e:	4303      	orrs	r3, r0
 800b060:	9304      	str	r3, [sp, #16]
 800b062:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b066:	2206      	movs	r2, #6
 800b068:	4825      	ldr	r0, [pc, #148]	; (800b100 <_svfiprintf_r+0x1f0>)
 800b06a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b06e:	f000 fd9b 	bl	800bba8 <memchr>
 800b072:	2800      	cmp	r0, #0
 800b074:	d038      	beq.n	800b0e8 <_svfiprintf_r+0x1d8>
 800b076:	4b23      	ldr	r3, [pc, #140]	; (800b104 <_svfiprintf_r+0x1f4>)
 800b078:	bb1b      	cbnz	r3, 800b0c2 <_svfiprintf_r+0x1b2>
 800b07a:	9b03      	ldr	r3, [sp, #12]
 800b07c:	3307      	adds	r3, #7
 800b07e:	f023 0307 	bic.w	r3, r3, #7
 800b082:	3308      	adds	r3, #8
 800b084:	9303      	str	r3, [sp, #12]
 800b086:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b088:	4433      	add	r3, r6
 800b08a:	9309      	str	r3, [sp, #36]	; 0x24
 800b08c:	e767      	b.n	800af5e <_svfiprintf_r+0x4e>
 800b08e:	460c      	mov	r4, r1
 800b090:	2001      	movs	r0, #1
 800b092:	fb0c 3202 	mla	r2, ip, r2, r3
 800b096:	e7a5      	b.n	800afe4 <_svfiprintf_r+0xd4>
 800b098:	2300      	movs	r3, #0
 800b09a:	f04f 0c0a 	mov.w	ip, #10
 800b09e:	4619      	mov	r1, r3
 800b0a0:	3401      	adds	r4, #1
 800b0a2:	9305      	str	r3, [sp, #20]
 800b0a4:	4620      	mov	r0, r4
 800b0a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b0aa:	3a30      	subs	r2, #48	; 0x30
 800b0ac:	2a09      	cmp	r2, #9
 800b0ae:	d903      	bls.n	800b0b8 <_svfiprintf_r+0x1a8>
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d0c5      	beq.n	800b040 <_svfiprintf_r+0x130>
 800b0b4:	9105      	str	r1, [sp, #20]
 800b0b6:	e7c3      	b.n	800b040 <_svfiprintf_r+0x130>
 800b0b8:	4604      	mov	r4, r0
 800b0ba:	2301      	movs	r3, #1
 800b0bc:	fb0c 2101 	mla	r1, ip, r1, r2
 800b0c0:	e7f0      	b.n	800b0a4 <_svfiprintf_r+0x194>
 800b0c2:	ab03      	add	r3, sp, #12
 800b0c4:	9300      	str	r3, [sp, #0]
 800b0c6:	462a      	mov	r2, r5
 800b0c8:	4638      	mov	r0, r7
 800b0ca:	4b0f      	ldr	r3, [pc, #60]	; (800b108 <_svfiprintf_r+0x1f8>)
 800b0cc:	a904      	add	r1, sp, #16
 800b0ce:	f3af 8000 	nop.w
 800b0d2:	1c42      	adds	r2, r0, #1
 800b0d4:	4606      	mov	r6, r0
 800b0d6:	d1d6      	bne.n	800b086 <_svfiprintf_r+0x176>
 800b0d8:	89ab      	ldrh	r3, [r5, #12]
 800b0da:	065b      	lsls	r3, r3, #25
 800b0dc:	f53f af2c 	bmi.w	800af38 <_svfiprintf_r+0x28>
 800b0e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b0e2:	b01d      	add	sp, #116	; 0x74
 800b0e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0e8:	ab03      	add	r3, sp, #12
 800b0ea:	9300      	str	r3, [sp, #0]
 800b0ec:	462a      	mov	r2, r5
 800b0ee:	4638      	mov	r0, r7
 800b0f0:	4b05      	ldr	r3, [pc, #20]	; (800b108 <_svfiprintf_r+0x1f8>)
 800b0f2:	a904      	add	r1, sp, #16
 800b0f4:	f000 f9d4 	bl	800b4a0 <_printf_i>
 800b0f8:	e7eb      	b.n	800b0d2 <_svfiprintf_r+0x1c2>
 800b0fa:	bf00      	nop
 800b0fc:	0800ce9c 	.word	0x0800ce9c
 800b100:	0800cea6 	.word	0x0800cea6
 800b104:	00000000 	.word	0x00000000
 800b108:	0800ae59 	.word	0x0800ae59
 800b10c:	0800cea2 	.word	0x0800cea2

0800b110 <__sfputc_r>:
 800b110:	6893      	ldr	r3, [r2, #8]
 800b112:	b410      	push	{r4}
 800b114:	3b01      	subs	r3, #1
 800b116:	2b00      	cmp	r3, #0
 800b118:	6093      	str	r3, [r2, #8]
 800b11a:	da07      	bge.n	800b12c <__sfputc_r+0x1c>
 800b11c:	6994      	ldr	r4, [r2, #24]
 800b11e:	42a3      	cmp	r3, r4
 800b120:	db01      	blt.n	800b126 <__sfputc_r+0x16>
 800b122:	290a      	cmp	r1, #10
 800b124:	d102      	bne.n	800b12c <__sfputc_r+0x1c>
 800b126:	bc10      	pop	{r4}
 800b128:	f000 bb24 	b.w	800b774 <__swbuf_r>
 800b12c:	6813      	ldr	r3, [r2, #0]
 800b12e:	1c58      	adds	r0, r3, #1
 800b130:	6010      	str	r0, [r2, #0]
 800b132:	7019      	strb	r1, [r3, #0]
 800b134:	4608      	mov	r0, r1
 800b136:	bc10      	pop	{r4}
 800b138:	4770      	bx	lr

0800b13a <__sfputs_r>:
 800b13a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b13c:	4606      	mov	r6, r0
 800b13e:	460f      	mov	r7, r1
 800b140:	4614      	mov	r4, r2
 800b142:	18d5      	adds	r5, r2, r3
 800b144:	42ac      	cmp	r4, r5
 800b146:	d101      	bne.n	800b14c <__sfputs_r+0x12>
 800b148:	2000      	movs	r0, #0
 800b14a:	e007      	b.n	800b15c <__sfputs_r+0x22>
 800b14c:	463a      	mov	r2, r7
 800b14e:	4630      	mov	r0, r6
 800b150:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b154:	f7ff ffdc 	bl	800b110 <__sfputc_r>
 800b158:	1c43      	adds	r3, r0, #1
 800b15a:	d1f3      	bne.n	800b144 <__sfputs_r+0xa>
 800b15c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b160 <_vfiprintf_r>:
 800b160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b164:	460d      	mov	r5, r1
 800b166:	4614      	mov	r4, r2
 800b168:	4698      	mov	r8, r3
 800b16a:	4606      	mov	r6, r0
 800b16c:	b09d      	sub	sp, #116	; 0x74
 800b16e:	b118      	cbz	r0, 800b178 <_vfiprintf_r+0x18>
 800b170:	6983      	ldr	r3, [r0, #24]
 800b172:	b90b      	cbnz	r3, 800b178 <_vfiprintf_r+0x18>
 800b174:	f7ff fdc4 	bl	800ad00 <__sinit>
 800b178:	4b89      	ldr	r3, [pc, #548]	; (800b3a0 <_vfiprintf_r+0x240>)
 800b17a:	429d      	cmp	r5, r3
 800b17c:	d11b      	bne.n	800b1b6 <_vfiprintf_r+0x56>
 800b17e:	6875      	ldr	r5, [r6, #4]
 800b180:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b182:	07d9      	lsls	r1, r3, #31
 800b184:	d405      	bmi.n	800b192 <_vfiprintf_r+0x32>
 800b186:	89ab      	ldrh	r3, [r5, #12]
 800b188:	059a      	lsls	r2, r3, #22
 800b18a:	d402      	bmi.n	800b192 <_vfiprintf_r+0x32>
 800b18c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b18e:	f7ff fe55 	bl	800ae3c <__retarget_lock_acquire_recursive>
 800b192:	89ab      	ldrh	r3, [r5, #12]
 800b194:	071b      	lsls	r3, r3, #28
 800b196:	d501      	bpl.n	800b19c <_vfiprintf_r+0x3c>
 800b198:	692b      	ldr	r3, [r5, #16]
 800b19a:	b9eb      	cbnz	r3, 800b1d8 <_vfiprintf_r+0x78>
 800b19c:	4629      	mov	r1, r5
 800b19e:	4630      	mov	r0, r6
 800b1a0:	f000 fb4c 	bl	800b83c <__swsetup_r>
 800b1a4:	b1c0      	cbz	r0, 800b1d8 <_vfiprintf_r+0x78>
 800b1a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b1a8:	07dc      	lsls	r4, r3, #31
 800b1aa:	d50e      	bpl.n	800b1ca <_vfiprintf_r+0x6a>
 800b1ac:	f04f 30ff 	mov.w	r0, #4294967295
 800b1b0:	b01d      	add	sp, #116	; 0x74
 800b1b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1b6:	4b7b      	ldr	r3, [pc, #492]	; (800b3a4 <_vfiprintf_r+0x244>)
 800b1b8:	429d      	cmp	r5, r3
 800b1ba:	d101      	bne.n	800b1c0 <_vfiprintf_r+0x60>
 800b1bc:	68b5      	ldr	r5, [r6, #8]
 800b1be:	e7df      	b.n	800b180 <_vfiprintf_r+0x20>
 800b1c0:	4b79      	ldr	r3, [pc, #484]	; (800b3a8 <_vfiprintf_r+0x248>)
 800b1c2:	429d      	cmp	r5, r3
 800b1c4:	bf08      	it	eq
 800b1c6:	68f5      	ldreq	r5, [r6, #12]
 800b1c8:	e7da      	b.n	800b180 <_vfiprintf_r+0x20>
 800b1ca:	89ab      	ldrh	r3, [r5, #12]
 800b1cc:	0598      	lsls	r0, r3, #22
 800b1ce:	d4ed      	bmi.n	800b1ac <_vfiprintf_r+0x4c>
 800b1d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b1d2:	f7ff fe34 	bl	800ae3e <__retarget_lock_release_recursive>
 800b1d6:	e7e9      	b.n	800b1ac <_vfiprintf_r+0x4c>
 800b1d8:	2300      	movs	r3, #0
 800b1da:	9309      	str	r3, [sp, #36]	; 0x24
 800b1dc:	2320      	movs	r3, #32
 800b1de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b1e2:	2330      	movs	r3, #48	; 0x30
 800b1e4:	f04f 0901 	mov.w	r9, #1
 800b1e8:	f8cd 800c 	str.w	r8, [sp, #12]
 800b1ec:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800b3ac <_vfiprintf_r+0x24c>
 800b1f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b1f4:	4623      	mov	r3, r4
 800b1f6:	469a      	mov	sl, r3
 800b1f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b1fc:	b10a      	cbz	r2, 800b202 <_vfiprintf_r+0xa2>
 800b1fe:	2a25      	cmp	r2, #37	; 0x25
 800b200:	d1f9      	bne.n	800b1f6 <_vfiprintf_r+0x96>
 800b202:	ebba 0b04 	subs.w	fp, sl, r4
 800b206:	d00b      	beq.n	800b220 <_vfiprintf_r+0xc0>
 800b208:	465b      	mov	r3, fp
 800b20a:	4622      	mov	r2, r4
 800b20c:	4629      	mov	r1, r5
 800b20e:	4630      	mov	r0, r6
 800b210:	f7ff ff93 	bl	800b13a <__sfputs_r>
 800b214:	3001      	adds	r0, #1
 800b216:	f000 80aa 	beq.w	800b36e <_vfiprintf_r+0x20e>
 800b21a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b21c:	445a      	add	r2, fp
 800b21e:	9209      	str	r2, [sp, #36]	; 0x24
 800b220:	f89a 3000 	ldrb.w	r3, [sl]
 800b224:	2b00      	cmp	r3, #0
 800b226:	f000 80a2 	beq.w	800b36e <_vfiprintf_r+0x20e>
 800b22a:	2300      	movs	r3, #0
 800b22c:	f04f 32ff 	mov.w	r2, #4294967295
 800b230:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b234:	f10a 0a01 	add.w	sl, sl, #1
 800b238:	9304      	str	r3, [sp, #16]
 800b23a:	9307      	str	r3, [sp, #28]
 800b23c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b240:	931a      	str	r3, [sp, #104]	; 0x68
 800b242:	4654      	mov	r4, sl
 800b244:	2205      	movs	r2, #5
 800b246:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b24a:	4858      	ldr	r0, [pc, #352]	; (800b3ac <_vfiprintf_r+0x24c>)
 800b24c:	f000 fcac 	bl	800bba8 <memchr>
 800b250:	9a04      	ldr	r2, [sp, #16]
 800b252:	b9d8      	cbnz	r0, 800b28c <_vfiprintf_r+0x12c>
 800b254:	06d1      	lsls	r1, r2, #27
 800b256:	bf44      	itt	mi
 800b258:	2320      	movmi	r3, #32
 800b25a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b25e:	0713      	lsls	r3, r2, #28
 800b260:	bf44      	itt	mi
 800b262:	232b      	movmi	r3, #43	; 0x2b
 800b264:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b268:	f89a 3000 	ldrb.w	r3, [sl]
 800b26c:	2b2a      	cmp	r3, #42	; 0x2a
 800b26e:	d015      	beq.n	800b29c <_vfiprintf_r+0x13c>
 800b270:	4654      	mov	r4, sl
 800b272:	2000      	movs	r0, #0
 800b274:	f04f 0c0a 	mov.w	ip, #10
 800b278:	9a07      	ldr	r2, [sp, #28]
 800b27a:	4621      	mov	r1, r4
 800b27c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b280:	3b30      	subs	r3, #48	; 0x30
 800b282:	2b09      	cmp	r3, #9
 800b284:	d94e      	bls.n	800b324 <_vfiprintf_r+0x1c4>
 800b286:	b1b0      	cbz	r0, 800b2b6 <_vfiprintf_r+0x156>
 800b288:	9207      	str	r2, [sp, #28]
 800b28a:	e014      	b.n	800b2b6 <_vfiprintf_r+0x156>
 800b28c:	eba0 0308 	sub.w	r3, r0, r8
 800b290:	fa09 f303 	lsl.w	r3, r9, r3
 800b294:	4313      	orrs	r3, r2
 800b296:	46a2      	mov	sl, r4
 800b298:	9304      	str	r3, [sp, #16]
 800b29a:	e7d2      	b.n	800b242 <_vfiprintf_r+0xe2>
 800b29c:	9b03      	ldr	r3, [sp, #12]
 800b29e:	1d19      	adds	r1, r3, #4
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	9103      	str	r1, [sp, #12]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	bfbb      	ittet	lt
 800b2a8:	425b      	neglt	r3, r3
 800b2aa:	f042 0202 	orrlt.w	r2, r2, #2
 800b2ae:	9307      	strge	r3, [sp, #28]
 800b2b0:	9307      	strlt	r3, [sp, #28]
 800b2b2:	bfb8      	it	lt
 800b2b4:	9204      	strlt	r2, [sp, #16]
 800b2b6:	7823      	ldrb	r3, [r4, #0]
 800b2b8:	2b2e      	cmp	r3, #46	; 0x2e
 800b2ba:	d10c      	bne.n	800b2d6 <_vfiprintf_r+0x176>
 800b2bc:	7863      	ldrb	r3, [r4, #1]
 800b2be:	2b2a      	cmp	r3, #42	; 0x2a
 800b2c0:	d135      	bne.n	800b32e <_vfiprintf_r+0x1ce>
 800b2c2:	9b03      	ldr	r3, [sp, #12]
 800b2c4:	3402      	adds	r4, #2
 800b2c6:	1d1a      	adds	r2, r3, #4
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	9203      	str	r2, [sp, #12]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	bfb8      	it	lt
 800b2d0:	f04f 33ff 	movlt.w	r3, #4294967295
 800b2d4:	9305      	str	r3, [sp, #20]
 800b2d6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b3bc <_vfiprintf_r+0x25c>
 800b2da:	2203      	movs	r2, #3
 800b2dc:	4650      	mov	r0, sl
 800b2de:	7821      	ldrb	r1, [r4, #0]
 800b2e0:	f000 fc62 	bl	800bba8 <memchr>
 800b2e4:	b140      	cbz	r0, 800b2f8 <_vfiprintf_r+0x198>
 800b2e6:	2340      	movs	r3, #64	; 0x40
 800b2e8:	eba0 000a 	sub.w	r0, r0, sl
 800b2ec:	fa03 f000 	lsl.w	r0, r3, r0
 800b2f0:	9b04      	ldr	r3, [sp, #16]
 800b2f2:	3401      	adds	r4, #1
 800b2f4:	4303      	orrs	r3, r0
 800b2f6:	9304      	str	r3, [sp, #16]
 800b2f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2fc:	2206      	movs	r2, #6
 800b2fe:	482c      	ldr	r0, [pc, #176]	; (800b3b0 <_vfiprintf_r+0x250>)
 800b300:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b304:	f000 fc50 	bl	800bba8 <memchr>
 800b308:	2800      	cmp	r0, #0
 800b30a:	d03f      	beq.n	800b38c <_vfiprintf_r+0x22c>
 800b30c:	4b29      	ldr	r3, [pc, #164]	; (800b3b4 <_vfiprintf_r+0x254>)
 800b30e:	bb1b      	cbnz	r3, 800b358 <_vfiprintf_r+0x1f8>
 800b310:	9b03      	ldr	r3, [sp, #12]
 800b312:	3307      	adds	r3, #7
 800b314:	f023 0307 	bic.w	r3, r3, #7
 800b318:	3308      	adds	r3, #8
 800b31a:	9303      	str	r3, [sp, #12]
 800b31c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b31e:	443b      	add	r3, r7
 800b320:	9309      	str	r3, [sp, #36]	; 0x24
 800b322:	e767      	b.n	800b1f4 <_vfiprintf_r+0x94>
 800b324:	460c      	mov	r4, r1
 800b326:	2001      	movs	r0, #1
 800b328:	fb0c 3202 	mla	r2, ip, r2, r3
 800b32c:	e7a5      	b.n	800b27a <_vfiprintf_r+0x11a>
 800b32e:	2300      	movs	r3, #0
 800b330:	f04f 0c0a 	mov.w	ip, #10
 800b334:	4619      	mov	r1, r3
 800b336:	3401      	adds	r4, #1
 800b338:	9305      	str	r3, [sp, #20]
 800b33a:	4620      	mov	r0, r4
 800b33c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b340:	3a30      	subs	r2, #48	; 0x30
 800b342:	2a09      	cmp	r2, #9
 800b344:	d903      	bls.n	800b34e <_vfiprintf_r+0x1ee>
 800b346:	2b00      	cmp	r3, #0
 800b348:	d0c5      	beq.n	800b2d6 <_vfiprintf_r+0x176>
 800b34a:	9105      	str	r1, [sp, #20]
 800b34c:	e7c3      	b.n	800b2d6 <_vfiprintf_r+0x176>
 800b34e:	4604      	mov	r4, r0
 800b350:	2301      	movs	r3, #1
 800b352:	fb0c 2101 	mla	r1, ip, r1, r2
 800b356:	e7f0      	b.n	800b33a <_vfiprintf_r+0x1da>
 800b358:	ab03      	add	r3, sp, #12
 800b35a:	9300      	str	r3, [sp, #0]
 800b35c:	462a      	mov	r2, r5
 800b35e:	4630      	mov	r0, r6
 800b360:	4b15      	ldr	r3, [pc, #84]	; (800b3b8 <_vfiprintf_r+0x258>)
 800b362:	a904      	add	r1, sp, #16
 800b364:	f3af 8000 	nop.w
 800b368:	4607      	mov	r7, r0
 800b36a:	1c78      	adds	r0, r7, #1
 800b36c:	d1d6      	bne.n	800b31c <_vfiprintf_r+0x1bc>
 800b36e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b370:	07d9      	lsls	r1, r3, #31
 800b372:	d405      	bmi.n	800b380 <_vfiprintf_r+0x220>
 800b374:	89ab      	ldrh	r3, [r5, #12]
 800b376:	059a      	lsls	r2, r3, #22
 800b378:	d402      	bmi.n	800b380 <_vfiprintf_r+0x220>
 800b37a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b37c:	f7ff fd5f 	bl	800ae3e <__retarget_lock_release_recursive>
 800b380:	89ab      	ldrh	r3, [r5, #12]
 800b382:	065b      	lsls	r3, r3, #25
 800b384:	f53f af12 	bmi.w	800b1ac <_vfiprintf_r+0x4c>
 800b388:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b38a:	e711      	b.n	800b1b0 <_vfiprintf_r+0x50>
 800b38c:	ab03      	add	r3, sp, #12
 800b38e:	9300      	str	r3, [sp, #0]
 800b390:	462a      	mov	r2, r5
 800b392:	4630      	mov	r0, r6
 800b394:	4b08      	ldr	r3, [pc, #32]	; (800b3b8 <_vfiprintf_r+0x258>)
 800b396:	a904      	add	r1, sp, #16
 800b398:	f000 f882 	bl	800b4a0 <_printf_i>
 800b39c:	e7e4      	b.n	800b368 <_vfiprintf_r+0x208>
 800b39e:	bf00      	nop
 800b3a0:	0800ce5c 	.word	0x0800ce5c
 800b3a4:	0800ce7c 	.word	0x0800ce7c
 800b3a8:	0800ce3c 	.word	0x0800ce3c
 800b3ac:	0800ce9c 	.word	0x0800ce9c
 800b3b0:	0800cea6 	.word	0x0800cea6
 800b3b4:	00000000 	.word	0x00000000
 800b3b8:	0800b13b 	.word	0x0800b13b
 800b3bc:	0800cea2 	.word	0x0800cea2

0800b3c0 <_printf_common>:
 800b3c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3c4:	4616      	mov	r6, r2
 800b3c6:	4699      	mov	r9, r3
 800b3c8:	688a      	ldr	r2, [r1, #8]
 800b3ca:	690b      	ldr	r3, [r1, #16]
 800b3cc:	4607      	mov	r7, r0
 800b3ce:	4293      	cmp	r3, r2
 800b3d0:	bfb8      	it	lt
 800b3d2:	4613      	movlt	r3, r2
 800b3d4:	6033      	str	r3, [r6, #0]
 800b3d6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b3da:	460c      	mov	r4, r1
 800b3dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b3e0:	b10a      	cbz	r2, 800b3e6 <_printf_common+0x26>
 800b3e2:	3301      	adds	r3, #1
 800b3e4:	6033      	str	r3, [r6, #0]
 800b3e6:	6823      	ldr	r3, [r4, #0]
 800b3e8:	0699      	lsls	r1, r3, #26
 800b3ea:	bf42      	ittt	mi
 800b3ec:	6833      	ldrmi	r3, [r6, #0]
 800b3ee:	3302      	addmi	r3, #2
 800b3f0:	6033      	strmi	r3, [r6, #0]
 800b3f2:	6825      	ldr	r5, [r4, #0]
 800b3f4:	f015 0506 	ands.w	r5, r5, #6
 800b3f8:	d106      	bne.n	800b408 <_printf_common+0x48>
 800b3fa:	f104 0a19 	add.w	sl, r4, #25
 800b3fe:	68e3      	ldr	r3, [r4, #12]
 800b400:	6832      	ldr	r2, [r6, #0]
 800b402:	1a9b      	subs	r3, r3, r2
 800b404:	42ab      	cmp	r3, r5
 800b406:	dc28      	bgt.n	800b45a <_printf_common+0x9a>
 800b408:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b40c:	1e13      	subs	r3, r2, #0
 800b40e:	6822      	ldr	r2, [r4, #0]
 800b410:	bf18      	it	ne
 800b412:	2301      	movne	r3, #1
 800b414:	0692      	lsls	r2, r2, #26
 800b416:	d42d      	bmi.n	800b474 <_printf_common+0xb4>
 800b418:	4649      	mov	r1, r9
 800b41a:	4638      	mov	r0, r7
 800b41c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b420:	47c0      	blx	r8
 800b422:	3001      	adds	r0, #1
 800b424:	d020      	beq.n	800b468 <_printf_common+0xa8>
 800b426:	6823      	ldr	r3, [r4, #0]
 800b428:	68e5      	ldr	r5, [r4, #12]
 800b42a:	f003 0306 	and.w	r3, r3, #6
 800b42e:	2b04      	cmp	r3, #4
 800b430:	bf18      	it	ne
 800b432:	2500      	movne	r5, #0
 800b434:	6832      	ldr	r2, [r6, #0]
 800b436:	f04f 0600 	mov.w	r6, #0
 800b43a:	68a3      	ldr	r3, [r4, #8]
 800b43c:	bf08      	it	eq
 800b43e:	1aad      	subeq	r5, r5, r2
 800b440:	6922      	ldr	r2, [r4, #16]
 800b442:	bf08      	it	eq
 800b444:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b448:	4293      	cmp	r3, r2
 800b44a:	bfc4      	itt	gt
 800b44c:	1a9b      	subgt	r3, r3, r2
 800b44e:	18ed      	addgt	r5, r5, r3
 800b450:	341a      	adds	r4, #26
 800b452:	42b5      	cmp	r5, r6
 800b454:	d11a      	bne.n	800b48c <_printf_common+0xcc>
 800b456:	2000      	movs	r0, #0
 800b458:	e008      	b.n	800b46c <_printf_common+0xac>
 800b45a:	2301      	movs	r3, #1
 800b45c:	4652      	mov	r2, sl
 800b45e:	4649      	mov	r1, r9
 800b460:	4638      	mov	r0, r7
 800b462:	47c0      	blx	r8
 800b464:	3001      	adds	r0, #1
 800b466:	d103      	bne.n	800b470 <_printf_common+0xb0>
 800b468:	f04f 30ff 	mov.w	r0, #4294967295
 800b46c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b470:	3501      	adds	r5, #1
 800b472:	e7c4      	b.n	800b3fe <_printf_common+0x3e>
 800b474:	2030      	movs	r0, #48	; 0x30
 800b476:	18e1      	adds	r1, r4, r3
 800b478:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b47c:	1c5a      	adds	r2, r3, #1
 800b47e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b482:	4422      	add	r2, r4
 800b484:	3302      	adds	r3, #2
 800b486:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b48a:	e7c5      	b.n	800b418 <_printf_common+0x58>
 800b48c:	2301      	movs	r3, #1
 800b48e:	4622      	mov	r2, r4
 800b490:	4649      	mov	r1, r9
 800b492:	4638      	mov	r0, r7
 800b494:	47c0      	blx	r8
 800b496:	3001      	adds	r0, #1
 800b498:	d0e6      	beq.n	800b468 <_printf_common+0xa8>
 800b49a:	3601      	adds	r6, #1
 800b49c:	e7d9      	b.n	800b452 <_printf_common+0x92>
	...

0800b4a0 <_printf_i>:
 800b4a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b4a4:	460c      	mov	r4, r1
 800b4a6:	7e27      	ldrb	r7, [r4, #24]
 800b4a8:	4691      	mov	r9, r2
 800b4aa:	2f78      	cmp	r7, #120	; 0x78
 800b4ac:	4680      	mov	r8, r0
 800b4ae:	469a      	mov	sl, r3
 800b4b0:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b4b2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b4b6:	d807      	bhi.n	800b4c8 <_printf_i+0x28>
 800b4b8:	2f62      	cmp	r7, #98	; 0x62
 800b4ba:	d80a      	bhi.n	800b4d2 <_printf_i+0x32>
 800b4bc:	2f00      	cmp	r7, #0
 800b4be:	f000 80d9 	beq.w	800b674 <_printf_i+0x1d4>
 800b4c2:	2f58      	cmp	r7, #88	; 0x58
 800b4c4:	f000 80a4 	beq.w	800b610 <_printf_i+0x170>
 800b4c8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b4cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b4d0:	e03a      	b.n	800b548 <_printf_i+0xa8>
 800b4d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b4d6:	2b15      	cmp	r3, #21
 800b4d8:	d8f6      	bhi.n	800b4c8 <_printf_i+0x28>
 800b4da:	a001      	add	r0, pc, #4	; (adr r0, 800b4e0 <_printf_i+0x40>)
 800b4dc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b4e0:	0800b539 	.word	0x0800b539
 800b4e4:	0800b54d 	.word	0x0800b54d
 800b4e8:	0800b4c9 	.word	0x0800b4c9
 800b4ec:	0800b4c9 	.word	0x0800b4c9
 800b4f0:	0800b4c9 	.word	0x0800b4c9
 800b4f4:	0800b4c9 	.word	0x0800b4c9
 800b4f8:	0800b54d 	.word	0x0800b54d
 800b4fc:	0800b4c9 	.word	0x0800b4c9
 800b500:	0800b4c9 	.word	0x0800b4c9
 800b504:	0800b4c9 	.word	0x0800b4c9
 800b508:	0800b4c9 	.word	0x0800b4c9
 800b50c:	0800b65b 	.word	0x0800b65b
 800b510:	0800b57d 	.word	0x0800b57d
 800b514:	0800b63d 	.word	0x0800b63d
 800b518:	0800b4c9 	.word	0x0800b4c9
 800b51c:	0800b4c9 	.word	0x0800b4c9
 800b520:	0800b67d 	.word	0x0800b67d
 800b524:	0800b4c9 	.word	0x0800b4c9
 800b528:	0800b57d 	.word	0x0800b57d
 800b52c:	0800b4c9 	.word	0x0800b4c9
 800b530:	0800b4c9 	.word	0x0800b4c9
 800b534:	0800b645 	.word	0x0800b645
 800b538:	680b      	ldr	r3, [r1, #0]
 800b53a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b53e:	1d1a      	adds	r2, r3, #4
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	600a      	str	r2, [r1, #0]
 800b544:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b548:	2301      	movs	r3, #1
 800b54a:	e0a4      	b.n	800b696 <_printf_i+0x1f6>
 800b54c:	6825      	ldr	r5, [r4, #0]
 800b54e:	6808      	ldr	r0, [r1, #0]
 800b550:	062e      	lsls	r6, r5, #24
 800b552:	f100 0304 	add.w	r3, r0, #4
 800b556:	d50a      	bpl.n	800b56e <_printf_i+0xce>
 800b558:	6805      	ldr	r5, [r0, #0]
 800b55a:	600b      	str	r3, [r1, #0]
 800b55c:	2d00      	cmp	r5, #0
 800b55e:	da03      	bge.n	800b568 <_printf_i+0xc8>
 800b560:	232d      	movs	r3, #45	; 0x2d
 800b562:	426d      	negs	r5, r5
 800b564:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b568:	230a      	movs	r3, #10
 800b56a:	485e      	ldr	r0, [pc, #376]	; (800b6e4 <_printf_i+0x244>)
 800b56c:	e019      	b.n	800b5a2 <_printf_i+0x102>
 800b56e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b572:	6805      	ldr	r5, [r0, #0]
 800b574:	600b      	str	r3, [r1, #0]
 800b576:	bf18      	it	ne
 800b578:	b22d      	sxthne	r5, r5
 800b57a:	e7ef      	b.n	800b55c <_printf_i+0xbc>
 800b57c:	680b      	ldr	r3, [r1, #0]
 800b57e:	6825      	ldr	r5, [r4, #0]
 800b580:	1d18      	adds	r0, r3, #4
 800b582:	6008      	str	r0, [r1, #0]
 800b584:	0628      	lsls	r0, r5, #24
 800b586:	d501      	bpl.n	800b58c <_printf_i+0xec>
 800b588:	681d      	ldr	r5, [r3, #0]
 800b58a:	e002      	b.n	800b592 <_printf_i+0xf2>
 800b58c:	0669      	lsls	r1, r5, #25
 800b58e:	d5fb      	bpl.n	800b588 <_printf_i+0xe8>
 800b590:	881d      	ldrh	r5, [r3, #0]
 800b592:	2f6f      	cmp	r7, #111	; 0x6f
 800b594:	bf0c      	ite	eq
 800b596:	2308      	moveq	r3, #8
 800b598:	230a      	movne	r3, #10
 800b59a:	4852      	ldr	r0, [pc, #328]	; (800b6e4 <_printf_i+0x244>)
 800b59c:	2100      	movs	r1, #0
 800b59e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b5a2:	6866      	ldr	r6, [r4, #4]
 800b5a4:	2e00      	cmp	r6, #0
 800b5a6:	bfa8      	it	ge
 800b5a8:	6821      	ldrge	r1, [r4, #0]
 800b5aa:	60a6      	str	r6, [r4, #8]
 800b5ac:	bfa4      	itt	ge
 800b5ae:	f021 0104 	bicge.w	r1, r1, #4
 800b5b2:	6021      	strge	r1, [r4, #0]
 800b5b4:	b90d      	cbnz	r5, 800b5ba <_printf_i+0x11a>
 800b5b6:	2e00      	cmp	r6, #0
 800b5b8:	d04d      	beq.n	800b656 <_printf_i+0x1b6>
 800b5ba:	4616      	mov	r6, r2
 800b5bc:	fbb5 f1f3 	udiv	r1, r5, r3
 800b5c0:	fb03 5711 	mls	r7, r3, r1, r5
 800b5c4:	5dc7      	ldrb	r7, [r0, r7]
 800b5c6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b5ca:	462f      	mov	r7, r5
 800b5cc:	42bb      	cmp	r3, r7
 800b5ce:	460d      	mov	r5, r1
 800b5d0:	d9f4      	bls.n	800b5bc <_printf_i+0x11c>
 800b5d2:	2b08      	cmp	r3, #8
 800b5d4:	d10b      	bne.n	800b5ee <_printf_i+0x14e>
 800b5d6:	6823      	ldr	r3, [r4, #0]
 800b5d8:	07df      	lsls	r7, r3, #31
 800b5da:	d508      	bpl.n	800b5ee <_printf_i+0x14e>
 800b5dc:	6923      	ldr	r3, [r4, #16]
 800b5de:	6861      	ldr	r1, [r4, #4]
 800b5e0:	4299      	cmp	r1, r3
 800b5e2:	bfde      	ittt	le
 800b5e4:	2330      	movle	r3, #48	; 0x30
 800b5e6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b5ea:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b5ee:	1b92      	subs	r2, r2, r6
 800b5f0:	6122      	str	r2, [r4, #16]
 800b5f2:	464b      	mov	r3, r9
 800b5f4:	4621      	mov	r1, r4
 800b5f6:	4640      	mov	r0, r8
 800b5f8:	f8cd a000 	str.w	sl, [sp]
 800b5fc:	aa03      	add	r2, sp, #12
 800b5fe:	f7ff fedf 	bl	800b3c0 <_printf_common>
 800b602:	3001      	adds	r0, #1
 800b604:	d14c      	bne.n	800b6a0 <_printf_i+0x200>
 800b606:	f04f 30ff 	mov.w	r0, #4294967295
 800b60a:	b004      	add	sp, #16
 800b60c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b610:	4834      	ldr	r0, [pc, #208]	; (800b6e4 <_printf_i+0x244>)
 800b612:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b616:	680e      	ldr	r6, [r1, #0]
 800b618:	6823      	ldr	r3, [r4, #0]
 800b61a:	f856 5b04 	ldr.w	r5, [r6], #4
 800b61e:	061f      	lsls	r7, r3, #24
 800b620:	600e      	str	r6, [r1, #0]
 800b622:	d514      	bpl.n	800b64e <_printf_i+0x1ae>
 800b624:	07d9      	lsls	r1, r3, #31
 800b626:	bf44      	itt	mi
 800b628:	f043 0320 	orrmi.w	r3, r3, #32
 800b62c:	6023      	strmi	r3, [r4, #0]
 800b62e:	b91d      	cbnz	r5, 800b638 <_printf_i+0x198>
 800b630:	6823      	ldr	r3, [r4, #0]
 800b632:	f023 0320 	bic.w	r3, r3, #32
 800b636:	6023      	str	r3, [r4, #0]
 800b638:	2310      	movs	r3, #16
 800b63a:	e7af      	b.n	800b59c <_printf_i+0xfc>
 800b63c:	6823      	ldr	r3, [r4, #0]
 800b63e:	f043 0320 	orr.w	r3, r3, #32
 800b642:	6023      	str	r3, [r4, #0]
 800b644:	2378      	movs	r3, #120	; 0x78
 800b646:	4828      	ldr	r0, [pc, #160]	; (800b6e8 <_printf_i+0x248>)
 800b648:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b64c:	e7e3      	b.n	800b616 <_printf_i+0x176>
 800b64e:	065e      	lsls	r6, r3, #25
 800b650:	bf48      	it	mi
 800b652:	b2ad      	uxthmi	r5, r5
 800b654:	e7e6      	b.n	800b624 <_printf_i+0x184>
 800b656:	4616      	mov	r6, r2
 800b658:	e7bb      	b.n	800b5d2 <_printf_i+0x132>
 800b65a:	680b      	ldr	r3, [r1, #0]
 800b65c:	6826      	ldr	r6, [r4, #0]
 800b65e:	1d1d      	adds	r5, r3, #4
 800b660:	6960      	ldr	r0, [r4, #20]
 800b662:	600d      	str	r5, [r1, #0]
 800b664:	0635      	lsls	r5, r6, #24
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	d501      	bpl.n	800b66e <_printf_i+0x1ce>
 800b66a:	6018      	str	r0, [r3, #0]
 800b66c:	e002      	b.n	800b674 <_printf_i+0x1d4>
 800b66e:	0671      	lsls	r1, r6, #25
 800b670:	d5fb      	bpl.n	800b66a <_printf_i+0x1ca>
 800b672:	8018      	strh	r0, [r3, #0]
 800b674:	2300      	movs	r3, #0
 800b676:	4616      	mov	r6, r2
 800b678:	6123      	str	r3, [r4, #16]
 800b67a:	e7ba      	b.n	800b5f2 <_printf_i+0x152>
 800b67c:	680b      	ldr	r3, [r1, #0]
 800b67e:	1d1a      	adds	r2, r3, #4
 800b680:	600a      	str	r2, [r1, #0]
 800b682:	681e      	ldr	r6, [r3, #0]
 800b684:	2100      	movs	r1, #0
 800b686:	4630      	mov	r0, r6
 800b688:	6862      	ldr	r2, [r4, #4]
 800b68a:	f000 fa8d 	bl	800bba8 <memchr>
 800b68e:	b108      	cbz	r0, 800b694 <_printf_i+0x1f4>
 800b690:	1b80      	subs	r0, r0, r6
 800b692:	6060      	str	r0, [r4, #4]
 800b694:	6863      	ldr	r3, [r4, #4]
 800b696:	6123      	str	r3, [r4, #16]
 800b698:	2300      	movs	r3, #0
 800b69a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b69e:	e7a8      	b.n	800b5f2 <_printf_i+0x152>
 800b6a0:	4632      	mov	r2, r6
 800b6a2:	4649      	mov	r1, r9
 800b6a4:	4640      	mov	r0, r8
 800b6a6:	6923      	ldr	r3, [r4, #16]
 800b6a8:	47d0      	blx	sl
 800b6aa:	3001      	adds	r0, #1
 800b6ac:	d0ab      	beq.n	800b606 <_printf_i+0x166>
 800b6ae:	6823      	ldr	r3, [r4, #0]
 800b6b0:	079b      	lsls	r3, r3, #30
 800b6b2:	d413      	bmi.n	800b6dc <_printf_i+0x23c>
 800b6b4:	68e0      	ldr	r0, [r4, #12]
 800b6b6:	9b03      	ldr	r3, [sp, #12]
 800b6b8:	4298      	cmp	r0, r3
 800b6ba:	bfb8      	it	lt
 800b6bc:	4618      	movlt	r0, r3
 800b6be:	e7a4      	b.n	800b60a <_printf_i+0x16a>
 800b6c0:	2301      	movs	r3, #1
 800b6c2:	4632      	mov	r2, r6
 800b6c4:	4649      	mov	r1, r9
 800b6c6:	4640      	mov	r0, r8
 800b6c8:	47d0      	blx	sl
 800b6ca:	3001      	adds	r0, #1
 800b6cc:	d09b      	beq.n	800b606 <_printf_i+0x166>
 800b6ce:	3501      	adds	r5, #1
 800b6d0:	68e3      	ldr	r3, [r4, #12]
 800b6d2:	9903      	ldr	r1, [sp, #12]
 800b6d4:	1a5b      	subs	r3, r3, r1
 800b6d6:	42ab      	cmp	r3, r5
 800b6d8:	dcf2      	bgt.n	800b6c0 <_printf_i+0x220>
 800b6da:	e7eb      	b.n	800b6b4 <_printf_i+0x214>
 800b6dc:	2500      	movs	r5, #0
 800b6de:	f104 0619 	add.w	r6, r4, #25
 800b6e2:	e7f5      	b.n	800b6d0 <_printf_i+0x230>
 800b6e4:	0800cead 	.word	0x0800cead
 800b6e8:	0800cebe 	.word	0x0800cebe

0800b6ec <__sread>:
 800b6ec:	b510      	push	{r4, lr}
 800b6ee:	460c      	mov	r4, r1
 800b6f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6f4:	f000 fab4 	bl	800bc60 <_read_r>
 800b6f8:	2800      	cmp	r0, #0
 800b6fa:	bfab      	itete	ge
 800b6fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b6fe:	89a3      	ldrhlt	r3, [r4, #12]
 800b700:	181b      	addge	r3, r3, r0
 800b702:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b706:	bfac      	ite	ge
 800b708:	6563      	strge	r3, [r4, #84]	; 0x54
 800b70a:	81a3      	strhlt	r3, [r4, #12]
 800b70c:	bd10      	pop	{r4, pc}

0800b70e <__swrite>:
 800b70e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b712:	461f      	mov	r7, r3
 800b714:	898b      	ldrh	r3, [r1, #12]
 800b716:	4605      	mov	r5, r0
 800b718:	05db      	lsls	r3, r3, #23
 800b71a:	460c      	mov	r4, r1
 800b71c:	4616      	mov	r6, r2
 800b71e:	d505      	bpl.n	800b72c <__swrite+0x1e>
 800b720:	2302      	movs	r3, #2
 800b722:	2200      	movs	r2, #0
 800b724:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b728:	f000 f9c8 	bl	800babc <_lseek_r>
 800b72c:	89a3      	ldrh	r3, [r4, #12]
 800b72e:	4632      	mov	r2, r6
 800b730:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b734:	81a3      	strh	r3, [r4, #12]
 800b736:	4628      	mov	r0, r5
 800b738:	463b      	mov	r3, r7
 800b73a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b73e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b742:	f000 b869 	b.w	800b818 <_write_r>

0800b746 <__sseek>:
 800b746:	b510      	push	{r4, lr}
 800b748:	460c      	mov	r4, r1
 800b74a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b74e:	f000 f9b5 	bl	800babc <_lseek_r>
 800b752:	1c43      	adds	r3, r0, #1
 800b754:	89a3      	ldrh	r3, [r4, #12]
 800b756:	bf15      	itete	ne
 800b758:	6560      	strne	r0, [r4, #84]	; 0x54
 800b75a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b75e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b762:	81a3      	strheq	r3, [r4, #12]
 800b764:	bf18      	it	ne
 800b766:	81a3      	strhne	r3, [r4, #12]
 800b768:	bd10      	pop	{r4, pc}

0800b76a <__sclose>:
 800b76a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b76e:	f000 b8d3 	b.w	800b918 <_close_r>
	...

0800b774 <__swbuf_r>:
 800b774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b776:	460e      	mov	r6, r1
 800b778:	4614      	mov	r4, r2
 800b77a:	4605      	mov	r5, r0
 800b77c:	b118      	cbz	r0, 800b786 <__swbuf_r+0x12>
 800b77e:	6983      	ldr	r3, [r0, #24]
 800b780:	b90b      	cbnz	r3, 800b786 <__swbuf_r+0x12>
 800b782:	f7ff fabd 	bl	800ad00 <__sinit>
 800b786:	4b21      	ldr	r3, [pc, #132]	; (800b80c <__swbuf_r+0x98>)
 800b788:	429c      	cmp	r4, r3
 800b78a:	d12b      	bne.n	800b7e4 <__swbuf_r+0x70>
 800b78c:	686c      	ldr	r4, [r5, #4]
 800b78e:	69a3      	ldr	r3, [r4, #24]
 800b790:	60a3      	str	r3, [r4, #8]
 800b792:	89a3      	ldrh	r3, [r4, #12]
 800b794:	071a      	lsls	r2, r3, #28
 800b796:	d52f      	bpl.n	800b7f8 <__swbuf_r+0x84>
 800b798:	6923      	ldr	r3, [r4, #16]
 800b79a:	b36b      	cbz	r3, 800b7f8 <__swbuf_r+0x84>
 800b79c:	6923      	ldr	r3, [r4, #16]
 800b79e:	6820      	ldr	r0, [r4, #0]
 800b7a0:	b2f6      	uxtb	r6, r6
 800b7a2:	1ac0      	subs	r0, r0, r3
 800b7a4:	6963      	ldr	r3, [r4, #20]
 800b7a6:	4637      	mov	r7, r6
 800b7a8:	4283      	cmp	r3, r0
 800b7aa:	dc04      	bgt.n	800b7b6 <__swbuf_r+0x42>
 800b7ac:	4621      	mov	r1, r4
 800b7ae:	4628      	mov	r0, r5
 800b7b0:	f000 f948 	bl	800ba44 <_fflush_r>
 800b7b4:	bb30      	cbnz	r0, 800b804 <__swbuf_r+0x90>
 800b7b6:	68a3      	ldr	r3, [r4, #8]
 800b7b8:	3001      	adds	r0, #1
 800b7ba:	3b01      	subs	r3, #1
 800b7bc:	60a3      	str	r3, [r4, #8]
 800b7be:	6823      	ldr	r3, [r4, #0]
 800b7c0:	1c5a      	adds	r2, r3, #1
 800b7c2:	6022      	str	r2, [r4, #0]
 800b7c4:	701e      	strb	r6, [r3, #0]
 800b7c6:	6963      	ldr	r3, [r4, #20]
 800b7c8:	4283      	cmp	r3, r0
 800b7ca:	d004      	beq.n	800b7d6 <__swbuf_r+0x62>
 800b7cc:	89a3      	ldrh	r3, [r4, #12]
 800b7ce:	07db      	lsls	r3, r3, #31
 800b7d0:	d506      	bpl.n	800b7e0 <__swbuf_r+0x6c>
 800b7d2:	2e0a      	cmp	r6, #10
 800b7d4:	d104      	bne.n	800b7e0 <__swbuf_r+0x6c>
 800b7d6:	4621      	mov	r1, r4
 800b7d8:	4628      	mov	r0, r5
 800b7da:	f000 f933 	bl	800ba44 <_fflush_r>
 800b7de:	b988      	cbnz	r0, 800b804 <__swbuf_r+0x90>
 800b7e0:	4638      	mov	r0, r7
 800b7e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b7e4:	4b0a      	ldr	r3, [pc, #40]	; (800b810 <__swbuf_r+0x9c>)
 800b7e6:	429c      	cmp	r4, r3
 800b7e8:	d101      	bne.n	800b7ee <__swbuf_r+0x7a>
 800b7ea:	68ac      	ldr	r4, [r5, #8]
 800b7ec:	e7cf      	b.n	800b78e <__swbuf_r+0x1a>
 800b7ee:	4b09      	ldr	r3, [pc, #36]	; (800b814 <__swbuf_r+0xa0>)
 800b7f0:	429c      	cmp	r4, r3
 800b7f2:	bf08      	it	eq
 800b7f4:	68ec      	ldreq	r4, [r5, #12]
 800b7f6:	e7ca      	b.n	800b78e <__swbuf_r+0x1a>
 800b7f8:	4621      	mov	r1, r4
 800b7fa:	4628      	mov	r0, r5
 800b7fc:	f000 f81e 	bl	800b83c <__swsetup_r>
 800b800:	2800      	cmp	r0, #0
 800b802:	d0cb      	beq.n	800b79c <__swbuf_r+0x28>
 800b804:	f04f 37ff 	mov.w	r7, #4294967295
 800b808:	e7ea      	b.n	800b7e0 <__swbuf_r+0x6c>
 800b80a:	bf00      	nop
 800b80c:	0800ce5c 	.word	0x0800ce5c
 800b810:	0800ce7c 	.word	0x0800ce7c
 800b814:	0800ce3c 	.word	0x0800ce3c

0800b818 <_write_r>:
 800b818:	b538      	push	{r3, r4, r5, lr}
 800b81a:	4604      	mov	r4, r0
 800b81c:	4608      	mov	r0, r1
 800b81e:	4611      	mov	r1, r2
 800b820:	2200      	movs	r2, #0
 800b822:	4d05      	ldr	r5, [pc, #20]	; (800b838 <_write_r+0x20>)
 800b824:	602a      	str	r2, [r5, #0]
 800b826:	461a      	mov	r2, r3
 800b828:	f7f6 fb50 	bl	8001ecc <_write>
 800b82c:	1c43      	adds	r3, r0, #1
 800b82e:	d102      	bne.n	800b836 <_write_r+0x1e>
 800b830:	682b      	ldr	r3, [r5, #0]
 800b832:	b103      	cbz	r3, 800b836 <_write_r+0x1e>
 800b834:	6023      	str	r3, [r4, #0]
 800b836:	bd38      	pop	{r3, r4, r5, pc}
 800b838:	20000988 	.word	0x20000988

0800b83c <__swsetup_r>:
 800b83c:	4b32      	ldr	r3, [pc, #200]	; (800b908 <__swsetup_r+0xcc>)
 800b83e:	b570      	push	{r4, r5, r6, lr}
 800b840:	681d      	ldr	r5, [r3, #0]
 800b842:	4606      	mov	r6, r0
 800b844:	460c      	mov	r4, r1
 800b846:	b125      	cbz	r5, 800b852 <__swsetup_r+0x16>
 800b848:	69ab      	ldr	r3, [r5, #24]
 800b84a:	b913      	cbnz	r3, 800b852 <__swsetup_r+0x16>
 800b84c:	4628      	mov	r0, r5
 800b84e:	f7ff fa57 	bl	800ad00 <__sinit>
 800b852:	4b2e      	ldr	r3, [pc, #184]	; (800b90c <__swsetup_r+0xd0>)
 800b854:	429c      	cmp	r4, r3
 800b856:	d10f      	bne.n	800b878 <__swsetup_r+0x3c>
 800b858:	686c      	ldr	r4, [r5, #4]
 800b85a:	89a3      	ldrh	r3, [r4, #12]
 800b85c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b860:	0719      	lsls	r1, r3, #28
 800b862:	d42c      	bmi.n	800b8be <__swsetup_r+0x82>
 800b864:	06dd      	lsls	r5, r3, #27
 800b866:	d411      	bmi.n	800b88c <__swsetup_r+0x50>
 800b868:	2309      	movs	r3, #9
 800b86a:	6033      	str	r3, [r6, #0]
 800b86c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b870:	f04f 30ff 	mov.w	r0, #4294967295
 800b874:	81a3      	strh	r3, [r4, #12]
 800b876:	e03e      	b.n	800b8f6 <__swsetup_r+0xba>
 800b878:	4b25      	ldr	r3, [pc, #148]	; (800b910 <__swsetup_r+0xd4>)
 800b87a:	429c      	cmp	r4, r3
 800b87c:	d101      	bne.n	800b882 <__swsetup_r+0x46>
 800b87e:	68ac      	ldr	r4, [r5, #8]
 800b880:	e7eb      	b.n	800b85a <__swsetup_r+0x1e>
 800b882:	4b24      	ldr	r3, [pc, #144]	; (800b914 <__swsetup_r+0xd8>)
 800b884:	429c      	cmp	r4, r3
 800b886:	bf08      	it	eq
 800b888:	68ec      	ldreq	r4, [r5, #12]
 800b88a:	e7e6      	b.n	800b85a <__swsetup_r+0x1e>
 800b88c:	0758      	lsls	r0, r3, #29
 800b88e:	d512      	bpl.n	800b8b6 <__swsetup_r+0x7a>
 800b890:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b892:	b141      	cbz	r1, 800b8a6 <__swsetup_r+0x6a>
 800b894:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b898:	4299      	cmp	r1, r3
 800b89a:	d002      	beq.n	800b8a2 <__swsetup_r+0x66>
 800b89c:	4630      	mov	r0, r6
 800b89e:	f7fe ffff 	bl	800a8a0 <_free_r>
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	6363      	str	r3, [r4, #52]	; 0x34
 800b8a6:	89a3      	ldrh	r3, [r4, #12]
 800b8a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b8ac:	81a3      	strh	r3, [r4, #12]
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	6063      	str	r3, [r4, #4]
 800b8b2:	6923      	ldr	r3, [r4, #16]
 800b8b4:	6023      	str	r3, [r4, #0]
 800b8b6:	89a3      	ldrh	r3, [r4, #12]
 800b8b8:	f043 0308 	orr.w	r3, r3, #8
 800b8bc:	81a3      	strh	r3, [r4, #12]
 800b8be:	6923      	ldr	r3, [r4, #16]
 800b8c0:	b94b      	cbnz	r3, 800b8d6 <__swsetup_r+0x9a>
 800b8c2:	89a3      	ldrh	r3, [r4, #12]
 800b8c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b8c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b8cc:	d003      	beq.n	800b8d6 <__swsetup_r+0x9a>
 800b8ce:	4621      	mov	r1, r4
 800b8d0:	4630      	mov	r0, r6
 800b8d2:	f000 f929 	bl	800bb28 <__smakebuf_r>
 800b8d6:	89a0      	ldrh	r0, [r4, #12]
 800b8d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b8dc:	f010 0301 	ands.w	r3, r0, #1
 800b8e0:	d00a      	beq.n	800b8f8 <__swsetup_r+0xbc>
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	60a3      	str	r3, [r4, #8]
 800b8e6:	6963      	ldr	r3, [r4, #20]
 800b8e8:	425b      	negs	r3, r3
 800b8ea:	61a3      	str	r3, [r4, #24]
 800b8ec:	6923      	ldr	r3, [r4, #16]
 800b8ee:	b943      	cbnz	r3, 800b902 <__swsetup_r+0xc6>
 800b8f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b8f4:	d1ba      	bne.n	800b86c <__swsetup_r+0x30>
 800b8f6:	bd70      	pop	{r4, r5, r6, pc}
 800b8f8:	0781      	lsls	r1, r0, #30
 800b8fa:	bf58      	it	pl
 800b8fc:	6963      	ldrpl	r3, [r4, #20]
 800b8fe:	60a3      	str	r3, [r4, #8]
 800b900:	e7f4      	b.n	800b8ec <__swsetup_r+0xb0>
 800b902:	2000      	movs	r0, #0
 800b904:	e7f7      	b.n	800b8f6 <__swsetup_r+0xba>
 800b906:	bf00      	nop
 800b908:	2000001c 	.word	0x2000001c
 800b90c:	0800ce5c 	.word	0x0800ce5c
 800b910:	0800ce7c 	.word	0x0800ce7c
 800b914:	0800ce3c 	.word	0x0800ce3c

0800b918 <_close_r>:
 800b918:	b538      	push	{r3, r4, r5, lr}
 800b91a:	2300      	movs	r3, #0
 800b91c:	4d05      	ldr	r5, [pc, #20]	; (800b934 <_close_r+0x1c>)
 800b91e:	4604      	mov	r4, r0
 800b920:	4608      	mov	r0, r1
 800b922:	602b      	str	r3, [r5, #0]
 800b924:	f7f6 fafc 	bl	8001f20 <_close>
 800b928:	1c43      	adds	r3, r0, #1
 800b92a:	d102      	bne.n	800b932 <_close_r+0x1a>
 800b92c:	682b      	ldr	r3, [r5, #0]
 800b92e:	b103      	cbz	r3, 800b932 <_close_r+0x1a>
 800b930:	6023      	str	r3, [r4, #0]
 800b932:	bd38      	pop	{r3, r4, r5, pc}
 800b934:	20000988 	.word	0x20000988

0800b938 <__sflush_r>:
 800b938:	898a      	ldrh	r2, [r1, #12]
 800b93a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b93e:	4605      	mov	r5, r0
 800b940:	0710      	lsls	r0, r2, #28
 800b942:	460c      	mov	r4, r1
 800b944:	d458      	bmi.n	800b9f8 <__sflush_r+0xc0>
 800b946:	684b      	ldr	r3, [r1, #4]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	dc05      	bgt.n	800b958 <__sflush_r+0x20>
 800b94c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b94e:	2b00      	cmp	r3, #0
 800b950:	dc02      	bgt.n	800b958 <__sflush_r+0x20>
 800b952:	2000      	movs	r0, #0
 800b954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b958:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b95a:	2e00      	cmp	r6, #0
 800b95c:	d0f9      	beq.n	800b952 <__sflush_r+0x1a>
 800b95e:	2300      	movs	r3, #0
 800b960:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b964:	682f      	ldr	r7, [r5, #0]
 800b966:	602b      	str	r3, [r5, #0]
 800b968:	d032      	beq.n	800b9d0 <__sflush_r+0x98>
 800b96a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b96c:	89a3      	ldrh	r3, [r4, #12]
 800b96e:	075a      	lsls	r2, r3, #29
 800b970:	d505      	bpl.n	800b97e <__sflush_r+0x46>
 800b972:	6863      	ldr	r3, [r4, #4]
 800b974:	1ac0      	subs	r0, r0, r3
 800b976:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b978:	b10b      	cbz	r3, 800b97e <__sflush_r+0x46>
 800b97a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b97c:	1ac0      	subs	r0, r0, r3
 800b97e:	2300      	movs	r3, #0
 800b980:	4602      	mov	r2, r0
 800b982:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b984:	4628      	mov	r0, r5
 800b986:	6a21      	ldr	r1, [r4, #32]
 800b988:	47b0      	blx	r6
 800b98a:	1c43      	adds	r3, r0, #1
 800b98c:	89a3      	ldrh	r3, [r4, #12]
 800b98e:	d106      	bne.n	800b99e <__sflush_r+0x66>
 800b990:	6829      	ldr	r1, [r5, #0]
 800b992:	291d      	cmp	r1, #29
 800b994:	d82c      	bhi.n	800b9f0 <__sflush_r+0xb8>
 800b996:	4a2a      	ldr	r2, [pc, #168]	; (800ba40 <__sflush_r+0x108>)
 800b998:	40ca      	lsrs	r2, r1
 800b99a:	07d6      	lsls	r6, r2, #31
 800b99c:	d528      	bpl.n	800b9f0 <__sflush_r+0xb8>
 800b99e:	2200      	movs	r2, #0
 800b9a0:	6062      	str	r2, [r4, #4]
 800b9a2:	6922      	ldr	r2, [r4, #16]
 800b9a4:	04d9      	lsls	r1, r3, #19
 800b9a6:	6022      	str	r2, [r4, #0]
 800b9a8:	d504      	bpl.n	800b9b4 <__sflush_r+0x7c>
 800b9aa:	1c42      	adds	r2, r0, #1
 800b9ac:	d101      	bne.n	800b9b2 <__sflush_r+0x7a>
 800b9ae:	682b      	ldr	r3, [r5, #0]
 800b9b0:	b903      	cbnz	r3, 800b9b4 <__sflush_r+0x7c>
 800b9b2:	6560      	str	r0, [r4, #84]	; 0x54
 800b9b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b9b6:	602f      	str	r7, [r5, #0]
 800b9b8:	2900      	cmp	r1, #0
 800b9ba:	d0ca      	beq.n	800b952 <__sflush_r+0x1a>
 800b9bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b9c0:	4299      	cmp	r1, r3
 800b9c2:	d002      	beq.n	800b9ca <__sflush_r+0x92>
 800b9c4:	4628      	mov	r0, r5
 800b9c6:	f7fe ff6b 	bl	800a8a0 <_free_r>
 800b9ca:	2000      	movs	r0, #0
 800b9cc:	6360      	str	r0, [r4, #52]	; 0x34
 800b9ce:	e7c1      	b.n	800b954 <__sflush_r+0x1c>
 800b9d0:	6a21      	ldr	r1, [r4, #32]
 800b9d2:	2301      	movs	r3, #1
 800b9d4:	4628      	mov	r0, r5
 800b9d6:	47b0      	blx	r6
 800b9d8:	1c41      	adds	r1, r0, #1
 800b9da:	d1c7      	bne.n	800b96c <__sflush_r+0x34>
 800b9dc:	682b      	ldr	r3, [r5, #0]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d0c4      	beq.n	800b96c <__sflush_r+0x34>
 800b9e2:	2b1d      	cmp	r3, #29
 800b9e4:	d001      	beq.n	800b9ea <__sflush_r+0xb2>
 800b9e6:	2b16      	cmp	r3, #22
 800b9e8:	d101      	bne.n	800b9ee <__sflush_r+0xb6>
 800b9ea:	602f      	str	r7, [r5, #0]
 800b9ec:	e7b1      	b.n	800b952 <__sflush_r+0x1a>
 800b9ee:	89a3      	ldrh	r3, [r4, #12]
 800b9f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b9f4:	81a3      	strh	r3, [r4, #12]
 800b9f6:	e7ad      	b.n	800b954 <__sflush_r+0x1c>
 800b9f8:	690f      	ldr	r7, [r1, #16]
 800b9fa:	2f00      	cmp	r7, #0
 800b9fc:	d0a9      	beq.n	800b952 <__sflush_r+0x1a>
 800b9fe:	0793      	lsls	r3, r2, #30
 800ba00:	bf18      	it	ne
 800ba02:	2300      	movne	r3, #0
 800ba04:	680e      	ldr	r6, [r1, #0]
 800ba06:	bf08      	it	eq
 800ba08:	694b      	ldreq	r3, [r1, #20]
 800ba0a:	eba6 0807 	sub.w	r8, r6, r7
 800ba0e:	600f      	str	r7, [r1, #0]
 800ba10:	608b      	str	r3, [r1, #8]
 800ba12:	f1b8 0f00 	cmp.w	r8, #0
 800ba16:	dd9c      	ble.n	800b952 <__sflush_r+0x1a>
 800ba18:	4643      	mov	r3, r8
 800ba1a:	463a      	mov	r2, r7
 800ba1c:	4628      	mov	r0, r5
 800ba1e:	6a21      	ldr	r1, [r4, #32]
 800ba20:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ba22:	47b0      	blx	r6
 800ba24:	2800      	cmp	r0, #0
 800ba26:	dc06      	bgt.n	800ba36 <__sflush_r+0xfe>
 800ba28:	89a3      	ldrh	r3, [r4, #12]
 800ba2a:	f04f 30ff 	mov.w	r0, #4294967295
 800ba2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba32:	81a3      	strh	r3, [r4, #12]
 800ba34:	e78e      	b.n	800b954 <__sflush_r+0x1c>
 800ba36:	4407      	add	r7, r0
 800ba38:	eba8 0800 	sub.w	r8, r8, r0
 800ba3c:	e7e9      	b.n	800ba12 <__sflush_r+0xda>
 800ba3e:	bf00      	nop
 800ba40:	20400001 	.word	0x20400001

0800ba44 <_fflush_r>:
 800ba44:	b538      	push	{r3, r4, r5, lr}
 800ba46:	690b      	ldr	r3, [r1, #16]
 800ba48:	4605      	mov	r5, r0
 800ba4a:	460c      	mov	r4, r1
 800ba4c:	b913      	cbnz	r3, 800ba54 <_fflush_r+0x10>
 800ba4e:	2500      	movs	r5, #0
 800ba50:	4628      	mov	r0, r5
 800ba52:	bd38      	pop	{r3, r4, r5, pc}
 800ba54:	b118      	cbz	r0, 800ba5e <_fflush_r+0x1a>
 800ba56:	6983      	ldr	r3, [r0, #24]
 800ba58:	b90b      	cbnz	r3, 800ba5e <_fflush_r+0x1a>
 800ba5a:	f7ff f951 	bl	800ad00 <__sinit>
 800ba5e:	4b14      	ldr	r3, [pc, #80]	; (800bab0 <_fflush_r+0x6c>)
 800ba60:	429c      	cmp	r4, r3
 800ba62:	d11b      	bne.n	800ba9c <_fflush_r+0x58>
 800ba64:	686c      	ldr	r4, [r5, #4]
 800ba66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d0ef      	beq.n	800ba4e <_fflush_r+0xa>
 800ba6e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ba70:	07d0      	lsls	r0, r2, #31
 800ba72:	d404      	bmi.n	800ba7e <_fflush_r+0x3a>
 800ba74:	0599      	lsls	r1, r3, #22
 800ba76:	d402      	bmi.n	800ba7e <_fflush_r+0x3a>
 800ba78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ba7a:	f7ff f9df 	bl	800ae3c <__retarget_lock_acquire_recursive>
 800ba7e:	4628      	mov	r0, r5
 800ba80:	4621      	mov	r1, r4
 800ba82:	f7ff ff59 	bl	800b938 <__sflush_r>
 800ba86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ba88:	4605      	mov	r5, r0
 800ba8a:	07da      	lsls	r2, r3, #31
 800ba8c:	d4e0      	bmi.n	800ba50 <_fflush_r+0xc>
 800ba8e:	89a3      	ldrh	r3, [r4, #12]
 800ba90:	059b      	lsls	r3, r3, #22
 800ba92:	d4dd      	bmi.n	800ba50 <_fflush_r+0xc>
 800ba94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ba96:	f7ff f9d2 	bl	800ae3e <__retarget_lock_release_recursive>
 800ba9a:	e7d9      	b.n	800ba50 <_fflush_r+0xc>
 800ba9c:	4b05      	ldr	r3, [pc, #20]	; (800bab4 <_fflush_r+0x70>)
 800ba9e:	429c      	cmp	r4, r3
 800baa0:	d101      	bne.n	800baa6 <_fflush_r+0x62>
 800baa2:	68ac      	ldr	r4, [r5, #8]
 800baa4:	e7df      	b.n	800ba66 <_fflush_r+0x22>
 800baa6:	4b04      	ldr	r3, [pc, #16]	; (800bab8 <_fflush_r+0x74>)
 800baa8:	429c      	cmp	r4, r3
 800baaa:	bf08      	it	eq
 800baac:	68ec      	ldreq	r4, [r5, #12]
 800baae:	e7da      	b.n	800ba66 <_fflush_r+0x22>
 800bab0:	0800ce5c 	.word	0x0800ce5c
 800bab4:	0800ce7c 	.word	0x0800ce7c
 800bab8:	0800ce3c 	.word	0x0800ce3c

0800babc <_lseek_r>:
 800babc:	b538      	push	{r3, r4, r5, lr}
 800babe:	4604      	mov	r4, r0
 800bac0:	4608      	mov	r0, r1
 800bac2:	4611      	mov	r1, r2
 800bac4:	2200      	movs	r2, #0
 800bac6:	4d05      	ldr	r5, [pc, #20]	; (800badc <_lseek_r+0x20>)
 800bac8:	602a      	str	r2, [r5, #0]
 800baca:	461a      	mov	r2, r3
 800bacc:	f7f6 fa4c 	bl	8001f68 <_lseek>
 800bad0:	1c43      	adds	r3, r0, #1
 800bad2:	d102      	bne.n	800bada <_lseek_r+0x1e>
 800bad4:	682b      	ldr	r3, [r5, #0]
 800bad6:	b103      	cbz	r3, 800bada <_lseek_r+0x1e>
 800bad8:	6023      	str	r3, [r4, #0]
 800bada:	bd38      	pop	{r3, r4, r5, pc}
 800badc:	20000988 	.word	0x20000988

0800bae0 <__swhatbuf_r>:
 800bae0:	b570      	push	{r4, r5, r6, lr}
 800bae2:	460e      	mov	r6, r1
 800bae4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bae8:	4614      	mov	r4, r2
 800baea:	2900      	cmp	r1, #0
 800baec:	461d      	mov	r5, r3
 800baee:	b096      	sub	sp, #88	; 0x58
 800baf0:	da07      	bge.n	800bb02 <__swhatbuf_r+0x22>
 800baf2:	2300      	movs	r3, #0
 800baf4:	602b      	str	r3, [r5, #0]
 800baf6:	89b3      	ldrh	r3, [r6, #12]
 800baf8:	061a      	lsls	r2, r3, #24
 800bafa:	d410      	bmi.n	800bb1e <__swhatbuf_r+0x3e>
 800bafc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb00:	e00e      	b.n	800bb20 <__swhatbuf_r+0x40>
 800bb02:	466a      	mov	r2, sp
 800bb04:	f000 f8be 	bl	800bc84 <_fstat_r>
 800bb08:	2800      	cmp	r0, #0
 800bb0a:	dbf2      	blt.n	800baf2 <__swhatbuf_r+0x12>
 800bb0c:	9a01      	ldr	r2, [sp, #4]
 800bb0e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bb12:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bb16:	425a      	negs	r2, r3
 800bb18:	415a      	adcs	r2, r3
 800bb1a:	602a      	str	r2, [r5, #0]
 800bb1c:	e7ee      	b.n	800bafc <__swhatbuf_r+0x1c>
 800bb1e:	2340      	movs	r3, #64	; 0x40
 800bb20:	2000      	movs	r0, #0
 800bb22:	6023      	str	r3, [r4, #0]
 800bb24:	b016      	add	sp, #88	; 0x58
 800bb26:	bd70      	pop	{r4, r5, r6, pc}

0800bb28 <__smakebuf_r>:
 800bb28:	898b      	ldrh	r3, [r1, #12]
 800bb2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bb2c:	079d      	lsls	r5, r3, #30
 800bb2e:	4606      	mov	r6, r0
 800bb30:	460c      	mov	r4, r1
 800bb32:	d507      	bpl.n	800bb44 <__smakebuf_r+0x1c>
 800bb34:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bb38:	6023      	str	r3, [r4, #0]
 800bb3a:	6123      	str	r3, [r4, #16]
 800bb3c:	2301      	movs	r3, #1
 800bb3e:	6163      	str	r3, [r4, #20]
 800bb40:	b002      	add	sp, #8
 800bb42:	bd70      	pop	{r4, r5, r6, pc}
 800bb44:	466a      	mov	r2, sp
 800bb46:	ab01      	add	r3, sp, #4
 800bb48:	f7ff ffca 	bl	800bae0 <__swhatbuf_r>
 800bb4c:	9900      	ldr	r1, [sp, #0]
 800bb4e:	4605      	mov	r5, r0
 800bb50:	4630      	mov	r0, r6
 800bb52:	f7fe fef1 	bl	800a938 <_malloc_r>
 800bb56:	b948      	cbnz	r0, 800bb6c <__smakebuf_r+0x44>
 800bb58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb5c:	059a      	lsls	r2, r3, #22
 800bb5e:	d4ef      	bmi.n	800bb40 <__smakebuf_r+0x18>
 800bb60:	f023 0303 	bic.w	r3, r3, #3
 800bb64:	f043 0302 	orr.w	r3, r3, #2
 800bb68:	81a3      	strh	r3, [r4, #12]
 800bb6a:	e7e3      	b.n	800bb34 <__smakebuf_r+0xc>
 800bb6c:	4b0d      	ldr	r3, [pc, #52]	; (800bba4 <__smakebuf_r+0x7c>)
 800bb6e:	62b3      	str	r3, [r6, #40]	; 0x28
 800bb70:	89a3      	ldrh	r3, [r4, #12]
 800bb72:	6020      	str	r0, [r4, #0]
 800bb74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb78:	81a3      	strh	r3, [r4, #12]
 800bb7a:	9b00      	ldr	r3, [sp, #0]
 800bb7c:	6120      	str	r0, [r4, #16]
 800bb7e:	6163      	str	r3, [r4, #20]
 800bb80:	9b01      	ldr	r3, [sp, #4]
 800bb82:	b15b      	cbz	r3, 800bb9c <__smakebuf_r+0x74>
 800bb84:	4630      	mov	r0, r6
 800bb86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bb8a:	f000 f88d 	bl	800bca8 <_isatty_r>
 800bb8e:	b128      	cbz	r0, 800bb9c <__smakebuf_r+0x74>
 800bb90:	89a3      	ldrh	r3, [r4, #12]
 800bb92:	f023 0303 	bic.w	r3, r3, #3
 800bb96:	f043 0301 	orr.w	r3, r3, #1
 800bb9a:	81a3      	strh	r3, [r4, #12]
 800bb9c:	89a0      	ldrh	r0, [r4, #12]
 800bb9e:	4305      	orrs	r5, r0
 800bba0:	81a5      	strh	r5, [r4, #12]
 800bba2:	e7cd      	b.n	800bb40 <__smakebuf_r+0x18>
 800bba4:	0800ac99 	.word	0x0800ac99

0800bba8 <memchr>:
 800bba8:	4603      	mov	r3, r0
 800bbaa:	b510      	push	{r4, lr}
 800bbac:	b2c9      	uxtb	r1, r1
 800bbae:	4402      	add	r2, r0
 800bbb0:	4293      	cmp	r3, r2
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	d101      	bne.n	800bbba <memchr+0x12>
 800bbb6:	2000      	movs	r0, #0
 800bbb8:	e003      	b.n	800bbc2 <memchr+0x1a>
 800bbba:	7804      	ldrb	r4, [r0, #0]
 800bbbc:	3301      	adds	r3, #1
 800bbbe:	428c      	cmp	r4, r1
 800bbc0:	d1f6      	bne.n	800bbb0 <memchr+0x8>
 800bbc2:	bd10      	pop	{r4, pc}

0800bbc4 <memcpy>:
 800bbc4:	440a      	add	r2, r1
 800bbc6:	4291      	cmp	r1, r2
 800bbc8:	f100 33ff 	add.w	r3, r0, #4294967295
 800bbcc:	d100      	bne.n	800bbd0 <memcpy+0xc>
 800bbce:	4770      	bx	lr
 800bbd0:	b510      	push	{r4, lr}
 800bbd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bbd6:	4291      	cmp	r1, r2
 800bbd8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bbdc:	d1f9      	bne.n	800bbd2 <memcpy+0xe>
 800bbde:	bd10      	pop	{r4, pc}

0800bbe0 <memmove>:
 800bbe0:	4288      	cmp	r0, r1
 800bbe2:	b510      	push	{r4, lr}
 800bbe4:	eb01 0402 	add.w	r4, r1, r2
 800bbe8:	d902      	bls.n	800bbf0 <memmove+0x10>
 800bbea:	4284      	cmp	r4, r0
 800bbec:	4623      	mov	r3, r4
 800bbee:	d807      	bhi.n	800bc00 <memmove+0x20>
 800bbf0:	1e43      	subs	r3, r0, #1
 800bbf2:	42a1      	cmp	r1, r4
 800bbf4:	d008      	beq.n	800bc08 <memmove+0x28>
 800bbf6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bbfa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bbfe:	e7f8      	b.n	800bbf2 <memmove+0x12>
 800bc00:	4601      	mov	r1, r0
 800bc02:	4402      	add	r2, r0
 800bc04:	428a      	cmp	r2, r1
 800bc06:	d100      	bne.n	800bc0a <memmove+0x2a>
 800bc08:	bd10      	pop	{r4, pc}
 800bc0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bc0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bc12:	e7f7      	b.n	800bc04 <memmove+0x24>

0800bc14 <_realloc_r>:
 800bc14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc16:	4607      	mov	r7, r0
 800bc18:	4614      	mov	r4, r2
 800bc1a:	460e      	mov	r6, r1
 800bc1c:	b921      	cbnz	r1, 800bc28 <_realloc_r+0x14>
 800bc1e:	4611      	mov	r1, r2
 800bc20:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bc24:	f7fe be88 	b.w	800a938 <_malloc_r>
 800bc28:	b922      	cbnz	r2, 800bc34 <_realloc_r+0x20>
 800bc2a:	f7fe fe39 	bl	800a8a0 <_free_r>
 800bc2e:	4625      	mov	r5, r4
 800bc30:	4628      	mov	r0, r5
 800bc32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc34:	f000 f848 	bl	800bcc8 <_malloc_usable_size_r>
 800bc38:	42a0      	cmp	r0, r4
 800bc3a:	d20f      	bcs.n	800bc5c <_realloc_r+0x48>
 800bc3c:	4621      	mov	r1, r4
 800bc3e:	4638      	mov	r0, r7
 800bc40:	f7fe fe7a 	bl	800a938 <_malloc_r>
 800bc44:	4605      	mov	r5, r0
 800bc46:	2800      	cmp	r0, #0
 800bc48:	d0f2      	beq.n	800bc30 <_realloc_r+0x1c>
 800bc4a:	4631      	mov	r1, r6
 800bc4c:	4622      	mov	r2, r4
 800bc4e:	f7ff ffb9 	bl	800bbc4 <memcpy>
 800bc52:	4631      	mov	r1, r6
 800bc54:	4638      	mov	r0, r7
 800bc56:	f7fe fe23 	bl	800a8a0 <_free_r>
 800bc5a:	e7e9      	b.n	800bc30 <_realloc_r+0x1c>
 800bc5c:	4635      	mov	r5, r6
 800bc5e:	e7e7      	b.n	800bc30 <_realloc_r+0x1c>

0800bc60 <_read_r>:
 800bc60:	b538      	push	{r3, r4, r5, lr}
 800bc62:	4604      	mov	r4, r0
 800bc64:	4608      	mov	r0, r1
 800bc66:	4611      	mov	r1, r2
 800bc68:	2200      	movs	r2, #0
 800bc6a:	4d05      	ldr	r5, [pc, #20]	; (800bc80 <_read_r+0x20>)
 800bc6c:	602a      	str	r2, [r5, #0]
 800bc6e:	461a      	mov	r2, r3
 800bc70:	f7f6 f90e 	bl	8001e90 <_read>
 800bc74:	1c43      	adds	r3, r0, #1
 800bc76:	d102      	bne.n	800bc7e <_read_r+0x1e>
 800bc78:	682b      	ldr	r3, [r5, #0]
 800bc7a:	b103      	cbz	r3, 800bc7e <_read_r+0x1e>
 800bc7c:	6023      	str	r3, [r4, #0]
 800bc7e:	bd38      	pop	{r3, r4, r5, pc}
 800bc80:	20000988 	.word	0x20000988

0800bc84 <_fstat_r>:
 800bc84:	b538      	push	{r3, r4, r5, lr}
 800bc86:	2300      	movs	r3, #0
 800bc88:	4d06      	ldr	r5, [pc, #24]	; (800bca4 <_fstat_r+0x20>)
 800bc8a:	4604      	mov	r4, r0
 800bc8c:	4608      	mov	r0, r1
 800bc8e:	4611      	mov	r1, r2
 800bc90:	602b      	str	r3, [r5, #0]
 800bc92:	f7f6 f950 	bl	8001f36 <_fstat>
 800bc96:	1c43      	adds	r3, r0, #1
 800bc98:	d102      	bne.n	800bca0 <_fstat_r+0x1c>
 800bc9a:	682b      	ldr	r3, [r5, #0]
 800bc9c:	b103      	cbz	r3, 800bca0 <_fstat_r+0x1c>
 800bc9e:	6023      	str	r3, [r4, #0]
 800bca0:	bd38      	pop	{r3, r4, r5, pc}
 800bca2:	bf00      	nop
 800bca4:	20000988 	.word	0x20000988

0800bca8 <_isatty_r>:
 800bca8:	b538      	push	{r3, r4, r5, lr}
 800bcaa:	2300      	movs	r3, #0
 800bcac:	4d05      	ldr	r5, [pc, #20]	; (800bcc4 <_isatty_r+0x1c>)
 800bcae:	4604      	mov	r4, r0
 800bcb0:	4608      	mov	r0, r1
 800bcb2:	602b      	str	r3, [r5, #0]
 800bcb4:	f7f6 f94e 	bl	8001f54 <_isatty>
 800bcb8:	1c43      	adds	r3, r0, #1
 800bcba:	d102      	bne.n	800bcc2 <_isatty_r+0x1a>
 800bcbc:	682b      	ldr	r3, [r5, #0]
 800bcbe:	b103      	cbz	r3, 800bcc2 <_isatty_r+0x1a>
 800bcc0:	6023      	str	r3, [r4, #0]
 800bcc2:	bd38      	pop	{r3, r4, r5, pc}
 800bcc4:	20000988 	.word	0x20000988

0800bcc8 <_malloc_usable_size_r>:
 800bcc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bccc:	1f18      	subs	r0, r3, #4
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	bfbc      	itt	lt
 800bcd2:	580b      	ldrlt	r3, [r1, r0]
 800bcd4:	18c0      	addlt	r0, r0, r3
 800bcd6:	4770      	bx	lr

0800bcd8 <_init>:
 800bcd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcda:	bf00      	nop
 800bcdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bcde:	bc08      	pop	{r3}
 800bce0:	469e      	mov	lr, r3
 800bce2:	4770      	bx	lr

0800bce4 <_fini>:
 800bce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bce6:	bf00      	nop
 800bce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bcea:	bc08      	pop	{r3}
 800bcec:	469e      	mov	lr, r3
 800bcee:	4770      	bx	lr
