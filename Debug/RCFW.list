
RCFW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fbc4  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000016a4  0800fdb0  0800fdb0  0001fdb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011454  08011454  000301f0  2**0
                  CONTENTS
  4 .ARM          00000000  08011454  08011454  000301f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08011454  08011454  000301f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011454  08011454  00021454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011458  08011458  00021458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0801145c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a48  200001f0  0801164c  000301f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c38  0801164c  00030c38  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000301f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d06d  00000000  00000000  00030219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004348  00000000  00000000  0004d286  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015a0  00000000  00000000  000515d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013c8  00000000  00000000  00052b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f4a4  00000000  00000000  00053f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d432  00000000  00000000  000733dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a6a20  00000000  00000000  0009080e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013722e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e58  00000000  00000000  00137284  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001f0 	.word	0x200001f0
 8000204:	00000000 	.word	0x00000000
 8000208:	0800fd94 	.word	0x0800fd94

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001f4 	.word	0x200001f4
 8000224:	0800fd94 	.word	0x0800fd94

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__aeabi_frsub>:
 8000c40:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c44:	e002      	b.n	8000c4c <__addsf3>
 8000c46:	bf00      	nop

08000c48 <__aeabi_fsub>:
 8000c48:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c4c <__addsf3>:
 8000c4c:	0042      	lsls	r2, r0, #1
 8000c4e:	bf1f      	itttt	ne
 8000c50:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c54:	ea92 0f03 	teqne	r2, r3
 8000c58:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c5c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c60:	d06a      	beq.n	8000d38 <__addsf3+0xec>
 8000c62:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c66:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c6a:	bfc1      	itttt	gt
 8000c6c:	18d2      	addgt	r2, r2, r3
 8000c6e:	4041      	eorgt	r1, r0
 8000c70:	4048      	eorgt	r0, r1
 8000c72:	4041      	eorgt	r1, r0
 8000c74:	bfb8      	it	lt
 8000c76:	425b      	neglt	r3, r3
 8000c78:	2b19      	cmp	r3, #25
 8000c7a:	bf88      	it	hi
 8000c7c:	4770      	bxhi	lr
 8000c7e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c86:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c8a:	bf18      	it	ne
 8000c8c:	4240      	negne	r0, r0
 8000c8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c92:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c96:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c9a:	bf18      	it	ne
 8000c9c:	4249      	negne	r1, r1
 8000c9e:	ea92 0f03 	teq	r2, r3
 8000ca2:	d03f      	beq.n	8000d24 <__addsf3+0xd8>
 8000ca4:	f1a2 0201 	sub.w	r2, r2, #1
 8000ca8:	fa41 fc03 	asr.w	ip, r1, r3
 8000cac:	eb10 000c 	adds.w	r0, r0, ip
 8000cb0:	f1c3 0320 	rsb	r3, r3, #32
 8000cb4:	fa01 f103 	lsl.w	r1, r1, r3
 8000cb8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cbc:	d502      	bpl.n	8000cc4 <__addsf3+0x78>
 8000cbe:	4249      	negs	r1, r1
 8000cc0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cc4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000cc8:	d313      	bcc.n	8000cf2 <__addsf3+0xa6>
 8000cca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cce:	d306      	bcc.n	8000cde <__addsf3+0x92>
 8000cd0:	0840      	lsrs	r0, r0, #1
 8000cd2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cd6:	f102 0201 	add.w	r2, r2, #1
 8000cda:	2afe      	cmp	r2, #254	; 0xfe
 8000cdc:	d251      	bcs.n	8000d82 <__addsf3+0x136>
 8000cde:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ce2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ce6:	bf08      	it	eq
 8000ce8:	f020 0001 	biceq.w	r0, r0, #1
 8000cec:	ea40 0003 	orr.w	r0, r0, r3
 8000cf0:	4770      	bx	lr
 8000cf2:	0049      	lsls	r1, r1, #1
 8000cf4:	eb40 0000 	adc.w	r0, r0, r0
 8000cf8:	3a01      	subs	r2, #1
 8000cfa:	bf28      	it	cs
 8000cfc:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d00:	d2ed      	bcs.n	8000cde <__addsf3+0x92>
 8000d02:	fab0 fc80 	clz	ip, r0
 8000d06:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d0a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d0e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d12:	bfaa      	itet	ge
 8000d14:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d18:	4252      	neglt	r2, r2
 8000d1a:	4318      	orrge	r0, r3
 8000d1c:	bfbc      	itt	lt
 8000d1e:	40d0      	lsrlt	r0, r2
 8000d20:	4318      	orrlt	r0, r3
 8000d22:	4770      	bx	lr
 8000d24:	f092 0f00 	teq	r2, #0
 8000d28:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d2c:	bf06      	itte	eq
 8000d2e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d32:	3201      	addeq	r2, #1
 8000d34:	3b01      	subne	r3, #1
 8000d36:	e7b5      	b.n	8000ca4 <__addsf3+0x58>
 8000d38:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d40:	bf18      	it	ne
 8000d42:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d46:	d021      	beq.n	8000d8c <__addsf3+0x140>
 8000d48:	ea92 0f03 	teq	r2, r3
 8000d4c:	d004      	beq.n	8000d58 <__addsf3+0x10c>
 8000d4e:	f092 0f00 	teq	r2, #0
 8000d52:	bf08      	it	eq
 8000d54:	4608      	moveq	r0, r1
 8000d56:	4770      	bx	lr
 8000d58:	ea90 0f01 	teq	r0, r1
 8000d5c:	bf1c      	itt	ne
 8000d5e:	2000      	movne	r0, #0
 8000d60:	4770      	bxne	lr
 8000d62:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d66:	d104      	bne.n	8000d72 <__addsf3+0x126>
 8000d68:	0040      	lsls	r0, r0, #1
 8000d6a:	bf28      	it	cs
 8000d6c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d70:	4770      	bx	lr
 8000d72:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d76:	bf3c      	itt	cc
 8000d78:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d7c:	4770      	bxcc	lr
 8000d7e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d82:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d86:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d8a:	4770      	bx	lr
 8000d8c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d90:	bf16      	itet	ne
 8000d92:	4608      	movne	r0, r1
 8000d94:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d98:	4601      	movne	r1, r0
 8000d9a:	0242      	lsls	r2, r0, #9
 8000d9c:	bf06      	itte	eq
 8000d9e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000da2:	ea90 0f01 	teqeq	r0, r1
 8000da6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000daa:	4770      	bx	lr

08000dac <__aeabi_ui2f>:
 8000dac:	f04f 0300 	mov.w	r3, #0
 8000db0:	e004      	b.n	8000dbc <__aeabi_i2f+0x8>
 8000db2:	bf00      	nop

08000db4 <__aeabi_i2f>:
 8000db4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000db8:	bf48      	it	mi
 8000dba:	4240      	negmi	r0, r0
 8000dbc:	ea5f 0c00 	movs.w	ip, r0
 8000dc0:	bf08      	it	eq
 8000dc2:	4770      	bxeq	lr
 8000dc4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000dc8:	4601      	mov	r1, r0
 8000dca:	f04f 0000 	mov.w	r0, #0
 8000dce:	e01c      	b.n	8000e0a <__aeabi_l2f+0x2a>

08000dd0 <__aeabi_ul2f>:
 8000dd0:	ea50 0201 	orrs.w	r2, r0, r1
 8000dd4:	bf08      	it	eq
 8000dd6:	4770      	bxeq	lr
 8000dd8:	f04f 0300 	mov.w	r3, #0
 8000ddc:	e00a      	b.n	8000df4 <__aeabi_l2f+0x14>
 8000dde:	bf00      	nop

08000de0 <__aeabi_l2f>:
 8000de0:	ea50 0201 	orrs.w	r2, r0, r1
 8000de4:	bf08      	it	eq
 8000de6:	4770      	bxeq	lr
 8000de8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000dec:	d502      	bpl.n	8000df4 <__aeabi_l2f+0x14>
 8000dee:	4240      	negs	r0, r0
 8000df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000df4:	ea5f 0c01 	movs.w	ip, r1
 8000df8:	bf02      	ittt	eq
 8000dfa:	4684      	moveq	ip, r0
 8000dfc:	4601      	moveq	r1, r0
 8000dfe:	2000      	moveq	r0, #0
 8000e00:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e04:	bf08      	it	eq
 8000e06:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e0a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e0e:	fabc f28c 	clz	r2, ip
 8000e12:	3a08      	subs	r2, #8
 8000e14:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e18:	db10      	blt.n	8000e3c <__aeabi_l2f+0x5c>
 8000e1a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e1e:	4463      	add	r3, ip
 8000e20:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e24:	f1c2 0220 	rsb	r2, r2, #32
 8000e28:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e2c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e30:	eb43 0002 	adc.w	r0, r3, r2
 8000e34:	bf08      	it	eq
 8000e36:	f020 0001 	biceq.w	r0, r0, #1
 8000e3a:	4770      	bx	lr
 8000e3c:	f102 0220 	add.w	r2, r2, #32
 8000e40:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e44:	f1c2 0220 	rsb	r2, r2, #32
 8000e48:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e4c:	fa21 f202 	lsr.w	r2, r1, r2
 8000e50:	eb43 0002 	adc.w	r0, r3, r2
 8000e54:	bf08      	it	eq
 8000e56:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5a:	4770      	bx	lr

08000e5c <__aeabi_fmul>:
 8000e5c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e60:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e64:	bf1e      	ittt	ne
 8000e66:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e6a:	ea92 0f0c 	teqne	r2, ip
 8000e6e:	ea93 0f0c 	teqne	r3, ip
 8000e72:	d06f      	beq.n	8000f54 <__aeabi_fmul+0xf8>
 8000e74:	441a      	add	r2, r3
 8000e76:	ea80 0c01 	eor.w	ip, r0, r1
 8000e7a:	0240      	lsls	r0, r0, #9
 8000e7c:	bf18      	it	ne
 8000e7e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e82:	d01e      	beq.n	8000ec2 <__aeabi_fmul+0x66>
 8000e84:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e88:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e8c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e90:	fba0 3101 	umull	r3, r1, r0, r1
 8000e94:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e98:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e9c:	bf3e      	ittt	cc
 8000e9e:	0049      	lslcc	r1, r1, #1
 8000ea0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ea4:	005b      	lslcc	r3, r3, #1
 8000ea6:	ea40 0001 	orr.w	r0, r0, r1
 8000eaa:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000eae:	2afd      	cmp	r2, #253	; 0xfd
 8000eb0:	d81d      	bhi.n	8000eee <__aeabi_fmul+0x92>
 8000eb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000eb6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eba:	bf08      	it	eq
 8000ebc:	f020 0001 	biceq.w	r0, r0, #1
 8000ec0:	4770      	bx	lr
 8000ec2:	f090 0f00 	teq	r0, #0
 8000ec6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000eca:	bf08      	it	eq
 8000ecc:	0249      	lsleq	r1, r1, #9
 8000ece:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ed2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ed6:	3a7f      	subs	r2, #127	; 0x7f
 8000ed8:	bfc2      	ittt	gt
 8000eda:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ede:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ee2:	4770      	bxgt	lr
 8000ee4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee8:	f04f 0300 	mov.w	r3, #0
 8000eec:	3a01      	subs	r2, #1
 8000eee:	dc5d      	bgt.n	8000fac <__aeabi_fmul+0x150>
 8000ef0:	f112 0f19 	cmn.w	r2, #25
 8000ef4:	bfdc      	itt	le
 8000ef6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000efa:	4770      	bxle	lr
 8000efc:	f1c2 0200 	rsb	r2, r2, #0
 8000f00:	0041      	lsls	r1, r0, #1
 8000f02:	fa21 f102 	lsr.w	r1, r1, r2
 8000f06:	f1c2 0220 	rsb	r2, r2, #32
 8000f0a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f0e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000f12:	f140 0000 	adc.w	r0, r0, #0
 8000f16:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000f1a:	bf08      	it	eq
 8000f1c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f20:	4770      	bx	lr
 8000f22:	f092 0f00 	teq	r2, #0
 8000f26:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f2a:	bf02      	ittt	eq
 8000f2c:	0040      	lsleq	r0, r0, #1
 8000f2e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f32:	3a01      	subeq	r2, #1
 8000f34:	d0f9      	beq.n	8000f2a <__aeabi_fmul+0xce>
 8000f36:	ea40 000c 	orr.w	r0, r0, ip
 8000f3a:	f093 0f00 	teq	r3, #0
 8000f3e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f42:	bf02      	ittt	eq
 8000f44:	0049      	lsleq	r1, r1, #1
 8000f46:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f4a:	3b01      	subeq	r3, #1
 8000f4c:	d0f9      	beq.n	8000f42 <__aeabi_fmul+0xe6>
 8000f4e:	ea41 010c 	orr.w	r1, r1, ip
 8000f52:	e78f      	b.n	8000e74 <__aeabi_fmul+0x18>
 8000f54:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f58:	ea92 0f0c 	teq	r2, ip
 8000f5c:	bf18      	it	ne
 8000f5e:	ea93 0f0c 	teqne	r3, ip
 8000f62:	d00a      	beq.n	8000f7a <__aeabi_fmul+0x11e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1d8      	bne.n	8000f22 <__aeabi_fmul+0xc6>
 8000f70:	ea80 0001 	eor.w	r0, r0, r1
 8000f74:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f78:	4770      	bx	lr
 8000f7a:	f090 0f00 	teq	r0, #0
 8000f7e:	bf17      	itett	ne
 8000f80:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f84:	4608      	moveq	r0, r1
 8000f86:	f091 0f00 	teqne	r1, #0
 8000f8a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f8e:	d014      	beq.n	8000fba <__aeabi_fmul+0x15e>
 8000f90:	ea92 0f0c 	teq	r2, ip
 8000f94:	d101      	bne.n	8000f9a <__aeabi_fmul+0x13e>
 8000f96:	0242      	lsls	r2, r0, #9
 8000f98:	d10f      	bne.n	8000fba <__aeabi_fmul+0x15e>
 8000f9a:	ea93 0f0c 	teq	r3, ip
 8000f9e:	d103      	bne.n	8000fa8 <__aeabi_fmul+0x14c>
 8000fa0:	024b      	lsls	r3, r1, #9
 8000fa2:	bf18      	it	ne
 8000fa4:	4608      	movne	r0, r1
 8000fa6:	d108      	bne.n	8000fba <__aeabi_fmul+0x15e>
 8000fa8:	ea80 0001 	eor.w	r0, r0, r1
 8000fac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000fb0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fb4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fb8:	4770      	bx	lr
 8000fba:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fbe:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000fc2:	4770      	bx	lr

08000fc4 <__aeabi_fdiv>:
 8000fc4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000fc8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000fcc:	bf1e      	ittt	ne
 8000fce:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000fd2:	ea92 0f0c 	teqne	r2, ip
 8000fd6:	ea93 0f0c 	teqne	r3, ip
 8000fda:	d069      	beq.n	80010b0 <__aeabi_fdiv+0xec>
 8000fdc:	eba2 0203 	sub.w	r2, r2, r3
 8000fe0:	ea80 0c01 	eor.w	ip, r0, r1
 8000fe4:	0249      	lsls	r1, r1, #9
 8000fe6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000fea:	d037      	beq.n	800105c <__aeabi_fdiv+0x98>
 8000fec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ff0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ff4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ff8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ffc:	428b      	cmp	r3, r1
 8000ffe:	bf38      	it	cc
 8001000:	005b      	lslcc	r3, r3, #1
 8001002:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8001006:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800100a:	428b      	cmp	r3, r1
 800100c:	bf24      	itt	cs
 800100e:	1a5b      	subcs	r3, r3, r1
 8001010:	ea40 000c 	orrcs.w	r0, r0, ip
 8001014:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8001018:	bf24      	itt	cs
 800101a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800101e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8001022:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8001026:	bf24      	itt	cs
 8001028:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800102c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001030:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8001034:	bf24      	itt	cs
 8001036:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800103a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800103e:	011b      	lsls	r3, r3, #4
 8001040:	bf18      	it	ne
 8001042:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8001046:	d1e0      	bne.n	800100a <__aeabi_fdiv+0x46>
 8001048:	2afd      	cmp	r2, #253	; 0xfd
 800104a:	f63f af50 	bhi.w	8000eee <__aeabi_fmul+0x92>
 800104e:	428b      	cmp	r3, r1
 8001050:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001054:	bf08      	it	eq
 8001056:	f020 0001 	biceq.w	r0, r0, #1
 800105a:	4770      	bx	lr
 800105c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001060:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001064:	327f      	adds	r2, #127	; 0x7f
 8001066:	bfc2      	ittt	gt
 8001068:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800106c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001070:	4770      	bxgt	lr
 8001072:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001076:	f04f 0300 	mov.w	r3, #0
 800107a:	3a01      	subs	r2, #1
 800107c:	e737      	b.n	8000eee <__aeabi_fmul+0x92>
 800107e:	f092 0f00 	teq	r2, #0
 8001082:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8001086:	bf02      	ittt	eq
 8001088:	0040      	lsleq	r0, r0, #1
 800108a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800108e:	3a01      	subeq	r2, #1
 8001090:	d0f9      	beq.n	8001086 <__aeabi_fdiv+0xc2>
 8001092:	ea40 000c 	orr.w	r0, r0, ip
 8001096:	f093 0f00 	teq	r3, #0
 800109a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800109e:	bf02      	ittt	eq
 80010a0:	0049      	lsleq	r1, r1, #1
 80010a2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80010a6:	3b01      	subeq	r3, #1
 80010a8:	d0f9      	beq.n	800109e <__aeabi_fdiv+0xda>
 80010aa:	ea41 010c 	orr.w	r1, r1, ip
 80010ae:	e795      	b.n	8000fdc <__aeabi_fdiv+0x18>
 80010b0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80010b4:	ea92 0f0c 	teq	r2, ip
 80010b8:	d108      	bne.n	80010cc <__aeabi_fdiv+0x108>
 80010ba:	0242      	lsls	r2, r0, #9
 80010bc:	f47f af7d 	bne.w	8000fba <__aeabi_fmul+0x15e>
 80010c0:	ea93 0f0c 	teq	r3, ip
 80010c4:	f47f af70 	bne.w	8000fa8 <__aeabi_fmul+0x14c>
 80010c8:	4608      	mov	r0, r1
 80010ca:	e776      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010cc:	ea93 0f0c 	teq	r3, ip
 80010d0:	d104      	bne.n	80010dc <__aeabi_fdiv+0x118>
 80010d2:	024b      	lsls	r3, r1, #9
 80010d4:	f43f af4c 	beq.w	8000f70 <__aeabi_fmul+0x114>
 80010d8:	4608      	mov	r0, r1
 80010da:	e76e      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010dc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80010e0:	bf18      	it	ne
 80010e2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80010e6:	d1ca      	bne.n	800107e <__aeabi_fdiv+0xba>
 80010e8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80010ec:	f47f af5c 	bne.w	8000fa8 <__aeabi_fmul+0x14c>
 80010f0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80010f4:	f47f af3c 	bne.w	8000f70 <__aeabi_fmul+0x114>
 80010f8:	e75f      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010fa:	bf00      	nop

080010fc <__aeabi_f2iz>:
 80010fc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001100:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001104:	d30f      	bcc.n	8001126 <__aeabi_f2iz+0x2a>
 8001106:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800110a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800110e:	d90d      	bls.n	800112c <__aeabi_f2iz+0x30>
 8001110:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001114:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001118:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800111c:	fa23 f002 	lsr.w	r0, r3, r2
 8001120:	bf18      	it	ne
 8001122:	4240      	negne	r0, r0
 8001124:	4770      	bx	lr
 8001126:	f04f 0000 	mov.w	r0, #0
 800112a:	4770      	bx	lr
 800112c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001130:	d101      	bne.n	8001136 <__aeabi_f2iz+0x3a>
 8001132:	0242      	lsls	r2, r0, #9
 8001134:	d105      	bne.n	8001142 <__aeabi_f2iz+0x46>
 8001136:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800113a:	bf08      	it	eq
 800113c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001140:	4770      	bx	lr
 8001142:	f04f 0000 	mov.w	r0, #0
 8001146:	4770      	bx	lr

08001148 <__aeabi_f2uiz>:
 8001148:	0042      	lsls	r2, r0, #1
 800114a:	d20e      	bcs.n	800116a <__aeabi_f2uiz+0x22>
 800114c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001150:	d30b      	bcc.n	800116a <__aeabi_f2uiz+0x22>
 8001152:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001156:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800115a:	d409      	bmi.n	8001170 <__aeabi_f2uiz+0x28>
 800115c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001160:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001164:	fa23 f002 	lsr.w	r0, r3, r2
 8001168:	4770      	bx	lr
 800116a:	f04f 0000 	mov.w	r0, #0
 800116e:	4770      	bx	lr
 8001170:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001174:	d101      	bne.n	800117a <__aeabi_f2uiz+0x32>
 8001176:	0242      	lsls	r2, r0, #9
 8001178:	d102      	bne.n	8001180 <__aeabi_f2uiz+0x38>
 800117a:	f04f 30ff 	mov.w	r0, #4294967295
 800117e:	4770      	bx	lr
 8001180:	f04f 0000 	mov.w	r0, #0
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop

08001188 <__aeabi_d2lz>:
 8001188:	b538      	push	{r3, r4, r5, lr}
 800118a:	460c      	mov	r4, r1
 800118c:	4605      	mov	r5, r0
 800118e:	4621      	mov	r1, r4
 8001190:	4628      	mov	r0, r5
 8001192:	2200      	movs	r2, #0
 8001194:	2300      	movs	r3, #0
 8001196:	f7ff fc7d 	bl	8000a94 <__aeabi_dcmplt>
 800119a:	b928      	cbnz	r0, 80011a8 <__aeabi_d2lz+0x20>
 800119c:	4628      	mov	r0, r5
 800119e:	4621      	mov	r1, r4
 80011a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80011a4:	f000 b80a 	b.w	80011bc <__aeabi_d2ulz>
 80011a8:	4628      	mov	r0, r5
 80011aa:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 80011ae:	f000 f805 	bl	80011bc <__aeabi_d2ulz>
 80011b2:	4240      	negs	r0, r0
 80011b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011b8:	bd38      	pop	{r3, r4, r5, pc}
 80011ba:	bf00      	nop

080011bc <__aeabi_d2ulz>:
 80011bc:	b5d0      	push	{r4, r6, r7, lr}
 80011be:	2200      	movs	r2, #0
 80011c0:	4b0b      	ldr	r3, [pc, #44]	; (80011f0 <__aeabi_d2ulz+0x34>)
 80011c2:	4606      	mov	r6, r0
 80011c4:	460f      	mov	r7, r1
 80011c6:	f7ff f9f3 	bl	80005b0 <__aeabi_dmul>
 80011ca:	f7ff fcc9 	bl	8000b60 <__aeabi_d2uiz>
 80011ce:	4604      	mov	r4, r0
 80011d0:	f7ff f974 	bl	80004bc <__aeabi_ui2d>
 80011d4:	2200      	movs	r2, #0
 80011d6:	4b07      	ldr	r3, [pc, #28]	; (80011f4 <__aeabi_d2ulz+0x38>)
 80011d8:	f7ff f9ea 	bl	80005b0 <__aeabi_dmul>
 80011dc:	4602      	mov	r2, r0
 80011de:	460b      	mov	r3, r1
 80011e0:	4630      	mov	r0, r6
 80011e2:	4639      	mov	r1, r7
 80011e4:	f7ff f82c 	bl	8000240 <__aeabi_dsub>
 80011e8:	f7ff fcba 	bl	8000b60 <__aeabi_d2uiz>
 80011ec:	4621      	mov	r1, r4
 80011ee:	bdd0      	pop	{r4, r6, r7, pc}
 80011f0:	3df00000 	.word	0x3df00000
 80011f4:	41f00000 	.word	0x41f00000

080011f8 <MAIN_displayRcfwBanner>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static void MAIN_displayRcfwBanner(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* Used ASCII art generator from https://patorjk.com with font called "Colossal" */
  LOG_info("");
 80011fc:	4914      	ldr	r1, [pc, #80]	; (8001250 <MAIN_displayRcfwBanner+0x58>)
 80011fe:	2001      	movs	r0, #1
 8001200:	f009 fab0 	bl	800a764 <LOG_log>
  LOG_info("    8888888b.        .d8888b.       8888888888      888       888"  );
 8001204:	4913      	ldr	r1, [pc, #76]	; (8001254 <MAIN_displayRcfwBanner+0x5c>)
 8001206:	2001      	movs	r0, #1
 8001208:	f009 faac 	bl	800a764 <LOG_log>
  LOG_info("    888   Y88b      d88P  Y88b      888             888   o   888"  );
 800120c:	4912      	ldr	r1, [pc, #72]	; (8001258 <MAIN_displayRcfwBanner+0x60>)
 800120e:	2001      	movs	r0, #1
 8001210:	f009 faa8 	bl	800a764 <LOG_log>
  LOG_info("    888    888      888    888      888             888  d8b  888"  );
 8001214:	4911      	ldr	r1, [pc, #68]	; (800125c <MAIN_displayRcfwBanner+0x64>)
 8001216:	2001      	movs	r0, #1
 8001218:	f009 faa4 	bl	800a764 <LOG_log>
  LOG_info("    888   d88P      888             8888888         888 d888b 888"  );
 800121c:	4910      	ldr	r1, [pc, #64]	; (8001260 <MAIN_displayRcfwBanner+0x68>)
 800121e:	2001      	movs	r0, #1
 8001220:	f009 faa0 	bl	800a764 <LOG_log>
  LOG_info("    8888888P\"       888             888             888d88888b888" );
 8001224:	490f      	ldr	r1, [pc, #60]	; (8001264 <MAIN_displayRcfwBanner+0x6c>)
 8001226:	2001      	movs	r0, #1
 8001228:	f009 fa9c 	bl	800a764 <LOG_log>
  LOG_info("    888 T88b        888    888      888             88888P Y88888"  );
 800122c:	490e      	ldr	r1, [pc, #56]	; (8001268 <MAIN_displayRcfwBanner+0x70>)
 800122e:	2001      	movs	r0, #1
 8001230:	f009 fa98 	bl	800a764 <LOG_log>
  LOG_info("    888  T88b       Y88b  d88P      888             8888P   Y8888"  );
 8001234:	490d      	ldr	r1, [pc, #52]	; (800126c <MAIN_displayRcfwBanner+0x74>)
 8001236:	2001      	movs	r0, #1
 8001238:	f009 fa94 	bl	800a764 <LOG_log>
  LOG_info("    888   T88b       \"Y8888P\"       888             888P     Y888");
 800123c:	490c      	ldr	r1, [pc, #48]	; (8001270 <MAIN_displayRcfwBanner+0x78>)
 800123e:	2001      	movs	r0, #1
 8001240:	f009 fa90 	bl	800a764 <LOG_log>
  LOG_info("");
 8001244:	4902      	ldr	r1, [pc, #8]	; (8001250 <MAIN_displayRcfwBanner+0x58>)
 8001246:	2001      	movs	r0, #1
 8001248:	f009 fa8c 	bl	800a764 <LOG_log>

  return;
 800124c:	bf00      	nop
}
 800124e:	bd80      	pop	{r7, pc}
 8001250:	0800fdb0 	.word	0x0800fdb0
 8001254:	0800fdb4 	.word	0x0800fdb4
 8001258:	0800fdf8 	.word	0x0800fdf8
 800125c:	0800fe3c 	.word	0x0800fe3c
 8001260:	0800fe80 	.word	0x0800fe80
 8001264:	0800fec4 	.word	0x0800fec4
 8001268:	0800ff08 	.word	0x0800ff08
 800126c:	0800ff4c 	.word	0x0800ff4c
 8001270:	0800ff90 	.word	0x0800ff90

08001274 <MAIN_togglePrintOutput>:

static void MAIN_togglePrintOutput(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  if (g_MAIN_printOutput == MAIN_PRINT_OUTPUT_TO_CONSOLE)
 8001278:	4b0a      	ldr	r3, [pc, #40]	; (80012a4 <MAIN_togglePrintOutput+0x30>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d107      	bne.n	8001290 <MAIN_togglePrintOutput+0x1c>
  {
    LOG_info("Directing print to MASTER");
 8001280:	4909      	ldr	r1, [pc, #36]	; (80012a8 <MAIN_togglePrintOutput+0x34>)
 8001282:	2001      	movs	r0, #1
 8001284:	f009 fa6e 	bl	800a764 <LOG_log>

    g_MAIN_printOutput = MAIN_PRINT_OUTPUT_TO_MASTER;
 8001288:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <MAIN_togglePrintOutput+0x30>)
 800128a:	2201      	movs	r2, #1
 800128c:	701a      	strb	r2, [r3, #0]
    LOG_info("Directing print to CONSOLE");

    g_MAIN_printOutput = MAIN_PRINT_OUTPUT_TO_CONSOLE;
  }

  return;
 800128e:	e007      	b.n	80012a0 <MAIN_togglePrintOutput+0x2c>
    LOG_info("Directing print to CONSOLE");
 8001290:	4906      	ldr	r1, [pc, #24]	; (80012ac <MAIN_togglePrintOutput+0x38>)
 8001292:	2001      	movs	r0, #1
 8001294:	f009 fa66 	bl	800a764 <LOG_log>
    g_MAIN_printOutput = MAIN_PRINT_OUTPUT_TO_CONSOLE;
 8001298:	4b02      	ldr	r3, [pc, #8]	; (80012a4 <MAIN_togglePrintOutput+0x30>)
 800129a:	2200      	movs	r2, #0
 800129c:	701a      	strb	r2, [r3, #0]
  return;
 800129e:	bf00      	nop
}
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	20000a44 	.word	0x20000a44
 80012a8:	0800ffd4 	.word	0x0800ffd4
 80012ac:	0800fff0 	.word	0x0800fff0

080012b0 <MAIN_updateSwReset>:

static void MAIN_updateSwReset(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
  GPIO_PinState l_pinState;

  l_pinState = HAL_GPIO_ReadPin(SW_RESET_GPIO_Port, SW_RESET_Pin);
 80012b6:	2101      	movs	r1, #1
 80012b8:	4816      	ldr	r0, [pc, #88]	; (8001314 <MAIN_updateSwReset+0x64>)
 80012ba:	f002 fdc7 	bl	8003e4c <HAL_GPIO_ReadPin>
 80012be:	4603      	mov	r3, r0
 80012c0:	71fb      	strb	r3, [r7, #7]

  if (l_pinState == GPIO_PIN_SET)
 80012c2:	79fb      	ldrb	r3, [r7, #7]
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d021      	beq.n	800130c <MAIN_updateSwReset+0x5c>
  {
    ; /* Nothing to do */
  }
  else
  {
    LOG_info("SW reset will be triggered in 3s");
 80012c8:	4913      	ldr	r1, [pc, #76]	; (8001318 <MAIN_updateSwReset+0x68>)
 80012ca:	2001      	movs	r0, #1
 80012cc:	f009 fa4a 	bl	800a764 <LOG_log>
    HAL_Delay(1000);
 80012d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012d4:	f001 fc92 	bl	8002bfc <HAL_Delay>
    LOG_info("SW reset will be triggered in 2s");
 80012d8:	4910      	ldr	r1, [pc, #64]	; (800131c <MAIN_updateSwReset+0x6c>)
 80012da:	2001      	movs	r0, #1
 80012dc:	f009 fa42 	bl	800a764 <LOG_log>
    HAL_Delay(1000);
 80012e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012e4:	f001 fc8a 	bl	8002bfc <HAL_Delay>
    LOG_info("SW reset will be triggered in 1s");
 80012e8:	490d      	ldr	r1, [pc, #52]	; (8001320 <MAIN_updateSwReset+0x70>)
 80012ea:	2001      	movs	r0, #1
 80012ec:	f009 fa3a 	bl	800a764 <LOG_log>
    HAL_Delay(1000);
 80012f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012f4:	f001 fc82 	bl	8002bfc <HAL_Delay>
    LOG_info("Resetting...");
 80012f8:	490a      	ldr	r1, [pc, #40]	; (8001324 <MAIN_updateSwReset+0x74>)
 80012fa:	2001      	movs	r0, #1
 80012fc:	f009 fa32 	bl	800a764 <LOG_log>
    HAL_Delay(100);
 8001300:	2064      	movs	r0, #100	; 0x64
 8001302:	f001 fc7b 	bl	8002bfc <HAL_Delay>

    HAL_NVIC_SystemReset();
 8001306:	f002 f9bb 	bl	8003680 <HAL_NVIC_SystemReset>
  }

  return;
 800130a:	bf00      	nop
 800130c:	bf00      	nop
}
 800130e:	3708      	adds	r7, #8
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	40011000 	.word	0x40011000
 8001318:	0801000c 	.word	0x0801000c
 800131c:	08010030 	.word	0x08010030
 8001320:	08010054 	.word	0x08010054
 8001324:	08010078 	.word	0x08010078

08001328 <MAIN_updateLogSetup>:

static void MAIN_updateLogSetup(T_BLU_Data *p_data, uint32_t p_timeInS)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	6039      	str	r1, [r7, #0]
  switch (p_data->button)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	7c1b      	ldrb	r3, [r3, #16]
 8001336:	3b05      	subs	r3, #5
 8001338:	2b03      	cmp	r3, #3
 800133a:	d85b      	bhi.n	80013f4 <MAIN_updateLogSetup+0xcc>
 800133c:	a201      	add	r2, pc, #4	; (adr r2, 8001344 <MAIN_updateLogSetup+0x1c>)
 800133e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001342:	bf00      	nop
 8001344:	08001355 	.word	0x08001355
 8001348:	080013cd 	.word	0x080013cd
 800134c:	0800137d 	.word	0x0800137d
 8001350:	080013a5 	.word	0x080013a5
  {
    case BLU_BUTTON_PAD_UP:
      if (g_MAIN_context.padUpPressedStartTimeInS == 0)
 8001354:	4b35      	ldr	r3, [pc, #212]	; (800142c <MAIN_updateLogSetup+0x104>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d105      	bne.n	8001368 <MAIN_updateLogSetup+0x40>
      {
        g_MAIN_context.padUpPressedStartTimeInS = p_timeInS;
 800135c:	4a33      	ldr	r2, [pc, #204]	; (800142c <MAIN_updateLogSetup+0x104>)
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	6013      	str	r3, [r2, #0]

        LOG_increaseLevel();
 8001362:	f009 f9cf 	bl	800a704 <LOG_increaseLevel>
      }
      else
      {
        g_MAIN_context.padUpPressedStartTimeInS = 0;
      }
      break;
 8001366:	e047      	b.n	80013f8 <MAIN_updateLogSetup+0xd0>
      else if (p_timeInS - g_MAIN_context.padUpPressedStartTimeInS < STP_BUTTONS_DEBOUNCE_PERIOD_IN_S)
 8001368:	4b30      	ldr	r3, [pc, #192]	; (800142c <MAIN_updateLogSetup+0x104>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	683a      	ldr	r2, [r7, #0]
 800136e:	1ad3      	subs	r3, r2, r3
 8001370:	2b01      	cmp	r3, #1
 8001372:	d941      	bls.n	80013f8 <MAIN_updateLogSetup+0xd0>
        g_MAIN_context.padUpPressedStartTimeInS = 0;
 8001374:	4b2d      	ldr	r3, [pc, #180]	; (800142c <MAIN_updateLogSetup+0x104>)
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
      break;
 800137a:	e03d      	b.n	80013f8 <MAIN_updateLogSetup+0xd0>

    case BLU_BUTTON_PAD_DOWN:
      if (g_MAIN_context.padDownPressedStartTimeInS == 0)
 800137c:	4b2b      	ldr	r3, [pc, #172]	; (800142c <MAIN_updateLogSetup+0x104>)
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d105      	bne.n	8001390 <MAIN_updateLogSetup+0x68>
      {
        g_MAIN_context.padDownPressedStartTimeInS = p_timeInS;
 8001384:	4a29      	ldr	r2, [pc, #164]	; (800142c <MAIN_updateLogSetup+0x104>)
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	6053      	str	r3, [r2, #4]

        LOG_decreaseLevel();
 800138a:	f009 f9d3 	bl	800a734 <LOG_decreaseLevel>
      }
      else
      {
        g_MAIN_context.padDownPressedStartTimeInS = 0;
      }
      break;
 800138e:	e035      	b.n	80013fc <MAIN_updateLogSetup+0xd4>
      else if (p_timeInS - g_MAIN_context.padDownPressedStartTimeInS < STP_BUTTONS_DEBOUNCE_PERIOD_IN_S)
 8001390:	4b26      	ldr	r3, [pc, #152]	; (800142c <MAIN_updateLogSetup+0x104>)
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	683a      	ldr	r2, [r7, #0]
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	2b01      	cmp	r3, #1
 800139a:	d92f      	bls.n	80013fc <MAIN_updateLogSetup+0xd4>
        g_MAIN_context.padDownPressedStartTimeInS = 0;
 800139c:	4b23      	ldr	r3, [pc, #140]	; (800142c <MAIN_updateLogSetup+0x104>)
 800139e:	2200      	movs	r2, #0
 80013a0:	605a      	str	r2, [r3, #4]
      break;
 80013a2:	e02b      	b.n	80013fc <MAIN_updateLogSetup+0xd4>

    case BLU_BUTTON_PAD_LEFT:
      if (g_MAIN_context.padLeftPressedStartTimeInS == 0)
 80013a4:	4b21      	ldr	r3, [pc, #132]	; (800142c <MAIN_updateLogSetup+0x104>)
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d105      	bne.n	80013b8 <MAIN_updateLogSetup+0x90>
      {
        g_MAIN_context.padLeftPressedStartTimeInS = p_timeInS;
 80013ac:	4a1f      	ldr	r2, [pc, #124]	; (800142c <MAIN_updateLogSetup+0x104>)
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	6093      	str	r3, [r2, #8]

        LOG_toggleOnOff();
 80013b2:	f009 f979 	bl	800a6a8 <LOG_toggleOnOff>
      }
      else
      {
        g_MAIN_context.padLeftPressedStartTimeInS = 0;
      }
      break;
 80013b6:	e023      	b.n	8001400 <MAIN_updateLogSetup+0xd8>
      else if (p_timeInS - g_MAIN_context.padLeftPressedStartTimeInS < STP_BUTTONS_DEBOUNCE_PERIOD_IN_S)
 80013b8:	4b1c      	ldr	r3, [pc, #112]	; (800142c <MAIN_updateLogSetup+0x104>)
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	683a      	ldr	r2, [r7, #0]
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d91d      	bls.n	8001400 <MAIN_updateLogSetup+0xd8>
        g_MAIN_context.padLeftPressedStartTimeInS = 0;
 80013c4:	4b19      	ldr	r3, [pc, #100]	; (800142c <MAIN_updateLogSetup+0x104>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	609a      	str	r2, [r3, #8]
      break;
 80013ca:	e019      	b.n	8001400 <MAIN_updateLogSetup+0xd8>

    case BLU_BUTTON_PAD_RIGHT:
      if (g_MAIN_context.padRightPressedStartTimeInS == 0)
 80013cc:	4b17      	ldr	r3, [pc, #92]	; (800142c <MAIN_updateLogSetup+0x104>)
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d105      	bne.n	80013e0 <MAIN_updateLogSetup+0xb8>
      {
        g_MAIN_context.padRightPressedStartTimeInS = p_timeInS;
 80013d4:	4a15      	ldr	r2, [pc, #84]	; (800142c <MAIN_updateLogSetup+0x104>)
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	60d3      	str	r3, [r2, #12]

        MAIN_togglePrintOutput();
 80013da:	f7ff ff4b 	bl	8001274 <MAIN_togglePrintOutput>
      }
      else
      {
        g_MAIN_context.padRightPressedStartTimeInS = 0;
      }
      break;
 80013de:	e011      	b.n	8001404 <MAIN_updateLogSetup+0xdc>
      else if (p_timeInS - g_MAIN_context.padRightPressedStartTimeInS < STP_BUTTONS_DEBOUNCE_PERIOD_IN_S)
 80013e0:	4b12      	ldr	r3, [pc, #72]	; (800142c <MAIN_updateLogSetup+0x104>)
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	683a      	ldr	r2, [r7, #0]
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d90b      	bls.n	8001404 <MAIN_updateLogSetup+0xdc>
        g_MAIN_context.padRightPressedStartTimeInS = 0;
 80013ec:	4b0f      	ldr	r3, [pc, #60]	; (800142c <MAIN_updateLogSetup+0x104>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	60da      	str	r2, [r3, #12]
      break;
 80013f2:	e007      	b.n	8001404 <MAIN_updateLogSetup+0xdc>

    default:
      ; /* Nothing to do */;
      break;
 80013f4:	bf00      	nop
 80013f6:	e006      	b.n	8001406 <MAIN_updateLogSetup+0xde>
      break;
 80013f8:	bf00      	nop
 80013fa:	e004      	b.n	8001406 <MAIN_updateLogSetup+0xde>
      break;
 80013fc:	bf00      	nop
 80013fe:	e002      	b.n	8001406 <MAIN_updateLogSetup+0xde>
      break;
 8001400:	bf00      	nop
 8001402:	e000      	b.n	8001406 <MAIN_updateLogSetup+0xde>
      break;
 8001404:	bf00      	nop
  }

  if ((p_data->button != BLU_BUTTON_PAD_UP) && (p_data->button != BLU_BUTTON_PAD_DOWN))
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	7c1b      	ldrb	r3, [r3, #16]
 800140a:	2b05      	cmp	r3, #5
 800140c:	d00a      	beq.n	8001424 <MAIN_updateLogSetup+0xfc>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	7c1b      	ldrb	r3, [r3, #16]
 8001412:	2b07      	cmp	r3, #7
 8001414:	d006      	beq.n	8001424 <MAIN_updateLogSetup+0xfc>
  {
    g_MAIN_context.padUpPressedStartTimeInS   = 0;
 8001416:	4b05      	ldr	r3, [pc, #20]	; (800142c <MAIN_updateLogSetup+0x104>)
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
    g_MAIN_context.padDownPressedStartTimeInS = 0;
 800141c:	4b03      	ldr	r3, [pc, #12]	; (800142c <MAIN_updateLogSetup+0x104>)
 800141e:	2200      	movs	r2, #0
 8001420:	605a      	str	r2, [r3, #4]
  else
  {
    ; /* Nothing to do */;
  }

  return;
 8001422:	bf00      	nop
 8001424:	bf00      	nop
}
 8001426:	3708      	adds	r7, #8
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	2000020c 	.word	0x2000020c

08001430 <MAIN_updateLedMode>:

static void MAIN_updateLedMode(T_DRV_MODE p_driveMode, uint32_t p_voltageInMv)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	6039      	str	r1, [r7, #0]
 800143a:	71fb      	strb	r3, [r7, #7]
  /* Regarding LED mode, battery check is prioritary on user requests. */
  /* Ignore 0 value as we could get it at startup or while debugging.  */
  if ((p_voltageInMv != 0) && (p_voltageInMv < STP_MIN_BATTERY_LEVEL_IN_MV))
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d00d      	beq.n	800145e <MAIN_updateLedMode+0x2e>
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	f242 720f 	movw	r2, #9999	; 0x270f
 8001448:	4293      	cmp	r3, r2
 800144a:	d808      	bhi.n	800145e <MAIN_updateLedMode+0x2e>
  {
    LOG_warning("Battery is getting low: %u mV", p_voltageInMv);
 800144c:	683a      	ldr	r2, [r7, #0]
 800144e:	4911      	ldr	r1, [pc, #68]	; (8001494 <MAIN_updateLedMode+0x64>)
 8001450:	2002      	movs	r0, #2
 8001452:	f009 f987 	bl	800a764 <LOG_log>

    LED_setMode(LED_MODE_FORCED_OFF);
 8001456:	2000      	movs	r0, #0
 8001458:	f009 f86a 	bl	800a530 <LED_setMode>
 800145c:	e016      	b.n	800148c <MAIN_updateLedMode+0x5c>
  }
  else
  {
    switch (p_driveMode)
 800145e:	79fb      	ldrb	r3, [r7, #7]
 8001460:	2b02      	cmp	r3, #2
 8001462:	d00e      	beq.n	8001482 <MAIN_updateLedMode+0x52>
 8001464:	2b02      	cmp	r3, #2
 8001466:	dc10      	bgt.n	800148a <MAIN_updateLedMode+0x5a>
 8001468:	2b00      	cmp	r3, #0
 800146a:	d002      	beq.n	8001472 <MAIN_updateLedMode+0x42>
 800146c:	2b01      	cmp	r3, #1
 800146e:	d004      	beq.n	800147a <MAIN_updateLedMode+0x4a>
        LED_setMode(LED_MODE_BLINK_FAST);
        break;

      default:
        ; /* Nothing to do */
        break;
 8001470:	e00b      	b.n	800148a <MAIN_updateLedMode+0x5a>
        LED_setMode(LED_MODE_BLINK_SLOW);
 8001472:	2002      	movs	r0, #2
 8001474:	f009 f85c 	bl	800a530 <LED_setMode>
        break;
 8001478:	e008      	b.n	800148c <MAIN_updateLedMode+0x5c>
        LED_setMode(LED_MODE_BLINK_MEDIUM);
 800147a:	2003      	movs	r0, #3
 800147c:	f009 f858 	bl	800a530 <LED_setMode>
        break;
 8001480:	e004      	b.n	800148c <MAIN_updateLedMode+0x5c>
        LED_setMode(LED_MODE_BLINK_FAST);
 8001482:	2004      	movs	r0, #4
 8001484:	f009 f854 	bl	800a530 <LED_setMode>
        break;
 8001488:	e000      	b.n	800148c <MAIN_updateLedMode+0x5c>
        break;
 800148a:	bf00      	nop
    }
  }

  return;
 800148c:	bf00      	nop
}
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	08010088 	.word	0x08010088

08001498 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b08e      	sub	sp, #56	; 0x38
 800149c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800149e:	f001 fb4b 	bl	8002b38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014a2:	f000 f9b5 	bl	8001810 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014a6:	f000 fdb7 	bl	8002018 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80014aa:	f000 fd8b 	bl	8001fc4 <MX_USART1_UART_Init>
  MX_UART4_Init();
 80014ae:	f000 fd5f 	bl	8001f70 <MX_UART4_Init>
  MX_ADC1_Init();
 80014b2:	f000 fa05 	bl	80018c0 <MX_ADC1_Init>
  MX_RTC_Init();
 80014b6:	f000 fa41 	bl	800193c <MX_RTC_Init>
  MX_TIM1_Init();
 80014ba:	f000 fa89 	bl	80019d0 <MX_TIM1_Init>
  MX_TIM2_Init();
 80014be:	f000 fad7 	bl	8001a70 <MX_TIM2_Init>
  MX_TIM3_Init();
 80014c2:	f000 fb29 	bl	8001b18 <MX_TIM3_Init>
  MX_TIM4_Init();
 80014c6:	f000 fb7b 	bl	8001bc0 <MX_TIM4_Init>
  MX_TIM5_Init();
 80014ca:	f000 fbcd 	bl	8001c68 <MX_TIM5_Init>
  MX_TIM6_Init();
 80014ce:	f000 fc1f 	bl	8001d10 <MX_TIM6_Init>
  MX_TIM7_Init();
 80014d2:	f000 fc53 	bl	8001d7c <MX_TIM7_Init>
  MX_TIM8_Init();
 80014d6:	f000 fc87 	bl	8001de8 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */

  /* Setup local variables */
  l_halReturnCode  = HAL_OK;
 80014da:	2300      	movs	r3, #0
 80014dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  l_driveMode      = STP_DEFAULT_DRIVE_MODE;
 80014e0:	2300      	movs	r3, #0
 80014e2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  l_currentTimeInS = 0;
 80014e6:	2300      	movs	r3, #0
 80014e8:	627b      	str	r3, [r7, #36]	; 0x24
  l_voltageInMv    = 0;
 80014ea:	2300      	movs	r3, #0
 80014ec:	603b      	str	r3, [r7, #0]

  SFO_init    (&l_commandsFifo );
 80014ee:	f107 0318 	add.w	r3, r7, #24
 80014f2:	4618      	mov	r0, r3
 80014f4:	f009 fd68 	bl	800afc8 <SFO_init>
  BLU_initData(&l_bluetoothData);
 80014f8:	1d3b      	adds	r3, r7, #4
 80014fa:	4618      	mov	r0, r3
 80014fc:	f007 fda4 	bl	8009048 <BLU_initData>

  /* Setup global variables */
  g_MAIN_context.padUpPressedStartTimeInS    = 0;
 8001500:	4bac      	ldr	r3, [pc, #688]	; (80017b4 <main+0x31c>)
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]
  g_MAIN_context.padDownPressedStartTimeInS  = 0;
 8001506:	4bab      	ldr	r3, [pc, #684]	; (80017b4 <main+0x31c>)
 8001508:	2200      	movs	r2, #0
 800150a:	605a      	str	r2, [r3, #4]
  g_MAIN_context.padLeftPressedStartTimeInS  = 0;
 800150c:	4ba9      	ldr	r3, [pc, #676]	; (80017b4 <main+0x31c>)
 800150e:	2200      	movs	r2, #0
 8001510:	609a      	str	r2, [r3, #8]
  g_MAIN_context.padRightPressedStartTimeInS = 0;
 8001512:	4ba8      	ldr	r3, [pc, #672]	; (80017b4 <main+0x31c>)
 8001514:	2200      	movs	r2, #0
 8001516:	60da      	str	r2, [r3, #12]
  g_MAIN_context.swResetPollingLastTimeInS   = 0;
 8001518:	4ba6      	ldr	r3, [pc, #664]	; (80017b4 <main+0x31c>)
 800151a:	2200      	movs	r2, #0
 800151c:	611a      	str	r2, [r3, #16]
  g_MAIN_context.batteryPollingLastTimeInS   = 0;
 800151e:	4ba5      	ldr	r3, [pc, #660]	; (80017b4 <main+0x31c>)
 8001520:	2200      	movs	r2, #0
 8001522:	615a      	str	r2, [r3, #20]
  g_MAIN_context.ledModeUpdateLastTimeInS    = 0;
 8001524:	4ba3      	ldr	r3, [pc, #652]	; (80017b4 <main+0x31c>)
 8001526:	2200      	movs	r2, #0
 8001528:	619a      	str	r2, [r3, #24]
  g_MAIN_context.driveLogInfoLastTimeInS     = 0;
 800152a:	4ba2      	ldr	r3, [pc, #648]	; (80017b4 <main+0x31c>)
 800152c:	2200      	movs	r2, #0
 800152e:	61da      	str	r2, [r3, #28]
  g_MAIN_context.velocityReportLastTimeInS   = 0;
 8001530:	4ba0      	ldr	r3, [pc, #640]	; (80017b4 <main+0x31c>)
 8001532:	2200      	movs	r2, #0
 8001534:	621a      	str	r2, [r3, #32]
  g_MAIN_printOutput                         = MAIN_PRINT_OUTPUT_TO_CONSOLE;
 8001536:	4ba0      	ldr	r3, [pc, #640]	; (80017b8 <main+0x320>)
 8001538:	2200      	movs	r2, #0
 800153a:	701a      	strb	r2, [r3, #0]

  /* Setup console */
  CON_init(&huart1);
 800153c:	489f      	ldr	r0, [pc, #636]	; (80017bc <main+0x324>)
 800153e:	f007 fec3 	bl	80092c8 <CON_init>

  /* Setup master connection */
  MAS_init(&huart4);
 8001542:	489f      	ldr	r0, [pc, #636]	; (80017c0 <main+0x328>)
 8001544:	f009 f978 	bl	800a838 <MAS_init>

#ifdef DEBUG

  /* Temporary delay/workaround to deal with debugger connection issue */
  for (int i = 0; i < 10; i++)
 8001548:	2300      	movs	r3, #0
 800154a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800154c:	e006      	b.n	800155c <main+0xc4>
  {
    UTI_delayMs(1000);
 800154e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001552:	f009 fe9d 	bl	800b290 <UTI_delayMs>
  for (int i = 0; i < 10; i++)
 8001556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001558:	3301      	adds	r3, #1
 800155a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800155c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800155e:	2b09      	cmp	r3, #9
 8001560:	ddf5      	ble.n	800154e <main+0xb6>
  }

#endif

  /* Setup and start using logs */
  LOG_init    (STP_DEFAULT_IS_LOG_ON);
 8001562:	2001      	movs	r0, #1
 8001564:	f009 f88c 	bl	800a680 <LOG_init>
  LOG_setLevel(STP_DEFAULT_LOG_LEVEL);
 8001568:	2000      	movs	r0, #0
 800156a:	f009 f8bb 	bl	800a6e4 <LOG_setLevel>
  LOG_info    ("Starting RCFW"      );
 800156e:	4995      	ldr	r1, [pc, #596]	; (80017c4 <main+0x32c>)
 8001570:	2001      	movs	r0, #1
 8001572:	f009 f8f7 	bl	800a764 <LOG_log>

  /* Display RCFW banner */
  MAIN_displayRcfwBanner();
 8001576:	f7ff fe3f 	bl	80011f8 <MAIN_displayRcfwBanner>

  /* Initialize utilities */
  UTI_init(&htim7, &htim6, &hrtc);
 800157a:	4a93      	ldr	r2, [pc, #588]	; (80017c8 <main+0x330>)
 800157c:	4993      	ldr	r1, [pc, #588]	; (80017cc <main+0x334>)
 800157e:	4894      	ldr	r0, [pc, #592]	; (80017d0 <main+0x338>)
 8001580:	f009 fe22 	bl	800b1c8 <UTI_init>

  /* Initialize Timer 1 & green LED */
  l_halReturnCode = HAL_TIM_Base_Start_IT(&htim1);
 8001584:	4893      	ldr	r0, [pc, #588]	; (80017d4 <main+0x33c>)
 8001586:	f004 fccd 	bl	8005f24 <HAL_TIM_Base_Start_IT>
 800158a:	4603      	mov	r3, r0
 800158c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (l_halReturnCode != HAL_OK)
 8001590:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001594:	2b00      	cmp	r3, #0
 8001596:	d007      	beq.n	80015a8 <main+0x110>
  {
    LOG_error("HAL_TIM_Base_Start_IT(&htim1) returned an error code: %d", l_halReturnCode);
 8001598:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800159c:	461a      	mov	r2, r3
 800159e:	498e      	ldr	r1, [pc, #568]	; (80017d8 <main+0x340>)
 80015a0:	2003      	movs	r0, #3
 80015a2:	f009 f8df 	bl	800a764 <LOG_log>
 80015a6:	e003      	b.n	80015b0 <main+0x118>
  }
  else
  {
    LOG_info("Started TIMER 1 (green LED)");
 80015a8:	498c      	ldr	r1, [pc, #560]	; (80017dc <main+0x344>)
 80015aa:	2001      	movs	r0, #1
 80015ac:	f009 f8da 	bl	800a764 <LOG_log>
  }

  LED_setMode(LED_MODE_BLINK_FAST);
 80015b0:	2004      	movs	r0, #4
 80015b2:	f008 ffbd 	bl	800a530 <LED_setMode>

  /* Initialize Timers 2, 3, 4 & 5 */
  l_halReturnCode  = HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 80015b6:	213c      	movs	r1, #60	; 0x3c
 80015b8:	4889      	ldr	r0, [pc, #548]	; (80017e0 <main+0x348>)
 80015ba:	f005 f8eb 	bl	8006794 <HAL_TIM_Encoder_Start_IT>
 80015be:	4603      	mov	r3, r0
 80015c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  l_halReturnCode |= HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 80015c4:	213c      	movs	r1, #60	; 0x3c
 80015c6:	4887      	ldr	r0, [pc, #540]	; (80017e4 <main+0x34c>)
 80015c8:	f005 f8e4 	bl	8006794 <HAL_TIM_Encoder_Start_IT>
 80015cc:	4603      	mov	r3, r0
 80015ce:	461a      	mov	r2, r3
 80015d0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80015d4:	4313      	orrs	r3, r2
 80015d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  l_halReturnCode |= HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 80015da:	213c      	movs	r1, #60	; 0x3c
 80015dc:	4882      	ldr	r0, [pc, #520]	; (80017e8 <main+0x350>)
 80015de:	f005 f8d9 	bl	8006794 <HAL_TIM_Encoder_Start_IT>
 80015e2:	4603      	mov	r3, r0
 80015e4:	461a      	mov	r2, r3
 80015e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80015ea:	4313      	orrs	r3, r2
 80015ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  l_halReturnCode |= HAL_TIM_Encoder_Start_IT(&htim5, TIM_CHANNEL_ALL);
 80015f0:	213c      	movs	r1, #60	; 0x3c
 80015f2:	487e      	ldr	r0, [pc, #504]	; (80017ec <main+0x354>)
 80015f4:	f005 f8ce 	bl	8006794 <HAL_TIM_Encoder_Start_IT>
 80015f8:	4603      	mov	r3, r0
 80015fa:	461a      	mov	r2, r3
 80015fc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001600:	4313      	orrs	r3, r2
 8001602:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (l_halReturnCode != HAL_OK)
 8001606:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800160a:	2b00      	cmp	r3, #0
 800160c:	d007      	beq.n	800161e <main+0x186>
  {
    LOG_error("HAL_TIM_Encoder_Start_IT(&htimX) returned error code(s): %d", l_halReturnCode);
 800160e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001612:	461a      	mov	r2, r3
 8001614:	4976      	ldr	r1, [pc, #472]	; (80017f0 <main+0x358>)
 8001616:	2003      	movs	r0, #3
 8001618:	f009 f8a4 	bl	800a764 <LOG_log>
 800161c:	e003      	b.n	8001626 <main+0x18e>
  }
  else
  {
    LOG_info("Started TIMER 2, 3, 4, 5 (encoders)");
 800161e:	4975      	ldr	r1, [pc, #468]	; (80017f4 <main+0x35c>)
 8001620:	2001      	movs	r0, #1
 8001622:	f009 f89f 	bl	800a764 <LOG_log>
  }

  /* Initialize Timer 8 */
  l_halReturnCode = HAL_TIM_Base_Start(&htim8);
 8001626:	4874      	ldr	r0, [pc, #464]	; (80017f8 <main+0x360>)
 8001628:	f004 fbf2 	bl	8005e10 <HAL_TIM_Base_Start>
 800162c:	4603      	mov	r3, r0
 800162e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (l_halReturnCode != HAL_OK)
 8001632:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001636:	2b00      	cmp	r3, #0
 8001638:	d007      	beq.n	800164a <main+0x1b2>
  {
    LOG_error("HAL_TIM_Base_Start(&htim8) returned an error code: %d", l_halReturnCode);
 800163a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800163e:	461a      	mov	r2, r3
 8001640:	496e      	ldr	r1, [pc, #440]	; (80017fc <main+0x364>)
 8001642:	2003      	movs	r0, #3
 8001644:	f009 f88e 	bl	800a764 <LOG_log>
 8001648:	e003      	b.n	8001652 <main+0x1ba>
  }
  else
  {
    LOG_info("Started TIMER 8 (PWM channels)");
 800164a:	496d      	ldr	r1, [pc, #436]	; (8001800 <main+0x368>)
 800164c:	2001      	movs	r0, #1
 800164e:	f009 f889 	bl	800a764 <LOG_log>
  }

  /* Initialize battery monitor */
  BAT_init(&hadc1);
 8001652:	486c      	ldr	r0, [pc, #432]	; (8001804 <main+0x36c>)
 8001654:	f007 fbaa 	bl	8008dac <BAT_init>

  /* Initialize PWM channels */
  l_halReturnCode  = HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8001658:	2100      	movs	r1, #0
 800165a:	4867      	ldr	r0, [pc, #412]	; (80017f8 <main+0x360>)
 800165c:	f004 fdd0 	bl	8006200 <HAL_TIM_PWM_Start>
 8001660:	4603      	mov	r3, r0
 8001662:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  l_halReturnCode |= HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8001666:	2104      	movs	r1, #4
 8001668:	4863      	ldr	r0, [pc, #396]	; (80017f8 <main+0x360>)
 800166a:	f004 fdc9 	bl	8006200 <HAL_TIM_PWM_Start>
 800166e:	4603      	mov	r3, r0
 8001670:	461a      	mov	r2, r3
 8001672:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001676:	4313      	orrs	r3, r2
 8001678:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  l_halReturnCode |= HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 800167c:	2108      	movs	r1, #8
 800167e:	485e      	ldr	r0, [pc, #376]	; (80017f8 <main+0x360>)
 8001680:	f004 fdbe 	bl	8006200 <HAL_TIM_PWM_Start>
 8001684:	4603      	mov	r3, r0
 8001686:	461a      	mov	r2, r3
 8001688:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800168c:	4313      	orrs	r3, r2
 800168e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  l_halReturnCode |= HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8001692:	210c      	movs	r1, #12
 8001694:	4858      	ldr	r0, [pc, #352]	; (80017f8 <main+0x360>)
 8001696:	f004 fdb3 	bl	8006200 <HAL_TIM_PWM_Start>
 800169a:	4603      	mov	r3, r0
 800169c:	461a      	mov	r2, r3
 800169e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80016a2:	4313      	orrs	r3, r2
 80016a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (l_halReturnCode != HAL_OK)
 80016a8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d007      	beq.n	80016c0 <main+0x228>
  {
    LOG_error("HAL_TIM_PWM_Start(&htim8) returned error code(s): %d", l_halReturnCode);
 80016b0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80016b4:	461a      	mov	r2, r3
 80016b6:	4954      	ldr	r1, [pc, #336]	; (8001808 <main+0x370>)
 80016b8:	2003      	movs	r0, #3
 80016ba:	f009 f853 	bl	800a764 <LOG_log>
 80016be:	e003      	b.n	80016c8 <main+0x230>
  }
  else
  {
    LOG_info("Started PWM channels");
 80016c0:	4952      	ldr	r1, [pc, #328]	; (800180c <main+0x374>)
 80016c2:	2001      	movs	r0, #1
 80016c4:	f009 f84e 	bl	800a764 <LOG_log>
  }

  /* Initialize bluetooth control */
  BLU_init();
 80016c8:	f007 fcae 	bl	8009028 <BLU_init>

  /* Initialize driving module */
  DRV_init(&htim8, &htim4, &htim5, &htim2, &htim3);
 80016cc:	4b45      	ldr	r3, [pc, #276]	; (80017e4 <main+0x34c>)
 80016ce:	9300      	str	r3, [sp, #0]
 80016d0:	4b43      	ldr	r3, [pc, #268]	; (80017e0 <main+0x348>)
 80016d2:	4a46      	ldr	r2, [pc, #280]	; (80017ec <main+0x354>)
 80016d4:	4944      	ldr	r1, [pc, #272]	; (80017e8 <main+0x350>)
 80016d6:	4848      	ldr	r0, [pc, #288]	; (80017f8 <main+0x360>)
 80016d8:	f007 fe7c 	bl	80093d4 <DRV_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    l_driveMode = DRV_getMode();
 80016dc:	f008 fb3c 	bl	8009d58 <DRV_getMode>
 80016e0:	4603      	mov	r3, r0
 80016e2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

    l_currentTimeInS = UTI_getTimeS();
 80016e6:	f009 fdef 	bl	800b2c8 <UTI_getTimeS>
 80016ea:	6278      	str	r0, [r7, #36]	; 0x24

    if ((STP_SW_RESET_POLLING_PERIOD_IN_S != 0) &&
        (l_currentTimeInS - g_MAIN_context.swResetPollingLastTimeInS >= STP_SW_RESET_POLLING_PERIOD_IN_S))
 80016ec:	4b31      	ldr	r3, [pc, #196]	; (80017b4 <main+0x31c>)
 80016ee:	691b      	ldr	r3, [r3, #16]
    if ((STP_SW_RESET_POLLING_PERIOD_IN_S != 0) &&
 80016f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d004      	beq.n	8001700 <main+0x268>
    {
      MAIN_updateSwReset();
 80016f6:	f7ff fddb 	bl	80012b0 <MAIN_updateSwReset>

      g_MAIN_context.swResetPollingLastTimeInS = l_currentTimeInS;
 80016fa:	4a2e      	ldr	r2, [pc, #184]	; (80017b4 <main+0x31c>)
 80016fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fe:	6113      	str	r3, [r2, #16]
    {
      ; /* Nothing to do */
    }

    if ((STP_BATTERY_POLLING_PERIOD_IN_S != 0) &&
        (l_currentTimeInS - g_MAIN_context.batteryPollingLastTimeInS >= STP_BATTERY_POLLING_PERIOD_IN_S))
 8001700:	4b2c      	ldr	r3, [pc, #176]	; (80017b4 <main+0x31c>)
 8001702:	695b      	ldr	r3, [r3, #20]
 8001704:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001706:	1ad3      	subs	r3, r2, r3
    if ((STP_BATTERY_POLLING_PERIOD_IN_S != 0) &&
 8001708:	2b09      	cmp	r3, #9
 800170a:	d906      	bls.n	800171a <main+0x282>
    {
      BAT_update(&l_voltageInMv);
 800170c:	463b      	mov	r3, r7
 800170e:	4618      	mov	r0, r3
 8001710:	f007 fb60 	bl	8008dd4 <BAT_update>

      g_MAIN_context.batteryPollingLastTimeInS = l_currentTimeInS;
 8001714:	4a27      	ldr	r2, [pc, #156]	; (80017b4 <main+0x31c>)
 8001716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001718:	6153      	str	r3, [r2, #20]
    {
      ; /* Nothing to do */
    }

    if ((STP_LED_UPDATE_MODE_PERIOD_IN_S != 0) &&
        (l_currentTimeInS - g_MAIN_context.ledModeUpdateLastTimeInS >= STP_LED_UPDATE_MODE_PERIOD_IN_S))
 800171a:	4b26      	ldr	r3, [pc, #152]	; (80017b4 <main+0x31c>)
 800171c:	699b      	ldr	r3, [r3, #24]
    if ((STP_LED_UPDATE_MODE_PERIOD_IN_S != 0) &&
 800171e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001720:	429a      	cmp	r2, r3
 8001722:	d009      	beq.n	8001738 <main+0x2a0>
    {
      MAIN_updateLedMode (l_driveMode, l_voltageInMv);
 8001724:	683a      	ldr	r2, [r7, #0]
 8001726:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800172a:	4611      	mov	r1, r2
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff fe7f 	bl	8001430 <MAIN_updateLedMode>

      g_MAIN_context.ledModeUpdateLastTimeInS = l_currentTimeInS;
 8001732:	4a20      	ldr	r2, [pc, #128]	; (80017b4 <main+0x31c>)
 8001734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001736:	6193      	str	r3, [r2, #24]
    else
    {
      ; /* Nothing to do */
    }

    BLU_receiveData        (&l_bluetoothData);
 8001738:	1d3b      	adds	r3, r7, #4
 800173a:	4618      	mov	r0, r3
 800173c:	f007 fc9c 	bl	8009078 <BLU_receiveData>
    MAIN_updateLogSetup    (&l_bluetoothData, l_currentTimeInS);
 8001740:	1d3b      	adds	r3, r7, #4
 8001742:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff fdef 	bl	8001328 <MAIN_updateLogSetup>
    DRV_updateFromBluetooth(&l_bluetoothData);
 800174a:	1d3b      	adds	r3, r7, #4
 800174c:	4618      	mov	r0, r3
 800174e:	f007 ff15 	bl	800957c <DRV_updateFromBluetooth>

    CON_updateFifo(&l_commandsFifo);
 8001752:	f107 0318 	add.w	r3, r7, #24
 8001756:	4618      	mov	r0, r3
 8001758:	f007 fe06 	bl	8009368 <CON_updateFifo>
    MAS_updateFifo(&l_commandsFifo);
 800175c:	f107 0318 	add.w	r3, r7, #24
 8001760:	4618      	mov	r0, r3
 8001762:	f009 f8b9 	bl	800a8d8 <MAS_updateFifo>

    if ((STP_DRIVE_LOG_INFO_PERIOD_IN_S != 0) &&
        (l_currentTimeInS - g_MAIN_context.driveLogInfoLastTimeInS >= STP_DRIVE_LOG_INFO_PERIOD_IN_S))
 8001766:	4b13      	ldr	r3, [pc, #76]	; (80017b4 <main+0x31c>)
 8001768:	69db      	ldr	r3, [r3, #28]
 800176a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800176c:	1ad3      	subs	r3, r2, r3
    if ((STP_DRIVE_LOG_INFO_PERIOD_IN_S != 0) &&
 800176e:	2b04      	cmp	r3, #4
 8001770:	d909      	bls.n	8001786 <main+0x2ee>
    {
      DRV_updateFromCommands(&l_commandsFifo, true);
 8001772:	f107 0318 	add.w	r3, r7, #24
 8001776:	2101      	movs	r1, #1
 8001778:	4618      	mov	r0, r3
 800177a:	f008 f859 	bl	8009830 <DRV_updateFromCommands>

      g_MAIN_context.driveLogInfoLastTimeInS = l_currentTimeInS;
 800177e:	4a0d      	ldr	r2, [pc, #52]	; (80017b4 <main+0x31c>)
 8001780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001782:	61d3      	str	r3, [r2, #28]
 8001784:	e005      	b.n	8001792 <main+0x2fa>
    }
    else
    {
      DRV_updateFromCommands(&l_commandsFifo, false);
 8001786:	f107 0318 	add.w	r3, r7, #24
 800178a:	2100      	movs	r1, #0
 800178c:	4618      	mov	r0, r3
 800178e:	f008 f84f 	bl	8009830 <DRV_updateFromCommands>
    }

    if ((STP_VELOCITY_REPORT_PERIOD_IN_S != 0) &&
        (l_currentTimeInS - g_MAIN_context.velocityReportLastTimeInS >= STP_VELOCITY_REPORT_PERIOD_IN_S))
 8001792:	4b08      	ldr	r3, [pc, #32]	; (80017b4 <main+0x31c>)
 8001794:	6a1b      	ldr	r3, [r3, #32]
 8001796:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001798:	1ad3      	subs	r3, r2, r3
    if ((STP_VELOCITY_REPORT_PERIOD_IN_S != 0) &&
 800179a:	2b04      	cmp	r3, #4
 800179c:	d904      	bls.n	80017a8 <main+0x310>
    {
      DRV_reportVelocity();
 800179e:	f008 fa9b 	bl	8009cd8 <DRV_reportVelocity>

      g_MAIN_context.velocityReportLastTimeInS = l_currentTimeInS;
 80017a2:	4a04      	ldr	r2, [pc, #16]	; (80017b4 <main+0x31c>)
 80017a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a6:	6213      	str	r3, [r2, #32]
    else
    {
      ; /* Nothing to do */
    }

    UTI_delayUs(STP_MAIN_LOOP_DELAY_IN_US);
 80017a8:	f242 7010 	movw	r0, #10000	; 0x2710
 80017ac:	f009 fd56 	bl	800b25c <UTI_delayUs>
    l_driveMode = DRV_getMode();
 80017b0:	e794      	b.n	80016dc <main+0x244>
 80017b2:	bf00      	nop
 80017b4:	2000020c 	.word	0x2000020c
 80017b8:	20000a44 	.word	0x20000a44
 80017bc:	20000854 	.word	0x20000854
 80017c0:	20000a48 	.word	0x20000a48
 80017c4:	080100a8 	.word	0x080100a8
 80017c8:	200008c8 	.word	0x200008c8
 80017cc:	200008dc 	.word	0x200008dc
 80017d0:	20000b70 	.word	0x20000b70
 80017d4:	20000990 	.word	0x20000990
 80017d8:	080100b8 	.word	0x080100b8
 80017dc:	080100f4 	.word	0x080100f4
 80017e0:	20000abc 	.word	0x20000abc
 80017e4:	20000770 	.word	0x20000770
 80017e8:	20000608 	.word	0x20000608
 80017ec:	200006bc 	.word	0x200006bc
 80017f0:	08010110 	.word	0x08010110
 80017f4:	0801014c 	.word	0x0801014c
 80017f8:	20000554 	.word	0x20000554
 80017fc:	08010170 	.word	0x08010170
 8001800:	080101a8 	.word	0x080101a8
 8001804:	20000824 	.word	0x20000824
 8001808:	080101c8 	.word	0x080101c8
 800180c:	08010200 	.word	0x08010200

08001810 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b096      	sub	sp, #88	; 0x58
 8001814:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001816:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800181a:	2228      	movs	r2, #40	; 0x28
 800181c:	2100      	movs	r1, #0
 800181e:	4618      	mov	r0, r3
 8001820:	f00a f810 	bl	800b844 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001824:	f107 031c 	add.w	r3, r7, #28
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
 800182c:	605a      	str	r2, [r3, #4]
 800182e:	609a      	str	r2, [r3, #8]
 8001830:	60da      	str	r2, [r3, #12]
 8001832:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001834:	1d3b      	adds	r3, r7, #4
 8001836:	2200      	movs	r2, #0
 8001838:	601a      	str	r2, [r3, #0]
 800183a:	605a      	str	r2, [r3, #4]
 800183c:	609a      	str	r2, [r3, #8]
 800183e:	60da      	str	r2, [r3, #12]
 8001840:	611a      	str	r2, [r3, #16]
 8001842:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001844:	230a      	movs	r3, #10
 8001846:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001848:	2301      	movs	r3, #1
 800184a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800184c:	2310      	movs	r3, #16
 800184e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001850:	2301      	movs	r3, #1
 8001852:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001854:	2300      	movs	r3, #0
 8001856:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001858:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800185c:	4618      	mov	r0, r3
 800185e:	f002 fb81 	bl	8003f64 <HAL_RCC_OscConfig>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8001868:	f000 fce2 	bl	8002230 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800186c:	230f      	movs	r3, #15
 800186e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001870:	2300      	movs	r3, #0
 8001872:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001874:	2300      	movs	r3, #0
 8001876:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001878:	2300      	movs	r3, #0
 800187a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800187c:	2300      	movs	r3, #0
 800187e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001880:	f107 031c 	add.w	r3, r7, #28
 8001884:	2100      	movs	r1, #0
 8001886:	4618      	mov	r0, r3
 8001888:	f002 fedc 	bl	8004644 <HAL_RCC_ClockConfig>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8001892:	f000 fccd 	bl	8002230 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 8001896:	2303      	movs	r3, #3
 8001898:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800189a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800189e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80018a0:	2300      	movs	r3, #0
 80018a2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018a4:	1d3b      	adds	r3, r7, #4
 80018a6:	4618      	mov	r0, r3
 80018a8:	f003 f90c 	bl	8004ac4 <HAL_RCCEx_PeriphCLKConfig>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80018b2:	f000 fcbd 	bl	8002230 <Error_Handler>
  }
}
 80018b6:	bf00      	nop
 80018b8:	3758      	adds	r7, #88	; 0x58
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
	...

080018c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80018c6:	1d3b      	adds	r3, r7, #4
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	605a      	str	r2, [r3, #4]
 80018ce:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80018d0:	4b18      	ldr	r3, [pc, #96]	; (8001934 <MX_ADC1_Init+0x74>)
 80018d2:	4a19      	ldr	r2, [pc, #100]	; (8001938 <MX_ADC1_Init+0x78>)
 80018d4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80018d6:	4b17      	ldr	r3, [pc, #92]	; (8001934 <MX_ADC1_Init+0x74>)
 80018d8:	2200      	movs	r2, #0
 80018da:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80018dc:	4b15      	ldr	r3, [pc, #84]	; (8001934 <MX_ADC1_Init+0x74>)
 80018de:	2200      	movs	r2, #0
 80018e0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80018e2:	4b14      	ldr	r3, [pc, #80]	; (8001934 <MX_ADC1_Init+0x74>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018e8:	4b12      	ldr	r3, [pc, #72]	; (8001934 <MX_ADC1_Init+0x74>)
 80018ea:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80018ee:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018f0:	4b10      	ldr	r3, [pc, #64]	; (8001934 <MX_ADC1_Init+0x74>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80018f6:	4b0f      	ldr	r3, [pc, #60]	; (8001934 <MX_ADC1_Init+0x74>)
 80018f8:	2201      	movs	r2, #1
 80018fa:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80018fc:	480d      	ldr	r0, [pc, #52]	; (8001934 <MX_ADC1_Init+0x74>)
 80018fe:	f001 f9a1 	bl	8002c44 <HAL_ADC_Init>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001908:	f000 fc92 	bl	8002230 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800190c:	2305      	movs	r3, #5
 800190e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001910:	2301      	movs	r3, #1
 8001912:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001914:	2300      	movs	r3, #0
 8001916:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001918:	1d3b      	adds	r3, r7, #4
 800191a:	4619      	mov	r1, r3
 800191c:	4805      	ldr	r0, [pc, #20]	; (8001934 <MX_ADC1_Init+0x74>)
 800191e:	f001 fb5b 	bl	8002fd8 <HAL_ADC_ConfigChannel>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001928:	f000 fc82 	bl	8002230 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800192c:	bf00      	nop
 800192e:	3710      	adds	r7, #16
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	20000824 	.word	0x20000824
 8001938:	40012400 	.word	0x40012400

0800193c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001942:	1d3b      	adds	r3, r7, #4
 8001944:	2100      	movs	r1, #0
 8001946:	460a      	mov	r2, r1
 8001948:	801a      	strh	r2, [r3, #0]
 800194a:	460a      	mov	r2, r1
 800194c:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 800194e:	2300      	movs	r3, #0
 8001950:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001952:	4b1d      	ldr	r3, [pc, #116]	; (80019c8 <MX_RTC_Init+0x8c>)
 8001954:	4a1d      	ldr	r2, [pc, #116]	; (80019cc <MX_RTC_Init+0x90>)
 8001956:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8001958:	4b1b      	ldr	r3, [pc, #108]	; (80019c8 <MX_RTC_Init+0x8c>)
 800195a:	f04f 32ff 	mov.w	r2, #4294967295
 800195e:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 8001960:	4b19      	ldr	r3, [pc, #100]	; (80019c8 <MX_RTC_Init+0x8c>)
 8001962:	2200      	movs	r2, #0
 8001964:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001966:	4818      	ldr	r0, [pc, #96]	; (80019c8 <MX_RTC_Init+0x8c>)
 8001968:	f003 fac8 	bl	8004efc <HAL_RTC_Init>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <MX_RTC_Init+0x3a>
  {
    Error_Handler();
 8001972:	f000 fc5d 	bl	8002230 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001976:	2300      	movs	r3, #0
 8001978:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800197a:	2300      	movs	r3, #0
 800197c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800197e:	2300      	movs	r3, #0
 8001980:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001982:	1d3b      	adds	r3, r7, #4
 8001984:	2201      	movs	r2, #1
 8001986:	4619      	mov	r1, r3
 8001988:	480f      	ldr	r0, [pc, #60]	; (80019c8 <MX_RTC_Init+0x8c>)
 800198a:	f003 fb81 	bl	8005090 <HAL_RTC_SetTime>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <MX_RTC_Init+0x5c>
  {
    Error_Handler();
 8001994:	f000 fc4c 	bl	8002230 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001998:	2301      	movs	r3, #1
 800199a:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 800199c:	2301      	movs	r3, #1
 800199e:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 80019a0:	2301      	movs	r3, #1
 80019a2:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 80019a4:	2300      	movs	r3, #0
 80019a6:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 80019a8:	463b      	mov	r3, r7
 80019aa:	2201      	movs	r2, #1
 80019ac:	4619      	mov	r1, r3
 80019ae:	4806      	ldr	r0, [pc, #24]	; (80019c8 <MX_RTC_Init+0x8c>)
 80019b0:	f003 fd3a 	bl	8005428 <HAL_RTC_SetDate>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <MX_RTC_Init+0x82>
  {
    Error_Handler();
 80019ba:	f000 fc39 	bl	8002230 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80019be:	bf00      	nop
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	200008c8 	.word	0x200008c8
 80019cc:	40002800 	.word	0x40002800

080019d0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b086      	sub	sp, #24
 80019d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019d6:	f107 0308 	add.w	r3, r7, #8
 80019da:	2200      	movs	r2, #0
 80019dc:	601a      	str	r2, [r3, #0]
 80019de:	605a      	str	r2, [r3, #4]
 80019e0:	609a      	str	r2, [r3, #8]
 80019e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019e4:	463b      	mov	r3, r7
 80019e6:	2200      	movs	r2, #0
 80019e8:	601a      	str	r2, [r3, #0]
 80019ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80019ec:	4b1e      	ldr	r3, [pc, #120]	; (8001a68 <MX_TIM1_Init+0x98>)
 80019ee:	4a1f      	ldr	r2, [pc, #124]	; (8001a6c <MX_TIM1_Init+0x9c>)
 80019f0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7999;
 80019f2:	4b1d      	ldr	r3, [pc, #116]	; (8001a68 <MX_TIM1_Init+0x98>)
 80019f4:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80019f8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019fa:	4b1b      	ldr	r3, [pc, #108]	; (8001a68 <MX_TIM1_Init+0x98>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 249;
 8001a00:	4b19      	ldr	r3, [pc, #100]	; (8001a68 <MX_TIM1_Init+0x98>)
 8001a02:	22f9      	movs	r2, #249	; 0xf9
 8001a04:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a06:	4b18      	ldr	r3, [pc, #96]	; (8001a68 <MX_TIM1_Init+0x98>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a0c:	4b16      	ldr	r3, [pc, #88]	; (8001a68 <MX_TIM1_Init+0x98>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a12:	4b15      	ldr	r3, [pc, #84]	; (8001a68 <MX_TIM1_Init+0x98>)
 8001a14:	2280      	movs	r2, #128	; 0x80
 8001a16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a18:	4813      	ldr	r0, [pc, #76]	; (8001a68 <MX_TIM1_Init+0x98>)
 8001a1a:	f004 f927 	bl	8005c6c <HAL_TIM_Base_Init>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001a24:	f000 fc04 	bl	8002230 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a2c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a2e:	f107 0308 	add.w	r3, r7, #8
 8001a32:	4619      	mov	r1, r3
 8001a34:	480c      	ldr	r0, [pc, #48]	; (8001a68 <MX_TIM1_Init+0x98>)
 8001a36:	f005 fa51 	bl	8006edc <HAL_TIM_ConfigClockSource>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001a40:	f000 fbf6 	bl	8002230 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a44:	2300      	movs	r3, #0
 8001a46:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a4c:	463b      	mov	r3, r7
 8001a4e:	4619      	mov	r1, r3
 8001a50:	4805      	ldr	r0, [pc, #20]	; (8001a68 <MX_TIM1_Init+0x98>)
 8001a52:	f006 f99f 	bl	8007d94 <HAL_TIMEx_MasterConfigSynchronization>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001a5c:	f000 fbe8 	bl	8002230 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001a60:	bf00      	nop
 8001a62:	3718      	adds	r7, #24
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	20000990 	.word	0x20000990
 8001a6c:	40012c00 	.word	0x40012c00

08001a70 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b08c      	sub	sp, #48	; 0x30
 8001a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a76:	f107 030c 	add.w	r3, r7, #12
 8001a7a:	2224      	movs	r2, #36	; 0x24
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f009 fee0 	bl	800b844 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a84:	1d3b      	adds	r3, r7, #4
 8001a86:	2200      	movs	r2, #0
 8001a88:	601a      	str	r2, [r3, #0]
 8001a8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a8c:	4b21      	ldr	r3, [pc, #132]	; (8001b14 <MX_TIM2_Init+0xa4>)
 8001a8e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a92:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001a94:	4b1f      	ldr	r3, [pc, #124]	; (8001b14 <MX_TIM2_Init+0xa4>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a9a:	4b1e      	ldr	r3, [pc, #120]	; (8001b14 <MX_TIM2_Init+0xa4>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001aa0:	4b1c      	ldr	r3, [pc, #112]	; (8001b14 <MX_TIM2_Init+0xa4>)
 8001aa2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001aa6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aa8:	4b1a      	ldr	r3, [pc, #104]	; (8001b14 <MX_TIM2_Init+0xa4>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001aae:	4b19      	ldr	r3, [pc, #100]	; (8001b14 <MX_TIM2_Init+0xa4>)
 8001ab0:	2280      	movs	r2, #128	; 0x80
 8001ab2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001abc:	2301      	movs	r3, #1
 8001abe:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001ac4:	230a      	movs	r3, #10
 8001ac6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001acc:	2301      	movs	r3, #1
 8001ace:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001ad8:	f107 030c 	add.w	r3, r7, #12
 8001adc:	4619      	mov	r1, r3
 8001ade:	480d      	ldr	r0, [pc, #52]	; (8001b14 <MX_TIM2_Init+0xa4>)
 8001ae0:	f004 fcb6 	bl	8006450 <HAL_TIM_Encoder_Init>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001aea:	f000 fba1 	bl	8002230 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aee:	2300      	movs	r3, #0
 8001af0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001af2:	2300      	movs	r3, #0
 8001af4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001af6:	1d3b      	adds	r3, r7, #4
 8001af8:	4619      	mov	r1, r3
 8001afa:	4806      	ldr	r0, [pc, #24]	; (8001b14 <MX_TIM2_Init+0xa4>)
 8001afc:	f006 f94a 	bl	8007d94 <HAL_TIMEx_MasterConfigSynchronization>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001b06:	f000 fb93 	bl	8002230 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b0a:	bf00      	nop
 8001b0c:	3730      	adds	r7, #48	; 0x30
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	20000abc 	.word	0x20000abc

08001b18 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b08c      	sub	sp, #48	; 0x30
 8001b1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b1e:	f107 030c 	add.w	r3, r7, #12
 8001b22:	2224      	movs	r2, #36	; 0x24
 8001b24:	2100      	movs	r1, #0
 8001b26:	4618      	mov	r0, r3
 8001b28:	f009 fe8c 	bl	800b844 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b2c:	1d3b      	adds	r3, r7, #4
 8001b2e:	2200      	movs	r2, #0
 8001b30:	601a      	str	r2, [r3, #0]
 8001b32:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b34:	4b20      	ldr	r3, [pc, #128]	; (8001bb8 <MX_TIM3_Init+0xa0>)
 8001b36:	4a21      	ldr	r2, [pc, #132]	; (8001bbc <MX_TIM3_Init+0xa4>)
 8001b38:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001b3a:	4b1f      	ldr	r3, [pc, #124]	; (8001bb8 <MX_TIM3_Init+0xa0>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b40:	4b1d      	ldr	r3, [pc, #116]	; (8001bb8 <MX_TIM3_Init+0xa0>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001b46:	4b1c      	ldr	r3, [pc, #112]	; (8001bb8 <MX_TIM3_Init+0xa0>)
 8001b48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b4c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b4e:	4b1a      	ldr	r3, [pc, #104]	; (8001bb8 <MX_TIM3_Init+0xa0>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b54:	4b18      	ldr	r3, [pc, #96]	; (8001bb8 <MX_TIM3_Init+0xa0>)
 8001b56:	2280      	movs	r2, #128	; 0x80
 8001b58:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b62:	2301      	movs	r3, #1
 8001b64:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b66:	2300      	movs	r3, #0
 8001b68:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001b6a:	230a      	movs	r3, #10
 8001b6c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b72:	2301      	movs	r3, #1
 8001b74:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b76:	2300      	movs	r3, #0
 8001b78:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001b7e:	f107 030c 	add.w	r3, r7, #12
 8001b82:	4619      	mov	r1, r3
 8001b84:	480c      	ldr	r0, [pc, #48]	; (8001bb8 <MX_TIM3_Init+0xa0>)
 8001b86:	f004 fc63 	bl	8006450 <HAL_TIM_Encoder_Init>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001b90:	f000 fb4e 	bl	8002230 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b94:	2300      	movs	r3, #0
 8001b96:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b9c:	1d3b      	adds	r3, r7, #4
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4805      	ldr	r0, [pc, #20]	; (8001bb8 <MX_TIM3_Init+0xa0>)
 8001ba2:	f006 f8f7 	bl	8007d94 <HAL_TIMEx_MasterConfigSynchronization>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001bac:	f000 fb40 	bl	8002230 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001bb0:	bf00      	nop
 8001bb2:	3730      	adds	r7, #48	; 0x30
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	20000770 	.word	0x20000770
 8001bbc:	40000400 	.word	0x40000400

08001bc0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b08c      	sub	sp, #48	; 0x30
 8001bc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001bc6:	f107 030c 	add.w	r3, r7, #12
 8001bca:	2224      	movs	r2, #36	; 0x24
 8001bcc:	2100      	movs	r1, #0
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f009 fe38 	bl	800b844 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bd4:	1d3b      	adds	r3, r7, #4
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	601a      	str	r2, [r3, #0]
 8001bda:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001bdc:	4b20      	ldr	r3, [pc, #128]	; (8001c60 <MX_TIM4_Init+0xa0>)
 8001bde:	4a21      	ldr	r2, [pc, #132]	; (8001c64 <MX_TIM4_Init+0xa4>)
 8001be0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001be2:	4b1f      	ldr	r3, [pc, #124]	; (8001c60 <MX_TIM4_Init+0xa0>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001be8:	4b1d      	ldr	r3, [pc, #116]	; (8001c60 <MX_TIM4_Init+0xa0>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001bee:	4b1c      	ldr	r3, [pc, #112]	; (8001c60 <MX_TIM4_Init+0xa0>)
 8001bf0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bf4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bf6:	4b1a      	ldr	r3, [pc, #104]	; (8001c60 <MX_TIM4_Init+0xa0>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001bfc:	4b18      	ldr	r3, [pc, #96]	; (8001c60 <MX_TIM4_Init+0xa0>)
 8001bfe:	2280      	movs	r2, #128	; 0x80
 8001c00:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001c02:	2303      	movs	r3, #3
 8001c04:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c06:	2300      	movs	r3, #0
 8001c08:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001c12:	230a      	movs	r3, #10
 8001c14:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c16:	2300      	movs	r3, #0
 8001c18:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001c22:	2300      	movs	r3, #0
 8001c24:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001c26:	f107 030c 	add.w	r3, r7, #12
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	480c      	ldr	r0, [pc, #48]	; (8001c60 <MX_TIM4_Init+0xa0>)
 8001c2e:	f004 fc0f 	bl	8006450 <HAL_TIM_Encoder_Init>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001c38:	f000 fafa 	bl	8002230 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c40:	2300      	movs	r3, #0
 8001c42:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001c44:	1d3b      	adds	r3, r7, #4
 8001c46:	4619      	mov	r1, r3
 8001c48:	4805      	ldr	r0, [pc, #20]	; (8001c60 <MX_TIM4_Init+0xa0>)
 8001c4a:	f006 f8a3 	bl	8007d94 <HAL_TIMEx_MasterConfigSynchronization>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001c54:	f000 faec 	bl	8002230 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001c58:	bf00      	nop
 8001c5a:	3730      	adds	r7, #48	; 0x30
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	20000608 	.word	0x20000608
 8001c64:	40000800 	.word	0x40000800

08001c68 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b08c      	sub	sp, #48	; 0x30
 8001c6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c6e:	f107 030c 	add.w	r3, r7, #12
 8001c72:	2224      	movs	r2, #36	; 0x24
 8001c74:	2100      	movs	r1, #0
 8001c76:	4618      	mov	r0, r3
 8001c78:	f009 fde4 	bl	800b844 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c7c:	1d3b      	adds	r3, r7, #4
 8001c7e:	2200      	movs	r2, #0
 8001c80:	601a      	str	r2, [r3, #0]
 8001c82:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001c84:	4b20      	ldr	r3, [pc, #128]	; (8001d08 <MX_TIM5_Init+0xa0>)
 8001c86:	4a21      	ldr	r2, [pc, #132]	; (8001d0c <MX_TIM5_Init+0xa4>)
 8001c88:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001c8a:	4b1f      	ldr	r3, [pc, #124]	; (8001d08 <MX_TIM5_Init+0xa0>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c90:	4b1d      	ldr	r3, [pc, #116]	; (8001d08 <MX_TIM5_Init+0xa0>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8001c96:	4b1c      	ldr	r3, [pc, #112]	; (8001d08 <MX_TIM5_Init+0xa0>)
 8001c98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c9c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c9e:	4b1a      	ldr	r3, [pc, #104]	; (8001d08 <MX_TIM5_Init+0xa0>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ca4:	4b18      	ldr	r3, [pc, #96]	; (8001d08 <MX_TIM5_Init+0xa0>)
 8001ca6:	2280      	movs	r2, #128	; 0x80
 8001ca8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001caa:	2303      	movs	r3, #3
 8001cac:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001cba:	230a      	movs	r3, #10
 8001cbc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001cce:	f107 030c 	add.w	r3, r7, #12
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	480c      	ldr	r0, [pc, #48]	; (8001d08 <MX_TIM5_Init+0xa0>)
 8001cd6:	f004 fbbb 	bl	8006450 <HAL_TIM_Encoder_Init>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001ce0:	f000 faa6 	bl	8002230 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001cec:	1d3b      	adds	r3, r7, #4
 8001cee:	4619      	mov	r1, r3
 8001cf0:	4805      	ldr	r0, [pc, #20]	; (8001d08 <MX_TIM5_Init+0xa0>)
 8001cf2:	f006 f84f 	bl	8007d94 <HAL_TIMEx_MasterConfigSynchronization>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d001      	beq.n	8001d00 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001cfc:	f000 fa98 	bl	8002230 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001d00:	bf00      	nop
 8001d02:	3730      	adds	r7, #48	; 0x30
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	200006bc 	.word	0x200006bc
 8001d0c:	40000c00 	.word	0x40000c00

08001d10 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d16:	463b      	mov	r3, r7
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001d1e:	4b15      	ldr	r3, [pc, #84]	; (8001d74 <MX_TIM6_Init+0x64>)
 8001d20:	4a15      	ldr	r2, [pc, #84]	; (8001d78 <MX_TIM6_Init+0x68>)
 8001d22:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7;
 8001d24:	4b13      	ldr	r3, [pc, #76]	; (8001d74 <MX_TIM6_Init+0x64>)
 8001d26:	2207      	movs	r2, #7
 8001d28:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d2a:	4b12      	ldr	r3, [pc, #72]	; (8001d74 <MX_TIM6_Init+0x64>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001d30:	4b10      	ldr	r3, [pc, #64]	; (8001d74 <MX_TIM6_Init+0x64>)
 8001d32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d36:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d38:	4b0e      	ldr	r3, [pc, #56]	; (8001d74 <MX_TIM6_Init+0x64>)
 8001d3a:	2280      	movs	r2, #128	; 0x80
 8001d3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001d3e:	480d      	ldr	r0, [pc, #52]	; (8001d74 <MX_TIM6_Init+0x64>)
 8001d40:	f003 ff94 	bl	8005c6c <HAL_TIM_Base_Init>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001d4a:	f000 fa71 	bl	8002230 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d52:	2300      	movs	r3, #0
 8001d54:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001d56:	463b      	mov	r3, r7
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4806      	ldr	r0, [pc, #24]	; (8001d74 <MX_TIM6_Init+0x64>)
 8001d5c:	f006 f81a 	bl	8007d94 <HAL_TIMEx_MasterConfigSynchronization>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001d66:	f000 fa63 	bl	8002230 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001d6a:	bf00      	nop
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	200008dc 	.word	0x200008dc
 8001d78:	40001000 	.word	0x40001000

08001d7c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d82:	463b      	mov	r3, r7
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]
 8001d88:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001d8a:	4b15      	ldr	r3, [pc, #84]	; (8001de0 <MX_TIM7_Init+0x64>)
 8001d8c:	4a15      	ldr	r2, [pc, #84]	; (8001de4 <MX_TIM7_Init+0x68>)
 8001d8e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7;
 8001d90:	4b13      	ldr	r3, [pc, #76]	; (8001de0 <MX_TIM7_Init+0x64>)
 8001d92:	2207      	movs	r2, #7
 8001d94:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d96:	4b12      	ldr	r3, [pc, #72]	; (8001de0 <MX_TIM7_Init+0x64>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8001d9c:	4b10      	ldr	r3, [pc, #64]	; (8001de0 <MX_TIM7_Init+0x64>)
 8001d9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001da2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001da4:	4b0e      	ldr	r3, [pc, #56]	; (8001de0 <MX_TIM7_Init+0x64>)
 8001da6:	2280      	movs	r2, #128	; 0x80
 8001da8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001daa:	480d      	ldr	r0, [pc, #52]	; (8001de0 <MX_TIM7_Init+0x64>)
 8001dac:	f003 ff5e 	bl	8005c6c <HAL_TIM_Base_Init>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001db6:	f000 fa3b 	bl	8002230 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001dc2:	463b      	mov	r3, r7
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	4806      	ldr	r0, [pc, #24]	; (8001de0 <MX_TIM7_Init+0x64>)
 8001dc8:	f005 ffe4 	bl	8007d94 <HAL_TIMEx_MasterConfigSynchronization>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001dd2:	f000 fa2d 	bl	8002230 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001dd6:	bf00      	nop
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	20000b70 	.word	0x20000b70
 8001de4:	40001400 	.word	0x40001400

08001de8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b096      	sub	sp, #88	; 0x58
 8001dec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001df2:	2200      	movs	r2, #0
 8001df4:	601a      	str	r2, [r3, #0]
 8001df6:	605a      	str	r2, [r3, #4]
 8001df8:	609a      	str	r2, [r3, #8]
 8001dfa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dfc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e00:	2200      	movs	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]
 8001e04:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	601a      	str	r2, [r3, #0]
 8001e0e:	605a      	str	r2, [r3, #4]
 8001e10:	609a      	str	r2, [r3, #8]
 8001e12:	60da      	str	r2, [r3, #12]
 8001e14:	611a      	str	r2, [r3, #16]
 8001e16:	615a      	str	r2, [r3, #20]
 8001e18:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e1a:	1d3b      	adds	r3, r7, #4
 8001e1c:	2220      	movs	r2, #32
 8001e1e:	2100      	movs	r1, #0
 8001e20:	4618      	mov	r0, r3
 8001e22:	f009 fd0f 	bl	800b844 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001e26:	4b50      	ldr	r3, [pc, #320]	; (8001f68 <MX_TIM8_Init+0x180>)
 8001e28:	4a50      	ldr	r2, [pc, #320]	; (8001f6c <MX_TIM8_Init+0x184>)
 8001e2a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 7;
 8001e2c:	4b4e      	ldr	r3, [pc, #312]	; (8001f68 <MX_TIM8_Init+0x180>)
 8001e2e:	2207      	movs	r2, #7
 8001e30:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e32:	4b4d      	ldr	r3, [pc, #308]	; (8001f68 <MX_TIM8_Init+0x180>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 100;
 8001e38:	4b4b      	ldr	r3, [pc, #300]	; (8001f68 <MX_TIM8_Init+0x180>)
 8001e3a:	2264      	movs	r2, #100	; 0x64
 8001e3c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e3e:	4b4a      	ldr	r3, [pc, #296]	; (8001f68 <MX_TIM8_Init+0x180>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001e44:	4b48      	ldr	r3, [pc, #288]	; (8001f68 <MX_TIM8_Init+0x180>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e4a:	4b47      	ldr	r3, [pc, #284]	; (8001f68 <MX_TIM8_Init+0x180>)
 8001e4c:	2280      	movs	r2, #128	; 0x80
 8001e4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001e50:	4845      	ldr	r0, [pc, #276]	; (8001f68 <MX_TIM8_Init+0x180>)
 8001e52:	f003 ff0b 	bl	8005c6c <HAL_TIM_Base_Init>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8001e5c:	f000 f9e8 	bl	8002230 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e64:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001e66:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	483e      	ldr	r0, [pc, #248]	; (8001f68 <MX_TIM8_Init+0x180>)
 8001e6e:	f005 f835 	bl	8006edc <HAL_TIM_ConfigClockSource>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8001e78:	f000 f9da 	bl	8002230 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001e7c:	483a      	ldr	r0, [pc, #232]	; (8001f68 <MX_TIM8_Init+0x180>)
 8001e7e:	f004 f8e3 	bl	8006048 <HAL_TIM_PWM_Init>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001e88:	f000 f9d2 	bl	8002230 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e90:	2300      	movs	r3, #0
 8001e92:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001e94:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e98:	4619      	mov	r1, r3
 8001e9a:	4833      	ldr	r0, [pc, #204]	; (8001f68 <MX_TIM8_Init+0x180>)
 8001e9c:	f005 ff7a 	bl	8007d94 <HAL_TIMEx_MasterConfigSynchronization>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 8001ea6:	f000 f9c3 	bl	8002230 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001eaa:	2360      	movs	r3, #96	; 0x60
 8001eac:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ec6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eca:	2200      	movs	r2, #0
 8001ecc:	4619      	mov	r1, r3
 8001ece:	4826      	ldr	r0, [pc, #152]	; (8001f68 <MX_TIM8_Init+0x180>)
 8001ed0:	f004 fe66 	bl	8006ba0 <HAL_TIM_PWM_ConfigChannel>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 8001eda:	f000 f9a9 	bl	8002230 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ede:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ee2:	2204      	movs	r2, #4
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	4820      	ldr	r0, [pc, #128]	; (8001f68 <MX_TIM8_Init+0x180>)
 8001ee8:	f004 fe5a 	bl	8006ba0 <HAL_TIM_PWM_ConfigChannel>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <MX_TIM8_Init+0x10e>
  {
    Error_Handler();
 8001ef2:	f000 f99d 	bl	8002230 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ef6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001efa:	2208      	movs	r2, #8
 8001efc:	4619      	mov	r1, r3
 8001efe:	481a      	ldr	r0, [pc, #104]	; (8001f68 <MX_TIM8_Init+0x180>)
 8001f00:	f004 fe4e 	bl	8006ba0 <HAL_TIM_PWM_ConfigChannel>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <MX_TIM8_Init+0x126>
  {
    Error_Handler();
 8001f0a:	f000 f991 	bl	8002230 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001f0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f12:	220c      	movs	r2, #12
 8001f14:	4619      	mov	r1, r3
 8001f16:	4814      	ldr	r0, [pc, #80]	; (8001f68 <MX_TIM8_Init+0x180>)
 8001f18:	f004 fe42 	bl	8006ba0 <HAL_TIM_PWM_ConfigChannel>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <MX_TIM8_Init+0x13e>
  {
    Error_Handler();
 8001f22:	f000 f985 	bl	8002230 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f26:	2300      	movs	r3, #0
 8001f28:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001f32:	2300      	movs	r3, #0
 8001f34:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f36:	2300      	movs	r3, #0
 8001f38:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f3e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f40:	2300      	movs	r3, #0
 8001f42:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001f44:	1d3b      	adds	r3, r7, #4
 8001f46:	4619      	mov	r1, r3
 8001f48:	4807      	ldr	r0, [pc, #28]	; (8001f68 <MX_TIM8_Init+0x180>)
 8001f4a:	f005 fff3 	bl	8007f34 <HAL_TIMEx_ConfigBreakDeadTime>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <MX_TIM8_Init+0x170>
  {
    Error_Handler();
 8001f54:	f000 f96c 	bl	8002230 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001f58:	4803      	ldr	r0, [pc, #12]	; (8001f68 <MX_TIM8_Init+0x180>)
 8001f5a:	f000 fb8b 	bl	8002674 <HAL_TIM_MspPostInit>

}
 8001f5e:	bf00      	nop
 8001f60:	3758      	adds	r7, #88	; 0x58
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	20000554 	.word	0x20000554
 8001f6c:	40013400 	.word	0x40013400

08001f70 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001f74:	4b11      	ldr	r3, [pc, #68]	; (8001fbc <MX_UART4_Init+0x4c>)
 8001f76:	4a12      	ldr	r2, [pc, #72]	; (8001fc0 <MX_UART4_Init+0x50>)
 8001f78:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001f7a:	4b10      	ldr	r3, [pc, #64]	; (8001fbc <MX_UART4_Init+0x4c>)
 8001f7c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001f80:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001f82:	4b0e      	ldr	r3, [pc, #56]	; (8001fbc <MX_UART4_Init+0x4c>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001f88:	4b0c      	ldr	r3, [pc, #48]	; (8001fbc <MX_UART4_Init+0x4c>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001f8e:	4b0b      	ldr	r3, [pc, #44]	; (8001fbc <MX_UART4_Init+0x4c>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001f94:	4b09      	ldr	r3, [pc, #36]	; (8001fbc <MX_UART4_Init+0x4c>)
 8001f96:	220c      	movs	r2, #12
 8001f98:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f9a:	4b08      	ldr	r3, [pc, #32]	; (8001fbc <MX_UART4_Init+0x4c>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fa0:	4b06      	ldr	r3, [pc, #24]	; (8001fbc <MX_UART4_Init+0x4c>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001fa6:	4805      	ldr	r0, [pc, #20]	; (8001fbc <MX_UART4_Init+0x4c>)
 8001fa8:	f006 f8ac 	bl	8008104 <HAL_UART_Init>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001fb2:	f000 f93d 	bl	8002230 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001fb6:	bf00      	nop
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	20000a48 	.word	0x20000a48
 8001fc0:	40004c00 	.word	0x40004c00

08001fc4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001fc8:	4b11      	ldr	r3, [pc, #68]	; (8002010 <MX_USART1_UART_Init+0x4c>)
 8001fca:	4a12      	ldr	r2, [pc, #72]	; (8002014 <MX_USART1_UART_Init+0x50>)
 8001fcc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001fce:	4b10      	ldr	r3, [pc, #64]	; (8002010 <MX_USART1_UART_Init+0x4c>)
 8001fd0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fd4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001fd6:	4b0e      	ldr	r3, [pc, #56]	; (8002010 <MX_USART1_UART_Init+0x4c>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001fdc:	4b0c      	ldr	r3, [pc, #48]	; (8002010 <MX_USART1_UART_Init+0x4c>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001fe2:	4b0b      	ldr	r3, [pc, #44]	; (8002010 <MX_USART1_UART_Init+0x4c>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001fe8:	4b09      	ldr	r3, [pc, #36]	; (8002010 <MX_USART1_UART_Init+0x4c>)
 8001fea:	220c      	movs	r2, #12
 8001fec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fee:	4b08      	ldr	r3, [pc, #32]	; (8002010 <MX_USART1_UART_Init+0x4c>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ff4:	4b06      	ldr	r3, [pc, #24]	; (8002010 <MX_USART1_UART_Init+0x4c>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ffa:	4805      	ldr	r0, [pc, #20]	; (8002010 <MX_USART1_UART_Init+0x4c>)
 8001ffc:	f006 f882 	bl	8008104 <HAL_UART_Init>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002006:	f000 f913 	bl	8002230 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800200a:	bf00      	nop
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	20000854 	.word	0x20000854
 8002014:	40013800 	.word	0x40013800

08002018 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b088      	sub	sp, #32
 800201c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800201e:	f107 0310 	add.w	r3, r7, #16
 8002022:	2200      	movs	r2, #0
 8002024:	601a      	str	r2, [r3, #0]
 8002026:	605a      	str	r2, [r3, #4]
 8002028:	609a      	str	r2, [r3, #8]
 800202a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800202c:	4b4e      	ldr	r3, [pc, #312]	; (8002168 <MX_GPIO_Init+0x150>)
 800202e:	699b      	ldr	r3, [r3, #24]
 8002030:	4a4d      	ldr	r2, [pc, #308]	; (8002168 <MX_GPIO_Init+0x150>)
 8002032:	f043 0310 	orr.w	r3, r3, #16
 8002036:	6193      	str	r3, [r2, #24]
 8002038:	4b4b      	ldr	r3, [pc, #300]	; (8002168 <MX_GPIO_Init+0x150>)
 800203a:	699b      	ldr	r3, [r3, #24]
 800203c:	f003 0310 	and.w	r3, r3, #16
 8002040:	60fb      	str	r3, [r7, #12]
 8002042:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002044:	4b48      	ldr	r3, [pc, #288]	; (8002168 <MX_GPIO_Init+0x150>)
 8002046:	699b      	ldr	r3, [r3, #24]
 8002048:	4a47      	ldr	r2, [pc, #284]	; (8002168 <MX_GPIO_Init+0x150>)
 800204a:	f043 0304 	orr.w	r3, r3, #4
 800204e:	6193      	str	r3, [r2, #24]
 8002050:	4b45      	ldr	r3, [pc, #276]	; (8002168 <MX_GPIO_Init+0x150>)
 8002052:	699b      	ldr	r3, [r3, #24]
 8002054:	f003 0304 	and.w	r3, r3, #4
 8002058:	60bb      	str	r3, [r7, #8]
 800205a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800205c:	4b42      	ldr	r3, [pc, #264]	; (8002168 <MX_GPIO_Init+0x150>)
 800205e:	699b      	ldr	r3, [r3, #24]
 8002060:	4a41      	ldr	r2, [pc, #260]	; (8002168 <MX_GPIO_Init+0x150>)
 8002062:	f043 0308 	orr.w	r3, r3, #8
 8002066:	6193      	str	r3, [r2, #24]
 8002068:	4b3f      	ldr	r3, [pc, #252]	; (8002168 <MX_GPIO_Init+0x150>)
 800206a:	699b      	ldr	r3, [r3, #24]
 800206c:	f003 0308 	and.w	r3, r3, #8
 8002070:	607b      	str	r3, [r7, #4]
 8002072:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002074:	4b3c      	ldr	r3, [pc, #240]	; (8002168 <MX_GPIO_Init+0x150>)
 8002076:	699b      	ldr	r3, [r3, #24]
 8002078:	4a3b      	ldr	r2, [pc, #236]	; (8002168 <MX_GPIO_Init+0x150>)
 800207a:	f043 0320 	orr.w	r3, r3, #32
 800207e:	6193      	str	r3, [r2, #24]
 8002080:	4b39      	ldr	r3, [pc, #228]	; (8002168 <MX_GPIO_Init+0x150>)
 8002082:	699b      	ldr	r3, [r3, #24]
 8002084:	f003 0320 	and.w	r3, r3, #32
 8002088:	603b      	str	r3, [r7, #0]
 800208a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BLUE_LED_Pin|BLUETOOTH_SPI_CMD_Pin|BLUETOOTH_SPI_CS_Pin|MOTOR_REAR_LEFT_OUT_1_Pin
 800208c:	2200      	movs	r2, #0
 800208e:	f243 013a 	movw	r1, #12346	; 0x303a
 8002092:	4836      	ldr	r0, [pc, #216]	; (800216c <MX_GPIO_Init+0x154>)
 8002094:	f001 ff00 	bl	8003e98 <HAL_GPIO_WritePin>
                          |MOTOR_REAR_LEFT_OUT_2_Pin|MOTOR_FRONT_RIGHT_OUT_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLUETOOTH_SPI_CLK_GPIO_Port, BLUETOOTH_SPI_CLK_Pin, GPIO_PIN_RESET);
 8002098:	2200      	movs	r2, #0
 800209a:	2110      	movs	r1, #16
 800209c:	4834      	ldr	r0, [pc, #208]	; (8002170 <MX_GPIO_Init+0x158>)
 800209e:	f001 fefb 	bl	8003e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR_REAR_RIGHT_OUT_1_Pin|MOTOR_REAR_RIGHT_OUT_2_Pin|MOTOR_FRONT_LEFT_OUT_2_Pin|MOTOR_FRONT_LEFT_OUT_1_Pin, GPIO_PIN_RESET);
 80020a2:	2200      	movs	r2, #0
 80020a4:	2133      	movs	r1, #51	; 0x33
 80020a6:	4833      	ldr	r0, [pc, #204]	; (8002174 <MX_GPIO_Init+0x15c>)
 80020a8:	f001 fef6 	bl	8003e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_FRONT_RIGHT_OUT_1_GPIO_Port, MOTOR_FRONT_RIGHT_OUT_1_Pin, GPIO_PIN_RESET);
 80020ac:	2200      	movs	r2, #0
 80020ae:	2104      	movs	r1, #4
 80020b0:	4831      	ldr	r0, [pc, #196]	; (8002178 <MX_GPIO_Init+0x160>)
 80020b2:	f001 fef1 	bl	8003e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_LED_Pin */
  GPIO_InitStruct.Pin = BLUE_LED_Pin;
 80020b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020bc:	2301      	movs	r3, #1
 80020be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c0:	2300      	movs	r3, #0
 80020c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c4:	2302      	movs	r3, #2
 80020c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLUE_LED_GPIO_Port, &GPIO_InitStruct);
 80020c8:	f107 0310 	add.w	r3, r7, #16
 80020cc:	4619      	mov	r1, r3
 80020ce:	4827      	ldr	r0, [pc, #156]	; (800216c <MX_GPIO_Init+0x154>)
 80020d0:	f001 fc28 	bl	8003924 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_RESET_Pin BLUETOOTH_SPI_DAT_Pin */
  GPIO_InitStruct.Pin = SW_RESET_Pin|BLUETOOTH_SPI_DAT_Pin;
 80020d4:	2305      	movs	r3, #5
 80020d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020d8:	2300      	movs	r3, #0
 80020da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020dc:	2300      	movs	r3, #0
 80020de:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020e0:	f107 0310 	add.w	r3, r7, #16
 80020e4:	4619      	mov	r1, r3
 80020e6:	4821      	ldr	r0, [pc, #132]	; (800216c <MX_GPIO_Init+0x154>)
 80020e8:	f001 fc1c 	bl	8003924 <HAL_GPIO_Init>

  /*Configure GPIO pins : BLUETOOTH_SPI_CMD_Pin BLUETOOTH_SPI_CS_Pin MOTOR_REAR_LEFT_OUT_1_Pin MOTOR_REAR_LEFT_OUT_2_Pin
                           MOTOR_FRONT_RIGHT_OUT_2_Pin */
  GPIO_InitStruct.Pin = BLUETOOTH_SPI_CMD_Pin|BLUETOOTH_SPI_CS_Pin|MOTOR_REAR_LEFT_OUT_1_Pin|MOTOR_REAR_LEFT_OUT_2_Pin
 80020ec:	f241 033a 	movw	r3, #4154	; 0x103a
 80020f0:	613b      	str	r3, [r7, #16]
                          |MOTOR_FRONT_RIGHT_OUT_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020f2:	2301      	movs	r3, #1
 80020f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f6:	2300      	movs	r3, #0
 80020f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020fa:	2303      	movs	r3, #3
 80020fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020fe:	f107 0310 	add.w	r3, r7, #16
 8002102:	4619      	mov	r1, r3
 8002104:	4819      	ldr	r0, [pc, #100]	; (800216c <MX_GPIO_Init+0x154>)
 8002106:	f001 fc0d 	bl	8003924 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUETOOTH_SPI_CLK_Pin */
  GPIO_InitStruct.Pin = BLUETOOTH_SPI_CLK_Pin;
 800210a:	2310      	movs	r3, #16
 800210c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800210e:	2301      	movs	r3, #1
 8002110:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002112:	2300      	movs	r3, #0
 8002114:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002116:	2303      	movs	r3, #3
 8002118:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLUETOOTH_SPI_CLK_GPIO_Port, &GPIO_InitStruct);
 800211a:	f107 0310 	add.w	r3, r7, #16
 800211e:	4619      	mov	r1, r3
 8002120:	4813      	ldr	r0, [pc, #76]	; (8002170 <MX_GPIO_Init+0x158>)
 8002122:	f001 fbff 	bl	8003924 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_REAR_RIGHT_OUT_1_Pin MOTOR_REAR_RIGHT_OUT_2_Pin MOTOR_FRONT_LEFT_OUT_2_Pin MOTOR_FRONT_LEFT_OUT_1_Pin */
  GPIO_InitStruct.Pin = MOTOR_REAR_RIGHT_OUT_1_Pin|MOTOR_REAR_RIGHT_OUT_2_Pin|MOTOR_FRONT_LEFT_OUT_2_Pin|MOTOR_FRONT_LEFT_OUT_1_Pin;
 8002126:	2333      	movs	r3, #51	; 0x33
 8002128:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800212a:	2301      	movs	r3, #1
 800212c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212e:	2300      	movs	r3, #0
 8002130:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002132:	2303      	movs	r3, #3
 8002134:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002136:	f107 0310 	add.w	r3, r7, #16
 800213a:	4619      	mov	r1, r3
 800213c:	480d      	ldr	r0, [pc, #52]	; (8002174 <MX_GPIO_Init+0x15c>)
 800213e:	f001 fbf1 	bl	8003924 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTOR_FRONT_RIGHT_OUT_1_Pin */
  GPIO_InitStruct.Pin = MOTOR_FRONT_RIGHT_OUT_1_Pin;
 8002142:	2304      	movs	r3, #4
 8002144:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002146:	2301      	movs	r3, #1
 8002148:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214a:	2300      	movs	r3, #0
 800214c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800214e:	2303      	movs	r3, #3
 8002150:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MOTOR_FRONT_RIGHT_OUT_1_GPIO_Port, &GPIO_InitStruct);
 8002152:	f107 0310 	add.w	r3, r7, #16
 8002156:	4619      	mov	r1, r3
 8002158:	4807      	ldr	r0, [pc, #28]	; (8002178 <MX_GPIO_Init+0x160>)
 800215a:	f001 fbe3 	bl	8003924 <HAL_GPIO_Init>

}
 800215e:	bf00      	nop
 8002160:	3720      	adds	r7, #32
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	40021000 	.word	0x40021000
 800216c:	40011000 	.word	0x40011000
 8002170:	40010800 	.word	0x40010800
 8002174:	40010c00 	.word	0x40010c00
 8002178:	40011400 	.word	0x40011400

0800217c <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  if ((htim == &htim2) || (htim == &htim3) || (htim == &htim4) || (htim == &htim5))
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	4a0b      	ldr	r2, [pc, #44]	; (80021b4 <HAL_TIM_IC_CaptureCallback+0x38>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d00b      	beq.n	80021a4 <HAL_TIM_IC_CaptureCallback+0x28>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	4a0a      	ldr	r2, [pc, #40]	; (80021b8 <HAL_TIM_IC_CaptureCallback+0x3c>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d007      	beq.n	80021a4 <HAL_TIM_IC_CaptureCallback+0x28>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	4a09      	ldr	r2, [pc, #36]	; (80021bc <HAL_TIM_IC_CaptureCallback+0x40>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d003      	beq.n	80021a4 <HAL_TIM_IC_CaptureCallback+0x28>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	4a08      	ldr	r2, [pc, #32]	; (80021c0 <HAL_TIM_IC_CaptureCallback+0x44>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d103      	bne.n	80021ac <HAL_TIM_IC_CaptureCallback+0x30>
  {
    DRV_updateEncoder(htim);
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f007 f99f 	bl	80094e8 <DRV_updateEncoder>
  else
  {
    ; /* Nothing to do */
  }

  return;
 80021aa:	bf00      	nop
 80021ac:	bf00      	nop
}
 80021ae:	3708      	adds	r7, #8
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	20000abc 	.word	0x20000abc
 80021b8:	20000770 	.word	0x20000770
 80021bc:	20000608 	.word	0x20000608
 80021c0:	200006bc 	.word	0x200006bc

080021c4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  /* Check the handle of the timer triggering this callback and update LED */
  if (htim == &htim1)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	4a05      	ldr	r2, [pc, #20]	; (80021e4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d102      	bne.n	80021da <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    LED_update();
 80021d4:	f008 f9f4 	bl	800a5c0 <LED_update>
  else
  {
    ; /* Nothing to do */
  }

  return;
 80021d8:	bf00      	nop
 80021da:	bf00      	nop
}
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	20000990 	.word	0x20000990

080021e8 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  /* Nothing to do */
  return;
 80021f0:	bf00      	nop
}
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bc80      	pop	{r7}
 80021f8:	4770      	bx	lr
	...

080021fc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  /* Check the handle of the UART triggering this callback and actually receive date */
  if (huart == &huart1)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	4a08      	ldr	r2, [pc, #32]	; (8002228 <HAL_UART_RxCpltCallback+0x2c>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d102      	bne.n	8002212 <HAL_UART_RxCpltCallback+0x16>
  {
    CON_receiveData();
 800220c:	f007 f884 	bl	8009318 <CON_receiveData>
  else
  {
    ; /* Nothing to do */
  }

  return;
 8002210:	e006      	b.n	8002220 <HAL_UART_RxCpltCallback+0x24>
  else if (huart == &huart4)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a05      	ldr	r2, [pc, #20]	; (800222c <HAL_UART_RxCpltCallback+0x30>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d102      	bne.n	8002220 <HAL_UART_RxCpltCallback+0x24>
    MAS_receiveData();
 800221a:	f008 fb35 	bl	800a888 <MAS_receiveData>
  return;
 800221e:	bf00      	nop
 8002220:	bf00      	nop
}
 8002222:	3708      	adds	r7, #8
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	20000854 	.word	0x20000854
 800222c:	20000a48 	.word	0x20000a48

08002230 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002234:	b672      	cpsid	i
}
 8002236:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();

  LOG_error("Error_Handler() triggered");
 8002238:	4902      	ldr	r1, [pc, #8]	; (8002244 <Error_Handler+0x14>)
 800223a:	2003      	movs	r0, #3
 800223c:	f008 fa92 	bl	800a764 <LOG_log>

  while (1)
 8002240:	e7fe      	b.n	8002240 <Error_Handler+0x10>
 8002242:	bf00      	nop
 8002244:	08010218 	.word	0x08010218

08002248 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
     LOG_error("Wrong parameters: %s@%d", file, line);
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	4904      	ldr	r1, [pc, #16]	; (8002268 <assert_failed+0x20>)
 8002258:	2003      	movs	r0, #3
 800225a:	f008 fa83 	bl	800a764 <LOG_log>

    return;
 800225e:	bf00      	nop
  /* USER CODE END 6 */
}
 8002260:	3708      	adds	r7, #8
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	08010234 	.word	0x08010234

0800226c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002272:	4b15      	ldr	r3, [pc, #84]	; (80022c8 <HAL_MspInit+0x5c>)
 8002274:	699b      	ldr	r3, [r3, #24]
 8002276:	4a14      	ldr	r2, [pc, #80]	; (80022c8 <HAL_MspInit+0x5c>)
 8002278:	f043 0301 	orr.w	r3, r3, #1
 800227c:	6193      	str	r3, [r2, #24]
 800227e:	4b12      	ldr	r3, [pc, #72]	; (80022c8 <HAL_MspInit+0x5c>)
 8002280:	699b      	ldr	r3, [r3, #24]
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	60bb      	str	r3, [r7, #8]
 8002288:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800228a:	4b0f      	ldr	r3, [pc, #60]	; (80022c8 <HAL_MspInit+0x5c>)
 800228c:	69db      	ldr	r3, [r3, #28]
 800228e:	4a0e      	ldr	r2, [pc, #56]	; (80022c8 <HAL_MspInit+0x5c>)
 8002290:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002294:	61d3      	str	r3, [r2, #28]
 8002296:	4b0c      	ldr	r3, [pc, #48]	; (80022c8 <HAL_MspInit+0x5c>)
 8002298:	69db      	ldr	r3, [r3, #28]
 800229a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800229e:	607b      	str	r3, [r7, #4]
 80022a0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80022a2:	4b0a      	ldr	r3, [pc, #40]	; (80022cc <HAL_MspInit+0x60>)
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	60fb      	str	r3, [r7, #12]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80022ae:	60fb      	str	r3, [r7, #12]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80022b6:	60fb      	str	r3, [r7, #12]
 80022b8:	4a04      	ldr	r2, [pc, #16]	; (80022cc <HAL_MspInit+0x60>)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022be:	bf00      	nop
 80022c0:	3714      	adds	r7, #20
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bc80      	pop	{r7}
 80022c6:	4770      	bx	lr
 80022c8:	40021000 	.word	0x40021000
 80022cc:	40010000 	.word	0x40010000

080022d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b088      	sub	sp, #32
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d8:	f107 0310 	add.w	r3, r7, #16
 80022dc:	2200      	movs	r2, #0
 80022de:	601a      	str	r2, [r3, #0]
 80022e0:	605a      	str	r2, [r3, #4]
 80022e2:	609a      	str	r2, [r3, #8]
 80022e4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a14      	ldr	r2, [pc, #80]	; (800233c <HAL_ADC_MspInit+0x6c>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d121      	bne.n	8002334 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80022f0:	4b13      	ldr	r3, [pc, #76]	; (8002340 <HAL_ADC_MspInit+0x70>)
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	4a12      	ldr	r2, [pc, #72]	; (8002340 <HAL_ADC_MspInit+0x70>)
 80022f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022fa:	6193      	str	r3, [r2, #24]
 80022fc:	4b10      	ldr	r3, [pc, #64]	; (8002340 <HAL_ADC_MspInit+0x70>)
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002304:	60fb      	str	r3, [r7, #12]
 8002306:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002308:	4b0d      	ldr	r3, [pc, #52]	; (8002340 <HAL_ADC_MspInit+0x70>)
 800230a:	699b      	ldr	r3, [r3, #24]
 800230c:	4a0c      	ldr	r2, [pc, #48]	; (8002340 <HAL_ADC_MspInit+0x70>)
 800230e:	f043 0304 	orr.w	r3, r3, #4
 8002312:	6193      	str	r3, [r2, #24]
 8002314:	4b0a      	ldr	r3, [pc, #40]	; (8002340 <HAL_ADC_MspInit+0x70>)
 8002316:	699b      	ldr	r3, [r3, #24]
 8002318:	f003 0304 	and.w	r3, r3, #4
 800231c:	60bb      	str	r3, [r7, #8]
 800231e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = BATTERY_ADC_Pin;
 8002320:	2320      	movs	r3, #32
 8002322:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002324:	2303      	movs	r3, #3
 8002326:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(BATTERY_ADC_GPIO_Port, &GPIO_InitStruct);
 8002328:	f107 0310 	add.w	r3, r7, #16
 800232c:	4619      	mov	r1, r3
 800232e:	4805      	ldr	r0, [pc, #20]	; (8002344 <HAL_ADC_MspInit+0x74>)
 8002330:	f001 faf8 	bl	8003924 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002334:	bf00      	nop
 8002336:	3720      	adds	r7, #32
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	40012400 	.word	0x40012400
 8002340:	40021000 	.word	0x40021000
 8002344:	40010800 	.word	0x40010800

08002348 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a0b      	ldr	r2, [pc, #44]	; (8002384 <HAL_RTC_MspInit+0x3c>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d110      	bne.n	800237c <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800235a:	f001 fdf7 	bl	8003f4c <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 800235e:	4b0a      	ldr	r3, [pc, #40]	; (8002388 <HAL_RTC_MspInit+0x40>)
 8002360:	69db      	ldr	r3, [r3, #28]
 8002362:	4a09      	ldr	r2, [pc, #36]	; (8002388 <HAL_RTC_MspInit+0x40>)
 8002364:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002368:	61d3      	str	r3, [r2, #28]
 800236a:	4b07      	ldr	r3, [pc, #28]	; (8002388 <HAL_RTC_MspInit+0x40>)
 800236c:	69db      	ldr	r3, [r3, #28]
 800236e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002372:	60fb      	str	r3, [r7, #12]
 8002374:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002376:	4b05      	ldr	r3, [pc, #20]	; (800238c <HAL_RTC_MspInit+0x44>)
 8002378:	2201      	movs	r2, #1
 800237a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800237c:	bf00      	nop
 800237e:	3710      	adds	r7, #16
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	40002800 	.word	0x40002800
 8002388:	40021000 	.word	0x40021000
 800238c:	4242043c 	.word	0x4242043c

08002390 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b086      	sub	sp, #24
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a28      	ldr	r2, [pc, #160]	; (8002440 <HAL_TIM_Base_MspInit+0xb0>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d114      	bne.n	80023cc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80023a2:	4b28      	ldr	r3, [pc, #160]	; (8002444 <HAL_TIM_Base_MspInit+0xb4>)
 80023a4:	699b      	ldr	r3, [r3, #24]
 80023a6:	4a27      	ldr	r2, [pc, #156]	; (8002444 <HAL_TIM_Base_MspInit+0xb4>)
 80023a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80023ac:	6193      	str	r3, [r2, #24]
 80023ae:	4b25      	ldr	r3, [pc, #148]	; (8002444 <HAL_TIM_Base_MspInit+0xb4>)
 80023b0:	699b      	ldr	r3, [r3, #24]
 80023b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023b6:	617b      	str	r3, [r7, #20]
 80023b8:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 6, 0);
 80023ba:	2200      	movs	r2, #0
 80023bc:	2106      	movs	r1, #6
 80023be:	2019      	movs	r0, #25
 80023c0:	f001 f91a 	bl	80035f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80023c4:	2019      	movs	r0, #25
 80023c6:	f001 f943 	bl	8003650 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80023ca:	e034      	b.n	8002436 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM6)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a1d      	ldr	r2, [pc, #116]	; (8002448 <HAL_TIM_Base_MspInit+0xb8>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d10c      	bne.n	80023f0 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80023d6:	4b1b      	ldr	r3, [pc, #108]	; (8002444 <HAL_TIM_Base_MspInit+0xb4>)
 80023d8:	69db      	ldr	r3, [r3, #28]
 80023da:	4a1a      	ldr	r2, [pc, #104]	; (8002444 <HAL_TIM_Base_MspInit+0xb4>)
 80023dc:	f043 0310 	orr.w	r3, r3, #16
 80023e0:	61d3      	str	r3, [r2, #28]
 80023e2:	4b18      	ldr	r3, [pc, #96]	; (8002444 <HAL_TIM_Base_MspInit+0xb4>)
 80023e4:	69db      	ldr	r3, [r3, #28]
 80023e6:	f003 0310 	and.w	r3, r3, #16
 80023ea:	613b      	str	r3, [r7, #16]
 80023ec:	693b      	ldr	r3, [r7, #16]
}
 80023ee:	e022      	b.n	8002436 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM7)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a15      	ldr	r2, [pc, #84]	; (800244c <HAL_TIM_Base_MspInit+0xbc>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d10c      	bne.n	8002414 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80023fa:	4b12      	ldr	r3, [pc, #72]	; (8002444 <HAL_TIM_Base_MspInit+0xb4>)
 80023fc:	69db      	ldr	r3, [r3, #28]
 80023fe:	4a11      	ldr	r2, [pc, #68]	; (8002444 <HAL_TIM_Base_MspInit+0xb4>)
 8002400:	f043 0320 	orr.w	r3, r3, #32
 8002404:	61d3      	str	r3, [r2, #28]
 8002406:	4b0f      	ldr	r3, [pc, #60]	; (8002444 <HAL_TIM_Base_MspInit+0xb4>)
 8002408:	69db      	ldr	r3, [r3, #28]
 800240a:	f003 0320 	and.w	r3, r3, #32
 800240e:	60fb      	str	r3, [r7, #12]
 8002410:	68fb      	ldr	r3, [r7, #12]
}
 8002412:	e010      	b.n	8002436 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM8)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a0d      	ldr	r2, [pc, #52]	; (8002450 <HAL_TIM_Base_MspInit+0xc0>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d10b      	bne.n	8002436 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800241e:	4b09      	ldr	r3, [pc, #36]	; (8002444 <HAL_TIM_Base_MspInit+0xb4>)
 8002420:	699b      	ldr	r3, [r3, #24]
 8002422:	4a08      	ldr	r2, [pc, #32]	; (8002444 <HAL_TIM_Base_MspInit+0xb4>)
 8002424:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002428:	6193      	str	r3, [r2, #24]
 800242a:	4b06      	ldr	r3, [pc, #24]	; (8002444 <HAL_TIM_Base_MspInit+0xb4>)
 800242c:	699b      	ldr	r3, [r3, #24]
 800242e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002432:	60bb      	str	r3, [r7, #8]
 8002434:	68bb      	ldr	r3, [r7, #8]
}
 8002436:	bf00      	nop
 8002438:	3718      	adds	r7, #24
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	40012c00 	.word	0x40012c00
 8002444:	40021000 	.word	0x40021000
 8002448:	40001000 	.word	0x40001000
 800244c:	40001400 	.word	0x40001400
 8002450:	40013400 	.word	0x40013400

08002454 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b090      	sub	sp, #64	; 0x40
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800245c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]
 8002464:	605a      	str	r2, [r3, #4]
 8002466:	609a      	str	r2, [r3, #8]
 8002468:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002472:	d157      	bne.n	8002524 <HAL_TIM_Encoder_MspInit+0xd0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002474:	4b78      	ldr	r3, [pc, #480]	; (8002658 <HAL_TIM_Encoder_MspInit+0x204>)
 8002476:	69db      	ldr	r3, [r3, #28]
 8002478:	4a77      	ldr	r2, [pc, #476]	; (8002658 <HAL_TIM_Encoder_MspInit+0x204>)
 800247a:	f043 0301 	orr.w	r3, r3, #1
 800247e:	61d3      	str	r3, [r2, #28]
 8002480:	4b75      	ldr	r3, [pc, #468]	; (8002658 <HAL_TIM_Encoder_MspInit+0x204>)
 8002482:	69db      	ldr	r3, [r3, #28]
 8002484:	f003 0301 	and.w	r3, r3, #1
 8002488:	62bb      	str	r3, [r7, #40]	; 0x28
 800248a:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800248c:	4b72      	ldr	r3, [pc, #456]	; (8002658 <HAL_TIM_Encoder_MspInit+0x204>)
 800248e:	699b      	ldr	r3, [r3, #24]
 8002490:	4a71      	ldr	r2, [pc, #452]	; (8002658 <HAL_TIM_Encoder_MspInit+0x204>)
 8002492:	f043 0304 	orr.w	r3, r3, #4
 8002496:	6193      	str	r3, [r2, #24]
 8002498:	4b6f      	ldr	r3, [pc, #444]	; (8002658 <HAL_TIM_Encoder_MspInit+0x204>)
 800249a:	699b      	ldr	r3, [r3, #24]
 800249c:	f003 0304 	and.w	r3, r3, #4
 80024a0:	627b      	str	r3, [r7, #36]	; 0x24
 80024a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024a4:	4b6c      	ldr	r3, [pc, #432]	; (8002658 <HAL_TIM_Encoder_MspInit+0x204>)
 80024a6:	699b      	ldr	r3, [r3, #24]
 80024a8:	4a6b      	ldr	r2, [pc, #428]	; (8002658 <HAL_TIM_Encoder_MspInit+0x204>)
 80024aa:	f043 0308 	orr.w	r3, r3, #8
 80024ae:	6193      	str	r3, [r2, #24]
 80024b0:	4b69      	ldr	r3, [pc, #420]	; (8002658 <HAL_TIM_Encoder_MspInit+0x204>)
 80024b2:	699b      	ldr	r3, [r3, #24]
 80024b4:	f003 0308 	and.w	r3, r3, #8
 80024b8:	623b      	str	r3, [r7, #32]
 80024ba:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_FRONT_RIGHT_IN_1_Pin;
 80024bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024c2:	2300      	movs	r3, #0
 80024c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c6:	2300      	movs	r3, #0
 80024c8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENCODER_FRONT_RIGHT_IN_1_GPIO_Port, &GPIO_InitStruct);
 80024ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024ce:	4619      	mov	r1, r3
 80024d0:	4862      	ldr	r0, [pc, #392]	; (800265c <HAL_TIM_Encoder_MspInit+0x208>)
 80024d2:	f001 fa27 	bl	8003924 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENCODER_FRONT_RIGHT_IN_2_Pin;
 80024d6:	2308      	movs	r3, #8
 80024d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024da:	2300      	movs	r3, #0
 80024dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024de:	2300      	movs	r3, #0
 80024e0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENCODER_FRONT_RIGHT_IN_2_GPIO_Port, &GPIO_InitStruct);
 80024e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024e6:	4619      	mov	r1, r3
 80024e8:	485d      	ldr	r0, [pc, #372]	; (8002660 <HAL_TIM_Encoder_MspInit+0x20c>)
 80024ea:	f001 fa1b 	bl	8003924 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 80024ee:	4b5d      	ldr	r3, [pc, #372]	; (8002664 <HAL_TIM_Encoder_MspInit+0x210>)
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024fe:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002502:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002504:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002506:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800250a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800250c:	4a55      	ldr	r2, [pc, #340]	; (8002664 <HAL_TIM_Encoder_MspInit+0x210>)
 800250e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002510:	6053      	str	r3, [r2, #4]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 4, 0);
 8002512:	2200      	movs	r2, #0
 8002514:	2104      	movs	r1, #4
 8002516:	201c      	movs	r0, #28
 8002518:	f001 f86e 	bl	80035f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800251c:	201c      	movs	r0, #28
 800251e:	f001 f897 	bl	8003650 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002522:	e094      	b.n	800264e <HAL_TIM_Encoder_MspInit+0x1fa>
  else if(htim_encoder->Instance==TIM3)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a4f      	ldr	r2, [pc, #316]	; (8002668 <HAL_TIM_Encoder_MspInit+0x214>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d12c      	bne.n	8002588 <HAL_TIM_Encoder_MspInit+0x134>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800252e:	4b4a      	ldr	r3, [pc, #296]	; (8002658 <HAL_TIM_Encoder_MspInit+0x204>)
 8002530:	69db      	ldr	r3, [r3, #28]
 8002532:	4a49      	ldr	r2, [pc, #292]	; (8002658 <HAL_TIM_Encoder_MspInit+0x204>)
 8002534:	f043 0302 	orr.w	r3, r3, #2
 8002538:	61d3      	str	r3, [r2, #28]
 800253a:	4b47      	ldr	r3, [pc, #284]	; (8002658 <HAL_TIM_Encoder_MspInit+0x204>)
 800253c:	69db      	ldr	r3, [r3, #28]
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	61fb      	str	r3, [r7, #28]
 8002544:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002546:	4b44      	ldr	r3, [pc, #272]	; (8002658 <HAL_TIM_Encoder_MspInit+0x204>)
 8002548:	699b      	ldr	r3, [r3, #24]
 800254a:	4a43      	ldr	r2, [pc, #268]	; (8002658 <HAL_TIM_Encoder_MspInit+0x204>)
 800254c:	f043 0304 	orr.w	r3, r3, #4
 8002550:	6193      	str	r3, [r2, #24]
 8002552:	4b41      	ldr	r3, [pc, #260]	; (8002658 <HAL_TIM_Encoder_MspInit+0x204>)
 8002554:	699b      	ldr	r3, [r3, #24]
 8002556:	f003 0304 	and.w	r3, r3, #4
 800255a:	61bb      	str	r3, [r7, #24]
 800255c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ENCODER_FRONT_LEFT_IN_1_Pin|ENCODER_FRONT_LEFT_IN_2_Pin;
 800255e:	23c0      	movs	r3, #192	; 0xc0
 8002560:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002562:	2300      	movs	r3, #0
 8002564:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002566:	2300      	movs	r3, #0
 8002568:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800256a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800256e:	4619      	mov	r1, r3
 8002570:	483a      	ldr	r0, [pc, #232]	; (800265c <HAL_TIM_Encoder_MspInit+0x208>)
 8002572:	f001 f9d7 	bl	8003924 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 4, 0);
 8002576:	2200      	movs	r2, #0
 8002578:	2104      	movs	r1, #4
 800257a:	201d      	movs	r0, #29
 800257c:	f001 f83c 	bl	80035f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002580:	201d      	movs	r0, #29
 8002582:	f001 f865 	bl	8003650 <HAL_NVIC_EnableIRQ>
}
 8002586:	e062      	b.n	800264e <HAL_TIM_Encoder_MspInit+0x1fa>
  else if(htim_encoder->Instance==TIM4)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a37      	ldr	r2, [pc, #220]	; (800266c <HAL_TIM_Encoder_MspInit+0x218>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d12c      	bne.n	80025ec <HAL_TIM_Encoder_MspInit+0x198>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002592:	4b31      	ldr	r3, [pc, #196]	; (8002658 <HAL_TIM_Encoder_MspInit+0x204>)
 8002594:	69db      	ldr	r3, [r3, #28]
 8002596:	4a30      	ldr	r2, [pc, #192]	; (8002658 <HAL_TIM_Encoder_MspInit+0x204>)
 8002598:	f043 0304 	orr.w	r3, r3, #4
 800259c:	61d3      	str	r3, [r2, #28]
 800259e:	4b2e      	ldr	r3, [pc, #184]	; (8002658 <HAL_TIM_Encoder_MspInit+0x204>)
 80025a0:	69db      	ldr	r3, [r3, #28]
 80025a2:	f003 0304 	and.w	r3, r3, #4
 80025a6:	617b      	str	r3, [r7, #20]
 80025a8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025aa:	4b2b      	ldr	r3, [pc, #172]	; (8002658 <HAL_TIM_Encoder_MspInit+0x204>)
 80025ac:	699b      	ldr	r3, [r3, #24]
 80025ae:	4a2a      	ldr	r2, [pc, #168]	; (8002658 <HAL_TIM_Encoder_MspInit+0x204>)
 80025b0:	f043 0308 	orr.w	r3, r3, #8
 80025b4:	6193      	str	r3, [r2, #24]
 80025b6:	4b28      	ldr	r3, [pc, #160]	; (8002658 <HAL_TIM_Encoder_MspInit+0x204>)
 80025b8:	699b      	ldr	r3, [r3, #24]
 80025ba:	f003 0308 	and.w	r3, r3, #8
 80025be:	613b      	str	r3, [r7, #16]
 80025c0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ENCODER_REAR_LEFT_IN_1_Pin|ENCODER_REAR_LEFT_IN_2_Pin;
 80025c2:	23c0      	movs	r3, #192	; 0xc0
 80025c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025c6:	2300      	movs	r3, #0
 80025c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ca:	2300      	movs	r3, #0
 80025cc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025d2:	4619      	mov	r1, r3
 80025d4:	4822      	ldr	r0, [pc, #136]	; (8002660 <HAL_TIM_Encoder_MspInit+0x20c>)
 80025d6:	f001 f9a5 	bl	8003924 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 4, 0);
 80025da:	2200      	movs	r2, #0
 80025dc:	2104      	movs	r1, #4
 80025de:	201e      	movs	r0, #30
 80025e0:	f001 f80a 	bl	80035f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80025e4:	201e      	movs	r0, #30
 80025e6:	f001 f833 	bl	8003650 <HAL_NVIC_EnableIRQ>
}
 80025ea:	e030      	b.n	800264e <HAL_TIM_Encoder_MspInit+0x1fa>
  else if(htim_encoder->Instance==TIM5)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a1f      	ldr	r2, [pc, #124]	; (8002670 <HAL_TIM_Encoder_MspInit+0x21c>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d12b      	bne.n	800264e <HAL_TIM_Encoder_MspInit+0x1fa>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80025f6:	4b18      	ldr	r3, [pc, #96]	; (8002658 <HAL_TIM_Encoder_MspInit+0x204>)
 80025f8:	69db      	ldr	r3, [r3, #28]
 80025fa:	4a17      	ldr	r2, [pc, #92]	; (8002658 <HAL_TIM_Encoder_MspInit+0x204>)
 80025fc:	f043 0308 	orr.w	r3, r3, #8
 8002600:	61d3      	str	r3, [r2, #28]
 8002602:	4b15      	ldr	r3, [pc, #84]	; (8002658 <HAL_TIM_Encoder_MspInit+0x204>)
 8002604:	69db      	ldr	r3, [r3, #28]
 8002606:	f003 0308 	and.w	r3, r3, #8
 800260a:	60fb      	str	r3, [r7, #12]
 800260c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800260e:	4b12      	ldr	r3, [pc, #72]	; (8002658 <HAL_TIM_Encoder_MspInit+0x204>)
 8002610:	699b      	ldr	r3, [r3, #24]
 8002612:	4a11      	ldr	r2, [pc, #68]	; (8002658 <HAL_TIM_Encoder_MspInit+0x204>)
 8002614:	f043 0304 	orr.w	r3, r3, #4
 8002618:	6193      	str	r3, [r2, #24]
 800261a:	4b0f      	ldr	r3, [pc, #60]	; (8002658 <HAL_TIM_Encoder_MspInit+0x204>)
 800261c:	699b      	ldr	r3, [r3, #24]
 800261e:	f003 0304 	and.w	r3, r3, #4
 8002622:	60bb      	str	r3, [r7, #8]
 8002624:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENCODER_REAR_RIGHT_IN_1_Pin|ENCODER_REAR_RIGHT_IN_2_Pin;
 8002626:	2303      	movs	r3, #3
 8002628:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800262a:	2300      	movs	r3, #0
 800262c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262e:	2300      	movs	r3, #0
 8002630:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002632:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002636:	4619      	mov	r1, r3
 8002638:	4808      	ldr	r0, [pc, #32]	; (800265c <HAL_TIM_Encoder_MspInit+0x208>)
 800263a:	f001 f973 	bl	8003924 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 4, 0);
 800263e:	2200      	movs	r2, #0
 8002640:	2104      	movs	r1, #4
 8002642:	2032      	movs	r0, #50	; 0x32
 8002644:	f000 ffd8 	bl	80035f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002648:	2032      	movs	r0, #50	; 0x32
 800264a:	f001 f801 	bl	8003650 <HAL_NVIC_EnableIRQ>
}
 800264e:	bf00      	nop
 8002650:	3740      	adds	r7, #64	; 0x40
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	40021000 	.word	0x40021000
 800265c:	40010800 	.word	0x40010800
 8002660:	40010c00 	.word	0x40010c00
 8002664:	40010000 	.word	0x40010000
 8002668:	40000400 	.word	0x40000400
 800266c:	40000800 	.word	0x40000800
 8002670:	40000c00 	.word	0x40000c00

08002674 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b088      	sub	sp, #32
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800267c:	f107 0310 	add.w	r3, r7, #16
 8002680:	2200      	movs	r2, #0
 8002682:	601a      	str	r2, [r3, #0]
 8002684:	605a      	str	r2, [r3, #4]
 8002686:	609a      	str	r2, [r3, #8]
 8002688:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM8)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a10      	ldr	r2, [pc, #64]	; (80026d0 <HAL_TIM_MspPostInit+0x5c>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d118      	bne.n	80026c6 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002694:	4b0f      	ldr	r3, [pc, #60]	; (80026d4 <HAL_TIM_MspPostInit+0x60>)
 8002696:	699b      	ldr	r3, [r3, #24]
 8002698:	4a0e      	ldr	r2, [pc, #56]	; (80026d4 <HAL_TIM_MspPostInit+0x60>)
 800269a:	f043 0310 	orr.w	r3, r3, #16
 800269e:	6193      	str	r3, [r2, #24]
 80026a0:	4b0c      	ldr	r3, [pc, #48]	; (80026d4 <HAL_TIM_MspPostInit+0x60>)
 80026a2:	699b      	ldr	r3, [r3, #24]
 80026a4:	f003 0310 	and.w	r3, r3, #16
 80026a8:	60fb      	str	r3, [r7, #12]
 80026aa:	68fb      	ldr	r3, [r7, #12]
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    PC8     ------> TIM8_CH3
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = MOTOR_REAR_RIGHT_PWM_Pin|MOTOR_REAR_LEFT_PWM_Pin|MOTOR_FRONT_RIGHT_PWM_Pin|MOTOR_FRONT_LEFT_PWM_Pin;
 80026ac:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80026b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b2:	2302      	movs	r3, #2
 80026b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026b6:	2303      	movs	r3, #3
 80026b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026ba:	f107 0310 	add.w	r3, r7, #16
 80026be:	4619      	mov	r1, r3
 80026c0:	4805      	ldr	r0, [pc, #20]	; (80026d8 <HAL_TIM_MspPostInit+0x64>)
 80026c2:	f001 f92f 	bl	8003924 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80026c6:	bf00      	nop
 80026c8:	3720      	adds	r7, #32
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	40013400 	.word	0x40013400
 80026d4:	40021000 	.word	0x40021000
 80026d8:	40011000 	.word	0x40011000

080026dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b08a      	sub	sp, #40	; 0x28
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026e4:	f107 0318 	add.w	r3, r7, #24
 80026e8:	2200      	movs	r2, #0
 80026ea:	601a      	str	r2, [r3, #0]
 80026ec:	605a      	str	r2, [r3, #4]
 80026ee:	609a      	str	r2, [r3, #8]
 80026f0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==UART4)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a40      	ldr	r2, [pc, #256]	; (80027f8 <HAL_UART_MspInit+0x11c>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d13a      	bne.n	8002772 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80026fc:	4b3f      	ldr	r3, [pc, #252]	; (80027fc <HAL_UART_MspInit+0x120>)
 80026fe:	69db      	ldr	r3, [r3, #28]
 8002700:	4a3e      	ldr	r2, [pc, #248]	; (80027fc <HAL_UART_MspInit+0x120>)
 8002702:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002706:	61d3      	str	r3, [r2, #28]
 8002708:	4b3c      	ldr	r3, [pc, #240]	; (80027fc <HAL_UART_MspInit+0x120>)
 800270a:	69db      	ldr	r3, [r3, #28]
 800270c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002710:	617b      	str	r3, [r7, #20]
 8002712:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002714:	4b39      	ldr	r3, [pc, #228]	; (80027fc <HAL_UART_MspInit+0x120>)
 8002716:	699b      	ldr	r3, [r3, #24]
 8002718:	4a38      	ldr	r2, [pc, #224]	; (80027fc <HAL_UART_MspInit+0x120>)
 800271a:	f043 0310 	orr.w	r3, r3, #16
 800271e:	6193      	str	r3, [r2, #24]
 8002720:	4b36      	ldr	r3, [pc, #216]	; (80027fc <HAL_UART_MspInit+0x120>)
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	f003 0310 	and.w	r3, r3, #16
 8002728:	613b      	str	r3, [r7, #16]
 800272a:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = MASTER_USART_TX_Pin;
 800272c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002730:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002732:	2302      	movs	r3, #2
 8002734:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002736:	2303      	movs	r3, #3
 8002738:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MASTER_USART_TX_GPIO_Port, &GPIO_InitStruct);
 800273a:	f107 0318 	add.w	r3, r7, #24
 800273e:	4619      	mov	r1, r3
 8002740:	482f      	ldr	r0, [pc, #188]	; (8002800 <HAL_UART_MspInit+0x124>)
 8002742:	f001 f8ef 	bl	8003924 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MASTER_USART_RX_Pin;
 8002746:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800274a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800274c:	2300      	movs	r3, #0
 800274e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002750:	2300      	movs	r3, #0
 8002752:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(MASTER_USART_RX_GPIO_Port, &GPIO_InitStruct);
 8002754:	f107 0318 	add.w	r3, r7, #24
 8002758:	4619      	mov	r1, r3
 800275a:	4829      	ldr	r0, [pc, #164]	; (8002800 <HAL_UART_MspInit+0x124>)
 800275c:	f001 f8e2 	bl	8003924 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8002760:	2200      	movs	r2, #0
 8002762:	2105      	movs	r1, #5
 8002764:	2034      	movs	r0, #52	; 0x34
 8002766:	f000 ff47 	bl	80035f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800276a:	2034      	movs	r0, #52	; 0x34
 800276c:	f000 ff70 	bl	8003650 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002770:	e03e      	b.n	80027f0 <HAL_UART_MspInit+0x114>
  else if(huart->Instance==USART1)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a23      	ldr	r2, [pc, #140]	; (8002804 <HAL_UART_MspInit+0x128>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d139      	bne.n	80027f0 <HAL_UART_MspInit+0x114>
    __HAL_RCC_USART1_CLK_ENABLE();
 800277c:	4b1f      	ldr	r3, [pc, #124]	; (80027fc <HAL_UART_MspInit+0x120>)
 800277e:	699b      	ldr	r3, [r3, #24]
 8002780:	4a1e      	ldr	r2, [pc, #120]	; (80027fc <HAL_UART_MspInit+0x120>)
 8002782:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002786:	6193      	str	r3, [r2, #24]
 8002788:	4b1c      	ldr	r3, [pc, #112]	; (80027fc <HAL_UART_MspInit+0x120>)
 800278a:	699b      	ldr	r3, [r3, #24]
 800278c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002790:	60fb      	str	r3, [r7, #12]
 8002792:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002794:	4b19      	ldr	r3, [pc, #100]	; (80027fc <HAL_UART_MspInit+0x120>)
 8002796:	699b      	ldr	r3, [r3, #24]
 8002798:	4a18      	ldr	r2, [pc, #96]	; (80027fc <HAL_UART_MspInit+0x120>)
 800279a:	f043 0304 	orr.w	r3, r3, #4
 800279e:	6193      	str	r3, [r2, #24]
 80027a0:	4b16      	ldr	r3, [pc, #88]	; (80027fc <HAL_UART_MspInit+0x120>)
 80027a2:	699b      	ldr	r3, [r3, #24]
 80027a4:	f003 0304 	and.w	r3, r3, #4
 80027a8:	60bb      	str	r3, [r7, #8]
 80027aa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = CONSOLE_USART_TX_Pin;
 80027ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b2:	2302      	movs	r3, #2
 80027b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027b6:	2303      	movs	r3, #3
 80027b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(CONSOLE_USART_TX_GPIO_Port, &GPIO_InitStruct);
 80027ba:	f107 0318 	add.w	r3, r7, #24
 80027be:	4619      	mov	r1, r3
 80027c0:	4811      	ldr	r0, [pc, #68]	; (8002808 <HAL_UART_MspInit+0x12c>)
 80027c2:	f001 f8af 	bl	8003924 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = CONSOLE_USART_RX_Pin;
 80027c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027cc:	2300      	movs	r3, #0
 80027ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d0:	2300      	movs	r3, #0
 80027d2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(CONSOLE_USART_RX_GPIO_Port, &GPIO_InitStruct);
 80027d4:	f107 0318 	add.w	r3, r7, #24
 80027d8:	4619      	mov	r1, r3
 80027da:	480b      	ldr	r0, [pc, #44]	; (8002808 <HAL_UART_MspInit+0x12c>)
 80027dc:	f001 f8a2 	bl	8003924 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80027e0:	2200      	movs	r2, #0
 80027e2:	2105      	movs	r1, #5
 80027e4:	2025      	movs	r0, #37	; 0x25
 80027e6:	f000 ff07 	bl	80035f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80027ea:	2025      	movs	r0, #37	; 0x25
 80027ec:	f000 ff30 	bl	8003650 <HAL_NVIC_EnableIRQ>
}
 80027f0:	bf00      	nop
 80027f2:	3728      	adds	r7, #40	; 0x28
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	40004c00 	.word	0x40004c00
 80027fc:	40021000 	.word	0x40021000
 8002800:	40011000 	.word	0x40011000
 8002804:	40013800 	.word	0x40013800
 8002808:	40010800 	.word	0x40010800

0800280c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  LOG_error("NMI_Handler() triggered");
 8002810:	4902      	ldr	r1, [pc, #8]	; (800281c <NMI_Handler+0x10>)
 8002812:	2003      	movs	r0, #3
 8002814:	f007 ffa6 	bl	800a764 <LOG_log>
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002818:	e7fe      	b.n	8002818 <NMI_Handler+0xc>
 800281a:	bf00      	nop
 800281c:	0801024c 	.word	0x0801024c

08002820 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  LOG_error("HardFault_Handler() triggered");
 8002824:	4902      	ldr	r1, [pc, #8]	; (8002830 <HardFault_Handler+0x10>)
 8002826:	2003      	movs	r0, #3
 8002828:	f007 ff9c 	bl	800a764 <LOG_log>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800282c:	e7fe      	b.n	800282c <HardFault_Handler+0xc>
 800282e:	bf00      	nop
 8002830:	08010264 	.word	0x08010264

08002834 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
  LOG_error("MemManage_Handler() triggered");
 8002838:	4902      	ldr	r1, [pc, #8]	; (8002844 <MemManage_Handler+0x10>)
 800283a:	2003      	movs	r0, #3
 800283c:	f007 ff92 	bl	800a764 <LOG_log>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002840:	e7fe      	b.n	8002840 <MemManage_Handler+0xc>
 8002842:	bf00      	nop
 8002844:	08010284 	.word	0x08010284

08002848 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
  LOG_error("BusFault_Handler() triggered");
 800284c:	4902      	ldr	r1, [pc, #8]	; (8002858 <BusFault_Handler+0x10>)
 800284e:	2003      	movs	r0, #3
 8002850:	f007 ff88 	bl	800a764 <LOG_log>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002854:	e7fe      	b.n	8002854 <BusFault_Handler+0xc>
 8002856:	bf00      	nop
 8002858:	080102a4 	.word	0x080102a4

0800285c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
  LOG_error("UsageFault_Handler() triggered");
 8002860:	4902      	ldr	r1, [pc, #8]	; (800286c <UsageFault_Handler+0x10>)
 8002862:	2003      	movs	r0, #3
 8002864:	f007 ff7e 	bl	800a764 <LOG_log>
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002868:	e7fe      	b.n	8002868 <UsageFault_Handler+0xc>
 800286a:	bf00      	nop
 800286c:	080102c4 	.word	0x080102c4

08002870 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SVCall_IRQn 0 */
  LOG_error("SVC_Handler() triggered");
 8002874:	4902      	ldr	r1, [pc, #8]	; (8002880 <SVC_Handler+0x10>)
 8002876:	2003      	movs	r0, #3
 8002878:	f007 ff74 	bl	800a764 <LOG_log>
  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800287c:	bf00      	nop
 800287e:	bd80      	pop	{r7, pc}
 8002880:	080102e4 	.word	0x080102e4

08002884 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */
  LOG_error("DebugMon_Handler() triggered");
 8002888:	4902      	ldr	r1, [pc, #8]	; (8002894 <DebugMon_Handler+0x10>)
 800288a:	2003      	movs	r0, #3
 800288c:	f007 ff6a 	bl	800a764 <LOG_log>
  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002890:	bf00      	nop
 8002892:	bd80      	pop	{r7, pc}
 8002894:	080102fc 	.word	0x080102fc

08002898 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PendSV_IRQn 0 */
  LOG_error("PendSV_Handler() triggered");
 800289c:	4902      	ldr	r1, [pc, #8]	; (80028a8 <PendSV_Handler+0x10>)
 800289e:	2003      	movs	r0, #3
 80028a0:	f007 ff60 	bl	800a764 <LOG_log>
  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028a4:	bf00      	nop
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	0801031c 	.word	0x0801031c

080028ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028b0:	f000 f988 	bl	8002bc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028b4:	bf00      	nop
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80028bc:	4802      	ldr	r0, [pc, #8]	; (80028c8 <TIM1_UP_IRQHandler+0x10>)
 80028be:	f004 f847 	bl	8006950 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80028c2:	bf00      	nop
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	20000990 	.word	0x20000990

080028cc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80028d0:	4802      	ldr	r0, [pc, #8]	; (80028dc <TIM2_IRQHandler+0x10>)
 80028d2:	f004 f83d 	bl	8006950 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80028d6:	bf00      	nop
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	20000abc 	.word	0x20000abc

080028e0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80028e4:	4802      	ldr	r0, [pc, #8]	; (80028f0 <TIM3_IRQHandler+0x10>)
 80028e6:	f004 f833 	bl	8006950 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80028ea:	bf00      	nop
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	20000770 	.word	0x20000770

080028f4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80028f8:	4802      	ldr	r0, [pc, #8]	; (8002904 <TIM4_IRQHandler+0x10>)
 80028fa:	f004 f829 	bl	8006950 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80028fe:	bf00      	nop
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	20000608 	.word	0x20000608

08002908 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800290c:	4802      	ldr	r0, [pc, #8]	; (8002918 <USART1_IRQHandler+0x10>)
 800290e:	f005 fd7f 	bl	8008410 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002912:	bf00      	nop
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	20000854 	.word	0x20000854

0800291c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002920:	4802      	ldr	r0, [pc, #8]	; (800292c <TIM5_IRQHandler+0x10>)
 8002922:	f004 f815 	bl	8006950 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002926:	bf00      	nop
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	200006bc 	.word	0x200006bc

08002930 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002934:	4802      	ldr	r0, [pc, #8]	; (8002940 <UART4_IRQHandler+0x10>)
 8002936:	f005 fd6b 	bl	8008410 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800293a:	bf00      	nop
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	20000a48 	.word	0x20000a48

08002944 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
	return 1;
 8002948:	2301      	movs	r3, #1
}
 800294a:	4618      	mov	r0, r3
 800294c:	46bd      	mov	sp, r7
 800294e:	bc80      	pop	{r7}
 8002950:	4770      	bx	lr

08002952 <_kill>:

int _kill(int pid, int sig)
{
 8002952:	b580      	push	{r7, lr}
 8002954:	b082      	sub	sp, #8
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
 800295a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800295c:	f008 ff38 	bl	800b7d0 <__errno>
 8002960:	4603      	mov	r3, r0
 8002962:	2216      	movs	r2, #22
 8002964:	601a      	str	r2, [r3, #0]
	return -1;
 8002966:	f04f 33ff 	mov.w	r3, #4294967295
}
 800296a:	4618      	mov	r0, r3
 800296c:	3708      	adds	r7, #8
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}

08002972 <_exit>:

void _exit (int status)
{
 8002972:	b580      	push	{r7, lr}
 8002974:	b082      	sub	sp, #8
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800297a:	f04f 31ff 	mov.w	r1, #4294967295
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f7ff ffe7 	bl	8002952 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002984:	e7fe      	b.n	8002984 <_exit+0x12>

08002986 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002986:	b580      	push	{r7, lr}
 8002988:	b086      	sub	sp, #24
 800298a:	af00      	add	r7, sp, #0
 800298c:	60f8      	str	r0, [r7, #12]
 800298e:	60b9      	str	r1, [r7, #8]
 8002990:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002992:	2300      	movs	r3, #0
 8002994:	617b      	str	r3, [r7, #20]
 8002996:	e00a      	b.n	80029ae <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002998:	f3af 8000 	nop.w
 800299c:	4601      	mov	r1, r0
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	1c5a      	adds	r2, r3, #1
 80029a2:	60ba      	str	r2, [r7, #8]
 80029a4:	b2ca      	uxtb	r2, r1
 80029a6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	3301      	adds	r3, #1
 80029ac:	617b      	str	r3, [r7, #20]
 80029ae:	697a      	ldr	r2, [r7, #20]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	429a      	cmp	r2, r3
 80029b4:	dbf0      	blt.n	8002998 <_read+0x12>
	}

return len;
 80029b6:	687b      	ldr	r3, [r7, #4]
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3718      	adds	r7, #24
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	60b9      	str	r1, [r7, #8]
 80029ca:	607a      	str	r2, [r7, #4]
  if ((file != STDOUT_FILENO) && (file != STDERR_FILENO))
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d00a      	beq.n	80029e8 <_write+0x28>
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d007      	beq.n	80029e8 <_write+0x28>
  {
    errno = EBADF;
 80029d8:	f008 fefa 	bl	800b7d0 <__errno>
 80029dc:	4603      	mov	r3, r0
 80029de:	2209      	movs	r2, #9
 80029e0:	601a      	str	r2, [r3, #0]
    return -1;
 80029e2:	f04f 33ff 	mov.w	r3, #4294967295
 80029e6:	e00f      	b.n	8002a08 <_write+0x48>
  }

  if (g_MAIN_printOutput == MAIN_PRINT_OUTPUT_TO_CONSOLE)
 80029e8:	4b09      	ldr	r3, [pc, #36]	; (8002a10 <_write+0x50>)
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d105      	bne.n	80029fc <_write+0x3c>
  {
    CON_sendString(ptr, len);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	4619      	mov	r1, r3
 80029f4:	68b8      	ldr	r0, [r7, #8]
 80029f6:	f006 fcd9 	bl	80093ac <CON_sendString>
 80029fa:	e004      	b.n	8002a06 <_write+0x46>
  }
  else
  {
    MAS_sendString(ptr, len);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	4619      	mov	r1, r3
 8002a00:	68b8      	ldr	r0, [r7, #8]
 8002a02:	f007 ff8b 	bl	800a91c <MAS_sendString>
  }

  return len;
 8002a06:	687b      	ldr	r3, [r7, #4]
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3710      	adds	r7, #16
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	20000a44 	.word	0x20000a44

08002a14 <_close>:

int _close(int file)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
	return -1;
 8002a1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	370c      	adds	r7, #12
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bc80      	pop	{r7}
 8002a28:	4770      	bx	lr

08002a2a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a2a:	b480      	push	{r7}
 8002a2c:	b083      	sub	sp, #12
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
 8002a32:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a3a:	605a      	str	r2, [r3, #4]
	return 0;
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	370c      	adds	r7, #12
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bc80      	pop	{r7}
 8002a46:	4770      	bx	lr

08002a48 <_isatty>:

int _isatty(int file)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
	return 1;
 8002a50:	2301      	movs	r3, #1
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	370c      	adds	r7, #12
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bc80      	pop	{r7}
 8002a5a:	4770      	bx	lr

08002a5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b085      	sub	sp, #20
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	60b9      	str	r1, [r7, #8]
 8002a66:	607a      	str	r2, [r7, #4]
	return 0;
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3714      	adds	r7, #20
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bc80      	pop	{r7}
 8002a72:	4770      	bx	lr

08002a74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b086      	sub	sp, #24
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a7c:	4a14      	ldr	r2, [pc, #80]	; (8002ad0 <_sbrk+0x5c>)
 8002a7e:	4b15      	ldr	r3, [pc, #84]	; (8002ad4 <_sbrk+0x60>)
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a88:	4b13      	ldr	r3, [pc, #76]	; (8002ad8 <_sbrk+0x64>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d102      	bne.n	8002a96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a90:	4b11      	ldr	r3, [pc, #68]	; (8002ad8 <_sbrk+0x64>)
 8002a92:	4a12      	ldr	r2, [pc, #72]	; (8002adc <_sbrk+0x68>)
 8002a94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a96:	4b10      	ldr	r3, [pc, #64]	; (8002ad8 <_sbrk+0x64>)
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4413      	add	r3, r2
 8002a9e:	693a      	ldr	r2, [r7, #16]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d207      	bcs.n	8002ab4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002aa4:	f008 fe94 	bl	800b7d0 <__errno>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	220c      	movs	r2, #12
 8002aac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002aae:	f04f 33ff 	mov.w	r3, #4294967295
 8002ab2:	e009      	b.n	8002ac8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ab4:	4b08      	ldr	r3, [pc, #32]	; (8002ad8 <_sbrk+0x64>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002aba:	4b07      	ldr	r3, [pc, #28]	; (8002ad8 <_sbrk+0x64>)
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4413      	add	r3, r2
 8002ac2:	4a05      	ldr	r2, [pc, #20]	; (8002ad8 <_sbrk+0x64>)
 8002ac4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3718      	adds	r7, #24
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	2000c000 	.word	0x2000c000
 8002ad4:	00000400 	.word	0x00000400
 8002ad8:	20000230 	.word	0x20000230
 8002adc:	20000c38 	.word	0x20000c38

08002ae0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ae4:	bf00      	nop
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bc80      	pop	{r7}
 8002aea:	4770      	bx	lr

08002aec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002aec:	480c      	ldr	r0, [pc, #48]	; (8002b20 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002aee:	490d      	ldr	r1, [pc, #52]	; (8002b24 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002af0:	4a0d      	ldr	r2, [pc, #52]	; (8002b28 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002af2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002af4:	e002      	b.n	8002afc <LoopCopyDataInit>

08002af6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002af6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002af8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002afa:	3304      	adds	r3, #4

08002afc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002afc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002afe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b00:	d3f9      	bcc.n	8002af6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b02:	4a0a      	ldr	r2, [pc, #40]	; (8002b2c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002b04:	4c0a      	ldr	r4, [pc, #40]	; (8002b30 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002b06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b08:	e001      	b.n	8002b0e <LoopFillZerobss>

08002b0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b0c:	3204      	adds	r2, #4

08002b0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b10:	d3fb      	bcc.n	8002b0a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002b12:	f7ff ffe5 	bl	8002ae0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b16:	f008 fe61 	bl	800b7dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002b1a:	f7fe fcbd 	bl	8001498 <main>
  bx lr
 8002b1e:	4770      	bx	lr
  ldr r0, =_sdata
 8002b20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b24:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8002b28:	0801145c 	.word	0x0801145c
  ldr r2, =_sbss
 8002b2c:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8002b30:	20000c38 	.word	0x20000c38

08002b34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002b34:	e7fe      	b.n	8002b34 <ADC1_2_IRQHandler>
	...

08002b38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b3c:	4b08      	ldr	r3, [pc, #32]	; (8002b60 <HAL_Init+0x28>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a07      	ldr	r2, [pc, #28]	; (8002b60 <HAL_Init+0x28>)
 8002b42:	f043 0310 	orr.w	r3, r3, #16
 8002b46:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b48:	2003      	movs	r0, #3
 8002b4a:	f000 fd35 	bl	80035b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b4e:	2000      	movs	r0, #0
 8002b50:	f000 f808 	bl	8002b64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b54:	f7ff fb8a 	bl	800226c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	40022000 	.word	0x40022000

08002b64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b6c:	4b12      	ldr	r3, [pc, #72]	; (8002bb8 <HAL_InitTick+0x54>)
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	4b12      	ldr	r3, [pc, #72]	; (8002bbc <HAL_InitTick+0x58>)
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	4619      	mov	r1, r3
 8002b76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b82:	4618      	mov	r0, r3
 8002b84:	f000 fd80 	bl	8003688 <HAL_SYSTICK_Config>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d001      	beq.n	8002b92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e00e      	b.n	8002bb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2b0f      	cmp	r3, #15
 8002b96:	d80a      	bhi.n	8002bae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b98:	2200      	movs	r2, #0
 8002b9a:	6879      	ldr	r1, [r7, #4]
 8002b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8002ba0:	f000 fd2a 	bl	80035f8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ba4:	4a06      	ldr	r2, [pc, #24]	; (8002bc0 <HAL_InitTick+0x5c>)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002baa:	2300      	movs	r3, #0
 8002bac:	e000      	b.n	8002bb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3708      	adds	r7, #8
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	20000000 	.word	0x20000000
 8002bbc:	20000008 	.word	0x20000008
 8002bc0:	20000004 	.word	0x20000004

08002bc4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bc8:	4b05      	ldr	r3, [pc, #20]	; (8002be0 <HAL_IncTick+0x1c>)
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	461a      	mov	r2, r3
 8002bce:	4b05      	ldr	r3, [pc, #20]	; (8002be4 <HAL_IncTick+0x20>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	4a03      	ldr	r2, [pc, #12]	; (8002be4 <HAL_IncTick+0x20>)
 8002bd6:	6013      	str	r3, [r2, #0]
}
 8002bd8:	bf00      	nop
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bc80      	pop	{r7}
 8002bde:	4770      	bx	lr
 8002be0:	20000008 	.word	0x20000008
 8002be4:	20000c24 	.word	0x20000c24

08002be8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002be8:	b480      	push	{r7}
 8002bea:	af00      	add	r7, sp, #0
  return uwTick;
 8002bec:	4b02      	ldr	r3, [pc, #8]	; (8002bf8 <HAL_GetTick+0x10>)
 8002bee:	681b      	ldr	r3, [r3, #0]
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bc80      	pop	{r7}
 8002bf6:	4770      	bx	lr
 8002bf8:	20000c24 	.word	0x20000c24

08002bfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b084      	sub	sp, #16
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c04:	f7ff fff0 	bl	8002be8 <HAL_GetTick>
 8002c08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c14:	d005      	beq.n	8002c22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c16:	4b0a      	ldr	r3, [pc, #40]	; (8002c40 <HAL_Delay+0x44>)
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	4413      	add	r3, r2
 8002c20:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c22:	bf00      	nop
 8002c24:	f7ff ffe0 	bl	8002be8 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	68fa      	ldr	r2, [r7, #12]
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d8f7      	bhi.n	8002c24 <HAL_Delay+0x28>
  {
  }
}
 8002c34:	bf00      	nop
 8002c36:	bf00      	nop
 8002c38:	3710      	adds	r7, #16
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	20000008 	.word	0x20000008

08002c44 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b086      	sub	sp, #24
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002c50:	2300      	movs	r3, #0
 8002c52:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002c54:	2300      	movs	r3, #0
 8002c56:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d101      	bne.n	8002c66 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e188      	b.n	8002f78 <HAL_ADC_Init+0x334>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a8c      	ldr	r2, [pc, #560]	; (8002e9c <HAL_ADC_Init+0x258>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d00e      	beq.n	8002c8e <HAL_ADC_Init+0x4a>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a8a      	ldr	r2, [pc, #552]	; (8002ea0 <HAL_ADC_Init+0x25c>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d009      	beq.n	8002c8e <HAL_ADC_Init+0x4a>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a89      	ldr	r2, [pc, #548]	; (8002ea4 <HAL_ADC_Init+0x260>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d004      	beq.n	8002c8e <HAL_ADC_Init+0x4a>
 8002c84:	f240 11b3 	movw	r1, #435	; 0x1b3
 8002c88:	4887      	ldr	r0, [pc, #540]	; (8002ea8 <HAL_ADC_Init+0x264>)
 8002c8a:	f7ff fadd 	bl	8002248 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d009      	beq.n	8002caa <HAL_ADC_Init+0x66>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c9e:	d004      	beq.n	8002caa <HAL_ADC_Init+0x66>
 8002ca0:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 8002ca4:	4880      	ldr	r0, [pc, #512]	; (8002ea8 <HAL_ADC_Init+0x264>)
 8002ca6:	f7ff facf 	bl	8002248 <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d009      	beq.n	8002cc6 <HAL_ADC_Init+0x82>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cba:	d004      	beq.n	8002cc6 <HAL_ADC_Init+0x82>
 8002cbc:	f240 11b5 	movw	r1, #437	; 0x1b5
 8002cc0:	4879      	ldr	r0, [pc, #484]	; (8002ea8 <HAL_ADC_Init+0x264>)
 8002cc2:	f7ff fac1 	bl	8002248 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	7b1b      	ldrb	r3, [r3, #12]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d008      	beq.n	8002ce0 <HAL_ADC_Init+0x9c>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	7b1b      	ldrb	r3, [r3, #12]
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d004      	beq.n	8002ce0 <HAL_ADC_Init+0x9c>
 8002cd6:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 8002cda:	4873      	ldr	r0, [pc, #460]	; (8002ea8 <HAL_ADC_Init+0x264>)
 8002cdc:	f7ff fab4 	bl	8002248 <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	69db      	ldr	r3, [r3, #28]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d044      	beq.n	8002d72 <HAL_ADC_Init+0x12e>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	69db      	ldr	r3, [r3, #28]
 8002cec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002cf0:	d03f      	beq.n	8002d72 <HAL_ADC_Init+0x12e>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	69db      	ldr	r3, [r3, #28]
 8002cf6:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8002cfa:	d03a      	beq.n	8002d72 <HAL_ADC_Init+0x12e>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	69db      	ldr	r3, [r3, #28]
 8002d00:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002d04:	d035      	beq.n	8002d72 <HAL_ADC_Init+0x12e>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	69db      	ldr	r3, [r3, #28]
 8002d0a:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 8002d0e:	d030      	beq.n	8002d72 <HAL_ADC_Init+0x12e>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	69db      	ldr	r3, [r3, #28]
 8002d14:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002d18:	d02b      	beq.n	8002d72 <HAL_ADC_Init+0x12e>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	69db      	ldr	r3, [r3, #28]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d027      	beq.n	8002d72 <HAL_ADC_Init+0x12e>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	69db      	ldr	r3, [r3, #28]
 8002d26:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d2a:	d022      	beq.n	8002d72 <HAL_ADC_Init+0x12e>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	69db      	ldr	r3, [r3, #28]
 8002d30:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8002d34:	d01d      	beq.n	8002d72 <HAL_ADC_Init+0x12e>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	69db      	ldr	r3, [r3, #28]
 8002d3a:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 8002d3e:	d018      	beq.n	8002d72 <HAL_ADC_Init+0x12e>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	69db      	ldr	r3, [r3, #28]
 8002d44:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002d48:	d013      	beq.n	8002d72 <HAL_ADC_Init+0x12e>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	69db      	ldr	r3, [r3, #28]
 8002d4e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d52:	d00e      	beq.n	8002d72 <HAL_ADC_Init+0x12e>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	69db      	ldr	r3, [r3, #28]
 8002d58:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002d5c:	d009      	beq.n	8002d72 <HAL_ADC_Init+0x12e>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	69db      	ldr	r3, [r3, #28]
 8002d62:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002d66:	d004      	beq.n	8002d72 <HAL_ADC_Init+0x12e>
 8002d68:	f240 11b7 	movw	r1, #439	; 0x1b7
 8002d6c:	484e      	ldr	r0, [pc, #312]	; (8002ea8 <HAL_ADC_Init+0x264>)
 8002d6e:	f7ff fa6b 	bl	8002248 <assert_failed>
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d02a      	beq.n	8002dd0 <HAL_ADC_Init+0x18c>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	691b      	ldr	r3, [r3, #16]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d003      	beq.n	8002d8a <HAL_ADC_Init+0x146>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	2b10      	cmp	r3, #16
 8002d88:	d904      	bls.n	8002d94 <HAL_ADC_Init+0x150>
 8002d8a:	f240 11bb 	movw	r1, #443	; 0x1bb
 8002d8e:	4846      	ldr	r0, [pc, #280]	; (8002ea8 <HAL_ADC_Init+0x264>)
 8002d90:	f7ff fa5a 	bl	8002248 <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	7d1b      	ldrb	r3, [r3, #20]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d008      	beq.n	8002dae <HAL_ADC_Init+0x16a>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	7d1b      	ldrb	r3, [r3, #20]
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d004      	beq.n	8002dae <HAL_ADC_Init+0x16a>
 8002da4:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8002da8:	483f      	ldr	r0, [pc, #252]	; (8002ea8 <HAL_ADC_Init+0x264>)
 8002daa:	f7ff fa4d 	bl	8002248 <assert_failed>
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	7d1b      	ldrb	r3, [r3, #20]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d00c      	beq.n	8002dd0 <HAL_ADC_Init+0x18c>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	699b      	ldr	r3, [r3, #24]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d003      	beq.n	8002dc6 <HAL_ADC_Init+0x182>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	699b      	ldr	r3, [r3, #24]
 8002dc2:	2b08      	cmp	r3, #8
 8002dc4:	d904      	bls.n	8002dd0 <HAL_ADC_Init+0x18c>
 8002dc6:	f240 11bf 	movw	r1, #447	; 0x1bf
 8002dca:	4837      	ldr	r0, [pc, #220]	; (8002ea8 <HAL_ADC_Init+0x264>)
 8002dcc:	f7ff fa3c 	bl	8002248 <assert_failed>
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d109      	bne.n	8002dec <HAL_ADC_Init+0x1a8>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f7ff fa72 	bl	80022d0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f000 fabf 	bl	8003370 <ADC_ConversionStop_Disable>
 8002df2:	4603      	mov	r3, r0
 8002df4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dfa:	f003 0310 	and.w	r3, r3, #16
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	f040 80b1 	bne.w	8002f66 <HAL_ADC_Init+0x322>
 8002e04:	7dfb      	ldrb	r3, [r7, #23]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	f040 80ad 	bne.w	8002f66 <HAL_ADC_Init+0x322>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e10:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002e14:	f023 0302 	bic.w	r3, r3, #2
 8002e18:	f043 0202 	orr.w	r2, r3, #2
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	491e      	ldr	r1, [pc, #120]	; (8002ea4 <HAL_ADC_Init+0x260>)
 8002e2a:	428b      	cmp	r3, r1
 8002e2c:	d10a      	bne.n	8002e44 <HAL_ADC_Init+0x200>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	69db      	ldr	r3, [r3, #28]
 8002e32:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002e36:	d002      	beq.n	8002e3e <HAL_ADC_Init+0x1fa>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	69db      	ldr	r3, [r3, #28]
 8002e3c:	e004      	b.n	8002e48 <HAL_ADC_Init+0x204>
 8002e3e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002e42:	e001      	b.n	8002e48 <HAL_ADC_Init+0x204>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002e48:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	7b1b      	ldrb	r3, [r3, #12]
 8002e4e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002e50:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002e52:	68ba      	ldr	r2, [r7, #8]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e60:	d003      	beq.n	8002e6a <HAL_ADC_Init+0x226>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d102      	bne.n	8002e70 <HAL_ADC_Init+0x22c>
 8002e6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e6e:	e000      	b.n	8002e72 <HAL_ADC_Init+0x22e>
 8002e70:	2300      	movs	r3, #0
 8002e72:	693a      	ldr	r2, [r7, #16]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	7d1b      	ldrb	r3, [r3, #20]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d121      	bne.n	8002ec4 <HAL_ADC_Init+0x280>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	7b1b      	ldrb	r3, [r3, #12]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d111      	bne.n	8002eac <HAL_ADC_Init+0x268>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	699b      	ldr	r3, [r3, #24]
 8002e8c:	3b01      	subs	r3, #1
 8002e8e:	035a      	lsls	r2, r3, #13
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002e98:	613b      	str	r3, [r7, #16]
 8002e9a:	e013      	b.n	8002ec4 <HAL_ADC_Init+0x280>
 8002e9c:	40012400 	.word	0x40012400
 8002ea0:	40012800 	.word	0x40012800
 8002ea4:	40013c00 	.word	0x40013c00
 8002ea8:	08010338 	.word	0x08010338
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb0:	f043 0220 	orr.w	r2, r3, #32
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ebc:	f043 0201 	orr.w	r2, r3, #1
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	693a      	ldr	r2, [r7, #16]
 8002ed4:	430a      	orrs	r2, r1
 8002ed6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	689a      	ldr	r2, [r3, #8]
 8002ede:	4b28      	ldr	r3, [pc, #160]	; (8002f80 <HAL_ADC_Init+0x33c>)
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	6812      	ldr	r2, [r2, #0]
 8002ee6:	68b9      	ldr	r1, [r7, #8]
 8002ee8:	430b      	orrs	r3, r1
 8002eea:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ef4:	d003      	beq.n	8002efe <HAL_ADC_Init+0x2ba>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d104      	bne.n	8002f08 <HAL_ADC_Init+0x2c4>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	691b      	ldr	r3, [r3, #16]
 8002f02:	3b01      	subs	r3, #1
 8002f04:	051b      	lsls	r3, r3, #20
 8002f06:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f0e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	68fa      	ldr	r2, [r7, #12]
 8002f18:	430a      	orrs	r2, r1
 8002f1a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	689a      	ldr	r2, [r3, #8]
 8002f22:	4b18      	ldr	r3, [pc, #96]	; (8002f84 <HAL_ADC_Init+0x340>)
 8002f24:	4013      	ands	r3, r2
 8002f26:	68ba      	ldr	r2, [r7, #8]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d10b      	bne.n	8002f44 <HAL_ADC_Init+0x300>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f36:	f023 0303 	bic.w	r3, r3, #3
 8002f3a:	f043 0201 	orr.w	r2, r3, #1
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002f42:	e018      	b.n	8002f76 <HAL_ADC_Init+0x332>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f48:	f023 0312 	bic.w	r3, r3, #18
 8002f4c:	f043 0210 	orr.w	r2, r3, #16
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f58:	f043 0201 	orr.w	r2, r3, #1
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002f64:	e007      	b.n	8002f76 <HAL_ADC_Init+0x332>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f6a:	f043 0210 	orr.w	r2, r3, #16
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002f76:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3718      	adds	r7, #24
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	ffe1f7fd 	.word	0xffe1f7fd
 8002f84:	ff1f0efe 	.word	0xff1f0efe

08002f88 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a0c      	ldr	r2, [pc, #48]	; (8002fc8 <HAL_ADC_GetValue+0x40>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d00e      	beq.n	8002fb8 <HAL_ADC_GetValue+0x30>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a0b      	ldr	r2, [pc, #44]	; (8002fcc <HAL_ADC_GetValue+0x44>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d009      	beq.n	8002fb8 <HAL_ADC_GetValue+0x30>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a09      	ldr	r2, [pc, #36]	; (8002fd0 <HAL_ADC_GetValue+0x48>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d004      	beq.n	8002fb8 <HAL_ADC_GetValue+0x30>
 8002fae:	f240 61ef 	movw	r1, #1775	; 0x6ef
 8002fb2:	4808      	ldr	r0, [pc, #32]	; (8002fd4 <HAL_ADC_GetValue+0x4c>)
 8002fb4:	f7ff f948 	bl	8002248 <assert_failed>

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3708      	adds	r7, #8
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	40012400 	.word	0x40012400
 8002fcc:	40012800 	.word	0x40012800
 8002fd0:	40013c00 	.word	0x40013c00
 8002fd4:	08010338 	.word	0x08010338

08002fd8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a8b      	ldr	r2, [pc, #556]	; (800321c <HAL_ADC_ConfigChannel+0x244>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d00e      	beq.n	8003012 <HAL_ADC_ConfigChannel+0x3a>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a89      	ldr	r2, [pc, #548]	; (8003220 <HAL_ADC_ConfigChannel+0x248>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d009      	beq.n	8003012 <HAL_ADC_ConfigChannel+0x3a>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a88      	ldr	r2, [pc, #544]	; (8003224 <HAL_ADC_ConfigChannel+0x24c>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d004      	beq.n	8003012 <HAL_ADC_ConfigChannel+0x3a>
 8003008:	f240 71dd 	movw	r1, #2013	; 0x7dd
 800300c:	4886      	ldr	r0, [pc, #536]	; (8003228 <HAL_ADC_ConfigChannel+0x250>)
 800300e:	f7ff f91b 	bl	8002248 <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d048      	beq.n	80030ac <HAL_ADC_ConfigChannel+0xd4>
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2b01      	cmp	r3, #1
 8003020:	d044      	beq.n	80030ac <HAL_ADC_ConfigChannel+0xd4>
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	2b02      	cmp	r3, #2
 8003028:	d040      	beq.n	80030ac <HAL_ADC_ConfigChannel+0xd4>
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2b03      	cmp	r3, #3
 8003030:	d03c      	beq.n	80030ac <HAL_ADC_ConfigChannel+0xd4>
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	2b04      	cmp	r3, #4
 8003038:	d038      	beq.n	80030ac <HAL_ADC_ConfigChannel+0xd4>
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	2b05      	cmp	r3, #5
 8003040:	d034      	beq.n	80030ac <HAL_ADC_ConfigChannel+0xd4>
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2b06      	cmp	r3, #6
 8003048:	d030      	beq.n	80030ac <HAL_ADC_ConfigChannel+0xd4>
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2b07      	cmp	r3, #7
 8003050:	d02c      	beq.n	80030ac <HAL_ADC_ConfigChannel+0xd4>
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2b08      	cmp	r3, #8
 8003058:	d028      	beq.n	80030ac <HAL_ADC_ConfigChannel+0xd4>
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	2b09      	cmp	r3, #9
 8003060:	d024      	beq.n	80030ac <HAL_ADC_ConfigChannel+0xd4>
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2b0a      	cmp	r3, #10
 8003068:	d020      	beq.n	80030ac <HAL_ADC_ConfigChannel+0xd4>
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2b0b      	cmp	r3, #11
 8003070:	d01c      	beq.n	80030ac <HAL_ADC_ConfigChannel+0xd4>
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2b0c      	cmp	r3, #12
 8003078:	d018      	beq.n	80030ac <HAL_ADC_ConfigChannel+0xd4>
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	2b0d      	cmp	r3, #13
 8003080:	d014      	beq.n	80030ac <HAL_ADC_ConfigChannel+0xd4>
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2b0e      	cmp	r3, #14
 8003088:	d010      	beq.n	80030ac <HAL_ADC_ConfigChannel+0xd4>
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	2b0f      	cmp	r3, #15
 8003090:	d00c      	beq.n	80030ac <HAL_ADC_ConfigChannel+0xd4>
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2b10      	cmp	r3, #16
 8003098:	d008      	beq.n	80030ac <HAL_ADC_ConfigChannel+0xd4>
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	2b11      	cmp	r3, #17
 80030a0:	d004      	beq.n	80030ac <HAL_ADC_ConfigChannel+0xd4>
 80030a2:	f240 71de 	movw	r1, #2014	; 0x7de
 80030a6:	4860      	ldr	r0, [pc, #384]	; (8003228 <HAL_ADC_ConfigChannel+0x250>)
 80030a8:	f7ff f8ce 	bl	8002248 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d040      	beq.n	8003136 <HAL_ADC_ConfigChannel+0x15e>
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d03c      	beq.n	8003136 <HAL_ADC_ConfigChannel+0x15e>
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	2b03      	cmp	r3, #3
 80030c2:	d038      	beq.n	8003136 <HAL_ADC_ConfigChannel+0x15e>
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	2b04      	cmp	r3, #4
 80030ca:	d034      	beq.n	8003136 <HAL_ADC_ConfigChannel+0x15e>
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	2b05      	cmp	r3, #5
 80030d2:	d030      	beq.n	8003136 <HAL_ADC_ConfigChannel+0x15e>
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	2b06      	cmp	r3, #6
 80030da:	d02c      	beq.n	8003136 <HAL_ADC_ConfigChannel+0x15e>
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	2b07      	cmp	r3, #7
 80030e2:	d028      	beq.n	8003136 <HAL_ADC_ConfigChannel+0x15e>
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	2b08      	cmp	r3, #8
 80030ea:	d024      	beq.n	8003136 <HAL_ADC_ConfigChannel+0x15e>
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	2b09      	cmp	r3, #9
 80030f2:	d020      	beq.n	8003136 <HAL_ADC_ConfigChannel+0x15e>
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	2b0a      	cmp	r3, #10
 80030fa:	d01c      	beq.n	8003136 <HAL_ADC_ConfigChannel+0x15e>
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	2b0b      	cmp	r3, #11
 8003102:	d018      	beq.n	8003136 <HAL_ADC_ConfigChannel+0x15e>
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	2b0c      	cmp	r3, #12
 800310a:	d014      	beq.n	8003136 <HAL_ADC_ConfigChannel+0x15e>
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	2b0d      	cmp	r3, #13
 8003112:	d010      	beq.n	8003136 <HAL_ADC_ConfigChannel+0x15e>
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	2b0e      	cmp	r3, #14
 800311a:	d00c      	beq.n	8003136 <HAL_ADC_ConfigChannel+0x15e>
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	2b0f      	cmp	r3, #15
 8003122:	d008      	beq.n	8003136 <HAL_ADC_ConfigChannel+0x15e>
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	2b10      	cmp	r3, #16
 800312a:	d004      	beq.n	8003136 <HAL_ADC_ConfigChannel+0x15e>
 800312c:	f240 71df 	movw	r1, #2015	; 0x7df
 8003130:	483d      	ldr	r0, [pc, #244]	; (8003228 <HAL_ADC_ConfigChannel+0x250>)
 8003132:	f7ff f889 	bl	8002248 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d020      	beq.n	8003180 <HAL_ADC_ConfigChannel+0x1a8>
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	2b01      	cmp	r3, #1
 8003144:	d01c      	beq.n	8003180 <HAL_ADC_ConfigChannel+0x1a8>
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	2b02      	cmp	r3, #2
 800314c:	d018      	beq.n	8003180 <HAL_ADC_ConfigChannel+0x1a8>
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	2b03      	cmp	r3, #3
 8003154:	d014      	beq.n	8003180 <HAL_ADC_ConfigChannel+0x1a8>
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	2b04      	cmp	r3, #4
 800315c:	d010      	beq.n	8003180 <HAL_ADC_ConfigChannel+0x1a8>
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	2b05      	cmp	r3, #5
 8003164:	d00c      	beq.n	8003180 <HAL_ADC_ConfigChannel+0x1a8>
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	2b06      	cmp	r3, #6
 800316c:	d008      	beq.n	8003180 <HAL_ADC_ConfigChannel+0x1a8>
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	2b07      	cmp	r3, #7
 8003174:	d004      	beq.n	8003180 <HAL_ADC_ConfigChannel+0x1a8>
 8003176:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 800317a:	482b      	ldr	r0, [pc, #172]	; (8003228 <HAL_ADC_ConfigChannel+0x250>)
 800317c:	f7ff f864 	bl	8002248 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003186:	2b01      	cmp	r3, #1
 8003188:	d101      	bne.n	800318e <HAL_ADC_ConfigChannel+0x1b6>
 800318a:	2302      	movs	r3, #2
 800318c:	e0e5      	b.n	800335a <HAL_ADC_ConfigChannel+0x382>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2201      	movs	r2, #1
 8003192:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	2b06      	cmp	r3, #6
 800319c:	d81c      	bhi.n	80031d8 <HAL_ADC_ConfigChannel+0x200>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	685a      	ldr	r2, [r3, #4]
 80031a8:	4613      	mov	r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	4413      	add	r3, r2
 80031ae:	3b05      	subs	r3, #5
 80031b0:	221f      	movs	r2, #31
 80031b2:	fa02 f303 	lsl.w	r3, r2, r3
 80031b6:	43db      	mvns	r3, r3
 80031b8:	4019      	ands	r1, r3
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	6818      	ldr	r0, [r3, #0]
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	685a      	ldr	r2, [r3, #4]
 80031c2:	4613      	mov	r3, r2
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	4413      	add	r3, r2
 80031c8:	3b05      	subs	r3, #5
 80031ca:	fa00 f203 	lsl.w	r2, r0, r3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	430a      	orrs	r2, r1
 80031d4:	635a      	str	r2, [r3, #52]	; 0x34
 80031d6:	e045      	b.n	8003264 <HAL_ADC_ConfigChannel+0x28c>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	2b0c      	cmp	r3, #12
 80031de:	d825      	bhi.n	800322c <HAL_ADC_ConfigChannel+0x254>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	685a      	ldr	r2, [r3, #4]
 80031ea:	4613      	mov	r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	4413      	add	r3, r2
 80031f0:	3b23      	subs	r3, #35	; 0x23
 80031f2:	221f      	movs	r2, #31
 80031f4:	fa02 f303 	lsl.w	r3, r2, r3
 80031f8:	43db      	mvns	r3, r3
 80031fa:	4019      	ands	r1, r3
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	6818      	ldr	r0, [r3, #0]
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	685a      	ldr	r2, [r3, #4]
 8003204:	4613      	mov	r3, r2
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	4413      	add	r3, r2
 800320a:	3b23      	subs	r3, #35	; 0x23
 800320c:	fa00 f203 	lsl.w	r2, r0, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	430a      	orrs	r2, r1
 8003216:	631a      	str	r2, [r3, #48]	; 0x30
 8003218:	e024      	b.n	8003264 <HAL_ADC_ConfigChannel+0x28c>
 800321a:	bf00      	nop
 800321c:	40012400 	.word	0x40012400
 8003220:	40012800 	.word	0x40012800
 8003224:	40013c00 	.word	0x40013c00
 8003228:	08010338 	.word	0x08010338
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	685a      	ldr	r2, [r3, #4]
 8003236:	4613      	mov	r3, r2
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	4413      	add	r3, r2
 800323c:	3b41      	subs	r3, #65	; 0x41
 800323e:	221f      	movs	r2, #31
 8003240:	fa02 f303 	lsl.w	r3, r2, r3
 8003244:	43db      	mvns	r3, r3
 8003246:	4019      	ands	r1, r3
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	6818      	ldr	r0, [r3, #0]
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	685a      	ldr	r2, [r3, #4]
 8003250:	4613      	mov	r3, r2
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	4413      	add	r3, r2
 8003256:	3b41      	subs	r3, #65	; 0x41
 8003258:	fa00 f203 	lsl.w	r2, r0, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	430a      	orrs	r2, r1
 8003262:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2b09      	cmp	r3, #9
 800326a:	d91c      	bls.n	80032a6 <HAL_ADC_ConfigChannel+0x2ce>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	68d9      	ldr	r1, [r3, #12]
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	4613      	mov	r3, r2
 8003278:	005b      	lsls	r3, r3, #1
 800327a:	4413      	add	r3, r2
 800327c:	3b1e      	subs	r3, #30
 800327e:	2207      	movs	r2, #7
 8003280:	fa02 f303 	lsl.w	r3, r2, r3
 8003284:	43db      	mvns	r3, r3
 8003286:	4019      	ands	r1, r3
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	6898      	ldr	r0, [r3, #8]
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	4613      	mov	r3, r2
 8003292:	005b      	lsls	r3, r3, #1
 8003294:	4413      	add	r3, r2
 8003296:	3b1e      	subs	r3, #30
 8003298:	fa00 f203 	lsl.w	r2, r0, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	430a      	orrs	r2, r1
 80032a2:	60da      	str	r2, [r3, #12]
 80032a4:	e019      	b.n	80032da <HAL_ADC_ConfigChannel+0x302>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	6919      	ldr	r1, [r3, #16]
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	4613      	mov	r3, r2
 80032b2:	005b      	lsls	r3, r3, #1
 80032b4:	4413      	add	r3, r2
 80032b6:	2207      	movs	r2, #7
 80032b8:	fa02 f303 	lsl.w	r3, r2, r3
 80032bc:	43db      	mvns	r3, r3
 80032be:	4019      	ands	r1, r3
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	6898      	ldr	r0, [r3, #8]
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	4613      	mov	r3, r2
 80032ca:	005b      	lsls	r3, r3, #1
 80032cc:	4413      	add	r3, r2
 80032ce:	fa00 f203 	lsl.w	r2, r0, r3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	430a      	orrs	r2, r1
 80032d8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2b10      	cmp	r3, #16
 80032e0:	d003      	beq.n	80032ea <HAL_ADC_ConfigChannel+0x312>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80032e6:	2b11      	cmp	r3, #17
 80032e8:	d132      	bne.n	8003350 <HAL_ADC_ConfigChannel+0x378>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a1d      	ldr	r2, [pc, #116]	; (8003364 <HAL_ADC_ConfigChannel+0x38c>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d125      	bne.n	8003340 <HAL_ADC_ConfigChannel+0x368>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d126      	bne.n	8003350 <HAL_ADC_ConfigChannel+0x378>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	689a      	ldr	r2, [r3, #8]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003310:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	2b10      	cmp	r3, #16
 8003318:	d11a      	bne.n	8003350 <HAL_ADC_ConfigChannel+0x378>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800331a:	4b13      	ldr	r3, [pc, #76]	; (8003368 <HAL_ADC_ConfigChannel+0x390>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a13      	ldr	r2, [pc, #76]	; (800336c <HAL_ADC_ConfigChannel+0x394>)
 8003320:	fba2 2303 	umull	r2, r3, r2, r3
 8003324:	0c9a      	lsrs	r2, r3, #18
 8003326:	4613      	mov	r3, r2
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	4413      	add	r3, r2
 800332c:	005b      	lsls	r3, r3, #1
 800332e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003330:	e002      	b.n	8003338 <HAL_ADC_ConfigChannel+0x360>
          {
            wait_loop_index--;
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	3b01      	subs	r3, #1
 8003336:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d1f9      	bne.n	8003332 <HAL_ADC_ConfigChannel+0x35a>
 800333e:	e007      	b.n	8003350 <HAL_ADC_ConfigChannel+0x378>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003344:	f043 0220 	orr.w	r2, r3, #32
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003358:	7bfb      	ldrb	r3, [r7, #15]
}
 800335a:	4618      	mov	r0, r3
 800335c:	3710      	adds	r7, #16
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	40012400 	.word	0x40012400
 8003368:	20000000 	.word	0x20000000
 800336c:	431bde83 	.word	0x431bde83

08003370 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003378:	2300      	movs	r3, #0
 800337a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f003 0301 	and.w	r3, r3, #1
 8003386:	2b01      	cmp	r3, #1
 8003388:	d12e      	bne.n	80033e8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	689a      	ldr	r2, [r3, #8]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f022 0201 	bic.w	r2, r2, #1
 8003398:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800339a:	f7ff fc25 	bl	8002be8 <HAL_GetTick>
 800339e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80033a0:	e01b      	b.n	80033da <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80033a2:	f7ff fc21 	bl	8002be8 <HAL_GetTick>
 80033a6:	4602      	mov	r2, r0
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d914      	bls.n	80033da <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	f003 0301 	and.w	r3, r3, #1
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d10d      	bne.n	80033da <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c2:	f043 0210 	orr.w	r2, r3, #16
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ce:	f043 0201 	orr.w	r2, r3, #1
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e007      	b.n	80033ea <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	f003 0301 	and.w	r3, r3, #1
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d0dc      	beq.n	80033a2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3710      	adds	r7, #16
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
	...

080033f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b085      	sub	sp, #20
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f003 0307 	and.w	r3, r3, #7
 8003402:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003404:	4b0c      	ldr	r3, [pc, #48]	; (8003438 <__NVIC_SetPriorityGrouping+0x44>)
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800340a:	68ba      	ldr	r2, [r7, #8]
 800340c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003410:	4013      	ands	r3, r2
 8003412:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800341c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003420:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003424:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003426:	4a04      	ldr	r2, [pc, #16]	; (8003438 <__NVIC_SetPriorityGrouping+0x44>)
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	60d3      	str	r3, [r2, #12]
}
 800342c:	bf00      	nop
 800342e:	3714      	adds	r7, #20
 8003430:	46bd      	mov	sp, r7
 8003432:	bc80      	pop	{r7}
 8003434:	4770      	bx	lr
 8003436:	bf00      	nop
 8003438:	e000ed00 	.word	0xe000ed00

0800343c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800343c:	b480      	push	{r7}
 800343e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003440:	4b04      	ldr	r3, [pc, #16]	; (8003454 <__NVIC_GetPriorityGrouping+0x18>)
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	0a1b      	lsrs	r3, r3, #8
 8003446:	f003 0307 	and.w	r3, r3, #7
}
 800344a:	4618      	mov	r0, r3
 800344c:	46bd      	mov	sp, r7
 800344e:	bc80      	pop	{r7}
 8003450:	4770      	bx	lr
 8003452:	bf00      	nop
 8003454:	e000ed00 	.word	0xe000ed00

08003458 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	4603      	mov	r3, r0
 8003460:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003466:	2b00      	cmp	r3, #0
 8003468:	db0b      	blt.n	8003482 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800346a:	79fb      	ldrb	r3, [r7, #7]
 800346c:	f003 021f 	and.w	r2, r3, #31
 8003470:	4906      	ldr	r1, [pc, #24]	; (800348c <__NVIC_EnableIRQ+0x34>)
 8003472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003476:	095b      	lsrs	r3, r3, #5
 8003478:	2001      	movs	r0, #1
 800347a:	fa00 f202 	lsl.w	r2, r0, r2
 800347e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003482:	bf00      	nop
 8003484:	370c      	adds	r7, #12
 8003486:	46bd      	mov	sp, r7
 8003488:	bc80      	pop	{r7}
 800348a:	4770      	bx	lr
 800348c:	e000e100 	.word	0xe000e100

08003490 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	4603      	mov	r3, r0
 8003498:	6039      	str	r1, [r7, #0]
 800349a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800349c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	db0a      	blt.n	80034ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	b2da      	uxtb	r2, r3
 80034a8:	490c      	ldr	r1, [pc, #48]	; (80034dc <__NVIC_SetPriority+0x4c>)
 80034aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ae:	0112      	lsls	r2, r2, #4
 80034b0:	b2d2      	uxtb	r2, r2
 80034b2:	440b      	add	r3, r1
 80034b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034b8:	e00a      	b.n	80034d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	b2da      	uxtb	r2, r3
 80034be:	4908      	ldr	r1, [pc, #32]	; (80034e0 <__NVIC_SetPriority+0x50>)
 80034c0:	79fb      	ldrb	r3, [r7, #7]
 80034c2:	f003 030f 	and.w	r3, r3, #15
 80034c6:	3b04      	subs	r3, #4
 80034c8:	0112      	lsls	r2, r2, #4
 80034ca:	b2d2      	uxtb	r2, r2
 80034cc:	440b      	add	r3, r1
 80034ce:	761a      	strb	r2, [r3, #24]
}
 80034d0:	bf00      	nop
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bc80      	pop	{r7}
 80034d8:	4770      	bx	lr
 80034da:	bf00      	nop
 80034dc:	e000e100 	.word	0xe000e100
 80034e0:	e000ed00 	.word	0xe000ed00

080034e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b089      	sub	sp, #36	; 0x24
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	60b9      	str	r1, [r7, #8]
 80034ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f003 0307 	and.w	r3, r3, #7
 80034f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	f1c3 0307 	rsb	r3, r3, #7
 80034fe:	2b04      	cmp	r3, #4
 8003500:	bf28      	it	cs
 8003502:	2304      	movcs	r3, #4
 8003504:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	3304      	adds	r3, #4
 800350a:	2b06      	cmp	r3, #6
 800350c:	d902      	bls.n	8003514 <NVIC_EncodePriority+0x30>
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	3b03      	subs	r3, #3
 8003512:	e000      	b.n	8003516 <NVIC_EncodePriority+0x32>
 8003514:	2300      	movs	r3, #0
 8003516:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003518:	f04f 32ff 	mov.w	r2, #4294967295
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	fa02 f303 	lsl.w	r3, r2, r3
 8003522:	43da      	mvns	r2, r3
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	401a      	ands	r2, r3
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800352c:	f04f 31ff 	mov.w	r1, #4294967295
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	fa01 f303 	lsl.w	r3, r1, r3
 8003536:	43d9      	mvns	r1, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800353c:	4313      	orrs	r3, r2
         );
}
 800353e:	4618      	mov	r0, r3
 8003540:	3724      	adds	r7, #36	; 0x24
 8003542:	46bd      	mov	sp, r7
 8003544:	bc80      	pop	{r7}
 8003546:	4770      	bx	lr

08003548 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003548:	b480      	push	{r7}
 800354a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800354c:	f3bf 8f4f 	dsb	sy
}
 8003550:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003552:	4b06      	ldr	r3, [pc, #24]	; (800356c <__NVIC_SystemReset+0x24>)
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800355a:	4904      	ldr	r1, [pc, #16]	; (800356c <__NVIC_SystemReset+0x24>)
 800355c:	4b04      	ldr	r3, [pc, #16]	; (8003570 <__NVIC_SystemReset+0x28>)
 800355e:	4313      	orrs	r3, r2
 8003560:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003562:	f3bf 8f4f 	dsb	sy
}
 8003566:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003568:	bf00      	nop
 800356a:	e7fd      	b.n	8003568 <__NVIC_SystemReset+0x20>
 800356c:	e000ed00 	.word	0xe000ed00
 8003570:	05fa0004 	.word	0x05fa0004

08003574 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	3b01      	subs	r3, #1
 8003580:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003584:	d301      	bcc.n	800358a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003586:	2301      	movs	r3, #1
 8003588:	e00f      	b.n	80035aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800358a:	4a0a      	ldr	r2, [pc, #40]	; (80035b4 <SysTick_Config+0x40>)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	3b01      	subs	r3, #1
 8003590:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003592:	210f      	movs	r1, #15
 8003594:	f04f 30ff 	mov.w	r0, #4294967295
 8003598:	f7ff ff7a 	bl	8003490 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800359c:	4b05      	ldr	r3, [pc, #20]	; (80035b4 <SysTick_Config+0x40>)
 800359e:	2200      	movs	r2, #0
 80035a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035a2:	4b04      	ldr	r3, [pc, #16]	; (80035b4 <SysTick_Config+0x40>)
 80035a4:	2207      	movs	r2, #7
 80035a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035a8:	2300      	movs	r3, #0
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3708      	adds	r7, #8
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	e000e010 	.word	0xe000e010

080035b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2b07      	cmp	r3, #7
 80035c4:	d00f      	beq.n	80035e6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2b06      	cmp	r3, #6
 80035ca:	d00c      	beq.n	80035e6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2b05      	cmp	r3, #5
 80035d0:	d009      	beq.n	80035e6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2b04      	cmp	r3, #4
 80035d6:	d006      	beq.n	80035e6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2b03      	cmp	r3, #3
 80035dc:	d003      	beq.n	80035e6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80035de:	2192      	movs	r1, #146	; 0x92
 80035e0:	4804      	ldr	r0, [pc, #16]	; (80035f4 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80035e2:	f7fe fe31 	bl	8002248 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f7ff ff04 	bl	80033f4 <__NVIC_SetPriorityGrouping>
}
 80035ec:	bf00      	nop
 80035ee:	3708      	adds	r7, #8
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	08010370 	.word	0x08010370

080035f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b086      	sub	sp, #24
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	4603      	mov	r3, r0
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	607a      	str	r2, [r7, #4]
 8003604:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003606:	2300      	movs	r3, #0
 8003608:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2b0f      	cmp	r3, #15
 800360e:	d903      	bls.n	8003618 <HAL_NVIC_SetPriority+0x20>
 8003610:	21aa      	movs	r1, #170	; 0xaa
 8003612:	480e      	ldr	r0, [pc, #56]	; (800364c <HAL_NVIC_SetPriority+0x54>)
 8003614:	f7fe fe18 	bl	8002248 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	2b0f      	cmp	r3, #15
 800361c:	d903      	bls.n	8003626 <HAL_NVIC_SetPriority+0x2e>
 800361e:	21ab      	movs	r1, #171	; 0xab
 8003620:	480a      	ldr	r0, [pc, #40]	; (800364c <HAL_NVIC_SetPriority+0x54>)
 8003622:	f7fe fe11 	bl	8002248 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003626:	f7ff ff09 	bl	800343c <__NVIC_GetPriorityGrouping>
 800362a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	68b9      	ldr	r1, [r7, #8]
 8003630:	6978      	ldr	r0, [r7, #20]
 8003632:	f7ff ff57 	bl	80034e4 <NVIC_EncodePriority>
 8003636:	4602      	mov	r2, r0
 8003638:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800363c:	4611      	mov	r1, r2
 800363e:	4618      	mov	r0, r3
 8003640:	f7ff ff26 	bl	8003490 <__NVIC_SetPriority>
}
 8003644:	bf00      	nop
 8003646:	3718      	adds	r7, #24
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}
 800364c:	08010370 	.word	0x08010370

08003650 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
 8003656:	4603      	mov	r3, r0
 8003658:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800365a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800365e:	2b00      	cmp	r3, #0
 8003660:	da03      	bge.n	800366a <HAL_NVIC_EnableIRQ+0x1a>
 8003662:	21be      	movs	r1, #190	; 0xbe
 8003664:	4805      	ldr	r0, [pc, #20]	; (800367c <HAL_NVIC_EnableIRQ+0x2c>)
 8003666:	f7fe fdef 	bl	8002248 <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800366a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800366e:	4618      	mov	r0, r3
 8003670:	f7ff fef2 	bl	8003458 <__NVIC_EnableIRQ>
}
 8003674:	bf00      	nop
 8003676:	3708      	adds	r7, #8
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}
 800367c:	08010370 	.word	0x08010370

08003680 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8003684:	f7ff ff60 	bl	8003548 <__NVIC_SystemReset>

08003688 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f7ff ff6f 	bl	8003574 <SysTick_Config>
 8003696:	4603      	mov	r3, r0
}
 8003698:	4618      	mov	r0, r3
 800369a:	3708      	adds	r7, #8
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}

080036a0 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b085      	sub	sp, #20
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036a8:	2300      	movs	r3, #0
 80036aa:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d008      	beq.n	80036c8 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2204      	movs	r2, #4
 80036ba:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2200      	movs	r2, #0
 80036c0:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e020      	b.n	800370a <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f022 020e 	bic.w	r2, r2, #14
 80036d6:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f022 0201 	bic.w	r2, r2, #1
 80036e6:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036f0:	2101      	movs	r1, #1
 80036f2:	fa01 f202 	lsl.w	r2, r1, r2
 80036f6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003708:	7bfb      	ldrb	r3, [r7, #15]
}
 800370a:	4618      	mov	r0, r3
 800370c:	3714      	adds	r7, #20
 800370e:	46bd      	mov	sp, r7
 8003710:	bc80      	pop	{r7}
 8003712:	4770      	bx	lr

08003714 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800371c:	2300      	movs	r3, #0
 800371e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003726:	2b02      	cmp	r3, #2
 8003728:	d005      	beq.n	8003736 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2204      	movs	r2, #4
 800372e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	73fb      	strb	r3, [r7, #15]
 8003734:	e0d6      	b.n	80038e4 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f022 020e 	bic.w	r2, r2, #14
 8003744:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f022 0201 	bic.w	r2, r2, #1
 8003754:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	461a      	mov	r2, r3
 800375c:	4b64      	ldr	r3, [pc, #400]	; (80038f0 <HAL_DMA_Abort_IT+0x1dc>)
 800375e:	429a      	cmp	r2, r3
 8003760:	d958      	bls.n	8003814 <HAL_DMA_Abort_IT+0x100>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a63      	ldr	r2, [pc, #396]	; (80038f4 <HAL_DMA_Abort_IT+0x1e0>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d04f      	beq.n	800380c <HAL_DMA_Abort_IT+0xf8>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a61      	ldr	r2, [pc, #388]	; (80038f8 <HAL_DMA_Abort_IT+0x1e4>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d048      	beq.n	8003808 <HAL_DMA_Abort_IT+0xf4>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a60      	ldr	r2, [pc, #384]	; (80038fc <HAL_DMA_Abort_IT+0x1e8>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d040      	beq.n	8003802 <HAL_DMA_Abort_IT+0xee>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a5e      	ldr	r2, [pc, #376]	; (8003900 <HAL_DMA_Abort_IT+0x1ec>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d038      	beq.n	80037fc <HAL_DMA_Abort_IT+0xe8>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a5d      	ldr	r2, [pc, #372]	; (8003904 <HAL_DMA_Abort_IT+0x1f0>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d030      	beq.n	80037f6 <HAL_DMA_Abort_IT+0xe2>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a5b      	ldr	r2, [pc, #364]	; (8003908 <HAL_DMA_Abort_IT+0x1f4>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d028      	beq.n	80037f0 <HAL_DMA_Abort_IT+0xdc>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a53      	ldr	r2, [pc, #332]	; (80038f0 <HAL_DMA_Abort_IT+0x1dc>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d020      	beq.n	80037ea <HAL_DMA_Abort_IT+0xd6>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a57      	ldr	r2, [pc, #348]	; (800390c <HAL_DMA_Abort_IT+0x1f8>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d019      	beq.n	80037e6 <HAL_DMA_Abort_IT+0xd2>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a56      	ldr	r2, [pc, #344]	; (8003910 <HAL_DMA_Abort_IT+0x1fc>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d012      	beq.n	80037e2 <HAL_DMA_Abort_IT+0xce>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a54      	ldr	r2, [pc, #336]	; (8003914 <HAL_DMA_Abort_IT+0x200>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d00a      	beq.n	80037dc <HAL_DMA_Abort_IT+0xc8>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a53      	ldr	r2, [pc, #332]	; (8003918 <HAL_DMA_Abort_IT+0x204>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d102      	bne.n	80037d6 <HAL_DMA_Abort_IT+0xc2>
 80037d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037d4:	e01b      	b.n	800380e <HAL_DMA_Abort_IT+0xfa>
 80037d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80037da:	e018      	b.n	800380e <HAL_DMA_Abort_IT+0xfa>
 80037dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037e0:	e015      	b.n	800380e <HAL_DMA_Abort_IT+0xfa>
 80037e2:	2310      	movs	r3, #16
 80037e4:	e013      	b.n	800380e <HAL_DMA_Abort_IT+0xfa>
 80037e6:	2301      	movs	r3, #1
 80037e8:	e011      	b.n	800380e <HAL_DMA_Abort_IT+0xfa>
 80037ea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80037ee:	e00e      	b.n	800380e <HAL_DMA_Abort_IT+0xfa>
 80037f0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80037f4:	e00b      	b.n	800380e <HAL_DMA_Abort_IT+0xfa>
 80037f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80037fa:	e008      	b.n	800380e <HAL_DMA_Abort_IT+0xfa>
 80037fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003800:	e005      	b.n	800380e <HAL_DMA_Abort_IT+0xfa>
 8003802:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003806:	e002      	b.n	800380e <HAL_DMA_Abort_IT+0xfa>
 8003808:	2310      	movs	r3, #16
 800380a:	e000      	b.n	800380e <HAL_DMA_Abort_IT+0xfa>
 800380c:	2301      	movs	r3, #1
 800380e:	4a43      	ldr	r2, [pc, #268]	; (800391c <HAL_DMA_Abort_IT+0x208>)
 8003810:	6053      	str	r3, [r2, #4]
 8003812:	e057      	b.n	80038c4 <HAL_DMA_Abort_IT+0x1b0>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a36      	ldr	r2, [pc, #216]	; (80038f4 <HAL_DMA_Abort_IT+0x1e0>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d04f      	beq.n	80038be <HAL_DMA_Abort_IT+0x1aa>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a35      	ldr	r2, [pc, #212]	; (80038f8 <HAL_DMA_Abort_IT+0x1e4>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d048      	beq.n	80038ba <HAL_DMA_Abort_IT+0x1a6>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a33      	ldr	r2, [pc, #204]	; (80038fc <HAL_DMA_Abort_IT+0x1e8>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d040      	beq.n	80038b4 <HAL_DMA_Abort_IT+0x1a0>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a32      	ldr	r2, [pc, #200]	; (8003900 <HAL_DMA_Abort_IT+0x1ec>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d038      	beq.n	80038ae <HAL_DMA_Abort_IT+0x19a>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a30      	ldr	r2, [pc, #192]	; (8003904 <HAL_DMA_Abort_IT+0x1f0>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d030      	beq.n	80038a8 <HAL_DMA_Abort_IT+0x194>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a2f      	ldr	r2, [pc, #188]	; (8003908 <HAL_DMA_Abort_IT+0x1f4>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d028      	beq.n	80038a2 <HAL_DMA_Abort_IT+0x18e>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a26      	ldr	r2, [pc, #152]	; (80038f0 <HAL_DMA_Abort_IT+0x1dc>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d020      	beq.n	800389c <HAL_DMA_Abort_IT+0x188>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a2b      	ldr	r2, [pc, #172]	; (800390c <HAL_DMA_Abort_IT+0x1f8>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d019      	beq.n	8003898 <HAL_DMA_Abort_IT+0x184>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a29      	ldr	r2, [pc, #164]	; (8003910 <HAL_DMA_Abort_IT+0x1fc>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d012      	beq.n	8003894 <HAL_DMA_Abort_IT+0x180>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a28      	ldr	r2, [pc, #160]	; (8003914 <HAL_DMA_Abort_IT+0x200>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d00a      	beq.n	800388e <HAL_DMA_Abort_IT+0x17a>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a26      	ldr	r2, [pc, #152]	; (8003918 <HAL_DMA_Abort_IT+0x204>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d102      	bne.n	8003888 <HAL_DMA_Abort_IT+0x174>
 8003882:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003886:	e01b      	b.n	80038c0 <HAL_DMA_Abort_IT+0x1ac>
 8003888:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800388c:	e018      	b.n	80038c0 <HAL_DMA_Abort_IT+0x1ac>
 800388e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003892:	e015      	b.n	80038c0 <HAL_DMA_Abort_IT+0x1ac>
 8003894:	2310      	movs	r3, #16
 8003896:	e013      	b.n	80038c0 <HAL_DMA_Abort_IT+0x1ac>
 8003898:	2301      	movs	r3, #1
 800389a:	e011      	b.n	80038c0 <HAL_DMA_Abort_IT+0x1ac>
 800389c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80038a0:	e00e      	b.n	80038c0 <HAL_DMA_Abort_IT+0x1ac>
 80038a2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80038a6:	e00b      	b.n	80038c0 <HAL_DMA_Abort_IT+0x1ac>
 80038a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80038ac:	e008      	b.n	80038c0 <HAL_DMA_Abort_IT+0x1ac>
 80038ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038b2:	e005      	b.n	80038c0 <HAL_DMA_Abort_IT+0x1ac>
 80038b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80038b8:	e002      	b.n	80038c0 <HAL_DMA_Abort_IT+0x1ac>
 80038ba:	2310      	movs	r3, #16
 80038bc:	e000      	b.n	80038c0 <HAL_DMA_Abort_IT+0x1ac>
 80038be:	2301      	movs	r3, #1
 80038c0:	4a17      	ldr	r2, [pc, #92]	; (8003920 <HAL_DMA_Abort_IT+0x20c>)
 80038c2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d003      	beq.n	80038e4 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	4798      	blx	r3
    } 
  }
  return status;
 80038e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3710      	adds	r7, #16
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	40020080 	.word	0x40020080
 80038f4:	40020008 	.word	0x40020008
 80038f8:	4002001c 	.word	0x4002001c
 80038fc:	40020030 	.word	0x40020030
 8003900:	40020044 	.word	0x40020044
 8003904:	40020058 	.word	0x40020058
 8003908:	4002006c 	.word	0x4002006c
 800390c:	40020408 	.word	0x40020408
 8003910:	4002041c 	.word	0x4002041c
 8003914:	40020430 	.word	0x40020430
 8003918:	40020444 	.word	0x40020444
 800391c:	40020400 	.word	0x40020400
 8003920:	40020000 	.word	0x40020000

08003924 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b08a      	sub	sp, #40	; 0x28
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800392e:	2300      	movs	r3, #0
 8003930:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003932:	2300      	movs	r3, #0
 8003934:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4aa9      	ldr	r2, [pc, #676]	; (8003be0 <HAL_GPIO_Init+0x2bc>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d01b      	beq.n	8003976 <HAL_GPIO_Init+0x52>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4aa8      	ldr	r2, [pc, #672]	; (8003be4 <HAL_GPIO_Init+0x2c0>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d017      	beq.n	8003976 <HAL_GPIO_Init+0x52>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4aa7      	ldr	r2, [pc, #668]	; (8003be8 <HAL_GPIO_Init+0x2c4>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d013      	beq.n	8003976 <HAL_GPIO_Init+0x52>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4aa6      	ldr	r2, [pc, #664]	; (8003bec <HAL_GPIO_Init+0x2c8>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d00f      	beq.n	8003976 <HAL_GPIO_Init+0x52>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4aa5      	ldr	r2, [pc, #660]	; (8003bf0 <HAL_GPIO_Init+0x2cc>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d00b      	beq.n	8003976 <HAL_GPIO_Init+0x52>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4aa4      	ldr	r2, [pc, #656]	; (8003bf4 <HAL_GPIO_Init+0x2d0>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d007      	beq.n	8003976 <HAL_GPIO_Init+0x52>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4aa3      	ldr	r2, [pc, #652]	; (8003bf8 <HAL_GPIO_Init+0x2d4>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d003      	beq.n	8003976 <HAL_GPIO_Init+0x52>
 800396e:	21bd      	movs	r1, #189	; 0xbd
 8003970:	48a2      	ldr	r0, [pc, #648]	; (8003bfc <HAL_GPIO_Init+0x2d8>)
 8003972:	f7fe fc69 	bl	8002248 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	b29b      	uxth	r3, r3
 800397c:	2b00      	cmp	r3, #0
 800397e:	d005      	beq.n	800398c <HAL_GPIO_Init+0x68>
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	0c1b      	lsrs	r3, r3, #16
 8003986:	041b      	lsls	r3, r3, #16
 8003988:	2b00      	cmp	r3, #0
 800398a:	d003      	beq.n	8003994 <HAL_GPIO_Init+0x70>
 800398c:	21be      	movs	r1, #190	; 0xbe
 800398e:	489b      	ldr	r0, [pc, #620]	; (8003bfc <HAL_GPIO_Init+0x2d8>)
 8003990:	f7fe fc5a 	bl	8002248 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	2b00      	cmp	r3, #0
 800399a:	f000 8235 	beq.w	8003e08 <HAL_GPIO_Init+0x4e4>
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	f000 8230 	beq.w	8003e08 <HAL_GPIO_Init+0x4e4>
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	2b11      	cmp	r3, #17
 80039ae:	f000 822b 	beq.w	8003e08 <HAL_GPIO_Init+0x4e4>
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	f000 8226 	beq.w	8003e08 <HAL_GPIO_Init+0x4e4>
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	2b12      	cmp	r3, #18
 80039c2:	f000 8221 	beq.w	8003e08 <HAL_GPIO_Init+0x4e4>
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	4a8d      	ldr	r2, [pc, #564]	; (8003c00 <HAL_GPIO_Init+0x2dc>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	f000 821b 	beq.w	8003e08 <HAL_GPIO_Init+0x4e4>
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	4a8b      	ldr	r2, [pc, #556]	; (8003c04 <HAL_GPIO_Init+0x2e0>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	f000 8215 	beq.w	8003e08 <HAL_GPIO_Init+0x4e4>
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	4a89      	ldr	r2, [pc, #548]	; (8003c08 <HAL_GPIO_Init+0x2e4>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	f000 820f 	beq.w	8003e08 <HAL_GPIO_Init+0x4e4>
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	4a87      	ldr	r2, [pc, #540]	; (8003c0c <HAL_GPIO_Init+0x2e8>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	f000 8209 	beq.w	8003e08 <HAL_GPIO_Init+0x4e4>
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	4a85      	ldr	r2, [pc, #532]	; (8003c10 <HAL_GPIO_Init+0x2ec>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	f000 8203 	beq.w	8003e08 <HAL_GPIO_Init+0x4e4>
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	4a83      	ldr	r2, [pc, #524]	; (8003c14 <HAL_GPIO_Init+0x2f0>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	f000 81fd 	beq.w	8003e08 <HAL_GPIO_Init+0x4e4>
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	2b03      	cmp	r3, #3
 8003a14:	f000 81f8 	beq.w	8003e08 <HAL_GPIO_Init+0x4e4>
 8003a18:	21bf      	movs	r1, #191	; 0xbf
 8003a1a:	4878      	ldr	r0, [pc, #480]	; (8003bfc <HAL_GPIO_Init+0x2d8>)
 8003a1c:	f7fe fc14 	bl	8002248 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a20:	e1f2      	b.n	8003e08 <HAL_GPIO_Init+0x4e4>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003a22:	2201      	movs	r2, #1
 8003a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a26:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2a:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	69fa      	ldr	r2, [r7, #28]
 8003a32:	4013      	ands	r3, r2
 8003a34:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003a36:	69ba      	ldr	r2, [r7, #24]
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	f040 81e1 	bne.w	8003e02 <HAL_GPIO_Init+0x4de>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	4a67      	ldr	r2, [pc, #412]	; (8003be0 <HAL_GPIO_Init+0x2bc>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d01b      	beq.n	8003a80 <HAL_GPIO_Init+0x15c>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4a66      	ldr	r2, [pc, #408]	; (8003be4 <HAL_GPIO_Init+0x2c0>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d017      	beq.n	8003a80 <HAL_GPIO_Init+0x15c>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a65      	ldr	r2, [pc, #404]	; (8003be8 <HAL_GPIO_Init+0x2c4>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d013      	beq.n	8003a80 <HAL_GPIO_Init+0x15c>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4a64      	ldr	r2, [pc, #400]	; (8003bec <HAL_GPIO_Init+0x2c8>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d00f      	beq.n	8003a80 <HAL_GPIO_Init+0x15c>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	4a63      	ldr	r2, [pc, #396]	; (8003bf0 <HAL_GPIO_Init+0x2cc>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d00b      	beq.n	8003a80 <HAL_GPIO_Init+0x15c>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	4a62      	ldr	r2, [pc, #392]	; (8003bf4 <HAL_GPIO_Init+0x2d0>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d007      	beq.n	8003a80 <HAL_GPIO_Init+0x15c>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	4a61      	ldr	r2, [pc, #388]	; (8003bf8 <HAL_GPIO_Init+0x2d4>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d003      	beq.n	8003a80 <HAL_GPIO_Init+0x15c>
 8003a78:	21cd      	movs	r1, #205	; 0xcd
 8003a7a:	4860      	ldr	r0, [pc, #384]	; (8003bfc <HAL_GPIO_Init+0x2d8>)
 8003a7c:	f7fe fbe4 	bl	8002248 <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	4a63      	ldr	r2, [pc, #396]	; (8003c14 <HAL_GPIO_Init+0x2f0>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	f000 80c6 	beq.w	8003c18 <HAL_GPIO_Init+0x2f4>
 8003a8c:	4a61      	ldr	r2, [pc, #388]	; (8003c14 <HAL_GPIO_Init+0x2f0>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	f200 80ec 	bhi.w	8003c6c <HAL_GPIO_Init+0x348>
 8003a94:	4a5c      	ldr	r2, [pc, #368]	; (8003c08 <HAL_GPIO_Init+0x2e4>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	f000 80be 	beq.w	8003c18 <HAL_GPIO_Init+0x2f4>
 8003a9c:	4a5a      	ldr	r2, [pc, #360]	; (8003c08 <HAL_GPIO_Init+0x2e4>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	f200 80e4 	bhi.w	8003c6c <HAL_GPIO_Init+0x348>
 8003aa4:	4a5a      	ldr	r2, [pc, #360]	; (8003c10 <HAL_GPIO_Init+0x2ec>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	f000 80b6 	beq.w	8003c18 <HAL_GPIO_Init+0x2f4>
 8003aac:	4a58      	ldr	r2, [pc, #352]	; (8003c10 <HAL_GPIO_Init+0x2ec>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	f200 80dc 	bhi.w	8003c6c <HAL_GPIO_Init+0x348>
 8003ab4:	4a53      	ldr	r2, [pc, #332]	; (8003c04 <HAL_GPIO_Init+0x2e0>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	f000 80ae 	beq.w	8003c18 <HAL_GPIO_Init+0x2f4>
 8003abc:	4a51      	ldr	r2, [pc, #324]	; (8003c04 <HAL_GPIO_Init+0x2e0>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	f200 80d4 	bhi.w	8003c6c <HAL_GPIO_Init+0x348>
 8003ac4:	4a51      	ldr	r2, [pc, #324]	; (8003c0c <HAL_GPIO_Init+0x2e8>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	f000 80a6 	beq.w	8003c18 <HAL_GPIO_Init+0x2f4>
 8003acc:	4a4f      	ldr	r2, [pc, #316]	; (8003c0c <HAL_GPIO_Init+0x2e8>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	f200 80cc 	bhi.w	8003c6c <HAL_GPIO_Init+0x348>
 8003ad4:	2b12      	cmp	r3, #18
 8003ad6:	d82b      	bhi.n	8003b30 <HAL_GPIO_Init+0x20c>
 8003ad8:	2b12      	cmp	r3, #18
 8003ada:	f200 80c7 	bhi.w	8003c6c <HAL_GPIO_Init+0x348>
 8003ade:	a201      	add	r2, pc, #4	; (adr r2, 8003ae4 <HAL_GPIO_Init+0x1c0>)
 8003ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ae4:	08003c19 	.word	0x08003c19
 8003ae8:	08003b39 	.word	0x08003b39
 8003aec:	08003b8b 	.word	0x08003b8b
 8003af0:	08003c67 	.word	0x08003c67
 8003af4:	08003c6d 	.word	0x08003c6d
 8003af8:	08003c6d 	.word	0x08003c6d
 8003afc:	08003c6d 	.word	0x08003c6d
 8003b00:	08003c6d 	.word	0x08003c6d
 8003b04:	08003c6d 	.word	0x08003c6d
 8003b08:	08003c6d 	.word	0x08003c6d
 8003b0c:	08003c6d 	.word	0x08003c6d
 8003b10:	08003c6d 	.word	0x08003c6d
 8003b14:	08003c6d 	.word	0x08003c6d
 8003b18:	08003c6d 	.word	0x08003c6d
 8003b1c:	08003c6d 	.word	0x08003c6d
 8003b20:	08003c6d 	.word	0x08003c6d
 8003b24:	08003c6d 	.word	0x08003c6d
 8003b28:	08003b61 	.word	0x08003b61
 8003b2c:	08003bb5 	.word	0x08003bb5
 8003b30:	4a33      	ldr	r2, [pc, #204]	; (8003c00 <HAL_GPIO_Init+0x2dc>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d070      	beq.n	8003c18 <HAL_GPIO_Init+0x2f4>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003b36:	e099      	b.n	8003c6c <HAL_GPIO_Init+0x348>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	d00b      	beq.n	8003b58 <HAL_GPIO_Init+0x234>
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d007      	beq.n	8003b58 <HAL_GPIO_Init+0x234>
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	2b03      	cmp	r3, #3
 8003b4e:	d003      	beq.n	8003b58 <HAL_GPIO_Init+0x234>
 8003b50:	21d5      	movs	r1, #213	; 0xd5
 8003b52:	482a      	ldr	r0, [pc, #168]	; (8003bfc <HAL_GPIO_Init+0x2d8>)
 8003b54:	f7fe fb78 	bl	8002248 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	623b      	str	r3, [r7, #32]
          break;
 8003b5e:	e086      	b.n	8003c6e <HAL_GPIO_Init+0x34a>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d00b      	beq.n	8003b80 <HAL_GPIO_Init+0x25c>
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d007      	beq.n	8003b80 <HAL_GPIO_Init+0x25c>
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	2b03      	cmp	r3, #3
 8003b76:	d003      	beq.n	8003b80 <HAL_GPIO_Init+0x25c>
 8003b78:	21dc      	movs	r1, #220	; 0xdc
 8003b7a:	4820      	ldr	r0, [pc, #128]	; (8003bfc <HAL_GPIO_Init+0x2d8>)
 8003b7c:	f7fe fb64 	bl	8002248 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	3304      	adds	r3, #4
 8003b86:	623b      	str	r3, [r7, #32]
          break;
 8003b88:	e071      	b.n	8003c6e <HAL_GPIO_Init+0x34a>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d00b      	beq.n	8003baa <HAL_GPIO_Init+0x286>
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d007      	beq.n	8003baa <HAL_GPIO_Init+0x286>
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	2b03      	cmp	r3, #3
 8003ba0:	d003      	beq.n	8003baa <HAL_GPIO_Init+0x286>
 8003ba2:	21e3      	movs	r1, #227	; 0xe3
 8003ba4:	4815      	ldr	r0, [pc, #84]	; (8003bfc <HAL_GPIO_Init+0x2d8>)
 8003ba6:	f7fe fb4f 	bl	8002248 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	3308      	adds	r3, #8
 8003bb0:	623b      	str	r3, [r7, #32]
          break;
 8003bb2:	e05c      	b.n	8003c6e <HAL_GPIO_Init+0x34a>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	d00b      	beq.n	8003bd4 <HAL_GPIO_Init+0x2b0>
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d007      	beq.n	8003bd4 <HAL_GPIO_Init+0x2b0>
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	2b03      	cmp	r3, #3
 8003bca:	d003      	beq.n	8003bd4 <HAL_GPIO_Init+0x2b0>
 8003bcc:	21ea      	movs	r1, #234	; 0xea
 8003bce:	480b      	ldr	r0, [pc, #44]	; (8003bfc <HAL_GPIO_Init+0x2d8>)
 8003bd0:	f7fe fb3a 	bl	8002248 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	330c      	adds	r3, #12
 8003bda:	623b      	str	r3, [r7, #32]
          break;
 8003bdc:	e047      	b.n	8003c6e <HAL_GPIO_Init+0x34a>
 8003bde:	bf00      	nop
 8003be0:	40010800 	.word	0x40010800
 8003be4:	40010c00 	.word	0x40010c00
 8003be8:	40011000 	.word	0x40011000
 8003bec:	40011400 	.word	0x40011400
 8003bf0:	40011800 	.word	0x40011800
 8003bf4:	40011c00 	.word	0x40011c00
 8003bf8:	40012000 	.word	0x40012000
 8003bfc:	080103ac 	.word	0x080103ac
 8003c00:	10110000 	.word	0x10110000
 8003c04:	10210000 	.word	0x10210000
 8003c08:	10310000 	.word	0x10310000
 8003c0c:	10120000 	.word	0x10120000
 8003c10:	10220000 	.word	0x10220000
 8003c14:	10320000 	.word	0x10320000
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d00b      	beq.n	8003c38 <HAL_GPIO_Init+0x314>
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d007      	beq.n	8003c38 <HAL_GPIO_Init+0x314>
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d003      	beq.n	8003c38 <HAL_GPIO_Init+0x314>
 8003c30:	21f7      	movs	r1, #247	; 0xf7
 8003c32:	487c      	ldr	r0, [pc, #496]	; (8003e24 <HAL_GPIO_Init+0x500>)
 8003c34:	f7fe fb08 	bl	8002248 <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d102      	bne.n	8003c46 <HAL_GPIO_Init+0x322>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003c40:	2304      	movs	r3, #4
 8003c42:	623b      	str	r3, [r7, #32]
          break;
 8003c44:	e013      	b.n	8003c6e <HAL_GPIO_Init+0x34a>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d105      	bne.n	8003c5a <HAL_GPIO_Init+0x336>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003c4e:	2308      	movs	r3, #8
 8003c50:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	69fa      	ldr	r2, [r7, #28]
 8003c56:	611a      	str	r2, [r3, #16]
          break;
 8003c58:	e009      	b.n	8003c6e <HAL_GPIO_Init+0x34a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003c5a:	2308      	movs	r3, #8
 8003c5c:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	69fa      	ldr	r2, [r7, #28]
 8003c62:	615a      	str	r2, [r3, #20]
          break;
 8003c64:	e003      	b.n	8003c6e <HAL_GPIO_Init+0x34a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003c66:	2300      	movs	r3, #0
 8003c68:	623b      	str	r3, [r7, #32]
          break;
 8003c6a:	e000      	b.n	8003c6e <HAL_GPIO_Init+0x34a>
          break;
 8003c6c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003c6e:	69bb      	ldr	r3, [r7, #24]
 8003c70:	2bff      	cmp	r3, #255	; 0xff
 8003c72:	d801      	bhi.n	8003c78 <HAL_GPIO_Init+0x354>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	e001      	b.n	8003c7c <HAL_GPIO_Init+0x358>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	3304      	adds	r3, #4
 8003c7c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003c7e:	69bb      	ldr	r3, [r7, #24]
 8003c80:	2bff      	cmp	r3, #255	; 0xff
 8003c82:	d802      	bhi.n	8003c8a <HAL_GPIO_Init+0x366>
 8003c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	e002      	b.n	8003c90 <HAL_GPIO_Init+0x36c>
 8003c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8c:	3b08      	subs	r3, #8
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	210f      	movs	r1, #15
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c9e:	43db      	mvns	r3, r3
 8003ca0:	401a      	ands	r2, r3
 8003ca2:	6a39      	ldr	r1, [r7, #32]
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8003caa:	431a      	orrs	r2, r3
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	f000 80a2 	beq.w	8003e02 <HAL_GPIO_Init+0x4de>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003cbe:	4b5a      	ldr	r3, [pc, #360]	; (8003e28 <HAL_GPIO_Init+0x504>)
 8003cc0:	699b      	ldr	r3, [r3, #24]
 8003cc2:	4a59      	ldr	r2, [pc, #356]	; (8003e28 <HAL_GPIO_Init+0x504>)
 8003cc4:	f043 0301 	orr.w	r3, r3, #1
 8003cc8:	6193      	str	r3, [r2, #24]
 8003cca:	4b57      	ldr	r3, [pc, #348]	; (8003e28 <HAL_GPIO_Init+0x504>)
 8003ccc:	699b      	ldr	r3, [r3, #24]
 8003cce:	f003 0301 	and.w	r3, r3, #1
 8003cd2:	60bb      	str	r3, [r7, #8]
 8003cd4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003cd6:	4a55      	ldr	r2, [pc, #340]	; (8003e2c <HAL_GPIO_Init+0x508>)
 8003cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cda:	089b      	lsrs	r3, r3, #2
 8003cdc:	3302      	adds	r3, #2
 8003cde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ce2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce6:	f003 0303 	and.w	r3, r3, #3
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	220f      	movs	r2, #15
 8003cee:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf2:	43db      	mvns	r3, r3
 8003cf4:	68fa      	ldr	r2, [r7, #12]
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a4c      	ldr	r2, [pc, #304]	; (8003e30 <HAL_GPIO_Init+0x50c>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d01f      	beq.n	8003d42 <HAL_GPIO_Init+0x41e>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a4b      	ldr	r2, [pc, #300]	; (8003e34 <HAL_GPIO_Init+0x510>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d019      	beq.n	8003d3e <HAL_GPIO_Init+0x41a>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4a4a      	ldr	r2, [pc, #296]	; (8003e38 <HAL_GPIO_Init+0x514>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d013      	beq.n	8003d3a <HAL_GPIO_Init+0x416>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a49      	ldr	r2, [pc, #292]	; (8003e3c <HAL_GPIO_Init+0x518>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d00d      	beq.n	8003d36 <HAL_GPIO_Init+0x412>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4a48      	ldr	r2, [pc, #288]	; (8003e40 <HAL_GPIO_Init+0x51c>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d007      	beq.n	8003d32 <HAL_GPIO_Init+0x40e>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4a47      	ldr	r2, [pc, #284]	; (8003e44 <HAL_GPIO_Init+0x520>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d101      	bne.n	8003d2e <HAL_GPIO_Init+0x40a>
 8003d2a:	2305      	movs	r3, #5
 8003d2c:	e00a      	b.n	8003d44 <HAL_GPIO_Init+0x420>
 8003d2e:	2306      	movs	r3, #6
 8003d30:	e008      	b.n	8003d44 <HAL_GPIO_Init+0x420>
 8003d32:	2304      	movs	r3, #4
 8003d34:	e006      	b.n	8003d44 <HAL_GPIO_Init+0x420>
 8003d36:	2303      	movs	r3, #3
 8003d38:	e004      	b.n	8003d44 <HAL_GPIO_Init+0x420>
 8003d3a:	2302      	movs	r3, #2
 8003d3c:	e002      	b.n	8003d44 <HAL_GPIO_Init+0x420>
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e000      	b.n	8003d44 <HAL_GPIO_Init+0x420>
 8003d42:	2300      	movs	r3, #0
 8003d44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d46:	f002 0203 	and.w	r2, r2, #3
 8003d4a:	0092      	lsls	r2, r2, #2
 8003d4c:	4093      	lsls	r3, r2
 8003d4e:	68fa      	ldr	r2, [r7, #12]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003d54:	4935      	ldr	r1, [pc, #212]	; (8003e2c <HAL_GPIO_Init+0x508>)
 8003d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d58:	089b      	lsrs	r3, r3, #2
 8003d5a:	3302      	adds	r3, #2
 8003d5c:	68fa      	ldr	r2, [r7, #12]
 8003d5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d006      	beq.n	8003d7c <HAL_GPIO_Init+0x458>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003d6e:	4b36      	ldr	r3, [pc, #216]	; (8003e48 <HAL_GPIO_Init+0x524>)
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	4935      	ldr	r1, [pc, #212]	; (8003e48 <HAL_GPIO_Init+0x524>)
 8003d74:	69bb      	ldr	r3, [r7, #24]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	600b      	str	r3, [r1, #0]
 8003d7a:	e006      	b.n	8003d8a <HAL_GPIO_Init+0x466>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003d7c:	4b32      	ldr	r3, [pc, #200]	; (8003e48 <HAL_GPIO_Init+0x524>)
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	69bb      	ldr	r3, [r7, #24]
 8003d82:	43db      	mvns	r3, r3
 8003d84:	4930      	ldr	r1, [pc, #192]	; (8003e48 <HAL_GPIO_Init+0x524>)
 8003d86:	4013      	ands	r3, r2
 8003d88:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d006      	beq.n	8003da4 <HAL_GPIO_Init+0x480>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003d96:	4b2c      	ldr	r3, [pc, #176]	; (8003e48 <HAL_GPIO_Init+0x524>)
 8003d98:	685a      	ldr	r2, [r3, #4]
 8003d9a:	492b      	ldr	r1, [pc, #172]	; (8003e48 <HAL_GPIO_Init+0x524>)
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	604b      	str	r3, [r1, #4]
 8003da2:	e006      	b.n	8003db2 <HAL_GPIO_Init+0x48e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003da4:	4b28      	ldr	r3, [pc, #160]	; (8003e48 <HAL_GPIO_Init+0x524>)
 8003da6:	685a      	ldr	r2, [r3, #4]
 8003da8:	69bb      	ldr	r3, [r7, #24]
 8003daa:	43db      	mvns	r3, r3
 8003dac:	4926      	ldr	r1, [pc, #152]	; (8003e48 <HAL_GPIO_Init+0x524>)
 8003dae:	4013      	ands	r3, r2
 8003db0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d006      	beq.n	8003dcc <HAL_GPIO_Init+0x4a8>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003dbe:	4b22      	ldr	r3, [pc, #136]	; (8003e48 <HAL_GPIO_Init+0x524>)
 8003dc0:	689a      	ldr	r2, [r3, #8]
 8003dc2:	4921      	ldr	r1, [pc, #132]	; (8003e48 <HAL_GPIO_Init+0x524>)
 8003dc4:	69bb      	ldr	r3, [r7, #24]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	608b      	str	r3, [r1, #8]
 8003dca:	e006      	b.n	8003dda <HAL_GPIO_Init+0x4b6>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003dcc:	4b1e      	ldr	r3, [pc, #120]	; (8003e48 <HAL_GPIO_Init+0x524>)
 8003dce:	689a      	ldr	r2, [r3, #8]
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	43db      	mvns	r3, r3
 8003dd4:	491c      	ldr	r1, [pc, #112]	; (8003e48 <HAL_GPIO_Init+0x524>)
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d006      	beq.n	8003df4 <HAL_GPIO_Init+0x4d0>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003de6:	4b18      	ldr	r3, [pc, #96]	; (8003e48 <HAL_GPIO_Init+0x524>)
 8003de8:	68da      	ldr	r2, [r3, #12]
 8003dea:	4917      	ldr	r1, [pc, #92]	; (8003e48 <HAL_GPIO_Init+0x524>)
 8003dec:	69bb      	ldr	r3, [r7, #24]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	60cb      	str	r3, [r1, #12]
 8003df2:	e006      	b.n	8003e02 <HAL_GPIO_Init+0x4de>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003df4:	4b14      	ldr	r3, [pc, #80]	; (8003e48 <HAL_GPIO_Init+0x524>)
 8003df6:	68da      	ldr	r2, [r3, #12]
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	43db      	mvns	r3, r3
 8003dfc:	4912      	ldr	r1, [pc, #72]	; (8003e48 <HAL_GPIO_Init+0x524>)
 8003dfe:	4013      	ands	r3, r2
 8003e00:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e04:	3301      	adds	r3, #1
 8003e06:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0e:	fa22 f303 	lsr.w	r3, r2, r3
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	f47f ae05 	bne.w	8003a22 <HAL_GPIO_Init+0xfe>
  }
}
 8003e18:	bf00      	nop
 8003e1a:	bf00      	nop
 8003e1c:	3728      	adds	r7, #40	; 0x28
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	080103ac 	.word	0x080103ac
 8003e28:	40021000 	.word	0x40021000
 8003e2c:	40010000 	.word	0x40010000
 8003e30:	40010800 	.word	0x40010800
 8003e34:	40010c00 	.word	0x40010c00
 8003e38:	40011000 	.word	0x40011000
 8003e3c:	40011400 	.word	0x40011400
 8003e40:	40011800 	.word	0x40011800
 8003e44:	40011c00 	.word	0x40011c00
 8003e48:	40010400 	.word	0x40010400

08003e4c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b084      	sub	sp, #16
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	460b      	mov	r3, r1
 8003e56:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003e58:	887b      	ldrh	r3, [r7, #2]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d004      	beq.n	8003e68 <HAL_GPIO_ReadPin+0x1c>
 8003e5e:	887b      	ldrh	r3, [r7, #2]
 8003e60:	0c1b      	lsrs	r3, r3, #16
 8003e62:	041b      	lsls	r3, r3, #16
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d004      	beq.n	8003e72 <HAL_GPIO_ReadPin+0x26>
 8003e68:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 8003e6c:	4809      	ldr	r0, [pc, #36]	; (8003e94 <HAL_GPIO_ReadPin+0x48>)
 8003e6e:	f7fe f9eb 	bl	8002248 <assert_failed>

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	689a      	ldr	r2, [r3, #8]
 8003e76:	887b      	ldrh	r3, [r7, #2]
 8003e78:	4013      	ands	r3, r2
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d002      	beq.n	8003e84 <HAL_GPIO_ReadPin+0x38>
  {
    bitstatus = GPIO_PIN_SET;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	73fb      	strb	r3, [r7, #15]
 8003e82:	e001      	b.n	8003e88 <HAL_GPIO_ReadPin+0x3c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003e84:	2300      	movs	r3, #0
 8003e86:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003e88:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3710      	adds	r7, #16
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	080103ac 	.word	0x080103ac

08003e98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b082      	sub	sp, #8
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	460b      	mov	r3, r1
 8003ea2:	807b      	strh	r3, [r7, #2]
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003ea8:	887b      	ldrh	r3, [r7, #2]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d004      	beq.n	8003eb8 <HAL_GPIO_WritePin+0x20>
 8003eae:	887b      	ldrh	r3, [r7, #2]
 8003eb0:	0c1b      	lsrs	r3, r3, #16
 8003eb2:	041b      	lsls	r3, r3, #16
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d004      	beq.n	8003ec2 <HAL_GPIO_WritePin+0x2a>
 8003eb8:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8003ebc:	480e      	ldr	r0, [pc, #56]	; (8003ef8 <HAL_GPIO_WritePin+0x60>)
 8003ebe:	f7fe f9c3 	bl	8002248 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8003ec2:	787b      	ldrb	r3, [r7, #1]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d007      	beq.n	8003ed8 <HAL_GPIO_WritePin+0x40>
 8003ec8:	787b      	ldrb	r3, [r7, #1]
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d004      	beq.n	8003ed8 <HAL_GPIO_WritePin+0x40>
 8003ece:	f240 11d5 	movw	r1, #469	; 0x1d5
 8003ed2:	4809      	ldr	r0, [pc, #36]	; (8003ef8 <HAL_GPIO_WritePin+0x60>)
 8003ed4:	f7fe f9b8 	bl	8002248 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8003ed8:	787b      	ldrb	r3, [r7, #1]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d003      	beq.n	8003ee6 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ede:	887a      	ldrh	r2, [r7, #2]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003ee4:	e003      	b.n	8003eee <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003ee6:	887b      	ldrh	r3, [r7, #2]
 8003ee8:	041a      	lsls	r2, r3, #16
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	611a      	str	r2, [r3, #16]
}
 8003eee:	bf00      	nop
 8003ef0:	3708      	adds	r7, #8
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	080103ac 	.word	0x080103ac

08003efc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	460b      	mov	r3, r1
 8003f06:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003f08:	887b      	ldrh	r3, [r7, #2]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d004      	beq.n	8003f18 <HAL_GPIO_TogglePin+0x1c>
 8003f0e:	887b      	ldrh	r3, [r7, #2]
 8003f10:	0c1b      	lsrs	r3, r3, #16
 8003f12:	041b      	lsls	r3, r3, #16
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d004      	beq.n	8003f22 <HAL_GPIO_TogglePin+0x26>
 8003f18:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 8003f1c:	480a      	ldr	r0, [pc, #40]	; (8003f48 <HAL_GPIO_TogglePin+0x4c>)
 8003f1e:	f7fe f993 	bl	8002248 <assert_failed>

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	68db      	ldr	r3, [r3, #12]
 8003f26:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003f28:	887a      	ldrh	r2, [r7, #2]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	041a      	lsls	r2, r3, #16
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	43d9      	mvns	r1, r3
 8003f34:	887b      	ldrh	r3, [r7, #2]
 8003f36:	400b      	ands	r3, r1
 8003f38:	431a      	orrs	r2, r3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	611a      	str	r2, [r3, #16]
}
 8003f3e:	bf00      	nop
 8003f40:	3710      	adds	r7, #16
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	080103ac 	.word	0x080103ac

08003f4c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8003f50:	4b03      	ldr	r3, [pc, #12]	; (8003f60 <HAL_PWR_EnableBkUpAccess+0x14>)
 8003f52:	2201      	movs	r2, #1
 8003f54:	601a      	str	r2, [r3, #0]
}
 8003f56:	bf00      	nop
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bc80      	pop	{r7}
 8003f5c:	4770      	bx	lr
 8003f5e:	bf00      	nop
 8003f60:	420e0020 	.word	0x420e0020

08003f64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b086      	sub	sp, #24
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d101      	bne.n	8003f76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e35c      	b.n	8004630 <HAL_RCC_OscConfig+0x6cc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d01c      	beq.n	8003fb8 <HAL_RCC_OscConfig+0x54>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0301 	and.w	r3, r3, #1
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d116      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x54>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0302 	and.w	r3, r3, #2
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d110      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x54>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 0308 	and.w	r3, r3, #8
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d10a      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x54>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0304 	and.w	r3, r3, #4
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d104      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x54>
 8003fae:	f240 1167 	movw	r1, #359	; 0x167
 8003fb2:	48a5      	ldr	r0, [pc, #660]	; (8004248 <HAL_RCC_OscConfig+0x2e4>)
 8003fb4:	f7fe f948 	bl	8002248 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0301 	and.w	r3, r3, #1
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	f000 809a 	beq.w	80040fa <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d00e      	beq.n	8003fec <HAL_RCC_OscConfig+0x88>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fd6:	d009      	beq.n	8003fec <HAL_RCC_OscConfig+0x88>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fe0:	d004      	beq.n	8003fec <HAL_RCC_OscConfig+0x88>
 8003fe2:	f240 116d 	movw	r1, #365	; 0x16d
 8003fe6:	4898      	ldr	r0, [pc, #608]	; (8004248 <HAL_RCC_OscConfig+0x2e4>)
 8003fe8:	f7fe f92e 	bl	8002248 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003fec:	4b97      	ldr	r3, [pc, #604]	; (800424c <HAL_RCC_OscConfig+0x2e8>)
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f003 030c 	and.w	r3, r3, #12
 8003ff4:	2b04      	cmp	r3, #4
 8003ff6:	d00c      	beq.n	8004012 <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003ff8:	4b94      	ldr	r3, [pc, #592]	; (800424c <HAL_RCC_OscConfig+0x2e8>)
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	f003 030c 	and.w	r3, r3, #12
 8004000:	2b08      	cmp	r3, #8
 8004002:	d112      	bne.n	800402a <HAL_RCC_OscConfig+0xc6>
 8004004:	4b91      	ldr	r3, [pc, #580]	; (800424c <HAL_RCC_OscConfig+0x2e8>)
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800400c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004010:	d10b      	bne.n	800402a <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004012:	4b8e      	ldr	r3, [pc, #568]	; (800424c <HAL_RCC_OscConfig+0x2e8>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800401a:	2b00      	cmp	r3, #0
 800401c:	d06c      	beq.n	80040f8 <HAL_RCC_OscConfig+0x194>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d168      	bne.n	80040f8 <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e302      	b.n	8004630 <HAL_RCC_OscConfig+0x6cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004032:	d106      	bne.n	8004042 <HAL_RCC_OscConfig+0xde>
 8004034:	4b85      	ldr	r3, [pc, #532]	; (800424c <HAL_RCC_OscConfig+0x2e8>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a84      	ldr	r2, [pc, #528]	; (800424c <HAL_RCC_OscConfig+0x2e8>)
 800403a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800403e:	6013      	str	r3, [r2, #0]
 8004040:	e02e      	b.n	80040a0 <HAL_RCC_OscConfig+0x13c>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d10c      	bne.n	8004064 <HAL_RCC_OscConfig+0x100>
 800404a:	4b80      	ldr	r3, [pc, #512]	; (800424c <HAL_RCC_OscConfig+0x2e8>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a7f      	ldr	r2, [pc, #508]	; (800424c <HAL_RCC_OscConfig+0x2e8>)
 8004050:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004054:	6013      	str	r3, [r2, #0]
 8004056:	4b7d      	ldr	r3, [pc, #500]	; (800424c <HAL_RCC_OscConfig+0x2e8>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a7c      	ldr	r2, [pc, #496]	; (800424c <HAL_RCC_OscConfig+0x2e8>)
 800405c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004060:	6013      	str	r3, [r2, #0]
 8004062:	e01d      	b.n	80040a0 <HAL_RCC_OscConfig+0x13c>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800406c:	d10c      	bne.n	8004088 <HAL_RCC_OscConfig+0x124>
 800406e:	4b77      	ldr	r3, [pc, #476]	; (800424c <HAL_RCC_OscConfig+0x2e8>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a76      	ldr	r2, [pc, #472]	; (800424c <HAL_RCC_OscConfig+0x2e8>)
 8004074:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004078:	6013      	str	r3, [r2, #0]
 800407a:	4b74      	ldr	r3, [pc, #464]	; (800424c <HAL_RCC_OscConfig+0x2e8>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a73      	ldr	r2, [pc, #460]	; (800424c <HAL_RCC_OscConfig+0x2e8>)
 8004080:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004084:	6013      	str	r3, [r2, #0]
 8004086:	e00b      	b.n	80040a0 <HAL_RCC_OscConfig+0x13c>
 8004088:	4b70      	ldr	r3, [pc, #448]	; (800424c <HAL_RCC_OscConfig+0x2e8>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a6f      	ldr	r2, [pc, #444]	; (800424c <HAL_RCC_OscConfig+0x2e8>)
 800408e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004092:	6013      	str	r3, [r2, #0]
 8004094:	4b6d      	ldr	r3, [pc, #436]	; (800424c <HAL_RCC_OscConfig+0x2e8>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a6c      	ldr	r2, [pc, #432]	; (800424c <HAL_RCC_OscConfig+0x2e8>)
 800409a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800409e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d013      	beq.n	80040d0 <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040a8:	f7fe fd9e 	bl	8002be8 <HAL_GetTick>
 80040ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040ae:	e008      	b.n	80040c2 <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040b0:	f7fe fd9a 	bl	8002be8 <HAL_GetTick>
 80040b4:	4602      	mov	r2, r0
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	2b64      	cmp	r3, #100	; 0x64
 80040bc:	d901      	bls.n	80040c2 <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e2b6      	b.n	8004630 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040c2:	4b62      	ldr	r3, [pc, #392]	; (800424c <HAL_RCC_OscConfig+0x2e8>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d0f0      	beq.n	80040b0 <HAL_RCC_OscConfig+0x14c>
 80040ce:	e014      	b.n	80040fa <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040d0:	f7fe fd8a 	bl	8002be8 <HAL_GetTick>
 80040d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040d6:	e008      	b.n	80040ea <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040d8:	f7fe fd86 	bl	8002be8 <HAL_GetTick>
 80040dc:	4602      	mov	r2, r0
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	2b64      	cmp	r3, #100	; 0x64
 80040e4:	d901      	bls.n	80040ea <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	e2a2      	b.n	8004630 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040ea:	4b58      	ldr	r3, [pc, #352]	; (800424c <HAL_RCC_OscConfig+0x2e8>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d1f0      	bne.n	80040d8 <HAL_RCC_OscConfig+0x174>
 80040f6:	e000      	b.n	80040fa <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0302 	and.w	r3, r3, #2
 8004102:	2b00      	cmp	r3, #0
 8004104:	d079      	beq.n	80041fa <HAL_RCC_OscConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d008      	beq.n	8004120 <HAL_RCC_OscConfig+0x1bc>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	2b01      	cmp	r3, #1
 8004114:	d004      	beq.n	8004120 <HAL_RCC_OscConfig+0x1bc>
 8004116:	f240 11a1 	movw	r1, #417	; 0x1a1
 800411a:	484b      	ldr	r0, [pc, #300]	; (8004248 <HAL_RCC_OscConfig+0x2e4>)
 800411c:	f7fe f894 	bl	8002248 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	695b      	ldr	r3, [r3, #20]
 8004124:	2b1f      	cmp	r3, #31
 8004126:	d904      	bls.n	8004132 <HAL_RCC_OscConfig+0x1ce>
 8004128:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 800412c:	4846      	ldr	r0, [pc, #280]	; (8004248 <HAL_RCC_OscConfig+0x2e4>)
 800412e:	f7fe f88b 	bl	8002248 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004132:	4b46      	ldr	r3, [pc, #280]	; (800424c <HAL_RCC_OscConfig+0x2e8>)
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	f003 030c 	and.w	r3, r3, #12
 800413a:	2b00      	cmp	r3, #0
 800413c:	d00b      	beq.n	8004156 <HAL_RCC_OscConfig+0x1f2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800413e:	4b43      	ldr	r3, [pc, #268]	; (800424c <HAL_RCC_OscConfig+0x2e8>)
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	f003 030c 	and.w	r3, r3, #12
 8004146:	2b08      	cmp	r3, #8
 8004148:	d11c      	bne.n	8004184 <HAL_RCC_OscConfig+0x220>
 800414a:	4b40      	ldr	r3, [pc, #256]	; (800424c <HAL_RCC_OscConfig+0x2e8>)
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d116      	bne.n	8004184 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004156:	4b3d      	ldr	r3, [pc, #244]	; (800424c <HAL_RCC_OscConfig+0x2e8>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0302 	and.w	r3, r3, #2
 800415e:	2b00      	cmp	r3, #0
 8004160:	d005      	beq.n	800416e <HAL_RCC_OscConfig+0x20a>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	691b      	ldr	r3, [r3, #16]
 8004166:	2b01      	cmp	r3, #1
 8004168:	d001      	beq.n	800416e <HAL_RCC_OscConfig+0x20a>
      {
        return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e260      	b.n	8004630 <HAL_RCC_OscConfig+0x6cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800416e:	4b37      	ldr	r3, [pc, #220]	; (800424c <HAL_RCC_OscConfig+0x2e8>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	695b      	ldr	r3, [r3, #20]
 800417a:	00db      	lsls	r3, r3, #3
 800417c:	4933      	ldr	r1, [pc, #204]	; (800424c <HAL_RCC_OscConfig+0x2e8>)
 800417e:	4313      	orrs	r3, r2
 8004180:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004182:	e03a      	b.n	80041fa <HAL_RCC_OscConfig+0x296>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	691b      	ldr	r3, [r3, #16]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d020      	beq.n	80041ce <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800418c:	4b30      	ldr	r3, [pc, #192]	; (8004250 <HAL_RCC_OscConfig+0x2ec>)
 800418e:	2201      	movs	r2, #1
 8004190:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004192:	f7fe fd29 	bl	8002be8 <HAL_GetTick>
 8004196:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004198:	e008      	b.n	80041ac <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800419a:	f7fe fd25 	bl	8002be8 <HAL_GetTick>
 800419e:	4602      	mov	r2, r0
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	1ad3      	subs	r3, r2, r3
 80041a4:	2b02      	cmp	r3, #2
 80041a6:	d901      	bls.n	80041ac <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80041a8:	2303      	movs	r3, #3
 80041aa:	e241      	b.n	8004630 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041ac:	4b27      	ldr	r3, [pc, #156]	; (800424c <HAL_RCC_OscConfig+0x2e8>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0302 	and.w	r3, r3, #2
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d0f0      	beq.n	800419a <HAL_RCC_OscConfig+0x236>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041b8:	4b24      	ldr	r3, [pc, #144]	; (800424c <HAL_RCC_OscConfig+0x2e8>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	695b      	ldr	r3, [r3, #20]
 80041c4:	00db      	lsls	r3, r3, #3
 80041c6:	4921      	ldr	r1, [pc, #132]	; (800424c <HAL_RCC_OscConfig+0x2e8>)
 80041c8:	4313      	orrs	r3, r2
 80041ca:	600b      	str	r3, [r1, #0]
 80041cc:	e015      	b.n	80041fa <HAL_RCC_OscConfig+0x296>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041ce:	4b20      	ldr	r3, [pc, #128]	; (8004250 <HAL_RCC_OscConfig+0x2ec>)
 80041d0:	2200      	movs	r2, #0
 80041d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041d4:	f7fe fd08 	bl	8002be8 <HAL_GetTick>
 80041d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041da:	e008      	b.n	80041ee <HAL_RCC_OscConfig+0x28a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041dc:	f7fe fd04 	bl	8002be8 <HAL_GetTick>
 80041e0:	4602      	mov	r2, r0
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d901      	bls.n	80041ee <HAL_RCC_OscConfig+0x28a>
          {
            return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e220      	b.n	8004630 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041ee:	4b17      	ldr	r3, [pc, #92]	; (800424c <HAL_RCC_OscConfig+0x2e8>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0302 	and.w	r3, r3, #2
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d1f0      	bne.n	80041dc <HAL_RCC_OscConfig+0x278>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 0308 	and.w	r3, r3, #8
 8004202:	2b00      	cmp	r3, #0
 8004204:	d048      	beq.n	8004298 <HAL_RCC_OscConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	699b      	ldr	r3, [r3, #24]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d008      	beq.n	8004220 <HAL_RCC_OscConfig+0x2bc>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	699b      	ldr	r3, [r3, #24]
 8004212:	2b01      	cmp	r3, #1
 8004214:	d004      	beq.n	8004220 <HAL_RCC_OscConfig+0x2bc>
 8004216:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 800421a:	480b      	ldr	r0, [pc, #44]	; (8004248 <HAL_RCC_OscConfig+0x2e4>)
 800421c:	f7fe f814 	bl	8002248 <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	699b      	ldr	r3, [r3, #24]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d021      	beq.n	800426c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004228:	4b0a      	ldr	r3, [pc, #40]	; (8004254 <HAL_RCC_OscConfig+0x2f0>)
 800422a:	2201      	movs	r2, #1
 800422c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800422e:	f7fe fcdb 	bl	8002be8 <HAL_GetTick>
 8004232:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004234:	e010      	b.n	8004258 <HAL_RCC_OscConfig+0x2f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004236:	f7fe fcd7 	bl	8002be8 <HAL_GetTick>
 800423a:	4602      	mov	r2, r0
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	2b02      	cmp	r3, #2
 8004242:	d909      	bls.n	8004258 <HAL_RCC_OscConfig+0x2f4>
        {
          return HAL_TIMEOUT;
 8004244:	2303      	movs	r3, #3
 8004246:	e1f3      	b.n	8004630 <HAL_RCC_OscConfig+0x6cc>
 8004248:	080103e8 	.word	0x080103e8
 800424c:	40021000 	.word	0x40021000
 8004250:	42420000 	.word	0x42420000
 8004254:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004258:	4b67      	ldr	r3, [pc, #412]	; (80043f8 <HAL_RCC_OscConfig+0x494>)
 800425a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425c:	f003 0302 	and.w	r3, r3, #2
 8004260:	2b00      	cmp	r3, #0
 8004262:	d0e8      	beq.n	8004236 <HAL_RCC_OscConfig+0x2d2>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004264:	2001      	movs	r0, #1
 8004266:	f000 fc0f 	bl	8004a88 <RCC_Delay>
 800426a:	e015      	b.n	8004298 <HAL_RCC_OscConfig+0x334>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800426c:	4b63      	ldr	r3, [pc, #396]	; (80043fc <HAL_RCC_OscConfig+0x498>)
 800426e:	2200      	movs	r2, #0
 8004270:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004272:	f7fe fcb9 	bl	8002be8 <HAL_GetTick>
 8004276:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004278:	e008      	b.n	800428c <HAL_RCC_OscConfig+0x328>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800427a:	f7fe fcb5 	bl	8002be8 <HAL_GetTick>
 800427e:	4602      	mov	r2, r0
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	1ad3      	subs	r3, r2, r3
 8004284:	2b02      	cmp	r3, #2
 8004286:	d901      	bls.n	800428c <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 8004288:	2303      	movs	r3, #3
 800428a:	e1d1      	b.n	8004630 <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800428c:	4b5a      	ldr	r3, [pc, #360]	; (80043f8 <HAL_RCC_OscConfig+0x494>)
 800428e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004290:	f003 0302 	and.w	r3, r3, #2
 8004294:	2b00      	cmp	r3, #0
 8004296:	d1f0      	bne.n	800427a <HAL_RCC_OscConfig+0x316>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 0304 	and.w	r3, r3, #4
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	f000 80c0 	beq.w	8004426 <HAL_RCC_OscConfig+0x4c2>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042a6:	2300      	movs	r3, #0
 80042a8:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d00c      	beq.n	80042cc <HAL_RCC_OscConfig+0x368>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d008      	beq.n	80042cc <HAL_RCC_OscConfig+0x368>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	2b05      	cmp	r3, #5
 80042c0:	d004      	beq.n	80042cc <HAL_RCC_OscConfig+0x368>
 80042c2:	f240 2111 	movw	r1, #529	; 0x211
 80042c6:	484e      	ldr	r0, [pc, #312]	; (8004400 <HAL_RCC_OscConfig+0x49c>)
 80042c8:	f7fd ffbe 	bl	8002248 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042cc:	4b4a      	ldr	r3, [pc, #296]	; (80043f8 <HAL_RCC_OscConfig+0x494>)
 80042ce:	69db      	ldr	r3, [r3, #28]
 80042d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d10d      	bne.n	80042f4 <HAL_RCC_OscConfig+0x390>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042d8:	4b47      	ldr	r3, [pc, #284]	; (80043f8 <HAL_RCC_OscConfig+0x494>)
 80042da:	69db      	ldr	r3, [r3, #28]
 80042dc:	4a46      	ldr	r2, [pc, #280]	; (80043f8 <HAL_RCC_OscConfig+0x494>)
 80042de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042e2:	61d3      	str	r3, [r2, #28]
 80042e4:	4b44      	ldr	r3, [pc, #272]	; (80043f8 <HAL_RCC_OscConfig+0x494>)
 80042e6:	69db      	ldr	r3, [r3, #28]
 80042e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042ec:	60bb      	str	r3, [r7, #8]
 80042ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042f0:	2301      	movs	r3, #1
 80042f2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042f4:	4b43      	ldr	r3, [pc, #268]	; (8004404 <HAL_RCC_OscConfig+0x4a0>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d118      	bne.n	8004332 <HAL_RCC_OscConfig+0x3ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004300:	4b40      	ldr	r3, [pc, #256]	; (8004404 <HAL_RCC_OscConfig+0x4a0>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a3f      	ldr	r2, [pc, #252]	; (8004404 <HAL_RCC_OscConfig+0x4a0>)
 8004306:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800430a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800430c:	f7fe fc6c 	bl	8002be8 <HAL_GetTick>
 8004310:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004312:	e008      	b.n	8004326 <HAL_RCC_OscConfig+0x3c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004314:	f7fe fc68 	bl	8002be8 <HAL_GetTick>
 8004318:	4602      	mov	r2, r0
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	2b64      	cmp	r3, #100	; 0x64
 8004320:	d901      	bls.n	8004326 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e184      	b.n	8004630 <HAL_RCC_OscConfig+0x6cc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004326:	4b37      	ldr	r3, [pc, #220]	; (8004404 <HAL_RCC_OscConfig+0x4a0>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800432e:	2b00      	cmp	r3, #0
 8004330:	d0f0      	beq.n	8004314 <HAL_RCC_OscConfig+0x3b0>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	2b01      	cmp	r3, #1
 8004338:	d106      	bne.n	8004348 <HAL_RCC_OscConfig+0x3e4>
 800433a:	4b2f      	ldr	r3, [pc, #188]	; (80043f8 <HAL_RCC_OscConfig+0x494>)
 800433c:	6a1b      	ldr	r3, [r3, #32]
 800433e:	4a2e      	ldr	r2, [pc, #184]	; (80043f8 <HAL_RCC_OscConfig+0x494>)
 8004340:	f043 0301 	orr.w	r3, r3, #1
 8004344:	6213      	str	r3, [r2, #32]
 8004346:	e02d      	b.n	80043a4 <HAL_RCC_OscConfig+0x440>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d10c      	bne.n	800436a <HAL_RCC_OscConfig+0x406>
 8004350:	4b29      	ldr	r3, [pc, #164]	; (80043f8 <HAL_RCC_OscConfig+0x494>)
 8004352:	6a1b      	ldr	r3, [r3, #32]
 8004354:	4a28      	ldr	r2, [pc, #160]	; (80043f8 <HAL_RCC_OscConfig+0x494>)
 8004356:	f023 0301 	bic.w	r3, r3, #1
 800435a:	6213      	str	r3, [r2, #32]
 800435c:	4b26      	ldr	r3, [pc, #152]	; (80043f8 <HAL_RCC_OscConfig+0x494>)
 800435e:	6a1b      	ldr	r3, [r3, #32]
 8004360:	4a25      	ldr	r2, [pc, #148]	; (80043f8 <HAL_RCC_OscConfig+0x494>)
 8004362:	f023 0304 	bic.w	r3, r3, #4
 8004366:	6213      	str	r3, [r2, #32]
 8004368:	e01c      	b.n	80043a4 <HAL_RCC_OscConfig+0x440>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	2b05      	cmp	r3, #5
 8004370:	d10c      	bne.n	800438c <HAL_RCC_OscConfig+0x428>
 8004372:	4b21      	ldr	r3, [pc, #132]	; (80043f8 <HAL_RCC_OscConfig+0x494>)
 8004374:	6a1b      	ldr	r3, [r3, #32]
 8004376:	4a20      	ldr	r2, [pc, #128]	; (80043f8 <HAL_RCC_OscConfig+0x494>)
 8004378:	f043 0304 	orr.w	r3, r3, #4
 800437c:	6213      	str	r3, [r2, #32]
 800437e:	4b1e      	ldr	r3, [pc, #120]	; (80043f8 <HAL_RCC_OscConfig+0x494>)
 8004380:	6a1b      	ldr	r3, [r3, #32]
 8004382:	4a1d      	ldr	r2, [pc, #116]	; (80043f8 <HAL_RCC_OscConfig+0x494>)
 8004384:	f043 0301 	orr.w	r3, r3, #1
 8004388:	6213      	str	r3, [r2, #32]
 800438a:	e00b      	b.n	80043a4 <HAL_RCC_OscConfig+0x440>
 800438c:	4b1a      	ldr	r3, [pc, #104]	; (80043f8 <HAL_RCC_OscConfig+0x494>)
 800438e:	6a1b      	ldr	r3, [r3, #32]
 8004390:	4a19      	ldr	r2, [pc, #100]	; (80043f8 <HAL_RCC_OscConfig+0x494>)
 8004392:	f023 0301 	bic.w	r3, r3, #1
 8004396:	6213      	str	r3, [r2, #32]
 8004398:	4b17      	ldr	r3, [pc, #92]	; (80043f8 <HAL_RCC_OscConfig+0x494>)
 800439a:	6a1b      	ldr	r3, [r3, #32]
 800439c:	4a16      	ldr	r2, [pc, #88]	; (80043f8 <HAL_RCC_OscConfig+0x494>)
 800439e:	f023 0304 	bic.w	r3, r3, #4
 80043a2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d015      	beq.n	80043d8 <HAL_RCC_OscConfig+0x474>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043ac:	f7fe fc1c 	bl	8002be8 <HAL_GetTick>
 80043b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043b2:	e00a      	b.n	80043ca <HAL_RCC_OscConfig+0x466>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043b4:	f7fe fc18 	bl	8002be8 <HAL_GetTick>
 80043b8:	4602      	mov	r2, r0
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	f241 3288 	movw	r2, #5000	; 0x1388
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d901      	bls.n	80043ca <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80043c6:	2303      	movs	r3, #3
 80043c8:	e132      	b.n	8004630 <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043ca:	4b0b      	ldr	r3, [pc, #44]	; (80043f8 <HAL_RCC_OscConfig+0x494>)
 80043cc:	6a1b      	ldr	r3, [r3, #32]
 80043ce:	f003 0302 	and.w	r3, r3, #2
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d0ee      	beq.n	80043b4 <HAL_RCC_OscConfig+0x450>
 80043d6:	e01d      	b.n	8004414 <HAL_RCC_OscConfig+0x4b0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043d8:	f7fe fc06 	bl	8002be8 <HAL_GetTick>
 80043dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043de:	e013      	b.n	8004408 <HAL_RCC_OscConfig+0x4a4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043e0:	f7fe fc02 	bl	8002be8 <HAL_GetTick>
 80043e4:	4602      	mov	r2, r0
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d90a      	bls.n	8004408 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	e11c      	b.n	8004630 <HAL_RCC_OscConfig+0x6cc>
 80043f6:	bf00      	nop
 80043f8:	40021000 	.word	0x40021000
 80043fc:	42420480 	.word	0x42420480
 8004400:	080103e8 	.word	0x080103e8
 8004404:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004408:	4b8b      	ldr	r3, [pc, #556]	; (8004638 <HAL_RCC_OscConfig+0x6d4>)
 800440a:	6a1b      	ldr	r3, [r3, #32]
 800440c:	f003 0302 	and.w	r3, r3, #2
 8004410:	2b00      	cmp	r3, #0
 8004412:	d1e5      	bne.n	80043e0 <HAL_RCC_OscConfig+0x47c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004414:	7dfb      	ldrb	r3, [r7, #23]
 8004416:	2b01      	cmp	r3, #1
 8004418:	d105      	bne.n	8004426 <HAL_RCC_OscConfig+0x4c2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800441a:	4b87      	ldr	r3, [pc, #540]	; (8004638 <HAL_RCC_OscConfig+0x6d4>)
 800441c:	69db      	ldr	r3, [r3, #28]
 800441e:	4a86      	ldr	r2, [pc, #536]	; (8004638 <HAL_RCC_OscConfig+0x6d4>)
 8004420:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004424:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	69db      	ldr	r3, [r3, #28]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d00c      	beq.n	8004448 <HAL_RCC_OscConfig+0x4e4>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	69db      	ldr	r3, [r3, #28]
 8004432:	2b01      	cmp	r3, #1
 8004434:	d008      	beq.n	8004448 <HAL_RCC_OscConfig+0x4e4>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	69db      	ldr	r3, [r3, #28]
 800443a:	2b02      	cmp	r3, #2
 800443c:	d004      	beq.n	8004448 <HAL_RCC_OscConfig+0x4e4>
 800443e:	f240 21af 	movw	r1, #687	; 0x2af
 8004442:	487e      	ldr	r0, [pc, #504]	; (800463c <HAL_RCC_OscConfig+0x6d8>)
 8004444:	f7fd ff00 	bl	8002248 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	69db      	ldr	r3, [r3, #28]
 800444c:	2b00      	cmp	r3, #0
 800444e:	f000 80ee 	beq.w	800462e <HAL_RCC_OscConfig+0x6ca>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004452:	4b79      	ldr	r3, [pc, #484]	; (8004638 <HAL_RCC_OscConfig+0x6d4>)
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	f003 030c 	and.w	r3, r3, #12
 800445a:	2b08      	cmp	r3, #8
 800445c:	f000 80ce 	beq.w	80045fc <HAL_RCC_OscConfig+0x698>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	69db      	ldr	r3, [r3, #28]
 8004464:	2b02      	cmp	r3, #2
 8004466:	f040 80b2 	bne.w	80045ce <HAL_RCC_OscConfig+0x66a>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a1b      	ldr	r3, [r3, #32]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d009      	beq.n	8004486 <HAL_RCC_OscConfig+0x522>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a1b      	ldr	r3, [r3, #32]
 8004476:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800447a:	d004      	beq.n	8004486 <HAL_RCC_OscConfig+0x522>
 800447c:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 8004480:	486e      	ldr	r0, [pc, #440]	; (800463c <HAL_RCC_OscConfig+0x6d8>)
 8004482:	f7fd fee1 	bl	8002248 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448a:	2b00      	cmp	r3, #0
 800448c:	d04a      	beq.n	8004524 <HAL_RCC_OscConfig+0x5c0>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004492:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004496:	d045      	beq.n	8004524 <HAL_RCC_OscConfig+0x5c0>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80044a0:	d040      	beq.n	8004524 <HAL_RCC_OscConfig+0x5c0>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80044aa:	d03b      	beq.n	8004524 <HAL_RCC_OscConfig+0x5c0>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044b4:	d036      	beq.n	8004524 <HAL_RCC_OscConfig+0x5c0>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ba:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80044be:	d031      	beq.n	8004524 <HAL_RCC_OscConfig+0x5c0>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c4:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80044c8:	d02c      	beq.n	8004524 <HAL_RCC_OscConfig+0x5c0>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ce:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80044d2:	d027      	beq.n	8004524 <HAL_RCC_OscConfig+0x5c0>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044dc:	d022      	beq.n	8004524 <HAL_RCC_OscConfig+0x5c0>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80044e6:	d01d      	beq.n	8004524 <HAL_RCC_OscConfig+0x5c0>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ec:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80044f0:	d018      	beq.n	8004524 <HAL_RCC_OscConfig+0x5c0>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f6:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80044fa:	d013      	beq.n	8004524 <HAL_RCC_OscConfig+0x5c0>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004500:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004504:	d00e      	beq.n	8004524 <HAL_RCC_OscConfig+0x5c0>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450a:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 800450e:	d009      	beq.n	8004524 <HAL_RCC_OscConfig+0x5c0>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004514:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8004518:	d004      	beq.n	8004524 <HAL_RCC_OscConfig+0x5c0>
 800451a:	f240 21b9 	movw	r1, #697	; 0x2b9
 800451e:	4847      	ldr	r0, [pc, #284]	; (800463c <HAL_RCC_OscConfig+0x6d8>)
 8004520:	f7fd fe92 	bl	8002248 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004524:	4b46      	ldr	r3, [pc, #280]	; (8004640 <HAL_RCC_OscConfig+0x6dc>)
 8004526:	2200      	movs	r2, #0
 8004528:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800452a:	f7fe fb5d 	bl	8002be8 <HAL_GetTick>
 800452e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004530:	e008      	b.n	8004544 <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004532:	f7fe fb59 	bl	8002be8 <HAL_GetTick>
 8004536:	4602      	mov	r2, r0
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	1ad3      	subs	r3, r2, r3
 800453c:	2b02      	cmp	r3, #2
 800453e:	d901      	bls.n	8004544 <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 8004540:	2303      	movs	r3, #3
 8004542:	e075      	b.n	8004630 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004544:	4b3c      	ldr	r3, [pc, #240]	; (8004638 <HAL_RCC_OscConfig+0x6d4>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800454c:	2b00      	cmp	r3, #0
 800454e:	d1f0      	bne.n	8004532 <HAL_RCC_OscConfig+0x5ce>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6a1b      	ldr	r3, [r3, #32]
 8004554:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004558:	d116      	bne.n	8004588 <HAL_RCC_OscConfig+0x624>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d009      	beq.n	8004576 <HAL_RCC_OscConfig+0x612>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800456a:	d004      	beq.n	8004576 <HAL_RCC_OscConfig+0x612>
 800456c:	f240 21cf 	movw	r1, #719	; 0x2cf
 8004570:	4832      	ldr	r0, [pc, #200]	; (800463c <HAL_RCC_OscConfig+0x6d8>)
 8004572:	f7fd fe69 	bl	8002248 <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004576:	4b30      	ldr	r3, [pc, #192]	; (8004638 <HAL_RCC_OscConfig+0x6d4>)
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	492d      	ldr	r1, [pc, #180]	; (8004638 <HAL_RCC_OscConfig+0x6d4>)
 8004584:	4313      	orrs	r3, r2
 8004586:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004588:	4b2b      	ldr	r3, [pc, #172]	; (8004638 <HAL_RCC_OscConfig+0x6d4>)
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6a19      	ldr	r1, [r3, #32]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004598:	430b      	orrs	r3, r1
 800459a:	4927      	ldr	r1, [pc, #156]	; (8004638 <HAL_RCC_OscConfig+0x6d4>)
 800459c:	4313      	orrs	r3, r2
 800459e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045a0:	4b27      	ldr	r3, [pc, #156]	; (8004640 <HAL_RCC_OscConfig+0x6dc>)
 80045a2:	2201      	movs	r2, #1
 80045a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045a6:	f7fe fb1f 	bl	8002be8 <HAL_GetTick>
 80045aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80045ac:	e008      	b.n	80045c0 <HAL_RCC_OscConfig+0x65c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045ae:	f7fe fb1b 	bl	8002be8 <HAL_GetTick>
 80045b2:	4602      	mov	r2, r0
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	1ad3      	subs	r3, r2, r3
 80045b8:	2b02      	cmp	r3, #2
 80045ba:	d901      	bls.n	80045c0 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 80045bc:	2303      	movs	r3, #3
 80045be:	e037      	b.n	8004630 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80045c0:	4b1d      	ldr	r3, [pc, #116]	; (8004638 <HAL_RCC_OscConfig+0x6d4>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d0f0      	beq.n	80045ae <HAL_RCC_OscConfig+0x64a>
 80045cc:	e02f      	b.n	800462e <HAL_RCC_OscConfig+0x6ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045ce:	4b1c      	ldr	r3, [pc, #112]	; (8004640 <HAL_RCC_OscConfig+0x6dc>)
 80045d0:	2200      	movs	r2, #0
 80045d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045d4:	f7fe fb08 	bl	8002be8 <HAL_GetTick>
 80045d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045da:	e008      	b.n	80045ee <HAL_RCC_OscConfig+0x68a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045dc:	f7fe fb04 	bl	8002be8 <HAL_GetTick>
 80045e0:	4602      	mov	r2, r0
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d901      	bls.n	80045ee <HAL_RCC_OscConfig+0x68a>
          {
            return HAL_TIMEOUT;
 80045ea:	2303      	movs	r3, #3
 80045ec:	e020      	b.n	8004630 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045ee:	4b12      	ldr	r3, [pc, #72]	; (8004638 <HAL_RCC_OscConfig+0x6d4>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d1f0      	bne.n	80045dc <HAL_RCC_OscConfig+0x678>
 80045fa:	e018      	b.n	800462e <HAL_RCC_OscConfig+0x6ca>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	69db      	ldr	r3, [r3, #28]
 8004600:	2b01      	cmp	r3, #1
 8004602:	d101      	bne.n	8004608 <HAL_RCC_OscConfig+0x6a4>
      {
        return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e013      	b.n	8004630 <HAL_RCC_OscConfig+0x6cc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004608:	4b0b      	ldr	r3, [pc, #44]	; (8004638 <HAL_RCC_OscConfig+0x6d4>)
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a1b      	ldr	r3, [r3, #32]
 8004618:	429a      	cmp	r2, r3
 800461a:	d106      	bne.n	800462a <HAL_RCC_OscConfig+0x6c6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004626:	429a      	cmp	r2, r3
 8004628:	d001      	beq.n	800462e <HAL_RCC_OscConfig+0x6ca>
        {
          return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e000      	b.n	8004630 <HAL_RCC_OscConfig+0x6cc>
        }
      }
    }
  }

  return HAL_OK;
 800462e:	2300      	movs	r3, #0
}
 8004630:	4618      	mov	r0, r3
 8004632:	3718      	adds	r7, #24
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}
 8004638:	40021000 	.word	0x40021000
 800463c:	080103e8 	.word	0x080103e8
 8004640:	42420060 	.word	0x42420060

08004644 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b084      	sub	sp, #16
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d101      	bne.n	8004658 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	e176      	b.n	8004946 <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0301 	and.w	r3, r3, #1
 8004660:	2b00      	cmp	r3, #0
 8004662:	d116      	bne.n	8004692 <HAL_RCC_ClockConfig+0x4e>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 0302 	and.w	r3, r3, #2
 800466c:	2b00      	cmp	r3, #0
 800466e:	d110      	bne.n	8004692 <HAL_RCC_ClockConfig+0x4e>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 0304 	and.w	r3, r3, #4
 8004678:	2b00      	cmp	r3, #0
 800467a:	d10a      	bne.n	8004692 <HAL_RCC_ClockConfig+0x4e>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 0308 	and.w	r3, r3, #8
 8004684:	2b00      	cmp	r3, #0
 8004686:	d104      	bne.n	8004692 <HAL_RCC_ClockConfig+0x4e>
 8004688:	f44f 714e 	mov.w	r1, #824	; 0x338
 800468c:	4874      	ldr	r0, [pc, #464]	; (8004860 <HAL_RCC_ClockConfig+0x21c>)
 800468e:	f7fd fddb 	bl	8002248 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d00a      	beq.n	80046ae <HAL_RCC_ClockConfig+0x6a>
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	2b01      	cmp	r3, #1
 800469c:	d007      	beq.n	80046ae <HAL_RCC_ClockConfig+0x6a>
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	d004      	beq.n	80046ae <HAL_RCC_ClockConfig+0x6a>
 80046a4:	f240 3139 	movw	r1, #825	; 0x339
 80046a8:	486d      	ldr	r0, [pc, #436]	; (8004860 <HAL_RCC_ClockConfig+0x21c>)
 80046aa:	f7fd fdcd 	bl	8002248 <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046ae:	4b6d      	ldr	r3, [pc, #436]	; (8004864 <HAL_RCC_ClockConfig+0x220>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 0307 	and.w	r3, r3, #7
 80046b6:	683a      	ldr	r2, [r7, #0]
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d910      	bls.n	80046de <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046bc:	4b69      	ldr	r3, [pc, #420]	; (8004864 <HAL_RCC_ClockConfig+0x220>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f023 0207 	bic.w	r2, r3, #7
 80046c4:	4967      	ldr	r1, [pc, #412]	; (8004864 <HAL_RCC_ClockConfig+0x220>)
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046cc:	4b65      	ldr	r3, [pc, #404]	; (8004864 <HAL_RCC_ClockConfig+0x220>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 0307 	and.w	r3, r3, #7
 80046d4:	683a      	ldr	r2, [r7, #0]
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d001      	beq.n	80046de <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e133      	b.n	8004946 <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 0302 	and.w	r3, r3, #2
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d049      	beq.n	800477e <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 0304 	and.w	r3, r3, #4
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d005      	beq.n	8004702 <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046f6:	4b5c      	ldr	r3, [pc, #368]	; (8004868 <HAL_RCC_ClockConfig+0x224>)
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	4a5b      	ldr	r2, [pc, #364]	; (8004868 <HAL_RCC_ClockConfig+0x224>)
 80046fc:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004700:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0308 	and.w	r3, r3, #8
 800470a:	2b00      	cmp	r3, #0
 800470c:	d005      	beq.n	800471a <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800470e:	4b56      	ldr	r3, [pc, #344]	; (8004868 <HAL_RCC_ClockConfig+0x224>)
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	4a55      	ldr	r2, [pc, #340]	; (8004868 <HAL_RCC_ClockConfig+0x224>)
 8004714:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004718:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d024      	beq.n	800476c <HAL_RCC_ClockConfig+0x128>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	2b80      	cmp	r3, #128	; 0x80
 8004728:	d020      	beq.n	800476c <HAL_RCC_ClockConfig+0x128>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	2b90      	cmp	r3, #144	; 0x90
 8004730:	d01c      	beq.n	800476c <HAL_RCC_ClockConfig+0x128>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	2ba0      	cmp	r3, #160	; 0xa0
 8004738:	d018      	beq.n	800476c <HAL_RCC_ClockConfig+0x128>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	2bb0      	cmp	r3, #176	; 0xb0
 8004740:	d014      	beq.n	800476c <HAL_RCC_ClockConfig+0x128>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	2bc0      	cmp	r3, #192	; 0xc0
 8004748:	d010      	beq.n	800476c <HAL_RCC_ClockConfig+0x128>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	2bd0      	cmp	r3, #208	; 0xd0
 8004750:	d00c      	beq.n	800476c <HAL_RCC_ClockConfig+0x128>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	2be0      	cmp	r3, #224	; 0xe0
 8004758:	d008      	beq.n	800476c <HAL_RCC_ClockConfig+0x128>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	2bf0      	cmp	r3, #240	; 0xf0
 8004760:	d004      	beq.n	800476c <HAL_RCC_ClockConfig+0x128>
 8004762:	f240 315f 	movw	r1, #863	; 0x35f
 8004766:	483e      	ldr	r0, [pc, #248]	; (8004860 <HAL_RCC_ClockConfig+0x21c>)
 8004768:	f7fd fd6e 	bl	8002248 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800476c:	4b3e      	ldr	r3, [pc, #248]	; (8004868 <HAL_RCC_ClockConfig+0x224>)
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	493b      	ldr	r1, [pc, #236]	; (8004868 <HAL_RCC_ClockConfig+0x224>)
 800477a:	4313      	orrs	r3, r2
 800477c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 0301 	and.w	r3, r3, #1
 8004786:	2b00      	cmp	r3, #0
 8004788:	d051      	beq.n	800482e <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d00c      	beq.n	80047ac <HAL_RCC_ClockConfig+0x168>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	2b01      	cmp	r3, #1
 8004798:	d008      	beq.n	80047ac <HAL_RCC_ClockConfig+0x168>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	2b02      	cmp	r3, #2
 80047a0:	d004      	beq.n	80047ac <HAL_RCC_ClockConfig+0x168>
 80047a2:	f240 3166 	movw	r1, #870	; 0x366
 80047a6:	482e      	ldr	r0, [pc, #184]	; (8004860 <HAL_RCC_ClockConfig+0x21c>)
 80047a8:	f7fd fd4e 	bl	8002248 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d107      	bne.n	80047c4 <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047b4:	4b2c      	ldr	r3, [pc, #176]	; (8004868 <HAL_RCC_ClockConfig+0x224>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d115      	bne.n	80047ec <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	e0c0      	b.n	8004946 <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	2b02      	cmp	r3, #2
 80047ca:	d107      	bne.n	80047dc <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047cc:	4b26      	ldr	r3, [pc, #152]	; (8004868 <HAL_RCC_ClockConfig+0x224>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d109      	bne.n	80047ec <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	e0b4      	b.n	8004946 <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047dc:	4b22      	ldr	r3, [pc, #136]	; (8004868 <HAL_RCC_ClockConfig+0x224>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 0302 	and.w	r3, r3, #2
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d101      	bne.n	80047ec <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	e0ac      	b.n	8004946 <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047ec:	4b1e      	ldr	r3, [pc, #120]	; (8004868 <HAL_RCC_ClockConfig+0x224>)
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	f023 0203 	bic.w	r2, r3, #3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	491b      	ldr	r1, [pc, #108]	; (8004868 <HAL_RCC_ClockConfig+0x224>)
 80047fa:	4313      	orrs	r3, r2
 80047fc:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047fe:	f7fe f9f3 	bl	8002be8 <HAL_GetTick>
 8004802:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004804:	e00a      	b.n	800481c <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004806:	f7fe f9ef 	bl	8002be8 <HAL_GetTick>
 800480a:	4602      	mov	r2, r0
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	1ad3      	subs	r3, r2, r3
 8004810:	f241 3288 	movw	r2, #5000	; 0x1388
 8004814:	4293      	cmp	r3, r2
 8004816:	d901      	bls.n	800481c <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 8004818:	2303      	movs	r3, #3
 800481a:	e094      	b.n	8004946 <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800481c:	4b12      	ldr	r3, [pc, #72]	; (8004868 <HAL_RCC_ClockConfig+0x224>)
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	f003 020c 	and.w	r2, r3, #12
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	429a      	cmp	r2, r3
 800482c:	d1eb      	bne.n	8004806 <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800482e:	4b0d      	ldr	r3, [pc, #52]	; (8004864 <HAL_RCC_ClockConfig+0x220>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 0307 	and.w	r3, r3, #7
 8004836:	683a      	ldr	r2, [r7, #0]
 8004838:	429a      	cmp	r2, r3
 800483a:	d217      	bcs.n	800486c <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800483c:	4b09      	ldr	r3, [pc, #36]	; (8004864 <HAL_RCC_ClockConfig+0x220>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f023 0207 	bic.w	r2, r3, #7
 8004844:	4907      	ldr	r1, [pc, #28]	; (8004864 <HAL_RCC_ClockConfig+0x220>)
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	4313      	orrs	r3, r2
 800484a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800484c:	4b05      	ldr	r3, [pc, #20]	; (8004864 <HAL_RCC_ClockConfig+0x220>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 0307 	and.w	r3, r3, #7
 8004854:	683a      	ldr	r2, [r7, #0]
 8004856:	429a      	cmp	r2, r3
 8004858:	d008      	beq.n	800486c <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e073      	b.n	8004946 <HAL_RCC_ClockConfig+0x302>
 800485e:	bf00      	nop
 8004860:	080103e8 	.word	0x080103e8
 8004864:	40022000 	.word	0x40022000
 8004868:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 0304 	and.w	r3, r3, #4
 8004874:	2b00      	cmp	r3, #0
 8004876:	d025      	beq.n	80048c4 <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d018      	beq.n	80048b2 <HAL_RCC_ClockConfig+0x26e>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004888:	d013      	beq.n	80048b2 <HAL_RCC_ClockConfig+0x26e>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	68db      	ldr	r3, [r3, #12]
 800488e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004892:	d00e      	beq.n	80048b2 <HAL_RCC_ClockConfig+0x26e>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800489c:	d009      	beq.n	80048b2 <HAL_RCC_ClockConfig+0x26e>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80048a6:	d004      	beq.n	80048b2 <HAL_RCC_ClockConfig+0x26e>
 80048a8:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 80048ac:	4828      	ldr	r0, [pc, #160]	; (8004950 <HAL_RCC_ClockConfig+0x30c>)
 80048ae:	f7fd fccb 	bl	8002248 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048b2:	4b28      	ldr	r3, [pc, #160]	; (8004954 <HAL_RCC_ClockConfig+0x310>)
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	4925      	ldr	r1, [pc, #148]	; (8004954 <HAL_RCC_ClockConfig+0x310>)
 80048c0:	4313      	orrs	r3, r2
 80048c2:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0308 	and.w	r3, r3, #8
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d026      	beq.n	800491e <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	691b      	ldr	r3, [r3, #16]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d018      	beq.n	800490a <HAL_RCC_ClockConfig+0x2c6>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	691b      	ldr	r3, [r3, #16]
 80048dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048e0:	d013      	beq.n	800490a <HAL_RCC_ClockConfig+0x2c6>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	691b      	ldr	r3, [r3, #16]
 80048e6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80048ea:	d00e      	beq.n	800490a <HAL_RCC_ClockConfig+0x2c6>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	691b      	ldr	r3, [r3, #16]
 80048f0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80048f4:	d009      	beq.n	800490a <HAL_RCC_ClockConfig+0x2c6>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	691b      	ldr	r3, [r3, #16]
 80048fa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80048fe:	d004      	beq.n	800490a <HAL_RCC_ClockConfig+0x2c6>
 8004900:	f240 31ab 	movw	r1, #939	; 0x3ab
 8004904:	4812      	ldr	r0, [pc, #72]	; (8004950 <HAL_RCC_ClockConfig+0x30c>)
 8004906:	f7fd fc9f 	bl	8002248 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800490a:	4b12      	ldr	r3, [pc, #72]	; (8004954 <HAL_RCC_ClockConfig+0x310>)
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	691b      	ldr	r3, [r3, #16]
 8004916:	00db      	lsls	r3, r3, #3
 8004918:	490e      	ldr	r1, [pc, #56]	; (8004954 <HAL_RCC_ClockConfig+0x310>)
 800491a:	4313      	orrs	r3, r2
 800491c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800491e:	f000 f821 	bl	8004964 <HAL_RCC_GetSysClockFreq>
 8004922:	4602      	mov	r2, r0
 8004924:	4b0b      	ldr	r3, [pc, #44]	; (8004954 <HAL_RCC_ClockConfig+0x310>)
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	091b      	lsrs	r3, r3, #4
 800492a:	f003 030f 	and.w	r3, r3, #15
 800492e:	490a      	ldr	r1, [pc, #40]	; (8004958 <HAL_RCC_ClockConfig+0x314>)
 8004930:	5ccb      	ldrb	r3, [r1, r3]
 8004932:	fa22 f303 	lsr.w	r3, r2, r3
 8004936:	4a09      	ldr	r2, [pc, #36]	; (800495c <HAL_RCC_ClockConfig+0x318>)
 8004938:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800493a:	4b09      	ldr	r3, [pc, #36]	; (8004960 <HAL_RCC_ClockConfig+0x31c>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4618      	mov	r0, r3
 8004940:	f7fe f910 	bl	8002b64 <HAL_InitTick>

  return HAL_OK;
 8004944:	2300      	movs	r3, #0
}
 8004946:	4618      	mov	r0, r3
 8004948:	3710      	adds	r7, #16
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
 800494e:	bf00      	nop
 8004950:	080103e8 	.word	0x080103e8
 8004954:	40021000 	.word	0x40021000
 8004958:	08010f8c 	.word	0x08010f8c
 800495c:	20000000 	.word	0x20000000
 8004960:	20000004 	.word	0x20000004

08004964 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004964:	b490      	push	{r4, r7}
 8004966:	b08a      	sub	sp, #40	; 0x28
 8004968:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800496a:	4b2a      	ldr	r3, [pc, #168]	; (8004a14 <HAL_RCC_GetSysClockFreq+0xb0>)
 800496c:	1d3c      	adds	r4, r7, #4
 800496e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004970:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004974:	f240 2301 	movw	r3, #513	; 0x201
 8004978:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800497a:	2300      	movs	r3, #0
 800497c:	61fb      	str	r3, [r7, #28]
 800497e:	2300      	movs	r3, #0
 8004980:	61bb      	str	r3, [r7, #24]
 8004982:	2300      	movs	r3, #0
 8004984:	627b      	str	r3, [r7, #36]	; 0x24
 8004986:	2300      	movs	r3, #0
 8004988:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800498a:	2300      	movs	r3, #0
 800498c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800498e:	4b22      	ldr	r3, [pc, #136]	; (8004a18 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004994:	69fb      	ldr	r3, [r7, #28]
 8004996:	f003 030c 	and.w	r3, r3, #12
 800499a:	2b04      	cmp	r3, #4
 800499c:	d002      	beq.n	80049a4 <HAL_RCC_GetSysClockFreq+0x40>
 800499e:	2b08      	cmp	r3, #8
 80049a0:	d003      	beq.n	80049aa <HAL_RCC_GetSysClockFreq+0x46>
 80049a2:	e02d      	b.n	8004a00 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80049a4:	4b1d      	ldr	r3, [pc, #116]	; (8004a1c <HAL_RCC_GetSysClockFreq+0xb8>)
 80049a6:	623b      	str	r3, [r7, #32]
      break;
 80049a8:	e02d      	b.n	8004a06 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	0c9b      	lsrs	r3, r3, #18
 80049ae:	f003 030f 	and.w	r3, r3, #15
 80049b2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80049b6:	4413      	add	r3, r2
 80049b8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80049bc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80049be:	69fb      	ldr	r3, [r7, #28]
 80049c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d013      	beq.n	80049f0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80049c8:	4b13      	ldr	r3, [pc, #76]	; (8004a18 <HAL_RCC_GetSysClockFreq+0xb4>)
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	0c5b      	lsrs	r3, r3, #17
 80049ce:	f003 0301 	and.w	r3, r3, #1
 80049d2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80049d6:	4413      	add	r3, r2
 80049d8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80049dc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	4a0e      	ldr	r2, [pc, #56]	; (8004a1c <HAL_RCC_GetSysClockFreq+0xb8>)
 80049e2:	fb02 f203 	mul.w	r2, r2, r3
 80049e6:	69bb      	ldr	r3, [r7, #24]
 80049e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ec:	627b      	str	r3, [r7, #36]	; 0x24
 80049ee:	e004      	b.n	80049fa <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	4a0b      	ldr	r2, [pc, #44]	; (8004a20 <HAL_RCC_GetSysClockFreq+0xbc>)
 80049f4:	fb02 f303 	mul.w	r3, r2, r3
 80049f8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80049fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fc:	623b      	str	r3, [r7, #32]
      break;
 80049fe:	e002      	b.n	8004a06 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004a00:	4b06      	ldr	r3, [pc, #24]	; (8004a1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a02:	623b      	str	r3, [r7, #32]
      break;
 8004a04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a06:	6a3b      	ldr	r3, [r7, #32]
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3728      	adds	r7, #40	; 0x28
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bc90      	pop	{r4, r7}
 8004a10:	4770      	bx	lr
 8004a12:	bf00      	nop
 8004a14:	08010420 	.word	0x08010420
 8004a18:	40021000 	.word	0x40021000
 8004a1c:	007a1200 	.word	0x007a1200
 8004a20:	003d0900 	.word	0x003d0900

08004a24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a24:	b480      	push	{r7}
 8004a26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a28:	4b02      	ldr	r3, [pc, #8]	; (8004a34 <HAL_RCC_GetHCLKFreq+0x10>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bc80      	pop	{r7}
 8004a32:	4770      	bx	lr
 8004a34:	20000000 	.word	0x20000000

08004a38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004a3c:	f7ff fff2 	bl	8004a24 <HAL_RCC_GetHCLKFreq>
 8004a40:	4602      	mov	r2, r0
 8004a42:	4b05      	ldr	r3, [pc, #20]	; (8004a58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	0a1b      	lsrs	r3, r3, #8
 8004a48:	f003 0307 	and.w	r3, r3, #7
 8004a4c:	4903      	ldr	r1, [pc, #12]	; (8004a5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a4e:	5ccb      	ldrb	r3, [r1, r3]
 8004a50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	bd80      	pop	{r7, pc}
 8004a58:	40021000 	.word	0x40021000
 8004a5c:	08010f9c 	.word	0x08010f9c

08004a60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004a64:	f7ff ffde 	bl	8004a24 <HAL_RCC_GetHCLKFreq>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	4b05      	ldr	r3, [pc, #20]	; (8004a80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	0adb      	lsrs	r3, r3, #11
 8004a70:	f003 0307 	and.w	r3, r3, #7
 8004a74:	4903      	ldr	r1, [pc, #12]	; (8004a84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a76:	5ccb      	ldrb	r3, [r1, r3]
 8004a78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	40021000 	.word	0x40021000
 8004a84:	08010f9c 	.word	0x08010f9c

08004a88 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b085      	sub	sp, #20
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004a90:	4b0a      	ldr	r3, [pc, #40]	; (8004abc <RCC_Delay+0x34>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a0a      	ldr	r2, [pc, #40]	; (8004ac0 <RCC_Delay+0x38>)
 8004a96:	fba2 2303 	umull	r2, r3, r2, r3
 8004a9a:	0a5b      	lsrs	r3, r3, #9
 8004a9c:	687a      	ldr	r2, [r7, #4]
 8004a9e:	fb02 f303 	mul.w	r3, r2, r3
 8004aa2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004aa4:	bf00      	nop
  }
  while (Delay --);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	1e5a      	subs	r2, r3, #1
 8004aaa:	60fa      	str	r2, [r7, #12]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d1f9      	bne.n	8004aa4 <RCC_Delay+0x1c>
}
 8004ab0:	bf00      	nop
 8004ab2:	bf00      	nop
 8004ab4:	3714      	adds	r7, #20
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bc80      	pop	{r7}
 8004aba:	4770      	bx	lr
 8004abc:	20000000 	.word	0x20000000
 8004ac0:	10624dd3 	.word	0x10624dd3

08004ac4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b086      	sub	sp, #24
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004acc:	2300      	movs	r3, #0
 8004ace:	613b      	str	r3, [r7, #16]
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	60fb      	str	r3, [r7, #12]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
#endif /* STM32F105xC || STM32F107xC */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 0301 	and.w	r3, r3, #1
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d11b      	bne.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 0302 	and.w	r3, r3, #2
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d115      	bne.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0304 	and.w	r3, r3, #4
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d10f      	bne.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 0308 	and.w	r3, r3, #8
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d109      	bne.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f003 0310 	and.w	r3, r3, #16
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d103      	bne.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004b10:	216c      	movs	r1, #108	; 0x6c
 8004b12:	4873      	ldr	r0, [pc, #460]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8004b14:	f7fd fb98 	bl	8002248 <assert_failed>

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 0301 	and.w	r3, r3, #1
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	f000 8095 	beq.w	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    FlagStatus pwrclkchanged = RESET;
 8004b26:	2300      	movs	r3, #0
 8004b28:	75fb      	strb	r3, [r7, #23]

    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d012      	beq.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x94>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b3a:	d00d      	beq.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x94>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b44:	d008      	beq.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x94>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b4e:	d003      	beq.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x94>
 8004b50:	2174      	movs	r1, #116	; 0x74
 8004b52:	4863      	ldr	r0, [pc, #396]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8004b54:	f7fd fb78 	bl	8002248 <assert_failed>

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b58:	4b62      	ldr	r3, [pc, #392]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004b5a:	69db      	ldr	r3, [r3, #28]
 8004b5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d10d      	bne.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0xbc>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b64:	4b5f      	ldr	r3, [pc, #380]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004b66:	69db      	ldr	r3, [r3, #28]
 8004b68:	4a5e      	ldr	r2, [pc, #376]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004b6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b6e:	61d3      	str	r3, [r2, #28]
 8004b70:	4b5c      	ldr	r3, [pc, #368]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004b72:	69db      	ldr	r3, [r3, #28]
 8004b74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b78:	60bb      	str	r3, [r7, #8]
 8004b7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b80:	4b59      	ldr	r3, [pc, #356]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d118      	bne.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0xfa>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b8c:	4b56      	ldr	r3, [pc, #344]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a55      	ldr	r2, [pc, #340]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004b92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b96:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b98:	f7fe f826 	bl	8002be8 <HAL_GetTick>
 8004b9c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b9e:	e008      	b.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0xee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ba0:	f7fe f822 	bl	8002be8 <HAL_GetTick>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	2b64      	cmp	r3, #100	; 0x64
 8004bac:	d901      	bls.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0xee>
        {
          return HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	e092      	b.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x214>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bb2:	4b4d      	ldr	r3, [pc, #308]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d0f0      	beq.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0xdc>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004bbe:	4b49      	ldr	r3, [pc, #292]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004bc0:	6a1b      	ldr	r3, [r3, #32]
 8004bc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bc6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d02e      	beq.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bd6:	68fa      	ldr	r2, [r7, #12]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d027      	beq.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004bdc:	4b41      	ldr	r3, [pc, #260]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004bde:	6a1b      	ldr	r3, [r3, #32]
 8004be0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004be4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004be6:	4b41      	ldr	r3, [pc, #260]	; (8004cec <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8004be8:	2201      	movs	r2, #1
 8004bea:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004bec:	4b3f      	ldr	r3, [pc, #252]	; (8004cec <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8004bee:	2200      	movs	r2, #0
 8004bf0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004bf2:	4a3c      	ldr	r2, [pc, #240]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f003 0301 	and.w	r3, r3, #1
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d014      	beq.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c02:	f7fd fff1 	bl	8002be8 <HAL_GetTick>
 8004c06:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c08:	e00a      	b.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x15c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c0a:	f7fd ffed 	bl	8002be8 <HAL_GetTick>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	1ad3      	subs	r3, r2, r3
 8004c14:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d901      	bls.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          {
            return HAL_TIMEOUT;
 8004c1c:	2303      	movs	r3, #3
 8004c1e:	e05b      	b.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x214>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c20:	4b30      	ldr	r3, [pc, #192]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004c22:	6a1b      	ldr	r3, [r3, #32]
 8004c24:	f003 0302 	and.w	r3, r3, #2
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d0ee      	beq.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x146>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c2c:	4b2d      	ldr	r3, [pc, #180]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004c2e:	6a1b      	ldr	r3, [r3, #32]
 8004c30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	492a      	ldr	r1, [pc, #168]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004c3e:	7dfb      	ldrb	r3, [r7, #23]
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d105      	bne.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c44:	4b27      	ldr	r3, [pc, #156]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004c46:	69db      	ldr	r3, [r3, #28]
 8004c48:	4a26      	ldr	r2, [pc, #152]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004c4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c4e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 0302 	and.w	r3, r3, #2
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d01f      	beq.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d012      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c6c:	d00d      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c76:	d008      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004c80:	d003      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 8004c82:	21b9      	movs	r1, #185	; 0xb9
 8004c84:	4816      	ldr	r0, [pc, #88]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8004c86:	f7fd fadf 	bl	8002248 <assert_failed>

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c8a:	4b16      	ldr	r3, [pc, #88]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	4913      	ldr	r1, [pc, #76]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 0310 	and.w	r3, r3, #16
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d016      	beq.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x212>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	695b      	ldr	r3, [r3, #20]
 8004cac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cb0:	d008      	beq.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	695b      	ldr	r3, [r3, #20]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d004      	beq.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004cba:	f240 1115 	movw	r1, #277	; 0x115
 8004cbe:	4808      	ldr	r0, [pc, #32]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8004cc0:	f7fd fac2 	bl	8002248 <assert_failed>

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004cc4:	4b07      	ldr	r3, [pc, #28]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	695b      	ldr	r3, [r3, #20]
 8004cd0:	4904      	ldr	r1, [pc, #16]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004cd6:	2300      	movs	r3, #0
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3718      	adds	r7, #24
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}
 8004ce0:	08010430 	.word	0x08010430
 8004ce4:	40021000 	.word	0x40021000
 8004ce8:	40007000 	.word	0x40007000
 8004cec:	42420440 	.word	0x42420440

08004cf0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004cf0:	b590      	push	{r4, r7, lr}
 8004cf2:	b08d      	sub	sp, #52	; 0x34
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004cf8:	4b7a      	ldr	r3, [pc, #488]	; (8004ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>)
 8004cfa:	f107 040c 	add.w	r4, r7, #12
 8004cfe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004d00:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004d04:	f240 2301 	movw	r3, #513	; 0x201
 8004d08:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d0e:	2300      	movs	r3, #0
 8004d10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d12:	2300      	movs	r3, #0
 8004d14:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004d16:	2300      	movs	r3, #0
 8004d18:	61fb      	str	r3, [r7, #28]
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f003 0301 	and.w	r3, r3, #1
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d118      	bne.n	8004d5a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f003 0302 	and.w	r3, r3, #2
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d113      	bne.n	8004d5a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f003 0304 	and.w	r3, r3, #4
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d10e      	bne.n	8004d5a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f003 0308 	and.w	r3, r3, #8
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d109      	bne.n	8004d5a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f003 0310 	and.w	r3, r3, #16
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d104      	bne.n	8004d5a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 8004d50:	f44f 71cb 	mov.w	r1, #406	; 0x196
 8004d54:	4864      	ldr	r0, [pc, #400]	; (8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8>)
 8004d56:	f7fd fa77 	bl	8002248 <assert_failed>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	3b01      	subs	r3, #1
 8004d5e:	2b0f      	cmp	r3, #15
 8004d60:	f200 80b6 	bhi.w	8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8004d64:	a201      	add	r2, pc, #4	; (adr r2, 8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>)
 8004d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d6a:	bf00      	nop
 8004d6c:	08004e4f 	.word	0x08004e4f
 8004d70:	08004eb5 	.word	0x08004eb5
 8004d74:	08004ed1 	.word	0x08004ed1
 8004d78:	08004e3f 	.word	0x08004e3f
 8004d7c:	08004ed1 	.word	0x08004ed1
 8004d80:	08004ed1 	.word	0x08004ed1
 8004d84:	08004ed1 	.word	0x08004ed1
 8004d88:	08004e47 	.word	0x08004e47
 8004d8c:	08004ed1 	.word	0x08004ed1
 8004d90:	08004ed1 	.word	0x08004ed1
 8004d94:	08004ed1 	.word	0x08004ed1
 8004d98:	08004ed1 	.word	0x08004ed1
 8004d9c:	08004ed1 	.word	0x08004ed1
 8004da0:	08004ed1 	.word	0x08004ed1
 8004da4:	08004ed1 	.word	0x08004ed1
 8004da8:	08004dad 	.word	0x08004dad
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8004dac:	4b4f      	ldr	r3, [pc, #316]	; (8004eec <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	61fb      	str	r3, [r7, #28]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004db2:	4b4e      	ldr	r3, [pc, #312]	; (8004eec <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	f000 808a 	beq.w	8004ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004dc0:	69fb      	ldr	r3, [r7, #28]
 8004dc2:	0c9b      	lsrs	r3, r3, #18
 8004dc4:	f003 030f 	and.w	r3, r3, #15
 8004dc8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004dcc:	4413      	add	r3, r2
 8004dce:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004dd2:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004dd4:	69fb      	ldr	r3, [r7, #28]
 8004dd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d018      	beq.n	8004e10 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004dde:	4b43      	ldr	r3, [pc, #268]	; (8004eec <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	0c5b      	lsrs	r3, r3, #17
 8004de4:	f003 0301 	and.w	r3, r3, #1
 8004de8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004dec:	4413      	add	r3, r2
 8004dee:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004df2:	627b      	str	r3, [r7, #36]	; 0x24
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004df4:	69fb      	ldr	r3, [r7, #28]
 8004df6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d00d      	beq.n	8004e1a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004dfe:	4a3c      	ldr	r2, [pc, #240]	; (8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x200>)
 8004e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e02:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e06:	6a3b      	ldr	r3, [r7, #32]
 8004e08:	fb02 f303 	mul.w	r3, r2, r3
 8004e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e0e:	e004      	b.n	8004e1a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004e10:	6a3b      	ldr	r3, [r7, #32]
 8004e12:	4a38      	ldr	r2, [pc, #224]	; (8004ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 8004e14:	fb02 f303 	mul.w	r3, r2, r3
 8004e18:	62fb      	str	r3, [r7, #44]	; 0x2c
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004e1a:	4b34      	ldr	r3, [pc, #208]	; (8004eec <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e26:	d102      	bne.n	8004e2e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8004e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e2a:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8004e2c:	e052      	b.n	8004ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
          frequency = (pllclk * 2) / 3;
 8004e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e30:	005b      	lsls	r3, r3, #1
 8004e32:	4a31      	ldr	r2, [pc, #196]	; (8004ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>)
 8004e34:	fba2 2303 	umull	r2, r3, r2, r3
 8004e38:	085b      	lsrs	r3, r3, #1
 8004e3a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004e3c:	e04a      	b.n	8004ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 8004e3e:	f7ff fd91 	bl	8004964 <HAL_RCC_GetSysClockFreq>
 8004e42:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8004e44:	e049      	b.n	8004eda <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 8004e46:	f7ff fd8d 	bl	8004964 <HAL_RCC_GetSysClockFreq>
 8004e4a:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8004e4c:	e045      	b.n	8004eda <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8004e4e:	4b27      	ldr	r3, [pc, #156]	; (8004eec <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 8004e50:	6a1b      	ldr	r3, [r3, #32]
 8004e52:	61fb      	str	r3, [r7, #28]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004e54:	69fb      	ldr	r3, [r7, #28]
 8004e56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e5e:	d108      	bne.n	8004e72 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	f003 0302 	and.w	r3, r3, #2
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d003      	beq.n	8004e72 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
      {
        frequency = LSE_VALUE;
 8004e6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e70:	e01f      	b.n	8004eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e7c:	d109      	bne.n	8004e92 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 8004e7e:	4b1b      	ldr	r3, [pc, #108]	; (8004eec <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 8004e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e82:	f003 0302 	and.w	r3, r3, #2
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d003      	beq.n	8004e92 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
      {
        frequency = LSI_VALUE;
 8004e8a:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004e8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e90:	e00f      	b.n	8004eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004e92:	69fb      	ldr	r3, [r7, #28]
 8004e94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e9c:	d11c      	bne.n	8004ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
 8004e9e:	4b13      	ldr	r3, [pc, #76]	; (8004eec <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d016      	beq.n	8004ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
      {
        frequency = HSE_VALUE / 128U;
 8004eaa:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004eae:	62bb      	str	r3, [r7, #40]	; 0x28
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8004eb0:	e012      	b.n	8004ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
 8004eb2:	e011      	b.n	8004ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004eb4:	f7ff fdd4 	bl	8004a60 <HAL_RCC_GetPCLK2Freq>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	4b0c      	ldr	r3, [pc, #48]	; (8004eec <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	0b9b      	lsrs	r3, r3, #14
 8004ec0:	f003 0303 	and.w	r3, r3, #3
 8004ec4:	3301      	adds	r3, #1
 8004ec6:	005b      	lsls	r3, r3, #1
 8004ec8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ecc:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004ece:	e004      	b.n	8004eda <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
    }
    default:
    {
      break;
 8004ed0:	bf00      	nop
 8004ed2:	e002      	b.n	8004eda <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
      break;
 8004ed4:	bf00      	nop
 8004ed6:	e000      	b.n	8004eda <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
      break;
 8004ed8:	bf00      	nop
    }
  }
  return (frequency);
 8004eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3734      	adds	r7, #52	; 0x34
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd90      	pop	{r4, r7, pc}
 8004ee4:	0801046c 	.word	0x0801046c
 8004ee8:	08010430 	.word	0x08010430
 8004eec:	40021000 	.word	0x40021000
 8004ef0:	007a1200 	.word	0x007a1200
 8004ef4:	003d0900 	.word	0x003d0900
 8004ef8:	aaaaaaab 	.word	0xaaaaaaab

08004efc <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8004f04:	2300      	movs	r3, #0
 8004f06:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d101      	bne.n	8004f12 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e0b4      	b.n	800507c <HAL_RTC_Init+0x180>
  }

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a5b      	ldr	r2, [pc, #364]	; (8005084 <HAL_RTC_Init+0x188>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d004      	beq.n	8004f26 <HAL_RTC_Init+0x2a>
 8004f1c:	f240 111d 	movw	r1, #285	; 0x11d
 8004f20:	4859      	ldr	r0, [pc, #356]	; (8005088 <HAL_RTC_Init+0x18c>)
 8004f22:	f7fd f991 	bl	8002248 <assert_failed>
  assert_param(IS_RTC_CALIB_OUTPUT(hrtc->Init.OutPut));
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d012      	beq.n	8004f54 <HAL_RTC_Init+0x58>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	2b80      	cmp	r3, #128	; 0x80
 8004f34:	d00e      	beq.n	8004f54 <HAL_RTC_Init+0x58>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f3e:	d009      	beq.n	8004f54 <HAL_RTC_Init+0x58>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f48:	d004      	beq.n	8004f54 <HAL_RTC_Init+0x58>
 8004f4a:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8004f4e:	484e      	ldr	r0, [pc, #312]	; (8005088 <HAL_RTC_Init+0x18c>)
 8004f50:	f7fd f97a 	bl	8002248 <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f5c:	d309      	bcc.n	8004f72 <HAL_RTC_Init+0x76>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f66:	d004      	beq.n	8004f72 <HAL_RTC_Init+0x76>
 8004f68:	f240 111f 	movw	r1, #287	; 0x11f
 8004f6c:	4846      	ldr	r0, [pc, #280]	; (8005088 <HAL_RTC_Init+0x18c>)
 8004f6e:	f7fd f96b 	bl	8002248 <assert_failed>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	7c5b      	ldrb	r3, [r3, #17]
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d105      	bne.n	8004f88 <HAL_RTC_Init+0x8c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f7fd f9e0 	bl	8002348 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2202      	movs	r2, #2
 8004f8c:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f000 fbca 	bl	8005728 <HAL_RTC_WaitForSynchro>
 8004f94:	4603      	mov	r3, r0
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d004      	beq.n	8004fa4 <HAL_RTC_Init+0xa8>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2204      	movs	r2, #4
 8004f9e:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	e06b      	b.n	800507c <HAL_RTC_Init+0x180>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f000 fc83 	bl	80058b0 <RTC_EnterInitMode>
 8004faa:	4603      	mov	r3, r0
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d004      	beq.n	8004fba <HAL_RTC_Init+0xbe>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2204      	movs	r2, #4
 8004fb4:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e060      	b.n	800507c <HAL_RTC_Init+0x180>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	685a      	ldr	r2, [r3, #4]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f022 0207 	bic.w	r2, r2, #7
 8004fc8:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d005      	beq.n	8004fde <HAL_RTC_Init+0xe2>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8004fd2:	4b2e      	ldr	r3, [pc, #184]	; (800508c <HAL_RTC_Init+0x190>)
 8004fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd6:	4a2d      	ldr	r2, [pc, #180]	; (800508c <HAL_RTC_Init+0x190>)
 8004fd8:	f023 0301 	bic.w	r3, r3, #1
 8004fdc:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8004fde:	4b2b      	ldr	r3, [pc, #172]	; (800508c <HAL_RTC_Init+0x190>)
 8004fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe2:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	4928      	ldr	r1, [pc, #160]	; (800508c <HAL_RTC_Init+0x190>)
 8004fec:	4313      	orrs	r3, r2
 8004fee:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ff8:	d003      	beq.n	8005002 <HAL_RTC_Init+0x106>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	60fb      	str	r3, [r7, #12]
 8005000:	e00e      	b.n	8005020 <HAL_RTC_Init+0x124>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8005002:	2001      	movs	r0, #1
 8005004:	f7ff fe74 	bl	8004cf0 <HAL_RCCEx_GetPeriphCLKFreq>
 8005008:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d104      	bne.n	800501a <HAL_RTC_Init+0x11e>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2204      	movs	r2, #4
 8005014:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	e030      	b.n	800507c <HAL_RTC_Init+0x180>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	3b01      	subs	r3, #1
 800501e:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	f023 010f 	bic.w	r1, r3, #15
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	0c1a      	lsrs	r2, r3, #16
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	430a      	orrs	r2, r1
 8005034:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	0c1b      	lsrs	r3, r3, #16
 800503e:	041b      	lsls	r3, r3, #16
 8005040:	68fa      	ldr	r2, [r7, #12]
 8005042:	b291      	uxth	r1, r2
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	6812      	ldr	r2, [r2, #0]
 8005048:	430b      	orrs	r3, r1
 800504a:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f000 fc57 	bl	8005900 <RTC_ExitInitMode>
 8005052:	4603      	mov	r3, r0
 8005054:	2b00      	cmp	r3, #0
 8005056:	d004      	beq.n	8005062 <HAL_RTC_Init+0x166>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2204      	movs	r2, #4
 800505c:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e00c      	b.n	800507c <HAL_RTC_Init+0x180>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2201      	movs	r2, #1
 8005072:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 800507a:	2300      	movs	r3, #0
  }
}
 800507c:	4618      	mov	r0, r3
 800507e:	3710      	adds	r7, #16
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}
 8005084:	40002800 	.word	0x40002800
 8005088:	0801047c 	.word	0x0801047c
 800508c:	40006c00 	.word	0x40006c00

08005090 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005090:	b590      	push	{r4, r7, lr}
 8005092:	b087      	sub	sp, #28
 8005094:	af00      	add	r7, sp, #0
 8005096:	60f8      	str	r0, [r7, #12]
 8005098:	60b9      	str	r1, [r7, #8]
 800509a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 800509c:	2300      	movs	r3, #0
 800509e:	617b      	str	r3, [r7, #20]
 80050a0:	2300      	movs	r3, #0
 80050a2:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d002      	beq.n	80050b0 <HAL_RTC_SetTime+0x20>
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d101      	bne.n	80050b4 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	e0cd      	b.n	8005250 <HAL_RTC_SetTime+0x1c0>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d007      	beq.n	80050ca <HAL_RTC_SetTime+0x3a>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d004      	beq.n	80050ca <HAL_RTC_SetTime+0x3a>
 80050c0:	f240 21ca 	movw	r1, #714	; 0x2ca
 80050c4:	4864      	ldr	r0, [pc, #400]	; (8005258 <HAL_RTC_SetTime+0x1c8>)
 80050c6:	f7fd f8bf 	bl	8002248 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	7c1b      	ldrb	r3, [r3, #16]
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d101      	bne.n	80050d6 <HAL_RTC_SetTime+0x46>
 80050d2:	2302      	movs	r3, #2
 80050d4:	e0bc      	b.n	8005250 <HAL_RTC_SetTime+0x1c0>
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2201      	movs	r2, #1
 80050da:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2202      	movs	r2, #2
 80050e0:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d12e      	bne.n	8005146 <HAL_RTC_SetTime+0xb6>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	781b      	ldrb	r3, [r3, #0]
 80050ec:	2b17      	cmp	r3, #23
 80050ee:	d904      	bls.n	80050fa <HAL_RTC_SetTime+0x6a>
 80050f0:	f240 21d3 	movw	r1, #723	; 0x2d3
 80050f4:	4858      	ldr	r0, [pc, #352]	; (8005258 <HAL_RTC_SetTime+0x1c8>)
 80050f6:	f7fd f8a7 	bl	8002248 <assert_failed>
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	785b      	ldrb	r3, [r3, #1]
 80050fe:	2b3b      	cmp	r3, #59	; 0x3b
 8005100:	d904      	bls.n	800510c <HAL_RTC_SetTime+0x7c>
 8005102:	f44f 7135 	mov.w	r1, #724	; 0x2d4
 8005106:	4854      	ldr	r0, [pc, #336]	; (8005258 <HAL_RTC_SetTime+0x1c8>)
 8005108:	f7fd f89e 	bl	8002248 <assert_failed>
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	789b      	ldrb	r3, [r3, #2]
 8005110:	2b3b      	cmp	r3, #59	; 0x3b
 8005112:	d904      	bls.n	800511e <HAL_RTC_SetTime+0x8e>
 8005114:	f240 21d5 	movw	r1, #725	; 0x2d5
 8005118:	484f      	ldr	r0, [pc, #316]	; (8005258 <HAL_RTC_SetTime+0x1c8>)
 800511a:	f7fd f895 	bl	8002248 <assert_failed>

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	461a      	mov	r2, r3
 8005124:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8005128:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	785b      	ldrb	r3, [r3, #1]
 8005130:	4619      	mov	r1, r3
 8005132:	460b      	mov	r3, r1
 8005134:	011b      	lsls	r3, r3, #4
 8005136:	1a5b      	subs	r3, r3, r1
 8005138:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800513a:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 800513c:	68ba      	ldr	r2, [r7, #8]
 800513e:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8005140:	4413      	add	r3, r2
 8005142:	617b      	str	r3, [r7, #20]
 8005144:	e045      	b.n	80051d2 <HAL_RTC_SetTime+0x142>
  }
  else
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	781b      	ldrb	r3, [r3, #0]
 800514a:	4618      	mov	r0, r3
 800514c:	f000 fc1d 	bl	800598a <RTC_Bcd2ToByte>
 8005150:	4603      	mov	r3, r0
 8005152:	2b17      	cmp	r3, #23
 8005154:	d904      	bls.n	8005160 <HAL_RTC_SetTime+0xd0>
 8005156:	f240 21dd 	movw	r1, #733	; 0x2dd
 800515a:	483f      	ldr	r0, [pc, #252]	; (8005258 <HAL_RTC_SetTime+0x1c8>)
 800515c:	f7fd f874 	bl	8002248 <assert_failed>
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	785b      	ldrb	r3, [r3, #1]
 8005164:	4618      	mov	r0, r3
 8005166:	f000 fc10 	bl	800598a <RTC_Bcd2ToByte>
 800516a:	4603      	mov	r3, r0
 800516c:	2b3b      	cmp	r3, #59	; 0x3b
 800516e:	d904      	bls.n	800517a <HAL_RTC_SetTime+0xea>
 8005170:	f240 21de 	movw	r1, #734	; 0x2de
 8005174:	4838      	ldr	r0, [pc, #224]	; (8005258 <HAL_RTC_SetTime+0x1c8>)
 8005176:	f7fd f867 	bl	8002248 <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	789b      	ldrb	r3, [r3, #2]
 800517e:	4618      	mov	r0, r3
 8005180:	f000 fc03 	bl	800598a <RTC_Bcd2ToByte>
 8005184:	4603      	mov	r3, r0
 8005186:	2b3b      	cmp	r3, #59	; 0x3b
 8005188:	d904      	bls.n	8005194 <HAL_RTC_SetTime+0x104>
 800518a:	f240 21df 	movw	r1, #735	; 0x2df
 800518e:	4832      	ldr	r0, [pc, #200]	; (8005258 <HAL_RTC_SetTime+0x1c8>)
 8005190:	f7fd f85a 	bl	8002248 <assert_failed>

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	781b      	ldrb	r3, [r3, #0]
 8005198:	4618      	mov	r0, r3
 800519a:	f000 fbf6 	bl	800598a <RTC_Bcd2ToByte>
 800519e:	4603      	mov	r3, r0
 80051a0:	461a      	mov	r2, r3
 80051a2:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80051a6:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	785b      	ldrb	r3, [r3, #1]
 80051ae:	4618      	mov	r0, r3
 80051b0:	f000 fbeb 	bl	800598a <RTC_Bcd2ToByte>
 80051b4:	4603      	mov	r3, r0
 80051b6:	461a      	mov	r2, r3
 80051b8:	4613      	mov	r3, r2
 80051ba:	011b      	lsls	r3, r3, #4
 80051bc:	1a9b      	subs	r3, r3, r2
 80051be:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80051c0:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	789b      	ldrb	r3, [r3, #2]
 80051c6:	4618      	mov	r0, r3
 80051c8:	f000 fbdf 	bl	800598a <RTC_Bcd2ToByte>
 80051cc:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80051ce:	4423      	add	r3, r4
 80051d0:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80051d2:	6979      	ldr	r1, [r7, #20]
 80051d4:	68f8      	ldr	r0, [r7, #12]
 80051d6:	f000 fb04 	bl	80057e2 <RTC_WriteTimeCounter>
 80051da:	4603      	mov	r3, r0
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d007      	beq.n	80051f0 <HAL_RTC_SetTime+0x160>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2204      	movs	r2, #4
 80051e4:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2200      	movs	r2, #0
 80051ea:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	e02f      	b.n	8005250 <HAL_RTC_SetTime+0x1c0>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	685a      	ldr	r2, [r3, #4]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f022 0205 	bic.w	r2, r2, #5
 80051fe:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8005200:	68f8      	ldr	r0, [r7, #12]
 8005202:	f000 fb15 	bl	8005830 <RTC_ReadAlarmCounter>
 8005206:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800520e:	d018      	beq.n	8005242 <HAL_RTC_SetTime+0x1b2>
    {
      if (counter_alarm < counter_time)
 8005210:	693a      	ldr	r2, [r7, #16]
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	429a      	cmp	r2, r3
 8005216:	d214      	bcs.n	8005242 <HAL_RTC_SetTime+0x1b2>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 800521e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005222:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005224:	6939      	ldr	r1, [r7, #16]
 8005226:	68f8      	ldr	r0, [r7, #12]
 8005228:	f000 fb1b 	bl	8005862 <RTC_WriteAlarmCounter>
 800522c:	4603      	mov	r3, r0
 800522e:	2b00      	cmp	r3, #0
 8005230:	d007      	beq.n	8005242 <HAL_RTC_SetTime+0x1b2>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2204      	movs	r2, #4
 8005236:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2200      	movs	r2, #0
 800523c:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	e006      	b.n	8005250 <HAL_RTC_SetTime+0x1c0>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2201      	movs	r2, #1
 8005246:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2200      	movs	r2, #0
 800524c:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 800524e:	2300      	movs	r3, #0
  }
}
 8005250:	4618      	mov	r0, r3
 8005252:	371c      	adds	r7, #28
 8005254:	46bd      	mov	sp, r7
 8005256:	bd90      	pop	{r4, r7, pc}
 8005258:	0801047c 	.word	0x0801047c

0800525c <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b088      	sub	sp, #32
 8005260:	af00      	add	r7, sp, #0
 8005262:	60f8      	str	r0, [r7, #12]
 8005264:	60b9      	str	r1, [r7, #8]
 8005266:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8005268:	2300      	movs	r3, #0
 800526a:	61bb      	str	r3, [r7, #24]
 800526c:	2300      	movs	r3, #0
 800526e:	61fb      	str	r3, [r7, #28]
 8005270:	2300      	movs	r3, #0
 8005272:	617b      	str	r3, [r7, #20]
 8005274:	2300      	movs	r3, #0
 8005276:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d002      	beq.n	8005284 <HAL_RTC_GetTime+0x28>
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d101      	bne.n	8005288 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	e0c0      	b.n	800540a <HAL_RTC_GetTime+0x1ae>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d007      	beq.n	800529e <HAL_RTC_GetTime+0x42>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2b01      	cmp	r3, #1
 8005292:	d004      	beq.n	800529e <HAL_RTC_GetTime+0x42>
 8005294:	f240 312d 	movw	r1, #813	; 0x32d
 8005298:	485e      	ldr	r0, [pc, #376]	; (8005414 <HAL_RTC_GetTime+0x1b8>)
 800529a:	f7fc ffd5 	bl	8002248 <assert_failed>

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	f003 0304 	and.w	r3, r3, #4
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d001      	beq.n	80052b0 <HAL_RTC_GetTime+0x54>
  {
    return HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	e0ac      	b.n	800540a <HAL_RTC_GetTime+0x1ae>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80052b0:	68f8      	ldr	r0, [r7, #12]
 80052b2:	f000 fa66 	bl	8005782 <RTC_ReadTimeCounter>
 80052b6:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80052b8:	69bb      	ldr	r3, [r7, #24]
 80052ba:	4a57      	ldr	r2, [pc, #348]	; (8005418 <HAL_RTC_GetTime+0x1bc>)
 80052bc:	fba2 2303 	umull	r2, r3, r2, r3
 80052c0:	0adb      	lsrs	r3, r3, #11
 80052c2:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 80052c4:	69ba      	ldr	r2, [r7, #24]
 80052c6:	4b54      	ldr	r3, [pc, #336]	; (8005418 <HAL_RTC_GetTime+0x1bc>)
 80052c8:	fba3 1302 	umull	r1, r3, r3, r2
 80052cc:	0adb      	lsrs	r3, r3, #11
 80052ce:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80052d2:	fb01 f303 	mul.w	r3, r1, r3
 80052d6:	1ad3      	subs	r3, r2, r3
 80052d8:	4a50      	ldr	r2, [pc, #320]	; (800541c <HAL_RTC_GetTime+0x1c0>)
 80052da:	fba2 2303 	umull	r2, r3, r2, r3
 80052de:	095b      	lsrs	r3, r3, #5
 80052e0:	b2da      	uxtb	r2, r3
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 80052e6:	69bb      	ldr	r3, [r7, #24]
 80052e8:	4a4b      	ldr	r2, [pc, #300]	; (8005418 <HAL_RTC_GetTime+0x1bc>)
 80052ea:	fba2 1203 	umull	r1, r2, r2, r3
 80052ee:	0ad2      	lsrs	r2, r2, #11
 80052f0:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80052f4:	fb01 f202 	mul.w	r2, r1, r2
 80052f8:	1a9a      	subs	r2, r3, r2
 80052fa:	4b48      	ldr	r3, [pc, #288]	; (800541c <HAL_RTC_GetTime+0x1c0>)
 80052fc:	fba3 1302 	umull	r1, r3, r3, r2
 8005300:	0959      	lsrs	r1, r3, #5
 8005302:	460b      	mov	r3, r1
 8005304:	011b      	lsls	r3, r3, #4
 8005306:	1a5b      	subs	r3, r3, r1
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	1ad1      	subs	r1, r2, r3
 800530c:	b2ca      	uxtb	r2, r1
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	2b17      	cmp	r3, #23
 8005316:	d955      	bls.n	80053c4 <HAL_RTC_GetTime+0x168>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	4a41      	ldr	r2, [pc, #260]	; (8005420 <HAL_RTC_GetTime+0x1c4>)
 800531c:	fba2 2303 	umull	r2, r3, r2, r3
 8005320:	091b      	lsrs	r3, r3, #4
 8005322:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8005324:	6939      	ldr	r1, [r7, #16]
 8005326:	4b3e      	ldr	r3, [pc, #248]	; (8005420 <HAL_RTC_GetTime+0x1c4>)
 8005328:	fba3 2301 	umull	r2, r3, r3, r1
 800532c:	091a      	lsrs	r2, r3, #4
 800532e:	4613      	mov	r3, r2
 8005330:	005b      	lsls	r3, r3, #1
 8005332:	4413      	add	r3, r2
 8005334:	00db      	lsls	r3, r3, #3
 8005336:	1aca      	subs	r2, r1, r3
 8005338:	b2d2      	uxtb	r2, r2
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800533e:	68f8      	ldr	r0, [r7, #12]
 8005340:	f000 fa76 	bl	8005830 <RTC_ReadAlarmCounter>
 8005344:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8005346:	69fb      	ldr	r3, [r7, #28]
 8005348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800534c:	d008      	beq.n	8005360 <HAL_RTC_GetTime+0x104>
 800534e:	69fa      	ldr	r2, [r7, #28]
 8005350:	69bb      	ldr	r3, [r7, #24]
 8005352:	429a      	cmp	r2, r3
 8005354:	d904      	bls.n	8005360 <HAL_RTC_GetTime+0x104>
    {
      counter_alarm -= counter_time;
 8005356:	69fa      	ldr	r2, [r7, #28]
 8005358:	69bb      	ldr	r3, [r7, #24]
 800535a:	1ad3      	subs	r3, r2, r3
 800535c:	61fb      	str	r3, [r7, #28]
 800535e:	e002      	b.n	8005366 <HAL_RTC_GetTime+0x10a>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8005360:	f04f 33ff 	mov.w	r3, #4294967295
 8005364:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	4a2e      	ldr	r2, [pc, #184]	; (8005424 <HAL_RTC_GetTime+0x1c8>)
 800536a:	fb02 f303 	mul.w	r3, r2, r3
 800536e:	69ba      	ldr	r2, [r7, #24]
 8005370:	1ad3      	subs	r3, r2, r3
 8005372:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8005374:	69b9      	ldr	r1, [r7, #24]
 8005376:	68f8      	ldr	r0, [r7, #12]
 8005378:	f000 fa33 	bl	80057e2 <RTC_WriteTimeCounter>
 800537c:	4603      	mov	r3, r0
 800537e:	2b00      	cmp	r3, #0
 8005380:	d001      	beq.n	8005386 <HAL_RTC_GetTime+0x12a>
    {
      return HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	e041      	b.n	800540a <HAL_RTC_GetTime+0x1ae>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8005386:	69fb      	ldr	r3, [r7, #28]
 8005388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800538c:	d00c      	beq.n	80053a8 <HAL_RTC_GetTime+0x14c>
    {
      counter_alarm += counter_time;
 800538e:	69fa      	ldr	r2, [r7, #28]
 8005390:	69bb      	ldr	r3, [r7, #24]
 8005392:	4413      	add	r3, r2
 8005394:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005396:	69f9      	ldr	r1, [r7, #28]
 8005398:	68f8      	ldr	r0, [r7, #12]
 800539a:	f000 fa62 	bl	8005862 <RTC_WriteAlarmCounter>
 800539e:	4603      	mov	r3, r0
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d00a      	beq.n	80053ba <HAL_RTC_GetTime+0x15e>
      {
        return HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	e030      	b.n	800540a <HAL_RTC_GetTime+0x1ae>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80053a8:	69f9      	ldr	r1, [r7, #28]
 80053aa:	68f8      	ldr	r0, [r7, #12]
 80053ac:	f000 fa59 	bl	8005862 <RTC_WriteAlarmCounter>
 80053b0:	4603      	mov	r3, r0
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d001      	beq.n	80053ba <HAL_RTC_GetTime+0x15e>
      {
        return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e027      	b.n	800540a <HAL_RTC_GetTime+0x1ae>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 80053ba:	6979      	ldr	r1, [r7, #20]
 80053bc:	68f8      	ldr	r0, [r7, #12]
 80053be:	f000 fb01 	bl	80059c4 <RTC_DateUpdate>
 80053c2:	e003      	b.n	80053cc <HAL_RTC_GetTime+0x170>
  }
  else
  {
    sTime->Hours = hours;
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	b2da      	uxtb	r2, r3
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d01a      	beq.n	8005408 <HAL_RTC_GetTime+0x1ac>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	781b      	ldrb	r3, [r3, #0]
 80053d6:	4618      	mov	r0, r3
 80053d8:	f000 faba 	bl	8005950 <RTC_ByteToBcd2>
 80053dc:	4603      	mov	r3, r0
 80053de:	461a      	mov	r2, r3
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	785b      	ldrb	r3, [r3, #1]
 80053e8:	4618      	mov	r0, r3
 80053ea:	f000 fab1 	bl	8005950 <RTC_ByteToBcd2>
 80053ee:	4603      	mov	r3, r0
 80053f0:	461a      	mov	r2, r3
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	789b      	ldrb	r3, [r3, #2]
 80053fa:	4618      	mov	r0, r3
 80053fc:	f000 faa8 	bl	8005950 <RTC_ByteToBcd2>
 8005400:	4603      	mov	r3, r0
 8005402:	461a      	mov	r2, r3
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005408:	2300      	movs	r3, #0
}
 800540a:	4618      	mov	r0, r3
 800540c:	3720      	adds	r7, #32
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
 8005412:	bf00      	nop
 8005414:	0801047c 	.word	0x0801047c
 8005418:	91a2b3c5 	.word	0x91a2b3c5
 800541c:	88888889 	.word	0x88888889
 8005420:	aaaaaaab 	.word	0xaaaaaaab
 8005424:	00015180 	.word	0x00015180

08005428 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b088      	sub	sp, #32
 800542c:	af00      	add	r7, sp, #0
 800542e:	60f8      	str	r0, [r7, #12]
 8005430:	60b9      	str	r1, [r7, #8]
 8005432:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8005434:	2300      	movs	r3, #0
 8005436:	61fb      	str	r3, [r7, #28]
 8005438:	2300      	movs	r3, #0
 800543a:	61bb      	str	r3, [r7, #24]
 800543c:	2300      	movs	r3, #0
 800543e:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d002      	beq.n	800544c <HAL_RTC_SetDate+0x24>
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d101      	bne.n	8005450 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	e0fc      	b.n	800564a <HAL_RTC_SetDate+0x222>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d007      	beq.n	8005466 <HAL_RTC_SetDate+0x3e>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2b01      	cmp	r3, #1
 800545a:	d004      	beq.n	8005466 <HAL_RTC_SetDate+0x3e>
 800545c:	f44f 7167 	mov.w	r1, #924	; 0x39c
 8005460:	487c      	ldr	r0, [pc, #496]	; (8005654 <HAL_RTC_SetDate+0x22c>)
 8005462:	f7fc fef1 	bl	8002248 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	7c1b      	ldrb	r3, [r3, #16]
 800546a:	2b01      	cmp	r3, #1
 800546c:	d101      	bne.n	8005472 <HAL_RTC_SetDate+0x4a>
 800546e:	2302      	movs	r3, #2
 8005470:	e0eb      	b.n	800564a <HAL_RTC_SetDate+0x222>
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2201      	movs	r2, #1
 8005476:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2202      	movs	r2, #2
 800547c:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d12f      	bne.n	80054e4 <HAL_RTC_SetDate+0xbc>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	78db      	ldrb	r3, [r3, #3]
 8005488:	2b63      	cmp	r3, #99	; 0x63
 800548a:	d904      	bls.n	8005496 <HAL_RTC_SetDate+0x6e>
 800548c:	f240 31a5 	movw	r1, #933	; 0x3a5
 8005490:	4870      	ldr	r0, [pc, #448]	; (8005654 <HAL_RTC_SetDate+0x22c>)
 8005492:	f7fc fed9 	bl	8002248 <assert_failed>
    assert_param(IS_RTC_MONTH(sDate->Month));
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	785b      	ldrb	r3, [r3, #1]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d003      	beq.n	80054a6 <HAL_RTC_SetDate+0x7e>
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	785b      	ldrb	r3, [r3, #1]
 80054a2:	2b0c      	cmp	r3, #12
 80054a4:	d904      	bls.n	80054b0 <HAL_RTC_SetDate+0x88>
 80054a6:	f240 31a6 	movw	r1, #934	; 0x3a6
 80054aa:	486a      	ldr	r0, [pc, #424]	; (8005654 <HAL_RTC_SetDate+0x22c>)
 80054ac:	f7fc fecc 	bl	8002248 <assert_failed>
    assert_param(IS_RTC_DATE(sDate->Date));
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	789b      	ldrb	r3, [r3, #2]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d003      	beq.n	80054c0 <HAL_RTC_SetDate+0x98>
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	789b      	ldrb	r3, [r3, #2]
 80054bc:	2b1f      	cmp	r3, #31
 80054be:	d904      	bls.n	80054ca <HAL_RTC_SetDate+0xa2>
 80054c0:	f240 31a7 	movw	r1, #935	; 0x3a7
 80054c4:	4863      	ldr	r0, [pc, #396]	; (8005654 <HAL_RTC_SetDate+0x22c>)
 80054c6:	f7fc febf 	bl	8002248 <assert_failed>

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	78da      	ldrb	r2, [r3, #3]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	785a      	ldrb	r2, [r3, #1]
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	789a      	ldrb	r2, [r3, #2]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	739a      	strb	r2, [r3, #14]
 80054e2:	e051      	b.n	8005588 <HAL_RTC_SetDate+0x160>
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	78db      	ldrb	r3, [r3, #3]
 80054e8:	4618      	mov	r0, r3
 80054ea:	f000 fa4e 	bl	800598a <RTC_Bcd2ToByte>
 80054ee:	4603      	mov	r3, r0
 80054f0:	2b63      	cmp	r3, #99	; 0x63
 80054f2:	d904      	bls.n	80054fe <HAL_RTC_SetDate+0xd6>
 80054f4:	f44f 716c 	mov.w	r1, #944	; 0x3b0
 80054f8:	4856      	ldr	r0, [pc, #344]	; (8005654 <HAL_RTC_SetDate+0x22c>)
 80054fa:	f7fc fea5 	bl	8002248 <assert_failed>
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	785b      	ldrb	r3, [r3, #1]
 8005502:	4618      	mov	r0, r3
 8005504:	f000 fa41 	bl	800598a <RTC_Bcd2ToByte>
 8005508:	4603      	mov	r3, r0
 800550a:	2b00      	cmp	r3, #0
 800550c:	d007      	beq.n	800551e <HAL_RTC_SetDate+0xf6>
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	785b      	ldrb	r3, [r3, #1]
 8005512:	4618      	mov	r0, r3
 8005514:	f000 fa39 	bl	800598a <RTC_Bcd2ToByte>
 8005518:	4603      	mov	r3, r0
 800551a:	2b0c      	cmp	r3, #12
 800551c:	d904      	bls.n	8005528 <HAL_RTC_SetDate+0x100>
 800551e:	f240 31b1 	movw	r1, #945	; 0x3b1
 8005522:	484c      	ldr	r0, [pc, #304]	; (8005654 <HAL_RTC_SetDate+0x22c>)
 8005524:	f7fc fe90 	bl	8002248 <assert_failed>
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	789b      	ldrb	r3, [r3, #2]
 800552c:	4618      	mov	r0, r3
 800552e:	f000 fa2c 	bl	800598a <RTC_Bcd2ToByte>
 8005532:	4603      	mov	r3, r0
 8005534:	2b00      	cmp	r3, #0
 8005536:	d007      	beq.n	8005548 <HAL_RTC_SetDate+0x120>
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	789b      	ldrb	r3, [r3, #2]
 800553c:	4618      	mov	r0, r3
 800553e:	f000 fa24 	bl	800598a <RTC_Bcd2ToByte>
 8005542:	4603      	mov	r3, r0
 8005544:	2b1f      	cmp	r3, #31
 8005546:	d904      	bls.n	8005552 <HAL_RTC_SetDate+0x12a>
 8005548:	f240 31b2 	movw	r1, #946	; 0x3b2
 800554c:	4841      	ldr	r0, [pc, #260]	; (8005654 <HAL_RTC_SetDate+0x22c>)
 800554e:	f7fc fe7b 	bl	8002248 <assert_failed>

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	78db      	ldrb	r3, [r3, #3]
 8005556:	4618      	mov	r0, r3
 8005558:	f000 fa17 	bl	800598a <RTC_Bcd2ToByte>
 800555c:	4603      	mov	r3, r0
 800555e:	461a      	mov	r2, r3
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	785b      	ldrb	r3, [r3, #1]
 8005568:	4618      	mov	r0, r3
 800556a:	f000 fa0e 	bl	800598a <RTC_Bcd2ToByte>
 800556e:	4603      	mov	r3, r0
 8005570:	461a      	mov	r2, r3
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	789b      	ldrb	r3, [r3, #2]
 800557a:	4618      	mov	r0, r3
 800557c:	f000 fa05 	bl	800598a <RTC_Bcd2ToByte>
 8005580:	4603      	mov	r3, r0
 8005582:	461a      	mov	r2, r3
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	7bdb      	ldrb	r3, [r3, #15]
 800558c:	4618      	mov	r0, r3
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	7b59      	ldrb	r1, [r3, #13]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	7b9b      	ldrb	r3, [r3, #14]
 8005596:	461a      	mov	r2, r3
 8005598:	f000 faf0 	bl	8005b7c <RTC_WeekDayNum>
 800559c:	4603      	mov	r3, r0
 800559e:	461a      	mov	r2, r3
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	7b1a      	ldrb	r2, [r3, #12]
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80055ac:	68f8      	ldr	r0, [r7, #12]
 80055ae:	f000 f8e8 	bl	8005782 <RTC_ReadTimeCounter>
 80055b2:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80055b4:	69fb      	ldr	r3, [r7, #28]
 80055b6:	4a28      	ldr	r2, [pc, #160]	; (8005658 <HAL_RTC_SetDate+0x230>)
 80055b8:	fba2 2303 	umull	r2, r3, r2, r3
 80055bc:	0adb      	lsrs	r3, r3, #11
 80055be:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	2b18      	cmp	r3, #24
 80055c4:	d93a      	bls.n	800563c <HAL_RTC_SetDate+0x214>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	4a24      	ldr	r2, [pc, #144]	; (800565c <HAL_RTC_SetDate+0x234>)
 80055ca:	fba2 2303 	umull	r2, r3, r2, r3
 80055ce:	091b      	lsrs	r3, r3, #4
 80055d0:	4a23      	ldr	r2, [pc, #140]	; (8005660 <HAL_RTC_SetDate+0x238>)
 80055d2:	fb02 f303 	mul.w	r3, r2, r3
 80055d6:	69fa      	ldr	r2, [r7, #28]
 80055d8:	1ad3      	subs	r3, r2, r3
 80055da:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80055dc:	69f9      	ldr	r1, [r7, #28]
 80055de:	68f8      	ldr	r0, [r7, #12]
 80055e0:	f000 f8ff 	bl	80057e2 <RTC_WriteTimeCounter>
 80055e4:	4603      	mov	r3, r0
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d007      	beq.n	80055fa <HAL_RTC_SetDate+0x1d2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2204      	movs	r2, #4
 80055ee:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2200      	movs	r2, #0
 80055f4:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	e027      	b.n	800564a <HAL_RTC_SetDate+0x222>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80055fa:	68f8      	ldr	r0, [r7, #12]
 80055fc:	f000 f918 	bl	8005830 <RTC_ReadAlarmCounter>
 8005600:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8005602:	69bb      	ldr	r3, [r7, #24]
 8005604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005608:	d018      	beq.n	800563c <HAL_RTC_SetDate+0x214>
    {
      if (counter_alarm < counter_time)
 800560a:	69ba      	ldr	r2, [r7, #24]
 800560c:	69fb      	ldr	r3, [r7, #28]
 800560e:	429a      	cmp	r2, r3
 8005610:	d214      	bcs.n	800563c <HAL_RTC_SetDate+0x214>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8005612:	69bb      	ldr	r3, [r7, #24]
 8005614:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8005618:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800561c:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800561e:	69b9      	ldr	r1, [r7, #24]
 8005620:	68f8      	ldr	r0, [r7, #12]
 8005622:	f000 f91e 	bl	8005862 <RTC_WriteAlarmCounter>
 8005626:	4603      	mov	r3, r0
 8005628:	2b00      	cmp	r3, #0
 800562a:	d007      	beq.n	800563c <HAL_RTC_SetDate+0x214>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2204      	movs	r2, #4
 8005630:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2200      	movs	r2, #0
 8005636:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8005638:	2301      	movs	r3, #1
 800563a:	e006      	b.n	800564a <HAL_RTC_SetDate+0x222>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2201      	movs	r2, #1
 8005640:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2200      	movs	r2, #0
 8005646:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8005648:	2300      	movs	r3, #0
}
 800564a:	4618      	mov	r0, r3
 800564c:	3720      	adds	r7, #32
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	0801047c 	.word	0x0801047c
 8005658:	91a2b3c5 	.word	0x91a2b3c5
 800565c:	aaaaaaab 	.word	0xaaaaaaab
 8005660:	00015180 	.word	0x00015180

08005664 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b086      	sub	sp, #24
 8005668:	af00      	add	r7, sp, #0
 800566a:	60f8      	str	r0, [r7, #12]
 800566c:	60b9      	str	r1, [r7, #8]
 800566e:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 8005670:	f107 0314 	add.w	r3, r7, #20
 8005674:	2100      	movs	r1, #0
 8005676:	460a      	mov	r2, r1
 8005678:	801a      	strh	r2, [r3, #0]
 800567a:	460a      	mov	r2, r1
 800567c:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d002      	beq.n	800568a <HAL_RTC_GetDate+0x26>
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d101      	bne.n	800568e <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	e045      	b.n	800571a <HAL_RTC_GetDate+0xb6>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d007      	beq.n	80056a4 <HAL_RTC_GetDate+0x40>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2b01      	cmp	r3, #1
 8005698:	d004      	beq.n	80056a4 <HAL_RTC_GetDate+0x40>
 800569a:	f240 410e 	movw	r1, #1038	; 0x40e
 800569e:	4821      	ldr	r0, [pc, #132]	; (8005724 <HAL_RTC_GetDate+0xc0>)
 80056a0:	f7fc fdd2 	bl	8002248 <assert_failed>

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 80056a4:	f107 0314 	add.w	r3, r7, #20
 80056a8:	2200      	movs	r2, #0
 80056aa:	4619      	mov	r1, r3
 80056ac:	68f8      	ldr	r0, [r7, #12]
 80056ae:	f7ff fdd5 	bl	800525c <HAL_RTC_GetTime>
 80056b2:	4603      	mov	r3, r0
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d001      	beq.n	80056bc <HAL_RTC_GetDate+0x58>
  {
    return HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	e02e      	b.n	800571a <HAL_RTC_GetDate+0xb6>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	7b1a      	ldrb	r2, [r3, #12]
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	7bda      	ldrb	r2, [r3, #15]
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	7b5a      	ldrb	r2, [r3, #13]
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	7b9a      	ldrb	r2, [r3, #14]
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d01a      	beq.n	8005718 <HAL_RTC_GetDate+0xb4>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	78db      	ldrb	r3, [r3, #3]
 80056e6:	4618      	mov	r0, r3
 80056e8:	f000 f932 	bl	8005950 <RTC_ByteToBcd2>
 80056ec:	4603      	mov	r3, r0
 80056ee:	461a      	mov	r2, r3
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	785b      	ldrb	r3, [r3, #1]
 80056f8:	4618      	mov	r0, r3
 80056fa:	f000 f929 	bl	8005950 <RTC_ByteToBcd2>
 80056fe:	4603      	mov	r3, r0
 8005700:	461a      	mov	r2, r3
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	789b      	ldrb	r3, [r3, #2]
 800570a:	4618      	mov	r0, r3
 800570c:	f000 f920 	bl	8005950 <RTC_ByteToBcd2>
 8005710:	4603      	mov	r3, r0
 8005712:	461a      	mov	r2, r3
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005718:	2300      	movs	r3, #0
}
 800571a:	4618      	mov	r0, r3
 800571c:	3718      	adds	r7, #24
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
 8005722:	bf00      	nop
 8005724:	0801047c 	.word	0x0801047c

08005728 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b084      	sub	sp, #16
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005730:	2300      	movs	r3, #0
 8005732:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d101      	bne.n	800573e <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	e01d      	b.n	800577a <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	685a      	ldr	r2, [r3, #4]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f022 0208 	bic.w	r2, r2, #8
 800574c:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800574e:	f7fd fa4b 	bl	8002be8 <HAL_GetTick>
 8005752:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8005754:	e009      	b.n	800576a <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005756:	f7fd fa47 	bl	8002be8 <HAL_GetTick>
 800575a:	4602      	mov	r2, r0
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	1ad3      	subs	r3, r2, r3
 8005760:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005764:	d901      	bls.n	800576a <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8005766:	2303      	movs	r3, #3
 8005768:	e007      	b.n	800577a <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	f003 0308 	and.w	r3, r3, #8
 8005774:	2b00      	cmp	r3, #0
 8005776:	d0ee      	beq.n	8005756 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8005778:	2300      	movs	r3, #0
}
 800577a:	4618      	mov	r0, r3
 800577c:	3710      	adds	r7, #16
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}

08005782 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8005782:	b480      	push	{r7}
 8005784:	b087      	sub	sp, #28
 8005786:	af00      	add	r7, sp, #0
 8005788:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 800578a:	2300      	movs	r3, #0
 800578c:	827b      	strh	r3, [r7, #18]
 800578e:	2300      	movs	r3, #0
 8005790:	823b      	strh	r3, [r7, #16]
 8005792:	2300      	movs	r3, #0
 8005794:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8005796:	2300      	movs	r3, #0
 8005798:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	699b      	ldr	r3, [r3, #24]
 80057a0:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	69db      	ldr	r3, [r3, #28]
 80057a8:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	699b      	ldr	r3, [r3, #24]
 80057b0:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 80057b2:	8a7a      	ldrh	r2, [r7, #18]
 80057b4:	8a3b      	ldrh	r3, [r7, #16]
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d008      	beq.n	80057cc <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80057ba:	8a3b      	ldrh	r3, [r7, #16]
 80057bc:	041a      	lsls	r2, r3, #16
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	69db      	ldr	r3, [r3, #28]
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	4313      	orrs	r3, r2
 80057c8:	617b      	str	r3, [r7, #20]
 80057ca:	e004      	b.n	80057d6 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 80057cc:	8a7b      	ldrh	r3, [r7, #18]
 80057ce:	041a      	lsls	r2, r3, #16
 80057d0:	89fb      	ldrh	r3, [r7, #14]
 80057d2:	4313      	orrs	r3, r2
 80057d4:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 80057d6:	697b      	ldr	r3, [r7, #20]
}
 80057d8:	4618      	mov	r0, r3
 80057da:	371c      	adds	r7, #28
 80057dc:	46bd      	mov	sp, r7
 80057de:	bc80      	pop	{r7}
 80057e0:	4770      	bx	lr

080057e2 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 80057e2:	b580      	push	{r7, lr}
 80057e4:	b084      	sub	sp, #16
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	6078      	str	r0, [r7, #4]
 80057ea:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057ec:	2300      	movs	r3, #0
 80057ee:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f000 f85d 	bl	80058b0 <RTC_EnterInitMode>
 80057f6:	4603      	mov	r3, r0
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d002      	beq.n	8005802 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	73fb      	strb	r3, [r7, #15]
 8005800:	e011      	b.n	8005826 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	683a      	ldr	r2, [r7, #0]
 8005808:	0c12      	lsrs	r2, r2, #16
 800580a:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	683a      	ldr	r2, [r7, #0]
 8005812:	b292      	uxth	r2, r2
 8005814:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f000 f872 	bl	8005900 <RTC_ExitInitMode>
 800581c:	4603      	mov	r3, r0
 800581e:	2b00      	cmp	r3, #0
 8005820:	d001      	beq.n	8005826 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005826:	7bfb      	ldrb	r3, [r7, #15]
}
 8005828:	4618      	mov	r0, r3
 800582a:	3710      	adds	r7, #16
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}

08005830 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8005830:	b480      	push	{r7}
 8005832:	b085      	sub	sp, #20
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8005838:	2300      	movs	r3, #0
 800583a:	81fb      	strh	r3, [r7, #14]
 800583c:	2300      	movs	r3, #0
 800583e:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	6a1b      	ldr	r3, [r3, #32]
 8005846:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800584e:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8005850:	89fb      	ldrh	r3, [r7, #14]
 8005852:	041a      	lsls	r2, r3, #16
 8005854:	89bb      	ldrh	r3, [r7, #12]
 8005856:	4313      	orrs	r3, r2
}
 8005858:	4618      	mov	r0, r3
 800585a:	3714      	adds	r7, #20
 800585c:	46bd      	mov	sp, r7
 800585e:	bc80      	pop	{r7}
 8005860:	4770      	bx	lr

08005862 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8005862:	b580      	push	{r7, lr}
 8005864:	b084      	sub	sp, #16
 8005866:	af00      	add	r7, sp, #0
 8005868:	6078      	str	r0, [r7, #4]
 800586a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800586c:	2300      	movs	r3, #0
 800586e:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f000 f81d 	bl	80058b0 <RTC_EnterInitMode>
 8005876:	4603      	mov	r3, r0
 8005878:	2b00      	cmp	r3, #0
 800587a:	d002      	beq.n	8005882 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 800587c:	2301      	movs	r3, #1
 800587e:	73fb      	strb	r3, [r7, #15]
 8005880:	e011      	b.n	80058a6 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	683a      	ldr	r2, [r7, #0]
 8005888:	0c12      	lsrs	r2, r2, #16
 800588a:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	683a      	ldr	r2, [r7, #0]
 8005892:	b292      	uxth	r2, r2
 8005894:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 f832 	bl	8005900 <RTC_ExitInitMode>
 800589c:	4603      	mov	r3, r0
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d001      	beq.n	80058a6 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80058a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3710      	adds	r7, #16
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}

080058b0 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b084      	sub	sp, #16
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80058b8:	2300      	movs	r3, #0
 80058ba:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 80058bc:	f7fd f994 	bl	8002be8 <HAL_GetTick>
 80058c0:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80058c2:	e009      	b.n	80058d8 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80058c4:	f7fd f990 	bl	8002be8 <HAL_GetTick>
 80058c8:	4602      	mov	r2, r0
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	1ad3      	subs	r3, r2, r3
 80058ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80058d2:	d901      	bls.n	80058d8 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 80058d4:	2303      	movs	r3, #3
 80058d6:	e00f      	b.n	80058f8 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	f003 0320 	and.w	r3, r3, #32
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d0ee      	beq.n	80058c4 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	685a      	ldr	r2, [r3, #4]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f042 0210 	orr.w	r2, r2, #16
 80058f4:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 80058f6:	2300      	movs	r3, #0
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3710      	adds	r7, #16
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}

08005900 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b084      	sub	sp, #16
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005908:	2300      	movs	r3, #0
 800590a:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	685a      	ldr	r2, [r3, #4]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f022 0210 	bic.w	r2, r2, #16
 800591a:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800591c:	f7fd f964 	bl	8002be8 <HAL_GetTick>
 8005920:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005922:	e009      	b.n	8005938 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005924:	f7fd f960 	bl	8002be8 <HAL_GetTick>
 8005928:	4602      	mov	r2, r0
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	1ad3      	subs	r3, r2, r3
 800592e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005932:	d901      	bls.n	8005938 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8005934:	2303      	movs	r3, #3
 8005936:	e007      	b.n	8005948 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	f003 0320 	and.w	r3, r3, #32
 8005942:	2b00      	cmp	r3, #0
 8005944:	d0ee      	beq.n	8005924 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8005946:	2300      	movs	r3, #0
}
 8005948:	4618      	mov	r0, r3
 800594a:	3710      	adds	r7, #16
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}

08005950 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005950:	b480      	push	{r7}
 8005952:	b085      	sub	sp, #20
 8005954:	af00      	add	r7, sp, #0
 8005956:	4603      	mov	r3, r0
 8005958:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800595a:	2300      	movs	r3, #0
 800595c:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 800595e:	e005      	b.n	800596c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	3301      	adds	r3, #1
 8005964:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8005966:	79fb      	ldrb	r3, [r7, #7]
 8005968:	3b0a      	subs	r3, #10
 800596a:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 800596c:	79fb      	ldrb	r3, [r7, #7]
 800596e:	2b09      	cmp	r3, #9
 8005970:	d8f6      	bhi.n	8005960 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	b2db      	uxtb	r3, r3
 8005976:	011b      	lsls	r3, r3, #4
 8005978:	b2da      	uxtb	r2, r3
 800597a:	79fb      	ldrb	r3, [r7, #7]
 800597c:	4313      	orrs	r3, r2
 800597e:	b2db      	uxtb	r3, r3
}
 8005980:	4618      	mov	r0, r3
 8005982:	3714      	adds	r7, #20
 8005984:	46bd      	mov	sp, r7
 8005986:	bc80      	pop	{r7}
 8005988:	4770      	bx	lr

0800598a <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800598a:	b480      	push	{r7}
 800598c:	b085      	sub	sp, #20
 800598e:	af00      	add	r7, sp, #0
 8005990:	4603      	mov	r3, r0
 8005992:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8005994:	2300      	movs	r3, #0
 8005996:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8005998:	79fb      	ldrb	r3, [r7, #7]
 800599a:	091b      	lsrs	r3, r3, #4
 800599c:	b2db      	uxtb	r3, r3
 800599e:	461a      	mov	r2, r3
 80059a0:	4613      	mov	r3, r2
 80059a2:	009b      	lsls	r3, r3, #2
 80059a4:	4413      	add	r3, r2
 80059a6:	005b      	lsls	r3, r3, #1
 80059a8:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80059aa:	79fb      	ldrb	r3, [r7, #7]
 80059ac:	f003 030f 	and.w	r3, r3, #15
 80059b0:	b2da      	uxtb	r2, r3
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	b2db      	uxtb	r3, r3
 80059b6:	4413      	add	r3, r2
 80059b8:	b2db      	uxtb	r3, r3
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3714      	adds	r7, #20
 80059be:	46bd      	mov	sp, r7
 80059c0:	bc80      	pop	{r7}
 80059c2:	4770      	bx	lr

080059c4 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b086      	sub	sp, #24
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 80059ce:	2300      	movs	r3, #0
 80059d0:	617b      	str	r3, [r7, #20]
 80059d2:	2300      	movs	r3, #0
 80059d4:	613b      	str	r3, [r7, #16]
 80059d6:	2300      	movs	r3, #0
 80059d8:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 80059da:	2300      	movs	r3, #0
 80059dc:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	7bdb      	ldrb	r3, [r3, #15]
 80059e2:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	7b5b      	ldrb	r3, [r3, #13]
 80059e8:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	7b9b      	ldrb	r3, [r3, #14]
 80059ee:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 80059f0:	2300      	movs	r3, #0
 80059f2:	60bb      	str	r3, [r7, #8]
 80059f4:	e06f      	b.n	8005ad6 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d011      	beq.n	8005a20 <RTC_DateUpdate+0x5c>
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	2b03      	cmp	r3, #3
 8005a00:	d00e      	beq.n	8005a20 <RTC_DateUpdate+0x5c>
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	2b05      	cmp	r3, #5
 8005a06:	d00b      	beq.n	8005a20 <RTC_DateUpdate+0x5c>
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	2b07      	cmp	r3, #7
 8005a0c:	d008      	beq.n	8005a20 <RTC_DateUpdate+0x5c>
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	2b08      	cmp	r3, #8
 8005a12:	d005      	beq.n	8005a20 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	2b0a      	cmp	r3, #10
 8005a18:	d002      	beq.n	8005a20 <RTC_DateUpdate+0x5c>
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	2b0c      	cmp	r3, #12
 8005a1e:	d117      	bne.n	8005a50 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2b1e      	cmp	r3, #30
 8005a24:	d803      	bhi.n	8005a2e <RTC_DateUpdate+0x6a>
      {
        day++;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	3301      	adds	r3, #1
 8005a2a:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8005a2c:	e050      	b.n	8005ad0 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	2b0c      	cmp	r3, #12
 8005a32:	d005      	beq.n	8005a40 <RTC_DateUpdate+0x7c>
        {
          month++;
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	3301      	adds	r3, #1
 8005a38:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8005a3e:	e047      	b.n	8005ad0 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8005a40:	2301      	movs	r3, #1
 8005a42:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005a44:	2301      	movs	r3, #1
 8005a46:	60fb      	str	r3, [r7, #12]
          year++;
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	3301      	adds	r3, #1
 8005a4c:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8005a4e:	e03f      	b.n	8005ad0 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	2b04      	cmp	r3, #4
 8005a54:	d008      	beq.n	8005a68 <RTC_DateUpdate+0xa4>
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	2b06      	cmp	r3, #6
 8005a5a:	d005      	beq.n	8005a68 <RTC_DateUpdate+0xa4>
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	2b09      	cmp	r3, #9
 8005a60:	d002      	beq.n	8005a68 <RTC_DateUpdate+0xa4>
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	2b0b      	cmp	r3, #11
 8005a66:	d10c      	bne.n	8005a82 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2b1d      	cmp	r3, #29
 8005a6c:	d803      	bhi.n	8005a76 <RTC_DateUpdate+0xb2>
      {
        day++;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	3301      	adds	r3, #1
 8005a72:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8005a74:	e02c      	b.n	8005ad0 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	3301      	adds	r3, #1
 8005a7a:	613b      	str	r3, [r7, #16]
        day = 1U;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8005a80:	e026      	b.n	8005ad0 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	2b02      	cmp	r3, #2
 8005a86:	d123      	bne.n	8005ad0 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2b1b      	cmp	r3, #27
 8005a8c:	d803      	bhi.n	8005a96 <RTC_DateUpdate+0xd2>
      {
        day++;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	3301      	adds	r3, #1
 8005a92:	60fb      	str	r3, [r7, #12]
 8005a94:	e01c      	b.n	8005ad0 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2b1c      	cmp	r3, #28
 8005a9a:	d111      	bne.n	8005ac0 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f000 f839 	bl	8005b18 <RTC_IsLeapYear>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d003      	beq.n	8005ab4 <RTC_DateUpdate+0xf0>
        {
          day++;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	3301      	adds	r3, #1
 8005ab0:	60fb      	str	r3, [r7, #12]
 8005ab2:	e00d      	b.n	8005ad0 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	3301      	adds	r3, #1
 8005ab8:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005aba:	2301      	movs	r3, #1
 8005abc:	60fb      	str	r3, [r7, #12]
 8005abe:	e007      	b.n	8005ad0 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2b1d      	cmp	r3, #29
 8005ac4:	d104      	bne.n	8005ad0 <RTC_DateUpdate+0x10c>
      {
        month++;
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	3301      	adds	r3, #1
 8005aca:	613b      	str	r3, [r7, #16]
        day = 1U;
 8005acc:	2301      	movs	r3, #1
 8005ace:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	3301      	adds	r3, #1
 8005ad4:	60bb      	str	r3, [r7, #8]
 8005ad6:	68ba      	ldr	r2, [r7, #8]
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d38b      	bcc.n	80059f6 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	b2da      	uxtb	r2, r3
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	b2da      	uxtb	r2, r3
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	b2da      	uxtb	r2, r3
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	68fa      	ldr	r2, [r7, #12]
 8005afc:	b2d2      	uxtb	r2, r2
 8005afe:	4619      	mov	r1, r3
 8005b00:	6978      	ldr	r0, [r7, #20]
 8005b02:	f000 f83b 	bl	8005b7c <RTC_WeekDayNum>
 8005b06:	4603      	mov	r3, r0
 8005b08:	461a      	mov	r2, r3
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	731a      	strb	r2, [r3, #12]
}
 8005b0e:	bf00      	nop
 8005b10:	3718      	adds	r7, #24
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}
	...

08005b18 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b083      	sub	sp, #12
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	4603      	mov	r3, r0
 8005b20:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8005b22:	88fb      	ldrh	r3, [r7, #6]
 8005b24:	f003 0303 	and.w	r3, r3, #3
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d001      	beq.n	8005b32 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	e01d      	b.n	8005b6e <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8005b32:	88fb      	ldrh	r3, [r7, #6]
 8005b34:	4a10      	ldr	r2, [pc, #64]	; (8005b78 <RTC_IsLeapYear+0x60>)
 8005b36:	fba2 1203 	umull	r1, r2, r2, r3
 8005b3a:	0952      	lsrs	r2, r2, #5
 8005b3c:	2164      	movs	r1, #100	; 0x64
 8005b3e:	fb01 f202 	mul.w	r2, r1, r2
 8005b42:	1a9b      	subs	r3, r3, r2
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d001      	beq.n	8005b4e <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e00f      	b.n	8005b6e <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8005b4e:	88fb      	ldrh	r3, [r7, #6]
 8005b50:	4a09      	ldr	r2, [pc, #36]	; (8005b78 <RTC_IsLeapYear+0x60>)
 8005b52:	fba2 1203 	umull	r1, r2, r2, r3
 8005b56:	09d2      	lsrs	r2, r2, #7
 8005b58:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005b5c:	fb01 f202 	mul.w	r2, r1, r2
 8005b60:	1a9b      	subs	r3, r3, r2
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d101      	bne.n	8005b6c <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	e000      	b.n	8005b6e <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8005b6c:	2300      	movs	r3, #0
  }
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	370c      	adds	r7, #12
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bc80      	pop	{r7}
 8005b76:	4770      	bx	lr
 8005b78:	51eb851f 	.word	0x51eb851f

08005b7c <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b085      	sub	sp, #20
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	460b      	mov	r3, r1
 8005b86:	70fb      	strb	r3, [r7, #3]
 8005b88:	4613      	mov	r3, r2
 8005b8a:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	60bb      	str	r3, [r7, #8]
 8005b90:	2300      	movs	r3, #0
 8005b92:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8005b9a:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8005b9c:	78fb      	ldrb	r3, [r7, #3]
 8005b9e:	2b02      	cmp	r3, #2
 8005ba0:	d82d      	bhi.n	8005bfe <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8005ba2:	78fa      	ldrb	r2, [r7, #3]
 8005ba4:	4613      	mov	r3, r2
 8005ba6:	005b      	lsls	r3, r3, #1
 8005ba8:	4413      	add	r3, r2
 8005baa:	00db      	lsls	r3, r3, #3
 8005bac:	1a9b      	subs	r3, r3, r2
 8005bae:	4a2c      	ldr	r2, [pc, #176]	; (8005c60 <RTC_WeekDayNum+0xe4>)
 8005bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8005bb4:	085a      	lsrs	r2, r3, #1
 8005bb6:	78bb      	ldrb	r3, [r7, #2]
 8005bb8:	441a      	add	r2, r3
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	441a      	add	r2, r3
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	3b01      	subs	r3, #1
 8005bc2:	089b      	lsrs	r3, r3, #2
 8005bc4:	441a      	add	r2, r3
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	3b01      	subs	r3, #1
 8005bca:	4926      	ldr	r1, [pc, #152]	; (8005c64 <RTC_WeekDayNum+0xe8>)
 8005bcc:	fba1 1303 	umull	r1, r3, r1, r3
 8005bd0:	095b      	lsrs	r3, r3, #5
 8005bd2:	1ad2      	subs	r2, r2, r3
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	3b01      	subs	r3, #1
 8005bd8:	4922      	ldr	r1, [pc, #136]	; (8005c64 <RTC_WeekDayNum+0xe8>)
 8005bda:	fba1 1303 	umull	r1, r3, r1, r3
 8005bde:	09db      	lsrs	r3, r3, #7
 8005be0:	4413      	add	r3, r2
 8005be2:	1d1a      	adds	r2, r3, #4
 8005be4:	4b20      	ldr	r3, [pc, #128]	; (8005c68 <RTC_WeekDayNum+0xec>)
 8005be6:	fba3 1302 	umull	r1, r3, r3, r2
 8005bea:	1ad1      	subs	r1, r2, r3
 8005bec:	0849      	lsrs	r1, r1, #1
 8005bee:	440b      	add	r3, r1
 8005bf0:	0899      	lsrs	r1, r3, #2
 8005bf2:	460b      	mov	r3, r1
 8005bf4:	00db      	lsls	r3, r3, #3
 8005bf6:	1a5b      	subs	r3, r3, r1
 8005bf8:	1ad3      	subs	r3, r2, r3
 8005bfa:	60fb      	str	r3, [r7, #12]
 8005bfc:	e029      	b.n	8005c52 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8005bfe:	78fa      	ldrb	r2, [r7, #3]
 8005c00:	4613      	mov	r3, r2
 8005c02:	005b      	lsls	r3, r3, #1
 8005c04:	4413      	add	r3, r2
 8005c06:	00db      	lsls	r3, r3, #3
 8005c08:	1a9b      	subs	r3, r3, r2
 8005c0a:	4a15      	ldr	r2, [pc, #84]	; (8005c60 <RTC_WeekDayNum+0xe4>)
 8005c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8005c10:	085a      	lsrs	r2, r3, #1
 8005c12:	78bb      	ldrb	r3, [r7, #2]
 8005c14:	441a      	add	r2, r3
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	441a      	add	r2, r3
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	089b      	lsrs	r3, r3, #2
 8005c1e:	441a      	add	r2, r3
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	4910      	ldr	r1, [pc, #64]	; (8005c64 <RTC_WeekDayNum+0xe8>)
 8005c24:	fba1 1303 	umull	r1, r3, r1, r3
 8005c28:	095b      	lsrs	r3, r3, #5
 8005c2a:	1ad2      	subs	r2, r2, r3
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	490d      	ldr	r1, [pc, #52]	; (8005c64 <RTC_WeekDayNum+0xe8>)
 8005c30:	fba1 1303 	umull	r1, r3, r1, r3
 8005c34:	09db      	lsrs	r3, r3, #7
 8005c36:	4413      	add	r3, r2
 8005c38:	1c9a      	adds	r2, r3, #2
 8005c3a:	4b0b      	ldr	r3, [pc, #44]	; (8005c68 <RTC_WeekDayNum+0xec>)
 8005c3c:	fba3 1302 	umull	r1, r3, r3, r2
 8005c40:	1ad1      	subs	r1, r2, r3
 8005c42:	0849      	lsrs	r1, r1, #1
 8005c44:	440b      	add	r3, r1
 8005c46:	0899      	lsrs	r1, r3, #2
 8005c48:	460b      	mov	r3, r1
 8005c4a:	00db      	lsls	r3, r3, #3
 8005c4c:	1a5b      	subs	r3, r3, r1
 8005c4e:	1ad3      	subs	r3, r2, r3
 8005c50:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	b2db      	uxtb	r3, r3
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3714      	adds	r7, #20
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bc80      	pop	{r7}
 8005c5e:	4770      	bx	lr
 8005c60:	38e38e39 	.word	0x38e38e39
 8005c64:	51eb851f 	.word	0x51eb851f
 8005c68:	24924925 	.word	0x24924925

08005c6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b082      	sub	sp, #8
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d101      	bne.n	8005c7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e0b2      	b.n	8005de4 <HAL_TIM_Base_Init+0x178>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a5a      	ldr	r2, [pc, #360]	; (8005dec <HAL_TIM_Base_Init+0x180>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d027      	beq.n	8005cd8 <HAL_TIM_Base_Init+0x6c>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a58      	ldr	r2, [pc, #352]	; (8005df0 <HAL_TIM_Base_Init+0x184>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d022      	beq.n	8005cd8 <HAL_TIM_Base_Init+0x6c>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c9a:	d01d      	beq.n	8005cd8 <HAL_TIM_Base_Init+0x6c>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a54      	ldr	r2, [pc, #336]	; (8005df4 <HAL_TIM_Base_Init+0x188>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d018      	beq.n	8005cd8 <HAL_TIM_Base_Init+0x6c>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a53      	ldr	r2, [pc, #332]	; (8005df8 <HAL_TIM_Base_Init+0x18c>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d013      	beq.n	8005cd8 <HAL_TIM_Base_Init+0x6c>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a51      	ldr	r2, [pc, #324]	; (8005dfc <HAL_TIM_Base_Init+0x190>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d00e      	beq.n	8005cd8 <HAL_TIM_Base_Init+0x6c>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a50      	ldr	r2, [pc, #320]	; (8005e00 <HAL_TIM_Base_Init+0x194>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d009      	beq.n	8005cd8 <HAL_TIM_Base_Init+0x6c>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a4e      	ldr	r2, [pc, #312]	; (8005e04 <HAL_TIM_Base_Init+0x198>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d004      	beq.n	8005cd8 <HAL_TIM_Base_Init+0x6c>
 8005cce:	f240 1113 	movw	r1, #275	; 0x113
 8005cd2:	484d      	ldr	r0, [pc, #308]	; (8005e08 <HAL_TIM_Base_Init+0x19c>)
 8005cd4:	f7fc fab8 	bl	8002248 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d014      	beq.n	8005d0a <HAL_TIM_Base_Init+0x9e>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	2b10      	cmp	r3, #16
 8005ce6:	d010      	beq.n	8005d0a <HAL_TIM_Base_Init+0x9e>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	2b20      	cmp	r3, #32
 8005cee:	d00c      	beq.n	8005d0a <HAL_TIM_Base_Init+0x9e>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	2b40      	cmp	r3, #64	; 0x40
 8005cf6:	d008      	beq.n	8005d0a <HAL_TIM_Base_Init+0x9e>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	2b60      	cmp	r3, #96	; 0x60
 8005cfe:	d004      	beq.n	8005d0a <HAL_TIM_Base_Init+0x9e>
 8005d00:	f44f 718a 	mov.w	r1, #276	; 0x114
 8005d04:	4840      	ldr	r0, [pc, #256]	; (8005e08 <HAL_TIM_Base_Init+0x19c>)
 8005d06:	f7fc fa9f 	bl	8002248 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	691b      	ldr	r3, [r3, #16]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d00e      	beq.n	8005d30 <HAL_TIM_Base_Init+0xc4>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	691b      	ldr	r3, [r3, #16]
 8005d16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d1a:	d009      	beq.n	8005d30 <HAL_TIM_Base_Init+0xc4>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	691b      	ldr	r3, [r3, #16]
 8005d20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d24:	d004      	beq.n	8005d30 <HAL_TIM_Base_Init+0xc4>
 8005d26:	f240 1115 	movw	r1, #277	; 0x115
 8005d2a:	4837      	ldr	r0, [pc, #220]	; (8005e08 <HAL_TIM_Base_Init+0x19c>)
 8005d2c:	f7fc fa8c 	bl	8002248 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	699b      	ldr	r3, [r3, #24]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d008      	beq.n	8005d4a <HAL_TIM_Base_Init+0xde>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	699b      	ldr	r3, [r3, #24]
 8005d3c:	2b80      	cmp	r3, #128	; 0x80
 8005d3e:	d004      	beq.n	8005d4a <HAL_TIM_Base_Init+0xde>
 8005d40:	f44f 718b 	mov.w	r1, #278	; 0x116
 8005d44:	4830      	ldr	r0, [pc, #192]	; (8005e08 <HAL_TIM_Base_Init+0x19c>)
 8005d46:	f7fc fa7f 	bl	8002248 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d111      	bne.n	8005d7a <HAL_TIM_Base_Init+0x10e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f001 ffc0 	bl	8007ce4 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d102      	bne.n	8005d72 <HAL_TIM_Base_Init+0x106>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	4a27      	ldr	r2, [pc, #156]	; (8005e0c <HAL_TIM_Base_Init+0x1a0>)
 8005d70:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2202      	movs	r2, #2
 8005d7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681a      	ldr	r2, [r3, #0]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	3304      	adds	r3, #4
 8005d8a:	4619      	mov	r1, r3
 8005d8c:	4610      	mov	r0, r2
 8005d8e:	f001 fbff 	bl	8007590 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2201      	movs	r2, #1
 8005d96:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2201      	movs	r2, #1
 8005da6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2201      	movs	r2, #1
 8005dae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2201      	movs	r2, #1
 8005db6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2201      	movs	r2, #1
 8005dce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2201      	movs	r2, #1
 8005dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005de2:	2300      	movs	r3, #0
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	3708      	adds	r7, #8
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}
 8005dec:	40012c00 	.word	0x40012c00
 8005df0:	40013400 	.word	0x40013400
 8005df4:	40000400 	.word	0x40000400
 8005df8:	40000800 	.word	0x40000800
 8005dfc:	40000c00 	.word	0x40000c00
 8005e00:	40001000 	.word	0x40001000
 8005e04:	40001400 	.word	0x40001400
 8005e08:	080104b4 	.word	0x080104b4
 8005e0c:	08002391 	.word	0x08002391

08005e10 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b084      	sub	sp, #16
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a39      	ldr	r2, [pc, #228]	; (8005f04 <HAL_TIM_Base_Start+0xf4>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d027      	beq.n	8005e72 <HAL_TIM_Base_Start+0x62>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a38      	ldr	r2, [pc, #224]	; (8005f08 <HAL_TIM_Base_Start+0xf8>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d022      	beq.n	8005e72 <HAL_TIM_Base_Start+0x62>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e34:	d01d      	beq.n	8005e72 <HAL_TIM_Base_Start+0x62>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a34      	ldr	r2, [pc, #208]	; (8005f0c <HAL_TIM_Base_Start+0xfc>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d018      	beq.n	8005e72 <HAL_TIM_Base_Start+0x62>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a32      	ldr	r2, [pc, #200]	; (8005f10 <HAL_TIM_Base_Start+0x100>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d013      	beq.n	8005e72 <HAL_TIM_Base_Start+0x62>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a31      	ldr	r2, [pc, #196]	; (8005f14 <HAL_TIM_Base_Start+0x104>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d00e      	beq.n	8005e72 <HAL_TIM_Base_Start+0x62>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a2f      	ldr	r2, [pc, #188]	; (8005f18 <HAL_TIM_Base_Start+0x108>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d009      	beq.n	8005e72 <HAL_TIM_Base_Start+0x62>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a2e      	ldr	r2, [pc, #184]	; (8005f1c <HAL_TIM_Base_Start+0x10c>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d004      	beq.n	8005e72 <HAL_TIM_Base_Start+0x62>
 8005e68:	f44f 71ca 	mov.w	r1, #404	; 0x194
 8005e6c:	482c      	ldr	r0, [pc, #176]	; (8005f20 <HAL_TIM_Base_Start+0x110>)
 8005e6e:	f7fc f9eb 	bl	8002248 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e78:	b2db      	uxtb	r3, r3
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	d001      	beq.n	8005e82 <HAL_TIM_Base_Start+0x72>
  {
    return HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	e03c      	b.n	8005efc <HAL_TIM_Base_Start+0xec>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2202      	movs	r2, #2
 8005e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a1d      	ldr	r2, [pc, #116]	; (8005f04 <HAL_TIM_Base_Start+0xf4>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d018      	beq.n	8005ec6 <HAL_TIM_Base_Start+0xb6>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a1b      	ldr	r2, [pc, #108]	; (8005f08 <HAL_TIM_Base_Start+0xf8>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d013      	beq.n	8005ec6 <HAL_TIM_Base_Start+0xb6>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ea6:	d00e      	beq.n	8005ec6 <HAL_TIM_Base_Start+0xb6>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a17      	ldr	r2, [pc, #92]	; (8005f0c <HAL_TIM_Base_Start+0xfc>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d009      	beq.n	8005ec6 <HAL_TIM_Base_Start+0xb6>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a16      	ldr	r2, [pc, #88]	; (8005f10 <HAL_TIM_Base_Start+0x100>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d004      	beq.n	8005ec6 <HAL_TIM_Base_Start+0xb6>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a14      	ldr	r2, [pc, #80]	; (8005f14 <HAL_TIM_Base_Start+0x104>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d111      	bne.n	8005eea <HAL_TIM_Base_Start+0xda>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	f003 0307 	and.w	r3, r3, #7
 8005ed0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2b06      	cmp	r3, #6
 8005ed6:	d010      	beq.n	8005efa <HAL_TIM_Base_Start+0xea>
    {
      __HAL_TIM_ENABLE(htim);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	681a      	ldr	r2, [r3, #0]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f042 0201 	orr.w	r2, r2, #1
 8005ee6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ee8:	e007      	b.n	8005efa <HAL_TIM_Base_Start+0xea>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f042 0201 	orr.w	r2, r2, #1
 8005ef8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005efa:	2300      	movs	r3, #0
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3710      	adds	r7, #16
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}
 8005f04:	40012c00 	.word	0x40012c00
 8005f08:	40013400 	.word	0x40013400
 8005f0c:	40000400 	.word	0x40000400
 8005f10:	40000800 	.word	0x40000800
 8005f14:	40000c00 	.word	0x40000c00
 8005f18:	40001000 	.word	0x40001000
 8005f1c:	40001400 	.word	0x40001400
 8005f20:	080104b4 	.word	0x080104b4

08005f24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b084      	sub	sp, #16
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a3d      	ldr	r2, [pc, #244]	; (8006028 <HAL_TIM_Base_Start_IT+0x104>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d027      	beq.n	8005f86 <HAL_TIM_Base_Start_IT+0x62>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a3c      	ldr	r2, [pc, #240]	; (800602c <HAL_TIM_Base_Start_IT+0x108>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d022      	beq.n	8005f86 <HAL_TIM_Base_Start_IT+0x62>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f48:	d01d      	beq.n	8005f86 <HAL_TIM_Base_Start_IT+0x62>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a38      	ldr	r2, [pc, #224]	; (8006030 <HAL_TIM_Base_Start_IT+0x10c>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d018      	beq.n	8005f86 <HAL_TIM_Base_Start_IT+0x62>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a36      	ldr	r2, [pc, #216]	; (8006034 <HAL_TIM_Base_Start_IT+0x110>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d013      	beq.n	8005f86 <HAL_TIM_Base_Start_IT+0x62>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a35      	ldr	r2, [pc, #212]	; (8006038 <HAL_TIM_Base_Start_IT+0x114>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d00e      	beq.n	8005f86 <HAL_TIM_Base_Start_IT+0x62>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a33      	ldr	r2, [pc, #204]	; (800603c <HAL_TIM_Base_Start_IT+0x118>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d009      	beq.n	8005f86 <HAL_TIM_Base_Start_IT+0x62>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a32      	ldr	r2, [pc, #200]	; (8006040 <HAL_TIM_Base_Start_IT+0x11c>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d004      	beq.n	8005f86 <HAL_TIM_Base_Start_IT+0x62>
 8005f7c:	f240 11cf 	movw	r1, #463	; 0x1cf
 8005f80:	4830      	ldr	r0, [pc, #192]	; (8006044 <HAL_TIM_Base_Start_IT+0x120>)
 8005f82:	f7fc f961 	bl	8002248 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f8c:	b2db      	uxtb	r3, r3
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	d001      	beq.n	8005f96 <HAL_TIM_Base_Start_IT+0x72>
  {
    return HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	e044      	b.n	8006020 <HAL_TIM_Base_Start_IT+0xfc>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2202      	movs	r2, #2
 8005f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	68da      	ldr	r2, [r3, #12]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f042 0201 	orr.w	r2, r2, #1
 8005fac:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a1d      	ldr	r2, [pc, #116]	; (8006028 <HAL_TIM_Base_Start_IT+0x104>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d018      	beq.n	8005fea <HAL_TIM_Base_Start_IT+0xc6>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a1b      	ldr	r2, [pc, #108]	; (800602c <HAL_TIM_Base_Start_IT+0x108>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d013      	beq.n	8005fea <HAL_TIM_Base_Start_IT+0xc6>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fca:	d00e      	beq.n	8005fea <HAL_TIM_Base_Start_IT+0xc6>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a17      	ldr	r2, [pc, #92]	; (8006030 <HAL_TIM_Base_Start_IT+0x10c>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d009      	beq.n	8005fea <HAL_TIM_Base_Start_IT+0xc6>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a16      	ldr	r2, [pc, #88]	; (8006034 <HAL_TIM_Base_Start_IT+0x110>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d004      	beq.n	8005fea <HAL_TIM_Base_Start_IT+0xc6>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a14      	ldr	r2, [pc, #80]	; (8006038 <HAL_TIM_Base_Start_IT+0x114>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d111      	bne.n	800600e <HAL_TIM_Base_Start_IT+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	f003 0307 	and.w	r3, r3, #7
 8005ff4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2b06      	cmp	r3, #6
 8005ffa:	d010      	beq.n	800601e <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f042 0201 	orr.w	r2, r2, #1
 800600a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800600c:	e007      	b.n	800601e <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	681a      	ldr	r2, [r3, #0]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f042 0201 	orr.w	r2, r2, #1
 800601c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800601e:	2300      	movs	r3, #0
}
 8006020:	4618      	mov	r0, r3
 8006022:	3710      	adds	r7, #16
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}
 8006028:	40012c00 	.word	0x40012c00
 800602c:	40013400 	.word	0x40013400
 8006030:	40000400 	.word	0x40000400
 8006034:	40000800 	.word	0x40000800
 8006038:	40000c00 	.word	0x40000c00
 800603c:	40001000 	.word	0x40001000
 8006040:	40001400 	.word	0x40001400
 8006044:	080104b4 	.word	0x080104b4

08006048 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b082      	sub	sp, #8
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d101      	bne.n	800605a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	e0b2      	b.n	80061c0 <HAL_TIM_PWM_Init+0x178>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a5a      	ldr	r2, [pc, #360]	; (80061c8 <HAL_TIM_PWM_Init+0x180>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d027      	beq.n	80060b4 <HAL_TIM_PWM_Init+0x6c>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a58      	ldr	r2, [pc, #352]	; (80061cc <HAL_TIM_PWM_Init+0x184>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d022      	beq.n	80060b4 <HAL_TIM_PWM_Init+0x6c>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006076:	d01d      	beq.n	80060b4 <HAL_TIM_PWM_Init+0x6c>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a54      	ldr	r2, [pc, #336]	; (80061d0 <HAL_TIM_PWM_Init+0x188>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d018      	beq.n	80060b4 <HAL_TIM_PWM_Init+0x6c>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a53      	ldr	r2, [pc, #332]	; (80061d4 <HAL_TIM_PWM_Init+0x18c>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d013      	beq.n	80060b4 <HAL_TIM_PWM_Init+0x6c>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a51      	ldr	r2, [pc, #324]	; (80061d8 <HAL_TIM_PWM_Init+0x190>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d00e      	beq.n	80060b4 <HAL_TIM_PWM_Init+0x6c>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a50      	ldr	r2, [pc, #320]	; (80061dc <HAL_TIM_PWM_Init+0x194>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d009      	beq.n	80060b4 <HAL_TIM_PWM_Init+0x6c>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a4e      	ldr	r2, [pc, #312]	; (80061e0 <HAL_TIM_PWM_Init+0x198>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d004      	beq.n	80060b4 <HAL_TIM_PWM_Init+0x6c>
 80060aa:	f240 5113 	movw	r1, #1299	; 0x513
 80060ae:	484d      	ldr	r0, [pc, #308]	; (80061e4 <HAL_TIM_PWM_Init+0x19c>)
 80060b0:	f7fc f8ca 	bl	8002248 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d014      	beq.n	80060e6 <HAL_TIM_PWM_Init+0x9e>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	2b10      	cmp	r3, #16
 80060c2:	d010      	beq.n	80060e6 <HAL_TIM_PWM_Init+0x9e>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	2b20      	cmp	r3, #32
 80060ca:	d00c      	beq.n	80060e6 <HAL_TIM_PWM_Init+0x9e>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	2b40      	cmp	r3, #64	; 0x40
 80060d2:	d008      	beq.n	80060e6 <HAL_TIM_PWM_Init+0x9e>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	2b60      	cmp	r3, #96	; 0x60
 80060da:	d004      	beq.n	80060e6 <HAL_TIM_PWM_Init+0x9e>
 80060dc:	f240 5114 	movw	r1, #1300	; 0x514
 80060e0:	4840      	ldr	r0, [pc, #256]	; (80061e4 <HAL_TIM_PWM_Init+0x19c>)
 80060e2:	f7fc f8b1 	bl	8002248 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	691b      	ldr	r3, [r3, #16]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d00e      	beq.n	800610c <HAL_TIM_PWM_Init+0xc4>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	691b      	ldr	r3, [r3, #16]
 80060f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060f6:	d009      	beq.n	800610c <HAL_TIM_PWM_Init+0xc4>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	691b      	ldr	r3, [r3, #16]
 80060fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006100:	d004      	beq.n	800610c <HAL_TIM_PWM_Init+0xc4>
 8006102:	f240 5115 	movw	r1, #1301	; 0x515
 8006106:	4837      	ldr	r0, [pc, #220]	; (80061e4 <HAL_TIM_PWM_Init+0x19c>)
 8006108:	f7fc f89e 	bl	8002248 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	699b      	ldr	r3, [r3, #24]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d008      	beq.n	8006126 <HAL_TIM_PWM_Init+0xde>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	699b      	ldr	r3, [r3, #24]
 8006118:	2b80      	cmp	r3, #128	; 0x80
 800611a:	d004      	beq.n	8006126 <HAL_TIM_PWM_Init+0xde>
 800611c:	f240 5116 	movw	r1, #1302	; 0x516
 8006120:	4830      	ldr	r0, [pc, #192]	; (80061e4 <HAL_TIM_PWM_Init+0x19c>)
 8006122:	f7fc f891 	bl	8002248 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800612c:	b2db      	uxtb	r3, r3
 800612e:	2b00      	cmp	r3, #0
 8006130:	d111      	bne.n	8006156 <HAL_TIM_PWM_Init+0x10e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2200      	movs	r2, #0
 8006136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f001 fdd2 	bl	8007ce4 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006144:	2b00      	cmp	r3, #0
 8006146:	d102      	bne.n	800614e <HAL_TIM_PWM_Init+0x106>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	4a27      	ldr	r2, [pc, #156]	; (80061e8 <HAL_TIM_PWM_Init+0x1a0>)
 800614c:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2202      	movs	r2, #2
 800615a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681a      	ldr	r2, [r3, #0]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	3304      	adds	r3, #4
 8006166:	4619      	mov	r1, r3
 8006168:	4610      	mov	r0, r2
 800616a:	f001 fa11 	bl	8007590 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2201      	movs	r2, #1
 8006172:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2201      	movs	r2, #1
 800617a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2201      	movs	r2, #1
 8006182:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2201      	movs	r2, #1
 800618a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2201      	movs	r2, #1
 8006192:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2201      	movs	r2, #1
 800619a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2201      	movs	r2, #1
 80061a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2201      	movs	r2, #1
 80061aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2201      	movs	r2, #1
 80061b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2201      	movs	r2, #1
 80061ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061be:	2300      	movs	r3, #0
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	3708      	adds	r7, #8
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}
 80061c8:	40012c00 	.word	0x40012c00
 80061cc:	40013400 	.word	0x40013400
 80061d0:	40000400 	.word	0x40000400
 80061d4:	40000800 	.word	0x40000800
 80061d8:	40000c00 	.word	0x40000c00
 80061dc:	40001000 	.word	0x40001000
 80061e0:	40001400 	.word	0x40001400
 80061e4:	080104b4 	.word	0x080104b4
 80061e8:	080061ed 	.word	0x080061ed

080061ec <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b083      	sub	sp, #12
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80061f4:	bf00      	nop
 80061f6:	370c      	adds	r7, #12
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bc80      	pop	{r7}
 80061fc:	4770      	bx	lr
	...

08006200 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b084      	sub	sp, #16
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a8a      	ldr	r2, [pc, #552]	; (8006438 <HAL_TIM_PWM_Start+0x238>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d10b      	bne.n	800622c <HAL_TIM_PWM_Start+0x2c>
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d062      	beq.n	80062e0 <HAL_TIM_PWM_Start+0xe0>
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	2b04      	cmp	r3, #4
 800621e:	d05f      	beq.n	80062e0 <HAL_TIM_PWM_Start+0xe0>
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	2b08      	cmp	r3, #8
 8006224:	d05c      	beq.n	80062e0 <HAL_TIM_PWM_Start+0xe0>
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	2b0c      	cmp	r3, #12
 800622a:	d059      	beq.n	80062e0 <HAL_TIM_PWM_Start+0xe0>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a82      	ldr	r2, [pc, #520]	; (800643c <HAL_TIM_PWM_Start+0x23c>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d10b      	bne.n	800624e <HAL_TIM_PWM_Start+0x4e>
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d051      	beq.n	80062e0 <HAL_TIM_PWM_Start+0xe0>
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	2b04      	cmp	r3, #4
 8006240:	d04e      	beq.n	80062e0 <HAL_TIM_PWM_Start+0xe0>
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	2b08      	cmp	r3, #8
 8006246:	d04b      	beq.n	80062e0 <HAL_TIM_PWM_Start+0xe0>
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	2b0c      	cmp	r3, #12
 800624c:	d048      	beq.n	80062e0 <HAL_TIM_PWM_Start+0xe0>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006256:	d10b      	bne.n	8006270 <HAL_TIM_PWM_Start+0x70>
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d040      	beq.n	80062e0 <HAL_TIM_PWM_Start+0xe0>
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	2b04      	cmp	r3, #4
 8006262:	d03d      	beq.n	80062e0 <HAL_TIM_PWM_Start+0xe0>
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	2b08      	cmp	r3, #8
 8006268:	d03a      	beq.n	80062e0 <HAL_TIM_PWM_Start+0xe0>
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	2b0c      	cmp	r3, #12
 800626e:	d037      	beq.n	80062e0 <HAL_TIM_PWM_Start+0xe0>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a72      	ldr	r2, [pc, #456]	; (8006440 <HAL_TIM_PWM_Start+0x240>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d10b      	bne.n	8006292 <HAL_TIM_PWM_Start+0x92>
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d02f      	beq.n	80062e0 <HAL_TIM_PWM_Start+0xe0>
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	2b04      	cmp	r3, #4
 8006284:	d02c      	beq.n	80062e0 <HAL_TIM_PWM_Start+0xe0>
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	2b08      	cmp	r3, #8
 800628a:	d029      	beq.n	80062e0 <HAL_TIM_PWM_Start+0xe0>
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	2b0c      	cmp	r3, #12
 8006290:	d026      	beq.n	80062e0 <HAL_TIM_PWM_Start+0xe0>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a6b      	ldr	r2, [pc, #428]	; (8006444 <HAL_TIM_PWM_Start+0x244>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d10b      	bne.n	80062b4 <HAL_TIM_PWM_Start+0xb4>
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d01e      	beq.n	80062e0 <HAL_TIM_PWM_Start+0xe0>
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	2b04      	cmp	r3, #4
 80062a6:	d01b      	beq.n	80062e0 <HAL_TIM_PWM_Start+0xe0>
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	2b08      	cmp	r3, #8
 80062ac:	d018      	beq.n	80062e0 <HAL_TIM_PWM_Start+0xe0>
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	2b0c      	cmp	r3, #12
 80062b2:	d015      	beq.n	80062e0 <HAL_TIM_PWM_Start+0xe0>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a63      	ldr	r2, [pc, #396]	; (8006448 <HAL_TIM_PWM_Start+0x248>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d10b      	bne.n	80062d6 <HAL_TIM_PWM_Start+0xd6>
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d00d      	beq.n	80062e0 <HAL_TIM_PWM_Start+0xe0>
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	2b04      	cmp	r3, #4
 80062c8:	d00a      	beq.n	80062e0 <HAL_TIM_PWM_Start+0xe0>
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	2b08      	cmp	r3, #8
 80062ce:	d007      	beq.n	80062e0 <HAL_TIM_PWM_Start+0xe0>
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	2b0c      	cmp	r3, #12
 80062d4:	d004      	beq.n	80062e0 <HAL_TIM_PWM_Start+0xe0>
 80062d6:	f240 5199 	movw	r1, #1433	; 0x599
 80062da:	485c      	ldr	r0, [pc, #368]	; (800644c <HAL_TIM_PWM_Start+0x24c>)
 80062dc:	f7fb ffb4 	bl	8002248 <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d109      	bne.n	80062fa <HAL_TIM_PWM_Start+0xfa>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	bf14      	ite	ne
 80062f2:	2301      	movne	r3, #1
 80062f4:	2300      	moveq	r3, #0
 80062f6:	b2db      	uxtb	r3, r3
 80062f8:	e022      	b.n	8006340 <HAL_TIM_PWM_Start+0x140>
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	2b04      	cmp	r3, #4
 80062fe:	d109      	bne.n	8006314 <HAL_TIM_PWM_Start+0x114>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006306:	b2db      	uxtb	r3, r3
 8006308:	2b01      	cmp	r3, #1
 800630a:	bf14      	ite	ne
 800630c:	2301      	movne	r3, #1
 800630e:	2300      	moveq	r3, #0
 8006310:	b2db      	uxtb	r3, r3
 8006312:	e015      	b.n	8006340 <HAL_TIM_PWM_Start+0x140>
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	2b08      	cmp	r3, #8
 8006318:	d109      	bne.n	800632e <HAL_TIM_PWM_Start+0x12e>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006320:	b2db      	uxtb	r3, r3
 8006322:	2b01      	cmp	r3, #1
 8006324:	bf14      	ite	ne
 8006326:	2301      	movne	r3, #1
 8006328:	2300      	moveq	r3, #0
 800632a:	b2db      	uxtb	r3, r3
 800632c:	e008      	b.n	8006340 <HAL_TIM_PWM_Start+0x140>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006334:	b2db      	uxtb	r3, r3
 8006336:	2b01      	cmp	r3, #1
 8006338:	bf14      	ite	ne
 800633a:	2301      	movne	r3, #1
 800633c:	2300      	moveq	r3, #0
 800633e:	b2db      	uxtb	r3, r3
 8006340:	2b00      	cmp	r3, #0
 8006342:	d001      	beq.n	8006348 <HAL_TIM_PWM_Start+0x148>
  {
    return HAL_ERROR;
 8006344:	2301      	movs	r3, #1
 8006346:	e072      	b.n	800642e <HAL_TIM_PWM_Start+0x22e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d104      	bne.n	8006358 <HAL_TIM_PWM_Start+0x158>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2202      	movs	r2, #2
 8006352:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006356:	e013      	b.n	8006380 <HAL_TIM_PWM_Start+0x180>
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	2b04      	cmp	r3, #4
 800635c:	d104      	bne.n	8006368 <HAL_TIM_PWM_Start+0x168>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2202      	movs	r2, #2
 8006362:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006366:	e00b      	b.n	8006380 <HAL_TIM_PWM_Start+0x180>
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	2b08      	cmp	r3, #8
 800636c:	d104      	bne.n	8006378 <HAL_TIM_PWM_Start+0x178>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2202      	movs	r2, #2
 8006372:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006376:	e003      	b.n	8006380 <HAL_TIM_PWM_Start+0x180>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2202      	movs	r2, #2
 800637c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	2201      	movs	r2, #1
 8006386:	6839      	ldr	r1, [r7, #0]
 8006388:	4618      	mov	r0, r3
 800638a:	f001 fc4b 	bl	8007c24 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a29      	ldr	r2, [pc, #164]	; (8006438 <HAL_TIM_PWM_Start+0x238>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d004      	beq.n	80063a2 <HAL_TIM_PWM_Start+0x1a2>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a27      	ldr	r2, [pc, #156]	; (800643c <HAL_TIM_PWM_Start+0x23c>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d101      	bne.n	80063a6 <HAL_TIM_PWM_Start+0x1a6>
 80063a2:	2301      	movs	r3, #1
 80063a4:	e000      	b.n	80063a8 <HAL_TIM_PWM_Start+0x1a8>
 80063a6:	2300      	movs	r3, #0
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d007      	beq.n	80063bc <HAL_TIM_PWM_Start+0x1bc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80063ba:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a1d      	ldr	r2, [pc, #116]	; (8006438 <HAL_TIM_PWM_Start+0x238>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d018      	beq.n	80063f8 <HAL_TIM_PWM_Start+0x1f8>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a1c      	ldr	r2, [pc, #112]	; (800643c <HAL_TIM_PWM_Start+0x23c>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d013      	beq.n	80063f8 <HAL_TIM_PWM_Start+0x1f8>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063d8:	d00e      	beq.n	80063f8 <HAL_TIM_PWM_Start+0x1f8>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a18      	ldr	r2, [pc, #96]	; (8006440 <HAL_TIM_PWM_Start+0x240>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d009      	beq.n	80063f8 <HAL_TIM_PWM_Start+0x1f8>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a16      	ldr	r2, [pc, #88]	; (8006444 <HAL_TIM_PWM_Start+0x244>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d004      	beq.n	80063f8 <HAL_TIM_PWM_Start+0x1f8>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a15      	ldr	r2, [pc, #84]	; (8006448 <HAL_TIM_PWM_Start+0x248>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d111      	bne.n	800641c <HAL_TIM_PWM_Start+0x21c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	f003 0307 	and.w	r3, r3, #7
 8006402:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2b06      	cmp	r3, #6
 8006408:	d010      	beq.n	800642c <HAL_TIM_PWM_Start+0x22c>
    {
      __HAL_TIM_ENABLE(htim);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	681a      	ldr	r2, [r3, #0]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f042 0201 	orr.w	r2, r2, #1
 8006418:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800641a:	e007      	b.n	800642c <HAL_TIM_PWM_Start+0x22c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	681a      	ldr	r2, [r3, #0]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f042 0201 	orr.w	r2, r2, #1
 800642a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800642c:	2300      	movs	r3, #0
}
 800642e:	4618      	mov	r0, r3
 8006430:	3710      	adds	r7, #16
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}
 8006436:	bf00      	nop
 8006438:	40012c00 	.word	0x40012c00
 800643c:	40013400 	.word	0x40013400
 8006440:	40000400 	.word	0x40000400
 8006444:	40000800 	.word	0x40000800
 8006448:	40000c00 	.word	0x40000c00
 800644c:	080104b4 	.word	0x080104b4

08006450 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b086      	sub	sp, #24
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d101      	bne.n	8006464 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006460:	2301      	movs	r3, #1
 8006462:	e192      	b.n	800678a <HAL_TIM_Encoder_Init+0x33a>
  }

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a7d      	ldr	r2, [pc, #500]	; (8006660 <HAL_TIM_Encoder_Init+0x210>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d01d      	beq.n	80064aa <HAL_TIM_Encoder_Init+0x5a>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a7c      	ldr	r2, [pc, #496]	; (8006664 <HAL_TIM_Encoder_Init+0x214>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d018      	beq.n	80064aa <HAL_TIM_Encoder_Init+0x5a>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006480:	d013      	beq.n	80064aa <HAL_TIM_Encoder_Init+0x5a>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a78      	ldr	r2, [pc, #480]	; (8006668 <HAL_TIM_Encoder_Init+0x218>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d00e      	beq.n	80064aa <HAL_TIM_Encoder_Init+0x5a>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a76      	ldr	r2, [pc, #472]	; (800666c <HAL_TIM_Encoder_Init+0x21c>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d009      	beq.n	80064aa <HAL_TIM_Encoder_Init+0x5a>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a75      	ldr	r2, [pc, #468]	; (8006670 <HAL_TIM_Encoder_Init+0x220>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d004      	beq.n	80064aa <HAL_TIM_Encoder_Init+0x5a>
 80064a0:	f640 318e 	movw	r1, #2958	; 0xb8e
 80064a4:	4873      	ldr	r0, [pc, #460]	; (8006674 <HAL_TIM_Encoder_Init+0x224>)
 80064a6:	f7fb fecf 	bl	8002248 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d014      	beq.n	80064dc <HAL_TIM_Encoder_Init+0x8c>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	689b      	ldr	r3, [r3, #8]
 80064b6:	2b10      	cmp	r3, #16
 80064b8:	d010      	beq.n	80064dc <HAL_TIM_Encoder_Init+0x8c>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	2b20      	cmp	r3, #32
 80064c0:	d00c      	beq.n	80064dc <HAL_TIM_Encoder_Init+0x8c>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	2b40      	cmp	r3, #64	; 0x40
 80064c8:	d008      	beq.n	80064dc <HAL_TIM_Encoder_Init+0x8c>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	2b60      	cmp	r3, #96	; 0x60
 80064d0:	d004      	beq.n	80064dc <HAL_TIM_Encoder_Init+0x8c>
 80064d2:	f640 318f 	movw	r1, #2959	; 0xb8f
 80064d6:	4867      	ldr	r0, [pc, #412]	; (8006674 <HAL_TIM_Encoder_Init+0x224>)
 80064d8:	f7fb feb6 	bl	8002248 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	691b      	ldr	r3, [r3, #16]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d00e      	beq.n	8006502 <HAL_TIM_Encoder_Init+0xb2>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	691b      	ldr	r3, [r3, #16]
 80064e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064ec:	d009      	beq.n	8006502 <HAL_TIM_Encoder_Init+0xb2>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	691b      	ldr	r3, [r3, #16]
 80064f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064f6:	d004      	beq.n	8006502 <HAL_TIM_Encoder_Init+0xb2>
 80064f8:	f44f 6139 	mov.w	r1, #2960	; 0xb90
 80064fc:	485d      	ldr	r0, [pc, #372]	; (8006674 <HAL_TIM_Encoder_Init+0x224>)
 80064fe:	f7fb fea3 	bl	8002248 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	699b      	ldr	r3, [r3, #24]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d008      	beq.n	800651c <HAL_TIM_Encoder_Init+0xcc>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	699b      	ldr	r3, [r3, #24]
 800650e:	2b80      	cmp	r3, #128	; 0x80
 8006510:	d004      	beq.n	800651c <HAL_TIM_Encoder_Init+0xcc>
 8006512:	f640 3191 	movw	r1, #2961	; 0xb91
 8006516:	4857      	ldr	r0, [pc, #348]	; (8006674 <HAL_TIM_Encoder_Init+0x224>)
 8006518:	f7fb fe96 	bl	8002248 <assert_failed>
  assert_param(IS_TIM_ENCODER_MODE(sConfig->EncoderMode));
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	2b01      	cmp	r3, #1
 8006522:	d00c      	beq.n	800653e <HAL_TIM_Encoder_Init+0xee>
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	2b02      	cmp	r3, #2
 800652a:	d008      	beq.n	800653e <HAL_TIM_Encoder_Init+0xee>
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	2b03      	cmp	r3, #3
 8006532:	d004      	beq.n	800653e <HAL_TIM_Encoder_Init+0xee>
 8006534:	f640 3192 	movw	r1, #2962	; 0xb92
 8006538:	484e      	ldr	r0, [pc, #312]	; (8006674 <HAL_TIM_Encoder_Init+0x224>)
 800653a:	f7fb fe85 	bl	8002248 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC1Selection));
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	2b01      	cmp	r3, #1
 8006544:	d00c      	beq.n	8006560 <HAL_TIM_Encoder_Init+0x110>
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	2b02      	cmp	r3, #2
 800654c:	d008      	beq.n	8006560 <HAL_TIM_Encoder_Init+0x110>
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	689b      	ldr	r3, [r3, #8]
 8006552:	2b03      	cmp	r3, #3
 8006554:	d004      	beq.n	8006560 <HAL_TIM_Encoder_Init+0x110>
 8006556:	f640 3193 	movw	r1, #2963	; 0xb93
 800655a:	4846      	ldr	r0, [pc, #280]	; (8006674 <HAL_TIM_Encoder_Init+0x224>)
 800655c:	f7fb fe74 	bl	8002248 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC2Selection));
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	699b      	ldr	r3, [r3, #24]
 8006564:	2b01      	cmp	r3, #1
 8006566:	d00c      	beq.n	8006582 <HAL_TIM_Encoder_Init+0x132>
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	699b      	ldr	r3, [r3, #24]
 800656c:	2b02      	cmp	r3, #2
 800656e:	d008      	beq.n	8006582 <HAL_TIM_Encoder_Init+0x132>
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	699b      	ldr	r3, [r3, #24]
 8006574:	2b03      	cmp	r3, #3
 8006576:	d004      	beq.n	8006582 <HAL_TIM_Encoder_Init+0x132>
 8006578:	f640 3194 	movw	r1, #2964	; 0xb94
 800657c:	483d      	ldr	r0, [pc, #244]	; (8006674 <HAL_TIM_Encoder_Init+0x224>)
 800657e:	f7fb fe63 	bl	8002248 <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC1Polarity));
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d008      	beq.n	800659c <HAL_TIM_Encoder_Init+0x14c>
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	2b02      	cmp	r3, #2
 8006590:	d004      	beq.n	800659c <HAL_TIM_Encoder_Init+0x14c>
 8006592:	f640 3195 	movw	r1, #2965	; 0xb95
 8006596:	4837      	ldr	r0, [pc, #220]	; (8006674 <HAL_TIM_Encoder_Init+0x224>)
 8006598:	f7fb fe56 	bl	8002248 <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC2Polarity));
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	695b      	ldr	r3, [r3, #20]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d008      	beq.n	80065b6 <HAL_TIM_Encoder_Init+0x166>
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	695b      	ldr	r3, [r3, #20]
 80065a8:	2b02      	cmp	r3, #2
 80065aa:	d004      	beq.n	80065b6 <HAL_TIM_Encoder_Init+0x166>
 80065ac:	f640 3196 	movw	r1, #2966	; 0xb96
 80065b0:	4830      	ldr	r0, [pc, #192]	; (8006674 <HAL_TIM_Encoder_Init+0x224>)
 80065b2:	f7fb fe49 	bl	8002248 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	68db      	ldr	r3, [r3, #12]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d010      	beq.n	80065e0 <HAL_TIM_Encoder_Init+0x190>
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	68db      	ldr	r3, [r3, #12]
 80065c2:	2b04      	cmp	r3, #4
 80065c4:	d00c      	beq.n	80065e0 <HAL_TIM_Encoder_Init+0x190>
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	68db      	ldr	r3, [r3, #12]
 80065ca:	2b08      	cmp	r3, #8
 80065cc:	d008      	beq.n	80065e0 <HAL_TIM_Encoder_Init+0x190>
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	68db      	ldr	r3, [r3, #12]
 80065d2:	2b0c      	cmp	r3, #12
 80065d4:	d004      	beq.n	80065e0 <HAL_TIM_Encoder_Init+0x190>
 80065d6:	f640 3197 	movw	r1, #2967	; 0xb97
 80065da:	4826      	ldr	r0, [pc, #152]	; (8006674 <HAL_TIM_Encoder_Init+0x224>)
 80065dc:	f7fb fe34 	bl	8002248 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	69db      	ldr	r3, [r3, #28]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d010      	beq.n	800660a <HAL_TIM_Encoder_Init+0x1ba>
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	69db      	ldr	r3, [r3, #28]
 80065ec:	2b04      	cmp	r3, #4
 80065ee:	d00c      	beq.n	800660a <HAL_TIM_Encoder_Init+0x1ba>
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	69db      	ldr	r3, [r3, #28]
 80065f4:	2b08      	cmp	r3, #8
 80065f6:	d008      	beq.n	800660a <HAL_TIM_Encoder_Init+0x1ba>
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	69db      	ldr	r3, [r3, #28]
 80065fc:	2b0c      	cmp	r3, #12
 80065fe:	d004      	beq.n	800660a <HAL_TIM_Encoder_Init+0x1ba>
 8006600:	f640 3198 	movw	r1, #2968	; 0xb98
 8006604:	481b      	ldr	r0, [pc, #108]	; (8006674 <HAL_TIM_Encoder_Init+0x224>)
 8006606:	f7fb fe1f 	bl	8002248 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	691b      	ldr	r3, [r3, #16]
 800660e:	2b0f      	cmp	r3, #15
 8006610:	d904      	bls.n	800661c <HAL_TIM_Encoder_Init+0x1cc>
 8006612:	f640 3199 	movw	r1, #2969	; 0xb99
 8006616:	4817      	ldr	r0, [pc, #92]	; (8006674 <HAL_TIM_Encoder_Init+0x224>)
 8006618:	f7fb fe16 	bl	8002248 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	6a1b      	ldr	r3, [r3, #32]
 8006620:	2b0f      	cmp	r3, #15
 8006622:	d904      	bls.n	800662e <HAL_TIM_Encoder_Init+0x1de>
 8006624:	f640 319a 	movw	r1, #2970	; 0xb9a
 8006628:	4812      	ldr	r0, [pc, #72]	; (8006674 <HAL_TIM_Encoder_Init+0x224>)
 800662a:	f7fb fe0d 	bl	8002248 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006634:	b2db      	uxtb	r3, r3
 8006636:	2b00      	cmp	r3, #0
 8006638:	d120      	bne.n	800667c <HAL_TIM_Encoder_Init+0x22c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2200      	movs	r2, #0
 800663e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f001 fb4e 	bl	8007ce4 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800664c:	2b00      	cmp	r3, #0
 800664e:	d102      	bne.n	8006656 <HAL_TIM_Encoder_Init+0x206>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	4a09      	ldr	r2, [pc, #36]	; (8006678 <HAL_TIM_Encoder_Init+0x228>)
 8006654:	671a      	str	r2, [r3, #112]	; 0x70
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	4798      	blx	r3
 800665e:	e00d      	b.n	800667c <HAL_TIM_Encoder_Init+0x22c>
 8006660:	40012c00 	.word	0x40012c00
 8006664:	40013400 	.word	0x40013400
 8006668:	40000400 	.word	0x40000400
 800666c:	40000800 	.word	0x40000800
 8006670:	40000c00 	.word	0x40000c00
 8006674:	080104b4 	.word	0x080104b4
 8006678:	08002455 	.word	0x08002455
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2202      	movs	r2, #2
 8006680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	687a      	ldr	r2, [r7, #4]
 800668c:	6812      	ldr	r2, [r2, #0]
 800668e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006692:	f023 0307 	bic.w	r3, r3, #7
 8006696:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681a      	ldr	r2, [r3, #0]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	3304      	adds	r3, #4
 80066a0:	4619      	mov	r1, r3
 80066a2:	4610      	mov	r0, r2
 80066a4:	f000 ff74 	bl	8007590 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	689b      	ldr	r3, [r3, #8]
 80066ae:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	699b      	ldr	r3, [r3, #24]
 80066b6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	6a1b      	ldr	r3, [r3, #32]
 80066be:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	697a      	ldr	r2, [r7, #20]
 80066c6:	4313      	orrs	r3, r2
 80066c8:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066d0:	f023 0303 	bic.w	r3, r3, #3
 80066d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	689a      	ldr	r2, [r3, #8]
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	699b      	ldr	r3, [r3, #24]
 80066de:	021b      	lsls	r3, r3, #8
 80066e0:	4313      	orrs	r3, r2
 80066e2:	693a      	ldr	r2, [r7, #16]
 80066e4:	4313      	orrs	r3, r2
 80066e6:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80066ee:	f023 030c 	bic.w	r3, r3, #12
 80066f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80066fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80066fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	68da      	ldr	r2, [r3, #12]
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	69db      	ldr	r3, [r3, #28]
 8006708:	021b      	lsls	r3, r3, #8
 800670a:	4313      	orrs	r3, r2
 800670c:	693a      	ldr	r2, [r7, #16]
 800670e:	4313      	orrs	r3, r2
 8006710:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	691b      	ldr	r3, [r3, #16]
 8006716:	011a      	lsls	r2, r3, #4
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	6a1b      	ldr	r3, [r3, #32]
 800671c:	031b      	lsls	r3, r3, #12
 800671e:	4313      	orrs	r3, r2
 8006720:	693a      	ldr	r2, [r7, #16]
 8006722:	4313      	orrs	r3, r2
 8006724:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800672c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	685a      	ldr	r2, [r3, #4]
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	695b      	ldr	r3, [r3, #20]
 8006736:	011b      	lsls	r3, r3, #4
 8006738:	4313      	orrs	r3, r2
 800673a:	68fa      	ldr	r2, [r7, #12]
 800673c:	4313      	orrs	r3, r2
 800673e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	697a      	ldr	r2, [r7, #20]
 8006746:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	693a      	ldr	r2, [r7, #16]
 800674e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	68fa      	ldr	r2, [r7, #12]
 8006756:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2201      	movs	r2, #1
 800675c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2201      	movs	r2, #1
 8006764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2201      	movs	r2, #1
 800676c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2201      	movs	r2, #1
 8006774:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2201      	movs	r2, #1
 800677c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2201      	movs	r2, #1
 8006784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006788:	2300      	movs	r3, #0
}
 800678a:	4618      	mov	r0, r3
 800678c:	3718      	adds	r7, #24
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}
 8006792:	bf00      	nop

08006794 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b084      	sub	sp, #16
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
 800679c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067a4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80067ac:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80067b4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80067bc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a5d      	ldr	r2, [pc, #372]	; (8006938 <HAL_TIM_Encoder_Start_IT+0x1a4>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d01d      	beq.n	8006804 <HAL_TIM_Encoder_Start_IT+0x70>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a5b      	ldr	r2, [pc, #364]	; (800693c <HAL_TIM_Encoder_Start_IT+0x1a8>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d018      	beq.n	8006804 <HAL_TIM_Encoder_Start_IT+0x70>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067da:	d013      	beq.n	8006804 <HAL_TIM_Encoder_Start_IT+0x70>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a57      	ldr	r2, [pc, #348]	; (8006940 <HAL_TIM_Encoder_Start_IT+0x1ac>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d00e      	beq.n	8006804 <HAL_TIM_Encoder_Start_IT+0x70>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a56      	ldr	r2, [pc, #344]	; (8006944 <HAL_TIM_Encoder_Start_IT+0x1b0>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d009      	beq.n	8006804 <HAL_TIM_Encoder_Start_IT+0x70>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a54      	ldr	r2, [pc, #336]	; (8006948 <HAL_TIM_Encoder_Start_IT+0x1b4>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d004      	beq.n	8006804 <HAL_TIM_Encoder_Start_IT+0x70>
 80067fa:	f640 41e4 	movw	r1, #3300	; 0xce4
 80067fe:	4853      	ldr	r0, [pc, #332]	; (800694c <HAL_TIM_Encoder_Start_IT+0x1b8>)
 8006800:	f7fb fd22 	bl	8002248 <assert_failed>

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d110      	bne.n	800682c <HAL_TIM_Encoder_Start_IT+0x98>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800680a:	7bfb      	ldrb	r3, [r7, #15]
 800680c:	2b01      	cmp	r3, #1
 800680e:	d102      	bne.n	8006816 <HAL_TIM_Encoder_Start_IT+0x82>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006810:	7b7b      	ldrb	r3, [r7, #13]
 8006812:	2b01      	cmp	r3, #1
 8006814:	d001      	beq.n	800681a <HAL_TIM_Encoder_Start_IT+0x86>
    {
      return HAL_ERROR;
 8006816:	2301      	movs	r3, #1
 8006818:	e089      	b.n	800692e <HAL_TIM_Encoder_Start_IT+0x19a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2202      	movs	r2, #2
 800681e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2202      	movs	r2, #2
 8006826:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800682a:	e031      	b.n	8006890 <HAL_TIM_Encoder_Start_IT+0xfc>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	2b04      	cmp	r3, #4
 8006830:	d110      	bne.n	8006854 <HAL_TIM_Encoder_Start_IT+0xc0>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006832:	7bbb      	ldrb	r3, [r7, #14]
 8006834:	2b01      	cmp	r3, #1
 8006836:	d102      	bne.n	800683e <HAL_TIM_Encoder_Start_IT+0xaa>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006838:	7b3b      	ldrb	r3, [r7, #12]
 800683a:	2b01      	cmp	r3, #1
 800683c:	d001      	beq.n	8006842 <HAL_TIM_Encoder_Start_IT+0xae>
    {
      return HAL_ERROR;
 800683e:	2301      	movs	r3, #1
 8006840:	e075      	b.n	800692e <HAL_TIM_Encoder_Start_IT+0x19a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2202      	movs	r2, #2
 8006846:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2202      	movs	r2, #2
 800684e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006852:	e01d      	b.n	8006890 <HAL_TIM_Encoder_Start_IT+0xfc>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006854:	7bfb      	ldrb	r3, [r7, #15]
 8006856:	2b01      	cmp	r3, #1
 8006858:	d108      	bne.n	800686c <HAL_TIM_Encoder_Start_IT+0xd8>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800685a:	7bbb      	ldrb	r3, [r7, #14]
 800685c:	2b01      	cmp	r3, #1
 800685e:	d105      	bne.n	800686c <HAL_TIM_Encoder_Start_IT+0xd8>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006860:	7b7b      	ldrb	r3, [r7, #13]
 8006862:	2b01      	cmp	r3, #1
 8006864:	d102      	bne.n	800686c <HAL_TIM_Encoder_Start_IT+0xd8>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006866:	7b3b      	ldrb	r3, [r7, #12]
 8006868:	2b01      	cmp	r3, #1
 800686a:	d001      	beq.n	8006870 <HAL_TIM_Encoder_Start_IT+0xdc>
    {
      return HAL_ERROR;
 800686c:	2301      	movs	r3, #1
 800686e:	e05e      	b.n	800692e <HAL_TIM_Encoder_Start_IT+0x19a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2202      	movs	r2, #2
 8006874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2202      	movs	r2, #2
 800687c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2202      	movs	r2, #2
 8006884:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2202      	movs	r2, #2
 800688c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d003      	beq.n	800689e <HAL_TIM_Encoder_Start_IT+0x10a>
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	2b04      	cmp	r3, #4
 800689a:	d010      	beq.n	80068be <HAL_TIM_Encoder_Start_IT+0x12a>
 800689c:	e01f      	b.n	80068de <HAL_TIM_Encoder_Start_IT+0x14a>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	2201      	movs	r2, #1
 80068a4:	2100      	movs	r1, #0
 80068a6:	4618      	mov	r0, r3
 80068a8:	f001 f9bc 	bl	8007c24 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	68da      	ldr	r2, [r3, #12]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f042 0202 	orr.w	r2, r2, #2
 80068ba:	60da      	str	r2, [r3, #12]
      break;
 80068bc:	e02e      	b.n	800691c <HAL_TIM_Encoder_Start_IT+0x188>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	2201      	movs	r2, #1
 80068c4:	2104      	movs	r1, #4
 80068c6:	4618      	mov	r0, r3
 80068c8:	f001 f9ac 	bl	8007c24 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	68da      	ldr	r2, [r3, #12]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f042 0204 	orr.w	r2, r2, #4
 80068da:	60da      	str	r2, [r3, #12]
      break;
 80068dc:	e01e      	b.n	800691c <HAL_TIM_Encoder_Start_IT+0x188>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	2201      	movs	r2, #1
 80068e4:	2100      	movs	r1, #0
 80068e6:	4618      	mov	r0, r3
 80068e8:	f001 f99c 	bl	8007c24 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	2201      	movs	r2, #1
 80068f2:	2104      	movs	r1, #4
 80068f4:	4618      	mov	r0, r3
 80068f6:	f001 f995 	bl	8007c24 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	68da      	ldr	r2, [r3, #12]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f042 0202 	orr.w	r2, r2, #2
 8006908:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	68da      	ldr	r2, [r3, #12]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f042 0204 	orr.w	r2, r2, #4
 8006918:	60da      	str	r2, [r3, #12]
      break;
 800691a:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	681a      	ldr	r2, [r3, #0]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f042 0201 	orr.w	r2, r2, #1
 800692a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800692c:	2300      	movs	r3, #0
}
 800692e:	4618      	mov	r0, r3
 8006930:	3710      	adds	r7, #16
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}
 8006936:	bf00      	nop
 8006938:	40012c00 	.word	0x40012c00
 800693c:	40013400 	.word	0x40013400
 8006940:	40000400 	.word	0x40000400
 8006944:	40000800 	.word	0x40000800
 8006948:	40000c00 	.word	0x40000c00
 800694c:	080104b4 	.word	0x080104b4

08006950 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b082      	sub	sp, #8
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	691b      	ldr	r3, [r3, #16]
 800695e:	f003 0302 	and.w	r3, r3, #2
 8006962:	2b02      	cmp	r3, #2
 8006964:	d128      	bne.n	80069b8 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	68db      	ldr	r3, [r3, #12]
 800696c:	f003 0302 	and.w	r3, r3, #2
 8006970:	2b02      	cmp	r3, #2
 8006972:	d121      	bne.n	80069b8 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f06f 0202 	mvn.w	r2, #2
 800697c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2201      	movs	r2, #1
 8006982:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	699b      	ldr	r3, [r3, #24]
 800698a:	f003 0303 	and.w	r3, r3, #3
 800698e:	2b00      	cmp	r3, #0
 8006990:	d005      	beq.n	800699e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	4798      	blx	r3
 800699c:	e009      	b.n	80069b2 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2200      	movs	r2, #0
 80069b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	691b      	ldr	r3, [r3, #16]
 80069be:	f003 0304 	and.w	r3, r3, #4
 80069c2:	2b04      	cmp	r3, #4
 80069c4:	d128      	bne.n	8006a18 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	68db      	ldr	r3, [r3, #12]
 80069cc:	f003 0304 	and.w	r3, r3, #4
 80069d0:	2b04      	cmp	r3, #4
 80069d2:	d121      	bne.n	8006a18 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f06f 0204 	mvn.w	r2, #4
 80069dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2202      	movs	r2, #2
 80069e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	699b      	ldr	r3, [r3, #24]
 80069ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d005      	beq.n	80069fe <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	4798      	blx	r3
 80069fc:	e009      	b.n	8006a12 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2200      	movs	r2, #0
 8006a16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	691b      	ldr	r3, [r3, #16]
 8006a1e:	f003 0308 	and.w	r3, r3, #8
 8006a22:	2b08      	cmp	r3, #8
 8006a24:	d128      	bne.n	8006a78 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	68db      	ldr	r3, [r3, #12]
 8006a2c:	f003 0308 	and.w	r3, r3, #8
 8006a30:	2b08      	cmp	r3, #8
 8006a32:	d121      	bne.n	8006a78 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f06f 0208 	mvn.w	r2, #8
 8006a3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2204      	movs	r2, #4
 8006a42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	69db      	ldr	r3, [r3, #28]
 8006a4a:	f003 0303 	and.w	r3, r3, #3
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d005      	beq.n	8006a5e <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	4798      	blx	r3
 8006a5c:	e009      	b.n	8006a72 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2200      	movs	r2, #0
 8006a76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	691b      	ldr	r3, [r3, #16]
 8006a7e:	f003 0310 	and.w	r3, r3, #16
 8006a82:	2b10      	cmp	r3, #16
 8006a84:	d128      	bne.n	8006ad8 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	68db      	ldr	r3, [r3, #12]
 8006a8c:	f003 0310 	and.w	r3, r3, #16
 8006a90:	2b10      	cmp	r3, #16
 8006a92:	d121      	bne.n	8006ad8 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f06f 0210 	mvn.w	r2, #16
 8006a9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2208      	movs	r2, #8
 8006aa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	69db      	ldr	r3, [r3, #28]
 8006aaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d005      	beq.n	8006abe <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	4798      	blx	r3
 8006abc:	e009      	b.n	8006ad2 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	691b      	ldr	r3, [r3, #16]
 8006ade:	f003 0301 	and.w	r3, r3, #1
 8006ae2:	2b01      	cmp	r3, #1
 8006ae4:	d110      	bne.n	8006b08 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	68db      	ldr	r3, [r3, #12]
 8006aec:	f003 0301 	and.w	r3, r3, #1
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d109      	bne.n	8006b08 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f06f 0201 	mvn.w	r2, #1
 8006afc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	691b      	ldr	r3, [r3, #16]
 8006b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b12:	2b80      	cmp	r3, #128	; 0x80
 8006b14:	d110      	bne.n	8006b38 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	68db      	ldr	r3, [r3, #12]
 8006b1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b20:	2b80      	cmp	r3, #128	; 0x80
 8006b22:	d109      	bne.n	8006b38 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006b2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	691b      	ldr	r3, [r3, #16]
 8006b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b42:	2b40      	cmp	r3, #64	; 0x40
 8006b44:	d110      	bne.n	8006b68 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	68db      	ldr	r3, [r3, #12]
 8006b4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b50:	2b40      	cmp	r3, #64	; 0x40
 8006b52:	d109      	bne.n	8006b68 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006b5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	691b      	ldr	r3, [r3, #16]
 8006b6e:	f003 0320 	and.w	r3, r3, #32
 8006b72:	2b20      	cmp	r3, #32
 8006b74:	d110      	bne.n	8006b98 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	68db      	ldr	r3, [r3, #12]
 8006b7c:	f003 0320 	and.w	r3, r3, #32
 8006b80:	2b20      	cmp	r3, #32
 8006b82:	d109      	bne.n	8006b98 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f06f 0220 	mvn.w	r2, #32
 8006b8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006b98:	bf00      	nop
 8006b9a:	3708      	adds	r7, #8
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}

08006ba0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b084      	sub	sp, #16
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	60f8      	str	r0, [r7, #12]
 8006ba8:	60b9      	str	r1, [r7, #8]
 8006baa:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d010      	beq.n	8006bd4 <HAL_TIM_PWM_ConfigChannel+0x34>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2b04      	cmp	r3, #4
 8006bb6:	d00d      	beq.n	8006bd4 <HAL_TIM_PWM_ConfigChannel+0x34>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2b08      	cmp	r3, #8
 8006bbc:	d00a      	beq.n	8006bd4 <HAL_TIM_PWM_ConfigChannel+0x34>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2b0c      	cmp	r3, #12
 8006bc2:	d007      	beq.n	8006bd4 <HAL_TIM_PWM_ConfigChannel+0x34>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2b3c      	cmp	r3, #60	; 0x3c
 8006bc8:	d004      	beq.n	8006bd4 <HAL_TIM_PWM_ConfigChannel+0x34>
 8006bca:	f241 0127 	movw	r1, #4135	; 0x1027
 8006bce:	4890      	ldr	r0, [pc, #576]	; (8006e10 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8006bd0:	f7fb fb3a 	bl	8002248 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	2b60      	cmp	r3, #96	; 0x60
 8006bda:	d008      	beq.n	8006bee <HAL_TIM_PWM_ConfigChannel+0x4e>
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	2b70      	cmp	r3, #112	; 0x70
 8006be2:	d004      	beq.n	8006bee <HAL_TIM_PWM_ConfigChannel+0x4e>
 8006be4:	f241 0128 	movw	r1, #4136	; 0x1028
 8006be8:	4889      	ldr	r0, [pc, #548]	; (8006e10 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8006bea:	f7fb fb2d 	bl	8002248 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	689b      	ldr	r3, [r3, #8]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d008      	beq.n	8006c08 <HAL_TIM_PWM_ConfigChannel+0x68>
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	689b      	ldr	r3, [r3, #8]
 8006bfa:	2b02      	cmp	r3, #2
 8006bfc:	d004      	beq.n	8006c08 <HAL_TIM_PWM_ConfigChannel+0x68>
 8006bfe:	f241 0129 	movw	r1, #4137	; 0x1029
 8006c02:	4883      	ldr	r0, [pc, #524]	; (8006e10 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8006c04:	f7fb fb20 	bl	8002248 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	691b      	ldr	r3, [r3, #16]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d008      	beq.n	8006c22 <HAL_TIM_PWM_ConfigChannel+0x82>
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	691b      	ldr	r3, [r3, #16]
 8006c14:	2b04      	cmp	r3, #4
 8006c16:	d004      	beq.n	8006c22 <HAL_TIM_PWM_ConfigChannel+0x82>
 8006c18:	f241 012a 	movw	r1, #4138	; 0x102a
 8006c1c:	487c      	ldr	r0, [pc, #496]	; (8006e10 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8006c1e:	f7fb fb13 	bl	8002248 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c28:	2b01      	cmp	r3, #1
 8006c2a:	d101      	bne.n	8006c30 <HAL_TIM_PWM_ConfigChannel+0x90>
 8006c2c:	2302      	movs	r3, #2
 8006c2e:	e145      	b.n	8006ebc <HAL_TIM_PWM_ConfigChannel+0x31c>
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	2201      	movs	r2, #1
 8006c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2b0c      	cmp	r3, #12
 8006c3c:	f200 8138 	bhi.w	8006eb0 <HAL_TIM_PWM_ConfigChannel+0x310>
 8006c40:	a201      	add	r2, pc, #4	; (adr r2, 8006c48 <HAL_TIM_PWM_ConfigChannel+0xa8>)
 8006c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c46:	bf00      	nop
 8006c48:	08006c7d 	.word	0x08006c7d
 8006c4c:	08006eb1 	.word	0x08006eb1
 8006c50:	08006eb1 	.word	0x08006eb1
 8006c54:	08006eb1 	.word	0x08006eb1
 8006c58:	08006d03 	.word	0x08006d03
 8006c5c:	08006eb1 	.word	0x08006eb1
 8006c60:	08006eb1 	.word	0x08006eb1
 8006c64:	08006eb1 	.word	0x08006eb1
 8006c68:	08006d8b 	.word	0x08006d8b
 8006c6c:	08006eb1 	.word	0x08006eb1
 8006c70:	08006eb1 	.word	0x08006eb1
 8006c74:	08006eb1 	.word	0x08006eb1
 8006c78:	08006e29 	.word	0x08006e29
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a64      	ldr	r2, [pc, #400]	; (8006e14 <HAL_TIM_PWM_ConfigChannel+0x274>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d01d      	beq.n	8006cc2 <HAL_TIM_PWM_ConfigChannel+0x122>
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a63      	ldr	r2, [pc, #396]	; (8006e18 <HAL_TIM_PWM_ConfigChannel+0x278>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d018      	beq.n	8006cc2 <HAL_TIM_PWM_ConfigChannel+0x122>
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c98:	d013      	beq.n	8006cc2 <HAL_TIM_PWM_ConfigChannel+0x122>
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a5f      	ldr	r2, [pc, #380]	; (8006e1c <HAL_TIM_PWM_ConfigChannel+0x27c>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d00e      	beq.n	8006cc2 <HAL_TIM_PWM_ConfigChannel+0x122>
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a5d      	ldr	r2, [pc, #372]	; (8006e20 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d009      	beq.n	8006cc2 <HAL_TIM_PWM_ConfigChannel+0x122>
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a5c      	ldr	r2, [pc, #368]	; (8006e24 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d004      	beq.n	8006cc2 <HAL_TIM_PWM_ConfigChannel+0x122>
 8006cb8:	f241 0134 	movw	r1, #4148	; 0x1034
 8006cbc:	4854      	ldr	r0, [pc, #336]	; (8006e10 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8006cbe:	f7fb fac3 	bl	8002248 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	68b9      	ldr	r1, [r7, #8]
 8006cc8:	4618      	mov	r0, r3
 8006cca:	f000 fcdb 	bl	8007684 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	699a      	ldr	r2, [r3, #24]
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f042 0208 	orr.w	r2, r2, #8
 8006cdc:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	699a      	ldr	r2, [r3, #24]
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f022 0204 	bic.w	r2, r2, #4
 8006cec:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	6999      	ldr	r1, [r3, #24]
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	691a      	ldr	r2, [r3, #16]
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	430a      	orrs	r2, r1
 8006cfe:	619a      	str	r2, [r3, #24]
      break;
 8006d00:	e0d7      	b.n	8006eb2 <HAL_TIM_PWM_ConfigChannel+0x312>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a43      	ldr	r2, [pc, #268]	; (8006e14 <HAL_TIM_PWM_ConfigChannel+0x274>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d01d      	beq.n	8006d48 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a41      	ldr	r2, [pc, #260]	; (8006e18 <HAL_TIM_PWM_ConfigChannel+0x278>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d018      	beq.n	8006d48 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d1e:	d013      	beq.n	8006d48 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a3d      	ldr	r2, [pc, #244]	; (8006e1c <HAL_TIM_PWM_ConfigChannel+0x27c>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d00e      	beq.n	8006d48 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a3c      	ldr	r2, [pc, #240]	; (8006e20 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d009      	beq.n	8006d48 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a3a      	ldr	r2, [pc, #232]	; (8006e24 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d004      	beq.n	8006d48 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 8006d3e:	f241 0145 	movw	r1, #4165	; 0x1045
 8006d42:	4833      	ldr	r0, [pc, #204]	; (8006e10 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8006d44:	f7fb fa80 	bl	8002248 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	68b9      	ldr	r1, [r7, #8]
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f000 fd32 	bl	80077b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	699a      	ldr	r2, [r3, #24]
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	699a      	ldr	r2, [r3, #24]
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	6999      	ldr	r1, [r3, #24]
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	691b      	ldr	r3, [r3, #16]
 8006d7e:	021a      	lsls	r2, r3, #8
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	430a      	orrs	r2, r1
 8006d86:	619a      	str	r2, [r3, #24]
      break;
 8006d88:	e093      	b.n	8006eb2 <HAL_TIM_PWM_ConfigChannel+0x312>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a21      	ldr	r2, [pc, #132]	; (8006e14 <HAL_TIM_PWM_ConfigChannel+0x274>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d01d      	beq.n	8006dd0 <HAL_TIM_PWM_ConfigChannel+0x230>
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a1f      	ldr	r2, [pc, #124]	; (8006e18 <HAL_TIM_PWM_ConfigChannel+0x278>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d018      	beq.n	8006dd0 <HAL_TIM_PWM_ConfigChannel+0x230>
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006da6:	d013      	beq.n	8006dd0 <HAL_TIM_PWM_ConfigChannel+0x230>
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a1b      	ldr	r2, [pc, #108]	; (8006e1c <HAL_TIM_PWM_ConfigChannel+0x27c>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d00e      	beq.n	8006dd0 <HAL_TIM_PWM_ConfigChannel+0x230>
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a1a      	ldr	r2, [pc, #104]	; (8006e20 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d009      	beq.n	8006dd0 <HAL_TIM_PWM_ConfigChannel+0x230>
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a18      	ldr	r2, [pc, #96]	; (8006e24 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d004      	beq.n	8006dd0 <HAL_TIM_PWM_ConfigChannel+0x230>
 8006dc6:	f241 0156 	movw	r1, #4182	; 0x1056
 8006dca:	4811      	ldr	r0, [pc, #68]	; (8006e10 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8006dcc:	f7fb fa3c 	bl	8002248 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	68b9      	ldr	r1, [r7, #8]
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f000 fd8c 	bl	80078f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	69da      	ldr	r2, [r3, #28]
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f042 0208 	orr.w	r2, r2, #8
 8006dea:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	69da      	ldr	r2, [r3, #28]
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f022 0204 	bic.w	r2, r2, #4
 8006dfa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	69d9      	ldr	r1, [r3, #28]
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	691a      	ldr	r2, [r3, #16]
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	430a      	orrs	r2, r1
 8006e0c:	61da      	str	r2, [r3, #28]
      break;
 8006e0e:	e050      	b.n	8006eb2 <HAL_TIM_PWM_ConfigChannel+0x312>
 8006e10:	080104b4 	.word	0x080104b4
 8006e14:	40012c00 	.word	0x40012c00
 8006e18:	40013400 	.word	0x40013400
 8006e1c:	40000400 	.word	0x40000400
 8006e20:	40000800 	.word	0x40000800
 8006e24:	40000c00 	.word	0x40000c00
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a25      	ldr	r2, [pc, #148]	; (8006ec4 <HAL_TIM_PWM_ConfigChannel+0x324>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d01d      	beq.n	8006e6e <HAL_TIM_PWM_ConfigChannel+0x2ce>
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a24      	ldr	r2, [pc, #144]	; (8006ec8 <HAL_TIM_PWM_ConfigChannel+0x328>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d018      	beq.n	8006e6e <HAL_TIM_PWM_ConfigChannel+0x2ce>
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e44:	d013      	beq.n	8006e6e <HAL_TIM_PWM_ConfigChannel+0x2ce>
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a20      	ldr	r2, [pc, #128]	; (8006ecc <HAL_TIM_PWM_ConfigChannel+0x32c>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d00e      	beq.n	8006e6e <HAL_TIM_PWM_ConfigChannel+0x2ce>
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a1e      	ldr	r2, [pc, #120]	; (8006ed0 <HAL_TIM_PWM_ConfigChannel+0x330>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d009      	beq.n	8006e6e <HAL_TIM_PWM_ConfigChannel+0x2ce>
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a1d      	ldr	r2, [pc, #116]	; (8006ed4 <HAL_TIM_PWM_ConfigChannel+0x334>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d004      	beq.n	8006e6e <HAL_TIM_PWM_ConfigChannel+0x2ce>
 8006e64:	f241 0167 	movw	r1, #4199	; 0x1067
 8006e68:	481b      	ldr	r0, [pc, #108]	; (8006ed8 <HAL_TIM_PWM_ConfigChannel+0x338>)
 8006e6a:	f7fb f9ed 	bl	8002248 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	68b9      	ldr	r1, [r7, #8]
 8006e74:	4618      	mov	r0, r3
 8006e76:	f000 fddb 	bl	8007a30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	69da      	ldr	r2, [r3, #28]
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	69da      	ldr	r2, [r3, #28]
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	69d9      	ldr	r1, [r3, #28]
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	691b      	ldr	r3, [r3, #16]
 8006ea4:	021a      	lsls	r2, r3, #8
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	430a      	orrs	r2, r1
 8006eac:	61da      	str	r2, [r3, #28]
      break;
 8006eae:	e000      	b.n	8006eb2 <HAL_TIM_PWM_ConfigChannel+0x312>
    }

    default:
      break;
 8006eb0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006eba:	2300      	movs	r3, #0
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3710      	adds	r7, #16
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}
 8006ec4:	40012c00 	.word	0x40012c00
 8006ec8:	40013400 	.word	0x40013400
 8006ecc:	40000400 	.word	0x40000400
 8006ed0:	40000800 	.word	0x40000800
 8006ed4:	40000c00 	.word	0x40000c00
 8006ed8:	080104b4 	.word	0x080104b4

08006edc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b084      	sub	sp, #16
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
 8006ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	d101      	bne.n	8006ef4 <HAL_TIM_ConfigClockSource+0x18>
 8006ef0:	2302      	movs	r3, #2
 8006ef2:	e2f5      	b.n	80074e0 <HAL_TIM_ConfigClockSource+0x604>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2202      	movs	r2, #2
 8006f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f0c:	d029      	beq.n	8006f62 <HAL_TIM_ConfigClockSource+0x86>
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f16:	d024      	beq.n	8006f62 <HAL_TIM_ConfigClockSource+0x86>
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d020      	beq.n	8006f62 <HAL_TIM_ConfigClockSource+0x86>
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	2b10      	cmp	r3, #16
 8006f26:	d01c      	beq.n	8006f62 <HAL_TIM_ConfigClockSource+0x86>
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	2b20      	cmp	r3, #32
 8006f2e:	d018      	beq.n	8006f62 <HAL_TIM_ConfigClockSource+0x86>
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	2b30      	cmp	r3, #48	; 0x30
 8006f36:	d014      	beq.n	8006f62 <HAL_TIM_ConfigClockSource+0x86>
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	2b40      	cmp	r3, #64	; 0x40
 8006f3e:	d010      	beq.n	8006f62 <HAL_TIM_ConfigClockSource+0x86>
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	2b50      	cmp	r3, #80	; 0x50
 8006f46:	d00c      	beq.n	8006f62 <HAL_TIM_ConfigClockSource+0x86>
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	2b60      	cmp	r3, #96	; 0x60
 8006f4e:	d008      	beq.n	8006f62 <HAL_TIM_ConfigClockSource+0x86>
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	2b70      	cmp	r3, #112	; 0x70
 8006f56:	d004      	beq.n	8006f62 <HAL_TIM_ConfigClockSource+0x86>
 8006f58:	f241 4132 	movw	r1, #5170	; 0x1432
 8006f5c:	487c      	ldr	r0, [pc, #496]	; (8007150 <HAL_TIM_ConfigClockSource+0x274>)
 8006f5e:	f7fb f973 	bl	8002248 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	689b      	ldr	r3, [r3, #8]
 8006f68:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006f70:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f78:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	68fa      	ldr	r2, [r7, #12]
 8006f80:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f8a:	f000 80f1 	beq.w	8007170 <HAL_TIM_ConfigClockSource+0x294>
 8006f8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f92:	f200 8299 	bhi.w	80074c8 <HAL_TIM_ConfigClockSource+0x5ec>
 8006f96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f9a:	d02d      	beq.n	8006ff8 <HAL_TIM_ConfigClockSource+0x11c>
 8006f9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fa0:	f200 8292 	bhi.w	80074c8 <HAL_TIM_ConfigClockSource+0x5ec>
 8006fa4:	2b70      	cmp	r3, #112	; 0x70
 8006fa6:	d05d      	beq.n	8007064 <HAL_TIM_ConfigClockSource+0x188>
 8006fa8:	2b70      	cmp	r3, #112	; 0x70
 8006faa:	f200 828d 	bhi.w	80074c8 <HAL_TIM_ConfigClockSource+0x5ec>
 8006fae:	2b60      	cmp	r3, #96	; 0x60
 8006fb0:	f000 81a5 	beq.w	80072fe <HAL_TIM_ConfigClockSource+0x422>
 8006fb4:	2b60      	cmp	r3, #96	; 0x60
 8006fb6:	f200 8287 	bhi.w	80074c8 <HAL_TIM_ConfigClockSource+0x5ec>
 8006fba:	2b50      	cmp	r3, #80	; 0x50
 8006fbc:	f000 8149 	beq.w	8007252 <HAL_TIM_ConfigClockSource+0x376>
 8006fc0:	2b50      	cmp	r3, #80	; 0x50
 8006fc2:	f200 8281 	bhi.w	80074c8 <HAL_TIM_ConfigClockSource+0x5ec>
 8006fc6:	2b40      	cmp	r3, #64	; 0x40
 8006fc8:	f000 81fc 	beq.w	80073c4 <HAL_TIM_ConfigClockSource+0x4e8>
 8006fcc:	2b40      	cmp	r3, #64	; 0x40
 8006fce:	f200 827b 	bhi.w	80074c8 <HAL_TIM_ConfigClockSource+0x5ec>
 8006fd2:	2b30      	cmp	r3, #48	; 0x30
 8006fd4:	f000 824c 	beq.w	8007470 <HAL_TIM_ConfigClockSource+0x594>
 8006fd8:	2b30      	cmp	r3, #48	; 0x30
 8006fda:	f200 8275 	bhi.w	80074c8 <HAL_TIM_ConfigClockSource+0x5ec>
 8006fde:	2b20      	cmp	r3, #32
 8006fe0:	f000 8246 	beq.w	8007470 <HAL_TIM_ConfigClockSource+0x594>
 8006fe4:	2b20      	cmp	r3, #32
 8006fe6:	f200 826f 	bhi.w	80074c8 <HAL_TIM_ConfigClockSource+0x5ec>
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	f000 8240 	beq.w	8007470 <HAL_TIM_ConfigClockSource+0x594>
 8006ff0:	2b10      	cmp	r3, #16
 8006ff2:	f000 823d 	beq.w	8007470 <HAL_TIM_ConfigClockSource+0x594>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006ff6:	e267      	b.n	80074c8 <HAL_TIM_ConfigClockSource+0x5ec>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a55      	ldr	r2, [pc, #340]	; (8007154 <HAL_TIM_ConfigClockSource+0x278>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	f000 8264 	beq.w	80074cc <HAL_TIM_ConfigClockSource+0x5f0>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a53      	ldr	r2, [pc, #332]	; (8007158 <HAL_TIM_ConfigClockSource+0x27c>)
 800700a:	4293      	cmp	r3, r2
 800700c:	f000 825e 	beq.w	80074cc <HAL_TIM_ConfigClockSource+0x5f0>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007018:	f000 8258 	beq.w	80074cc <HAL_TIM_ConfigClockSource+0x5f0>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a4e      	ldr	r2, [pc, #312]	; (800715c <HAL_TIM_ConfigClockSource+0x280>)
 8007022:	4293      	cmp	r3, r2
 8007024:	f000 8252 	beq.w	80074cc <HAL_TIM_ConfigClockSource+0x5f0>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a4c      	ldr	r2, [pc, #304]	; (8007160 <HAL_TIM_ConfigClockSource+0x284>)
 800702e:	4293      	cmp	r3, r2
 8007030:	f000 824c 	beq.w	80074cc <HAL_TIM_ConfigClockSource+0x5f0>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a4a      	ldr	r2, [pc, #296]	; (8007164 <HAL_TIM_ConfigClockSource+0x288>)
 800703a:	4293      	cmp	r3, r2
 800703c:	f000 8246 	beq.w	80074cc <HAL_TIM_ConfigClockSource+0x5f0>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a48      	ldr	r2, [pc, #288]	; (8007168 <HAL_TIM_ConfigClockSource+0x28c>)
 8007046:	4293      	cmp	r3, r2
 8007048:	f000 8240 	beq.w	80074cc <HAL_TIM_ConfigClockSource+0x5f0>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a46      	ldr	r2, [pc, #280]	; (800716c <HAL_TIM_ConfigClockSource+0x290>)
 8007052:	4293      	cmp	r3, r2
 8007054:	f000 823a 	beq.w	80074cc <HAL_TIM_ConfigClockSource+0x5f0>
 8007058:	f241 413e 	movw	r1, #5182	; 0x143e
 800705c:	483c      	ldr	r0, [pc, #240]	; (8007150 <HAL_TIM_ConfigClockSource+0x274>)
 800705e:	f7fb f8f3 	bl	8002248 <assert_failed>
      break;
 8007062:	e233      	b.n	80074cc <HAL_TIM_ConfigClockSource+0x5f0>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a3a      	ldr	r2, [pc, #232]	; (8007154 <HAL_TIM_ConfigClockSource+0x278>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d01d      	beq.n	80070aa <HAL_TIM_ConfigClockSource+0x1ce>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a39      	ldr	r2, [pc, #228]	; (8007158 <HAL_TIM_ConfigClockSource+0x27c>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d018      	beq.n	80070aa <HAL_TIM_ConfigClockSource+0x1ce>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007080:	d013      	beq.n	80070aa <HAL_TIM_ConfigClockSource+0x1ce>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a35      	ldr	r2, [pc, #212]	; (800715c <HAL_TIM_ConfigClockSource+0x280>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d00e      	beq.n	80070aa <HAL_TIM_ConfigClockSource+0x1ce>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a33      	ldr	r2, [pc, #204]	; (8007160 <HAL_TIM_ConfigClockSource+0x284>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d009      	beq.n	80070aa <HAL_TIM_ConfigClockSource+0x1ce>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a32      	ldr	r2, [pc, #200]	; (8007164 <HAL_TIM_ConfigClockSource+0x288>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d004      	beq.n	80070aa <HAL_TIM_ConfigClockSource+0x1ce>
 80070a0:	f241 4145 	movw	r1, #5189	; 0x1445
 80070a4:	482a      	ldr	r0, [pc, #168]	; (8007150 <HAL_TIM_ConfigClockSource+0x274>)
 80070a6:	f7fb f8cf 	bl	8002248 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	689b      	ldr	r3, [r3, #8]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d013      	beq.n	80070da <HAL_TIM_ConfigClockSource+0x1fe>
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	689b      	ldr	r3, [r3, #8]
 80070b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070ba:	d00e      	beq.n	80070da <HAL_TIM_ConfigClockSource+0x1fe>
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	689b      	ldr	r3, [r3, #8]
 80070c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070c4:	d009      	beq.n	80070da <HAL_TIM_ConfigClockSource+0x1fe>
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	689b      	ldr	r3, [r3, #8]
 80070ca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80070ce:	d004      	beq.n	80070da <HAL_TIM_ConfigClockSource+0x1fe>
 80070d0:	f241 4148 	movw	r1, #5192	; 0x1448
 80070d4:	481e      	ldr	r0, [pc, #120]	; (8007150 <HAL_TIM_ConfigClockSource+0x274>)
 80070d6:	f7fb f8b7 	bl	8002248 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070e2:	d014      	beq.n	800710e <HAL_TIM_ConfigClockSource+0x232>
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d010      	beq.n	800710e <HAL_TIM_ConfigClockSource+0x232>
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d00c      	beq.n	800710e <HAL_TIM_ConfigClockSource+0x232>
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	2b02      	cmp	r3, #2
 80070fa:	d008      	beq.n	800710e <HAL_TIM_ConfigClockSource+0x232>
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	2b0a      	cmp	r3, #10
 8007102:	d004      	beq.n	800710e <HAL_TIM_ConfigClockSource+0x232>
 8007104:	f241 4149 	movw	r1, #5193	; 0x1449
 8007108:	4811      	ldr	r0, [pc, #68]	; (8007150 <HAL_TIM_ConfigClockSource+0x274>)
 800710a:	f7fb f89d 	bl	8002248 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	68db      	ldr	r3, [r3, #12]
 8007112:	2b0f      	cmp	r3, #15
 8007114:	d904      	bls.n	8007120 <HAL_TIM_ConfigClockSource+0x244>
 8007116:	f241 414a 	movw	r1, #5194	; 0x144a
 800711a:	480d      	ldr	r0, [pc, #52]	; (8007150 <HAL_TIM_ConfigClockSource+0x274>)
 800711c:	f7fb f894 	bl	8002248 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6818      	ldr	r0, [r3, #0]
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	6899      	ldr	r1, [r3, #8]
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	685a      	ldr	r2, [r3, #4]
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	68db      	ldr	r3, [r3, #12]
 8007130:	f000 fd59 	bl	8007be6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	689b      	ldr	r3, [r3, #8]
 800713a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007142:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	68fa      	ldr	r2, [r7, #12]
 800714a:	609a      	str	r2, [r3, #8]
      break;
 800714c:	e1bf      	b.n	80074ce <HAL_TIM_ConfigClockSource+0x5f2>
 800714e:	bf00      	nop
 8007150:	080104b4 	.word	0x080104b4
 8007154:	40012c00 	.word	0x40012c00
 8007158:	40013400 	.word	0x40013400
 800715c:	40000400 	.word	0x40000400
 8007160:	40000800 	.word	0x40000800
 8007164:	40000c00 	.word	0x40000c00
 8007168:	40001000 	.word	0x40001000
 800716c:	40001400 	.word	0x40001400
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a8d      	ldr	r2, [pc, #564]	; (80073ac <HAL_TIM_ConfigClockSource+0x4d0>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d01d      	beq.n	80071b6 <HAL_TIM_ConfigClockSource+0x2da>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a8c      	ldr	r2, [pc, #560]	; (80073b0 <HAL_TIM_ConfigClockSource+0x4d4>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d018      	beq.n	80071b6 <HAL_TIM_ConfigClockSource+0x2da>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800718c:	d013      	beq.n	80071b6 <HAL_TIM_ConfigClockSource+0x2da>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a88      	ldr	r2, [pc, #544]	; (80073b4 <HAL_TIM_ConfigClockSource+0x4d8>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d00e      	beq.n	80071b6 <HAL_TIM_ConfigClockSource+0x2da>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a86      	ldr	r2, [pc, #536]	; (80073b8 <HAL_TIM_ConfigClockSource+0x4dc>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d009      	beq.n	80071b6 <HAL_TIM_ConfigClockSource+0x2da>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a85      	ldr	r2, [pc, #532]	; (80073bc <HAL_TIM_ConfigClockSource+0x4e0>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d004      	beq.n	80071b6 <HAL_TIM_ConfigClockSource+0x2da>
 80071ac:	f241 415d 	movw	r1, #5213	; 0x145d
 80071b0:	4883      	ldr	r0, [pc, #524]	; (80073c0 <HAL_TIM_ConfigClockSource+0x4e4>)
 80071b2:	f7fb f849 	bl	8002248 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	689b      	ldr	r3, [r3, #8]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d013      	beq.n	80071e6 <HAL_TIM_ConfigClockSource+0x30a>
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	689b      	ldr	r3, [r3, #8]
 80071c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071c6:	d00e      	beq.n	80071e6 <HAL_TIM_ConfigClockSource+0x30a>
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071d0:	d009      	beq.n	80071e6 <HAL_TIM_ConfigClockSource+0x30a>
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	689b      	ldr	r3, [r3, #8]
 80071d6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80071da:	d004      	beq.n	80071e6 <HAL_TIM_ConfigClockSource+0x30a>
 80071dc:	f44f 51a3 	mov.w	r1, #5216	; 0x1460
 80071e0:	4877      	ldr	r0, [pc, #476]	; (80073c0 <HAL_TIM_ConfigClockSource+0x4e4>)
 80071e2:	f7fb f831 	bl	8002248 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	685b      	ldr	r3, [r3, #4]
 80071ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071ee:	d014      	beq.n	800721a <HAL_TIM_ConfigClockSource+0x33e>
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	685b      	ldr	r3, [r3, #4]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d010      	beq.n	800721a <HAL_TIM_ConfigClockSource+0x33e>
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d00c      	beq.n	800721a <HAL_TIM_ConfigClockSource+0x33e>
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	2b02      	cmp	r3, #2
 8007206:	d008      	beq.n	800721a <HAL_TIM_ConfigClockSource+0x33e>
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	2b0a      	cmp	r3, #10
 800720e:	d004      	beq.n	800721a <HAL_TIM_ConfigClockSource+0x33e>
 8007210:	f241 4161 	movw	r1, #5217	; 0x1461
 8007214:	486a      	ldr	r0, [pc, #424]	; (80073c0 <HAL_TIM_ConfigClockSource+0x4e4>)
 8007216:	f7fb f817 	bl	8002248 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	68db      	ldr	r3, [r3, #12]
 800721e:	2b0f      	cmp	r3, #15
 8007220:	d904      	bls.n	800722c <HAL_TIM_ConfigClockSource+0x350>
 8007222:	f241 4162 	movw	r1, #5218	; 0x1462
 8007226:	4866      	ldr	r0, [pc, #408]	; (80073c0 <HAL_TIM_ConfigClockSource+0x4e4>)
 8007228:	f7fb f80e 	bl	8002248 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6818      	ldr	r0, [r3, #0]
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	6899      	ldr	r1, [r3, #8]
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	685a      	ldr	r2, [r3, #4]
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	68db      	ldr	r3, [r3, #12]
 800723c:	f000 fcd3 	bl	8007be6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	689a      	ldr	r2, [r3, #8]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800724e:	609a      	str	r2, [r3, #8]
      break;
 8007250:	e13d      	b.n	80074ce <HAL_TIM_ConfigClockSource+0x5f2>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a55      	ldr	r2, [pc, #340]	; (80073ac <HAL_TIM_ConfigClockSource+0x4d0>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d01d      	beq.n	8007298 <HAL_TIM_ConfigClockSource+0x3bc>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a53      	ldr	r2, [pc, #332]	; (80073b0 <HAL_TIM_ConfigClockSource+0x4d4>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d018      	beq.n	8007298 <HAL_TIM_ConfigClockSource+0x3bc>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800726e:	d013      	beq.n	8007298 <HAL_TIM_ConfigClockSource+0x3bc>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a4f      	ldr	r2, [pc, #316]	; (80073b4 <HAL_TIM_ConfigClockSource+0x4d8>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d00e      	beq.n	8007298 <HAL_TIM_ConfigClockSource+0x3bc>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4a4e      	ldr	r2, [pc, #312]	; (80073b8 <HAL_TIM_ConfigClockSource+0x4dc>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d009      	beq.n	8007298 <HAL_TIM_ConfigClockSource+0x3bc>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a4c      	ldr	r2, [pc, #304]	; (80073bc <HAL_TIM_ConfigClockSource+0x4e0>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d004      	beq.n	8007298 <HAL_TIM_ConfigClockSource+0x3bc>
 800728e:	f241 4171 	movw	r1, #5233	; 0x1471
 8007292:	484b      	ldr	r0, [pc, #300]	; (80073c0 <HAL_TIM_ConfigClockSource+0x4e4>)
 8007294:	f7fa ffd8 	bl	8002248 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	685b      	ldr	r3, [r3, #4]
 800729c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072a0:	d014      	beq.n	80072cc <HAL_TIM_ConfigClockSource+0x3f0>
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	685b      	ldr	r3, [r3, #4]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d010      	beq.n	80072cc <HAL_TIM_ConfigClockSource+0x3f0>
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d00c      	beq.n	80072cc <HAL_TIM_ConfigClockSource+0x3f0>
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	685b      	ldr	r3, [r3, #4]
 80072b6:	2b02      	cmp	r3, #2
 80072b8:	d008      	beq.n	80072cc <HAL_TIM_ConfigClockSource+0x3f0>
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	685b      	ldr	r3, [r3, #4]
 80072be:	2b0a      	cmp	r3, #10
 80072c0:	d004      	beq.n	80072cc <HAL_TIM_ConfigClockSource+0x3f0>
 80072c2:	f241 4174 	movw	r1, #5236	; 0x1474
 80072c6:	483e      	ldr	r0, [pc, #248]	; (80073c0 <HAL_TIM_ConfigClockSource+0x4e4>)
 80072c8:	f7fa ffbe 	bl	8002248 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	68db      	ldr	r3, [r3, #12]
 80072d0:	2b0f      	cmp	r3, #15
 80072d2:	d904      	bls.n	80072de <HAL_TIM_ConfigClockSource+0x402>
 80072d4:	f241 4175 	movw	r1, #5237	; 0x1475
 80072d8:	4839      	ldr	r0, [pc, #228]	; (80073c0 <HAL_TIM_ConfigClockSource+0x4e4>)
 80072da:	f7fa ffb5 	bl	8002248 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6818      	ldr	r0, [r3, #0]
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	6859      	ldr	r1, [r3, #4]
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	68db      	ldr	r3, [r3, #12]
 80072ea:	461a      	mov	r2, r3
 80072ec:	f000 fc04 	bl	8007af8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	2150      	movs	r1, #80	; 0x50
 80072f6:	4618      	mov	r0, r3
 80072f8:	f000 fc5b 	bl	8007bb2 <TIM_ITRx_SetConfig>
      break;
 80072fc:	e0e7      	b.n	80074ce <HAL_TIM_ConfigClockSource+0x5f2>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4a2a      	ldr	r2, [pc, #168]	; (80073ac <HAL_TIM_ConfigClockSource+0x4d0>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d01d      	beq.n	8007344 <HAL_TIM_ConfigClockSource+0x468>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a28      	ldr	r2, [pc, #160]	; (80073b0 <HAL_TIM_ConfigClockSource+0x4d4>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d018      	beq.n	8007344 <HAL_TIM_ConfigClockSource+0x468>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800731a:	d013      	beq.n	8007344 <HAL_TIM_ConfigClockSource+0x468>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a24      	ldr	r2, [pc, #144]	; (80073b4 <HAL_TIM_ConfigClockSource+0x4d8>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d00e      	beq.n	8007344 <HAL_TIM_ConfigClockSource+0x468>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a23      	ldr	r2, [pc, #140]	; (80073b8 <HAL_TIM_ConfigClockSource+0x4dc>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d009      	beq.n	8007344 <HAL_TIM_ConfigClockSource+0x468>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a21      	ldr	r2, [pc, #132]	; (80073bc <HAL_TIM_ConfigClockSource+0x4e0>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d004      	beq.n	8007344 <HAL_TIM_ConfigClockSource+0x468>
 800733a:	f241 4181 	movw	r1, #5249	; 0x1481
 800733e:	4820      	ldr	r0, [pc, #128]	; (80073c0 <HAL_TIM_ConfigClockSource+0x4e4>)
 8007340:	f7fa ff82 	bl	8002248 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800734c:	d014      	beq.n	8007378 <HAL_TIM_ConfigClockSource+0x49c>
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d010      	beq.n	8007378 <HAL_TIM_ConfigClockSource+0x49c>
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	685b      	ldr	r3, [r3, #4]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d00c      	beq.n	8007378 <HAL_TIM_ConfigClockSource+0x49c>
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	2b02      	cmp	r3, #2
 8007364:	d008      	beq.n	8007378 <HAL_TIM_ConfigClockSource+0x49c>
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	685b      	ldr	r3, [r3, #4]
 800736a:	2b0a      	cmp	r3, #10
 800736c:	d004      	beq.n	8007378 <HAL_TIM_ConfigClockSource+0x49c>
 800736e:	f241 4184 	movw	r1, #5252	; 0x1484
 8007372:	4813      	ldr	r0, [pc, #76]	; (80073c0 <HAL_TIM_ConfigClockSource+0x4e4>)
 8007374:	f7fa ff68 	bl	8002248 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	68db      	ldr	r3, [r3, #12]
 800737c:	2b0f      	cmp	r3, #15
 800737e:	d904      	bls.n	800738a <HAL_TIM_ConfigClockSource+0x4ae>
 8007380:	f241 4185 	movw	r1, #5253	; 0x1485
 8007384:	480e      	ldr	r0, [pc, #56]	; (80073c0 <HAL_TIM_ConfigClockSource+0x4e4>)
 8007386:	f7fa ff5f 	bl	8002248 <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6818      	ldr	r0, [r3, #0]
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	6859      	ldr	r1, [r3, #4]
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	68db      	ldr	r3, [r3, #12]
 8007396:	461a      	mov	r2, r3
 8007398:	f000 fbdc 	bl	8007b54 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	2160      	movs	r1, #96	; 0x60
 80073a2:	4618      	mov	r0, r3
 80073a4:	f000 fc05 	bl	8007bb2 <TIM_ITRx_SetConfig>
      break;
 80073a8:	e091      	b.n	80074ce <HAL_TIM_ConfigClockSource+0x5f2>
 80073aa:	bf00      	nop
 80073ac:	40012c00 	.word	0x40012c00
 80073b0:	40013400 	.word	0x40013400
 80073b4:	40000400 	.word	0x40000400
 80073b8:	40000800 	.word	0x40000800
 80073bc:	40000c00 	.word	0x40000c00
 80073c0:	080104b4 	.word	0x080104b4
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4a47      	ldr	r2, [pc, #284]	; (80074e8 <HAL_TIM_ConfigClockSource+0x60c>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d01d      	beq.n	800740a <HAL_TIM_ConfigClockSource+0x52e>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4a46      	ldr	r2, [pc, #280]	; (80074ec <HAL_TIM_ConfigClockSource+0x610>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d018      	beq.n	800740a <HAL_TIM_ConfigClockSource+0x52e>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073e0:	d013      	beq.n	800740a <HAL_TIM_ConfigClockSource+0x52e>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4a42      	ldr	r2, [pc, #264]	; (80074f0 <HAL_TIM_ConfigClockSource+0x614>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d00e      	beq.n	800740a <HAL_TIM_ConfigClockSource+0x52e>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4a40      	ldr	r2, [pc, #256]	; (80074f4 <HAL_TIM_ConfigClockSource+0x618>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d009      	beq.n	800740a <HAL_TIM_ConfigClockSource+0x52e>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a3f      	ldr	r2, [pc, #252]	; (80074f8 <HAL_TIM_ConfigClockSource+0x61c>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d004      	beq.n	800740a <HAL_TIM_ConfigClockSource+0x52e>
 8007400:	f241 4191 	movw	r1, #5265	; 0x1491
 8007404:	483d      	ldr	r0, [pc, #244]	; (80074fc <HAL_TIM_ConfigClockSource+0x620>)
 8007406:	f7fa ff1f 	bl	8002248 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007412:	d014      	beq.n	800743e <HAL_TIM_ConfigClockSource+0x562>
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d010      	beq.n	800743e <HAL_TIM_ConfigClockSource+0x562>
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	685b      	ldr	r3, [r3, #4]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d00c      	beq.n	800743e <HAL_TIM_ConfigClockSource+0x562>
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	2b02      	cmp	r3, #2
 800742a:	d008      	beq.n	800743e <HAL_TIM_ConfigClockSource+0x562>
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	2b0a      	cmp	r3, #10
 8007432:	d004      	beq.n	800743e <HAL_TIM_ConfigClockSource+0x562>
 8007434:	f241 4194 	movw	r1, #5268	; 0x1494
 8007438:	4830      	ldr	r0, [pc, #192]	; (80074fc <HAL_TIM_ConfigClockSource+0x620>)
 800743a:	f7fa ff05 	bl	8002248 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	68db      	ldr	r3, [r3, #12]
 8007442:	2b0f      	cmp	r3, #15
 8007444:	d904      	bls.n	8007450 <HAL_TIM_ConfigClockSource+0x574>
 8007446:	f241 4195 	movw	r1, #5269	; 0x1495
 800744a:	482c      	ldr	r0, [pc, #176]	; (80074fc <HAL_TIM_ConfigClockSource+0x620>)
 800744c:	f7fa fefc 	bl	8002248 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6818      	ldr	r0, [r3, #0]
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	6859      	ldr	r1, [r3, #4]
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	68db      	ldr	r3, [r3, #12]
 800745c:	461a      	mov	r2, r3
 800745e:	f000 fb4b 	bl	8007af8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	2140      	movs	r1, #64	; 0x40
 8007468:	4618      	mov	r0, r3
 800746a:	f000 fba2 	bl	8007bb2 <TIM_ITRx_SetConfig>
      break;
 800746e:	e02e      	b.n	80074ce <HAL_TIM_ConfigClockSource+0x5f2>
        assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a1c      	ldr	r2, [pc, #112]	; (80074e8 <HAL_TIM_ConfigClockSource+0x60c>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d01d      	beq.n	80074b6 <HAL_TIM_ConfigClockSource+0x5da>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4a1b      	ldr	r2, [pc, #108]	; (80074ec <HAL_TIM_ConfigClockSource+0x610>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d018      	beq.n	80074b6 <HAL_TIM_ConfigClockSource+0x5da>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800748c:	d013      	beq.n	80074b6 <HAL_TIM_ConfigClockSource+0x5da>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a17      	ldr	r2, [pc, #92]	; (80074f0 <HAL_TIM_ConfigClockSource+0x614>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d00e      	beq.n	80074b6 <HAL_TIM_ConfigClockSource+0x5da>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a15      	ldr	r2, [pc, #84]	; (80074f4 <HAL_TIM_ConfigClockSource+0x618>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d009      	beq.n	80074b6 <HAL_TIM_ConfigClockSource+0x5da>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a14      	ldr	r2, [pc, #80]	; (80074f8 <HAL_TIM_ConfigClockSource+0x61c>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d004      	beq.n	80074b6 <HAL_TIM_ConfigClockSource+0x5da>
 80074ac:	f241 41a4 	movw	r1, #5284	; 0x14a4
 80074b0:	4812      	ldr	r0, [pc, #72]	; (80074fc <HAL_TIM_ConfigClockSource+0x620>)
 80074b2:	f7fa fec9 	bl	8002248 <assert_failed>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681a      	ldr	r2, [r3, #0]
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4619      	mov	r1, r3
 80074c0:	4610      	mov	r0, r2
 80074c2:	f000 fb76 	bl	8007bb2 <TIM_ITRx_SetConfig>
        break;
 80074c6:	e002      	b.n	80074ce <HAL_TIM_ConfigClockSource+0x5f2>
      break;
 80074c8:	bf00      	nop
 80074ca:	e000      	b.n	80074ce <HAL_TIM_ConfigClockSource+0x5f2>
      break;
 80074cc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2201      	movs	r2, #1
 80074d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2200      	movs	r2, #0
 80074da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80074de:	2300      	movs	r3, #0
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3710      	adds	r7, #16
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}
 80074e8:	40012c00 	.word	0x40012c00
 80074ec:	40013400 	.word	0x40013400
 80074f0:	40000400 	.word	0x40000400
 80074f4:	40000800 	.word	0x40000800
 80074f8:	40000c00 	.word	0x40000c00
 80074fc:	080104b4 	.word	0x080104b4

08007500 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007500:	b480      	push	{r7}
 8007502:	b083      	sub	sp, #12
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8007508:	bf00      	nop
 800750a:	370c      	adds	r7, #12
 800750c:	46bd      	mov	sp, r7
 800750e:	bc80      	pop	{r7}
 8007510:	4770      	bx	lr

08007512 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007512:	b480      	push	{r7}
 8007514:	b083      	sub	sp, #12
 8007516:	af00      	add	r7, sp, #0
 8007518:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800751a:	bf00      	nop
 800751c:	370c      	adds	r7, #12
 800751e:	46bd      	mov	sp, r7
 8007520:	bc80      	pop	{r7}
 8007522:	4770      	bx	lr

08007524 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007524:	b480      	push	{r7}
 8007526:	b083      	sub	sp, #12
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800752c:	bf00      	nop
 800752e:	370c      	adds	r7, #12
 8007530:	46bd      	mov	sp, r7
 8007532:	bc80      	pop	{r7}
 8007534:	4770      	bx	lr

08007536 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007536:	b480      	push	{r7}
 8007538:	b083      	sub	sp, #12
 800753a:	af00      	add	r7, sp, #0
 800753c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800753e:	bf00      	nop
 8007540:	370c      	adds	r7, #12
 8007542:	46bd      	mov	sp, r7
 8007544:	bc80      	pop	{r7}
 8007546:	4770      	bx	lr

08007548 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007548:	b480      	push	{r7}
 800754a:	b083      	sub	sp, #12
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8007550:	bf00      	nop
 8007552:	370c      	adds	r7, #12
 8007554:	46bd      	mov	sp, r7
 8007556:	bc80      	pop	{r7}
 8007558:	4770      	bx	lr

0800755a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800755a:	b480      	push	{r7}
 800755c:	b083      	sub	sp, #12
 800755e:	af00      	add	r7, sp, #0
 8007560:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007562:	bf00      	nop
 8007564:	370c      	adds	r7, #12
 8007566:	46bd      	mov	sp, r7
 8007568:	bc80      	pop	{r7}
 800756a:	4770      	bx	lr

0800756c <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800756c:	b480      	push	{r7}
 800756e:	b083      	sub	sp, #12
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8007574:	bf00      	nop
 8007576:	370c      	adds	r7, #12
 8007578:	46bd      	mov	sp, r7
 800757a:	bc80      	pop	{r7}
 800757c:	4770      	bx	lr

0800757e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800757e:	b480      	push	{r7}
 8007580:	b083      	sub	sp, #12
 8007582:	af00      	add	r7, sp, #0
 8007584:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8007586:	bf00      	nop
 8007588:	370c      	adds	r7, #12
 800758a:	46bd      	mov	sp, r7
 800758c:	bc80      	pop	{r7}
 800758e:	4770      	bx	lr

08007590 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007590:	b480      	push	{r7}
 8007592:	b085      	sub	sp, #20
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
 8007598:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	4a33      	ldr	r2, [pc, #204]	; (8007670 <TIM_Base_SetConfig+0xe0>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d013      	beq.n	80075d0 <TIM_Base_SetConfig+0x40>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	4a32      	ldr	r2, [pc, #200]	; (8007674 <TIM_Base_SetConfig+0xe4>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d00f      	beq.n	80075d0 <TIM_Base_SetConfig+0x40>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075b6:	d00b      	beq.n	80075d0 <TIM_Base_SetConfig+0x40>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	4a2f      	ldr	r2, [pc, #188]	; (8007678 <TIM_Base_SetConfig+0xe8>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d007      	beq.n	80075d0 <TIM_Base_SetConfig+0x40>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	4a2e      	ldr	r2, [pc, #184]	; (800767c <TIM_Base_SetConfig+0xec>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d003      	beq.n	80075d0 <TIM_Base_SetConfig+0x40>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	4a2d      	ldr	r2, [pc, #180]	; (8007680 <TIM_Base_SetConfig+0xf0>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d108      	bne.n	80075e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	68fa      	ldr	r2, [r7, #12]
 80075de:	4313      	orrs	r3, r2
 80075e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	4a22      	ldr	r2, [pc, #136]	; (8007670 <TIM_Base_SetConfig+0xe0>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d013      	beq.n	8007612 <TIM_Base_SetConfig+0x82>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	4a21      	ldr	r2, [pc, #132]	; (8007674 <TIM_Base_SetConfig+0xe4>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d00f      	beq.n	8007612 <TIM_Base_SetConfig+0x82>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075f8:	d00b      	beq.n	8007612 <TIM_Base_SetConfig+0x82>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	4a1e      	ldr	r2, [pc, #120]	; (8007678 <TIM_Base_SetConfig+0xe8>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d007      	beq.n	8007612 <TIM_Base_SetConfig+0x82>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	4a1d      	ldr	r2, [pc, #116]	; (800767c <TIM_Base_SetConfig+0xec>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d003      	beq.n	8007612 <TIM_Base_SetConfig+0x82>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	4a1c      	ldr	r2, [pc, #112]	; (8007680 <TIM_Base_SetConfig+0xf0>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d108      	bne.n	8007624 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007618:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	68db      	ldr	r3, [r3, #12]
 800761e:	68fa      	ldr	r2, [r7, #12]
 8007620:	4313      	orrs	r3, r2
 8007622:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	695b      	ldr	r3, [r3, #20]
 800762e:	4313      	orrs	r3, r2
 8007630:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	68fa      	ldr	r2, [r7, #12]
 8007636:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	689a      	ldr	r2, [r3, #8]
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	681a      	ldr	r2, [r3, #0]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	4a09      	ldr	r2, [pc, #36]	; (8007670 <TIM_Base_SetConfig+0xe0>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d003      	beq.n	8007658 <TIM_Base_SetConfig+0xc8>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	4a08      	ldr	r2, [pc, #32]	; (8007674 <TIM_Base_SetConfig+0xe4>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d103      	bne.n	8007660 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	691a      	ldr	r2, [r3, #16]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2201      	movs	r2, #1
 8007664:	615a      	str	r2, [r3, #20]
}
 8007666:	bf00      	nop
 8007668:	3714      	adds	r7, #20
 800766a:	46bd      	mov	sp, r7
 800766c:	bc80      	pop	{r7}
 800766e:	4770      	bx	lr
 8007670:	40012c00 	.word	0x40012c00
 8007674:	40013400 	.word	0x40013400
 8007678:	40000400 	.word	0x40000400
 800767c:	40000800 	.word	0x40000800
 8007680:	40000c00 	.word	0x40000c00

08007684 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b086      	sub	sp, #24
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
 800768c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6a1b      	ldr	r3, [r3, #32]
 8007692:	f023 0201 	bic.w	r2, r3, #1
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6a1b      	ldr	r3, [r3, #32]
 800769e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	685b      	ldr	r3, [r3, #4]
 80076a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	699b      	ldr	r3, [r3, #24]
 80076aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f023 0303 	bic.w	r3, r3, #3
 80076ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	68fa      	ldr	r2, [r7, #12]
 80076c2:	4313      	orrs	r3, r2
 80076c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	f023 0302 	bic.w	r3, r3, #2
 80076cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	689b      	ldr	r3, [r3, #8]
 80076d2:	697a      	ldr	r2, [r7, #20]
 80076d4:	4313      	orrs	r3, r2
 80076d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	4a34      	ldr	r2, [pc, #208]	; (80077ac <TIM_OC1_SetConfig+0x128>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d003      	beq.n	80076e8 <TIM_OC1_SetConfig+0x64>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	4a33      	ldr	r2, [pc, #204]	; (80077b0 <TIM_OC1_SetConfig+0x12c>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d119      	bne.n	800771c <TIM_OC1_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	68db      	ldr	r3, [r3, #12]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d008      	beq.n	8007702 <TIM_OC1_SetConfig+0x7e>
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	68db      	ldr	r3, [r3, #12]
 80076f4:	2b08      	cmp	r3, #8
 80076f6:	d004      	beq.n	8007702 <TIM_OC1_SetConfig+0x7e>
 80076f8:	f641 2141 	movw	r1, #6721	; 0x1a41
 80076fc:	482d      	ldr	r0, [pc, #180]	; (80077b4 <TIM_OC1_SetConfig+0x130>)
 80076fe:	f7fa fda3 	bl	8002248 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	f023 0308 	bic.w	r3, r3, #8
 8007708:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	68db      	ldr	r3, [r3, #12]
 800770e:	697a      	ldr	r2, [r7, #20]
 8007710:	4313      	orrs	r3, r2
 8007712:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007714:	697b      	ldr	r3, [r7, #20]
 8007716:	f023 0304 	bic.w	r3, r3, #4
 800771a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	4a23      	ldr	r2, [pc, #140]	; (80077ac <TIM_OC1_SetConfig+0x128>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d003      	beq.n	800772c <TIM_OC1_SetConfig+0xa8>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	4a22      	ldr	r2, [pc, #136]	; (80077b0 <TIM_OC1_SetConfig+0x12c>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d12d      	bne.n	8007788 <TIM_OC1_SetConfig+0x104>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	699b      	ldr	r3, [r3, #24]
 8007730:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007734:	d008      	beq.n	8007748 <TIM_OC1_SetConfig+0xc4>
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	699b      	ldr	r3, [r3, #24]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d004      	beq.n	8007748 <TIM_OC1_SetConfig+0xc4>
 800773e:	f641 214e 	movw	r1, #6734	; 0x1a4e
 8007742:	481c      	ldr	r0, [pc, #112]	; (80077b4 <TIM_OC1_SetConfig+0x130>)
 8007744:	f7fa fd80 	bl	8002248 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	695b      	ldr	r3, [r3, #20]
 800774c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007750:	d008      	beq.n	8007764 <TIM_OC1_SetConfig+0xe0>
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	695b      	ldr	r3, [r3, #20]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d004      	beq.n	8007764 <TIM_OC1_SetConfig+0xe0>
 800775a:	f641 214f 	movw	r1, #6735	; 0x1a4f
 800775e:	4815      	ldr	r0, [pc, #84]	; (80077b4 <TIM_OC1_SetConfig+0x130>)
 8007760:	f7fa fd72 	bl	8002248 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007764:	693b      	ldr	r3, [r7, #16]
 8007766:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800776a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800776c:	693b      	ldr	r3, [r7, #16]
 800776e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007772:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	695b      	ldr	r3, [r3, #20]
 8007778:	693a      	ldr	r2, [r7, #16]
 800777a:	4313      	orrs	r3, r2
 800777c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	699b      	ldr	r3, [r3, #24]
 8007782:	693a      	ldr	r2, [r7, #16]
 8007784:	4313      	orrs	r3, r2
 8007786:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	693a      	ldr	r2, [r7, #16]
 800778c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	68fa      	ldr	r2, [r7, #12]
 8007792:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	685a      	ldr	r2, [r3, #4]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	697a      	ldr	r2, [r7, #20]
 80077a0:	621a      	str	r2, [r3, #32]
}
 80077a2:	bf00      	nop
 80077a4:	3718      	adds	r7, #24
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}
 80077aa:	bf00      	nop
 80077ac:	40012c00 	.word	0x40012c00
 80077b0:	40013400 	.word	0x40013400
 80077b4:	080104b4 	.word	0x080104b4

080077b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b086      	sub	sp, #24
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
 80077c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6a1b      	ldr	r3, [r3, #32]
 80077c6:	f023 0210 	bic.w	r2, r3, #16
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6a1b      	ldr	r3, [r3, #32]
 80077d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	699b      	ldr	r3, [r3, #24]
 80077de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	021b      	lsls	r3, r3, #8
 80077f6:	68fa      	ldr	r2, [r7, #12]
 80077f8:	4313      	orrs	r3, r2
 80077fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80077fc:	697b      	ldr	r3, [r7, #20]
 80077fe:	f023 0320 	bic.w	r3, r3, #32
 8007802:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	689b      	ldr	r3, [r3, #8]
 8007808:	011b      	lsls	r3, r3, #4
 800780a:	697a      	ldr	r2, [r7, #20]
 800780c:	4313      	orrs	r3, r2
 800780e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	4a35      	ldr	r2, [pc, #212]	; (80078e8 <TIM_OC2_SetConfig+0x130>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d003      	beq.n	8007820 <TIM_OC2_SetConfig+0x68>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	4a34      	ldr	r2, [pc, #208]	; (80078ec <TIM_OC2_SetConfig+0x134>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d11a      	bne.n	8007856 <TIM_OC2_SetConfig+0x9e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	68db      	ldr	r3, [r3, #12]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d008      	beq.n	800783a <TIM_OC2_SetConfig+0x82>
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	68db      	ldr	r3, [r3, #12]
 800782c:	2b08      	cmp	r3, #8
 800782e:	d004      	beq.n	800783a <TIM_OC2_SetConfig+0x82>
 8007830:	f641 218c 	movw	r1, #6796	; 0x1a8c
 8007834:	482e      	ldr	r0, [pc, #184]	; (80078f0 <TIM_OC2_SetConfig+0x138>)
 8007836:	f7fa fd07 	bl	8002248 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007840:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	68db      	ldr	r3, [r3, #12]
 8007846:	011b      	lsls	r3, r3, #4
 8007848:	697a      	ldr	r2, [r7, #20]
 800784a:	4313      	orrs	r3, r2
 800784c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007854:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	4a23      	ldr	r2, [pc, #140]	; (80078e8 <TIM_OC2_SetConfig+0x130>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d003      	beq.n	8007866 <TIM_OC2_SetConfig+0xae>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	4a22      	ldr	r2, [pc, #136]	; (80078ec <TIM_OC2_SetConfig+0x134>)
 8007862:	4293      	cmp	r3, r2
 8007864:	d12f      	bne.n	80078c6 <TIM_OC2_SetConfig+0x10e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	699b      	ldr	r3, [r3, #24]
 800786a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800786e:	d008      	beq.n	8007882 <TIM_OC2_SetConfig+0xca>
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	699b      	ldr	r3, [r3, #24]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d004      	beq.n	8007882 <TIM_OC2_SetConfig+0xca>
 8007878:	f641 219a 	movw	r1, #6810	; 0x1a9a
 800787c:	481c      	ldr	r0, [pc, #112]	; (80078f0 <TIM_OC2_SetConfig+0x138>)
 800787e:	f7fa fce3 	bl	8002248 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	695b      	ldr	r3, [r3, #20]
 8007886:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800788a:	d008      	beq.n	800789e <TIM_OC2_SetConfig+0xe6>
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	695b      	ldr	r3, [r3, #20]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d004      	beq.n	800789e <TIM_OC2_SetConfig+0xe6>
 8007894:	f641 219b 	movw	r1, #6811	; 0x1a9b
 8007898:	4815      	ldr	r0, [pc, #84]	; (80078f0 <TIM_OC2_SetConfig+0x138>)
 800789a:	f7fa fcd5 	bl	8002248 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80078a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80078a6:	693b      	ldr	r3, [r7, #16]
 80078a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80078ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	695b      	ldr	r3, [r3, #20]
 80078b2:	009b      	lsls	r3, r3, #2
 80078b4:	693a      	ldr	r2, [r7, #16]
 80078b6:	4313      	orrs	r3, r2
 80078b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	699b      	ldr	r3, [r3, #24]
 80078be:	009b      	lsls	r3, r3, #2
 80078c0:	693a      	ldr	r2, [r7, #16]
 80078c2:	4313      	orrs	r3, r2
 80078c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	693a      	ldr	r2, [r7, #16]
 80078ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	68fa      	ldr	r2, [r7, #12]
 80078d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	685a      	ldr	r2, [r3, #4]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	697a      	ldr	r2, [r7, #20]
 80078de:	621a      	str	r2, [r3, #32]
}
 80078e0:	bf00      	nop
 80078e2:	3718      	adds	r7, #24
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}
 80078e8:	40012c00 	.word	0x40012c00
 80078ec:	40013400 	.word	0x40013400
 80078f0:	080104b4 	.word	0x080104b4

080078f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b086      	sub	sp, #24
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
 80078fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6a1b      	ldr	r3, [r3, #32]
 8007902:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6a1b      	ldr	r3, [r3, #32]
 800790e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	685b      	ldr	r3, [r3, #4]
 8007914:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	69db      	ldr	r3, [r3, #28]
 800791a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007922:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	f023 0303 	bic.w	r3, r3, #3
 800792a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	68fa      	ldr	r2, [r7, #12]
 8007932:	4313      	orrs	r3, r2
 8007934:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800793c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	689b      	ldr	r3, [r3, #8]
 8007942:	021b      	lsls	r3, r3, #8
 8007944:	697a      	ldr	r2, [r7, #20]
 8007946:	4313      	orrs	r3, r2
 8007948:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	4a35      	ldr	r2, [pc, #212]	; (8007a24 <TIM_OC3_SetConfig+0x130>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d003      	beq.n	800795a <TIM_OC3_SetConfig+0x66>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	4a34      	ldr	r2, [pc, #208]	; (8007a28 <TIM_OC3_SetConfig+0x134>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d11a      	bne.n	8007990 <TIM_OC3_SetConfig+0x9c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	68db      	ldr	r3, [r3, #12]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d008      	beq.n	8007974 <TIM_OC3_SetConfig+0x80>
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	68db      	ldr	r3, [r3, #12]
 8007966:	2b08      	cmp	r3, #8
 8007968:	d004      	beq.n	8007974 <TIM_OC3_SetConfig+0x80>
 800796a:	f641 21d7 	movw	r1, #6871	; 0x1ad7
 800796e:	482f      	ldr	r0, [pc, #188]	; (8007a2c <TIM_OC3_SetConfig+0x138>)
 8007970:	f7fa fc6a 	bl	8002248 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007974:	697b      	ldr	r3, [r7, #20]
 8007976:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800797a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	68db      	ldr	r3, [r3, #12]
 8007980:	021b      	lsls	r3, r3, #8
 8007982:	697a      	ldr	r2, [r7, #20]
 8007984:	4313      	orrs	r3, r2
 8007986:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800798e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	4a24      	ldr	r2, [pc, #144]	; (8007a24 <TIM_OC3_SetConfig+0x130>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d003      	beq.n	80079a0 <TIM_OC3_SetConfig+0xac>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	4a23      	ldr	r2, [pc, #140]	; (8007a28 <TIM_OC3_SetConfig+0x134>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d12f      	bne.n	8007a00 <TIM_OC3_SetConfig+0x10c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	699b      	ldr	r3, [r3, #24]
 80079a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079a8:	d008      	beq.n	80079bc <TIM_OC3_SetConfig+0xc8>
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	699b      	ldr	r3, [r3, #24]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d004      	beq.n	80079bc <TIM_OC3_SetConfig+0xc8>
 80079b2:	f641 21e4 	movw	r1, #6884	; 0x1ae4
 80079b6:	481d      	ldr	r0, [pc, #116]	; (8007a2c <TIM_OC3_SetConfig+0x138>)
 80079b8:	f7fa fc46 	bl	8002248 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	695b      	ldr	r3, [r3, #20]
 80079c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079c4:	d008      	beq.n	80079d8 <TIM_OC3_SetConfig+0xe4>
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	695b      	ldr	r3, [r3, #20]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d004      	beq.n	80079d8 <TIM_OC3_SetConfig+0xe4>
 80079ce:	f641 21e5 	movw	r1, #6885	; 0x1ae5
 80079d2:	4816      	ldr	r0, [pc, #88]	; (8007a2c <TIM_OC3_SetConfig+0x138>)
 80079d4:	f7fa fc38 	bl	8002248 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80079d8:	693b      	ldr	r3, [r7, #16]
 80079da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80079de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80079e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	695b      	ldr	r3, [r3, #20]
 80079ec:	011b      	lsls	r3, r3, #4
 80079ee:	693a      	ldr	r2, [r7, #16]
 80079f0:	4313      	orrs	r3, r2
 80079f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	699b      	ldr	r3, [r3, #24]
 80079f8:	011b      	lsls	r3, r3, #4
 80079fa:	693a      	ldr	r2, [r7, #16]
 80079fc:	4313      	orrs	r3, r2
 80079fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	693a      	ldr	r2, [r7, #16]
 8007a04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	68fa      	ldr	r2, [r7, #12]
 8007a0a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	685a      	ldr	r2, [r3, #4]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	697a      	ldr	r2, [r7, #20]
 8007a18:	621a      	str	r2, [r3, #32]
}
 8007a1a:	bf00      	nop
 8007a1c:	3718      	adds	r7, #24
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}
 8007a22:	bf00      	nop
 8007a24:	40012c00 	.word	0x40012c00
 8007a28:	40013400 	.word	0x40013400
 8007a2c:	080104b4 	.word	0x080104b4

08007a30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b086      	sub	sp, #24
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
 8007a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6a1b      	ldr	r3, [r3, #32]
 8007a3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6a1b      	ldr	r3, [r3, #32]
 8007a4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	685b      	ldr	r3, [r3, #4]
 8007a50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	69db      	ldr	r3, [r3, #28]
 8007a56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	021b      	lsls	r3, r3, #8
 8007a6e:	68fa      	ldr	r2, [r7, #12]
 8007a70:	4313      	orrs	r3, r2
 8007a72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007a7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	689b      	ldr	r3, [r3, #8]
 8007a80:	031b      	lsls	r3, r3, #12
 8007a82:	693a      	ldr	r2, [r7, #16]
 8007a84:	4313      	orrs	r3, r2
 8007a86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	4a18      	ldr	r2, [pc, #96]	; (8007aec <TIM_OC4_SetConfig+0xbc>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d003      	beq.n	8007a98 <TIM_OC4_SetConfig+0x68>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	4a17      	ldr	r2, [pc, #92]	; (8007af0 <TIM_OC4_SetConfig+0xc0>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d117      	bne.n	8007ac8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	695b      	ldr	r3, [r3, #20]
 8007a9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007aa0:	d008      	beq.n	8007ab4 <TIM_OC4_SetConfig+0x84>
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	695b      	ldr	r3, [r3, #20]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d004      	beq.n	8007ab4 <TIM_OC4_SetConfig+0x84>
 8007aaa:	f641 3123 	movw	r1, #6947	; 0x1b23
 8007aae:	4811      	ldr	r0, [pc, #68]	; (8007af4 <TIM_OC4_SetConfig+0xc4>)
 8007ab0:	f7fa fbca 	bl	8002248 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007aba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	695b      	ldr	r3, [r3, #20]
 8007ac0:	019b      	lsls	r3, r3, #6
 8007ac2:	697a      	ldr	r2, [r7, #20]
 8007ac4:	4313      	orrs	r3, r2
 8007ac6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	697a      	ldr	r2, [r7, #20]
 8007acc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	68fa      	ldr	r2, [r7, #12]
 8007ad2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	685a      	ldr	r2, [r3, #4]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	693a      	ldr	r2, [r7, #16]
 8007ae0:	621a      	str	r2, [r3, #32]
}
 8007ae2:	bf00      	nop
 8007ae4:	3718      	adds	r7, #24
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}
 8007aea:	bf00      	nop
 8007aec:	40012c00 	.word	0x40012c00
 8007af0:	40013400 	.word	0x40013400
 8007af4:	080104b4 	.word	0x080104b4

08007af8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007af8:	b480      	push	{r7}
 8007afa:	b087      	sub	sp, #28
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	60f8      	str	r0, [r7, #12]
 8007b00:	60b9      	str	r1, [r7, #8]
 8007b02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	6a1b      	ldr	r3, [r3, #32]
 8007b08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	6a1b      	ldr	r3, [r3, #32]
 8007b0e:	f023 0201 	bic.w	r2, r3, #1
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	699b      	ldr	r3, [r3, #24]
 8007b1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007b22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	011b      	lsls	r3, r3, #4
 8007b28:	693a      	ldr	r2, [r7, #16]
 8007b2a:	4313      	orrs	r3, r2
 8007b2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	f023 030a 	bic.w	r3, r3, #10
 8007b34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007b36:	697a      	ldr	r2, [r7, #20]
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	693a      	ldr	r2, [r7, #16]
 8007b42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	697a      	ldr	r2, [r7, #20]
 8007b48:	621a      	str	r2, [r3, #32]
}
 8007b4a:	bf00      	nop
 8007b4c:	371c      	adds	r7, #28
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bc80      	pop	{r7}
 8007b52:	4770      	bx	lr

08007b54 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b087      	sub	sp, #28
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	60f8      	str	r0, [r7, #12]
 8007b5c:	60b9      	str	r1, [r7, #8]
 8007b5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	6a1b      	ldr	r3, [r3, #32]
 8007b64:	f023 0210 	bic.w	r2, r3, #16
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	699b      	ldr	r3, [r3, #24]
 8007b70:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	6a1b      	ldr	r3, [r3, #32]
 8007b76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007b7e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	031b      	lsls	r3, r3, #12
 8007b84:	697a      	ldr	r2, [r7, #20]
 8007b86:	4313      	orrs	r3, r2
 8007b88:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007b8a:	693b      	ldr	r3, [r7, #16]
 8007b8c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007b90:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	011b      	lsls	r3, r3, #4
 8007b96:	693a      	ldr	r2, [r7, #16]
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	697a      	ldr	r2, [r7, #20]
 8007ba0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	693a      	ldr	r2, [r7, #16]
 8007ba6:	621a      	str	r2, [r3, #32]
}
 8007ba8:	bf00      	nop
 8007baa:	371c      	adds	r7, #28
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bc80      	pop	{r7}
 8007bb0:	4770      	bx	lr

08007bb2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007bb2:	b480      	push	{r7}
 8007bb4:	b085      	sub	sp, #20
 8007bb6:	af00      	add	r7, sp, #0
 8007bb8:	6078      	str	r0, [r7, #4]
 8007bba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	689b      	ldr	r3, [r3, #8]
 8007bc0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bc8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007bca:	683a      	ldr	r2, [r7, #0]
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	f043 0307 	orr.w	r3, r3, #7
 8007bd4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	68fa      	ldr	r2, [r7, #12]
 8007bda:	609a      	str	r2, [r3, #8]
}
 8007bdc:	bf00      	nop
 8007bde:	3714      	adds	r7, #20
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bc80      	pop	{r7}
 8007be4:	4770      	bx	lr

08007be6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007be6:	b480      	push	{r7}
 8007be8:	b087      	sub	sp, #28
 8007bea:	af00      	add	r7, sp, #0
 8007bec:	60f8      	str	r0, [r7, #12]
 8007bee:	60b9      	str	r1, [r7, #8]
 8007bf0:	607a      	str	r2, [r7, #4]
 8007bf2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	689b      	ldr	r3, [r3, #8]
 8007bf8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007c00:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	021a      	lsls	r2, r3, #8
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	431a      	orrs	r2, r3
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	4313      	orrs	r3, r2
 8007c0e:	697a      	ldr	r2, [r7, #20]
 8007c10:	4313      	orrs	r3, r2
 8007c12:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	697a      	ldr	r2, [r7, #20]
 8007c18:	609a      	str	r2, [r3, #8]
}
 8007c1a:	bf00      	nop
 8007c1c:	371c      	adds	r7, #28
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bc80      	pop	{r7}
 8007c22:	4770      	bx	lr

08007c24 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b086      	sub	sp, #24
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	60f8      	str	r0, [r7, #12]
 8007c2c:	60b9      	str	r1, [r7, #8]
 8007c2e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	4a26      	ldr	r2, [pc, #152]	; (8007ccc <TIM_CCxChannelCmd+0xa8>)
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d018      	beq.n	8007c6a <TIM_CCxChannelCmd+0x46>
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	4a25      	ldr	r2, [pc, #148]	; (8007cd0 <TIM_CCxChannelCmd+0xac>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d014      	beq.n	8007c6a <TIM_CCxChannelCmd+0x46>
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c46:	d010      	beq.n	8007c6a <TIM_CCxChannelCmd+0x46>
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	4a22      	ldr	r2, [pc, #136]	; (8007cd4 <TIM_CCxChannelCmd+0xb0>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d00c      	beq.n	8007c6a <TIM_CCxChannelCmd+0x46>
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	4a21      	ldr	r2, [pc, #132]	; (8007cd8 <TIM_CCxChannelCmd+0xb4>)
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d008      	beq.n	8007c6a <TIM_CCxChannelCmd+0x46>
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	4a20      	ldr	r2, [pc, #128]	; (8007cdc <TIM_CCxChannelCmd+0xb8>)
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d004      	beq.n	8007c6a <TIM_CCxChannelCmd+0x46>
 8007c60:	f641 5109 	movw	r1, #7433	; 0x1d09
 8007c64:	481e      	ldr	r0, [pc, #120]	; (8007ce0 <TIM_CCxChannelCmd+0xbc>)
 8007c66:	f7fa faef 	bl	8002248 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d010      	beq.n	8007c92 <TIM_CCxChannelCmd+0x6e>
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	2b04      	cmp	r3, #4
 8007c74:	d00d      	beq.n	8007c92 <TIM_CCxChannelCmd+0x6e>
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	2b08      	cmp	r3, #8
 8007c7a:	d00a      	beq.n	8007c92 <TIM_CCxChannelCmd+0x6e>
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	2b0c      	cmp	r3, #12
 8007c80:	d007      	beq.n	8007c92 <TIM_CCxChannelCmd+0x6e>
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	2b3c      	cmp	r3, #60	; 0x3c
 8007c86:	d004      	beq.n	8007c92 <TIM_CCxChannelCmd+0x6e>
 8007c88:	f641 510a 	movw	r1, #7434	; 0x1d0a
 8007c8c:	4814      	ldr	r0, [pc, #80]	; (8007ce0 <TIM_CCxChannelCmd+0xbc>)
 8007c8e:	f7fa fadb 	bl	8002248 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	f003 031f 	and.w	r3, r3, #31
 8007c98:	2201      	movs	r2, #1
 8007c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8007c9e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	6a1a      	ldr	r2, [r3, #32]
 8007ca4:	697b      	ldr	r3, [r7, #20]
 8007ca6:	43db      	mvns	r3, r3
 8007ca8:	401a      	ands	r2, r3
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	6a1a      	ldr	r2, [r3, #32]
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	f003 031f 	and.w	r3, r3, #31
 8007cb8:	6879      	ldr	r1, [r7, #4]
 8007cba:	fa01 f303 	lsl.w	r3, r1, r3
 8007cbe:	431a      	orrs	r2, r3
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	621a      	str	r2, [r3, #32]
}
 8007cc4:	bf00      	nop
 8007cc6:	3718      	adds	r7, #24
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}
 8007ccc:	40012c00 	.word	0x40012c00
 8007cd0:	40013400 	.word	0x40013400
 8007cd4:	40000400 	.word	0x40000400
 8007cd8:	40000800 	.word	0x40000800
 8007cdc:	40000c00 	.word	0x40000c00
 8007ce0:	080104b4 	.word	0x080104b4

08007ce4 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b083      	sub	sp, #12
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	4a1c      	ldr	r2, [pc, #112]	; (8007d60 <TIM_ResetCallback+0x7c>)
 8007cf0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	4a1b      	ldr	r2, [pc, #108]	; (8007d64 <TIM_ResetCallback+0x80>)
 8007cf8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	4a1a      	ldr	r2, [pc, #104]	; (8007d68 <TIM_ResetCallback+0x84>)
 8007d00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	4a19      	ldr	r2, [pc, #100]	; (8007d6c <TIM_ResetCallback+0x88>)
 8007d08:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	4a18      	ldr	r2, [pc, #96]	; (8007d70 <TIM_ResetCallback+0x8c>)
 8007d10:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	4a17      	ldr	r2, [pc, #92]	; (8007d74 <TIM_ResetCallback+0x90>)
 8007d18:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	4a16      	ldr	r2, [pc, #88]	; (8007d78 <TIM_ResetCallback+0x94>)
 8007d20:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	4a15      	ldr	r2, [pc, #84]	; (8007d7c <TIM_ResetCallback+0x98>)
 8007d28:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	4a14      	ldr	r2, [pc, #80]	; (8007d80 <TIM_ResetCallback+0x9c>)
 8007d30:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	4a13      	ldr	r2, [pc, #76]	; (8007d84 <TIM_ResetCallback+0xa0>)
 8007d38:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	4a12      	ldr	r2, [pc, #72]	; (8007d88 <TIM_ResetCallback+0xa4>)
 8007d40:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	4a11      	ldr	r2, [pc, #68]	; (8007d8c <TIM_ResetCallback+0xa8>)
 8007d48:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	4a10      	ldr	r2, [pc, #64]	; (8007d90 <TIM_ResetCallback+0xac>)
 8007d50:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8007d54:	bf00      	nop
 8007d56:	370c      	adds	r7, #12
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bc80      	pop	{r7}
 8007d5c:	4770      	bx	lr
 8007d5e:	bf00      	nop
 8007d60:	080021c5 	.word	0x080021c5
 8007d64:	08007501 	.word	0x08007501
 8007d68:	0800755b 	.word	0x0800755b
 8007d6c:	0800756d 	.word	0x0800756d
 8007d70:	0800217d 	.word	0x0800217d
 8007d74:	08007525 	.word	0x08007525
 8007d78:	08007513 	.word	0x08007513
 8007d7c:	08007537 	.word	0x08007537
 8007d80:	08007549 	.word	0x08007549
 8007d84:	0800757f 	.word	0x0800757f
 8007d88:	080080cd 	.word	0x080080cd
 8007d8c:	080080df 	.word	0x080080df
 8007d90:	080080f1 	.word	0x080080f1

08007d94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b084      	sub	sp, #16
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
 8007d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	4a5c      	ldr	r2, [pc, #368]	; (8007f14 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d027      	beq.n	8007df8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4a5a      	ldr	r2, [pc, #360]	; (8007f18 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d022      	beq.n	8007df8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dba:	d01d      	beq.n	8007df8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4a56      	ldr	r2, [pc, #344]	; (8007f1c <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d018      	beq.n	8007df8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	4a55      	ldr	r2, [pc, #340]	; (8007f20 <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d013      	beq.n	8007df8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	4a53      	ldr	r2, [pc, #332]	; (8007f24 <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d00e      	beq.n	8007df8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	4a52      	ldr	r2, [pc, #328]	; (8007f28 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d009      	beq.n	8007df8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4a50      	ldr	r2, [pc, #320]	; (8007f2c <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d004      	beq.n	8007df8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007dee:	f240 7186 	movw	r1, #1926	; 0x786
 8007df2:	484f      	ldr	r0, [pc, #316]	; (8007f30 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 8007df4:	f7fa fa28 	bl	8002248 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d020      	beq.n	8007e42 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	2b10      	cmp	r3, #16
 8007e06:	d01c      	beq.n	8007e42 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	2b20      	cmp	r3, #32
 8007e0e:	d018      	beq.n	8007e42 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	2b30      	cmp	r3, #48	; 0x30
 8007e16:	d014      	beq.n	8007e42 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	2b40      	cmp	r3, #64	; 0x40
 8007e1e:	d010      	beq.n	8007e42 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	2b50      	cmp	r3, #80	; 0x50
 8007e26:	d00c      	beq.n	8007e42 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	2b60      	cmp	r3, #96	; 0x60
 8007e2e:	d008      	beq.n	8007e42 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	2b70      	cmp	r3, #112	; 0x70
 8007e36:	d004      	beq.n	8007e42 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007e38:	f240 7187 	movw	r1, #1927	; 0x787
 8007e3c:	483c      	ldr	r0, [pc, #240]	; (8007f30 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 8007e3e:	f7fa fa03 	bl	8002248 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	685b      	ldr	r3, [r3, #4]
 8007e46:	2b80      	cmp	r3, #128	; 0x80
 8007e48:	d008      	beq.n	8007e5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	685b      	ldr	r3, [r3, #4]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d004      	beq.n	8007e5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007e52:	f44f 61f1 	mov.w	r1, #1928	; 0x788
 8007e56:	4836      	ldr	r0, [pc, #216]	; (8007f30 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 8007e58:	f7fa f9f6 	bl	8002248 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e62:	2b01      	cmp	r3, #1
 8007e64:	d101      	bne.n	8007e6a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007e66:	2302      	movs	r3, #2
 8007e68:	e050      	b.n	8007f0c <HAL_TIMEx_MasterConfigSynchronization+0x178>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2201      	movs	r2, #1
 8007e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2202      	movs	r2, #2
 8007e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	685b      	ldr	r3, [r3, #4]
 8007e80:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	689b      	ldr	r3, [r3, #8]
 8007e88:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e90:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	68fa      	ldr	r2, [r7, #12]
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	68fa      	ldr	r2, [r7, #12]
 8007ea2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	4a1a      	ldr	r2, [pc, #104]	; (8007f14 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d018      	beq.n	8007ee0 <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	4a19      	ldr	r2, [pc, #100]	; (8007f18 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d013      	beq.n	8007ee0 <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ec0:	d00e      	beq.n	8007ee0 <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	4a15      	ldr	r2, [pc, #84]	; (8007f1c <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d009      	beq.n	8007ee0 <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4a13      	ldr	r2, [pc, #76]	; (8007f20 <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d004      	beq.n	8007ee0 <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	4a12      	ldr	r2, [pc, #72]	; (8007f24 <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d10c      	bne.n	8007efa <HAL_TIMEx_MasterConfigSynchronization+0x166>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ee6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	685b      	ldr	r3, [r3, #4]
 8007eec:	68ba      	ldr	r2, [r7, #8]
 8007eee:	4313      	orrs	r3, r2
 8007ef0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	68ba      	ldr	r2, [r7, #8]
 8007ef8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2201      	movs	r2, #1
 8007efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2200      	movs	r2, #0
 8007f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007f0a:	2300      	movs	r3, #0
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	3710      	adds	r7, #16
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}
 8007f14:	40012c00 	.word	0x40012c00
 8007f18:	40013400 	.word	0x40013400
 8007f1c:	40000400 	.word	0x40000400
 8007f20:	40000800 	.word	0x40000800
 8007f24:	40000c00 	.word	0x40000c00
 8007f28:	40001000 	.word	0x40001000
 8007f2c:	40001400 	.word	0x40001400
 8007f30:	080104ec 	.word	0x080104ec

08007f34 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b084      	sub	sp, #16
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
 8007f3c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	4a5e      	ldr	r2, [pc, #376]	; (80080c0 <HAL_TIMEx_ConfigBreakDeadTime+0x18c>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d009      	beq.n	8007f60 <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4a5c      	ldr	r2, [pc, #368]	; (80080c4 <HAL_TIMEx_ConfigBreakDeadTime+0x190>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d004      	beq.n	8007f60 <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 8007f56:	f240 71c3 	movw	r1, #1987	; 0x7c3
 8007f5a:	485b      	ldr	r0, [pc, #364]	; (80080c8 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8007f5c:	f7fa f974 	bl	8002248 <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f68:	d008      	beq.n	8007f7c <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d004      	beq.n	8007f7c <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 8007f72:	f240 71c4 	movw	r1, #1988	; 0x7c4
 8007f76:	4854      	ldr	r0, [pc, #336]	; (80080c8 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8007f78:	f7fa f966 	bl	8002248 <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	685b      	ldr	r3, [r3, #4]
 8007f80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f84:	d008      	beq.n	8007f98 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	685b      	ldr	r3, [r3, #4]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d004      	beq.n	8007f98 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 8007f8e:	f240 71c5 	movw	r1, #1989	; 0x7c5
 8007f92:	484d      	ldr	r0, [pc, #308]	; (80080c8 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8007f94:	f7fa f958 	bl	8002248 <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	689b      	ldr	r3, [r3, #8]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d013      	beq.n	8007fc8 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	689b      	ldr	r3, [r3, #8]
 8007fa4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fa8:	d00e      	beq.n	8007fc8 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	689b      	ldr	r3, [r3, #8]
 8007fae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007fb2:	d009      	beq.n	8007fc8 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	689b      	ldr	r3, [r3, #8]
 8007fb8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007fbc:	d004      	beq.n	8007fc8 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 8007fbe:	f240 71c6 	movw	r1, #1990	; 0x7c6
 8007fc2:	4841      	ldr	r0, [pc, #260]	; (80080c8 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8007fc4:	f7fa f940 	bl	8002248 <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	68db      	ldr	r3, [r3, #12]
 8007fcc:	2bff      	cmp	r3, #255	; 0xff
 8007fce:	d904      	bls.n	8007fda <HAL_TIMEx_ConfigBreakDeadTime+0xa6>
 8007fd0:	f240 71c7 	movw	r1, #1991	; 0x7c7
 8007fd4:	483c      	ldr	r0, [pc, #240]	; (80080c8 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8007fd6:	f7fa f937 	bl	8002248 <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	691b      	ldr	r3, [r3, #16]
 8007fde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fe2:	d008      	beq.n	8007ff6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	691b      	ldr	r3, [r3, #16]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d004      	beq.n	8007ff6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8007fec:	f44f 61f9 	mov.w	r1, #1992	; 0x7c8
 8007ff0:	4835      	ldr	r0, [pc, #212]	; (80080c8 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8007ff2:	f7fa f929 	bl	8002248 <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	695b      	ldr	r3, [r3, #20]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d009      	beq.n	8008012 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	695b      	ldr	r3, [r3, #20]
 8008002:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008006:	d004      	beq.n	8008012 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8008008:	f240 71c9 	movw	r1, #1993	; 0x7c9
 800800c:	482e      	ldr	r0, [pc, #184]	; (80080c8 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800800e:	f7fa f91b 	bl	8002248 <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	69db      	ldr	r3, [r3, #28]
 8008016:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800801a:	d008      	beq.n	800802e <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	69db      	ldr	r3, [r3, #28]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d004      	beq.n	800802e <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 8008024:	f240 71ca 	movw	r1, #1994	; 0x7ca
 8008028:	4827      	ldr	r0, [pc, #156]	; (80080c8 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800802a:	f7fa f90d 	bl	8002248 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008034:	2b01      	cmp	r3, #1
 8008036:	d101      	bne.n	800803c <HAL_TIMEx_ConfigBreakDeadTime+0x108>
 8008038:	2302      	movs	r3, #2
 800803a:	e03d      	b.n	80080b8 <HAL_TIMEx_ConfigBreakDeadTime+0x184>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2201      	movs	r2, #1
 8008040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	68db      	ldr	r3, [r3, #12]
 800804e:	4313      	orrs	r3, r2
 8008050:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	689b      	ldr	r3, [r3, #8]
 800805c:	4313      	orrs	r3, r2
 800805e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	685b      	ldr	r3, [r3, #4]
 800806a:	4313      	orrs	r3, r2
 800806c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4313      	orrs	r3, r2
 800807a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	691b      	ldr	r3, [r3, #16]
 8008086:	4313      	orrs	r3, r2
 8008088:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	695b      	ldr	r3, [r3, #20]
 8008094:	4313      	orrs	r3, r2
 8008096:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	69db      	ldr	r3, [r3, #28]
 80080a2:	4313      	orrs	r3, r2
 80080a4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	68fa      	ldr	r2, [r7, #12]
 80080ac:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2200      	movs	r2, #0
 80080b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80080b6:	2300      	movs	r3, #0
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	3710      	adds	r7, #16
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd80      	pop	{r7, pc}
 80080c0:	40012c00 	.word	0x40012c00
 80080c4:	40013400 	.word	0x40013400
 80080c8:	080104ec 	.word	0x080104ec

080080cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80080cc:	b480      	push	{r7}
 80080ce:	b083      	sub	sp, #12
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80080d4:	bf00      	nop
 80080d6:	370c      	adds	r7, #12
 80080d8:	46bd      	mov	sp, r7
 80080da:	bc80      	pop	{r7}
 80080dc:	4770      	bx	lr

080080de <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80080de:	b480      	push	{r7}
 80080e0:	b083      	sub	sp, #12
 80080e2:	af00      	add	r7, sp, #0
 80080e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 80080e6:	bf00      	nop
 80080e8:	370c      	adds	r7, #12
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bc80      	pop	{r7}
 80080ee:	4770      	bx	lr

080080f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b083      	sub	sp, #12
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80080f8:	bf00      	nop
 80080fa:	370c      	adds	r7, #12
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bc80      	pop	{r7}
 8008100:	4770      	bx	lr
	...

08008104 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b082      	sub	sp, #8
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d101      	bne.n	8008116 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008112:	2301      	movs	r3, #1
 8008114:	e0a7      	b.n	8008266 <HAL_UART_Init+0x162>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	699b      	ldr	r3, [r3, #24]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d02c      	beq.n	8008178 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2 and USART3 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	4a53      	ldr	r2, [pc, #332]	; (8008270 <HAL_UART_Init+0x16c>)
 8008124:	4293      	cmp	r3, r2
 8008126:	d00e      	beq.n	8008146 <HAL_UART_Init+0x42>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4a51      	ldr	r2, [pc, #324]	; (8008274 <HAL_UART_Init+0x170>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d009      	beq.n	8008146 <HAL_UART_Init+0x42>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	4a50      	ldr	r2, [pc, #320]	; (8008278 <HAL_UART_Init+0x174>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d004      	beq.n	8008146 <HAL_UART_Init+0x42>
 800813c:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 8008140:	484e      	ldr	r0, [pc, #312]	; (800827c <HAL_UART_Init+0x178>)
 8008142:	f7fa f881 	bl	8002248 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	699b      	ldr	r3, [r3, #24]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d032      	beq.n	80081b4 <HAL_UART_Init+0xb0>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	699b      	ldr	r3, [r3, #24]
 8008152:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008156:	d02d      	beq.n	80081b4 <HAL_UART_Init+0xb0>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	699b      	ldr	r3, [r3, #24]
 800815c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008160:	d028      	beq.n	80081b4 <HAL_UART_Init+0xb0>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	699b      	ldr	r3, [r3, #24]
 8008166:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800816a:	d023      	beq.n	80081b4 <HAL_UART_Init+0xb0>
 800816c:	f240 116d 	movw	r1, #365	; 0x16d
 8008170:	4842      	ldr	r0, [pc, #264]	; (800827c <HAL_UART_Init+0x178>)
 8008172:	f7fa f869 	bl	8002248 <assert_failed>
 8008176:	e01d      	b.n	80081b4 <HAL_UART_Init+0xb0>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	4a3c      	ldr	r2, [pc, #240]	; (8008270 <HAL_UART_Init+0x16c>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d018      	beq.n	80081b4 <HAL_UART_Init+0xb0>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4a3b      	ldr	r2, [pc, #236]	; (8008274 <HAL_UART_Init+0x170>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d013      	beq.n	80081b4 <HAL_UART_Init+0xb0>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4a39      	ldr	r2, [pc, #228]	; (8008278 <HAL_UART_Init+0x174>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d00e      	beq.n	80081b4 <HAL_UART_Init+0xb0>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4a39      	ldr	r2, [pc, #228]	; (8008280 <HAL_UART_Init+0x17c>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d009      	beq.n	80081b4 <HAL_UART_Init+0xb0>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	4a37      	ldr	r2, [pc, #220]	; (8008284 <HAL_UART_Init+0x180>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d004      	beq.n	80081b4 <HAL_UART_Init+0xb0>
 80081aa:	f240 1171 	movw	r1, #369	; 0x171
 80081ae:	4833      	ldr	r0, [pc, #204]	; (800827c <HAL_UART_Init+0x178>)
 80081b0:	f7fa f84a 	bl	8002248 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	689b      	ldr	r3, [r3, #8]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d009      	beq.n	80081d0 <HAL_UART_Init+0xcc>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	689b      	ldr	r3, [r3, #8]
 80081c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081c4:	d004      	beq.n	80081d0 <HAL_UART_Init+0xcc>
 80081c6:	f240 1173 	movw	r1, #371	; 0x173
 80081ca:	482c      	ldr	r0, [pc, #176]	; (800827c <HAL_UART_Init+0x178>)
 80081cc:	f7fa f83c 	bl	8002248 <assert_failed>
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081d6:	b2db      	uxtb	r3, r3
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d111      	bne.n	8008200 <HAL_UART_Init+0xfc>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2200      	movs	r2, #0
 80081e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f000 fb05 	bl	80087f4 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d102      	bne.n	80081f8 <HAL_UART_Init+0xf4>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	4a24      	ldr	r2, [pc, #144]	; (8008288 <HAL_UART_Init+0x184>)
 80081f6:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2224      	movs	r2, #36	; 0x24
 8008204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	68da      	ldr	r2, [r3, #12]
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008216:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f000 fcf9 	bl	8008c10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	691a      	ldr	r2, [r3, #16]
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800822c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	695a      	ldr	r2, [r3, #20]
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800823c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	68da      	ldr	r2, [r3, #12]
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800824c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2200      	movs	r2, #0
 8008252:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2220      	movs	r2, #32
 8008258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2220      	movs	r2, #32
 8008260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008264:	2300      	movs	r3, #0
}
 8008266:	4618      	mov	r0, r3
 8008268:	3708      	adds	r7, #8
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}
 800826e:	bf00      	nop
 8008270:	40013800 	.word	0x40013800
 8008274:	40004400 	.word	0x40004400
 8008278:	40004800 	.word	0x40004800
 800827c:	08010528 	.word	0x08010528
 8008280:	40004c00 	.word	0x40004c00
 8008284:	40005000 	.word	0x40005000
 8008288:	080026dd 	.word	0x080026dd

0800828c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b08a      	sub	sp, #40	; 0x28
 8008290:	af02      	add	r7, sp, #8
 8008292:	60f8      	str	r0, [r7, #12]
 8008294:	60b9      	str	r1, [r7, #8]
 8008296:	603b      	str	r3, [r7, #0]
 8008298:	4613      	mov	r3, r2
 800829a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800829c:	2300      	movs	r3, #0
 800829e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082a6:	b2db      	uxtb	r3, r3
 80082a8:	2b20      	cmp	r3, #32
 80082aa:	d17c      	bne.n	80083a6 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d002      	beq.n	80082b8 <HAL_UART_Transmit+0x2c>
 80082b2:	88fb      	ldrh	r3, [r7, #6]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d101      	bne.n	80082bc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80082b8:	2301      	movs	r3, #1
 80082ba:	e075      	b.n	80083a8 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082c2:	2b01      	cmp	r3, #1
 80082c4:	d101      	bne.n	80082ca <HAL_UART_Transmit+0x3e>
 80082c6:	2302      	movs	r3, #2
 80082c8:	e06e      	b.n	80083a8 <HAL_UART_Transmit+0x11c>
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	2201      	movs	r2, #1
 80082ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	2200      	movs	r2, #0
 80082d6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	2221      	movs	r2, #33	; 0x21
 80082dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80082e0:	f7fa fc82 	bl	8002be8 <HAL_GetTick>
 80082e4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	88fa      	ldrh	r2, [r7, #6]
 80082ea:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	88fa      	ldrh	r2, [r7, #6]
 80082f0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	689b      	ldr	r3, [r3, #8]
 80082f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082fa:	d108      	bne.n	800830e <HAL_UART_Transmit+0x82>
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	691b      	ldr	r3, [r3, #16]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d104      	bne.n	800830e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008304:	2300      	movs	r3, #0
 8008306:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	61bb      	str	r3, [r7, #24]
 800830c:	e003      	b.n	8008316 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008312:	2300      	movs	r3, #0
 8008314:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	2200      	movs	r2, #0
 800831a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800831e:	e02a      	b.n	8008376 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	9300      	str	r3, [sp, #0]
 8008324:	697b      	ldr	r3, [r7, #20]
 8008326:	2200      	movs	r2, #0
 8008328:	2180      	movs	r1, #128	; 0x80
 800832a:	68f8      	ldr	r0, [r7, #12]
 800832c:	f000 fa98 	bl	8008860 <UART_WaitOnFlagUntilTimeout>
 8008330:	4603      	mov	r3, r0
 8008332:	2b00      	cmp	r3, #0
 8008334:	d001      	beq.n	800833a <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008336:	2303      	movs	r3, #3
 8008338:	e036      	b.n	80083a8 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800833a:	69fb      	ldr	r3, [r7, #28]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d10b      	bne.n	8008358 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008340:	69bb      	ldr	r3, [r7, #24]
 8008342:	881b      	ldrh	r3, [r3, #0]
 8008344:	461a      	mov	r2, r3
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800834e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008350:	69bb      	ldr	r3, [r7, #24]
 8008352:	3302      	adds	r3, #2
 8008354:	61bb      	str	r3, [r7, #24]
 8008356:	e007      	b.n	8008368 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008358:	69fb      	ldr	r3, [r7, #28]
 800835a:	781a      	ldrb	r2, [r3, #0]
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008362:	69fb      	ldr	r3, [r7, #28]
 8008364:	3301      	adds	r3, #1
 8008366:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800836c:	b29b      	uxth	r3, r3
 800836e:	3b01      	subs	r3, #1
 8008370:	b29a      	uxth	r2, r3
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800837a:	b29b      	uxth	r3, r3
 800837c:	2b00      	cmp	r3, #0
 800837e:	d1cf      	bne.n	8008320 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	9300      	str	r3, [sp, #0]
 8008384:	697b      	ldr	r3, [r7, #20]
 8008386:	2200      	movs	r2, #0
 8008388:	2140      	movs	r1, #64	; 0x40
 800838a:	68f8      	ldr	r0, [r7, #12]
 800838c:	f000 fa68 	bl	8008860 <UART_WaitOnFlagUntilTimeout>
 8008390:	4603      	mov	r3, r0
 8008392:	2b00      	cmp	r3, #0
 8008394:	d001      	beq.n	800839a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008396:	2303      	movs	r3, #3
 8008398:	e006      	b.n	80083a8 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	2220      	movs	r2, #32
 800839e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80083a2:	2300      	movs	r3, #0
 80083a4:	e000      	b.n	80083a8 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80083a6:	2302      	movs	r3, #2
  }
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	3720      	adds	r7, #32
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}

080083b0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b084      	sub	sp, #16
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	60f8      	str	r0, [r7, #12]
 80083b8:	60b9      	str	r1, [r7, #8]
 80083ba:	4613      	mov	r3, r2
 80083bc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80083c4:	b2db      	uxtb	r3, r3
 80083c6:	2b20      	cmp	r3, #32
 80083c8:	d11d      	bne.n	8008406 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d002      	beq.n	80083d6 <HAL_UART_Receive_IT+0x26>
 80083d0:	88fb      	ldrh	r3, [r7, #6]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d101      	bne.n	80083da <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80083d6:	2301      	movs	r3, #1
 80083d8:	e016      	b.n	8008408 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80083e0:	2b01      	cmp	r3, #1
 80083e2:	d101      	bne.n	80083e8 <HAL_UART_Receive_IT+0x38>
 80083e4:	2302      	movs	r3, #2
 80083e6:	e00f      	b.n	8008408 <HAL_UART_Receive_IT+0x58>
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	2201      	movs	r2, #1
 80083ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	2200      	movs	r2, #0
 80083f4:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80083f6:	88fb      	ldrh	r3, [r7, #6]
 80083f8:	461a      	mov	r2, r3
 80083fa:	68b9      	ldr	r1, [r7, #8]
 80083fc:	68f8      	ldr	r0, [r7, #12]
 80083fe:	f000 fa79 	bl	80088f4 <UART_Start_Receive_IT>
 8008402:	4603      	mov	r3, r0
 8008404:	e000      	b.n	8008408 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008406:	2302      	movs	r3, #2
  }
}
 8008408:	4618      	mov	r0, r3
 800840a:	3710      	adds	r7, #16
 800840c:	46bd      	mov	sp, r7
 800840e:	bd80      	pop	{r7, pc}

08008410 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b08a      	sub	sp, #40	; 0x28
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	68db      	ldr	r3, [r3, #12]
 8008426:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	695b      	ldr	r3, [r3, #20]
 800842e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8008430:	2300      	movs	r3, #0
 8008432:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8008434:	2300      	movs	r3, #0
 8008436:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800843a:	f003 030f 	and.w	r3, r3, #15
 800843e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8008440:	69bb      	ldr	r3, [r7, #24]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d10d      	bne.n	8008462 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008448:	f003 0320 	and.w	r3, r3, #32
 800844c:	2b00      	cmp	r3, #0
 800844e:	d008      	beq.n	8008462 <HAL_UART_IRQHandler+0x52>
 8008450:	6a3b      	ldr	r3, [r7, #32]
 8008452:	f003 0320 	and.w	r3, r3, #32
 8008456:	2b00      	cmp	r3, #0
 8008458:	d003      	beq.n	8008462 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f000 fb2c 	bl	8008ab8 <UART_Receive_IT>
      return;
 8008460:	e180      	b.n	8008764 <HAL_UART_IRQHandler+0x354>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008462:	69bb      	ldr	r3, [r7, #24]
 8008464:	2b00      	cmp	r3, #0
 8008466:	f000 80b4 	beq.w	80085d2 <HAL_UART_IRQHandler+0x1c2>
 800846a:	69fb      	ldr	r3, [r7, #28]
 800846c:	f003 0301 	and.w	r3, r3, #1
 8008470:	2b00      	cmp	r3, #0
 8008472:	d105      	bne.n	8008480 <HAL_UART_IRQHandler+0x70>
 8008474:	6a3b      	ldr	r3, [r7, #32]
 8008476:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800847a:	2b00      	cmp	r3, #0
 800847c:	f000 80a9 	beq.w	80085d2 <HAL_UART_IRQHandler+0x1c2>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008482:	f003 0301 	and.w	r3, r3, #1
 8008486:	2b00      	cmp	r3, #0
 8008488:	d00a      	beq.n	80084a0 <HAL_UART_IRQHandler+0x90>
 800848a:	6a3b      	ldr	r3, [r7, #32]
 800848c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008490:	2b00      	cmp	r3, #0
 8008492:	d005      	beq.n	80084a0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008498:	f043 0201 	orr.w	r2, r3, #1
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80084a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a2:	f003 0304 	and.w	r3, r3, #4
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d00a      	beq.n	80084c0 <HAL_UART_IRQHandler+0xb0>
 80084aa:	69fb      	ldr	r3, [r7, #28]
 80084ac:	f003 0301 	and.w	r3, r3, #1
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d005      	beq.n	80084c0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084b8:	f043 0202 	orr.w	r2, r3, #2
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80084c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c2:	f003 0302 	and.w	r3, r3, #2
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d00a      	beq.n	80084e0 <HAL_UART_IRQHandler+0xd0>
 80084ca:	69fb      	ldr	r3, [r7, #28]
 80084cc:	f003 0301 	and.w	r3, r3, #1
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d005      	beq.n	80084e0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084d8:	f043 0204 	orr.w	r2, r3, #4
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80084e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084e2:	f003 0308 	and.w	r3, r3, #8
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d00f      	beq.n	800850a <HAL_UART_IRQHandler+0xfa>
 80084ea:	6a3b      	ldr	r3, [r7, #32]
 80084ec:	f003 0320 	and.w	r3, r3, #32
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d104      	bne.n	80084fe <HAL_UART_IRQHandler+0xee>
 80084f4:	69fb      	ldr	r3, [r7, #28]
 80084f6:	f003 0301 	and.w	r3, r3, #1
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d005      	beq.n	800850a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008502:	f043 0208 	orr.w	r2, r3, #8
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800850e:	2b00      	cmp	r3, #0
 8008510:	f000 8123 	beq.w	800875a <HAL_UART_IRQHandler+0x34a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008516:	f003 0320 	and.w	r3, r3, #32
 800851a:	2b00      	cmp	r3, #0
 800851c:	d007      	beq.n	800852e <HAL_UART_IRQHandler+0x11e>
 800851e:	6a3b      	ldr	r3, [r7, #32]
 8008520:	f003 0320 	and.w	r3, r3, #32
 8008524:	2b00      	cmp	r3, #0
 8008526:	d002      	beq.n	800852e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f000 fac5 	bl	8008ab8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	695b      	ldr	r3, [r3, #20]
 8008534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008538:	2b00      	cmp	r3, #0
 800853a:	bf14      	ite	ne
 800853c:	2301      	movne	r3, #1
 800853e:	2300      	moveq	r3, #0
 8008540:	b2db      	uxtb	r3, r3
 8008542:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008548:	f003 0308 	and.w	r3, r3, #8
 800854c:	2b00      	cmp	r3, #0
 800854e:	d102      	bne.n	8008556 <HAL_UART_IRQHandler+0x146>
 8008550:	697b      	ldr	r3, [r7, #20]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d033      	beq.n	80085be <HAL_UART_IRQHandler+0x1ae>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	f000 fa05 	bl	8008966 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	695b      	ldr	r3, [r3, #20]
 8008562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008566:	2b00      	cmp	r3, #0
 8008568:	d024      	beq.n	80085b4 <HAL_UART_IRQHandler+0x1a4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	695a      	ldr	r2, [r3, #20]
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008578:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800857e:	2b00      	cmp	r3, #0
 8008580:	d013      	beq.n	80085aa <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008586:	4a79      	ldr	r2, [pc, #484]	; (800876c <HAL_UART_IRQHandler+0x35c>)
 8008588:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800858e:	4618      	mov	r0, r3
 8008590:	f7fb f8c0 	bl	8003714 <HAL_DMA_Abort_IT>
 8008594:	4603      	mov	r3, r0
 8008596:	2b00      	cmp	r3, #0
 8008598:	d019      	beq.n	80085ce <HAL_UART_IRQHandler+0x1be>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800859e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085a0:	687a      	ldr	r2, [r7, #4]
 80085a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80085a4:	4610      	mov	r0, r2
 80085a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085a8:	e011      	b.n	80085ce <HAL_UART_IRQHandler+0x1be>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085b2:	e00c      	b.n	80085ce <HAL_UART_IRQHandler+0x1be>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085bc:	e007      	b.n	80085ce <HAL_UART_IRQHandler+0x1be>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2200      	movs	r2, #0
 80085ca:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80085cc:	e0c5      	b.n	800875a <HAL_UART_IRQHandler+0x34a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085ce:	bf00      	nop
    return;
 80085d0:	e0c3      	b.n	800875a <HAL_UART_IRQHandler+0x34a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085d6:	2b01      	cmp	r3, #1
 80085d8:	f040 80a3 	bne.w	8008722 <HAL_UART_IRQHandler+0x312>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80085dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085de:	f003 0310 	and.w	r3, r3, #16
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	f000 809d 	beq.w	8008722 <HAL_UART_IRQHandler+0x312>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80085e8:	6a3b      	ldr	r3, [r7, #32]
 80085ea:	f003 0310 	and.w	r3, r3, #16
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	f000 8097 	beq.w	8008722 <HAL_UART_IRQHandler+0x312>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80085f4:	2300      	movs	r3, #0
 80085f6:	60fb      	str	r3, [r7, #12]
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	60fb      	str	r3, [r7, #12]
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	685b      	ldr	r3, [r3, #4]
 8008606:	60fb      	str	r3, [r7, #12]
 8008608:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	695b      	ldr	r3, [r3, #20]
 8008610:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008614:	2b00      	cmp	r3, #0
 8008616:	d04f      	beq.n	80086b8 <HAL_UART_IRQHandler+0x2a8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	685b      	ldr	r3, [r3, #4]
 8008620:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8008622:	8a3b      	ldrh	r3, [r7, #16]
 8008624:	2b00      	cmp	r3, #0
 8008626:	f000 809a 	beq.w	800875e <HAL_UART_IRQHandler+0x34e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800862e:	8a3a      	ldrh	r2, [r7, #16]
 8008630:	429a      	cmp	r2, r3
 8008632:	f080 8094 	bcs.w	800875e <HAL_UART_IRQHandler+0x34e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	8a3a      	ldrh	r2, [r7, #16]
 800863a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008640:	699b      	ldr	r3, [r3, #24]
 8008642:	2b20      	cmp	r3, #32
 8008644:	d02b      	beq.n	800869e <HAL_UART_IRQHandler+0x28e>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	68da      	ldr	r2, [r3, #12]
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008654:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	695a      	ldr	r2, [r3, #20]
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f022 0201 	bic.w	r2, r2, #1
 8008664:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	695a      	ldr	r2, [r3, #20]
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008674:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2220      	movs	r2, #32
 800867a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2200      	movs	r2, #0
 8008682:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	68da      	ldr	r2, [r3, #12]
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f022 0210 	bic.w	r2, r2, #16
 8008692:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008698:	4618      	mov	r0, r3
 800869a:	f7fb f801 	bl	80036a0 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80086a2:	687a      	ldr	r2, [r7, #4]
 80086a4:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 80086a6:	687a      	ldr	r2, [r7, #4]
 80086a8:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 80086aa:	b292      	uxth	r2, r2
 80086ac:	1a8a      	subs	r2, r1, r2
 80086ae:	b292      	uxth	r2, r2
 80086b0:	4611      	mov	r1, r2
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif
      }
      return;
 80086b6:	e052      	b.n	800875e <HAL_UART_IRQHandler+0x34e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80086c0:	b29b      	uxth	r3, r3
 80086c2:	1ad3      	subs	r3, r2, r3
 80086c4:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80086ca:	b29b      	uxth	r3, r3
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d048      	beq.n	8008762 <HAL_UART_IRQHandler+0x352>
          &&(nb_rx_data > 0U) )
 80086d0:	8a7b      	ldrh	r3, [r7, #18]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d045      	beq.n	8008762 <HAL_UART_IRQHandler+0x352>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	68da      	ldr	r2, [r3, #12]
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80086e4:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	695a      	ldr	r2, [r3, #20]
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f022 0201 	bic.w	r2, r2, #1
 80086f4:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2220      	movs	r2, #32
 80086fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2200      	movs	r2, #0
 8008702:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	68da      	ldr	r2, [r3, #12]
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f022 0210 	bic.w	r2, r2, #16
 8008712:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008718:	8a7a      	ldrh	r2, [r7, #18]
 800871a:	4611      	mov	r1, r2
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif
      }
      return;
 8008720:	e01f      	b.n	8008762 <HAL_UART_IRQHandler+0x352>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008724:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008728:	2b00      	cmp	r3, #0
 800872a:	d008      	beq.n	800873e <HAL_UART_IRQHandler+0x32e>
 800872c:	6a3b      	ldr	r3, [r7, #32]
 800872e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008732:	2b00      	cmp	r3, #0
 8008734:	d003      	beq.n	800873e <HAL_UART_IRQHandler+0x32e>
  {
    UART_Transmit_IT(huart);
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f000 f956 	bl	80089e8 <UART_Transmit_IT>
    return;
 800873c:	e012      	b.n	8008764 <HAL_UART_IRQHandler+0x354>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800873e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008744:	2b00      	cmp	r3, #0
 8008746:	d00d      	beq.n	8008764 <HAL_UART_IRQHandler+0x354>
 8008748:	6a3b      	ldr	r3, [r7, #32]
 800874a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800874e:	2b00      	cmp	r3, #0
 8008750:	d008      	beq.n	8008764 <HAL_UART_IRQHandler+0x354>
  {
    UART_EndTransmit_IT(huart);
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f000 f997 	bl	8008a86 <UART_EndTransmit_IT>
    return;
 8008758:	e004      	b.n	8008764 <HAL_UART_IRQHandler+0x354>
    return;
 800875a:	bf00      	nop
 800875c:	e002      	b.n	8008764 <HAL_UART_IRQHandler+0x354>
      return;
 800875e:	bf00      	nop
 8008760:	e000      	b.n	8008764 <HAL_UART_IRQHandler+0x354>
      return;
 8008762:	bf00      	nop
  }
}
 8008764:	3728      	adds	r7, #40	; 0x28
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}
 800876a:	bf00      	nop
 800876c:	080089bf 	.word	0x080089bf

08008770 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008770:	b480      	push	{r7}
 8008772:	b083      	sub	sp, #12
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008778:	bf00      	nop
 800877a:	370c      	adds	r7, #12
 800877c:	46bd      	mov	sp, r7
 800877e:	bc80      	pop	{r7}
 8008780:	4770      	bx	lr

08008782 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008782:	b480      	push	{r7}
 8008784:	b083      	sub	sp, #12
 8008786:	af00      	add	r7, sp, #0
 8008788:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800878a:	bf00      	nop
 800878c:	370c      	adds	r7, #12
 800878e:	46bd      	mov	sp, r7
 8008790:	bc80      	pop	{r7}
 8008792:	4770      	bx	lr

08008794 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008794:	b480      	push	{r7}
 8008796:	b083      	sub	sp, #12
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800879c:	bf00      	nop
 800879e:	370c      	adds	r7, #12
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bc80      	pop	{r7}
 80087a4:	4770      	bx	lr

080087a6 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80087a6:	b480      	push	{r7}
 80087a8:	b083      	sub	sp, #12
 80087aa:	af00      	add	r7, sp, #0
 80087ac:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80087ae:	bf00      	nop
 80087b0:	370c      	adds	r7, #12
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bc80      	pop	{r7}
 80087b6:	4770      	bx	lr

080087b8 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 80087b8:	b480      	push	{r7}
 80087ba:	b083      	sub	sp, #12
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 80087c0:	bf00      	nop
 80087c2:	370c      	adds	r7, #12
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bc80      	pop	{r7}
 80087c8:	4770      	bx	lr

080087ca <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80087ca:	b480      	push	{r7}
 80087cc:	b083      	sub	sp, #12
 80087ce:	af00      	add	r7, sp, #0
 80087d0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80087d2:	bf00      	nop
 80087d4:	370c      	adds	r7, #12
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bc80      	pop	{r7}
 80087da:	4770      	bx	lr

080087dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80087dc:	b480      	push	{r7}
 80087de:	b083      	sub	sp, #12
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
 80087e4:	460b      	mov	r3, r1
 80087e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80087e8:	bf00      	nop
 80087ea:	370c      	adds	r7, #12
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bc80      	pop	{r7}
 80087f0:	4770      	bx	lr
	...

080087f4 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 80087f4:	b480      	push	{r7}
 80087f6:	b083      	sub	sp, #12
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	4a0f      	ldr	r2, [pc, #60]	; (800883c <UART_InitCallbacksToDefault+0x48>)
 8008800:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	4a0e      	ldr	r2, [pc, #56]	; (8008840 <UART_InitCallbacksToDefault+0x4c>)
 8008806:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	4a0e      	ldr	r2, [pc, #56]	; (8008844 <UART_InitCallbacksToDefault+0x50>)
 800880c:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	4a0d      	ldr	r2, [pc, #52]	; (8008848 <UART_InitCallbacksToDefault+0x54>)
 8008812:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	4a0d      	ldr	r2, [pc, #52]	; (800884c <UART_InitCallbacksToDefault+0x58>)
 8008818:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	4a0c      	ldr	r2, [pc, #48]	; (8008850 <UART_InitCallbacksToDefault+0x5c>)
 800881e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	4a0c      	ldr	r2, [pc, #48]	; (8008854 <UART_InitCallbacksToDefault+0x60>)
 8008824:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	4a0b      	ldr	r2, [pc, #44]	; (8008858 <UART_InitCallbacksToDefault+0x64>)
 800882a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	4a0b      	ldr	r2, [pc, #44]	; (800885c <UART_InitCallbacksToDefault+0x68>)
 8008830:	669a      	str	r2, [r3, #104]	; 0x68

}
 8008832:	bf00      	nop
 8008834:	370c      	adds	r7, #12
 8008836:	46bd      	mov	sp, r7
 8008838:	bc80      	pop	{r7}
 800883a:	4770      	bx	lr
 800883c:	08008771 	.word	0x08008771
 8008840:	080021e9 	.word	0x080021e9
 8008844:	08008783 	.word	0x08008783
 8008848:	080021fd 	.word	0x080021fd
 800884c:	08008795 	.word	0x08008795
 8008850:	080087a7 	.word	0x080087a7
 8008854:	080087b9 	.word	0x080087b9
 8008858:	080087cb 	.word	0x080087cb
 800885c:	080087dd 	.word	0x080087dd

08008860 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b084      	sub	sp, #16
 8008864:	af00      	add	r7, sp, #0
 8008866:	60f8      	str	r0, [r7, #12]
 8008868:	60b9      	str	r1, [r7, #8]
 800886a:	603b      	str	r3, [r7, #0]
 800886c:	4613      	mov	r3, r2
 800886e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008870:	e02c      	b.n	80088cc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008872:	69bb      	ldr	r3, [r7, #24]
 8008874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008878:	d028      	beq.n	80088cc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800887a:	69bb      	ldr	r3, [r7, #24]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d007      	beq.n	8008890 <UART_WaitOnFlagUntilTimeout+0x30>
 8008880:	f7fa f9b2 	bl	8002be8 <HAL_GetTick>
 8008884:	4602      	mov	r2, r0
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	1ad3      	subs	r3, r2, r3
 800888a:	69ba      	ldr	r2, [r7, #24]
 800888c:	429a      	cmp	r2, r3
 800888e:	d21d      	bcs.n	80088cc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	68da      	ldr	r2, [r3, #12]
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800889e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	695a      	ldr	r2, [r3, #20]
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f022 0201 	bic.w	r2, r2, #1
 80088ae:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	2220      	movs	r2, #32
 80088b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	2220      	movs	r2, #32
 80088bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	2200      	movs	r2, #0
 80088c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80088c8:	2303      	movs	r3, #3
 80088ca:	e00f      	b.n	80088ec <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	681a      	ldr	r2, [r3, #0]
 80088d2:	68bb      	ldr	r3, [r7, #8]
 80088d4:	4013      	ands	r3, r2
 80088d6:	68ba      	ldr	r2, [r7, #8]
 80088d8:	429a      	cmp	r2, r3
 80088da:	bf0c      	ite	eq
 80088dc:	2301      	moveq	r3, #1
 80088de:	2300      	movne	r3, #0
 80088e0:	b2db      	uxtb	r3, r3
 80088e2:	461a      	mov	r2, r3
 80088e4:	79fb      	ldrb	r3, [r7, #7]
 80088e6:	429a      	cmp	r2, r3
 80088e8:	d0c3      	beq.n	8008872 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80088ea:	2300      	movs	r3, #0
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	3710      	adds	r7, #16
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}

080088f4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80088f4:	b480      	push	{r7}
 80088f6:	b085      	sub	sp, #20
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	60f8      	str	r0, [r7, #12]
 80088fc:	60b9      	str	r1, [r7, #8]
 80088fe:	4613      	mov	r3, r2
 8008900:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	68ba      	ldr	r2, [r7, #8]
 8008906:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	88fa      	ldrh	r2, [r7, #6]
 800890c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	88fa      	ldrh	r2, [r7, #6]
 8008912:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	2200      	movs	r2, #0
 8008918:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	2222      	movs	r2, #34	; 0x22
 800891e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	2200      	movs	r2, #0
 8008926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	68da      	ldr	r2, [r3, #12]
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008938:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	695a      	ldr	r2, [r3, #20]
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f042 0201 	orr.w	r2, r2, #1
 8008948:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	68da      	ldr	r2, [r3, #12]
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f042 0220 	orr.w	r2, r2, #32
 8008958:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800895a:	2300      	movs	r3, #0
}
 800895c:	4618      	mov	r0, r3
 800895e:	3714      	adds	r7, #20
 8008960:	46bd      	mov	sp, r7
 8008962:	bc80      	pop	{r7}
 8008964:	4770      	bx	lr

08008966 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008966:	b480      	push	{r7}
 8008968:	b083      	sub	sp, #12
 800896a:	af00      	add	r7, sp, #0
 800896c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	68da      	ldr	r2, [r3, #12]
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800897c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	695a      	ldr	r2, [r3, #20]
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f022 0201 	bic.w	r2, r2, #1
 800898c:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008992:	2b01      	cmp	r3, #1
 8008994:	d107      	bne.n	80089a6 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	68da      	ldr	r2, [r3, #12]
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f022 0210 	bic.w	r2, r2, #16
 80089a4:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2220      	movs	r2, #32
 80089aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2200      	movs	r2, #0
 80089b2:	631a      	str	r2, [r3, #48]	; 0x30
}
 80089b4:	bf00      	nop
 80089b6:	370c      	adds	r7, #12
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bc80      	pop	{r7}
 80089bc:	4770      	bx	lr

080089be <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80089be:	b580      	push	{r7, lr}
 80089c0:	b084      	sub	sp, #16
 80089c2:	af00      	add	r7, sp, #0
 80089c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	2200      	movs	r2, #0
 80089d0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	2200      	movs	r2, #0
 80089d6:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089dc:	68f8      	ldr	r0, [r7, #12]
 80089de:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80089e0:	bf00      	nop
 80089e2:	3710      	adds	r7, #16
 80089e4:	46bd      	mov	sp, r7
 80089e6:	bd80      	pop	{r7, pc}

080089e8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80089e8:	b480      	push	{r7}
 80089ea:	b085      	sub	sp, #20
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089f6:	b2db      	uxtb	r3, r3
 80089f8:	2b21      	cmp	r3, #33	; 0x21
 80089fa:	d13e      	bne.n	8008a7a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	689b      	ldr	r3, [r3, #8]
 8008a00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a04:	d114      	bne.n	8008a30 <UART_Transmit_IT+0x48>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	691b      	ldr	r3, [r3, #16]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d110      	bne.n	8008a30 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6a1b      	ldr	r3, [r3, #32]
 8008a12:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	881b      	ldrh	r3, [r3, #0]
 8008a18:	461a      	mov	r2, r3
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008a22:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6a1b      	ldr	r3, [r3, #32]
 8008a28:	1c9a      	adds	r2, r3, #2
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	621a      	str	r2, [r3, #32]
 8008a2e:	e008      	b.n	8008a42 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6a1b      	ldr	r3, [r3, #32]
 8008a34:	1c59      	adds	r1, r3, #1
 8008a36:	687a      	ldr	r2, [r7, #4]
 8008a38:	6211      	str	r1, [r2, #32]
 8008a3a:	781a      	ldrb	r2, [r3, #0]
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008a46:	b29b      	uxth	r3, r3
 8008a48:	3b01      	subs	r3, #1
 8008a4a:	b29b      	uxth	r3, r3
 8008a4c:	687a      	ldr	r2, [r7, #4]
 8008a4e:	4619      	mov	r1, r3
 8008a50:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d10f      	bne.n	8008a76 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	68da      	ldr	r2, [r3, #12]
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008a64:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	68da      	ldr	r2, [r3, #12]
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008a74:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008a76:	2300      	movs	r3, #0
 8008a78:	e000      	b.n	8008a7c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008a7a:	2302      	movs	r3, #2
  }
}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	3714      	adds	r7, #20
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bc80      	pop	{r7}
 8008a84:	4770      	bx	lr

08008a86 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008a86:	b580      	push	{r7, lr}
 8008a88:	b082      	sub	sp, #8
 8008a8a:	af00      	add	r7, sp, #0
 8008a8c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	68da      	ldr	r2, [r3, #12]
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a9c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2220      	movs	r2, #32
 8008aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008aae:	2300      	movs	r3, #0
}
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	3708      	adds	r7, #8
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bd80      	pop	{r7, pc}

08008ab8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b086      	sub	sp, #24
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008ac6:	b2db      	uxtb	r3, r3
 8008ac8:	2b22      	cmp	r3, #34	; 0x22
 8008aca:	f040 809b 	bne.w	8008c04 <UART_Receive_IT+0x14c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	689b      	ldr	r3, [r3, #8]
 8008ad2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ad6:	d117      	bne.n	8008b08 <UART_Receive_IT+0x50>
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	691b      	ldr	r3, [r3, #16]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d113      	bne.n	8008b08 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ae8:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	685b      	ldr	r3, [r3, #4]
 8008af0:	b29b      	uxth	r3, r3
 8008af2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008af6:	b29a      	uxth	r2, r3
 8008af8:	693b      	ldr	r3, [r7, #16]
 8008afa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b00:	1c9a      	adds	r2, r3, #2
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	629a      	str	r2, [r3, #40]	; 0x28
 8008b06:	e026      	b.n	8008b56 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b0c:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	689b      	ldr	r3, [r3, #8]
 8008b16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b1a:	d007      	beq.n	8008b2c <UART_Receive_IT+0x74>
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	689b      	ldr	r3, [r3, #8]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d10a      	bne.n	8008b3a <UART_Receive_IT+0x82>
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	691b      	ldr	r3, [r3, #16]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d106      	bne.n	8008b3a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	685b      	ldr	r3, [r3, #4]
 8008b32:	b2da      	uxtb	r2, r3
 8008b34:	697b      	ldr	r3, [r7, #20]
 8008b36:	701a      	strb	r2, [r3, #0]
 8008b38:	e008      	b.n	8008b4c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	685b      	ldr	r3, [r3, #4]
 8008b40:	b2db      	uxtb	r3, r3
 8008b42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b46:	b2da      	uxtb	r2, r3
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b50:	1c5a      	adds	r2, r3, #1
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008b5a:	b29b      	uxth	r3, r3
 8008b5c:	3b01      	subs	r3, #1
 8008b5e:	b29b      	uxth	r3, r3
 8008b60:	687a      	ldr	r2, [r7, #4]
 8008b62:	4619      	mov	r1, r3
 8008b64:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d14a      	bne.n	8008c00 <UART_Receive_IT+0x148>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	68da      	ldr	r2, [r3, #12]
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f022 0220 	bic.w	r2, r2, #32
 8008b78:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	68da      	ldr	r2, [r3, #12]
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008b88:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	695a      	ldr	r2, [r3, #20]
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f022 0201 	bic.w	r2, r2, #1
 8008b98:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2220      	movs	r2, #32
 8008b9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ba6:	2b01      	cmp	r3, #1
 8008ba8:	d124      	bne.n	8008bf4 <UART_Receive_IT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2200      	movs	r2, #0
 8008bae:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	68da      	ldr	r2, [r3, #12]
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f022 0210 	bic.w	r2, r2, #16
 8008bbe:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f003 0310 	and.w	r3, r3, #16
 8008bca:	2b10      	cmp	r3, #16
 8008bcc:	d10a      	bne.n	8008be4 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008bce:	2300      	movs	r3, #0
 8008bd0:	60fb      	str	r3, [r7, #12]
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	60fb      	str	r3, [r7, #12]
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	685b      	ldr	r3, [r3, #4]
 8008be0:	60fb      	str	r3, [r7, #12]
 8008be2:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008be8:	687a      	ldr	r2, [r7, #4]
 8008bea:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8008bec:	4611      	mov	r1, r2
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	4798      	blx	r3
 8008bf2:	e003      	b.n	8008bfc <UART_Receive_IT+0x144>
      else
      {
       /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	4798      	blx	r3
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	e002      	b.n	8008c06 <UART_Receive_IT+0x14e>
    }
    return HAL_OK;
 8008c00:	2300      	movs	r3, #0
 8008c02:	e000      	b.n	8008c06 <UART_Receive_IT+0x14e>
  }
  else
  {
    return HAL_BUSY;
 8008c04:	2302      	movs	r3, #2
  }
}
 8008c06:	4618      	mov	r0, r3
 8008c08:	3718      	adds	r7, #24
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bd80      	pop	{r7, pc}
	...

08008c10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b084      	sub	sp, #16
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	685b      	ldr	r3, [r3, #4]
 8008c1c:	4a5f      	ldr	r2, [pc, #380]	; (8008d9c <UART_SetConfig+0x18c>)
 8008c1e:	4293      	cmp	r3, r2
 8008c20:	d904      	bls.n	8008c2c <UART_SetConfig+0x1c>
 8008c22:	f640 6153 	movw	r1, #3667	; 0xe53
 8008c26:	485e      	ldr	r0, [pc, #376]	; (8008da0 <UART_SetConfig+0x190>)
 8008c28:	f7f9 fb0e 	bl	8002248 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	68db      	ldr	r3, [r3, #12]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d009      	beq.n	8008c48 <UART_SetConfig+0x38>
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	68db      	ldr	r3, [r3, #12]
 8008c38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c3c:	d004      	beq.n	8008c48 <UART_SetConfig+0x38>
 8008c3e:	f640 6154 	movw	r1, #3668	; 0xe54
 8008c42:	4857      	ldr	r0, [pc, #348]	; (8008da0 <UART_SetConfig+0x190>)
 8008c44:	f7f9 fb00 	bl	8002248 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	691b      	ldr	r3, [r3, #16]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d00e      	beq.n	8008c6e <UART_SetConfig+0x5e>
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	691b      	ldr	r3, [r3, #16]
 8008c54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c58:	d009      	beq.n	8008c6e <UART_SetConfig+0x5e>
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	691b      	ldr	r3, [r3, #16]
 8008c5e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008c62:	d004      	beq.n	8008c6e <UART_SetConfig+0x5e>
 8008c64:	f640 6155 	movw	r1, #3669	; 0xe55
 8008c68:	484d      	ldr	r0, [pc, #308]	; (8008da0 <UART_SetConfig+0x190>)
 8008c6a:	f7f9 faed 	bl	8002248 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	695a      	ldr	r2, [r3, #20]
 8008c72:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8008c76:	4013      	ands	r3, r2
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d103      	bne.n	8008c84 <UART_SetConfig+0x74>
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	695b      	ldr	r3, [r3, #20]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d104      	bne.n	8008c8e <UART_SetConfig+0x7e>
 8008c84:	f640 6156 	movw	r1, #3670	; 0xe56
 8008c88:	4845      	ldr	r0, [pc, #276]	; (8008da0 <UART_SetConfig+0x190>)
 8008c8a:	f7f9 fadd 	bl	8002248 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	691b      	ldr	r3, [r3, #16]
 8008c94:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	68da      	ldr	r2, [r3, #12]
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	430a      	orrs	r2, r1
 8008ca2:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	689a      	ldr	r2, [r3, #8]
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	691b      	ldr	r3, [r3, #16]
 8008cac:	431a      	orrs	r2, r3
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	695b      	ldr	r3, [r3, #20]
 8008cb2:	4313      	orrs	r3, r2
 8008cb4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	68db      	ldr	r3, [r3, #12]
 8008cbc:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8008cc0:	f023 030c 	bic.w	r3, r3, #12
 8008cc4:	687a      	ldr	r2, [r7, #4]
 8008cc6:	6812      	ldr	r2, [r2, #0]
 8008cc8:	68b9      	ldr	r1, [r7, #8]
 8008cca:	430b      	orrs	r3, r1
 8008ccc:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	695b      	ldr	r3, [r3, #20]
 8008cd4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	699a      	ldr	r2, [r3, #24]
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	430a      	orrs	r2, r1
 8008ce2:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	4a2e      	ldr	r2, [pc, #184]	; (8008da4 <UART_SetConfig+0x194>)
 8008cea:	4293      	cmp	r3, r2
 8008cec:	d103      	bne.n	8008cf6 <UART_SetConfig+0xe6>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008cee:	f7fb feb7 	bl	8004a60 <HAL_RCC_GetPCLK2Freq>
 8008cf2:	60f8      	str	r0, [r7, #12]
 8008cf4:	e002      	b.n	8008cfc <UART_SetConfig+0xec>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008cf6:	f7fb fe9f 	bl	8004a38 <HAL_RCC_GetPCLK1Freq>
 8008cfa:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008cfc:	68fa      	ldr	r2, [r7, #12]
 8008cfe:	4613      	mov	r3, r2
 8008d00:	009b      	lsls	r3, r3, #2
 8008d02:	4413      	add	r3, r2
 8008d04:	009a      	lsls	r2, r3, #2
 8008d06:	441a      	add	r2, r3
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	685b      	ldr	r3, [r3, #4]
 8008d0c:	009b      	lsls	r3, r3, #2
 8008d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d12:	4a25      	ldr	r2, [pc, #148]	; (8008da8 <UART_SetConfig+0x198>)
 8008d14:	fba2 2303 	umull	r2, r3, r2, r3
 8008d18:	095b      	lsrs	r3, r3, #5
 8008d1a:	0119      	lsls	r1, r3, #4
 8008d1c:	68fa      	ldr	r2, [r7, #12]
 8008d1e:	4613      	mov	r3, r2
 8008d20:	009b      	lsls	r3, r3, #2
 8008d22:	4413      	add	r3, r2
 8008d24:	009a      	lsls	r2, r3, #2
 8008d26:	441a      	add	r2, r3
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	685b      	ldr	r3, [r3, #4]
 8008d2c:	009b      	lsls	r3, r3, #2
 8008d2e:	fbb2 f2f3 	udiv	r2, r2, r3
 8008d32:	4b1d      	ldr	r3, [pc, #116]	; (8008da8 <UART_SetConfig+0x198>)
 8008d34:	fba3 0302 	umull	r0, r3, r3, r2
 8008d38:	095b      	lsrs	r3, r3, #5
 8008d3a:	2064      	movs	r0, #100	; 0x64
 8008d3c:	fb00 f303 	mul.w	r3, r0, r3
 8008d40:	1ad3      	subs	r3, r2, r3
 8008d42:	011b      	lsls	r3, r3, #4
 8008d44:	3332      	adds	r3, #50	; 0x32
 8008d46:	4a18      	ldr	r2, [pc, #96]	; (8008da8 <UART_SetConfig+0x198>)
 8008d48:	fba2 2303 	umull	r2, r3, r2, r3
 8008d4c:	095b      	lsrs	r3, r3, #5
 8008d4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008d52:	4419      	add	r1, r3
 8008d54:	68fa      	ldr	r2, [r7, #12]
 8008d56:	4613      	mov	r3, r2
 8008d58:	009b      	lsls	r3, r3, #2
 8008d5a:	4413      	add	r3, r2
 8008d5c:	009a      	lsls	r2, r3, #2
 8008d5e:	441a      	add	r2, r3
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	685b      	ldr	r3, [r3, #4]
 8008d64:	009b      	lsls	r3, r3, #2
 8008d66:	fbb2 f2f3 	udiv	r2, r2, r3
 8008d6a:	4b0f      	ldr	r3, [pc, #60]	; (8008da8 <UART_SetConfig+0x198>)
 8008d6c:	fba3 0302 	umull	r0, r3, r3, r2
 8008d70:	095b      	lsrs	r3, r3, #5
 8008d72:	2064      	movs	r0, #100	; 0x64
 8008d74:	fb00 f303 	mul.w	r3, r0, r3
 8008d78:	1ad3      	subs	r3, r2, r3
 8008d7a:	011b      	lsls	r3, r3, #4
 8008d7c:	3332      	adds	r3, #50	; 0x32
 8008d7e:	4a0a      	ldr	r2, [pc, #40]	; (8008da8 <UART_SetConfig+0x198>)
 8008d80:	fba2 2303 	umull	r2, r3, r2, r3
 8008d84:	095b      	lsrs	r3, r3, #5
 8008d86:	f003 020f 	and.w	r2, r3, #15
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	440a      	add	r2, r1
 8008d90:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008d92:	bf00      	nop
 8008d94:	3710      	adds	r7, #16
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}
 8008d9a:	bf00      	nop
 8008d9c:	0044aa20 	.word	0x0044aa20
 8008da0:	08010528 	.word	0x08010528
 8008da4:	40013800 	.word	0x40013800
 8008da8:	51eb851f 	.word	0x51eb851f

08008dac <BAT_init>:
} T_ADC_Context;

static T_ADC_Context g_ADC_context;

void BAT_init(ADC_HandleTypeDef *p_adcHandle)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b082      	sub	sp, #8
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
  LOG_info("Initializing battery check");
 8008db4:	4905      	ldr	r1, [pc, #20]	; (8008dcc <BAT_init+0x20>)
 8008db6:	2001      	movs	r0, #1
 8008db8:	f001 fcd4 	bl	800a764 <LOG_log>

  g_ADC_context.adcHandle = p_adcHandle;
 8008dbc:	4a04      	ldr	r2, [pc, #16]	; (8008dd0 <BAT_init+0x24>)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6013      	str	r3, [r2, #0]

  return;
 8008dc2:	bf00      	nop
}
 8008dc4:	3708      	adds	r7, #8
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd80      	pop	{r7, pc}
 8008dca:	bf00      	nop
 8008dcc:	08010564 	.word	0x08010564
 8008dd0:	20000234 	.word	0x20000234

08008dd4 <BAT_update>:

void BAT_update(uint32_t *p_voltageInMv)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b084      	sub	sp, #16
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
  uint32_t l_adcRawData;
  float    l_voltageInV;

  l_adcRawData = HAL_ADC_GetValue(g_ADC_context.adcHandle);
 8008ddc:	4b18      	ldr	r3, [pc, #96]	; (8008e40 <BAT_update+0x6c>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	4618      	mov	r0, r3
 8008de2:	f7fa f8d1 	bl	8002f88 <HAL_ADC_GetValue>
 8008de6:	60f8      	str	r0, [r7, #12]

  /* Apply conversion based on STM32 reference voltage & resolution */
  l_voltageInV  = (l_adcRawData * 3.30f ) / 4096.0f;
 8008de8:	68f8      	ldr	r0, [r7, #12]
 8008dea:	f7f7 ffdf 	bl	8000dac <__aeabi_ui2f>
 8008dee:	4603      	mov	r3, r0
 8008df0:	4914      	ldr	r1, [pc, #80]	; (8008e44 <BAT_update+0x70>)
 8008df2:	4618      	mov	r0, r3
 8008df4:	f7f8 f832 	bl	8000e5c <__aeabi_fmul>
 8008df8:	4603      	mov	r3, r0
 8008dfa:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f7f8 f8e0 	bl	8000fc4 <__aeabi_fdiv>
 8008e04:	4603      	mov	r3, r0
 8008e06:	60bb      	str	r3, [r7, #8]

  /* Consider voltage divider used between the battery & the ADC input */
  l_voltageInV *= 11.0f;
 8008e08:	490f      	ldr	r1, [pc, #60]	; (8008e48 <BAT_update+0x74>)
 8008e0a:	68b8      	ldr	r0, [r7, #8]
 8008e0c:	f7f8 f826 	bl	8000e5c <__aeabi_fmul>
 8008e10:	4603      	mov	r3, r0
 8008e12:	60bb      	str	r3, [r7, #8]

  *p_voltageInMv = (uint32_t)(l_voltageInV * 1000.0f);
 8008e14:	490d      	ldr	r1, [pc, #52]	; (8008e4c <BAT_update+0x78>)
 8008e16:	68b8      	ldr	r0, [r7, #8]
 8008e18:	f7f8 f820 	bl	8000e5c <__aeabi_fmul>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	4618      	mov	r0, r3
 8008e20:	f7f8 f992 	bl	8001148 <__aeabi_f2uiz>
 8008e24:	4602      	mov	r2, r0
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	601a      	str	r2, [r3, #0]

  LOG_debug("Battery level: %u mV", *p_voltageInMv);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	461a      	mov	r2, r3
 8008e30:	4907      	ldr	r1, [pc, #28]	; (8008e50 <BAT_update+0x7c>)
 8008e32:	2000      	movs	r0, #0
 8008e34:	f001 fc96 	bl	800a764 <LOG_log>

  return;
 8008e38:	bf00      	nop
}
 8008e3a:	3710      	adds	r7, #16
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}
 8008e40:	20000234 	.word	0x20000234
 8008e44:	40533333 	.word	0x40533333
 8008e48:	41300000 	.word	0x41300000
 8008e4c:	447a0000 	.word	0x447a0000
 8008e50:	08010580 	.word	0x08010580

08008e54 <BLU_sendCommand>:
static void         BLU_sendCommand(uint8_t  p_command);
static void         BLU_readData   (uint8_t *p_buffer );
static T_BLU_BUTTON BLU_getButton  (uint8_t *p_buffer );

static void BLU_sendCommand(uint8_t p_command)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b084      	sub	sp, #16
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	71fb      	strb	r3, [r7, #7]
  volatile uint16_t l_bitValue;

  for (l_bitValue = 0x01; l_bitValue < 0x0100; l_bitValue <<= 1)
 8008e5e:	2301      	movs	r3, #1
 8008e60:	81fb      	strh	r3, [r7, #14]
 8008e62:	e030      	b.n	8008ec6 <BLU_sendCommand+0x72>
  {
    if ((l_bitValue & p_command) != 0)
 8008e64:	89fb      	ldrh	r3, [r7, #14]
 8008e66:	b29b      	uxth	r3, r3
 8008e68:	461a      	mov	r2, r3
 8008e6a:	79fb      	ldrb	r3, [r7, #7]
 8008e6c:	4013      	ands	r3, r2
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d006      	beq.n	8008e80 <BLU_sendCommand+0x2c>
    {
      SET_BIT(GPIOC->ODR, BLUETOOTH_SPI_CMD_Pin);
 8008e72:	4b1a      	ldr	r3, [pc, #104]	; (8008edc <BLU_sendCommand+0x88>)
 8008e74:	68db      	ldr	r3, [r3, #12]
 8008e76:	4a19      	ldr	r2, [pc, #100]	; (8008edc <BLU_sendCommand+0x88>)
 8008e78:	f043 0302 	orr.w	r3, r3, #2
 8008e7c:	60d3      	str	r3, [r2, #12]
 8008e7e:	e005      	b.n	8008e8c <BLU_sendCommand+0x38>
    }
    else
    {
      CLEAR_BIT(GPIOC->ODR, BLUETOOTH_SPI_CMD_Pin);
 8008e80:	4b16      	ldr	r3, [pc, #88]	; (8008edc <BLU_sendCommand+0x88>)
 8008e82:	68db      	ldr	r3, [r3, #12]
 8008e84:	4a15      	ldr	r2, [pc, #84]	; (8008edc <BLU_sendCommand+0x88>)
 8008e86:	f023 0302 	bic.w	r3, r3, #2
 8008e8a:	60d3      	str	r3, [r2, #12]
    }

    SET_BIT(GPIOA->ODR  , BLUETOOTH_SPI_CLK_Pin);
 8008e8c:	4b14      	ldr	r3, [pc, #80]	; (8008ee0 <BLU_sendCommand+0x8c>)
 8008e8e:	68db      	ldr	r3, [r3, #12]
 8008e90:	4a13      	ldr	r2, [pc, #76]	; (8008ee0 <BLU_sendCommand+0x8c>)
 8008e92:	f043 0310 	orr.w	r3, r3, #16
 8008e96:	60d3      	str	r3, [r2, #12]
    UTI_delayUs(5);
 8008e98:	2005      	movs	r0, #5
 8008e9a:	f002 f9df 	bl	800b25c <UTI_delayUs>
    CLEAR_BIT(GPIOA->ODR, BLUETOOTH_SPI_CLK_Pin);
 8008e9e:	4b10      	ldr	r3, [pc, #64]	; (8008ee0 <BLU_sendCommand+0x8c>)
 8008ea0:	68db      	ldr	r3, [r3, #12]
 8008ea2:	4a0f      	ldr	r2, [pc, #60]	; (8008ee0 <BLU_sendCommand+0x8c>)
 8008ea4:	f023 0310 	bic.w	r3, r3, #16
 8008ea8:	60d3      	str	r3, [r2, #12]
    UTI_delayUs(5);
 8008eaa:	2005      	movs	r0, #5
 8008eac:	f002 f9d6 	bl	800b25c <UTI_delayUs>
    SET_BIT(GPIOA->ODR  , BLUETOOTH_SPI_CLK_Pin);
 8008eb0:	4b0b      	ldr	r3, [pc, #44]	; (8008ee0 <BLU_sendCommand+0x8c>)
 8008eb2:	68db      	ldr	r3, [r3, #12]
 8008eb4:	4a0a      	ldr	r2, [pc, #40]	; (8008ee0 <BLU_sendCommand+0x8c>)
 8008eb6:	f043 0310 	orr.w	r3, r3, #16
 8008eba:	60d3      	str	r3, [r2, #12]
  for (l_bitValue = 0x01; l_bitValue < 0x0100; l_bitValue <<= 1)
 8008ebc:	89fb      	ldrh	r3, [r7, #14]
 8008ebe:	b29b      	uxth	r3, r3
 8008ec0:	005b      	lsls	r3, r3, #1
 8008ec2:	b29b      	uxth	r3, r3
 8008ec4:	81fb      	strh	r3, [r7, #14]
 8008ec6:	89fb      	ldrh	r3, [r7, #14]
 8008ec8:	b29b      	uxth	r3, r3
 8008eca:	2bff      	cmp	r3, #255	; 0xff
 8008ecc:	d9ca      	bls.n	8008e64 <BLU_sendCommand+0x10>
  }
  UTI_delayUs(16);
 8008ece:	2010      	movs	r0, #16
 8008ed0:	f002 f9c4 	bl	800b25c <UTI_delayUs>

  return;
 8008ed4:	bf00      	nop
}
 8008ed6:	3710      	adds	r7, #16
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	bd80      	pop	{r7, pc}
 8008edc:	40011000 	.word	0x40011000
 8008ee0:	40010800 	.word	0x40010800

08008ee4 <BLU_readData>:

static void BLU_readData(uint8_t *p_buffer)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b084      	sub	sp, #16
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
  volatile uint8_t  l_index;
  volatile uint16_t l_bitValue;

  /* Reset buffer */
  for (l_index = 0; l_index < BLU_DATA_BUFFER_LENGTH; l_index++)
 8008eec:	2300      	movs	r3, #0
 8008eee:	73fb      	strb	r3, [r7, #15]
 8008ef0:	e00b      	b.n	8008f0a <BLU_readData+0x26>
  {
    p_buffer[l_index] = 0x00;
 8008ef2:	7bfb      	ldrb	r3, [r7, #15]
 8008ef4:	b2db      	uxtb	r3, r3
 8008ef6:	461a      	mov	r2, r3
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	4413      	add	r3, r2
 8008efc:	2200      	movs	r2, #0
 8008efe:	701a      	strb	r2, [r3, #0]
  for (l_index = 0; l_index < BLU_DATA_BUFFER_LENGTH; l_index++)
 8008f00:	7bfb      	ldrb	r3, [r7, #15]
 8008f02:	b2db      	uxtb	r3, r3
 8008f04:	3301      	adds	r3, #1
 8008f06:	b2db      	uxtb	r3, r3
 8008f08:	73fb      	strb	r3, [r7, #15]
 8008f0a:	7bfb      	ldrb	r3, [r7, #15]
 8008f0c:	b2db      	uxtb	r3, r3
 8008f0e:	2b06      	cmp	r3, #6
 8008f10:	d9ef      	bls.n	8008ef2 <BLU_readData+0xe>
  }

  CLEAR_BIT(GPIOC->ODR, BLUETOOTH_SPI_CS_Pin);
 8008f12:	4b2e      	ldr	r3, [pc, #184]	; (8008fcc <BLU_readData+0xe8>)
 8008f14:	68db      	ldr	r3, [r3, #12]
 8008f16:	4a2d      	ldr	r2, [pc, #180]	; (8008fcc <BLU_readData+0xe8>)
 8008f18:	f023 0308 	bic.w	r3, r3, #8
 8008f1c:	60d3      	str	r3, [r2, #12]

  BLU_sendCommand(0x01);
 8008f1e:	2001      	movs	r0, #1
 8008f20:	f7ff ff98 	bl	8008e54 <BLU_sendCommand>
  BLU_sendCommand(0x42);
 8008f24:	2042      	movs	r0, #66	; 0x42
 8008f26:	f7ff ff95 	bl	8008e54 <BLU_sendCommand>

  for (l_index = 0; l_index < BLU_DATA_BUFFER_LENGTH; l_index++)
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	73fb      	strb	r3, [r7, #15]
 8008f2e:	e03f      	b.n	8008fb0 <BLU_readData+0xcc>
  {
    for (l_bitValue = 0x01; l_bitValue < 0x100; l_bitValue <<= 1)
 8008f30:	2301      	movs	r3, #1
 8008f32:	81bb      	strh	r3, [r7, #12]
 8008f34:	e030      	b.n	8008f98 <BLU_readData+0xb4>
    {
      SET_BIT(GPIOA->ODR  , BLUETOOTH_SPI_CLK_Pin);
 8008f36:	4b26      	ldr	r3, [pc, #152]	; (8008fd0 <BLU_readData+0xec>)
 8008f38:	68db      	ldr	r3, [r3, #12]
 8008f3a:	4a25      	ldr	r2, [pc, #148]	; (8008fd0 <BLU_readData+0xec>)
 8008f3c:	f043 0310 	orr.w	r3, r3, #16
 8008f40:	60d3      	str	r3, [r2, #12]
      UTI_delayUs(5);
 8008f42:	2005      	movs	r0, #5
 8008f44:	f002 f98a 	bl	800b25c <UTI_delayUs>
      CLEAR_BIT(GPIOA->ODR, BLUETOOTH_SPI_CLK_Pin);
 8008f48:	4b21      	ldr	r3, [pc, #132]	; (8008fd0 <BLU_readData+0xec>)
 8008f4a:	68db      	ldr	r3, [r3, #12]
 8008f4c:	4a20      	ldr	r2, [pc, #128]	; (8008fd0 <BLU_readData+0xec>)
 8008f4e:	f023 0310 	bic.w	r3, r3, #16
 8008f52:	60d3      	str	r3, [r2, #12]
      UTI_delayUs(5);
 8008f54:	2005      	movs	r0, #5
 8008f56:	f002 f981 	bl	800b25c <UTI_delayUs>
      SET_BIT(GPIOA->ODR  , BLUETOOTH_SPI_CLK_Pin);
 8008f5a:	4b1d      	ldr	r3, [pc, #116]	; (8008fd0 <BLU_readData+0xec>)
 8008f5c:	68db      	ldr	r3, [r3, #12]
 8008f5e:	4a1c      	ldr	r2, [pc, #112]	; (8008fd0 <BLU_readData+0xec>)
 8008f60:	f043 0310 	orr.w	r3, r3, #16
 8008f64:	60d3      	str	r3, [r2, #12]

      if (READ_BIT(GPIOC->IDR, BLUETOOTH_SPI_DAT_Pin) != GPIO_PIN_RESET)
 8008f66:	4b19      	ldr	r3, [pc, #100]	; (8008fcc <BLU_readData+0xe8>)
 8008f68:	689b      	ldr	r3, [r3, #8]
 8008f6a:	f003 0304 	and.w	r3, r3, #4
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d00d      	beq.n	8008f8e <BLU_readData+0xaa>
      {
        p_buffer[l_index] |= l_bitValue;
 8008f72:	89bb      	ldrh	r3, [r7, #12]
 8008f74:	b29a      	uxth	r2, r3
 8008f76:	7bfb      	ldrb	r3, [r7, #15]
 8008f78:	b2d8      	uxtb	r0, r3
 8008f7a:	4601      	mov	r1, r0
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	440b      	add	r3, r1
 8008f80:	7819      	ldrb	r1, [r3, #0]
 8008f82:	b2d2      	uxtb	r2, r2
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	4403      	add	r3, r0
 8008f88:	430a      	orrs	r2, r1
 8008f8a:	b2d2      	uxtb	r2, r2
 8008f8c:	701a      	strb	r2, [r3, #0]
    for (l_bitValue = 0x01; l_bitValue < 0x100; l_bitValue <<= 1)
 8008f8e:	89bb      	ldrh	r3, [r7, #12]
 8008f90:	b29b      	uxth	r3, r3
 8008f92:	005b      	lsls	r3, r3, #1
 8008f94:	b29b      	uxth	r3, r3
 8008f96:	81bb      	strh	r3, [r7, #12]
 8008f98:	89bb      	ldrh	r3, [r7, #12]
 8008f9a:	b29b      	uxth	r3, r3
 8008f9c:	2bff      	cmp	r3, #255	; 0xff
 8008f9e:	d9ca      	bls.n	8008f36 <BLU_readData+0x52>
      else
      {
        ; /* Nothing to do */
      }
    }
      UTI_delayUs(16);
 8008fa0:	2010      	movs	r0, #16
 8008fa2:	f002 f95b 	bl	800b25c <UTI_delayUs>
  for (l_index = 0; l_index < BLU_DATA_BUFFER_LENGTH; l_index++)
 8008fa6:	7bfb      	ldrb	r3, [r7, #15]
 8008fa8:	b2db      	uxtb	r3, r3
 8008faa:	3301      	adds	r3, #1
 8008fac:	b2db      	uxtb	r3, r3
 8008fae:	73fb      	strb	r3, [r7, #15]
 8008fb0:	7bfb      	ldrb	r3, [r7, #15]
 8008fb2:	b2db      	uxtb	r3, r3
 8008fb4:	2b06      	cmp	r3, #6
 8008fb6:	d9bb      	bls.n	8008f30 <BLU_readData+0x4c>
  }

  SET_BIT(GPIOC->ODR, BLUETOOTH_SPI_CS_Pin);
 8008fb8:	4b04      	ldr	r3, [pc, #16]	; (8008fcc <BLU_readData+0xe8>)
 8008fba:	68db      	ldr	r3, [r3, #12]
 8008fbc:	4a03      	ldr	r2, [pc, #12]	; (8008fcc <BLU_readData+0xe8>)
 8008fbe:	f043 0308 	orr.w	r3, r3, #8
 8008fc2:	60d3      	str	r3, [r2, #12]

  return;
 8008fc4:	bf00      	nop
}
 8008fc6:	3710      	adds	r7, #16
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd80      	pop	{r7, pc}
 8008fcc:	40011000 	.word	0x40011000
 8008fd0:	40010800 	.word	0x40010800

08008fd4 <BLU_getButton>:

static T_BLU_BUTTON BLU_getButton(uint8_t *p_buffer)
{
 8008fd4:	b480      	push	{r7}
 8008fd6:	b085      	sub	sp, #20
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
  uint16_t l_buttonRawValue;
  uint8_t  l_index;

  l_buttonRawValue = (p_buffer[BLU_BUTTON_HIGH_OFFSET] << 8) | p_buffer[BLU_BUTTON_LOW_OFFSET];
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	3302      	adds	r3, #2
 8008fe0:	781b      	ldrb	r3, [r3, #0]
 8008fe2:	021b      	lsls	r3, r3, #8
 8008fe4:	b21a      	sxth	r2, r3
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	3301      	adds	r3, #1
 8008fea:	781b      	ldrb	r3, [r3, #0]
 8008fec:	b21b      	sxth	r3, r3
 8008fee:	4313      	orrs	r3, r2
 8008ff0:	b21b      	sxth	r3, r3
 8008ff2:	81bb      	strh	r3, [r7, #12]

  /* Ignore BLU_BUTTON_NONE value as it is not directly coded in raw data */
  for (l_index = BLU_BUTTON_SELECT; l_index < BLU_BUTTON_COUNT_VALUE; l_index++)
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	73fb      	strb	r3, [r7, #15]
 8008ff8:	e00d      	b.n	8009016 <BLU_getButton+0x42>
  {
    /* Stop decoding button data on 1st match (do not deal with multiple presses case) */
    if ((l_buttonRawValue & (1 << (l_index - 1))) == 0)
 8008ffa:	89ba      	ldrh	r2, [r7, #12]
 8008ffc:	7bfb      	ldrb	r3, [r7, #15]
 8008ffe:	3b01      	subs	r3, #1
 8009000:	fa42 f303 	asr.w	r3, r2, r3
 8009004:	f003 0301 	and.w	r3, r3, #1
 8009008:	2b00      	cmp	r3, #0
 800900a:	d101      	bne.n	8009010 <BLU_getButton+0x3c>
    {
      return l_index;
 800900c:	7bfb      	ldrb	r3, [r7, #15]
 800900e:	e006      	b.n	800901e <BLU_getButton+0x4a>
  for (l_index = BLU_BUTTON_SELECT; l_index < BLU_BUTTON_COUNT_VALUE; l_index++)
 8009010:	7bfb      	ldrb	r3, [r7, #15]
 8009012:	3301      	adds	r3, #1
 8009014:	73fb      	strb	r3, [r7, #15]
 8009016:	7bfb      	ldrb	r3, [r7, #15]
 8009018:	2b10      	cmp	r3, #16
 800901a:	d9ee      	bls.n	8008ffa <BLU_getButton+0x26>
    {
      ; /* Nothing to do */
    }
  }

  return BLU_BUTTON_NONE;
 800901c:	2300      	movs	r3, #0
}
 800901e:	4618      	mov	r0, r3
 8009020:	3714      	adds	r7, #20
 8009022:	46bd      	mov	sp, r7
 8009024:	bc80      	pop	{r7}
 8009026:	4770      	bx	lr

08009028 <BLU_init>:

void BLU_init(void)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	af00      	add	r7, sp, #0
  LOG_info("Initializing bluetooth control");
 800902c:	4904      	ldr	r1, [pc, #16]	; (8009040 <BLU_init+0x18>)
 800902e:	2001      	movs	r0, #1
 8009030:	f001 fb98 	bl	800a764 <LOG_log>

  BLU_initData(&g_BLU_context.lastData);
 8009034:	4803      	ldr	r0, [pc, #12]	; (8009044 <BLU_init+0x1c>)
 8009036:	f000 f807 	bl	8009048 <BLU_initData>

  return;
 800903a:	bf00      	nop
}
 800903c:	bd80      	pop	{r7, pc}
 800903e:	bf00      	nop
 8009040:	08010598 	.word	0x08010598
 8009044:	20000238 	.word	0x20000238

08009048 <BLU_initData>:

void BLU_initData(T_BLU_Data *p_data)
{
 8009048:	b480      	push	{r7}
 800904a:	b083      	sub	sp, #12
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
  p_data->leftX  = BLU_DATA_DEFAUT_DIRECTION;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2280      	movs	r2, #128	; 0x80
 8009054:	601a      	str	r2, [r3, #0]
  p_data->leftY  = BLU_DATA_DEFAUT_DIRECTION;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	2280      	movs	r2, #128	; 0x80
 800905a:	605a      	str	r2, [r3, #4]
  p_data->rightX = BLU_DATA_DEFAUT_DIRECTION;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2280      	movs	r2, #128	; 0x80
 8009060:	609a      	str	r2, [r3, #8]
  p_data->rightY = BLU_DATA_DEFAUT_DIRECTION;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2280      	movs	r2, #128	; 0x80
 8009066:	60da      	str	r2, [r3, #12]
  p_data->button = BLU_BUTTON_NONE;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2200      	movs	r2, #0
 800906c:	741a      	strb	r2, [r3, #16]

  return;
 800906e:	bf00      	nop
}
 8009070:	370c      	adds	r7, #12
 8009072:	46bd      	mov	sp, r7
 8009074:	bc80      	pop	{r7}
 8009076:	4770      	bx	lr

08009078 <BLU_receiveData>:

void BLU_receiveData(T_BLU_Data *p_data)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b08c      	sub	sp, #48	; 0x30
 800907c:	af02      	add	r7, sp, #8
 800907e:	6078      	str	r0, [r7, #4]
  uint8_t    l_buffer[BLU_DATA_BUFFER_LENGTH];
  T_BLU_Data l_readData;

  /* Read raw data */
  BLU_readData(l_buffer);
 8009080:	f107 0320 	add.w	r3, r7, #32
 8009084:	4618      	mov	r0, r3
 8009086:	f7ff ff2d 	bl	8008ee4 <BLU_readData>

  /* Start and decode raw data */
  l_readData.leftX  = l_buffer[BLU_LEFT_X_OFFSET ];
 800908a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800908e:	60fb      	str	r3, [r7, #12]
  l_readData.leftY  = l_buffer[BLU_LEFT_Y_OFFSET ];
 8009090:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009094:	613b      	str	r3, [r7, #16]
  l_readData.rightX = l_buffer[BLU_RIGHT_X_OFFSET];
 8009096:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800909a:	617b      	str	r3, [r7, #20]
  l_readData.rightY = l_buffer[BLU_RIGHT_Y_OFFSET];
 800909c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80090a0:	61bb      	str	r3, [r7, #24]
  l_readData.button = BLU_getButton(l_buffer);
 80090a2:	f107 0320 	add.w	r3, r7, #32
 80090a6:	4618      	mov	r0, r3
 80090a8:	f7ff ff94 	bl	8008fd4 <BLU_getButton>
 80090ac:	4603      	mov	r3, r0
 80090ae:	773b      	strb	r3, [r7, #28]

  /* Deal with startup condition, while read data is not valid yet */
  if  ((l_readData.leftX == 255 && l_readData.leftY == 255 && l_readData.rightX == 255 && l_readData.rightY ==255)
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	2bff      	cmp	r3, #255	; 0xff
 80090b4:	d108      	bne.n	80090c8 <BLU_receiveData+0x50>
 80090b6:	693b      	ldr	r3, [r7, #16]
 80090b8:	2bff      	cmp	r3, #255	; 0xff
 80090ba:	d105      	bne.n	80090c8 <BLU_receiveData+0x50>
 80090bc:	697b      	ldr	r3, [r7, #20]
 80090be:	2bff      	cmp	r3, #255	; 0xff
 80090c0:	d102      	bne.n	80090c8 <BLU_receiveData+0x50>
 80090c2:	69bb      	ldr	r3, [r7, #24]
 80090c4:	2bff      	cmp	r3, #255	; 0xff
 80090c6:	d00b      	beq.n	80090e0 <BLU_receiveData+0x68>
    || (l_readData.leftX ==   0 && l_readData.leftY ==   0 && l_readData.rightX ==   0 && l_readData.rightY ==  0))
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d10e      	bne.n	80090ec <BLU_receiveData+0x74>
 80090ce:	693b      	ldr	r3, [r7, #16]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d10b      	bne.n	80090ec <BLU_receiveData+0x74>
 80090d4:	697b      	ldr	r3, [r7, #20]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d108      	bne.n	80090ec <BLU_receiveData+0x74>
 80090da:	69bb      	ldr	r3, [r7, #24]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d105      	bne.n	80090ec <BLU_receiveData+0x74>
  {
    BLU_initData(&l_readData);
 80090e0:	f107 030c 	add.w	r3, r7, #12
 80090e4:	4618      	mov	r0, r3
 80090e6:	f7ff ffaf 	bl	8009048 <BLU_initData>
 80090ea:	e053      	b.n	8009194 <BLU_receiveData+0x11c>
  }
  /* Use a confirmation mechanism, on 2 cycles, as glitches are observed */
  else if ((l_readData.leftX  == g_BLU_context.lastData.leftX) &&
 80090ec:	68fa      	ldr	r2, [r7, #12]
 80090ee:	4b33      	ldr	r3, [pc, #204]	; (80091bc <BLU_receiveData+0x144>)
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	429a      	cmp	r2, r3
 80090f4:	d14e      	bne.n	8009194 <BLU_receiveData+0x11c>
           (l_readData.leftY  == g_BLU_context.lastData.leftY) &&
 80090f6:	693a      	ldr	r2, [r7, #16]
 80090f8:	4b30      	ldr	r3, [pc, #192]	; (80091bc <BLU_receiveData+0x144>)
 80090fa:	685b      	ldr	r3, [r3, #4]
  else if ((l_readData.leftX  == g_BLU_context.lastData.leftX) &&
 80090fc:	429a      	cmp	r2, r3
 80090fe:	d149      	bne.n	8009194 <BLU_receiveData+0x11c>
           (l_readData.rightX == g_BLU_context.lastData.rightX) &&
 8009100:	697a      	ldr	r2, [r7, #20]
 8009102:	4b2e      	ldr	r3, [pc, #184]	; (80091bc <BLU_receiveData+0x144>)
 8009104:	689b      	ldr	r3, [r3, #8]
           (l_readData.leftY  == g_BLU_context.lastData.leftY) &&
 8009106:	429a      	cmp	r2, r3
 8009108:	d144      	bne.n	8009194 <BLU_receiveData+0x11c>
           (l_readData.rightY == g_BLU_context.lastData.rightY) &&
 800910a:	69ba      	ldr	r2, [r7, #24]
 800910c:	4b2b      	ldr	r3, [pc, #172]	; (80091bc <BLU_receiveData+0x144>)
 800910e:	68db      	ldr	r3, [r3, #12]
           (l_readData.rightX == g_BLU_context.lastData.rightX) &&
 8009110:	429a      	cmp	r2, r3
 8009112:	d13f      	bne.n	8009194 <BLU_receiveData+0x11c>
           (l_readData.button == g_BLU_context.lastData.button))
 8009114:	7f3a      	ldrb	r2, [r7, #28]
 8009116:	4b29      	ldr	r3, [pc, #164]	; (80091bc <BLU_receiveData+0x144>)
 8009118:	7c1b      	ldrb	r3, [r3, #16]
           (l_readData.rightY == g_BLU_context.lastData.rightY) &&
 800911a:	429a      	cmp	r2, r3
 800911c:	d13a      	bne.n	8009194 <BLU_receiveData+0x11c>
  {
    /* Normalize directions data in range [-MAX..MAX] */
    p_data->leftX  = UTI_normalizeIntValue(l_readData.leftX , 0, 255, -STP_DRIVE_MAX_SPEED, STP_DRIVE_MAX_SPEED, false);
 800911e:	68f8      	ldr	r0, [r7, #12]
 8009120:	2300      	movs	r3, #0
 8009122:	9301      	str	r3, [sp, #4]
 8009124:	2328      	movs	r3, #40	; 0x28
 8009126:	9300      	str	r3, [sp, #0]
 8009128:	f06f 0327 	mvn.w	r3, #39	; 0x27
 800912c:	22ff      	movs	r2, #255	; 0xff
 800912e:	2100      	movs	r1, #0
 8009130:	f002 f93b 	bl	800b3aa <UTI_normalizeIntValue>
 8009134:	4602      	mov	r2, r0
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	601a      	str	r2, [r3, #0]
    p_data->leftY  = UTI_normalizeIntValue(l_readData.leftY , 0, 255, -STP_DRIVE_MAX_SPEED, STP_DRIVE_MAX_SPEED, true );
 800913a:	6938      	ldr	r0, [r7, #16]
 800913c:	2301      	movs	r3, #1
 800913e:	9301      	str	r3, [sp, #4]
 8009140:	2328      	movs	r3, #40	; 0x28
 8009142:	9300      	str	r3, [sp, #0]
 8009144:	f06f 0327 	mvn.w	r3, #39	; 0x27
 8009148:	22ff      	movs	r2, #255	; 0xff
 800914a:	2100      	movs	r1, #0
 800914c:	f002 f92d 	bl	800b3aa <UTI_normalizeIntValue>
 8009150:	4602      	mov	r2, r0
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	605a      	str	r2, [r3, #4]
    p_data->rightX = UTI_normalizeIntValue(l_readData.rightX, 0, 255, -STP_DRIVE_MAX_SPEED, STP_DRIVE_MAX_SPEED, false);
 8009156:	6978      	ldr	r0, [r7, #20]
 8009158:	2300      	movs	r3, #0
 800915a:	9301      	str	r3, [sp, #4]
 800915c:	2328      	movs	r3, #40	; 0x28
 800915e:	9300      	str	r3, [sp, #0]
 8009160:	f06f 0327 	mvn.w	r3, #39	; 0x27
 8009164:	22ff      	movs	r2, #255	; 0xff
 8009166:	2100      	movs	r1, #0
 8009168:	f002 f91f 	bl	800b3aa <UTI_normalizeIntValue>
 800916c:	4602      	mov	r2, r0
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	609a      	str	r2, [r3, #8]
    p_data->rightY = UTI_normalizeIntValue(l_readData.rightY, 0, 255, -STP_DRIVE_MAX_SPEED, STP_DRIVE_MAX_SPEED, true );
 8009172:	69b8      	ldr	r0, [r7, #24]
 8009174:	2301      	movs	r3, #1
 8009176:	9301      	str	r3, [sp, #4]
 8009178:	2328      	movs	r3, #40	; 0x28
 800917a:	9300      	str	r3, [sp, #0]
 800917c:	f06f 0327 	mvn.w	r3, #39	; 0x27
 8009180:	22ff      	movs	r2, #255	; 0xff
 8009182:	2100      	movs	r1, #0
 8009184:	f002 f911 	bl	800b3aa <UTI_normalizeIntValue>
 8009188:	4602      	mov	r2, r0
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	60da      	str	r2, [r3, #12]
    p_data->button = l_readData.button;
 800918e:	7f3a      	ldrb	r2, [r7, #28]
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	741a      	strb	r2, [r3, #16]
  {
    ; /* Nothing to do */
  }

  /* Saved received data for later use in confirmation mechanism */
  g_BLU_context.lastData.leftX  = l_readData.leftX;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	4a09      	ldr	r2, [pc, #36]	; (80091bc <BLU_receiveData+0x144>)
 8009198:	6013      	str	r3, [r2, #0]
  g_BLU_context.lastData.leftY  = l_readData.leftY;
 800919a:	693b      	ldr	r3, [r7, #16]
 800919c:	4a07      	ldr	r2, [pc, #28]	; (80091bc <BLU_receiveData+0x144>)
 800919e:	6053      	str	r3, [r2, #4]
  g_BLU_context.lastData.rightX = l_readData.rightX;
 80091a0:	697b      	ldr	r3, [r7, #20]
 80091a2:	4a06      	ldr	r2, [pc, #24]	; (80091bc <BLU_receiveData+0x144>)
 80091a4:	6093      	str	r3, [r2, #8]
  g_BLU_context.lastData.rightY = l_readData.rightY;
 80091a6:	69bb      	ldr	r3, [r7, #24]
 80091a8:	4a04      	ldr	r2, [pc, #16]	; (80091bc <BLU_receiveData+0x144>)
 80091aa:	60d3      	str	r3, [r2, #12]
  g_BLU_context.lastData.button = l_readData.button;
 80091ac:	7f3a      	ldrb	r2, [r7, #28]
 80091ae:	4b03      	ldr	r3, [pc, #12]	; (80091bc <BLU_receiveData+0x144>)
 80091b0:	741a      	strb	r2, [r3, #16]

  return;
 80091b2:	bf00      	nop
}
 80091b4:	3728      	adds	r7, #40	; 0x28
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}
 80091ba:	bf00      	nop
 80091bc:	20000238 	.word	0x20000238

080091c0 <CBU_init>:
#include "circular_buffer.h"

#include "log.h"

void CBU_init(T_CBU_Handle *p_buffer)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b084      	sub	sp, #16
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
  uint32_t l_index;

  LOG_debug("Initializing circular buffer");
 80091c8:	490e      	ldr	r1, [pc, #56]	; (8009204 <CBU_init+0x44>)
 80091ca:	2000      	movs	r0, #0
 80091cc:	f001 faca 	bl	800a764 <LOG_log>

  for (l_index = 0; l_index < CST_CIRCULAR_BUFFER_MAX_ELEMENTS; l_index++)
 80091d0:	2300      	movs	r3, #0
 80091d2:	60fb      	str	r3, [r7, #12]
 80091d4:	e008      	b.n	80091e8 <CBU_init+0x28>
  {
    p_buffer->elements[l_index] = 0.0f;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	68fa      	ldr	r2, [r7, #12]
 80091da:	f04f 0100 	mov.w	r1, #0
 80091de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (l_index = 0; l_index < CST_CIRCULAR_BUFFER_MAX_ELEMENTS; l_index++)
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	3301      	adds	r3, #1
 80091e6:	60fb      	str	r3, [r7, #12]
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	2b09      	cmp	r3, #9
 80091ec:	d9f3      	bls.n	80091d6 <CBU_init+0x16>
  }

  p_buffer->count = 0;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2200      	movs	r2, #0
 80091f2:	62da      	str	r2, [r3, #44]	; 0x2c
  p_buffer->index = 0;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2200      	movs	r2, #0
 80091f8:	629a      	str	r2, [r3, #40]	; 0x28

  return;
 80091fa:	bf00      	nop
}
 80091fc:	3710      	adds	r7, #16
 80091fe:	46bd      	mov	sp, r7
 8009200:	bd80      	pop	{r7, pc}
 8009202:	bf00      	nop
 8009204:	080105b8 	.word	0x080105b8

08009208 <CBU_push>:

void CBU_push(T_CBU_Handle *p_buffer, float p_element)
{
 8009208:	b480      	push	{r7}
 800920a:	b083      	sub	sp, #12
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
 8009210:	6039      	str	r1, [r7, #0]
  if (p_buffer->index == CST_CIRCULAR_BUFFER_MAX_ELEMENTS - 1)
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009216:	2b09      	cmp	r3, #9
 8009218:	d103      	bne.n	8009222 <CBU_push+0x1a>
  {
    p_buffer->index = 0;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2200      	movs	r2, #0
 800921e:	629a      	str	r2, [r3, #40]	; 0x28
 8009220:	e004      	b.n	800922c <CBU_push+0x24>
  }
  else
  {
    p_buffer->index++;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009226:	1c5a      	adds	r2, r3, #1
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  p_buffer->elements[p_buffer->index] = p_element;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	6839      	ldr	r1, [r7, #0]
 8009234:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  if (p_buffer->count < CST_CIRCULAR_BUFFER_MAX_ELEMENTS)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800923c:	2b09      	cmp	r3, #9
 800923e:	d805      	bhi.n	800924c <CBU_push+0x44>
  {
    p_buffer->count++;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009244:	1c5a      	adds	r2, r3, #1
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	62da      	str	r2, [r3, #44]	; 0x2c
  else
  {
    ; /* Nothing to do */
  }

  return;
 800924a:	bf00      	nop
 800924c:	bf00      	nop
}
 800924e:	370c      	adds	r7, #12
 8009250:	46bd      	mov	sp, r7
 8009252:	bc80      	pop	{r7}
 8009254:	4770      	bx	lr

08009256 <CBU_getAverage>:
{
  return p_buffer->count;
}

float CBU_getAverage(T_CBU_Handle *p_buffer)
{
 8009256:	b580      	push	{r7, lr}
 8009258:	b086      	sub	sp, #24
 800925a:	af00      	add	r7, sp, #0
 800925c:	6078      	str	r0, [r7, #4]
  uint32_t l_index;
  uint32_t l_count;
  float    l_average;

  l_index   = p_buffer->index;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009262:	617b      	str	r3, [r7, #20]
  l_count   = 0;
 8009264:	2300      	movs	r3, #0
 8009266:	613b      	str	r3, [r7, #16]
  l_average = 0.0f;
 8009268:	f04f 0300 	mov.w	r3, #0
 800926c:	60fb      	str	r3, [r7, #12]

  while (l_count < p_buffer->count)
 800926e:	e015      	b.n	800929c <CBU_getAverage+0x46>
  {
    l_average += p_buffer->elements[l_index];
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	697a      	ldr	r2, [r7, #20]
 8009274:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009278:	4619      	mov	r1, r3
 800927a:	68f8      	ldr	r0, [r7, #12]
 800927c:	f7f7 fce6 	bl	8000c4c <__addsf3>
 8009280:	4603      	mov	r3, r0
 8009282:	60fb      	str	r3, [r7, #12]

    if (l_index == CST_CIRCULAR_BUFFER_MAX_ELEMENTS - 1)
 8009284:	697b      	ldr	r3, [r7, #20]
 8009286:	2b09      	cmp	r3, #9
 8009288:	d102      	bne.n	8009290 <CBU_getAverage+0x3a>
    {
      l_index = 0;
 800928a:	2300      	movs	r3, #0
 800928c:	617b      	str	r3, [r7, #20]
 800928e:	e002      	b.n	8009296 <CBU_getAverage+0x40>
    }
    else
    {
      l_index++;
 8009290:	697b      	ldr	r3, [r7, #20]
 8009292:	3301      	adds	r3, #1
 8009294:	617b      	str	r3, [r7, #20]
    }

    l_count++;
 8009296:	693b      	ldr	r3, [r7, #16]
 8009298:	3301      	adds	r3, #1
 800929a:	613b      	str	r3, [r7, #16]
  while (l_count < p_buffer->count)
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092a0:	693a      	ldr	r2, [r7, #16]
 80092a2:	429a      	cmp	r2, r3
 80092a4:	d3e4      	bcc.n	8009270 <CBU_getAverage+0x1a>
  }

  l_average /= (float)p_buffer->count;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092aa:	4618      	mov	r0, r3
 80092ac:	f7f7 fd7e 	bl	8000dac <__aeabi_ui2f>
 80092b0:	4603      	mov	r3, r0
 80092b2:	4619      	mov	r1, r3
 80092b4:	68f8      	ldr	r0, [r7, #12]
 80092b6:	f7f7 fe85 	bl	8000fc4 <__aeabi_fdiv>
 80092ba:	4603      	mov	r3, r0
 80092bc:	60fb      	str	r3, [r7, #12]

  return l_average;
 80092be:	68fb      	ldr	r3, [r7, #12]
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	3718      	adds	r7, #24
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd80      	pop	{r7, pc}

080092c8 <CON_init>:
} T_CON_Context;

static T_CON_Context g_CON_context;

void CON_init(UART_HandleTypeDef *p_uartHandle)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b082      	sub	sp, #8
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
  LOG_info("Initializing console");
 80092d0:	490d      	ldr	r1, [pc, #52]	; (8009308 <CON_init+0x40>)
 80092d2:	2001      	movs	r0, #1
 80092d4:	f001 fa46 	bl	800a764 <LOG_log>

  g_CON_context.uartHandle     = p_uartHandle;
 80092d8:	4a0c      	ldr	r2, [pc, #48]	; (800930c <CON_init+0x44>)
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6013      	str	r3, [r2, #0]
  g_CON_context.dataSize       = 0;
 80092de:	4b0b      	ldr	r3, [pc, #44]	; (800930c <CON_init+0x44>)
 80092e0:	2200      	movs	r2, #0
 80092e2:	619a      	str	r2, [r3, #24]
  g_CON_context.isDataComplete = false;
 80092e4:	4b09      	ldr	r3, [pc, #36]	; (800930c <CON_init+0x44>)
 80092e6:	2200      	movs	r2, #0
 80092e8:	771a      	strb	r2, [r3, #28]

  SFO_initData(&g_CON_context.data);
 80092ea:	4809      	ldr	r0, [pc, #36]	; (8009310 <CON_init+0x48>)
 80092ec:	f001 fe5e 	bl	800afac <SFO_initData>

  HAL_UART_Receive_IT(g_CON_context.uartHandle, &g_CON_context.datum, 1);
 80092f0:	4b06      	ldr	r3, [pc, #24]	; (800930c <CON_init+0x44>)
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	2201      	movs	r2, #1
 80092f6:	4907      	ldr	r1, [pc, #28]	; (8009314 <CON_init+0x4c>)
 80092f8:	4618      	mov	r0, r3
 80092fa:	f7ff f859 	bl	80083b0 <HAL_UART_Receive_IT>

  return;
 80092fe:	bf00      	nop
}
 8009300:	3708      	adds	r7, #8
 8009302:	46bd      	mov	sp, r7
 8009304:	bd80      	pop	{r7, pc}
 8009306:	bf00      	nop
 8009308:	0801061c 	.word	0x0801061c
 800930c:	2000024c 	.word	0x2000024c
 8009310:	20000251 	.word	0x20000251
 8009314:	20000250 	.word	0x20000250

08009318 <CON_receiveData>:

void CON_receiveData(void)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	af00      	add	r7, sp, #0
  /* If previous command was not processed yet, drop datum, */
  /* which will lead to an error, showing a design issue... */
  if (g_CON_context.isDataComplete == true)
 800931c:	4b10      	ldr	r3, [pc, #64]	; (8009360 <CON_receiveData+0x48>)
 800931e:	7f1b      	ldrb	r3, [r3, #28]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d114      	bne.n	800934e <CON_receiveData+0x36>
  {
    ; /* Nothing to do */
  }
  else
  {
    if (g_CON_context.datum == '\r')
 8009324:	4b0e      	ldr	r3, [pc, #56]	; (8009360 <CON_receiveData+0x48>)
 8009326:	791b      	ldrb	r3, [r3, #4]
 8009328:	2b0d      	cmp	r3, #13
 800932a:	d103      	bne.n	8009334 <CON_receiveData+0x1c>
    {
      g_CON_context.isDataComplete = true;
 800932c:	4b0c      	ldr	r3, [pc, #48]	; (8009360 <CON_receiveData+0x48>)
 800932e:	2201      	movs	r2, #1
 8009330:	771a      	strb	r2, [r3, #28]
 8009332:	e00c      	b.n	800934e <CON_receiveData+0x36>
    }
    else
    {
      g_CON_context.data[g_CON_context.dataSize] = g_CON_context.datum;
 8009334:	4b0a      	ldr	r3, [pc, #40]	; (8009360 <CON_receiveData+0x48>)
 8009336:	699b      	ldr	r3, [r3, #24]
 8009338:	4a09      	ldr	r2, [pc, #36]	; (8009360 <CON_receiveData+0x48>)
 800933a:	7911      	ldrb	r1, [r2, #4]
 800933c:	4a08      	ldr	r2, [pc, #32]	; (8009360 <CON_receiveData+0x48>)
 800933e:	4413      	add	r3, r2
 8009340:	460a      	mov	r2, r1
 8009342:	715a      	strb	r2, [r3, #5]
      g_CON_context.dataSize++;
 8009344:	4b06      	ldr	r3, [pc, #24]	; (8009360 <CON_receiveData+0x48>)
 8009346:	699b      	ldr	r3, [r3, #24]
 8009348:	3301      	adds	r3, #1
 800934a:	4a05      	ldr	r2, [pc, #20]	; (8009360 <CON_receiveData+0x48>)
 800934c:	6193      	str	r3, [r2, #24]
    }
  }

  HAL_UART_Receive_IT(g_CON_context.uartHandle, &g_CON_context.datum, 1);
 800934e:	4b04      	ldr	r3, [pc, #16]	; (8009360 <CON_receiveData+0x48>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	2201      	movs	r2, #1
 8009354:	4903      	ldr	r1, [pc, #12]	; (8009364 <CON_receiveData+0x4c>)
 8009356:	4618      	mov	r0, r3
 8009358:	f7ff f82a 	bl	80083b0 <HAL_UART_Receive_IT>

  return;
 800935c:	bf00      	nop
}
 800935e:	bd80      	pop	{r7, pc}
 8009360:	2000024c 	.word	0x2000024c
 8009364:	20000250 	.word	0x20000250

08009368 <CON_updateFifo>:

void CON_updateFifo(T_SFO_Handle *p_fifo)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b082      	sub	sp, #8
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
  if (g_CON_context.isDataComplete == false)
 8009370:	4b0c      	ldr	r3, [pc, #48]	; (80093a4 <CON_updateFifo+0x3c>)
 8009372:	7f1b      	ldrb	r3, [r3, #28]
 8009374:	f083 0301 	eor.w	r3, r3, #1
 8009378:	b2db      	uxtb	r3, r3
 800937a:	2b00      	cmp	r3, #0
 800937c:	d10d      	bne.n	800939a <CON_updateFifo+0x32>
  {
    ; /* Nothing to do */
  }
  else
  {
    SFO_push    (p_fifo, &g_CON_context.data);
 800937e:	490a      	ldr	r1, [pc, #40]	; (80093a8 <CON_updateFifo+0x40>)
 8009380:	6878      	ldr	r0, [r7, #4]
 8009382:	f001 fe39 	bl	800aff8 <SFO_push>
    SFO_initData(        &g_CON_context.data);
 8009386:	4808      	ldr	r0, [pc, #32]	; (80093a8 <CON_updateFifo+0x40>)
 8009388:	f001 fe10 	bl	800afac <SFO_initData>

    g_CON_context.dataSize       = 0;
 800938c:	4b05      	ldr	r3, [pc, #20]	; (80093a4 <CON_updateFifo+0x3c>)
 800938e:	2200      	movs	r2, #0
 8009390:	619a      	str	r2, [r3, #24]
    g_CON_context.isDataComplete = false;
 8009392:	4b04      	ldr	r3, [pc, #16]	; (80093a4 <CON_updateFifo+0x3c>)
 8009394:	2200      	movs	r2, #0
 8009396:	771a      	strb	r2, [r3, #28]
  }

  return;
 8009398:	bf00      	nop
 800939a:	bf00      	nop
}
 800939c:	3708      	adds	r7, #8
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd80      	pop	{r7, pc}
 80093a2:	bf00      	nop
 80093a4:	2000024c 	.word	0x2000024c
 80093a8:	20000251 	.word	0x20000251

080093ac <CON_sendString>:

void CON_sendString(char *p_string, uint32_t p_length)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b082      	sub	sp, #8
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
 80093b4:	6039      	str	r1, [r7, #0]
  /* As this method is using for logging/debug, we will not deal with failure cases */
  (void)HAL_UART_Transmit(g_CON_context.uartHandle,
 80093b6:	4b06      	ldr	r3, [pc, #24]	; (80093d0 <CON_sendString+0x24>)
 80093b8:	6818      	ldr	r0, [r3, #0]
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	b29a      	uxth	r2, r3
 80093be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80093c2:	6879      	ldr	r1, [r7, #4]
 80093c4:	f7fe ff62 	bl	800828c <HAL_UART_Transmit>
               (uint8_t *)p_string,
                          p_length,
                          CST_UART_TRANSMIT_TIMEOUT_IN_MS);

  return;
 80093c8:	bf00      	nop
}
 80093ca:	3708      	adds	r7, #8
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bd80      	pop	{r7, pc}
 80093d0:	2000024c 	.word	0x2000024c

080093d4 <DRV_init>:
void DRV_init(TIM_HandleTypeDef *p_pwmTimerHandle,
              TIM_HandleTypeDef *p_rearLeftEncoderTimerHandle,
              TIM_HandleTypeDef *p_rearRightEncoderTimerHandle,
              TIM_HandleTypeDef *p_frontRightEncoderTimerHandle,
              TIM_HandleTypeDef *p_frontLeftEncoderTimerHandle)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b08c      	sub	sp, #48	; 0x30
 80093d8:	af08      	add	r7, sp, #32
 80093da:	60f8      	str	r0, [r7, #12]
 80093dc:	60b9      	str	r1, [r7, #8]
 80093de:	607a      	str	r2, [r7, #4]
 80093e0:	603b      	str	r3, [r7, #0]
  LOG_info("Initializing Drive module");
 80093e2:	4934      	ldr	r1, [pc, #208]	; (80094b4 <DRV_init+0xe0>)
 80093e4:	2001      	movs	r0, #1
 80093e6:	f001 f9bd 	bl	800a764 <LOG_log>

  g_DRV_context.selectPressedStartTimeInS = 0;
 80093ea:	4b33      	ldr	r3, [pc, #204]	; (80094b8 <DRV_init+0xe4>)
 80093ec:	2200      	movs	r2, #0
 80093ee:	601a      	str	r2, [r3, #0]

  /* Setup all 4 wheels */
  WHL_init(&g_DRV_context.wheelFrontRight,
 80093f0:	2300      	movs	r3, #0
 80093f2:	9306      	str	r3, [sp, #24]
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	9305      	str	r3, [sp, #20]
 80093f8:	2301      	movs	r3, #1
 80093fa:	9304      	str	r3, [sp, #16]
 80093fc:	230c      	movs	r3, #12
 80093fe:	9303      	str	r3, [sp, #12]
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	9302      	str	r3, [sp, #8]
 8009404:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009408:	9301      	str	r3, [sp, #4]
 800940a:	4b2c      	ldr	r3, [pc, #176]	; (80094bc <DRV_init+0xe8>)
 800940c:	9300      	str	r3, [sp, #0]
 800940e:	2304      	movs	r3, #4
 8009410:	4a2b      	ldr	r2, [pc, #172]	; (80094c0 <DRV_init+0xec>)
 8009412:	492c      	ldr	r1, [pc, #176]	; (80094c4 <DRV_init+0xf0>)
 8009414:	482c      	ldr	r0, [pc, #176]	; (80094c8 <DRV_init+0xf4>)
 8009416:	f002 f845 	bl	800b4a4 <WHL_init>
            TIM_CHANNEL_4,
            true,
            p_frontRightEncoderTimerHandle,
            STP_DEFAULT_MOTORS_MODE);

  WHL_init(&g_DRV_context.wheelFrontLeft,
 800941a:	2300      	movs	r3, #0
 800941c:	9306      	str	r3, [sp, #24]
 800941e:	69bb      	ldr	r3, [r7, #24]
 8009420:	9305      	str	r3, [sp, #20]
 8009422:	2300      	movs	r3, #0
 8009424:	9304      	str	r3, [sp, #16]
 8009426:	2308      	movs	r3, #8
 8009428:	9303      	str	r3, [sp, #12]
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	9302      	str	r3, [sp, #8]
 800942e:	2310      	movs	r3, #16
 8009430:	9301      	str	r3, [sp, #4]
 8009432:	4b26      	ldr	r3, [pc, #152]	; (80094cc <DRV_init+0xf8>)
 8009434:	9300      	str	r3, [sp, #0]
 8009436:	2320      	movs	r3, #32
 8009438:	4a24      	ldr	r2, [pc, #144]	; (80094cc <DRV_init+0xf8>)
 800943a:	4925      	ldr	r1, [pc, #148]	; (80094d0 <DRV_init+0xfc>)
 800943c:	4825      	ldr	r0, [pc, #148]	; (80094d4 <DRV_init+0x100>)
 800943e:	f002 f831 	bl	800b4a4 <WHL_init>
            TIM_CHANNEL_3,
            false,
            p_frontLeftEncoderTimerHandle,
            STP_DEFAULT_MOTORS_MODE);

  WHL_init(&g_DRV_context.wheelRearLeft,
 8009442:	2300      	movs	r3, #0
 8009444:	9306      	str	r3, [sp, #24]
 8009446:	68bb      	ldr	r3, [r7, #8]
 8009448:	9305      	str	r3, [sp, #20]
 800944a:	2300      	movs	r3, #0
 800944c:	9304      	str	r3, [sp, #16]
 800944e:	2304      	movs	r3, #4
 8009450:	9303      	str	r3, [sp, #12]
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	9302      	str	r3, [sp, #8]
 8009456:	2320      	movs	r3, #32
 8009458:	9301      	str	r3, [sp, #4]
 800945a:	4b18      	ldr	r3, [pc, #96]	; (80094bc <DRV_init+0xe8>)
 800945c:	9300      	str	r3, [sp, #0]
 800945e:	2310      	movs	r3, #16
 8009460:	4a16      	ldr	r2, [pc, #88]	; (80094bc <DRV_init+0xe8>)
 8009462:	491d      	ldr	r1, [pc, #116]	; (80094d8 <DRV_init+0x104>)
 8009464:	481d      	ldr	r0, [pc, #116]	; (80094dc <DRV_init+0x108>)
 8009466:	f002 f81d 	bl	800b4a4 <WHL_init>
            TIM_CHANNEL_2,
            false,
            p_rearLeftEncoderTimerHandle,
            STP_DEFAULT_MOTORS_MODE);

  WHL_init(&g_DRV_context.wheelRearRight,
 800946a:	2300      	movs	r3, #0
 800946c:	9306      	str	r3, [sp, #24]
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	9305      	str	r3, [sp, #20]
 8009472:	2301      	movs	r3, #1
 8009474:	9304      	str	r3, [sp, #16]
 8009476:	2300      	movs	r3, #0
 8009478:	9303      	str	r3, [sp, #12]
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	9302      	str	r3, [sp, #8]
 800947e:	2302      	movs	r3, #2
 8009480:	9301      	str	r3, [sp, #4]
 8009482:	4b12      	ldr	r3, [pc, #72]	; (80094cc <DRV_init+0xf8>)
 8009484:	9300      	str	r3, [sp, #0]
 8009486:	2301      	movs	r3, #1
 8009488:	4a10      	ldr	r2, [pc, #64]	; (80094cc <DRV_init+0xf8>)
 800948a:	4915      	ldr	r1, [pc, #84]	; (80094e0 <DRV_init+0x10c>)
 800948c:	4815      	ldr	r0, [pc, #84]	; (80094e4 <DRV_init+0x110>)
 800948e:	f002 f809 	bl	800b4a4 <WHL_init>
            true,
            p_rearRightEncoderTimerHandle,
            STP_DEFAULT_MOTORS_MODE);

  /* Consider that bluetooth controller is OFF by default. Pressing START is needed. */
  g_DRV_context.isBluetoothOn = false;
 8009492:	4b09      	ldr	r3, [pc, #36]	; (80094b8 <DRV_init+0xe4>)
 8009494:	2200      	movs	r2, #0
 8009496:	711a      	strb	r2, [r3, #4]

  /* Activate motors or not by default (de-activating them is used for debug) */
  g_DRV_context.areMotorsOn = STP_DEFAULT_MOTORS_MODE;
 8009498:	4b07      	ldr	r3, [pc, #28]	; (80094b8 <DRV_init+0xe4>)
 800949a:	2200      	movs	r2, #0
 800949c:	715a      	strb	r2, [r3, #5]

  /* Start with default drive mode (different in debug and in release) */
  g_DRV_context.mode = STP_DEFAULT_DRIVE_MODE;
 800949e:	4b06      	ldr	r3, [pc, #24]	; (80094b8 <DRV_init+0xe4>)
 80094a0:	2200      	movs	r2, #0
 80094a2:	719a      	strb	r2, [r3, #6]

  DRV_logInfo(false);
 80094a4:	2000      	movs	r0, #0
 80094a6:	f000 fc61 	bl	8009d6c <DRV_logInfo>

  return;
 80094aa:	bf00      	nop
}
 80094ac:	3710      	adds	r7, #16
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}
 80094b2:	bf00      	nop
 80094b4:	08010634 	.word	0x08010634
 80094b8:	2000026c 	.word	0x2000026c
 80094bc:	40011000 	.word	0x40011000
 80094c0:	40011400 	.word	0x40011400
 80094c4:	08010650 	.word	0x08010650
 80094c8:	20000274 	.word	0x20000274
 80094cc:	40010c00 	.word	0x40010c00
 80094d0:	0801065c 	.word	0x0801065c
 80094d4:	2000031c 	.word	0x2000031c
 80094d8:	08010668 	.word	0x08010668
 80094dc:	200003c4 	.word	0x200003c4
 80094e0:	08010674 	.word	0x08010674
 80094e4:	2000046c 	.word	0x2000046c

080094e8 <DRV_updateEncoder>:

void DRV_updateEncoder(TIM_HandleTypeDef *p_encoderTimerHandle)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b084      	sub	sp, #16
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
  int16_t l_count;

  l_count = __HAL_TIM_GET_COUNTER(p_encoderTimerHandle);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094f6:	81fb      	strh	r3, [r7, #14]

  /* Check the handle of the triggering timer and update encoder accordingly */
  if (p_encoderTimerHandle == g_DRV_context.wheelFrontRight.encoder.timerHandle)
 80094f8:	4b1b      	ldr	r3, [pc, #108]	; (8009568 <DRV_updateEncoder+0x80>)
 80094fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094fc:	687a      	ldr	r2, [r7, #4]
 80094fe:	429a      	cmp	r2, r3
 8009500:	d106      	bne.n	8009510 <DRV_updateEncoder+0x28>
  {
    WHL_updateEncoder(&g_DRV_context.wheelFrontRight, l_count);
 8009502:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009506:	4619      	mov	r1, r3
 8009508:	4818      	ldr	r0, [pc, #96]	; (800956c <DRV_updateEncoder+0x84>)
 800950a:	f002 f846 	bl	800b59a <WHL_updateEncoder>
  else
  {
    ; /* Nothing to do */
  }

  return;
 800950e:	e026      	b.n	800955e <DRV_updateEncoder+0x76>
  else if (p_encoderTimerHandle == g_DRV_context.wheelFrontLeft.encoder.timerHandle)
 8009510:	4b15      	ldr	r3, [pc, #84]	; (8009568 <DRV_updateEncoder+0x80>)
 8009512:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009516:	687a      	ldr	r2, [r7, #4]
 8009518:	429a      	cmp	r2, r3
 800951a:	d106      	bne.n	800952a <DRV_updateEncoder+0x42>
    WHL_updateEncoder(&g_DRV_context.wheelFrontLeft, l_count);
 800951c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009520:	4619      	mov	r1, r3
 8009522:	4813      	ldr	r0, [pc, #76]	; (8009570 <DRV_updateEncoder+0x88>)
 8009524:	f002 f839 	bl	800b59a <WHL_updateEncoder>
  return;
 8009528:	e019      	b.n	800955e <DRV_updateEncoder+0x76>
  else if (p_encoderTimerHandle == g_DRV_context.wheelRearRight.encoder.timerHandle)
 800952a:	4b0f      	ldr	r3, [pc, #60]	; (8009568 <DRV_updateEncoder+0x80>)
 800952c:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 8009530:	687a      	ldr	r2, [r7, #4]
 8009532:	429a      	cmp	r2, r3
 8009534:	d106      	bne.n	8009544 <DRV_updateEncoder+0x5c>
    WHL_updateEncoder(&g_DRV_context.wheelRearRight, l_count);
 8009536:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800953a:	4619      	mov	r1, r3
 800953c:	480d      	ldr	r0, [pc, #52]	; (8009574 <DRV_updateEncoder+0x8c>)
 800953e:	f002 f82c 	bl	800b59a <WHL_updateEncoder>
  return;
 8009542:	e00c      	b.n	800955e <DRV_updateEncoder+0x76>
  else if (p_encoderTimerHandle == g_DRV_context.wheelRearLeft.encoder.timerHandle)
 8009544:	4b08      	ldr	r3, [pc, #32]	; (8009568 <DRV_updateEncoder+0x80>)
 8009546:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 800954a:	687a      	ldr	r2, [r7, #4]
 800954c:	429a      	cmp	r2, r3
 800954e:	d106      	bne.n	800955e <DRV_updateEncoder+0x76>
    WHL_updateEncoder(&g_DRV_context.wheelRearLeft, l_count);
 8009550:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009554:	4619      	mov	r1, r3
 8009556:	4808      	ldr	r0, [pc, #32]	; (8009578 <DRV_updateEncoder+0x90>)
 8009558:	f002 f81f 	bl	800b59a <WHL_updateEncoder>
  return;
 800955c:	bf00      	nop
 800955e:	bf00      	nop
}
 8009560:	3710      	adds	r7, #16
 8009562:	46bd      	mov	sp, r7
 8009564:	bd80      	pop	{r7, pc}
 8009566:	bf00      	nop
 8009568:	2000026c 	.word	0x2000026c
 800956c:	20000274 	.word	0x20000274
 8009570:	2000031c 	.word	0x2000031c
 8009574:	2000046c 	.word	0x2000046c
 8009578:	200003c4 	.word	0x200003c4

0800957c <DRV_updateFromBluetooth>:

void DRV_updateFromBluetooth(T_BLU_Data *p_bluetoothData)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b084      	sub	sp, #16
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
  uint32_t l_currentTimeInS;
  uint32_t l_speed;

  if (p_bluetoothData->button == BLU_BUTTON_START)
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	7c1b      	ldrb	r3, [r3, #16]
 8009588:	2b04      	cmp	r3, #4
 800958a:	d10f      	bne.n	80095ac <DRV_updateFromBluetooth+0x30>
  {
    if (g_DRV_context.isBluetoothOn == false)
 800958c:	4ba3      	ldr	r3, [pc, #652]	; (800981c <DRV_updateFromBluetooth+0x2a0>)
 800958e:	791b      	ldrb	r3, [r3, #4]
 8009590:	f083 0301 	eor.w	r3, r3, #1
 8009594:	b2db      	uxtb	r3, r3
 8009596:	2b00      	cmp	r3, #0
 8009598:	f000 813b 	beq.w	8009812 <DRV_updateFromBluetooth+0x296>
    {
      LOG_info("Bluetooth controller detected ON");
 800959c:	49a0      	ldr	r1, [pc, #640]	; (8009820 <DRV_updateFromBluetooth+0x2a4>)
 800959e:	2001      	movs	r0, #1
 80095a0:	f001 f8e0 	bl	800a764 <LOG_log>
      g_DRV_context.isBluetoothOn = true;
 80095a4:	4b9d      	ldr	r3, [pc, #628]	; (800981c <DRV_updateFromBluetooth+0x2a0>)
 80095a6:	2201      	movs	r2, #1
 80095a8:	711a      	strb	r2, [r3, #4]
        DRV_stop();
      }
    }
  }

  return;
 80095aa:	e132      	b.n	8009812 <DRV_updateFromBluetooth+0x296>
  else if (g_DRV_context.isBluetoothOn == false)
 80095ac:	4b9b      	ldr	r3, [pc, #620]	; (800981c <DRV_updateFromBluetooth+0x2a0>)
 80095ae:	791b      	ldrb	r3, [r3, #4]
 80095b0:	f083 0301 	eor.w	r3, r3, #1
 80095b4:	b2db      	uxtb	r3, r3
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	f040 812b 	bne.w	8009812 <DRV_updateFromBluetooth+0x296>
    l_currentTimeInS = UTI_getTimeS();
 80095bc:	f001 fe84 	bl	800b2c8 <UTI_getTimeS>
 80095c0:	60f8      	str	r0, [r7, #12]
    switch (p_bluetoothData->button)
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	7c1b      	ldrb	r3, [r3, #16]
 80095c6:	3b01      	subs	r3, #1
 80095c8:	2b0f      	cmp	r3, #15
 80095ca:	d861      	bhi.n	8009690 <DRV_updateFromBluetooth+0x114>
 80095cc:	a201      	add	r2, pc, #4	; (adr r2, 80095d4 <DRV_updateFromBluetooth+0x58>)
 80095ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095d2:	bf00      	nop
 80095d4:	08009669 	.word	0x08009669
 80095d8:	08009691 	.word	0x08009691
 80095dc:	08009691 	.word	0x08009691
 80095e0:	08009691 	.word	0x08009691
 80095e4:	08009691 	.word	0x08009691
 80095e8:	08009691 	.word	0x08009691
 80095ec:	08009691 	.word	0x08009691
 80095f0:	08009691 	.word	0x08009691
 80095f4:	08009691 	.word	0x08009691
 80095f8:	08009691 	.word	0x08009691
 80095fc:	08009691 	.word	0x08009691
 8009600:	08009691 	.word	0x08009691
 8009604:	08009691 	.word	0x08009691
 8009608:	0800964d 	.word	0x0800964d
 800960c:	08009631 	.word	0x08009631
 8009610:	08009615 	.word	0x08009615
        if (g_DRV_context.mode != DRV_MODE_MANUAL_FIXED_SPEED)
 8009614:	4b81      	ldr	r3, [pc, #516]	; (800981c <DRV_updateFromBluetooth+0x2a0>)
 8009616:	799b      	ldrb	r3, [r3, #6]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d03b      	beq.n	8009694 <DRV_updateFromBluetooth+0x118>
          DRV_stop();
 800961c:	f000 fd6c 	bl	800a0f8 <DRV_stop>
          g_DRV_context.mode = DRV_MODE_MANUAL_FIXED_SPEED;
 8009620:	4b7e      	ldr	r3, [pc, #504]	; (800981c <DRV_updateFromBluetooth+0x2a0>)
 8009622:	2200      	movs	r2, #0
 8009624:	719a      	strb	r2, [r3, #6]
          LOG_info("Drive mode now DRV_MODE_MANUAL_FIXED_SPEED");
 8009626:	497f      	ldr	r1, [pc, #508]	; (8009824 <DRV_updateFromBluetooth+0x2a8>)
 8009628:	2001      	movs	r0, #1
 800962a:	f001 f89b 	bl	800a764 <LOG_log>
        break;
 800962e:	e031      	b.n	8009694 <DRV_updateFromBluetooth+0x118>
        if (g_DRV_context.mode != DRV_MODE_MANUAL_VARIABLE_SPEED)
 8009630:	4b7a      	ldr	r3, [pc, #488]	; (800981c <DRV_updateFromBluetooth+0x2a0>)
 8009632:	799b      	ldrb	r3, [r3, #6]
 8009634:	2b01      	cmp	r3, #1
 8009636:	d02f      	beq.n	8009698 <DRV_updateFromBluetooth+0x11c>
          DRV_stop();
 8009638:	f000 fd5e 	bl	800a0f8 <DRV_stop>
          g_DRV_context.mode = DRV_MODE_MANUAL_VARIABLE_SPEED;
 800963c:	4b77      	ldr	r3, [pc, #476]	; (800981c <DRV_updateFromBluetooth+0x2a0>)
 800963e:	2201      	movs	r2, #1
 8009640:	719a      	strb	r2, [r3, #6]
          LOG_info("Drive mode now DRV_MODE_MANUAL_VARIABLE_SPEED");
 8009642:	4979      	ldr	r1, [pc, #484]	; (8009828 <DRV_updateFromBluetooth+0x2ac>)
 8009644:	2001      	movs	r0, #1
 8009646:	f001 f88d 	bl	800a764 <LOG_log>
        break;
 800964a:	e025      	b.n	8009698 <DRV_updateFromBluetooth+0x11c>
        if (g_DRV_context.mode != DRV_MODE_MASTER_BOARD_CONTROL)
 800964c:	4b73      	ldr	r3, [pc, #460]	; (800981c <DRV_updateFromBluetooth+0x2a0>)
 800964e:	799b      	ldrb	r3, [r3, #6]
 8009650:	2b02      	cmp	r3, #2
 8009652:	d023      	beq.n	800969c <DRV_updateFromBluetooth+0x120>
          DRV_stop();
 8009654:	f000 fd50 	bl	800a0f8 <DRV_stop>
          g_DRV_context.mode = DRV_MODE_MASTER_BOARD_CONTROL;
 8009658:	4b70      	ldr	r3, [pc, #448]	; (800981c <DRV_updateFromBluetooth+0x2a0>)
 800965a:	2202      	movs	r2, #2
 800965c:	719a      	strb	r2, [r3, #6]
          LOG_info("Drive mode now DRV_MODE_MASTER_BOARD_CONTROL");
 800965e:	4973      	ldr	r1, [pc, #460]	; (800982c <DRV_updateFromBluetooth+0x2b0>)
 8009660:	2001      	movs	r0, #1
 8009662:	f001 f87f 	bl	800a764 <LOG_log>
        break;
 8009666:	e019      	b.n	800969c <DRV_updateFromBluetooth+0x120>
        if (g_DRV_context.selectPressedStartTimeInS == 0)
 8009668:	4b6c      	ldr	r3, [pc, #432]	; (800981c <DRV_updateFromBluetooth+0x2a0>)
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d105      	bne.n	800967c <DRV_updateFromBluetooth+0x100>
          g_DRV_context.selectPressedStartTimeInS = l_currentTimeInS;
 8009670:	4a6a      	ldr	r2, [pc, #424]	; (800981c <DRV_updateFromBluetooth+0x2a0>)
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	6013      	str	r3, [r2, #0]
          DRV_toggleMotorsState();
 8009676:	f000 fbfb 	bl	8009e70 <DRV_toggleMotorsState>
        break;
 800967a:	e011      	b.n	80096a0 <DRV_updateFromBluetooth+0x124>
        else if (l_currentTimeInS - g_DRV_context.selectPressedStartTimeInS < STP_BUTTONS_DEBOUNCE_PERIOD_IN_S)
 800967c:	4b67      	ldr	r3, [pc, #412]	; (800981c <DRV_updateFromBluetooth+0x2a0>)
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	68fa      	ldr	r2, [r7, #12]
 8009682:	1ad3      	subs	r3, r2, r3
 8009684:	2b01      	cmp	r3, #1
 8009686:	d90b      	bls.n	80096a0 <DRV_updateFromBluetooth+0x124>
          g_DRV_context.selectPressedStartTimeInS = 0;
 8009688:	4b64      	ldr	r3, [pc, #400]	; (800981c <DRV_updateFromBluetooth+0x2a0>)
 800968a:	2200      	movs	r2, #0
 800968c:	601a      	str	r2, [r3, #0]
        break;
 800968e:	e007      	b.n	80096a0 <DRV_updateFromBluetooth+0x124>
        break;
 8009690:	bf00      	nop
 8009692:	e006      	b.n	80096a2 <DRV_updateFromBluetooth+0x126>
        break;
 8009694:	bf00      	nop
 8009696:	e004      	b.n	80096a2 <DRV_updateFromBluetooth+0x126>
        break;
 8009698:	bf00      	nop
 800969a:	e002      	b.n	80096a2 <DRV_updateFromBluetooth+0x126>
        break;
 800969c:	bf00      	nop
 800969e:	e000      	b.n	80096a2 <DRV_updateFromBluetooth+0x126>
        break;
 80096a0:	bf00      	nop
    if (g_DRV_context.mode == DRV_MODE_MASTER_BOARD_CONTROL)
 80096a2:	4b5e      	ldr	r3, [pc, #376]	; (800981c <DRV_updateFromBluetooth+0x2a0>)
 80096a4:	799b      	ldrb	r3, [r3, #6]
 80096a6:	2b02      	cmp	r3, #2
 80096a8:	f000 80b3 	beq.w	8009812 <DRV_updateFromBluetooth+0x296>
      if (p_bluetoothData->leftY > STP_JOYSTICKS_THRESHOLD)
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	685b      	ldr	r3, [r3, #4]
 80096b0:	2b0f      	cmp	r3, #15
 80096b2:	dd0c      	ble.n	80096ce <DRV_updateFromBluetooth+0x152>
        l_speed = g_DRV_context.mode == DRV_MODE_MANUAL_FIXED_SPEED ? STP_JOYSTICKS_FIXED_SPEED : p_bluetoothData->leftY;
 80096b4:	4b59      	ldr	r3, [pc, #356]	; (800981c <DRV_updateFromBluetooth+0x2a0>)
 80096b6:	799b      	ldrb	r3, [r3, #6]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d002      	beq.n	80096c2 <DRV_updateFromBluetooth+0x146>
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	685b      	ldr	r3, [r3, #4]
 80096c0:	e000      	b.n	80096c4 <DRV_updateFromBluetooth+0x148>
 80096c2:	2314      	movs	r3, #20
 80096c4:	60bb      	str	r3, [r7, #8]
        DRV_moveForward(l_speed);
 80096c6:	68b8      	ldr	r0, [r7, #8]
 80096c8:	f000 fd34 	bl	800a134 <DRV_moveForward>
  return;
 80096cc:	e0a1      	b.n	8009812 <DRV_updateFromBluetooth+0x296>
      else if (p_bluetoothData->rightY > STP_JOYSTICKS_THRESHOLD)
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	68db      	ldr	r3, [r3, #12]
 80096d2:	2b0f      	cmp	r3, #15
 80096d4:	dd0c      	ble.n	80096f0 <DRV_updateFromBluetooth+0x174>
        l_speed = g_DRV_context.mode == DRV_MODE_MANUAL_FIXED_SPEED ? STP_JOYSTICKS_FIXED_SPEED : p_bluetoothData->rightY;
 80096d6:	4b51      	ldr	r3, [pc, #324]	; (800981c <DRV_updateFromBluetooth+0x2a0>)
 80096d8:	799b      	ldrb	r3, [r3, #6]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d002      	beq.n	80096e4 <DRV_updateFromBluetooth+0x168>
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	68db      	ldr	r3, [r3, #12]
 80096e2:	e000      	b.n	80096e6 <DRV_updateFromBluetooth+0x16a>
 80096e4:	2314      	movs	r3, #20
 80096e6:	60bb      	str	r3, [r7, #8]
        DRV_moveForward(l_speed);
 80096e8:	68b8      	ldr	r0, [r7, #8]
 80096ea:	f000 fd23 	bl	800a134 <DRV_moveForward>
  return;
 80096ee:	e090      	b.n	8009812 <DRV_updateFromBluetooth+0x296>
      else if (p_bluetoothData->leftY < -STP_JOYSTICKS_THRESHOLD)
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	685b      	ldr	r3, [r3, #4]
 80096f4:	f113 0f0f 	cmn.w	r3, #15
 80096f8:	da0d      	bge.n	8009716 <DRV_updateFromBluetooth+0x19a>
        l_speed = g_DRV_context.mode == DRV_MODE_MANUAL_FIXED_SPEED ? STP_JOYSTICKS_FIXED_SPEED : -p_bluetoothData->leftY;
 80096fa:	4b48      	ldr	r3, [pc, #288]	; (800981c <DRV_updateFromBluetooth+0x2a0>)
 80096fc:	799b      	ldrb	r3, [r3, #6]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d003      	beq.n	800970a <DRV_updateFromBluetooth+0x18e>
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	685b      	ldr	r3, [r3, #4]
 8009706:	425b      	negs	r3, r3
 8009708:	e000      	b.n	800970c <DRV_updateFromBluetooth+0x190>
 800970a:	2314      	movs	r3, #20
 800970c:	60bb      	str	r3, [r7, #8]
        DRV_moveBackward(l_speed);
 800970e:	68b8      	ldr	r0, [r7, #8]
 8009710:	f000 fd3a 	bl	800a188 <DRV_moveBackward>
  return;
 8009714:	e07d      	b.n	8009812 <DRV_updateFromBluetooth+0x296>
      else if (p_bluetoothData->rightY < -STP_JOYSTICKS_THRESHOLD)
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	68db      	ldr	r3, [r3, #12]
 800971a:	f113 0f0f 	cmn.w	r3, #15
 800971e:	da0d      	bge.n	800973c <DRV_updateFromBluetooth+0x1c0>
        l_speed = g_DRV_context.mode == DRV_MODE_MANUAL_FIXED_SPEED ? STP_JOYSTICKS_FIXED_SPEED : -p_bluetoothData->rightY;
 8009720:	4b3e      	ldr	r3, [pc, #248]	; (800981c <DRV_updateFromBluetooth+0x2a0>)
 8009722:	799b      	ldrb	r3, [r3, #6]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d003      	beq.n	8009730 <DRV_updateFromBluetooth+0x1b4>
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	68db      	ldr	r3, [r3, #12]
 800972c:	425b      	negs	r3, r3
 800972e:	e000      	b.n	8009732 <DRV_updateFromBluetooth+0x1b6>
 8009730:	2314      	movs	r3, #20
 8009732:	60bb      	str	r3, [r7, #8]
        DRV_moveBackward(l_speed);
 8009734:	68b8      	ldr	r0, [r7, #8]
 8009736:	f000 fd27 	bl	800a188 <DRV_moveBackward>
  return;
 800973a:	e06a      	b.n	8009812 <DRV_updateFromBluetooth+0x296>
      else if (p_bluetoothData->leftX < -STP_JOYSTICKS_THRESHOLD)
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f113 0f0f 	cmn.w	r3, #15
 8009744:	da0d      	bge.n	8009762 <DRV_updateFromBluetooth+0x1e6>
        l_speed = g_DRV_context.mode == DRV_MODE_MANUAL_FIXED_SPEED ? STP_JOYSTICKS_FIXED_SPEED : -p_bluetoothData->leftX;
 8009746:	4b35      	ldr	r3, [pc, #212]	; (800981c <DRV_updateFromBluetooth+0x2a0>)
 8009748:	799b      	ldrb	r3, [r3, #6]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d003      	beq.n	8009756 <DRV_updateFromBluetooth+0x1da>
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	425b      	negs	r3, r3
 8009754:	e000      	b.n	8009758 <DRV_updateFromBluetooth+0x1dc>
 8009756:	2314      	movs	r3, #20
 8009758:	60bb      	str	r3, [r7, #8]
        DRV_turnLeft(l_speed);
 800975a:	68b8      	ldr	r0, [r7, #8]
 800975c:	f000 fde6 	bl	800a32c <DRV_turnLeft>
  return;
 8009760:	e057      	b.n	8009812 <DRV_updateFromBluetooth+0x296>
      else if (p_bluetoothData->leftX > STP_JOYSTICKS_THRESHOLD)
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	2b0f      	cmp	r3, #15
 8009768:	dd0c      	ble.n	8009784 <DRV_updateFromBluetooth+0x208>
        l_speed = g_DRV_context.mode == DRV_MODE_MANUAL_FIXED_SPEED ? STP_JOYSTICKS_FIXED_SPEED : p_bluetoothData->leftX;
 800976a:	4b2c      	ldr	r3, [pc, #176]	; (800981c <DRV_updateFromBluetooth+0x2a0>)
 800976c:	799b      	ldrb	r3, [r3, #6]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d002      	beq.n	8009778 <DRV_updateFromBluetooth+0x1fc>
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	e000      	b.n	800977a <DRV_updateFromBluetooth+0x1fe>
 8009778:	2314      	movs	r3, #20
 800977a:	60bb      	str	r3, [r7, #8]
        DRV_turnRight(l_speed);
 800977c:	68b8      	ldr	r0, [r7, #8]
 800977e:	f000 fdff 	bl	800a380 <DRV_turnRight>
  return;
 8009782:	e046      	b.n	8009812 <DRV_updateFromBluetooth+0x296>
      else if (p_bluetoothData->rightX < -STP_JOYSTICKS_THRESHOLD)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	689b      	ldr	r3, [r3, #8]
 8009788:	f113 0f0f 	cmn.w	r3, #15
 800978c:	da0d      	bge.n	80097aa <DRV_updateFromBluetooth+0x22e>
        l_speed = g_DRV_context.mode == DRV_MODE_MANUAL_FIXED_SPEED ? STP_JOYSTICKS_FIXED_SPEED : -p_bluetoothData->rightX;
 800978e:	4b23      	ldr	r3, [pc, #140]	; (800981c <DRV_updateFromBluetooth+0x2a0>)
 8009790:	799b      	ldrb	r3, [r3, #6]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d003      	beq.n	800979e <DRV_updateFromBluetooth+0x222>
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	689b      	ldr	r3, [r3, #8]
 800979a:	425b      	negs	r3, r3
 800979c:	e000      	b.n	80097a0 <DRV_updateFromBluetooth+0x224>
 800979e:	2314      	movs	r3, #20
 80097a0:	60bb      	str	r3, [r7, #8]
        DRV_translateLeft(l_speed);
 80097a2:	68b8      	ldr	r0, [r7, #8]
 80097a4:	f000 fe16 	bl	800a3d4 <DRV_translateLeft>
  return;
 80097a8:	e033      	b.n	8009812 <DRV_updateFromBluetooth+0x296>
      else if (p_bluetoothData->rightX > STP_JOYSTICKS_THRESHOLD)
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	689b      	ldr	r3, [r3, #8]
 80097ae:	2b0f      	cmp	r3, #15
 80097b0:	dd0c      	ble.n	80097cc <DRV_updateFromBluetooth+0x250>
        l_speed = g_DRV_context.mode == DRV_MODE_MANUAL_FIXED_SPEED ? STP_JOYSTICKS_FIXED_SPEED : p_bluetoothData->rightX;
 80097b2:	4b1a      	ldr	r3, [pc, #104]	; (800981c <DRV_updateFromBluetooth+0x2a0>)
 80097b4:	799b      	ldrb	r3, [r3, #6]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d002      	beq.n	80097c0 <DRV_updateFromBluetooth+0x244>
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	689b      	ldr	r3, [r3, #8]
 80097be:	e000      	b.n	80097c2 <DRV_updateFromBluetooth+0x246>
 80097c0:	2314      	movs	r3, #20
 80097c2:	60bb      	str	r3, [r7, #8]
        DRV_translateRight(l_speed);
 80097c4:	68b8      	ldr	r0, [r7, #8]
 80097c6:	f000 fe2f 	bl	800a428 <DRV_translateRight>
  return;
 80097ca:	e022      	b.n	8009812 <DRV_updateFromBluetooth+0x296>
      else if (p_bluetoothData->button == BLU_BUTTON_L1)
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	7c1b      	ldrb	r3, [r3, #16]
 80097d0:	2b0b      	cmp	r3, #11
 80097d2:	d103      	bne.n	80097dc <DRV_updateFromBluetooth+0x260>
        DRV_moveForwardLeft(STP_BUTTONS_FIXED_SPEED);
 80097d4:	2028      	movs	r0, #40	; 0x28
 80097d6:	f000 fd2b 	bl	800a230 <DRV_moveForwardLeft>
  return;
 80097da:	e01a      	b.n	8009812 <DRV_updateFromBluetooth+0x296>
      else if (p_bluetoothData->button == BLU_BUTTON_L2)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	7c1b      	ldrb	r3, [r3, #16]
 80097e0:	2b09      	cmp	r3, #9
 80097e2:	d103      	bne.n	80097ec <DRV_updateFromBluetooth+0x270>
        DRV_moveBackwardRight(STP_BUTTONS_FIXED_SPEED);
 80097e4:	2028      	movs	r0, #40	; 0x28
 80097e6:	f000 fd4d 	bl	800a284 <DRV_moveBackwardRight>
  return;
 80097ea:	e012      	b.n	8009812 <DRV_updateFromBluetooth+0x296>
      else if (p_bluetoothData->button == BLU_BUTTON_R1)
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	7c1b      	ldrb	r3, [r3, #16]
 80097f0:	2b0c      	cmp	r3, #12
 80097f2:	d103      	bne.n	80097fc <DRV_updateFromBluetooth+0x280>
        DRV_moveForwardRight(STP_BUTTONS_FIXED_SPEED);
 80097f4:	2028      	movs	r0, #40	; 0x28
 80097f6:	f000 fcf1 	bl	800a1dc <DRV_moveForwardRight>
  return;
 80097fa:	e00a      	b.n	8009812 <DRV_updateFromBluetooth+0x296>
      else if (p_bluetoothData->button == BLU_BUTTON_R2)
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	7c1b      	ldrb	r3, [r3, #16]
 8009800:	2b0a      	cmp	r3, #10
 8009802:	d103      	bne.n	800980c <DRV_updateFromBluetooth+0x290>
        DRV_moveBackwardLeft(STP_BUTTONS_FIXED_SPEED);
 8009804:	2028      	movs	r0, #40	; 0x28
 8009806:	f000 fd67 	bl	800a2d8 <DRV_moveBackwardLeft>
  return;
 800980a:	e002      	b.n	8009812 <DRV_updateFromBluetooth+0x296>
        DRV_stop();
 800980c:	f000 fc74 	bl	800a0f8 <DRV_stop>
  return;
 8009810:	bf00      	nop
 8009812:	bf00      	nop
}
 8009814:	3710      	adds	r7, #16
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}
 800981a:	bf00      	nop
 800981c:	2000026c 	.word	0x2000026c
 8009820:	08010680 	.word	0x08010680
 8009824:	080106a4 	.word	0x080106a4
 8009828:	080106d0 	.word	0x080106d0
 800982c:	08010700 	.word	0x08010700

08009830 <DRV_updateFromCommands>:

void DRV_updateFromCommands(T_SFO_Handle *p_commandsFifo, bool p_logInfo)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b088      	sub	sp, #32
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
 8009838:	460b      	mov	r3, r1
 800983a:	70fb      	strb	r3, [r7, #3]
  T_SFO_data l_command;
  uint32_t   l_speed;
  float      l_value;

  /* Ignore master board data only whenever a manual mode is selected */
  if (g_DRV_context.mode != DRV_MODE_MASTER_BOARD_CONTROL)
 800983c:	4bb0      	ldr	r3, [pc, #704]	; (8009b00 <DRV_updateFromCommands+0x2d0>)
 800983e:	799b      	ldrb	r3, [r3, #6]
 8009840:	2b02      	cmp	r3, #2
 8009842:	f040 823a 	bne.w	8009cba <DRV_updateFromCommands+0x48a>
  }
  else
  {
    /* Deal with only one command per cycle. If a FIFO overflow occurs, */
    /* FIFO string will report an error, showing us a design issue...   */
    if (SFO_getCount(p_commandsFifo) != 0)
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	f001 fc54 	bl	800b0f4 <SFO_getCount>
 800984c:	4603      	mov	r3, r0
 800984e:	2b00      	cmp	r3, #0
 8009850:	f000 8220 	beq.w	8009c94 <DRV_updateFromCommands+0x464>
    {
      SFO_logInfo(p_commandsFifo);
 8009854:	6878      	ldr	r0, [r7, #4]
 8009856:	f001 fc59 	bl	800b10c <SFO_logInfo>
      SFO_pop    (p_commandsFifo         , &l_command);
 800985a:	f107 030c 	add.w	r3, r7, #12
 800985e:	4619      	mov	r1, r3
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	f001 fc07 	bl	800b074 <SFO_pop>
      LOG_info   ("Drive got command: %s",  l_command);
 8009866:	f107 030c 	add.w	r3, r7, #12
 800986a:	461a      	mov	r2, r3
 800986c:	49a5      	ldr	r1, [pc, #660]	; (8009b04 <DRV_updateFromCommands+0x2d4>)
 800986e:	2001      	movs	r0, #1
 8009870:	f000 ff78 	bl	800a764 <LOG_log>

      /* Stop */
      if ((l_command[0] == 'S') && (l_command[1] == 'T'))
 8009874:	7b3b      	ldrb	r3, [r7, #12]
 8009876:	2b53      	cmp	r3, #83	; 0x53
 8009878:	d115      	bne.n	80098a6 <DRV_updateFromCommands+0x76>
 800987a:	7b7b      	ldrb	r3, [r7, #13]
 800987c:	2b54      	cmp	r3, #84	; 0x54
 800987e:	d112      	bne.n	80098a6 <DRV_updateFromCommands+0x76>
      {
        DRV_setDirectionsStop();
 8009880:	f000 fb36 	bl	8009ef0 <DRV_setDirectionsStop>

        WHL_setPidTarget(&g_DRV_context.wheelFrontRight, 0);
 8009884:	2100      	movs	r1, #0
 8009886:	48a0      	ldr	r0, [pc, #640]	; (8009b08 <DRV_updateFromCommands+0x2d8>)
 8009888:	f001 feea 	bl	800b660 <WHL_setPidTarget>
        WHL_setPidTarget(&g_DRV_context.wheelFrontLeft , 0);
 800988c:	2100      	movs	r1, #0
 800988e:	489f      	ldr	r0, [pc, #636]	; (8009b0c <DRV_updateFromCommands+0x2dc>)
 8009890:	f001 fee6 	bl	800b660 <WHL_setPidTarget>
        WHL_setPidTarget(&g_DRV_context.wheelRearRight , 0);
 8009894:	2100      	movs	r1, #0
 8009896:	489e      	ldr	r0, [pc, #632]	; (8009b10 <DRV_updateFromCommands+0x2e0>)
 8009898:	f001 fee2 	bl	800b660 <WHL_setPidTarget>
        WHL_setPidTarget(&g_DRV_context.wheelRearLeft  , 0);
 800989c:	2100      	movs	r1, #0
 800989e:	489d      	ldr	r0, [pc, #628]	; (8009b14 <DRV_updateFromCommands+0x2e4>)
 80098a0:	f001 fede 	bl	800b660 <WHL_setPidTarget>
 80098a4:	e1f6      	b.n	8009c94 <DRV_updateFromCommands+0x464>
      }
      /* Forward Straight */
      else if ((l_command[0] == 'F') && (l_command[1] == 'S'))
 80098a6:	7b3b      	ldrb	r3, [r7, #12]
 80098a8:	2b46      	cmp	r3, #70	; 0x46
 80098aa:	d122      	bne.n	80098f2 <DRV_updateFromCommands+0xc2>
 80098ac:	7b7b      	ldrb	r3, [r7, #13]
 80098ae:	2b53      	cmp	r3, #83	; 0x53
 80098b0:	d11f      	bne.n	80098f2 <DRV_updateFromCommands+0xc2>
      {
        DVR_getSpeedFromCommand(&l_command[2], &l_speed);
 80098b2:	f107 0208 	add.w	r2, r7, #8
 80098b6:	f107 030c 	add.w	r3, r7, #12
 80098ba:	3302      	adds	r3, #2
 80098bc:	4611      	mov	r1, r2
 80098be:	4618      	mov	r0, r3
 80098c0:	f000 faae 	bl	8009e20 <DVR_getSpeedFromCommand>

        DRV_setDirectionsForward();
 80098c4:	f000 fb30 	bl	8009f28 <DRV_setDirectionsForward>

        WHL_setPidTarget(&g_DRV_context.wheelFrontRight, l_speed);
 80098c8:	68bb      	ldr	r3, [r7, #8]
 80098ca:	4619      	mov	r1, r3
 80098cc:	488e      	ldr	r0, [pc, #568]	; (8009b08 <DRV_updateFromCommands+0x2d8>)
 80098ce:	f001 fec7 	bl	800b660 <WHL_setPidTarget>
        WHL_setPidTarget(&g_DRV_context.wheelFrontLeft , l_speed);
 80098d2:	68bb      	ldr	r3, [r7, #8]
 80098d4:	4619      	mov	r1, r3
 80098d6:	488d      	ldr	r0, [pc, #564]	; (8009b0c <DRV_updateFromCommands+0x2dc>)
 80098d8:	f001 fec2 	bl	800b660 <WHL_setPidTarget>
        WHL_setPidTarget(&g_DRV_context.wheelRearRight , l_speed);
 80098dc:	68bb      	ldr	r3, [r7, #8]
 80098de:	4619      	mov	r1, r3
 80098e0:	488b      	ldr	r0, [pc, #556]	; (8009b10 <DRV_updateFromCommands+0x2e0>)
 80098e2:	f001 febd 	bl	800b660 <WHL_setPidTarget>
        WHL_setPidTarget(&g_DRV_context.wheelRearLeft  , l_speed);
 80098e6:	68bb      	ldr	r3, [r7, #8]
 80098e8:	4619      	mov	r1, r3
 80098ea:	488a      	ldr	r0, [pc, #552]	; (8009b14 <DRV_updateFromCommands+0x2e4>)
 80098ec:	f001 feb8 	bl	800b660 <WHL_setPidTarget>
 80098f0:	e1d0      	b.n	8009c94 <DRV_updateFromCommands+0x464>
      }
      /* Move Backward */
      else if ((l_command[0] == 'B') && (l_command[1] == 'S'))
 80098f2:	7b3b      	ldrb	r3, [r7, #12]
 80098f4:	2b42      	cmp	r3, #66	; 0x42
 80098f6:	d122      	bne.n	800993e <DRV_updateFromCommands+0x10e>
 80098f8:	7b7b      	ldrb	r3, [r7, #13]
 80098fa:	2b53      	cmp	r3, #83	; 0x53
 80098fc:	d11f      	bne.n	800993e <DRV_updateFromCommands+0x10e>
      {
        DVR_getSpeedFromCommand(&l_command[2], &l_speed);
 80098fe:	f107 0208 	add.w	r2, r7, #8
 8009902:	f107 030c 	add.w	r3, r7, #12
 8009906:	3302      	adds	r3, #2
 8009908:	4611      	mov	r1, r2
 800990a:	4618      	mov	r0, r3
 800990c:	f000 fa88 	bl	8009e20 <DVR_getSpeedFromCommand>

        DRV_setDirectionsBackward();
 8009910:	f000 fb26 	bl	8009f60 <DRV_setDirectionsBackward>

        WHL_setPidTarget(&g_DRV_context.wheelFrontRight, l_speed);
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	4619      	mov	r1, r3
 8009918:	487b      	ldr	r0, [pc, #492]	; (8009b08 <DRV_updateFromCommands+0x2d8>)
 800991a:	f001 fea1 	bl	800b660 <WHL_setPidTarget>
        WHL_setPidTarget(&g_DRV_context.wheelFrontLeft , l_speed);
 800991e:	68bb      	ldr	r3, [r7, #8]
 8009920:	4619      	mov	r1, r3
 8009922:	487a      	ldr	r0, [pc, #488]	; (8009b0c <DRV_updateFromCommands+0x2dc>)
 8009924:	f001 fe9c 	bl	800b660 <WHL_setPidTarget>
        WHL_setPidTarget(&g_DRV_context.wheelRearRight , l_speed);
 8009928:	68bb      	ldr	r3, [r7, #8]
 800992a:	4619      	mov	r1, r3
 800992c:	4878      	ldr	r0, [pc, #480]	; (8009b10 <DRV_updateFromCommands+0x2e0>)
 800992e:	f001 fe97 	bl	800b660 <WHL_setPidTarget>
        WHL_setPidTarget(&g_DRV_context.wheelRearLeft  , l_speed);
 8009932:	68bb      	ldr	r3, [r7, #8]
 8009934:	4619      	mov	r1, r3
 8009936:	4877      	ldr	r0, [pc, #476]	; (8009b14 <DRV_updateFromCommands+0x2e4>)
 8009938:	f001 fe92 	bl	800b660 <WHL_setPidTarget>
 800993c:	e1aa      	b.n	8009c94 <DRV_updateFromCommands+0x464>
      }
      /* TuRn (i.e. Rotate) Left */
      else if ((l_command[0] == 'R') && (l_command[1] == 'L'))
 800993e:	7b3b      	ldrb	r3, [r7, #12]
 8009940:	2b52      	cmp	r3, #82	; 0x52
 8009942:	d122      	bne.n	800998a <DRV_updateFromCommands+0x15a>
 8009944:	7b7b      	ldrb	r3, [r7, #13]
 8009946:	2b4c      	cmp	r3, #76	; 0x4c
 8009948:	d11f      	bne.n	800998a <DRV_updateFromCommands+0x15a>
      {
        DVR_getSpeedFromCommand(&l_command[2], &l_speed);
 800994a:	f107 0208 	add.w	r2, r7, #8
 800994e:	f107 030c 	add.w	r3, r7, #12
 8009952:	3302      	adds	r3, #2
 8009954:	4611      	mov	r1, r2
 8009956:	4618      	mov	r0, r3
 8009958:	f000 fa62 	bl	8009e20 <DVR_getSpeedFromCommand>

        DRV_setDirectionsTurnLeft();
 800995c:	f000 fb5c 	bl	800a018 <DRV_setDirectionsTurnLeft>

        WHL_setPidTarget(&g_DRV_context.wheelFrontRight, l_speed);
 8009960:	68bb      	ldr	r3, [r7, #8]
 8009962:	4619      	mov	r1, r3
 8009964:	4868      	ldr	r0, [pc, #416]	; (8009b08 <DRV_updateFromCommands+0x2d8>)
 8009966:	f001 fe7b 	bl	800b660 <WHL_setPidTarget>
        WHL_setPidTarget(&g_DRV_context.wheelFrontLeft , l_speed);
 800996a:	68bb      	ldr	r3, [r7, #8]
 800996c:	4619      	mov	r1, r3
 800996e:	4867      	ldr	r0, [pc, #412]	; (8009b0c <DRV_updateFromCommands+0x2dc>)
 8009970:	f001 fe76 	bl	800b660 <WHL_setPidTarget>
        WHL_setPidTarget(&g_DRV_context.wheelRearRight , l_speed);
 8009974:	68bb      	ldr	r3, [r7, #8]
 8009976:	4619      	mov	r1, r3
 8009978:	4865      	ldr	r0, [pc, #404]	; (8009b10 <DRV_updateFromCommands+0x2e0>)
 800997a:	f001 fe71 	bl	800b660 <WHL_setPidTarget>
        WHL_setPidTarget(&g_DRV_context.wheelRearLeft  , l_speed);
 800997e:	68bb      	ldr	r3, [r7, #8]
 8009980:	4619      	mov	r1, r3
 8009982:	4864      	ldr	r0, [pc, #400]	; (8009b14 <DRV_updateFromCommands+0x2e4>)
 8009984:	f001 fe6c 	bl	800b660 <WHL_setPidTarget>
 8009988:	e184      	b.n	8009c94 <DRV_updateFromCommands+0x464>
      }
      /* TuRn (i.e. Rotate) Right */
      else if ((l_command[0] == 'R') && (l_command[1] == 'R'))
 800998a:	7b3b      	ldrb	r3, [r7, #12]
 800998c:	2b52      	cmp	r3, #82	; 0x52
 800998e:	d122      	bne.n	80099d6 <DRV_updateFromCommands+0x1a6>
 8009990:	7b7b      	ldrb	r3, [r7, #13]
 8009992:	2b52      	cmp	r3, #82	; 0x52
 8009994:	d11f      	bne.n	80099d6 <DRV_updateFromCommands+0x1a6>
      {
        DVR_getSpeedFromCommand(&l_command[2], &l_speed);
 8009996:	f107 0208 	add.w	r2, r7, #8
 800999a:	f107 030c 	add.w	r3, r7, #12
 800999e:	3302      	adds	r3, #2
 80099a0:	4611      	mov	r1, r2
 80099a2:	4618      	mov	r0, r3
 80099a4:	f000 fa3c 	bl	8009e20 <DVR_getSpeedFromCommand>

        DRV_setDirectionsTurnRight();
 80099a8:	f000 fb52 	bl	800a050 <DRV_setDirectionsTurnRight>

        WHL_setPidTarget(&g_DRV_context.wheelFrontRight, l_speed);
 80099ac:	68bb      	ldr	r3, [r7, #8]
 80099ae:	4619      	mov	r1, r3
 80099b0:	4855      	ldr	r0, [pc, #340]	; (8009b08 <DRV_updateFromCommands+0x2d8>)
 80099b2:	f001 fe55 	bl	800b660 <WHL_setPidTarget>
        WHL_setPidTarget(&g_DRV_context.wheelFrontLeft , l_speed);
 80099b6:	68bb      	ldr	r3, [r7, #8]
 80099b8:	4619      	mov	r1, r3
 80099ba:	4854      	ldr	r0, [pc, #336]	; (8009b0c <DRV_updateFromCommands+0x2dc>)
 80099bc:	f001 fe50 	bl	800b660 <WHL_setPidTarget>
        WHL_setPidTarget(&g_DRV_context.wheelRearRight , l_speed);
 80099c0:	68bb      	ldr	r3, [r7, #8]
 80099c2:	4619      	mov	r1, r3
 80099c4:	4852      	ldr	r0, [pc, #328]	; (8009b10 <DRV_updateFromCommands+0x2e0>)
 80099c6:	f001 fe4b 	bl	800b660 <WHL_setPidTarget>
        WHL_setPidTarget(&g_DRV_context.wheelRearLeft  , l_speed);
 80099ca:	68bb      	ldr	r3, [r7, #8]
 80099cc:	4619      	mov	r1, r3
 80099ce:	4851      	ldr	r0, [pc, #324]	; (8009b14 <DRV_updateFromCommands+0x2e4>)
 80099d0:	f001 fe46 	bl	800b660 <WHL_setPidTarget>
 80099d4:	e15e      	b.n	8009c94 <DRV_updateFromCommands+0x464>
      }
      /* Translate Left */
      else if ((l_command[0] == 'T') && (l_command[1] == 'L'))
 80099d6:	7b3b      	ldrb	r3, [r7, #12]
 80099d8:	2b54      	cmp	r3, #84	; 0x54
 80099da:	d122      	bne.n	8009a22 <DRV_updateFromCommands+0x1f2>
 80099dc:	7b7b      	ldrb	r3, [r7, #13]
 80099de:	2b4c      	cmp	r3, #76	; 0x4c
 80099e0:	d11f      	bne.n	8009a22 <DRV_updateFromCommands+0x1f2>
      {
        DVR_getSpeedFromCommand(&l_command[2], &l_speed);
 80099e2:	f107 0208 	add.w	r2, r7, #8
 80099e6:	f107 030c 	add.w	r3, r7, #12
 80099ea:	3302      	adds	r3, #2
 80099ec:	4611      	mov	r1, r2
 80099ee:	4618      	mov	r0, r3
 80099f0:	f000 fa16 	bl	8009e20 <DVR_getSpeedFromCommand>

        DRV_setDirectionsTranslateLeft();
 80099f4:	f000 fb48 	bl	800a088 <DRV_setDirectionsTranslateLeft>

        WHL_setPidTarget(&g_DRV_context.wheelFrontRight, l_speed);
 80099f8:	68bb      	ldr	r3, [r7, #8]
 80099fa:	4619      	mov	r1, r3
 80099fc:	4842      	ldr	r0, [pc, #264]	; (8009b08 <DRV_updateFromCommands+0x2d8>)
 80099fe:	f001 fe2f 	bl	800b660 <WHL_setPidTarget>
        WHL_setPidTarget(&g_DRV_context.wheelFrontLeft , l_speed);
 8009a02:	68bb      	ldr	r3, [r7, #8]
 8009a04:	4619      	mov	r1, r3
 8009a06:	4841      	ldr	r0, [pc, #260]	; (8009b0c <DRV_updateFromCommands+0x2dc>)
 8009a08:	f001 fe2a 	bl	800b660 <WHL_setPidTarget>
        WHL_setPidTarget(&g_DRV_context.wheelRearRight , l_speed);
 8009a0c:	68bb      	ldr	r3, [r7, #8]
 8009a0e:	4619      	mov	r1, r3
 8009a10:	483f      	ldr	r0, [pc, #252]	; (8009b10 <DRV_updateFromCommands+0x2e0>)
 8009a12:	f001 fe25 	bl	800b660 <WHL_setPidTarget>
        WHL_setPidTarget(&g_DRV_context.wheelRearLeft  , l_speed);
 8009a16:	68bb      	ldr	r3, [r7, #8]
 8009a18:	4619      	mov	r1, r3
 8009a1a:	483e      	ldr	r0, [pc, #248]	; (8009b14 <DRV_updateFromCommands+0x2e4>)
 8009a1c:	f001 fe20 	bl	800b660 <WHL_setPidTarget>
 8009a20:	e138      	b.n	8009c94 <DRV_updateFromCommands+0x464>
      }
      /* Translate Right */
      else if ((l_command[0] == 'T') && (l_command[1] == 'R'))
 8009a22:	7b3b      	ldrb	r3, [r7, #12]
 8009a24:	2b54      	cmp	r3, #84	; 0x54
 8009a26:	d122      	bne.n	8009a6e <DRV_updateFromCommands+0x23e>
 8009a28:	7b7b      	ldrb	r3, [r7, #13]
 8009a2a:	2b52      	cmp	r3, #82	; 0x52
 8009a2c:	d11f      	bne.n	8009a6e <DRV_updateFromCommands+0x23e>
      {
        DVR_getSpeedFromCommand(&l_command[2], &l_speed);
 8009a2e:	f107 0208 	add.w	r2, r7, #8
 8009a32:	f107 030c 	add.w	r3, r7, #12
 8009a36:	3302      	adds	r3, #2
 8009a38:	4611      	mov	r1, r2
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	f000 f9f0 	bl	8009e20 <DVR_getSpeedFromCommand>

        DRV_setDirectionsTranslateRight();
 8009a40:	f000 fb3e 	bl	800a0c0 <DRV_setDirectionsTranslateRight>

        WHL_setPidTarget(&g_DRV_context.wheelFrontRight, l_speed);
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	4619      	mov	r1, r3
 8009a48:	482f      	ldr	r0, [pc, #188]	; (8009b08 <DRV_updateFromCommands+0x2d8>)
 8009a4a:	f001 fe09 	bl	800b660 <WHL_setPidTarget>
        WHL_setPidTarget(&g_DRV_context.wheelFrontLeft , l_speed);
 8009a4e:	68bb      	ldr	r3, [r7, #8]
 8009a50:	4619      	mov	r1, r3
 8009a52:	482e      	ldr	r0, [pc, #184]	; (8009b0c <DRV_updateFromCommands+0x2dc>)
 8009a54:	f001 fe04 	bl	800b660 <WHL_setPidTarget>
        WHL_setPidTarget(&g_DRV_context.wheelRearRight , l_speed);
 8009a58:	68bb      	ldr	r3, [r7, #8]
 8009a5a:	4619      	mov	r1, r3
 8009a5c:	482c      	ldr	r0, [pc, #176]	; (8009b10 <DRV_updateFromCommands+0x2e0>)
 8009a5e:	f001 fdff 	bl	800b660 <WHL_setPidTarget>
        WHL_setPidTarget(&g_DRV_context.wheelRearLeft  , l_speed);
 8009a62:	68bb      	ldr	r3, [r7, #8]
 8009a64:	4619      	mov	r1, r3
 8009a66:	482b      	ldr	r0, [pc, #172]	; (8009b14 <DRV_updateFromCommands+0x2e4>)
 8009a68:	f001 fdfa 	bl	800b660 <WHL_setPidTarget>
 8009a6c:	e112      	b.n	8009c94 <DRV_updateFromCommands+0x464>
      }
      /* Forward Left */
      else if ((l_command[0] == 'F') && (l_command[1] == 'L'))
 8009a6e:	7b3b      	ldrb	r3, [r7, #12]
 8009a70:	2b46      	cmp	r3, #70	; 0x46
 8009a72:	d120      	bne.n	8009ab6 <DRV_updateFromCommands+0x286>
 8009a74:	7b7b      	ldrb	r3, [r7, #13]
 8009a76:	2b4c      	cmp	r3, #76	; 0x4c
 8009a78:	d11d      	bne.n	8009ab6 <DRV_updateFromCommands+0x286>
      {
        DVR_getSpeedFromCommand(&l_command[2], &l_speed);
 8009a7a:	f107 0208 	add.w	r2, r7, #8
 8009a7e:	f107 030c 	add.w	r3, r7, #12
 8009a82:	3302      	adds	r3, #2
 8009a84:	4611      	mov	r1, r2
 8009a86:	4618      	mov	r0, r3
 8009a88:	f000 f9ca 	bl	8009e20 <DVR_getSpeedFromCommand>

        DRV_setDirectionsForwardLeft();
 8009a8c:	f000 fa94 	bl	8009fb8 <DRV_setDirectionsForwardLeft>

        WHL_setPidTarget(&g_DRV_context.wheelFrontRight, l_speed);
 8009a90:	68bb      	ldr	r3, [r7, #8]
 8009a92:	4619      	mov	r1, r3
 8009a94:	481c      	ldr	r0, [pc, #112]	; (8009b08 <DRV_updateFromCommands+0x2d8>)
 8009a96:	f001 fde3 	bl	800b660 <WHL_setPidTarget>
        WHL_setPidTarget(&g_DRV_context.wheelFrontLeft ,       0);
 8009a9a:	2100      	movs	r1, #0
 8009a9c:	481b      	ldr	r0, [pc, #108]	; (8009b0c <DRV_updateFromCommands+0x2dc>)
 8009a9e:	f001 fddf 	bl	800b660 <WHL_setPidTarget>
        WHL_setPidTarget(&g_DRV_context.wheelRearRight ,       0);
 8009aa2:	2100      	movs	r1, #0
 8009aa4:	481a      	ldr	r0, [pc, #104]	; (8009b10 <DRV_updateFromCommands+0x2e0>)
 8009aa6:	f001 fddb 	bl	800b660 <WHL_setPidTarget>
        WHL_setPidTarget(&g_DRV_context.wheelRearLeft  , l_speed);
 8009aaa:	68bb      	ldr	r3, [r7, #8]
 8009aac:	4619      	mov	r1, r3
 8009aae:	4819      	ldr	r0, [pc, #100]	; (8009b14 <DRV_updateFromCommands+0x2e4>)
 8009ab0:	f001 fdd6 	bl	800b660 <WHL_setPidTarget>
 8009ab4:	e0ee      	b.n	8009c94 <DRV_updateFromCommands+0x464>
      }
      /* Forward Right */
      else if ((l_command[0] == 'F') && (l_command[1] == 'R'))
 8009ab6:	7b3b      	ldrb	r3, [r7, #12]
 8009ab8:	2b46      	cmp	r3, #70	; 0x46
 8009aba:	d12d      	bne.n	8009b18 <DRV_updateFromCommands+0x2e8>
 8009abc:	7b7b      	ldrb	r3, [r7, #13]
 8009abe:	2b52      	cmp	r3, #82	; 0x52
 8009ac0:	d12a      	bne.n	8009b18 <DRV_updateFromCommands+0x2e8>
      {
        DVR_getSpeedFromCommand(&l_command[2], &l_speed);
 8009ac2:	f107 0208 	add.w	r2, r7, #8
 8009ac6:	f107 030c 	add.w	r3, r7, #12
 8009aca:	3302      	adds	r3, #2
 8009acc:	4611      	mov	r1, r2
 8009ace:	4618      	mov	r0, r3
 8009ad0:	f000 f9a6 	bl	8009e20 <DVR_getSpeedFromCommand>

        DRV_setDirectionsForwardRight();
 8009ad4:	f000 fa60 	bl	8009f98 <DRV_setDirectionsForwardRight>

        WHL_setPidTarget(&g_DRV_context.wheelFrontRight,       0);
 8009ad8:	2100      	movs	r1, #0
 8009ada:	480b      	ldr	r0, [pc, #44]	; (8009b08 <DRV_updateFromCommands+0x2d8>)
 8009adc:	f001 fdc0 	bl	800b660 <WHL_setPidTarget>
        WHL_setPidTarget(&g_DRV_context.wheelFrontLeft , l_speed);
 8009ae0:	68bb      	ldr	r3, [r7, #8]
 8009ae2:	4619      	mov	r1, r3
 8009ae4:	4809      	ldr	r0, [pc, #36]	; (8009b0c <DRV_updateFromCommands+0x2dc>)
 8009ae6:	f001 fdbb 	bl	800b660 <WHL_setPidTarget>
        WHL_setPidTarget(&g_DRV_context.wheelRearRight , l_speed);
 8009aea:	68bb      	ldr	r3, [r7, #8]
 8009aec:	4619      	mov	r1, r3
 8009aee:	4808      	ldr	r0, [pc, #32]	; (8009b10 <DRV_updateFromCommands+0x2e0>)
 8009af0:	f001 fdb6 	bl	800b660 <WHL_setPidTarget>
        WHL_setPidTarget(&g_DRV_context.wheelRearLeft  ,       0);
 8009af4:	2100      	movs	r1, #0
 8009af6:	4807      	ldr	r0, [pc, #28]	; (8009b14 <DRV_updateFromCommands+0x2e4>)
 8009af8:	f001 fdb2 	bl	800b660 <WHL_setPidTarget>
 8009afc:	e0ca      	b.n	8009c94 <DRV_updateFromCommands+0x464>
 8009afe:	bf00      	nop
 8009b00:	2000026c 	.word	0x2000026c
 8009b04:	08010730 	.word	0x08010730
 8009b08:	20000274 	.word	0x20000274
 8009b0c:	2000031c 	.word	0x2000031c
 8009b10:	2000046c 	.word	0x2000046c
 8009b14:	200003c4 	.word	0x200003c4
      }
      /* Backward Left */
      else if ((l_command[0] == 'B') && (l_command[1] == 'L'))
 8009b18:	7b3b      	ldrb	r3, [r7, #12]
 8009b1a:	2b42      	cmp	r3, #66	; 0x42
 8009b1c:	d120      	bne.n	8009b60 <DRV_updateFromCommands+0x330>
 8009b1e:	7b7b      	ldrb	r3, [r7, #13]
 8009b20:	2b4c      	cmp	r3, #76	; 0x4c
 8009b22:	d11d      	bne.n	8009b60 <DRV_updateFromCommands+0x330>
      {
        DVR_getSpeedFromCommand(&l_command[2], &l_speed);
 8009b24:	f107 0208 	add.w	r2, r7, #8
 8009b28:	f107 030c 	add.w	r3, r7, #12
 8009b2c:	3302      	adds	r3, #2
 8009b2e:	4611      	mov	r1, r2
 8009b30:	4618      	mov	r0, r3
 8009b32:	f000 f975 	bl	8009e20 <DVR_getSpeedFromCommand>

        DRV_setDirectionsBackwardLeft();
 8009b36:	f000 fa5f 	bl	8009ff8 <DRV_setDirectionsBackwardLeft>

        WHL_setPidTarget(&g_DRV_context.wheelFrontRight,       0);
 8009b3a:	2100      	movs	r1, #0
 8009b3c:	4861      	ldr	r0, [pc, #388]	; (8009cc4 <DRV_updateFromCommands+0x494>)
 8009b3e:	f001 fd8f 	bl	800b660 <WHL_setPidTarget>
        WHL_setPidTarget(&g_DRV_context.wheelFrontLeft , l_speed);
 8009b42:	68bb      	ldr	r3, [r7, #8]
 8009b44:	4619      	mov	r1, r3
 8009b46:	4860      	ldr	r0, [pc, #384]	; (8009cc8 <DRV_updateFromCommands+0x498>)
 8009b48:	f001 fd8a 	bl	800b660 <WHL_setPidTarget>
        WHL_setPidTarget(&g_DRV_context.wheelRearRight , l_speed);
 8009b4c:	68bb      	ldr	r3, [r7, #8]
 8009b4e:	4619      	mov	r1, r3
 8009b50:	485e      	ldr	r0, [pc, #376]	; (8009ccc <DRV_updateFromCommands+0x49c>)
 8009b52:	f001 fd85 	bl	800b660 <WHL_setPidTarget>
        WHL_setPidTarget(&g_DRV_context.wheelRearLeft  ,       0);
 8009b56:	2100      	movs	r1, #0
 8009b58:	485d      	ldr	r0, [pc, #372]	; (8009cd0 <DRV_updateFromCommands+0x4a0>)
 8009b5a:	f001 fd81 	bl	800b660 <WHL_setPidTarget>
 8009b5e:	e099      	b.n	8009c94 <DRV_updateFromCommands+0x464>
      }
      /* Forward Right */
      else if ((l_command[0] == 'B') && (l_command[1] == 'R'))
 8009b60:	7b3b      	ldrb	r3, [r7, #12]
 8009b62:	2b42      	cmp	r3, #66	; 0x42
 8009b64:	d120      	bne.n	8009ba8 <DRV_updateFromCommands+0x378>
 8009b66:	7b7b      	ldrb	r3, [r7, #13]
 8009b68:	2b52      	cmp	r3, #82	; 0x52
 8009b6a:	d11d      	bne.n	8009ba8 <DRV_updateFromCommands+0x378>
      {
        DVR_getSpeedFromCommand(&l_command[2], &l_speed);
 8009b6c:	f107 0208 	add.w	r2, r7, #8
 8009b70:	f107 030c 	add.w	r3, r7, #12
 8009b74:	3302      	adds	r3, #2
 8009b76:	4611      	mov	r1, r2
 8009b78:	4618      	mov	r0, r3
 8009b7a:	f000 f951 	bl	8009e20 <DVR_getSpeedFromCommand>

        DRV_setDirectionsBackwardRight();
 8009b7e:	f000 fa2b 	bl	8009fd8 <DRV_setDirectionsBackwardRight>

        WHL_setPidTarget(&g_DRV_context.wheelFrontRight, l_speed);
 8009b82:	68bb      	ldr	r3, [r7, #8]
 8009b84:	4619      	mov	r1, r3
 8009b86:	484f      	ldr	r0, [pc, #316]	; (8009cc4 <DRV_updateFromCommands+0x494>)
 8009b88:	f001 fd6a 	bl	800b660 <WHL_setPidTarget>
        WHL_setPidTarget(&g_DRV_context.wheelFrontLeft ,       0);
 8009b8c:	2100      	movs	r1, #0
 8009b8e:	484e      	ldr	r0, [pc, #312]	; (8009cc8 <DRV_updateFromCommands+0x498>)
 8009b90:	f001 fd66 	bl	800b660 <WHL_setPidTarget>
        WHL_setPidTarget(&g_DRV_context.wheelRearRight ,       0);
 8009b94:	2100      	movs	r1, #0
 8009b96:	484d      	ldr	r0, [pc, #308]	; (8009ccc <DRV_updateFromCommands+0x49c>)
 8009b98:	f001 fd62 	bl	800b660 <WHL_setPidTarget>
        WHL_setPidTarget(&g_DRV_context.wheelRearLeft  , l_speed);
 8009b9c:	68bb      	ldr	r3, [r7, #8]
 8009b9e:	4619      	mov	r1, r3
 8009ba0:	484b      	ldr	r0, [pc, #300]	; (8009cd0 <DRV_updateFromCommands+0x4a0>)
 8009ba2:	f001 fd5d 	bl	800b660 <WHL_setPidTarget>
 8009ba6:	e075      	b.n	8009c94 <DRV_updateFromCommands+0x464>
      }
      else if ((l_command[0] == 'K') && (l_command[1] == 'P'))
 8009ba8:	7b3b      	ldrb	r3, [r7, #12]
 8009baa:	2b4b      	cmp	r3, #75	; 0x4b
 8009bac:	d121      	bne.n	8009bf2 <DRV_updateFromCommands+0x3c2>
 8009bae:	7b7b      	ldrb	r3, [r7, #13]
 8009bb0:	2b50      	cmp	r3, #80	; 0x50
 8009bb2:	d11e      	bne.n	8009bf2 <DRV_updateFromCommands+0x3c2>
      {
        l_value = atof(&l_command[2]);
 8009bb4:	f107 030c 	add.w	r3, r7, #12
 8009bb8:	3302      	adds	r3, #2
 8009bba:	4618      	mov	r0, r3
 8009bbc:	f001 fe00 	bl	800b7c0 <atof>
 8009bc0:	4602      	mov	r2, r0
 8009bc2:	460b      	mov	r3, r1
 8009bc4:	4610      	mov	r0, r2
 8009bc6:	4619      	mov	r1, r3
 8009bc8:	f7f6 ffea 	bl	8000ba0 <__aeabi_d2f>
 8009bcc:	4603      	mov	r3, r0
 8009bce:	61fb      	str	r3, [r7, #28]

        WHL_setPidKp(&g_DRV_context.wheelFrontRight, l_value);
 8009bd0:	69f9      	ldr	r1, [r7, #28]
 8009bd2:	483c      	ldr	r0, [pc, #240]	; (8009cc4 <DRV_updateFromCommands+0x494>)
 8009bd4:	f001 fd17 	bl	800b606 <WHL_setPidKp>
        WHL_setPidKp(&g_DRV_context.wheelFrontLeft , l_value);
 8009bd8:	69f9      	ldr	r1, [r7, #28]
 8009bda:	483b      	ldr	r0, [pc, #236]	; (8009cc8 <DRV_updateFromCommands+0x498>)
 8009bdc:	f001 fd13 	bl	800b606 <WHL_setPidKp>
        WHL_setPidKp(&g_DRV_context.wheelRearRight , l_value);
 8009be0:	69f9      	ldr	r1, [r7, #28]
 8009be2:	483a      	ldr	r0, [pc, #232]	; (8009ccc <DRV_updateFromCommands+0x49c>)
 8009be4:	f001 fd0f 	bl	800b606 <WHL_setPidKp>
        WHL_setPidKp(&g_DRV_context.wheelRearLeft  , l_value);
 8009be8:	69f9      	ldr	r1, [r7, #28]
 8009bea:	4839      	ldr	r0, [pc, #228]	; (8009cd0 <DRV_updateFromCommands+0x4a0>)
 8009bec:	f001 fd0b 	bl	800b606 <WHL_setPidKp>
 8009bf0:	e050      	b.n	8009c94 <DRV_updateFromCommands+0x464>
      }
      else if ((l_command[0] == 'K') && (l_command[1] == 'I'))
 8009bf2:	7b3b      	ldrb	r3, [r7, #12]
 8009bf4:	2b4b      	cmp	r3, #75	; 0x4b
 8009bf6:	d121      	bne.n	8009c3c <DRV_updateFromCommands+0x40c>
 8009bf8:	7b7b      	ldrb	r3, [r7, #13]
 8009bfa:	2b49      	cmp	r3, #73	; 0x49
 8009bfc:	d11e      	bne.n	8009c3c <DRV_updateFromCommands+0x40c>
      {
        l_value = atof(&l_command[2]);
 8009bfe:	f107 030c 	add.w	r3, r7, #12
 8009c02:	3302      	adds	r3, #2
 8009c04:	4618      	mov	r0, r3
 8009c06:	f001 fddb 	bl	800b7c0 <atof>
 8009c0a:	4602      	mov	r2, r0
 8009c0c:	460b      	mov	r3, r1
 8009c0e:	4610      	mov	r0, r2
 8009c10:	4619      	mov	r1, r3
 8009c12:	f7f6 ffc5 	bl	8000ba0 <__aeabi_d2f>
 8009c16:	4603      	mov	r3, r0
 8009c18:	61fb      	str	r3, [r7, #28]

        WHL_setPidKi(&g_DRV_context.wheelFrontRight, l_value);
 8009c1a:	69f9      	ldr	r1, [r7, #28]
 8009c1c:	4829      	ldr	r0, [pc, #164]	; (8009cc4 <DRV_updateFromCommands+0x494>)
 8009c1e:	f001 fd01 	bl	800b624 <WHL_setPidKi>
        WHL_setPidKi(&g_DRV_context.wheelFrontLeft , l_value);
 8009c22:	69f9      	ldr	r1, [r7, #28]
 8009c24:	4828      	ldr	r0, [pc, #160]	; (8009cc8 <DRV_updateFromCommands+0x498>)
 8009c26:	f001 fcfd 	bl	800b624 <WHL_setPidKi>
        WHL_setPidKi(&g_DRV_context.wheelRearRight , l_value);
 8009c2a:	69f9      	ldr	r1, [r7, #28]
 8009c2c:	4827      	ldr	r0, [pc, #156]	; (8009ccc <DRV_updateFromCommands+0x49c>)
 8009c2e:	f001 fcf9 	bl	800b624 <WHL_setPidKi>
        WHL_setPidKi(&g_DRV_context.wheelRearLeft  , l_value);
 8009c32:	69f9      	ldr	r1, [r7, #28]
 8009c34:	4826      	ldr	r0, [pc, #152]	; (8009cd0 <DRV_updateFromCommands+0x4a0>)
 8009c36:	f001 fcf5 	bl	800b624 <WHL_setPidKi>
 8009c3a:	e02b      	b.n	8009c94 <DRV_updateFromCommands+0x464>
      }
      else if ((l_command[0] == 'K') && (l_command[1] == 'D'))
 8009c3c:	7b3b      	ldrb	r3, [r7, #12]
 8009c3e:	2b4b      	cmp	r3, #75	; 0x4b
 8009c40:	d121      	bne.n	8009c86 <DRV_updateFromCommands+0x456>
 8009c42:	7b7b      	ldrb	r3, [r7, #13]
 8009c44:	2b44      	cmp	r3, #68	; 0x44
 8009c46:	d11e      	bne.n	8009c86 <DRV_updateFromCommands+0x456>
      {
        l_value = atof(&l_command[2]);
 8009c48:	f107 030c 	add.w	r3, r7, #12
 8009c4c:	3302      	adds	r3, #2
 8009c4e:	4618      	mov	r0, r3
 8009c50:	f001 fdb6 	bl	800b7c0 <atof>
 8009c54:	4602      	mov	r2, r0
 8009c56:	460b      	mov	r3, r1
 8009c58:	4610      	mov	r0, r2
 8009c5a:	4619      	mov	r1, r3
 8009c5c:	f7f6 ffa0 	bl	8000ba0 <__aeabi_d2f>
 8009c60:	4603      	mov	r3, r0
 8009c62:	61fb      	str	r3, [r7, #28]

        WHL_setPidKd(&g_DRV_context.wheelFrontRight, l_value);
 8009c64:	69f9      	ldr	r1, [r7, #28]
 8009c66:	4817      	ldr	r0, [pc, #92]	; (8009cc4 <DRV_updateFromCommands+0x494>)
 8009c68:	f001 fceb 	bl	800b642 <WHL_setPidKd>
        WHL_setPidKd(&g_DRV_context.wheelFrontLeft , l_value);
 8009c6c:	69f9      	ldr	r1, [r7, #28]
 8009c6e:	4816      	ldr	r0, [pc, #88]	; (8009cc8 <DRV_updateFromCommands+0x498>)
 8009c70:	f001 fce7 	bl	800b642 <WHL_setPidKd>
        WHL_setPidKd(&g_DRV_context.wheelRearRight , l_value);
 8009c74:	69f9      	ldr	r1, [r7, #28]
 8009c76:	4815      	ldr	r0, [pc, #84]	; (8009ccc <DRV_updateFromCommands+0x49c>)
 8009c78:	f001 fce3 	bl	800b642 <WHL_setPidKd>
        WHL_setPidKd(&g_DRV_context.wheelRearLeft  , l_value);
 8009c7c:	69f9      	ldr	r1, [r7, #28]
 8009c7e:	4814      	ldr	r0, [pc, #80]	; (8009cd0 <DRV_updateFromCommands+0x4a0>)
 8009c80:	f001 fcdf 	bl	800b642 <WHL_setPidKd>
 8009c84:	e006      	b.n	8009c94 <DRV_updateFromCommands+0x464>
      }
      else
      {
        LOG_error("Drive got unsupported command: '%s'", l_command);
 8009c86:	f107 030c 	add.w	r3, r7, #12
 8009c8a:	461a      	mov	r2, r3
 8009c8c:	4911      	ldr	r1, [pc, #68]	; (8009cd4 <DRV_updateFromCommands+0x4a4>)
 8009c8e:	2003      	movs	r0, #3
 8009c90:	f000 fd68 	bl	800a764 <LOG_log>
      }
    }

    if (p_logInfo == true)
 8009c94:	78fb      	ldrb	r3, [r7, #3]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d002      	beq.n	8009ca0 <DRV_updateFromCommands+0x470>
    {
      DRV_logInfo(true);
 8009c9a:	2001      	movs	r0, #1
 8009c9c:	f000 f866 	bl	8009d6c <DRV_logInfo>
    {
      ; /* Nothing to do */
    }

    /* Update all 4 wheels PIDs, adjusting speeds, to reach targets */
    WHL_updatePidSpeed(&g_DRV_context.wheelFrontRight);
 8009ca0:	4808      	ldr	r0, [pc, #32]	; (8009cc4 <DRV_updateFromCommands+0x494>)
 8009ca2:	f001 fcf1 	bl	800b688 <WHL_updatePidSpeed>
    WHL_updatePidSpeed(&g_DRV_context.wheelFrontLeft );
 8009ca6:	4808      	ldr	r0, [pc, #32]	; (8009cc8 <DRV_updateFromCommands+0x498>)
 8009ca8:	f001 fcee 	bl	800b688 <WHL_updatePidSpeed>
    WHL_updatePidSpeed(&g_DRV_context.wheelRearRight );
 8009cac:	4807      	ldr	r0, [pc, #28]	; (8009ccc <DRV_updateFromCommands+0x49c>)
 8009cae:	f001 fceb 	bl	800b688 <WHL_updatePidSpeed>
    WHL_updatePidSpeed(&g_DRV_context.wheelRearLeft  );
 8009cb2:	4807      	ldr	r0, [pc, #28]	; (8009cd0 <DRV_updateFromCommands+0x4a0>)
 8009cb4:	f001 fce8 	bl	800b688 <WHL_updatePidSpeed>
  }

  return;
 8009cb8:	bf00      	nop
 8009cba:	bf00      	nop
}
 8009cbc:	3720      	adds	r7, #32
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	bd80      	pop	{r7, pc}
 8009cc2:	bf00      	nop
 8009cc4:	20000274 	.word	0x20000274
 8009cc8:	2000031c 	.word	0x2000031c
 8009ccc:	2000046c 	.word	0x2000046c
 8009cd0:	200003c4 	.word	0x200003c4
 8009cd4:	08010748 	.word	0x08010748

08009cd8 <DRV_reportVelocity>:

void DRV_reportVelocity(void)
{
 8009cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009cda:	b08f      	sub	sp, #60	; 0x3c
 8009cdc:	af04      	add	r7, sp, #16
  float l_averageSpeedFrontLeft;
  float l_averageSpeedRearRight;
  float l_averageSpeedRearLeft;
  char  l_buffer[CST_MASTER_VELOCITY_STRING_LENGTH];

  l_averageSpeedFrontRight = WHL_getAverageSpeed(&g_DRV_context.wheelFrontRight);
 8009cde:	4819      	ldr	r0, [pc, #100]	; (8009d44 <DRV_reportVelocity+0x6c>)
 8009ce0:	f001 fd26 	bl	800b730 <WHL_getAverageSpeed>
 8009ce4:	6278      	str	r0, [r7, #36]	; 0x24
  l_averageSpeedFrontLeft  = WHL_getAverageSpeed(&g_DRV_context.wheelFrontLeft );
 8009ce6:	4818      	ldr	r0, [pc, #96]	; (8009d48 <DRV_reportVelocity+0x70>)
 8009ce8:	f001 fd22 	bl	800b730 <WHL_getAverageSpeed>
 8009cec:	6238      	str	r0, [r7, #32]
  l_averageSpeedRearRight  = WHL_getAverageSpeed(&g_DRV_context.wheelRearRight );
 8009cee:	4817      	ldr	r0, [pc, #92]	; (8009d4c <DRV_reportVelocity+0x74>)
 8009cf0:	f001 fd1e 	bl	800b730 <WHL_getAverageSpeed>
 8009cf4:	61f8      	str	r0, [r7, #28]
  l_averageSpeedRearLeft   = WHL_getAverageSpeed(&g_DRV_context.wheelRearLeft  );
 8009cf6:	4816      	ldr	r0, [pc, #88]	; (8009d50 <DRV_reportVelocity+0x78>)
 8009cf8:	f001 fd1a 	bl	800b730 <WHL_getAverageSpeed>
 8009cfc:	61b8      	str	r0, [r7, #24]

  (void)snprintf(l_buffer,
 8009cfe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009d00:	f7f7 f9fc 	bl	80010fc <__aeabi_f2iz>
 8009d04:	4606      	mov	r6, r0
 8009d06:	6a38      	ldr	r0, [r7, #32]
 8009d08:	f7f7 f9f8 	bl	80010fc <__aeabi_f2iz>
 8009d0c:	4604      	mov	r4, r0
 8009d0e:	69f8      	ldr	r0, [r7, #28]
 8009d10:	f7f7 f9f4 	bl	80010fc <__aeabi_f2iz>
 8009d14:	4605      	mov	r5, r0
 8009d16:	69b8      	ldr	r0, [r7, #24]
 8009d18:	f7f7 f9f0 	bl	80010fc <__aeabi_f2iz>
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	4638      	mov	r0, r7
 8009d20:	9302      	str	r3, [sp, #8]
 8009d22:	9501      	str	r5, [sp, #4]
 8009d24:	9400      	str	r4, [sp, #0]
 8009d26:	4633      	mov	r3, r6
 8009d28:	4a0a      	ldr	r2, [pc, #40]	; (8009d54 <DRV_reportVelocity+0x7c>)
 8009d2a:	2115      	movs	r1, #21
 8009d2c:	f002 fac0 	bl	800c2b0 <sniprintf>
            (int)l_averageSpeedFrontRight,
            (int)l_averageSpeedFrontLeft ,
            (int)l_averageSpeedRearRight ,
            (int)l_averageSpeedRearLeft  );

  MAS_sendString(l_buffer, CST_MASTER_VELOCITY_STRING_LENGTH);
 8009d30:	463b      	mov	r3, r7
 8009d32:	2115      	movs	r1, #21
 8009d34:	4618      	mov	r0, r3
 8009d36:	f000 fdf1 	bl	800a91c <MAS_sendString>

  return;
 8009d3a:	bf00      	nop
}
 8009d3c:	372c      	adds	r7, #44	; 0x2c
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d42:	bf00      	nop
 8009d44:	20000274 	.word	0x20000274
 8009d48:	2000031c 	.word	0x2000031c
 8009d4c:	2000046c 	.word	0x2000046c
 8009d50:	200003c4 	.word	0x200003c4
 8009d54:	0801076c 	.word	0x0801076c

08009d58 <DRV_getMode>:

T_DRV_MODE DRV_getMode(void)
{
 8009d58:	b480      	push	{r7}
 8009d5a:	af00      	add	r7, sp, #0
  return g_DRV_context.mode;
 8009d5c:	4b02      	ldr	r3, [pc, #8]	; (8009d68 <DRV_getMode+0x10>)
 8009d5e:	799b      	ldrb	r3, [r3, #6]
}
 8009d60:	4618      	mov	r0, r3
 8009d62:	46bd      	mov	sp, r7
 8009d64:	bc80      	pop	{r7}
 8009d66:	4770      	bx	lr
 8009d68:	2000026c 	.word	0x2000026c

08009d6c <DRV_logInfo>:

void DRV_logInfo(bool p_compactLog)
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b082      	sub	sp, #8
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	4603      	mov	r3, r0
 8009d74:	71fb      	strb	r3, [r7, #7]
  if (g_DRV_context.mode == DRV_MODE_MANUAL_FIXED_SPEED)
 8009d76:	4b1f      	ldr	r3, [pc, #124]	; (8009df4 <DRV_logInfo+0x88>)
 8009d78:	799b      	ldrb	r3, [r3, #6]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d104      	bne.n	8009d88 <DRV_logInfo+0x1c>
  {
    LOG_info("Drive mode  : MANUAL FIXED SPEED");
 8009d7e:	491e      	ldr	r1, [pc, #120]	; (8009df8 <DRV_logInfo+0x8c>)
 8009d80:	2001      	movs	r0, #1
 8009d82:	f000 fcef 	bl	800a764 <LOG_log>
 8009d86:	e018      	b.n	8009dba <DRV_logInfo+0x4e>
  }
  else if (g_DRV_context.mode == DRV_MODE_MANUAL_VARIABLE_SPEED)
 8009d88:	4b1a      	ldr	r3, [pc, #104]	; (8009df4 <DRV_logInfo+0x88>)
 8009d8a:	799b      	ldrb	r3, [r3, #6]
 8009d8c:	2b01      	cmp	r3, #1
 8009d8e:	d104      	bne.n	8009d9a <DRV_logInfo+0x2e>
  {
    LOG_info("Drive mode  : MANUAL VARIABLE SPEED");
 8009d90:	491a      	ldr	r1, [pc, #104]	; (8009dfc <DRV_logInfo+0x90>)
 8009d92:	2001      	movs	r0, #1
 8009d94:	f000 fce6 	bl	800a764 <LOG_log>
 8009d98:	e00f      	b.n	8009dba <DRV_logInfo+0x4e>
  }
  else if (g_DRV_context.mode == DRV_MODE_MASTER_BOARD_CONTROL)
 8009d9a:	4b16      	ldr	r3, [pc, #88]	; (8009df4 <DRV_logInfo+0x88>)
 8009d9c:	799b      	ldrb	r3, [r3, #6]
 8009d9e:	2b02      	cmp	r3, #2
 8009da0:	d104      	bne.n	8009dac <DRV_logInfo+0x40>
  {
    LOG_info("Drive mode  : MASTER BOARD CONTROL");
 8009da2:	4917      	ldr	r1, [pc, #92]	; (8009e00 <DRV_logInfo+0x94>)
 8009da4:	2001      	movs	r0, #1
 8009da6:	f000 fcdd 	bl	800a764 <LOG_log>
 8009daa:	e006      	b.n	8009dba <DRV_logInfo+0x4e>
  }
  else
  {
    LOG_error("Unsupported drive mode: %u", g_DRV_context.mode);
 8009dac:	4b11      	ldr	r3, [pc, #68]	; (8009df4 <DRV_logInfo+0x88>)
 8009dae:	799b      	ldrb	r3, [r3, #6]
 8009db0:	461a      	mov	r2, r3
 8009db2:	4914      	ldr	r1, [pc, #80]	; (8009e04 <DRV_logInfo+0x98>)
 8009db4:	2003      	movs	r0, #3
 8009db6:	f000 fcd5 	bl	800a764 <LOG_log>
  }

  if (g_DRV_context.areMotorsOn == true)
 8009dba:	4b0e      	ldr	r3, [pc, #56]	; (8009df4 <DRV_logInfo+0x88>)
 8009dbc:	795b      	ldrb	r3, [r3, #5]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d004      	beq.n	8009dcc <DRV_logInfo+0x60>
  {
    LOG_info("Drive motors: ON");
 8009dc2:	4911      	ldr	r1, [pc, #68]	; (8009e08 <DRV_logInfo+0x9c>)
 8009dc4:	2001      	movs	r0, #1
 8009dc6:	f000 fccd 	bl	800a764 <LOG_log>
 8009dca:	e003      	b.n	8009dd4 <DRV_logInfo+0x68>
  }
  else
  {
    LOG_info("Drive motors: OFF");
 8009dcc:	490f      	ldr	r1, [pc, #60]	; (8009e0c <DRV_logInfo+0xa0>)
 8009dce:	2001      	movs	r0, #1
 8009dd0:	f000 fcc8 	bl	800a764 <LOG_log>
  }

  WHL_logInfo(&g_DRV_context.wheelFrontRight);
 8009dd4:	480e      	ldr	r0, [pc, #56]	; (8009e10 <DRV_logInfo+0xa4>)
 8009dd6:	f001 fcbf 	bl	800b758 <WHL_logInfo>
  WHL_logInfo(&g_DRV_context.wheelFrontLeft );
 8009dda:	480e      	ldr	r0, [pc, #56]	; (8009e14 <DRV_logInfo+0xa8>)
 8009ddc:	f001 fcbc 	bl	800b758 <WHL_logInfo>
  WHL_logInfo(&g_DRV_context.wheelRearRight );
 8009de0:	480d      	ldr	r0, [pc, #52]	; (8009e18 <DRV_logInfo+0xac>)
 8009de2:	f001 fcb9 	bl	800b758 <WHL_logInfo>
  WHL_logInfo(&g_DRV_context.wheelRearLeft  );
 8009de6:	480d      	ldr	r0, [pc, #52]	; (8009e1c <DRV_logInfo+0xb0>)
 8009de8:	f001 fcb6 	bl	800b758 <WHL_logInfo>

  return;
 8009dec:	bf00      	nop
}
 8009dee:	3708      	adds	r7, #8
 8009df0:	46bd      	mov	sp, r7
 8009df2:	bd80      	pop	{r7, pc}
 8009df4:	2000026c 	.word	0x2000026c
 8009df8:	08010788 	.word	0x08010788
 8009dfc:	080107ac 	.word	0x080107ac
 8009e00:	080107d0 	.word	0x080107d0
 8009e04:	080107f4 	.word	0x080107f4
 8009e08:	08010810 	.word	0x08010810
 8009e0c:	08010824 	.word	0x08010824
 8009e10:	20000274 	.word	0x20000274
 8009e14:	2000031c 	.word	0x2000031c
 8009e18:	2000046c 	.word	0x2000046c
 8009e1c:	200003c4 	.word	0x200003c4

08009e20 <DVR_getSpeedFromCommand>:

static void DVR_getSpeedFromCommand(char *p_string, uint32_t *p_speed)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b086      	sub	sp, #24
 8009e24:	af02      	add	r7, sp, #8
 8009e26:	6078      	str	r0, [r7, #4]
 8009e28:	6039      	str	r1, [r7, #0]
  uint32_t l_speed;

  l_speed = atoi(p_string);
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	f001 fccb 	bl	800b7c6 <atoi>
 8009e30:	4603      	mov	r3, r0
 8009e32:	60fb      	str	r3, [r7, #12]

  /* Check that speed is in allowed range */
  if ((l_speed < STP_MASTER_MIN_SPEED) || (l_speed > STP_MASTER_MAX_SPEED))
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	2b64      	cmp	r3, #100	; 0x64
 8009e38:	d905      	bls.n	8009e46 <DVR_getSpeedFromCommand+0x26>
  {
    LOG_error("Drive got out of range speed: %u", l_speed);
 8009e3a:	68fa      	ldr	r2, [r7, #12]
 8009e3c:	490b      	ldr	r1, [pc, #44]	; (8009e6c <DVR_getSpeedFromCommand+0x4c>)
 8009e3e:	2003      	movs	r0, #3
 8009e40:	f000 fc90 	bl	800a764 <LOG_log>
                                     STP_DRIVE_MIN_SPEED,
                                     STP_DRIVE_MAX_SPEED,
                                     false);
  }

  return;
 8009e44:	e00e      	b.n	8009e64 <DVR_getSpeedFromCommand+0x44>
    *p_speed = UTI_normalizeIntValue(l_speed ,
 8009e46:	68f8      	ldr	r0, [r7, #12]
 8009e48:	2300      	movs	r3, #0
 8009e4a:	9301      	str	r3, [sp, #4]
 8009e4c:	2328      	movs	r3, #40	; 0x28
 8009e4e:	9300      	str	r3, [sp, #0]
 8009e50:	2300      	movs	r3, #0
 8009e52:	2264      	movs	r2, #100	; 0x64
 8009e54:	2100      	movs	r1, #0
 8009e56:	f001 faa8 	bl	800b3aa <UTI_normalizeIntValue>
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	461a      	mov	r2, r3
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	601a      	str	r2, [r3, #0]
  return;
 8009e62:	bf00      	nop
}
 8009e64:	3710      	adds	r7, #16
 8009e66:	46bd      	mov	sp, r7
 8009e68:	bd80      	pop	{r7, pc}
 8009e6a:	bf00      	nop
 8009e6c:	08010838 	.word	0x08010838

08009e70 <DRV_toggleMotorsState>:

static void DRV_toggleMotorsState(void)
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	af00      	add	r7, sp, #0
  if (g_DRV_context.areMotorsOn == false)
 8009e74:	4b17      	ldr	r3, [pc, #92]	; (8009ed4 <DRV_toggleMotorsState+0x64>)
 8009e76:	795b      	ldrb	r3, [r3, #5]
 8009e78:	f083 0301 	eor.w	r3, r3, #1
 8009e7c:	b2db      	uxtb	r3, r3
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d013      	beq.n	8009eaa <DRV_toggleMotorsState+0x3a>
  {
    LOG_info("Drive turning motor ON");
 8009e82:	4915      	ldr	r1, [pc, #84]	; (8009ed8 <DRV_toggleMotorsState+0x68>)
 8009e84:	2001      	movs	r0, #1
 8009e86:	f000 fc6d 	bl	800a764 <LOG_log>

    WHL_turnMotorOn(&g_DRV_context.wheelFrontRight);
 8009e8a:	4814      	ldr	r0, [pc, #80]	; (8009edc <DRV_toggleMotorsState+0x6c>)
 8009e8c:	f001 fb66 	bl	800b55c <WHL_turnMotorOn>
    WHL_turnMotorOn(&g_DRV_context.wheelFrontLeft );
 8009e90:	4813      	ldr	r0, [pc, #76]	; (8009ee0 <DRV_toggleMotorsState+0x70>)
 8009e92:	f001 fb63 	bl	800b55c <WHL_turnMotorOn>
    WHL_turnMotorOn(&g_DRV_context.wheelRearRight );
 8009e96:	4813      	ldr	r0, [pc, #76]	; (8009ee4 <DRV_toggleMotorsState+0x74>)
 8009e98:	f001 fb60 	bl	800b55c <WHL_turnMotorOn>
    WHL_turnMotorOn(&g_DRV_context.wheelRearLeft  );
 8009e9c:	4812      	ldr	r0, [pc, #72]	; (8009ee8 <DRV_toggleMotorsState+0x78>)
 8009e9e:	f001 fb5d 	bl	800b55c <WHL_turnMotorOn>

    g_DRV_context.areMotorsOn = true;
 8009ea2:	4b0c      	ldr	r3, [pc, #48]	; (8009ed4 <DRV_toggleMotorsState+0x64>)
 8009ea4:	2201      	movs	r2, #1
 8009ea6:	715a      	strb	r2, [r3, #5]
    WHL_turnMotorOff(&g_DRV_context.wheelRearLeft  );

    g_DRV_context.areMotorsOn = false;
  }

  return;
 8009ea8:	e013      	b.n	8009ed2 <DRV_toggleMotorsState+0x62>
    LOG_info("Drive turning motor OFF");
 8009eaa:	4910      	ldr	r1, [pc, #64]	; (8009eec <DRV_toggleMotorsState+0x7c>)
 8009eac:	2001      	movs	r0, #1
 8009eae:	f000 fc59 	bl	800a764 <LOG_log>
    WHL_turnMotorOff(&g_DRV_context.wheelFrontRight);
 8009eb2:	480a      	ldr	r0, [pc, #40]	; (8009edc <DRV_toggleMotorsState+0x6c>)
 8009eb4:	f001 fb5f 	bl	800b576 <WHL_turnMotorOff>
    WHL_turnMotorOff(&g_DRV_context.wheelFrontLeft );
 8009eb8:	4809      	ldr	r0, [pc, #36]	; (8009ee0 <DRV_toggleMotorsState+0x70>)
 8009eba:	f001 fb5c 	bl	800b576 <WHL_turnMotorOff>
    WHL_turnMotorOff(&g_DRV_context.wheelRearRight );
 8009ebe:	4809      	ldr	r0, [pc, #36]	; (8009ee4 <DRV_toggleMotorsState+0x74>)
 8009ec0:	f001 fb59 	bl	800b576 <WHL_turnMotorOff>
    WHL_turnMotorOff(&g_DRV_context.wheelRearLeft  );
 8009ec4:	4808      	ldr	r0, [pc, #32]	; (8009ee8 <DRV_toggleMotorsState+0x78>)
 8009ec6:	f001 fb56 	bl	800b576 <WHL_turnMotorOff>
    g_DRV_context.areMotorsOn = false;
 8009eca:	4b02      	ldr	r3, [pc, #8]	; (8009ed4 <DRV_toggleMotorsState+0x64>)
 8009ecc:	2200      	movs	r2, #0
 8009ece:	715a      	strb	r2, [r3, #5]
  return;
 8009ed0:	bf00      	nop
}
 8009ed2:	bd80      	pop	{r7, pc}
 8009ed4:	2000026c 	.word	0x2000026c
 8009ed8:	0801085c 	.word	0x0801085c
 8009edc:	20000274 	.word	0x20000274
 8009ee0:	2000031c 	.word	0x2000031c
 8009ee4:	2000046c 	.word	0x2000046c
 8009ee8:	200003c4 	.word	0x200003c4
 8009eec:	08010874 	.word	0x08010874

08009ef0 <DRV_setDirectionsStop>:

static void DRV_setDirectionsStop(void)
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	af00      	add	r7, sp, #0
  WHL_setDirection(&g_DRV_context.wheelFrontRight, MTR_DIRECTION_STOP);
 8009ef4:	2100      	movs	r1, #0
 8009ef6:	4808      	ldr	r0, [pc, #32]	; (8009f18 <DRV_setDirectionsStop+0x28>)
 8009ef8:	f001 fb5f 	bl	800b5ba <WHL_setDirection>
  WHL_setDirection(&g_DRV_context.wheelFrontLeft , MTR_DIRECTION_STOP);
 8009efc:	2100      	movs	r1, #0
 8009efe:	4807      	ldr	r0, [pc, #28]	; (8009f1c <DRV_setDirectionsStop+0x2c>)
 8009f00:	f001 fb5b 	bl	800b5ba <WHL_setDirection>
  WHL_setDirection(&g_DRV_context.wheelRearRight , MTR_DIRECTION_STOP);
 8009f04:	2100      	movs	r1, #0
 8009f06:	4806      	ldr	r0, [pc, #24]	; (8009f20 <DRV_setDirectionsStop+0x30>)
 8009f08:	f001 fb57 	bl	800b5ba <WHL_setDirection>
  WHL_setDirection(&g_DRV_context.wheelRearLeft  , MTR_DIRECTION_STOP);
 8009f0c:	2100      	movs	r1, #0
 8009f0e:	4805      	ldr	r0, [pc, #20]	; (8009f24 <DRV_setDirectionsStop+0x34>)
 8009f10:	f001 fb53 	bl	800b5ba <WHL_setDirection>

  return;
 8009f14:	bf00      	nop
}
 8009f16:	bd80      	pop	{r7, pc}
 8009f18:	20000274 	.word	0x20000274
 8009f1c:	2000031c 	.word	0x2000031c
 8009f20:	2000046c 	.word	0x2000046c
 8009f24:	200003c4 	.word	0x200003c4

08009f28 <DRV_setDirectionsForward>:

static void DRV_setDirectionsForward(void)
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	af00      	add	r7, sp, #0
  WHL_setDirection(&g_DRV_context.wheelFrontRight, MTR_DIRECTION_FORWARD);
 8009f2c:	2101      	movs	r1, #1
 8009f2e:	4808      	ldr	r0, [pc, #32]	; (8009f50 <DRV_setDirectionsForward+0x28>)
 8009f30:	f001 fb43 	bl	800b5ba <WHL_setDirection>
  WHL_setDirection(&g_DRV_context.wheelFrontLeft , MTR_DIRECTION_FORWARD);
 8009f34:	2101      	movs	r1, #1
 8009f36:	4807      	ldr	r0, [pc, #28]	; (8009f54 <DRV_setDirectionsForward+0x2c>)
 8009f38:	f001 fb3f 	bl	800b5ba <WHL_setDirection>
  WHL_setDirection(&g_DRV_context.wheelRearRight , MTR_DIRECTION_FORWARD);
 8009f3c:	2101      	movs	r1, #1
 8009f3e:	4806      	ldr	r0, [pc, #24]	; (8009f58 <DRV_setDirectionsForward+0x30>)
 8009f40:	f001 fb3b 	bl	800b5ba <WHL_setDirection>
  WHL_setDirection(&g_DRV_context.wheelRearLeft  , MTR_DIRECTION_FORWARD);
 8009f44:	2101      	movs	r1, #1
 8009f46:	4805      	ldr	r0, [pc, #20]	; (8009f5c <DRV_setDirectionsForward+0x34>)
 8009f48:	f001 fb37 	bl	800b5ba <WHL_setDirection>

  return;
 8009f4c:	bf00      	nop
}
 8009f4e:	bd80      	pop	{r7, pc}
 8009f50:	20000274 	.word	0x20000274
 8009f54:	2000031c 	.word	0x2000031c
 8009f58:	2000046c 	.word	0x2000046c
 8009f5c:	200003c4 	.word	0x200003c4

08009f60 <DRV_setDirectionsBackward>:

static void DRV_setDirectionsBackward(void)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	af00      	add	r7, sp, #0
  WHL_setDirection(&g_DRV_context.wheelFrontRight, MTR_DIRECTION_BACKWARD);
 8009f64:	2102      	movs	r1, #2
 8009f66:	4808      	ldr	r0, [pc, #32]	; (8009f88 <DRV_setDirectionsBackward+0x28>)
 8009f68:	f001 fb27 	bl	800b5ba <WHL_setDirection>
  WHL_setDirection(&g_DRV_context.wheelFrontLeft , MTR_DIRECTION_BACKWARD);
 8009f6c:	2102      	movs	r1, #2
 8009f6e:	4807      	ldr	r0, [pc, #28]	; (8009f8c <DRV_setDirectionsBackward+0x2c>)
 8009f70:	f001 fb23 	bl	800b5ba <WHL_setDirection>
  WHL_setDirection(&g_DRV_context.wheelRearRight , MTR_DIRECTION_BACKWARD);
 8009f74:	2102      	movs	r1, #2
 8009f76:	4806      	ldr	r0, [pc, #24]	; (8009f90 <DRV_setDirectionsBackward+0x30>)
 8009f78:	f001 fb1f 	bl	800b5ba <WHL_setDirection>
  WHL_setDirection(&g_DRV_context.wheelRearLeft  , MTR_DIRECTION_BACKWARD);
 8009f7c:	2102      	movs	r1, #2
 8009f7e:	4805      	ldr	r0, [pc, #20]	; (8009f94 <DRV_setDirectionsBackward+0x34>)
 8009f80:	f001 fb1b 	bl	800b5ba <WHL_setDirection>

  return;
 8009f84:	bf00      	nop
}
 8009f86:	bd80      	pop	{r7, pc}
 8009f88:	20000274 	.word	0x20000274
 8009f8c:	2000031c 	.word	0x2000031c
 8009f90:	2000046c 	.word	0x2000046c
 8009f94:	200003c4 	.word	0x200003c4

08009f98 <DRV_setDirectionsForwardRight>:

static void DRV_setDirectionsForwardRight(void)
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	af00      	add	r7, sp, #0
  WHL_setDirection(&g_DRV_context.wheelFrontLeft, MTR_DIRECTION_FORWARD);
 8009f9c:	2101      	movs	r1, #1
 8009f9e:	4804      	ldr	r0, [pc, #16]	; (8009fb0 <DRV_setDirectionsForwardRight+0x18>)
 8009fa0:	f001 fb0b 	bl	800b5ba <WHL_setDirection>
  WHL_setDirection(&g_DRV_context.wheelRearRight, MTR_DIRECTION_FORWARD);
 8009fa4:	2101      	movs	r1, #1
 8009fa6:	4803      	ldr	r0, [pc, #12]	; (8009fb4 <DRV_setDirectionsForwardRight+0x1c>)
 8009fa8:	f001 fb07 	bl	800b5ba <WHL_setDirection>

  return;
 8009fac:	bf00      	nop
}
 8009fae:	bd80      	pop	{r7, pc}
 8009fb0:	2000031c 	.word	0x2000031c
 8009fb4:	2000046c 	.word	0x2000046c

08009fb8 <DRV_setDirectionsForwardLeft>:

static void DRV_setDirectionsForwardLeft(void)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	af00      	add	r7, sp, #0
  WHL_setDirection(&g_DRV_context.wheelFrontRight, MTR_DIRECTION_FORWARD);
 8009fbc:	2101      	movs	r1, #1
 8009fbe:	4804      	ldr	r0, [pc, #16]	; (8009fd0 <DRV_setDirectionsForwardLeft+0x18>)
 8009fc0:	f001 fafb 	bl	800b5ba <WHL_setDirection>
  WHL_setDirection(&g_DRV_context.wheelRearLeft  , MTR_DIRECTION_FORWARD);
 8009fc4:	2101      	movs	r1, #1
 8009fc6:	4803      	ldr	r0, [pc, #12]	; (8009fd4 <DRV_setDirectionsForwardLeft+0x1c>)
 8009fc8:	f001 faf7 	bl	800b5ba <WHL_setDirection>

  return;
 8009fcc:	bf00      	nop
}
 8009fce:	bd80      	pop	{r7, pc}
 8009fd0:	20000274 	.word	0x20000274
 8009fd4:	200003c4 	.word	0x200003c4

08009fd8 <DRV_setDirectionsBackwardRight>:

static void DRV_setDirectionsBackwardRight(void)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	af00      	add	r7, sp, #0
  WHL_setDirection(&g_DRV_context.wheelFrontRight, MTR_DIRECTION_BACKWARD);
 8009fdc:	2102      	movs	r1, #2
 8009fde:	4804      	ldr	r0, [pc, #16]	; (8009ff0 <DRV_setDirectionsBackwardRight+0x18>)
 8009fe0:	f001 faeb 	bl	800b5ba <WHL_setDirection>
  WHL_setDirection(&g_DRV_context.wheelRearLeft  , MTR_DIRECTION_BACKWARD);
 8009fe4:	2102      	movs	r1, #2
 8009fe6:	4803      	ldr	r0, [pc, #12]	; (8009ff4 <DRV_setDirectionsBackwardRight+0x1c>)
 8009fe8:	f001 fae7 	bl	800b5ba <WHL_setDirection>

  return;
 8009fec:	bf00      	nop
}
 8009fee:	bd80      	pop	{r7, pc}
 8009ff0:	20000274 	.word	0x20000274
 8009ff4:	200003c4 	.word	0x200003c4

08009ff8 <DRV_setDirectionsBackwardLeft>:

static void DRV_setDirectionsBackwardLeft(void)
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	af00      	add	r7, sp, #0
  WHL_setDirection(&g_DRV_context.wheelFrontLeft, MTR_DIRECTION_BACKWARD);
 8009ffc:	2102      	movs	r1, #2
 8009ffe:	4804      	ldr	r0, [pc, #16]	; (800a010 <DRV_setDirectionsBackwardLeft+0x18>)
 800a000:	f001 fadb 	bl	800b5ba <WHL_setDirection>
  WHL_setDirection(&g_DRV_context.wheelRearRight, MTR_DIRECTION_BACKWARD);
 800a004:	2102      	movs	r1, #2
 800a006:	4803      	ldr	r0, [pc, #12]	; (800a014 <DRV_setDirectionsBackwardLeft+0x1c>)
 800a008:	f001 fad7 	bl	800b5ba <WHL_setDirection>

  return;
 800a00c:	bf00      	nop
}
 800a00e:	bd80      	pop	{r7, pc}
 800a010:	2000031c 	.word	0x2000031c
 800a014:	2000046c 	.word	0x2000046c

0800a018 <DRV_setDirectionsTurnLeft>:

static void DRV_setDirectionsTurnLeft(void)
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	af00      	add	r7, sp, #0
  WHL_setDirection(&g_DRV_context.wheelFrontRight, MTR_DIRECTION_FORWARD );
 800a01c:	2101      	movs	r1, #1
 800a01e:	4808      	ldr	r0, [pc, #32]	; (800a040 <DRV_setDirectionsTurnLeft+0x28>)
 800a020:	f001 facb 	bl	800b5ba <WHL_setDirection>
  WHL_setDirection(&g_DRV_context.wheelFrontLeft , MTR_DIRECTION_BACKWARD);
 800a024:	2102      	movs	r1, #2
 800a026:	4807      	ldr	r0, [pc, #28]	; (800a044 <DRV_setDirectionsTurnLeft+0x2c>)
 800a028:	f001 fac7 	bl	800b5ba <WHL_setDirection>
  WHL_setDirection(&g_DRV_context.wheelRearRight , MTR_DIRECTION_FORWARD );
 800a02c:	2101      	movs	r1, #1
 800a02e:	4806      	ldr	r0, [pc, #24]	; (800a048 <DRV_setDirectionsTurnLeft+0x30>)
 800a030:	f001 fac3 	bl	800b5ba <WHL_setDirection>
  WHL_setDirection(&g_DRV_context.wheelRearLeft  , MTR_DIRECTION_BACKWARD);
 800a034:	2102      	movs	r1, #2
 800a036:	4805      	ldr	r0, [pc, #20]	; (800a04c <DRV_setDirectionsTurnLeft+0x34>)
 800a038:	f001 fabf 	bl	800b5ba <WHL_setDirection>

  return;
 800a03c:	bf00      	nop
}
 800a03e:	bd80      	pop	{r7, pc}
 800a040:	20000274 	.word	0x20000274
 800a044:	2000031c 	.word	0x2000031c
 800a048:	2000046c 	.word	0x2000046c
 800a04c:	200003c4 	.word	0x200003c4

0800a050 <DRV_setDirectionsTurnRight>:

static void DRV_setDirectionsTurnRight(void)
{
 800a050:	b580      	push	{r7, lr}
 800a052:	af00      	add	r7, sp, #0
  WHL_setDirection(&g_DRV_context.wheelFrontRight, MTR_DIRECTION_BACKWARD);
 800a054:	2102      	movs	r1, #2
 800a056:	4808      	ldr	r0, [pc, #32]	; (800a078 <DRV_setDirectionsTurnRight+0x28>)
 800a058:	f001 faaf 	bl	800b5ba <WHL_setDirection>
  WHL_setDirection(&g_DRV_context.wheelFrontLeft , MTR_DIRECTION_FORWARD );
 800a05c:	2101      	movs	r1, #1
 800a05e:	4807      	ldr	r0, [pc, #28]	; (800a07c <DRV_setDirectionsTurnRight+0x2c>)
 800a060:	f001 faab 	bl	800b5ba <WHL_setDirection>
  WHL_setDirection(&g_DRV_context.wheelRearRight , MTR_DIRECTION_BACKWARD);
 800a064:	2102      	movs	r1, #2
 800a066:	4806      	ldr	r0, [pc, #24]	; (800a080 <DRV_setDirectionsTurnRight+0x30>)
 800a068:	f001 faa7 	bl	800b5ba <WHL_setDirection>
  WHL_setDirection(&g_DRV_context.wheelRearLeft  , MTR_DIRECTION_FORWARD );
 800a06c:	2101      	movs	r1, #1
 800a06e:	4805      	ldr	r0, [pc, #20]	; (800a084 <DRV_setDirectionsTurnRight+0x34>)
 800a070:	f001 faa3 	bl	800b5ba <WHL_setDirection>

  return;
 800a074:	bf00      	nop
}
 800a076:	bd80      	pop	{r7, pc}
 800a078:	20000274 	.word	0x20000274
 800a07c:	2000031c 	.word	0x2000031c
 800a080:	2000046c 	.word	0x2000046c
 800a084:	200003c4 	.word	0x200003c4

0800a088 <DRV_setDirectionsTranslateLeft>:

static void DRV_setDirectionsTranslateLeft(void)
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	af00      	add	r7, sp, #0
  WHL_setDirection(&g_DRV_context.wheelFrontRight, MTR_DIRECTION_FORWARD );
 800a08c:	2101      	movs	r1, #1
 800a08e:	4808      	ldr	r0, [pc, #32]	; (800a0b0 <DRV_setDirectionsTranslateLeft+0x28>)
 800a090:	f001 fa93 	bl	800b5ba <WHL_setDirection>
  WHL_setDirection(&g_DRV_context.wheelFrontLeft , MTR_DIRECTION_BACKWARD);
 800a094:	2102      	movs	r1, #2
 800a096:	4807      	ldr	r0, [pc, #28]	; (800a0b4 <DRV_setDirectionsTranslateLeft+0x2c>)
 800a098:	f001 fa8f 	bl	800b5ba <WHL_setDirection>
  WHL_setDirection(&g_DRV_context.wheelRearRight , MTR_DIRECTION_BACKWARD);
 800a09c:	2102      	movs	r1, #2
 800a09e:	4806      	ldr	r0, [pc, #24]	; (800a0b8 <DRV_setDirectionsTranslateLeft+0x30>)
 800a0a0:	f001 fa8b 	bl	800b5ba <WHL_setDirection>
  WHL_setDirection(&g_DRV_context.wheelRearLeft  , MTR_DIRECTION_FORWARD );
 800a0a4:	2101      	movs	r1, #1
 800a0a6:	4805      	ldr	r0, [pc, #20]	; (800a0bc <DRV_setDirectionsTranslateLeft+0x34>)
 800a0a8:	f001 fa87 	bl	800b5ba <WHL_setDirection>

  return;
 800a0ac:	bf00      	nop
}
 800a0ae:	bd80      	pop	{r7, pc}
 800a0b0:	20000274 	.word	0x20000274
 800a0b4:	2000031c 	.word	0x2000031c
 800a0b8:	2000046c 	.word	0x2000046c
 800a0bc:	200003c4 	.word	0x200003c4

0800a0c0 <DRV_setDirectionsTranslateRight>:

static void DRV_setDirectionsTranslateRight(void)
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	af00      	add	r7, sp, #0
  WHL_setDirection(&g_DRV_context.wheelFrontRight, MTR_DIRECTION_BACKWARD);
 800a0c4:	2102      	movs	r1, #2
 800a0c6:	4808      	ldr	r0, [pc, #32]	; (800a0e8 <DRV_setDirectionsTranslateRight+0x28>)
 800a0c8:	f001 fa77 	bl	800b5ba <WHL_setDirection>
  WHL_setDirection(&g_DRV_context.wheelFrontLeft , MTR_DIRECTION_FORWARD );
 800a0cc:	2101      	movs	r1, #1
 800a0ce:	4807      	ldr	r0, [pc, #28]	; (800a0ec <DRV_setDirectionsTranslateRight+0x2c>)
 800a0d0:	f001 fa73 	bl	800b5ba <WHL_setDirection>
  WHL_setDirection(&g_DRV_context.wheelRearRight , MTR_DIRECTION_FORWARD );
 800a0d4:	2101      	movs	r1, #1
 800a0d6:	4806      	ldr	r0, [pc, #24]	; (800a0f0 <DRV_setDirectionsTranslateRight+0x30>)
 800a0d8:	f001 fa6f 	bl	800b5ba <WHL_setDirection>
  WHL_setDirection(&g_DRV_context.wheelRearLeft  , MTR_DIRECTION_BACKWARD);
 800a0dc:	2102      	movs	r1, #2
 800a0de:	4805      	ldr	r0, [pc, #20]	; (800a0f4 <DRV_setDirectionsTranslateRight+0x34>)
 800a0e0:	f001 fa6b 	bl	800b5ba <WHL_setDirection>

  return;
 800a0e4:	bf00      	nop
}
 800a0e6:	bd80      	pop	{r7, pc}
 800a0e8:	20000274 	.word	0x20000274
 800a0ec:	2000031c 	.word	0x2000031c
 800a0f0:	2000046c 	.word	0x2000046c
 800a0f4:	200003c4 	.word	0x200003c4

0800a0f8 <DRV_stop>:

static void DRV_stop(void)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	af00      	add	r7, sp, #0
  DRV_setDirectionsStop();
 800a0fc:	f7ff fef8 	bl	8009ef0 <DRV_setDirectionsStop>

  WHL_setSpeed(&g_DRV_context.wheelFrontRight, 0);
 800a100:	2100      	movs	r1, #0
 800a102:	4808      	ldr	r0, [pc, #32]	; (800a124 <DRV_stop+0x2c>)
 800a104:	f001 fa6a 	bl	800b5dc <WHL_setSpeed>
  WHL_setSpeed(&g_DRV_context.wheelFrontLeft , 0);
 800a108:	2100      	movs	r1, #0
 800a10a:	4807      	ldr	r0, [pc, #28]	; (800a128 <DRV_stop+0x30>)
 800a10c:	f001 fa66 	bl	800b5dc <WHL_setSpeed>
  WHL_setSpeed(&g_DRV_context.wheelRearRight , 0);
 800a110:	2100      	movs	r1, #0
 800a112:	4806      	ldr	r0, [pc, #24]	; (800a12c <DRV_stop+0x34>)
 800a114:	f001 fa62 	bl	800b5dc <WHL_setSpeed>
  WHL_setSpeed(&g_DRV_context.wheelRearLeft  , 0);
 800a118:	2100      	movs	r1, #0
 800a11a:	4805      	ldr	r0, [pc, #20]	; (800a130 <DRV_stop+0x38>)
 800a11c:	f001 fa5e 	bl	800b5dc <WHL_setSpeed>

  return;
 800a120:	bf00      	nop
}
 800a122:	bd80      	pop	{r7, pc}
 800a124:	20000274 	.word	0x20000274
 800a128:	2000031c 	.word	0x2000031c
 800a12c:	2000046c 	.word	0x2000046c
 800a130:	200003c4 	.word	0x200003c4

0800a134 <DRV_moveForward>:

static void DRV_moveForward(uint32_t p_speed)
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b082      	sub	sp, #8
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
  LOG_debug("Moving forward @%u", p_speed);
 800a13c:	687a      	ldr	r2, [r7, #4]
 800a13e:	490d      	ldr	r1, [pc, #52]	; (800a174 <DRV_moveForward+0x40>)
 800a140:	2000      	movs	r0, #0
 800a142:	f000 fb0f 	bl	800a764 <LOG_log>

  DRV_setDirectionsForward();
 800a146:	f7ff feef 	bl	8009f28 <DRV_setDirectionsForward>

  WHL_setSpeed(&g_DRV_context.wheelFrontRight, p_speed);
 800a14a:	6879      	ldr	r1, [r7, #4]
 800a14c:	480a      	ldr	r0, [pc, #40]	; (800a178 <DRV_moveForward+0x44>)
 800a14e:	f001 fa45 	bl	800b5dc <WHL_setSpeed>
  WHL_setSpeed(&g_DRV_context.wheelFrontLeft , p_speed);
 800a152:	6879      	ldr	r1, [r7, #4]
 800a154:	4809      	ldr	r0, [pc, #36]	; (800a17c <DRV_moveForward+0x48>)
 800a156:	f001 fa41 	bl	800b5dc <WHL_setSpeed>
  WHL_setSpeed(&g_DRV_context.wheelRearRight , p_speed);
 800a15a:	6879      	ldr	r1, [r7, #4]
 800a15c:	4808      	ldr	r0, [pc, #32]	; (800a180 <DRV_moveForward+0x4c>)
 800a15e:	f001 fa3d 	bl	800b5dc <WHL_setSpeed>
  WHL_setSpeed(&g_DRV_context.wheelRearLeft  , p_speed);
 800a162:	6879      	ldr	r1, [r7, #4]
 800a164:	4807      	ldr	r0, [pc, #28]	; (800a184 <DRV_moveForward+0x50>)
 800a166:	f001 fa39 	bl	800b5dc <WHL_setSpeed>

  return;
 800a16a:	bf00      	nop
}
 800a16c:	3708      	adds	r7, #8
 800a16e:	46bd      	mov	sp, r7
 800a170:	bd80      	pop	{r7, pc}
 800a172:	bf00      	nop
 800a174:	0801088c 	.word	0x0801088c
 800a178:	20000274 	.word	0x20000274
 800a17c:	2000031c 	.word	0x2000031c
 800a180:	2000046c 	.word	0x2000046c
 800a184:	200003c4 	.word	0x200003c4

0800a188 <DRV_moveBackward>:

static void DRV_moveBackward(uint32_t p_speed)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b082      	sub	sp, #8
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
  LOG_debug("Moving backward @%u", p_speed);
 800a190:	687a      	ldr	r2, [r7, #4]
 800a192:	490d      	ldr	r1, [pc, #52]	; (800a1c8 <DRV_moveBackward+0x40>)
 800a194:	2000      	movs	r0, #0
 800a196:	f000 fae5 	bl	800a764 <LOG_log>

  DRV_setDirectionsBackward();
 800a19a:	f7ff fee1 	bl	8009f60 <DRV_setDirectionsBackward>

  WHL_setSpeed(&g_DRV_context.wheelFrontRight, p_speed);
 800a19e:	6879      	ldr	r1, [r7, #4]
 800a1a0:	480a      	ldr	r0, [pc, #40]	; (800a1cc <DRV_moveBackward+0x44>)
 800a1a2:	f001 fa1b 	bl	800b5dc <WHL_setSpeed>
  WHL_setSpeed(&g_DRV_context.wheelFrontLeft , p_speed);
 800a1a6:	6879      	ldr	r1, [r7, #4]
 800a1a8:	4809      	ldr	r0, [pc, #36]	; (800a1d0 <DRV_moveBackward+0x48>)
 800a1aa:	f001 fa17 	bl	800b5dc <WHL_setSpeed>
  WHL_setSpeed(&g_DRV_context.wheelRearRight , p_speed);
 800a1ae:	6879      	ldr	r1, [r7, #4]
 800a1b0:	4808      	ldr	r0, [pc, #32]	; (800a1d4 <DRV_moveBackward+0x4c>)
 800a1b2:	f001 fa13 	bl	800b5dc <WHL_setSpeed>
  WHL_setSpeed(&g_DRV_context.wheelRearLeft  , p_speed);
 800a1b6:	6879      	ldr	r1, [r7, #4]
 800a1b8:	4807      	ldr	r0, [pc, #28]	; (800a1d8 <DRV_moveBackward+0x50>)
 800a1ba:	f001 fa0f 	bl	800b5dc <WHL_setSpeed>

  return;
 800a1be:	bf00      	nop
}
 800a1c0:	3708      	adds	r7, #8
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	bd80      	pop	{r7, pc}
 800a1c6:	bf00      	nop
 800a1c8:	080108a0 	.word	0x080108a0
 800a1cc:	20000274 	.word	0x20000274
 800a1d0:	2000031c 	.word	0x2000031c
 800a1d4:	2000046c 	.word	0x2000046c
 800a1d8:	200003c4 	.word	0x200003c4

0800a1dc <DRV_moveForwardRight>:

static void DRV_moveForwardRight(uint32_t p_speed)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b082      	sub	sp, #8
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
  LOG_debug("Moving forward-right @%u", p_speed);
 800a1e4:	687a      	ldr	r2, [r7, #4]
 800a1e6:	490d      	ldr	r1, [pc, #52]	; (800a21c <DRV_moveForwardRight+0x40>)
 800a1e8:	2000      	movs	r0, #0
 800a1ea:	f000 fabb 	bl	800a764 <LOG_log>

  DRV_setDirectionsForwardRight();
 800a1ee:	f7ff fed3 	bl	8009f98 <DRV_setDirectionsForwardRight>

  WHL_setSpeed(&g_DRV_context.wheelFrontRight,       0);
 800a1f2:	2100      	movs	r1, #0
 800a1f4:	480a      	ldr	r0, [pc, #40]	; (800a220 <DRV_moveForwardRight+0x44>)
 800a1f6:	f001 f9f1 	bl	800b5dc <WHL_setSpeed>
  WHL_setSpeed(&g_DRV_context.wheelFrontLeft , p_speed);
 800a1fa:	6879      	ldr	r1, [r7, #4]
 800a1fc:	4809      	ldr	r0, [pc, #36]	; (800a224 <DRV_moveForwardRight+0x48>)
 800a1fe:	f001 f9ed 	bl	800b5dc <WHL_setSpeed>
  WHL_setSpeed(&g_DRV_context.wheelRearRight , p_speed);
 800a202:	6879      	ldr	r1, [r7, #4]
 800a204:	4808      	ldr	r0, [pc, #32]	; (800a228 <DRV_moveForwardRight+0x4c>)
 800a206:	f001 f9e9 	bl	800b5dc <WHL_setSpeed>
  WHL_setSpeed(&g_DRV_context.wheelRearLeft  ,       0);
 800a20a:	2100      	movs	r1, #0
 800a20c:	4807      	ldr	r0, [pc, #28]	; (800a22c <DRV_moveForwardRight+0x50>)
 800a20e:	f001 f9e5 	bl	800b5dc <WHL_setSpeed>

  return;
 800a212:	bf00      	nop
}
 800a214:	3708      	adds	r7, #8
 800a216:	46bd      	mov	sp, r7
 800a218:	bd80      	pop	{r7, pc}
 800a21a:	bf00      	nop
 800a21c:	080108b4 	.word	0x080108b4
 800a220:	20000274 	.word	0x20000274
 800a224:	2000031c 	.word	0x2000031c
 800a228:	2000046c 	.word	0x2000046c
 800a22c:	200003c4 	.word	0x200003c4

0800a230 <DRV_moveForwardLeft>:

static void DRV_moveForwardLeft(uint32_t p_speed)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b082      	sub	sp, #8
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
  LOG_debug("Moving forward-left @%u", p_speed);
 800a238:	687a      	ldr	r2, [r7, #4]
 800a23a:	490d      	ldr	r1, [pc, #52]	; (800a270 <DRV_moveForwardLeft+0x40>)
 800a23c:	2000      	movs	r0, #0
 800a23e:	f000 fa91 	bl	800a764 <LOG_log>

  DRV_setDirectionsForwardLeft();
 800a242:	f7ff feb9 	bl	8009fb8 <DRV_setDirectionsForwardLeft>

  WHL_setSpeed(&g_DRV_context.wheelFrontRight, p_speed);
 800a246:	6879      	ldr	r1, [r7, #4]
 800a248:	480a      	ldr	r0, [pc, #40]	; (800a274 <DRV_moveForwardLeft+0x44>)
 800a24a:	f001 f9c7 	bl	800b5dc <WHL_setSpeed>
  WHL_setSpeed(&g_DRV_context.wheelFrontLeft ,       0);
 800a24e:	2100      	movs	r1, #0
 800a250:	4809      	ldr	r0, [pc, #36]	; (800a278 <DRV_moveForwardLeft+0x48>)
 800a252:	f001 f9c3 	bl	800b5dc <WHL_setSpeed>
  WHL_setSpeed(&g_DRV_context.wheelRearRight ,       0);
 800a256:	2100      	movs	r1, #0
 800a258:	4808      	ldr	r0, [pc, #32]	; (800a27c <DRV_moveForwardLeft+0x4c>)
 800a25a:	f001 f9bf 	bl	800b5dc <WHL_setSpeed>
  WHL_setSpeed(&g_DRV_context.wheelRearLeft  , p_speed);
 800a25e:	6879      	ldr	r1, [r7, #4]
 800a260:	4807      	ldr	r0, [pc, #28]	; (800a280 <DRV_moveForwardLeft+0x50>)
 800a262:	f001 f9bb 	bl	800b5dc <WHL_setSpeed>

  return;
 800a266:	bf00      	nop
}
 800a268:	3708      	adds	r7, #8
 800a26a:	46bd      	mov	sp, r7
 800a26c:	bd80      	pop	{r7, pc}
 800a26e:	bf00      	nop
 800a270:	080108d0 	.word	0x080108d0
 800a274:	20000274 	.word	0x20000274
 800a278:	2000031c 	.word	0x2000031c
 800a27c:	2000046c 	.word	0x2000046c
 800a280:	200003c4 	.word	0x200003c4

0800a284 <DRV_moveBackwardRight>:

static void DRV_moveBackwardRight(uint32_t p_speed)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b082      	sub	sp, #8
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
  LOG_debug("Moving backward-right @%u", p_speed);
 800a28c:	687a      	ldr	r2, [r7, #4]
 800a28e:	490d      	ldr	r1, [pc, #52]	; (800a2c4 <DRV_moveBackwardRight+0x40>)
 800a290:	2000      	movs	r0, #0
 800a292:	f000 fa67 	bl	800a764 <LOG_log>

  DRV_setDirectionsBackwardRight();
 800a296:	f7ff fe9f 	bl	8009fd8 <DRV_setDirectionsBackwardRight>

  WHL_setSpeed(&g_DRV_context.wheelFrontRight, p_speed);
 800a29a:	6879      	ldr	r1, [r7, #4]
 800a29c:	480a      	ldr	r0, [pc, #40]	; (800a2c8 <DRV_moveBackwardRight+0x44>)
 800a29e:	f001 f99d 	bl	800b5dc <WHL_setSpeed>
  WHL_setSpeed(&g_DRV_context.wheelFrontLeft ,       0);
 800a2a2:	2100      	movs	r1, #0
 800a2a4:	4809      	ldr	r0, [pc, #36]	; (800a2cc <DRV_moveBackwardRight+0x48>)
 800a2a6:	f001 f999 	bl	800b5dc <WHL_setSpeed>
  WHL_setSpeed(&g_DRV_context.wheelRearRight ,       0);
 800a2aa:	2100      	movs	r1, #0
 800a2ac:	4808      	ldr	r0, [pc, #32]	; (800a2d0 <DRV_moveBackwardRight+0x4c>)
 800a2ae:	f001 f995 	bl	800b5dc <WHL_setSpeed>
  WHL_setSpeed(&g_DRV_context.wheelRearLeft  , p_speed);
 800a2b2:	6879      	ldr	r1, [r7, #4]
 800a2b4:	4807      	ldr	r0, [pc, #28]	; (800a2d4 <DRV_moveBackwardRight+0x50>)
 800a2b6:	f001 f991 	bl	800b5dc <WHL_setSpeed>

  return;
 800a2ba:	bf00      	nop
}
 800a2bc:	3708      	adds	r7, #8
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	bd80      	pop	{r7, pc}
 800a2c2:	bf00      	nop
 800a2c4:	080108e8 	.word	0x080108e8
 800a2c8:	20000274 	.word	0x20000274
 800a2cc:	2000031c 	.word	0x2000031c
 800a2d0:	2000046c 	.word	0x2000046c
 800a2d4:	200003c4 	.word	0x200003c4

0800a2d8 <DRV_moveBackwardLeft>:

static void DRV_moveBackwardLeft(uint32_t p_speed)
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b082      	sub	sp, #8
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
  LOG_debug("Moving backward-left @%u", p_speed);
 800a2e0:	687a      	ldr	r2, [r7, #4]
 800a2e2:	490d      	ldr	r1, [pc, #52]	; (800a318 <DRV_moveBackwardLeft+0x40>)
 800a2e4:	2000      	movs	r0, #0
 800a2e6:	f000 fa3d 	bl	800a764 <LOG_log>

  DRV_setDirectionsBackwardLeft();
 800a2ea:	f7ff fe85 	bl	8009ff8 <DRV_setDirectionsBackwardLeft>

  WHL_setSpeed(&g_DRV_context.wheelFrontRight,       0);
 800a2ee:	2100      	movs	r1, #0
 800a2f0:	480a      	ldr	r0, [pc, #40]	; (800a31c <DRV_moveBackwardLeft+0x44>)
 800a2f2:	f001 f973 	bl	800b5dc <WHL_setSpeed>
  WHL_setSpeed(&g_DRV_context.wheelFrontLeft , p_speed);
 800a2f6:	6879      	ldr	r1, [r7, #4]
 800a2f8:	4809      	ldr	r0, [pc, #36]	; (800a320 <DRV_moveBackwardLeft+0x48>)
 800a2fa:	f001 f96f 	bl	800b5dc <WHL_setSpeed>
  WHL_setSpeed(&g_DRV_context.wheelRearRight , p_speed);
 800a2fe:	6879      	ldr	r1, [r7, #4]
 800a300:	4808      	ldr	r0, [pc, #32]	; (800a324 <DRV_moveBackwardLeft+0x4c>)
 800a302:	f001 f96b 	bl	800b5dc <WHL_setSpeed>
  WHL_setSpeed(&g_DRV_context.wheelRearLeft  ,       0);
 800a306:	2100      	movs	r1, #0
 800a308:	4807      	ldr	r0, [pc, #28]	; (800a328 <DRV_moveBackwardLeft+0x50>)
 800a30a:	f001 f967 	bl	800b5dc <WHL_setSpeed>

  return;
 800a30e:	bf00      	nop
}
 800a310:	3708      	adds	r7, #8
 800a312:	46bd      	mov	sp, r7
 800a314:	bd80      	pop	{r7, pc}
 800a316:	bf00      	nop
 800a318:	08010904 	.word	0x08010904
 800a31c:	20000274 	.word	0x20000274
 800a320:	2000031c 	.word	0x2000031c
 800a324:	2000046c 	.word	0x2000046c
 800a328:	200003c4 	.word	0x200003c4

0800a32c <DRV_turnLeft>:

static void DRV_turnLeft(uint32_t p_speed)
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b082      	sub	sp, #8
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
  LOG_debug("Turning left @%u", p_speed);
 800a334:	687a      	ldr	r2, [r7, #4]
 800a336:	490d      	ldr	r1, [pc, #52]	; (800a36c <DRV_turnLeft+0x40>)
 800a338:	2000      	movs	r0, #0
 800a33a:	f000 fa13 	bl	800a764 <LOG_log>

  DRV_setDirectionsTurnLeft();
 800a33e:	f7ff fe6b 	bl	800a018 <DRV_setDirectionsTurnLeft>

  WHL_setSpeed(&g_DRV_context.wheelFrontRight, p_speed);
 800a342:	6879      	ldr	r1, [r7, #4]
 800a344:	480a      	ldr	r0, [pc, #40]	; (800a370 <DRV_turnLeft+0x44>)
 800a346:	f001 f949 	bl	800b5dc <WHL_setSpeed>
  WHL_setSpeed(&g_DRV_context.wheelFrontLeft , p_speed);
 800a34a:	6879      	ldr	r1, [r7, #4]
 800a34c:	4809      	ldr	r0, [pc, #36]	; (800a374 <DRV_turnLeft+0x48>)
 800a34e:	f001 f945 	bl	800b5dc <WHL_setSpeed>
  WHL_setSpeed(&g_DRV_context.wheelRearRight , p_speed);
 800a352:	6879      	ldr	r1, [r7, #4]
 800a354:	4808      	ldr	r0, [pc, #32]	; (800a378 <DRV_turnLeft+0x4c>)
 800a356:	f001 f941 	bl	800b5dc <WHL_setSpeed>
  WHL_setSpeed(&g_DRV_context.wheelRearLeft  , p_speed);
 800a35a:	6879      	ldr	r1, [r7, #4]
 800a35c:	4807      	ldr	r0, [pc, #28]	; (800a37c <DRV_turnLeft+0x50>)
 800a35e:	f001 f93d 	bl	800b5dc <WHL_setSpeed>

  return;
 800a362:	bf00      	nop
}
 800a364:	3708      	adds	r7, #8
 800a366:	46bd      	mov	sp, r7
 800a368:	bd80      	pop	{r7, pc}
 800a36a:	bf00      	nop
 800a36c:	08010920 	.word	0x08010920
 800a370:	20000274 	.word	0x20000274
 800a374:	2000031c 	.word	0x2000031c
 800a378:	2000046c 	.word	0x2000046c
 800a37c:	200003c4 	.word	0x200003c4

0800a380 <DRV_turnRight>:

static void DRV_turnRight(uint32_t p_speed)
{
 800a380:	b580      	push	{r7, lr}
 800a382:	b082      	sub	sp, #8
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
  LOG_debug("Turning right @%u", p_speed);
 800a388:	687a      	ldr	r2, [r7, #4]
 800a38a:	490d      	ldr	r1, [pc, #52]	; (800a3c0 <DRV_turnRight+0x40>)
 800a38c:	2000      	movs	r0, #0
 800a38e:	f000 f9e9 	bl	800a764 <LOG_log>

  DRV_setDirectionsTurnRight();
 800a392:	f7ff fe5d 	bl	800a050 <DRV_setDirectionsTurnRight>

  WHL_setSpeed(&g_DRV_context.wheelFrontRight, p_speed);
 800a396:	6879      	ldr	r1, [r7, #4]
 800a398:	480a      	ldr	r0, [pc, #40]	; (800a3c4 <DRV_turnRight+0x44>)
 800a39a:	f001 f91f 	bl	800b5dc <WHL_setSpeed>
  WHL_setSpeed(&g_DRV_context.wheelFrontLeft , p_speed);
 800a39e:	6879      	ldr	r1, [r7, #4]
 800a3a0:	4809      	ldr	r0, [pc, #36]	; (800a3c8 <DRV_turnRight+0x48>)
 800a3a2:	f001 f91b 	bl	800b5dc <WHL_setSpeed>
  WHL_setSpeed(&g_DRV_context.wheelRearRight , p_speed);
 800a3a6:	6879      	ldr	r1, [r7, #4]
 800a3a8:	4808      	ldr	r0, [pc, #32]	; (800a3cc <DRV_turnRight+0x4c>)
 800a3aa:	f001 f917 	bl	800b5dc <WHL_setSpeed>
  WHL_setSpeed(&g_DRV_context.wheelRearLeft  , p_speed);
 800a3ae:	6879      	ldr	r1, [r7, #4]
 800a3b0:	4807      	ldr	r0, [pc, #28]	; (800a3d0 <DRV_turnRight+0x50>)
 800a3b2:	f001 f913 	bl	800b5dc <WHL_setSpeed>

  return;
 800a3b6:	bf00      	nop
}
 800a3b8:	3708      	adds	r7, #8
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	bd80      	pop	{r7, pc}
 800a3be:	bf00      	nop
 800a3c0:	08010934 	.word	0x08010934
 800a3c4:	20000274 	.word	0x20000274
 800a3c8:	2000031c 	.word	0x2000031c
 800a3cc:	2000046c 	.word	0x2000046c
 800a3d0:	200003c4 	.word	0x200003c4

0800a3d4 <DRV_translateLeft>:

static void DRV_translateLeft(uint32_t p_speed)
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b082      	sub	sp, #8
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
  LOG_debug("Translating left @%u", p_speed);
 800a3dc:	687a      	ldr	r2, [r7, #4]
 800a3de:	490d      	ldr	r1, [pc, #52]	; (800a414 <DRV_translateLeft+0x40>)
 800a3e0:	2000      	movs	r0, #0
 800a3e2:	f000 f9bf 	bl	800a764 <LOG_log>

  DRV_setDirectionsTranslateLeft();
 800a3e6:	f7ff fe4f 	bl	800a088 <DRV_setDirectionsTranslateLeft>

  WHL_setSpeed(&g_DRV_context.wheelFrontRight, p_speed);
 800a3ea:	6879      	ldr	r1, [r7, #4]
 800a3ec:	480a      	ldr	r0, [pc, #40]	; (800a418 <DRV_translateLeft+0x44>)
 800a3ee:	f001 f8f5 	bl	800b5dc <WHL_setSpeed>
  WHL_setSpeed(&g_DRV_context.wheelFrontLeft , p_speed);
 800a3f2:	6879      	ldr	r1, [r7, #4]
 800a3f4:	4809      	ldr	r0, [pc, #36]	; (800a41c <DRV_translateLeft+0x48>)
 800a3f6:	f001 f8f1 	bl	800b5dc <WHL_setSpeed>
  WHL_setSpeed(&g_DRV_context.wheelRearRight , p_speed);
 800a3fa:	6879      	ldr	r1, [r7, #4]
 800a3fc:	4808      	ldr	r0, [pc, #32]	; (800a420 <DRV_translateLeft+0x4c>)
 800a3fe:	f001 f8ed 	bl	800b5dc <WHL_setSpeed>
  WHL_setSpeed(&g_DRV_context.wheelRearLeft  , p_speed);
 800a402:	6879      	ldr	r1, [r7, #4]
 800a404:	4807      	ldr	r0, [pc, #28]	; (800a424 <DRV_translateLeft+0x50>)
 800a406:	f001 f8e9 	bl	800b5dc <WHL_setSpeed>

  return;
 800a40a:	bf00      	nop
}
 800a40c:	3708      	adds	r7, #8
 800a40e:	46bd      	mov	sp, r7
 800a410:	bd80      	pop	{r7, pc}
 800a412:	bf00      	nop
 800a414:	08010948 	.word	0x08010948
 800a418:	20000274 	.word	0x20000274
 800a41c:	2000031c 	.word	0x2000031c
 800a420:	2000046c 	.word	0x2000046c
 800a424:	200003c4 	.word	0x200003c4

0800a428 <DRV_translateRight>:

static void DRV_translateRight(uint32_t p_speed)
{
 800a428:	b580      	push	{r7, lr}
 800a42a:	b082      	sub	sp, #8
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
  LOG_debug("Translating right @%u", p_speed);
 800a430:	687a      	ldr	r2, [r7, #4]
 800a432:	490d      	ldr	r1, [pc, #52]	; (800a468 <DRV_translateRight+0x40>)
 800a434:	2000      	movs	r0, #0
 800a436:	f000 f995 	bl	800a764 <LOG_log>

  DRV_setDirectionsTranslateRight();
 800a43a:	f7ff fe41 	bl	800a0c0 <DRV_setDirectionsTranslateRight>

  WHL_setSpeed(&g_DRV_context.wheelFrontRight, p_speed);
 800a43e:	6879      	ldr	r1, [r7, #4]
 800a440:	480a      	ldr	r0, [pc, #40]	; (800a46c <DRV_translateRight+0x44>)
 800a442:	f001 f8cb 	bl	800b5dc <WHL_setSpeed>
  WHL_setSpeed(&g_DRV_context.wheelFrontLeft , p_speed);
 800a446:	6879      	ldr	r1, [r7, #4]
 800a448:	4809      	ldr	r0, [pc, #36]	; (800a470 <DRV_translateRight+0x48>)
 800a44a:	f001 f8c7 	bl	800b5dc <WHL_setSpeed>
  WHL_setSpeed(&g_DRV_context.wheelRearRight , p_speed);
 800a44e:	6879      	ldr	r1, [r7, #4]
 800a450:	4808      	ldr	r0, [pc, #32]	; (800a474 <DRV_translateRight+0x4c>)
 800a452:	f001 f8c3 	bl	800b5dc <WHL_setSpeed>
  WHL_setSpeed(&g_DRV_context.wheelRearLeft  , p_speed);
 800a456:	6879      	ldr	r1, [r7, #4]
 800a458:	4807      	ldr	r0, [pc, #28]	; (800a478 <DRV_translateRight+0x50>)
 800a45a:	f001 f8bf 	bl	800b5dc <WHL_setSpeed>

  return;
 800a45e:	bf00      	nop
}
 800a460:	3708      	adds	r7, #8
 800a462:	46bd      	mov	sp, r7
 800a464:	bd80      	pop	{r7, pc}
 800a466:	bf00      	nop
 800a468:	08010960 	.word	0x08010960
 800a46c:	20000274 	.word	0x20000274
 800a470:	2000031c 	.word	0x2000031c
 800a474:	2000046c 	.word	0x2000046c
 800a478:	200003c4 	.word	0x200003c4

0800a47c <ENC_init>:

void ENC_init(T_ENC_Handle      *p_handle,
              char              *p_name,
              bool               p_invertOnUpdate,
              TIM_HandleTypeDef *p_encoderTimerHandle)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b084      	sub	sp, #16
 800a480:	af00      	add	r7, sp, #0
 800a482:	60f8      	str	r0, [r7, #12]
 800a484:	60b9      	str	r1, [r7, #8]
 800a486:	603b      	str	r3, [r7, #0]
 800a488:	4613      	mov	r3, r2
 800a48a:	71fb      	strb	r3, [r7, #7]
  LOG_info("Initializing Encoder module for %s", p_name);
 800a48c:	68ba      	ldr	r2, [r7, #8]
 800a48e:	490a      	ldr	r1, [pc, #40]	; (800a4b8 <ENC_init+0x3c>)
 800a490:	2001      	movs	r0, #1
 800a492:	f000 f967 	bl	800a764 <LOG_log>

  p_handle->name           = p_name;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	68ba      	ldr	r2, [r7, #8]
 800a49a:	601a      	str	r2, [r3, #0]
  p_handle->invertOnUpdate = p_invertOnUpdate;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	79fa      	ldrb	r2, [r7, #7]
 800a4a0:	721a      	strb	r2, [r3, #8]
  p_handle->timerHandle    = p_encoderTimerHandle;
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	683a      	ldr	r2, [r7, #0]
 800a4a6:	60da      	str	r2, [r3, #12]

  ENC_reset(p_handle);
 800a4a8:	68f8      	ldr	r0, [r7, #12]
 800a4aa:	f000 f807 	bl	800a4bc <ENC_reset>

  return;
 800a4ae:	bf00      	nop
}
 800a4b0:	3710      	adds	r7, #16
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	bd80      	pop	{r7, pc}
 800a4b6:	bf00      	nop
 800a4b8:	08010978 	.word	0x08010978

0800a4bc <ENC_reset>:

void ENC_reset(T_ENC_Handle *p_handle)
{
 800a4bc:	b480      	push	{r7}
 800a4be:	b083      	sub	sp, #12
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
  p_handle->value = 0;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	605a      	str	r2, [r3, #4]

  __HAL_TIM_SET_COUNTER(p_handle->timerHandle, 0);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	68db      	ldr	r3, [r3, #12]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 800a4d4:	bf00      	nop
}
 800a4d6:	370c      	adds	r7, #12
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	bc80      	pop	{r7}
 800a4dc:	4770      	bx	lr

0800a4de <ENC_update>:

void ENC_update(T_ENC_Handle *p_handle, int32_t p_value)
{
 800a4de:	b480      	push	{r7}
 800a4e0:	b083      	sub	sp, #12
 800a4e2:	af00      	add	r7, sp, #0
 800a4e4:	6078      	str	r0, [r7, #4]
 800a4e6:	6039      	str	r1, [r7, #0]
  if (p_handle->invertOnUpdate == false)
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	7a1b      	ldrb	r3, [r3, #8]
 800a4ec:	f083 0301 	eor.w	r3, r3, #1
 800a4f0:	b2db      	uxtb	r3, r3
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d003      	beq.n	800a4fe <ENC_update+0x20>
  {
    p_handle->value = p_value;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	683a      	ldr	r2, [r7, #0]
 800a4fa:	605a      	str	r2, [r3, #4]
  else
  {
    p_handle->value = -p_value;
  }

  return;
 800a4fc:	e004      	b.n	800a508 <ENC_update+0x2a>
    p_handle->value = -p_value;
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	425a      	negs	r2, r3
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	605a      	str	r2, [r3, #4]
  return;
 800a506:	bf00      	nop
}
 800a508:	370c      	adds	r7, #12
 800a50a:	46bd      	mov	sp, r7
 800a50c:	bc80      	pop	{r7}
 800a50e:	4770      	bx	lr

0800a510 <ENC_getCount>:

int32_t ENC_getCount(T_ENC_Handle *p_handle)
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b084      	sub	sp, #16
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
  int32_t l_count;

  l_count = p_handle->value;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	685b      	ldr	r3, [r3, #4]
 800a51c:	60fb      	str	r3, [r7, #12]

  ENC_reset(p_handle);
 800a51e:	6878      	ldr	r0, [r7, #4]
 800a520:	f7ff ffcc 	bl	800a4bc <ENC_reset>

  return l_count;
 800a524:	68fb      	ldr	r3, [r7, #12]
}
 800a526:	4618      	mov	r0, r3
 800a528:	3710      	adds	r7, #16
 800a52a:	46bd      	mov	sp, r7
 800a52c:	bd80      	pop	{r7, pc}
	...

0800a530 <LED_setMode>:
} T_LED_Context;

static T_LED_Context g_LED_context;

void LED_setMode(T_LED_MODE p_mode)
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b082      	sub	sp, #8
 800a534:	af00      	add	r7, sp, #0
 800a536:	4603      	mov	r3, r0
 800a538:	71fb      	strb	r3, [r7, #7]
  if (p_mode != g_LED_context.mode)
 800a53a:	4b1b      	ldr	r3, [pc, #108]	; (800a5a8 <LED_setMode+0x78>)
 800a53c:	781b      	ldrb	r3, [r3, #0]
 800a53e:	79fa      	ldrb	r2, [r7, #7]
 800a540:	429a      	cmp	r2, r3
 800a542:	d02d      	beq.n	800a5a0 <LED_setMode+0x70>
  {
    switch (p_mode)
 800a544:	79fb      	ldrb	r3, [r7, #7]
 800a546:	2b04      	cmp	r3, #4
 800a548:	d825      	bhi.n	800a596 <LED_setMode+0x66>
 800a54a:	a201      	add	r2, pc, #4	; (adr r2, 800a550 <LED_setMode+0x20>)
 800a54c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a550:	0800a565 	.word	0x0800a565
 800a554:	0800a56f 	.word	0x0800a56f
 800a558:	0800a579 	.word	0x0800a579
 800a55c:	0800a583 	.word	0x0800a583
 800a560:	0800a58d 	.word	0x0800a58d
    {
      case LED_MODE_FORCED_OFF:
        LOG_info("Turning LED OFF");
 800a564:	4911      	ldr	r1, [pc, #68]	; (800a5ac <LED_setMode+0x7c>)
 800a566:	2001      	movs	r0, #1
 800a568:	f000 f8fc 	bl	800a764 <LOG_log>
        break;
 800a56c:	e014      	b.n	800a598 <LED_setMode+0x68>

      case LED_MODE_FORCED_ON:
        LOG_info("Turning LED ON");
 800a56e:	4910      	ldr	r1, [pc, #64]	; (800a5b0 <LED_setMode+0x80>)
 800a570:	2001      	movs	r0, #1
 800a572:	f000 f8f7 	bl	800a764 <LOG_log>
        break;
 800a576:	e00f      	b.n	800a598 <LED_setMode+0x68>

      case LED_MODE_BLINK_SLOW:
        LOG_info("Setting LED to blink slow");
 800a578:	490e      	ldr	r1, [pc, #56]	; (800a5b4 <LED_setMode+0x84>)
 800a57a:	2001      	movs	r0, #1
 800a57c:	f000 f8f2 	bl	800a764 <LOG_log>
        break;
 800a580:	e00a      	b.n	800a598 <LED_setMode+0x68>

      case LED_MODE_BLINK_MEDIUM:
        LOG_info("Setting LED to blink medium");
 800a582:	490d      	ldr	r1, [pc, #52]	; (800a5b8 <LED_setMode+0x88>)
 800a584:	2001      	movs	r0, #1
 800a586:	f000 f8ed 	bl	800a764 <LOG_log>
        break;
 800a58a:	e005      	b.n	800a598 <LED_setMode+0x68>

      case LED_MODE_BLINK_FAST:
        LOG_info("Setting LED to blink fast");
 800a58c:	490b      	ldr	r1, [pc, #44]	; (800a5bc <LED_setMode+0x8c>)
 800a58e:	2001      	movs	r0, #1
 800a590:	f000 f8e8 	bl	800a764 <LOG_log>
        break;
 800a594:	e000      	b.n	800a598 <LED_setMode+0x68>

      default:
        ; /* Nothing to do */
        break;
 800a596:	bf00      	nop
    }

    g_LED_context.mode = p_mode;
 800a598:	4a03      	ldr	r2, [pc, #12]	; (800a5a8 <LED_setMode+0x78>)
 800a59a:	79fb      	ldrb	r3, [r7, #7]
 800a59c:	7013      	strb	r3, [r2, #0]
  else
  {
    ; /* Nothong to do */
  }

  return;
 800a59e:	bf00      	nop
 800a5a0:	bf00      	nop
}
 800a5a2:	3708      	adds	r7, #8
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	bd80      	pop	{r7, pc}
 800a5a8:	20000514 	.word	0x20000514
 800a5ac:	080109b4 	.word	0x080109b4
 800a5b0:	080109c4 	.word	0x080109c4
 800a5b4:	080109d4 	.word	0x080109d4
 800a5b8:	080109f0 	.word	0x080109f0
 800a5bc:	08010a0c 	.word	0x08010a0c

0800a5c0 <LED_update>:
{
  return g_LED_context.mode;
}

void LED_update(void)
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	af00      	add	r7, sp, #0
  static uint32_t l_blinkCounter = 0;

  switch (g_LED_context.mode)
 800a5c4:	4b2a      	ldr	r3, [pc, #168]	; (800a670 <LED_update+0xb0>)
 800a5c6:	781b      	ldrb	r3, [r3, #0]
 800a5c8:	2b04      	cmp	r3, #4
 800a5ca:	d849      	bhi.n	800a660 <LED_update+0xa0>
 800a5cc:	a201      	add	r2, pc, #4	; (adr r2, 800a5d4 <LED_update+0x14>)
 800a5ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5d2:	bf00      	nop
 800a5d4:	0800a5e9 	.word	0x0800a5e9
 800a5d8:	0800a5f7 	.word	0x0800a5f7
 800a5dc:	0800a605 	.word	0x0800a605
 800a5e0:	0800a633 	.word	0x0800a633
 800a5e4:	0800a655 	.word	0x0800a655
  {
    case LED_MODE_FORCED_OFF:
      HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_SET);
 800a5e8:	2201      	movs	r2, #1
 800a5ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a5ee:	4821      	ldr	r0, [pc, #132]	; (800a674 <LED_update+0xb4>)
 800a5f0:	f7f9 fc52 	bl	8003e98 <HAL_GPIO_WritePin>
      break;
 800a5f4:	e039      	b.n	800a66a <LED_update+0xaa>

    case LED_MODE_FORCED_ON:
      HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a5fc:	481d      	ldr	r0, [pc, #116]	; (800a674 <LED_update+0xb4>)
 800a5fe:	f7f9 fc4b 	bl	8003e98 <HAL_GPIO_WritePin>
      break;
 800a602:	e032      	b.n	800a66a <LED_update+0xaa>

    case LED_MODE_BLINK_SLOW:
      l_blinkCounter++;
 800a604:	4b1c      	ldr	r3, [pc, #112]	; (800a678 <LED_update+0xb8>)
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	3301      	adds	r3, #1
 800a60a:	4a1b      	ldr	r2, [pc, #108]	; (800a678 <LED_update+0xb8>)
 800a60c:	6013      	str	r3, [r2, #0]
      if (l_blinkCounter % 5 == 0)
 800a60e:	4b1a      	ldr	r3, [pc, #104]	; (800a678 <LED_update+0xb8>)
 800a610:	6819      	ldr	r1, [r3, #0]
 800a612:	4b1a      	ldr	r3, [pc, #104]	; (800a67c <LED_update+0xbc>)
 800a614:	fba3 2301 	umull	r2, r3, r3, r1
 800a618:	089a      	lsrs	r2, r3, #2
 800a61a:	4613      	mov	r3, r2
 800a61c:	009b      	lsls	r3, r3, #2
 800a61e:	4413      	add	r3, r2
 800a620:	1aca      	subs	r2, r1, r3
 800a622:	2a00      	cmp	r2, #0
 800a624:	d11e      	bne.n	800a664 <LED_update+0xa4>
      {
        HAL_GPIO_TogglePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
 800a626:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a62a:	4812      	ldr	r0, [pc, #72]	; (800a674 <LED_update+0xb4>)
 800a62c:	f7f9 fc66 	bl	8003efc <HAL_GPIO_TogglePin>
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 800a630:	e018      	b.n	800a664 <LED_update+0xa4>

    case LED_MODE_BLINK_MEDIUM:
      l_blinkCounter++;
 800a632:	4b11      	ldr	r3, [pc, #68]	; (800a678 <LED_update+0xb8>)
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	3301      	adds	r3, #1
 800a638:	4a0f      	ldr	r2, [pc, #60]	; (800a678 <LED_update+0xb8>)
 800a63a:	6013      	str	r3, [r2, #0]
      if (l_blinkCounter % 2 == 0)
 800a63c:	4b0e      	ldr	r3, [pc, #56]	; (800a678 <LED_update+0xb8>)
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	f003 0301 	and.w	r3, r3, #1
 800a644:	2b00      	cmp	r3, #0
 800a646:	d10f      	bne.n	800a668 <LED_update+0xa8>
      {
        HAL_GPIO_TogglePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
 800a648:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a64c:	4809      	ldr	r0, [pc, #36]	; (800a674 <LED_update+0xb4>)
 800a64e:	f7f9 fc55 	bl	8003efc <HAL_GPIO_TogglePin>
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 800a652:	e009      	b.n	800a668 <LED_update+0xa8>

    case LED_MODE_BLINK_FAST:
      HAL_GPIO_TogglePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
 800a654:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a658:	4806      	ldr	r0, [pc, #24]	; (800a674 <LED_update+0xb4>)
 800a65a:	f7f9 fc4f 	bl	8003efc <HAL_GPIO_TogglePin>
      break;
 800a65e:	e004      	b.n	800a66a <LED_update+0xaa>

    default:
      ; /* Nothing to do */
      break;
 800a660:	bf00      	nop
 800a662:	e002      	b.n	800a66a <LED_update+0xaa>
      break;
 800a664:	bf00      	nop
 800a666:	e000      	b.n	800a66a <LED_update+0xaa>
      break;
 800a668:	bf00      	nop
  }

  return;
 800a66a:	bf00      	nop
}
 800a66c:	bd80      	pop	{r7, pc}
 800a66e:	bf00      	nop
 800a670:	20000514 	.word	0x20000514
 800a674:	40011000 	.word	0x40011000
 800a678:	20000518 	.word	0x20000518
 800a67c:	cccccccd 	.word	0xcccccccd

0800a680 <LOG_init>:
{
  "DEBUG", "INFO", "WARNING", "ERROR"
};

void LOG_init(bool p_isLogOn)
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b082      	sub	sp, #8
 800a684:	af00      	add	r7, sp, #0
 800a686:	4603      	mov	r3, r0
 800a688:	71fb      	strb	r3, [r7, #7]
  g_LOG_context.isOn = p_isLogOn;
 800a68a:	4a05      	ldr	r2, [pc, #20]	; (800a6a0 <LOG_init+0x20>)
 800a68c:	79fb      	ldrb	r3, [r7, #7]
 800a68e:	7013      	strb	r3, [r2, #0]

  LOG_info("LOG initialized");
 800a690:	4904      	ldr	r1, [pc, #16]	; (800a6a4 <LOG_init+0x24>)
 800a692:	2001      	movs	r0, #1
 800a694:	f000 f866 	bl	800a764 <LOG_log>

  return;
 800a698:	bf00      	nop
}
 800a69a:	3708      	adds	r7, #8
 800a69c:	46bd      	mov	sp, r7
 800a69e:	bd80      	pop	{r7, pc}
 800a6a0:	2000051c 	.word	0x2000051c
 800a6a4:	08010a48 	.word	0x08010a48

0800a6a8 <LOG_toggleOnOff>:

void LOG_toggleOnOff(void)
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	af00      	add	r7, sp, #0
  if (g_LOG_context.isOn == true)
 800a6ac:	4b0a      	ldr	r3, [pc, #40]	; (800a6d8 <LOG_toggleOnOff+0x30>)
 800a6ae:	781b      	ldrb	r3, [r3, #0]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d007      	beq.n	800a6c4 <LOG_toggleOnOff+0x1c>
  {
    LOG_info("Turning LOG OFF");
 800a6b4:	4909      	ldr	r1, [pc, #36]	; (800a6dc <LOG_toggleOnOff+0x34>)
 800a6b6:	2001      	movs	r0, #1
 800a6b8:	f000 f854 	bl	800a764 <LOG_log>

    g_LOG_context.isOn = false;
 800a6bc:	4b06      	ldr	r3, [pc, #24]	; (800a6d8 <LOG_toggleOnOff+0x30>)
 800a6be:	2200      	movs	r2, #0
 800a6c0:	701a      	strb	r2, [r3, #0]
    g_LOG_context.isOn = true;

    LOG_info("Turning LOG ON");
  }

  return;
 800a6c2:	e007      	b.n	800a6d4 <LOG_toggleOnOff+0x2c>
    g_LOG_context.isOn = true;
 800a6c4:	4b04      	ldr	r3, [pc, #16]	; (800a6d8 <LOG_toggleOnOff+0x30>)
 800a6c6:	2201      	movs	r2, #1
 800a6c8:	701a      	strb	r2, [r3, #0]
    LOG_info("Turning LOG ON");
 800a6ca:	4905      	ldr	r1, [pc, #20]	; (800a6e0 <LOG_toggleOnOff+0x38>)
 800a6cc:	2001      	movs	r0, #1
 800a6ce:	f000 f849 	bl	800a764 <LOG_log>
  return;
 800a6d2:	bf00      	nop
}
 800a6d4:	bd80      	pop	{r7, pc}
 800a6d6:	bf00      	nop
 800a6d8:	2000051c 	.word	0x2000051c
 800a6dc:	08010a58 	.word	0x08010a58
 800a6e0:	08010a68 	.word	0x08010a68

0800a6e4 <LOG_setLevel>:

void LOG_setLevel(T_LOG_LEVEL p_level)
{
 800a6e4:	b480      	push	{r7}
 800a6e6:	b083      	sub	sp, #12
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	71fb      	strb	r3, [r7, #7]
  g_LOG_context.level = p_level;
 800a6ee:	4a04      	ldr	r2, [pc, #16]	; (800a700 <LOG_setLevel+0x1c>)
 800a6f0:	79fb      	ldrb	r3, [r7, #7]
 800a6f2:	7053      	strb	r3, [r2, #1]

  return;
 800a6f4:	bf00      	nop
}
 800a6f6:	370c      	adds	r7, #12
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	bc80      	pop	{r7}
 800a6fc:	4770      	bx	lr
 800a6fe:	bf00      	nop
 800a700:	2000051c 	.word	0x2000051c

0800a704 <LOG_increaseLevel>:

void LOG_increaseLevel(void)
{
 800a704:	b580      	push	{r7, lr}
 800a706:	af00      	add	r7, sp, #0
  /* Display more detailed logs */
  if (g_LOG_context.level > LOG_LEVEL_DEBUG)
 800a708:	4b08      	ldr	r3, [pc, #32]	; (800a72c <LOG_increaseLevel+0x28>)
 800a70a:	785b      	ldrb	r3, [r3, #1]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d00a      	beq.n	800a726 <LOG_increaseLevel+0x22>
  {
    LOG_info("Increasing LOG level");
 800a710:	4907      	ldr	r1, [pc, #28]	; (800a730 <LOG_increaseLevel+0x2c>)
 800a712:	2001      	movs	r0, #1
 800a714:	f000 f826 	bl	800a764 <LOG_log>

    g_LOG_context.level--;
 800a718:	4b04      	ldr	r3, [pc, #16]	; (800a72c <LOG_increaseLevel+0x28>)
 800a71a:	785b      	ldrb	r3, [r3, #1]
 800a71c:	3b01      	subs	r3, #1
 800a71e:	b2da      	uxtb	r2, r3
 800a720:	4b02      	ldr	r3, [pc, #8]	; (800a72c <LOG_increaseLevel+0x28>)
 800a722:	705a      	strb	r2, [r3, #1]
  else
  {
    ; /* Nothing to do */
  }

  return;
 800a724:	bf00      	nop
 800a726:	bf00      	nop
}
 800a728:	bd80      	pop	{r7, pc}
 800a72a:	bf00      	nop
 800a72c:	2000051c 	.word	0x2000051c
 800a730:	08010a78 	.word	0x08010a78

0800a734 <LOG_decreaseLevel>:

void LOG_decreaseLevel(void)
{
 800a734:	b580      	push	{r7, lr}
 800a736:	af00      	add	r7, sp, #0
  /* Display less detailed logs */
  if (g_LOG_context.level < LOG_LEVEL_ERROR)
 800a738:	4b08      	ldr	r3, [pc, #32]	; (800a75c <LOG_decreaseLevel+0x28>)
 800a73a:	785b      	ldrb	r3, [r3, #1]
 800a73c:	2b02      	cmp	r3, #2
 800a73e:	d80a      	bhi.n	800a756 <LOG_decreaseLevel+0x22>
  {
    LOG_info("Decreasing LOG level");
 800a740:	4907      	ldr	r1, [pc, #28]	; (800a760 <LOG_decreaseLevel+0x2c>)
 800a742:	2001      	movs	r0, #1
 800a744:	f000 f80e 	bl	800a764 <LOG_log>

    g_LOG_context.level++;
 800a748:	4b04      	ldr	r3, [pc, #16]	; (800a75c <LOG_decreaseLevel+0x28>)
 800a74a:	785b      	ldrb	r3, [r3, #1]
 800a74c:	3301      	adds	r3, #1
 800a74e:	b2da      	uxtb	r2, r3
 800a750:	4b02      	ldr	r3, [pc, #8]	; (800a75c <LOG_decreaseLevel+0x28>)
 800a752:	705a      	strb	r2, [r3, #1]
  else
  {
    ; /* Nothing to do */
  }

  return;
 800a754:	bf00      	nop
 800a756:	bf00      	nop
}
 800a758:	bd80      	pop	{r7, pc}
 800a75a:	bf00      	nop
 800a75c:	2000051c 	.word	0x2000051c
 800a760:	08010a90 	.word	0x08010a90

0800a764 <LOG_log>:

void LOG_log(T_LOG_LEVEL p_level, const char *p_format, ...)
{
 800a764:	b40e      	push	{r1, r2, r3}
 800a766:	b590      	push	{r4, r7, lr}
 800a768:	b0a6      	sub	sp, #152	; 0x98
 800a76a:	af02      	add	r7, sp, #8
 800a76c:	4603      	mov	r3, r0
 800a76e:	71fb      	strb	r3, [r7, #7]
  char            l_buffer[CST_CONSOLE_TX_MAX_STRING_LENGTH];
  va_list         l_argumentsList;
  RTC_TimeTypeDef l_time;

  if ((g_LOG_context.isOn == true) && (p_level >= g_LOG_context.level))
 800a770:	4b2c      	ldr	r3, [pc, #176]	; (800a824 <LOG_log+0xc0>)
 800a772:	781b      	ldrb	r3, [r3, #0]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d04e      	beq.n	800a816 <LOG_log+0xb2>
 800a778:	4b2a      	ldr	r3, [pc, #168]	; (800a824 <LOG_log+0xc0>)
 800a77a:	785b      	ldrb	r3, [r3, #1]
 800a77c:	79fa      	ldrb	r2, [r7, #7]
 800a77e:	429a      	cmp	r2, r3
 800a780:	d349      	bcc.n	800a816 <LOG_log+0xb2>
  {
    UTI_getTimeRtc(&l_time);
 800a782:	f107 0308 	add.w	r3, r7, #8
 800a786:	4618      	mov	r0, r3
 800a788:	f000 fdb0 	bl	800b2ec <UTI_getTimeRtc>

    va_start(l_argumentsList, p_format);
 800a78c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800a790:	60fb      	str	r3, [r7, #12]

    (void)sprintf  ( l_buffer, "%-7s - %02x:%02x:%02x - ", g_LOG_levelStrings[p_level], l_time.Hours, l_time.Minutes, l_time.Seconds);
 800a792:	79fb      	ldrb	r3, [r7, #7]
 800a794:	4a24      	ldr	r2, [pc, #144]	; (800a828 <LOG_log+0xc4>)
 800a796:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a79a:	7a3b      	ldrb	r3, [r7, #8]
 800a79c:	461c      	mov	r4, r3
 800a79e:	7a7b      	ldrb	r3, [r7, #9]
 800a7a0:	7ab9      	ldrb	r1, [r7, #10]
 800a7a2:	f107 0010 	add.w	r0, r7, #16
 800a7a6:	9101      	str	r1, [sp, #4]
 800a7a8:	9300      	str	r3, [sp, #0]
 800a7aa:	4623      	mov	r3, r4
 800a7ac:	491f      	ldr	r1, [pc, #124]	; (800a82c <LOG_log+0xc8>)
 800a7ae:	f001 fdb3 	bl	800c318 <siprintf>
    /* 21 is the length of string "%-7s - %02x:%02x:%02x - ". 2 is the length of string "\r\n". */
    /* So we start and write format right after the former and we keep space for the latter.    */
    (void)vsnprintf(&l_buffer[21], CST_CONSOLE_TX_MAX_STRING_LENGTH - 21 - 2, p_format, l_argumentsList);
 800a7b2:	f107 0310 	add.w	r3, r7, #16
 800a7b6:	f103 0015 	add.w	r0, r3, #21
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800a7c0:	2169      	movs	r1, #105	; 0x69
 800a7c2:	f002 fcc9 	bl	800d158 <vsniprintf>
    (void)strcat   ( l_buffer    , "\r\n");
 800a7c6:	f107 0310 	add.w	r3, r7, #16
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	f7f5 fd2c 	bl	8000228 <strlen>
 800a7d0:	4603      	mov	r3, r0
 800a7d2:	461a      	mov	r2, r3
 800a7d4:	f107 0310 	add.w	r3, r7, #16
 800a7d8:	4413      	add	r3, r2
 800a7da:	4a15      	ldr	r2, [pc, #84]	; (800a830 <LOG_log+0xcc>)
 800a7dc:	8811      	ldrh	r1, [r2, #0]
 800a7de:	7892      	ldrb	r2, [r2, #2]
 800a7e0:	8019      	strh	r1, [r3, #0]
 800a7e2:	709a      	strb	r2, [r3, #2]

    /* -1 is there to consider the end/null character, which strnlen() does not count */
    if (strnlen(l_buffer, CST_CONSOLE_TX_MAX_STRING_LENGTH) == CST_CONSOLE_TX_MAX_STRING_LENGTH - 1)
 800a7e4:	f107 0310 	add.w	r3, r7, #16
 800a7e8:	2180      	movs	r1, #128	; 0x80
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	f001 fdc7 	bl	800c37e <strnlen>
 800a7f0:	4603      	mov	r3, r0
 800a7f2:	2b7f      	cmp	r3, #127	; 0x7f
 800a7f4:	d108      	bne.n	800a808 <LOG_log+0xa4>
    {
      /* At -1, we got the end/null character. At -2 & 3, we got "\r\n". */
      l_buffer[CST_CONSOLE_TX_MAX_STRING_LENGTH - 4] = '.';
 800a7f6:	232e      	movs	r3, #46	; 0x2e
 800a7f8:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
      l_buffer[CST_CONSOLE_TX_MAX_STRING_LENGTH - 5] = '.';
 800a7fc:	232e      	movs	r3, #46	; 0x2e
 800a7fe:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
      l_buffer[CST_CONSOLE_TX_MAX_STRING_LENGTH - 6] = '.';
 800a802:	232e      	movs	r3, #46	; 0x2e
 800a804:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
    else
    {
      ; /* Nothing to do */
    }

    (void)printf("%s", l_buffer);
 800a808:	f107 0310 	add.w	r3, r7, #16
 800a80c:	4619      	mov	r1, r3
 800a80e:	4809      	ldr	r0, [pc, #36]	; (800a834 <LOG_log+0xd0>)
 800a810:	f001 fd26 	bl	800c260 <iprintf>
  else
  {
    ; /* Nothing to do */
  }

  return;
 800a814:	bf00      	nop
 800a816:	bf00      	nop
}
 800a818:	3790      	adds	r7, #144	; 0x90
 800a81a:	46bd      	mov	sp, r7
 800a81c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800a820:	b003      	add	sp, #12
 800a822:	4770      	bx	lr
 800a824:	2000051c 	.word	0x2000051c
 800a828:	2000000c 	.word	0x2000000c
 800a82c:	08010aa8 	.word	0x08010aa8
 800a830:	08010ac4 	.word	0x08010ac4
 800a834:	08010ac8 	.word	0x08010ac8

0800a838 <MAS_init>:
} T_MAS_Context;

static T_MAS_Context g_MAS_context;

void MAS_init(UART_HandleTypeDef *p_uartHandle)
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b082      	sub	sp, #8
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
  LOG_info("Initializing master connection");
 800a840:	490d      	ldr	r1, [pc, #52]	; (800a878 <MAS_init+0x40>)
 800a842:	2001      	movs	r0, #1
 800a844:	f7ff ff8e 	bl	800a764 <LOG_log>

  g_MAS_context.uartHandle     = p_uartHandle;
 800a848:	4a0c      	ldr	r2, [pc, #48]	; (800a87c <MAS_init+0x44>)
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	6013      	str	r3, [r2, #0]
  g_MAS_context.dataSize       = 0;
 800a84e:	4b0b      	ldr	r3, [pc, #44]	; (800a87c <MAS_init+0x44>)
 800a850:	2200      	movs	r2, #0
 800a852:	619a      	str	r2, [r3, #24]
  g_MAS_context.isDataComplete = false;
 800a854:	4b09      	ldr	r3, [pc, #36]	; (800a87c <MAS_init+0x44>)
 800a856:	2200      	movs	r2, #0
 800a858:	771a      	strb	r2, [r3, #28]

  SFO_initData(&g_MAS_context.data);
 800a85a:	4809      	ldr	r0, [pc, #36]	; (800a880 <MAS_init+0x48>)
 800a85c:	f000 fba6 	bl	800afac <SFO_initData>

  HAL_UART_Receive_IT(g_MAS_context.uartHandle, &g_MAS_context.datum, 1);
 800a860:	4b06      	ldr	r3, [pc, #24]	; (800a87c <MAS_init+0x44>)
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	2201      	movs	r2, #1
 800a866:	4907      	ldr	r1, [pc, #28]	; (800a884 <MAS_init+0x4c>)
 800a868:	4618      	mov	r0, r3
 800a86a:	f7fd fda1 	bl	80083b0 <HAL_UART_Receive_IT>

  return;
 800a86e:	bf00      	nop
}
 800a870:	3708      	adds	r7, #8
 800a872:	46bd      	mov	sp, r7
 800a874:	bd80      	pop	{r7, pc}
 800a876:	bf00      	nop
 800a878:	08010acc 	.word	0x08010acc
 800a87c:	20000520 	.word	0x20000520
 800a880:	20000525 	.word	0x20000525
 800a884:	20000524 	.word	0x20000524

0800a888 <MAS_receiveData>:

void MAS_receiveData(void)
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	af00      	add	r7, sp, #0
  /* If previous command was not processed yet, drop datum, */
  /* which will lead to an error, showing a design issue... */
  if (g_MAS_context.isDataComplete == true)
 800a88c:	4b10      	ldr	r3, [pc, #64]	; (800a8d0 <MAS_receiveData+0x48>)
 800a88e:	7f1b      	ldrb	r3, [r3, #28]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d114      	bne.n	800a8be <MAS_receiveData+0x36>
  {
    ; /* Nothing to do */
  }
  else
  {
    if (g_MAS_context.datum == '\r')
 800a894:	4b0e      	ldr	r3, [pc, #56]	; (800a8d0 <MAS_receiveData+0x48>)
 800a896:	791b      	ldrb	r3, [r3, #4]
 800a898:	2b0d      	cmp	r3, #13
 800a89a:	d103      	bne.n	800a8a4 <MAS_receiveData+0x1c>
    {
      g_MAS_context.isDataComplete = true;
 800a89c:	4b0c      	ldr	r3, [pc, #48]	; (800a8d0 <MAS_receiveData+0x48>)
 800a89e:	2201      	movs	r2, #1
 800a8a0:	771a      	strb	r2, [r3, #28]
 800a8a2:	e00c      	b.n	800a8be <MAS_receiveData+0x36>
    }
    else
    {
      g_MAS_context.data[g_MAS_context.dataSize] = g_MAS_context.datum;
 800a8a4:	4b0a      	ldr	r3, [pc, #40]	; (800a8d0 <MAS_receiveData+0x48>)
 800a8a6:	699b      	ldr	r3, [r3, #24]
 800a8a8:	4a09      	ldr	r2, [pc, #36]	; (800a8d0 <MAS_receiveData+0x48>)
 800a8aa:	7911      	ldrb	r1, [r2, #4]
 800a8ac:	4a08      	ldr	r2, [pc, #32]	; (800a8d0 <MAS_receiveData+0x48>)
 800a8ae:	4413      	add	r3, r2
 800a8b0:	460a      	mov	r2, r1
 800a8b2:	715a      	strb	r2, [r3, #5]
      g_MAS_context.dataSize++;
 800a8b4:	4b06      	ldr	r3, [pc, #24]	; (800a8d0 <MAS_receiveData+0x48>)
 800a8b6:	699b      	ldr	r3, [r3, #24]
 800a8b8:	3301      	adds	r3, #1
 800a8ba:	4a05      	ldr	r2, [pc, #20]	; (800a8d0 <MAS_receiveData+0x48>)
 800a8bc:	6193      	str	r3, [r2, #24]
    }
  }

  HAL_UART_Receive_IT(g_MAS_context.uartHandle, &g_MAS_context.datum, 1);
 800a8be:	4b04      	ldr	r3, [pc, #16]	; (800a8d0 <MAS_receiveData+0x48>)
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	2201      	movs	r2, #1
 800a8c4:	4903      	ldr	r1, [pc, #12]	; (800a8d4 <MAS_receiveData+0x4c>)
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	f7fd fd72 	bl	80083b0 <HAL_UART_Receive_IT>

  return;
 800a8cc:	bf00      	nop
}
 800a8ce:	bd80      	pop	{r7, pc}
 800a8d0:	20000520 	.word	0x20000520
 800a8d4:	20000524 	.word	0x20000524

0800a8d8 <MAS_updateFifo>:

void MAS_updateFifo(T_SFO_Handle *p_fifo)
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b082      	sub	sp, #8
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
  if (g_MAS_context.isDataComplete == false)
 800a8e0:	4b0c      	ldr	r3, [pc, #48]	; (800a914 <MAS_updateFifo+0x3c>)
 800a8e2:	7f1b      	ldrb	r3, [r3, #28]
 800a8e4:	f083 0301 	eor.w	r3, r3, #1
 800a8e8:	b2db      	uxtb	r3, r3
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d10d      	bne.n	800a90a <MAS_updateFifo+0x32>
  {
    ; /* Nothing to do */
  }
  else
  {
    SFO_push    (p_fifo, &g_MAS_context.data);
 800a8ee:	490a      	ldr	r1, [pc, #40]	; (800a918 <MAS_updateFifo+0x40>)
 800a8f0:	6878      	ldr	r0, [r7, #4]
 800a8f2:	f000 fb81 	bl	800aff8 <SFO_push>
    SFO_initData(        &g_MAS_context.data );
 800a8f6:	4808      	ldr	r0, [pc, #32]	; (800a918 <MAS_updateFifo+0x40>)
 800a8f8:	f000 fb58 	bl	800afac <SFO_initData>

    g_MAS_context.dataSize       = 0;
 800a8fc:	4b05      	ldr	r3, [pc, #20]	; (800a914 <MAS_updateFifo+0x3c>)
 800a8fe:	2200      	movs	r2, #0
 800a900:	619a      	str	r2, [r3, #24]
    g_MAS_context.isDataComplete = false;
 800a902:	4b04      	ldr	r3, [pc, #16]	; (800a914 <MAS_updateFifo+0x3c>)
 800a904:	2200      	movs	r2, #0
 800a906:	771a      	strb	r2, [r3, #28]
  }

  return;
 800a908:	bf00      	nop
 800a90a:	bf00      	nop
}
 800a90c:	3708      	adds	r7, #8
 800a90e:	46bd      	mov	sp, r7
 800a910:	bd80      	pop	{r7, pc}
 800a912:	bf00      	nop
 800a914:	20000520 	.word	0x20000520
 800a918:	20000525 	.word	0x20000525

0800a91c <MAS_sendString>:

void MAS_sendString(char *p_string, uint32_t p_length)
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b082      	sub	sp, #8
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
 800a924:	6039      	str	r1, [r7, #0]
  /* As this method is using for logging/debug, we will not deal with failure cases */
 (void)HAL_UART_Transmit(g_MAS_context.uartHandle,
 800a926:	4b06      	ldr	r3, [pc, #24]	; (800a940 <MAS_sendString+0x24>)
 800a928:	6818      	ldr	r0, [r3, #0]
 800a92a:	683b      	ldr	r3, [r7, #0]
 800a92c:	b29a      	uxth	r2, r3
 800a92e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a932:	6879      	ldr	r1, [r7, #4]
 800a934:	f7fd fcaa 	bl	800828c <HAL_UART_Transmit>
              (uint8_t *)p_string,
                         p_length,
                         CST_UART_TRANSMIT_TIMEOUT_IN_MS);

  return;
 800a938:	bf00      	nop
}
 800a93a:	3708      	adds	r7, #8
 800a93c:	46bd      	mov	sp, r7
 800a93e:	bd80      	pop	{r7, pc}
 800a940:	20000520 	.word	0x20000520

0800a944 <MTR_init>:
              uint32_t           p_dirPin1,
              GPIO_TypeDef      *p_dirPin2Port,
              uint32_t           p_dirPin2,
              TIM_HandleTypeDef *p_pwmTimerHandle,
              uint32_t           p_pwmChannel)
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b084      	sub	sp, #16
 800a948:	af00      	add	r7, sp, #0
 800a94a:	60f8      	str	r0, [r7, #12]
 800a94c:	60b9      	str	r1, [r7, #8]
 800a94e:	607a      	str	r2, [r7, #4]
 800a950:	603b      	str	r3, [r7, #0]
  LOG_info("Initializing Motor module for %s", p_name);
 800a952:	68ba      	ldr	r2, [r7, #8]
 800a954:	4912      	ldr	r1, [pc, #72]	; (800a9a0 <MTR_init+0x5c>)
 800a956:	2001      	movs	r0, #1
 800a958:	f7ff ff04 	bl	800a764 <LOG_log>

  p_handle->name           = p_name;
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	68ba      	ldr	r2, [r7, #8]
 800a960:	601a      	str	r2, [r3, #0]
  p_handle->dirPin1Port    = p_dirPin1Port;
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	687a      	ldr	r2, [r7, #4]
 800a966:	605a      	str	r2, [r3, #4]
  p_handle->dirPin1        = p_dirPin1;
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	683a      	ldr	r2, [r7, #0]
 800a96c:	609a      	str	r2, [r3, #8]
  p_handle->dirPin2Port    = p_dirPin2Port;
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	69ba      	ldr	r2, [r7, #24]
 800a972:	60da      	str	r2, [r3, #12]
  p_handle->dirPin2        = p_dirPin2;
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	69fa      	ldr	r2, [r7, #28]
 800a978:	611a      	str	r2, [r3, #16]
  p_handle->pwmTimerHandle = p_pwmTimerHandle;
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	6a3a      	ldr	r2, [r7, #32]
 800a97e:	61da      	str	r2, [r3, #28]
  p_handle->pwmChannel     = p_pwmChannel;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a984:	621a      	str	r2, [r3, #32]

  MTR_setDirection(p_handle, MTR_DIRECTION_STOP);
 800a986:	2100      	movs	r1, #0
 800a988:	68f8      	ldr	r0, [r7, #12]
 800a98a:	f000 f80b 	bl	800a9a4 <MTR_setDirection>
  MTR_setSpeed    (p_handle, 0                 );
 800a98e:	2100      	movs	r1, #0
 800a990:	68f8      	ldr	r0, [r7, #12]
 800a992:	f000 f87f 	bl	800aa94 <MTR_setSpeed>

  return;
 800a996:	bf00      	nop
}
 800a998:	3710      	adds	r7, #16
 800a99a:	46bd      	mov	sp, r7
 800a99c:	bd80      	pop	{r7, pc}
 800a99e:	bf00      	nop
 800a9a0:	08010aec 	.word	0x08010aec

0800a9a4 <MTR_setDirection>:

void MTR_setDirection(T_MTR_Handle *p_handle, T_MTR_DIRECTION p_direction)
{
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	b082      	sub	sp, #8
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
 800a9ac:	460b      	mov	r3, r1
 800a9ae:	70fb      	strb	r3, [r7, #3]
  if (p_direction == p_handle->direction)
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	7d1b      	ldrb	r3, [r3, #20]
 800a9b4:	78fa      	ldrb	r2, [r7, #3]
 800a9b6:	429a      	cmp	r2, r3
 800a9b8:	d056      	beq.n	800aa68 <MTR_setDirection+0xc4>
  {
    ; /* Nothing to do */
  }
  else
  {
    if (p_direction == MTR_DIRECTION_STOP)
 800a9ba:	78fb      	ldrb	r3, [r7, #3]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d119      	bne.n	800a9f4 <MTR_setDirection+0x50>
    {
      LOG_debug("%s motor STOP", p_handle->name);
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	461a      	mov	r2, r3
 800a9c6:	492a      	ldr	r1, [pc, #168]	; (800aa70 <MTR_setDirection+0xcc>)
 800a9c8:	2000      	movs	r0, #0
 800a9ca:	f7ff fecb 	bl	800a764 <LOG_log>

      HAL_GPIO_WritePin(p_handle->dirPin1Port, p_handle->dirPin1, GPIO_PIN_RESET);
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	6858      	ldr	r0, [r3, #4]
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	689b      	ldr	r3, [r3, #8]
 800a9d6:	b29b      	uxth	r3, r3
 800a9d8:	2200      	movs	r2, #0
 800a9da:	4619      	mov	r1, r3
 800a9dc:	f7f9 fa5c 	bl	8003e98 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(p_handle->dirPin2Port, p_handle->dirPin2, GPIO_PIN_RESET);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	68d8      	ldr	r0, [r3, #12]
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	691b      	ldr	r3, [r3, #16]
 800a9e8:	b29b      	uxth	r3, r3
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	4619      	mov	r1, r3
 800a9ee:	f7f9 fa53 	bl	8003e98 <HAL_GPIO_WritePin>
 800a9f2:	e035      	b.n	800aa60 <MTR_setDirection+0xbc>
    }
    else if (p_direction == MTR_DIRECTION_FORWARD)
 800a9f4:	78fb      	ldrb	r3, [r7, #3]
 800a9f6:	2b01      	cmp	r3, #1
 800a9f8:	d119      	bne.n	800aa2e <MTR_setDirection+0x8a>
    {
      LOG_debug("%s motor go FORWARD", p_handle->name);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	461a      	mov	r2, r3
 800aa00:	491c      	ldr	r1, [pc, #112]	; (800aa74 <MTR_setDirection+0xd0>)
 800aa02:	2000      	movs	r0, #0
 800aa04:	f7ff feae 	bl	800a764 <LOG_log>

      HAL_GPIO_WritePin(p_handle->dirPin1Port, p_handle->dirPin1, GPIO_PIN_SET  );
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	6858      	ldr	r0, [r3, #4]
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	689b      	ldr	r3, [r3, #8]
 800aa10:	b29b      	uxth	r3, r3
 800aa12:	2201      	movs	r2, #1
 800aa14:	4619      	mov	r1, r3
 800aa16:	f7f9 fa3f 	bl	8003e98 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(p_handle->dirPin2Port, p_handle->dirPin2, GPIO_PIN_RESET);
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	68d8      	ldr	r0, [r3, #12]
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	691b      	ldr	r3, [r3, #16]
 800aa22:	b29b      	uxth	r3, r3
 800aa24:	2200      	movs	r2, #0
 800aa26:	4619      	mov	r1, r3
 800aa28:	f7f9 fa36 	bl	8003e98 <HAL_GPIO_WritePin>
 800aa2c:	e018      	b.n	800aa60 <MTR_setDirection+0xbc>
    }
    else
    {
      LOG_debug("%s motor go BACKWARD", p_handle->name);
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	461a      	mov	r2, r3
 800aa34:	4910      	ldr	r1, [pc, #64]	; (800aa78 <MTR_setDirection+0xd4>)
 800aa36:	2000      	movs	r0, #0
 800aa38:	f7ff fe94 	bl	800a764 <LOG_log>

      HAL_GPIO_WritePin(p_handle->dirPin1Port, p_handle->dirPin1, GPIO_PIN_RESET);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	6858      	ldr	r0, [r3, #4]
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	689b      	ldr	r3, [r3, #8]
 800aa44:	b29b      	uxth	r3, r3
 800aa46:	2200      	movs	r2, #0
 800aa48:	4619      	mov	r1, r3
 800aa4a:	f7f9 fa25 	bl	8003e98 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(p_handle->dirPin2Port, p_handle->dirPin2, GPIO_PIN_SET  );
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	68d8      	ldr	r0, [r3, #12]
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	691b      	ldr	r3, [r3, #16]
 800aa56:	b29b      	uxth	r3, r3
 800aa58:	2201      	movs	r2, #1
 800aa5a:	4619      	mov	r1, r3
 800aa5c:	f7f9 fa1c 	bl	8003e98 <HAL_GPIO_WritePin>
    }

    p_handle->direction = p_direction;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	78fa      	ldrb	r2, [r7, #3]
 800aa64:	751a      	strb	r2, [r3, #20]
  }

  return;
 800aa66:	bf00      	nop
 800aa68:	bf00      	nop
}
 800aa6a:	3708      	adds	r7, #8
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	bd80      	pop	{r7, pc}
 800aa70:	08010b10 	.word	0x08010b10
 800aa74:	08010b20 	.word	0x08010b20
 800aa78:	08010b34 	.word	0x08010b34

0800aa7c <MTR_getDirection>:

T_MTR_DIRECTION MTR_getDirection(T_MTR_Handle *p_handle)
{
 800aa7c:	b480      	push	{r7}
 800aa7e:	b083      	sub	sp, #12
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
  return p_handle->direction;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	7d1b      	ldrb	r3, [r3, #20]
}
 800aa88:	4618      	mov	r0, r3
 800aa8a:	370c      	adds	r7, #12
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	bc80      	pop	{r7}
 800aa90:	4770      	bx	lr
	...

0800aa94 <MTR_setSpeed>:

void MTR_setSpeed(T_MTR_Handle *p_handle, uint32_t p_speed)
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b082      	sub	sp, #8
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
 800aa9c:	6039      	str	r1, [r7, #0]
  if (p_speed == p_handle->speed)
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	699b      	ldr	r3, [r3, #24]
 800aaa2:	683a      	ldr	r2, [r7, #0]
 800aaa4:	429a      	cmp	r2, r3
 800aaa6:	d02d      	beq.n	800ab04 <MTR_setSpeed+0x70>
  {
    ; /* Nothing to do */
  }
  else
  {
    LOG_debug("Setting  %s motor speed to %u", p_handle->name, p_speed);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681a      	ldr	r2, [r3, #0]
 800aaac:	683b      	ldr	r3, [r7, #0]
 800aaae:	4917      	ldr	r1, [pc, #92]	; (800ab0c <MTR_setSpeed+0x78>)
 800aab0:	2000      	movs	r0, #0
 800aab2:	f7ff fe57 	bl	800a764 <LOG_log>

    __HAL_TIM_SET_COMPARE(p_handle->pwmTimerHandle, p_handle->pwmChannel, p_speed);
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	6a1b      	ldr	r3, [r3, #32]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d105      	bne.n	800aaca <MTR_setSpeed+0x36>
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	69db      	ldr	r3, [r3, #28]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	683a      	ldr	r2, [r7, #0]
 800aac6:	635a      	str	r2, [r3, #52]	; 0x34
 800aac8:	e018      	b.n	800aafc <MTR_setSpeed+0x68>
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	6a1b      	ldr	r3, [r3, #32]
 800aace:	2b04      	cmp	r3, #4
 800aad0:	d105      	bne.n	800aade <MTR_setSpeed+0x4a>
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	69db      	ldr	r3, [r3, #28]
 800aad6:	681a      	ldr	r2, [r3, #0]
 800aad8:	683b      	ldr	r3, [r7, #0]
 800aada:	6393      	str	r3, [r2, #56]	; 0x38
 800aadc:	e00e      	b.n	800aafc <MTR_setSpeed+0x68>
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	6a1b      	ldr	r3, [r3, #32]
 800aae2:	2b08      	cmp	r3, #8
 800aae4:	d105      	bne.n	800aaf2 <MTR_setSpeed+0x5e>
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	69db      	ldr	r3, [r3, #28]
 800aaea:	681a      	ldr	r2, [r3, #0]
 800aaec:	683b      	ldr	r3, [r7, #0]
 800aaee:	63d3      	str	r3, [r2, #60]	; 0x3c
 800aaf0:	e004      	b.n	800aafc <MTR_setSpeed+0x68>
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	69db      	ldr	r3, [r3, #28]
 800aaf6:	681a      	ldr	r2, [r3, #0]
 800aaf8:	683b      	ldr	r3, [r7, #0]
 800aafa:	6413      	str	r3, [r2, #64]	; 0x40

    p_handle->speed = p_speed;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	683a      	ldr	r2, [r7, #0]
 800ab00:	619a      	str	r2, [r3, #24]
  }

  return;
 800ab02:	bf00      	nop
 800ab04:	bf00      	nop
}
 800ab06:	3708      	adds	r7, #8
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	bd80      	pop	{r7, pc}
 800ab0c:	08010b4c 	.word	0x08010b4c

0800ab10 <MTR_getSpeed>:

uint32_t MTR_getSpeed(T_MTR_Handle *p_handle)
{
 800ab10:	b480      	push	{r7}
 800ab12:	b083      	sub	sp, #12
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
  return p_handle->speed;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	699b      	ldr	r3, [r3, #24]
}
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	370c      	adds	r7, #12
 800ab20:	46bd      	mov	sp, r7
 800ab22:	bc80      	pop	{r7}
 800ab24:	4770      	bx	lr
	...

0800ab28 <PID_init>:
               float         p_kd,
               float         p_targetValue,
               float         p_minValue,
               float         p_maxValue,
               float         p_antiWindUpFactor)
{
 800ab28:	b590      	push	{r4, r7, lr}
 800ab2a:	b085      	sub	sp, #20
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	60f8      	str	r0, [r7, #12]
 800ab30:	60b9      	str	r1, [r7, #8]
 800ab32:	607a      	str	r2, [r7, #4]
 800ab34:	603b      	str	r3, [r7, #0]
  LOG_info("Initializing PID module for %s", p_name);
 800ab36:	68ba      	ldr	r2, [r7, #8]
 800ab38:	492d      	ldr	r1, [pc, #180]	; (800abf0 <PID_init+0xc8>)
 800ab3a:	2001      	movs	r0, #1
 800ab3c:	f7ff fe12 	bl	800a764 <LOG_log>

  p_handle->name            = p_name;
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	68ba      	ldr	r2, [r7, #8]
 800ab44:	601a      	str	r2, [r3, #0]
  p_handle->kp              = p_kp;
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	687a      	ldr	r2, [r7, #4]
 800ab4a:	605a      	str	r2, [r3, #4]
  p_handle->ki              = p_ki;
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	683a      	ldr	r2, [r7, #0]
 800ab50:	609a      	str	r2, [r3, #8]
  p_handle->kd              = p_kd;
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	6a3a      	ldr	r2, [r7, #32]
 800ab56:	60da      	str	r2, [r3, #12]
  p_handle->targetValue     = p_targetValue;
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab5c:	611a      	str	r2, [r3, #16]
  p_handle->minValue        = p_minValue;
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab62:	615a      	str	r2, [r3, #20]
  p_handle->maxValue        = p_maxValue;
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab68:	619a      	str	r2, [r3, #24]
  p_handle->antiWindUpValue = p_antiWindUpFactor * UTI_MAX(abs(p_handle->minValue), abs(p_handle->maxValue));
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	695b      	ldr	r3, [r3, #20]
 800ab6e:	4618      	mov	r0, r3
 800ab70:	f7f6 fac4 	bl	80010fc <__aeabi_f2iz>
 800ab74:	4603      	mov	r3, r0
 800ab76:	ea83 74e3 	eor.w	r4, r3, r3, asr #31
 800ab7a:	eba4 74e3 	sub.w	r4, r4, r3, asr #31
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	699b      	ldr	r3, [r3, #24]
 800ab82:	4618      	mov	r0, r3
 800ab84:	f7f6 faba 	bl	80010fc <__aeabi_f2iz>
 800ab88:	4603      	mov	r3, r0
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	bfb8      	it	lt
 800ab8e:	425b      	neglt	r3, r3
 800ab90:	429c      	cmp	r4, r3
 800ab92:	dd0d      	ble.n	800abb0 <PID_init+0x88>
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	695b      	ldr	r3, [r3, #20]
 800ab98:	4618      	mov	r0, r3
 800ab9a:	f7f6 faaf 	bl	80010fc <__aeabi_f2iz>
 800ab9e:	4603      	mov	r3, r0
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	bfb8      	it	lt
 800aba4:	425b      	neglt	r3, r3
 800aba6:	4618      	mov	r0, r3
 800aba8:	f7f6 f904 	bl	8000db4 <__aeabi_i2f>
 800abac:	4603      	mov	r3, r0
 800abae:	e00c      	b.n	800abca <PID_init+0xa2>
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	699b      	ldr	r3, [r3, #24]
 800abb4:	4618      	mov	r0, r3
 800abb6:	f7f6 faa1 	bl	80010fc <__aeabi_f2iz>
 800abba:	4603      	mov	r3, r0
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	bfb8      	it	lt
 800abc0:	425b      	neglt	r3, r3
 800abc2:	4618      	mov	r0, r3
 800abc4:	f7f6 f8f6 	bl	8000db4 <__aeabi_i2f>
 800abc8:	4603      	mov	r3, r0
 800abca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800abcc:	4618      	mov	r0, r3
 800abce:	f7f6 f945 	bl	8000e5c <__aeabi_fmul>
 800abd2:	4603      	mov	r3, r0
 800abd4:	461a      	mov	r2, r3
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	61da      	str	r2, [r3, #28]

  PID_reset  (p_handle       );
 800abda:	68f8      	ldr	r0, [r7, #12]
 800abdc:	f000 f80a 	bl	800abf4 <PID_reset>
  PID_logInfo(p_handle, false);
 800abe0:	2100      	movs	r1, #0
 800abe2:	68f8      	ldr	r0, [r7, #12]
 800abe4:	f000 f912 	bl	800ae0c <PID_logInfo>

  return;
 800abe8:	bf00      	nop
}
 800abea:	3714      	adds	r7, #20
 800abec:	46bd      	mov	sp, r7
 800abee:	bd90      	pop	{r4, r7, pc}
 800abf0:	08010c00 	.word	0x08010c00

0800abf4 <PID_reset>:

void PID_reset(T_PID_Handle *p_handle)
{
 800abf4:	b480      	push	{r7}
 800abf6:	b083      	sub	sp, #12
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
  p_handle->pValue        = 0.0f;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	f04f 0200 	mov.w	r2, #0
 800ac02:	621a      	str	r2, [r3, #32]
  p_handle->iValue        = 0.0f;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	f04f 0200 	mov.w	r2, #0
 800ac0a:	625a      	str	r2, [r3, #36]	; 0x24
  p_handle->dValue        = 0.0f;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	f04f 0200 	mov.w	r2, #0
 800ac12:	629a      	str	r2, [r3, #40]	; 0x28
  p_handle->computedValue = 0.0f;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	f04f 0200 	mov.w	r2, #0
 800ac1a:	62da      	str	r2, [r3, #44]	; 0x2c
  p_handle->lastError     = 0.0f;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	f04f 0200 	mov.w	r2, #0
 800ac22:	631a      	str	r2, [r3, #48]	; 0x30

  return;
 800ac24:	bf00      	nop
}
 800ac26:	370c      	adds	r7, #12
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	bc80      	pop	{r7}
 800ac2c:	4770      	bx	lr

0800ac2e <PID_setKp>:

void PID_setKp(T_PID_Handle *p_handle, float p_kp)
{
 800ac2e:	b480      	push	{r7}
 800ac30:	b083      	sub	sp, #12
 800ac32:	af00      	add	r7, sp, #0
 800ac34:	6078      	str	r0, [r7, #4]
 800ac36:	6039      	str	r1, [r7, #0]
  p_handle->kp = p_kp;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	683a      	ldr	r2, [r7, #0]
 800ac3c:	605a      	str	r2, [r3, #4]

  return;
 800ac3e:	bf00      	nop
}
 800ac40:	370c      	adds	r7, #12
 800ac42:	46bd      	mov	sp, r7
 800ac44:	bc80      	pop	{r7}
 800ac46:	4770      	bx	lr

0800ac48 <PID_setKi>:

void PID_setKi(T_PID_Handle *p_handle, float p_ki)
{
 800ac48:	b480      	push	{r7}
 800ac4a:	b083      	sub	sp, #12
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
 800ac50:	6039      	str	r1, [r7, #0]
  p_handle->ki = p_ki;
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	683a      	ldr	r2, [r7, #0]
 800ac56:	609a      	str	r2, [r3, #8]

  return;
 800ac58:	bf00      	nop
}
 800ac5a:	370c      	adds	r7, #12
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	bc80      	pop	{r7}
 800ac60:	4770      	bx	lr

0800ac62 <PID_setKd>:

void PID_setKd(T_PID_Handle *p_handle, float p_kd)
{
 800ac62:	b480      	push	{r7}
 800ac64:	b083      	sub	sp, #12
 800ac66:	af00      	add	r7, sp, #0
 800ac68:	6078      	str	r0, [r7, #4]
 800ac6a:	6039      	str	r1, [r7, #0]
  p_handle->kd = p_kd;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	683a      	ldr	r2, [r7, #0]
 800ac70:	60da      	str	r2, [r3, #12]

  return;
 800ac72:	bf00      	nop
}
 800ac74:	370c      	adds	r7, #12
 800ac76:	46bd      	mov	sp, r7
 800ac78:	bc80      	pop	{r7}
 800ac7a:	4770      	bx	lr

0800ac7c <PID_setTargetValue>:

void PID_setTargetValue(T_PID_Handle *p_handle, float p_targetValue)
{
 800ac7c:	b480      	push	{r7}
 800ac7e:	b083      	sub	sp, #12
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
 800ac84:	6039      	str	r1, [r7, #0]
  p_handle->targetValue = p_targetValue;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	683a      	ldr	r2, [r7, #0]
 800ac8a:	611a      	str	r2, [r3, #16]

  return;
 800ac8c:	bf00      	nop
}
 800ac8e:	370c      	adds	r7, #12
 800ac90:	46bd      	mov	sp, r7
 800ac92:	bc80      	pop	{r7}
 800ac94:	4770      	bx	lr

0800ac96 <PID_update>:
{
  return p_handle->antiWindUpValue;
}

float PID_update(T_PID_Handle *p_handle, float p_currentValue, uint32_t p_timeDelta)
{
 800ac96:	b5b0      	push	{r4, r5, r7, lr}
 800ac98:	b088      	sub	sp, #32
 800ac9a:	af02      	add	r7, sp, #8
 800ac9c:	60f8      	str	r0, [r7, #12]
 800ac9e:	60b9      	str	r1, [r7, #8]
 800aca0:	607a      	str	r2, [r7, #4]
  int32_t l_currentError;

  l_currentError = p_handle->targetValue - p_currentValue;
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	691b      	ldr	r3, [r3, #16]
 800aca6:	68b9      	ldr	r1, [r7, #8]
 800aca8:	4618      	mov	r0, r3
 800acaa:	f7f5 ffcd 	bl	8000c48 <__aeabi_fsub>
 800acae:	4603      	mov	r3, r0
 800acb0:	4618      	mov	r0, r3
 800acb2:	f7f6 fa23 	bl	80010fc <__aeabi_f2iz>
 800acb6:	4603      	mov	r3, r0
 800acb8:	617b      	str	r3, [r7, #20]

  p_handle->pValue    =  l_currentError;
 800acba:	6978      	ldr	r0, [r7, #20]
 800acbc:	f7f6 f87a 	bl	8000db4 <__aeabi_i2f>
 800acc0:	4602      	mov	r2, r0
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	621a      	str	r2, [r3, #32]
  p_handle->iValue   +=  l_currentError * p_timeDelta;
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800acca:	697b      	ldr	r3, [r7, #20]
 800accc:	687a      	ldr	r2, [r7, #4]
 800acce:	fb02 f303 	mul.w	r3, r2, r3
 800acd2:	4618      	mov	r0, r3
 800acd4:	f7f6 f86a 	bl	8000dac <__aeabi_ui2f>
 800acd8:	4603      	mov	r3, r0
 800acda:	4619      	mov	r1, r3
 800acdc:	4620      	mov	r0, r4
 800acde:	f7f5 ffb5 	bl	8000c4c <__addsf3>
 800ace2:	4603      	mov	r3, r0
 800ace4:	461a      	mov	r2, r3
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	625a      	str	r2, [r3, #36]	; 0x24
  p_handle->iValue    =  UTI_clampIntValue(p_handle->iValue, -p_handle->antiWindUpValue, p_handle->antiWindUpValue, true, 0);
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acee:	4618      	mov	r0, r3
 800acf0:	f7f6 fa04 	bl	80010fc <__aeabi_f2iz>
 800acf4:	4604      	mov	r4, r0
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	69db      	ldr	r3, [r3, #28]
 800acfa:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800acfe:	4618      	mov	r0, r3
 800ad00:	f7f6 f9fc 	bl	80010fc <__aeabi_f2iz>
 800ad04:	4605      	mov	r5, r0
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	69db      	ldr	r3, [r3, #28]
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	f7f6 f9f6 	bl	80010fc <__aeabi_f2iz>
 800ad10:	4602      	mov	r2, r0
 800ad12:	2300      	movs	r3, #0
 800ad14:	9300      	str	r3, [sp, #0]
 800ad16:	2301      	movs	r3, #1
 800ad18:	4629      	mov	r1, r5
 800ad1a:	4620      	mov	r0, r4
 800ad1c:	f000 fb1c 	bl	800b358 <UTI_clampIntValue>
 800ad20:	4603      	mov	r3, r0
 800ad22:	4618      	mov	r0, r3
 800ad24:	f7f6 f846 	bl	8000db4 <__aeabi_i2f>
 800ad28:	4602      	mov	r2, r0
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	625a      	str	r2, [r3, #36]	; 0x24
  p_handle->dValue    = (l_currentError - p_handle->lastError) / p_timeDelta;
 800ad2e:	6978      	ldr	r0, [r7, #20]
 800ad30:	f7f6 f840 	bl	8000db4 <__aeabi_i2f>
 800ad34:	4602      	mov	r2, r0
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad3a:	4619      	mov	r1, r3
 800ad3c:	4610      	mov	r0, r2
 800ad3e:	f7f5 ff83 	bl	8000c48 <__aeabi_fsub>
 800ad42:	4603      	mov	r3, r0
 800ad44:	461c      	mov	r4, r3
 800ad46:	6878      	ldr	r0, [r7, #4]
 800ad48:	f7f6 f830 	bl	8000dac <__aeabi_ui2f>
 800ad4c:	4603      	mov	r3, r0
 800ad4e:	4619      	mov	r1, r3
 800ad50:	4620      	mov	r0, r4
 800ad52:	f7f6 f937 	bl	8000fc4 <__aeabi_fdiv>
 800ad56:	4603      	mov	r3, r0
 800ad58:	461a      	mov	r2, r3
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	629a      	str	r2, [r3, #40]	; 0x28
  p_handle->lastError =  l_currentError;
 800ad5e:	6978      	ldr	r0, [r7, #20]
 800ad60:	f7f6 f828 	bl	8000db4 <__aeabi_i2f>
 800ad64:	4602      	mov	r2, r0
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	631a      	str	r2, [r3, #48]	; 0x30

  p_handle->computedValue = p_handle->kp * p_handle->pValue + p_handle->ki * p_handle->iValue + p_handle->kd * p_handle->dValue;
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	685a      	ldr	r2, [r3, #4]
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	6a1b      	ldr	r3, [r3, #32]
 800ad72:	4619      	mov	r1, r3
 800ad74:	4610      	mov	r0, r2
 800ad76:	f7f6 f871 	bl	8000e5c <__aeabi_fmul>
 800ad7a:	4603      	mov	r3, r0
 800ad7c:	461c      	mov	r4, r3
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	689a      	ldr	r2, [r3, #8]
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad86:	4619      	mov	r1, r3
 800ad88:	4610      	mov	r0, r2
 800ad8a:	f7f6 f867 	bl	8000e5c <__aeabi_fmul>
 800ad8e:	4603      	mov	r3, r0
 800ad90:	4619      	mov	r1, r3
 800ad92:	4620      	mov	r0, r4
 800ad94:	f7f5 ff5a 	bl	8000c4c <__addsf3>
 800ad98:	4603      	mov	r3, r0
 800ad9a:	461c      	mov	r4, r3
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	68da      	ldr	r2, [r3, #12]
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ada4:	4619      	mov	r1, r3
 800ada6:	4610      	mov	r0, r2
 800ada8:	f7f6 f858 	bl	8000e5c <__aeabi_fmul>
 800adac:	4603      	mov	r3, r0
 800adae:	4619      	mov	r1, r3
 800adb0:	4620      	mov	r0, r4
 800adb2:	f7f5 ff4b 	bl	8000c4c <__addsf3>
 800adb6:	4603      	mov	r3, r0
 800adb8:	461a      	mov	r2, r3
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	62da      	str	r2, [r3, #44]	; 0x2c
  p_handle->computedValue = UTI_clampIntValue(p_handle->computedValue, p_handle->minValue, p_handle->maxValue, true, 0);
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adc2:	4618      	mov	r0, r3
 800adc4:	f7f6 f99a 	bl	80010fc <__aeabi_f2iz>
 800adc8:	4604      	mov	r4, r0
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	695b      	ldr	r3, [r3, #20]
 800adce:	4618      	mov	r0, r3
 800add0:	f7f6 f994 	bl	80010fc <__aeabi_f2iz>
 800add4:	4605      	mov	r5, r0
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	699b      	ldr	r3, [r3, #24]
 800adda:	4618      	mov	r0, r3
 800addc:	f7f6 f98e 	bl	80010fc <__aeabi_f2iz>
 800ade0:	4602      	mov	r2, r0
 800ade2:	2300      	movs	r3, #0
 800ade4:	9300      	str	r3, [sp, #0]
 800ade6:	2301      	movs	r3, #1
 800ade8:	4629      	mov	r1, r5
 800adea:	4620      	mov	r0, r4
 800adec:	f000 fab4 	bl	800b358 <UTI_clampIntValue>
 800adf0:	4603      	mov	r3, r0
 800adf2:	4618      	mov	r0, r3
 800adf4:	f7f5 ffde 	bl	8000db4 <__aeabi_i2f>
 800adf8:	4602      	mov	r2, r0
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	62da      	str	r2, [r3, #44]	; 0x2c

  return p_handle->computedValue;
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 800ae02:	4618      	mov	r0, r3
 800ae04:	3718      	adds	r7, #24
 800ae06:	46bd      	mov	sp, r7
 800ae08:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800ae0c <PID_logInfo>:

void PID_logInfo(T_PID_Handle *p_handle, bool p_compactLog)
{
 800ae0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae10:	b08f      	sub	sp, #60	; 0x3c
 800ae12:	af0a      	add	r7, sp, #40	; 0x28
 800ae14:	60f8      	str	r0, [r7, #12]
 800ae16:	460b      	mov	r3, r1
 800ae18:	72fb      	strb	r3, [r7, #11]
  if (p_compactLog == false)
 800ae1a:	7afb      	ldrb	r3, [r7, #11]
 800ae1c:	f083 0301 	eor.w	r3, r3, #1
 800ae20:	b2db      	uxtb	r3, r3
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d07a      	beq.n	800af1c <PID_logInfo+0x110>
  {
    LOG_info("% PID detailed data:", p_handle->name);
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	461a      	mov	r2, r3
 800ae2c:	4959      	ldr	r1, [pc, #356]	; (800af94 <PID_logInfo+0x188>)
 800ae2e:	2001      	movs	r0, #1
 800ae30:	f7ff fc98 	bl	800a764 <LOG_log>
    LOG_info(" kp = %6.2f -  ki = %6.2f -     kd = %6.2f", p_handle->kp         , p_handle->ki      , p_handle->kd             );
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	685b      	ldr	r3, [r3, #4]
 800ae38:	4618      	mov	r0, r3
 800ae3a:	f7f5 fb61 	bl	8000500 <__aeabi_f2d>
 800ae3e:	4680      	mov	r8, r0
 800ae40:	4689      	mov	r9, r1
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	689b      	ldr	r3, [r3, #8]
 800ae46:	4618      	mov	r0, r3
 800ae48:	f7f5 fb5a 	bl	8000500 <__aeabi_f2d>
 800ae4c:	4604      	mov	r4, r0
 800ae4e:	460d      	mov	r5, r1
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	68db      	ldr	r3, [r3, #12]
 800ae54:	4618      	mov	r0, r3
 800ae56:	f7f5 fb53 	bl	8000500 <__aeabi_f2d>
 800ae5a:	4602      	mov	r2, r0
 800ae5c:	460b      	mov	r3, r1
 800ae5e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ae62:	e9cd 4500 	strd	r4, r5, [sp]
 800ae66:	4642      	mov	r2, r8
 800ae68:	464b      	mov	r3, r9
 800ae6a:	494b      	ldr	r1, [pc, #300]	; (800af98 <PID_logInfo+0x18c>)
 800ae6c:	2001      	movs	r0, #1
 800ae6e:	f7ff fc79 	bl	800a764 <LOG_log>
    LOG_info("  p = %6.2f -   i = %6.2f -      d = %6.2f", p_handle->pValue     , p_handle->iValue  , p_handle->dValue         );
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	6a1b      	ldr	r3, [r3, #32]
 800ae76:	4618      	mov	r0, r3
 800ae78:	f7f5 fb42 	bl	8000500 <__aeabi_f2d>
 800ae7c:	4680      	mov	r8, r0
 800ae7e:	4689      	mov	r9, r1
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae84:	4618      	mov	r0, r3
 800ae86:	f7f5 fb3b 	bl	8000500 <__aeabi_f2d>
 800ae8a:	4604      	mov	r4, r0
 800ae8c:	460d      	mov	r5, r1
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae92:	4618      	mov	r0, r3
 800ae94:	f7f5 fb34 	bl	8000500 <__aeabi_f2d>
 800ae98:	4602      	mov	r2, r0
 800ae9a:	460b      	mov	r3, r1
 800ae9c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800aea0:	e9cd 4500 	strd	r4, r5, [sp]
 800aea4:	4642      	mov	r2, r8
 800aea6:	464b      	mov	r3, r9
 800aea8:	493c      	ldr	r1, [pc, #240]	; (800af9c <PID_logInfo+0x190>)
 800aeaa:	2001      	movs	r0, #1
 800aeac:	f7ff fc5a 	bl	800a764 <LOG_log>
    LOG_info("min = %6.2f - max = %6.2f - a.w.up = %6.2f", p_handle->minValue   , p_handle->maxValue, p_handle->antiWindUpValue);
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	695b      	ldr	r3, [r3, #20]
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	f7f5 fb23 	bl	8000500 <__aeabi_f2d>
 800aeba:	4680      	mov	r8, r0
 800aebc:	4689      	mov	r9, r1
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	699b      	ldr	r3, [r3, #24]
 800aec2:	4618      	mov	r0, r3
 800aec4:	f7f5 fb1c 	bl	8000500 <__aeabi_f2d>
 800aec8:	4604      	mov	r4, r0
 800aeca:	460d      	mov	r5, r1
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	69db      	ldr	r3, [r3, #28]
 800aed0:	4618      	mov	r0, r3
 800aed2:	f7f5 fb15 	bl	8000500 <__aeabi_f2d>
 800aed6:	4602      	mov	r2, r0
 800aed8:	460b      	mov	r3, r1
 800aeda:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800aede:	e9cd 4500 	strd	r4, r5, [sp]
 800aee2:	4642      	mov	r2, r8
 800aee4:	464b      	mov	r3, r9
 800aee6:	492e      	ldr	r1, [pc, #184]	; (800afa0 <PID_logInfo+0x194>)
 800aee8:	2001      	movs	r0, #1
 800aeea:	f7ff fc3b 	bl	800a764 <LOG_log>
    LOG_info("  t = %6.2f - val = %6.2f               "  , p_handle->targetValue, p_handle->computedValue                      );
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	691b      	ldr	r3, [r3, #16]
 800aef2:	4618      	mov	r0, r3
 800aef4:	f7f5 fb04 	bl	8000500 <__aeabi_f2d>
 800aef8:	4604      	mov	r4, r0
 800aefa:	460d      	mov	r5, r1
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af00:	4618      	mov	r0, r3
 800af02:	f7f5 fafd 	bl	8000500 <__aeabi_f2d>
 800af06:	4602      	mov	r2, r0
 800af08:	460b      	mov	r3, r1
 800af0a:	e9cd 2300 	strd	r2, r3, [sp]
 800af0e:	4622      	mov	r2, r4
 800af10:	462b      	mov	r3, r5
 800af12:	4924      	ldr	r1, [pc, #144]	; (800afa4 <PID_logInfo+0x198>)
 800af14:	2001      	movs	r0, #1
 800af16:	f7ff fc25 	bl	800a764 <LOG_log>
             p_handle->dValue,
             p_handle->targetValue,
             p_handle->computedValue);
  }

  return;
 800af1a:	e036      	b.n	800af8a <PID_logInfo+0x17e>
    LOG_info("%s PID: p = %6.2f - i = %6.2f - d = %6.2f - t = %6.2f - val = %6.2f",
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	681e      	ldr	r6, [r3, #0]
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	6a1b      	ldr	r3, [r3, #32]
 800af24:	4618      	mov	r0, r3
 800af26:	f7f5 faeb 	bl	8000500 <__aeabi_f2d>
 800af2a:	4604      	mov	r4, r0
 800af2c:	460d      	mov	r5, r1
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af32:	4618      	mov	r0, r3
 800af34:	f7f5 fae4 	bl	8000500 <__aeabi_f2d>
 800af38:	4680      	mov	r8, r0
 800af3a:	4689      	mov	r9, r1
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af40:	4618      	mov	r0, r3
 800af42:	f7f5 fadd 	bl	8000500 <__aeabi_f2d>
 800af46:	4682      	mov	sl, r0
 800af48:	468b      	mov	fp, r1
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	691b      	ldr	r3, [r3, #16]
 800af4e:	4618      	mov	r0, r3
 800af50:	f7f5 fad6 	bl	8000500 <__aeabi_f2d>
 800af54:	e9c7 0100 	strd	r0, r1, [r7]
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af5c:	4618      	mov	r0, r3
 800af5e:	f7f5 facf 	bl	8000500 <__aeabi_f2d>
 800af62:	4602      	mov	r2, r0
 800af64:	460b      	mov	r3, r1
 800af66:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800af6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af6e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800af72:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800af76:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800af7a:	e9cd 4500 	strd	r4, r5, [sp]
 800af7e:	4632      	mov	r2, r6
 800af80:	4909      	ldr	r1, [pc, #36]	; (800afa8 <PID_logInfo+0x19c>)
 800af82:	2001      	movs	r0, #1
 800af84:	f7ff fbee 	bl	800a764 <LOG_log>
  return;
 800af88:	bf00      	nop
}
 800af8a:	3714      	adds	r7, #20
 800af8c:	46bd      	mov	sp, r7
 800af8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af92:	bf00      	nop
 800af94:	08010c20 	.word	0x08010c20
 800af98:	08010c38 	.word	0x08010c38
 800af9c:	08010c64 	.word	0x08010c64
 800afa0:	08010c90 	.word	0x08010c90
 800afa4:	08010cbc 	.word	0x08010cbc
 800afa8:	08010ce8 	.word	0x08010ce8

0800afac <SFO_initData>:
#include "string_fifo.h"

#include "log.h"

void SFO_initData(T_SFO_data *p_data)
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b082      	sub	sp, #8
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
  (void)memset(p_data, 0, CST_STRING_FIFO_MAX_STRING_LENGTH);
 800afb4:	2210      	movs	r2, #16
 800afb6:	2100      	movs	r1, #0
 800afb8:	6878      	ldr	r0, [r7, #4]
 800afba:	f000 fc43 	bl	800b844 <memset>

  return;
 800afbe:	bf00      	nop
}
 800afc0:	3708      	adds	r7, #8
 800afc2:	46bd      	mov	sp, r7
 800afc4:	bd80      	pop	{r7, pc}
	...

0800afc8 <SFO_init>:

void SFO_init(T_SFO_Handle *p_fifo)
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	b082      	sub	sp, #8
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
  LOG_debug("String FIFO now empty");
 800afd0:	4908      	ldr	r1, [pc, #32]	; (800aff4 <SFO_init+0x2c>)
 800afd2:	2000      	movs	r0, #0
 800afd4:	f7ff fbc6 	bl	800a764 <LOG_log>

  p_fifo->head  = NULL;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	2200      	movs	r2, #0
 800afdc:	601a      	str	r2, [r3, #0]
  p_fifo->tail  = NULL;
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	2200      	movs	r2, #0
 800afe2:	605a      	str	r2, [r3, #4]
  p_fifo->count = 0;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	2200      	movs	r2, #0
 800afe8:	609a      	str	r2, [r3, #8]

  return;
 800afea:	bf00      	nop
}
 800afec:	3708      	adds	r7, #8
 800afee:	46bd      	mov	sp, r7
 800aff0:	bd80      	pop	{r7, pc}
 800aff2:	bf00      	nop
 800aff4:	08010d2c 	.word	0x08010d2c

0800aff8 <SFO_push>:

void SFO_push(T_SFO_Handle *p_fifo, T_SFO_data *p_dataIn)
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b084      	sub	sp, #16
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
 800b000:	6039      	str	r1, [r7, #0]
  T_SFO_Element *l_element;

  if (p_fifo->count == CST_STRING_FIFO_MAX_ELEMENTS)
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	689b      	ldr	r3, [r3, #8]
 800b006:	2b0a      	cmp	r3, #10
 800b008:	d105      	bne.n	800b016 <SFO_push+0x1e>
  {
    LOG_error("SFO_push() failure - String FIFO is full (%u elements)", CST_STRING_FIFO_MAX_ELEMENTS);
 800b00a:	220a      	movs	r2, #10
 800b00c:	4917      	ldr	r1, [pc, #92]	; (800b06c <SFO_push+0x74>)
 800b00e:	2003      	movs	r0, #3
 800b010:	f7ff fba8 	bl	800a764 <LOG_log>

      p_fifo->count++;
    }
  }

  return;
 800b014:	e027      	b.n	800b066 <SFO_push+0x6e>
    l_element = (T_SFO_Element *)malloc(sizeof(T_SFO_Element));
 800b016:	2014      	movs	r0, #20
 800b018:	f000 fc04 	bl	800b824 <malloc>
 800b01c:	4603      	mov	r3, r0
 800b01e:	60fb      	str	r3, [r7, #12]
    if (l_element == NULL)
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d104      	bne.n	800b030 <SFO_push+0x38>
      LOG_error("SFO_push() failure - Could not allocate new memory");
 800b026:	4912      	ldr	r1, [pc, #72]	; (800b070 <SFO_push+0x78>)
 800b028:	2003      	movs	r0, #3
 800b02a:	f7ff fb9b 	bl	800a764 <LOG_log>
  return;
 800b02e:	e01a      	b.n	800b066 <SFO_push+0x6e>
      (void)strncpy(l_element->data, *p_dataIn, CST_STRING_FIFO_MAX_STRING_LENGTH);
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	2210      	movs	r2, #16
 800b034:	6839      	ldr	r1, [r7, #0]
 800b036:	4618      	mov	r0, r3
 800b038:	f001 f98e 	bl	800c358 <strncpy>
      l_element->nextElement = p_fifo->head;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681a      	ldr	r2, [r3, #0]
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	611a      	str	r2, [r3, #16]
      p_fifo->head           = l_element;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	68fa      	ldr	r2, [r7, #12]
 800b048:	601a      	str	r2, [r3, #0]
      if (p_fifo->tail == NULL)
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	685b      	ldr	r3, [r3, #4]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d103      	bne.n	800b05a <SFO_push+0x62>
        p_fifo->tail = p_fifo->head;
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681a      	ldr	r2, [r3, #0]
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	605a      	str	r2, [r3, #4]
      p_fifo->count++;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	689b      	ldr	r3, [r3, #8]
 800b05e:	1c5a      	adds	r2, r3, #1
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	609a      	str	r2, [r3, #8]
  return;
 800b064:	bf00      	nop
}
 800b066:	3710      	adds	r7, #16
 800b068:	46bd      	mov	sp, r7
 800b06a:	bd80      	pop	{r7, pc}
 800b06c:	08010d44 	.word	0x08010d44
 800b070:	08010d7c 	.word	0x08010d7c

0800b074 <SFO_pop>:

void SFO_pop(T_SFO_Handle *p_fifo, T_SFO_data *p_dataOut)
{
 800b074:	b580      	push	{r7, lr}
 800b076:	b084      	sub	sp, #16
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
 800b07c:	6039      	str	r1, [r7, #0]
  T_SFO_Element *l_element;

  if (p_fifo->count == 0)
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	689b      	ldr	r3, [r3, #8]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d104      	bne.n	800b090 <SFO_pop+0x1c>
  {
    LOG_error("SFO_pop() failure - String FIFO is empty");
 800b086:	491a      	ldr	r1, [pc, #104]	; (800b0f0 <SFO_pop+0x7c>)
 800b088:	2003      	movs	r0, #3
 800b08a:	f7ff fb6b 	bl	800a764 <LOG_log>
    {
      SFO_init(p_fifo);
    }
  }

  return;
 800b08e:	e02c      	b.n	800b0ea <SFO_pop+0x76>
    (void)strncpy(*p_dataOut, p_fifo->tail->data, CST_STRING_FIFO_MAX_STRING_LENGTH);
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	685b      	ldr	r3, [r3, #4]
 800b094:	2210      	movs	r2, #16
 800b096:	4619      	mov	r1, r3
 800b098:	6838      	ldr	r0, [r7, #0]
 800b09a:	f001 f95d 	bl	800c358 <strncpy>
    free(p_fifo->tail);
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	685b      	ldr	r3, [r3, #4]
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	f000 fbc6 	bl	800b834 <free>
    if (p_fifo->count > 1)
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	689b      	ldr	r3, [r3, #8]
 800b0ac:	2b01      	cmp	r3, #1
 800b0ae:	d918      	bls.n	800b0e2 <SFO_pop+0x6e>
      l_element = p_fifo->head;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	60fb      	str	r3, [r7, #12]
      while (l_element->nextElement != p_fifo->tail)
 800b0b6:	e002      	b.n	800b0be <SFO_pop+0x4a>
        l_element = l_element->nextElement;
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	691b      	ldr	r3, [r3, #16]
 800b0bc:	60fb      	str	r3, [r7, #12]
      while (l_element->nextElement != p_fifo->tail)
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	691a      	ldr	r2, [r3, #16]
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	685b      	ldr	r3, [r3, #4]
 800b0c6:	429a      	cmp	r2, r3
 800b0c8:	d1f6      	bne.n	800b0b8 <SFO_pop+0x44>
      l_element->nextElement = NULL;
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	611a      	str	r2, [r3, #16]
      p_fifo->tail           = l_element;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	68fa      	ldr	r2, [r7, #12]
 800b0d4:	605a      	str	r2, [r3, #4]
      p_fifo->count--;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	689b      	ldr	r3, [r3, #8]
 800b0da:	1e5a      	subs	r2, r3, #1
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	609a      	str	r2, [r3, #8]
  return;
 800b0e0:	e003      	b.n	800b0ea <SFO_pop+0x76>
      SFO_init(p_fifo);
 800b0e2:	6878      	ldr	r0, [r7, #4]
 800b0e4:	f7ff ff70 	bl	800afc8 <SFO_init>
  return;
 800b0e8:	bf00      	nop
}
 800b0ea:	3710      	adds	r7, #16
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	bd80      	pop	{r7, pc}
 800b0f0:	08010db0 	.word	0x08010db0

0800b0f4 <SFO_getCount>:

uint32_t SFO_getCount(T_SFO_Handle *p_fifo)
{
 800b0f4:	b480      	push	{r7}
 800b0f6:	b083      	sub	sp, #12
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
  return p_fifo->count;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	689b      	ldr	r3, [r3, #8]
}
 800b100:	4618      	mov	r0, r3
 800b102:	370c      	adds	r7, #12
 800b104:	46bd      	mov	sp, r7
 800b106:	bc80      	pop	{r7}
 800b108:	4770      	bx	lr
	...

0800b10c <SFO_logInfo>:

void SFO_logInfo(T_SFO_Handle *p_fifo)
{
 800b10c:	b580      	push	{r7, lr}
 800b10e:	b084      	sub	sp, #16
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
  T_SFO_Element *l_element;

  if (p_fifo->count == 0)
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	689b      	ldr	r3, [r3, #8]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d104      	bne.n	800b126 <SFO_logInfo+0x1a>
  {
    LOG_info("String FIFO is empty");
 800b11c:	4924      	ldr	r1, [pc, #144]	; (800b1b0 <SFO_logInfo+0xa4>)
 800b11e:	2001      	movs	r0, #1
 800b120:	f7ff fb20 	bl	800a764 <LOG_log>

      l_element = l_element->nextElement;
    }
  }

  return;
 800b124:	e040      	b.n	800b1a8 <SFO_logInfo+0x9c>
    LOG_info("String FIFO: %u element(s)", p_fifo->count);
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	689b      	ldr	r3, [r3, #8]
 800b12a:	461a      	mov	r2, r3
 800b12c:	4921      	ldr	r1, [pc, #132]	; (800b1b4 <SFO_logInfo+0xa8>)
 800b12e:	2001      	movs	r0, #1
 800b130:	f7ff fb18 	bl	800a764 <LOG_log>
    l_element = p_fifo->head;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	60fb      	str	r3, [r7, #12]
    while (l_element != NULL)
 800b13a:	e031      	b.n	800b1a0 <SFO_logInfo+0x94>
      if ((l_element == p_fifo->head) && (l_element == p_fifo->tail))
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	68fa      	ldr	r2, [r7, #12]
 800b142:	429a      	cmp	r2, r3
 800b144:	d10b      	bne.n	800b15e <SFO_logInfo+0x52>
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	685b      	ldr	r3, [r3, #4]
 800b14a:	68fa      	ldr	r2, [r7, #12]
 800b14c:	429a      	cmp	r2, r3
 800b14e:	d106      	bne.n	800b15e <SFO_logInfo+0x52>
        LOG_info("HEAD -> '%s' <- TAIL", l_element->data);
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	461a      	mov	r2, r3
 800b154:	4918      	ldr	r1, [pc, #96]	; (800b1b8 <SFO_logInfo+0xac>)
 800b156:	2001      	movs	r0, #1
 800b158:	f7ff fb04 	bl	800a764 <LOG_log>
 800b15c:	e01d      	b.n	800b19a <SFO_logInfo+0x8e>
      else if (l_element == p_fifo->head)
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	68fa      	ldr	r2, [r7, #12]
 800b164:	429a      	cmp	r2, r3
 800b166:	d106      	bne.n	800b176 <SFO_logInfo+0x6a>
        LOG_info("HEAD -> '%s'", l_element->data);
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	461a      	mov	r2, r3
 800b16c:	4913      	ldr	r1, [pc, #76]	; (800b1bc <SFO_logInfo+0xb0>)
 800b16e:	2001      	movs	r0, #1
 800b170:	f7ff faf8 	bl	800a764 <LOG_log>
 800b174:	e011      	b.n	800b19a <SFO_logInfo+0x8e>
      else if (l_element == p_fifo->tail)
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	685b      	ldr	r3, [r3, #4]
 800b17a:	68fa      	ldr	r2, [r7, #12]
 800b17c:	429a      	cmp	r2, r3
 800b17e:	d106      	bne.n	800b18e <SFO_logInfo+0x82>
        LOG_info("TAIL -> '%s'", l_element->data);
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	461a      	mov	r2, r3
 800b184:	490e      	ldr	r1, [pc, #56]	; (800b1c0 <SFO_logInfo+0xb4>)
 800b186:	2001      	movs	r0, #1
 800b188:	f7ff faec 	bl	800a764 <LOG_log>
 800b18c:	e005      	b.n	800b19a <SFO_logInfo+0x8e>
        LOG_info("        '%s'", l_element->data);
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	461a      	mov	r2, r3
 800b192:	490c      	ldr	r1, [pc, #48]	; (800b1c4 <SFO_logInfo+0xb8>)
 800b194:	2001      	movs	r0, #1
 800b196:	f7ff fae5 	bl	800a764 <LOG_log>
      l_element = l_element->nextElement;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	691b      	ldr	r3, [r3, #16]
 800b19e:	60fb      	str	r3, [r7, #12]
    while (l_element != NULL)
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d1ca      	bne.n	800b13c <SFO_logInfo+0x30>
  return;
 800b1a6:	bf00      	nop
}
 800b1a8:	3710      	adds	r7, #16
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	bd80      	pop	{r7, pc}
 800b1ae:	bf00      	nop
 800b1b0:	08010ddc 	.word	0x08010ddc
 800b1b4:	08010df4 	.word	0x08010df4
 800b1b8:	08010e10 	.word	0x08010e10
 800b1bc:	08010e28 	.word	0x08010e28
 800b1c0:	08010e38 	.word	0x08010e38
 800b1c4:	08010e48 	.word	0x08010e48

0800b1c8 <UTI_init>:
static uint32_t UTI_turnRtcTimeToSeconds(RTC_TimeTypeDef *p_time);

void UTI_init(TIM_HandleTypeDef *p_usDelayHandle,
              TIM_HandleTypeDef *p_usTimerHandle,
              RTC_HandleTypeDef *p_sTimerHandle)
{
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	b086      	sub	sp, #24
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	60f8      	str	r0, [r7, #12]
 800b1d0:	60b9      	str	r1, [r7, #8]
 800b1d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef l_halReturnCode;

  LOG_info("Initializing utilities");
 800b1d4:	491b      	ldr	r1, [pc, #108]	; (800b244 <UTI_init+0x7c>)
 800b1d6:	2001      	movs	r0, #1
 800b1d8:	f7ff fac4 	bl	800a764 <LOG_log>

  g_UTI_context.usDelayHandle = p_usDelayHandle;
 800b1dc:	4a1a      	ldr	r2, [pc, #104]	; (800b248 <UTI_init+0x80>)
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	6013      	str	r3, [r2, #0]
  g_UTI_context.usTimerHandle = p_usTimerHandle;
 800b1e2:	4a19      	ldr	r2, [pc, #100]	; (800b248 <UTI_init+0x80>)
 800b1e4:	68bb      	ldr	r3, [r7, #8]
 800b1e6:	6053      	str	r3, [r2, #4]
  g_UTI_context.sTimerHandle  = p_sTimerHandle ;
 800b1e8:	4a17      	ldr	r2, [pc, #92]	; (800b248 <UTI_init+0x80>)
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	6093      	str	r3, [r2, #8]

  l_halReturnCode = HAL_TIM_Base_Start(p_usDelayHandle);
 800b1ee:	68f8      	ldr	r0, [r7, #12]
 800b1f0:	f7fa fe0e 	bl	8005e10 <HAL_TIM_Base_Start>
 800b1f4:	4603      	mov	r3, r0
 800b1f6:	75fb      	strb	r3, [r7, #23]

  if (l_halReturnCode != HAL_OK)
 800b1f8:	7dfb      	ldrb	r3, [r7, #23]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d006      	beq.n	800b20c <UTI_init+0x44>
  {
    LOG_error("HAL_TIM_Base_Start() returned an error code: %d", l_halReturnCode);
 800b1fe:	7dfb      	ldrb	r3, [r7, #23]
 800b200:	461a      	mov	r2, r3
 800b202:	4912      	ldr	r1, [pc, #72]	; (800b24c <UTI_init+0x84>)
 800b204:	2003      	movs	r0, #3
 800b206:	f7ff faad 	bl	800a764 <LOG_log>
 800b20a:	e003      	b.n	800b214 <UTI_init+0x4c>
  }
  else
  {
    LOG_info("Micro-second delay timer started)");
 800b20c:	4910      	ldr	r1, [pc, #64]	; (800b250 <UTI_init+0x88>)
 800b20e:	2001      	movs	r0, #1
 800b210:	f7ff faa8 	bl	800a764 <LOG_log>
  }

  l_halReturnCode = HAL_TIM_Base_Start_IT(p_usTimerHandle);
 800b214:	68b8      	ldr	r0, [r7, #8]
 800b216:	f7fa fe85 	bl	8005f24 <HAL_TIM_Base_Start_IT>
 800b21a:	4603      	mov	r3, r0
 800b21c:	75fb      	strb	r3, [r7, #23]

  if (l_halReturnCode != HAL_OK)
 800b21e:	7dfb      	ldrb	r3, [r7, #23]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d006      	beq.n	800b232 <UTI_init+0x6a>
  {
    LOG_error("HAL_TIM_Base_Start_IT() returned an error code: %d", l_halReturnCode);
 800b224:	7dfb      	ldrb	r3, [r7, #23]
 800b226:	461a      	mov	r2, r3
 800b228:	490a      	ldr	r1, [pc, #40]	; (800b254 <UTI_init+0x8c>)
 800b22a:	2003      	movs	r0, #3
 800b22c:	f7ff fa9a 	bl	800a764 <LOG_log>
  else
  {
    LOG_info("Micro-second time measurment timer started)");
  }

  return;
 800b230:	e004      	b.n	800b23c <UTI_init+0x74>
    LOG_info("Micro-second time measurment timer started)");
 800b232:	4909      	ldr	r1, [pc, #36]	; (800b258 <UTI_init+0x90>)
 800b234:	2001      	movs	r0, #1
 800b236:	f7ff fa95 	bl	800a764 <LOG_log>
  return;
 800b23a:	bf00      	nop
}
 800b23c:	3718      	adds	r7, #24
 800b23e:	46bd      	mov	sp, r7
 800b240:	bd80      	pop	{r7, pc}
 800b242:	bf00      	nop
 800b244:	08010e58 	.word	0x08010e58
 800b248:	20000540 	.word	0x20000540
 800b24c:	08010e70 	.word	0x08010e70
 800b250:	08010ea0 	.word	0x08010ea0
 800b254:	08010ec4 	.word	0x08010ec4
 800b258:	08010ef8 	.word	0x08010ef8

0800b25c <UTI_delayUs>:

void UTI_delayUs(uint16_t p_delay)
{
 800b25c:	b480      	push	{r7}
 800b25e:	b083      	sub	sp, #12
 800b260:	af00      	add	r7, sp, #0
 800b262:	4603      	mov	r3, r0
 800b264:	80fb      	strh	r3, [r7, #6]
  /* Reset the micro-seconds counter */
  __HAL_TIM_SET_COUNTER(g_UTI_context.usDelayHandle, 0);
 800b266:	4b09      	ldr	r3, [pc, #36]	; (800b28c <UTI_delayUs+0x30>)
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	2200      	movs	r2, #0
 800b26e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Wait for the counter to reach the input micro-seconds number */
  while (__HAL_TIM_GET_COUNTER(g_UTI_context.usDelayHandle) < p_delay)
 800b270:	bf00      	nop
 800b272:	4b06      	ldr	r3, [pc, #24]	; (800b28c <UTI_delayUs+0x30>)
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b27a:	88fb      	ldrh	r3, [r7, #6]
 800b27c:	429a      	cmp	r2, r3
 800b27e:	d3f8      	bcc.n	800b272 <UTI_delayUs+0x16>
  {
    ; /* Nothing to do */
  }

  return;
 800b280:	bf00      	nop
}
 800b282:	370c      	adds	r7, #12
 800b284:	46bd      	mov	sp, r7
 800b286:	bc80      	pop	{r7}
 800b288:	4770      	bx	lr
 800b28a:	bf00      	nop
 800b28c:	20000540 	.word	0x20000540

0800b290 <UTI_delayMs>:

void UTI_delayMs(uint32_t p_delay)
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b082      	sub	sp, #8
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
  HAL_Delay(p_delay);
 800b298:	6878      	ldr	r0, [r7, #4]
 800b29a:	f7f7 fcaf 	bl	8002bfc <HAL_Delay>

  return;
 800b29e:	bf00      	nop
}
 800b2a0:	3708      	adds	r7, #8
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	bd80      	pop	{r7, pc}
	...

0800b2a8 <UTI_getTimeUs>:

uint32_t UTI_getTimeUs(void)
{
 800b2a8:	b480      	push	{r7}
 800b2aa:	b083      	sub	sp, #12
 800b2ac:	af00      	add	r7, sp, #0
  uint32_t l_currentTimeInUs;

  l_currentTimeInUs = __HAL_TIM_GET_COUNTER(g_UTI_context.usTimerHandle);
 800b2ae:	4b05      	ldr	r3, [pc, #20]	; (800b2c4 <UTI_getTimeUs+0x1c>)
 800b2b0:	685b      	ldr	r3, [r3, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2b6:	607b      	str	r3, [r7, #4]

  return l_currentTimeInUs;
 800b2b8:	687b      	ldr	r3, [r7, #4]
}
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	370c      	adds	r7, #12
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	bc80      	pop	{r7}
 800b2c2:	4770      	bx	lr
 800b2c4:	20000540 	.word	0x20000540

0800b2c8 <UTI_getTimeS>:

uint32_t UTI_getTimeS(void)
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b082      	sub	sp, #8
 800b2cc:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef l_rtcTime;
  uint32_t        l_currentTimeInS;

  UTI_getTimeRtc(&l_rtcTime);
 800b2ce:	463b      	mov	r3, r7
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	f000 f80b 	bl	800b2ec <UTI_getTimeRtc>

  l_currentTimeInS = UTI_turnRtcTimeToSeconds(&l_rtcTime);
 800b2d6:	463b      	mov	r3, r7
 800b2d8:	4618      	mov	r0, r3
 800b2da:	f000 f8c7 	bl	800b46c <UTI_turnRtcTimeToSeconds>
 800b2de:	6078      	str	r0, [r7, #4]

  return l_currentTimeInS;
 800b2e0:	687b      	ldr	r3, [r7, #4]
}
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	3708      	adds	r7, #8
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	bd80      	pop	{r7, pc}
	...

0800b2ec <UTI_getTimeRtc>:

void UTI_getTimeRtc(RTC_TimeTypeDef *p_time)
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b084      	sub	sp, #16
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef l_halReturnCode;
  RTC_TimeTypeDef   l_rtcTime;
  RTC_DateTypeDef   l_rtcDate;

  l_halReturnCode = HAL_RTC_GetTime(g_UTI_context.sTimerHandle, &l_rtcTime, RTC_FORMAT_BCD);
 800b2f4:	4b17      	ldr	r3, [pc, #92]	; (800b354 <UTI_getTimeRtc+0x68>)
 800b2f6:	689b      	ldr	r3, [r3, #8]
 800b2f8:	f107 010c 	add.w	r1, r7, #12
 800b2fc:	2201      	movs	r2, #1
 800b2fe:	4618      	mov	r0, r3
 800b300:	f7f9 ffac 	bl	800525c <HAL_RTC_GetTime>
 800b304:	4603      	mov	r3, r0
 800b306:	73fb      	strb	r3, [r7, #15]

  if (l_halReturnCode != HAL_OK)
 800b308:	7bfb      	ldrb	r3, [r7, #15]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d004      	beq.n	800b318 <UTI_getTimeRtc+0x2c>
  {
    /* As this method can be called by logging/debug, just reset time in case of failure */
    UTI_resetRtcTime(&l_rtcTime);
 800b30e:	f107 030c 	add.w	r3, r7, #12
 800b312:	4618      	mov	r0, r3
 800b314:	f000 f898 	bl	800b448 <UTI_resetRtcTime>
  else
  {
    ; /* Nothing to to */
  }

  l_halReturnCode = HAL_RTC_GetDate(g_UTI_context.sTimerHandle, &l_rtcDate, RTC_FORMAT_BCD);
 800b318:	4b0e      	ldr	r3, [pc, #56]	; (800b354 <UTI_getTimeRtc+0x68>)
 800b31a:	689b      	ldr	r3, [r3, #8]
 800b31c:	f107 0108 	add.w	r1, r7, #8
 800b320:	2201      	movs	r2, #1
 800b322:	4618      	mov	r0, r3
 800b324:	f7fa f99e 	bl	8005664 <HAL_RTC_GetDate>
 800b328:	4603      	mov	r3, r0
 800b32a:	73fb      	strb	r3, [r7, #15]

  if (l_halReturnCode != HAL_OK)
 800b32c:	7bfb      	ldrb	r3, [r7, #15]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d004      	beq.n	800b33c <UTI_getTimeRtc+0x50>
  {
    /* As this method can be called by logging/debug, just reset time in case of failure */
    UTI_resetRtcTime(&l_rtcTime);
 800b332:	f107 030c 	add.w	r3, r7, #12
 800b336:	4618      	mov	r0, r3
 800b338:	f000 f886 	bl	800b448 <UTI_resetRtcTime>
  else
  {
    ; /* Nothing to to */
  }

  *p_time = l_rtcTime;
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	461a      	mov	r2, r3
 800b340:	f107 030c 	add.w	r3, r7, #12
 800b344:	8819      	ldrh	r1, [r3, #0]
 800b346:	789b      	ldrb	r3, [r3, #2]
 800b348:	8011      	strh	r1, [r2, #0]
 800b34a:	7093      	strb	r3, [r2, #2]

  return;
 800b34c:	bf00      	nop
}
 800b34e:	3710      	adds	r7, #16
 800b350:	46bd      	mov	sp, r7
 800b352:	bd80      	pop	{r7, pc}
 800b354:	20000540 	.word	0x20000540

0800b358 <UTI_clampIntValue>:

int32_t UTI_clampIntValue(int32_t p_value, int32_t p_minValue, int32_t p_maxValue, bool p_clampToNearest, int32_t p_clampValue)
{
 800b358:	b480      	push	{r7}
 800b35a:	b087      	sub	sp, #28
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	60f8      	str	r0, [r7, #12]
 800b360:	60b9      	str	r1, [r7, #8]
 800b362:	607a      	str	r2, [r7, #4]
 800b364:	70fb      	strb	r3, [r7, #3]
  int32_t l_returnValue;

  if (p_value < p_minValue)
 800b366:	68fa      	ldr	r2, [r7, #12]
 800b368:	68bb      	ldr	r3, [r7, #8]
 800b36a:	429a      	cmp	r2, r3
 800b36c:	da08      	bge.n	800b380 <UTI_clampIntValue+0x28>
  {
    if (p_clampToNearest == true)
 800b36e:	78fb      	ldrb	r3, [r7, #3]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d002      	beq.n	800b37a <UTI_clampIntValue+0x22>
    {
      l_returnValue = p_minValue;
 800b374:	68bb      	ldr	r3, [r7, #8]
 800b376:	617b      	str	r3, [r7, #20]
 800b378:	e011      	b.n	800b39e <UTI_clampIntValue+0x46>
    }
    else
    {
      l_returnValue = p_clampValue;
 800b37a:	6a3b      	ldr	r3, [r7, #32]
 800b37c:	617b      	str	r3, [r7, #20]
 800b37e:	e00e      	b.n	800b39e <UTI_clampIntValue+0x46>
    }
  }
  else if (p_value > p_maxValue)
 800b380:	68fa      	ldr	r2, [r7, #12]
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	429a      	cmp	r2, r3
 800b386:	dd08      	ble.n	800b39a <UTI_clampIntValue+0x42>
  {
    if (p_clampToNearest == true)
 800b388:	78fb      	ldrb	r3, [r7, #3]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d002      	beq.n	800b394 <UTI_clampIntValue+0x3c>
    {
      l_returnValue = p_maxValue;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	617b      	str	r3, [r7, #20]
 800b392:	e004      	b.n	800b39e <UTI_clampIntValue+0x46>
    }
    else
    {
      l_returnValue = p_clampValue;
 800b394:	6a3b      	ldr	r3, [r7, #32]
 800b396:	617b      	str	r3, [r7, #20]
 800b398:	e001      	b.n	800b39e <UTI_clampIntValue+0x46>
    }
  }
  else
  {
    l_returnValue = p_value;
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	617b      	str	r3, [r7, #20]
  }

  return l_returnValue;
 800b39e:	697b      	ldr	r3, [r7, #20]
}
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	371c      	adds	r7, #28
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	bc80      	pop	{r7}
 800b3a8:	4770      	bx	lr

0800b3aa <UTI_normalizeIntValue>:

  return l_returnValue;
}

int32_t UTI_normalizeIntValue(int32_t p_value, int32_t p_inMinValue, int32_t p_inMaxValue, int32_t p_outMinValue, int32_t p_outMaxValue, bool p_isInversionNeeded)
{
 800b3aa:	b5b0      	push	{r4, r5, r7, lr}
 800b3ac:	b086      	sub	sp, #24
 800b3ae:	af00      	add	r7, sp, #0
 800b3b0:	60f8      	str	r0, [r7, #12]
 800b3b2:	60b9      	str	r1, [r7, #8]
 800b3b4:	607a      	str	r2, [r7, #4]
 800b3b6:	603b      	str	r3, [r7, #0]
  float l_returnValue;
  float l_ratio;

  l_ratio       = ((float)p_outMaxValue - (float)p_outMinValue) / ((float)p_inMaxValue - (float)p_inMinValue);
 800b3b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b3ba:	f7f5 fcfb 	bl	8000db4 <__aeabi_i2f>
 800b3be:	4604      	mov	r4, r0
 800b3c0:	6838      	ldr	r0, [r7, #0]
 800b3c2:	f7f5 fcf7 	bl	8000db4 <__aeabi_i2f>
 800b3c6:	4603      	mov	r3, r0
 800b3c8:	4619      	mov	r1, r3
 800b3ca:	4620      	mov	r0, r4
 800b3cc:	f7f5 fc3c 	bl	8000c48 <__aeabi_fsub>
 800b3d0:	4603      	mov	r3, r0
 800b3d2:	461d      	mov	r5, r3
 800b3d4:	6878      	ldr	r0, [r7, #4]
 800b3d6:	f7f5 fced 	bl	8000db4 <__aeabi_i2f>
 800b3da:	4604      	mov	r4, r0
 800b3dc:	68b8      	ldr	r0, [r7, #8]
 800b3de:	f7f5 fce9 	bl	8000db4 <__aeabi_i2f>
 800b3e2:	4603      	mov	r3, r0
 800b3e4:	4619      	mov	r1, r3
 800b3e6:	4620      	mov	r0, r4
 800b3e8:	f7f5 fc2e 	bl	8000c48 <__aeabi_fsub>
 800b3ec:	4603      	mov	r3, r0
 800b3ee:	4619      	mov	r1, r3
 800b3f0:	4628      	mov	r0, r5
 800b3f2:	f7f5 fde7 	bl	8000fc4 <__aeabi_fdiv>
 800b3f6:	4603      	mov	r3, r0
 800b3f8:	613b      	str	r3, [r7, #16]
  l_returnValue =  (float)(p_value - p_inMinValue) * l_ratio + p_outMinValue;
 800b3fa:	68fa      	ldr	r2, [r7, #12]
 800b3fc:	68bb      	ldr	r3, [r7, #8]
 800b3fe:	1ad3      	subs	r3, r2, r3
 800b400:	4618      	mov	r0, r3
 800b402:	f7f5 fcd7 	bl	8000db4 <__aeabi_i2f>
 800b406:	4603      	mov	r3, r0
 800b408:	6939      	ldr	r1, [r7, #16]
 800b40a:	4618      	mov	r0, r3
 800b40c:	f7f5 fd26 	bl	8000e5c <__aeabi_fmul>
 800b410:	4603      	mov	r3, r0
 800b412:	461c      	mov	r4, r3
 800b414:	6838      	ldr	r0, [r7, #0]
 800b416:	f7f5 fccd 	bl	8000db4 <__aeabi_i2f>
 800b41a:	4603      	mov	r3, r0
 800b41c:	4619      	mov	r1, r3
 800b41e:	4620      	mov	r0, r4
 800b420:	f7f5 fc14 	bl	8000c4c <__addsf3>
 800b424:	4603      	mov	r3, r0
 800b426:	617b      	str	r3, [r7, #20]

  if (p_isInversionNeeded == true)
 800b428:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d003      	beq.n	800b438 <UTI_normalizeIntValue+0x8e>
  {
    l_returnValue *= -1.0f;
 800b430:	697b      	ldr	r3, [r7, #20]
 800b432:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800b436:	617b      	str	r3, [r7, #20]
  else
  {
    ; /* Nothing to do */
  }

  return (int32_t)l_returnValue;
 800b438:	6978      	ldr	r0, [r7, #20]
 800b43a:	f7f5 fe5f 	bl	80010fc <__aeabi_f2iz>
 800b43e:	4603      	mov	r3, r0
}
 800b440:	4618      	mov	r0, r3
 800b442:	3718      	adds	r7, #24
 800b444:	46bd      	mov	sp, r7
 800b446:	bdb0      	pop	{r4, r5, r7, pc}

0800b448 <UTI_resetRtcTime>:

static void UTI_resetRtcTime(RTC_TimeTypeDef *p_time)
{
 800b448:	b480      	push	{r7}
 800b44a:	b083      	sub	sp, #12
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
  p_time->Hours   = 0;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2200      	movs	r2, #0
 800b454:	701a      	strb	r2, [r3, #0]
  p_time->Minutes = 0;
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	2200      	movs	r2, #0
 800b45a:	705a      	strb	r2, [r3, #1]
  p_time->Seconds = 0;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	2200      	movs	r2, #0
 800b460:	709a      	strb	r2, [r3, #2]

  return;
 800b462:	bf00      	nop
}
 800b464:	370c      	adds	r7, #12
 800b466:	46bd      	mov	sp, r7
 800b468:	bc80      	pop	{r7}
 800b46a:	4770      	bx	lr

0800b46c <UTI_turnRtcTimeToSeconds>:

static uint32_t UTI_turnRtcTimeToSeconds(RTC_TimeTypeDef *p_time)
{
 800b46c:	b480      	push	{r7}
 800b46e:	b083      	sub	sp, #12
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
  return p_time->Hours * 3600 + p_time->Minutes * 60 + p_time->Seconds;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	781b      	ldrb	r3, [r3, #0]
 800b478:	461a      	mov	r2, r3
 800b47a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800b47e:	fb03 f202 	mul.w	r2, r3, r2
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	785b      	ldrb	r3, [r3, #1]
 800b486:	4619      	mov	r1, r3
 800b488:	460b      	mov	r3, r1
 800b48a:	011b      	lsls	r3, r3, #4
 800b48c:	1a5b      	subs	r3, r3, r1
 800b48e:	009b      	lsls	r3, r3, #2
 800b490:	4413      	add	r3, r2
 800b492:	687a      	ldr	r2, [r7, #4]
 800b494:	7892      	ldrb	r2, [r2, #2]
 800b496:	4413      	add	r3, r2
}
 800b498:	4618      	mov	r0, r3
 800b49a:	370c      	adds	r7, #12
 800b49c:	46bd      	mov	sp, r7
 800b49e:	bc80      	pop	{r7}
 800b4a0:	4770      	bx	lr
	...

0800b4a4 <WHL_init>:
              TIM_HandleTypeDef *p_pwmTimerHandle,
              uint32_t           p_pwmChannel,
              bool               p_invertOnUpdate,
              TIM_HandleTypeDef *p_encoderTimerHandle,
              bool               p_isMotorOn)
{
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b08a      	sub	sp, #40	; 0x28
 800b4a8:	af06      	add	r7, sp, #24
 800b4aa:	60f8      	str	r0, [r7, #12]
 800b4ac:	60b9      	str	r1, [r7, #8]
 800b4ae:	607a      	str	r2, [r7, #4]
 800b4b0:	603b      	str	r3, [r7, #0]
  LOG_info("Initializing Wheel module for %s", p_name);
 800b4b2:	68ba      	ldr	r2, [r7, #8]
 800b4b4:	4927      	ldr	r1, [pc, #156]	; (800b554 <WHL_init+0xb0>)
 800b4b6:	2001      	movs	r0, #1
 800b4b8:	f7ff f954 	bl	800a764 <LOG_log>

  p_handle->name = p_name;
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	68ba      	ldr	r2, [r7, #8]
 800b4c0:	601a      	str	r2, [r3, #0]

  /* Setup motor (with a 0 speed & stopped direction, at this point) */
  MTR_init(&p_handle->motor,
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	1d18      	adds	r0, r3, #4
 800b4c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4c8:	9303      	str	r3, [sp, #12]
 800b4ca:	6a3b      	ldr	r3, [r7, #32]
 800b4cc:	9302      	str	r3, [sp, #8]
 800b4ce:	69fb      	ldr	r3, [r7, #28]
 800b4d0:	9301      	str	r3, [sp, #4]
 800b4d2:	69bb      	ldr	r3, [r7, #24]
 800b4d4:	9300      	str	r3, [sp, #0]
 800b4d6:	683b      	ldr	r3, [r7, #0]
 800b4d8:	687a      	ldr	r2, [r7, #4]
 800b4da:	68b9      	ldr	r1, [r7, #8]
 800b4dc:	f7ff fa32 	bl	800a944 <MTR_init>
            p_dirPin2,
            p_pwmTimerHandle,
            p_pwmChannel);

  /* Setup encoder */
  ENC_init(&p_handle->encoder,
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800b4e6:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800b4ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4ec:	68b9      	ldr	r1, [r7, #8]
 800b4ee:	f7fe ffc5 	bl	800a47c <ENC_init>
            p_name,
            p_invertOnUpdate,
            p_encoderTimerHandle);

  /* Setup speed buffer */
  CBU_init(&p_handle->speedBuffer);
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	336c      	adds	r3, #108	; 0x6c
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	f7fd fe62 	bl	80091c0 <CBU_init>

  /* Setup average speed */
  p_handle->averageSpeed = 0;
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	f04f 0200 	mov.w	r2, #0
 800b502:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Setup PID (with a target speed to 0) */
  PID_init(&p_handle->pid,
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800b50c:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 800b510:	9304      	str	r3, [sp, #16]
 800b512:	4b11      	ldr	r3, [pc, #68]	; (800b558 <WHL_init+0xb4>)
 800b514:	9303      	str	r3, [sp, #12]
 800b516:	f04f 0300 	mov.w	r3, #0
 800b51a:	9302      	str	r3, [sp, #8]
 800b51c:	f04f 0300 	mov.w	r3, #0
 800b520:	9301      	str	r3, [sp, #4]
 800b522:	f04f 0300 	mov.w	r3, #0
 800b526:	9300      	str	r3, [sp, #0]
 800b528:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800b52c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800b530:	68b9      	ldr	r1, [r7, #8]
 800b532:	f7ff faf9 	bl	800ab28 <PID_init>
            0,
            STP_DRIVE_MIN_SPEED,
            STP_DRIVE_MAX_SPEED,
            STP_DRIVE_PID_ANTI_WIND_UP_FACTOR);

  p_handle->isMotorOn    = p_isMotorOn;
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800b53c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
  p_handle->lastTimeInUs = UTI_getTimeUs();
 800b540:	f7ff feb2 	bl	800b2a8 <UTI_getTimeUs>
 800b544:	4602      	mov	r2, r0
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  return;
 800b54c:	bf00      	nop
}
 800b54e:	3710      	adds	r7, #16
 800b550:	46bd      	mov	sp, r7
 800b552:	bd80      	pop	{r7, pc}
 800b554:	08010f24 	.word	0x08010f24
 800b558:	42200000 	.word	0x42200000

0800b55c <WHL_turnMotorOn>:

void WHL_turnMotorOn(T_WHL_Handle *p_handle)
{
 800b55c:	b480      	push	{r7}
 800b55e:	b083      	sub	sp, #12
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
  p_handle->isMotorOn = true;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	2201      	movs	r2, #1
 800b568:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return;
 800b56c:	bf00      	nop
}
 800b56e:	370c      	adds	r7, #12
 800b570:	46bd      	mov	sp, r7
 800b572:	bc80      	pop	{r7}
 800b574:	4770      	bx	lr

0800b576 <WHL_turnMotorOff>:

void WHL_turnMotorOff(T_WHL_Handle *p_handle)
{
 800b576:	b580      	push	{r7, lr}
 800b578:	b082      	sub	sp, #8
 800b57a:	af00      	add	r7, sp, #0
 800b57c:	6078      	str	r0, [r7, #4]
  MTR_setSpeed(&p_handle->motor, 0);
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	3304      	adds	r3, #4
 800b582:	2100      	movs	r1, #0
 800b584:	4618      	mov	r0, r3
 800b586:	f7ff fa85 	bl	800aa94 <MTR_setSpeed>

  p_handle->isMotorOn = false;
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	2200      	movs	r2, #0
 800b58e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return;
 800b592:	bf00      	nop
}
 800b594:	3708      	adds	r7, #8
 800b596:	46bd      	mov	sp, r7
 800b598:	bd80      	pop	{r7, pc}

0800b59a <WHL_updateEncoder>:

void WHL_updateEncoder(T_WHL_Handle *p_handle,
                       uint32_t      p_count)
{
 800b59a:	b580      	push	{r7, lr}
 800b59c:	b082      	sub	sp, #8
 800b59e:	af00      	add	r7, sp, #0
 800b5a0:	6078      	str	r0, [r7, #4]
 800b5a2:	6039      	str	r1, [r7, #0]
  ENC_update(&p_handle->encoder, p_count);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	3328      	adds	r3, #40	; 0x28
 800b5a8:	683a      	ldr	r2, [r7, #0]
 800b5aa:	4611      	mov	r1, r2
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	f7fe ff96 	bl	800a4de <ENC_update>

  return;
 800b5b2:	bf00      	nop
}
 800b5b4:	3708      	adds	r7, #8
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	bd80      	pop	{r7, pc}

0800b5ba <WHL_setDirection>:

void WHL_setDirection(T_WHL_Handle *p_handle, T_MTR_DIRECTION p_direction)
{
 800b5ba:	b580      	push	{r7, lr}
 800b5bc:	b082      	sub	sp, #8
 800b5be:	af00      	add	r7, sp, #0
 800b5c0:	6078      	str	r0, [r7, #4]
 800b5c2:	460b      	mov	r3, r1
 800b5c4:	70fb      	strb	r3, [r7, #3]
  MTR_setDirection(&p_handle->motor, p_direction);
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	3304      	adds	r3, #4
 800b5ca:	78fa      	ldrb	r2, [r7, #3]
 800b5cc:	4611      	mov	r1, r2
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	f7ff f9e8 	bl	800a9a4 <MTR_setDirection>

  return;
 800b5d4:	bf00      	nop
}
 800b5d6:	3708      	adds	r7, #8
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	bd80      	pop	{r7, pc}

0800b5dc <WHL_setSpeed>:

void WHL_setSpeed(T_WHL_Handle *p_handle, uint32_t p_speed)
{
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	b082      	sub	sp, #8
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
 800b5e4:	6039      	str	r1, [r7, #0]
  if (p_handle->isMotorOn == true)
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d006      	beq.n	800b5fe <WHL_setSpeed+0x22>
  {
    MTR_setSpeed(&p_handle->motor, p_speed);
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	3304      	adds	r3, #4
 800b5f4:	6839      	ldr	r1, [r7, #0]
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	f7ff fa4c 	bl	800aa94 <MTR_setSpeed>
  else
  {
    ; /* Nothing to do */
  }

  return;
 800b5fc:	bf00      	nop
 800b5fe:	bf00      	nop
}
 800b600:	3708      	adds	r7, #8
 800b602:	46bd      	mov	sp, r7
 800b604:	bd80      	pop	{r7, pc}

0800b606 <WHL_setPidKp>:

void WHL_setPidKp(T_WHL_Handle *p_handle, float p_kp)
{
 800b606:	b580      	push	{r7, lr}
 800b608:	b082      	sub	sp, #8
 800b60a:	af00      	add	r7, sp, #0
 800b60c:	6078      	str	r0, [r7, #4]
 800b60e:	6039      	str	r1, [r7, #0]
  PID_setKp(&p_handle->pid, p_kp);
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	3338      	adds	r3, #56	; 0x38
 800b614:	6839      	ldr	r1, [r7, #0]
 800b616:	4618      	mov	r0, r3
 800b618:	f7ff fb09 	bl	800ac2e <PID_setKp>

  return;
 800b61c:	bf00      	nop
}
 800b61e:	3708      	adds	r7, #8
 800b620:	46bd      	mov	sp, r7
 800b622:	bd80      	pop	{r7, pc}

0800b624 <WHL_setPidKi>:

void WHL_setPidKi(T_WHL_Handle *p_handle, float p_ki)
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b082      	sub	sp, #8
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
 800b62c:	6039      	str	r1, [r7, #0]
  PID_setKi(&p_handle->pid, p_ki);
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	3338      	adds	r3, #56	; 0x38
 800b632:	6839      	ldr	r1, [r7, #0]
 800b634:	4618      	mov	r0, r3
 800b636:	f7ff fb07 	bl	800ac48 <PID_setKi>

  return;
 800b63a:	bf00      	nop
}
 800b63c:	3708      	adds	r7, #8
 800b63e:	46bd      	mov	sp, r7
 800b640:	bd80      	pop	{r7, pc}

0800b642 <WHL_setPidKd>:

void WHL_setPidKd(T_WHL_Handle *p_handle, float p_kd)
{
 800b642:	b580      	push	{r7, lr}
 800b644:	b082      	sub	sp, #8
 800b646:	af00      	add	r7, sp, #0
 800b648:	6078      	str	r0, [r7, #4]
 800b64a:	6039      	str	r1, [r7, #0]
  PID_setKd(&p_handle->pid, p_kd);
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	3338      	adds	r3, #56	; 0x38
 800b650:	6839      	ldr	r1, [r7, #0]
 800b652:	4618      	mov	r0, r3
 800b654:	f7ff fb05 	bl	800ac62 <PID_setKd>

  return;
 800b658:	bf00      	nop
}
 800b65a:	3708      	adds	r7, #8
 800b65c:	46bd      	mov	sp, r7
 800b65e:	bd80      	pop	{r7, pc}

0800b660 <WHL_setPidTarget>:

void WHL_setPidTarget(T_WHL_Handle *p_handle, uint32_t p_speed)
{
 800b660:	b590      	push	{r4, r7, lr}
 800b662:	b083      	sub	sp, #12
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
 800b668:	6039      	str	r1, [r7, #0]
  PID_setTargetValue(&p_handle->pid, p_speed);
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	f103 0438 	add.w	r4, r3, #56	; 0x38
 800b670:	6838      	ldr	r0, [r7, #0]
 800b672:	f7f5 fb9b 	bl	8000dac <__aeabi_ui2f>
 800b676:	4603      	mov	r3, r0
 800b678:	4619      	mov	r1, r3
 800b67a:	4620      	mov	r0, r4
 800b67c:	f7ff fafe 	bl	800ac7c <PID_setTargetValue>

  return;
 800b680:	bf00      	nop
}
 800b682:	370c      	adds	r7, #12
 800b684:	46bd      	mov	sp, r7
 800b686:	bd90      	pop	{r4, r7, pc}

0800b688 <WHL_updatePidSpeed>:

void WHL_updatePidSpeed(T_WHL_Handle *p_handle)
{
 800b688:	b590      	push	{r4, r7, lr}
 800b68a:	b087      	sub	sp, #28
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]
  uint32_t l_currentTimeInUs;
  uint32_t l_deltaTimeInUs;
  float    l_measuredSpeed;
  float    l_pidSpeed;

  l_currentTimeInUs      = UTI_getTimeUs();
 800b690:	f7ff fe0a 	bl	800b2a8 <UTI_getTimeUs>
 800b694:	6178      	str	r0, [r7, #20]
  l_deltaTimeInUs        = p_handle->lastTimeInUs - l_currentTimeInUs;
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800b69c:	697b      	ldr	r3, [r7, #20]
 800b69e:	1ad3      	subs	r3, r2, r3
 800b6a0:	613b      	str	r3, [r7, #16]
  p_handle->lastTimeInUs = l_currentTimeInUs;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	697a      	ldr	r2, [r7, #20]
 800b6a6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  l_measuredSpeed = fabs((float)ENC_getCount(&p_handle->encoder) / (float)l_deltaTimeInUs * STP_DRIVE_PID_ENCODER_TO_SPEED_FACTOR);
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	3328      	adds	r3, #40	; 0x28
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	f7fe ff2e 	bl	800a510 <ENC_getCount>
 800b6b4:	4603      	mov	r3, r0
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	f7f5 fb7c 	bl	8000db4 <__aeabi_i2f>
 800b6bc:	4604      	mov	r4, r0
 800b6be:	6938      	ldr	r0, [r7, #16]
 800b6c0:	f7f5 fb74 	bl	8000dac <__aeabi_ui2f>
 800b6c4:	4603      	mov	r3, r0
 800b6c6:	4619      	mov	r1, r3
 800b6c8:	4620      	mov	r0, r4
 800b6ca:	f7f5 fc7b 	bl	8000fc4 <__aeabi_fdiv>
 800b6ce:	4603      	mov	r3, r0
 800b6d0:	4916      	ldr	r1, [pc, #88]	; (800b72c <WHL_updatePidSpeed+0xa4>)
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	f7f5 fbc2 	bl	8000e5c <__aeabi_fmul>
 800b6d8:	4603      	mov	r3, r0
 800b6da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b6de:	60fb      	str	r3, [r7, #12]

  CBU_push(&p_handle->speedBuffer, l_measuredSpeed);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	336c      	adds	r3, #108	; 0x6c
 800b6e4:	68f9      	ldr	r1, [r7, #12]
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	f7fd fd8e 	bl	8009208 <CBU_push>

  p_handle->averageSpeed = CBU_getAverage(&p_handle->speedBuffer);
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	336c      	adds	r3, #108	; 0x6c
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	f7fd fdb0 	bl	8009256 <CBU_getAverage>
 800b6f6:	4602      	mov	r2, r0
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  l_pidSpeed = PID_update(&p_handle->pid, p_handle->averageSpeed, l_deltaTimeInUs);
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b70a:	693a      	ldr	r2, [r7, #16]
 800b70c:	4619      	mov	r1, r3
 800b70e:	f7ff fac2 	bl	800ac96 <PID_update>
 800b712:	60b8      	str	r0, [r7, #8]

  WHL_setSpeed(p_handle, l_pidSpeed);
 800b714:	68b8      	ldr	r0, [r7, #8]
 800b716:	f7f5 fd17 	bl	8001148 <__aeabi_f2uiz>
 800b71a:	4603      	mov	r3, r0
 800b71c:	4619      	mov	r1, r3
 800b71e:	6878      	ldr	r0, [r7, #4]
 800b720:	f7ff ff5c 	bl	800b5dc <WHL_setSpeed>

  return;
 800b724:	bf00      	nop
}
 800b726:	371c      	adds	r7, #28
 800b728:	46bd      	mov	sp, r7
 800b72a:	bd90      	pop	{r4, r7, pc}
 800b72c:	47927c00 	.word	0x47927c00

0800b730 <WHL_getAverageSpeed>:

float WHL_getAverageSpeed(T_WHL_Handle *p_handle)
{
 800b730:	b580      	push	{r7, lr}
 800b732:	b084      	sub	sp, #16
 800b734:	af00      	add	r7, sp, #0
 800b736:	6078      	str	r0, [r7, #4]
  T_MTR_DIRECTION l_direction;
  float           l_speed;

  l_direction = MTR_getDirection(&p_handle->motor);
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	3304      	adds	r3, #4
 800b73c:	4618      	mov	r0, r3
 800b73e:	f7ff f99d 	bl	800aa7c <MTR_getDirection>
 800b742:	4603      	mov	r3, r0
 800b744:	73fb      	strb	r3, [r7, #15]

  l_speed = l_direction == MTR_DIRECTION_FORWARD ? p_handle->averageSpeed  : p_handle->averageSpeed;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b74c:	60bb      	str	r3, [r7, #8]

  return l_speed;
 800b74e:	68bb      	ldr	r3, [r7, #8]
}
 800b750:	4618      	mov	r0, r3
 800b752:	3710      	adds	r7, #16
 800b754:	46bd      	mov	sp, r7
 800b756:	bd80      	pop	{r7, pc}

0800b758 <WHL_logInfo>:

void WHL_logInfo(T_WHL_Handle *p_handle)
{
 800b758:	b5b0      	push	{r4, r5, r7, lr}
 800b75a:	b08a      	sub	sp, #40	; 0x28
 800b75c:	af04      	add	r7, sp, #16
 800b75e:	6078      	str	r0, [r7, #4]
  T_MTR_DIRECTION l_direction;
  uint32_t        l_speed;
  uint32_t        l_count;

  l_direction = MTR_getDirection(&p_handle->motor  );
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	3304      	adds	r3, #4
 800b764:	4618      	mov	r0, r3
 800b766:	f7ff f989 	bl	800aa7c <MTR_getDirection>
 800b76a:	4603      	mov	r3, r0
 800b76c:	75fb      	strb	r3, [r7, #23]
  l_speed     = MTR_getSpeed    (&p_handle->motor  );
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	3304      	adds	r3, #4
 800b772:	4618      	mov	r0, r3
 800b774:	f7ff f9cc 	bl	800ab10 <MTR_getSpeed>
 800b778:	6138      	str	r0, [r7, #16]
  l_count     = ENC_getCount    (&p_handle->encoder);
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	3328      	adds	r3, #40	; 0x28
 800b77e:	4618      	mov	r0, r3
 800b780:	f7fe fec6 	bl	800a510 <ENC_getCount>
 800b784:	4603      	mov	r3, r0
 800b786:	60fb      	str	r3, [r7, #12]

  LOG_info("%s direction / speed / count / average speed: %2u / %2u / %2u / %2d",
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681c      	ldr	r4, [r3, #0]
 800b78c:	7dfd      	ldrb	r5, [r7, #23]
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b794:	4618      	mov	r0, r3
 800b796:	f7f5 fcb1 	bl	80010fc <__aeabi_f2iz>
 800b79a:	4603      	mov	r3, r0
 800b79c:	9302      	str	r3, [sp, #8]
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	9301      	str	r3, [sp, #4]
 800b7a2:	693b      	ldr	r3, [r7, #16]
 800b7a4:	9300      	str	r3, [sp, #0]
 800b7a6:	462b      	mov	r3, r5
 800b7a8:	4622      	mov	r2, r4
 800b7aa:	4904      	ldr	r1, [pc, #16]	; (800b7bc <WHL_logInfo+0x64>)
 800b7ac:	2001      	movs	r0, #1
 800b7ae:	f7fe ffd9 	bl	800a764 <LOG_log>
           l_direction,
           l_speed,
           l_count,
      (int)p_handle->averageSpeed);

  return;
 800b7b2:	bf00      	nop
}
 800b7b4:	3718      	adds	r7, #24
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	bdb0      	pop	{r4, r5, r7, pc}
 800b7ba:	bf00      	nop
 800b7bc:	08010f48 	.word	0x08010f48

0800b7c0 <atof>:
 800b7c0:	2100      	movs	r1, #0
 800b7c2:	f001 bc01 	b.w	800cfc8 <strtod>

0800b7c6 <atoi>:
 800b7c6:	220a      	movs	r2, #10
 800b7c8:	2100      	movs	r1, #0
 800b7ca:	f001 bc8f 	b.w	800d0ec <strtol>
	...

0800b7d0 <__errno>:
 800b7d0:	4b01      	ldr	r3, [pc, #4]	; (800b7d8 <__errno+0x8>)
 800b7d2:	6818      	ldr	r0, [r3, #0]
 800b7d4:	4770      	bx	lr
 800b7d6:	bf00      	nop
 800b7d8:	2000001c 	.word	0x2000001c

0800b7dc <__libc_init_array>:
 800b7dc:	b570      	push	{r4, r5, r6, lr}
 800b7de:	2600      	movs	r6, #0
 800b7e0:	4d0c      	ldr	r5, [pc, #48]	; (800b814 <__libc_init_array+0x38>)
 800b7e2:	4c0d      	ldr	r4, [pc, #52]	; (800b818 <__libc_init_array+0x3c>)
 800b7e4:	1b64      	subs	r4, r4, r5
 800b7e6:	10a4      	asrs	r4, r4, #2
 800b7e8:	42a6      	cmp	r6, r4
 800b7ea:	d109      	bne.n	800b800 <__libc_init_array+0x24>
 800b7ec:	f004 fad2 	bl	800fd94 <_init>
 800b7f0:	2600      	movs	r6, #0
 800b7f2:	4d0a      	ldr	r5, [pc, #40]	; (800b81c <__libc_init_array+0x40>)
 800b7f4:	4c0a      	ldr	r4, [pc, #40]	; (800b820 <__libc_init_array+0x44>)
 800b7f6:	1b64      	subs	r4, r4, r5
 800b7f8:	10a4      	asrs	r4, r4, #2
 800b7fa:	42a6      	cmp	r6, r4
 800b7fc:	d105      	bne.n	800b80a <__libc_init_array+0x2e>
 800b7fe:	bd70      	pop	{r4, r5, r6, pc}
 800b800:	f855 3b04 	ldr.w	r3, [r5], #4
 800b804:	4798      	blx	r3
 800b806:	3601      	adds	r6, #1
 800b808:	e7ee      	b.n	800b7e8 <__libc_init_array+0xc>
 800b80a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b80e:	4798      	blx	r3
 800b810:	3601      	adds	r6, #1
 800b812:	e7f2      	b.n	800b7fa <__libc_init_array+0x1e>
 800b814:	08011454 	.word	0x08011454
 800b818:	08011454 	.word	0x08011454
 800b81c:	08011454 	.word	0x08011454
 800b820:	08011458 	.word	0x08011458

0800b824 <malloc>:
 800b824:	4b02      	ldr	r3, [pc, #8]	; (800b830 <malloc+0xc>)
 800b826:	4601      	mov	r1, r0
 800b828:	6818      	ldr	r0, [r3, #0]
 800b82a:	f000 b85f 	b.w	800b8ec <_malloc_r>
 800b82e:	bf00      	nop
 800b830:	2000001c 	.word	0x2000001c

0800b834 <free>:
 800b834:	4b02      	ldr	r3, [pc, #8]	; (800b840 <free+0xc>)
 800b836:	4601      	mov	r1, r0
 800b838:	6818      	ldr	r0, [r3, #0]
 800b83a:	f000 b80b 	b.w	800b854 <_free_r>
 800b83e:	bf00      	nop
 800b840:	2000001c 	.word	0x2000001c

0800b844 <memset>:
 800b844:	4603      	mov	r3, r0
 800b846:	4402      	add	r2, r0
 800b848:	4293      	cmp	r3, r2
 800b84a:	d100      	bne.n	800b84e <memset+0xa>
 800b84c:	4770      	bx	lr
 800b84e:	f803 1b01 	strb.w	r1, [r3], #1
 800b852:	e7f9      	b.n	800b848 <memset+0x4>

0800b854 <_free_r>:
 800b854:	b538      	push	{r3, r4, r5, lr}
 800b856:	4605      	mov	r5, r0
 800b858:	2900      	cmp	r1, #0
 800b85a:	d043      	beq.n	800b8e4 <_free_r+0x90>
 800b85c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b860:	1f0c      	subs	r4, r1, #4
 800b862:	2b00      	cmp	r3, #0
 800b864:	bfb8      	it	lt
 800b866:	18e4      	addlt	r4, r4, r3
 800b868:	f002 ff92 	bl	800e790 <__malloc_lock>
 800b86c:	4a1e      	ldr	r2, [pc, #120]	; (800b8e8 <_free_r+0x94>)
 800b86e:	6813      	ldr	r3, [r2, #0]
 800b870:	4610      	mov	r0, r2
 800b872:	b933      	cbnz	r3, 800b882 <_free_r+0x2e>
 800b874:	6063      	str	r3, [r4, #4]
 800b876:	6014      	str	r4, [r2, #0]
 800b878:	4628      	mov	r0, r5
 800b87a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b87e:	f002 bf8d 	b.w	800e79c <__malloc_unlock>
 800b882:	42a3      	cmp	r3, r4
 800b884:	d90a      	bls.n	800b89c <_free_r+0x48>
 800b886:	6821      	ldr	r1, [r4, #0]
 800b888:	1862      	adds	r2, r4, r1
 800b88a:	4293      	cmp	r3, r2
 800b88c:	bf01      	itttt	eq
 800b88e:	681a      	ldreq	r2, [r3, #0]
 800b890:	685b      	ldreq	r3, [r3, #4]
 800b892:	1852      	addeq	r2, r2, r1
 800b894:	6022      	streq	r2, [r4, #0]
 800b896:	6063      	str	r3, [r4, #4]
 800b898:	6004      	str	r4, [r0, #0]
 800b89a:	e7ed      	b.n	800b878 <_free_r+0x24>
 800b89c:	461a      	mov	r2, r3
 800b89e:	685b      	ldr	r3, [r3, #4]
 800b8a0:	b10b      	cbz	r3, 800b8a6 <_free_r+0x52>
 800b8a2:	42a3      	cmp	r3, r4
 800b8a4:	d9fa      	bls.n	800b89c <_free_r+0x48>
 800b8a6:	6811      	ldr	r1, [r2, #0]
 800b8a8:	1850      	adds	r0, r2, r1
 800b8aa:	42a0      	cmp	r0, r4
 800b8ac:	d10b      	bne.n	800b8c6 <_free_r+0x72>
 800b8ae:	6820      	ldr	r0, [r4, #0]
 800b8b0:	4401      	add	r1, r0
 800b8b2:	1850      	adds	r0, r2, r1
 800b8b4:	4283      	cmp	r3, r0
 800b8b6:	6011      	str	r1, [r2, #0]
 800b8b8:	d1de      	bne.n	800b878 <_free_r+0x24>
 800b8ba:	6818      	ldr	r0, [r3, #0]
 800b8bc:	685b      	ldr	r3, [r3, #4]
 800b8be:	4401      	add	r1, r0
 800b8c0:	6011      	str	r1, [r2, #0]
 800b8c2:	6053      	str	r3, [r2, #4]
 800b8c4:	e7d8      	b.n	800b878 <_free_r+0x24>
 800b8c6:	d902      	bls.n	800b8ce <_free_r+0x7a>
 800b8c8:	230c      	movs	r3, #12
 800b8ca:	602b      	str	r3, [r5, #0]
 800b8cc:	e7d4      	b.n	800b878 <_free_r+0x24>
 800b8ce:	6820      	ldr	r0, [r4, #0]
 800b8d0:	1821      	adds	r1, r4, r0
 800b8d2:	428b      	cmp	r3, r1
 800b8d4:	bf01      	itttt	eq
 800b8d6:	6819      	ldreq	r1, [r3, #0]
 800b8d8:	685b      	ldreq	r3, [r3, #4]
 800b8da:	1809      	addeq	r1, r1, r0
 800b8dc:	6021      	streq	r1, [r4, #0]
 800b8de:	6063      	str	r3, [r4, #4]
 800b8e0:	6054      	str	r4, [r2, #4]
 800b8e2:	e7c9      	b.n	800b878 <_free_r+0x24>
 800b8e4:	bd38      	pop	{r3, r4, r5, pc}
 800b8e6:	bf00      	nop
 800b8e8:	2000054c 	.word	0x2000054c

0800b8ec <_malloc_r>:
 800b8ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8ee:	1ccd      	adds	r5, r1, #3
 800b8f0:	f025 0503 	bic.w	r5, r5, #3
 800b8f4:	3508      	adds	r5, #8
 800b8f6:	2d0c      	cmp	r5, #12
 800b8f8:	bf38      	it	cc
 800b8fa:	250c      	movcc	r5, #12
 800b8fc:	2d00      	cmp	r5, #0
 800b8fe:	4606      	mov	r6, r0
 800b900:	db01      	blt.n	800b906 <_malloc_r+0x1a>
 800b902:	42a9      	cmp	r1, r5
 800b904:	d903      	bls.n	800b90e <_malloc_r+0x22>
 800b906:	230c      	movs	r3, #12
 800b908:	6033      	str	r3, [r6, #0]
 800b90a:	2000      	movs	r0, #0
 800b90c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b90e:	f002 ff3f 	bl	800e790 <__malloc_lock>
 800b912:	4921      	ldr	r1, [pc, #132]	; (800b998 <_malloc_r+0xac>)
 800b914:	680a      	ldr	r2, [r1, #0]
 800b916:	4614      	mov	r4, r2
 800b918:	b99c      	cbnz	r4, 800b942 <_malloc_r+0x56>
 800b91a:	4f20      	ldr	r7, [pc, #128]	; (800b99c <_malloc_r+0xb0>)
 800b91c:	683b      	ldr	r3, [r7, #0]
 800b91e:	b923      	cbnz	r3, 800b92a <_malloc_r+0x3e>
 800b920:	4621      	mov	r1, r4
 800b922:	4630      	mov	r0, r6
 800b924:	f000 fcb4 	bl	800c290 <_sbrk_r>
 800b928:	6038      	str	r0, [r7, #0]
 800b92a:	4629      	mov	r1, r5
 800b92c:	4630      	mov	r0, r6
 800b92e:	f000 fcaf 	bl	800c290 <_sbrk_r>
 800b932:	1c43      	adds	r3, r0, #1
 800b934:	d123      	bne.n	800b97e <_malloc_r+0x92>
 800b936:	230c      	movs	r3, #12
 800b938:	4630      	mov	r0, r6
 800b93a:	6033      	str	r3, [r6, #0]
 800b93c:	f002 ff2e 	bl	800e79c <__malloc_unlock>
 800b940:	e7e3      	b.n	800b90a <_malloc_r+0x1e>
 800b942:	6823      	ldr	r3, [r4, #0]
 800b944:	1b5b      	subs	r3, r3, r5
 800b946:	d417      	bmi.n	800b978 <_malloc_r+0x8c>
 800b948:	2b0b      	cmp	r3, #11
 800b94a:	d903      	bls.n	800b954 <_malloc_r+0x68>
 800b94c:	6023      	str	r3, [r4, #0]
 800b94e:	441c      	add	r4, r3
 800b950:	6025      	str	r5, [r4, #0]
 800b952:	e004      	b.n	800b95e <_malloc_r+0x72>
 800b954:	6863      	ldr	r3, [r4, #4]
 800b956:	42a2      	cmp	r2, r4
 800b958:	bf0c      	ite	eq
 800b95a:	600b      	streq	r3, [r1, #0]
 800b95c:	6053      	strne	r3, [r2, #4]
 800b95e:	4630      	mov	r0, r6
 800b960:	f002 ff1c 	bl	800e79c <__malloc_unlock>
 800b964:	f104 000b 	add.w	r0, r4, #11
 800b968:	1d23      	adds	r3, r4, #4
 800b96a:	f020 0007 	bic.w	r0, r0, #7
 800b96e:	1ac2      	subs	r2, r0, r3
 800b970:	d0cc      	beq.n	800b90c <_malloc_r+0x20>
 800b972:	1a1b      	subs	r3, r3, r0
 800b974:	50a3      	str	r3, [r4, r2]
 800b976:	e7c9      	b.n	800b90c <_malloc_r+0x20>
 800b978:	4622      	mov	r2, r4
 800b97a:	6864      	ldr	r4, [r4, #4]
 800b97c:	e7cc      	b.n	800b918 <_malloc_r+0x2c>
 800b97e:	1cc4      	adds	r4, r0, #3
 800b980:	f024 0403 	bic.w	r4, r4, #3
 800b984:	42a0      	cmp	r0, r4
 800b986:	d0e3      	beq.n	800b950 <_malloc_r+0x64>
 800b988:	1a21      	subs	r1, r4, r0
 800b98a:	4630      	mov	r0, r6
 800b98c:	f000 fc80 	bl	800c290 <_sbrk_r>
 800b990:	3001      	adds	r0, #1
 800b992:	d1dd      	bne.n	800b950 <_malloc_r+0x64>
 800b994:	e7cf      	b.n	800b936 <_malloc_r+0x4a>
 800b996:	bf00      	nop
 800b998:	2000054c 	.word	0x2000054c
 800b99c:	20000550 	.word	0x20000550

0800b9a0 <__cvt>:
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9a6:	461f      	mov	r7, r3
 800b9a8:	bfbb      	ittet	lt
 800b9aa:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800b9ae:	461f      	movlt	r7, r3
 800b9b0:	2300      	movge	r3, #0
 800b9b2:	232d      	movlt	r3, #45	; 0x2d
 800b9b4:	b088      	sub	sp, #32
 800b9b6:	4614      	mov	r4, r2
 800b9b8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b9ba:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800b9bc:	7013      	strb	r3, [r2, #0]
 800b9be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b9c0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800b9c4:	f023 0820 	bic.w	r8, r3, #32
 800b9c8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b9cc:	d005      	beq.n	800b9da <__cvt+0x3a>
 800b9ce:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b9d2:	d100      	bne.n	800b9d6 <__cvt+0x36>
 800b9d4:	3501      	adds	r5, #1
 800b9d6:	2302      	movs	r3, #2
 800b9d8:	e000      	b.n	800b9dc <__cvt+0x3c>
 800b9da:	2303      	movs	r3, #3
 800b9dc:	aa07      	add	r2, sp, #28
 800b9de:	9204      	str	r2, [sp, #16]
 800b9e0:	aa06      	add	r2, sp, #24
 800b9e2:	e9cd a202 	strd	sl, r2, [sp, #8]
 800b9e6:	e9cd 3500 	strd	r3, r5, [sp]
 800b9ea:	4622      	mov	r2, r4
 800b9ec:	463b      	mov	r3, r7
 800b9ee:	f001 fc4f 	bl	800d290 <_dtoa_r>
 800b9f2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b9f6:	4606      	mov	r6, r0
 800b9f8:	d102      	bne.n	800ba00 <__cvt+0x60>
 800b9fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b9fc:	07db      	lsls	r3, r3, #31
 800b9fe:	d522      	bpl.n	800ba46 <__cvt+0xa6>
 800ba00:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ba04:	eb06 0905 	add.w	r9, r6, r5
 800ba08:	d110      	bne.n	800ba2c <__cvt+0x8c>
 800ba0a:	7833      	ldrb	r3, [r6, #0]
 800ba0c:	2b30      	cmp	r3, #48	; 0x30
 800ba0e:	d10a      	bne.n	800ba26 <__cvt+0x86>
 800ba10:	2200      	movs	r2, #0
 800ba12:	2300      	movs	r3, #0
 800ba14:	4620      	mov	r0, r4
 800ba16:	4639      	mov	r1, r7
 800ba18:	f7f5 f832 	bl	8000a80 <__aeabi_dcmpeq>
 800ba1c:	b918      	cbnz	r0, 800ba26 <__cvt+0x86>
 800ba1e:	f1c5 0501 	rsb	r5, r5, #1
 800ba22:	f8ca 5000 	str.w	r5, [sl]
 800ba26:	f8da 3000 	ldr.w	r3, [sl]
 800ba2a:	4499      	add	r9, r3
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	2300      	movs	r3, #0
 800ba30:	4620      	mov	r0, r4
 800ba32:	4639      	mov	r1, r7
 800ba34:	f7f5 f824 	bl	8000a80 <__aeabi_dcmpeq>
 800ba38:	b108      	cbz	r0, 800ba3e <__cvt+0x9e>
 800ba3a:	f8cd 901c 	str.w	r9, [sp, #28]
 800ba3e:	2230      	movs	r2, #48	; 0x30
 800ba40:	9b07      	ldr	r3, [sp, #28]
 800ba42:	454b      	cmp	r3, r9
 800ba44:	d307      	bcc.n	800ba56 <__cvt+0xb6>
 800ba46:	4630      	mov	r0, r6
 800ba48:	9b07      	ldr	r3, [sp, #28]
 800ba4a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ba4c:	1b9b      	subs	r3, r3, r6
 800ba4e:	6013      	str	r3, [r2, #0]
 800ba50:	b008      	add	sp, #32
 800ba52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba56:	1c59      	adds	r1, r3, #1
 800ba58:	9107      	str	r1, [sp, #28]
 800ba5a:	701a      	strb	r2, [r3, #0]
 800ba5c:	e7f0      	b.n	800ba40 <__cvt+0xa0>

0800ba5e <__exponent>:
 800ba5e:	4603      	mov	r3, r0
 800ba60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ba62:	2900      	cmp	r1, #0
 800ba64:	f803 2b02 	strb.w	r2, [r3], #2
 800ba68:	bfb6      	itet	lt
 800ba6a:	222d      	movlt	r2, #45	; 0x2d
 800ba6c:	222b      	movge	r2, #43	; 0x2b
 800ba6e:	4249      	neglt	r1, r1
 800ba70:	2909      	cmp	r1, #9
 800ba72:	7042      	strb	r2, [r0, #1]
 800ba74:	dd2b      	ble.n	800bace <__exponent+0x70>
 800ba76:	f10d 0407 	add.w	r4, sp, #7
 800ba7a:	46a4      	mov	ip, r4
 800ba7c:	270a      	movs	r7, #10
 800ba7e:	fb91 f6f7 	sdiv	r6, r1, r7
 800ba82:	460a      	mov	r2, r1
 800ba84:	46a6      	mov	lr, r4
 800ba86:	fb07 1516 	mls	r5, r7, r6, r1
 800ba8a:	2a63      	cmp	r2, #99	; 0x63
 800ba8c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800ba90:	4631      	mov	r1, r6
 800ba92:	f104 34ff 	add.w	r4, r4, #4294967295
 800ba96:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800ba9a:	dcf0      	bgt.n	800ba7e <__exponent+0x20>
 800ba9c:	3130      	adds	r1, #48	; 0x30
 800ba9e:	f1ae 0502 	sub.w	r5, lr, #2
 800baa2:	f804 1c01 	strb.w	r1, [r4, #-1]
 800baa6:	4629      	mov	r1, r5
 800baa8:	1c44      	adds	r4, r0, #1
 800baaa:	4561      	cmp	r1, ip
 800baac:	d30a      	bcc.n	800bac4 <__exponent+0x66>
 800baae:	f10d 0209 	add.w	r2, sp, #9
 800bab2:	eba2 020e 	sub.w	r2, r2, lr
 800bab6:	4565      	cmp	r5, ip
 800bab8:	bf88      	it	hi
 800baba:	2200      	movhi	r2, #0
 800babc:	4413      	add	r3, r2
 800babe:	1a18      	subs	r0, r3, r0
 800bac0:	b003      	add	sp, #12
 800bac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bac4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bac8:	f804 2f01 	strb.w	r2, [r4, #1]!
 800bacc:	e7ed      	b.n	800baaa <__exponent+0x4c>
 800bace:	2330      	movs	r3, #48	; 0x30
 800bad0:	3130      	adds	r1, #48	; 0x30
 800bad2:	7083      	strb	r3, [r0, #2]
 800bad4:	70c1      	strb	r1, [r0, #3]
 800bad6:	1d03      	adds	r3, r0, #4
 800bad8:	e7f1      	b.n	800babe <__exponent+0x60>
	...

0800badc <_printf_float>:
 800badc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bae0:	b091      	sub	sp, #68	; 0x44
 800bae2:	460c      	mov	r4, r1
 800bae4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800bae8:	4616      	mov	r6, r2
 800baea:	461f      	mov	r7, r3
 800baec:	4605      	mov	r5, r0
 800baee:	f002 fe19 	bl	800e724 <_localeconv_r>
 800baf2:	6803      	ldr	r3, [r0, #0]
 800baf4:	4618      	mov	r0, r3
 800baf6:	9309      	str	r3, [sp, #36]	; 0x24
 800baf8:	f7f4 fb96 	bl	8000228 <strlen>
 800bafc:	2300      	movs	r3, #0
 800bafe:	930e      	str	r3, [sp, #56]	; 0x38
 800bb00:	f8d8 3000 	ldr.w	r3, [r8]
 800bb04:	900a      	str	r0, [sp, #40]	; 0x28
 800bb06:	3307      	adds	r3, #7
 800bb08:	f023 0307 	bic.w	r3, r3, #7
 800bb0c:	f103 0208 	add.w	r2, r3, #8
 800bb10:	f894 9018 	ldrb.w	r9, [r4, #24]
 800bb14:	f8d4 b000 	ldr.w	fp, [r4]
 800bb18:	f8c8 2000 	str.w	r2, [r8]
 800bb1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb20:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800bb24:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800bb28:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800bb2c:	930b      	str	r3, [sp, #44]	; 0x2c
 800bb2e:	f04f 32ff 	mov.w	r2, #4294967295
 800bb32:	4640      	mov	r0, r8
 800bb34:	4b9c      	ldr	r3, [pc, #624]	; (800bda8 <_printf_float+0x2cc>)
 800bb36:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bb38:	f7f4 ffd4 	bl	8000ae4 <__aeabi_dcmpun>
 800bb3c:	bb70      	cbnz	r0, 800bb9c <_printf_float+0xc0>
 800bb3e:	f04f 32ff 	mov.w	r2, #4294967295
 800bb42:	4640      	mov	r0, r8
 800bb44:	4b98      	ldr	r3, [pc, #608]	; (800bda8 <_printf_float+0x2cc>)
 800bb46:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bb48:	f7f4 ffae 	bl	8000aa8 <__aeabi_dcmple>
 800bb4c:	bb30      	cbnz	r0, 800bb9c <_printf_float+0xc0>
 800bb4e:	2200      	movs	r2, #0
 800bb50:	2300      	movs	r3, #0
 800bb52:	4640      	mov	r0, r8
 800bb54:	4651      	mov	r1, sl
 800bb56:	f7f4 ff9d 	bl	8000a94 <__aeabi_dcmplt>
 800bb5a:	b110      	cbz	r0, 800bb62 <_printf_float+0x86>
 800bb5c:	232d      	movs	r3, #45	; 0x2d
 800bb5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bb62:	4b92      	ldr	r3, [pc, #584]	; (800bdac <_printf_float+0x2d0>)
 800bb64:	4892      	ldr	r0, [pc, #584]	; (800bdb0 <_printf_float+0x2d4>)
 800bb66:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800bb6a:	bf94      	ite	ls
 800bb6c:	4698      	movls	r8, r3
 800bb6e:	4680      	movhi	r8, r0
 800bb70:	2303      	movs	r3, #3
 800bb72:	f04f 0a00 	mov.w	sl, #0
 800bb76:	6123      	str	r3, [r4, #16]
 800bb78:	f02b 0304 	bic.w	r3, fp, #4
 800bb7c:	6023      	str	r3, [r4, #0]
 800bb7e:	4633      	mov	r3, r6
 800bb80:	4621      	mov	r1, r4
 800bb82:	4628      	mov	r0, r5
 800bb84:	9700      	str	r7, [sp, #0]
 800bb86:	aa0f      	add	r2, sp, #60	; 0x3c
 800bb88:	f000 f9d4 	bl	800bf34 <_printf_common>
 800bb8c:	3001      	adds	r0, #1
 800bb8e:	f040 8090 	bne.w	800bcb2 <_printf_float+0x1d6>
 800bb92:	f04f 30ff 	mov.w	r0, #4294967295
 800bb96:	b011      	add	sp, #68	; 0x44
 800bb98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb9c:	4642      	mov	r2, r8
 800bb9e:	4653      	mov	r3, sl
 800bba0:	4640      	mov	r0, r8
 800bba2:	4651      	mov	r1, sl
 800bba4:	f7f4 ff9e 	bl	8000ae4 <__aeabi_dcmpun>
 800bba8:	b148      	cbz	r0, 800bbbe <_printf_float+0xe2>
 800bbaa:	f1ba 0f00 	cmp.w	sl, #0
 800bbae:	bfb8      	it	lt
 800bbb0:	232d      	movlt	r3, #45	; 0x2d
 800bbb2:	4880      	ldr	r0, [pc, #512]	; (800bdb4 <_printf_float+0x2d8>)
 800bbb4:	bfb8      	it	lt
 800bbb6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800bbba:	4b7f      	ldr	r3, [pc, #508]	; (800bdb8 <_printf_float+0x2dc>)
 800bbbc:	e7d3      	b.n	800bb66 <_printf_float+0x8a>
 800bbbe:	6863      	ldr	r3, [r4, #4]
 800bbc0:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800bbc4:	1c5a      	adds	r2, r3, #1
 800bbc6:	d142      	bne.n	800bc4e <_printf_float+0x172>
 800bbc8:	2306      	movs	r3, #6
 800bbca:	6063      	str	r3, [r4, #4]
 800bbcc:	2200      	movs	r2, #0
 800bbce:	9206      	str	r2, [sp, #24]
 800bbd0:	aa0e      	add	r2, sp, #56	; 0x38
 800bbd2:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800bbd6:	aa0d      	add	r2, sp, #52	; 0x34
 800bbd8:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800bbdc:	9203      	str	r2, [sp, #12]
 800bbde:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800bbe2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800bbe6:	6023      	str	r3, [r4, #0]
 800bbe8:	6863      	ldr	r3, [r4, #4]
 800bbea:	4642      	mov	r2, r8
 800bbec:	9300      	str	r3, [sp, #0]
 800bbee:	4628      	mov	r0, r5
 800bbf0:	4653      	mov	r3, sl
 800bbf2:	910b      	str	r1, [sp, #44]	; 0x2c
 800bbf4:	f7ff fed4 	bl	800b9a0 <__cvt>
 800bbf8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bbfa:	4680      	mov	r8, r0
 800bbfc:	2947      	cmp	r1, #71	; 0x47
 800bbfe:	990d      	ldr	r1, [sp, #52]	; 0x34
 800bc00:	d108      	bne.n	800bc14 <_printf_float+0x138>
 800bc02:	1cc8      	adds	r0, r1, #3
 800bc04:	db02      	blt.n	800bc0c <_printf_float+0x130>
 800bc06:	6863      	ldr	r3, [r4, #4]
 800bc08:	4299      	cmp	r1, r3
 800bc0a:	dd40      	ble.n	800bc8e <_printf_float+0x1b2>
 800bc0c:	f1a9 0902 	sub.w	r9, r9, #2
 800bc10:	fa5f f989 	uxtb.w	r9, r9
 800bc14:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800bc18:	d81f      	bhi.n	800bc5a <_printf_float+0x17e>
 800bc1a:	464a      	mov	r2, r9
 800bc1c:	3901      	subs	r1, #1
 800bc1e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800bc22:	910d      	str	r1, [sp, #52]	; 0x34
 800bc24:	f7ff ff1b 	bl	800ba5e <__exponent>
 800bc28:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bc2a:	4682      	mov	sl, r0
 800bc2c:	1813      	adds	r3, r2, r0
 800bc2e:	2a01      	cmp	r2, #1
 800bc30:	6123      	str	r3, [r4, #16]
 800bc32:	dc02      	bgt.n	800bc3a <_printf_float+0x15e>
 800bc34:	6822      	ldr	r2, [r4, #0]
 800bc36:	07d2      	lsls	r2, r2, #31
 800bc38:	d501      	bpl.n	800bc3e <_printf_float+0x162>
 800bc3a:	3301      	adds	r3, #1
 800bc3c:	6123      	str	r3, [r4, #16]
 800bc3e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d09b      	beq.n	800bb7e <_printf_float+0xa2>
 800bc46:	232d      	movs	r3, #45	; 0x2d
 800bc48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bc4c:	e797      	b.n	800bb7e <_printf_float+0xa2>
 800bc4e:	2947      	cmp	r1, #71	; 0x47
 800bc50:	d1bc      	bne.n	800bbcc <_printf_float+0xf0>
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d1ba      	bne.n	800bbcc <_printf_float+0xf0>
 800bc56:	2301      	movs	r3, #1
 800bc58:	e7b7      	b.n	800bbca <_printf_float+0xee>
 800bc5a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800bc5e:	d118      	bne.n	800bc92 <_printf_float+0x1b6>
 800bc60:	2900      	cmp	r1, #0
 800bc62:	6863      	ldr	r3, [r4, #4]
 800bc64:	dd0b      	ble.n	800bc7e <_printf_float+0x1a2>
 800bc66:	6121      	str	r1, [r4, #16]
 800bc68:	b913      	cbnz	r3, 800bc70 <_printf_float+0x194>
 800bc6a:	6822      	ldr	r2, [r4, #0]
 800bc6c:	07d0      	lsls	r0, r2, #31
 800bc6e:	d502      	bpl.n	800bc76 <_printf_float+0x19a>
 800bc70:	3301      	adds	r3, #1
 800bc72:	440b      	add	r3, r1
 800bc74:	6123      	str	r3, [r4, #16]
 800bc76:	f04f 0a00 	mov.w	sl, #0
 800bc7a:	65a1      	str	r1, [r4, #88]	; 0x58
 800bc7c:	e7df      	b.n	800bc3e <_printf_float+0x162>
 800bc7e:	b913      	cbnz	r3, 800bc86 <_printf_float+0x1aa>
 800bc80:	6822      	ldr	r2, [r4, #0]
 800bc82:	07d2      	lsls	r2, r2, #31
 800bc84:	d501      	bpl.n	800bc8a <_printf_float+0x1ae>
 800bc86:	3302      	adds	r3, #2
 800bc88:	e7f4      	b.n	800bc74 <_printf_float+0x198>
 800bc8a:	2301      	movs	r3, #1
 800bc8c:	e7f2      	b.n	800bc74 <_printf_float+0x198>
 800bc8e:	f04f 0967 	mov.w	r9, #103	; 0x67
 800bc92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bc94:	4299      	cmp	r1, r3
 800bc96:	db05      	blt.n	800bca4 <_printf_float+0x1c8>
 800bc98:	6823      	ldr	r3, [r4, #0]
 800bc9a:	6121      	str	r1, [r4, #16]
 800bc9c:	07d8      	lsls	r0, r3, #31
 800bc9e:	d5ea      	bpl.n	800bc76 <_printf_float+0x19a>
 800bca0:	1c4b      	adds	r3, r1, #1
 800bca2:	e7e7      	b.n	800bc74 <_printf_float+0x198>
 800bca4:	2900      	cmp	r1, #0
 800bca6:	bfcc      	ite	gt
 800bca8:	2201      	movgt	r2, #1
 800bcaa:	f1c1 0202 	rsble	r2, r1, #2
 800bcae:	4413      	add	r3, r2
 800bcb0:	e7e0      	b.n	800bc74 <_printf_float+0x198>
 800bcb2:	6823      	ldr	r3, [r4, #0]
 800bcb4:	055a      	lsls	r2, r3, #21
 800bcb6:	d407      	bmi.n	800bcc8 <_printf_float+0x1ec>
 800bcb8:	6923      	ldr	r3, [r4, #16]
 800bcba:	4642      	mov	r2, r8
 800bcbc:	4631      	mov	r1, r6
 800bcbe:	4628      	mov	r0, r5
 800bcc0:	47b8      	blx	r7
 800bcc2:	3001      	adds	r0, #1
 800bcc4:	d12b      	bne.n	800bd1e <_printf_float+0x242>
 800bcc6:	e764      	b.n	800bb92 <_printf_float+0xb6>
 800bcc8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800bccc:	f240 80dd 	bls.w	800be8a <_printf_float+0x3ae>
 800bcd0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bcd4:	2200      	movs	r2, #0
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	f7f4 fed2 	bl	8000a80 <__aeabi_dcmpeq>
 800bcdc:	2800      	cmp	r0, #0
 800bcde:	d033      	beq.n	800bd48 <_printf_float+0x26c>
 800bce0:	2301      	movs	r3, #1
 800bce2:	4631      	mov	r1, r6
 800bce4:	4628      	mov	r0, r5
 800bce6:	4a35      	ldr	r2, [pc, #212]	; (800bdbc <_printf_float+0x2e0>)
 800bce8:	47b8      	blx	r7
 800bcea:	3001      	adds	r0, #1
 800bcec:	f43f af51 	beq.w	800bb92 <_printf_float+0xb6>
 800bcf0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800bcf4:	429a      	cmp	r2, r3
 800bcf6:	db02      	blt.n	800bcfe <_printf_float+0x222>
 800bcf8:	6823      	ldr	r3, [r4, #0]
 800bcfa:	07d8      	lsls	r0, r3, #31
 800bcfc:	d50f      	bpl.n	800bd1e <_printf_float+0x242>
 800bcfe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bd02:	4631      	mov	r1, r6
 800bd04:	4628      	mov	r0, r5
 800bd06:	47b8      	blx	r7
 800bd08:	3001      	adds	r0, #1
 800bd0a:	f43f af42 	beq.w	800bb92 <_printf_float+0xb6>
 800bd0e:	f04f 0800 	mov.w	r8, #0
 800bd12:	f104 091a 	add.w	r9, r4, #26
 800bd16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bd18:	3b01      	subs	r3, #1
 800bd1a:	4543      	cmp	r3, r8
 800bd1c:	dc09      	bgt.n	800bd32 <_printf_float+0x256>
 800bd1e:	6823      	ldr	r3, [r4, #0]
 800bd20:	079b      	lsls	r3, r3, #30
 800bd22:	f100 8102 	bmi.w	800bf2a <_printf_float+0x44e>
 800bd26:	68e0      	ldr	r0, [r4, #12]
 800bd28:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bd2a:	4298      	cmp	r0, r3
 800bd2c:	bfb8      	it	lt
 800bd2e:	4618      	movlt	r0, r3
 800bd30:	e731      	b.n	800bb96 <_printf_float+0xba>
 800bd32:	2301      	movs	r3, #1
 800bd34:	464a      	mov	r2, r9
 800bd36:	4631      	mov	r1, r6
 800bd38:	4628      	mov	r0, r5
 800bd3a:	47b8      	blx	r7
 800bd3c:	3001      	adds	r0, #1
 800bd3e:	f43f af28 	beq.w	800bb92 <_printf_float+0xb6>
 800bd42:	f108 0801 	add.w	r8, r8, #1
 800bd46:	e7e6      	b.n	800bd16 <_printf_float+0x23a>
 800bd48:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	dc38      	bgt.n	800bdc0 <_printf_float+0x2e4>
 800bd4e:	2301      	movs	r3, #1
 800bd50:	4631      	mov	r1, r6
 800bd52:	4628      	mov	r0, r5
 800bd54:	4a19      	ldr	r2, [pc, #100]	; (800bdbc <_printf_float+0x2e0>)
 800bd56:	47b8      	blx	r7
 800bd58:	3001      	adds	r0, #1
 800bd5a:	f43f af1a 	beq.w	800bb92 <_printf_float+0xb6>
 800bd5e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800bd62:	4313      	orrs	r3, r2
 800bd64:	d102      	bne.n	800bd6c <_printf_float+0x290>
 800bd66:	6823      	ldr	r3, [r4, #0]
 800bd68:	07d9      	lsls	r1, r3, #31
 800bd6a:	d5d8      	bpl.n	800bd1e <_printf_float+0x242>
 800bd6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bd70:	4631      	mov	r1, r6
 800bd72:	4628      	mov	r0, r5
 800bd74:	47b8      	blx	r7
 800bd76:	3001      	adds	r0, #1
 800bd78:	f43f af0b 	beq.w	800bb92 <_printf_float+0xb6>
 800bd7c:	f04f 0900 	mov.w	r9, #0
 800bd80:	f104 0a1a 	add.w	sl, r4, #26
 800bd84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bd86:	425b      	negs	r3, r3
 800bd88:	454b      	cmp	r3, r9
 800bd8a:	dc01      	bgt.n	800bd90 <_printf_float+0x2b4>
 800bd8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bd8e:	e794      	b.n	800bcba <_printf_float+0x1de>
 800bd90:	2301      	movs	r3, #1
 800bd92:	4652      	mov	r2, sl
 800bd94:	4631      	mov	r1, r6
 800bd96:	4628      	mov	r0, r5
 800bd98:	47b8      	blx	r7
 800bd9a:	3001      	adds	r0, #1
 800bd9c:	f43f aef9 	beq.w	800bb92 <_printf_float+0xb6>
 800bda0:	f109 0901 	add.w	r9, r9, #1
 800bda4:	e7ee      	b.n	800bd84 <_printf_float+0x2a8>
 800bda6:	bf00      	nop
 800bda8:	7fefffff 	.word	0x7fefffff
 800bdac:	08010fa8 	.word	0x08010fa8
 800bdb0:	08010fac 	.word	0x08010fac
 800bdb4:	08010fb4 	.word	0x08010fb4
 800bdb8:	08010fb0 	.word	0x08010fb0
 800bdbc:	08010fb8 	.word	0x08010fb8
 800bdc0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bdc2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bdc4:	429a      	cmp	r2, r3
 800bdc6:	bfa8      	it	ge
 800bdc8:	461a      	movge	r2, r3
 800bdca:	2a00      	cmp	r2, #0
 800bdcc:	4691      	mov	r9, r2
 800bdce:	dc37      	bgt.n	800be40 <_printf_float+0x364>
 800bdd0:	f04f 0b00 	mov.w	fp, #0
 800bdd4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bdd8:	f104 021a 	add.w	r2, r4, #26
 800bddc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800bde0:	ebaa 0309 	sub.w	r3, sl, r9
 800bde4:	455b      	cmp	r3, fp
 800bde6:	dc33      	bgt.n	800be50 <_printf_float+0x374>
 800bde8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800bdec:	429a      	cmp	r2, r3
 800bdee:	db3b      	blt.n	800be68 <_printf_float+0x38c>
 800bdf0:	6823      	ldr	r3, [r4, #0]
 800bdf2:	07da      	lsls	r2, r3, #31
 800bdf4:	d438      	bmi.n	800be68 <_printf_float+0x38c>
 800bdf6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bdf8:	990d      	ldr	r1, [sp, #52]	; 0x34
 800bdfa:	eba2 030a 	sub.w	r3, r2, sl
 800bdfe:	eba2 0901 	sub.w	r9, r2, r1
 800be02:	4599      	cmp	r9, r3
 800be04:	bfa8      	it	ge
 800be06:	4699      	movge	r9, r3
 800be08:	f1b9 0f00 	cmp.w	r9, #0
 800be0c:	dc34      	bgt.n	800be78 <_printf_float+0x39c>
 800be0e:	f04f 0800 	mov.w	r8, #0
 800be12:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800be16:	f104 0a1a 	add.w	sl, r4, #26
 800be1a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800be1e:	1a9b      	subs	r3, r3, r2
 800be20:	eba3 0309 	sub.w	r3, r3, r9
 800be24:	4543      	cmp	r3, r8
 800be26:	f77f af7a 	ble.w	800bd1e <_printf_float+0x242>
 800be2a:	2301      	movs	r3, #1
 800be2c:	4652      	mov	r2, sl
 800be2e:	4631      	mov	r1, r6
 800be30:	4628      	mov	r0, r5
 800be32:	47b8      	blx	r7
 800be34:	3001      	adds	r0, #1
 800be36:	f43f aeac 	beq.w	800bb92 <_printf_float+0xb6>
 800be3a:	f108 0801 	add.w	r8, r8, #1
 800be3e:	e7ec      	b.n	800be1a <_printf_float+0x33e>
 800be40:	4613      	mov	r3, r2
 800be42:	4631      	mov	r1, r6
 800be44:	4642      	mov	r2, r8
 800be46:	4628      	mov	r0, r5
 800be48:	47b8      	blx	r7
 800be4a:	3001      	adds	r0, #1
 800be4c:	d1c0      	bne.n	800bdd0 <_printf_float+0x2f4>
 800be4e:	e6a0      	b.n	800bb92 <_printf_float+0xb6>
 800be50:	2301      	movs	r3, #1
 800be52:	4631      	mov	r1, r6
 800be54:	4628      	mov	r0, r5
 800be56:	920b      	str	r2, [sp, #44]	; 0x2c
 800be58:	47b8      	blx	r7
 800be5a:	3001      	adds	r0, #1
 800be5c:	f43f ae99 	beq.w	800bb92 <_printf_float+0xb6>
 800be60:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800be62:	f10b 0b01 	add.w	fp, fp, #1
 800be66:	e7b9      	b.n	800bddc <_printf_float+0x300>
 800be68:	4631      	mov	r1, r6
 800be6a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800be6e:	4628      	mov	r0, r5
 800be70:	47b8      	blx	r7
 800be72:	3001      	adds	r0, #1
 800be74:	d1bf      	bne.n	800bdf6 <_printf_float+0x31a>
 800be76:	e68c      	b.n	800bb92 <_printf_float+0xb6>
 800be78:	464b      	mov	r3, r9
 800be7a:	4631      	mov	r1, r6
 800be7c:	4628      	mov	r0, r5
 800be7e:	eb08 020a 	add.w	r2, r8, sl
 800be82:	47b8      	blx	r7
 800be84:	3001      	adds	r0, #1
 800be86:	d1c2      	bne.n	800be0e <_printf_float+0x332>
 800be88:	e683      	b.n	800bb92 <_printf_float+0xb6>
 800be8a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800be8c:	2a01      	cmp	r2, #1
 800be8e:	dc01      	bgt.n	800be94 <_printf_float+0x3b8>
 800be90:	07db      	lsls	r3, r3, #31
 800be92:	d537      	bpl.n	800bf04 <_printf_float+0x428>
 800be94:	2301      	movs	r3, #1
 800be96:	4642      	mov	r2, r8
 800be98:	4631      	mov	r1, r6
 800be9a:	4628      	mov	r0, r5
 800be9c:	47b8      	blx	r7
 800be9e:	3001      	adds	r0, #1
 800bea0:	f43f ae77 	beq.w	800bb92 <_printf_float+0xb6>
 800bea4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bea8:	4631      	mov	r1, r6
 800beaa:	4628      	mov	r0, r5
 800beac:	47b8      	blx	r7
 800beae:	3001      	adds	r0, #1
 800beb0:	f43f ae6f 	beq.w	800bb92 <_printf_float+0xb6>
 800beb4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800beb8:	2200      	movs	r2, #0
 800beba:	2300      	movs	r3, #0
 800bebc:	f7f4 fde0 	bl	8000a80 <__aeabi_dcmpeq>
 800bec0:	b9d8      	cbnz	r0, 800befa <_printf_float+0x41e>
 800bec2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bec4:	f108 0201 	add.w	r2, r8, #1
 800bec8:	3b01      	subs	r3, #1
 800beca:	4631      	mov	r1, r6
 800becc:	4628      	mov	r0, r5
 800bece:	47b8      	blx	r7
 800bed0:	3001      	adds	r0, #1
 800bed2:	d10e      	bne.n	800bef2 <_printf_float+0x416>
 800bed4:	e65d      	b.n	800bb92 <_printf_float+0xb6>
 800bed6:	2301      	movs	r3, #1
 800bed8:	464a      	mov	r2, r9
 800beda:	4631      	mov	r1, r6
 800bedc:	4628      	mov	r0, r5
 800bede:	47b8      	blx	r7
 800bee0:	3001      	adds	r0, #1
 800bee2:	f43f ae56 	beq.w	800bb92 <_printf_float+0xb6>
 800bee6:	f108 0801 	add.w	r8, r8, #1
 800beea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800beec:	3b01      	subs	r3, #1
 800beee:	4543      	cmp	r3, r8
 800bef0:	dcf1      	bgt.n	800bed6 <_printf_float+0x3fa>
 800bef2:	4653      	mov	r3, sl
 800bef4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800bef8:	e6e0      	b.n	800bcbc <_printf_float+0x1e0>
 800befa:	f04f 0800 	mov.w	r8, #0
 800befe:	f104 091a 	add.w	r9, r4, #26
 800bf02:	e7f2      	b.n	800beea <_printf_float+0x40e>
 800bf04:	2301      	movs	r3, #1
 800bf06:	4642      	mov	r2, r8
 800bf08:	e7df      	b.n	800beca <_printf_float+0x3ee>
 800bf0a:	2301      	movs	r3, #1
 800bf0c:	464a      	mov	r2, r9
 800bf0e:	4631      	mov	r1, r6
 800bf10:	4628      	mov	r0, r5
 800bf12:	47b8      	blx	r7
 800bf14:	3001      	adds	r0, #1
 800bf16:	f43f ae3c 	beq.w	800bb92 <_printf_float+0xb6>
 800bf1a:	f108 0801 	add.w	r8, r8, #1
 800bf1e:	68e3      	ldr	r3, [r4, #12]
 800bf20:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800bf22:	1a5b      	subs	r3, r3, r1
 800bf24:	4543      	cmp	r3, r8
 800bf26:	dcf0      	bgt.n	800bf0a <_printf_float+0x42e>
 800bf28:	e6fd      	b.n	800bd26 <_printf_float+0x24a>
 800bf2a:	f04f 0800 	mov.w	r8, #0
 800bf2e:	f104 0919 	add.w	r9, r4, #25
 800bf32:	e7f4      	b.n	800bf1e <_printf_float+0x442>

0800bf34 <_printf_common>:
 800bf34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf38:	4616      	mov	r6, r2
 800bf3a:	4699      	mov	r9, r3
 800bf3c:	688a      	ldr	r2, [r1, #8]
 800bf3e:	690b      	ldr	r3, [r1, #16]
 800bf40:	4607      	mov	r7, r0
 800bf42:	4293      	cmp	r3, r2
 800bf44:	bfb8      	it	lt
 800bf46:	4613      	movlt	r3, r2
 800bf48:	6033      	str	r3, [r6, #0]
 800bf4a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bf4e:	460c      	mov	r4, r1
 800bf50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bf54:	b10a      	cbz	r2, 800bf5a <_printf_common+0x26>
 800bf56:	3301      	adds	r3, #1
 800bf58:	6033      	str	r3, [r6, #0]
 800bf5a:	6823      	ldr	r3, [r4, #0]
 800bf5c:	0699      	lsls	r1, r3, #26
 800bf5e:	bf42      	ittt	mi
 800bf60:	6833      	ldrmi	r3, [r6, #0]
 800bf62:	3302      	addmi	r3, #2
 800bf64:	6033      	strmi	r3, [r6, #0]
 800bf66:	6825      	ldr	r5, [r4, #0]
 800bf68:	f015 0506 	ands.w	r5, r5, #6
 800bf6c:	d106      	bne.n	800bf7c <_printf_common+0x48>
 800bf6e:	f104 0a19 	add.w	sl, r4, #25
 800bf72:	68e3      	ldr	r3, [r4, #12]
 800bf74:	6832      	ldr	r2, [r6, #0]
 800bf76:	1a9b      	subs	r3, r3, r2
 800bf78:	42ab      	cmp	r3, r5
 800bf7a:	dc28      	bgt.n	800bfce <_printf_common+0x9a>
 800bf7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bf80:	1e13      	subs	r3, r2, #0
 800bf82:	6822      	ldr	r2, [r4, #0]
 800bf84:	bf18      	it	ne
 800bf86:	2301      	movne	r3, #1
 800bf88:	0692      	lsls	r2, r2, #26
 800bf8a:	d42d      	bmi.n	800bfe8 <_printf_common+0xb4>
 800bf8c:	4649      	mov	r1, r9
 800bf8e:	4638      	mov	r0, r7
 800bf90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bf94:	47c0      	blx	r8
 800bf96:	3001      	adds	r0, #1
 800bf98:	d020      	beq.n	800bfdc <_printf_common+0xa8>
 800bf9a:	6823      	ldr	r3, [r4, #0]
 800bf9c:	68e5      	ldr	r5, [r4, #12]
 800bf9e:	f003 0306 	and.w	r3, r3, #6
 800bfa2:	2b04      	cmp	r3, #4
 800bfa4:	bf18      	it	ne
 800bfa6:	2500      	movne	r5, #0
 800bfa8:	6832      	ldr	r2, [r6, #0]
 800bfaa:	f04f 0600 	mov.w	r6, #0
 800bfae:	68a3      	ldr	r3, [r4, #8]
 800bfb0:	bf08      	it	eq
 800bfb2:	1aad      	subeq	r5, r5, r2
 800bfb4:	6922      	ldr	r2, [r4, #16]
 800bfb6:	bf08      	it	eq
 800bfb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bfbc:	4293      	cmp	r3, r2
 800bfbe:	bfc4      	itt	gt
 800bfc0:	1a9b      	subgt	r3, r3, r2
 800bfc2:	18ed      	addgt	r5, r5, r3
 800bfc4:	341a      	adds	r4, #26
 800bfc6:	42b5      	cmp	r5, r6
 800bfc8:	d11a      	bne.n	800c000 <_printf_common+0xcc>
 800bfca:	2000      	movs	r0, #0
 800bfcc:	e008      	b.n	800bfe0 <_printf_common+0xac>
 800bfce:	2301      	movs	r3, #1
 800bfd0:	4652      	mov	r2, sl
 800bfd2:	4649      	mov	r1, r9
 800bfd4:	4638      	mov	r0, r7
 800bfd6:	47c0      	blx	r8
 800bfd8:	3001      	adds	r0, #1
 800bfda:	d103      	bne.n	800bfe4 <_printf_common+0xb0>
 800bfdc:	f04f 30ff 	mov.w	r0, #4294967295
 800bfe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfe4:	3501      	adds	r5, #1
 800bfe6:	e7c4      	b.n	800bf72 <_printf_common+0x3e>
 800bfe8:	2030      	movs	r0, #48	; 0x30
 800bfea:	18e1      	adds	r1, r4, r3
 800bfec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bff0:	1c5a      	adds	r2, r3, #1
 800bff2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bff6:	4422      	add	r2, r4
 800bff8:	3302      	adds	r3, #2
 800bffa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bffe:	e7c5      	b.n	800bf8c <_printf_common+0x58>
 800c000:	2301      	movs	r3, #1
 800c002:	4622      	mov	r2, r4
 800c004:	4649      	mov	r1, r9
 800c006:	4638      	mov	r0, r7
 800c008:	47c0      	blx	r8
 800c00a:	3001      	adds	r0, #1
 800c00c:	d0e6      	beq.n	800bfdc <_printf_common+0xa8>
 800c00e:	3601      	adds	r6, #1
 800c010:	e7d9      	b.n	800bfc6 <_printf_common+0x92>
	...

0800c014 <_printf_i>:
 800c014:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c018:	460c      	mov	r4, r1
 800c01a:	7e27      	ldrb	r7, [r4, #24]
 800c01c:	4691      	mov	r9, r2
 800c01e:	2f78      	cmp	r7, #120	; 0x78
 800c020:	4680      	mov	r8, r0
 800c022:	469a      	mov	sl, r3
 800c024:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c026:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c02a:	d807      	bhi.n	800c03c <_printf_i+0x28>
 800c02c:	2f62      	cmp	r7, #98	; 0x62
 800c02e:	d80a      	bhi.n	800c046 <_printf_i+0x32>
 800c030:	2f00      	cmp	r7, #0
 800c032:	f000 80d9 	beq.w	800c1e8 <_printf_i+0x1d4>
 800c036:	2f58      	cmp	r7, #88	; 0x58
 800c038:	f000 80a4 	beq.w	800c184 <_printf_i+0x170>
 800c03c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c040:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c044:	e03a      	b.n	800c0bc <_printf_i+0xa8>
 800c046:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c04a:	2b15      	cmp	r3, #21
 800c04c:	d8f6      	bhi.n	800c03c <_printf_i+0x28>
 800c04e:	a001      	add	r0, pc, #4	; (adr r0, 800c054 <_printf_i+0x40>)
 800c050:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800c054:	0800c0ad 	.word	0x0800c0ad
 800c058:	0800c0c1 	.word	0x0800c0c1
 800c05c:	0800c03d 	.word	0x0800c03d
 800c060:	0800c03d 	.word	0x0800c03d
 800c064:	0800c03d 	.word	0x0800c03d
 800c068:	0800c03d 	.word	0x0800c03d
 800c06c:	0800c0c1 	.word	0x0800c0c1
 800c070:	0800c03d 	.word	0x0800c03d
 800c074:	0800c03d 	.word	0x0800c03d
 800c078:	0800c03d 	.word	0x0800c03d
 800c07c:	0800c03d 	.word	0x0800c03d
 800c080:	0800c1cf 	.word	0x0800c1cf
 800c084:	0800c0f1 	.word	0x0800c0f1
 800c088:	0800c1b1 	.word	0x0800c1b1
 800c08c:	0800c03d 	.word	0x0800c03d
 800c090:	0800c03d 	.word	0x0800c03d
 800c094:	0800c1f1 	.word	0x0800c1f1
 800c098:	0800c03d 	.word	0x0800c03d
 800c09c:	0800c0f1 	.word	0x0800c0f1
 800c0a0:	0800c03d 	.word	0x0800c03d
 800c0a4:	0800c03d 	.word	0x0800c03d
 800c0a8:	0800c1b9 	.word	0x0800c1b9
 800c0ac:	680b      	ldr	r3, [r1, #0]
 800c0ae:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c0b2:	1d1a      	adds	r2, r3, #4
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	600a      	str	r2, [r1, #0]
 800c0b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c0bc:	2301      	movs	r3, #1
 800c0be:	e0a4      	b.n	800c20a <_printf_i+0x1f6>
 800c0c0:	6825      	ldr	r5, [r4, #0]
 800c0c2:	6808      	ldr	r0, [r1, #0]
 800c0c4:	062e      	lsls	r6, r5, #24
 800c0c6:	f100 0304 	add.w	r3, r0, #4
 800c0ca:	d50a      	bpl.n	800c0e2 <_printf_i+0xce>
 800c0cc:	6805      	ldr	r5, [r0, #0]
 800c0ce:	600b      	str	r3, [r1, #0]
 800c0d0:	2d00      	cmp	r5, #0
 800c0d2:	da03      	bge.n	800c0dc <_printf_i+0xc8>
 800c0d4:	232d      	movs	r3, #45	; 0x2d
 800c0d6:	426d      	negs	r5, r5
 800c0d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c0dc:	230a      	movs	r3, #10
 800c0de:	485e      	ldr	r0, [pc, #376]	; (800c258 <_printf_i+0x244>)
 800c0e0:	e019      	b.n	800c116 <_printf_i+0x102>
 800c0e2:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c0e6:	6805      	ldr	r5, [r0, #0]
 800c0e8:	600b      	str	r3, [r1, #0]
 800c0ea:	bf18      	it	ne
 800c0ec:	b22d      	sxthne	r5, r5
 800c0ee:	e7ef      	b.n	800c0d0 <_printf_i+0xbc>
 800c0f0:	680b      	ldr	r3, [r1, #0]
 800c0f2:	6825      	ldr	r5, [r4, #0]
 800c0f4:	1d18      	adds	r0, r3, #4
 800c0f6:	6008      	str	r0, [r1, #0]
 800c0f8:	0628      	lsls	r0, r5, #24
 800c0fa:	d501      	bpl.n	800c100 <_printf_i+0xec>
 800c0fc:	681d      	ldr	r5, [r3, #0]
 800c0fe:	e002      	b.n	800c106 <_printf_i+0xf2>
 800c100:	0669      	lsls	r1, r5, #25
 800c102:	d5fb      	bpl.n	800c0fc <_printf_i+0xe8>
 800c104:	881d      	ldrh	r5, [r3, #0]
 800c106:	2f6f      	cmp	r7, #111	; 0x6f
 800c108:	bf0c      	ite	eq
 800c10a:	2308      	moveq	r3, #8
 800c10c:	230a      	movne	r3, #10
 800c10e:	4852      	ldr	r0, [pc, #328]	; (800c258 <_printf_i+0x244>)
 800c110:	2100      	movs	r1, #0
 800c112:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c116:	6866      	ldr	r6, [r4, #4]
 800c118:	2e00      	cmp	r6, #0
 800c11a:	bfa8      	it	ge
 800c11c:	6821      	ldrge	r1, [r4, #0]
 800c11e:	60a6      	str	r6, [r4, #8]
 800c120:	bfa4      	itt	ge
 800c122:	f021 0104 	bicge.w	r1, r1, #4
 800c126:	6021      	strge	r1, [r4, #0]
 800c128:	b90d      	cbnz	r5, 800c12e <_printf_i+0x11a>
 800c12a:	2e00      	cmp	r6, #0
 800c12c:	d04d      	beq.n	800c1ca <_printf_i+0x1b6>
 800c12e:	4616      	mov	r6, r2
 800c130:	fbb5 f1f3 	udiv	r1, r5, r3
 800c134:	fb03 5711 	mls	r7, r3, r1, r5
 800c138:	5dc7      	ldrb	r7, [r0, r7]
 800c13a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c13e:	462f      	mov	r7, r5
 800c140:	42bb      	cmp	r3, r7
 800c142:	460d      	mov	r5, r1
 800c144:	d9f4      	bls.n	800c130 <_printf_i+0x11c>
 800c146:	2b08      	cmp	r3, #8
 800c148:	d10b      	bne.n	800c162 <_printf_i+0x14e>
 800c14a:	6823      	ldr	r3, [r4, #0]
 800c14c:	07df      	lsls	r7, r3, #31
 800c14e:	d508      	bpl.n	800c162 <_printf_i+0x14e>
 800c150:	6923      	ldr	r3, [r4, #16]
 800c152:	6861      	ldr	r1, [r4, #4]
 800c154:	4299      	cmp	r1, r3
 800c156:	bfde      	ittt	le
 800c158:	2330      	movle	r3, #48	; 0x30
 800c15a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c15e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c162:	1b92      	subs	r2, r2, r6
 800c164:	6122      	str	r2, [r4, #16]
 800c166:	464b      	mov	r3, r9
 800c168:	4621      	mov	r1, r4
 800c16a:	4640      	mov	r0, r8
 800c16c:	f8cd a000 	str.w	sl, [sp]
 800c170:	aa03      	add	r2, sp, #12
 800c172:	f7ff fedf 	bl	800bf34 <_printf_common>
 800c176:	3001      	adds	r0, #1
 800c178:	d14c      	bne.n	800c214 <_printf_i+0x200>
 800c17a:	f04f 30ff 	mov.w	r0, #4294967295
 800c17e:	b004      	add	sp, #16
 800c180:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c184:	4834      	ldr	r0, [pc, #208]	; (800c258 <_printf_i+0x244>)
 800c186:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c18a:	680e      	ldr	r6, [r1, #0]
 800c18c:	6823      	ldr	r3, [r4, #0]
 800c18e:	f856 5b04 	ldr.w	r5, [r6], #4
 800c192:	061f      	lsls	r7, r3, #24
 800c194:	600e      	str	r6, [r1, #0]
 800c196:	d514      	bpl.n	800c1c2 <_printf_i+0x1ae>
 800c198:	07d9      	lsls	r1, r3, #31
 800c19a:	bf44      	itt	mi
 800c19c:	f043 0320 	orrmi.w	r3, r3, #32
 800c1a0:	6023      	strmi	r3, [r4, #0]
 800c1a2:	b91d      	cbnz	r5, 800c1ac <_printf_i+0x198>
 800c1a4:	6823      	ldr	r3, [r4, #0]
 800c1a6:	f023 0320 	bic.w	r3, r3, #32
 800c1aa:	6023      	str	r3, [r4, #0]
 800c1ac:	2310      	movs	r3, #16
 800c1ae:	e7af      	b.n	800c110 <_printf_i+0xfc>
 800c1b0:	6823      	ldr	r3, [r4, #0]
 800c1b2:	f043 0320 	orr.w	r3, r3, #32
 800c1b6:	6023      	str	r3, [r4, #0]
 800c1b8:	2378      	movs	r3, #120	; 0x78
 800c1ba:	4828      	ldr	r0, [pc, #160]	; (800c25c <_printf_i+0x248>)
 800c1bc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c1c0:	e7e3      	b.n	800c18a <_printf_i+0x176>
 800c1c2:	065e      	lsls	r6, r3, #25
 800c1c4:	bf48      	it	mi
 800c1c6:	b2ad      	uxthmi	r5, r5
 800c1c8:	e7e6      	b.n	800c198 <_printf_i+0x184>
 800c1ca:	4616      	mov	r6, r2
 800c1cc:	e7bb      	b.n	800c146 <_printf_i+0x132>
 800c1ce:	680b      	ldr	r3, [r1, #0]
 800c1d0:	6826      	ldr	r6, [r4, #0]
 800c1d2:	1d1d      	adds	r5, r3, #4
 800c1d4:	6960      	ldr	r0, [r4, #20]
 800c1d6:	600d      	str	r5, [r1, #0]
 800c1d8:	0635      	lsls	r5, r6, #24
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	d501      	bpl.n	800c1e2 <_printf_i+0x1ce>
 800c1de:	6018      	str	r0, [r3, #0]
 800c1e0:	e002      	b.n	800c1e8 <_printf_i+0x1d4>
 800c1e2:	0671      	lsls	r1, r6, #25
 800c1e4:	d5fb      	bpl.n	800c1de <_printf_i+0x1ca>
 800c1e6:	8018      	strh	r0, [r3, #0]
 800c1e8:	2300      	movs	r3, #0
 800c1ea:	4616      	mov	r6, r2
 800c1ec:	6123      	str	r3, [r4, #16]
 800c1ee:	e7ba      	b.n	800c166 <_printf_i+0x152>
 800c1f0:	680b      	ldr	r3, [r1, #0]
 800c1f2:	1d1a      	adds	r2, r3, #4
 800c1f4:	600a      	str	r2, [r1, #0]
 800c1f6:	681e      	ldr	r6, [r3, #0]
 800c1f8:	2100      	movs	r1, #0
 800c1fa:	4630      	mov	r0, r6
 800c1fc:	6862      	ldr	r2, [r4, #4]
 800c1fe:	f002 faaa 	bl	800e756 <memchr>
 800c202:	b108      	cbz	r0, 800c208 <_printf_i+0x1f4>
 800c204:	1b80      	subs	r0, r0, r6
 800c206:	6060      	str	r0, [r4, #4]
 800c208:	6863      	ldr	r3, [r4, #4]
 800c20a:	6123      	str	r3, [r4, #16]
 800c20c:	2300      	movs	r3, #0
 800c20e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c212:	e7a8      	b.n	800c166 <_printf_i+0x152>
 800c214:	4632      	mov	r2, r6
 800c216:	4649      	mov	r1, r9
 800c218:	4640      	mov	r0, r8
 800c21a:	6923      	ldr	r3, [r4, #16]
 800c21c:	47d0      	blx	sl
 800c21e:	3001      	adds	r0, #1
 800c220:	d0ab      	beq.n	800c17a <_printf_i+0x166>
 800c222:	6823      	ldr	r3, [r4, #0]
 800c224:	079b      	lsls	r3, r3, #30
 800c226:	d413      	bmi.n	800c250 <_printf_i+0x23c>
 800c228:	68e0      	ldr	r0, [r4, #12]
 800c22a:	9b03      	ldr	r3, [sp, #12]
 800c22c:	4298      	cmp	r0, r3
 800c22e:	bfb8      	it	lt
 800c230:	4618      	movlt	r0, r3
 800c232:	e7a4      	b.n	800c17e <_printf_i+0x16a>
 800c234:	2301      	movs	r3, #1
 800c236:	4632      	mov	r2, r6
 800c238:	4649      	mov	r1, r9
 800c23a:	4640      	mov	r0, r8
 800c23c:	47d0      	blx	sl
 800c23e:	3001      	adds	r0, #1
 800c240:	d09b      	beq.n	800c17a <_printf_i+0x166>
 800c242:	3501      	adds	r5, #1
 800c244:	68e3      	ldr	r3, [r4, #12]
 800c246:	9903      	ldr	r1, [sp, #12]
 800c248:	1a5b      	subs	r3, r3, r1
 800c24a:	42ab      	cmp	r3, r5
 800c24c:	dcf2      	bgt.n	800c234 <_printf_i+0x220>
 800c24e:	e7eb      	b.n	800c228 <_printf_i+0x214>
 800c250:	2500      	movs	r5, #0
 800c252:	f104 0619 	add.w	r6, r4, #25
 800c256:	e7f5      	b.n	800c244 <_printf_i+0x230>
 800c258:	08010fba 	.word	0x08010fba
 800c25c:	08010fcb 	.word	0x08010fcb

0800c260 <iprintf>:
 800c260:	b40f      	push	{r0, r1, r2, r3}
 800c262:	4b0a      	ldr	r3, [pc, #40]	; (800c28c <iprintf+0x2c>)
 800c264:	b513      	push	{r0, r1, r4, lr}
 800c266:	681c      	ldr	r4, [r3, #0]
 800c268:	b124      	cbz	r4, 800c274 <iprintf+0x14>
 800c26a:	69a3      	ldr	r3, [r4, #24]
 800c26c:	b913      	cbnz	r3, 800c274 <iprintf+0x14>
 800c26e:	4620      	mov	r0, r4
 800c270:	f001 fe54 	bl	800df1c <__sinit>
 800c274:	ab05      	add	r3, sp, #20
 800c276:	4620      	mov	r0, r4
 800c278:	9a04      	ldr	r2, [sp, #16]
 800c27a:	68a1      	ldr	r1, [r4, #8]
 800c27c:	9301      	str	r3, [sp, #4]
 800c27e:	f003 f8dd 	bl	800f43c <_vfiprintf_r>
 800c282:	b002      	add	sp, #8
 800c284:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c288:	b004      	add	sp, #16
 800c28a:	4770      	bx	lr
 800c28c:	2000001c 	.word	0x2000001c

0800c290 <_sbrk_r>:
 800c290:	b538      	push	{r3, r4, r5, lr}
 800c292:	2300      	movs	r3, #0
 800c294:	4d05      	ldr	r5, [pc, #20]	; (800c2ac <_sbrk_r+0x1c>)
 800c296:	4604      	mov	r4, r0
 800c298:	4608      	mov	r0, r1
 800c29a:	602b      	str	r3, [r5, #0]
 800c29c:	f7f6 fbea 	bl	8002a74 <_sbrk>
 800c2a0:	1c43      	adds	r3, r0, #1
 800c2a2:	d102      	bne.n	800c2aa <_sbrk_r+0x1a>
 800c2a4:	682b      	ldr	r3, [r5, #0]
 800c2a6:	b103      	cbz	r3, 800c2aa <_sbrk_r+0x1a>
 800c2a8:	6023      	str	r3, [r4, #0]
 800c2aa:	bd38      	pop	{r3, r4, r5, pc}
 800c2ac:	20000c34 	.word	0x20000c34

0800c2b0 <sniprintf>:
 800c2b0:	b40c      	push	{r2, r3}
 800c2b2:	b530      	push	{r4, r5, lr}
 800c2b4:	4b17      	ldr	r3, [pc, #92]	; (800c314 <sniprintf+0x64>)
 800c2b6:	1e0c      	subs	r4, r1, #0
 800c2b8:	681d      	ldr	r5, [r3, #0]
 800c2ba:	b09d      	sub	sp, #116	; 0x74
 800c2bc:	da08      	bge.n	800c2d0 <sniprintf+0x20>
 800c2be:	238b      	movs	r3, #139	; 0x8b
 800c2c0:	f04f 30ff 	mov.w	r0, #4294967295
 800c2c4:	602b      	str	r3, [r5, #0]
 800c2c6:	b01d      	add	sp, #116	; 0x74
 800c2c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c2cc:	b002      	add	sp, #8
 800c2ce:	4770      	bx	lr
 800c2d0:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c2d4:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c2d8:	bf0c      	ite	eq
 800c2da:	4623      	moveq	r3, r4
 800c2dc:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c2e0:	9304      	str	r3, [sp, #16]
 800c2e2:	9307      	str	r3, [sp, #28]
 800c2e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c2e8:	9002      	str	r0, [sp, #8]
 800c2ea:	9006      	str	r0, [sp, #24]
 800c2ec:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c2f0:	4628      	mov	r0, r5
 800c2f2:	ab21      	add	r3, sp, #132	; 0x84
 800c2f4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c2f6:	a902      	add	r1, sp, #8
 800c2f8:	9301      	str	r3, [sp, #4]
 800c2fa:	f002 ff77 	bl	800f1ec <_svfiprintf_r>
 800c2fe:	1c43      	adds	r3, r0, #1
 800c300:	bfbc      	itt	lt
 800c302:	238b      	movlt	r3, #139	; 0x8b
 800c304:	602b      	strlt	r3, [r5, #0]
 800c306:	2c00      	cmp	r4, #0
 800c308:	d0dd      	beq.n	800c2c6 <sniprintf+0x16>
 800c30a:	2200      	movs	r2, #0
 800c30c:	9b02      	ldr	r3, [sp, #8]
 800c30e:	701a      	strb	r2, [r3, #0]
 800c310:	e7d9      	b.n	800c2c6 <sniprintf+0x16>
 800c312:	bf00      	nop
 800c314:	2000001c 	.word	0x2000001c

0800c318 <siprintf>:
 800c318:	b40e      	push	{r1, r2, r3}
 800c31a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c31e:	b500      	push	{lr}
 800c320:	b09c      	sub	sp, #112	; 0x70
 800c322:	ab1d      	add	r3, sp, #116	; 0x74
 800c324:	9002      	str	r0, [sp, #8]
 800c326:	9006      	str	r0, [sp, #24]
 800c328:	9107      	str	r1, [sp, #28]
 800c32a:	9104      	str	r1, [sp, #16]
 800c32c:	4808      	ldr	r0, [pc, #32]	; (800c350 <siprintf+0x38>)
 800c32e:	4909      	ldr	r1, [pc, #36]	; (800c354 <siprintf+0x3c>)
 800c330:	f853 2b04 	ldr.w	r2, [r3], #4
 800c334:	9105      	str	r1, [sp, #20]
 800c336:	6800      	ldr	r0, [r0, #0]
 800c338:	a902      	add	r1, sp, #8
 800c33a:	9301      	str	r3, [sp, #4]
 800c33c:	f002 ff56 	bl	800f1ec <_svfiprintf_r>
 800c340:	2200      	movs	r2, #0
 800c342:	9b02      	ldr	r3, [sp, #8]
 800c344:	701a      	strb	r2, [r3, #0]
 800c346:	b01c      	add	sp, #112	; 0x70
 800c348:	f85d eb04 	ldr.w	lr, [sp], #4
 800c34c:	b003      	add	sp, #12
 800c34e:	4770      	bx	lr
 800c350:	2000001c 	.word	0x2000001c
 800c354:	ffff0208 	.word	0xffff0208

0800c358 <strncpy>:
 800c358:	4603      	mov	r3, r0
 800c35a:	b510      	push	{r4, lr}
 800c35c:	3901      	subs	r1, #1
 800c35e:	b132      	cbz	r2, 800c36e <strncpy+0x16>
 800c360:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c364:	3a01      	subs	r2, #1
 800c366:	f803 4b01 	strb.w	r4, [r3], #1
 800c36a:	2c00      	cmp	r4, #0
 800c36c:	d1f7      	bne.n	800c35e <strncpy+0x6>
 800c36e:	2100      	movs	r1, #0
 800c370:	441a      	add	r2, r3
 800c372:	4293      	cmp	r3, r2
 800c374:	d100      	bne.n	800c378 <strncpy+0x20>
 800c376:	bd10      	pop	{r4, pc}
 800c378:	f803 1b01 	strb.w	r1, [r3], #1
 800c37c:	e7f9      	b.n	800c372 <strncpy+0x1a>

0800c37e <strnlen>:
 800c37e:	4602      	mov	r2, r0
 800c380:	b510      	push	{r4, lr}
 800c382:	4401      	add	r1, r0
 800c384:	428a      	cmp	r2, r1
 800c386:	4613      	mov	r3, r2
 800c388:	d101      	bne.n	800c38e <strnlen+0x10>
 800c38a:	1a18      	subs	r0, r3, r0
 800c38c:	bd10      	pop	{r4, pc}
 800c38e:	781c      	ldrb	r4, [r3, #0]
 800c390:	3201      	adds	r2, #1
 800c392:	2c00      	cmp	r4, #0
 800c394:	d1f6      	bne.n	800c384 <strnlen+0x6>
 800c396:	e7f8      	b.n	800c38a <strnlen+0xc>

0800c398 <sulp>:
 800c398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c39c:	460f      	mov	r7, r1
 800c39e:	4690      	mov	r8, r2
 800c3a0:	f002 fd72 	bl	800ee88 <__ulp>
 800c3a4:	4604      	mov	r4, r0
 800c3a6:	460d      	mov	r5, r1
 800c3a8:	f1b8 0f00 	cmp.w	r8, #0
 800c3ac:	d011      	beq.n	800c3d2 <sulp+0x3a>
 800c3ae:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800c3b2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	dd0b      	ble.n	800c3d2 <sulp+0x3a>
 800c3ba:	2400      	movs	r4, #0
 800c3bc:	051b      	lsls	r3, r3, #20
 800c3be:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800c3c2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800c3c6:	4622      	mov	r2, r4
 800c3c8:	462b      	mov	r3, r5
 800c3ca:	f7f4 f8f1 	bl	80005b0 <__aeabi_dmul>
 800c3ce:	4604      	mov	r4, r0
 800c3d0:	460d      	mov	r5, r1
 800c3d2:	4620      	mov	r0, r4
 800c3d4:	4629      	mov	r1, r5
 800c3d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3da:	0000      	movs	r0, r0
 800c3dc:	0000      	movs	r0, r0
	...

0800c3e0 <_strtod_l>:
 800c3e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3e4:	469b      	mov	fp, r3
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	b0a1      	sub	sp, #132	; 0x84
 800c3ea:	931c      	str	r3, [sp, #112]	; 0x70
 800c3ec:	4ba1      	ldr	r3, [pc, #644]	; (800c674 <_strtod_l+0x294>)
 800c3ee:	4682      	mov	sl, r0
 800c3f0:	681f      	ldr	r7, [r3, #0]
 800c3f2:	460e      	mov	r6, r1
 800c3f4:	4638      	mov	r0, r7
 800c3f6:	9217      	str	r2, [sp, #92]	; 0x5c
 800c3f8:	f7f3 ff16 	bl	8000228 <strlen>
 800c3fc:	f04f 0800 	mov.w	r8, #0
 800c400:	4604      	mov	r4, r0
 800c402:	f04f 0900 	mov.w	r9, #0
 800c406:	961b      	str	r6, [sp, #108]	; 0x6c
 800c408:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c40a:	781a      	ldrb	r2, [r3, #0]
 800c40c:	2a2b      	cmp	r2, #43	; 0x2b
 800c40e:	d04c      	beq.n	800c4aa <_strtod_l+0xca>
 800c410:	d83a      	bhi.n	800c488 <_strtod_l+0xa8>
 800c412:	2a0d      	cmp	r2, #13
 800c414:	d833      	bhi.n	800c47e <_strtod_l+0x9e>
 800c416:	2a08      	cmp	r2, #8
 800c418:	d833      	bhi.n	800c482 <_strtod_l+0xa2>
 800c41a:	2a00      	cmp	r2, #0
 800c41c:	d03d      	beq.n	800c49a <_strtod_l+0xba>
 800c41e:	2300      	movs	r3, #0
 800c420:	930c      	str	r3, [sp, #48]	; 0x30
 800c422:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800c424:	782b      	ldrb	r3, [r5, #0]
 800c426:	2b30      	cmp	r3, #48	; 0x30
 800c428:	f040 80af 	bne.w	800c58a <_strtod_l+0x1aa>
 800c42c:	786b      	ldrb	r3, [r5, #1]
 800c42e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c432:	2b58      	cmp	r3, #88	; 0x58
 800c434:	d16c      	bne.n	800c510 <_strtod_l+0x130>
 800c436:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c438:	4650      	mov	r0, sl
 800c43a:	9301      	str	r3, [sp, #4]
 800c43c:	ab1c      	add	r3, sp, #112	; 0x70
 800c43e:	9300      	str	r3, [sp, #0]
 800c440:	4a8d      	ldr	r2, [pc, #564]	; (800c678 <_strtod_l+0x298>)
 800c442:	f8cd b008 	str.w	fp, [sp, #8]
 800c446:	ab1d      	add	r3, sp, #116	; 0x74
 800c448:	a91b      	add	r1, sp, #108	; 0x6c
 800c44a:	f001 fe6d 	bl	800e128 <__gethex>
 800c44e:	f010 0607 	ands.w	r6, r0, #7
 800c452:	4604      	mov	r4, r0
 800c454:	d005      	beq.n	800c462 <_strtod_l+0x82>
 800c456:	2e06      	cmp	r6, #6
 800c458:	d129      	bne.n	800c4ae <_strtod_l+0xce>
 800c45a:	2300      	movs	r3, #0
 800c45c:	3501      	adds	r5, #1
 800c45e:	951b      	str	r5, [sp, #108]	; 0x6c
 800c460:	930c      	str	r3, [sp, #48]	; 0x30
 800c462:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c464:	2b00      	cmp	r3, #0
 800c466:	f040 8596 	bne.w	800cf96 <_strtod_l+0xbb6>
 800c46a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c46c:	b1d3      	cbz	r3, 800c4a4 <_strtod_l+0xc4>
 800c46e:	4642      	mov	r2, r8
 800c470:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c474:	4610      	mov	r0, r2
 800c476:	4619      	mov	r1, r3
 800c478:	b021      	add	sp, #132	; 0x84
 800c47a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c47e:	2a20      	cmp	r2, #32
 800c480:	d1cd      	bne.n	800c41e <_strtod_l+0x3e>
 800c482:	3301      	adds	r3, #1
 800c484:	931b      	str	r3, [sp, #108]	; 0x6c
 800c486:	e7bf      	b.n	800c408 <_strtod_l+0x28>
 800c488:	2a2d      	cmp	r2, #45	; 0x2d
 800c48a:	d1c8      	bne.n	800c41e <_strtod_l+0x3e>
 800c48c:	2201      	movs	r2, #1
 800c48e:	920c      	str	r2, [sp, #48]	; 0x30
 800c490:	1c5a      	adds	r2, r3, #1
 800c492:	921b      	str	r2, [sp, #108]	; 0x6c
 800c494:	785b      	ldrb	r3, [r3, #1]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d1c3      	bne.n	800c422 <_strtod_l+0x42>
 800c49a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c49c:	961b      	str	r6, [sp, #108]	; 0x6c
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	f040 8577 	bne.w	800cf92 <_strtod_l+0xbb2>
 800c4a4:	4642      	mov	r2, r8
 800c4a6:	464b      	mov	r3, r9
 800c4a8:	e7e4      	b.n	800c474 <_strtod_l+0x94>
 800c4aa:	2200      	movs	r2, #0
 800c4ac:	e7ef      	b.n	800c48e <_strtod_l+0xae>
 800c4ae:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c4b0:	b13a      	cbz	r2, 800c4c2 <_strtod_l+0xe2>
 800c4b2:	2135      	movs	r1, #53	; 0x35
 800c4b4:	a81e      	add	r0, sp, #120	; 0x78
 800c4b6:	f002 fdeb 	bl	800f090 <__copybits>
 800c4ba:	4650      	mov	r0, sl
 800c4bc:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c4be:	f002 f9b3 	bl	800e828 <_Bfree>
 800c4c2:	3e01      	subs	r6, #1
 800c4c4:	2e05      	cmp	r6, #5
 800c4c6:	d807      	bhi.n	800c4d8 <_strtod_l+0xf8>
 800c4c8:	e8df f006 	tbb	[pc, r6]
 800c4cc:	1d180b0e 	.word	0x1d180b0e
 800c4d0:	030e      	.short	0x030e
 800c4d2:	f04f 0900 	mov.w	r9, #0
 800c4d6:	46c8      	mov	r8, r9
 800c4d8:	0721      	lsls	r1, r4, #28
 800c4da:	d5c2      	bpl.n	800c462 <_strtod_l+0x82>
 800c4dc:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800c4e0:	e7bf      	b.n	800c462 <_strtod_l+0x82>
 800c4e2:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 800c4e6:	e7f7      	b.n	800c4d8 <_strtod_l+0xf8>
 800c4e8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800c4ea:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 800c4ee:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c4f2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c4f6:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800c4fa:	e7ed      	b.n	800c4d8 <_strtod_l+0xf8>
 800c4fc:	f04f 0800 	mov.w	r8, #0
 800c500:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800c67c <_strtod_l+0x29c>
 800c504:	e7e8      	b.n	800c4d8 <_strtod_l+0xf8>
 800c506:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800c50a:	f04f 38ff 	mov.w	r8, #4294967295
 800c50e:	e7e3      	b.n	800c4d8 <_strtod_l+0xf8>
 800c510:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c512:	1c5a      	adds	r2, r3, #1
 800c514:	921b      	str	r2, [sp, #108]	; 0x6c
 800c516:	785b      	ldrb	r3, [r3, #1]
 800c518:	2b30      	cmp	r3, #48	; 0x30
 800c51a:	d0f9      	beq.n	800c510 <_strtod_l+0x130>
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d0a0      	beq.n	800c462 <_strtod_l+0x82>
 800c520:	2301      	movs	r3, #1
 800c522:	9307      	str	r3, [sp, #28]
 800c524:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c526:	220a      	movs	r2, #10
 800c528:	9308      	str	r3, [sp, #32]
 800c52a:	2300      	movs	r3, #0
 800c52c:	469b      	mov	fp, r3
 800c52e:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800c532:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800c534:	7805      	ldrb	r5, [r0, #0]
 800c536:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800c53a:	b2d9      	uxtb	r1, r3
 800c53c:	2909      	cmp	r1, #9
 800c53e:	d926      	bls.n	800c58e <_strtod_l+0x1ae>
 800c540:	4622      	mov	r2, r4
 800c542:	4639      	mov	r1, r7
 800c544:	f003 f8f3 	bl	800f72e <strncmp>
 800c548:	2800      	cmp	r0, #0
 800c54a:	d032      	beq.n	800c5b2 <_strtod_l+0x1d2>
 800c54c:	2000      	movs	r0, #0
 800c54e:	462b      	mov	r3, r5
 800c550:	465c      	mov	r4, fp
 800c552:	4602      	mov	r2, r0
 800c554:	9004      	str	r0, [sp, #16]
 800c556:	2b65      	cmp	r3, #101	; 0x65
 800c558:	d001      	beq.n	800c55e <_strtod_l+0x17e>
 800c55a:	2b45      	cmp	r3, #69	; 0x45
 800c55c:	d113      	bne.n	800c586 <_strtod_l+0x1a6>
 800c55e:	b91c      	cbnz	r4, 800c568 <_strtod_l+0x188>
 800c560:	9b07      	ldr	r3, [sp, #28]
 800c562:	4303      	orrs	r3, r0
 800c564:	d099      	beq.n	800c49a <_strtod_l+0xba>
 800c566:	2400      	movs	r4, #0
 800c568:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800c56a:	1c73      	adds	r3, r6, #1
 800c56c:	931b      	str	r3, [sp, #108]	; 0x6c
 800c56e:	7873      	ldrb	r3, [r6, #1]
 800c570:	2b2b      	cmp	r3, #43	; 0x2b
 800c572:	d078      	beq.n	800c666 <_strtod_l+0x286>
 800c574:	2b2d      	cmp	r3, #45	; 0x2d
 800c576:	d07b      	beq.n	800c670 <_strtod_l+0x290>
 800c578:	2700      	movs	r7, #0
 800c57a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800c57e:	2909      	cmp	r1, #9
 800c580:	f240 8082 	bls.w	800c688 <_strtod_l+0x2a8>
 800c584:	961b      	str	r6, [sp, #108]	; 0x6c
 800c586:	2500      	movs	r5, #0
 800c588:	e09e      	b.n	800c6c8 <_strtod_l+0x2e8>
 800c58a:	2300      	movs	r3, #0
 800c58c:	e7c9      	b.n	800c522 <_strtod_l+0x142>
 800c58e:	f1bb 0f08 	cmp.w	fp, #8
 800c592:	bfd5      	itete	le
 800c594:	9906      	ldrle	r1, [sp, #24]
 800c596:	9905      	ldrgt	r1, [sp, #20]
 800c598:	fb02 3301 	mlale	r3, r2, r1, r3
 800c59c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800c5a0:	f100 0001 	add.w	r0, r0, #1
 800c5a4:	bfd4      	ite	le
 800c5a6:	9306      	strle	r3, [sp, #24]
 800c5a8:	9305      	strgt	r3, [sp, #20]
 800c5aa:	f10b 0b01 	add.w	fp, fp, #1
 800c5ae:	901b      	str	r0, [sp, #108]	; 0x6c
 800c5b0:	e7bf      	b.n	800c532 <_strtod_l+0x152>
 800c5b2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c5b4:	191a      	adds	r2, r3, r4
 800c5b6:	921b      	str	r2, [sp, #108]	; 0x6c
 800c5b8:	5d1b      	ldrb	r3, [r3, r4]
 800c5ba:	f1bb 0f00 	cmp.w	fp, #0
 800c5be:	d036      	beq.n	800c62e <_strtod_l+0x24e>
 800c5c0:	465c      	mov	r4, fp
 800c5c2:	9004      	str	r0, [sp, #16]
 800c5c4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800c5c8:	2a09      	cmp	r2, #9
 800c5ca:	d912      	bls.n	800c5f2 <_strtod_l+0x212>
 800c5cc:	2201      	movs	r2, #1
 800c5ce:	e7c2      	b.n	800c556 <_strtod_l+0x176>
 800c5d0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c5d2:	3001      	adds	r0, #1
 800c5d4:	1c5a      	adds	r2, r3, #1
 800c5d6:	921b      	str	r2, [sp, #108]	; 0x6c
 800c5d8:	785b      	ldrb	r3, [r3, #1]
 800c5da:	2b30      	cmp	r3, #48	; 0x30
 800c5dc:	d0f8      	beq.n	800c5d0 <_strtod_l+0x1f0>
 800c5de:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800c5e2:	2a08      	cmp	r2, #8
 800c5e4:	f200 84dc 	bhi.w	800cfa0 <_strtod_l+0xbc0>
 800c5e8:	9004      	str	r0, [sp, #16]
 800c5ea:	2000      	movs	r0, #0
 800c5ec:	4604      	mov	r4, r0
 800c5ee:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800c5f0:	9208      	str	r2, [sp, #32]
 800c5f2:	3b30      	subs	r3, #48	; 0x30
 800c5f4:	f100 0201 	add.w	r2, r0, #1
 800c5f8:	d013      	beq.n	800c622 <_strtod_l+0x242>
 800c5fa:	9904      	ldr	r1, [sp, #16]
 800c5fc:	1905      	adds	r5, r0, r4
 800c5fe:	4411      	add	r1, r2
 800c600:	9104      	str	r1, [sp, #16]
 800c602:	4622      	mov	r2, r4
 800c604:	210a      	movs	r1, #10
 800c606:	42aa      	cmp	r2, r5
 800c608:	d113      	bne.n	800c632 <_strtod_l+0x252>
 800c60a:	1822      	adds	r2, r4, r0
 800c60c:	2a08      	cmp	r2, #8
 800c60e:	f104 0401 	add.w	r4, r4, #1
 800c612:	4404      	add	r4, r0
 800c614:	dc1b      	bgt.n	800c64e <_strtod_l+0x26e>
 800c616:	220a      	movs	r2, #10
 800c618:	9906      	ldr	r1, [sp, #24]
 800c61a:	fb02 3301 	mla	r3, r2, r1, r3
 800c61e:	9306      	str	r3, [sp, #24]
 800c620:	2200      	movs	r2, #0
 800c622:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c624:	4610      	mov	r0, r2
 800c626:	1c59      	adds	r1, r3, #1
 800c628:	911b      	str	r1, [sp, #108]	; 0x6c
 800c62a:	785b      	ldrb	r3, [r3, #1]
 800c62c:	e7ca      	b.n	800c5c4 <_strtod_l+0x1e4>
 800c62e:	4658      	mov	r0, fp
 800c630:	e7d3      	b.n	800c5da <_strtod_l+0x1fa>
 800c632:	2a08      	cmp	r2, #8
 800c634:	dc04      	bgt.n	800c640 <_strtod_l+0x260>
 800c636:	9f06      	ldr	r7, [sp, #24]
 800c638:	434f      	muls	r7, r1
 800c63a:	9706      	str	r7, [sp, #24]
 800c63c:	3201      	adds	r2, #1
 800c63e:	e7e2      	b.n	800c606 <_strtod_l+0x226>
 800c640:	1c57      	adds	r7, r2, #1
 800c642:	2f10      	cmp	r7, #16
 800c644:	bfde      	ittt	le
 800c646:	9f05      	ldrle	r7, [sp, #20]
 800c648:	434f      	mulle	r7, r1
 800c64a:	9705      	strle	r7, [sp, #20]
 800c64c:	e7f6      	b.n	800c63c <_strtod_l+0x25c>
 800c64e:	2c10      	cmp	r4, #16
 800c650:	bfdf      	itttt	le
 800c652:	220a      	movle	r2, #10
 800c654:	9905      	ldrle	r1, [sp, #20]
 800c656:	fb02 3301 	mlale	r3, r2, r1, r3
 800c65a:	9305      	strle	r3, [sp, #20]
 800c65c:	e7e0      	b.n	800c620 <_strtod_l+0x240>
 800c65e:	2300      	movs	r3, #0
 800c660:	2201      	movs	r2, #1
 800c662:	9304      	str	r3, [sp, #16]
 800c664:	e77c      	b.n	800c560 <_strtod_l+0x180>
 800c666:	2700      	movs	r7, #0
 800c668:	1cb3      	adds	r3, r6, #2
 800c66a:	931b      	str	r3, [sp, #108]	; 0x6c
 800c66c:	78b3      	ldrb	r3, [r6, #2]
 800c66e:	e784      	b.n	800c57a <_strtod_l+0x19a>
 800c670:	2701      	movs	r7, #1
 800c672:	e7f9      	b.n	800c668 <_strtod_l+0x288>
 800c674:	08011294 	.word	0x08011294
 800c678:	08010fdc 	.word	0x08010fdc
 800c67c:	7ff00000 	.word	0x7ff00000
 800c680:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c682:	1c59      	adds	r1, r3, #1
 800c684:	911b      	str	r1, [sp, #108]	; 0x6c
 800c686:	785b      	ldrb	r3, [r3, #1]
 800c688:	2b30      	cmp	r3, #48	; 0x30
 800c68a:	d0f9      	beq.n	800c680 <_strtod_l+0x2a0>
 800c68c:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800c690:	2908      	cmp	r1, #8
 800c692:	f63f af78 	bhi.w	800c586 <_strtod_l+0x1a6>
 800c696:	f04f 0e0a 	mov.w	lr, #10
 800c69a:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 800c69e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c6a0:	9309      	str	r3, [sp, #36]	; 0x24
 800c6a2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c6a4:	1c59      	adds	r1, r3, #1
 800c6a6:	911b      	str	r1, [sp, #108]	; 0x6c
 800c6a8:	785b      	ldrb	r3, [r3, #1]
 800c6aa:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 800c6ae:	2d09      	cmp	r5, #9
 800c6b0:	d935      	bls.n	800c71e <_strtod_l+0x33e>
 800c6b2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c6b4:	1b49      	subs	r1, r1, r5
 800c6b6:	2908      	cmp	r1, #8
 800c6b8:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800c6bc:	dc02      	bgt.n	800c6c4 <_strtod_l+0x2e4>
 800c6be:	4565      	cmp	r5, ip
 800c6c0:	bfa8      	it	ge
 800c6c2:	4665      	movge	r5, ip
 800c6c4:	b107      	cbz	r7, 800c6c8 <_strtod_l+0x2e8>
 800c6c6:	426d      	negs	r5, r5
 800c6c8:	2c00      	cmp	r4, #0
 800c6ca:	d14c      	bne.n	800c766 <_strtod_l+0x386>
 800c6cc:	9907      	ldr	r1, [sp, #28]
 800c6ce:	4301      	orrs	r1, r0
 800c6d0:	f47f aec7 	bne.w	800c462 <_strtod_l+0x82>
 800c6d4:	2a00      	cmp	r2, #0
 800c6d6:	f47f aee0 	bne.w	800c49a <_strtod_l+0xba>
 800c6da:	2b69      	cmp	r3, #105	; 0x69
 800c6dc:	d026      	beq.n	800c72c <_strtod_l+0x34c>
 800c6de:	dc23      	bgt.n	800c728 <_strtod_l+0x348>
 800c6e0:	2b49      	cmp	r3, #73	; 0x49
 800c6e2:	d023      	beq.n	800c72c <_strtod_l+0x34c>
 800c6e4:	2b4e      	cmp	r3, #78	; 0x4e
 800c6e6:	f47f aed8 	bne.w	800c49a <_strtod_l+0xba>
 800c6ea:	499c      	ldr	r1, [pc, #624]	; (800c95c <_strtod_l+0x57c>)
 800c6ec:	a81b      	add	r0, sp, #108	; 0x6c
 800c6ee:	f001 ff69 	bl	800e5c4 <__match>
 800c6f2:	2800      	cmp	r0, #0
 800c6f4:	f43f aed1 	beq.w	800c49a <_strtod_l+0xba>
 800c6f8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c6fa:	781b      	ldrb	r3, [r3, #0]
 800c6fc:	2b28      	cmp	r3, #40	; 0x28
 800c6fe:	d12c      	bne.n	800c75a <_strtod_l+0x37a>
 800c700:	4997      	ldr	r1, [pc, #604]	; (800c960 <_strtod_l+0x580>)
 800c702:	aa1e      	add	r2, sp, #120	; 0x78
 800c704:	a81b      	add	r0, sp, #108	; 0x6c
 800c706:	f001 ff71 	bl	800e5ec <__hexnan>
 800c70a:	2805      	cmp	r0, #5
 800c70c:	d125      	bne.n	800c75a <_strtod_l+0x37a>
 800c70e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c710:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800c714:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800c718:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800c71c:	e6a1      	b.n	800c462 <_strtod_l+0x82>
 800c71e:	fb0e 3c0c 	mla	ip, lr, ip, r3
 800c722:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800c726:	e7bc      	b.n	800c6a2 <_strtod_l+0x2c2>
 800c728:	2b6e      	cmp	r3, #110	; 0x6e
 800c72a:	e7dc      	b.n	800c6e6 <_strtod_l+0x306>
 800c72c:	498d      	ldr	r1, [pc, #564]	; (800c964 <_strtod_l+0x584>)
 800c72e:	a81b      	add	r0, sp, #108	; 0x6c
 800c730:	f001 ff48 	bl	800e5c4 <__match>
 800c734:	2800      	cmp	r0, #0
 800c736:	f43f aeb0 	beq.w	800c49a <_strtod_l+0xba>
 800c73a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c73c:	498a      	ldr	r1, [pc, #552]	; (800c968 <_strtod_l+0x588>)
 800c73e:	3b01      	subs	r3, #1
 800c740:	a81b      	add	r0, sp, #108	; 0x6c
 800c742:	931b      	str	r3, [sp, #108]	; 0x6c
 800c744:	f001 ff3e 	bl	800e5c4 <__match>
 800c748:	b910      	cbnz	r0, 800c750 <_strtod_l+0x370>
 800c74a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c74c:	3301      	adds	r3, #1
 800c74e:	931b      	str	r3, [sp, #108]	; 0x6c
 800c750:	f04f 0800 	mov.w	r8, #0
 800c754:	f8df 9220 	ldr.w	r9, [pc, #544]	; 800c978 <_strtod_l+0x598>
 800c758:	e683      	b.n	800c462 <_strtod_l+0x82>
 800c75a:	4884      	ldr	r0, [pc, #528]	; (800c96c <_strtod_l+0x58c>)
 800c75c:	f002 ff9e 	bl	800f69c <nan>
 800c760:	4680      	mov	r8, r0
 800c762:	4689      	mov	r9, r1
 800c764:	e67d      	b.n	800c462 <_strtod_l+0x82>
 800c766:	9b04      	ldr	r3, [sp, #16]
 800c768:	f1bb 0f00 	cmp.w	fp, #0
 800c76c:	bf08      	it	eq
 800c76e:	46a3      	moveq	fp, r4
 800c770:	1aeb      	subs	r3, r5, r3
 800c772:	2c10      	cmp	r4, #16
 800c774:	9806      	ldr	r0, [sp, #24]
 800c776:	4626      	mov	r6, r4
 800c778:	9307      	str	r3, [sp, #28]
 800c77a:	bfa8      	it	ge
 800c77c:	2610      	movge	r6, #16
 800c77e:	f7f3 fe9d 	bl	80004bc <__aeabi_ui2d>
 800c782:	2c09      	cmp	r4, #9
 800c784:	4680      	mov	r8, r0
 800c786:	4689      	mov	r9, r1
 800c788:	dd13      	ble.n	800c7b2 <_strtod_l+0x3d2>
 800c78a:	4b79      	ldr	r3, [pc, #484]	; (800c970 <_strtod_l+0x590>)
 800c78c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c790:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800c794:	f7f3 ff0c 	bl	80005b0 <__aeabi_dmul>
 800c798:	4680      	mov	r8, r0
 800c79a:	9805      	ldr	r0, [sp, #20]
 800c79c:	4689      	mov	r9, r1
 800c79e:	f7f3 fe8d 	bl	80004bc <__aeabi_ui2d>
 800c7a2:	4602      	mov	r2, r0
 800c7a4:	460b      	mov	r3, r1
 800c7a6:	4640      	mov	r0, r8
 800c7a8:	4649      	mov	r1, r9
 800c7aa:	f7f3 fd4b 	bl	8000244 <__adddf3>
 800c7ae:	4680      	mov	r8, r0
 800c7b0:	4689      	mov	r9, r1
 800c7b2:	2c0f      	cmp	r4, #15
 800c7b4:	dc36      	bgt.n	800c824 <_strtod_l+0x444>
 800c7b6:	9b07      	ldr	r3, [sp, #28]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	f43f ae52 	beq.w	800c462 <_strtod_l+0x82>
 800c7be:	dd22      	ble.n	800c806 <_strtod_l+0x426>
 800c7c0:	2b16      	cmp	r3, #22
 800c7c2:	dc09      	bgt.n	800c7d8 <_strtod_l+0x3f8>
 800c7c4:	4c6a      	ldr	r4, [pc, #424]	; (800c970 <_strtod_l+0x590>)
 800c7c6:	4642      	mov	r2, r8
 800c7c8:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 800c7cc:	464b      	mov	r3, r9
 800c7ce:	e9d4 0100 	ldrd	r0, r1, [r4]
 800c7d2:	f7f3 feed 	bl	80005b0 <__aeabi_dmul>
 800c7d6:	e7c3      	b.n	800c760 <_strtod_l+0x380>
 800c7d8:	9a07      	ldr	r2, [sp, #28]
 800c7da:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800c7de:	4293      	cmp	r3, r2
 800c7e0:	db20      	blt.n	800c824 <_strtod_l+0x444>
 800c7e2:	4d63      	ldr	r5, [pc, #396]	; (800c970 <_strtod_l+0x590>)
 800c7e4:	f1c4 040f 	rsb	r4, r4, #15
 800c7e8:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800c7ec:	4642      	mov	r2, r8
 800c7ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c7f2:	464b      	mov	r3, r9
 800c7f4:	f7f3 fedc 	bl	80005b0 <__aeabi_dmul>
 800c7f8:	9b07      	ldr	r3, [sp, #28]
 800c7fa:	1b1c      	subs	r4, r3, r4
 800c7fc:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800c800:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c804:	e7e5      	b.n	800c7d2 <_strtod_l+0x3f2>
 800c806:	9b07      	ldr	r3, [sp, #28]
 800c808:	3316      	adds	r3, #22
 800c80a:	db0b      	blt.n	800c824 <_strtod_l+0x444>
 800c80c:	9b04      	ldr	r3, [sp, #16]
 800c80e:	4a58      	ldr	r2, [pc, #352]	; (800c970 <_strtod_l+0x590>)
 800c810:	1b5d      	subs	r5, r3, r5
 800c812:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800c816:	4640      	mov	r0, r8
 800c818:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c81c:	4649      	mov	r1, r9
 800c81e:	f7f3 fff1 	bl	8000804 <__aeabi_ddiv>
 800c822:	e79d      	b.n	800c760 <_strtod_l+0x380>
 800c824:	9b07      	ldr	r3, [sp, #28]
 800c826:	1ba6      	subs	r6, r4, r6
 800c828:	441e      	add	r6, r3
 800c82a:	2e00      	cmp	r6, #0
 800c82c:	dd71      	ble.n	800c912 <_strtod_l+0x532>
 800c82e:	f016 030f 	ands.w	r3, r6, #15
 800c832:	d00a      	beq.n	800c84a <_strtod_l+0x46a>
 800c834:	494e      	ldr	r1, [pc, #312]	; (800c970 <_strtod_l+0x590>)
 800c836:	4642      	mov	r2, r8
 800c838:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c83c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c840:	464b      	mov	r3, r9
 800c842:	f7f3 feb5 	bl	80005b0 <__aeabi_dmul>
 800c846:	4680      	mov	r8, r0
 800c848:	4689      	mov	r9, r1
 800c84a:	f036 060f 	bics.w	r6, r6, #15
 800c84e:	d050      	beq.n	800c8f2 <_strtod_l+0x512>
 800c850:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800c854:	dd27      	ble.n	800c8a6 <_strtod_l+0x4c6>
 800c856:	f04f 0b00 	mov.w	fp, #0
 800c85a:	f8cd b010 	str.w	fp, [sp, #16]
 800c85e:	f8cd b020 	str.w	fp, [sp, #32]
 800c862:	f8cd b018 	str.w	fp, [sp, #24]
 800c866:	2322      	movs	r3, #34	; 0x22
 800c868:	f04f 0800 	mov.w	r8, #0
 800c86c:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800c978 <_strtod_l+0x598>
 800c870:	f8ca 3000 	str.w	r3, [sl]
 800c874:	9b08      	ldr	r3, [sp, #32]
 800c876:	2b00      	cmp	r3, #0
 800c878:	f43f adf3 	beq.w	800c462 <_strtod_l+0x82>
 800c87c:	4650      	mov	r0, sl
 800c87e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c880:	f001 ffd2 	bl	800e828 <_Bfree>
 800c884:	4650      	mov	r0, sl
 800c886:	9906      	ldr	r1, [sp, #24]
 800c888:	f001 ffce 	bl	800e828 <_Bfree>
 800c88c:	4650      	mov	r0, sl
 800c88e:	9904      	ldr	r1, [sp, #16]
 800c890:	f001 ffca 	bl	800e828 <_Bfree>
 800c894:	4650      	mov	r0, sl
 800c896:	9908      	ldr	r1, [sp, #32]
 800c898:	f001 ffc6 	bl	800e828 <_Bfree>
 800c89c:	4659      	mov	r1, fp
 800c89e:	4650      	mov	r0, sl
 800c8a0:	f001 ffc2 	bl	800e828 <_Bfree>
 800c8a4:	e5dd      	b.n	800c462 <_strtod_l+0x82>
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	4640      	mov	r0, r8
 800c8aa:	4649      	mov	r1, r9
 800c8ac:	461f      	mov	r7, r3
 800c8ae:	1136      	asrs	r6, r6, #4
 800c8b0:	2e01      	cmp	r6, #1
 800c8b2:	dc21      	bgt.n	800c8f8 <_strtod_l+0x518>
 800c8b4:	b10b      	cbz	r3, 800c8ba <_strtod_l+0x4da>
 800c8b6:	4680      	mov	r8, r0
 800c8b8:	4689      	mov	r9, r1
 800c8ba:	4b2e      	ldr	r3, [pc, #184]	; (800c974 <_strtod_l+0x594>)
 800c8bc:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800c8c0:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800c8c4:	4642      	mov	r2, r8
 800c8c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c8ca:	464b      	mov	r3, r9
 800c8cc:	f7f3 fe70 	bl	80005b0 <__aeabi_dmul>
 800c8d0:	4b29      	ldr	r3, [pc, #164]	; (800c978 <_strtod_l+0x598>)
 800c8d2:	460a      	mov	r2, r1
 800c8d4:	400b      	ands	r3, r1
 800c8d6:	4929      	ldr	r1, [pc, #164]	; (800c97c <_strtod_l+0x59c>)
 800c8d8:	4680      	mov	r8, r0
 800c8da:	428b      	cmp	r3, r1
 800c8dc:	d8bb      	bhi.n	800c856 <_strtod_l+0x476>
 800c8de:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800c8e2:	428b      	cmp	r3, r1
 800c8e4:	bf86      	itte	hi
 800c8e6:	f04f 38ff 	movhi.w	r8, #4294967295
 800c8ea:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800c980 <_strtod_l+0x5a0>
 800c8ee:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800c8f2:	2300      	movs	r3, #0
 800c8f4:	9305      	str	r3, [sp, #20]
 800c8f6:	e07e      	b.n	800c9f6 <_strtod_l+0x616>
 800c8f8:	07f2      	lsls	r2, r6, #31
 800c8fa:	d507      	bpl.n	800c90c <_strtod_l+0x52c>
 800c8fc:	4b1d      	ldr	r3, [pc, #116]	; (800c974 <_strtod_l+0x594>)
 800c8fe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c902:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c906:	f7f3 fe53 	bl	80005b0 <__aeabi_dmul>
 800c90a:	2301      	movs	r3, #1
 800c90c:	3701      	adds	r7, #1
 800c90e:	1076      	asrs	r6, r6, #1
 800c910:	e7ce      	b.n	800c8b0 <_strtod_l+0x4d0>
 800c912:	d0ee      	beq.n	800c8f2 <_strtod_l+0x512>
 800c914:	4276      	negs	r6, r6
 800c916:	f016 020f 	ands.w	r2, r6, #15
 800c91a:	d00a      	beq.n	800c932 <_strtod_l+0x552>
 800c91c:	4b14      	ldr	r3, [pc, #80]	; (800c970 <_strtod_l+0x590>)
 800c91e:	4640      	mov	r0, r8
 800c920:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c924:	4649      	mov	r1, r9
 800c926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c92a:	f7f3 ff6b 	bl	8000804 <__aeabi_ddiv>
 800c92e:	4680      	mov	r8, r0
 800c930:	4689      	mov	r9, r1
 800c932:	1136      	asrs	r6, r6, #4
 800c934:	d0dd      	beq.n	800c8f2 <_strtod_l+0x512>
 800c936:	2e1f      	cmp	r6, #31
 800c938:	dd24      	ble.n	800c984 <_strtod_l+0x5a4>
 800c93a:	f04f 0b00 	mov.w	fp, #0
 800c93e:	f8cd b010 	str.w	fp, [sp, #16]
 800c942:	f8cd b020 	str.w	fp, [sp, #32]
 800c946:	f8cd b018 	str.w	fp, [sp, #24]
 800c94a:	2322      	movs	r3, #34	; 0x22
 800c94c:	f04f 0800 	mov.w	r8, #0
 800c950:	f04f 0900 	mov.w	r9, #0
 800c954:	f8ca 3000 	str.w	r3, [sl]
 800c958:	e78c      	b.n	800c874 <_strtod_l+0x494>
 800c95a:	bf00      	nop
 800c95c:	08010fb5 	.word	0x08010fb5
 800c960:	08010ff0 	.word	0x08010ff0
 800c964:	08010fad 	.word	0x08010fad
 800c968:	08011134 	.word	0x08011134
 800c96c:	08011450 	.word	0x08011450
 800c970:	08011330 	.word	0x08011330
 800c974:	08011308 	.word	0x08011308
 800c978:	7ff00000 	.word	0x7ff00000
 800c97c:	7ca00000 	.word	0x7ca00000
 800c980:	7fefffff 	.word	0x7fefffff
 800c984:	f016 0310 	ands.w	r3, r6, #16
 800c988:	bf18      	it	ne
 800c98a:	236a      	movne	r3, #106	; 0x6a
 800c98c:	4640      	mov	r0, r8
 800c98e:	9305      	str	r3, [sp, #20]
 800c990:	4649      	mov	r1, r9
 800c992:	2300      	movs	r3, #0
 800c994:	4fb2      	ldr	r7, [pc, #712]	; (800cc60 <_strtod_l+0x880>)
 800c996:	07f2      	lsls	r2, r6, #31
 800c998:	d504      	bpl.n	800c9a4 <_strtod_l+0x5c4>
 800c99a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c99e:	f7f3 fe07 	bl	80005b0 <__aeabi_dmul>
 800c9a2:	2301      	movs	r3, #1
 800c9a4:	1076      	asrs	r6, r6, #1
 800c9a6:	f107 0708 	add.w	r7, r7, #8
 800c9aa:	d1f4      	bne.n	800c996 <_strtod_l+0x5b6>
 800c9ac:	b10b      	cbz	r3, 800c9b2 <_strtod_l+0x5d2>
 800c9ae:	4680      	mov	r8, r0
 800c9b0:	4689      	mov	r9, r1
 800c9b2:	9b05      	ldr	r3, [sp, #20]
 800c9b4:	b1bb      	cbz	r3, 800c9e6 <_strtod_l+0x606>
 800c9b6:	f3c9 530a 	ubfx	r3, r9, #20, #11
 800c9ba:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	4649      	mov	r1, r9
 800c9c2:	dd10      	ble.n	800c9e6 <_strtod_l+0x606>
 800c9c4:	2b1f      	cmp	r3, #31
 800c9c6:	f340 812b 	ble.w	800cc20 <_strtod_l+0x840>
 800c9ca:	2b34      	cmp	r3, #52	; 0x34
 800c9cc:	bfd8      	it	le
 800c9ce:	f04f 32ff 	movle.w	r2, #4294967295
 800c9d2:	f04f 0800 	mov.w	r8, #0
 800c9d6:	bfcf      	iteee	gt
 800c9d8:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800c9dc:	3b20      	suble	r3, #32
 800c9de:	fa02 f303 	lslle.w	r3, r2, r3
 800c9e2:	ea03 0901 	andle.w	r9, r3, r1
 800c9e6:	2200      	movs	r2, #0
 800c9e8:	2300      	movs	r3, #0
 800c9ea:	4640      	mov	r0, r8
 800c9ec:	4649      	mov	r1, r9
 800c9ee:	f7f4 f847 	bl	8000a80 <__aeabi_dcmpeq>
 800c9f2:	2800      	cmp	r0, #0
 800c9f4:	d1a1      	bne.n	800c93a <_strtod_l+0x55a>
 800c9f6:	9b06      	ldr	r3, [sp, #24]
 800c9f8:	465a      	mov	r2, fp
 800c9fa:	9300      	str	r3, [sp, #0]
 800c9fc:	4650      	mov	r0, sl
 800c9fe:	4623      	mov	r3, r4
 800ca00:	9908      	ldr	r1, [sp, #32]
 800ca02:	f001 ff7d 	bl	800e900 <__s2b>
 800ca06:	9008      	str	r0, [sp, #32]
 800ca08:	2800      	cmp	r0, #0
 800ca0a:	f43f af24 	beq.w	800c856 <_strtod_l+0x476>
 800ca0e:	9b04      	ldr	r3, [sp, #16]
 800ca10:	f04f 0b00 	mov.w	fp, #0
 800ca14:	1b5d      	subs	r5, r3, r5
 800ca16:	9b07      	ldr	r3, [sp, #28]
 800ca18:	f8cd b010 	str.w	fp, [sp, #16]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	bfb4      	ite	lt
 800ca20:	462b      	movlt	r3, r5
 800ca22:	2300      	movge	r3, #0
 800ca24:	930e      	str	r3, [sp, #56]	; 0x38
 800ca26:	9b07      	ldr	r3, [sp, #28]
 800ca28:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ca2c:	9316      	str	r3, [sp, #88]	; 0x58
 800ca2e:	9b08      	ldr	r3, [sp, #32]
 800ca30:	4650      	mov	r0, sl
 800ca32:	6859      	ldr	r1, [r3, #4]
 800ca34:	f001 feb8 	bl	800e7a8 <_Balloc>
 800ca38:	9006      	str	r0, [sp, #24]
 800ca3a:	2800      	cmp	r0, #0
 800ca3c:	f43f af13 	beq.w	800c866 <_strtod_l+0x486>
 800ca40:	9b08      	ldr	r3, [sp, #32]
 800ca42:	300c      	adds	r0, #12
 800ca44:	691a      	ldr	r2, [r3, #16]
 800ca46:	f103 010c 	add.w	r1, r3, #12
 800ca4a:	3202      	adds	r2, #2
 800ca4c:	0092      	lsls	r2, r2, #2
 800ca4e:	f001 fe90 	bl	800e772 <memcpy>
 800ca52:	ab1e      	add	r3, sp, #120	; 0x78
 800ca54:	9301      	str	r3, [sp, #4]
 800ca56:	ab1d      	add	r3, sp, #116	; 0x74
 800ca58:	9300      	str	r3, [sp, #0]
 800ca5a:	4642      	mov	r2, r8
 800ca5c:	464b      	mov	r3, r9
 800ca5e:	4650      	mov	r0, sl
 800ca60:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 800ca64:	f002 fa8a 	bl	800ef7c <__d2b>
 800ca68:	901c      	str	r0, [sp, #112]	; 0x70
 800ca6a:	2800      	cmp	r0, #0
 800ca6c:	f43f aefb 	beq.w	800c866 <_strtod_l+0x486>
 800ca70:	2101      	movs	r1, #1
 800ca72:	4650      	mov	r0, sl
 800ca74:	f001 ffdc 	bl	800ea30 <__i2b>
 800ca78:	4603      	mov	r3, r0
 800ca7a:	9004      	str	r0, [sp, #16]
 800ca7c:	2800      	cmp	r0, #0
 800ca7e:	f43f aef2 	beq.w	800c866 <_strtod_l+0x486>
 800ca82:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800ca84:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800ca86:	2d00      	cmp	r5, #0
 800ca88:	bfab      	itete	ge
 800ca8a:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800ca8c:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800ca8e:	18ee      	addge	r6, r5, r3
 800ca90:	1b5c      	sublt	r4, r3, r5
 800ca92:	9b05      	ldr	r3, [sp, #20]
 800ca94:	bfa8      	it	ge
 800ca96:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 800ca98:	eba5 0503 	sub.w	r5, r5, r3
 800ca9c:	4415      	add	r5, r2
 800ca9e:	4b71      	ldr	r3, [pc, #452]	; (800cc64 <_strtod_l+0x884>)
 800caa0:	f105 35ff 	add.w	r5, r5, #4294967295
 800caa4:	bfb8      	it	lt
 800caa6:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800caa8:	429d      	cmp	r5, r3
 800caaa:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800caae:	f280 80c9 	bge.w	800cc44 <_strtod_l+0x864>
 800cab2:	1b5b      	subs	r3, r3, r5
 800cab4:	2b1f      	cmp	r3, #31
 800cab6:	f04f 0701 	mov.w	r7, #1
 800caba:	eba2 0203 	sub.w	r2, r2, r3
 800cabe:	f300 80b6 	bgt.w	800cc2e <_strtod_l+0x84e>
 800cac2:	2500      	movs	r5, #0
 800cac4:	fa07 f303 	lsl.w	r3, r7, r3
 800cac8:	930f      	str	r3, [sp, #60]	; 0x3c
 800caca:	18b7      	adds	r7, r6, r2
 800cacc:	9b05      	ldr	r3, [sp, #20]
 800cace:	42be      	cmp	r6, r7
 800cad0:	4414      	add	r4, r2
 800cad2:	441c      	add	r4, r3
 800cad4:	4633      	mov	r3, r6
 800cad6:	bfa8      	it	ge
 800cad8:	463b      	movge	r3, r7
 800cada:	42a3      	cmp	r3, r4
 800cadc:	bfa8      	it	ge
 800cade:	4623      	movge	r3, r4
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	bfc2      	ittt	gt
 800cae4:	1aff      	subgt	r7, r7, r3
 800cae6:	1ae4      	subgt	r4, r4, r3
 800cae8:	1af6      	subgt	r6, r6, r3
 800caea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800caec:	2b00      	cmp	r3, #0
 800caee:	dd17      	ble.n	800cb20 <_strtod_l+0x740>
 800caf0:	461a      	mov	r2, r3
 800caf2:	4650      	mov	r0, sl
 800caf4:	9904      	ldr	r1, [sp, #16]
 800caf6:	f002 f855 	bl	800eba4 <__pow5mult>
 800cafa:	9004      	str	r0, [sp, #16]
 800cafc:	2800      	cmp	r0, #0
 800cafe:	f43f aeb2 	beq.w	800c866 <_strtod_l+0x486>
 800cb02:	4601      	mov	r1, r0
 800cb04:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800cb06:	4650      	mov	r0, sl
 800cb08:	f001 ffa8 	bl	800ea5c <__multiply>
 800cb0c:	9009      	str	r0, [sp, #36]	; 0x24
 800cb0e:	2800      	cmp	r0, #0
 800cb10:	f43f aea9 	beq.w	800c866 <_strtod_l+0x486>
 800cb14:	4650      	mov	r0, sl
 800cb16:	991c      	ldr	r1, [sp, #112]	; 0x70
 800cb18:	f001 fe86 	bl	800e828 <_Bfree>
 800cb1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb1e:	931c      	str	r3, [sp, #112]	; 0x70
 800cb20:	2f00      	cmp	r7, #0
 800cb22:	f300 8093 	bgt.w	800cc4c <_strtod_l+0x86c>
 800cb26:	9b07      	ldr	r3, [sp, #28]
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	dd08      	ble.n	800cb3e <_strtod_l+0x75e>
 800cb2c:	4650      	mov	r0, sl
 800cb2e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800cb30:	9906      	ldr	r1, [sp, #24]
 800cb32:	f002 f837 	bl	800eba4 <__pow5mult>
 800cb36:	9006      	str	r0, [sp, #24]
 800cb38:	2800      	cmp	r0, #0
 800cb3a:	f43f ae94 	beq.w	800c866 <_strtod_l+0x486>
 800cb3e:	2c00      	cmp	r4, #0
 800cb40:	dd08      	ble.n	800cb54 <_strtod_l+0x774>
 800cb42:	4622      	mov	r2, r4
 800cb44:	4650      	mov	r0, sl
 800cb46:	9906      	ldr	r1, [sp, #24]
 800cb48:	f002 f886 	bl	800ec58 <__lshift>
 800cb4c:	9006      	str	r0, [sp, #24]
 800cb4e:	2800      	cmp	r0, #0
 800cb50:	f43f ae89 	beq.w	800c866 <_strtod_l+0x486>
 800cb54:	2e00      	cmp	r6, #0
 800cb56:	dd08      	ble.n	800cb6a <_strtod_l+0x78a>
 800cb58:	4632      	mov	r2, r6
 800cb5a:	4650      	mov	r0, sl
 800cb5c:	9904      	ldr	r1, [sp, #16]
 800cb5e:	f002 f87b 	bl	800ec58 <__lshift>
 800cb62:	9004      	str	r0, [sp, #16]
 800cb64:	2800      	cmp	r0, #0
 800cb66:	f43f ae7e 	beq.w	800c866 <_strtod_l+0x486>
 800cb6a:	4650      	mov	r0, sl
 800cb6c:	9a06      	ldr	r2, [sp, #24]
 800cb6e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800cb70:	f002 f8fa 	bl	800ed68 <__mdiff>
 800cb74:	4683      	mov	fp, r0
 800cb76:	2800      	cmp	r0, #0
 800cb78:	f43f ae75 	beq.w	800c866 <_strtod_l+0x486>
 800cb7c:	2400      	movs	r4, #0
 800cb7e:	68c3      	ldr	r3, [r0, #12]
 800cb80:	9904      	ldr	r1, [sp, #16]
 800cb82:	60c4      	str	r4, [r0, #12]
 800cb84:	930d      	str	r3, [sp, #52]	; 0x34
 800cb86:	f002 f8d3 	bl	800ed30 <__mcmp>
 800cb8a:	42a0      	cmp	r0, r4
 800cb8c:	da70      	bge.n	800cc70 <_strtod_l+0x890>
 800cb8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cb90:	ea53 0308 	orrs.w	r3, r3, r8
 800cb94:	f040 8096 	bne.w	800ccc4 <_strtod_l+0x8e4>
 800cb98:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	f040 8091 	bne.w	800ccc4 <_strtod_l+0x8e4>
 800cba2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800cba6:	0d1b      	lsrs	r3, r3, #20
 800cba8:	051b      	lsls	r3, r3, #20
 800cbaa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800cbae:	f240 8089 	bls.w	800ccc4 <_strtod_l+0x8e4>
 800cbb2:	f8db 3014 	ldr.w	r3, [fp, #20]
 800cbb6:	b923      	cbnz	r3, 800cbc2 <_strtod_l+0x7e2>
 800cbb8:	f8db 3010 	ldr.w	r3, [fp, #16]
 800cbbc:	2b01      	cmp	r3, #1
 800cbbe:	f340 8081 	ble.w	800ccc4 <_strtod_l+0x8e4>
 800cbc2:	4659      	mov	r1, fp
 800cbc4:	2201      	movs	r2, #1
 800cbc6:	4650      	mov	r0, sl
 800cbc8:	f002 f846 	bl	800ec58 <__lshift>
 800cbcc:	9904      	ldr	r1, [sp, #16]
 800cbce:	4683      	mov	fp, r0
 800cbd0:	f002 f8ae 	bl	800ed30 <__mcmp>
 800cbd4:	2800      	cmp	r0, #0
 800cbd6:	dd75      	ble.n	800ccc4 <_strtod_l+0x8e4>
 800cbd8:	9905      	ldr	r1, [sp, #20]
 800cbda:	464b      	mov	r3, r9
 800cbdc:	4a22      	ldr	r2, [pc, #136]	; (800cc68 <_strtod_l+0x888>)
 800cbde:	2900      	cmp	r1, #0
 800cbe0:	f000 8091 	beq.w	800cd06 <_strtod_l+0x926>
 800cbe4:	ea02 0109 	and.w	r1, r2, r9
 800cbe8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800cbec:	f300 808b 	bgt.w	800cd06 <_strtod_l+0x926>
 800cbf0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800cbf4:	f77f aea9 	ble.w	800c94a <_strtod_l+0x56a>
 800cbf8:	2300      	movs	r3, #0
 800cbfa:	4a1c      	ldr	r2, [pc, #112]	; (800cc6c <_strtod_l+0x88c>)
 800cbfc:	4640      	mov	r0, r8
 800cbfe:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800cc02:	4649      	mov	r1, r9
 800cc04:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800cc08:	f7f3 fcd2 	bl	80005b0 <__aeabi_dmul>
 800cc0c:	460b      	mov	r3, r1
 800cc0e:	4303      	orrs	r3, r0
 800cc10:	bf08      	it	eq
 800cc12:	2322      	moveq	r3, #34	; 0x22
 800cc14:	4680      	mov	r8, r0
 800cc16:	4689      	mov	r9, r1
 800cc18:	bf08      	it	eq
 800cc1a:	f8ca 3000 	streq.w	r3, [sl]
 800cc1e:	e62d      	b.n	800c87c <_strtod_l+0x49c>
 800cc20:	f04f 32ff 	mov.w	r2, #4294967295
 800cc24:	fa02 f303 	lsl.w	r3, r2, r3
 800cc28:	ea03 0808 	and.w	r8, r3, r8
 800cc2c:	e6db      	b.n	800c9e6 <_strtod_l+0x606>
 800cc2e:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800cc32:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800cc36:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800cc3a:	35e2      	adds	r5, #226	; 0xe2
 800cc3c:	fa07 f505 	lsl.w	r5, r7, r5
 800cc40:	970f      	str	r7, [sp, #60]	; 0x3c
 800cc42:	e742      	b.n	800caca <_strtod_l+0x6ea>
 800cc44:	2301      	movs	r3, #1
 800cc46:	2500      	movs	r5, #0
 800cc48:	930f      	str	r3, [sp, #60]	; 0x3c
 800cc4a:	e73e      	b.n	800caca <_strtod_l+0x6ea>
 800cc4c:	463a      	mov	r2, r7
 800cc4e:	4650      	mov	r0, sl
 800cc50:	991c      	ldr	r1, [sp, #112]	; 0x70
 800cc52:	f002 f801 	bl	800ec58 <__lshift>
 800cc56:	901c      	str	r0, [sp, #112]	; 0x70
 800cc58:	2800      	cmp	r0, #0
 800cc5a:	f47f af64 	bne.w	800cb26 <_strtod_l+0x746>
 800cc5e:	e602      	b.n	800c866 <_strtod_l+0x486>
 800cc60:	08011008 	.word	0x08011008
 800cc64:	fffffc02 	.word	0xfffffc02
 800cc68:	7ff00000 	.word	0x7ff00000
 800cc6c:	39500000 	.word	0x39500000
 800cc70:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800cc74:	d166      	bne.n	800cd44 <_strtod_l+0x964>
 800cc76:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cc78:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cc7c:	b35a      	cbz	r2, 800ccd6 <_strtod_l+0x8f6>
 800cc7e:	4a9c      	ldr	r2, [pc, #624]	; (800cef0 <_strtod_l+0xb10>)
 800cc80:	4293      	cmp	r3, r2
 800cc82:	d12c      	bne.n	800ccde <_strtod_l+0x8fe>
 800cc84:	9b05      	ldr	r3, [sp, #20]
 800cc86:	4640      	mov	r0, r8
 800cc88:	b303      	cbz	r3, 800cccc <_strtod_l+0x8ec>
 800cc8a:	464b      	mov	r3, r9
 800cc8c:	4a99      	ldr	r2, [pc, #612]	; (800cef4 <_strtod_l+0xb14>)
 800cc8e:	f04f 31ff 	mov.w	r1, #4294967295
 800cc92:	401a      	ands	r2, r3
 800cc94:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800cc98:	d81b      	bhi.n	800ccd2 <_strtod_l+0x8f2>
 800cc9a:	0d12      	lsrs	r2, r2, #20
 800cc9c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800cca0:	fa01 f303 	lsl.w	r3, r1, r3
 800cca4:	4298      	cmp	r0, r3
 800cca6:	d11a      	bne.n	800ccde <_strtod_l+0x8fe>
 800cca8:	4b93      	ldr	r3, [pc, #588]	; (800cef8 <_strtod_l+0xb18>)
 800ccaa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ccac:	429a      	cmp	r2, r3
 800ccae:	d102      	bne.n	800ccb6 <_strtod_l+0x8d6>
 800ccb0:	3001      	adds	r0, #1
 800ccb2:	f43f add8 	beq.w	800c866 <_strtod_l+0x486>
 800ccb6:	f04f 0800 	mov.w	r8, #0
 800ccba:	4b8e      	ldr	r3, [pc, #568]	; (800cef4 <_strtod_l+0xb14>)
 800ccbc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ccbe:	401a      	ands	r2, r3
 800ccc0:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800ccc4:	9b05      	ldr	r3, [sp, #20]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d196      	bne.n	800cbf8 <_strtod_l+0x818>
 800ccca:	e5d7      	b.n	800c87c <_strtod_l+0x49c>
 800cccc:	f04f 33ff 	mov.w	r3, #4294967295
 800ccd0:	e7e8      	b.n	800cca4 <_strtod_l+0x8c4>
 800ccd2:	460b      	mov	r3, r1
 800ccd4:	e7e6      	b.n	800cca4 <_strtod_l+0x8c4>
 800ccd6:	ea53 0308 	orrs.w	r3, r3, r8
 800ccda:	f43f af7d 	beq.w	800cbd8 <_strtod_l+0x7f8>
 800ccde:	b1e5      	cbz	r5, 800cd1a <_strtod_l+0x93a>
 800cce0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cce2:	421d      	tst	r5, r3
 800cce4:	d0ee      	beq.n	800ccc4 <_strtod_l+0x8e4>
 800cce6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cce8:	4640      	mov	r0, r8
 800ccea:	4649      	mov	r1, r9
 800ccec:	9a05      	ldr	r2, [sp, #20]
 800ccee:	b1c3      	cbz	r3, 800cd22 <_strtod_l+0x942>
 800ccf0:	f7ff fb52 	bl	800c398 <sulp>
 800ccf4:	4602      	mov	r2, r0
 800ccf6:	460b      	mov	r3, r1
 800ccf8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ccfc:	f7f3 faa2 	bl	8000244 <__adddf3>
 800cd00:	4680      	mov	r8, r0
 800cd02:	4689      	mov	r9, r1
 800cd04:	e7de      	b.n	800ccc4 <_strtod_l+0x8e4>
 800cd06:	4013      	ands	r3, r2
 800cd08:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800cd0c:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800cd10:	f04f 38ff 	mov.w	r8, #4294967295
 800cd14:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800cd18:	e7d4      	b.n	800ccc4 <_strtod_l+0x8e4>
 800cd1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cd1c:	ea13 0f08 	tst.w	r3, r8
 800cd20:	e7e0      	b.n	800cce4 <_strtod_l+0x904>
 800cd22:	f7ff fb39 	bl	800c398 <sulp>
 800cd26:	4602      	mov	r2, r0
 800cd28:	460b      	mov	r3, r1
 800cd2a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800cd2e:	f7f3 fa87 	bl	8000240 <__aeabi_dsub>
 800cd32:	2200      	movs	r2, #0
 800cd34:	2300      	movs	r3, #0
 800cd36:	4680      	mov	r8, r0
 800cd38:	4689      	mov	r9, r1
 800cd3a:	f7f3 fea1 	bl	8000a80 <__aeabi_dcmpeq>
 800cd3e:	2800      	cmp	r0, #0
 800cd40:	d0c0      	beq.n	800ccc4 <_strtod_l+0x8e4>
 800cd42:	e602      	b.n	800c94a <_strtod_l+0x56a>
 800cd44:	4658      	mov	r0, fp
 800cd46:	9904      	ldr	r1, [sp, #16]
 800cd48:	f002 f974 	bl	800f034 <__ratio>
 800cd4c:	2200      	movs	r2, #0
 800cd4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cd52:	4606      	mov	r6, r0
 800cd54:	460f      	mov	r7, r1
 800cd56:	f7f3 fea7 	bl	8000aa8 <__aeabi_dcmple>
 800cd5a:	2800      	cmp	r0, #0
 800cd5c:	d075      	beq.n	800ce4a <_strtod_l+0xa6a>
 800cd5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d047      	beq.n	800cdf4 <_strtod_l+0xa14>
 800cd64:	2600      	movs	r6, #0
 800cd66:	4f65      	ldr	r7, [pc, #404]	; (800cefc <_strtod_l+0xb1c>)
 800cd68:	4d64      	ldr	r5, [pc, #400]	; (800cefc <_strtod_l+0xb1c>)
 800cd6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cd70:	0d1b      	lsrs	r3, r3, #20
 800cd72:	051b      	lsls	r3, r3, #20
 800cd74:	930f      	str	r3, [sp, #60]	; 0x3c
 800cd76:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cd78:	4b61      	ldr	r3, [pc, #388]	; (800cf00 <_strtod_l+0xb20>)
 800cd7a:	429a      	cmp	r2, r3
 800cd7c:	f040 80c8 	bne.w	800cf10 <_strtod_l+0xb30>
 800cd80:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800cd84:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800cd88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd8a:	4640      	mov	r0, r8
 800cd8c:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800cd90:	4649      	mov	r1, r9
 800cd92:	f002 f879 	bl	800ee88 <__ulp>
 800cd96:	4602      	mov	r2, r0
 800cd98:	460b      	mov	r3, r1
 800cd9a:	4630      	mov	r0, r6
 800cd9c:	4639      	mov	r1, r7
 800cd9e:	f7f3 fc07 	bl	80005b0 <__aeabi_dmul>
 800cda2:	4642      	mov	r2, r8
 800cda4:	464b      	mov	r3, r9
 800cda6:	f7f3 fa4d 	bl	8000244 <__adddf3>
 800cdaa:	460b      	mov	r3, r1
 800cdac:	4951      	ldr	r1, [pc, #324]	; (800cef4 <_strtod_l+0xb14>)
 800cdae:	4a55      	ldr	r2, [pc, #340]	; (800cf04 <_strtod_l+0xb24>)
 800cdb0:	4019      	ands	r1, r3
 800cdb2:	4291      	cmp	r1, r2
 800cdb4:	4680      	mov	r8, r0
 800cdb6:	d95e      	bls.n	800ce76 <_strtod_l+0xa96>
 800cdb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cdba:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800cdbe:	4293      	cmp	r3, r2
 800cdc0:	d103      	bne.n	800cdca <_strtod_l+0x9ea>
 800cdc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cdc4:	3301      	adds	r3, #1
 800cdc6:	f43f ad4e 	beq.w	800c866 <_strtod_l+0x486>
 800cdca:	f04f 38ff 	mov.w	r8, #4294967295
 800cdce:	f8df 9128 	ldr.w	r9, [pc, #296]	; 800cef8 <_strtod_l+0xb18>
 800cdd2:	4650      	mov	r0, sl
 800cdd4:	991c      	ldr	r1, [sp, #112]	; 0x70
 800cdd6:	f001 fd27 	bl	800e828 <_Bfree>
 800cdda:	4650      	mov	r0, sl
 800cddc:	9906      	ldr	r1, [sp, #24]
 800cdde:	f001 fd23 	bl	800e828 <_Bfree>
 800cde2:	4650      	mov	r0, sl
 800cde4:	9904      	ldr	r1, [sp, #16]
 800cde6:	f001 fd1f 	bl	800e828 <_Bfree>
 800cdea:	4659      	mov	r1, fp
 800cdec:	4650      	mov	r0, sl
 800cdee:	f001 fd1b 	bl	800e828 <_Bfree>
 800cdf2:	e61c      	b.n	800ca2e <_strtod_l+0x64e>
 800cdf4:	f1b8 0f00 	cmp.w	r8, #0
 800cdf8:	d119      	bne.n	800ce2e <_strtod_l+0xa4e>
 800cdfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cdfc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ce00:	b9e3      	cbnz	r3, 800ce3c <_strtod_l+0xa5c>
 800ce02:	2200      	movs	r2, #0
 800ce04:	4630      	mov	r0, r6
 800ce06:	4639      	mov	r1, r7
 800ce08:	4b3c      	ldr	r3, [pc, #240]	; (800cefc <_strtod_l+0xb1c>)
 800ce0a:	f7f3 fe43 	bl	8000a94 <__aeabi_dcmplt>
 800ce0e:	b9c8      	cbnz	r0, 800ce44 <_strtod_l+0xa64>
 800ce10:	2200      	movs	r2, #0
 800ce12:	4630      	mov	r0, r6
 800ce14:	4639      	mov	r1, r7
 800ce16:	4b3c      	ldr	r3, [pc, #240]	; (800cf08 <_strtod_l+0xb28>)
 800ce18:	f7f3 fbca 	bl	80005b0 <__aeabi_dmul>
 800ce1c:	4604      	mov	r4, r0
 800ce1e:	460d      	mov	r5, r1
 800ce20:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800ce24:	9418      	str	r4, [sp, #96]	; 0x60
 800ce26:	9319      	str	r3, [sp, #100]	; 0x64
 800ce28:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 800ce2c:	e79d      	b.n	800cd6a <_strtod_l+0x98a>
 800ce2e:	f1b8 0f01 	cmp.w	r8, #1
 800ce32:	d103      	bne.n	800ce3c <_strtod_l+0xa5c>
 800ce34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	f43f ad87 	beq.w	800c94a <_strtod_l+0x56a>
 800ce3c:	2600      	movs	r6, #0
 800ce3e:	2400      	movs	r4, #0
 800ce40:	4f32      	ldr	r7, [pc, #200]	; (800cf0c <_strtod_l+0xb2c>)
 800ce42:	e791      	b.n	800cd68 <_strtod_l+0x988>
 800ce44:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800ce46:	4d30      	ldr	r5, [pc, #192]	; (800cf08 <_strtod_l+0xb28>)
 800ce48:	e7ea      	b.n	800ce20 <_strtod_l+0xa40>
 800ce4a:	4b2f      	ldr	r3, [pc, #188]	; (800cf08 <_strtod_l+0xb28>)
 800ce4c:	2200      	movs	r2, #0
 800ce4e:	4630      	mov	r0, r6
 800ce50:	4639      	mov	r1, r7
 800ce52:	f7f3 fbad 	bl	80005b0 <__aeabi_dmul>
 800ce56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ce58:	4604      	mov	r4, r0
 800ce5a:	460d      	mov	r5, r1
 800ce5c:	b933      	cbnz	r3, 800ce6c <_strtod_l+0xa8c>
 800ce5e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ce62:	9010      	str	r0, [sp, #64]	; 0x40
 800ce64:	9311      	str	r3, [sp, #68]	; 0x44
 800ce66:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800ce6a:	e77e      	b.n	800cd6a <_strtod_l+0x98a>
 800ce6c:	4602      	mov	r2, r0
 800ce6e:	460b      	mov	r3, r1
 800ce70:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800ce74:	e7f7      	b.n	800ce66 <_strtod_l+0xa86>
 800ce76:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800ce7a:	9b05      	ldr	r3, [sp, #20]
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d1a8      	bne.n	800cdd2 <_strtod_l+0x9f2>
 800ce80:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ce84:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ce86:	0d1b      	lsrs	r3, r3, #20
 800ce88:	051b      	lsls	r3, r3, #20
 800ce8a:	429a      	cmp	r2, r3
 800ce8c:	d1a1      	bne.n	800cdd2 <_strtod_l+0x9f2>
 800ce8e:	4620      	mov	r0, r4
 800ce90:	4629      	mov	r1, r5
 800ce92:	f7f4 f979 	bl	8001188 <__aeabi_d2lz>
 800ce96:	f7f3 fb5d 	bl	8000554 <__aeabi_l2d>
 800ce9a:	4602      	mov	r2, r0
 800ce9c:	460b      	mov	r3, r1
 800ce9e:	4620      	mov	r0, r4
 800cea0:	4629      	mov	r1, r5
 800cea2:	f7f3 f9cd 	bl	8000240 <__aeabi_dsub>
 800cea6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cea8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ceac:	ea43 0308 	orr.w	r3, r3, r8
 800ceb0:	4313      	orrs	r3, r2
 800ceb2:	4604      	mov	r4, r0
 800ceb4:	460d      	mov	r5, r1
 800ceb6:	d066      	beq.n	800cf86 <_strtod_l+0xba6>
 800ceb8:	a309      	add	r3, pc, #36	; (adr r3, 800cee0 <_strtod_l+0xb00>)
 800ceba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cebe:	f7f3 fde9 	bl	8000a94 <__aeabi_dcmplt>
 800cec2:	2800      	cmp	r0, #0
 800cec4:	f47f acda 	bne.w	800c87c <_strtod_l+0x49c>
 800cec8:	a307      	add	r3, pc, #28	; (adr r3, 800cee8 <_strtod_l+0xb08>)
 800ceca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cece:	4620      	mov	r0, r4
 800ced0:	4629      	mov	r1, r5
 800ced2:	f7f3 fdfd 	bl	8000ad0 <__aeabi_dcmpgt>
 800ced6:	2800      	cmp	r0, #0
 800ced8:	f43f af7b 	beq.w	800cdd2 <_strtod_l+0x9f2>
 800cedc:	e4ce      	b.n	800c87c <_strtod_l+0x49c>
 800cede:	bf00      	nop
 800cee0:	94a03595 	.word	0x94a03595
 800cee4:	3fdfffff 	.word	0x3fdfffff
 800cee8:	35afe535 	.word	0x35afe535
 800ceec:	3fe00000 	.word	0x3fe00000
 800cef0:	000fffff 	.word	0x000fffff
 800cef4:	7ff00000 	.word	0x7ff00000
 800cef8:	7fefffff 	.word	0x7fefffff
 800cefc:	3ff00000 	.word	0x3ff00000
 800cf00:	7fe00000 	.word	0x7fe00000
 800cf04:	7c9fffff 	.word	0x7c9fffff
 800cf08:	3fe00000 	.word	0x3fe00000
 800cf0c:	bff00000 	.word	0xbff00000
 800cf10:	9b05      	ldr	r3, [sp, #20]
 800cf12:	b313      	cbz	r3, 800cf5a <_strtod_l+0xb7a>
 800cf14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cf16:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800cf1a:	d81e      	bhi.n	800cf5a <_strtod_l+0xb7a>
 800cf1c:	a326      	add	r3, pc, #152	; (adr r3, 800cfb8 <_strtod_l+0xbd8>)
 800cf1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf22:	4620      	mov	r0, r4
 800cf24:	4629      	mov	r1, r5
 800cf26:	f7f3 fdbf 	bl	8000aa8 <__aeabi_dcmple>
 800cf2a:	b190      	cbz	r0, 800cf52 <_strtod_l+0xb72>
 800cf2c:	4629      	mov	r1, r5
 800cf2e:	4620      	mov	r0, r4
 800cf30:	f7f3 fe16 	bl	8000b60 <__aeabi_d2uiz>
 800cf34:	2801      	cmp	r0, #1
 800cf36:	bf38      	it	cc
 800cf38:	2001      	movcc	r0, #1
 800cf3a:	f7f3 fabf 	bl	80004bc <__aeabi_ui2d>
 800cf3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cf40:	4604      	mov	r4, r0
 800cf42:	460d      	mov	r5, r1
 800cf44:	b9d3      	cbnz	r3, 800cf7c <_strtod_l+0xb9c>
 800cf46:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cf4a:	9012      	str	r0, [sp, #72]	; 0x48
 800cf4c:	9313      	str	r3, [sp, #76]	; 0x4c
 800cf4e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800cf52:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cf54:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800cf58:	1a9f      	subs	r7, r3, r2
 800cf5a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800cf5e:	f001 ff93 	bl	800ee88 <__ulp>
 800cf62:	4602      	mov	r2, r0
 800cf64:	460b      	mov	r3, r1
 800cf66:	4630      	mov	r0, r6
 800cf68:	4639      	mov	r1, r7
 800cf6a:	f7f3 fb21 	bl	80005b0 <__aeabi_dmul>
 800cf6e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800cf72:	f7f3 f967 	bl	8000244 <__adddf3>
 800cf76:	4680      	mov	r8, r0
 800cf78:	4689      	mov	r9, r1
 800cf7a:	e77e      	b.n	800ce7a <_strtod_l+0xa9a>
 800cf7c:	4602      	mov	r2, r0
 800cf7e:	460b      	mov	r3, r1
 800cf80:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800cf84:	e7e3      	b.n	800cf4e <_strtod_l+0xb6e>
 800cf86:	a30e      	add	r3, pc, #56	; (adr r3, 800cfc0 <_strtod_l+0xbe0>)
 800cf88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf8c:	f7f3 fd82 	bl	8000a94 <__aeabi_dcmplt>
 800cf90:	e7a1      	b.n	800ced6 <_strtod_l+0xaf6>
 800cf92:	2300      	movs	r3, #0
 800cf94:	930c      	str	r3, [sp, #48]	; 0x30
 800cf96:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cf98:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800cf9a:	6013      	str	r3, [r2, #0]
 800cf9c:	f7ff ba65 	b.w	800c46a <_strtod_l+0x8a>
 800cfa0:	2b65      	cmp	r3, #101	; 0x65
 800cfa2:	f43f ab5c 	beq.w	800c65e <_strtod_l+0x27e>
 800cfa6:	2b45      	cmp	r3, #69	; 0x45
 800cfa8:	f43f ab59 	beq.w	800c65e <_strtod_l+0x27e>
 800cfac:	2201      	movs	r2, #1
 800cfae:	f7ff bb8d 	b.w	800c6cc <_strtod_l+0x2ec>
 800cfb2:	bf00      	nop
 800cfb4:	f3af 8000 	nop.w
 800cfb8:	ffc00000 	.word	0xffc00000
 800cfbc:	41dfffff 	.word	0x41dfffff
 800cfc0:	94a03595 	.word	0x94a03595
 800cfc4:	3fcfffff 	.word	0x3fcfffff

0800cfc8 <strtod>:
 800cfc8:	460a      	mov	r2, r1
 800cfca:	4601      	mov	r1, r0
 800cfcc:	4802      	ldr	r0, [pc, #8]	; (800cfd8 <strtod+0x10>)
 800cfce:	4b03      	ldr	r3, [pc, #12]	; (800cfdc <strtod+0x14>)
 800cfd0:	6800      	ldr	r0, [r0, #0]
 800cfd2:	f7ff ba05 	b.w	800c3e0 <_strtod_l>
 800cfd6:	bf00      	nop
 800cfd8:	2000001c 	.word	0x2000001c
 800cfdc:	20000084 	.word	0x20000084

0800cfe0 <_strtol_l.isra.0>:
 800cfe0:	2b01      	cmp	r3, #1
 800cfe2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cfe6:	4686      	mov	lr, r0
 800cfe8:	d001      	beq.n	800cfee <_strtol_l.isra.0+0xe>
 800cfea:	2b24      	cmp	r3, #36	; 0x24
 800cfec:	d906      	bls.n	800cffc <_strtol_l.isra.0+0x1c>
 800cfee:	f7fe fbef 	bl	800b7d0 <__errno>
 800cff2:	2316      	movs	r3, #22
 800cff4:	6003      	str	r3, [r0, #0]
 800cff6:	2000      	movs	r0, #0
 800cff8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cffc:	468c      	mov	ip, r1
 800cffe:	4e3a      	ldr	r6, [pc, #232]	; (800d0e8 <_strtol_l.isra.0+0x108>)
 800d000:	4660      	mov	r0, ip
 800d002:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800d006:	5da5      	ldrb	r5, [r4, r6]
 800d008:	f015 0508 	ands.w	r5, r5, #8
 800d00c:	d1f8      	bne.n	800d000 <_strtol_l.isra.0+0x20>
 800d00e:	2c2d      	cmp	r4, #45	; 0x2d
 800d010:	d133      	bne.n	800d07a <_strtol_l.isra.0+0x9a>
 800d012:	f04f 0801 	mov.w	r8, #1
 800d016:	f89c 4000 	ldrb.w	r4, [ip]
 800d01a:	f100 0c02 	add.w	ip, r0, #2
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d05d      	beq.n	800d0de <_strtol_l.isra.0+0xfe>
 800d022:	2b10      	cmp	r3, #16
 800d024:	d10c      	bne.n	800d040 <_strtol_l.isra.0+0x60>
 800d026:	2c30      	cmp	r4, #48	; 0x30
 800d028:	d10a      	bne.n	800d040 <_strtol_l.isra.0+0x60>
 800d02a:	f89c 0000 	ldrb.w	r0, [ip]
 800d02e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800d032:	2858      	cmp	r0, #88	; 0x58
 800d034:	d14e      	bne.n	800d0d4 <_strtol_l.isra.0+0xf4>
 800d036:	2310      	movs	r3, #16
 800d038:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800d03c:	f10c 0c02 	add.w	ip, ip, #2
 800d040:	2500      	movs	r5, #0
 800d042:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 800d046:	3f01      	subs	r7, #1
 800d048:	fbb7 f9f3 	udiv	r9, r7, r3
 800d04c:	4628      	mov	r0, r5
 800d04e:	fb03 7a19 	mls	sl, r3, r9, r7
 800d052:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800d056:	2e09      	cmp	r6, #9
 800d058:	d818      	bhi.n	800d08c <_strtol_l.isra.0+0xac>
 800d05a:	4634      	mov	r4, r6
 800d05c:	42a3      	cmp	r3, r4
 800d05e:	dd24      	ble.n	800d0aa <_strtol_l.isra.0+0xca>
 800d060:	2d00      	cmp	r5, #0
 800d062:	db1f      	blt.n	800d0a4 <_strtol_l.isra.0+0xc4>
 800d064:	4581      	cmp	r9, r0
 800d066:	d31d      	bcc.n	800d0a4 <_strtol_l.isra.0+0xc4>
 800d068:	d101      	bne.n	800d06e <_strtol_l.isra.0+0x8e>
 800d06a:	45a2      	cmp	sl, r4
 800d06c:	db1a      	blt.n	800d0a4 <_strtol_l.isra.0+0xc4>
 800d06e:	2501      	movs	r5, #1
 800d070:	fb00 4003 	mla	r0, r0, r3, r4
 800d074:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800d078:	e7eb      	b.n	800d052 <_strtol_l.isra.0+0x72>
 800d07a:	2c2b      	cmp	r4, #43	; 0x2b
 800d07c:	bf08      	it	eq
 800d07e:	f89c 4000 	ldrbeq.w	r4, [ip]
 800d082:	46a8      	mov	r8, r5
 800d084:	bf08      	it	eq
 800d086:	f100 0c02 	addeq.w	ip, r0, #2
 800d08a:	e7c8      	b.n	800d01e <_strtol_l.isra.0+0x3e>
 800d08c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800d090:	2e19      	cmp	r6, #25
 800d092:	d801      	bhi.n	800d098 <_strtol_l.isra.0+0xb8>
 800d094:	3c37      	subs	r4, #55	; 0x37
 800d096:	e7e1      	b.n	800d05c <_strtol_l.isra.0+0x7c>
 800d098:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800d09c:	2e19      	cmp	r6, #25
 800d09e:	d804      	bhi.n	800d0aa <_strtol_l.isra.0+0xca>
 800d0a0:	3c57      	subs	r4, #87	; 0x57
 800d0a2:	e7db      	b.n	800d05c <_strtol_l.isra.0+0x7c>
 800d0a4:	f04f 35ff 	mov.w	r5, #4294967295
 800d0a8:	e7e4      	b.n	800d074 <_strtol_l.isra.0+0x94>
 800d0aa:	2d00      	cmp	r5, #0
 800d0ac:	da08      	bge.n	800d0c0 <_strtol_l.isra.0+0xe0>
 800d0ae:	2322      	movs	r3, #34	; 0x22
 800d0b0:	4638      	mov	r0, r7
 800d0b2:	f8ce 3000 	str.w	r3, [lr]
 800d0b6:	2a00      	cmp	r2, #0
 800d0b8:	d09e      	beq.n	800cff8 <_strtol_l.isra.0+0x18>
 800d0ba:	f10c 31ff 	add.w	r1, ip, #4294967295
 800d0be:	e007      	b.n	800d0d0 <_strtol_l.isra.0+0xf0>
 800d0c0:	f1b8 0f00 	cmp.w	r8, #0
 800d0c4:	d000      	beq.n	800d0c8 <_strtol_l.isra.0+0xe8>
 800d0c6:	4240      	negs	r0, r0
 800d0c8:	2a00      	cmp	r2, #0
 800d0ca:	d095      	beq.n	800cff8 <_strtol_l.isra.0+0x18>
 800d0cc:	2d00      	cmp	r5, #0
 800d0ce:	d1f4      	bne.n	800d0ba <_strtol_l.isra.0+0xda>
 800d0d0:	6011      	str	r1, [r2, #0]
 800d0d2:	e791      	b.n	800cff8 <_strtol_l.isra.0+0x18>
 800d0d4:	2430      	movs	r4, #48	; 0x30
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d1b2      	bne.n	800d040 <_strtol_l.isra.0+0x60>
 800d0da:	2308      	movs	r3, #8
 800d0dc:	e7b0      	b.n	800d040 <_strtol_l.isra.0+0x60>
 800d0de:	2c30      	cmp	r4, #48	; 0x30
 800d0e0:	d0a3      	beq.n	800d02a <_strtol_l.isra.0+0x4a>
 800d0e2:	230a      	movs	r3, #10
 800d0e4:	e7ac      	b.n	800d040 <_strtol_l.isra.0+0x60>
 800d0e6:	bf00      	nop
 800d0e8:	08011031 	.word	0x08011031

0800d0ec <strtol>:
 800d0ec:	4613      	mov	r3, r2
 800d0ee:	460a      	mov	r2, r1
 800d0f0:	4601      	mov	r1, r0
 800d0f2:	4802      	ldr	r0, [pc, #8]	; (800d0fc <strtol+0x10>)
 800d0f4:	6800      	ldr	r0, [r0, #0]
 800d0f6:	f7ff bf73 	b.w	800cfe0 <_strtol_l.isra.0>
 800d0fa:	bf00      	nop
 800d0fc:	2000001c 	.word	0x2000001c

0800d100 <_vsniprintf_r>:
 800d100:	b530      	push	{r4, r5, lr}
 800d102:	1e14      	subs	r4, r2, #0
 800d104:	4605      	mov	r5, r0
 800d106:	b09b      	sub	sp, #108	; 0x6c
 800d108:	4618      	mov	r0, r3
 800d10a:	da05      	bge.n	800d118 <_vsniprintf_r+0x18>
 800d10c:	238b      	movs	r3, #139	; 0x8b
 800d10e:	f04f 30ff 	mov.w	r0, #4294967295
 800d112:	602b      	str	r3, [r5, #0]
 800d114:	b01b      	add	sp, #108	; 0x6c
 800d116:	bd30      	pop	{r4, r5, pc}
 800d118:	f44f 7302 	mov.w	r3, #520	; 0x208
 800d11c:	f8ad 300c 	strh.w	r3, [sp, #12]
 800d120:	bf0c      	ite	eq
 800d122:	4623      	moveq	r3, r4
 800d124:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d128:	9302      	str	r3, [sp, #8]
 800d12a:	9305      	str	r3, [sp, #20]
 800d12c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d130:	4602      	mov	r2, r0
 800d132:	9100      	str	r1, [sp, #0]
 800d134:	9104      	str	r1, [sp, #16]
 800d136:	f8ad 300e 	strh.w	r3, [sp, #14]
 800d13a:	4669      	mov	r1, sp
 800d13c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d13e:	4628      	mov	r0, r5
 800d140:	f002 f854 	bl	800f1ec <_svfiprintf_r>
 800d144:	1c43      	adds	r3, r0, #1
 800d146:	bfbc      	itt	lt
 800d148:	238b      	movlt	r3, #139	; 0x8b
 800d14a:	602b      	strlt	r3, [r5, #0]
 800d14c:	2c00      	cmp	r4, #0
 800d14e:	d0e1      	beq.n	800d114 <_vsniprintf_r+0x14>
 800d150:	2200      	movs	r2, #0
 800d152:	9b00      	ldr	r3, [sp, #0]
 800d154:	701a      	strb	r2, [r3, #0]
 800d156:	e7dd      	b.n	800d114 <_vsniprintf_r+0x14>

0800d158 <vsniprintf>:
 800d158:	b507      	push	{r0, r1, r2, lr}
 800d15a:	9300      	str	r3, [sp, #0]
 800d15c:	4613      	mov	r3, r2
 800d15e:	460a      	mov	r2, r1
 800d160:	4601      	mov	r1, r0
 800d162:	4803      	ldr	r0, [pc, #12]	; (800d170 <vsniprintf+0x18>)
 800d164:	6800      	ldr	r0, [r0, #0]
 800d166:	f7ff ffcb 	bl	800d100 <_vsniprintf_r>
 800d16a:	b003      	add	sp, #12
 800d16c:	f85d fb04 	ldr.w	pc, [sp], #4
 800d170:	2000001c 	.word	0x2000001c

0800d174 <quorem>:
 800d174:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d178:	6903      	ldr	r3, [r0, #16]
 800d17a:	690c      	ldr	r4, [r1, #16]
 800d17c:	4607      	mov	r7, r0
 800d17e:	42a3      	cmp	r3, r4
 800d180:	f2c0 8083 	blt.w	800d28a <quorem+0x116>
 800d184:	3c01      	subs	r4, #1
 800d186:	f100 0514 	add.w	r5, r0, #20
 800d18a:	f101 0814 	add.w	r8, r1, #20
 800d18e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d192:	9301      	str	r3, [sp, #4]
 800d194:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d198:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d19c:	3301      	adds	r3, #1
 800d19e:	429a      	cmp	r2, r3
 800d1a0:	fbb2 f6f3 	udiv	r6, r2, r3
 800d1a4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d1a8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d1ac:	d332      	bcc.n	800d214 <quorem+0xa0>
 800d1ae:	f04f 0e00 	mov.w	lr, #0
 800d1b2:	4640      	mov	r0, r8
 800d1b4:	46ac      	mov	ip, r5
 800d1b6:	46f2      	mov	sl, lr
 800d1b8:	f850 2b04 	ldr.w	r2, [r0], #4
 800d1bc:	b293      	uxth	r3, r2
 800d1be:	fb06 e303 	mla	r3, r6, r3, lr
 800d1c2:	0c12      	lsrs	r2, r2, #16
 800d1c4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d1c8:	fb06 e202 	mla	r2, r6, r2, lr
 800d1cc:	b29b      	uxth	r3, r3
 800d1ce:	ebaa 0303 	sub.w	r3, sl, r3
 800d1d2:	f8dc a000 	ldr.w	sl, [ip]
 800d1d6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d1da:	fa1f fa8a 	uxth.w	sl, sl
 800d1de:	4453      	add	r3, sl
 800d1e0:	fa1f fa82 	uxth.w	sl, r2
 800d1e4:	f8dc 2000 	ldr.w	r2, [ip]
 800d1e8:	4581      	cmp	r9, r0
 800d1ea:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800d1ee:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d1f2:	b29b      	uxth	r3, r3
 800d1f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d1f8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d1fc:	f84c 3b04 	str.w	r3, [ip], #4
 800d200:	d2da      	bcs.n	800d1b8 <quorem+0x44>
 800d202:	f855 300b 	ldr.w	r3, [r5, fp]
 800d206:	b92b      	cbnz	r3, 800d214 <quorem+0xa0>
 800d208:	9b01      	ldr	r3, [sp, #4]
 800d20a:	3b04      	subs	r3, #4
 800d20c:	429d      	cmp	r5, r3
 800d20e:	461a      	mov	r2, r3
 800d210:	d32f      	bcc.n	800d272 <quorem+0xfe>
 800d212:	613c      	str	r4, [r7, #16]
 800d214:	4638      	mov	r0, r7
 800d216:	f001 fd8b 	bl	800ed30 <__mcmp>
 800d21a:	2800      	cmp	r0, #0
 800d21c:	db25      	blt.n	800d26a <quorem+0xf6>
 800d21e:	4628      	mov	r0, r5
 800d220:	f04f 0c00 	mov.w	ip, #0
 800d224:	3601      	adds	r6, #1
 800d226:	f858 1b04 	ldr.w	r1, [r8], #4
 800d22a:	f8d0 e000 	ldr.w	lr, [r0]
 800d22e:	b28b      	uxth	r3, r1
 800d230:	ebac 0303 	sub.w	r3, ip, r3
 800d234:	fa1f f28e 	uxth.w	r2, lr
 800d238:	4413      	add	r3, r2
 800d23a:	0c0a      	lsrs	r2, r1, #16
 800d23c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d240:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d244:	b29b      	uxth	r3, r3
 800d246:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d24a:	45c1      	cmp	r9, r8
 800d24c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d250:	f840 3b04 	str.w	r3, [r0], #4
 800d254:	d2e7      	bcs.n	800d226 <quorem+0xb2>
 800d256:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d25a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d25e:	b922      	cbnz	r2, 800d26a <quorem+0xf6>
 800d260:	3b04      	subs	r3, #4
 800d262:	429d      	cmp	r5, r3
 800d264:	461a      	mov	r2, r3
 800d266:	d30a      	bcc.n	800d27e <quorem+0x10a>
 800d268:	613c      	str	r4, [r7, #16]
 800d26a:	4630      	mov	r0, r6
 800d26c:	b003      	add	sp, #12
 800d26e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d272:	6812      	ldr	r2, [r2, #0]
 800d274:	3b04      	subs	r3, #4
 800d276:	2a00      	cmp	r2, #0
 800d278:	d1cb      	bne.n	800d212 <quorem+0x9e>
 800d27a:	3c01      	subs	r4, #1
 800d27c:	e7c6      	b.n	800d20c <quorem+0x98>
 800d27e:	6812      	ldr	r2, [r2, #0]
 800d280:	3b04      	subs	r3, #4
 800d282:	2a00      	cmp	r2, #0
 800d284:	d1f0      	bne.n	800d268 <quorem+0xf4>
 800d286:	3c01      	subs	r4, #1
 800d288:	e7eb      	b.n	800d262 <quorem+0xee>
 800d28a:	2000      	movs	r0, #0
 800d28c:	e7ee      	b.n	800d26c <quorem+0xf8>
	...

0800d290 <_dtoa_r>:
 800d290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d294:	4616      	mov	r6, r2
 800d296:	461f      	mov	r7, r3
 800d298:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800d29a:	b099      	sub	sp, #100	; 0x64
 800d29c:	4605      	mov	r5, r0
 800d29e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800d2a2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800d2a6:	b974      	cbnz	r4, 800d2c6 <_dtoa_r+0x36>
 800d2a8:	2010      	movs	r0, #16
 800d2aa:	f7fe fabb 	bl	800b824 <malloc>
 800d2ae:	4602      	mov	r2, r0
 800d2b0:	6268      	str	r0, [r5, #36]	; 0x24
 800d2b2:	b920      	cbnz	r0, 800d2be <_dtoa_r+0x2e>
 800d2b4:	21ea      	movs	r1, #234	; 0xea
 800d2b6:	4bae      	ldr	r3, [pc, #696]	; (800d570 <_dtoa_r+0x2e0>)
 800d2b8:	48ae      	ldr	r0, [pc, #696]	; (800d574 <_dtoa_r+0x2e4>)
 800d2ba:	f002 fb2b 	bl	800f914 <__assert_func>
 800d2be:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d2c2:	6004      	str	r4, [r0, #0]
 800d2c4:	60c4      	str	r4, [r0, #12]
 800d2c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d2c8:	6819      	ldr	r1, [r3, #0]
 800d2ca:	b151      	cbz	r1, 800d2e2 <_dtoa_r+0x52>
 800d2cc:	685a      	ldr	r2, [r3, #4]
 800d2ce:	2301      	movs	r3, #1
 800d2d0:	4093      	lsls	r3, r2
 800d2d2:	604a      	str	r2, [r1, #4]
 800d2d4:	608b      	str	r3, [r1, #8]
 800d2d6:	4628      	mov	r0, r5
 800d2d8:	f001 faa6 	bl	800e828 <_Bfree>
 800d2dc:	2200      	movs	r2, #0
 800d2de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d2e0:	601a      	str	r2, [r3, #0]
 800d2e2:	1e3b      	subs	r3, r7, #0
 800d2e4:	bfaf      	iteee	ge
 800d2e6:	2300      	movge	r3, #0
 800d2e8:	2201      	movlt	r2, #1
 800d2ea:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d2ee:	9305      	strlt	r3, [sp, #20]
 800d2f0:	bfa8      	it	ge
 800d2f2:	f8c8 3000 	strge.w	r3, [r8]
 800d2f6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800d2fa:	4b9f      	ldr	r3, [pc, #636]	; (800d578 <_dtoa_r+0x2e8>)
 800d2fc:	bfb8      	it	lt
 800d2fe:	f8c8 2000 	strlt.w	r2, [r8]
 800d302:	ea33 0309 	bics.w	r3, r3, r9
 800d306:	d119      	bne.n	800d33c <_dtoa_r+0xac>
 800d308:	f242 730f 	movw	r3, #9999	; 0x270f
 800d30c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800d30e:	6013      	str	r3, [r2, #0]
 800d310:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d314:	4333      	orrs	r3, r6
 800d316:	f000 8580 	beq.w	800de1a <_dtoa_r+0xb8a>
 800d31a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d31c:	b953      	cbnz	r3, 800d334 <_dtoa_r+0xa4>
 800d31e:	4b97      	ldr	r3, [pc, #604]	; (800d57c <_dtoa_r+0x2ec>)
 800d320:	e022      	b.n	800d368 <_dtoa_r+0xd8>
 800d322:	4b97      	ldr	r3, [pc, #604]	; (800d580 <_dtoa_r+0x2f0>)
 800d324:	9308      	str	r3, [sp, #32]
 800d326:	3308      	adds	r3, #8
 800d328:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800d32a:	6013      	str	r3, [r2, #0]
 800d32c:	9808      	ldr	r0, [sp, #32]
 800d32e:	b019      	add	sp, #100	; 0x64
 800d330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d334:	4b91      	ldr	r3, [pc, #580]	; (800d57c <_dtoa_r+0x2ec>)
 800d336:	9308      	str	r3, [sp, #32]
 800d338:	3303      	adds	r3, #3
 800d33a:	e7f5      	b.n	800d328 <_dtoa_r+0x98>
 800d33c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800d340:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800d344:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d348:	2200      	movs	r2, #0
 800d34a:	2300      	movs	r3, #0
 800d34c:	f7f3 fb98 	bl	8000a80 <__aeabi_dcmpeq>
 800d350:	4680      	mov	r8, r0
 800d352:	b158      	cbz	r0, 800d36c <_dtoa_r+0xdc>
 800d354:	2301      	movs	r3, #1
 800d356:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800d358:	6013      	str	r3, [r2, #0]
 800d35a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	f000 8559 	beq.w	800de14 <_dtoa_r+0xb84>
 800d362:	4888      	ldr	r0, [pc, #544]	; (800d584 <_dtoa_r+0x2f4>)
 800d364:	6018      	str	r0, [r3, #0]
 800d366:	1e43      	subs	r3, r0, #1
 800d368:	9308      	str	r3, [sp, #32]
 800d36a:	e7df      	b.n	800d32c <_dtoa_r+0x9c>
 800d36c:	ab16      	add	r3, sp, #88	; 0x58
 800d36e:	9301      	str	r3, [sp, #4]
 800d370:	ab17      	add	r3, sp, #92	; 0x5c
 800d372:	9300      	str	r3, [sp, #0]
 800d374:	4628      	mov	r0, r5
 800d376:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d37a:	f001 fdff 	bl	800ef7c <__d2b>
 800d37e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800d382:	4682      	mov	sl, r0
 800d384:	2c00      	cmp	r4, #0
 800d386:	d07e      	beq.n	800d486 <_dtoa_r+0x1f6>
 800d388:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d38c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d38e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800d392:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d396:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800d39a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800d39e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800d3a2:	2200      	movs	r2, #0
 800d3a4:	4b78      	ldr	r3, [pc, #480]	; (800d588 <_dtoa_r+0x2f8>)
 800d3a6:	f7f2 ff4b 	bl	8000240 <__aeabi_dsub>
 800d3aa:	a36b      	add	r3, pc, #428	; (adr r3, 800d558 <_dtoa_r+0x2c8>)
 800d3ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3b0:	f7f3 f8fe 	bl	80005b0 <__aeabi_dmul>
 800d3b4:	a36a      	add	r3, pc, #424	; (adr r3, 800d560 <_dtoa_r+0x2d0>)
 800d3b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3ba:	f7f2 ff43 	bl	8000244 <__adddf3>
 800d3be:	4606      	mov	r6, r0
 800d3c0:	4620      	mov	r0, r4
 800d3c2:	460f      	mov	r7, r1
 800d3c4:	f7f3 f88a 	bl	80004dc <__aeabi_i2d>
 800d3c8:	a367      	add	r3, pc, #412	; (adr r3, 800d568 <_dtoa_r+0x2d8>)
 800d3ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3ce:	f7f3 f8ef 	bl	80005b0 <__aeabi_dmul>
 800d3d2:	4602      	mov	r2, r0
 800d3d4:	460b      	mov	r3, r1
 800d3d6:	4630      	mov	r0, r6
 800d3d8:	4639      	mov	r1, r7
 800d3da:	f7f2 ff33 	bl	8000244 <__adddf3>
 800d3de:	4606      	mov	r6, r0
 800d3e0:	460f      	mov	r7, r1
 800d3e2:	f7f3 fb95 	bl	8000b10 <__aeabi_d2iz>
 800d3e6:	2200      	movs	r2, #0
 800d3e8:	4681      	mov	r9, r0
 800d3ea:	2300      	movs	r3, #0
 800d3ec:	4630      	mov	r0, r6
 800d3ee:	4639      	mov	r1, r7
 800d3f0:	f7f3 fb50 	bl	8000a94 <__aeabi_dcmplt>
 800d3f4:	b148      	cbz	r0, 800d40a <_dtoa_r+0x17a>
 800d3f6:	4648      	mov	r0, r9
 800d3f8:	f7f3 f870 	bl	80004dc <__aeabi_i2d>
 800d3fc:	4632      	mov	r2, r6
 800d3fe:	463b      	mov	r3, r7
 800d400:	f7f3 fb3e 	bl	8000a80 <__aeabi_dcmpeq>
 800d404:	b908      	cbnz	r0, 800d40a <_dtoa_r+0x17a>
 800d406:	f109 39ff 	add.w	r9, r9, #4294967295
 800d40a:	f1b9 0f16 	cmp.w	r9, #22
 800d40e:	d857      	bhi.n	800d4c0 <_dtoa_r+0x230>
 800d410:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d414:	4b5d      	ldr	r3, [pc, #372]	; (800d58c <_dtoa_r+0x2fc>)
 800d416:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800d41a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d41e:	f7f3 fb39 	bl	8000a94 <__aeabi_dcmplt>
 800d422:	2800      	cmp	r0, #0
 800d424:	d04e      	beq.n	800d4c4 <_dtoa_r+0x234>
 800d426:	2300      	movs	r3, #0
 800d428:	f109 39ff 	add.w	r9, r9, #4294967295
 800d42c:	930f      	str	r3, [sp, #60]	; 0x3c
 800d42e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d430:	1b1c      	subs	r4, r3, r4
 800d432:	1e63      	subs	r3, r4, #1
 800d434:	9309      	str	r3, [sp, #36]	; 0x24
 800d436:	bf49      	itett	mi
 800d438:	f1c4 0301 	rsbmi	r3, r4, #1
 800d43c:	2300      	movpl	r3, #0
 800d43e:	9306      	strmi	r3, [sp, #24]
 800d440:	2300      	movmi	r3, #0
 800d442:	bf54      	ite	pl
 800d444:	9306      	strpl	r3, [sp, #24]
 800d446:	9309      	strmi	r3, [sp, #36]	; 0x24
 800d448:	f1b9 0f00 	cmp.w	r9, #0
 800d44c:	db3c      	blt.n	800d4c8 <_dtoa_r+0x238>
 800d44e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d450:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800d454:	444b      	add	r3, r9
 800d456:	9309      	str	r3, [sp, #36]	; 0x24
 800d458:	2300      	movs	r3, #0
 800d45a:	930a      	str	r3, [sp, #40]	; 0x28
 800d45c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d45e:	2b09      	cmp	r3, #9
 800d460:	d86c      	bhi.n	800d53c <_dtoa_r+0x2ac>
 800d462:	2b05      	cmp	r3, #5
 800d464:	bfc4      	itt	gt
 800d466:	3b04      	subgt	r3, #4
 800d468:	9322      	strgt	r3, [sp, #136]	; 0x88
 800d46a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d46c:	bfc8      	it	gt
 800d46e:	2400      	movgt	r4, #0
 800d470:	f1a3 0302 	sub.w	r3, r3, #2
 800d474:	bfd8      	it	le
 800d476:	2401      	movle	r4, #1
 800d478:	2b03      	cmp	r3, #3
 800d47a:	f200 808b 	bhi.w	800d594 <_dtoa_r+0x304>
 800d47e:	e8df f003 	tbb	[pc, r3]
 800d482:	4f2d      	.short	0x4f2d
 800d484:	5b4d      	.short	0x5b4d
 800d486:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800d48a:	441c      	add	r4, r3
 800d48c:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800d490:	2b20      	cmp	r3, #32
 800d492:	bfc3      	ittte	gt
 800d494:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d498:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800d49c:	fa09 f303 	lslgt.w	r3, r9, r3
 800d4a0:	f1c3 0320 	rsble	r3, r3, #32
 800d4a4:	bfc6      	itte	gt
 800d4a6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800d4aa:	4318      	orrgt	r0, r3
 800d4ac:	fa06 f003 	lslle.w	r0, r6, r3
 800d4b0:	f7f3 f804 	bl	80004bc <__aeabi_ui2d>
 800d4b4:	2301      	movs	r3, #1
 800d4b6:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800d4ba:	3c01      	subs	r4, #1
 800d4bc:	9313      	str	r3, [sp, #76]	; 0x4c
 800d4be:	e770      	b.n	800d3a2 <_dtoa_r+0x112>
 800d4c0:	2301      	movs	r3, #1
 800d4c2:	e7b3      	b.n	800d42c <_dtoa_r+0x19c>
 800d4c4:	900f      	str	r0, [sp, #60]	; 0x3c
 800d4c6:	e7b2      	b.n	800d42e <_dtoa_r+0x19e>
 800d4c8:	9b06      	ldr	r3, [sp, #24]
 800d4ca:	eba3 0309 	sub.w	r3, r3, r9
 800d4ce:	9306      	str	r3, [sp, #24]
 800d4d0:	f1c9 0300 	rsb	r3, r9, #0
 800d4d4:	930a      	str	r3, [sp, #40]	; 0x28
 800d4d6:	2300      	movs	r3, #0
 800d4d8:	930e      	str	r3, [sp, #56]	; 0x38
 800d4da:	e7bf      	b.n	800d45c <_dtoa_r+0x1cc>
 800d4dc:	2300      	movs	r3, #0
 800d4de:	930b      	str	r3, [sp, #44]	; 0x2c
 800d4e0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	dc59      	bgt.n	800d59a <_dtoa_r+0x30a>
 800d4e6:	f04f 0b01 	mov.w	fp, #1
 800d4ea:	465b      	mov	r3, fp
 800d4ec:	f8cd b008 	str.w	fp, [sp, #8]
 800d4f0:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800d4f4:	2200      	movs	r2, #0
 800d4f6:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800d4f8:	6042      	str	r2, [r0, #4]
 800d4fa:	2204      	movs	r2, #4
 800d4fc:	f102 0614 	add.w	r6, r2, #20
 800d500:	429e      	cmp	r6, r3
 800d502:	6841      	ldr	r1, [r0, #4]
 800d504:	d94f      	bls.n	800d5a6 <_dtoa_r+0x316>
 800d506:	4628      	mov	r0, r5
 800d508:	f001 f94e 	bl	800e7a8 <_Balloc>
 800d50c:	9008      	str	r0, [sp, #32]
 800d50e:	2800      	cmp	r0, #0
 800d510:	d14d      	bne.n	800d5ae <_dtoa_r+0x31e>
 800d512:	4602      	mov	r2, r0
 800d514:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d518:	4b1d      	ldr	r3, [pc, #116]	; (800d590 <_dtoa_r+0x300>)
 800d51a:	e6cd      	b.n	800d2b8 <_dtoa_r+0x28>
 800d51c:	2301      	movs	r3, #1
 800d51e:	e7de      	b.n	800d4de <_dtoa_r+0x24e>
 800d520:	2300      	movs	r3, #0
 800d522:	930b      	str	r3, [sp, #44]	; 0x2c
 800d524:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d526:	eb09 0b03 	add.w	fp, r9, r3
 800d52a:	f10b 0301 	add.w	r3, fp, #1
 800d52e:	2b01      	cmp	r3, #1
 800d530:	9302      	str	r3, [sp, #8]
 800d532:	bfb8      	it	lt
 800d534:	2301      	movlt	r3, #1
 800d536:	e7dd      	b.n	800d4f4 <_dtoa_r+0x264>
 800d538:	2301      	movs	r3, #1
 800d53a:	e7f2      	b.n	800d522 <_dtoa_r+0x292>
 800d53c:	2401      	movs	r4, #1
 800d53e:	2300      	movs	r3, #0
 800d540:	940b      	str	r4, [sp, #44]	; 0x2c
 800d542:	9322      	str	r3, [sp, #136]	; 0x88
 800d544:	f04f 3bff 	mov.w	fp, #4294967295
 800d548:	2200      	movs	r2, #0
 800d54a:	2312      	movs	r3, #18
 800d54c:	f8cd b008 	str.w	fp, [sp, #8]
 800d550:	9223      	str	r2, [sp, #140]	; 0x8c
 800d552:	e7cf      	b.n	800d4f4 <_dtoa_r+0x264>
 800d554:	f3af 8000 	nop.w
 800d558:	636f4361 	.word	0x636f4361
 800d55c:	3fd287a7 	.word	0x3fd287a7
 800d560:	8b60c8b3 	.word	0x8b60c8b3
 800d564:	3fc68a28 	.word	0x3fc68a28
 800d568:	509f79fb 	.word	0x509f79fb
 800d56c:	3fd34413 	.word	0x3fd34413
 800d570:	0801113e 	.word	0x0801113e
 800d574:	08011155 	.word	0x08011155
 800d578:	7ff00000 	.word	0x7ff00000
 800d57c:	0801113a 	.word	0x0801113a
 800d580:	08011131 	.word	0x08011131
 800d584:	08010fb9 	.word	0x08010fb9
 800d588:	3ff80000 	.word	0x3ff80000
 800d58c:	08011330 	.word	0x08011330
 800d590:	080111b4 	.word	0x080111b4
 800d594:	2301      	movs	r3, #1
 800d596:	930b      	str	r3, [sp, #44]	; 0x2c
 800d598:	e7d4      	b.n	800d544 <_dtoa_r+0x2b4>
 800d59a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800d59e:	465b      	mov	r3, fp
 800d5a0:	f8cd b008 	str.w	fp, [sp, #8]
 800d5a4:	e7a6      	b.n	800d4f4 <_dtoa_r+0x264>
 800d5a6:	3101      	adds	r1, #1
 800d5a8:	6041      	str	r1, [r0, #4]
 800d5aa:	0052      	lsls	r2, r2, #1
 800d5ac:	e7a6      	b.n	800d4fc <_dtoa_r+0x26c>
 800d5ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d5b0:	9a08      	ldr	r2, [sp, #32]
 800d5b2:	601a      	str	r2, [r3, #0]
 800d5b4:	9b02      	ldr	r3, [sp, #8]
 800d5b6:	2b0e      	cmp	r3, #14
 800d5b8:	f200 80a8 	bhi.w	800d70c <_dtoa_r+0x47c>
 800d5bc:	2c00      	cmp	r4, #0
 800d5be:	f000 80a5 	beq.w	800d70c <_dtoa_r+0x47c>
 800d5c2:	f1b9 0f00 	cmp.w	r9, #0
 800d5c6:	dd34      	ble.n	800d632 <_dtoa_r+0x3a2>
 800d5c8:	4a9a      	ldr	r2, [pc, #616]	; (800d834 <_dtoa_r+0x5a4>)
 800d5ca:	f009 030f 	and.w	r3, r9, #15
 800d5ce:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d5d2:	f419 7f80 	tst.w	r9, #256	; 0x100
 800d5d6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800d5da:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800d5de:	ea4f 1429 	mov.w	r4, r9, asr #4
 800d5e2:	d016      	beq.n	800d612 <_dtoa_r+0x382>
 800d5e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d5e8:	4b93      	ldr	r3, [pc, #588]	; (800d838 <_dtoa_r+0x5a8>)
 800d5ea:	2703      	movs	r7, #3
 800d5ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d5f0:	f7f3 f908 	bl	8000804 <__aeabi_ddiv>
 800d5f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d5f8:	f004 040f 	and.w	r4, r4, #15
 800d5fc:	4e8e      	ldr	r6, [pc, #568]	; (800d838 <_dtoa_r+0x5a8>)
 800d5fe:	b954      	cbnz	r4, 800d616 <_dtoa_r+0x386>
 800d600:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d604:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d608:	f7f3 f8fc 	bl	8000804 <__aeabi_ddiv>
 800d60c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d610:	e029      	b.n	800d666 <_dtoa_r+0x3d6>
 800d612:	2702      	movs	r7, #2
 800d614:	e7f2      	b.n	800d5fc <_dtoa_r+0x36c>
 800d616:	07e1      	lsls	r1, r4, #31
 800d618:	d508      	bpl.n	800d62c <_dtoa_r+0x39c>
 800d61a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d61e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d622:	f7f2 ffc5 	bl	80005b0 <__aeabi_dmul>
 800d626:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800d62a:	3701      	adds	r7, #1
 800d62c:	1064      	asrs	r4, r4, #1
 800d62e:	3608      	adds	r6, #8
 800d630:	e7e5      	b.n	800d5fe <_dtoa_r+0x36e>
 800d632:	f000 80a5 	beq.w	800d780 <_dtoa_r+0x4f0>
 800d636:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d63a:	f1c9 0400 	rsb	r4, r9, #0
 800d63e:	4b7d      	ldr	r3, [pc, #500]	; (800d834 <_dtoa_r+0x5a4>)
 800d640:	f004 020f 	and.w	r2, r4, #15
 800d644:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d64c:	f7f2 ffb0 	bl	80005b0 <__aeabi_dmul>
 800d650:	2702      	movs	r7, #2
 800d652:	2300      	movs	r3, #0
 800d654:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d658:	4e77      	ldr	r6, [pc, #476]	; (800d838 <_dtoa_r+0x5a8>)
 800d65a:	1124      	asrs	r4, r4, #4
 800d65c:	2c00      	cmp	r4, #0
 800d65e:	f040 8084 	bne.w	800d76a <_dtoa_r+0x4da>
 800d662:	2b00      	cmp	r3, #0
 800d664:	d1d2      	bne.n	800d60c <_dtoa_r+0x37c>
 800d666:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d668:	2b00      	cmp	r3, #0
 800d66a:	f000 808b 	beq.w	800d784 <_dtoa_r+0x4f4>
 800d66e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800d672:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800d676:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d67a:	2200      	movs	r2, #0
 800d67c:	4b6f      	ldr	r3, [pc, #444]	; (800d83c <_dtoa_r+0x5ac>)
 800d67e:	f7f3 fa09 	bl	8000a94 <__aeabi_dcmplt>
 800d682:	2800      	cmp	r0, #0
 800d684:	d07e      	beq.n	800d784 <_dtoa_r+0x4f4>
 800d686:	9b02      	ldr	r3, [sp, #8]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d07b      	beq.n	800d784 <_dtoa_r+0x4f4>
 800d68c:	f1bb 0f00 	cmp.w	fp, #0
 800d690:	dd38      	ble.n	800d704 <_dtoa_r+0x474>
 800d692:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d696:	2200      	movs	r2, #0
 800d698:	4b69      	ldr	r3, [pc, #420]	; (800d840 <_dtoa_r+0x5b0>)
 800d69a:	f7f2 ff89 	bl	80005b0 <__aeabi_dmul>
 800d69e:	465c      	mov	r4, fp
 800d6a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d6a4:	f109 38ff 	add.w	r8, r9, #4294967295
 800d6a8:	3701      	adds	r7, #1
 800d6aa:	4638      	mov	r0, r7
 800d6ac:	f7f2 ff16 	bl	80004dc <__aeabi_i2d>
 800d6b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d6b4:	f7f2 ff7c 	bl	80005b0 <__aeabi_dmul>
 800d6b8:	2200      	movs	r2, #0
 800d6ba:	4b62      	ldr	r3, [pc, #392]	; (800d844 <_dtoa_r+0x5b4>)
 800d6bc:	f7f2 fdc2 	bl	8000244 <__adddf3>
 800d6c0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800d6c4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800d6c8:	9611      	str	r6, [sp, #68]	; 0x44
 800d6ca:	2c00      	cmp	r4, #0
 800d6cc:	d15d      	bne.n	800d78a <_dtoa_r+0x4fa>
 800d6ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d6d2:	2200      	movs	r2, #0
 800d6d4:	4b5c      	ldr	r3, [pc, #368]	; (800d848 <_dtoa_r+0x5b8>)
 800d6d6:	f7f2 fdb3 	bl	8000240 <__aeabi_dsub>
 800d6da:	4602      	mov	r2, r0
 800d6dc:	460b      	mov	r3, r1
 800d6de:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d6e2:	4633      	mov	r3, r6
 800d6e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d6e6:	f7f3 f9f3 	bl	8000ad0 <__aeabi_dcmpgt>
 800d6ea:	2800      	cmp	r0, #0
 800d6ec:	f040 829e 	bne.w	800dc2c <_dtoa_r+0x99c>
 800d6f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d6f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d6f6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800d6fa:	f7f3 f9cb 	bl	8000a94 <__aeabi_dcmplt>
 800d6fe:	2800      	cmp	r0, #0
 800d700:	f040 8292 	bne.w	800dc28 <_dtoa_r+0x998>
 800d704:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800d708:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800d70c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d70e:	2b00      	cmp	r3, #0
 800d710:	f2c0 8153 	blt.w	800d9ba <_dtoa_r+0x72a>
 800d714:	f1b9 0f0e 	cmp.w	r9, #14
 800d718:	f300 814f 	bgt.w	800d9ba <_dtoa_r+0x72a>
 800d71c:	4b45      	ldr	r3, [pc, #276]	; (800d834 <_dtoa_r+0x5a4>)
 800d71e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800d722:	e9d3 3400 	ldrd	r3, r4, [r3]
 800d726:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800d72a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	f280 80db 	bge.w	800d8e8 <_dtoa_r+0x658>
 800d732:	9b02      	ldr	r3, [sp, #8]
 800d734:	2b00      	cmp	r3, #0
 800d736:	f300 80d7 	bgt.w	800d8e8 <_dtoa_r+0x658>
 800d73a:	f040 8274 	bne.w	800dc26 <_dtoa_r+0x996>
 800d73e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d742:	2200      	movs	r2, #0
 800d744:	4b40      	ldr	r3, [pc, #256]	; (800d848 <_dtoa_r+0x5b8>)
 800d746:	f7f2 ff33 	bl	80005b0 <__aeabi_dmul>
 800d74a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d74e:	f7f3 f9b5 	bl	8000abc <__aeabi_dcmpge>
 800d752:	9c02      	ldr	r4, [sp, #8]
 800d754:	4626      	mov	r6, r4
 800d756:	2800      	cmp	r0, #0
 800d758:	f040 824a 	bne.w	800dbf0 <_dtoa_r+0x960>
 800d75c:	2331      	movs	r3, #49	; 0x31
 800d75e:	9f08      	ldr	r7, [sp, #32]
 800d760:	f109 0901 	add.w	r9, r9, #1
 800d764:	f807 3b01 	strb.w	r3, [r7], #1
 800d768:	e246      	b.n	800dbf8 <_dtoa_r+0x968>
 800d76a:	07e2      	lsls	r2, r4, #31
 800d76c:	d505      	bpl.n	800d77a <_dtoa_r+0x4ea>
 800d76e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d772:	f7f2 ff1d 	bl	80005b0 <__aeabi_dmul>
 800d776:	2301      	movs	r3, #1
 800d778:	3701      	adds	r7, #1
 800d77a:	1064      	asrs	r4, r4, #1
 800d77c:	3608      	adds	r6, #8
 800d77e:	e76d      	b.n	800d65c <_dtoa_r+0x3cc>
 800d780:	2702      	movs	r7, #2
 800d782:	e770      	b.n	800d666 <_dtoa_r+0x3d6>
 800d784:	46c8      	mov	r8, r9
 800d786:	9c02      	ldr	r4, [sp, #8]
 800d788:	e78f      	b.n	800d6aa <_dtoa_r+0x41a>
 800d78a:	9908      	ldr	r1, [sp, #32]
 800d78c:	4b29      	ldr	r3, [pc, #164]	; (800d834 <_dtoa_r+0x5a4>)
 800d78e:	4421      	add	r1, r4
 800d790:	9112      	str	r1, [sp, #72]	; 0x48
 800d792:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d794:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d798:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800d79c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d7a0:	2900      	cmp	r1, #0
 800d7a2:	d055      	beq.n	800d850 <_dtoa_r+0x5c0>
 800d7a4:	2000      	movs	r0, #0
 800d7a6:	4929      	ldr	r1, [pc, #164]	; (800d84c <_dtoa_r+0x5bc>)
 800d7a8:	f7f3 f82c 	bl	8000804 <__aeabi_ddiv>
 800d7ac:	463b      	mov	r3, r7
 800d7ae:	4632      	mov	r2, r6
 800d7b0:	f7f2 fd46 	bl	8000240 <__aeabi_dsub>
 800d7b4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800d7b8:	9f08      	ldr	r7, [sp, #32]
 800d7ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d7be:	f7f3 f9a7 	bl	8000b10 <__aeabi_d2iz>
 800d7c2:	4604      	mov	r4, r0
 800d7c4:	f7f2 fe8a 	bl	80004dc <__aeabi_i2d>
 800d7c8:	4602      	mov	r2, r0
 800d7ca:	460b      	mov	r3, r1
 800d7cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d7d0:	f7f2 fd36 	bl	8000240 <__aeabi_dsub>
 800d7d4:	4602      	mov	r2, r0
 800d7d6:	460b      	mov	r3, r1
 800d7d8:	3430      	adds	r4, #48	; 0x30
 800d7da:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d7de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d7e2:	f807 4b01 	strb.w	r4, [r7], #1
 800d7e6:	f7f3 f955 	bl	8000a94 <__aeabi_dcmplt>
 800d7ea:	2800      	cmp	r0, #0
 800d7ec:	d174      	bne.n	800d8d8 <_dtoa_r+0x648>
 800d7ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d7f2:	2000      	movs	r0, #0
 800d7f4:	4911      	ldr	r1, [pc, #68]	; (800d83c <_dtoa_r+0x5ac>)
 800d7f6:	f7f2 fd23 	bl	8000240 <__aeabi_dsub>
 800d7fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d7fe:	f7f3 f949 	bl	8000a94 <__aeabi_dcmplt>
 800d802:	2800      	cmp	r0, #0
 800d804:	f040 80b6 	bne.w	800d974 <_dtoa_r+0x6e4>
 800d808:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d80a:	429f      	cmp	r7, r3
 800d80c:	f43f af7a 	beq.w	800d704 <_dtoa_r+0x474>
 800d810:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d814:	2200      	movs	r2, #0
 800d816:	4b0a      	ldr	r3, [pc, #40]	; (800d840 <_dtoa_r+0x5b0>)
 800d818:	f7f2 feca 	bl	80005b0 <__aeabi_dmul>
 800d81c:	2200      	movs	r2, #0
 800d81e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800d822:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d826:	4b06      	ldr	r3, [pc, #24]	; (800d840 <_dtoa_r+0x5b0>)
 800d828:	f7f2 fec2 	bl	80005b0 <__aeabi_dmul>
 800d82c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d830:	e7c3      	b.n	800d7ba <_dtoa_r+0x52a>
 800d832:	bf00      	nop
 800d834:	08011330 	.word	0x08011330
 800d838:	08011308 	.word	0x08011308
 800d83c:	3ff00000 	.word	0x3ff00000
 800d840:	40240000 	.word	0x40240000
 800d844:	401c0000 	.word	0x401c0000
 800d848:	40140000 	.word	0x40140000
 800d84c:	3fe00000 	.word	0x3fe00000
 800d850:	4630      	mov	r0, r6
 800d852:	4639      	mov	r1, r7
 800d854:	f7f2 feac 	bl	80005b0 <__aeabi_dmul>
 800d858:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d85a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800d85e:	9c08      	ldr	r4, [sp, #32]
 800d860:	9314      	str	r3, [sp, #80]	; 0x50
 800d862:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d866:	f7f3 f953 	bl	8000b10 <__aeabi_d2iz>
 800d86a:	9015      	str	r0, [sp, #84]	; 0x54
 800d86c:	f7f2 fe36 	bl	80004dc <__aeabi_i2d>
 800d870:	4602      	mov	r2, r0
 800d872:	460b      	mov	r3, r1
 800d874:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d878:	f7f2 fce2 	bl	8000240 <__aeabi_dsub>
 800d87c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d87e:	4606      	mov	r6, r0
 800d880:	3330      	adds	r3, #48	; 0x30
 800d882:	f804 3b01 	strb.w	r3, [r4], #1
 800d886:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d888:	460f      	mov	r7, r1
 800d88a:	429c      	cmp	r4, r3
 800d88c:	f04f 0200 	mov.w	r2, #0
 800d890:	d124      	bne.n	800d8dc <_dtoa_r+0x64c>
 800d892:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d896:	4bb3      	ldr	r3, [pc, #716]	; (800db64 <_dtoa_r+0x8d4>)
 800d898:	f7f2 fcd4 	bl	8000244 <__adddf3>
 800d89c:	4602      	mov	r2, r0
 800d89e:	460b      	mov	r3, r1
 800d8a0:	4630      	mov	r0, r6
 800d8a2:	4639      	mov	r1, r7
 800d8a4:	f7f3 f914 	bl	8000ad0 <__aeabi_dcmpgt>
 800d8a8:	2800      	cmp	r0, #0
 800d8aa:	d162      	bne.n	800d972 <_dtoa_r+0x6e2>
 800d8ac:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d8b0:	2000      	movs	r0, #0
 800d8b2:	49ac      	ldr	r1, [pc, #688]	; (800db64 <_dtoa_r+0x8d4>)
 800d8b4:	f7f2 fcc4 	bl	8000240 <__aeabi_dsub>
 800d8b8:	4602      	mov	r2, r0
 800d8ba:	460b      	mov	r3, r1
 800d8bc:	4630      	mov	r0, r6
 800d8be:	4639      	mov	r1, r7
 800d8c0:	f7f3 f8e8 	bl	8000a94 <__aeabi_dcmplt>
 800d8c4:	2800      	cmp	r0, #0
 800d8c6:	f43f af1d 	beq.w	800d704 <_dtoa_r+0x474>
 800d8ca:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800d8cc:	1e7b      	subs	r3, r7, #1
 800d8ce:	9314      	str	r3, [sp, #80]	; 0x50
 800d8d0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800d8d4:	2b30      	cmp	r3, #48	; 0x30
 800d8d6:	d0f8      	beq.n	800d8ca <_dtoa_r+0x63a>
 800d8d8:	46c1      	mov	r9, r8
 800d8da:	e03a      	b.n	800d952 <_dtoa_r+0x6c2>
 800d8dc:	4ba2      	ldr	r3, [pc, #648]	; (800db68 <_dtoa_r+0x8d8>)
 800d8de:	f7f2 fe67 	bl	80005b0 <__aeabi_dmul>
 800d8e2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d8e6:	e7bc      	b.n	800d862 <_dtoa_r+0x5d2>
 800d8e8:	9f08      	ldr	r7, [sp, #32]
 800d8ea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d8ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d8f2:	f7f2 ff87 	bl	8000804 <__aeabi_ddiv>
 800d8f6:	f7f3 f90b 	bl	8000b10 <__aeabi_d2iz>
 800d8fa:	4604      	mov	r4, r0
 800d8fc:	f7f2 fdee 	bl	80004dc <__aeabi_i2d>
 800d900:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d904:	f7f2 fe54 	bl	80005b0 <__aeabi_dmul>
 800d908:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800d90c:	460b      	mov	r3, r1
 800d90e:	4602      	mov	r2, r0
 800d910:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d914:	f7f2 fc94 	bl	8000240 <__aeabi_dsub>
 800d918:	f807 6b01 	strb.w	r6, [r7], #1
 800d91c:	9e08      	ldr	r6, [sp, #32]
 800d91e:	9b02      	ldr	r3, [sp, #8]
 800d920:	1bbe      	subs	r6, r7, r6
 800d922:	42b3      	cmp	r3, r6
 800d924:	d13a      	bne.n	800d99c <_dtoa_r+0x70c>
 800d926:	4602      	mov	r2, r0
 800d928:	460b      	mov	r3, r1
 800d92a:	f7f2 fc8b 	bl	8000244 <__adddf3>
 800d92e:	4602      	mov	r2, r0
 800d930:	460b      	mov	r3, r1
 800d932:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d936:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d93a:	f7f3 f8c9 	bl	8000ad0 <__aeabi_dcmpgt>
 800d93e:	bb58      	cbnz	r0, 800d998 <_dtoa_r+0x708>
 800d940:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d944:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d948:	f7f3 f89a 	bl	8000a80 <__aeabi_dcmpeq>
 800d94c:	b108      	cbz	r0, 800d952 <_dtoa_r+0x6c2>
 800d94e:	07e1      	lsls	r1, r4, #31
 800d950:	d422      	bmi.n	800d998 <_dtoa_r+0x708>
 800d952:	4628      	mov	r0, r5
 800d954:	4651      	mov	r1, sl
 800d956:	f000 ff67 	bl	800e828 <_Bfree>
 800d95a:	2300      	movs	r3, #0
 800d95c:	703b      	strb	r3, [r7, #0]
 800d95e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800d960:	f109 0001 	add.w	r0, r9, #1
 800d964:	6018      	str	r0, [r3, #0]
 800d966:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d968:	2b00      	cmp	r3, #0
 800d96a:	f43f acdf 	beq.w	800d32c <_dtoa_r+0x9c>
 800d96e:	601f      	str	r7, [r3, #0]
 800d970:	e4dc      	b.n	800d32c <_dtoa_r+0x9c>
 800d972:	4627      	mov	r7, r4
 800d974:	463b      	mov	r3, r7
 800d976:	461f      	mov	r7, r3
 800d978:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d97c:	2a39      	cmp	r2, #57	; 0x39
 800d97e:	d107      	bne.n	800d990 <_dtoa_r+0x700>
 800d980:	9a08      	ldr	r2, [sp, #32]
 800d982:	429a      	cmp	r2, r3
 800d984:	d1f7      	bne.n	800d976 <_dtoa_r+0x6e6>
 800d986:	2230      	movs	r2, #48	; 0x30
 800d988:	9908      	ldr	r1, [sp, #32]
 800d98a:	f108 0801 	add.w	r8, r8, #1
 800d98e:	700a      	strb	r2, [r1, #0]
 800d990:	781a      	ldrb	r2, [r3, #0]
 800d992:	3201      	adds	r2, #1
 800d994:	701a      	strb	r2, [r3, #0]
 800d996:	e79f      	b.n	800d8d8 <_dtoa_r+0x648>
 800d998:	46c8      	mov	r8, r9
 800d99a:	e7eb      	b.n	800d974 <_dtoa_r+0x6e4>
 800d99c:	2200      	movs	r2, #0
 800d99e:	4b72      	ldr	r3, [pc, #456]	; (800db68 <_dtoa_r+0x8d8>)
 800d9a0:	f7f2 fe06 	bl	80005b0 <__aeabi_dmul>
 800d9a4:	4602      	mov	r2, r0
 800d9a6:	460b      	mov	r3, r1
 800d9a8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d9ac:	2200      	movs	r2, #0
 800d9ae:	2300      	movs	r3, #0
 800d9b0:	f7f3 f866 	bl	8000a80 <__aeabi_dcmpeq>
 800d9b4:	2800      	cmp	r0, #0
 800d9b6:	d098      	beq.n	800d8ea <_dtoa_r+0x65a>
 800d9b8:	e7cb      	b.n	800d952 <_dtoa_r+0x6c2>
 800d9ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d9bc:	2a00      	cmp	r2, #0
 800d9be:	f000 80cd 	beq.w	800db5c <_dtoa_r+0x8cc>
 800d9c2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800d9c4:	2a01      	cmp	r2, #1
 800d9c6:	f300 80af 	bgt.w	800db28 <_dtoa_r+0x898>
 800d9ca:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d9cc:	2a00      	cmp	r2, #0
 800d9ce:	f000 80a7 	beq.w	800db20 <_dtoa_r+0x890>
 800d9d2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d9d6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d9d8:	9f06      	ldr	r7, [sp, #24]
 800d9da:	9a06      	ldr	r2, [sp, #24]
 800d9dc:	2101      	movs	r1, #1
 800d9de:	441a      	add	r2, r3
 800d9e0:	9206      	str	r2, [sp, #24]
 800d9e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d9e4:	4628      	mov	r0, r5
 800d9e6:	441a      	add	r2, r3
 800d9e8:	9209      	str	r2, [sp, #36]	; 0x24
 800d9ea:	f001 f821 	bl	800ea30 <__i2b>
 800d9ee:	4606      	mov	r6, r0
 800d9f0:	2f00      	cmp	r7, #0
 800d9f2:	dd0c      	ble.n	800da0e <_dtoa_r+0x77e>
 800d9f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	dd09      	ble.n	800da0e <_dtoa_r+0x77e>
 800d9fa:	42bb      	cmp	r3, r7
 800d9fc:	bfa8      	it	ge
 800d9fe:	463b      	movge	r3, r7
 800da00:	9a06      	ldr	r2, [sp, #24]
 800da02:	1aff      	subs	r7, r7, r3
 800da04:	1ad2      	subs	r2, r2, r3
 800da06:	9206      	str	r2, [sp, #24]
 800da08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800da0a:	1ad3      	subs	r3, r2, r3
 800da0c:	9309      	str	r3, [sp, #36]	; 0x24
 800da0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800da10:	b1f3      	cbz	r3, 800da50 <_dtoa_r+0x7c0>
 800da12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800da14:	2b00      	cmp	r3, #0
 800da16:	f000 80a9 	beq.w	800db6c <_dtoa_r+0x8dc>
 800da1a:	2c00      	cmp	r4, #0
 800da1c:	dd10      	ble.n	800da40 <_dtoa_r+0x7b0>
 800da1e:	4631      	mov	r1, r6
 800da20:	4622      	mov	r2, r4
 800da22:	4628      	mov	r0, r5
 800da24:	f001 f8be 	bl	800eba4 <__pow5mult>
 800da28:	4652      	mov	r2, sl
 800da2a:	4601      	mov	r1, r0
 800da2c:	4606      	mov	r6, r0
 800da2e:	4628      	mov	r0, r5
 800da30:	f001 f814 	bl	800ea5c <__multiply>
 800da34:	4680      	mov	r8, r0
 800da36:	4651      	mov	r1, sl
 800da38:	4628      	mov	r0, r5
 800da3a:	f000 fef5 	bl	800e828 <_Bfree>
 800da3e:	46c2      	mov	sl, r8
 800da40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800da42:	1b1a      	subs	r2, r3, r4
 800da44:	d004      	beq.n	800da50 <_dtoa_r+0x7c0>
 800da46:	4651      	mov	r1, sl
 800da48:	4628      	mov	r0, r5
 800da4a:	f001 f8ab 	bl	800eba4 <__pow5mult>
 800da4e:	4682      	mov	sl, r0
 800da50:	2101      	movs	r1, #1
 800da52:	4628      	mov	r0, r5
 800da54:	f000 ffec 	bl	800ea30 <__i2b>
 800da58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800da5a:	4604      	mov	r4, r0
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	f340 8087 	ble.w	800db70 <_dtoa_r+0x8e0>
 800da62:	461a      	mov	r2, r3
 800da64:	4601      	mov	r1, r0
 800da66:	4628      	mov	r0, r5
 800da68:	f001 f89c 	bl	800eba4 <__pow5mult>
 800da6c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800da6e:	4604      	mov	r4, r0
 800da70:	2b01      	cmp	r3, #1
 800da72:	f340 8080 	ble.w	800db76 <_dtoa_r+0x8e6>
 800da76:	f04f 0800 	mov.w	r8, #0
 800da7a:	6923      	ldr	r3, [r4, #16]
 800da7c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800da80:	6918      	ldr	r0, [r3, #16]
 800da82:	f000 ff87 	bl	800e994 <__hi0bits>
 800da86:	f1c0 0020 	rsb	r0, r0, #32
 800da8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da8c:	4418      	add	r0, r3
 800da8e:	f010 001f 	ands.w	r0, r0, #31
 800da92:	f000 8092 	beq.w	800dbba <_dtoa_r+0x92a>
 800da96:	f1c0 0320 	rsb	r3, r0, #32
 800da9a:	2b04      	cmp	r3, #4
 800da9c:	f340 808a 	ble.w	800dbb4 <_dtoa_r+0x924>
 800daa0:	f1c0 001c 	rsb	r0, r0, #28
 800daa4:	9b06      	ldr	r3, [sp, #24]
 800daa6:	4407      	add	r7, r0
 800daa8:	4403      	add	r3, r0
 800daaa:	9306      	str	r3, [sp, #24]
 800daac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800daae:	4403      	add	r3, r0
 800dab0:	9309      	str	r3, [sp, #36]	; 0x24
 800dab2:	9b06      	ldr	r3, [sp, #24]
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	dd05      	ble.n	800dac4 <_dtoa_r+0x834>
 800dab8:	4651      	mov	r1, sl
 800daba:	461a      	mov	r2, r3
 800dabc:	4628      	mov	r0, r5
 800dabe:	f001 f8cb 	bl	800ec58 <__lshift>
 800dac2:	4682      	mov	sl, r0
 800dac4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	dd05      	ble.n	800dad6 <_dtoa_r+0x846>
 800daca:	4621      	mov	r1, r4
 800dacc:	461a      	mov	r2, r3
 800dace:	4628      	mov	r0, r5
 800dad0:	f001 f8c2 	bl	800ec58 <__lshift>
 800dad4:	4604      	mov	r4, r0
 800dad6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d070      	beq.n	800dbbe <_dtoa_r+0x92e>
 800dadc:	4621      	mov	r1, r4
 800dade:	4650      	mov	r0, sl
 800dae0:	f001 f926 	bl	800ed30 <__mcmp>
 800dae4:	2800      	cmp	r0, #0
 800dae6:	da6a      	bge.n	800dbbe <_dtoa_r+0x92e>
 800dae8:	2300      	movs	r3, #0
 800daea:	4651      	mov	r1, sl
 800daec:	220a      	movs	r2, #10
 800daee:	4628      	mov	r0, r5
 800daf0:	f000 febc 	bl	800e86c <__multadd>
 800daf4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800daf6:	4682      	mov	sl, r0
 800daf8:	f109 39ff 	add.w	r9, r9, #4294967295
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	f000 8193 	beq.w	800de28 <_dtoa_r+0xb98>
 800db02:	4631      	mov	r1, r6
 800db04:	2300      	movs	r3, #0
 800db06:	220a      	movs	r2, #10
 800db08:	4628      	mov	r0, r5
 800db0a:	f000 feaf 	bl	800e86c <__multadd>
 800db0e:	f1bb 0f00 	cmp.w	fp, #0
 800db12:	4606      	mov	r6, r0
 800db14:	f300 8093 	bgt.w	800dc3e <_dtoa_r+0x9ae>
 800db18:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800db1a:	2b02      	cmp	r3, #2
 800db1c:	dc57      	bgt.n	800dbce <_dtoa_r+0x93e>
 800db1e:	e08e      	b.n	800dc3e <_dtoa_r+0x9ae>
 800db20:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800db22:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800db26:	e756      	b.n	800d9d6 <_dtoa_r+0x746>
 800db28:	9b02      	ldr	r3, [sp, #8]
 800db2a:	1e5c      	subs	r4, r3, #1
 800db2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db2e:	42a3      	cmp	r3, r4
 800db30:	bfb7      	itett	lt
 800db32:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800db34:	1b1c      	subge	r4, r3, r4
 800db36:	1ae2      	sublt	r2, r4, r3
 800db38:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800db3a:	bfbe      	ittt	lt
 800db3c:	940a      	strlt	r4, [sp, #40]	; 0x28
 800db3e:	189b      	addlt	r3, r3, r2
 800db40:	930e      	strlt	r3, [sp, #56]	; 0x38
 800db42:	9b02      	ldr	r3, [sp, #8]
 800db44:	bfb8      	it	lt
 800db46:	2400      	movlt	r4, #0
 800db48:	2b00      	cmp	r3, #0
 800db4a:	bfbb      	ittet	lt
 800db4c:	9b06      	ldrlt	r3, [sp, #24]
 800db4e:	9a02      	ldrlt	r2, [sp, #8]
 800db50:	9f06      	ldrge	r7, [sp, #24]
 800db52:	1a9f      	sublt	r7, r3, r2
 800db54:	bfac      	ite	ge
 800db56:	9b02      	ldrge	r3, [sp, #8]
 800db58:	2300      	movlt	r3, #0
 800db5a:	e73e      	b.n	800d9da <_dtoa_r+0x74a>
 800db5c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800db5e:	9f06      	ldr	r7, [sp, #24]
 800db60:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800db62:	e745      	b.n	800d9f0 <_dtoa_r+0x760>
 800db64:	3fe00000 	.word	0x3fe00000
 800db68:	40240000 	.word	0x40240000
 800db6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800db6e:	e76a      	b.n	800da46 <_dtoa_r+0x7b6>
 800db70:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800db72:	2b01      	cmp	r3, #1
 800db74:	dc19      	bgt.n	800dbaa <_dtoa_r+0x91a>
 800db76:	9b04      	ldr	r3, [sp, #16]
 800db78:	b9bb      	cbnz	r3, 800dbaa <_dtoa_r+0x91a>
 800db7a:	9b05      	ldr	r3, [sp, #20]
 800db7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800db80:	b99b      	cbnz	r3, 800dbaa <_dtoa_r+0x91a>
 800db82:	9b05      	ldr	r3, [sp, #20]
 800db84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800db88:	0d1b      	lsrs	r3, r3, #20
 800db8a:	051b      	lsls	r3, r3, #20
 800db8c:	b183      	cbz	r3, 800dbb0 <_dtoa_r+0x920>
 800db8e:	f04f 0801 	mov.w	r8, #1
 800db92:	9b06      	ldr	r3, [sp, #24]
 800db94:	3301      	adds	r3, #1
 800db96:	9306      	str	r3, [sp, #24]
 800db98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db9a:	3301      	adds	r3, #1
 800db9c:	9309      	str	r3, [sp, #36]	; 0x24
 800db9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	f47f af6a 	bne.w	800da7a <_dtoa_r+0x7ea>
 800dba6:	2001      	movs	r0, #1
 800dba8:	e76f      	b.n	800da8a <_dtoa_r+0x7fa>
 800dbaa:	f04f 0800 	mov.w	r8, #0
 800dbae:	e7f6      	b.n	800db9e <_dtoa_r+0x90e>
 800dbb0:	4698      	mov	r8, r3
 800dbb2:	e7f4      	b.n	800db9e <_dtoa_r+0x90e>
 800dbb4:	f43f af7d 	beq.w	800dab2 <_dtoa_r+0x822>
 800dbb8:	4618      	mov	r0, r3
 800dbba:	301c      	adds	r0, #28
 800dbbc:	e772      	b.n	800daa4 <_dtoa_r+0x814>
 800dbbe:	9b02      	ldr	r3, [sp, #8]
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	dc36      	bgt.n	800dc32 <_dtoa_r+0x9a2>
 800dbc4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800dbc6:	2b02      	cmp	r3, #2
 800dbc8:	dd33      	ble.n	800dc32 <_dtoa_r+0x9a2>
 800dbca:	f8dd b008 	ldr.w	fp, [sp, #8]
 800dbce:	f1bb 0f00 	cmp.w	fp, #0
 800dbd2:	d10d      	bne.n	800dbf0 <_dtoa_r+0x960>
 800dbd4:	4621      	mov	r1, r4
 800dbd6:	465b      	mov	r3, fp
 800dbd8:	2205      	movs	r2, #5
 800dbda:	4628      	mov	r0, r5
 800dbdc:	f000 fe46 	bl	800e86c <__multadd>
 800dbe0:	4601      	mov	r1, r0
 800dbe2:	4604      	mov	r4, r0
 800dbe4:	4650      	mov	r0, sl
 800dbe6:	f001 f8a3 	bl	800ed30 <__mcmp>
 800dbea:	2800      	cmp	r0, #0
 800dbec:	f73f adb6 	bgt.w	800d75c <_dtoa_r+0x4cc>
 800dbf0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800dbf2:	9f08      	ldr	r7, [sp, #32]
 800dbf4:	ea6f 0903 	mvn.w	r9, r3
 800dbf8:	f04f 0800 	mov.w	r8, #0
 800dbfc:	4621      	mov	r1, r4
 800dbfe:	4628      	mov	r0, r5
 800dc00:	f000 fe12 	bl	800e828 <_Bfree>
 800dc04:	2e00      	cmp	r6, #0
 800dc06:	f43f aea4 	beq.w	800d952 <_dtoa_r+0x6c2>
 800dc0a:	f1b8 0f00 	cmp.w	r8, #0
 800dc0e:	d005      	beq.n	800dc1c <_dtoa_r+0x98c>
 800dc10:	45b0      	cmp	r8, r6
 800dc12:	d003      	beq.n	800dc1c <_dtoa_r+0x98c>
 800dc14:	4641      	mov	r1, r8
 800dc16:	4628      	mov	r0, r5
 800dc18:	f000 fe06 	bl	800e828 <_Bfree>
 800dc1c:	4631      	mov	r1, r6
 800dc1e:	4628      	mov	r0, r5
 800dc20:	f000 fe02 	bl	800e828 <_Bfree>
 800dc24:	e695      	b.n	800d952 <_dtoa_r+0x6c2>
 800dc26:	2400      	movs	r4, #0
 800dc28:	4626      	mov	r6, r4
 800dc2a:	e7e1      	b.n	800dbf0 <_dtoa_r+0x960>
 800dc2c:	46c1      	mov	r9, r8
 800dc2e:	4626      	mov	r6, r4
 800dc30:	e594      	b.n	800d75c <_dtoa_r+0x4cc>
 800dc32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dc34:	f8dd b008 	ldr.w	fp, [sp, #8]
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	f000 80fc 	beq.w	800de36 <_dtoa_r+0xba6>
 800dc3e:	2f00      	cmp	r7, #0
 800dc40:	dd05      	ble.n	800dc4e <_dtoa_r+0x9be>
 800dc42:	4631      	mov	r1, r6
 800dc44:	463a      	mov	r2, r7
 800dc46:	4628      	mov	r0, r5
 800dc48:	f001 f806 	bl	800ec58 <__lshift>
 800dc4c:	4606      	mov	r6, r0
 800dc4e:	f1b8 0f00 	cmp.w	r8, #0
 800dc52:	d05c      	beq.n	800dd0e <_dtoa_r+0xa7e>
 800dc54:	4628      	mov	r0, r5
 800dc56:	6871      	ldr	r1, [r6, #4]
 800dc58:	f000 fda6 	bl	800e7a8 <_Balloc>
 800dc5c:	4607      	mov	r7, r0
 800dc5e:	b928      	cbnz	r0, 800dc6c <_dtoa_r+0x9dc>
 800dc60:	4602      	mov	r2, r0
 800dc62:	f240 21ea 	movw	r1, #746	; 0x2ea
 800dc66:	4b7e      	ldr	r3, [pc, #504]	; (800de60 <_dtoa_r+0xbd0>)
 800dc68:	f7ff bb26 	b.w	800d2b8 <_dtoa_r+0x28>
 800dc6c:	6932      	ldr	r2, [r6, #16]
 800dc6e:	f106 010c 	add.w	r1, r6, #12
 800dc72:	3202      	adds	r2, #2
 800dc74:	0092      	lsls	r2, r2, #2
 800dc76:	300c      	adds	r0, #12
 800dc78:	f000 fd7b 	bl	800e772 <memcpy>
 800dc7c:	2201      	movs	r2, #1
 800dc7e:	4639      	mov	r1, r7
 800dc80:	4628      	mov	r0, r5
 800dc82:	f000 ffe9 	bl	800ec58 <__lshift>
 800dc86:	46b0      	mov	r8, r6
 800dc88:	4606      	mov	r6, r0
 800dc8a:	9b08      	ldr	r3, [sp, #32]
 800dc8c:	3301      	adds	r3, #1
 800dc8e:	9302      	str	r3, [sp, #8]
 800dc90:	9b08      	ldr	r3, [sp, #32]
 800dc92:	445b      	add	r3, fp
 800dc94:	930a      	str	r3, [sp, #40]	; 0x28
 800dc96:	9b04      	ldr	r3, [sp, #16]
 800dc98:	f003 0301 	and.w	r3, r3, #1
 800dc9c:	9309      	str	r3, [sp, #36]	; 0x24
 800dc9e:	9b02      	ldr	r3, [sp, #8]
 800dca0:	4621      	mov	r1, r4
 800dca2:	4650      	mov	r0, sl
 800dca4:	f103 3bff 	add.w	fp, r3, #4294967295
 800dca8:	f7ff fa64 	bl	800d174 <quorem>
 800dcac:	4603      	mov	r3, r0
 800dcae:	4641      	mov	r1, r8
 800dcb0:	3330      	adds	r3, #48	; 0x30
 800dcb2:	9004      	str	r0, [sp, #16]
 800dcb4:	4650      	mov	r0, sl
 800dcb6:	930b      	str	r3, [sp, #44]	; 0x2c
 800dcb8:	f001 f83a 	bl	800ed30 <__mcmp>
 800dcbc:	4632      	mov	r2, r6
 800dcbe:	9006      	str	r0, [sp, #24]
 800dcc0:	4621      	mov	r1, r4
 800dcc2:	4628      	mov	r0, r5
 800dcc4:	f001 f850 	bl	800ed68 <__mdiff>
 800dcc8:	68c2      	ldr	r2, [r0, #12]
 800dcca:	4607      	mov	r7, r0
 800dccc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dcce:	bb02      	cbnz	r2, 800dd12 <_dtoa_r+0xa82>
 800dcd0:	4601      	mov	r1, r0
 800dcd2:	4650      	mov	r0, sl
 800dcd4:	f001 f82c 	bl	800ed30 <__mcmp>
 800dcd8:	4602      	mov	r2, r0
 800dcda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dcdc:	4639      	mov	r1, r7
 800dcde:	4628      	mov	r0, r5
 800dce0:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800dce4:	f000 fda0 	bl	800e828 <_Bfree>
 800dce8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800dcea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dcec:	9f02      	ldr	r7, [sp, #8]
 800dcee:	ea43 0102 	orr.w	r1, r3, r2
 800dcf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dcf4:	430b      	orrs	r3, r1
 800dcf6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dcf8:	d10d      	bne.n	800dd16 <_dtoa_r+0xa86>
 800dcfa:	2b39      	cmp	r3, #57	; 0x39
 800dcfc:	d027      	beq.n	800dd4e <_dtoa_r+0xabe>
 800dcfe:	9a06      	ldr	r2, [sp, #24]
 800dd00:	2a00      	cmp	r2, #0
 800dd02:	dd01      	ble.n	800dd08 <_dtoa_r+0xa78>
 800dd04:	9b04      	ldr	r3, [sp, #16]
 800dd06:	3331      	adds	r3, #49	; 0x31
 800dd08:	f88b 3000 	strb.w	r3, [fp]
 800dd0c:	e776      	b.n	800dbfc <_dtoa_r+0x96c>
 800dd0e:	4630      	mov	r0, r6
 800dd10:	e7b9      	b.n	800dc86 <_dtoa_r+0x9f6>
 800dd12:	2201      	movs	r2, #1
 800dd14:	e7e2      	b.n	800dcdc <_dtoa_r+0xa4c>
 800dd16:	9906      	ldr	r1, [sp, #24]
 800dd18:	2900      	cmp	r1, #0
 800dd1a:	db04      	blt.n	800dd26 <_dtoa_r+0xa96>
 800dd1c:	9822      	ldr	r0, [sp, #136]	; 0x88
 800dd1e:	4301      	orrs	r1, r0
 800dd20:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dd22:	4301      	orrs	r1, r0
 800dd24:	d120      	bne.n	800dd68 <_dtoa_r+0xad8>
 800dd26:	2a00      	cmp	r2, #0
 800dd28:	ddee      	ble.n	800dd08 <_dtoa_r+0xa78>
 800dd2a:	4651      	mov	r1, sl
 800dd2c:	2201      	movs	r2, #1
 800dd2e:	4628      	mov	r0, r5
 800dd30:	9302      	str	r3, [sp, #8]
 800dd32:	f000 ff91 	bl	800ec58 <__lshift>
 800dd36:	4621      	mov	r1, r4
 800dd38:	4682      	mov	sl, r0
 800dd3a:	f000 fff9 	bl	800ed30 <__mcmp>
 800dd3e:	2800      	cmp	r0, #0
 800dd40:	9b02      	ldr	r3, [sp, #8]
 800dd42:	dc02      	bgt.n	800dd4a <_dtoa_r+0xaba>
 800dd44:	d1e0      	bne.n	800dd08 <_dtoa_r+0xa78>
 800dd46:	07da      	lsls	r2, r3, #31
 800dd48:	d5de      	bpl.n	800dd08 <_dtoa_r+0xa78>
 800dd4a:	2b39      	cmp	r3, #57	; 0x39
 800dd4c:	d1da      	bne.n	800dd04 <_dtoa_r+0xa74>
 800dd4e:	2339      	movs	r3, #57	; 0x39
 800dd50:	f88b 3000 	strb.w	r3, [fp]
 800dd54:	463b      	mov	r3, r7
 800dd56:	461f      	mov	r7, r3
 800dd58:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800dd5c:	3b01      	subs	r3, #1
 800dd5e:	2a39      	cmp	r2, #57	; 0x39
 800dd60:	d050      	beq.n	800de04 <_dtoa_r+0xb74>
 800dd62:	3201      	adds	r2, #1
 800dd64:	701a      	strb	r2, [r3, #0]
 800dd66:	e749      	b.n	800dbfc <_dtoa_r+0x96c>
 800dd68:	2a00      	cmp	r2, #0
 800dd6a:	dd03      	ble.n	800dd74 <_dtoa_r+0xae4>
 800dd6c:	2b39      	cmp	r3, #57	; 0x39
 800dd6e:	d0ee      	beq.n	800dd4e <_dtoa_r+0xabe>
 800dd70:	3301      	adds	r3, #1
 800dd72:	e7c9      	b.n	800dd08 <_dtoa_r+0xa78>
 800dd74:	9a02      	ldr	r2, [sp, #8]
 800dd76:	990a      	ldr	r1, [sp, #40]	; 0x28
 800dd78:	f802 3c01 	strb.w	r3, [r2, #-1]
 800dd7c:	428a      	cmp	r2, r1
 800dd7e:	d02a      	beq.n	800ddd6 <_dtoa_r+0xb46>
 800dd80:	4651      	mov	r1, sl
 800dd82:	2300      	movs	r3, #0
 800dd84:	220a      	movs	r2, #10
 800dd86:	4628      	mov	r0, r5
 800dd88:	f000 fd70 	bl	800e86c <__multadd>
 800dd8c:	45b0      	cmp	r8, r6
 800dd8e:	4682      	mov	sl, r0
 800dd90:	f04f 0300 	mov.w	r3, #0
 800dd94:	f04f 020a 	mov.w	r2, #10
 800dd98:	4641      	mov	r1, r8
 800dd9a:	4628      	mov	r0, r5
 800dd9c:	d107      	bne.n	800ddae <_dtoa_r+0xb1e>
 800dd9e:	f000 fd65 	bl	800e86c <__multadd>
 800dda2:	4680      	mov	r8, r0
 800dda4:	4606      	mov	r6, r0
 800dda6:	9b02      	ldr	r3, [sp, #8]
 800dda8:	3301      	adds	r3, #1
 800ddaa:	9302      	str	r3, [sp, #8]
 800ddac:	e777      	b.n	800dc9e <_dtoa_r+0xa0e>
 800ddae:	f000 fd5d 	bl	800e86c <__multadd>
 800ddb2:	4631      	mov	r1, r6
 800ddb4:	4680      	mov	r8, r0
 800ddb6:	2300      	movs	r3, #0
 800ddb8:	220a      	movs	r2, #10
 800ddba:	4628      	mov	r0, r5
 800ddbc:	f000 fd56 	bl	800e86c <__multadd>
 800ddc0:	4606      	mov	r6, r0
 800ddc2:	e7f0      	b.n	800dda6 <_dtoa_r+0xb16>
 800ddc4:	f1bb 0f00 	cmp.w	fp, #0
 800ddc8:	bfcc      	ite	gt
 800ddca:	465f      	movgt	r7, fp
 800ddcc:	2701      	movle	r7, #1
 800ddce:	f04f 0800 	mov.w	r8, #0
 800ddd2:	9a08      	ldr	r2, [sp, #32]
 800ddd4:	4417      	add	r7, r2
 800ddd6:	4651      	mov	r1, sl
 800ddd8:	2201      	movs	r2, #1
 800ddda:	4628      	mov	r0, r5
 800dddc:	9302      	str	r3, [sp, #8]
 800ddde:	f000 ff3b 	bl	800ec58 <__lshift>
 800dde2:	4621      	mov	r1, r4
 800dde4:	4682      	mov	sl, r0
 800dde6:	f000 ffa3 	bl	800ed30 <__mcmp>
 800ddea:	2800      	cmp	r0, #0
 800ddec:	dcb2      	bgt.n	800dd54 <_dtoa_r+0xac4>
 800ddee:	d102      	bne.n	800ddf6 <_dtoa_r+0xb66>
 800ddf0:	9b02      	ldr	r3, [sp, #8]
 800ddf2:	07db      	lsls	r3, r3, #31
 800ddf4:	d4ae      	bmi.n	800dd54 <_dtoa_r+0xac4>
 800ddf6:	463b      	mov	r3, r7
 800ddf8:	461f      	mov	r7, r3
 800ddfa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ddfe:	2a30      	cmp	r2, #48	; 0x30
 800de00:	d0fa      	beq.n	800ddf8 <_dtoa_r+0xb68>
 800de02:	e6fb      	b.n	800dbfc <_dtoa_r+0x96c>
 800de04:	9a08      	ldr	r2, [sp, #32]
 800de06:	429a      	cmp	r2, r3
 800de08:	d1a5      	bne.n	800dd56 <_dtoa_r+0xac6>
 800de0a:	2331      	movs	r3, #49	; 0x31
 800de0c:	f109 0901 	add.w	r9, r9, #1
 800de10:	7013      	strb	r3, [r2, #0]
 800de12:	e6f3      	b.n	800dbfc <_dtoa_r+0x96c>
 800de14:	4b13      	ldr	r3, [pc, #76]	; (800de64 <_dtoa_r+0xbd4>)
 800de16:	f7ff baa7 	b.w	800d368 <_dtoa_r+0xd8>
 800de1a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	f47f aa80 	bne.w	800d322 <_dtoa_r+0x92>
 800de22:	4b11      	ldr	r3, [pc, #68]	; (800de68 <_dtoa_r+0xbd8>)
 800de24:	f7ff baa0 	b.w	800d368 <_dtoa_r+0xd8>
 800de28:	f1bb 0f00 	cmp.w	fp, #0
 800de2c:	dc03      	bgt.n	800de36 <_dtoa_r+0xba6>
 800de2e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800de30:	2b02      	cmp	r3, #2
 800de32:	f73f aecc 	bgt.w	800dbce <_dtoa_r+0x93e>
 800de36:	9f08      	ldr	r7, [sp, #32]
 800de38:	4621      	mov	r1, r4
 800de3a:	4650      	mov	r0, sl
 800de3c:	f7ff f99a 	bl	800d174 <quorem>
 800de40:	9a08      	ldr	r2, [sp, #32]
 800de42:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800de46:	f807 3b01 	strb.w	r3, [r7], #1
 800de4a:	1aba      	subs	r2, r7, r2
 800de4c:	4593      	cmp	fp, r2
 800de4e:	ddb9      	ble.n	800ddc4 <_dtoa_r+0xb34>
 800de50:	4651      	mov	r1, sl
 800de52:	2300      	movs	r3, #0
 800de54:	220a      	movs	r2, #10
 800de56:	4628      	mov	r0, r5
 800de58:	f000 fd08 	bl	800e86c <__multadd>
 800de5c:	4682      	mov	sl, r0
 800de5e:	e7eb      	b.n	800de38 <_dtoa_r+0xba8>
 800de60:	080111b4 	.word	0x080111b4
 800de64:	08010fb8 	.word	0x08010fb8
 800de68:	08011131 	.word	0x08011131

0800de6c <std>:
 800de6c:	2300      	movs	r3, #0
 800de6e:	b510      	push	{r4, lr}
 800de70:	4604      	mov	r4, r0
 800de72:	e9c0 3300 	strd	r3, r3, [r0]
 800de76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800de7a:	6083      	str	r3, [r0, #8]
 800de7c:	8181      	strh	r1, [r0, #12]
 800de7e:	6643      	str	r3, [r0, #100]	; 0x64
 800de80:	81c2      	strh	r2, [r0, #14]
 800de82:	6183      	str	r3, [r0, #24]
 800de84:	4619      	mov	r1, r3
 800de86:	2208      	movs	r2, #8
 800de88:	305c      	adds	r0, #92	; 0x5c
 800de8a:	f7fd fcdb 	bl	800b844 <memset>
 800de8e:	4b05      	ldr	r3, [pc, #20]	; (800dea4 <std+0x38>)
 800de90:	6224      	str	r4, [r4, #32]
 800de92:	6263      	str	r3, [r4, #36]	; 0x24
 800de94:	4b04      	ldr	r3, [pc, #16]	; (800dea8 <std+0x3c>)
 800de96:	62a3      	str	r3, [r4, #40]	; 0x28
 800de98:	4b04      	ldr	r3, [pc, #16]	; (800deac <std+0x40>)
 800de9a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800de9c:	4b04      	ldr	r3, [pc, #16]	; (800deb0 <std+0x44>)
 800de9e:	6323      	str	r3, [r4, #48]	; 0x30
 800dea0:	bd10      	pop	{r4, pc}
 800dea2:	bf00      	nop
 800dea4:	0800f6a9 	.word	0x0800f6a9
 800dea8:	0800f6cb 	.word	0x0800f6cb
 800deac:	0800f703 	.word	0x0800f703
 800deb0:	0800f727 	.word	0x0800f727

0800deb4 <_cleanup_r>:
 800deb4:	4901      	ldr	r1, [pc, #4]	; (800debc <_cleanup_r+0x8>)
 800deb6:	f000 b8af 	b.w	800e018 <_fwalk_reent>
 800deba:	bf00      	nop
 800debc:	0800fa7d 	.word	0x0800fa7d

0800dec0 <__sfmoreglue>:
 800dec0:	b570      	push	{r4, r5, r6, lr}
 800dec2:	2568      	movs	r5, #104	; 0x68
 800dec4:	1e4a      	subs	r2, r1, #1
 800dec6:	4355      	muls	r5, r2
 800dec8:	460e      	mov	r6, r1
 800deca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800dece:	f7fd fd0d 	bl	800b8ec <_malloc_r>
 800ded2:	4604      	mov	r4, r0
 800ded4:	b140      	cbz	r0, 800dee8 <__sfmoreglue+0x28>
 800ded6:	2100      	movs	r1, #0
 800ded8:	e9c0 1600 	strd	r1, r6, [r0]
 800dedc:	300c      	adds	r0, #12
 800dede:	60a0      	str	r0, [r4, #8]
 800dee0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800dee4:	f7fd fcae 	bl	800b844 <memset>
 800dee8:	4620      	mov	r0, r4
 800deea:	bd70      	pop	{r4, r5, r6, pc}

0800deec <__sfp_lock_acquire>:
 800deec:	4801      	ldr	r0, [pc, #4]	; (800def4 <__sfp_lock_acquire+0x8>)
 800deee:	f000 bc1e 	b.w	800e72e <__retarget_lock_acquire_recursive>
 800def2:	bf00      	nop
 800def4:	20000c30 	.word	0x20000c30

0800def8 <__sfp_lock_release>:
 800def8:	4801      	ldr	r0, [pc, #4]	; (800df00 <__sfp_lock_release+0x8>)
 800defa:	f000 bc19 	b.w	800e730 <__retarget_lock_release_recursive>
 800defe:	bf00      	nop
 800df00:	20000c30 	.word	0x20000c30

0800df04 <__sinit_lock_acquire>:
 800df04:	4801      	ldr	r0, [pc, #4]	; (800df0c <__sinit_lock_acquire+0x8>)
 800df06:	f000 bc12 	b.w	800e72e <__retarget_lock_acquire_recursive>
 800df0a:	bf00      	nop
 800df0c:	20000c2b 	.word	0x20000c2b

0800df10 <__sinit_lock_release>:
 800df10:	4801      	ldr	r0, [pc, #4]	; (800df18 <__sinit_lock_release+0x8>)
 800df12:	f000 bc0d 	b.w	800e730 <__retarget_lock_release_recursive>
 800df16:	bf00      	nop
 800df18:	20000c2b 	.word	0x20000c2b

0800df1c <__sinit>:
 800df1c:	b510      	push	{r4, lr}
 800df1e:	4604      	mov	r4, r0
 800df20:	f7ff fff0 	bl	800df04 <__sinit_lock_acquire>
 800df24:	69a3      	ldr	r3, [r4, #24]
 800df26:	b11b      	cbz	r3, 800df30 <__sinit+0x14>
 800df28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800df2c:	f7ff bff0 	b.w	800df10 <__sinit_lock_release>
 800df30:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800df34:	6523      	str	r3, [r4, #80]	; 0x50
 800df36:	4b13      	ldr	r3, [pc, #76]	; (800df84 <__sinit+0x68>)
 800df38:	4a13      	ldr	r2, [pc, #76]	; (800df88 <__sinit+0x6c>)
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	62a2      	str	r2, [r4, #40]	; 0x28
 800df3e:	42a3      	cmp	r3, r4
 800df40:	bf08      	it	eq
 800df42:	2301      	moveq	r3, #1
 800df44:	4620      	mov	r0, r4
 800df46:	bf08      	it	eq
 800df48:	61a3      	streq	r3, [r4, #24]
 800df4a:	f000 f81f 	bl	800df8c <__sfp>
 800df4e:	6060      	str	r0, [r4, #4]
 800df50:	4620      	mov	r0, r4
 800df52:	f000 f81b 	bl	800df8c <__sfp>
 800df56:	60a0      	str	r0, [r4, #8]
 800df58:	4620      	mov	r0, r4
 800df5a:	f000 f817 	bl	800df8c <__sfp>
 800df5e:	2200      	movs	r2, #0
 800df60:	2104      	movs	r1, #4
 800df62:	60e0      	str	r0, [r4, #12]
 800df64:	6860      	ldr	r0, [r4, #4]
 800df66:	f7ff ff81 	bl	800de6c <std>
 800df6a:	2201      	movs	r2, #1
 800df6c:	2109      	movs	r1, #9
 800df6e:	68a0      	ldr	r0, [r4, #8]
 800df70:	f7ff ff7c 	bl	800de6c <std>
 800df74:	2202      	movs	r2, #2
 800df76:	2112      	movs	r1, #18
 800df78:	68e0      	ldr	r0, [r4, #12]
 800df7a:	f7ff ff77 	bl	800de6c <std>
 800df7e:	2301      	movs	r3, #1
 800df80:	61a3      	str	r3, [r4, #24]
 800df82:	e7d1      	b.n	800df28 <__sinit+0xc>
 800df84:	08010fa4 	.word	0x08010fa4
 800df88:	0800deb5 	.word	0x0800deb5

0800df8c <__sfp>:
 800df8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df8e:	4607      	mov	r7, r0
 800df90:	f7ff ffac 	bl	800deec <__sfp_lock_acquire>
 800df94:	4b1e      	ldr	r3, [pc, #120]	; (800e010 <__sfp+0x84>)
 800df96:	681e      	ldr	r6, [r3, #0]
 800df98:	69b3      	ldr	r3, [r6, #24]
 800df9a:	b913      	cbnz	r3, 800dfa2 <__sfp+0x16>
 800df9c:	4630      	mov	r0, r6
 800df9e:	f7ff ffbd 	bl	800df1c <__sinit>
 800dfa2:	3648      	adds	r6, #72	; 0x48
 800dfa4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800dfa8:	3b01      	subs	r3, #1
 800dfaa:	d503      	bpl.n	800dfb4 <__sfp+0x28>
 800dfac:	6833      	ldr	r3, [r6, #0]
 800dfae:	b30b      	cbz	r3, 800dff4 <__sfp+0x68>
 800dfb0:	6836      	ldr	r6, [r6, #0]
 800dfb2:	e7f7      	b.n	800dfa4 <__sfp+0x18>
 800dfb4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800dfb8:	b9d5      	cbnz	r5, 800dff0 <__sfp+0x64>
 800dfba:	4b16      	ldr	r3, [pc, #88]	; (800e014 <__sfp+0x88>)
 800dfbc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800dfc0:	60e3      	str	r3, [r4, #12]
 800dfc2:	6665      	str	r5, [r4, #100]	; 0x64
 800dfc4:	f000 fbb2 	bl	800e72c <__retarget_lock_init_recursive>
 800dfc8:	f7ff ff96 	bl	800def8 <__sfp_lock_release>
 800dfcc:	2208      	movs	r2, #8
 800dfce:	4629      	mov	r1, r5
 800dfd0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800dfd4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800dfd8:	6025      	str	r5, [r4, #0]
 800dfda:	61a5      	str	r5, [r4, #24]
 800dfdc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800dfe0:	f7fd fc30 	bl	800b844 <memset>
 800dfe4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800dfe8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800dfec:	4620      	mov	r0, r4
 800dfee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dff0:	3468      	adds	r4, #104	; 0x68
 800dff2:	e7d9      	b.n	800dfa8 <__sfp+0x1c>
 800dff4:	2104      	movs	r1, #4
 800dff6:	4638      	mov	r0, r7
 800dff8:	f7ff ff62 	bl	800dec0 <__sfmoreglue>
 800dffc:	4604      	mov	r4, r0
 800dffe:	6030      	str	r0, [r6, #0]
 800e000:	2800      	cmp	r0, #0
 800e002:	d1d5      	bne.n	800dfb0 <__sfp+0x24>
 800e004:	f7ff ff78 	bl	800def8 <__sfp_lock_release>
 800e008:	230c      	movs	r3, #12
 800e00a:	603b      	str	r3, [r7, #0]
 800e00c:	e7ee      	b.n	800dfec <__sfp+0x60>
 800e00e:	bf00      	nop
 800e010:	08010fa4 	.word	0x08010fa4
 800e014:	ffff0001 	.word	0xffff0001

0800e018 <_fwalk_reent>:
 800e018:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e01c:	4606      	mov	r6, r0
 800e01e:	4688      	mov	r8, r1
 800e020:	2700      	movs	r7, #0
 800e022:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e026:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e02a:	f1b9 0901 	subs.w	r9, r9, #1
 800e02e:	d505      	bpl.n	800e03c <_fwalk_reent+0x24>
 800e030:	6824      	ldr	r4, [r4, #0]
 800e032:	2c00      	cmp	r4, #0
 800e034:	d1f7      	bne.n	800e026 <_fwalk_reent+0xe>
 800e036:	4638      	mov	r0, r7
 800e038:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e03c:	89ab      	ldrh	r3, [r5, #12]
 800e03e:	2b01      	cmp	r3, #1
 800e040:	d907      	bls.n	800e052 <_fwalk_reent+0x3a>
 800e042:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e046:	3301      	adds	r3, #1
 800e048:	d003      	beq.n	800e052 <_fwalk_reent+0x3a>
 800e04a:	4629      	mov	r1, r5
 800e04c:	4630      	mov	r0, r6
 800e04e:	47c0      	blx	r8
 800e050:	4307      	orrs	r7, r0
 800e052:	3568      	adds	r5, #104	; 0x68
 800e054:	e7e9      	b.n	800e02a <_fwalk_reent+0x12>

0800e056 <rshift>:
 800e056:	6903      	ldr	r3, [r0, #16]
 800e058:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e05c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e060:	f100 0414 	add.w	r4, r0, #20
 800e064:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e068:	dd46      	ble.n	800e0f8 <rshift+0xa2>
 800e06a:	f011 011f 	ands.w	r1, r1, #31
 800e06e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e072:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e076:	d10c      	bne.n	800e092 <rshift+0x3c>
 800e078:	4629      	mov	r1, r5
 800e07a:	f100 0710 	add.w	r7, r0, #16
 800e07e:	42b1      	cmp	r1, r6
 800e080:	d335      	bcc.n	800e0ee <rshift+0x98>
 800e082:	1a9b      	subs	r3, r3, r2
 800e084:	009b      	lsls	r3, r3, #2
 800e086:	1eea      	subs	r2, r5, #3
 800e088:	4296      	cmp	r6, r2
 800e08a:	bf38      	it	cc
 800e08c:	2300      	movcc	r3, #0
 800e08e:	4423      	add	r3, r4
 800e090:	e015      	b.n	800e0be <rshift+0x68>
 800e092:	46a1      	mov	r9, r4
 800e094:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e098:	f1c1 0820 	rsb	r8, r1, #32
 800e09c:	40cf      	lsrs	r7, r1
 800e09e:	f105 0e04 	add.w	lr, r5, #4
 800e0a2:	4576      	cmp	r6, lr
 800e0a4:	46f4      	mov	ip, lr
 800e0a6:	d816      	bhi.n	800e0d6 <rshift+0x80>
 800e0a8:	1a9b      	subs	r3, r3, r2
 800e0aa:	009a      	lsls	r2, r3, #2
 800e0ac:	3a04      	subs	r2, #4
 800e0ae:	3501      	adds	r5, #1
 800e0b0:	42ae      	cmp	r6, r5
 800e0b2:	bf38      	it	cc
 800e0b4:	2200      	movcc	r2, #0
 800e0b6:	18a3      	adds	r3, r4, r2
 800e0b8:	50a7      	str	r7, [r4, r2]
 800e0ba:	b107      	cbz	r7, 800e0be <rshift+0x68>
 800e0bc:	3304      	adds	r3, #4
 800e0be:	42a3      	cmp	r3, r4
 800e0c0:	eba3 0204 	sub.w	r2, r3, r4
 800e0c4:	bf08      	it	eq
 800e0c6:	2300      	moveq	r3, #0
 800e0c8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e0cc:	6102      	str	r2, [r0, #16]
 800e0ce:	bf08      	it	eq
 800e0d0:	6143      	streq	r3, [r0, #20]
 800e0d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e0d6:	f8dc c000 	ldr.w	ip, [ip]
 800e0da:	fa0c fc08 	lsl.w	ip, ip, r8
 800e0de:	ea4c 0707 	orr.w	r7, ip, r7
 800e0e2:	f849 7b04 	str.w	r7, [r9], #4
 800e0e6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e0ea:	40cf      	lsrs	r7, r1
 800e0ec:	e7d9      	b.n	800e0a2 <rshift+0x4c>
 800e0ee:	f851 cb04 	ldr.w	ip, [r1], #4
 800e0f2:	f847 cf04 	str.w	ip, [r7, #4]!
 800e0f6:	e7c2      	b.n	800e07e <rshift+0x28>
 800e0f8:	4623      	mov	r3, r4
 800e0fa:	e7e0      	b.n	800e0be <rshift+0x68>

0800e0fc <__hexdig_fun>:
 800e0fc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800e100:	2b09      	cmp	r3, #9
 800e102:	d802      	bhi.n	800e10a <__hexdig_fun+0xe>
 800e104:	3820      	subs	r0, #32
 800e106:	b2c0      	uxtb	r0, r0
 800e108:	4770      	bx	lr
 800e10a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800e10e:	2b05      	cmp	r3, #5
 800e110:	d801      	bhi.n	800e116 <__hexdig_fun+0x1a>
 800e112:	3847      	subs	r0, #71	; 0x47
 800e114:	e7f7      	b.n	800e106 <__hexdig_fun+0xa>
 800e116:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800e11a:	2b05      	cmp	r3, #5
 800e11c:	d801      	bhi.n	800e122 <__hexdig_fun+0x26>
 800e11e:	3827      	subs	r0, #39	; 0x27
 800e120:	e7f1      	b.n	800e106 <__hexdig_fun+0xa>
 800e122:	2000      	movs	r0, #0
 800e124:	4770      	bx	lr
	...

0800e128 <__gethex>:
 800e128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e12c:	b08b      	sub	sp, #44	; 0x2c
 800e12e:	9306      	str	r3, [sp, #24]
 800e130:	4bb9      	ldr	r3, [pc, #740]	; (800e418 <__gethex+0x2f0>)
 800e132:	9002      	str	r0, [sp, #8]
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	468b      	mov	fp, r1
 800e138:	4618      	mov	r0, r3
 800e13a:	4690      	mov	r8, r2
 800e13c:	9303      	str	r3, [sp, #12]
 800e13e:	f7f2 f873 	bl	8000228 <strlen>
 800e142:	4682      	mov	sl, r0
 800e144:	9b03      	ldr	r3, [sp, #12]
 800e146:	f8db 2000 	ldr.w	r2, [fp]
 800e14a:	4403      	add	r3, r0
 800e14c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800e150:	9307      	str	r3, [sp, #28]
 800e152:	1c93      	adds	r3, r2, #2
 800e154:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800e158:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800e15c:	32fe      	adds	r2, #254	; 0xfe
 800e15e:	18d1      	adds	r1, r2, r3
 800e160:	461f      	mov	r7, r3
 800e162:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e166:	9101      	str	r1, [sp, #4]
 800e168:	2830      	cmp	r0, #48	; 0x30
 800e16a:	d0f8      	beq.n	800e15e <__gethex+0x36>
 800e16c:	f7ff ffc6 	bl	800e0fc <__hexdig_fun>
 800e170:	4604      	mov	r4, r0
 800e172:	2800      	cmp	r0, #0
 800e174:	d13a      	bne.n	800e1ec <__gethex+0xc4>
 800e176:	4652      	mov	r2, sl
 800e178:	4638      	mov	r0, r7
 800e17a:	9903      	ldr	r1, [sp, #12]
 800e17c:	f001 fad7 	bl	800f72e <strncmp>
 800e180:	4605      	mov	r5, r0
 800e182:	2800      	cmp	r0, #0
 800e184:	d166      	bne.n	800e254 <__gethex+0x12c>
 800e186:	f817 000a 	ldrb.w	r0, [r7, sl]
 800e18a:	eb07 060a 	add.w	r6, r7, sl
 800e18e:	f7ff ffb5 	bl	800e0fc <__hexdig_fun>
 800e192:	2800      	cmp	r0, #0
 800e194:	d060      	beq.n	800e258 <__gethex+0x130>
 800e196:	4633      	mov	r3, r6
 800e198:	7818      	ldrb	r0, [r3, #0]
 800e19a:	461f      	mov	r7, r3
 800e19c:	2830      	cmp	r0, #48	; 0x30
 800e19e:	f103 0301 	add.w	r3, r3, #1
 800e1a2:	d0f9      	beq.n	800e198 <__gethex+0x70>
 800e1a4:	f7ff ffaa 	bl	800e0fc <__hexdig_fun>
 800e1a8:	2301      	movs	r3, #1
 800e1aa:	fab0 f480 	clz	r4, r0
 800e1ae:	4635      	mov	r5, r6
 800e1b0:	0964      	lsrs	r4, r4, #5
 800e1b2:	9301      	str	r3, [sp, #4]
 800e1b4:	463a      	mov	r2, r7
 800e1b6:	4616      	mov	r6, r2
 800e1b8:	7830      	ldrb	r0, [r6, #0]
 800e1ba:	3201      	adds	r2, #1
 800e1bc:	f7ff ff9e 	bl	800e0fc <__hexdig_fun>
 800e1c0:	2800      	cmp	r0, #0
 800e1c2:	d1f8      	bne.n	800e1b6 <__gethex+0x8e>
 800e1c4:	4652      	mov	r2, sl
 800e1c6:	4630      	mov	r0, r6
 800e1c8:	9903      	ldr	r1, [sp, #12]
 800e1ca:	f001 fab0 	bl	800f72e <strncmp>
 800e1ce:	b980      	cbnz	r0, 800e1f2 <__gethex+0xca>
 800e1d0:	b94d      	cbnz	r5, 800e1e6 <__gethex+0xbe>
 800e1d2:	eb06 050a 	add.w	r5, r6, sl
 800e1d6:	462a      	mov	r2, r5
 800e1d8:	4616      	mov	r6, r2
 800e1da:	7830      	ldrb	r0, [r6, #0]
 800e1dc:	3201      	adds	r2, #1
 800e1de:	f7ff ff8d 	bl	800e0fc <__hexdig_fun>
 800e1e2:	2800      	cmp	r0, #0
 800e1e4:	d1f8      	bne.n	800e1d8 <__gethex+0xb0>
 800e1e6:	1bad      	subs	r5, r5, r6
 800e1e8:	00ad      	lsls	r5, r5, #2
 800e1ea:	e004      	b.n	800e1f6 <__gethex+0xce>
 800e1ec:	2400      	movs	r4, #0
 800e1ee:	4625      	mov	r5, r4
 800e1f0:	e7e0      	b.n	800e1b4 <__gethex+0x8c>
 800e1f2:	2d00      	cmp	r5, #0
 800e1f4:	d1f7      	bne.n	800e1e6 <__gethex+0xbe>
 800e1f6:	7833      	ldrb	r3, [r6, #0]
 800e1f8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e1fc:	2b50      	cmp	r3, #80	; 0x50
 800e1fe:	d139      	bne.n	800e274 <__gethex+0x14c>
 800e200:	7873      	ldrb	r3, [r6, #1]
 800e202:	2b2b      	cmp	r3, #43	; 0x2b
 800e204:	d02a      	beq.n	800e25c <__gethex+0x134>
 800e206:	2b2d      	cmp	r3, #45	; 0x2d
 800e208:	d02c      	beq.n	800e264 <__gethex+0x13c>
 800e20a:	f04f 0900 	mov.w	r9, #0
 800e20e:	1c71      	adds	r1, r6, #1
 800e210:	7808      	ldrb	r0, [r1, #0]
 800e212:	f7ff ff73 	bl	800e0fc <__hexdig_fun>
 800e216:	1e43      	subs	r3, r0, #1
 800e218:	b2db      	uxtb	r3, r3
 800e21a:	2b18      	cmp	r3, #24
 800e21c:	d82a      	bhi.n	800e274 <__gethex+0x14c>
 800e21e:	f1a0 0210 	sub.w	r2, r0, #16
 800e222:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e226:	f7ff ff69 	bl	800e0fc <__hexdig_fun>
 800e22a:	1e43      	subs	r3, r0, #1
 800e22c:	b2db      	uxtb	r3, r3
 800e22e:	2b18      	cmp	r3, #24
 800e230:	d91b      	bls.n	800e26a <__gethex+0x142>
 800e232:	f1b9 0f00 	cmp.w	r9, #0
 800e236:	d000      	beq.n	800e23a <__gethex+0x112>
 800e238:	4252      	negs	r2, r2
 800e23a:	4415      	add	r5, r2
 800e23c:	f8cb 1000 	str.w	r1, [fp]
 800e240:	b1d4      	cbz	r4, 800e278 <__gethex+0x150>
 800e242:	9b01      	ldr	r3, [sp, #4]
 800e244:	2b00      	cmp	r3, #0
 800e246:	bf14      	ite	ne
 800e248:	2700      	movne	r7, #0
 800e24a:	2706      	moveq	r7, #6
 800e24c:	4638      	mov	r0, r7
 800e24e:	b00b      	add	sp, #44	; 0x2c
 800e250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e254:	463e      	mov	r6, r7
 800e256:	4625      	mov	r5, r4
 800e258:	2401      	movs	r4, #1
 800e25a:	e7cc      	b.n	800e1f6 <__gethex+0xce>
 800e25c:	f04f 0900 	mov.w	r9, #0
 800e260:	1cb1      	adds	r1, r6, #2
 800e262:	e7d5      	b.n	800e210 <__gethex+0xe8>
 800e264:	f04f 0901 	mov.w	r9, #1
 800e268:	e7fa      	b.n	800e260 <__gethex+0x138>
 800e26a:	230a      	movs	r3, #10
 800e26c:	fb03 0202 	mla	r2, r3, r2, r0
 800e270:	3a10      	subs	r2, #16
 800e272:	e7d6      	b.n	800e222 <__gethex+0xfa>
 800e274:	4631      	mov	r1, r6
 800e276:	e7e1      	b.n	800e23c <__gethex+0x114>
 800e278:	4621      	mov	r1, r4
 800e27a:	1bf3      	subs	r3, r6, r7
 800e27c:	3b01      	subs	r3, #1
 800e27e:	2b07      	cmp	r3, #7
 800e280:	dc0a      	bgt.n	800e298 <__gethex+0x170>
 800e282:	9802      	ldr	r0, [sp, #8]
 800e284:	f000 fa90 	bl	800e7a8 <_Balloc>
 800e288:	4604      	mov	r4, r0
 800e28a:	b940      	cbnz	r0, 800e29e <__gethex+0x176>
 800e28c:	4602      	mov	r2, r0
 800e28e:	21de      	movs	r1, #222	; 0xde
 800e290:	4b62      	ldr	r3, [pc, #392]	; (800e41c <__gethex+0x2f4>)
 800e292:	4863      	ldr	r0, [pc, #396]	; (800e420 <__gethex+0x2f8>)
 800e294:	f001 fb3e 	bl	800f914 <__assert_func>
 800e298:	3101      	adds	r1, #1
 800e29a:	105b      	asrs	r3, r3, #1
 800e29c:	e7ef      	b.n	800e27e <__gethex+0x156>
 800e29e:	f04f 0b00 	mov.w	fp, #0
 800e2a2:	f100 0914 	add.w	r9, r0, #20
 800e2a6:	f1ca 0301 	rsb	r3, sl, #1
 800e2aa:	f8cd 9010 	str.w	r9, [sp, #16]
 800e2ae:	f8cd b004 	str.w	fp, [sp, #4]
 800e2b2:	9308      	str	r3, [sp, #32]
 800e2b4:	42b7      	cmp	r7, r6
 800e2b6:	d33f      	bcc.n	800e338 <__gethex+0x210>
 800e2b8:	9f04      	ldr	r7, [sp, #16]
 800e2ba:	9b01      	ldr	r3, [sp, #4]
 800e2bc:	f847 3b04 	str.w	r3, [r7], #4
 800e2c0:	eba7 0709 	sub.w	r7, r7, r9
 800e2c4:	10bf      	asrs	r7, r7, #2
 800e2c6:	6127      	str	r7, [r4, #16]
 800e2c8:	4618      	mov	r0, r3
 800e2ca:	f000 fb63 	bl	800e994 <__hi0bits>
 800e2ce:	017f      	lsls	r7, r7, #5
 800e2d0:	f8d8 6000 	ldr.w	r6, [r8]
 800e2d4:	1a3f      	subs	r7, r7, r0
 800e2d6:	42b7      	cmp	r7, r6
 800e2d8:	dd62      	ble.n	800e3a0 <__gethex+0x278>
 800e2da:	1bbf      	subs	r7, r7, r6
 800e2dc:	4639      	mov	r1, r7
 800e2de:	4620      	mov	r0, r4
 800e2e0:	f000 fef9 	bl	800f0d6 <__any_on>
 800e2e4:	4682      	mov	sl, r0
 800e2e6:	b1a8      	cbz	r0, 800e314 <__gethex+0x1ec>
 800e2e8:	f04f 0a01 	mov.w	sl, #1
 800e2ec:	1e7b      	subs	r3, r7, #1
 800e2ee:	1159      	asrs	r1, r3, #5
 800e2f0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800e2f4:	f003 021f 	and.w	r2, r3, #31
 800e2f8:	fa0a f202 	lsl.w	r2, sl, r2
 800e2fc:	420a      	tst	r2, r1
 800e2fe:	d009      	beq.n	800e314 <__gethex+0x1ec>
 800e300:	4553      	cmp	r3, sl
 800e302:	dd05      	ble.n	800e310 <__gethex+0x1e8>
 800e304:	4620      	mov	r0, r4
 800e306:	1eb9      	subs	r1, r7, #2
 800e308:	f000 fee5 	bl	800f0d6 <__any_on>
 800e30c:	2800      	cmp	r0, #0
 800e30e:	d144      	bne.n	800e39a <__gethex+0x272>
 800e310:	f04f 0a02 	mov.w	sl, #2
 800e314:	4639      	mov	r1, r7
 800e316:	4620      	mov	r0, r4
 800e318:	f7ff fe9d 	bl	800e056 <rshift>
 800e31c:	443d      	add	r5, r7
 800e31e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e322:	42ab      	cmp	r3, r5
 800e324:	da4a      	bge.n	800e3bc <__gethex+0x294>
 800e326:	4621      	mov	r1, r4
 800e328:	9802      	ldr	r0, [sp, #8]
 800e32a:	f000 fa7d 	bl	800e828 <_Bfree>
 800e32e:	2300      	movs	r3, #0
 800e330:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e332:	27a3      	movs	r7, #163	; 0xa3
 800e334:	6013      	str	r3, [r2, #0]
 800e336:	e789      	b.n	800e24c <__gethex+0x124>
 800e338:	1e73      	subs	r3, r6, #1
 800e33a:	9a07      	ldr	r2, [sp, #28]
 800e33c:	9305      	str	r3, [sp, #20]
 800e33e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e342:	4293      	cmp	r3, r2
 800e344:	d019      	beq.n	800e37a <__gethex+0x252>
 800e346:	f1bb 0f20 	cmp.w	fp, #32
 800e34a:	d107      	bne.n	800e35c <__gethex+0x234>
 800e34c:	9b04      	ldr	r3, [sp, #16]
 800e34e:	9a01      	ldr	r2, [sp, #4]
 800e350:	f843 2b04 	str.w	r2, [r3], #4
 800e354:	9304      	str	r3, [sp, #16]
 800e356:	2300      	movs	r3, #0
 800e358:	469b      	mov	fp, r3
 800e35a:	9301      	str	r3, [sp, #4]
 800e35c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800e360:	f7ff fecc 	bl	800e0fc <__hexdig_fun>
 800e364:	9b01      	ldr	r3, [sp, #4]
 800e366:	f000 000f 	and.w	r0, r0, #15
 800e36a:	fa00 f00b 	lsl.w	r0, r0, fp
 800e36e:	4303      	orrs	r3, r0
 800e370:	9301      	str	r3, [sp, #4]
 800e372:	f10b 0b04 	add.w	fp, fp, #4
 800e376:	9b05      	ldr	r3, [sp, #20]
 800e378:	e00d      	b.n	800e396 <__gethex+0x26e>
 800e37a:	9b05      	ldr	r3, [sp, #20]
 800e37c:	9a08      	ldr	r2, [sp, #32]
 800e37e:	4413      	add	r3, r2
 800e380:	42bb      	cmp	r3, r7
 800e382:	d3e0      	bcc.n	800e346 <__gethex+0x21e>
 800e384:	4618      	mov	r0, r3
 800e386:	4652      	mov	r2, sl
 800e388:	9903      	ldr	r1, [sp, #12]
 800e38a:	9309      	str	r3, [sp, #36]	; 0x24
 800e38c:	f001 f9cf 	bl	800f72e <strncmp>
 800e390:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e392:	2800      	cmp	r0, #0
 800e394:	d1d7      	bne.n	800e346 <__gethex+0x21e>
 800e396:	461e      	mov	r6, r3
 800e398:	e78c      	b.n	800e2b4 <__gethex+0x18c>
 800e39a:	f04f 0a03 	mov.w	sl, #3
 800e39e:	e7b9      	b.n	800e314 <__gethex+0x1ec>
 800e3a0:	da09      	bge.n	800e3b6 <__gethex+0x28e>
 800e3a2:	1bf7      	subs	r7, r6, r7
 800e3a4:	4621      	mov	r1, r4
 800e3a6:	463a      	mov	r2, r7
 800e3a8:	9802      	ldr	r0, [sp, #8]
 800e3aa:	f000 fc55 	bl	800ec58 <__lshift>
 800e3ae:	4604      	mov	r4, r0
 800e3b0:	1bed      	subs	r5, r5, r7
 800e3b2:	f100 0914 	add.w	r9, r0, #20
 800e3b6:	f04f 0a00 	mov.w	sl, #0
 800e3ba:	e7b0      	b.n	800e31e <__gethex+0x1f6>
 800e3bc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800e3c0:	42a8      	cmp	r0, r5
 800e3c2:	dd71      	ble.n	800e4a8 <__gethex+0x380>
 800e3c4:	1b45      	subs	r5, r0, r5
 800e3c6:	42ae      	cmp	r6, r5
 800e3c8:	dc34      	bgt.n	800e434 <__gethex+0x30c>
 800e3ca:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e3ce:	2b02      	cmp	r3, #2
 800e3d0:	d028      	beq.n	800e424 <__gethex+0x2fc>
 800e3d2:	2b03      	cmp	r3, #3
 800e3d4:	d02a      	beq.n	800e42c <__gethex+0x304>
 800e3d6:	2b01      	cmp	r3, #1
 800e3d8:	d115      	bne.n	800e406 <__gethex+0x2de>
 800e3da:	42ae      	cmp	r6, r5
 800e3dc:	d113      	bne.n	800e406 <__gethex+0x2de>
 800e3de:	2e01      	cmp	r6, #1
 800e3e0:	d10b      	bne.n	800e3fa <__gethex+0x2d2>
 800e3e2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e3e6:	9a06      	ldr	r2, [sp, #24]
 800e3e8:	2762      	movs	r7, #98	; 0x62
 800e3ea:	6013      	str	r3, [r2, #0]
 800e3ec:	2301      	movs	r3, #1
 800e3ee:	6123      	str	r3, [r4, #16]
 800e3f0:	f8c9 3000 	str.w	r3, [r9]
 800e3f4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e3f6:	601c      	str	r4, [r3, #0]
 800e3f8:	e728      	b.n	800e24c <__gethex+0x124>
 800e3fa:	4620      	mov	r0, r4
 800e3fc:	1e71      	subs	r1, r6, #1
 800e3fe:	f000 fe6a 	bl	800f0d6 <__any_on>
 800e402:	2800      	cmp	r0, #0
 800e404:	d1ed      	bne.n	800e3e2 <__gethex+0x2ba>
 800e406:	4621      	mov	r1, r4
 800e408:	9802      	ldr	r0, [sp, #8]
 800e40a:	f000 fa0d 	bl	800e828 <_Bfree>
 800e40e:	2300      	movs	r3, #0
 800e410:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e412:	2750      	movs	r7, #80	; 0x50
 800e414:	6013      	str	r3, [r2, #0]
 800e416:	e719      	b.n	800e24c <__gethex+0x124>
 800e418:	08011294 	.word	0x08011294
 800e41c:	080111b4 	.word	0x080111b4
 800e420:	08011228 	.word	0x08011228
 800e424:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e426:	2b00      	cmp	r3, #0
 800e428:	d1ed      	bne.n	800e406 <__gethex+0x2de>
 800e42a:	e7da      	b.n	800e3e2 <__gethex+0x2ba>
 800e42c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d1d7      	bne.n	800e3e2 <__gethex+0x2ba>
 800e432:	e7e8      	b.n	800e406 <__gethex+0x2de>
 800e434:	1e6f      	subs	r7, r5, #1
 800e436:	f1ba 0f00 	cmp.w	sl, #0
 800e43a:	d132      	bne.n	800e4a2 <__gethex+0x37a>
 800e43c:	b127      	cbz	r7, 800e448 <__gethex+0x320>
 800e43e:	4639      	mov	r1, r7
 800e440:	4620      	mov	r0, r4
 800e442:	f000 fe48 	bl	800f0d6 <__any_on>
 800e446:	4682      	mov	sl, r0
 800e448:	2101      	movs	r1, #1
 800e44a:	117b      	asrs	r3, r7, #5
 800e44c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800e450:	f007 071f 	and.w	r7, r7, #31
 800e454:	fa01 f707 	lsl.w	r7, r1, r7
 800e458:	421f      	tst	r7, r3
 800e45a:	f04f 0702 	mov.w	r7, #2
 800e45e:	4629      	mov	r1, r5
 800e460:	4620      	mov	r0, r4
 800e462:	bf18      	it	ne
 800e464:	f04a 0a02 	orrne.w	sl, sl, #2
 800e468:	1b76      	subs	r6, r6, r5
 800e46a:	f7ff fdf4 	bl	800e056 <rshift>
 800e46e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e472:	f1ba 0f00 	cmp.w	sl, #0
 800e476:	d048      	beq.n	800e50a <__gethex+0x3e2>
 800e478:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e47c:	2b02      	cmp	r3, #2
 800e47e:	d015      	beq.n	800e4ac <__gethex+0x384>
 800e480:	2b03      	cmp	r3, #3
 800e482:	d017      	beq.n	800e4b4 <__gethex+0x38c>
 800e484:	2b01      	cmp	r3, #1
 800e486:	d109      	bne.n	800e49c <__gethex+0x374>
 800e488:	f01a 0f02 	tst.w	sl, #2
 800e48c:	d006      	beq.n	800e49c <__gethex+0x374>
 800e48e:	f8d9 0000 	ldr.w	r0, [r9]
 800e492:	ea4a 0a00 	orr.w	sl, sl, r0
 800e496:	f01a 0f01 	tst.w	sl, #1
 800e49a:	d10e      	bne.n	800e4ba <__gethex+0x392>
 800e49c:	f047 0710 	orr.w	r7, r7, #16
 800e4a0:	e033      	b.n	800e50a <__gethex+0x3e2>
 800e4a2:	f04f 0a01 	mov.w	sl, #1
 800e4a6:	e7cf      	b.n	800e448 <__gethex+0x320>
 800e4a8:	2701      	movs	r7, #1
 800e4aa:	e7e2      	b.n	800e472 <__gethex+0x34a>
 800e4ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e4ae:	f1c3 0301 	rsb	r3, r3, #1
 800e4b2:	9315      	str	r3, [sp, #84]	; 0x54
 800e4b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d0f0      	beq.n	800e49c <__gethex+0x374>
 800e4ba:	f04f 0c00 	mov.w	ip, #0
 800e4be:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e4c2:	f104 0314 	add.w	r3, r4, #20
 800e4c6:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e4ca:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e4ce:	4618      	mov	r0, r3
 800e4d0:	f853 2b04 	ldr.w	r2, [r3], #4
 800e4d4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e4d8:	d01c      	beq.n	800e514 <__gethex+0x3ec>
 800e4da:	3201      	adds	r2, #1
 800e4dc:	6002      	str	r2, [r0, #0]
 800e4de:	2f02      	cmp	r7, #2
 800e4e0:	f104 0314 	add.w	r3, r4, #20
 800e4e4:	d13d      	bne.n	800e562 <__gethex+0x43a>
 800e4e6:	f8d8 2000 	ldr.w	r2, [r8]
 800e4ea:	3a01      	subs	r2, #1
 800e4ec:	42b2      	cmp	r2, r6
 800e4ee:	d10a      	bne.n	800e506 <__gethex+0x3de>
 800e4f0:	2201      	movs	r2, #1
 800e4f2:	1171      	asrs	r1, r6, #5
 800e4f4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e4f8:	f006 061f 	and.w	r6, r6, #31
 800e4fc:	fa02 f606 	lsl.w	r6, r2, r6
 800e500:	421e      	tst	r6, r3
 800e502:	bf18      	it	ne
 800e504:	4617      	movne	r7, r2
 800e506:	f047 0720 	orr.w	r7, r7, #32
 800e50a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e50c:	601c      	str	r4, [r3, #0]
 800e50e:	9b06      	ldr	r3, [sp, #24]
 800e510:	601d      	str	r5, [r3, #0]
 800e512:	e69b      	b.n	800e24c <__gethex+0x124>
 800e514:	4299      	cmp	r1, r3
 800e516:	f843 cc04 	str.w	ip, [r3, #-4]
 800e51a:	d8d8      	bhi.n	800e4ce <__gethex+0x3a6>
 800e51c:	68a3      	ldr	r3, [r4, #8]
 800e51e:	459b      	cmp	fp, r3
 800e520:	db17      	blt.n	800e552 <__gethex+0x42a>
 800e522:	6861      	ldr	r1, [r4, #4]
 800e524:	9802      	ldr	r0, [sp, #8]
 800e526:	3101      	adds	r1, #1
 800e528:	f000 f93e 	bl	800e7a8 <_Balloc>
 800e52c:	4681      	mov	r9, r0
 800e52e:	b918      	cbnz	r0, 800e538 <__gethex+0x410>
 800e530:	4602      	mov	r2, r0
 800e532:	2184      	movs	r1, #132	; 0x84
 800e534:	4b19      	ldr	r3, [pc, #100]	; (800e59c <__gethex+0x474>)
 800e536:	e6ac      	b.n	800e292 <__gethex+0x16a>
 800e538:	6922      	ldr	r2, [r4, #16]
 800e53a:	f104 010c 	add.w	r1, r4, #12
 800e53e:	3202      	adds	r2, #2
 800e540:	0092      	lsls	r2, r2, #2
 800e542:	300c      	adds	r0, #12
 800e544:	f000 f915 	bl	800e772 <memcpy>
 800e548:	4621      	mov	r1, r4
 800e54a:	9802      	ldr	r0, [sp, #8]
 800e54c:	f000 f96c 	bl	800e828 <_Bfree>
 800e550:	464c      	mov	r4, r9
 800e552:	6923      	ldr	r3, [r4, #16]
 800e554:	1c5a      	adds	r2, r3, #1
 800e556:	6122      	str	r2, [r4, #16]
 800e558:	2201      	movs	r2, #1
 800e55a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e55e:	615a      	str	r2, [r3, #20]
 800e560:	e7bd      	b.n	800e4de <__gethex+0x3b6>
 800e562:	6922      	ldr	r2, [r4, #16]
 800e564:	455a      	cmp	r2, fp
 800e566:	dd0b      	ble.n	800e580 <__gethex+0x458>
 800e568:	2101      	movs	r1, #1
 800e56a:	4620      	mov	r0, r4
 800e56c:	f7ff fd73 	bl	800e056 <rshift>
 800e570:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e574:	3501      	adds	r5, #1
 800e576:	42ab      	cmp	r3, r5
 800e578:	f6ff aed5 	blt.w	800e326 <__gethex+0x1fe>
 800e57c:	2701      	movs	r7, #1
 800e57e:	e7c2      	b.n	800e506 <__gethex+0x3de>
 800e580:	f016 061f 	ands.w	r6, r6, #31
 800e584:	d0fa      	beq.n	800e57c <__gethex+0x454>
 800e586:	449a      	add	sl, r3
 800e588:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800e58c:	f000 fa02 	bl	800e994 <__hi0bits>
 800e590:	f1c6 0620 	rsb	r6, r6, #32
 800e594:	42b0      	cmp	r0, r6
 800e596:	dbe7      	blt.n	800e568 <__gethex+0x440>
 800e598:	e7f0      	b.n	800e57c <__gethex+0x454>
 800e59a:	bf00      	nop
 800e59c:	080111b4 	.word	0x080111b4

0800e5a0 <L_shift>:
 800e5a0:	f1c2 0208 	rsb	r2, r2, #8
 800e5a4:	0092      	lsls	r2, r2, #2
 800e5a6:	b570      	push	{r4, r5, r6, lr}
 800e5a8:	f1c2 0620 	rsb	r6, r2, #32
 800e5ac:	6843      	ldr	r3, [r0, #4]
 800e5ae:	6804      	ldr	r4, [r0, #0]
 800e5b0:	fa03 f506 	lsl.w	r5, r3, r6
 800e5b4:	432c      	orrs	r4, r5
 800e5b6:	40d3      	lsrs	r3, r2
 800e5b8:	6004      	str	r4, [r0, #0]
 800e5ba:	f840 3f04 	str.w	r3, [r0, #4]!
 800e5be:	4288      	cmp	r0, r1
 800e5c0:	d3f4      	bcc.n	800e5ac <L_shift+0xc>
 800e5c2:	bd70      	pop	{r4, r5, r6, pc}

0800e5c4 <__match>:
 800e5c4:	b530      	push	{r4, r5, lr}
 800e5c6:	6803      	ldr	r3, [r0, #0]
 800e5c8:	3301      	adds	r3, #1
 800e5ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e5ce:	b914      	cbnz	r4, 800e5d6 <__match+0x12>
 800e5d0:	6003      	str	r3, [r0, #0]
 800e5d2:	2001      	movs	r0, #1
 800e5d4:	bd30      	pop	{r4, r5, pc}
 800e5d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e5da:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800e5de:	2d19      	cmp	r5, #25
 800e5e0:	bf98      	it	ls
 800e5e2:	3220      	addls	r2, #32
 800e5e4:	42a2      	cmp	r2, r4
 800e5e6:	d0f0      	beq.n	800e5ca <__match+0x6>
 800e5e8:	2000      	movs	r0, #0
 800e5ea:	e7f3      	b.n	800e5d4 <__match+0x10>

0800e5ec <__hexnan>:
 800e5ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5f0:	2500      	movs	r5, #0
 800e5f2:	680b      	ldr	r3, [r1, #0]
 800e5f4:	4682      	mov	sl, r0
 800e5f6:	115e      	asrs	r6, r3, #5
 800e5f8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e5fc:	f013 031f 	ands.w	r3, r3, #31
 800e600:	bf18      	it	ne
 800e602:	3604      	addne	r6, #4
 800e604:	1f37      	subs	r7, r6, #4
 800e606:	4690      	mov	r8, r2
 800e608:	46b9      	mov	r9, r7
 800e60a:	463c      	mov	r4, r7
 800e60c:	46ab      	mov	fp, r5
 800e60e:	b087      	sub	sp, #28
 800e610:	6801      	ldr	r1, [r0, #0]
 800e612:	9301      	str	r3, [sp, #4]
 800e614:	f846 5c04 	str.w	r5, [r6, #-4]
 800e618:	9502      	str	r5, [sp, #8]
 800e61a:	784a      	ldrb	r2, [r1, #1]
 800e61c:	1c4b      	adds	r3, r1, #1
 800e61e:	9303      	str	r3, [sp, #12]
 800e620:	b342      	cbz	r2, 800e674 <__hexnan+0x88>
 800e622:	4610      	mov	r0, r2
 800e624:	9105      	str	r1, [sp, #20]
 800e626:	9204      	str	r2, [sp, #16]
 800e628:	f7ff fd68 	bl	800e0fc <__hexdig_fun>
 800e62c:	2800      	cmp	r0, #0
 800e62e:	d14f      	bne.n	800e6d0 <__hexnan+0xe4>
 800e630:	9a04      	ldr	r2, [sp, #16]
 800e632:	9905      	ldr	r1, [sp, #20]
 800e634:	2a20      	cmp	r2, #32
 800e636:	d818      	bhi.n	800e66a <__hexnan+0x7e>
 800e638:	9b02      	ldr	r3, [sp, #8]
 800e63a:	459b      	cmp	fp, r3
 800e63c:	dd13      	ble.n	800e666 <__hexnan+0x7a>
 800e63e:	454c      	cmp	r4, r9
 800e640:	d206      	bcs.n	800e650 <__hexnan+0x64>
 800e642:	2d07      	cmp	r5, #7
 800e644:	dc04      	bgt.n	800e650 <__hexnan+0x64>
 800e646:	462a      	mov	r2, r5
 800e648:	4649      	mov	r1, r9
 800e64a:	4620      	mov	r0, r4
 800e64c:	f7ff ffa8 	bl	800e5a0 <L_shift>
 800e650:	4544      	cmp	r4, r8
 800e652:	d950      	bls.n	800e6f6 <__hexnan+0x10a>
 800e654:	2300      	movs	r3, #0
 800e656:	f1a4 0904 	sub.w	r9, r4, #4
 800e65a:	f844 3c04 	str.w	r3, [r4, #-4]
 800e65e:	461d      	mov	r5, r3
 800e660:	464c      	mov	r4, r9
 800e662:	f8cd b008 	str.w	fp, [sp, #8]
 800e666:	9903      	ldr	r1, [sp, #12]
 800e668:	e7d7      	b.n	800e61a <__hexnan+0x2e>
 800e66a:	2a29      	cmp	r2, #41	; 0x29
 800e66c:	d156      	bne.n	800e71c <__hexnan+0x130>
 800e66e:	3102      	adds	r1, #2
 800e670:	f8ca 1000 	str.w	r1, [sl]
 800e674:	f1bb 0f00 	cmp.w	fp, #0
 800e678:	d050      	beq.n	800e71c <__hexnan+0x130>
 800e67a:	454c      	cmp	r4, r9
 800e67c:	d206      	bcs.n	800e68c <__hexnan+0xa0>
 800e67e:	2d07      	cmp	r5, #7
 800e680:	dc04      	bgt.n	800e68c <__hexnan+0xa0>
 800e682:	462a      	mov	r2, r5
 800e684:	4649      	mov	r1, r9
 800e686:	4620      	mov	r0, r4
 800e688:	f7ff ff8a 	bl	800e5a0 <L_shift>
 800e68c:	4544      	cmp	r4, r8
 800e68e:	d934      	bls.n	800e6fa <__hexnan+0x10e>
 800e690:	4623      	mov	r3, r4
 800e692:	f1a8 0204 	sub.w	r2, r8, #4
 800e696:	f853 1b04 	ldr.w	r1, [r3], #4
 800e69a:	429f      	cmp	r7, r3
 800e69c:	f842 1f04 	str.w	r1, [r2, #4]!
 800e6a0:	d2f9      	bcs.n	800e696 <__hexnan+0xaa>
 800e6a2:	1b3b      	subs	r3, r7, r4
 800e6a4:	f023 0303 	bic.w	r3, r3, #3
 800e6a8:	3304      	adds	r3, #4
 800e6aa:	3401      	adds	r4, #1
 800e6ac:	3e03      	subs	r6, #3
 800e6ae:	42b4      	cmp	r4, r6
 800e6b0:	bf88      	it	hi
 800e6b2:	2304      	movhi	r3, #4
 800e6b4:	2200      	movs	r2, #0
 800e6b6:	4443      	add	r3, r8
 800e6b8:	f843 2b04 	str.w	r2, [r3], #4
 800e6bc:	429f      	cmp	r7, r3
 800e6be:	d2fb      	bcs.n	800e6b8 <__hexnan+0xcc>
 800e6c0:	683b      	ldr	r3, [r7, #0]
 800e6c2:	b91b      	cbnz	r3, 800e6cc <__hexnan+0xe0>
 800e6c4:	4547      	cmp	r7, r8
 800e6c6:	d127      	bne.n	800e718 <__hexnan+0x12c>
 800e6c8:	2301      	movs	r3, #1
 800e6ca:	603b      	str	r3, [r7, #0]
 800e6cc:	2005      	movs	r0, #5
 800e6ce:	e026      	b.n	800e71e <__hexnan+0x132>
 800e6d0:	3501      	adds	r5, #1
 800e6d2:	2d08      	cmp	r5, #8
 800e6d4:	f10b 0b01 	add.w	fp, fp, #1
 800e6d8:	dd06      	ble.n	800e6e8 <__hexnan+0xfc>
 800e6da:	4544      	cmp	r4, r8
 800e6dc:	d9c3      	bls.n	800e666 <__hexnan+0x7a>
 800e6de:	2300      	movs	r3, #0
 800e6e0:	2501      	movs	r5, #1
 800e6e2:	f844 3c04 	str.w	r3, [r4, #-4]
 800e6e6:	3c04      	subs	r4, #4
 800e6e8:	6822      	ldr	r2, [r4, #0]
 800e6ea:	f000 000f 	and.w	r0, r0, #15
 800e6ee:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800e6f2:	6022      	str	r2, [r4, #0]
 800e6f4:	e7b7      	b.n	800e666 <__hexnan+0x7a>
 800e6f6:	2508      	movs	r5, #8
 800e6f8:	e7b5      	b.n	800e666 <__hexnan+0x7a>
 800e6fa:	9b01      	ldr	r3, [sp, #4]
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d0df      	beq.n	800e6c0 <__hexnan+0xd4>
 800e700:	f04f 32ff 	mov.w	r2, #4294967295
 800e704:	f1c3 0320 	rsb	r3, r3, #32
 800e708:	fa22 f303 	lsr.w	r3, r2, r3
 800e70c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e710:	401a      	ands	r2, r3
 800e712:	f846 2c04 	str.w	r2, [r6, #-4]
 800e716:	e7d3      	b.n	800e6c0 <__hexnan+0xd4>
 800e718:	3f04      	subs	r7, #4
 800e71a:	e7d1      	b.n	800e6c0 <__hexnan+0xd4>
 800e71c:	2004      	movs	r0, #4
 800e71e:	b007      	add	sp, #28
 800e720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e724 <_localeconv_r>:
 800e724:	4800      	ldr	r0, [pc, #0]	; (800e728 <_localeconv_r+0x4>)
 800e726:	4770      	bx	lr
 800e728:	20000174 	.word	0x20000174

0800e72c <__retarget_lock_init_recursive>:
 800e72c:	4770      	bx	lr

0800e72e <__retarget_lock_acquire_recursive>:
 800e72e:	4770      	bx	lr

0800e730 <__retarget_lock_release_recursive>:
 800e730:	4770      	bx	lr

0800e732 <__ascii_mbtowc>:
 800e732:	b082      	sub	sp, #8
 800e734:	b901      	cbnz	r1, 800e738 <__ascii_mbtowc+0x6>
 800e736:	a901      	add	r1, sp, #4
 800e738:	b142      	cbz	r2, 800e74c <__ascii_mbtowc+0x1a>
 800e73a:	b14b      	cbz	r3, 800e750 <__ascii_mbtowc+0x1e>
 800e73c:	7813      	ldrb	r3, [r2, #0]
 800e73e:	600b      	str	r3, [r1, #0]
 800e740:	7812      	ldrb	r2, [r2, #0]
 800e742:	1e10      	subs	r0, r2, #0
 800e744:	bf18      	it	ne
 800e746:	2001      	movne	r0, #1
 800e748:	b002      	add	sp, #8
 800e74a:	4770      	bx	lr
 800e74c:	4610      	mov	r0, r2
 800e74e:	e7fb      	b.n	800e748 <__ascii_mbtowc+0x16>
 800e750:	f06f 0001 	mvn.w	r0, #1
 800e754:	e7f8      	b.n	800e748 <__ascii_mbtowc+0x16>

0800e756 <memchr>:
 800e756:	4603      	mov	r3, r0
 800e758:	b510      	push	{r4, lr}
 800e75a:	b2c9      	uxtb	r1, r1
 800e75c:	4402      	add	r2, r0
 800e75e:	4293      	cmp	r3, r2
 800e760:	4618      	mov	r0, r3
 800e762:	d101      	bne.n	800e768 <memchr+0x12>
 800e764:	2000      	movs	r0, #0
 800e766:	e003      	b.n	800e770 <memchr+0x1a>
 800e768:	7804      	ldrb	r4, [r0, #0]
 800e76a:	3301      	adds	r3, #1
 800e76c:	428c      	cmp	r4, r1
 800e76e:	d1f6      	bne.n	800e75e <memchr+0x8>
 800e770:	bd10      	pop	{r4, pc}

0800e772 <memcpy>:
 800e772:	440a      	add	r2, r1
 800e774:	4291      	cmp	r1, r2
 800e776:	f100 33ff 	add.w	r3, r0, #4294967295
 800e77a:	d100      	bne.n	800e77e <memcpy+0xc>
 800e77c:	4770      	bx	lr
 800e77e:	b510      	push	{r4, lr}
 800e780:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e784:	4291      	cmp	r1, r2
 800e786:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e78a:	d1f9      	bne.n	800e780 <memcpy+0xe>
 800e78c:	bd10      	pop	{r4, pc}
	...

0800e790 <__malloc_lock>:
 800e790:	4801      	ldr	r0, [pc, #4]	; (800e798 <__malloc_lock+0x8>)
 800e792:	f7ff bfcc 	b.w	800e72e <__retarget_lock_acquire_recursive>
 800e796:	bf00      	nop
 800e798:	20000c2c 	.word	0x20000c2c

0800e79c <__malloc_unlock>:
 800e79c:	4801      	ldr	r0, [pc, #4]	; (800e7a4 <__malloc_unlock+0x8>)
 800e79e:	f7ff bfc7 	b.w	800e730 <__retarget_lock_release_recursive>
 800e7a2:	bf00      	nop
 800e7a4:	20000c2c 	.word	0x20000c2c

0800e7a8 <_Balloc>:
 800e7a8:	b570      	push	{r4, r5, r6, lr}
 800e7aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e7ac:	4604      	mov	r4, r0
 800e7ae:	460d      	mov	r5, r1
 800e7b0:	b976      	cbnz	r6, 800e7d0 <_Balloc+0x28>
 800e7b2:	2010      	movs	r0, #16
 800e7b4:	f7fd f836 	bl	800b824 <malloc>
 800e7b8:	4602      	mov	r2, r0
 800e7ba:	6260      	str	r0, [r4, #36]	; 0x24
 800e7bc:	b920      	cbnz	r0, 800e7c8 <_Balloc+0x20>
 800e7be:	2166      	movs	r1, #102	; 0x66
 800e7c0:	4b17      	ldr	r3, [pc, #92]	; (800e820 <_Balloc+0x78>)
 800e7c2:	4818      	ldr	r0, [pc, #96]	; (800e824 <_Balloc+0x7c>)
 800e7c4:	f001 f8a6 	bl	800f914 <__assert_func>
 800e7c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e7cc:	6006      	str	r6, [r0, #0]
 800e7ce:	60c6      	str	r6, [r0, #12]
 800e7d0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e7d2:	68f3      	ldr	r3, [r6, #12]
 800e7d4:	b183      	cbz	r3, 800e7f8 <_Balloc+0x50>
 800e7d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e7d8:	68db      	ldr	r3, [r3, #12]
 800e7da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e7de:	b9b8      	cbnz	r0, 800e810 <_Balloc+0x68>
 800e7e0:	2101      	movs	r1, #1
 800e7e2:	fa01 f605 	lsl.w	r6, r1, r5
 800e7e6:	1d72      	adds	r2, r6, #5
 800e7e8:	4620      	mov	r0, r4
 800e7ea:	0092      	lsls	r2, r2, #2
 800e7ec:	f000 fc94 	bl	800f118 <_calloc_r>
 800e7f0:	b160      	cbz	r0, 800e80c <_Balloc+0x64>
 800e7f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e7f6:	e00e      	b.n	800e816 <_Balloc+0x6e>
 800e7f8:	2221      	movs	r2, #33	; 0x21
 800e7fa:	2104      	movs	r1, #4
 800e7fc:	4620      	mov	r0, r4
 800e7fe:	f000 fc8b 	bl	800f118 <_calloc_r>
 800e802:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e804:	60f0      	str	r0, [r6, #12]
 800e806:	68db      	ldr	r3, [r3, #12]
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d1e4      	bne.n	800e7d6 <_Balloc+0x2e>
 800e80c:	2000      	movs	r0, #0
 800e80e:	bd70      	pop	{r4, r5, r6, pc}
 800e810:	6802      	ldr	r2, [r0, #0]
 800e812:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e816:	2300      	movs	r3, #0
 800e818:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e81c:	e7f7      	b.n	800e80e <_Balloc+0x66>
 800e81e:	bf00      	nop
 800e820:	0801113e 	.word	0x0801113e
 800e824:	080112a8 	.word	0x080112a8

0800e828 <_Bfree>:
 800e828:	b570      	push	{r4, r5, r6, lr}
 800e82a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e82c:	4605      	mov	r5, r0
 800e82e:	460c      	mov	r4, r1
 800e830:	b976      	cbnz	r6, 800e850 <_Bfree+0x28>
 800e832:	2010      	movs	r0, #16
 800e834:	f7fc fff6 	bl	800b824 <malloc>
 800e838:	4602      	mov	r2, r0
 800e83a:	6268      	str	r0, [r5, #36]	; 0x24
 800e83c:	b920      	cbnz	r0, 800e848 <_Bfree+0x20>
 800e83e:	218a      	movs	r1, #138	; 0x8a
 800e840:	4b08      	ldr	r3, [pc, #32]	; (800e864 <_Bfree+0x3c>)
 800e842:	4809      	ldr	r0, [pc, #36]	; (800e868 <_Bfree+0x40>)
 800e844:	f001 f866 	bl	800f914 <__assert_func>
 800e848:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e84c:	6006      	str	r6, [r0, #0]
 800e84e:	60c6      	str	r6, [r0, #12]
 800e850:	b13c      	cbz	r4, 800e862 <_Bfree+0x3a>
 800e852:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e854:	6862      	ldr	r2, [r4, #4]
 800e856:	68db      	ldr	r3, [r3, #12]
 800e858:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e85c:	6021      	str	r1, [r4, #0]
 800e85e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e862:	bd70      	pop	{r4, r5, r6, pc}
 800e864:	0801113e 	.word	0x0801113e
 800e868:	080112a8 	.word	0x080112a8

0800e86c <__multadd>:
 800e86c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e870:	4698      	mov	r8, r3
 800e872:	460c      	mov	r4, r1
 800e874:	2300      	movs	r3, #0
 800e876:	690e      	ldr	r6, [r1, #16]
 800e878:	4607      	mov	r7, r0
 800e87a:	f101 0014 	add.w	r0, r1, #20
 800e87e:	6805      	ldr	r5, [r0, #0]
 800e880:	3301      	adds	r3, #1
 800e882:	b2a9      	uxth	r1, r5
 800e884:	fb02 8101 	mla	r1, r2, r1, r8
 800e888:	0c2d      	lsrs	r5, r5, #16
 800e88a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800e88e:	fb02 c505 	mla	r5, r2, r5, ip
 800e892:	b289      	uxth	r1, r1
 800e894:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800e898:	429e      	cmp	r6, r3
 800e89a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800e89e:	f840 1b04 	str.w	r1, [r0], #4
 800e8a2:	dcec      	bgt.n	800e87e <__multadd+0x12>
 800e8a4:	f1b8 0f00 	cmp.w	r8, #0
 800e8a8:	d022      	beq.n	800e8f0 <__multadd+0x84>
 800e8aa:	68a3      	ldr	r3, [r4, #8]
 800e8ac:	42b3      	cmp	r3, r6
 800e8ae:	dc19      	bgt.n	800e8e4 <__multadd+0x78>
 800e8b0:	6861      	ldr	r1, [r4, #4]
 800e8b2:	4638      	mov	r0, r7
 800e8b4:	3101      	adds	r1, #1
 800e8b6:	f7ff ff77 	bl	800e7a8 <_Balloc>
 800e8ba:	4605      	mov	r5, r0
 800e8bc:	b928      	cbnz	r0, 800e8ca <__multadd+0x5e>
 800e8be:	4602      	mov	r2, r0
 800e8c0:	21b5      	movs	r1, #181	; 0xb5
 800e8c2:	4b0d      	ldr	r3, [pc, #52]	; (800e8f8 <__multadd+0x8c>)
 800e8c4:	480d      	ldr	r0, [pc, #52]	; (800e8fc <__multadd+0x90>)
 800e8c6:	f001 f825 	bl	800f914 <__assert_func>
 800e8ca:	6922      	ldr	r2, [r4, #16]
 800e8cc:	f104 010c 	add.w	r1, r4, #12
 800e8d0:	3202      	adds	r2, #2
 800e8d2:	0092      	lsls	r2, r2, #2
 800e8d4:	300c      	adds	r0, #12
 800e8d6:	f7ff ff4c 	bl	800e772 <memcpy>
 800e8da:	4621      	mov	r1, r4
 800e8dc:	4638      	mov	r0, r7
 800e8de:	f7ff ffa3 	bl	800e828 <_Bfree>
 800e8e2:	462c      	mov	r4, r5
 800e8e4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800e8e8:	3601      	adds	r6, #1
 800e8ea:	f8c3 8014 	str.w	r8, [r3, #20]
 800e8ee:	6126      	str	r6, [r4, #16]
 800e8f0:	4620      	mov	r0, r4
 800e8f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8f6:	bf00      	nop
 800e8f8:	080111b4 	.word	0x080111b4
 800e8fc:	080112a8 	.word	0x080112a8

0800e900 <__s2b>:
 800e900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e904:	4615      	mov	r5, r2
 800e906:	2209      	movs	r2, #9
 800e908:	461f      	mov	r7, r3
 800e90a:	3308      	adds	r3, #8
 800e90c:	460c      	mov	r4, r1
 800e90e:	fb93 f3f2 	sdiv	r3, r3, r2
 800e912:	4606      	mov	r6, r0
 800e914:	2201      	movs	r2, #1
 800e916:	2100      	movs	r1, #0
 800e918:	429a      	cmp	r2, r3
 800e91a:	db09      	blt.n	800e930 <__s2b+0x30>
 800e91c:	4630      	mov	r0, r6
 800e91e:	f7ff ff43 	bl	800e7a8 <_Balloc>
 800e922:	b940      	cbnz	r0, 800e936 <__s2b+0x36>
 800e924:	4602      	mov	r2, r0
 800e926:	21ce      	movs	r1, #206	; 0xce
 800e928:	4b18      	ldr	r3, [pc, #96]	; (800e98c <__s2b+0x8c>)
 800e92a:	4819      	ldr	r0, [pc, #100]	; (800e990 <__s2b+0x90>)
 800e92c:	f000 fff2 	bl	800f914 <__assert_func>
 800e930:	0052      	lsls	r2, r2, #1
 800e932:	3101      	adds	r1, #1
 800e934:	e7f0      	b.n	800e918 <__s2b+0x18>
 800e936:	9b08      	ldr	r3, [sp, #32]
 800e938:	2d09      	cmp	r5, #9
 800e93a:	6143      	str	r3, [r0, #20]
 800e93c:	f04f 0301 	mov.w	r3, #1
 800e940:	6103      	str	r3, [r0, #16]
 800e942:	dd16      	ble.n	800e972 <__s2b+0x72>
 800e944:	f104 0909 	add.w	r9, r4, #9
 800e948:	46c8      	mov	r8, r9
 800e94a:	442c      	add	r4, r5
 800e94c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e950:	4601      	mov	r1, r0
 800e952:	220a      	movs	r2, #10
 800e954:	4630      	mov	r0, r6
 800e956:	3b30      	subs	r3, #48	; 0x30
 800e958:	f7ff ff88 	bl	800e86c <__multadd>
 800e95c:	45a0      	cmp	r8, r4
 800e95e:	d1f5      	bne.n	800e94c <__s2b+0x4c>
 800e960:	f1a5 0408 	sub.w	r4, r5, #8
 800e964:	444c      	add	r4, r9
 800e966:	1b2d      	subs	r5, r5, r4
 800e968:	1963      	adds	r3, r4, r5
 800e96a:	42bb      	cmp	r3, r7
 800e96c:	db04      	blt.n	800e978 <__s2b+0x78>
 800e96e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e972:	2509      	movs	r5, #9
 800e974:	340a      	adds	r4, #10
 800e976:	e7f6      	b.n	800e966 <__s2b+0x66>
 800e978:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e97c:	4601      	mov	r1, r0
 800e97e:	220a      	movs	r2, #10
 800e980:	4630      	mov	r0, r6
 800e982:	3b30      	subs	r3, #48	; 0x30
 800e984:	f7ff ff72 	bl	800e86c <__multadd>
 800e988:	e7ee      	b.n	800e968 <__s2b+0x68>
 800e98a:	bf00      	nop
 800e98c:	080111b4 	.word	0x080111b4
 800e990:	080112a8 	.word	0x080112a8

0800e994 <__hi0bits>:
 800e994:	0c02      	lsrs	r2, r0, #16
 800e996:	0412      	lsls	r2, r2, #16
 800e998:	4603      	mov	r3, r0
 800e99a:	b9ca      	cbnz	r2, 800e9d0 <__hi0bits+0x3c>
 800e99c:	0403      	lsls	r3, r0, #16
 800e99e:	2010      	movs	r0, #16
 800e9a0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800e9a4:	bf04      	itt	eq
 800e9a6:	021b      	lsleq	r3, r3, #8
 800e9a8:	3008      	addeq	r0, #8
 800e9aa:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800e9ae:	bf04      	itt	eq
 800e9b0:	011b      	lsleq	r3, r3, #4
 800e9b2:	3004      	addeq	r0, #4
 800e9b4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800e9b8:	bf04      	itt	eq
 800e9ba:	009b      	lsleq	r3, r3, #2
 800e9bc:	3002      	addeq	r0, #2
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	db05      	blt.n	800e9ce <__hi0bits+0x3a>
 800e9c2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800e9c6:	f100 0001 	add.w	r0, r0, #1
 800e9ca:	bf08      	it	eq
 800e9cc:	2020      	moveq	r0, #32
 800e9ce:	4770      	bx	lr
 800e9d0:	2000      	movs	r0, #0
 800e9d2:	e7e5      	b.n	800e9a0 <__hi0bits+0xc>

0800e9d4 <__lo0bits>:
 800e9d4:	6803      	ldr	r3, [r0, #0]
 800e9d6:	4602      	mov	r2, r0
 800e9d8:	f013 0007 	ands.w	r0, r3, #7
 800e9dc:	d00b      	beq.n	800e9f6 <__lo0bits+0x22>
 800e9de:	07d9      	lsls	r1, r3, #31
 800e9e0:	d422      	bmi.n	800ea28 <__lo0bits+0x54>
 800e9e2:	0798      	lsls	r0, r3, #30
 800e9e4:	bf49      	itett	mi
 800e9e6:	085b      	lsrmi	r3, r3, #1
 800e9e8:	089b      	lsrpl	r3, r3, #2
 800e9ea:	2001      	movmi	r0, #1
 800e9ec:	6013      	strmi	r3, [r2, #0]
 800e9ee:	bf5c      	itt	pl
 800e9f0:	2002      	movpl	r0, #2
 800e9f2:	6013      	strpl	r3, [r2, #0]
 800e9f4:	4770      	bx	lr
 800e9f6:	b299      	uxth	r1, r3
 800e9f8:	b909      	cbnz	r1, 800e9fe <__lo0bits+0x2a>
 800e9fa:	2010      	movs	r0, #16
 800e9fc:	0c1b      	lsrs	r3, r3, #16
 800e9fe:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ea02:	bf04      	itt	eq
 800ea04:	0a1b      	lsreq	r3, r3, #8
 800ea06:	3008      	addeq	r0, #8
 800ea08:	0719      	lsls	r1, r3, #28
 800ea0a:	bf04      	itt	eq
 800ea0c:	091b      	lsreq	r3, r3, #4
 800ea0e:	3004      	addeq	r0, #4
 800ea10:	0799      	lsls	r1, r3, #30
 800ea12:	bf04      	itt	eq
 800ea14:	089b      	lsreq	r3, r3, #2
 800ea16:	3002      	addeq	r0, #2
 800ea18:	07d9      	lsls	r1, r3, #31
 800ea1a:	d403      	bmi.n	800ea24 <__lo0bits+0x50>
 800ea1c:	085b      	lsrs	r3, r3, #1
 800ea1e:	f100 0001 	add.w	r0, r0, #1
 800ea22:	d003      	beq.n	800ea2c <__lo0bits+0x58>
 800ea24:	6013      	str	r3, [r2, #0]
 800ea26:	4770      	bx	lr
 800ea28:	2000      	movs	r0, #0
 800ea2a:	4770      	bx	lr
 800ea2c:	2020      	movs	r0, #32
 800ea2e:	4770      	bx	lr

0800ea30 <__i2b>:
 800ea30:	b510      	push	{r4, lr}
 800ea32:	460c      	mov	r4, r1
 800ea34:	2101      	movs	r1, #1
 800ea36:	f7ff feb7 	bl	800e7a8 <_Balloc>
 800ea3a:	4602      	mov	r2, r0
 800ea3c:	b928      	cbnz	r0, 800ea4a <__i2b+0x1a>
 800ea3e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ea42:	4b04      	ldr	r3, [pc, #16]	; (800ea54 <__i2b+0x24>)
 800ea44:	4804      	ldr	r0, [pc, #16]	; (800ea58 <__i2b+0x28>)
 800ea46:	f000 ff65 	bl	800f914 <__assert_func>
 800ea4a:	2301      	movs	r3, #1
 800ea4c:	6144      	str	r4, [r0, #20]
 800ea4e:	6103      	str	r3, [r0, #16]
 800ea50:	bd10      	pop	{r4, pc}
 800ea52:	bf00      	nop
 800ea54:	080111b4 	.word	0x080111b4
 800ea58:	080112a8 	.word	0x080112a8

0800ea5c <__multiply>:
 800ea5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea60:	4614      	mov	r4, r2
 800ea62:	690a      	ldr	r2, [r1, #16]
 800ea64:	6923      	ldr	r3, [r4, #16]
 800ea66:	460d      	mov	r5, r1
 800ea68:	429a      	cmp	r2, r3
 800ea6a:	bfbe      	ittt	lt
 800ea6c:	460b      	movlt	r3, r1
 800ea6e:	4625      	movlt	r5, r4
 800ea70:	461c      	movlt	r4, r3
 800ea72:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800ea76:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ea7a:	68ab      	ldr	r3, [r5, #8]
 800ea7c:	6869      	ldr	r1, [r5, #4]
 800ea7e:	eb0a 0709 	add.w	r7, sl, r9
 800ea82:	42bb      	cmp	r3, r7
 800ea84:	b085      	sub	sp, #20
 800ea86:	bfb8      	it	lt
 800ea88:	3101      	addlt	r1, #1
 800ea8a:	f7ff fe8d 	bl	800e7a8 <_Balloc>
 800ea8e:	b930      	cbnz	r0, 800ea9e <__multiply+0x42>
 800ea90:	4602      	mov	r2, r0
 800ea92:	f240 115d 	movw	r1, #349	; 0x15d
 800ea96:	4b41      	ldr	r3, [pc, #260]	; (800eb9c <__multiply+0x140>)
 800ea98:	4841      	ldr	r0, [pc, #260]	; (800eba0 <__multiply+0x144>)
 800ea9a:	f000 ff3b 	bl	800f914 <__assert_func>
 800ea9e:	f100 0614 	add.w	r6, r0, #20
 800eaa2:	4633      	mov	r3, r6
 800eaa4:	2200      	movs	r2, #0
 800eaa6:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800eaaa:	4543      	cmp	r3, r8
 800eaac:	d31e      	bcc.n	800eaec <__multiply+0x90>
 800eaae:	f105 0c14 	add.w	ip, r5, #20
 800eab2:	f104 0314 	add.w	r3, r4, #20
 800eab6:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800eaba:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800eabe:	9202      	str	r2, [sp, #8]
 800eac0:	ebac 0205 	sub.w	r2, ip, r5
 800eac4:	3a15      	subs	r2, #21
 800eac6:	f022 0203 	bic.w	r2, r2, #3
 800eaca:	3204      	adds	r2, #4
 800eacc:	f105 0115 	add.w	r1, r5, #21
 800ead0:	458c      	cmp	ip, r1
 800ead2:	bf38      	it	cc
 800ead4:	2204      	movcc	r2, #4
 800ead6:	9201      	str	r2, [sp, #4]
 800ead8:	9a02      	ldr	r2, [sp, #8]
 800eada:	9303      	str	r3, [sp, #12]
 800eadc:	429a      	cmp	r2, r3
 800eade:	d808      	bhi.n	800eaf2 <__multiply+0x96>
 800eae0:	2f00      	cmp	r7, #0
 800eae2:	dc55      	bgt.n	800eb90 <__multiply+0x134>
 800eae4:	6107      	str	r7, [r0, #16]
 800eae6:	b005      	add	sp, #20
 800eae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eaec:	f843 2b04 	str.w	r2, [r3], #4
 800eaf0:	e7db      	b.n	800eaaa <__multiply+0x4e>
 800eaf2:	f8b3 a000 	ldrh.w	sl, [r3]
 800eaf6:	f1ba 0f00 	cmp.w	sl, #0
 800eafa:	d020      	beq.n	800eb3e <__multiply+0xe2>
 800eafc:	46b1      	mov	r9, r6
 800eafe:	2200      	movs	r2, #0
 800eb00:	f105 0e14 	add.w	lr, r5, #20
 800eb04:	f85e 4b04 	ldr.w	r4, [lr], #4
 800eb08:	f8d9 b000 	ldr.w	fp, [r9]
 800eb0c:	b2a1      	uxth	r1, r4
 800eb0e:	fa1f fb8b 	uxth.w	fp, fp
 800eb12:	fb0a b101 	mla	r1, sl, r1, fp
 800eb16:	4411      	add	r1, r2
 800eb18:	f8d9 2000 	ldr.w	r2, [r9]
 800eb1c:	0c24      	lsrs	r4, r4, #16
 800eb1e:	0c12      	lsrs	r2, r2, #16
 800eb20:	fb0a 2404 	mla	r4, sl, r4, r2
 800eb24:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800eb28:	b289      	uxth	r1, r1
 800eb2a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800eb2e:	45f4      	cmp	ip, lr
 800eb30:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800eb34:	f849 1b04 	str.w	r1, [r9], #4
 800eb38:	d8e4      	bhi.n	800eb04 <__multiply+0xa8>
 800eb3a:	9901      	ldr	r1, [sp, #4]
 800eb3c:	5072      	str	r2, [r6, r1]
 800eb3e:	9a03      	ldr	r2, [sp, #12]
 800eb40:	3304      	adds	r3, #4
 800eb42:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800eb46:	f1b9 0f00 	cmp.w	r9, #0
 800eb4a:	d01f      	beq.n	800eb8c <__multiply+0x130>
 800eb4c:	46b6      	mov	lr, r6
 800eb4e:	f04f 0a00 	mov.w	sl, #0
 800eb52:	6834      	ldr	r4, [r6, #0]
 800eb54:	f105 0114 	add.w	r1, r5, #20
 800eb58:	880a      	ldrh	r2, [r1, #0]
 800eb5a:	f8be b002 	ldrh.w	fp, [lr, #2]
 800eb5e:	b2a4      	uxth	r4, r4
 800eb60:	fb09 b202 	mla	r2, r9, r2, fp
 800eb64:	4492      	add	sl, r2
 800eb66:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800eb6a:	f84e 4b04 	str.w	r4, [lr], #4
 800eb6e:	f851 4b04 	ldr.w	r4, [r1], #4
 800eb72:	f8be 2000 	ldrh.w	r2, [lr]
 800eb76:	0c24      	lsrs	r4, r4, #16
 800eb78:	fb09 2404 	mla	r4, r9, r4, r2
 800eb7c:	458c      	cmp	ip, r1
 800eb7e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800eb82:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800eb86:	d8e7      	bhi.n	800eb58 <__multiply+0xfc>
 800eb88:	9a01      	ldr	r2, [sp, #4]
 800eb8a:	50b4      	str	r4, [r6, r2]
 800eb8c:	3604      	adds	r6, #4
 800eb8e:	e7a3      	b.n	800ead8 <__multiply+0x7c>
 800eb90:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d1a5      	bne.n	800eae4 <__multiply+0x88>
 800eb98:	3f01      	subs	r7, #1
 800eb9a:	e7a1      	b.n	800eae0 <__multiply+0x84>
 800eb9c:	080111b4 	.word	0x080111b4
 800eba0:	080112a8 	.word	0x080112a8

0800eba4 <__pow5mult>:
 800eba4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eba8:	4615      	mov	r5, r2
 800ebaa:	f012 0203 	ands.w	r2, r2, #3
 800ebae:	4606      	mov	r6, r0
 800ebb0:	460f      	mov	r7, r1
 800ebb2:	d007      	beq.n	800ebc4 <__pow5mult+0x20>
 800ebb4:	4c25      	ldr	r4, [pc, #148]	; (800ec4c <__pow5mult+0xa8>)
 800ebb6:	3a01      	subs	r2, #1
 800ebb8:	2300      	movs	r3, #0
 800ebba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ebbe:	f7ff fe55 	bl	800e86c <__multadd>
 800ebc2:	4607      	mov	r7, r0
 800ebc4:	10ad      	asrs	r5, r5, #2
 800ebc6:	d03d      	beq.n	800ec44 <__pow5mult+0xa0>
 800ebc8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ebca:	b97c      	cbnz	r4, 800ebec <__pow5mult+0x48>
 800ebcc:	2010      	movs	r0, #16
 800ebce:	f7fc fe29 	bl	800b824 <malloc>
 800ebd2:	4602      	mov	r2, r0
 800ebd4:	6270      	str	r0, [r6, #36]	; 0x24
 800ebd6:	b928      	cbnz	r0, 800ebe4 <__pow5mult+0x40>
 800ebd8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ebdc:	4b1c      	ldr	r3, [pc, #112]	; (800ec50 <__pow5mult+0xac>)
 800ebde:	481d      	ldr	r0, [pc, #116]	; (800ec54 <__pow5mult+0xb0>)
 800ebe0:	f000 fe98 	bl	800f914 <__assert_func>
 800ebe4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ebe8:	6004      	str	r4, [r0, #0]
 800ebea:	60c4      	str	r4, [r0, #12]
 800ebec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ebf0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ebf4:	b94c      	cbnz	r4, 800ec0a <__pow5mult+0x66>
 800ebf6:	f240 2171 	movw	r1, #625	; 0x271
 800ebfa:	4630      	mov	r0, r6
 800ebfc:	f7ff ff18 	bl	800ea30 <__i2b>
 800ec00:	2300      	movs	r3, #0
 800ec02:	4604      	mov	r4, r0
 800ec04:	f8c8 0008 	str.w	r0, [r8, #8]
 800ec08:	6003      	str	r3, [r0, #0]
 800ec0a:	f04f 0900 	mov.w	r9, #0
 800ec0e:	07eb      	lsls	r3, r5, #31
 800ec10:	d50a      	bpl.n	800ec28 <__pow5mult+0x84>
 800ec12:	4639      	mov	r1, r7
 800ec14:	4622      	mov	r2, r4
 800ec16:	4630      	mov	r0, r6
 800ec18:	f7ff ff20 	bl	800ea5c <__multiply>
 800ec1c:	4680      	mov	r8, r0
 800ec1e:	4639      	mov	r1, r7
 800ec20:	4630      	mov	r0, r6
 800ec22:	f7ff fe01 	bl	800e828 <_Bfree>
 800ec26:	4647      	mov	r7, r8
 800ec28:	106d      	asrs	r5, r5, #1
 800ec2a:	d00b      	beq.n	800ec44 <__pow5mult+0xa0>
 800ec2c:	6820      	ldr	r0, [r4, #0]
 800ec2e:	b938      	cbnz	r0, 800ec40 <__pow5mult+0x9c>
 800ec30:	4622      	mov	r2, r4
 800ec32:	4621      	mov	r1, r4
 800ec34:	4630      	mov	r0, r6
 800ec36:	f7ff ff11 	bl	800ea5c <__multiply>
 800ec3a:	6020      	str	r0, [r4, #0]
 800ec3c:	f8c0 9000 	str.w	r9, [r0]
 800ec40:	4604      	mov	r4, r0
 800ec42:	e7e4      	b.n	800ec0e <__pow5mult+0x6a>
 800ec44:	4638      	mov	r0, r7
 800ec46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec4a:	bf00      	nop
 800ec4c:	080113f8 	.word	0x080113f8
 800ec50:	0801113e 	.word	0x0801113e
 800ec54:	080112a8 	.word	0x080112a8

0800ec58 <__lshift>:
 800ec58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec5c:	460c      	mov	r4, r1
 800ec5e:	4607      	mov	r7, r0
 800ec60:	4691      	mov	r9, r2
 800ec62:	6923      	ldr	r3, [r4, #16]
 800ec64:	6849      	ldr	r1, [r1, #4]
 800ec66:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ec6a:	68a3      	ldr	r3, [r4, #8]
 800ec6c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ec70:	f108 0601 	add.w	r6, r8, #1
 800ec74:	42b3      	cmp	r3, r6
 800ec76:	db0b      	blt.n	800ec90 <__lshift+0x38>
 800ec78:	4638      	mov	r0, r7
 800ec7a:	f7ff fd95 	bl	800e7a8 <_Balloc>
 800ec7e:	4605      	mov	r5, r0
 800ec80:	b948      	cbnz	r0, 800ec96 <__lshift+0x3e>
 800ec82:	4602      	mov	r2, r0
 800ec84:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ec88:	4b27      	ldr	r3, [pc, #156]	; (800ed28 <__lshift+0xd0>)
 800ec8a:	4828      	ldr	r0, [pc, #160]	; (800ed2c <__lshift+0xd4>)
 800ec8c:	f000 fe42 	bl	800f914 <__assert_func>
 800ec90:	3101      	adds	r1, #1
 800ec92:	005b      	lsls	r3, r3, #1
 800ec94:	e7ee      	b.n	800ec74 <__lshift+0x1c>
 800ec96:	2300      	movs	r3, #0
 800ec98:	f100 0114 	add.w	r1, r0, #20
 800ec9c:	f100 0210 	add.w	r2, r0, #16
 800eca0:	4618      	mov	r0, r3
 800eca2:	4553      	cmp	r3, sl
 800eca4:	db33      	blt.n	800ed0e <__lshift+0xb6>
 800eca6:	6920      	ldr	r0, [r4, #16]
 800eca8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ecac:	f104 0314 	add.w	r3, r4, #20
 800ecb0:	f019 091f 	ands.w	r9, r9, #31
 800ecb4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ecb8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ecbc:	d02b      	beq.n	800ed16 <__lshift+0xbe>
 800ecbe:	468a      	mov	sl, r1
 800ecc0:	2200      	movs	r2, #0
 800ecc2:	f1c9 0e20 	rsb	lr, r9, #32
 800ecc6:	6818      	ldr	r0, [r3, #0]
 800ecc8:	fa00 f009 	lsl.w	r0, r0, r9
 800eccc:	4302      	orrs	r2, r0
 800ecce:	f84a 2b04 	str.w	r2, [sl], #4
 800ecd2:	f853 2b04 	ldr.w	r2, [r3], #4
 800ecd6:	459c      	cmp	ip, r3
 800ecd8:	fa22 f20e 	lsr.w	r2, r2, lr
 800ecdc:	d8f3      	bhi.n	800ecc6 <__lshift+0x6e>
 800ecde:	ebac 0304 	sub.w	r3, ip, r4
 800ece2:	3b15      	subs	r3, #21
 800ece4:	f023 0303 	bic.w	r3, r3, #3
 800ece8:	3304      	adds	r3, #4
 800ecea:	f104 0015 	add.w	r0, r4, #21
 800ecee:	4584      	cmp	ip, r0
 800ecf0:	bf38      	it	cc
 800ecf2:	2304      	movcc	r3, #4
 800ecf4:	50ca      	str	r2, [r1, r3]
 800ecf6:	b10a      	cbz	r2, 800ecfc <__lshift+0xa4>
 800ecf8:	f108 0602 	add.w	r6, r8, #2
 800ecfc:	3e01      	subs	r6, #1
 800ecfe:	4638      	mov	r0, r7
 800ed00:	4621      	mov	r1, r4
 800ed02:	612e      	str	r6, [r5, #16]
 800ed04:	f7ff fd90 	bl	800e828 <_Bfree>
 800ed08:	4628      	mov	r0, r5
 800ed0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed0e:	f842 0f04 	str.w	r0, [r2, #4]!
 800ed12:	3301      	adds	r3, #1
 800ed14:	e7c5      	b.n	800eca2 <__lshift+0x4a>
 800ed16:	3904      	subs	r1, #4
 800ed18:	f853 2b04 	ldr.w	r2, [r3], #4
 800ed1c:	459c      	cmp	ip, r3
 800ed1e:	f841 2f04 	str.w	r2, [r1, #4]!
 800ed22:	d8f9      	bhi.n	800ed18 <__lshift+0xc0>
 800ed24:	e7ea      	b.n	800ecfc <__lshift+0xa4>
 800ed26:	bf00      	nop
 800ed28:	080111b4 	.word	0x080111b4
 800ed2c:	080112a8 	.word	0x080112a8

0800ed30 <__mcmp>:
 800ed30:	4603      	mov	r3, r0
 800ed32:	690a      	ldr	r2, [r1, #16]
 800ed34:	6900      	ldr	r0, [r0, #16]
 800ed36:	b530      	push	{r4, r5, lr}
 800ed38:	1a80      	subs	r0, r0, r2
 800ed3a:	d10d      	bne.n	800ed58 <__mcmp+0x28>
 800ed3c:	3314      	adds	r3, #20
 800ed3e:	3114      	adds	r1, #20
 800ed40:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ed44:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ed48:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ed4c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ed50:	4295      	cmp	r5, r2
 800ed52:	d002      	beq.n	800ed5a <__mcmp+0x2a>
 800ed54:	d304      	bcc.n	800ed60 <__mcmp+0x30>
 800ed56:	2001      	movs	r0, #1
 800ed58:	bd30      	pop	{r4, r5, pc}
 800ed5a:	42a3      	cmp	r3, r4
 800ed5c:	d3f4      	bcc.n	800ed48 <__mcmp+0x18>
 800ed5e:	e7fb      	b.n	800ed58 <__mcmp+0x28>
 800ed60:	f04f 30ff 	mov.w	r0, #4294967295
 800ed64:	e7f8      	b.n	800ed58 <__mcmp+0x28>
	...

0800ed68 <__mdiff>:
 800ed68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed6c:	460c      	mov	r4, r1
 800ed6e:	4606      	mov	r6, r0
 800ed70:	4611      	mov	r1, r2
 800ed72:	4620      	mov	r0, r4
 800ed74:	4692      	mov	sl, r2
 800ed76:	f7ff ffdb 	bl	800ed30 <__mcmp>
 800ed7a:	1e05      	subs	r5, r0, #0
 800ed7c:	d111      	bne.n	800eda2 <__mdiff+0x3a>
 800ed7e:	4629      	mov	r1, r5
 800ed80:	4630      	mov	r0, r6
 800ed82:	f7ff fd11 	bl	800e7a8 <_Balloc>
 800ed86:	4602      	mov	r2, r0
 800ed88:	b928      	cbnz	r0, 800ed96 <__mdiff+0x2e>
 800ed8a:	f240 2132 	movw	r1, #562	; 0x232
 800ed8e:	4b3c      	ldr	r3, [pc, #240]	; (800ee80 <__mdiff+0x118>)
 800ed90:	483c      	ldr	r0, [pc, #240]	; (800ee84 <__mdiff+0x11c>)
 800ed92:	f000 fdbf 	bl	800f914 <__assert_func>
 800ed96:	2301      	movs	r3, #1
 800ed98:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ed9c:	4610      	mov	r0, r2
 800ed9e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eda2:	bfa4      	itt	ge
 800eda4:	4653      	movge	r3, sl
 800eda6:	46a2      	movge	sl, r4
 800eda8:	4630      	mov	r0, r6
 800edaa:	f8da 1004 	ldr.w	r1, [sl, #4]
 800edae:	bfa6      	itte	ge
 800edb0:	461c      	movge	r4, r3
 800edb2:	2500      	movge	r5, #0
 800edb4:	2501      	movlt	r5, #1
 800edb6:	f7ff fcf7 	bl	800e7a8 <_Balloc>
 800edba:	4602      	mov	r2, r0
 800edbc:	b918      	cbnz	r0, 800edc6 <__mdiff+0x5e>
 800edbe:	f44f 7110 	mov.w	r1, #576	; 0x240
 800edc2:	4b2f      	ldr	r3, [pc, #188]	; (800ee80 <__mdiff+0x118>)
 800edc4:	e7e4      	b.n	800ed90 <__mdiff+0x28>
 800edc6:	f100 0814 	add.w	r8, r0, #20
 800edca:	f8da 7010 	ldr.w	r7, [sl, #16]
 800edce:	60c5      	str	r5, [r0, #12]
 800edd0:	f04f 0c00 	mov.w	ip, #0
 800edd4:	f10a 0514 	add.w	r5, sl, #20
 800edd8:	f10a 0010 	add.w	r0, sl, #16
 800eddc:	46c2      	mov	sl, r8
 800edde:	6926      	ldr	r6, [r4, #16]
 800ede0:	f104 0914 	add.w	r9, r4, #20
 800ede4:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800ede8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800edec:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800edf0:	f859 3b04 	ldr.w	r3, [r9], #4
 800edf4:	fa1f f18b 	uxth.w	r1, fp
 800edf8:	4461      	add	r1, ip
 800edfa:	fa1f fc83 	uxth.w	ip, r3
 800edfe:	0c1b      	lsrs	r3, r3, #16
 800ee00:	eba1 010c 	sub.w	r1, r1, ip
 800ee04:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ee08:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800ee0c:	b289      	uxth	r1, r1
 800ee0e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800ee12:	454e      	cmp	r6, r9
 800ee14:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800ee18:	f84a 3b04 	str.w	r3, [sl], #4
 800ee1c:	d8e6      	bhi.n	800edec <__mdiff+0x84>
 800ee1e:	1b33      	subs	r3, r6, r4
 800ee20:	3b15      	subs	r3, #21
 800ee22:	f023 0303 	bic.w	r3, r3, #3
 800ee26:	3415      	adds	r4, #21
 800ee28:	3304      	adds	r3, #4
 800ee2a:	42a6      	cmp	r6, r4
 800ee2c:	bf38      	it	cc
 800ee2e:	2304      	movcc	r3, #4
 800ee30:	441d      	add	r5, r3
 800ee32:	4443      	add	r3, r8
 800ee34:	461e      	mov	r6, r3
 800ee36:	462c      	mov	r4, r5
 800ee38:	4574      	cmp	r4, lr
 800ee3a:	d30e      	bcc.n	800ee5a <__mdiff+0xf2>
 800ee3c:	f10e 0103 	add.w	r1, lr, #3
 800ee40:	1b49      	subs	r1, r1, r5
 800ee42:	f021 0103 	bic.w	r1, r1, #3
 800ee46:	3d03      	subs	r5, #3
 800ee48:	45ae      	cmp	lr, r5
 800ee4a:	bf38      	it	cc
 800ee4c:	2100      	movcc	r1, #0
 800ee4e:	4419      	add	r1, r3
 800ee50:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800ee54:	b18b      	cbz	r3, 800ee7a <__mdiff+0x112>
 800ee56:	6117      	str	r7, [r2, #16]
 800ee58:	e7a0      	b.n	800ed9c <__mdiff+0x34>
 800ee5a:	f854 8b04 	ldr.w	r8, [r4], #4
 800ee5e:	fa1f f188 	uxth.w	r1, r8
 800ee62:	4461      	add	r1, ip
 800ee64:	1408      	asrs	r0, r1, #16
 800ee66:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800ee6a:	b289      	uxth	r1, r1
 800ee6c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ee70:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ee74:	f846 1b04 	str.w	r1, [r6], #4
 800ee78:	e7de      	b.n	800ee38 <__mdiff+0xd0>
 800ee7a:	3f01      	subs	r7, #1
 800ee7c:	e7e8      	b.n	800ee50 <__mdiff+0xe8>
 800ee7e:	bf00      	nop
 800ee80:	080111b4 	.word	0x080111b4
 800ee84:	080112a8 	.word	0x080112a8

0800ee88 <__ulp>:
 800ee88:	4b11      	ldr	r3, [pc, #68]	; (800eed0 <__ulp+0x48>)
 800ee8a:	400b      	ands	r3, r1
 800ee8c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	dd02      	ble.n	800ee9a <__ulp+0x12>
 800ee94:	2000      	movs	r0, #0
 800ee96:	4619      	mov	r1, r3
 800ee98:	4770      	bx	lr
 800ee9a:	425b      	negs	r3, r3
 800ee9c:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800eea0:	f04f 0000 	mov.w	r0, #0
 800eea4:	f04f 0100 	mov.w	r1, #0
 800eea8:	ea4f 5223 	mov.w	r2, r3, asr #20
 800eeac:	da04      	bge.n	800eeb8 <__ulp+0x30>
 800eeae:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800eeb2:	fa43 f102 	asr.w	r1, r3, r2
 800eeb6:	4770      	bx	lr
 800eeb8:	f1a2 0314 	sub.w	r3, r2, #20
 800eebc:	2b1e      	cmp	r3, #30
 800eebe:	bfd6      	itet	le
 800eec0:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800eec4:	2301      	movgt	r3, #1
 800eec6:	fa22 f303 	lsrle.w	r3, r2, r3
 800eeca:	4618      	mov	r0, r3
 800eecc:	4770      	bx	lr
 800eece:	bf00      	nop
 800eed0:	7ff00000 	.word	0x7ff00000

0800eed4 <__b2d>:
 800eed4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eed8:	6907      	ldr	r7, [r0, #16]
 800eeda:	f100 0914 	add.w	r9, r0, #20
 800eede:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800eee2:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800eee6:	f1a7 0804 	sub.w	r8, r7, #4
 800eeea:	4630      	mov	r0, r6
 800eeec:	f7ff fd52 	bl	800e994 <__hi0bits>
 800eef0:	f1c0 0320 	rsb	r3, r0, #32
 800eef4:	280a      	cmp	r0, #10
 800eef6:	600b      	str	r3, [r1, #0]
 800eef8:	491f      	ldr	r1, [pc, #124]	; (800ef78 <__b2d+0xa4>)
 800eefa:	dc17      	bgt.n	800ef2c <__b2d+0x58>
 800eefc:	45c1      	cmp	r9, r8
 800eefe:	bf28      	it	cs
 800ef00:	2200      	movcs	r2, #0
 800ef02:	f1c0 0c0b 	rsb	ip, r0, #11
 800ef06:	fa26 f30c 	lsr.w	r3, r6, ip
 800ef0a:	bf38      	it	cc
 800ef0c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800ef10:	ea43 0501 	orr.w	r5, r3, r1
 800ef14:	f100 0315 	add.w	r3, r0, #21
 800ef18:	fa06 f303 	lsl.w	r3, r6, r3
 800ef1c:	fa22 f20c 	lsr.w	r2, r2, ip
 800ef20:	ea43 0402 	orr.w	r4, r3, r2
 800ef24:	4620      	mov	r0, r4
 800ef26:	4629      	mov	r1, r5
 800ef28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ef2c:	45c1      	cmp	r9, r8
 800ef2e:	bf2e      	itee	cs
 800ef30:	2200      	movcs	r2, #0
 800ef32:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800ef36:	f1a7 0808 	subcc.w	r8, r7, #8
 800ef3a:	f1b0 030b 	subs.w	r3, r0, #11
 800ef3e:	d016      	beq.n	800ef6e <__b2d+0x9a>
 800ef40:	f1c3 0720 	rsb	r7, r3, #32
 800ef44:	fa22 f107 	lsr.w	r1, r2, r7
 800ef48:	45c8      	cmp	r8, r9
 800ef4a:	fa06 f603 	lsl.w	r6, r6, r3
 800ef4e:	ea46 0601 	orr.w	r6, r6, r1
 800ef52:	bf94      	ite	ls
 800ef54:	2100      	movls	r1, #0
 800ef56:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800ef5a:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800ef5e:	fa02 f003 	lsl.w	r0, r2, r3
 800ef62:	40f9      	lsrs	r1, r7
 800ef64:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800ef68:	ea40 0401 	orr.w	r4, r0, r1
 800ef6c:	e7da      	b.n	800ef24 <__b2d+0x50>
 800ef6e:	4614      	mov	r4, r2
 800ef70:	ea46 0501 	orr.w	r5, r6, r1
 800ef74:	e7d6      	b.n	800ef24 <__b2d+0x50>
 800ef76:	bf00      	nop
 800ef78:	3ff00000 	.word	0x3ff00000

0800ef7c <__d2b>:
 800ef7c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800ef80:	2101      	movs	r1, #1
 800ef82:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800ef86:	4690      	mov	r8, r2
 800ef88:	461d      	mov	r5, r3
 800ef8a:	f7ff fc0d 	bl	800e7a8 <_Balloc>
 800ef8e:	4604      	mov	r4, r0
 800ef90:	b930      	cbnz	r0, 800efa0 <__d2b+0x24>
 800ef92:	4602      	mov	r2, r0
 800ef94:	f240 310a 	movw	r1, #778	; 0x30a
 800ef98:	4b24      	ldr	r3, [pc, #144]	; (800f02c <__d2b+0xb0>)
 800ef9a:	4825      	ldr	r0, [pc, #148]	; (800f030 <__d2b+0xb4>)
 800ef9c:	f000 fcba 	bl	800f914 <__assert_func>
 800efa0:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800efa4:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800efa8:	bb2d      	cbnz	r5, 800eff6 <__d2b+0x7a>
 800efaa:	9301      	str	r3, [sp, #4]
 800efac:	f1b8 0300 	subs.w	r3, r8, #0
 800efb0:	d026      	beq.n	800f000 <__d2b+0x84>
 800efb2:	4668      	mov	r0, sp
 800efb4:	9300      	str	r3, [sp, #0]
 800efb6:	f7ff fd0d 	bl	800e9d4 <__lo0bits>
 800efba:	9900      	ldr	r1, [sp, #0]
 800efbc:	b1f0      	cbz	r0, 800effc <__d2b+0x80>
 800efbe:	9a01      	ldr	r2, [sp, #4]
 800efc0:	f1c0 0320 	rsb	r3, r0, #32
 800efc4:	fa02 f303 	lsl.w	r3, r2, r3
 800efc8:	430b      	orrs	r3, r1
 800efca:	40c2      	lsrs	r2, r0
 800efcc:	6163      	str	r3, [r4, #20]
 800efce:	9201      	str	r2, [sp, #4]
 800efd0:	9b01      	ldr	r3, [sp, #4]
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	bf14      	ite	ne
 800efd6:	2102      	movne	r1, #2
 800efd8:	2101      	moveq	r1, #1
 800efda:	61a3      	str	r3, [r4, #24]
 800efdc:	6121      	str	r1, [r4, #16]
 800efde:	b1c5      	cbz	r5, 800f012 <__d2b+0x96>
 800efe0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800efe4:	4405      	add	r5, r0
 800efe6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800efea:	603d      	str	r5, [r7, #0]
 800efec:	6030      	str	r0, [r6, #0]
 800efee:	4620      	mov	r0, r4
 800eff0:	b002      	add	sp, #8
 800eff2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eff6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800effa:	e7d6      	b.n	800efaa <__d2b+0x2e>
 800effc:	6161      	str	r1, [r4, #20]
 800effe:	e7e7      	b.n	800efd0 <__d2b+0x54>
 800f000:	a801      	add	r0, sp, #4
 800f002:	f7ff fce7 	bl	800e9d4 <__lo0bits>
 800f006:	2101      	movs	r1, #1
 800f008:	9b01      	ldr	r3, [sp, #4]
 800f00a:	6121      	str	r1, [r4, #16]
 800f00c:	6163      	str	r3, [r4, #20]
 800f00e:	3020      	adds	r0, #32
 800f010:	e7e5      	b.n	800efde <__d2b+0x62>
 800f012:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800f016:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f01a:	6038      	str	r0, [r7, #0]
 800f01c:	6918      	ldr	r0, [r3, #16]
 800f01e:	f7ff fcb9 	bl	800e994 <__hi0bits>
 800f022:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800f026:	6031      	str	r1, [r6, #0]
 800f028:	e7e1      	b.n	800efee <__d2b+0x72>
 800f02a:	bf00      	nop
 800f02c:	080111b4 	.word	0x080111b4
 800f030:	080112a8 	.word	0x080112a8

0800f034 <__ratio>:
 800f034:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f038:	4688      	mov	r8, r1
 800f03a:	4669      	mov	r1, sp
 800f03c:	4681      	mov	r9, r0
 800f03e:	f7ff ff49 	bl	800eed4 <__b2d>
 800f042:	460f      	mov	r7, r1
 800f044:	4604      	mov	r4, r0
 800f046:	460d      	mov	r5, r1
 800f048:	4640      	mov	r0, r8
 800f04a:	a901      	add	r1, sp, #4
 800f04c:	f7ff ff42 	bl	800eed4 <__b2d>
 800f050:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f054:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f058:	468b      	mov	fp, r1
 800f05a:	eba3 0c02 	sub.w	ip, r3, r2
 800f05e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f062:	1a9b      	subs	r3, r3, r2
 800f064:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800f068:	2b00      	cmp	r3, #0
 800f06a:	bfd5      	itete	le
 800f06c:	460a      	movle	r2, r1
 800f06e:	462a      	movgt	r2, r5
 800f070:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f074:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f078:	bfd8      	it	le
 800f07a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800f07e:	465b      	mov	r3, fp
 800f080:	4602      	mov	r2, r0
 800f082:	4639      	mov	r1, r7
 800f084:	4620      	mov	r0, r4
 800f086:	f7f1 fbbd 	bl	8000804 <__aeabi_ddiv>
 800f08a:	b003      	add	sp, #12
 800f08c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f090 <__copybits>:
 800f090:	3901      	subs	r1, #1
 800f092:	b570      	push	{r4, r5, r6, lr}
 800f094:	1149      	asrs	r1, r1, #5
 800f096:	6914      	ldr	r4, [r2, #16]
 800f098:	3101      	adds	r1, #1
 800f09a:	f102 0314 	add.w	r3, r2, #20
 800f09e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f0a2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f0a6:	1f05      	subs	r5, r0, #4
 800f0a8:	42a3      	cmp	r3, r4
 800f0aa:	d30c      	bcc.n	800f0c6 <__copybits+0x36>
 800f0ac:	1aa3      	subs	r3, r4, r2
 800f0ae:	3b11      	subs	r3, #17
 800f0b0:	f023 0303 	bic.w	r3, r3, #3
 800f0b4:	3211      	adds	r2, #17
 800f0b6:	42a2      	cmp	r2, r4
 800f0b8:	bf88      	it	hi
 800f0ba:	2300      	movhi	r3, #0
 800f0bc:	4418      	add	r0, r3
 800f0be:	2300      	movs	r3, #0
 800f0c0:	4288      	cmp	r0, r1
 800f0c2:	d305      	bcc.n	800f0d0 <__copybits+0x40>
 800f0c4:	bd70      	pop	{r4, r5, r6, pc}
 800f0c6:	f853 6b04 	ldr.w	r6, [r3], #4
 800f0ca:	f845 6f04 	str.w	r6, [r5, #4]!
 800f0ce:	e7eb      	b.n	800f0a8 <__copybits+0x18>
 800f0d0:	f840 3b04 	str.w	r3, [r0], #4
 800f0d4:	e7f4      	b.n	800f0c0 <__copybits+0x30>

0800f0d6 <__any_on>:
 800f0d6:	f100 0214 	add.w	r2, r0, #20
 800f0da:	6900      	ldr	r0, [r0, #16]
 800f0dc:	114b      	asrs	r3, r1, #5
 800f0de:	4298      	cmp	r0, r3
 800f0e0:	b510      	push	{r4, lr}
 800f0e2:	db11      	blt.n	800f108 <__any_on+0x32>
 800f0e4:	dd0a      	ble.n	800f0fc <__any_on+0x26>
 800f0e6:	f011 011f 	ands.w	r1, r1, #31
 800f0ea:	d007      	beq.n	800f0fc <__any_on+0x26>
 800f0ec:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f0f0:	fa24 f001 	lsr.w	r0, r4, r1
 800f0f4:	fa00 f101 	lsl.w	r1, r0, r1
 800f0f8:	428c      	cmp	r4, r1
 800f0fa:	d10b      	bne.n	800f114 <__any_on+0x3e>
 800f0fc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f100:	4293      	cmp	r3, r2
 800f102:	d803      	bhi.n	800f10c <__any_on+0x36>
 800f104:	2000      	movs	r0, #0
 800f106:	bd10      	pop	{r4, pc}
 800f108:	4603      	mov	r3, r0
 800f10a:	e7f7      	b.n	800f0fc <__any_on+0x26>
 800f10c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f110:	2900      	cmp	r1, #0
 800f112:	d0f5      	beq.n	800f100 <__any_on+0x2a>
 800f114:	2001      	movs	r0, #1
 800f116:	e7f6      	b.n	800f106 <__any_on+0x30>

0800f118 <_calloc_r>:
 800f118:	b538      	push	{r3, r4, r5, lr}
 800f11a:	fb02 f501 	mul.w	r5, r2, r1
 800f11e:	4629      	mov	r1, r5
 800f120:	f7fc fbe4 	bl	800b8ec <_malloc_r>
 800f124:	4604      	mov	r4, r0
 800f126:	b118      	cbz	r0, 800f130 <_calloc_r+0x18>
 800f128:	462a      	mov	r2, r5
 800f12a:	2100      	movs	r1, #0
 800f12c:	f7fc fb8a 	bl	800b844 <memset>
 800f130:	4620      	mov	r0, r4
 800f132:	bd38      	pop	{r3, r4, r5, pc}

0800f134 <__ssputs_r>:
 800f134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f138:	688e      	ldr	r6, [r1, #8]
 800f13a:	4682      	mov	sl, r0
 800f13c:	429e      	cmp	r6, r3
 800f13e:	460c      	mov	r4, r1
 800f140:	4690      	mov	r8, r2
 800f142:	461f      	mov	r7, r3
 800f144:	d838      	bhi.n	800f1b8 <__ssputs_r+0x84>
 800f146:	898a      	ldrh	r2, [r1, #12]
 800f148:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f14c:	d032      	beq.n	800f1b4 <__ssputs_r+0x80>
 800f14e:	6825      	ldr	r5, [r4, #0]
 800f150:	6909      	ldr	r1, [r1, #16]
 800f152:	3301      	adds	r3, #1
 800f154:	eba5 0901 	sub.w	r9, r5, r1
 800f158:	6965      	ldr	r5, [r4, #20]
 800f15a:	444b      	add	r3, r9
 800f15c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f160:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f164:	106d      	asrs	r5, r5, #1
 800f166:	429d      	cmp	r5, r3
 800f168:	bf38      	it	cc
 800f16a:	461d      	movcc	r5, r3
 800f16c:	0553      	lsls	r3, r2, #21
 800f16e:	d531      	bpl.n	800f1d4 <__ssputs_r+0xa0>
 800f170:	4629      	mov	r1, r5
 800f172:	f7fc fbbb 	bl	800b8ec <_malloc_r>
 800f176:	4606      	mov	r6, r0
 800f178:	b950      	cbnz	r0, 800f190 <__ssputs_r+0x5c>
 800f17a:	230c      	movs	r3, #12
 800f17c:	f04f 30ff 	mov.w	r0, #4294967295
 800f180:	f8ca 3000 	str.w	r3, [sl]
 800f184:	89a3      	ldrh	r3, [r4, #12]
 800f186:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f18a:	81a3      	strh	r3, [r4, #12]
 800f18c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f190:	464a      	mov	r2, r9
 800f192:	6921      	ldr	r1, [r4, #16]
 800f194:	f7ff faed 	bl	800e772 <memcpy>
 800f198:	89a3      	ldrh	r3, [r4, #12]
 800f19a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f19e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f1a2:	81a3      	strh	r3, [r4, #12]
 800f1a4:	6126      	str	r6, [r4, #16]
 800f1a6:	444e      	add	r6, r9
 800f1a8:	6026      	str	r6, [r4, #0]
 800f1aa:	463e      	mov	r6, r7
 800f1ac:	6165      	str	r5, [r4, #20]
 800f1ae:	eba5 0509 	sub.w	r5, r5, r9
 800f1b2:	60a5      	str	r5, [r4, #8]
 800f1b4:	42be      	cmp	r6, r7
 800f1b6:	d900      	bls.n	800f1ba <__ssputs_r+0x86>
 800f1b8:	463e      	mov	r6, r7
 800f1ba:	4632      	mov	r2, r6
 800f1bc:	4641      	mov	r1, r8
 800f1be:	6820      	ldr	r0, [r4, #0]
 800f1c0:	f000 fd20 	bl	800fc04 <memmove>
 800f1c4:	68a3      	ldr	r3, [r4, #8]
 800f1c6:	6822      	ldr	r2, [r4, #0]
 800f1c8:	1b9b      	subs	r3, r3, r6
 800f1ca:	4432      	add	r2, r6
 800f1cc:	2000      	movs	r0, #0
 800f1ce:	60a3      	str	r3, [r4, #8]
 800f1d0:	6022      	str	r2, [r4, #0]
 800f1d2:	e7db      	b.n	800f18c <__ssputs_r+0x58>
 800f1d4:	462a      	mov	r2, r5
 800f1d6:	f000 fd2f 	bl	800fc38 <_realloc_r>
 800f1da:	4606      	mov	r6, r0
 800f1dc:	2800      	cmp	r0, #0
 800f1de:	d1e1      	bne.n	800f1a4 <__ssputs_r+0x70>
 800f1e0:	4650      	mov	r0, sl
 800f1e2:	6921      	ldr	r1, [r4, #16]
 800f1e4:	f7fc fb36 	bl	800b854 <_free_r>
 800f1e8:	e7c7      	b.n	800f17a <__ssputs_r+0x46>
	...

0800f1ec <_svfiprintf_r>:
 800f1ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1f0:	4698      	mov	r8, r3
 800f1f2:	898b      	ldrh	r3, [r1, #12]
 800f1f4:	4607      	mov	r7, r0
 800f1f6:	061b      	lsls	r3, r3, #24
 800f1f8:	460d      	mov	r5, r1
 800f1fa:	4614      	mov	r4, r2
 800f1fc:	b09d      	sub	sp, #116	; 0x74
 800f1fe:	d50e      	bpl.n	800f21e <_svfiprintf_r+0x32>
 800f200:	690b      	ldr	r3, [r1, #16]
 800f202:	b963      	cbnz	r3, 800f21e <_svfiprintf_r+0x32>
 800f204:	2140      	movs	r1, #64	; 0x40
 800f206:	f7fc fb71 	bl	800b8ec <_malloc_r>
 800f20a:	6028      	str	r0, [r5, #0]
 800f20c:	6128      	str	r0, [r5, #16]
 800f20e:	b920      	cbnz	r0, 800f21a <_svfiprintf_r+0x2e>
 800f210:	230c      	movs	r3, #12
 800f212:	603b      	str	r3, [r7, #0]
 800f214:	f04f 30ff 	mov.w	r0, #4294967295
 800f218:	e0d1      	b.n	800f3be <_svfiprintf_r+0x1d2>
 800f21a:	2340      	movs	r3, #64	; 0x40
 800f21c:	616b      	str	r3, [r5, #20]
 800f21e:	2300      	movs	r3, #0
 800f220:	9309      	str	r3, [sp, #36]	; 0x24
 800f222:	2320      	movs	r3, #32
 800f224:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f228:	2330      	movs	r3, #48	; 0x30
 800f22a:	f04f 0901 	mov.w	r9, #1
 800f22e:	f8cd 800c 	str.w	r8, [sp, #12]
 800f232:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800f3d8 <_svfiprintf_r+0x1ec>
 800f236:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f23a:	4623      	mov	r3, r4
 800f23c:	469a      	mov	sl, r3
 800f23e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f242:	b10a      	cbz	r2, 800f248 <_svfiprintf_r+0x5c>
 800f244:	2a25      	cmp	r2, #37	; 0x25
 800f246:	d1f9      	bne.n	800f23c <_svfiprintf_r+0x50>
 800f248:	ebba 0b04 	subs.w	fp, sl, r4
 800f24c:	d00b      	beq.n	800f266 <_svfiprintf_r+0x7a>
 800f24e:	465b      	mov	r3, fp
 800f250:	4622      	mov	r2, r4
 800f252:	4629      	mov	r1, r5
 800f254:	4638      	mov	r0, r7
 800f256:	f7ff ff6d 	bl	800f134 <__ssputs_r>
 800f25a:	3001      	adds	r0, #1
 800f25c:	f000 80aa 	beq.w	800f3b4 <_svfiprintf_r+0x1c8>
 800f260:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f262:	445a      	add	r2, fp
 800f264:	9209      	str	r2, [sp, #36]	; 0x24
 800f266:	f89a 3000 	ldrb.w	r3, [sl]
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	f000 80a2 	beq.w	800f3b4 <_svfiprintf_r+0x1c8>
 800f270:	2300      	movs	r3, #0
 800f272:	f04f 32ff 	mov.w	r2, #4294967295
 800f276:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f27a:	f10a 0a01 	add.w	sl, sl, #1
 800f27e:	9304      	str	r3, [sp, #16]
 800f280:	9307      	str	r3, [sp, #28]
 800f282:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f286:	931a      	str	r3, [sp, #104]	; 0x68
 800f288:	4654      	mov	r4, sl
 800f28a:	2205      	movs	r2, #5
 800f28c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f290:	4851      	ldr	r0, [pc, #324]	; (800f3d8 <_svfiprintf_r+0x1ec>)
 800f292:	f7ff fa60 	bl	800e756 <memchr>
 800f296:	9a04      	ldr	r2, [sp, #16]
 800f298:	b9d8      	cbnz	r0, 800f2d2 <_svfiprintf_r+0xe6>
 800f29a:	06d0      	lsls	r0, r2, #27
 800f29c:	bf44      	itt	mi
 800f29e:	2320      	movmi	r3, #32
 800f2a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f2a4:	0711      	lsls	r1, r2, #28
 800f2a6:	bf44      	itt	mi
 800f2a8:	232b      	movmi	r3, #43	; 0x2b
 800f2aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f2ae:	f89a 3000 	ldrb.w	r3, [sl]
 800f2b2:	2b2a      	cmp	r3, #42	; 0x2a
 800f2b4:	d015      	beq.n	800f2e2 <_svfiprintf_r+0xf6>
 800f2b6:	4654      	mov	r4, sl
 800f2b8:	2000      	movs	r0, #0
 800f2ba:	f04f 0c0a 	mov.w	ip, #10
 800f2be:	9a07      	ldr	r2, [sp, #28]
 800f2c0:	4621      	mov	r1, r4
 800f2c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f2c6:	3b30      	subs	r3, #48	; 0x30
 800f2c8:	2b09      	cmp	r3, #9
 800f2ca:	d94e      	bls.n	800f36a <_svfiprintf_r+0x17e>
 800f2cc:	b1b0      	cbz	r0, 800f2fc <_svfiprintf_r+0x110>
 800f2ce:	9207      	str	r2, [sp, #28]
 800f2d0:	e014      	b.n	800f2fc <_svfiprintf_r+0x110>
 800f2d2:	eba0 0308 	sub.w	r3, r0, r8
 800f2d6:	fa09 f303 	lsl.w	r3, r9, r3
 800f2da:	4313      	orrs	r3, r2
 800f2dc:	46a2      	mov	sl, r4
 800f2de:	9304      	str	r3, [sp, #16]
 800f2e0:	e7d2      	b.n	800f288 <_svfiprintf_r+0x9c>
 800f2e2:	9b03      	ldr	r3, [sp, #12]
 800f2e4:	1d19      	adds	r1, r3, #4
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	9103      	str	r1, [sp, #12]
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	bfbb      	ittet	lt
 800f2ee:	425b      	neglt	r3, r3
 800f2f0:	f042 0202 	orrlt.w	r2, r2, #2
 800f2f4:	9307      	strge	r3, [sp, #28]
 800f2f6:	9307      	strlt	r3, [sp, #28]
 800f2f8:	bfb8      	it	lt
 800f2fa:	9204      	strlt	r2, [sp, #16]
 800f2fc:	7823      	ldrb	r3, [r4, #0]
 800f2fe:	2b2e      	cmp	r3, #46	; 0x2e
 800f300:	d10c      	bne.n	800f31c <_svfiprintf_r+0x130>
 800f302:	7863      	ldrb	r3, [r4, #1]
 800f304:	2b2a      	cmp	r3, #42	; 0x2a
 800f306:	d135      	bne.n	800f374 <_svfiprintf_r+0x188>
 800f308:	9b03      	ldr	r3, [sp, #12]
 800f30a:	3402      	adds	r4, #2
 800f30c:	1d1a      	adds	r2, r3, #4
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	9203      	str	r2, [sp, #12]
 800f312:	2b00      	cmp	r3, #0
 800f314:	bfb8      	it	lt
 800f316:	f04f 33ff 	movlt.w	r3, #4294967295
 800f31a:	9305      	str	r3, [sp, #20]
 800f31c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f3e8 <_svfiprintf_r+0x1fc>
 800f320:	2203      	movs	r2, #3
 800f322:	4650      	mov	r0, sl
 800f324:	7821      	ldrb	r1, [r4, #0]
 800f326:	f7ff fa16 	bl	800e756 <memchr>
 800f32a:	b140      	cbz	r0, 800f33e <_svfiprintf_r+0x152>
 800f32c:	2340      	movs	r3, #64	; 0x40
 800f32e:	eba0 000a 	sub.w	r0, r0, sl
 800f332:	fa03 f000 	lsl.w	r0, r3, r0
 800f336:	9b04      	ldr	r3, [sp, #16]
 800f338:	3401      	adds	r4, #1
 800f33a:	4303      	orrs	r3, r0
 800f33c:	9304      	str	r3, [sp, #16]
 800f33e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f342:	2206      	movs	r2, #6
 800f344:	4825      	ldr	r0, [pc, #148]	; (800f3dc <_svfiprintf_r+0x1f0>)
 800f346:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f34a:	f7ff fa04 	bl	800e756 <memchr>
 800f34e:	2800      	cmp	r0, #0
 800f350:	d038      	beq.n	800f3c4 <_svfiprintf_r+0x1d8>
 800f352:	4b23      	ldr	r3, [pc, #140]	; (800f3e0 <_svfiprintf_r+0x1f4>)
 800f354:	bb1b      	cbnz	r3, 800f39e <_svfiprintf_r+0x1b2>
 800f356:	9b03      	ldr	r3, [sp, #12]
 800f358:	3307      	adds	r3, #7
 800f35a:	f023 0307 	bic.w	r3, r3, #7
 800f35e:	3308      	adds	r3, #8
 800f360:	9303      	str	r3, [sp, #12]
 800f362:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f364:	4433      	add	r3, r6
 800f366:	9309      	str	r3, [sp, #36]	; 0x24
 800f368:	e767      	b.n	800f23a <_svfiprintf_r+0x4e>
 800f36a:	460c      	mov	r4, r1
 800f36c:	2001      	movs	r0, #1
 800f36e:	fb0c 3202 	mla	r2, ip, r2, r3
 800f372:	e7a5      	b.n	800f2c0 <_svfiprintf_r+0xd4>
 800f374:	2300      	movs	r3, #0
 800f376:	f04f 0c0a 	mov.w	ip, #10
 800f37a:	4619      	mov	r1, r3
 800f37c:	3401      	adds	r4, #1
 800f37e:	9305      	str	r3, [sp, #20]
 800f380:	4620      	mov	r0, r4
 800f382:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f386:	3a30      	subs	r2, #48	; 0x30
 800f388:	2a09      	cmp	r2, #9
 800f38a:	d903      	bls.n	800f394 <_svfiprintf_r+0x1a8>
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d0c5      	beq.n	800f31c <_svfiprintf_r+0x130>
 800f390:	9105      	str	r1, [sp, #20]
 800f392:	e7c3      	b.n	800f31c <_svfiprintf_r+0x130>
 800f394:	4604      	mov	r4, r0
 800f396:	2301      	movs	r3, #1
 800f398:	fb0c 2101 	mla	r1, ip, r1, r2
 800f39c:	e7f0      	b.n	800f380 <_svfiprintf_r+0x194>
 800f39e:	ab03      	add	r3, sp, #12
 800f3a0:	9300      	str	r3, [sp, #0]
 800f3a2:	462a      	mov	r2, r5
 800f3a4:	4638      	mov	r0, r7
 800f3a6:	4b0f      	ldr	r3, [pc, #60]	; (800f3e4 <_svfiprintf_r+0x1f8>)
 800f3a8:	a904      	add	r1, sp, #16
 800f3aa:	f7fc fb97 	bl	800badc <_printf_float>
 800f3ae:	1c42      	adds	r2, r0, #1
 800f3b0:	4606      	mov	r6, r0
 800f3b2:	d1d6      	bne.n	800f362 <_svfiprintf_r+0x176>
 800f3b4:	89ab      	ldrh	r3, [r5, #12]
 800f3b6:	065b      	lsls	r3, r3, #25
 800f3b8:	f53f af2c 	bmi.w	800f214 <_svfiprintf_r+0x28>
 800f3bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f3be:	b01d      	add	sp, #116	; 0x74
 800f3c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3c4:	ab03      	add	r3, sp, #12
 800f3c6:	9300      	str	r3, [sp, #0]
 800f3c8:	462a      	mov	r2, r5
 800f3ca:	4638      	mov	r0, r7
 800f3cc:	4b05      	ldr	r3, [pc, #20]	; (800f3e4 <_svfiprintf_r+0x1f8>)
 800f3ce:	a904      	add	r1, sp, #16
 800f3d0:	f7fc fe20 	bl	800c014 <_printf_i>
 800f3d4:	e7eb      	b.n	800f3ae <_svfiprintf_r+0x1c2>
 800f3d6:	bf00      	nop
 800f3d8:	08011404 	.word	0x08011404
 800f3dc:	0801140e 	.word	0x0801140e
 800f3e0:	0800badd 	.word	0x0800badd
 800f3e4:	0800f135 	.word	0x0800f135
 800f3e8:	0801140a 	.word	0x0801140a

0800f3ec <__sfputc_r>:
 800f3ec:	6893      	ldr	r3, [r2, #8]
 800f3ee:	b410      	push	{r4}
 800f3f0:	3b01      	subs	r3, #1
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	6093      	str	r3, [r2, #8]
 800f3f6:	da07      	bge.n	800f408 <__sfputc_r+0x1c>
 800f3f8:	6994      	ldr	r4, [r2, #24]
 800f3fa:	42a3      	cmp	r3, r4
 800f3fc:	db01      	blt.n	800f402 <__sfputc_r+0x16>
 800f3fe:	290a      	cmp	r1, #10
 800f400:	d102      	bne.n	800f408 <__sfputc_r+0x1c>
 800f402:	bc10      	pop	{r4}
 800f404:	f000 b9a6 	b.w	800f754 <__swbuf_r>
 800f408:	6813      	ldr	r3, [r2, #0]
 800f40a:	1c58      	adds	r0, r3, #1
 800f40c:	6010      	str	r0, [r2, #0]
 800f40e:	7019      	strb	r1, [r3, #0]
 800f410:	4608      	mov	r0, r1
 800f412:	bc10      	pop	{r4}
 800f414:	4770      	bx	lr

0800f416 <__sfputs_r>:
 800f416:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f418:	4606      	mov	r6, r0
 800f41a:	460f      	mov	r7, r1
 800f41c:	4614      	mov	r4, r2
 800f41e:	18d5      	adds	r5, r2, r3
 800f420:	42ac      	cmp	r4, r5
 800f422:	d101      	bne.n	800f428 <__sfputs_r+0x12>
 800f424:	2000      	movs	r0, #0
 800f426:	e007      	b.n	800f438 <__sfputs_r+0x22>
 800f428:	463a      	mov	r2, r7
 800f42a:	4630      	mov	r0, r6
 800f42c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f430:	f7ff ffdc 	bl	800f3ec <__sfputc_r>
 800f434:	1c43      	adds	r3, r0, #1
 800f436:	d1f3      	bne.n	800f420 <__sfputs_r+0xa>
 800f438:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f43c <_vfiprintf_r>:
 800f43c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f440:	460d      	mov	r5, r1
 800f442:	4614      	mov	r4, r2
 800f444:	4698      	mov	r8, r3
 800f446:	4606      	mov	r6, r0
 800f448:	b09d      	sub	sp, #116	; 0x74
 800f44a:	b118      	cbz	r0, 800f454 <_vfiprintf_r+0x18>
 800f44c:	6983      	ldr	r3, [r0, #24]
 800f44e:	b90b      	cbnz	r3, 800f454 <_vfiprintf_r+0x18>
 800f450:	f7fe fd64 	bl	800df1c <__sinit>
 800f454:	4b89      	ldr	r3, [pc, #548]	; (800f67c <_vfiprintf_r+0x240>)
 800f456:	429d      	cmp	r5, r3
 800f458:	d11b      	bne.n	800f492 <_vfiprintf_r+0x56>
 800f45a:	6875      	ldr	r5, [r6, #4]
 800f45c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f45e:	07d9      	lsls	r1, r3, #31
 800f460:	d405      	bmi.n	800f46e <_vfiprintf_r+0x32>
 800f462:	89ab      	ldrh	r3, [r5, #12]
 800f464:	059a      	lsls	r2, r3, #22
 800f466:	d402      	bmi.n	800f46e <_vfiprintf_r+0x32>
 800f468:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f46a:	f7ff f960 	bl	800e72e <__retarget_lock_acquire_recursive>
 800f46e:	89ab      	ldrh	r3, [r5, #12]
 800f470:	071b      	lsls	r3, r3, #28
 800f472:	d501      	bpl.n	800f478 <_vfiprintf_r+0x3c>
 800f474:	692b      	ldr	r3, [r5, #16]
 800f476:	b9eb      	cbnz	r3, 800f4b4 <_vfiprintf_r+0x78>
 800f478:	4629      	mov	r1, r5
 800f47a:	4630      	mov	r0, r6
 800f47c:	f000 f9dc 	bl	800f838 <__swsetup_r>
 800f480:	b1c0      	cbz	r0, 800f4b4 <_vfiprintf_r+0x78>
 800f482:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f484:	07dc      	lsls	r4, r3, #31
 800f486:	d50e      	bpl.n	800f4a6 <_vfiprintf_r+0x6a>
 800f488:	f04f 30ff 	mov.w	r0, #4294967295
 800f48c:	b01d      	add	sp, #116	; 0x74
 800f48e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f492:	4b7b      	ldr	r3, [pc, #492]	; (800f680 <_vfiprintf_r+0x244>)
 800f494:	429d      	cmp	r5, r3
 800f496:	d101      	bne.n	800f49c <_vfiprintf_r+0x60>
 800f498:	68b5      	ldr	r5, [r6, #8]
 800f49a:	e7df      	b.n	800f45c <_vfiprintf_r+0x20>
 800f49c:	4b79      	ldr	r3, [pc, #484]	; (800f684 <_vfiprintf_r+0x248>)
 800f49e:	429d      	cmp	r5, r3
 800f4a0:	bf08      	it	eq
 800f4a2:	68f5      	ldreq	r5, [r6, #12]
 800f4a4:	e7da      	b.n	800f45c <_vfiprintf_r+0x20>
 800f4a6:	89ab      	ldrh	r3, [r5, #12]
 800f4a8:	0598      	lsls	r0, r3, #22
 800f4aa:	d4ed      	bmi.n	800f488 <_vfiprintf_r+0x4c>
 800f4ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f4ae:	f7ff f93f 	bl	800e730 <__retarget_lock_release_recursive>
 800f4b2:	e7e9      	b.n	800f488 <_vfiprintf_r+0x4c>
 800f4b4:	2300      	movs	r3, #0
 800f4b6:	9309      	str	r3, [sp, #36]	; 0x24
 800f4b8:	2320      	movs	r3, #32
 800f4ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f4be:	2330      	movs	r3, #48	; 0x30
 800f4c0:	f04f 0901 	mov.w	r9, #1
 800f4c4:	f8cd 800c 	str.w	r8, [sp, #12]
 800f4c8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800f688 <_vfiprintf_r+0x24c>
 800f4cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f4d0:	4623      	mov	r3, r4
 800f4d2:	469a      	mov	sl, r3
 800f4d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f4d8:	b10a      	cbz	r2, 800f4de <_vfiprintf_r+0xa2>
 800f4da:	2a25      	cmp	r2, #37	; 0x25
 800f4dc:	d1f9      	bne.n	800f4d2 <_vfiprintf_r+0x96>
 800f4de:	ebba 0b04 	subs.w	fp, sl, r4
 800f4e2:	d00b      	beq.n	800f4fc <_vfiprintf_r+0xc0>
 800f4e4:	465b      	mov	r3, fp
 800f4e6:	4622      	mov	r2, r4
 800f4e8:	4629      	mov	r1, r5
 800f4ea:	4630      	mov	r0, r6
 800f4ec:	f7ff ff93 	bl	800f416 <__sfputs_r>
 800f4f0:	3001      	adds	r0, #1
 800f4f2:	f000 80aa 	beq.w	800f64a <_vfiprintf_r+0x20e>
 800f4f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f4f8:	445a      	add	r2, fp
 800f4fa:	9209      	str	r2, [sp, #36]	; 0x24
 800f4fc:	f89a 3000 	ldrb.w	r3, [sl]
 800f500:	2b00      	cmp	r3, #0
 800f502:	f000 80a2 	beq.w	800f64a <_vfiprintf_r+0x20e>
 800f506:	2300      	movs	r3, #0
 800f508:	f04f 32ff 	mov.w	r2, #4294967295
 800f50c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f510:	f10a 0a01 	add.w	sl, sl, #1
 800f514:	9304      	str	r3, [sp, #16]
 800f516:	9307      	str	r3, [sp, #28]
 800f518:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f51c:	931a      	str	r3, [sp, #104]	; 0x68
 800f51e:	4654      	mov	r4, sl
 800f520:	2205      	movs	r2, #5
 800f522:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f526:	4858      	ldr	r0, [pc, #352]	; (800f688 <_vfiprintf_r+0x24c>)
 800f528:	f7ff f915 	bl	800e756 <memchr>
 800f52c:	9a04      	ldr	r2, [sp, #16]
 800f52e:	b9d8      	cbnz	r0, 800f568 <_vfiprintf_r+0x12c>
 800f530:	06d1      	lsls	r1, r2, #27
 800f532:	bf44      	itt	mi
 800f534:	2320      	movmi	r3, #32
 800f536:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f53a:	0713      	lsls	r3, r2, #28
 800f53c:	bf44      	itt	mi
 800f53e:	232b      	movmi	r3, #43	; 0x2b
 800f540:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f544:	f89a 3000 	ldrb.w	r3, [sl]
 800f548:	2b2a      	cmp	r3, #42	; 0x2a
 800f54a:	d015      	beq.n	800f578 <_vfiprintf_r+0x13c>
 800f54c:	4654      	mov	r4, sl
 800f54e:	2000      	movs	r0, #0
 800f550:	f04f 0c0a 	mov.w	ip, #10
 800f554:	9a07      	ldr	r2, [sp, #28]
 800f556:	4621      	mov	r1, r4
 800f558:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f55c:	3b30      	subs	r3, #48	; 0x30
 800f55e:	2b09      	cmp	r3, #9
 800f560:	d94e      	bls.n	800f600 <_vfiprintf_r+0x1c4>
 800f562:	b1b0      	cbz	r0, 800f592 <_vfiprintf_r+0x156>
 800f564:	9207      	str	r2, [sp, #28]
 800f566:	e014      	b.n	800f592 <_vfiprintf_r+0x156>
 800f568:	eba0 0308 	sub.w	r3, r0, r8
 800f56c:	fa09 f303 	lsl.w	r3, r9, r3
 800f570:	4313      	orrs	r3, r2
 800f572:	46a2      	mov	sl, r4
 800f574:	9304      	str	r3, [sp, #16]
 800f576:	e7d2      	b.n	800f51e <_vfiprintf_r+0xe2>
 800f578:	9b03      	ldr	r3, [sp, #12]
 800f57a:	1d19      	adds	r1, r3, #4
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	9103      	str	r1, [sp, #12]
 800f580:	2b00      	cmp	r3, #0
 800f582:	bfbb      	ittet	lt
 800f584:	425b      	neglt	r3, r3
 800f586:	f042 0202 	orrlt.w	r2, r2, #2
 800f58a:	9307      	strge	r3, [sp, #28]
 800f58c:	9307      	strlt	r3, [sp, #28]
 800f58e:	bfb8      	it	lt
 800f590:	9204      	strlt	r2, [sp, #16]
 800f592:	7823      	ldrb	r3, [r4, #0]
 800f594:	2b2e      	cmp	r3, #46	; 0x2e
 800f596:	d10c      	bne.n	800f5b2 <_vfiprintf_r+0x176>
 800f598:	7863      	ldrb	r3, [r4, #1]
 800f59a:	2b2a      	cmp	r3, #42	; 0x2a
 800f59c:	d135      	bne.n	800f60a <_vfiprintf_r+0x1ce>
 800f59e:	9b03      	ldr	r3, [sp, #12]
 800f5a0:	3402      	adds	r4, #2
 800f5a2:	1d1a      	adds	r2, r3, #4
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	9203      	str	r2, [sp, #12]
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	bfb8      	it	lt
 800f5ac:	f04f 33ff 	movlt.w	r3, #4294967295
 800f5b0:	9305      	str	r3, [sp, #20]
 800f5b2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f698 <_vfiprintf_r+0x25c>
 800f5b6:	2203      	movs	r2, #3
 800f5b8:	4650      	mov	r0, sl
 800f5ba:	7821      	ldrb	r1, [r4, #0]
 800f5bc:	f7ff f8cb 	bl	800e756 <memchr>
 800f5c0:	b140      	cbz	r0, 800f5d4 <_vfiprintf_r+0x198>
 800f5c2:	2340      	movs	r3, #64	; 0x40
 800f5c4:	eba0 000a 	sub.w	r0, r0, sl
 800f5c8:	fa03 f000 	lsl.w	r0, r3, r0
 800f5cc:	9b04      	ldr	r3, [sp, #16]
 800f5ce:	3401      	adds	r4, #1
 800f5d0:	4303      	orrs	r3, r0
 800f5d2:	9304      	str	r3, [sp, #16]
 800f5d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f5d8:	2206      	movs	r2, #6
 800f5da:	482c      	ldr	r0, [pc, #176]	; (800f68c <_vfiprintf_r+0x250>)
 800f5dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f5e0:	f7ff f8b9 	bl	800e756 <memchr>
 800f5e4:	2800      	cmp	r0, #0
 800f5e6:	d03f      	beq.n	800f668 <_vfiprintf_r+0x22c>
 800f5e8:	4b29      	ldr	r3, [pc, #164]	; (800f690 <_vfiprintf_r+0x254>)
 800f5ea:	bb1b      	cbnz	r3, 800f634 <_vfiprintf_r+0x1f8>
 800f5ec:	9b03      	ldr	r3, [sp, #12]
 800f5ee:	3307      	adds	r3, #7
 800f5f0:	f023 0307 	bic.w	r3, r3, #7
 800f5f4:	3308      	adds	r3, #8
 800f5f6:	9303      	str	r3, [sp, #12]
 800f5f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f5fa:	443b      	add	r3, r7
 800f5fc:	9309      	str	r3, [sp, #36]	; 0x24
 800f5fe:	e767      	b.n	800f4d0 <_vfiprintf_r+0x94>
 800f600:	460c      	mov	r4, r1
 800f602:	2001      	movs	r0, #1
 800f604:	fb0c 3202 	mla	r2, ip, r2, r3
 800f608:	e7a5      	b.n	800f556 <_vfiprintf_r+0x11a>
 800f60a:	2300      	movs	r3, #0
 800f60c:	f04f 0c0a 	mov.w	ip, #10
 800f610:	4619      	mov	r1, r3
 800f612:	3401      	adds	r4, #1
 800f614:	9305      	str	r3, [sp, #20]
 800f616:	4620      	mov	r0, r4
 800f618:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f61c:	3a30      	subs	r2, #48	; 0x30
 800f61e:	2a09      	cmp	r2, #9
 800f620:	d903      	bls.n	800f62a <_vfiprintf_r+0x1ee>
 800f622:	2b00      	cmp	r3, #0
 800f624:	d0c5      	beq.n	800f5b2 <_vfiprintf_r+0x176>
 800f626:	9105      	str	r1, [sp, #20]
 800f628:	e7c3      	b.n	800f5b2 <_vfiprintf_r+0x176>
 800f62a:	4604      	mov	r4, r0
 800f62c:	2301      	movs	r3, #1
 800f62e:	fb0c 2101 	mla	r1, ip, r1, r2
 800f632:	e7f0      	b.n	800f616 <_vfiprintf_r+0x1da>
 800f634:	ab03      	add	r3, sp, #12
 800f636:	9300      	str	r3, [sp, #0]
 800f638:	462a      	mov	r2, r5
 800f63a:	4630      	mov	r0, r6
 800f63c:	4b15      	ldr	r3, [pc, #84]	; (800f694 <_vfiprintf_r+0x258>)
 800f63e:	a904      	add	r1, sp, #16
 800f640:	f7fc fa4c 	bl	800badc <_printf_float>
 800f644:	4607      	mov	r7, r0
 800f646:	1c78      	adds	r0, r7, #1
 800f648:	d1d6      	bne.n	800f5f8 <_vfiprintf_r+0x1bc>
 800f64a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f64c:	07d9      	lsls	r1, r3, #31
 800f64e:	d405      	bmi.n	800f65c <_vfiprintf_r+0x220>
 800f650:	89ab      	ldrh	r3, [r5, #12]
 800f652:	059a      	lsls	r2, r3, #22
 800f654:	d402      	bmi.n	800f65c <_vfiprintf_r+0x220>
 800f656:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f658:	f7ff f86a 	bl	800e730 <__retarget_lock_release_recursive>
 800f65c:	89ab      	ldrh	r3, [r5, #12]
 800f65e:	065b      	lsls	r3, r3, #25
 800f660:	f53f af12 	bmi.w	800f488 <_vfiprintf_r+0x4c>
 800f664:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f666:	e711      	b.n	800f48c <_vfiprintf_r+0x50>
 800f668:	ab03      	add	r3, sp, #12
 800f66a:	9300      	str	r3, [sp, #0]
 800f66c:	462a      	mov	r2, r5
 800f66e:	4630      	mov	r0, r6
 800f670:	4b08      	ldr	r3, [pc, #32]	; (800f694 <_vfiprintf_r+0x258>)
 800f672:	a904      	add	r1, sp, #16
 800f674:	f7fc fcce 	bl	800c014 <_printf_i>
 800f678:	e7e4      	b.n	800f644 <_vfiprintf_r+0x208>
 800f67a:	bf00      	nop
 800f67c:	080111e8 	.word	0x080111e8
 800f680:	08011208 	.word	0x08011208
 800f684:	080111c8 	.word	0x080111c8
 800f688:	08011404 	.word	0x08011404
 800f68c:	0801140e 	.word	0x0801140e
 800f690:	0800badd 	.word	0x0800badd
 800f694:	0800f417 	.word	0x0800f417
 800f698:	0801140a 	.word	0x0801140a

0800f69c <nan>:
 800f69c:	2000      	movs	r0, #0
 800f69e:	4901      	ldr	r1, [pc, #4]	; (800f6a4 <nan+0x8>)
 800f6a0:	4770      	bx	lr
 800f6a2:	bf00      	nop
 800f6a4:	7ff80000 	.word	0x7ff80000

0800f6a8 <__sread>:
 800f6a8:	b510      	push	{r4, lr}
 800f6aa:	460c      	mov	r4, r1
 800f6ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f6b0:	f000 fae8 	bl	800fc84 <_read_r>
 800f6b4:	2800      	cmp	r0, #0
 800f6b6:	bfab      	itete	ge
 800f6b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f6ba:	89a3      	ldrhlt	r3, [r4, #12]
 800f6bc:	181b      	addge	r3, r3, r0
 800f6be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f6c2:	bfac      	ite	ge
 800f6c4:	6563      	strge	r3, [r4, #84]	; 0x54
 800f6c6:	81a3      	strhlt	r3, [r4, #12]
 800f6c8:	bd10      	pop	{r4, pc}

0800f6ca <__swrite>:
 800f6ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6ce:	461f      	mov	r7, r3
 800f6d0:	898b      	ldrh	r3, [r1, #12]
 800f6d2:	4605      	mov	r5, r0
 800f6d4:	05db      	lsls	r3, r3, #23
 800f6d6:	460c      	mov	r4, r1
 800f6d8:	4616      	mov	r6, r2
 800f6da:	d505      	bpl.n	800f6e8 <__swrite+0x1e>
 800f6dc:	2302      	movs	r3, #2
 800f6de:	2200      	movs	r2, #0
 800f6e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f6e4:	f000 fa18 	bl	800fb18 <_lseek_r>
 800f6e8:	89a3      	ldrh	r3, [r4, #12]
 800f6ea:	4632      	mov	r2, r6
 800f6ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f6f0:	81a3      	strh	r3, [r4, #12]
 800f6f2:	4628      	mov	r0, r5
 800f6f4:	463b      	mov	r3, r7
 800f6f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f6fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f6fe:	f000 b889 	b.w	800f814 <_write_r>

0800f702 <__sseek>:
 800f702:	b510      	push	{r4, lr}
 800f704:	460c      	mov	r4, r1
 800f706:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f70a:	f000 fa05 	bl	800fb18 <_lseek_r>
 800f70e:	1c43      	adds	r3, r0, #1
 800f710:	89a3      	ldrh	r3, [r4, #12]
 800f712:	bf15      	itete	ne
 800f714:	6560      	strne	r0, [r4, #84]	; 0x54
 800f716:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f71a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f71e:	81a3      	strheq	r3, [r4, #12]
 800f720:	bf18      	it	ne
 800f722:	81a3      	strhne	r3, [r4, #12]
 800f724:	bd10      	pop	{r4, pc}

0800f726 <__sclose>:
 800f726:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f72a:	f000 b911 	b.w	800f950 <_close_r>

0800f72e <strncmp>:
 800f72e:	b510      	push	{r4, lr}
 800f730:	b16a      	cbz	r2, 800f74e <strncmp+0x20>
 800f732:	3901      	subs	r1, #1
 800f734:	1884      	adds	r4, r0, r2
 800f736:	f810 3b01 	ldrb.w	r3, [r0], #1
 800f73a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800f73e:	4293      	cmp	r3, r2
 800f740:	d103      	bne.n	800f74a <strncmp+0x1c>
 800f742:	42a0      	cmp	r0, r4
 800f744:	d001      	beq.n	800f74a <strncmp+0x1c>
 800f746:	2b00      	cmp	r3, #0
 800f748:	d1f5      	bne.n	800f736 <strncmp+0x8>
 800f74a:	1a98      	subs	r0, r3, r2
 800f74c:	bd10      	pop	{r4, pc}
 800f74e:	4610      	mov	r0, r2
 800f750:	e7fc      	b.n	800f74c <strncmp+0x1e>
	...

0800f754 <__swbuf_r>:
 800f754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f756:	460e      	mov	r6, r1
 800f758:	4614      	mov	r4, r2
 800f75a:	4605      	mov	r5, r0
 800f75c:	b118      	cbz	r0, 800f766 <__swbuf_r+0x12>
 800f75e:	6983      	ldr	r3, [r0, #24]
 800f760:	b90b      	cbnz	r3, 800f766 <__swbuf_r+0x12>
 800f762:	f7fe fbdb 	bl	800df1c <__sinit>
 800f766:	4b21      	ldr	r3, [pc, #132]	; (800f7ec <__swbuf_r+0x98>)
 800f768:	429c      	cmp	r4, r3
 800f76a:	d12b      	bne.n	800f7c4 <__swbuf_r+0x70>
 800f76c:	686c      	ldr	r4, [r5, #4]
 800f76e:	69a3      	ldr	r3, [r4, #24]
 800f770:	60a3      	str	r3, [r4, #8]
 800f772:	89a3      	ldrh	r3, [r4, #12]
 800f774:	071a      	lsls	r2, r3, #28
 800f776:	d52f      	bpl.n	800f7d8 <__swbuf_r+0x84>
 800f778:	6923      	ldr	r3, [r4, #16]
 800f77a:	b36b      	cbz	r3, 800f7d8 <__swbuf_r+0x84>
 800f77c:	6923      	ldr	r3, [r4, #16]
 800f77e:	6820      	ldr	r0, [r4, #0]
 800f780:	b2f6      	uxtb	r6, r6
 800f782:	1ac0      	subs	r0, r0, r3
 800f784:	6963      	ldr	r3, [r4, #20]
 800f786:	4637      	mov	r7, r6
 800f788:	4283      	cmp	r3, r0
 800f78a:	dc04      	bgt.n	800f796 <__swbuf_r+0x42>
 800f78c:	4621      	mov	r1, r4
 800f78e:	4628      	mov	r0, r5
 800f790:	f000 f974 	bl	800fa7c <_fflush_r>
 800f794:	bb30      	cbnz	r0, 800f7e4 <__swbuf_r+0x90>
 800f796:	68a3      	ldr	r3, [r4, #8]
 800f798:	3001      	adds	r0, #1
 800f79a:	3b01      	subs	r3, #1
 800f79c:	60a3      	str	r3, [r4, #8]
 800f79e:	6823      	ldr	r3, [r4, #0]
 800f7a0:	1c5a      	adds	r2, r3, #1
 800f7a2:	6022      	str	r2, [r4, #0]
 800f7a4:	701e      	strb	r6, [r3, #0]
 800f7a6:	6963      	ldr	r3, [r4, #20]
 800f7a8:	4283      	cmp	r3, r0
 800f7aa:	d004      	beq.n	800f7b6 <__swbuf_r+0x62>
 800f7ac:	89a3      	ldrh	r3, [r4, #12]
 800f7ae:	07db      	lsls	r3, r3, #31
 800f7b0:	d506      	bpl.n	800f7c0 <__swbuf_r+0x6c>
 800f7b2:	2e0a      	cmp	r6, #10
 800f7b4:	d104      	bne.n	800f7c0 <__swbuf_r+0x6c>
 800f7b6:	4621      	mov	r1, r4
 800f7b8:	4628      	mov	r0, r5
 800f7ba:	f000 f95f 	bl	800fa7c <_fflush_r>
 800f7be:	b988      	cbnz	r0, 800f7e4 <__swbuf_r+0x90>
 800f7c0:	4638      	mov	r0, r7
 800f7c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f7c4:	4b0a      	ldr	r3, [pc, #40]	; (800f7f0 <__swbuf_r+0x9c>)
 800f7c6:	429c      	cmp	r4, r3
 800f7c8:	d101      	bne.n	800f7ce <__swbuf_r+0x7a>
 800f7ca:	68ac      	ldr	r4, [r5, #8]
 800f7cc:	e7cf      	b.n	800f76e <__swbuf_r+0x1a>
 800f7ce:	4b09      	ldr	r3, [pc, #36]	; (800f7f4 <__swbuf_r+0xa0>)
 800f7d0:	429c      	cmp	r4, r3
 800f7d2:	bf08      	it	eq
 800f7d4:	68ec      	ldreq	r4, [r5, #12]
 800f7d6:	e7ca      	b.n	800f76e <__swbuf_r+0x1a>
 800f7d8:	4621      	mov	r1, r4
 800f7da:	4628      	mov	r0, r5
 800f7dc:	f000 f82c 	bl	800f838 <__swsetup_r>
 800f7e0:	2800      	cmp	r0, #0
 800f7e2:	d0cb      	beq.n	800f77c <__swbuf_r+0x28>
 800f7e4:	f04f 37ff 	mov.w	r7, #4294967295
 800f7e8:	e7ea      	b.n	800f7c0 <__swbuf_r+0x6c>
 800f7ea:	bf00      	nop
 800f7ec:	080111e8 	.word	0x080111e8
 800f7f0:	08011208 	.word	0x08011208
 800f7f4:	080111c8 	.word	0x080111c8

0800f7f8 <__ascii_wctomb>:
 800f7f8:	4603      	mov	r3, r0
 800f7fa:	4608      	mov	r0, r1
 800f7fc:	b141      	cbz	r1, 800f810 <__ascii_wctomb+0x18>
 800f7fe:	2aff      	cmp	r2, #255	; 0xff
 800f800:	d904      	bls.n	800f80c <__ascii_wctomb+0x14>
 800f802:	228a      	movs	r2, #138	; 0x8a
 800f804:	f04f 30ff 	mov.w	r0, #4294967295
 800f808:	601a      	str	r2, [r3, #0]
 800f80a:	4770      	bx	lr
 800f80c:	2001      	movs	r0, #1
 800f80e:	700a      	strb	r2, [r1, #0]
 800f810:	4770      	bx	lr
	...

0800f814 <_write_r>:
 800f814:	b538      	push	{r3, r4, r5, lr}
 800f816:	4604      	mov	r4, r0
 800f818:	4608      	mov	r0, r1
 800f81a:	4611      	mov	r1, r2
 800f81c:	2200      	movs	r2, #0
 800f81e:	4d05      	ldr	r5, [pc, #20]	; (800f834 <_write_r+0x20>)
 800f820:	602a      	str	r2, [r5, #0]
 800f822:	461a      	mov	r2, r3
 800f824:	f7f3 f8cc 	bl	80029c0 <_write>
 800f828:	1c43      	adds	r3, r0, #1
 800f82a:	d102      	bne.n	800f832 <_write_r+0x1e>
 800f82c:	682b      	ldr	r3, [r5, #0]
 800f82e:	b103      	cbz	r3, 800f832 <_write_r+0x1e>
 800f830:	6023      	str	r3, [r4, #0]
 800f832:	bd38      	pop	{r3, r4, r5, pc}
 800f834:	20000c34 	.word	0x20000c34

0800f838 <__swsetup_r>:
 800f838:	4b32      	ldr	r3, [pc, #200]	; (800f904 <__swsetup_r+0xcc>)
 800f83a:	b570      	push	{r4, r5, r6, lr}
 800f83c:	681d      	ldr	r5, [r3, #0]
 800f83e:	4606      	mov	r6, r0
 800f840:	460c      	mov	r4, r1
 800f842:	b125      	cbz	r5, 800f84e <__swsetup_r+0x16>
 800f844:	69ab      	ldr	r3, [r5, #24]
 800f846:	b913      	cbnz	r3, 800f84e <__swsetup_r+0x16>
 800f848:	4628      	mov	r0, r5
 800f84a:	f7fe fb67 	bl	800df1c <__sinit>
 800f84e:	4b2e      	ldr	r3, [pc, #184]	; (800f908 <__swsetup_r+0xd0>)
 800f850:	429c      	cmp	r4, r3
 800f852:	d10f      	bne.n	800f874 <__swsetup_r+0x3c>
 800f854:	686c      	ldr	r4, [r5, #4]
 800f856:	89a3      	ldrh	r3, [r4, #12]
 800f858:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f85c:	0719      	lsls	r1, r3, #28
 800f85e:	d42c      	bmi.n	800f8ba <__swsetup_r+0x82>
 800f860:	06dd      	lsls	r5, r3, #27
 800f862:	d411      	bmi.n	800f888 <__swsetup_r+0x50>
 800f864:	2309      	movs	r3, #9
 800f866:	6033      	str	r3, [r6, #0]
 800f868:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f86c:	f04f 30ff 	mov.w	r0, #4294967295
 800f870:	81a3      	strh	r3, [r4, #12]
 800f872:	e03e      	b.n	800f8f2 <__swsetup_r+0xba>
 800f874:	4b25      	ldr	r3, [pc, #148]	; (800f90c <__swsetup_r+0xd4>)
 800f876:	429c      	cmp	r4, r3
 800f878:	d101      	bne.n	800f87e <__swsetup_r+0x46>
 800f87a:	68ac      	ldr	r4, [r5, #8]
 800f87c:	e7eb      	b.n	800f856 <__swsetup_r+0x1e>
 800f87e:	4b24      	ldr	r3, [pc, #144]	; (800f910 <__swsetup_r+0xd8>)
 800f880:	429c      	cmp	r4, r3
 800f882:	bf08      	it	eq
 800f884:	68ec      	ldreq	r4, [r5, #12]
 800f886:	e7e6      	b.n	800f856 <__swsetup_r+0x1e>
 800f888:	0758      	lsls	r0, r3, #29
 800f88a:	d512      	bpl.n	800f8b2 <__swsetup_r+0x7a>
 800f88c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f88e:	b141      	cbz	r1, 800f8a2 <__swsetup_r+0x6a>
 800f890:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f894:	4299      	cmp	r1, r3
 800f896:	d002      	beq.n	800f89e <__swsetup_r+0x66>
 800f898:	4630      	mov	r0, r6
 800f89a:	f7fb ffdb 	bl	800b854 <_free_r>
 800f89e:	2300      	movs	r3, #0
 800f8a0:	6363      	str	r3, [r4, #52]	; 0x34
 800f8a2:	89a3      	ldrh	r3, [r4, #12]
 800f8a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f8a8:	81a3      	strh	r3, [r4, #12]
 800f8aa:	2300      	movs	r3, #0
 800f8ac:	6063      	str	r3, [r4, #4]
 800f8ae:	6923      	ldr	r3, [r4, #16]
 800f8b0:	6023      	str	r3, [r4, #0]
 800f8b2:	89a3      	ldrh	r3, [r4, #12]
 800f8b4:	f043 0308 	orr.w	r3, r3, #8
 800f8b8:	81a3      	strh	r3, [r4, #12]
 800f8ba:	6923      	ldr	r3, [r4, #16]
 800f8bc:	b94b      	cbnz	r3, 800f8d2 <__swsetup_r+0x9a>
 800f8be:	89a3      	ldrh	r3, [r4, #12]
 800f8c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f8c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f8c8:	d003      	beq.n	800f8d2 <__swsetup_r+0x9a>
 800f8ca:	4621      	mov	r1, r4
 800f8cc:	4630      	mov	r0, r6
 800f8ce:	f000 f959 	bl	800fb84 <__smakebuf_r>
 800f8d2:	89a0      	ldrh	r0, [r4, #12]
 800f8d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f8d8:	f010 0301 	ands.w	r3, r0, #1
 800f8dc:	d00a      	beq.n	800f8f4 <__swsetup_r+0xbc>
 800f8de:	2300      	movs	r3, #0
 800f8e0:	60a3      	str	r3, [r4, #8]
 800f8e2:	6963      	ldr	r3, [r4, #20]
 800f8e4:	425b      	negs	r3, r3
 800f8e6:	61a3      	str	r3, [r4, #24]
 800f8e8:	6923      	ldr	r3, [r4, #16]
 800f8ea:	b943      	cbnz	r3, 800f8fe <__swsetup_r+0xc6>
 800f8ec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f8f0:	d1ba      	bne.n	800f868 <__swsetup_r+0x30>
 800f8f2:	bd70      	pop	{r4, r5, r6, pc}
 800f8f4:	0781      	lsls	r1, r0, #30
 800f8f6:	bf58      	it	pl
 800f8f8:	6963      	ldrpl	r3, [r4, #20]
 800f8fa:	60a3      	str	r3, [r4, #8]
 800f8fc:	e7f4      	b.n	800f8e8 <__swsetup_r+0xb0>
 800f8fe:	2000      	movs	r0, #0
 800f900:	e7f7      	b.n	800f8f2 <__swsetup_r+0xba>
 800f902:	bf00      	nop
 800f904:	2000001c 	.word	0x2000001c
 800f908:	080111e8 	.word	0x080111e8
 800f90c:	08011208 	.word	0x08011208
 800f910:	080111c8 	.word	0x080111c8

0800f914 <__assert_func>:
 800f914:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f916:	4614      	mov	r4, r2
 800f918:	461a      	mov	r2, r3
 800f91a:	4b09      	ldr	r3, [pc, #36]	; (800f940 <__assert_func+0x2c>)
 800f91c:	4605      	mov	r5, r0
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	68d8      	ldr	r0, [r3, #12]
 800f922:	b14c      	cbz	r4, 800f938 <__assert_func+0x24>
 800f924:	4b07      	ldr	r3, [pc, #28]	; (800f944 <__assert_func+0x30>)
 800f926:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f92a:	9100      	str	r1, [sp, #0]
 800f92c:	462b      	mov	r3, r5
 800f92e:	4906      	ldr	r1, [pc, #24]	; (800f948 <__assert_func+0x34>)
 800f930:	f000 f8e0 	bl	800faf4 <fiprintf>
 800f934:	f000 f9b8 	bl	800fca8 <abort>
 800f938:	4b04      	ldr	r3, [pc, #16]	; (800f94c <__assert_func+0x38>)
 800f93a:	461c      	mov	r4, r3
 800f93c:	e7f3      	b.n	800f926 <__assert_func+0x12>
 800f93e:	bf00      	nop
 800f940:	2000001c 	.word	0x2000001c
 800f944:	08011415 	.word	0x08011415
 800f948:	08011422 	.word	0x08011422
 800f94c:	08011450 	.word	0x08011450

0800f950 <_close_r>:
 800f950:	b538      	push	{r3, r4, r5, lr}
 800f952:	2300      	movs	r3, #0
 800f954:	4d05      	ldr	r5, [pc, #20]	; (800f96c <_close_r+0x1c>)
 800f956:	4604      	mov	r4, r0
 800f958:	4608      	mov	r0, r1
 800f95a:	602b      	str	r3, [r5, #0]
 800f95c:	f7f3 f85a 	bl	8002a14 <_close>
 800f960:	1c43      	adds	r3, r0, #1
 800f962:	d102      	bne.n	800f96a <_close_r+0x1a>
 800f964:	682b      	ldr	r3, [r5, #0]
 800f966:	b103      	cbz	r3, 800f96a <_close_r+0x1a>
 800f968:	6023      	str	r3, [r4, #0]
 800f96a:	bd38      	pop	{r3, r4, r5, pc}
 800f96c:	20000c34 	.word	0x20000c34

0800f970 <__sflush_r>:
 800f970:	898a      	ldrh	r2, [r1, #12]
 800f972:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f976:	4605      	mov	r5, r0
 800f978:	0710      	lsls	r0, r2, #28
 800f97a:	460c      	mov	r4, r1
 800f97c:	d458      	bmi.n	800fa30 <__sflush_r+0xc0>
 800f97e:	684b      	ldr	r3, [r1, #4]
 800f980:	2b00      	cmp	r3, #0
 800f982:	dc05      	bgt.n	800f990 <__sflush_r+0x20>
 800f984:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f986:	2b00      	cmp	r3, #0
 800f988:	dc02      	bgt.n	800f990 <__sflush_r+0x20>
 800f98a:	2000      	movs	r0, #0
 800f98c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f990:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f992:	2e00      	cmp	r6, #0
 800f994:	d0f9      	beq.n	800f98a <__sflush_r+0x1a>
 800f996:	2300      	movs	r3, #0
 800f998:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f99c:	682f      	ldr	r7, [r5, #0]
 800f99e:	602b      	str	r3, [r5, #0]
 800f9a0:	d032      	beq.n	800fa08 <__sflush_r+0x98>
 800f9a2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f9a4:	89a3      	ldrh	r3, [r4, #12]
 800f9a6:	075a      	lsls	r2, r3, #29
 800f9a8:	d505      	bpl.n	800f9b6 <__sflush_r+0x46>
 800f9aa:	6863      	ldr	r3, [r4, #4]
 800f9ac:	1ac0      	subs	r0, r0, r3
 800f9ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f9b0:	b10b      	cbz	r3, 800f9b6 <__sflush_r+0x46>
 800f9b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f9b4:	1ac0      	subs	r0, r0, r3
 800f9b6:	2300      	movs	r3, #0
 800f9b8:	4602      	mov	r2, r0
 800f9ba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f9bc:	4628      	mov	r0, r5
 800f9be:	6a21      	ldr	r1, [r4, #32]
 800f9c0:	47b0      	blx	r6
 800f9c2:	1c43      	adds	r3, r0, #1
 800f9c4:	89a3      	ldrh	r3, [r4, #12]
 800f9c6:	d106      	bne.n	800f9d6 <__sflush_r+0x66>
 800f9c8:	6829      	ldr	r1, [r5, #0]
 800f9ca:	291d      	cmp	r1, #29
 800f9cc:	d82c      	bhi.n	800fa28 <__sflush_r+0xb8>
 800f9ce:	4a2a      	ldr	r2, [pc, #168]	; (800fa78 <__sflush_r+0x108>)
 800f9d0:	40ca      	lsrs	r2, r1
 800f9d2:	07d6      	lsls	r6, r2, #31
 800f9d4:	d528      	bpl.n	800fa28 <__sflush_r+0xb8>
 800f9d6:	2200      	movs	r2, #0
 800f9d8:	6062      	str	r2, [r4, #4]
 800f9da:	6922      	ldr	r2, [r4, #16]
 800f9dc:	04d9      	lsls	r1, r3, #19
 800f9de:	6022      	str	r2, [r4, #0]
 800f9e0:	d504      	bpl.n	800f9ec <__sflush_r+0x7c>
 800f9e2:	1c42      	adds	r2, r0, #1
 800f9e4:	d101      	bne.n	800f9ea <__sflush_r+0x7a>
 800f9e6:	682b      	ldr	r3, [r5, #0]
 800f9e8:	b903      	cbnz	r3, 800f9ec <__sflush_r+0x7c>
 800f9ea:	6560      	str	r0, [r4, #84]	; 0x54
 800f9ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f9ee:	602f      	str	r7, [r5, #0]
 800f9f0:	2900      	cmp	r1, #0
 800f9f2:	d0ca      	beq.n	800f98a <__sflush_r+0x1a>
 800f9f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f9f8:	4299      	cmp	r1, r3
 800f9fa:	d002      	beq.n	800fa02 <__sflush_r+0x92>
 800f9fc:	4628      	mov	r0, r5
 800f9fe:	f7fb ff29 	bl	800b854 <_free_r>
 800fa02:	2000      	movs	r0, #0
 800fa04:	6360      	str	r0, [r4, #52]	; 0x34
 800fa06:	e7c1      	b.n	800f98c <__sflush_r+0x1c>
 800fa08:	6a21      	ldr	r1, [r4, #32]
 800fa0a:	2301      	movs	r3, #1
 800fa0c:	4628      	mov	r0, r5
 800fa0e:	47b0      	blx	r6
 800fa10:	1c41      	adds	r1, r0, #1
 800fa12:	d1c7      	bne.n	800f9a4 <__sflush_r+0x34>
 800fa14:	682b      	ldr	r3, [r5, #0]
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d0c4      	beq.n	800f9a4 <__sflush_r+0x34>
 800fa1a:	2b1d      	cmp	r3, #29
 800fa1c:	d001      	beq.n	800fa22 <__sflush_r+0xb2>
 800fa1e:	2b16      	cmp	r3, #22
 800fa20:	d101      	bne.n	800fa26 <__sflush_r+0xb6>
 800fa22:	602f      	str	r7, [r5, #0]
 800fa24:	e7b1      	b.n	800f98a <__sflush_r+0x1a>
 800fa26:	89a3      	ldrh	r3, [r4, #12]
 800fa28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fa2c:	81a3      	strh	r3, [r4, #12]
 800fa2e:	e7ad      	b.n	800f98c <__sflush_r+0x1c>
 800fa30:	690f      	ldr	r7, [r1, #16]
 800fa32:	2f00      	cmp	r7, #0
 800fa34:	d0a9      	beq.n	800f98a <__sflush_r+0x1a>
 800fa36:	0793      	lsls	r3, r2, #30
 800fa38:	bf18      	it	ne
 800fa3a:	2300      	movne	r3, #0
 800fa3c:	680e      	ldr	r6, [r1, #0]
 800fa3e:	bf08      	it	eq
 800fa40:	694b      	ldreq	r3, [r1, #20]
 800fa42:	eba6 0807 	sub.w	r8, r6, r7
 800fa46:	600f      	str	r7, [r1, #0]
 800fa48:	608b      	str	r3, [r1, #8]
 800fa4a:	f1b8 0f00 	cmp.w	r8, #0
 800fa4e:	dd9c      	ble.n	800f98a <__sflush_r+0x1a>
 800fa50:	4643      	mov	r3, r8
 800fa52:	463a      	mov	r2, r7
 800fa54:	4628      	mov	r0, r5
 800fa56:	6a21      	ldr	r1, [r4, #32]
 800fa58:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fa5a:	47b0      	blx	r6
 800fa5c:	2800      	cmp	r0, #0
 800fa5e:	dc06      	bgt.n	800fa6e <__sflush_r+0xfe>
 800fa60:	89a3      	ldrh	r3, [r4, #12]
 800fa62:	f04f 30ff 	mov.w	r0, #4294967295
 800fa66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fa6a:	81a3      	strh	r3, [r4, #12]
 800fa6c:	e78e      	b.n	800f98c <__sflush_r+0x1c>
 800fa6e:	4407      	add	r7, r0
 800fa70:	eba8 0800 	sub.w	r8, r8, r0
 800fa74:	e7e9      	b.n	800fa4a <__sflush_r+0xda>
 800fa76:	bf00      	nop
 800fa78:	20400001 	.word	0x20400001

0800fa7c <_fflush_r>:
 800fa7c:	b538      	push	{r3, r4, r5, lr}
 800fa7e:	690b      	ldr	r3, [r1, #16]
 800fa80:	4605      	mov	r5, r0
 800fa82:	460c      	mov	r4, r1
 800fa84:	b913      	cbnz	r3, 800fa8c <_fflush_r+0x10>
 800fa86:	2500      	movs	r5, #0
 800fa88:	4628      	mov	r0, r5
 800fa8a:	bd38      	pop	{r3, r4, r5, pc}
 800fa8c:	b118      	cbz	r0, 800fa96 <_fflush_r+0x1a>
 800fa8e:	6983      	ldr	r3, [r0, #24]
 800fa90:	b90b      	cbnz	r3, 800fa96 <_fflush_r+0x1a>
 800fa92:	f7fe fa43 	bl	800df1c <__sinit>
 800fa96:	4b14      	ldr	r3, [pc, #80]	; (800fae8 <_fflush_r+0x6c>)
 800fa98:	429c      	cmp	r4, r3
 800fa9a:	d11b      	bne.n	800fad4 <_fflush_r+0x58>
 800fa9c:	686c      	ldr	r4, [r5, #4]
 800fa9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d0ef      	beq.n	800fa86 <_fflush_r+0xa>
 800faa6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800faa8:	07d0      	lsls	r0, r2, #31
 800faaa:	d404      	bmi.n	800fab6 <_fflush_r+0x3a>
 800faac:	0599      	lsls	r1, r3, #22
 800faae:	d402      	bmi.n	800fab6 <_fflush_r+0x3a>
 800fab0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fab2:	f7fe fe3c 	bl	800e72e <__retarget_lock_acquire_recursive>
 800fab6:	4628      	mov	r0, r5
 800fab8:	4621      	mov	r1, r4
 800faba:	f7ff ff59 	bl	800f970 <__sflush_r>
 800fabe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fac0:	4605      	mov	r5, r0
 800fac2:	07da      	lsls	r2, r3, #31
 800fac4:	d4e0      	bmi.n	800fa88 <_fflush_r+0xc>
 800fac6:	89a3      	ldrh	r3, [r4, #12]
 800fac8:	059b      	lsls	r3, r3, #22
 800faca:	d4dd      	bmi.n	800fa88 <_fflush_r+0xc>
 800facc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800face:	f7fe fe2f 	bl	800e730 <__retarget_lock_release_recursive>
 800fad2:	e7d9      	b.n	800fa88 <_fflush_r+0xc>
 800fad4:	4b05      	ldr	r3, [pc, #20]	; (800faec <_fflush_r+0x70>)
 800fad6:	429c      	cmp	r4, r3
 800fad8:	d101      	bne.n	800fade <_fflush_r+0x62>
 800fada:	68ac      	ldr	r4, [r5, #8]
 800fadc:	e7df      	b.n	800fa9e <_fflush_r+0x22>
 800fade:	4b04      	ldr	r3, [pc, #16]	; (800faf0 <_fflush_r+0x74>)
 800fae0:	429c      	cmp	r4, r3
 800fae2:	bf08      	it	eq
 800fae4:	68ec      	ldreq	r4, [r5, #12]
 800fae6:	e7da      	b.n	800fa9e <_fflush_r+0x22>
 800fae8:	080111e8 	.word	0x080111e8
 800faec:	08011208 	.word	0x08011208
 800faf0:	080111c8 	.word	0x080111c8

0800faf4 <fiprintf>:
 800faf4:	b40e      	push	{r1, r2, r3}
 800faf6:	b503      	push	{r0, r1, lr}
 800faf8:	4601      	mov	r1, r0
 800fafa:	ab03      	add	r3, sp, #12
 800fafc:	4805      	ldr	r0, [pc, #20]	; (800fb14 <fiprintf+0x20>)
 800fafe:	f853 2b04 	ldr.w	r2, [r3], #4
 800fb02:	6800      	ldr	r0, [r0, #0]
 800fb04:	9301      	str	r3, [sp, #4]
 800fb06:	f7ff fc99 	bl	800f43c <_vfiprintf_r>
 800fb0a:	b002      	add	sp, #8
 800fb0c:	f85d eb04 	ldr.w	lr, [sp], #4
 800fb10:	b003      	add	sp, #12
 800fb12:	4770      	bx	lr
 800fb14:	2000001c 	.word	0x2000001c

0800fb18 <_lseek_r>:
 800fb18:	b538      	push	{r3, r4, r5, lr}
 800fb1a:	4604      	mov	r4, r0
 800fb1c:	4608      	mov	r0, r1
 800fb1e:	4611      	mov	r1, r2
 800fb20:	2200      	movs	r2, #0
 800fb22:	4d05      	ldr	r5, [pc, #20]	; (800fb38 <_lseek_r+0x20>)
 800fb24:	602a      	str	r2, [r5, #0]
 800fb26:	461a      	mov	r2, r3
 800fb28:	f7f2 ff98 	bl	8002a5c <_lseek>
 800fb2c:	1c43      	adds	r3, r0, #1
 800fb2e:	d102      	bne.n	800fb36 <_lseek_r+0x1e>
 800fb30:	682b      	ldr	r3, [r5, #0]
 800fb32:	b103      	cbz	r3, 800fb36 <_lseek_r+0x1e>
 800fb34:	6023      	str	r3, [r4, #0]
 800fb36:	bd38      	pop	{r3, r4, r5, pc}
 800fb38:	20000c34 	.word	0x20000c34

0800fb3c <__swhatbuf_r>:
 800fb3c:	b570      	push	{r4, r5, r6, lr}
 800fb3e:	460e      	mov	r6, r1
 800fb40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb44:	4614      	mov	r4, r2
 800fb46:	2900      	cmp	r1, #0
 800fb48:	461d      	mov	r5, r3
 800fb4a:	b096      	sub	sp, #88	; 0x58
 800fb4c:	da07      	bge.n	800fb5e <__swhatbuf_r+0x22>
 800fb4e:	2300      	movs	r3, #0
 800fb50:	602b      	str	r3, [r5, #0]
 800fb52:	89b3      	ldrh	r3, [r6, #12]
 800fb54:	061a      	lsls	r2, r3, #24
 800fb56:	d410      	bmi.n	800fb7a <__swhatbuf_r+0x3e>
 800fb58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fb5c:	e00e      	b.n	800fb7c <__swhatbuf_r+0x40>
 800fb5e:	466a      	mov	r2, sp
 800fb60:	f000 f8aa 	bl	800fcb8 <_fstat_r>
 800fb64:	2800      	cmp	r0, #0
 800fb66:	dbf2      	blt.n	800fb4e <__swhatbuf_r+0x12>
 800fb68:	9a01      	ldr	r2, [sp, #4]
 800fb6a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800fb6e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800fb72:	425a      	negs	r2, r3
 800fb74:	415a      	adcs	r2, r3
 800fb76:	602a      	str	r2, [r5, #0]
 800fb78:	e7ee      	b.n	800fb58 <__swhatbuf_r+0x1c>
 800fb7a:	2340      	movs	r3, #64	; 0x40
 800fb7c:	2000      	movs	r0, #0
 800fb7e:	6023      	str	r3, [r4, #0]
 800fb80:	b016      	add	sp, #88	; 0x58
 800fb82:	bd70      	pop	{r4, r5, r6, pc}

0800fb84 <__smakebuf_r>:
 800fb84:	898b      	ldrh	r3, [r1, #12]
 800fb86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fb88:	079d      	lsls	r5, r3, #30
 800fb8a:	4606      	mov	r6, r0
 800fb8c:	460c      	mov	r4, r1
 800fb8e:	d507      	bpl.n	800fba0 <__smakebuf_r+0x1c>
 800fb90:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fb94:	6023      	str	r3, [r4, #0]
 800fb96:	6123      	str	r3, [r4, #16]
 800fb98:	2301      	movs	r3, #1
 800fb9a:	6163      	str	r3, [r4, #20]
 800fb9c:	b002      	add	sp, #8
 800fb9e:	bd70      	pop	{r4, r5, r6, pc}
 800fba0:	466a      	mov	r2, sp
 800fba2:	ab01      	add	r3, sp, #4
 800fba4:	f7ff ffca 	bl	800fb3c <__swhatbuf_r>
 800fba8:	9900      	ldr	r1, [sp, #0]
 800fbaa:	4605      	mov	r5, r0
 800fbac:	4630      	mov	r0, r6
 800fbae:	f7fb fe9d 	bl	800b8ec <_malloc_r>
 800fbb2:	b948      	cbnz	r0, 800fbc8 <__smakebuf_r+0x44>
 800fbb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fbb8:	059a      	lsls	r2, r3, #22
 800fbba:	d4ef      	bmi.n	800fb9c <__smakebuf_r+0x18>
 800fbbc:	f023 0303 	bic.w	r3, r3, #3
 800fbc0:	f043 0302 	orr.w	r3, r3, #2
 800fbc4:	81a3      	strh	r3, [r4, #12]
 800fbc6:	e7e3      	b.n	800fb90 <__smakebuf_r+0xc>
 800fbc8:	4b0d      	ldr	r3, [pc, #52]	; (800fc00 <__smakebuf_r+0x7c>)
 800fbca:	62b3      	str	r3, [r6, #40]	; 0x28
 800fbcc:	89a3      	ldrh	r3, [r4, #12]
 800fbce:	6020      	str	r0, [r4, #0]
 800fbd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fbd4:	81a3      	strh	r3, [r4, #12]
 800fbd6:	9b00      	ldr	r3, [sp, #0]
 800fbd8:	6120      	str	r0, [r4, #16]
 800fbda:	6163      	str	r3, [r4, #20]
 800fbdc:	9b01      	ldr	r3, [sp, #4]
 800fbde:	b15b      	cbz	r3, 800fbf8 <__smakebuf_r+0x74>
 800fbe0:	4630      	mov	r0, r6
 800fbe2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fbe6:	f000 f879 	bl	800fcdc <_isatty_r>
 800fbea:	b128      	cbz	r0, 800fbf8 <__smakebuf_r+0x74>
 800fbec:	89a3      	ldrh	r3, [r4, #12]
 800fbee:	f023 0303 	bic.w	r3, r3, #3
 800fbf2:	f043 0301 	orr.w	r3, r3, #1
 800fbf6:	81a3      	strh	r3, [r4, #12]
 800fbf8:	89a0      	ldrh	r0, [r4, #12]
 800fbfa:	4305      	orrs	r5, r0
 800fbfc:	81a5      	strh	r5, [r4, #12]
 800fbfe:	e7cd      	b.n	800fb9c <__smakebuf_r+0x18>
 800fc00:	0800deb5 	.word	0x0800deb5

0800fc04 <memmove>:
 800fc04:	4288      	cmp	r0, r1
 800fc06:	b510      	push	{r4, lr}
 800fc08:	eb01 0402 	add.w	r4, r1, r2
 800fc0c:	d902      	bls.n	800fc14 <memmove+0x10>
 800fc0e:	4284      	cmp	r4, r0
 800fc10:	4623      	mov	r3, r4
 800fc12:	d807      	bhi.n	800fc24 <memmove+0x20>
 800fc14:	1e43      	subs	r3, r0, #1
 800fc16:	42a1      	cmp	r1, r4
 800fc18:	d008      	beq.n	800fc2c <memmove+0x28>
 800fc1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fc1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fc22:	e7f8      	b.n	800fc16 <memmove+0x12>
 800fc24:	4601      	mov	r1, r0
 800fc26:	4402      	add	r2, r0
 800fc28:	428a      	cmp	r2, r1
 800fc2a:	d100      	bne.n	800fc2e <memmove+0x2a>
 800fc2c:	bd10      	pop	{r4, pc}
 800fc2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fc32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fc36:	e7f7      	b.n	800fc28 <memmove+0x24>

0800fc38 <_realloc_r>:
 800fc38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc3a:	4607      	mov	r7, r0
 800fc3c:	4614      	mov	r4, r2
 800fc3e:	460e      	mov	r6, r1
 800fc40:	b921      	cbnz	r1, 800fc4c <_realloc_r+0x14>
 800fc42:	4611      	mov	r1, r2
 800fc44:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800fc48:	f7fb be50 	b.w	800b8ec <_malloc_r>
 800fc4c:	b922      	cbnz	r2, 800fc58 <_realloc_r+0x20>
 800fc4e:	f7fb fe01 	bl	800b854 <_free_r>
 800fc52:	4625      	mov	r5, r4
 800fc54:	4628      	mov	r0, r5
 800fc56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fc58:	f000 f850 	bl	800fcfc <_malloc_usable_size_r>
 800fc5c:	42a0      	cmp	r0, r4
 800fc5e:	d20f      	bcs.n	800fc80 <_realloc_r+0x48>
 800fc60:	4621      	mov	r1, r4
 800fc62:	4638      	mov	r0, r7
 800fc64:	f7fb fe42 	bl	800b8ec <_malloc_r>
 800fc68:	4605      	mov	r5, r0
 800fc6a:	2800      	cmp	r0, #0
 800fc6c:	d0f2      	beq.n	800fc54 <_realloc_r+0x1c>
 800fc6e:	4631      	mov	r1, r6
 800fc70:	4622      	mov	r2, r4
 800fc72:	f7fe fd7e 	bl	800e772 <memcpy>
 800fc76:	4631      	mov	r1, r6
 800fc78:	4638      	mov	r0, r7
 800fc7a:	f7fb fdeb 	bl	800b854 <_free_r>
 800fc7e:	e7e9      	b.n	800fc54 <_realloc_r+0x1c>
 800fc80:	4635      	mov	r5, r6
 800fc82:	e7e7      	b.n	800fc54 <_realloc_r+0x1c>

0800fc84 <_read_r>:
 800fc84:	b538      	push	{r3, r4, r5, lr}
 800fc86:	4604      	mov	r4, r0
 800fc88:	4608      	mov	r0, r1
 800fc8a:	4611      	mov	r1, r2
 800fc8c:	2200      	movs	r2, #0
 800fc8e:	4d05      	ldr	r5, [pc, #20]	; (800fca4 <_read_r+0x20>)
 800fc90:	602a      	str	r2, [r5, #0]
 800fc92:	461a      	mov	r2, r3
 800fc94:	f7f2 fe77 	bl	8002986 <_read>
 800fc98:	1c43      	adds	r3, r0, #1
 800fc9a:	d102      	bne.n	800fca2 <_read_r+0x1e>
 800fc9c:	682b      	ldr	r3, [r5, #0]
 800fc9e:	b103      	cbz	r3, 800fca2 <_read_r+0x1e>
 800fca0:	6023      	str	r3, [r4, #0]
 800fca2:	bd38      	pop	{r3, r4, r5, pc}
 800fca4:	20000c34 	.word	0x20000c34

0800fca8 <abort>:
 800fca8:	2006      	movs	r0, #6
 800fcaa:	b508      	push	{r3, lr}
 800fcac:	f000 f856 	bl	800fd5c <raise>
 800fcb0:	2001      	movs	r0, #1
 800fcb2:	f7f2 fe5e 	bl	8002972 <_exit>
	...

0800fcb8 <_fstat_r>:
 800fcb8:	b538      	push	{r3, r4, r5, lr}
 800fcba:	2300      	movs	r3, #0
 800fcbc:	4d06      	ldr	r5, [pc, #24]	; (800fcd8 <_fstat_r+0x20>)
 800fcbe:	4604      	mov	r4, r0
 800fcc0:	4608      	mov	r0, r1
 800fcc2:	4611      	mov	r1, r2
 800fcc4:	602b      	str	r3, [r5, #0]
 800fcc6:	f7f2 feb0 	bl	8002a2a <_fstat>
 800fcca:	1c43      	adds	r3, r0, #1
 800fccc:	d102      	bne.n	800fcd4 <_fstat_r+0x1c>
 800fcce:	682b      	ldr	r3, [r5, #0]
 800fcd0:	b103      	cbz	r3, 800fcd4 <_fstat_r+0x1c>
 800fcd2:	6023      	str	r3, [r4, #0]
 800fcd4:	bd38      	pop	{r3, r4, r5, pc}
 800fcd6:	bf00      	nop
 800fcd8:	20000c34 	.word	0x20000c34

0800fcdc <_isatty_r>:
 800fcdc:	b538      	push	{r3, r4, r5, lr}
 800fcde:	2300      	movs	r3, #0
 800fce0:	4d05      	ldr	r5, [pc, #20]	; (800fcf8 <_isatty_r+0x1c>)
 800fce2:	4604      	mov	r4, r0
 800fce4:	4608      	mov	r0, r1
 800fce6:	602b      	str	r3, [r5, #0]
 800fce8:	f7f2 feae 	bl	8002a48 <_isatty>
 800fcec:	1c43      	adds	r3, r0, #1
 800fcee:	d102      	bne.n	800fcf6 <_isatty_r+0x1a>
 800fcf0:	682b      	ldr	r3, [r5, #0]
 800fcf2:	b103      	cbz	r3, 800fcf6 <_isatty_r+0x1a>
 800fcf4:	6023      	str	r3, [r4, #0]
 800fcf6:	bd38      	pop	{r3, r4, r5, pc}
 800fcf8:	20000c34 	.word	0x20000c34

0800fcfc <_malloc_usable_size_r>:
 800fcfc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fd00:	1f18      	subs	r0, r3, #4
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	bfbc      	itt	lt
 800fd06:	580b      	ldrlt	r3, [r1, r0]
 800fd08:	18c0      	addlt	r0, r0, r3
 800fd0a:	4770      	bx	lr

0800fd0c <_raise_r>:
 800fd0c:	291f      	cmp	r1, #31
 800fd0e:	b538      	push	{r3, r4, r5, lr}
 800fd10:	4604      	mov	r4, r0
 800fd12:	460d      	mov	r5, r1
 800fd14:	d904      	bls.n	800fd20 <_raise_r+0x14>
 800fd16:	2316      	movs	r3, #22
 800fd18:	6003      	str	r3, [r0, #0]
 800fd1a:	f04f 30ff 	mov.w	r0, #4294967295
 800fd1e:	bd38      	pop	{r3, r4, r5, pc}
 800fd20:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800fd22:	b112      	cbz	r2, 800fd2a <_raise_r+0x1e>
 800fd24:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fd28:	b94b      	cbnz	r3, 800fd3e <_raise_r+0x32>
 800fd2a:	4620      	mov	r0, r4
 800fd2c:	f000 f830 	bl	800fd90 <_getpid_r>
 800fd30:	462a      	mov	r2, r5
 800fd32:	4601      	mov	r1, r0
 800fd34:	4620      	mov	r0, r4
 800fd36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fd3a:	f000 b817 	b.w	800fd6c <_kill_r>
 800fd3e:	2b01      	cmp	r3, #1
 800fd40:	d00a      	beq.n	800fd58 <_raise_r+0x4c>
 800fd42:	1c59      	adds	r1, r3, #1
 800fd44:	d103      	bne.n	800fd4e <_raise_r+0x42>
 800fd46:	2316      	movs	r3, #22
 800fd48:	6003      	str	r3, [r0, #0]
 800fd4a:	2001      	movs	r0, #1
 800fd4c:	e7e7      	b.n	800fd1e <_raise_r+0x12>
 800fd4e:	2400      	movs	r4, #0
 800fd50:	4628      	mov	r0, r5
 800fd52:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800fd56:	4798      	blx	r3
 800fd58:	2000      	movs	r0, #0
 800fd5a:	e7e0      	b.n	800fd1e <_raise_r+0x12>

0800fd5c <raise>:
 800fd5c:	4b02      	ldr	r3, [pc, #8]	; (800fd68 <raise+0xc>)
 800fd5e:	4601      	mov	r1, r0
 800fd60:	6818      	ldr	r0, [r3, #0]
 800fd62:	f7ff bfd3 	b.w	800fd0c <_raise_r>
 800fd66:	bf00      	nop
 800fd68:	2000001c 	.word	0x2000001c

0800fd6c <_kill_r>:
 800fd6c:	b538      	push	{r3, r4, r5, lr}
 800fd6e:	2300      	movs	r3, #0
 800fd70:	4d06      	ldr	r5, [pc, #24]	; (800fd8c <_kill_r+0x20>)
 800fd72:	4604      	mov	r4, r0
 800fd74:	4608      	mov	r0, r1
 800fd76:	4611      	mov	r1, r2
 800fd78:	602b      	str	r3, [r5, #0]
 800fd7a:	f7f2 fdea 	bl	8002952 <_kill>
 800fd7e:	1c43      	adds	r3, r0, #1
 800fd80:	d102      	bne.n	800fd88 <_kill_r+0x1c>
 800fd82:	682b      	ldr	r3, [r5, #0]
 800fd84:	b103      	cbz	r3, 800fd88 <_kill_r+0x1c>
 800fd86:	6023      	str	r3, [r4, #0]
 800fd88:	bd38      	pop	{r3, r4, r5, pc}
 800fd8a:	bf00      	nop
 800fd8c:	20000c34 	.word	0x20000c34

0800fd90 <_getpid_r>:
 800fd90:	f7f2 bdd8 	b.w	8002944 <_getpid>

0800fd94 <_init>:
 800fd94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd96:	bf00      	nop
 800fd98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fd9a:	bc08      	pop	{r3}
 800fd9c:	469e      	mov	lr, r3
 800fd9e:	4770      	bx	lr

0800fda0 <_fini>:
 800fda0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fda2:	bf00      	nop
 800fda4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fda6:	bc08      	pop	{r3}
 800fda8:	469e      	mov	lr, r3
 800fdaa:	4770      	bx	lr
