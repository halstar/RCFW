
RCFW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e348  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001494  0800e530  0800e530  0001e530  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f9c4  0800f9c4  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  0800f9c4  0800f9c4  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f9c4  0800f9c4  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f9c4  0800f9c4  0001f9c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f9c8  0800f9c8  0001f9c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800f9cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009d4  200001ec  0800fbb8  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000bc0  0800fbb8  00020bc0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b962  00000000  00000000  00020215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004076  00000000  00000000  0003bb77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014e0  00000000  00000000  0003fbf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001318  00000000  00000000  000410d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f0b7  00000000  00000000  000423e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c829  00000000  00000000  0006149f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a69b8  00000000  00000000  0007dcc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00124680  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000067c4  00000000  00000000  001246d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001ec 	.word	0x200001ec
 8000204:	00000000 	.word	0x00000000
 8000208:	0800e518 	.word	0x0800e518

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001f0 	.word	0x200001f0
 8000224:	0800e518 	.word	0x0800e518

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_frsub>:
 8000b60:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b64:	e002      	b.n	8000b6c <__addsf3>
 8000b66:	bf00      	nop

08000b68 <__aeabi_fsub>:
 8000b68:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b6c <__addsf3>:
 8000b6c:	0042      	lsls	r2, r0, #1
 8000b6e:	bf1f      	itttt	ne
 8000b70:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b74:	ea92 0f03 	teqne	r2, r3
 8000b78:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b7c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b80:	d06a      	beq.n	8000c58 <__addsf3+0xec>
 8000b82:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b86:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b8a:	bfc1      	itttt	gt
 8000b8c:	18d2      	addgt	r2, r2, r3
 8000b8e:	4041      	eorgt	r1, r0
 8000b90:	4048      	eorgt	r0, r1
 8000b92:	4041      	eorgt	r1, r0
 8000b94:	bfb8      	it	lt
 8000b96:	425b      	neglt	r3, r3
 8000b98:	2b19      	cmp	r3, #25
 8000b9a:	bf88      	it	hi
 8000b9c:	4770      	bxhi	lr
 8000b9e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ba2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000baa:	bf18      	it	ne
 8000bac:	4240      	negne	r0, r0
 8000bae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bb2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bb6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bba:	bf18      	it	ne
 8000bbc:	4249      	negne	r1, r1
 8000bbe:	ea92 0f03 	teq	r2, r3
 8000bc2:	d03f      	beq.n	8000c44 <__addsf3+0xd8>
 8000bc4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bcc:	eb10 000c 	adds.w	r0, r0, ip
 8000bd0:	f1c3 0320 	rsb	r3, r3, #32
 8000bd4:	fa01 f103 	lsl.w	r1, r1, r3
 8000bd8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bdc:	d502      	bpl.n	8000be4 <__addsf3+0x78>
 8000bde:	4249      	negs	r1, r1
 8000be0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000be4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000be8:	d313      	bcc.n	8000c12 <__addsf3+0xa6>
 8000bea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bee:	d306      	bcc.n	8000bfe <__addsf3+0x92>
 8000bf0:	0840      	lsrs	r0, r0, #1
 8000bf2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bf6:	f102 0201 	add.w	r2, r2, #1
 8000bfa:	2afe      	cmp	r2, #254	; 0xfe
 8000bfc:	d251      	bcs.n	8000ca2 <__addsf3+0x136>
 8000bfe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c02:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c06:	bf08      	it	eq
 8000c08:	f020 0001 	biceq.w	r0, r0, #1
 8000c0c:	ea40 0003 	orr.w	r0, r0, r3
 8000c10:	4770      	bx	lr
 8000c12:	0049      	lsls	r1, r1, #1
 8000c14:	eb40 0000 	adc.w	r0, r0, r0
 8000c18:	3a01      	subs	r2, #1
 8000c1a:	bf28      	it	cs
 8000c1c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c20:	d2ed      	bcs.n	8000bfe <__addsf3+0x92>
 8000c22:	fab0 fc80 	clz	ip, r0
 8000c26:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c2a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c2e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c32:	bfaa      	itet	ge
 8000c34:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c38:	4252      	neglt	r2, r2
 8000c3a:	4318      	orrge	r0, r3
 8000c3c:	bfbc      	itt	lt
 8000c3e:	40d0      	lsrlt	r0, r2
 8000c40:	4318      	orrlt	r0, r3
 8000c42:	4770      	bx	lr
 8000c44:	f092 0f00 	teq	r2, #0
 8000c48:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c4c:	bf06      	itte	eq
 8000c4e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c52:	3201      	addeq	r2, #1
 8000c54:	3b01      	subne	r3, #1
 8000c56:	e7b5      	b.n	8000bc4 <__addsf3+0x58>
 8000c58:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c5c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c60:	bf18      	it	ne
 8000c62:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c66:	d021      	beq.n	8000cac <__addsf3+0x140>
 8000c68:	ea92 0f03 	teq	r2, r3
 8000c6c:	d004      	beq.n	8000c78 <__addsf3+0x10c>
 8000c6e:	f092 0f00 	teq	r2, #0
 8000c72:	bf08      	it	eq
 8000c74:	4608      	moveq	r0, r1
 8000c76:	4770      	bx	lr
 8000c78:	ea90 0f01 	teq	r0, r1
 8000c7c:	bf1c      	itt	ne
 8000c7e:	2000      	movne	r0, #0
 8000c80:	4770      	bxne	lr
 8000c82:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c86:	d104      	bne.n	8000c92 <__addsf3+0x126>
 8000c88:	0040      	lsls	r0, r0, #1
 8000c8a:	bf28      	it	cs
 8000c8c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c90:	4770      	bx	lr
 8000c92:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c96:	bf3c      	itt	cc
 8000c98:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c9c:	4770      	bxcc	lr
 8000c9e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ca2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ca6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000caa:	4770      	bx	lr
 8000cac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb0:	bf16      	itet	ne
 8000cb2:	4608      	movne	r0, r1
 8000cb4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cb8:	4601      	movne	r1, r0
 8000cba:	0242      	lsls	r2, r0, #9
 8000cbc:	bf06      	itte	eq
 8000cbe:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cc2:	ea90 0f01 	teqeq	r0, r1
 8000cc6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cca:	4770      	bx	lr

08000ccc <__aeabi_ui2f>:
 8000ccc:	f04f 0300 	mov.w	r3, #0
 8000cd0:	e004      	b.n	8000cdc <__aeabi_i2f+0x8>
 8000cd2:	bf00      	nop

08000cd4 <__aeabi_i2f>:
 8000cd4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cd8:	bf48      	it	mi
 8000cda:	4240      	negmi	r0, r0
 8000cdc:	ea5f 0c00 	movs.w	ip, r0
 8000ce0:	bf08      	it	eq
 8000ce2:	4770      	bxeq	lr
 8000ce4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ce8:	4601      	mov	r1, r0
 8000cea:	f04f 0000 	mov.w	r0, #0
 8000cee:	e01c      	b.n	8000d2a <__aeabi_l2f+0x2a>

08000cf0 <__aeabi_ul2f>:
 8000cf0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf4:	bf08      	it	eq
 8000cf6:	4770      	bxeq	lr
 8000cf8:	f04f 0300 	mov.w	r3, #0
 8000cfc:	e00a      	b.n	8000d14 <__aeabi_l2f+0x14>
 8000cfe:	bf00      	nop

08000d00 <__aeabi_l2f>:
 8000d00:	ea50 0201 	orrs.w	r2, r0, r1
 8000d04:	bf08      	it	eq
 8000d06:	4770      	bxeq	lr
 8000d08:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d0c:	d502      	bpl.n	8000d14 <__aeabi_l2f+0x14>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	ea5f 0c01 	movs.w	ip, r1
 8000d18:	bf02      	ittt	eq
 8000d1a:	4684      	moveq	ip, r0
 8000d1c:	4601      	moveq	r1, r0
 8000d1e:	2000      	moveq	r0, #0
 8000d20:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d24:	bf08      	it	eq
 8000d26:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d2a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d2e:	fabc f28c 	clz	r2, ip
 8000d32:	3a08      	subs	r2, #8
 8000d34:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d38:	db10      	blt.n	8000d5c <__aeabi_l2f+0x5c>
 8000d3a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d3e:	4463      	add	r3, ip
 8000d40:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d44:	f1c2 0220 	rsb	r2, r2, #32
 8000d48:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d4c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d50:	eb43 0002 	adc.w	r0, r3, r2
 8000d54:	bf08      	it	eq
 8000d56:	f020 0001 	biceq.w	r0, r0, #1
 8000d5a:	4770      	bx	lr
 8000d5c:	f102 0220 	add.w	r2, r2, #32
 8000d60:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d64:	f1c2 0220 	rsb	r2, r2, #32
 8000d68:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d6c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d70:	eb43 0002 	adc.w	r0, r3, r2
 8000d74:	bf08      	it	eq
 8000d76:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d7a:	4770      	bx	lr

08000d7c <__aeabi_fmul>:
 8000d7c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d80:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d84:	bf1e      	ittt	ne
 8000d86:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d8a:	ea92 0f0c 	teqne	r2, ip
 8000d8e:	ea93 0f0c 	teqne	r3, ip
 8000d92:	d06f      	beq.n	8000e74 <__aeabi_fmul+0xf8>
 8000d94:	441a      	add	r2, r3
 8000d96:	ea80 0c01 	eor.w	ip, r0, r1
 8000d9a:	0240      	lsls	r0, r0, #9
 8000d9c:	bf18      	it	ne
 8000d9e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000da2:	d01e      	beq.n	8000de2 <__aeabi_fmul+0x66>
 8000da4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000da8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db0:	fba0 3101 	umull	r3, r1, r0, r1
 8000db4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000db8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dbc:	bf3e      	ittt	cc
 8000dbe:	0049      	lslcc	r1, r1, #1
 8000dc0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dc4:	005b      	lslcc	r3, r3, #1
 8000dc6:	ea40 0001 	orr.w	r0, r0, r1
 8000dca:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dce:	2afd      	cmp	r2, #253	; 0xfd
 8000dd0:	d81d      	bhi.n	8000e0e <__aeabi_fmul+0x92>
 8000dd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dd6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dda:	bf08      	it	eq
 8000ddc:	f020 0001 	biceq.w	r0, r0, #1
 8000de0:	4770      	bx	lr
 8000de2:	f090 0f00 	teq	r0, #0
 8000de6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dea:	bf08      	it	eq
 8000dec:	0249      	lsleq	r1, r1, #9
 8000dee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000df2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000df6:	3a7f      	subs	r2, #127	; 0x7f
 8000df8:	bfc2      	ittt	gt
 8000dfa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dfe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e02:	4770      	bxgt	lr
 8000e04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e08:	f04f 0300 	mov.w	r3, #0
 8000e0c:	3a01      	subs	r2, #1
 8000e0e:	dc5d      	bgt.n	8000ecc <__aeabi_fmul+0x150>
 8000e10:	f112 0f19 	cmn.w	r2, #25
 8000e14:	bfdc      	itt	le
 8000e16:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e1a:	4770      	bxle	lr
 8000e1c:	f1c2 0200 	rsb	r2, r2, #0
 8000e20:	0041      	lsls	r1, r0, #1
 8000e22:	fa21 f102 	lsr.w	r1, r1, r2
 8000e26:	f1c2 0220 	rsb	r2, r2, #32
 8000e2a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e2e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e32:	f140 0000 	adc.w	r0, r0, #0
 8000e36:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e3a:	bf08      	it	eq
 8000e3c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e40:	4770      	bx	lr
 8000e42:	f092 0f00 	teq	r2, #0
 8000e46:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e4a:	bf02      	ittt	eq
 8000e4c:	0040      	lsleq	r0, r0, #1
 8000e4e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e52:	3a01      	subeq	r2, #1
 8000e54:	d0f9      	beq.n	8000e4a <__aeabi_fmul+0xce>
 8000e56:	ea40 000c 	orr.w	r0, r0, ip
 8000e5a:	f093 0f00 	teq	r3, #0
 8000e5e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e62:	bf02      	ittt	eq
 8000e64:	0049      	lsleq	r1, r1, #1
 8000e66:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e6a:	3b01      	subeq	r3, #1
 8000e6c:	d0f9      	beq.n	8000e62 <__aeabi_fmul+0xe6>
 8000e6e:	ea41 010c 	orr.w	r1, r1, ip
 8000e72:	e78f      	b.n	8000d94 <__aeabi_fmul+0x18>
 8000e74:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	bf18      	it	ne
 8000e7e:	ea93 0f0c 	teqne	r3, ip
 8000e82:	d00a      	beq.n	8000e9a <__aeabi_fmul+0x11e>
 8000e84:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e88:	bf18      	it	ne
 8000e8a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e8e:	d1d8      	bne.n	8000e42 <__aeabi_fmul+0xc6>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	4770      	bx	lr
 8000e9a:	f090 0f00 	teq	r0, #0
 8000e9e:	bf17      	itett	ne
 8000ea0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ea4:	4608      	moveq	r0, r1
 8000ea6:	f091 0f00 	teqne	r1, #0
 8000eaa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eae:	d014      	beq.n	8000eda <__aeabi_fmul+0x15e>
 8000eb0:	ea92 0f0c 	teq	r2, ip
 8000eb4:	d101      	bne.n	8000eba <__aeabi_fmul+0x13e>
 8000eb6:	0242      	lsls	r2, r0, #9
 8000eb8:	d10f      	bne.n	8000eda <__aeabi_fmul+0x15e>
 8000eba:	ea93 0f0c 	teq	r3, ip
 8000ebe:	d103      	bne.n	8000ec8 <__aeabi_fmul+0x14c>
 8000ec0:	024b      	lsls	r3, r1, #9
 8000ec2:	bf18      	it	ne
 8000ec4:	4608      	movne	r0, r1
 8000ec6:	d108      	bne.n	8000eda <__aeabi_fmul+0x15e>
 8000ec8:	ea80 0001 	eor.w	r0, r0, r1
 8000ecc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ed4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ed8:	4770      	bx	lr
 8000eda:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ede:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ee2:	4770      	bx	lr

08000ee4 <__aeabi_fdiv>:
 8000ee4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ee8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eec:	bf1e      	ittt	ne
 8000eee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ef2:	ea92 0f0c 	teqne	r2, ip
 8000ef6:	ea93 0f0c 	teqne	r3, ip
 8000efa:	d069      	beq.n	8000fd0 <__aeabi_fdiv+0xec>
 8000efc:	eba2 0203 	sub.w	r2, r2, r3
 8000f00:	ea80 0c01 	eor.w	ip, r0, r1
 8000f04:	0249      	lsls	r1, r1, #9
 8000f06:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f0a:	d037      	beq.n	8000f7c <__aeabi_fdiv+0x98>
 8000f0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f10:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f14:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f18:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f1c:	428b      	cmp	r3, r1
 8000f1e:	bf38      	it	cc
 8000f20:	005b      	lslcc	r3, r3, #1
 8000f22:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f26:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f2a:	428b      	cmp	r3, r1
 8000f2c:	bf24      	itt	cs
 8000f2e:	1a5b      	subcs	r3, r3, r1
 8000f30:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f34:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f38:	bf24      	itt	cs
 8000f3a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f3e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f42:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f46:	bf24      	itt	cs
 8000f48:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f4c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f50:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f54:	bf24      	itt	cs
 8000f56:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f5a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f5e:	011b      	lsls	r3, r3, #4
 8000f60:	bf18      	it	ne
 8000f62:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f66:	d1e0      	bne.n	8000f2a <__aeabi_fdiv+0x46>
 8000f68:	2afd      	cmp	r2, #253	; 0xfd
 8000f6a:	f63f af50 	bhi.w	8000e0e <__aeabi_fmul+0x92>
 8000f6e:	428b      	cmp	r3, r1
 8000f70:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f74:	bf08      	it	eq
 8000f76:	f020 0001 	biceq.w	r0, r0, #1
 8000f7a:	4770      	bx	lr
 8000f7c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f80:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f84:	327f      	adds	r2, #127	; 0x7f
 8000f86:	bfc2      	ittt	gt
 8000f88:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f8c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f90:	4770      	bxgt	lr
 8000f92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f96:	f04f 0300 	mov.w	r3, #0
 8000f9a:	3a01      	subs	r2, #1
 8000f9c:	e737      	b.n	8000e0e <__aeabi_fmul+0x92>
 8000f9e:	f092 0f00 	teq	r2, #0
 8000fa2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fa6:	bf02      	ittt	eq
 8000fa8:	0040      	lsleq	r0, r0, #1
 8000faa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fae:	3a01      	subeq	r2, #1
 8000fb0:	d0f9      	beq.n	8000fa6 <__aeabi_fdiv+0xc2>
 8000fb2:	ea40 000c 	orr.w	r0, r0, ip
 8000fb6:	f093 0f00 	teq	r3, #0
 8000fba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fbe:	bf02      	ittt	eq
 8000fc0:	0049      	lsleq	r1, r1, #1
 8000fc2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fc6:	3b01      	subeq	r3, #1
 8000fc8:	d0f9      	beq.n	8000fbe <__aeabi_fdiv+0xda>
 8000fca:	ea41 010c 	orr.w	r1, r1, ip
 8000fce:	e795      	b.n	8000efc <__aeabi_fdiv+0x18>
 8000fd0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fd4:	ea92 0f0c 	teq	r2, ip
 8000fd8:	d108      	bne.n	8000fec <__aeabi_fdiv+0x108>
 8000fda:	0242      	lsls	r2, r0, #9
 8000fdc:	f47f af7d 	bne.w	8000eda <__aeabi_fmul+0x15e>
 8000fe0:	ea93 0f0c 	teq	r3, ip
 8000fe4:	f47f af70 	bne.w	8000ec8 <__aeabi_fmul+0x14c>
 8000fe8:	4608      	mov	r0, r1
 8000fea:	e776      	b.n	8000eda <__aeabi_fmul+0x15e>
 8000fec:	ea93 0f0c 	teq	r3, ip
 8000ff0:	d104      	bne.n	8000ffc <__aeabi_fdiv+0x118>
 8000ff2:	024b      	lsls	r3, r1, #9
 8000ff4:	f43f af4c 	beq.w	8000e90 <__aeabi_fmul+0x114>
 8000ff8:	4608      	mov	r0, r1
 8000ffa:	e76e      	b.n	8000eda <__aeabi_fmul+0x15e>
 8000ffc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001000:	bf18      	it	ne
 8001002:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001006:	d1ca      	bne.n	8000f9e <__aeabi_fdiv+0xba>
 8001008:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800100c:	f47f af5c 	bne.w	8000ec8 <__aeabi_fmul+0x14c>
 8001010:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001014:	f47f af3c 	bne.w	8000e90 <__aeabi_fmul+0x114>
 8001018:	e75f      	b.n	8000eda <__aeabi_fmul+0x15e>
 800101a:	bf00      	nop

0800101c <__aeabi_f2iz>:
 800101c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001020:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001024:	d30f      	bcc.n	8001046 <__aeabi_f2iz+0x2a>
 8001026:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800102a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800102e:	d90d      	bls.n	800104c <__aeabi_f2iz+0x30>
 8001030:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001034:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001038:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800103c:	fa23 f002 	lsr.w	r0, r3, r2
 8001040:	bf18      	it	ne
 8001042:	4240      	negne	r0, r0
 8001044:	4770      	bx	lr
 8001046:	f04f 0000 	mov.w	r0, #0
 800104a:	4770      	bx	lr
 800104c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001050:	d101      	bne.n	8001056 <__aeabi_f2iz+0x3a>
 8001052:	0242      	lsls	r2, r0, #9
 8001054:	d105      	bne.n	8001062 <__aeabi_f2iz+0x46>
 8001056:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800105a:	bf08      	it	eq
 800105c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001060:	4770      	bx	lr
 8001062:	f04f 0000 	mov.w	r0, #0
 8001066:	4770      	bx	lr

08001068 <__aeabi_f2uiz>:
 8001068:	0042      	lsls	r2, r0, #1
 800106a:	d20e      	bcs.n	800108a <__aeabi_f2uiz+0x22>
 800106c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001070:	d30b      	bcc.n	800108a <__aeabi_f2uiz+0x22>
 8001072:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001076:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800107a:	d409      	bmi.n	8001090 <__aeabi_f2uiz+0x28>
 800107c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001080:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001084:	fa23 f002 	lsr.w	r0, r3, r2
 8001088:	4770      	bx	lr
 800108a:	f04f 0000 	mov.w	r0, #0
 800108e:	4770      	bx	lr
 8001090:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001094:	d101      	bne.n	800109a <__aeabi_f2uiz+0x32>
 8001096:	0242      	lsls	r2, r0, #9
 8001098:	d102      	bne.n	80010a0 <__aeabi_f2uiz+0x38>
 800109a:	f04f 30ff 	mov.w	r0, #4294967295
 800109e:	4770      	bx	lr
 80010a0:	f04f 0000 	mov.w	r0, #0
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop

080010a8 <MAIN_displayRcfwBanner>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static void MAIN_displayRcfwBanner(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* Used ASCII art generator from https://patorjk.com with font called "Colossal" */
  LOG_info("");
 80010ac:	4914      	ldr	r1, [pc, #80]	; (8001100 <MAIN_displayRcfwBanner+0x58>)
 80010ae:	2001      	movs	r0, #1
 80010b0:	f009 fc84 	bl	800a9bc <LOG_log>
  LOG_info("    8888888b.        .d8888b.       8888888888      888       888"  );
 80010b4:	4913      	ldr	r1, [pc, #76]	; (8001104 <MAIN_displayRcfwBanner+0x5c>)
 80010b6:	2001      	movs	r0, #1
 80010b8:	f009 fc80 	bl	800a9bc <LOG_log>
  LOG_info("    888   Y88b      d88P  Y88b      888             888   o   888"  );
 80010bc:	4912      	ldr	r1, [pc, #72]	; (8001108 <MAIN_displayRcfwBanner+0x60>)
 80010be:	2001      	movs	r0, #1
 80010c0:	f009 fc7c 	bl	800a9bc <LOG_log>
  LOG_info("    888    888      888    888      888             888  d8b  888"  );
 80010c4:	4911      	ldr	r1, [pc, #68]	; (800110c <MAIN_displayRcfwBanner+0x64>)
 80010c6:	2001      	movs	r0, #1
 80010c8:	f009 fc78 	bl	800a9bc <LOG_log>
  LOG_info("    888   d88P      888             8888888         888 d888b 888"  );
 80010cc:	4910      	ldr	r1, [pc, #64]	; (8001110 <MAIN_displayRcfwBanner+0x68>)
 80010ce:	2001      	movs	r0, #1
 80010d0:	f009 fc74 	bl	800a9bc <LOG_log>
  LOG_info("    8888888P\"       888             888             888d88888b888" );
 80010d4:	490f      	ldr	r1, [pc, #60]	; (8001114 <MAIN_displayRcfwBanner+0x6c>)
 80010d6:	2001      	movs	r0, #1
 80010d8:	f009 fc70 	bl	800a9bc <LOG_log>
  LOG_info("    888 T88b        888    888      888             88888P Y88888"  );
 80010dc:	490e      	ldr	r1, [pc, #56]	; (8001118 <MAIN_displayRcfwBanner+0x70>)
 80010de:	2001      	movs	r0, #1
 80010e0:	f009 fc6c 	bl	800a9bc <LOG_log>
  LOG_info("    888  T88b       Y88b  d88P      888             8888P   Y8888"  );
 80010e4:	490d      	ldr	r1, [pc, #52]	; (800111c <MAIN_displayRcfwBanner+0x74>)
 80010e6:	2001      	movs	r0, #1
 80010e8:	f009 fc68 	bl	800a9bc <LOG_log>
  LOG_info("    888   T88b       \"Y8888P\"       888             888P     Y888");
 80010ec:	490c      	ldr	r1, [pc, #48]	; (8001120 <MAIN_displayRcfwBanner+0x78>)
 80010ee:	2001      	movs	r0, #1
 80010f0:	f009 fc64 	bl	800a9bc <LOG_log>
  LOG_info("");
 80010f4:	4902      	ldr	r1, [pc, #8]	; (8001100 <MAIN_displayRcfwBanner+0x58>)
 80010f6:	2001      	movs	r0, #1
 80010f8:	f009 fc60 	bl	800a9bc <LOG_log>

  return;
 80010fc:	bf00      	nop
}
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	0800e530 	.word	0x0800e530
 8001104:	0800e534 	.word	0x0800e534
 8001108:	0800e578 	.word	0x0800e578
 800110c:	0800e5bc 	.word	0x0800e5bc
 8001110:	0800e600 	.word	0x0800e600
 8001114:	0800e644 	.word	0x0800e644
 8001118:	0800e688 	.word	0x0800e688
 800111c:	0800e6cc 	.word	0x0800e6cc
 8001120:	0800e710 	.word	0x0800e710

08001124 <MAIN_togglePrintOutput>:

static void MAIN_togglePrintOutput(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  if (g_MAIN_printOutput == MAIN_PRINT_OUTPUT_TO_CONSOLE)
 8001128:	4b0a      	ldr	r3, [pc, #40]	; (8001154 <MAIN_togglePrintOutput+0x30>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d107      	bne.n	8001140 <MAIN_togglePrintOutput+0x1c>
  {
    LOG_info("Directing print to MASTER");
 8001130:	4909      	ldr	r1, [pc, #36]	; (8001158 <MAIN_togglePrintOutput+0x34>)
 8001132:	2001      	movs	r0, #1
 8001134:	f009 fc42 	bl	800a9bc <LOG_log>

    g_MAIN_printOutput = MAIN_PRINT_OUTPUT_TO_MASTER;
 8001138:	4b06      	ldr	r3, [pc, #24]	; (8001154 <MAIN_togglePrintOutput+0x30>)
 800113a:	2201      	movs	r2, #1
 800113c:	701a      	strb	r2, [r3, #0]
    LOG_info("Directing print to CONSOLE");

    g_MAIN_printOutput = MAIN_PRINT_OUTPUT_TO_CONSOLE;
  }

  return;
 800113e:	e007      	b.n	8001150 <MAIN_togglePrintOutput+0x2c>
    LOG_info("Directing print to CONSOLE");
 8001140:	4906      	ldr	r1, [pc, #24]	; (800115c <MAIN_togglePrintOutput+0x38>)
 8001142:	2001      	movs	r0, #1
 8001144:	f009 fc3a 	bl	800a9bc <LOG_log>
    g_MAIN_printOutput = MAIN_PRINT_OUTPUT_TO_CONSOLE;
 8001148:	4b02      	ldr	r3, [pc, #8]	; (8001154 <MAIN_togglePrintOutput+0x30>)
 800114a:	2200      	movs	r2, #0
 800114c:	701a      	strb	r2, [r3, #0]
  return;
 800114e:	bf00      	nop
}
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	200009cc 	.word	0x200009cc
 8001158:	0800e754 	.word	0x0800e754
 800115c:	0800e770 	.word	0x0800e770

08001160 <MAIN_updateSwReset>:

static void MAIN_updateSwReset(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
  GPIO_PinState l_pinState;

  l_pinState = HAL_GPIO_ReadPin(SW_RESET_GPIO_Port, SW_RESET_Pin);
 8001166:	2101      	movs	r1, #1
 8001168:	4816      	ldr	r0, [pc, #88]	; (80011c4 <MAIN_updateSwReset+0x64>)
 800116a:	f002 fe6b 	bl	8003e44 <HAL_GPIO_ReadPin>
 800116e:	4603      	mov	r3, r0
 8001170:	71fb      	strb	r3, [r7, #7]

  if (l_pinState == GPIO_PIN_SET)
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	2b01      	cmp	r3, #1
 8001176:	d021      	beq.n	80011bc <MAIN_updateSwReset+0x5c>
  {
    ; /* Nothing to do */
  }
  else
  {
    LOG_info("SW reset will be triggered in 3s");
 8001178:	4913      	ldr	r1, [pc, #76]	; (80011c8 <MAIN_updateSwReset+0x68>)
 800117a:	2001      	movs	r0, #1
 800117c:	f009 fc1e 	bl	800a9bc <LOG_log>
    HAL_Delay(1000);
 8001180:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001184:	f001 fd36 	bl	8002bf4 <HAL_Delay>
    LOG_info("SW reset will be triggered in 2s");
 8001188:	4910      	ldr	r1, [pc, #64]	; (80011cc <MAIN_updateSwReset+0x6c>)
 800118a:	2001      	movs	r0, #1
 800118c:	f009 fc16 	bl	800a9bc <LOG_log>
    HAL_Delay(1000);
 8001190:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001194:	f001 fd2e 	bl	8002bf4 <HAL_Delay>
    LOG_info("SW reset will be triggered in 1s");
 8001198:	490d      	ldr	r1, [pc, #52]	; (80011d0 <MAIN_updateSwReset+0x70>)
 800119a:	2001      	movs	r0, #1
 800119c:	f009 fc0e 	bl	800a9bc <LOG_log>
    HAL_Delay(1000);
 80011a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011a4:	f001 fd26 	bl	8002bf4 <HAL_Delay>
    LOG_info("Resetting...");
 80011a8:	490a      	ldr	r1, [pc, #40]	; (80011d4 <MAIN_updateSwReset+0x74>)
 80011aa:	2001      	movs	r0, #1
 80011ac:	f009 fc06 	bl	800a9bc <LOG_log>
    HAL_Delay(100);
 80011b0:	2064      	movs	r0, #100	; 0x64
 80011b2:	f001 fd1f 	bl	8002bf4 <HAL_Delay>

    HAL_NVIC_SystemReset();
 80011b6:	f002 fa5f 	bl	8003678 <HAL_NVIC_SystemReset>
  }

  return;
 80011ba:	bf00      	nop
 80011bc:	bf00      	nop
}
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	40011000 	.word	0x40011000
 80011c8:	0800e78c 	.word	0x0800e78c
 80011cc:	0800e7b0 	.word	0x0800e7b0
 80011d0:	0800e7d4 	.word	0x0800e7d4
 80011d4:	0800e7f8 	.word	0x0800e7f8

080011d8 <MAIN_updateLogSetup>:

static void MAIN_updateLogSetup(T_BLU_Data *p_data, uint32_t p_timeInS)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]
  switch (p_data->button)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	7c1b      	ldrb	r3, [r3, #16]
 80011e6:	3b05      	subs	r3, #5
 80011e8:	2b03      	cmp	r3, #3
 80011ea:	d85b      	bhi.n	80012a4 <MAIN_updateLogSetup+0xcc>
 80011ec:	a201      	add	r2, pc, #4	; (adr r2, 80011f4 <MAIN_updateLogSetup+0x1c>)
 80011ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011f2:	bf00      	nop
 80011f4:	08001205 	.word	0x08001205
 80011f8:	0800127d 	.word	0x0800127d
 80011fc:	0800122d 	.word	0x0800122d
 8001200:	08001255 	.word	0x08001255
  {
    case BLU_BUTTON_PAD_UP:
      if (g_MAIN_padUpPressedStartTimeInS == 0)
 8001204:	4b35      	ldr	r3, [pc, #212]	; (80012dc <MAIN_updateLogSetup+0x104>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d105      	bne.n	8001218 <MAIN_updateLogSetup+0x40>
      {
        g_MAIN_padUpPressedStartTimeInS = p_timeInS;
 800120c:	4a33      	ldr	r2, [pc, #204]	; (80012dc <MAIN_updateLogSetup+0x104>)
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	6013      	str	r3, [r2, #0]

        LOG_increaseLevel();
 8001212:	f009 fba3 	bl	800a95c <LOG_increaseLevel>
      }
      else
      {
        g_MAIN_padUpPressedStartTimeInS = 0;
      }
      break;
 8001216:	e047      	b.n	80012a8 <MAIN_updateLogSetup+0xd0>
      else if (p_timeInS - g_MAIN_padUpPressedStartTimeInS < STP_PAD_BUTTONS_DEBOUNCE_PERIOD_IN_S)
 8001218:	4b30      	ldr	r3, [pc, #192]	; (80012dc <MAIN_updateLogSetup+0x104>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	683a      	ldr	r2, [r7, #0]
 800121e:	1ad3      	subs	r3, r2, r3
 8001220:	2b01      	cmp	r3, #1
 8001222:	d941      	bls.n	80012a8 <MAIN_updateLogSetup+0xd0>
        g_MAIN_padUpPressedStartTimeInS = 0;
 8001224:	4b2d      	ldr	r3, [pc, #180]	; (80012dc <MAIN_updateLogSetup+0x104>)
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
      break;
 800122a:	e03d      	b.n	80012a8 <MAIN_updateLogSetup+0xd0>

    case BLU_BUTTON_PAD_DOWN:
      if (g_MAIN_padDownPressedStartTimeInS == 0)
 800122c:	4b2c      	ldr	r3, [pc, #176]	; (80012e0 <MAIN_updateLogSetup+0x108>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d105      	bne.n	8001240 <MAIN_updateLogSetup+0x68>
      {
        g_MAIN_padDownPressedStartTimeInS = p_timeInS;
 8001234:	4a2a      	ldr	r2, [pc, #168]	; (80012e0 <MAIN_updateLogSetup+0x108>)
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	6013      	str	r3, [r2, #0]

        LOG_decreaseLevel();
 800123a:	f009 fba7 	bl	800a98c <LOG_decreaseLevel>
      }
      else
      {
        g_MAIN_padDownPressedStartTimeInS = 0;
      }
      break;
 800123e:	e035      	b.n	80012ac <MAIN_updateLogSetup+0xd4>
      else if (p_timeInS - g_MAIN_padDownPressedStartTimeInS < STP_PAD_BUTTONS_DEBOUNCE_PERIOD_IN_S)
 8001240:	4b27      	ldr	r3, [pc, #156]	; (80012e0 <MAIN_updateLogSetup+0x108>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	683a      	ldr	r2, [r7, #0]
 8001246:	1ad3      	subs	r3, r2, r3
 8001248:	2b01      	cmp	r3, #1
 800124a:	d92f      	bls.n	80012ac <MAIN_updateLogSetup+0xd4>
        g_MAIN_padDownPressedStartTimeInS = 0;
 800124c:	4b24      	ldr	r3, [pc, #144]	; (80012e0 <MAIN_updateLogSetup+0x108>)
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
      break;
 8001252:	e02b      	b.n	80012ac <MAIN_updateLogSetup+0xd4>

    case BLU_BUTTON_PAD_LEFT:
      if (g_MAIN_padLeftPressedStartTimeInS == 0)
 8001254:	4b23      	ldr	r3, [pc, #140]	; (80012e4 <MAIN_updateLogSetup+0x10c>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d105      	bne.n	8001268 <MAIN_updateLogSetup+0x90>
      {
        g_MAIN_padLeftPressedStartTimeInS = p_timeInS;
 800125c:	4a21      	ldr	r2, [pc, #132]	; (80012e4 <MAIN_updateLogSetup+0x10c>)
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	6013      	str	r3, [r2, #0]

        LOG_toggleOnOff();
 8001262:	f009 fb4d 	bl	800a900 <LOG_toggleOnOff>
      }
      else
      {
        g_MAIN_padLeftPressedStartTimeInS = 0;
      }
      break;
 8001266:	e023      	b.n	80012b0 <MAIN_updateLogSetup+0xd8>
      else if (p_timeInS - g_MAIN_padLeftPressedStartTimeInS < STP_PAD_BUTTONS_DEBOUNCE_PERIOD_IN_S)
 8001268:	4b1e      	ldr	r3, [pc, #120]	; (80012e4 <MAIN_updateLogSetup+0x10c>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	683a      	ldr	r2, [r7, #0]
 800126e:	1ad3      	subs	r3, r2, r3
 8001270:	2b01      	cmp	r3, #1
 8001272:	d91d      	bls.n	80012b0 <MAIN_updateLogSetup+0xd8>
        g_MAIN_padLeftPressedStartTimeInS = 0;
 8001274:	4b1b      	ldr	r3, [pc, #108]	; (80012e4 <MAIN_updateLogSetup+0x10c>)
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
      break;
 800127a:	e019      	b.n	80012b0 <MAIN_updateLogSetup+0xd8>

    case BLU_BUTTON_PAD_RIGHT:
      if (g_MAIN_padRightPressedStartTimeInS == 0)
 800127c:	4b1a      	ldr	r3, [pc, #104]	; (80012e8 <MAIN_updateLogSetup+0x110>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d105      	bne.n	8001290 <MAIN_updateLogSetup+0xb8>
      {
        g_MAIN_padRightPressedStartTimeInS = p_timeInS;
 8001284:	4a18      	ldr	r2, [pc, #96]	; (80012e8 <MAIN_updateLogSetup+0x110>)
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	6013      	str	r3, [r2, #0]

        MAIN_togglePrintOutput();
 800128a:	f7ff ff4b 	bl	8001124 <MAIN_togglePrintOutput>
      }
      else
      {
        g_MAIN_padRightPressedStartTimeInS = 0;
      }
      break;
 800128e:	e011      	b.n	80012b4 <MAIN_updateLogSetup+0xdc>
      else if (p_timeInS - g_MAIN_padRightPressedStartTimeInS < STP_PAD_BUTTONS_DEBOUNCE_PERIOD_IN_S)
 8001290:	4b15      	ldr	r3, [pc, #84]	; (80012e8 <MAIN_updateLogSetup+0x110>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	683a      	ldr	r2, [r7, #0]
 8001296:	1ad3      	subs	r3, r2, r3
 8001298:	2b01      	cmp	r3, #1
 800129a:	d90b      	bls.n	80012b4 <MAIN_updateLogSetup+0xdc>
        g_MAIN_padRightPressedStartTimeInS = 0;
 800129c:	4b12      	ldr	r3, [pc, #72]	; (80012e8 <MAIN_updateLogSetup+0x110>)
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
      break;
 80012a2:	e007      	b.n	80012b4 <MAIN_updateLogSetup+0xdc>

    default:
      ; /* Nothing to do */;
      break;
 80012a4:	bf00      	nop
 80012a6:	e006      	b.n	80012b6 <MAIN_updateLogSetup+0xde>
      break;
 80012a8:	bf00      	nop
 80012aa:	e004      	b.n	80012b6 <MAIN_updateLogSetup+0xde>
      break;
 80012ac:	bf00      	nop
 80012ae:	e002      	b.n	80012b6 <MAIN_updateLogSetup+0xde>
      break;
 80012b0:	bf00      	nop
 80012b2:	e000      	b.n	80012b6 <MAIN_updateLogSetup+0xde>
      break;
 80012b4:	bf00      	nop
  }

  if ((p_data->button != BLU_BUTTON_PAD_UP) && (p_data->button != BLU_BUTTON_PAD_DOWN))
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	7c1b      	ldrb	r3, [r3, #16]
 80012ba:	2b05      	cmp	r3, #5
 80012bc:	d00a      	beq.n	80012d4 <MAIN_updateLogSetup+0xfc>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	7c1b      	ldrb	r3, [r3, #16]
 80012c2:	2b07      	cmp	r3, #7
 80012c4:	d006      	beq.n	80012d4 <MAIN_updateLogSetup+0xfc>
  {
    g_MAIN_padUpPressedStartTimeInS   = 0;
 80012c6:	4b05      	ldr	r3, [pc, #20]	; (80012dc <MAIN_updateLogSetup+0x104>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
    g_MAIN_padDownPressedStartTimeInS = 0;
 80012cc:	4b04      	ldr	r3, [pc, #16]	; (80012e0 <MAIN_updateLogSetup+0x108>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]
  else
  {
    ; /* Nothing to do */;
  }

  return;
 80012d2:	bf00      	nop
 80012d4:	bf00      	nop
}
 80012d6:	3708      	adds	r7, #8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	20000208 	.word	0x20000208
 80012e0:	2000020c 	.word	0x2000020c
 80012e4:	20000210 	.word	0x20000210
 80012e8:	20000214 	.word	0x20000214

080012ec <MAIN_updateLedMode>:

static void MAIN_updateLedMode(T_DRV_MODE p_driveMode, uint32_t p_voltageInMv)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	4603      	mov	r3, r0
 80012f4:	6039      	str	r1, [r7, #0]
 80012f6:	71fb      	strb	r3, [r7, #7]
  /* Regarding LED mode, battery check is prioritary on user requests. */
  /* Ignore 0 value as we could get it at startup or while debugging.  */
  if ((p_voltageInMv != 0) && (p_voltageInMv < STP_MIN_BATTERY_LEVEL_IN_MV))
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d00d      	beq.n	800131a <MAIN_updateLedMode+0x2e>
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	f242 720f 	movw	r2, #9999	; 0x270f
 8001304:	4293      	cmp	r3, r2
 8001306:	d808      	bhi.n	800131a <MAIN_updateLedMode+0x2e>
  {
    LOG_warning("Battery is getting low: %u mV", p_voltageInMv);
 8001308:	683a      	ldr	r2, [r7, #0]
 800130a:	4911      	ldr	r1, [pc, #68]	; (8001350 <MAIN_updateLedMode+0x64>)
 800130c:	2002      	movs	r0, #2
 800130e:	f009 fb55 	bl	800a9bc <LOG_log>

    LED_setMode(LED_MODE_FORCED_OFF);
 8001312:	2000      	movs	r0, #0
 8001314:	f009 fa32 	bl	800a77c <LED_setMode>
 8001318:	e016      	b.n	8001348 <MAIN_updateLedMode+0x5c>
  }
  else
  {
    switch (p_driveMode)
 800131a:	79fb      	ldrb	r3, [r7, #7]
 800131c:	2b02      	cmp	r3, #2
 800131e:	d00e      	beq.n	800133e <MAIN_updateLedMode+0x52>
 8001320:	2b02      	cmp	r3, #2
 8001322:	dc10      	bgt.n	8001346 <MAIN_updateLedMode+0x5a>
 8001324:	2b00      	cmp	r3, #0
 8001326:	d002      	beq.n	800132e <MAIN_updateLedMode+0x42>
 8001328:	2b01      	cmp	r3, #1
 800132a:	d004      	beq.n	8001336 <MAIN_updateLedMode+0x4a>
        LED_setMode(LED_MODE_BLINK_FAST);
        break;

      default:
        ; /* Nothing to do */
        break;
 800132c:	e00b      	b.n	8001346 <MAIN_updateLedMode+0x5a>
        LED_setMode(LED_MODE_BLINK_SLOW);
 800132e:	2002      	movs	r0, #2
 8001330:	f009 fa24 	bl	800a77c <LED_setMode>
        break;
 8001334:	e008      	b.n	8001348 <MAIN_updateLedMode+0x5c>
        LED_setMode(LED_MODE_BLINK_MEDIUM);
 8001336:	2003      	movs	r0, #3
 8001338:	f009 fa20 	bl	800a77c <LED_setMode>
        break;
 800133c:	e004      	b.n	8001348 <MAIN_updateLedMode+0x5c>
        LED_setMode(LED_MODE_BLINK_FAST);
 800133e:	2004      	movs	r0, #4
 8001340:	f009 fa1c 	bl	800a77c <LED_setMode>
        break;
 8001344:	e000      	b.n	8001348 <MAIN_updateLedMode+0x5c>
        break;
 8001346:	bf00      	nop
    }
  }

  return;
 8001348:	bf00      	nop
}
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	0800e808 	.word	0x0800e808

08001354 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b092      	sub	sp, #72	; 0x48
 8001358:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800135a:	f001 fbe9 	bl	8002b30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800135e:	f000 fa53 	bl	8001808 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001362:	f000 fe55 	bl	8002010 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001366:	f000 fb2f 	bl	80019c8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800136a:	f000 fe27 	bl	8001fbc <MX_USART1_UART_Init>
  MX_UART4_Init();
 800136e:	f000 fdfb 	bl	8001f68 <MX_UART4_Init>
  MX_ADC1_Init();
 8001372:	f000 faa1 	bl	80018b8 <MX_ADC1_Init>
  MX_TIM8_Init();
 8001376:	f000 fd33 	bl	8001de0 <MX_TIM8_Init>
  MX_RTC_Init();
 800137a:	f000 fadb 	bl	8001934 <MX_RTC_Init>
  MX_TIM7_Init();
 800137e:	f000 fcf9 	bl	8001d74 <MX_TIM7_Init>
  MX_TIM2_Init();
 8001382:	f000 fb71 	bl	8001a68 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001386:	f000 fbc3 	bl	8001b10 <MX_TIM3_Init>
  MX_TIM4_Init();
 800138a:	f000 fc15 	bl	8001bb8 <MX_TIM4_Init>
  MX_TIM5_Init();
 800138e:	f000 fc67 	bl	8001c60 <MX_TIM5_Init>
  MX_TIM6_Init();
 8001392:	f000 fcb9 	bl	8001d08 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  /* Setup local variables */
  l_halReturnCode   = HAL_OK;
 8001396:	2300      	movs	r3, #0
 8001398:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  l_driveMode       = STP_DEFAULT_DRIVE_MODE;
 800139c:	2302      	movs	r3, #2
 800139e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  l_currentTimeInS  = 0;
 80013a2:	2300      	movs	r3, #0
 80013a4:	633b      	str	r3, [r7, #48]	; 0x30
  l_voltageInMv     = 0;
 80013a6:	2300      	movs	r3, #0
 80013a8:	603b      	str	r3, [r7, #0]
  l_lastTimeInMs    = 0;
 80013aa:	2300      	movs	r3, #0
 80013ac:	87fb      	strh	r3, [r7, #62]	; 0x3e
  l_currentTimeInMs = 0;
 80013ae:	2300      	movs	r3, #0
 80013b0:	85fb      	strh	r3, [r7, #46]	; 0x2e
  l_deltaTimeInMs   = 0;
 80013b2:	2300      	movs	r3, #0
 80013b4:	85bb      	strh	r3, [r7, #44]	; 0x2c

  SFO_init        (&l_commandsFifo );
 80013b6:	f107 0320 	add.w	r3, r7, #32
 80013ba:	4618      	mov	r0, r3
 80013bc:	f009 feec 	bl	800b198 <SFO_init>
  BLU_initData    (&l_bluetoothData);
 80013c0:	f107 030c 	add.w	r3, r7, #12
 80013c4:	4618      	mov	r0, r3
 80013c6:	f007 fe3b 	bl	8009040 <BLU_initData>
  UTI_resetRtcTime(&l_rtcTime      );
 80013ca:	f107 0308 	add.w	r3, r7, #8
 80013ce:	4618      	mov	r0, r3
 80013d0:	f00a f825 	bl	800b41e <UTI_resetRtcTime>
  UTI_resetRtcDate(&l_rtcDate      );
 80013d4:	1d3b      	adds	r3, r7, #4
 80013d6:	4618      	mov	r0, r3
 80013d8:	f00a f80c 	bl	800b3f4 <UTI_resetRtcDate>

  /* Setup global variables */
  g_MAIN_padUpPressedStartTimeInS    = 0;
 80013dc:	4b83      	ldr	r3, [pc, #524]	; (80015ec <main+0x298>)
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]
  g_MAIN_padDownPressedStartTimeInS  = 0;
 80013e2:	4b83      	ldr	r3, [pc, #524]	; (80015f0 <main+0x29c>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
  g_MAIN_padLeftPressedStartTimeInS  = 0;
 80013e8:	4b82      	ldr	r3, [pc, #520]	; (80015f4 <main+0x2a0>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	601a      	str	r2, [r3, #0]
  g_MAIN_padRightPressedStartTimeInS = 0;
 80013ee:	4b82      	ldr	r3, [pc, #520]	; (80015f8 <main+0x2a4>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
  g_MAIN_swResetPollingLastTimeInS   = 0;
 80013f4:	4b81      	ldr	r3, [pc, #516]	; (80015fc <main+0x2a8>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
  g_MAIN_batteryPollingLastTimeInS   = 0;
 80013fa:	4b81      	ldr	r3, [pc, #516]	; (8001600 <main+0x2ac>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
  g_MAIN_ledModeUpdateLastTimeInS    = 0;
 8001400:	4b80      	ldr	r3, [pc, #512]	; (8001604 <main+0x2b0>)
 8001402:	2200      	movs	r2, #0
 8001404:	601a      	str	r2, [r3, #0]
  g_MAIN_driveLogInfoLastTimeInS     = 0;
 8001406:	4b80      	ldr	r3, [pc, #512]	; (8001608 <main+0x2b4>)
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
  g_MAIN_printOutput                 = MAIN_PRINT_OUTPUT_TO_CONSOLE;
 800140c:	4b7f      	ldr	r3, [pc, #508]	; (800160c <main+0x2b8>)
 800140e:	2200      	movs	r2, #0
 8001410:	701a      	strb	r2, [r3, #0]

  /* Setup console */
  CON_init(&huart1);
 8001412:	487f      	ldr	r0, [pc, #508]	; (8001610 <main+0x2bc>)
 8001414:	f007 ff54 	bl	80092c0 <CON_init>

  /* Setup master connection */
  MAS_init(&huart4);
 8001418:	487e      	ldr	r0, [pc, #504]	; (8001614 <main+0x2c0>)
 800141a:	f009 fb61 	bl	800aae0 <MAS_init>

  /* Temporary delay/workaound to deal with debugger connection issue */
  for (int i = 0; i < 10; i++)
 800141e:	2300      	movs	r3, #0
 8001420:	63bb      	str	r3, [r7, #56]	; 0x38
 8001422:	e006      	b.n	8001432 <main+0xde>
  {
    HAL_Delay(1000);
 8001424:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001428:	f001 fbe4 	bl	8002bf4 <HAL_Delay>
  for (int i = 0; i < 10; i++)
 800142c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800142e:	3301      	adds	r3, #1
 8001430:	63bb      	str	r3, [r7, #56]	; 0x38
 8001432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001434:	2b09      	cmp	r3, #9
 8001436:	ddf5      	ble.n	8001424 <main+0xd0>
  }

  /* Setup and start using logs */
  LOG_init    (&hrtc, STP_DEFAULT_IS_LOG_ON);
 8001438:	2101      	movs	r1, #1
 800143a:	4877      	ldr	r0, [pc, #476]	; (8001618 <main+0x2c4>)
 800143c:	f009 fa46 	bl	800a8cc <LOG_init>
  LOG_setLevel(STP_DEFAULT_LOG_LEVEL       );
 8001440:	2000      	movs	r0, #0
 8001442:	f009 fa7b 	bl	800a93c <LOG_setLevel>
  LOG_info    ("Starting RCFW"             );
 8001446:	4975      	ldr	r1, [pc, #468]	; (800161c <main+0x2c8>)
 8001448:	2001      	movs	r0, #1
 800144a:	f009 fab7 	bl	800a9bc <LOG_log>

  /* Display RCFW banner */
  MAIN_displayRcfwBanner();
 800144e:	f7ff fe2b 	bl	80010a8 <MAIN_displayRcfwBanner>

  /* Initialize Timer 6 */
  l_halReturnCode = HAL_TIM_Base_Start(&htim6);
 8001452:	4873      	ldr	r0, [pc, #460]	; (8001620 <main+0x2cc>)
 8001454:	f004 fcd8 	bl	8005e08 <HAL_TIM_Base_Start>
 8001458:	4603      	mov	r3, r0
 800145a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  if (l_halReturnCode != HAL_OK)
 800145e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001462:	2b00      	cmp	r3, #0
 8001464:	d007      	beq.n	8001476 <main+0x122>
  {
    LOG_error("HAL_TIM_Base_Start(&htim6) returned an error code: %d", l_halReturnCode);
 8001466:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800146a:	461a      	mov	r2, r3
 800146c:	496d      	ldr	r1, [pc, #436]	; (8001624 <main+0x2d0>)
 800146e:	2003      	movs	r0, #3
 8001470:	f009 faa4 	bl	800a9bc <LOG_log>
 8001474:	e003      	b.n	800147e <main+0x12a>
  }
  else
  {
    LOG_info("Started TIMER 6 (time measurement)");
 8001476:	496c      	ldr	r1, [pc, #432]	; (8001628 <main+0x2d4>)
 8001478:	2001      	movs	r0, #1
 800147a:	f009 fa9f 	bl	800a9bc <LOG_log>
  }

  /* Initialize Timer 7 and delay function in utilities */
  UTI_init(&htim7);
 800147e:	486b      	ldr	r0, [pc, #428]	; (800162c <main+0x2d8>)
 8001480:	f009 ff8a 	bl	800b398 <UTI_init>

  l_halReturnCode = HAL_TIM_Base_Start_IT(&htim7);
 8001484:	4869      	ldr	r0, [pc, #420]	; (800162c <main+0x2d8>)
 8001486:	f004 fd49 	bl	8005f1c <HAL_TIM_Base_Start_IT>
 800148a:	4603      	mov	r3, r0
 800148c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  if (l_halReturnCode != HAL_OK)
 8001490:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001494:	2b00      	cmp	r3, #0
 8001496:	d007      	beq.n	80014a8 <main+0x154>
  {
    LOG_error("HAL_TIM_Base_Start_IT(&htim7) returned an error code: %d", l_halReturnCode);
 8001498:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800149c:	461a      	mov	r2, r3
 800149e:	4964      	ldr	r1, [pc, #400]	; (8001630 <main+0x2dc>)
 80014a0:	2003      	movs	r0, #3
 80014a2:	f009 fa8b 	bl	800a9bc <LOG_log>
 80014a6:	e003      	b.n	80014b0 <main+0x15c>
  }
  else
  {
    LOG_info("Started TIMER 7 (utilities/delay)");
 80014a8:	4962      	ldr	r1, [pc, #392]	; (8001634 <main+0x2e0>)
 80014aa:	2001      	movs	r0, #1
 80014ac:	f009 fa86 	bl	800a9bc <LOG_log>
  }

  /* Initialize Timer 1 & green LED */
  LED_setMode(LED_MODE_BLINK_FAST);
 80014b0:	2004      	movs	r0, #4
 80014b2:	f009 f963 	bl	800a77c <LED_setMode>

  l_halReturnCode = HAL_TIM_Base_Start_IT(&htim1);
 80014b6:	4860      	ldr	r0, [pc, #384]	; (8001638 <main+0x2e4>)
 80014b8:	f004 fd30 	bl	8005f1c <HAL_TIM_Base_Start_IT>
 80014bc:	4603      	mov	r3, r0
 80014be:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  if (l_halReturnCode != HAL_OK)
 80014c2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d007      	beq.n	80014da <main+0x186>
  {
    LOG_error("HAL_TIM_Base_Start_IT(&htim1) returned an error code: %d", l_halReturnCode);
 80014ca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80014ce:	461a      	mov	r2, r3
 80014d0:	495a      	ldr	r1, [pc, #360]	; (800163c <main+0x2e8>)
 80014d2:	2003      	movs	r0, #3
 80014d4:	f009 fa72 	bl	800a9bc <LOG_log>
 80014d8:	e003      	b.n	80014e2 <main+0x18e>
  }
  else
  {
    LOG_info("Started TIMER 1 (green LED)");
 80014da:	4959      	ldr	r1, [pc, #356]	; (8001640 <main+0x2ec>)
 80014dc:	2001      	movs	r0, #1
 80014de:	f009 fa6d 	bl	800a9bc <LOG_log>
  }

  /* Initialize Timers 2, 3, 4 & 5 */
  l_halReturnCode  = HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 80014e2:	213c      	movs	r1, #60	; 0x3c
 80014e4:	4857      	ldr	r0, [pc, #348]	; (8001644 <main+0x2f0>)
 80014e6:	f005 f951 	bl	800678c <HAL_TIM_Encoder_Start_IT>
 80014ea:	4603      	mov	r3, r0
 80014ec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  l_halReturnCode |= HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 80014f0:	213c      	movs	r1, #60	; 0x3c
 80014f2:	4855      	ldr	r0, [pc, #340]	; (8001648 <main+0x2f4>)
 80014f4:	f005 f94a 	bl	800678c <HAL_TIM_Encoder_Start_IT>
 80014f8:	4603      	mov	r3, r0
 80014fa:	461a      	mov	r2, r3
 80014fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001500:	4313      	orrs	r3, r2
 8001502:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  l_halReturnCode |= HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 8001506:	213c      	movs	r1, #60	; 0x3c
 8001508:	4850      	ldr	r0, [pc, #320]	; (800164c <main+0x2f8>)
 800150a:	f005 f93f 	bl	800678c <HAL_TIM_Encoder_Start_IT>
 800150e:	4603      	mov	r3, r0
 8001510:	461a      	mov	r2, r3
 8001512:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001516:	4313      	orrs	r3, r2
 8001518:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  l_halReturnCode |= HAL_TIM_Encoder_Start_IT(&htim5, TIM_CHANNEL_ALL);
 800151c:	213c      	movs	r1, #60	; 0x3c
 800151e:	484c      	ldr	r0, [pc, #304]	; (8001650 <main+0x2fc>)
 8001520:	f005 f934 	bl	800678c <HAL_TIM_Encoder_Start_IT>
 8001524:	4603      	mov	r3, r0
 8001526:	461a      	mov	r2, r3
 8001528:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800152c:	4313      	orrs	r3, r2
 800152e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  if (l_halReturnCode != HAL_OK)
 8001532:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001536:	2b00      	cmp	r3, #0
 8001538:	d007      	beq.n	800154a <main+0x1f6>
  {
    LOG_error("HAL_TIM_Encoder_Start_IT(&htimX) returned error code(s): %d", l_halReturnCode);
 800153a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800153e:	461a      	mov	r2, r3
 8001540:	4944      	ldr	r1, [pc, #272]	; (8001654 <main+0x300>)
 8001542:	2003      	movs	r0, #3
 8001544:	f009 fa3a 	bl	800a9bc <LOG_log>
 8001548:	e003      	b.n	8001552 <main+0x1fe>
  }
  else
  {
    LOG_info("Started TIMER 2, 3, 4, 5 (encoders)");
 800154a:	4943      	ldr	r1, [pc, #268]	; (8001658 <main+0x304>)
 800154c:	2001      	movs	r0, #1
 800154e:	f009 fa35 	bl	800a9bc <LOG_log>
  }

  /* Initialize Timer 8 */
  l_halReturnCode = HAL_TIM_Base_Start(&htim8);
 8001552:	4842      	ldr	r0, [pc, #264]	; (800165c <main+0x308>)
 8001554:	f004 fc58 	bl	8005e08 <HAL_TIM_Base_Start>
 8001558:	4603      	mov	r3, r0
 800155a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  if (l_halReturnCode != HAL_OK)
 800155e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001562:	2b00      	cmp	r3, #0
 8001564:	d007      	beq.n	8001576 <main+0x222>
  {
    LOG_error("HAL_TIM_Base_Start(&htim8) returned an error code: %d", l_halReturnCode);
 8001566:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800156a:	461a      	mov	r2, r3
 800156c:	493c      	ldr	r1, [pc, #240]	; (8001660 <main+0x30c>)
 800156e:	2003      	movs	r0, #3
 8001570:	f009 fa24 	bl	800a9bc <LOG_log>
 8001574:	e003      	b.n	800157e <main+0x22a>
  }
  else
  {
    LOG_info("Started TIMER 8 (PWM channels)");
 8001576:	493b      	ldr	r1, [pc, #236]	; (8001664 <main+0x310>)
 8001578:	2001      	movs	r0, #1
 800157a:	f009 fa1f 	bl	800a9bc <LOG_log>
  }

  /* Initialize battery monitor */
  BAT_init(&hadc1);
 800157e:	483a      	ldr	r0, [pc, #232]	; (8001668 <main+0x314>)
 8001580:	f007 fc10 	bl	8008da4 <BAT_init>

  /* Initialize PWM channels */
  l_halReturnCode  = HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8001584:	2100      	movs	r1, #0
 8001586:	4835      	ldr	r0, [pc, #212]	; (800165c <main+0x308>)
 8001588:	f004 fe36 	bl	80061f8 <HAL_TIM_PWM_Start>
 800158c:	4603      	mov	r3, r0
 800158e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  l_halReturnCode |= HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8001592:	2104      	movs	r1, #4
 8001594:	4831      	ldr	r0, [pc, #196]	; (800165c <main+0x308>)
 8001596:	f004 fe2f 	bl	80061f8 <HAL_TIM_PWM_Start>
 800159a:	4603      	mov	r3, r0
 800159c:	461a      	mov	r2, r3
 800159e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80015a2:	4313      	orrs	r3, r2
 80015a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  l_halReturnCode |= HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 80015a8:	2108      	movs	r1, #8
 80015aa:	482c      	ldr	r0, [pc, #176]	; (800165c <main+0x308>)
 80015ac:	f004 fe24 	bl	80061f8 <HAL_TIM_PWM_Start>
 80015b0:	4603      	mov	r3, r0
 80015b2:	461a      	mov	r2, r3
 80015b4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80015b8:	4313      	orrs	r3, r2
 80015ba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  l_halReturnCode |= HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 80015be:	210c      	movs	r1, #12
 80015c0:	4826      	ldr	r0, [pc, #152]	; (800165c <main+0x308>)
 80015c2:	f004 fe19 	bl	80061f8 <HAL_TIM_PWM_Start>
 80015c6:	4603      	mov	r3, r0
 80015c8:	461a      	mov	r2, r3
 80015ca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80015ce:	4313      	orrs	r3, r2
 80015d0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  if (l_halReturnCode != HAL_OK)
 80015d4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d049      	beq.n	8001670 <main+0x31c>
  {
    LOG_error("HAL_TIM_PWM_Start(&htim8) returned error code(s): %d", l_halReturnCode);
 80015dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80015e0:	461a      	mov	r2, r3
 80015e2:	4922      	ldr	r1, [pc, #136]	; (800166c <main+0x318>)
 80015e4:	2003      	movs	r0, #3
 80015e6:	f009 f9e9 	bl	800a9bc <LOG_log>
 80015ea:	e045      	b.n	8001678 <main+0x324>
 80015ec:	20000208 	.word	0x20000208
 80015f0:	2000020c 	.word	0x2000020c
 80015f4:	20000210 	.word	0x20000210
 80015f8:	20000214 	.word	0x20000214
 80015fc:	20000218 	.word	0x20000218
 8001600:	2000021c 	.word	0x2000021c
 8001604:	20000220 	.word	0x20000220
 8001608:	20000224 	.word	0x20000224
 800160c:	200009cc 	.word	0x200009cc
 8001610:	200007dc 	.word	0x200007dc
 8001614:	200009d0 	.word	0x200009d0
 8001618:	20000850 	.word	0x20000850
 800161c:	0800e828 	.word	0x0800e828
 8001620:	20000864 	.word	0x20000864
 8001624:	0800e838 	.word	0x0800e838
 8001628:	0800e870 	.word	0x0800e870
 800162c:	20000af8 	.word	0x20000af8
 8001630:	0800e894 	.word	0x0800e894
 8001634:	0800e8d0 	.word	0x0800e8d0
 8001638:	20000918 	.word	0x20000918
 800163c:	0800e8f4 	.word	0x0800e8f4
 8001640:	0800e930 	.word	0x0800e930
 8001644:	20000a44 	.word	0x20000a44
 8001648:	200006f8 	.word	0x200006f8
 800164c:	20000590 	.word	0x20000590
 8001650:	20000644 	.word	0x20000644
 8001654:	0800e94c 	.word	0x0800e94c
 8001658:	0800e988 	.word	0x0800e988
 800165c:	200004dc 	.word	0x200004dc
 8001660:	0800e9ac 	.word	0x0800e9ac
 8001664:	0800e9e4 	.word	0x0800e9e4
 8001668:	200007ac 	.word	0x200007ac
 800166c:	0800ea04 	.word	0x0800ea04
  }
  else
  {
    LOG_info("Started PWM channels");
 8001670:	4957      	ldr	r1, [pc, #348]	; (80017d0 <main+0x47c>)
 8001672:	2001      	movs	r0, #1
 8001674:	f009 f9a2 	bl	800a9bc <LOG_log>
  }

  /* Initialize bluetooth control */
  BLU_init();
 8001678:	f007 fcd2 	bl	8009020 <BLU_init>

  /* Initialize driving module */
  DRV_init(&htim8, &htim4, &htim5, &htim2, &htim3);
 800167c:	4b55      	ldr	r3, [pc, #340]	; (80017d4 <main+0x480>)
 800167e:	9300      	str	r3, [sp, #0]
 8001680:	4b55      	ldr	r3, [pc, #340]	; (80017d8 <main+0x484>)
 8001682:	4a56      	ldr	r2, [pc, #344]	; (80017dc <main+0x488>)
 8001684:	4956      	ldr	r1, [pc, #344]	; (80017e0 <main+0x48c>)
 8001686:	4857      	ldr	r0, [pc, #348]	; (80017e4 <main+0x490>)
 8001688:	f007 feaa 	bl	80093e0 <DRV_init>

  DRV_logInfo();
 800168c:	f008 fc3a 	bl	8009f04 <DRV_logInfo>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  /* Initialize time measurement for master board control */
  l_lastTimeInMs = __HAL_TIM_GET_COUNTER(&htim6);
 8001690:	4b55      	ldr	r3, [pc, #340]	; (80017e8 <main+0x494>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001696:	87fb      	strh	r3, [r7, #62]	; 0x3e

  while (1)
  {
    l_driveMode = DRV_getMode();
 8001698:	f008 fc2a 	bl	8009ef0 <DRV_getMode>
 800169c:	4603      	mov	r3, r0
 800169e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    l_halReturnCode = HAL_RTC_GetTime(&hrtc, &l_rtcTime, RTC_FORMAT_BCD);
 80016a2:	f107 0308 	add.w	r3, r7, #8
 80016a6:	2201      	movs	r2, #1
 80016a8:	4619      	mov	r1, r3
 80016aa:	4850      	ldr	r0, [pc, #320]	; (80017ec <main+0x498>)
 80016ac:	f003 fdd2 	bl	8005254 <HAL_RTC_GetTime>
 80016b0:	4603      	mov	r3, r0
 80016b2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if (l_halReturnCode != HAL_OK)
 80016b6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d006      	beq.n	80016cc <main+0x378>
    {
      LOG_error("HAL_RTC_GetTime() returned an error code: %d", l_halReturnCode);
 80016be:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80016c2:	461a      	mov	r2, r3
 80016c4:	494a      	ldr	r1, [pc, #296]	; (80017f0 <main+0x49c>)
 80016c6:	2003      	movs	r0, #3
 80016c8:	f009 f978 	bl	800a9bc <LOG_log>
    else
    {
      ; /* Nothing to to */
    }

    l_halReturnCode = HAL_RTC_GetDate(&hrtc, &l_rtcDate, RTC_FORMAT_BCD);
 80016cc:	1d3b      	adds	r3, r7, #4
 80016ce:	2201      	movs	r2, #1
 80016d0:	4619      	mov	r1, r3
 80016d2:	4846      	ldr	r0, [pc, #280]	; (80017ec <main+0x498>)
 80016d4:	f003 ffc2 	bl	800565c <HAL_RTC_GetDate>
 80016d8:	4603      	mov	r3, r0
 80016da:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if (l_halReturnCode != HAL_OK)
 80016de:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d006      	beq.n	80016f4 <main+0x3a0>
    {
      LOG_error("HAL_RTC_GetDate() returned an error code: %d", l_halReturnCode);
 80016e6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80016ea:	461a      	mov	r2, r3
 80016ec:	4941      	ldr	r1, [pc, #260]	; (80017f4 <main+0x4a0>)
 80016ee:	2003      	movs	r0, #3
 80016f0:	f009 f964 	bl	800a9bc <LOG_log>
    else
    {
      ; /* Nothing to to */
    }

    l_currentTimeInS = UTI_turnRtcTimeToSeconds(&l_rtcTime);
 80016f4:	f107 0308 	add.w	r3, r7, #8
 80016f8:	4618      	mov	r0, r3
 80016fa:	f009 fea2 	bl	800b442 <UTI_turnRtcTimeToSeconds>
 80016fe:	6338      	str	r0, [r7, #48]	; 0x30

    if (l_currentTimeInS - g_MAIN_swResetPollingLastTimeInS >= STP_SW_RESET_POLLING_PERIOD_IN_S)
 8001700:	4b3d      	ldr	r3, [pc, #244]	; (80017f8 <main+0x4a4>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001706:	429a      	cmp	r2, r3
 8001708:	d004      	beq.n	8001714 <main+0x3c0>
    {
      MAIN_updateSwReset();
 800170a:	f7ff fd29 	bl	8001160 <MAIN_updateSwReset>

      g_MAIN_swResetPollingLastTimeInS = l_currentTimeInS;
 800170e:	4a3a      	ldr	r2, [pc, #232]	; (80017f8 <main+0x4a4>)
 8001710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001712:	6013      	str	r3, [r2, #0]
    else
    {
      ; /* Nothing to do */
    }

    if (l_currentTimeInS - g_MAIN_batteryPollingLastTimeInS >= STP_BATTERY_POLLING_PERIOD_IN_S)
 8001714:	4b39      	ldr	r3, [pc, #228]	; (80017fc <main+0x4a8>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	2b09      	cmp	r3, #9
 800171e:	d906      	bls.n	800172e <main+0x3da>
    {
      BAT_update(&l_voltageInMv);
 8001720:	463b      	mov	r3, r7
 8001722:	4618      	mov	r0, r3
 8001724:	f007 fb52 	bl	8008dcc <BAT_update>

      g_MAIN_batteryPollingLastTimeInS = l_currentTimeInS;
 8001728:	4a34      	ldr	r2, [pc, #208]	; (80017fc <main+0x4a8>)
 800172a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800172c:	6013      	str	r3, [r2, #0]
    else
    {
      ; /* Nothing to do */
    }

    if (l_currentTimeInS - g_MAIN_ledModeUpdateLastTimeInS >= STP_LED_UPDATE_MODE_PERIOD_IN_S)
 800172e:	4b34      	ldr	r3, [pc, #208]	; (8001800 <main+0x4ac>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001734:	429a      	cmp	r2, r3
 8001736:	d009      	beq.n	800174c <main+0x3f8>
    {
      MAIN_updateLedMode (l_driveMode, l_voltageInMv);
 8001738:	683a      	ldr	r2, [r7, #0]
 800173a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800173e:	4611      	mov	r1, r2
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff fdd3 	bl	80012ec <MAIN_updateLedMode>

      g_MAIN_ledModeUpdateLastTimeInS = l_currentTimeInS;
 8001746:	4a2e      	ldr	r2, [pc, #184]	; (8001800 <main+0x4ac>)
 8001748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800174a:	6013      	str	r3, [r2, #0]
    else
    {
      ; /* Nothing to do */
    }

    BLU_receiveData        (&l_bluetoothData);
 800174c:	f107 030c 	add.w	r3, r7, #12
 8001750:	4618      	mov	r0, r3
 8001752:	f007 fc8d 	bl	8009070 <BLU_receiveData>
    MAIN_updateLogSetup    (&l_bluetoothData, l_currentTimeInS);
 8001756:	f107 030c 	add.w	r3, r7, #12
 800175a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff fd3b 	bl	80011d8 <MAIN_updateLogSetup>
    DRV_updateFromBluetooth(&l_bluetoothData);
 8001762:	f107 030c 	add.w	r3, r7, #12
 8001766:	4618      	mov	r0, r3
 8001768:	f007 ff76 	bl	8009658 <DRV_updateFromBluetooth>

    CON_updateFifo(&l_commandsFifo);
 800176c:	f107 0320 	add.w	r3, r7, #32
 8001770:	4618      	mov	r0, r3
 8001772:	f007 fdfd 	bl	8009370 <CON_updateFifo>
    MAS_updateFifo(&l_commandsFifo);
 8001776:	f107 0320 	add.w	r3, r7, #32
 800177a:	4618      	mov	r0, r3
 800177c:	f009 fa08 	bl	800ab90 <MAS_updateFifo>

    l_currentTimeInMs = __HAL_TIM_GET_COUNTER(&htim6);
 8001780:	4b19      	ldr	r3, [pc, #100]	; (80017e8 <main+0x494>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001786:	85fb      	strh	r3, [r7, #46]	; 0x2e
    l_deltaTimeInMs   = l_lastTimeInMs - l_currentTimeInMs;
 8001788:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800178a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	85bb      	strh	r3, [r7, #44]	; 0x2c
    l_lastTimeInMs    = l_currentTimeInMs;
 8001790:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001792:	87fb      	strh	r3, [r7, #62]	; 0x3e

    if (l_currentTimeInS - g_MAIN_driveLogInfoLastTimeInS >= STP_DRIVE_LOG_INFO_PERIOD_IN_S)
 8001794:	4b1b      	ldr	r3, [pc, #108]	; (8001804 <main+0x4b0>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	2b02      	cmp	r3, #2
 800179e:	d90a      	bls.n	80017b6 <main+0x462>
    {
      DRV_updateFromCommands(&l_commandsFifo, l_deltaTimeInMs, true);
 80017a0:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 80017a2:	f107 0320 	add.w	r3, r7, #32
 80017a6:	2201      	movs	r2, #1
 80017a8:	4618      	mov	r0, r3
 80017aa:	f008 f895 	bl	80098d8 <DRV_updateFromCommands>

      g_MAIN_driveLogInfoLastTimeInS = l_currentTimeInS;
 80017ae:	4a15      	ldr	r2, [pc, #84]	; (8001804 <main+0x4b0>)
 80017b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017b2:	6013      	str	r3, [r2, #0]
 80017b4:	e006      	b.n	80017c4 <main+0x470>
    }
    else
    {
      DRV_updateFromCommands(&l_commandsFifo, l_deltaTimeInMs, false);
 80017b6:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 80017b8:	f107 0320 	add.w	r3, r7, #32
 80017bc:	2200      	movs	r2, #0
 80017be:	4618      	mov	r0, r3
 80017c0:	f008 f88a 	bl	80098d8 <DRV_updateFromCommands>
    }

    UTI_delayUs(MAIN_LOOP_DELAY_IN_MS);
 80017c4:	f242 7010 	movw	r0, #10000	; 0x2710
 80017c8:	f009 fdfa 	bl	800b3c0 <UTI_delayUs>
    l_driveMode = DRV_getMode();
 80017cc:	e764      	b.n	8001698 <main+0x344>
 80017ce:	bf00      	nop
 80017d0:	0800ea3c 	.word	0x0800ea3c
 80017d4:	200006f8 	.word	0x200006f8
 80017d8:	20000a44 	.word	0x20000a44
 80017dc:	20000644 	.word	0x20000644
 80017e0:	20000590 	.word	0x20000590
 80017e4:	200004dc 	.word	0x200004dc
 80017e8:	20000864 	.word	0x20000864
 80017ec:	20000850 	.word	0x20000850
 80017f0:	0800ea54 	.word	0x0800ea54
 80017f4:	0800ea84 	.word	0x0800ea84
 80017f8:	20000218 	.word	0x20000218
 80017fc:	2000021c 	.word	0x2000021c
 8001800:	20000220 	.word	0x20000220
 8001804:	20000224 	.word	0x20000224

08001808 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b096      	sub	sp, #88	; 0x58
 800180c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800180e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001812:	2228      	movs	r2, #40	; 0x28
 8001814:	2100      	movs	r1, #0
 8001816:	4618      	mov	r0, r3
 8001818:	f009 fee4 	bl	800b5e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800181c:	f107 031c 	add.w	r3, r7, #28
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	605a      	str	r2, [r3, #4]
 8001826:	609a      	str	r2, [r3, #8]
 8001828:	60da      	str	r2, [r3, #12]
 800182a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800182c:	1d3b      	adds	r3, r7, #4
 800182e:	2200      	movs	r2, #0
 8001830:	601a      	str	r2, [r3, #0]
 8001832:	605a      	str	r2, [r3, #4]
 8001834:	609a      	str	r2, [r3, #8]
 8001836:	60da      	str	r2, [r3, #12]
 8001838:	611a      	str	r2, [r3, #16]
 800183a:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800183c:	230a      	movs	r3, #10
 800183e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001840:	2301      	movs	r3, #1
 8001842:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001844:	2310      	movs	r3, #16
 8001846:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001848:	2301      	movs	r3, #1
 800184a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800184c:	2300      	movs	r3, #0
 800184e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001850:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001854:	4618      	mov	r0, r3
 8001856:	f002 fb81 	bl	8003f5c <HAL_RCC_OscConfig>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8001860:	f000 fce2 	bl	8002228 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001864:	230f      	movs	r3, #15
 8001866:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001868:	2300      	movs	r3, #0
 800186a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800186c:	2300      	movs	r3, #0
 800186e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001870:	2300      	movs	r3, #0
 8001872:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001874:	2300      	movs	r3, #0
 8001876:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001878:	f107 031c 	add.w	r3, r7, #28
 800187c:	2100      	movs	r1, #0
 800187e:	4618      	mov	r0, r3
 8001880:	f002 fedc 	bl	800463c <HAL_RCC_ClockConfig>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <SystemClock_Config+0x86>
  {
    Error_Handler();
 800188a:	f000 fccd 	bl	8002228 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 800188e:	2303      	movs	r3, #3
 8001890:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001892:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001896:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001898:	2300      	movs	r3, #0
 800189a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800189c:	1d3b      	adds	r3, r7, #4
 800189e:	4618      	mov	r0, r3
 80018a0:	f003 f90c 	bl	8004abc <HAL_RCCEx_PeriphCLKConfig>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80018aa:	f000 fcbd 	bl	8002228 <Error_Handler>
  }
}
 80018ae:	bf00      	nop
 80018b0:	3758      	adds	r7, #88	; 0x58
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
	...

080018b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80018be:	1d3b      	adds	r3, r7, #4
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	605a      	str	r2, [r3, #4]
 80018c6:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80018c8:	4b18      	ldr	r3, [pc, #96]	; (800192c <MX_ADC1_Init+0x74>)
 80018ca:	4a19      	ldr	r2, [pc, #100]	; (8001930 <MX_ADC1_Init+0x78>)
 80018cc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80018ce:	4b17      	ldr	r3, [pc, #92]	; (800192c <MX_ADC1_Init+0x74>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80018d4:	4b15      	ldr	r3, [pc, #84]	; (800192c <MX_ADC1_Init+0x74>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80018da:	4b14      	ldr	r3, [pc, #80]	; (800192c <MX_ADC1_Init+0x74>)
 80018dc:	2200      	movs	r2, #0
 80018de:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018e0:	4b12      	ldr	r3, [pc, #72]	; (800192c <MX_ADC1_Init+0x74>)
 80018e2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80018e6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018e8:	4b10      	ldr	r3, [pc, #64]	; (800192c <MX_ADC1_Init+0x74>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80018ee:	4b0f      	ldr	r3, [pc, #60]	; (800192c <MX_ADC1_Init+0x74>)
 80018f0:	2201      	movs	r2, #1
 80018f2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80018f4:	480d      	ldr	r0, [pc, #52]	; (800192c <MX_ADC1_Init+0x74>)
 80018f6:	f001 f9a1 	bl	8002c3c <HAL_ADC_Init>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001900:	f000 fc92 	bl	8002228 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001904:	2305      	movs	r3, #5
 8001906:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001908:	2301      	movs	r3, #1
 800190a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800190c:	2300      	movs	r3, #0
 800190e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001910:	1d3b      	adds	r3, r7, #4
 8001912:	4619      	mov	r1, r3
 8001914:	4805      	ldr	r0, [pc, #20]	; (800192c <MX_ADC1_Init+0x74>)
 8001916:	f001 fb5b 	bl	8002fd0 <HAL_ADC_ConfigChannel>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001920:	f000 fc82 	bl	8002228 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001924:	bf00      	nop
 8001926:	3710      	adds	r7, #16
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	200007ac 	.word	0x200007ac
 8001930:	40012400 	.word	0x40012400

08001934 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800193a:	1d3b      	adds	r3, r7, #4
 800193c:	2100      	movs	r1, #0
 800193e:	460a      	mov	r2, r1
 8001940:	801a      	strh	r2, [r3, #0]
 8001942:	460a      	mov	r2, r1
 8001944:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8001946:	2300      	movs	r3, #0
 8001948:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800194a:	4b1d      	ldr	r3, [pc, #116]	; (80019c0 <MX_RTC_Init+0x8c>)
 800194c:	4a1d      	ldr	r2, [pc, #116]	; (80019c4 <MX_RTC_Init+0x90>)
 800194e:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8001950:	4b1b      	ldr	r3, [pc, #108]	; (80019c0 <MX_RTC_Init+0x8c>)
 8001952:	f04f 32ff 	mov.w	r2, #4294967295
 8001956:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 8001958:	4b19      	ldr	r3, [pc, #100]	; (80019c0 <MX_RTC_Init+0x8c>)
 800195a:	2200      	movs	r2, #0
 800195c:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800195e:	4818      	ldr	r0, [pc, #96]	; (80019c0 <MX_RTC_Init+0x8c>)
 8001960:	f003 fac8 	bl	8004ef4 <HAL_RTC_Init>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <MX_RTC_Init+0x3a>
  {
    Error_Handler();
 800196a:	f000 fc5d 	bl	8002228 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800196e:	2300      	movs	r3, #0
 8001970:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001972:	2300      	movs	r3, #0
 8001974:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001976:	2300      	movs	r3, #0
 8001978:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800197a:	1d3b      	adds	r3, r7, #4
 800197c:	2201      	movs	r2, #1
 800197e:	4619      	mov	r1, r3
 8001980:	480f      	ldr	r0, [pc, #60]	; (80019c0 <MX_RTC_Init+0x8c>)
 8001982:	f003 fb81 	bl	8005088 <HAL_RTC_SetTime>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <MX_RTC_Init+0x5c>
  {
    Error_Handler();
 800198c:	f000 fc4c 	bl	8002228 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001990:	2301      	movs	r3, #1
 8001992:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8001994:	2301      	movs	r3, #1
 8001996:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 8001998:	2301      	movs	r3, #1
 800199a:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 800199c:	2300      	movs	r3, #0
 800199e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 80019a0:	463b      	mov	r3, r7
 80019a2:	2201      	movs	r2, #1
 80019a4:	4619      	mov	r1, r3
 80019a6:	4806      	ldr	r0, [pc, #24]	; (80019c0 <MX_RTC_Init+0x8c>)
 80019a8:	f003 fd3a 	bl	8005420 <HAL_RTC_SetDate>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 80019b2:	f000 fc39 	bl	8002228 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80019b6:	bf00      	nop
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	20000850 	.word	0x20000850
 80019c4:	40002800 	.word	0x40002800

080019c8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b086      	sub	sp, #24
 80019cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019ce:	f107 0308 	add.w	r3, r7, #8
 80019d2:	2200      	movs	r2, #0
 80019d4:	601a      	str	r2, [r3, #0]
 80019d6:	605a      	str	r2, [r3, #4]
 80019d8:	609a      	str	r2, [r3, #8]
 80019da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019dc:	463b      	mov	r3, r7
 80019de:	2200      	movs	r2, #0
 80019e0:	601a      	str	r2, [r3, #0]
 80019e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80019e4:	4b1e      	ldr	r3, [pc, #120]	; (8001a60 <MX_TIM1_Init+0x98>)
 80019e6:	4a1f      	ldr	r2, [pc, #124]	; (8001a64 <MX_TIM1_Init+0x9c>)
 80019e8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7999;
 80019ea:	4b1d      	ldr	r3, [pc, #116]	; (8001a60 <MX_TIM1_Init+0x98>)
 80019ec:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80019f0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019f2:	4b1b      	ldr	r3, [pc, #108]	; (8001a60 <MX_TIM1_Init+0x98>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 249;
 80019f8:	4b19      	ldr	r3, [pc, #100]	; (8001a60 <MX_TIM1_Init+0x98>)
 80019fa:	22f9      	movs	r2, #249	; 0xf9
 80019fc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019fe:	4b18      	ldr	r3, [pc, #96]	; (8001a60 <MX_TIM1_Init+0x98>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a04:	4b16      	ldr	r3, [pc, #88]	; (8001a60 <MX_TIM1_Init+0x98>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a0a:	4b15      	ldr	r3, [pc, #84]	; (8001a60 <MX_TIM1_Init+0x98>)
 8001a0c:	2280      	movs	r2, #128	; 0x80
 8001a0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a10:	4813      	ldr	r0, [pc, #76]	; (8001a60 <MX_TIM1_Init+0x98>)
 8001a12:	f004 f927 	bl	8005c64 <HAL_TIM_Base_Init>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001a1c:	f000 fc04 	bl	8002228 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a24:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a26:	f107 0308 	add.w	r3, r7, #8
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	480c      	ldr	r0, [pc, #48]	; (8001a60 <MX_TIM1_Init+0x98>)
 8001a2e:	f005 fa51 	bl	8006ed4 <HAL_TIM_ConfigClockSource>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001a38:	f000 fbf6 	bl	8002228 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a40:	2300      	movs	r3, #0
 8001a42:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a44:	463b      	mov	r3, r7
 8001a46:	4619      	mov	r1, r3
 8001a48:	4805      	ldr	r0, [pc, #20]	; (8001a60 <MX_TIM1_Init+0x98>)
 8001a4a:	f006 f99f 	bl	8007d8c <HAL_TIMEx_MasterConfigSynchronization>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001a54:	f000 fbe8 	bl	8002228 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001a58:	bf00      	nop
 8001a5a:	3718      	adds	r7, #24
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	20000918 	.word	0x20000918
 8001a64:	40012c00 	.word	0x40012c00

08001a68 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b08c      	sub	sp, #48	; 0x30
 8001a6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a6e:	f107 030c 	add.w	r3, r7, #12
 8001a72:	2224      	movs	r2, #36	; 0x24
 8001a74:	2100      	movs	r1, #0
 8001a76:	4618      	mov	r0, r3
 8001a78:	f009 fdb4 	bl	800b5e4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a7c:	1d3b      	adds	r3, r7, #4
 8001a7e:	2200      	movs	r2, #0
 8001a80:	601a      	str	r2, [r3, #0]
 8001a82:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a84:	4b21      	ldr	r3, [pc, #132]	; (8001b0c <MX_TIM2_Init+0xa4>)
 8001a86:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a8a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001a8c:	4b1f      	ldr	r3, [pc, #124]	; (8001b0c <MX_TIM2_Init+0xa4>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a92:	4b1e      	ldr	r3, [pc, #120]	; (8001b0c <MX_TIM2_Init+0xa4>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001a98:	4b1c      	ldr	r3, [pc, #112]	; (8001b0c <MX_TIM2_Init+0xa4>)
 8001a9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a9e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aa0:	4b1a      	ldr	r3, [pc, #104]	; (8001b0c <MX_TIM2_Init+0xa4>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001aa6:	4b19      	ldr	r3, [pc, #100]	; (8001b0c <MX_TIM2_Init+0xa4>)
 8001aa8:	2280      	movs	r2, #128	; 0x80
 8001aaa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001aac:	2303      	movs	r3, #3
 8001aae:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001abc:	230a      	movs	r3, #10
 8001abe:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001acc:	2300      	movs	r3, #0
 8001ace:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001ad0:	f107 030c 	add.w	r3, r7, #12
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	480d      	ldr	r0, [pc, #52]	; (8001b0c <MX_TIM2_Init+0xa4>)
 8001ad8:	f004 fcb6 	bl	8006448 <HAL_TIM_Encoder_Init>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001ae2:	f000 fba1 	bl	8002228 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aea:	2300      	movs	r3, #0
 8001aec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001aee:	1d3b      	adds	r3, r7, #4
 8001af0:	4619      	mov	r1, r3
 8001af2:	4806      	ldr	r0, [pc, #24]	; (8001b0c <MX_TIM2_Init+0xa4>)
 8001af4:	f006 f94a 	bl	8007d8c <HAL_TIMEx_MasterConfigSynchronization>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001afe:	f000 fb93 	bl	8002228 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b02:	bf00      	nop
 8001b04:	3730      	adds	r7, #48	; 0x30
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	20000a44 	.word	0x20000a44

08001b10 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b08c      	sub	sp, #48	; 0x30
 8001b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b16:	f107 030c 	add.w	r3, r7, #12
 8001b1a:	2224      	movs	r2, #36	; 0x24
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f009 fd60 	bl	800b5e4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b24:	1d3b      	adds	r3, r7, #4
 8001b26:	2200      	movs	r2, #0
 8001b28:	601a      	str	r2, [r3, #0]
 8001b2a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b2c:	4b20      	ldr	r3, [pc, #128]	; (8001bb0 <MX_TIM3_Init+0xa0>)
 8001b2e:	4a21      	ldr	r2, [pc, #132]	; (8001bb4 <MX_TIM3_Init+0xa4>)
 8001b30:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001b32:	4b1f      	ldr	r3, [pc, #124]	; (8001bb0 <MX_TIM3_Init+0xa0>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b38:	4b1d      	ldr	r3, [pc, #116]	; (8001bb0 <MX_TIM3_Init+0xa0>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001b3e:	4b1c      	ldr	r3, [pc, #112]	; (8001bb0 <MX_TIM3_Init+0xa0>)
 8001b40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b44:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b46:	4b1a      	ldr	r3, [pc, #104]	; (8001bb0 <MX_TIM3_Init+0xa0>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b4c:	4b18      	ldr	r3, [pc, #96]	; (8001bb0 <MX_TIM3_Init+0xa0>)
 8001b4e:	2280      	movs	r2, #128	; 0x80
 8001b50:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001b52:	2303      	movs	r3, #3
 8001b54:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b56:	2300      	movs	r3, #0
 8001b58:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001b62:	230a      	movs	r3, #10
 8001b64:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b66:	2300      	movs	r3, #0
 8001b68:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001b72:	2300      	movs	r3, #0
 8001b74:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001b76:	f107 030c 	add.w	r3, r7, #12
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	480c      	ldr	r0, [pc, #48]	; (8001bb0 <MX_TIM3_Init+0xa0>)
 8001b7e:	f004 fc63 	bl	8006448 <HAL_TIM_Encoder_Init>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001b88:	f000 fb4e 	bl	8002228 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b90:	2300      	movs	r3, #0
 8001b92:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b94:	1d3b      	adds	r3, r7, #4
 8001b96:	4619      	mov	r1, r3
 8001b98:	4805      	ldr	r0, [pc, #20]	; (8001bb0 <MX_TIM3_Init+0xa0>)
 8001b9a:	f006 f8f7 	bl	8007d8c <HAL_TIMEx_MasterConfigSynchronization>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001ba4:	f000 fb40 	bl	8002228 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001ba8:	bf00      	nop
 8001baa:	3730      	adds	r7, #48	; 0x30
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	200006f8 	.word	0x200006f8
 8001bb4:	40000400 	.word	0x40000400

08001bb8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b08c      	sub	sp, #48	; 0x30
 8001bbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001bbe:	f107 030c 	add.w	r3, r7, #12
 8001bc2:	2224      	movs	r2, #36	; 0x24
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f009 fd0c 	bl	800b5e4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bcc:	1d3b      	adds	r3, r7, #4
 8001bce:	2200      	movs	r2, #0
 8001bd0:	601a      	str	r2, [r3, #0]
 8001bd2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001bd4:	4b20      	ldr	r3, [pc, #128]	; (8001c58 <MX_TIM4_Init+0xa0>)
 8001bd6:	4a21      	ldr	r2, [pc, #132]	; (8001c5c <MX_TIM4_Init+0xa4>)
 8001bd8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001bda:	4b1f      	ldr	r3, [pc, #124]	; (8001c58 <MX_TIM4_Init+0xa0>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001be0:	4b1d      	ldr	r3, [pc, #116]	; (8001c58 <MX_TIM4_Init+0xa0>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001be6:	4b1c      	ldr	r3, [pc, #112]	; (8001c58 <MX_TIM4_Init+0xa0>)
 8001be8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bec:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bee:	4b1a      	ldr	r3, [pc, #104]	; (8001c58 <MX_TIM4_Init+0xa0>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001bf4:	4b18      	ldr	r3, [pc, #96]	; (8001c58 <MX_TIM4_Init+0xa0>)
 8001bf6:	2280      	movs	r2, #128	; 0x80
 8001bf8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c02:	2301      	movs	r3, #1
 8001c04:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c06:	2300      	movs	r3, #0
 8001c08:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001c0a:	230a      	movs	r3, #10
 8001c0c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c12:	2301      	movs	r3, #1
 8001c14:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c16:	2300      	movs	r3, #0
 8001c18:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001c1e:	f107 030c 	add.w	r3, r7, #12
 8001c22:	4619      	mov	r1, r3
 8001c24:	480c      	ldr	r0, [pc, #48]	; (8001c58 <MX_TIM4_Init+0xa0>)
 8001c26:	f004 fc0f 	bl	8006448 <HAL_TIM_Encoder_Init>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001c30:	f000 fafa 	bl	8002228 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c34:	2300      	movs	r3, #0
 8001c36:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001c3c:	1d3b      	adds	r3, r7, #4
 8001c3e:	4619      	mov	r1, r3
 8001c40:	4805      	ldr	r0, [pc, #20]	; (8001c58 <MX_TIM4_Init+0xa0>)
 8001c42:	f006 f8a3 	bl	8007d8c <HAL_TIMEx_MasterConfigSynchronization>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001c4c:	f000 faec 	bl	8002228 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001c50:	bf00      	nop
 8001c52:	3730      	adds	r7, #48	; 0x30
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	20000590 	.word	0x20000590
 8001c5c:	40000800 	.word	0x40000800

08001c60 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b08c      	sub	sp, #48	; 0x30
 8001c64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c66:	f107 030c 	add.w	r3, r7, #12
 8001c6a:	2224      	movs	r2, #36	; 0x24
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f009 fcb8 	bl	800b5e4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c74:	1d3b      	adds	r3, r7, #4
 8001c76:	2200      	movs	r2, #0
 8001c78:	601a      	str	r2, [r3, #0]
 8001c7a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001c7c:	4b20      	ldr	r3, [pc, #128]	; (8001d00 <MX_TIM5_Init+0xa0>)
 8001c7e:	4a21      	ldr	r2, [pc, #132]	; (8001d04 <MX_TIM5_Init+0xa4>)
 8001c80:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001c82:	4b1f      	ldr	r3, [pc, #124]	; (8001d00 <MX_TIM5_Init+0xa0>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c88:	4b1d      	ldr	r3, [pc, #116]	; (8001d00 <MX_TIM5_Init+0xa0>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8001c8e:	4b1c      	ldr	r3, [pc, #112]	; (8001d00 <MX_TIM5_Init+0xa0>)
 8001c90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c94:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c96:	4b1a      	ldr	r3, [pc, #104]	; (8001d00 <MX_TIM5_Init+0xa0>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c9c:	4b18      	ldr	r3, [pc, #96]	; (8001d00 <MX_TIM5_Init+0xa0>)
 8001c9e:	2280      	movs	r2, #128	; 0x80
 8001ca0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001caa:	2301      	movs	r3, #1
 8001cac:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001cb2:	230a      	movs	r3, #10
 8001cb4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001cc6:	f107 030c 	add.w	r3, r7, #12
 8001cca:	4619      	mov	r1, r3
 8001ccc:	480c      	ldr	r0, [pc, #48]	; (8001d00 <MX_TIM5_Init+0xa0>)
 8001cce:	f004 fbbb 	bl	8006448 <HAL_TIM_Encoder_Init>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001cd8:	f000 faa6 	bl	8002228 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001ce4:	1d3b      	adds	r3, r7, #4
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	4805      	ldr	r0, [pc, #20]	; (8001d00 <MX_TIM5_Init+0xa0>)
 8001cea:	f006 f84f 	bl	8007d8c <HAL_TIMEx_MasterConfigSynchronization>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001cf4:	f000 fa98 	bl	8002228 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001cf8:	bf00      	nop
 8001cfa:	3730      	adds	r7, #48	; 0x30
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	20000644 	.word	0x20000644
 8001d04:	40000c00 	.word	0x40000c00

08001d08 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d0e:	463b      	mov	r3, r7
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001d16:	4b15      	ldr	r3, [pc, #84]	; (8001d6c <MX_TIM6_Init+0x64>)
 8001d18:	4a15      	ldr	r2, [pc, #84]	; (8001d70 <MX_TIM6_Init+0x68>)
 8001d1a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7;
 8001d1c:	4b13      	ldr	r3, [pc, #76]	; (8001d6c <MX_TIM6_Init+0x64>)
 8001d1e:	2207      	movs	r2, #7
 8001d20:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d22:	4b12      	ldr	r3, [pc, #72]	; (8001d6c <MX_TIM6_Init+0x64>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001d28:	4b10      	ldr	r3, [pc, #64]	; (8001d6c <MX_TIM6_Init+0x64>)
 8001d2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d2e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d30:	4b0e      	ldr	r3, [pc, #56]	; (8001d6c <MX_TIM6_Init+0x64>)
 8001d32:	2280      	movs	r2, #128	; 0x80
 8001d34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001d36:	480d      	ldr	r0, [pc, #52]	; (8001d6c <MX_TIM6_Init+0x64>)
 8001d38:	f003 ff94 	bl	8005c64 <HAL_TIM_Base_Init>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001d42:	f000 fa71 	bl	8002228 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d46:	2300      	movs	r3, #0
 8001d48:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001d4e:	463b      	mov	r3, r7
 8001d50:	4619      	mov	r1, r3
 8001d52:	4806      	ldr	r0, [pc, #24]	; (8001d6c <MX_TIM6_Init+0x64>)
 8001d54:	f006 f81a 	bl	8007d8c <HAL_TIMEx_MasterConfigSynchronization>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001d5e:	f000 fa63 	bl	8002228 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001d62:	bf00      	nop
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	20000864 	.word	0x20000864
 8001d70:	40001000 	.word	0x40001000

08001d74 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d7a:	463b      	mov	r3, r7
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]
 8001d80:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001d82:	4b15      	ldr	r3, [pc, #84]	; (8001dd8 <MX_TIM7_Init+0x64>)
 8001d84:	4a15      	ldr	r2, [pc, #84]	; (8001ddc <MX_TIM7_Init+0x68>)
 8001d86:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7;
 8001d88:	4b13      	ldr	r3, [pc, #76]	; (8001dd8 <MX_TIM7_Init+0x64>)
 8001d8a:	2207      	movs	r2, #7
 8001d8c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d8e:	4b12      	ldr	r3, [pc, #72]	; (8001dd8 <MX_TIM7_Init+0x64>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8001d94:	4b10      	ldr	r3, [pc, #64]	; (8001dd8 <MX_TIM7_Init+0x64>)
 8001d96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d9a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d9c:	4b0e      	ldr	r3, [pc, #56]	; (8001dd8 <MX_TIM7_Init+0x64>)
 8001d9e:	2280      	movs	r2, #128	; 0x80
 8001da0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001da2:	480d      	ldr	r0, [pc, #52]	; (8001dd8 <MX_TIM7_Init+0x64>)
 8001da4:	f003 ff5e 	bl	8005c64 <HAL_TIM_Base_Init>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001dae:	f000 fa3b 	bl	8002228 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001db2:	2300      	movs	r3, #0
 8001db4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001db6:	2300      	movs	r3, #0
 8001db8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001dba:	463b      	mov	r3, r7
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	4806      	ldr	r0, [pc, #24]	; (8001dd8 <MX_TIM7_Init+0x64>)
 8001dc0:	f005 ffe4 	bl	8007d8c <HAL_TIMEx_MasterConfigSynchronization>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001dca:	f000 fa2d 	bl	8002228 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001dce:	bf00      	nop
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	20000af8 	.word	0x20000af8
 8001ddc:	40001400 	.word	0x40001400

08001de0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b096      	sub	sp, #88	; 0x58
 8001de4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001de6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001dea:	2200      	movs	r2, #0
 8001dec:	601a      	str	r2, [r3, #0]
 8001dee:	605a      	str	r2, [r3, #4]
 8001df0:	609a      	str	r2, [r3, #8]
 8001df2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001df4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001df8:	2200      	movs	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]
 8001dfc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e02:	2200      	movs	r2, #0
 8001e04:	601a      	str	r2, [r3, #0]
 8001e06:	605a      	str	r2, [r3, #4]
 8001e08:	609a      	str	r2, [r3, #8]
 8001e0a:	60da      	str	r2, [r3, #12]
 8001e0c:	611a      	str	r2, [r3, #16]
 8001e0e:	615a      	str	r2, [r3, #20]
 8001e10:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e12:	1d3b      	adds	r3, r7, #4
 8001e14:	2220      	movs	r2, #32
 8001e16:	2100      	movs	r1, #0
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f009 fbe3 	bl	800b5e4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001e1e:	4b50      	ldr	r3, [pc, #320]	; (8001f60 <MX_TIM8_Init+0x180>)
 8001e20:	4a50      	ldr	r2, [pc, #320]	; (8001f64 <MX_TIM8_Init+0x184>)
 8001e22:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 7;
 8001e24:	4b4e      	ldr	r3, [pc, #312]	; (8001f60 <MX_TIM8_Init+0x180>)
 8001e26:	2207      	movs	r2, #7
 8001e28:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e2a:	4b4d      	ldr	r3, [pc, #308]	; (8001f60 <MX_TIM8_Init+0x180>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 100;
 8001e30:	4b4b      	ldr	r3, [pc, #300]	; (8001f60 <MX_TIM8_Init+0x180>)
 8001e32:	2264      	movs	r2, #100	; 0x64
 8001e34:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e36:	4b4a      	ldr	r3, [pc, #296]	; (8001f60 <MX_TIM8_Init+0x180>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001e3c:	4b48      	ldr	r3, [pc, #288]	; (8001f60 <MX_TIM8_Init+0x180>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e42:	4b47      	ldr	r3, [pc, #284]	; (8001f60 <MX_TIM8_Init+0x180>)
 8001e44:	2280      	movs	r2, #128	; 0x80
 8001e46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001e48:	4845      	ldr	r0, [pc, #276]	; (8001f60 <MX_TIM8_Init+0x180>)
 8001e4a:	f003 ff0b 	bl	8005c64 <HAL_TIM_Base_Init>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8001e54:	f000 f9e8 	bl	8002228 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e5c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001e5e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e62:	4619      	mov	r1, r3
 8001e64:	483e      	ldr	r0, [pc, #248]	; (8001f60 <MX_TIM8_Init+0x180>)
 8001e66:	f005 f835 	bl	8006ed4 <HAL_TIM_ConfigClockSource>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d001      	beq.n	8001e74 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8001e70:	f000 f9da 	bl	8002228 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001e74:	483a      	ldr	r0, [pc, #232]	; (8001f60 <MX_TIM8_Init+0x180>)
 8001e76:	f004 f8e3 	bl	8006040 <HAL_TIM_PWM_Init>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d001      	beq.n	8001e84 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001e80:	f000 f9d2 	bl	8002228 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e84:	2300      	movs	r3, #0
 8001e86:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001e8c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e90:	4619      	mov	r1, r3
 8001e92:	4833      	ldr	r0, [pc, #204]	; (8001f60 <MX_TIM8_Init+0x180>)
 8001e94:	f005 ff7a 	bl	8007d8c <HAL_TIMEx_MasterConfigSynchronization>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 8001e9e:	f000 f9c3 	bl	8002228 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ea2:	2360      	movs	r3, #96	; 0x60
 8001ea4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ebe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	4826      	ldr	r0, [pc, #152]	; (8001f60 <MX_TIM8_Init+0x180>)
 8001ec8:	f004 fe66 	bl	8006b98 <HAL_TIM_PWM_ConfigChannel>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 8001ed2:	f000 f9a9 	bl	8002228 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ed6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eda:	2204      	movs	r2, #4
 8001edc:	4619      	mov	r1, r3
 8001ede:	4820      	ldr	r0, [pc, #128]	; (8001f60 <MX_TIM8_Init+0x180>)
 8001ee0:	f004 fe5a 	bl	8006b98 <HAL_TIM_PWM_ConfigChannel>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <MX_TIM8_Init+0x10e>
  {
    Error_Handler();
 8001eea:	f000 f99d 	bl	8002228 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001eee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ef2:	2208      	movs	r2, #8
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	481a      	ldr	r0, [pc, #104]	; (8001f60 <MX_TIM8_Init+0x180>)
 8001ef8:	f004 fe4e 	bl	8006b98 <HAL_TIM_PWM_ConfigChannel>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <MX_TIM8_Init+0x126>
  {
    Error_Handler();
 8001f02:	f000 f991 	bl	8002228 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001f06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f0a:	220c      	movs	r2, #12
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	4814      	ldr	r0, [pc, #80]	; (8001f60 <MX_TIM8_Init+0x180>)
 8001f10:	f004 fe42 	bl	8006b98 <HAL_TIM_PWM_ConfigChannel>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <MX_TIM8_Init+0x13e>
  {
    Error_Handler();
 8001f1a:	f000 f985 	bl	8002228 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f22:	2300      	movs	r3, #0
 8001f24:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f26:	2300      	movs	r3, #0
 8001f28:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f32:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f36:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001f3c:	1d3b      	adds	r3, r7, #4
 8001f3e:	4619      	mov	r1, r3
 8001f40:	4807      	ldr	r0, [pc, #28]	; (8001f60 <MX_TIM8_Init+0x180>)
 8001f42:	f005 fff3 	bl	8007f2c <HAL_TIMEx_ConfigBreakDeadTime>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <MX_TIM8_Init+0x170>
  {
    Error_Handler();
 8001f4c:	f000 f96c 	bl	8002228 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001f50:	4803      	ldr	r0, [pc, #12]	; (8001f60 <MX_TIM8_Init+0x180>)
 8001f52:	f000 fb8b 	bl	800266c <HAL_TIM_MspPostInit>

}
 8001f56:	bf00      	nop
 8001f58:	3758      	adds	r7, #88	; 0x58
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	200004dc 	.word	0x200004dc
 8001f64:	40013400 	.word	0x40013400

08001f68 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001f6c:	4b11      	ldr	r3, [pc, #68]	; (8001fb4 <MX_UART4_Init+0x4c>)
 8001f6e:	4a12      	ldr	r2, [pc, #72]	; (8001fb8 <MX_UART4_Init+0x50>)
 8001f70:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001f72:	4b10      	ldr	r3, [pc, #64]	; (8001fb4 <MX_UART4_Init+0x4c>)
 8001f74:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001f78:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001f7a:	4b0e      	ldr	r3, [pc, #56]	; (8001fb4 <MX_UART4_Init+0x4c>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001f80:	4b0c      	ldr	r3, [pc, #48]	; (8001fb4 <MX_UART4_Init+0x4c>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001f86:	4b0b      	ldr	r3, [pc, #44]	; (8001fb4 <MX_UART4_Init+0x4c>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001f8c:	4b09      	ldr	r3, [pc, #36]	; (8001fb4 <MX_UART4_Init+0x4c>)
 8001f8e:	220c      	movs	r2, #12
 8001f90:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f92:	4b08      	ldr	r3, [pc, #32]	; (8001fb4 <MX_UART4_Init+0x4c>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f98:	4b06      	ldr	r3, [pc, #24]	; (8001fb4 <MX_UART4_Init+0x4c>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001f9e:	4805      	ldr	r0, [pc, #20]	; (8001fb4 <MX_UART4_Init+0x4c>)
 8001fa0:	f006 f8ac 	bl	80080fc <HAL_UART_Init>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001faa:	f000 f93d 	bl	8002228 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001fae:	bf00      	nop
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	200009d0 	.word	0x200009d0
 8001fb8:	40004c00 	.word	0x40004c00

08001fbc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001fc0:	4b11      	ldr	r3, [pc, #68]	; (8002008 <MX_USART1_UART_Init+0x4c>)
 8001fc2:	4a12      	ldr	r2, [pc, #72]	; (800200c <MX_USART1_UART_Init+0x50>)
 8001fc4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001fc6:	4b10      	ldr	r3, [pc, #64]	; (8002008 <MX_USART1_UART_Init+0x4c>)
 8001fc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fcc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001fce:	4b0e      	ldr	r3, [pc, #56]	; (8002008 <MX_USART1_UART_Init+0x4c>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001fd4:	4b0c      	ldr	r3, [pc, #48]	; (8002008 <MX_USART1_UART_Init+0x4c>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001fda:	4b0b      	ldr	r3, [pc, #44]	; (8002008 <MX_USART1_UART_Init+0x4c>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001fe0:	4b09      	ldr	r3, [pc, #36]	; (8002008 <MX_USART1_UART_Init+0x4c>)
 8001fe2:	220c      	movs	r2, #12
 8001fe4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fe6:	4b08      	ldr	r3, [pc, #32]	; (8002008 <MX_USART1_UART_Init+0x4c>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fec:	4b06      	ldr	r3, [pc, #24]	; (8002008 <MX_USART1_UART_Init+0x4c>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ff2:	4805      	ldr	r0, [pc, #20]	; (8002008 <MX_USART1_UART_Init+0x4c>)
 8001ff4:	f006 f882 	bl	80080fc <HAL_UART_Init>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001ffe:	f000 f913 	bl	8002228 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002002:	bf00      	nop
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	200007dc 	.word	0x200007dc
 800200c:	40013800 	.word	0x40013800

08002010 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b088      	sub	sp, #32
 8002014:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002016:	f107 0310 	add.w	r3, r7, #16
 800201a:	2200      	movs	r2, #0
 800201c:	601a      	str	r2, [r3, #0]
 800201e:	605a      	str	r2, [r3, #4]
 8002020:	609a      	str	r2, [r3, #8]
 8002022:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002024:	4b4e      	ldr	r3, [pc, #312]	; (8002160 <MX_GPIO_Init+0x150>)
 8002026:	699b      	ldr	r3, [r3, #24]
 8002028:	4a4d      	ldr	r2, [pc, #308]	; (8002160 <MX_GPIO_Init+0x150>)
 800202a:	f043 0310 	orr.w	r3, r3, #16
 800202e:	6193      	str	r3, [r2, #24]
 8002030:	4b4b      	ldr	r3, [pc, #300]	; (8002160 <MX_GPIO_Init+0x150>)
 8002032:	699b      	ldr	r3, [r3, #24]
 8002034:	f003 0310 	and.w	r3, r3, #16
 8002038:	60fb      	str	r3, [r7, #12]
 800203a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800203c:	4b48      	ldr	r3, [pc, #288]	; (8002160 <MX_GPIO_Init+0x150>)
 800203e:	699b      	ldr	r3, [r3, #24]
 8002040:	4a47      	ldr	r2, [pc, #284]	; (8002160 <MX_GPIO_Init+0x150>)
 8002042:	f043 0304 	orr.w	r3, r3, #4
 8002046:	6193      	str	r3, [r2, #24]
 8002048:	4b45      	ldr	r3, [pc, #276]	; (8002160 <MX_GPIO_Init+0x150>)
 800204a:	699b      	ldr	r3, [r3, #24]
 800204c:	f003 0304 	and.w	r3, r3, #4
 8002050:	60bb      	str	r3, [r7, #8]
 8002052:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002054:	4b42      	ldr	r3, [pc, #264]	; (8002160 <MX_GPIO_Init+0x150>)
 8002056:	699b      	ldr	r3, [r3, #24]
 8002058:	4a41      	ldr	r2, [pc, #260]	; (8002160 <MX_GPIO_Init+0x150>)
 800205a:	f043 0308 	orr.w	r3, r3, #8
 800205e:	6193      	str	r3, [r2, #24]
 8002060:	4b3f      	ldr	r3, [pc, #252]	; (8002160 <MX_GPIO_Init+0x150>)
 8002062:	699b      	ldr	r3, [r3, #24]
 8002064:	f003 0308 	and.w	r3, r3, #8
 8002068:	607b      	str	r3, [r7, #4]
 800206a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800206c:	4b3c      	ldr	r3, [pc, #240]	; (8002160 <MX_GPIO_Init+0x150>)
 800206e:	699b      	ldr	r3, [r3, #24]
 8002070:	4a3b      	ldr	r2, [pc, #236]	; (8002160 <MX_GPIO_Init+0x150>)
 8002072:	f043 0320 	orr.w	r3, r3, #32
 8002076:	6193      	str	r3, [r2, #24]
 8002078:	4b39      	ldr	r3, [pc, #228]	; (8002160 <MX_GPIO_Init+0x150>)
 800207a:	699b      	ldr	r3, [r3, #24]
 800207c:	f003 0320 	and.w	r3, r3, #32
 8002080:	603b      	str	r3, [r7, #0]
 8002082:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BLUE_LED_Pin|BLUETOOTH_SPI_CMD_Pin|BLUETOOTH_SPI_CS_Pin|MOTOR_REAR_LEFT_OUT_1_Pin
 8002084:	2200      	movs	r2, #0
 8002086:	f243 013a 	movw	r1, #12346	; 0x303a
 800208a:	4836      	ldr	r0, [pc, #216]	; (8002164 <MX_GPIO_Init+0x154>)
 800208c:	f001 ff00 	bl	8003e90 <HAL_GPIO_WritePin>
                          |MOTOR_REAR_LEFT_OUT_2_Pin|MOTOR_FRONT_RIGHT_OUT_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLUETOOTH_SPI_CLK_GPIO_Port, BLUETOOTH_SPI_CLK_Pin, GPIO_PIN_RESET);
 8002090:	2200      	movs	r2, #0
 8002092:	2110      	movs	r1, #16
 8002094:	4834      	ldr	r0, [pc, #208]	; (8002168 <MX_GPIO_Init+0x158>)
 8002096:	f001 fefb 	bl	8003e90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR_REAR_RIGHT_OUT_1_Pin|MOTOR_REAR_RIGHT_OUT_2_Pin|MOTOR_FRONT_LEFT_OUT_2_Pin|MOTOR_FRONT_LEFT_OUT_1_Pin, GPIO_PIN_RESET);
 800209a:	2200      	movs	r2, #0
 800209c:	2133      	movs	r1, #51	; 0x33
 800209e:	4833      	ldr	r0, [pc, #204]	; (800216c <MX_GPIO_Init+0x15c>)
 80020a0:	f001 fef6 	bl	8003e90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_FRONT_RIGHT_OUT_1_GPIO_Port, MOTOR_FRONT_RIGHT_OUT_1_Pin, GPIO_PIN_RESET);
 80020a4:	2200      	movs	r2, #0
 80020a6:	2104      	movs	r1, #4
 80020a8:	4831      	ldr	r0, [pc, #196]	; (8002170 <MX_GPIO_Init+0x160>)
 80020aa:	f001 fef1 	bl	8003e90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_LED_Pin */
  GPIO_InitStruct.Pin = BLUE_LED_Pin;
 80020ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020b4:	2301      	movs	r3, #1
 80020b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b8:	2300      	movs	r3, #0
 80020ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020bc:	2302      	movs	r3, #2
 80020be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLUE_LED_GPIO_Port, &GPIO_InitStruct);
 80020c0:	f107 0310 	add.w	r3, r7, #16
 80020c4:	4619      	mov	r1, r3
 80020c6:	4827      	ldr	r0, [pc, #156]	; (8002164 <MX_GPIO_Init+0x154>)
 80020c8:	f001 fc28 	bl	800391c <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_RESET_Pin BLUETOOTH_SPI_DAT_Pin */
  GPIO_InitStruct.Pin = SW_RESET_Pin|BLUETOOTH_SPI_DAT_Pin;
 80020cc:	2305      	movs	r3, #5
 80020ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020d0:	2300      	movs	r3, #0
 80020d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d4:	2300      	movs	r3, #0
 80020d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020d8:	f107 0310 	add.w	r3, r7, #16
 80020dc:	4619      	mov	r1, r3
 80020de:	4821      	ldr	r0, [pc, #132]	; (8002164 <MX_GPIO_Init+0x154>)
 80020e0:	f001 fc1c 	bl	800391c <HAL_GPIO_Init>

  /*Configure GPIO pins : BLUETOOTH_SPI_CMD_Pin BLUETOOTH_SPI_CS_Pin MOTOR_REAR_LEFT_OUT_1_Pin MOTOR_REAR_LEFT_OUT_2_Pin
                           MOTOR_FRONT_RIGHT_OUT_2_Pin */
  GPIO_InitStruct.Pin = BLUETOOTH_SPI_CMD_Pin|BLUETOOTH_SPI_CS_Pin|MOTOR_REAR_LEFT_OUT_1_Pin|MOTOR_REAR_LEFT_OUT_2_Pin
 80020e4:	f241 033a 	movw	r3, #4154	; 0x103a
 80020e8:	613b      	str	r3, [r7, #16]
                          |MOTOR_FRONT_RIGHT_OUT_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020ea:	2301      	movs	r3, #1
 80020ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ee:	2300      	movs	r3, #0
 80020f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020f2:	2303      	movs	r3, #3
 80020f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020f6:	f107 0310 	add.w	r3, r7, #16
 80020fa:	4619      	mov	r1, r3
 80020fc:	4819      	ldr	r0, [pc, #100]	; (8002164 <MX_GPIO_Init+0x154>)
 80020fe:	f001 fc0d 	bl	800391c <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUETOOTH_SPI_CLK_Pin */
  GPIO_InitStruct.Pin = BLUETOOTH_SPI_CLK_Pin;
 8002102:	2310      	movs	r3, #16
 8002104:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002106:	2301      	movs	r3, #1
 8002108:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210a:	2300      	movs	r3, #0
 800210c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800210e:	2303      	movs	r3, #3
 8002110:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLUETOOTH_SPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8002112:	f107 0310 	add.w	r3, r7, #16
 8002116:	4619      	mov	r1, r3
 8002118:	4813      	ldr	r0, [pc, #76]	; (8002168 <MX_GPIO_Init+0x158>)
 800211a:	f001 fbff 	bl	800391c <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_REAR_RIGHT_OUT_1_Pin MOTOR_REAR_RIGHT_OUT_2_Pin MOTOR_FRONT_LEFT_OUT_2_Pin MOTOR_FRONT_LEFT_OUT_1_Pin */
  GPIO_InitStruct.Pin = MOTOR_REAR_RIGHT_OUT_1_Pin|MOTOR_REAR_RIGHT_OUT_2_Pin|MOTOR_FRONT_LEFT_OUT_2_Pin|MOTOR_FRONT_LEFT_OUT_1_Pin;
 800211e:	2333      	movs	r3, #51	; 0x33
 8002120:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002122:	2301      	movs	r3, #1
 8002124:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002126:	2300      	movs	r3, #0
 8002128:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800212a:	2303      	movs	r3, #3
 800212c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800212e:	f107 0310 	add.w	r3, r7, #16
 8002132:	4619      	mov	r1, r3
 8002134:	480d      	ldr	r0, [pc, #52]	; (800216c <MX_GPIO_Init+0x15c>)
 8002136:	f001 fbf1 	bl	800391c <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTOR_FRONT_RIGHT_OUT_1_Pin */
  GPIO_InitStruct.Pin = MOTOR_FRONT_RIGHT_OUT_1_Pin;
 800213a:	2304      	movs	r3, #4
 800213c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800213e:	2301      	movs	r3, #1
 8002140:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002142:	2300      	movs	r3, #0
 8002144:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002146:	2303      	movs	r3, #3
 8002148:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MOTOR_FRONT_RIGHT_OUT_1_GPIO_Port, &GPIO_InitStruct);
 800214a:	f107 0310 	add.w	r3, r7, #16
 800214e:	4619      	mov	r1, r3
 8002150:	4807      	ldr	r0, [pc, #28]	; (8002170 <MX_GPIO_Init+0x160>)
 8002152:	f001 fbe3 	bl	800391c <HAL_GPIO_Init>

}
 8002156:	bf00      	nop
 8002158:	3720      	adds	r7, #32
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	40021000 	.word	0x40021000
 8002164:	40011000 	.word	0x40011000
 8002168:	40010800 	.word	0x40010800
 800216c:	40010c00 	.word	0x40010c00
 8002170:	40011400 	.word	0x40011400

08002174 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  if ((htim == &htim2) || (htim == &htim3) || (htim == &htim4) || (htim == &htim5))
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	4a0b      	ldr	r2, [pc, #44]	; (80021ac <HAL_TIM_IC_CaptureCallback+0x38>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d00b      	beq.n	800219c <HAL_TIM_IC_CaptureCallback+0x28>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	4a0a      	ldr	r2, [pc, #40]	; (80021b0 <HAL_TIM_IC_CaptureCallback+0x3c>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d007      	beq.n	800219c <HAL_TIM_IC_CaptureCallback+0x28>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	4a09      	ldr	r2, [pc, #36]	; (80021b4 <HAL_TIM_IC_CaptureCallback+0x40>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d003      	beq.n	800219c <HAL_TIM_IC_CaptureCallback+0x28>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	4a08      	ldr	r2, [pc, #32]	; (80021b8 <HAL_TIM_IC_CaptureCallback+0x44>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d103      	bne.n	80021a4 <HAL_TIM_IC_CaptureCallback+0x30>
  {
    DRV_updateEncoder(htim);
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f007 fa17 	bl	80095d0 <DRV_updateEncoder>
  else
  {
    ; /* Nothing to do */
  }

  return;
 80021a2:	bf00      	nop
 80021a4:	bf00      	nop
}
 80021a6:	3708      	adds	r7, #8
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	20000a44 	.word	0x20000a44
 80021b0:	200006f8 	.word	0x200006f8
 80021b4:	20000590 	.word	0x20000590
 80021b8:	20000644 	.word	0x20000644

080021bc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  /* Check the handle of the timer triggering this callback and update LED */
  if (htim == &htim1)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	4a05      	ldr	r2, [pc, #20]	; (80021dc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d102      	bne.n	80021d2 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    LED_update();
 80021cc:	f008 fb1e 	bl	800a80c <LED_update>
  else
  {
    ; /* Nothing to do */
  }

  return;
 80021d0:	bf00      	nop
 80021d2:	bf00      	nop
}
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	20000918 	.word	0x20000918

080021e0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  /* Nothing to do */
  return;
 80021e8:	bf00      	nop
}
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bc80      	pop	{r7}
 80021f0:	4770      	bx	lr
	...

080021f4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  /* Check the handle of the UART triggering this callback and actually receive date */
  if (huart == &huart1)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	4a08      	ldr	r2, [pc, #32]	; (8002220 <HAL_UART_RxCpltCallback+0x2c>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d102      	bne.n	800220a <HAL_UART_RxCpltCallback+0x16>
  {
    CON_receiveData();
 8002204:	f007 f888 	bl	8009318 <CON_receiveData>
  else
  {
    ; /* Nothing to do */
  }

  return;
 8002208:	e006      	b.n	8002218 <HAL_UART_RxCpltCallback+0x24>
  else if (huart == &huart4)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a05      	ldr	r2, [pc, #20]	; (8002224 <HAL_UART_RxCpltCallback+0x30>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d102      	bne.n	8002218 <HAL_UART_RxCpltCallback+0x24>
    MAS_receiveData();
 8002212:	f008 fc91 	bl	800ab38 <MAS_receiveData>
  return;
 8002216:	bf00      	nop
 8002218:	bf00      	nop
}
 800221a:	3708      	adds	r7, #8
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	200007dc 	.word	0x200007dc
 8002224:	200009d0 	.word	0x200009d0

08002228 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800222c:	b672      	cpsid	i
}
 800222e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();

  LOG_error("Error_Handler() triggered");
 8002230:	4902      	ldr	r1, [pc, #8]	; (800223c <Error_Handler+0x14>)
 8002232:	2003      	movs	r0, #3
 8002234:	f008 fbc2 	bl	800a9bc <LOG_log>

  while (1)
 8002238:	e7fe      	b.n	8002238 <Error_Handler+0x10>
 800223a:	bf00      	nop
 800223c:	0800eab4 	.word	0x0800eab4

08002240 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
     LOG_error("Wrong parameters: %s@%d", file, line);
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	4904      	ldr	r1, [pc, #16]	; (8002260 <assert_failed+0x20>)
 8002250:	2003      	movs	r0, #3
 8002252:	f008 fbb3 	bl	800a9bc <LOG_log>

    return;
 8002256:	bf00      	nop
  /* USER CODE END 6 */
}
 8002258:	3708      	adds	r7, #8
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	0800ead0 	.word	0x0800ead0

08002264 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002264:	b480      	push	{r7}
 8002266:	b085      	sub	sp, #20
 8002268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800226a:	4b15      	ldr	r3, [pc, #84]	; (80022c0 <HAL_MspInit+0x5c>)
 800226c:	699b      	ldr	r3, [r3, #24]
 800226e:	4a14      	ldr	r2, [pc, #80]	; (80022c0 <HAL_MspInit+0x5c>)
 8002270:	f043 0301 	orr.w	r3, r3, #1
 8002274:	6193      	str	r3, [r2, #24]
 8002276:	4b12      	ldr	r3, [pc, #72]	; (80022c0 <HAL_MspInit+0x5c>)
 8002278:	699b      	ldr	r3, [r3, #24]
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	60bb      	str	r3, [r7, #8]
 8002280:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002282:	4b0f      	ldr	r3, [pc, #60]	; (80022c0 <HAL_MspInit+0x5c>)
 8002284:	69db      	ldr	r3, [r3, #28]
 8002286:	4a0e      	ldr	r2, [pc, #56]	; (80022c0 <HAL_MspInit+0x5c>)
 8002288:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800228c:	61d3      	str	r3, [r2, #28]
 800228e:	4b0c      	ldr	r3, [pc, #48]	; (80022c0 <HAL_MspInit+0x5c>)
 8002290:	69db      	ldr	r3, [r3, #28]
 8002292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002296:	607b      	str	r3, [r7, #4]
 8002298:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800229a:	4b0a      	ldr	r3, [pc, #40]	; (80022c4 <HAL_MspInit+0x60>)
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	60fb      	str	r3, [r7, #12]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80022a6:	60fb      	str	r3, [r7, #12]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80022ae:	60fb      	str	r3, [r7, #12]
 80022b0:	4a04      	ldr	r2, [pc, #16]	; (80022c4 <HAL_MspInit+0x60>)
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022b6:	bf00      	nop
 80022b8:	3714      	adds	r7, #20
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bc80      	pop	{r7}
 80022be:	4770      	bx	lr
 80022c0:	40021000 	.word	0x40021000
 80022c4:	40010000 	.word	0x40010000

080022c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b088      	sub	sp, #32
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d0:	f107 0310 	add.w	r3, r7, #16
 80022d4:	2200      	movs	r2, #0
 80022d6:	601a      	str	r2, [r3, #0]
 80022d8:	605a      	str	r2, [r3, #4]
 80022da:	609a      	str	r2, [r3, #8]
 80022dc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a14      	ldr	r2, [pc, #80]	; (8002334 <HAL_ADC_MspInit+0x6c>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d121      	bne.n	800232c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80022e8:	4b13      	ldr	r3, [pc, #76]	; (8002338 <HAL_ADC_MspInit+0x70>)
 80022ea:	699b      	ldr	r3, [r3, #24]
 80022ec:	4a12      	ldr	r2, [pc, #72]	; (8002338 <HAL_ADC_MspInit+0x70>)
 80022ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022f2:	6193      	str	r3, [r2, #24]
 80022f4:	4b10      	ldr	r3, [pc, #64]	; (8002338 <HAL_ADC_MspInit+0x70>)
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022fc:	60fb      	str	r3, [r7, #12]
 80022fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002300:	4b0d      	ldr	r3, [pc, #52]	; (8002338 <HAL_ADC_MspInit+0x70>)
 8002302:	699b      	ldr	r3, [r3, #24]
 8002304:	4a0c      	ldr	r2, [pc, #48]	; (8002338 <HAL_ADC_MspInit+0x70>)
 8002306:	f043 0304 	orr.w	r3, r3, #4
 800230a:	6193      	str	r3, [r2, #24]
 800230c:	4b0a      	ldr	r3, [pc, #40]	; (8002338 <HAL_ADC_MspInit+0x70>)
 800230e:	699b      	ldr	r3, [r3, #24]
 8002310:	f003 0304 	and.w	r3, r3, #4
 8002314:	60bb      	str	r3, [r7, #8]
 8002316:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = BATTERY_ADC_Pin;
 8002318:	2320      	movs	r3, #32
 800231a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800231c:	2303      	movs	r3, #3
 800231e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(BATTERY_ADC_GPIO_Port, &GPIO_InitStruct);
 8002320:	f107 0310 	add.w	r3, r7, #16
 8002324:	4619      	mov	r1, r3
 8002326:	4805      	ldr	r0, [pc, #20]	; (800233c <HAL_ADC_MspInit+0x74>)
 8002328:	f001 faf8 	bl	800391c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800232c:	bf00      	nop
 800232e:	3720      	adds	r7, #32
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	40012400 	.word	0x40012400
 8002338:	40021000 	.word	0x40021000
 800233c:	40010800 	.word	0x40010800

08002340 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a0b      	ldr	r2, [pc, #44]	; (800237c <HAL_RTC_MspInit+0x3c>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d110      	bne.n	8002374 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8002352:	f001 fdf7 	bl	8003f44 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8002356:	4b0a      	ldr	r3, [pc, #40]	; (8002380 <HAL_RTC_MspInit+0x40>)
 8002358:	69db      	ldr	r3, [r3, #28]
 800235a:	4a09      	ldr	r2, [pc, #36]	; (8002380 <HAL_RTC_MspInit+0x40>)
 800235c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002360:	61d3      	str	r3, [r2, #28]
 8002362:	4b07      	ldr	r3, [pc, #28]	; (8002380 <HAL_RTC_MspInit+0x40>)
 8002364:	69db      	ldr	r3, [r3, #28]
 8002366:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800236a:	60fb      	str	r3, [r7, #12]
 800236c:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800236e:	4b05      	ldr	r3, [pc, #20]	; (8002384 <HAL_RTC_MspInit+0x44>)
 8002370:	2201      	movs	r2, #1
 8002372:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002374:	bf00      	nop
 8002376:	3710      	adds	r7, #16
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	40002800 	.word	0x40002800
 8002380:	40021000 	.word	0x40021000
 8002384:	4242043c 	.word	0x4242043c

08002388 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b086      	sub	sp, #24
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a28      	ldr	r2, [pc, #160]	; (8002438 <HAL_TIM_Base_MspInit+0xb0>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d114      	bne.n	80023c4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800239a:	4b28      	ldr	r3, [pc, #160]	; (800243c <HAL_TIM_Base_MspInit+0xb4>)
 800239c:	699b      	ldr	r3, [r3, #24]
 800239e:	4a27      	ldr	r2, [pc, #156]	; (800243c <HAL_TIM_Base_MspInit+0xb4>)
 80023a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80023a4:	6193      	str	r3, [r2, #24]
 80023a6:	4b25      	ldr	r3, [pc, #148]	; (800243c <HAL_TIM_Base_MspInit+0xb4>)
 80023a8:	699b      	ldr	r3, [r3, #24]
 80023aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023ae:	617b      	str	r3, [r7, #20]
 80023b0:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 6, 0);
 80023b2:	2200      	movs	r2, #0
 80023b4:	2106      	movs	r1, #6
 80023b6:	2019      	movs	r0, #25
 80023b8:	f001 f91a 	bl	80035f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80023bc:	2019      	movs	r0, #25
 80023be:	f001 f943 	bl	8003648 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80023c2:	e034      	b.n	800242e <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM6)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a1d      	ldr	r2, [pc, #116]	; (8002440 <HAL_TIM_Base_MspInit+0xb8>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d10c      	bne.n	80023e8 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80023ce:	4b1b      	ldr	r3, [pc, #108]	; (800243c <HAL_TIM_Base_MspInit+0xb4>)
 80023d0:	69db      	ldr	r3, [r3, #28]
 80023d2:	4a1a      	ldr	r2, [pc, #104]	; (800243c <HAL_TIM_Base_MspInit+0xb4>)
 80023d4:	f043 0310 	orr.w	r3, r3, #16
 80023d8:	61d3      	str	r3, [r2, #28]
 80023da:	4b18      	ldr	r3, [pc, #96]	; (800243c <HAL_TIM_Base_MspInit+0xb4>)
 80023dc:	69db      	ldr	r3, [r3, #28]
 80023de:	f003 0310 	and.w	r3, r3, #16
 80023e2:	613b      	str	r3, [r7, #16]
 80023e4:	693b      	ldr	r3, [r7, #16]
}
 80023e6:	e022      	b.n	800242e <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM7)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a15      	ldr	r2, [pc, #84]	; (8002444 <HAL_TIM_Base_MspInit+0xbc>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d10c      	bne.n	800240c <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80023f2:	4b12      	ldr	r3, [pc, #72]	; (800243c <HAL_TIM_Base_MspInit+0xb4>)
 80023f4:	69db      	ldr	r3, [r3, #28]
 80023f6:	4a11      	ldr	r2, [pc, #68]	; (800243c <HAL_TIM_Base_MspInit+0xb4>)
 80023f8:	f043 0320 	orr.w	r3, r3, #32
 80023fc:	61d3      	str	r3, [r2, #28]
 80023fe:	4b0f      	ldr	r3, [pc, #60]	; (800243c <HAL_TIM_Base_MspInit+0xb4>)
 8002400:	69db      	ldr	r3, [r3, #28]
 8002402:	f003 0320 	and.w	r3, r3, #32
 8002406:	60fb      	str	r3, [r7, #12]
 8002408:	68fb      	ldr	r3, [r7, #12]
}
 800240a:	e010      	b.n	800242e <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM8)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a0d      	ldr	r2, [pc, #52]	; (8002448 <HAL_TIM_Base_MspInit+0xc0>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d10b      	bne.n	800242e <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002416:	4b09      	ldr	r3, [pc, #36]	; (800243c <HAL_TIM_Base_MspInit+0xb4>)
 8002418:	699b      	ldr	r3, [r3, #24]
 800241a:	4a08      	ldr	r2, [pc, #32]	; (800243c <HAL_TIM_Base_MspInit+0xb4>)
 800241c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002420:	6193      	str	r3, [r2, #24]
 8002422:	4b06      	ldr	r3, [pc, #24]	; (800243c <HAL_TIM_Base_MspInit+0xb4>)
 8002424:	699b      	ldr	r3, [r3, #24]
 8002426:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800242a:	60bb      	str	r3, [r7, #8]
 800242c:	68bb      	ldr	r3, [r7, #8]
}
 800242e:	bf00      	nop
 8002430:	3718      	adds	r7, #24
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	40012c00 	.word	0x40012c00
 800243c:	40021000 	.word	0x40021000
 8002440:	40001000 	.word	0x40001000
 8002444:	40001400 	.word	0x40001400
 8002448:	40013400 	.word	0x40013400

0800244c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b090      	sub	sp, #64	; 0x40
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002454:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002458:	2200      	movs	r2, #0
 800245a:	601a      	str	r2, [r3, #0]
 800245c:	605a      	str	r2, [r3, #4]
 800245e:	609a      	str	r2, [r3, #8]
 8002460:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800246a:	d157      	bne.n	800251c <HAL_TIM_Encoder_MspInit+0xd0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800246c:	4b78      	ldr	r3, [pc, #480]	; (8002650 <HAL_TIM_Encoder_MspInit+0x204>)
 800246e:	69db      	ldr	r3, [r3, #28]
 8002470:	4a77      	ldr	r2, [pc, #476]	; (8002650 <HAL_TIM_Encoder_MspInit+0x204>)
 8002472:	f043 0301 	orr.w	r3, r3, #1
 8002476:	61d3      	str	r3, [r2, #28]
 8002478:	4b75      	ldr	r3, [pc, #468]	; (8002650 <HAL_TIM_Encoder_MspInit+0x204>)
 800247a:	69db      	ldr	r3, [r3, #28]
 800247c:	f003 0301 	and.w	r3, r3, #1
 8002480:	62bb      	str	r3, [r7, #40]	; 0x28
 8002482:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002484:	4b72      	ldr	r3, [pc, #456]	; (8002650 <HAL_TIM_Encoder_MspInit+0x204>)
 8002486:	699b      	ldr	r3, [r3, #24]
 8002488:	4a71      	ldr	r2, [pc, #452]	; (8002650 <HAL_TIM_Encoder_MspInit+0x204>)
 800248a:	f043 0304 	orr.w	r3, r3, #4
 800248e:	6193      	str	r3, [r2, #24]
 8002490:	4b6f      	ldr	r3, [pc, #444]	; (8002650 <HAL_TIM_Encoder_MspInit+0x204>)
 8002492:	699b      	ldr	r3, [r3, #24]
 8002494:	f003 0304 	and.w	r3, r3, #4
 8002498:	627b      	str	r3, [r7, #36]	; 0x24
 800249a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800249c:	4b6c      	ldr	r3, [pc, #432]	; (8002650 <HAL_TIM_Encoder_MspInit+0x204>)
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	4a6b      	ldr	r2, [pc, #428]	; (8002650 <HAL_TIM_Encoder_MspInit+0x204>)
 80024a2:	f043 0308 	orr.w	r3, r3, #8
 80024a6:	6193      	str	r3, [r2, #24]
 80024a8:	4b69      	ldr	r3, [pc, #420]	; (8002650 <HAL_TIM_Encoder_MspInit+0x204>)
 80024aa:	699b      	ldr	r3, [r3, #24]
 80024ac:	f003 0308 	and.w	r3, r3, #8
 80024b0:	623b      	str	r3, [r7, #32]
 80024b2:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_FRONT_RIGHT_IN_1_Pin;
 80024b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024ba:	2300      	movs	r3, #0
 80024bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024be:	2300      	movs	r3, #0
 80024c0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENCODER_FRONT_RIGHT_IN_1_GPIO_Port, &GPIO_InitStruct);
 80024c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024c6:	4619      	mov	r1, r3
 80024c8:	4862      	ldr	r0, [pc, #392]	; (8002654 <HAL_TIM_Encoder_MspInit+0x208>)
 80024ca:	f001 fa27 	bl	800391c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENCODER_FRONT_RIGHT_IN_2_Pin;
 80024ce:	2308      	movs	r3, #8
 80024d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024d2:	2300      	movs	r3, #0
 80024d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d6:	2300      	movs	r3, #0
 80024d8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENCODER_FRONT_RIGHT_IN_2_GPIO_Port, &GPIO_InitStruct);
 80024da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024de:	4619      	mov	r1, r3
 80024e0:	485d      	ldr	r0, [pc, #372]	; (8002658 <HAL_TIM_Encoder_MspInit+0x20c>)
 80024e2:	f001 fa1b 	bl	800391c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 80024e6:	4b5d      	ldr	r3, [pc, #372]	; (800265c <HAL_TIM_Encoder_MspInit+0x210>)
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024f6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80024fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002502:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002504:	4a55      	ldr	r2, [pc, #340]	; (800265c <HAL_TIM_Encoder_MspInit+0x210>)
 8002506:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002508:	6053      	str	r3, [r2, #4]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 4, 0);
 800250a:	2200      	movs	r2, #0
 800250c:	2104      	movs	r1, #4
 800250e:	201c      	movs	r0, #28
 8002510:	f001 f86e 	bl	80035f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002514:	201c      	movs	r0, #28
 8002516:	f001 f897 	bl	8003648 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800251a:	e094      	b.n	8002646 <HAL_TIM_Encoder_MspInit+0x1fa>
  else if(htim_encoder->Instance==TIM3)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a4f      	ldr	r2, [pc, #316]	; (8002660 <HAL_TIM_Encoder_MspInit+0x214>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d12c      	bne.n	8002580 <HAL_TIM_Encoder_MspInit+0x134>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002526:	4b4a      	ldr	r3, [pc, #296]	; (8002650 <HAL_TIM_Encoder_MspInit+0x204>)
 8002528:	69db      	ldr	r3, [r3, #28]
 800252a:	4a49      	ldr	r2, [pc, #292]	; (8002650 <HAL_TIM_Encoder_MspInit+0x204>)
 800252c:	f043 0302 	orr.w	r3, r3, #2
 8002530:	61d3      	str	r3, [r2, #28]
 8002532:	4b47      	ldr	r3, [pc, #284]	; (8002650 <HAL_TIM_Encoder_MspInit+0x204>)
 8002534:	69db      	ldr	r3, [r3, #28]
 8002536:	f003 0302 	and.w	r3, r3, #2
 800253a:	61fb      	str	r3, [r7, #28]
 800253c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800253e:	4b44      	ldr	r3, [pc, #272]	; (8002650 <HAL_TIM_Encoder_MspInit+0x204>)
 8002540:	699b      	ldr	r3, [r3, #24]
 8002542:	4a43      	ldr	r2, [pc, #268]	; (8002650 <HAL_TIM_Encoder_MspInit+0x204>)
 8002544:	f043 0304 	orr.w	r3, r3, #4
 8002548:	6193      	str	r3, [r2, #24]
 800254a:	4b41      	ldr	r3, [pc, #260]	; (8002650 <HAL_TIM_Encoder_MspInit+0x204>)
 800254c:	699b      	ldr	r3, [r3, #24]
 800254e:	f003 0304 	and.w	r3, r3, #4
 8002552:	61bb      	str	r3, [r7, #24]
 8002554:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ENCODER_FRONT_LEFT_IN_1_Pin|ENCODER_FRONT_LEFT_IN_2_Pin;
 8002556:	23c0      	movs	r3, #192	; 0xc0
 8002558:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800255a:	2300      	movs	r3, #0
 800255c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255e:	2300      	movs	r3, #0
 8002560:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002562:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002566:	4619      	mov	r1, r3
 8002568:	483a      	ldr	r0, [pc, #232]	; (8002654 <HAL_TIM_Encoder_MspInit+0x208>)
 800256a:	f001 f9d7 	bl	800391c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 4, 0);
 800256e:	2200      	movs	r2, #0
 8002570:	2104      	movs	r1, #4
 8002572:	201d      	movs	r0, #29
 8002574:	f001 f83c 	bl	80035f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002578:	201d      	movs	r0, #29
 800257a:	f001 f865 	bl	8003648 <HAL_NVIC_EnableIRQ>
}
 800257e:	e062      	b.n	8002646 <HAL_TIM_Encoder_MspInit+0x1fa>
  else if(htim_encoder->Instance==TIM4)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a37      	ldr	r2, [pc, #220]	; (8002664 <HAL_TIM_Encoder_MspInit+0x218>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d12c      	bne.n	80025e4 <HAL_TIM_Encoder_MspInit+0x198>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800258a:	4b31      	ldr	r3, [pc, #196]	; (8002650 <HAL_TIM_Encoder_MspInit+0x204>)
 800258c:	69db      	ldr	r3, [r3, #28]
 800258e:	4a30      	ldr	r2, [pc, #192]	; (8002650 <HAL_TIM_Encoder_MspInit+0x204>)
 8002590:	f043 0304 	orr.w	r3, r3, #4
 8002594:	61d3      	str	r3, [r2, #28]
 8002596:	4b2e      	ldr	r3, [pc, #184]	; (8002650 <HAL_TIM_Encoder_MspInit+0x204>)
 8002598:	69db      	ldr	r3, [r3, #28]
 800259a:	f003 0304 	and.w	r3, r3, #4
 800259e:	617b      	str	r3, [r7, #20]
 80025a0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025a2:	4b2b      	ldr	r3, [pc, #172]	; (8002650 <HAL_TIM_Encoder_MspInit+0x204>)
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	4a2a      	ldr	r2, [pc, #168]	; (8002650 <HAL_TIM_Encoder_MspInit+0x204>)
 80025a8:	f043 0308 	orr.w	r3, r3, #8
 80025ac:	6193      	str	r3, [r2, #24]
 80025ae:	4b28      	ldr	r3, [pc, #160]	; (8002650 <HAL_TIM_Encoder_MspInit+0x204>)
 80025b0:	699b      	ldr	r3, [r3, #24]
 80025b2:	f003 0308 	and.w	r3, r3, #8
 80025b6:	613b      	str	r3, [r7, #16]
 80025b8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ENCODER_REAR_LEFT_IN_1_Pin|ENCODER_REAR_LEFT_IN_2_Pin;
 80025ba:	23c0      	movs	r3, #192	; 0xc0
 80025bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025be:	2300      	movs	r3, #0
 80025c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c2:	2300      	movs	r3, #0
 80025c4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025ca:	4619      	mov	r1, r3
 80025cc:	4822      	ldr	r0, [pc, #136]	; (8002658 <HAL_TIM_Encoder_MspInit+0x20c>)
 80025ce:	f001 f9a5 	bl	800391c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 4, 0);
 80025d2:	2200      	movs	r2, #0
 80025d4:	2104      	movs	r1, #4
 80025d6:	201e      	movs	r0, #30
 80025d8:	f001 f80a 	bl	80035f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80025dc:	201e      	movs	r0, #30
 80025de:	f001 f833 	bl	8003648 <HAL_NVIC_EnableIRQ>
}
 80025e2:	e030      	b.n	8002646 <HAL_TIM_Encoder_MspInit+0x1fa>
  else if(htim_encoder->Instance==TIM5)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a1f      	ldr	r2, [pc, #124]	; (8002668 <HAL_TIM_Encoder_MspInit+0x21c>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d12b      	bne.n	8002646 <HAL_TIM_Encoder_MspInit+0x1fa>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80025ee:	4b18      	ldr	r3, [pc, #96]	; (8002650 <HAL_TIM_Encoder_MspInit+0x204>)
 80025f0:	69db      	ldr	r3, [r3, #28]
 80025f2:	4a17      	ldr	r2, [pc, #92]	; (8002650 <HAL_TIM_Encoder_MspInit+0x204>)
 80025f4:	f043 0308 	orr.w	r3, r3, #8
 80025f8:	61d3      	str	r3, [r2, #28]
 80025fa:	4b15      	ldr	r3, [pc, #84]	; (8002650 <HAL_TIM_Encoder_MspInit+0x204>)
 80025fc:	69db      	ldr	r3, [r3, #28]
 80025fe:	f003 0308 	and.w	r3, r3, #8
 8002602:	60fb      	str	r3, [r7, #12]
 8002604:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002606:	4b12      	ldr	r3, [pc, #72]	; (8002650 <HAL_TIM_Encoder_MspInit+0x204>)
 8002608:	699b      	ldr	r3, [r3, #24]
 800260a:	4a11      	ldr	r2, [pc, #68]	; (8002650 <HAL_TIM_Encoder_MspInit+0x204>)
 800260c:	f043 0304 	orr.w	r3, r3, #4
 8002610:	6193      	str	r3, [r2, #24]
 8002612:	4b0f      	ldr	r3, [pc, #60]	; (8002650 <HAL_TIM_Encoder_MspInit+0x204>)
 8002614:	699b      	ldr	r3, [r3, #24]
 8002616:	f003 0304 	and.w	r3, r3, #4
 800261a:	60bb      	str	r3, [r7, #8]
 800261c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENCODER_REAR_RIGHT_IN_1_Pin|ENCODER_REAR_RIGHT_IN_2_Pin;
 800261e:	2303      	movs	r3, #3
 8002620:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002622:	2300      	movs	r3, #0
 8002624:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002626:	2300      	movs	r3, #0
 8002628:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800262a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800262e:	4619      	mov	r1, r3
 8002630:	4808      	ldr	r0, [pc, #32]	; (8002654 <HAL_TIM_Encoder_MspInit+0x208>)
 8002632:	f001 f973 	bl	800391c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 4, 0);
 8002636:	2200      	movs	r2, #0
 8002638:	2104      	movs	r1, #4
 800263a:	2032      	movs	r0, #50	; 0x32
 800263c:	f000 ffd8 	bl	80035f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002640:	2032      	movs	r0, #50	; 0x32
 8002642:	f001 f801 	bl	8003648 <HAL_NVIC_EnableIRQ>
}
 8002646:	bf00      	nop
 8002648:	3740      	adds	r7, #64	; 0x40
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	40021000 	.word	0x40021000
 8002654:	40010800 	.word	0x40010800
 8002658:	40010c00 	.word	0x40010c00
 800265c:	40010000 	.word	0x40010000
 8002660:	40000400 	.word	0x40000400
 8002664:	40000800 	.word	0x40000800
 8002668:	40000c00 	.word	0x40000c00

0800266c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b088      	sub	sp, #32
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002674:	f107 0310 	add.w	r3, r7, #16
 8002678:	2200      	movs	r2, #0
 800267a:	601a      	str	r2, [r3, #0]
 800267c:	605a      	str	r2, [r3, #4]
 800267e:	609a      	str	r2, [r3, #8]
 8002680:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM8)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a10      	ldr	r2, [pc, #64]	; (80026c8 <HAL_TIM_MspPostInit+0x5c>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d118      	bne.n	80026be <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800268c:	4b0f      	ldr	r3, [pc, #60]	; (80026cc <HAL_TIM_MspPostInit+0x60>)
 800268e:	699b      	ldr	r3, [r3, #24]
 8002690:	4a0e      	ldr	r2, [pc, #56]	; (80026cc <HAL_TIM_MspPostInit+0x60>)
 8002692:	f043 0310 	orr.w	r3, r3, #16
 8002696:	6193      	str	r3, [r2, #24]
 8002698:	4b0c      	ldr	r3, [pc, #48]	; (80026cc <HAL_TIM_MspPostInit+0x60>)
 800269a:	699b      	ldr	r3, [r3, #24]
 800269c:	f003 0310 	and.w	r3, r3, #16
 80026a0:	60fb      	str	r3, [r7, #12]
 80026a2:	68fb      	ldr	r3, [r7, #12]
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    PC8     ------> TIM8_CH3
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = MOTOR_REAR_RIGHT_PWM_Pin|MOTOR_REAR_LEFT_PWM_Pin|MOTOR_FRONT_RIGHT_PWM_Pin|MOTOR_FRONT_LEFT_PWM_Pin;
 80026a4:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80026a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026aa:	2302      	movs	r3, #2
 80026ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026ae:	2303      	movs	r3, #3
 80026b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026b2:	f107 0310 	add.w	r3, r7, #16
 80026b6:	4619      	mov	r1, r3
 80026b8:	4805      	ldr	r0, [pc, #20]	; (80026d0 <HAL_TIM_MspPostInit+0x64>)
 80026ba:	f001 f92f 	bl	800391c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80026be:	bf00      	nop
 80026c0:	3720      	adds	r7, #32
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	40013400 	.word	0x40013400
 80026cc:	40021000 	.word	0x40021000
 80026d0:	40011000 	.word	0x40011000

080026d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b08a      	sub	sp, #40	; 0x28
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026dc:	f107 0318 	add.w	r3, r7, #24
 80026e0:	2200      	movs	r2, #0
 80026e2:	601a      	str	r2, [r3, #0]
 80026e4:	605a      	str	r2, [r3, #4]
 80026e6:	609a      	str	r2, [r3, #8]
 80026e8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==UART4)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a40      	ldr	r2, [pc, #256]	; (80027f0 <HAL_UART_MspInit+0x11c>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d13a      	bne.n	800276a <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80026f4:	4b3f      	ldr	r3, [pc, #252]	; (80027f4 <HAL_UART_MspInit+0x120>)
 80026f6:	69db      	ldr	r3, [r3, #28]
 80026f8:	4a3e      	ldr	r2, [pc, #248]	; (80027f4 <HAL_UART_MspInit+0x120>)
 80026fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80026fe:	61d3      	str	r3, [r2, #28]
 8002700:	4b3c      	ldr	r3, [pc, #240]	; (80027f4 <HAL_UART_MspInit+0x120>)
 8002702:	69db      	ldr	r3, [r3, #28]
 8002704:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002708:	617b      	str	r3, [r7, #20]
 800270a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800270c:	4b39      	ldr	r3, [pc, #228]	; (80027f4 <HAL_UART_MspInit+0x120>)
 800270e:	699b      	ldr	r3, [r3, #24]
 8002710:	4a38      	ldr	r2, [pc, #224]	; (80027f4 <HAL_UART_MspInit+0x120>)
 8002712:	f043 0310 	orr.w	r3, r3, #16
 8002716:	6193      	str	r3, [r2, #24]
 8002718:	4b36      	ldr	r3, [pc, #216]	; (80027f4 <HAL_UART_MspInit+0x120>)
 800271a:	699b      	ldr	r3, [r3, #24]
 800271c:	f003 0310 	and.w	r3, r3, #16
 8002720:	613b      	str	r3, [r7, #16]
 8002722:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = MASTER_USART_TX_Pin;
 8002724:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002728:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800272a:	2302      	movs	r3, #2
 800272c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800272e:	2303      	movs	r3, #3
 8002730:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MASTER_USART_TX_GPIO_Port, &GPIO_InitStruct);
 8002732:	f107 0318 	add.w	r3, r7, #24
 8002736:	4619      	mov	r1, r3
 8002738:	482f      	ldr	r0, [pc, #188]	; (80027f8 <HAL_UART_MspInit+0x124>)
 800273a:	f001 f8ef 	bl	800391c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MASTER_USART_RX_Pin;
 800273e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002742:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002744:	2300      	movs	r3, #0
 8002746:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002748:	2300      	movs	r3, #0
 800274a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(MASTER_USART_RX_GPIO_Port, &GPIO_InitStruct);
 800274c:	f107 0318 	add.w	r3, r7, #24
 8002750:	4619      	mov	r1, r3
 8002752:	4829      	ldr	r0, [pc, #164]	; (80027f8 <HAL_UART_MspInit+0x124>)
 8002754:	f001 f8e2 	bl	800391c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8002758:	2200      	movs	r2, #0
 800275a:	2105      	movs	r1, #5
 800275c:	2034      	movs	r0, #52	; 0x34
 800275e:	f000 ff47 	bl	80035f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002762:	2034      	movs	r0, #52	; 0x34
 8002764:	f000 ff70 	bl	8003648 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002768:	e03e      	b.n	80027e8 <HAL_UART_MspInit+0x114>
  else if(huart->Instance==USART1)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a23      	ldr	r2, [pc, #140]	; (80027fc <HAL_UART_MspInit+0x128>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d139      	bne.n	80027e8 <HAL_UART_MspInit+0x114>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002774:	4b1f      	ldr	r3, [pc, #124]	; (80027f4 <HAL_UART_MspInit+0x120>)
 8002776:	699b      	ldr	r3, [r3, #24]
 8002778:	4a1e      	ldr	r2, [pc, #120]	; (80027f4 <HAL_UART_MspInit+0x120>)
 800277a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800277e:	6193      	str	r3, [r2, #24]
 8002780:	4b1c      	ldr	r3, [pc, #112]	; (80027f4 <HAL_UART_MspInit+0x120>)
 8002782:	699b      	ldr	r3, [r3, #24]
 8002784:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002788:	60fb      	str	r3, [r7, #12]
 800278a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800278c:	4b19      	ldr	r3, [pc, #100]	; (80027f4 <HAL_UART_MspInit+0x120>)
 800278e:	699b      	ldr	r3, [r3, #24]
 8002790:	4a18      	ldr	r2, [pc, #96]	; (80027f4 <HAL_UART_MspInit+0x120>)
 8002792:	f043 0304 	orr.w	r3, r3, #4
 8002796:	6193      	str	r3, [r2, #24]
 8002798:	4b16      	ldr	r3, [pc, #88]	; (80027f4 <HAL_UART_MspInit+0x120>)
 800279a:	699b      	ldr	r3, [r3, #24]
 800279c:	f003 0304 	and.w	r3, r3, #4
 80027a0:	60bb      	str	r3, [r7, #8]
 80027a2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = CONSOLE_USART_TX_Pin;
 80027a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027aa:	2302      	movs	r3, #2
 80027ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027ae:	2303      	movs	r3, #3
 80027b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(CONSOLE_USART_TX_GPIO_Port, &GPIO_InitStruct);
 80027b2:	f107 0318 	add.w	r3, r7, #24
 80027b6:	4619      	mov	r1, r3
 80027b8:	4811      	ldr	r0, [pc, #68]	; (8002800 <HAL_UART_MspInit+0x12c>)
 80027ba:	f001 f8af 	bl	800391c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = CONSOLE_USART_RX_Pin;
 80027be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027c4:	2300      	movs	r3, #0
 80027c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c8:	2300      	movs	r3, #0
 80027ca:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(CONSOLE_USART_RX_GPIO_Port, &GPIO_InitStruct);
 80027cc:	f107 0318 	add.w	r3, r7, #24
 80027d0:	4619      	mov	r1, r3
 80027d2:	480b      	ldr	r0, [pc, #44]	; (8002800 <HAL_UART_MspInit+0x12c>)
 80027d4:	f001 f8a2 	bl	800391c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80027d8:	2200      	movs	r2, #0
 80027da:	2105      	movs	r1, #5
 80027dc:	2025      	movs	r0, #37	; 0x25
 80027de:	f000 ff07 	bl	80035f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80027e2:	2025      	movs	r0, #37	; 0x25
 80027e4:	f000 ff30 	bl	8003648 <HAL_NVIC_EnableIRQ>
}
 80027e8:	bf00      	nop
 80027ea:	3728      	adds	r7, #40	; 0x28
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	40004c00 	.word	0x40004c00
 80027f4:	40021000 	.word	0x40021000
 80027f8:	40011000 	.word	0x40011000
 80027fc:	40013800 	.word	0x40013800
 8002800:	40010800 	.word	0x40010800

08002804 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  LOG_error("NMI_Handler() triggered");
 8002808:	4902      	ldr	r1, [pc, #8]	; (8002814 <NMI_Handler+0x10>)
 800280a:	2003      	movs	r0, #3
 800280c:	f008 f8d6 	bl	800a9bc <LOG_log>
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002810:	e7fe      	b.n	8002810 <NMI_Handler+0xc>
 8002812:	bf00      	nop
 8002814:	0800eae8 	.word	0x0800eae8

08002818 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  LOG_error("HardFault_Handler() triggered");
 800281c:	4902      	ldr	r1, [pc, #8]	; (8002828 <HardFault_Handler+0x10>)
 800281e:	2003      	movs	r0, #3
 8002820:	f008 f8cc 	bl	800a9bc <LOG_log>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002824:	e7fe      	b.n	8002824 <HardFault_Handler+0xc>
 8002826:	bf00      	nop
 8002828:	0800eb00 	.word	0x0800eb00

0800282c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
  LOG_error("MemManage_Handler() triggered");
 8002830:	4902      	ldr	r1, [pc, #8]	; (800283c <MemManage_Handler+0x10>)
 8002832:	2003      	movs	r0, #3
 8002834:	f008 f8c2 	bl	800a9bc <LOG_log>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002838:	e7fe      	b.n	8002838 <MemManage_Handler+0xc>
 800283a:	bf00      	nop
 800283c:	0800eb20 	.word	0x0800eb20

08002840 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
  LOG_error("BusFault_Handler() triggered");
 8002844:	4902      	ldr	r1, [pc, #8]	; (8002850 <BusFault_Handler+0x10>)
 8002846:	2003      	movs	r0, #3
 8002848:	f008 f8b8 	bl	800a9bc <LOG_log>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800284c:	e7fe      	b.n	800284c <BusFault_Handler+0xc>
 800284e:	bf00      	nop
 8002850:	0800eb40 	.word	0x0800eb40

08002854 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
  LOG_error("UsageFault_Handler() triggered");
 8002858:	4902      	ldr	r1, [pc, #8]	; (8002864 <UsageFault_Handler+0x10>)
 800285a:	2003      	movs	r0, #3
 800285c:	f008 f8ae 	bl	800a9bc <LOG_log>
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002860:	e7fe      	b.n	8002860 <UsageFault_Handler+0xc>
 8002862:	bf00      	nop
 8002864:	0800eb60 	.word	0x0800eb60

08002868 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SVCall_IRQn 0 */
  LOG_error("SVC_Handler() triggered");
 800286c:	4902      	ldr	r1, [pc, #8]	; (8002878 <SVC_Handler+0x10>)
 800286e:	2003      	movs	r0, #3
 8002870:	f008 f8a4 	bl	800a9bc <LOG_log>
  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002874:	bf00      	nop
 8002876:	bd80      	pop	{r7, pc}
 8002878:	0800eb80 	.word	0x0800eb80

0800287c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */
  LOG_error("DebugMon_Handler() triggered");
 8002880:	4902      	ldr	r1, [pc, #8]	; (800288c <DebugMon_Handler+0x10>)
 8002882:	2003      	movs	r0, #3
 8002884:	f008 f89a 	bl	800a9bc <LOG_log>
  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002888:	bf00      	nop
 800288a:	bd80      	pop	{r7, pc}
 800288c:	0800eb98 	.word	0x0800eb98

08002890 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PendSV_IRQn 0 */
  LOG_error("PendSV_Handler() triggered");
 8002894:	4902      	ldr	r1, [pc, #8]	; (80028a0 <PendSV_Handler+0x10>)
 8002896:	2003      	movs	r0, #3
 8002898:	f008 f890 	bl	800a9bc <LOG_log>
  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800289c:	bf00      	nop
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	0800ebb8 	.word	0x0800ebb8

080028a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028a8:	f000 f988 	bl	8002bbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028ac:	bf00      	nop
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80028b4:	4802      	ldr	r0, [pc, #8]	; (80028c0 <TIM1_UP_IRQHandler+0x10>)
 80028b6:	f004 f847 	bl	8006948 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80028ba:	bf00      	nop
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	20000918 	.word	0x20000918

080028c4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80028c8:	4802      	ldr	r0, [pc, #8]	; (80028d4 <TIM2_IRQHandler+0x10>)
 80028ca:	f004 f83d 	bl	8006948 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80028ce:	bf00      	nop
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	20000a44 	.word	0x20000a44

080028d8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80028dc:	4802      	ldr	r0, [pc, #8]	; (80028e8 <TIM3_IRQHandler+0x10>)
 80028de:	f004 f833 	bl	8006948 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80028e2:	bf00      	nop
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	200006f8 	.word	0x200006f8

080028ec <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80028f0:	4802      	ldr	r0, [pc, #8]	; (80028fc <TIM4_IRQHandler+0x10>)
 80028f2:	f004 f829 	bl	8006948 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80028f6:	bf00      	nop
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	20000590 	.word	0x20000590

08002900 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002904:	4802      	ldr	r0, [pc, #8]	; (8002910 <USART1_IRQHandler+0x10>)
 8002906:	f005 fd7f 	bl	8008408 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800290a:	bf00      	nop
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	200007dc 	.word	0x200007dc

08002914 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002918:	4802      	ldr	r0, [pc, #8]	; (8002924 <TIM5_IRQHandler+0x10>)
 800291a:	f004 f815 	bl	8006948 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800291e:	bf00      	nop
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	20000644 	.word	0x20000644

08002928 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800292c:	4802      	ldr	r0, [pc, #8]	; (8002938 <UART4_IRQHandler+0x10>)
 800292e:	f005 fd6b 	bl	8008408 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002932:	bf00      	nop
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	200009d0 	.word	0x200009d0

0800293c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
	return 1;
 8002940:	2301      	movs	r3, #1
}
 8002942:	4618      	mov	r0, r3
 8002944:	46bd      	mov	sp, r7
 8002946:	bc80      	pop	{r7}
 8002948:	4770      	bx	lr

0800294a <_kill>:

int _kill(int pid, int sig)
{
 800294a:	b580      	push	{r7, lr}
 800294c:	b082      	sub	sp, #8
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
 8002952:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002954:	f008 fe0c 	bl	800b570 <__errno>
 8002958:	4603      	mov	r3, r0
 800295a:	2216      	movs	r2, #22
 800295c:	601a      	str	r2, [r3, #0]
	return -1;
 800295e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002962:	4618      	mov	r0, r3
 8002964:	3708      	adds	r7, #8
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}

0800296a <_exit>:

void _exit (int status)
{
 800296a:	b580      	push	{r7, lr}
 800296c:	b082      	sub	sp, #8
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002972:	f04f 31ff 	mov.w	r1, #4294967295
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f7ff ffe7 	bl	800294a <_kill>
	while (1) {}		/* Make sure we hang here */
 800297c:	e7fe      	b.n	800297c <_exit+0x12>

0800297e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800297e:	b580      	push	{r7, lr}
 8002980:	b086      	sub	sp, #24
 8002982:	af00      	add	r7, sp, #0
 8002984:	60f8      	str	r0, [r7, #12]
 8002986:	60b9      	str	r1, [r7, #8]
 8002988:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800298a:	2300      	movs	r3, #0
 800298c:	617b      	str	r3, [r7, #20]
 800298e:	e00a      	b.n	80029a6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002990:	f3af 8000 	nop.w
 8002994:	4601      	mov	r1, r0
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	1c5a      	adds	r2, r3, #1
 800299a:	60ba      	str	r2, [r7, #8]
 800299c:	b2ca      	uxtb	r2, r1
 800299e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	3301      	adds	r3, #1
 80029a4:	617b      	str	r3, [r7, #20]
 80029a6:	697a      	ldr	r2, [r7, #20]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	429a      	cmp	r2, r3
 80029ac:	dbf0      	blt.n	8002990 <_read+0x12>
	}

return len;
 80029ae:	687b      	ldr	r3, [r7, #4]
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3718      	adds	r7, #24
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b084      	sub	sp, #16
 80029bc:	af00      	add	r7, sp, #0
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	607a      	str	r2, [r7, #4]
  if ((file != STDOUT_FILENO) && (file != STDERR_FILENO))
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d00a      	beq.n	80029e0 <_write+0x28>
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d007      	beq.n	80029e0 <_write+0x28>
  {
    errno = EBADF;
 80029d0:	f008 fdce 	bl	800b570 <__errno>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2209      	movs	r2, #9
 80029d8:	601a      	str	r2, [r3, #0]
    return -1;
 80029da:	f04f 33ff 	mov.w	r3, #4294967295
 80029de:	e00f      	b.n	8002a00 <_write+0x48>
  }

  if (g_MAIN_printOutput == MAIN_PRINT_OUTPUT_TO_CONSOLE)
 80029e0:	4b09      	ldr	r3, [pc, #36]	; (8002a08 <_write+0x50>)
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d105      	bne.n	80029f4 <_write+0x3c>
  {
    CON_sendString(ptr, len);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	4619      	mov	r1, r3
 80029ec:	68b8      	ldr	r0, [r7, #8]
 80029ee:	f006 fce3 	bl	80093b8 <CON_sendString>
 80029f2:	e004      	b.n	80029fe <_write+0x46>
  }
  else
  {
    MAS_sendString(ptr, len);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	4619      	mov	r1, r3
 80029f8:	68b8      	ldr	r0, [r7, #8]
 80029fa:	f008 f8ed 	bl	800abd8 <MAS_sendString>
  }

  return len;
 80029fe:	687b      	ldr	r3, [r7, #4]
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3710      	adds	r7, #16
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	200009cc 	.word	0x200009cc

08002a0c <_close>:

int _close(int file)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
	return -1;
 8002a14:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	370c      	adds	r7, #12
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bc80      	pop	{r7}
 8002a20:	4770      	bx	lr

08002a22 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a22:	b480      	push	{r7}
 8002a24:	b083      	sub	sp, #12
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
 8002a2a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a32:	605a      	str	r2, [r3, #4]
	return 0;
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	370c      	adds	r7, #12
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bc80      	pop	{r7}
 8002a3e:	4770      	bx	lr

08002a40 <_isatty>:

int _isatty(int file)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
	return 1;
 8002a48:	2301      	movs	r3, #1
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	370c      	adds	r7, #12
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bc80      	pop	{r7}
 8002a52:	4770      	bx	lr

08002a54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b085      	sub	sp, #20
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	607a      	str	r2, [r7, #4]
	return 0;
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3714      	adds	r7, #20
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bc80      	pop	{r7}
 8002a6a:	4770      	bx	lr

08002a6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b086      	sub	sp, #24
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a74:	4a14      	ldr	r2, [pc, #80]	; (8002ac8 <_sbrk+0x5c>)
 8002a76:	4b15      	ldr	r3, [pc, #84]	; (8002acc <_sbrk+0x60>)
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a80:	4b13      	ldr	r3, [pc, #76]	; (8002ad0 <_sbrk+0x64>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d102      	bne.n	8002a8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a88:	4b11      	ldr	r3, [pc, #68]	; (8002ad0 <_sbrk+0x64>)
 8002a8a:	4a12      	ldr	r2, [pc, #72]	; (8002ad4 <_sbrk+0x68>)
 8002a8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a8e:	4b10      	ldr	r3, [pc, #64]	; (8002ad0 <_sbrk+0x64>)
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4413      	add	r3, r2
 8002a96:	693a      	ldr	r2, [r7, #16]
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d207      	bcs.n	8002aac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a9c:	f008 fd68 	bl	800b570 <__errno>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	220c      	movs	r2, #12
 8002aa4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8002aaa:	e009      	b.n	8002ac0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002aac:	4b08      	ldr	r3, [pc, #32]	; (8002ad0 <_sbrk+0x64>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ab2:	4b07      	ldr	r3, [pc, #28]	; (8002ad0 <_sbrk+0x64>)
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4413      	add	r3, r2
 8002aba:	4a05      	ldr	r2, [pc, #20]	; (8002ad0 <_sbrk+0x64>)
 8002abc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002abe:	68fb      	ldr	r3, [r7, #12]
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3718      	adds	r7, #24
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	2000c000 	.word	0x2000c000
 8002acc:	00000400 	.word	0x00000400
 8002ad0:	20000228 	.word	0x20000228
 8002ad4:	20000bc0 	.word	0x20000bc0

08002ad8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002adc:	bf00      	nop
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bc80      	pop	{r7}
 8002ae2:	4770      	bx	lr

08002ae4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ae4:	480c      	ldr	r0, [pc, #48]	; (8002b18 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002ae6:	490d      	ldr	r1, [pc, #52]	; (8002b1c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002ae8:	4a0d      	ldr	r2, [pc, #52]	; (8002b20 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002aea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002aec:	e002      	b.n	8002af4 <LoopCopyDataInit>

08002aee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002aee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002af0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002af2:	3304      	adds	r3, #4

08002af4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002af4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002af6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002af8:	d3f9      	bcc.n	8002aee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002afa:	4a0a      	ldr	r2, [pc, #40]	; (8002b24 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002afc:	4c0a      	ldr	r4, [pc, #40]	; (8002b28 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002afe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b00:	e001      	b.n	8002b06 <LoopFillZerobss>

08002b02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b04:	3204      	adds	r2, #4

08002b06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b08:	d3fb      	bcc.n	8002b02 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002b0a:	f7ff ffe5 	bl	8002ad8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b0e:	f008 fd35 	bl	800b57c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002b12:	f7fe fc1f 	bl	8001354 <main>
  bx lr
 8002b16:	4770      	bx	lr
  ldr r0, =_sdata
 8002b18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b1c:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8002b20:	0800f9cc 	.word	0x0800f9cc
  ldr r2, =_sbss
 8002b24:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8002b28:	20000bc0 	.word	0x20000bc0

08002b2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002b2c:	e7fe      	b.n	8002b2c <ADC1_2_IRQHandler>
	...

08002b30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b34:	4b08      	ldr	r3, [pc, #32]	; (8002b58 <HAL_Init+0x28>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a07      	ldr	r2, [pc, #28]	; (8002b58 <HAL_Init+0x28>)
 8002b3a:	f043 0310 	orr.w	r3, r3, #16
 8002b3e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b40:	2003      	movs	r0, #3
 8002b42:	f000 fd35 	bl	80035b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b46:	2000      	movs	r0, #0
 8002b48:	f000 f808 	bl	8002b5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b4c:	f7ff fb8a 	bl	8002264 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	40022000 	.word	0x40022000

08002b5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b64:	4b12      	ldr	r3, [pc, #72]	; (8002bb0 <HAL_InitTick+0x54>)
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	4b12      	ldr	r3, [pc, #72]	; (8002bb4 <HAL_InitTick+0x58>)
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b72:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f000 fd80 	bl	8003680 <HAL_SYSTICK_Config>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e00e      	b.n	8002ba8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2b0f      	cmp	r3, #15
 8002b8e:	d80a      	bhi.n	8002ba6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b90:	2200      	movs	r2, #0
 8002b92:	6879      	ldr	r1, [r7, #4]
 8002b94:	f04f 30ff 	mov.w	r0, #4294967295
 8002b98:	f000 fd2a 	bl	80035f0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b9c:	4a06      	ldr	r2, [pc, #24]	; (8002bb8 <HAL_InitTick+0x5c>)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	e000      	b.n	8002ba8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3708      	adds	r7, #8
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	20000000 	.word	0x20000000
 8002bb4:	20000008 	.word	0x20000008
 8002bb8:	20000004 	.word	0x20000004

08002bbc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bc0:	4b05      	ldr	r3, [pc, #20]	; (8002bd8 <HAL_IncTick+0x1c>)
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	4b05      	ldr	r3, [pc, #20]	; (8002bdc <HAL_IncTick+0x20>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4413      	add	r3, r2
 8002bcc:	4a03      	ldr	r2, [pc, #12]	; (8002bdc <HAL_IncTick+0x20>)
 8002bce:	6013      	str	r3, [r2, #0]
}
 8002bd0:	bf00      	nop
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bc80      	pop	{r7}
 8002bd6:	4770      	bx	lr
 8002bd8:	20000008 	.word	0x20000008
 8002bdc:	20000bac 	.word	0x20000bac

08002be0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002be0:	b480      	push	{r7}
 8002be2:	af00      	add	r7, sp, #0
  return uwTick;
 8002be4:	4b02      	ldr	r3, [pc, #8]	; (8002bf0 <HAL_GetTick+0x10>)
 8002be6:	681b      	ldr	r3, [r3, #0]
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bc80      	pop	{r7}
 8002bee:	4770      	bx	lr
 8002bf0:	20000bac 	.word	0x20000bac

08002bf4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bfc:	f7ff fff0 	bl	8002be0 <HAL_GetTick>
 8002c00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c0c:	d005      	beq.n	8002c1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c0e:	4b0a      	ldr	r3, [pc, #40]	; (8002c38 <HAL_Delay+0x44>)
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	461a      	mov	r2, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	4413      	add	r3, r2
 8002c18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c1a:	bf00      	nop
 8002c1c:	f7ff ffe0 	bl	8002be0 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	68fa      	ldr	r2, [r7, #12]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d8f7      	bhi.n	8002c1c <HAL_Delay+0x28>
  {
  }
}
 8002c2c:	bf00      	nop
 8002c2e:	bf00      	nop
 8002c30:	3710      	adds	r7, #16
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	20000008 	.word	0x20000008

08002c3c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b086      	sub	sp, #24
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c44:	2300      	movs	r3, #0
 8002c46:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002c50:	2300      	movs	r3, #0
 8002c52:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d101      	bne.n	8002c5e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e188      	b.n	8002f70 <HAL_ADC_Init+0x334>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a8c      	ldr	r2, [pc, #560]	; (8002e94 <HAL_ADC_Init+0x258>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d00e      	beq.n	8002c86 <HAL_ADC_Init+0x4a>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a8a      	ldr	r2, [pc, #552]	; (8002e98 <HAL_ADC_Init+0x25c>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d009      	beq.n	8002c86 <HAL_ADC_Init+0x4a>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a89      	ldr	r2, [pc, #548]	; (8002e9c <HAL_ADC_Init+0x260>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d004      	beq.n	8002c86 <HAL_ADC_Init+0x4a>
 8002c7c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8002c80:	4887      	ldr	r0, [pc, #540]	; (8002ea0 <HAL_ADC_Init+0x264>)
 8002c82:	f7ff fadd 	bl	8002240 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d009      	beq.n	8002ca2 <HAL_ADC_Init+0x66>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c96:	d004      	beq.n	8002ca2 <HAL_ADC_Init+0x66>
 8002c98:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 8002c9c:	4880      	ldr	r0, [pc, #512]	; (8002ea0 <HAL_ADC_Init+0x264>)
 8002c9e:	f7ff facf 	bl	8002240 <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d009      	beq.n	8002cbe <HAL_ADC_Init+0x82>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cb2:	d004      	beq.n	8002cbe <HAL_ADC_Init+0x82>
 8002cb4:	f240 11b5 	movw	r1, #437	; 0x1b5
 8002cb8:	4879      	ldr	r0, [pc, #484]	; (8002ea0 <HAL_ADC_Init+0x264>)
 8002cba:	f7ff fac1 	bl	8002240 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	7b1b      	ldrb	r3, [r3, #12]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d008      	beq.n	8002cd8 <HAL_ADC_Init+0x9c>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	7b1b      	ldrb	r3, [r3, #12]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d004      	beq.n	8002cd8 <HAL_ADC_Init+0x9c>
 8002cce:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 8002cd2:	4873      	ldr	r0, [pc, #460]	; (8002ea0 <HAL_ADC_Init+0x264>)
 8002cd4:	f7ff fab4 	bl	8002240 <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	69db      	ldr	r3, [r3, #28]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d044      	beq.n	8002d6a <HAL_ADC_Init+0x12e>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	69db      	ldr	r3, [r3, #28]
 8002ce4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ce8:	d03f      	beq.n	8002d6a <HAL_ADC_Init+0x12e>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	69db      	ldr	r3, [r3, #28]
 8002cee:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8002cf2:	d03a      	beq.n	8002d6a <HAL_ADC_Init+0x12e>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	69db      	ldr	r3, [r3, #28]
 8002cf8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002cfc:	d035      	beq.n	8002d6a <HAL_ADC_Init+0x12e>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	69db      	ldr	r3, [r3, #28]
 8002d02:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 8002d06:	d030      	beq.n	8002d6a <HAL_ADC_Init+0x12e>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	69db      	ldr	r3, [r3, #28]
 8002d0c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002d10:	d02b      	beq.n	8002d6a <HAL_ADC_Init+0x12e>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	69db      	ldr	r3, [r3, #28]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d027      	beq.n	8002d6a <HAL_ADC_Init+0x12e>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	69db      	ldr	r3, [r3, #28]
 8002d1e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d22:	d022      	beq.n	8002d6a <HAL_ADC_Init+0x12e>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	69db      	ldr	r3, [r3, #28]
 8002d28:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8002d2c:	d01d      	beq.n	8002d6a <HAL_ADC_Init+0x12e>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	69db      	ldr	r3, [r3, #28]
 8002d32:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 8002d36:	d018      	beq.n	8002d6a <HAL_ADC_Init+0x12e>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	69db      	ldr	r3, [r3, #28]
 8002d3c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002d40:	d013      	beq.n	8002d6a <HAL_ADC_Init+0x12e>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	69db      	ldr	r3, [r3, #28]
 8002d46:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d4a:	d00e      	beq.n	8002d6a <HAL_ADC_Init+0x12e>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	69db      	ldr	r3, [r3, #28]
 8002d50:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002d54:	d009      	beq.n	8002d6a <HAL_ADC_Init+0x12e>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	69db      	ldr	r3, [r3, #28]
 8002d5a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002d5e:	d004      	beq.n	8002d6a <HAL_ADC_Init+0x12e>
 8002d60:	f240 11b7 	movw	r1, #439	; 0x1b7
 8002d64:	484e      	ldr	r0, [pc, #312]	; (8002ea0 <HAL_ADC_Init+0x264>)
 8002d66:	f7ff fa6b 	bl	8002240 <assert_failed>
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d02a      	beq.n	8002dc8 <HAL_ADC_Init+0x18c>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	691b      	ldr	r3, [r3, #16]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d003      	beq.n	8002d82 <HAL_ADC_Init+0x146>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	691b      	ldr	r3, [r3, #16]
 8002d7e:	2b10      	cmp	r3, #16
 8002d80:	d904      	bls.n	8002d8c <HAL_ADC_Init+0x150>
 8002d82:	f240 11bb 	movw	r1, #443	; 0x1bb
 8002d86:	4846      	ldr	r0, [pc, #280]	; (8002ea0 <HAL_ADC_Init+0x264>)
 8002d88:	f7ff fa5a 	bl	8002240 <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	7d1b      	ldrb	r3, [r3, #20]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d008      	beq.n	8002da6 <HAL_ADC_Init+0x16a>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	7d1b      	ldrb	r3, [r3, #20]
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d004      	beq.n	8002da6 <HAL_ADC_Init+0x16a>
 8002d9c:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8002da0:	483f      	ldr	r0, [pc, #252]	; (8002ea0 <HAL_ADC_Init+0x264>)
 8002da2:	f7ff fa4d 	bl	8002240 <assert_failed>
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	7d1b      	ldrb	r3, [r3, #20]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d00c      	beq.n	8002dc8 <HAL_ADC_Init+0x18c>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	699b      	ldr	r3, [r3, #24]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d003      	beq.n	8002dbe <HAL_ADC_Init+0x182>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	699b      	ldr	r3, [r3, #24]
 8002dba:	2b08      	cmp	r3, #8
 8002dbc:	d904      	bls.n	8002dc8 <HAL_ADC_Init+0x18c>
 8002dbe:	f240 11bf 	movw	r1, #447	; 0x1bf
 8002dc2:	4837      	ldr	r0, [pc, #220]	; (8002ea0 <HAL_ADC_Init+0x264>)
 8002dc4:	f7ff fa3c 	bl	8002240 <assert_failed>
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d109      	bne.n	8002de4 <HAL_ADC_Init+0x1a8>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f7ff fa72 	bl	80022c8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f000 fabf 	bl	8003368 <ADC_ConversionStop_Disable>
 8002dea:	4603      	mov	r3, r0
 8002dec:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df2:	f003 0310 	and.w	r3, r3, #16
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	f040 80b1 	bne.w	8002f5e <HAL_ADC_Init+0x322>
 8002dfc:	7dfb      	ldrb	r3, [r7, #23]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	f040 80ad 	bne.w	8002f5e <HAL_ADC_Init+0x322>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e08:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002e0c:	f023 0302 	bic.w	r3, r3, #2
 8002e10:	f043 0202 	orr.w	r2, r3, #2
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	491e      	ldr	r1, [pc, #120]	; (8002e9c <HAL_ADC_Init+0x260>)
 8002e22:	428b      	cmp	r3, r1
 8002e24:	d10a      	bne.n	8002e3c <HAL_ADC_Init+0x200>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	69db      	ldr	r3, [r3, #28]
 8002e2a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002e2e:	d002      	beq.n	8002e36 <HAL_ADC_Init+0x1fa>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	69db      	ldr	r3, [r3, #28]
 8002e34:	e004      	b.n	8002e40 <HAL_ADC_Init+0x204>
 8002e36:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002e3a:	e001      	b.n	8002e40 <HAL_ADC_Init+0x204>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002e40:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	7b1b      	ldrb	r3, [r3, #12]
 8002e46:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002e48:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002e4a:	68ba      	ldr	r2, [r7, #8]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e58:	d003      	beq.n	8002e62 <HAL_ADC_Init+0x226>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d102      	bne.n	8002e68 <HAL_ADC_Init+0x22c>
 8002e62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e66:	e000      	b.n	8002e6a <HAL_ADC_Init+0x22e>
 8002e68:	2300      	movs	r3, #0
 8002e6a:	693a      	ldr	r2, [r7, #16]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	7d1b      	ldrb	r3, [r3, #20]
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d121      	bne.n	8002ebc <HAL_ADC_Init+0x280>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	7b1b      	ldrb	r3, [r3, #12]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d111      	bne.n	8002ea4 <HAL_ADC_Init+0x268>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	699b      	ldr	r3, [r3, #24]
 8002e84:	3b01      	subs	r3, #1
 8002e86:	035a      	lsls	r2, r3, #13
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002e90:	613b      	str	r3, [r7, #16]
 8002e92:	e013      	b.n	8002ebc <HAL_ADC_Init+0x280>
 8002e94:	40012400 	.word	0x40012400
 8002e98:	40012800 	.word	0x40012800
 8002e9c:	40013c00 	.word	0x40013c00
 8002ea0:	0800ebd4 	.word	0x0800ebd4
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea8:	f043 0220 	orr.w	r2, r3, #32
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb4:	f043 0201 	orr.w	r2, r3, #1
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	693a      	ldr	r2, [r7, #16]
 8002ecc:	430a      	orrs	r2, r1
 8002ece:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	689a      	ldr	r2, [r3, #8]
 8002ed6:	4b28      	ldr	r3, [pc, #160]	; (8002f78 <HAL_ADC_Init+0x33c>)
 8002ed8:	4013      	ands	r3, r2
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	6812      	ldr	r2, [r2, #0]
 8002ede:	68b9      	ldr	r1, [r7, #8]
 8002ee0:	430b      	orrs	r3, r1
 8002ee2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002eec:	d003      	beq.n	8002ef6 <HAL_ADC_Init+0x2ba>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d104      	bne.n	8002f00 <HAL_ADC_Init+0x2c4>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	3b01      	subs	r3, #1
 8002efc:	051b      	lsls	r3, r3, #20
 8002efe:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f06:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68fa      	ldr	r2, [r7, #12]
 8002f10:	430a      	orrs	r2, r1
 8002f12:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	689a      	ldr	r2, [r3, #8]
 8002f1a:	4b18      	ldr	r3, [pc, #96]	; (8002f7c <HAL_ADC_Init+0x340>)
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	68ba      	ldr	r2, [r7, #8]
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d10b      	bne.n	8002f3c <HAL_ADC_Init+0x300>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f2e:	f023 0303 	bic.w	r3, r3, #3
 8002f32:	f043 0201 	orr.w	r2, r3, #1
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002f3a:	e018      	b.n	8002f6e <HAL_ADC_Init+0x332>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f40:	f023 0312 	bic.w	r3, r3, #18
 8002f44:	f043 0210 	orr.w	r2, r3, #16
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f50:	f043 0201 	orr.w	r2, r3, #1
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002f5c:	e007      	b.n	8002f6e <HAL_ADC_Init+0x332>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f62:	f043 0210 	orr.w	r2, r3, #16
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002f6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3718      	adds	r7, #24
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	ffe1f7fd 	.word	0xffe1f7fd
 8002f7c:	ff1f0efe 	.word	0xff1f0efe

08002f80 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a0c      	ldr	r2, [pc, #48]	; (8002fc0 <HAL_ADC_GetValue+0x40>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d00e      	beq.n	8002fb0 <HAL_ADC_GetValue+0x30>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a0b      	ldr	r2, [pc, #44]	; (8002fc4 <HAL_ADC_GetValue+0x44>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d009      	beq.n	8002fb0 <HAL_ADC_GetValue+0x30>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a09      	ldr	r2, [pc, #36]	; (8002fc8 <HAL_ADC_GetValue+0x48>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d004      	beq.n	8002fb0 <HAL_ADC_GetValue+0x30>
 8002fa6:	f240 61ef 	movw	r1, #1775	; 0x6ef
 8002faa:	4808      	ldr	r0, [pc, #32]	; (8002fcc <HAL_ADC_GetValue+0x4c>)
 8002fac:	f7ff f948 	bl	8002240 <assert_failed>

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3708      	adds	r7, #8
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	40012400 	.word	0x40012400
 8002fc4:	40012800 	.word	0x40012800
 8002fc8:	40013c00 	.word	0x40013c00
 8002fcc:	0800ebd4 	.word	0x0800ebd4

08002fd0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a8b      	ldr	r2, [pc, #556]	; (8003214 <HAL_ADC_ConfigChannel+0x244>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d00e      	beq.n	800300a <HAL_ADC_ConfigChannel+0x3a>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a89      	ldr	r2, [pc, #548]	; (8003218 <HAL_ADC_ConfigChannel+0x248>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d009      	beq.n	800300a <HAL_ADC_ConfigChannel+0x3a>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a88      	ldr	r2, [pc, #544]	; (800321c <HAL_ADC_ConfigChannel+0x24c>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d004      	beq.n	800300a <HAL_ADC_ConfigChannel+0x3a>
 8003000:	f240 71dd 	movw	r1, #2013	; 0x7dd
 8003004:	4886      	ldr	r0, [pc, #536]	; (8003220 <HAL_ADC_ConfigChannel+0x250>)
 8003006:	f7ff f91b 	bl	8002240 <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d048      	beq.n	80030a4 <HAL_ADC_ConfigChannel+0xd4>
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2b01      	cmp	r3, #1
 8003018:	d044      	beq.n	80030a4 <HAL_ADC_ConfigChannel+0xd4>
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2b02      	cmp	r3, #2
 8003020:	d040      	beq.n	80030a4 <HAL_ADC_ConfigChannel+0xd4>
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	2b03      	cmp	r3, #3
 8003028:	d03c      	beq.n	80030a4 <HAL_ADC_ConfigChannel+0xd4>
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2b04      	cmp	r3, #4
 8003030:	d038      	beq.n	80030a4 <HAL_ADC_ConfigChannel+0xd4>
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	2b05      	cmp	r3, #5
 8003038:	d034      	beq.n	80030a4 <HAL_ADC_ConfigChannel+0xd4>
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	2b06      	cmp	r3, #6
 8003040:	d030      	beq.n	80030a4 <HAL_ADC_ConfigChannel+0xd4>
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2b07      	cmp	r3, #7
 8003048:	d02c      	beq.n	80030a4 <HAL_ADC_ConfigChannel+0xd4>
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2b08      	cmp	r3, #8
 8003050:	d028      	beq.n	80030a4 <HAL_ADC_ConfigChannel+0xd4>
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2b09      	cmp	r3, #9
 8003058:	d024      	beq.n	80030a4 <HAL_ADC_ConfigChannel+0xd4>
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	2b0a      	cmp	r3, #10
 8003060:	d020      	beq.n	80030a4 <HAL_ADC_ConfigChannel+0xd4>
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2b0b      	cmp	r3, #11
 8003068:	d01c      	beq.n	80030a4 <HAL_ADC_ConfigChannel+0xd4>
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2b0c      	cmp	r3, #12
 8003070:	d018      	beq.n	80030a4 <HAL_ADC_ConfigChannel+0xd4>
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2b0d      	cmp	r3, #13
 8003078:	d014      	beq.n	80030a4 <HAL_ADC_ConfigChannel+0xd4>
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	2b0e      	cmp	r3, #14
 8003080:	d010      	beq.n	80030a4 <HAL_ADC_ConfigChannel+0xd4>
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2b0f      	cmp	r3, #15
 8003088:	d00c      	beq.n	80030a4 <HAL_ADC_ConfigChannel+0xd4>
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	2b10      	cmp	r3, #16
 8003090:	d008      	beq.n	80030a4 <HAL_ADC_ConfigChannel+0xd4>
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2b11      	cmp	r3, #17
 8003098:	d004      	beq.n	80030a4 <HAL_ADC_ConfigChannel+0xd4>
 800309a:	f240 71de 	movw	r1, #2014	; 0x7de
 800309e:	4860      	ldr	r0, [pc, #384]	; (8003220 <HAL_ADC_ConfigChannel+0x250>)
 80030a0:	f7ff f8ce 	bl	8002240 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d040      	beq.n	800312e <HAL_ADC_ConfigChannel+0x15e>
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d03c      	beq.n	800312e <HAL_ADC_ConfigChannel+0x15e>
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	2b03      	cmp	r3, #3
 80030ba:	d038      	beq.n	800312e <HAL_ADC_ConfigChannel+0x15e>
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	2b04      	cmp	r3, #4
 80030c2:	d034      	beq.n	800312e <HAL_ADC_ConfigChannel+0x15e>
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	2b05      	cmp	r3, #5
 80030ca:	d030      	beq.n	800312e <HAL_ADC_ConfigChannel+0x15e>
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	2b06      	cmp	r3, #6
 80030d2:	d02c      	beq.n	800312e <HAL_ADC_ConfigChannel+0x15e>
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	2b07      	cmp	r3, #7
 80030da:	d028      	beq.n	800312e <HAL_ADC_ConfigChannel+0x15e>
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	2b08      	cmp	r3, #8
 80030e2:	d024      	beq.n	800312e <HAL_ADC_ConfigChannel+0x15e>
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	2b09      	cmp	r3, #9
 80030ea:	d020      	beq.n	800312e <HAL_ADC_ConfigChannel+0x15e>
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	2b0a      	cmp	r3, #10
 80030f2:	d01c      	beq.n	800312e <HAL_ADC_ConfigChannel+0x15e>
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	2b0b      	cmp	r3, #11
 80030fa:	d018      	beq.n	800312e <HAL_ADC_ConfigChannel+0x15e>
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	2b0c      	cmp	r3, #12
 8003102:	d014      	beq.n	800312e <HAL_ADC_ConfigChannel+0x15e>
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	2b0d      	cmp	r3, #13
 800310a:	d010      	beq.n	800312e <HAL_ADC_ConfigChannel+0x15e>
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	2b0e      	cmp	r3, #14
 8003112:	d00c      	beq.n	800312e <HAL_ADC_ConfigChannel+0x15e>
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	2b0f      	cmp	r3, #15
 800311a:	d008      	beq.n	800312e <HAL_ADC_ConfigChannel+0x15e>
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	2b10      	cmp	r3, #16
 8003122:	d004      	beq.n	800312e <HAL_ADC_ConfigChannel+0x15e>
 8003124:	f240 71df 	movw	r1, #2015	; 0x7df
 8003128:	483d      	ldr	r0, [pc, #244]	; (8003220 <HAL_ADC_ConfigChannel+0x250>)
 800312a:	f7ff f889 	bl	8002240 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d020      	beq.n	8003178 <HAL_ADC_ConfigChannel+0x1a8>
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	2b01      	cmp	r3, #1
 800313c:	d01c      	beq.n	8003178 <HAL_ADC_ConfigChannel+0x1a8>
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	2b02      	cmp	r3, #2
 8003144:	d018      	beq.n	8003178 <HAL_ADC_ConfigChannel+0x1a8>
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	2b03      	cmp	r3, #3
 800314c:	d014      	beq.n	8003178 <HAL_ADC_ConfigChannel+0x1a8>
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	2b04      	cmp	r3, #4
 8003154:	d010      	beq.n	8003178 <HAL_ADC_ConfigChannel+0x1a8>
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	2b05      	cmp	r3, #5
 800315c:	d00c      	beq.n	8003178 <HAL_ADC_ConfigChannel+0x1a8>
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	2b06      	cmp	r3, #6
 8003164:	d008      	beq.n	8003178 <HAL_ADC_ConfigChannel+0x1a8>
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	2b07      	cmp	r3, #7
 800316c:	d004      	beq.n	8003178 <HAL_ADC_ConfigChannel+0x1a8>
 800316e:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 8003172:	482b      	ldr	r0, [pc, #172]	; (8003220 <HAL_ADC_ConfigChannel+0x250>)
 8003174:	f7ff f864 	bl	8002240 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800317e:	2b01      	cmp	r3, #1
 8003180:	d101      	bne.n	8003186 <HAL_ADC_ConfigChannel+0x1b6>
 8003182:	2302      	movs	r3, #2
 8003184:	e0e5      	b.n	8003352 <HAL_ADC_ConfigChannel+0x382>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2201      	movs	r2, #1
 800318a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	2b06      	cmp	r3, #6
 8003194:	d81c      	bhi.n	80031d0 <HAL_ADC_ConfigChannel+0x200>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	685a      	ldr	r2, [r3, #4]
 80031a0:	4613      	mov	r3, r2
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	4413      	add	r3, r2
 80031a6:	3b05      	subs	r3, #5
 80031a8:	221f      	movs	r2, #31
 80031aa:	fa02 f303 	lsl.w	r3, r2, r3
 80031ae:	43db      	mvns	r3, r3
 80031b0:	4019      	ands	r1, r3
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	6818      	ldr	r0, [r3, #0]
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	685a      	ldr	r2, [r3, #4]
 80031ba:	4613      	mov	r3, r2
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	4413      	add	r3, r2
 80031c0:	3b05      	subs	r3, #5
 80031c2:	fa00 f203 	lsl.w	r2, r0, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	430a      	orrs	r2, r1
 80031cc:	635a      	str	r2, [r3, #52]	; 0x34
 80031ce:	e045      	b.n	800325c <HAL_ADC_ConfigChannel+0x28c>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	2b0c      	cmp	r3, #12
 80031d6:	d825      	bhi.n	8003224 <HAL_ADC_ConfigChannel+0x254>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	685a      	ldr	r2, [r3, #4]
 80031e2:	4613      	mov	r3, r2
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	4413      	add	r3, r2
 80031e8:	3b23      	subs	r3, #35	; 0x23
 80031ea:	221f      	movs	r2, #31
 80031ec:	fa02 f303 	lsl.w	r3, r2, r3
 80031f0:	43db      	mvns	r3, r3
 80031f2:	4019      	ands	r1, r3
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	6818      	ldr	r0, [r3, #0]
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	685a      	ldr	r2, [r3, #4]
 80031fc:	4613      	mov	r3, r2
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	4413      	add	r3, r2
 8003202:	3b23      	subs	r3, #35	; 0x23
 8003204:	fa00 f203 	lsl.w	r2, r0, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	430a      	orrs	r2, r1
 800320e:	631a      	str	r2, [r3, #48]	; 0x30
 8003210:	e024      	b.n	800325c <HAL_ADC_ConfigChannel+0x28c>
 8003212:	bf00      	nop
 8003214:	40012400 	.word	0x40012400
 8003218:	40012800 	.word	0x40012800
 800321c:	40013c00 	.word	0x40013c00
 8003220:	0800ebd4 	.word	0x0800ebd4
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	685a      	ldr	r2, [r3, #4]
 800322e:	4613      	mov	r3, r2
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	4413      	add	r3, r2
 8003234:	3b41      	subs	r3, #65	; 0x41
 8003236:	221f      	movs	r2, #31
 8003238:	fa02 f303 	lsl.w	r3, r2, r3
 800323c:	43db      	mvns	r3, r3
 800323e:	4019      	ands	r1, r3
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	6818      	ldr	r0, [r3, #0]
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	685a      	ldr	r2, [r3, #4]
 8003248:	4613      	mov	r3, r2
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	4413      	add	r3, r2
 800324e:	3b41      	subs	r3, #65	; 0x41
 8003250:	fa00 f203 	lsl.w	r2, r0, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	430a      	orrs	r2, r1
 800325a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2b09      	cmp	r3, #9
 8003262:	d91c      	bls.n	800329e <HAL_ADC_ConfigChannel+0x2ce>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	68d9      	ldr	r1, [r3, #12]
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	4613      	mov	r3, r2
 8003270:	005b      	lsls	r3, r3, #1
 8003272:	4413      	add	r3, r2
 8003274:	3b1e      	subs	r3, #30
 8003276:	2207      	movs	r2, #7
 8003278:	fa02 f303 	lsl.w	r3, r2, r3
 800327c:	43db      	mvns	r3, r3
 800327e:	4019      	ands	r1, r3
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	6898      	ldr	r0, [r3, #8]
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	4613      	mov	r3, r2
 800328a:	005b      	lsls	r3, r3, #1
 800328c:	4413      	add	r3, r2
 800328e:	3b1e      	subs	r3, #30
 8003290:	fa00 f203 	lsl.w	r2, r0, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	430a      	orrs	r2, r1
 800329a:	60da      	str	r2, [r3, #12]
 800329c:	e019      	b.n	80032d2 <HAL_ADC_ConfigChannel+0x302>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	6919      	ldr	r1, [r3, #16]
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	4613      	mov	r3, r2
 80032aa:	005b      	lsls	r3, r3, #1
 80032ac:	4413      	add	r3, r2
 80032ae:	2207      	movs	r2, #7
 80032b0:	fa02 f303 	lsl.w	r3, r2, r3
 80032b4:	43db      	mvns	r3, r3
 80032b6:	4019      	ands	r1, r3
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	6898      	ldr	r0, [r3, #8]
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	4613      	mov	r3, r2
 80032c2:	005b      	lsls	r3, r3, #1
 80032c4:	4413      	add	r3, r2
 80032c6:	fa00 f203 	lsl.w	r2, r0, r3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	430a      	orrs	r2, r1
 80032d0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2b10      	cmp	r3, #16
 80032d8:	d003      	beq.n	80032e2 <HAL_ADC_ConfigChannel+0x312>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80032de:	2b11      	cmp	r3, #17
 80032e0:	d132      	bne.n	8003348 <HAL_ADC_ConfigChannel+0x378>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a1d      	ldr	r2, [pc, #116]	; (800335c <HAL_ADC_ConfigChannel+0x38c>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d125      	bne.n	8003338 <HAL_ADC_ConfigChannel+0x368>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d126      	bne.n	8003348 <HAL_ADC_ConfigChannel+0x378>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	689a      	ldr	r2, [r3, #8]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003308:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	2b10      	cmp	r3, #16
 8003310:	d11a      	bne.n	8003348 <HAL_ADC_ConfigChannel+0x378>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003312:	4b13      	ldr	r3, [pc, #76]	; (8003360 <HAL_ADC_ConfigChannel+0x390>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a13      	ldr	r2, [pc, #76]	; (8003364 <HAL_ADC_ConfigChannel+0x394>)
 8003318:	fba2 2303 	umull	r2, r3, r2, r3
 800331c:	0c9a      	lsrs	r2, r3, #18
 800331e:	4613      	mov	r3, r2
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	4413      	add	r3, r2
 8003324:	005b      	lsls	r3, r3, #1
 8003326:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003328:	e002      	b.n	8003330 <HAL_ADC_ConfigChannel+0x360>
          {
            wait_loop_index--;
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	3b01      	subs	r3, #1
 800332e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d1f9      	bne.n	800332a <HAL_ADC_ConfigChannel+0x35a>
 8003336:	e007      	b.n	8003348 <HAL_ADC_ConfigChannel+0x378>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800333c:	f043 0220 	orr.w	r2, r3, #32
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003350:	7bfb      	ldrb	r3, [r7, #15]
}
 8003352:	4618      	mov	r0, r3
 8003354:	3710      	adds	r7, #16
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	40012400 	.word	0x40012400
 8003360:	20000000 	.word	0x20000000
 8003364:	431bde83 	.word	0x431bde83

08003368 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003370:	2300      	movs	r3, #0
 8003372:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	f003 0301 	and.w	r3, r3, #1
 800337e:	2b01      	cmp	r3, #1
 8003380:	d12e      	bne.n	80033e0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	689a      	ldr	r2, [r3, #8]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f022 0201 	bic.w	r2, r2, #1
 8003390:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003392:	f7ff fc25 	bl	8002be0 <HAL_GetTick>
 8003396:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003398:	e01b      	b.n	80033d2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800339a:	f7ff fc21 	bl	8002be0 <HAL_GetTick>
 800339e:	4602      	mov	r2, r0
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	2b02      	cmp	r3, #2
 80033a6:	d914      	bls.n	80033d2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f003 0301 	and.w	r3, r3, #1
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d10d      	bne.n	80033d2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ba:	f043 0210 	orr.w	r2, r3, #16
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c6:	f043 0201 	orr.w	r2, r3, #1
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e007      	b.n	80033e2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	f003 0301 	and.w	r3, r3, #1
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d0dc      	beq.n	800339a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3710      	adds	r7, #16
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
	...

080033ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b085      	sub	sp, #20
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f003 0307 	and.w	r3, r3, #7
 80033fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033fc:	4b0c      	ldr	r3, [pc, #48]	; (8003430 <__NVIC_SetPriorityGrouping+0x44>)
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003402:	68ba      	ldr	r2, [r7, #8]
 8003404:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003408:	4013      	ands	r3, r2
 800340a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003414:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003418:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800341c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800341e:	4a04      	ldr	r2, [pc, #16]	; (8003430 <__NVIC_SetPriorityGrouping+0x44>)
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	60d3      	str	r3, [r2, #12]
}
 8003424:	bf00      	nop
 8003426:	3714      	adds	r7, #20
 8003428:	46bd      	mov	sp, r7
 800342a:	bc80      	pop	{r7}
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	e000ed00 	.word	0xe000ed00

08003434 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003434:	b480      	push	{r7}
 8003436:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003438:	4b04      	ldr	r3, [pc, #16]	; (800344c <__NVIC_GetPriorityGrouping+0x18>)
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	0a1b      	lsrs	r3, r3, #8
 800343e:	f003 0307 	and.w	r3, r3, #7
}
 8003442:	4618      	mov	r0, r3
 8003444:	46bd      	mov	sp, r7
 8003446:	bc80      	pop	{r7}
 8003448:	4770      	bx	lr
 800344a:	bf00      	nop
 800344c:	e000ed00 	.word	0xe000ed00

08003450 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	4603      	mov	r3, r0
 8003458:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800345a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800345e:	2b00      	cmp	r3, #0
 8003460:	db0b      	blt.n	800347a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003462:	79fb      	ldrb	r3, [r7, #7]
 8003464:	f003 021f 	and.w	r2, r3, #31
 8003468:	4906      	ldr	r1, [pc, #24]	; (8003484 <__NVIC_EnableIRQ+0x34>)
 800346a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800346e:	095b      	lsrs	r3, r3, #5
 8003470:	2001      	movs	r0, #1
 8003472:	fa00 f202 	lsl.w	r2, r0, r2
 8003476:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800347a:	bf00      	nop
 800347c:	370c      	adds	r7, #12
 800347e:	46bd      	mov	sp, r7
 8003480:	bc80      	pop	{r7}
 8003482:	4770      	bx	lr
 8003484:	e000e100 	.word	0xe000e100

08003488 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	4603      	mov	r3, r0
 8003490:	6039      	str	r1, [r7, #0]
 8003492:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003494:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003498:	2b00      	cmp	r3, #0
 800349a:	db0a      	blt.n	80034b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	b2da      	uxtb	r2, r3
 80034a0:	490c      	ldr	r1, [pc, #48]	; (80034d4 <__NVIC_SetPriority+0x4c>)
 80034a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034a6:	0112      	lsls	r2, r2, #4
 80034a8:	b2d2      	uxtb	r2, r2
 80034aa:	440b      	add	r3, r1
 80034ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034b0:	e00a      	b.n	80034c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	b2da      	uxtb	r2, r3
 80034b6:	4908      	ldr	r1, [pc, #32]	; (80034d8 <__NVIC_SetPriority+0x50>)
 80034b8:	79fb      	ldrb	r3, [r7, #7]
 80034ba:	f003 030f 	and.w	r3, r3, #15
 80034be:	3b04      	subs	r3, #4
 80034c0:	0112      	lsls	r2, r2, #4
 80034c2:	b2d2      	uxtb	r2, r2
 80034c4:	440b      	add	r3, r1
 80034c6:	761a      	strb	r2, [r3, #24]
}
 80034c8:	bf00      	nop
 80034ca:	370c      	adds	r7, #12
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bc80      	pop	{r7}
 80034d0:	4770      	bx	lr
 80034d2:	bf00      	nop
 80034d4:	e000e100 	.word	0xe000e100
 80034d8:	e000ed00 	.word	0xe000ed00

080034dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034dc:	b480      	push	{r7}
 80034de:	b089      	sub	sp, #36	; 0x24
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f003 0307 	and.w	r3, r3, #7
 80034ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	f1c3 0307 	rsb	r3, r3, #7
 80034f6:	2b04      	cmp	r3, #4
 80034f8:	bf28      	it	cs
 80034fa:	2304      	movcs	r3, #4
 80034fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	3304      	adds	r3, #4
 8003502:	2b06      	cmp	r3, #6
 8003504:	d902      	bls.n	800350c <NVIC_EncodePriority+0x30>
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	3b03      	subs	r3, #3
 800350a:	e000      	b.n	800350e <NVIC_EncodePriority+0x32>
 800350c:	2300      	movs	r3, #0
 800350e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003510:	f04f 32ff 	mov.w	r2, #4294967295
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	fa02 f303 	lsl.w	r3, r2, r3
 800351a:	43da      	mvns	r2, r3
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	401a      	ands	r2, r3
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003524:	f04f 31ff 	mov.w	r1, #4294967295
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	fa01 f303 	lsl.w	r3, r1, r3
 800352e:	43d9      	mvns	r1, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003534:	4313      	orrs	r3, r2
         );
}
 8003536:	4618      	mov	r0, r3
 8003538:	3724      	adds	r7, #36	; 0x24
 800353a:	46bd      	mov	sp, r7
 800353c:	bc80      	pop	{r7}
 800353e:	4770      	bx	lr

08003540 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003540:	b480      	push	{r7}
 8003542:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003544:	f3bf 8f4f 	dsb	sy
}
 8003548:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800354a:	4b06      	ldr	r3, [pc, #24]	; (8003564 <__NVIC_SystemReset+0x24>)
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003552:	4904      	ldr	r1, [pc, #16]	; (8003564 <__NVIC_SystemReset+0x24>)
 8003554:	4b04      	ldr	r3, [pc, #16]	; (8003568 <__NVIC_SystemReset+0x28>)
 8003556:	4313      	orrs	r3, r2
 8003558:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800355a:	f3bf 8f4f 	dsb	sy
}
 800355e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003560:	bf00      	nop
 8003562:	e7fd      	b.n	8003560 <__NVIC_SystemReset+0x20>
 8003564:	e000ed00 	.word	0xe000ed00
 8003568:	05fa0004 	.word	0x05fa0004

0800356c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	3b01      	subs	r3, #1
 8003578:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800357c:	d301      	bcc.n	8003582 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800357e:	2301      	movs	r3, #1
 8003580:	e00f      	b.n	80035a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003582:	4a0a      	ldr	r2, [pc, #40]	; (80035ac <SysTick_Config+0x40>)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	3b01      	subs	r3, #1
 8003588:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800358a:	210f      	movs	r1, #15
 800358c:	f04f 30ff 	mov.w	r0, #4294967295
 8003590:	f7ff ff7a 	bl	8003488 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003594:	4b05      	ldr	r3, [pc, #20]	; (80035ac <SysTick_Config+0x40>)
 8003596:	2200      	movs	r2, #0
 8003598:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800359a:	4b04      	ldr	r3, [pc, #16]	; (80035ac <SysTick_Config+0x40>)
 800359c:	2207      	movs	r2, #7
 800359e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035a0:	2300      	movs	r3, #0
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3708      	adds	r7, #8
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	e000e010 	.word	0xe000e010

080035b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2b07      	cmp	r3, #7
 80035bc:	d00f      	beq.n	80035de <HAL_NVIC_SetPriorityGrouping+0x2e>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2b06      	cmp	r3, #6
 80035c2:	d00c      	beq.n	80035de <HAL_NVIC_SetPriorityGrouping+0x2e>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2b05      	cmp	r3, #5
 80035c8:	d009      	beq.n	80035de <HAL_NVIC_SetPriorityGrouping+0x2e>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2b04      	cmp	r3, #4
 80035ce:	d006      	beq.n	80035de <HAL_NVIC_SetPriorityGrouping+0x2e>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2b03      	cmp	r3, #3
 80035d4:	d003      	beq.n	80035de <HAL_NVIC_SetPriorityGrouping+0x2e>
 80035d6:	2192      	movs	r1, #146	; 0x92
 80035d8:	4804      	ldr	r0, [pc, #16]	; (80035ec <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80035da:	f7fe fe31 	bl	8002240 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f7ff ff04 	bl	80033ec <__NVIC_SetPriorityGrouping>
}
 80035e4:	bf00      	nop
 80035e6:	3708      	adds	r7, #8
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	0800ec0c 	.word	0x0800ec0c

080035f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b086      	sub	sp, #24
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	4603      	mov	r3, r0
 80035f8:	60b9      	str	r1, [r7, #8]
 80035fa:	607a      	str	r2, [r7, #4]
 80035fc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80035fe:	2300      	movs	r3, #0
 8003600:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2b0f      	cmp	r3, #15
 8003606:	d903      	bls.n	8003610 <HAL_NVIC_SetPriority+0x20>
 8003608:	21aa      	movs	r1, #170	; 0xaa
 800360a:	480e      	ldr	r0, [pc, #56]	; (8003644 <HAL_NVIC_SetPriority+0x54>)
 800360c:	f7fe fe18 	bl	8002240 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	2b0f      	cmp	r3, #15
 8003614:	d903      	bls.n	800361e <HAL_NVIC_SetPriority+0x2e>
 8003616:	21ab      	movs	r1, #171	; 0xab
 8003618:	480a      	ldr	r0, [pc, #40]	; (8003644 <HAL_NVIC_SetPriority+0x54>)
 800361a:	f7fe fe11 	bl	8002240 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800361e:	f7ff ff09 	bl	8003434 <__NVIC_GetPriorityGrouping>
 8003622:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	68b9      	ldr	r1, [r7, #8]
 8003628:	6978      	ldr	r0, [r7, #20]
 800362a:	f7ff ff57 	bl	80034dc <NVIC_EncodePriority>
 800362e:	4602      	mov	r2, r0
 8003630:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003634:	4611      	mov	r1, r2
 8003636:	4618      	mov	r0, r3
 8003638:	f7ff ff26 	bl	8003488 <__NVIC_SetPriority>
}
 800363c:	bf00      	nop
 800363e:	3718      	adds	r7, #24
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}
 8003644:	0800ec0c 	.word	0x0800ec0c

08003648 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b082      	sub	sp, #8
 800364c:	af00      	add	r7, sp, #0
 800364e:	4603      	mov	r3, r0
 8003650:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8003652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003656:	2b00      	cmp	r3, #0
 8003658:	da03      	bge.n	8003662 <HAL_NVIC_EnableIRQ+0x1a>
 800365a:	21be      	movs	r1, #190	; 0xbe
 800365c:	4805      	ldr	r0, [pc, #20]	; (8003674 <HAL_NVIC_EnableIRQ+0x2c>)
 800365e:	f7fe fdef 	bl	8002240 <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003666:	4618      	mov	r0, r3
 8003668:	f7ff fef2 	bl	8003450 <__NVIC_EnableIRQ>
}
 800366c:	bf00      	nop
 800366e:	3708      	adds	r7, #8
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}
 8003674:	0800ec0c 	.word	0x0800ec0c

08003678 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800367c:	f7ff ff60 	bl	8003540 <__NVIC_SystemReset>

08003680 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f7ff ff6f 	bl	800356c <SysTick_Config>
 800368e:	4603      	mov	r3, r0
}
 8003690:	4618      	mov	r0, r3
 8003692:	3708      	adds	r7, #8
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}

08003698 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003698:	b480      	push	{r7}
 800369a:	b085      	sub	sp, #20
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036a0:	2300      	movs	r3, #0
 80036a2:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d008      	beq.n	80036c0 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2204      	movs	r2, #4
 80036b2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e020      	b.n	8003702 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f022 020e 	bic.w	r2, r2, #14
 80036ce:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f022 0201 	bic.w	r2, r2, #1
 80036de:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036e8:	2101      	movs	r1, #1
 80036ea:	fa01 f202 	lsl.w	r2, r1, r2
 80036ee:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003700:	7bfb      	ldrb	r3, [r7, #15]
}
 8003702:	4618      	mov	r0, r3
 8003704:	3714      	adds	r7, #20
 8003706:	46bd      	mov	sp, r7
 8003708:	bc80      	pop	{r7}
 800370a:	4770      	bx	lr

0800370c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003714:	2300      	movs	r3, #0
 8003716:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800371e:	2b02      	cmp	r3, #2
 8003720:	d005      	beq.n	800372e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2204      	movs	r2, #4
 8003726:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	73fb      	strb	r3, [r7, #15]
 800372c:	e0d6      	b.n	80038dc <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f022 020e 	bic.w	r2, r2, #14
 800373c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f022 0201 	bic.w	r2, r2, #1
 800374c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	461a      	mov	r2, r3
 8003754:	4b64      	ldr	r3, [pc, #400]	; (80038e8 <HAL_DMA_Abort_IT+0x1dc>)
 8003756:	429a      	cmp	r2, r3
 8003758:	d958      	bls.n	800380c <HAL_DMA_Abort_IT+0x100>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a63      	ldr	r2, [pc, #396]	; (80038ec <HAL_DMA_Abort_IT+0x1e0>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d04f      	beq.n	8003804 <HAL_DMA_Abort_IT+0xf8>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a61      	ldr	r2, [pc, #388]	; (80038f0 <HAL_DMA_Abort_IT+0x1e4>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d048      	beq.n	8003800 <HAL_DMA_Abort_IT+0xf4>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a60      	ldr	r2, [pc, #384]	; (80038f4 <HAL_DMA_Abort_IT+0x1e8>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d040      	beq.n	80037fa <HAL_DMA_Abort_IT+0xee>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a5e      	ldr	r2, [pc, #376]	; (80038f8 <HAL_DMA_Abort_IT+0x1ec>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d038      	beq.n	80037f4 <HAL_DMA_Abort_IT+0xe8>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a5d      	ldr	r2, [pc, #372]	; (80038fc <HAL_DMA_Abort_IT+0x1f0>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d030      	beq.n	80037ee <HAL_DMA_Abort_IT+0xe2>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a5b      	ldr	r2, [pc, #364]	; (8003900 <HAL_DMA_Abort_IT+0x1f4>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d028      	beq.n	80037e8 <HAL_DMA_Abort_IT+0xdc>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a53      	ldr	r2, [pc, #332]	; (80038e8 <HAL_DMA_Abort_IT+0x1dc>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d020      	beq.n	80037e2 <HAL_DMA_Abort_IT+0xd6>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a57      	ldr	r2, [pc, #348]	; (8003904 <HAL_DMA_Abort_IT+0x1f8>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d019      	beq.n	80037de <HAL_DMA_Abort_IT+0xd2>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a56      	ldr	r2, [pc, #344]	; (8003908 <HAL_DMA_Abort_IT+0x1fc>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d012      	beq.n	80037da <HAL_DMA_Abort_IT+0xce>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a54      	ldr	r2, [pc, #336]	; (800390c <HAL_DMA_Abort_IT+0x200>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d00a      	beq.n	80037d4 <HAL_DMA_Abort_IT+0xc8>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a53      	ldr	r2, [pc, #332]	; (8003910 <HAL_DMA_Abort_IT+0x204>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d102      	bne.n	80037ce <HAL_DMA_Abort_IT+0xc2>
 80037c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037cc:	e01b      	b.n	8003806 <HAL_DMA_Abort_IT+0xfa>
 80037ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80037d2:	e018      	b.n	8003806 <HAL_DMA_Abort_IT+0xfa>
 80037d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037d8:	e015      	b.n	8003806 <HAL_DMA_Abort_IT+0xfa>
 80037da:	2310      	movs	r3, #16
 80037dc:	e013      	b.n	8003806 <HAL_DMA_Abort_IT+0xfa>
 80037de:	2301      	movs	r3, #1
 80037e0:	e011      	b.n	8003806 <HAL_DMA_Abort_IT+0xfa>
 80037e2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80037e6:	e00e      	b.n	8003806 <HAL_DMA_Abort_IT+0xfa>
 80037e8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80037ec:	e00b      	b.n	8003806 <HAL_DMA_Abort_IT+0xfa>
 80037ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80037f2:	e008      	b.n	8003806 <HAL_DMA_Abort_IT+0xfa>
 80037f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037f8:	e005      	b.n	8003806 <HAL_DMA_Abort_IT+0xfa>
 80037fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037fe:	e002      	b.n	8003806 <HAL_DMA_Abort_IT+0xfa>
 8003800:	2310      	movs	r3, #16
 8003802:	e000      	b.n	8003806 <HAL_DMA_Abort_IT+0xfa>
 8003804:	2301      	movs	r3, #1
 8003806:	4a43      	ldr	r2, [pc, #268]	; (8003914 <HAL_DMA_Abort_IT+0x208>)
 8003808:	6053      	str	r3, [r2, #4]
 800380a:	e057      	b.n	80038bc <HAL_DMA_Abort_IT+0x1b0>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a36      	ldr	r2, [pc, #216]	; (80038ec <HAL_DMA_Abort_IT+0x1e0>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d04f      	beq.n	80038b6 <HAL_DMA_Abort_IT+0x1aa>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a35      	ldr	r2, [pc, #212]	; (80038f0 <HAL_DMA_Abort_IT+0x1e4>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d048      	beq.n	80038b2 <HAL_DMA_Abort_IT+0x1a6>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a33      	ldr	r2, [pc, #204]	; (80038f4 <HAL_DMA_Abort_IT+0x1e8>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d040      	beq.n	80038ac <HAL_DMA_Abort_IT+0x1a0>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a32      	ldr	r2, [pc, #200]	; (80038f8 <HAL_DMA_Abort_IT+0x1ec>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d038      	beq.n	80038a6 <HAL_DMA_Abort_IT+0x19a>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a30      	ldr	r2, [pc, #192]	; (80038fc <HAL_DMA_Abort_IT+0x1f0>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d030      	beq.n	80038a0 <HAL_DMA_Abort_IT+0x194>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a2f      	ldr	r2, [pc, #188]	; (8003900 <HAL_DMA_Abort_IT+0x1f4>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d028      	beq.n	800389a <HAL_DMA_Abort_IT+0x18e>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a26      	ldr	r2, [pc, #152]	; (80038e8 <HAL_DMA_Abort_IT+0x1dc>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d020      	beq.n	8003894 <HAL_DMA_Abort_IT+0x188>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a2b      	ldr	r2, [pc, #172]	; (8003904 <HAL_DMA_Abort_IT+0x1f8>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d019      	beq.n	8003890 <HAL_DMA_Abort_IT+0x184>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a29      	ldr	r2, [pc, #164]	; (8003908 <HAL_DMA_Abort_IT+0x1fc>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d012      	beq.n	800388c <HAL_DMA_Abort_IT+0x180>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a28      	ldr	r2, [pc, #160]	; (800390c <HAL_DMA_Abort_IT+0x200>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d00a      	beq.n	8003886 <HAL_DMA_Abort_IT+0x17a>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a26      	ldr	r2, [pc, #152]	; (8003910 <HAL_DMA_Abort_IT+0x204>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d102      	bne.n	8003880 <HAL_DMA_Abort_IT+0x174>
 800387a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800387e:	e01b      	b.n	80038b8 <HAL_DMA_Abort_IT+0x1ac>
 8003880:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003884:	e018      	b.n	80038b8 <HAL_DMA_Abort_IT+0x1ac>
 8003886:	f44f 7380 	mov.w	r3, #256	; 0x100
 800388a:	e015      	b.n	80038b8 <HAL_DMA_Abort_IT+0x1ac>
 800388c:	2310      	movs	r3, #16
 800388e:	e013      	b.n	80038b8 <HAL_DMA_Abort_IT+0x1ac>
 8003890:	2301      	movs	r3, #1
 8003892:	e011      	b.n	80038b8 <HAL_DMA_Abort_IT+0x1ac>
 8003894:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003898:	e00e      	b.n	80038b8 <HAL_DMA_Abort_IT+0x1ac>
 800389a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800389e:	e00b      	b.n	80038b8 <HAL_DMA_Abort_IT+0x1ac>
 80038a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80038a4:	e008      	b.n	80038b8 <HAL_DMA_Abort_IT+0x1ac>
 80038a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038aa:	e005      	b.n	80038b8 <HAL_DMA_Abort_IT+0x1ac>
 80038ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80038b0:	e002      	b.n	80038b8 <HAL_DMA_Abort_IT+0x1ac>
 80038b2:	2310      	movs	r3, #16
 80038b4:	e000      	b.n	80038b8 <HAL_DMA_Abort_IT+0x1ac>
 80038b6:	2301      	movs	r3, #1
 80038b8:	4a17      	ldr	r2, [pc, #92]	; (8003918 <HAL_DMA_Abort_IT+0x20c>)
 80038ba:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d003      	beq.n	80038dc <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	4798      	blx	r3
    } 
  }
  return status;
 80038dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3710      	adds	r7, #16
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	40020080 	.word	0x40020080
 80038ec:	40020008 	.word	0x40020008
 80038f0:	4002001c 	.word	0x4002001c
 80038f4:	40020030 	.word	0x40020030
 80038f8:	40020044 	.word	0x40020044
 80038fc:	40020058 	.word	0x40020058
 8003900:	4002006c 	.word	0x4002006c
 8003904:	40020408 	.word	0x40020408
 8003908:	4002041c 	.word	0x4002041c
 800390c:	40020430 	.word	0x40020430
 8003910:	40020444 	.word	0x40020444
 8003914:	40020400 	.word	0x40020400
 8003918:	40020000 	.word	0x40020000

0800391c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b08a      	sub	sp, #40	; 0x28
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003926:	2300      	movs	r3, #0
 8003928:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800392a:	2300      	movs	r3, #0
 800392c:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4aa9      	ldr	r2, [pc, #676]	; (8003bd8 <HAL_GPIO_Init+0x2bc>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d01b      	beq.n	800396e <HAL_GPIO_Init+0x52>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4aa8      	ldr	r2, [pc, #672]	; (8003bdc <HAL_GPIO_Init+0x2c0>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d017      	beq.n	800396e <HAL_GPIO_Init+0x52>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4aa7      	ldr	r2, [pc, #668]	; (8003be0 <HAL_GPIO_Init+0x2c4>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d013      	beq.n	800396e <HAL_GPIO_Init+0x52>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4aa6      	ldr	r2, [pc, #664]	; (8003be4 <HAL_GPIO_Init+0x2c8>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d00f      	beq.n	800396e <HAL_GPIO_Init+0x52>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4aa5      	ldr	r2, [pc, #660]	; (8003be8 <HAL_GPIO_Init+0x2cc>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d00b      	beq.n	800396e <HAL_GPIO_Init+0x52>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4aa4      	ldr	r2, [pc, #656]	; (8003bec <HAL_GPIO_Init+0x2d0>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d007      	beq.n	800396e <HAL_GPIO_Init+0x52>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4aa3      	ldr	r2, [pc, #652]	; (8003bf0 <HAL_GPIO_Init+0x2d4>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d003      	beq.n	800396e <HAL_GPIO_Init+0x52>
 8003966:	21bd      	movs	r1, #189	; 0xbd
 8003968:	48a2      	ldr	r0, [pc, #648]	; (8003bf4 <HAL_GPIO_Init+0x2d8>)
 800396a:	f7fe fc69 	bl	8002240 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	b29b      	uxth	r3, r3
 8003974:	2b00      	cmp	r3, #0
 8003976:	d005      	beq.n	8003984 <HAL_GPIO_Init+0x68>
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	0c1b      	lsrs	r3, r3, #16
 800397e:	041b      	lsls	r3, r3, #16
 8003980:	2b00      	cmp	r3, #0
 8003982:	d003      	beq.n	800398c <HAL_GPIO_Init+0x70>
 8003984:	21be      	movs	r1, #190	; 0xbe
 8003986:	489b      	ldr	r0, [pc, #620]	; (8003bf4 <HAL_GPIO_Init+0x2d8>)
 8003988:	f7fe fc5a 	bl	8002240 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	2b00      	cmp	r3, #0
 8003992:	f000 8235 	beq.w	8003e00 <HAL_GPIO_Init+0x4e4>
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	2b01      	cmp	r3, #1
 800399c:	f000 8230 	beq.w	8003e00 <HAL_GPIO_Init+0x4e4>
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	2b11      	cmp	r3, #17
 80039a6:	f000 822b 	beq.w	8003e00 <HAL_GPIO_Init+0x4e4>
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	f000 8226 	beq.w	8003e00 <HAL_GPIO_Init+0x4e4>
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	2b12      	cmp	r3, #18
 80039ba:	f000 8221 	beq.w	8003e00 <HAL_GPIO_Init+0x4e4>
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	4a8d      	ldr	r2, [pc, #564]	; (8003bf8 <HAL_GPIO_Init+0x2dc>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	f000 821b 	beq.w	8003e00 <HAL_GPIO_Init+0x4e4>
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	4a8b      	ldr	r2, [pc, #556]	; (8003bfc <HAL_GPIO_Init+0x2e0>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	f000 8215 	beq.w	8003e00 <HAL_GPIO_Init+0x4e4>
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	4a89      	ldr	r2, [pc, #548]	; (8003c00 <HAL_GPIO_Init+0x2e4>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	f000 820f 	beq.w	8003e00 <HAL_GPIO_Init+0x4e4>
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	4a87      	ldr	r2, [pc, #540]	; (8003c04 <HAL_GPIO_Init+0x2e8>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	f000 8209 	beq.w	8003e00 <HAL_GPIO_Init+0x4e4>
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	4a85      	ldr	r2, [pc, #532]	; (8003c08 <HAL_GPIO_Init+0x2ec>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	f000 8203 	beq.w	8003e00 <HAL_GPIO_Init+0x4e4>
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	4a83      	ldr	r2, [pc, #524]	; (8003c0c <HAL_GPIO_Init+0x2f0>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	f000 81fd 	beq.w	8003e00 <HAL_GPIO_Init+0x4e4>
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	2b03      	cmp	r3, #3
 8003a0c:	f000 81f8 	beq.w	8003e00 <HAL_GPIO_Init+0x4e4>
 8003a10:	21bf      	movs	r1, #191	; 0xbf
 8003a12:	4878      	ldr	r0, [pc, #480]	; (8003bf4 <HAL_GPIO_Init+0x2d8>)
 8003a14:	f7fe fc14 	bl	8002240 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a18:	e1f2      	b.n	8003e00 <HAL_GPIO_Init+0x4e4>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a22:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	69fa      	ldr	r2, [r7, #28]
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003a2e:	69ba      	ldr	r2, [r7, #24]
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	f040 81e1 	bne.w	8003dfa <HAL_GPIO_Init+0x4de>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4a67      	ldr	r2, [pc, #412]	; (8003bd8 <HAL_GPIO_Init+0x2bc>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d01b      	beq.n	8003a78 <HAL_GPIO_Init+0x15c>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	4a66      	ldr	r2, [pc, #408]	; (8003bdc <HAL_GPIO_Init+0x2c0>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d017      	beq.n	8003a78 <HAL_GPIO_Init+0x15c>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4a65      	ldr	r2, [pc, #404]	; (8003be0 <HAL_GPIO_Init+0x2c4>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d013      	beq.n	8003a78 <HAL_GPIO_Init+0x15c>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a64      	ldr	r2, [pc, #400]	; (8003be4 <HAL_GPIO_Init+0x2c8>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d00f      	beq.n	8003a78 <HAL_GPIO_Init+0x15c>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4a63      	ldr	r2, [pc, #396]	; (8003be8 <HAL_GPIO_Init+0x2cc>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d00b      	beq.n	8003a78 <HAL_GPIO_Init+0x15c>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	4a62      	ldr	r2, [pc, #392]	; (8003bec <HAL_GPIO_Init+0x2d0>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d007      	beq.n	8003a78 <HAL_GPIO_Init+0x15c>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	4a61      	ldr	r2, [pc, #388]	; (8003bf0 <HAL_GPIO_Init+0x2d4>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d003      	beq.n	8003a78 <HAL_GPIO_Init+0x15c>
 8003a70:	21cd      	movs	r1, #205	; 0xcd
 8003a72:	4860      	ldr	r0, [pc, #384]	; (8003bf4 <HAL_GPIO_Init+0x2d8>)
 8003a74:	f7fe fbe4 	bl	8002240 <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	4a63      	ldr	r2, [pc, #396]	; (8003c0c <HAL_GPIO_Init+0x2f0>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	f000 80c6 	beq.w	8003c10 <HAL_GPIO_Init+0x2f4>
 8003a84:	4a61      	ldr	r2, [pc, #388]	; (8003c0c <HAL_GPIO_Init+0x2f0>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	f200 80ec 	bhi.w	8003c64 <HAL_GPIO_Init+0x348>
 8003a8c:	4a5c      	ldr	r2, [pc, #368]	; (8003c00 <HAL_GPIO_Init+0x2e4>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	f000 80be 	beq.w	8003c10 <HAL_GPIO_Init+0x2f4>
 8003a94:	4a5a      	ldr	r2, [pc, #360]	; (8003c00 <HAL_GPIO_Init+0x2e4>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	f200 80e4 	bhi.w	8003c64 <HAL_GPIO_Init+0x348>
 8003a9c:	4a5a      	ldr	r2, [pc, #360]	; (8003c08 <HAL_GPIO_Init+0x2ec>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	f000 80b6 	beq.w	8003c10 <HAL_GPIO_Init+0x2f4>
 8003aa4:	4a58      	ldr	r2, [pc, #352]	; (8003c08 <HAL_GPIO_Init+0x2ec>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	f200 80dc 	bhi.w	8003c64 <HAL_GPIO_Init+0x348>
 8003aac:	4a53      	ldr	r2, [pc, #332]	; (8003bfc <HAL_GPIO_Init+0x2e0>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	f000 80ae 	beq.w	8003c10 <HAL_GPIO_Init+0x2f4>
 8003ab4:	4a51      	ldr	r2, [pc, #324]	; (8003bfc <HAL_GPIO_Init+0x2e0>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	f200 80d4 	bhi.w	8003c64 <HAL_GPIO_Init+0x348>
 8003abc:	4a51      	ldr	r2, [pc, #324]	; (8003c04 <HAL_GPIO_Init+0x2e8>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	f000 80a6 	beq.w	8003c10 <HAL_GPIO_Init+0x2f4>
 8003ac4:	4a4f      	ldr	r2, [pc, #316]	; (8003c04 <HAL_GPIO_Init+0x2e8>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	f200 80cc 	bhi.w	8003c64 <HAL_GPIO_Init+0x348>
 8003acc:	2b12      	cmp	r3, #18
 8003ace:	d82b      	bhi.n	8003b28 <HAL_GPIO_Init+0x20c>
 8003ad0:	2b12      	cmp	r3, #18
 8003ad2:	f200 80c7 	bhi.w	8003c64 <HAL_GPIO_Init+0x348>
 8003ad6:	a201      	add	r2, pc, #4	; (adr r2, 8003adc <HAL_GPIO_Init+0x1c0>)
 8003ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003adc:	08003c11 	.word	0x08003c11
 8003ae0:	08003b31 	.word	0x08003b31
 8003ae4:	08003b83 	.word	0x08003b83
 8003ae8:	08003c5f 	.word	0x08003c5f
 8003aec:	08003c65 	.word	0x08003c65
 8003af0:	08003c65 	.word	0x08003c65
 8003af4:	08003c65 	.word	0x08003c65
 8003af8:	08003c65 	.word	0x08003c65
 8003afc:	08003c65 	.word	0x08003c65
 8003b00:	08003c65 	.word	0x08003c65
 8003b04:	08003c65 	.word	0x08003c65
 8003b08:	08003c65 	.word	0x08003c65
 8003b0c:	08003c65 	.word	0x08003c65
 8003b10:	08003c65 	.word	0x08003c65
 8003b14:	08003c65 	.word	0x08003c65
 8003b18:	08003c65 	.word	0x08003c65
 8003b1c:	08003c65 	.word	0x08003c65
 8003b20:	08003b59 	.word	0x08003b59
 8003b24:	08003bad 	.word	0x08003bad
 8003b28:	4a33      	ldr	r2, [pc, #204]	; (8003bf8 <HAL_GPIO_Init+0x2dc>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d070      	beq.n	8003c10 <HAL_GPIO_Init+0x2f4>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003b2e:	e099      	b.n	8003c64 <HAL_GPIO_Init+0x348>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	2b02      	cmp	r3, #2
 8003b36:	d00b      	beq.n	8003b50 <HAL_GPIO_Init+0x234>
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d007      	beq.n	8003b50 <HAL_GPIO_Init+0x234>
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	2b03      	cmp	r3, #3
 8003b46:	d003      	beq.n	8003b50 <HAL_GPIO_Init+0x234>
 8003b48:	21d5      	movs	r1, #213	; 0xd5
 8003b4a:	482a      	ldr	r0, [pc, #168]	; (8003bf4 <HAL_GPIO_Init+0x2d8>)
 8003b4c:	f7fe fb78 	bl	8002240 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	623b      	str	r3, [r7, #32]
          break;
 8003b56:	e086      	b.n	8003c66 <HAL_GPIO_Init+0x34a>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	2b02      	cmp	r3, #2
 8003b5e:	d00b      	beq.n	8003b78 <HAL_GPIO_Init+0x25c>
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d007      	beq.n	8003b78 <HAL_GPIO_Init+0x25c>
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	2b03      	cmp	r3, #3
 8003b6e:	d003      	beq.n	8003b78 <HAL_GPIO_Init+0x25c>
 8003b70:	21dc      	movs	r1, #220	; 0xdc
 8003b72:	4820      	ldr	r0, [pc, #128]	; (8003bf4 <HAL_GPIO_Init+0x2d8>)
 8003b74:	f7fe fb64 	bl	8002240 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	3304      	adds	r3, #4
 8003b7e:	623b      	str	r3, [r7, #32]
          break;
 8003b80:	e071      	b.n	8003c66 <HAL_GPIO_Init+0x34a>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d00b      	beq.n	8003ba2 <HAL_GPIO_Init+0x286>
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d007      	beq.n	8003ba2 <HAL_GPIO_Init+0x286>
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	2b03      	cmp	r3, #3
 8003b98:	d003      	beq.n	8003ba2 <HAL_GPIO_Init+0x286>
 8003b9a:	21e3      	movs	r1, #227	; 0xe3
 8003b9c:	4815      	ldr	r0, [pc, #84]	; (8003bf4 <HAL_GPIO_Init+0x2d8>)
 8003b9e:	f7fe fb4f 	bl	8002240 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	3308      	adds	r3, #8
 8003ba8:	623b      	str	r3, [r7, #32]
          break;
 8003baa:	e05c      	b.n	8003c66 <HAL_GPIO_Init+0x34a>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d00b      	beq.n	8003bcc <HAL_GPIO_Init+0x2b0>
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d007      	beq.n	8003bcc <HAL_GPIO_Init+0x2b0>
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	2b03      	cmp	r3, #3
 8003bc2:	d003      	beq.n	8003bcc <HAL_GPIO_Init+0x2b0>
 8003bc4:	21ea      	movs	r1, #234	; 0xea
 8003bc6:	480b      	ldr	r0, [pc, #44]	; (8003bf4 <HAL_GPIO_Init+0x2d8>)
 8003bc8:	f7fe fb3a 	bl	8002240 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	330c      	adds	r3, #12
 8003bd2:	623b      	str	r3, [r7, #32]
          break;
 8003bd4:	e047      	b.n	8003c66 <HAL_GPIO_Init+0x34a>
 8003bd6:	bf00      	nop
 8003bd8:	40010800 	.word	0x40010800
 8003bdc:	40010c00 	.word	0x40010c00
 8003be0:	40011000 	.word	0x40011000
 8003be4:	40011400 	.word	0x40011400
 8003be8:	40011800 	.word	0x40011800
 8003bec:	40011c00 	.word	0x40011c00
 8003bf0:	40012000 	.word	0x40012000
 8003bf4:	0800ec48 	.word	0x0800ec48
 8003bf8:	10110000 	.word	0x10110000
 8003bfc:	10210000 	.word	0x10210000
 8003c00:	10310000 	.word	0x10310000
 8003c04:	10120000 	.word	0x10120000
 8003c08:	10220000 	.word	0x10220000
 8003c0c:	10320000 	.word	0x10320000
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d00b      	beq.n	8003c30 <HAL_GPIO_Init+0x314>
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d007      	beq.n	8003c30 <HAL_GPIO_Init+0x314>
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d003      	beq.n	8003c30 <HAL_GPIO_Init+0x314>
 8003c28:	21f7      	movs	r1, #247	; 0xf7
 8003c2a:	487c      	ldr	r0, [pc, #496]	; (8003e1c <HAL_GPIO_Init+0x500>)
 8003c2c:	f7fe fb08 	bl	8002240 <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d102      	bne.n	8003c3e <HAL_GPIO_Init+0x322>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003c38:	2304      	movs	r3, #4
 8003c3a:	623b      	str	r3, [r7, #32]
          break;
 8003c3c:	e013      	b.n	8003c66 <HAL_GPIO_Init+0x34a>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d105      	bne.n	8003c52 <HAL_GPIO_Init+0x336>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003c46:	2308      	movs	r3, #8
 8003c48:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	69fa      	ldr	r2, [r7, #28]
 8003c4e:	611a      	str	r2, [r3, #16]
          break;
 8003c50:	e009      	b.n	8003c66 <HAL_GPIO_Init+0x34a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003c52:	2308      	movs	r3, #8
 8003c54:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	69fa      	ldr	r2, [r7, #28]
 8003c5a:	615a      	str	r2, [r3, #20]
          break;
 8003c5c:	e003      	b.n	8003c66 <HAL_GPIO_Init+0x34a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	623b      	str	r3, [r7, #32]
          break;
 8003c62:	e000      	b.n	8003c66 <HAL_GPIO_Init+0x34a>
          break;
 8003c64:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003c66:	69bb      	ldr	r3, [r7, #24]
 8003c68:	2bff      	cmp	r3, #255	; 0xff
 8003c6a:	d801      	bhi.n	8003c70 <HAL_GPIO_Init+0x354>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	e001      	b.n	8003c74 <HAL_GPIO_Init+0x358>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	3304      	adds	r3, #4
 8003c74:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	2bff      	cmp	r3, #255	; 0xff
 8003c7a:	d802      	bhi.n	8003c82 <HAL_GPIO_Init+0x366>
 8003c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	e002      	b.n	8003c88 <HAL_GPIO_Init+0x36c>
 8003c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c84:	3b08      	subs	r3, #8
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	210f      	movs	r1, #15
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	fa01 f303 	lsl.w	r3, r1, r3
 8003c96:	43db      	mvns	r3, r3
 8003c98:	401a      	ands	r2, r3
 8003c9a:	6a39      	ldr	r1, [r7, #32]
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8003ca2:	431a      	orrs	r2, r3
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	f000 80a2 	beq.w	8003dfa <HAL_GPIO_Init+0x4de>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003cb6:	4b5a      	ldr	r3, [pc, #360]	; (8003e20 <HAL_GPIO_Init+0x504>)
 8003cb8:	699b      	ldr	r3, [r3, #24]
 8003cba:	4a59      	ldr	r2, [pc, #356]	; (8003e20 <HAL_GPIO_Init+0x504>)
 8003cbc:	f043 0301 	orr.w	r3, r3, #1
 8003cc0:	6193      	str	r3, [r2, #24]
 8003cc2:	4b57      	ldr	r3, [pc, #348]	; (8003e20 <HAL_GPIO_Init+0x504>)
 8003cc4:	699b      	ldr	r3, [r3, #24]
 8003cc6:	f003 0301 	and.w	r3, r3, #1
 8003cca:	60bb      	str	r3, [r7, #8]
 8003ccc:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003cce:	4a55      	ldr	r2, [pc, #340]	; (8003e24 <HAL_GPIO_Init+0x508>)
 8003cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd2:	089b      	lsrs	r3, r3, #2
 8003cd4:	3302      	adds	r3, #2
 8003cd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cda:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cde:	f003 0303 	and.w	r3, r3, #3
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	220f      	movs	r2, #15
 8003ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cea:	43db      	mvns	r3, r3
 8003cec:	68fa      	ldr	r2, [r7, #12]
 8003cee:	4013      	ands	r3, r2
 8003cf0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a4c      	ldr	r2, [pc, #304]	; (8003e28 <HAL_GPIO_Init+0x50c>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d01f      	beq.n	8003d3a <HAL_GPIO_Init+0x41e>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a4b      	ldr	r2, [pc, #300]	; (8003e2c <HAL_GPIO_Init+0x510>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d019      	beq.n	8003d36 <HAL_GPIO_Init+0x41a>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a4a      	ldr	r2, [pc, #296]	; (8003e30 <HAL_GPIO_Init+0x514>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d013      	beq.n	8003d32 <HAL_GPIO_Init+0x416>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4a49      	ldr	r2, [pc, #292]	; (8003e34 <HAL_GPIO_Init+0x518>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d00d      	beq.n	8003d2e <HAL_GPIO_Init+0x412>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a48      	ldr	r2, [pc, #288]	; (8003e38 <HAL_GPIO_Init+0x51c>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d007      	beq.n	8003d2a <HAL_GPIO_Init+0x40e>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4a47      	ldr	r2, [pc, #284]	; (8003e3c <HAL_GPIO_Init+0x520>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d101      	bne.n	8003d26 <HAL_GPIO_Init+0x40a>
 8003d22:	2305      	movs	r3, #5
 8003d24:	e00a      	b.n	8003d3c <HAL_GPIO_Init+0x420>
 8003d26:	2306      	movs	r3, #6
 8003d28:	e008      	b.n	8003d3c <HAL_GPIO_Init+0x420>
 8003d2a:	2304      	movs	r3, #4
 8003d2c:	e006      	b.n	8003d3c <HAL_GPIO_Init+0x420>
 8003d2e:	2303      	movs	r3, #3
 8003d30:	e004      	b.n	8003d3c <HAL_GPIO_Init+0x420>
 8003d32:	2302      	movs	r3, #2
 8003d34:	e002      	b.n	8003d3c <HAL_GPIO_Init+0x420>
 8003d36:	2301      	movs	r3, #1
 8003d38:	e000      	b.n	8003d3c <HAL_GPIO_Init+0x420>
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d3e:	f002 0203 	and.w	r2, r2, #3
 8003d42:	0092      	lsls	r2, r2, #2
 8003d44:	4093      	lsls	r3, r2
 8003d46:	68fa      	ldr	r2, [r7, #12]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003d4c:	4935      	ldr	r1, [pc, #212]	; (8003e24 <HAL_GPIO_Init+0x508>)
 8003d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d50:	089b      	lsrs	r3, r3, #2
 8003d52:	3302      	adds	r3, #2
 8003d54:	68fa      	ldr	r2, [r7, #12]
 8003d56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d006      	beq.n	8003d74 <HAL_GPIO_Init+0x458>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003d66:	4b36      	ldr	r3, [pc, #216]	; (8003e40 <HAL_GPIO_Init+0x524>)
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	4935      	ldr	r1, [pc, #212]	; (8003e40 <HAL_GPIO_Init+0x524>)
 8003d6c:	69bb      	ldr	r3, [r7, #24]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	600b      	str	r3, [r1, #0]
 8003d72:	e006      	b.n	8003d82 <HAL_GPIO_Init+0x466>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003d74:	4b32      	ldr	r3, [pc, #200]	; (8003e40 <HAL_GPIO_Init+0x524>)
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	69bb      	ldr	r3, [r7, #24]
 8003d7a:	43db      	mvns	r3, r3
 8003d7c:	4930      	ldr	r1, [pc, #192]	; (8003e40 <HAL_GPIO_Init+0x524>)
 8003d7e:	4013      	ands	r3, r2
 8003d80:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d006      	beq.n	8003d9c <HAL_GPIO_Init+0x480>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003d8e:	4b2c      	ldr	r3, [pc, #176]	; (8003e40 <HAL_GPIO_Init+0x524>)
 8003d90:	685a      	ldr	r2, [r3, #4]
 8003d92:	492b      	ldr	r1, [pc, #172]	; (8003e40 <HAL_GPIO_Init+0x524>)
 8003d94:	69bb      	ldr	r3, [r7, #24]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	604b      	str	r3, [r1, #4]
 8003d9a:	e006      	b.n	8003daa <HAL_GPIO_Init+0x48e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003d9c:	4b28      	ldr	r3, [pc, #160]	; (8003e40 <HAL_GPIO_Init+0x524>)
 8003d9e:	685a      	ldr	r2, [r3, #4]
 8003da0:	69bb      	ldr	r3, [r7, #24]
 8003da2:	43db      	mvns	r3, r3
 8003da4:	4926      	ldr	r1, [pc, #152]	; (8003e40 <HAL_GPIO_Init+0x524>)
 8003da6:	4013      	ands	r3, r2
 8003da8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d006      	beq.n	8003dc4 <HAL_GPIO_Init+0x4a8>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003db6:	4b22      	ldr	r3, [pc, #136]	; (8003e40 <HAL_GPIO_Init+0x524>)
 8003db8:	689a      	ldr	r2, [r3, #8]
 8003dba:	4921      	ldr	r1, [pc, #132]	; (8003e40 <HAL_GPIO_Init+0x524>)
 8003dbc:	69bb      	ldr	r3, [r7, #24]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	608b      	str	r3, [r1, #8]
 8003dc2:	e006      	b.n	8003dd2 <HAL_GPIO_Init+0x4b6>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003dc4:	4b1e      	ldr	r3, [pc, #120]	; (8003e40 <HAL_GPIO_Init+0x524>)
 8003dc6:	689a      	ldr	r2, [r3, #8]
 8003dc8:	69bb      	ldr	r3, [r7, #24]
 8003dca:	43db      	mvns	r3, r3
 8003dcc:	491c      	ldr	r1, [pc, #112]	; (8003e40 <HAL_GPIO_Init+0x524>)
 8003dce:	4013      	ands	r3, r2
 8003dd0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d006      	beq.n	8003dec <HAL_GPIO_Init+0x4d0>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003dde:	4b18      	ldr	r3, [pc, #96]	; (8003e40 <HAL_GPIO_Init+0x524>)
 8003de0:	68da      	ldr	r2, [r3, #12]
 8003de2:	4917      	ldr	r1, [pc, #92]	; (8003e40 <HAL_GPIO_Init+0x524>)
 8003de4:	69bb      	ldr	r3, [r7, #24]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	60cb      	str	r3, [r1, #12]
 8003dea:	e006      	b.n	8003dfa <HAL_GPIO_Init+0x4de>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003dec:	4b14      	ldr	r3, [pc, #80]	; (8003e40 <HAL_GPIO_Init+0x524>)
 8003dee:	68da      	ldr	r2, [r3, #12]
 8003df0:	69bb      	ldr	r3, [r7, #24]
 8003df2:	43db      	mvns	r3, r3
 8003df4:	4912      	ldr	r1, [pc, #72]	; (8003e40 <HAL_GPIO_Init+0x524>)
 8003df6:	4013      	ands	r3, r2
 8003df8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfc:	3301      	adds	r3, #1
 8003dfe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e06:	fa22 f303 	lsr.w	r3, r2, r3
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	f47f ae05 	bne.w	8003a1a <HAL_GPIO_Init+0xfe>
  }
}
 8003e10:	bf00      	nop
 8003e12:	bf00      	nop
 8003e14:	3728      	adds	r7, #40	; 0x28
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	0800ec48 	.word	0x0800ec48
 8003e20:	40021000 	.word	0x40021000
 8003e24:	40010000 	.word	0x40010000
 8003e28:	40010800 	.word	0x40010800
 8003e2c:	40010c00 	.word	0x40010c00
 8003e30:	40011000 	.word	0x40011000
 8003e34:	40011400 	.word	0x40011400
 8003e38:	40011800 	.word	0x40011800
 8003e3c:	40011c00 	.word	0x40011c00
 8003e40:	40010400 	.word	0x40010400

08003e44 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	460b      	mov	r3, r1
 8003e4e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003e50:	887b      	ldrh	r3, [r7, #2]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d004      	beq.n	8003e60 <HAL_GPIO_ReadPin+0x1c>
 8003e56:	887b      	ldrh	r3, [r7, #2]
 8003e58:	0c1b      	lsrs	r3, r3, #16
 8003e5a:	041b      	lsls	r3, r3, #16
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d004      	beq.n	8003e6a <HAL_GPIO_ReadPin+0x26>
 8003e60:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 8003e64:	4809      	ldr	r0, [pc, #36]	; (8003e8c <HAL_GPIO_ReadPin+0x48>)
 8003e66:	f7fe f9eb 	bl	8002240 <assert_failed>

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	689a      	ldr	r2, [r3, #8]
 8003e6e:	887b      	ldrh	r3, [r7, #2]
 8003e70:	4013      	ands	r3, r2
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d002      	beq.n	8003e7c <HAL_GPIO_ReadPin+0x38>
  {
    bitstatus = GPIO_PIN_SET;
 8003e76:	2301      	movs	r3, #1
 8003e78:	73fb      	strb	r3, [r7, #15]
 8003e7a:	e001      	b.n	8003e80 <HAL_GPIO_ReadPin+0x3c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3710      	adds	r7, #16
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	0800ec48 	.word	0x0800ec48

08003e90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b082      	sub	sp, #8
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	460b      	mov	r3, r1
 8003e9a:	807b      	strh	r3, [r7, #2]
 8003e9c:	4613      	mov	r3, r2
 8003e9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003ea0:	887b      	ldrh	r3, [r7, #2]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d004      	beq.n	8003eb0 <HAL_GPIO_WritePin+0x20>
 8003ea6:	887b      	ldrh	r3, [r7, #2]
 8003ea8:	0c1b      	lsrs	r3, r3, #16
 8003eaa:	041b      	lsls	r3, r3, #16
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d004      	beq.n	8003eba <HAL_GPIO_WritePin+0x2a>
 8003eb0:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8003eb4:	480e      	ldr	r0, [pc, #56]	; (8003ef0 <HAL_GPIO_WritePin+0x60>)
 8003eb6:	f7fe f9c3 	bl	8002240 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8003eba:	787b      	ldrb	r3, [r7, #1]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d007      	beq.n	8003ed0 <HAL_GPIO_WritePin+0x40>
 8003ec0:	787b      	ldrb	r3, [r7, #1]
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d004      	beq.n	8003ed0 <HAL_GPIO_WritePin+0x40>
 8003ec6:	f240 11d5 	movw	r1, #469	; 0x1d5
 8003eca:	4809      	ldr	r0, [pc, #36]	; (8003ef0 <HAL_GPIO_WritePin+0x60>)
 8003ecc:	f7fe f9b8 	bl	8002240 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8003ed0:	787b      	ldrb	r3, [r7, #1]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d003      	beq.n	8003ede <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ed6:	887a      	ldrh	r2, [r7, #2]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003edc:	e003      	b.n	8003ee6 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003ede:	887b      	ldrh	r3, [r7, #2]
 8003ee0:	041a      	lsls	r2, r3, #16
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	611a      	str	r2, [r3, #16]
}
 8003ee6:	bf00      	nop
 8003ee8:	3708      	adds	r7, #8
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	0800ec48 	.word	0x0800ec48

08003ef4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	460b      	mov	r3, r1
 8003efe:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003f00:	887b      	ldrh	r3, [r7, #2]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d004      	beq.n	8003f10 <HAL_GPIO_TogglePin+0x1c>
 8003f06:	887b      	ldrh	r3, [r7, #2]
 8003f08:	0c1b      	lsrs	r3, r3, #16
 8003f0a:	041b      	lsls	r3, r3, #16
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d004      	beq.n	8003f1a <HAL_GPIO_TogglePin+0x26>
 8003f10:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 8003f14:	480a      	ldr	r0, [pc, #40]	; (8003f40 <HAL_GPIO_TogglePin+0x4c>)
 8003f16:	f7fe f993 	bl	8002240 <assert_failed>

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003f20:	887a      	ldrh	r2, [r7, #2]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	4013      	ands	r3, r2
 8003f26:	041a      	lsls	r2, r3, #16
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	43d9      	mvns	r1, r3
 8003f2c:	887b      	ldrh	r3, [r7, #2]
 8003f2e:	400b      	ands	r3, r1
 8003f30:	431a      	orrs	r2, r3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	611a      	str	r2, [r3, #16]
}
 8003f36:	bf00      	nop
 8003f38:	3710      	adds	r7, #16
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	0800ec48 	.word	0x0800ec48

08003f44 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003f44:	b480      	push	{r7}
 8003f46:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8003f48:	4b03      	ldr	r3, [pc, #12]	; (8003f58 <HAL_PWR_EnableBkUpAccess+0x14>)
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	601a      	str	r2, [r3, #0]
}
 8003f4e:	bf00      	nop
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bc80      	pop	{r7}
 8003f54:	4770      	bx	lr
 8003f56:	bf00      	nop
 8003f58:	420e0020 	.word	0x420e0020

08003f5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b086      	sub	sp, #24
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d101      	bne.n	8003f6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e35c      	b.n	8004628 <HAL_RCC_OscConfig+0x6cc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d01c      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x54>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 0301 	and.w	r3, r3, #1
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d116      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x54>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0302 	and.w	r3, r3, #2
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d110      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x54>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0308 	and.w	r3, r3, #8
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d10a      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x54>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0304 	and.w	r3, r3, #4
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d104      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x54>
 8003fa6:	f240 1167 	movw	r1, #359	; 0x167
 8003faa:	48a5      	ldr	r0, [pc, #660]	; (8004240 <HAL_RCC_OscConfig+0x2e4>)
 8003fac:	f7fe f948 	bl	8002240 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0301 	and.w	r3, r3, #1
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	f000 809a 	beq.w	80040f2 <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d00e      	beq.n	8003fe4 <HAL_RCC_OscConfig+0x88>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fce:	d009      	beq.n	8003fe4 <HAL_RCC_OscConfig+0x88>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fd8:	d004      	beq.n	8003fe4 <HAL_RCC_OscConfig+0x88>
 8003fda:	f240 116d 	movw	r1, #365	; 0x16d
 8003fde:	4898      	ldr	r0, [pc, #608]	; (8004240 <HAL_RCC_OscConfig+0x2e4>)
 8003fe0:	f7fe f92e 	bl	8002240 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003fe4:	4b97      	ldr	r3, [pc, #604]	; (8004244 <HAL_RCC_OscConfig+0x2e8>)
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	f003 030c 	and.w	r3, r3, #12
 8003fec:	2b04      	cmp	r3, #4
 8003fee:	d00c      	beq.n	800400a <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003ff0:	4b94      	ldr	r3, [pc, #592]	; (8004244 <HAL_RCC_OscConfig+0x2e8>)
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	f003 030c 	and.w	r3, r3, #12
 8003ff8:	2b08      	cmp	r3, #8
 8003ffa:	d112      	bne.n	8004022 <HAL_RCC_OscConfig+0xc6>
 8003ffc:	4b91      	ldr	r3, [pc, #580]	; (8004244 <HAL_RCC_OscConfig+0x2e8>)
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004004:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004008:	d10b      	bne.n	8004022 <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800400a:	4b8e      	ldr	r3, [pc, #568]	; (8004244 <HAL_RCC_OscConfig+0x2e8>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004012:	2b00      	cmp	r3, #0
 8004014:	d06c      	beq.n	80040f0 <HAL_RCC_OscConfig+0x194>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d168      	bne.n	80040f0 <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e302      	b.n	8004628 <HAL_RCC_OscConfig+0x6cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800402a:	d106      	bne.n	800403a <HAL_RCC_OscConfig+0xde>
 800402c:	4b85      	ldr	r3, [pc, #532]	; (8004244 <HAL_RCC_OscConfig+0x2e8>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a84      	ldr	r2, [pc, #528]	; (8004244 <HAL_RCC_OscConfig+0x2e8>)
 8004032:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004036:	6013      	str	r3, [r2, #0]
 8004038:	e02e      	b.n	8004098 <HAL_RCC_OscConfig+0x13c>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d10c      	bne.n	800405c <HAL_RCC_OscConfig+0x100>
 8004042:	4b80      	ldr	r3, [pc, #512]	; (8004244 <HAL_RCC_OscConfig+0x2e8>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a7f      	ldr	r2, [pc, #508]	; (8004244 <HAL_RCC_OscConfig+0x2e8>)
 8004048:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800404c:	6013      	str	r3, [r2, #0]
 800404e:	4b7d      	ldr	r3, [pc, #500]	; (8004244 <HAL_RCC_OscConfig+0x2e8>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a7c      	ldr	r2, [pc, #496]	; (8004244 <HAL_RCC_OscConfig+0x2e8>)
 8004054:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004058:	6013      	str	r3, [r2, #0]
 800405a:	e01d      	b.n	8004098 <HAL_RCC_OscConfig+0x13c>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004064:	d10c      	bne.n	8004080 <HAL_RCC_OscConfig+0x124>
 8004066:	4b77      	ldr	r3, [pc, #476]	; (8004244 <HAL_RCC_OscConfig+0x2e8>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a76      	ldr	r2, [pc, #472]	; (8004244 <HAL_RCC_OscConfig+0x2e8>)
 800406c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004070:	6013      	str	r3, [r2, #0]
 8004072:	4b74      	ldr	r3, [pc, #464]	; (8004244 <HAL_RCC_OscConfig+0x2e8>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a73      	ldr	r2, [pc, #460]	; (8004244 <HAL_RCC_OscConfig+0x2e8>)
 8004078:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800407c:	6013      	str	r3, [r2, #0]
 800407e:	e00b      	b.n	8004098 <HAL_RCC_OscConfig+0x13c>
 8004080:	4b70      	ldr	r3, [pc, #448]	; (8004244 <HAL_RCC_OscConfig+0x2e8>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a6f      	ldr	r2, [pc, #444]	; (8004244 <HAL_RCC_OscConfig+0x2e8>)
 8004086:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800408a:	6013      	str	r3, [r2, #0]
 800408c:	4b6d      	ldr	r3, [pc, #436]	; (8004244 <HAL_RCC_OscConfig+0x2e8>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a6c      	ldr	r2, [pc, #432]	; (8004244 <HAL_RCC_OscConfig+0x2e8>)
 8004092:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004096:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d013      	beq.n	80040c8 <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040a0:	f7fe fd9e 	bl	8002be0 <HAL_GetTick>
 80040a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040a6:	e008      	b.n	80040ba <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040a8:	f7fe fd9a 	bl	8002be0 <HAL_GetTick>
 80040ac:	4602      	mov	r2, r0
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	2b64      	cmp	r3, #100	; 0x64
 80040b4:	d901      	bls.n	80040ba <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 80040b6:	2303      	movs	r3, #3
 80040b8:	e2b6      	b.n	8004628 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040ba:	4b62      	ldr	r3, [pc, #392]	; (8004244 <HAL_RCC_OscConfig+0x2e8>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d0f0      	beq.n	80040a8 <HAL_RCC_OscConfig+0x14c>
 80040c6:	e014      	b.n	80040f2 <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040c8:	f7fe fd8a 	bl	8002be0 <HAL_GetTick>
 80040cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040ce:	e008      	b.n	80040e2 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040d0:	f7fe fd86 	bl	8002be0 <HAL_GetTick>
 80040d4:	4602      	mov	r2, r0
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	2b64      	cmp	r3, #100	; 0x64
 80040dc:	d901      	bls.n	80040e2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80040de:	2303      	movs	r3, #3
 80040e0:	e2a2      	b.n	8004628 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040e2:	4b58      	ldr	r3, [pc, #352]	; (8004244 <HAL_RCC_OscConfig+0x2e8>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d1f0      	bne.n	80040d0 <HAL_RCC_OscConfig+0x174>
 80040ee:	e000      	b.n	80040f2 <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 0302 	and.w	r3, r3, #2
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d079      	beq.n	80041f2 <HAL_RCC_OscConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	691b      	ldr	r3, [r3, #16]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d008      	beq.n	8004118 <HAL_RCC_OscConfig+0x1bc>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	2b01      	cmp	r3, #1
 800410c:	d004      	beq.n	8004118 <HAL_RCC_OscConfig+0x1bc>
 800410e:	f240 11a1 	movw	r1, #417	; 0x1a1
 8004112:	484b      	ldr	r0, [pc, #300]	; (8004240 <HAL_RCC_OscConfig+0x2e4>)
 8004114:	f7fe f894 	bl	8002240 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	695b      	ldr	r3, [r3, #20]
 800411c:	2b1f      	cmp	r3, #31
 800411e:	d904      	bls.n	800412a <HAL_RCC_OscConfig+0x1ce>
 8004120:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 8004124:	4846      	ldr	r0, [pc, #280]	; (8004240 <HAL_RCC_OscConfig+0x2e4>)
 8004126:	f7fe f88b 	bl	8002240 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800412a:	4b46      	ldr	r3, [pc, #280]	; (8004244 <HAL_RCC_OscConfig+0x2e8>)
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	f003 030c 	and.w	r3, r3, #12
 8004132:	2b00      	cmp	r3, #0
 8004134:	d00b      	beq.n	800414e <HAL_RCC_OscConfig+0x1f2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004136:	4b43      	ldr	r3, [pc, #268]	; (8004244 <HAL_RCC_OscConfig+0x2e8>)
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	f003 030c 	and.w	r3, r3, #12
 800413e:	2b08      	cmp	r3, #8
 8004140:	d11c      	bne.n	800417c <HAL_RCC_OscConfig+0x220>
 8004142:	4b40      	ldr	r3, [pc, #256]	; (8004244 <HAL_RCC_OscConfig+0x2e8>)
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d116      	bne.n	800417c <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800414e:	4b3d      	ldr	r3, [pc, #244]	; (8004244 <HAL_RCC_OscConfig+0x2e8>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0302 	and.w	r3, r3, #2
 8004156:	2b00      	cmp	r3, #0
 8004158:	d005      	beq.n	8004166 <HAL_RCC_OscConfig+0x20a>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	2b01      	cmp	r3, #1
 8004160:	d001      	beq.n	8004166 <HAL_RCC_OscConfig+0x20a>
      {
        return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e260      	b.n	8004628 <HAL_RCC_OscConfig+0x6cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004166:	4b37      	ldr	r3, [pc, #220]	; (8004244 <HAL_RCC_OscConfig+0x2e8>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	695b      	ldr	r3, [r3, #20]
 8004172:	00db      	lsls	r3, r3, #3
 8004174:	4933      	ldr	r1, [pc, #204]	; (8004244 <HAL_RCC_OscConfig+0x2e8>)
 8004176:	4313      	orrs	r3, r2
 8004178:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800417a:	e03a      	b.n	80041f2 <HAL_RCC_OscConfig+0x296>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	691b      	ldr	r3, [r3, #16]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d020      	beq.n	80041c6 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004184:	4b30      	ldr	r3, [pc, #192]	; (8004248 <HAL_RCC_OscConfig+0x2ec>)
 8004186:	2201      	movs	r2, #1
 8004188:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800418a:	f7fe fd29 	bl	8002be0 <HAL_GetTick>
 800418e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004190:	e008      	b.n	80041a4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004192:	f7fe fd25 	bl	8002be0 <HAL_GetTick>
 8004196:	4602      	mov	r2, r0
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	2b02      	cmp	r3, #2
 800419e:	d901      	bls.n	80041a4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80041a0:	2303      	movs	r3, #3
 80041a2:	e241      	b.n	8004628 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041a4:	4b27      	ldr	r3, [pc, #156]	; (8004244 <HAL_RCC_OscConfig+0x2e8>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0302 	and.w	r3, r3, #2
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d0f0      	beq.n	8004192 <HAL_RCC_OscConfig+0x236>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041b0:	4b24      	ldr	r3, [pc, #144]	; (8004244 <HAL_RCC_OscConfig+0x2e8>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	695b      	ldr	r3, [r3, #20]
 80041bc:	00db      	lsls	r3, r3, #3
 80041be:	4921      	ldr	r1, [pc, #132]	; (8004244 <HAL_RCC_OscConfig+0x2e8>)
 80041c0:	4313      	orrs	r3, r2
 80041c2:	600b      	str	r3, [r1, #0]
 80041c4:	e015      	b.n	80041f2 <HAL_RCC_OscConfig+0x296>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041c6:	4b20      	ldr	r3, [pc, #128]	; (8004248 <HAL_RCC_OscConfig+0x2ec>)
 80041c8:	2200      	movs	r2, #0
 80041ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041cc:	f7fe fd08 	bl	8002be0 <HAL_GetTick>
 80041d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041d2:	e008      	b.n	80041e6 <HAL_RCC_OscConfig+0x28a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041d4:	f7fe fd04 	bl	8002be0 <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	2b02      	cmp	r3, #2
 80041e0:	d901      	bls.n	80041e6 <HAL_RCC_OscConfig+0x28a>
          {
            return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e220      	b.n	8004628 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041e6:	4b17      	ldr	r3, [pc, #92]	; (8004244 <HAL_RCC_OscConfig+0x2e8>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0302 	and.w	r3, r3, #2
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d1f0      	bne.n	80041d4 <HAL_RCC_OscConfig+0x278>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 0308 	and.w	r3, r3, #8
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d048      	beq.n	8004290 <HAL_RCC_OscConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	699b      	ldr	r3, [r3, #24]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d008      	beq.n	8004218 <HAL_RCC_OscConfig+0x2bc>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	699b      	ldr	r3, [r3, #24]
 800420a:	2b01      	cmp	r3, #1
 800420c:	d004      	beq.n	8004218 <HAL_RCC_OscConfig+0x2bc>
 800420e:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8004212:	480b      	ldr	r0, [pc, #44]	; (8004240 <HAL_RCC_OscConfig+0x2e4>)
 8004214:	f7fe f814 	bl	8002240 <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	699b      	ldr	r3, [r3, #24]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d021      	beq.n	8004264 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004220:	4b0a      	ldr	r3, [pc, #40]	; (800424c <HAL_RCC_OscConfig+0x2f0>)
 8004222:	2201      	movs	r2, #1
 8004224:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004226:	f7fe fcdb 	bl	8002be0 <HAL_GetTick>
 800422a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800422c:	e010      	b.n	8004250 <HAL_RCC_OscConfig+0x2f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800422e:	f7fe fcd7 	bl	8002be0 <HAL_GetTick>
 8004232:	4602      	mov	r2, r0
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	1ad3      	subs	r3, r2, r3
 8004238:	2b02      	cmp	r3, #2
 800423a:	d909      	bls.n	8004250 <HAL_RCC_OscConfig+0x2f4>
        {
          return HAL_TIMEOUT;
 800423c:	2303      	movs	r3, #3
 800423e:	e1f3      	b.n	8004628 <HAL_RCC_OscConfig+0x6cc>
 8004240:	0800ec84 	.word	0x0800ec84
 8004244:	40021000 	.word	0x40021000
 8004248:	42420000 	.word	0x42420000
 800424c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004250:	4b67      	ldr	r3, [pc, #412]	; (80043f0 <HAL_RCC_OscConfig+0x494>)
 8004252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004254:	f003 0302 	and.w	r3, r3, #2
 8004258:	2b00      	cmp	r3, #0
 800425a:	d0e8      	beq.n	800422e <HAL_RCC_OscConfig+0x2d2>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800425c:	2001      	movs	r0, #1
 800425e:	f000 fc0f 	bl	8004a80 <RCC_Delay>
 8004262:	e015      	b.n	8004290 <HAL_RCC_OscConfig+0x334>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004264:	4b63      	ldr	r3, [pc, #396]	; (80043f4 <HAL_RCC_OscConfig+0x498>)
 8004266:	2200      	movs	r2, #0
 8004268:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800426a:	f7fe fcb9 	bl	8002be0 <HAL_GetTick>
 800426e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004270:	e008      	b.n	8004284 <HAL_RCC_OscConfig+0x328>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004272:	f7fe fcb5 	bl	8002be0 <HAL_GetTick>
 8004276:	4602      	mov	r2, r0
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	1ad3      	subs	r3, r2, r3
 800427c:	2b02      	cmp	r3, #2
 800427e:	d901      	bls.n	8004284 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 8004280:	2303      	movs	r3, #3
 8004282:	e1d1      	b.n	8004628 <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004284:	4b5a      	ldr	r3, [pc, #360]	; (80043f0 <HAL_RCC_OscConfig+0x494>)
 8004286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004288:	f003 0302 	and.w	r3, r3, #2
 800428c:	2b00      	cmp	r3, #0
 800428e:	d1f0      	bne.n	8004272 <HAL_RCC_OscConfig+0x316>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0304 	and.w	r3, r3, #4
 8004298:	2b00      	cmp	r3, #0
 800429a:	f000 80c0 	beq.w	800441e <HAL_RCC_OscConfig+0x4c2>
  {
    FlagStatus       pwrclkchanged = RESET;
 800429e:	2300      	movs	r3, #0
 80042a0:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d00c      	beq.n	80042c4 <HAL_RCC_OscConfig+0x368>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d008      	beq.n	80042c4 <HAL_RCC_OscConfig+0x368>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	2b05      	cmp	r3, #5
 80042b8:	d004      	beq.n	80042c4 <HAL_RCC_OscConfig+0x368>
 80042ba:	f240 2111 	movw	r1, #529	; 0x211
 80042be:	484e      	ldr	r0, [pc, #312]	; (80043f8 <HAL_RCC_OscConfig+0x49c>)
 80042c0:	f7fd ffbe 	bl	8002240 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042c4:	4b4a      	ldr	r3, [pc, #296]	; (80043f0 <HAL_RCC_OscConfig+0x494>)
 80042c6:	69db      	ldr	r3, [r3, #28]
 80042c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d10d      	bne.n	80042ec <HAL_RCC_OscConfig+0x390>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042d0:	4b47      	ldr	r3, [pc, #284]	; (80043f0 <HAL_RCC_OscConfig+0x494>)
 80042d2:	69db      	ldr	r3, [r3, #28]
 80042d4:	4a46      	ldr	r2, [pc, #280]	; (80043f0 <HAL_RCC_OscConfig+0x494>)
 80042d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042da:	61d3      	str	r3, [r2, #28]
 80042dc:	4b44      	ldr	r3, [pc, #272]	; (80043f0 <HAL_RCC_OscConfig+0x494>)
 80042de:	69db      	ldr	r3, [r3, #28]
 80042e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042e4:	60bb      	str	r3, [r7, #8]
 80042e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042e8:	2301      	movs	r3, #1
 80042ea:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042ec:	4b43      	ldr	r3, [pc, #268]	; (80043fc <HAL_RCC_OscConfig+0x4a0>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d118      	bne.n	800432a <HAL_RCC_OscConfig+0x3ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042f8:	4b40      	ldr	r3, [pc, #256]	; (80043fc <HAL_RCC_OscConfig+0x4a0>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a3f      	ldr	r2, [pc, #252]	; (80043fc <HAL_RCC_OscConfig+0x4a0>)
 80042fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004302:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004304:	f7fe fc6c 	bl	8002be0 <HAL_GetTick>
 8004308:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800430a:	e008      	b.n	800431e <HAL_RCC_OscConfig+0x3c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800430c:	f7fe fc68 	bl	8002be0 <HAL_GetTick>
 8004310:	4602      	mov	r2, r0
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	2b64      	cmp	r3, #100	; 0x64
 8004318:	d901      	bls.n	800431e <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	e184      	b.n	8004628 <HAL_RCC_OscConfig+0x6cc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800431e:	4b37      	ldr	r3, [pc, #220]	; (80043fc <HAL_RCC_OscConfig+0x4a0>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004326:	2b00      	cmp	r3, #0
 8004328:	d0f0      	beq.n	800430c <HAL_RCC_OscConfig+0x3b0>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	2b01      	cmp	r3, #1
 8004330:	d106      	bne.n	8004340 <HAL_RCC_OscConfig+0x3e4>
 8004332:	4b2f      	ldr	r3, [pc, #188]	; (80043f0 <HAL_RCC_OscConfig+0x494>)
 8004334:	6a1b      	ldr	r3, [r3, #32]
 8004336:	4a2e      	ldr	r2, [pc, #184]	; (80043f0 <HAL_RCC_OscConfig+0x494>)
 8004338:	f043 0301 	orr.w	r3, r3, #1
 800433c:	6213      	str	r3, [r2, #32]
 800433e:	e02d      	b.n	800439c <HAL_RCC_OscConfig+0x440>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d10c      	bne.n	8004362 <HAL_RCC_OscConfig+0x406>
 8004348:	4b29      	ldr	r3, [pc, #164]	; (80043f0 <HAL_RCC_OscConfig+0x494>)
 800434a:	6a1b      	ldr	r3, [r3, #32]
 800434c:	4a28      	ldr	r2, [pc, #160]	; (80043f0 <HAL_RCC_OscConfig+0x494>)
 800434e:	f023 0301 	bic.w	r3, r3, #1
 8004352:	6213      	str	r3, [r2, #32]
 8004354:	4b26      	ldr	r3, [pc, #152]	; (80043f0 <HAL_RCC_OscConfig+0x494>)
 8004356:	6a1b      	ldr	r3, [r3, #32]
 8004358:	4a25      	ldr	r2, [pc, #148]	; (80043f0 <HAL_RCC_OscConfig+0x494>)
 800435a:	f023 0304 	bic.w	r3, r3, #4
 800435e:	6213      	str	r3, [r2, #32]
 8004360:	e01c      	b.n	800439c <HAL_RCC_OscConfig+0x440>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	2b05      	cmp	r3, #5
 8004368:	d10c      	bne.n	8004384 <HAL_RCC_OscConfig+0x428>
 800436a:	4b21      	ldr	r3, [pc, #132]	; (80043f0 <HAL_RCC_OscConfig+0x494>)
 800436c:	6a1b      	ldr	r3, [r3, #32]
 800436e:	4a20      	ldr	r2, [pc, #128]	; (80043f0 <HAL_RCC_OscConfig+0x494>)
 8004370:	f043 0304 	orr.w	r3, r3, #4
 8004374:	6213      	str	r3, [r2, #32]
 8004376:	4b1e      	ldr	r3, [pc, #120]	; (80043f0 <HAL_RCC_OscConfig+0x494>)
 8004378:	6a1b      	ldr	r3, [r3, #32]
 800437a:	4a1d      	ldr	r2, [pc, #116]	; (80043f0 <HAL_RCC_OscConfig+0x494>)
 800437c:	f043 0301 	orr.w	r3, r3, #1
 8004380:	6213      	str	r3, [r2, #32]
 8004382:	e00b      	b.n	800439c <HAL_RCC_OscConfig+0x440>
 8004384:	4b1a      	ldr	r3, [pc, #104]	; (80043f0 <HAL_RCC_OscConfig+0x494>)
 8004386:	6a1b      	ldr	r3, [r3, #32]
 8004388:	4a19      	ldr	r2, [pc, #100]	; (80043f0 <HAL_RCC_OscConfig+0x494>)
 800438a:	f023 0301 	bic.w	r3, r3, #1
 800438e:	6213      	str	r3, [r2, #32]
 8004390:	4b17      	ldr	r3, [pc, #92]	; (80043f0 <HAL_RCC_OscConfig+0x494>)
 8004392:	6a1b      	ldr	r3, [r3, #32]
 8004394:	4a16      	ldr	r2, [pc, #88]	; (80043f0 <HAL_RCC_OscConfig+0x494>)
 8004396:	f023 0304 	bic.w	r3, r3, #4
 800439a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d015      	beq.n	80043d0 <HAL_RCC_OscConfig+0x474>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043a4:	f7fe fc1c 	bl	8002be0 <HAL_GetTick>
 80043a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043aa:	e00a      	b.n	80043c2 <HAL_RCC_OscConfig+0x466>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043ac:	f7fe fc18 	bl	8002be0 <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d901      	bls.n	80043c2 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	e132      	b.n	8004628 <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043c2:	4b0b      	ldr	r3, [pc, #44]	; (80043f0 <HAL_RCC_OscConfig+0x494>)
 80043c4:	6a1b      	ldr	r3, [r3, #32]
 80043c6:	f003 0302 	and.w	r3, r3, #2
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d0ee      	beq.n	80043ac <HAL_RCC_OscConfig+0x450>
 80043ce:	e01d      	b.n	800440c <HAL_RCC_OscConfig+0x4b0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043d0:	f7fe fc06 	bl	8002be0 <HAL_GetTick>
 80043d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043d6:	e013      	b.n	8004400 <HAL_RCC_OscConfig+0x4a4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043d8:	f7fe fc02 	bl	8002be0 <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d90a      	bls.n	8004400 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	e11c      	b.n	8004628 <HAL_RCC_OscConfig+0x6cc>
 80043ee:	bf00      	nop
 80043f0:	40021000 	.word	0x40021000
 80043f4:	42420480 	.word	0x42420480
 80043f8:	0800ec84 	.word	0x0800ec84
 80043fc:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004400:	4b8b      	ldr	r3, [pc, #556]	; (8004630 <HAL_RCC_OscConfig+0x6d4>)
 8004402:	6a1b      	ldr	r3, [r3, #32]
 8004404:	f003 0302 	and.w	r3, r3, #2
 8004408:	2b00      	cmp	r3, #0
 800440a:	d1e5      	bne.n	80043d8 <HAL_RCC_OscConfig+0x47c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800440c:	7dfb      	ldrb	r3, [r7, #23]
 800440e:	2b01      	cmp	r3, #1
 8004410:	d105      	bne.n	800441e <HAL_RCC_OscConfig+0x4c2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004412:	4b87      	ldr	r3, [pc, #540]	; (8004630 <HAL_RCC_OscConfig+0x6d4>)
 8004414:	69db      	ldr	r3, [r3, #28]
 8004416:	4a86      	ldr	r2, [pc, #536]	; (8004630 <HAL_RCC_OscConfig+0x6d4>)
 8004418:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800441c:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	69db      	ldr	r3, [r3, #28]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d00c      	beq.n	8004440 <HAL_RCC_OscConfig+0x4e4>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	69db      	ldr	r3, [r3, #28]
 800442a:	2b01      	cmp	r3, #1
 800442c:	d008      	beq.n	8004440 <HAL_RCC_OscConfig+0x4e4>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	69db      	ldr	r3, [r3, #28]
 8004432:	2b02      	cmp	r3, #2
 8004434:	d004      	beq.n	8004440 <HAL_RCC_OscConfig+0x4e4>
 8004436:	f240 21af 	movw	r1, #687	; 0x2af
 800443a:	487e      	ldr	r0, [pc, #504]	; (8004634 <HAL_RCC_OscConfig+0x6d8>)
 800443c:	f7fd ff00 	bl	8002240 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	69db      	ldr	r3, [r3, #28]
 8004444:	2b00      	cmp	r3, #0
 8004446:	f000 80ee 	beq.w	8004626 <HAL_RCC_OscConfig+0x6ca>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800444a:	4b79      	ldr	r3, [pc, #484]	; (8004630 <HAL_RCC_OscConfig+0x6d4>)
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	f003 030c 	and.w	r3, r3, #12
 8004452:	2b08      	cmp	r3, #8
 8004454:	f000 80ce 	beq.w	80045f4 <HAL_RCC_OscConfig+0x698>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	69db      	ldr	r3, [r3, #28]
 800445c:	2b02      	cmp	r3, #2
 800445e:	f040 80b2 	bne.w	80045c6 <HAL_RCC_OscConfig+0x66a>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a1b      	ldr	r3, [r3, #32]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d009      	beq.n	800447e <HAL_RCC_OscConfig+0x522>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a1b      	ldr	r3, [r3, #32]
 800446e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004472:	d004      	beq.n	800447e <HAL_RCC_OscConfig+0x522>
 8004474:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 8004478:	486e      	ldr	r0, [pc, #440]	; (8004634 <HAL_RCC_OscConfig+0x6d8>)
 800447a:	f7fd fee1 	bl	8002240 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004482:	2b00      	cmp	r3, #0
 8004484:	d04a      	beq.n	800451c <HAL_RCC_OscConfig+0x5c0>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800448e:	d045      	beq.n	800451c <HAL_RCC_OscConfig+0x5c0>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004494:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004498:	d040      	beq.n	800451c <HAL_RCC_OscConfig+0x5c0>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80044a2:	d03b      	beq.n	800451c <HAL_RCC_OscConfig+0x5c0>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044ac:	d036      	beq.n	800451c <HAL_RCC_OscConfig+0x5c0>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80044b6:	d031      	beq.n	800451c <HAL_RCC_OscConfig+0x5c0>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044bc:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80044c0:	d02c      	beq.n	800451c <HAL_RCC_OscConfig+0x5c0>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c6:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80044ca:	d027      	beq.n	800451c <HAL_RCC_OscConfig+0x5c0>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044d4:	d022      	beq.n	800451c <HAL_RCC_OscConfig+0x5c0>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044da:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80044de:	d01d      	beq.n	800451c <HAL_RCC_OscConfig+0x5c0>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e4:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80044e8:	d018      	beq.n	800451c <HAL_RCC_OscConfig+0x5c0>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ee:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80044f2:	d013      	beq.n	800451c <HAL_RCC_OscConfig+0x5c0>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80044fc:	d00e      	beq.n	800451c <HAL_RCC_OscConfig+0x5c0>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004502:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 8004506:	d009      	beq.n	800451c <HAL_RCC_OscConfig+0x5c0>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450c:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8004510:	d004      	beq.n	800451c <HAL_RCC_OscConfig+0x5c0>
 8004512:	f240 21b9 	movw	r1, #697	; 0x2b9
 8004516:	4847      	ldr	r0, [pc, #284]	; (8004634 <HAL_RCC_OscConfig+0x6d8>)
 8004518:	f7fd fe92 	bl	8002240 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800451c:	4b46      	ldr	r3, [pc, #280]	; (8004638 <HAL_RCC_OscConfig+0x6dc>)
 800451e:	2200      	movs	r2, #0
 8004520:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004522:	f7fe fb5d 	bl	8002be0 <HAL_GetTick>
 8004526:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004528:	e008      	b.n	800453c <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800452a:	f7fe fb59 	bl	8002be0 <HAL_GetTick>
 800452e:	4602      	mov	r2, r0
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	1ad3      	subs	r3, r2, r3
 8004534:	2b02      	cmp	r3, #2
 8004536:	d901      	bls.n	800453c <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 8004538:	2303      	movs	r3, #3
 800453a:	e075      	b.n	8004628 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800453c:	4b3c      	ldr	r3, [pc, #240]	; (8004630 <HAL_RCC_OscConfig+0x6d4>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004544:	2b00      	cmp	r3, #0
 8004546:	d1f0      	bne.n	800452a <HAL_RCC_OscConfig+0x5ce>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6a1b      	ldr	r3, [r3, #32]
 800454c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004550:	d116      	bne.n	8004580 <HAL_RCC_OscConfig+0x624>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d009      	beq.n	800456e <HAL_RCC_OscConfig+0x612>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004562:	d004      	beq.n	800456e <HAL_RCC_OscConfig+0x612>
 8004564:	f240 21cf 	movw	r1, #719	; 0x2cf
 8004568:	4832      	ldr	r0, [pc, #200]	; (8004634 <HAL_RCC_OscConfig+0x6d8>)
 800456a:	f7fd fe69 	bl	8002240 <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800456e:	4b30      	ldr	r3, [pc, #192]	; (8004630 <HAL_RCC_OscConfig+0x6d4>)
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	492d      	ldr	r1, [pc, #180]	; (8004630 <HAL_RCC_OscConfig+0x6d4>)
 800457c:	4313      	orrs	r3, r2
 800457e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004580:	4b2b      	ldr	r3, [pc, #172]	; (8004630 <HAL_RCC_OscConfig+0x6d4>)
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a19      	ldr	r1, [r3, #32]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004590:	430b      	orrs	r3, r1
 8004592:	4927      	ldr	r1, [pc, #156]	; (8004630 <HAL_RCC_OscConfig+0x6d4>)
 8004594:	4313      	orrs	r3, r2
 8004596:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004598:	4b27      	ldr	r3, [pc, #156]	; (8004638 <HAL_RCC_OscConfig+0x6dc>)
 800459a:	2201      	movs	r2, #1
 800459c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800459e:	f7fe fb1f 	bl	8002be0 <HAL_GetTick>
 80045a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80045a4:	e008      	b.n	80045b8 <HAL_RCC_OscConfig+0x65c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045a6:	f7fe fb1b 	bl	8002be0 <HAL_GetTick>
 80045aa:	4602      	mov	r2, r0
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	1ad3      	subs	r3, r2, r3
 80045b0:	2b02      	cmp	r3, #2
 80045b2:	d901      	bls.n	80045b8 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 80045b4:	2303      	movs	r3, #3
 80045b6:	e037      	b.n	8004628 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80045b8:	4b1d      	ldr	r3, [pc, #116]	; (8004630 <HAL_RCC_OscConfig+0x6d4>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d0f0      	beq.n	80045a6 <HAL_RCC_OscConfig+0x64a>
 80045c4:	e02f      	b.n	8004626 <HAL_RCC_OscConfig+0x6ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045c6:	4b1c      	ldr	r3, [pc, #112]	; (8004638 <HAL_RCC_OscConfig+0x6dc>)
 80045c8:	2200      	movs	r2, #0
 80045ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045cc:	f7fe fb08 	bl	8002be0 <HAL_GetTick>
 80045d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045d2:	e008      	b.n	80045e6 <HAL_RCC_OscConfig+0x68a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045d4:	f7fe fb04 	bl	8002be0 <HAL_GetTick>
 80045d8:	4602      	mov	r2, r0
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	2b02      	cmp	r3, #2
 80045e0:	d901      	bls.n	80045e6 <HAL_RCC_OscConfig+0x68a>
          {
            return HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	e020      	b.n	8004628 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045e6:	4b12      	ldr	r3, [pc, #72]	; (8004630 <HAL_RCC_OscConfig+0x6d4>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d1f0      	bne.n	80045d4 <HAL_RCC_OscConfig+0x678>
 80045f2:	e018      	b.n	8004626 <HAL_RCC_OscConfig+0x6ca>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	69db      	ldr	r3, [r3, #28]
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d101      	bne.n	8004600 <HAL_RCC_OscConfig+0x6a4>
      {
        return HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e013      	b.n	8004628 <HAL_RCC_OscConfig+0x6cc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004600:	4b0b      	ldr	r3, [pc, #44]	; (8004630 <HAL_RCC_OscConfig+0x6d4>)
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6a1b      	ldr	r3, [r3, #32]
 8004610:	429a      	cmp	r2, r3
 8004612:	d106      	bne.n	8004622 <HAL_RCC_OscConfig+0x6c6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800461e:	429a      	cmp	r2, r3
 8004620:	d001      	beq.n	8004626 <HAL_RCC_OscConfig+0x6ca>
        {
          return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e000      	b.n	8004628 <HAL_RCC_OscConfig+0x6cc>
        }
      }
    }
  }

  return HAL_OK;
 8004626:	2300      	movs	r3, #0
}
 8004628:	4618      	mov	r0, r3
 800462a:	3718      	adds	r7, #24
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}
 8004630:	40021000 	.word	0x40021000
 8004634:	0800ec84 	.word	0x0800ec84
 8004638:	42420060 	.word	0x42420060

0800463c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b084      	sub	sp, #16
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d101      	bne.n	8004650 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	e176      	b.n	800493e <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 0301 	and.w	r3, r3, #1
 8004658:	2b00      	cmp	r3, #0
 800465a:	d116      	bne.n	800468a <HAL_RCC_ClockConfig+0x4e>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 0302 	and.w	r3, r3, #2
 8004664:	2b00      	cmp	r3, #0
 8004666:	d110      	bne.n	800468a <HAL_RCC_ClockConfig+0x4e>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0304 	and.w	r3, r3, #4
 8004670:	2b00      	cmp	r3, #0
 8004672:	d10a      	bne.n	800468a <HAL_RCC_ClockConfig+0x4e>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 0308 	and.w	r3, r3, #8
 800467c:	2b00      	cmp	r3, #0
 800467e:	d104      	bne.n	800468a <HAL_RCC_ClockConfig+0x4e>
 8004680:	f44f 714e 	mov.w	r1, #824	; 0x338
 8004684:	4874      	ldr	r0, [pc, #464]	; (8004858 <HAL_RCC_ClockConfig+0x21c>)
 8004686:	f7fd fddb 	bl	8002240 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d00a      	beq.n	80046a6 <HAL_RCC_ClockConfig+0x6a>
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	2b01      	cmp	r3, #1
 8004694:	d007      	beq.n	80046a6 <HAL_RCC_ClockConfig+0x6a>
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	2b02      	cmp	r3, #2
 800469a:	d004      	beq.n	80046a6 <HAL_RCC_ClockConfig+0x6a>
 800469c:	f240 3139 	movw	r1, #825	; 0x339
 80046a0:	486d      	ldr	r0, [pc, #436]	; (8004858 <HAL_RCC_ClockConfig+0x21c>)
 80046a2:	f7fd fdcd 	bl	8002240 <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046a6:	4b6d      	ldr	r3, [pc, #436]	; (800485c <HAL_RCC_ClockConfig+0x220>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 0307 	and.w	r3, r3, #7
 80046ae:	683a      	ldr	r2, [r7, #0]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d910      	bls.n	80046d6 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046b4:	4b69      	ldr	r3, [pc, #420]	; (800485c <HAL_RCC_ClockConfig+0x220>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f023 0207 	bic.w	r2, r3, #7
 80046bc:	4967      	ldr	r1, [pc, #412]	; (800485c <HAL_RCC_ClockConfig+0x220>)
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046c4:	4b65      	ldr	r3, [pc, #404]	; (800485c <HAL_RCC_ClockConfig+0x220>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 0307 	and.w	r3, r3, #7
 80046cc:	683a      	ldr	r2, [r7, #0]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d001      	beq.n	80046d6 <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e133      	b.n	800493e <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 0302 	and.w	r3, r3, #2
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d049      	beq.n	8004776 <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 0304 	and.w	r3, r3, #4
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d005      	beq.n	80046fa <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046ee:	4b5c      	ldr	r3, [pc, #368]	; (8004860 <HAL_RCC_ClockConfig+0x224>)
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	4a5b      	ldr	r2, [pc, #364]	; (8004860 <HAL_RCC_ClockConfig+0x224>)
 80046f4:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80046f8:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 0308 	and.w	r3, r3, #8
 8004702:	2b00      	cmp	r3, #0
 8004704:	d005      	beq.n	8004712 <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004706:	4b56      	ldr	r3, [pc, #344]	; (8004860 <HAL_RCC_ClockConfig+0x224>)
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	4a55      	ldr	r2, [pc, #340]	; (8004860 <HAL_RCC_ClockConfig+0x224>)
 800470c:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004710:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d024      	beq.n	8004764 <HAL_RCC_ClockConfig+0x128>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	2b80      	cmp	r3, #128	; 0x80
 8004720:	d020      	beq.n	8004764 <HAL_RCC_ClockConfig+0x128>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	2b90      	cmp	r3, #144	; 0x90
 8004728:	d01c      	beq.n	8004764 <HAL_RCC_ClockConfig+0x128>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	2ba0      	cmp	r3, #160	; 0xa0
 8004730:	d018      	beq.n	8004764 <HAL_RCC_ClockConfig+0x128>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	2bb0      	cmp	r3, #176	; 0xb0
 8004738:	d014      	beq.n	8004764 <HAL_RCC_ClockConfig+0x128>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	2bc0      	cmp	r3, #192	; 0xc0
 8004740:	d010      	beq.n	8004764 <HAL_RCC_ClockConfig+0x128>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	2bd0      	cmp	r3, #208	; 0xd0
 8004748:	d00c      	beq.n	8004764 <HAL_RCC_ClockConfig+0x128>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	2be0      	cmp	r3, #224	; 0xe0
 8004750:	d008      	beq.n	8004764 <HAL_RCC_ClockConfig+0x128>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	2bf0      	cmp	r3, #240	; 0xf0
 8004758:	d004      	beq.n	8004764 <HAL_RCC_ClockConfig+0x128>
 800475a:	f240 315f 	movw	r1, #863	; 0x35f
 800475e:	483e      	ldr	r0, [pc, #248]	; (8004858 <HAL_RCC_ClockConfig+0x21c>)
 8004760:	f7fd fd6e 	bl	8002240 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004764:	4b3e      	ldr	r3, [pc, #248]	; (8004860 <HAL_RCC_ClockConfig+0x224>)
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	493b      	ldr	r1, [pc, #236]	; (8004860 <HAL_RCC_ClockConfig+0x224>)
 8004772:	4313      	orrs	r3, r2
 8004774:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 0301 	and.w	r3, r3, #1
 800477e:	2b00      	cmp	r3, #0
 8004780:	d051      	beq.n	8004826 <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d00c      	beq.n	80047a4 <HAL_RCC_ClockConfig+0x168>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	2b01      	cmp	r3, #1
 8004790:	d008      	beq.n	80047a4 <HAL_RCC_ClockConfig+0x168>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	2b02      	cmp	r3, #2
 8004798:	d004      	beq.n	80047a4 <HAL_RCC_ClockConfig+0x168>
 800479a:	f240 3166 	movw	r1, #870	; 0x366
 800479e:	482e      	ldr	r0, [pc, #184]	; (8004858 <HAL_RCC_ClockConfig+0x21c>)
 80047a0:	f7fd fd4e 	bl	8002240 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d107      	bne.n	80047bc <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047ac:	4b2c      	ldr	r3, [pc, #176]	; (8004860 <HAL_RCC_ClockConfig+0x224>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d115      	bne.n	80047e4 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	e0c0      	b.n	800493e <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	d107      	bne.n	80047d4 <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047c4:	4b26      	ldr	r3, [pc, #152]	; (8004860 <HAL_RCC_ClockConfig+0x224>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d109      	bne.n	80047e4 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e0b4      	b.n	800493e <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047d4:	4b22      	ldr	r3, [pc, #136]	; (8004860 <HAL_RCC_ClockConfig+0x224>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0302 	and.w	r3, r3, #2
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d101      	bne.n	80047e4 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e0ac      	b.n	800493e <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047e4:	4b1e      	ldr	r3, [pc, #120]	; (8004860 <HAL_RCC_ClockConfig+0x224>)
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	f023 0203 	bic.w	r2, r3, #3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	491b      	ldr	r1, [pc, #108]	; (8004860 <HAL_RCC_ClockConfig+0x224>)
 80047f2:	4313      	orrs	r3, r2
 80047f4:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047f6:	f7fe f9f3 	bl	8002be0 <HAL_GetTick>
 80047fa:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047fc:	e00a      	b.n	8004814 <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047fe:	f7fe f9ef 	bl	8002be0 <HAL_GetTick>
 8004802:	4602      	mov	r2, r0
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	1ad3      	subs	r3, r2, r3
 8004808:	f241 3288 	movw	r2, #5000	; 0x1388
 800480c:	4293      	cmp	r3, r2
 800480e:	d901      	bls.n	8004814 <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 8004810:	2303      	movs	r3, #3
 8004812:	e094      	b.n	800493e <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004814:	4b12      	ldr	r3, [pc, #72]	; (8004860 <HAL_RCC_ClockConfig+0x224>)
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	f003 020c 	and.w	r2, r3, #12
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	429a      	cmp	r2, r3
 8004824:	d1eb      	bne.n	80047fe <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004826:	4b0d      	ldr	r3, [pc, #52]	; (800485c <HAL_RCC_ClockConfig+0x220>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 0307 	and.w	r3, r3, #7
 800482e:	683a      	ldr	r2, [r7, #0]
 8004830:	429a      	cmp	r2, r3
 8004832:	d217      	bcs.n	8004864 <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004834:	4b09      	ldr	r3, [pc, #36]	; (800485c <HAL_RCC_ClockConfig+0x220>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f023 0207 	bic.w	r2, r3, #7
 800483c:	4907      	ldr	r1, [pc, #28]	; (800485c <HAL_RCC_ClockConfig+0x220>)
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	4313      	orrs	r3, r2
 8004842:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004844:	4b05      	ldr	r3, [pc, #20]	; (800485c <HAL_RCC_ClockConfig+0x220>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0307 	and.w	r3, r3, #7
 800484c:	683a      	ldr	r2, [r7, #0]
 800484e:	429a      	cmp	r2, r3
 8004850:	d008      	beq.n	8004864 <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e073      	b.n	800493e <HAL_RCC_ClockConfig+0x302>
 8004856:	bf00      	nop
 8004858:	0800ec84 	.word	0x0800ec84
 800485c:	40022000 	.word	0x40022000
 8004860:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 0304 	and.w	r3, r3, #4
 800486c:	2b00      	cmp	r3, #0
 800486e:	d025      	beq.n	80048bc <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d018      	beq.n	80048aa <HAL_RCC_ClockConfig+0x26e>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004880:	d013      	beq.n	80048aa <HAL_RCC_ClockConfig+0x26e>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	68db      	ldr	r3, [r3, #12]
 8004886:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800488a:	d00e      	beq.n	80048aa <HAL_RCC_ClockConfig+0x26e>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004894:	d009      	beq.n	80048aa <HAL_RCC_ClockConfig+0x26e>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800489e:	d004      	beq.n	80048aa <HAL_RCC_ClockConfig+0x26e>
 80048a0:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 80048a4:	4828      	ldr	r0, [pc, #160]	; (8004948 <HAL_RCC_ClockConfig+0x30c>)
 80048a6:	f7fd fccb 	bl	8002240 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048aa:	4b28      	ldr	r3, [pc, #160]	; (800494c <HAL_RCC_ClockConfig+0x310>)
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	4925      	ldr	r1, [pc, #148]	; (800494c <HAL_RCC_ClockConfig+0x310>)
 80048b8:	4313      	orrs	r3, r2
 80048ba:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 0308 	and.w	r3, r3, #8
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d026      	beq.n	8004916 <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	691b      	ldr	r3, [r3, #16]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d018      	beq.n	8004902 <HAL_RCC_ClockConfig+0x2c6>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	691b      	ldr	r3, [r3, #16]
 80048d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048d8:	d013      	beq.n	8004902 <HAL_RCC_ClockConfig+0x2c6>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	691b      	ldr	r3, [r3, #16]
 80048de:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80048e2:	d00e      	beq.n	8004902 <HAL_RCC_ClockConfig+0x2c6>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	691b      	ldr	r3, [r3, #16]
 80048e8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80048ec:	d009      	beq.n	8004902 <HAL_RCC_ClockConfig+0x2c6>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	691b      	ldr	r3, [r3, #16]
 80048f2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80048f6:	d004      	beq.n	8004902 <HAL_RCC_ClockConfig+0x2c6>
 80048f8:	f240 31ab 	movw	r1, #939	; 0x3ab
 80048fc:	4812      	ldr	r0, [pc, #72]	; (8004948 <HAL_RCC_ClockConfig+0x30c>)
 80048fe:	f7fd fc9f 	bl	8002240 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004902:	4b12      	ldr	r3, [pc, #72]	; (800494c <HAL_RCC_ClockConfig+0x310>)
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	691b      	ldr	r3, [r3, #16]
 800490e:	00db      	lsls	r3, r3, #3
 8004910:	490e      	ldr	r1, [pc, #56]	; (800494c <HAL_RCC_ClockConfig+0x310>)
 8004912:	4313      	orrs	r3, r2
 8004914:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004916:	f000 f821 	bl	800495c <HAL_RCC_GetSysClockFreq>
 800491a:	4602      	mov	r2, r0
 800491c:	4b0b      	ldr	r3, [pc, #44]	; (800494c <HAL_RCC_ClockConfig+0x310>)
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	091b      	lsrs	r3, r3, #4
 8004922:	f003 030f 	and.w	r3, r3, #15
 8004926:	490a      	ldr	r1, [pc, #40]	; (8004950 <HAL_RCC_ClockConfig+0x314>)
 8004928:	5ccb      	ldrb	r3, [r1, r3]
 800492a:	fa22 f303 	lsr.w	r3, r2, r3
 800492e:	4a09      	ldr	r2, [pc, #36]	; (8004954 <HAL_RCC_ClockConfig+0x318>)
 8004930:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004932:	4b09      	ldr	r3, [pc, #36]	; (8004958 <HAL_RCC_ClockConfig+0x31c>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4618      	mov	r0, r3
 8004938:	f7fe f910 	bl	8002b5c <HAL_InitTick>

  return HAL_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	3710      	adds	r7, #16
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	0800ec84 	.word	0x0800ec84
 800494c:	40021000 	.word	0x40021000
 8004950:	0800f5c8 	.word	0x0800f5c8
 8004954:	20000000 	.word	0x20000000
 8004958:	20000004 	.word	0x20000004

0800495c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800495c:	b490      	push	{r4, r7}
 800495e:	b08a      	sub	sp, #40	; 0x28
 8004960:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004962:	4b2a      	ldr	r3, [pc, #168]	; (8004a0c <HAL_RCC_GetSysClockFreq+0xb0>)
 8004964:	1d3c      	adds	r4, r7, #4
 8004966:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004968:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800496c:	f240 2301 	movw	r3, #513	; 0x201
 8004970:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004972:	2300      	movs	r3, #0
 8004974:	61fb      	str	r3, [r7, #28]
 8004976:	2300      	movs	r3, #0
 8004978:	61bb      	str	r3, [r7, #24]
 800497a:	2300      	movs	r3, #0
 800497c:	627b      	str	r3, [r7, #36]	; 0x24
 800497e:	2300      	movs	r3, #0
 8004980:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004982:	2300      	movs	r3, #0
 8004984:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004986:	4b22      	ldr	r3, [pc, #136]	; (8004a10 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800498c:	69fb      	ldr	r3, [r7, #28]
 800498e:	f003 030c 	and.w	r3, r3, #12
 8004992:	2b04      	cmp	r3, #4
 8004994:	d002      	beq.n	800499c <HAL_RCC_GetSysClockFreq+0x40>
 8004996:	2b08      	cmp	r3, #8
 8004998:	d003      	beq.n	80049a2 <HAL_RCC_GetSysClockFreq+0x46>
 800499a:	e02d      	b.n	80049f8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800499c:	4b1d      	ldr	r3, [pc, #116]	; (8004a14 <HAL_RCC_GetSysClockFreq+0xb8>)
 800499e:	623b      	str	r3, [r7, #32]
      break;
 80049a0:	e02d      	b.n	80049fe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80049a2:	69fb      	ldr	r3, [r7, #28]
 80049a4:	0c9b      	lsrs	r3, r3, #18
 80049a6:	f003 030f 	and.w	r3, r3, #15
 80049aa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80049ae:	4413      	add	r3, r2
 80049b0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80049b4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d013      	beq.n	80049e8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80049c0:	4b13      	ldr	r3, [pc, #76]	; (8004a10 <HAL_RCC_GetSysClockFreq+0xb4>)
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	0c5b      	lsrs	r3, r3, #17
 80049c6:	f003 0301 	and.w	r3, r3, #1
 80049ca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80049ce:	4413      	add	r3, r2
 80049d0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80049d4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	4a0e      	ldr	r2, [pc, #56]	; (8004a14 <HAL_RCC_GetSysClockFreq+0xb8>)
 80049da:	fb02 f203 	mul.w	r2, r2, r3
 80049de:	69bb      	ldr	r3, [r7, #24]
 80049e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049e4:	627b      	str	r3, [r7, #36]	; 0x24
 80049e6:	e004      	b.n	80049f2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	4a0b      	ldr	r2, [pc, #44]	; (8004a18 <HAL_RCC_GetSysClockFreq+0xbc>)
 80049ec:	fb02 f303 	mul.w	r3, r2, r3
 80049f0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80049f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f4:	623b      	str	r3, [r7, #32]
      break;
 80049f6:	e002      	b.n	80049fe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80049f8:	4b06      	ldr	r3, [pc, #24]	; (8004a14 <HAL_RCC_GetSysClockFreq+0xb8>)
 80049fa:	623b      	str	r3, [r7, #32]
      break;
 80049fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049fe:	6a3b      	ldr	r3, [r7, #32]
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3728      	adds	r7, #40	; 0x28
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bc90      	pop	{r4, r7}
 8004a08:	4770      	bx	lr
 8004a0a:	bf00      	nop
 8004a0c:	0800ecbc 	.word	0x0800ecbc
 8004a10:	40021000 	.word	0x40021000
 8004a14:	007a1200 	.word	0x007a1200
 8004a18:	003d0900 	.word	0x003d0900

08004a1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a20:	4b02      	ldr	r3, [pc, #8]	; (8004a2c <HAL_RCC_GetHCLKFreq+0x10>)
 8004a22:	681b      	ldr	r3, [r3, #0]
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bc80      	pop	{r7}
 8004a2a:	4770      	bx	lr
 8004a2c:	20000000 	.word	0x20000000

08004a30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004a34:	f7ff fff2 	bl	8004a1c <HAL_RCC_GetHCLKFreq>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	4b05      	ldr	r3, [pc, #20]	; (8004a50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	0a1b      	lsrs	r3, r3, #8
 8004a40:	f003 0307 	and.w	r3, r3, #7
 8004a44:	4903      	ldr	r1, [pc, #12]	; (8004a54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a46:	5ccb      	ldrb	r3, [r1, r3]
 8004a48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	40021000 	.word	0x40021000
 8004a54:	0800f5d8 	.word	0x0800f5d8

08004a58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004a5c:	f7ff ffde 	bl	8004a1c <HAL_RCC_GetHCLKFreq>
 8004a60:	4602      	mov	r2, r0
 8004a62:	4b05      	ldr	r3, [pc, #20]	; (8004a78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	0adb      	lsrs	r3, r3, #11
 8004a68:	f003 0307 	and.w	r3, r3, #7
 8004a6c:	4903      	ldr	r1, [pc, #12]	; (8004a7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a6e:	5ccb      	ldrb	r3, [r1, r3]
 8004a70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	bd80      	pop	{r7, pc}
 8004a78:	40021000 	.word	0x40021000
 8004a7c:	0800f5d8 	.word	0x0800f5d8

08004a80 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b085      	sub	sp, #20
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004a88:	4b0a      	ldr	r3, [pc, #40]	; (8004ab4 <RCC_Delay+0x34>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a0a      	ldr	r2, [pc, #40]	; (8004ab8 <RCC_Delay+0x38>)
 8004a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a92:	0a5b      	lsrs	r3, r3, #9
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	fb02 f303 	mul.w	r3, r2, r3
 8004a9a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004a9c:	bf00      	nop
  }
  while (Delay --);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	1e5a      	subs	r2, r3, #1
 8004aa2:	60fa      	str	r2, [r7, #12]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d1f9      	bne.n	8004a9c <RCC_Delay+0x1c>
}
 8004aa8:	bf00      	nop
 8004aaa:	bf00      	nop
 8004aac:	3714      	adds	r7, #20
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bc80      	pop	{r7}
 8004ab2:	4770      	bx	lr
 8004ab4:	20000000 	.word	0x20000000
 8004ab8:	10624dd3 	.word	0x10624dd3

08004abc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b086      	sub	sp, #24
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	613b      	str	r3, [r7, #16]
 8004ac8:	2300      	movs	r3, #0
 8004aca:	60fb      	str	r3, [r7, #12]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
#endif /* STM32F105xC || STM32F107xC */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 0301 	and.w	r3, r3, #1
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d11b      	bne.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 0302 	and.w	r3, r3, #2
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d115      	bne.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 0304 	and.w	r3, r3, #4
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d10f      	bne.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 0308 	and.w	r3, r3, #8
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d109      	bne.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 0310 	and.w	r3, r3, #16
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d103      	bne.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004b08:	216c      	movs	r1, #108	; 0x6c
 8004b0a:	4873      	ldr	r0, [pc, #460]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8004b0c:	f7fd fb98 	bl	8002240 <assert_failed>

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 0301 	and.w	r3, r3, #1
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	f000 8095 	beq.w	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    FlagStatus pwrclkchanged = RESET;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	75fb      	strb	r3, [r7, #23]

    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d012      	beq.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x94>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b32:	d00d      	beq.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x94>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b3c:	d008      	beq.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x94>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b46:	d003      	beq.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x94>
 8004b48:	2174      	movs	r1, #116	; 0x74
 8004b4a:	4863      	ldr	r0, [pc, #396]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8004b4c:	f7fd fb78 	bl	8002240 <assert_failed>

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b50:	4b62      	ldr	r3, [pc, #392]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004b52:	69db      	ldr	r3, [r3, #28]
 8004b54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d10d      	bne.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0xbc>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b5c:	4b5f      	ldr	r3, [pc, #380]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004b5e:	69db      	ldr	r3, [r3, #28]
 8004b60:	4a5e      	ldr	r2, [pc, #376]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004b62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b66:	61d3      	str	r3, [r2, #28]
 8004b68:	4b5c      	ldr	r3, [pc, #368]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004b6a:	69db      	ldr	r3, [r3, #28]
 8004b6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b70:	60bb      	str	r3, [r7, #8]
 8004b72:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b74:	2301      	movs	r3, #1
 8004b76:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b78:	4b59      	ldr	r3, [pc, #356]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d118      	bne.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b84:	4b56      	ldr	r3, [pc, #344]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a55      	ldr	r2, [pc, #340]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004b8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b8e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b90:	f7fe f826 	bl	8002be0 <HAL_GetTick>
 8004b94:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b96:	e008      	b.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0xee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b98:	f7fe f822 	bl	8002be0 <HAL_GetTick>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	1ad3      	subs	r3, r2, r3
 8004ba2:	2b64      	cmp	r3, #100	; 0x64
 8004ba4:	d901      	bls.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0xee>
        {
          return HAL_TIMEOUT;
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	e092      	b.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x214>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004baa:	4b4d      	ldr	r3, [pc, #308]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d0f0      	beq.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0xdc>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004bb6:	4b49      	ldr	r3, [pc, #292]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004bb8:	6a1b      	ldr	r3, [r3, #32]
 8004bba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bbe:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d02e      	beq.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bce:	68fa      	ldr	r2, [r7, #12]
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d027      	beq.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004bd4:	4b41      	ldr	r3, [pc, #260]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004bd6:	6a1b      	ldr	r3, [r3, #32]
 8004bd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bdc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004bde:	4b41      	ldr	r3, [pc, #260]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8004be0:	2201      	movs	r2, #1
 8004be2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004be4:	4b3f      	ldr	r3, [pc, #252]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8004be6:	2200      	movs	r2, #0
 8004be8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004bea:	4a3c      	ldr	r2, [pc, #240]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f003 0301 	and.w	r3, r3, #1
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d014      	beq.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bfa:	f7fd fff1 	bl	8002be0 <HAL_GetTick>
 8004bfe:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c00:	e00a      	b.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x15c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c02:	f7fd ffed 	bl	8002be0 <HAL_GetTick>
 8004c06:	4602      	mov	r2, r0
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	1ad3      	subs	r3, r2, r3
 8004c0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d901      	bls.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          {
            return HAL_TIMEOUT;
 8004c14:	2303      	movs	r3, #3
 8004c16:	e05b      	b.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x214>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c18:	4b30      	ldr	r3, [pc, #192]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004c1a:	6a1b      	ldr	r3, [r3, #32]
 8004c1c:	f003 0302 	and.w	r3, r3, #2
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d0ee      	beq.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x146>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c24:	4b2d      	ldr	r3, [pc, #180]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004c26:	6a1b      	ldr	r3, [r3, #32]
 8004c28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	492a      	ldr	r1, [pc, #168]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004c32:	4313      	orrs	r3, r2
 8004c34:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004c36:	7dfb      	ldrb	r3, [r7, #23]
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d105      	bne.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c3c:	4b27      	ldr	r3, [pc, #156]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004c3e:	69db      	ldr	r3, [r3, #28]
 8004c40:	4a26      	ldr	r2, [pc, #152]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004c42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c46:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 0302 	and.w	r3, r3, #2
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d01f      	beq.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d012      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c64:	d00d      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c6e:	d008      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004c78:	d003      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 8004c7a:	21b9      	movs	r1, #185	; 0xb9
 8004c7c:	4816      	ldr	r0, [pc, #88]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8004c7e:	f7fd fadf 	bl	8002240 <assert_failed>

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c82:	4b16      	ldr	r3, [pc, #88]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	4913      	ldr	r1, [pc, #76]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004c90:	4313      	orrs	r3, r2
 8004c92:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 0310 	and.w	r3, r3, #16
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d016      	beq.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x212>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	695b      	ldr	r3, [r3, #20]
 8004ca4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ca8:	d008      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	695b      	ldr	r3, [r3, #20]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d004      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004cb2:	f240 1115 	movw	r1, #277	; 0x115
 8004cb6:	4808      	ldr	r0, [pc, #32]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8004cb8:	f7fd fac2 	bl	8002240 <assert_failed>

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004cbc:	4b07      	ldr	r3, [pc, #28]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	695b      	ldr	r3, [r3, #20]
 8004cc8:	4904      	ldr	r1, [pc, #16]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004cce:	2300      	movs	r3, #0
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3718      	adds	r7, #24
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}
 8004cd8:	0800eccc 	.word	0x0800eccc
 8004cdc:	40021000 	.word	0x40021000
 8004ce0:	40007000 	.word	0x40007000
 8004ce4:	42420440 	.word	0x42420440

08004ce8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004ce8:	b590      	push	{r4, r7, lr}
 8004cea:	b08d      	sub	sp, #52	; 0x34
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004cf0:	4b7a      	ldr	r3, [pc, #488]	; (8004edc <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>)
 8004cf2:	f107 040c 	add.w	r4, r7, #12
 8004cf6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004cf8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004cfc:	f240 2301 	movw	r3, #513	; 0x201
 8004d00:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004d02:	2300      	movs	r3, #0
 8004d04:	627b      	str	r3, [r7, #36]	; 0x24
 8004d06:	2300      	movs	r3, #0
 8004d08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	61fb      	str	r3, [r7, #28]
 8004d12:	2300      	movs	r3, #0
 8004d14:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f003 0301 	and.w	r3, r3, #1
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d118      	bne.n	8004d52 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f003 0302 	and.w	r3, r3, #2
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d113      	bne.n	8004d52 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f003 0304 	and.w	r3, r3, #4
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d10e      	bne.n	8004d52 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f003 0308 	and.w	r3, r3, #8
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d109      	bne.n	8004d52 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f003 0310 	and.w	r3, r3, #16
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d104      	bne.n	8004d52 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 8004d48:	f44f 71cb 	mov.w	r1, #406	; 0x196
 8004d4c:	4864      	ldr	r0, [pc, #400]	; (8004ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8>)
 8004d4e:	f7fd fa77 	bl	8002240 <assert_failed>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	3b01      	subs	r3, #1
 8004d56:	2b0f      	cmp	r3, #15
 8004d58:	f200 80b6 	bhi.w	8004ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8004d5c:	a201      	add	r2, pc, #4	; (adr r2, 8004d64 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>)
 8004d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d62:	bf00      	nop
 8004d64:	08004e47 	.word	0x08004e47
 8004d68:	08004ead 	.word	0x08004ead
 8004d6c:	08004ec9 	.word	0x08004ec9
 8004d70:	08004e37 	.word	0x08004e37
 8004d74:	08004ec9 	.word	0x08004ec9
 8004d78:	08004ec9 	.word	0x08004ec9
 8004d7c:	08004ec9 	.word	0x08004ec9
 8004d80:	08004e3f 	.word	0x08004e3f
 8004d84:	08004ec9 	.word	0x08004ec9
 8004d88:	08004ec9 	.word	0x08004ec9
 8004d8c:	08004ec9 	.word	0x08004ec9
 8004d90:	08004ec9 	.word	0x08004ec9
 8004d94:	08004ec9 	.word	0x08004ec9
 8004d98:	08004ec9 	.word	0x08004ec9
 8004d9c:	08004ec9 	.word	0x08004ec9
 8004da0:	08004da5 	.word	0x08004da5
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8004da4:	4b4f      	ldr	r3, [pc, #316]	; (8004ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	61fb      	str	r3, [r7, #28]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004daa:	4b4e      	ldr	r3, [pc, #312]	; (8004ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	f000 808a 	beq.w	8004ecc <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004db8:	69fb      	ldr	r3, [r7, #28]
 8004dba:	0c9b      	lsrs	r3, r3, #18
 8004dbc:	f003 030f 	and.w	r3, r3, #15
 8004dc0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004dc4:	4413      	add	r3, r2
 8004dc6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004dca:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004dcc:	69fb      	ldr	r3, [r7, #28]
 8004dce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d018      	beq.n	8004e08 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004dd6:	4b43      	ldr	r3, [pc, #268]	; (8004ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	0c5b      	lsrs	r3, r3, #17
 8004ddc:	f003 0301 	and.w	r3, r3, #1
 8004de0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004de4:	4413      	add	r3, r2
 8004de6:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004dea:	627b      	str	r3, [r7, #36]	; 0x24
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004dec:	69fb      	ldr	r3, [r7, #28]
 8004dee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d00d      	beq.n	8004e12 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004df6:	4a3c      	ldr	r2, [pc, #240]	; (8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x200>)
 8004df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfa:	fbb2 f2f3 	udiv	r2, r2, r3
 8004dfe:	6a3b      	ldr	r3, [r7, #32]
 8004e00:	fb02 f303 	mul.w	r3, r2, r3
 8004e04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e06:	e004      	b.n	8004e12 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004e08:	6a3b      	ldr	r3, [r7, #32]
 8004e0a:	4a38      	ldr	r2, [pc, #224]	; (8004eec <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 8004e0c:	fb02 f303 	mul.w	r3, r2, r3
 8004e10:	62fb      	str	r3, [r7, #44]	; 0x2c
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004e12:	4b34      	ldr	r3, [pc, #208]	; (8004ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e1e:	d102      	bne.n	8004e26 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8004e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e22:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8004e24:	e052      	b.n	8004ecc <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
          frequency = (pllclk * 2) / 3;
 8004e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e28:	005b      	lsls	r3, r3, #1
 8004e2a:	4a31      	ldr	r2, [pc, #196]	; (8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>)
 8004e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e30:	085b      	lsrs	r3, r3, #1
 8004e32:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004e34:	e04a      	b.n	8004ecc <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 8004e36:	f7ff fd91 	bl	800495c <HAL_RCC_GetSysClockFreq>
 8004e3a:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8004e3c:	e049      	b.n	8004ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 8004e3e:	f7ff fd8d 	bl	800495c <HAL_RCC_GetSysClockFreq>
 8004e42:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8004e44:	e045      	b.n	8004ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8004e46:	4b27      	ldr	r3, [pc, #156]	; (8004ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 8004e48:	6a1b      	ldr	r3, [r3, #32]
 8004e4a:	61fb      	str	r3, [r7, #28]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e56:	d108      	bne.n	8004e6a <HAL_RCCEx_GetPeriphCLKFreq+0x182>
 8004e58:	69fb      	ldr	r3, [r7, #28]
 8004e5a:	f003 0302 	and.w	r3, r3, #2
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d003      	beq.n	8004e6a <HAL_RCCEx_GetPeriphCLKFreq+0x182>
      {
        frequency = LSE_VALUE;
 8004e62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e66:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e68:	e01f      	b.n	8004eaa <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e74:	d109      	bne.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 8004e76:	4b1b      	ldr	r3, [pc, #108]	; (8004ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 8004e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7a:	f003 0302 	and.w	r3, r3, #2
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d003      	beq.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
      {
        frequency = LSI_VALUE;
 8004e82:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004e86:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e88:	e00f      	b.n	8004eaa <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004e8a:	69fb      	ldr	r3, [r7, #28]
 8004e8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e90:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e94:	d11c      	bne.n	8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
 8004e96:	4b13      	ldr	r3, [pc, #76]	; (8004ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d016      	beq.n	8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
      {
        frequency = HSE_VALUE / 128U;
 8004ea2:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004ea6:	62bb      	str	r3, [r7, #40]	; 0x28
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8004ea8:	e012      	b.n	8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
 8004eaa:	e011      	b.n	8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004eac:	f7ff fdd4 	bl	8004a58 <HAL_RCC_GetPCLK2Freq>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	4b0c      	ldr	r3, [pc, #48]	; (8004ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	0b9b      	lsrs	r3, r3, #14
 8004eb8:	f003 0303 	and.w	r3, r3, #3
 8004ebc:	3301      	adds	r3, #1
 8004ebe:	005b      	lsls	r3, r3, #1
 8004ec0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ec4:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004ec6:	e004      	b.n	8004ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
    }
    default:
    {
      break;
 8004ec8:	bf00      	nop
 8004eca:	e002      	b.n	8004ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
      break;
 8004ecc:	bf00      	nop
 8004ece:	e000      	b.n	8004ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
      break;
 8004ed0:	bf00      	nop
    }
  }
  return (frequency);
 8004ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3734      	adds	r7, #52	; 0x34
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd90      	pop	{r4, r7, pc}
 8004edc:	0800ed08 	.word	0x0800ed08
 8004ee0:	0800eccc 	.word	0x0800eccc
 8004ee4:	40021000 	.word	0x40021000
 8004ee8:	007a1200 	.word	0x007a1200
 8004eec:	003d0900 	.word	0x003d0900
 8004ef0:	aaaaaaab 	.word	0xaaaaaaab

08004ef4 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b084      	sub	sp, #16
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8004efc:	2300      	movs	r3, #0
 8004efe:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d101      	bne.n	8004f0a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	e0b4      	b.n	8005074 <HAL_RTC_Init+0x180>
  }

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a5b      	ldr	r2, [pc, #364]	; (800507c <HAL_RTC_Init+0x188>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d004      	beq.n	8004f1e <HAL_RTC_Init+0x2a>
 8004f14:	f240 111d 	movw	r1, #285	; 0x11d
 8004f18:	4859      	ldr	r0, [pc, #356]	; (8005080 <HAL_RTC_Init+0x18c>)
 8004f1a:	f7fd f991 	bl	8002240 <assert_failed>
  assert_param(IS_RTC_CALIB_OUTPUT(hrtc->Init.OutPut));
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d012      	beq.n	8004f4c <HAL_RTC_Init+0x58>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	2b80      	cmp	r3, #128	; 0x80
 8004f2c:	d00e      	beq.n	8004f4c <HAL_RTC_Init+0x58>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f36:	d009      	beq.n	8004f4c <HAL_RTC_Init+0x58>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f40:	d004      	beq.n	8004f4c <HAL_RTC_Init+0x58>
 8004f42:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8004f46:	484e      	ldr	r0, [pc, #312]	; (8005080 <HAL_RTC_Init+0x18c>)
 8004f48:	f7fd f97a 	bl	8002240 <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f54:	d309      	bcc.n	8004f6a <HAL_RTC_Init+0x76>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f5e:	d004      	beq.n	8004f6a <HAL_RTC_Init+0x76>
 8004f60:	f240 111f 	movw	r1, #287	; 0x11f
 8004f64:	4846      	ldr	r0, [pc, #280]	; (8005080 <HAL_RTC_Init+0x18c>)
 8004f66:	f7fd f96b 	bl	8002240 <assert_failed>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	7c5b      	ldrb	r3, [r3, #17]
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d105      	bne.n	8004f80 <HAL_RTC_Init+0x8c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2200      	movs	r2, #0
 8004f78:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f7fd f9e0 	bl	8002340 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2202      	movs	r2, #2
 8004f84:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f000 fbca 	bl	8005720 <HAL_RTC_WaitForSynchro>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d004      	beq.n	8004f9c <HAL_RTC_Init+0xa8>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2204      	movs	r2, #4
 8004f96:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e06b      	b.n	8005074 <HAL_RTC_Init+0x180>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f000 fc83 	bl	80058a8 <RTC_EnterInitMode>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d004      	beq.n	8004fb2 <HAL_RTC_Init+0xbe>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2204      	movs	r2, #4
 8004fac:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e060      	b.n	8005074 <HAL_RTC_Init+0x180>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	685a      	ldr	r2, [r3, #4]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f022 0207 	bic.w	r2, r2, #7
 8004fc0:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d005      	beq.n	8004fd6 <HAL_RTC_Init+0xe2>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8004fca:	4b2e      	ldr	r3, [pc, #184]	; (8005084 <HAL_RTC_Init+0x190>)
 8004fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fce:	4a2d      	ldr	r2, [pc, #180]	; (8005084 <HAL_RTC_Init+0x190>)
 8004fd0:	f023 0301 	bic.w	r3, r3, #1
 8004fd4:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8004fd6:	4b2b      	ldr	r3, [pc, #172]	; (8005084 <HAL_RTC_Init+0x190>)
 8004fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fda:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	4928      	ldr	r1, [pc, #160]	; (8005084 <HAL_RTC_Init+0x190>)
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ff0:	d003      	beq.n	8004ffa <HAL_RTC_Init+0x106>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	60fb      	str	r3, [r7, #12]
 8004ff8:	e00e      	b.n	8005018 <HAL_RTC_Init+0x124>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8004ffa:	2001      	movs	r0, #1
 8004ffc:	f7ff fe74 	bl	8004ce8 <HAL_RCCEx_GetPeriphCLKFreq>
 8005000:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d104      	bne.n	8005012 <HAL_RTC_Init+0x11e>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2204      	movs	r2, #4
 800500c:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e030      	b.n	8005074 <HAL_RTC_Init+0x180>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	3b01      	subs	r3, #1
 8005016:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	f023 010f 	bic.w	r1, r3, #15
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	0c1a      	lsrs	r2, r3, #16
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	430a      	orrs	r2, r1
 800502c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	68db      	ldr	r3, [r3, #12]
 8005034:	0c1b      	lsrs	r3, r3, #16
 8005036:	041b      	lsls	r3, r3, #16
 8005038:	68fa      	ldr	r2, [r7, #12]
 800503a:	b291      	uxth	r1, r2
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	6812      	ldr	r2, [r2, #0]
 8005040:	430b      	orrs	r3, r1
 8005042:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f000 fc57 	bl	80058f8 <RTC_ExitInitMode>
 800504a:	4603      	mov	r3, r0
 800504c:	2b00      	cmp	r3, #0
 800504e:	d004      	beq.n	800505a <HAL_RTC_Init+0x166>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2204      	movs	r2, #4
 8005054:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e00c      	b.n	8005074 <HAL_RTC_Init+0x180>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2201      	movs	r2, #1
 8005064:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2201      	movs	r2, #1
 800506a:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8005072:	2300      	movs	r3, #0
  }
}
 8005074:	4618      	mov	r0, r3
 8005076:	3710      	adds	r7, #16
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}
 800507c:	40002800 	.word	0x40002800
 8005080:	0800ed18 	.word	0x0800ed18
 8005084:	40006c00 	.word	0x40006c00

08005088 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005088:	b590      	push	{r4, r7, lr}
 800508a:	b087      	sub	sp, #28
 800508c:	af00      	add	r7, sp, #0
 800508e:	60f8      	str	r0, [r7, #12]
 8005090:	60b9      	str	r1, [r7, #8]
 8005092:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8005094:	2300      	movs	r3, #0
 8005096:	617b      	str	r3, [r7, #20]
 8005098:	2300      	movs	r3, #0
 800509a:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d002      	beq.n	80050a8 <HAL_RTC_SetTime+0x20>
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d101      	bne.n	80050ac <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	e0cd      	b.n	8005248 <HAL_RTC_SetTime+0x1c0>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d007      	beq.n	80050c2 <HAL_RTC_SetTime+0x3a>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d004      	beq.n	80050c2 <HAL_RTC_SetTime+0x3a>
 80050b8:	f240 21ca 	movw	r1, #714	; 0x2ca
 80050bc:	4864      	ldr	r0, [pc, #400]	; (8005250 <HAL_RTC_SetTime+0x1c8>)
 80050be:	f7fd f8bf 	bl	8002240 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	7c1b      	ldrb	r3, [r3, #16]
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d101      	bne.n	80050ce <HAL_RTC_SetTime+0x46>
 80050ca:	2302      	movs	r3, #2
 80050cc:	e0bc      	b.n	8005248 <HAL_RTC_SetTime+0x1c0>
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2201      	movs	r2, #1
 80050d2:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2202      	movs	r2, #2
 80050d8:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d12e      	bne.n	800513e <HAL_RTC_SetTime+0xb6>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	781b      	ldrb	r3, [r3, #0]
 80050e4:	2b17      	cmp	r3, #23
 80050e6:	d904      	bls.n	80050f2 <HAL_RTC_SetTime+0x6a>
 80050e8:	f240 21d3 	movw	r1, #723	; 0x2d3
 80050ec:	4858      	ldr	r0, [pc, #352]	; (8005250 <HAL_RTC_SetTime+0x1c8>)
 80050ee:	f7fd f8a7 	bl	8002240 <assert_failed>
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	785b      	ldrb	r3, [r3, #1]
 80050f6:	2b3b      	cmp	r3, #59	; 0x3b
 80050f8:	d904      	bls.n	8005104 <HAL_RTC_SetTime+0x7c>
 80050fa:	f44f 7135 	mov.w	r1, #724	; 0x2d4
 80050fe:	4854      	ldr	r0, [pc, #336]	; (8005250 <HAL_RTC_SetTime+0x1c8>)
 8005100:	f7fd f89e 	bl	8002240 <assert_failed>
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	789b      	ldrb	r3, [r3, #2]
 8005108:	2b3b      	cmp	r3, #59	; 0x3b
 800510a:	d904      	bls.n	8005116 <HAL_RTC_SetTime+0x8e>
 800510c:	f240 21d5 	movw	r1, #725	; 0x2d5
 8005110:	484f      	ldr	r0, [pc, #316]	; (8005250 <HAL_RTC_SetTime+0x1c8>)
 8005112:	f7fd f895 	bl	8002240 <assert_failed>

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	781b      	ldrb	r3, [r3, #0]
 800511a:	461a      	mov	r2, r3
 800511c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8005120:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	785b      	ldrb	r3, [r3, #1]
 8005128:	4619      	mov	r1, r3
 800512a:	460b      	mov	r3, r1
 800512c:	011b      	lsls	r3, r3, #4
 800512e:	1a5b      	subs	r3, r3, r1
 8005130:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8005132:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8005134:	68ba      	ldr	r2, [r7, #8]
 8005136:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8005138:	4413      	add	r3, r2
 800513a:	617b      	str	r3, [r7, #20]
 800513c:	e045      	b.n	80051ca <HAL_RTC_SetTime+0x142>
  }
  else
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	781b      	ldrb	r3, [r3, #0]
 8005142:	4618      	mov	r0, r3
 8005144:	f000 fc1d 	bl	8005982 <RTC_Bcd2ToByte>
 8005148:	4603      	mov	r3, r0
 800514a:	2b17      	cmp	r3, #23
 800514c:	d904      	bls.n	8005158 <HAL_RTC_SetTime+0xd0>
 800514e:	f240 21dd 	movw	r1, #733	; 0x2dd
 8005152:	483f      	ldr	r0, [pc, #252]	; (8005250 <HAL_RTC_SetTime+0x1c8>)
 8005154:	f7fd f874 	bl	8002240 <assert_failed>
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	785b      	ldrb	r3, [r3, #1]
 800515c:	4618      	mov	r0, r3
 800515e:	f000 fc10 	bl	8005982 <RTC_Bcd2ToByte>
 8005162:	4603      	mov	r3, r0
 8005164:	2b3b      	cmp	r3, #59	; 0x3b
 8005166:	d904      	bls.n	8005172 <HAL_RTC_SetTime+0xea>
 8005168:	f240 21de 	movw	r1, #734	; 0x2de
 800516c:	4838      	ldr	r0, [pc, #224]	; (8005250 <HAL_RTC_SetTime+0x1c8>)
 800516e:	f7fd f867 	bl	8002240 <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	789b      	ldrb	r3, [r3, #2]
 8005176:	4618      	mov	r0, r3
 8005178:	f000 fc03 	bl	8005982 <RTC_Bcd2ToByte>
 800517c:	4603      	mov	r3, r0
 800517e:	2b3b      	cmp	r3, #59	; 0x3b
 8005180:	d904      	bls.n	800518c <HAL_RTC_SetTime+0x104>
 8005182:	f240 21df 	movw	r1, #735	; 0x2df
 8005186:	4832      	ldr	r0, [pc, #200]	; (8005250 <HAL_RTC_SetTime+0x1c8>)
 8005188:	f7fd f85a 	bl	8002240 <assert_failed>

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	4618      	mov	r0, r3
 8005192:	f000 fbf6 	bl	8005982 <RTC_Bcd2ToByte>
 8005196:	4603      	mov	r3, r0
 8005198:	461a      	mov	r2, r3
 800519a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800519e:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	785b      	ldrb	r3, [r3, #1]
 80051a6:	4618      	mov	r0, r3
 80051a8:	f000 fbeb 	bl	8005982 <RTC_Bcd2ToByte>
 80051ac:	4603      	mov	r3, r0
 80051ae:	461a      	mov	r2, r3
 80051b0:	4613      	mov	r3, r2
 80051b2:	011b      	lsls	r3, r3, #4
 80051b4:	1a9b      	subs	r3, r3, r2
 80051b6:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80051b8:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	789b      	ldrb	r3, [r3, #2]
 80051be:	4618      	mov	r0, r3
 80051c0:	f000 fbdf 	bl	8005982 <RTC_Bcd2ToByte>
 80051c4:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80051c6:	4423      	add	r3, r4
 80051c8:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80051ca:	6979      	ldr	r1, [r7, #20]
 80051cc:	68f8      	ldr	r0, [r7, #12]
 80051ce:	f000 fb04 	bl	80057da <RTC_WriteTimeCounter>
 80051d2:	4603      	mov	r3, r0
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d007      	beq.n	80051e8 <HAL_RTC_SetTime+0x160>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2204      	movs	r2, #4
 80051dc:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2200      	movs	r2, #0
 80051e2:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	e02f      	b.n	8005248 <HAL_RTC_SetTime+0x1c0>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	685a      	ldr	r2, [r3, #4]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f022 0205 	bic.w	r2, r2, #5
 80051f6:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80051f8:	68f8      	ldr	r0, [r7, #12]
 80051fa:	f000 fb15 	bl	8005828 <RTC_ReadAlarmCounter>
 80051fe:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005206:	d018      	beq.n	800523a <HAL_RTC_SetTime+0x1b2>
    {
      if (counter_alarm < counter_time)
 8005208:	693a      	ldr	r2, [r7, #16]
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	429a      	cmp	r2, r3
 800520e:	d214      	bcs.n	800523a <HAL_RTC_SetTime+0x1b2>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8005216:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800521a:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800521c:	6939      	ldr	r1, [r7, #16]
 800521e:	68f8      	ldr	r0, [r7, #12]
 8005220:	f000 fb1b 	bl	800585a <RTC_WriteAlarmCounter>
 8005224:	4603      	mov	r3, r0
 8005226:	2b00      	cmp	r3, #0
 8005228:	d007      	beq.n	800523a <HAL_RTC_SetTime+0x1b2>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2204      	movs	r2, #4
 800522e:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2200      	movs	r2, #0
 8005234:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	e006      	b.n	8005248 <HAL_RTC_SetTime+0x1c0>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2201      	movs	r2, #1
 800523e:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2200      	movs	r2, #0
 8005244:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8005246:	2300      	movs	r3, #0
  }
}
 8005248:	4618      	mov	r0, r3
 800524a:	371c      	adds	r7, #28
 800524c:	46bd      	mov	sp, r7
 800524e:	bd90      	pop	{r4, r7, pc}
 8005250:	0800ed18 	.word	0x0800ed18

08005254 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b088      	sub	sp, #32
 8005258:	af00      	add	r7, sp, #0
 800525a:	60f8      	str	r0, [r7, #12]
 800525c:	60b9      	str	r1, [r7, #8]
 800525e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8005260:	2300      	movs	r3, #0
 8005262:	61bb      	str	r3, [r7, #24]
 8005264:	2300      	movs	r3, #0
 8005266:	61fb      	str	r3, [r7, #28]
 8005268:	2300      	movs	r3, #0
 800526a:	617b      	str	r3, [r7, #20]
 800526c:	2300      	movs	r3, #0
 800526e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d002      	beq.n	800527c <HAL_RTC_GetTime+0x28>
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d101      	bne.n	8005280 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	e0c0      	b.n	8005402 <HAL_RTC_GetTime+0x1ae>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d007      	beq.n	8005296 <HAL_RTC_GetTime+0x42>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2b01      	cmp	r3, #1
 800528a:	d004      	beq.n	8005296 <HAL_RTC_GetTime+0x42>
 800528c:	f240 312d 	movw	r1, #813	; 0x32d
 8005290:	485e      	ldr	r0, [pc, #376]	; (800540c <HAL_RTC_GetTime+0x1b8>)
 8005292:	f7fc ffd5 	bl	8002240 <assert_failed>

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	f003 0304 	and.w	r3, r3, #4
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d001      	beq.n	80052a8 <HAL_RTC_GetTime+0x54>
  {
    return HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	e0ac      	b.n	8005402 <HAL_RTC_GetTime+0x1ae>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80052a8:	68f8      	ldr	r0, [r7, #12]
 80052aa:	f000 fa66 	bl	800577a <RTC_ReadTimeCounter>
 80052ae:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80052b0:	69bb      	ldr	r3, [r7, #24]
 80052b2:	4a57      	ldr	r2, [pc, #348]	; (8005410 <HAL_RTC_GetTime+0x1bc>)
 80052b4:	fba2 2303 	umull	r2, r3, r2, r3
 80052b8:	0adb      	lsrs	r3, r3, #11
 80052ba:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 80052bc:	69ba      	ldr	r2, [r7, #24]
 80052be:	4b54      	ldr	r3, [pc, #336]	; (8005410 <HAL_RTC_GetTime+0x1bc>)
 80052c0:	fba3 1302 	umull	r1, r3, r3, r2
 80052c4:	0adb      	lsrs	r3, r3, #11
 80052c6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80052ca:	fb01 f303 	mul.w	r3, r1, r3
 80052ce:	1ad3      	subs	r3, r2, r3
 80052d0:	4a50      	ldr	r2, [pc, #320]	; (8005414 <HAL_RTC_GetTime+0x1c0>)
 80052d2:	fba2 2303 	umull	r2, r3, r2, r3
 80052d6:	095b      	lsrs	r3, r3, #5
 80052d8:	b2da      	uxtb	r2, r3
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 80052de:	69bb      	ldr	r3, [r7, #24]
 80052e0:	4a4b      	ldr	r2, [pc, #300]	; (8005410 <HAL_RTC_GetTime+0x1bc>)
 80052e2:	fba2 1203 	umull	r1, r2, r2, r3
 80052e6:	0ad2      	lsrs	r2, r2, #11
 80052e8:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80052ec:	fb01 f202 	mul.w	r2, r1, r2
 80052f0:	1a9a      	subs	r2, r3, r2
 80052f2:	4b48      	ldr	r3, [pc, #288]	; (8005414 <HAL_RTC_GetTime+0x1c0>)
 80052f4:	fba3 1302 	umull	r1, r3, r3, r2
 80052f8:	0959      	lsrs	r1, r3, #5
 80052fa:	460b      	mov	r3, r1
 80052fc:	011b      	lsls	r3, r3, #4
 80052fe:	1a5b      	subs	r3, r3, r1
 8005300:	009b      	lsls	r3, r3, #2
 8005302:	1ad1      	subs	r1, r2, r3
 8005304:	b2ca      	uxtb	r2, r1
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	2b17      	cmp	r3, #23
 800530e:	d955      	bls.n	80053bc <HAL_RTC_GetTime+0x168>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	4a41      	ldr	r2, [pc, #260]	; (8005418 <HAL_RTC_GetTime+0x1c4>)
 8005314:	fba2 2303 	umull	r2, r3, r2, r3
 8005318:	091b      	lsrs	r3, r3, #4
 800531a:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 800531c:	6939      	ldr	r1, [r7, #16]
 800531e:	4b3e      	ldr	r3, [pc, #248]	; (8005418 <HAL_RTC_GetTime+0x1c4>)
 8005320:	fba3 2301 	umull	r2, r3, r3, r1
 8005324:	091a      	lsrs	r2, r3, #4
 8005326:	4613      	mov	r3, r2
 8005328:	005b      	lsls	r3, r3, #1
 800532a:	4413      	add	r3, r2
 800532c:	00db      	lsls	r3, r3, #3
 800532e:	1aca      	subs	r2, r1, r3
 8005330:	b2d2      	uxtb	r2, r2
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8005336:	68f8      	ldr	r0, [r7, #12]
 8005338:	f000 fa76 	bl	8005828 <RTC_ReadAlarmCounter>
 800533c:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 800533e:	69fb      	ldr	r3, [r7, #28]
 8005340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005344:	d008      	beq.n	8005358 <HAL_RTC_GetTime+0x104>
 8005346:	69fa      	ldr	r2, [r7, #28]
 8005348:	69bb      	ldr	r3, [r7, #24]
 800534a:	429a      	cmp	r2, r3
 800534c:	d904      	bls.n	8005358 <HAL_RTC_GetTime+0x104>
    {
      counter_alarm -= counter_time;
 800534e:	69fa      	ldr	r2, [r7, #28]
 8005350:	69bb      	ldr	r3, [r7, #24]
 8005352:	1ad3      	subs	r3, r2, r3
 8005354:	61fb      	str	r3, [r7, #28]
 8005356:	e002      	b.n	800535e <HAL_RTC_GetTime+0x10a>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8005358:	f04f 33ff 	mov.w	r3, #4294967295
 800535c:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	4a2e      	ldr	r2, [pc, #184]	; (800541c <HAL_RTC_GetTime+0x1c8>)
 8005362:	fb02 f303 	mul.w	r3, r2, r3
 8005366:	69ba      	ldr	r2, [r7, #24]
 8005368:	1ad3      	subs	r3, r2, r3
 800536a:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800536c:	69b9      	ldr	r1, [r7, #24]
 800536e:	68f8      	ldr	r0, [r7, #12]
 8005370:	f000 fa33 	bl	80057da <RTC_WriteTimeCounter>
 8005374:	4603      	mov	r3, r0
 8005376:	2b00      	cmp	r3, #0
 8005378:	d001      	beq.n	800537e <HAL_RTC_GetTime+0x12a>
    {
      return HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	e041      	b.n	8005402 <HAL_RTC_GetTime+0x1ae>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800537e:	69fb      	ldr	r3, [r7, #28]
 8005380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005384:	d00c      	beq.n	80053a0 <HAL_RTC_GetTime+0x14c>
    {
      counter_alarm += counter_time;
 8005386:	69fa      	ldr	r2, [r7, #28]
 8005388:	69bb      	ldr	r3, [r7, #24]
 800538a:	4413      	add	r3, r2
 800538c:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800538e:	69f9      	ldr	r1, [r7, #28]
 8005390:	68f8      	ldr	r0, [r7, #12]
 8005392:	f000 fa62 	bl	800585a <RTC_WriteAlarmCounter>
 8005396:	4603      	mov	r3, r0
 8005398:	2b00      	cmp	r3, #0
 800539a:	d00a      	beq.n	80053b2 <HAL_RTC_GetTime+0x15e>
      {
        return HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	e030      	b.n	8005402 <HAL_RTC_GetTime+0x1ae>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80053a0:	69f9      	ldr	r1, [r7, #28]
 80053a2:	68f8      	ldr	r0, [r7, #12]
 80053a4:	f000 fa59 	bl	800585a <RTC_WriteAlarmCounter>
 80053a8:	4603      	mov	r3, r0
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d001      	beq.n	80053b2 <HAL_RTC_GetTime+0x15e>
      {
        return HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	e027      	b.n	8005402 <HAL_RTC_GetTime+0x1ae>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 80053b2:	6979      	ldr	r1, [r7, #20]
 80053b4:	68f8      	ldr	r0, [r7, #12]
 80053b6:	f000 fb01 	bl	80059bc <RTC_DateUpdate>
 80053ba:	e003      	b.n	80053c4 <HAL_RTC_GetTime+0x170>
  }
  else
  {
    sTime->Hours = hours;
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	b2da      	uxtb	r2, r3
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d01a      	beq.n	8005400 <HAL_RTC_GetTime+0x1ac>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	781b      	ldrb	r3, [r3, #0]
 80053ce:	4618      	mov	r0, r3
 80053d0:	f000 faba 	bl	8005948 <RTC_ByteToBcd2>
 80053d4:	4603      	mov	r3, r0
 80053d6:	461a      	mov	r2, r3
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	785b      	ldrb	r3, [r3, #1]
 80053e0:	4618      	mov	r0, r3
 80053e2:	f000 fab1 	bl	8005948 <RTC_ByteToBcd2>
 80053e6:	4603      	mov	r3, r0
 80053e8:	461a      	mov	r2, r3
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	789b      	ldrb	r3, [r3, #2]
 80053f2:	4618      	mov	r0, r3
 80053f4:	f000 faa8 	bl	8005948 <RTC_ByteToBcd2>
 80053f8:	4603      	mov	r3, r0
 80053fa:	461a      	mov	r2, r3
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005400:	2300      	movs	r3, #0
}
 8005402:	4618      	mov	r0, r3
 8005404:	3720      	adds	r7, #32
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}
 800540a:	bf00      	nop
 800540c:	0800ed18 	.word	0x0800ed18
 8005410:	91a2b3c5 	.word	0x91a2b3c5
 8005414:	88888889 	.word	0x88888889
 8005418:	aaaaaaab 	.word	0xaaaaaaab
 800541c:	00015180 	.word	0x00015180

08005420 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b088      	sub	sp, #32
 8005424:	af00      	add	r7, sp, #0
 8005426:	60f8      	str	r0, [r7, #12]
 8005428:	60b9      	str	r1, [r7, #8]
 800542a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 800542c:	2300      	movs	r3, #0
 800542e:	61fb      	str	r3, [r7, #28]
 8005430:	2300      	movs	r3, #0
 8005432:	61bb      	str	r3, [r7, #24]
 8005434:	2300      	movs	r3, #0
 8005436:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d002      	beq.n	8005444 <HAL_RTC_SetDate+0x24>
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d101      	bne.n	8005448 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8005444:	2301      	movs	r3, #1
 8005446:	e0fc      	b.n	8005642 <HAL_RTC_SetDate+0x222>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d007      	beq.n	800545e <HAL_RTC_SetDate+0x3e>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2b01      	cmp	r3, #1
 8005452:	d004      	beq.n	800545e <HAL_RTC_SetDate+0x3e>
 8005454:	f44f 7167 	mov.w	r1, #924	; 0x39c
 8005458:	487c      	ldr	r0, [pc, #496]	; (800564c <HAL_RTC_SetDate+0x22c>)
 800545a:	f7fc fef1 	bl	8002240 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	7c1b      	ldrb	r3, [r3, #16]
 8005462:	2b01      	cmp	r3, #1
 8005464:	d101      	bne.n	800546a <HAL_RTC_SetDate+0x4a>
 8005466:	2302      	movs	r3, #2
 8005468:	e0eb      	b.n	8005642 <HAL_RTC_SetDate+0x222>
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2201      	movs	r2, #1
 800546e:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2202      	movs	r2, #2
 8005474:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d12f      	bne.n	80054dc <HAL_RTC_SetDate+0xbc>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	78db      	ldrb	r3, [r3, #3]
 8005480:	2b63      	cmp	r3, #99	; 0x63
 8005482:	d904      	bls.n	800548e <HAL_RTC_SetDate+0x6e>
 8005484:	f240 31a5 	movw	r1, #933	; 0x3a5
 8005488:	4870      	ldr	r0, [pc, #448]	; (800564c <HAL_RTC_SetDate+0x22c>)
 800548a:	f7fc fed9 	bl	8002240 <assert_failed>
    assert_param(IS_RTC_MONTH(sDate->Month));
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	785b      	ldrb	r3, [r3, #1]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d003      	beq.n	800549e <HAL_RTC_SetDate+0x7e>
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	785b      	ldrb	r3, [r3, #1]
 800549a:	2b0c      	cmp	r3, #12
 800549c:	d904      	bls.n	80054a8 <HAL_RTC_SetDate+0x88>
 800549e:	f240 31a6 	movw	r1, #934	; 0x3a6
 80054a2:	486a      	ldr	r0, [pc, #424]	; (800564c <HAL_RTC_SetDate+0x22c>)
 80054a4:	f7fc fecc 	bl	8002240 <assert_failed>
    assert_param(IS_RTC_DATE(sDate->Date));
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	789b      	ldrb	r3, [r3, #2]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d003      	beq.n	80054b8 <HAL_RTC_SetDate+0x98>
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	789b      	ldrb	r3, [r3, #2]
 80054b4:	2b1f      	cmp	r3, #31
 80054b6:	d904      	bls.n	80054c2 <HAL_RTC_SetDate+0xa2>
 80054b8:	f240 31a7 	movw	r1, #935	; 0x3a7
 80054bc:	4863      	ldr	r0, [pc, #396]	; (800564c <HAL_RTC_SetDate+0x22c>)
 80054be:	f7fc febf 	bl	8002240 <assert_failed>

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	78da      	ldrb	r2, [r3, #3]
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	785a      	ldrb	r2, [r3, #1]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	789a      	ldrb	r2, [r3, #2]
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	739a      	strb	r2, [r3, #14]
 80054da:	e051      	b.n	8005580 <HAL_RTC_SetDate+0x160>
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	78db      	ldrb	r3, [r3, #3]
 80054e0:	4618      	mov	r0, r3
 80054e2:	f000 fa4e 	bl	8005982 <RTC_Bcd2ToByte>
 80054e6:	4603      	mov	r3, r0
 80054e8:	2b63      	cmp	r3, #99	; 0x63
 80054ea:	d904      	bls.n	80054f6 <HAL_RTC_SetDate+0xd6>
 80054ec:	f44f 716c 	mov.w	r1, #944	; 0x3b0
 80054f0:	4856      	ldr	r0, [pc, #344]	; (800564c <HAL_RTC_SetDate+0x22c>)
 80054f2:	f7fc fea5 	bl	8002240 <assert_failed>
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	785b      	ldrb	r3, [r3, #1]
 80054fa:	4618      	mov	r0, r3
 80054fc:	f000 fa41 	bl	8005982 <RTC_Bcd2ToByte>
 8005500:	4603      	mov	r3, r0
 8005502:	2b00      	cmp	r3, #0
 8005504:	d007      	beq.n	8005516 <HAL_RTC_SetDate+0xf6>
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	785b      	ldrb	r3, [r3, #1]
 800550a:	4618      	mov	r0, r3
 800550c:	f000 fa39 	bl	8005982 <RTC_Bcd2ToByte>
 8005510:	4603      	mov	r3, r0
 8005512:	2b0c      	cmp	r3, #12
 8005514:	d904      	bls.n	8005520 <HAL_RTC_SetDate+0x100>
 8005516:	f240 31b1 	movw	r1, #945	; 0x3b1
 800551a:	484c      	ldr	r0, [pc, #304]	; (800564c <HAL_RTC_SetDate+0x22c>)
 800551c:	f7fc fe90 	bl	8002240 <assert_failed>
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	789b      	ldrb	r3, [r3, #2]
 8005524:	4618      	mov	r0, r3
 8005526:	f000 fa2c 	bl	8005982 <RTC_Bcd2ToByte>
 800552a:	4603      	mov	r3, r0
 800552c:	2b00      	cmp	r3, #0
 800552e:	d007      	beq.n	8005540 <HAL_RTC_SetDate+0x120>
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	789b      	ldrb	r3, [r3, #2]
 8005534:	4618      	mov	r0, r3
 8005536:	f000 fa24 	bl	8005982 <RTC_Bcd2ToByte>
 800553a:	4603      	mov	r3, r0
 800553c:	2b1f      	cmp	r3, #31
 800553e:	d904      	bls.n	800554a <HAL_RTC_SetDate+0x12a>
 8005540:	f240 31b2 	movw	r1, #946	; 0x3b2
 8005544:	4841      	ldr	r0, [pc, #260]	; (800564c <HAL_RTC_SetDate+0x22c>)
 8005546:	f7fc fe7b 	bl	8002240 <assert_failed>

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	78db      	ldrb	r3, [r3, #3]
 800554e:	4618      	mov	r0, r3
 8005550:	f000 fa17 	bl	8005982 <RTC_Bcd2ToByte>
 8005554:	4603      	mov	r3, r0
 8005556:	461a      	mov	r2, r3
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	785b      	ldrb	r3, [r3, #1]
 8005560:	4618      	mov	r0, r3
 8005562:	f000 fa0e 	bl	8005982 <RTC_Bcd2ToByte>
 8005566:	4603      	mov	r3, r0
 8005568:	461a      	mov	r2, r3
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	789b      	ldrb	r3, [r3, #2]
 8005572:	4618      	mov	r0, r3
 8005574:	f000 fa05 	bl	8005982 <RTC_Bcd2ToByte>
 8005578:	4603      	mov	r3, r0
 800557a:	461a      	mov	r2, r3
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	7bdb      	ldrb	r3, [r3, #15]
 8005584:	4618      	mov	r0, r3
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	7b59      	ldrb	r1, [r3, #13]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	7b9b      	ldrb	r3, [r3, #14]
 800558e:	461a      	mov	r2, r3
 8005590:	f000 faf0 	bl	8005b74 <RTC_WeekDayNum>
 8005594:	4603      	mov	r3, r0
 8005596:	461a      	mov	r2, r3
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	7b1a      	ldrb	r2, [r3, #12]
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80055a4:	68f8      	ldr	r0, [r7, #12]
 80055a6:	f000 f8e8 	bl	800577a <RTC_ReadTimeCounter>
 80055aa:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80055ac:	69fb      	ldr	r3, [r7, #28]
 80055ae:	4a28      	ldr	r2, [pc, #160]	; (8005650 <HAL_RTC_SetDate+0x230>)
 80055b0:	fba2 2303 	umull	r2, r3, r2, r3
 80055b4:	0adb      	lsrs	r3, r3, #11
 80055b6:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	2b18      	cmp	r3, #24
 80055bc:	d93a      	bls.n	8005634 <HAL_RTC_SetDate+0x214>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	4a24      	ldr	r2, [pc, #144]	; (8005654 <HAL_RTC_SetDate+0x234>)
 80055c2:	fba2 2303 	umull	r2, r3, r2, r3
 80055c6:	091b      	lsrs	r3, r3, #4
 80055c8:	4a23      	ldr	r2, [pc, #140]	; (8005658 <HAL_RTC_SetDate+0x238>)
 80055ca:	fb02 f303 	mul.w	r3, r2, r3
 80055ce:	69fa      	ldr	r2, [r7, #28]
 80055d0:	1ad3      	subs	r3, r2, r3
 80055d2:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80055d4:	69f9      	ldr	r1, [r7, #28]
 80055d6:	68f8      	ldr	r0, [r7, #12]
 80055d8:	f000 f8ff 	bl	80057da <RTC_WriteTimeCounter>
 80055dc:	4603      	mov	r3, r0
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d007      	beq.n	80055f2 <HAL_RTC_SetDate+0x1d2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2204      	movs	r2, #4
 80055e6:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2200      	movs	r2, #0
 80055ec:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	e027      	b.n	8005642 <HAL_RTC_SetDate+0x222>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80055f2:	68f8      	ldr	r0, [r7, #12]
 80055f4:	f000 f918 	bl	8005828 <RTC_ReadAlarmCounter>
 80055f8:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80055fa:	69bb      	ldr	r3, [r7, #24]
 80055fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005600:	d018      	beq.n	8005634 <HAL_RTC_SetDate+0x214>
    {
      if (counter_alarm < counter_time)
 8005602:	69ba      	ldr	r2, [r7, #24]
 8005604:	69fb      	ldr	r3, [r7, #28]
 8005606:	429a      	cmp	r2, r3
 8005608:	d214      	bcs.n	8005634 <HAL_RTC_SetDate+0x214>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800560a:	69bb      	ldr	r3, [r7, #24]
 800560c:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8005610:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005614:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005616:	69b9      	ldr	r1, [r7, #24]
 8005618:	68f8      	ldr	r0, [r7, #12]
 800561a:	f000 f91e 	bl	800585a <RTC_WriteAlarmCounter>
 800561e:	4603      	mov	r3, r0
 8005620:	2b00      	cmp	r3, #0
 8005622:	d007      	beq.n	8005634 <HAL_RTC_SetDate+0x214>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2204      	movs	r2, #4
 8005628:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2200      	movs	r2, #0
 800562e:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	e006      	b.n	8005642 <HAL_RTC_SetDate+0x222>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2201      	movs	r2, #1
 8005638:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2200      	movs	r2, #0
 800563e:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8005640:	2300      	movs	r3, #0
}
 8005642:	4618      	mov	r0, r3
 8005644:	3720      	adds	r7, #32
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
 800564a:	bf00      	nop
 800564c:	0800ed18 	.word	0x0800ed18
 8005650:	91a2b3c5 	.word	0x91a2b3c5
 8005654:	aaaaaaab 	.word	0xaaaaaaab
 8005658:	00015180 	.word	0x00015180

0800565c <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b086      	sub	sp, #24
 8005660:	af00      	add	r7, sp, #0
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	60b9      	str	r1, [r7, #8]
 8005666:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 8005668:	f107 0314 	add.w	r3, r7, #20
 800566c:	2100      	movs	r1, #0
 800566e:	460a      	mov	r2, r1
 8005670:	801a      	strh	r2, [r3, #0]
 8005672:	460a      	mov	r2, r1
 8005674:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d002      	beq.n	8005682 <HAL_RTC_GetDate+0x26>
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d101      	bne.n	8005686 <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	e045      	b.n	8005712 <HAL_RTC_GetDate+0xb6>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d007      	beq.n	800569c <HAL_RTC_GetDate+0x40>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2b01      	cmp	r3, #1
 8005690:	d004      	beq.n	800569c <HAL_RTC_GetDate+0x40>
 8005692:	f240 410e 	movw	r1, #1038	; 0x40e
 8005696:	4821      	ldr	r0, [pc, #132]	; (800571c <HAL_RTC_GetDate+0xc0>)
 8005698:	f7fc fdd2 	bl	8002240 <assert_failed>

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 800569c:	f107 0314 	add.w	r3, r7, #20
 80056a0:	2200      	movs	r2, #0
 80056a2:	4619      	mov	r1, r3
 80056a4:	68f8      	ldr	r0, [r7, #12]
 80056a6:	f7ff fdd5 	bl	8005254 <HAL_RTC_GetTime>
 80056aa:	4603      	mov	r3, r0
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d001      	beq.n	80056b4 <HAL_RTC_GetDate+0x58>
  {
    return HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	e02e      	b.n	8005712 <HAL_RTC_GetDate+0xb6>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	7b1a      	ldrb	r2, [r3, #12]
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	7bda      	ldrb	r2, [r3, #15]
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	7b5a      	ldrb	r2, [r3, #13]
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	7b9a      	ldrb	r2, [r3, #14]
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d01a      	beq.n	8005710 <HAL_RTC_GetDate+0xb4>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	78db      	ldrb	r3, [r3, #3]
 80056de:	4618      	mov	r0, r3
 80056e0:	f000 f932 	bl	8005948 <RTC_ByteToBcd2>
 80056e4:	4603      	mov	r3, r0
 80056e6:	461a      	mov	r2, r3
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	785b      	ldrb	r3, [r3, #1]
 80056f0:	4618      	mov	r0, r3
 80056f2:	f000 f929 	bl	8005948 <RTC_ByteToBcd2>
 80056f6:	4603      	mov	r3, r0
 80056f8:	461a      	mov	r2, r3
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	789b      	ldrb	r3, [r3, #2]
 8005702:	4618      	mov	r0, r3
 8005704:	f000 f920 	bl	8005948 <RTC_ByteToBcd2>
 8005708:	4603      	mov	r3, r0
 800570a:	461a      	mov	r2, r3
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005710:	2300      	movs	r3, #0
}
 8005712:	4618      	mov	r0, r3
 8005714:	3718      	adds	r7, #24
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
 800571a:	bf00      	nop
 800571c:	0800ed18 	.word	0x0800ed18

08005720 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b084      	sub	sp, #16
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005728:	2300      	movs	r3, #0
 800572a:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d101      	bne.n	8005736 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	e01d      	b.n	8005772 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	685a      	ldr	r2, [r3, #4]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f022 0208 	bic.w	r2, r2, #8
 8005744:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8005746:	f7fd fa4b 	bl	8002be0 <HAL_GetTick>
 800574a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800574c:	e009      	b.n	8005762 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800574e:	f7fd fa47 	bl	8002be0 <HAL_GetTick>
 8005752:	4602      	mov	r2, r0
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	1ad3      	subs	r3, r2, r3
 8005758:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800575c:	d901      	bls.n	8005762 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 800575e:	2303      	movs	r3, #3
 8005760:	e007      	b.n	8005772 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	f003 0308 	and.w	r3, r3, #8
 800576c:	2b00      	cmp	r3, #0
 800576e:	d0ee      	beq.n	800574e <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8005770:	2300      	movs	r3, #0
}
 8005772:	4618      	mov	r0, r3
 8005774:	3710      	adds	r7, #16
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}

0800577a <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 800577a:	b480      	push	{r7}
 800577c:	b087      	sub	sp, #28
 800577e:	af00      	add	r7, sp, #0
 8005780:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8005782:	2300      	movs	r3, #0
 8005784:	827b      	strh	r3, [r7, #18]
 8005786:	2300      	movs	r3, #0
 8005788:	823b      	strh	r3, [r7, #16]
 800578a:	2300      	movs	r3, #0
 800578c:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 800578e:	2300      	movs	r3, #0
 8005790:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	699b      	ldr	r3, [r3, #24]
 8005798:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	69db      	ldr	r3, [r3, #28]
 80057a0:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	699b      	ldr	r3, [r3, #24]
 80057a8:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 80057aa:	8a7a      	ldrh	r2, [r7, #18]
 80057ac:	8a3b      	ldrh	r3, [r7, #16]
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d008      	beq.n	80057c4 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80057b2:	8a3b      	ldrh	r3, [r7, #16]
 80057b4:	041a      	lsls	r2, r3, #16
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	69db      	ldr	r3, [r3, #28]
 80057bc:	b29b      	uxth	r3, r3
 80057be:	4313      	orrs	r3, r2
 80057c0:	617b      	str	r3, [r7, #20]
 80057c2:	e004      	b.n	80057ce <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 80057c4:	8a7b      	ldrh	r3, [r7, #18]
 80057c6:	041a      	lsls	r2, r3, #16
 80057c8:	89fb      	ldrh	r3, [r7, #14]
 80057ca:	4313      	orrs	r3, r2
 80057cc:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 80057ce:	697b      	ldr	r3, [r7, #20]
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	371c      	adds	r7, #28
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bc80      	pop	{r7}
 80057d8:	4770      	bx	lr

080057da <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 80057da:	b580      	push	{r7, lr}
 80057dc:	b084      	sub	sp, #16
 80057de:	af00      	add	r7, sp, #0
 80057e0:	6078      	str	r0, [r7, #4]
 80057e2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057e4:	2300      	movs	r3, #0
 80057e6:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f000 f85d 	bl	80058a8 <RTC_EnterInitMode>
 80057ee:	4603      	mov	r3, r0
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d002      	beq.n	80057fa <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	73fb      	strb	r3, [r7, #15]
 80057f8:	e011      	b.n	800581e <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	683a      	ldr	r2, [r7, #0]
 8005800:	0c12      	lsrs	r2, r2, #16
 8005802:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	683a      	ldr	r2, [r7, #0]
 800580a:	b292      	uxth	r2, r2
 800580c:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f000 f872 	bl	80058f8 <RTC_ExitInitMode>
 8005814:	4603      	mov	r3, r0
 8005816:	2b00      	cmp	r3, #0
 8005818:	d001      	beq.n	800581e <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800581e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005820:	4618      	mov	r0, r3
 8005822:	3710      	adds	r7, #16
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}

08005828 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8005828:	b480      	push	{r7}
 800582a:	b085      	sub	sp, #20
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8005830:	2300      	movs	r3, #0
 8005832:	81fb      	strh	r3, [r7, #14]
 8005834:	2300      	movs	r3, #0
 8005836:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	6a1b      	ldr	r3, [r3, #32]
 800583e:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005846:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8005848:	89fb      	ldrh	r3, [r7, #14]
 800584a:	041a      	lsls	r2, r3, #16
 800584c:	89bb      	ldrh	r3, [r7, #12]
 800584e:	4313      	orrs	r3, r2
}
 8005850:	4618      	mov	r0, r3
 8005852:	3714      	adds	r7, #20
 8005854:	46bd      	mov	sp, r7
 8005856:	bc80      	pop	{r7}
 8005858:	4770      	bx	lr

0800585a <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 800585a:	b580      	push	{r7, lr}
 800585c:	b084      	sub	sp, #16
 800585e:	af00      	add	r7, sp, #0
 8005860:	6078      	str	r0, [r7, #4]
 8005862:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005864:	2300      	movs	r3, #0
 8005866:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f000 f81d 	bl	80058a8 <RTC_EnterInitMode>
 800586e:	4603      	mov	r3, r0
 8005870:	2b00      	cmp	r3, #0
 8005872:	d002      	beq.n	800587a <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	73fb      	strb	r3, [r7, #15]
 8005878:	e011      	b.n	800589e <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	683a      	ldr	r2, [r7, #0]
 8005880:	0c12      	lsrs	r2, r2, #16
 8005882:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	683a      	ldr	r2, [r7, #0]
 800588a:	b292      	uxth	r2, r2
 800588c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f000 f832 	bl	80058f8 <RTC_ExitInitMode>
 8005894:	4603      	mov	r3, r0
 8005896:	2b00      	cmp	r3, #0
 8005898:	d001      	beq.n	800589e <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800589e:	7bfb      	ldrb	r3, [r7, #15]
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3710      	adds	r7, #16
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}

080058a8 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b084      	sub	sp, #16
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80058b0:	2300      	movs	r3, #0
 80058b2:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 80058b4:	f7fd f994 	bl	8002be0 <HAL_GetTick>
 80058b8:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80058ba:	e009      	b.n	80058d0 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80058bc:	f7fd f990 	bl	8002be0 <HAL_GetTick>
 80058c0:	4602      	mov	r2, r0
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	1ad3      	subs	r3, r2, r3
 80058c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80058ca:	d901      	bls.n	80058d0 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 80058cc:	2303      	movs	r3, #3
 80058ce:	e00f      	b.n	80058f0 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	f003 0320 	and.w	r3, r3, #32
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d0ee      	beq.n	80058bc <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	685a      	ldr	r2, [r3, #4]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f042 0210 	orr.w	r2, r2, #16
 80058ec:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 80058ee:	2300      	movs	r3, #0
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3710      	adds	r7, #16
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b084      	sub	sp, #16
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005900:	2300      	movs	r3, #0
 8005902:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	685a      	ldr	r2, [r3, #4]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f022 0210 	bic.w	r2, r2, #16
 8005912:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8005914:	f7fd f964 	bl	8002be0 <HAL_GetTick>
 8005918:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800591a:	e009      	b.n	8005930 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800591c:	f7fd f960 	bl	8002be0 <HAL_GetTick>
 8005920:	4602      	mov	r2, r0
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	1ad3      	subs	r3, r2, r3
 8005926:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800592a:	d901      	bls.n	8005930 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 800592c:	2303      	movs	r3, #3
 800592e:	e007      	b.n	8005940 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	f003 0320 	and.w	r3, r3, #32
 800593a:	2b00      	cmp	r3, #0
 800593c:	d0ee      	beq.n	800591c <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 800593e:	2300      	movs	r3, #0
}
 8005940:	4618      	mov	r0, r3
 8005942:	3710      	adds	r7, #16
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}

08005948 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005948:	b480      	push	{r7}
 800594a:	b085      	sub	sp, #20
 800594c:	af00      	add	r7, sp, #0
 800594e:	4603      	mov	r3, r0
 8005950:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005952:	2300      	movs	r3, #0
 8005954:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8005956:	e005      	b.n	8005964 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	3301      	adds	r3, #1
 800595c:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800595e:	79fb      	ldrb	r3, [r7, #7]
 8005960:	3b0a      	subs	r3, #10
 8005962:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8005964:	79fb      	ldrb	r3, [r7, #7]
 8005966:	2b09      	cmp	r3, #9
 8005968:	d8f6      	bhi.n	8005958 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	b2db      	uxtb	r3, r3
 800596e:	011b      	lsls	r3, r3, #4
 8005970:	b2da      	uxtb	r2, r3
 8005972:	79fb      	ldrb	r3, [r7, #7]
 8005974:	4313      	orrs	r3, r2
 8005976:	b2db      	uxtb	r3, r3
}
 8005978:	4618      	mov	r0, r3
 800597a:	3714      	adds	r7, #20
 800597c:	46bd      	mov	sp, r7
 800597e:	bc80      	pop	{r7}
 8005980:	4770      	bx	lr

08005982 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005982:	b480      	push	{r7}
 8005984:	b085      	sub	sp, #20
 8005986:	af00      	add	r7, sp, #0
 8005988:	4603      	mov	r3, r0
 800598a:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800598c:	2300      	movs	r3, #0
 800598e:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8005990:	79fb      	ldrb	r3, [r7, #7]
 8005992:	091b      	lsrs	r3, r3, #4
 8005994:	b2db      	uxtb	r3, r3
 8005996:	461a      	mov	r2, r3
 8005998:	4613      	mov	r3, r2
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	4413      	add	r3, r2
 800599e:	005b      	lsls	r3, r3, #1
 80059a0:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80059a2:	79fb      	ldrb	r3, [r7, #7]
 80059a4:	f003 030f 	and.w	r3, r3, #15
 80059a8:	b2da      	uxtb	r2, r3
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	4413      	add	r3, r2
 80059b0:	b2db      	uxtb	r3, r3
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3714      	adds	r7, #20
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bc80      	pop	{r7}
 80059ba:	4770      	bx	lr

080059bc <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b086      	sub	sp, #24
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 80059c6:	2300      	movs	r3, #0
 80059c8:	617b      	str	r3, [r7, #20]
 80059ca:	2300      	movs	r3, #0
 80059cc:	613b      	str	r3, [r7, #16]
 80059ce:	2300      	movs	r3, #0
 80059d0:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 80059d2:	2300      	movs	r3, #0
 80059d4:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	7bdb      	ldrb	r3, [r3, #15]
 80059da:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	7b5b      	ldrb	r3, [r3, #13]
 80059e0:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	7b9b      	ldrb	r3, [r3, #14]
 80059e6:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 80059e8:	2300      	movs	r3, #0
 80059ea:	60bb      	str	r3, [r7, #8]
 80059ec:	e06f      	b.n	8005ace <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d011      	beq.n	8005a18 <RTC_DateUpdate+0x5c>
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	2b03      	cmp	r3, #3
 80059f8:	d00e      	beq.n	8005a18 <RTC_DateUpdate+0x5c>
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	2b05      	cmp	r3, #5
 80059fe:	d00b      	beq.n	8005a18 <RTC_DateUpdate+0x5c>
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	2b07      	cmp	r3, #7
 8005a04:	d008      	beq.n	8005a18 <RTC_DateUpdate+0x5c>
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	2b08      	cmp	r3, #8
 8005a0a:	d005      	beq.n	8005a18 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	2b0a      	cmp	r3, #10
 8005a10:	d002      	beq.n	8005a18 <RTC_DateUpdate+0x5c>
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	2b0c      	cmp	r3, #12
 8005a16:	d117      	bne.n	8005a48 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2b1e      	cmp	r3, #30
 8005a1c:	d803      	bhi.n	8005a26 <RTC_DateUpdate+0x6a>
      {
        day++;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	3301      	adds	r3, #1
 8005a22:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8005a24:	e050      	b.n	8005ac8 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	2b0c      	cmp	r3, #12
 8005a2a:	d005      	beq.n	8005a38 <RTC_DateUpdate+0x7c>
        {
          month++;
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	3301      	adds	r3, #1
 8005a30:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005a32:	2301      	movs	r3, #1
 8005a34:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8005a36:	e047      	b.n	8005ac8 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	60fb      	str	r3, [r7, #12]
          year++;
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	3301      	adds	r3, #1
 8005a44:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8005a46:	e03f      	b.n	8005ac8 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	2b04      	cmp	r3, #4
 8005a4c:	d008      	beq.n	8005a60 <RTC_DateUpdate+0xa4>
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	2b06      	cmp	r3, #6
 8005a52:	d005      	beq.n	8005a60 <RTC_DateUpdate+0xa4>
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	2b09      	cmp	r3, #9
 8005a58:	d002      	beq.n	8005a60 <RTC_DateUpdate+0xa4>
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	2b0b      	cmp	r3, #11
 8005a5e:	d10c      	bne.n	8005a7a <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2b1d      	cmp	r3, #29
 8005a64:	d803      	bhi.n	8005a6e <RTC_DateUpdate+0xb2>
      {
        day++;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	3301      	adds	r3, #1
 8005a6a:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8005a6c:	e02c      	b.n	8005ac8 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	3301      	adds	r3, #1
 8005a72:	613b      	str	r3, [r7, #16]
        day = 1U;
 8005a74:	2301      	movs	r3, #1
 8005a76:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8005a78:	e026      	b.n	8005ac8 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	2b02      	cmp	r3, #2
 8005a7e:	d123      	bne.n	8005ac8 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2b1b      	cmp	r3, #27
 8005a84:	d803      	bhi.n	8005a8e <RTC_DateUpdate+0xd2>
      {
        day++;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	3301      	adds	r3, #1
 8005a8a:	60fb      	str	r3, [r7, #12]
 8005a8c:	e01c      	b.n	8005ac8 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2b1c      	cmp	r3, #28
 8005a92:	d111      	bne.n	8005ab8 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f000 f839 	bl	8005b10 <RTC_IsLeapYear>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d003      	beq.n	8005aac <RTC_DateUpdate+0xf0>
        {
          day++;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	3301      	adds	r3, #1
 8005aa8:	60fb      	str	r3, [r7, #12]
 8005aaa:	e00d      	b.n	8005ac8 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	3301      	adds	r3, #1
 8005ab0:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	60fb      	str	r3, [r7, #12]
 8005ab6:	e007      	b.n	8005ac8 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2b1d      	cmp	r3, #29
 8005abc:	d104      	bne.n	8005ac8 <RTC_DateUpdate+0x10c>
      {
        month++;
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	3301      	adds	r3, #1
 8005ac2:	613b      	str	r3, [r7, #16]
        day = 1U;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	3301      	adds	r3, #1
 8005acc:	60bb      	str	r3, [r7, #8]
 8005ace:	68ba      	ldr	r2, [r7, #8]
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d38b      	bcc.n	80059ee <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	b2da      	uxtb	r2, r3
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	b2da      	uxtb	r2, r3
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	b2da      	uxtb	r2, r3
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	b2db      	uxtb	r3, r3
 8005af2:	68fa      	ldr	r2, [r7, #12]
 8005af4:	b2d2      	uxtb	r2, r2
 8005af6:	4619      	mov	r1, r3
 8005af8:	6978      	ldr	r0, [r7, #20]
 8005afa:	f000 f83b 	bl	8005b74 <RTC_WeekDayNum>
 8005afe:	4603      	mov	r3, r0
 8005b00:	461a      	mov	r2, r3
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	731a      	strb	r2, [r3, #12]
}
 8005b06:	bf00      	nop
 8005b08:	3718      	adds	r7, #24
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}
	...

08005b10 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b083      	sub	sp, #12
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	4603      	mov	r3, r0
 8005b18:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8005b1a:	88fb      	ldrh	r3, [r7, #6]
 8005b1c:	f003 0303 	and.w	r3, r3, #3
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d001      	beq.n	8005b2a <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8005b26:	2300      	movs	r3, #0
 8005b28:	e01d      	b.n	8005b66 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8005b2a:	88fb      	ldrh	r3, [r7, #6]
 8005b2c:	4a10      	ldr	r2, [pc, #64]	; (8005b70 <RTC_IsLeapYear+0x60>)
 8005b2e:	fba2 1203 	umull	r1, r2, r2, r3
 8005b32:	0952      	lsrs	r2, r2, #5
 8005b34:	2164      	movs	r1, #100	; 0x64
 8005b36:	fb01 f202 	mul.w	r2, r1, r2
 8005b3a:	1a9b      	subs	r3, r3, r2
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d001      	beq.n	8005b46 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8005b42:	2301      	movs	r3, #1
 8005b44:	e00f      	b.n	8005b66 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8005b46:	88fb      	ldrh	r3, [r7, #6]
 8005b48:	4a09      	ldr	r2, [pc, #36]	; (8005b70 <RTC_IsLeapYear+0x60>)
 8005b4a:	fba2 1203 	umull	r1, r2, r2, r3
 8005b4e:	09d2      	lsrs	r2, r2, #7
 8005b50:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005b54:	fb01 f202 	mul.w	r2, r1, r2
 8005b58:	1a9b      	subs	r3, r3, r2
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d101      	bne.n	8005b64 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8005b60:	2301      	movs	r3, #1
 8005b62:	e000      	b.n	8005b66 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8005b64:	2300      	movs	r3, #0
  }
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	370c      	adds	r7, #12
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bc80      	pop	{r7}
 8005b6e:	4770      	bx	lr
 8005b70:	51eb851f 	.word	0x51eb851f

08005b74 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b085      	sub	sp, #20
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	460b      	mov	r3, r1
 8005b7e:	70fb      	strb	r3, [r7, #3]
 8005b80:	4613      	mov	r3, r2
 8005b82:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8005b84:	2300      	movs	r3, #0
 8005b86:	60bb      	str	r3, [r7, #8]
 8005b88:	2300      	movs	r3, #0
 8005b8a:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8005b92:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8005b94:	78fb      	ldrb	r3, [r7, #3]
 8005b96:	2b02      	cmp	r3, #2
 8005b98:	d82d      	bhi.n	8005bf6 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8005b9a:	78fa      	ldrb	r2, [r7, #3]
 8005b9c:	4613      	mov	r3, r2
 8005b9e:	005b      	lsls	r3, r3, #1
 8005ba0:	4413      	add	r3, r2
 8005ba2:	00db      	lsls	r3, r3, #3
 8005ba4:	1a9b      	subs	r3, r3, r2
 8005ba6:	4a2c      	ldr	r2, [pc, #176]	; (8005c58 <RTC_WeekDayNum+0xe4>)
 8005ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8005bac:	085a      	lsrs	r2, r3, #1
 8005bae:	78bb      	ldrb	r3, [r7, #2]
 8005bb0:	441a      	add	r2, r3
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	441a      	add	r2, r3
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	3b01      	subs	r3, #1
 8005bba:	089b      	lsrs	r3, r3, #2
 8005bbc:	441a      	add	r2, r3
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	3b01      	subs	r3, #1
 8005bc2:	4926      	ldr	r1, [pc, #152]	; (8005c5c <RTC_WeekDayNum+0xe8>)
 8005bc4:	fba1 1303 	umull	r1, r3, r1, r3
 8005bc8:	095b      	lsrs	r3, r3, #5
 8005bca:	1ad2      	subs	r2, r2, r3
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	3b01      	subs	r3, #1
 8005bd0:	4922      	ldr	r1, [pc, #136]	; (8005c5c <RTC_WeekDayNum+0xe8>)
 8005bd2:	fba1 1303 	umull	r1, r3, r1, r3
 8005bd6:	09db      	lsrs	r3, r3, #7
 8005bd8:	4413      	add	r3, r2
 8005bda:	1d1a      	adds	r2, r3, #4
 8005bdc:	4b20      	ldr	r3, [pc, #128]	; (8005c60 <RTC_WeekDayNum+0xec>)
 8005bde:	fba3 1302 	umull	r1, r3, r3, r2
 8005be2:	1ad1      	subs	r1, r2, r3
 8005be4:	0849      	lsrs	r1, r1, #1
 8005be6:	440b      	add	r3, r1
 8005be8:	0899      	lsrs	r1, r3, #2
 8005bea:	460b      	mov	r3, r1
 8005bec:	00db      	lsls	r3, r3, #3
 8005bee:	1a5b      	subs	r3, r3, r1
 8005bf0:	1ad3      	subs	r3, r2, r3
 8005bf2:	60fb      	str	r3, [r7, #12]
 8005bf4:	e029      	b.n	8005c4a <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8005bf6:	78fa      	ldrb	r2, [r7, #3]
 8005bf8:	4613      	mov	r3, r2
 8005bfa:	005b      	lsls	r3, r3, #1
 8005bfc:	4413      	add	r3, r2
 8005bfe:	00db      	lsls	r3, r3, #3
 8005c00:	1a9b      	subs	r3, r3, r2
 8005c02:	4a15      	ldr	r2, [pc, #84]	; (8005c58 <RTC_WeekDayNum+0xe4>)
 8005c04:	fba2 2303 	umull	r2, r3, r2, r3
 8005c08:	085a      	lsrs	r2, r3, #1
 8005c0a:	78bb      	ldrb	r3, [r7, #2]
 8005c0c:	441a      	add	r2, r3
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	441a      	add	r2, r3
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	089b      	lsrs	r3, r3, #2
 8005c16:	441a      	add	r2, r3
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	4910      	ldr	r1, [pc, #64]	; (8005c5c <RTC_WeekDayNum+0xe8>)
 8005c1c:	fba1 1303 	umull	r1, r3, r1, r3
 8005c20:	095b      	lsrs	r3, r3, #5
 8005c22:	1ad2      	subs	r2, r2, r3
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	490d      	ldr	r1, [pc, #52]	; (8005c5c <RTC_WeekDayNum+0xe8>)
 8005c28:	fba1 1303 	umull	r1, r3, r1, r3
 8005c2c:	09db      	lsrs	r3, r3, #7
 8005c2e:	4413      	add	r3, r2
 8005c30:	1c9a      	adds	r2, r3, #2
 8005c32:	4b0b      	ldr	r3, [pc, #44]	; (8005c60 <RTC_WeekDayNum+0xec>)
 8005c34:	fba3 1302 	umull	r1, r3, r3, r2
 8005c38:	1ad1      	subs	r1, r2, r3
 8005c3a:	0849      	lsrs	r1, r1, #1
 8005c3c:	440b      	add	r3, r1
 8005c3e:	0899      	lsrs	r1, r3, #2
 8005c40:	460b      	mov	r3, r1
 8005c42:	00db      	lsls	r3, r3, #3
 8005c44:	1a5b      	subs	r3, r3, r1
 8005c46:	1ad3      	subs	r3, r2, r3
 8005c48:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	b2db      	uxtb	r3, r3
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3714      	adds	r7, #20
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bc80      	pop	{r7}
 8005c56:	4770      	bx	lr
 8005c58:	38e38e39 	.word	0x38e38e39
 8005c5c:	51eb851f 	.word	0x51eb851f
 8005c60:	24924925 	.word	0x24924925

08005c64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b082      	sub	sp, #8
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d101      	bne.n	8005c76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	e0b2      	b.n	8005ddc <HAL_TIM_Base_Init+0x178>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a5a      	ldr	r2, [pc, #360]	; (8005de4 <HAL_TIM_Base_Init+0x180>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d027      	beq.n	8005cd0 <HAL_TIM_Base_Init+0x6c>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a58      	ldr	r2, [pc, #352]	; (8005de8 <HAL_TIM_Base_Init+0x184>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d022      	beq.n	8005cd0 <HAL_TIM_Base_Init+0x6c>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c92:	d01d      	beq.n	8005cd0 <HAL_TIM_Base_Init+0x6c>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a54      	ldr	r2, [pc, #336]	; (8005dec <HAL_TIM_Base_Init+0x188>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d018      	beq.n	8005cd0 <HAL_TIM_Base_Init+0x6c>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a53      	ldr	r2, [pc, #332]	; (8005df0 <HAL_TIM_Base_Init+0x18c>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d013      	beq.n	8005cd0 <HAL_TIM_Base_Init+0x6c>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a51      	ldr	r2, [pc, #324]	; (8005df4 <HAL_TIM_Base_Init+0x190>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d00e      	beq.n	8005cd0 <HAL_TIM_Base_Init+0x6c>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a50      	ldr	r2, [pc, #320]	; (8005df8 <HAL_TIM_Base_Init+0x194>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d009      	beq.n	8005cd0 <HAL_TIM_Base_Init+0x6c>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a4e      	ldr	r2, [pc, #312]	; (8005dfc <HAL_TIM_Base_Init+0x198>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d004      	beq.n	8005cd0 <HAL_TIM_Base_Init+0x6c>
 8005cc6:	f240 1113 	movw	r1, #275	; 0x113
 8005cca:	484d      	ldr	r0, [pc, #308]	; (8005e00 <HAL_TIM_Base_Init+0x19c>)
 8005ccc:	f7fc fab8 	bl	8002240 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d014      	beq.n	8005d02 <HAL_TIM_Base_Init+0x9e>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	2b10      	cmp	r3, #16
 8005cde:	d010      	beq.n	8005d02 <HAL_TIM_Base_Init+0x9e>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	2b20      	cmp	r3, #32
 8005ce6:	d00c      	beq.n	8005d02 <HAL_TIM_Base_Init+0x9e>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	2b40      	cmp	r3, #64	; 0x40
 8005cee:	d008      	beq.n	8005d02 <HAL_TIM_Base_Init+0x9e>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	2b60      	cmp	r3, #96	; 0x60
 8005cf6:	d004      	beq.n	8005d02 <HAL_TIM_Base_Init+0x9e>
 8005cf8:	f44f 718a 	mov.w	r1, #276	; 0x114
 8005cfc:	4840      	ldr	r0, [pc, #256]	; (8005e00 <HAL_TIM_Base_Init+0x19c>)
 8005cfe:	f7fc fa9f 	bl	8002240 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	691b      	ldr	r3, [r3, #16]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d00e      	beq.n	8005d28 <HAL_TIM_Base_Init+0xc4>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	691b      	ldr	r3, [r3, #16]
 8005d0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d12:	d009      	beq.n	8005d28 <HAL_TIM_Base_Init+0xc4>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	691b      	ldr	r3, [r3, #16]
 8005d18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d1c:	d004      	beq.n	8005d28 <HAL_TIM_Base_Init+0xc4>
 8005d1e:	f240 1115 	movw	r1, #277	; 0x115
 8005d22:	4837      	ldr	r0, [pc, #220]	; (8005e00 <HAL_TIM_Base_Init+0x19c>)
 8005d24:	f7fc fa8c 	bl	8002240 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	699b      	ldr	r3, [r3, #24]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d008      	beq.n	8005d42 <HAL_TIM_Base_Init+0xde>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	699b      	ldr	r3, [r3, #24]
 8005d34:	2b80      	cmp	r3, #128	; 0x80
 8005d36:	d004      	beq.n	8005d42 <HAL_TIM_Base_Init+0xde>
 8005d38:	f44f 718b 	mov.w	r1, #278	; 0x116
 8005d3c:	4830      	ldr	r0, [pc, #192]	; (8005e00 <HAL_TIM_Base_Init+0x19c>)
 8005d3e:	f7fc fa7f 	bl	8002240 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d48:	b2db      	uxtb	r3, r3
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d111      	bne.n	8005d72 <HAL_TIM_Base_Init+0x10e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2200      	movs	r2, #0
 8005d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f001 ffc0 	bl	8007cdc <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d102      	bne.n	8005d6a <HAL_TIM_Base_Init+0x106>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	4a27      	ldr	r2, [pc, #156]	; (8005e04 <HAL_TIM_Base_Init+0x1a0>)
 8005d68:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2202      	movs	r2, #2
 8005d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	3304      	adds	r3, #4
 8005d82:	4619      	mov	r1, r3
 8005d84:	4610      	mov	r0, r2
 8005d86:	f001 fbff 	bl	8007588 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2201      	movs	r2, #1
 8005d96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2201      	movs	r2, #1
 8005da6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2201      	movs	r2, #1
 8005dae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2201      	movs	r2, #1
 8005db6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2201      	movs	r2, #1
 8005dce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005dda:	2300      	movs	r3, #0
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3708      	adds	r7, #8
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}
 8005de4:	40012c00 	.word	0x40012c00
 8005de8:	40013400 	.word	0x40013400
 8005dec:	40000400 	.word	0x40000400
 8005df0:	40000800 	.word	0x40000800
 8005df4:	40000c00 	.word	0x40000c00
 8005df8:	40001000 	.word	0x40001000
 8005dfc:	40001400 	.word	0x40001400
 8005e00:	0800ed50 	.word	0x0800ed50
 8005e04:	08002389 	.word	0x08002389

08005e08 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b084      	sub	sp, #16
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a39      	ldr	r2, [pc, #228]	; (8005efc <HAL_TIM_Base_Start+0xf4>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d027      	beq.n	8005e6a <HAL_TIM_Base_Start+0x62>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a38      	ldr	r2, [pc, #224]	; (8005f00 <HAL_TIM_Base_Start+0xf8>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d022      	beq.n	8005e6a <HAL_TIM_Base_Start+0x62>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e2c:	d01d      	beq.n	8005e6a <HAL_TIM_Base_Start+0x62>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a34      	ldr	r2, [pc, #208]	; (8005f04 <HAL_TIM_Base_Start+0xfc>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d018      	beq.n	8005e6a <HAL_TIM_Base_Start+0x62>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a32      	ldr	r2, [pc, #200]	; (8005f08 <HAL_TIM_Base_Start+0x100>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d013      	beq.n	8005e6a <HAL_TIM_Base_Start+0x62>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a31      	ldr	r2, [pc, #196]	; (8005f0c <HAL_TIM_Base_Start+0x104>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d00e      	beq.n	8005e6a <HAL_TIM_Base_Start+0x62>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a2f      	ldr	r2, [pc, #188]	; (8005f10 <HAL_TIM_Base_Start+0x108>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d009      	beq.n	8005e6a <HAL_TIM_Base_Start+0x62>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a2e      	ldr	r2, [pc, #184]	; (8005f14 <HAL_TIM_Base_Start+0x10c>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d004      	beq.n	8005e6a <HAL_TIM_Base_Start+0x62>
 8005e60:	f44f 71ca 	mov.w	r1, #404	; 0x194
 8005e64:	482c      	ldr	r0, [pc, #176]	; (8005f18 <HAL_TIM_Base_Start+0x110>)
 8005e66:	f7fc f9eb 	bl	8002240 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e70:	b2db      	uxtb	r3, r3
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d001      	beq.n	8005e7a <HAL_TIM_Base_Start+0x72>
  {
    return HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	e03c      	b.n	8005ef4 <HAL_TIM_Base_Start+0xec>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2202      	movs	r2, #2
 8005e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a1d      	ldr	r2, [pc, #116]	; (8005efc <HAL_TIM_Base_Start+0xf4>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d018      	beq.n	8005ebe <HAL_TIM_Base_Start+0xb6>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a1b      	ldr	r2, [pc, #108]	; (8005f00 <HAL_TIM_Base_Start+0xf8>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d013      	beq.n	8005ebe <HAL_TIM_Base_Start+0xb6>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e9e:	d00e      	beq.n	8005ebe <HAL_TIM_Base_Start+0xb6>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a17      	ldr	r2, [pc, #92]	; (8005f04 <HAL_TIM_Base_Start+0xfc>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d009      	beq.n	8005ebe <HAL_TIM_Base_Start+0xb6>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a16      	ldr	r2, [pc, #88]	; (8005f08 <HAL_TIM_Base_Start+0x100>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d004      	beq.n	8005ebe <HAL_TIM_Base_Start+0xb6>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a14      	ldr	r2, [pc, #80]	; (8005f0c <HAL_TIM_Base_Start+0x104>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d111      	bne.n	8005ee2 <HAL_TIM_Base_Start+0xda>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	f003 0307 	and.w	r3, r3, #7
 8005ec8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2b06      	cmp	r3, #6
 8005ece:	d010      	beq.n	8005ef2 <HAL_TIM_Base_Start+0xea>
    {
      __HAL_TIM_ENABLE(htim);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f042 0201 	orr.w	r2, r2, #1
 8005ede:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ee0:	e007      	b.n	8005ef2 <HAL_TIM_Base_Start+0xea>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f042 0201 	orr.w	r2, r2, #1
 8005ef0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ef2:	2300      	movs	r3, #0
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3710      	adds	r7, #16
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}
 8005efc:	40012c00 	.word	0x40012c00
 8005f00:	40013400 	.word	0x40013400
 8005f04:	40000400 	.word	0x40000400
 8005f08:	40000800 	.word	0x40000800
 8005f0c:	40000c00 	.word	0x40000c00
 8005f10:	40001000 	.word	0x40001000
 8005f14:	40001400 	.word	0x40001400
 8005f18:	0800ed50 	.word	0x0800ed50

08005f1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b084      	sub	sp, #16
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a3d      	ldr	r2, [pc, #244]	; (8006020 <HAL_TIM_Base_Start_IT+0x104>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d027      	beq.n	8005f7e <HAL_TIM_Base_Start_IT+0x62>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a3c      	ldr	r2, [pc, #240]	; (8006024 <HAL_TIM_Base_Start_IT+0x108>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d022      	beq.n	8005f7e <HAL_TIM_Base_Start_IT+0x62>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f40:	d01d      	beq.n	8005f7e <HAL_TIM_Base_Start_IT+0x62>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a38      	ldr	r2, [pc, #224]	; (8006028 <HAL_TIM_Base_Start_IT+0x10c>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d018      	beq.n	8005f7e <HAL_TIM_Base_Start_IT+0x62>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a36      	ldr	r2, [pc, #216]	; (800602c <HAL_TIM_Base_Start_IT+0x110>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d013      	beq.n	8005f7e <HAL_TIM_Base_Start_IT+0x62>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a35      	ldr	r2, [pc, #212]	; (8006030 <HAL_TIM_Base_Start_IT+0x114>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d00e      	beq.n	8005f7e <HAL_TIM_Base_Start_IT+0x62>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a33      	ldr	r2, [pc, #204]	; (8006034 <HAL_TIM_Base_Start_IT+0x118>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d009      	beq.n	8005f7e <HAL_TIM_Base_Start_IT+0x62>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a32      	ldr	r2, [pc, #200]	; (8006038 <HAL_TIM_Base_Start_IT+0x11c>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d004      	beq.n	8005f7e <HAL_TIM_Base_Start_IT+0x62>
 8005f74:	f240 11cf 	movw	r1, #463	; 0x1cf
 8005f78:	4830      	ldr	r0, [pc, #192]	; (800603c <HAL_TIM_Base_Start_IT+0x120>)
 8005f7a:	f7fc f961 	bl	8002240 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f84:	b2db      	uxtb	r3, r3
 8005f86:	2b01      	cmp	r3, #1
 8005f88:	d001      	beq.n	8005f8e <HAL_TIM_Base_Start_IT+0x72>
  {
    return HAL_ERROR;
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	e044      	b.n	8006018 <HAL_TIM_Base_Start_IT+0xfc>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2202      	movs	r2, #2
 8005f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	68da      	ldr	r2, [r3, #12]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f042 0201 	orr.w	r2, r2, #1
 8005fa4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a1d      	ldr	r2, [pc, #116]	; (8006020 <HAL_TIM_Base_Start_IT+0x104>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d018      	beq.n	8005fe2 <HAL_TIM_Base_Start_IT+0xc6>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a1b      	ldr	r2, [pc, #108]	; (8006024 <HAL_TIM_Base_Start_IT+0x108>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d013      	beq.n	8005fe2 <HAL_TIM_Base_Start_IT+0xc6>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fc2:	d00e      	beq.n	8005fe2 <HAL_TIM_Base_Start_IT+0xc6>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a17      	ldr	r2, [pc, #92]	; (8006028 <HAL_TIM_Base_Start_IT+0x10c>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d009      	beq.n	8005fe2 <HAL_TIM_Base_Start_IT+0xc6>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a16      	ldr	r2, [pc, #88]	; (800602c <HAL_TIM_Base_Start_IT+0x110>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d004      	beq.n	8005fe2 <HAL_TIM_Base_Start_IT+0xc6>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a14      	ldr	r2, [pc, #80]	; (8006030 <HAL_TIM_Base_Start_IT+0x114>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d111      	bne.n	8006006 <HAL_TIM_Base_Start_IT+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	f003 0307 	and.w	r3, r3, #7
 8005fec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2b06      	cmp	r3, #6
 8005ff2:	d010      	beq.n	8006016 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f042 0201 	orr.w	r2, r2, #1
 8006002:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006004:	e007      	b.n	8006016 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f042 0201 	orr.w	r2, r2, #1
 8006014:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006016:	2300      	movs	r3, #0
}
 8006018:	4618      	mov	r0, r3
 800601a:	3710      	adds	r7, #16
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}
 8006020:	40012c00 	.word	0x40012c00
 8006024:	40013400 	.word	0x40013400
 8006028:	40000400 	.word	0x40000400
 800602c:	40000800 	.word	0x40000800
 8006030:	40000c00 	.word	0x40000c00
 8006034:	40001000 	.word	0x40001000
 8006038:	40001400 	.word	0x40001400
 800603c:	0800ed50 	.word	0x0800ed50

08006040 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b082      	sub	sp, #8
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d101      	bne.n	8006052 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800604e:	2301      	movs	r3, #1
 8006050:	e0b2      	b.n	80061b8 <HAL_TIM_PWM_Init+0x178>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a5a      	ldr	r2, [pc, #360]	; (80061c0 <HAL_TIM_PWM_Init+0x180>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d027      	beq.n	80060ac <HAL_TIM_PWM_Init+0x6c>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a58      	ldr	r2, [pc, #352]	; (80061c4 <HAL_TIM_PWM_Init+0x184>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d022      	beq.n	80060ac <HAL_TIM_PWM_Init+0x6c>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800606e:	d01d      	beq.n	80060ac <HAL_TIM_PWM_Init+0x6c>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a54      	ldr	r2, [pc, #336]	; (80061c8 <HAL_TIM_PWM_Init+0x188>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d018      	beq.n	80060ac <HAL_TIM_PWM_Init+0x6c>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a53      	ldr	r2, [pc, #332]	; (80061cc <HAL_TIM_PWM_Init+0x18c>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d013      	beq.n	80060ac <HAL_TIM_PWM_Init+0x6c>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a51      	ldr	r2, [pc, #324]	; (80061d0 <HAL_TIM_PWM_Init+0x190>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d00e      	beq.n	80060ac <HAL_TIM_PWM_Init+0x6c>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a50      	ldr	r2, [pc, #320]	; (80061d4 <HAL_TIM_PWM_Init+0x194>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d009      	beq.n	80060ac <HAL_TIM_PWM_Init+0x6c>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a4e      	ldr	r2, [pc, #312]	; (80061d8 <HAL_TIM_PWM_Init+0x198>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d004      	beq.n	80060ac <HAL_TIM_PWM_Init+0x6c>
 80060a2:	f240 5113 	movw	r1, #1299	; 0x513
 80060a6:	484d      	ldr	r0, [pc, #308]	; (80061dc <HAL_TIM_PWM_Init+0x19c>)
 80060a8:	f7fc f8ca 	bl	8002240 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d014      	beq.n	80060de <HAL_TIM_PWM_Init+0x9e>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	2b10      	cmp	r3, #16
 80060ba:	d010      	beq.n	80060de <HAL_TIM_PWM_Init+0x9e>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	2b20      	cmp	r3, #32
 80060c2:	d00c      	beq.n	80060de <HAL_TIM_PWM_Init+0x9e>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	2b40      	cmp	r3, #64	; 0x40
 80060ca:	d008      	beq.n	80060de <HAL_TIM_PWM_Init+0x9e>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	2b60      	cmp	r3, #96	; 0x60
 80060d2:	d004      	beq.n	80060de <HAL_TIM_PWM_Init+0x9e>
 80060d4:	f240 5114 	movw	r1, #1300	; 0x514
 80060d8:	4840      	ldr	r0, [pc, #256]	; (80061dc <HAL_TIM_PWM_Init+0x19c>)
 80060da:	f7fc f8b1 	bl	8002240 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	691b      	ldr	r3, [r3, #16]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d00e      	beq.n	8006104 <HAL_TIM_PWM_Init+0xc4>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	691b      	ldr	r3, [r3, #16]
 80060ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060ee:	d009      	beq.n	8006104 <HAL_TIM_PWM_Init+0xc4>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	691b      	ldr	r3, [r3, #16]
 80060f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060f8:	d004      	beq.n	8006104 <HAL_TIM_PWM_Init+0xc4>
 80060fa:	f240 5115 	movw	r1, #1301	; 0x515
 80060fe:	4837      	ldr	r0, [pc, #220]	; (80061dc <HAL_TIM_PWM_Init+0x19c>)
 8006100:	f7fc f89e 	bl	8002240 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	699b      	ldr	r3, [r3, #24]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d008      	beq.n	800611e <HAL_TIM_PWM_Init+0xde>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	699b      	ldr	r3, [r3, #24]
 8006110:	2b80      	cmp	r3, #128	; 0x80
 8006112:	d004      	beq.n	800611e <HAL_TIM_PWM_Init+0xde>
 8006114:	f240 5116 	movw	r1, #1302	; 0x516
 8006118:	4830      	ldr	r0, [pc, #192]	; (80061dc <HAL_TIM_PWM_Init+0x19c>)
 800611a:	f7fc f891 	bl	8002240 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006124:	b2db      	uxtb	r3, r3
 8006126:	2b00      	cmp	r3, #0
 8006128:	d111      	bne.n	800614e <HAL_TIM_PWM_Init+0x10e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2200      	movs	r2, #0
 800612e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f001 fdd2 	bl	8007cdc <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800613c:	2b00      	cmp	r3, #0
 800613e:	d102      	bne.n	8006146 <HAL_TIM_PWM_Init+0x106>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	4a27      	ldr	r2, [pc, #156]	; (80061e0 <HAL_TIM_PWM_Init+0x1a0>)
 8006144:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2202      	movs	r2, #2
 8006152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681a      	ldr	r2, [r3, #0]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	3304      	adds	r3, #4
 800615e:	4619      	mov	r1, r3
 8006160:	4610      	mov	r0, r2
 8006162:	f001 fa11 	bl	8007588 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2201      	movs	r2, #1
 800616a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2201      	movs	r2, #1
 8006172:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2201      	movs	r2, #1
 800617a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2201      	movs	r2, #1
 8006182:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2201      	movs	r2, #1
 800618a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2201      	movs	r2, #1
 8006192:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2201      	movs	r2, #1
 800619a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2201      	movs	r2, #1
 80061a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2201      	movs	r2, #1
 80061aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2201      	movs	r2, #1
 80061b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061b6:	2300      	movs	r3, #0
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3708      	adds	r7, #8
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}
 80061c0:	40012c00 	.word	0x40012c00
 80061c4:	40013400 	.word	0x40013400
 80061c8:	40000400 	.word	0x40000400
 80061cc:	40000800 	.word	0x40000800
 80061d0:	40000c00 	.word	0x40000c00
 80061d4:	40001000 	.word	0x40001000
 80061d8:	40001400 	.word	0x40001400
 80061dc:	0800ed50 	.word	0x0800ed50
 80061e0:	080061e5 	.word	0x080061e5

080061e4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b083      	sub	sp, #12
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80061ec:	bf00      	nop
 80061ee:	370c      	adds	r7, #12
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bc80      	pop	{r7}
 80061f4:	4770      	bx	lr
	...

080061f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b084      	sub	sp, #16
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
 8006200:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a8a      	ldr	r2, [pc, #552]	; (8006430 <HAL_TIM_PWM_Start+0x238>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d10b      	bne.n	8006224 <HAL_TIM_PWM_Start+0x2c>
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d062      	beq.n	80062d8 <HAL_TIM_PWM_Start+0xe0>
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	2b04      	cmp	r3, #4
 8006216:	d05f      	beq.n	80062d8 <HAL_TIM_PWM_Start+0xe0>
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	2b08      	cmp	r3, #8
 800621c:	d05c      	beq.n	80062d8 <HAL_TIM_PWM_Start+0xe0>
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	2b0c      	cmp	r3, #12
 8006222:	d059      	beq.n	80062d8 <HAL_TIM_PWM_Start+0xe0>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a82      	ldr	r2, [pc, #520]	; (8006434 <HAL_TIM_PWM_Start+0x23c>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d10b      	bne.n	8006246 <HAL_TIM_PWM_Start+0x4e>
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d051      	beq.n	80062d8 <HAL_TIM_PWM_Start+0xe0>
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	2b04      	cmp	r3, #4
 8006238:	d04e      	beq.n	80062d8 <HAL_TIM_PWM_Start+0xe0>
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	2b08      	cmp	r3, #8
 800623e:	d04b      	beq.n	80062d8 <HAL_TIM_PWM_Start+0xe0>
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	2b0c      	cmp	r3, #12
 8006244:	d048      	beq.n	80062d8 <HAL_TIM_PWM_Start+0xe0>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800624e:	d10b      	bne.n	8006268 <HAL_TIM_PWM_Start+0x70>
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d040      	beq.n	80062d8 <HAL_TIM_PWM_Start+0xe0>
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	2b04      	cmp	r3, #4
 800625a:	d03d      	beq.n	80062d8 <HAL_TIM_PWM_Start+0xe0>
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	2b08      	cmp	r3, #8
 8006260:	d03a      	beq.n	80062d8 <HAL_TIM_PWM_Start+0xe0>
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	2b0c      	cmp	r3, #12
 8006266:	d037      	beq.n	80062d8 <HAL_TIM_PWM_Start+0xe0>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a72      	ldr	r2, [pc, #456]	; (8006438 <HAL_TIM_PWM_Start+0x240>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d10b      	bne.n	800628a <HAL_TIM_PWM_Start+0x92>
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d02f      	beq.n	80062d8 <HAL_TIM_PWM_Start+0xe0>
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	2b04      	cmp	r3, #4
 800627c:	d02c      	beq.n	80062d8 <HAL_TIM_PWM_Start+0xe0>
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	2b08      	cmp	r3, #8
 8006282:	d029      	beq.n	80062d8 <HAL_TIM_PWM_Start+0xe0>
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	2b0c      	cmp	r3, #12
 8006288:	d026      	beq.n	80062d8 <HAL_TIM_PWM_Start+0xe0>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a6b      	ldr	r2, [pc, #428]	; (800643c <HAL_TIM_PWM_Start+0x244>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d10b      	bne.n	80062ac <HAL_TIM_PWM_Start+0xb4>
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d01e      	beq.n	80062d8 <HAL_TIM_PWM_Start+0xe0>
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	2b04      	cmp	r3, #4
 800629e:	d01b      	beq.n	80062d8 <HAL_TIM_PWM_Start+0xe0>
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	2b08      	cmp	r3, #8
 80062a4:	d018      	beq.n	80062d8 <HAL_TIM_PWM_Start+0xe0>
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	2b0c      	cmp	r3, #12
 80062aa:	d015      	beq.n	80062d8 <HAL_TIM_PWM_Start+0xe0>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a63      	ldr	r2, [pc, #396]	; (8006440 <HAL_TIM_PWM_Start+0x248>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d10b      	bne.n	80062ce <HAL_TIM_PWM_Start+0xd6>
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d00d      	beq.n	80062d8 <HAL_TIM_PWM_Start+0xe0>
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	2b04      	cmp	r3, #4
 80062c0:	d00a      	beq.n	80062d8 <HAL_TIM_PWM_Start+0xe0>
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	2b08      	cmp	r3, #8
 80062c6:	d007      	beq.n	80062d8 <HAL_TIM_PWM_Start+0xe0>
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	2b0c      	cmp	r3, #12
 80062cc:	d004      	beq.n	80062d8 <HAL_TIM_PWM_Start+0xe0>
 80062ce:	f240 5199 	movw	r1, #1433	; 0x599
 80062d2:	485c      	ldr	r0, [pc, #368]	; (8006444 <HAL_TIM_PWM_Start+0x24c>)
 80062d4:	f7fb ffb4 	bl	8002240 <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d109      	bne.n	80062f2 <HAL_TIM_PWM_Start+0xfa>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80062e4:	b2db      	uxtb	r3, r3
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	bf14      	ite	ne
 80062ea:	2301      	movne	r3, #1
 80062ec:	2300      	moveq	r3, #0
 80062ee:	b2db      	uxtb	r3, r3
 80062f0:	e022      	b.n	8006338 <HAL_TIM_PWM_Start+0x140>
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	2b04      	cmp	r3, #4
 80062f6:	d109      	bne.n	800630c <HAL_TIM_PWM_Start+0x114>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80062fe:	b2db      	uxtb	r3, r3
 8006300:	2b01      	cmp	r3, #1
 8006302:	bf14      	ite	ne
 8006304:	2301      	movne	r3, #1
 8006306:	2300      	moveq	r3, #0
 8006308:	b2db      	uxtb	r3, r3
 800630a:	e015      	b.n	8006338 <HAL_TIM_PWM_Start+0x140>
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	2b08      	cmp	r3, #8
 8006310:	d109      	bne.n	8006326 <HAL_TIM_PWM_Start+0x12e>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006318:	b2db      	uxtb	r3, r3
 800631a:	2b01      	cmp	r3, #1
 800631c:	bf14      	ite	ne
 800631e:	2301      	movne	r3, #1
 8006320:	2300      	moveq	r3, #0
 8006322:	b2db      	uxtb	r3, r3
 8006324:	e008      	b.n	8006338 <HAL_TIM_PWM_Start+0x140>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800632c:	b2db      	uxtb	r3, r3
 800632e:	2b01      	cmp	r3, #1
 8006330:	bf14      	ite	ne
 8006332:	2301      	movne	r3, #1
 8006334:	2300      	moveq	r3, #0
 8006336:	b2db      	uxtb	r3, r3
 8006338:	2b00      	cmp	r3, #0
 800633a:	d001      	beq.n	8006340 <HAL_TIM_PWM_Start+0x148>
  {
    return HAL_ERROR;
 800633c:	2301      	movs	r3, #1
 800633e:	e072      	b.n	8006426 <HAL_TIM_PWM_Start+0x22e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d104      	bne.n	8006350 <HAL_TIM_PWM_Start+0x158>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2202      	movs	r2, #2
 800634a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800634e:	e013      	b.n	8006378 <HAL_TIM_PWM_Start+0x180>
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	2b04      	cmp	r3, #4
 8006354:	d104      	bne.n	8006360 <HAL_TIM_PWM_Start+0x168>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2202      	movs	r2, #2
 800635a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800635e:	e00b      	b.n	8006378 <HAL_TIM_PWM_Start+0x180>
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	2b08      	cmp	r3, #8
 8006364:	d104      	bne.n	8006370 <HAL_TIM_PWM_Start+0x178>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2202      	movs	r2, #2
 800636a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800636e:	e003      	b.n	8006378 <HAL_TIM_PWM_Start+0x180>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2202      	movs	r2, #2
 8006374:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	2201      	movs	r2, #1
 800637e:	6839      	ldr	r1, [r7, #0]
 8006380:	4618      	mov	r0, r3
 8006382:	f001 fc4b 	bl	8007c1c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a29      	ldr	r2, [pc, #164]	; (8006430 <HAL_TIM_PWM_Start+0x238>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d004      	beq.n	800639a <HAL_TIM_PWM_Start+0x1a2>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a27      	ldr	r2, [pc, #156]	; (8006434 <HAL_TIM_PWM_Start+0x23c>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d101      	bne.n	800639e <HAL_TIM_PWM_Start+0x1a6>
 800639a:	2301      	movs	r3, #1
 800639c:	e000      	b.n	80063a0 <HAL_TIM_PWM_Start+0x1a8>
 800639e:	2300      	movs	r3, #0
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d007      	beq.n	80063b4 <HAL_TIM_PWM_Start+0x1bc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80063b2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a1d      	ldr	r2, [pc, #116]	; (8006430 <HAL_TIM_PWM_Start+0x238>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d018      	beq.n	80063f0 <HAL_TIM_PWM_Start+0x1f8>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a1c      	ldr	r2, [pc, #112]	; (8006434 <HAL_TIM_PWM_Start+0x23c>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d013      	beq.n	80063f0 <HAL_TIM_PWM_Start+0x1f8>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063d0:	d00e      	beq.n	80063f0 <HAL_TIM_PWM_Start+0x1f8>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a18      	ldr	r2, [pc, #96]	; (8006438 <HAL_TIM_PWM_Start+0x240>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d009      	beq.n	80063f0 <HAL_TIM_PWM_Start+0x1f8>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a16      	ldr	r2, [pc, #88]	; (800643c <HAL_TIM_PWM_Start+0x244>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d004      	beq.n	80063f0 <HAL_TIM_PWM_Start+0x1f8>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a15      	ldr	r2, [pc, #84]	; (8006440 <HAL_TIM_PWM_Start+0x248>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d111      	bne.n	8006414 <HAL_TIM_PWM_Start+0x21c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	f003 0307 	and.w	r3, r3, #7
 80063fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2b06      	cmp	r3, #6
 8006400:	d010      	beq.n	8006424 <HAL_TIM_PWM_Start+0x22c>
    {
      __HAL_TIM_ENABLE(htim);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f042 0201 	orr.w	r2, r2, #1
 8006410:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006412:	e007      	b.n	8006424 <HAL_TIM_PWM_Start+0x22c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f042 0201 	orr.w	r2, r2, #1
 8006422:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006424:	2300      	movs	r3, #0
}
 8006426:	4618      	mov	r0, r3
 8006428:	3710      	adds	r7, #16
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}
 800642e:	bf00      	nop
 8006430:	40012c00 	.word	0x40012c00
 8006434:	40013400 	.word	0x40013400
 8006438:	40000400 	.word	0x40000400
 800643c:	40000800 	.word	0x40000800
 8006440:	40000c00 	.word	0x40000c00
 8006444:	0800ed50 	.word	0x0800ed50

08006448 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b086      	sub	sp, #24
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
 8006450:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d101      	bne.n	800645c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006458:	2301      	movs	r3, #1
 800645a:	e192      	b.n	8006782 <HAL_TIM_Encoder_Init+0x33a>
  }

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a7d      	ldr	r2, [pc, #500]	; (8006658 <HAL_TIM_Encoder_Init+0x210>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d01d      	beq.n	80064a2 <HAL_TIM_Encoder_Init+0x5a>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a7c      	ldr	r2, [pc, #496]	; (800665c <HAL_TIM_Encoder_Init+0x214>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d018      	beq.n	80064a2 <HAL_TIM_Encoder_Init+0x5a>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006478:	d013      	beq.n	80064a2 <HAL_TIM_Encoder_Init+0x5a>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a78      	ldr	r2, [pc, #480]	; (8006660 <HAL_TIM_Encoder_Init+0x218>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d00e      	beq.n	80064a2 <HAL_TIM_Encoder_Init+0x5a>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a76      	ldr	r2, [pc, #472]	; (8006664 <HAL_TIM_Encoder_Init+0x21c>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d009      	beq.n	80064a2 <HAL_TIM_Encoder_Init+0x5a>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a75      	ldr	r2, [pc, #468]	; (8006668 <HAL_TIM_Encoder_Init+0x220>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d004      	beq.n	80064a2 <HAL_TIM_Encoder_Init+0x5a>
 8006498:	f640 318e 	movw	r1, #2958	; 0xb8e
 800649c:	4873      	ldr	r0, [pc, #460]	; (800666c <HAL_TIM_Encoder_Init+0x224>)
 800649e:	f7fb fecf 	bl	8002240 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d014      	beq.n	80064d4 <HAL_TIM_Encoder_Init+0x8c>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	2b10      	cmp	r3, #16
 80064b0:	d010      	beq.n	80064d4 <HAL_TIM_Encoder_Init+0x8c>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	689b      	ldr	r3, [r3, #8]
 80064b6:	2b20      	cmp	r3, #32
 80064b8:	d00c      	beq.n	80064d4 <HAL_TIM_Encoder_Init+0x8c>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	2b40      	cmp	r3, #64	; 0x40
 80064c0:	d008      	beq.n	80064d4 <HAL_TIM_Encoder_Init+0x8c>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	2b60      	cmp	r3, #96	; 0x60
 80064c8:	d004      	beq.n	80064d4 <HAL_TIM_Encoder_Init+0x8c>
 80064ca:	f640 318f 	movw	r1, #2959	; 0xb8f
 80064ce:	4867      	ldr	r0, [pc, #412]	; (800666c <HAL_TIM_Encoder_Init+0x224>)
 80064d0:	f7fb feb6 	bl	8002240 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	691b      	ldr	r3, [r3, #16]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d00e      	beq.n	80064fa <HAL_TIM_Encoder_Init+0xb2>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	691b      	ldr	r3, [r3, #16]
 80064e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064e4:	d009      	beq.n	80064fa <HAL_TIM_Encoder_Init+0xb2>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	691b      	ldr	r3, [r3, #16]
 80064ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064ee:	d004      	beq.n	80064fa <HAL_TIM_Encoder_Init+0xb2>
 80064f0:	f44f 6139 	mov.w	r1, #2960	; 0xb90
 80064f4:	485d      	ldr	r0, [pc, #372]	; (800666c <HAL_TIM_Encoder_Init+0x224>)
 80064f6:	f7fb fea3 	bl	8002240 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	699b      	ldr	r3, [r3, #24]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d008      	beq.n	8006514 <HAL_TIM_Encoder_Init+0xcc>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	699b      	ldr	r3, [r3, #24]
 8006506:	2b80      	cmp	r3, #128	; 0x80
 8006508:	d004      	beq.n	8006514 <HAL_TIM_Encoder_Init+0xcc>
 800650a:	f640 3191 	movw	r1, #2961	; 0xb91
 800650e:	4857      	ldr	r0, [pc, #348]	; (800666c <HAL_TIM_Encoder_Init+0x224>)
 8006510:	f7fb fe96 	bl	8002240 <assert_failed>
  assert_param(IS_TIM_ENCODER_MODE(sConfig->EncoderMode));
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	2b01      	cmp	r3, #1
 800651a:	d00c      	beq.n	8006536 <HAL_TIM_Encoder_Init+0xee>
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	2b02      	cmp	r3, #2
 8006522:	d008      	beq.n	8006536 <HAL_TIM_Encoder_Init+0xee>
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	2b03      	cmp	r3, #3
 800652a:	d004      	beq.n	8006536 <HAL_TIM_Encoder_Init+0xee>
 800652c:	f640 3192 	movw	r1, #2962	; 0xb92
 8006530:	484e      	ldr	r0, [pc, #312]	; (800666c <HAL_TIM_Encoder_Init+0x224>)
 8006532:	f7fb fe85 	bl	8002240 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC1Selection));
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	2b01      	cmp	r3, #1
 800653c:	d00c      	beq.n	8006558 <HAL_TIM_Encoder_Init+0x110>
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	2b02      	cmp	r3, #2
 8006544:	d008      	beq.n	8006558 <HAL_TIM_Encoder_Init+0x110>
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	2b03      	cmp	r3, #3
 800654c:	d004      	beq.n	8006558 <HAL_TIM_Encoder_Init+0x110>
 800654e:	f640 3193 	movw	r1, #2963	; 0xb93
 8006552:	4846      	ldr	r0, [pc, #280]	; (800666c <HAL_TIM_Encoder_Init+0x224>)
 8006554:	f7fb fe74 	bl	8002240 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC2Selection));
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	699b      	ldr	r3, [r3, #24]
 800655c:	2b01      	cmp	r3, #1
 800655e:	d00c      	beq.n	800657a <HAL_TIM_Encoder_Init+0x132>
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	699b      	ldr	r3, [r3, #24]
 8006564:	2b02      	cmp	r3, #2
 8006566:	d008      	beq.n	800657a <HAL_TIM_Encoder_Init+0x132>
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	699b      	ldr	r3, [r3, #24]
 800656c:	2b03      	cmp	r3, #3
 800656e:	d004      	beq.n	800657a <HAL_TIM_Encoder_Init+0x132>
 8006570:	f640 3194 	movw	r1, #2964	; 0xb94
 8006574:	483d      	ldr	r0, [pc, #244]	; (800666c <HAL_TIM_Encoder_Init+0x224>)
 8006576:	f7fb fe63 	bl	8002240 <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC1Polarity));
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d008      	beq.n	8006594 <HAL_TIM_Encoder_Init+0x14c>
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	2b02      	cmp	r3, #2
 8006588:	d004      	beq.n	8006594 <HAL_TIM_Encoder_Init+0x14c>
 800658a:	f640 3195 	movw	r1, #2965	; 0xb95
 800658e:	4837      	ldr	r0, [pc, #220]	; (800666c <HAL_TIM_Encoder_Init+0x224>)
 8006590:	f7fb fe56 	bl	8002240 <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC2Polarity));
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	695b      	ldr	r3, [r3, #20]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d008      	beq.n	80065ae <HAL_TIM_Encoder_Init+0x166>
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	695b      	ldr	r3, [r3, #20]
 80065a0:	2b02      	cmp	r3, #2
 80065a2:	d004      	beq.n	80065ae <HAL_TIM_Encoder_Init+0x166>
 80065a4:	f640 3196 	movw	r1, #2966	; 0xb96
 80065a8:	4830      	ldr	r0, [pc, #192]	; (800666c <HAL_TIM_Encoder_Init+0x224>)
 80065aa:	f7fb fe49 	bl	8002240 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	68db      	ldr	r3, [r3, #12]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d010      	beq.n	80065d8 <HAL_TIM_Encoder_Init+0x190>
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	68db      	ldr	r3, [r3, #12]
 80065ba:	2b04      	cmp	r3, #4
 80065bc:	d00c      	beq.n	80065d8 <HAL_TIM_Encoder_Init+0x190>
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	68db      	ldr	r3, [r3, #12]
 80065c2:	2b08      	cmp	r3, #8
 80065c4:	d008      	beq.n	80065d8 <HAL_TIM_Encoder_Init+0x190>
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	68db      	ldr	r3, [r3, #12]
 80065ca:	2b0c      	cmp	r3, #12
 80065cc:	d004      	beq.n	80065d8 <HAL_TIM_Encoder_Init+0x190>
 80065ce:	f640 3197 	movw	r1, #2967	; 0xb97
 80065d2:	4826      	ldr	r0, [pc, #152]	; (800666c <HAL_TIM_Encoder_Init+0x224>)
 80065d4:	f7fb fe34 	bl	8002240 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	69db      	ldr	r3, [r3, #28]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d010      	beq.n	8006602 <HAL_TIM_Encoder_Init+0x1ba>
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	69db      	ldr	r3, [r3, #28]
 80065e4:	2b04      	cmp	r3, #4
 80065e6:	d00c      	beq.n	8006602 <HAL_TIM_Encoder_Init+0x1ba>
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	69db      	ldr	r3, [r3, #28]
 80065ec:	2b08      	cmp	r3, #8
 80065ee:	d008      	beq.n	8006602 <HAL_TIM_Encoder_Init+0x1ba>
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	69db      	ldr	r3, [r3, #28]
 80065f4:	2b0c      	cmp	r3, #12
 80065f6:	d004      	beq.n	8006602 <HAL_TIM_Encoder_Init+0x1ba>
 80065f8:	f640 3198 	movw	r1, #2968	; 0xb98
 80065fc:	481b      	ldr	r0, [pc, #108]	; (800666c <HAL_TIM_Encoder_Init+0x224>)
 80065fe:	f7fb fe1f 	bl	8002240 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	691b      	ldr	r3, [r3, #16]
 8006606:	2b0f      	cmp	r3, #15
 8006608:	d904      	bls.n	8006614 <HAL_TIM_Encoder_Init+0x1cc>
 800660a:	f640 3199 	movw	r1, #2969	; 0xb99
 800660e:	4817      	ldr	r0, [pc, #92]	; (800666c <HAL_TIM_Encoder_Init+0x224>)
 8006610:	f7fb fe16 	bl	8002240 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	6a1b      	ldr	r3, [r3, #32]
 8006618:	2b0f      	cmp	r3, #15
 800661a:	d904      	bls.n	8006626 <HAL_TIM_Encoder_Init+0x1de>
 800661c:	f640 319a 	movw	r1, #2970	; 0xb9a
 8006620:	4812      	ldr	r0, [pc, #72]	; (800666c <HAL_TIM_Encoder_Init+0x224>)
 8006622:	f7fb fe0d 	bl	8002240 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800662c:	b2db      	uxtb	r3, r3
 800662e:	2b00      	cmp	r3, #0
 8006630:	d120      	bne.n	8006674 <HAL_TIM_Encoder_Init+0x22c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2200      	movs	r2, #0
 8006636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f001 fb4e 	bl	8007cdc <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006644:	2b00      	cmp	r3, #0
 8006646:	d102      	bne.n	800664e <HAL_TIM_Encoder_Init+0x206>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	4a09      	ldr	r2, [pc, #36]	; (8006670 <HAL_TIM_Encoder_Init+0x228>)
 800664c:	671a      	str	r2, [r3, #112]	; 0x70
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	4798      	blx	r3
 8006656:	e00d      	b.n	8006674 <HAL_TIM_Encoder_Init+0x22c>
 8006658:	40012c00 	.word	0x40012c00
 800665c:	40013400 	.word	0x40013400
 8006660:	40000400 	.word	0x40000400
 8006664:	40000800 	.word	0x40000800
 8006668:	40000c00 	.word	0x40000c00
 800666c:	0800ed50 	.word	0x0800ed50
 8006670:	0800244d 	.word	0x0800244d
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2202      	movs	r2, #2
 8006678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	689b      	ldr	r3, [r3, #8]
 8006682:	687a      	ldr	r2, [r7, #4]
 8006684:	6812      	ldr	r2, [r2, #0]
 8006686:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800668a:	f023 0307 	bic.w	r3, r3, #7
 800668e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	3304      	adds	r3, #4
 8006698:	4619      	mov	r1, r3
 800669a:	4610      	mov	r0, r2
 800669c:	f000 ff74 	bl	8007588 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	699b      	ldr	r3, [r3, #24]
 80066ae:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	6a1b      	ldr	r3, [r3, #32]
 80066b6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	697a      	ldr	r2, [r7, #20]
 80066be:	4313      	orrs	r3, r2
 80066c0:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066c8:	f023 0303 	bic.w	r3, r3, #3
 80066cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	689a      	ldr	r2, [r3, #8]
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	699b      	ldr	r3, [r3, #24]
 80066d6:	021b      	lsls	r3, r3, #8
 80066d8:	4313      	orrs	r3, r2
 80066da:	693a      	ldr	r2, [r7, #16]
 80066dc:	4313      	orrs	r3, r2
 80066de:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80066e6:	f023 030c 	bic.w	r3, r3, #12
 80066ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80066f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80066f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	68da      	ldr	r2, [r3, #12]
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	69db      	ldr	r3, [r3, #28]
 8006700:	021b      	lsls	r3, r3, #8
 8006702:	4313      	orrs	r3, r2
 8006704:	693a      	ldr	r2, [r7, #16]
 8006706:	4313      	orrs	r3, r2
 8006708:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	691b      	ldr	r3, [r3, #16]
 800670e:	011a      	lsls	r2, r3, #4
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	6a1b      	ldr	r3, [r3, #32]
 8006714:	031b      	lsls	r3, r3, #12
 8006716:	4313      	orrs	r3, r2
 8006718:	693a      	ldr	r2, [r7, #16]
 800671a:	4313      	orrs	r3, r2
 800671c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006724:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	685a      	ldr	r2, [r3, #4]
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	695b      	ldr	r3, [r3, #20]
 800672e:	011b      	lsls	r3, r3, #4
 8006730:	4313      	orrs	r3, r2
 8006732:	68fa      	ldr	r2, [r7, #12]
 8006734:	4313      	orrs	r3, r2
 8006736:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	697a      	ldr	r2, [r7, #20]
 800673e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	693a      	ldr	r2, [r7, #16]
 8006746:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	68fa      	ldr	r2, [r7, #12]
 800674e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2201      	movs	r2, #1
 8006754:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2201      	movs	r2, #1
 800675c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2201      	movs	r2, #1
 8006764:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2201      	movs	r2, #1
 800676c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2201      	movs	r2, #1
 8006774:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2201      	movs	r2, #1
 800677c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006780:	2300      	movs	r3, #0
}
 8006782:	4618      	mov	r0, r3
 8006784:	3718      	adds	r7, #24
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}
 800678a:	bf00      	nop

0800678c <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b084      	sub	sp, #16
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
 8006794:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800679c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80067a4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80067ac:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80067b4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a5d      	ldr	r2, [pc, #372]	; (8006930 <HAL_TIM_Encoder_Start_IT+0x1a4>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d01d      	beq.n	80067fc <HAL_TIM_Encoder_Start_IT+0x70>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a5b      	ldr	r2, [pc, #364]	; (8006934 <HAL_TIM_Encoder_Start_IT+0x1a8>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d018      	beq.n	80067fc <HAL_TIM_Encoder_Start_IT+0x70>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067d2:	d013      	beq.n	80067fc <HAL_TIM_Encoder_Start_IT+0x70>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a57      	ldr	r2, [pc, #348]	; (8006938 <HAL_TIM_Encoder_Start_IT+0x1ac>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d00e      	beq.n	80067fc <HAL_TIM_Encoder_Start_IT+0x70>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a56      	ldr	r2, [pc, #344]	; (800693c <HAL_TIM_Encoder_Start_IT+0x1b0>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d009      	beq.n	80067fc <HAL_TIM_Encoder_Start_IT+0x70>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a54      	ldr	r2, [pc, #336]	; (8006940 <HAL_TIM_Encoder_Start_IT+0x1b4>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d004      	beq.n	80067fc <HAL_TIM_Encoder_Start_IT+0x70>
 80067f2:	f640 41e4 	movw	r1, #3300	; 0xce4
 80067f6:	4853      	ldr	r0, [pc, #332]	; (8006944 <HAL_TIM_Encoder_Start_IT+0x1b8>)
 80067f8:	f7fb fd22 	bl	8002240 <assert_failed>

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d110      	bne.n	8006824 <HAL_TIM_Encoder_Start_IT+0x98>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006802:	7bfb      	ldrb	r3, [r7, #15]
 8006804:	2b01      	cmp	r3, #1
 8006806:	d102      	bne.n	800680e <HAL_TIM_Encoder_Start_IT+0x82>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006808:	7b7b      	ldrb	r3, [r7, #13]
 800680a:	2b01      	cmp	r3, #1
 800680c:	d001      	beq.n	8006812 <HAL_TIM_Encoder_Start_IT+0x86>
    {
      return HAL_ERROR;
 800680e:	2301      	movs	r3, #1
 8006810:	e089      	b.n	8006926 <HAL_TIM_Encoder_Start_IT+0x19a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2202      	movs	r2, #2
 8006816:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2202      	movs	r2, #2
 800681e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006822:	e031      	b.n	8006888 <HAL_TIM_Encoder_Start_IT+0xfc>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	2b04      	cmp	r3, #4
 8006828:	d110      	bne.n	800684c <HAL_TIM_Encoder_Start_IT+0xc0>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800682a:	7bbb      	ldrb	r3, [r7, #14]
 800682c:	2b01      	cmp	r3, #1
 800682e:	d102      	bne.n	8006836 <HAL_TIM_Encoder_Start_IT+0xaa>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006830:	7b3b      	ldrb	r3, [r7, #12]
 8006832:	2b01      	cmp	r3, #1
 8006834:	d001      	beq.n	800683a <HAL_TIM_Encoder_Start_IT+0xae>
    {
      return HAL_ERROR;
 8006836:	2301      	movs	r3, #1
 8006838:	e075      	b.n	8006926 <HAL_TIM_Encoder_Start_IT+0x19a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2202      	movs	r2, #2
 800683e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2202      	movs	r2, #2
 8006846:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800684a:	e01d      	b.n	8006888 <HAL_TIM_Encoder_Start_IT+0xfc>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800684c:	7bfb      	ldrb	r3, [r7, #15]
 800684e:	2b01      	cmp	r3, #1
 8006850:	d108      	bne.n	8006864 <HAL_TIM_Encoder_Start_IT+0xd8>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006852:	7bbb      	ldrb	r3, [r7, #14]
 8006854:	2b01      	cmp	r3, #1
 8006856:	d105      	bne.n	8006864 <HAL_TIM_Encoder_Start_IT+0xd8>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006858:	7b7b      	ldrb	r3, [r7, #13]
 800685a:	2b01      	cmp	r3, #1
 800685c:	d102      	bne.n	8006864 <HAL_TIM_Encoder_Start_IT+0xd8>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800685e:	7b3b      	ldrb	r3, [r7, #12]
 8006860:	2b01      	cmp	r3, #1
 8006862:	d001      	beq.n	8006868 <HAL_TIM_Encoder_Start_IT+0xdc>
    {
      return HAL_ERROR;
 8006864:	2301      	movs	r3, #1
 8006866:	e05e      	b.n	8006926 <HAL_TIM_Encoder_Start_IT+0x19a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2202      	movs	r2, #2
 800686c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2202      	movs	r2, #2
 8006874:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2202      	movs	r2, #2
 800687c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2202      	movs	r2, #2
 8006884:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d003      	beq.n	8006896 <HAL_TIM_Encoder_Start_IT+0x10a>
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	2b04      	cmp	r3, #4
 8006892:	d010      	beq.n	80068b6 <HAL_TIM_Encoder_Start_IT+0x12a>
 8006894:	e01f      	b.n	80068d6 <HAL_TIM_Encoder_Start_IT+0x14a>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	2201      	movs	r2, #1
 800689c:	2100      	movs	r1, #0
 800689e:	4618      	mov	r0, r3
 80068a0:	f001 f9bc 	bl	8007c1c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	68da      	ldr	r2, [r3, #12]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f042 0202 	orr.w	r2, r2, #2
 80068b2:	60da      	str	r2, [r3, #12]
      break;
 80068b4:	e02e      	b.n	8006914 <HAL_TIM_Encoder_Start_IT+0x188>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	2201      	movs	r2, #1
 80068bc:	2104      	movs	r1, #4
 80068be:	4618      	mov	r0, r3
 80068c0:	f001 f9ac 	bl	8007c1c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	68da      	ldr	r2, [r3, #12]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f042 0204 	orr.w	r2, r2, #4
 80068d2:	60da      	str	r2, [r3, #12]
      break;
 80068d4:	e01e      	b.n	8006914 <HAL_TIM_Encoder_Start_IT+0x188>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	2201      	movs	r2, #1
 80068dc:	2100      	movs	r1, #0
 80068de:	4618      	mov	r0, r3
 80068e0:	f001 f99c 	bl	8007c1c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	2201      	movs	r2, #1
 80068ea:	2104      	movs	r1, #4
 80068ec:	4618      	mov	r0, r3
 80068ee:	f001 f995 	bl	8007c1c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	68da      	ldr	r2, [r3, #12]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f042 0202 	orr.w	r2, r2, #2
 8006900:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	68da      	ldr	r2, [r3, #12]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f042 0204 	orr.w	r2, r2, #4
 8006910:	60da      	str	r2, [r3, #12]
      break;
 8006912:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	681a      	ldr	r2, [r3, #0]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f042 0201 	orr.w	r2, r2, #1
 8006922:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006924:	2300      	movs	r3, #0
}
 8006926:	4618      	mov	r0, r3
 8006928:	3710      	adds	r7, #16
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}
 800692e:	bf00      	nop
 8006930:	40012c00 	.word	0x40012c00
 8006934:	40013400 	.word	0x40013400
 8006938:	40000400 	.word	0x40000400
 800693c:	40000800 	.word	0x40000800
 8006940:	40000c00 	.word	0x40000c00
 8006944:	0800ed50 	.word	0x0800ed50

08006948 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b082      	sub	sp, #8
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	691b      	ldr	r3, [r3, #16]
 8006956:	f003 0302 	and.w	r3, r3, #2
 800695a:	2b02      	cmp	r3, #2
 800695c:	d128      	bne.n	80069b0 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	68db      	ldr	r3, [r3, #12]
 8006964:	f003 0302 	and.w	r3, r3, #2
 8006968:	2b02      	cmp	r3, #2
 800696a:	d121      	bne.n	80069b0 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f06f 0202 	mvn.w	r2, #2
 8006974:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2201      	movs	r2, #1
 800697a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	699b      	ldr	r3, [r3, #24]
 8006982:	f003 0303 	and.w	r3, r3, #3
 8006986:	2b00      	cmp	r3, #0
 8006988:	d005      	beq.n	8006996 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	4798      	blx	r3
 8006994:	e009      	b.n	80069aa <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2200      	movs	r2, #0
 80069ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	691b      	ldr	r3, [r3, #16]
 80069b6:	f003 0304 	and.w	r3, r3, #4
 80069ba:	2b04      	cmp	r3, #4
 80069bc:	d128      	bne.n	8006a10 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	68db      	ldr	r3, [r3, #12]
 80069c4:	f003 0304 	and.w	r3, r3, #4
 80069c8:	2b04      	cmp	r3, #4
 80069ca:	d121      	bne.n	8006a10 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f06f 0204 	mvn.w	r2, #4
 80069d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2202      	movs	r2, #2
 80069da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	699b      	ldr	r3, [r3, #24]
 80069e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d005      	beq.n	80069f6 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	4798      	blx	r3
 80069f4:	e009      	b.n	8006a0a <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	691b      	ldr	r3, [r3, #16]
 8006a16:	f003 0308 	and.w	r3, r3, #8
 8006a1a:	2b08      	cmp	r3, #8
 8006a1c:	d128      	bne.n	8006a70 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	68db      	ldr	r3, [r3, #12]
 8006a24:	f003 0308 	and.w	r3, r3, #8
 8006a28:	2b08      	cmp	r3, #8
 8006a2a:	d121      	bne.n	8006a70 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f06f 0208 	mvn.w	r2, #8
 8006a34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2204      	movs	r2, #4
 8006a3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	69db      	ldr	r3, [r3, #28]
 8006a42:	f003 0303 	and.w	r3, r3, #3
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d005      	beq.n	8006a56 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	4798      	blx	r3
 8006a54:	e009      	b.n	8006a6a <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	691b      	ldr	r3, [r3, #16]
 8006a76:	f003 0310 	and.w	r3, r3, #16
 8006a7a:	2b10      	cmp	r3, #16
 8006a7c:	d128      	bne.n	8006ad0 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	68db      	ldr	r3, [r3, #12]
 8006a84:	f003 0310 	and.w	r3, r3, #16
 8006a88:	2b10      	cmp	r3, #16
 8006a8a:	d121      	bne.n	8006ad0 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f06f 0210 	mvn.w	r2, #16
 8006a94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2208      	movs	r2, #8
 8006a9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	69db      	ldr	r3, [r3, #28]
 8006aa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d005      	beq.n	8006ab6 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	4798      	blx	r3
 8006ab4:	e009      	b.n	8006aca <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2200      	movs	r2, #0
 8006ace:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	691b      	ldr	r3, [r3, #16]
 8006ad6:	f003 0301 	and.w	r3, r3, #1
 8006ada:	2b01      	cmp	r3, #1
 8006adc:	d110      	bne.n	8006b00 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	68db      	ldr	r3, [r3, #12]
 8006ae4:	f003 0301 	and.w	r3, r3, #1
 8006ae8:	2b01      	cmp	r3, #1
 8006aea:	d109      	bne.n	8006b00 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f06f 0201 	mvn.w	r2, #1
 8006af4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	691b      	ldr	r3, [r3, #16]
 8006b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b0a:	2b80      	cmp	r3, #128	; 0x80
 8006b0c:	d110      	bne.n	8006b30 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	68db      	ldr	r3, [r3, #12]
 8006b14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b18:	2b80      	cmp	r3, #128	; 0x80
 8006b1a:	d109      	bne.n	8006b30 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006b24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	691b      	ldr	r3, [r3, #16]
 8006b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b3a:	2b40      	cmp	r3, #64	; 0x40
 8006b3c:	d110      	bne.n	8006b60 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	68db      	ldr	r3, [r3, #12]
 8006b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b48:	2b40      	cmp	r3, #64	; 0x40
 8006b4a:	d109      	bne.n	8006b60 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006b54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	691b      	ldr	r3, [r3, #16]
 8006b66:	f003 0320 	and.w	r3, r3, #32
 8006b6a:	2b20      	cmp	r3, #32
 8006b6c:	d110      	bne.n	8006b90 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	68db      	ldr	r3, [r3, #12]
 8006b74:	f003 0320 	and.w	r3, r3, #32
 8006b78:	2b20      	cmp	r3, #32
 8006b7a:	d109      	bne.n	8006b90 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f06f 0220 	mvn.w	r2, #32
 8006b84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006b90:	bf00      	nop
 8006b92:	3708      	adds	r7, #8
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}

08006b98 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b084      	sub	sp, #16
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	60f8      	str	r0, [r7, #12]
 8006ba0:	60b9      	str	r1, [r7, #8]
 8006ba2:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d010      	beq.n	8006bcc <HAL_TIM_PWM_ConfigChannel+0x34>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2b04      	cmp	r3, #4
 8006bae:	d00d      	beq.n	8006bcc <HAL_TIM_PWM_ConfigChannel+0x34>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2b08      	cmp	r3, #8
 8006bb4:	d00a      	beq.n	8006bcc <HAL_TIM_PWM_ConfigChannel+0x34>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2b0c      	cmp	r3, #12
 8006bba:	d007      	beq.n	8006bcc <HAL_TIM_PWM_ConfigChannel+0x34>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2b3c      	cmp	r3, #60	; 0x3c
 8006bc0:	d004      	beq.n	8006bcc <HAL_TIM_PWM_ConfigChannel+0x34>
 8006bc2:	f241 0127 	movw	r1, #4135	; 0x1027
 8006bc6:	4890      	ldr	r0, [pc, #576]	; (8006e08 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8006bc8:	f7fb fb3a 	bl	8002240 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	2b60      	cmp	r3, #96	; 0x60
 8006bd2:	d008      	beq.n	8006be6 <HAL_TIM_PWM_ConfigChannel+0x4e>
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	2b70      	cmp	r3, #112	; 0x70
 8006bda:	d004      	beq.n	8006be6 <HAL_TIM_PWM_ConfigChannel+0x4e>
 8006bdc:	f241 0128 	movw	r1, #4136	; 0x1028
 8006be0:	4889      	ldr	r0, [pc, #548]	; (8006e08 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8006be2:	f7fb fb2d 	bl	8002240 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	689b      	ldr	r3, [r3, #8]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d008      	beq.n	8006c00 <HAL_TIM_PWM_ConfigChannel+0x68>
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	689b      	ldr	r3, [r3, #8]
 8006bf2:	2b02      	cmp	r3, #2
 8006bf4:	d004      	beq.n	8006c00 <HAL_TIM_PWM_ConfigChannel+0x68>
 8006bf6:	f241 0129 	movw	r1, #4137	; 0x1029
 8006bfa:	4883      	ldr	r0, [pc, #524]	; (8006e08 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8006bfc:	f7fb fb20 	bl	8002240 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	691b      	ldr	r3, [r3, #16]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d008      	beq.n	8006c1a <HAL_TIM_PWM_ConfigChannel+0x82>
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	691b      	ldr	r3, [r3, #16]
 8006c0c:	2b04      	cmp	r3, #4
 8006c0e:	d004      	beq.n	8006c1a <HAL_TIM_PWM_ConfigChannel+0x82>
 8006c10:	f241 012a 	movw	r1, #4138	; 0x102a
 8006c14:	487c      	ldr	r0, [pc, #496]	; (8006e08 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8006c16:	f7fb fb13 	bl	8002240 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	d101      	bne.n	8006c28 <HAL_TIM_PWM_ConfigChannel+0x90>
 8006c24:	2302      	movs	r3, #2
 8006c26:	e145      	b.n	8006eb4 <HAL_TIM_PWM_ConfigChannel+0x31c>
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2b0c      	cmp	r3, #12
 8006c34:	f200 8138 	bhi.w	8006ea8 <HAL_TIM_PWM_ConfigChannel+0x310>
 8006c38:	a201      	add	r2, pc, #4	; (adr r2, 8006c40 <HAL_TIM_PWM_ConfigChannel+0xa8>)
 8006c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c3e:	bf00      	nop
 8006c40:	08006c75 	.word	0x08006c75
 8006c44:	08006ea9 	.word	0x08006ea9
 8006c48:	08006ea9 	.word	0x08006ea9
 8006c4c:	08006ea9 	.word	0x08006ea9
 8006c50:	08006cfb 	.word	0x08006cfb
 8006c54:	08006ea9 	.word	0x08006ea9
 8006c58:	08006ea9 	.word	0x08006ea9
 8006c5c:	08006ea9 	.word	0x08006ea9
 8006c60:	08006d83 	.word	0x08006d83
 8006c64:	08006ea9 	.word	0x08006ea9
 8006c68:	08006ea9 	.word	0x08006ea9
 8006c6c:	08006ea9 	.word	0x08006ea9
 8006c70:	08006e21 	.word	0x08006e21
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a64      	ldr	r2, [pc, #400]	; (8006e0c <HAL_TIM_PWM_ConfigChannel+0x274>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d01d      	beq.n	8006cba <HAL_TIM_PWM_ConfigChannel+0x122>
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a63      	ldr	r2, [pc, #396]	; (8006e10 <HAL_TIM_PWM_ConfigChannel+0x278>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d018      	beq.n	8006cba <HAL_TIM_PWM_ConfigChannel+0x122>
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c90:	d013      	beq.n	8006cba <HAL_TIM_PWM_ConfigChannel+0x122>
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a5f      	ldr	r2, [pc, #380]	; (8006e14 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d00e      	beq.n	8006cba <HAL_TIM_PWM_ConfigChannel+0x122>
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a5d      	ldr	r2, [pc, #372]	; (8006e18 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d009      	beq.n	8006cba <HAL_TIM_PWM_ConfigChannel+0x122>
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a5c      	ldr	r2, [pc, #368]	; (8006e1c <HAL_TIM_PWM_ConfigChannel+0x284>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d004      	beq.n	8006cba <HAL_TIM_PWM_ConfigChannel+0x122>
 8006cb0:	f241 0134 	movw	r1, #4148	; 0x1034
 8006cb4:	4854      	ldr	r0, [pc, #336]	; (8006e08 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8006cb6:	f7fb fac3 	bl	8002240 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	68b9      	ldr	r1, [r7, #8]
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f000 fcdb 	bl	800767c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	699a      	ldr	r2, [r3, #24]
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f042 0208 	orr.w	r2, r2, #8
 8006cd4:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	699a      	ldr	r2, [r3, #24]
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f022 0204 	bic.w	r2, r2, #4
 8006ce4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	6999      	ldr	r1, [r3, #24]
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	691a      	ldr	r2, [r3, #16]
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	430a      	orrs	r2, r1
 8006cf6:	619a      	str	r2, [r3, #24]
      break;
 8006cf8:	e0d7      	b.n	8006eaa <HAL_TIM_PWM_ConfigChannel+0x312>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a43      	ldr	r2, [pc, #268]	; (8006e0c <HAL_TIM_PWM_ConfigChannel+0x274>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d01d      	beq.n	8006d40 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a41      	ldr	r2, [pc, #260]	; (8006e10 <HAL_TIM_PWM_ConfigChannel+0x278>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d018      	beq.n	8006d40 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d16:	d013      	beq.n	8006d40 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a3d      	ldr	r2, [pc, #244]	; (8006e14 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d00e      	beq.n	8006d40 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a3c      	ldr	r2, [pc, #240]	; (8006e18 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d009      	beq.n	8006d40 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a3a      	ldr	r2, [pc, #232]	; (8006e1c <HAL_TIM_PWM_ConfigChannel+0x284>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d004      	beq.n	8006d40 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 8006d36:	f241 0145 	movw	r1, #4165	; 0x1045
 8006d3a:	4833      	ldr	r0, [pc, #204]	; (8006e08 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8006d3c:	f7fb fa80 	bl	8002240 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	68b9      	ldr	r1, [r7, #8]
 8006d46:	4618      	mov	r0, r3
 8006d48:	f000 fd32 	bl	80077b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	699a      	ldr	r2, [r3, #24]
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	699a      	ldr	r2, [r3, #24]
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	6999      	ldr	r1, [r3, #24]
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	691b      	ldr	r3, [r3, #16]
 8006d76:	021a      	lsls	r2, r3, #8
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	430a      	orrs	r2, r1
 8006d7e:	619a      	str	r2, [r3, #24]
      break;
 8006d80:	e093      	b.n	8006eaa <HAL_TIM_PWM_ConfigChannel+0x312>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a21      	ldr	r2, [pc, #132]	; (8006e0c <HAL_TIM_PWM_ConfigChannel+0x274>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d01d      	beq.n	8006dc8 <HAL_TIM_PWM_ConfigChannel+0x230>
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a1f      	ldr	r2, [pc, #124]	; (8006e10 <HAL_TIM_PWM_ConfigChannel+0x278>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d018      	beq.n	8006dc8 <HAL_TIM_PWM_ConfigChannel+0x230>
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d9e:	d013      	beq.n	8006dc8 <HAL_TIM_PWM_ConfigChannel+0x230>
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a1b      	ldr	r2, [pc, #108]	; (8006e14 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d00e      	beq.n	8006dc8 <HAL_TIM_PWM_ConfigChannel+0x230>
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a1a      	ldr	r2, [pc, #104]	; (8006e18 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d009      	beq.n	8006dc8 <HAL_TIM_PWM_ConfigChannel+0x230>
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a18      	ldr	r2, [pc, #96]	; (8006e1c <HAL_TIM_PWM_ConfigChannel+0x284>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d004      	beq.n	8006dc8 <HAL_TIM_PWM_ConfigChannel+0x230>
 8006dbe:	f241 0156 	movw	r1, #4182	; 0x1056
 8006dc2:	4811      	ldr	r0, [pc, #68]	; (8006e08 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8006dc4:	f7fb fa3c 	bl	8002240 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	68b9      	ldr	r1, [r7, #8]
 8006dce:	4618      	mov	r0, r3
 8006dd0:	f000 fd8c 	bl	80078ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	69da      	ldr	r2, [r3, #28]
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f042 0208 	orr.w	r2, r2, #8
 8006de2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	69da      	ldr	r2, [r3, #28]
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f022 0204 	bic.w	r2, r2, #4
 8006df2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	69d9      	ldr	r1, [r3, #28]
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	691a      	ldr	r2, [r3, #16]
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	430a      	orrs	r2, r1
 8006e04:	61da      	str	r2, [r3, #28]
      break;
 8006e06:	e050      	b.n	8006eaa <HAL_TIM_PWM_ConfigChannel+0x312>
 8006e08:	0800ed50 	.word	0x0800ed50
 8006e0c:	40012c00 	.word	0x40012c00
 8006e10:	40013400 	.word	0x40013400
 8006e14:	40000400 	.word	0x40000400
 8006e18:	40000800 	.word	0x40000800
 8006e1c:	40000c00 	.word	0x40000c00
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a25      	ldr	r2, [pc, #148]	; (8006ebc <HAL_TIM_PWM_ConfigChannel+0x324>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d01d      	beq.n	8006e66 <HAL_TIM_PWM_ConfigChannel+0x2ce>
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a24      	ldr	r2, [pc, #144]	; (8006ec0 <HAL_TIM_PWM_ConfigChannel+0x328>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d018      	beq.n	8006e66 <HAL_TIM_PWM_ConfigChannel+0x2ce>
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e3c:	d013      	beq.n	8006e66 <HAL_TIM_PWM_ConfigChannel+0x2ce>
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a20      	ldr	r2, [pc, #128]	; (8006ec4 <HAL_TIM_PWM_ConfigChannel+0x32c>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d00e      	beq.n	8006e66 <HAL_TIM_PWM_ConfigChannel+0x2ce>
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a1e      	ldr	r2, [pc, #120]	; (8006ec8 <HAL_TIM_PWM_ConfigChannel+0x330>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d009      	beq.n	8006e66 <HAL_TIM_PWM_ConfigChannel+0x2ce>
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a1d      	ldr	r2, [pc, #116]	; (8006ecc <HAL_TIM_PWM_ConfigChannel+0x334>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d004      	beq.n	8006e66 <HAL_TIM_PWM_ConfigChannel+0x2ce>
 8006e5c:	f241 0167 	movw	r1, #4199	; 0x1067
 8006e60:	481b      	ldr	r0, [pc, #108]	; (8006ed0 <HAL_TIM_PWM_ConfigChannel+0x338>)
 8006e62:	f7fb f9ed 	bl	8002240 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	68b9      	ldr	r1, [r7, #8]
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	f000 fddb 	bl	8007a28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	69da      	ldr	r2, [r3, #28]
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	69da      	ldr	r2, [r3, #28]
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	69d9      	ldr	r1, [r3, #28]
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	691b      	ldr	r3, [r3, #16]
 8006e9c:	021a      	lsls	r2, r3, #8
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	430a      	orrs	r2, r1
 8006ea4:	61da      	str	r2, [r3, #28]
      break;
 8006ea6:	e000      	b.n	8006eaa <HAL_TIM_PWM_ConfigChannel+0x312>
    }

    default:
      break;
 8006ea8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	2200      	movs	r2, #0
 8006eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006eb2:	2300      	movs	r3, #0
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	3710      	adds	r7, #16
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}
 8006ebc:	40012c00 	.word	0x40012c00
 8006ec0:	40013400 	.word	0x40013400
 8006ec4:	40000400 	.word	0x40000400
 8006ec8:	40000800 	.word	0x40000800
 8006ecc:	40000c00 	.word	0x40000c00
 8006ed0:	0800ed50 	.word	0x0800ed50

08006ed4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b084      	sub	sp, #16
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
 8006edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	d101      	bne.n	8006eec <HAL_TIM_ConfigClockSource+0x18>
 8006ee8:	2302      	movs	r3, #2
 8006eea:	e2f5      	b.n	80074d8 <HAL_TIM_ConfigClockSource+0x604>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2201      	movs	r2, #1
 8006ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2202      	movs	r2, #2
 8006ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f04:	d029      	beq.n	8006f5a <HAL_TIM_ConfigClockSource+0x86>
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f0e:	d024      	beq.n	8006f5a <HAL_TIM_ConfigClockSource+0x86>
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d020      	beq.n	8006f5a <HAL_TIM_ConfigClockSource+0x86>
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	2b10      	cmp	r3, #16
 8006f1e:	d01c      	beq.n	8006f5a <HAL_TIM_ConfigClockSource+0x86>
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	2b20      	cmp	r3, #32
 8006f26:	d018      	beq.n	8006f5a <HAL_TIM_ConfigClockSource+0x86>
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	2b30      	cmp	r3, #48	; 0x30
 8006f2e:	d014      	beq.n	8006f5a <HAL_TIM_ConfigClockSource+0x86>
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	2b40      	cmp	r3, #64	; 0x40
 8006f36:	d010      	beq.n	8006f5a <HAL_TIM_ConfigClockSource+0x86>
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	2b50      	cmp	r3, #80	; 0x50
 8006f3e:	d00c      	beq.n	8006f5a <HAL_TIM_ConfigClockSource+0x86>
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	2b60      	cmp	r3, #96	; 0x60
 8006f46:	d008      	beq.n	8006f5a <HAL_TIM_ConfigClockSource+0x86>
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	2b70      	cmp	r3, #112	; 0x70
 8006f4e:	d004      	beq.n	8006f5a <HAL_TIM_ConfigClockSource+0x86>
 8006f50:	f241 4132 	movw	r1, #5170	; 0x1432
 8006f54:	487c      	ldr	r0, [pc, #496]	; (8007148 <HAL_TIM_ConfigClockSource+0x274>)
 8006f56:	f7fb f973 	bl	8002240 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	689b      	ldr	r3, [r3, #8]
 8006f60:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006f68:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f70:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	68fa      	ldr	r2, [r7, #12]
 8006f78:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f82:	f000 80f1 	beq.w	8007168 <HAL_TIM_ConfigClockSource+0x294>
 8006f86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f8a:	f200 8299 	bhi.w	80074c0 <HAL_TIM_ConfigClockSource+0x5ec>
 8006f8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f92:	d02d      	beq.n	8006ff0 <HAL_TIM_ConfigClockSource+0x11c>
 8006f94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f98:	f200 8292 	bhi.w	80074c0 <HAL_TIM_ConfigClockSource+0x5ec>
 8006f9c:	2b70      	cmp	r3, #112	; 0x70
 8006f9e:	d05d      	beq.n	800705c <HAL_TIM_ConfigClockSource+0x188>
 8006fa0:	2b70      	cmp	r3, #112	; 0x70
 8006fa2:	f200 828d 	bhi.w	80074c0 <HAL_TIM_ConfigClockSource+0x5ec>
 8006fa6:	2b60      	cmp	r3, #96	; 0x60
 8006fa8:	f000 81a5 	beq.w	80072f6 <HAL_TIM_ConfigClockSource+0x422>
 8006fac:	2b60      	cmp	r3, #96	; 0x60
 8006fae:	f200 8287 	bhi.w	80074c0 <HAL_TIM_ConfigClockSource+0x5ec>
 8006fb2:	2b50      	cmp	r3, #80	; 0x50
 8006fb4:	f000 8149 	beq.w	800724a <HAL_TIM_ConfigClockSource+0x376>
 8006fb8:	2b50      	cmp	r3, #80	; 0x50
 8006fba:	f200 8281 	bhi.w	80074c0 <HAL_TIM_ConfigClockSource+0x5ec>
 8006fbe:	2b40      	cmp	r3, #64	; 0x40
 8006fc0:	f000 81fc 	beq.w	80073bc <HAL_TIM_ConfigClockSource+0x4e8>
 8006fc4:	2b40      	cmp	r3, #64	; 0x40
 8006fc6:	f200 827b 	bhi.w	80074c0 <HAL_TIM_ConfigClockSource+0x5ec>
 8006fca:	2b30      	cmp	r3, #48	; 0x30
 8006fcc:	f000 824c 	beq.w	8007468 <HAL_TIM_ConfigClockSource+0x594>
 8006fd0:	2b30      	cmp	r3, #48	; 0x30
 8006fd2:	f200 8275 	bhi.w	80074c0 <HAL_TIM_ConfigClockSource+0x5ec>
 8006fd6:	2b20      	cmp	r3, #32
 8006fd8:	f000 8246 	beq.w	8007468 <HAL_TIM_ConfigClockSource+0x594>
 8006fdc:	2b20      	cmp	r3, #32
 8006fde:	f200 826f 	bhi.w	80074c0 <HAL_TIM_ConfigClockSource+0x5ec>
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	f000 8240 	beq.w	8007468 <HAL_TIM_ConfigClockSource+0x594>
 8006fe8:	2b10      	cmp	r3, #16
 8006fea:	f000 823d 	beq.w	8007468 <HAL_TIM_ConfigClockSource+0x594>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006fee:	e267      	b.n	80074c0 <HAL_TIM_ConfigClockSource+0x5ec>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a55      	ldr	r2, [pc, #340]	; (800714c <HAL_TIM_ConfigClockSource+0x278>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	f000 8264 	beq.w	80074c4 <HAL_TIM_ConfigClockSource+0x5f0>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a53      	ldr	r2, [pc, #332]	; (8007150 <HAL_TIM_ConfigClockSource+0x27c>)
 8007002:	4293      	cmp	r3, r2
 8007004:	f000 825e 	beq.w	80074c4 <HAL_TIM_ConfigClockSource+0x5f0>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007010:	f000 8258 	beq.w	80074c4 <HAL_TIM_ConfigClockSource+0x5f0>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a4e      	ldr	r2, [pc, #312]	; (8007154 <HAL_TIM_ConfigClockSource+0x280>)
 800701a:	4293      	cmp	r3, r2
 800701c:	f000 8252 	beq.w	80074c4 <HAL_TIM_ConfigClockSource+0x5f0>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a4c      	ldr	r2, [pc, #304]	; (8007158 <HAL_TIM_ConfigClockSource+0x284>)
 8007026:	4293      	cmp	r3, r2
 8007028:	f000 824c 	beq.w	80074c4 <HAL_TIM_ConfigClockSource+0x5f0>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a4a      	ldr	r2, [pc, #296]	; (800715c <HAL_TIM_ConfigClockSource+0x288>)
 8007032:	4293      	cmp	r3, r2
 8007034:	f000 8246 	beq.w	80074c4 <HAL_TIM_ConfigClockSource+0x5f0>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a48      	ldr	r2, [pc, #288]	; (8007160 <HAL_TIM_ConfigClockSource+0x28c>)
 800703e:	4293      	cmp	r3, r2
 8007040:	f000 8240 	beq.w	80074c4 <HAL_TIM_ConfigClockSource+0x5f0>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a46      	ldr	r2, [pc, #280]	; (8007164 <HAL_TIM_ConfigClockSource+0x290>)
 800704a:	4293      	cmp	r3, r2
 800704c:	f000 823a 	beq.w	80074c4 <HAL_TIM_ConfigClockSource+0x5f0>
 8007050:	f241 413e 	movw	r1, #5182	; 0x143e
 8007054:	483c      	ldr	r0, [pc, #240]	; (8007148 <HAL_TIM_ConfigClockSource+0x274>)
 8007056:	f7fb f8f3 	bl	8002240 <assert_failed>
      break;
 800705a:	e233      	b.n	80074c4 <HAL_TIM_ConfigClockSource+0x5f0>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a3a      	ldr	r2, [pc, #232]	; (800714c <HAL_TIM_ConfigClockSource+0x278>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d01d      	beq.n	80070a2 <HAL_TIM_ConfigClockSource+0x1ce>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a39      	ldr	r2, [pc, #228]	; (8007150 <HAL_TIM_ConfigClockSource+0x27c>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d018      	beq.n	80070a2 <HAL_TIM_ConfigClockSource+0x1ce>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007078:	d013      	beq.n	80070a2 <HAL_TIM_ConfigClockSource+0x1ce>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4a35      	ldr	r2, [pc, #212]	; (8007154 <HAL_TIM_ConfigClockSource+0x280>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d00e      	beq.n	80070a2 <HAL_TIM_ConfigClockSource+0x1ce>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a33      	ldr	r2, [pc, #204]	; (8007158 <HAL_TIM_ConfigClockSource+0x284>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d009      	beq.n	80070a2 <HAL_TIM_ConfigClockSource+0x1ce>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a32      	ldr	r2, [pc, #200]	; (800715c <HAL_TIM_ConfigClockSource+0x288>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d004      	beq.n	80070a2 <HAL_TIM_ConfigClockSource+0x1ce>
 8007098:	f241 4145 	movw	r1, #5189	; 0x1445
 800709c:	482a      	ldr	r0, [pc, #168]	; (8007148 <HAL_TIM_ConfigClockSource+0x274>)
 800709e:	f7fb f8cf 	bl	8002240 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	689b      	ldr	r3, [r3, #8]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d013      	beq.n	80070d2 <HAL_TIM_ConfigClockSource+0x1fe>
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	689b      	ldr	r3, [r3, #8]
 80070ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070b2:	d00e      	beq.n	80070d2 <HAL_TIM_ConfigClockSource+0x1fe>
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	689b      	ldr	r3, [r3, #8]
 80070b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070bc:	d009      	beq.n	80070d2 <HAL_TIM_ConfigClockSource+0x1fe>
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	689b      	ldr	r3, [r3, #8]
 80070c2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80070c6:	d004      	beq.n	80070d2 <HAL_TIM_ConfigClockSource+0x1fe>
 80070c8:	f241 4148 	movw	r1, #5192	; 0x1448
 80070cc:	481e      	ldr	r0, [pc, #120]	; (8007148 <HAL_TIM_ConfigClockSource+0x274>)
 80070ce:	f7fb f8b7 	bl	8002240 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070da:	d014      	beq.n	8007106 <HAL_TIM_ConfigClockSource+0x232>
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d010      	beq.n	8007106 <HAL_TIM_ConfigClockSource+0x232>
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d00c      	beq.n	8007106 <HAL_TIM_ConfigClockSource+0x232>
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	2b02      	cmp	r3, #2
 80070f2:	d008      	beq.n	8007106 <HAL_TIM_ConfigClockSource+0x232>
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	2b0a      	cmp	r3, #10
 80070fa:	d004      	beq.n	8007106 <HAL_TIM_ConfigClockSource+0x232>
 80070fc:	f241 4149 	movw	r1, #5193	; 0x1449
 8007100:	4811      	ldr	r0, [pc, #68]	; (8007148 <HAL_TIM_ConfigClockSource+0x274>)
 8007102:	f7fb f89d 	bl	8002240 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	68db      	ldr	r3, [r3, #12]
 800710a:	2b0f      	cmp	r3, #15
 800710c:	d904      	bls.n	8007118 <HAL_TIM_ConfigClockSource+0x244>
 800710e:	f241 414a 	movw	r1, #5194	; 0x144a
 8007112:	480d      	ldr	r0, [pc, #52]	; (8007148 <HAL_TIM_ConfigClockSource+0x274>)
 8007114:	f7fb f894 	bl	8002240 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6818      	ldr	r0, [r3, #0]
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	6899      	ldr	r1, [r3, #8]
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	685a      	ldr	r2, [r3, #4]
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	68db      	ldr	r3, [r3, #12]
 8007128:	f000 fd59 	bl	8007bde <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	689b      	ldr	r3, [r3, #8]
 8007132:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800713a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	68fa      	ldr	r2, [r7, #12]
 8007142:	609a      	str	r2, [r3, #8]
      break;
 8007144:	e1bf      	b.n	80074c6 <HAL_TIM_ConfigClockSource+0x5f2>
 8007146:	bf00      	nop
 8007148:	0800ed50 	.word	0x0800ed50
 800714c:	40012c00 	.word	0x40012c00
 8007150:	40013400 	.word	0x40013400
 8007154:	40000400 	.word	0x40000400
 8007158:	40000800 	.word	0x40000800
 800715c:	40000c00 	.word	0x40000c00
 8007160:	40001000 	.word	0x40001000
 8007164:	40001400 	.word	0x40001400
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4a8d      	ldr	r2, [pc, #564]	; (80073a4 <HAL_TIM_ConfigClockSource+0x4d0>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d01d      	beq.n	80071ae <HAL_TIM_ConfigClockSource+0x2da>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4a8c      	ldr	r2, [pc, #560]	; (80073a8 <HAL_TIM_ConfigClockSource+0x4d4>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d018      	beq.n	80071ae <HAL_TIM_ConfigClockSource+0x2da>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007184:	d013      	beq.n	80071ae <HAL_TIM_ConfigClockSource+0x2da>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a88      	ldr	r2, [pc, #544]	; (80073ac <HAL_TIM_ConfigClockSource+0x4d8>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d00e      	beq.n	80071ae <HAL_TIM_ConfigClockSource+0x2da>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4a86      	ldr	r2, [pc, #536]	; (80073b0 <HAL_TIM_ConfigClockSource+0x4dc>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d009      	beq.n	80071ae <HAL_TIM_ConfigClockSource+0x2da>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4a85      	ldr	r2, [pc, #532]	; (80073b4 <HAL_TIM_ConfigClockSource+0x4e0>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d004      	beq.n	80071ae <HAL_TIM_ConfigClockSource+0x2da>
 80071a4:	f241 415d 	movw	r1, #5213	; 0x145d
 80071a8:	4883      	ldr	r0, [pc, #524]	; (80073b8 <HAL_TIM_ConfigClockSource+0x4e4>)
 80071aa:	f7fb f849 	bl	8002240 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	689b      	ldr	r3, [r3, #8]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d013      	beq.n	80071de <HAL_TIM_ConfigClockSource+0x30a>
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	689b      	ldr	r3, [r3, #8]
 80071ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071be:	d00e      	beq.n	80071de <HAL_TIM_ConfigClockSource+0x30a>
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	689b      	ldr	r3, [r3, #8]
 80071c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071c8:	d009      	beq.n	80071de <HAL_TIM_ConfigClockSource+0x30a>
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	689b      	ldr	r3, [r3, #8]
 80071ce:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80071d2:	d004      	beq.n	80071de <HAL_TIM_ConfigClockSource+0x30a>
 80071d4:	f44f 51a3 	mov.w	r1, #5216	; 0x1460
 80071d8:	4877      	ldr	r0, [pc, #476]	; (80073b8 <HAL_TIM_ConfigClockSource+0x4e4>)
 80071da:	f7fb f831 	bl	8002240 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	685b      	ldr	r3, [r3, #4]
 80071e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071e6:	d014      	beq.n	8007212 <HAL_TIM_ConfigClockSource+0x33e>
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d010      	beq.n	8007212 <HAL_TIM_ConfigClockSource+0x33e>
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	685b      	ldr	r3, [r3, #4]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d00c      	beq.n	8007212 <HAL_TIM_ConfigClockSource+0x33e>
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	2b02      	cmp	r3, #2
 80071fe:	d008      	beq.n	8007212 <HAL_TIM_ConfigClockSource+0x33e>
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	2b0a      	cmp	r3, #10
 8007206:	d004      	beq.n	8007212 <HAL_TIM_ConfigClockSource+0x33e>
 8007208:	f241 4161 	movw	r1, #5217	; 0x1461
 800720c:	486a      	ldr	r0, [pc, #424]	; (80073b8 <HAL_TIM_ConfigClockSource+0x4e4>)
 800720e:	f7fb f817 	bl	8002240 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	68db      	ldr	r3, [r3, #12]
 8007216:	2b0f      	cmp	r3, #15
 8007218:	d904      	bls.n	8007224 <HAL_TIM_ConfigClockSource+0x350>
 800721a:	f241 4162 	movw	r1, #5218	; 0x1462
 800721e:	4866      	ldr	r0, [pc, #408]	; (80073b8 <HAL_TIM_ConfigClockSource+0x4e4>)
 8007220:	f7fb f80e 	bl	8002240 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6818      	ldr	r0, [r3, #0]
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	6899      	ldr	r1, [r3, #8]
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	685a      	ldr	r2, [r3, #4]
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	68db      	ldr	r3, [r3, #12]
 8007234:	f000 fcd3 	bl	8007bde <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	689a      	ldr	r2, [r3, #8]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007246:	609a      	str	r2, [r3, #8]
      break;
 8007248:	e13d      	b.n	80074c6 <HAL_TIM_ConfigClockSource+0x5f2>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a55      	ldr	r2, [pc, #340]	; (80073a4 <HAL_TIM_ConfigClockSource+0x4d0>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d01d      	beq.n	8007290 <HAL_TIM_ConfigClockSource+0x3bc>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a53      	ldr	r2, [pc, #332]	; (80073a8 <HAL_TIM_ConfigClockSource+0x4d4>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d018      	beq.n	8007290 <HAL_TIM_ConfigClockSource+0x3bc>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007266:	d013      	beq.n	8007290 <HAL_TIM_ConfigClockSource+0x3bc>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a4f      	ldr	r2, [pc, #316]	; (80073ac <HAL_TIM_ConfigClockSource+0x4d8>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d00e      	beq.n	8007290 <HAL_TIM_ConfigClockSource+0x3bc>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a4e      	ldr	r2, [pc, #312]	; (80073b0 <HAL_TIM_ConfigClockSource+0x4dc>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d009      	beq.n	8007290 <HAL_TIM_ConfigClockSource+0x3bc>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a4c      	ldr	r2, [pc, #304]	; (80073b4 <HAL_TIM_ConfigClockSource+0x4e0>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d004      	beq.n	8007290 <HAL_TIM_ConfigClockSource+0x3bc>
 8007286:	f241 4171 	movw	r1, #5233	; 0x1471
 800728a:	484b      	ldr	r0, [pc, #300]	; (80073b8 <HAL_TIM_ConfigClockSource+0x4e4>)
 800728c:	f7fa ffd8 	bl	8002240 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	685b      	ldr	r3, [r3, #4]
 8007294:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007298:	d014      	beq.n	80072c4 <HAL_TIM_ConfigClockSource+0x3f0>
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	685b      	ldr	r3, [r3, #4]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d010      	beq.n	80072c4 <HAL_TIM_ConfigClockSource+0x3f0>
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	685b      	ldr	r3, [r3, #4]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d00c      	beq.n	80072c4 <HAL_TIM_ConfigClockSource+0x3f0>
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	2b02      	cmp	r3, #2
 80072b0:	d008      	beq.n	80072c4 <HAL_TIM_ConfigClockSource+0x3f0>
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	685b      	ldr	r3, [r3, #4]
 80072b6:	2b0a      	cmp	r3, #10
 80072b8:	d004      	beq.n	80072c4 <HAL_TIM_ConfigClockSource+0x3f0>
 80072ba:	f241 4174 	movw	r1, #5236	; 0x1474
 80072be:	483e      	ldr	r0, [pc, #248]	; (80073b8 <HAL_TIM_ConfigClockSource+0x4e4>)
 80072c0:	f7fa ffbe 	bl	8002240 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	68db      	ldr	r3, [r3, #12]
 80072c8:	2b0f      	cmp	r3, #15
 80072ca:	d904      	bls.n	80072d6 <HAL_TIM_ConfigClockSource+0x402>
 80072cc:	f241 4175 	movw	r1, #5237	; 0x1475
 80072d0:	4839      	ldr	r0, [pc, #228]	; (80073b8 <HAL_TIM_ConfigClockSource+0x4e4>)
 80072d2:	f7fa ffb5 	bl	8002240 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6818      	ldr	r0, [r3, #0]
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	6859      	ldr	r1, [r3, #4]
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	68db      	ldr	r3, [r3, #12]
 80072e2:	461a      	mov	r2, r3
 80072e4:	f000 fc04 	bl	8007af0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	2150      	movs	r1, #80	; 0x50
 80072ee:	4618      	mov	r0, r3
 80072f0:	f000 fc5b 	bl	8007baa <TIM_ITRx_SetConfig>
      break;
 80072f4:	e0e7      	b.n	80074c6 <HAL_TIM_ConfigClockSource+0x5f2>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a2a      	ldr	r2, [pc, #168]	; (80073a4 <HAL_TIM_ConfigClockSource+0x4d0>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d01d      	beq.n	800733c <HAL_TIM_ConfigClockSource+0x468>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a28      	ldr	r2, [pc, #160]	; (80073a8 <HAL_TIM_ConfigClockSource+0x4d4>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d018      	beq.n	800733c <HAL_TIM_ConfigClockSource+0x468>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007312:	d013      	beq.n	800733c <HAL_TIM_ConfigClockSource+0x468>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a24      	ldr	r2, [pc, #144]	; (80073ac <HAL_TIM_ConfigClockSource+0x4d8>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d00e      	beq.n	800733c <HAL_TIM_ConfigClockSource+0x468>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a23      	ldr	r2, [pc, #140]	; (80073b0 <HAL_TIM_ConfigClockSource+0x4dc>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d009      	beq.n	800733c <HAL_TIM_ConfigClockSource+0x468>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a21      	ldr	r2, [pc, #132]	; (80073b4 <HAL_TIM_ConfigClockSource+0x4e0>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d004      	beq.n	800733c <HAL_TIM_ConfigClockSource+0x468>
 8007332:	f241 4181 	movw	r1, #5249	; 0x1481
 8007336:	4820      	ldr	r0, [pc, #128]	; (80073b8 <HAL_TIM_ConfigClockSource+0x4e4>)
 8007338:	f7fa ff82 	bl	8002240 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007344:	d014      	beq.n	8007370 <HAL_TIM_ConfigClockSource+0x49c>
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d010      	beq.n	8007370 <HAL_TIM_ConfigClockSource+0x49c>
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d00c      	beq.n	8007370 <HAL_TIM_ConfigClockSource+0x49c>
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	685b      	ldr	r3, [r3, #4]
 800735a:	2b02      	cmp	r3, #2
 800735c:	d008      	beq.n	8007370 <HAL_TIM_ConfigClockSource+0x49c>
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	2b0a      	cmp	r3, #10
 8007364:	d004      	beq.n	8007370 <HAL_TIM_ConfigClockSource+0x49c>
 8007366:	f241 4184 	movw	r1, #5252	; 0x1484
 800736a:	4813      	ldr	r0, [pc, #76]	; (80073b8 <HAL_TIM_ConfigClockSource+0x4e4>)
 800736c:	f7fa ff68 	bl	8002240 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	68db      	ldr	r3, [r3, #12]
 8007374:	2b0f      	cmp	r3, #15
 8007376:	d904      	bls.n	8007382 <HAL_TIM_ConfigClockSource+0x4ae>
 8007378:	f241 4185 	movw	r1, #5253	; 0x1485
 800737c:	480e      	ldr	r0, [pc, #56]	; (80073b8 <HAL_TIM_ConfigClockSource+0x4e4>)
 800737e:	f7fa ff5f 	bl	8002240 <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6818      	ldr	r0, [r3, #0]
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	6859      	ldr	r1, [r3, #4]
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	68db      	ldr	r3, [r3, #12]
 800738e:	461a      	mov	r2, r3
 8007390:	f000 fbdc 	bl	8007b4c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	2160      	movs	r1, #96	; 0x60
 800739a:	4618      	mov	r0, r3
 800739c:	f000 fc05 	bl	8007baa <TIM_ITRx_SetConfig>
      break;
 80073a0:	e091      	b.n	80074c6 <HAL_TIM_ConfigClockSource+0x5f2>
 80073a2:	bf00      	nop
 80073a4:	40012c00 	.word	0x40012c00
 80073a8:	40013400 	.word	0x40013400
 80073ac:	40000400 	.word	0x40000400
 80073b0:	40000800 	.word	0x40000800
 80073b4:	40000c00 	.word	0x40000c00
 80073b8:	0800ed50 	.word	0x0800ed50
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a47      	ldr	r2, [pc, #284]	; (80074e0 <HAL_TIM_ConfigClockSource+0x60c>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d01d      	beq.n	8007402 <HAL_TIM_ConfigClockSource+0x52e>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a46      	ldr	r2, [pc, #280]	; (80074e4 <HAL_TIM_ConfigClockSource+0x610>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d018      	beq.n	8007402 <HAL_TIM_ConfigClockSource+0x52e>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073d8:	d013      	beq.n	8007402 <HAL_TIM_ConfigClockSource+0x52e>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4a42      	ldr	r2, [pc, #264]	; (80074e8 <HAL_TIM_ConfigClockSource+0x614>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d00e      	beq.n	8007402 <HAL_TIM_ConfigClockSource+0x52e>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a40      	ldr	r2, [pc, #256]	; (80074ec <HAL_TIM_ConfigClockSource+0x618>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d009      	beq.n	8007402 <HAL_TIM_ConfigClockSource+0x52e>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4a3f      	ldr	r2, [pc, #252]	; (80074f0 <HAL_TIM_ConfigClockSource+0x61c>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d004      	beq.n	8007402 <HAL_TIM_ConfigClockSource+0x52e>
 80073f8:	f241 4191 	movw	r1, #5265	; 0x1491
 80073fc:	483d      	ldr	r0, [pc, #244]	; (80074f4 <HAL_TIM_ConfigClockSource+0x620>)
 80073fe:	f7fa ff1f 	bl	8002240 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800740a:	d014      	beq.n	8007436 <HAL_TIM_ConfigClockSource+0x562>
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d010      	beq.n	8007436 <HAL_TIM_ConfigClockSource+0x562>
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d00c      	beq.n	8007436 <HAL_TIM_ConfigClockSource+0x562>
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	685b      	ldr	r3, [r3, #4]
 8007420:	2b02      	cmp	r3, #2
 8007422:	d008      	beq.n	8007436 <HAL_TIM_ConfigClockSource+0x562>
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	2b0a      	cmp	r3, #10
 800742a:	d004      	beq.n	8007436 <HAL_TIM_ConfigClockSource+0x562>
 800742c:	f241 4194 	movw	r1, #5268	; 0x1494
 8007430:	4830      	ldr	r0, [pc, #192]	; (80074f4 <HAL_TIM_ConfigClockSource+0x620>)
 8007432:	f7fa ff05 	bl	8002240 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	68db      	ldr	r3, [r3, #12]
 800743a:	2b0f      	cmp	r3, #15
 800743c:	d904      	bls.n	8007448 <HAL_TIM_ConfigClockSource+0x574>
 800743e:	f241 4195 	movw	r1, #5269	; 0x1495
 8007442:	482c      	ldr	r0, [pc, #176]	; (80074f4 <HAL_TIM_ConfigClockSource+0x620>)
 8007444:	f7fa fefc 	bl	8002240 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6818      	ldr	r0, [r3, #0]
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	6859      	ldr	r1, [r3, #4]
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	68db      	ldr	r3, [r3, #12]
 8007454:	461a      	mov	r2, r3
 8007456:	f000 fb4b 	bl	8007af0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	2140      	movs	r1, #64	; 0x40
 8007460:	4618      	mov	r0, r3
 8007462:	f000 fba2 	bl	8007baa <TIM_ITRx_SetConfig>
      break;
 8007466:	e02e      	b.n	80074c6 <HAL_TIM_ConfigClockSource+0x5f2>
        assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a1c      	ldr	r2, [pc, #112]	; (80074e0 <HAL_TIM_ConfigClockSource+0x60c>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d01d      	beq.n	80074ae <HAL_TIM_ConfigClockSource+0x5da>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4a1b      	ldr	r2, [pc, #108]	; (80074e4 <HAL_TIM_ConfigClockSource+0x610>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d018      	beq.n	80074ae <HAL_TIM_ConfigClockSource+0x5da>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007484:	d013      	beq.n	80074ae <HAL_TIM_ConfigClockSource+0x5da>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4a17      	ldr	r2, [pc, #92]	; (80074e8 <HAL_TIM_ConfigClockSource+0x614>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d00e      	beq.n	80074ae <HAL_TIM_ConfigClockSource+0x5da>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4a15      	ldr	r2, [pc, #84]	; (80074ec <HAL_TIM_ConfigClockSource+0x618>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d009      	beq.n	80074ae <HAL_TIM_ConfigClockSource+0x5da>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4a14      	ldr	r2, [pc, #80]	; (80074f0 <HAL_TIM_ConfigClockSource+0x61c>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d004      	beq.n	80074ae <HAL_TIM_ConfigClockSource+0x5da>
 80074a4:	f241 41a4 	movw	r1, #5284	; 0x14a4
 80074a8:	4812      	ldr	r0, [pc, #72]	; (80074f4 <HAL_TIM_ConfigClockSource+0x620>)
 80074aa:	f7fa fec9 	bl	8002240 <assert_failed>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681a      	ldr	r2, [r3, #0]
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4619      	mov	r1, r3
 80074b8:	4610      	mov	r0, r2
 80074ba:	f000 fb76 	bl	8007baa <TIM_ITRx_SetConfig>
        break;
 80074be:	e002      	b.n	80074c6 <HAL_TIM_ConfigClockSource+0x5f2>
      break;
 80074c0:	bf00      	nop
 80074c2:	e000      	b.n	80074c6 <HAL_TIM_ConfigClockSource+0x5f2>
      break;
 80074c4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2201      	movs	r2, #1
 80074ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2200      	movs	r2, #0
 80074d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80074d6:	2300      	movs	r3, #0
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3710      	adds	r7, #16
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}
 80074e0:	40012c00 	.word	0x40012c00
 80074e4:	40013400 	.word	0x40013400
 80074e8:	40000400 	.word	0x40000400
 80074ec:	40000800 	.word	0x40000800
 80074f0:	40000c00 	.word	0x40000c00
 80074f4:	0800ed50 	.word	0x0800ed50

080074f8 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b083      	sub	sp, #12
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8007500:	bf00      	nop
 8007502:	370c      	adds	r7, #12
 8007504:	46bd      	mov	sp, r7
 8007506:	bc80      	pop	{r7}
 8007508:	4770      	bx	lr

0800750a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800750a:	b480      	push	{r7}
 800750c:	b083      	sub	sp, #12
 800750e:	af00      	add	r7, sp, #0
 8007510:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007512:	bf00      	nop
 8007514:	370c      	adds	r7, #12
 8007516:	46bd      	mov	sp, r7
 8007518:	bc80      	pop	{r7}
 800751a:	4770      	bx	lr

0800751c <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800751c:	b480      	push	{r7}
 800751e:	b083      	sub	sp, #12
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8007524:	bf00      	nop
 8007526:	370c      	adds	r7, #12
 8007528:	46bd      	mov	sp, r7
 800752a:	bc80      	pop	{r7}
 800752c:	4770      	bx	lr

0800752e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800752e:	b480      	push	{r7}
 8007530:	b083      	sub	sp, #12
 8007532:	af00      	add	r7, sp, #0
 8007534:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007536:	bf00      	nop
 8007538:	370c      	adds	r7, #12
 800753a:	46bd      	mov	sp, r7
 800753c:	bc80      	pop	{r7}
 800753e:	4770      	bx	lr

08007540 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007540:	b480      	push	{r7}
 8007542:	b083      	sub	sp, #12
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8007548:	bf00      	nop
 800754a:	370c      	adds	r7, #12
 800754c:	46bd      	mov	sp, r7
 800754e:	bc80      	pop	{r7}
 8007550:	4770      	bx	lr

08007552 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007552:	b480      	push	{r7}
 8007554:	b083      	sub	sp, #12
 8007556:	af00      	add	r7, sp, #0
 8007558:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800755a:	bf00      	nop
 800755c:	370c      	adds	r7, #12
 800755e:	46bd      	mov	sp, r7
 8007560:	bc80      	pop	{r7}
 8007562:	4770      	bx	lr

08007564 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007564:	b480      	push	{r7}
 8007566:	b083      	sub	sp, #12
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800756c:	bf00      	nop
 800756e:	370c      	adds	r7, #12
 8007570:	46bd      	mov	sp, r7
 8007572:	bc80      	pop	{r7}
 8007574:	4770      	bx	lr

08007576 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8007576:	b480      	push	{r7}
 8007578:	b083      	sub	sp, #12
 800757a:	af00      	add	r7, sp, #0
 800757c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800757e:	bf00      	nop
 8007580:	370c      	adds	r7, #12
 8007582:	46bd      	mov	sp, r7
 8007584:	bc80      	pop	{r7}
 8007586:	4770      	bx	lr

08007588 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007588:	b480      	push	{r7}
 800758a:	b085      	sub	sp, #20
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
 8007590:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	4a33      	ldr	r2, [pc, #204]	; (8007668 <TIM_Base_SetConfig+0xe0>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d013      	beq.n	80075c8 <TIM_Base_SetConfig+0x40>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	4a32      	ldr	r2, [pc, #200]	; (800766c <TIM_Base_SetConfig+0xe4>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d00f      	beq.n	80075c8 <TIM_Base_SetConfig+0x40>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075ae:	d00b      	beq.n	80075c8 <TIM_Base_SetConfig+0x40>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	4a2f      	ldr	r2, [pc, #188]	; (8007670 <TIM_Base_SetConfig+0xe8>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d007      	beq.n	80075c8 <TIM_Base_SetConfig+0x40>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	4a2e      	ldr	r2, [pc, #184]	; (8007674 <TIM_Base_SetConfig+0xec>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d003      	beq.n	80075c8 <TIM_Base_SetConfig+0x40>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	4a2d      	ldr	r2, [pc, #180]	; (8007678 <TIM_Base_SetConfig+0xf0>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d108      	bne.n	80075da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	68fa      	ldr	r2, [r7, #12]
 80075d6:	4313      	orrs	r3, r2
 80075d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	4a22      	ldr	r2, [pc, #136]	; (8007668 <TIM_Base_SetConfig+0xe0>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d013      	beq.n	800760a <TIM_Base_SetConfig+0x82>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	4a21      	ldr	r2, [pc, #132]	; (800766c <TIM_Base_SetConfig+0xe4>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d00f      	beq.n	800760a <TIM_Base_SetConfig+0x82>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075f0:	d00b      	beq.n	800760a <TIM_Base_SetConfig+0x82>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	4a1e      	ldr	r2, [pc, #120]	; (8007670 <TIM_Base_SetConfig+0xe8>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d007      	beq.n	800760a <TIM_Base_SetConfig+0x82>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	4a1d      	ldr	r2, [pc, #116]	; (8007674 <TIM_Base_SetConfig+0xec>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d003      	beq.n	800760a <TIM_Base_SetConfig+0x82>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	4a1c      	ldr	r2, [pc, #112]	; (8007678 <TIM_Base_SetConfig+0xf0>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d108      	bne.n	800761c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007610:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	68db      	ldr	r3, [r3, #12]
 8007616:	68fa      	ldr	r2, [r7, #12]
 8007618:	4313      	orrs	r3, r2
 800761a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	695b      	ldr	r3, [r3, #20]
 8007626:	4313      	orrs	r3, r2
 8007628:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	68fa      	ldr	r2, [r7, #12]
 800762e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	689a      	ldr	r2, [r3, #8]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	681a      	ldr	r2, [r3, #0]
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	4a09      	ldr	r2, [pc, #36]	; (8007668 <TIM_Base_SetConfig+0xe0>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d003      	beq.n	8007650 <TIM_Base_SetConfig+0xc8>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	4a08      	ldr	r2, [pc, #32]	; (800766c <TIM_Base_SetConfig+0xe4>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d103      	bne.n	8007658 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	691a      	ldr	r2, [r3, #16]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2201      	movs	r2, #1
 800765c:	615a      	str	r2, [r3, #20]
}
 800765e:	bf00      	nop
 8007660:	3714      	adds	r7, #20
 8007662:	46bd      	mov	sp, r7
 8007664:	bc80      	pop	{r7}
 8007666:	4770      	bx	lr
 8007668:	40012c00 	.word	0x40012c00
 800766c:	40013400 	.word	0x40013400
 8007670:	40000400 	.word	0x40000400
 8007674:	40000800 	.word	0x40000800
 8007678:	40000c00 	.word	0x40000c00

0800767c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b086      	sub	sp, #24
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
 8007684:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6a1b      	ldr	r3, [r3, #32]
 800768a:	f023 0201 	bic.w	r2, r3, #1
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6a1b      	ldr	r3, [r3, #32]
 8007696:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	685b      	ldr	r3, [r3, #4]
 800769c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	699b      	ldr	r3, [r3, #24]
 80076a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	f023 0303 	bic.w	r3, r3, #3
 80076b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	68fa      	ldr	r2, [r7, #12]
 80076ba:	4313      	orrs	r3, r2
 80076bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	f023 0302 	bic.w	r3, r3, #2
 80076c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	689b      	ldr	r3, [r3, #8]
 80076ca:	697a      	ldr	r2, [r7, #20]
 80076cc:	4313      	orrs	r3, r2
 80076ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	4a34      	ldr	r2, [pc, #208]	; (80077a4 <TIM_OC1_SetConfig+0x128>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d003      	beq.n	80076e0 <TIM_OC1_SetConfig+0x64>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	4a33      	ldr	r2, [pc, #204]	; (80077a8 <TIM_OC1_SetConfig+0x12c>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d119      	bne.n	8007714 <TIM_OC1_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	68db      	ldr	r3, [r3, #12]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d008      	beq.n	80076fa <TIM_OC1_SetConfig+0x7e>
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	68db      	ldr	r3, [r3, #12]
 80076ec:	2b08      	cmp	r3, #8
 80076ee:	d004      	beq.n	80076fa <TIM_OC1_SetConfig+0x7e>
 80076f0:	f641 2141 	movw	r1, #6721	; 0x1a41
 80076f4:	482d      	ldr	r0, [pc, #180]	; (80077ac <TIM_OC1_SetConfig+0x130>)
 80076f6:	f7fa fda3 	bl	8002240 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	f023 0308 	bic.w	r3, r3, #8
 8007700:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	68db      	ldr	r3, [r3, #12]
 8007706:	697a      	ldr	r2, [r7, #20]
 8007708:	4313      	orrs	r3, r2
 800770a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	f023 0304 	bic.w	r3, r3, #4
 8007712:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	4a23      	ldr	r2, [pc, #140]	; (80077a4 <TIM_OC1_SetConfig+0x128>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d003      	beq.n	8007724 <TIM_OC1_SetConfig+0xa8>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	4a22      	ldr	r2, [pc, #136]	; (80077a8 <TIM_OC1_SetConfig+0x12c>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d12d      	bne.n	8007780 <TIM_OC1_SetConfig+0x104>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	699b      	ldr	r3, [r3, #24]
 8007728:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800772c:	d008      	beq.n	8007740 <TIM_OC1_SetConfig+0xc4>
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	699b      	ldr	r3, [r3, #24]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d004      	beq.n	8007740 <TIM_OC1_SetConfig+0xc4>
 8007736:	f641 214e 	movw	r1, #6734	; 0x1a4e
 800773a:	481c      	ldr	r0, [pc, #112]	; (80077ac <TIM_OC1_SetConfig+0x130>)
 800773c:	f7fa fd80 	bl	8002240 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	695b      	ldr	r3, [r3, #20]
 8007744:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007748:	d008      	beq.n	800775c <TIM_OC1_SetConfig+0xe0>
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	695b      	ldr	r3, [r3, #20]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d004      	beq.n	800775c <TIM_OC1_SetConfig+0xe0>
 8007752:	f641 214f 	movw	r1, #6735	; 0x1a4f
 8007756:	4815      	ldr	r0, [pc, #84]	; (80077ac <TIM_OC1_SetConfig+0x130>)
 8007758:	f7fa fd72 	bl	8002240 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007762:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007764:	693b      	ldr	r3, [r7, #16]
 8007766:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800776a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	695b      	ldr	r3, [r3, #20]
 8007770:	693a      	ldr	r2, [r7, #16]
 8007772:	4313      	orrs	r3, r2
 8007774:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	699b      	ldr	r3, [r3, #24]
 800777a:	693a      	ldr	r2, [r7, #16]
 800777c:	4313      	orrs	r3, r2
 800777e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	693a      	ldr	r2, [r7, #16]
 8007784:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	68fa      	ldr	r2, [r7, #12]
 800778a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	685a      	ldr	r2, [r3, #4]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	697a      	ldr	r2, [r7, #20]
 8007798:	621a      	str	r2, [r3, #32]
}
 800779a:	bf00      	nop
 800779c:	3718      	adds	r7, #24
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}
 80077a2:	bf00      	nop
 80077a4:	40012c00 	.word	0x40012c00
 80077a8:	40013400 	.word	0x40013400
 80077ac:	0800ed50 	.word	0x0800ed50

080077b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b086      	sub	sp, #24
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
 80077b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6a1b      	ldr	r3, [r3, #32]
 80077be:	f023 0210 	bic.w	r2, r3, #16
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6a1b      	ldr	r3, [r3, #32]
 80077ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	685b      	ldr	r3, [r3, #4]
 80077d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	699b      	ldr	r3, [r3, #24]
 80077d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	021b      	lsls	r3, r3, #8
 80077ee:	68fa      	ldr	r2, [r7, #12]
 80077f0:	4313      	orrs	r3, r2
 80077f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	f023 0320 	bic.w	r3, r3, #32
 80077fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	689b      	ldr	r3, [r3, #8]
 8007800:	011b      	lsls	r3, r3, #4
 8007802:	697a      	ldr	r2, [r7, #20]
 8007804:	4313      	orrs	r3, r2
 8007806:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	4a35      	ldr	r2, [pc, #212]	; (80078e0 <TIM_OC2_SetConfig+0x130>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d003      	beq.n	8007818 <TIM_OC2_SetConfig+0x68>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	4a34      	ldr	r2, [pc, #208]	; (80078e4 <TIM_OC2_SetConfig+0x134>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d11a      	bne.n	800784e <TIM_OC2_SetConfig+0x9e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	68db      	ldr	r3, [r3, #12]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d008      	beq.n	8007832 <TIM_OC2_SetConfig+0x82>
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	68db      	ldr	r3, [r3, #12]
 8007824:	2b08      	cmp	r3, #8
 8007826:	d004      	beq.n	8007832 <TIM_OC2_SetConfig+0x82>
 8007828:	f641 218c 	movw	r1, #6796	; 0x1a8c
 800782c:	482e      	ldr	r0, [pc, #184]	; (80078e8 <TIM_OC2_SetConfig+0x138>)
 800782e:	f7fa fd07 	bl	8002240 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007838:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	68db      	ldr	r3, [r3, #12]
 800783e:	011b      	lsls	r3, r3, #4
 8007840:	697a      	ldr	r2, [r7, #20]
 8007842:	4313      	orrs	r3, r2
 8007844:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800784c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	4a23      	ldr	r2, [pc, #140]	; (80078e0 <TIM_OC2_SetConfig+0x130>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d003      	beq.n	800785e <TIM_OC2_SetConfig+0xae>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	4a22      	ldr	r2, [pc, #136]	; (80078e4 <TIM_OC2_SetConfig+0x134>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d12f      	bne.n	80078be <TIM_OC2_SetConfig+0x10e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	699b      	ldr	r3, [r3, #24]
 8007862:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007866:	d008      	beq.n	800787a <TIM_OC2_SetConfig+0xca>
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	699b      	ldr	r3, [r3, #24]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d004      	beq.n	800787a <TIM_OC2_SetConfig+0xca>
 8007870:	f641 219a 	movw	r1, #6810	; 0x1a9a
 8007874:	481c      	ldr	r0, [pc, #112]	; (80078e8 <TIM_OC2_SetConfig+0x138>)
 8007876:	f7fa fce3 	bl	8002240 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	695b      	ldr	r3, [r3, #20]
 800787e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007882:	d008      	beq.n	8007896 <TIM_OC2_SetConfig+0xe6>
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	695b      	ldr	r3, [r3, #20]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d004      	beq.n	8007896 <TIM_OC2_SetConfig+0xe6>
 800788c:	f641 219b 	movw	r1, #6811	; 0x1a9b
 8007890:	4815      	ldr	r0, [pc, #84]	; (80078e8 <TIM_OC2_SetConfig+0x138>)
 8007892:	f7fa fcd5 	bl	8002240 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007896:	693b      	ldr	r3, [r7, #16]
 8007898:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800789c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80078a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	695b      	ldr	r3, [r3, #20]
 80078aa:	009b      	lsls	r3, r3, #2
 80078ac:	693a      	ldr	r2, [r7, #16]
 80078ae:	4313      	orrs	r3, r2
 80078b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	699b      	ldr	r3, [r3, #24]
 80078b6:	009b      	lsls	r3, r3, #2
 80078b8:	693a      	ldr	r2, [r7, #16]
 80078ba:	4313      	orrs	r3, r2
 80078bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	693a      	ldr	r2, [r7, #16]
 80078c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	68fa      	ldr	r2, [r7, #12]
 80078c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	685a      	ldr	r2, [r3, #4]
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	697a      	ldr	r2, [r7, #20]
 80078d6:	621a      	str	r2, [r3, #32]
}
 80078d8:	bf00      	nop
 80078da:	3718      	adds	r7, #24
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}
 80078e0:	40012c00 	.word	0x40012c00
 80078e4:	40013400 	.word	0x40013400
 80078e8:	0800ed50 	.word	0x0800ed50

080078ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b086      	sub	sp, #24
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
 80078f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6a1b      	ldr	r3, [r3, #32]
 80078fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6a1b      	ldr	r3, [r3, #32]
 8007906:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	69db      	ldr	r3, [r3, #28]
 8007912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800791a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	f023 0303 	bic.w	r3, r3, #3
 8007922:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	68fa      	ldr	r2, [r7, #12]
 800792a:	4313      	orrs	r3, r2
 800792c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007934:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	689b      	ldr	r3, [r3, #8]
 800793a:	021b      	lsls	r3, r3, #8
 800793c:	697a      	ldr	r2, [r7, #20]
 800793e:	4313      	orrs	r3, r2
 8007940:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	4a35      	ldr	r2, [pc, #212]	; (8007a1c <TIM_OC3_SetConfig+0x130>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d003      	beq.n	8007952 <TIM_OC3_SetConfig+0x66>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	4a34      	ldr	r2, [pc, #208]	; (8007a20 <TIM_OC3_SetConfig+0x134>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d11a      	bne.n	8007988 <TIM_OC3_SetConfig+0x9c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	68db      	ldr	r3, [r3, #12]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d008      	beq.n	800796c <TIM_OC3_SetConfig+0x80>
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	68db      	ldr	r3, [r3, #12]
 800795e:	2b08      	cmp	r3, #8
 8007960:	d004      	beq.n	800796c <TIM_OC3_SetConfig+0x80>
 8007962:	f641 21d7 	movw	r1, #6871	; 0x1ad7
 8007966:	482f      	ldr	r0, [pc, #188]	; (8007a24 <TIM_OC3_SetConfig+0x138>)
 8007968:	f7fa fc6a 	bl	8002240 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007972:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	68db      	ldr	r3, [r3, #12]
 8007978:	021b      	lsls	r3, r3, #8
 800797a:	697a      	ldr	r2, [r7, #20]
 800797c:	4313      	orrs	r3, r2
 800797e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007986:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	4a24      	ldr	r2, [pc, #144]	; (8007a1c <TIM_OC3_SetConfig+0x130>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d003      	beq.n	8007998 <TIM_OC3_SetConfig+0xac>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	4a23      	ldr	r2, [pc, #140]	; (8007a20 <TIM_OC3_SetConfig+0x134>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d12f      	bne.n	80079f8 <TIM_OC3_SetConfig+0x10c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	699b      	ldr	r3, [r3, #24]
 800799c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079a0:	d008      	beq.n	80079b4 <TIM_OC3_SetConfig+0xc8>
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	699b      	ldr	r3, [r3, #24]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d004      	beq.n	80079b4 <TIM_OC3_SetConfig+0xc8>
 80079aa:	f641 21e4 	movw	r1, #6884	; 0x1ae4
 80079ae:	481d      	ldr	r0, [pc, #116]	; (8007a24 <TIM_OC3_SetConfig+0x138>)
 80079b0:	f7fa fc46 	bl	8002240 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	695b      	ldr	r3, [r3, #20]
 80079b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079bc:	d008      	beq.n	80079d0 <TIM_OC3_SetConfig+0xe4>
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	695b      	ldr	r3, [r3, #20]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d004      	beq.n	80079d0 <TIM_OC3_SetConfig+0xe4>
 80079c6:	f641 21e5 	movw	r1, #6885	; 0x1ae5
 80079ca:	4816      	ldr	r0, [pc, #88]	; (8007a24 <TIM_OC3_SetConfig+0x138>)
 80079cc:	f7fa fc38 	bl	8002240 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80079d0:	693b      	ldr	r3, [r7, #16]
 80079d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80079d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80079d8:	693b      	ldr	r3, [r7, #16]
 80079da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80079de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	695b      	ldr	r3, [r3, #20]
 80079e4:	011b      	lsls	r3, r3, #4
 80079e6:	693a      	ldr	r2, [r7, #16]
 80079e8:	4313      	orrs	r3, r2
 80079ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	699b      	ldr	r3, [r3, #24]
 80079f0:	011b      	lsls	r3, r3, #4
 80079f2:	693a      	ldr	r2, [r7, #16]
 80079f4:	4313      	orrs	r3, r2
 80079f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	693a      	ldr	r2, [r7, #16]
 80079fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	68fa      	ldr	r2, [r7, #12]
 8007a02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	685a      	ldr	r2, [r3, #4]
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	697a      	ldr	r2, [r7, #20]
 8007a10:	621a      	str	r2, [r3, #32]
}
 8007a12:	bf00      	nop
 8007a14:	3718      	adds	r7, #24
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}
 8007a1a:	bf00      	nop
 8007a1c:	40012c00 	.word	0x40012c00
 8007a20:	40013400 	.word	0x40013400
 8007a24:	0800ed50 	.word	0x0800ed50

08007a28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b086      	sub	sp, #24
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
 8007a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6a1b      	ldr	r3, [r3, #32]
 8007a36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6a1b      	ldr	r3, [r3, #32]
 8007a42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	69db      	ldr	r3, [r3, #28]
 8007a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	021b      	lsls	r3, r3, #8
 8007a66:	68fa      	ldr	r2, [r7, #12]
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007a72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	689b      	ldr	r3, [r3, #8]
 8007a78:	031b      	lsls	r3, r3, #12
 8007a7a:	693a      	ldr	r2, [r7, #16]
 8007a7c:	4313      	orrs	r3, r2
 8007a7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	4a18      	ldr	r2, [pc, #96]	; (8007ae4 <TIM_OC4_SetConfig+0xbc>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d003      	beq.n	8007a90 <TIM_OC4_SetConfig+0x68>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	4a17      	ldr	r2, [pc, #92]	; (8007ae8 <TIM_OC4_SetConfig+0xc0>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d117      	bne.n	8007ac0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	695b      	ldr	r3, [r3, #20]
 8007a94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a98:	d008      	beq.n	8007aac <TIM_OC4_SetConfig+0x84>
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	695b      	ldr	r3, [r3, #20]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d004      	beq.n	8007aac <TIM_OC4_SetConfig+0x84>
 8007aa2:	f641 3123 	movw	r1, #6947	; 0x1b23
 8007aa6:	4811      	ldr	r0, [pc, #68]	; (8007aec <TIM_OC4_SetConfig+0xc4>)
 8007aa8:	f7fa fbca 	bl	8002240 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ab2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	695b      	ldr	r3, [r3, #20]
 8007ab8:	019b      	lsls	r3, r3, #6
 8007aba:	697a      	ldr	r2, [r7, #20]
 8007abc:	4313      	orrs	r3, r2
 8007abe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	697a      	ldr	r2, [r7, #20]
 8007ac4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	68fa      	ldr	r2, [r7, #12]
 8007aca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	685a      	ldr	r2, [r3, #4]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	693a      	ldr	r2, [r7, #16]
 8007ad8:	621a      	str	r2, [r3, #32]
}
 8007ada:	bf00      	nop
 8007adc:	3718      	adds	r7, #24
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}
 8007ae2:	bf00      	nop
 8007ae4:	40012c00 	.word	0x40012c00
 8007ae8:	40013400 	.word	0x40013400
 8007aec:	0800ed50 	.word	0x0800ed50

08007af0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007af0:	b480      	push	{r7}
 8007af2:	b087      	sub	sp, #28
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	60f8      	str	r0, [r7, #12]
 8007af8:	60b9      	str	r1, [r7, #8]
 8007afa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	6a1b      	ldr	r3, [r3, #32]
 8007b00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	6a1b      	ldr	r3, [r3, #32]
 8007b06:	f023 0201 	bic.w	r2, r3, #1
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	699b      	ldr	r3, [r3, #24]
 8007b12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007b1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	011b      	lsls	r3, r3, #4
 8007b20:	693a      	ldr	r2, [r7, #16]
 8007b22:	4313      	orrs	r3, r2
 8007b24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007b26:	697b      	ldr	r3, [r7, #20]
 8007b28:	f023 030a 	bic.w	r3, r3, #10
 8007b2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007b2e:	697a      	ldr	r2, [r7, #20]
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	4313      	orrs	r3, r2
 8007b34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	693a      	ldr	r2, [r7, #16]
 8007b3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	697a      	ldr	r2, [r7, #20]
 8007b40:	621a      	str	r2, [r3, #32]
}
 8007b42:	bf00      	nop
 8007b44:	371c      	adds	r7, #28
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bc80      	pop	{r7}
 8007b4a:	4770      	bx	lr

08007b4c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b087      	sub	sp, #28
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	60f8      	str	r0, [r7, #12]
 8007b54:	60b9      	str	r1, [r7, #8]
 8007b56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	6a1b      	ldr	r3, [r3, #32]
 8007b5c:	f023 0210 	bic.w	r2, r3, #16
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	699b      	ldr	r3, [r3, #24]
 8007b68:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	6a1b      	ldr	r3, [r3, #32]
 8007b6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007b70:	697b      	ldr	r3, [r7, #20]
 8007b72:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007b76:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	031b      	lsls	r3, r3, #12
 8007b7c:	697a      	ldr	r2, [r7, #20]
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007b82:	693b      	ldr	r3, [r7, #16]
 8007b84:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007b88:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	011b      	lsls	r3, r3, #4
 8007b8e:	693a      	ldr	r2, [r7, #16]
 8007b90:	4313      	orrs	r3, r2
 8007b92:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	697a      	ldr	r2, [r7, #20]
 8007b98:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	693a      	ldr	r2, [r7, #16]
 8007b9e:	621a      	str	r2, [r3, #32]
}
 8007ba0:	bf00      	nop
 8007ba2:	371c      	adds	r7, #28
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bc80      	pop	{r7}
 8007ba8:	4770      	bx	lr

08007baa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007baa:	b480      	push	{r7}
 8007bac:	b085      	sub	sp, #20
 8007bae:	af00      	add	r7, sp, #0
 8007bb0:	6078      	str	r0, [r7, #4]
 8007bb2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	689b      	ldr	r3, [r3, #8]
 8007bb8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bc0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007bc2:	683a      	ldr	r2, [r7, #0]
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	4313      	orrs	r3, r2
 8007bc8:	f043 0307 	orr.w	r3, r3, #7
 8007bcc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	68fa      	ldr	r2, [r7, #12]
 8007bd2:	609a      	str	r2, [r3, #8]
}
 8007bd4:	bf00      	nop
 8007bd6:	3714      	adds	r7, #20
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bc80      	pop	{r7}
 8007bdc:	4770      	bx	lr

08007bde <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007bde:	b480      	push	{r7}
 8007be0:	b087      	sub	sp, #28
 8007be2:	af00      	add	r7, sp, #0
 8007be4:	60f8      	str	r0, [r7, #12]
 8007be6:	60b9      	str	r1, [r7, #8]
 8007be8:	607a      	str	r2, [r7, #4]
 8007bea:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	689b      	ldr	r3, [r3, #8]
 8007bf0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007bf8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	021a      	lsls	r2, r3, #8
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	431a      	orrs	r2, r3
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	4313      	orrs	r3, r2
 8007c06:	697a      	ldr	r2, [r7, #20]
 8007c08:	4313      	orrs	r3, r2
 8007c0a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	697a      	ldr	r2, [r7, #20]
 8007c10:	609a      	str	r2, [r3, #8]
}
 8007c12:	bf00      	nop
 8007c14:	371c      	adds	r7, #28
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bc80      	pop	{r7}
 8007c1a:	4770      	bx	lr

08007c1c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b086      	sub	sp, #24
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	60f8      	str	r0, [r7, #12]
 8007c24:	60b9      	str	r1, [r7, #8]
 8007c26:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	4a26      	ldr	r2, [pc, #152]	; (8007cc4 <TIM_CCxChannelCmd+0xa8>)
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d018      	beq.n	8007c62 <TIM_CCxChannelCmd+0x46>
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	4a25      	ldr	r2, [pc, #148]	; (8007cc8 <TIM_CCxChannelCmd+0xac>)
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d014      	beq.n	8007c62 <TIM_CCxChannelCmd+0x46>
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c3e:	d010      	beq.n	8007c62 <TIM_CCxChannelCmd+0x46>
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	4a22      	ldr	r2, [pc, #136]	; (8007ccc <TIM_CCxChannelCmd+0xb0>)
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d00c      	beq.n	8007c62 <TIM_CCxChannelCmd+0x46>
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	4a21      	ldr	r2, [pc, #132]	; (8007cd0 <TIM_CCxChannelCmd+0xb4>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d008      	beq.n	8007c62 <TIM_CCxChannelCmd+0x46>
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	4a20      	ldr	r2, [pc, #128]	; (8007cd4 <TIM_CCxChannelCmd+0xb8>)
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d004      	beq.n	8007c62 <TIM_CCxChannelCmd+0x46>
 8007c58:	f641 5109 	movw	r1, #7433	; 0x1d09
 8007c5c:	481e      	ldr	r0, [pc, #120]	; (8007cd8 <TIM_CCxChannelCmd+0xbc>)
 8007c5e:	f7fa faef 	bl	8002240 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d010      	beq.n	8007c8a <TIM_CCxChannelCmd+0x6e>
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	2b04      	cmp	r3, #4
 8007c6c:	d00d      	beq.n	8007c8a <TIM_CCxChannelCmd+0x6e>
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	2b08      	cmp	r3, #8
 8007c72:	d00a      	beq.n	8007c8a <TIM_CCxChannelCmd+0x6e>
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	2b0c      	cmp	r3, #12
 8007c78:	d007      	beq.n	8007c8a <TIM_CCxChannelCmd+0x6e>
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	2b3c      	cmp	r3, #60	; 0x3c
 8007c7e:	d004      	beq.n	8007c8a <TIM_CCxChannelCmd+0x6e>
 8007c80:	f641 510a 	movw	r1, #7434	; 0x1d0a
 8007c84:	4814      	ldr	r0, [pc, #80]	; (8007cd8 <TIM_CCxChannelCmd+0xbc>)
 8007c86:	f7fa fadb 	bl	8002240 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	f003 031f 	and.w	r3, r3, #31
 8007c90:	2201      	movs	r2, #1
 8007c92:	fa02 f303 	lsl.w	r3, r2, r3
 8007c96:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	6a1a      	ldr	r2, [r3, #32]
 8007c9c:	697b      	ldr	r3, [r7, #20]
 8007c9e:	43db      	mvns	r3, r3
 8007ca0:	401a      	ands	r2, r3
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	6a1a      	ldr	r2, [r3, #32]
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	f003 031f 	and.w	r3, r3, #31
 8007cb0:	6879      	ldr	r1, [r7, #4]
 8007cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8007cb6:	431a      	orrs	r2, r3
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	621a      	str	r2, [r3, #32]
}
 8007cbc:	bf00      	nop
 8007cbe:	3718      	adds	r7, #24
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}
 8007cc4:	40012c00 	.word	0x40012c00
 8007cc8:	40013400 	.word	0x40013400
 8007ccc:	40000400 	.word	0x40000400
 8007cd0:	40000800 	.word	0x40000800
 8007cd4:	40000c00 	.word	0x40000c00
 8007cd8:	0800ed50 	.word	0x0800ed50

08007cdc <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b083      	sub	sp, #12
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	4a1c      	ldr	r2, [pc, #112]	; (8007d58 <TIM_ResetCallback+0x7c>)
 8007ce8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	4a1b      	ldr	r2, [pc, #108]	; (8007d5c <TIM_ResetCallback+0x80>)
 8007cf0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	4a1a      	ldr	r2, [pc, #104]	; (8007d60 <TIM_ResetCallback+0x84>)
 8007cf8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	4a19      	ldr	r2, [pc, #100]	; (8007d64 <TIM_ResetCallback+0x88>)
 8007d00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	4a18      	ldr	r2, [pc, #96]	; (8007d68 <TIM_ResetCallback+0x8c>)
 8007d08:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	4a17      	ldr	r2, [pc, #92]	; (8007d6c <TIM_ResetCallback+0x90>)
 8007d10:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	4a16      	ldr	r2, [pc, #88]	; (8007d70 <TIM_ResetCallback+0x94>)
 8007d18:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	4a15      	ldr	r2, [pc, #84]	; (8007d74 <TIM_ResetCallback+0x98>)
 8007d20:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	4a14      	ldr	r2, [pc, #80]	; (8007d78 <TIM_ResetCallback+0x9c>)
 8007d28:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	4a13      	ldr	r2, [pc, #76]	; (8007d7c <TIM_ResetCallback+0xa0>)
 8007d30:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	4a12      	ldr	r2, [pc, #72]	; (8007d80 <TIM_ResetCallback+0xa4>)
 8007d38:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	4a11      	ldr	r2, [pc, #68]	; (8007d84 <TIM_ResetCallback+0xa8>)
 8007d40:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	4a10      	ldr	r2, [pc, #64]	; (8007d88 <TIM_ResetCallback+0xac>)
 8007d48:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8007d4c:	bf00      	nop
 8007d4e:	370c      	adds	r7, #12
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bc80      	pop	{r7}
 8007d54:	4770      	bx	lr
 8007d56:	bf00      	nop
 8007d58:	080021bd 	.word	0x080021bd
 8007d5c:	080074f9 	.word	0x080074f9
 8007d60:	08007553 	.word	0x08007553
 8007d64:	08007565 	.word	0x08007565
 8007d68:	08002175 	.word	0x08002175
 8007d6c:	0800751d 	.word	0x0800751d
 8007d70:	0800750b 	.word	0x0800750b
 8007d74:	0800752f 	.word	0x0800752f
 8007d78:	08007541 	.word	0x08007541
 8007d7c:	08007577 	.word	0x08007577
 8007d80:	080080c5 	.word	0x080080c5
 8007d84:	080080d7 	.word	0x080080d7
 8007d88:	080080e9 	.word	0x080080e9

08007d8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b084      	sub	sp, #16
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
 8007d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	4a5c      	ldr	r2, [pc, #368]	; (8007f0c <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d027      	beq.n	8007df0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4a5a      	ldr	r2, [pc, #360]	; (8007f10 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d022      	beq.n	8007df0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007db2:	d01d      	beq.n	8007df0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	4a56      	ldr	r2, [pc, #344]	; (8007f14 <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d018      	beq.n	8007df0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	4a55      	ldr	r2, [pc, #340]	; (8007f18 <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d013      	beq.n	8007df0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4a53      	ldr	r2, [pc, #332]	; (8007f1c <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d00e      	beq.n	8007df0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	4a52      	ldr	r2, [pc, #328]	; (8007f20 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d009      	beq.n	8007df0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4a50      	ldr	r2, [pc, #320]	; (8007f24 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d004      	beq.n	8007df0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007de6:	f240 7186 	movw	r1, #1926	; 0x786
 8007dea:	484f      	ldr	r0, [pc, #316]	; (8007f28 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 8007dec:	f7fa fa28 	bl	8002240 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d020      	beq.n	8007e3a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	2b10      	cmp	r3, #16
 8007dfe:	d01c      	beq.n	8007e3a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	2b20      	cmp	r3, #32
 8007e06:	d018      	beq.n	8007e3a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	2b30      	cmp	r3, #48	; 0x30
 8007e0e:	d014      	beq.n	8007e3a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	2b40      	cmp	r3, #64	; 0x40
 8007e16:	d010      	beq.n	8007e3a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	2b50      	cmp	r3, #80	; 0x50
 8007e1e:	d00c      	beq.n	8007e3a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	2b60      	cmp	r3, #96	; 0x60
 8007e26:	d008      	beq.n	8007e3a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	2b70      	cmp	r3, #112	; 0x70
 8007e2e:	d004      	beq.n	8007e3a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007e30:	f240 7187 	movw	r1, #1927	; 0x787
 8007e34:	483c      	ldr	r0, [pc, #240]	; (8007f28 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 8007e36:	f7fa fa03 	bl	8002240 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	685b      	ldr	r3, [r3, #4]
 8007e3e:	2b80      	cmp	r3, #128	; 0x80
 8007e40:	d008      	beq.n	8007e54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	685b      	ldr	r3, [r3, #4]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d004      	beq.n	8007e54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007e4a:	f44f 61f1 	mov.w	r1, #1928	; 0x788
 8007e4e:	4836      	ldr	r0, [pc, #216]	; (8007f28 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 8007e50:	f7fa f9f6 	bl	8002240 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e5a:	2b01      	cmp	r3, #1
 8007e5c:	d101      	bne.n	8007e62 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007e5e:	2302      	movs	r3, #2
 8007e60:	e050      	b.n	8007f04 <HAL_TIMEx_MasterConfigSynchronization+0x178>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2201      	movs	r2, #1
 8007e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2202      	movs	r2, #2
 8007e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	685b      	ldr	r3, [r3, #4]
 8007e78:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	689b      	ldr	r3, [r3, #8]
 8007e80:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e88:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	68fa      	ldr	r2, [r7, #12]
 8007e90:	4313      	orrs	r3, r2
 8007e92:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	68fa      	ldr	r2, [r7, #12]
 8007e9a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4a1a      	ldr	r2, [pc, #104]	; (8007f0c <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d018      	beq.n	8007ed8 <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	4a19      	ldr	r2, [pc, #100]	; (8007f10 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d013      	beq.n	8007ed8 <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007eb8:	d00e      	beq.n	8007ed8 <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	4a15      	ldr	r2, [pc, #84]	; (8007f14 <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d009      	beq.n	8007ed8 <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	4a13      	ldr	r2, [pc, #76]	; (8007f18 <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d004      	beq.n	8007ed8 <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	4a12      	ldr	r2, [pc, #72]	; (8007f1c <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d10c      	bne.n	8007ef2 <HAL_TIMEx_MasterConfigSynchronization+0x166>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ede:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	685b      	ldr	r3, [r3, #4]
 8007ee4:	68ba      	ldr	r2, [r7, #8]
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	68ba      	ldr	r2, [r7, #8]
 8007ef0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2201      	movs	r2, #1
 8007ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2200      	movs	r2, #0
 8007efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007f02:	2300      	movs	r3, #0
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	3710      	adds	r7, #16
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}
 8007f0c:	40012c00 	.word	0x40012c00
 8007f10:	40013400 	.word	0x40013400
 8007f14:	40000400 	.word	0x40000400
 8007f18:	40000800 	.word	0x40000800
 8007f1c:	40000c00 	.word	0x40000c00
 8007f20:	40001000 	.word	0x40001000
 8007f24:	40001400 	.word	0x40001400
 8007f28:	0800ed88 	.word	0x0800ed88

08007f2c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b084      	sub	sp, #16
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
 8007f34:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007f36:	2300      	movs	r3, #0
 8007f38:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	4a5e      	ldr	r2, [pc, #376]	; (80080b8 <HAL_TIMEx_ConfigBreakDeadTime+0x18c>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d009      	beq.n	8007f58 <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4a5c      	ldr	r2, [pc, #368]	; (80080bc <HAL_TIMEx_ConfigBreakDeadTime+0x190>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d004      	beq.n	8007f58 <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 8007f4e:	f240 71c3 	movw	r1, #1987	; 0x7c3
 8007f52:	485b      	ldr	r0, [pc, #364]	; (80080c0 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8007f54:	f7fa f974 	bl	8002240 <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f60:	d008      	beq.n	8007f74 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d004      	beq.n	8007f74 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 8007f6a:	f240 71c4 	movw	r1, #1988	; 0x7c4
 8007f6e:	4854      	ldr	r0, [pc, #336]	; (80080c0 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8007f70:	f7fa f966 	bl	8002240 <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	685b      	ldr	r3, [r3, #4]
 8007f78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f7c:	d008      	beq.n	8007f90 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	685b      	ldr	r3, [r3, #4]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d004      	beq.n	8007f90 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 8007f86:	f240 71c5 	movw	r1, #1989	; 0x7c5
 8007f8a:	484d      	ldr	r0, [pc, #308]	; (80080c0 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8007f8c:	f7fa f958 	bl	8002240 <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	689b      	ldr	r3, [r3, #8]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d013      	beq.n	8007fc0 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	689b      	ldr	r3, [r3, #8]
 8007f9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fa0:	d00e      	beq.n	8007fc0 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	689b      	ldr	r3, [r3, #8]
 8007fa6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007faa:	d009      	beq.n	8007fc0 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	689b      	ldr	r3, [r3, #8]
 8007fb0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007fb4:	d004      	beq.n	8007fc0 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 8007fb6:	f240 71c6 	movw	r1, #1990	; 0x7c6
 8007fba:	4841      	ldr	r0, [pc, #260]	; (80080c0 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8007fbc:	f7fa f940 	bl	8002240 <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	68db      	ldr	r3, [r3, #12]
 8007fc4:	2bff      	cmp	r3, #255	; 0xff
 8007fc6:	d904      	bls.n	8007fd2 <HAL_TIMEx_ConfigBreakDeadTime+0xa6>
 8007fc8:	f240 71c7 	movw	r1, #1991	; 0x7c7
 8007fcc:	483c      	ldr	r0, [pc, #240]	; (80080c0 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8007fce:	f7fa f937 	bl	8002240 <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	691b      	ldr	r3, [r3, #16]
 8007fd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fda:	d008      	beq.n	8007fee <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	691b      	ldr	r3, [r3, #16]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d004      	beq.n	8007fee <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8007fe4:	f44f 61f9 	mov.w	r1, #1992	; 0x7c8
 8007fe8:	4835      	ldr	r0, [pc, #212]	; (80080c0 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8007fea:	f7fa f929 	bl	8002240 <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	695b      	ldr	r3, [r3, #20]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d009      	beq.n	800800a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	695b      	ldr	r3, [r3, #20]
 8007ffa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ffe:	d004      	beq.n	800800a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8008000:	f240 71c9 	movw	r1, #1993	; 0x7c9
 8008004:	482e      	ldr	r0, [pc, #184]	; (80080c0 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8008006:	f7fa f91b 	bl	8002240 <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	69db      	ldr	r3, [r3, #28]
 800800e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008012:	d008      	beq.n	8008026 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	69db      	ldr	r3, [r3, #28]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d004      	beq.n	8008026 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 800801c:	f240 71ca 	movw	r1, #1994	; 0x7ca
 8008020:	4827      	ldr	r0, [pc, #156]	; (80080c0 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8008022:	f7fa f90d 	bl	8002240 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800802c:	2b01      	cmp	r3, #1
 800802e:	d101      	bne.n	8008034 <HAL_TIMEx_ConfigBreakDeadTime+0x108>
 8008030:	2302      	movs	r3, #2
 8008032:	e03d      	b.n	80080b0 <HAL_TIMEx_ConfigBreakDeadTime+0x184>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2201      	movs	r2, #1
 8008038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	68db      	ldr	r3, [r3, #12]
 8008046:	4313      	orrs	r3, r2
 8008048:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	689b      	ldr	r3, [r3, #8]
 8008054:	4313      	orrs	r3, r2
 8008056:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	685b      	ldr	r3, [r3, #4]
 8008062:	4313      	orrs	r3, r2
 8008064:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	4313      	orrs	r3, r2
 8008072:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	691b      	ldr	r3, [r3, #16]
 800807e:	4313      	orrs	r3, r2
 8008080:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	695b      	ldr	r3, [r3, #20]
 800808c:	4313      	orrs	r3, r2
 800808e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	69db      	ldr	r3, [r3, #28]
 800809a:	4313      	orrs	r3, r2
 800809c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	68fa      	ldr	r2, [r7, #12]
 80080a4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2200      	movs	r2, #0
 80080aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80080ae:	2300      	movs	r3, #0
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	3710      	adds	r7, #16
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}
 80080b8:	40012c00 	.word	0x40012c00
 80080bc:	40013400 	.word	0x40013400
 80080c0:	0800ed88 	.word	0x0800ed88

080080c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80080c4:	b480      	push	{r7}
 80080c6:	b083      	sub	sp, #12
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80080cc:	bf00      	nop
 80080ce:	370c      	adds	r7, #12
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bc80      	pop	{r7}
 80080d4:	4770      	bx	lr

080080d6 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80080d6:	b480      	push	{r7}
 80080d8:	b083      	sub	sp, #12
 80080da:	af00      	add	r7, sp, #0
 80080dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 80080de:	bf00      	nop
 80080e0:	370c      	adds	r7, #12
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bc80      	pop	{r7}
 80080e6:	4770      	bx	lr

080080e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80080e8:	b480      	push	{r7}
 80080ea:	b083      	sub	sp, #12
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80080f0:	bf00      	nop
 80080f2:	370c      	adds	r7, #12
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bc80      	pop	{r7}
 80080f8:	4770      	bx	lr
	...

080080fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b082      	sub	sp, #8
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d101      	bne.n	800810e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800810a:	2301      	movs	r3, #1
 800810c:	e0a7      	b.n	800825e <HAL_UART_Init+0x162>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	699b      	ldr	r3, [r3, #24]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d02c      	beq.n	8008170 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2 and USART3 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	4a53      	ldr	r2, [pc, #332]	; (8008268 <HAL_UART_Init+0x16c>)
 800811c:	4293      	cmp	r3, r2
 800811e:	d00e      	beq.n	800813e <HAL_UART_Init+0x42>
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	4a51      	ldr	r2, [pc, #324]	; (800826c <HAL_UART_Init+0x170>)
 8008126:	4293      	cmp	r3, r2
 8008128:	d009      	beq.n	800813e <HAL_UART_Init+0x42>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	4a50      	ldr	r2, [pc, #320]	; (8008270 <HAL_UART_Init+0x174>)
 8008130:	4293      	cmp	r3, r2
 8008132:	d004      	beq.n	800813e <HAL_UART_Init+0x42>
 8008134:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 8008138:	484e      	ldr	r0, [pc, #312]	; (8008274 <HAL_UART_Init+0x178>)
 800813a:	f7fa f881 	bl	8002240 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	699b      	ldr	r3, [r3, #24]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d032      	beq.n	80081ac <HAL_UART_Init+0xb0>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	699b      	ldr	r3, [r3, #24]
 800814a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800814e:	d02d      	beq.n	80081ac <HAL_UART_Init+0xb0>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	699b      	ldr	r3, [r3, #24]
 8008154:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008158:	d028      	beq.n	80081ac <HAL_UART_Init+0xb0>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	699b      	ldr	r3, [r3, #24]
 800815e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008162:	d023      	beq.n	80081ac <HAL_UART_Init+0xb0>
 8008164:	f240 116d 	movw	r1, #365	; 0x16d
 8008168:	4842      	ldr	r0, [pc, #264]	; (8008274 <HAL_UART_Init+0x178>)
 800816a:	f7fa f869 	bl	8002240 <assert_failed>
 800816e:	e01d      	b.n	80081ac <HAL_UART_Init+0xb0>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4a3c      	ldr	r2, [pc, #240]	; (8008268 <HAL_UART_Init+0x16c>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d018      	beq.n	80081ac <HAL_UART_Init+0xb0>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	4a3b      	ldr	r2, [pc, #236]	; (800826c <HAL_UART_Init+0x170>)
 8008180:	4293      	cmp	r3, r2
 8008182:	d013      	beq.n	80081ac <HAL_UART_Init+0xb0>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	4a39      	ldr	r2, [pc, #228]	; (8008270 <HAL_UART_Init+0x174>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d00e      	beq.n	80081ac <HAL_UART_Init+0xb0>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	4a39      	ldr	r2, [pc, #228]	; (8008278 <HAL_UART_Init+0x17c>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d009      	beq.n	80081ac <HAL_UART_Init+0xb0>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4a37      	ldr	r2, [pc, #220]	; (800827c <HAL_UART_Init+0x180>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d004      	beq.n	80081ac <HAL_UART_Init+0xb0>
 80081a2:	f240 1171 	movw	r1, #369	; 0x171
 80081a6:	4833      	ldr	r0, [pc, #204]	; (8008274 <HAL_UART_Init+0x178>)
 80081a8:	f7fa f84a 	bl	8002240 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	689b      	ldr	r3, [r3, #8]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d009      	beq.n	80081c8 <HAL_UART_Init+0xcc>
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	689b      	ldr	r3, [r3, #8]
 80081b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081bc:	d004      	beq.n	80081c8 <HAL_UART_Init+0xcc>
 80081be:	f240 1173 	movw	r1, #371	; 0x173
 80081c2:	482c      	ldr	r0, [pc, #176]	; (8008274 <HAL_UART_Init+0x178>)
 80081c4:	f7fa f83c 	bl	8002240 <assert_failed>
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081ce:	b2db      	uxtb	r3, r3
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d111      	bne.n	80081f8 <HAL_UART_Init+0xfc>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2200      	movs	r2, #0
 80081d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f000 fb05 	bl	80087ec <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d102      	bne.n	80081f0 <HAL_UART_Init+0xf4>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	4a24      	ldr	r2, [pc, #144]	; (8008280 <HAL_UART_Init+0x184>)
 80081ee:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2224      	movs	r2, #36	; 0x24
 80081fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	68da      	ldr	r2, [r3, #12]
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800820e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f000 fcf9 	bl	8008c08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	691a      	ldr	r2, [r3, #16]
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008224:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	695a      	ldr	r2, [r3, #20]
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008234:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	68da      	ldr	r2, [r3, #12]
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008244:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2200      	movs	r2, #0
 800824a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2220      	movs	r2, #32
 8008250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2220      	movs	r2, #32
 8008258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800825c:	2300      	movs	r3, #0
}
 800825e:	4618      	mov	r0, r3
 8008260:	3708      	adds	r7, #8
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}
 8008266:	bf00      	nop
 8008268:	40013800 	.word	0x40013800
 800826c:	40004400 	.word	0x40004400
 8008270:	40004800 	.word	0x40004800
 8008274:	0800edc4 	.word	0x0800edc4
 8008278:	40004c00 	.word	0x40004c00
 800827c:	40005000 	.word	0x40005000
 8008280:	080026d5 	.word	0x080026d5

08008284 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b08a      	sub	sp, #40	; 0x28
 8008288:	af02      	add	r7, sp, #8
 800828a:	60f8      	str	r0, [r7, #12]
 800828c:	60b9      	str	r1, [r7, #8]
 800828e:	603b      	str	r3, [r7, #0]
 8008290:	4613      	mov	r3, r2
 8008292:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008294:	2300      	movs	r3, #0
 8008296:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800829e:	b2db      	uxtb	r3, r3
 80082a0:	2b20      	cmp	r3, #32
 80082a2:	d17c      	bne.n	800839e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d002      	beq.n	80082b0 <HAL_UART_Transmit+0x2c>
 80082aa:	88fb      	ldrh	r3, [r7, #6]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d101      	bne.n	80082b4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80082b0:	2301      	movs	r3, #1
 80082b2:	e075      	b.n	80083a0 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082ba:	2b01      	cmp	r3, #1
 80082bc:	d101      	bne.n	80082c2 <HAL_UART_Transmit+0x3e>
 80082be:	2302      	movs	r3, #2
 80082c0:	e06e      	b.n	80083a0 <HAL_UART_Transmit+0x11c>
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	2201      	movs	r2, #1
 80082c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	2200      	movs	r2, #0
 80082ce:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	2221      	movs	r2, #33	; 0x21
 80082d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80082d8:	f7fa fc82 	bl	8002be0 <HAL_GetTick>
 80082dc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	88fa      	ldrh	r2, [r7, #6]
 80082e2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	88fa      	ldrh	r2, [r7, #6]
 80082e8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	689b      	ldr	r3, [r3, #8]
 80082ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082f2:	d108      	bne.n	8008306 <HAL_UART_Transmit+0x82>
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	691b      	ldr	r3, [r3, #16]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d104      	bne.n	8008306 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80082fc:	2300      	movs	r3, #0
 80082fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	61bb      	str	r3, [r7, #24]
 8008304:	e003      	b.n	800830e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800830a:	2300      	movs	r3, #0
 800830c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	2200      	movs	r2, #0
 8008312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008316:	e02a      	b.n	800836e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	9300      	str	r3, [sp, #0]
 800831c:	697b      	ldr	r3, [r7, #20]
 800831e:	2200      	movs	r2, #0
 8008320:	2180      	movs	r1, #128	; 0x80
 8008322:	68f8      	ldr	r0, [r7, #12]
 8008324:	f000 fa98 	bl	8008858 <UART_WaitOnFlagUntilTimeout>
 8008328:	4603      	mov	r3, r0
 800832a:	2b00      	cmp	r3, #0
 800832c:	d001      	beq.n	8008332 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800832e:	2303      	movs	r3, #3
 8008330:	e036      	b.n	80083a0 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008332:	69fb      	ldr	r3, [r7, #28]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d10b      	bne.n	8008350 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008338:	69bb      	ldr	r3, [r7, #24]
 800833a:	881b      	ldrh	r3, [r3, #0]
 800833c:	461a      	mov	r2, r3
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008346:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008348:	69bb      	ldr	r3, [r7, #24]
 800834a:	3302      	adds	r3, #2
 800834c:	61bb      	str	r3, [r7, #24]
 800834e:	e007      	b.n	8008360 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008350:	69fb      	ldr	r3, [r7, #28]
 8008352:	781a      	ldrb	r2, [r3, #0]
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800835a:	69fb      	ldr	r3, [r7, #28]
 800835c:	3301      	adds	r3, #1
 800835e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008364:	b29b      	uxth	r3, r3
 8008366:	3b01      	subs	r3, #1
 8008368:	b29a      	uxth	r2, r3
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008372:	b29b      	uxth	r3, r3
 8008374:	2b00      	cmp	r3, #0
 8008376:	d1cf      	bne.n	8008318 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	9300      	str	r3, [sp, #0]
 800837c:	697b      	ldr	r3, [r7, #20]
 800837e:	2200      	movs	r2, #0
 8008380:	2140      	movs	r1, #64	; 0x40
 8008382:	68f8      	ldr	r0, [r7, #12]
 8008384:	f000 fa68 	bl	8008858 <UART_WaitOnFlagUntilTimeout>
 8008388:	4603      	mov	r3, r0
 800838a:	2b00      	cmp	r3, #0
 800838c:	d001      	beq.n	8008392 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800838e:	2303      	movs	r3, #3
 8008390:	e006      	b.n	80083a0 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	2220      	movs	r2, #32
 8008396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800839a:	2300      	movs	r3, #0
 800839c:	e000      	b.n	80083a0 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800839e:	2302      	movs	r3, #2
  }
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	3720      	adds	r7, #32
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}

080083a8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b084      	sub	sp, #16
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	60f8      	str	r0, [r7, #12]
 80083b0:	60b9      	str	r1, [r7, #8]
 80083b2:	4613      	mov	r3, r2
 80083b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80083bc:	b2db      	uxtb	r3, r3
 80083be:	2b20      	cmp	r3, #32
 80083c0:	d11d      	bne.n	80083fe <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d002      	beq.n	80083ce <HAL_UART_Receive_IT+0x26>
 80083c8:	88fb      	ldrh	r3, [r7, #6]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d101      	bne.n	80083d2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80083ce:	2301      	movs	r3, #1
 80083d0:	e016      	b.n	8008400 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80083d8:	2b01      	cmp	r3, #1
 80083da:	d101      	bne.n	80083e0 <HAL_UART_Receive_IT+0x38>
 80083dc:	2302      	movs	r3, #2
 80083de:	e00f      	b.n	8008400 <HAL_UART_Receive_IT+0x58>
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	2201      	movs	r2, #1
 80083e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	2200      	movs	r2, #0
 80083ec:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80083ee:	88fb      	ldrh	r3, [r7, #6]
 80083f0:	461a      	mov	r2, r3
 80083f2:	68b9      	ldr	r1, [r7, #8]
 80083f4:	68f8      	ldr	r0, [r7, #12]
 80083f6:	f000 fa79 	bl	80088ec <UART_Start_Receive_IT>
 80083fa:	4603      	mov	r3, r0
 80083fc:	e000      	b.n	8008400 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80083fe:	2302      	movs	r3, #2
  }
}
 8008400:	4618      	mov	r0, r3
 8008402:	3710      	adds	r7, #16
 8008404:	46bd      	mov	sp, r7
 8008406:	bd80      	pop	{r7, pc}

08008408 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b08a      	sub	sp, #40	; 0x28
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	68db      	ldr	r3, [r3, #12]
 800841e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	695b      	ldr	r3, [r3, #20]
 8008426:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8008428:	2300      	movs	r3, #0
 800842a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800842c:	2300      	movs	r3, #0
 800842e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008432:	f003 030f 	and.w	r3, r3, #15
 8008436:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8008438:	69bb      	ldr	r3, [r7, #24]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d10d      	bne.n	800845a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800843e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008440:	f003 0320 	and.w	r3, r3, #32
 8008444:	2b00      	cmp	r3, #0
 8008446:	d008      	beq.n	800845a <HAL_UART_IRQHandler+0x52>
 8008448:	6a3b      	ldr	r3, [r7, #32]
 800844a:	f003 0320 	and.w	r3, r3, #32
 800844e:	2b00      	cmp	r3, #0
 8008450:	d003      	beq.n	800845a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	f000 fb2c 	bl	8008ab0 <UART_Receive_IT>
      return;
 8008458:	e180      	b.n	800875c <HAL_UART_IRQHandler+0x354>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800845a:	69bb      	ldr	r3, [r7, #24]
 800845c:	2b00      	cmp	r3, #0
 800845e:	f000 80b4 	beq.w	80085ca <HAL_UART_IRQHandler+0x1c2>
 8008462:	69fb      	ldr	r3, [r7, #28]
 8008464:	f003 0301 	and.w	r3, r3, #1
 8008468:	2b00      	cmp	r3, #0
 800846a:	d105      	bne.n	8008478 <HAL_UART_IRQHandler+0x70>
 800846c:	6a3b      	ldr	r3, [r7, #32]
 800846e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008472:	2b00      	cmp	r3, #0
 8008474:	f000 80a9 	beq.w	80085ca <HAL_UART_IRQHandler+0x1c2>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800847a:	f003 0301 	and.w	r3, r3, #1
 800847e:	2b00      	cmp	r3, #0
 8008480:	d00a      	beq.n	8008498 <HAL_UART_IRQHandler+0x90>
 8008482:	6a3b      	ldr	r3, [r7, #32]
 8008484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008488:	2b00      	cmp	r3, #0
 800848a:	d005      	beq.n	8008498 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008490:	f043 0201 	orr.w	r2, r3, #1
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800849a:	f003 0304 	and.w	r3, r3, #4
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d00a      	beq.n	80084b8 <HAL_UART_IRQHandler+0xb0>
 80084a2:	69fb      	ldr	r3, [r7, #28]
 80084a4:	f003 0301 	and.w	r3, r3, #1
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d005      	beq.n	80084b8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084b0:	f043 0202 	orr.w	r2, r3, #2
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80084b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ba:	f003 0302 	and.w	r3, r3, #2
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d00a      	beq.n	80084d8 <HAL_UART_IRQHandler+0xd0>
 80084c2:	69fb      	ldr	r3, [r7, #28]
 80084c4:	f003 0301 	and.w	r3, r3, #1
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d005      	beq.n	80084d8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084d0:	f043 0204 	orr.w	r2, r3, #4
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80084d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084da:	f003 0308 	and.w	r3, r3, #8
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d00f      	beq.n	8008502 <HAL_UART_IRQHandler+0xfa>
 80084e2:	6a3b      	ldr	r3, [r7, #32]
 80084e4:	f003 0320 	and.w	r3, r3, #32
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d104      	bne.n	80084f6 <HAL_UART_IRQHandler+0xee>
 80084ec:	69fb      	ldr	r3, [r7, #28]
 80084ee:	f003 0301 	and.w	r3, r3, #1
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d005      	beq.n	8008502 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084fa:	f043 0208 	orr.w	r2, r3, #8
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008506:	2b00      	cmp	r3, #0
 8008508:	f000 8123 	beq.w	8008752 <HAL_UART_IRQHandler+0x34a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800850c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800850e:	f003 0320 	and.w	r3, r3, #32
 8008512:	2b00      	cmp	r3, #0
 8008514:	d007      	beq.n	8008526 <HAL_UART_IRQHandler+0x11e>
 8008516:	6a3b      	ldr	r3, [r7, #32]
 8008518:	f003 0320 	and.w	r3, r3, #32
 800851c:	2b00      	cmp	r3, #0
 800851e:	d002      	beq.n	8008526 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8008520:	6878      	ldr	r0, [r7, #4]
 8008522:	f000 fac5 	bl	8008ab0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	695b      	ldr	r3, [r3, #20]
 800852c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008530:	2b00      	cmp	r3, #0
 8008532:	bf14      	ite	ne
 8008534:	2301      	movne	r3, #1
 8008536:	2300      	moveq	r3, #0
 8008538:	b2db      	uxtb	r3, r3
 800853a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008540:	f003 0308 	and.w	r3, r3, #8
 8008544:	2b00      	cmp	r3, #0
 8008546:	d102      	bne.n	800854e <HAL_UART_IRQHandler+0x146>
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d033      	beq.n	80085b6 <HAL_UART_IRQHandler+0x1ae>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f000 fa05 	bl	800895e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	695b      	ldr	r3, [r3, #20]
 800855a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800855e:	2b00      	cmp	r3, #0
 8008560:	d024      	beq.n	80085ac <HAL_UART_IRQHandler+0x1a4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	695a      	ldr	r2, [r3, #20]
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008570:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008576:	2b00      	cmp	r3, #0
 8008578:	d013      	beq.n	80085a2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800857e:	4a79      	ldr	r2, [pc, #484]	; (8008764 <HAL_UART_IRQHandler+0x35c>)
 8008580:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008586:	4618      	mov	r0, r3
 8008588:	f7fb f8c0 	bl	800370c <HAL_DMA_Abort_IT>
 800858c:	4603      	mov	r3, r0
 800858e:	2b00      	cmp	r3, #0
 8008590:	d019      	beq.n	80085c6 <HAL_UART_IRQHandler+0x1be>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008598:	687a      	ldr	r2, [r7, #4]
 800859a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800859c:	4610      	mov	r0, r2
 800859e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085a0:	e011      	b.n	80085c6 <HAL_UART_IRQHandler+0x1be>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085aa:	e00c      	b.n	80085c6 <HAL_UART_IRQHandler+0x1be>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085b4:	e007      	b.n	80085c6 <HAL_UART_IRQHandler+0x1be>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2200      	movs	r2, #0
 80085c2:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80085c4:	e0c5      	b.n	8008752 <HAL_UART_IRQHandler+0x34a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085c6:	bf00      	nop
    return;
 80085c8:	e0c3      	b.n	8008752 <HAL_UART_IRQHandler+0x34a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085ce:	2b01      	cmp	r3, #1
 80085d0:	f040 80a3 	bne.w	800871a <HAL_UART_IRQHandler+0x312>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80085d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d6:	f003 0310 	and.w	r3, r3, #16
 80085da:	2b00      	cmp	r3, #0
 80085dc:	f000 809d 	beq.w	800871a <HAL_UART_IRQHandler+0x312>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80085e0:	6a3b      	ldr	r3, [r7, #32]
 80085e2:	f003 0310 	and.w	r3, r3, #16
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	f000 8097 	beq.w	800871a <HAL_UART_IRQHandler+0x312>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80085ec:	2300      	movs	r3, #0
 80085ee:	60fb      	str	r3, [r7, #12]
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	60fb      	str	r3, [r7, #12]
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	685b      	ldr	r3, [r3, #4]
 80085fe:	60fb      	str	r3, [r7, #12]
 8008600:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	695b      	ldr	r3, [r3, #20]
 8008608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800860c:	2b00      	cmp	r3, #0
 800860e:	d04f      	beq.n	80086b0 <HAL_UART_IRQHandler+0x2a8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	685b      	ldr	r3, [r3, #4]
 8008618:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800861a:	8a3b      	ldrh	r3, [r7, #16]
 800861c:	2b00      	cmp	r3, #0
 800861e:	f000 809a 	beq.w	8008756 <HAL_UART_IRQHandler+0x34e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008626:	8a3a      	ldrh	r2, [r7, #16]
 8008628:	429a      	cmp	r2, r3
 800862a:	f080 8094 	bcs.w	8008756 <HAL_UART_IRQHandler+0x34e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	8a3a      	ldrh	r2, [r7, #16]
 8008632:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008638:	699b      	ldr	r3, [r3, #24]
 800863a:	2b20      	cmp	r3, #32
 800863c:	d02b      	beq.n	8008696 <HAL_UART_IRQHandler+0x28e>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	68da      	ldr	r2, [r3, #12]
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800864c:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	695a      	ldr	r2, [r3, #20]
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f022 0201 	bic.w	r2, r2, #1
 800865c:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	695a      	ldr	r2, [r3, #20]
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800866c:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2220      	movs	r2, #32
 8008672:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2200      	movs	r2, #0
 800867a:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	68da      	ldr	r2, [r3, #12]
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f022 0210 	bic.w	r2, r2, #16
 800868a:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008690:	4618      	mov	r0, r3
 8008692:	f7fb f801 	bl	8003698 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800869a:	687a      	ldr	r2, [r7, #4]
 800869c:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 800869e:	687a      	ldr	r2, [r7, #4]
 80086a0:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 80086a2:	b292      	uxth	r2, r2
 80086a4:	1a8a      	subs	r2, r1, r2
 80086a6:	b292      	uxth	r2, r2
 80086a8:	4611      	mov	r1, r2
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif
      }
      return;
 80086ae:	e052      	b.n	8008756 <HAL_UART_IRQHandler+0x34e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80086b8:	b29b      	uxth	r3, r3
 80086ba:	1ad3      	subs	r3, r2, r3
 80086bc:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80086c2:	b29b      	uxth	r3, r3
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d048      	beq.n	800875a <HAL_UART_IRQHandler+0x352>
          &&(nb_rx_data > 0U) )
 80086c8:	8a7b      	ldrh	r3, [r7, #18]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d045      	beq.n	800875a <HAL_UART_IRQHandler+0x352>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	68da      	ldr	r2, [r3, #12]
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80086dc:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	695a      	ldr	r2, [r3, #20]
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f022 0201 	bic.w	r2, r2, #1
 80086ec:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2220      	movs	r2, #32
 80086f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2200      	movs	r2, #0
 80086fa:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	68da      	ldr	r2, [r3, #12]
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f022 0210 	bic.w	r2, r2, #16
 800870a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008710:	8a7a      	ldrh	r2, [r7, #18]
 8008712:	4611      	mov	r1, r2
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif
      }
      return;
 8008718:	e01f      	b.n	800875a <HAL_UART_IRQHandler+0x352>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800871a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800871c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008720:	2b00      	cmp	r3, #0
 8008722:	d008      	beq.n	8008736 <HAL_UART_IRQHandler+0x32e>
 8008724:	6a3b      	ldr	r3, [r7, #32]
 8008726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800872a:	2b00      	cmp	r3, #0
 800872c:	d003      	beq.n	8008736 <HAL_UART_IRQHandler+0x32e>
  {
    UART_Transmit_IT(huart);
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f000 f956 	bl	80089e0 <UART_Transmit_IT>
    return;
 8008734:	e012      	b.n	800875c <HAL_UART_IRQHandler+0x354>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800873c:	2b00      	cmp	r3, #0
 800873e:	d00d      	beq.n	800875c <HAL_UART_IRQHandler+0x354>
 8008740:	6a3b      	ldr	r3, [r7, #32]
 8008742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008746:	2b00      	cmp	r3, #0
 8008748:	d008      	beq.n	800875c <HAL_UART_IRQHandler+0x354>
  {
    UART_EndTransmit_IT(huart);
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f000 f997 	bl	8008a7e <UART_EndTransmit_IT>
    return;
 8008750:	e004      	b.n	800875c <HAL_UART_IRQHandler+0x354>
    return;
 8008752:	bf00      	nop
 8008754:	e002      	b.n	800875c <HAL_UART_IRQHandler+0x354>
      return;
 8008756:	bf00      	nop
 8008758:	e000      	b.n	800875c <HAL_UART_IRQHandler+0x354>
      return;
 800875a:	bf00      	nop
  }
}
 800875c:	3728      	adds	r7, #40	; 0x28
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}
 8008762:	bf00      	nop
 8008764:	080089b7 	.word	0x080089b7

08008768 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008768:	b480      	push	{r7}
 800876a:	b083      	sub	sp, #12
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008770:	bf00      	nop
 8008772:	370c      	adds	r7, #12
 8008774:	46bd      	mov	sp, r7
 8008776:	bc80      	pop	{r7}
 8008778:	4770      	bx	lr

0800877a <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800877a:	b480      	push	{r7}
 800877c:	b083      	sub	sp, #12
 800877e:	af00      	add	r7, sp, #0
 8008780:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008782:	bf00      	nop
 8008784:	370c      	adds	r7, #12
 8008786:	46bd      	mov	sp, r7
 8008788:	bc80      	pop	{r7}
 800878a:	4770      	bx	lr

0800878c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800878c:	b480      	push	{r7}
 800878e:	b083      	sub	sp, #12
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008794:	bf00      	nop
 8008796:	370c      	adds	r7, #12
 8008798:	46bd      	mov	sp, r7
 800879a:	bc80      	pop	{r7}
 800879c:	4770      	bx	lr

0800879e <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800879e:	b480      	push	{r7}
 80087a0:	b083      	sub	sp, #12
 80087a2:	af00      	add	r7, sp, #0
 80087a4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80087a6:	bf00      	nop
 80087a8:	370c      	adds	r7, #12
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bc80      	pop	{r7}
 80087ae:	4770      	bx	lr

080087b0 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 80087b0:	b480      	push	{r7}
 80087b2:	b083      	sub	sp, #12
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 80087b8:	bf00      	nop
 80087ba:	370c      	adds	r7, #12
 80087bc:	46bd      	mov	sp, r7
 80087be:	bc80      	pop	{r7}
 80087c0:	4770      	bx	lr

080087c2 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80087c2:	b480      	push	{r7}
 80087c4:	b083      	sub	sp, #12
 80087c6:	af00      	add	r7, sp, #0
 80087c8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80087ca:	bf00      	nop
 80087cc:	370c      	adds	r7, #12
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bc80      	pop	{r7}
 80087d2:	4770      	bx	lr

080087d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80087d4:	b480      	push	{r7}
 80087d6:	b083      	sub	sp, #12
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
 80087dc:	460b      	mov	r3, r1
 80087de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80087e0:	bf00      	nop
 80087e2:	370c      	adds	r7, #12
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bc80      	pop	{r7}
 80087e8:	4770      	bx	lr
	...

080087ec <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 80087ec:	b480      	push	{r7}
 80087ee:	b083      	sub	sp, #12
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	4a0f      	ldr	r2, [pc, #60]	; (8008834 <UART_InitCallbacksToDefault+0x48>)
 80087f8:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	4a0e      	ldr	r2, [pc, #56]	; (8008838 <UART_InitCallbacksToDefault+0x4c>)
 80087fe:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	4a0e      	ldr	r2, [pc, #56]	; (800883c <UART_InitCallbacksToDefault+0x50>)
 8008804:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	4a0d      	ldr	r2, [pc, #52]	; (8008840 <UART_InitCallbacksToDefault+0x54>)
 800880a:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	4a0d      	ldr	r2, [pc, #52]	; (8008844 <UART_InitCallbacksToDefault+0x58>)
 8008810:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	4a0c      	ldr	r2, [pc, #48]	; (8008848 <UART_InitCallbacksToDefault+0x5c>)
 8008816:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	4a0c      	ldr	r2, [pc, #48]	; (800884c <UART_InitCallbacksToDefault+0x60>)
 800881c:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	4a0b      	ldr	r2, [pc, #44]	; (8008850 <UART_InitCallbacksToDefault+0x64>)
 8008822:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	4a0b      	ldr	r2, [pc, #44]	; (8008854 <UART_InitCallbacksToDefault+0x68>)
 8008828:	669a      	str	r2, [r3, #104]	; 0x68

}
 800882a:	bf00      	nop
 800882c:	370c      	adds	r7, #12
 800882e:	46bd      	mov	sp, r7
 8008830:	bc80      	pop	{r7}
 8008832:	4770      	bx	lr
 8008834:	08008769 	.word	0x08008769
 8008838:	080021e1 	.word	0x080021e1
 800883c:	0800877b 	.word	0x0800877b
 8008840:	080021f5 	.word	0x080021f5
 8008844:	0800878d 	.word	0x0800878d
 8008848:	0800879f 	.word	0x0800879f
 800884c:	080087b1 	.word	0x080087b1
 8008850:	080087c3 	.word	0x080087c3
 8008854:	080087d5 	.word	0x080087d5

08008858 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b084      	sub	sp, #16
 800885c:	af00      	add	r7, sp, #0
 800885e:	60f8      	str	r0, [r7, #12]
 8008860:	60b9      	str	r1, [r7, #8]
 8008862:	603b      	str	r3, [r7, #0]
 8008864:	4613      	mov	r3, r2
 8008866:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008868:	e02c      	b.n	80088c4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800886a:	69bb      	ldr	r3, [r7, #24]
 800886c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008870:	d028      	beq.n	80088c4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008872:	69bb      	ldr	r3, [r7, #24]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d007      	beq.n	8008888 <UART_WaitOnFlagUntilTimeout+0x30>
 8008878:	f7fa f9b2 	bl	8002be0 <HAL_GetTick>
 800887c:	4602      	mov	r2, r0
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	1ad3      	subs	r3, r2, r3
 8008882:	69ba      	ldr	r2, [r7, #24]
 8008884:	429a      	cmp	r2, r3
 8008886:	d21d      	bcs.n	80088c4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	68da      	ldr	r2, [r3, #12]
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008896:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	695a      	ldr	r2, [r3, #20]
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f022 0201 	bic.w	r2, r2, #1
 80088a6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	2220      	movs	r2, #32
 80088ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	2220      	movs	r2, #32
 80088b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	2200      	movs	r2, #0
 80088bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80088c0:	2303      	movs	r3, #3
 80088c2:	e00f      	b.n	80088e4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	681a      	ldr	r2, [r3, #0]
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	4013      	ands	r3, r2
 80088ce:	68ba      	ldr	r2, [r7, #8]
 80088d0:	429a      	cmp	r2, r3
 80088d2:	bf0c      	ite	eq
 80088d4:	2301      	moveq	r3, #1
 80088d6:	2300      	movne	r3, #0
 80088d8:	b2db      	uxtb	r3, r3
 80088da:	461a      	mov	r2, r3
 80088dc:	79fb      	ldrb	r3, [r7, #7]
 80088de:	429a      	cmp	r2, r3
 80088e0:	d0c3      	beq.n	800886a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80088e2:	2300      	movs	r3, #0
}
 80088e4:	4618      	mov	r0, r3
 80088e6:	3710      	adds	r7, #16
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bd80      	pop	{r7, pc}

080088ec <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80088ec:	b480      	push	{r7}
 80088ee:	b085      	sub	sp, #20
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	60f8      	str	r0, [r7, #12]
 80088f4:	60b9      	str	r1, [r7, #8]
 80088f6:	4613      	mov	r3, r2
 80088f8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	68ba      	ldr	r2, [r7, #8]
 80088fe:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	88fa      	ldrh	r2, [r7, #6]
 8008904:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	88fa      	ldrh	r2, [r7, #6]
 800890a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	2200      	movs	r2, #0
 8008910:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	2222      	movs	r2, #34	; 0x22
 8008916:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	2200      	movs	r2, #0
 800891e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	68da      	ldr	r2, [r3, #12]
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008930:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	695a      	ldr	r2, [r3, #20]
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f042 0201 	orr.w	r2, r2, #1
 8008940:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	68da      	ldr	r2, [r3, #12]
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f042 0220 	orr.w	r2, r2, #32
 8008950:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008952:	2300      	movs	r3, #0
}
 8008954:	4618      	mov	r0, r3
 8008956:	3714      	adds	r7, #20
 8008958:	46bd      	mov	sp, r7
 800895a:	bc80      	pop	{r7}
 800895c:	4770      	bx	lr

0800895e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800895e:	b480      	push	{r7}
 8008960:	b083      	sub	sp, #12
 8008962:	af00      	add	r7, sp, #0
 8008964:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	68da      	ldr	r2, [r3, #12]
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008974:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	695a      	ldr	r2, [r3, #20]
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f022 0201 	bic.w	r2, r2, #1
 8008984:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800898a:	2b01      	cmp	r3, #1
 800898c:	d107      	bne.n	800899e <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	68da      	ldr	r2, [r3, #12]
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f022 0210 	bic.w	r2, r2, #16
 800899c:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2220      	movs	r2, #32
 80089a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2200      	movs	r2, #0
 80089aa:	631a      	str	r2, [r3, #48]	; 0x30
}
 80089ac:	bf00      	nop
 80089ae:	370c      	adds	r7, #12
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bc80      	pop	{r7}
 80089b4:	4770      	bx	lr

080089b6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80089b6:	b580      	push	{r7, lr}
 80089b8:	b084      	sub	sp, #16
 80089ba:	af00      	add	r7, sp, #0
 80089bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089c2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	2200      	movs	r2, #0
 80089c8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	2200      	movs	r2, #0
 80089ce:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089d4:	68f8      	ldr	r0, [r7, #12]
 80089d6:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80089d8:	bf00      	nop
 80089da:	3710      	adds	r7, #16
 80089dc:	46bd      	mov	sp, r7
 80089de:	bd80      	pop	{r7, pc}

080089e0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80089e0:	b480      	push	{r7}
 80089e2:	b085      	sub	sp, #20
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089ee:	b2db      	uxtb	r3, r3
 80089f0:	2b21      	cmp	r3, #33	; 0x21
 80089f2:	d13e      	bne.n	8008a72 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	689b      	ldr	r3, [r3, #8]
 80089f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089fc:	d114      	bne.n	8008a28 <UART_Transmit_IT+0x48>
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	691b      	ldr	r3, [r3, #16]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d110      	bne.n	8008a28 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6a1b      	ldr	r3, [r3, #32]
 8008a0a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	881b      	ldrh	r3, [r3, #0]
 8008a10:	461a      	mov	r2, r3
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008a1a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6a1b      	ldr	r3, [r3, #32]
 8008a20:	1c9a      	adds	r2, r3, #2
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	621a      	str	r2, [r3, #32]
 8008a26:	e008      	b.n	8008a3a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	6a1b      	ldr	r3, [r3, #32]
 8008a2c:	1c59      	adds	r1, r3, #1
 8008a2e:	687a      	ldr	r2, [r7, #4]
 8008a30:	6211      	str	r1, [r2, #32]
 8008a32:	781a      	ldrb	r2, [r3, #0]
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008a3e:	b29b      	uxth	r3, r3
 8008a40:	3b01      	subs	r3, #1
 8008a42:	b29b      	uxth	r3, r3
 8008a44:	687a      	ldr	r2, [r7, #4]
 8008a46:	4619      	mov	r1, r3
 8008a48:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d10f      	bne.n	8008a6e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	68da      	ldr	r2, [r3, #12]
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008a5c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	68da      	ldr	r2, [r3, #12]
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008a6c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	e000      	b.n	8008a74 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008a72:	2302      	movs	r3, #2
  }
}
 8008a74:	4618      	mov	r0, r3
 8008a76:	3714      	adds	r7, #20
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	bc80      	pop	{r7}
 8008a7c:	4770      	bx	lr

08008a7e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008a7e:	b580      	push	{r7, lr}
 8008a80:	b082      	sub	sp, #8
 8008a82:	af00      	add	r7, sp, #0
 8008a84:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	68da      	ldr	r2, [r3, #12]
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a94:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2220      	movs	r2, #32
 8008a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008aa6:	2300      	movs	r3, #0
}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	3708      	adds	r7, #8
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}

08008ab0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b086      	sub	sp, #24
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008abe:	b2db      	uxtb	r3, r3
 8008ac0:	2b22      	cmp	r3, #34	; 0x22
 8008ac2:	f040 809b 	bne.w	8008bfc <UART_Receive_IT+0x14c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	689b      	ldr	r3, [r3, #8]
 8008aca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ace:	d117      	bne.n	8008b00 <UART_Receive_IT+0x50>
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	691b      	ldr	r3, [r3, #16]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d113      	bne.n	8008b00 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008ad8:	2300      	movs	r3, #0
 8008ada:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ae0:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	685b      	ldr	r3, [r3, #4]
 8008ae8:	b29b      	uxth	r3, r3
 8008aea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008aee:	b29a      	uxth	r2, r3
 8008af0:	693b      	ldr	r3, [r7, #16]
 8008af2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008af8:	1c9a      	adds	r2, r3, #2
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	629a      	str	r2, [r3, #40]	; 0x28
 8008afe:	e026      	b.n	8008b4e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b04:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8008b06:	2300      	movs	r3, #0
 8008b08:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	689b      	ldr	r3, [r3, #8]
 8008b0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b12:	d007      	beq.n	8008b24 <UART_Receive_IT+0x74>
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	689b      	ldr	r3, [r3, #8]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d10a      	bne.n	8008b32 <UART_Receive_IT+0x82>
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	691b      	ldr	r3, [r3, #16]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d106      	bne.n	8008b32 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	685b      	ldr	r3, [r3, #4]
 8008b2a:	b2da      	uxtb	r2, r3
 8008b2c:	697b      	ldr	r3, [r7, #20]
 8008b2e:	701a      	strb	r2, [r3, #0]
 8008b30:	e008      	b.n	8008b44 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	685b      	ldr	r3, [r3, #4]
 8008b38:	b2db      	uxtb	r3, r3
 8008b3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b3e:	b2da      	uxtb	r2, r3
 8008b40:	697b      	ldr	r3, [r7, #20]
 8008b42:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b48:	1c5a      	adds	r2, r3, #1
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008b52:	b29b      	uxth	r3, r3
 8008b54:	3b01      	subs	r3, #1
 8008b56:	b29b      	uxth	r3, r3
 8008b58:	687a      	ldr	r2, [r7, #4]
 8008b5a:	4619      	mov	r1, r3
 8008b5c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d14a      	bne.n	8008bf8 <UART_Receive_IT+0x148>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	68da      	ldr	r2, [r3, #12]
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	f022 0220 	bic.w	r2, r2, #32
 8008b70:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	68da      	ldr	r2, [r3, #12]
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008b80:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	695a      	ldr	r2, [r3, #20]
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f022 0201 	bic.w	r2, r2, #1
 8008b90:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2220      	movs	r2, #32
 8008b96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b9e:	2b01      	cmp	r3, #1
 8008ba0:	d124      	bne.n	8008bec <UART_Receive_IT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	68da      	ldr	r2, [r3, #12]
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f022 0210 	bic.w	r2, r2, #16
 8008bb6:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f003 0310 	and.w	r3, r3, #16
 8008bc2:	2b10      	cmp	r3, #16
 8008bc4:	d10a      	bne.n	8008bdc <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	60fb      	str	r3, [r7, #12]
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	60fb      	str	r3, [r7, #12]
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	685b      	ldr	r3, [r3, #4]
 8008bd8:	60fb      	str	r3, [r7, #12]
 8008bda:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008be0:	687a      	ldr	r2, [r7, #4]
 8008be2:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8008be4:	4611      	mov	r1, r2
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	4798      	blx	r3
 8008bea:	e003      	b.n	8008bf4 <UART_Receive_IT+0x144>
      else
      {
       /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bf0:	6878      	ldr	r0, [r7, #4]
 8008bf2:	4798      	blx	r3
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	e002      	b.n	8008bfe <UART_Receive_IT+0x14e>
    }
    return HAL_OK;
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	e000      	b.n	8008bfe <UART_Receive_IT+0x14e>
  }
  else
  {
    return HAL_BUSY;
 8008bfc:	2302      	movs	r3, #2
  }
}
 8008bfe:	4618      	mov	r0, r3
 8008c00:	3718      	adds	r7, #24
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}
	...

08008c08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b084      	sub	sp, #16
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	685b      	ldr	r3, [r3, #4]
 8008c14:	4a5f      	ldr	r2, [pc, #380]	; (8008d94 <UART_SetConfig+0x18c>)
 8008c16:	4293      	cmp	r3, r2
 8008c18:	d904      	bls.n	8008c24 <UART_SetConfig+0x1c>
 8008c1a:	f640 6153 	movw	r1, #3667	; 0xe53
 8008c1e:	485e      	ldr	r0, [pc, #376]	; (8008d98 <UART_SetConfig+0x190>)
 8008c20:	f7f9 fb0e 	bl	8002240 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	68db      	ldr	r3, [r3, #12]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d009      	beq.n	8008c40 <UART_SetConfig+0x38>
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	68db      	ldr	r3, [r3, #12]
 8008c30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c34:	d004      	beq.n	8008c40 <UART_SetConfig+0x38>
 8008c36:	f640 6154 	movw	r1, #3668	; 0xe54
 8008c3a:	4857      	ldr	r0, [pc, #348]	; (8008d98 <UART_SetConfig+0x190>)
 8008c3c:	f7f9 fb00 	bl	8002240 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	691b      	ldr	r3, [r3, #16]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d00e      	beq.n	8008c66 <UART_SetConfig+0x5e>
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	691b      	ldr	r3, [r3, #16]
 8008c4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c50:	d009      	beq.n	8008c66 <UART_SetConfig+0x5e>
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	691b      	ldr	r3, [r3, #16]
 8008c56:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008c5a:	d004      	beq.n	8008c66 <UART_SetConfig+0x5e>
 8008c5c:	f640 6155 	movw	r1, #3669	; 0xe55
 8008c60:	484d      	ldr	r0, [pc, #308]	; (8008d98 <UART_SetConfig+0x190>)
 8008c62:	f7f9 faed 	bl	8002240 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	695a      	ldr	r2, [r3, #20]
 8008c6a:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8008c6e:	4013      	ands	r3, r2
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d103      	bne.n	8008c7c <UART_SetConfig+0x74>
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	695b      	ldr	r3, [r3, #20]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d104      	bne.n	8008c86 <UART_SetConfig+0x7e>
 8008c7c:	f640 6156 	movw	r1, #3670	; 0xe56
 8008c80:	4845      	ldr	r0, [pc, #276]	; (8008d98 <UART_SetConfig+0x190>)
 8008c82:	f7f9 fadd 	bl	8002240 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	691b      	ldr	r3, [r3, #16]
 8008c8c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	68da      	ldr	r2, [r3, #12]
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	430a      	orrs	r2, r1
 8008c9a:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	689a      	ldr	r2, [r3, #8]
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	691b      	ldr	r3, [r3, #16]
 8008ca4:	431a      	orrs	r2, r3
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	695b      	ldr	r3, [r3, #20]
 8008caa:	4313      	orrs	r3, r2
 8008cac:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	68db      	ldr	r3, [r3, #12]
 8008cb4:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8008cb8:	f023 030c 	bic.w	r3, r3, #12
 8008cbc:	687a      	ldr	r2, [r7, #4]
 8008cbe:	6812      	ldr	r2, [r2, #0]
 8008cc0:	68b9      	ldr	r1, [r7, #8]
 8008cc2:	430b      	orrs	r3, r1
 8008cc4:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	695b      	ldr	r3, [r3, #20]
 8008ccc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	699a      	ldr	r2, [r3, #24]
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	430a      	orrs	r2, r1
 8008cda:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	4a2e      	ldr	r2, [pc, #184]	; (8008d9c <UART_SetConfig+0x194>)
 8008ce2:	4293      	cmp	r3, r2
 8008ce4:	d103      	bne.n	8008cee <UART_SetConfig+0xe6>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008ce6:	f7fb feb7 	bl	8004a58 <HAL_RCC_GetPCLK2Freq>
 8008cea:	60f8      	str	r0, [r7, #12]
 8008cec:	e002      	b.n	8008cf4 <UART_SetConfig+0xec>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008cee:	f7fb fe9f 	bl	8004a30 <HAL_RCC_GetPCLK1Freq>
 8008cf2:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008cf4:	68fa      	ldr	r2, [r7, #12]
 8008cf6:	4613      	mov	r3, r2
 8008cf8:	009b      	lsls	r3, r3, #2
 8008cfa:	4413      	add	r3, r2
 8008cfc:	009a      	lsls	r2, r3, #2
 8008cfe:	441a      	add	r2, r3
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	685b      	ldr	r3, [r3, #4]
 8008d04:	009b      	lsls	r3, r3, #2
 8008d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d0a:	4a25      	ldr	r2, [pc, #148]	; (8008da0 <UART_SetConfig+0x198>)
 8008d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8008d10:	095b      	lsrs	r3, r3, #5
 8008d12:	0119      	lsls	r1, r3, #4
 8008d14:	68fa      	ldr	r2, [r7, #12]
 8008d16:	4613      	mov	r3, r2
 8008d18:	009b      	lsls	r3, r3, #2
 8008d1a:	4413      	add	r3, r2
 8008d1c:	009a      	lsls	r2, r3, #2
 8008d1e:	441a      	add	r2, r3
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	685b      	ldr	r3, [r3, #4]
 8008d24:	009b      	lsls	r3, r3, #2
 8008d26:	fbb2 f2f3 	udiv	r2, r2, r3
 8008d2a:	4b1d      	ldr	r3, [pc, #116]	; (8008da0 <UART_SetConfig+0x198>)
 8008d2c:	fba3 0302 	umull	r0, r3, r3, r2
 8008d30:	095b      	lsrs	r3, r3, #5
 8008d32:	2064      	movs	r0, #100	; 0x64
 8008d34:	fb00 f303 	mul.w	r3, r0, r3
 8008d38:	1ad3      	subs	r3, r2, r3
 8008d3a:	011b      	lsls	r3, r3, #4
 8008d3c:	3332      	adds	r3, #50	; 0x32
 8008d3e:	4a18      	ldr	r2, [pc, #96]	; (8008da0 <UART_SetConfig+0x198>)
 8008d40:	fba2 2303 	umull	r2, r3, r2, r3
 8008d44:	095b      	lsrs	r3, r3, #5
 8008d46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008d4a:	4419      	add	r1, r3
 8008d4c:	68fa      	ldr	r2, [r7, #12]
 8008d4e:	4613      	mov	r3, r2
 8008d50:	009b      	lsls	r3, r3, #2
 8008d52:	4413      	add	r3, r2
 8008d54:	009a      	lsls	r2, r3, #2
 8008d56:	441a      	add	r2, r3
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	685b      	ldr	r3, [r3, #4]
 8008d5c:	009b      	lsls	r3, r3, #2
 8008d5e:	fbb2 f2f3 	udiv	r2, r2, r3
 8008d62:	4b0f      	ldr	r3, [pc, #60]	; (8008da0 <UART_SetConfig+0x198>)
 8008d64:	fba3 0302 	umull	r0, r3, r3, r2
 8008d68:	095b      	lsrs	r3, r3, #5
 8008d6a:	2064      	movs	r0, #100	; 0x64
 8008d6c:	fb00 f303 	mul.w	r3, r0, r3
 8008d70:	1ad3      	subs	r3, r2, r3
 8008d72:	011b      	lsls	r3, r3, #4
 8008d74:	3332      	adds	r3, #50	; 0x32
 8008d76:	4a0a      	ldr	r2, [pc, #40]	; (8008da0 <UART_SetConfig+0x198>)
 8008d78:	fba2 2303 	umull	r2, r3, r2, r3
 8008d7c:	095b      	lsrs	r3, r3, #5
 8008d7e:	f003 020f 	and.w	r2, r3, #15
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	440a      	add	r2, r1
 8008d88:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008d8a:	bf00      	nop
 8008d8c:	3710      	adds	r7, #16
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}
 8008d92:	bf00      	nop
 8008d94:	0044aa20 	.word	0x0044aa20
 8008d98:	0800edc4 	.word	0x0800edc4
 8008d9c:	40013800 	.word	0x40013800
 8008da0:	51eb851f 	.word	0x51eb851f

08008da4 <BAT_init>:
#include "log.h"

static ADC_HandleTypeDef *g_BAT_adcHandle;

void BAT_init(ADC_HandleTypeDef *p_adcHandle)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b082      	sub	sp, #8
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
  LOG_info("Initializing battery check");
 8008dac:	4905      	ldr	r1, [pc, #20]	; (8008dc4 <BAT_init+0x20>)
 8008dae:	2001      	movs	r0, #1
 8008db0:	f001 fe04 	bl	800a9bc <LOG_log>

  g_BAT_adcHandle = p_adcHandle;
 8008db4:	4a04      	ldr	r2, [pc, #16]	; (8008dc8 <BAT_init+0x24>)
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6013      	str	r3, [r2, #0]

  return;
 8008dba:	bf00      	nop
}
 8008dbc:	3708      	adds	r7, #8
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}
 8008dc2:	bf00      	nop
 8008dc4:	0800ee00 	.word	0x0800ee00
 8008dc8:	2000022c 	.word	0x2000022c

08008dcc <BAT_update>:

void BAT_update(uint32_t *p_voltageInMv)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b084      	sub	sp, #16
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
  uint32_t l_adcRawData;
  float    l_voltageInV;

  l_adcRawData = HAL_ADC_GetValue(g_BAT_adcHandle);
 8008dd4:	4b18      	ldr	r3, [pc, #96]	; (8008e38 <BAT_update+0x6c>)
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f7fa f8d1 	bl	8002f80 <HAL_ADC_GetValue>
 8008dde:	60f8      	str	r0, [r7, #12]

  /* Apply conversion based on STM32 reference voltage & resolution */
  l_voltageInV  = (l_adcRawData * 3.30f ) / 4096.0f;
 8008de0:	68f8      	ldr	r0, [r7, #12]
 8008de2:	f7f7 ff73 	bl	8000ccc <__aeabi_ui2f>
 8008de6:	4603      	mov	r3, r0
 8008de8:	4914      	ldr	r1, [pc, #80]	; (8008e3c <BAT_update+0x70>)
 8008dea:	4618      	mov	r0, r3
 8008dec:	f7f7 ffc6 	bl	8000d7c <__aeabi_fmul>
 8008df0:	4603      	mov	r3, r0
 8008df2:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 8008df6:	4618      	mov	r0, r3
 8008df8:	f7f8 f874 	bl	8000ee4 <__aeabi_fdiv>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	60bb      	str	r3, [r7, #8]

  /* Consider voltage divider used between the battery & the ADC input */
  l_voltageInV *= 11.0f;
 8008e00:	490f      	ldr	r1, [pc, #60]	; (8008e40 <BAT_update+0x74>)
 8008e02:	68b8      	ldr	r0, [r7, #8]
 8008e04:	f7f7 ffba 	bl	8000d7c <__aeabi_fmul>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	60bb      	str	r3, [r7, #8]

  *p_voltageInMv = (uint32_t)(l_voltageInV * 1000.0f);
 8008e0c:	490d      	ldr	r1, [pc, #52]	; (8008e44 <BAT_update+0x78>)
 8008e0e:	68b8      	ldr	r0, [r7, #8]
 8008e10:	f7f7 ffb4 	bl	8000d7c <__aeabi_fmul>
 8008e14:	4603      	mov	r3, r0
 8008e16:	4618      	mov	r0, r3
 8008e18:	f7f8 f926 	bl	8001068 <__aeabi_f2uiz>
 8008e1c:	4602      	mov	r2, r0
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	601a      	str	r2, [r3, #0]

  LOG_debug("Battery level: %u mV", *p_voltageInMv);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	461a      	mov	r2, r3
 8008e28:	4907      	ldr	r1, [pc, #28]	; (8008e48 <BAT_update+0x7c>)
 8008e2a:	2000      	movs	r0, #0
 8008e2c:	f001 fdc6 	bl	800a9bc <LOG_log>

  return;
 8008e30:	bf00      	nop
}
 8008e32:	3710      	adds	r7, #16
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bd80      	pop	{r7, pc}
 8008e38:	2000022c 	.word	0x2000022c
 8008e3c:	40533333 	.word	0x40533333
 8008e40:	41300000 	.word	0x41300000
 8008e44:	447a0000 	.word	0x447a0000
 8008e48:	0800ee1c 	.word	0x0800ee1c

08008e4c <BLU_sendCommand>:
static void         BLU_sendCommand(uint8_t  p_command);
static void         BLU_readData   (uint8_t *p_buffer );
static T_BLU_BUTTON BLU_getButton  (uint8_t *p_buffer );

static void BLU_sendCommand(uint8_t p_command)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b084      	sub	sp, #16
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	4603      	mov	r3, r0
 8008e54:	71fb      	strb	r3, [r7, #7]
  volatile uint16_t l_bitValue;

  for (l_bitValue = 0x01; l_bitValue < 0x0100; l_bitValue <<= 1)
 8008e56:	2301      	movs	r3, #1
 8008e58:	81fb      	strh	r3, [r7, #14]
 8008e5a:	e030      	b.n	8008ebe <BLU_sendCommand+0x72>
  {
    if ((l_bitValue & p_command) != 0)
 8008e5c:	89fb      	ldrh	r3, [r7, #14]
 8008e5e:	b29b      	uxth	r3, r3
 8008e60:	461a      	mov	r2, r3
 8008e62:	79fb      	ldrb	r3, [r7, #7]
 8008e64:	4013      	ands	r3, r2
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d006      	beq.n	8008e78 <BLU_sendCommand+0x2c>
    {
      SET_BIT(GPIOC->ODR, BLUETOOTH_SPI_CMD_Pin);
 8008e6a:	4b1a      	ldr	r3, [pc, #104]	; (8008ed4 <BLU_sendCommand+0x88>)
 8008e6c:	68db      	ldr	r3, [r3, #12]
 8008e6e:	4a19      	ldr	r2, [pc, #100]	; (8008ed4 <BLU_sendCommand+0x88>)
 8008e70:	f043 0302 	orr.w	r3, r3, #2
 8008e74:	60d3      	str	r3, [r2, #12]
 8008e76:	e005      	b.n	8008e84 <BLU_sendCommand+0x38>
    }
    else
    {
      CLEAR_BIT(GPIOC->ODR, BLUETOOTH_SPI_CMD_Pin);
 8008e78:	4b16      	ldr	r3, [pc, #88]	; (8008ed4 <BLU_sendCommand+0x88>)
 8008e7a:	68db      	ldr	r3, [r3, #12]
 8008e7c:	4a15      	ldr	r2, [pc, #84]	; (8008ed4 <BLU_sendCommand+0x88>)
 8008e7e:	f023 0302 	bic.w	r3, r3, #2
 8008e82:	60d3      	str	r3, [r2, #12]
    }

    SET_BIT(GPIOA->ODR  , BLUETOOTH_SPI_CLK_Pin);
 8008e84:	4b14      	ldr	r3, [pc, #80]	; (8008ed8 <BLU_sendCommand+0x8c>)
 8008e86:	68db      	ldr	r3, [r3, #12]
 8008e88:	4a13      	ldr	r2, [pc, #76]	; (8008ed8 <BLU_sendCommand+0x8c>)
 8008e8a:	f043 0310 	orr.w	r3, r3, #16
 8008e8e:	60d3      	str	r3, [r2, #12]
    UTI_delayUs(5);
 8008e90:	2005      	movs	r0, #5
 8008e92:	f002 fa95 	bl	800b3c0 <UTI_delayUs>
    CLEAR_BIT(GPIOA->ODR, BLUETOOTH_SPI_CLK_Pin);
 8008e96:	4b10      	ldr	r3, [pc, #64]	; (8008ed8 <BLU_sendCommand+0x8c>)
 8008e98:	68db      	ldr	r3, [r3, #12]
 8008e9a:	4a0f      	ldr	r2, [pc, #60]	; (8008ed8 <BLU_sendCommand+0x8c>)
 8008e9c:	f023 0310 	bic.w	r3, r3, #16
 8008ea0:	60d3      	str	r3, [r2, #12]
    UTI_delayUs(5);
 8008ea2:	2005      	movs	r0, #5
 8008ea4:	f002 fa8c 	bl	800b3c0 <UTI_delayUs>
    SET_BIT(GPIOA->ODR  , BLUETOOTH_SPI_CLK_Pin);
 8008ea8:	4b0b      	ldr	r3, [pc, #44]	; (8008ed8 <BLU_sendCommand+0x8c>)
 8008eaa:	68db      	ldr	r3, [r3, #12]
 8008eac:	4a0a      	ldr	r2, [pc, #40]	; (8008ed8 <BLU_sendCommand+0x8c>)
 8008eae:	f043 0310 	orr.w	r3, r3, #16
 8008eb2:	60d3      	str	r3, [r2, #12]
  for (l_bitValue = 0x01; l_bitValue < 0x0100; l_bitValue <<= 1)
 8008eb4:	89fb      	ldrh	r3, [r7, #14]
 8008eb6:	b29b      	uxth	r3, r3
 8008eb8:	005b      	lsls	r3, r3, #1
 8008eba:	b29b      	uxth	r3, r3
 8008ebc:	81fb      	strh	r3, [r7, #14]
 8008ebe:	89fb      	ldrh	r3, [r7, #14]
 8008ec0:	b29b      	uxth	r3, r3
 8008ec2:	2bff      	cmp	r3, #255	; 0xff
 8008ec4:	d9ca      	bls.n	8008e5c <BLU_sendCommand+0x10>
  }
  UTI_delayUs(16);
 8008ec6:	2010      	movs	r0, #16
 8008ec8:	f002 fa7a 	bl	800b3c0 <UTI_delayUs>

  return;
 8008ecc:	bf00      	nop
}
 8008ece:	3710      	adds	r7, #16
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	bd80      	pop	{r7, pc}
 8008ed4:	40011000 	.word	0x40011000
 8008ed8:	40010800 	.word	0x40010800

08008edc <BLU_readData>:

static void BLU_readData(uint8_t *p_buffer)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b084      	sub	sp, #16
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
  volatile uint8_t  l_index;
  volatile uint16_t l_bitValue;

  /* Reset buffer */
  for (l_index = 0; l_index < BLU_DATA_BUFFER_LENGTH; l_index++)
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	73fb      	strb	r3, [r7, #15]
 8008ee8:	e00b      	b.n	8008f02 <BLU_readData+0x26>
  {
    p_buffer[l_index] = 0x00;
 8008eea:	7bfb      	ldrb	r3, [r7, #15]
 8008eec:	b2db      	uxtb	r3, r3
 8008eee:	461a      	mov	r2, r3
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	4413      	add	r3, r2
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	701a      	strb	r2, [r3, #0]
  for (l_index = 0; l_index < BLU_DATA_BUFFER_LENGTH; l_index++)
 8008ef8:	7bfb      	ldrb	r3, [r7, #15]
 8008efa:	b2db      	uxtb	r3, r3
 8008efc:	3301      	adds	r3, #1
 8008efe:	b2db      	uxtb	r3, r3
 8008f00:	73fb      	strb	r3, [r7, #15]
 8008f02:	7bfb      	ldrb	r3, [r7, #15]
 8008f04:	b2db      	uxtb	r3, r3
 8008f06:	2b06      	cmp	r3, #6
 8008f08:	d9ef      	bls.n	8008eea <BLU_readData+0xe>
  }

  CLEAR_BIT(GPIOC->ODR, BLUETOOTH_SPI_CS_Pin);
 8008f0a:	4b2e      	ldr	r3, [pc, #184]	; (8008fc4 <BLU_readData+0xe8>)
 8008f0c:	68db      	ldr	r3, [r3, #12]
 8008f0e:	4a2d      	ldr	r2, [pc, #180]	; (8008fc4 <BLU_readData+0xe8>)
 8008f10:	f023 0308 	bic.w	r3, r3, #8
 8008f14:	60d3      	str	r3, [r2, #12]

  BLU_sendCommand(0x01);
 8008f16:	2001      	movs	r0, #1
 8008f18:	f7ff ff98 	bl	8008e4c <BLU_sendCommand>
  BLU_sendCommand(0x42);
 8008f1c:	2042      	movs	r0, #66	; 0x42
 8008f1e:	f7ff ff95 	bl	8008e4c <BLU_sendCommand>

  for (l_index = 0; l_index < BLU_DATA_BUFFER_LENGTH; l_index++)
 8008f22:	2300      	movs	r3, #0
 8008f24:	73fb      	strb	r3, [r7, #15]
 8008f26:	e03f      	b.n	8008fa8 <BLU_readData+0xcc>
  {
    for (l_bitValue = 0x01; l_bitValue < 0x100; l_bitValue <<= 1)
 8008f28:	2301      	movs	r3, #1
 8008f2a:	81bb      	strh	r3, [r7, #12]
 8008f2c:	e030      	b.n	8008f90 <BLU_readData+0xb4>
    {
      SET_BIT(GPIOA->ODR  , BLUETOOTH_SPI_CLK_Pin);
 8008f2e:	4b26      	ldr	r3, [pc, #152]	; (8008fc8 <BLU_readData+0xec>)
 8008f30:	68db      	ldr	r3, [r3, #12]
 8008f32:	4a25      	ldr	r2, [pc, #148]	; (8008fc8 <BLU_readData+0xec>)
 8008f34:	f043 0310 	orr.w	r3, r3, #16
 8008f38:	60d3      	str	r3, [r2, #12]
      UTI_delayUs(5);
 8008f3a:	2005      	movs	r0, #5
 8008f3c:	f002 fa40 	bl	800b3c0 <UTI_delayUs>
      CLEAR_BIT(GPIOA->ODR, BLUETOOTH_SPI_CLK_Pin);
 8008f40:	4b21      	ldr	r3, [pc, #132]	; (8008fc8 <BLU_readData+0xec>)
 8008f42:	68db      	ldr	r3, [r3, #12]
 8008f44:	4a20      	ldr	r2, [pc, #128]	; (8008fc8 <BLU_readData+0xec>)
 8008f46:	f023 0310 	bic.w	r3, r3, #16
 8008f4a:	60d3      	str	r3, [r2, #12]
      UTI_delayUs(5);
 8008f4c:	2005      	movs	r0, #5
 8008f4e:	f002 fa37 	bl	800b3c0 <UTI_delayUs>
      SET_BIT(GPIOA->ODR  , BLUETOOTH_SPI_CLK_Pin);
 8008f52:	4b1d      	ldr	r3, [pc, #116]	; (8008fc8 <BLU_readData+0xec>)
 8008f54:	68db      	ldr	r3, [r3, #12]
 8008f56:	4a1c      	ldr	r2, [pc, #112]	; (8008fc8 <BLU_readData+0xec>)
 8008f58:	f043 0310 	orr.w	r3, r3, #16
 8008f5c:	60d3      	str	r3, [r2, #12]

      if (READ_BIT(GPIOC->IDR, BLUETOOTH_SPI_DAT_Pin) != GPIO_PIN_RESET)
 8008f5e:	4b19      	ldr	r3, [pc, #100]	; (8008fc4 <BLU_readData+0xe8>)
 8008f60:	689b      	ldr	r3, [r3, #8]
 8008f62:	f003 0304 	and.w	r3, r3, #4
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d00d      	beq.n	8008f86 <BLU_readData+0xaa>
      {
        p_buffer[l_index] |= l_bitValue;
 8008f6a:	89bb      	ldrh	r3, [r7, #12]
 8008f6c:	b29a      	uxth	r2, r3
 8008f6e:	7bfb      	ldrb	r3, [r7, #15]
 8008f70:	b2d8      	uxtb	r0, r3
 8008f72:	4601      	mov	r1, r0
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	440b      	add	r3, r1
 8008f78:	7819      	ldrb	r1, [r3, #0]
 8008f7a:	b2d2      	uxtb	r2, r2
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	4403      	add	r3, r0
 8008f80:	430a      	orrs	r2, r1
 8008f82:	b2d2      	uxtb	r2, r2
 8008f84:	701a      	strb	r2, [r3, #0]
    for (l_bitValue = 0x01; l_bitValue < 0x100; l_bitValue <<= 1)
 8008f86:	89bb      	ldrh	r3, [r7, #12]
 8008f88:	b29b      	uxth	r3, r3
 8008f8a:	005b      	lsls	r3, r3, #1
 8008f8c:	b29b      	uxth	r3, r3
 8008f8e:	81bb      	strh	r3, [r7, #12]
 8008f90:	89bb      	ldrh	r3, [r7, #12]
 8008f92:	b29b      	uxth	r3, r3
 8008f94:	2bff      	cmp	r3, #255	; 0xff
 8008f96:	d9ca      	bls.n	8008f2e <BLU_readData+0x52>
      else
      {
        ; /* Nothing to do */
      }
    }
      UTI_delayUs(16);
 8008f98:	2010      	movs	r0, #16
 8008f9a:	f002 fa11 	bl	800b3c0 <UTI_delayUs>
  for (l_index = 0; l_index < BLU_DATA_BUFFER_LENGTH; l_index++)
 8008f9e:	7bfb      	ldrb	r3, [r7, #15]
 8008fa0:	b2db      	uxtb	r3, r3
 8008fa2:	3301      	adds	r3, #1
 8008fa4:	b2db      	uxtb	r3, r3
 8008fa6:	73fb      	strb	r3, [r7, #15]
 8008fa8:	7bfb      	ldrb	r3, [r7, #15]
 8008faa:	b2db      	uxtb	r3, r3
 8008fac:	2b06      	cmp	r3, #6
 8008fae:	d9bb      	bls.n	8008f28 <BLU_readData+0x4c>
  }

  SET_BIT(GPIOC->ODR, BLUETOOTH_SPI_CS_Pin);
 8008fb0:	4b04      	ldr	r3, [pc, #16]	; (8008fc4 <BLU_readData+0xe8>)
 8008fb2:	68db      	ldr	r3, [r3, #12]
 8008fb4:	4a03      	ldr	r2, [pc, #12]	; (8008fc4 <BLU_readData+0xe8>)
 8008fb6:	f043 0308 	orr.w	r3, r3, #8
 8008fba:	60d3      	str	r3, [r2, #12]

  return;
 8008fbc:	bf00      	nop
}
 8008fbe:	3710      	adds	r7, #16
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bd80      	pop	{r7, pc}
 8008fc4:	40011000 	.word	0x40011000
 8008fc8:	40010800 	.word	0x40010800

08008fcc <BLU_getButton>:

static T_BLU_BUTTON BLU_getButton(uint8_t *p_buffer)
{
 8008fcc:	b480      	push	{r7}
 8008fce:	b085      	sub	sp, #20
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
  uint16_t l_buttonRawValue;
  uint8_t  l_index;

  l_buttonRawValue = (p_buffer[BLU_BUTTON_HIGH_OFFSET] << 8) | p_buffer[BLU_BUTTON_LOW_OFFSET];
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	3302      	adds	r3, #2
 8008fd8:	781b      	ldrb	r3, [r3, #0]
 8008fda:	021b      	lsls	r3, r3, #8
 8008fdc:	b21a      	sxth	r2, r3
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	3301      	adds	r3, #1
 8008fe2:	781b      	ldrb	r3, [r3, #0]
 8008fe4:	b21b      	sxth	r3, r3
 8008fe6:	4313      	orrs	r3, r2
 8008fe8:	b21b      	sxth	r3, r3
 8008fea:	81bb      	strh	r3, [r7, #12]

  /* Ignore BLU_BUTTON_NONE value as it is not directly coded in raw data */
  for (l_index = BLU_BUTTON_SELECT; l_index < BLU_BUTTON_COUNT_VALUE; l_index++)
 8008fec:	2301      	movs	r3, #1
 8008fee:	73fb      	strb	r3, [r7, #15]
 8008ff0:	e00d      	b.n	800900e <BLU_getButton+0x42>
  {
    /* Stop decoding button data on 1st match (do not deal with multiple presses case) */
    if ((l_buttonRawValue & (1 << (l_index - 1))) == 0)
 8008ff2:	89ba      	ldrh	r2, [r7, #12]
 8008ff4:	7bfb      	ldrb	r3, [r7, #15]
 8008ff6:	3b01      	subs	r3, #1
 8008ff8:	fa42 f303 	asr.w	r3, r2, r3
 8008ffc:	f003 0301 	and.w	r3, r3, #1
 8009000:	2b00      	cmp	r3, #0
 8009002:	d101      	bne.n	8009008 <BLU_getButton+0x3c>
    {
      return l_index;
 8009004:	7bfb      	ldrb	r3, [r7, #15]
 8009006:	e006      	b.n	8009016 <BLU_getButton+0x4a>
  for (l_index = BLU_BUTTON_SELECT; l_index < BLU_BUTTON_COUNT_VALUE; l_index++)
 8009008:	7bfb      	ldrb	r3, [r7, #15]
 800900a:	3301      	adds	r3, #1
 800900c:	73fb      	strb	r3, [r7, #15]
 800900e:	7bfb      	ldrb	r3, [r7, #15]
 8009010:	2b10      	cmp	r3, #16
 8009012:	d9ee      	bls.n	8008ff2 <BLU_getButton+0x26>
    {
      ; /* Nothing to do */
    }
  }

  return BLU_BUTTON_NONE;
 8009014:	2300      	movs	r3, #0
}
 8009016:	4618      	mov	r0, r3
 8009018:	3714      	adds	r7, #20
 800901a:	46bd      	mov	sp, r7
 800901c:	bc80      	pop	{r7}
 800901e:	4770      	bx	lr

08009020 <BLU_init>:

void BLU_init(void)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	af00      	add	r7, sp, #0
  LOG_info("Initializing bluetooth control");
 8009024:	4904      	ldr	r1, [pc, #16]	; (8009038 <BLU_init+0x18>)
 8009026:	2001      	movs	r0, #1
 8009028:	f001 fcc8 	bl	800a9bc <LOG_log>

  BLU_initData(&g_BLU_lastData);
 800902c:	4803      	ldr	r0, [pc, #12]	; (800903c <BLU_init+0x1c>)
 800902e:	f000 f807 	bl	8009040 <BLU_initData>

  return;
 8009032:	bf00      	nop
}
 8009034:	bd80      	pop	{r7, pc}
 8009036:	bf00      	nop
 8009038:	0800ee34 	.word	0x0800ee34
 800903c:	20000230 	.word	0x20000230

08009040 <BLU_initData>:

void BLU_initData(T_BLU_Data *p_data)
{
 8009040:	b480      	push	{r7}
 8009042:	b083      	sub	sp, #12
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
  p_data->leftX  = BLU_DATA_DEFAUT_DIRECTION;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2280      	movs	r2, #128	; 0x80
 800904c:	601a      	str	r2, [r3, #0]
  p_data->leftY  = BLU_DATA_DEFAUT_DIRECTION;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2280      	movs	r2, #128	; 0x80
 8009052:	605a      	str	r2, [r3, #4]
  p_data->rightX = BLU_DATA_DEFAUT_DIRECTION;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2280      	movs	r2, #128	; 0x80
 8009058:	609a      	str	r2, [r3, #8]
  p_data->rightY = BLU_DATA_DEFAUT_DIRECTION;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2280      	movs	r2, #128	; 0x80
 800905e:	60da      	str	r2, [r3, #12]
  p_data->button = BLU_BUTTON_NONE;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2200      	movs	r2, #0
 8009064:	741a      	strb	r2, [r3, #16]

  return;
 8009066:	bf00      	nop
}
 8009068:	370c      	adds	r7, #12
 800906a:	46bd      	mov	sp, r7
 800906c:	bc80      	pop	{r7}
 800906e:	4770      	bx	lr

08009070 <BLU_receiveData>:

void BLU_receiveData(T_BLU_Data *p_data)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b08c      	sub	sp, #48	; 0x30
 8009074:	af02      	add	r7, sp, #8
 8009076:	6078      	str	r0, [r7, #4]
  uint8_t    l_buffer[BLU_DATA_BUFFER_LENGTH];
  T_BLU_Data l_readData;

  /* Read raw data */
  BLU_readData(l_buffer);
 8009078:	f107 0320 	add.w	r3, r7, #32
 800907c:	4618      	mov	r0, r3
 800907e:	f7ff ff2d 	bl	8008edc <BLU_readData>

  /* Start and decode raw data */
  l_readData.leftX  = l_buffer[BLU_LEFT_X_OFFSET ];
 8009082:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8009086:	60fb      	str	r3, [r7, #12]
  l_readData.leftY  = l_buffer[BLU_LEFT_Y_OFFSET ];
 8009088:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800908c:	613b      	str	r3, [r7, #16]
  l_readData.rightX = l_buffer[BLU_RIGHT_X_OFFSET];
 800908e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009092:	617b      	str	r3, [r7, #20]
  l_readData.rightY = l_buffer[BLU_RIGHT_Y_OFFSET];
 8009094:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009098:	61bb      	str	r3, [r7, #24]
  l_readData.button = BLU_getButton(l_buffer);
 800909a:	f107 0320 	add.w	r3, r7, #32
 800909e:	4618      	mov	r0, r3
 80090a0:	f7ff ff94 	bl	8008fcc <BLU_getButton>
 80090a4:	4603      	mov	r3, r0
 80090a6:	773b      	strb	r3, [r7, #28]

  /* Deal with startup condition, while read data is not valid yet */
  if  ((l_readData.leftX == 255 && l_readData.leftY == 255 && l_readData.rightX == 255 && l_readData.rightY ==255)
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	2bff      	cmp	r3, #255	; 0xff
 80090ac:	d108      	bne.n	80090c0 <BLU_receiveData+0x50>
 80090ae:	693b      	ldr	r3, [r7, #16]
 80090b0:	2bff      	cmp	r3, #255	; 0xff
 80090b2:	d105      	bne.n	80090c0 <BLU_receiveData+0x50>
 80090b4:	697b      	ldr	r3, [r7, #20]
 80090b6:	2bff      	cmp	r3, #255	; 0xff
 80090b8:	d102      	bne.n	80090c0 <BLU_receiveData+0x50>
 80090ba:	69bb      	ldr	r3, [r7, #24]
 80090bc:	2bff      	cmp	r3, #255	; 0xff
 80090be:	d00b      	beq.n	80090d8 <BLU_receiveData+0x68>
    || (l_readData.leftX ==   0 && l_readData.leftY ==   0 && l_readData.rightX ==   0 && l_readData.rightY ==  0))
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d10e      	bne.n	80090e4 <BLU_receiveData+0x74>
 80090c6:	693b      	ldr	r3, [r7, #16]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d10b      	bne.n	80090e4 <BLU_receiveData+0x74>
 80090cc:	697b      	ldr	r3, [r7, #20]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d108      	bne.n	80090e4 <BLU_receiveData+0x74>
 80090d2:	69bb      	ldr	r3, [r7, #24]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d105      	bne.n	80090e4 <BLU_receiveData+0x74>
  {
    BLU_initData(&l_readData);
 80090d8:	f107 030c 	add.w	r3, r7, #12
 80090dc:	4618      	mov	r0, r3
 80090de:	f7ff ffaf 	bl	8009040 <BLU_initData>
 80090e2:	e053      	b.n	800918c <BLU_receiveData+0x11c>
  }
  /* Use a confirmation mechanism, on 2 cycles, as glitches are observed */
  else if ((l_readData.leftX  == g_BLU_lastData.leftX) &&
 80090e4:	68fa      	ldr	r2, [r7, #12]
 80090e6:	4b33      	ldr	r3, [pc, #204]	; (80091b4 <BLU_receiveData+0x144>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	429a      	cmp	r2, r3
 80090ec:	d14e      	bne.n	800918c <BLU_receiveData+0x11c>
           (l_readData.leftY  == g_BLU_lastData.leftY) &&
 80090ee:	693a      	ldr	r2, [r7, #16]
 80090f0:	4b30      	ldr	r3, [pc, #192]	; (80091b4 <BLU_receiveData+0x144>)
 80090f2:	685b      	ldr	r3, [r3, #4]
  else if ((l_readData.leftX  == g_BLU_lastData.leftX) &&
 80090f4:	429a      	cmp	r2, r3
 80090f6:	d149      	bne.n	800918c <BLU_receiveData+0x11c>
           (l_readData.rightX == g_BLU_lastData.rightX) &&
 80090f8:	697a      	ldr	r2, [r7, #20]
 80090fa:	4b2e      	ldr	r3, [pc, #184]	; (80091b4 <BLU_receiveData+0x144>)
 80090fc:	689b      	ldr	r3, [r3, #8]
           (l_readData.leftY  == g_BLU_lastData.leftY) &&
 80090fe:	429a      	cmp	r2, r3
 8009100:	d144      	bne.n	800918c <BLU_receiveData+0x11c>
           (l_readData.rightY == g_BLU_lastData.rightY) &&
 8009102:	69ba      	ldr	r2, [r7, #24]
 8009104:	4b2b      	ldr	r3, [pc, #172]	; (80091b4 <BLU_receiveData+0x144>)
 8009106:	68db      	ldr	r3, [r3, #12]
           (l_readData.rightX == g_BLU_lastData.rightX) &&
 8009108:	429a      	cmp	r2, r3
 800910a:	d13f      	bne.n	800918c <BLU_receiveData+0x11c>
           (l_readData.button == g_BLU_lastData.button))
 800910c:	7f3a      	ldrb	r2, [r7, #28]
 800910e:	4b29      	ldr	r3, [pc, #164]	; (80091b4 <BLU_receiveData+0x144>)
 8009110:	7c1b      	ldrb	r3, [r3, #16]
           (l_readData.rightY == g_BLU_lastData.rightY) &&
 8009112:	429a      	cmp	r2, r3
 8009114:	d13a      	bne.n	800918c <BLU_receiveData+0x11c>
  {
    /* Normalize directions data in range [-MAX..MAX] */
    p_data->leftX  = UTI_normalizeIntValue(l_readData.leftX , 0, 255, -STP_DRIVE_MAX_SPEED, STP_DRIVE_MAX_SPEED, false);
 8009116:	68f8      	ldr	r0, [r7, #12]
 8009118:	2300      	movs	r3, #0
 800911a:	9301      	str	r3, [sp, #4]
 800911c:	2328      	movs	r3, #40	; 0x28
 800911e:	9300      	str	r3, [sp, #0]
 8009120:	f06f 0327 	mvn.w	r3, #39	; 0x27
 8009124:	22ff      	movs	r2, #255	; 0xff
 8009126:	2100      	movs	r1, #0
 8009128:	f002 f9cf 	bl	800b4ca <UTI_normalizeIntValue>
 800912c:	4602      	mov	r2, r0
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	601a      	str	r2, [r3, #0]
    p_data->leftY  = UTI_normalizeIntValue(l_readData.leftY , 0, 255, -STP_DRIVE_MAX_SPEED, STP_DRIVE_MAX_SPEED, true );
 8009132:	6938      	ldr	r0, [r7, #16]
 8009134:	2301      	movs	r3, #1
 8009136:	9301      	str	r3, [sp, #4]
 8009138:	2328      	movs	r3, #40	; 0x28
 800913a:	9300      	str	r3, [sp, #0]
 800913c:	f06f 0327 	mvn.w	r3, #39	; 0x27
 8009140:	22ff      	movs	r2, #255	; 0xff
 8009142:	2100      	movs	r1, #0
 8009144:	f002 f9c1 	bl	800b4ca <UTI_normalizeIntValue>
 8009148:	4602      	mov	r2, r0
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	605a      	str	r2, [r3, #4]
    p_data->rightX = UTI_normalizeIntValue(l_readData.rightX, 0, 255, -STP_DRIVE_MAX_SPEED, STP_DRIVE_MAX_SPEED, false);
 800914e:	6978      	ldr	r0, [r7, #20]
 8009150:	2300      	movs	r3, #0
 8009152:	9301      	str	r3, [sp, #4]
 8009154:	2328      	movs	r3, #40	; 0x28
 8009156:	9300      	str	r3, [sp, #0]
 8009158:	f06f 0327 	mvn.w	r3, #39	; 0x27
 800915c:	22ff      	movs	r2, #255	; 0xff
 800915e:	2100      	movs	r1, #0
 8009160:	f002 f9b3 	bl	800b4ca <UTI_normalizeIntValue>
 8009164:	4602      	mov	r2, r0
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	609a      	str	r2, [r3, #8]
    p_data->rightY = UTI_normalizeIntValue(l_readData.rightY, 0, 255, -STP_DRIVE_MAX_SPEED, STP_DRIVE_MAX_SPEED, true );
 800916a:	69b8      	ldr	r0, [r7, #24]
 800916c:	2301      	movs	r3, #1
 800916e:	9301      	str	r3, [sp, #4]
 8009170:	2328      	movs	r3, #40	; 0x28
 8009172:	9300      	str	r3, [sp, #0]
 8009174:	f06f 0327 	mvn.w	r3, #39	; 0x27
 8009178:	22ff      	movs	r2, #255	; 0xff
 800917a:	2100      	movs	r1, #0
 800917c:	f002 f9a5 	bl	800b4ca <UTI_normalizeIntValue>
 8009180:	4602      	mov	r2, r0
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	60da      	str	r2, [r3, #12]
    p_data->button = l_readData.button;
 8009186:	7f3a      	ldrb	r2, [r7, #28]
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	741a      	strb	r2, [r3, #16]
  {
    ; /* Nothing to do */
  }

  /* Saved received data for later use in confirmation mechanism */
  g_BLU_lastData.leftX  = l_readData.leftX;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	4a09      	ldr	r2, [pc, #36]	; (80091b4 <BLU_receiveData+0x144>)
 8009190:	6013      	str	r3, [r2, #0]
  g_BLU_lastData.leftY  = l_readData.leftY;
 8009192:	693b      	ldr	r3, [r7, #16]
 8009194:	4a07      	ldr	r2, [pc, #28]	; (80091b4 <BLU_receiveData+0x144>)
 8009196:	6053      	str	r3, [r2, #4]
  g_BLU_lastData.rightX = l_readData.rightX;
 8009198:	697b      	ldr	r3, [r7, #20]
 800919a:	4a06      	ldr	r2, [pc, #24]	; (80091b4 <BLU_receiveData+0x144>)
 800919c:	6093      	str	r3, [r2, #8]
  g_BLU_lastData.rightY = l_readData.rightY;
 800919e:	69bb      	ldr	r3, [r7, #24]
 80091a0:	4a04      	ldr	r2, [pc, #16]	; (80091b4 <BLU_receiveData+0x144>)
 80091a2:	60d3      	str	r3, [r2, #12]
  g_BLU_lastData.button = l_readData.button;
 80091a4:	7f3a      	ldrb	r2, [r7, #28]
 80091a6:	4b03      	ldr	r3, [pc, #12]	; (80091b4 <BLU_receiveData+0x144>)
 80091a8:	741a      	strb	r2, [r3, #16]

  return;
 80091aa:	bf00      	nop
}
 80091ac:	3728      	adds	r7, #40	; 0x28
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}
 80091b2:	bf00      	nop
 80091b4:	20000230 	.word	0x20000230

080091b8 <CBU_init>:
#include "circular_buffer.h"

#include "log.h"

void CBU_init(T_CBU_Context *p_buffer)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b084      	sub	sp, #16
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
  uint32_t l_index;

  LOG_debug("Initializing circular buffer");
 80091c0:	490e      	ldr	r1, [pc, #56]	; (80091fc <CBU_init+0x44>)
 80091c2:	2000      	movs	r0, #0
 80091c4:	f001 fbfa 	bl	800a9bc <LOG_log>

  for (l_index = 0; l_index < CST_CIRCULAR_BUFFER_MAX_ELEMENTS; l_index++)
 80091c8:	2300      	movs	r3, #0
 80091ca:	60fb      	str	r3, [r7, #12]
 80091cc:	e008      	b.n	80091e0 <CBU_init+0x28>
  {
    p_buffer->elements[l_index] = 0.0f;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	68fa      	ldr	r2, [r7, #12]
 80091d2:	f04f 0100 	mov.w	r1, #0
 80091d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (l_index = 0; l_index < CST_CIRCULAR_BUFFER_MAX_ELEMENTS; l_index++)
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	3301      	adds	r3, #1
 80091de:	60fb      	str	r3, [r7, #12]
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	2b09      	cmp	r3, #9
 80091e4:	d9f3      	bls.n	80091ce <CBU_init+0x16>
  }

  p_buffer->count = 0;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2200      	movs	r2, #0
 80091ea:	62da      	str	r2, [r3, #44]	; 0x2c
  p_buffer->index = 0;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2200      	movs	r2, #0
 80091f0:	629a      	str	r2, [r3, #40]	; 0x28

  return;
 80091f2:	bf00      	nop
}
 80091f4:	3710      	adds	r7, #16
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bd80      	pop	{r7, pc}
 80091fa:	bf00      	nop
 80091fc:	0800ee54 	.word	0x0800ee54

08009200 <CBU_push>:

void CBU_push(T_CBU_Context *p_buffer, float p_element)
{
 8009200:	b480      	push	{r7}
 8009202:	b083      	sub	sp, #12
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
 8009208:	6039      	str	r1, [r7, #0]
  if (p_buffer->index == CST_CIRCULAR_BUFFER_MAX_ELEMENTS - 1)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800920e:	2b09      	cmp	r3, #9
 8009210:	d103      	bne.n	800921a <CBU_push+0x1a>
  {
    p_buffer->index = 0;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2200      	movs	r2, #0
 8009216:	629a      	str	r2, [r3, #40]	; 0x28
 8009218:	e004      	b.n	8009224 <CBU_push+0x24>
  }
  else
  {
    p_buffer->index++;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800921e:	1c5a      	adds	r2, r3, #1
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	629a      	str	r2, [r3, #40]	; 0x28
  }

  p_buffer->elements[p_buffer->index] = p_element;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	6839      	ldr	r1, [r7, #0]
 800922c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  if (p_buffer->count < CST_CIRCULAR_BUFFER_MAX_ELEMENTS)
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009234:	2b09      	cmp	r3, #9
 8009236:	d805      	bhi.n	8009244 <CBU_push+0x44>
  {
    p_buffer->count++;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800923c:	1c5a      	adds	r2, r3, #1
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	62da      	str	r2, [r3, #44]	; 0x2c
  else
  {
    ; /* Nothing to do */
  }

  return;
 8009242:	bf00      	nop
 8009244:	bf00      	nop
}
 8009246:	370c      	adds	r7, #12
 8009248:	46bd      	mov	sp, r7
 800924a:	bc80      	pop	{r7}
 800924c:	4770      	bx	lr

0800924e <CBU_getAverage>:
{
  return p_buffer->count;
}

float CBU_getAverage(T_CBU_Context *p_buffer)
{
 800924e:	b580      	push	{r7, lr}
 8009250:	b086      	sub	sp, #24
 8009252:	af00      	add	r7, sp, #0
 8009254:	6078      	str	r0, [r7, #4]
  uint32_t l_index;
  uint32_t l_count;
  float    l_average;

  l_index   = p_buffer->index;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800925a:	617b      	str	r3, [r7, #20]
  l_count   = 0;
 800925c:	2300      	movs	r3, #0
 800925e:	613b      	str	r3, [r7, #16]
  l_average = 0.0f;
 8009260:	f04f 0300 	mov.w	r3, #0
 8009264:	60fb      	str	r3, [r7, #12]

  while (l_count < p_buffer->count)
 8009266:	e015      	b.n	8009294 <CBU_getAverage+0x46>
  {
    l_average += p_buffer->elements[l_index];
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	697a      	ldr	r2, [r7, #20]
 800926c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009270:	4619      	mov	r1, r3
 8009272:	68f8      	ldr	r0, [r7, #12]
 8009274:	f7f7 fc7a 	bl	8000b6c <__addsf3>
 8009278:	4603      	mov	r3, r0
 800927a:	60fb      	str	r3, [r7, #12]

    if (l_index == CST_CIRCULAR_BUFFER_MAX_ELEMENTS - 1)
 800927c:	697b      	ldr	r3, [r7, #20]
 800927e:	2b09      	cmp	r3, #9
 8009280:	d102      	bne.n	8009288 <CBU_getAverage+0x3a>
    {
      l_index = 0;
 8009282:	2300      	movs	r3, #0
 8009284:	617b      	str	r3, [r7, #20]
 8009286:	e002      	b.n	800928e <CBU_getAverage+0x40>
    }
    else
    {
      l_index++;
 8009288:	697b      	ldr	r3, [r7, #20]
 800928a:	3301      	adds	r3, #1
 800928c:	617b      	str	r3, [r7, #20]
    }

    l_count++;
 800928e:	693b      	ldr	r3, [r7, #16]
 8009290:	3301      	adds	r3, #1
 8009292:	613b      	str	r3, [r7, #16]
  while (l_count < p_buffer->count)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009298:	693a      	ldr	r2, [r7, #16]
 800929a:	429a      	cmp	r2, r3
 800929c:	d3e4      	bcc.n	8009268 <CBU_getAverage+0x1a>
  }

  l_average /= (float)p_buffer->count;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092a2:	4618      	mov	r0, r3
 80092a4:	f7f7 fd12 	bl	8000ccc <__aeabi_ui2f>
 80092a8:	4603      	mov	r3, r0
 80092aa:	4619      	mov	r1, r3
 80092ac:	68f8      	ldr	r0, [r7, #12]
 80092ae:	f7f7 fe19 	bl	8000ee4 <__aeabi_fdiv>
 80092b2:	4603      	mov	r3, r0
 80092b4:	60fb      	str	r3, [r7, #12]

  return l_average;
 80092b6:	68fb      	ldr	r3, [r7, #12]
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	3718      	adds	r7, #24
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}

080092c0 <CON_init>:
static T_SFO_data          g_CON_data;
static uint32_t            g_CON_dataSize;
static bool                g_CON_isDataComplete;

void CON_init(UART_HandleTypeDef *p_uartHandle)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b082      	sub	sp, #8
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
  LOG_info("Initializing console");
 80092c8:	490d      	ldr	r1, [pc, #52]	; (8009300 <CON_init+0x40>)
 80092ca:	2001      	movs	r0, #1
 80092cc:	f001 fb76 	bl	800a9bc <LOG_log>

  g_CON_uartHandle     = p_uartHandle;
 80092d0:	4a0c      	ldr	r2, [pc, #48]	; (8009304 <CON_init+0x44>)
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	6013      	str	r3, [r2, #0]
  g_CON_dataSize       = 0;
 80092d6:	4b0c      	ldr	r3, [pc, #48]	; (8009308 <CON_init+0x48>)
 80092d8:	2200      	movs	r2, #0
 80092da:	601a      	str	r2, [r3, #0]
  g_CON_isDataComplete = false;
 80092dc:	4b0b      	ldr	r3, [pc, #44]	; (800930c <CON_init+0x4c>)
 80092de:	2200      	movs	r2, #0
 80092e0:	701a      	strb	r2, [r3, #0]

  SFO_initData(&g_CON_data);
 80092e2:	480b      	ldr	r0, [pc, #44]	; (8009310 <CON_init+0x50>)
 80092e4:	f001 ff4a 	bl	800b17c <SFO_initData>

  HAL_UART_Receive_IT(g_CON_uartHandle, &g_CON_datum, 1);
 80092e8:	4b06      	ldr	r3, [pc, #24]	; (8009304 <CON_init+0x44>)
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	2201      	movs	r2, #1
 80092ee:	4909      	ldr	r1, [pc, #36]	; (8009314 <CON_init+0x54>)
 80092f0:	4618      	mov	r0, r3
 80092f2:	f7ff f859 	bl	80083a8 <HAL_UART_Receive_IT>

  return;
 80092f6:	bf00      	nop
}
 80092f8:	3708      	adds	r7, #8
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}
 80092fe:	bf00      	nop
 8009300:	0800eeb8 	.word	0x0800eeb8
 8009304:	20000244 	.word	0x20000244
 8009308:	2000025c 	.word	0x2000025c
 800930c:	20000260 	.word	0x20000260
 8009310:	2000024c 	.word	0x2000024c
 8009314:	20000248 	.word	0x20000248

08009318 <CON_receiveData>:

void CON_receiveData(void)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	af00      	add	r7, sp, #0
  /* If previous command was not processed yet, drop datum, */
  /* which will lead to an error, showing a design issue... */
  if (g_CON_isDataComplete == true)
 800931c:	4b0f      	ldr	r3, [pc, #60]	; (800935c <CON_receiveData+0x44>)
 800931e:	781b      	ldrb	r3, [r3, #0]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d112      	bne.n	800934a <CON_receiveData+0x32>
  {
    ; /* Nothing to do */
  }
  else
  {
    if (g_CON_datum == '\r')
 8009324:	4b0e      	ldr	r3, [pc, #56]	; (8009360 <CON_receiveData+0x48>)
 8009326:	781b      	ldrb	r3, [r3, #0]
 8009328:	2b0d      	cmp	r3, #13
 800932a:	d103      	bne.n	8009334 <CON_receiveData+0x1c>
    {
      g_CON_isDataComplete = true;
 800932c:	4b0b      	ldr	r3, [pc, #44]	; (800935c <CON_receiveData+0x44>)
 800932e:	2201      	movs	r2, #1
 8009330:	701a      	strb	r2, [r3, #0]
 8009332:	e00a      	b.n	800934a <CON_receiveData+0x32>
    }
    else
    {
      g_CON_data[g_CON_dataSize] = g_CON_datum;
 8009334:	4b0b      	ldr	r3, [pc, #44]	; (8009364 <CON_receiveData+0x4c>)
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	4a09      	ldr	r2, [pc, #36]	; (8009360 <CON_receiveData+0x48>)
 800933a:	7811      	ldrb	r1, [r2, #0]
 800933c:	4a0a      	ldr	r2, [pc, #40]	; (8009368 <CON_receiveData+0x50>)
 800933e:	54d1      	strb	r1, [r2, r3]
      g_CON_dataSize++;
 8009340:	4b08      	ldr	r3, [pc, #32]	; (8009364 <CON_receiveData+0x4c>)
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	3301      	adds	r3, #1
 8009346:	4a07      	ldr	r2, [pc, #28]	; (8009364 <CON_receiveData+0x4c>)
 8009348:	6013      	str	r3, [r2, #0]
    }
  }

  HAL_UART_Receive_IT(g_CON_uartHandle, &g_CON_datum, 1);
 800934a:	4b08      	ldr	r3, [pc, #32]	; (800936c <CON_receiveData+0x54>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	2201      	movs	r2, #1
 8009350:	4903      	ldr	r1, [pc, #12]	; (8009360 <CON_receiveData+0x48>)
 8009352:	4618      	mov	r0, r3
 8009354:	f7ff f828 	bl	80083a8 <HAL_UART_Receive_IT>

  return;
 8009358:	bf00      	nop
}
 800935a:	bd80      	pop	{r7, pc}
 800935c:	20000260 	.word	0x20000260
 8009360:	20000248 	.word	0x20000248
 8009364:	2000025c 	.word	0x2000025c
 8009368:	2000024c 	.word	0x2000024c
 800936c:	20000244 	.word	0x20000244

08009370 <CON_updateFifo>:

void CON_updateFifo(T_SFO_Context *p_fifo)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b082      	sub	sp, #8
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
  if (g_CON_isDataComplete == false)
 8009378:	4b0c      	ldr	r3, [pc, #48]	; (80093ac <CON_updateFifo+0x3c>)
 800937a:	781b      	ldrb	r3, [r3, #0]
 800937c:	f083 0301 	eor.w	r3, r3, #1
 8009380:	b2db      	uxtb	r3, r3
 8009382:	2b00      	cmp	r3, #0
 8009384:	d10d      	bne.n	80093a2 <CON_updateFifo+0x32>
  {
    ; /* Nothing to do */
  }
  else
  {
    SFO_push    (p_fifo, &g_CON_data);
 8009386:	490a      	ldr	r1, [pc, #40]	; (80093b0 <CON_updateFifo+0x40>)
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	f001 ff1d 	bl	800b1c8 <SFO_push>
    SFO_initData(&g_CON_data);
 800938e:	4808      	ldr	r0, [pc, #32]	; (80093b0 <CON_updateFifo+0x40>)
 8009390:	f001 fef4 	bl	800b17c <SFO_initData>

    g_CON_dataSize       = 0;
 8009394:	4b07      	ldr	r3, [pc, #28]	; (80093b4 <CON_updateFifo+0x44>)
 8009396:	2200      	movs	r2, #0
 8009398:	601a      	str	r2, [r3, #0]
    g_CON_isDataComplete = false;
 800939a:	4b04      	ldr	r3, [pc, #16]	; (80093ac <CON_updateFifo+0x3c>)
 800939c:	2200      	movs	r2, #0
 800939e:	701a      	strb	r2, [r3, #0]
  }

  return;
 80093a0:	bf00      	nop
 80093a2:	bf00      	nop
}
 80093a4:	3708      	adds	r7, #8
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bd80      	pop	{r7, pc}
 80093aa:	bf00      	nop
 80093ac:	20000260 	.word	0x20000260
 80093b0:	2000024c 	.word	0x2000024c
 80093b4:	2000025c 	.word	0x2000025c

080093b8 <CON_sendString>:

void CON_sendString(char *p_string, uint32_t p_length)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b082      	sub	sp, #8
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
 80093c0:	6039      	str	r1, [r7, #0]
  /* As this method is using for logging/debug, we will not deal with failure cases */
  (void)HAL_UART_Transmit(g_CON_uartHandle,
 80093c2:	4b06      	ldr	r3, [pc, #24]	; (80093dc <CON_sendString+0x24>)
 80093c4:	6818      	ldr	r0, [r3, #0]
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	b29a      	uxth	r2, r3
 80093ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80093ce:	6879      	ldr	r1, [r7, #4]
 80093d0:	f7fe ff58 	bl	8008284 <HAL_UART_Transmit>
               (uint8_t *)p_string,
                          p_length,
                          CST_UART_TRANSMIT_TIMEOUT_IN_MS);

  return;
 80093d4:	bf00      	nop
}
 80093d6:	3708      	adds	r7, #8
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}
 80093dc:	20000244 	.word	0x20000244

080093e0 <DRV_init>:
void DRV_init(TIM_HandleTypeDef *p_pwmTimerHandle,
              TIM_HandleTypeDef *p_rearLeftEncoderTimerHandle,
              TIM_HandleTypeDef *p_rearRightEncoderTimerHandle,
              TIM_HandleTypeDef *p_frontRightEncoderTimerHandle,
              TIM_HandleTypeDef *p_frontLeftEncoderTimerHandle)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b088      	sub	sp, #32
 80093e4:	af04      	add	r7, sp, #16
 80093e6:	60f8      	str	r0, [r7, #12]
 80093e8:	60b9      	str	r1, [r7, #8]
 80093ea:	607a      	str	r2, [r7, #4]
 80093ec:	603b      	str	r3, [r7, #0]
  LOG_info("Initializing Drive module");
 80093ee:	495d      	ldr	r1, [pc, #372]	; (8009564 <DRV_init+0x184>)
 80093f0:	2001      	movs	r0, #1
 80093f2:	f001 fae3 	bl	800a9bc <LOG_log>

  /* Setup PIDs with a target speed to 0 */
  PID_init(&g_DRV_pidFrontRight, STP_DRIVE_PID_P_FACTOR, STP_DRIVE_PID_I_FACTOR, STP_DRIVE_PID_D_FACTOR, 0, STP_DRIVE_MIN_SPEED, STP_DRIVE_MAX_SPEED, STP_DRIVE_PID_ANTI_WIND_UP_FACTOR);
 80093f6:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 80093fa:	9303      	str	r3, [sp, #12]
 80093fc:	4b5a      	ldr	r3, [pc, #360]	; (8009568 <DRV_init+0x188>)
 80093fe:	9302      	str	r3, [sp, #8]
 8009400:	f04f 0300 	mov.w	r3, #0
 8009404:	9301      	str	r3, [sp, #4]
 8009406:	f04f 0300 	mov.w	r3, #0
 800940a:	9300      	str	r3, [sp, #0]
 800940c:	f04f 0300 	mov.w	r3, #0
 8009410:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8009414:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8009418:	4854      	ldr	r0, [pc, #336]	; (800956c <DRV_init+0x18c>)
 800941a:	f001 fce3 	bl	800ade4 <PID_init>
  PID_init(&g_DRV_pidFrontLeft , STP_DRIVE_PID_P_FACTOR, STP_DRIVE_PID_I_FACTOR, STP_DRIVE_PID_D_FACTOR, 0, STP_DRIVE_MIN_SPEED, STP_DRIVE_MAX_SPEED, STP_DRIVE_PID_ANTI_WIND_UP_FACTOR);
 800941e:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 8009422:	9303      	str	r3, [sp, #12]
 8009424:	4b50      	ldr	r3, [pc, #320]	; (8009568 <DRV_init+0x188>)
 8009426:	9302      	str	r3, [sp, #8]
 8009428:	f04f 0300 	mov.w	r3, #0
 800942c:	9301      	str	r3, [sp, #4]
 800942e:	f04f 0300 	mov.w	r3, #0
 8009432:	9300      	str	r3, [sp, #0]
 8009434:	f04f 0300 	mov.w	r3, #0
 8009438:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800943c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8009440:	484b      	ldr	r0, [pc, #300]	; (8009570 <DRV_init+0x190>)
 8009442:	f001 fccf 	bl	800ade4 <PID_init>
  PID_init(&g_DRV_pidRearLeft  , STP_DRIVE_PID_P_FACTOR, STP_DRIVE_PID_I_FACTOR, STP_DRIVE_PID_D_FACTOR, 0, STP_DRIVE_MIN_SPEED, STP_DRIVE_MAX_SPEED, STP_DRIVE_PID_ANTI_WIND_UP_FACTOR);
 8009446:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 800944a:	9303      	str	r3, [sp, #12]
 800944c:	4b46      	ldr	r3, [pc, #280]	; (8009568 <DRV_init+0x188>)
 800944e:	9302      	str	r3, [sp, #8]
 8009450:	f04f 0300 	mov.w	r3, #0
 8009454:	9301      	str	r3, [sp, #4]
 8009456:	f04f 0300 	mov.w	r3, #0
 800945a:	9300      	str	r3, [sp, #0]
 800945c:	f04f 0300 	mov.w	r3, #0
 8009460:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8009464:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8009468:	4842      	ldr	r0, [pc, #264]	; (8009574 <DRV_init+0x194>)
 800946a:	f001 fcbb 	bl	800ade4 <PID_init>
  PID_init(&g_DRV_pidRearRight , STP_DRIVE_PID_P_FACTOR, STP_DRIVE_PID_I_FACTOR, STP_DRIVE_PID_D_FACTOR, 0, STP_DRIVE_MIN_SPEED, STP_DRIVE_MAX_SPEED, STP_DRIVE_PID_ANTI_WIND_UP_FACTOR);
 800946e:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 8009472:	9303      	str	r3, [sp, #12]
 8009474:	4b3c      	ldr	r3, [pc, #240]	; (8009568 <DRV_init+0x188>)
 8009476:	9302      	str	r3, [sp, #8]
 8009478:	f04f 0300 	mov.w	r3, #0
 800947c:	9301      	str	r3, [sp, #4]
 800947e:	f04f 0300 	mov.w	r3, #0
 8009482:	9300      	str	r3, [sp, #0]
 8009484:	f04f 0300 	mov.w	r3, #0
 8009488:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800948c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8009490:	4839      	ldr	r0, [pc, #228]	; (8009578 <DRV_init+0x198>)
 8009492:	f001 fca7 	bl	800ade4 <PID_init>

  /* Setup motors (with a 0 speed & stopped direction, at this point) */
  MTR_init(&g_DRV_motorFrontRight,
 8009496:	230c      	movs	r3, #12
 8009498:	9303      	str	r3, [sp, #12]
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	9302      	str	r3, [sp, #8]
 800949e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80094a2:	9301      	str	r3, [sp, #4]
 80094a4:	4b35      	ldr	r3, [pc, #212]	; (800957c <DRV_init+0x19c>)
 80094a6:	9300      	str	r3, [sp, #0]
 80094a8:	2304      	movs	r3, #4
 80094aa:	4a35      	ldr	r2, [pc, #212]	; (8009580 <DRV_init+0x1a0>)
 80094ac:	4935      	ldr	r1, [pc, #212]	; (8009584 <DRV_init+0x1a4>)
 80094ae:	4836      	ldr	r0, [pc, #216]	; (8009588 <DRV_init+0x1a8>)
 80094b0:	f001 fba6 	bl	800ac00 <MTR_init>
           MOTOR_FRONT_RIGHT_OUT_2_GPIO_Port,
           MOTOR_FRONT_RIGHT_OUT_2_Pin,
           p_pwmTimerHandle,
           TIM_CHANNEL_4);

  MTR_init(&g_DRV_motorFrontLeft,
 80094b4:	2308      	movs	r3, #8
 80094b6:	9303      	str	r3, [sp, #12]
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	9302      	str	r3, [sp, #8]
 80094bc:	2310      	movs	r3, #16
 80094be:	9301      	str	r3, [sp, #4]
 80094c0:	4b32      	ldr	r3, [pc, #200]	; (800958c <DRV_init+0x1ac>)
 80094c2:	9300      	str	r3, [sp, #0]
 80094c4:	2320      	movs	r3, #32
 80094c6:	4a31      	ldr	r2, [pc, #196]	; (800958c <DRV_init+0x1ac>)
 80094c8:	4931      	ldr	r1, [pc, #196]	; (8009590 <DRV_init+0x1b0>)
 80094ca:	4832      	ldr	r0, [pc, #200]	; (8009594 <DRV_init+0x1b4>)
 80094cc:	f001 fb98 	bl	800ac00 <MTR_init>
           MOTOR_FRONT_LEFT_OUT_2_GPIO_Port,
           MOTOR_FRONT_LEFT_OUT_2_Pin,
           p_pwmTimerHandle,
           TIM_CHANNEL_3);

  MTR_init(&g_DRV_motorRearLeft,
 80094d0:	2304      	movs	r3, #4
 80094d2:	9303      	str	r3, [sp, #12]
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	9302      	str	r3, [sp, #8]
 80094d8:	2320      	movs	r3, #32
 80094da:	9301      	str	r3, [sp, #4]
 80094dc:	4b27      	ldr	r3, [pc, #156]	; (800957c <DRV_init+0x19c>)
 80094de:	9300      	str	r3, [sp, #0]
 80094e0:	2310      	movs	r3, #16
 80094e2:	4a26      	ldr	r2, [pc, #152]	; (800957c <DRV_init+0x19c>)
 80094e4:	492c      	ldr	r1, [pc, #176]	; (8009598 <DRV_init+0x1b8>)
 80094e6:	482d      	ldr	r0, [pc, #180]	; (800959c <DRV_init+0x1bc>)
 80094e8:	f001 fb8a 	bl	800ac00 <MTR_init>
           MOTOR_REAR_LEFT_OUT_2_GPIO_Port,
           MOTOR_REAR_LEFT_OUT_2_Pin,
           p_pwmTimerHandle,
           TIM_CHANNEL_2);

  MTR_init(&g_DRV_motorRearRight,
 80094ec:	2300      	movs	r3, #0
 80094ee:	9303      	str	r3, [sp, #12]
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	9302      	str	r3, [sp, #8]
 80094f4:	2302      	movs	r3, #2
 80094f6:	9301      	str	r3, [sp, #4]
 80094f8:	4b24      	ldr	r3, [pc, #144]	; (800958c <DRV_init+0x1ac>)
 80094fa:	9300      	str	r3, [sp, #0]
 80094fc:	2301      	movs	r3, #1
 80094fe:	4a23      	ldr	r2, [pc, #140]	; (800958c <DRV_init+0x1ac>)
 8009500:	4927      	ldr	r1, [pc, #156]	; (80095a0 <DRV_init+0x1c0>)
 8009502:	4828      	ldr	r0, [pc, #160]	; (80095a4 <DRV_init+0x1c4>)
 8009504:	f001 fb7c 	bl	800ac00 <MTR_init>
           MOTOR_REAR_RIGHT_OUT_2_Pin,
           p_pwmTimerHandle,
           TIM_CHANNEL_1);

  /* Setup encoders */
  ENC_init(&g_DRV_encoderFrontRight, CST_FRONT_RIGHT_MOTOR_NAME, true , p_frontRightEncoderTimerHandle);
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	2201      	movs	r2, #1
 800950c:	491d      	ldr	r1, [pc, #116]	; (8009584 <DRV_init+0x1a4>)
 800950e:	4826      	ldr	r0, [pc, #152]	; (80095a8 <DRV_init+0x1c8>)
 8009510:	f001 f8d6 	bl	800a6c0 <ENC_init>
  ENC_init(&g_DRV_encoderFrontLeft , CST_FRONT_LEFT_MOTOR_NAME , false, p_frontLeftEncoderTimerHandle );
 8009514:	69bb      	ldr	r3, [r7, #24]
 8009516:	2200      	movs	r2, #0
 8009518:	491d      	ldr	r1, [pc, #116]	; (8009590 <DRV_init+0x1b0>)
 800951a:	4824      	ldr	r0, [pc, #144]	; (80095ac <DRV_init+0x1cc>)
 800951c:	f001 f8d0 	bl	800a6c0 <ENC_init>
  ENC_init(&g_DRV_encoderRearLeft  , CST_REAR_LEFT_MOTOR_NAME  , false, p_rearLeftEncoderTimerHandle  );
 8009520:	68bb      	ldr	r3, [r7, #8]
 8009522:	2200      	movs	r2, #0
 8009524:	491c      	ldr	r1, [pc, #112]	; (8009598 <DRV_init+0x1b8>)
 8009526:	4822      	ldr	r0, [pc, #136]	; (80095b0 <DRV_init+0x1d0>)
 8009528:	f001 f8ca 	bl	800a6c0 <ENC_init>
  ENC_init(&g_DRV_encoderRearRight , CST_REAR_RIGHT_MOTOR_NAME , true , p_rearRightEncoderTimerHandle );
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2201      	movs	r2, #1
 8009530:	491b      	ldr	r1, [pc, #108]	; (80095a0 <DRV_init+0x1c0>)
 8009532:	4820      	ldr	r0, [pc, #128]	; (80095b4 <DRV_init+0x1d4>)
 8009534:	f001 f8c4 	bl	800a6c0 <ENC_init>

  /* Setup speed buffers */
  CBU_init(&g_DRV_speedBufferFrontRight);
 8009538:	481f      	ldr	r0, [pc, #124]	; (80095b8 <DRV_init+0x1d8>)
 800953a:	f7ff fe3d 	bl	80091b8 <CBU_init>
  CBU_init(&g_DRV_speedBufferFrontLeft );
 800953e:	481f      	ldr	r0, [pc, #124]	; (80095bc <DRV_init+0x1dc>)
 8009540:	f7ff fe3a 	bl	80091b8 <CBU_init>
  CBU_init(&g_DRV_speedBufferRearLeft  );
 8009544:	481e      	ldr	r0, [pc, #120]	; (80095c0 <DRV_init+0x1e0>)
 8009546:	f7ff fe37 	bl	80091b8 <CBU_init>
  CBU_init(&g_DRV_speedBufferRearRight );
 800954a:	481e      	ldr	r0, [pc, #120]	; (80095c4 <DRV_init+0x1e4>)
 800954c:	f7ff fe34 	bl	80091b8 <CBU_init>

  /* Activate motors by default (de-activating them is used for debug)  */
  g_DRV_areMotorsOn = true;
 8009550:	4b1d      	ldr	r3, [pc, #116]	; (80095c8 <DRV_init+0x1e8>)
 8009552:	2201      	movs	r2, #1
 8009554:	701a      	strb	r2, [r3, #0]

  /* Start with master board control mode */
  g_DRV_mode = STP_DEFAULT_DRIVE_MODE;
 8009556:	4b1d      	ldr	r3, [pc, #116]	; (80095cc <DRV_init+0x1ec>)
 8009558:	2202      	movs	r2, #2
 800955a:	701a      	strb	r2, [r3, #0]

  return;
 800955c:	bf00      	nop
}
 800955e:	3710      	adds	r7, #16
 8009560:	46bd      	mov	sp, r7
 8009562:	bd80      	pop	{r7, pc}
 8009564:	0800eed0 	.word	0x0800eed0
 8009568:	42200000 	.word	0x42200000
 800956c:	20000264 	.word	0x20000264
 8009570:	20000294 	.word	0x20000294
 8009574:	200002c4 	.word	0x200002c4
 8009578:	200002f4 	.word	0x200002f4
 800957c:	40011000 	.word	0x40011000
 8009580:	40011400 	.word	0x40011400
 8009584:	0800eeec 	.word	0x0800eeec
 8009588:	20000324 	.word	0x20000324
 800958c:	40010c00 	.word	0x40010c00
 8009590:	0800eef8 	.word	0x0800eef8
 8009594:	20000348 	.word	0x20000348
 8009598:	0800ef04 	.word	0x0800ef04
 800959c:	2000036c 	.word	0x2000036c
 80095a0:	0800ef10 	.word	0x0800ef10
 80095a4:	20000390 	.word	0x20000390
 80095a8:	200003b4 	.word	0x200003b4
 80095ac:	200003c0 	.word	0x200003c0
 80095b0:	200003cc 	.word	0x200003cc
 80095b4:	200003d8 	.word	0x200003d8
 80095b8:	200003e4 	.word	0x200003e4
 80095bc:	20000414 	.word	0x20000414
 80095c0:	20000444 	.word	0x20000444
 80095c4:	20000474 	.word	0x20000474
 80095c8:	20000261 	.word	0x20000261
 80095cc:	20000262 	.word	0x20000262

080095d0 <DRV_updateEncoder>:

void DRV_updateEncoder(TIM_HandleTypeDef *p_encoderTimerHandle)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b084      	sub	sp, #16
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
  int16_t l_count;

  l_count = __HAL_TIM_GET_COUNTER(p_encoderTimerHandle);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095de:	81fb      	strh	r3, [r7, #14]

  /* Check the handle of the triggering timer and update encoder accordingly */
  if (p_encoderTimerHandle == g_DRV_encoderRearLeft.timerHandle)
 80095e0:	4b19      	ldr	r3, [pc, #100]	; (8009648 <DRV_updateEncoder+0x78>)
 80095e2:	689b      	ldr	r3, [r3, #8]
 80095e4:	687a      	ldr	r2, [r7, #4]
 80095e6:	429a      	cmp	r2, r3
 80095e8:	d106      	bne.n	80095f8 <DRV_updateEncoder+0x28>
  {
    ENC_update(&g_DRV_encoderRearLeft, l_count);
 80095ea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80095ee:	4619      	mov	r1, r3
 80095f0:	4815      	ldr	r0, [pc, #84]	; (8009648 <DRV_updateEncoder+0x78>)
 80095f2:	f001 f896 	bl	800a722 <ENC_update>
  else
  {
    ; /* Nothing to do */
  }

  return;
 80095f6:	e023      	b.n	8009640 <DRV_updateEncoder+0x70>
  else if (p_encoderTimerHandle == g_DRV_encoderRearRight.timerHandle)
 80095f8:	4b14      	ldr	r3, [pc, #80]	; (800964c <DRV_updateEncoder+0x7c>)
 80095fa:	689b      	ldr	r3, [r3, #8]
 80095fc:	687a      	ldr	r2, [r7, #4]
 80095fe:	429a      	cmp	r2, r3
 8009600:	d106      	bne.n	8009610 <DRV_updateEncoder+0x40>
    ENC_update(&g_DRV_encoderRearRight, l_count);
 8009602:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009606:	4619      	mov	r1, r3
 8009608:	4810      	ldr	r0, [pc, #64]	; (800964c <DRV_updateEncoder+0x7c>)
 800960a:	f001 f88a 	bl	800a722 <ENC_update>
  return;
 800960e:	e017      	b.n	8009640 <DRV_updateEncoder+0x70>
  else if (p_encoderTimerHandle == g_DRV_encoderFrontRight.timerHandle)
 8009610:	4b0f      	ldr	r3, [pc, #60]	; (8009650 <DRV_updateEncoder+0x80>)
 8009612:	689b      	ldr	r3, [r3, #8]
 8009614:	687a      	ldr	r2, [r7, #4]
 8009616:	429a      	cmp	r2, r3
 8009618:	d106      	bne.n	8009628 <DRV_updateEncoder+0x58>
    ENC_update(&g_DRV_encoderFrontRight, l_count);
 800961a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800961e:	4619      	mov	r1, r3
 8009620:	480b      	ldr	r0, [pc, #44]	; (8009650 <DRV_updateEncoder+0x80>)
 8009622:	f001 f87e 	bl	800a722 <ENC_update>
  return;
 8009626:	e00b      	b.n	8009640 <DRV_updateEncoder+0x70>
  else if (p_encoderTimerHandle == g_DRV_encoderFrontLeft.timerHandle)
 8009628:	4b0a      	ldr	r3, [pc, #40]	; (8009654 <DRV_updateEncoder+0x84>)
 800962a:	689b      	ldr	r3, [r3, #8]
 800962c:	687a      	ldr	r2, [r7, #4]
 800962e:	429a      	cmp	r2, r3
 8009630:	d106      	bne.n	8009640 <DRV_updateEncoder+0x70>
    ENC_update(&g_DRV_encoderFrontLeft, l_count);
 8009632:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009636:	4619      	mov	r1, r3
 8009638:	4806      	ldr	r0, [pc, #24]	; (8009654 <DRV_updateEncoder+0x84>)
 800963a:	f001 f872 	bl	800a722 <ENC_update>
  return;
 800963e:	bf00      	nop
 8009640:	bf00      	nop
}
 8009642:	3710      	adds	r7, #16
 8009644:	46bd      	mov	sp, r7
 8009646:	bd80      	pop	{r7, pc}
 8009648:	200003cc 	.word	0x200003cc
 800964c:	200003d8 	.word	0x200003d8
 8009650:	200003b4 	.word	0x200003b4
 8009654:	200003c0 	.word	0x200003c0

08009658 <DRV_updateFromBluetooth>:

void DRV_updateFromBluetooth(T_BLU_Data *p_bluetoothData)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b084      	sub	sp, #16
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
  uint32_t l_speed;

  /* Check possible requested mode change */
  switch (p_bluetoothData->button)
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	7c1b      	ldrb	r3, [r3, #16]
 8009664:	3b01      	subs	r3, #1
 8009666:	2b0f      	cmp	r3, #15
 8009668:	d861      	bhi.n	800972e <DRV_updateFromBluetooth+0xd6>
 800966a:	a201      	add	r2, pc, #4	; (adr r2, 8009670 <DRV_updateFromBluetooth+0x18>)
 800966c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009670:	080096f9 	.word	0x080096f9
 8009674:	0800972f 	.word	0x0800972f
 8009678:	0800972f 	.word	0x0800972f
 800967c:	08009711 	.word	0x08009711
 8009680:	0800972f 	.word	0x0800972f
 8009684:	0800972f 	.word	0x0800972f
 8009688:	0800972f 	.word	0x0800972f
 800968c:	0800972f 	.word	0x0800972f
 8009690:	0800972f 	.word	0x0800972f
 8009694:	0800972f 	.word	0x0800972f
 8009698:	0800972f 	.word	0x0800972f
 800969c:	0800972f 	.word	0x0800972f
 80096a0:	0800972f 	.word	0x0800972f
 80096a4:	080096e1 	.word	0x080096e1
 80096a8:	080096c9 	.word	0x080096c9
 80096ac:	080096b1 	.word	0x080096b1
  {
    case BLU_BUTTON_PINK_SQUARE:
      if (g_DRV_mode != DRV_MODE_MANUAL_FIXED_SPEED)
 80096b0:	4b82      	ldr	r3, [pc, #520]	; (80098bc <DRV_updateFromBluetooth+0x264>)
 80096b2:	781b      	ldrb	r3, [r3, #0]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d03c      	beq.n	8009732 <DRV_updateFromBluetooth+0xda>
      {
        LOG_info("Drive mode now DRV_MODE_MANUAL_FIXED_SPEED");
 80096b8:	4981      	ldr	r1, [pc, #516]	; (80098c0 <DRV_updateFromBluetooth+0x268>)
 80096ba:	2001      	movs	r0, #1
 80096bc:	f001 f97e 	bl	800a9bc <LOG_log>
        g_DRV_mode = DRV_MODE_MANUAL_FIXED_SPEED;
 80096c0:	4b7e      	ldr	r3, [pc, #504]	; (80098bc <DRV_updateFromBluetooth+0x264>)
 80096c2:	2200      	movs	r2, #0
 80096c4:	701a      	strb	r2, [r3, #0]
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 80096c6:	e034      	b.n	8009732 <DRV_updateFromBluetooth+0xda>

    case BLU_BUTTON_BLUE_CROSS:
      if (g_DRV_mode != DRV_MODE_MANUAL_VARIABLE_SPEED)
 80096c8:	4b7c      	ldr	r3, [pc, #496]	; (80098bc <DRV_updateFromBluetooth+0x264>)
 80096ca:	781b      	ldrb	r3, [r3, #0]
 80096cc:	2b01      	cmp	r3, #1
 80096ce:	d032      	beq.n	8009736 <DRV_updateFromBluetooth+0xde>
      {
        LOG_info("Drive mode now DRV_MODE_MANUAL_VARIABLE_SPEED");
 80096d0:	497c      	ldr	r1, [pc, #496]	; (80098c4 <DRV_updateFromBluetooth+0x26c>)
 80096d2:	2001      	movs	r0, #1
 80096d4:	f001 f972 	bl	800a9bc <LOG_log>
        g_DRV_mode = DRV_MODE_MANUAL_VARIABLE_SPEED;
 80096d8:	4b78      	ldr	r3, [pc, #480]	; (80098bc <DRV_updateFromBluetooth+0x264>)
 80096da:	2201      	movs	r2, #1
 80096dc:	701a      	strb	r2, [r3, #0]
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 80096de:	e02a      	b.n	8009736 <DRV_updateFromBluetooth+0xde>

    case BLU_BUTTON_RED_CIRCLE:
      if (g_DRV_mode != DRV_MODE_MASTER_BOARD_CONTROL)
 80096e0:	4b76      	ldr	r3, [pc, #472]	; (80098bc <DRV_updateFromBluetooth+0x264>)
 80096e2:	781b      	ldrb	r3, [r3, #0]
 80096e4:	2b02      	cmp	r3, #2
 80096e6:	d028      	beq.n	800973a <DRV_updateFromBluetooth+0xe2>
      {
        LOG_info("Drive mode now DRV_MODE_MASTER_BOARD_CONTROL");
 80096e8:	4977      	ldr	r1, [pc, #476]	; (80098c8 <DRV_updateFromBluetooth+0x270>)
 80096ea:	2001      	movs	r0, #1
 80096ec:	f001 f966 	bl	800a9bc <LOG_log>
        g_DRV_mode = DRV_MODE_MASTER_BOARD_CONTROL;
 80096f0:	4b72      	ldr	r3, [pc, #456]	; (80098bc <DRV_updateFromBluetooth+0x264>)
 80096f2:	2202      	movs	r2, #2
 80096f4:	701a      	strb	r2, [r3, #0]
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 80096f6:	e020      	b.n	800973a <DRV_updateFromBluetooth+0xe2>

    case BLU_BUTTON_SELECT:
      if (g_DRV_areMotorsOn == true)
 80096f8:	4b74      	ldr	r3, [pc, #464]	; (80098cc <DRV_updateFromBluetooth+0x274>)
 80096fa:	781b      	ldrb	r3, [r3, #0]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d01e      	beq.n	800973e <DRV_updateFromBluetooth+0xe6>
      {
        LOG_info("Drive turning motor OFF");
 8009700:	4973      	ldr	r1, [pc, #460]	; (80098d0 <DRV_updateFromBluetooth+0x278>)
 8009702:	2001      	movs	r0, #1
 8009704:	f001 f95a 	bl	800a9bc <LOG_log>
        g_DRV_areMotorsOn = false;
 8009708:	4b70      	ldr	r3, [pc, #448]	; (80098cc <DRV_updateFromBluetooth+0x274>)
 800970a:	2200      	movs	r2, #0
 800970c:	701a      	strb	r2, [r3, #0]
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 800970e:	e016      	b.n	800973e <DRV_updateFromBluetooth+0xe6>

    case BLU_BUTTON_START:
      if (g_DRV_areMotorsOn == false)
 8009710:	4b6e      	ldr	r3, [pc, #440]	; (80098cc <DRV_updateFromBluetooth+0x274>)
 8009712:	781b      	ldrb	r3, [r3, #0]
 8009714:	f083 0301 	eor.w	r3, r3, #1
 8009718:	b2db      	uxtb	r3, r3
 800971a:	2b00      	cmp	r3, #0
 800971c:	d011      	beq.n	8009742 <DRV_updateFromBluetooth+0xea>
      {
        LOG_info("Drive turning motors ON");
 800971e:	496d      	ldr	r1, [pc, #436]	; (80098d4 <DRV_updateFromBluetooth+0x27c>)
 8009720:	2001      	movs	r0, #1
 8009722:	f001 f94b 	bl	800a9bc <LOG_log>
        g_DRV_areMotorsOn = true;
 8009726:	4b69      	ldr	r3, [pc, #420]	; (80098cc <DRV_updateFromBluetooth+0x274>)
 8009728:	2201      	movs	r2, #1
 800972a:	701a      	strb	r2, [r3, #0]
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 800972c:	e009      	b.n	8009742 <DRV_updateFromBluetooth+0xea>

    case BLU_BUTTON_NONE:
    default:
      ; /* Nothing to do */
      break;
 800972e:	bf00      	nop
 8009730:	e008      	b.n	8009744 <DRV_updateFromBluetooth+0xec>
      break;
 8009732:	bf00      	nop
 8009734:	e006      	b.n	8009744 <DRV_updateFromBluetooth+0xec>
      break;
 8009736:	bf00      	nop
 8009738:	e004      	b.n	8009744 <DRV_updateFromBluetooth+0xec>
      break;
 800973a:	bf00      	nop
 800973c:	e002      	b.n	8009744 <DRV_updateFromBluetooth+0xec>
      break;
 800973e:	bf00      	nop
 8009740:	e000      	b.n	8009744 <DRV_updateFromBluetooth+0xec>
      break;
 8009742:	bf00      	nop
  }

  /* Master board control mode is an automated mode, so that we will */
  /* ignore any direction/button press received via bluetooth.       */
  if (g_DRV_mode == DRV_MODE_MASTER_BOARD_CONTROL)
 8009744:	4b5d      	ldr	r3, [pc, #372]	; (80098bc <DRV_updateFromBluetooth+0x264>)
 8009746:	781b      	ldrb	r3, [r3, #0]
 8009748:	2b02      	cmp	r3, #2
 800974a:	f000 80b3 	beq.w	80098b4 <DRV_updateFromBluetooth+0x25c>
    ; /* Nothing to do */
  }
  /* Manual mode, applying directions received by bluetooth */
  else
  {
    if (p_bluetoothData->leftY > STP_JOYSTICKS_THRESHOLD)
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	685b      	ldr	r3, [r3, #4]
 8009752:	2b0a      	cmp	r3, #10
 8009754:	dd0c      	ble.n	8009770 <DRV_updateFromBluetooth+0x118>
    {
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? STP_JOYSTICKS_FIXED_SPEED : p_bluetoothData->leftY;
 8009756:	4b59      	ldr	r3, [pc, #356]	; (80098bc <DRV_updateFromBluetooth+0x264>)
 8009758:	781b      	ldrb	r3, [r3, #0]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d002      	beq.n	8009764 <DRV_updateFromBluetooth+0x10c>
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	685b      	ldr	r3, [r3, #4]
 8009762:	e000      	b.n	8009766 <DRV_updateFromBluetooth+0x10e>
 8009764:	2314      	movs	r3, #20
 8009766:	60fb      	str	r3, [r7, #12]

      DRV_moveForward(l_speed);
 8009768:	68f8      	ldr	r0, [r7, #12]
 800976a:	f000 fd8d 	bl	800a288 <DRV_moveForward>
      /* Most of the time, we will get here */
      DRV_stop();
    }
  }

  return;
 800976e:	e0a1      	b.n	80098b4 <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->rightY > STP_JOYSTICKS_THRESHOLD)
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	68db      	ldr	r3, [r3, #12]
 8009774:	2b0a      	cmp	r3, #10
 8009776:	dd0c      	ble.n	8009792 <DRV_updateFromBluetooth+0x13a>
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? STP_JOYSTICKS_FIXED_SPEED : p_bluetoothData->rightY;
 8009778:	4b50      	ldr	r3, [pc, #320]	; (80098bc <DRV_updateFromBluetooth+0x264>)
 800977a:	781b      	ldrb	r3, [r3, #0]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d002      	beq.n	8009786 <DRV_updateFromBluetooth+0x12e>
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	68db      	ldr	r3, [r3, #12]
 8009784:	e000      	b.n	8009788 <DRV_updateFromBluetooth+0x130>
 8009786:	2314      	movs	r3, #20
 8009788:	60fb      	str	r3, [r7, #12]
      DRV_moveForward(l_speed);
 800978a:	68f8      	ldr	r0, [r7, #12]
 800978c:	f000 fd7c 	bl	800a288 <DRV_moveForward>
  return;
 8009790:	e090      	b.n	80098b4 <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->leftY < -STP_JOYSTICKS_THRESHOLD)
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	685b      	ldr	r3, [r3, #4]
 8009796:	f113 0f0a 	cmn.w	r3, #10
 800979a:	da0d      	bge.n	80097b8 <DRV_updateFromBluetooth+0x160>
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? STP_JOYSTICKS_FIXED_SPEED : -p_bluetoothData->leftY;
 800979c:	4b47      	ldr	r3, [pc, #284]	; (80098bc <DRV_updateFromBluetooth+0x264>)
 800979e:	781b      	ldrb	r3, [r3, #0]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d003      	beq.n	80097ac <DRV_updateFromBluetooth+0x154>
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	685b      	ldr	r3, [r3, #4]
 80097a8:	425b      	negs	r3, r3
 80097aa:	e000      	b.n	80097ae <DRV_updateFromBluetooth+0x156>
 80097ac:	2314      	movs	r3, #20
 80097ae:	60fb      	str	r3, [r7, #12]
      DRV_moveBackward(l_speed);
 80097b0:	68f8      	ldr	r0, [r7, #12]
 80097b2:	f000 fd9f 	bl	800a2f4 <DRV_moveBackward>
  return;
 80097b6:	e07d      	b.n	80098b4 <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->rightY < -STP_JOYSTICKS_THRESHOLD)
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	68db      	ldr	r3, [r3, #12]
 80097bc:	f113 0f0a 	cmn.w	r3, #10
 80097c0:	da0d      	bge.n	80097de <DRV_updateFromBluetooth+0x186>
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? STP_JOYSTICKS_FIXED_SPEED : -p_bluetoothData->rightY;
 80097c2:	4b3e      	ldr	r3, [pc, #248]	; (80098bc <DRV_updateFromBluetooth+0x264>)
 80097c4:	781b      	ldrb	r3, [r3, #0]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d003      	beq.n	80097d2 <DRV_updateFromBluetooth+0x17a>
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	68db      	ldr	r3, [r3, #12]
 80097ce:	425b      	negs	r3, r3
 80097d0:	e000      	b.n	80097d4 <DRV_updateFromBluetooth+0x17c>
 80097d2:	2314      	movs	r3, #20
 80097d4:	60fb      	str	r3, [r7, #12]
      DRV_moveBackward(l_speed);
 80097d6:	68f8      	ldr	r0, [r7, #12]
 80097d8:	f000 fd8c 	bl	800a2f4 <DRV_moveBackward>
  return;
 80097dc:	e06a      	b.n	80098b4 <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->leftX < -STP_JOYSTICKS_THRESHOLD)
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f113 0f0a 	cmn.w	r3, #10
 80097e6:	da0d      	bge.n	8009804 <DRV_updateFromBluetooth+0x1ac>
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? STP_JOYSTICKS_FIXED_SPEED : -p_bluetoothData->leftX;
 80097e8:	4b34      	ldr	r3, [pc, #208]	; (80098bc <DRV_updateFromBluetooth+0x264>)
 80097ea:	781b      	ldrb	r3, [r3, #0]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d003      	beq.n	80097f8 <DRV_updateFromBluetooth+0x1a0>
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	425b      	negs	r3, r3
 80097f6:	e000      	b.n	80097fa <DRV_updateFromBluetooth+0x1a2>
 80097f8:	2314      	movs	r3, #20
 80097fa:	60fb      	str	r3, [r7, #12]
      DRV_turnLeft(l_speed);
 80097fc:	68f8      	ldr	r0, [r7, #12]
 80097fe:	f000 fe87 	bl	800a510 <DRV_turnLeft>
  return;
 8009802:	e057      	b.n	80098b4 <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->leftX > STP_JOYSTICKS_THRESHOLD)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	2b0a      	cmp	r3, #10
 800980a:	dd0c      	ble.n	8009826 <DRV_updateFromBluetooth+0x1ce>
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? STP_JOYSTICKS_FIXED_SPEED : p_bluetoothData->leftX;
 800980c:	4b2b      	ldr	r3, [pc, #172]	; (80098bc <DRV_updateFromBluetooth+0x264>)
 800980e:	781b      	ldrb	r3, [r3, #0]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d002      	beq.n	800981a <DRV_updateFromBluetooth+0x1c2>
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	e000      	b.n	800981c <DRV_updateFromBluetooth+0x1c4>
 800981a:	2314      	movs	r3, #20
 800981c:	60fb      	str	r3, [r7, #12]
      DRV_turnRight(l_speed);
 800981e:	68f8      	ldr	r0, [r7, #12]
 8009820:	f000 feac 	bl	800a57c <DRV_turnRight>
  return;
 8009824:	e046      	b.n	80098b4 <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->rightX < -STP_JOYSTICKS_THRESHOLD)
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	689b      	ldr	r3, [r3, #8]
 800982a:	f113 0f0a 	cmn.w	r3, #10
 800982e:	da0d      	bge.n	800984c <DRV_updateFromBluetooth+0x1f4>
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? STP_JOYSTICKS_FIXED_SPEED : -p_bluetoothData->rightX;
 8009830:	4b22      	ldr	r3, [pc, #136]	; (80098bc <DRV_updateFromBluetooth+0x264>)
 8009832:	781b      	ldrb	r3, [r3, #0]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d003      	beq.n	8009840 <DRV_updateFromBluetooth+0x1e8>
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	689b      	ldr	r3, [r3, #8]
 800983c:	425b      	negs	r3, r3
 800983e:	e000      	b.n	8009842 <DRV_updateFromBluetooth+0x1ea>
 8009840:	2314      	movs	r3, #20
 8009842:	60fb      	str	r3, [r7, #12]
      DRV_translateLeft(l_speed);
 8009844:	68f8      	ldr	r0, [r7, #12]
 8009846:	f000 fecf 	bl	800a5e8 <DRV_translateLeft>
  return;
 800984a:	e033      	b.n	80098b4 <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->rightX > STP_JOYSTICKS_THRESHOLD)
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	689b      	ldr	r3, [r3, #8]
 8009850:	2b0a      	cmp	r3, #10
 8009852:	dd0c      	ble.n	800986e <DRV_updateFromBluetooth+0x216>
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? STP_JOYSTICKS_FIXED_SPEED : p_bluetoothData->rightX;
 8009854:	4b19      	ldr	r3, [pc, #100]	; (80098bc <DRV_updateFromBluetooth+0x264>)
 8009856:	781b      	ldrb	r3, [r3, #0]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d002      	beq.n	8009862 <DRV_updateFromBluetooth+0x20a>
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	689b      	ldr	r3, [r3, #8]
 8009860:	e000      	b.n	8009864 <DRV_updateFromBluetooth+0x20c>
 8009862:	2314      	movs	r3, #20
 8009864:	60fb      	str	r3, [r7, #12]
      DRV_translateRight(l_speed);
 8009866:	68f8      	ldr	r0, [r7, #12]
 8009868:	f000 fef4 	bl	800a654 <DRV_translateRight>
  return;
 800986c:	e022      	b.n	80098b4 <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->button == BLU_BUTTON_L1)
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	7c1b      	ldrb	r3, [r3, #16]
 8009872:	2b0b      	cmp	r3, #11
 8009874:	d103      	bne.n	800987e <DRV_updateFromBluetooth+0x226>
      DRV_moveForwardLeft(STP_BUTTONS_FIXED_SPEED);
 8009876:	2028      	movs	r0, #40	; 0x28
 8009878:	f000 fda8 	bl	800a3cc <DRV_moveForwardLeft>
  return;
 800987c:	e01a      	b.n	80098b4 <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->button == BLU_BUTTON_L2)
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	7c1b      	ldrb	r3, [r3, #16]
 8009882:	2b09      	cmp	r3, #9
 8009884:	d103      	bne.n	800988e <DRV_updateFromBluetooth+0x236>
      DRV_moveBackwardRight(STP_BUTTONS_FIXED_SPEED);
 8009886:	2028      	movs	r0, #40	; 0x28
 8009888:	f000 fdd6 	bl	800a438 <DRV_moveBackwardRight>
  return;
 800988c:	e012      	b.n	80098b4 <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->button == BLU_BUTTON_R1)
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	7c1b      	ldrb	r3, [r3, #16]
 8009892:	2b0c      	cmp	r3, #12
 8009894:	d103      	bne.n	800989e <DRV_updateFromBluetooth+0x246>
      DRV_moveForwardRight(STP_BUTTONS_FIXED_SPEED);
 8009896:	2028      	movs	r0, #40	; 0x28
 8009898:	f000 fd62 	bl	800a360 <DRV_moveForwardRight>
  return;
 800989c:	e00a      	b.n	80098b4 <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->button == BLU_BUTTON_R2)
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	7c1b      	ldrb	r3, [r3, #16]
 80098a2:	2b0a      	cmp	r3, #10
 80098a4:	d103      	bne.n	80098ae <DRV_updateFromBluetooth+0x256>
      DRV_moveBackwardLeft(STP_BUTTONS_FIXED_SPEED);
 80098a6:	2028      	movs	r0, #40	; 0x28
 80098a8:	f000 fdfc 	bl	800a4a4 <DRV_moveBackwardLeft>
  return;
 80098ac:	e002      	b.n	80098b4 <DRV_updateFromBluetooth+0x25c>
      DRV_stop();
 80098ae:	f000 fccd 	bl	800a24c <DRV_stop>
  return;
 80098b2:	bf00      	nop
 80098b4:	bf00      	nop
}
 80098b6:	3710      	adds	r7, #16
 80098b8:	46bd      	mov	sp, r7
 80098ba:	bd80      	pop	{r7, pc}
 80098bc:	20000262 	.word	0x20000262
 80098c0:	0800ef1c 	.word	0x0800ef1c
 80098c4:	0800ef48 	.word	0x0800ef48
 80098c8:	0800ef78 	.word	0x0800ef78
 80098cc:	20000261 	.word	0x20000261
 80098d0:	0800efa8 	.word	0x0800efa8
 80098d4:	0800efc0 	.word	0x0800efc0

080098d8 <DRV_updateFromCommands>:

void DRV_updateFromCommands(T_SFO_Context *p_commandsFifo, uint32_t p_deltaTimeInMs, bool p_logInfo)
{
 80098d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098da:	b099      	sub	sp, #100	; 0x64
 80098dc:	af02      	add	r7, sp, #8
 80098de:	60f8      	str	r0, [r7, #12]
 80098e0:	60b9      	str	r1, [r7, #8]
 80098e2:	4613      	mov	r3, r2
 80098e4:	71fb      	strb	r3, [r7, #7]
  float      l_pidSpeedRearLeft;
  T_SFO_data l_command;
  int32_t    l_speed;

  /* Ignore master board data only whenever a manual mode is selected */
  if (g_DRV_mode != DRV_MODE_MASTER_BOARD_CONTROL)
 80098e6:	4ba6      	ldr	r3, [pc, #664]	; (8009b80 <DRV_updateFromCommands+0x2a8>)
 80098e8:	781b      	ldrb	r3, [r3, #0]
 80098ea:	2b02      	cmp	r3, #2
 80098ec:	f040 82d3 	bne.w	8009e96 <DRV_updateFromCommands+0x5be>
  }
  else
  {
    /* Deal with only one command per cycle. If a FIFO overflow occurs, */
    /* FIFO string will report an error, showing us a design issue...   */
    if (SFO_getCount(p_commandsFifo) != 0)
 80098f0:	68f8      	ldr	r0, [r7, #12]
 80098f2:	f001 fce7 	bl	800b2c4 <SFO_getCount>
 80098f6:	4603      	mov	r3, r0
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	f000 81ea 	beq.w	8009cd2 <DRV_updateFromCommands+0x3fa>
    {
      SFO_logInfo(p_commandsFifo);
 80098fe:	68f8      	ldr	r0, [r7, #12]
 8009900:	f001 fcec 	bl	800b2dc <SFO_logInfo>
      SFO_pop    (p_commandsFifo         , &l_command);
 8009904:	f107 0314 	add.w	r3, r7, #20
 8009908:	4619      	mov	r1, r3
 800990a:	68f8      	ldr	r0, [r7, #12]
 800990c:	f001 fc9a 	bl	800b244 <SFO_pop>
      LOG_info   ("Drive got command: %s",  l_command);
 8009910:	f107 0314 	add.w	r3, r7, #20
 8009914:	461a      	mov	r2, r3
 8009916:	499b      	ldr	r1, [pc, #620]	; (8009b84 <DRV_updateFromCommands+0x2ac>)
 8009918:	2001      	movs	r0, #1
 800991a:	f001 f84f 	bl	800a9bc <LOG_log>

      l_speed = atoi(&l_command[2]);
 800991e:	f107 0314 	add.w	r3, r7, #20
 8009922:	3302      	adds	r3, #2
 8009924:	4618      	mov	r0, r3
 8009926:	f001 fe1f 	bl	800b568 <atoi>
 800992a:	6578      	str	r0, [r7, #84]	; 0x54

      /* Check that speed is in allowed range */
      if ((l_speed < STP_MASTER_MIN_SPEED) || (l_speed > STP_MASTER_MAX_SPEED))
 800992c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800992e:	2b00      	cmp	r3, #0
 8009930:	db02      	blt.n	8009938 <DRV_updateFromCommands+0x60>
 8009932:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009934:	2b64      	cmp	r3, #100	; 0x64
 8009936:	dd05      	ble.n	8009944 <DRV_updateFromCommands+0x6c>
      {
        LOG_error("Drive got out of range speed: %d", l_speed);
 8009938:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800993a:	4993      	ldr	r1, [pc, #588]	; (8009b88 <DRV_updateFromCommands+0x2b0>)
 800993c:	2003      	movs	r0, #3
 800993e:	f001 f83d 	bl	800a9bc <LOG_log>
 8009942:	e1c6      	b.n	8009cd2 <DRV_updateFromCommands+0x3fa>
      }
      else
      {
        l_speed = UTI_normalizeIntValue(l_speed ,
 8009944:	2300      	movs	r3, #0
 8009946:	9301      	str	r3, [sp, #4]
 8009948:	2328      	movs	r3, #40	; 0x28
 800994a:	9300      	str	r3, [sp, #0]
 800994c:	2300      	movs	r3, #0
 800994e:	2264      	movs	r2, #100	; 0x64
 8009950:	2100      	movs	r1, #0
 8009952:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009954:	f001 fdb9 	bl	800b4ca <UTI_normalizeIntValue>
 8009958:	6578      	str	r0, [r7, #84]	; 0x54
                                        STP_DRIVE_MIN_SPEED,
                                        STP_DRIVE_MAX_SPEED,
                                        false);

        /* Stop */
        if ((l_command[0] == 'S') && (l_command[1] == 'T'))
 800995a:	7d3b      	ldrb	r3, [r7, #20]
 800995c:	2b53      	cmp	r3, #83	; 0x53
 800995e:	d119      	bne.n	8009994 <DRV_updateFromCommands+0xbc>
 8009960:	7d7b      	ldrb	r3, [r7, #21]
 8009962:	2b54      	cmp	r3, #84	; 0x54
 8009964:	d116      	bne.n	8009994 <DRV_updateFromCommands+0xbc>
        {
          DRV_setDirectionsStop();
 8009966:	f000 fb6d 	bl	800a044 <DRV_setDirectionsStop>

          PID_setTargetValue(&g_DRV_pidFrontRight, 0);
 800996a:	f04f 0100 	mov.w	r1, #0
 800996e:	4887      	ldr	r0, [pc, #540]	; (8009b8c <DRV_updateFromCommands+0x2b4>)
 8009970:	f001 fab7 	bl	800aee2 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidFrontLeft , 0);
 8009974:	f04f 0100 	mov.w	r1, #0
 8009978:	4885      	ldr	r0, [pc, #532]	; (8009b90 <DRV_updateFromCommands+0x2b8>)
 800997a:	f001 fab2 	bl	800aee2 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidRearRight , 0);
 800997e:	f04f 0100 	mov.w	r1, #0
 8009982:	4884      	ldr	r0, [pc, #528]	; (8009b94 <DRV_updateFromCommands+0x2bc>)
 8009984:	f001 faad 	bl	800aee2 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidRearLeft  , 0);
 8009988:	f04f 0100 	mov.w	r1, #0
 800998c:	4882      	ldr	r0, [pc, #520]	; (8009b98 <DRV_updateFromCommands+0x2c0>)
 800998e:	f001 faa8 	bl	800aee2 <PID_setTargetValue>
 8009992:	e19e      	b.n	8009cd2 <DRV_updateFromCommands+0x3fa>
        }
        /* Forward Straight */
        else if ((l_command[0] == 'F') && (l_command[1] == 'S'))
 8009994:	7d3b      	ldrb	r3, [r7, #20]
 8009996:	2b46      	cmp	r3, #70	; 0x46
 8009998:	d125      	bne.n	80099e6 <DRV_updateFromCommands+0x10e>
 800999a:	7d7b      	ldrb	r3, [r7, #21]
 800999c:	2b53      	cmp	r3, #83	; 0x53
 800999e:	d122      	bne.n	80099e6 <DRV_updateFromCommands+0x10e>
        {
          DRV_setDirectionsForward();
 80099a0:	f000 fb6c 	bl	800a07c <DRV_setDirectionsForward>

          PID_setTargetValue(&g_DRV_pidFrontRight, l_speed);
 80099a4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80099a6:	f7f7 f995 	bl	8000cd4 <__aeabi_i2f>
 80099aa:	4603      	mov	r3, r0
 80099ac:	4619      	mov	r1, r3
 80099ae:	4877      	ldr	r0, [pc, #476]	; (8009b8c <DRV_updateFromCommands+0x2b4>)
 80099b0:	f001 fa97 	bl	800aee2 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidFrontLeft , l_speed);
 80099b4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80099b6:	f7f7 f98d 	bl	8000cd4 <__aeabi_i2f>
 80099ba:	4603      	mov	r3, r0
 80099bc:	4619      	mov	r1, r3
 80099be:	4874      	ldr	r0, [pc, #464]	; (8009b90 <DRV_updateFromCommands+0x2b8>)
 80099c0:	f001 fa8f 	bl	800aee2 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidRearRight , l_speed);
 80099c4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80099c6:	f7f7 f985 	bl	8000cd4 <__aeabi_i2f>
 80099ca:	4603      	mov	r3, r0
 80099cc:	4619      	mov	r1, r3
 80099ce:	4871      	ldr	r0, [pc, #452]	; (8009b94 <DRV_updateFromCommands+0x2bc>)
 80099d0:	f001 fa87 	bl	800aee2 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidRearLeft  , l_speed);
 80099d4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80099d6:	f7f7 f97d 	bl	8000cd4 <__aeabi_i2f>
 80099da:	4603      	mov	r3, r0
 80099dc:	4619      	mov	r1, r3
 80099de:	486e      	ldr	r0, [pc, #440]	; (8009b98 <DRV_updateFromCommands+0x2c0>)
 80099e0:	f001 fa7f 	bl	800aee2 <PID_setTargetValue>
 80099e4:	e175      	b.n	8009cd2 <DRV_updateFromCommands+0x3fa>
        }
        /* Move Backward */
        else if ((l_command[0] == 'B') && (l_command[1] == 'S'))
 80099e6:	7d3b      	ldrb	r3, [r7, #20]
 80099e8:	2b42      	cmp	r3, #66	; 0x42
 80099ea:	d125      	bne.n	8009a38 <DRV_updateFromCommands+0x160>
 80099ec:	7d7b      	ldrb	r3, [r7, #21]
 80099ee:	2b53      	cmp	r3, #83	; 0x53
 80099f0:	d122      	bne.n	8009a38 <DRV_updateFromCommands+0x160>
        {
          DRV_setDirectionsBackward();
 80099f2:	f000 fb5f 	bl	800a0b4 <DRV_setDirectionsBackward>

          PID_setTargetValue(&g_DRV_pidFrontRight, l_speed);
 80099f6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80099f8:	f7f7 f96c 	bl	8000cd4 <__aeabi_i2f>
 80099fc:	4603      	mov	r3, r0
 80099fe:	4619      	mov	r1, r3
 8009a00:	4862      	ldr	r0, [pc, #392]	; (8009b8c <DRV_updateFromCommands+0x2b4>)
 8009a02:	f001 fa6e 	bl	800aee2 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidFrontLeft , l_speed);
 8009a06:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009a08:	f7f7 f964 	bl	8000cd4 <__aeabi_i2f>
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	4619      	mov	r1, r3
 8009a10:	485f      	ldr	r0, [pc, #380]	; (8009b90 <DRV_updateFromCommands+0x2b8>)
 8009a12:	f001 fa66 	bl	800aee2 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidRearRight , l_speed);
 8009a16:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009a18:	f7f7 f95c 	bl	8000cd4 <__aeabi_i2f>
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	4619      	mov	r1, r3
 8009a20:	485c      	ldr	r0, [pc, #368]	; (8009b94 <DRV_updateFromCommands+0x2bc>)
 8009a22:	f001 fa5e 	bl	800aee2 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidRearLeft  , l_speed);
 8009a26:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009a28:	f7f7 f954 	bl	8000cd4 <__aeabi_i2f>
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	4619      	mov	r1, r3
 8009a30:	4859      	ldr	r0, [pc, #356]	; (8009b98 <DRV_updateFromCommands+0x2c0>)
 8009a32:	f001 fa56 	bl	800aee2 <PID_setTargetValue>
 8009a36:	e14c      	b.n	8009cd2 <DRV_updateFromCommands+0x3fa>
        }
        /* TurN (i.e. Rotate) Left */
        else if ((l_command[0] == 'R') && (l_command[1] == 'L'))
 8009a38:	7d3b      	ldrb	r3, [r7, #20]
 8009a3a:	2b52      	cmp	r3, #82	; 0x52
 8009a3c:	d125      	bne.n	8009a8a <DRV_updateFromCommands+0x1b2>
 8009a3e:	7d7b      	ldrb	r3, [r7, #21]
 8009a40:	2b4c      	cmp	r3, #76	; 0x4c
 8009a42:	d122      	bne.n	8009a8a <DRV_updateFromCommands+0x1b2>
        {
          DRV_setDirectionsTurnLeft();
 8009a44:	f000 fb92 	bl	800a16c <DRV_setDirectionsTurnLeft>

          PID_setTargetValue(&g_DRV_pidFrontRight, l_speed);
 8009a48:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009a4a:	f7f7 f943 	bl	8000cd4 <__aeabi_i2f>
 8009a4e:	4603      	mov	r3, r0
 8009a50:	4619      	mov	r1, r3
 8009a52:	484e      	ldr	r0, [pc, #312]	; (8009b8c <DRV_updateFromCommands+0x2b4>)
 8009a54:	f001 fa45 	bl	800aee2 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidFrontLeft , l_speed);
 8009a58:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009a5a:	f7f7 f93b 	bl	8000cd4 <__aeabi_i2f>
 8009a5e:	4603      	mov	r3, r0
 8009a60:	4619      	mov	r1, r3
 8009a62:	484b      	ldr	r0, [pc, #300]	; (8009b90 <DRV_updateFromCommands+0x2b8>)
 8009a64:	f001 fa3d 	bl	800aee2 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidRearRight , l_speed);
 8009a68:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009a6a:	f7f7 f933 	bl	8000cd4 <__aeabi_i2f>
 8009a6e:	4603      	mov	r3, r0
 8009a70:	4619      	mov	r1, r3
 8009a72:	4848      	ldr	r0, [pc, #288]	; (8009b94 <DRV_updateFromCommands+0x2bc>)
 8009a74:	f001 fa35 	bl	800aee2 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidRearLeft  , l_speed);
 8009a78:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009a7a:	f7f7 f92b 	bl	8000cd4 <__aeabi_i2f>
 8009a7e:	4603      	mov	r3, r0
 8009a80:	4619      	mov	r1, r3
 8009a82:	4845      	ldr	r0, [pc, #276]	; (8009b98 <DRV_updateFromCommands+0x2c0>)
 8009a84:	f001 fa2d 	bl	800aee2 <PID_setTargetValue>
 8009a88:	e123      	b.n	8009cd2 <DRV_updateFromCommands+0x3fa>
        }
        /* TurN (i.e. Rotate) Right */
        else if ((l_command[0] == 'R') && (l_command[1] == 'R'))
 8009a8a:	7d3b      	ldrb	r3, [r7, #20]
 8009a8c:	2b52      	cmp	r3, #82	; 0x52
 8009a8e:	d125      	bne.n	8009adc <DRV_updateFromCommands+0x204>
 8009a90:	7d7b      	ldrb	r3, [r7, #21]
 8009a92:	2b52      	cmp	r3, #82	; 0x52
 8009a94:	d122      	bne.n	8009adc <DRV_updateFromCommands+0x204>
        {
          DRV_setDirectionsTurnRight();
 8009a96:	f000 fb85 	bl	800a1a4 <DRV_setDirectionsTurnRight>

          PID_setTargetValue(&g_DRV_pidFrontRight, l_speed);
 8009a9a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009a9c:	f7f7 f91a 	bl	8000cd4 <__aeabi_i2f>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	4619      	mov	r1, r3
 8009aa4:	4839      	ldr	r0, [pc, #228]	; (8009b8c <DRV_updateFromCommands+0x2b4>)
 8009aa6:	f001 fa1c 	bl	800aee2 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidFrontLeft , l_speed);
 8009aaa:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009aac:	f7f7 f912 	bl	8000cd4 <__aeabi_i2f>
 8009ab0:	4603      	mov	r3, r0
 8009ab2:	4619      	mov	r1, r3
 8009ab4:	4836      	ldr	r0, [pc, #216]	; (8009b90 <DRV_updateFromCommands+0x2b8>)
 8009ab6:	f001 fa14 	bl	800aee2 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidRearRight , l_speed);
 8009aba:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009abc:	f7f7 f90a 	bl	8000cd4 <__aeabi_i2f>
 8009ac0:	4603      	mov	r3, r0
 8009ac2:	4619      	mov	r1, r3
 8009ac4:	4833      	ldr	r0, [pc, #204]	; (8009b94 <DRV_updateFromCommands+0x2bc>)
 8009ac6:	f001 fa0c 	bl	800aee2 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidRearLeft  , l_speed);
 8009aca:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009acc:	f7f7 f902 	bl	8000cd4 <__aeabi_i2f>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	4619      	mov	r1, r3
 8009ad4:	4830      	ldr	r0, [pc, #192]	; (8009b98 <DRV_updateFromCommands+0x2c0>)
 8009ad6:	f001 fa04 	bl	800aee2 <PID_setTargetValue>
 8009ada:	e0fa      	b.n	8009cd2 <DRV_updateFromCommands+0x3fa>
        }
        /* Translate Left */
        else if ((l_command[0] == 'T') && (l_command[1] == 'L'))
 8009adc:	7d3b      	ldrb	r3, [r7, #20]
 8009ade:	2b54      	cmp	r3, #84	; 0x54
 8009ae0:	d125      	bne.n	8009b2e <DRV_updateFromCommands+0x256>
 8009ae2:	7d7b      	ldrb	r3, [r7, #21]
 8009ae4:	2b4c      	cmp	r3, #76	; 0x4c
 8009ae6:	d122      	bne.n	8009b2e <DRV_updateFromCommands+0x256>
        {
          DRV_setDirectionsTranslateLeft();
 8009ae8:	f000 fb78 	bl	800a1dc <DRV_setDirectionsTranslateLeft>

          PID_setTargetValue(&g_DRV_pidFrontRight, l_speed);
 8009aec:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009aee:	f7f7 f8f1 	bl	8000cd4 <__aeabi_i2f>
 8009af2:	4603      	mov	r3, r0
 8009af4:	4619      	mov	r1, r3
 8009af6:	4825      	ldr	r0, [pc, #148]	; (8009b8c <DRV_updateFromCommands+0x2b4>)
 8009af8:	f001 f9f3 	bl	800aee2 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidFrontLeft , l_speed);
 8009afc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009afe:	f7f7 f8e9 	bl	8000cd4 <__aeabi_i2f>
 8009b02:	4603      	mov	r3, r0
 8009b04:	4619      	mov	r1, r3
 8009b06:	4822      	ldr	r0, [pc, #136]	; (8009b90 <DRV_updateFromCommands+0x2b8>)
 8009b08:	f001 f9eb 	bl	800aee2 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidRearRight , l_speed);
 8009b0c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009b0e:	f7f7 f8e1 	bl	8000cd4 <__aeabi_i2f>
 8009b12:	4603      	mov	r3, r0
 8009b14:	4619      	mov	r1, r3
 8009b16:	481f      	ldr	r0, [pc, #124]	; (8009b94 <DRV_updateFromCommands+0x2bc>)
 8009b18:	f001 f9e3 	bl	800aee2 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidRearLeft  , l_speed);
 8009b1c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009b1e:	f7f7 f8d9 	bl	8000cd4 <__aeabi_i2f>
 8009b22:	4603      	mov	r3, r0
 8009b24:	4619      	mov	r1, r3
 8009b26:	481c      	ldr	r0, [pc, #112]	; (8009b98 <DRV_updateFromCommands+0x2c0>)
 8009b28:	f001 f9db 	bl	800aee2 <PID_setTargetValue>
 8009b2c:	e0d1      	b.n	8009cd2 <DRV_updateFromCommands+0x3fa>
        }
        /* Translate Right */
        else if ((l_command[0] == 'T') && (l_command[1] == 'R'))
 8009b2e:	7d3b      	ldrb	r3, [r7, #20]
 8009b30:	2b54      	cmp	r3, #84	; 0x54
 8009b32:	d133      	bne.n	8009b9c <DRV_updateFromCommands+0x2c4>
 8009b34:	7d7b      	ldrb	r3, [r7, #21]
 8009b36:	2b52      	cmp	r3, #82	; 0x52
 8009b38:	d130      	bne.n	8009b9c <DRV_updateFromCommands+0x2c4>
        {
          DRV_setDirectionsTranslateRight();
 8009b3a:	f000 fb6b 	bl	800a214 <DRV_setDirectionsTranslateRight>

          PID_setTargetValue(&g_DRV_pidFrontRight, l_speed);
 8009b3e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009b40:	f7f7 f8c8 	bl	8000cd4 <__aeabi_i2f>
 8009b44:	4603      	mov	r3, r0
 8009b46:	4619      	mov	r1, r3
 8009b48:	4810      	ldr	r0, [pc, #64]	; (8009b8c <DRV_updateFromCommands+0x2b4>)
 8009b4a:	f001 f9ca 	bl	800aee2 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidFrontLeft , l_speed);
 8009b4e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009b50:	f7f7 f8c0 	bl	8000cd4 <__aeabi_i2f>
 8009b54:	4603      	mov	r3, r0
 8009b56:	4619      	mov	r1, r3
 8009b58:	480d      	ldr	r0, [pc, #52]	; (8009b90 <DRV_updateFromCommands+0x2b8>)
 8009b5a:	f001 f9c2 	bl	800aee2 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidRearRight , l_speed);
 8009b5e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009b60:	f7f7 f8b8 	bl	8000cd4 <__aeabi_i2f>
 8009b64:	4603      	mov	r3, r0
 8009b66:	4619      	mov	r1, r3
 8009b68:	480a      	ldr	r0, [pc, #40]	; (8009b94 <DRV_updateFromCommands+0x2bc>)
 8009b6a:	f001 f9ba 	bl	800aee2 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidRearLeft  , l_speed);
 8009b6e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009b70:	f7f7 f8b0 	bl	8000cd4 <__aeabi_i2f>
 8009b74:	4603      	mov	r3, r0
 8009b76:	4619      	mov	r1, r3
 8009b78:	4807      	ldr	r0, [pc, #28]	; (8009b98 <DRV_updateFromCommands+0x2c0>)
 8009b7a:	f001 f9b2 	bl	800aee2 <PID_setTargetValue>
 8009b7e:	e0a8      	b.n	8009cd2 <DRV_updateFromCommands+0x3fa>
 8009b80:	20000262 	.word	0x20000262
 8009b84:	0800efd8 	.word	0x0800efd8
 8009b88:	0800eff0 	.word	0x0800eff0
 8009b8c:	20000264 	.word	0x20000264
 8009b90:	20000294 	.word	0x20000294
 8009b94:	200002f4 	.word	0x200002f4
 8009b98:	200002c4 	.word	0x200002c4
        }
        /* Forward Left */
        else if ((l_command[0] == 'F') && (l_command[1] == 'L'))
 8009b9c:	7d3b      	ldrb	r3, [r7, #20]
 8009b9e:	2b46      	cmp	r3, #70	; 0x46
 8009ba0:	d11f      	bne.n	8009be2 <DRV_updateFromCommands+0x30a>
 8009ba2:	7d7b      	ldrb	r3, [r7, #21]
 8009ba4:	2b4c      	cmp	r3, #76	; 0x4c
 8009ba6:	d11c      	bne.n	8009be2 <DRV_updateFromCommands+0x30a>
        {
          DRV_setDirectionsForwardLeft();
 8009ba8:	f000 fab0 	bl	800a10c <DRV_setDirectionsForwardLeft>

          PID_setTargetValue(&g_DRV_pidFrontRight, l_speed);
 8009bac:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009bae:	f7f7 f891 	bl	8000cd4 <__aeabi_i2f>
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	4619      	mov	r1, r3
 8009bb6:	483f      	ldr	r0, [pc, #252]	; (8009cb4 <DRV_updateFromCommands+0x3dc>)
 8009bb8:	f001 f993 	bl	800aee2 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidFrontLeft ,       0);
 8009bbc:	f04f 0100 	mov.w	r1, #0
 8009bc0:	483d      	ldr	r0, [pc, #244]	; (8009cb8 <DRV_updateFromCommands+0x3e0>)
 8009bc2:	f001 f98e 	bl	800aee2 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidRearRight ,       0);
 8009bc6:	f04f 0100 	mov.w	r1, #0
 8009bca:	483c      	ldr	r0, [pc, #240]	; (8009cbc <DRV_updateFromCommands+0x3e4>)
 8009bcc:	f001 f989 	bl	800aee2 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidRearLeft  , l_speed);
 8009bd0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009bd2:	f7f7 f87f 	bl	8000cd4 <__aeabi_i2f>
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	4619      	mov	r1, r3
 8009bda:	4839      	ldr	r0, [pc, #228]	; (8009cc0 <DRV_updateFromCommands+0x3e8>)
 8009bdc:	f001 f981 	bl	800aee2 <PID_setTargetValue>
 8009be0:	e077      	b.n	8009cd2 <DRV_updateFromCommands+0x3fa>
        }
        /* Forward Right */
        else if ((l_command[0] == 'F') && (l_command[1] == 'R'))
 8009be2:	7d3b      	ldrb	r3, [r7, #20]
 8009be4:	2b46      	cmp	r3, #70	; 0x46
 8009be6:	d11f      	bne.n	8009c28 <DRV_updateFromCommands+0x350>
 8009be8:	7d7b      	ldrb	r3, [r7, #21]
 8009bea:	2b52      	cmp	r3, #82	; 0x52
 8009bec:	d11c      	bne.n	8009c28 <DRV_updateFromCommands+0x350>
        {
          DRV_setDirectionsForwardRight();
 8009bee:	f000 fa7d 	bl	800a0ec <DRV_setDirectionsForwardRight>

          PID_setTargetValue(&g_DRV_pidFrontRight,       0);
 8009bf2:	f04f 0100 	mov.w	r1, #0
 8009bf6:	482f      	ldr	r0, [pc, #188]	; (8009cb4 <DRV_updateFromCommands+0x3dc>)
 8009bf8:	f001 f973 	bl	800aee2 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidFrontLeft , l_speed);
 8009bfc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009bfe:	f7f7 f869 	bl	8000cd4 <__aeabi_i2f>
 8009c02:	4603      	mov	r3, r0
 8009c04:	4619      	mov	r1, r3
 8009c06:	482c      	ldr	r0, [pc, #176]	; (8009cb8 <DRV_updateFromCommands+0x3e0>)
 8009c08:	f001 f96b 	bl	800aee2 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidRearRight , l_speed);
 8009c0c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009c0e:	f7f7 f861 	bl	8000cd4 <__aeabi_i2f>
 8009c12:	4603      	mov	r3, r0
 8009c14:	4619      	mov	r1, r3
 8009c16:	4829      	ldr	r0, [pc, #164]	; (8009cbc <DRV_updateFromCommands+0x3e4>)
 8009c18:	f001 f963 	bl	800aee2 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidRearLeft  ,       0);
 8009c1c:	f04f 0100 	mov.w	r1, #0
 8009c20:	4827      	ldr	r0, [pc, #156]	; (8009cc0 <DRV_updateFromCommands+0x3e8>)
 8009c22:	f001 f95e 	bl	800aee2 <PID_setTargetValue>
 8009c26:	e054      	b.n	8009cd2 <DRV_updateFromCommands+0x3fa>
        }
        /* Backward Left */
        else if ((l_command[0] == 'B') && (l_command[1] == 'L'))
 8009c28:	7d3b      	ldrb	r3, [r7, #20]
 8009c2a:	2b42      	cmp	r3, #66	; 0x42
 8009c2c:	d11f      	bne.n	8009c6e <DRV_updateFromCommands+0x396>
 8009c2e:	7d7b      	ldrb	r3, [r7, #21]
 8009c30:	2b4c      	cmp	r3, #76	; 0x4c
 8009c32:	d11c      	bne.n	8009c6e <DRV_updateFromCommands+0x396>
        {
          DRV_setDirectionsBackwardLeft();
 8009c34:	f000 fa8a 	bl	800a14c <DRV_setDirectionsBackwardLeft>

          PID_setTargetValue(&g_DRV_pidFrontRight,       0);
 8009c38:	f04f 0100 	mov.w	r1, #0
 8009c3c:	481d      	ldr	r0, [pc, #116]	; (8009cb4 <DRV_updateFromCommands+0x3dc>)
 8009c3e:	f001 f950 	bl	800aee2 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidFrontLeft , l_speed);
 8009c42:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009c44:	f7f7 f846 	bl	8000cd4 <__aeabi_i2f>
 8009c48:	4603      	mov	r3, r0
 8009c4a:	4619      	mov	r1, r3
 8009c4c:	481a      	ldr	r0, [pc, #104]	; (8009cb8 <DRV_updateFromCommands+0x3e0>)
 8009c4e:	f001 f948 	bl	800aee2 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidRearRight , l_speed);
 8009c52:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009c54:	f7f7 f83e 	bl	8000cd4 <__aeabi_i2f>
 8009c58:	4603      	mov	r3, r0
 8009c5a:	4619      	mov	r1, r3
 8009c5c:	4817      	ldr	r0, [pc, #92]	; (8009cbc <DRV_updateFromCommands+0x3e4>)
 8009c5e:	f001 f940 	bl	800aee2 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidRearLeft  ,       0);
 8009c62:	f04f 0100 	mov.w	r1, #0
 8009c66:	4816      	ldr	r0, [pc, #88]	; (8009cc0 <DRV_updateFromCommands+0x3e8>)
 8009c68:	f001 f93b 	bl	800aee2 <PID_setTargetValue>
 8009c6c:	e031      	b.n	8009cd2 <DRV_updateFromCommands+0x3fa>
        }
        /* Forward Right */
        else if ((l_command[0] == 'B') && (l_command[1] == 'R'))
 8009c6e:	7d3b      	ldrb	r3, [r7, #20]
 8009c70:	2b42      	cmp	r3, #66	; 0x42
 8009c72:	d127      	bne.n	8009cc4 <DRV_updateFromCommands+0x3ec>
 8009c74:	7d7b      	ldrb	r3, [r7, #21]
 8009c76:	2b52      	cmp	r3, #82	; 0x52
 8009c78:	d124      	bne.n	8009cc4 <DRV_updateFromCommands+0x3ec>
        {
          DRV_setDirectionsBackwardRight();
 8009c7a:	f000 fa57 	bl	800a12c <DRV_setDirectionsBackwardRight>

          PID_setTargetValue(&g_DRV_pidFrontRight, l_speed);
 8009c7e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009c80:	f7f7 f828 	bl	8000cd4 <__aeabi_i2f>
 8009c84:	4603      	mov	r3, r0
 8009c86:	4619      	mov	r1, r3
 8009c88:	480a      	ldr	r0, [pc, #40]	; (8009cb4 <DRV_updateFromCommands+0x3dc>)
 8009c8a:	f001 f92a 	bl	800aee2 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidFrontLeft ,       0);
 8009c8e:	f04f 0100 	mov.w	r1, #0
 8009c92:	4809      	ldr	r0, [pc, #36]	; (8009cb8 <DRV_updateFromCommands+0x3e0>)
 8009c94:	f001 f925 	bl	800aee2 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidRearRight ,       0);
 8009c98:	f04f 0100 	mov.w	r1, #0
 8009c9c:	4807      	ldr	r0, [pc, #28]	; (8009cbc <DRV_updateFromCommands+0x3e4>)
 8009c9e:	f001 f920 	bl	800aee2 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidRearLeft  , l_speed);
 8009ca2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009ca4:	f7f7 f816 	bl	8000cd4 <__aeabi_i2f>
 8009ca8:	4603      	mov	r3, r0
 8009caa:	4619      	mov	r1, r3
 8009cac:	4804      	ldr	r0, [pc, #16]	; (8009cc0 <DRV_updateFromCommands+0x3e8>)
 8009cae:	f001 f918 	bl	800aee2 <PID_setTargetValue>
 8009cb2:	e00e      	b.n	8009cd2 <DRV_updateFromCommands+0x3fa>
 8009cb4:	20000264 	.word	0x20000264
 8009cb8:	20000294 	.word	0x20000294
 8009cbc:	200002f4 	.word	0x200002f4
 8009cc0:	200002c4 	.word	0x200002c4
        }
        else
        {
          LOG_error("Drive got unsupported command: '%s'", l_command);
 8009cc4:	f107 0314 	add.w	r3, r7, #20
 8009cc8:	461a      	mov	r2, r3
 8009cca:	4975      	ldr	r1, [pc, #468]	; (8009ea0 <DRV_updateFromCommands+0x5c8>)
 8009ccc:	2003      	movs	r0, #3
 8009cce:	f000 fe75 	bl	800a9bc <LOG_log>
        }
      }
    }

    /* Get measurements */
    l_measuredSpeedFrontRight = fabs((float)ENC_getCount(&g_DRV_encoderFrontRight) / (float)p_deltaTimeInMs * STP_DRIVE_PID_ENCODER_TO_SPEED_FACTOR);
 8009cd2:	4874      	ldr	r0, [pc, #464]	; (8009ea4 <DRV_updateFromCommands+0x5cc>)
 8009cd4:	f000 fd41 	bl	800a75a <ENC_getCount>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	4618      	mov	r0, r3
 8009cdc:	f7f6 fffa 	bl	8000cd4 <__aeabi_i2f>
 8009ce0:	4604      	mov	r4, r0
 8009ce2:	68b8      	ldr	r0, [r7, #8]
 8009ce4:	f7f6 fff2 	bl	8000ccc <__aeabi_ui2f>
 8009ce8:	4603      	mov	r3, r0
 8009cea:	4619      	mov	r1, r3
 8009cec:	4620      	mov	r0, r4
 8009cee:	f7f7 f8f9 	bl	8000ee4 <__aeabi_fdiv>
 8009cf2:	4603      	mov	r3, r0
 8009cf4:	496c      	ldr	r1, [pc, #432]	; (8009ea8 <DRV_updateFromCommands+0x5d0>)
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	f7f7 f840 	bl	8000d7c <__aeabi_fmul>
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009d02:	653b      	str	r3, [r7, #80]	; 0x50
    l_measuredSpeedFrontLeft  = fabs((float)ENC_getCount(&g_DRV_encoderFrontLeft ) / (float)p_deltaTimeInMs * STP_DRIVE_PID_ENCODER_TO_SPEED_FACTOR);
 8009d04:	4869      	ldr	r0, [pc, #420]	; (8009eac <DRV_updateFromCommands+0x5d4>)
 8009d06:	f000 fd28 	bl	800a75a <ENC_getCount>
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	f7f6 ffe1 	bl	8000cd4 <__aeabi_i2f>
 8009d12:	4604      	mov	r4, r0
 8009d14:	68b8      	ldr	r0, [r7, #8]
 8009d16:	f7f6 ffd9 	bl	8000ccc <__aeabi_ui2f>
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	4619      	mov	r1, r3
 8009d1e:	4620      	mov	r0, r4
 8009d20:	f7f7 f8e0 	bl	8000ee4 <__aeabi_fdiv>
 8009d24:	4603      	mov	r3, r0
 8009d26:	4960      	ldr	r1, [pc, #384]	; (8009ea8 <DRV_updateFromCommands+0x5d0>)
 8009d28:	4618      	mov	r0, r3
 8009d2a:	f7f7 f827 	bl	8000d7c <__aeabi_fmul>
 8009d2e:	4603      	mov	r3, r0
 8009d30:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009d34:	64fb      	str	r3, [r7, #76]	; 0x4c
    l_measuredSpeedRearRight  = fabs((float)ENC_getCount(&g_DRV_encoderRearRight ) / (float)p_deltaTimeInMs * STP_DRIVE_PID_ENCODER_TO_SPEED_FACTOR);
 8009d36:	485e      	ldr	r0, [pc, #376]	; (8009eb0 <DRV_updateFromCommands+0x5d8>)
 8009d38:	f000 fd0f 	bl	800a75a <ENC_getCount>
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	4618      	mov	r0, r3
 8009d40:	f7f6 ffc8 	bl	8000cd4 <__aeabi_i2f>
 8009d44:	4604      	mov	r4, r0
 8009d46:	68b8      	ldr	r0, [r7, #8]
 8009d48:	f7f6 ffc0 	bl	8000ccc <__aeabi_ui2f>
 8009d4c:	4603      	mov	r3, r0
 8009d4e:	4619      	mov	r1, r3
 8009d50:	4620      	mov	r0, r4
 8009d52:	f7f7 f8c7 	bl	8000ee4 <__aeabi_fdiv>
 8009d56:	4603      	mov	r3, r0
 8009d58:	4953      	ldr	r1, [pc, #332]	; (8009ea8 <DRV_updateFromCommands+0x5d0>)
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	f7f7 f80e 	bl	8000d7c <__aeabi_fmul>
 8009d60:	4603      	mov	r3, r0
 8009d62:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009d66:	64bb      	str	r3, [r7, #72]	; 0x48
    l_measuredSpeedRearLeft   = fabs((float)ENC_getCount(&g_DRV_encoderRearLeft  ) / (float)p_deltaTimeInMs * STP_DRIVE_PID_ENCODER_TO_SPEED_FACTOR);
 8009d68:	4852      	ldr	r0, [pc, #328]	; (8009eb4 <DRV_updateFromCommands+0x5dc>)
 8009d6a:	f000 fcf6 	bl	800a75a <ENC_getCount>
 8009d6e:	4603      	mov	r3, r0
 8009d70:	4618      	mov	r0, r3
 8009d72:	f7f6 ffaf 	bl	8000cd4 <__aeabi_i2f>
 8009d76:	4604      	mov	r4, r0
 8009d78:	68b8      	ldr	r0, [r7, #8]
 8009d7a:	f7f6 ffa7 	bl	8000ccc <__aeabi_ui2f>
 8009d7e:	4603      	mov	r3, r0
 8009d80:	4619      	mov	r1, r3
 8009d82:	4620      	mov	r0, r4
 8009d84:	f7f7 f8ae 	bl	8000ee4 <__aeabi_fdiv>
 8009d88:	4603      	mov	r3, r0
 8009d8a:	4947      	ldr	r1, [pc, #284]	; (8009ea8 <DRV_updateFromCommands+0x5d0>)
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	f7f6 fff5 	bl	8000d7c <__aeabi_fmul>
 8009d92:	4603      	mov	r3, r0
 8009d94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009d98:	647b      	str	r3, [r7, #68]	; 0x44

    CBU_push(&g_DRV_speedBufferFrontRight, l_measuredSpeedFrontRight);
 8009d9a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009d9c:	4846      	ldr	r0, [pc, #280]	; (8009eb8 <DRV_updateFromCommands+0x5e0>)
 8009d9e:	f7ff fa2f 	bl	8009200 <CBU_push>
    CBU_push(&g_DRV_speedBufferFrontLeft , l_measuredSpeedFrontLeft );
 8009da2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009da4:	4845      	ldr	r0, [pc, #276]	; (8009ebc <DRV_updateFromCommands+0x5e4>)
 8009da6:	f7ff fa2b 	bl	8009200 <CBU_push>
    CBU_push(&g_DRV_speedBufferRearRight , l_measuredSpeedRearRight );
 8009daa:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8009dac:	4844      	ldr	r0, [pc, #272]	; (8009ec0 <DRV_updateFromCommands+0x5e8>)
 8009dae:	f7ff fa27 	bl	8009200 <CBU_push>
    CBU_push(&g_DRV_speedBufferRearLeft  , l_measuredSpeedRearLeft  );
 8009db2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009db4:	4843      	ldr	r0, [pc, #268]	; (8009ec4 <DRV_updateFromCommands+0x5ec>)
 8009db6:	f7ff fa23 	bl	8009200 <CBU_push>

    l_averageSpeedFrontRight = CBU_getAverage(&g_DRV_speedBufferFrontRight);
 8009dba:	483f      	ldr	r0, [pc, #252]	; (8009eb8 <DRV_updateFromCommands+0x5e0>)
 8009dbc:	f7ff fa47 	bl	800924e <CBU_getAverage>
 8009dc0:	6438      	str	r0, [r7, #64]	; 0x40
    l_averageSpeedFrontLeft  = CBU_getAverage(&g_DRV_speedBufferFrontLeft );
 8009dc2:	483e      	ldr	r0, [pc, #248]	; (8009ebc <DRV_updateFromCommands+0x5e4>)
 8009dc4:	f7ff fa43 	bl	800924e <CBU_getAverage>
 8009dc8:	63f8      	str	r0, [r7, #60]	; 0x3c
    l_averageSpeedRearRight  = CBU_getAverage(&g_DRV_speedBufferRearRight );
 8009dca:	483d      	ldr	r0, [pc, #244]	; (8009ec0 <DRV_updateFromCommands+0x5e8>)
 8009dcc:	f7ff fa3f 	bl	800924e <CBU_getAverage>
 8009dd0:	63b8      	str	r0, [r7, #56]	; 0x38
    l_averageSpeedRearLeft   = CBU_getAverage(&g_DRV_speedBufferRearLeft  );
 8009dd2:	483c      	ldr	r0, [pc, #240]	; (8009ec4 <DRV_updateFromCommands+0x5ec>)
 8009dd4:	f7ff fa3b 	bl	800924e <CBU_getAverage>
 8009dd8:	6378      	str	r0, [r7, #52]	; 0x34

    if (p_logInfo == true)
 8009dda:	79fb      	ldrb	r3, [r7, #7]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d01a      	beq.n	8009e16 <DRV_updateFromCommands+0x53e>
    {
      /* Log information for only one PID, to make display lighter */
      PID_logInfo(&g_DRV_pidFrontRight);
 8009de0:	4839      	ldr	r0, [pc, #228]	; (8009ec8 <DRV_updateFromCommands+0x5f0>)
 8009de2:	f001 f945 	bl	800b070 <PID_logInfo>

      LOG_info("%d, %d, %d, %d",
 8009de6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8009de8:	f7f7 f918 	bl	800101c <__aeabi_f2iz>
 8009dec:	4605      	mov	r5, r0
 8009dee:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009df0:	f7f7 f914 	bl	800101c <__aeabi_f2iz>
 8009df4:	4606      	mov	r6, r0
 8009df6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009df8:	f7f7 f910 	bl	800101c <__aeabi_f2iz>
 8009dfc:	4604      	mov	r4, r0
 8009dfe:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009e00:	f7f7 f90c 	bl	800101c <__aeabi_f2iz>
 8009e04:	4603      	mov	r3, r0
 8009e06:	9301      	str	r3, [sp, #4]
 8009e08:	9400      	str	r4, [sp, #0]
 8009e0a:	4633      	mov	r3, r6
 8009e0c:	462a      	mov	r2, r5
 8009e0e:	492f      	ldr	r1, [pc, #188]	; (8009ecc <DRV_updateFromCommands+0x5f4>)
 8009e10:	2001      	movs	r0, #1
 8009e12:	f000 fdd3 	bl	800a9bc <LOG_log>
               (int32_t)l_averageSpeedRearRight,
               (int32_t)l_averageSpeedRearLeft);
    }

    /* Update PIDs */
    l_pidSpeedFrontRight = PID_update(&g_DRV_pidFrontRight, l_averageSpeedFrontRight, p_deltaTimeInMs);
 8009e16:	68ba      	ldr	r2, [r7, #8]
 8009e18:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009e1a:	482b      	ldr	r0, [pc, #172]	; (8009ec8 <DRV_updateFromCommands+0x5f0>)
 8009e1c:	f001 f86e 	bl	800aefc <PID_update>
 8009e20:	6338      	str	r0, [r7, #48]	; 0x30
    l_pidSpeedFrontLeft  = PID_update(&g_DRV_pidFrontLeft , l_averageSpeedFrontLeft , p_deltaTimeInMs);
 8009e22:	68ba      	ldr	r2, [r7, #8]
 8009e24:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009e26:	482a      	ldr	r0, [pc, #168]	; (8009ed0 <DRV_updateFromCommands+0x5f8>)
 8009e28:	f001 f868 	bl	800aefc <PID_update>
 8009e2c:	62f8      	str	r0, [r7, #44]	; 0x2c
    l_pidSpeedRearRight  = PID_update(&g_DRV_pidRearRight , l_averageSpeedRearRight , p_deltaTimeInMs);
 8009e2e:	68ba      	ldr	r2, [r7, #8]
 8009e30:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009e32:	4828      	ldr	r0, [pc, #160]	; (8009ed4 <DRV_updateFromCommands+0x5fc>)
 8009e34:	f001 f862 	bl	800aefc <PID_update>
 8009e38:	62b8      	str	r0, [r7, #40]	; 0x28
    l_pidSpeedRearLeft   = PID_update(&g_DRV_pidRearLeft  , l_averageSpeedRearLeft  , p_deltaTimeInMs);
 8009e3a:	68ba      	ldr	r2, [r7, #8]
 8009e3c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009e3e:	4826      	ldr	r0, [pc, #152]	; (8009ed8 <DRV_updateFromCommands+0x600>)
 8009e40:	f001 f85c 	bl	800aefc <PID_update>
 8009e44:	6278      	str	r0, [r7, #36]	; 0x24

    if (g_DRV_areMotorsOn == false)
 8009e46:	4b25      	ldr	r3, [pc, #148]	; (8009edc <DRV_updateFromCommands+0x604>)
 8009e48:	781b      	ldrb	r3, [r3, #0]
 8009e4a:	f083 0301 	eor.w	r3, r3, #1
 8009e4e:	b2db      	uxtb	r3, r3
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d120      	bne.n	8009e96 <DRV_updateFromCommands+0x5be>
      ; /* Nothing to do */
    }
    else
    {
      /* Update motors */
      MTR_setSpeed(&g_DRV_motorFrontRight, l_pidSpeedFrontRight);
 8009e54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e56:	f7f7 f907 	bl	8001068 <__aeabi_f2uiz>
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	4619      	mov	r1, r3
 8009e5e:	4820      	ldr	r0, [pc, #128]	; (8009ee0 <DRV_updateFromCommands+0x608>)
 8009e60:	f000 ff76 	bl	800ad50 <MTR_setSpeed>
      MTR_setSpeed(&g_DRV_motorFrontLeft , l_pidSpeedFrontLeft );
 8009e64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009e66:	f7f7 f8ff 	bl	8001068 <__aeabi_f2uiz>
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	4619      	mov	r1, r3
 8009e6e:	481d      	ldr	r0, [pc, #116]	; (8009ee4 <DRV_updateFromCommands+0x60c>)
 8009e70:	f000 ff6e 	bl	800ad50 <MTR_setSpeed>
      MTR_setSpeed(&g_DRV_motorRearRight , l_pidSpeedRearRight );
 8009e74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e76:	f7f7 f8f7 	bl	8001068 <__aeabi_f2uiz>
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	4619      	mov	r1, r3
 8009e7e:	481a      	ldr	r0, [pc, #104]	; (8009ee8 <DRV_updateFromCommands+0x610>)
 8009e80:	f000 ff66 	bl	800ad50 <MTR_setSpeed>
      MTR_setSpeed(&g_DRV_motorRearLeft  , l_pidSpeedRearLeft  );
 8009e84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009e86:	f7f7 f8ef 	bl	8001068 <__aeabi_f2uiz>
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	4619      	mov	r1, r3
 8009e8e:	4817      	ldr	r0, [pc, #92]	; (8009eec <DRV_updateFromCommands+0x614>)
 8009e90:	f000 ff5e 	bl	800ad50 <MTR_setSpeed>
    }
  }

  return;
 8009e94:	bf00      	nop
 8009e96:	bf00      	nop
}
 8009e98:	375c      	adds	r7, #92	; 0x5c
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e9e:	bf00      	nop
 8009ea0:	0800f014 	.word	0x0800f014
 8009ea4:	200003b4 	.word	0x200003b4
 8009ea8:	47927c00 	.word	0x47927c00
 8009eac:	200003c0 	.word	0x200003c0
 8009eb0:	200003d8 	.word	0x200003d8
 8009eb4:	200003cc 	.word	0x200003cc
 8009eb8:	200003e4 	.word	0x200003e4
 8009ebc:	20000414 	.word	0x20000414
 8009ec0:	20000474 	.word	0x20000474
 8009ec4:	20000444 	.word	0x20000444
 8009ec8:	20000264 	.word	0x20000264
 8009ecc:	0800f038 	.word	0x0800f038
 8009ed0:	20000294 	.word	0x20000294
 8009ed4:	200002f4 	.word	0x200002f4
 8009ed8:	200002c4 	.word	0x200002c4
 8009edc:	20000261 	.word	0x20000261
 8009ee0:	20000324 	.word	0x20000324
 8009ee4:	20000348 	.word	0x20000348
 8009ee8:	20000390 	.word	0x20000390
 8009eec:	2000036c 	.word	0x2000036c

08009ef0 <DRV_getMode>:

T_DRV_MODE DRV_getMode(void)
{
 8009ef0:	b480      	push	{r7}
 8009ef2:	af00      	add	r7, sp, #0
  return g_DRV_mode;
 8009ef4:	4b02      	ldr	r3, [pc, #8]	; (8009f00 <DRV_getMode+0x10>)
 8009ef6:	781b      	ldrb	r3, [r3, #0]
}
 8009ef8:	4618      	mov	r0, r3
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bc80      	pop	{r7}
 8009efe:	4770      	bx	lr
 8009f00:	20000262 	.word	0x20000262

08009f04 <DRV_logInfo>:

void DRV_logInfo(void)
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b084      	sub	sp, #16
 8009f08:	af02      	add	r7, sp, #8
  T_MTR_DIRECTION l_direction;
  uint32_t        l_speed;

  if (g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED)
 8009f0a:	4b3d      	ldr	r3, [pc, #244]	; (800a000 <DRV_logInfo+0xfc>)
 8009f0c:	781b      	ldrb	r3, [r3, #0]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d104      	bne.n	8009f1c <DRV_logInfo+0x18>
  {
    LOG_info("Mode  : MANUAL FIXED SPEED");
 8009f12:	493c      	ldr	r1, [pc, #240]	; (800a004 <DRV_logInfo+0x100>)
 8009f14:	2001      	movs	r0, #1
 8009f16:	f000 fd51 	bl	800a9bc <LOG_log>
 8009f1a:	e018      	b.n	8009f4e <DRV_logInfo+0x4a>
  }
  else if (g_DRV_mode == DRV_MODE_MANUAL_VARIABLE_SPEED)
 8009f1c:	4b38      	ldr	r3, [pc, #224]	; (800a000 <DRV_logInfo+0xfc>)
 8009f1e:	781b      	ldrb	r3, [r3, #0]
 8009f20:	2b01      	cmp	r3, #1
 8009f22:	d104      	bne.n	8009f2e <DRV_logInfo+0x2a>
  {
    LOG_info("Mode  : MANUAL VARIABLE SPEED");
 8009f24:	4938      	ldr	r1, [pc, #224]	; (800a008 <DRV_logInfo+0x104>)
 8009f26:	2001      	movs	r0, #1
 8009f28:	f000 fd48 	bl	800a9bc <LOG_log>
 8009f2c:	e00f      	b.n	8009f4e <DRV_logInfo+0x4a>
  }
  else if (g_DRV_mode == DRV_MODE_MASTER_BOARD_CONTROL)
 8009f2e:	4b34      	ldr	r3, [pc, #208]	; (800a000 <DRV_logInfo+0xfc>)
 8009f30:	781b      	ldrb	r3, [r3, #0]
 8009f32:	2b02      	cmp	r3, #2
 8009f34:	d104      	bne.n	8009f40 <DRV_logInfo+0x3c>
  {
    LOG_info("Mode  : MASTER BOARD CONTROL");
 8009f36:	4935      	ldr	r1, [pc, #212]	; (800a00c <DRV_logInfo+0x108>)
 8009f38:	2001      	movs	r0, #1
 8009f3a:	f000 fd3f 	bl	800a9bc <LOG_log>
 8009f3e:	e006      	b.n	8009f4e <DRV_logInfo+0x4a>
  }
  else
  {
    LOG_error("Unsupported drive mode: %u", g_DRV_mode);
 8009f40:	4b2f      	ldr	r3, [pc, #188]	; (800a000 <DRV_logInfo+0xfc>)
 8009f42:	781b      	ldrb	r3, [r3, #0]
 8009f44:	461a      	mov	r2, r3
 8009f46:	4932      	ldr	r1, [pc, #200]	; (800a010 <DRV_logInfo+0x10c>)
 8009f48:	2003      	movs	r0, #3
 8009f4a:	f000 fd37 	bl	800a9bc <LOG_log>
  }

  if (g_DRV_areMotorsOn == true)
 8009f4e:	4b31      	ldr	r3, [pc, #196]	; (800a014 <DRV_logInfo+0x110>)
 8009f50:	781b      	ldrb	r3, [r3, #0]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d004      	beq.n	8009f60 <DRV_logInfo+0x5c>
  {
    LOG_info("Motors: ON");
 8009f56:	4930      	ldr	r1, [pc, #192]	; (800a018 <DRV_logInfo+0x114>)
 8009f58:	2001      	movs	r0, #1
 8009f5a:	f000 fd2f 	bl	800a9bc <LOG_log>
 8009f5e:	e003      	b.n	8009f68 <DRV_logInfo+0x64>
  }
  else
  {
    LOG_info("Motors: OFF");
 8009f60:	492e      	ldr	r1, [pc, #184]	; (800a01c <DRV_logInfo+0x118>)
 8009f62:	2001      	movs	r0, #1
 8009f64:	f000 fd2a 	bl	800a9bc <LOG_log>
  }

  l_direction = MTR_getDirection(&g_DRV_motorFrontLeft);
 8009f68:	482d      	ldr	r0, [pc, #180]	; (800a020 <DRV_logInfo+0x11c>)
 8009f6a:	f000 fee5 	bl	800ad38 <MTR_getDirection>
 8009f6e:	4603      	mov	r3, r0
 8009f70:	71fb      	strb	r3, [r7, #7]
  l_speed     = MTR_getSpeed    (&g_DRV_motorFrontLeft);
 8009f72:	482b      	ldr	r0, [pc, #172]	; (800a020 <DRV_logInfo+0x11c>)
 8009f74:	f000 ff2a 	bl	800adcc <MTR_getSpeed>
 8009f78:	6038      	str	r0, [r7, #0]

  LOG_info("%s motor direction/speed: %u/%u", CST_FRONT_LEFT_MOTOR_NAME, l_direction, l_speed);
 8009f7a:	79fa      	ldrb	r2, [r7, #7]
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	9300      	str	r3, [sp, #0]
 8009f80:	4613      	mov	r3, r2
 8009f82:	4a28      	ldr	r2, [pc, #160]	; (800a024 <DRV_logInfo+0x120>)
 8009f84:	4928      	ldr	r1, [pc, #160]	; (800a028 <DRV_logInfo+0x124>)
 8009f86:	2001      	movs	r0, #1
 8009f88:	f000 fd18 	bl	800a9bc <LOG_log>

  l_direction = MTR_getDirection(&g_DRV_motorFrontRight);
 8009f8c:	4827      	ldr	r0, [pc, #156]	; (800a02c <DRV_logInfo+0x128>)
 8009f8e:	f000 fed3 	bl	800ad38 <MTR_getDirection>
 8009f92:	4603      	mov	r3, r0
 8009f94:	71fb      	strb	r3, [r7, #7]
  l_speed     = MTR_getSpeed    (&g_DRV_motorFrontRight);
 8009f96:	4825      	ldr	r0, [pc, #148]	; (800a02c <DRV_logInfo+0x128>)
 8009f98:	f000 ff18 	bl	800adcc <MTR_getSpeed>
 8009f9c:	6038      	str	r0, [r7, #0]

  LOG_info("%s motor direction/speed: %u/%u", CST_FRONT_RIGHT_MOTOR_NAME, l_direction, l_speed);
 8009f9e:	79fa      	ldrb	r2, [r7, #7]
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	9300      	str	r3, [sp, #0]
 8009fa4:	4613      	mov	r3, r2
 8009fa6:	4a22      	ldr	r2, [pc, #136]	; (800a030 <DRV_logInfo+0x12c>)
 8009fa8:	491f      	ldr	r1, [pc, #124]	; (800a028 <DRV_logInfo+0x124>)
 8009faa:	2001      	movs	r0, #1
 8009fac:	f000 fd06 	bl	800a9bc <LOG_log>

  l_direction = MTR_getDirection(&g_DRV_motorRearLeft);
 8009fb0:	4820      	ldr	r0, [pc, #128]	; (800a034 <DRV_logInfo+0x130>)
 8009fb2:	f000 fec1 	bl	800ad38 <MTR_getDirection>
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	71fb      	strb	r3, [r7, #7]
  l_speed     = MTR_getSpeed    (&g_DRV_motorRearLeft);
 8009fba:	481e      	ldr	r0, [pc, #120]	; (800a034 <DRV_logInfo+0x130>)
 8009fbc:	f000 ff06 	bl	800adcc <MTR_getSpeed>
 8009fc0:	6038      	str	r0, [r7, #0]

  LOG_info("%s motor direction/speed: %u/%u", CST_REAR_LEFT_MOTOR_NAME, l_direction, l_speed);
 8009fc2:	79fa      	ldrb	r2, [r7, #7]
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	9300      	str	r3, [sp, #0]
 8009fc8:	4613      	mov	r3, r2
 8009fca:	4a1b      	ldr	r2, [pc, #108]	; (800a038 <DRV_logInfo+0x134>)
 8009fcc:	4916      	ldr	r1, [pc, #88]	; (800a028 <DRV_logInfo+0x124>)
 8009fce:	2001      	movs	r0, #1
 8009fd0:	f000 fcf4 	bl	800a9bc <LOG_log>

  l_direction = MTR_getDirection(&g_DRV_motorRearRight);
 8009fd4:	4819      	ldr	r0, [pc, #100]	; (800a03c <DRV_logInfo+0x138>)
 8009fd6:	f000 feaf 	bl	800ad38 <MTR_getDirection>
 8009fda:	4603      	mov	r3, r0
 8009fdc:	71fb      	strb	r3, [r7, #7]
  l_speed     = MTR_getSpeed    (&g_DRV_motorRearRight);
 8009fde:	4817      	ldr	r0, [pc, #92]	; (800a03c <DRV_logInfo+0x138>)
 8009fe0:	f000 fef4 	bl	800adcc <MTR_getSpeed>
 8009fe4:	6038      	str	r0, [r7, #0]

  LOG_info("%s motor direction/speed: %u/%u", CST_REAR_RIGHT_MOTOR_NAME, l_direction, l_speed);
 8009fe6:	79fa      	ldrb	r2, [r7, #7]
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	9300      	str	r3, [sp, #0]
 8009fec:	4613      	mov	r3, r2
 8009fee:	4a14      	ldr	r2, [pc, #80]	; (800a040 <DRV_logInfo+0x13c>)
 8009ff0:	490d      	ldr	r1, [pc, #52]	; (800a028 <DRV_logInfo+0x124>)
 8009ff2:	2001      	movs	r0, #1
 8009ff4:	f000 fce2 	bl	800a9bc <LOG_log>

  return;
 8009ff8:	bf00      	nop
}
 8009ffa:	3708      	adds	r7, #8
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	bd80      	pop	{r7, pc}
 800a000:	20000262 	.word	0x20000262
 800a004:	0800f048 	.word	0x0800f048
 800a008:	0800f064 	.word	0x0800f064
 800a00c:	0800f084 	.word	0x0800f084
 800a010:	0800f0a4 	.word	0x0800f0a4
 800a014:	20000261 	.word	0x20000261
 800a018:	0800f0c0 	.word	0x0800f0c0
 800a01c:	0800f0cc 	.word	0x0800f0cc
 800a020:	20000348 	.word	0x20000348
 800a024:	0800eef8 	.word	0x0800eef8
 800a028:	0800f0d8 	.word	0x0800f0d8
 800a02c:	20000324 	.word	0x20000324
 800a030:	0800eeec 	.word	0x0800eeec
 800a034:	2000036c 	.word	0x2000036c
 800a038:	0800ef04 	.word	0x0800ef04
 800a03c:	20000390 	.word	0x20000390
 800a040:	0800ef10 	.word	0x0800ef10

0800a044 <DRV_setDirectionsStop>:

static void DRV_setDirectionsStop(void)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	af00      	add	r7, sp, #0
  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_STOP);
 800a048:	2100      	movs	r1, #0
 800a04a:	4808      	ldr	r0, [pc, #32]	; (800a06c <DRV_setDirectionsStop+0x28>)
 800a04c:	f000 fe08 	bl	800ac60 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorFrontLeft , MTR_DIRECTION_STOP);
 800a050:	2100      	movs	r1, #0
 800a052:	4807      	ldr	r0, [pc, #28]	; (800a070 <DRV_setDirectionsStop+0x2c>)
 800a054:	f000 fe04 	bl	800ac60 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight , MTR_DIRECTION_STOP);
 800a058:	2100      	movs	r1, #0
 800a05a:	4806      	ldr	r0, [pc, #24]	; (800a074 <DRV_setDirectionsStop+0x30>)
 800a05c:	f000 fe00 	bl	800ac60 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_STOP);
 800a060:	2100      	movs	r1, #0
 800a062:	4805      	ldr	r0, [pc, #20]	; (800a078 <DRV_setDirectionsStop+0x34>)
 800a064:	f000 fdfc 	bl	800ac60 <MTR_setDirection>

  return;
 800a068:	bf00      	nop
}
 800a06a:	bd80      	pop	{r7, pc}
 800a06c:	20000324 	.word	0x20000324
 800a070:	20000348 	.word	0x20000348
 800a074:	20000390 	.word	0x20000390
 800a078:	2000036c 	.word	0x2000036c

0800a07c <DRV_setDirectionsForward>:

static void DRV_setDirectionsForward(void)
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	af00      	add	r7, sp, #0
  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_FORWARD);
 800a080:	2101      	movs	r1, #1
 800a082:	4808      	ldr	r0, [pc, #32]	; (800a0a4 <DRV_setDirectionsForward+0x28>)
 800a084:	f000 fdec 	bl	800ac60 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorFrontLeft , MTR_DIRECTION_FORWARD);
 800a088:	2101      	movs	r1, #1
 800a08a:	4807      	ldr	r0, [pc, #28]	; (800a0a8 <DRV_setDirectionsForward+0x2c>)
 800a08c:	f000 fde8 	bl	800ac60 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight , MTR_DIRECTION_FORWARD);
 800a090:	2101      	movs	r1, #1
 800a092:	4806      	ldr	r0, [pc, #24]	; (800a0ac <DRV_setDirectionsForward+0x30>)
 800a094:	f000 fde4 	bl	800ac60 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_FORWARD);
 800a098:	2101      	movs	r1, #1
 800a09a:	4805      	ldr	r0, [pc, #20]	; (800a0b0 <DRV_setDirectionsForward+0x34>)
 800a09c:	f000 fde0 	bl	800ac60 <MTR_setDirection>

  return;
 800a0a0:	bf00      	nop
}
 800a0a2:	bd80      	pop	{r7, pc}
 800a0a4:	20000324 	.word	0x20000324
 800a0a8:	20000348 	.word	0x20000348
 800a0ac:	20000390 	.word	0x20000390
 800a0b0:	2000036c 	.word	0x2000036c

0800a0b4 <DRV_setDirectionsBackward>:

static void DRV_setDirectionsBackward(void)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	af00      	add	r7, sp, #0
  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_BACKWARD);
 800a0b8:	2102      	movs	r1, #2
 800a0ba:	4808      	ldr	r0, [pc, #32]	; (800a0dc <DRV_setDirectionsBackward+0x28>)
 800a0bc:	f000 fdd0 	bl	800ac60 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorFrontLeft , MTR_DIRECTION_BACKWARD);
 800a0c0:	2102      	movs	r1, #2
 800a0c2:	4807      	ldr	r0, [pc, #28]	; (800a0e0 <DRV_setDirectionsBackward+0x2c>)
 800a0c4:	f000 fdcc 	bl	800ac60 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight , MTR_DIRECTION_BACKWARD);
 800a0c8:	2102      	movs	r1, #2
 800a0ca:	4806      	ldr	r0, [pc, #24]	; (800a0e4 <DRV_setDirectionsBackward+0x30>)
 800a0cc:	f000 fdc8 	bl	800ac60 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_BACKWARD);
 800a0d0:	2102      	movs	r1, #2
 800a0d2:	4805      	ldr	r0, [pc, #20]	; (800a0e8 <DRV_setDirectionsBackward+0x34>)
 800a0d4:	f000 fdc4 	bl	800ac60 <MTR_setDirection>

  return;
 800a0d8:	bf00      	nop
}
 800a0da:	bd80      	pop	{r7, pc}
 800a0dc:	20000324 	.word	0x20000324
 800a0e0:	20000348 	.word	0x20000348
 800a0e4:	20000390 	.word	0x20000390
 800a0e8:	2000036c 	.word	0x2000036c

0800a0ec <DRV_setDirectionsForwardRight>:

static void DRV_setDirectionsForwardRight(void)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	af00      	add	r7, sp, #0
  MTR_setDirection(&g_DRV_motorFrontLeft, MTR_DIRECTION_FORWARD);
 800a0f0:	2101      	movs	r1, #1
 800a0f2:	4804      	ldr	r0, [pc, #16]	; (800a104 <DRV_setDirectionsForwardRight+0x18>)
 800a0f4:	f000 fdb4 	bl	800ac60 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight, MTR_DIRECTION_FORWARD);
 800a0f8:	2101      	movs	r1, #1
 800a0fa:	4803      	ldr	r0, [pc, #12]	; (800a108 <DRV_setDirectionsForwardRight+0x1c>)
 800a0fc:	f000 fdb0 	bl	800ac60 <MTR_setDirection>

  return;
 800a100:	bf00      	nop
}
 800a102:	bd80      	pop	{r7, pc}
 800a104:	20000348 	.word	0x20000348
 800a108:	20000390 	.word	0x20000390

0800a10c <DRV_setDirectionsForwardLeft>:

static void DRV_setDirectionsForwardLeft(void)
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	af00      	add	r7, sp, #0
  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_FORWARD);
 800a110:	2101      	movs	r1, #1
 800a112:	4804      	ldr	r0, [pc, #16]	; (800a124 <DRV_setDirectionsForwardLeft+0x18>)
 800a114:	f000 fda4 	bl	800ac60 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_FORWARD);
 800a118:	2101      	movs	r1, #1
 800a11a:	4803      	ldr	r0, [pc, #12]	; (800a128 <DRV_setDirectionsForwardLeft+0x1c>)
 800a11c:	f000 fda0 	bl	800ac60 <MTR_setDirection>

  return;
 800a120:	bf00      	nop
}
 800a122:	bd80      	pop	{r7, pc}
 800a124:	20000324 	.word	0x20000324
 800a128:	2000036c 	.word	0x2000036c

0800a12c <DRV_setDirectionsBackwardRight>:

static void DRV_setDirectionsBackwardRight(void)
{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	af00      	add	r7, sp, #0
  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_BACKWARD);
 800a130:	2102      	movs	r1, #2
 800a132:	4804      	ldr	r0, [pc, #16]	; (800a144 <DRV_setDirectionsBackwardRight+0x18>)
 800a134:	f000 fd94 	bl	800ac60 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_BACKWARD);
 800a138:	2102      	movs	r1, #2
 800a13a:	4803      	ldr	r0, [pc, #12]	; (800a148 <DRV_setDirectionsBackwardRight+0x1c>)
 800a13c:	f000 fd90 	bl	800ac60 <MTR_setDirection>

  return;
 800a140:	bf00      	nop
}
 800a142:	bd80      	pop	{r7, pc}
 800a144:	20000324 	.word	0x20000324
 800a148:	2000036c 	.word	0x2000036c

0800a14c <DRV_setDirectionsBackwardLeft>:

static void DRV_setDirectionsBackwardLeft(void)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	af00      	add	r7, sp, #0
  MTR_setDirection(&g_DRV_motorFrontLeft, MTR_DIRECTION_BACKWARD);
 800a150:	2102      	movs	r1, #2
 800a152:	4804      	ldr	r0, [pc, #16]	; (800a164 <DRV_setDirectionsBackwardLeft+0x18>)
 800a154:	f000 fd84 	bl	800ac60 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight, MTR_DIRECTION_BACKWARD);
 800a158:	2102      	movs	r1, #2
 800a15a:	4803      	ldr	r0, [pc, #12]	; (800a168 <DRV_setDirectionsBackwardLeft+0x1c>)
 800a15c:	f000 fd80 	bl	800ac60 <MTR_setDirection>

  return;
 800a160:	bf00      	nop
}
 800a162:	bd80      	pop	{r7, pc}
 800a164:	20000348 	.word	0x20000348
 800a168:	20000390 	.word	0x20000390

0800a16c <DRV_setDirectionsTurnLeft>:

static void DRV_setDirectionsTurnLeft(void)
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	af00      	add	r7, sp, #0
  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_FORWARD );
 800a170:	2101      	movs	r1, #1
 800a172:	4808      	ldr	r0, [pc, #32]	; (800a194 <DRV_setDirectionsTurnLeft+0x28>)
 800a174:	f000 fd74 	bl	800ac60 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorFrontLeft , MTR_DIRECTION_BACKWARD);
 800a178:	2102      	movs	r1, #2
 800a17a:	4807      	ldr	r0, [pc, #28]	; (800a198 <DRV_setDirectionsTurnLeft+0x2c>)
 800a17c:	f000 fd70 	bl	800ac60 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight , MTR_DIRECTION_FORWARD );
 800a180:	2101      	movs	r1, #1
 800a182:	4806      	ldr	r0, [pc, #24]	; (800a19c <DRV_setDirectionsTurnLeft+0x30>)
 800a184:	f000 fd6c 	bl	800ac60 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_BACKWARD);
 800a188:	2102      	movs	r1, #2
 800a18a:	4805      	ldr	r0, [pc, #20]	; (800a1a0 <DRV_setDirectionsTurnLeft+0x34>)
 800a18c:	f000 fd68 	bl	800ac60 <MTR_setDirection>

  return;
 800a190:	bf00      	nop
}
 800a192:	bd80      	pop	{r7, pc}
 800a194:	20000324 	.word	0x20000324
 800a198:	20000348 	.word	0x20000348
 800a19c:	20000390 	.word	0x20000390
 800a1a0:	2000036c 	.word	0x2000036c

0800a1a4 <DRV_setDirectionsTurnRight>:

static void DRV_setDirectionsTurnRight(void)
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	af00      	add	r7, sp, #0
  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_BACKWARD);
 800a1a8:	2102      	movs	r1, #2
 800a1aa:	4808      	ldr	r0, [pc, #32]	; (800a1cc <DRV_setDirectionsTurnRight+0x28>)
 800a1ac:	f000 fd58 	bl	800ac60 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorFrontLeft , MTR_DIRECTION_FORWARD );
 800a1b0:	2101      	movs	r1, #1
 800a1b2:	4807      	ldr	r0, [pc, #28]	; (800a1d0 <DRV_setDirectionsTurnRight+0x2c>)
 800a1b4:	f000 fd54 	bl	800ac60 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight , MTR_DIRECTION_BACKWARD);
 800a1b8:	2102      	movs	r1, #2
 800a1ba:	4806      	ldr	r0, [pc, #24]	; (800a1d4 <DRV_setDirectionsTurnRight+0x30>)
 800a1bc:	f000 fd50 	bl	800ac60 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_FORWARD );
 800a1c0:	2101      	movs	r1, #1
 800a1c2:	4805      	ldr	r0, [pc, #20]	; (800a1d8 <DRV_setDirectionsTurnRight+0x34>)
 800a1c4:	f000 fd4c 	bl	800ac60 <MTR_setDirection>

  return;
 800a1c8:	bf00      	nop
}
 800a1ca:	bd80      	pop	{r7, pc}
 800a1cc:	20000324 	.word	0x20000324
 800a1d0:	20000348 	.word	0x20000348
 800a1d4:	20000390 	.word	0x20000390
 800a1d8:	2000036c 	.word	0x2000036c

0800a1dc <DRV_setDirectionsTranslateLeft>:

static void DRV_setDirectionsTranslateLeft(void)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	af00      	add	r7, sp, #0
  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_FORWARD );
 800a1e0:	2101      	movs	r1, #1
 800a1e2:	4808      	ldr	r0, [pc, #32]	; (800a204 <DRV_setDirectionsTranslateLeft+0x28>)
 800a1e4:	f000 fd3c 	bl	800ac60 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorFrontLeft , MTR_DIRECTION_BACKWARD);
 800a1e8:	2102      	movs	r1, #2
 800a1ea:	4807      	ldr	r0, [pc, #28]	; (800a208 <DRV_setDirectionsTranslateLeft+0x2c>)
 800a1ec:	f000 fd38 	bl	800ac60 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight , MTR_DIRECTION_BACKWARD);
 800a1f0:	2102      	movs	r1, #2
 800a1f2:	4806      	ldr	r0, [pc, #24]	; (800a20c <DRV_setDirectionsTranslateLeft+0x30>)
 800a1f4:	f000 fd34 	bl	800ac60 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_FORWARD );
 800a1f8:	2101      	movs	r1, #1
 800a1fa:	4805      	ldr	r0, [pc, #20]	; (800a210 <DRV_setDirectionsTranslateLeft+0x34>)
 800a1fc:	f000 fd30 	bl	800ac60 <MTR_setDirection>

  return;
 800a200:	bf00      	nop
}
 800a202:	bd80      	pop	{r7, pc}
 800a204:	20000324 	.word	0x20000324
 800a208:	20000348 	.word	0x20000348
 800a20c:	20000390 	.word	0x20000390
 800a210:	2000036c 	.word	0x2000036c

0800a214 <DRV_setDirectionsTranslateRight>:

static void DRV_setDirectionsTranslateRight(void)
{
 800a214:	b580      	push	{r7, lr}
 800a216:	af00      	add	r7, sp, #0
  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_BACKWARD);
 800a218:	2102      	movs	r1, #2
 800a21a:	4808      	ldr	r0, [pc, #32]	; (800a23c <DRV_setDirectionsTranslateRight+0x28>)
 800a21c:	f000 fd20 	bl	800ac60 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorFrontLeft , MTR_DIRECTION_FORWARD );
 800a220:	2101      	movs	r1, #1
 800a222:	4807      	ldr	r0, [pc, #28]	; (800a240 <DRV_setDirectionsTranslateRight+0x2c>)
 800a224:	f000 fd1c 	bl	800ac60 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight , MTR_DIRECTION_FORWARD );
 800a228:	2101      	movs	r1, #1
 800a22a:	4806      	ldr	r0, [pc, #24]	; (800a244 <DRV_setDirectionsTranslateRight+0x30>)
 800a22c:	f000 fd18 	bl	800ac60 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_BACKWARD);
 800a230:	2102      	movs	r1, #2
 800a232:	4805      	ldr	r0, [pc, #20]	; (800a248 <DRV_setDirectionsTranslateRight+0x34>)
 800a234:	f000 fd14 	bl	800ac60 <MTR_setDirection>

  return;
 800a238:	bf00      	nop
}
 800a23a:	bd80      	pop	{r7, pc}
 800a23c:	20000324 	.word	0x20000324
 800a240:	20000348 	.word	0x20000348
 800a244:	20000390 	.word	0x20000390
 800a248:	2000036c 	.word	0x2000036c

0800a24c <DRV_stop>:

static void DRV_stop(void)
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	af00      	add	r7, sp, #0
  DRV_setDirectionsStop();
 800a250:	f7ff fef8 	bl	800a044 <DRV_setDirectionsStop>

  MTR_setSpeed(&g_DRV_motorFrontRight, 0);
 800a254:	2100      	movs	r1, #0
 800a256:	4808      	ldr	r0, [pc, #32]	; (800a278 <DRV_stop+0x2c>)
 800a258:	f000 fd7a 	bl	800ad50 <MTR_setSpeed>
  MTR_setSpeed(&g_DRV_motorFrontLeft , 0);
 800a25c:	2100      	movs	r1, #0
 800a25e:	4807      	ldr	r0, [pc, #28]	; (800a27c <DRV_stop+0x30>)
 800a260:	f000 fd76 	bl	800ad50 <MTR_setSpeed>
  MTR_setSpeed(&g_DRV_motorRearRight , 0);
 800a264:	2100      	movs	r1, #0
 800a266:	4806      	ldr	r0, [pc, #24]	; (800a280 <DRV_stop+0x34>)
 800a268:	f000 fd72 	bl	800ad50 <MTR_setSpeed>
  MTR_setSpeed(&g_DRV_motorRearLeft  , 0);
 800a26c:	2100      	movs	r1, #0
 800a26e:	4805      	ldr	r0, [pc, #20]	; (800a284 <DRV_stop+0x38>)
 800a270:	f000 fd6e 	bl	800ad50 <MTR_setSpeed>

  return;
 800a274:	bf00      	nop
}
 800a276:	bd80      	pop	{r7, pc}
 800a278:	20000324 	.word	0x20000324
 800a27c:	20000348 	.word	0x20000348
 800a280:	20000390 	.word	0x20000390
 800a284:	2000036c 	.word	0x2000036c

0800a288 <DRV_moveForward>:

static void DRV_moveForward(uint32_t p_speed)
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b084      	sub	sp, #16
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	60fb      	str	r3, [r7, #12]

  LOG_debug("Moving forward @%u", l_speed);
 800a294:	68fa      	ldr	r2, [r7, #12]
 800a296:	4911      	ldr	r1, [pc, #68]	; (800a2dc <DRV_moveForward+0x54>)
 800a298:	2000      	movs	r0, #0
 800a29a:	f000 fb8f 	bl	800a9bc <LOG_log>

  DRV_setDirectionsForward();
 800a29e:	f7ff feed 	bl	800a07c <DRV_setDirectionsForward>

  if (g_DRV_areMotorsOn == false)
 800a2a2:	4b0f      	ldr	r3, [pc, #60]	; (800a2e0 <DRV_moveForward+0x58>)
 800a2a4:	781b      	ldrb	r3, [r3, #0]
 800a2a6:	f083 0301 	eor.w	r3, r3, #1
 800a2aa:	b2db      	uxtb	r3, r3
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d110      	bne.n	800a2d2 <DRV_moveForward+0x4a>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 800a2b0:	68f9      	ldr	r1, [r7, #12]
 800a2b2:	480c      	ldr	r0, [pc, #48]	; (800a2e4 <DRV_moveForward+0x5c>)
 800a2b4:	f000 fd4c 	bl	800ad50 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 800a2b8:	68f9      	ldr	r1, [r7, #12]
 800a2ba:	480b      	ldr	r0, [pc, #44]	; (800a2e8 <DRV_moveForward+0x60>)
 800a2bc:	f000 fd48 	bl	800ad50 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 800a2c0:	68f9      	ldr	r1, [r7, #12]
 800a2c2:	480a      	ldr	r0, [pc, #40]	; (800a2ec <DRV_moveForward+0x64>)
 800a2c4:	f000 fd44 	bl	800ad50 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 800a2c8:	68f9      	ldr	r1, [r7, #12]
 800a2ca:	4809      	ldr	r0, [pc, #36]	; (800a2f0 <DRV_moveForward+0x68>)
 800a2cc:	f000 fd40 	bl	800ad50 <MTR_setSpeed>
  }

  return;
 800a2d0:	bf00      	nop
 800a2d2:	bf00      	nop
}
 800a2d4:	3710      	adds	r7, #16
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	bd80      	pop	{r7, pc}
 800a2da:	bf00      	nop
 800a2dc:	0800f0f8 	.word	0x0800f0f8
 800a2e0:	20000261 	.word	0x20000261
 800a2e4:	20000324 	.word	0x20000324
 800a2e8:	20000348 	.word	0x20000348
 800a2ec:	20000390 	.word	0x20000390
 800a2f0:	2000036c 	.word	0x2000036c

0800a2f4 <DRV_moveBackward>:

static void DRV_moveBackward(uint32_t p_speed)
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b084      	sub	sp, #16
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	60fb      	str	r3, [r7, #12]

  LOG_debug("Moving backward @%u", l_speed);
 800a300:	68fa      	ldr	r2, [r7, #12]
 800a302:	4911      	ldr	r1, [pc, #68]	; (800a348 <DRV_moveBackward+0x54>)
 800a304:	2000      	movs	r0, #0
 800a306:	f000 fb59 	bl	800a9bc <LOG_log>

  DRV_setDirectionsBackward();
 800a30a:	f7ff fed3 	bl	800a0b4 <DRV_setDirectionsBackward>

  if (g_DRV_areMotorsOn == false)
 800a30e:	4b0f      	ldr	r3, [pc, #60]	; (800a34c <DRV_moveBackward+0x58>)
 800a310:	781b      	ldrb	r3, [r3, #0]
 800a312:	f083 0301 	eor.w	r3, r3, #1
 800a316:	b2db      	uxtb	r3, r3
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d110      	bne.n	800a33e <DRV_moveBackward+0x4a>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 800a31c:	68f9      	ldr	r1, [r7, #12]
 800a31e:	480c      	ldr	r0, [pc, #48]	; (800a350 <DRV_moveBackward+0x5c>)
 800a320:	f000 fd16 	bl	800ad50 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 800a324:	68f9      	ldr	r1, [r7, #12]
 800a326:	480b      	ldr	r0, [pc, #44]	; (800a354 <DRV_moveBackward+0x60>)
 800a328:	f000 fd12 	bl	800ad50 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 800a32c:	68f9      	ldr	r1, [r7, #12]
 800a32e:	480a      	ldr	r0, [pc, #40]	; (800a358 <DRV_moveBackward+0x64>)
 800a330:	f000 fd0e 	bl	800ad50 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 800a334:	68f9      	ldr	r1, [r7, #12]
 800a336:	4809      	ldr	r0, [pc, #36]	; (800a35c <DRV_moveBackward+0x68>)
 800a338:	f000 fd0a 	bl	800ad50 <MTR_setSpeed>
  }

  return;
 800a33c:	bf00      	nop
 800a33e:	bf00      	nop
}
 800a340:	3710      	adds	r7, #16
 800a342:	46bd      	mov	sp, r7
 800a344:	bd80      	pop	{r7, pc}
 800a346:	bf00      	nop
 800a348:	0800f10c 	.word	0x0800f10c
 800a34c:	20000261 	.word	0x20000261
 800a350:	20000324 	.word	0x20000324
 800a354:	20000348 	.word	0x20000348
 800a358:	20000390 	.word	0x20000390
 800a35c:	2000036c 	.word	0x2000036c

0800a360 <DRV_moveForwardRight>:

static void DRV_moveForwardRight(uint32_t p_speed)
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b084      	sub	sp, #16
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	60fb      	str	r3, [r7, #12]

  LOG_debug("Moving forward-right @%u", l_speed);
 800a36c:	68fa      	ldr	r2, [r7, #12]
 800a36e:	4911      	ldr	r1, [pc, #68]	; (800a3b4 <DRV_moveForwardRight+0x54>)
 800a370:	2000      	movs	r0, #0
 800a372:	f000 fb23 	bl	800a9bc <LOG_log>

  DRV_setDirectionsForwardRight();
 800a376:	f7ff feb9 	bl	800a0ec <DRV_setDirectionsForwardRight>

  if (g_DRV_areMotorsOn == false)
 800a37a:	4b0f      	ldr	r3, [pc, #60]	; (800a3b8 <DRV_moveForwardRight+0x58>)
 800a37c:	781b      	ldrb	r3, [r3, #0]
 800a37e:	f083 0301 	eor.w	r3, r3, #1
 800a382:	b2db      	uxtb	r3, r3
 800a384:	2b00      	cmp	r3, #0
 800a386:	d110      	bne.n	800a3aa <DRV_moveForwardRight+0x4a>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight,       0);
 800a388:	2100      	movs	r1, #0
 800a38a:	480c      	ldr	r0, [pc, #48]	; (800a3bc <DRV_moveForwardRight+0x5c>)
 800a38c:	f000 fce0 	bl	800ad50 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 800a390:	68f9      	ldr	r1, [r7, #12]
 800a392:	480b      	ldr	r0, [pc, #44]	; (800a3c0 <DRV_moveForwardRight+0x60>)
 800a394:	f000 fcdc 	bl	800ad50 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 800a398:	68f9      	ldr	r1, [r7, #12]
 800a39a:	480a      	ldr	r0, [pc, #40]	; (800a3c4 <DRV_moveForwardRight+0x64>)
 800a39c:	f000 fcd8 	bl	800ad50 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  ,       0);
 800a3a0:	2100      	movs	r1, #0
 800a3a2:	4809      	ldr	r0, [pc, #36]	; (800a3c8 <DRV_moveForwardRight+0x68>)
 800a3a4:	f000 fcd4 	bl	800ad50 <MTR_setSpeed>
  }

  return;
 800a3a8:	bf00      	nop
 800a3aa:	bf00      	nop
}
 800a3ac:	3710      	adds	r7, #16
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	bd80      	pop	{r7, pc}
 800a3b2:	bf00      	nop
 800a3b4:	0800f120 	.word	0x0800f120
 800a3b8:	20000261 	.word	0x20000261
 800a3bc:	20000324 	.word	0x20000324
 800a3c0:	20000348 	.word	0x20000348
 800a3c4:	20000390 	.word	0x20000390
 800a3c8:	2000036c 	.word	0x2000036c

0800a3cc <DRV_moveForwardLeft>:

static void DRV_moveForwardLeft(uint32_t p_speed)
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b084      	sub	sp, #16
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	60fb      	str	r3, [r7, #12]

  LOG_debug("Moving forward-left @%u", l_speed);
 800a3d8:	68fa      	ldr	r2, [r7, #12]
 800a3da:	4911      	ldr	r1, [pc, #68]	; (800a420 <DRV_moveForwardLeft+0x54>)
 800a3dc:	2000      	movs	r0, #0
 800a3de:	f000 faed 	bl	800a9bc <LOG_log>

  DRV_setDirectionsForwardLeft();
 800a3e2:	f7ff fe93 	bl	800a10c <DRV_setDirectionsForwardLeft>

  if (g_DRV_areMotorsOn == false)
 800a3e6:	4b0f      	ldr	r3, [pc, #60]	; (800a424 <DRV_moveForwardLeft+0x58>)
 800a3e8:	781b      	ldrb	r3, [r3, #0]
 800a3ea:	f083 0301 	eor.w	r3, r3, #1
 800a3ee:	b2db      	uxtb	r3, r3
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d110      	bne.n	800a416 <DRV_moveForwardLeft+0x4a>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 800a3f4:	68f9      	ldr	r1, [r7, #12]
 800a3f6:	480c      	ldr	r0, [pc, #48]	; (800a428 <DRV_moveForwardLeft+0x5c>)
 800a3f8:	f000 fcaa 	bl	800ad50 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft ,       0);
 800a3fc:	2100      	movs	r1, #0
 800a3fe:	480b      	ldr	r0, [pc, #44]	; (800a42c <DRV_moveForwardLeft+0x60>)
 800a400:	f000 fca6 	bl	800ad50 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight ,       0);
 800a404:	2100      	movs	r1, #0
 800a406:	480a      	ldr	r0, [pc, #40]	; (800a430 <DRV_moveForwardLeft+0x64>)
 800a408:	f000 fca2 	bl	800ad50 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 800a40c:	68f9      	ldr	r1, [r7, #12]
 800a40e:	4809      	ldr	r0, [pc, #36]	; (800a434 <DRV_moveForwardLeft+0x68>)
 800a410:	f000 fc9e 	bl	800ad50 <MTR_setSpeed>
  }

  return;
 800a414:	bf00      	nop
 800a416:	bf00      	nop
}
 800a418:	3710      	adds	r7, #16
 800a41a:	46bd      	mov	sp, r7
 800a41c:	bd80      	pop	{r7, pc}
 800a41e:	bf00      	nop
 800a420:	0800f13c 	.word	0x0800f13c
 800a424:	20000261 	.word	0x20000261
 800a428:	20000324 	.word	0x20000324
 800a42c:	20000348 	.word	0x20000348
 800a430:	20000390 	.word	0x20000390
 800a434:	2000036c 	.word	0x2000036c

0800a438 <DRV_moveBackwardRight>:

static void DRV_moveBackwardRight(uint32_t p_speed)
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b084      	sub	sp, #16
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	60fb      	str	r3, [r7, #12]

  LOG_debug("Moving backward-right @%u", l_speed);
 800a444:	68fa      	ldr	r2, [r7, #12]
 800a446:	4911      	ldr	r1, [pc, #68]	; (800a48c <DRV_moveBackwardRight+0x54>)
 800a448:	2000      	movs	r0, #0
 800a44a:	f000 fab7 	bl	800a9bc <LOG_log>

  DRV_setDirectionsBackwardRight();
 800a44e:	f7ff fe6d 	bl	800a12c <DRV_setDirectionsBackwardRight>

  if (g_DRV_areMotorsOn == false)
 800a452:	4b0f      	ldr	r3, [pc, #60]	; (800a490 <DRV_moveBackwardRight+0x58>)
 800a454:	781b      	ldrb	r3, [r3, #0]
 800a456:	f083 0301 	eor.w	r3, r3, #1
 800a45a:	b2db      	uxtb	r3, r3
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d110      	bne.n	800a482 <DRV_moveBackwardRight+0x4a>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 800a460:	68f9      	ldr	r1, [r7, #12]
 800a462:	480c      	ldr	r0, [pc, #48]	; (800a494 <DRV_moveBackwardRight+0x5c>)
 800a464:	f000 fc74 	bl	800ad50 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft ,       0);
 800a468:	2100      	movs	r1, #0
 800a46a:	480b      	ldr	r0, [pc, #44]	; (800a498 <DRV_moveBackwardRight+0x60>)
 800a46c:	f000 fc70 	bl	800ad50 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight ,       0);
 800a470:	2100      	movs	r1, #0
 800a472:	480a      	ldr	r0, [pc, #40]	; (800a49c <DRV_moveBackwardRight+0x64>)
 800a474:	f000 fc6c 	bl	800ad50 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 800a478:	68f9      	ldr	r1, [r7, #12]
 800a47a:	4809      	ldr	r0, [pc, #36]	; (800a4a0 <DRV_moveBackwardRight+0x68>)
 800a47c:	f000 fc68 	bl	800ad50 <MTR_setSpeed>
  }

  return;
 800a480:	bf00      	nop
 800a482:	bf00      	nop
}
 800a484:	3710      	adds	r7, #16
 800a486:	46bd      	mov	sp, r7
 800a488:	bd80      	pop	{r7, pc}
 800a48a:	bf00      	nop
 800a48c:	0800f154 	.word	0x0800f154
 800a490:	20000261 	.word	0x20000261
 800a494:	20000324 	.word	0x20000324
 800a498:	20000348 	.word	0x20000348
 800a49c:	20000390 	.word	0x20000390
 800a4a0:	2000036c 	.word	0x2000036c

0800a4a4 <DRV_moveBackwardLeft>:

static void DRV_moveBackwardLeft(uint32_t p_speed)
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b084      	sub	sp, #16
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	60fb      	str	r3, [r7, #12]

  LOG_debug("Moving backward-left @%u", l_speed);
 800a4b0:	68fa      	ldr	r2, [r7, #12]
 800a4b2:	4911      	ldr	r1, [pc, #68]	; (800a4f8 <DRV_moveBackwardLeft+0x54>)
 800a4b4:	2000      	movs	r0, #0
 800a4b6:	f000 fa81 	bl	800a9bc <LOG_log>

  DRV_setDirectionsBackwardLeft();
 800a4ba:	f7ff fe47 	bl	800a14c <DRV_setDirectionsBackwardLeft>

  if (g_DRV_areMotorsOn == false)
 800a4be:	4b0f      	ldr	r3, [pc, #60]	; (800a4fc <DRV_moveBackwardLeft+0x58>)
 800a4c0:	781b      	ldrb	r3, [r3, #0]
 800a4c2:	f083 0301 	eor.w	r3, r3, #1
 800a4c6:	b2db      	uxtb	r3, r3
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d110      	bne.n	800a4ee <DRV_moveBackwardLeft+0x4a>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight,       0);
 800a4cc:	2100      	movs	r1, #0
 800a4ce:	480c      	ldr	r0, [pc, #48]	; (800a500 <DRV_moveBackwardLeft+0x5c>)
 800a4d0:	f000 fc3e 	bl	800ad50 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 800a4d4:	68f9      	ldr	r1, [r7, #12]
 800a4d6:	480b      	ldr	r0, [pc, #44]	; (800a504 <DRV_moveBackwardLeft+0x60>)
 800a4d8:	f000 fc3a 	bl	800ad50 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 800a4dc:	68f9      	ldr	r1, [r7, #12]
 800a4de:	480a      	ldr	r0, [pc, #40]	; (800a508 <DRV_moveBackwardLeft+0x64>)
 800a4e0:	f000 fc36 	bl	800ad50 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  ,       0);
 800a4e4:	2100      	movs	r1, #0
 800a4e6:	4809      	ldr	r0, [pc, #36]	; (800a50c <DRV_moveBackwardLeft+0x68>)
 800a4e8:	f000 fc32 	bl	800ad50 <MTR_setSpeed>
  }

  return;
 800a4ec:	bf00      	nop
 800a4ee:	bf00      	nop
}
 800a4f0:	3710      	adds	r7, #16
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	bd80      	pop	{r7, pc}
 800a4f6:	bf00      	nop
 800a4f8:	0800f170 	.word	0x0800f170
 800a4fc:	20000261 	.word	0x20000261
 800a500:	20000324 	.word	0x20000324
 800a504:	20000348 	.word	0x20000348
 800a508:	20000390 	.word	0x20000390
 800a50c:	2000036c 	.word	0x2000036c

0800a510 <DRV_turnLeft>:

static void DRV_turnLeft(uint32_t p_speed)
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b084      	sub	sp, #16
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	60fb      	str	r3, [r7, #12]

  LOG_debug("Turning left @%u", l_speed);
 800a51c:	68fa      	ldr	r2, [r7, #12]
 800a51e:	4911      	ldr	r1, [pc, #68]	; (800a564 <DRV_turnLeft+0x54>)
 800a520:	2000      	movs	r0, #0
 800a522:	f000 fa4b 	bl	800a9bc <LOG_log>

  DRV_setDirectionsTurnLeft();
 800a526:	f7ff fe21 	bl	800a16c <DRV_setDirectionsTurnLeft>

  if (g_DRV_areMotorsOn == false)
 800a52a:	4b0f      	ldr	r3, [pc, #60]	; (800a568 <DRV_turnLeft+0x58>)
 800a52c:	781b      	ldrb	r3, [r3, #0]
 800a52e:	f083 0301 	eor.w	r3, r3, #1
 800a532:	b2db      	uxtb	r3, r3
 800a534:	2b00      	cmp	r3, #0
 800a536:	d110      	bne.n	800a55a <DRV_turnLeft+0x4a>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 800a538:	68f9      	ldr	r1, [r7, #12]
 800a53a:	480c      	ldr	r0, [pc, #48]	; (800a56c <DRV_turnLeft+0x5c>)
 800a53c:	f000 fc08 	bl	800ad50 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 800a540:	68f9      	ldr	r1, [r7, #12]
 800a542:	480b      	ldr	r0, [pc, #44]	; (800a570 <DRV_turnLeft+0x60>)
 800a544:	f000 fc04 	bl	800ad50 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 800a548:	68f9      	ldr	r1, [r7, #12]
 800a54a:	480a      	ldr	r0, [pc, #40]	; (800a574 <DRV_turnLeft+0x64>)
 800a54c:	f000 fc00 	bl	800ad50 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 800a550:	68f9      	ldr	r1, [r7, #12]
 800a552:	4809      	ldr	r0, [pc, #36]	; (800a578 <DRV_turnLeft+0x68>)
 800a554:	f000 fbfc 	bl	800ad50 <MTR_setSpeed>
  }

  return;
 800a558:	bf00      	nop
 800a55a:	bf00      	nop
}
 800a55c:	3710      	adds	r7, #16
 800a55e:	46bd      	mov	sp, r7
 800a560:	bd80      	pop	{r7, pc}
 800a562:	bf00      	nop
 800a564:	0800f18c 	.word	0x0800f18c
 800a568:	20000261 	.word	0x20000261
 800a56c:	20000324 	.word	0x20000324
 800a570:	20000348 	.word	0x20000348
 800a574:	20000390 	.word	0x20000390
 800a578:	2000036c 	.word	0x2000036c

0800a57c <DRV_turnRight>:

static void DRV_turnRight(uint32_t p_speed)
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b084      	sub	sp, #16
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	60fb      	str	r3, [r7, #12]

  LOG_debug("Turning right @%u", l_speed);
 800a588:	68fa      	ldr	r2, [r7, #12]
 800a58a:	4911      	ldr	r1, [pc, #68]	; (800a5d0 <DRV_turnRight+0x54>)
 800a58c:	2000      	movs	r0, #0
 800a58e:	f000 fa15 	bl	800a9bc <LOG_log>

  DRV_setDirectionsTurnRight();
 800a592:	f7ff fe07 	bl	800a1a4 <DRV_setDirectionsTurnRight>

  if (g_DRV_areMotorsOn == false)
 800a596:	4b0f      	ldr	r3, [pc, #60]	; (800a5d4 <DRV_turnRight+0x58>)
 800a598:	781b      	ldrb	r3, [r3, #0]
 800a59a:	f083 0301 	eor.w	r3, r3, #1
 800a59e:	b2db      	uxtb	r3, r3
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d110      	bne.n	800a5c6 <DRV_turnRight+0x4a>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 800a5a4:	68f9      	ldr	r1, [r7, #12]
 800a5a6:	480c      	ldr	r0, [pc, #48]	; (800a5d8 <DRV_turnRight+0x5c>)
 800a5a8:	f000 fbd2 	bl	800ad50 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 800a5ac:	68f9      	ldr	r1, [r7, #12]
 800a5ae:	480b      	ldr	r0, [pc, #44]	; (800a5dc <DRV_turnRight+0x60>)
 800a5b0:	f000 fbce 	bl	800ad50 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 800a5b4:	68f9      	ldr	r1, [r7, #12]
 800a5b6:	480a      	ldr	r0, [pc, #40]	; (800a5e0 <DRV_turnRight+0x64>)
 800a5b8:	f000 fbca 	bl	800ad50 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 800a5bc:	68f9      	ldr	r1, [r7, #12]
 800a5be:	4809      	ldr	r0, [pc, #36]	; (800a5e4 <DRV_turnRight+0x68>)
 800a5c0:	f000 fbc6 	bl	800ad50 <MTR_setSpeed>
  }

  return;
 800a5c4:	bf00      	nop
 800a5c6:	bf00      	nop
}
 800a5c8:	3710      	adds	r7, #16
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	bd80      	pop	{r7, pc}
 800a5ce:	bf00      	nop
 800a5d0:	0800f1a0 	.word	0x0800f1a0
 800a5d4:	20000261 	.word	0x20000261
 800a5d8:	20000324 	.word	0x20000324
 800a5dc:	20000348 	.word	0x20000348
 800a5e0:	20000390 	.word	0x20000390
 800a5e4:	2000036c 	.word	0x2000036c

0800a5e8 <DRV_translateLeft>:

static void DRV_translateLeft(uint32_t p_speed)
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b084      	sub	sp, #16
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	60fb      	str	r3, [r7, #12]

  LOG_debug("Translating left @%u", l_speed);
 800a5f4:	68fa      	ldr	r2, [r7, #12]
 800a5f6:	4911      	ldr	r1, [pc, #68]	; (800a63c <DRV_translateLeft+0x54>)
 800a5f8:	2000      	movs	r0, #0
 800a5fa:	f000 f9df 	bl	800a9bc <LOG_log>

  DRV_setDirectionsTranslateLeft();
 800a5fe:	f7ff fded 	bl	800a1dc <DRV_setDirectionsTranslateLeft>

  if (g_DRV_areMotorsOn == false)
 800a602:	4b0f      	ldr	r3, [pc, #60]	; (800a640 <DRV_translateLeft+0x58>)
 800a604:	781b      	ldrb	r3, [r3, #0]
 800a606:	f083 0301 	eor.w	r3, r3, #1
 800a60a:	b2db      	uxtb	r3, r3
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d110      	bne.n	800a632 <DRV_translateLeft+0x4a>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 800a610:	68f9      	ldr	r1, [r7, #12]
 800a612:	480c      	ldr	r0, [pc, #48]	; (800a644 <DRV_translateLeft+0x5c>)
 800a614:	f000 fb9c 	bl	800ad50 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 800a618:	68f9      	ldr	r1, [r7, #12]
 800a61a:	480b      	ldr	r0, [pc, #44]	; (800a648 <DRV_translateLeft+0x60>)
 800a61c:	f000 fb98 	bl	800ad50 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 800a620:	68f9      	ldr	r1, [r7, #12]
 800a622:	480a      	ldr	r0, [pc, #40]	; (800a64c <DRV_translateLeft+0x64>)
 800a624:	f000 fb94 	bl	800ad50 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 800a628:	68f9      	ldr	r1, [r7, #12]
 800a62a:	4809      	ldr	r0, [pc, #36]	; (800a650 <DRV_translateLeft+0x68>)
 800a62c:	f000 fb90 	bl	800ad50 <MTR_setSpeed>
  }

  return;
 800a630:	bf00      	nop
 800a632:	bf00      	nop
}
 800a634:	3710      	adds	r7, #16
 800a636:	46bd      	mov	sp, r7
 800a638:	bd80      	pop	{r7, pc}
 800a63a:	bf00      	nop
 800a63c:	0800f1b4 	.word	0x0800f1b4
 800a640:	20000261 	.word	0x20000261
 800a644:	20000324 	.word	0x20000324
 800a648:	20000348 	.word	0x20000348
 800a64c:	20000390 	.word	0x20000390
 800a650:	2000036c 	.word	0x2000036c

0800a654 <DRV_translateRight>:

static void DRV_translateRight(uint32_t p_speed)
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b084      	sub	sp, #16
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	60fb      	str	r3, [r7, #12]

  LOG_debug("Translating right @%u", l_speed);
 800a660:	68fa      	ldr	r2, [r7, #12]
 800a662:	4911      	ldr	r1, [pc, #68]	; (800a6a8 <DRV_translateRight+0x54>)
 800a664:	2000      	movs	r0, #0
 800a666:	f000 f9a9 	bl	800a9bc <LOG_log>

  DRV_setDirectionsTranslateRight();
 800a66a:	f7ff fdd3 	bl	800a214 <DRV_setDirectionsTranslateRight>

  if (g_DRV_areMotorsOn == false)
 800a66e:	4b0f      	ldr	r3, [pc, #60]	; (800a6ac <DRV_translateRight+0x58>)
 800a670:	781b      	ldrb	r3, [r3, #0]
 800a672:	f083 0301 	eor.w	r3, r3, #1
 800a676:	b2db      	uxtb	r3, r3
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d110      	bne.n	800a69e <DRV_translateRight+0x4a>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 800a67c:	68f9      	ldr	r1, [r7, #12]
 800a67e:	480c      	ldr	r0, [pc, #48]	; (800a6b0 <DRV_translateRight+0x5c>)
 800a680:	f000 fb66 	bl	800ad50 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 800a684:	68f9      	ldr	r1, [r7, #12]
 800a686:	480b      	ldr	r0, [pc, #44]	; (800a6b4 <DRV_translateRight+0x60>)
 800a688:	f000 fb62 	bl	800ad50 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 800a68c:	68f9      	ldr	r1, [r7, #12]
 800a68e:	480a      	ldr	r0, [pc, #40]	; (800a6b8 <DRV_translateRight+0x64>)
 800a690:	f000 fb5e 	bl	800ad50 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 800a694:	68f9      	ldr	r1, [r7, #12]
 800a696:	4809      	ldr	r0, [pc, #36]	; (800a6bc <DRV_translateRight+0x68>)
 800a698:	f000 fb5a 	bl	800ad50 <MTR_setSpeed>
  }

  return;
 800a69c:	bf00      	nop
 800a69e:	bf00      	nop
}
 800a6a0:	3710      	adds	r7, #16
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	bd80      	pop	{r7, pc}
 800a6a6:	bf00      	nop
 800a6a8:	0800f1cc 	.word	0x0800f1cc
 800a6ac:	20000261 	.word	0x20000261
 800a6b0:	20000324 	.word	0x20000324
 800a6b4:	20000348 	.word	0x20000348
 800a6b8:	20000390 	.word	0x20000390
 800a6bc:	2000036c 	.word	0x2000036c

0800a6c0 <ENC_init>:
#include "encoder.h"

#include "log.h"

void ENC_init(T_ENC_Handle *p_handle, char *p_name, bool p_invertOnUpdate, TIM_HandleTypeDef *p_encoderTimerHandle)
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b084      	sub	sp, #16
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	60f8      	str	r0, [r7, #12]
 800a6c8:	60b9      	str	r1, [r7, #8]
 800a6ca:	603b      	str	r3, [r7, #0]
 800a6cc:	4613      	mov	r3, r2
 800a6ce:	71fb      	strb	r3, [r7, #7]
  LOG_info("Initializing Encoder module for %s", p_name);
 800a6d0:	68ba      	ldr	r2, [r7, #8]
 800a6d2:	490a      	ldr	r1, [pc, #40]	; (800a6fc <ENC_init+0x3c>)
 800a6d4:	2001      	movs	r0, #1
 800a6d6:	f000 f971 	bl	800a9bc <LOG_log>

  p_handle->name           = p_name;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	68ba      	ldr	r2, [r7, #8]
 800a6de:	601a      	str	r2, [r3, #0]
  p_handle->invertOnUpdate = p_invertOnUpdate;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	79fa      	ldrb	r2, [r7, #7]
 800a6e4:	719a      	strb	r2, [r3, #6]
  p_handle->timerHandle    = p_encoderTimerHandle;
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	683a      	ldr	r2, [r7, #0]
 800a6ea:	609a      	str	r2, [r3, #8]

  ENC_reset(p_handle);
 800a6ec:	68f8      	ldr	r0, [r7, #12]
 800a6ee:	f000 f807 	bl	800a700 <ENC_reset>

  return;
 800a6f2:	bf00      	nop
}
 800a6f4:	3710      	adds	r7, #16
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	bd80      	pop	{r7, pc}
 800a6fa:	bf00      	nop
 800a6fc:	0800f1e4 	.word	0x0800f1e4

0800a700 <ENC_reset>:

void ENC_reset(T_ENC_Handle *p_handle)
{
 800a700:	b480      	push	{r7}
 800a702:	b083      	sub	sp, #12
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
  p_handle->value = 0;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2200      	movs	r2, #0
 800a70c:	809a      	strh	r2, [r3, #4]

  __HAL_TIM_SET_COUNTER(p_handle->timerHandle, 0);
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	689b      	ldr	r3, [r3, #8]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	2200      	movs	r2, #0
 800a716:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 800a718:	bf00      	nop
}
 800a71a:	370c      	adds	r7, #12
 800a71c:	46bd      	mov	sp, r7
 800a71e:	bc80      	pop	{r7}
 800a720:	4770      	bx	lr

0800a722 <ENC_update>:

void ENC_update(T_ENC_Handle *p_handle, int16_t p_value)
{
 800a722:	b480      	push	{r7}
 800a724:	b083      	sub	sp, #12
 800a726:	af00      	add	r7, sp, #0
 800a728:	6078      	str	r0, [r7, #4]
 800a72a:	460b      	mov	r3, r1
 800a72c:	807b      	strh	r3, [r7, #2]
  if (p_handle->invertOnUpdate == false)
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	799b      	ldrb	r3, [r3, #6]
 800a732:	f083 0301 	eor.w	r3, r3, #1
 800a736:	b2db      	uxtb	r3, r3
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d003      	beq.n	800a744 <ENC_update+0x22>
  {
    p_handle->value = p_value;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	887a      	ldrh	r2, [r7, #2]
 800a740:	809a      	strh	r2, [r3, #4]
  else
  {
    p_handle->value = -p_value;
  }

  return;
 800a742:	e006      	b.n	800a752 <ENC_update+0x30>
    p_handle->value = -p_value;
 800a744:	887b      	ldrh	r3, [r7, #2]
 800a746:	425b      	negs	r3, r3
 800a748:	b29b      	uxth	r3, r3
 800a74a:	b21a      	sxth	r2, r3
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	809a      	strh	r2, [r3, #4]
  return;
 800a750:	bf00      	nop
}
 800a752:	370c      	adds	r7, #12
 800a754:	46bd      	mov	sp, r7
 800a756:	bc80      	pop	{r7}
 800a758:	4770      	bx	lr

0800a75a <ENC_getCount>:

int16_t ENC_getCount(T_ENC_Handle *p_handle)
{
 800a75a:	b580      	push	{r7, lr}
 800a75c:	b084      	sub	sp, #16
 800a75e:	af00      	add	r7, sp, #0
 800a760:	6078      	str	r0, [r7, #4]
  int16_t l_count;

  l_count = p_handle->value;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	889b      	ldrh	r3, [r3, #4]
 800a766:	81fb      	strh	r3, [r7, #14]

  ENC_reset(p_handle);
 800a768:	6878      	ldr	r0, [r7, #4]
 800a76a:	f7ff ffc9 	bl	800a700 <ENC_reset>

  return l_count;
 800a76e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800a772:	4618      	mov	r0, r3
 800a774:	3710      	adds	r7, #16
 800a776:	46bd      	mov	sp, r7
 800a778:	bd80      	pop	{r7, pc}
	...

0800a77c <LED_setMode>:
#include "log.h"

static T_LED_MODE g_LED_mode = LED_MODE_BLINK_SLOW;

void LED_setMode(T_LED_MODE p_mode)
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b082      	sub	sp, #8
 800a780:	af00      	add	r7, sp, #0
 800a782:	4603      	mov	r3, r0
 800a784:	71fb      	strb	r3, [r7, #7]
  if (p_mode != g_LED_mode)
 800a786:	4b1b      	ldr	r3, [pc, #108]	; (800a7f4 <LED_setMode+0x78>)
 800a788:	781b      	ldrb	r3, [r3, #0]
 800a78a:	79fa      	ldrb	r2, [r7, #7]
 800a78c:	429a      	cmp	r2, r3
 800a78e:	d02d      	beq.n	800a7ec <LED_setMode+0x70>
  {
    switch (p_mode)
 800a790:	79fb      	ldrb	r3, [r7, #7]
 800a792:	2b04      	cmp	r3, #4
 800a794:	d825      	bhi.n	800a7e2 <LED_setMode+0x66>
 800a796:	a201      	add	r2, pc, #4	; (adr r2, 800a79c <LED_setMode+0x20>)
 800a798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a79c:	0800a7b1 	.word	0x0800a7b1
 800a7a0:	0800a7bb 	.word	0x0800a7bb
 800a7a4:	0800a7c5 	.word	0x0800a7c5
 800a7a8:	0800a7cf 	.word	0x0800a7cf
 800a7ac:	0800a7d9 	.word	0x0800a7d9
    {
      case LED_MODE_FORCED_OFF:
        LOG_info("Turning LED OFF");
 800a7b0:	4911      	ldr	r1, [pc, #68]	; (800a7f8 <LED_setMode+0x7c>)
 800a7b2:	2001      	movs	r0, #1
 800a7b4:	f000 f902 	bl	800a9bc <LOG_log>
        break;
 800a7b8:	e014      	b.n	800a7e4 <LED_setMode+0x68>

      case LED_MODE_FORCED_ON:
        LOG_info("Turning LED ON");
 800a7ba:	4910      	ldr	r1, [pc, #64]	; (800a7fc <LED_setMode+0x80>)
 800a7bc:	2001      	movs	r0, #1
 800a7be:	f000 f8fd 	bl	800a9bc <LOG_log>
        break;
 800a7c2:	e00f      	b.n	800a7e4 <LED_setMode+0x68>

      case LED_MODE_BLINK_SLOW:
        LOG_info("Setting LED to blink slow");
 800a7c4:	490e      	ldr	r1, [pc, #56]	; (800a800 <LED_setMode+0x84>)
 800a7c6:	2001      	movs	r0, #1
 800a7c8:	f000 f8f8 	bl	800a9bc <LOG_log>
        break;
 800a7cc:	e00a      	b.n	800a7e4 <LED_setMode+0x68>

      case LED_MODE_BLINK_MEDIUM:
        LOG_info("Setting LED to blink medium");
 800a7ce:	490d      	ldr	r1, [pc, #52]	; (800a804 <LED_setMode+0x88>)
 800a7d0:	2001      	movs	r0, #1
 800a7d2:	f000 f8f3 	bl	800a9bc <LOG_log>
        break;
 800a7d6:	e005      	b.n	800a7e4 <LED_setMode+0x68>

      case LED_MODE_BLINK_FAST:
        LOG_info("Setting LED to blink fast");
 800a7d8:	490b      	ldr	r1, [pc, #44]	; (800a808 <LED_setMode+0x8c>)
 800a7da:	2001      	movs	r0, #1
 800a7dc:	f000 f8ee 	bl	800a9bc <LOG_log>
        break;
 800a7e0:	e000      	b.n	800a7e4 <LED_setMode+0x68>

      default:
        ; /* Nothing to do */
        break;
 800a7e2:	bf00      	nop
    }

    g_LED_mode = p_mode;
 800a7e4:	4a03      	ldr	r2, [pc, #12]	; (800a7f4 <LED_setMode+0x78>)
 800a7e6:	79fb      	ldrb	r3, [r7, #7]
 800a7e8:	7013      	strb	r3, [r2, #0]
  else
  {
    ; /* Nothong to do */
  }

  return;
 800a7ea:	bf00      	nop
 800a7ec:	bf00      	nop
}
 800a7ee:	3708      	adds	r7, #8
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	bd80      	pop	{r7, pc}
 800a7f4:	20000009 	.word	0x20000009
 800a7f8:	0800f208 	.word	0x0800f208
 800a7fc:	0800f218 	.word	0x0800f218
 800a800:	0800f228 	.word	0x0800f228
 800a804:	0800f244 	.word	0x0800f244
 800a808:	0800f260 	.word	0x0800f260

0800a80c <LED_update>:
{
  return g_LED_mode;
}

void LED_update(void)
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	af00      	add	r7, sp, #0
  static uint32_t l_blinkCounter = 0;

  switch (g_LED_mode)
 800a810:	4b2a      	ldr	r3, [pc, #168]	; (800a8bc <LED_update+0xb0>)
 800a812:	781b      	ldrb	r3, [r3, #0]
 800a814:	2b04      	cmp	r3, #4
 800a816:	d849      	bhi.n	800a8ac <LED_update+0xa0>
 800a818:	a201      	add	r2, pc, #4	; (adr r2, 800a820 <LED_update+0x14>)
 800a81a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a81e:	bf00      	nop
 800a820:	0800a835 	.word	0x0800a835
 800a824:	0800a843 	.word	0x0800a843
 800a828:	0800a851 	.word	0x0800a851
 800a82c:	0800a87f 	.word	0x0800a87f
 800a830:	0800a8a1 	.word	0x0800a8a1
  {
    case LED_MODE_FORCED_OFF:
      HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_SET);
 800a834:	2201      	movs	r2, #1
 800a836:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a83a:	4821      	ldr	r0, [pc, #132]	; (800a8c0 <LED_update+0xb4>)
 800a83c:	f7f9 fb28 	bl	8003e90 <HAL_GPIO_WritePin>
      break;
 800a840:	e039      	b.n	800a8b6 <LED_update+0xaa>

    case LED_MODE_FORCED_ON:
      HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 800a842:	2200      	movs	r2, #0
 800a844:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a848:	481d      	ldr	r0, [pc, #116]	; (800a8c0 <LED_update+0xb4>)
 800a84a:	f7f9 fb21 	bl	8003e90 <HAL_GPIO_WritePin>
      break;
 800a84e:	e032      	b.n	800a8b6 <LED_update+0xaa>

    case LED_MODE_BLINK_SLOW:
      l_blinkCounter++;
 800a850:	4b1c      	ldr	r3, [pc, #112]	; (800a8c4 <LED_update+0xb8>)
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	3301      	adds	r3, #1
 800a856:	4a1b      	ldr	r2, [pc, #108]	; (800a8c4 <LED_update+0xb8>)
 800a858:	6013      	str	r3, [r2, #0]
      if (l_blinkCounter % 5 == 0)
 800a85a:	4b1a      	ldr	r3, [pc, #104]	; (800a8c4 <LED_update+0xb8>)
 800a85c:	6819      	ldr	r1, [r3, #0]
 800a85e:	4b1a      	ldr	r3, [pc, #104]	; (800a8c8 <LED_update+0xbc>)
 800a860:	fba3 2301 	umull	r2, r3, r3, r1
 800a864:	089a      	lsrs	r2, r3, #2
 800a866:	4613      	mov	r3, r2
 800a868:	009b      	lsls	r3, r3, #2
 800a86a:	4413      	add	r3, r2
 800a86c:	1aca      	subs	r2, r1, r3
 800a86e:	2a00      	cmp	r2, #0
 800a870:	d11e      	bne.n	800a8b0 <LED_update+0xa4>
      {
        HAL_GPIO_TogglePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
 800a872:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a876:	4812      	ldr	r0, [pc, #72]	; (800a8c0 <LED_update+0xb4>)
 800a878:	f7f9 fb3c 	bl	8003ef4 <HAL_GPIO_TogglePin>
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 800a87c:	e018      	b.n	800a8b0 <LED_update+0xa4>

    case LED_MODE_BLINK_MEDIUM:
      l_blinkCounter++;
 800a87e:	4b11      	ldr	r3, [pc, #68]	; (800a8c4 <LED_update+0xb8>)
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	3301      	adds	r3, #1
 800a884:	4a0f      	ldr	r2, [pc, #60]	; (800a8c4 <LED_update+0xb8>)
 800a886:	6013      	str	r3, [r2, #0]
      if (l_blinkCounter % 2 == 0)
 800a888:	4b0e      	ldr	r3, [pc, #56]	; (800a8c4 <LED_update+0xb8>)
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	f003 0301 	and.w	r3, r3, #1
 800a890:	2b00      	cmp	r3, #0
 800a892:	d10f      	bne.n	800a8b4 <LED_update+0xa8>
      {
        HAL_GPIO_TogglePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
 800a894:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a898:	4809      	ldr	r0, [pc, #36]	; (800a8c0 <LED_update+0xb4>)
 800a89a:	f7f9 fb2b 	bl	8003ef4 <HAL_GPIO_TogglePin>
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 800a89e:	e009      	b.n	800a8b4 <LED_update+0xa8>

    case LED_MODE_BLINK_FAST:
      HAL_GPIO_TogglePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
 800a8a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a8a4:	4806      	ldr	r0, [pc, #24]	; (800a8c0 <LED_update+0xb4>)
 800a8a6:	f7f9 fb25 	bl	8003ef4 <HAL_GPIO_TogglePin>
      break;
 800a8aa:	e004      	b.n	800a8b6 <LED_update+0xaa>

    default:
      ; /* Nothing to do */
      break;
 800a8ac:	bf00      	nop
 800a8ae:	e002      	b.n	800a8b6 <LED_update+0xaa>
      break;
 800a8b0:	bf00      	nop
 800a8b2:	e000      	b.n	800a8b6 <LED_update+0xaa>
      break;
 800a8b4:	bf00      	nop
  }

  return;
 800a8b6:	bf00      	nop
}
 800a8b8:	bd80      	pop	{r7, pc}
 800a8ba:	bf00      	nop
 800a8bc:	20000009 	.word	0x20000009
 800a8c0:	40011000 	.word	0x40011000
 800a8c4:	200004a4 	.word	0x200004a4
 800a8c8:	cccccccd 	.word	0xcccccccd

0800a8cc <LOG_init>:
{
  "DEBUG", "INFO", "WARNING", "ERROR"
};

void LOG_init(RTC_HandleTypeDef *p_rctHandle, bool p_isLogOn)
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b082      	sub	sp, #8
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
 800a8d4:	460b      	mov	r3, r1
 800a8d6:	70fb      	strb	r3, [r7, #3]
  g_LOG_isOn      = p_isLogOn;
 800a8d8:	4a06      	ldr	r2, [pc, #24]	; (800a8f4 <LOG_init+0x28>)
 800a8da:	78fb      	ldrb	r3, [r7, #3]
 800a8dc:	7013      	strb	r3, [r2, #0]
  g_LOG_rtcHandle = p_rctHandle;
 800a8de:	4a06      	ldr	r2, [pc, #24]	; (800a8f8 <LOG_init+0x2c>)
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	6013      	str	r3, [r2, #0]

  LOG_info("LOG initialized");
 800a8e4:	4905      	ldr	r1, [pc, #20]	; (800a8fc <LOG_init+0x30>)
 800a8e6:	2001      	movs	r0, #1
 800a8e8:	f000 f868 	bl	800a9bc <LOG_log>

  return;
 800a8ec:	bf00      	nop
}
 800a8ee:	3708      	adds	r7, #8
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	bd80      	pop	{r7, pc}
 800a8f4:	200004a8 	.word	0x200004a8
 800a8f8:	200004ac 	.word	0x200004ac
 800a8fc:	0800f29c 	.word	0x0800f29c

0800a900 <LOG_toggleOnOff>:

void LOG_toggleOnOff(void)
{
 800a900:	b580      	push	{r7, lr}
 800a902:	af00      	add	r7, sp, #0
  if (g_LOG_isOn == true)
 800a904:	4b0a      	ldr	r3, [pc, #40]	; (800a930 <LOG_toggleOnOff+0x30>)
 800a906:	781b      	ldrb	r3, [r3, #0]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d007      	beq.n	800a91c <LOG_toggleOnOff+0x1c>
  {
    LOG_info("Turning LOG OFF");
 800a90c:	4909      	ldr	r1, [pc, #36]	; (800a934 <LOG_toggleOnOff+0x34>)
 800a90e:	2001      	movs	r0, #1
 800a910:	f000 f854 	bl	800a9bc <LOG_log>

    g_LOG_isOn = false;
 800a914:	4b06      	ldr	r3, [pc, #24]	; (800a930 <LOG_toggleOnOff+0x30>)
 800a916:	2200      	movs	r2, #0
 800a918:	701a      	strb	r2, [r3, #0]
    g_LOG_isOn = true;

    LOG_info("Turning LOG ON");
  }

  return;
 800a91a:	e007      	b.n	800a92c <LOG_toggleOnOff+0x2c>
    g_LOG_isOn = true;
 800a91c:	4b04      	ldr	r3, [pc, #16]	; (800a930 <LOG_toggleOnOff+0x30>)
 800a91e:	2201      	movs	r2, #1
 800a920:	701a      	strb	r2, [r3, #0]
    LOG_info("Turning LOG ON");
 800a922:	4905      	ldr	r1, [pc, #20]	; (800a938 <LOG_toggleOnOff+0x38>)
 800a924:	2001      	movs	r0, #1
 800a926:	f000 f849 	bl	800a9bc <LOG_log>
  return;
 800a92a:	bf00      	nop
}
 800a92c:	bd80      	pop	{r7, pc}
 800a92e:	bf00      	nop
 800a930:	200004a8 	.word	0x200004a8
 800a934:	0800f2ac 	.word	0x0800f2ac
 800a938:	0800f2bc 	.word	0x0800f2bc

0800a93c <LOG_setLevel>:

void LOG_setLevel(T_LOG_LEVEL p_level)
{
 800a93c:	b480      	push	{r7}
 800a93e:	b083      	sub	sp, #12
 800a940:	af00      	add	r7, sp, #0
 800a942:	4603      	mov	r3, r0
 800a944:	71fb      	strb	r3, [r7, #7]
  g_LOG_level = p_level;
 800a946:	4a04      	ldr	r2, [pc, #16]	; (800a958 <LOG_setLevel+0x1c>)
 800a948:	79fb      	ldrb	r3, [r7, #7]
 800a94a:	7013      	strb	r3, [r2, #0]

  return;
 800a94c:	bf00      	nop
}
 800a94e:	370c      	adds	r7, #12
 800a950:	46bd      	mov	sp, r7
 800a952:	bc80      	pop	{r7}
 800a954:	4770      	bx	lr
 800a956:	bf00      	nop
 800a958:	200004a9 	.word	0x200004a9

0800a95c <LOG_increaseLevel>:

void LOG_increaseLevel(void)
{
 800a95c:	b580      	push	{r7, lr}
 800a95e:	af00      	add	r7, sp, #0
  /* Display more detailed logs */
  if (g_LOG_level > LOG_LEVEL_DEBUG)
 800a960:	4b08      	ldr	r3, [pc, #32]	; (800a984 <LOG_increaseLevel+0x28>)
 800a962:	781b      	ldrb	r3, [r3, #0]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d00a      	beq.n	800a97e <LOG_increaseLevel+0x22>
  {
    LOG_info("Increasing LOG level");
 800a968:	4907      	ldr	r1, [pc, #28]	; (800a988 <LOG_increaseLevel+0x2c>)
 800a96a:	2001      	movs	r0, #1
 800a96c:	f000 f826 	bl	800a9bc <LOG_log>

    g_LOG_level--;
 800a970:	4b04      	ldr	r3, [pc, #16]	; (800a984 <LOG_increaseLevel+0x28>)
 800a972:	781b      	ldrb	r3, [r3, #0]
 800a974:	3b01      	subs	r3, #1
 800a976:	b2da      	uxtb	r2, r3
 800a978:	4b02      	ldr	r3, [pc, #8]	; (800a984 <LOG_increaseLevel+0x28>)
 800a97a:	701a      	strb	r2, [r3, #0]
  else
  {
    ; /* Nothing to do */
  }

  return;
 800a97c:	bf00      	nop
 800a97e:	bf00      	nop
}
 800a980:	bd80      	pop	{r7, pc}
 800a982:	bf00      	nop
 800a984:	200004a9 	.word	0x200004a9
 800a988:	0800f2cc 	.word	0x0800f2cc

0800a98c <LOG_decreaseLevel>:

void LOG_decreaseLevel(void)
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	af00      	add	r7, sp, #0
  /* Display less detailed logs */
  if (g_LOG_level < LOG_LEVEL_ERROR)
 800a990:	4b08      	ldr	r3, [pc, #32]	; (800a9b4 <LOG_decreaseLevel+0x28>)
 800a992:	781b      	ldrb	r3, [r3, #0]
 800a994:	2b02      	cmp	r3, #2
 800a996:	d80a      	bhi.n	800a9ae <LOG_decreaseLevel+0x22>
  {
    LOG_info("Decreasing LOG level");
 800a998:	4907      	ldr	r1, [pc, #28]	; (800a9b8 <LOG_decreaseLevel+0x2c>)
 800a99a:	2001      	movs	r0, #1
 800a99c:	f000 f80e 	bl	800a9bc <LOG_log>

    g_LOG_level++;
 800a9a0:	4b04      	ldr	r3, [pc, #16]	; (800a9b4 <LOG_decreaseLevel+0x28>)
 800a9a2:	781b      	ldrb	r3, [r3, #0]
 800a9a4:	3301      	adds	r3, #1
 800a9a6:	b2da      	uxtb	r2, r3
 800a9a8:	4b02      	ldr	r3, [pc, #8]	; (800a9b4 <LOG_decreaseLevel+0x28>)
 800a9aa:	701a      	strb	r2, [r3, #0]
  else
  {
    ; /* Nothing to do */
  }

  return;
 800a9ac:	bf00      	nop
 800a9ae:	bf00      	nop
}
 800a9b0:	bd80      	pop	{r7, pc}
 800a9b2:	bf00      	nop
 800a9b4:	200004a9 	.word	0x200004a9
 800a9b8:	0800f2e4 	.word	0x0800f2e4

0800a9bc <LOG_log>:

void LOG_log(T_LOG_LEVEL p_level, const char *p_format, ...)
{
 800a9bc:	b40e      	push	{r1, r2, r3}
 800a9be:	b590      	push	{r4, r7, lr}
 800a9c0:	b0a8      	sub	sp, #160	; 0xa0
 800a9c2:	af02      	add	r7, sp, #8
 800a9c4:	4603      	mov	r3, r0
 800a9c6:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef l_halReturnCode;
  va_list           l_argumentsList;
  RTC_TimeTypeDef   l_time;
  RTC_DateTypeDef   l_date;

  if ((g_LOG_isOn == true) && (p_level >= g_LOG_level))
 800a9c8:	4b3e      	ldr	r3, [pc, #248]	; (800aac4 <LOG_log+0x108>)
 800a9ca:	781b      	ldrb	r3, [r3, #0]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d071      	beq.n	800aab4 <LOG_log+0xf8>
 800a9d0:	4b3d      	ldr	r3, [pc, #244]	; (800aac8 <LOG_log+0x10c>)
 800a9d2:	781b      	ldrb	r3, [r3, #0]
 800a9d4:	79fa      	ldrb	r2, [r7, #7]
 800a9d6:	429a      	cmp	r2, r3
 800a9d8:	d36c      	bcc.n	800aab4 <LOG_log+0xf8>
  {
    l_halReturnCode = HAL_RTC_GetTime(g_LOG_rtcHandle, &l_time, RTC_FORMAT_BCD);
 800a9da:	4b3c      	ldr	r3, [pc, #240]	; (800aacc <LOG_log+0x110>)
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	f107 010c 	add.w	r1, r7, #12
 800a9e2:	2201      	movs	r2, #1
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	f7fa fc35 	bl	8005254 <HAL_RTC_GetTime>
 800a9ea:	4603      	mov	r3, r0
 800a9ec:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

    if (l_halReturnCode != HAL_OK)
 800a9f0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d004      	beq.n	800aa02 <LOG_log+0x46>
    {
      /* As this method is for logging/debug, just reset time in case of failure */
      UTI_resetRtcTime(&l_time);
 800a9f8:	f107 030c 	add.w	r3, r7, #12
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	f000 fd0e 	bl	800b41e <UTI_resetRtcTime>
    else
    {
      ; /* Nothing to do */
    }

    l_halReturnCode = HAL_RTC_GetDate(g_LOG_rtcHandle, &l_date, RTC_FORMAT_BCD);
 800aa02:	4b32      	ldr	r3, [pc, #200]	; (800aacc <LOG_log+0x110>)
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	f107 0108 	add.w	r1, r7, #8
 800aa0a:	2201      	movs	r2, #1
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	f7fa fe25 	bl	800565c <HAL_RTC_GetDate>
 800aa12:	4603      	mov	r3, r0
 800aa14:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

    if (l_halReturnCode != HAL_OK)
 800aa18:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d004      	beq.n	800aa2a <LOG_log+0x6e>
    {
      /* As this method is for logging/debug, just reset date in case of failure */
      UTI_resetRtcDate(&l_date);
 800aa20:	f107 0308 	add.w	r3, r7, #8
 800aa24:	4618      	mov	r0, r3
 800aa26:	f000 fce5 	bl	800b3f4 <UTI_resetRtcDate>
    else
    {
      ; /* Nothing to do */
    }

    va_start(l_argumentsList, p_format);
 800aa2a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800aa2e:	613b      	str	r3, [r7, #16]

    (void)sprintf  ( l_buffer, "%-7s - %02x:%02x:%02x - ", g_LOG_levelStrings[p_level], l_time.Hours, l_time.Minutes, l_time.Seconds);
 800aa30:	79fb      	ldrb	r3, [r7, #7]
 800aa32:	4a27      	ldr	r2, [pc, #156]	; (800aad0 <LOG_log+0x114>)
 800aa34:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800aa38:	7b3b      	ldrb	r3, [r7, #12]
 800aa3a:	461c      	mov	r4, r3
 800aa3c:	7b7b      	ldrb	r3, [r7, #13]
 800aa3e:	7bb9      	ldrb	r1, [r7, #14]
 800aa40:	f107 0014 	add.w	r0, r7, #20
 800aa44:	9101      	str	r1, [sp, #4]
 800aa46:	9300      	str	r3, [sp, #0]
 800aa48:	4623      	mov	r3, r4
 800aa4a:	4922      	ldr	r1, [pc, #136]	; (800aad4 <LOG_log+0x118>)
 800aa4c:	f001 fb00 	bl	800c050 <siprintf>
    /* 21 is the length of string "%-7s - %02x:%02x:%02x - ". 2 is the length of string "\r\n". */
    /* So we start and write format right after the former and we keep space for the latter.    */
    (void)vsnprintf(&l_buffer[21], CST_CONSOLE_TX_MAX_STRING_LENGTH - 21 - 2, p_format, l_argumentsList);
 800aa50:	f107 0314 	add.w	r3, r7, #20
 800aa54:	f103 0015 	add.w	r0, r3, #21
 800aa58:	693b      	ldr	r3, [r7, #16]
 800aa5a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800aa5e:	2169      	movs	r1, #105	; 0x69
 800aa60:	f001 fbf2 	bl	800c248 <vsniprintf>
    (void)strcat   ( l_buffer    , "\r\n");
 800aa64:	f107 0314 	add.w	r3, r7, #20
 800aa68:	4618      	mov	r0, r3
 800aa6a:	f7f5 fbdd 	bl	8000228 <strlen>
 800aa6e:	4603      	mov	r3, r0
 800aa70:	461a      	mov	r2, r3
 800aa72:	f107 0314 	add.w	r3, r7, #20
 800aa76:	4413      	add	r3, r2
 800aa78:	4a17      	ldr	r2, [pc, #92]	; (800aad8 <LOG_log+0x11c>)
 800aa7a:	8811      	ldrh	r1, [r2, #0]
 800aa7c:	7892      	ldrb	r2, [r2, #2]
 800aa7e:	8019      	strh	r1, [r3, #0]
 800aa80:	709a      	strb	r2, [r3, #2]

    /* -1 is there to consider the end/null character, which strnlen() does not count */
    if (strnlen(l_buffer, CST_CONSOLE_TX_MAX_STRING_LENGTH) == CST_CONSOLE_TX_MAX_STRING_LENGTH - 1)
 800aa82:	f107 0314 	add.w	r3, r7, #20
 800aa86:	2180      	movs	r1, #128	; 0x80
 800aa88:	4618      	mov	r0, r3
 800aa8a:	f001 fb14 	bl	800c0b6 <strnlen>
 800aa8e:	4603      	mov	r3, r0
 800aa90:	2b7f      	cmp	r3, #127	; 0x7f
 800aa92:	d108      	bne.n	800aaa6 <LOG_log+0xea>
    {
      /* At -1, we got the end/null character. At -2 & 3, we got "\r\n". */
      l_buffer[CST_CONSOLE_TX_MAX_STRING_LENGTH - 4] = '.';
 800aa94:	232e      	movs	r3, #46	; 0x2e
 800aa96:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
      l_buffer[CST_CONSOLE_TX_MAX_STRING_LENGTH - 5] = '.';
 800aa9a:	232e      	movs	r3, #46	; 0x2e
 800aa9c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
      l_buffer[CST_CONSOLE_TX_MAX_STRING_LENGTH - 6] = '.';
 800aaa0:	232e      	movs	r3, #46	; 0x2e
 800aaa2:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
    else
    {
      ; /* Nothing to do */
    }

    (void)printf("%s", l_buffer);
 800aaa6:	f107 0314 	add.w	r3, r7, #20
 800aaaa:	4619      	mov	r1, r3
 800aaac:	480b      	ldr	r0, [pc, #44]	; (800aadc <LOG_log+0x120>)
 800aaae:	f001 faa7 	bl	800c000 <iprintf>
  else
  {
    ; /* Nothing to do */
  }

  return;
 800aab2:	bf00      	nop
 800aab4:	bf00      	nop
}
 800aab6:	3798      	adds	r7, #152	; 0x98
 800aab8:	46bd      	mov	sp, r7
 800aaba:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800aabe:	b003      	add	sp, #12
 800aac0:	4770      	bx	lr
 800aac2:	bf00      	nop
 800aac4:	200004a8 	.word	0x200004a8
 800aac8:	200004a9 	.word	0x200004a9
 800aacc:	200004ac 	.word	0x200004ac
 800aad0:	2000000c 	.word	0x2000000c
 800aad4:	0800f2fc 	.word	0x0800f2fc
 800aad8:	0800f318 	.word	0x0800f318
 800aadc:	0800f31c 	.word	0x0800f31c

0800aae0 <MAS_init>:
static T_SFO_data          g_MAS_data;
static uint32_t            g_MAS_dataSize;
static bool                g_MAS_isDataComplete;

void MAS_init(UART_HandleTypeDef *p_uartHandle)
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b082      	sub	sp, #8
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
  LOG_info("Initializing master connection");
 800aae8:	490d      	ldr	r1, [pc, #52]	; (800ab20 <MAS_init+0x40>)
 800aaea:	2001      	movs	r0, #1
 800aaec:	f7ff ff66 	bl	800a9bc <LOG_log>

  g_MAS_uartHandle     = p_uartHandle;
 800aaf0:	4a0c      	ldr	r2, [pc, #48]	; (800ab24 <MAS_init+0x44>)
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	6013      	str	r3, [r2, #0]
  g_MAS_dataSize       = 0;
 800aaf6:	4b0c      	ldr	r3, [pc, #48]	; (800ab28 <MAS_init+0x48>)
 800aaf8:	2200      	movs	r2, #0
 800aafa:	601a      	str	r2, [r3, #0]
  g_MAS_isDataComplete = false;
 800aafc:	4b0b      	ldr	r3, [pc, #44]	; (800ab2c <MAS_init+0x4c>)
 800aafe:	2200      	movs	r2, #0
 800ab00:	701a      	strb	r2, [r3, #0]

  SFO_initData(&g_MAS_data);
 800ab02:	480b      	ldr	r0, [pc, #44]	; (800ab30 <MAS_init+0x50>)
 800ab04:	f000 fb3a 	bl	800b17c <SFO_initData>

  HAL_UART_Receive_IT(g_MAS_uartHandle, &g_MAS_datum, 1);
 800ab08:	4b06      	ldr	r3, [pc, #24]	; (800ab24 <MAS_init+0x44>)
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	2201      	movs	r2, #1
 800ab0e:	4909      	ldr	r1, [pc, #36]	; (800ab34 <MAS_init+0x54>)
 800ab10:	4618      	mov	r0, r3
 800ab12:	f7fd fc49 	bl	80083a8 <HAL_UART_Receive_IT>

  return;
 800ab16:	bf00      	nop
}
 800ab18:	3708      	adds	r7, #8
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	bd80      	pop	{r7, pc}
 800ab1e:	bf00      	nop
 800ab20:	0800f320 	.word	0x0800f320
 800ab24:	200004b0 	.word	0x200004b0
 800ab28:	200004c8 	.word	0x200004c8
 800ab2c:	200004cc 	.word	0x200004cc
 800ab30:	200004b8 	.word	0x200004b8
 800ab34:	200004b4 	.word	0x200004b4

0800ab38 <MAS_receiveData>:

void MAS_receiveData(void)
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	af00      	add	r7, sp, #0
  /* If previous command was not processed yet, drop datum, */
  /* which will lead to an error, showing a design issue... */
  if (g_MAS_isDataComplete == true)
 800ab3c:	4b0f      	ldr	r3, [pc, #60]	; (800ab7c <MAS_receiveData+0x44>)
 800ab3e:	781b      	ldrb	r3, [r3, #0]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d112      	bne.n	800ab6a <MAS_receiveData+0x32>
  {
    ; /* Nothing to do */
  }
  else
  {
    if (g_MAS_datum == '\r')
 800ab44:	4b0e      	ldr	r3, [pc, #56]	; (800ab80 <MAS_receiveData+0x48>)
 800ab46:	781b      	ldrb	r3, [r3, #0]
 800ab48:	2b0d      	cmp	r3, #13
 800ab4a:	d103      	bne.n	800ab54 <MAS_receiveData+0x1c>
    {
      g_MAS_isDataComplete = true;
 800ab4c:	4b0b      	ldr	r3, [pc, #44]	; (800ab7c <MAS_receiveData+0x44>)
 800ab4e:	2201      	movs	r2, #1
 800ab50:	701a      	strb	r2, [r3, #0]
 800ab52:	e00a      	b.n	800ab6a <MAS_receiveData+0x32>
    }
    else
    {
      g_MAS_data[g_MAS_dataSize] = g_MAS_datum;
 800ab54:	4b0b      	ldr	r3, [pc, #44]	; (800ab84 <MAS_receiveData+0x4c>)
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	4a09      	ldr	r2, [pc, #36]	; (800ab80 <MAS_receiveData+0x48>)
 800ab5a:	7811      	ldrb	r1, [r2, #0]
 800ab5c:	4a0a      	ldr	r2, [pc, #40]	; (800ab88 <MAS_receiveData+0x50>)
 800ab5e:	54d1      	strb	r1, [r2, r3]
      g_MAS_dataSize++;
 800ab60:	4b08      	ldr	r3, [pc, #32]	; (800ab84 <MAS_receiveData+0x4c>)
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	3301      	adds	r3, #1
 800ab66:	4a07      	ldr	r2, [pc, #28]	; (800ab84 <MAS_receiveData+0x4c>)
 800ab68:	6013      	str	r3, [r2, #0]
    }
  }

  HAL_UART_Receive_IT(g_MAS_uartHandle, &g_MAS_datum, 1);
 800ab6a:	4b08      	ldr	r3, [pc, #32]	; (800ab8c <MAS_receiveData+0x54>)
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	2201      	movs	r2, #1
 800ab70:	4903      	ldr	r1, [pc, #12]	; (800ab80 <MAS_receiveData+0x48>)
 800ab72:	4618      	mov	r0, r3
 800ab74:	f7fd fc18 	bl	80083a8 <HAL_UART_Receive_IT>

  return;
 800ab78:	bf00      	nop
}
 800ab7a:	bd80      	pop	{r7, pc}
 800ab7c:	200004cc 	.word	0x200004cc
 800ab80:	200004b4 	.word	0x200004b4
 800ab84:	200004c8 	.word	0x200004c8
 800ab88:	200004b8 	.word	0x200004b8
 800ab8c:	200004b0 	.word	0x200004b0

0800ab90 <MAS_updateFifo>:

void MAS_updateFifo(T_SFO_Context *p_fifo)
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b082      	sub	sp, #8
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
  if (g_MAS_isDataComplete == false)
 800ab98:	4b0c      	ldr	r3, [pc, #48]	; (800abcc <MAS_updateFifo+0x3c>)
 800ab9a:	781b      	ldrb	r3, [r3, #0]
 800ab9c:	f083 0301 	eor.w	r3, r3, #1
 800aba0:	b2db      	uxtb	r3, r3
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d10d      	bne.n	800abc2 <MAS_updateFifo+0x32>
  {
    ; /* Nothing to do */
  }
  else
  {
    SFO_push    (p_fifo, &g_MAS_data);
 800aba6:	490a      	ldr	r1, [pc, #40]	; (800abd0 <MAS_updateFifo+0x40>)
 800aba8:	6878      	ldr	r0, [r7, #4]
 800abaa:	f000 fb0d 	bl	800b1c8 <SFO_push>
    SFO_initData(&g_MAS_data);
 800abae:	4808      	ldr	r0, [pc, #32]	; (800abd0 <MAS_updateFifo+0x40>)
 800abb0:	f000 fae4 	bl	800b17c <SFO_initData>

    g_MAS_dataSize       = 0;
 800abb4:	4b07      	ldr	r3, [pc, #28]	; (800abd4 <MAS_updateFifo+0x44>)
 800abb6:	2200      	movs	r2, #0
 800abb8:	601a      	str	r2, [r3, #0]
    g_MAS_isDataComplete = false;
 800abba:	4b04      	ldr	r3, [pc, #16]	; (800abcc <MAS_updateFifo+0x3c>)
 800abbc:	2200      	movs	r2, #0
 800abbe:	701a      	strb	r2, [r3, #0]
  }

  return;
 800abc0:	bf00      	nop
 800abc2:	bf00      	nop
}
 800abc4:	3708      	adds	r7, #8
 800abc6:	46bd      	mov	sp, r7
 800abc8:	bd80      	pop	{r7, pc}
 800abca:	bf00      	nop
 800abcc:	200004cc 	.word	0x200004cc
 800abd0:	200004b8 	.word	0x200004b8
 800abd4:	200004c8 	.word	0x200004c8

0800abd8 <MAS_sendString>:

void MAS_sendString(char *p_string, uint32_t p_length)
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b082      	sub	sp, #8
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
 800abe0:	6039      	str	r1, [r7, #0]
  /* As this method is using for logging/debug, we will not deal with failure cases */
 (void)HAL_UART_Transmit(g_MAS_uartHandle,
 800abe2:	4b06      	ldr	r3, [pc, #24]	; (800abfc <MAS_sendString+0x24>)
 800abe4:	6818      	ldr	r0, [r3, #0]
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	b29a      	uxth	r2, r3
 800abea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800abee:	6879      	ldr	r1, [r7, #4]
 800abf0:	f7fd fb48 	bl	8008284 <HAL_UART_Transmit>
              (uint8_t *)p_string,
                         p_length,
                         CST_UART_TRANSMIT_TIMEOUT_IN_MS);

  return;
 800abf4:	bf00      	nop
}
 800abf6:	3708      	adds	r7, #8
 800abf8:	46bd      	mov	sp, r7
 800abfa:	bd80      	pop	{r7, pc}
 800abfc:	200004b0 	.word	0x200004b0

0800ac00 <MTR_init>:
              uint32_t           p_dirPin1,
              GPIO_TypeDef      *p_dirPin2Port,
              uint32_t           p_dirPin2,
              TIM_HandleTypeDef *p_pwmTimerHandle,
              uint32_t           p_pwmChannel)
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b084      	sub	sp, #16
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	60f8      	str	r0, [r7, #12]
 800ac08:	60b9      	str	r1, [r7, #8]
 800ac0a:	607a      	str	r2, [r7, #4]
 800ac0c:	603b      	str	r3, [r7, #0]
  LOG_info("Initializing Motor module for %s", p_name);
 800ac0e:	68ba      	ldr	r2, [r7, #8]
 800ac10:	4912      	ldr	r1, [pc, #72]	; (800ac5c <MTR_init+0x5c>)
 800ac12:	2001      	movs	r0, #1
 800ac14:	f7ff fed2 	bl	800a9bc <LOG_log>

  p_handle->name           = p_name;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	68ba      	ldr	r2, [r7, #8]
 800ac1c:	601a      	str	r2, [r3, #0]
  p_handle->dirPin1Port    = p_dirPin1Port;
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	687a      	ldr	r2, [r7, #4]
 800ac22:	605a      	str	r2, [r3, #4]
  p_handle->dirPin1        = p_dirPin1;
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	683a      	ldr	r2, [r7, #0]
 800ac28:	609a      	str	r2, [r3, #8]
  p_handle->dirPin2Port    = p_dirPin2Port;
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	69ba      	ldr	r2, [r7, #24]
 800ac2e:	60da      	str	r2, [r3, #12]
  p_handle->dirPin2        = p_dirPin2;
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	69fa      	ldr	r2, [r7, #28]
 800ac34:	611a      	str	r2, [r3, #16]
  p_handle->pwmTimerHandle = p_pwmTimerHandle;
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	6a3a      	ldr	r2, [r7, #32]
 800ac3a:	61da      	str	r2, [r3, #28]
  p_handle->pwmChannel     = p_pwmChannel;
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac40:	621a      	str	r2, [r3, #32]

  MTR_setDirection(p_handle, MTR_DIRECTION_STOP);
 800ac42:	2100      	movs	r1, #0
 800ac44:	68f8      	ldr	r0, [r7, #12]
 800ac46:	f000 f80b 	bl	800ac60 <MTR_setDirection>
  MTR_setSpeed    (p_handle, 0                 );
 800ac4a:	2100      	movs	r1, #0
 800ac4c:	68f8      	ldr	r0, [r7, #12]
 800ac4e:	f000 f87f 	bl	800ad50 <MTR_setSpeed>

  return;
 800ac52:	bf00      	nop
}
 800ac54:	3710      	adds	r7, #16
 800ac56:	46bd      	mov	sp, r7
 800ac58:	bd80      	pop	{r7, pc}
 800ac5a:	bf00      	nop
 800ac5c:	0800f340 	.word	0x0800f340

0800ac60 <MTR_setDirection>:

void MTR_setDirection(T_MTR_Handle *p_handle, T_MTR_DIRECTION p_direction)
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b082      	sub	sp, #8
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
 800ac68:	460b      	mov	r3, r1
 800ac6a:	70fb      	strb	r3, [r7, #3]
  if (p_direction == p_handle->direction)
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	7d1b      	ldrb	r3, [r3, #20]
 800ac70:	78fa      	ldrb	r2, [r7, #3]
 800ac72:	429a      	cmp	r2, r3
 800ac74:	d056      	beq.n	800ad24 <MTR_setDirection+0xc4>
  {
    ; /* Nothing to do */
  }
  else
  {
    if (p_direction == MTR_DIRECTION_STOP)
 800ac76:	78fb      	ldrb	r3, [r7, #3]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d119      	bne.n	800acb0 <MTR_setDirection+0x50>
    {
      LOG_debug("%s motor STOP", p_handle->name);
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	461a      	mov	r2, r3
 800ac82:	492a      	ldr	r1, [pc, #168]	; (800ad2c <MTR_setDirection+0xcc>)
 800ac84:	2000      	movs	r0, #0
 800ac86:	f7ff fe99 	bl	800a9bc <LOG_log>

      HAL_GPIO_WritePin(p_handle->dirPin1Port, p_handle->dirPin1, GPIO_PIN_RESET);
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	6858      	ldr	r0, [r3, #4]
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	689b      	ldr	r3, [r3, #8]
 800ac92:	b29b      	uxth	r3, r3
 800ac94:	2200      	movs	r2, #0
 800ac96:	4619      	mov	r1, r3
 800ac98:	f7f9 f8fa 	bl	8003e90 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(p_handle->dirPin2Port, p_handle->dirPin2, GPIO_PIN_RESET);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	68d8      	ldr	r0, [r3, #12]
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	691b      	ldr	r3, [r3, #16]
 800aca4:	b29b      	uxth	r3, r3
 800aca6:	2200      	movs	r2, #0
 800aca8:	4619      	mov	r1, r3
 800acaa:	f7f9 f8f1 	bl	8003e90 <HAL_GPIO_WritePin>
 800acae:	e035      	b.n	800ad1c <MTR_setDirection+0xbc>
    }
    else if (p_direction == MTR_DIRECTION_FORWARD)
 800acb0:	78fb      	ldrb	r3, [r7, #3]
 800acb2:	2b01      	cmp	r3, #1
 800acb4:	d119      	bne.n	800acea <MTR_setDirection+0x8a>
    {
      LOG_debug("%s motor go FORWARD", p_handle->name);
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	461a      	mov	r2, r3
 800acbc:	491c      	ldr	r1, [pc, #112]	; (800ad30 <MTR_setDirection+0xd0>)
 800acbe:	2000      	movs	r0, #0
 800acc0:	f7ff fe7c 	bl	800a9bc <LOG_log>

      HAL_GPIO_WritePin(p_handle->dirPin1Port, p_handle->dirPin1, GPIO_PIN_SET  );
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	6858      	ldr	r0, [r3, #4]
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	689b      	ldr	r3, [r3, #8]
 800accc:	b29b      	uxth	r3, r3
 800acce:	2201      	movs	r2, #1
 800acd0:	4619      	mov	r1, r3
 800acd2:	f7f9 f8dd 	bl	8003e90 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(p_handle->dirPin2Port, p_handle->dirPin2, GPIO_PIN_RESET);
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	68d8      	ldr	r0, [r3, #12]
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	691b      	ldr	r3, [r3, #16]
 800acde:	b29b      	uxth	r3, r3
 800ace0:	2200      	movs	r2, #0
 800ace2:	4619      	mov	r1, r3
 800ace4:	f7f9 f8d4 	bl	8003e90 <HAL_GPIO_WritePin>
 800ace8:	e018      	b.n	800ad1c <MTR_setDirection+0xbc>
    }
    else
    {
      LOG_debug("%s motor go BACKWARD", p_handle->name);
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	461a      	mov	r2, r3
 800acf0:	4910      	ldr	r1, [pc, #64]	; (800ad34 <MTR_setDirection+0xd4>)
 800acf2:	2000      	movs	r0, #0
 800acf4:	f7ff fe62 	bl	800a9bc <LOG_log>

      HAL_GPIO_WritePin(p_handle->dirPin1Port, p_handle->dirPin1, GPIO_PIN_RESET);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	6858      	ldr	r0, [r3, #4]
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	689b      	ldr	r3, [r3, #8]
 800ad00:	b29b      	uxth	r3, r3
 800ad02:	2200      	movs	r2, #0
 800ad04:	4619      	mov	r1, r3
 800ad06:	f7f9 f8c3 	bl	8003e90 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(p_handle->dirPin2Port, p_handle->dirPin2, GPIO_PIN_SET  );
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	68d8      	ldr	r0, [r3, #12]
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	691b      	ldr	r3, [r3, #16]
 800ad12:	b29b      	uxth	r3, r3
 800ad14:	2201      	movs	r2, #1
 800ad16:	4619      	mov	r1, r3
 800ad18:	f7f9 f8ba 	bl	8003e90 <HAL_GPIO_WritePin>
    }

    p_handle->direction = p_direction;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	78fa      	ldrb	r2, [r7, #3]
 800ad20:	751a      	strb	r2, [r3, #20]
  }

  return;
 800ad22:	bf00      	nop
 800ad24:	bf00      	nop
}
 800ad26:	3708      	adds	r7, #8
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	bd80      	pop	{r7, pc}
 800ad2c:	0800f364 	.word	0x0800f364
 800ad30:	0800f374 	.word	0x0800f374
 800ad34:	0800f388 	.word	0x0800f388

0800ad38 <MTR_getDirection>:

T_MTR_DIRECTION MTR_getDirection(T_MTR_Handle *p_handle)
{
 800ad38:	b480      	push	{r7}
 800ad3a:	b083      	sub	sp, #12
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
  return p_handle->direction;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	7d1b      	ldrb	r3, [r3, #20]
}
 800ad44:	4618      	mov	r0, r3
 800ad46:	370c      	adds	r7, #12
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bc80      	pop	{r7}
 800ad4c:	4770      	bx	lr
	...

0800ad50 <MTR_setSpeed>:

void MTR_setSpeed(T_MTR_Handle *p_handle, uint32_t p_speed)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b082      	sub	sp, #8
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
 800ad58:	6039      	str	r1, [r7, #0]
  if (p_speed == p_handle->speed)
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	699b      	ldr	r3, [r3, #24]
 800ad5e:	683a      	ldr	r2, [r7, #0]
 800ad60:	429a      	cmp	r2, r3
 800ad62:	d02d      	beq.n	800adc0 <MTR_setSpeed+0x70>
  {
    ; /* Nothing to do */
  }
  else
  {
    LOG_debug("Setting  %s motor p_speed to %u", p_handle->name, p_speed);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681a      	ldr	r2, [r3, #0]
 800ad68:	683b      	ldr	r3, [r7, #0]
 800ad6a:	4917      	ldr	r1, [pc, #92]	; (800adc8 <MTR_setSpeed+0x78>)
 800ad6c:	2000      	movs	r0, #0
 800ad6e:	f7ff fe25 	bl	800a9bc <LOG_log>

    __HAL_TIM_SET_COMPARE(p_handle->pwmTimerHandle, p_handle->pwmChannel, p_speed);
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	6a1b      	ldr	r3, [r3, #32]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d105      	bne.n	800ad86 <MTR_setSpeed+0x36>
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	69db      	ldr	r3, [r3, #28]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	683a      	ldr	r2, [r7, #0]
 800ad82:	635a      	str	r2, [r3, #52]	; 0x34
 800ad84:	e018      	b.n	800adb8 <MTR_setSpeed+0x68>
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	6a1b      	ldr	r3, [r3, #32]
 800ad8a:	2b04      	cmp	r3, #4
 800ad8c:	d105      	bne.n	800ad9a <MTR_setSpeed+0x4a>
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	69db      	ldr	r3, [r3, #28]
 800ad92:	681a      	ldr	r2, [r3, #0]
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	6393      	str	r3, [r2, #56]	; 0x38
 800ad98:	e00e      	b.n	800adb8 <MTR_setSpeed+0x68>
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	6a1b      	ldr	r3, [r3, #32]
 800ad9e:	2b08      	cmp	r3, #8
 800ada0:	d105      	bne.n	800adae <MTR_setSpeed+0x5e>
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	69db      	ldr	r3, [r3, #28]
 800ada6:	681a      	ldr	r2, [r3, #0]
 800ada8:	683b      	ldr	r3, [r7, #0]
 800adaa:	63d3      	str	r3, [r2, #60]	; 0x3c
 800adac:	e004      	b.n	800adb8 <MTR_setSpeed+0x68>
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	69db      	ldr	r3, [r3, #28]
 800adb2:	681a      	ldr	r2, [r3, #0]
 800adb4:	683b      	ldr	r3, [r7, #0]
 800adb6:	6413      	str	r3, [r2, #64]	; 0x40

    p_handle->speed = p_speed;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	683a      	ldr	r2, [r7, #0]
 800adbc:	619a      	str	r2, [r3, #24]
  }

  return;
 800adbe:	bf00      	nop
 800adc0:	bf00      	nop
}
 800adc2:	3708      	adds	r7, #8
 800adc4:	46bd      	mov	sp, r7
 800adc6:	bd80      	pop	{r7, pc}
 800adc8:	0800f3a0 	.word	0x0800f3a0

0800adcc <MTR_getSpeed>:

uint32_t MTR_getSpeed(T_MTR_Handle *p_handle)
{
 800adcc:	b480      	push	{r7}
 800adce:	b083      	sub	sp, #12
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
  return p_handle->speed;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	699b      	ldr	r3, [r3, #24]
}
 800add8:	4618      	mov	r0, r3
 800adda:	370c      	adds	r7, #12
 800addc:	46bd      	mov	sp, r7
 800adde:	bc80      	pop	{r7}
 800ade0:	4770      	bx	lr
	...

0800ade4 <PID_init>:

#include "utils.h"
#include "log.h"

void PID_init(T_PID_Handle *p_handle, float p_kp, float p_ki, float p_kd, float p_targetValue, float p_minValue, float p_maxValue, float p_antiWindUpFactor)
{
 800ade4:	b590      	push	{r4, r7, lr}
 800ade6:	b085      	sub	sp, #20
 800ade8:	af00      	add	r7, sp, #0
 800adea:	60f8      	str	r0, [r7, #12]
 800adec:	60b9      	str	r1, [r7, #8]
 800adee:	607a      	str	r2, [r7, #4]
 800adf0:	603b      	str	r3, [r7, #0]
  LOG_info("Initializing PID");
 800adf2:	492c      	ldr	r1, [pc, #176]	; (800aea4 <PID_init+0xc0>)
 800adf4:	2001      	movs	r0, #1
 800adf6:	f7ff fde1 	bl	800a9bc <LOG_log>

  p_handle->kp              = p_kp;
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	68ba      	ldr	r2, [r7, #8]
 800adfe:	601a      	str	r2, [r3, #0]
  p_handle->ki              = p_ki;
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	687a      	ldr	r2, [r7, #4]
 800ae04:	605a      	str	r2, [r3, #4]
  p_handle->kd              = p_kd;
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	683a      	ldr	r2, [r7, #0]
 800ae0a:	609a      	str	r2, [r3, #8]
  p_handle->targetValue     = p_targetValue;
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	6a3a      	ldr	r2, [r7, #32]
 800ae10:	60da      	str	r2, [r3, #12]
  p_handle->minValue        = p_minValue;
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae16:	611a      	str	r2, [r3, #16]
  p_handle->maxValue        = p_maxValue;
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae1c:	615a      	str	r2, [r3, #20]
  p_handle->antiWindUpValue = p_antiWindUpFactor * UTI_MAX(abs(p_handle->minValue), abs(p_handle->maxValue));
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	691b      	ldr	r3, [r3, #16]
 800ae22:	4618      	mov	r0, r3
 800ae24:	f7f6 f8fa 	bl	800101c <__aeabi_f2iz>
 800ae28:	4603      	mov	r3, r0
 800ae2a:	ea83 74e3 	eor.w	r4, r3, r3, asr #31
 800ae2e:	eba4 74e3 	sub.w	r4, r4, r3, asr #31
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	695b      	ldr	r3, [r3, #20]
 800ae36:	4618      	mov	r0, r3
 800ae38:	f7f6 f8f0 	bl	800101c <__aeabi_f2iz>
 800ae3c:	4603      	mov	r3, r0
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	bfb8      	it	lt
 800ae42:	425b      	neglt	r3, r3
 800ae44:	429c      	cmp	r4, r3
 800ae46:	dd0d      	ble.n	800ae64 <PID_init+0x80>
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	691b      	ldr	r3, [r3, #16]
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	f7f6 f8e5 	bl	800101c <__aeabi_f2iz>
 800ae52:	4603      	mov	r3, r0
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	bfb8      	it	lt
 800ae58:	425b      	neglt	r3, r3
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	f7f5 ff3a 	bl	8000cd4 <__aeabi_i2f>
 800ae60:	4603      	mov	r3, r0
 800ae62:	e00c      	b.n	800ae7e <PID_init+0x9a>
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	695b      	ldr	r3, [r3, #20]
 800ae68:	4618      	mov	r0, r3
 800ae6a:	f7f6 f8d7 	bl	800101c <__aeabi_f2iz>
 800ae6e:	4603      	mov	r3, r0
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	bfb8      	it	lt
 800ae74:	425b      	neglt	r3, r3
 800ae76:	4618      	mov	r0, r3
 800ae78:	f7f5 ff2c 	bl	8000cd4 <__aeabi_i2f>
 800ae7c:	4603      	mov	r3, r0
 800ae7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ae80:	4618      	mov	r0, r3
 800ae82:	f7f5 ff7b 	bl	8000d7c <__aeabi_fmul>
 800ae86:	4603      	mov	r3, r0
 800ae88:	461a      	mov	r2, r3
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	619a      	str	r2, [r3, #24]

  PID_reset  (p_handle);
 800ae8e:	68f8      	ldr	r0, [r7, #12]
 800ae90:	f000 f80a 	bl	800aea8 <PID_reset>
  PID_logInfo(p_handle);
 800ae94:	68f8      	ldr	r0, [r7, #12]
 800ae96:	f000 f8eb 	bl	800b070 <PID_logInfo>

  return;
 800ae9a:	bf00      	nop
}
 800ae9c:	3714      	adds	r7, #20
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bd90      	pop	{r4, r7, pc}
 800aea2:	bf00      	nop
 800aea4:	0800f3c0 	.word	0x0800f3c0

0800aea8 <PID_reset>:

void PID_reset(T_PID_Handle *p_handle)
{
 800aea8:	b480      	push	{r7}
 800aeaa:	b083      	sub	sp, #12
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
  p_handle->pValue        = 0.0f;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	f04f 0200 	mov.w	r2, #0
 800aeb6:	61da      	str	r2, [r3, #28]
  p_handle->iValue        = 0.0f;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	f04f 0200 	mov.w	r2, #0
 800aebe:	621a      	str	r2, [r3, #32]
  p_handle->dValue        = 0.0f;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	f04f 0200 	mov.w	r2, #0
 800aec6:	625a      	str	r2, [r3, #36]	; 0x24
  p_handle->computedValue = 0.0f;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	f04f 0200 	mov.w	r2, #0
 800aece:	629a      	str	r2, [r3, #40]	; 0x28
  p_handle->lastError     = 0.0f;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	f04f 0200 	mov.w	r2, #0
 800aed6:	62da      	str	r2, [r3, #44]	; 0x2c

  return;
 800aed8:	bf00      	nop
}
 800aeda:	370c      	adds	r7, #12
 800aedc:	46bd      	mov	sp, r7
 800aede:	bc80      	pop	{r7}
 800aee0:	4770      	bx	lr

0800aee2 <PID_setTargetValue>:

  return;
}

void PID_setTargetValue(T_PID_Handle *p_handle, float p_targetValue)
{
 800aee2:	b480      	push	{r7}
 800aee4:	b083      	sub	sp, #12
 800aee6:	af00      	add	r7, sp, #0
 800aee8:	6078      	str	r0, [r7, #4]
 800aeea:	6039      	str	r1, [r7, #0]
  p_handle->targetValue = p_targetValue;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	683a      	ldr	r2, [r7, #0]
 800aef0:	60da      	str	r2, [r3, #12]

  return;
 800aef2:	bf00      	nop
}
 800aef4:	370c      	adds	r7, #12
 800aef6:	46bd      	mov	sp, r7
 800aef8:	bc80      	pop	{r7}
 800aefa:	4770      	bx	lr

0800aefc <PID_update>:
{
  return p_handle->antiWindUpValue;
}

float PID_update(T_PID_Handle *p_handle, float p_currentValue, uint32_t p_timeDelta)
{
 800aefc:	b5b0      	push	{r4, r5, r7, lr}
 800aefe:	b088      	sub	sp, #32
 800af00:	af02      	add	r7, sp, #8
 800af02:	60f8      	str	r0, [r7, #12]
 800af04:	60b9      	str	r1, [r7, #8]
 800af06:	607a      	str	r2, [r7, #4]
  int32_t l_currentError;

  l_currentError = p_handle->targetValue - p_currentValue;
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	68db      	ldr	r3, [r3, #12]
 800af0c:	68b9      	ldr	r1, [r7, #8]
 800af0e:	4618      	mov	r0, r3
 800af10:	f7f5 fe2a 	bl	8000b68 <__aeabi_fsub>
 800af14:	4603      	mov	r3, r0
 800af16:	4618      	mov	r0, r3
 800af18:	f7f6 f880 	bl	800101c <__aeabi_f2iz>
 800af1c:	4603      	mov	r3, r0
 800af1e:	617b      	str	r3, [r7, #20]

  p_handle->pValue    =  l_currentError;
 800af20:	6978      	ldr	r0, [r7, #20]
 800af22:	f7f5 fed7 	bl	8000cd4 <__aeabi_i2f>
 800af26:	4602      	mov	r2, r0
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	61da      	str	r2, [r3, #28]
  p_handle->iValue   +=  l_currentError * p_timeDelta;
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	6a1c      	ldr	r4, [r3, #32]
 800af30:	697b      	ldr	r3, [r7, #20]
 800af32:	687a      	ldr	r2, [r7, #4]
 800af34:	fb02 f303 	mul.w	r3, r2, r3
 800af38:	4618      	mov	r0, r3
 800af3a:	f7f5 fec7 	bl	8000ccc <__aeabi_ui2f>
 800af3e:	4603      	mov	r3, r0
 800af40:	4619      	mov	r1, r3
 800af42:	4620      	mov	r0, r4
 800af44:	f7f5 fe12 	bl	8000b6c <__addsf3>
 800af48:	4603      	mov	r3, r0
 800af4a:	461a      	mov	r2, r3
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	621a      	str	r2, [r3, #32]
  p_handle->iValue    =  UTI_clampIntValue(p_handle->iValue, -p_handle->antiWindUpValue, p_handle->antiWindUpValue, true, 0);
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	6a1b      	ldr	r3, [r3, #32]
 800af54:	4618      	mov	r0, r3
 800af56:	f7f6 f861 	bl	800101c <__aeabi_f2iz>
 800af5a:	4604      	mov	r4, r0
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	699b      	ldr	r3, [r3, #24]
 800af60:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800af64:	4618      	mov	r0, r3
 800af66:	f7f6 f859 	bl	800101c <__aeabi_f2iz>
 800af6a:	4605      	mov	r5, r0
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	699b      	ldr	r3, [r3, #24]
 800af70:	4618      	mov	r0, r3
 800af72:	f7f6 f853 	bl	800101c <__aeabi_f2iz>
 800af76:	4602      	mov	r2, r0
 800af78:	2300      	movs	r3, #0
 800af7a:	9300      	str	r3, [sp, #0]
 800af7c:	2301      	movs	r3, #1
 800af7e:	4629      	mov	r1, r5
 800af80:	4620      	mov	r0, r4
 800af82:	f000 fa79 	bl	800b478 <UTI_clampIntValue>
 800af86:	4603      	mov	r3, r0
 800af88:	4618      	mov	r0, r3
 800af8a:	f7f5 fea3 	bl	8000cd4 <__aeabi_i2f>
 800af8e:	4602      	mov	r2, r0
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	621a      	str	r2, [r3, #32]
  p_handle->dValue    = (l_currentError - p_handle->lastError) / p_timeDelta;
 800af94:	6978      	ldr	r0, [r7, #20]
 800af96:	f7f5 fe9d 	bl	8000cd4 <__aeabi_i2f>
 800af9a:	4602      	mov	r2, r0
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afa0:	4619      	mov	r1, r3
 800afa2:	4610      	mov	r0, r2
 800afa4:	f7f5 fde0 	bl	8000b68 <__aeabi_fsub>
 800afa8:	4603      	mov	r3, r0
 800afaa:	461c      	mov	r4, r3
 800afac:	6878      	ldr	r0, [r7, #4]
 800afae:	f7f5 fe8d 	bl	8000ccc <__aeabi_ui2f>
 800afb2:	4603      	mov	r3, r0
 800afb4:	4619      	mov	r1, r3
 800afb6:	4620      	mov	r0, r4
 800afb8:	f7f5 ff94 	bl	8000ee4 <__aeabi_fdiv>
 800afbc:	4603      	mov	r3, r0
 800afbe:	461a      	mov	r2, r3
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	625a      	str	r2, [r3, #36]	; 0x24
  p_handle->lastError =  l_currentError;
 800afc4:	6978      	ldr	r0, [r7, #20]
 800afc6:	f7f5 fe85 	bl	8000cd4 <__aeabi_i2f>
 800afca:	4602      	mov	r2, r0
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	62da      	str	r2, [r3, #44]	; 0x2c

  p_handle->computedValue = p_handle->kp * p_handle->pValue + p_handle->ki * p_handle->iValue + p_handle->kd * p_handle->dValue;
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	681a      	ldr	r2, [r3, #0]
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	69db      	ldr	r3, [r3, #28]
 800afd8:	4619      	mov	r1, r3
 800afda:	4610      	mov	r0, r2
 800afdc:	f7f5 fece 	bl	8000d7c <__aeabi_fmul>
 800afe0:	4603      	mov	r3, r0
 800afe2:	461c      	mov	r4, r3
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	685a      	ldr	r2, [r3, #4]
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	6a1b      	ldr	r3, [r3, #32]
 800afec:	4619      	mov	r1, r3
 800afee:	4610      	mov	r0, r2
 800aff0:	f7f5 fec4 	bl	8000d7c <__aeabi_fmul>
 800aff4:	4603      	mov	r3, r0
 800aff6:	4619      	mov	r1, r3
 800aff8:	4620      	mov	r0, r4
 800affa:	f7f5 fdb7 	bl	8000b6c <__addsf3>
 800affe:	4603      	mov	r3, r0
 800b000:	461c      	mov	r4, r3
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	689a      	ldr	r2, [r3, #8]
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b00a:	4619      	mov	r1, r3
 800b00c:	4610      	mov	r0, r2
 800b00e:	f7f5 feb5 	bl	8000d7c <__aeabi_fmul>
 800b012:	4603      	mov	r3, r0
 800b014:	4619      	mov	r1, r3
 800b016:	4620      	mov	r0, r4
 800b018:	f7f5 fda8 	bl	8000b6c <__addsf3>
 800b01c:	4603      	mov	r3, r0
 800b01e:	461a      	mov	r2, r3
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	629a      	str	r2, [r3, #40]	; 0x28
  p_handle->computedValue = UTI_clampIntValue(p_handle->computedValue, p_handle->minValue, p_handle->maxValue, true, 0);
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b028:	4618      	mov	r0, r3
 800b02a:	f7f5 fff7 	bl	800101c <__aeabi_f2iz>
 800b02e:	4604      	mov	r4, r0
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	691b      	ldr	r3, [r3, #16]
 800b034:	4618      	mov	r0, r3
 800b036:	f7f5 fff1 	bl	800101c <__aeabi_f2iz>
 800b03a:	4605      	mov	r5, r0
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	695b      	ldr	r3, [r3, #20]
 800b040:	4618      	mov	r0, r3
 800b042:	f7f5 ffeb 	bl	800101c <__aeabi_f2iz>
 800b046:	4602      	mov	r2, r0
 800b048:	2300      	movs	r3, #0
 800b04a:	9300      	str	r3, [sp, #0]
 800b04c:	2301      	movs	r3, #1
 800b04e:	4629      	mov	r1, r5
 800b050:	4620      	mov	r0, r4
 800b052:	f000 fa11 	bl	800b478 <UTI_clampIntValue>
 800b056:	4603      	mov	r3, r0
 800b058:	4618      	mov	r0, r3
 800b05a:	f7f5 fe3b 	bl	8000cd4 <__aeabi_i2f>
 800b05e:	4602      	mov	r2, r0
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	629a      	str	r2, [r3, #40]	; 0x28

  return p_handle->computedValue;
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 800b068:	4618      	mov	r0, r3
 800b06a:	3718      	adds	r7, #24
 800b06c:	46bd      	mov	sp, r7
 800b06e:	bdb0      	pop	{r4, r5, r7, pc}

0800b070 <PID_logInfo>:

void PID_logInfo(T_PID_Handle *p_handle)
{
 800b070:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800b074:	b086      	sub	sp, #24
 800b076:	af04      	add	r7, sp, #16
 800b078:	6078      	str	r0, [r7, #4]
  LOG_info(" kp = %6.2f -  ki = %6.2f -     kd = %6.2f", p_handle->kp         , p_handle->ki      , p_handle->kd             );
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	4618      	mov	r0, r3
 800b080:	f7f5 fa3e 	bl	8000500 <__aeabi_f2d>
 800b084:	4680      	mov	r8, r0
 800b086:	4689      	mov	r9, r1
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	685b      	ldr	r3, [r3, #4]
 800b08c:	4618      	mov	r0, r3
 800b08e:	f7f5 fa37 	bl	8000500 <__aeabi_f2d>
 800b092:	4604      	mov	r4, r0
 800b094:	460d      	mov	r5, r1
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	689b      	ldr	r3, [r3, #8]
 800b09a:	4618      	mov	r0, r3
 800b09c:	f7f5 fa30 	bl	8000500 <__aeabi_f2d>
 800b0a0:	4602      	mov	r2, r0
 800b0a2:	460b      	mov	r3, r1
 800b0a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b0a8:	e9cd 4500 	strd	r4, r5, [sp]
 800b0ac:	4642      	mov	r2, r8
 800b0ae:	464b      	mov	r3, r9
 800b0b0:	492e      	ldr	r1, [pc, #184]	; (800b16c <PID_logInfo+0xfc>)
 800b0b2:	2001      	movs	r0, #1
 800b0b4:	f7ff fc82 	bl	800a9bc <LOG_log>
  LOG_info("  p = %6.2f -   i = %6.2f -      d = %6.2f", p_handle->pValue     , p_handle->iValue  , p_handle->dValue         );
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	69db      	ldr	r3, [r3, #28]
 800b0bc:	4618      	mov	r0, r3
 800b0be:	f7f5 fa1f 	bl	8000500 <__aeabi_f2d>
 800b0c2:	4680      	mov	r8, r0
 800b0c4:	4689      	mov	r9, r1
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	6a1b      	ldr	r3, [r3, #32]
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	f7f5 fa18 	bl	8000500 <__aeabi_f2d>
 800b0d0:	4604      	mov	r4, r0
 800b0d2:	460d      	mov	r5, r1
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0d8:	4618      	mov	r0, r3
 800b0da:	f7f5 fa11 	bl	8000500 <__aeabi_f2d>
 800b0de:	4602      	mov	r2, r0
 800b0e0:	460b      	mov	r3, r1
 800b0e2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b0e6:	e9cd 4500 	strd	r4, r5, [sp]
 800b0ea:	4642      	mov	r2, r8
 800b0ec:	464b      	mov	r3, r9
 800b0ee:	4920      	ldr	r1, [pc, #128]	; (800b170 <PID_logInfo+0x100>)
 800b0f0:	2001      	movs	r0, #1
 800b0f2:	f7ff fc63 	bl	800a9bc <LOG_log>
  LOG_info("min = %6.2f - max = %6.2f - a.w.up = %6.2f", p_handle->minValue   , p_handle->maxValue, p_handle->antiWindUpValue);
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	691b      	ldr	r3, [r3, #16]
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	f7f5 fa00 	bl	8000500 <__aeabi_f2d>
 800b100:	4680      	mov	r8, r0
 800b102:	4689      	mov	r9, r1
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	695b      	ldr	r3, [r3, #20]
 800b108:	4618      	mov	r0, r3
 800b10a:	f7f5 f9f9 	bl	8000500 <__aeabi_f2d>
 800b10e:	4604      	mov	r4, r0
 800b110:	460d      	mov	r5, r1
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	699b      	ldr	r3, [r3, #24]
 800b116:	4618      	mov	r0, r3
 800b118:	f7f5 f9f2 	bl	8000500 <__aeabi_f2d>
 800b11c:	4602      	mov	r2, r0
 800b11e:	460b      	mov	r3, r1
 800b120:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b124:	e9cd 4500 	strd	r4, r5, [sp]
 800b128:	4642      	mov	r2, r8
 800b12a:	464b      	mov	r3, r9
 800b12c:	4911      	ldr	r1, [pc, #68]	; (800b174 <PID_logInfo+0x104>)
 800b12e:	2001      	movs	r0, #1
 800b130:	f7ff fc44 	bl	800a9bc <LOG_log>
  LOG_info("  t = %6.2f - val = %6.2f               ", p_handle->targetValue, p_handle->computedValue                      );
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	68db      	ldr	r3, [r3, #12]
 800b138:	4618      	mov	r0, r3
 800b13a:	f7f5 f9e1 	bl	8000500 <__aeabi_f2d>
 800b13e:	4604      	mov	r4, r0
 800b140:	460d      	mov	r5, r1
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b146:	4618      	mov	r0, r3
 800b148:	f7f5 f9da 	bl	8000500 <__aeabi_f2d>
 800b14c:	4602      	mov	r2, r0
 800b14e:	460b      	mov	r3, r1
 800b150:	e9cd 2300 	strd	r2, r3, [sp]
 800b154:	4622      	mov	r2, r4
 800b156:	462b      	mov	r3, r5
 800b158:	4907      	ldr	r1, [pc, #28]	; (800b178 <PID_logInfo+0x108>)
 800b15a:	2001      	movs	r0, #1
 800b15c:	f7ff fc2e 	bl	800a9bc <LOG_log>

  return;
 800b160:	bf00      	nop
}
 800b162:	3708      	adds	r7, #8
 800b164:	46bd      	mov	sp, r7
 800b166:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800b16a:	bf00      	nop
 800b16c:	0800f3d4 	.word	0x0800f3d4
 800b170:	0800f400 	.word	0x0800f400
 800b174:	0800f42c 	.word	0x0800f42c
 800b178:	0800f458 	.word	0x0800f458

0800b17c <SFO_initData>:

#include "log.h"


void SFO_initData(T_SFO_data *p_data)
{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b082      	sub	sp, #8
 800b180:	af00      	add	r7, sp, #0
 800b182:	6078      	str	r0, [r7, #4]
  (void)memset(p_data, 0, CST_STRING_FIFO_MAX_STRING_LENGTH);
 800b184:	2210      	movs	r2, #16
 800b186:	2100      	movs	r1, #0
 800b188:	6878      	ldr	r0, [r7, #4]
 800b18a:	f000 fa2b 	bl	800b5e4 <memset>

  return;
 800b18e:	bf00      	nop
}
 800b190:	3708      	adds	r7, #8
 800b192:	46bd      	mov	sp, r7
 800b194:	bd80      	pop	{r7, pc}
	...

0800b198 <SFO_init>:

void SFO_init(T_SFO_Context *p_fifo)
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b082      	sub	sp, #8
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
  LOG_debug("String FIFO now empty");
 800b1a0:	4908      	ldr	r1, [pc, #32]	; (800b1c4 <SFO_init+0x2c>)
 800b1a2:	2000      	movs	r0, #0
 800b1a4:	f7ff fc0a 	bl	800a9bc <LOG_log>

  p_fifo->head  = NULL;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	601a      	str	r2, [r3, #0]
  p_fifo->tail  = NULL;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	605a      	str	r2, [r3, #4]
  p_fifo->count = 0;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	609a      	str	r2, [r3, #8]

  return;
 800b1ba:	bf00      	nop
}
 800b1bc:	3708      	adds	r7, #8
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	bd80      	pop	{r7, pc}
 800b1c2:	bf00      	nop
 800b1c4:	0800f484 	.word	0x0800f484

0800b1c8 <SFO_push>:

void SFO_push(T_SFO_Context *p_fifo, T_SFO_data *p_dataIn)
{
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	b084      	sub	sp, #16
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
 800b1d0:	6039      	str	r1, [r7, #0]
  T_SFO_Element *l_element;

  if (p_fifo->count == CST_STRING_FIFO_MAX_ELEMENTS)
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	689b      	ldr	r3, [r3, #8]
 800b1d6:	2b0a      	cmp	r3, #10
 800b1d8:	d105      	bne.n	800b1e6 <SFO_push+0x1e>
  {
    LOG_error("SFO_push() failure - String FIFO is full (%u elements)", CST_STRING_FIFO_MAX_ELEMENTS);
 800b1da:	220a      	movs	r2, #10
 800b1dc:	4917      	ldr	r1, [pc, #92]	; (800b23c <SFO_push+0x74>)
 800b1de:	2003      	movs	r0, #3
 800b1e0:	f7ff fbec 	bl	800a9bc <LOG_log>

      p_fifo->count++;
    }
  }

  return;
 800b1e4:	e027      	b.n	800b236 <SFO_push+0x6e>
    l_element = (T_SFO_Element *)malloc(sizeof(T_SFO_Element));
 800b1e6:	2014      	movs	r0, #20
 800b1e8:	f000 f9ec 	bl	800b5c4 <malloc>
 800b1ec:	4603      	mov	r3, r0
 800b1ee:	60fb      	str	r3, [r7, #12]
    if (l_element == NULL)
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d104      	bne.n	800b200 <SFO_push+0x38>
      LOG_error("SFO_push() failure - Could not allocate new memory");
 800b1f6:	4912      	ldr	r1, [pc, #72]	; (800b240 <SFO_push+0x78>)
 800b1f8:	2003      	movs	r0, #3
 800b1fa:	f7ff fbdf 	bl	800a9bc <LOG_log>
  return;
 800b1fe:	e01a      	b.n	800b236 <SFO_push+0x6e>
      (void)strncpy(l_element->data, *p_dataIn, CST_STRING_FIFO_MAX_STRING_LENGTH);
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	2210      	movs	r2, #16
 800b204:	6839      	ldr	r1, [r7, #0]
 800b206:	4618      	mov	r0, r3
 800b208:	f000 ff42 	bl	800c090 <strncpy>
      l_element->nextElement = p_fifo->head;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681a      	ldr	r2, [r3, #0]
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	611a      	str	r2, [r3, #16]
      p_fifo->head           = l_element;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	68fa      	ldr	r2, [r7, #12]
 800b218:	601a      	str	r2, [r3, #0]
      if (p_fifo->tail == NULL)
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	685b      	ldr	r3, [r3, #4]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d103      	bne.n	800b22a <SFO_push+0x62>
        p_fifo->tail = p_fifo->head;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681a      	ldr	r2, [r3, #0]
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	605a      	str	r2, [r3, #4]
      p_fifo->count++;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	689b      	ldr	r3, [r3, #8]
 800b22e:	1c5a      	adds	r2, r3, #1
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	609a      	str	r2, [r3, #8]
  return;
 800b234:	bf00      	nop
}
 800b236:	3710      	adds	r7, #16
 800b238:	46bd      	mov	sp, r7
 800b23a:	bd80      	pop	{r7, pc}
 800b23c:	0800f49c 	.word	0x0800f49c
 800b240:	0800f4d4 	.word	0x0800f4d4

0800b244 <SFO_pop>:

void SFO_pop(T_SFO_Context *p_fifo, T_SFO_data *p_dataOut)
{
 800b244:	b580      	push	{r7, lr}
 800b246:	b084      	sub	sp, #16
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]
 800b24c:	6039      	str	r1, [r7, #0]
  T_SFO_Element *l_element;

  if (p_fifo->count == 0)
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	689b      	ldr	r3, [r3, #8]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d104      	bne.n	800b260 <SFO_pop+0x1c>
  {
    LOG_error("SFO_pop() failure - String FIFO is empty");
 800b256:	491a      	ldr	r1, [pc, #104]	; (800b2c0 <SFO_pop+0x7c>)
 800b258:	2003      	movs	r0, #3
 800b25a:	f7ff fbaf 	bl	800a9bc <LOG_log>
    {
      SFO_init(p_fifo);
    }
  }

  return;
 800b25e:	e02c      	b.n	800b2ba <SFO_pop+0x76>
    (void)strncpy(*p_dataOut, p_fifo->tail->data, CST_STRING_FIFO_MAX_STRING_LENGTH);
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	685b      	ldr	r3, [r3, #4]
 800b264:	2210      	movs	r2, #16
 800b266:	4619      	mov	r1, r3
 800b268:	6838      	ldr	r0, [r7, #0]
 800b26a:	f000 ff11 	bl	800c090 <strncpy>
    free(p_fifo->tail);
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	685b      	ldr	r3, [r3, #4]
 800b272:	4618      	mov	r0, r3
 800b274:	f000 f9ae 	bl	800b5d4 <free>
    if (p_fifo->count > 1)
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	689b      	ldr	r3, [r3, #8]
 800b27c:	2b01      	cmp	r3, #1
 800b27e:	d918      	bls.n	800b2b2 <SFO_pop+0x6e>
      l_element = p_fifo->head;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	60fb      	str	r3, [r7, #12]
      while (l_element->nextElement != p_fifo->tail)
 800b286:	e002      	b.n	800b28e <SFO_pop+0x4a>
        l_element = l_element->nextElement;
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	691b      	ldr	r3, [r3, #16]
 800b28c:	60fb      	str	r3, [r7, #12]
      while (l_element->nextElement != p_fifo->tail)
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	691a      	ldr	r2, [r3, #16]
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	685b      	ldr	r3, [r3, #4]
 800b296:	429a      	cmp	r2, r3
 800b298:	d1f6      	bne.n	800b288 <SFO_pop+0x44>
      l_element->nextElement = NULL;
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	2200      	movs	r2, #0
 800b29e:	611a      	str	r2, [r3, #16]
      p_fifo->tail           = l_element;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	68fa      	ldr	r2, [r7, #12]
 800b2a4:	605a      	str	r2, [r3, #4]
      p_fifo->count--;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	689b      	ldr	r3, [r3, #8]
 800b2aa:	1e5a      	subs	r2, r3, #1
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	609a      	str	r2, [r3, #8]
  return;
 800b2b0:	e003      	b.n	800b2ba <SFO_pop+0x76>
      SFO_init(p_fifo);
 800b2b2:	6878      	ldr	r0, [r7, #4]
 800b2b4:	f7ff ff70 	bl	800b198 <SFO_init>
  return;
 800b2b8:	bf00      	nop
}
 800b2ba:	3710      	adds	r7, #16
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	bd80      	pop	{r7, pc}
 800b2c0:	0800f508 	.word	0x0800f508

0800b2c4 <SFO_getCount>:

uint32_t SFO_getCount(T_SFO_Context *p_fifo)
{
 800b2c4:	b480      	push	{r7}
 800b2c6:	b083      	sub	sp, #12
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
  return p_fifo->count;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	689b      	ldr	r3, [r3, #8]
}
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	370c      	adds	r7, #12
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	bc80      	pop	{r7}
 800b2d8:	4770      	bx	lr
	...

0800b2dc <SFO_logInfo>:

void SFO_logInfo(T_SFO_Context *p_fifo)
{
 800b2dc:	b580      	push	{r7, lr}
 800b2de:	b084      	sub	sp, #16
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
  T_SFO_Element *l_element;

  if (p_fifo->count == 0)
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	689b      	ldr	r3, [r3, #8]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d104      	bne.n	800b2f6 <SFO_logInfo+0x1a>
  {
    LOG_info("String FIFO is empty");
 800b2ec:	4924      	ldr	r1, [pc, #144]	; (800b380 <SFO_logInfo+0xa4>)
 800b2ee:	2001      	movs	r0, #1
 800b2f0:	f7ff fb64 	bl	800a9bc <LOG_log>

      l_element = l_element->nextElement;
    }
  }

  return;
 800b2f4:	e040      	b.n	800b378 <SFO_logInfo+0x9c>
    LOG_info("String FIFO: %u element(s)", p_fifo->count);
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	689b      	ldr	r3, [r3, #8]
 800b2fa:	461a      	mov	r2, r3
 800b2fc:	4921      	ldr	r1, [pc, #132]	; (800b384 <SFO_logInfo+0xa8>)
 800b2fe:	2001      	movs	r0, #1
 800b300:	f7ff fb5c 	bl	800a9bc <LOG_log>
    l_element = p_fifo->head;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	60fb      	str	r3, [r7, #12]
    while (l_element != NULL)
 800b30a:	e031      	b.n	800b370 <SFO_logInfo+0x94>
      if ((l_element == p_fifo->head) && (l_element == p_fifo->tail))
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	68fa      	ldr	r2, [r7, #12]
 800b312:	429a      	cmp	r2, r3
 800b314:	d10b      	bne.n	800b32e <SFO_logInfo+0x52>
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	685b      	ldr	r3, [r3, #4]
 800b31a:	68fa      	ldr	r2, [r7, #12]
 800b31c:	429a      	cmp	r2, r3
 800b31e:	d106      	bne.n	800b32e <SFO_logInfo+0x52>
        LOG_info("HEAD -> '%s' <- TAIL", l_element->data);
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	461a      	mov	r2, r3
 800b324:	4918      	ldr	r1, [pc, #96]	; (800b388 <SFO_logInfo+0xac>)
 800b326:	2001      	movs	r0, #1
 800b328:	f7ff fb48 	bl	800a9bc <LOG_log>
 800b32c:	e01d      	b.n	800b36a <SFO_logInfo+0x8e>
      else if (l_element == p_fifo->head)
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	68fa      	ldr	r2, [r7, #12]
 800b334:	429a      	cmp	r2, r3
 800b336:	d106      	bne.n	800b346 <SFO_logInfo+0x6a>
        LOG_info("HEAD -> '%s'", l_element->data);
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	461a      	mov	r2, r3
 800b33c:	4913      	ldr	r1, [pc, #76]	; (800b38c <SFO_logInfo+0xb0>)
 800b33e:	2001      	movs	r0, #1
 800b340:	f7ff fb3c 	bl	800a9bc <LOG_log>
 800b344:	e011      	b.n	800b36a <SFO_logInfo+0x8e>
      else if (l_element == p_fifo->tail)
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	685b      	ldr	r3, [r3, #4]
 800b34a:	68fa      	ldr	r2, [r7, #12]
 800b34c:	429a      	cmp	r2, r3
 800b34e:	d106      	bne.n	800b35e <SFO_logInfo+0x82>
        LOG_info("TAIL -> '%s'", l_element->data);
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	461a      	mov	r2, r3
 800b354:	490e      	ldr	r1, [pc, #56]	; (800b390 <SFO_logInfo+0xb4>)
 800b356:	2001      	movs	r0, #1
 800b358:	f7ff fb30 	bl	800a9bc <LOG_log>
 800b35c:	e005      	b.n	800b36a <SFO_logInfo+0x8e>
        LOG_info("        '%s'", l_element->data);
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	461a      	mov	r2, r3
 800b362:	490c      	ldr	r1, [pc, #48]	; (800b394 <SFO_logInfo+0xb8>)
 800b364:	2001      	movs	r0, #1
 800b366:	f7ff fb29 	bl	800a9bc <LOG_log>
      l_element = l_element->nextElement;
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	691b      	ldr	r3, [r3, #16]
 800b36e:	60fb      	str	r3, [r7, #12]
    while (l_element != NULL)
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	2b00      	cmp	r3, #0
 800b374:	d1ca      	bne.n	800b30c <SFO_logInfo+0x30>
  return;
 800b376:	bf00      	nop
}
 800b378:	3710      	adds	r7, #16
 800b37a:	46bd      	mov	sp, r7
 800b37c:	bd80      	pop	{r7, pc}
 800b37e:	bf00      	nop
 800b380:	0800f534 	.word	0x0800f534
 800b384:	0800f54c 	.word	0x0800f54c
 800b388:	0800f568 	.word	0x0800f568
 800b38c:	0800f580 	.word	0x0800f580
 800b390:	0800f590 	.word	0x0800f590
 800b394:	0800f5a0 	.word	0x0800f5a0

0800b398 <UTI_init>:
#include "log.h"

static TIM_HandleTypeDef *g_UTI_delayTimerHandle;

void UTI_init(TIM_HandleTypeDef *p_delayTimerHandle)
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	b082      	sub	sp, #8
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
  LOG_info("Initializing utilities");
 800b3a0:	4905      	ldr	r1, [pc, #20]	; (800b3b8 <UTI_init+0x20>)
 800b3a2:	2001      	movs	r0, #1
 800b3a4:	f7ff fb0a 	bl	800a9bc <LOG_log>

  g_UTI_delayTimerHandle = p_delayTimerHandle;
 800b3a8:	4a04      	ldr	r2, [pc, #16]	; (800b3bc <UTI_init+0x24>)
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	6013      	str	r3, [r2, #0]

  return;
 800b3ae:	bf00      	nop
}
 800b3b0:	3708      	adds	r7, #8
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	bd80      	pop	{r7, pc}
 800b3b6:	bf00      	nop
 800b3b8:	0800f5b0 	.word	0x0800f5b0
 800b3bc:	200004d0 	.word	0x200004d0

0800b3c0 <UTI_delayUs>:

void UTI_delayUs(uint16_t p_delay)
{
 800b3c0:	b480      	push	{r7}
 800b3c2:	b083      	sub	sp, #12
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	4603      	mov	r3, r0
 800b3c8:	80fb      	strh	r3, [r7, #6]
  /* Reset the micro-seconds counter */
  __HAL_TIM_SET_COUNTER(g_UTI_delayTimerHandle, 0);
 800b3ca:	4b09      	ldr	r3, [pc, #36]	; (800b3f0 <UTI_delayUs+0x30>)
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Wait for the counter to reach the input micro-seconds number */
  while (__HAL_TIM_GET_COUNTER(g_UTI_delayTimerHandle) < p_delay)
 800b3d4:	bf00      	nop
 800b3d6:	4b06      	ldr	r3, [pc, #24]	; (800b3f0 <UTI_delayUs+0x30>)
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b3de:	88fb      	ldrh	r3, [r7, #6]
 800b3e0:	429a      	cmp	r2, r3
 800b3e2:	d3f8      	bcc.n	800b3d6 <UTI_delayUs+0x16>
  {
    ; /* Nothing to do */
  }

  return;
 800b3e4:	bf00      	nop
}
 800b3e6:	370c      	adds	r7, #12
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	bc80      	pop	{r7}
 800b3ec:	4770      	bx	lr
 800b3ee:	bf00      	nop
 800b3f0:	200004d0 	.word	0x200004d0

0800b3f4 <UTI_resetRtcDate>:

void UTI_resetRtcDate(RTC_DateTypeDef *p_date)
{
 800b3f4:	b480      	push	{r7}
 800b3f6:	b083      	sub	sp, #12
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
  p_date->Date    = 0;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	2200      	movs	r2, #0
 800b400:	709a      	strb	r2, [r3, #2]
  p_date->Month   = 0;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	2200      	movs	r2, #0
 800b406:	705a      	strb	r2, [r3, #1]
  p_date->WeekDay = 0;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	2200      	movs	r2, #0
 800b40c:	701a      	strb	r2, [r3, #0]
  p_date->Year    = 0;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	2200      	movs	r2, #0
 800b412:	70da      	strb	r2, [r3, #3]

  return;
 800b414:	bf00      	nop
}
 800b416:	370c      	adds	r7, #12
 800b418:	46bd      	mov	sp, r7
 800b41a:	bc80      	pop	{r7}
 800b41c:	4770      	bx	lr

0800b41e <UTI_resetRtcTime>:


void UTI_resetRtcTime(RTC_TimeTypeDef *p_time)
{
 800b41e:	b480      	push	{r7}
 800b420:	b083      	sub	sp, #12
 800b422:	af00      	add	r7, sp, #0
 800b424:	6078      	str	r0, [r7, #4]
  p_time->Hours   = 0;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	2200      	movs	r2, #0
 800b42a:	701a      	strb	r2, [r3, #0]
  p_time->Minutes = 0;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	2200      	movs	r2, #0
 800b430:	705a      	strb	r2, [r3, #1]
  p_time->Seconds = 0;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	2200      	movs	r2, #0
 800b436:	709a      	strb	r2, [r3, #2]

  return;
 800b438:	bf00      	nop
}
 800b43a:	370c      	adds	r7, #12
 800b43c:	46bd      	mov	sp, r7
 800b43e:	bc80      	pop	{r7}
 800b440:	4770      	bx	lr

0800b442 <UTI_turnRtcTimeToSeconds>:

uint32_t UTI_turnRtcTimeToSeconds(RTC_TimeTypeDef *p_time)
{
 800b442:	b480      	push	{r7}
 800b444:	b083      	sub	sp, #12
 800b446:	af00      	add	r7, sp, #0
 800b448:	6078      	str	r0, [r7, #4]
  return p_time->Hours * 3600 + p_time->Minutes * 60 + p_time->Seconds;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	781b      	ldrb	r3, [r3, #0]
 800b44e:	461a      	mov	r2, r3
 800b450:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800b454:	fb03 f202 	mul.w	r2, r3, r2
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	785b      	ldrb	r3, [r3, #1]
 800b45c:	4619      	mov	r1, r3
 800b45e:	460b      	mov	r3, r1
 800b460:	011b      	lsls	r3, r3, #4
 800b462:	1a5b      	subs	r3, r3, r1
 800b464:	009b      	lsls	r3, r3, #2
 800b466:	4413      	add	r3, r2
 800b468:	687a      	ldr	r2, [r7, #4]
 800b46a:	7892      	ldrb	r2, [r2, #2]
 800b46c:	4413      	add	r3, r2
}
 800b46e:	4618      	mov	r0, r3
 800b470:	370c      	adds	r7, #12
 800b472:	46bd      	mov	sp, r7
 800b474:	bc80      	pop	{r7}
 800b476:	4770      	bx	lr

0800b478 <UTI_clampIntValue>:

int32_t UTI_clampIntValue(int32_t p_value, int32_t p_minValue, int32_t p_maxValue, bool p_clampToNearest, int32_t p_clampValue)
{
 800b478:	b480      	push	{r7}
 800b47a:	b087      	sub	sp, #28
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	60f8      	str	r0, [r7, #12]
 800b480:	60b9      	str	r1, [r7, #8]
 800b482:	607a      	str	r2, [r7, #4]
 800b484:	70fb      	strb	r3, [r7, #3]
  int32_t l_returnValue;

  if (p_value < p_minValue)
 800b486:	68fa      	ldr	r2, [r7, #12]
 800b488:	68bb      	ldr	r3, [r7, #8]
 800b48a:	429a      	cmp	r2, r3
 800b48c:	da08      	bge.n	800b4a0 <UTI_clampIntValue+0x28>
  {
    if (p_clampToNearest == true)
 800b48e:	78fb      	ldrb	r3, [r7, #3]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d002      	beq.n	800b49a <UTI_clampIntValue+0x22>
    {
      l_returnValue = p_minValue;
 800b494:	68bb      	ldr	r3, [r7, #8]
 800b496:	617b      	str	r3, [r7, #20]
 800b498:	e011      	b.n	800b4be <UTI_clampIntValue+0x46>
    }
    else
    {
      l_returnValue = p_clampValue;
 800b49a:	6a3b      	ldr	r3, [r7, #32]
 800b49c:	617b      	str	r3, [r7, #20]
 800b49e:	e00e      	b.n	800b4be <UTI_clampIntValue+0x46>
    }
  }
  else if (p_value > p_maxValue)
 800b4a0:	68fa      	ldr	r2, [r7, #12]
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	429a      	cmp	r2, r3
 800b4a6:	dd08      	ble.n	800b4ba <UTI_clampIntValue+0x42>
  {
    if (p_clampToNearest == true)
 800b4a8:	78fb      	ldrb	r3, [r7, #3]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d002      	beq.n	800b4b4 <UTI_clampIntValue+0x3c>
    {
      l_returnValue = p_maxValue;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	617b      	str	r3, [r7, #20]
 800b4b2:	e004      	b.n	800b4be <UTI_clampIntValue+0x46>
    }
    else
    {
      l_returnValue = p_clampValue;
 800b4b4:	6a3b      	ldr	r3, [r7, #32]
 800b4b6:	617b      	str	r3, [r7, #20]
 800b4b8:	e001      	b.n	800b4be <UTI_clampIntValue+0x46>
    }
  }
  else
  {
    l_returnValue = p_value;
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	617b      	str	r3, [r7, #20]
  }

  return l_returnValue;
 800b4be:	697b      	ldr	r3, [r7, #20]
}
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	371c      	adds	r7, #28
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	bc80      	pop	{r7}
 800b4c8:	4770      	bx	lr

0800b4ca <UTI_normalizeIntValue>:

  return l_returnValue;
}

int32_t UTI_normalizeIntValue(int32_t p_value, int32_t p_inMinValue, int32_t p_inMaxValue, int32_t p_outMinValue, int32_t p_outMaxValue, bool p_isInversionNeeded)
{
 800b4ca:	b5b0      	push	{r4, r5, r7, lr}
 800b4cc:	b086      	sub	sp, #24
 800b4ce:	af00      	add	r7, sp, #0
 800b4d0:	60f8      	str	r0, [r7, #12]
 800b4d2:	60b9      	str	r1, [r7, #8]
 800b4d4:	607a      	str	r2, [r7, #4]
 800b4d6:	603b      	str	r3, [r7, #0]
  float l_returnValue;
  float l_ratio;

  l_ratio       = ((float)p_outMaxValue - (float)p_outMinValue) / ((float)p_inMaxValue - (float)p_inMinValue);
 800b4d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b4da:	f7f5 fbfb 	bl	8000cd4 <__aeabi_i2f>
 800b4de:	4604      	mov	r4, r0
 800b4e0:	6838      	ldr	r0, [r7, #0]
 800b4e2:	f7f5 fbf7 	bl	8000cd4 <__aeabi_i2f>
 800b4e6:	4603      	mov	r3, r0
 800b4e8:	4619      	mov	r1, r3
 800b4ea:	4620      	mov	r0, r4
 800b4ec:	f7f5 fb3c 	bl	8000b68 <__aeabi_fsub>
 800b4f0:	4603      	mov	r3, r0
 800b4f2:	461d      	mov	r5, r3
 800b4f4:	6878      	ldr	r0, [r7, #4]
 800b4f6:	f7f5 fbed 	bl	8000cd4 <__aeabi_i2f>
 800b4fa:	4604      	mov	r4, r0
 800b4fc:	68b8      	ldr	r0, [r7, #8]
 800b4fe:	f7f5 fbe9 	bl	8000cd4 <__aeabi_i2f>
 800b502:	4603      	mov	r3, r0
 800b504:	4619      	mov	r1, r3
 800b506:	4620      	mov	r0, r4
 800b508:	f7f5 fb2e 	bl	8000b68 <__aeabi_fsub>
 800b50c:	4603      	mov	r3, r0
 800b50e:	4619      	mov	r1, r3
 800b510:	4628      	mov	r0, r5
 800b512:	f7f5 fce7 	bl	8000ee4 <__aeabi_fdiv>
 800b516:	4603      	mov	r3, r0
 800b518:	613b      	str	r3, [r7, #16]
  l_returnValue =  (float)(p_value - p_inMinValue) * l_ratio + p_outMinValue;
 800b51a:	68fa      	ldr	r2, [r7, #12]
 800b51c:	68bb      	ldr	r3, [r7, #8]
 800b51e:	1ad3      	subs	r3, r2, r3
 800b520:	4618      	mov	r0, r3
 800b522:	f7f5 fbd7 	bl	8000cd4 <__aeabi_i2f>
 800b526:	4603      	mov	r3, r0
 800b528:	6939      	ldr	r1, [r7, #16]
 800b52a:	4618      	mov	r0, r3
 800b52c:	f7f5 fc26 	bl	8000d7c <__aeabi_fmul>
 800b530:	4603      	mov	r3, r0
 800b532:	461c      	mov	r4, r3
 800b534:	6838      	ldr	r0, [r7, #0]
 800b536:	f7f5 fbcd 	bl	8000cd4 <__aeabi_i2f>
 800b53a:	4603      	mov	r3, r0
 800b53c:	4619      	mov	r1, r3
 800b53e:	4620      	mov	r0, r4
 800b540:	f7f5 fb14 	bl	8000b6c <__addsf3>
 800b544:	4603      	mov	r3, r0
 800b546:	617b      	str	r3, [r7, #20]

  if (p_isInversionNeeded == true)
 800b548:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d003      	beq.n	800b558 <UTI_normalizeIntValue+0x8e>
  {
    l_returnValue *= -1.0f;
 800b550:	697b      	ldr	r3, [r7, #20]
 800b552:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800b556:	617b      	str	r3, [r7, #20]
  else
  {
    ; /* Nothing to do */
  }

  return (int32_t)l_returnValue;
 800b558:	6978      	ldr	r0, [r7, #20]
 800b55a:	f7f5 fd5f 	bl	800101c <__aeabi_f2iz>
 800b55e:	4603      	mov	r3, r0
}
 800b560:	4618      	mov	r0, r3
 800b562:	3718      	adds	r7, #24
 800b564:	46bd      	mov	sp, r7
 800b566:	bdb0      	pop	{r4, r5, r7, pc}

0800b568 <atoi>:
 800b568:	220a      	movs	r2, #10
 800b56a:	2100      	movs	r1, #0
 800b56c:	f000 be36 	b.w	800c1dc <strtol>

0800b570 <__errno>:
 800b570:	4b01      	ldr	r3, [pc, #4]	; (800b578 <__errno+0x8>)
 800b572:	6818      	ldr	r0, [r3, #0]
 800b574:	4770      	bx	lr
 800b576:	bf00      	nop
 800b578:	2000001c 	.word	0x2000001c

0800b57c <__libc_init_array>:
 800b57c:	b570      	push	{r4, r5, r6, lr}
 800b57e:	2600      	movs	r6, #0
 800b580:	4d0c      	ldr	r5, [pc, #48]	; (800b5b4 <__libc_init_array+0x38>)
 800b582:	4c0d      	ldr	r4, [pc, #52]	; (800b5b8 <__libc_init_array+0x3c>)
 800b584:	1b64      	subs	r4, r4, r5
 800b586:	10a4      	asrs	r4, r4, #2
 800b588:	42a6      	cmp	r6, r4
 800b58a:	d109      	bne.n	800b5a0 <__libc_init_array+0x24>
 800b58c:	f002 ffc4 	bl	800e518 <_init>
 800b590:	2600      	movs	r6, #0
 800b592:	4d0a      	ldr	r5, [pc, #40]	; (800b5bc <__libc_init_array+0x40>)
 800b594:	4c0a      	ldr	r4, [pc, #40]	; (800b5c0 <__libc_init_array+0x44>)
 800b596:	1b64      	subs	r4, r4, r5
 800b598:	10a4      	asrs	r4, r4, #2
 800b59a:	42a6      	cmp	r6, r4
 800b59c:	d105      	bne.n	800b5aa <__libc_init_array+0x2e>
 800b59e:	bd70      	pop	{r4, r5, r6, pc}
 800b5a0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5a4:	4798      	blx	r3
 800b5a6:	3601      	adds	r6, #1
 800b5a8:	e7ee      	b.n	800b588 <__libc_init_array+0xc>
 800b5aa:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5ae:	4798      	blx	r3
 800b5b0:	3601      	adds	r6, #1
 800b5b2:	e7f2      	b.n	800b59a <__libc_init_array+0x1e>
 800b5b4:	0800f9c4 	.word	0x0800f9c4
 800b5b8:	0800f9c4 	.word	0x0800f9c4
 800b5bc:	0800f9c4 	.word	0x0800f9c4
 800b5c0:	0800f9c8 	.word	0x0800f9c8

0800b5c4 <malloc>:
 800b5c4:	4b02      	ldr	r3, [pc, #8]	; (800b5d0 <malloc+0xc>)
 800b5c6:	4601      	mov	r1, r0
 800b5c8:	6818      	ldr	r0, [r3, #0]
 800b5ca:	f000 b85f 	b.w	800b68c <_malloc_r>
 800b5ce:	bf00      	nop
 800b5d0:	2000001c 	.word	0x2000001c

0800b5d4 <free>:
 800b5d4:	4b02      	ldr	r3, [pc, #8]	; (800b5e0 <free+0xc>)
 800b5d6:	4601      	mov	r1, r0
 800b5d8:	6818      	ldr	r0, [r3, #0]
 800b5da:	f000 b80b 	b.w	800b5f4 <_free_r>
 800b5de:	bf00      	nop
 800b5e0:	2000001c 	.word	0x2000001c

0800b5e4 <memset>:
 800b5e4:	4603      	mov	r3, r0
 800b5e6:	4402      	add	r2, r0
 800b5e8:	4293      	cmp	r3, r2
 800b5ea:	d100      	bne.n	800b5ee <memset+0xa>
 800b5ec:	4770      	bx	lr
 800b5ee:	f803 1b01 	strb.w	r1, [r3], #1
 800b5f2:	e7f9      	b.n	800b5e8 <memset+0x4>

0800b5f4 <_free_r>:
 800b5f4:	b538      	push	{r3, r4, r5, lr}
 800b5f6:	4605      	mov	r5, r0
 800b5f8:	2900      	cmp	r1, #0
 800b5fa:	d043      	beq.n	800b684 <_free_r+0x90>
 800b5fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b600:	1f0c      	subs	r4, r1, #4
 800b602:	2b00      	cmp	r3, #0
 800b604:	bfb8      	it	lt
 800b606:	18e4      	addlt	r4, r4, r3
 800b608:	f001 fdc2 	bl	800d190 <__malloc_lock>
 800b60c:	4a1e      	ldr	r2, [pc, #120]	; (800b688 <_free_r+0x94>)
 800b60e:	6813      	ldr	r3, [r2, #0]
 800b610:	4610      	mov	r0, r2
 800b612:	b933      	cbnz	r3, 800b622 <_free_r+0x2e>
 800b614:	6063      	str	r3, [r4, #4]
 800b616:	6014      	str	r4, [r2, #0]
 800b618:	4628      	mov	r0, r5
 800b61a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b61e:	f001 bdbd 	b.w	800d19c <__malloc_unlock>
 800b622:	42a3      	cmp	r3, r4
 800b624:	d90a      	bls.n	800b63c <_free_r+0x48>
 800b626:	6821      	ldr	r1, [r4, #0]
 800b628:	1862      	adds	r2, r4, r1
 800b62a:	4293      	cmp	r3, r2
 800b62c:	bf01      	itttt	eq
 800b62e:	681a      	ldreq	r2, [r3, #0]
 800b630:	685b      	ldreq	r3, [r3, #4]
 800b632:	1852      	addeq	r2, r2, r1
 800b634:	6022      	streq	r2, [r4, #0]
 800b636:	6063      	str	r3, [r4, #4]
 800b638:	6004      	str	r4, [r0, #0]
 800b63a:	e7ed      	b.n	800b618 <_free_r+0x24>
 800b63c:	461a      	mov	r2, r3
 800b63e:	685b      	ldr	r3, [r3, #4]
 800b640:	b10b      	cbz	r3, 800b646 <_free_r+0x52>
 800b642:	42a3      	cmp	r3, r4
 800b644:	d9fa      	bls.n	800b63c <_free_r+0x48>
 800b646:	6811      	ldr	r1, [r2, #0]
 800b648:	1850      	adds	r0, r2, r1
 800b64a:	42a0      	cmp	r0, r4
 800b64c:	d10b      	bne.n	800b666 <_free_r+0x72>
 800b64e:	6820      	ldr	r0, [r4, #0]
 800b650:	4401      	add	r1, r0
 800b652:	1850      	adds	r0, r2, r1
 800b654:	4283      	cmp	r3, r0
 800b656:	6011      	str	r1, [r2, #0]
 800b658:	d1de      	bne.n	800b618 <_free_r+0x24>
 800b65a:	6818      	ldr	r0, [r3, #0]
 800b65c:	685b      	ldr	r3, [r3, #4]
 800b65e:	4401      	add	r1, r0
 800b660:	6011      	str	r1, [r2, #0]
 800b662:	6053      	str	r3, [r2, #4]
 800b664:	e7d8      	b.n	800b618 <_free_r+0x24>
 800b666:	d902      	bls.n	800b66e <_free_r+0x7a>
 800b668:	230c      	movs	r3, #12
 800b66a:	602b      	str	r3, [r5, #0]
 800b66c:	e7d4      	b.n	800b618 <_free_r+0x24>
 800b66e:	6820      	ldr	r0, [r4, #0]
 800b670:	1821      	adds	r1, r4, r0
 800b672:	428b      	cmp	r3, r1
 800b674:	bf01      	itttt	eq
 800b676:	6819      	ldreq	r1, [r3, #0]
 800b678:	685b      	ldreq	r3, [r3, #4]
 800b67a:	1809      	addeq	r1, r1, r0
 800b67c:	6021      	streq	r1, [r4, #0]
 800b67e:	6063      	str	r3, [r4, #4]
 800b680:	6054      	str	r4, [r2, #4]
 800b682:	e7c9      	b.n	800b618 <_free_r+0x24>
 800b684:	bd38      	pop	{r3, r4, r5, pc}
 800b686:	bf00      	nop
 800b688:	200004d4 	.word	0x200004d4

0800b68c <_malloc_r>:
 800b68c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b68e:	1ccd      	adds	r5, r1, #3
 800b690:	f025 0503 	bic.w	r5, r5, #3
 800b694:	3508      	adds	r5, #8
 800b696:	2d0c      	cmp	r5, #12
 800b698:	bf38      	it	cc
 800b69a:	250c      	movcc	r5, #12
 800b69c:	2d00      	cmp	r5, #0
 800b69e:	4606      	mov	r6, r0
 800b6a0:	db01      	blt.n	800b6a6 <_malloc_r+0x1a>
 800b6a2:	42a9      	cmp	r1, r5
 800b6a4:	d903      	bls.n	800b6ae <_malloc_r+0x22>
 800b6a6:	230c      	movs	r3, #12
 800b6a8:	6033      	str	r3, [r6, #0]
 800b6aa:	2000      	movs	r0, #0
 800b6ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6ae:	f001 fd6f 	bl	800d190 <__malloc_lock>
 800b6b2:	4921      	ldr	r1, [pc, #132]	; (800b738 <_malloc_r+0xac>)
 800b6b4:	680a      	ldr	r2, [r1, #0]
 800b6b6:	4614      	mov	r4, r2
 800b6b8:	b99c      	cbnz	r4, 800b6e2 <_malloc_r+0x56>
 800b6ba:	4f20      	ldr	r7, [pc, #128]	; (800b73c <_malloc_r+0xb0>)
 800b6bc:	683b      	ldr	r3, [r7, #0]
 800b6be:	b923      	cbnz	r3, 800b6ca <_malloc_r+0x3e>
 800b6c0:	4621      	mov	r1, r4
 800b6c2:	4630      	mov	r0, r6
 800b6c4:	f000 fcb4 	bl	800c030 <_sbrk_r>
 800b6c8:	6038      	str	r0, [r7, #0]
 800b6ca:	4629      	mov	r1, r5
 800b6cc:	4630      	mov	r0, r6
 800b6ce:	f000 fcaf 	bl	800c030 <_sbrk_r>
 800b6d2:	1c43      	adds	r3, r0, #1
 800b6d4:	d123      	bne.n	800b71e <_malloc_r+0x92>
 800b6d6:	230c      	movs	r3, #12
 800b6d8:	4630      	mov	r0, r6
 800b6da:	6033      	str	r3, [r6, #0]
 800b6dc:	f001 fd5e 	bl	800d19c <__malloc_unlock>
 800b6e0:	e7e3      	b.n	800b6aa <_malloc_r+0x1e>
 800b6e2:	6823      	ldr	r3, [r4, #0]
 800b6e4:	1b5b      	subs	r3, r3, r5
 800b6e6:	d417      	bmi.n	800b718 <_malloc_r+0x8c>
 800b6e8:	2b0b      	cmp	r3, #11
 800b6ea:	d903      	bls.n	800b6f4 <_malloc_r+0x68>
 800b6ec:	6023      	str	r3, [r4, #0]
 800b6ee:	441c      	add	r4, r3
 800b6f0:	6025      	str	r5, [r4, #0]
 800b6f2:	e004      	b.n	800b6fe <_malloc_r+0x72>
 800b6f4:	6863      	ldr	r3, [r4, #4]
 800b6f6:	42a2      	cmp	r2, r4
 800b6f8:	bf0c      	ite	eq
 800b6fa:	600b      	streq	r3, [r1, #0]
 800b6fc:	6053      	strne	r3, [r2, #4]
 800b6fe:	4630      	mov	r0, r6
 800b700:	f001 fd4c 	bl	800d19c <__malloc_unlock>
 800b704:	f104 000b 	add.w	r0, r4, #11
 800b708:	1d23      	adds	r3, r4, #4
 800b70a:	f020 0007 	bic.w	r0, r0, #7
 800b70e:	1ac2      	subs	r2, r0, r3
 800b710:	d0cc      	beq.n	800b6ac <_malloc_r+0x20>
 800b712:	1a1b      	subs	r3, r3, r0
 800b714:	50a3      	str	r3, [r4, r2]
 800b716:	e7c9      	b.n	800b6ac <_malloc_r+0x20>
 800b718:	4622      	mov	r2, r4
 800b71a:	6864      	ldr	r4, [r4, #4]
 800b71c:	e7cc      	b.n	800b6b8 <_malloc_r+0x2c>
 800b71e:	1cc4      	adds	r4, r0, #3
 800b720:	f024 0403 	bic.w	r4, r4, #3
 800b724:	42a0      	cmp	r0, r4
 800b726:	d0e3      	beq.n	800b6f0 <_malloc_r+0x64>
 800b728:	1a21      	subs	r1, r4, r0
 800b72a:	4630      	mov	r0, r6
 800b72c:	f000 fc80 	bl	800c030 <_sbrk_r>
 800b730:	3001      	adds	r0, #1
 800b732:	d1dd      	bne.n	800b6f0 <_malloc_r+0x64>
 800b734:	e7cf      	b.n	800b6d6 <_malloc_r+0x4a>
 800b736:	bf00      	nop
 800b738:	200004d4 	.word	0x200004d4
 800b73c:	200004d8 	.word	0x200004d8

0800b740 <__cvt>:
 800b740:	2b00      	cmp	r3, #0
 800b742:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b746:	461f      	mov	r7, r3
 800b748:	bfbb      	ittet	lt
 800b74a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800b74e:	461f      	movlt	r7, r3
 800b750:	2300      	movge	r3, #0
 800b752:	232d      	movlt	r3, #45	; 0x2d
 800b754:	b088      	sub	sp, #32
 800b756:	4614      	mov	r4, r2
 800b758:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b75a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800b75c:	7013      	strb	r3, [r2, #0]
 800b75e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b760:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800b764:	f023 0820 	bic.w	r8, r3, #32
 800b768:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b76c:	d005      	beq.n	800b77a <__cvt+0x3a>
 800b76e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b772:	d100      	bne.n	800b776 <__cvt+0x36>
 800b774:	3501      	adds	r5, #1
 800b776:	2302      	movs	r3, #2
 800b778:	e000      	b.n	800b77c <__cvt+0x3c>
 800b77a:	2303      	movs	r3, #3
 800b77c:	aa07      	add	r2, sp, #28
 800b77e:	9204      	str	r2, [sp, #16]
 800b780:	aa06      	add	r2, sp, #24
 800b782:	e9cd a202 	strd	sl, r2, [sp, #8]
 800b786:	e9cd 3500 	strd	r3, r5, [sp]
 800b78a:	4622      	mov	r2, r4
 800b78c:	463b      	mov	r3, r7
 800b78e:	f000 fdf7 	bl	800c380 <_dtoa_r>
 800b792:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b796:	4606      	mov	r6, r0
 800b798:	d102      	bne.n	800b7a0 <__cvt+0x60>
 800b79a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b79c:	07db      	lsls	r3, r3, #31
 800b79e:	d522      	bpl.n	800b7e6 <__cvt+0xa6>
 800b7a0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b7a4:	eb06 0905 	add.w	r9, r6, r5
 800b7a8:	d110      	bne.n	800b7cc <__cvt+0x8c>
 800b7aa:	7833      	ldrb	r3, [r6, #0]
 800b7ac:	2b30      	cmp	r3, #48	; 0x30
 800b7ae:	d10a      	bne.n	800b7c6 <__cvt+0x86>
 800b7b0:	2200      	movs	r2, #0
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	4620      	mov	r0, r4
 800b7b6:	4639      	mov	r1, r7
 800b7b8:	f7f5 f962 	bl	8000a80 <__aeabi_dcmpeq>
 800b7bc:	b918      	cbnz	r0, 800b7c6 <__cvt+0x86>
 800b7be:	f1c5 0501 	rsb	r5, r5, #1
 800b7c2:	f8ca 5000 	str.w	r5, [sl]
 800b7c6:	f8da 3000 	ldr.w	r3, [sl]
 800b7ca:	4499      	add	r9, r3
 800b7cc:	2200      	movs	r2, #0
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	4620      	mov	r0, r4
 800b7d2:	4639      	mov	r1, r7
 800b7d4:	f7f5 f954 	bl	8000a80 <__aeabi_dcmpeq>
 800b7d8:	b108      	cbz	r0, 800b7de <__cvt+0x9e>
 800b7da:	f8cd 901c 	str.w	r9, [sp, #28]
 800b7de:	2230      	movs	r2, #48	; 0x30
 800b7e0:	9b07      	ldr	r3, [sp, #28]
 800b7e2:	454b      	cmp	r3, r9
 800b7e4:	d307      	bcc.n	800b7f6 <__cvt+0xb6>
 800b7e6:	4630      	mov	r0, r6
 800b7e8:	9b07      	ldr	r3, [sp, #28]
 800b7ea:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b7ec:	1b9b      	subs	r3, r3, r6
 800b7ee:	6013      	str	r3, [r2, #0]
 800b7f0:	b008      	add	sp, #32
 800b7f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7f6:	1c59      	adds	r1, r3, #1
 800b7f8:	9107      	str	r1, [sp, #28]
 800b7fa:	701a      	strb	r2, [r3, #0]
 800b7fc:	e7f0      	b.n	800b7e0 <__cvt+0xa0>

0800b7fe <__exponent>:
 800b7fe:	4603      	mov	r3, r0
 800b800:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b802:	2900      	cmp	r1, #0
 800b804:	f803 2b02 	strb.w	r2, [r3], #2
 800b808:	bfb6      	itet	lt
 800b80a:	222d      	movlt	r2, #45	; 0x2d
 800b80c:	222b      	movge	r2, #43	; 0x2b
 800b80e:	4249      	neglt	r1, r1
 800b810:	2909      	cmp	r1, #9
 800b812:	7042      	strb	r2, [r0, #1]
 800b814:	dd2b      	ble.n	800b86e <__exponent+0x70>
 800b816:	f10d 0407 	add.w	r4, sp, #7
 800b81a:	46a4      	mov	ip, r4
 800b81c:	270a      	movs	r7, #10
 800b81e:	fb91 f6f7 	sdiv	r6, r1, r7
 800b822:	460a      	mov	r2, r1
 800b824:	46a6      	mov	lr, r4
 800b826:	fb07 1516 	mls	r5, r7, r6, r1
 800b82a:	2a63      	cmp	r2, #99	; 0x63
 800b82c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800b830:	4631      	mov	r1, r6
 800b832:	f104 34ff 	add.w	r4, r4, #4294967295
 800b836:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b83a:	dcf0      	bgt.n	800b81e <__exponent+0x20>
 800b83c:	3130      	adds	r1, #48	; 0x30
 800b83e:	f1ae 0502 	sub.w	r5, lr, #2
 800b842:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b846:	4629      	mov	r1, r5
 800b848:	1c44      	adds	r4, r0, #1
 800b84a:	4561      	cmp	r1, ip
 800b84c:	d30a      	bcc.n	800b864 <__exponent+0x66>
 800b84e:	f10d 0209 	add.w	r2, sp, #9
 800b852:	eba2 020e 	sub.w	r2, r2, lr
 800b856:	4565      	cmp	r5, ip
 800b858:	bf88      	it	hi
 800b85a:	2200      	movhi	r2, #0
 800b85c:	4413      	add	r3, r2
 800b85e:	1a18      	subs	r0, r3, r0
 800b860:	b003      	add	sp, #12
 800b862:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b864:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b868:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b86c:	e7ed      	b.n	800b84a <__exponent+0x4c>
 800b86e:	2330      	movs	r3, #48	; 0x30
 800b870:	3130      	adds	r1, #48	; 0x30
 800b872:	7083      	strb	r3, [r0, #2]
 800b874:	70c1      	strb	r1, [r0, #3]
 800b876:	1d03      	adds	r3, r0, #4
 800b878:	e7f1      	b.n	800b85e <__exponent+0x60>
	...

0800b87c <_printf_float>:
 800b87c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b880:	b091      	sub	sp, #68	; 0x44
 800b882:	460c      	mov	r4, r1
 800b884:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800b888:	4616      	mov	r6, r2
 800b88a:	461f      	mov	r7, r3
 800b88c:	4605      	mov	r5, r0
 800b88e:	f001 fc5b 	bl	800d148 <_localeconv_r>
 800b892:	6803      	ldr	r3, [r0, #0]
 800b894:	4618      	mov	r0, r3
 800b896:	9309      	str	r3, [sp, #36]	; 0x24
 800b898:	f7f4 fcc6 	bl	8000228 <strlen>
 800b89c:	2300      	movs	r3, #0
 800b89e:	930e      	str	r3, [sp, #56]	; 0x38
 800b8a0:	f8d8 3000 	ldr.w	r3, [r8]
 800b8a4:	900a      	str	r0, [sp, #40]	; 0x28
 800b8a6:	3307      	adds	r3, #7
 800b8a8:	f023 0307 	bic.w	r3, r3, #7
 800b8ac:	f103 0208 	add.w	r2, r3, #8
 800b8b0:	f894 9018 	ldrb.w	r9, [r4, #24]
 800b8b4:	f8d4 b000 	ldr.w	fp, [r4]
 800b8b8:	f8c8 2000 	str.w	r2, [r8]
 800b8bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8c0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b8c4:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800b8c8:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800b8cc:	930b      	str	r3, [sp, #44]	; 0x2c
 800b8ce:	f04f 32ff 	mov.w	r2, #4294967295
 800b8d2:	4640      	mov	r0, r8
 800b8d4:	4b9c      	ldr	r3, [pc, #624]	; (800bb48 <_printf_float+0x2cc>)
 800b8d6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b8d8:	f7f5 f904 	bl	8000ae4 <__aeabi_dcmpun>
 800b8dc:	bb70      	cbnz	r0, 800b93c <_printf_float+0xc0>
 800b8de:	f04f 32ff 	mov.w	r2, #4294967295
 800b8e2:	4640      	mov	r0, r8
 800b8e4:	4b98      	ldr	r3, [pc, #608]	; (800bb48 <_printf_float+0x2cc>)
 800b8e6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b8e8:	f7f5 f8de 	bl	8000aa8 <__aeabi_dcmple>
 800b8ec:	bb30      	cbnz	r0, 800b93c <_printf_float+0xc0>
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	4640      	mov	r0, r8
 800b8f4:	4651      	mov	r1, sl
 800b8f6:	f7f5 f8cd 	bl	8000a94 <__aeabi_dcmplt>
 800b8fa:	b110      	cbz	r0, 800b902 <_printf_float+0x86>
 800b8fc:	232d      	movs	r3, #45	; 0x2d
 800b8fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b902:	4b92      	ldr	r3, [pc, #584]	; (800bb4c <_printf_float+0x2d0>)
 800b904:	4892      	ldr	r0, [pc, #584]	; (800bb50 <_printf_float+0x2d4>)
 800b906:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800b90a:	bf94      	ite	ls
 800b90c:	4698      	movls	r8, r3
 800b90e:	4680      	movhi	r8, r0
 800b910:	2303      	movs	r3, #3
 800b912:	f04f 0a00 	mov.w	sl, #0
 800b916:	6123      	str	r3, [r4, #16]
 800b918:	f02b 0304 	bic.w	r3, fp, #4
 800b91c:	6023      	str	r3, [r4, #0]
 800b91e:	4633      	mov	r3, r6
 800b920:	4621      	mov	r1, r4
 800b922:	4628      	mov	r0, r5
 800b924:	9700      	str	r7, [sp, #0]
 800b926:	aa0f      	add	r2, sp, #60	; 0x3c
 800b928:	f000 f9d4 	bl	800bcd4 <_printf_common>
 800b92c:	3001      	adds	r0, #1
 800b92e:	f040 8090 	bne.w	800ba52 <_printf_float+0x1d6>
 800b932:	f04f 30ff 	mov.w	r0, #4294967295
 800b936:	b011      	add	sp, #68	; 0x44
 800b938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b93c:	4642      	mov	r2, r8
 800b93e:	4653      	mov	r3, sl
 800b940:	4640      	mov	r0, r8
 800b942:	4651      	mov	r1, sl
 800b944:	f7f5 f8ce 	bl	8000ae4 <__aeabi_dcmpun>
 800b948:	b148      	cbz	r0, 800b95e <_printf_float+0xe2>
 800b94a:	f1ba 0f00 	cmp.w	sl, #0
 800b94e:	bfb8      	it	lt
 800b950:	232d      	movlt	r3, #45	; 0x2d
 800b952:	4880      	ldr	r0, [pc, #512]	; (800bb54 <_printf_float+0x2d8>)
 800b954:	bfb8      	it	lt
 800b956:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b95a:	4b7f      	ldr	r3, [pc, #508]	; (800bb58 <_printf_float+0x2dc>)
 800b95c:	e7d3      	b.n	800b906 <_printf_float+0x8a>
 800b95e:	6863      	ldr	r3, [r4, #4]
 800b960:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800b964:	1c5a      	adds	r2, r3, #1
 800b966:	d142      	bne.n	800b9ee <_printf_float+0x172>
 800b968:	2306      	movs	r3, #6
 800b96a:	6063      	str	r3, [r4, #4]
 800b96c:	2200      	movs	r2, #0
 800b96e:	9206      	str	r2, [sp, #24]
 800b970:	aa0e      	add	r2, sp, #56	; 0x38
 800b972:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800b976:	aa0d      	add	r2, sp, #52	; 0x34
 800b978:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800b97c:	9203      	str	r2, [sp, #12]
 800b97e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800b982:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800b986:	6023      	str	r3, [r4, #0]
 800b988:	6863      	ldr	r3, [r4, #4]
 800b98a:	4642      	mov	r2, r8
 800b98c:	9300      	str	r3, [sp, #0]
 800b98e:	4628      	mov	r0, r5
 800b990:	4653      	mov	r3, sl
 800b992:	910b      	str	r1, [sp, #44]	; 0x2c
 800b994:	f7ff fed4 	bl	800b740 <__cvt>
 800b998:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b99a:	4680      	mov	r8, r0
 800b99c:	2947      	cmp	r1, #71	; 0x47
 800b99e:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b9a0:	d108      	bne.n	800b9b4 <_printf_float+0x138>
 800b9a2:	1cc8      	adds	r0, r1, #3
 800b9a4:	db02      	blt.n	800b9ac <_printf_float+0x130>
 800b9a6:	6863      	ldr	r3, [r4, #4]
 800b9a8:	4299      	cmp	r1, r3
 800b9aa:	dd40      	ble.n	800ba2e <_printf_float+0x1b2>
 800b9ac:	f1a9 0902 	sub.w	r9, r9, #2
 800b9b0:	fa5f f989 	uxtb.w	r9, r9
 800b9b4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800b9b8:	d81f      	bhi.n	800b9fa <_printf_float+0x17e>
 800b9ba:	464a      	mov	r2, r9
 800b9bc:	3901      	subs	r1, #1
 800b9be:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b9c2:	910d      	str	r1, [sp, #52]	; 0x34
 800b9c4:	f7ff ff1b 	bl	800b7fe <__exponent>
 800b9c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b9ca:	4682      	mov	sl, r0
 800b9cc:	1813      	adds	r3, r2, r0
 800b9ce:	2a01      	cmp	r2, #1
 800b9d0:	6123      	str	r3, [r4, #16]
 800b9d2:	dc02      	bgt.n	800b9da <_printf_float+0x15e>
 800b9d4:	6822      	ldr	r2, [r4, #0]
 800b9d6:	07d2      	lsls	r2, r2, #31
 800b9d8:	d501      	bpl.n	800b9de <_printf_float+0x162>
 800b9da:	3301      	adds	r3, #1
 800b9dc:	6123      	str	r3, [r4, #16]
 800b9de:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d09b      	beq.n	800b91e <_printf_float+0xa2>
 800b9e6:	232d      	movs	r3, #45	; 0x2d
 800b9e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b9ec:	e797      	b.n	800b91e <_printf_float+0xa2>
 800b9ee:	2947      	cmp	r1, #71	; 0x47
 800b9f0:	d1bc      	bne.n	800b96c <_printf_float+0xf0>
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d1ba      	bne.n	800b96c <_printf_float+0xf0>
 800b9f6:	2301      	movs	r3, #1
 800b9f8:	e7b7      	b.n	800b96a <_printf_float+0xee>
 800b9fa:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800b9fe:	d118      	bne.n	800ba32 <_printf_float+0x1b6>
 800ba00:	2900      	cmp	r1, #0
 800ba02:	6863      	ldr	r3, [r4, #4]
 800ba04:	dd0b      	ble.n	800ba1e <_printf_float+0x1a2>
 800ba06:	6121      	str	r1, [r4, #16]
 800ba08:	b913      	cbnz	r3, 800ba10 <_printf_float+0x194>
 800ba0a:	6822      	ldr	r2, [r4, #0]
 800ba0c:	07d0      	lsls	r0, r2, #31
 800ba0e:	d502      	bpl.n	800ba16 <_printf_float+0x19a>
 800ba10:	3301      	adds	r3, #1
 800ba12:	440b      	add	r3, r1
 800ba14:	6123      	str	r3, [r4, #16]
 800ba16:	f04f 0a00 	mov.w	sl, #0
 800ba1a:	65a1      	str	r1, [r4, #88]	; 0x58
 800ba1c:	e7df      	b.n	800b9de <_printf_float+0x162>
 800ba1e:	b913      	cbnz	r3, 800ba26 <_printf_float+0x1aa>
 800ba20:	6822      	ldr	r2, [r4, #0]
 800ba22:	07d2      	lsls	r2, r2, #31
 800ba24:	d501      	bpl.n	800ba2a <_printf_float+0x1ae>
 800ba26:	3302      	adds	r3, #2
 800ba28:	e7f4      	b.n	800ba14 <_printf_float+0x198>
 800ba2a:	2301      	movs	r3, #1
 800ba2c:	e7f2      	b.n	800ba14 <_printf_float+0x198>
 800ba2e:	f04f 0967 	mov.w	r9, #103	; 0x67
 800ba32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ba34:	4299      	cmp	r1, r3
 800ba36:	db05      	blt.n	800ba44 <_printf_float+0x1c8>
 800ba38:	6823      	ldr	r3, [r4, #0]
 800ba3a:	6121      	str	r1, [r4, #16]
 800ba3c:	07d8      	lsls	r0, r3, #31
 800ba3e:	d5ea      	bpl.n	800ba16 <_printf_float+0x19a>
 800ba40:	1c4b      	adds	r3, r1, #1
 800ba42:	e7e7      	b.n	800ba14 <_printf_float+0x198>
 800ba44:	2900      	cmp	r1, #0
 800ba46:	bfcc      	ite	gt
 800ba48:	2201      	movgt	r2, #1
 800ba4a:	f1c1 0202 	rsble	r2, r1, #2
 800ba4e:	4413      	add	r3, r2
 800ba50:	e7e0      	b.n	800ba14 <_printf_float+0x198>
 800ba52:	6823      	ldr	r3, [r4, #0]
 800ba54:	055a      	lsls	r2, r3, #21
 800ba56:	d407      	bmi.n	800ba68 <_printf_float+0x1ec>
 800ba58:	6923      	ldr	r3, [r4, #16]
 800ba5a:	4642      	mov	r2, r8
 800ba5c:	4631      	mov	r1, r6
 800ba5e:	4628      	mov	r0, r5
 800ba60:	47b8      	blx	r7
 800ba62:	3001      	adds	r0, #1
 800ba64:	d12b      	bne.n	800babe <_printf_float+0x242>
 800ba66:	e764      	b.n	800b932 <_printf_float+0xb6>
 800ba68:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800ba6c:	f240 80dd 	bls.w	800bc2a <_printf_float+0x3ae>
 800ba70:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ba74:	2200      	movs	r2, #0
 800ba76:	2300      	movs	r3, #0
 800ba78:	f7f5 f802 	bl	8000a80 <__aeabi_dcmpeq>
 800ba7c:	2800      	cmp	r0, #0
 800ba7e:	d033      	beq.n	800bae8 <_printf_float+0x26c>
 800ba80:	2301      	movs	r3, #1
 800ba82:	4631      	mov	r1, r6
 800ba84:	4628      	mov	r0, r5
 800ba86:	4a35      	ldr	r2, [pc, #212]	; (800bb5c <_printf_float+0x2e0>)
 800ba88:	47b8      	blx	r7
 800ba8a:	3001      	adds	r0, #1
 800ba8c:	f43f af51 	beq.w	800b932 <_printf_float+0xb6>
 800ba90:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800ba94:	429a      	cmp	r2, r3
 800ba96:	db02      	blt.n	800ba9e <_printf_float+0x222>
 800ba98:	6823      	ldr	r3, [r4, #0]
 800ba9a:	07d8      	lsls	r0, r3, #31
 800ba9c:	d50f      	bpl.n	800babe <_printf_float+0x242>
 800ba9e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800baa2:	4631      	mov	r1, r6
 800baa4:	4628      	mov	r0, r5
 800baa6:	47b8      	blx	r7
 800baa8:	3001      	adds	r0, #1
 800baaa:	f43f af42 	beq.w	800b932 <_printf_float+0xb6>
 800baae:	f04f 0800 	mov.w	r8, #0
 800bab2:	f104 091a 	add.w	r9, r4, #26
 800bab6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bab8:	3b01      	subs	r3, #1
 800baba:	4543      	cmp	r3, r8
 800babc:	dc09      	bgt.n	800bad2 <_printf_float+0x256>
 800babe:	6823      	ldr	r3, [r4, #0]
 800bac0:	079b      	lsls	r3, r3, #30
 800bac2:	f100 8102 	bmi.w	800bcca <_printf_float+0x44e>
 800bac6:	68e0      	ldr	r0, [r4, #12]
 800bac8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800baca:	4298      	cmp	r0, r3
 800bacc:	bfb8      	it	lt
 800bace:	4618      	movlt	r0, r3
 800bad0:	e731      	b.n	800b936 <_printf_float+0xba>
 800bad2:	2301      	movs	r3, #1
 800bad4:	464a      	mov	r2, r9
 800bad6:	4631      	mov	r1, r6
 800bad8:	4628      	mov	r0, r5
 800bada:	47b8      	blx	r7
 800badc:	3001      	adds	r0, #1
 800bade:	f43f af28 	beq.w	800b932 <_printf_float+0xb6>
 800bae2:	f108 0801 	add.w	r8, r8, #1
 800bae6:	e7e6      	b.n	800bab6 <_printf_float+0x23a>
 800bae8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800baea:	2b00      	cmp	r3, #0
 800baec:	dc38      	bgt.n	800bb60 <_printf_float+0x2e4>
 800baee:	2301      	movs	r3, #1
 800baf0:	4631      	mov	r1, r6
 800baf2:	4628      	mov	r0, r5
 800baf4:	4a19      	ldr	r2, [pc, #100]	; (800bb5c <_printf_float+0x2e0>)
 800baf6:	47b8      	blx	r7
 800baf8:	3001      	adds	r0, #1
 800bafa:	f43f af1a 	beq.w	800b932 <_printf_float+0xb6>
 800bafe:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800bb02:	4313      	orrs	r3, r2
 800bb04:	d102      	bne.n	800bb0c <_printf_float+0x290>
 800bb06:	6823      	ldr	r3, [r4, #0]
 800bb08:	07d9      	lsls	r1, r3, #31
 800bb0a:	d5d8      	bpl.n	800babe <_printf_float+0x242>
 800bb0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bb10:	4631      	mov	r1, r6
 800bb12:	4628      	mov	r0, r5
 800bb14:	47b8      	blx	r7
 800bb16:	3001      	adds	r0, #1
 800bb18:	f43f af0b 	beq.w	800b932 <_printf_float+0xb6>
 800bb1c:	f04f 0900 	mov.w	r9, #0
 800bb20:	f104 0a1a 	add.w	sl, r4, #26
 800bb24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bb26:	425b      	negs	r3, r3
 800bb28:	454b      	cmp	r3, r9
 800bb2a:	dc01      	bgt.n	800bb30 <_printf_float+0x2b4>
 800bb2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bb2e:	e794      	b.n	800ba5a <_printf_float+0x1de>
 800bb30:	2301      	movs	r3, #1
 800bb32:	4652      	mov	r2, sl
 800bb34:	4631      	mov	r1, r6
 800bb36:	4628      	mov	r0, r5
 800bb38:	47b8      	blx	r7
 800bb3a:	3001      	adds	r0, #1
 800bb3c:	f43f aef9 	beq.w	800b932 <_printf_float+0xb6>
 800bb40:	f109 0901 	add.w	r9, r9, #1
 800bb44:	e7ee      	b.n	800bb24 <_printf_float+0x2a8>
 800bb46:	bf00      	nop
 800bb48:	7fefffff 	.word	0x7fefffff
 800bb4c:	0800f5e4 	.word	0x0800f5e4
 800bb50:	0800f5e8 	.word	0x0800f5e8
 800bb54:	0800f5f0 	.word	0x0800f5f0
 800bb58:	0800f5ec 	.word	0x0800f5ec
 800bb5c:	0800f5f4 	.word	0x0800f5f4
 800bb60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bb62:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bb64:	429a      	cmp	r2, r3
 800bb66:	bfa8      	it	ge
 800bb68:	461a      	movge	r2, r3
 800bb6a:	2a00      	cmp	r2, #0
 800bb6c:	4691      	mov	r9, r2
 800bb6e:	dc37      	bgt.n	800bbe0 <_printf_float+0x364>
 800bb70:	f04f 0b00 	mov.w	fp, #0
 800bb74:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bb78:	f104 021a 	add.w	r2, r4, #26
 800bb7c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800bb80:	ebaa 0309 	sub.w	r3, sl, r9
 800bb84:	455b      	cmp	r3, fp
 800bb86:	dc33      	bgt.n	800bbf0 <_printf_float+0x374>
 800bb88:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800bb8c:	429a      	cmp	r2, r3
 800bb8e:	db3b      	blt.n	800bc08 <_printf_float+0x38c>
 800bb90:	6823      	ldr	r3, [r4, #0]
 800bb92:	07da      	lsls	r2, r3, #31
 800bb94:	d438      	bmi.n	800bc08 <_printf_float+0x38c>
 800bb96:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bb98:	990d      	ldr	r1, [sp, #52]	; 0x34
 800bb9a:	eba2 030a 	sub.w	r3, r2, sl
 800bb9e:	eba2 0901 	sub.w	r9, r2, r1
 800bba2:	4599      	cmp	r9, r3
 800bba4:	bfa8      	it	ge
 800bba6:	4699      	movge	r9, r3
 800bba8:	f1b9 0f00 	cmp.w	r9, #0
 800bbac:	dc34      	bgt.n	800bc18 <_printf_float+0x39c>
 800bbae:	f04f 0800 	mov.w	r8, #0
 800bbb2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bbb6:	f104 0a1a 	add.w	sl, r4, #26
 800bbba:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800bbbe:	1a9b      	subs	r3, r3, r2
 800bbc0:	eba3 0309 	sub.w	r3, r3, r9
 800bbc4:	4543      	cmp	r3, r8
 800bbc6:	f77f af7a 	ble.w	800babe <_printf_float+0x242>
 800bbca:	2301      	movs	r3, #1
 800bbcc:	4652      	mov	r2, sl
 800bbce:	4631      	mov	r1, r6
 800bbd0:	4628      	mov	r0, r5
 800bbd2:	47b8      	blx	r7
 800bbd4:	3001      	adds	r0, #1
 800bbd6:	f43f aeac 	beq.w	800b932 <_printf_float+0xb6>
 800bbda:	f108 0801 	add.w	r8, r8, #1
 800bbde:	e7ec      	b.n	800bbba <_printf_float+0x33e>
 800bbe0:	4613      	mov	r3, r2
 800bbe2:	4631      	mov	r1, r6
 800bbe4:	4642      	mov	r2, r8
 800bbe6:	4628      	mov	r0, r5
 800bbe8:	47b8      	blx	r7
 800bbea:	3001      	adds	r0, #1
 800bbec:	d1c0      	bne.n	800bb70 <_printf_float+0x2f4>
 800bbee:	e6a0      	b.n	800b932 <_printf_float+0xb6>
 800bbf0:	2301      	movs	r3, #1
 800bbf2:	4631      	mov	r1, r6
 800bbf4:	4628      	mov	r0, r5
 800bbf6:	920b      	str	r2, [sp, #44]	; 0x2c
 800bbf8:	47b8      	blx	r7
 800bbfa:	3001      	adds	r0, #1
 800bbfc:	f43f ae99 	beq.w	800b932 <_printf_float+0xb6>
 800bc00:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bc02:	f10b 0b01 	add.w	fp, fp, #1
 800bc06:	e7b9      	b.n	800bb7c <_printf_float+0x300>
 800bc08:	4631      	mov	r1, r6
 800bc0a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bc0e:	4628      	mov	r0, r5
 800bc10:	47b8      	blx	r7
 800bc12:	3001      	adds	r0, #1
 800bc14:	d1bf      	bne.n	800bb96 <_printf_float+0x31a>
 800bc16:	e68c      	b.n	800b932 <_printf_float+0xb6>
 800bc18:	464b      	mov	r3, r9
 800bc1a:	4631      	mov	r1, r6
 800bc1c:	4628      	mov	r0, r5
 800bc1e:	eb08 020a 	add.w	r2, r8, sl
 800bc22:	47b8      	blx	r7
 800bc24:	3001      	adds	r0, #1
 800bc26:	d1c2      	bne.n	800bbae <_printf_float+0x332>
 800bc28:	e683      	b.n	800b932 <_printf_float+0xb6>
 800bc2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bc2c:	2a01      	cmp	r2, #1
 800bc2e:	dc01      	bgt.n	800bc34 <_printf_float+0x3b8>
 800bc30:	07db      	lsls	r3, r3, #31
 800bc32:	d537      	bpl.n	800bca4 <_printf_float+0x428>
 800bc34:	2301      	movs	r3, #1
 800bc36:	4642      	mov	r2, r8
 800bc38:	4631      	mov	r1, r6
 800bc3a:	4628      	mov	r0, r5
 800bc3c:	47b8      	blx	r7
 800bc3e:	3001      	adds	r0, #1
 800bc40:	f43f ae77 	beq.w	800b932 <_printf_float+0xb6>
 800bc44:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bc48:	4631      	mov	r1, r6
 800bc4a:	4628      	mov	r0, r5
 800bc4c:	47b8      	blx	r7
 800bc4e:	3001      	adds	r0, #1
 800bc50:	f43f ae6f 	beq.w	800b932 <_printf_float+0xb6>
 800bc54:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bc58:	2200      	movs	r2, #0
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	f7f4 ff10 	bl	8000a80 <__aeabi_dcmpeq>
 800bc60:	b9d8      	cbnz	r0, 800bc9a <_printf_float+0x41e>
 800bc62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bc64:	f108 0201 	add.w	r2, r8, #1
 800bc68:	3b01      	subs	r3, #1
 800bc6a:	4631      	mov	r1, r6
 800bc6c:	4628      	mov	r0, r5
 800bc6e:	47b8      	blx	r7
 800bc70:	3001      	adds	r0, #1
 800bc72:	d10e      	bne.n	800bc92 <_printf_float+0x416>
 800bc74:	e65d      	b.n	800b932 <_printf_float+0xb6>
 800bc76:	2301      	movs	r3, #1
 800bc78:	464a      	mov	r2, r9
 800bc7a:	4631      	mov	r1, r6
 800bc7c:	4628      	mov	r0, r5
 800bc7e:	47b8      	blx	r7
 800bc80:	3001      	adds	r0, #1
 800bc82:	f43f ae56 	beq.w	800b932 <_printf_float+0xb6>
 800bc86:	f108 0801 	add.w	r8, r8, #1
 800bc8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bc8c:	3b01      	subs	r3, #1
 800bc8e:	4543      	cmp	r3, r8
 800bc90:	dcf1      	bgt.n	800bc76 <_printf_float+0x3fa>
 800bc92:	4653      	mov	r3, sl
 800bc94:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800bc98:	e6e0      	b.n	800ba5c <_printf_float+0x1e0>
 800bc9a:	f04f 0800 	mov.w	r8, #0
 800bc9e:	f104 091a 	add.w	r9, r4, #26
 800bca2:	e7f2      	b.n	800bc8a <_printf_float+0x40e>
 800bca4:	2301      	movs	r3, #1
 800bca6:	4642      	mov	r2, r8
 800bca8:	e7df      	b.n	800bc6a <_printf_float+0x3ee>
 800bcaa:	2301      	movs	r3, #1
 800bcac:	464a      	mov	r2, r9
 800bcae:	4631      	mov	r1, r6
 800bcb0:	4628      	mov	r0, r5
 800bcb2:	47b8      	blx	r7
 800bcb4:	3001      	adds	r0, #1
 800bcb6:	f43f ae3c 	beq.w	800b932 <_printf_float+0xb6>
 800bcba:	f108 0801 	add.w	r8, r8, #1
 800bcbe:	68e3      	ldr	r3, [r4, #12]
 800bcc0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800bcc2:	1a5b      	subs	r3, r3, r1
 800bcc4:	4543      	cmp	r3, r8
 800bcc6:	dcf0      	bgt.n	800bcaa <_printf_float+0x42e>
 800bcc8:	e6fd      	b.n	800bac6 <_printf_float+0x24a>
 800bcca:	f04f 0800 	mov.w	r8, #0
 800bcce:	f104 0919 	add.w	r9, r4, #25
 800bcd2:	e7f4      	b.n	800bcbe <_printf_float+0x442>

0800bcd4 <_printf_common>:
 800bcd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bcd8:	4616      	mov	r6, r2
 800bcda:	4699      	mov	r9, r3
 800bcdc:	688a      	ldr	r2, [r1, #8]
 800bcde:	690b      	ldr	r3, [r1, #16]
 800bce0:	4607      	mov	r7, r0
 800bce2:	4293      	cmp	r3, r2
 800bce4:	bfb8      	it	lt
 800bce6:	4613      	movlt	r3, r2
 800bce8:	6033      	str	r3, [r6, #0]
 800bcea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bcee:	460c      	mov	r4, r1
 800bcf0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bcf4:	b10a      	cbz	r2, 800bcfa <_printf_common+0x26>
 800bcf6:	3301      	adds	r3, #1
 800bcf8:	6033      	str	r3, [r6, #0]
 800bcfa:	6823      	ldr	r3, [r4, #0]
 800bcfc:	0699      	lsls	r1, r3, #26
 800bcfe:	bf42      	ittt	mi
 800bd00:	6833      	ldrmi	r3, [r6, #0]
 800bd02:	3302      	addmi	r3, #2
 800bd04:	6033      	strmi	r3, [r6, #0]
 800bd06:	6825      	ldr	r5, [r4, #0]
 800bd08:	f015 0506 	ands.w	r5, r5, #6
 800bd0c:	d106      	bne.n	800bd1c <_printf_common+0x48>
 800bd0e:	f104 0a19 	add.w	sl, r4, #25
 800bd12:	68e3      	ldr	r3, [r4, #12]
 800bd14:	6832      	ldr	r2, [r6, #0]
 800bd16:	1a9b      	subs	r3, r3, r2
 800bd18:	42ab      	cmp	r3, r5
 800bd1a:	dc28      	bgt.n	800bd6e <_printf_common+0x9a>
 800bd1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bd20:	1e13      	subs	r3, r2, #0
 800bd22:	6822      	ldr	r2, [r4, #0]
 800bd24:	bf18      	it	ne
 800bd26:	2301      	movne	r3, #1
 800bd28:	0692      	lsls	r2, r2, #26
 800bd2a:	d42d      	bmi.n	800bd88 <_printf_common+0xb4>
 800bd2c:	4649      	mov	r1, r9
 800bd2e:	4638      	mov	r0, r7
 800bd30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bd34:	47c0      	blx	r8
 800bd36:	3001      	adds	r0, #1
 800bd38:	d020      	beq.n	800bd7c <_printf_common+0xa8>
 800bd3a:	6823      	ldr	r3, [r4, #0]
 800bd3c:	68e5      	ldr	r5, [r4, #12]
 800bd3e:	f003 0306 	and.w	r3, r3, #6
 800bd42:	2b04      	cmp	r3, #4
 800bd44:	bf18      	it	ne
 800bd46:	2500      	movne	r5, #0
 800bd48:	6832      	ldr	r2, [r6, #0]
 800bd4a:	f04f 0600 	mov.w	r6, #0
 800bd4e:	68a3      	ldr	r3, [r4, #8]
 800bd50:	bf08      	it	eq
 800bd52:	1aad      	subeq	r5, r5, r2
 800bd54:	6922      	ldr	r2, [r4, #16]
 800bd56:	bf08      	it	eq
 800bd58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bd5c:	4293      	cmp	r3, r2
 800bd5e:	bfc4      	itt	gt
 800bd60:	1a9b      	subgt	r3, r3, r2
 800bd62:	18ed      	addgt	r5, r5, r3
 800bd64:	341a      	adds	r4, #26
 800bd66:	42b5      	cmp	r5, r6
 800bd68:	d11a      	bne.n	800bda0 <_printf_common+0xcc>
 800bd6a:	2000      	movs	r0, #0
 800bd6c:	e008      	b.n	800bd80 <_printf_common+0xac>
 800bd6e:	2301      	movs	r3, #1
 800bd70:	4652      	mov	r2, sl
 800bd72:	4649      	mov	r1, r9
 800bd74:	4638      	mov	r0, r7
 800bd76:	47c0      	blx	r8
 800bd78:	3001      	adds	r0, #1
 800bd7a:	d103      	bne.n	800bd84 <_printf_common+0xb0>
 800bd7c:	f04f 30ff 	mov.w	r0, #4294967295
 800bd80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd84:	3501      	adds	r5, #1
 800bd86:	e7c4      	b.n	800bd12 <_printf_common+0x3e>
 800bd88:	2030      	movs	r0, #48	; 0x30
 800bd8a:	18e1      	adds	r1, r4, r3
 800bd8c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bd90:	1c5a      	adds	r2, r3, #1
 800bd92:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bd96:	4422      	add	r2, r4
 800bd98:	3302      	adds	r3, #2
 800bd9a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bd9e:	e7c5      	b.n	800bd2c <_printf_common+0x58>
 800bda0:	2301      	movs	r3, #1
 800bda2:	4622      	mov	r2, r4
 800bda4:	4649      	mov	r1, r9
 800bda6:	4638      	mov	r0, r7
 800bda8:	47c0      	blx	r8
 800bdaa:	3001      	adds	r0, #1
 800bdac:	d0e6      	beq.n	800bd7c <_printf_common+0xa8>
 800bdae:	3601      	adds	r6, #1
 800bdb0:	e7d9      	b.n	800bd66 <_printf_common+0x92>
	...

0800bdb4 <_printf_i>:
 800bdb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bdb8:	460c      	mov	r4, r1
 800bdba:	7e27      	ldrb	r7, [r4, #24]
 800bdbc:	4691      	mov	r9, r2
 800bdbe:	2f78      	cmp	r7, #120	; 0x78
 800bdc0:	4680      	mov	r8, r0
 800bdc2:	469a      	mov	sl, r3
 800bdc4:	990c      	ldr	r1, [sp, #48]	; 0x30
 800bdc6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bdca:	d807      	bhi.n	800bddc <_printf_i+0x28>
 800bdcc:	2f62      	cmp	r7, #98	; 0x62
 800bdce:	d80a      	bhi.n	800bde6 <_printf_i+0x32>
 800bdd0:	2f00      	cmp	r7, #0
 800bdd2:	f000 80d9 	beq.w	800bf88 <_printf_i+0x1d4>
 800bdd6:	2f58      	cmp	r7, #88	; 0x58
 800bdd8:	f000 80a4 	beq.w	800bf24 <_printf_i+0x170>
 800bddc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bde0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bde4:	e03a      	b.n	800be5c <_printf_i+0xa8>
 800bde6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bdea:	2b15      	cmp	r3, #21
 800bdec:	d8f6      	bhi.n	800bddc <_printf_i+0x28>
 800bdee:	a001      	add	r0, pc, #4	; (adr r0, 800bdf4 <_printf_i+0x40>)
 800bdf0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800bdf4:	0800be4d 	.word	0x0800be4d
 800bdf8:	0800be61 	.word	0x0800be61
 800bdfc:	0800bddd 	.word	0x0800bddd
 800be00:	0800bddd 	.word	0x0800bddd
 800be04:	0800bddd 	.word	0x0800bddd
 800be08:	0800bddd 	.word	0x0800bddd
 800be0c:	0800be61 	.word	0x0800be61
 800be10:	0800bddd 	.word	0x0800bddd
 800be14:	0800bddd 	.word	0x0800bddd
 800be18:	0800bddd 	.word	0x0800bddd
 800be1c:	0800bddd 	.word	0x0800bddd
 800be20:	0800bf6f 	.word	0x0800bf6f
 800be24:	0800be91 	.word	0x0800be91
 800be28:	0800bf51 	.word	0x0800bf51
 800be2c:	0800bddd 	.word	0x0800bddd
 800be30:	0800bddd 	.word	0x0800bddd
 800be34:	0800bf91 	.word	0x0800bf91
 800be38:	0800bddd 	.word	0x0800bddd
 800be3c:	0800be91 	.word	0x0800be91
 800be40:	0800bddd 	.word	0x0800bddd
 800be44:	0800bddd 	.word	0x0800bddd
 800be48:	0800bf59 	.word	0x0800bf59
 800be4c:	680b      	ldr	r3, [r1, #0]
 800be4e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800be52:	1d1a      	adds	r2, r3, #4
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	600a      	str	r2, [r1, #0]
 800be58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800be5c:	2301      	movs	r3, #1
 800be5e:	e0a4      	b.n	800bfaa <_printf_i+0x1f6>
 800be60:	6825      	ldr	r5, [r4, #0]
 800be62:	6808      	ldr	r0, [r1, #0]
 800be64:	062e      	lsls	r6, r5, #24
 800be66:	f100 0304 	add.w	r3, r0, #4
 800be6a:	d50a      	bpl.n	800be82 <_printf_i+0xce>
 800be6c:	6805      	ldr	r5, [r0, #0]
 800be6e:	600b      	str	r3, [r1, #0]
 800be70:	2d00      	cmp	r5, #0
 800be72:	da03      	bge.n	800be7c <_printf_i+0xc8>
 800be74:	232d      	movs	r3, #45	; 0x2d
 800be76:	426d      	negs	r5, r5
 800be78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800be7c:	230a      	movs	r3, #10
 800be7e:	485e      	ldr	r0, [pc, #376]	; (800bff8 <_printf_i+0x244>)
 800be80:	e019      	b.n	800beb6 <_printf_i+0x102>
 800be82:	f015 0f40 	tst.w	r5, #64	; 0x40
 800be86:	6805      	ldr	r5, [r0, #0]
 800be88:	600b      	str	r3, [r1, #0]
 800be8a:	bf18      	it	ne
 800be8c:	b22d      	sxthne	r5, r5
 800be8e:	e7ef      	b.n	800be70 <_printf_i+0xbc>
 800be90:	680b      	ldr	r3, [r1, #0]
 800be92:	6825      	ldr	r5, [r4, #0]
 800be94:	1d18      	adds	r0, r3, #4
 800be96:	6008      	str	r0, [r1, #0]
 800be98:	0628      	lsls	r0, r5, #24
 800be9a:	d501      	bpl.n	800bea0 <_printf_i+0xec>
 800be9c:	681d      	ldr	r5, [r3, #0]
 800be9e:	e002      	b.n	800bea6 <_printf_i+0xf2>
 800bea0:	0669      	lsls	r1, r5, #25
 800bea2:	d5fb      	bpl.n	800be9c <_printf_i+0xe8>
 800bea4:	881d      	ldrh	r5, [r3, #0]
 800bea6:	2f6f      	cmp	r7, #111	; 0x6f
 800bea8:	bf0c      	ite	eq
 800beaa:	2308      	moveq	r3, #8
 800beac:	230a      	movne	r3, #10
 800beae:	4852      	ldr	r0, [pc, #328]	; (800bff8 <_printf_i+0x244>)
 800beb0:	2100      	movs	r1, #0
 800beb2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800beb6:	6866      	ldr	r6, [r4, #4]
 800beb8:	2e00      	cmp	r6, #0
 800beba:	bfa8      	it	ge
 800bebc:	6821      	ldrge	r1, [r4, #0]
 800bebe:	60a6      	str	r6, [r4, #8]
 800bec0:	bfa4      	itt	ge
 800bec2:	f021 0104 	bicge.w	r1, r1, #4
 800bec6:	6021      	strge	r1, [r4, #0]
 800bec8:	b90d      	cbnz	r5, 800bece <_printf_i+0x11a>
 800beca:	2e00      	cmp	r6, #0
 800becc:	d04d      	beq.n	800bf6a <_printf_i+0x1b6>
 800bece:	4616      	mov	r6, r2
 800bed0:	fbb5 f1f3 	udiv	r1, r5, r3
 800bed4:	fb03 5711 	mls	r7, r3, r1, r5
 800bed8:	5dc7      	ldrb	r7, [r0, r7]
 800beda:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bede:	462f      	mov	r7, r5
 800bee0:	42bb      	cmp	r3, r7
 800bee2:	460d      	mov	r5, r1
 800bee4:	d9f4      	bls.n	800bed0 <_printf_i+0x11c>
 800bee6:	2b08      	cmp	r3, #8
 800bee8:	d10b      	bne.n	800bf02 <_printf_i+0x14e>
 800beea:	6823      	ldr	r3, [r4, #0]
 800beec:	07df      	lsls	r7, r3, #31
 800beee:	d508      	bpl.n	800bf02 <_printf_i+0x14e>
 800bef0:	6923      	ldr	r3, [r4, #16]
 800bef2:	6861      	ldr	r1, [r4, #4]
 800bef4:	4299      	cmp	r1, r3
 800bef6:	bfde      	ittt	le
 800bef8:	2330      	movle	r3, #48	; 0x30
 800befa:	f806 3c01 	strble.w	r3, [r6, #-1]
 800befe:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bf02:	1b92      	subs	r2, r2, r6
 800bf04:	6122      	str	r2, [r4, #16]
 800bf06:	464b      	mov	r3, r9
 800bf08:	4621      	mov	r1, r4
 800bf0a:	4640      	mov	r0, r8
 800bf0c:	f8cd a000 	str.w	sl, [sp]
 800bf10:	aa03      	add	r2, sp, #12
 800bf12:	f7ff fedf 	bl	800bcd4 <_printf_common>
 800bf16:	3001      	adds	r0, #1
 800bf18:	d14c      	bne.n	800bfb4 <_printf_i+0x200>
 800bf1a:	f04f 30ff 	mov.w	r0, #4294967295
 800bf1e:	b004      	add	sp, #16
 800bf20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf24:	4834      	ldr	r0, [pc, #208]	; (800bff8 <_printf_i+0x244>)
 800bf26:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bf2a:	680e      	ldr	r6, [r1, #0]
 800bf2c:	6823      	ldr	r3, [r4, #0]
 800bf2e:	f856 5b04 	ldr.w	r5, [r6], #4
 800bf32:	061f      	lsls	r7, r3, #24
 800bf34:	600e      	str	r6, [r1, #0]
 800bf36:	d514      	bpl.n	800bf62 <_printf_i+0x1ae>
 800bf38:	07d9      	lsls	r1, r3, #31
 800bf3a:	bf44      	itt	mi
 800bf3c:	f043 0320 	orrmi.w	r3, r3, #32
 800bf40:	6023      	strmi	r3, [r4, #0]
 800bf42:	b91d      	cbnz	r5, 800bf4c <_printf_i+0x198>
 800bf44:	6823      	ldr	r3, [r4, #0]
 800bf46:	f023 0320 	bic.w	r3, r3, #32
 800bf4a:	6023      	str	r3, [r4, #0]
 800bf4c:	2310      	movs	r3, #16
 800bf4e:	e7af      	b.n	800beb0 <_printf_i+0xfc>
 800bf50:	6823      	ldr	r3, [r4, #0]
 800bf52:	f043 0320 	orr.w	r3, r3, #32
 800bf56:	6023      	str	r3, [r4, #0]
 800bf58:	2378      	movs	r3, #120	; 0x78
 800bf5a:	4828      	ldr	r0, [pc, #160]	; (800bffc <_printf_i+0x248>)
 800bf5c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bf60:	e7e3      	b.n	800bf2a <_printf_i+0x176>
 800bf62:	065e      	lsls	r6, r3, #25
 800bf64:	bf48      	it	mi
 800bf66:	b2ad      	uxthmi	r5, r5
 800bf68:	e7e6      	b.n	800bf38 <_printf_i+0x184>
 800bf6a:	4616      	mov	r6, r2
 800bf6c:	e7bb      	b.n	800bee6 <_printf_i+0x132>
 800bf6e:	680b      	ldr	r3, [r1, #0]
 800bf70:	6826      	ldr	r6, [r4, #0]
 800bf72:	1d1d      	adds	r5, r3, #4
 800bf74:	6960      	ldr	r0, [r4, #20]
 800bf76:	600d      	str	r5, [r1, #0]
 800bf78:	0635      	lsls	r5, r6, #24
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	d501      	bpl.n	800bf82 <_printf_i+0x1ce>
 800bf7e:	6018      	str	r0, [r3, #0]
 800bf80:	e002      	b.n	800bf88 <_printf_i+0x1d4>
 800bf82:	0671      	lsls	r1, r6, #25
 800bf84:	d5fb      	bpl.n	800bf7e <_printf_i+0x1ca>
 800bf86:	8018      	strh	r0, [r3, #0]
 800bf88:	2300      	movs	r3, #0
 800bf8a:	4616      	mov	r6, r2
 800bf8c:	6123      	str	r3, [r4, #16]
 800bf8e:	e7ba      	b.n	800bf06 <_printf_i+0x152>
 800bf90:	680b      	ldr	r3, [r1, #0]
 800bf92:	1d1a      	adds	r2, r3, #4
 800bf94:	600a      	str	r2, [r1, #0]
 800bf96:	681e      	ldr	r6, [r3, #0]
 800bf98:	2100      	movs	r1, #0
 800bf9a:	4630      	mov	r0, r6
 800bf9c:	6862      	ldr	r2, [r4, #4]
 800bf9e:	f001 f8da 	bl	800d156 <memchr>
 800bfa2:	b108      	cbz	r0, 800bfa8 <_printf_i+0x1f4>
 800bfa4:	1b80      	subs	r0, r0, r6
 800bfa6:	6060      	str	r0, [r4, #4]
 800bfa8:	6863      	ldr	r3, [r4, #4]
 800bfaa:	6123      	str	r3, [r4, #16]
 800bfac:	2300      	movs	r3, #0
 800bfae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bfb2:	e7a8      	b.n	800bf06 <_printf_i+0x152>
 800bfb4:	4632      	mov	r2, r6
 800bfb6:	4649      	mov	r1, r9
 800bfb8:	4640      	mov	r0, r8
 800bfba:	6923      	ldr	r3, [r4, #16]
 800bfbc:	47d0      	blx	sl
 800bfbe:	3001      	adds	r0, #1
 800bfc0:	d0ab      	beq.n	800bf1a <_printf_i+0x166>
 800bfc2:	6823      	ldr	r3, [r4, #0]
 800bfc4:	079b      	lsls	r3, r3, #30
 800bfc6:	d413      	bmi.n	800bff0 <_printf_i+0x23c>
 800bfc8:	68e0      	ldr	r0, [r4, #12]
 800bfca:	9b03      	ldr	r3, [sp, #12]
 800bfcc:	4298      	cmp	r0, r3
 800bfce:	bfb8      	it	lt
 800bfd0:	4618      	movlt	r0, r3
 800bfd2:	e7a4      	b.n	800bf1e <_printf_i+0x16a>
 800bfd4:	2301      	movs	r3, #1
 800bfd6:	4632      	mov	r2, r6
 800bfd8:	4649      	mov	r1, r9
 800bfda:	4640      	mov	r0, r8
 800bfdc:	47d0      	blx	sl
 800bfde:	3001      	adds	r0, #1
 800bfe0:	d09b      	beq.n	800bf1a <_printf_i+0x166>
 800bfe2:	3501      	adds	r5, #1
 800bfe4:	68e3      	ldr	r3, [r4, #12]
 800bfe6:	9903      	ldr	r1, [sp, #12]
 800bfe8:	1a5b      	subs	r3, r3, r1
 800bfea:	42ab      	cmp	r3, r5
 800bfec:	dcf2      	bgt.n	800bfd4 <_printf_i+0x220>
 800bfee:	e7eb      	b.n	800bfc8 <_printf_i+0x214>
 800bff0:	2500      	movs	r5, #0
 800bff2:	f104 0619 	add.w	r6, r4, #25
 800bff6:	e7f5      	b.n	800bfe4 <_printf_i+0x230>
 800bff8:	0800f5f6 	.word	0x0800f5f6
 800bffc:	0800f607 	.word	0x0800f607

0800c000 <iprintf>:
 800c000:	b40f      	push	{r0, r1, r2, r3}
 800c002:	4b0a      	ldr	r3, [pc, #40]	; (800c02c <iprintf+0x2c>)
 800c004:	b513      	push	{r0, r1, r4, lr}
 800c006:	681c      	ldr	r4, [r3, #0]
 800c008:	b124      	cbz	r4, 800c014 <iprintf+0x14>
 800c00a:	69a3      	ldr	r3, [r4, #24]
 800c00c:	b913      	cbnz	r3, 800c014 <iprintf+0x14>
 800c00e:	4620      	mov	r0, r4
 800c010:	f000 fffc 	bl	800d00c <__sinit>
 800c014:	ab05      	add	r3, sp, #20
 800c016:	4620      	mov	r0, r4
 800c018:	9a04      	ldr	r2, [sp, #16]
 800c01a:	68a1      	ldr	r1, [r4, #8]
 800c01c:	9301      	str	r3, [sp, #4]
 800c01e:	f001 fdd7 	bl	800dbd0 <_vfiprintf_r>
 800c022:	b002      	add	sp, #8
 800c024:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c028:	b004      	add	sp, #16
 800c02a:	4770      	bx	lr
 800c02c:	2000001c 	.word	0x2000001c

0800c030 <_sbrk_r>:
 800c030:	b538      	push	{r3, r4, r5, lr}
 800c032:	2300      	movs	r3, #0
 800c034:	4d05      	ldr	r5, [pc, #20]	; (800c04c <_sbrk_r+0x1c>)
 800c036:	4604      	mov	r4, r0
 800c038:	4608      	mov	r0, r1
 800c03a:	602b      	str	r3, [r5, #0]
 800c03c:	f7f6 fd16 	bl	8002a6c <_sbrk>
 800c040:	1c43      	adds	r3, r0, #1
 800c042:	d102      	bne.n	800c04a <_sbrk_r+0x1a>
 800c044:	682b      	ldr	r3, [r5, #0]
 800c046:	b103      	cbz	r3, 800c04a <_sbrk_r+0x1a>
 800c048:	6023      	str	r3, [r4, #0]
 800c04a:	bd38      	pop	{r3, r4, r5, pc}
 800c04c:	20000bbc 	.word	0x20000bbc

0800c050 <siprintf>:
 800c050:	b40e      	push	{r1, r2, r3}
 800c052:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c056:	b500      	push	{lr}
 800c058:	b09c      	sub	sp, #112	; 0x70
 800c05a:	ab1d      	add	r3, sp, #116	; 0x74
 800c05c:	9002      	str	r0, [sp, #8]
 800c05e:	9006      	str	r0, [sp, #24]
 800c060:	9107      	str	r1, [sp, #28]
 800c062:	9104      	str	r1, [sp, #16]
 800c064:	4808      	ldr	r0, [pc, #32]	; (800c088 <siprintf+0x38>)
 800c066:	4909      	ldr	r1, [pc, #36]	; (800c08c <siprintf+0x3c>)
 800c068:	f853 2b04 	ldr.w	r2, [r3], #4
 800c06c:	9105      	str	r1, [sp, #20]
 800c06e:	6800      	ldr	r0, [r0, #0]
 800c070:	a902      	add	r1, sp, #8
 800c072:	9301      	str	r3, [sp, #4]
 800c074:	f001 fc84 	bl	800d980 <_svfiprintf_r>
 800c078:	2200      	movs	r2, #0
 800c07a:	9b02      	ldr	r3, [sp, #8]
 800c07c:	701a      	strb	r2, [r3, #0]
 800c07e:	b01c      	add	sp, #112	; 0x70
 800c080:	f85d eb04 	ldr.w	lr, [sp], #4
 800c084:	b003      	add	sp, #12
 800c086:	4770      	bx	lr
 800c088:	2000001c 	.word	0x2000001c
 800c08c:	ffff0208 	.word	0xffff0208

0800c090 <strncpy>:
 800c090:	4603      	mov	r3, r0
 800c092:	b510      	push	{r4, lr}
 800c094:	3901      	subs	r1, #1
 800c096:	b132      	cbz	r2, 800c0a6 <strncpy+0x16>
 800c098:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c09c:	3a01      	subs	r2, #1
 800c09e:	f803 4b01 	strb.w	r4, [r3], #1
 800c0a2:	2c00      	cmp	r4, #0
 800c0a4:	d1f7      	bne.n	800c096 <strncpy+0x6>
 800c0a6:	2100      	movs	r1, #0
 800c0a8:	441a      	add	r2, r3
 800c0aa:	4293      	cmp	r3, r2
 800c0ac:	d100      	bne.n	800c0b0 <strncpy+0x20>
 800c0ae:	bd10      	pop	{r4, pc}
 800c0b0:	f803 1b01 	strb.w	r1, [r3], #1
 800c0b4:	e7f9      	b.n	800c0aa <strncpy+0x1a>

0800c0b6 <strnlen>:
 800c0b6:	4602      	mov	r2, r0
 800c0b8:	b510      	push	{r4, lr}
 800c0ba:	4401      	add	r1, r0
 800c0bc:	428a      	cmp	r2, r1
 800c0be:	4613      	mov	r3, r2
 800c0c0:	d101      	bne.n	800c0c6 <strnlen+0x10>
 800c0c2:	1a18      	subs	r0, r3, r0
 800c0c4:	bd10      	pop	{r4, pc}
 800c0c6:	781c      	ldrb	r4, [r3, #0]
 800c0c8:	3201      	adds	r2, #1
 800c0ca:	2c00      	cmp	r4, #0
 800c0cc:	d1f6      	bne.n	800c0bc <strnlen+0x6>
 800c0ce:	e7f8      	b.n	800c0c2 <strnlen+0xc>

0800c0d0 <_strtol_l.isra.0>:
 800c0d0:	2b01      	cmp	r3, #1
 800c0d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0d6:	4686      	mov	lr, r0
 800c0d8:	d001      	beq.n	800c0de <_strtol_l.isra.0+0xe>
 800c0da:	2b24      	cmp	r3, #36	; 0x24
 800c0dc:	d906      	bls.n	800c0ec <_strtol_l.isra.0+0x1c>
 800c0de:	f7ff fa47 	bl	800b570 <__errno>
 800c0e2:	2316      	movs	r3, #22
 800c0e4:	6003      	str	r3, [r0, #0]
 800c0e6:	2000      	movs	r0, #0
 800c0e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0ec:	468c      	mov	ip, r1
 800c0ee:	4e3a      	ldr	r6, [pc, #232]	; (800c1d8 <_strtol_l.isra.0+0x108>)
 800c0f0:	4660      	mov	r0, ip
 800c0f2:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800c0f6:	5da5      	ldrb	r5, [r4, r6]
 800c0f8:	f015 0508 	ands.w	r5, r5, #8
 800c0fc:	d1f8      	bne.n	800c0f0 <_strtol_l.isra.0+0x20>
 800c0fe:	2c2d      	cmp	r4, #45	; 0x2d
 800c100:	d133      	bne.n	800c16a <_strtol_l.isra.0+0x9a>
 800c102:	f04f 0801 	mov.w	r8, #1
 800c106:	f89c 4000 	ldrb.w	r4, [ip]
 800c10a:	f100 0c02 	add.w	ip, r0, #2
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d05d      	beq.n	800c1ce <_strtol_l.isra.0+0xfe>
 800c112:	2b10      	cmp	r3, #16
 800c114:	d10c      	bne.n	800c130 <_strtol_l.isra.0+0x60>
 800c116:	2c30      	cmp	r4, #48	; 0x30
 800c118:	d10a      	bne.n	800c130 <_strtol_l.isra.0+0x60>
 800c11a:	f89c 0000 	ldrb.w	r0, [ip]
 800c11e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800c122:	2858      	cmp	r0, #88	; 0x58
 800c124:	d14e      	bne.n	800c1c4 <_strtol_l.isra.0+0xf4>
 800c126:	2310      	movs	r3, #16
 800c128:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800c12c:	f10c 0c02 	add.w	ip, ip, #2
 800c130:	2500      	movs	r5, #0
 800c132:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 800c136:	3f01      	subs	r7, #1
 800c138:	fbb7 f9f3 	udiv	r9, r7, r3
 800c13c:	4628      	mov	r0, r5
 800c13e:	fb03 7a19 	mls	sl, r3, r9, r7
 800c142:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800c146:	2e09      	cmp	r6, #9
 800c148:	d818      	bhi.n	800c17c <_strtol_l.isra.0+0xac>
 800c14a:	4634      	mov	r4, r6
 800c14c:	42a3      	cmp	r3, r4
 800c14e:	dd24      	ble.n	800c19a <_strtol_l.isra.0+0xca>
 800c150:	2d00      	cmp	r5, #0
 800c152:	db1f      	blt.n	800c194 <_strtol_l.isra.0+0xc4>
 800c154:	4581      	cmp	r9, r0
 800c156:	d31d      	bcc.n	800c194 <_strtol_l.isra.0+0xc4>
 800c158:	d101      	bne.n	800c15e <_strtol_l.isra.0+0x8e>
 800c15a:	45a2      	cmp	sl, r4
 800c15c:	db1a      	blt.n	800c194 <_strtol_l.isra.0+0xc4>
 800c15e:	2501      	movs	r5, #1
 800c160:	fb00 4003 	mla	r0, r0, r3, r4
 800c164:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800c168:	e7eb      	b.n	800c142 <_strtol_l.isra.0+0x72>
 800c16a:	2c2b      	cmp	r4, #43	; 0x2b
 800c16c:	bf08      	it	eq
 800c16e:	f89c 4000 	ldrbeq.w	r4, [ip]
 800c172:	46a8      	mov	r8, r5
 800c174:	bf08      	it	eq
 800c176:	f100 0c02 	addeq.w	ip, r0, #2
 800c17a:	e7c8      	b.n	800c10e <_strtol_l.isra.0+0x3e>
 800c17c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800c180:	2e19      	cmp	r6, #25
 800c182:	d801      	bhi.n	800c188 <_strtol_l.isra.0+0xb8>
 800c184:	3c37      	subs	r4, #55	; 0x37
 800c186:	e7e1      	b.n	800c14c <_strtol_l.isra.0+0x7c>
 800c188:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800c18c:	2e19      	cmp	r6, #25
 800c18e:	d804      	bhi.n	800c19a <_strtol_l.isra.0+0xca>
 800c190:	3c57      	subs	r4, #87	; 0x57
 800c192:	e7db      	b.n	800c14c <_strtol_l.isra.0+0x7c>
 800c194:	f04f 35ff 	mov.w	r5, #4294967295
 800c198:	e7e4      	b.n	800c164 <_strtol_l.isra.0+0x94>
 800c19a:	2d00      	cmp	r5, #0
 800c19c:	da08      	bge.n	800c1b0 <_strtol_l.isra.0+0xe0>
 800c19e:	2322      	movs	r3, #34	; 0x22
 800c1a0:	4638      	mov	r0, r7
 800c1a2:	f8ce 3000 	str.w	r3, [lr]
 800c1a6:	2a00      	cmp	r2, #0
 800c1a8:	d09e      	beq.n	800c0e8 <_strtol_l.isra.0+0x18>
 800c1aa:	f10c 31ff 	add.w	r1, ip, #4294967295
 800c1ae:	e007      	b.n	800c1c0 <_strtol_l.isra.0+0xf0>
 800c1b0:	f1b8 0f00 	cmp.w	r8, #0
 800c1b4:	d000      	beq.n	800c1b8 <_strtol_l.isra.0+0xe8>
 800c1b6:	4240      	negs	r0, r0
 800c1b8:	2a00      	cmp	r2, #0
 800c1ba:	d095      	beq.n	800c0e8 <_strtol_l.isra.0+0x18>
 800c1bc:	2d00      	cmp	r5, #0
 800c1be:	d1f4      	bne.n	800c1aa <_strtol_l.isra.0+0xda>
 800c1c0:	6011      	str	r1, [r2, #0]
 800c1c2:	e791      	b.n	800c0e8 <_strtol_l.isra.0+0x18>
 800c1c4:	2430      	movs	r4, #48	; 0x30
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d1b2      	bne.n	800c130 <_strtol_l.isra.0+0x60>
 800c1ca:	2308      	movs	r3, #8
 800c1cc:	e7b0      	b.n	800c130 <_strtol_l.isra.0+0x60>
 800c1ce:	2c30      	cmp	r4, #48	; 0x30
 800c1d0:	d0a3      	beq.n	800c11a <_strtol_l.isra.0+0x4a>
 800c1d2:	230a      	movs	r3, #10
 800c1d4:	e7ac      	b.n	800c130 <_strtol_l.isra.0+0x60>
 800c1d6:	bf00      	nop
 800c1d8:	0800f619 	.word	0x0800f619

0800c1dc <strtol>:
 800c1dc:	4613      	mov	r3, r2
 800c1de:	460a      	mov	r2, r1
 800c1e0:	4601      	mov	r1, r0
 800c1e2:	4802      	ldr	r0, [pc, #8]	; (800c1ec <strtol+0x10>)
 800c1e4:	6800      	ldr	r0, [r0, #0]
 800c1e6:	f7ff bf73 	b.w	800c0d0 <_strtol_l.isra.0>
 800c1ea:	bf00      	nop
 800c1ec:	2000001c 	.word	0x2000001c

0800c1f0 <_vsniprintf_r>:
 800c1f0:	b530      	push	{r4, r5, lr}
 800c1f2:	1e14      	subs	r4, r2, #0
 800c1f4:	4605      	mov	r5, r0
 800c1f6:	b09b      	sub	sp, #108	; 0x6c
 800c1f8:	4618      	mov	r0, r3
 800c1fa:	da05      	bge.n	800c208 <_vsniprintf_r+0x18>
 800c1fc:	238b      	movs	r3, #139	; 0x8b
 800c1fe:	f04f 30ff 	mov.w	r0, #4294967295
 800c202:	602b      	str	r3, [r5, #0]
 800c204:	b01b      	add	sp, #108	; 0x6c
 800c206:	bd30      	pop	{r4, r5, pc}
 800c208:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c20c:	f8ad 300c 	strh.w	r3, [sp, #12]
 800c210:	bf0c      	ite	eq
 800c212:	4623      	moveq	r3, r4
 800c214:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c218:	9302      	str	r3, [sp, #8]
 800c21a:	9305      	str	r3, [sp, #20]
 800c21c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c220:	4602      	mov	r2, r0
 800c222:	9100      	str	r1, [sp, #0]
 800c224:	9104      	str	r1, [sp, #16]
 800c226:	f8ad 300e 	strh.w	r3, [sp, #14]
 800c22a:	4669      	mov	r1, sp
 800c22c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c22e:	4628      	mov	r0, r5
 800c230:	f001 fba6 	bl	800d980 <_svfiprintf_r>
 800c234:	1c43      	adds	r3, r0, #1
 800c236:	bfbc      	itt	lt
 800c238:	238b      	movlt	r3, #139	; 0x8b
 800c23a:	602b      	strlt	r3, [r5, #0]
 800c23c:	2c00      	cmp	r4, #0
 800c23e:	d0e1      	beq.n	800c204 <_vsniprintf_r+0x14>
 800c240:	2200      	movs	r2, #0
 800c242:	9b00      	ldr	r3, [sp, #0]
 800c244:	701a      	strb	r2, [r3, #0]
 800c246:	e7dd      	b.n	800c204 <_vsniprintf_r+0x14>

0800c248 <vsniprintf>:
 800c248:	b507      	push	{r0, r1, r2, lr}
 800c24a:	9300      	str	r3, [sp, #0]
 800c24c:	4613      	mov	r3, r2
 800c24e:	460a      	mov	r2, r1
 800c250:	4601      	mov	r1, r0
 800c252:	4803      	ldr	r0, [pc, #12]	; (800c260 <vsniprintf+0x18>)
 800c254:	6800      	ldr	r0, [r0, #0]
 800c256:	f7ff ffcb 	bl	800c1f0 <_vsniprintf_r>
 800c25a:	b003      	add	sp, #12
 800c25c:	f85d fb04 	ldr.w	pc, [sp], #4
 800c260:	2000001c 	.word	0x2000001c

0800c264 <quorem>:
 800c264:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c268:	6903      	ldr	r3, [r0, #16]
 800c26a:	690c      	ldr	r4, [r1, #16]
 800c26c:	4607      	mov	r7, r0
 800c26e:	42a3      	cmp	r3, r4
 800c270:	f2c0 8083 	blt.w	800c37a <quorem+0x116>
 800c274:	3c01      	subs	r4, #1
 800c276:	f100 0514 	add.w	r5, r0, #20
 800c27a:	f101 0814 	add.w	r8, r1, #20
 800c27e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c282:	9301      	str	r3, [sp, #4]
 800c284:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c288:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c28c:	3301      	adds	r3, #1
 800c28e:	429a      	cmp	r2, r3
 800c290:	fbb2 f6f3 	udiv	r6, r2, r3
 800c294:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c298:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c29c:	d332      	bcc.n	800c304 <quorem+0xa0>
 800c29e:	f04f 0e00 	mov.w	lr, #0
 800c2a2:	4640      	mov	r0, r8
 800c2a4:	46ac      	mov	ip, r5
 800c2a6:	46f2      	mov	sl, lr
 800c2a8:	f850 2b04 	ldr.w	r2, [r0], #4
 800c2ac:	b293      	uxth	r3, r2
 800c2ae:	fb06 e303 	mla	r3, r6, r3, lr
 800c2b2:	0c12      	lsrs	r2, r2, #16
 800c2b4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c2b8:	fb06 e202 	mla	r2, r6, r2, lr
 800c2bc:	b29b      	uxth	r3, r3
 800c2be:	ebaa 0303 	sub.w	r3, sl, r3
 800c2c2:	f8dc a000 	ldr.w	sl, [ip]
 800c2c6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c2ca:	fa1f fa8a 	uxth.w	sl, sl
 800c2ce:	4453      	add	r3, sl
 800c2d0:	fa1f fa82 	uxth.w	sl, r2
 800c2d4:	f8dc 2000 	ldr.w	r2, [ip]
 800c2d8:	4581      	cmp	r9, r0
 800c2da:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800c2de:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c2e2:	b29b      	uxth	r3, r3
 800c2e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c2e8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c2ec:	f84c 3b04 	str.w	r3, [ip], #4
 800c2f0:	d2da      	bcs.n	800c2a8 <quorem+0x44>
 800c2f2:	f855 300b 	ldr.w	r3, [r5, fp]
 800c2f6:	b92b      	cbnz	r3, 800c304 <quorem+0xa0>
 800c2f8:	9b01      	ldr	r3, [sp, #4]
 800c2fa:	3b04      	subs	r3, #4
 800c2fc:	429d      	cmp	r5, r3
 800c2fe:	461a      	mov	r2, r3
 800c300:	d32f      	bcc.n	800c362 <quorem+0xfe>
 800c302:	613c      	str	r4, [r7, #16]
 800c304:	4638      	mov	r0, r7
 800c306:	f001 f9c9 	bl	800d69c <__mcmp>
 800c30a:	2800      	cmp	r0, #0
 800c30c:	db25      	blt.n	800c35a <quorem+0xf6>
 800c30e:	4628      	mov	r0, r5
 800c310:	f04f 0c00 	mov.w	ip, #0
 800c314:	3601      	adds	r6, #1
 800c316:	f858 1b04 	ldr.w	r1, [r8], #4
 800c31a:	f8d0 e000 	ldr.w	lr, [r0]
 800c31e:	b28b      	uxth	r3, r1
 800c320:	ebac 0303 	sub.w	r3, ip, r3
 800c324:	fa1f f28e 	uxth.w	r2, lr
 800c328:	4413      	add	r3, r2
 800c32a:	0c0a      	lsrs	r2, r1, #16
 800c32c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c330:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c334:	b29b      	uxth	r3, r3
 800c336:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c33a:	45c1      	cmp	r9, r8
 800c33c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c340:	f840 3b04 	str.w	r3, [r0], #4
 800c344:	d2e7      	bcs.n	800c316 <quorem+0xb2>
 800c346:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c34a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c34e:	b922      	cbnz	r2, 800c35a <quorem+0xf6>
 800c350:	3b04      	subs	r3, #4
 800c352:	429d      	cmp	r5, r3
 800c354:	461a      	mov	r2, r3
 800c356:	d30a      	bcc.n	800c36e <quorem+0x10a>
 800c358:	613c      	str	r4, [r7, #16]
 800c35a:	4630      	mov	r0, r6
 800c35c:	b003      	add	sp, #12
 800c35e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c362:	6812      	ldr	r2, [r2, #0]
 800c364:	3b04      	subs	r3, #4
 800c366:	2a00      	cmp	r2, #0
 800c368:	d1cb      	bne.n	800c302 <quorem+0x9e>
 800c36a:	3c01      	subs	r4, #1
 800c36c:	e7c6      	b.n	800c2fc <quorem+0x98>
 800c36e:	6812      	ldr	r2, [r2, #0]
 800c370:	3b04      	subs	r3, #4
 800c372:	2a00      	cmp	r2, #0
 800c374:	d1f0      	bne.n	800c358 <quorem+0xf4>
 800c376:	3c01      	subs	r4, #1
 800c378:	e7eb      	b.n	800c352 <quorem+0xee>
 800c37a:	2000      	movs	r0, #0
 800c37c:	e7ee      	b.n	800c35c <quorem+0xf8>
	...

0800c380 <_dtoa_r>:
 800c380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c384:	4616      	mov	r6, r2
 800c386:	461f      	mov	r7, r3
 800c388:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800c38a:	b099      	sub	sp, #100	; 0x64
 800c38c:	4605      	mov	r5, r0
 800c38e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800c392:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800c396:	b974      	cbnz	r4, 800c3b6 <_dtoa_r+0x36>
 800c398:	2010      	movs	r0, #16
 800c39a:	f7ff f913 	bl	800b5c4 <malloc>
 800c39e:	4602      	mov	r2, r0
 800c3a0:	6268      	str	r0, [r5, #36]	; 0x24
 800c3a2:	b920      	cbnz	r0, 800c3ae <_dtoa_r+0x2e>
 800c3a4:	21ea      	movs	r1, #234	; 0xea
 800c3a6:	4bae      	ldr	r3, [pc, #696]	; (800c660 <_dtoa_r+0x2e0>)
 800c3a8:	48ae      	ldr	r0, [pc, #696]	; (800c664 <_dtoa_r+0x2e4>)
 800c3aa:	f001 fe57 	bl	800e05c <__assert_func>
 800c3ae:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c3b2:	6004      	str	r4, [r0, #0]
 800c3b4:	60c4      	str	r4, [r0, #12]
 800c3b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c3b8:	6819      	ldr	r1, [r3, #0]
 800c3ba:	b151      	cbz	r1, 800c3d2 <_dtoa_r+0x52>
 800c3bc:	685a      	ldr	r2, [r3, #4]
 800c3be:	2301      	movs	r3, #1
 800c3c0:	4093      	lsls	r3, r2
 800c3c2:	604a      	str	r2, [r1, #4]
 800c3c4:	608b      	str	r3, [r1, #8]
 800c3c6:	4628      	mov	r0, r5
 800c3c8:	f000 ff2e 	bl	800d228 <_Bfree>
 800c3cc:	2200      	movs	r2, #0
 800c3ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c3d0:	601a      	str	r2, [r3, #0]
 800c3d2:	1e3b      	subs	r3, r7, #0
 800c3d4:	bfaf      	iteee	ge
 800c3d6:	2300      	movge	r3, #0
 800c3d8:	2201      	movlt	r2, #1
 800c3da:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c3de:	9305      	strlt	r3, [sp, #20]
 800c3e0:	bfa8      	it	ge
 800c3e2:	f8c8 3000 	strge.w	r3, [r8]
 800c3e6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800c3ea:	4b9f      	ldr	r3, [pc, #636]	; (800c668 <_dtoa_r+0x2e8>)
 800c3ec:	bfb8      	it	lt
 800c3ee:	f8c8 2000 	strlt.w	r2, [r8]
 800c3f2:	ea33 0309 	bics.w	r3, r3, r9
 800c3f6:	d119      	bne.n	800c42c <_dtoa_r+0xac>
 800c3f8:	f242 730f 	movw	r3, #9999	; 0x270f
 800c3fc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800c3fe:	6013      	str	r3, [r2, #0]
 800c400:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c404:	4333      	orrs	r3, r6
 800c406:	f000 8580 	beq.w	800cf0a <_dtoa_r+0xb8a>
 800c40a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c40c:	b953      	cbnz	r3, 800c424 <_dtoa_r+0xa4>
 800c40e:	4b97      	ldr	r3, [pc, #604]	; (800c66c <_dtoa_r+0x2ec>)
 800c410:	e022      	b.n	800c458 <_dtoa_r+0xd8>
 800c412:	4b97      	ldr	r3, [pc, #604]	; (800c670 <_dtoa_r+0x2f0>)
 800c414:	9308      	str	r3, [sp, #32]
 800c416:	3308      	adds	r3, #8
 800c418:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800c41a:	6013      	str	r3, [r2, #0]
 800c41c:	9808      	ldr	r0, [sp, #32]
 800c41e:	b019      	add	sp, #100	; 0x64
 800c420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c424:	4b91      	ldr	r3, [pc, #580]	; (800c66c <_dtoa_r+0x2ec>)
 800c426:	9308      	str	r3, [sp, #32]
 800c428:	3303      	adds	r3, #3
 800c42a:	e7f5      	b.n	800c418 <_dtoa_r+0x98>
 800c42c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800c430:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800c434:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c438:	2200      	movs	r2, #0
 800c43a:	2300      	movs	r3, #0
 800c43c:	f7f4 fb20 	bl	8000a80 <__aeabi_dcmpeq>
 800c440:	4680      	mov	r8, r0
 800c442:	b158      	cbz	r0, 800c45c <_dtoa_r+0xdc>
 800c444:	2301      	movs	r3, #1
 800c446:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800c448:	6013      	str	r3, [r2, #0]
 800c44a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	f000 8559 	beq.w	800cf04 <_dtoa_r+0xb84>
 800c452:	4888      	ldr	r0, [pc, #544]	; (800c674 <_dtoa_r+0x2f4>)
 800c454:	6018      	str	r0, [r3, #0]
 800c456:	1e43      	subs	r3, r0, #1
 800c458:	9308      	str	r3, [sp, #32]
 800c45a:	e7df      	b.n	800c41c <_dtoa_r+0x9c>
 800c45c:	ab16      	add	r3, sp, #88	; 0x58
 800c45e:	9301      	str	r3, [sp, #4]
 800c460:	ab17      	add	r3, sp, #92	; 0x5c
 800c462:	9300      	str	r3, [sp, #0]
 800c464:	4628      	mov	r0, r5
 800c466:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c46a:	f001 f9c3 	bl	800d7f4 <__d2b>
 800c46e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800c472:	4682      	mov	sl, r0
 800c474:	2c00      	cmp	r4, #0
 800c476:	d07e      	beq.n	800c576 <_dtoa_r+0x1f6>
 800c478:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c47c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c47e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800c482:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c486:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800c48a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800c48e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800c492:	2200      	movs	r2, #0
 800c494:	4b78      	ldr	r3, [pc, #480]	; (800c678 <_dtoa_r+0x2f8>)
 800c496:	f7f3 fed3 	bl	8000240 <__aeabi_dsub>
 800c49a:	a36b      	add	r3, pc, #428	; (adr r3, 800c648 <_dtoa_r+0x2c8>)
 800c49c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4a0:	f7f4 f886 	bl	80005b0 <__aeabi_dmul>
 800c4a4:	a36a      	add	r3, pc, #424	; (adr r3, 800c650 <_dtoa_r+0x2d0>)
 800c4a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4aa:	f7f3 fecb 	bl	8000244 <__adddf3>
 800c4ae:	4606      	mov	r6, r0
 800c4b0:	4620      	mov	r0, r4
 800c4b2:	460f      	mov	r7, r1
 800c4b4:	f7f4 f812 	bl	80004dc <__aeabi_i2d>
 800c4b8:	a367      	add	r3, pc, #412	; (adr r3, 800c658 <_dtoa_r+0x2d8>)
 800c4ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4be:	f7f4 f877 	bl	80005b0 <__aeabi_dmul>
 800c4c2:	4602      	mov	r2, r0
 800c4c4:	460b      	mov	r3, r1
 800c4c6:	4630      	mov	r0, r6
 800c4c8:	4639      	mov	r1, r7
 800c4ca:	f7f3 febb 	bl	8000244 <__adddf3>
 800c4ce:	4606      	mov	r6, r0
 800c4d0:	460f      	mov	r7, r1
 800c4d2:	f7f4 fb1d 	bl	8000b10 <__aeabi_d2iz>
 800c4d6:	2200      	movs	r2, #0
 800c4d8:	4681      	mov	r9, r0
 800c4da:	2300      	movs	r3, #0
 800c4dc:	4630      	mov	r0, r6
 800c4de:	4639      	mov	r1, r7
 800c4e0:	f7f4 fad8 	bl	8000a94 <__aeabi_dcmplt>
 800c4e4:	b148      	cbz	r0, 800c4fa <_dtoa_r+0x17a>
 800c4e6:	4648      	mov	r0, r9
 800c4e8:	f7f3 fff8 	bl	80004dc <__aeabi_i2d>
 800c4ec:	4632      	mov	r2, r6
 800c4ee:	463b      	mov	r3, r7
 800c4f0:	f7f4 fac6 	bl	8000a80 <__aeabi_dcmpeq>
 800c4f4:	b908      	cbnz	r0, 800c4fa <_dtoa_r+0x17a>
 800c4f6:	f109 39ff 	add.w	r9, r9, #4294967295
 800c4fa:	f1b9 0f16 	cmp.w	r9, #22
 800c4fe:	d857      	bhi.n	800c5b0 <_dtoa_r+0x230>
 800c500:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c504:	4b5d      	ldr	r3, [pc, #372]	; (800c67c <_dtoa_r+0x2fc>)
 800c506:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800c50a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c50e:	f7f4 fac1 	bl	8000a94 <__aeabi_dcmplt>
 800c512:	2800      	cmp	r0, #0
 800c514:	d04e      	beq.n	800c5b4 <_dtoa_r+0x234>
 800c516:	2300      	movs	r3, #0
 800c518:	f109 39ff 	add.w	r9, r9, #4294967295
 800c51c:	930f      	str	r3, [sp, #60]	; 0x3c
 800c51e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c520:	1b1c      	subs	r4, r3, r4
 800c522:	1e63      	subs	r3, r4, #1
 800c524:	9309      	str	r3, [sp, #36]	; 0x24
 800c526:	bf49      	itett	mi
 800c528:	f1c4 0301 	rsbmi	r3, r4, #1
 800c52c:	2300      	movpl	r3, #0
 800c52e:	9306      	strmi	r3, [sp, #24]
 800c530:	2300      	movmi	r3, #0
 800c532:	bf54      	ite	pl
 800c534:	9306      	strpl	r3, [sp, #24]
 800c536:	9309      	strmi	r3, [sp, #36]	; 0x24
 800c538:	f1b9 0f00 	cmp.w	r9, #0
 800c53c:	db3c      	blt.n	800c5b8 <_dtoa_r+0x238>
 800c53e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c540:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800c544:	444b      	add	r3, r9
 800c546:	9309      	str	r3, [sp, #36]	; 0x24
 800c548:	2300      	movs	r3, #0
 800c54a:	930a      	str	r3, [sp, #40]	; 0x28
 800c54c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c54e:	2b09      	cmp	r3, #9
 800c550:	d86c      	bhi.n	800c62c <_dtoa_r+0x2ac>
 800c552:	2b05      	cmp	r3, #5
 800c554:	bfc4      	itt	gt
 800c556:	3b04      	subgt	r3, #4
 800c558:	9322      	strgt	r3, [sp, #136]	; 0x88
 800c55a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c55c:	bfc8      	it	gt
 800c55e:	2400      	movgt	r4, #0
 800c560:	f1a3 0302 	sub.w	r3, r3, #2
 800c564:	bfd8      	it	le
 800c566:	2401      	movle	r4, #1
 800c568:	2b03      	cmp	r3, #3
 800c56a:	f200 808b 	bhi.w	800c684 <_dtoa_r+0x304>
 800c56e:	e8df f003 	tbb	[pc, r3]
 800c572:	4f2d      	.short	0x4f2d
 800c574:	5b4d      	.short	0x5b4d
 800c576:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800c57a:	441c      	add	r4, r3
 800c57c:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800c580:	2b20      	cmp	r3, #32
 800c582:	bfc3      	ittte	gt
 800c584:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c588:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800c58c:	fa09 f303 	lslgt.w	r3, r9, r3
 800c590:	f1c3 0320 	rsble	r3, r3, #32
 800c594:	bfc6      	itte	gt
 800c596:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c59a:	4318      	orrgt	r0, r3
 800c59c:	fa06 f003 	lslle.w	r0, r6, r3
 800c5a0:	f7f3 ff8c 	bl	80004bc <__aeabi_ui2d>
 800c5a4:	2301      	movs	r3, #1
 800c5a6:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800c5aa:	3c01      	subs	r4, #1
 800c5ac:	9313      	str	r3, [sp, #76]	; 0x4c
 800c5ae:	e770      	b.n	800c492 <_dtoa_r+0x112>
 800c5b0:	2301      	movs	r3, #1
 800c5b2:	e7b3      	b.n	800c51c <_dtoa_r+0x19c>
 800c5b4:	900f      	str	r0, [sp, #60]	; 0x3c
 800c5b6:	e7b2      	b.n	800c51e <_dtoa_r+0x19e>
 800c5b8:	9b06      	ldr	r3, [sp, #24]
 800c5ba:	eba3 0309 	sub.w	r3, r3, r9
 800c5be:	9306      	str	r3, [sp, #24]
 800c5c0:	f1c9 0300 	rsb	r3, r9, #0
 800c5c4:	930a      	str	r3, [sp, #40]	; 0x28
 800c5c6:	2300      	movs	r3, #0
 800c5c8:	930e      	str	r3, [sp, #56]	; 0x38
 800c5ca:	e7bf      	b.n	800c54c <_dtoa_r+0x1cc>
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	930b      	str	r3, [sp, #44]	; 0x2c
 800c5d0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	dc59      	bgt.n	800c68a <_dtoa_r+0x30a>
 800c5d6:	f04f 0b01 	mov.w	fp, #1
 800c5da:	465b      	mov	r3, fp
 800c5dc:	f8cd b008 	str.w	fp, [sp, #8]
 800c5e0:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800c5e4:	2200      	movs	r2, #0
 800c5e6:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800c5e8:	6042      	str	r2, [r0, #4]
 800c5ea:	2204      	movs	r2, #4
 800c5ec:	f102 0614 	add.w	r6, r2, #20
 800c5f0:	429e      	cmp	r6, r3
 800c5f2:	6841      	ldr	r1, [r0, #4]
 800c5f4:	d94f      	bls.n	800c696 <_dtoa_r+0x316>
 800c5f6:	4628      	mov	r0, r5
 800c5f8:	f000 fdd6 	bl	800d1a8 <_Balloc>
 800c5fc:	9008      	str	r0, [sp, #32]
 800c5fe:	2800      	cmp	r0, #0
 800c600:	d14d      	bne.n	800c69e <_dtoa_r+0x31e>
 800c602:	4602      	mov	r2, r0
 800c604:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c608:	4b1d      	ldr	r3, [pc, #116]	; (800c680 <_dtoa_r+0x300>)
 800c60a:	e6cd      	b.n	800c3a8 <_dtoa_r+0x28>
 800c60c:	2301      	movs	r3, #1
 800c60e:	e7de      	b.n	800c5ce <_dtoa_r+0x24e>
 800c610:	2300      	movs	r3, #0
 800c612:	930b      	str	r3, [sp, #44]	; 0x2c
 800c614:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c616:	eb09 0b03 	add.w	fp, r9, r3
 800c61a:	f10b 0301 	add.w	r3, fp, #1
 800c61e:	2b01      	cmp	r3, #1
 800c620:	9302      	str	r3, [sp, #8]
 800c622:	bfb8      	it	lt
 800c624:	2301      	movlt	r3, #1
 800c626:	e7dd      	b.n	800c5e4 <_dtoa_r+0x264>
 800c628:	2301      	movs	r3, #1
 800c62a:	e7f2      	b.n	800c612 <_dtoa_r+0x292>
 800c62c:	2401      	movs	r4, #1
 800c62e:	2300      	movs	r3, #0
 800c630:	940b      	str	r4, [sp, #44]	; 0x2c
 800c632:	9322      	str	r3, [sp, #136]	; 0x88
 800c634:	f04f 3bff 	mov.w	fp, #4294967295
 800c638:	2200      	movs	r2, #0
 800c63a:	2312      	movs	r3, #18
 800c63c:	f8cd b008 	str.w	fp, [sp, #8]
 800c640:	9223      	str	r2, [sp, #140]	; 0x8c
 800c642:	e7cf      	b.n	800c5e4 <_dtoa_r+0x264>
 800c644:	f3af 8000 	nop.w
 800c648:	636f4361 	.word	0x636f4361
 800c64c:	3fd287a7 	.word	0x3fd287a7
 800c650:	8b60c8b3 	.word	0x8b60c8b3
 800c654:	3fc68a28 	.word	0x3fc68a28
 800c658:	509f79fb 	.word	0x509f79fb
 800c65c:	3fd34413 	.word	0x3fd34413
 800c660:	0800f726 	.word	0x0800f726
 800c664:	0800f73d 	.word	0x0800f73d
 800c668:	7ff00000 	.word	0x7ff00000
 800c66c:	0800f722 	.word	0x0800f722
 800c670:	0800f719 	.word	0x0800f719
 800c674:	0800f5f5 	.word	0x0800f5f5
 800c678:	3ff80000 	.word	0x3ff80000
 800c67c:	0800f898 	.word	0x0800f898
 800c680:	0800f79c 	.word	0x0800f79c
 800c684:	2301      	movs	r3, #1
 800c686:	930b      	str	r3, [sp, #44]	; 0x2c
 800c688:	e7d4      	b.n	800c634 <_dtoa_r+0x2b4>
 800c68a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800c68e:	465b      	mov	r3, fp
 800c690:	f8cd b008 	str.w	fp, [sp, #8]
 800c694:	e7a6      	b.n	800c5e4 <_dtoa_r+0x264>
 800c696:	3101      	adds	r1, #1
 800c698:	6041      	str	r1, [r0, #4]
 800c69a:	0052      	lsls	r2, r2, #1
 800c69c:	e7a6      	b.n	800c5ec <_dtoa_r+0x26c>
 800c69e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c6a0:	9a08      	ldr	r2, [sp, #32]
 800c6a2:	601a      	str	r2, [r3, #0]
 800c6a4:	9b02      	ldr	r3, [sp, #8]
 800c6a6:	2b0e      	cmp	r3, #14
 800c6a8:	f200 80a8 	bhi.w	800c7fc <_dtoa_r+0x47c>
 800c6ac:	2c00      	cmp	r4, #0
 800c6ae:	f000 80a5 	beq.w	800c7fc <_dtoa_r+0x47c>
 800c6b2:	f1b9 0f00 	cmp.w	r9, #0
 800c6b6:	dd34      	ble.n	800c722 <_dtoa_r+0x3a2>
 800c6b8:	4a9a      	ldr	r2, [pc, #616]	; (800c924 <_dtoa_r+0x5a4>)
 800c6ba:	f009 030f 	and.w	r3, r9, #15
 800c6be:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c6c2:	f419 7f80 	tst.w	r9, #256	; 0x100
 800c6c6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c6ca:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800c6ce:	ea4f 1429 	mov.w	r4, r9, asr #4
 800c6d2:	d016      	beq.n	800c702 <_dtoa_r+0x382>
 800c6d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c6d8:	4b93      	ldr	r3, [pc, #588]	; (800c928 <_dtoa_r+0x5a8>)
 800c6da:	2703      	movs	r7, #3
 800c6dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c6e0:	f7f4 f890 	bl	8000804 <__aeabi_ddiv>
 800c6e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c6e8:	f004 040f 	and.w	r4, r4, #15
 800c6ec:	4e8e      	ldr	r6, [pc, #568]	; (800c928 <_dtoa_r+0x5a8>)
 800c6ee:	b954      	cbnz	r4, 800c706 <_dtoa_r+0x386>
 800c6f0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c6f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c6f8:	f7f4 f884 	bl	8000804 <__aeabi_ddiv>
 800c6fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c700:	e029      	b.n	800c756 <_dtoa_r+0x3d6>
 800c702:	2702      	movs	r7, #2
 800c704:	e7f2      	b.n	800c6ec <_dtoa_r+0x36c>
 800c706:	07e1      	lsls	r1, r4, #31
 800c708:	d508      	bpl.n	800c71c <_dtoa_r+0x39c>
 800c70a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c70e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c712:	f7f3 ff4d 	bl	80005b0 <__aeabi_dmul>
 800c716:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c71a:	3701      	adds	r7, #1
 800c71c:	1064      	asrs	r4, r4, #1
 800c71e:	3608      	adds	r6, #8
 800c720:	e7e5      	b.n	800c6ee <_dtoa_r+0x36e>
 800c722:	f000 80a5 	beq.w	800c870 <_dtoa_r+0x4f0>
 800c726:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c72a:	f1c9 0400 	rsb	r4, r9, #0
 800c72e:	4b7d      	ldr	r3, [pc, #500]	; (800c924 <_dtoa_r+0x5a4>)
 800c730:	f004 020f 	and.w	r2, r4, #15
 800c734:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c73c:	f7f3 ff38 	bl	80005b0 <__aeabi_dmul>
 800c740:	2702      	movs	r7, #2
 800c742:	2300      	movs	r3, #0
 800c744:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c748:	4e77      	ldr	r6, [pc, #476]	; (800c928 <_dtoa_r+0x5a8>)
 800c74a:	1124      	asrs	r4, r4, #4
 800c74c:	2c00      	cmp	r4, #0
 800c74e:	f040 8084 	bne.w	800c85a <_dtoa_r+0x4da>
 800c752:	2b00      	cmp	r3, #0
 800c754:	d1d2      	bne.n	800c6fc <_dtoa_r+0x37c>
 800c756:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c758:	2b00      	cmp	r3, #0
 800c75a:	f000 808b 	beq.w	800c874 <_dtoa_r+0x4f4>
 800c75e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800c762:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800c766:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c76a:	2200      	movs	r2, #0
 800c76c:	4b6f      	ldr	r3, [pc, #444]	; (800c92c <_dtoa_r+0x5ac>)
 800c76e:	f7f4 f991 	bl	8000a94 <__aeabi_dcmplt>
 800c772:	2800      	cmp	r0, #0
 800c774:	d07e      	beq.n	800c874 <_dtoa_r+0x4f4>
 800c776:	9b02      	ldr	r3, [sp, #8]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d07b      	beq.n	800c874 <_dtoa_r+0x4f4>
 800c77c:	f1bb 0f00 	cmp.w	fp, #0
 800c780:	dd38      	ble.n	800c7f4 <_dtoa_r+0x474>
 800c782:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c786:	2200      	movs	r2, #0
 800c788:	4b69      	ldr	r3, [pc, #420]	; (800c930 <_dtoa_r+0x5b0>)
 800c78a:	f7f3 ff11 	bl	80005b0 <__aeabi_dmul>
 800c78e:	465c      	mov	r4, fp
 800c790:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c794:	f109 38ff 	add.w	r8, r9, #4294967295
 800c798:	3701      	adds	r7, #1
 800c79a:	4638      	mov	r0, r7
 800c79c:	f7f3 fe9e 	bl	80004dc <__aeabi_i2d>
 800c7a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c7a4:	f7f3 ff04 	bl	80005b0 <__aeabi_dmul>
 800c7a8:	2200      	movs	r2, #0
 800c7aa:	4b62      	ldr	r3, [pc, #392]	; (800c934 <_dtoa_r+0x5b4>)
 800c7ac:	f7f3 fd4a 	bl	8000244 <__adddf3>
 800c7b0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800c7b4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c7b8:	9611      	str	r6, [sp, #68]	; 0x44
 800c7ba:	2c00      	cmp	r4, #0
 800c7bc:	d15d      	bne.n	800c87a <_dtoa_r+0x4fa>
 800c7be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c7c2:	2200      	movs	r2, #0
 800c7c4:	4b5c      	ldr	r3, [pc, #368]	; (800c938 <_dtoa_r+0x5b8>)
 800c7c6:	f7f3 fd3b 	bl	8000240 <__aeabi_dsub>
 800c7ca:	4602      	mov	r2, r0
 800c7cc:	460b      	mov	r3, r1
 800c7ce:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c7d2:	4633      	mov	r3, r6
 800c7d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c7d6:	f7f4 f97b 	bl	8000ad0 <__aeabi_dcmpgt>
 800c7da:	2800      	cmp	r0, #0
 800c7dc:	f040 829e 	bne.w	800cd1c <_dtoa_r+0x99c>
 800c7e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c7e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c7e6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800c7ea:	f7f4 f953 	bl	8000a94 <__aeabi_dcmplt>
 800c7ee:	2800      	cmp	r0, #0
 800c7f0:	f040 8292 	bne.w	800cd18 <_dtoa_r+0x998>
 800c7f4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800c7f8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c7fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	f2c0 8153 	blt.w	800caaa <_dtoa_r+0x72a>
 800c804:	f1b9 0f0e 	cmp.w	r9, #14
 800c808:	f300 814f 	bgt.w	800caaa <_dtoa_r+0x72a>
 800c80c:	4b45      	ldr	r3, [pc, #276]	; (800c924 <_dtoa_r+0x5a4>)
 800c80e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800c812:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c816:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800c81a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	f280 80db 	bge.w	800c9d8 <_dtoa_r+0x658>
 800c822:	9b02      	ldr	r3, [sp, #8]
 800c824:	2b00      	cmp	r3, #0
 800c826:	f300 80d7 	bgt.w	800c9d8 <_dtoa_r+0x658>
 800c82a:	f040 8274 	bne.w	800cd16 <_dtoa_r+0x996>
 800c82e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c832:	2200      	movs	r2, #0
 800c834:	4b40      	ldr	r3, [pc, #256]	; (800c938 <_dtoa_r+0x5b8>)
 800c836:	f7f3 febb 	bl	80005b0 <__aeabi_dmul>
 800c83a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c83e:	f7f4 f93d 	bl	8000abc <__aeabi_dcmpge>
 800c842:	9c02      	ldr	r4, [sp, #8]
 800c844:	4626      	mov	r6, r4
 800c846:	2800      	cmp	r0, #0
 800c848:	f040 824a 	bne.w	800cce0 <_dtoa_r+0x960>
 800c84c:	2331      	movs	r3, #49	; 0x31
 800c84e:	9f08      	ldr	r7, [sp, #32]
 800c850:	f109 0901 	add.w	r9, r9, #1
 800c854:	f807 3b01 	strb.w	r3, [r7], #1
 800c858:	e246      	b.n	800cce8 <_dtoa_r+0x968>
 800c85a:	07e2      	lsls	r2, r4, #31
 800c85c:	d505      	bpl.n	800c86a <_dtoa_r+0x4ea>
 800c85e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c862:	f7f3 fea5 	bl	80005b0 <__aeabi_dmul>
 800c866:	2301      	movs	r3, #1
 800c868:	3701      	adds	r7, #1
 800c86a:	1064      	asrs	r4, r4, #1
 800c86c:	3608      	adds	r6, #8
 800c86e:	e76d      	b.n	800c74c <_dtoa_r+0x3cc>
 800c870:	2702      	movs	r7, #2
 800c872:	e770      	b.n	800c756 <_dtoa_r+0x3d6>
 800c874:	46c8      	mov	r8, r9
 800c876:	9c02      	ldr	r4, [sp, #8]
 800c878:	e78f      	b.n	800c79a <_dtoa_r+0x41a>
 800c87a:	9908      	ldr	r1, [sp, #32]
 800c87c:	4b29      	ldr	r3, [pc, #164]	; (800c924 <_dtoa_r+0x5a4>)
 800c87e:	4421      	add	r1, r4
 800c880:	9112      	str	r1, [sp, #72]	; 0x48
 800c882:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c884:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c888:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800c88c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c890:	2900      	cmp	r1, #0
 800c892:	d055      	beq.n	800c940 <_dtoa_r+0x5c0>
 800c894:	2000      	movs	r0, #0
 800c896:	4929      	ldr	r1, [pc, #164]	; (800c93c <_dtoa_r+0x5bc>)
 800c898:	f7f3 ffb4 	bl	8000804 <__aeabi_ddiv>
 800c89c:	463b      	mov	r3, r7
 800c89e:	4632      	mov	r2, r6
 800c8a0:	f7f3 fcce 	bl	8000240 <__aeabi_dsub>
 800c8a4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c8a8:	9f08      	ldr	r7, [sp, #32]
 800c8aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c8ae:	f7f4 f92f 	bl	8000b10 <__aeabi_d2iz>
 800c8b2:	4604      	mov	r4, r0
 800c8b4:	f7f3 fe12 	bl	80004dc <__aeabi_i2d>
 800c8b8:	4602      	mov	r2, r0
 800c8ba:	460b      	mov	r3, r1
 800c8bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c8c0:	f7f3 fcbe 	bl	8000240 <__aeabi_dsub>
 800c8c4:	4602      	mov	r2, r0
 800c8c6:	460b      	mov	r3, r1
 800c8c8:	3430      	adds	r4, #48	; 0x30
 800c8ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c8ce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c8d2:	f807 4b01 	strb.w	r4, [r7], #1
 800c8d6:	f7f4 f8dd 	bl	8000a94 <__aeabi_dcmplt>
 800c8da:	2800      	cmp	r0, #0
 800c8dc:	d174      	bne.n	800c9c8 <_dtoa_r+0x648>
 800c8de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c8e2:	2000      	movs	r0, #0
 800c8e4:	4911      	ldr	r1, [pc, #68]	; (800c92c <_dtoa_r+0x5ac>)
 800c8e6:	f7f3 fcab 	bl	8000240 <__aeabi_dsub>
 800c8ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c8ee:	f7f4 f8d1 	bl	8000a94 <__aeabi_dcmplt>
 800c8f2:	2800      	cmp	r0, #0
 800c8f4:	f040 80b6 	bne.w	800ca64 <_dtoa_r+0x6e4>
 800c8f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c8fa:	429f      	cmp	r7, r3
 800c8fc:	f43f af7a 	beq.w	800c7f4 <_dtoa_r+0x474>
 800c900:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c904:	2200      	movs	r2, #0
 800c906:	4b0a      	ldr	r3, [pc, #40]	; (800c930 <_dtoa_r+0x5b0>)
 800c908:	f7f3 fe52 	bl	80005b0 <__aeabi_dmul>
 800c90c:	2200      	movs	r2, #0
 800c90e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c912:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c916:	4b06      	ldr	r3, [pc, #24]	; (800c930 <_dtoa_r+0x5b0>)
 800c918:	f7f3 fe4a 	bl	80005b0 <__aeabi_dmul>
 800c91c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c920:	e7c3      	b.n	800c8aa <_dtoa_r+0x52a>
 800c922:	bf00      	nop
 800c924:	0800f898 	.word	0x0800f898
 800c928:	0800f870 	.word	0x0800f870
 800c92c:	3ff00000 	.word	0x3ff00000
 800c930:	40240000 	.word	0x40240000
 800c934:	401c0000 	.word	0x401c0000
 800c938:	40140000 	.word	0x40140000
 800c93c:	3fe00000 	.word	0x3fe00000
 800c940:	4630      	mov	r0, r6
 800c942:	4639      	mov	r1, r7
 800c944:	f7f3 fe34 	bl	80005b0 <__aeabi_dmul>
 800c948:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c94a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c94e:	9c08      	ldr	r4, [sp, #32]
 800c950:	9314      	str	r3, [sp, #80]	; 0x50
 800c952:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c956:	f7f4 f8db 	bl	8000b10 <__aeabi_d2iz>
 800c95a:	9015      	str	r0, [sp, #84]	; 0x54
 800c95c:	f7f3 fdbe 	bl	80004dc <__aeabi_i2d>
 800c960:	4602      	mov	r2, r0
 800c962:	460b      	mov	r3, r1
 800c964:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c968:	f7f3 fc6a 	bl	8000240 <__aeabi_dsub>
 800c96c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c96e:	4606      	mov	r6, r0
 800c970:	3330      	adds	r3, #48	; 0x30
 800c972:	f804 3b01 	strb.w	r3, [r4], #1
 800c976:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c978:	460f      	mov	r7, r1
 800c97a:	429c      	cmp	r4, r3
 800c97c:	f04f 0200 	mov.w	r2, #0
 800c980:	d124      	bne.n	800c9cc <_dtoa_r+0x64c>
 800c982:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c986:	4bb3      	ldr	r3, [pc, #716]	; (800cc54 <_dtoa_r+0x8d4>)
 800c988:	f7f3 fc5c 	bl	8000244 <__adddf3>
 800c98c:	4602      	mov	r2, r0
 800c98e:	460b      	mov	r3, r1
 800c990:	4630      	mov	r0, r6
 800c992:	4639      	mov	r1, r7
 800c994:	f7f4 f89c 	bl	8000ad0 <__aeabi_dcmpgt>
 800c998:	2800      	cmp	r0, #0
 800c99a:	d162      	bne.n	800ca62 <_dtoa_r+0x6e2>
 800c99c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c9a0:	2000      	movs	r0, #0
 800c9a2:	49ac      	ldr	r1, [pc, #688]	; (800cc54 <_dtoa_r+0x8d4>)
 800c9a4:	f7f3 fc4c 	bl	8000240 <__aeabi_dsub>
 800c9a8:	4602      	mov	r2, r0
 800c9aa:	460b      	mov	r3, r1
 800c9ac:	4630      	mov	r0, r6
 800c9ae:	4639      	mov	r1, r7
 800c9b0:	f7f4 f870 	bl	8000a94 <__aeabi_dcmplt>
 800c9b4:	2800      	cmp	r0, #0
 800c9b6:	f43f af1d 	beq.w	800c7f4 <_dtoa_r+0x474>
 800c9ba:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800c9bc:	1e7b      	subs	r3, r7, #1
 800c9be:	9314      	str	r3, [sp, #80]	; 0x50
 800c9c0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800c9c4:	2b30      	cmp	r3, #48	; 0x30
 800c9c6:	d0f8      	beq.n	800c9ba <_dtoa_r+0x63a>
 800c9c8:	46c1      	mov	r9, r8
 800c9ca:	e03a      	b.n	800ca42 <_dtoa_r+0x6c2>
 800c9cc:	4ba2      	ldr	r3, [pc, #648]	; (800cc58 <_dtoa_r+0x8d8>)
 800c9ce:	f7f3 fdef 	bl	80005b0 <__aeabi_dmul>
 800c9d2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c9d6:	e7bc      	b.n	800c952 <_dtoa_r+0x5d2>
 800c9d8:	9f08      	ldr	r7, [sp, #32]
 800c9da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c9de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c9e2:	f7f3 ff0f 	bl	8000804 <__aeabi_ddiv>
 800c9e6:	f7f4 f893 	bl	8000b10 <__aeabi_d2iz>
 800c9ea:	4604      	mov	r4, r0
 800c9ec:	f7f3 fd76 	bl	80004dc <__aeabi_i2d>
 800c9f0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c9f4:	f7f3 fddc 	bl	80005b0 <__aeabi_dmul>
 800c9f8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800c9fc:	460b      	mov	r3, r1
 800c9fe:	4602      	mov	r2, r0
 800ca00:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ca04:	f7f3 fc1c 	bl	8000240 <__aeabi_dsub>
 800ca08:	f807 6b01 	strb.w	r6, [r7], #1
 800ca0c:	9e08      	ldr	r6, [sp, #32]
 800ca0e:	9b02      	ldr	r3, [sp, #8]
 800ca10:	1bbe      	subs	r6, r7, r6
 800ca12:	42b3      	cmp	r3, r6
 800ca14:	d13a      	bne.n	800ca8c <_dtoa_r+0x70c>
 800ca16:	4602      	mov	r2, r0
 800ca18:	460b      	mov	r3, r1
 800ca1a:	f7f3 fc13 	bl	8000244 <__adddf3>
 800ca1e:	4602      	mov	r2, r0
 800ca20:	460b      	mov	r3, r1
 800ca22:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ca26:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ca2a:	f7f4 f851 	bl	8000ad0 <__aeabi_dcmpgt>
 800ca2e:	bb58      	cbnz	r0, 800ca88 <_dtoa_r+0x708>
 800ca30:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ca34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca38:	f7f4 f822 	bl	8000a80 <__aeabi_dcmpeq>
 800ca3c:	b108      	cbz	r0, 800ca42 <_dtoa_r+0x6c2>
 800ca3e:	07e1      	lsls	r1, r4, #31
 800ca40:	d422      	bmi.n	800ca88 <_dtoa_r+0x708>
 800ca42:	4628      	mov	r0, r5
 800ca44:	4651      	mov	r1, sl
 800ca46:	f000 fbef 	bl	800d228 <_Bfree>
 800ca4a:	2300      	movs	r3, #0
 800ca4c:	703b      	strb	r3, [r7, #0]
 800ca4e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800ca50:	f109 0001 	add.w	r0, r9, #1
 800ca54:	6018      	str	r0, [r3, #0]
 800ca56:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	f43f acdf 	beq.w	800c41c <_dtoa_r+0x9c>
 800ca5e:	601f      	str	r7, [r3, #0]
 800ca60:	e4dc      	b.n	800c41c <_dtoa_r+0x9c>
 800ca62:	4627      	mov	r7, r4
 800ca64:	463b      	mov	r3, r7
 800ca66:	461f      	mov	r7, r3
 800ca68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ca6c:	2a39      	cmp	r2, #57	; 0x39
 800ca6e:	d107      	bne.n	800ca80 <_dtoa_r+0x700>
 800ca70:	9a08      	ldr	r2, [sp, #32]
 800ca72:	429a      	cmp	r2, r3
 800ca74:	d1f7      	bne.n	800ca66 <_dtoa_r+0x6e6>
 800ca76:	2230      	movs	r2, #48	; 0x30
 800ca78:	9908      	ldr	r1, [sp, #32]
 800ca7a:	f108 0801 	add.w	r8, r8, #1
 800ca7e:	700a      	strb	r2, [r1, #0]
 800ca80:	781a      	ldrb	r2, [r3, #0]
 800ca82:	3201      	adds	r2, #1
 800ca84:	701a      	strb	r2, [r3, #0]
 800ca86:	e79f      	b.n	800c9c8 <_dtoa_r+0x648>
 800ca88:	46c8      	mov	r8, r9
 800ca8a:	e7eb      	b.n	800ca64 <_dtoa_r+0x6e4>
 800ca8c:	2200      	movs	r2, #0
 800ca8e:	4b72      	ldr	r3, [pc, #456]	; (800cc58 <_dtoa_r+0x8d8>)
 800ca90:	f7f3 fd8e 	bl	80005b0 <__aeabi_dmul>
 800ca94:	4602      	mov	r2, r0
 800ca96:	460b      	mov	r3, r1
 800ca98:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ca9c:	2200      	movs	r2, #0
 800ca9e:	2300      	movs	r3, #0
 800caa0:	f7f3 ffee 	bl	8000a80 <__aeabi_dcmpeq>
 800caa4:	2800      	cmp	r0, #0
 800caa6:	d098      	beq.n	800c9da <_dtoa_r+0x65a>
 800caa8:	e7cb      	b.n	800ca42 <_dtoa_r+0x6c2>
 800caaa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800caac:	2a00      	cmp	r2, #0
 800caae:	f000 80cd 	beq.w	800cc4c <_dtoa_r+0x8cc>
 800cab2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800cab4:	2a01      	cmp	r2, #1
 800cab6:	f300 80af 	bgt.w	800cc18 <_dtoa_r+0x898>
 800caba:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800cabc:	2a00      	cmp	r2, #0
 800cabe:	f000 80a7 	beq.w	800cc10 <_dtoa_r+0x890>
 800cac2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800cac6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800cac8:	9f06      	ldr	r7, [sp, #24]
 800caca:	9a06      	ldr	r2, [sp, #24]
 800cacc:	2101      	movs	r1, #1
 800cace:	441a      	add	r2, r3
 800cad0:	9206      	str	r2, [sp, #24]
 800cad2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cad4:	4628      	mov	r0, r5
 800cad6:	441a      	add	r2, r3
 800cad8:	9209      	str	r2, [sp, #36]	; 0x24
 800cada:	f000 fc5f 	bl	800d39c <__i2b>
 800cade:	4606      	mov	r6, r0
 800cae0:	2f00      	cmp	r7, #0
 800cae2:	dd0c      	ble.n	800cafe <_dtoa_r+0x77e>
 800cae4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	dd09      	ble.n	800cafe <_dtoa_r+0x77e>
 800caea:	42bb      	cmp	r3, r7
 800caec:	bfa8      	it	ge
 800caee:	463b      	movge	r3, r7
 800caf0:	9a06      	ldr	r2, [sp, #24]
 800caf2:	1aff      	subs	r7, r7, r3
 800caf4:	1ad2      	subs	r2, r2, r3
 800caf6:	9206      	str	r2, [sp, #24]
 800caf8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cafa:	1ad3      	subs	r3, r2, r3
 800cafc:	9309      	str	r3, [sp, #36]	; 0x24
 800cafe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb00:	b1f3      	cbz	r3, 800cb40 <_dtoa_r+0x7c0>
 800cb02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	f000 80a9 	beq.w	800cc5c <_dtoa_r+0x8dc>
 800cb0a:	2c00      	cmp	r4, #0
 800cb0c:	dd10      	ble.n	800cb30 <_dtoa_r+0x7b0>
 800cb0e:	4631      	mov	r1, r6
 800cb10:	4622      	mov	r2, r4
 800cb12:	4628      	mov	r0, r5
 800cb14:	f000 fcfc 	bl	800d510 <__pow5mult>
 800cb18:	4652      	mov	r2, sl
 800cb1a:	4601      	mov	r1, r0
 800cb1c:	4606      	mov	r6, r0
 800cb1e:	4628      	mov	r0, r5
 800cb20:	f000 fc52 	bl	800d3c8 <__multiply>
 800cb24:	4680      	mov	r8, r0
 800cb26:	4651      	mov	r1, sl
 800cb28:	4628      	mov	r0, r5
 800cb2a:	f000 fb7d 	bl	800d228 <_Bfree>
 800cb2e:	46c2      	mov	sl, r8
 800cb30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb32:	1b1a      	subs	r2, r3, r4
 800cb34:	d004      	beq.n	800cb40 <_dtoa_r+0x7c0>
 800cb36:	4651      	mov	r1, sl
 800cb38:	4628      	mov	r0, r5
 800cb3a:	f000 fce9 	bl	800d510 <__pow5mult>
 800cb3e:	4682      	mov	sl, r0
 800cb40:	2101      	movs	r1, #1
 800cb42:	4628      	mov	r0, r5
 800cb44:	f000 fc2a 	bl	800d39c <__i2b>
 800cb48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cb4a:	4604      	mov	r4, r0
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	f340 8087 	ble.w	800cc60 <_dtoa_r+0x8e0>
 800cb52:	461a      	mov	r2, r3
 800cb54:	4601      	mov	r1, r0
 800cb56:	4628      	mov	r0, r5
 800cb58:	f000 fcda 	bl	800d510 <__pow5mult>
 800cb5c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cb5e:	4604      	mov	r4, r0
 800cb60:	2b01      	cmp	r3, #1
 800cb62:	f340 8080 	ble.w	800cc66 <_dtoa_r+0x8e6>
 800cb66:	f04f 0800 	mov.w	r8, #0
 800cb6a:	6923      	ldr	r3, [r4, #16]
 800cb6c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cb70:	6918      	ldr	r0, [r3, #16]
 800cb72:	f000 fbc5 	bl	800d300 <__hi0bits>
 800cb76:	f1c0 0020 	rsb	r0, r0, #32
 800cb7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb7c:	4418      	add	r0, r3
 800cb7e:	f010 001f 	ands.w	r0, r0, #31
 800cb82:	f000 8092 	beq.w	800ccaa <_dtoa_r+0x92a>
 800cb86:	f1c0 0320 	rsb	r3, r0, #32
 800cb8a:	2b04      	cmp	r3, #4
 800cb8c:	f340 808a 	ble.w	800cca4 <_dtoa_r+0x924>
 800cb90:	f1c0 001c 	rsb	r0, r0, #28
 800cb94:	9b06      	ldr	r3, [sp, #24]
 800cb96:	4407      	add	r7, r0
 800cb98:	4403      	add	r3, r0
 800cb9a:	9306      	str	r3, [sp, #24]
 800cb9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb9e:	4403      	add	r3, r0
 800cba0:	9309      	str	r3, [sp, #36]	; 0x24
 800cba2:	9b06      	ldr	r3, [sp, #24]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	dd05      	ble.n	800cbb4 <_dtoa_r+0x834>
 800cba8:	4651      	mov	r1, sl
 800cbaa:	461a      	mov	r2, r3
 800cbac:	4628      	mov	r0, r5
 800cbae:	f000 fd09 	bl	800d5c4 <__lshift>
 800cbb2:	4682      	mov	sl, r0
 800cbb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	dd05      	ble.n	800cbc6 <_dtoa_r+0x846>
 800cbba:	4621      	mov	r1, r4
 800cbbc:	461a      	mov	r2, r3
 800cbbe:	4628      	mov	r0, r5
 800cbc0:	f000 fd00 	bl	800d5c4 <__lshift>
 800cbc4:	4604      	mov	r4, r0
 800cbc6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d070      	beq.n	800ccae <_dtoa_r+0x92e>
 800cbcc:	4621      	mov	r1, r4
 800cbce:	4650      	mov	r0, sl
 800cbd0:	f000 fd64 	bl	800d69c <__mcmp>
 800cbd4:	2800      	cmp	r0, #0
 800cbd6:	da6a      	bge.n	800ccae <_dtoa_r+0x92e>
 800cbd8:	2300      	movs	r3, #0
 800cbda:	4651      	mov	r1, sl
 800cbdc:	220a      	movs	r2, #10
 800cbde:	4628      	mov	r0, r5
 800cbe0:	f000 fb44 	bl	800d26c <__multadd>
 800cbe4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cbe6:	4682      	mov	sl, r0
 800cbe8:	f109 39ff 	add.w	r9, r9, #4294967295
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	f000 8193 	beq.w	800cf18 <_dtoa_r+0xb98>
 800cbf2:	4631      	mov	r1, r6
 800cbf4:	2300      	movs	r3, #0
 800cbf6:	220a      	movs	r2, #10
 800cbf8:	4628      	mov	r0, r5
 800cbfa:	f000 fb37 	bl	800d26c <__multadd>
 800cbfe:	f1bb 0f00 	cmp.w	fp, #0
 800cc02:	4606      	mov	r6, r0
 800cc04:	f300 8093 	bgt.w	800cd2e <_dtoa_r+0x9ae>
 800cc08:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cc0a:	2b02      	cmp	r3, #2
 800cc0c:	dc57      	bgt.n	800ccbe <_dtoa_r+0x93e>
 800cc0e:	e08e      	b.n	800cd2e <_dtoa_r+0x9ae>
 800cc10:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800cc12:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800cc16:	e756      	b.n	800cac6 <_dtoa_r+0x746>
 800cc18:	9b02      	ldr	r3, [sp, #8]
 800cc1a:	1e5c      	subs	r4, r3, #1
 800cc1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc1e:	42a3      	cmp	r3, r4
 800cc20:	bfb7      	itett	lt
 800cc22:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800cc24:	1b1c      	subge	r4, r3, r4
 800cc26:	1ae2      	sublt	r2, r4, r3
 800cc28:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800cc2a:	bfbe      	ittt	lt
 800cc2c:	940a      	strlt	r4, [sp, #40]	; 0x28
 800cc2e:	189b      	addlt	r3, r3, r2
 800cc30:	930e      	strlt	r3, [sp, #56]	; 0x38
 800cc32:	9b02      	ldr	r3, [sp, #8]
 800cc34:	bfb8      	it	lt
 800cc36:	2400      	movlt	r4, #0
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	bfbb      	ittet	lt
 800cc3c:	9b06      	ldrlt	r3, [sp, #24]
 800cc3e:	9a02      	ldrlt	r2, [sp, #8]
 800cc40:	9f06      	ldrge	r7, [sp, #24]
 800cc42:	1a9f      	sublt	r7, r3, r2
 800cc44:	bfac      	ite	ge
 800cc46:	9b02      	ldrge	r3, [sp, #8]
 800cc48:	2300      	movlt	r3, #0
 800cc4a:	e73e      	b.n	800caca <_dtoa_r+0x74a>
 800cc4c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800cc4e:	9f06      	ldr	r7, [sp, #24]
 800cc50:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800cc52:	e745      	b.n	800cae0 <_dtoa_r+0x760>
 800cc54:	3fe00000 	.word	0x3fe00000
 800cc58:	40240000 	.word	0x40240000
 800cc5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cc5e:	e76a      	b.n	800cb36 <_dtoa_r+0x7b6>
 800cc60:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cc62:	2b01      	cmp	r3, #1
 800cc64:	dc19      	bgt.n	800cc9a <_dtoa_r+0x91a>
 800cc66:	9b04      	ldr	r3, [sp, #16]
 800cc68:	b9bb      	cbnz	r3, 800cc9a <_dtoa_r+0x91a>
 800cc6a:	9b05      	ldr	r3, [sp, #20]
 800cc6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cc70:	b99b      	cbnz	r3, 800cc9a <_dtoa_r+0x91a>
 800cc72:	9b05      	ldr	r3, [sp, #20]
 800cc74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cc78:	0d1b      	lsrs	r3, r3, #20
 800cc7a:	051b      	lsls	r3, r3, #20
 800cc7c:	b183      	cbz	r3, 800cca0 <_dtoa_r+0x920>
 800cc7e:	f04f 0801 	mov.w	r8, #1
 800cc82:	9b06      	ldr	r3, [sp, #24]
 800cc84:	3301      	adds	r3, #1
 800cc86:	9306      	str	r3, [sp, #24]
 800cc88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc8a:	3301      	adds	r3, #1
 800cc8c:	9309      	str	r3, [sp, #36]	; 0x24
 800cc8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	f47f af6a 	bne.w	800cb6a <_dtoa_r+0x7ea>
 800cc96:	2001      	movs	r0, #1
 800cc98:	e76f      	b.n	800cb7a <_dtoa_r+0x7fa>
 800cc9a:	f04f 0800 	mov.w	r8, #0
 800cc9e:	e7f6      	b.n	800cc8e <_dtoa_r+0x90e>
 800cca0:	4698      	mov	r8, r3
 800cca2:	e7f4      	b.n	800cc8e <_dtoa_r+0x90e>
 800cca4:	f43f af7d 	beq.w	800cba2 <_dtoa_r+0x822>
 800cca8:	4618      	mov	r0, r3
 800ccaa:	301c      	adds	r0, #28
 800ccac:	e772      	b.n	800cb94 <_dtoa_r+0x814>
 800ccae:	9b02      	ldr	r3, [sp, #8]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	dc36      	bgt.n	800cd22 <_dtoa_r+0x9a2>
 800ccb4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ccb6:	2b02      	cmp	r3, #2
 800ccb8:	dd33      	ble.n	800cd22 <_dtoa_r+0x9a2>
 800ccba:	f8dd b008 	ldr.w	fp, [sp, #8]
 800ccbe:	f1bb 0f00 	cmp.w	fp, #0
 800ccc2:	d10d      	bne.n	800cce0 <_dtoa_r+0x960>
 800ccc4:	4621      	mov	r1, r4
 800ccc6:	465b      	mov	r3, fp
 800ccc8:	2205      	movs	r2, #5
 800ccca:	4628      	mov	r0, r5
 800cccc:	f000 face 	bl	800d26c <__multadd>
 800ccd0:	4601      	mov	r1, r0
 800ccd2:	4604      	mov	r4, r0
 800ccd4:	4650      	mov	r0, sl
 800ccd6:	f000 fce1 	bl	800d69c <__mcmp>
 800ccda:	2800      	cmp	r0, #0
 800ccdc:	f73f adb6 	bgt.w	800c84c <_dtoa_r+0x4cc>
 800cce0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800cce2:	9f08      	ldr	r7, [sp, #32]
 800cce4:	ea6f 0903 	mvn.w	r9, r3
 800cce8:	f04f 0800 	mov.w	r8, #0
 800ccec:	4621      	mov	r1, r4
 800ccee:	4628      	mov	r0, r5
 800ccf0:	f000 fa9a 	bl	800d228 <_Bfree>
 800ccf4:	2e00      	cmp	r6, #0
 800ccf6:	f43f aea4 	beq.w	800ca42 <_dtoa_r+0x6c2>
 800ccfa:	f1b8 0f00 	cmp.w	r8, #0
 800ccfe:	d005      	beq.n	800cd0c <_dtoa_r+0x98c>
 800cd00:	45b0      	cmp	r8, r6
 800cd02:	d003      	beq.n	800cd0c <_dtoa_r+0x98c>
 800cd04:	4641      	mov	r1, r8
 800cd06:	4628      	mov	r0, r5
 800cd08:	f000 fa8e 	bl	800d228 <_Bfree>
 800cd0c:	4631      	mov	r1, r6
 800cd0e:	4628      	mov	r0, r5
 800cd10:	f000 fa8a 	bl	800d228 <_Bfree>
 800cd14:	e695      	b.n	800ca42 <_dtoa_r+0x6c2>
 800cd16:	2400      	movs	r4, #0
 800cd18:	4626      	mov	r6, r4
 800cd1a:	e7e1      	b.n	800cce0 <_dtoa_r+0x960>
 800cd1c:	46c1      	mov	r9, r8
 800cd1e:	4626      	mov	r6, r4
 800cd20:	e594      	b.n	800c84c <_dtoa_r+0x4cc>
 800cd22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cd24:	f8dd b008 	ldr.w	fp, [sp, #8]
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	f000 80fc 	beq.w	800cf26 <_dtoa_r+0xba6>
 800cd2e:	2f00      	cmp	r7, #0
 800cd30:	dd05      	ble.n	800cd3e <_dtoa_r+0x9be>
 800cd32:	4631      	mov	r1, r6
 800cd34:	463a      	mov	r2, r7
 800cd36:	4628      	mov	r0, r5
 800cd38:	f000 fc44 	bl	800d5c4 <__lshift>
 800cd3c:	4606      	mov	r6, r0
 800cd3e:	f1b8 0f00 	cmp.w	r8, #0
 800cd42:	d05c      	beq.n	800cdfe <_dtoa_r+0xa7e>
 800cd44:	4628      	mov	r0, r5
 800cd46:	6871      	ldr	r1, [r6, #4]
 800cd48:	f000 fa2e 	bl	800d1a8 <_Balloc>
 800cd4c:	4607      	mov	r7, r0
 800cd4e:	b928      	cbnz	r0, 800cd5c <_dtoa_r+0x9dc>
 800cd50:	4602      	mov	r2, r0
 800cd52:	f240 21ea 	movw	r1, #746	; 0x2ea
 800cd56:	4b7e      	ldr	r3, [pc, #504]	; (800cf50 <_dtoa_r+0xbd0>)
 800cd58:	f7ff bb26 	b.w	800c3a8 <_dtoa_r+0x28>
 800cd5c:	6932      	ldr	r2, [r6, #16]
 800cd5e:	f106 010c 	add.w	r1, r6, #12
 800cd62:	3202      	adds	r2, #2
 800cd64:	0092      	lsls	r2, r2, #2
 800cd66:	300c      	adds	r0, #12
 800cd68:	f000 fa03 	bl	800d172 <memcpy>
 800cd6c:	2201      	movs	r2, #1
 800cd6e:	4639      	mov	r1, r7
 800cd70:	4628      	mov	r0, r5
 800cd72:	f000 fc27 	bl	800d5c4 <__lshift>
 800cd76:	46b0      	mov	r8, r6
 800cd78:	4606      	mov	r6, r0
 800cd7a:	9b08      	ldr	r3, [sp, #32]
 800cd7c:	3301      	adds	r3, #1
 800cd7e:	9302      	str	r3, [sp, #8]
 800cd80:	9b08      	ldr	r3, [sp, #32]
 800cd82:	445b      	add	r3, fp
 800cd84:	930a      	str	r3, [sp, #40]	; 0x28
 800cd86:	9b04      	ldr	r3, [sp, #16]
 800cd88:	f003 0301 	and.w	r3, r3, #1
 800cd8c:	9309      	str	r3, [sp, #36]	; 0x24
 800cd8e:	9b02      	ldr	r3, [sp, #8]
 800cd90:	4621      	mov	r1, r4
 800cd92:	4650      	mov	r0, sl
 800cd94:	f103 3bff 	add.w	fp, r3, #4294967295
 800cd98:	f7ff fa64 	bl	800c264 <quorem>
 800cd9c:	4603      	mov	r3, r0
 800cd9e:	4641      	mov	r1, r8
 800cda0:	3330      	adds	r3, #48	; 0x30
 800cda2:	9004      	str	r0, [sp, #16]
 800cda4:	4650      	mov	r0, sl
 800cda6:	930b      	str	r3, [sp, #44]	; 0x2c
 800cda8:	f000 fc78 	bl	800d69c <__mcmp>
 800cdac:	4632      	mov	r2, r6
 800cdae:	9006      	str	r0, [sp, #24]
 800cdb0:	4621      	mov	r1, r4
 800cdb2:	4628      	mov	r0, r5
 800cdb4:	f000 fc8e 	bl	800d6d4 <__mdiff>
 800cdb8:	68c2      	ldr	r2, [r0, #12]
 800cdba:	4607      	mov	r7, r0
 800cdbc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cdbe:	bb02      	cbnz	r2, 800ce02 <_dtoa_r+0xa82>
 800cdc0:	4601      	mov	r1, r0
 800cdc2:	4650      	mov	r0, sl
 800cdc4:	f000 fc6a 	bl	800d69c <__mcmp>
 800cdc8:	4602      	mov	r2, r0
 800cdca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cdcc:	4639      	mov	r1, r7
 800cdce:	4628      	mov	r0, r5
 800cdd0:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800cdd4:	f000 fa28 	bl	800d228 <_Bfree>
 800cdd8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cdda:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cddc:	9f02      	ldr	r7, [sp, #8]
 800cdde:	ea43 0102 	orr.w	r1, r3, r2
 800cde2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cde4:	430b      	orrs	r3, r1
 800cde6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cde8:	d10d      	bne.n	800ce06 <_dtoa_r+0xa86>
 800cdea:	2b39      	cmp	r3, #57	; 0x39
 800cdec:	d027      	beq.n	800ce3e <_dtoa_r+0xabe>
 800cdee:	9a06      	ldr	r2, [sp, #24]
 800cdf0:	2a00      	cmp	r2, #0
 800cdf2:	dd01      	ble.n	800cdf8 <_dtoa_r+0xa78>
 800cdf4:	9b04      	ldr	r3, [sp, #16]
 800cdf6:	3331      	adds	r3, #49	; 0x31
 800cdf8:	f88b 3000 	strb.w	r3, [fp]
 800cdfc:	e776      	b.n	800ccec <_dtoa_r+0x96c>
 800cdfe:	4630      	mov	r0, r6
 800ce00:	e7b9      	b.n	800cd76 <_dtoa_r+0x9f6>
 800ce02:	2201      	movs	r2, #1
 800ce04:	e7e2      	b.n	800cdcc <_dtoa_r+0xa4c>
 800ce06:	9906      	ldr	r1, [sp, #24]
 800ce08:	2900      	cmp	r1, #0
 800ce0a:	db04      	blt.n	800ce16 <_dtoa_r+0xa96>
 800ce0c:	9822      	ldr	r0, [sp, #136]	; 0x88
 800ce0e:	4301      	orrs	r1, r0
 800ce10:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ce12:	4301      	orrs	r1, r0
 800ce14:	d120      	bne.n	800ce58 <_dtoa_r+0xad8>
 800ce16:	2a00      	cmp	r2, #0
 800ce18:	ddee      	ble.n	800cdf8 <_dtoa_r+0xa78>
 800ce1a:	4651      	mov	r1, sl
 800ce1c:	2201      	movs	r2, #1
 800ce1e:	4628      	mov	r0, r5
 800ce20:	9302      	str	r3, [sp, #8]
 800ce22:	f000 fbcf 	bl	800d5c4 <__lshift>
 800ce26:	4621      	mov	r1, r4
 800ce28:	4682      	mov	sl, r0
 800ce2a:	f000 fc37 	bl	800d69c <__mcmp>
 800ce2e:	2800      	cmp	r0, #0
 800ce30:	9b02      	ldr	r3, [sp, #8]
 800ce32:	dc02      	bgt.n	800ce3a <_dtoa_r+0xaba>
 800ce34:	d1e0      	bne.n	800cdf8 <_dtoa_r+0xa78>
 800ce36:	07da      	lsls	r2, r3, #31
 800ce38:	d5de      	bpl.n	800cdf8 <_dtoa_r+0xa78>
 800ce3a:	2b39      	cmp	r3, #57	; 0x39
 800ce3c:	d1da      	bne.n	800cdf4 <_dtoa_r+0xa74>
 800ce3e:	2339      	movs	r3, #57	; 0x39
 800ce40:	f88b 3000 	strb.w	r3, [fp]
 800ce44:	463b      	mov	r3, r7
 800ce46:	461f      	mov	r7, r3
 800ce48:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800ce4c:	3b01      	subs	r3, #1
 800ce4e:	2a39      	cmp	r2, #57	; 0x39
 800ce50:	d050      	beq.n	800cef4 <_dtoa_r+0xb74>
 800ce52:	3201      	adds	r2, #1
 800ce54:	701a      	strb	r2, [r3, #0]
 800ce56:	e749      	b.n	800ccec <_dtoa_r+0x96c>
 800ce58:	2a00      	cmp	r2, #0
 800ce5a:	dd03      	ble.n	800ce64 <_dtoa_r+0xae4>
 800ce5c:	2b39      	cmp	r3, #57	; 0x39
 800ce5e:	d0ee      	beq.n	800ce3e <_dtoa_r+0xabe>
 800ce60:	3301      	adds	r3, #1
 800ce62:	e7c9      	b.n	800cdf8 <_dtoa_r+0xa78>
 800ce64:	9a02      	ldr	r2, [sp, #8]
 800ce66:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ce68:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ce6c:	428a      	cmp	r2, r1
 800ce6e:	d02a      	beq.n	800cec6 <_dtoa_r+0xb46>
 800ce70:	4651      	mov	r1, sl
 800ce72:	2300      	movs	r3, #0
 800ce74:	220a      	movs	r2, #10
 800ce76:	4628      	mov	r0, r5
 800ce78:	f000 f9f8 	bl	800d26c <__multadd>
 800ce7c:	45b0      	cmp	r8, r6
 800ce7e:	4682      	mov	sl, r0
 800ce80:	f04f 0300 	mov.w	r3, #0
 800ce84:	f04f 020a 	mov.w	r2, #10
 800ce88:	4641      	mov	r1, r8
 800ce8a:	4628      	mov	r0, r5
 800ce8c:	d107      	bne.n	800ce9e <_dtoa_r+0xb1e>
 800ce8e:	f000 f9ed 	bl	800d26c <__multadd>
 800ce92:	4680      	mov	r8, r0
 800ce94:	4606      	mov	r6, r0
 800ce96:	9b02      	ldr	r3, [sp, #8]
 800ce98:	3301      	adds	r3, #1
 800ce9a:	9302      	str	r3, [sp, #8]
 800ce9c:	e777      	b.n	800cd8e <_dtoa_r+0xa0e>
 800ce9e:	f000 f9e5 	bl	800d26c <__multadd>
 800cea2:	4631      	mov	r1, r6
 800cea4:	4680      	mov	r8, r0
 800cea6:	2300      	movs	r3, #0
 800cea8:	220a      	movs	r2, #10
 800ceaa:	4628      	mov	r0, r5
 800ceac:	f000 f9de 	bl	800d26c <__multadd>
 800ceb0:	4606      	mov	r6, r0
 800ceb2:	e7f0      	b.n	800ce96 <_dtoa_r+0xb16>
 800ceb4:	f1bb 0f00 	cmp.w	fp, #0
 800ceb8:	bfcc      	ite	gt
 800ceba:	465f      	movgt	r7, fp
 800cebc:	2701      	movle	r7, #1
 800cebe:	f04f 0800 	mov.w	r8, #0
 800cec2:	9a08      	ldr	r2, [sp, #32]
 800cec4:	4417      	add	r7, r2
 800cec6:	4651      	mov	r1, sl
 800cec8:	2201      	movs	r2, #1
 800ceca:	4628      	mov	r0, r5
 800cecc:	9302      	str	r3, [sp, #8]
 800cece:	f000 fb79 	bl	800d5c4 <__lshift>
 800ced2:	4621      	mov	r1, r4
 800ced4:	4682      	mov	sl, r0
 800ced6:	f000 fbe1 	bl	800d69c <__mcmp>
 800ceda:	2800      	cmp	r0, #0
 800cedc:	dcb2      	bgt.n	800ce44 <_dtoa_r+0xac4>
 800cede:	d102      	bne.n	800cee6 <_dtoa_r+0xb66>
 800cee0:	9b02      	ldr	r3, [sp, #8]
 800cee2:	07db      	lsls	r3, r3, #31
 800cee4:	d4ae      	bmi.n	800ce44 <_dtoa_r+0xac4>
 800cee6:	463b      	mov	r3, r7
 800cee8:	461f      	mov	r7, r3
 800ceea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ceee:	2a30      	cmp	r2, #48	; 0x30
 800cef0:	d0fa      	beq.n	800cee8 <_dtoa_r+0xb68>
 800cef2:	e6fb      	b.n	800ccec <_dtoa_r+0x96c>
 800cef4:	9a08      	ldr	r2, [sp, #32]
 800cef6:	429a      	cmp	r2, r3
 800cef8:	d1a5      	bne.n	800ce46 <_dtoa_r+0xac6>
 800cefa:	2331      	movs	r3, #49	; 0x31
 800cefc:	f109 0901 	add.w	r9, r9, #1
 800cf00:	7013      	strb	r3, [r2, #0]
 800cf02:	e6f3      	b.n	800ccec <_dtoa_r+0x96c>
 800cf04:	4b13      	ldr	r3, [pc, #76]	; (800cf54 <_dtoa_r+0xbd4>)
 800cf06:	f7ff baa7 	b.w	800c458 <_dtoa_r+0xd8>
 800cf0a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	f47f aa80 	bne.w	800c412 <_dtoa_r+0x92>
 800cf12:	4b11      	ldr	r3, [pc, #68]	; (800cf58 <_dtoa_r+0xbd8>)
 800cf14:	f7ff baa0 	b.w	800c458 <_dtoa_r+0xd8>
 800cf18:	f1bb 0f00 	cmp.w	fp, #0
 800cf1c:	dc03      	bgt.n	800cf26 <_dtoa_r+0xba6>
 800cf1e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cf20:	2b02      	cmp	r3, #2
 800cf22:	f73f aecc 	bgt.w	800ccbe <_dtoa_r+0x93e>
 800cf26:	9f08      	ldr	r7, [sp, #32]
 800cf28:	4621      	mov	r1, r4
 800cf2a:	4650      	mov	r0, sl
 800cf2c:	f7ff f99a 	bl	800c264 <quorem>
 800cf30:	9a08      	ldr	r2, [sp, #32]
 800cf32:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800cf36:	f807 3b01 	strb.w	r3, [r7], #1
 800cf3a:	1aba      	subs	r2, r7, r2
 800cf3c:	4593      	cmp	fp, r2
 800cf3e:	ddb9      	ble.n	800ceb4 <_dtoa_r+0xb34>
 800cf40:	4651      	mov	r1, sl
 800cf42:	2300      	movs	r3, #0
 800cf44:	220a      	movs	r2, #10
 800cf46:	4628      	mov	r0, r5
 800cf48:	f000 f990 	bl	800d26c <__multadd>
 800cf4c:	4682      	mov	sl, r0
 800cf4e:	e7eb      	b.n	800cf28 <_dtoa_r+0xba8>
 800cf50:	0800f79c 	.word	0x0800f79c
 800cf54:	0800f5f4 	.word	0x0800f5f4
 800cf58:	0800f719 	.word	0x0800f719

0800cf5c <std>:
 800cf5c:	2300      	movs	r3, #0
 800cf5e:	b510      	push	{r4, lr}
 800cf60:	4604      	mov	r4, r0
 800cf62:	e9c0 3300 	strd	r3, r3, [r0]
 800cf66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cf6a:	6083      	str	r3, [r0, #8]
 800cf6c:	8181      	strh	r1, [r0, #12]
 800cf6e:	6643      	str	r3, [r0, #100]	; 0x64
 800cf70:	81c2      	strh	r2, [r0, #14]
 800cf72:	6183      	str	r3, [r0, #24]
 800cf74:	4619      	mov	r1, r3
 800cf76:	2208      	movs	r2, #8
 800cf78:	305c      	adds	r0, #92	; 0x5c
 800cf7a:	f7fe fb33 	bl	800b5e4 <memset>
 800cf7e:	4b05      	ldr	r3, [pc, #20]	; (800cf94 <std+0x38>)
 800cf80:	6224      	str	r4, [r4, #32]
 800cf82:	6263      	str	r3, [r4, #36]	; 0x24
 800cf84:	4b04      	ldr	r3, [pc, #16]	; (800cf98 <std+0x3c>)
 800cf86:	62a3      	str	r3, [r4, #40]	; 0x28
 800cf88:	4b04      	ldr	r3, [pc, #16]	; (800cf9c <std+0x40>)
 800cf8a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cf8c:	4b04      	ldr	r3, [pc, #16]	; (800cfa0 <std+0x44>)
 800cf8e:	6323      	str	r3, [r4, #48]	; 0x30
 800cf90:	bd10      	pop	{r4, pc}
 800cf92:	bf00      	nop
 800cf94:	0800de31 	.word	0x0800de31
 800cf98:	0800de53 	.word	0x0800de53
 800cf9c:	0800de8b 	.word	0x0800de8b
 800cfa0:	0800deaf 	.word	0x0800deaf

0800cfa4 <_cleanup_r>:
 800cfa4:	4901      	ldr	r1, [pc, #4]	; (800cfac <_cleanup_r+0x8>)
 800cfa6:	f000 b8af 	b.w	800d108 <_fwalk_reent>
 800cfaa:	bf00      	nop
 800cfac:	0800e1c5 	.word	0x0800e1c5

0800cfb0 <__sfmoreglue>:
 800cfb0:	b570      	push	{r4, r5, r6, lr}
 800cfb2:	2568      	movs	r5, #104	; 0x68
 800cfb4:	1e4a      	subs	r2, r1, #1
 800cfb6:	4355      	muls	r5, r2
 800cfb8:	460e      	mov	r6, r1
 800cfba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cfbe:	f7fe fb65 	bl	800b68c <_malloc_r>
 800cfc2:	4604      	mov	r4, r0
 800cfc4:	b140      	cbz	r0, 800cfd8 <__sfmoreglue+0x28>
 800cfc6:	2100      	movs	r1, #0
 800cfc8:	e9c0 1600 	strd	r1, r6, [r0]
 800cfcc:	300c      	adds	r0, #12
 800cfce:	60a0      	str	r0, [r4, #8]
 800cfd0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cfd4:	f7fe fb06 	bl	800b5e4 <memset>
 800cfd8:	4620      	mov	r0, r4
 800cfda:	bd70      	pop	{r4, r5, r6, pc}

0800cfdc <__sfp_lock_acquire>:
 800cfdc:	4801      	ldr	r0, [pc, #4]	; (800cfe4 <__sfp_lock_acquire+0x8>)
 800cfde:	f000 b8b8 	b.w	800d152 <__retarget_lock_acquire_recursive>
 800cfe2:	bf00      	nop
 800cfe4:	20000bb8 	.word	0x20000bb8

0800cfe8 <__sfp_lock_release>:
 800cfe8:	4801      	ldr	r0, [pc, #4]	; (800cff0 <__sfp_lock_release+0x8>)
 800cfea:	f000 b8b3 	b.w	800d154 <__retarget_lock_release_recursive>
 800cfee:	bf00      	nop
 800cff0:	20000bb8 	.word	0x20000bb8

0800cff4 <__sinit_lock_acquire>:
 800cff4:	4801      	ldr	r0, [pc, #4]	; (800cffc <__sinit_lock_acquire+0x8>)
 800cff6:	f000 b8ac 	b.w	800d152 <__retarget_lock_acquire_recursive>
 800cffa:	bf00      	nop
 800cffc:	20000bb3 	.word	0x20000bb3

0800d000 <__sinit_lock_release>:
 800d000:	4801      	ldr	r0, [pc, #4]	; (800d008 <__sinit_lock_release+0x8>)
 800d002:	f000 b8a7 	b.w	800d154 <__retarget_lock_release_recursive>
 800d006:	bf00      	nop
 800d008:	20000bb3 	.word	0x20000bb3

0800d00c <__sinit>:
 800d00c:	b510      	push	{r4, lr}
 800d00e:	4604      	mov	r4, r0
 800d010:	f7ff fff0 	bl	800cff4 <__sinit_lock_acquire>
 800d014:	69a3      	ldr	r3, [r4, #24]
 800d016:	b11b      	cbz	r3, 800d020 <__sinit+0x14>
 800d018:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d01c:	f7ff bff0 	b.w	800d000 <__sinit_lock_release>
 800d020:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d024:	6523      	str	r3, [r4, #80]	; 0x50
 800d026:	4b13      	ldr	r3, [pc, #76]	; (800d074 <__sinit+0x68>)
 800d028:	4a13      	ldr	r2, [pc, #76]	; (800d078 <__sinit+0x6c>)
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	62a2      	str	r2, [r4, #40]	; 0x28
 800d02e:	42a3      	cmp	r3, r4
 800d030:	bf08      	it	eq
 800d032:	2301      	moveq	r3, #1
 800d034:	4620      	mov	r0, r4
 800d036:	bf08      	it	eq
 800d038:	61a3      	streq	r3, [r4, #24]
 800d03a:	f000 f81f 	bl	800d07c <__sfp>
 800d03e:	6060      	str	r0, [r4, #4]
 800d040:	4620      	mov	r0, r4
 800d042:	f000 f81b 	bl	800d07c <__sfp>
 800d046:	60a0      	str	r0, [r4, #8]
 800d048:	4620      	mov	r0, r4
 800d04a:	f000 f817 	bl	800d07c <__sfp>
 800d04e:	2200      	movs	r2, #0
 800d050:	2104      	movs	r1, #4
 800d052:	60e0      	str	r0, [r4, #12]
 800d054:	6860      	ldr	r0, [r4, #4]
 800d056:	f7ff ff81 	bl	800cf5c <std>
 800d05a:	2201      	movs	r2, #1
 800d05c:	2109      	movs	r1, #9
 800d05e:	68a0      	ldr	r0, [r4, #8]
 800d060:	f7ff ff7c 	bl	800cf5c <std>
 800d064:	2202      	movs	r2, #2
 800d066:	2112      	movs	r1, #18
 800d068:	68e0      	ldr	r0, [r4, #12]
 800d06a:	f7ff ff77 	bl	800cf5c <std>
 800d06e:	2301      	movs	r3, #1
 800d070:	61a3      	str	r3, [r4, #24]
 800d072:	e7d1      	b.n	800d018 <__sinit+0xc>
 800d074:	0800f5e0 	.word	0x0800f5e0
 800d078:	0800cfa5 	.word	0x0800cfa5

0800d07c <__sfp>:
 800d07c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d07e:	4607      	mov	r7, r0
 800d080:	f7ff ffac 	bl	800cfdc <__sfp_lock_acquire>
 800d084:	4b1e      	ldr	r3, [pc, #120]	; (800d100 <__sfp+0x84>)
 800d086:	681e      	ldr	r6, [r3, #0]
 800d088:	69b3      	ldr	r3, [r6, #24]
 800d08a:	b913      	cbnz	r3, 800d092 <__sfp+0x16>
 800d08c:	4630      	mov	r0, r6
 800d08e:	f7ff ffbd 	bl	800d00c <__sinit>
 800d092:	3648      	adds	r6, #72	; 0x48
 800d094:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d098:	3b01      	subs	r3, #1
 800d09a:	d503      	bpl.n	800d0a4 <__sfp+0x28>
 800d09c:	6833      	ldr	r3, [r6, #0]
 800d09e:	b30b      	cbz	r3, 800d0e4 <__sfp+0x68>
 800d0a0:	6836      	ldr	r6, [r6, #0]
 800d0a2:	e7f7      	b.n	800d094 <__sfp+0x18>
 800d0a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d0a8:	b9d5      	cbnz	r5, 800d0e0 <__sfp+0x64>
 800d0aa:	4b16      	ldr	r3, [pc, #88]	; (800d104 <__sfp+0x88>)
 800d0ac:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d0b0:	60e3      	str	r3, [r4, #12]
 800d0b2:	6665      	str	r5, [r4, #100]	; 0x64
 800d0b4:	f000 f84c 	bl	800d150 <__retarget_lock_init_recursive>
 800d0b8:	f7ff ff96 	bl	800cfe8 <__sfp_lock_release>
 800d0bc:	2208      	movs	r2, #8
 800d0be:	4629      	mov	r1, r5
 800d0c0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d0c4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d0c8:	6025      	str	r5, [r4, #0]
 800d0ca:	61a5      	str	r5, [r4, #24]
 800d0cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d0d0:	f7fe fa88 	bl	800b5e4 <memset>
 800d0d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d0d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d0dc:	4620      	mov	r0, r4
 800d0de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d0e0:	3468      	adds	r4, #104	; 0x68
 800d0e2:	e7d9      	b.n	800d098 <__sfp+0x1c>
 800d0e4:	2104      	movs	r1, #4
 800d0e6:	4638      	mov	r0, r7
 800d0e8:	f7ff ff62 	bl	800cfb0 <__sfmoreglue>
 800d0ec:	4604      	mov	r4, r0
 800d0ee:	6030      	str	r0, [r6, #0]
 800d0f0:	2800      	cmp	r0, #0
 800d0f2:	d1d5      	bne.n	800d0a0 <__sfp+0x24>
 800d0f4:	f7ff ff78 	bl	800cfe8 <__sfp_lock_release>
 800d0f8:	230c      	movs	r3, #12
 800d0fa:	603b      	str	r3, [r7, #0]
 800d0fc:	e7ee      	b.n	800d0dc <__sfp+0x60>
 800d0fe:	bf00      	nop
 800d100:	0800f5e0 	.word	0x0800f5e0
 800d104:	ffff0001 	.word	0xffff0001

0800d108 <_fwalk_reent>:
 800d108:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d10c:	4606      	mov	r6, r0
 800d10e:	4688      	mov	r8, r1
 800d110:	2700      	movs	r7, #0
 800d112:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d116:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d11a:	f1b9 0901 	subs.w	r9, r9, #1
 800d11e:	d505      	bpl.n	800d12c <_fwalk_reent+0x24>
 800d120:	6824      	ldr	r4, [r4, #0]
 800d122:	2c00      	cmp	r4, #0
 800d124:	d1f7      	bne.n	800d116 <_fwalk_reent+0xe>
 800d126:	4638      	mov	r0, r7
 800d128:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d12c:	89ab      	ldrh	r3, [r5, #12]
 800d12e:	2b01      	cmp	r3, #1
 800d130:	d907      	bls.n	800d142 <_fwalk_reent+0x3a>
 800d132:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d136:	3301      	adds	r3, #1
 800d138:	d003      	beq.n	800d142 <_fwalk_reent+0x3a>
 800d13a:	4629      	mov	r1, r5
 800d13c:	4630      	mov	r0, r6
 800d13e:	47c0      	blx	r8
 800d140:	4307      	orrs	r7, r0
 800d142:	3568      	adds	r5, #104	; 0x68
 800d144:	e7e9      	b.n	800d11a <_fwalk_reent+0x12>
	...

0800d148 <_localeconv_r>:
 800d148:	4800      	ldr	r0, [pc, #0]	; (800d14c <_localeconv_r+0x4>)
 800d14a:	4770      	bx	lr
 800d14c:	20000170 	.word	0x20000170

0800d150 <__retarget_lock_init_recursive>:
 800d150:	4770      	bx	lr

0800d152 <__retarget_lock_acquire_recursive>:
 800d152:	4770      	bx	lr

0800d154 <__retarget_lock_release_recursive>:
 800d154:	4770      	bx	lr

0800d156 <memchr>:
 800d156:	4603      	mov	r3, r0
 800d158:	b510      	push	{r4, lr}
 800d15a:	b2c9      	uxtb	r1, r1
 800d15c:	4402      	add	r2, r0
 800d15e:	4293      	cmp	r3, r2
 800d160:	4618      	mov	r0, r3
 800d162:	d101      	bne.n	800d168 <memchr+0x12>
 800d164:	2000      	movs	r0, #0
 800d166:	e003      	b.n	800d170 <memchr+0x1a>
 800d168:	7804      	ldrb	r4, [r0, #0]
 800d16a:	3301      	adds	r3, #1
 800d16c:	428c      	cmp	r4, r1
 800d16e:	d1f6      	bne.n	800d15e <memchr+0x8>
 800d170:	bd10      	pop	{r4, pc}

0800d172 <memcpy>:
 800d172:	440a      	add	r2, r1
 800d174:	4291      	cmp	r1, r2
 800d176:	f100 33ff 	add.w	r3, r0, #4294967295
 800d17a:	d100      	bne.n	800d17e <memcpy+0xc>
 800d17c:	4770      	bx	lr
 800d17e:	b510      	push	{r4, lr}
 800d180:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d184:	4291      	cmp	r1, r2
 800d186:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d18a:	d1f9      	bne.n	800d180 <memcpy+0xe>
 800d18c:	bd10      	pop	{r4, pc}
	...

0800d190 <__malloc_lock>:
 800d190:	4801      	ldr	r0, [pc, #4]	; (800d198 <__malloc_lock+0x8>)
 800d192:	f7ff bfde 	b.w	800d152 <__retarget_lock_acquire_recursive>
 800d196:	bf00      	nop
 800d198:	20000bb4 	.word	0x20000bb4

0800d19c <__malloc_unlock>:
 800d19c:	4801      	ldr	r0, [pc, #4]	; (800d1a4 <__malloc_unlock+0x8>)
 800d19e:	f7ff bfd9 	b.w	800d154 <__retarget_lock_release_recursive>
 800d1a2:	bf00      	nop
 800d1a4:	20000bb4 	.word	0x20000bb4

0800d1a8 <_Balloc>:
 800d1a8:	b570      	push	{r4, r5, r6, lr}
 800d1aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d1ac:	4604      	mov	r4, r0
 800d1ae:	460d      	mov	r5, r1
 800d1b0:	b976      	cbnz	r6, 800d1d0 <_Balloc+0x28>
 800d1b2:	2010      	movs	r0, #16
 800d1b4:	f7fe fa06 	bl	800b5c4 <malloc>
 800d1b8:	4602      	mov	r2, r0
 800d1ba:	6260      	str	r0, [r4, #36]	; 0x24
 800d1bc:	b920      	cbnz	r0, 800d1c8 <_Balloc+0x20>
 800d1be:	2166      	movs	r1, #102	; 0x66
 800d1c0:	4b17      	ldr	r3, [pc, #92]	; (800d220 <_Balloc+0x78>)
 800d1c2:	4818      	ldr	r0, [pc, #96]	; (800d224 <_Balloc+0x7c>)
 800d1c4:	f000 ff4a 	bl	800e05c <__assert_func>
 800d1c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d1cc:	6006      	str	r6, [r0, #0]
 800d1ce:	60c6      	str	r6, [r0, #12]
 800d1d0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d1d2:	68f3      	ldr	r3, [r6, #12]
 800d1d4:	b183      	cbz	r3, 800d1f8 <_Balloc+0x50>
 800d1d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d1d8:	68db      	ldr	r3, [r3, #12]
 800d1da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d1de:	b9b8      	cbnz	r0, 800d210 <_Balloc+0x68>
 800d1e0:	2101      	movs	r1, #1
 800d1e2:	fa01 f605 	lsl.w	r6, r1, r5
 800d1e6:	1d72      	adds	r2, r6, #5
 800d1e8:	4620      	mov	r0, r4
 800d1ea:	0092      	lsls	r2, r2, #2
 800d1ec:	f000 fb5e 	bl	800d8ac <_calloc_r>
 800d1f0:	b160      	cbz	r0, 800d20c <_Balloc+0x64>
 800d1f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d1f6:	e00e      	b.n	800d216 <_Balloc+0x6e>
 800d1f8:	2221      	movs	r2, #33	; 0x21
 800d1fa:	2104      	movs	r1, #4
 800d1fc:	4620      	mov	r0, r4
 800d1fe:	f000 fb55 	bl	800d8ac <_calloc_r>
 800d202:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d204:	60f0      	str	r0, [r6, #12]
 800d206:	68db      	ldr	r3, [r3, #12]
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d1e4      	bne.n	800d1d6 <_Balloc+0x2e>
 800d20c:	2000      	movs	r0, #0
 800d20e:	bd70      	pop	{r4, r5, r6, pc}
 800d210:	6802      	ldr	r2, [r0, #0]
 800d212:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d216:	2300      	movs	r3, #0
 800d218:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d21c:	e7f7      	b.n	800d20e <_Balloc+0x66>
 800d21e:	bf00      	nop
 800d220:	0800f726 	.word	0x0800f726
 800d224:	0800f810 	.word	0x0800f810

0800d228 <_Bfree>:
 800d228:	b570      	push	{r4, r5, r6, lr}
 800d22a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d22c:	4605      	mov	r5, r0
 800d22e:	460c      	mov	r4, r1
 800d230:	b976      	cbnz	r6, 800d250 <_Bfree+0x28>
 800d232:	2010      	movs	r0, #16
 800d234:	f7fe f9c6 	bl	800b5c4 <malloc>
 800d238:	4602      	mov	r2, r0
 800d23a:	6268      	str	r0, [r5, #36]	; 0x24
 800d23c:	b920      	cbnz	r0, 800d248 <_Bfree+0x20>
 800d23e:	218a      	movs	r1, #138	; 0x8a
 800d240:	4b08      	ldr	r3, [pc, #32]	; (800d264 <_Bfree+0x3c>)
 800d242:	4809      	ldr	r0, [pc, #36]	; (800d268 <_Bfree+0x40>)
 800d244:	f000 ff0a 	bl	800e05c <__assert_func>
 800d248:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d24c:	6006      	str	r6, [r0, #0]
 800d24e:	60c6      	str	r6, [r0, #12]
 800d250:	b13c      	cbz	r4, 800d262 <_Bfree+0x3a>
 800d252:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d254:	6862      	ldr	r2, [r4, #4]
 800d256:	68db      	ldr	r3, [r3, #12]
 800d258:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d25c:	6021      	str	r1, [r4, #0]
 800d25e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d262:	bd70      	pop	{r4, r5, r6, pc}
 800d264:	0800f726 	.word	0x0800f726
 800d268:	0800f810 	.word	0x0800f810

0800d26c <__multadd>:
 800d26c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d270:	4698      	mov	r8, r3
 800d272:	460c      	mov	r4, r1
 800d274:	2300      	movs	r3, #0
 800d276:	690e      	ldr	r6, [r1, #16]
 800d278:	4607      	mov	r7, r0
 800d27a:	f101 0014 	add.w	r0, r1, #20
 800d27e:	6805      	ldr	r5, [r0, #0]
 800d280:	3301      	adds	r3, #1
 800d282:	b2a9      	uxth	r1, r5
 800d284:	fb02 8101 	mla	r1, r2, r1, r8
 800d288:	0c2d      	lsrs	r5, r5, #16
 800d28a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800d28e:	fb02 c505 	mla	r5, r2, r5, ip
 800d292:	b289      	uxth	r1, r1
 800d294:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800d298:	429e      	cmp	r6, r3
 800d29a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800d29e:	f840 1b04 	str.w	r1, [r0], #4
 800d2a2:	dcec      	bgt.n	800d27e <__multadd+0x12>
 800d2a4:	f1b8 0f00 	cmp.w	r8, #0
 800d2a8:	d022      	beq.n	800d2f0 <__multadd+0x84>
 800d2aa:	68a3      	ldr	r3, [r4, #8]
 800d2ac:	42b3      	cmp	r3, r6
 800d2ae:	dc19      	bgt.n	800d2e4 <__multadd+0x78>
 800d2b0:	6861      	ldr	r1, [r4, #4]
 800d2b2:	4638      	mov	r0, r7
 800d2b4:	3101      	adds	r1, #1
 800d2b6:	f7ff ff77 	bl	800d1a8 <_Balloc>
 800d2ba:	4605      	mov	r5, r0
 800d2bc:	b928      	cbnz	r0, 800d2ca <__multadd+0x5e>
 800d2be:	4602      	mov	r2, r0
 800d2c0:	21b5      	movs	r1, #181	; 0xb5
 800d2c2:	4b0d      	ldr	r3, [pc, #52]	; (800d2f8 <__multadd+0x8c>)
 800d2c4:	480d      	ldr	r0, [pc, #52]	; (800d2fc <__multadd+0x90>)
 800d2c6:	f000 fec9 	bl	800e05c <__assert_func>
 800d2ca:	6922      	ldr	r2, [r4, #16]
 800d2cc:	f104 010c 	add.w	r1, r4, #12
 800d2d0:	3202      	adds	r2, #2
 800d2d2:	0092      	lsls	r2, r2, #2
 800d2d4:	300c      	adds	r0, #12
 800d2d6:	f7ff ff4c 	bl	800d172 <memcpy>
 800d2da:	4621      	mov	r1, r4
 800d2dc:	4638      	mov	r0, r7
 800d2de:	f7ff ffa3 	bl	800d228 <_Bfree>
 800d2e2:	462c      	mov	r4, r5
 800d2e4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800d2e8:	3601      	adds	r6, #1
 800d2ea:	f8c3 8014 	str.w	r8, [r3, #20]
 800d2ee:	6126      	str	r6, [r4, #16]
 800d2f0:	4620      	mov	r0, r4
 800d2f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2f6:	bf00      	nop
 800d2f8:	0800f79c 	.word	0x0800f79c
 800d2fc:	0800f810 	.word	0x0800f810

0800d300 <__hi0bits>:
 800d300:	0c02      	lsrs	r2, r0, #16
 800d302:	0412      	lsls	r2, r2, #16
 800d304:	4603      	mov	r3, r0
 800d306:	b9ca      	cbnz	r2, 800d33c <__hi0bits+0x3c>
 800d308:	0403      	lsls	r3, r0, #16
 800d30a:	2010      	movs	r0, #16
 800d30c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800d310:	bf04      	itt	eq
 800d312:	021b      	lsleq	r3, r3, #8
 800d314:	3008      	addeq	r0, #8
 800d316:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800d31a:	bf04      	itt	eq
 800d31c:	011b      	lsleq	r3, r3, #4
 800d31e:	3004      	addeq	r0, #4
 800d320:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800d324:	bf04      	itt	eq
 800d326:	009b      	lsleq	r3, r3, #2
 800d328:	3002      	addeq	r0, #2
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	db05      	blt.n	800d33a <__hi0bits+0x3a>
 800d32e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800d332:	f100 0001 	add.w	r0, r0, #1
 800d336:	bf08      	it	eq
 800d338:	2020      	moveq	r0, #32
 800d33a:	4770      	bx	lr
 800d33c:	2000      	movs	r0, #0
 800d33e:	e7e5      	b.n	800d30c <__hi0bits+0xc>

0800d340 <__lo0bits>:
 800d340:	6803      	ldr	r3, [r0, #0]
 800d342:	4602      	mov	r2, r0
 800d344:	f013 0007 	ands.w	r0, r3, #7
 800d348:	d00b      	beq.n	800d362 <__lo0bits+0x22>
 800d34a:	07d9      	lsls	r1, r3, #31
 800d34c:	d422      	bmi.n	800d394 <__lo0bits+0x54>
 800d34e:	0798      	lsls	r0, r3, #30
 800d350:	bf49      	itett	mi
 800d352:	085b      	lsrmi	r3, r3, #1
 800d354:	089b      	lsrpl	r3, r3, #2
 800d356:	2001      	movmi	r0, #1
 800d358:	6013      	strmi	r3, [r2, #0]
 800d35a:	bf5c      	itt	pl
 800d35c:	2002      	movpl	r0, #2
 800d35e:	6013      	strpl	r3, [r2, #0]
 800d360:	4770      	bx	lr
 800d362:	b299      	uxth	r1, r3
 800d364:	b909      	cbnz	r1, 800d36a <__lo0bits+0x2a>
 800d366:	2010      	movs	r0, #16
 800d368:	0c1b      	lsrs	r3, r3, #16
 800d36a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d36e:	bf04      	itt	eq
 800d370:	0a1b      	lsreq	r3, r3, #8
 800d372:	3008      	addeq	r0, #8
 800d374:	0719      	lsls	r1, r3, #28
 800d376:	bf04      	itt	eq
 800d378:	091b      	lsreq	r3, r3, #4
 800d37a:	3004      	addeq	r0, #4
 800d37c:	0799      	lsls	r1, r3, #30
 800d37e:	bf04      	itt	eq
 800d380:	089b      	lsreq	r3, r3, #2
 800d382:	3002      	addeq	r0, #2
 800d384:	07d9      	lsls	r1, r3, #31
 800d386:	d403      	bmi.n	800d390 <__lo0bits+0x50>
 800d388:	085b      	lsrs	r3, r3, #1
 800d38a:	f100 0001 	add.w	r0, r0, #1
 800d38e:	d003      	beq.n	800d398 <__lo0bits+0x58>
 800d390:	6013      	str	r3, [r2, #0]
 800d392:	4770      	bx	lr
 800d394:	2000      	movs	r0, #0
 800d396:	4770      	bx	lr
 800d398:	2020      	movs	r0, #32
 800d39a:	4770      	bx	lr

0800d39c <__i2b>:
 800d39c:	b510      	push	{r4, lr}
 800d39e:	460c      	mov	r4, r1
 800d3a0:	2101      	movs	r1, #1
 800d3a2:	f7ff ff01 	bl	800d1a8 <_Balloc>
 800d3a6:	4602      	mov	r2, r0
 800d3a8:	b928      	cbnz	r0, 800d3b6 <__i2b+0x1a>
 800d3aa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d3ae:	4b04      	ldr	r3, [pc, #16]	; (800d3c0 <__i2b+0x24>)
 800d3b0:	4804      	ldr	r0, [pc, #16]	; (800d3c4 <__i2b+0x28>)
 800d3b2:	f000 fe53 	bl	800e05c <__assert_func>
 800d3b6:	2301      	movs	r3, #1
 800d3b8:	6144      	str	r4, [r0, #20]
 800d3ba:	6103      	str	r3, [r0, #16]
 800d3bc:	bd10      	pop	{r4, pc}
 800d3be:	bf00      	nop
 800d3c0:	0800f79c 	.word	0x0800f79c
 800d3c4:	0800f810 	.word	0x0800f810

0800d3c8 <__multiply>:
 800d3c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3cc:	4614      	mov	r4, r2
 800d3ce:	690a      	ldr	r2, [r1, #16]
 800d3d0:	6923      	ldr	r3, [r4, #16]
 800d3d2:	460d      	mov	r5, r1
 800d3d4:	429a      	cmp	r2, r3
 800d3d6:	bfbe      	ittt	lt
 800d3d8:	460b      	movlt	r3, r1
 800d3da:	4625      	movlt	r5, r4
 800d3dc:	461c      	movlt	r4, r3
 800d3de:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800d3e2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d3e6:	68ab      	ldr	r3, [r5, #8]
 800d3e8:	6869      	ldr	r1, [r5, #4]
 800d3ea:	eb0a 0709 	add.w	r7, sl, r9
 800d3ee:	42bb      	cmp	r3, r7
 800d3f0:	b085      	sub	sp, #20
 800d3f2:	bfb8      	it	lt
 800d3f4:	3101      	addlt	r1, #1
 800d3f6:	f7ff fed7 	bl	800d1a8 <_Balloc>
 800d3fa:	b930      	cbnz	r0, 800d40a <__multiply+0x42>
 800d3fc:	4602      	mov	r2, r0
 800d3fe:	f240 115d 	movw	r1, #349	; 0x15d
 800d402:	4b41      	ldr	r3, [pc, #260]	; (800d508 <__multiply+0x140>)
 800d404:	4841      	ldr	r0, [pc, #260]	; (800d50c <__multiply+0x144>)
 800d406:	f000 fe29 	bl	800e05c <__assert_func>
 800d40a:	f100 0614 	add.w	r6, r0, #20
 800d40e:	4633      	mov	r3, r6
 800d410:	2200      	movs	r2, #0
 800d412:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800d416:	4543      	cmp	r3, r8
 800d418:	d31e      	bcc.n	800d458 <__multiply+0x90>
 800d41a:	f105 0c14 	add.w	ip, r5, #20
 800d41e:	f104 0314 	add.w	r3, r4, #20
 800d422:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800d426:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800d42a:	9202      	str	r2, [sp, #8]
 800d42c:	ebac 0205 	sub.w	r2, ip, r5
 800d430:	3a15      	subs	r2, #21
 800d432:	f022 0203 	bic.w	r2, r2, #3
 800d436:	3204      	adds	r2, #4
 800d438:	f105 0115 	add.w	r1, r5, #21
 800d43c:	458c      	cmp	ip, r1
 800d43e:	bf38      	it	cc
 800d440:	2204      	movcc	r2, #4
 800d442:	9201      	str	r2, [sp, #4]
 800d444:	9a02      	ldr	r2, [sp, #8]
 800d446:	9303      	str	r3, [sp, #12]
 800d448:	429a      	cmp	r2, r3
 800d44a:	d808      	bhi.n	800d45e <__multiply+0x96>
 800d44c:	2f00      	cmp	r7, #0
 800d44e:	dc55      	bgt.n	800d4fc <__multiply+0x134>
 800d450:	6107      	str	r7, [r0, #16]
 800d452:	b005      	add	sp, #20
 800d454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d458:	f843 2b04 	str.w	r2, [r3], #4
 800d45c:	e7db      	b.n	800d416 <__multiply+0x4e>
 800d45e:	f8b3 a000 	ldrh.w	sl, [r3]
 800d462:	f1ba 0f00 	cmp.w	sl, #0
 800d466:	d020      	beq.n	800d4aa <__multiply+0xe2>
 800d468:	46b1      	mov	r9, r6
 800d46a:	2200      	movs	r2, #0
 800d46c:	f105 0e14 	add.w	lr, r5, #20
 800d470:	f85e 4b04 	ldr.w	r4, [lr], #4
 800d474:	f8d9 b000 	ldr.w	fp, [r9]
 800d478:	b2a1      	uxth	r1, r4
 800d47a:	fa1f fb8b 	uxth.w	fp, fp
 800d47e:	fb0a b101 	mla	r1, sl, r1, fp
 800d482:	4411      	add	r1, r2
 800d484:	f8d9 2000 	ldr.w	r2, [r9]
 800d488:	0c24      	lsrs	r4, r4, #16
 800d48a:	0c12      	lsrs	r2, r2, #16
 800d48c:	fb0a 2404 	mla	r4, sl, r4, r2
 800d490:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800d494:	b289      	uxth	r1, r1
 800d496:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800d49a:	45f4      	cmp	ip, lr
 800d49c:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800d4a0:	f849 1b04 	str.w	r1, [r9], #4
 800d4a4:	d8e4      	bhi.n	800d470 <__multiply+0xa8>
 800d4a6:	9901      	ldr	r1, [sp, #4]
 800d4a8:	5072      	str	r2, [r6, r1]
 800d4aa:	9a03      	ldr	r2, [sp, #12]
 800d4ac:	3304      	adds	r3, #4
 800d4ae:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d4b2:	f1b9 0f00 	cmp.w	r9, #0
 800d4b6:	d01f      	beq.n	800d4f8 <__multiply+0x130>
 800d4b8:	46b6      	mov	lr, r6
 800d4ba:	f04f 0a00 	mov.w	sl, #0
 800d4be:	6834      	ldr	r4, [r6, #0]
 800d4c0:	f105 0114 	add.w	r1, r5, #20
 800d4c4:	880a      	ldrh	r2, [r1, #0]
 800d4c6:	f8be b002 	ldrh.w	fp, [lr, #2]
 800d4ca:	b2a4      	uxth	r4, r4
 800d4cc:	fb09 b202 	mla	r2, r9, r2, fp
 800d4d0:	4492      	add	sl, r2
 800d4d2:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800d4d6:	f84e 4b04 	str.w	r4, [lr], #4
 800d4da:	f851 4b04 	ldr.w	r4, [r1], #4
 800d4de:	f8be 2000 	ldrh.w	r2, [lr]
 800d4e2:	0c24      	lsrs	r4, r4, #16
 800d4e4:	fb09 2404 	mla	r4, r9, r4, r2
 800d4e8:	458c      	cmp	ip, r1
 800d4ea:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800d4ee:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d4f2:	d8e7      	bhi.n	800d4c4 <__multiply+0xfc>
 800d4f4:	9a01      	ldr	r2, [sp, #4]
 800d4f6:	50b4      	str	r4, [r6, r2]
 800d4f8:	3604      	adds	r6, #4
 800d4fa:	e7a3      	b.n	800d444 <__multiply+0x7c>
 800d4fc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d500:	2b00      	cmp	r3, #0
 800d502:	d1a5      	bne.n	800d450 <__multiply+0x88>
 800d504:	3f01      	subs	r7, #1
 800d506:	e7a1      	b.n	800d44c <__multiply+0x84>
 800d508:	0800f79c 	.word	0x0800f79c
 800d50c:	0800f810 	.word	0x0800f810

0800d510 <__pow5mult>:
 800d510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d514:	4615      	mov	r5, r2
 800d516:	f012 0203 	ands.w	r2, r2, #3
 800d51a:	4606      	mov	r6, r0
 800d51c:	460f      	mov	r7, r1
 800d51e:	d007      	beq.n	800d530 <__pow5mult+0x20>
 800d520:	4c25      	ldr	r4, [pc, #148]	; (800d5b8 <__pow5mult+0xa8>)
 800d522:	3a01      	subs	r2, #1
 800d524:	2300      	movs	r3, #0
 800d526:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d52a:	f7ff fe9f 	bl	800d26c <__multadd>
 800d52e:	4607      	mov	r7, r0
 800d530:	10ad      	asrs	r5, r5, #2
 800d532:	d03d      	beq.n	800d5b0 <__pow5mult+0xa0>
 800d534:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d536:	b97c      	cbnz	r4, 800d558 <__pow5mult+0x48>
 800d538:	2010      	movs	r0, #16
 800d53a:	f7fe f843 	bl	800b5c4 <malloc>
 800d53e:	4602      	mov	r2, r0
 800d540:	6270      	str	r0, [r6, #36]	; 0x24
 800d542:	b928      	cbnz	r0, 800d550 <__pow5mult+0x40>
 800d544:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d548:	4b1c      	ldr	r3, [pc, #112]	; (800d5bc <__pow5mult+0xac>)
 800d54a:	481d      	ldr	r0, [pc, #116]	; (800d5c0 <__pow5mult+0xb0>)
 800d54c:	f000 fd86 	bl	800e05c <__assert_func>
 800d550:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d554:	6004      	str	r4, [r0, #0]
 800d556:	60c4      	str	r4, [r0, #12]
 800d558:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d55c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d560:	b94c      	cbnz	r4, 800d576 <__pow5mult+0x66>
 800d562:	f240 2171 	movw	r1, #625	; 0x271
 800d566:	4630      	mov	r0, r6
 800d568:	f7ff ff18 	bl	800d39c <__i2b>
 800d56c:	2300      	movs	r3, #0
 800d56e:	4604      	mov	r4, r0
 800d570:	f8c8 0008 	str.w	r0, [r8, #8]
 800d574:	6003      	str	r3, [r0, #0]
 800d576:	f04f 0900 	mov.w	r9, #0
 800d57a:	07eb      	lsls	r3, r5, #31
 800d57c:	d50a      	bpl.n	800d594 <__pow5mult+0x84>
 800d57e:	4639      	mov	r1, r7
 800d580:	4622      	mov	r2, r4
 800d582:	4630      	mov	r0, r6
 800d584:	f7ff ff20 	bl	800d3c8 <__multiply>
 800d588:	4680      	mov	r8, r0
 800d58a:	4639      	mov	r1, r7
 800d58c:	4630      	mov	r0, r6
 800d58e:	f7ff fe4b 	bl	800d228 <_Bfree>
 800d592:	4647      	mov	r7, r8
 800d594:	106d      	asrs	r5, r5, #1
 800d596:	d00b      	beq.n	800d5b0 <__pow5mult+0xa0>
 800d598:	6820      	ldr	r0, [r4, #0]
 800d59a:	b938      	cbnz	r0, 800d5ac <__pow5mult+0x9c>
 800d59c:	4622      	mov	r2, r4
 800d59e:	4621      	mov	r1, r4
 800d5a0:	4630      	mov	r0, r6
 800d5a2:	f7ff ff11 	bl	800d3c8 <__multiply>
 800d5a6:	6020      	str	r0, [r4, #0]
 800d5a8:	f8c0 9000 	str.w	r9, [r0]
 800d5ac:	4604      	mov	r4, r0
 800d5ae:	e7e4      	b.n	800d57a <__pow5mult+0x6a>
 800d5b0:	4638      	mov	r0, r7
 800d5b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d5b6:	bf00      	nop
 800d5b8:	0800f960 	.word	0x0800f960
 800d5bc:	0800f726 	.word	0x0800f726
 800d5c0:	0800f810 	.word	0x0800f810

0800d5c4 <__lshift>:
 800d5c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d5c8:	460c      	mov	r4, r1
 800d5ca:	4607      	mov	r7, r0
 800d5cc:	4691      	mov	r9, r2
 800d5ce:	6923      	ldr	r3, [r4, #16]
 800d5d0:	6849      	ldr	r1, [r1, #4]
 800d5d2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d5d6:	68a3      	ldr	r3, [r4, #8]
 800d5d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d5dc:	f108 0601 	add.w	r6, r8, #1
 800d5e0:	42b3      	cmp	r3, r6
 800d5e2:	db0b      	blt.n	800d5fc <__lshift+0x38>
 800d5e4:	4638      	mov	r0, r7
 800d5e6:	f7ff fddf 	bl	800d1a8 <_Balloc>
 800d5ea:	4605      	mov	r5, r0
 800d5ec:	b948      	cbnz	r0, 800d602 <__lshift+0x3e>
 800d5ee:	4602      	mov	r2, r0
 800d5f0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d5f4:	4b27      	ldr	r3, [pc, #156]	; (800d694 <__lshift+0xd0>)
 800d5f6:	4828      	ldr	r0, [pc, #160]	; (800d698 <__lshift+0xd4>)
 800d5f8:	f000 fd30 	bl	800e05c <__assert_func>
 800d5fc:	3101      	adds	r1, #1
 800d5fe:	005b      	lsls	r3, r3, #1
 800d600:	e7ee      	b.n	800d5e0 <__lshift+0x1c>
 800d602:	2300      	movs	r3, #0
 800d604:	f100 0114 	add.w	r1, r0, #20
 800d608:	f100 0210 	add.w	r2, r0, #16
 800d60c:	4618      	mov	r0, r3
 800d60e:	4553      	cmp	r3, sl
 800d610:	db33      	blt.n	800d67a <__lshift+0xb6>
 800d612:	6920      	ldr	r0, [r4, #16]
 800d614:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d618:	f104 0314 	add.w	r3, r4, #20
 800d61c:	f019 091f 	ands.w	r9, r9, #31
 800d620:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d624:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d628:	d02b      	beq.n	800d682 <__lshift+0xbe>
 800d62a:	468a      	mov	sl, r1
 800d62c:	2200      	movs	r2, #0
 800d62e:	f1c9 0e20 	rsb	lr, r9, #32
 800d632:	6818      	ldr	r0, [r3, #0]
 800d634:	fa00 f009 	lsl.w	r0, r0, r9
 800d638:	4302      	orrs	r2, r0
 800d63a:	f84a 2b04 	str.w	r2, [sl], #4
 800d63e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d642:	459c      	cmp	ip, r3
 800d644:	fa22 f20e 	lsr.w	r2, r2, lr
 800d648:	d8f3      	bhi.n	800d632 <__lshift+0x6e>
 800d64a:	ebac 0304 	sub.w	r3, ip, r4
 800d64e:	3b15      	subs	r3, #21
 800d650:	f023 0303 	bic.w	r3, r3, #3
 800d654:	3304      	adds	r3, #4
 800d656:	f104 0015 	add.w	r0, r4, #21
 800d65a:	4584      	cmp	ip, r0
 800d65c:	bf38      	it	cc
 800d65e:	2304      	movcc	r3, #4
 800d660:	50ca      	str	r2, [r1, r3]
 800d662:	b10a      	cbz	r2, 800d668 <__lshift+0xa4>
 800d664:	f108 0602 	add.w	r6, r8, #2
 800d668:	3e01      	subs	r6, #1
 800d66a:	4638      	mov	r0, r7
 800d66c:	4621      	mov	r1, r4
 800d66e:	612e      	str	r6, [r5, #16]
 800d670:	f7ff fdda 	bl	800d228 <_Bfree>
 800d674:	4628      	mov	r0, r5
 800d676:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d67a:	f842 0f04 	str.w	r0, [r2, #4]!
 800d67e:	3301      	adds	r3, #1
 800d680:	e7c5      	b.n	800d60e <__lshift+0x4a>
 800d682:	3904      	subs	r1, #4
 800d684:	f853 2b04 	ldr.w	r2, [r3], #4
 800d688:	459c      	cmp	ip, r3
 800d68a:	f841 2f04 	str.w	r2, [r1, #4]!
 800d68e:	d8f9      	bhi.n	800d684 <__lshift+0xc0>
 800d690:	e7ea      	b.n	800d668 <__lshift+0xa4>
 800d692:	bf00      	nop
 800d694:	0800f79c 	.word	0x0800f79c
 800d698:	0800f810 	.word	0x0800f810

0800d69c <__mcmp>:
 800d69c:	4603      	mov	r3, r0
 800d69e:	690a      	ldr	r2, [r1, #16]
 800d6a0:	6900      	ldr	r0, [r0, #16]
 800d6a2:	b530      	push	{r4, r5, lr}
 800d6a4:	1a80      	subs	r0, r0, r2
 800d6a6:	d10d      	bne.n	800d6c4 <__mcmp+0x28>
 800d6a8:	3314      	adds	r3, #20
 800d6aa:	3114      	adds	r1, #20
 800d6ac:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d6b0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d6b4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d6b8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d6bc:	4295      	cmp	r5, r2
 800d6be:	d002      	beq.n	800d6c6 <__mcmp+0x2a>
 800d6c0:	d304      	bcc.n	800d6cc <__mcmp+0x30>
 800d6c2:	2001      	movs	r0, #1
 800d6c4:	bd30      	pop	{r4, r5, pc}
 800d6c6:	42a3      	cmp	r3, r4
 800d6c8:	d3f4      	bcc.n	800d6b4 <__mcmp+0x18>
 800d6ca:	e7fb      	b.n	800d6c4 <__mcmp+0x28>
 800d6cc:	f04f 30ff 	mov.w	r0, #4294967295
 800d6d0:	e7f8      	b.n	800d6c4 <__mcmp+0x28>
	...

0800d6d4 <__mdiff>:
 800d6d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6d8:	460c      	mov	r4, r1
 800d6da:	4606      	mov	r6, r0
 800d6dc:	4611      	mov	r1, r2
 800d6de:	4620      	mov	r0, r4
 800d6e0:	4692      	mov	sl, r2
 800d6e2:	f7ff ffdb 	bl	800d69c <__mcmp>
 800d6e6:	1e05      	subs	r5, r0, #0
 800d6e8:	d111      	bne.n	800d70e <__mdiff+0x3a>
 800d6ea:	4629      	mov	r1, r5
 800d6ec:	4630      	mov	r0, r6
 800d6ee:	f7ff fd5b 	bl	800d1a8 <_Balloc>
 800d6f2:	4602      	mov	r2, r0
 800d6f4:	b928      	cbnz	r0, 800d702 <__mdiff+0x2e>
 800d6f6:	f240 2132 	movw	r1, #562	; 0x232
 800d6fa:	4b3c      	ldr	r3, [pc, #240]	; (800d7ec <__mdiff+0x118>)
 800d6fc:	483c      	ldr	r0, [pc, #240]	; (800d7f0 <__mdiff+0x11c>)
 800d6fe:	f000 fcad 	bl	800e05c <__assert_func>
 800d702:	2301      	movs	r3, #1
 800d704:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d708:	4610      	mov	r0, r2
 800d70a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d70e:	bfa4      	itt	ge
 800d710:	4653      	movge	r3, sl
 800d712:	46a2      	movge	sl, r4
 800d714:	4630      	mov	r0, r6
 800d716:	f8da 1004 	ldr.w	r1, [sl, #4]
 800d71a:	bfa6      	itte	ge
 800d71c:	461c      	movge	r4, r3
 800d71e:	2500      	movge	r5, #0
 800d720:	2501      	movlt	r5, #1
 800d722:	f7ff fd41 	bl	800d1a8 <_Balloc>
 800d726:	4602      	mov	r2, r0
 800d728:	b918      	cbnz	r0, 800d732 <__mdiff+0x5e>
 800d72a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d72e:	4b2f      	ldr	r3, [pc, #188]	; (800d7ec <__mdiff+0x118>)
 800d730:	e7e4      	b.n	800d6fc <__mdiff+0x28>
 800d732:	f100 0814 	add.w	r8, r0, #20
 800d736:	f8da 7010 	ldr.w	r7, [sl, #16]
 800d73a:	60c5      	str	r5, [r0, #12]
 800d73c:	f04f 0c00 	mov.w	ip, #0
 800d740:	f10a 0514 	add.w	r5, sl, #20
 800d744:	f10a 0010 	add.w	r0, sl, #16
 800d748:	46c2      	mov	sl, r8
 800d74a:	6926      	ldr	r6, [r4, #16]
 800d74c:	f104 0914 	add.w	r9, r4, #20
 800d750:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800d754:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d758:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800d75c:	f859 3b04 	ldr.w	r3, [r9], #4
 800d760:	fa1f f18b 	uxth.w	r1, fp
 800d764:	4461      	add	r1, ip
 800d766:	fa1f fc83 	uxth.w	ip, r3
 800d76a:	0c1b      	lsrs	r3, r3, #16
 800d76c:	eba1 010c 	sub.w	r1, r1, ip
 800d770:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d774:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800d778:	b289      	uxth	r1, r1
 800d77a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800d77e:	454e      	cmp	r6, r9
 800d780:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800d784:	f84a 3b04 	str.w	r3, [sl], #4
 800d788:	d8e6      	bhi.n	800d758 <__mdiff+0x84>
 800d78a:	1b33      	subs	r3, r6, r4
 800d78c:	3b15      	subs	r3, #21
 800d78e:	f023 0303 	bic.w	r3, r3, #3
 800d792:	3415      	adds	r4, #21
 800d794:	3304      	adds	r3, #4
 800d796:	42a6      	cmp	r6, r4
 800d798:	bf38      	it	cc
 800d79a:	2304      	movcc	r3, #4
 800d79c:	441d      	add	r5, r3
 800d79e:	4443      	add	r3, r8
 800d7a0:	461e      	mov	r6, r3
 800d7a2:	462c      	mov	r4, r5
 800d7a4:	4574      	cmp	r4, lr
 800d7a6:	d30e      	bcc.n	800d7c6 <__mdiff+0xf2>
 800d7a8:	f10e 0103 	add.w	r1, lr, #3
 800d7ac:	1b49      	subs	r1, r1, r5
 800d7ae:	f021 0103 	bic.w	r1, r1, #3
 800d7b2:	3d03      	subs	r5, #3
 800d7b4:	45ae      	cmp	lr, r5
 800d7b6:	bf38      	it	cc
 800d7b8:	2100      	movcc	r1, #0
 800d7ba:	4419      	add	r1, r3
 800d7bc:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800d7c0:	b18b      	cbz	r3, 800d7e6 <__mdiff+0x112>
 800d7c2:	6117      	str	r7, [r2, #16]
 800d7c4:	e7a0      	b.n	800d708 <__mdiff+0x34>
 800d7c6:	f854 8b04 	ldr.w	r8, [r4], #4
 800d7ca:	fa1f f188 	uxth.w	r1, r8
 800d7ce:	4461      	add	r1, ip
 800d7d0:	1408      	asrs	r0, r1, #16
 800d7d2:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800d7d6:	b289      	uxth	r1, r1
 800d7d8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d7dc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d7e0:	f846 1b04 	str.w	r1, [r6], #4
 800d7e4:	e7de      	b.n	800d7a4 <__mdiff+0xd0>
 800d7e6:	3f01      	subs	r7, #1
 800d7e8:	e7e8      	b.n	800d7bc <__mdiff+0xe8>
 800d7ea:	bf00      	nop
 800d7ec:	0800f79c 	.word	0x0800f79c
 800d7f0:	0800f810 	.word	0x0800f810

0800d7f4 <__d2b>:
 800d7f4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800d7f8:	2101      	movs	r1, #1
 800d7fa:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800d7fe:	4690      	mov	r8, r2
 800d800:	461d      	mov	r5, r3
 800d802:	f7ff fcd1 	bl	800d1a8 <_Balloc>
 800d806:	4604      	mov	r4, r0
 800d808:	b930      	cbnz	r0, 800d818 <__d2b+0x24>
 800d80a:	4602      	mov	r2, r0
 800d80c:	f240 310a 	movw	r1, #778	; 0x30a
 800d810:	4b24      	ldr	r3, [pc, #144]	; (800d8a4 <__d2b+0xb0>)
 800d812:	4825      	ldr	r0, [pc, #148]	; (800d8a8 <__d2b+0xb4>)
 800d814:	f000 fc22 	bl	800e05c <__assert_func>
 800d818:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800d81c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800d820:	bb2d      	cbnz	r5, 800d86e <__d2b+0x7a>
 800d822:	9301      	str	r3, [sp, #4]
 800d824:	f1b8 0300 	subs.w	r3, r8, #0
 800d828:	d026      	beq.n	800d878 <__d2b+0x84>
 800d82a:	4668      	mov	r0, sp
 800d82c:	9300      	str	r3, [sp, #0]
 800d82e:	f7ff fd87 	bl	800d340 <__lo0bits>
 800d832:	9900      	ldr	r1, [sp, #0]
 800d834:	b1f0      	cbz	r0, 800d874 <__d2b+0x80>
 800d836:	9a01      	ldr	r2, [sp, #4]
 800d838:	f1c0 0320 	rsb	r3, r0, #32
 800d83c:	fa02 f303 	lsl.w	r3, r2, r3
 800d840:	430b      	orrs	r3, r1
 800d842:	40c2      	lsrs	r2, r0
 800d844:	6163      	str	r3, [r4, #20]
 800d846:	9201      	str	r2, [sp, #4]
 800d848:	9b01      	ldr	r3, [sp, #4]
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	bf14      	ite	ne
 800d84e:	2102      	movne	r1, #2
 800d850:	2101      	moveq	r1, #1
 800d852:	61a3      	str	r3, [r4, #24]
 800d854:	6121      	str	r1, [r4, #16]
 800d856:	b1c5      	cbz	r5, 800d88a <__d2b+0x96>
 800d858:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d85c:	4405      	add	r5, r0
 800d85e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d862:	603d      	str	r5, [r7, #0]
 800d864:	6030      	str	r0, [r6, #0]
 800d866:	4620      	mov	r0, r4
 800d868:	b002      	add	sp, #8
 800d86a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d86e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d872:	e7d6      	b.n	800d822 <__d2b+0x2e>
 800d874:	6161      	str	r1, [r4, #20]
 800d876:	e7e7      	b.n	800d848 <__d2b+0x54>
 800d878:	a801      	add	r0, sp, #4
 800d87a:	f7ff fd61 	bl	800d340 <__lo0bits>
 800d87e:	2101      	movs	r1, #1
 800d880:	9b01      	ldr	r3, [sp, #4]
 800d882:	6121      	str	r1, [r4, #16]
 800d884:	6163      	str	r3, [r4, #20]
 800d886:	3020      	adds	r0, #32
 800d888:	e7e5      	b.n	800d856 <__d2b+0x62>
 800d88a:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800d88e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d892:	6038      	str	r0, [r7, #0]
 800d894:	6918      	ldr	r0, [r3, #16]
 800d896:	f7ff fd33 	bl	800d300 <__hi0bits>
 800d89a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800d89e:	6031      	str	r1, [r6, #0]
 800d8a0:	e7e1      	b.n	800d866 <__d2b+0x72>
 800d8a2:	bf00      	nop
 800d8a4:	0800f79c 	.word	0x0800f79c
 800d8a8:	0800f810 	.word	0x0800f810

0800d8ac <_calloc_r>:
 800d8ac:	b538      	push	{r3, r4, r5, lr}
 800d8ae:	fb02 f501 	mul.w	r5, r2, r1
 800d8b2:	4629      	mov	r1, r5
 800d8b4:	f7fd feea 	bl	800b68c <_malloc_r>
 800d8b8:	4604      	mov	r4, r0
 800d8ba:	b118      	cbz	r0, 800d8c4 <_calloc_r+0x18>
 800d8bc:	462a      	mov	r2, r5
 800d8be:	2100      	movs	r1, #0
 800d8c0:	f7fd fe90 	bl	800b5e4 <memset>
 800d8c4:	4620      	mov	r0, r4
 800d8c6:	bd38      	pop	{r3, r4, r5, pc}

0800d8c8 <__ssputs_r>:
 800d8c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d8cc:	688e      	ldr	r6, [r1, #8]
 800d8ce:	4682      	mov	sl, r0
 800d8d0:	429e      	cmp	r6, r3
 800d8d2:	460c      	mov	r4, r1
 800d8d4:	4690      	mov	r8, r2
 800d8d6:	461f      	mov	r7, r3
 800d8d8:	d838      	bhi.n	800d94c <__ssputs_r+0x84>
 800d8da:	898a      	ldrh	r2, [r1, #12]
 800d8dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d8e0:	d032      	beq.n	800d948 <__ssputs_r+0x80>
 800d8e2:	6825      	ldr	r5, [r4, #0]
 800d8e4:	6909      	ldr	r1, [r1, #16]
 800d8e6:	3301      	adds	r3, #1
 800d8e8:	eba5 0901 	sub.w	r9, r5, r1
 800d8ec:	6965      	ldr	r5, [r4, #20]
 800d8ee:	444b      	add	r3, r9
 800d8f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d8f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d8f8:	106d      	asrs	r5, r5, #1
 800d8fa:	429d      	cmp	r5, r3
 800d8fc:	bf38      	it	cc
 800d8fe:	461d      	movcc	r5, r3
 800d900:	0553      	lsls	r3, r2, #21
 800d902:	d531      	bpl.n	800d968 <__ssputs_r+0xa0>
 800d904:	4629      	mov	r1, r5
 800d906:	f7fd fec1 	bl	800b68c <_malloc_r>
 800d90a:	4606      	mov	r6, r0
 800d90c:	b950      	cbnz	r0, 800d924 <__ssputs_r+0x5c>
 800d90e:	230c      	movs	r3, #12
 800d910:	f04f 30ff 	mov.w	r0, #4294967295
 800d914:	f8ca 3000 	str.w	r3, [sl]
 800d918:	89a3      	ldrh	r3, [r4, #12]
 800d91a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d91e:	81a3      	strh	r3, [r4, #12]
 800d920:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d924:	464a      	mov	r2, r9
 800d926:	6921      	ldr	r1, [r4, #16]
 800d928:	f7ff fc23 	bl	800d172 <memcpy>
 800d92c:	89a3      	ldrh	r3, [r4, #12]
 800d92e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d932:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d936:	81a3      	strh	r3, [r4, #12]
 800d938:	6126      	str	r6, [r4, #16]
 800d93a:	444e      	add	r6, r9
 800d93c:	6026      	str	r6, [r4, #0]
 800d93e:	463e      	mov	r6, r7
 800d940:	6165      	str	r5, [r4, #20]
 800d942:	eba5 0509 	sub.w	r5, r5, r9
 800d946:	60a5      	str	r5, [r4, #8]
 800d948:	42be      	cmp	r6, r7
 800d94a:	d900      	bls.n	800d94e <__ssputs_r+0x86>
 800d94c:	463e      	mov	r6, r7
 800d94e:	4632      	mov	r2, r6
 800d950:	4641      	mov	r1, r8
 800d952:	6820      	ldr	r0, [r4, #0]
 800d954:	f000 fd0c 	bl	800e370 <memmove>
 800d958:	68a3      	ldr	r3, [r4, #8]
 800d95a:	6822      	ldr	r2, [r4, #0]
 800d95c:	1b9b      	subs	r3, r3, r6
 800d95e:	4432      	add	r2, r6
 800d960:	2000      	movs	r0, #0
 800d962:	60a3      	str	r3, [r4, #8]
 800d964:	6022      	str	r2, [r4, #0]
 800d966:	e7db      	b.n	800d920 <__ssputs_r+0x58>
 800d968:	462a      	mov	r2, r5
 800d96a:	f000 fd1b 	bl	800e3a4 <_realloc_r>
 800d96e:	4606      	mov	r6, r0
 800d970:	2800      	cmp	r0, #0
 800d972:	d1e1      	bne.n	800d938 <__ssputs_r+0x70>
 800d974:	4650      	mov	r0, sl
 800d976:	6921      	ldr	r1, [r4, #16]
 800d978:	f7fd fe3c 	bl	800b5f4 <_free_r>
 800d97c:	e7c7      	b.n	800d90e <__ssputs_r+0x46>
	...

0800d980 <_svfiprintf_r>:
 800d980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d984:	4698      	mov	r8, r3
 800d986:	898b      	ldrh	r3, [r1, #12]
 800d988:	4607      	mov	r7, r0
 800d98a:	061b      	lsls	r3, r3, #24
 800d98c:	460d      	mov	r5, r1
 800d98e:	4614      	mov	r4, r2
 800d990:	b09d      	sub	sp, #116	; 0x74
 800d992:	d50e      	bpl.n	800d9b2 <_svfiprintf_r+0x32>
 800d994:	690b      	ldr	r3, [r1, #16]
 800d996:	b963      	cbnz	r3, 800d9b2 <_svfiprintf_r+0x32>
 800d998:	2140      	movs	r1, #64	; 0x40
 800d99a:	f7fd fe77 	bl	800b68c <_malloc_r>
 800d99e:	6028      	str	r0, [r5, #0]
 800d9a0:	6128      	str	r0, [r5, #16]
 800d9a2:	b920      	cbnz	r0, 800d9ae <_svfiprintf_r+0x2e>
 800d9a4:	230c      	movs	r3, #12
 800d9a6:	603b      	str	r3, [r7, #0]
 800d9a8:	f04f 30ff 	mov.w	r0, #4294967295
 800d9ac:	e0d1      	b.n	800db52 <_svfiprintf_r+0x1d2>
 800d9ae:	2340      	movs	r3, #64	; 0x40
 800d9b0:	616b      	str	r3, [r5, #20]
 800d9b2:	2300      	movs	r3, #0
 800d9b4:	9309      	str	r3, [sp, #36]	; 0x24
 800d9b6:	2320      	movs	r3, #32
 800d9b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d9bc:	2330      	movs	r3, #48	; 0x30
 800d9be:	f04f 0901 	mov.w	r9, #1
 800d9c2:	f8cd 800c 	str.w	r8, [sp, #12]
 800d9c6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800db6c <_svfiprintf_r+0x1ec>
 800d9ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d9ce:	4623      	mov	r3, r4
 800d9d0:	469a      	mov	sl, r3
 800d9d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d9d6:	b10a      	cbz	r2, 800d9dc <_svfiprintf_r+0x5c>
 800d9d8:	2a25      	cmp	r2, #37	; 0x25
 800d9da:	d1f9      	bne.n	800d9d0 <_svfiprintf_r+0x50>
 800d9dc:	ebba 0b04 	subs.w	fp, sl, r4
 800d9e0:	d00b      	beq.n	800d9fa <_svfiprintf_r+0x7a>
 800d9e2:	465b      	mov	r3, fp
 800d9e4:	4622      	mov	r2, r4
 800d9e6:	4629      	mov	r1, r5
 800d9e8:	4638      	mov	r0, r7
 800d9ea:	f7ff ff6d 	bl	800d8c8 <__ssputs_r>
 800d9ee:	3001      	adds	r0, #1
 800d9f0:	f000 80aa 	beq.w	800db48 <_svfiprintf_r+0x1c8>
 800d9f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d9f6:	445a      	add	r2, fp
 800d9f8:	9209      	str	r2, [sp, #36]	; 0x24
 800d9fa:	f89a 3000 	ldrb.w	r3, [sl]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	f000 80a2 	beq.w	800db48 <_svfiprintf_r+0x1c8>
 800da04:	2300      	movs	r3, #0
 800da06:	f04f 32ff 	mov.w	r2, #4294967295
 800da0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800da0e:	f10a 0a01 	add.w	sl, sl, #1
 800da12:	9304      	str	r3, [sp, #16]
 800da14:	9307      	str	r3, [sp, #28]
 800da16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800da1a:	931a      	str	r3, [sp, #104]	; 0x68
 800da1c:	4654      	mov	r4, sl
 800da1e:	2205      	movs	r2, #5
 800da20:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da24:	4851      	ldr	r0, [pc, #324]	; (800db6c <_svfiprintf_r+0x1ec>)
 800da26:	f7ff fb96 	bl	800d156 <memchr>
 800da2a:	9a04      	ldr	r2, [sp, #16]
 800da2c:	b9d8      	cbnz	r0, 800da66 <_svfiprintf_r+0xe6>
 800da2e:	06d0      	lsls	r0, r2, #27
 800da30:	bf44      	itt	mi
 800da32:	2320      	movmi	r3, #32
 800da34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800da38:	0711      	lsls	r1, r2, #28
 800da3a:	bf44      	itt	mi
 800da3c:	232b      	movmi	r3, #43	; 0x2b
 800da3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800da42:	f89a 3000 	ldrb.w	r3, [sl]
 800da46:	2b2a      	cmp	r3, #42	; 0x2a
 800da48:	d015      	beq.n	800da76 <_svfiprintf_r+0xf6>
 800da4a:	4654      	mov	r4, sl
 800da4c:	2000      	movs	r0, #0
 800da4e:	f04f 0c0a 	mov.w	ip, #10
 800da52:	9a07      	ldr	r2, [sp, #28]
 800da54:	4621      	mov	r1, r4
 800da56:	f811 3b01 	ldrb.w	r3, [r1], #1
 800da5a:	3b30      	subs	r3, #48	; 0x30
 800da5c:	2b09      	cmp	r3, #9
 800da5e:	d94e      	bls.n	800dafe <_svfiprintf_r+0x17e>
 800da60:	b1b0      	cbz	r0, 800da90 <_svfiprintf_r+0x110>
 800da62:	9207      	str	r2, [sp, #28]
 800da64:	e014      	b.n	800da90 <_svfiprintf_r+0x110>
 800da66:	eba0 0308 	sub.w	r3, r0, r8
 800da6a:	fa09 f303 	lsl.w	r3, r9, r3
 800da6e:	4313      	orrs	r3, r2
 800da70:	46a2      	mov	sl, r4
 800da72:	9304      	str	r3, [sp, #16]
 800da74:	e7d2      	b.n	800da1c <_svfiprintf_r+0x9c>
 800da76:	9b03      	ldr	r3, [sp, #12]
 800da78:	1d19      	adds	r1, r3, #4
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	9103      	str	r1, [sp, #12]
 800da7e:	2b00      	cmp	r3, #0
 800da80:	bfbb      	ittet	lt
 800da82:	425b      	neglt	r3, r3
 800da84:	f042 0202 	orrlt.w	r2, r2, #2
 800da88:	9307      	strge	r3, [sp, #28]
 800da8a:	9307      	strlt	r3, [sp, #28]
 800da8c:	bfb8      	it	lt
 800da8e:	9204      	strlt	r2, [sp, #16]
 800da90:	7823      	ldrb	r3, [r4, #0]
 800da92:	2b2e      	cmp	r3, #46	; 0x2e
 800da94:	d10c      	bne.n	800dab0 <_svfiprintf_r+0x130>
 800da96:	7863      	ldrb	r3, [r4, #1]
 800da98:	2b2a      	cmp	r3, #42	; 0x2a
 800da9a:	d135      	bne.n	800db08 <_svfiprintf_r+0x188>
 800da9c:	9b03      	ldr	r3, [sp, #12]
 800da9e:	3402      	adds	r4, #2
 800daa0:	1d1a      	adds	r2, r3, #4
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	9203      	str	r2, [sp, #12]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	bfb8      	it	lt
 800daaa:	f04f 33ff 	movlt.w	r3, #4294967295
 800daae:	9305      	str	r3, [sp, #20]
 800dab0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800db7c <_svfiprintf_r+0x1fc>
 800dab4:	2203      	movs	r2, #3
 800dab6:	4650      	mov	r0, sl
 800dab8:	7821      	ldrb	r1, [r4, #0]
 800daba:	f7ff fb4c 	bl	800d156 <memchr>
 800dabe:	b140      	cbz	r0, 800dad2 <_svfiprintf_r+0x152>
 800dac0:	2340      	movs	r3, #64	; 0x40
 800dac2:	eba0 000a 	sub.w	r0, r0, sl
 800dac6:	fa03 f000 	lsl.w	r0, r3, r0
 800daca:	9b04      	ldr	r3, [sp, #16]
 800dacc:	3401      	adds	r4, #1
 800dace:	4303      	orrs	r3, r0
 800dad0:	9304      	str	r3, [sp, #16]
 800dad2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dad6:	2206      	movs	r2, #6
 800dad8:	4825      	ldr	r0, [pc, #148]	; (800db70 <_svfiprintf_r+0x1f0>)
 800dada:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dade:	f7ff fb3a 	bl	800d156 <memchr>
 800dae2:	2800      	cmp	r0, #0
 800dae4:	d038      	beq.n	800db58 <_svfiprintf_r+0x1d8>
 800dae6:	4b23      	ldr	r3, [pc, #140]	; (800db74 <_svfiprintf_r+0x1f4>)
 800dae8:	bb1b      	cbnz	r3, 800db32 <_svfiprintf_r+0x1b2>
 800daea:	9b03      	ldr	r3, [sp, #12]
 800daec:	3307      	adds	r3, #7
 800daee:	f023 0307 	bic.w	r3, r3, #7
 800daf2:	3308      	adds	r3, #8
 800daf4:	9303      	str	r3, [sp, #12]
 800daf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800daf8:	4433      	add	r3, r6
 800dafa:	9309      	str	r3, [sp, #36]	; 0x24
 800dafc:	e767      	b.n	800d9ce <_svfiprintf_r+0x4e>
 800dafe:	460c      	mov	r4, r1
 800db00:	2001      	movs	r0, #1
 800db02:	fb0c 3202 	mla	r2, ip, r2, r3
 800db06:	e7a5      	b.n	800da54 <_svfiprintf_r+0xd4>
 800db08:	2300      	movs	r3, #0
 800db0a:	f04f 0c0a 	mov.w	ip, #10
 800db0e:	4619      	mov	r1, r3
 800db10:	3401      	adds	r4, #1
 800db12:	9305      	str	r3, [sp, #20]
 800db14:	4620      	mov	r0, r4
 800db16:	f810 2b01 	ldrb.w	r2, [r0], #1
 800db1a:	3a30      	subs	r2, #48	; 0x30
 800db1c:	2a09      	cmp	r2, #9
 800db1e:	d903      	bls.n	800db28 <_svfiprintf_r+0x1a8>
 800db20:	2b00      	cmp	r3, #0
 800db22:	d0c5      	beq.n	800dab0 <_svfiprintf_r+0x130>
 800db24:	9105      	str	r1, [sp, #20]
 800db26:	e7c3      	b.n	800dab0 <_svfiprintf_r+0x130>
 800db28:	4604      	mov	r4, r0
 800db2a:	2301      	movs	r3, #1
 800db2c:	fb0c 2101 	mla	r1, ip, r1, r2
 800db30:	e7f0      	b.n	800db14 <_svfiprintf_r+0x194>
 800db32:	ab03      	add	r3, sp, #12
 800db34:	9300      	str	r3, [sp, #0]
 800db36:	462a      	mov	r2, r5
 800db38:	4638      	mov	r0, r7
 800db3a:	4b0f      	ldr	r3, [pc, #60]	; (800db78 <_svfiprintf_r+0x1f8>)
 800db3c:	a904      	add	r1, sp, #16
 800db3e:	f7fd fe9d 	bl	800b87c <_printf_float>
 800db42:	1c42      	adds	r2, r0, #1
 800db44:	4606      	mov	r6, r0
 800db46:	d1d6      	bne.n	800daf6 <_svfiprintf_r+0x176>
 800db48:	89ab      	ldrh	r3, [r5, #12]
 800db4a:	065b      	lsls	r3, r3, #25
 800db4c:	f53f af2c 	bmi.w	800d9a8 <_svfiprintf_r+0x28>
 800db50:	9809      	ldr	r0, [sp, #36]	; 0x24
 800db52:	b01d      	add	sp, #116	; 0x74
 800db54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db58:	ab03      	add	r3, sp, #12
 800db5a:	9300      	str	r3, [sp, #0]
 800db5c:	462a      	mov	r2, r5
 800db5e:	4638      	mov	r0, r7
 800db60:	4b05      	ldr	r3, [pc, #20]	; (800db78 <_svfiprintf_r+0x1f8>)
 800db62:	a904      	add	r1, sp, #16
 800db64:	f7fe f926 	bl	800bdb4 <_printf_i>
 800db68:	e7eb      	b.n	800db42 <_svfiprintf_r+0x1c2>
 800db6a:	bf00      	nop
 800db6c:	0800f96c 	.word	0x0800f96c
 800db70:	0800f976 	.word	0x0800f976
 800db74:	0800b87d 	.word	0x0800b87d
 800db78:	0800d8c9 	.word	0x0800d8c9
 800db7c:	0800f972 	.word	0x0800f972

0800db80 <__sfputc_r>:
 800db80:	6893      	ldr	r3, [r2, #8]
 800db82:	b410      	push	{r4}
 800db84:	3b01      	subs	r3, #1
 800db86:	2b00      	cmp	r3, #0
 800db88:	6093      	str	r3, [r2, #8]
 800db8a:	da07      	bge.n	800db9c <__sfputc_r+0x1c>
 800db8c:	6994      	ldr	r4, [r2, #24]
 800db8e:	42a3      	cmp	r3, r4
 800db90:	db01      	blt.n	800db96 <__sfputc_r+0x16>
 800db92:	290a      	cmp	r1, #10
 800db94:	d102      	bne.n	800db9c <__sfputc_r+0x1c>
 800db96:	bc10      	pop	{r4}
 800db98:	f000 b98e 	b.w	800deb8 <__swbuf_r>
 800db9c:	6813      	ldr	r3, [r2, #0]
 800db9e:	1c58      	adds	r0, r3, #1
 800dba0:	6010      	str	r0, [r2, #0]
 800dba2:	7019      	strb	r1, [r3, #0]
 800dba4:	4608      	mov	r0, r1
 800dba6:	bc10      	pop	{r4}
 800dba8:	4770      	bx	lr

0800dbaa <__sfputs_r>:
 800dbaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbac:	4606      	mov	r6, r0
 800dbae:	460f      	mov	r7, r1
 800dbb0:	4614      	mov	r4, r2
 800dbb2:	18d5      	adds	r5, r2, r3
 800dbb4:	42ac      	cmp	r4, r5
 800dbb6:	d101      	bne.n	800dbbc <__sfputs_r+0x12>
 800dbb8:	2000      	movs	r0, #0
 800dbba:	e007      	b.n	800dbcc <__sfputs_r+0x22>
 800dbbc:	463a      	mov	r2, r7
 800dbbe:	4630      	mov	r0, r6
 800dbc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dbc4:	f7ff ffdc 	bl	800db80 <__sfputc_r>
 800dbc8:	1c43      	adds	r3, r0, #1
 800dbca:	d1f3      	bne.n	800dbb4 <__sfputs_r+0xa>
 800dbcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dbd0 <_vfiprintf_r>:
 800dbd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbd4:	460d      	mov	r5, r1
 800dbd6:	4614      	mov	r4, r2
 800dbd8:	4698      	mov	r8, r3
 800dbda:	4606      	mov	r6, r0
 800dbdc:	b09d      	sub	sp, #116	; 0x74
 800dbde:	b118      	cbz	r0, 800dbe8 <_vfiprintf_r+0x18>
 800dbe0:	6983      	ldr	r3, [r0, #24]
 800dbe2:	b90b      	cbnz	r3, 800dbe8 <_vfiprintf_r+0x18>
 800dbe4:	f7ff fa12 	bl	800d00c <__sinit>
 800dbe8:	4b89      	ldr	r3, [pc, #548]	; (800de10 <_vfiprintf_r+0x240>)
 800dbea:	429d      	cmp	r5, r3
 800dbec:	d11b      	bne.n	800dc26 <_vfiprintf_r+0x56>
 800dbee:	6875      	ldr	r5, [r6, #4]
 800dbf0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dbf2:	07d9      	lsls	r1, r3, #31
 800dbf4:	d405      	bmi.n	800dc02 <_vfiprintf_r+0x32>
 800dbf6:	89ab      	ldrh	r3, [r5, #12]
 800dbf8:	059a      	lsls	r2, r3, #22
 800dbfa:	d402      	bmi.n	800dc02 <_vfiprintf_r+0x32>
 800dbfc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dbfe:	f7ff faa8 	bl	800d152 <__retarget_lock_acquire_recursive>
 800dc02:	89ab      	ldrh	r3, [r5, #12]
 800dc04:	071b      	lsls	r3, r3, #28
 800dc06:	d501      	bpl.n	800dc0c <_vfiprintf_r+0x3c>
 800dc08:	692b      	ldr	r3, [r5, #16]
 800dc0a:	b9eb      	cbnz	r3, 800dc48 <_vfiprintf_r+0x78>
 800dc0c:	4629      	mov	r1, r5
 800dc0e:	4630      	mov	r0, r6
 800dc10:	f000 f9b6 	bl	800df80 <__swsetup_r>
 800dc14:	b1c0      	cbz	r0, 800dc48 <_vfiprintf_r+0x78>
 800dc16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dc18:	07dc      	lsls	r4, r3, #31
 800dc1a:	d50e      	bpl.n	800dc3a <_vfiprintf_r+0x6a>
 800dc1c:	f04f 30ff 	mov.w	r0, #4294967295
 800dc20:	b01d      	add	sp, #116	; 0x74
 800dc22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc26:	4b7b      	ldr	r3, [pc, #492]	; (800de14 <_vfiprintf_r+0x244>)
 800dc28:	429d      	cmp	r5, r3
 800dc2a:	d101      	bne.n	800dc30 <_vfiprintf_r+0x60>
 800dc2c:	68b5      	ldr	r5, [r6, #8]
 800dc2e:	e7df      	b.n	800dbf0 <_vfiprintf_r+0x20>
 800dc30:	4b79      	ldr	r3, [pc, #484]	; (800de18 <_vfiprintf_r+0x248>)
 800dc32:	429d      	cmp	r5, r3
 800dc34:	bf08      	it	eq
 800dc36:	68f5      	ldreq	r5, [r6, #12]
 800dc38:	e7da      	b.n	800dbf0 <_vfiprintf_r+0x20>
 800dc3a:	89ab      	ldrh	r3, [r5, #12]
 800dc3c:	0598      	lsls	r0, r3, #22
 800dc3e:	d4ed      	bmi.n	800dc1c <_vfiprintf_r+0x4c>
 800dc40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dc42:	f7ff fa87 	bl	800d154 <__retarget_lock_release_recursive>
 800dc46:	e7e9      	b.n	800dc1c <_vfiprintf_r+0x4c>
 800dc48:	2300      	movs	r3, #0
 800dc4a:	9309      	str	r3, [sp, #36]	; 0x24
 800dc4c:	2320      	movs	r3, #32
 800dc4e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dc52:	2330      	movs	r3, #48	; 0x30
 800dc54:	f04f 0901 	mov.w	r9, #1
 800dc58:	f8cd 800c 	str.w	r8, [sp, #12]
 800dc5c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800de1c <_vfiprintf_r+0x24c>
 800dc60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dc64:	4623      	mov	r3, r4
 800dc66:	469a      	mov	sl, r3
 800dc68:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dc6c:	b10a      	cbz	r2, 800dc72 <_vfiprintf_r+0xa2>
 800dc6e:	2a25      	cmp	r2, #37	; 0x25
 800dc70:	d1f9      	bne.n	800dc66 <_vfiprintf_r+0x96>
 800dc72:	ebba 0b04 	subs.w	fp, sl, r4
 800dc76:	d00b      	beq.n	800dc90 <_vfiprintf_r+0xc0>
 800dc78:	465b      	mov	r3, fp
 800dc7a:	4622      	mov	r2, r4
 800dc7c:	4629      	mov	r1, r5
 800dc7e:	4630      	mov	r0, r6
 800dc80:	f7ff ff93 	bl	800dbaa <__sfputs_r>
 800dc84:	3001      	adds	r0, #1
 800dc86:	f000 80aa 	beq.w	800ddde <_vfiprintf_r+0x20e>
 800dc8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dc8c:	445a      	add	r2, fp
 800dc8e:	9209      	str	r2, [sp, #36]	; 0x24
 800dc90:	f89a 3000 	ldrb.w	r3, [sl]
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	f000 80a2 	beq.w	800ddde <_vfiprintf_r+0x20e>
 800dc9a:	2300      	movs	r3, #0
 800dc9c:	f04f 32ff 	mov.w	r2, #4294967295
 800dca0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dca4:	f10a 0a01 	add.w	sl, sl, #1
 800dca8:	9304      	str	r3, [sp, #16]
 800dcaa:	9307      	str	r3, [sp, #28]
 800dcac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dcb0:	931a      	str	r3, [sp, #104]	; 0x68
 800dcb2:	4654      	mov	r4, sl
 800dcb4:	2205      	movs	r2, #5
 800dcb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dcba:	4858      	ldr	r0, [pc, #352]	; (800de1c <_vfiprintf_r+0x24c>)
 800dcbc:	f7ff fa4b 	bl	800d156 <memchr>
 800dcc0:	9a04      	ldr	r2, [sp, #16]
 800dcc2:	b9d8      	cbnz	r0, 800dcfc <_vfiprintf_r+0x12c>
 800dcc4:	06d1      	lsls	r1, r2, #27
 800dcc6:	bf44      	itt	mi
 800dcc8:	2320      	movmi	r3, #32
 800dcca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dcce:	0713      	lsls	r3, r2, #28
 800dcd0:	bf44      	itt	mi
 800dcd2:	232b      	movmi	r3, #43	; 0x2b
 800dcd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dcd8:	f89a 3000 	ldrb.w	r3, [sl]
 800dcdc:	2b2a      	cmp	r3, #42	; 0x2a
 800dcde:	d015      	beq.n	800dd0c <_vfiprintf_r+0x13c>
 800dce0:	4654      	mov	r4, sl
 800dce2:	2000      	movs	r0, #0
 800dce4:	f04f 0c0a 	mov.w	ip, #10
 800dce8:	9a07      	ldr	r2, [sp, #28]
 800dcea:	4621      	mov	r1, r4
 800dcec:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dcf0:	3b30      	subs	r3, #48	; 0x30
 800dcf2:	2b09      	cmp	r3, #9
 800dcf4:	d94e      	bls.n	800dd94 <_vfiprintf_r+0x1c4>
 800dcf6:	b1b0      	cbz	r0, 800dd26 <_vfiprintf_r+0x156>
 800dcf8:	9207      	str	r2, [sp, #28]
 800dcfa:	e014      	b.n	800dd26 <_vfiprintf_r+0x156>
 800dcfc:	eba0 0308 	sub.w	r3, r0, r8
 800dd00:	fa09 f303 	lsl.w	r3, r9, r3
 800dd04:	4313      	orrs	r3, r2
 800dd06:	46a2      	mov	sl, r4
 800dd08:	9304      	str	r3, [sp, #16]
 800dd0a:	e7d2      	b.n	800dcb2 <_vfiprintf_r+0xe2>
 800dd0c:	9b03      	ldr	r3, [sp, #12]
 800dd0e:	1d19      	adds	r1, r3, #4
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	9103      	str	r1, [sp, #12]
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	bfbb      	ittet	lt
 800dd18:	425b      	neglt	r3, r3
 800dd1a:	f042 0202 	orrlt.w	r2, r2, #2
 800dd1e:	9307      	strge	r3, [sp, #28]
 800dd20:	9307      	strlt	r3, [sp, #28]
 800dd22:	bfb8      	it	lt
 800dd24:	9204      	strlt	r2, [sp, #16]
 800dd26:	7823      	ldrb	r3, [r4, #0]
 800dd28:	2b2e      	cmp	r3, #46	; 0x2e
 800dd2a:	d10c      	bne.n	800dd46 <_vfiprintf_r+0x176>
 800dd2c:	7863      	ldrb	r3, [r4, #1]
 800dd2e:	2b2a      	cmp	r3, #42	; 0x2a
 800dd30:	d135      	bne.n	800dd9e <_vfiprintf_r+0x1ce>
 800dd32:	9b03      	ldr	r3, [sp, #12]
 800dd34:	3402      	adds	r4, #2
 800dd36:	1d1a      	adds	r2, r3, #4
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	9203      	str	r2, [sp, #12]
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	bfb8      	it	lt
 800dd40:	f04f 33ff 	movlt.w	r3, #4294967295
 800dd44:	9305      	str	r3, [sp, #20]
 800dd46:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800de2c <_vfiprintf_r+0x25c>
 800dd4a:	2203      	movs	r2, #3
 800dd4c:	4650      	mov	r0, sl
 800dd4e:	7821      	ldrb	r1, [r4, #0]
 800dd50:	f7ff fa01 	bl	800d156 <memchr>
 800dd54:	b140      	cbz	r0, 800dd68 <_vfiprintf_r+0x198>
 800dd56:	2340      	movs	r3, #64	; 0x40
 800dd58:	eba0 000a 	sub.w	r0, r0, sl
 800dd5c:	fa03 f000 	lsl.w	r0, r3, r0
 800dd60:	9b04      	ldr	r3, [sp, #16]
 800dd62:	3401      	adds	r4, #1
 800dd64:	4303      	orrs	r3, r0
 800dd66:	9304      	str	r3, [sp, #16]
 800dd68:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd6c:	2206      	movs	r2, #6
 800dd6e:	482c      	ldr	r0, [pc, #176]	; (800de20 <_vfiprintf_r+0x250>)
 800dd70:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dd74:	f7ff f9ef 	bl	800d156 <memchr>
 800dd78:	2800      	cmp	r0, #0
 800dd7a:	d03f      	beq.n	800ddfc <_vfiprintf_r+0x22c>
 800dd7c:	4b29      	ldr	r3, [pc, #164]	; (800de24 <_vfiprintf_r+0x254>)
 800dd7e:	bb1b      	cbnz	r3, 800ddc8 <_vfiprintf_r+0x1f8>
 800dd80:	9b03      	ldr	r3, [sp, #12]
 800dd82:	3307      	adds	r3, #7
 800dd84:	f023 0307 	bic.w	r3, r3, #7
 800dd88:	3308      	adds	r3, #8
 800dd8a:	9303      	str	r3, [sp, #12]
 800dd8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd8e:	443b      	add	r3, r7
 800dd90:	9309      	str	r3, [sp, #36]	; 0x24
 800dd92:	e767      	b.n	800dc64 <_vfiprintf_r+0x94>
 800dd94:	460c      	mov	r4, r1
 800dd96:	2001      	movs	r0, #1
 800dd98:	fb0c 3202 	mla	r2, ip, r2, r3
 800dd9c:	e7a5      	b.n	800dcea <_vfiprintf_r+0x11a>
 800dd9e:	2300      	movs	r3, #0
 800dda0:	f04f 0c0a 	mov.w	ip, #10
 800dda4:	4619      	mov	r1, r3
 800dda6:	3401      	adds	r4, #1
 800dda8:	9305      	str	r3, [sp, #20]
 800ddaa:	4620      	mov	r0, r4
 800ddac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ddb0:	3a30      	subs	r2, #48	; 0x30
 800ddb2:	2a09      	cmp	r2, #9
 800ddb4:	d903      	bls.n	800ddbe <_vfiprintf_r+0x1ee>
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d0c5      	beq.n	800dd46 <_vfiprintf_r+0x176>
 800ddba:	9105      	str	r1, [sp, #20]
 800ddbc:	e7c3      	b.n	800dd46 <_vfiprintf_r+0x176>
 800ddbe:	4604      	mov	r4, r0
 800ddc0:	2301      	movs	r3, #1
 800ddc2:	fb0c 2101 	mla	r1, ip, r1, r2
 800ddc6:	e7f0      	b.n	800ddaa <_vfiprintf_r+0x1da>
 800ddc8:	ab03      	add	r3, sp, #12
 800ddca:	9300      	str	r3, [sp, #0]
 800ddcc:	462a      	mov	r2, r5
 800ddce:	4630      	mov	r0, r6
 800ddd0:	4b15      	ldr	r3, [pc, #84]	; (800de28 <_vfiprintf_r+0x258>)
 800ddd2:	a904      	add	r1, sp, #16
 800ddd4:	f7fd fd52 	bl	800b87c <_printf_float>
 800ddd8:	4607      	mov	r7, r0
 800ddda:	1c78      	adds	r0, r7, #1
 800dddc:	d1d6      	bne.n	800dd8c <_vfiprintf_r+0x1bc>
 800ddde:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dde0:	07d9      	lsls	r1, r3, #31
 800dde2:	d405      	bmi.n	800ddf0 <_vfiprintf_r+0x220>
 800dde4:	89ab      	ldrh	r3, [r5, #12]
 800dde6:	059a      	lsls	r2, r3, #22
 800dde8:	d402      	bmi.n	800ddf0 <_vfiprintf_r+0x220>
 800ddea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ddec:	f7ff f9b2 	bl	800d154 <__retarget_lock_release_recursive>
 800ddf0:	89ab      	ldrh	r3, [r5, #12]
 800ddf2:	065b      	lsls	r3, r3, #25
 800ddf4:	f53f af12 	bmi.w	800dc1c <_vfiprintf_r+0x4c>
 800ddf8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ddfa:	e711      	b.n	800dc20 <_vfiprintf_r+0x50>
 800ddfc:	ab03      	add	r3, sp, #12
 800ddfe:	9300      	str	r3, [sp, #0]
 800de00:	462a      	mov	r2, r5
 800de02:	4630      	mov	r0, r6
 800de04:	4b08      	ldr	r3, [pc, #32]	; (800de28 <_vfiprintf_r+0x258>)
 800de06:	a904      	add	r1, sp, #16
 800de08:	f7fd ffd4 	bl	800bdb4 <_printf_i>
 800de0c:	e7e4      	b.n	800ddd8 <_vfiprintf_r+0x208>
 800de0e:	bf00      	nop
 800de10:	0800f7d0 	.word	0x0800f7d0
 800de14:	0800f7f0 	.word	0x0800f7f0
 800de18:	0800f7b0 	.word	0x0800f7b0
 800de1c:	0800f96c 	.word	0x0800f96c
 800de20:	0800f976 	.word	0x0800f976
 800de24:	0800b87d 	.word	0x0800b87d
 800de28:	0800dbab 	.word	0x0800dbab
 800de2c:	0800f972 	.word	0x0800f972

0800de30 <__sread>:
 800de30:	b510      	push	{r4, lr}
 800de32:	460c      	mov	r4, r1
 800de34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de38:	f000 fada 	bl	800e3f0 <_read_r>
 800de3c:	2800      	cmp	r0, #0
 800de3e:	bfab      	itete	ge
 800de40:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800de42:	89a3      	ldrhlt	r3, [r4, #12]
 800de44:	181b      	addge	r3, r3, r0
 800de46:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800de4a:	bfac      	ite	ge
 800de4c:	6563      	strge	r3, [r4, #84]	; 0x54
 800de4e:	81a3      	strhlt	r3, [r4, #12]
 800de50:	bd10      	pop	{r4, pc}

0800de52 <__swrite>:
 800de52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de56:	461f      	mov	r7, r3
 800de58:	898b      	ldrh	r3, [r1, #12]
 800de5a:	4605      	mov	r5, r0
 800de5c:	05db      	lsls	r3, r3, #23
 800de5e:	460c      	mov	r4, r1
 800de60:	4616      	mov	r6, r2
 800de62:	d505      	bpl.n	800de70 <__swrite+0x1e>
 800de64:	2302      	movs	r3, #2
 800de66:	2200      	movs	r2, #0
 800de68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de6c:	f000 f9f8 	bl	800e260 <_lseek_r>
 800de70:	89a3      	ldrh	r3, [r4, #12]
 800de72:	4632      	mov	r2, r6
 800de74:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800de78:	81a3      	strh	r3, [r4, #12]
 800de7a:	4628      	mov	r0, r5
 800de7c:	463b      	mov	r3, r7
 800de7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800de82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800de86:	f000 b869 	b.w	800df5c <_write_r>

0800de8a <__sseek>:
 800de8a:	b510      	push	{r4, lr}
 800de8c:	460c      	mov	r4, r1
 800de8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de92:	f000 f9e5 	bl	800e260 <_lseek_r>
 800de96:	1c43      	adds	r3, r0, #1
 800de98:	89a3      	ldrh	r3, [r4, #12]
 800de9a:	bf15      	itete	ne
 800de9c:	6560      	strne	r0, [r4, #84]	; 0x54
 800de9e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800dea2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800dea6:	81a3      	strheq	r3, [r4, #12]
 800dea8:	bf18      	it	ne
 800deaa:	81a3      	strhne	r3, [r4, #12]
 800deac:	bd10      	pop	{r4, pc}

0800deae <__sclose>:
 800deae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800deb2:	f000 b8f1 	b.w	800e098 <_close_r>
	...

0800deb8 <__swbuf_r>:
 800deb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800deba:	460e      	mov	r6, r1
 800debc:	4614      	mov	r4, r2
 800debe:	4605      	mov	r5, r0
 800dec0:	b118      	cbz	r0, 800deca <__swbuf_r+0x12>
 800dec2:	6983      	ldr	r3, [r0, #24]
 800dec4:	b90b      	cbnz	r3, 800deca <__swbuf_r+0x12>
 800dec6:	f7ff f8a1 	bl	800d00c <__sinit>
 800deca:	4b21      	ldr	r3, [pc, #132]	; (800df50 <__swbuf_r+0x98>)
 800decc:	429c      	cmp	r4, r3
 800dece:	d12b      	bne.n	800df28 <__swbuf_r+0x70>
 800ded0:	686c      	ldr	r4, [r5, #4]
 800ded2:	69a3      	ldr	r3, [r4, #24]
 800ded4:	60a3      	str	r3, [r4, #8]
 800ded6:	89a3      	ldrh	r3, [r4, #12]
 800ded8:	071a      	lsls	r2, r3, #28
 800deda:	d52f      	bpl.n	800df3c <__swbuf_r+0x84>
 800dedc:	6923      	ldr	r3, [r4, #16]
 800dede:	b36b      	cbz	r3, 800df3c <__swbuf_r+0x84>
 800dee0:	6923      	ldr	r3, [r4, #16]
 800dee2:	6820      	ldr	r0, [r4, #0]
 800dee4:	b2f6      	uxtb	r6, r6
 800dee6:	1ac0      	subs	r0, r0, r3
 800dee8:	6963      	ldr	r3, [r4, #20]
 800deea:	4637      	mov	r7, r6
 800deec:	4283      	cmp	r3, r0
 800deee:	dc04      	bgt.n	800defa <__swbuf_r+0x42>
 800def0:	4621      	mov	r1, r4
 800def2:	4628      	mov	r0, r5
 800def4:	f000 f966 	bl	800e1c4 <_fflush_r>
 800def8:	bb30      	cbnz	r0, 800df48 <__swbuf_r+0x90>
 800defa:	68a3      	ldr	r3, [r4, #8]
 800defc:	3001      	adds	r0, #1
 800defe:	3b01      	subs	r3, #1
 800df00:	60a3      	str	r3, [r4, #8]
 800df02:	6823      	ldr	r3, [r4, #0]
 800df04:	1c5a      	adds	r2, r3, #1
 800df06:	6022      	str	r2, [r4, #0]
 800df08:	701e      	strb	r6, [r3, #0]
 800df0a:	6963      	ldr	r3, [r4, #20]
 800df0c:	4283      	cmp	r3, r0
 800df0e:	d004      	beq.n	800df1a <__swbuf_r+0x62>
 800df10:	89a3      	ldrh	r3, [r4, #12]
 800df12:	07db      	lsls	r3, r3, #31
 800df14:	d506      	bpl.n	800df24 <__swbuf_r+0x6c>
 800df16:	2e0a      	cmp	r6, #10
 800df18:	d104      	bne.n	800df24 <__swbuf_r+0x6c>
 800df1a:	4621      	mov	r1, r4
 800df1c:	4628      	mov	r0, r5
 800df1e:	f000 f951 	bl	800e1c4 <_fflush_r>
 800df22:	b988      	cbnz	r0, 800df48 <__swbuf_r+0x90>
 800df24:	4638      	mov	r0, r7
 800df26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df28:	4b0a      	ldr	r3, [pc, #40]	; (800df54 <__swbuf_r+0x9c>)
 800df2a:	429c      	cmp	r4, r3
 800df2c:	d101      	bne.n	800df32 <__swbuf_r+0x7a>
 800df2e:	68ac      	ldr	r4, [r5, #8]
 800df30:	e7cf      	b.n	800ded2 <__swbuf_r+0x1a>
 800df32:	4b09      	ldr	r3, [pc, #36]	; (800df58 <__swbuf_r+0xa0>)
 800df34:	429c      	cmp	r4, r3
 800df36:	bf08      	it	eq
 800df38:	68ec      	ldreq	r4, [r5, #12]
 800df3a:	e7ca      	b.n	800ded2 <__swbuf_r+0x1a>
 800df3c:	4621      	mov	r1, r4
 800df3e:	4628      	mov	r0, r5
 800df40:	f000 f81e 	bl	800df80 <__swsetup_r>
 800df44:	2800      	cmp	r0, #0
 800df46:	d0cb      	beq.n	800dee0 <__swbuf_r+0x28>
 800df48:	f04f 37ff 	mov.w	r7, #4294967295
 800df4c:	e7ea      	b.n	800df24 <__swbuf_r+0x6c>
 800df4e:	bf00      	nop
 800df50:	0800f7d0 	.word	0x0800f7d0
 800df54:	0800f7f0 	.word	0x0800f7f0
 800df58:	0800f7b0 	.word	0x0800f7b0

0800df5c <_write_r>:
 800df5c:	b538      	push	{r3, r4, r5, lr}
 800df5e:	4604      	mov	r4, r0
 800df60:	4608      	mov	r0, r1
 800df62:	4611      	mov	r1, r2
 800df64:	2200      	movs	r2, #0
 800df66:	4d05      	ldr	r5, [pc, #20]	; (800df7c <_write_r+0x20>)
 800df68:	602a      	str	r2, [r5, #0]
 800df6a:	461a      	mov	r2, r3
 800df6c:	f7f4 fd24 	bl	80029b8 <_write>
 800df70:	1c43      	adds	r3, r0, #1
 800df72:	d102      	bne.n	800df7a <_write_r+0x1e>
 800df74:	682b      	ldr	r3, [r5, #0]
 800df76:	b103      	cbz	r3, 800df7a <_write_r+0x1e>
 800df78:	6023      	str	r3, [r4, #0]
 800df7a:	bd38      	pop	{r3, r4, r5, pc}
 800df7c:	20000bbc 	.word	0x20000bbc

0800df80 <__swsetup_r>:
 800df80:	4b32      	ldr	r3, [pc, #200]	; (800e04c <__swsetup_r+0xcc>)
 800df82:	b570      	push	{r4, r5, r6, lr}
 800df84:	681d      	ldr	r5, [r3, #0]
 800df86:	4606      	mov	r6, r0
 800df88:	460c      	mov	r4, r1
 800df8a:	b125      	cbz	r5, 800df96 <__swsetup_r+0x16>
 800df8c:	69ab      	ldr	r3, [r5, #24]
 800df8e:	b913      	cbnz	r3, 800df96 <__swsetup_r+0x16>
 800df90:	4628      	mov	r0, r5
 800df92:	f7ff f83b 	bl	800d00c <__sinit>
 800df96:	4b2e      	ldr	r3, [pc, #184]	; (800e050 <__swsetup_r+0xd0>)
 800df98:	429c      	cmp	r4, r3
 800df9a:	d10f      	bne.n	800dfbc <__swsetup_r+0x3c>
 800df9c:	686c      	ldr	r4, [r5, #4]
 800df9e:	89a3      	ldrh	r3, [r4, #12]
 800dfa0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dfa4:	0719      	lsls	r1, r3, #28
 800dfa6:	d42c      	bmi.n	800e002 <__swsetup_r+0x82>
 800dfa8:	06dd      	lsls	r5, r3, #27
 800dfaa:	d411      	bmi.n	800dfd0 <__swsetup_r+0x50>
 800dfac:	2309      	movs	r3, #9
 800dfae:	6033      	str	r3, [r6, #0]
 800dfb0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800dfb4:	f04f 30ff 	mov.w	r0, #4294967295
 800dfb8:	81a3      	strh	r3, [r4, #12]
 800dfba:	e03e      	b.n	800e03a <__swsetup_r+0xba>
 800dfbc:	4b25      	ldr	r3, [pc, #148]	; (800e054 <__swsetup_r+0xd4>)
 800dfbe:	429c      	cmp	r4, r3
 800dfc0:	d101      	bne.n	800dfc6 <__swsetup_r+0x46>
 800dfc2:	68ac      	ldr	r4, [r5, #8]
 800dfc4:	e7eb      	b.n	800df9e <__swsetup_r+0x1e>
 800dfc6:	4b24      	ldr	r3, [pc, #144]	; (800e058 <__swsetup_r+0xd8>)
 800dfc8:	429c      	cmp	r4, r3
 800dfca:	bf08      	it	eq
 800dfcc:	68ec      	ldreq	r4, [r5, #12]
 800dfce:	e7e6      	b.n	800df9e <__swsetup_r+0x1e>
 800dfd0:	0758      	lsls	r0, r3, #29
 800dfd2:	d512      	bpl.n	800dffa <__swsetup_r+0x7a>
 800dfd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dfd6:	b141      	cbz	r1, 800dfea <__swsetup_r+0x6a>
 800dfd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dfdc:	4299      	cmp	r1, r3
 800dfde:	d002      	beq.n	800dfe6 <__swsetup_r+0x66>
 800dfe0:	4630      	mov	r0, r6
 800dfe2:	f7fd fb07 	bl	800b5f4 <_free_r>
 800dfe6:	2300      	movs	r3, #0
 800dfe8:	6363      	str	r3, [r4, #52]	; 0x34
 800dfea:	89a3      	ldrh	r3, [r4, #12]
 800dfec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800dff0:	81a3      	strh	r3, [r4, #12]
 800dff2:	2300      	movs	r3, #0
 800dff4:	6063      	str	r3, [r4, #4]
 800dff6:	6923      	ldr	r3, [r4, #16]
 800dff8:	6023      	str	r3, [r4, #0]
 800dffa:	89a3      	ldrh	r3, [r4, #12]
 800dffc:	f043 0308 	orr.w	r3, r3, #8
 800e000:	81a3      	strh	r3, [r4, #12]
 800e002:	6923      	ldr	r3, [r4, #16]
 800e004:	b94b      	cbnz	r3, 800e01a <__swsetup_r+0x9a>
 800e006:	89a3      	ldrh	r3, [r4, #12]
 800e008:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e00c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e010:	d003      	beq.n	800e01a <__swsetup_r+0x9a>
 800e012:	4621      	mov	r1, r4
 800e014:	4630      	mov	r0, r6
 800e016:	f000 f959 	bl	800e2cc <__smakebuf_r>
 800e01a:	89a0      	ldrh	r0, [r4, #12]
 800e01c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e020:	f010 0301 	ands.w	r3, r0, #1
 800e024:	d00a      	beq.n	800e03c <__swsetup_r+0xbc>
 800e026:	2300      	movs	r3, #0
 800e028:	60a3      	str	r3, [r4, #8]
 800e02a:	6963      	ldr	r3, [r4, #20]
 800e02c:	425b      	negs	r3, r3
 800e02e:	61a3      	str	r3, [r4, #24]
 800e030:	6923      	ldr	r3, [r4, #16]
 800e032:	b943      	cbnz	r3, 800e046 <__swsetup_r+0xc6>
 800e034:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e038:	d1ba      	bne.n	800dfb0 <__swsetup_r+0x30>
 800e03a:	bd70      	pop	{r4, r5, r6, pc}
 800e03c:	0781      	lsls	r1, r0, #30
 800e03e:	bf58      	it	pl
 800e040:	6963      	ldrpl	r3, [r4, #20]
 800e042:	60a3      	str	r3, [r4, #8]
 800e044:	e7f4      	b.n	800e030 <__swsetup_r+0xb0>
 800e046:	2000      	movs	r0, #0
 800e048:	e7f7      	b.n	800e03a <__swsetup_r+0xba>
 800e04a:	bf00      	nop
 800e04c:	2000001c 	.word	0x2000001c
 800e050:	0800f7d0 	.word	0x0800f7d0
 800e054:	0800f7f0 	.word	0x0800f7f0
 800e058:	0800f7b0 	.word	0x0800f7b0

0800e05c <__assert_func>:
 800e05c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e05e:	4614      	mov	r4, r2
 800e060:	461a      	mov	r2, r3
 800e062:	4b09      	ldr	r3, [pc, #36]	; (800e088 <__assert_func+0x2c>)
 800e064:	4605      	mov	r5, r0
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	68d8      	ldr	r0, [r3, #12]
 800e06a:	b14c      	cbz	r4, 800e080 <__assert_func+0x24>
 800e06c:	4b07      	ldr	r3, [pc, #28]	; (800e08c <__assert_func+0x30>)
 800e06e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e072:	9100      	str	r1, [sp, #0]
 800e074:	462b      	mov	r3, r5
 800e076:	4906      	ldr	r1, [pc, #24]	; (800e090 <__assert_func+0x34>)
 800e078:	f000 f8e0 	bl	800e23c <fiprintf>
 800e07c:	f000 f9d7 	bl	800e42e <abort>
 800e080:	4b04      	ldr	r3, [pc, #16]	; (800e094 <__assert_func+0x38>)
 800e082:	461c      	mov	r4, r3
 800e084:	e7f3      	b.n	800e06e <__assert_func+0x12>
 800e086:	bf00      	nop
 800e088:	2000001c 	.word	0x2000001c
 800e08c:	0800f97d 	.word	0x0800f97d
 800e090:	0800f98a 	.word	0x0800f98a
 800e094:	0800f9b8 	.word	0x0800f9b8

0800e098 <_close_r>:
 800e098:	b538      	push	{r3, r4, r5, lr}
 800e09a:	2300      	movs	r3, #0
 800e09c:	4d05      	ldr	r5, [pc, #20]	; (800e0b4 <_close_r+0x1c>)
 800e09e:	4604      	mov	r4, r0
 800e0a0:	4608      	mov	r0, r1
 800e0a2:	602b      	str	r3, [r5, #0]
 800e0a4:	f7f4 fcb2 	bl	8002a0c <_close>
 800e0a8:	1c43      	adds	r3, r0, #1
 800e0aa:	d102      	bne.n	800e0b2 <_close_r+0x1a>
 800e0ac:	682b      	ldr	r3, [r5, #0]
 800e0ae:	b103      	cbz	r3, 800e0b2 <_close_r+0x1a>
 800e0b0:	6023      	str	r3, [r4, #0]
 800e0b2:	bd38      	pop	{r3, r4, r5, pc}
 800e0b4:	20000bbc 	.word	0x20000bbc

0800e0b8 <__sflush_r>:
 800e0b8:	898a      	ldrh	r2, [r1, #12]
 800e0ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0be:	4605      	mov	r5, r0
 800e0c0:	0710      	lsls	r0, r2, #28
 800e0c2:	460c      	mov	r4, r1
 800e0c4:	d458      	bmi.n	800e178 <__sflush_r+0xc0>
 800e0c6:	684b      	ldr	r3, [r1, #4]
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	dc05      	bgt.n	800e0d8 <__sflush_r+0x20>
 800e0cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	dc02      	bgt.n	800e0d8 <__sflush_r+0x20>
 800e0d2:	2000      	movs	r0, #0
 800e0d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e0da:	2e00      	cmp	r6, #0
 800e0dc:	d0f9      	beq.n	800e0d2 <__sflush_r+0x1a>
 800e0de:	2300      	movs	r3, #0
 800e0e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e0e4:	682f      	ldr	r7, [r5, #0]
 800e0e6:	602b      	str	r3, [r5, #0]
 800e0e8:	d032      	beq.n	800e150 <__sflush_r+0x98>
 800e0ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e0ec:	89a3      	ldrh	r3, [r4, #12]
 800e0ee:	075a      	lsls	r2, r3, #29
 800e0f0:	d505      	bpl.n	800e0fe <__sflush_r+0x46>
 800e0f2:	6863      	ldr	r3, [r4, #4]
 800e0f4:	1ac0      	subs	r0, r0, r3
 800e0f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e0f8:	b10b      	cbz	r3, 800e0fe <__sflush_r+0x46>
 800e0fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e0fc:	1ac0      	subs	r0, r0, r3
 800e0fe:	2300      	movs	r3, #0
 800e100:	4602      	mov	r2, r0
 800e102:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e104:	4628      	mov	r0, r5
 800e106:	6a21      	ldr	r1, [r4, #32]
 800e108:	47b0      	blx	r6
 800e10a:	1c43      	adds	r3, r0, #1
 800e10c:	89a3      	ldrh	r3, [r4, #12]
 800e10e:	d106      	bne.n	800e11e <__sflush_r+0x66>
 800e110:	6829      	ldr	r1, [r5, #0]
 800e112:	291d      	cmp	r1, #29
 800e114:	d82c      	bhi.n	800e170 <__sflush_r+0xb8>
 800e116:	4a2a      	ldr	r2, [pc, #168]	; (800e1c0 <__sflush_r+0x108>)
 800e118:	40ca      	lsrs	r2, r1
 800e11a:	07d6      	lsls	r6, r2, #31
 800e11c:	d528      	bpl.n	800e170 <__sflush_r+0xb8>
 800e11e:	2200      	movs	r2, #0
 800e120:	6062      	str	r2, [r4, #4]
 800e122:	6922      	ldr	r2, [r4, #16]
 800e124:	04d9      	lsls	r1, r3, #19
 800e126:	6022      	str	r2, [r4, #0]
 800e128:	d504      	bpl.n	800e134 <__sflush_r+0x7c>
 800e12a:	1c42      	adds	r2, r0, #1
 800e12c:	d101      	bne.n	800e132 <__sflush_r+0x7a>
 800e12e:	682b      	ldr	r3, [r5, #0]
 800e130:	b903      	cbnz	r3, 800e134 <__sflush_r+0x7c>
 800e132:	6560      	str	r0, [r4, #84]	; 0x54
 800e134:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e136:	602f      	str	r7, [r5, #0]
 800e138:	2900      	cmp	r1, #0
 800e13a:	d0ca      	beq.n	800e0d2 <__sflush_r+0x1a>
 800e13c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e140:	4299      	cmp	r1, r3
 800e142:	d002      	beq.n	800e14a <__sflush_r+0x92>
 800e144:	4628      	mov	r0, r5
 800e146:	f7fd fa55 	bl	800b5f4 <_free_r>
 800e14a:	2000      	movs	r0, #0
 800e14c:	6360      	str	r0, [r4, #52]	; 0x34
 800e14e:	e7c1      	b.n	800e0d4 <__sflush_r+0x1c>
 800e150:	6a21      	ldr	r1, [r4, #32]
 800e152:	2301      	movs	r3, #1
 800e154:	4628      	mov	r0, r5
 800e156:	47b0      	blx	r6
 800e158:	1c41      	adds	r1, r0, #1
 800e15a:	d1c7      	bne.n	800e0ec <__sflush_r+0x34>
 800e15c:	682b      	ldr	r3, [r5, #0]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d0c4      	beq.n	800e0ec <__sflush_r+0x34>
 800e162:	2b1d      	cmp	r3, #29
 800e164:	d001      	beq.n	800e16a <__sflush_r+0xb2>
 800e166:	2b16      	cmp	r3, #22
 800e168:	d101      	bne.n	800e16e <__sflush_r+0xb6>
 800e16a:	602f      	str	r7, [r5, #0]
 800e16c:	e7b1      	b.n	800e0d2 <__sflush_r+0x1a>
 800e16e:	89a3      	ldrh	r3, [r4, #12]
 800e170:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e174:	81a3      	strh	r3, [r4, #12]
 800e176:	e7ad      	b.n	800e0d4 <__sflush_r+0x1c>
 800e178:	690f      	ldr	r7, [r1, #16]
 800e17a:	2f00      	cmp	r7, #0
 800e17c:	d0a9      	beq.n	800e0d2 <__sflush_r+0x1a>
 800e17e:	0793      	lsls	r3, r2, #30
 800e180:	bf18      	it	ne
 800e182:	2300      	movne	r3, #0
 800e184:	680e      	ldr	r6, [r1, #0]
 800e186:	bf08      	it	eq
 800e188:	694b      	ldreq	r3, [r1, #20]
 800e18a:	eba6 0807 	sub.w	r8, r6, r7
 800e18e:	600f      	str	r7, [r1, #0]
 800e190:	608b      	str	r3, [r1, #8]
 800e192:	f1b8 0f00 	cmp.w	r8, #0
 800e196:	dd9c      	ble.n	800e0d2 <__sflush_r+0x1a>
 800e198:	4643      	mov	r3, r8
 800e19a:	463a      	mov	r2, r7
 800e19c:	4628      	mov	r0, r5
 800e19e:	6a21      	ldr	r1, [r4, #32]
 800e1a0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e1a2:	47b0      	blx	r6
 800e1a4:	2800      	cmp	r0, #0
 800e1a6:	dc06      	bgt.n	800e1b6 <__sflush_r+0xfe>
 800e1a8:	89a3      	ldrh	r3, [r4, #12]
 800e1aa:	f04f 30ff 	mov.w	r0, #4294967295
 800e1ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e1b2:	81a3      	strh	r3, [r4, #12]
 800e1b4:	e78e      	b.n	800e0d4 <__sflush_r+0x1c>
 800e1b6:	4407      	add	r7, r0
 800e1b8:	eba8 0800 	sub.w	r8, r8, r0
 800e1bc:	e7e9      	b.n	800e192 <__sflush_r+0xda>
 800e1be:	bf00      	nop
 800e1c0:	20400001 	.word	0x20400001

0800e1c4 <_fflush_r>:
 800e1c4:	b538      	push	{r3, r4, r5, lr}
 800e1c6:	690b      	ldr	r3, [r1, #16]
 800e1c8:	4605      	mov	r5, r0
 800e1ca:	460c      	mov	r4, r1
 800e1cc:	b913      	cbnz	r3, 800e1d4 <_fflush_r+0x10>
 800e1ce:	2500      	movs	r5, #0
 800e1d0:	4628      	mov	r0, r5
 800e1d2:	bd38      	pop	{r3, r4, r5, pc}
 800e1d4:	b118      	cbz	r0, 800e1de <_fflush_r+0x1a>
 800e1d6:	6983      	ldr	r3, [r0, #24]
 800e1d8:	b90b      	cbnz	r3, 800e1de <_fflush_r+0x1a>
 800e1da:	f7fe ff17 	bl	800d00c <__sinit>
 800e1de:	4b14      	ldr	r3, [pc, #80]	; (800e230 <_fflush_r+0x6c>)
 800e1e0:	429c      	cmp	r4, r3
 800e1e2:	d11b      	bne.n	800e21c <_fflush_r+0x58>
 800e1e4:	686c      	ldr	r4, [r5, #4]
 800e1e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d0ef      	beq.n	800e1ce <_fflush_r+0xa>
 800e1ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e1f0:	07d0      	lsls	r0, r2, #31
 800e1f2:	d404      	bmi.n	800e1fe <_fflush_r+0x3a>
 800e1f4:	0599      	lsls	r1, r3, #22
 800e1f6:	d402      	bmi.n	800e1fe <_fflush_r+0x3a>
 800e1f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e1fa:	f7fe ffaa 	bl	800d152 <__retarget_lock_acquire_recursive>
 800e1fe:	4628      	mov	r0, r5
 800e200:	4621      	mov	r1, r4
 800e202:	f7ff ff59 	bl	800e0b8 <__sflush_r>
 800e206:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e208:	4605      	mov	r5, r0
 800e20a:	07da      	lsls	r2, r3, #31
 800e20c:	d4e0      	bmi.n	800e1d0 <_fflush_r+0xc>
 800e20e:	89a3      	ldrh	r3, [r4, #12]
 800e210:	059b      	lsls	r3, r3, #22
 800e212:	d4dd      	bmi.n	800e1d0 <_fflush_r+0xc>
 800e214:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e216:	f7fe ff9d 	bl	800d154 <__retarget_lock_release_recursive>
 800e21a:	e7d9      	b.n	800e1d0 <_fflush_r+0xc>
 800e21c:	4b05      	ldr	r3, [pc, #20]	; (800e234 <_fflush_r+0x70>)
 800e21e:	429c      	cmp	r4, r3
 800e220:	d101      	bne.n	800e226 <_fflush_r+0x62>
 800e222:	68ac      	ldr	r4, [r5, #8]
 800e224:	e7df      	b.n	800e1e6 <_fflush_r+0x22>
 800e226:	4b04      	ldr	r3, [pc, #16]	; (800e238 <_fflush_r+0x74>)
 800e228:	429c      	cmp	r4, r3
 800e22a:	bf08      	it	eq
 800e22c:	68ec      	ldreq	r4, [r5, #12]
 800e22e:	e7da      	b.n	800e1e6 <_fflush_r+0x22>
 800e230:	0800f7d0 	.word	0x0800f7d0
 800e234:	0800f7f0 	.word	0x0800f7f0
 800e238:	0800f7b0 	.word	0x0800f7b0

0800e23c <fiprintf>:
 800e23c:	b40e      	push	{r1, r2, r3}
 800e23e:	b503      	push	{r0, r1, lr}
 800e240:	4601      	mov	r1, r0
 800e242:	ab03      	add	r3, sp, #12
 800e244:	4805      	ldr	r0, [pc, #20]	; (800e25c <fiprintf+0x20>)
 800e246:	f853 2b04 	ldr.w	r2, [r3], #4
 800e24a:	6800      	ldr	r0, [r0, #0]
 800e24c:	9301      	str	r3, [sp, #4]
 800e24e:	f7ff fcbf 	bl	800dbd0 <_vfiprintf_r>
 800e252:	b002      	add	sp, #8
 800e254:	f85d eb04 	ldr.w	lr, [sp], #4
 800e258:	b003      	add	sp, #12
 800e25a:	4770      	bx	lr
 800e25c:	2000001c 	.word	0x2000001c

0800e260 <_lseek_r>:
 800e260:	b538      	push	{r3, r4, r5, lr}
 800e262:	4604      	mov	r4, r0
 800e264:	4608      	mov	r0, r1
 800e266:	4611      	mov	r1, r2
 800e268:	2200      	movs	r2, #0
 800e26a:	4d05      	ldr	r5, [pc, #20]	; (800e280 <_lseek_r+0x20>)
 800e26c:	602a      	str	r2, [r5, #0]
 800e26e:	461a      	mov	r2, r3
 800e270:	f7f4 fbf0 	bl	8002a54 <_lseek>
 800e274:	1c43      	adds	r3, r0, #1
 800e276:	d102      	bne.n	800e27e <_lseek_r+0x1e>
 800e278:	682b      	ldr	r3, [r5, #0]
 800e27a:	b103      	cbz	r3, 800e27e <_lseek_r+0x1e>
 800e27c:	6023      	str	r3, [r4, #0]
 800e27e:	bd38      	pop	{r3, r4, r5, pc}
 800e280:	20000bbc 	.word	0x20000bbc

0800e284 <__swhatbuf_r>:
 800e284:	b570      	push	{r4, r5, r6, lr}
 800e286:	460e      	mov	r6, r1
 800e288:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e28c:	4614      	mov	r4, r2
 800e28e:	2900      	cmp	r1, #0
 800e290:	461d      	mov	r5, r3
 800e292:	b096      	sub	sp, #88	; 0x58
 800e294:	da07      	bge.n	800e2a6 <__swhatbuf_r+0x22>
 800e296:	2300      	movs	r3, #0
 800e298:	602b      	str	r3, [r5, #0]
 800e29a:	89b3      	ldrh	r3, [r6, #12]
 800e29c:	061a      	lsls	r2, r3, #24
 800e29e:	d410      	bmi.n	800e2c2 <__swhatbuf_r+0x3e>
 800e2a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e2a4:	e00e      	b.n	800e2c4 <__swhatbuf_r+0x40>
 800e2a6:	466a      	mov	r2, sp
 800e2a8:	f000 f8c8 	bl	800e43c <_fstat_r>
 800e2ac:	2800      	cmp	r0, #0
 800e2ae:	dbf2      	blt.n	800e296 <__swhatbuf_r+0x12>
 800e2b0:	9a01      	ldr	r2, [sp, #4]
 800e2b2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e2b6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e2ba:	425a      	negs	r2, r3
 800e2bc:	415a      	adcs	r2, r3
 800e2be:	602a      	str	r2, [r5, #0]
 800e2c0:	e7ee      	b.n	800e2a0 <__swhatbuf_r+0x1c>
 800e2c2:	2340      	movs	r3, #64	; 0x40
 800e2c4:	2000      	movs	r0, #0
 800e2c6:	6023      	str	r3, [r4, #0]
 800e2c8:	b016      	add	sp, #88	; 0x58
 800e2ca:	bd70      	pop	{r4, r5, r6, pc}

0800e2cc <__smakebuf_r>:
 800e2cc:	898b      	ldrh	r3, [r1, #12]
 800e2ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e2d0:	079d      	lsls	r5, r3, #30
 800e2d2:	4606      	mov	r6, r0
 800e2d4:	460c      	mov	r4, r1
 800e2d6:	d507      	bpl.n	800e2e8 <__smakebuf_r+0x1c>
 800e2d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e2dc:	6023      	str	r3, [r4, #0]
 800e2de:	6123      	str	r3, [r4, #16]
 800e2e0:	2301      	movs	r3, #1
 800e2e2:	6163      	str	r3, [r4, #20]
 800e2e4:	b002      	add	sp, #8
 800e2e6:	bd70      	pop	{r4, r5, r6, pc}
 800e2e8:	466a      	mov	r2, sp
 800e2ea:	ab01      	add	r3, sp, #4
 800e2ec:	f7ff ffca 	bl	800e284 <__swhatbuf_r>
 800e2f0:	9900      	ldr	r1, [sp, #0]
 800e2f2:	4605      	mov	r5, r0
 800e2f4:	4630      	mov	r0, r6
 800e2f6:	f7fd f9c9 	bl	800b68c <_malloc_r>
 800e2fa:	b948      	cbnz	r0, 800e310 <__smakebuf_r+0x44>
 800e2fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e300:	059a      	lsls	r2, r3, #22
 800e302:	d4ef      	bmi.n	800e2e4 <__smakebuf_r+0x18>
 800e304:	f023 0303 	bic.w	r3, r3, #3
 800e308:	f043 0302 	orr.w	r3, r3, #2
 800e30c:	81a3      	strh	r3, [r4, #12]
 800e30e:	e7e3      	b.n	800e2d8 <__smakebuf_r+0xc>
 800e310:	4b0d      	ldr	r3, [pc, #52]	; (800e348 <__smakebuf_r+0x7c>)
 800e312:	62b3      	str	r3, [r6, #40]	; 0x28
 800e314:	89a3      	ldrh	r3, [r4, #12]
 800e316:	6020      	str	r0, [r4, #0]
 800e318:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e31c:	81a3      	strh	r3, [r4, #12]
 800e31e:	9b00      	ldr	r3, [sp, #0]
 800e320:	6120      	str	r0, [r4, #16]
 800e322:	6163      	str	r3, [r4, #20]
 800e324:	9b01      	ldr	r3, [sp, #4]
 800e326:	b15b      	cbz	r3, 800e340 <__smakebuf_r+0x74>
 800e328:	4630      	mov	r0, r6
 800e32a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e32e:	f000 f897 	bl	800e460 <_isatty_r>
 800e332:	b128      	cbz	r0, 800e340 <__smakebuf_r+0x74>
 800e334:	89a3      	ldrh	r3, [r4, #12]
 800e336:	f023 0303 	bic.w	r3, r3, #3
 800e33a:	f043 0301 	orr.w	r3, r3, #1
 800e33e:	81a3      	strh	r3, [r4, #12]
 800e340:	89a0      	ldrh	r0, [r4, #12]
 800e342:	4305      	orrs	r5, r0
 800e344:	81a5      	strh	r5, [r4, #12]
 800e346:	e7cd      	b.n	800e2e4 <__smakebuf_r+0x18>
 800e348:	0800cfa5 	.word	0x0800cfa5

0800e34c <__ascii_mbtowc>:
 800e34c:	b082      	sub	sp, #8
 800e34e:	b901      	cbnz	r1, 800e352 <__ascii_mbtowc+0x6>
 800e350:	a901      	add	r1, sp, #4
 800e352:	b142      	cbz	r2, 800e366 <__ascii_mbtowc+0x1a>
 800e354:	b14b      	cbz	r3, 800e36a <__ascii_mbtowc+0x1e>
 800e356:	7813      	ldrb	r3, [r2, #0]
 800e358:	600b      	str	r3, [r1, #0]
 800e35a:	7812      	ldrb	r2, [r2, #0]
 800e35c:	1e10      	subs	r0, r2, #0
 800e35e:	bf18      	it	ne
 800e360:	2001      	movne	r0, #1
 800e362:	b002      	add	sp, #8
 800e364:	4770      	bx	lr
 800e366:	4610      	mov	r0, r2
 800e368:	e7fb      	b.n	800e362 <__ascii_mbtowc+0x16>
 800e36a:	f06f 0001 	mvn.w	r0, #1
 800e36e:	e7f8      	b.n	800e362 <__ascii_mbtowc+0x16>

0800e370 <memmove>:
 800e370:	4288      	cmp	r0, r1
 800e372:	b510      	push	{r4, lr}
 800e374:	eb01 0402 	add.w	r4, r1, r2
 800e378:	d902      	bls.n	800e380 <memmove+0x10>
 800e37a:	4284      	cmp	r4, r0
 800e37c:	4623      	mov	r3, r4
 800e37e:	d807      	bhi.n	800e390 <memmove+0x20>
 800e380:	1e43      	subs	r3, r0, #1
 800e382:	42a1      	cmp	r1, r4
 800e384:	d008      	beq.n	800e398 <memmove+0x28>
 800e386:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e38a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e38e:	e7f8      	b.n	800e382 <memmove+0x12>
 800e390:	4601      	mov	r1, r0
 800e392:	4402      	add	r2, r0
 800e394:	428a      	cmp	r2, r1
 800e396:	d100      	bne.n	800e39a <memmove+0x2a>
 800e398:	bd10      	pop	{r4, pc}
 800e39a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e39e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e3a2:	e7f7      	b.n	800e394 <memmove+0x24>

0800e3a4 <_realloc_r>:
 800e3a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3a6:	4607      	mov	r7, r0
 800e3a8:	4614      	mov	r4, r2
 800e3aa:	460e      	mov	r6, r1
 800e3ac:	b921      	cbnz	r1, 800e3b8 <_realloc_r+0x14>
 800e3ae:	4611      	mov	r1, r2
 800e3b0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e3b4:	f7fd b96a 	b.w	800b68c <_malloc_r>
 800e3b8:	b922      	cbnz	r2, 800e3c4 <_realloc_r+0x20>
 800e3ba:	f7fd f91b 	bl	800b5f4 <_free_r>
 800e3be:	4625      	mov	r5, r4
 800e3c0:	4628      	mov	r0, r5
 800e3c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e3c4:	f000 f85c 	bl	800e480 <_malloc_usable_size_r>
 800e3c8:	42a0      	cmp	r0, r4
 800e3ca:	d20f      	bcs.n	800e3ec <_realloc_r+0x48>
 800e3cc:	4621      	mov	r1, r4
 800e3ce:	4638      	mov	r0, r7
 800e3d0:	f7fd f95c 	bl	800b68c <_malloc_r>
 800e3d4:	4605      	mov	r5, r0
 800e3d6:	2800      	cmp	r0, #0
 800e3d8:	d0f2      	beq.n	800e3c0 <_realloc_r+0x1c>
 800e3da:	4631      	mov	r1, r6
 800e3dc:	4622      	mov	r2, r4
 800e3de:	f7fe fec8 	bl	800d172 <memcpy>
 800e3e2:	4631      	mov	r1, r6
 800e3e4:	4638      	mov	r0, r7
 800e3e6:	f7fd f905 	bl	800b5f4 <_free_r>
 800e3ea:	e7e9      	b.n	800e3c0 <_realloc_r+0x1c>
 800e3ec:	4635      	mov	r5, r6
 800e3ee:	e7e7      	b.n	800e3c0 <_realloc_r+0x1c>

0800e3f0 <_read_r>:
 800e3f0:	b538      	push	{r3, r4, r5, lr}
 800e3f2:	4604      	mov	r4, r0
 800e3f4:	4608      	mov	r0, r1
 800e3f6:	4611      	mov	r1, r2
 800e3f8:	2200      	movs	r2, #0
 800e3fa:	4d05      	ldr	r5, [pc, #20]	; (800e410 <_read_r+0x20>)
 800e3fc:	602a      	str	r2, [r5, #0]
 800e3fe:	461a      	mov	r2, r3
 800e400:	f7f4 fabd 	bl	800297e <_read>
 800e404:	1c43      	adds	r3, r0, #1
 800e406:	d102      	bne.n	800e40e <_read_r+0x1e>
 800e408:	682b      	ldr	r3, [r5, #0]
 800e40a:	b103      	cbz	r3, 800e40e <_read_r+0x1e>
 800e40c:	6023      	str	r3, [r4, #0]
 800e40e:	bd38      	pop	{r3, r4, r5, pc}
 800e410:	20000bbc 	.word	0x20000bbc

0800e414 <__ascii_wctomb>:
 800e414:	4603      	mov	r3, r0
 800e416:	4608      	mov	r0, r1
 800e418:	b141      	cbz	r1, 800e42c <__ascii_wctomb+0x18>
 800e41a:	2aff      	cmp	r2, #255	; 0xff
 800e41c:	d904      	bls.n	800e428 <__ascii_wctomb+0x14>
 800e41e:	228a      	movs	r2, #138	; 0x8a
 800e420:	f04f 30ff 	mov.w	r0, #4294967295
 800e424:	601a      	str	r2, [r3, #0]
 800e426:	4770      	bx	lr
 800e428:	2001      	movs	r0, #1
 800e42a:	700a      	strb	r2, [r1, #0]
 800e42c:	4770      	bx	lr

0800e42e <abort>:
 800e42e:	2006      	movs	r0, #6
 800e430:	b508      	push	{r3, lr}
 800e432:	f000 f855 	bl	800e4e0 <raise>
 800e436:	2001      	movs	r0, #1
 800e438:	f7f4 fa97 	bl	800296a <_exit>

0800e43c <_fstat_r>:
 800e43c:	b538      	push	{r3, r4, r5, lr}
 800e43e:	2300      	movs	r3, #0
 800e440:	4d06      	ldr	r5, [pc, #24]	; (800e45c <_fstat_r+0x20>)
 800e442:	4604      	mov	r4, r0
 800e444:	4608      	mov	r0, r1
 800e446:	4611      	mov	r1, r2
 800e448:	602b      	str	r3, [r5, #0]
 800e44a:	f7f4 faea 	bl	8002a22 <_fstat>
 800e44e:	1c43      	adds	r3, r0, #1
 800e450:	d102      	bne.n	800e458 <_fstat_r+0x1c>
 800e452:	682b      	ldr	r3, [r5, #0]
 800e454:	b103      	cbz	r3, 800e458 <_fstat_r+0x1c>
 800e456:	6023      	str	r3, [r4, #0]
 800e458:	bd38      	pop	{r3, r4, r5, pc}
 800e45a:	bf00      	nop
 800e45c:	20000bbc 	.word	0x20000bbc

0800e460 <_isatty_r>:
 800e460:	b538      	push	{r3, r4, r5, lr}
 800e462:	2300      	movs	r3, #0
 800e464:	4d05      	ldr	r5, [pc, #20]	; (800e47c <_isatty_r+0x1c>)
 800e466:	4604      	mov	r4, r0
 800e468:	4608      	mov	r0, r1
 800e46a:	602b      	str	r3, [r5, #0]
 800e46c:	f7f4 fae8 	bl	8002a40 <_isatty>
 800e470:	1c43      	adds	r3, r0, #1
 800e472:	d102      	bne.n	800e47a <_isatty_r+0x1a>
 800e474:	682b      	ldr	r3, [r5, #0]
 800e476:	b103      	cbz	r3, 800e47a <_isatty_r+0x1a>
 800e478:	6023      	str	r3, [r4, #0]
 800e47a:	bd38      	pop	{r3, r4, r5, pc}
 800e47c:	20000bbc 	.word	0x20000bbc

0800e480 <_malloc_usable_size_r>:
 800e480:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e484:	1f18      	subs	r0, r3, #4
 800e486:	2b00      	cmp	r3, #0
 800e488:	bfbc      	itt	lt
 800e48a:	580b      	ldrlt	r3, [r1, r0]
 800e48c:	18c0      	addlt	r0, r0, r3
 800e48e:	4770      	bx	lr

0800e490 <_raise_r>:
 800e490:	291f      	cmp	r1, #31
 800e492:	b538      	push	{r3, r4, r5, lr}
 800e494:	4604      	mov	r4, r0
 800e496:	460d      	mov	r5, r1
 800e498:	d904      	bls.n	800e4a4 <_raise_r+0x14>
 800e49a:	2316      	movs	r3, #22
 800e49c:	6003      	str	r3, [r0, #0]
 800e49e:	f04f 30ff 	mov.w	r0, #4294967295
 800e4a2:	bd38      	pop	{r3, r4, r5, pc}
 800e4a4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e4a6:	b112      	cbz	r2, 800e4ae <_raise_r+0x1e>
 800e4a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e4ac:	b94b      	cbnz	r3, 800e4c2 <_raise_r+0x32>
 800e4ae:	4620      	mov	r0, r4
 800e4b0:	f000 f830 	bl	800e514 <_getpid_r>
 800e4b4:	462a      	mov	r2, r5
 800e4b6:	4601      	mov	r1, r0
 800e4b8:	4620      	mov	r0, r4
 800e4ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e4be:	f000 b817 	b.w	800e4f0 <_kill_r>
 800e4c2:	2b01      	cmp	r3, #1
 800e4c4:	d00a      	beq.n	800e4dc <_raise_r+0x4c>
 800e4c6:	1c59      	adds	r1, r3, #1
 800e4c8:	d103      	bne.n	800e4d2 <_raise_r+0x42>
 800e4ca:	2316      	movs	r3, #22
 800e4cc:	6003      	str	r3, [r0, #0]
 800e4ce:	2001      	movs	r0, #1
 800e4d0:	e7e7      	b.n	800e4a2 <_raise_r+0x12>
 800e4d2:	2400      	movs	r4, #0
 800e4d4:	4628      	mov	r0, r5
 800e4d6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e4da:	4798      	blx	r3
 800e4dc:	2000      	movs	r0, #0
 800e4de:	e7e0      	b.n	800e4a2 <_raise_r+0x12>

0800e4e0 <raise>:
 800e4e0:	4b02      	ldr	r3, [pc, #8]	; (800e4ec <raise+0xc>)
 800e4e2:	4601      	mov	r1, r0
 800e4e4:	6818      	ldr	r0, [r3, #0]
 800e4e6:	f7ff bfd3 	b.w	800e490 <_raise_r>
 800e4ea:	bf00      	nop
 800e4ec:	2000001c 	.word	0x2000001c

0800e4f0 <_kill_r>:
 800e4f0:	b538      	push	{r3, r4, r5, lr}
 800e4f2:	2300      	movs	r3, #0
 800e4f4:	4d06      	ldr	r5, [pc, #24]	; (800e510 <_kill_r+0x20>)
 800e4f6:	4604      	mov	r4, r0
 800e4f8:	4608      	mov	r0, r1
 800e4fa:	4611      	mov	r1, r2
 800e4fc:	602b      	str	r3, [r5, #0]
 800e4fe:	f7f4 fa24 	bl	800294a <_kill>
 800e502:	1c43      	adds	r3, r0, #1
 800e504:	d102      	bne.n	800e50c <_kill_r+0x1c>
 800e506:	682b      	ldr	r3, [r5, #0]
 800e508:	b103      	cbz	r3, 800e50c <_kill_r+0x1c>
 800e50a:	6023      	str	r3, [r4, #0]
 800e50c:	bd38      	pop	{r3, r4, r5, pc}
 800e50e:	bf00      	nop
 800e510:	20000bbc 	.word	0x20000bbc

0800e514 <_getpid_r>:
 800e514:	f7f4 ba12 	b.w	800293c <_getpid>

0800e518 <_init>:
 800e518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e51a:	bf00      	nop
 800e51c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e51e:	bc08      	pop	{r3}
 800e520:	469e      	mov	lr, r3
 800e522:	4770      	bx	lr

0800e524 <_fini>:
 800e524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e526:	bf00      	nop
 800e528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e52a:	bc08      	pop	{r3}
 800e52c:	469e      	mov	lr, r3
 800e52e:	4770      	bx	lr
