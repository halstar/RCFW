
RCFW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b310  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f9c  0800b4f4  0800b4f4  0001b4f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c490  0800c490  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  0800c490  0800c490  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c490  0800c490  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c490  0800c490  0001c490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c494  0800c494  0001c494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800c498  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000904  20000080  0800c518  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000984  0800c518  00020984  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ae96  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e0c  00000000  00000000  0003af3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001418  00000000  00000000  0003ed50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001260  00000000  00000000  00040168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001eac2  00000000  00000000  000413c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b8e3  00000000  00000000  0005fe8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a59d3  00000000  00000000  0007b76d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00121140  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b14  00000000  00000000  00121194  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000080 	.word	0x20000080
 8000200:	00000000 	.word	0x00000000
 8000204:	0800b4dc 	.word	0x0800b4dc

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000084 	.word	0x20000084
 8000220:	0800b4dc 	.word	0x0800b4dc

08000224 <__aeabi_frsub>:
 8000224:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000228:	e002      	b.n	8000230 <__addsf3>
 800022a:	bf00      	nop

0800022c <__aeabi_fsub>:
 800022c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000230 <__addsf3>:
 8000230:	0042      	lsls	r2, r0, #1
 8000232:	bf1f      	itttt	ne
 8000234:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000238:	ea92 0f03 	teqne	r2, r3
 800023c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000240:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000244:	d06a      	beq.n	800031c <__addsf3+0xec>
 8000246:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800024a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800024e:	bfc1      	itttt	gt
 8000250:	18d2      	addgt	r2, r2, r3
 8000252:	4041      	eorgt	r1, r0
 8000254:	4048      	eorgt	r0, r1
 8000256:	4041      	eorgt	r1, r0
 8000258:	bfb8      	it	lt
 800025a:	425b      	neglt	r3, r3
 800025c:	2b19      	cmp	r3, #25
 800025e:	bf88      	it	hi
 8000260:	4770      	bxhi	lr
 8000262:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000266:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800026a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800026e:	bf18      	it	ne
 8000270:	4240      	negne	r0, r0
 8000272:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000276:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800027a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800027e:	bf18      	it	ne
 8000280:	4249      	negne	r1, r1
 8000282:	ea92 0f03 	teq	r2, r3
 8000286:	d03f      	beq.n	8000308 <__addsf3+0xd8>
 8000288:	f1a2 0201 	sub.w	r2, r2, #1
 800028c:	fa41 fc03 	asr.w	ip, r1, r3
 8000290:	eb10 000c 	adds.w	r0, r0, ip
 8000294:	f1c3 0320 	rsb	r3, r3, #32
 8000298:	fa01 f103 	lsl.w	r1, r1, r3
 800029c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002a0:	d502      	bpl.n	80002a8 <__addsf3+0x78>
 80002a2:	4249      	negs	r1, r1
 80002a4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80002a8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80002ac:	d313      	bcc.n	80002d6 <__addsf3+0xa6>
 80002ae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002b2:	d306      	bcc.n	80002c2 <__addsf3+0x92>
 80002b4:	0840      	lsrs	r0, r0, #1
 80002b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80002ba:	f102 0201 	add.w	r2, r2, #1
 80002be:	2afe      	cmp	r2, #254	; 0xfe
 80002c0:	d251      	bcs.n	8000366 <__addsf3+0x136>
 80002c2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80002c6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80002ca:	bf08      	it	eq
 80002cc:	f020 0001 	biceq.w	r0, r0, #1
 80002d0:	ea40 0003 	orr.w	r0, r0, r3
 80002d4:	4770      	bx	lr
 80002d6:	0049      	lsls	r1, r1, #1
 80002d8:	eb40 0000 	adc.w	r0, r0, r0
 80002dc:	3a01      	subs	r2, #1
 80002de:	bf28      	it	cs
 80002e0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80002e4:	d2ed      	bcs.n	80002c2 <__addsf3+0x92>
 80002e6:	fab0 fc80 	clz	ip, r0
 80002ea:	f1ac 0c08 	sub.w	ip, ip, #8
 80002ee:	ebb2 020c 	subs.w	r2, r2, ip
 80002f2:	fa00 f00c 	lsl.w	r0, r0, ip
 80002f6:	bfaa      	itet	ge
 80002f8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80002fc:	4252      	neglt	r2, r2
 80002fe:	4318      	orrge	r0, r3
 8000300:	bfbc      	itt	lt
 8000302:	40d0      	lsrlt	r0, r2
 8000304:	4318      	orrlt	r0, r3
 8000306:	4770      	bx	lr
 8000308:	f092 0f00 	teq	r2, #0
 800030c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000310:	bf06      	itte	eq
 8000312:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000316:	3201      	addeq	r2, #1
 8000318:	3b01      	subne	r3, #1
 800031a:	e7b5      	b.n	8000288 <__addsf3+0x58>
 800031c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000320:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000324:	bf18      	it	ne
 8000326:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800032a:	d021      	beq.n	8000370 <__addsf3+0x140>
 800032c:	ea92 0f03 	teq	r2, r3
 8000330:	d004      	beq.n	800033c <__addsf3+0x10c>
 8000332:	f092 0f00 	teq	r2, #0
 8000336:	bf08      	it	eq
 8000338:	4608      	moveq	r0, r1
 800033a:	4770      	bx	lr
 800033c:	ea90 0f01 	teq	r0, r1
 8000340:	bf1c      	itt	ne
 8000342:	2000      	movne	r0, #0
 8000344:	4770      	bxne	lr
 8000346:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800034a:	d104      	bne.n	8000356 <__addsf3+0x126>
 800034c:	0040      	lsls	r0, r0, #1
 800034e:	bf28      	it	cs
 8000350:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000354:	4770      	bx	lr
 8000356:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800035a:	bf3c      	itt	cc
 800035c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000360:	4770      	bxcc	lr
 8000362:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000366:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800036a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800036e:	4770      	bx	lr
 8000370:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000374:	bf16      	itet	ne
 8000376:	4608      	movne	r0, r1
 8000378:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800037c:	4601      	movne	r1, r0
 800037e:	0242      	lsls	r2, r0, #9
 8000380:	bf06      	itte	eq
 8000382:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000386:	ea90 0f01 	teqeq	r0, r1
 800038a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800038e:	4770      	bx	lr

08000390 <__aeabi_ui2f>:
 8000390:	f04f 0300 	mov.w	r3, #0
 8000394:	e004      	b.n	80003a0 <__aeabi_i2f+0x8>
 8000396:	bf00      	nop

08000398 <__aeabi_i2f>:
 8000398:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 800039c:	bf48      	it	mi
 800039e:	4240      	negmi	r0, r0
 80003a0:	ea5f 0c00 	movs.w	ip, r0
 80003a4:	bf08      	it	eq
 80003a6:	4770      	bxeq	lr
 80003a8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80003ac:	4601      	mov	r1, r0
 80003ae:	f04f 0000 	mov.w	r0, #0
 80003b2:	e01c      	b.n	80003ee <__aeabi_l2f+0x2a>

080003b4 <__aeabi_ul2f>:
 80003b4:	ea50 0201 	orrs.w	r2, r0, r1
 80003b8:	bf08      	it	eq
 80003ba:	4770      	bxeq	lr
 80003bc:	f04f 0300 	mov.w	r3, #0
 80003c0:	e00a      	b.n	80003d8 <__aeabi_l2f+0x14>
 80003c2:	bf00      	nop

080003c4 <__aeabi_l2f>:
 80003c4:	ea50 0201 	orrs.w	r2, r0, r1
 80003c8:	bf08      	it	eq
 80003ca:	4770      	bxeq	lr
 80003cc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80003d0:	d502      	bpl.n	80003d8 <__aeabi_l2f+0x14>
 80003d2:	4240      	negs	r0, r0
 80003d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003d8:	ea5f 0c01 	movs.w	ip, r1
 80003dc:	bf02      	ittt	eq
 80003de:	4684      	moveq	ip, r0
 80003e0:	4601      	moveq	r1, r0
 80003e2:	2000      	moveq	r0, #0
 80003e4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80003e8:	bf08      	it	eq
 80003ea:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80003ee:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80003f2:	fabc f28c 	clz	r2, ip
 80003f6:	3a08      	subs	r2, #8
 80003f8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80003fc:	db10      	blt.n	8000420 <__aeabi_l2f+0x5c>
 80003fe:	fa01 fc02 	lsl.w	ip, r1, r2
 8000402:	4463      	add	r3, ip
 8000404:	fa00 fc02 	lsl.w	ip, r0, r2
 8000408:	f1c2 0220 	rsb	r2, r2, #32
 800040c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000410:	fa20 f202 	lsr.w	r2, r0, r2
 8000414:	eb43 0002 	adc.w	r0, r3, r2
 8000418:	bf08      	it	eq
 800041a:	f020 0001 	biceq.w	r0, r0, #1
 800041e:	4770      	bx	lr
 8000420:	f102 0220 	add.w	r2, r2, #32
 8000424:	fa01 fc02 	lsl.w	ip, r1, r2
 8000428:	f1c2 0220 	rsb	r2, r2, #32
 800042c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000430:	fa21 f202 	lsr.w	r2, r1, r2
 8000434:	eb43 0002 	adc.w	r0, r3, r2
 8000438:	bf08      	it	eq
 800043a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800043e:	4770      	bx	lr

08000440 <__aeabi_fmul>:
 8000440:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000444:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000448:	bf1e      	ittt	ne
 800044a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800044e:	ea92 0f0c 	teqne	r2, ip
 8000452:	ea93 0f0c 	teqne	r3, ip
 8000456:	d06f      	beq.n	8000538 <__aeabi_fmul+0xf8>
 8000458:	441a      	add	r2, r3
 800045a:	ea80 0c01 	eor.w	ip, r0, r1
 800045e:	0240      	lsls	r0, r0, #9
 8000460:	bf18      	it	ne
 8000462:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000466:	d01e      	beq.n	80004a6 <__aeabi_fmul+0x66>
 8000468:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800046c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000470:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000474:	fba0 3101 	umull	r3, r1, r0, r1
 8000478:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800047c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000480:	bf3e      	ittt	cc
 8000482:	0049      	lslcc	r1, r1, #1
 8000484:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000488:	005b      	lslcc	r3, r3, #1
 800048a:	ea40 0001 	orr.w	r0, r0, r1
 800048e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000492:	2afd      	cmp	r2, #253	; 0xfd
 8000494:	d81d      	bhi.n	80004d2 <__aeabi_fmul+0x92>
 8000496:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800049a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800049e:	bf08      	it	eq
 80004a0:	f020 0001 	biceq.w	r0, r0, #1
 80004a4:	4770      	bx	lr
 80004a6:	f090 0f00 	teq	r0, #0
 80004aa:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80004ae:	bf08      	it	eq
 80004b0:	0249      	lsleq	r1, r1, #9
 80004b2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80004b6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80004ba:	3a7f      	subs	r2, #127	; 0x7f
 80004bc:	bfc2      	ittt	gt
 80004be:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80004c2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80004c6:	4770      	bxgt	lr
 80004c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004cc:	f04f 0300 	mov.w	r3, #0
 80004d0:	3a01      	subs	r2, #1
 80004d2:	dc5d      	bgt.n	8000590 <__aeabi_fmul+0x150>
 80004d4:	f112 0f19 	cmn.w	r2, #25
 80004d8:	bfdc      	itt	le
 80004da:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80004de:	4770      	bxle	lr
 80004e0:	f1c2 0200 	rsb	r2, r2, #0
 80004e4:	0041      	lsls	r1, r0, #1
 80004e6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ea:	f1c2 0220 	rsb	r2, r2, #32
 80004ee:	fa00 fc02 	lsl.w	ip, r0, r2
 80004f2:	ea5f 0031 	movs.w	r0, r1, rrx
 80004f6:	f140 0000 	adc.w	r0, r0, #0
 80004fa:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80004fe:	bf08      	it	eq
 8000500:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000504:	4770      	bx	lr
 8000506:	f092 0f00 	teq	r2, #0
 800050a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800050e:	bf02      	ittt	eq
 8000510:	0040      	lsleq	r0, r0, #1
 8000512:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000516:	3a01      	subeq	r2, #1
 8000518:	d0f9      	beq.n	800050e <__aeabi_fmul+0xce>
 800051a:	ea40 000c 	orr.w	r0, r0, ip
 800051e:	f093 0f00 	teq	r3, #0
 8000522:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000526:	bf02      	ittt	eq
 8000528:	0049      	lsleq	r1, r1, #1
 800052a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800052e:	3b01      	subeq	r3, #1
 8000530:	d0f9      	beq.n	8000526 <__aeabi_fmul+0xe6>
 8000532:	ea41 010c 	orr.w	r1, r1, ip
 8000536:	e78f      	b.n	8000458 <__aeabi_fmul+0x18>
 8000538:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800053c:	ea92 0f0c 	teq	r2, ip
 8000540:	bf18      	it	ne
 8000542:	ea93 0f0c 	teqne	r3, ip
 8000546:	d00a      	beq.n	800055e <__aeabi_fmul+0x11e>
 8000548:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800054c:	bf18      	it	ne
 800054e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000552:	d1d8      	bne.n	8000506 <__aeabi_fmul+0xc6>
 8000554:	ea80 0001 	eor.w	r0, r0, r1
 8000558:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800055c:	4770      	bx	lr
 800055e:	f090 0f00 	teq	r0, #0
 8000562:	bf17      	itett	ne
 8000564:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000568:	4608      	moveq	r0, r1
 800056a:	f091 0f00 	teqne	r1, #0
 800056e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000572:	d014      	beq.n	800059e <__aeabi_fmul+0x15e>
 8000574:	ea92 0f0c 	teq	r2, ip
 8000578:	d101      	bne.n	800057e <__aeabi_fmul+0x13e>
 800057a:	0242      	lsls	r2, r0, #9
 800057c:	d10f      	bne.n	800059e <__aeabi_fmul+0x15e>
 800057e:	ea93 0f0c 	teq	r3, ip
 8000582:	d103      	bne.n	800058c <__aeabi_fmul+0x14c>
 8000584:	024b      	lsls	r3, r1, #9
 8000586:	bf18      	it	ne
 8000588:	4608      	movne	r0, r1
 800058a:	d108      	bne.n	800059e <__aeabi_fmul+0x15e>
 800058c:	ea80 0001 	eor.w	r0, r0, r1
 8000590:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000594:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000598:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800059c:	4770      	bx	lr
 800059e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005a2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80005a6:	4770      	bx	lr

080005a8 <__aeabi_fdiv>:
 80005a8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80005b0:	bf1e      	ittt	ne
 80005b2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80005b6:	ea92 0f0c 	teqne	r2, ip
 80005ba:	ea93 0f0c 	teqne	r3, ip
 80005be:	d069      	beq.n	8000694 <__aeabi_fdiv+0xec>
 80005c0:	eba2 0203 	sub.w	r2, r2, r3
 80005c4:	ea80 0c01 	eor.w	ip, r0, r1
 80005c8:	0249      	lsls	r1, r1, #9
 80005ca:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80005ce:	d037      	beq.n	8000640 <__aeabi_fdiv+0x98>
 80005d0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80005d4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80005d8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80005dc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80005e0:	428b      	cmp	r3, r1
 80005e2:	bf38      	it	cc
 80005e4:	005b      	lslcc	r3, r3, #1
 80005e6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80005ea:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80005ee:	428b      	cmp	r3, r1
 80005f0:	bf24      	itt	cs
 80005f2:	1a5b      	subcs	r3, r3, r1
 80005f4:	ea40 000c 	orrcs.w	r0, r0, ip
 80005f8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80005fc:	bf24      	itt	cs
 80005fe:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000602:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000606:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800060a:	bf24      	itt	cs
 800060c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000610:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000614:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000618:	bf24      	itt	cs
 800061a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800061e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000622:	011b      	lsls	r3, r3, #4
 8000624:	bf18      	it	ne
 8000626:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800062a:	d1e0      	bne.n	80005ee <__aeabi_fdiv+0x46>
 800062c:	2afd      	cmp	r2, #253	; 0xfd
 800062e:	f63f af50 	bhi.w	80004d2 <__aeabi_fmul+0x92>
 8000632:	428b      	cmp	r3, r1
 8000634:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000638:	bf08      	it	eq
 800063a:	f020 0001 	biceq.w	r0, r0, #1
 800063e:	4770      	bx	lr
 8000640:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000644:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000648:	327f      	adds	r2, #127	; 0x7f
 800064a:	bfc2      	ittt	gt
 800064c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000650:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000654:	4770      	bxgt	lr
 8000656:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800065a:	f04f 0300 	mov.w	r3, #0
 800065e:	3a01      	subs	r2, #1
 8000660:	e737      	b.n	80004d2 <__aeabi_fmul+0x92>
 8000662:	f092 0f00 	teq	r2, #0
 8000666:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800066a:	bf02      	ittt	eq
 800066c:	0040      	lsleq	r0, r0, #1
 800066e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000672:	3a01      	subeq	r2, #1
 8000674:	d0f9      	beq.n	800066a <__aeabi_fdiv+0xc2>
 8000676:	ea40 000c 	orr.w	r0, r0, ip
 800067a:	f093 0f00 	teq	r3, #0
 800067e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000682:	bf02      	ittt	eq
 8000684:	0049      	lsleq	r1, r1, #1
 8000686:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800068a:	3b01      	subeq	r3, #1
 800068c:	d0f9      	beq.n	8000682 <__aeabi_fdiv+0xda>
 800068e:	ea41 010c 	orr.w	r1, r1, ip
 8000692:	e795      	b.n	80005c0 <__aeabi_fdiv+0x18>
 8000694:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000698:	ea92 0f0c 	teq	r2, ip
 800069c:	d108      	bne.n	80006b0 <__aeabi_fdiv+0x108>
 800069e:	0242      	lsls	r2, r0, #9
 80006a0:	f47f af7d 	bne.w	800059e <__aeabi_fmul+0x15e>
 80006a4:	ea93 0f0c 	teq	r3, ip
 80006a8:	f47f af70 	bne.w	800058c <__aeabi_fmul+0x14c>
 80006ac:	4608      	mov	r0, r1
 80006ae:	e776      	b.n	800059e <__aeabi_fmul+0x15e>
 80006b0:	ea93 0f0c 	teq	r3, ip
 80006b4:	d104      	bne.n	80006c0 <__aeabi_fdiv+0x118>
 80006b6:	024b      	lsls	r3, r1, #9
 80006b8:	f43f af4c 	beq.w	8000554 <__aeabi_fmul+0x114>
 80006bc:	4608      	mov	r0, r1
 80006be:	e76e      	b.n	800059e <__aeabi_fmul+0x15e>
 80006c0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80006c4:	bf18      	it	ne
 80006c6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80006ca:	d1ca      	bne.n	8000662 <__aeabi_fdiv+0xba>
 80006cc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80006d0:	f47f af5c 	bne.w	800058c <__aeabi_fmul+0x14c>
 80006d4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80006d8:	f47f af3c 	bne.w	8000554 <__aeabi_fmul+0x114>
 80006dc:	e75f      	b.n	800059e <__aeabi_fmul+0x15e>
 80006de:	bf00      	nop

080006e0 <__gesf2>:
 80006e0:	f04f 3cff 	mov.w	ip, #4294967295
 80006e4:	e006      	b.n	80006f4 <__cmpsf2+0x4>
 80006e6:	bf00      	nop

080006e8 <__lesf2>:
 80006e8:	f04f 0c01 	mov.w	ip, #1
 80006ec:	e002      	b.n	80006f4 <__cmpsf2+0x4>
 80006ee:	bf00      	nop

080006f0 <__cmpsf2>:
 80006f0:	f04f 0c01 	mov.w	ip, #1
 80006f4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80006f8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80006fc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000700:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000704:	bf18      	it	ne
 8000706:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800070a:	d011      	beq.n	8000730 <__cmpsf2+0x40>
 800070c:	b001      	add	sp, #4
 800070e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000712:	bf18      	it	ne
 8000714:	ea90 0f01 	teqne	r0, r1
 8000718:	bf58      	it	pl
 800071a:	ebb2 0003 	subspl.w	r0, r2, r3
 800071e:	bf88      	it	hi
 8000720:	17c8      	asrhi	r0, r1, #31
 8000722:	bf38      	it	cc
 8000724:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000728:	bf18      	it	ne
 800072a:	f040 0001 	orrne.w	r0, r0, #1
 800072e:	4770      	bx	lr
 8000730:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000734:	d102      	bne.n	800073c <__cmpsf2+0x4c>
 8000736:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800073a:	d105      	bne.n	8000748 <__cmpsf2+0x58>
 800073c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000740:	d1e4      	bne.n	800070c <__cmpsf2+0x1c>
 8000742:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000746:	d0e1      	beq.n	800070c <__cmpsf2+0x1c>
 8000748:	f85d 0b04 	ldr.w	r0, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop

08000750 <__aeabi_cfrcmple>:
 8000750:	4684      	mov	ip, r0
 8000752:	4608      	mov	r0, r1
 8000754:	4661      	mov	r1, ip
 8000756:	e7ff      	b.n	8000758 <__aeabi_cfcmpeq>

08000758 <__aeabi_cfcmpeq>:
 8000758:	b50f      	push	{r0, r1, r2, r3, lr}
 800075a:	f7ff ffc9 	bl	80006f0 <__cmpsf2>
 800075e:	2800      	cmp	r0, #0
 8000760:	bf48      	it	mi
 8000762:	f110 0f00 	cmnmi.w	r0, #0
 8000766:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000768 <__aeabi_fcmpeq>:
 8000768:	f84d ed08 	str.w	lr, [sp, #-8]!
 800076c:	f7ff fff4 	bl	8000758 <__aeabi_cfcmpeq>
 8000770:	bf0c      	ite	eq
 8000772:	2001      	moveq	r0, #1
 8000774:	2000      	movne	r0, #0
 8000776:	f85d fb08 	ldr.w	pc, [sp], #8
 800077a:	bf00      	nop

0800077c <__aeabi_fcmplt>:
 800077c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000780:	f7ff ffea 	bl	8000758 <__aeabi_cfcmpeq>
 8000784:	bf34      	ite	cc
 8000786:	2001      	movcc	r0, #1
 8000788:	2000      	movcs	r0, #0
 800078a:	f85d fb08 	ldr.w	pc, [sp], #8
 800078e:	bf00      	nop

08000790 <__aeabi_fcmple>:
 8000790:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000794:	f7ff ffe0 	bl	8000758 <__aeabi_cfcmpeq>
 8000798:	bf94      	ite	ls
 800079a:	2001      	movls	r0, #1
 800079c:	2000      	movhi	r0, #0
 800079e:	f85d fb08 	ldr.w	pc, [sp], #8
 80007a2:	bf00      	nop

080007a4 <__aeabi_fcmpge>:
 80007a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007a8:	f7ff ffd2 	bl	8000750 <__aeabi_cfrcmple>
 80007ac:	bf94      	ite	ls
 80007ae:	2001      	movls	r0, #1
 80007b0:	2000      	movhi	r0, #0
 80007b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80007b6:	bf00      	nop

080007b8 <__aeabi_fcmpgt>:
 80007b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007bc:	f7ff ffc8 	bl	8000750 <__aeabi_cfrcmple>
 80007c0:	bf34      	ite	cc
 80007c2:	2001      	movcc	r0, #1
 80007c4:	2000      	movcs	r0, #0
 80007c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80007ca:	bf00      	nop

080007cc <__aeabi_f2iz>:
 80007cc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80007d0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80007d4:	d30f      	bcc.n	80007f6 <__aeabi_f2iz+0x2a>
 80007d6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80007da:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80007de:	d90d      	bls.n	80007fc <__aeabi_f2iz+0x30>
 80007e0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80007e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007e8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80007ec:	fa23 f002 	lsr.w	r0, r3, r2
 80007f0:	bf18      	it	ne
 80007f2:	4240      	negne	r0, r0
 80007f4:	4770      	bx	lr
 80007f6:	f04f 0000 	mov.w	r0, #0
 80007fa:	4770      	bx	lr
 80007fc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000800:	d101      	bne.n	8000806 <__aeabi_f2iz+0x3a>
 8000802:	0242      	lsls	r2, r0, #9
 8000804:	d105      	bne.n	8000812 <__aeabi_f2iz+0x46>
 8000806:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800080a:	bf08      	it	eq
 800080c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000810:	4770      	bx	lr
 8000812:	f04f 0000 	mov.w	r0, #0
 8000816:	4770      	bx	lr

08000818 <__aeabi_f2uiz>:
 8000818:	0042      	lsls	r2, r0, #1
 800081a:	d20e      	bcs.n	800083a <__aeabi_f2uiz+0x22>
 800081c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000820:	d30b      	bcc.n	800083a <__aeabi_f2uiz+0x22>
 8000822:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000826:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800082a:	d409      	bmi.n	8000840 <__aeabi_f2uiz+0x28>
 800082c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000830:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000834:	fa23 f002 	lsr.w	r0, r3, r2
 8000838:	4770      	bx	lr
 800083a:	f04f 0000 	mov.w	r0, #0
 800083e:	4770      	bx	lr
 8000840:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000844:	d101      	bne.n	800084a <__aeabi_f2uiz+0x32>
 8000846:	0242      	lsls	r2, r0, #9
 8000848:	d102      	bne.n	8000850 <__aeabi_f2uiz+0x38>
 800084a:	f04f 30ff 	mov.w	r0, #4294967295
 800084e:	4770      	bx	lr
 8000850:	f04f 0000 	mov.w	r0, #0
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop

08000858 <MAIN_displayRcfwBanner>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static void MAIN_displayRcfwBanner(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* Used ASCII art generator from https://patorjk.com with font called "Colossal" */
  LOG_info("");
 800085c:	4914      	ldr	r1, [pc, #80]	; (80008b0 <MAIN_displayRcfwBanner+0x58>)
 800085e:	2001      	movs	r0, #1
 8000860:	f009 f9ac 	bl	8009bbc <LOG_log>
  LOG_info("    8888888b.        .d8888b.       8888888888      888       888"  );
 8000864:	4913      	ldr	r1, [pc, #76]	; (80008b4 <MAIN_displayRcfwBanner+0x5c>)
 8000866:	2001      	movs	r0, #1
 8000868:	f009 f9a8 	bl	8009bbc <LOG_log>
  LOG_info("    888   Y88b      d88P  Y88b      888             888   o   888"  );
 800086c:	4912      	ldr	r1, [pc, #72]	; (80008b8 <MAIN_displayRcfwBanner+0x60>)
 800086e:	2001      	movs	r0, #1
 8000870:	f009 f9a4 	bl	8009bbc <LOG_log>
  LOG_info("    888    888      888    888      888             888  d8b  888"  );
 8000874:	4911      	ldr	r1, [pc, #68]	; (80008bc <MAIN_displayRcfwBanner+0x64>)
 8000876:	2001      	movs	r0, #1
 8000878:	f009 f9a0 	bl	8009bbc <LOG_log>
  LOG_info("    888   d88P      888             8888888         888 d888b 888"  );
 800087c:	4910      	ldr	r1, [pc, #64]	; (80008c0 <MAIN_displayRcfwBanner+0x68>)
 800087e:	2001      	movs	r0, #1
 8000880:	f009 f99c 	bl	8009bbc <LOG_log>
  LOG_info("    8888888P\"       888             888             888d88888b888" );
 8000884:	490f      	ldr	r1, [pc, #60]	; (80008c4 <MAIN_displayRcfwBanner+0x6c>)
 8000886:	2001      	movs	r0, #1
 8000888:	f009 f998 	bl	8009bbc <LOG_log>
  LOG_info("    888 T88b        888    888      888             88888P Y88888"  );
 800088c:	490e      	ldr	r1, [pc, #56]	; (80008c8 <MAIN_displayRcfwBanner+0x70>)
 800088e:	2001      	movs	r0, #1
 8000890:	f009 f994 	bl	8009bbc <LOG_log>
  LOG_info("    888  T88b       Y88b  d88P      888             8888P   Y8888"  );
 8000894:	490d      	ldr	r1, [pc, #52]	; (80008cc <MAIN_displayRcfwBanner+0x74>)
 8000896:	2001      	movs	r0, #1
 8000898:	f009 f990 	bl	8009bbc <LOG_log>
  LOG_info("    888   T88b       \"Y8888P\"       888             888P     Y888");
 800089c:	490c      	ldr	r1, [pc, #48]	; (80008d0 <MAIN_displayRcfwBanner+0x78>)
 800089e:	2001      	movs	r0, #1
 80008a0:	f009 f98c 	bl	8009bbc <LOG_log>
  LOG_info("");
 80008a4:	4902      	ldr	r1, [pc, #8]	; (80008b0 <MAIN_displayRcfwBanner+0x58>)
 80008a6:	2001      	movs	r0, #1
 80008a8:	f009 f988 	bl	8009bbc <LOG_log>

  return;
 80008ac:	bf00      	nop
}
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	0800b4f4 	.word	0x0800b4f4
 80008b4:	0800b4f8 	.word	0x0800b4f8
 80008b8:	0800b53c 	.word	0x0800b53c
 80008bc:	0800b580 	.word	0x0800b580
 80008c0:	0800b5c4 	.word	0x0800b5c4
 80008c4:	0800b608 	.word	0x0800b608
 80008c8:	0800b64c 	.word	0x0800b64c
 80008cc:	0800b690 	.word	0x0800b690
 80008d0:	0800b6d4 	.word	0x0800b6d4

080008d4 <MAIN_updateLogLevel>:

static void MAIN_updateLogLevel(T_BLU_Data *p_data)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  RTC_TimeTypeDef l_time;
  RTC_DateTypeDef l_date;

  /* As this method is using for logging/debug, we will not deal with failure cases */
  (void)HAL_RTC_GetTime(&hrtc, &l_time, RTC_FORMAT_BCD);
 80008dc:	f107 030c 	add.w	r3, r7, #12
 80008e0:	2201      	movs	r2, #1
 80008e2:	4619      	mov	r1, r3
 80008e4:	4839      	ldr	r0, [pc, #228]	; (80009cc <MAIN_updateLogLevel+0xf8>)
 80008e6:	f004 f919 	bl	8004b1c <HAL_RTC_GetTime>
  (void)HAL_RTC_GetDate(&hrtc, &l_date, RTC_FORMAT_BCD);
 80008ea:	f107 0308 	add.w	r3, r7, #8
 80008ee:	2201      	movs	r2, #1
 80008f0:	4619      	mov	r1, r3
 80008f2:	4836      	ldr	r0, [pc, #216]	; (80009cc <MAIN_updateLogLevel+0xf8>)
 80008f4:	f004 fb16 	bl	8004f24 <HAL_RTC_GetDate>

  switch (p_data->button)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	7c1b      	ldrb	r3, [r3, #16]
 80008fc:	3b05      	subs	r3, #5
 80008fe:	2b03      	cmp	r3, #3
 8000900:	d84c      	bhi.n	800099c <MAIN_updateLogLevel+0xc8>
 8000902:	a201      	add	r2, pc, #4	; (adr r2, 8000908 <MAIN_updateLogLevel+0x34>)
 8000904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000908:	08000919 	.word	0x08000919
 800090c:	08000997 	.word	0x08000997
 8000910:	08000955 	.word	0x08000955
 8000914:	08000991 	.word	0x08000991
  {
    case BLU_BUTTON_PAD_UP:
      if (g_MAIN_padUpPressedStartTime == 0)
 8000918:	4b2d      	ldr	r3, [pc, #180]	; (80009d0 <MAIN_updateLogLevel+0xfc>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d10a      	bne.n	8000936 <MAIN_updateLogLevel+0x62>
      {
        g_MAIN_padUpPressedStartTime = UTI_turnRtcTimeToSeconds(&l_time);
 8000920:	f107 030c 	add.w	r3, r7, #12
 8000924:	4618      	mov	r0, r3
 8000926:	f009 fd52 	bl	800a3ce <UTI_turnRtcTimeToSeconds>
 800092a:	4603      	mov	r3, r0
 800092c:	4a28      	ldr	r2, [pc, #160]	; (80009d0 <MAIN_updateLogLevel+0xfc>)
 800092e:	6013      	str	r3, [r2, #0]

        LOG_increaseLevel();
 8000930:	f009 f914 	bl	8009b5c <LOG_increaseLevel>
      }
      else
      {
        g_MAIN_padUpPressedStartTime = 0;
      }
      break;
 8000934:	e034      	b.n	80009a0 <MAIN_updateLogLevel+0xcc>
      else if (UTI_turnRtcTimeToSeconds(&l_time) - g_MAIN_padUpPressedStartTime < MAIN_PAD_BUTTON_PERIOD_IN_S)
 8000936:	f107 030c 	add.w	r3, r7, #12
 800093a:	4618      	mov	r0, r3
 800093c:	f009 fd47 	bl	800a3ce <UTI_turnRtcTimeToSeconds>
 8000940:	4602      	mov	r2, r0
 8000942:	4b23      	ldr	r3, [pc, #140]	; (80009d0 <MAIN_updateLogLevel+0xfc>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	1ad3      	subs	r3, r2, r3
 8000948:	2b01      	cmp	r3, #1
 800094a:	d929      	bls.n	80009a0 <MAIN_updateLogLevel+0xcc>
        g_MAIN_padUpPressedStartTime = 0;
 800094c:	4b20      	ldr	r3, [pc, #128]	; (80009d0 <MAIN_updateLogLevel+0xfc>)
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
      break;
 8000952:	e025      	b.n	80009a0 <MAIN_updateLogLevel+0xcc>

    case BLU_BUTTON_PAD_DOWN:
      if (g_MAIN_padDownPressedStartTime == 0)
 8000954:	4b1f      	ldr	r3, [pc, #124]	; (80009d4 <MAIN_updateLogLevel+0x100>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d10a      	bne.n	8000972 <MAIN_updateLogLevel+0x9e>
      {
        g_MAIN_padDownPressedStartTime = UTI_turnRtcTimeToSeconds(&l_time);
 800095c:	f107 030c 	add.w	r3, r7, #12
 8000960:	4618      	mov	r0, r3
 8000962:	f009 fd34 	bl	800a3ce <UTI_turnRtcTimeToSeconds>
 8000966:	4603      	mov	r3, r0
 8000968:	4a1a      	ldr	r2, [pc, #104]	; (80009d4 <MAIN_updateLogLevel+0x100>)
 800096a:	6013      	str	r3, [r2, #0]

        LOG_decreaseLevel();
 800096c:	f009 f90e 	bl	8009b8c <LOG_decreaseLevel>
      }
      else
      {
        g_MAIN_padDownPressedStartTime = 0;
      }
      break;
 8000970:	e018      	b.n	80009a4 <MAIN_updateLogLevel+0xd0>
      else if (UTI_turnRtcTimeToSeconds(&l_time) - g_MAIN_padDownPressedStartTime < MAIN_PAD_BUTTON_PERIOD_IN_S)
 8000972:	f107 030c 	add.w	r3, r7, #12
 8000976:	4618      	mov	r0, r3
 8000978:	f009 fd29 	bl	800a3ce <UTI_turnRtcTimeToSeconds>
 800097c:	4602      	mov	r2, r0
 800097e:	4b15      	ldr	r3, [pc, #84]	; (80009d4 <MAIN_updateLogLevel+0x100>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	1ad3      	subs	r3, r2, r3
 8000984:	2b01      	cmp	r3, #1
 8000986:	d90d      	bls.n	80009a4 <MAIN_updateLogLevel+0xd0>
        g_MAIN_padDownPressedStartTime = 0;
 8000988:	4b12      	ldr	r3, [pc, #72]	; (80009d4 <MAIN_updateLogLevel+0x100>)
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
      break;
 800098e:	e009      	b.n	80009a4 <MAIN_updateLogLevel+0xd0>

    case BLU_BUTTON_PAD_LEFT:
      LOG_turnOff();
 8000990:	f009 f8c0 	bl	8009b14 <LOG_turnOff>
      break;
 8000994:	e007      	b.n	80009a6 <MAIN_updateLogLevel+0xd2>

    case BLU_BUTTON_PAD_RIGHT:
      LOG_turnOn();
 8000996:	f009 f8a5 	bl	8009ae4 <LOG_turnOn>
      break;
 800099a:	e004      	b.n	80009a6 <MAIN_updateLogLevel+0xd2>

    default:
      ; /* Nothing to do */;
      break;
 800099c:	bf00      	nop
 800099e:	e002      	b.n	80009a6 <MAIN_updateLogLevel+0xd2>
      break;
 80009a0:	bf00      	nop
 80009a2:	e000      	b.n	80009a6 <MAIN_updateLogLevel+0xd2>
      break;
 80009a4:	bf00      	nop
  }

  if ((p_data->button != BLU_BUTTON_PAD_UP) && (p_data->button != BLU_BUTTON_PAD_DOWN))
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	7c1b      	ldrb	r3, [r3, #16]
 80009aa:	2b05      	cmp	r3, #5
 80009ac:	d00a      	beq.n	80009c4 <MAIN_updateLogLevel+0xf0>
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	7c1b      	ldrb	r3, [r3, #16]
 80009b2:	2b07      	cmp	r3, #7
 80009b4:	d006      	beq.n	80009c4 <MAIN_updateLogLevel+0xf0>
  {
    g_MAIN_padUpPressedStartTime   = 0;
 80009b6:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <MAIN_updateLogLevel+0xfc>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
    g_MAIN_padDownPressedStartTime = 0;
 80009bc:	4b05      	ldr	r3, [pc, #20]	; (80009d4 <MAIN_updateLogLevel+0x100>)
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
  else
  {
    ; /* Nothing to do */;
  }

  return;
 80009c2:	bf00      	nop
 80009c4:	bf00      	nop
}
 80009c6:	3710      	adds	r7, #16
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	20000618 	.word	0x20000618
 80009d0:	2000009c 	.word	0x2000009c
 80009d4:	200000a0 	.word	0x200000a0

080009d8 <MAIN_updateLedMode>:

static void MAIN_updateLedMode(T_DRV_MODE p_driveMode, uint32_t p_voltageInMv)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	6039      	str	r1, [r7, #0]
 80009e2:	71fb      	strb	r3, [r7, #7]
  /* Regarding LED mode, battery check is prioritary on user requests. */
  /* Ignore 0 value as we could get it at startup or while debugging.  */
  if ((p_voltageInMv != 0) && (p_voltageInMv < MAIN_MIN_BATTERY_LEVEL_IN_MV))
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d00d      	beq.n	8000a06 <MAIN_updateLedMode+0x2e>
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	f242 720f 	movw	r2, #9999	; 0x270f
 80009f0:	4293      	cmp	r3, r2
 80009f2:	d808      	bhi.n	8000a06 <MAIN_updateLedMode+0x2e>
  {
    LOG_warning("Battery is getting low: %u mV", p_voltageInMv);
 80009f4:	683a      	ldr	r2, [r7, #0]
 80009f6:	4911      	ldr	r1, [pc, #68]	; (8000a3c <MAIN_updateLedMode+0x64>)
 80009f8:	2002      	movs	r0, #2
 80009fa:	f009 f8df 	bl	8009bbc <LOG_log>

    LED_setMode(LED_MODE_FORCED_OFF);
 80009fe:	2000      	movs	r0, #0
 8000a00:	f008 ffba 	bl	8009978 <LED_setMode>
 8000a04:	e016      	b.n	8000a34 <MAIN_updateLedMode+0x5c>
  }
  else
  {
    switch (p_driveMode)
 8000a06:	79fb      	ldrb	r3, [r7, #7]
 8000a08:	2b02      	cmp	r3, #2
 8000a0a:	d00e      	beq.n	8000a2a <MAIN_updateLedMode+0x52>
 8000a0c:	2b02      	cmp	r3, #2
 8000a0e:	dc10      	bgt.n	8000a32 <MAIN_updateLedMode+0x5a>
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d002      	beq.n	8000a1a <MAIN_updateLedMode+0x42>
 8000a14:	2b01      	cmp	r3, #1
 8000a16:	d004      	beq.n	8000a22 <MAIN_updateLedMode+0x4a>
        LED_setMode(LED_MODE_BLINK_FAST);
        break;

      default:
        ; /* Nothing to do */
        break;
 8000a18:	e00b      	b.n	8000a32 <MAIN_updateLedMode+0x5a>
        LED_setMode(LED_MODE_BLINK_SLOW);
 8000a1a:	2002      	movs	r0, #2
 8000a1c:	f008 ffac 	bl	8009978 <LED_setMode>
        break;
 8000a20:	e008      	b.n	8000a34 <MAIN_updateLedMode+0x5c>
        LED_setMode(LED_MODE_BLINK_MEDIUM);
 8000a22:	2003      	movs	r0, #3
 8000a24:	f008 ffa8 	bl	8009978 <LED_setMode>
        break;
 8000a28:	e004      	b.n	8000a34 <MAIN_updateLedMode+0x5c>
        LED_setMode(LED_MODE_BLINK_FAST);
 8000a2a:	2004      	movs	r0, #4
 8000a2c:	f008 ffa4 	bl	8009978 <LED_setMode>
        break;
 8000a30:	e000      	b.n	8000a34 <MAIN_updateLedMode+0x5c>
        break;
 8000a32:	bf00      	nop
    }
  }

  return;
 8000a34:	bf00      	nop
}
 8000a36:	3708      	adds	r7, #8
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	0800b718 	.word	0x0800b718

08000a40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b08e      	sub	sp, #56	; 0x38
 8000a44:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a46:	f001 faf9 	bl	800203c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a4a:	f000 f98f 	bl	8000d6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a4e:	f000 fd91 	bl	8001574 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000a52:	f000 fa6b 	bl	8000f2c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000a56:	f000 fd63 	bl	8001520 <MX_USART1_UART_Init>
  MX_UART4_Init();
 8000a5a:	f000 fd37 	bl	80014cc <MX_UART4_Init>
  MX_ADC1_Init();
 8000a5e:	f000 f9dd 	bl	8000e1c <MX_ADC1_Init>
  MX_TIM8_Init();
 8000a62:	f000 fc6f 	bl	8001344 <MX_TIM8_Init>
  MX_RTC_Init();
 8000a66:	f000 fa17 	bl	8000e98 <MX_RTC_Init>
  MX_TIM7_Init();
 8000a6a:	f000 fc35 	bl	80012d8 <MX_TIM7_Init>
  MX_TIM2_Init();
 8000a6e:	f000 faad 	bl	8000fcc <MX_TIM2_Init>
  MX_TIM3_Init();
 8000a72:	f000 faff 	bl	8001074 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000a76:	f000 fb51 	bl	800111c <MX_TIM4_Init>
  MX_TIM5_Init();
 8000a7a:	f000 fba3 	bl	80011c4 <MX_TIM5_Init>
  MX_TIM6_Init();
 8000a7e:	f000 fbf5 	bl	800126c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  /* Setup global variables */
  g_MAIN_padUpPressedStartTime   = 0;
 8000a82:	4b9f      	ldr	r3, [pc, #636]	; (8000d00 <main+0x2c0>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
  g_MAIN_padDownPressedStartTime = 0;
 8000a88:	4b9e      	ldr	r3, [pc, #632]	; (8000d04 <main+0x2c4>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]

  /* Initialize commands string FIFO */
  SFO_init(&l_commandsFifo);
 8000a8e:	f107 031c 	add.w	r3, r7, #28
 8000a92:	4618      	mov	r0, r3
 8000a94:	f009 fb46 	bl	800a124 <SFO_init>

  /* Setup console */
  CON_init(&huart1);
 8000a98:	489b      	ldr	r0, [pc, #620]	; (8000d08 <main+0x2c8>)
 8000a9a:	f008 f8d9 	bl	8008c50 <CON_init>

  /* Setup master connection */
  MAS_init(&huart4);
 8000a9e:	489b      	ldr	r0, [pc, #620]	; (8000d0c <main+0x2cc>)
 8000aa0:	f009 f8ec 	bl	8009c7c <MAS_init>

  /* Setup and start using logs */
  LOG_init    (&hrtc          );
 8000aa4:	489a      	ldr	r0, [pc, #616]	; (8000d10 <main+0x2d0>)
 8000aa6:	f009 f80f 	bl	8009ac8 <LOG_init>
  LOG_setLevel(LOG_LEVEL_INFO);
 8000aaa:	2001      	movs	r0, #1
 8000aac:	f009 f846 	bl	8009b3c <LOG_setLevel>
  LOG_turnOn  (               );
 8000ab0:	f009 f818 	bl	8009ae4 <LOG_turnOn>
  LOG_info    ("Starting RCFW");
 8000ab4:	4997      	ldr	r1, [pc, #604]	; (8000d14 <main+0x2d4>)
 8000ab6:	2001      	movs	r0, #1
 8000ab8:	f009 f880 	bl	8009bbc <LOG_log>

  /* Display RCFW banner */
  MAIN_displayRcfwBanner();
 8000abc:	f7ff fecc 	bl	8000858 <MAIN_displayRcfwBanner>

  /* Initialize Timer 6 */
  l_halReturnCode = HAL_TIM_Base_Start(&htim6);
 8000ac0:	4895      	ldr	r0, [pc, #596]	; (8000d18 <main+0x2d8>)
 8000ac2:	f004 fe05 	bl	80056d0 <HAL_TIM_Base_Start>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

  if (l_halReturnCode != HAL_OK)
 8000acc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d007      	beq.n	8000ae4 <main+0xa4>
  {
    LOG_error("HAL_TIM_Base_Start(&htim6) returned an error code: %d", l_halReturnCode);
 8000ad4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000ad8:	461a      	mov	r2, r3
 8000ada:	4990      	ldr	r1, [pc, #576]	; (8000d1c <main+0x2dc>)
 8000adc:	2003      	movs	r0, #3
 8000ade:	f009 f86d 	bl	8009bbc <LOG_log>
 8000ae2:	e003      	b.n	8000aec <main+0xac>
  }
  else
  {
    LOG_info("Started TIMER 6 (time measurement)");
 8000ae4:	498e      	ldr	r1, [pc, #568]	; (8000d20 <main+0x2e0>)
 8000ae6:	2001      	movs	r0, #1
 8000ae8:	f009 f868 	bl	8009bbc <LOG_log>
  }

  /* Initialize Timer 7 and delay function in utilities */
  UTI_init(&htim7);
 8000aec:	488d      	ldr	r0, [pc, #564]	; (8000d24 <main+0x2e4>)
 8000aee:	f009 fc19 	bl	800a324 <UTI_init>

  l_halReturnCode = HAL_TIM_Base_Start_IT(&htim7);
 8000af2:	488c      	ldr	r0, [pc, #560]	; (8000d24 <main+0x2e4>)
 8000af4:	f004 fe76 	bl	80057e4 <HAL_TIM_Base_Start_IT>
 8000af8:	4603      	mov	r3, r0
 8000afa:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

  if (l_halReturnCode != HAL_OK)
 8000afe:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d007      	beq.n	8000b16 <main+0xd6>
  {
    LOG_error("HAL_TIM_Base_Start_IT(&htim7) returned an error code: %d", l_halReturnCode);
 8000b06:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000b0a:	461a      	mov	r2, r3
 8000b0c:	4986      	ldr	r1, [pc, #536]	; (8000d28 <main+0x2e8>)
 8000b0e:	2003      	movs	r0, #3
 8000b10:	f009 f854 	bl	8009bbc <LOG_log>
 8000b14:	e003      	b.n	8000b1e <main+0xde>
  }
  else
  {
    LOG_info("Started TIMER 7 (utilities/delay)");
 8000b16:	4985      	ldr	r1, [pc, #532]	; (8000d2c <main+0x2ec>)
 8000b18:	2001      	movs	r0, #1
 8000b1a:	f009 f84f 	bl	8009bbc <LOG_log>
  }

  /* Initialize Timer 1 & green LED */
  LED_setMode(LED_MODE_BLINK_FAST);
 8000b1e:	2004      	movs	r0, #4
 8000b20:	f008 ff2a 	bl	8009978 <LED_setMode>

  l_halReturnCode = HAL_TIM_Base_Start_IT(&htim1);
 8000b24:	4882      	ldr	r0, [pc, #520]	; (8000d30 <main+0x2f0>)
 8000b26:	f004 fe5d 	bl	80057e4 <HAL_TIM_Base_Start_IT>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

  if (l_halReturnCode != HAL_OK)
 8000b30:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d007      	beq.n	8000b48 <main+0x108>
  {
    LOG_error("HAL_TIM_Base_Start_IT(&htim1) returned an error code: %d", l_halReturnCode);
 8000b38:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	497d      	ldr	r1, [pc, #500]	; (8000d34 <main+0x2f4>)
 8000b40:	2003      	movs	r0, #3
 8000b42:	f009 f83b 	bl	8009bbc <LOG_log>
 8000b46:	e003      	b.n	8000b50 <main+0x110>
  }
  else
  {
    LOG_info("Started TIMER 1 (green LED)");
 8000b48:	497b      	ldr	r1, [pc, #492]	; (8000d38 <main+0x2f8>)
 8000b4a:	2001      	movs	r0, #1
 8000b4c:	f009 f836 	bl	8009bbc <LOG_log>
  }

  /* Initialize Timers 2, 3, 4 & 5 */
  l_halReturnCode  = HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 8000b50:	213c      	movs	r1, #60	; 0x3c
 8000b52:	487a      	ldr	r0, [pc, #488]	; (8000d3c <main+0x2fc>)
 8000b54:	f005 fa7e 	bl	8006054 <HAL_TIM_Encoder_Start_IT>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  l_halReturnCode |= HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 8000b5e:	213c      	movs	r1, #60	; 0x3c
 8000b60:	4877      	ldr	r0, [pc, #476]	; (8000d40 <main+0x300>)
 8000b62:	f005 fa77 	bl	8006054 <HAL_TIM_Encoder_Start_IT>
 8000b66:	4603      	mov	r3, r0
 8000b68:	461a      	mov	r2, r3
 8000b6a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000b6e:	4313      	orrs	r3, r2
 8000b70:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  l_halReturnCode |= HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 8000b74:	213c      	movs	r1, #60	; 0x3c
 8000b76:	4873      	ldr	r0, [pc, #460]	; (8000d44 <main+0x304>)
 8000b78:	f005 fa6c 	bl	8006054 <HAL_TIM_Encoder_Start_IT>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	461a      	mov	r2, r3
 8000b80:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000b84:	4313      	orrs	r3, r2
 8000b86:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  l_halReturnCode |= HAL_TIM_Encoder_Start_IT(&htim5, TIM_CHANNEL_ALL);
 8000b8a:	213c      	movs	r1, #60	; 0x3c
 8000b8c:	486e      	ldr	r0, [pc, #440]	; (8000d48 <main+0x308>)
 8000b8e:	f005 fa61 	bl	8006054 <HAL_TIM_Encoder_Start_IT>
 8000b92:	4603      	mov	r3, r0
 8000b94:	461a      	mov	r2, r3
 8000b96:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000b9a:	4313      	orrs	r3, r2
 8000b9c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

  if (l_halReturnCode != HAL_OK)
 8000ba0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d007      	beq.n	8000bb8 <main+0x178>
  {
    LOG_error("HAL_TIM_Encoder_Start_IT(&htimX) returned error code(s): %d", l_halReturnCode);
 8000ba8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000bac:	461a      	mov	r2, r3
 8000bae:	4967      	ldr	r1, [pc, #412]	; (8000d4c <main+0x30c>)
 8000bb0:	2003      	movs	r0, #3
 8000bb2:	f009 f803 	bl	8009bbc <LOG_log>
 8000bb6:	e003      	b.n	8000bc0 <main+0x180>
  }
  else
  {
    LOG_info("Started TIMER 2, 3, 4, 5 (encoders)");
 8000bb8:	4965      	ldr	r1, [pc, #404]	; (8000d50 <main+0x310>)
 8000bba:	2001      	movs	r0, #1
 8000bbc:	f008 fffe 	bl	8009bbc <LOG_log>
  }

  /* Initialize Timer 8 */
  l_halReturnCode = HAL_TIM_Base_Start(&htim8);
 8000bc0:	4864      	ldr	r0, [pc, #400]	; (8000d54 <main+0x314>)
 8000bc2:	f004 fd85 	bl	80056d0 <HAL_TIM_Base_Start>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

  if (l_halReturnCode != HAL_OK)
 8000bcc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d007      	beq.n	8000be4 <main+0x1a4>
  {
    LOG_error("HAL_TIM_Base_Start(&htim8) returned an error code: %d", l_halReturnCode);
 8000bd4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000bd8:	461a      	mov	r2, r3
 8000bda:	495f      	ldr	r1, [pc, #380]	; (8000d58 <main+0x318>)
 8000bdc:	2003      	movs	r0, #3
 8000bde:	f008 ffed 	bl	8009bbc <LOG_log>
 8000be2:	e003      	b.n	8000bec <main+0x1ac>
  }
  else
  {
    LOG_info("Started TIMER 8 (PWM channels)");
 8000be4:	495d      	ldr	r1, [pc, #372]	; (8000d5c <main+0x31c>)
 8000be6:	2001      	movs	r0, #1
 8000be8:	f008 ffe8 	bl	8009bbc <LOG_log>
  }

  /* Initialize battery monitor */
  BAT_init(&hadc1, &hrtc);
 8000bec:	4948      	ldr	r1, [pc, #288]	; (8000d10 <main+0x2d0>)
 8000bee:	485c      	ldr	r0, [pc, #368]	; (8000d60 <main+0x320>)
 8000bf0:	f007 fd44 	bl	800867c <BAT_init>

  /* Initialize PWM channels */
  l_halReturnCode  = HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	4857      	ldr	r0, [pc, #348]	; (8000d54 <main+0x314>)
 8000bf8:	f004 ff62 	bl	8005ac0 <HAL_TIM_PWM_Start>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  l_halReturnCode |= HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8000c02:	2104      	movs	r1, #4
 8000c04:	4853      	ldr	r0, [pc, #332]	; (8000d54 <main+0x314>)
 8000c06:	f004 ff5b 	bl	8005ac0 <HAL_TIM_PWM_Start>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000c12:	4313      	orrs	r3, r2
 8000c14:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  l_halReturnCode |= HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8000c18:	2108      	movs	r1, #8
 8000c1a:	484e      	ldr	r0, [pc, #312]	; (8000d54 <main+0x314>)
 8000c1c:	f004 ff50 	bl	8005ac0 <HAL_TIM_PWM_Start>
 8000c20:	4603      	mov	r3, r0
 8000c22:	461a      	mov	r2, r3
 8000c24:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  l_halReturnCode |= HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8000c2e:	210c      	movs	r1, #12
 8000c30:	4848      	ldr	r0, [pc, #288]	; (8000d54 <main+0x314>)
 8000c32:	f004 ff45 	bl	8005ac0 <HAL_TIM_PWM_Start>
 8000c36:	4603      	mov	r3, r0
 8000c38:	461a      	mov	r2, r3
 8000c3a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000c3e:	4313      	orrs	r3, r2
 8000c40:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

  if (l_halReturnCode != HAL_OK)
 8000c44:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d007      	beq.n	8000c5c <main+0x21c>
  {
    LOG_error("HAL_TIM_PWM_Start(&htim8) returned error code(s): %d", l_halReturnCode);
 8000c4c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000c50:	461a      	mov	r2, r3
 8000c52:	4944      	ldr	r1, [pc, #272]	; (8000d64 <main+0x324>)
 8000c54:	2003      	movs	r0, #3
 8000c56:	f008 ffb1 	bl	8009bbc <LOG_log>
 8000c5a:	e003      	b.n	8000c64 <main+0x224>
  }
  else
  {
    LOG_info("Started PWM channels");
 8000c5c:	4942      	ldr	r1, [pc, #264]	; (8000d68 <main+0x328>)
 8000c5e:	2001      	movs	r0, #1
 8000c60:	f008 ffac 	bl	8009bbc <LOG_log>
  }

  /* Initialize bluetooth control */
  BLU_init(DRV_MAXIMUM_SPEED);
 8000c64:	2028      	movs	r0, #40	; 0x28
 8000c66:	f007 ff39 	bl	8008adc <BLU_init>

  /* Initialize driving module */
  DRV_init(&htim8, &htim2, &htim3, &htim4, &htim5);
 8000c6a:	4b37      	ldr	r3, [pc, #220]	; (8000d48 <main+0x308>)
 8000c6c:	9300      	str	r3, [sp, #0]
 8000c6e:	4b35      	ldr	r3, [pc, #212]	; (8000d44 <main+0x304>)
 8000c70:	4a33      	ldr	r2, [pc, #204]	; (8000d40 <main+0x300>)
 8000c72:	4932      	ldr	r1, [pc, #200]	; (8000d3c <main+0x2fc>)
 8000c74:	4837      	ldr	r0, [pc, #220]	; (8000d54 <main+0x314>)
 8000c76:	f008 f867 	bl	8008d48 <DRV_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  /* Initialize time measurement for master board control */
  l_lastTime = __HAL_TIM_GET_COUNTER(&htim6);
 8000c7a:	4b27      	ldr	r3, [pc, #156]	; (8000d18 <main+0x2d8>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c80:	85fb      	strh	r3, [r7, #46]	; 0x2e

  while (1)
  {
    CON_updateFifo(&l_commandsFifo);
 8000c82:	f107 031c 	add.w	r3, r7, #28
 8000c86:	4618      	mov	r0, r3
 8000c88:	f008 f83a 	bl	8008d00 <CON_updateFifo>
    MAS_updateFifo(&l_commandsFifo);
 8000c8c:	f107 031c 	add.w	r3, r7, #28
 8000c90:	4618      	mov	r0, r3
 8000c92:	f009 f84b 	bl	8009d2c <MAS_updateFifo>

    BLU_receiveData        (&l_bluetoothData);
 8000c96:	f107 0308 	add.w	r3, r7, #8
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f007 ff42 	bl	8008b24 <BLU_receiveData>
    DRV_updateFromBluetooth(&l_bluetoothData);
 8000ca0:	f107 0308 	add.w	r3, r7, #8
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f008 f967 	bl	8008f78 <DRV_updateFromBluetooth>

    l_driveMode = DRV_getMode();
 8000caa:	f008 fb2b 	bl	8009304 <DRV_getMode>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    BAT_update         (&l_voltageInMv            );
 8000cb4:	1d3b      	adds	r3, r7, #4
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f007 fd2e 	bl	8008718 <BAT_update>
    MAIN_updateLedMode (l_driveMode, l_voltageInMv);
 8000cbc:	687a      	ldr	r2, [r7, #4]
 8000cbe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000cc2:	4611      	mov	r1, r2
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff fe87 	bl	80009d8 <MAIN_updateLedMode>
    MAIN_updateLogLevel(&l_bluetoothData          );
 8000cca:	f107 0308 	add.w	r3, r7, #8
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f7ff fe00 	bl	80008d4 <MAIN_updateLogLevel>

    UTI_delayUs(MAIN_LOOP_DELAY_IN_MS);
 8000cd4:	f242 7010 	movw	r0, #10000	; 0x2710
 8000cd8:	f009 fb38 	bl	800a34c <UTI_delayUs>

    l_currentTime = __HAL_TIM_GET_COUNTER(&htim6);
 8000cdc:	4b0e      	ldr	r3, [pc, #56]	; (8000d18 <main+0x2d8>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ce2:	857b      	strh	r3, [r7, #42]	; 0x2a
    l_deltaTime   = l_lastTime - l_currentTime;
 8000ce4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000ce6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000ce8:	1ad3      	subs	r3, r2, r3
 8000cea:	853b      	strh	r3, [r7, #40]	; 0x28
    l_lastTime    = l_currentTime;
 8000cec:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000cee:	85fb      	strh	r3, [r7, #46]	; 0x2e

    DRV_updateFromMaster(l_deltaTime, &l_commandsFifo);
 8000cf0:	f107 021c 	add.w	r2, r7, #28
 8000cf4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000cf6:	4611      	mov	r1, r2
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f008 fa7d 	bl	80091f8 <DRV_updateFromMaster>
    CON_updateFifo(&l_commandsFifo);
 8000cfe:	e7c0      	b.n	8000c82 <main+0x242>
 8000d00:	2000009c 	.word	0x2000009c
 8000d04:	200000a0 	.word	0x200000a0
 8000d08:	200005a4 	.word	0x200005a4
 8000d0c:	20000794 	.word	0x20000794
 8000d10:	20000618 	.word	0x20000618
 8000d14:	0800b738 	.word	0x0800b738
 8000d18:	2000062c 	.word	0x2000062c
 8000d1c:	0800b748 	.word	0x0800b748
 8000d20:	0800b780 	.word	0x0800b780
 8000d24:	200008bc 	.word	0x200008bc
 8000d28:	0800b7a4 	.word	0x0800b7a4
 8000d2c:	0800b7e0 	.word	0x0800b7e0
 8000d30:	200006e0 	.word	0x200006e0
 8000d34:	0800b804 	.word	0x0800b804
 8000d38:	0800b840 	.word	0x0800b840
 8000d3c:	20000808 	.word	0x20000808
 8000d40:	200004c0 	.word	0x200004c0
 8000d44:	20000358 	.word	0x20000358
 8000d48:	2000040c 	.word	0x2000040c
 8000d4c:	0800b85c 	.word	0x0800b85c
 8000d50:	0800b898 	.word	0x0800b898
 8000d54:	200002a4 	.word	0x200002a4
 8000d58:	0800b8bc 	.word	0x0800b8bc
 8000d5c:	0800b8f4 	.word	0x0800b8f4
 8000d60:	20000574 	.word	0x20000574
 8000d64:	0800b914 	.word	0x0800b914
 8000d68:	0800b94c 	.word	0x0800b94c

08000d6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b096      	sub	sp, #88	; 0x58
 8000d70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d72:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d76:	2228      	movs	r2, #40	; 0x28
 8000d78:	2100      	movs	r1, #0
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f009 fba6 	bl	800a4cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d80:	f107 031c 	add.w	r3, r7, #28
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
 8000d8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d90:	1d3b      	adds	r3, r7, #4
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	605a      	str	r2, [r3, #4]
 8000d98:	609a      	str	r2, [r3, #8]
 8000d9a:	60da      	str	r2, [r3, #12]
 8000d9c:	611a      	str	r2, [r3, #16]
 8000d9e:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000da0:	230a      	movs	r3, #10
 8000da2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000da4:	2301      	movs	r3, #1
 8000da6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000da8:	2310      	movs	r3, #16
 8000daa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000dac:	2301      	movs	r3, #1
 8000dae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000db0:	2300      	movs	r3, #0
 8000db2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000db4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000db8:	4618      	mov	r0, r3
 8000dba:	f002 fd33 	bl	8003824 <HAL_RCC_OscConfig>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000dc4:	f000 fcd6 	bl	8001774 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dc8:	230f      	movs	r3, #15
 8000dca:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ddc:	f107 031c 	add.w	r3, r7, #28
 8000de0:	2100      	movs	r1, #0
 8000de2:	4618      	mov	r0, r3
 8000de4:	f003 f88e 	bl	8003f04 <HAL_RCC_ClockConfig>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000dee:	f000 fcc1 	bl	8001774 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 8000df2:	2303      	movs	r3, #3
 8000df4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000df6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dfa:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e00:	1d3b      	adds	r3, r7, #4
 8000e02:	4618      	mov	r0, r3
 8000e04:	f003 fabe 	bl	8004384 <HAL_RCCEx_PeriphCLKConfig>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000e0e:	f000 fcb1 	bl	8001774 <Error_Handler>
  }
}
 8000e12:	bf00      	nop
 8000e14:	3758      	adds	r7, #88	; 0x58
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
	...

08000e1c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e22:	1d3b      	adds	r3, r7, #4
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e2c:	4b18      	ldr	r3, [pc, #96]	; (8000e90 <MX_ADC1_Init+0x74>)
 8000e2e:	4a19      	ldr	r2, [pc, #100]	; (8000e94 <MX_ADC1_Init+0x78>)
 8000e30:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e32:	4b17      	ldr	r3, [pc, #92]	; (8000e90 <MX_ADC1_Init+0x74>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e38:	4b15      	ldr	r3, [pc, #84]	; (8000e90 <MX_ADC1_Init+0x74>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e3e:	4b14      	ldr	r3, [pc, #80]	; (8000e90 <MX_ADC1_Init+0x74>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e44:	4b12      	ldr	r3, [pc, #72]	; (8000e90 <MX_ADC1_Init+0x74>)
 8000e46:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000e4a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e4c:	4b10      	ldr	r3, [pc, #64]	; (8000e90 <MX_ADC1_Init+0x74>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000e52:	4b0f      	ldr	r3, [pc, #60]	; (8000e90 <MX_ADC1_Init+0x74>)
 8000e54:	2201      	movs	r2, #1
 8000e56:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e58:	480d      	ldr	r0, [pc, #52]	; (8000e90 <MX_ADC1_Init+0x74>)
 8000e5a:	f001 f951 	bl	8002100 <HAL_ADC_Init>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000e64:	f000 fc86 	bl	8001774 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000e68:	2305      	movs	r3, #5
 8000e6a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000e70:	2300      	movs	r3, #0
 8000e72:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e74:	1d3b      	adds	r3, r7, #4
 8000e76:	4619      	mov	r1, r3
 8000e78:	4805      	ldr	r0, [pc, #20]	; (8000e90 <MX_ADC1_Init+0x74>)
 8000e7a:	f001 fcf3 	bl	8002864 <HAL_ADC_ConfigChannel>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000e84:	f000 fc76 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e88:	bf00      	nop
 8000e8a:	3710      	adds	r7, #16
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	20000574 	.word	0x20000574
 8000e94:	40012400 	.word	0x40012400

08000e98 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000e9e:	1d3b      	adds	r3, r7, #4
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	460a      	mov	r2, r1
 8000ea4:	801a      	strh	r2, [r3, #0]
 8000ea6:	460a      	mov	r2, r1
 8000ea8:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8000eaa:	2300      	movs	r3, #0
 8000eac:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000eae:	4b1d      	ldr	r3, [pc, #116]	; (8000f24 <MX_RTC_Init+0x8c>)
 8000eb0:	4a1d      	ldr	r2, [pc, #116]	; (8000f28 <MX_RTC_Init+0x90>)
 8000eb2:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000eb4:	4b1b      	ldr	r3, [pc, #108]	; (8000f24 <MX_RTC_Init+0x8c>)
 8000eb6:	f04f 32ff 	mov.w	r2, #4294967295
 8000eba:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 8000ebc:	4b19      	ldr	r3, [pc, #100]	; (8000f24 <MX_RTC_Init+0x8c>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000ec2:	4818      	ldr	r0, [pc, #96]	; (8000f24 <MX_RTC_Init+0x8c>)
 8000ec4:	f003 fc7a 	bl	80047bc <HAL_RTC_Init>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <MX_RTC_Init+0x3a>
  {
    Error_Handler();
 8000ece:	f000 fc51 	bl	8001774 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000eda:	2300      	movs	r3, #0
 8000edc:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000ede:	1d3b      	adds	r3, r7, #4
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	480f      	ldr	r0, [pc, #60]	; (8000f24 <MX_RTC_Init+0x8c>)
 8000ee6:	f003 fd33 	bl	8004950 <HAL_RTC_SetTime>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_RTC_Init+0x5c>
  {
    Error_Handler();
 8000ef0:	f000 fc40 	bl	8001774 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 8000efc:	2301      	movs	r3, #1
 8000efe:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 8000f00:	2300      	movs	r3, #0
 8000f02:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8000f04:	463b      	mov	r3, r7
 8000f06:	2201      	movs	r2, #1
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4806      	ldr	r0, [pc, #24]	; (8000f24 <MX_RTC_Init+0x8c>)
 8000f0c:	f003 feec 	bl	8004ce8 <HAL_RTC_SetDate>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8000f16:	f000 fc2d 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000f1a:	bf00      	nop
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	20000618 	.word	0x20000618
 8000f28:	40002800 	.word	0x40002800

08000f2c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b086      	sub	sp, #24
 8000f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f32:	f107 0308 	add.w	r3, r7, #8
 8000f36:	2200      	movs	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]
 8000f3a:	605a      	str	r2, [r3, #4]
 8000f3c:	609a      	str	r2, [r3, #8]
 8000f3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f40:	463b      	mov	r3, r7
 8000f42:	2200      	movs	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]
 8000f46:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f48:	4b1e      	ldr	r3, [pc, #120]	; (8000fc4 <MX_TIM1_Init+0x98>)
 8000f4a:	4a1f      	ldr	r2, [pc, #124]	; (8000fc8 <MX_TIM1_Init+0x9c>)
 8000f4c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7999;
 8000f4e:	4b1d      	ldr	r3, [pc, #116]	; (8000fc4 <MX_TIM1_Init+0x98>)
 8000f50:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000f54:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f56:	4b1b      	ldr	r3, [pc, #108]	; (8000fc4 <MX_TIM1_Init+0x98>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 249;
 8000f5c:	4b19      	ldr	r3, [pc, #100]	; (8000fc4 <MX_TIM1_Init+0x98>)
 8000f5e:	22f9      	movs	r2, #249	; 0xf9
 8000f60:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f62:	4b18      	ldr	r3, [pc, #96]	; (8000fc4 <MX_TIM1_Init+0x98>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f68:	4b16      	ldr	r3, [pc, #88]	; (8000fc4 <MX_TIM1_Init+0x98>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f6e:	4b15      	ldr	r3, [pc, #84]	; (8000fc4 <MX_TIM1_Init+0x98>)
 8000f70:	2280      	movs	r2, #128	; 0x80
 8000f72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f74:	4813      	ldr	r0, [pc, #76]	; (8000fc4 <MX_TIM1_Init+0x98>)
 8000f76:	f004 fad9 	bl	800552c <HAL_TIM_Base_Init>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000f80:	f000 fbf8 	bl	8001774 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f88:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f8a:	f107 0308 	add.w	r3, r7, #8
 8000f8e:	4619      	mov	r1, r3
 8000f90:	480c      	ldr	r0, [pc, #48]	; (8000fc4 <MX_TIM1_Init+0x98>)
 8000f92:	f005 fc03 	bl	800679c <HAL_TIM_ConfigClockSource>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000f9c:	f000 fbea 	bl	8001774 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fa8:	463b      	mov	r3, r7
 8000faa:	4619      	mov	r1, r3
 8000fac:	4805      	ldr	r0, [pc, #20]	; (8000fc4 <MX_TIM1_Init+0x98>)
 8000fae:	f006 fb51 	bl	8007654 <HAL_TIMEx_MasterConfigSynchronization>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000fb8:	f000 fbdc 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000fbc:	bf00      	nop
 8000fbe:	3718      	adds	r7, #24
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	200006e0 	.word	0x200006e0
 8000fc8:	40012c00 	.word	0x40012c00

08000fcc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b08c      	sub	sp, #48	; 0x30
 8000fd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000fd2:	f107 030c 	add.w	r3, r7, #12
 8000fd6:	2224      	movs	r2, #36	; 0x24
 8000fd8:	2100      	movs	r1, #0
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f009 fa76 	bl	800a4cc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fe0:	1d3b      	adds	r3, r7, #4
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	601a      	str	r2, [r3, #0]
 8000fe6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fe8:	4b21      	ldr	r3, [pc, #132]	; (8001070 <MX_TIM2_Init+0xa4>)
 8000fea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000ff0:	4b1f      	ldr	r3, [pc, #124]	; (8001070 <MX_TIM2_Init+0xa4>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ff6:	4b1e      	ldr	r3, [pc, #120]	; (8001070 <MX_TIM2_Init+0xa4>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000ffc:	4b1c      	ldr	r3, [pc, #112]	; (8001070 <MX_TIM2_Init+0xa4>)
 8000ffe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001002:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001004:	4b1a      	ldr	r3, [pc, #104]	; (8001070 <MX_TIM2_Init+0xa4>)
 8001006:	2200      	movs	r2, #0
 8001008:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800100a:	4b19      	ldr	r3, [pc, #100]	; (8001070 <MX_TIM2_Init+0xa4>)
 800100c:	2280      	movs	r2, #128	; 0x80
 800100e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001010:	2303      	movs	r3, #3
 8001012:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001014:	2300      	movs	r3, #0
 8001016:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001018:	2301      	movs	r3, #1
 800101a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800101c:	2300      	movs	r3, #0
 800101e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001020:	230a      	movs	r3, #10
 8001022:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001024:	2300      	movs	r3, #0
 8001026:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001028:	2301      	movs	r3, #1
 800102a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800102c:	2300      	movs	r3, #0
 800102e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001030:	2300      	movs	r3, #0
 8001032:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001034:	f107 030c 	add.w	r3, r7, #12
 8001038:	4619      	mov	r1, r3
 800103a:	480d      	ldr	r0, [pc, #52]	; (8001070 <MX_TIM2_Init+0xa4>)
 800103c:	f004 fe68 	bl	8005d10 <HAL_TIM_Encoder_Init>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001046:	f000 fb95 	bl	8001774 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800104a:	2300      	movs	r3, #0
 800104c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800104e:	2300      	movs	r3, #0
 8001050:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001052:	1d3b      	adds	r3, r7, #4
 8001054:	4619      	mov	r1, r3
 8001056:	4806      	ldr	r0, [pc, #24]	; (8001070 <MX_TIM2_Init+0xa4>)
 8001058:	f006 fafc 	bl	8007654 <HAL_TIMEx_MasterConfigSynchronization>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001062:	f000 fb87 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001066:	bf00      	nop
 8001068:	3730      	adds	r7, #48	; 0x30
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	20000808 	.word	0x20000808

08001074 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b08c      	sub	sp, #48	; 0x30
 8001078:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800107a:	f107 030c 	add.w	r3, r7, #12
 800107e:	2224      	movs	r2, #36	; 0x24
 8001080:	2100      	movs	r1, #0
 8001082:	4618      	mov	r0, r3
 8001084:	f009 fa22 	bl	800a4cc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001088:	1d3b      	adds	r3, r7, #4
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001090:	4b20      	ldr	r3, [pc, #128]	; (8001114 <MX_TIM3_Init+0xa0>)
 8001092:	4a21      	ldr	r2, [pc, #132]	; (8001118 <MX_TIM3_Init+0xa4>)
 8001094:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001096:	4b1f      	ldr	r3, [pc, #124]	; (8001114 <MX_TIM3_Init+0xa0>)
 8001098:	2200      	movs	r2, #0
 800109a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800109c:	4b1d      	ldr	r3, [pc, #116]	; (8001114 <MX_TIM3_Init+0xa0>)
 800109e:	2200      	movs	r2, #0
 80010a0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80010a2:	4b1c      	ldr	r3, [pc, #112]	; (8001114 <MX_TIM3_Init+0xa0>)
 80010a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010a8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010aa:	4b1a      	ldr	r3, [pc, #104]	; (8001114 <MX_TIM3_Init+0xa0>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010b0:	4b18      	ldr	r3, [pc, #96]	; (8001114 <MX_TIM3_Init+0xa0>)
 80010b2:	2280      	movs	r2, #128	; 0x80
 80010b4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80010b6:	2303      	movs	r3, #3
 80010b8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80010ba:	2300      	movs	r3, #0
 80010bc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80010be:	2301      	movs	r3, #1
 80010c0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80010c2:	2300      	movs	r3, #0
 80010c4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80010c6:	230a      	movs	r3, #10
 80010c8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80010ca:	2300      	movs	r3, #0
 80010cc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80010ce:	2301      	movs	r3, #1
 80010d0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80010d2:	2300      	movs	r3, #0
 80010d4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80010d6:	2300      	movs	r3, #0
 80010d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80010da:	f107 030c 	add.w	r3, r7, #12
 80010de:	4619      	mov	r1, r3
 80010e0:	480c      	ldr	r0, [pc, #48]	; (8001114 <MX_TIM3_Init+0xa0>)
 80010e2:	f004 fe15 	bl	8005d10 <HAL_TIM_Encoder_Init>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80010ec:	f000 fb42 	bl	8001774 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010f0:	2300      	movs	r3, #0
 80010f2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010f4:	2300      	movs	r3, #0
 80010f6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010f8:	1d3b      	adds	r3, r7, #4
 80010fa:	4619      	mov	r1, r3
 80010fc:	4805      	ldr	r0, [pc, #20]	; (8001114 <MX_TIM3_Init+0xa0>)
 80010fe:	f006 faa9 	bl	8007654 <HAL_TIMEx_MasterConfigSynchronization>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001108:	f000 fb34 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800110c:	bf00      	nop
 800110e:	3730      	adds	r7, #48	; 0x30
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	200004c0 	.word	0x200004c0
 8001118:	40000400 	.word	0x40000400

0800111c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b08c      	sub	sp, #48	; 0x30
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001122:	f107 030c 	add.w	r3, r7, #12
 8001126:	2224      	movs	r2, #36	; 0x24
 8001128:	2100      	movs	r1, #0
 800112a:	4618      	mov	r0, r3
 800112c:	f009 f9ce 	bl	800a4cc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001130:	1d3b      	adds	r3, r7, #4
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001138:	4b20      	ldr	r3, [pc, #128]	; (80011bc <MX_TIM4_Init+0xa0>)
 800113a:	4a21      	ldr	r2, [pc, #132]	; (80011c0 <MX_TIM4_Init+0xa4>)
 800113c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800113e:	4b1f      	ldr	r3, [pc, #124]	; (80011bc <MX_TIM4_Init+0xa0>)
 8001140:	2200      	movs	r2, #0
 8001142:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001144:	4b1d      	ldr	r3, [pc, #116]	; (80011bc <MX_TIM4_Init+0xa0>)
 8001146:	2200      	movs	r2, #0
 8001148:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800114a:	4b1c      	ldr	r3, [pc, #112]	; (80011bc <MX_TIM4_Init+0xa0>)
 800114c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001150:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001152:	4b1a      	ldr	r3, [pc, #104]	; (80011bc <MX_TIM4_Init+0xa0>)
 8001154:	2200      	movs	r2, #0
 8001156:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001158:	4b18      	ldr	r3, [pc, #96]	; (80011bc <MX_TIM4_Init+0xa0>)
 800115a:	2280      	movs	r2, #128	; 0x80
 800115c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800115e:	2303      	movs	r3, #3
 8001160:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001162:	2300      	movs	r3, #0
 8001164:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001166:	2301      	movs	r3, #1
 8001168:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800116a:	2300      	movs	r3, #0
 800116c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 800116e:	230a      	movs	r3, #10
 8001170:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001172:	2300      	movs	r3, #0
 8001174:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001176:	2301      	movs	r3, #1
 8001178:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800117a:	2300      	movs	r3, #0
 800117c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800117e:	2300      	movs	r3, #0
 8001180:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001182:	f107 030c 	add.w	r3, r7, #12
 8001186:	4619      	mov	r1, r3
 8001188:	480c      	ldr	r0, [pc, #48]	; (80011bc <MX_TIM4_Init+0xa0>)
 800118a:	f004 fdc1 	bl	8005d10 <HAL_TIM_Encoder_Init>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001194:	f000 faee 	bl	8001774 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001198:	2300      	movs	r3, #0
 800119a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800119c:	2300      	movs	r3, #0
 800119e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80011a0:	1d3b      	adds	r3, r7, #4
 80011a2:	4619      	mov	r1, r3
 80011a4:	4805      	ldr	r0, [pc, #20]	; (80011bc <MX_TIM4_Init+0xa0>)
 80011a6:	f006 fa55 	bl	8007654 <HAL_TIMEx_MasterConfigSynchronization>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80011b0:	f000 fae0 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80011b4:	bf00      	nop
 80011b6:	3730      	adds	r7, #48	; 0x30
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	20000358 	.word	0x20000358
 80011c0:	40000800 	.word	0x40000800

080011c4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b08c      	sub	sp, #48	; 0x30
 80011c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80011ca:	f107 030c 	add.w	r3, r7, #12
 80011ce:	2224      	movs	r2, #36	; 0x24
 80011d0:	2100      	movs	r1, #0
 80011d2:	4618      	mov	r0, r3
 80011d4:	f009 f97a 	bl	800a4cc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011d8:	1d3b      	adds	r3, r7, #4
 80011da:	2200      	movs	r2, #0
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80011e0:	4b20      	ldr	r3, [pc, #128]	; (8001264 <MX_TIM5_Init+0xa0>)
 80011e2:	4a21      	ldr	r2, [pc, #132]	; (8001268 <MX_TIM5_Init+0xa4>)
 80011e4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80011e6:	4b1f      	ldr	r3, [pc, #124]	; (8001264 <MX_TIM5_Init+0xa0>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ec:	4b1d      	ldr	r3, [pc, #116]	; (8001264 <MX_TIM5_Init+0xa0>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 80011f2:	4b1c      	ldr	r3, [pc, #112]	; (8001264 <MX_TIM5_Init+0xa0>)
 80011f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011f8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011fa:	4b1a      	ldr	r3, [pc, #104]	; (8001264 <MX_TIM5_Init+0xa0>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001200:	4b18      	ldr	r3, [pc, #96]	; (8001264 <MX_TIM5_Init+0xa0>)
 8001202:	2280      	movs	r2, #128	; 0x80
 8001204:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001206:	2303      	movs	r3, #3
 8001208:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800120a:	2300      	movs	r3, #0
 800120c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800120e:	2301      	movs	r3, #1
 8001210:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001212:	2300      	movs	r3, #0
 8001214:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001216:	230a      	movs	r3, #10
 8001218:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800121a:	2300      	movs	r3, #0
 800121c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800121e:	2301      	movs	r3, #1
 8001220:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001222:	2300      	movs	r3, #0
 8001224:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001226:	2300      	movs	r3, #0
 8001228:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 800122a:	f107 030c 	add.w	r3, r7, #12
 800122e:	4619      	mov	r1, r3
 8001230:	480c      	ldr	r0, [pc, #48]	; (8001264 <MX_TIM5_Init+0xa0>)
 8001232:	f004 fd6d 	bl	8005d10 <HAL_TIM_Encoder_Init>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 800123c:	f000 fa9a 	bl	8001774 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001240:	2300      	movs	r3, #0
 8001242:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001244:	2300      	movs	r3, #0
 8001246:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001248:	1d3b      	adds	r3, r7, #4
 800124a:	4619      	mov	r1, r3
 800124c:	4805      	ldr	r0, [pc, #20]	; (8001264 <MX_TIM5_Init+0xa0>)
 800124e:	f006 fa01 	bl	8007654 <HAL_TIMEx_MasterConfigSynchronization>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001258:	f000 fa8c 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800125c:	bf00      	nop
 800125e:	3730      	adds	r7, #48	; 0x30
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	2000040c 	.word	0x2000040c
 8001268:	40000c00 	.word	0x40000c00

0800126c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001272:	463b      	mov	r3, r7
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800127a:	4b15      	ldr	r3, [pc, #84]	; (80012d0 <MX_TIM6_Init+0x64>)
 800127c:	4a15      	ldr	r2, [pc, #84]	; (80012d4 <MX_TIM6_Init+0x68>)
 800127e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7;
 8001280:	4b13      	ldr	r3, [pc, #76]	; (80012d0 <MX_TIM6_Init+0x64>)
 8001282:	2207      	movs	r2, #7
 8001284:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001286:	4b12      	ldr	r3, [pc, #72]	; (80012d0 <MX_TIM6_Init+0x64>)
 8001288:	2200      	movs	r2, #0
 800128a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800128c:	4b10      	ldr	r3, [pc, #64]	; (80012d0 <MX_TIM6_Init+0x64>)
 800128e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001292:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001294:	4b0e      	ldr	r3, [pc, #56]	; (80012d0 <MX_TIM6_Init+0x64>)
 8001296:	2280      	movs	r2, #128	; 0x80
 8001298:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800129a:	480d      	ldr	r0, [pc, #52]	; (80012d0 <MX_TIM6_Init+0x64>)
 800129c:	f004 f946 	bl	800552c <HAL_TIM_Base_Init>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80012a6:	f000 fa65 	bl	8001774 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012aa:	2300      	movs	r3, #0
 80012ac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ae:	2300      	movs	r3, #0
 80012b0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80012b2:	463b      	mov	r3, r7
 80012b4:	4619      	mov	r1, r3
 80012b6:	4806      	ldr	r0, [pc, #24]	; (80012d0 <MX_TIM6_Init+0x64>)
 80012b8:	f006 f9cc 	bl	8007654 <HAL_TIMEx_MasterConfigSynchronization>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80012c2:	f000 fa57 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80012c6:	bf00      	nop
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	2000062c 	.word	0x2000062c
 80012d4:	40001000 	.word	0x40001000

080012d8 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012de:	463b      	mov	r3, r7
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80012e6:	4b15      	ldr	r3, [pc, #84]	; (800133c <MX_TIM7_Init+0x64>)
 80012e8:	4a15      	ldr	r2, [pc, #84]	; (8001340 <MX_TIM7_Init+0x68>)
 80012ea:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7;
 80012ec:	4b13      	ldr	r3, [pc, #76]	; (800133c <MX_TIM7_Init+0x64>)
 80012ee:	2207      	movs	r2, #7
 80012f0:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012f2:	4b12      	ldr	r3, [pc, #72]	; (800133c <MX_TIM7_Init+0x64>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80012f8:	4b10      	ldr	r3, [pc, #64]	; (800133c <MX_TIM7_Init+0x64>)
 80012fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012fe:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001300:	4b0e      	ldr	r3, [pc, #56]	; (800133c <MX_TIM7_Init+0x64>)
 8001302:	2280      	movs	r2, #128	; 0x80
 8001304:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001306:	480d      	ldr	r0, [pc, #52]	; (800133c <MX_TIM7_Init+0x64>)
 8001308:	f004 f910 	bl	800552c <HAL_TIM_Base_Init>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001312:	f000 fa2f 	bl	8001774 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001316:	2300      	movs	r3, #0
 8001318:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800131a:	2300      	movs	r3, #0
 800131c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800131e:	463b      	mov	r3, r7
 8001320:	4619      	mov	r1, r3
 8001322:	4806      	ldr	r0, [pc, #24]	; (800133c <MX_TIM7_Init+0x64>)
 8001324:	f006 f996 	bl	8007654 <HAL_TIMEx_MasterConfigSynchronization>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800132e:	f000 fa21 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001332:	bf00      	nop
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	200008bc 	.word	0x200008bc
 8001340:	40001400 	.word	0x40001400

08001344 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b096      	sub	sp, #88	; 0x58
 8001348:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800134a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	605a      	str	r2, [r3, #4]
 8001354:	609a      	str	r2, [r3, #8]
 8001356:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001358:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001362:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	605a      	str	r2, [r3, #4]
 800136c:	609a      	str	r2, [r3, #8]
 800136e:	60da      	str	r2, [r3, #12]
 8001370:	611a      	str	r2, [r3, #16]
 8001372:	615a      	str	r2, [r3, #20]
 8001374:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001376:	1d3b      	adds	r3, r7, #4
 8001378:	2220      	movs	r2, #32
 800137a:	2100      	movs	r1, #0
 800137c:	4618      	mov	r0, r3
 800137e:	f009 f8a5 	bl	800a4cc <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001382:	4b50      	ldr	r3, [pc, #320]	; (80014c4 <MX_TIM8_Init+0x180>)
 8001384:	4a50      	ldr	r2, [pc, #320]	; (80014c8 <MX_TIM8_Init+0x184>)
 8001386:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 7;
 8001388:	4b4e      	ldr	r3, [pc, #312]	; (80014c4 <MX_TIM8_Init+0x180>)
 800138a:	2207      	movs	r2, #7
 800138c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800138e:	4b4d      	ldr	r3, [pc, #308]	; (80014c4 <MX_TIM8_Init+0x180>)
 8001390:	2200      	movs	r2, #0
 8001392:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 100;
 8001394:	4b4b      	ldr	r3, [pc, #300]	; (80014c4 <MX_TIM8_Init+0x180>)
 8001396:	2264      	movs	r2, #100	; 0x64
 8001398:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800139a:	4b4a      	ldr	r3, [pc, #296]	; (80014c4 <MX_TIM8_Init+0x180>)
 800139c:	2200      	movs	r2, #0
 800139e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80013a0:	4b48      	ldr	r3, [pc, #288]	; (80014c4 <MX_TIM8_Init+0x180>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013a6:	4b47      	ldr	r3, [pc, #284]	; (80014c4 <MX_TIM8_Init+0x180>)
 80013a8:	2280      	movs	r2, #128	; 0x80
 80013aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80013ac:	4845      	ldr	r0, [pc, #276]	; (80014c4 <MX_TIM8_Init+0x180>)
 80013ae:	f004 f8bd 	bl	800552c <HAL_TIM_Base_Init>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 80013b8:	f000 f9dc 	bl	8001774 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013c0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80013c2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80013c6:	4619      	mov	r1, r3
 80013c8:	483e      	ldr	r0, [pc, #248]	; (80014c4 <MX_TIM8_Init+0x180>)
 80013ca:	f005 f9e7 	bl	800679c <HAL_TIM_ConfigClockSource>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 80013d4:	f000 f9ce 	bl	8001774 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80013d8:	483a      	ldr	r0, [pc, #232]	; (80014c4 <MX_TIM8_Init+0x180>)
 80013da:	f004 fa95 	bl	8005908 <HAL_TIM_PWM_Init>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 80013e4:	f000 f9c6 	bl	8001774 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013e8:	2300      	movs	r3, #0
 80013ea:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ec:	2300      	movs	r3, #0
 80013ee:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80013f0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80013f4:	4619      	mov	r1, r3
 80013f6:	4833      	ldr	r0, [pc, #204]	; (80014c4 <MX_TIM8_Init+0x180>)
 80013f8:	f006 f92c 	bl	8007654 <HAL_TIMEx_MasterConfigSynchronization>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 8001402:	f000 f9b7 	bl	8001774 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001406:	2360      	movs	r3, #96	; 0x60
 8001408:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800140a:	2300      	movs	r3, #0
 800140c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800140e:	2300      	movs	r3, #0
 8001410:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001412:	2300      	movs	r3, #0
 8001414:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001416:	2300      	movs	r3, #0
 8001418:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800141a:	2300      	movs	r3, #0
 800141c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800141e:	2300      	movs	r3, #0
 8001420:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001422:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001426:	2200      	movs	r2, #0
 8001428:	4619      	mov	r1, r3
 800142a:	4826      	ldr	r0, [pc, #152]	; (80014c4 <MX_TIM8_Init+0x180>)
 800142c:	f005 f818 	bl	8006460 <HAL_TIM_PWM_ConfigChannel>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 8001436:	f000 f99d 	bl	8001774 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800143a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800143e:	2204      	movs	r2, #4
 8001440:	4619      	mov	r1, r3
 8001442:	4820      	ldr	r0, [pc, #128]	; (80014c4 <MX_TIM8_Init+0x180>)
 8001444:	f005 f80c 	bl	8006460 <HAL_TIM_PWM_ConfigChannel>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_TIM8_Init+0x10e>
  {
    Error_Handler();
 800144e:	f000 f991 	bl	8001774 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001452:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001456:	2208      	movs	r2, #8
 8001458:	4619      	mov	r1, r3
 800145a:	481a      	ldr	r0, [pc, #104]	; (80014c4 <MX_TIM8_Init+0x180>)
 800145c:	f005 f800 	bl	8006460 <HAL_TIM_PWM_ConfigChannel>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_TIM8_Init+0x126>
  {
    Error_Handler();
 8001466:	f000 f985 	bl	8001774 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800146a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800146e:	220c      	movs	r2, #12
 8001470:	4619      	mov	r1, r3
 8001472:	4814      	ldr	r0, [pc, #80]	; (80014c4 <MX_TIM8_Init+0x180>)
 8001474:	f004 fff4 	bl	8006460 <HAL_TIM_PWM_ConfigChannel>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_TIM8_Init+0x13e>
  {
    Error_Handler();
 800147e:	f000 f979 	bl	8001774 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001482:	2300      	movs	r3, #0
 8001484:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001486:	2300      	movs	r3, #0
 8001488:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800148a:	2300      	movs	r3, #0
 800148c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800148e:	2300      	movs	r3, #0
 8001490:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001492:	2300      	movs	r3, #0
 8001494:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001496:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800149a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800149c:	2300      	movs	r3, #0
 800149e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80014a0:	1d3b      	adds	r3, r7, #4
 80014a2:	4619      	mov	r1, r3
 80014a4:	4807      	ldr	r0, [pc, #28]	; (80014c4 <MX_TIM8_Init+0x180>)
 80014a6:	f006 f9a5 	bl	80077f4 <HAL_TIMEx_ConfigBreakDeadTime>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_TIM8_Init+0x170>
  {
    Error_Handler();
 80014b0:	f000 f960 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80014b4:	4803      	ldr	r0, [pc, #12]	; (80014c4 <MX_TIM8_Init+0x180>)
 80014b6:	f000 fb7f 	bl	8001bb8 <HAL_TIM_MspPostInit>

}
 80014ba:	bf00      	nop
 80014bc:	3758      	adds	r7, #88	; 0x58
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	200002a4 	.word	0x200002a4
 80014c8:	40013400 	.word	0x40013400

080014cc <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80014d0:	4b11      	ldr	r3, [pc, #68]	; (8001518 <MX_UART4_Init+0x4c>)
 80014d2:	4a12      	ldr	r2, [pc, #72]	; (800151c <MX_UART4_Init+0x50>)
 80014d4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80014d6:	4b10      	ldr	r3, [pc, #64]	; (8001518 <MX_UART4_Init+0x4c>)
 80014d8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80014dc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80014de:	4b0e      	ldr	r3, [pc, #56]	; (8001518 <MX_UART4_Init+0x4c>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80014e4:	4b0c      	ldr	r3, [pc, #48]	; (8001518 <MX_UART4_Init+0x4c>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80014ea:	4b0b      	ldr	r3, [pc, #44]	; (8001518 <MX_UART4_Init+0x4c>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80014f0:	4b09      	ldr	r3, [pc, #36]	; (8001518 <MX_UART4_Init+0x4c>)
 80014f2:	220c      	movs	r2, #12
 80014f4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014f6:	4b08      	ldr	r3, [pc, #32]	; (8001518 <MX_UART4_Init+0x4c>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80014fc:	4b06      	ldr	r3, [pc, #24]	; (8001518 <MX_UART4_Init+0x4c>)
 80014fe:	2200      	movs	r2, #0
 8001500:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001502:	4805      	ldr	r0, [pc, #20]	; (8001518 <MX_UART4_Init+0x4c>)
 8001504:	f006 fa5e 	bl	80079c4 <HAL_UART_Init>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800150e:	f000 f931 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	20000794 	.word	0x20000794
 800151c:	40004c00 	.word	0x40004c00

08001520 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001524:	4b11      	ldr	r3, [pc, #68]	; (800156c <MX_USART1_UART_Init+0x4c>)
 8001526:	4a12      	ldr	r2, [pc, #72]	; (8001570 <MX_USART1_UART_Init+0x50>)
 8001528:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800152a:	4b10      	ldr	r3, [pc, #64]	; (800156c <MX_USART1_UART_Init+0x4c>)
 800152c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001530:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001532:	4b0e      	ldr	r3, [pc, #56]	; (800156c <MX_USART1_UART_Init+0x4c>)
 8001534:	2200      	movs	r2, #0
 8001536:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001538:	4b0c      	ldr	r3, [pc, #48]	; (800156c <MX_USART1_UART_Init+0x4c>)
 800153a:	2200      	movs	r2, #0
 800153c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800153e:	4b0b      	ldr	r3, [pc, #44]	; (800156c <MX_USART1_UART_Init+0x4c>)
 8001540:	2200      	movs	r2, #0
 8001542:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001544:	4b09      	ldr	r3, [pc, #36]	; (800156c <MX_USART1_UART_Init+0x4c>)
 8001546:	220c      	movs	r2, #12
 8001548:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800154a:	4b08      	ldr	r3, [pc, #32]	; (800156c <MX_USART1_UART_Init+0x4c>)
 800154c:	2200      	movs	r2, #0
 800154e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001550:	4b06      	ldr	r3, [pc, #24]	; (800156c <MX_USART1_UART_Init+0x4c>)
 8001552:	2200      	movs	r2, #0
 8001554:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001556:	4805      	ldr	r0, [pc, #20]	; (800156c <MX_USART1_UART_Init+0x4c>)
 8001558:	f006 fa34 	bl	80079c4 <HAL_UART_Init>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001562:	f000 f907 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	200005a4 	.word	0x200005a4
 8001570:	40013800 	.word	0x40013800

08001574 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b088      	sub	sp, #32
 8001578:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157a:	f107 0310 	add.w	r3, r7, #16
 800157e:	2200      	movs	r2, #0
 8001580:	601a      	str	r2, [r3, #0]
 8001582:	605a      	str	r2, [r3, #4]
 8001584:	609a      	str	r2, [r3, #8]
 8001586:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001588:	4b4e      	ldr	r3, [pc, #312]	; (80016c4 <MX_GPIO_Init+0x150>)
 800158a:	699b      	ldr	r3, [r3, #24]
 800158c:	4a4d      	ldr	r2, [pc, #308]	; (80016c4 <MX_GPIO_Init+0x150>)
 800158e:	f043 0310 	orr.w	r3, r3, #16
 8001592:	6193      	str	r3, [r2, #24]
 8001594:	4b4b      	ldr	r3, [pc, #300]	; (80016c4 <MX_GPIO_Init+0x150>)
 8001596:	699b      	ldr	r3, [r3, #24]
 8001598:	f003 0310 	and.w	r3, r3, #16
 800159c:	60fb      	str	r3, [r7, #12]
 800159e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a0:	4b48      	ldr	r3, [pc, #288]	; (80016c4 <MX_GPIO_Init+0x150>)
 80015a2:	699b      	ldr	r3, [r3, #24]
 80015a4:	4a47      	ldr	r2, [pc, #284]	; (80016c4 <MX_GPIO_Init+0x150>)
 80015a6:	f043 0304 	orr.w	r3, r3, #4
 80015aa:	6193      	str	r3, [r2, #24]
 80015ac:	4b45      	ldr	r3, [pc, #276]	; (80016c4 <MX_GPIO_Init+0x150>)
 80015ae:	699b      	ldr	r3, [r3, #24]
 80015b0:	f003 0304 	and.w	r3, r3, #4
 80015b4:	60bb      	str	r3, [r7, #8]
 80015b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015b8:	4b42      	ldr	r3, [pc, #264]	; (80016c4 <MX_GPIO_Init+0x150>)
 80015ba:	699b      	ldr	r3, [r3, #24]
 80015bc:	4a41      	ldr	r2, [pc, #260]	; (80016c4 <MX_GPIO_Init+0x150>)
 80015be:	f043 0308 	orr.w	r3, r3, #8
 80015c2:	6193      	str	r3, [r2, #24]
 80015c4:	4b3f      	ldr	r3, [pc, #252]	; (80016c4 <MX_GPIO_Init+0x150>)
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	f003 0308 	and.w	r3, r3, #8
 80015cc:	607b      	str	r3, [r7, #4]
 80015ce:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015d0:	4b3c      	ldr	r3, [pc, #240]	; (80016c4 <MX_GPIO_Init+0x150>)
 80015d2:	699b      	ldr	r3, [r3, #24]
 80015d4:	4a3b      	ldr	r2, [pc, #236]	; (80016c4 <MX_GPIO_Init+0x150>)
 80015d6:	f043 0320 	orr.w	r3, r3, #32
 80015da:	6193      	str	r3, [r2, #24]
 80015dc:	4b39      	ldr	r3, [pc, #228]	; (80016c4 <MX_GPIO_Init+0x150>)
 80015de:	699b      	ldr	r3, [r3, #24]
 80015e0:	f003 0320 	and.w	r3, r3, #32
 80015e4:	603b      	str	r3, [r7, #0]
 80015e6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BLUE_LED_Pin|BLUETOOTH_SPI_CMD_Pin|BLUETOOTH_SPI_CS_Pin|MOTOR_FRONT_RIGHT_IN_1_Pin
 80015e8:	2200      	movs	r2, #0
 80015ea:	f243 013a 	movw	r1, #12346	; 0x303a
 80015ee:	4836      	ldr	r0, [pc, #216]	; (80016c8 <MX_GPIO_Init+0x154>)
 80015f0:	f002 f8b2 	bl	8003758 <HAL_GPIO_WritePin>
                          |MOTOR_FRONT_RIGHT_IN_2_Pin|MOTOR_REAR_LEFT_IN_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLUETOOTH_SPI_CLK_GPIO_Port, BLUETOOTH_SPI_CLK_Pin, GPIO_PIN_RESET);
 80015f4:	2200      	movs	r2, #0
 80015f6:	2110      	movs	r1, #16
 80015f8:	4834      	ldr	r0, [pc, #208]	; (80016cc <MX_GPIO_Init+0x158>)
 80015fa:	f002 f8ad 	bl	8003758 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR_FRONT_LEFT_IN_1_Pin|MOTOR_FRONT_LEFT_IN_2_Pin|MOTOR_REAR_RIGHT_IN_2_Pin|MOTOR_REAR_RIGHT_IN_1_Pin, GPIO_PIN_RESET);
 80015fe:	2200      	movs	r2, #0
 8001600:	2133      	movs	r1, #51	; 0x33
 8001602:	4833      	ldr	r0, [pc, #204]	; (80016d0 <MX_GPIO_Init+0x15c>)
 8001604:	f002 f8a8 	bl	8003758 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_REAR_LEFT_IN_1_GPIO_Port, MOTOR_REAR_LEFT_IN_1_Pin, GPIO_PIN_RESET);
 8001608:	2200      	movs	r2, #0
 800160a:	2104      	movs	r1, #4
 800160c:	4831      	ldr	r0, [pc, #196]	; (80016d4 <MX_GPIO_Init+0x160>)
 800160e:	f002 f8a3 	bl	8003758 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_LED_Pin */
  GPIO_InitStruct.Pin = BLUE_LED_Pin;
 8001612:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001616:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001618:	2301      	movs	r3, #1
 800161a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161c:	2300      	movs	r3, #0
 800161e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001620:	2302      	movs	r3, #2
 8001622:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLUE_LED_GPIO_Port, &GPIO_InitStruct);
 8001624:	f107 0310 	add.w	r3, r7, #16
 8001628:	4619      	mov	r1, r3
 800162a:	4827      	ldr	r0, [pc, #156]	; (80016c8 <MX_GPIO_Init+0x154>)
 800162c:	f001 fe00 	bl	8003230 <HAL_GPIO_Init>

  /*Configure GPIO pins : BLUETOOTH_SPI_CMD_Pin BLUETOOTH_SPI_CS_Pin MOTOR_FRONT_RIGHT_IN_1_Pin MOTOR_FRONT_RIGHT_IN_2_Pin
                           MOTOR_REAR_LEFT_IN_2_Pin */
  GPIO_InitStruct.Pin = BLUETOOTH_SPI_CMD_Pin|BLUETOOTH_SPI_CS_Pin|MOTOR_FRONT_RIGHT_IN_1_Pin|MOTOR_FRONT_RIGHT_IN_2_Pin
 8001630:	f241 033a 	movw	r3, #4154	; 0x103a
 8001634:	613b      	str	r3, [r7, #16]
                          |MOTOR_REAR_LEFT_IN_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001636:	2301      	movs	r3, #1
 8001638:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163a:	2300      	movs	r3, #0
 800163c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800163e:	2303      	movs	r3, #3
 8001640:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001642:	f107 0310 	add.w	r3, r7, #16
 8001646:	4619      	mov	r1, r3
 8001648:	481f      	ldr	r0, [pc, #124]	; (80016c8 <MX_GPIO_Init+0x154>)
 800164a:	f001 fdf1 	bl	8003230 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUETOOTH_SPI_DAT_Pin */
  GPIO_InitStruct.Pin = BLUETOOTH_SPI_DAT_Pin;
 800164e:	2304      	movs	r3, #4
 8001650:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001652:	2300      	movs	r3, #0
 8001654:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001656:	2300      	movs	r3, #0
 8001658:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BLUETOOTH_SPI_DAT_GPIO_Port, &GPIO_InitStruct);
 800165a:	f107 0310 	add.w	r3, r7, #16
 800165e:	4619      	mov	r1, r3
 8001660:	4819      	ldr	r0, [pc, #100]	; (80016c8 <MX_GPIO_Init+0x154>)
 8001662:	f001 fde5 	bl	8003230 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUETOOTH_SPI_CLK_Pin */
  GPIO_InitStruct.Pin = BLUETOOTH_SPI_CLK_Pin;
 8001666:	2310      	movs	r3, #16
 8001668:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800166a:	2301      	movs	r3, #1
 800166c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166e:	2300      	movs	r3, #0
 8001670:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001672:	2303      	movs	r3, #3
 8001674:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLUETOOTH_SPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8001676:	f107 0310 	add.w	r3, r7, #16
 800167a:	4619      	mov	r1, r3
 800167c:	4813      	ldr	r0, [pc, #76]	; (80016cc <MX_GPIO_Init+0x158>)
 800167e:	f001 fdd7 	bl	8003230 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_FRONT_LEFT_IN_1_Pin MOTOR_FRONT_LEFT_IN_2_Pin MOTOR_REAR_RIGHT_IN_2_Pin MOTOR_REAR_RIGHT_IN_1_Pin */
  GPIO_InitStruct.Pin = MOTOR_FRONT_LEFT_IN_1_Pin|MOTOR_FRONT_LEFT_IN_2_Pin|MOTOR_REAR_RIGHT_IN_2_Pin|MOTOR_REAR_RIGHT_IN_1_Pin;
 8001682:	2333      	movs	r3, #51	; 0x33
 8001684:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001686:	2301      	movs	r3, #1
 8001688:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168a:	2300      	movs	r3, #0
 800168c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800168e:	2303      	movs	r3, #3
 8001690:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001692:	f107 0310 	add.w	r3, r7, #16
 8001696:	4619      	mov	r1, r3
 8001698:	480d      	ldr	r0, [pc, #52]	; (80016d0 <MX_GPIO_Init+0x15c>)
 800169a:	f001 fdc9 	bl	8003230 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTOR_REAR_LEFT_IN_1_Pin */
  GPIO_InitStruct.Pin = MOTOR_REAR_LEFT_IN_1_Pin;
 800169e:	2304      	movs	r3, #4
 80016a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016a2:	2301      	movs	r3, #1
 80016a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a6:	2300      	movs	r3, #0
 80016a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016aa:	2303      	movs	r3, #3
 80016ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MOTOR_REAR_LEFT_IN_1_GPIO_Port, &GPIO_InitStruct);
 80016ae:	f107 0310 	add.w	r3, r7, #16
 80016b2:	4619      	mov	r1, r3
 80016b4:	4807      	ldr	r0, [pc, #28]	; (80016d4 <MX_GPIO_Init+0x160>)
 80016b6:	f001 fdbb 	bl	8003230 <HAL_GPIO_Init>

}
 80016ba:	bf00      	nop
 80016bc:	3720      	adds	r7, #32
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	40021000 	.word	0x40021000
 80016c8:	40011000 	.word	0x40011000
 80016cc:	40010800 	.word	0x40010800
 80016d0:	40010c00 	.word	0x40010c00
 80016d4:	40011400 	.word	0x40011400

080016d8 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  if ((htim == &htim2) || (htim == &htim3) || (htim == &htim4) || (htim == &htim5))
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	4a0b      	ldr	r2, [pc, #44]	; (8001710 <HAL_TIM_IC_CaptureCallback+0x38>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d00b      	beq.n	8001700 <HAL_TIM_IC_CaptureCallback+0x28>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	4a0a      	ldr	r2, [pc, #40]	; (8001714 <HAL_TIM_IC_CaptureCallback+0x3c>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d007      	beq.n	8001700 <HAL_TIM_IC_CaptureCallback+0x28>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	4a09      	ldr	r2, [pc, #36]	; (8001718 <HAL_TIM_IC_CaptureCallback+0x40>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d003      	beq.n	8001700 <HAL_TIM_IC_CaptureCallback+0x28>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	4a08      	ldr	r2, [pc, #32]	; (800171c <HAL_TIM_IC_CaptureCallback+0x44>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d103      	bne.n	8001708 <HAL_TIM_IC_CaptureCallback+0x30>
  {
    DRV_updateEncoder(htim);
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f007 fbf5 	bl	8008ef0 <DRV_updateEncoder>
  else
  {
    ; /* Nothing to do */
  }

  return;
 8001706:	bf00      	nop
 8001708:	bf00      	nop
}
 800170a:	3708      	adds	r7, #8
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	20000808 	.word	0x20000808
 8001714:	200004c0 	.word	0x200004c0
 8001718:	20000358 	.word	0x20000358
 800171c:	2000040c 	.word	0x2000040c

08001720 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  /* Check the handle of the timer triggering this callback and update LED */
  if (htim == &htim1)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	4a04      	ldr	r2, [pc, #16]	; (800173c <HAL_TIM_PeriodElapsedCallback+0x1c>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d101      	bne.n	8001734 <HAL_TIM_PeriodElapsedCallback+0x14>
  {
    LED_update();
 8001730:	f008 f96a 	bl	8009a08 <LED_update>
  }
  else
  {
    ; /* Nothing to do */
  }
}
 8001734:	bf00      	nop
 8001736:	3708      	adds	r7, #8
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	200006e0 	.word	0x200006e0

08001740 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  /* Check the handle of the UART triggering this callback and actually receive date */
  if (huart == &huart1)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	4a08      	ldr	r2, [pc, #32]	; (800176c <HAL_UART_RxCpltCallback+0x2c>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d102      	bne.n	8001756 <HAL_UART_RxCpltCallback+0x16>
  {
    CON_receiveData();
 8001750:	f007 faaa 	bl	8008ca8 <CON_receiveData>
  }
  else
  {
    ; /* Nothing to do */
  }
}
 8001754:	e005      	b.n	8001762 <HAL_UART_RxCpltCallback+0x22>
  else if (huart == &huart4)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4a05      	ldr	r2, [pc, #20]	; (8001770 <HAL_UART_RxCpltCallback+0x30>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d101      	bne.n	8001762 <HAL_UART_RxCpltCallback+0x22>
    MAS_receiveData();
 800175e:	f008 fab9 	bl	8009cd4 <MAS_receiveData>
}
 8001762:	bf00      	nop
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	200005a4 	.word	0x200005a4
 8001770:	20000794 	.word	0x20000794

08001774 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001778:	b672      	cpsid	i
}
 800177a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();

  LOG_error("Error_Handler() triggered");
 800177c:	4902      	ldr	r1, [pc, #8]	; (8001788 <Error_Handler+0x14>)
 800177e:	2003      	movs	r0, #3
 8001780:	f008 fa1c 	bl	8009bbc <LOG_log>

  while (1)
 8001784:	e7fe      	b.n	8001784 <Error_Handler+0x10>
 8001786:	bf00      	nop
 8001788:	0800b964 	.word	0x0800b964

0800178c <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
     LOG_error("Wrong parameters: %s@%d", file, line);
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	687a      	ldr	r2, [r7, #4]
 800179a:	4904      	ldr	r1, [pc, #16]	; (80017ac <assert_failed+0x20>)
 800179c:	2003      	movs	r0, #3
 800179e:	f008 fa0d 	bl	8009bbc <LOG_log>

    return;
 80017a2:	bf00      	nop
  /* USER CODE END 6 */
}
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	0800b980 	.word	0x0800b980

080017b0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b085      	sub	sp, #20
 80017b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017b6:	4b15      	ldr	r3, [pc, #84]	; (800180c <HAL_MspInit+0x5c>)
 80017b8:	699b      	ldr	r3, [r3, #24]
 80017ba:	4a14      	ldr	r2, [pc, #80]	; (800180c <HAL_MspInit+0x5c>)
 80017bc:	f043 0301 	orr.w	r3, r3, #1
 80017c0:	6193      	str	r3, [r2, #24]
 80017c2:	4b12      	ldr	r3, [pc, #72]	; (800180c <HAL_MspInit+0x5c>)
 80017c4:	699b      	ldr	r3, [r3, #24]
 80017c6:	f003 0301 	and.w	r3, r3, #1
 80017ca:	60bb      	str	r3, [r7, #8]
 80017cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ce:	4b0f      	ldr	r3, [pc, #60]	; (800180c <HAL_MspInit+0x5c>)
 80017d0:	69db      	ldr	r3, [r3, #28]
 80017d2:	4a0e      	ldr	r2, [pc, #56]	; (800180c <HAL_MspInit+0x5c>)
 80017d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017d8:	61d3      	str	r3, [r2, #28]
 80017da:	4b0c      	ldr	r3, [pc, #48]	; (800180c <HAL_MspInit+0x5c>)
 80017dc:	69db      	ldr	r3, [r3, #28]
 80017de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017e2:	607b      	str	r3, [r7, #4]
 80017e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80017e6:	4b0a      	ldr	r3, [pc, #40]	; (8001810 <HAL_MspInit+0x60>)
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	4a04      	ldr	r2, [pc, #16]	; (8001810 <HAL_MspInit+0x60>)
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001802:	bf00      	nop
 8001804:	3714      	adds	r7, #20
 8001806:	46bd      	mov	sp, r7
 8001808:	bc80      	pop	{r7}
 800180a:	4770      	bx	lr
 800180c:	40021000 	.word	0x40021000
 8001810:	40010000 	.word	0x40010000

08001814 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b088      	sub	sp, #32
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800181c:	f107 0310 	add.w	r3, r7, #16
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	605a      	str	r2, [r3, #4]
 8001826:	609a      	str	r2, [r3, #8]
 8001828:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a14      	ldr	r2, [pc, #80]	; (8001880 <HAL_ADC_MspInit+0x6c>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d121      	bne.n	8001878 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001834:	4b13      	ldr	r3, [pc, #76]	; (8001884 <HAL_ADC_MspInit+0x70>)
 8001836:	699b      	ldr	r3, [r3, #24]
 8001838:	4a12      	ldr	r2, [pc, #72]	; (8001884 <HAL_ADC_MspInit+0x70>)
 800183a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800183e:	6193      	str	r3, [r2, #24]
 8001840:	4b10      	ldr	r3, [pc, #64]	; (8001884 <HAL_ADC_MspInit+0x70>)
 8001842:	699b      	ldr	r3, [r3, #24]
 8001844:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001848:	60fb      	str	r3, [r7, #12]
 800184a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800184c:	4b0d      	ldr	r3, [pc, #52]	; (8001884 <HAL_ADC_MspInit+0x70>)
 800184e:	699b      	ldr	r3, [r3, #24]
 8001850:	4a0c      	ldr	r2, [pc, #48]	; (8001884 <HAL_ADC_MspInit+0x70>)
 8001852:	f043 0304 	orr.w	r3, r3, #4
 8001856:	6193      	str	r3, [r2, #24]
 8001858:	4b0a      	ldr	r3, [pc, #40]	; (8001884 <HAL_ADC_MspInit+0x70>)
 800185a:	699b      	ldr	r3, [r3, #24]
 800185c:	f003 0304 	and.w	r3, r3, #4
 8001860:	60bb      	str	r3, [r7, #8]
 8001862:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = BATTERY_ADC_Pin;
 8001864:	2320      	movs	r3, #32
 8001866:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001868:	2303      	movs	r3, #3
 800186a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(BATTERY_ADC_GPIO_Port, &GPIO_InitStruct);
 800186c:	f107 0310 	add.w	r3, r7, #16
 8001870:	4619      	mov	r1, r3
 8001872:	4805      	ldr	r0, [pc, #20]	; (8001888 <HAL_ADC_MspInit+0x74>)
 8001874:	f001 fcdc 	bl	8003230 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001878:	bf00      	nop
 800187a:	3720      	adds	r7, #32
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	40012400 	.word	0x40012400
 8001884:	40021000 	.word	0x40021000
 8001888:	40010800 	.word	0x40010800

0800188c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a0b      	ldr	r2, [pc, #44]	; (80018c8 <HAL_RTC_MspInit+0x3c>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d110      	bne.n	80018c0 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800189e:	f001 ffb5 	bl	800380c <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80018a2:	4b0a      	ldr	r3, [pc, #40]	; (80018cc <HAL_RTC_MspInit+0x40>)
 80018a4:	69db      	ldr	r3, [r3, #28]
 80018a6:	4a09      	ldr	r2, [pc, #36]	; (80018cc <HAL_RTC_MspInit+0x40>)
 80018a8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80018ac:	61d3      	str	r3, [r2, #28]
 80018ae:	4b07      	ldr	r3, [pc, #28]	; (80018cc <HAL_RTC_MspInit+0x40>)
 80018b0:	69db      	ldr	r3, [r3, #28]
 80018b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80018b6:	60fb      	str	r3, [r7, #12]
 80018b8:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80018ba:	4b05      	ldr	r3, [pc, #20]	; (80018d0 <HAL_RTC_MspInit+0x44>)
 80018bc:	2201      	movs	r2, #1
 80018be:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80018c0:	bf00      	nop
 80018c2:	3710      	adds	r7, #16
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	40002800 	.word	0x40002800
 80018cc:	40021000 	.word	0x40021000
 80018d0:	4242043c 	.word	0x4242043c

080018d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b086      	sub	sp, #24
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a28      	ldr	r2, [pc, #160]	; (8001984 <HAL_TIM_Base_MspInit+0xb0>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d114      	bne.n	8001910 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018e6:	4b28      	ldr	r3, [pc, #160]	; (8001988 <HAL_TIM_Base_MspInit+0xb4>)
 80018e8:	699b      	ldr	r3, [r3, #24]
 80018ea:	4a27      	ldr	r2, [pc, #156]	; (8001988 <HAL_TIM_Base_MspInit+0xb4>)
 80018ec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80018f0:	6193      	str	r3, [r2, #24]
 80018f2:	4b25      	ldr	r3, [pc, #148]	; (8001988 <HAL_TIM_Base_MspInit+0xb4>)
 80018f4:	699b      	ldr	r3, [r3, #24]
 80018f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018fa:	617b      	str	r3, [r7, #20]
 80018fc:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 6, 0);
 80018fe:	2200      	movs	r2, #0
 8001900:	2106      	movs	r1, #6
 8001902:	2019      	movs	r0, #25
 8001904:	f001 fb02 	bl	8002f0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001908:	2019      	movs	r0, #25
 800190a:	f001 fb2b 	bl	8002f64 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800190e:	e034      	b.n	800197a <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM6)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a1d      	ldr	r2, [pc, #116]	; (800198c <HAL_TIM_Base_MspInit+0xb8>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d10c      	bne.n	8001934 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800191a:	4b1b      	ldr	r3, [pc, #108]	; (8001988 <HAL_TIM_Base_MspInit+0xb4>)
 800191c:	69db      	ldr	r3, [r3, #28]
 800191e:	4a1a      	ldr	r2, [pc, #104]	; (8001988 <HAL_TIM_Base_MspInit+0xb4>)
 8001920:	f043 0310 	orr.w	r3, r3, #16
 8001924:	61d3      	str	r3, [r2, #28]
 8001926:	4b18      	ldr	r3, [pc, #96]	; (8001988 <HAL_TIM_Base_MspInit+0xb4>)
 8001928:	69db      	ldr	r3, [r3, #28]
 800192a:	f003 0310 	and.w	r3, r3, #16
 800192e:	613b      	str	r3, [r7, #16]
 8001930:	693b      	ldr	r3, [r7, #16]
}
 8001932:	e022      	b.n	800197a <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM7)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a15      	ldr	r2, [pc, #84]	; (8001990 <HAL_TIM_Base_MspInit+0xbc>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d10c      	bne.n	8001958 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800193e:	4b12      	ldr	r3, [pc, #72]	; (8001988 <HAL_TIM_Base_MspInit+0xb4>)
 8001940:	69db      	ldr	r3, [r3, #28]
 8001942:	4a11      	ldr	r2, [pc, #68]	; (8001988 <HAL_TIM_Base_MspInit+0xb4>)
 8001944:	f043 0320 	orr.w	r3, r3, #32
 8001948:	61d3      	str	r3, [r2, #28]
 800194a:	4b0f      	ldr	r3, [pc, #60]	; (8001988 <HAL_TIM_Base_MspInit+0xb4>)
 800194c:	69db      	ldr	r3, [r3, #28]
 800194e:	f003 0320 	and.w	r3, r3, #32
 8001952:	60fb      	str	r3, [r7, #12]
 8001954:	68fb      	ldr	r3, [r7, #12]
}
 8001956:	e010      	b.n	800197a <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM8)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a0d      	ldr	r2, [pc, #52]	; (8001994 <HAL_TIM_Base_MspInit+0xc0>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d10b      	bne.n	800197a <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001962:	4b09      	ldr	r3, [pc, #36]	; (8001988 <HAL_TIM_Base_MspInit+0xb4>)
 8001964:	699b      	ldr	r3, [r3, #24]
 8001966:	4a08      	ldr	r2, [pc, #32]	; (8001988 <HAL_TIM_Base_MspInit+0xb4>)
 8001968:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800196c:	6193      	str	r3, [r2, #24]
 800196e:	4b06      	ldr	r3, [pc, #24]	; (8001988 <HAL_TIM_Base_MspInit+0xb4>)
 8001970:	699b      	ldr	r3, [r3, #24]
 8001972:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001976:	60bb      	str	r3, [r7, #8]
 8001978:	68bb      	ldr	r3, [r7, #8]
}
 800197a:	bf00      	nop
 800197c:	3718      	adds	r7, #24
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	40012c00 	.word	0x40012c00
 8001988:	40021000 	.word	0x40021000
 800198c:	40001000 	.word	0x40001000
 8001990:	40001400 	.word	0x40001400
 8001994:	40013400 	.word	0x40013400

08001998 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b090      	sub	sp, #64	; 0x40
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	605a      	str	r2, [r3, #4]
 80019aa:	609a      	str	r2, [r3, #8]
 80019ac:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019b6:	d157      	bne.n	8001a68 <HAL_TIM_Encoder_MspInit+0xd0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019b8:	4b78      	ldr	r3, [pc, #480]	; (8001b9c <HAL_TIM_Encoder_MspInit+0x204>)
 80019ba:	69db      	ldr	r3, [r3, #28]
 80019bc:	4a77      	ldr	r2, [pc, #476]	; (8001b9c <HAL_TIM_Encoder_MspInit+0x204>)
 80019be:	f043 0301 	orr.w	r3, r3, #1
 80019c2:	61d3      	str	r3, [r2, #28]
 80019c4:	4b75      	ldr	r3, [pc, #468]	; (8001b9c <HAL_TIM_Encoder_MspInit+0x204>)
 80019c6:	69db      	ldr	r3, [r3, #28]
 80019c8:	f003 0301 	and.w	r3, r3, #1
 80019cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80019ce:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d0:	4b72      	ldr	r3, [pc, #456]	; (8001b9c <HAL_TIM_Encoder_MspInit+0x204>)
 80019d2:	699b      	ldr	r3, [r3, #24]
 80019d4:	4a71      	ldr	r2, [pc, #452]	; (8001b9c <HAL_TIM_Encoder_MspInit+0x204>)
 80019d6:	f043 0304 	orr.w	r3, r3, #4
 80019da:	6193      	str	r3, [r2, #24]
 80019dc:	4b6f      	ldr	r3, [pc, #444]	; (8001b9c <HAL_TIM_Encoder_MspInit+0x204>)
 80019de:	699b      	ldr	r3, [r3, #24]
 80019e0:	f003 0304 	and.w	r3, r3, #4
 80019e4:	627b      	str	r3, [r7, #36]	; 0x24
 80019e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019e8:	4b6c      	ldr	r3, [pc, #432]	; (8001b9c <HAL_TIM_Encoder_MspInit+0x204>)
 80019ea:	699b      	ldr	r3, [r3, #24]
 80019ec:	4a6b      	ldr	r2, [pc, #428]	; (8001b9c <HAL_TIM_Encoder_MspInit+0x204>)
 80019ee:	f043 0308 	orr.w	r3, r3, #8
 80019f2:	6193      	str	r3, [r2, #24]
 80019f4:	4b69      	ldr	r3, [pc, #420]	; (8001b9c <HAL_TIM_Encoder_MspInit+0x204>)
 80019f6:	699b      	ldr	r3, [r3, #24]
 80019f8:	f003 0308 	and.w	r3, r3, #8
 80019fc:	623b      	str	r3, [r7, #32]
 80019fe:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_1_IN_1_Pin;
 8001a00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a04:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a06:	2300      	movs	r3, #0
 8001a08:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENCODER_1_IN_1_GPIO_Port, &GPIO_InitStruct);
 8001a0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a12:	4619      	mov	r1, r3
 8001a14:	4862      	ldr	r0, [pc, #392]	; (8001ba0 <HAL_TIM_Encoder_MspInit+0x208>)
 8001a16:	f001 fc0b 	bl	8003230 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENCODER_1_IN_2_Pin;
 8001a1a:	2308      	movs	r3, #8
 8001a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a22:	2300      	movs	r3, #0
 8001a24:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENCODER_1_IN_2_GPIO_Port, &GPIO_InitStruct);
 8001a26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	485d      	ldr	r0, [pc, #372]	; (8001ba4 <HAL_TIM_Encoder_MspInit+0x20c>)
 8001a2e:	f001 fbff 	bl	8003230 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8001a32:	4b5d      	ldr	r3, [pc, #372]	; (8001ba8 <HAL_TIM_Encoder_MspInit+0x210>)
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a42:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001a46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a50:	4a55      	ldr	r2, [pc, #340]	; (8001ba8 <HAL_TIM_Encoder_MspInit+0x210>)
 8001a52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a54:	6053      	str	r3, [r2, #4]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 4, 0);
 8001a56:	2200      	movs	r2, #0
 8001a58:	2104      	movs	r1, #4
 8001a5a:	201c      	movs	r0, #28
 8001a5c:	f001 fa56 	bl	8002f0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a60:	201c      	movs	r0, #28
 8001a62:	f001 fa7f 	bl	8002f64 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001a66:	e094      	b.n	8001b92 <HAL_TIM_Encoder_MspInit+0x1fa>
  else if(htim_encoder->Instance==TIM3)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a4f      	ldr	r2, [pc, #316]	; (8001bac <HAL_TIM_Encoder_MspInit+0x214>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d12c      	bne.n	8001acc <HAL_TIM_Encoder_MspInit+0x134>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a72:	4b4a      	ldr	r3, [pc, #296]	; (8001b9c <HAL_TIM_Encoder_MspInit+0x204>)
 8001a74:	69db      	ldr	r3, [r3, #28]
 8001a76:	4a49      	ldr	r2, [pc, #292]	; (8001b9c <HAL_TIM_Encoder_MspInit+0x204>)
 8001a78:	f043 0302 	orr.w	r3, r3, #2
 8001a7c:	61d3      	str	r3, [r2, #28]
 8001a7e:	4b47      	ldr	r3, [pc, #284]	; (8001b9c <HAL_TIM_Encoder_MspInit+0x204>)
 8001a80:	69db      	ldr	r3, [r3, #28]
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	61fb      	str	r3, [r7, #28]
 8001a88:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a8a:	4b44      	ldr	r3, [pc, #272]	; (8001b9c <HAL_TIM_Encoder_MspInit+0x204>)
 8001a8c:	699b      	ldr	r3, [r3, #24]
 8001a8e:	4a43      	ldr	r2, [pc, #268]	; (8001b9c <HAL_TIM_Encoder_MspInit+0x204>)
 8001a90:	f043 0304 	orr.w	r3, r3, #4
 8001a94:	6193      	str	r3, [r2, #24]
 8001a96:	4b41      	ldr	r3, [pc, #260]	; (8001b9c <HAL_TIM_Encoder_MspInit+0x204>)
 8001a98:	699b      	ldr	r3, [r3, #24]
 8001a9a:	f003 0304 	and.w	r3, r3, #4
 8001a9e:	61bb      	str	r3, [r7, #24]
 8001aa0:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ENCODER_2_IN_1_Pin|ENCODER_2_IN_2_Pin;
 8001aa2:	23c0      	movs	r3, #192	; 0xc0
 8001aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	483a      	ldr	r0, [pc, #232]	; (8001ba0 <HAL_TIM_Encoder_MspInit+0x208>)
 8001ab6:	f001 fbbb 	bl	8003230 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 4, 0);
 8001aba:	2200      	movs	r2, #0
 8001abc:	2104      	movs	r1, #4
 8001abe:	201d      	movs	r0, #29
 8001ac0:	f001 fa24 	bl	8002f0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001ac4:	201d      	movs	r0, #29
 8001ac6:	f001 fa4d 	bl	8002f64 <HAL_NVIC_EnableIRQ>
}
 8001aca:	e062      	b.n	8001b92 <HAL_TIM_Encoder_MspInit+0x1fa>
  else if(htim_encoder->Instance==TIM4)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a37      	ldr	r2, [pc, #220]	; (8001bb0 <HAL_TIM_Encoder_MspInit+0x218>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d12c      	bne.n	8001b30 <HAL_TIM_Encoder_MspInit+0x198>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001ad6:	4b31      	ldr	r3, [pc, #196]	; (8001b9c <HAL_TIM_Encoder_MspInit+0x204>)
 8001ad8:	69db      	ldr	r3, [r3, #28]
 8001ada:	4a30      	ldr	r2, [pc, #192]	; (8001b9c <HAL_TIM_Encoder_MspInit+0x204>)
 8001adc:	f043 0304 	orr.w	r3, r3, #4
 8001ae0:	61d3      	str	r3, [r2, #28]
 8001ae2:	4b2e      	ldr	r3, [pc, #184]	; (8001b9c <HAL_TIM_Encoder_MspInit+0x204>)
 8001ae4:	69db      	ldr	r3, [r3, #28]
 8001ae6:	f003 0304 	and.w	r3, r3, #4
 8001aea:	617b      	str	r3, [r7, #20]
 8001aec:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aee:	4b2b      	ldr	r3, [pc, #172]	; (8001b9c <HAL_TIM_Encoder_MspInit+0x204>)
 8001af0:	699b      	ldr	r3, [r3, #24]
 8001af2:	4a2a      	ldr	r2, [pc, #168]	; (8001b9c <HAL_TIM_Encoder_MspInit+0x204>)
 8001af4:	f043 0308 	orr.w	r3, r3, #8
 8001af8:	6193      	str	r3, [r2, #24]
 8001afa:	4b28      	ldr	r3, [pc, #160]	; (8001b9c <HAL_TIM_Encoder_MspInit+0x204>)
 8001afc:	699b      	ldr	r3, [r3, #24]
 8001afe:	f003 0308 	and.w	r3, r3, #8
 8001b02:	613b      	str	r3, [r7, #16]
 8001b04:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ENCODER_3_IN_1_Pin|ENCODER_3_IN_2_Pin;
 8001b06:	23c0      	movs	r3, #192	; 0xc0
 8001b08:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b16:	4619      	mov	r1, r3
 8001b18:	4822      	ldr	r0, [pc, #136]	; (8001ba4 <HAL_TIM_Encoder_MspInit+0x20c>)
 8001b1a:	f001 fb89 	bl	8003230 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 4, 0);
 8001b1e:	2200      	movs	r2, #0
 8001b20:	2104      	movs	r1, #4
 8001b22:	201e      	movs	r0, #30
 8001b24:	f001 f9f2 	bl	8002f0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001b28:	201e      	movs	r0, #30
 8001b2a:	f001 fa1b 	bl	8002f64 <HAL_NVIC_EnableIRQ>
}
 8001b2e:	e030      	b.n	8001b92 <HAL_TIM_Encoder_MspInit+0x1fa>
  else if(htim_encoder->Instance==TIM5)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a1f      	ldr	r2, [pc, #124]	; (8001bb4 <HAL_TIM_Encoder_MspInit+0x21c>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d12b      	bne.n	8001b92 <HAL_TIM_Encoder_MspInit+0x1fa>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001b3a:	4b18      	ldr	r3, [pc, #96]	; (8001b9c <HAL_TIM_Encoder_MspInit+0x204>)
 8001b3c:	69db      	ldr	r3, [r3, #28]
 8001b3e:	4a17      	ldr	r2, [pc, #92]	; (8001b9c <HAL_TIM_Encoder_MspInit+0x204>)
 8001b40:	f043 0308 	orr.w	r3, r3, #8
 8001b44:	61d3      	str	r3, [r2, #28]
 8001b46:	4b15      	ldr	r3, [pc, #84]	; (8001b9c <HAL_TIM_Encoder_MspInit+0x204>)
 8001b48:	69db      	ldr	r3, [r3, #28]
 8001b4a:	f003 0308 	and.w	r3, r3, #8
 8001b4e:	60fb      	str	r3, [r7, #12]
 8001b50:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b52:	4b12      	ldr	r3, [pc, #72]	; (8001b9c <HAL_TIM_Encoder_MspInit+0x204>)
 8001b54:	699b      	ldr	r3, [r3, #24]
 8001b56:	4a11      	ldr	r2, [pc, #68]	; (8001b9c <HAL_TIM_Encoder_MspInit+0x204>)
 8001b58:	f043 0304 	orr.w	r3, r3, #4
 8001b5c:	6193      	str	r3, [r2, #24]
 8001b5e:	4b0f      	ldr	r3, [pc, #60]	; (8001b9c <HAL_TIM_Encoder_MspInit+0x204>)
 8001b60:	699b      	ldr	r3, [r3, #24]
 8001b62:	f003 0304 	and.w	r3, r3, #4
 8001b66:	60bb      	str	r3, [r7, #8]
 8001b68:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENCODER_4_IN_1_Pin|ENCODER_4_IN_2_Pin;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b72:	2300      	movs	r3, #0
 8001b74:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	4808      	ldr	r0, [pc, #32]	; (8001ba0 <HAL_TIM_Encoder_MspInit+0x208>)
 8001b7e:	f001 fb57 	bl	8003230 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 4, 0);
 8001b82:	2200      	movs	r2, #0
 8001b84:	2104      	movs	r1, #4
 8001b86:	2032      	movs	r0, #50	; 0x32
 8001b88:	f001 f9c0 	bl	8002f0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001b8c:	2032      	movs	r0, #50	; 0x32
 8001b8e:	f001 f9e9 	bl	8002f64 <HAL_NVIC_EnableIRQ>
}
 8001b92:	bf00      	nop
 8001b94:	3740      	adds	r7, #64	; 0x40
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	40021000 	.word	0x40021000
 8001ba0:	40010800 	.word	0x40010800
 8001ba4:	40010c00 	.word	0x40010c00
 8001ba8:	40010000 	.word	0x40010000
 8001bac:	40000400 	.word	0x40000400
 8001bb0:	40000800 	.word	0x40000800
 8001bb4:	40000c00 	.word	0x40000c00

08001bb8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b088      	sub	sp, #32
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc0:	f107 0310 	add.w	r3, r7, #16
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]
 8001bc8:	605a      	str	r2, [r3, #4]
 8001bca:	609a      	str	r2, [r3, #8]
 8001bcc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM8)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a10      	ldr	r2, [pc, #64]	; (8001c14 <HAL_TIM_MspPostInit+0x5c>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d118      	bne.n	8001c0a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bd8:	4b0f      	ldr	r3, [pc, #60]	; (8001c18 <HAL_TIM_MspPostInit+0x60>)
 8001bda:	699b      	ldr	r3, [r3, #24]
 8001bdc:	4a0e      	ldr	r2, [pc, #56]	; (8001c18 <HAL_TIM_MspPostInit+0x60>)
 8001bde:	f043 0310 	orr.w	r3, r3, #16
 8001be2:	6193      	str	r3, [r2, #24]
 8001be4:	4b0c      	ldr	r3, [pc, #48]	; (8001c18 <HAL_TIM_MspPostInit+0x60>)
 8001be6:	699b      	ldr	r3, [r3, #24]
 8001be8:	f003 0310 	and.w	r3, r3, #16
 8001bec:	60fb      	str	r3, [r7, #12]
 8001bee:	68fb      	ldr	r3, [r7, #12]
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    PC8     ------> TIM8_CH3
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = MOTOR_FRONT_LEFT_PWM_Pin|MOTOR_FRONT_RIGHT_PWM_Pin|MOTOR_REAR_LEFT_PWM_Pin|MOTOR_REAR_RIGHT_PWM_Pin;
 8001bf0:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001bf4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bfe:	f107 0310 	add.w	r3, r7, #16
 8001c02:	4619      	mov	r1, r3
 8001c04:	4805      	ldr	r0, [pc, #20]	; (8001c1c <HAL_TIM_MspPostInit+0x64>)
 8001c06:	f001 fb13 	bl	8003230 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001c0a:	bf00      	nop
 8001c0c:	3720      	adds	r7, #32
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	40013400 	.word	0x40013400
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	40011000 	.word	0x40011000

08001c20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b08a      	sub	sp, #40	; 0x28
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c28:	f107 0318 	add.w	r3, r7, #24
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	605a      	str	r2, [r3, #4]
 8001c32:	609a      	str	r2, [r3, #8]
 8001c34:	60da      	str	r2, [r3, #12]
  if(huart->Instance==UART4)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a40      	ldr	r2, [pc, #256]	; (8001d3c <HAL_UART_MspInit+0x11c>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d13a      	bne.n	8001cb6 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001c40:	4b3f      	ldr	r3, [pc, #252]	; (8001d40 <HAL_UART_MspInit+0x120>)
 8001c42:	69db      	ldr	r3, [r3, #28]
 8001c44:	4a3e      	ldr	r2, [pc, #248]	; (8001d40 <HAL_UART_MspInit+0x120>)
 8001c46:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001c4a:	61d3      	str	r3, [r2, #28]
 8001c4c:	4b3c      	ldr	r3, [pc, #240]	; (8001d40 <HAL_UART_MspInit+0x120>)
 8001c4e:	69db      	ldr	r3, [r3, #28]
 8001c50:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c54:	617b      	str	r3, [r7, #20]
 8001c56:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c58:	4b39      	ldr	r3, [pc, #228]	; (8001d40 <HAL_UART_MspInit+0x120>)
 8001c5a:	699b      	ldr	r3, [r3, #24]
 8001c5c:	4a38      	ldr	r2, [pc, #224]	; (8001d40 <HAL_UART_MspInit+0x120>)
 8001c5e:	f043 0310 	orr.w	r3, r3, #16
 8001c62:	6193      	str	r3, [r2, #24]
 8001c64:	4b36      	ldr	r3, [pc, #216]	; (8001d40 <HAL_UART_MspInit+0x120>)
 8001c66:	699b      	ldr	r3, [r3, #24]
 8001c68:	f003 0310 	and.w	r3, r3, #16
 8001c6c:	613b      	str	r3, [r7, #16]
 8001c6e:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = MASTER_USART_TX_Pin;
 8001c70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c76:	2302      	movs	r3, #2
 8001c78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MASTER_USART_TX_GPIO_Port, &GPIO_InitStruct);
 8001c7e:	f107 0318 	add.w	r3, r7, #24
 8001c82:	4619      	mov	r1, r3
 8001c84:	482f      	ldr	r0, [pc, #188]	; (8001d44 <HAL_UART_MspInit+0x124>)
 8001c86:	f001 fad3 	bl	8003230 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MASTER_USART_RX_Pin;
 8001c8a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c90:	2300      	movs	r3, #0
 8001c92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c94:	2300      	movs	r3, #0
 8001c96:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(MASTER_USART_RX_GPIO_Port, &GPIO_InitStruct);
 8001c98:	f107 0318 	add.w	r3, r7, #24
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	4829      	ldr	r0, [pc, #164]	; (8001d44 <HAL_UART_MspInit+0x124>)
 8001ca0:	f001 fac6 	bl	8003230 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	2105      	movs	r1, #5
 8001ca8:	2034      	movs	r0, #52	; 0x34
 8001caa:	f001 f92f 	bl	8002f0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001cae:	2034      	movs	r0, #52	; 0x34
 8001cb0:	f001 f958 	bl	8002f64 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001cb4:	e03e      	b.n	8001d34 <HAL_UART_MspInit+0x114>
  else if(huart->Instance==USART1)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a23      	ldr	r2, [pc, #140]	; (8001d48 <HAL_UART_MspInit+0x128>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d139      	bne.n	8001d34 <HAL_UART_MspInit+0x114>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001cc0:	4b1f      	ldr	r3, [pc, #124]	; (8001d40 <HAL_UART_MspInit+0x120>)
 8001cc2:	699b      	ldr	r3, [r3, #24]
 8001cc4:	4a1e      	ldr	r2, [pc, #120]	; (8001d40 <HAL_UART_MspInit+0x120>)
 8001cc6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cca:	6193      	str	r3, [r2, #24]
 8001ccc:	4b1c      	ldr	r3, [pc, #112]	; (8001d40 <HAL_UART_MspInit+0x120>)
 8001cce:	699b      	ldr	r3, [r3, #24]
 8001cd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cd4:	60fb      	str	r3, [r7, #12]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd8:	4b19      	ldr	r3, [pc, #100]	; (8001d40 <HAL_UART_MspInit+0x120>)
 8001cda:	699b      	ldr	r3, [r3, #24]
 8001cdc:	4a18      	ldr	r2, [pc, #96]	; (8001d40 <HAL_UART_MspInit+0x120>)
 8001cde:	f043 0304 	orr.w	r3, r3, #4
 8001ce2:	6193      	str	r3, [r2, #24]
 8001ce4:	4b16      	ldr	r3, [pc, #88]	; (8001d40 <HAL_UART_MspInit+0x120>)
 8001ce6:	699b      	ldr	r3, [r3, #24]
 8001ce8:	f003 0304 	and.w	r3, r3, #4
 8001cec:	60bb      	str	r3, [r7, #8]
 8001cee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = CONSOLE_USART_TX_Pin;
 8001cf0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(CONSOLE_USART_TX_GPIO_Port, &GPIO_InitStruct);
 8001cfe:	f107 0318 	add.w	r3, r7, #24
 8001d02:	4619      	mov	r1, r3
 8001d04:	4811      	ldr	r0, [pc, #68]	; (8001d4c <HAL_UART_MspInit+0x12c>)
 8001d06:	f001 fa93 	bl	8003230 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = CONSOLE_USART_RX_Pin;
 8001d0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d10:	2300      	movs	r3, #0
 8001d12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d14:	2300      	movs	r3, #0
 8001d16:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(CONSOLE_USART_RX_GPIO_Port, &GPIO_InitStruct);
 8001d18:	f107 0318 	add.w	r3, r7, #24
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	480b      	ldr	r0, [pc, #44]	; (8001d4c <HAL_UART_MspInit+0x12c>)
 8001d20:	f001 fa86 	bl	8003230 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001d24:	2200      	movs	r2, #0
 8001d26:	2105      	movs	r1, #5
 8001d28:	2025      	movs	r0, #37	; 0x25
 8001d2a:	f001 f8ef 	bl	8002f0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001d2e:	2025      	movs	r0, #37	; 0x25
 8001d30:	f001 f918 	bl	8002f64 <HAL_NVIC_EnableIRQ>
}
 8001d34:	bf00      	nop
 8001d36:	3728      	adds	r7, #40	; 0x28
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	40004c00 	.word	0x40004c00
 8001d40:	40021000 	.word	0x40021000
 8001d44:	40011000 	.word	0x40011000
 8001d48:	40013800 	.word	0x40013800
 8001d4c:	40010800 	.word	0x40010800

08001d50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  LOG_error("NMI_Handler() triggered");
 8001d54:	4902      	ldr	r1, [pc, #8]	; (8001d60 <NMI_Handler+0x10>)
 8001d56:	2003      	movs	r0, #3
 8001d58:	f007 ff30 	bl	8009bbc <LOG_log>
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d5c:	e7fe      	b.n	8001d5c <NMI_Handler+0xc>
 8001d5e:	bf00      	nop
 8001d60:	0800b998 	.word	0x0800b998

08001d64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  LOG_error("HardFault_Handler() triggered");
 8001d68:	4902      	ldr	r1, [pc, #8]	; (8001d74 <HardFault_Handler+0x10>)
 8001d6a:	2003      	movs	r0, #3
 8001d6c:	f007 ff26 	bl	8009bbc <LOG_log>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d70:	e7fe      	b.n	8001d70 <HardFault_Handler+0xc>
 8001d72:	bf00      	nop
 8001d74:	0800b9b0 	.word	0x0800b9b0

08001d78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
  LOG_error("MemManage_Handler() triggered");
 8001d7c:	4902      	ldr	r1, [pc, #8]	; (8001d88 <MemManage_Handler+0x10>)
 8001d7e:	2003      	movs	r0, #3
 8001d80:	f007 ff1c 	bl	8009bbc <LOG_log>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d84:	e7fe      	b.n	8001d84 <MemManage_Handler+0xc>
 8001d86:	bf00      	nop
 8001d88:	0800b9d0 	.word	0x0800b9d0

08001d8c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
  LOG_error("BusFault_Handler() triggered");
 8001d90:	4902      	ldr	r1, [pc, #8]	; (8001d9c <BusFault_Handler+0x10>)
 8001d92:	2003      	movs	r0, #3
 8001d94:	f007 ff12 	bl	8009bbc <LOG_log>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d98:	e7fe      	b.n	8001d98 <BusFault_Handler+0xc>
 8001d9a:	bf00      	nop
 8001d9c:	0800b9f0 	.word	0x0800b9f0

08001da0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
  LOG_error("UsageFault_Handler() triggered");
 8001da4:	4902      	ldr	r1, [pc, #8]	; (8001db0 <UsageFault_Handler+0x10>)
 8001da6:	2003      	movs	r0, #3
 8001da8:	f007 ff08 	bl	8009bbc <LOG_log>
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dac:	e7fe      	b.n	8001dac <UsageFault_Handler+0xc>
 8001dae:	bf00      	nop
 8001db0:	0800ba10 	.word	0x0800ba10

08001db4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SVCall_IRQn 0 */
  LOG_error("SVC_Handler() triggered");
 8001db8:	4902      	ldr	r1, [pc, #8]	; (8001dc4 <SVC_Handler+0x10>)
 8001dba:	2003      	movs	r0, #3
 8001dbc:	f007 fefe 	bl	8009bbc <LOG_log>
  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dc0:	bf00      	nop
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	0800ba30 	.word	0x0800ba30

08001dc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */
  LOG_error("DebugMon_Handler() triggered");
 8001dcc:	4902      	ldr	r1, [pc, #8]	; (8001dd8 <DebugMon_Handler+0x10>)
 8001dce:	2003      	movs	r0, #3
 8001dd0:	f007 fef4 	bl	8009bbc <LOG_log>
  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dd4:	bf00      	nop
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	0800ba48 	.word	0x0800ba48

08001ddc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PendSV_IRQn 0 */
  LOG_error("PendSV_Handler() triggered");
 8001de0:	4902      	ldr	r1, [pc, #8]	; (8001dec <PendSV_Handler+0x10>)
 8001de2:	2003      	movs	r0, #3
 8001de4:	f007 feea 	bl	8009bbc <LOG_log>
  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001de8:	bf00      	nop
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	0800ba68 	.word	0x0800ba68

08001df0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001df4:	f000 f968 	bl	80020c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001df8:	bf00      	nop
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e00:	4802      	ldr	r0, [pc, #8]	; (8001e0c <TIM1_UP_IRQHandler+0x10>)
 8001e02:	f004 fa05 	bl	8006210 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001e06:	bf00      	nop
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	200006e0 	.word	0x200006e0

08001e10 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001e14:	4802      	ldr	r0, [pc, #8]	; (8001e20 <TIM2_IRQHandler+0x10>)
 8001e16:	f004 f9fb 	bl	8006210 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001e1a:	bf00      	nop
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	20000808 	.word	0x20000808

08001e24 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001e28:	4802      	ldr	r0, [pc, #8]	; (8001e34 <TIM3_IRQHandler+0x10>)
 8001e2a:	f004 f9f1 	bl	8006210 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001e2e:	bf00      	nop
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	200004c0 	.word	0x200004c0

08001e38 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001e3c:	4802      	ldr	r0, [pc, #8]	; (8001e48 <TIM4_IRQHandler+0x10>)
 8001e3e:	f004 f9e7 	bl	8006210 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001e42:	bf00      	nop
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	20000358 	.word	0x20000358

08001e4c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001e50:	4802      	ldr	r0, [pc, #8]	; (8001e5c <USART1_IRQHandler+0x10>)
 8001e52:	f005 ff3d 	bl	8007cd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001e56:	bf00      	nop
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	200005a4 	.word	0x200005a4

08001e60 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001e64:	4802      	ldr	r0, [pc, #8]	; (8001e70 <TIM5_IRQHandler+0x10>)
 8001e66:	f004 f9d3 	bl	8006210 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001e6a:	bf00      	nop
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	2000040c 	.word	0x2000040c

08001e74 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001e78:	4802      	ldr	r0, [pc, #8]	; (8001e84 <UART4_IRQHandler+0x10>)
 8001e7a:	f005 ff29 	bl	8007cd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001e7e:	bf00      	nop
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	20000794 	.word	0x20000794

08001e88 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b086      	sub	sp, #24
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	60b9      	str	r1, [r7, #8]
 8001e92:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e94:	2300      	movs	r3, #0
 8001e96:	617b      	str	r3, [r7, #20]
 8001e98:	e00a      	b.n	8001eb0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001e9a:	f3af 8000 	nop.w
 8001e9e:	4601      	mov	r1, r0
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	1c5a      	adds	r2, r3, #1
 8001ea4:	60ba      	str	r2, [r7, #8]
 8001ea6:	b2ca      	uxtb	r2, r1
 8001ea8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	3301      	adds	r3, #1
 8001eae:	617b      	str	r3, [r7, #20]
 8001eb0:	697a      	ldr	r2, [r7, #20]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	dbf0      	blt.n	8001e9a <_read+0x12>
	}

return len;
 8001eb8:	687b      	ldr	r3, [r7, #4]
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3718      	adds	r7, #24
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
	...

08001ec4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b086      	sub	sp, #24
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	60b9      	str	r1, [r7, #8]
 8001ece:	607a      	str	r2, [r7, #4]
  if ((file != STDOUT_FILENO) && (file != STDERR_FILENO))
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d00a      	beq.n	8001eec <_write+0x28>
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d007      	beq.n	8001eec <_write+0x28>
  {
    errno = EBADF;
 8001edc:	f008 fabc 	bl	800a458 <__errno>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2209      	movs	r2, #9
 8001ee4:	601a      	str	r2, [r3, #0]
    return -1;
 8001ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eea:	e00f      	b.n	8001f0c <_write+0x48>
  }

  HAL_StatusTypeDef status = HAL_UART_Transmit(&huart1, (uint8_t *)ptr, len, 1000);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	b29a      	uxth	r2, r3
 8001ef0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ef4:	68b9      	ldr	r1, [r7, #8]
 8001ef6:	4807      	ldr	r0, [pc, #28]	; (8001f14 <_write+0x50>)
 8001ef8:	f005 fe28 	bl	8007b4c <HAL_UART_Transmit>
 8001efc:	4603      	mov	r3, r0
 8001efe:	75fb      	strb	r3, [r7, #23]
  return (status == HAL_OK ? len : 0);
 8001f00:	7dfb      	ldrb	r3, [r7, #23]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d101      	bne.n	8001f0a <_write+0x46>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	e000      	b.n	8001f0c <_write+0x48>
 8001f0a:	2300      	movs	r3, #0

}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3718      	adds	r7, #24
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	200005a4 	.word	0x200005a4

08001f18 <_close>:

int _close(int file)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
	return -1;
 8001f20:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bc80      	pop	{r7}
 8001f2c:	4770      	bx	lr

08001f2e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	b083      	sub	sp, #12
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
 8001f36:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f3e:	605a      	str	r2, [r3, #4]
	return 0;
 8001f40:	2300      	movs	r3, #0
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bc80      	pop	{r7}
 8001f4a:	4770      	bx	lr

08001f4c <_isatty>:

int _isatty(int file)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
	return 1;
 8001f54:	2301      	movs	r3, #1
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bc80      	pop	{r7}
 8001f5e:	4770      	bx	lr

08001f60 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b085      	sub	sp, #20
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	60f8      	str	r0, [r7, #12]
 8001f68:	60b9      	str	r1, [r7, #8]
 8001f6a:	607a      	str	r2, [r7, #4]
	return 0;
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3714      	adds	r7, #20
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bc80      	pop	{r7}
 8001f76:	4770      	bx	lr

08001f78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b086      	sub	sp, #24
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f80:	4a14      	ldr	r2, [pc, #80]	; (8001fd4 <_sbrk+0x5c>)
 8001f82:	4b15      	ldr	r3, [pc, #84]	; (8001fd8 <_sbrk+0x60>)
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f8c:	4b13      	ldr	r3, [pc, #76]	; (8001fdc <_sbrk+0x64>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d102      	bne.n	8001f9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f94:	4b11      	ldr	r3, [pc, #68]	; (8001fdc <_sbrk+0x64>)
 8001f96:	4a12      	ldr	r2, [pc, #72]	; (8001fe0 <_sbrk+0x68>)
 8001f98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f9a:	4b10      	ldr	r3, [pc, #64]	; (8001fdc <_sbrk+0x64>)
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	693a      	ldr	r2, [r7, #16]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d207      	bcs.n	8001fb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fa8:	f008 fa56 	bl	800a458 <__errno>
 8001fac:	4603      	mov	r3, r0
 8001fae:	220c      	movs	r2, #12
 8001fb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8001fb6:	e009      	b.n	8001fcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fb8:	4b08      	ldr	r3, [pc, #32]	; (8001fdc <_sbrk+0x64>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fbe:	4b07      	ldr	r3, [pc, #28]	; (8001fdc <_sbrk+0x64>)
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4413      	add	r3, r2
 8001fc6:	4a05      	ldr	r2, [pc, #20]	; (8001fdc <_sbrk+0x64>)
 8001fc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fca:	68fb      	ldr	r3, [r7, #12]
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3718      	adds	r7, #24
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	2000c000 	.word	0x2000c000
 8001fd8:	00000400 	.word	0x00000400
 8001fdc:	200000a4 	.word	0x200000a4
 8001fe0:	20000988 	.word	0x20000988

08001fe4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fe8:	bf00      	nop
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bc80      	pop	{r7}
 8001fee:	4770      	bx	lr

08001ff0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ff0:	480c      	ldr	r0, [pc, #48]	; (8002024 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ff2:	490d      	ldr	r1, [pc, #52]	; (8002028 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ff4:	4a0d      	ldr	r2, [pc, #52]	; (800202c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ff6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ff8:	e002      	b.n	8002000 <LoopCopyDataInit>

08001ffa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ffa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ffc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ffe:	3304      	adds	r3, #4

08002000 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002000:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002002:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002004:	d3f9      	bcc.n	8001ffa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002006:	4a0a      	ldr	r2, [pc, #40]	; (8002030 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002008:	4c0a      	ldr	r4, [pc, #40]	; (8002034 <LoopFillZerobss+0x22>)
  movs r3, #0
 800200a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800200c:	e001      	b.n	8002012 <LoopFillZerobss>

0800200e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800200e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002010:	3204      	adds	r2, #4

08002012 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002012:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002014:	d3fb      	bcc.n	800200e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002016:	f7ff ffe5 	bl	8001fe4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800201a:	f008 fa23 	bl	800a464 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800201e:	f7fe fd0f 	bl	8000a40 <main>
  bx lr
 8002022:	4770      	bx	lr
  ldr r0, =_sdata
 8002024:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002028:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 800202c:	0800c498 	.word	0x0800c498
  ldr r2, =_sbss
 8002030:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8002034:	20000984 	.word	0x20000984

08002038 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002038:	e7fe      	b.n	8002038 <ADC1_2_IRQHandler>
	...

0800203c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002040:	4b08      	ldr	r3, [pc, #32]	; (8002064 <HAL_Init+0x28>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a07      	ldr	r2, [pc, #28]	; (8002064 <HAL_Init+0x28>)
 8002046:	f043 0310 	orr.w	r3, r3, #16
 800204a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800204c:	2003      	movs	r0, #3
 800204e:	f000 ff3d 	bl	8002ecc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002052:	2000      	movs	r0, #0
 8002054:	f000 f808 	bl	8002068 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002058:	f7ff fbaa 	bl	80017b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	40022000 	.word	0x40022000

08002068 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002070:	4b12      	ldr	r3, [pc, #72]	; (80020bc <HAL_InitTick+0x54>)
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	4b12      	ldr	r3, [pc, #72]	; (80020c0 <HAL_InitTick+0x58>)
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	4619      	mov	r1, r3
 800207a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800207e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002082:	fbb2 f3f3 	udiv	r3, r2, r3
 8002086:	4618      	mov	r0, r3
 8002088:	f000 ff84 	bl	8002f94 <HAL_SYSTICK_Config>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e00e      	b.n	80020b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2b0f      	cmp	r3, #15
 800209a:	d80a      	bhi.n	80020b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800209c:	2200      	movs	r2, #0
 800209e:	6879      	ldr	r1, [r7, #4]
 80020a0:	f04f 30ff 	mov.w	r0, #4294967295
 80020a4:	f000 ff32 	bl	8002f0c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020a8:	4a06      	ldr	r2, [pc, #24]	; (80020c4 <HAL_InitTick+0x5c>)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020ae:	2300      	movs	r3, #0
 80020b0:	e000      	b.n	80020b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3708      	adds	r7, #8
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	20000000 	.word	0x20000000
 80020c0:	20000008 	.word	0x20000008
 80020c4:	20000004 	.word	0x20000004

080020c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020cc:	4b05      	ldr	r3, [pc, #20]	; (80020e4 <HAL_IncTick+0x1c>)
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	461a      	mov	r2, r3
 80020d2:	4b05      	ldr	r3, [pc, #20]	; (80020e8 <HAL_IncTick+0x20>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4413      	add	r3, r2
 80020d8:	4a03      	ldr	r2, [pc, #12]	; (80020e8 <HAL_IncTick+0x20>)
 80020da:	6013      	str	r3, [r2, #0]
}
 80020dc:	bf00      	nop
 80020de:	46bd      	mov	sp, r7
 80020e0:	bc80      	pop	{r7}
 80020e2:	4770      	bx	lr
 80020e4:	20000008 	.word	0x20000008
 80020e8:	20000970 	.word	0x20000970

080020ec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
  return uwTick;
 80020f0:	4b02      	ldr	r3, [pc, #8]	; (80020fc <HAL_GetTick+0x10>)
 80020f2:	681b      	ldr	r3, [r3, #0]
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bc80      	pop	{r7}
 80020fa:	4770      	bx	lr
 80020fc:	20000970 	.word	0x20000970

08002100 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b086      	sub	sp, #24
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002108:	2300      	movs	r3, #0
 800210a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800210c:	2300      	movs	r3, #0
 800210e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002110:	2300      	movs	r3, #0
 8002112:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002114:	2300      	movs	r3, #0
 8002116:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d101      	bne.n	8002122 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e188      	b.n	8002434 <HAL_ADC_Init+0x334>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a8c      	ldr	r2, [pc, #560]	; (8002358 <HAL_ADC_Init+0x258>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d00e      	beq.n	800214a <HAL_ADC_Init+0x4a>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a8a      	ldr	r2, [pc, #552]	; (800235c <HAL_ADC_Init+0x25c>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d009      	beq.n	800214a <HAL_ADC_Init+0x4a>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a89      	ldr	r2, [pc, #548]	; (8002360 <HAL_ADC_Init+0x260>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d004      	beq.n	800214a <HAL_ADC_Init+0x4a>
 8002140:	f240 11b3 	movw	r1, #435	; 0x1b3
 8002144:	4887      	ldr	r0, [pc, #540]	; (8002364 <HAL_ADC_Init+0x264>)
 8002146:	f7ff fb21 	bl	800178c <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d009      	beq.n	8002166 <HAL_ADC_Init+0x66>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800215a:	d004      	beq.n	8002166 <HAL_ADC_Init+0x66>
 800215c:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 8002160:	4880      	ldr	r0, [pc, #512]	; (8002364 <HAL_ADC_Init+0x264>)
 8002162:	f7ff fb13 	bl	800178c <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d009      	beq.n	8002182 <HAL_ADC_Init+0x82>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002176:	d004      	beq.n	8002182 <HAL_ADC_Init+0x82>
 8002178:	f240 11b5 	movw	r1, #437	; 0x1b5
 800217c:	4879      	ldr	r0, [pc, #484]	; (8002364 <HAL_ADC_Init+0x264>)
 800217e:	f7ff fb05 	bl	800178c <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	7b1b      	ldrb	r3, [r3, #12]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d008      	beq.n	800219c <HAL_ADC_Init+0x9c>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	7b1b      	ldrb	r3, [r3, #12]
 800218e:	2b01      	cmp	r3, #1
 8002190:	d004      	beq.n	800219c <HAL_ADC_Init+0x9c>
 8002192:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 8002196:	4873      	ldr	r0, [pc, #460]	; (8002364 <HAL_ADC_Init+0x264>)
 8002198:	f7ff faf8 	bl	800178c <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	69db      	ldr	r3, [r3, #28]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d044      	beq.n	800222e <HAL_ADC_Init+0x12e>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	69db      	ldr	r3, [r3, #28]
 80021a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80021ac:	d03f      	beq.n	800222e <HAL_ADC_Init+0x12e>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	69db      	ldr	r3, [r3, #28]
 80021b2:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80021b6:	d03a      	beq.n	800222e <HAL_ADC_Init+0x12e>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	69db      	ldr	r3, [r3, #28]
 80021bc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80021c0:	d035      	beq.n	800222e <HAL_ADC_Init+0x12e>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	69db      	ldr	r3, [r3, #28]
 80021c6:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 80021ca:	d030      	beq.n	800222e <HAL_ADC_Init+0x12e>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	69db      	ldr	r3, [r3, #28]
 80021d0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80021d4:	d02b      	beq.n	800222e <HAL_ADC_Init+0x12e>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	69db      	ldr	r3, [r3, #28]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d027      	beq.n	800222e <HAL_ADC_Init+0x12e>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	69db      	ldr	r3, [r3, #28]
 80021e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80021e6:	d022      	beq.n	800222e <HAL_ADC_Init+0x12e>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	69db      	ldr	r3, [r3, #28]
 80021ec:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80021f0:	d01d      	beq.n	800222e <HAL_ADC_Init+0x12e>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	69db      	ldr	r3, [r3, #28]
 80021f6:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 80021fa:	d018      	beq.n	800222e <HAL_ADC_Init+0x12e>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	69db      	ldr	r3, [r3, #28]
 8002200:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002204:	d013      	beq.n	800222e <HAL_ADC_Init+0x12e>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	69db      	ldr	r3, [r3, #28]
 800220a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800220e:	d00e      	beq.n	800222e <HAL_ADC_Init+0x12e>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	69db      	ldr	r3, [r3, #28]
 8002214:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002218:	d009      	beq.n	800222e <HAL_ADC_Init+0x12e>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	69db      	ldr	r3, [r3, #28]
 800221e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002222:	d004      	beq.n	800222e <HAL_ADC_Init+0x12e>
 8002224:	f240 11b7 	movw	r1, #439	; 0x1b7
 8002228:	484e      	ldr	r0, [pc, #312]	; (8002364 <HAL_ADC_Init+0x264>)
 800222a:	f7ff faaf 	bl	800178c <assert_failed>
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d02a      	beq.n	800228c <HAL_ADC_Init+0x18c>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d003      	beq.n	8002246 <HAL_ADC_Init+0x146>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	691b      	ldr	r3, [r3, #16]
 8002242:	2b10      	cmp	r3, #16
 8002244:	d904      	bls.n	8002250 <HAL_ADC_Init+0x150>
 8002246:	f240 11bb 	movw	r1, #443	; 0x1bb
 800224a:	4846      	ldr	r0, [pc, #280]	; (8002364 <HAL_ADC_Init+0x264>)
 800224c:	f7ff fa9e 	bl	800178c <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	7d1b      	ldrb	r3, [r3, #20]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d008      	beq.n	800226a <HAL_ADC_Init+0x16a>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	7d1b      	ldrb	r3, [r3, #20]
 800225c:	2b01      	cmp	r3, #1
 800225e:	d004      	beq.n	800226a <HAL_ADC_Init+0x16a>
 8002260:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8002264:	483f      	ldr	r0, [pc, #252]	; (8002364 <HAL_ADC_Init+0x264>)
 8002266:	f7ff fa91 	bl	800178c <assert_failed>
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	7d1b      	ldrb	r3, [r3, #20]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d00c      	beq.n	800228c <HAL_ADC_Init+0x18c>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	699b      	ldr	r3, [r3, #24]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d003      	beq.n	8002282 <HAL_ADC_Init+0x182>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	699b      	ldr	r3, [r3, #24]
 800227e:	2b08      	cmp	r3, #8
 8002280:	d904      	bls.n	800228c <HAL_ADC_Init+0x18c>
 8002282:	f240 11bf 	movw	r1, #447	; 0x1bf
 8002286:	4837      	ldr	r0, [pc, #220]	; (8002364 <HAL_ADC_Init+0x264>)
 8002288:	f7ff fa80 	bl	800178c <assert_failed>
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002290:	2b00      	cmp	r3, #0
 8002292:	d109      	bne.n	80022a8 <HAL_ADC_Init+0x1a8>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f7ff fab6 	bl	8001814 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f000 fd01 	bl	8002cb0 <ADC_ConversionStop_Disable>
 80022ae:	4603      	mov	r3, r0
 80022b0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b6:	f003 0310 	and.w	r3, r3, #16
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	f040 80b1 	bne.w	8002422 <HAL_ADC_Init+0x322>
 80022c0:	7dfb      	ldrb	r3, [r7, #23]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	f040 80ad 	bne.w	8002422 <HAL_ADC_Init+0x322>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022cc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80022d0:	f023 0302 	bic.w	r3, r3, #2
 80022d4:	f043 0202 	orr.w	r2, r3, #2
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	491e      	ldr	r1, [pc, #120]	; (8002360 <HAL_ADC_Init+0x260>)
 80022e6:	428b      	cmp	r3, r1
 80022e8:	d10a      	bne.n	8002300 <HAL_ADC_Init+0x200>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	69db      	ldr	r3, [r3, #28]
 80022ee:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80022f2:	d002      	beq.n	80022fa <HAL_ADC_Init+0x1fa>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	69db      	ldr	r3, [r3, #28]
 80022f8:	e004      	b.n	8002304 <HAL_ADC_Init+0x204>
 80022fa:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80022fe:	e001      	b.n	8002304 <HAL_ADC_Init+0x204>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002304:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	7b1b      	ldrb	r3, [r3, #12]
 800230a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800230c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800230e:	68ba      	ldr	r2, [r7, #8]
 8002310:	4313      	orrs	r3, r2
 8002312:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800231c:	d003      	beq.n	8002326 <HAL_ADC_Init+0x226>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d102      	bne.n	800232c <HAL_ADC_Init+0x22c>
 8002326:	f44f 7380 	mov.w	r3, #256	; 0x100
 800232a:	e000      	b.n	800232e <HAL_ADC_Init+0x22e>
 800232c:	2300      	movs	r3, #0
 800232e:	693a      	ldr	r2, [r7, #16]
 8002330:	4313      	orrs	r3, r2
 8002332:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	7d1b      	ldrb	r3, [r3, #20]
 8002338:	2b01      	cmp	r3, #1
 800233a:	d121      	bne.n	8002380 <HAL_ADC_Init+0x280>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	7b1b      	ldrb	r3, [r3, #12]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d111      	bne.n	8002368 <HAL_ADC_Init+0x268>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	3b01      	subs	r3, #1
 800234a:	035a      	lsls	r2, r3, #13
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	4313      	orrs	r3, r2
 8002350:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002354:	613b      	str	r3, [r7, #16]
 8002356:	e013      	b.n	8002380 <HAL_ADC_Init+0x280>
 8002358:	40012400 	.word	0x40012400
 800235c:	40012800 	.word	0x40012800
 8002360:	40013c00 	.word	0x40013c00
 8002364:	0800ba84 	.word	0x0800ba84
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800236c:	f043 0220 	orr.w	r2, r3, #32
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002378:	f043 0201 	orr.w	r2, r3, #1
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	430a      	orrs	r2, r1
 8002392:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	689a      	ldr	r2, [r3, #8]
 800239a:	4b28      	ldr	r3, [pc, #160]	; (800243c <HAL_ADC_Init+0x33c>)
 800239c:	4013      	ands	r3, r2
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	6812      	ldr	r2, [r2, #0]
 80023a2:	68b9      	ldr	r1, [r7, #8]
 80023a4:	430b      	orrs	r3, r1
 80023a6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023b0:	d003      	beq.n	80023ba <HAL_ADC_Init+0x2ba>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d104      	bne.n	80023c4 <HAL_ADC_Init+0x2c4>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	691b      	ldr	r3, [r3, #16]
 80023be:	3b01      	subs	r3, #1
 80023c0:	051b      	lsls	r3, r3, #20
 80023c2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ca:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	68fa      	ldr	r2, [r7, #12]
 80023d4:	430a      	orrs	r2, r1
 80023d6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	689a      	ldr	r2, [r3, #8]
 80023de:	4b18      	ldr	r3, [pc, #96]	; (8002440 <HAL_ADC_Init+0x340>)
 80023e0:	4013      	ands	r3, r2
 80023e2:	68ba      	ldr	r2, [r7, #8]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d10b      	bne.n	8002400 <HAL_ADC_Init+0x300>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f2:	f023 0303 	bic.w	r3, r3, #3
 80023f6:	f043 0201 	orr.w	r2, r3, #1
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80023fe:	e018      	b.n	8002432 <HAL_ADC_Init+0x332>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002404:	f023 0312 	bic.w	r3, r3, #18
 8002408:	f043 0210 	orr.w	r2, r3, #16
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002414:	f043 0201 	orr.w	r2, r3, #1
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002420:	e007      	b.n	8002432 <HAL_ADC_Init+0x332>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002426:	f043 0210 	orr.w	r2, r3, #16
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002432:	7dfb      	ldrb	r3, [r7, #23]
}
 8002434:	4618      	mov	r0, r3
 8002436:	3718      	adds	r7, #24
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	ffe1f7fd 	.word	0xffe1f7fd
 8002440:	ff1f0efe 	.word	0xff1f0efe

08002444 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800244c:	2300      	movs	r3, #0
 800244e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a5a      	ldr	r2, [pc, #360]	; (80025c0 <HAL_ADC_Start+0x17c>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d00e      	beq.n	8002478 <HAL_ADC_Start+0x34>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a59      	ldr	r2, [pc, #356]	; (80025c4 <HAL_ADC_Start+0x180>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d009      	beq.n	8002478 <HAL_ADC_Start+0x34>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a57      	ldr	r2, [pc, #348]	; (80025c8 <HAL_ADC_Start+0x184>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d004      	beq.n	8002478 <HAL_ADC_Start+0x34>
 800246e:	f240 411b 	movw	r1, #1051	; 0x41b
 8002472:	4856      	ldr	r0, [pc, #344]	; (80025cc <HAL_ADC_Start+0x188>)
 8002474:	f7ff f98a 	bl	800178c <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800247e:	2b01      	cmp	r3, #1
 8002480:	d101      	bne.n	8002486 <HAL_ADC_Start+0x42>
 8002482:	2302      	movs	r3, #2
 8002484:	e098      	b.n	80025b8 <HAL_ADC_Start+0x174>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2201      	movs	r2, #1
 800248a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f000 fbb4 	bl	8002bfc <ADC_Enable>
 8002494:	4603      	mov	r3, r0
 8002496:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002498:	7bfb      	ldrb	r3, [r7, #15]
 800249a:	2b00      	cmp	r3, #0
 800249c:	f040 8087 	bne.w	80025ae <HAL_ADC_Start+0x16a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024a8:	f023 0301 	bic.w	r3, r3, #1
 80024ac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a42      	ldr	r2, [pc, #264]	; (80025c4 <HAL_ADC_Start+0x180>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d105      	bne.n	80024ca <HAL_ADC_Start+0x86>
 80024be:	4b40      	ldr	r3, [pc, #256]	; (80025c0 <HAL_ADC_Start+0x17c>)
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d115      	bne.n	80024f6 <HAL_ADC_Start+0xb2>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ce:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d026      	beq.n	8002532 <HAL_ADC_Start+0xee>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80024ec:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80024f4:	e01d      	b.n	8002532 <HAL_ADC_Start+0xee>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024fa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a2e      	ldr	r2, [pc, #184]	; (80025c0 <HAL_ADC_Start+0x17c>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d004      	beq.n	8002516 <HAL_ADC_Start+0xd2>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a2c      	ldr	r2, [pc, #176]	; (80025c4 <HAL_ADC_Start+0x180>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d10d      	bne.n	8002532 <HAL_ADC_Start+0xee>
 8002516:	4b2a      	ldr	r3, [pc, #168]	; (80025c0 <HAL_ADC_Start+0x17c>)
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800251e:	2b00      	cmp	r3, #0
 8002520:	d007      	beq.n	8002532 <HAL_ADC_Start+0xee>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002526:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800252a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002536:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d006      	beq.n	800254c <HAL_ADC_Start+0x108>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002542:	f023 0206 	bic.w	r2, r3, #6
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	62da      	str	r2, [r3, #44]	; 0x2c
 800254a:	e002      	b.n	8002552 <HAL_ADC_Start+0x10e>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2200      	movs	r2, #0
 8002550:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f06f 0202 	mvn.w	r2, #2
 8002562:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800256e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002572:	d113      	bne.n	800259c <HAL_ADC_Start+0x158>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002578:	4a12      	ldr	r2, [pc, #72]	; (80025c4 <HAL_ADC_Start+0x180>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d105      	bne.n	800258a <HAL_ADC_Start+0x146>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800257e:	4b10      	ldr	r3, [pc, #64]	; (80025c0 <HAL_ADC_Start+0x17c>)
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002586:	2b00      	cmp	r3, #0
 8002588:	d108      	bne.n	800259c <HAL_ADC_Start+0x158>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	689a      	ldr	r2, [r3, #8]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002598:	609a      	str	r2, [r3, #8]
 800259a:	e00c      	b.n	80025b6 <HAL_ADC_Start+0x172>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	689a      	ldr	r2, [r3, #8]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80025aa:	609a      	str	r2, [r3, #8]
 80025ac:	e003      	b.n	80025b6 <HAL_ADC_Start+0x172>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80025b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3710      	adds	r7, #16
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	40012400 	.word	0x40012400
 80025c4:	40012800 	.word	0x40012800
 80025c8:	40013c00 	.word	0x40013c00
 80025cc:	0800ba84 	.word	0x0800ba84

080025d0 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80025d0:	b590      	push	{r4, r7, lr}
 80025d2:	b087      	sub	sp, #28
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80025da:	2300      	movs	r3, #0
 80025dc:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80025de:	2300      	movs	r3, #0
 80025e0:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80025e2:	2300      	movs	r3, #0
 80025e4:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a80      	ldr	r2, [pc, #512]	; (80027ec <HAL_ADC_PollForConversion+0x21c>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d00e      	beq.n	800260e <HAL_ADC_PollForConversion+0x3e>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a7e      	ldr	r2, [pc, #504]	; (80027f0 <HAL_ADC_PollForConversion+0x220>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d009      	beq.n	800260e <HAL_ADC_PollForConversion+0x3e>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a7d      	ldr	r2, [pc, #500]	; (80027f4 <HAL_ADC_PollForConversion+0x224>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d004      	beq.n	800260e <HAL_ADC_PollForConversion+0x3e>
 8002604:	f240 41bd 	movw	r1, #1213	; 0x4bd
 8002608:	487b      	ldr	r0, [pc, #492]	; (80027f8 <HAL_ADC_PollForConversion+0x228>)
 800260a:	f7ff f8bf 	bl	800178c <assert_failed>
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800260e:	f7ff fd6d 	bl	80020ec <HAL_GetTick>
 8002612:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800261e:	2b00      	cmp	r3, #0
 8002620:	d00b      	beq.n	800263a <HAL_ADC_PollForConversion+0x6a>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002626:	f043 0220 	orr.w	r2, r3, #32
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e0d3      	b.n	80027e2 <HAL_ADC_PollForConversion+0x212>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002644:	2b00      	cmp	r3, #0
 8002646:	d131      	bne.n	80026ac <HAL_ADC_PollForConversion+0xdc>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800264e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002652:	2b00      	cmp	r3, #0
 8002654:	d12a      	bne.n	80026ac <HAL_ADC_PollForConversion+0xdc>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002656:	e021      	b.n	800269c <HAL_ADC_PollForConversion+0xcc>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800265e:	d01d      	beq.n	800269c <HAL_ADC_PollForConversion+0xcc>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d007      	beq.n	8002676 <HAL_ADC_PollForConversion+0xa6>
 8002666:	f7ff fd41 	bl	80020ec <HAL_GetTick>
 800266a:	4602      	mov	r2, r0
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	683a      	ldr	r2, [r7, #0]
 8002672:	429a      	cmp	r2, r3
 8002674:	d212      	bcs.n	800269c <HAL_ADC_PollForConversion+0xcc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0302 	and.w	r3, r3, #2
 8002680:	2b00      	cmp	r3, #0
 8002682:	d10b      	bne.n	800269c <HAL_ADC_PollForConversion+0xcc>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002688:	f043 0204 	orr.w	r2, r3, #4
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e0a2      	b.n	80027e2 <HAL_ADC_PollForConversion+0x212>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d0d6      	beq.n	8002658 <HAL_ADC_PollForConversion+0x88>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80026aa:	e070      	b.n	800278e <HAL_ADC_PollForConversion+0x1be>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80026ac:	4b53      	ldr	r3, [pc, #332]	; (80027fc <HAL_ADC_PollForConversion+0x22c>)
 80026ae:	681c      	ldr	r4, [r3, #0]
 80026b0:	2002      	movs	r0, #2
 80026b2:	f001 ff7d 	bl	80045b0 <HAL_RCCEx_GetPeriphCLKFreq>
 80026b6:	4603      	mov	r3, r0
 80026b8:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	6919      	ldr	r1, [r3, #16]
 80026c2:	4b4f      	ldr	r3, [pc, #316]	; (8002800 <HAL_ADC_PollForConversion+0x230>)
 80026c4:	400b      	ands	r3, r1
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d118      	bne.n	80026fc <HAL_ADC_PollForConversion+0x12c>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	68d9      	ldr	r1, [r3, #12]
 80026d0:	4b4c      	ldr	r3, [pc, #304]	; (8002804 <HAL_ADC_PollForConversion+0x234>)
 80026d2:	400b      	ands	r3, r1
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d111      	bne.n	80026fc <HAL_ADC_PollForConversion+0x12c>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	6919      	ldr	r1, [r3, #16]
 80026de:	4b4a      	ldr	r3, [pc, #296]	; (8002808 <HAL_ADC_PollForConversion+0x238>)
 80026e0:	400b      	ands	r3, r1
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d108      	bne.n	80026f8 <HAL_ADC_PollForConversion+0x128>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	68d9      	ldr	r1, [r3, #12]
 80026ec:	4b47      	ldr	r3, [pc, #284]	; (800280c <HAL_ADC_PollForConversion+0x23c>)
 80026ee:	400b      	ands	r3, r1
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d101      	bne.n	80026f8 <HAL_ADC_PollForConversion+0x128>
 80026f4:	2314      	movs	r3, #20
 80026f6:	e020      	b.n	800273a <HAL_ADC_PollForConversion+0x16a>
 80026f8:	2329      	movs	r3, #41	; 0x29
 80026fa:	e01e      	b.n	800273a <HAL_ADC_PollForConversion+0x16a>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	6919      	ldr	r1, [r3, #16]
 8002702:	4b41      	ldr	r3, [pc, #260]	; (8002808 <HAL_ADC_PollForConversion+0x238>)
 8002704:	400b      	ands	r3, r1
 8002706:	2b00      	cmp	r3, #0
 8002708:	d106      	bne.n	8002718 <HAL_ADC_PollForConversion+0x148>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	68d9      	ldr	r1, [r3, #12]
 8002710:	4b3e      	ldr	r3, [pc, #248]	; (800280c <HAL_ADC_PollForConversion+0x23c>)
 8002712:	400b      	ands	r3, r1
 8002714:	2b00      	cmp	r3, #0
 8002716:	d00d      	beq.n	8002734 <HAL_ADC_PollForConversion+0x164>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	6919      	ldr	r1, [r3, #16]
 800271e:	4b3c      	ldr	r3, [pc, #240]	; (8002810 <HAL_ADC_PollForConversion+0x240>)
 8002720:	400b      	ands	r3, r1
 8002722:	2b00      	cmp	r3, #0
 8002724:	d108      	bne.n	8002738 <HAL_ADC_PollForConversion+0x168>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	68d9      	ldr	r1, [r3, #12]
 800272c:	4b38      	ldr	r3, [pc, #224]	; (8002810 <HAL_ADC_PollForConversion+0x240>)
 800272e:	400b      	ands	r3, r1
 8002730:	2b00      	cmp	r3, #0
 8002732:	d101      	bne.n	8002738 <HAL_ADC_PollForConversion+0x168>
 8002734:	2354      	movs	r3, #84	; 0x54
 8002736:	e000      	b.n	800273a <HAL_ADC_PollForConversion+0x16a>
 8002738:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800273a:	fb02 f303 	mul.w	r3, r2, r3
 800273e:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002740:	e021      	b.n	8002786 <HAL_ADC_PollForConversion+0x1b6>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002748:	d01a      	beq.n	8002780 <HAL_ADC_PollForConversion+0x1b0>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d007      	beq.n	8002760 <HAL_ADC_PollForConversion+0x190>
 8002750:	f7ff fccc 	bl	80020ec <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	683a      	ldr	r2, [r7, #0]
 800275c:	429a      	cmp	r2, r3
 800275e:	d20f      	bcs.n	8002780 <HAL_ADC_PollForConversion+0x1b0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	693a      	ldr	r2, [r7, #16]
 8002764:	429a      	cmp	r2, r3
 8002766:	d90b      	bls.n	8002780 <HAL_ADC_PollForConversion+0x1b0>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800276c:	f043 0204 	orr.w	r2, r3, #4
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e030      	b.n	80027e2 <HAL_ADC_PollForConversion+0x212>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	3301      	adds	r3, #1
 8002784:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	693a      	ldr	r2, [r7, #16]
 800278a:	429a      	cmp	r2, r3
 800278c:	d8d9      	bhi.n	8002742 <HAL_ADC_PollForConversion+0x172>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f06f 0212 	mvn.w	r2, #18
 8002796:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800279c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80027ae:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80027b2:	d115      	bne.n	80027e0 <HAL_ADC_PollForConversion+0x210>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d111      	bne.n	80027e0 <HAL_ADC_PollForConversion+0x210>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d105      	bne.n	80027e0 <HAL_ADC_PollForConversion+0x210>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d8:	f043 0201 	orr.w	r2, r3, #1
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	371c      	adds	r7, #28
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd90      	pop	{r4, r7, pc}
 80027ea:	bf00      	nop
 80027ec:	40012400 	.word	0x40012400
 80027f0:	40012800 	.word	0x40012800
 80027f4:	40013c00 	.word	0x40013c00
 80027f8:	0800ba84 	.word	0x0800ba84
 80027fc:	20000000 	.word	0x20000000
 8002800:	24924924 	.word	0x24924924
 8002804:	00924924 	.word	0x00924924
 8002808:	12492492 	.word	0x12492492
 800280c:	00492492 	.word	0x00492492
 8002810:	00249249 	.word	0x00249249

08002814 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a0c      	ldr	r2, [pc, #48]	; (8002854 <HAL_ADC_GetValue+0x40>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d00e      	beq.n	8002844 <HAL_ADC_GetValue+0x30>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a0b      	ldr	r2, [pc, #44]	; (8002858 <HAL_ADC_GetValue+0x44>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d009      	beq.n	8002844 <HAL_ADC_GetValue+0x30>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a09      	ldr	r2, [pc, #36]	; (800285c <HAL_ADC_GetValue+0x48>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d004      	beq.n	8002844 <HAL_ADC_GetValue+0x30>
 800283a:	f240 61ef 	movw	r1, #1775	; 0x6ef
 800283e:	4808      	ldr	r0, [pc, #32]	; (8002860 <HAL_ADC_GetValue+0x4c>)
 8002840:	f7fe ffa4 	bl	800178c <assert_failed>

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800284a:	4618      	mov	r0, r3
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	40012400 	.word	0x40012400
 8002858:	40012800 	.word	0x40012800
 800285c:	40013c00 	.word	0x40013c00
 8002860:	0800ba84 	.word	0x0800ba84

08002864 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800286e:	2300      	movs	r3, #0
 8002870:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002872:	2300      	movs	r3, #0
 8002874:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a8b      	ldr	r2, [pc, #556]	; (8002aa8 <HAL_ADC_ConfigChannel+0x244>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d00e      	beq.n	800289e <HAL_ADC_ConfigChannel+0x3a>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a89      	ldr	r2, [pc, #548]	; (8002aac <HAL_ADC_ConfigChannel+0x248>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d009      	beq.n	800289e <HAL_ADC_ConfigChannel+0x3a>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a88      	ldr	r2, [pc, #544]	; (8002ab0 <HAL_ADC_ConfigChannel+0x24c>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d004      	beq.n	800289e <HAL_ADC_ConfigChannel+0x3a>
 8002894:	f240 71dd 	movw	r1, #2013	; 0x7dd
 8002898:	4886      	ldr	r0, [pc, #536]	; (8002ab4 <HAL_ADC_ConfigChannel+0x250>)
 800289a:	f7fe ff77 	bl	800178c <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d048      	beq.n	8002938 <HAL_ADC_ConfigChannel+0xd4>
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d044      	beq.n	8002938 <HAL_ADC_ConfigChannel+0xd4>
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d040      	beq.n	8002938 <HAL_ADC_ConfigChannel+0xd4>
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	2b03      	cmp	r3, #3
 80028bc:	d03c      	beq.n	8002938 <HAL_ADC_ConfigChannel+0xd4>
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	2b04      	cmp	r3, #4
 80028c4:	d038      	beq.n	8002938 <HAL_ADC_ConfigChannel+0xd4>
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2b05      	cmp	r3, #5
 80028cc:	d034      	beq.n	8002938 <HAL_ADC_ConfigChannel+0xd4>
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	2b06      	cmp	r3, #6
 80028d4:	d030      	beq.n	8002938 <HAL_ADC_ConfigChannel+0xd4>
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	2b07      	cmp	r3, #7
 80028dc:	d02c      	beq.n	8002938 <HAL_ADC_ConfigChannel+0xd4>
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	2b08      	cmp	r3, #8
 80028e4:	d028      	beq.n	8002938 <HAL_ADC_ConfigChannel+0xd4>
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	2b09      	cmp	r3, #9
 80028ec:	d024      	beq.n	8002938 <HAL_ADC_ConfigChannel+0xd4>
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2b0a      	cmp	r3, #10
 80028f4:	d020      	beq.n	8002938 <HAL_ADC_ConfigChannel+0xd4>
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	2b0b      	cmp	r3, #11
 80028fc:	d01c      	beq.n	8002938 <HAL_ADC_ConfigChannel+0xd4>
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2b0c      	cmp	r3, #12
 8002904:	d018      	beq.n	8002938 <HAL_ADC_ConfigChannel+0xd4>
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	2b0d      	cmp	r3, #13
 800290c:	d014      	beq.n	8002938 <HAL_ADC_ConfigChannel+0xd4>
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2b0e      	cmp	r3, #14
 8002914:	d010      	beq.n	8002938 <HAL_ADC_ConfigChannel+0xd4>
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2b0f      	cmp	r3, #15
 800291c:	d00c      	beq.n	8002938 <HAL_ADC_ConfigChannel+0xd4>
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	2b10      	cmp	r3, #16
 8002924:	d008      	beq.n	8002938 <HAL_ADC_ConfigChannel+0xd4>
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	2b11      	cmp	r3, #17
 800292c:	d004      	beq.n	8002938 <HAL_ADC_ConfigChannel+0xd4>
 800292e:	f240 71de 	movw	r1, #2014	; 0x7de
 8002932:	4860      	ldr	r0, [pc, #384]	; (8002ab4 <HAL_ADC_ConfigChannel+0x250>)
 8002934:	f7fe ff2a 	bl	800178c <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	2b01      	cmp	r3, #1
 800293e:	d040      	beq.n	80029c2 <HAL_ADC_ConfigChannel+0x15e>
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	2b02      	cmp	r3, #2
 8002946:	d03c      	beq.n	80029c2 <HAL_ADC_ConfigChannel+0x15e>
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	2b03      	cmp	r3, #3
 800294e:	d038      	beq.n	80029c2 <HAL_ADC_ConfigChannel+0x15e>
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	2b04      	cmp	r3, #4
 8002956:	d034      	beq.n	80029c2 <HAL_ADC_ConfigChannel+0x15e>
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	2b05      	cmp	r3, #5
 800295e:	d030      	beq.n	80029c2 <HAL_ADC_ConfigChannel+0x15e>
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	2b06      	cmp	r3, #6
 8002966:	d02c      	beq.n	80029c2 <HAL_ADC_ConfigChannel+0x15e>
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	2b07      	cmp	r3, #7
 800296e:	d028      	beq.n	80029c2 <HAL_ADC_ConfigChannel+0x15e>
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	2b08      	cmp	r3, #8
 8002976:	d024      	beq.n	80029c2 <HAL_ADC_ConfigChannel+0x15e>
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	2b09      	cmp	r3, #9
 800297e:	d020      	beq.n	80029c2 <HAL_ADC_ConfigChannel+0x15e>
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	2b0a      	cmp	r3, #10
 8002986:	d01c      	beq.n	80029c2 <HAL_ADC_ConfigChannel+0x15e>
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	2b0b      	cmp	r3, #11
 800298e:	d018      	beq.n	80029c2 <HAL_ADC_ConfigChannel+0x15e>
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	2b0c      	cmp	r3, #12
 8002996:	d014      	beq.n	80029c2 <HAL_ADC_ConfigChannel+0x15e>
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	2b0d      	cmp	r3, #13
 800299e:	d010      	beq.n	80029c2 <HAL_ADC_ConfigChannel+0x15e>
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	2b0e      	cmp	r3, #14
 80029a6:	d00c      	beq.n	80029c2 <HAL_ADC_ConfigChannel+0x15e>
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	2b0f      	cmp	r3, #15
 80029ae:	d008      	beq.n	80029c2 <HAL_ADC_ConfigChannel+0x15e>
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	2b10      	cmp	r3, #16
 80029b6:	d004      	beq.n	80029c2 <HAL_ADC_ConfigChannel+0x15e>
 80029b8:	f240 71df 	movw	r1, #2015	; 0x7df
 80029bc:	483d      	ldr	r0, [pc, #244]	; (8002ab4 <HAL_ADC_ConfigChannel+0x250>)
 80029be:	f7fe fee5 	bl	800178c <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d020      	beq.n	8002a0c <HAL_ADC_ConfigChannel+0x1a8>
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d01c      	beq.n	8002a0c <HAL_ADC_ConfigChannel+0x1a8>
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d018      	beq.n	8002a0c <HAL_ADC_ConfigChannel+0x1a8>
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	2b03      	cmp	r3, #3
 80029e0:	d014      	beq.n	8002a0c <HAL_ADC_ConfigChannel+0x1a8>
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	2b04      	cmp	r3, #4
 80029e8:	d010      	beq.n	8002a0c <HAL_ADC_ConfigChannel+0x1a8>
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	2b05      	cmp	r3, #5
 80029f0:	d00c      	beq.n	8002a0c <HAL_ADC_ConfigChannel+0x1a8>
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	2b06      	cmp	r3, #6
 80029f8:	d008      	beq.n	8002a0c <HAL_ADC_ConfigChannel+0x1a8>
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	2b07      	cmp	r3, #7
 8002a00:	d004      	beq.n	8002a0c <HAL_ADC_ConfigChannel+0x1a8>
 8002a02:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 8002a06:	482b      	ldr	r0, [pc, #172]	; (8002ab4 <HAL_ADC_ConfigChannel+0x250>)
 8002a08:	f7fe fec0 	bl	800178c <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d101      	bne.n	8002a1a <HAL_ADC_ConfigChannel+0x1b6>
 8002a16:	2302      	movs	r3, #2
 8002a18:	e0e5      	b.n	8002be6 <HAL_ADC_ConfigChannel+0x382>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	2b06      	cmp	r3, #6
 8002a28:	d81c      	bhi.n	8002a64 <HAL_ADC_ConfigChannel+0x200>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	685a      	ldr	r2, [r3, #4]
 8002a34:	4613      	mov	r3, r2
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	4413      	add	r3, r2
 8002a3a:	3b05      	subs	r3, #5
 8002a3c:	221f      	movs	r2, #31
 8002a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a42:	43db      	mvns	r3, r3
 8002a44:	4019      	ands	r1, r3
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	6818      	ldr	r0, [r3, #0]
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	685a      	ldr	r2, [r3, #4]
 8002a4e:	4613      	mov	r3, r2
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	4413      	add	r3, r2
 8002a54:	3b05      	subs	r3, #5
 8002a56:	fa00 f203 	lsl.w	r2, r0, r3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	430a      	orrs	r2, r1
 8002a60:	635a      	str	r2, [r3, #52]	; 0x34
 8002a62:	e045      	b.n	8002af0 <HAL_ADC_ConfigChannel+0x28c>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	2b0c      	cmp	r3, #12
 8002a6a:	d825      	bhi.n	8002ab8 <HAL_ADC_ConfigChannel+0x254>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	685a      	ldr	r2, [r3, #4]
 8002a76:	4613      	mov	r3, r2
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	4413      	add	r3, r2
 8002a7c:	3b23      	subs	r3, #35	; 0x23
 8002a7e:	221f      	movs	r2, #31
 8002a80:	fa02 f303 	lsl.w	r3, r2, r3
 8002a84:	43db      	mvns	r3, r3
 8002a86:	4019      	ands	r1, r3
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	6818      	ldr	r0, [r3, #0]
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	685a      	ldr	r2, [r3, #4]
 8002a90:	4613      	mov	r3, r2
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	4413      	add	r3, r2
 8002a96:	3b23      	subs	r3, #35	; 0x23
 8002a98:	fa00 f203 	lsl.w	r2, r0, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	430a      	orrs	r2, r1
 8002aa2:	631a      	str	r2, [r3, #48]	; 0x30
 8002aa4:	e024      	b.n	8002af0 <HAL_ADC_ConfigChannel+0x28c>
 8002aa6:	bf00      	nop
 8002aa8:	40012400 	.word	0x40012400
 8002aac:	40012800 	.word	0x40012800
 8002ab0:	40013c00 	.word	0x40013c00
 8002ab4:	0800ba84 	.word	0x0800ba84
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	685a      	ldr	r2, [r3, #4]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	4413      	add	r3, r2
 8002ac8:	3b41      	subs	r3, #65	; 0x41
 8002aca:	221f      	movs	r2, #31
 8002acc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad0:	43db      	mvns	r3, r3
 8002ad2:	4019      	ands	r1, r3
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	6818      	ldr	r0, [r3, #0]
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685a      	ldr	r2, [r3, #4]
 8002adc:	4613      	mov	r3, r2
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	4413      	add	r3, r2
 8002ae2:	3b41      	subs	r3, #65	; 0x41
 8002ae4:	fa00 f203 	lsl.w	r2, r0, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	430a      	orrs	r2, r1
 8002aee:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2b09      	cmp	r3, #9
 8002af6:	d91c      	bls.n	8002b32 <HAL_ADC_ConfigChannel+0x2ce>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	68d9      	ldr	r1, [r3, #12]
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	4613      	mov	r3, r2
 8002b04:	005b      	lsls	r3, r3, #1
 8002b06:	4413      	add	r3, r2
 8002b08:	3b1e      	subs	r3, #30
 8002b0a:	2207      	movs	r2, #7
 8002b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b10:	43db      	mvns	r3, r3
 8002b12:	4019      	ands	r1, r3
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	6898      	ldr	r0, [r3, #8]
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	005b      	lsls	r3, r3, #1
 8002b20:	4413      	add	r3, r2
 8002b22:	3b1e      	subs	r3, #30
 8002b24:	fa00 f203 	lsl.w	r2, r0, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	430a      	orrs	r2, r1
 8002b2e:	60da      	str	r2, [r3, #12]
 8002b30:	e019      	b.n	8002b66 <HAL_ADC_ConfigChannel+0x302>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	6919      	ldr	r1, [r3, #16]
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	005b      	lsls	r3, r3, #1
 8002b40:	4413      	add	r3, r2
 8002b42:	2207      	movs	r2, #7
 8002b44:	fa02 f303 	lsl.w	r3, r2, r3
 8002b48:	43db      	mvns	r3, r3
 8002b4a:	4019      	ands	r1, r3
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	6898      	ldr	r0, [r3, #8]
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	4613      	mov	r3, r2
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	4413      	add	r3, r2
 8002b5a:	fa00 f203 	lsl.w	r2, r0, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	430a      	orrs	r2, r1
 8002b64:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	2b10      	cmp	r3, #16
 8002b6c:	d003      	beq.n	8002b76 <HAL_ADC_ConfigChannel+0x312>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002b72:	2b11      	cmp	r3, #17
 8002b74:	d132      	bne.n	8002bdc <HAL_ADC_ConfigChannel+0x378>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a1d      	ldr	r2, [pc, #116]	; (8002bf0 <HAL_ADC_ConfigChannel+0x38c>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d125      	bne.n	8002bcc <HAL_ADC_ConfigChannel+0x368>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d126      	bne.n	8002bdc <HAL_ADC_ConfigChannel+0x378>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	689a      	ldr	r2, [r3, #8]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002b9c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	2b10      	cmp	r3, #16
 8002ba4:	d11a      	bne.n	8002bdc <HAL_ADC_ConfigChannel+0x378>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002ba6:	4b13      	ldr	r3, [pc, #76]	; (8002bf4 <HAL_ADC_ConfigChannel+0x390>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a13      	ldr	r2, [pc, #76]	; (8002bf8 <HAL_ADC_ConfigChannel+0x394>)
 8002bac:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb0:	0c9a      	lsrs	r2, r3, #18
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	4413      	add	r3, r2
 8002bb8:	005b      	lsls	r3, r3, #1
 8002bba:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002bbc:	e002      	b.n	8002bc4 <HAL_ADC_ConfigChannel+0x360>
          {
            wait_loop_index--;
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	3b01      	subs	r3, #1
 8002bc2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d1f9      	bne.n	8002bbe <HAL_ADC_ConfigChannel+0x35a>
 8002bca:	e007      	b.n	8002bdc <HAL_ADC_ConfigChannel+0x378>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd0:	f043 0220 	orr.w	r2, r3, #32
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3710      	adds	r7, #16
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	40012400 	.word	0x40012400
 8002bf4:	20000000 	.word	0x20000000
 8002bf8:	431bde83 	.word	0x431bde83

08002bfc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b084      	sub	sp, #16
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c04:	2300      	movs	r3, #0
 8002c06:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	f003 0301 	and.w	r3, r3, #1
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d040      	beq.n	8002c9c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	689a      	ldr	r2, [r3, #8]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f042 0201 	orr.w	r2, r2, #1
 8002c28:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002c2a:	4b1f      	ldr	r3, [pc, #124]	; (8002ca8 <ADC_Enable+0xac>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a1f      	ldr	r2, [pc, #124]	; (8002cac <ADC_Enable+0xb0>)
 8002c30:	fba2 2303 	umull	r2, r3, r2, r3
 8002c34:	0c9b      	lsrs	r3, r3, #18
 8002c36:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002c38:	e002      	b.n	8002c40 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	3b01      	subs	r3, #1
 8002c3e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d1f9      	bne.n	8002c3a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002c46:	f7ff fa51 	bl	80020ec <HAL_GetTick>
 8002c4a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002c4c:	e01f      	b.n	8002c8e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002c4e:	f7ff fa4d 	bl	80020ec <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d918      	bls.n	8002c8e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d011      	beq.n	8002c8e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c6e:	f043 0210 	orr.w	r2, r3, #16
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c7a:	f043 0201 	orr.w	r2, r3, #1
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e007      	b.n	8002c9e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	f003 0301 	and.w	r3, r3, #1
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d1d8      	bne.n	8002c4e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3710      	adds	r7, #16
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	20000000 	.word	0x20000000
 8002cac:	431bde83 	.word	0x431bde83

08002cb0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b084      	sub	sp, #16
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f003 0301 	and.w	r3, r3, #1
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d12e      	bne.n	8002d28 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	689a      	ldr	r2, [r3, #8]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f022 0201 	bic.w	r2, r2, #1
 8002cd8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002cda:	f7ff fa07 	bl	80020ec <HAL_GetTick>
 8002cde:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002ce0:	e01b      	b.n	8002d1a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002ce2:	f7ff fa03 	bl	80020ec <HAL_GetTick>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d914      	bls.n	8002d1a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	f003 0301 	and.w	r3, r3, #1
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d10d      	bne.n	8002d1a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d02:	f043 0210 	orr.w	r2, r3, #16
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d0e:	f043 0201 	orr.w	r2, r3, #1
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e007      	b.n	8002d2a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	f003 0301 	and.w	r3, r3, #1
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d0dc      	beq.n	8002ce2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3710      	adds	r7, #16
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
	...

08002d34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b085      	sub	sp, #20
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f003 0307 	and.w	r3, r3, #7
 8002d42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d44:	4b0c      	ldr	r3, [pc, #48]	; (8002d78 <__NVIC_SetPriorityGrouping+0x44>)
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d4a:	68ba      	ldr	r2, [r7, #8]
 8002d4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d50:	4013      	ands	r3, r2
 8002d52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d66:	4a04      	ldr	r2, [pc, #16]	; (8002d78 <__NVIC_SetPriorityGrouping+0x44>)
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	60d3      	str	r3, [r2, #12]
}
 8002d6c:	bf00      	nop
 8002d6e:	3714      	adds	r7, #20
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bc80      	pop	{r7}
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	e000ed00 	.word	0xe000ed00

08002d7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d80:	4b04      	ldr	r3, [pc, #16]	; (8002d94 <__NVIC_GetPriorityGrouping+0x18>)
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	0a1b      	lsrs	r3, r3, #8
 8002d86:	f003 0307 	and.w	r3, r3, #7
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bc80      	pop	{r7}
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop
 8002d94:	e000ed00 	.word	0xe000ed00

08002d98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	4603      	mov	r3, r0
 8002da0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	db0b      	blt.n	8002dc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002daa:	79fb      	ldrb	r3, [r7, #7]
 8002dac:	f003 021f 	and.w	r2, r3, #31
 8002db0:	4906      	ldr	r1, [pc, #24]	; (8002dcc <__NVIC_EnableIRQ+0x34>)
 8002db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002db6:	095b      	lsrs	r3, r3, #5
 8002db8:	2001      	movs	r0, #1
 8002dba:	fa00 f202 	lsl.w	r2, r0, r2
 8002dbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002dc2:	bf00      	nop
 8002dc4:	370c      	adds	r7, #12
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bc80      	pop	{r7}
 8002dca:	4770      	bx	lr
 8002dcc:	e000e100 	.word	0xe000e100

08002dd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	6039      	str	r1, [r7, #0]
 8002dda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ddc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	db0a      	blt.n	8002dfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	b2da      	uxtb	r2, r3
 8002de8:	490c      	ldr	r1, [pc, #48]	; (8002e1c <__NVIC_SetPriority+0x4c>)
 8002dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dee:	0112      	lsls	r2, r2, #4
 8002df0:	b2d2      	uxtb	r2, r2
 8002df2:	440b      	add	r3, r1
 8002df4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002df8:	e00a      	b.n	8002e10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	b2da      	uxtb	r2, r3
 8002dfe:	4908      	ldr	r1, [pc, #32]	; (8002e20 <__NVIC_SetPriority+0x50>)
 8002e00:	79fb      	ldrb	r3, [r7, #7]
 8002e02:	f003 030f 	and.w	r3, r3, #15
 8002e06:	3b04      	subs	r3, #4
 8002e08:	0112      	lsls	r2, r2, #4
 8002e0a:	b2d2      	uxtb	r2, r2
 8002e0c:	440b      	add	r3, r1
 8002e0e:	761a      	strb	r2, [r3, #24]
}
 8002e10:	bf00      	nop
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bc80      	pop	{r7}
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop
 8002e1c:	e000e100 	.word	0xe000e100
 8002e20:	e000ed00 	.word	0xe000ed00

08002e24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b089      	sub	sp, #36	; 0x24
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	60f8      	str	r0, [r7, #12]
 8002e2c:	60b9      	str	r1, [r7, #8]
 8002e2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f003 0307 	and.w	r3, r3, #7
 8002e36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	f1c3 0307 	rsb	r3, r3, #7
 8002e3e:	2b04      	cmp	r3, #4
 8002e40:	bf28      	it	cs
 8002e42:	2304      	movcs	r3, #4
 8002e44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	3304      	adds	r3, #4
 8002e4a:	2b06      	cmp	r3, #6
 8002e4c:	d902      	bls.n	8002e54 <NVIC_EncodePriority+0x30>
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	3b03      	subs	r3, #3
 8002e52:	e000      	b.n	8002e56 <NVIC_EncodePriority+0x32>
 8002e54:	2300      	movs	r3, #0
 8002e56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e58:	f04f 32ff 	mov.w	r2, #4294967295
 8002e5c:	69bb      	ldr	r3, [r7, #24]
 8002e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e62:	43da      	mvns	r2, r3
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	401a      	ands	r2, r3
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e6c:	f04f 31ff 	mov.w	r1, #4294967295
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	fa01 f303 	lsl.w	r3, r1, r3
 8002e76:	43d9      	mvns	r1, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e7c:	4313      	orrs	r3, r2
         );
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3724      	adds	r7, #36	; 0x24
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bc80      	pop	{r7}
 8002e86:	4770      	bx	lr

08002e88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	3b01      	subs	r3, #1
 8002e94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e98:	d301      	bcc.n	8002e9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e00f      	b.n	8002ebe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e9e:	4a0a      	ldr	r2, [pc, #40]	; (8002ec8 <SysTick_Config+0x40>)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	3b01      	subs	r3, #1
 8002ea4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ea6:	210f      	movs	r1, #15
 8002ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8002eac:	f7ff ff90 	bl	8002dd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002eb0:	4b05      	ldr	r3, [pc, #20]	; (8002ec8 <SysTick_Config+0x40>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002eb6:	4b04      	ldr	r3, [pc, #16]	; (8002ec8 <SysTick_Config+0x40>)
 8002eb8:	2207      	movs	r2, #7
 8002eba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3708      	adds	r7, #8
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	e000e010 	.word	0xe000e010

08002ecc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2b07      	cmp	r3, #7
 8002ed8:	d00f      	beq.n	8002efa <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2b06      	cmp	r3, #6
 8002ede:	d00c      	beq.n	8002efa <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2b05      	cmp	r3, #5
 8002ee4:	d009      	beq.n	8002efa <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2b04      	cmp	r3, #4
 8002eea:	d006      	beq.n	8002efa <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2b03      	cmp	r3, #3
 8002ef0:	d003      	beq.n	8002efa <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002ef2:	2192      	movs	r1, #146	; 0x92
 8002ef4:	4804      	ldr	r0, [pc, #16]	; (8002f08 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8002ef6:	f7fe fc49 	bl	800178c <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f7ff ff1a 	bl	8002d34 <__NVIC_SetPriorityGrouping>
}
 8002f00:	bf00      	nop
 8002f02:	3708      	adds	r7, #8
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	0800babc 	.word	0x0800babc

08002f0c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b086      	sub	sp, #24
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	4603      	mov	r3, r0
 8002f14:	60b9      	str	r1, [r7, #8]
 8002f16:	607a      	str	r2, [r7, #4]
 8002f18:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2b0f      	cmp	r3, #15
 8002f22:	d903      	bls.n	8002f2c <HAL_NVIC_SetPriority+0x20>
 8002f24:	21aa      	movs	r1, #170	; 0xaa
 8002f26:	480e      	ldr	r0, [pc, #56]	; (8002f60 <HAL_NVIC_SetPriority+0x54>)
 8002f28:	f7fe fc30 	bl	800178c <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	2b0f      	cmp	r3, #15
 8002f30:	d903      	bls.n	8002f3a <HAL_NVIC_SetPriority+0x2e>
 8002f32:	21ab      	movs	r1, #171	; 0xab
 8002f34:	480a      	ldr	r0, [pc, #40]	; (8002f60 <HAL_NVIC_SetPriority+0x54>)
 8002f36:	f7fe fc29 	bl	800178c <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f3a:	f7ff ff1f 	bl	8002d7c <__NVIC_GetPriorityGrouping>
 8002f3e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	68b9      	ldr	r1, [r7, #8]
 8002f44:	6978      	ldr	r0, [r7, #20]
 8002f46:	f7ff ff6d 	bl	8002e24 <NVIC_EncodePriority>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f50:	4611      	mov	r1, r2
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7ff ff3c 	bl	8002dd0 <__NVIC_SetPriority>
}
 8002f58:	bf00      	nop
 8002f5a:	3718      	adds	r7, #24
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	0800babc 	.word	0x0800babc

08002f64 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	da03      	bge.n	8002f7e <HAL_NVIC_EnableIRQ+0x1a>
 8002f76:	21be      	movs	r1, #190	; 0xbe
 8002f78:	4805      	ldr	r0, [pc, #20]	; (8002f90 <HAL_NVIC_EnableIRQ+0x2c>)
 8002f7a:	f7fe fc07 	bl	800178c <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f82:	4618      	mov	r0, r3
 8002f84:	f7ff ff08 	bl	8002d98 <__NVIC_EnableIRQ>
}
 8002f88:	bf00      	nop
 8002f8a:	3708      	adds	r7, #8
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	0800babc 	.word	0x0800babc

08002f94 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f7ff ff73 	bl	8002e88 <SysTick_Config>
 8002fa2:	4603      	mov	r3, r0
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3708      	adds	r7, #8
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}

08002fac <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b085      	sub	sp, #20
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d008      	beq.n	8002fd4 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2204      	movs	r2, #4
 8002fc6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e020      	b.n	8003016 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f022 020e 	bic.w	r2, r2, #14
 8002fe2:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f022 0201 	bic.w	r2, r2, #1
 8002ff2:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ffc:	2101      	movs	r1, #1
 8002ffe:	fa01 f202 	lsl.w	r2, r1, r2
 8003002:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003014:	7bfb      	ldrb	r3, [r7, #15]
}
 8003016:	4618      	mov	r0, r3
 8003018:	3714      	adds	r7, #20
 800301a:	46bd      	mov	sp, r7
 800301c:	bc80      	pop	{r7}
 800301e:	4770      	bx	lr

08003020 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003028:	2300      	movs	r3, #0
 800302a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003032:	2b02      	cmp	r3, #2
 8003034:	d005      	beq.n	8003042 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2204      	movs	r2, #4
 800303a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	73fb      	strb	r3, [r7, #15]
 8003040:	e0d6      	b.n	80031f0 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f022 020e 	bic.w	r2, r2, #14
 8003050:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f022 0201 	bic.w	r2, r2, #1
 8003060:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	461a      	mov	r2, r3
 8003068:	4b64      	ldr	r3, [pc, #400]	; (80031fc <HAL_DMA_Abort_IT+0x1dc>)
 800306a:	429a      	cmp	r2, r3
 800306c:	d958      	bls.n	8003120 <HAL_DMA_Abort_IT+0x100>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a63      	ldr	r2, [pc, #396]	; (8003200 <HAL_DMA_Abort_IT+0x1e0>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d04f      	beq.n	8003118 <HAL_DMA_Abort_IT+0xf8>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a61      	ldr	r2, [pc, #388]	; (8003204 <HAL_DMA_Abort_IT+0x1e4>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d048      	beq.n	8003114 <HAL_DMA_Abort_IT+0xf4>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a60      	ldr	r2, [pc, #384]	; (8003208 <HAL_DMA_Abort_IT+0x1e8>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d040      	beq.n	800310e <HAL_DMA_Abort_IT+0xee>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a5e      	ldr	r2, [pc, #376]	; (800320c <HAL_DMA_Abort_IT+0x1ec>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d038      	beq.n	8003108 <HAL_DMA_Abort_IT+0xe8>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a5d      	ldr	r2, [pc, #372]	; (8003210 <HAL_DMA_Abort_IT+0x1f0>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d030      	beq.n	8003102 <HAL_DMA_Abort_IT+0xe2>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a5b      	ldr	r2, [pc, #364]	; (8003214 <HAL_DMA_Abort_IT+0x1f4>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d028      	beq.n	80030fc <HAL_DMA_Abort_IT+0xdc>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a53      	ldr	r2, [pc, #332]	; (80031fc <HAL_DMA_Abort_IT+0x1dc>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d020      	beq.n	80030f6 <HAL_DMA_Abort_IT+0xd6>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a57      	ldr	r2, [pc, #348]	; (8003218 <HAL_DMA_Abort_IT+0x1f8>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d019      	beq.n	80030f2 <HAL_DMA_Abort_IT+0xd2>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a56      	ldr	r2, [pc, #344]	; (800321c <HAL_DMA_Abort_IT+0x1fc>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d012      	beq.n	80030ee <HAL_DMA_Abort_IT+0xce>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a54      	ldr	r2, [pc, #336]	; (8003220 <HAL_DMA_Abort_IT+0x200>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d00a      	beq.n	80030e8 <HAL_DMA_Abort_IT+0xc8>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a53      	ldr	r2, [pc, #332]	; (8003224 <HAL_DMA_Abort_IT+0x204>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d102      	bne.n	80030e2 <HAL_DMA_Abort_IT+0xc2>
 80030dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030e0:	e01b      	b.n	800311a <HAL_DMA_Abort_IT+0xfa>
 80030e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030e6:	e018      	b.n	800311a <HAL_DMA_Abort_IT+0xfa>
 80030e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030ec:	e015      	b.n	800311a <HAL_DMA_Abort_IT+0xfa>
 80030ee:	2310      	movs	r3, #16
 80030f0:	e013      	b.n	800311a <HAL_DMA_Abort_IT+0xfa>
 80030f2:	2301      	movs	r3, #1
 80030f4:	e011      	b.n	800311a <HAL_DMA_Abort_IT+0xfa>
 80030f6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030fa:	e00e      	b.n	800311a <HAL_DMA_Abort_IT+0xfa>
 80030fc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003100:	e00b      	b.n	800311a <HAL_DMA_Abort_IT+0xfa>
 8003102:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003106:	e008      	b.n	800311a <HAL_DMA_Abort_IT+0xfa>
 8003108:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800310c:	e005      	b.n	800311a <HAL_DMA_Abort_IT+0xfa>
 800310e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003112:	e002      	b.n	800311a <HAL_DMA_Abort_IT+0xfa>
 8003114:	2310      	movs	r3, #16
 8003116:	e000      	b.n	800311a <HAL_DMA_Abort_IT+0xfa>
 8003118:	2301      	movs	r3, #1
 800311a:	4a43      	ldr	r2, [pc, #268]	; (8003228 <HAL_DMA_Abort_IT+0x208>)
 800311c:	6053      	str	r3, [r2, #4]
 800311e:	e057      	b.n	80031d0 <HAL_DMA_Abort_IT+0x1b0>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a36      	ldr	r2, [pc, #216]	; (8003200 <HAL_DMA_Abort_IT+0x1e0>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d04f      	beq.n	80031ca <HAL_DMA_Abort_IT+0x1aa>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a35      	ldr	r2, [pc, #212]	; (8003204 <HAL_DMA_Abort_IT+0x1e4>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d048      	beq.n	80031c6 <HAL_DMA_Abort_IT+0x1a6>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a33      	ldr	r2, [pc, #204]	; (8003208 <HAL_DMA_Abort_IT+0x1e8>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d040      	beq.n	80031c0 <HAL_DMA_Abort_IT+0x1a0>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a32      	ldr	r2, [pc, #200]	; (800320c <HAL_DMA_Abort_IT+0x1ec>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d038      	beq.n	80031ba <HAL_DMA_Abort_IT+0x19a>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a30      	ldr	r2, [pc, #192]	; (8003210 <HAL_DMA_Abort_IT+0x1f0>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d030      	beq.n	80031b4 <HAL_DMA_Abort_IT+0x194>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a2f      	ldr	r2, [pc, #188]	; (8003214 <HAL_DMA_Abort_IT+0x1f4>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d028      	beq.n	80031ae <HAL_DMA_Abort_IT+0x18e>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a26      	ldr	r2, [pc, #152]	; (80031fc <HAL_DMA_Abort_IT+0x1dc>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d020      	beq.n	80031a8 <HAL_DMA_Abort_IT+0x188>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a2b      	ldr	r2, [pc, #172]	; (8003218 <HAL_DMA_Abort_IT+0x1f8>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d019      	beq.n	80031a4 <HAL_DMA_Abort_IT+0x184>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a29      	ldr	r2, [pc, #164]	; (800321c <HAL_DMA_Abort_IT+0x1fc>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d012      	beq.n	80031a0 <HAL_DMA_Abort_IT+0x180>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a28      	ldr	r2, [pc, #160]	; (8003220 <HAL_DMA_Abort_IT+0x200>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d00a      	beq.n	800319a <HAL_DMA_Abort_IT+0x17a>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a26      	ldr	r2, [pc, #152]	; (8003224 <HAL_DMA_Abort_IT+0x204>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d102      	bne.n	8003194 <HAL_DMA_Abort_IT+0x174>
 800318e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003192:	e01b      	b.n	80031cc <HAL_DMA_Abort_IT+0x1ac>
 8003194:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003198:	e018      	b.n	80031cc <HAL_DMA_Abort_IT+0x1ac>
 800319a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800319e:	e015      	b.n	80031cc <HAL_DMA_Abort_IT+0x1ac>
 80031a0:	2310      	movs	r3, #16
 80031a2:	e013      	b.n	80031cc <HAL_DMA_Abort_IT+0x1ac>
 80031a4:	2301      	movs	r3, #1
 80031a6:	e011      	b.n	80031cc <HAL_DMA_Abort_IT+0x1ac>
 80031a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80031ac:	e00e      	b.n	80031cc <HAL_DMA_Abort_IT+0x1ac>
 80031ae:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80031b2:	e00b      	b.n	80031cc <HAL_DMA_Abort_IT+0x1ac>
 80031b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80031b8:	e008      	b.n	80031cc <HAL_DMA_Abort_IT+0x1ac>
 80031ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031be:	e005      	b.n	80031cc <HAL_DMA_Abort_IT+0x1ac>
 80031c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031c4:	e002      	b.n	80031cc <HAL_DMA_Abort_IT+0x1ac>
 80031c6:	2310      	movs	r3, #16
 80031c8:	e000      	b.n	80031cc <HAL_DMA_Abort_IT+0x1ac>
 80031ca:	2301      	movs	r3, #1
 80031cc:	4a17      	ldr	r2, [pc, #92]	; (800322c <HAL_DMA_Abort_IT+0x20c>)
 80031ce:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d003      	beq.n	80031f0 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	4798      	blx	r3
    } 
  }
  return status;
 80031f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3710      	adds	r7, #16
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	40020080 	.word	0x40020080
 8003200:	40020008 	.word	0x40020008
 8003204:	4002001c 	.word	0x4002001c
 8003208:	40020030 	.word	0x40020030
 800320c:	40020044 	.word	0x40020044
 8003210:	40020058 	.word	0x40020058
 8003214:	4002006c 	.word	0x4002006c
 8003218:	40020408 	.word	0x40020408
 800321c:	4002041c 	.word	0x4002041c
 8003220:	40020430 	.word	0x40020430
 8003224:	40020444 	.word	0x40020444
 8003228:	40020400 	.word	0x40020400
 800322c:	40020000 	.word	0x40020000

08003230 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b08a      	sub	sp, #40	; 0x28
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800323a:	2300      	movs	r3, #0
 800323c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800323e:	2300      	movs	r3, #0
 8003240:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4aa9      	ldr	r2, [pc, #676]	; (80034ec <HAL_GPIO_Init+0x2bc>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d01b      	beq.n	8003282 <HAL_GPIO_Init+0x52>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4aa8      	ldr	r2, [pc, #672]	; (80034f0 <HAL_GPIO_Init+0x2c0>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d017      	beq.n	8003282 <HAL_GPIO_Init+0x52>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4aa7      	ldr	r2, [pc, #668]	; (80034f4 <HAL_GPIO_Init+0x2c4>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d013      	beq.n	8003282 <HAL_GPIO_Init+0x52>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4aa6      	ldr	r2, [pc, #664]	; (80034f8 <HAL_GPIO_Init+0x2c8>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d00f      	beq.n	8003282 <HAL_GPIO_Init+0x52>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4aa5      	ldr	r2, [pc, #660]	; (80034fc <HAL_GPIO_Init+0x2cc>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d00b      	beq.n	8003282 <HAL_GPIO_Init+0x52>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4aa4      	ldr	r2, [pc, #656]	; (8003500 <HAL_GPIO_Init+0x2d0>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d007      	beq.n	8003282 <HAL_GPIO_Init+0x52>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4aa3      	ldr	r2, [pc, #652]	; (8003504 <HAL_GPIO_Init+0x2d4>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d003      	beq.n	8003282 <HAL_GPIO_Init+0x52>
 800327a:	21bd      	movs	r1, #189	; 0xbd
 800327c:	48a2      	ldr	r0, [pc, #648]	; (8003508 <HAL_GPIO_Init+0x2d8>)
 800327e:	f7fe fa85 	bl	800178c <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	b29b      	uxth	r3, r3
 8003288:	2b00      	cmp	r3, #0
 800328a:	d005      	beq.n	8003298 <HAL_GPIO_Init+0x68>
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	0c1b      	lsrs	r3, r3, #16
 8003292:	041b      	lsls	r3, r3, #16
 8003294:	2b00      	cmp	r3, #0
 8003296:	d003      	beq.n	80032a0 <HAL_GPIO_Init+0x70>
 8003298:	21be      	movs	r1, #190	; 0xbe
 800329a:	489b      	ldr	r0, [pc, #620]	; (8003508 <HAL_GPIO_Init+0x2d8>)
 800329c:	f7fe fa76 	bl	800178c <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	f000 8235 	beq.w	8003714 <HAL_GPIO_Init+0x4e4>
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	f000 8230 	beq.w	8003714 <HAL_GPIO_Init+0x4e4>
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	2b11      	cmp	r3, #17
 80032ba:	f000 822b 	beq.w	8003714 <HAL_GPIO_Init+0x4e4>
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	f000 8226 	beq.w	8003714 <HAL_GPIO_Init+0x4e4>
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	2b12      	cmp	r3, #18
 80032ce:	f000 8221 	beq.w	8003714 <HAL_GPIO_Init+0x4e4>
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	4a8d      	ldr	r2, [pc, #564]	; (800350c <HAL_GPIO_Init+0x2dc>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	f000 821b 	beq.w	8003714 <HAL_GPIO_Init+0x4e4>
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	4a8b      	ldr	r2, [pc, #556]	; (8003510 <HAL_GPIO_Init+0x2e0>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	f000 8215 	beq.w	8003714 <HAL_GPIO_Init+0x4e4>
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	4a89      	ldr	r2, [pc, #548]	; (8003514 <HAL_GPIO_Init+0x2e4>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	f000 820f 	beq.w	8003714 <HAL_GPIO_Init+0x4e4>
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	4a87      	ldr	r2, [pc, #540]	; (8003518 <HAL_GPIO_Init+0x2e8>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	f000 8209 	beq.w	8003714 <HAL_GPIO_Init+0x4e4>
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	4a85      	ldr	r2, [pc, #532]	; (800351c <HAL_GPIO_Init+0x2ec>)
 8003308:	4293      	cmp	r3, r2
 800330a:	f000 8203 	beq.w	8003714 <HAL_GPIO_Init+0x4e4>
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	4a83      	ldr	r2, [pc, #524]	; (8003520 <HAL_GPIO_Init+0x2f0>)
 8003314:	4293      	cmp	r3, r2
 8003316:	f000 81fd 	beq.w	8003714 <HAL_GPIO_Init+0x4e4>
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	2b03      	cmp	r3, #3
 8003320:	f000 81f8 	beq.w	8003714 <HAL_GPIO_Init+0x4e4>
 8003324:	21bf      	movs	r1, #191	; 0xbf
 8003326:	4878      	ldr	r0, [pc, #480]	; (8003508 <HAL_GPIO_Init+0x2d8>)
 8003328:	f7fe fa30 	bl	800178c <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800332c:	e1f2      	b.n	8003714 <HAL_GPIO_Init+0x4e4>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800332e:	2201      	movs	r2, #1
 8003330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003332:	fa02 f303 	lsl.w	r3, r2, r3
 8003336:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	69fa      	ldr	r2, [r7, #28]
 800333e:	4013      	ands	r3, r2
 8003340:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003342:	69ba      	ldr	r2, [r7, #24]
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	429a      	cmp	r2, r3
 8003348:	f040 81e1 	bne.w	800370e <HAL_GPIO_Init+0x4de>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	4a67      	ldr	r2, [pc, #412]	; (80034ec <HAL_GPIO_Init+0x2bc>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d01b      	beq.n	800338c <HAL_GPIO_Init+0x15c>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	4a66      	ldr	r2, [pc, #408]	; (80034f0 <HAL_GPIO_Init+0x2c0>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d017      	beq.n	800338c <HAL_GPIO_Init+0x15c>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4a65      	ldr	r2, [pc, #404]	; (80034f4 <HAL_GPIO_Init+0x2c4>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d013      	beq.n	800338c <HAL_GPIO_Init+0x15c>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	4a64      	ldr	r2, [pc, #400]	; (80034f8 <HAL_GPIO_Init+0x2c8>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d00f      	beq.n	800338c <HAL_GPIO_Init+0x15c>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	4a63      	ldr	r2, [pc, #396]	; (80034fc <HAL_GPIO_Init+0x2cc>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d00b      	beq.n	800338c <HAL_GPIO_Init+0x15c>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	4a62      	ldr	r2, [pc, #392]	; (8003500 <HAL_GPIO_Init+0x2d0>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d007      	beq.n	800338c <HAL_GPIO_Init+0x15c>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	4a61      	ldr	r2, [pc, #388]	; (8003504 <HAL_GPIO_Init+0x2d4>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d003      	beq.n	800338c <HAL_GPIO_Init+0x15c>
 8003384:	21cd      	movs	r1, #205	; 0xcd
 8003386:	4860      	ldr	r0, [pc, #384]	; (8003508 <HAL_GPIO_Init+0x2d8>)
 8003388:	f7fe fa00 	bl	800178c <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	4a63      	ldr	r2, [pc, #396]	; (8003520 <HAL_GPIO_Init+0x2f0>)
 8003392:	4293      	cmp	r3, r2
 8003394:	f000 80c6 	beq.w	8003524 <HAL_GPIO_Init+0x2f4>
 8003398:	4a61      	ldr	r2, [pc, #388]	; (8003520 <HAL_GPIO_Init+0x2f0>)
 800339a:	4293      	cmp	r3, r2
 800339c:	f200 80ec 	bhi.w	8003578 <HAL_GPIO_Init+0x348>
 80033a0:	4a5c      	ldr	r2, [pc, #368]	; (8003514 <HAL_GPIO_Init+0x2e4>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	f000 80be 	beq.w	8003524 <HAL_GPIO_Init+0x2f4>
 80033a8:	4a5a      	ldr	r2, [pc, #360]	; (8003514 <HAL_GPIO_Init+0x2e4>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	f200 80e4 	bhi.w	8003578 <HAL_GPIO_Init+0x348>
 80033b0:	4a5a      	ldr	r2, [pc, #360]	; (800351c <HAL_GPIO_Init+0x2ec>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	f000 80b6 	beq.w	8003524 <HAL_GPIO_Init+0x2f4>
 80033b8:	4a58      	ldr	r2, [pc, #352]	; (800351c <HAL_GPIO_Init+0x2ec>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	f200 80dc 	bhi.w	8003578 <HAL_GPIO_Init+0x348>
 80033c0:	4a53      	ldr	r2, [pc, #332]	; (8003510 <HAL_GPIO_Init+0x2e0>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	f000 80ae 	beq.w	8003524 <HAL_GPIO_Init+0x2f4>
 80033c8:	4a51      	ldr	r2, [pc, #324]	; (8003510 <HAL_GPIO_Init+0x2e0>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	f200 80d4 	bhi.w	8003578 <HAL_GPIO_Init+0x348>
 80033d0:	4a51      	ldr	r2, [pc, #324]	; (8003518 <HAL_GPIO_Init+0x2e8>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	f000 80a6 	beq.w	8003524 <HAL_GPIO_Init+0x2f4>
 80033d8:	4a4f      	ldr	r2, [pc, #316]	; (8003518 <HAL_GPIO_Init+0x2e8>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	f200 80cc 	bhi.w	8003578 <HAL_GPIO_Init+0x348>
 80033e0:	2b12      	cmp	r3, #18
 80033e2:	d82b      	bhi.n	800343c <HAL_GPIO_Init+0x20c>
 80033e4:	2b12      	cmp	r3, #18
 80033e6:	f200 80c7 	bhi.w	8003578 <HAL_GPIO_Init+0x348>
 80033ea:	a201      	add	r2, pc, #4	; (adr r2, 80033f0 <HAL_GPIO_Init+0x1c0>)
 80033ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033f0:	08003525 	.word	0x08003525
 80033f4:	08003445 	.word	0x08003445
 80033f8:	08003497 	.word	0x08003497
 80033fc:	08003573 	.word	0x08003573
 8003400:	08003579 	.word	0x08003579
 8003404:	08003579 	.word	0x08003579
 8003408:	08003579 	.word	0x08003579
 800340c:	08003579 	.word	0x08003579
 8003410:	08003579 	.word	0x08003579
 8003414:	08003579 	.word	0x08003579
 8003418:	08003579 	.word	0x08003579
 800341c:	08003579 	.word	0x08003579
 8003420:	08003579 	.word	0x08003579
 8003424:	08003579 	.word	0x08003579
 8003428:	08003579 	.word	0x08003579
 800342c:	08003579 	.word	0x08003579
 8003430:	08003579 	.word	0x08003579
 8003434:	0800346d 	.word	0x0800346d
 8003438:	080034c1 	.word	0x080034c1
 800343c:	4a33      	ldr	r2, [pc, #204]	; (800350c <HAL_GPIO_Init+0x2dc>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d070      	beq.n	8003524 <HAL_GPIO_Init+0x2f4>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003442:	e099      	b.n	8003578 <HAL_GPIO_Init+0x348>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	2b02      	cmp	r3, #2
 800344a:	d00b      	beq.n	8003464 <HAL_GPIO_Init+0x234>
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	2b01      	cmp	r3, #1
 8003452:	d007      	beq.n	8003464 <HAL_GPIO_Init+0x234>
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	2b03      	cmp	r3, #3
 800345a:	d003      	beq.n	8003464 <HAL_GPIO_Init+0x234>
 800345c:	21d5      	movs	r1, #213	; 0xd5
 800345e:	482a      	ldr	r0, [pc, #168]	; (8003508 <HAL_GPIO_Init+0x2d8>)
 8003460:	f7fe f994 	bl	800178c <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	623b      	str	r3, [r7, #32]
          break;
 800346a:	e086      	b.n	800357a <HAL_GPIO_Init+0x34a>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	2b02      	cmp	r3, #2
 8003472:	d00b      	beq.n	800348c <HAL_GPIO_Init+0x25c>
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	2b01      	cmp	r3, #1
 800347a:	d007      	beq.n	800348c <HAL_GPIO_Init+0x25c>
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	2b03      	cmp	r3, #3
 8003482:	d003      	beq.n	800348c <HAL_GPIO_Init+0x25c>
 8003484:	21dc      	movs	r1, #220	; 0xdc
 8003486:	4820      	ldr	r0, [pc, #128]	; (8003508 <HAL_GPIO_Init+0x2d8>)
 8003488:	f7fe f980 	bl	800178c <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	3304      	adds	r3, #4
 8003492:	623b      	str	r3, [r7, #32]
          break;
 8003494:	e071      	b.n	800357a <HAL_GPIO_Init+0x34a>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	2b02      	cmp	r3, #2
 800349c:	d00b      	beq.n	80034b6 <HAL_GPIO_Init+0x286>
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d007      	beq.n	80034b6 <HAL_GPIO_Init+0x286>
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	2b03      	cmp	r3, #3
 80034ac:	d003      	beq.n	80034b6 <HAL_GPIO_Init+0x286>
 80034ae:	21e3      	movs	r1, #227	; 0xe3
 80034b0:	4815      	ldr	r0, [pc, #84]	; (8003508 <HAL_GPIO_Init+0x2d8>)
 80034b2:	f7fe f96b 	bl	800178c <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	3308      	adds	r3, #8
 80034bc:	623b      	str	r3, [r7, #32]
          break;
 80034be:	e05c      	b.n	800357a <HAL_GPIO_Init+0x34a>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d00b      	beq.n	80034e0 <HAL_GPIO_Init+0x2b0>
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d007      	beq.n	80034e0 <HAL_GPIO_Init+0x2b0>
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	2b03      	cmp	r3, #3
 80034d6:	d003      	beq.n	80034e0 <HAL_GPIO_Init+0x2b0>
 80034d8:	21ea      	movs	r1, #234	; 0xea
 80034da:	480b      	ldr	r0, [pc, #44]	; (8003508 <HAL_GPIO_Init+0x2d8>)
 80034dc:	f7fe f956 	bl	800178c <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	330c      	adds	r3, #12
 80034e6:	623b      	str	r3, [r7, #32]
          break;
 80034e8:	e047      	b.n	800357a <HAL_GPIO_Init+0x34a>
 80034ea:	bf00      	nop
 80034ec:	40010800 	.word	0x40010800
 80034f0:	40010c00 	.word	0x40010c00
 80034f4:	40011000 	.word	0x40011000
 80034f8:	40011400 	.word	0x40011400
 80034fc:	40011800 	.word	0x40011800
 8003500:	40011c00 	.word	0x40011c00
 8003504:	40012000 	.word	0x40012000
 8003508:	0800baf8 	.word	0x0800baf8
 800350c:	10110000 	.word	0x10110000
 8003510:	10210000 	.word	0x10210000
 8003514:	10310000 	.word	0x10310000
 8003518:	10120000 	.word	0x10120000
 800351c:	10220000 	.word	0x10220000
 8003520:	10320000 	.word	0x10320000
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d00b      	beq.n	8003544 <HAL_GPIO_Init+0x314>
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	2b01      	cmp	r3, #1
 8003532:	d007      	beq.n	8003544 <HAL_GPIO_Init+0x314>
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	2b02      	cmp	r3, #2
 800353a:	d003      	beq.n	8003544 <HAL_GPIO_Init+0x314>
 800353c:	21f7      	movs	r1, #247	; 0xf7
 800353e:	487c      	ldr	r0, [pc, #496]	; (8003730 <HAL_GPIO_Init+0x500>)
 8003540:	f7fe f924 	bl	800178c <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d102      	bne.n	8003552 <HAL_GPIO_Init+0x322>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800354c:	2304      	movs	r3, #4
 800354e:	623b      	str	r3, [r7, #32]
          break;
 8003550:	e013      	b.n	800357a <HAL_GPIO_Init+0x34a>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	2b01      	cmp	r3, #1
 8003558:	d105      	bne.n	8003566 <HAL_GPIO_Init+0x336>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800355a:	2308      	movs	r3, #8
 800355c:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	69fa      	ldr	r2, [r7, #28]
 8003562:	611a      	str	r2, [r3, #16]
          break;
 8003564:	e009      	b.n	800357a <HAL_GPIO_Init+0x34a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003566:	2308      	movs	r3, #8
 8003568:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	69fa      	ldr	r2, [r7, #28]
 800356e:	615a      	str	r2, [r3, #20]
          break;
 8003570:	e003      	b.n	800357a <HAL_GPIO_Init+0x34a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003572:	2300      	movs	r3, #0
 8003574:	623b      	str	r3, [r7, #32]
          break;
 8003576:	e000      	b.n	800357a <HAL_GPIO_Init+0x34a>
          break;
 8003578:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	2bff      	cmp	r3, #255	; 0xff
 800357e:	d801      	bhi.n	8003584 <HAL_GPIO_Init+0x354>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	e001      	b.n	8003588 <HAL_GPIO_Init+0x358>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	3304      	adds	r3, #4
 8003588:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800358a:	69bb      	ldr	r3, [r7, #24]
 800358c:	2bff      	cmp	r3, #255	; 0xff
 800358e:	d802      	bhi.n	8003596 <HAL_GPIO_Init+0x366>
 8003590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	e002      	b.n	800359c <HAL_GPIO_Init+0x36c>
 8003596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003598:	3b08      	subs	r3, #8
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	210f      	movs	r1, #15
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	fa01 f303 	lsl.w	r3, r1, r3
 80035aa:	43db      	mvns	r3, r3
 80035ac:	401a      	ands	r2, r3
 80035ae:	6a39      	ldr	r1, [r7, #32]
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	fa01 f303 	lsl.w	r3, r1, r3
 80035b6:	431a      	orrs	r2, r3
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	f000 80a2 	beq.w	800370e <HAL_GPIO_Init+0x4de>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80035ca:	4b5a      	ldr	r3, [pc, #360]	; (8003734 <HAL_GPIO_Init+0x504>)
 80035cc:	699b      	ldr	r3, [r3, #24]
 80035ce:	4a59      	ldr	r2, [pc, #356]	; (8003734 <HAL_GPIO_Init+0x504>)
 80035d0:	f043 0301 	orr.w	r3, r3, #1
 80035d4:	6193      	str	r3, [r2, #24]
 80035d6:	4b57      	ldr	r3, [pc, #348]	; (8003734 <HAL_GPIO_Init+0x504>)
 80035d8:	699b      	ldr	r3, [r3, #24]
 80035da:	f003 0301 	and.w	r3, r3, #1
 80035de:	60bb      	str	r3, [r7, #8]
 80035e0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80035e2:	4a55      	ldr	r2, [pc, #340]	; (8003738 <HAL_GPIO_Init+0x508>)
 80035e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e6:	089b      	lsrs	r3, r3, #2
 80035e8:	3302      	adds	r3, #2
 80035ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035ee:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80035f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f2:	f003 0303 	and.w	r3, r3, #3
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	220f      	movs	r2, #15
 80035fa:	fa02 f303 	lsl.w	r3, r2, r3
 80035fe:	43db      	mvns	r3, r3
 8003600:	68fa      	ldr	r2, [r7, #12]
 8003602:	4013      	ands	r3, r2
 8003604:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a4c      	ldr	r2, [pc, #304]	; (800373c <HAL_GPIO_Init+0x50c>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d01f      	beq.n	800364e <HAL_GPIO_Init+0x41e>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a4b      	ldr	r2, [pc, #300]	; (8003740 <HAL_GPIO_Init+0x510>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d019      	beq.n	800364a <HAL_GPIO_Init+0x41a>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a4a      	ldr	r2, [pc, #296]	; (8003744 <HAL_GPIO_Init+0x514>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d013      	beq.n	8003646 <HAL_GPIO_Init+0x416>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a49      	ldr	r2, [pc, #292]	; (8003748 <HAL_GPIO_Init+0x518>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d00d      	beq.n	8003642 <HAL_GPIO_Init+0x412>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a48      	ldr	r2, [pc, #288]	; (800374c <HAL_GPIO_Init+0x51c>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d007      	beq.n	800363e <HAL_GPIO_Init+0x40e>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a47      	ldr	r2, [pc, #284]	; (8003750 <HAL_GPIO_Init+0x520>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d101      	bne.n	800363a <HAL_GPIO_Init+0x40a>
 8003636:	2305      	movs	r3, #5
 8003638:	e00a      	b.n	8003650 <HAL_GPIO_Init+0x420>
 800363a:	2306      	movs	r3, #6
 800363c:	e008      	b.n	8003650 <HAL_GPIO_Init+0x420>
 800363e:	2304      	movs	r3, #4
 8003640:	e006      	b.n	8003650 <HAL_GPIO_Init+0x420>
 8003642:	2303      	movs	r3, #3
 8003644:	e004      	b.n	8003650 <HAL_GPIO_Init+0x420>
 8003646:	2302      	movs	r3, #2
 8003648:	e002      	b.n	8003650 <HAL_GPIO_Init+0x420>
 800364a:	2301      	movs	r3, #1
 800364c:	e000      	b.n	8003650 <HAL_GPIO_Init+0x420>
 800364e:	2300      	movs	r3, #0
 8003650:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003652:	f002 0203 	and.w	r2, r2, #3
 8003656:	0092      	lsls	r2, r2, #2
 8003658:	4093      	lsls	r3, r2
 800365a:	68fa      	ldr	r2, [r7, #12]
 800365c:	4313      	orrs	r3, r2
 800365e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003660:	4935      	ldr	r1, [pc, #212]	; (8003738 <HAL_GPIO_Init+0x508>)
 8003662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003664:	089b      	lsrs	r3, r3, #2
 8003666:	3302      	adds	r3, #2
 8003668:	68fa      	ldr	r2, [r7, #12]
 800366a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d006      	beq.n	8003688 <HAL_GPIO_Init+0x458>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800367a:	4b36      	ldr	r3, [pc, #216]	; (8003754 <HAL_GPIO_Init+0x524>)
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	4935      	ldr	r1, [pc, #212]	; (8003754 <HAL_GPIO_Init+0x524>)
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	4313      	orrs	r3, r2
 8003684:	600b      	str	r3, [r1, #0]
 8003686:	e006      	b.n	8003696 <HAL_GPIO_Init+0x466>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003688:	4b32      	ldr	r3, [pc, #200]	; (8003754 <HAL_GPIO_Init+0x524>)
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	69bb      	ldr	r3, [r7, #24]
 800368e:	43db      	mvns	r3, r3
 8003690:	4930      	ldr	r1, [pc, #192]	; (8003754 <HAL_GPIO_Init+0x524>)
 8003692:	4013      	ands	r3, r2
 8003694:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d006      	beq.n	80036b0 <HAL_GPIO_Init+0x480>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80036a2:	4b2c      	ldr	r3, [pc, #176]	; (8003754 <HAL_GPIO_Init+0x524>)
 80036a4:	685a      	ldr	r2, [r3, #4]
 80036a6:	492b      	ldr	r1, [pc, #172]	; (8003754 <HAL_GPIO_Init+0x524>)
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	604b      	str	r3, [r1, #4]
 80036ae:	e006      	b.n	80036be <HAL_GPIO_Init+0x48e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80036b0:	4b28      	ldr	r3, [pc, #160]	; (8003754 <HAL_GPIO_Init+0x524>)
 80036b2:	685a      	ldr	r2, [r3, #4]
 80036b4:	69bb      	ldr	r3, [r7, #24]
 80036b6:	43db      	mvns	r3, r3
 80036b8:	4926      	ldr	r1, [pc, #152]	; (8003754 <HAL_GPIO_Init+0x524>)
 80036ba:	4013      	ands	r3, r2
 80036bc:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d006      	beq.n	80036d8 <HAL_GPIO_Init+0x4a8>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80036ca:	4b22      	ldr	r3, [pc, #136]	; (8003754 <HAL_GPIO_Init+0x524>)
 80036cc:	689a      	ldr	r2, [r3, #8]
 80036ce:	4921      	ldr	r1, [pc, #132]	; (8003754 <HAL_GPIO_Init+0x524>)
 80036d0:	69bb      	ldr	r3, [r7, #24]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	608b      	str	r3, [r1, #8]
 80036d6:	e006      	b.n	80036e6 <HAL_GPIO_Init+0x4b6>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80036d8:	4b1e      	ldr	r3, [pc, #120]	; (8003754 <HAL_GPIO_Init+0x524>)
 80036da:	689a      	ldr	r2, [r3, #8]
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	43db      	mvns	r3, r3
 80036e0:	491c      	ldr	r1, [pc, #112]	; (8003754 <HAL_GPIO_Init+0x524>)
 80036e2:	4013      	ands	r3, r2
 80036e4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d006      	beq.n	8003700 <HAL_GPIO_Init+0x4d0>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80036f2:	4b18      	ldr	r3, [pc, #96]	; (8003754 <HAL_GPIO_Init+0x524>)
 80036f4:	68da      	ldr	r2, [r3, #12]
 80036f6:	4917      	ldr	r1, [pc, #92]	; (8003754 <HAL_GPIO_Init+0x524>)
 80036f8:	69bb      	ldr	r3, [r7, #24]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	60cb      	str	r3, [r1, #12]
 80036fe:	e006      	b.n	800370e <HAL_GPIO_Init+0x4de>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003700:	4b14      	ldr	r3, [pc, #80]	; (8003754 <HAL_GPIO_Init+0x524>)
 8003702:	68da      	ldr	r2, [r3, #12]
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	43db      	mvns	r3, r3
 8003708:	4912      	ldr	r1, [pc, #72]	; (8003754 <HAL_GPIO_Init+0x524>)
 800370a:	4013      	ands	r3, r2
 800370c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800370e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003710:	3301      	adds	r3, #1
 8003712:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371a:	fa22 f303 	lsr.w	r3, r2, r3
 800371e:	2b00      	cmp	r3, #0
 8003720:	f47f ae05 	bne.w	800332e <HAL_GPIO_Init+0xfe>
  }
}
 8003724:	bf00      	nop
 8003726:	bf00      	nop
 8003728:	3728      	adds	r7, #40	; 0x28
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	0800baf8 	.word	0x0800baf8
 8003734:	40021000 	.word	0x40021000
 8003738:	40010000 	.word	0x40010000
 800373c:	40010800 	.word	0x40010800
 8003740:	40010c00 	.word	0x40010c00
 8003744:	40011000 	.word	0x40011000
 8003748:	40011400 	.word	0x40011400
 800374c:	40011800 	.word	0x40011800
 8003750:	40011c00 	.word	0x40011c00
 8003754:	40010400 	.word	0x40010400

08003758 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	460b      	mov	r3, r1
 8003762:	807b      	strh	r3, [r7, #2]
 8003764:	4613      	mov	r3, r2
 8003766:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003768:	887b      	ldrh	r3, [r7, #2]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d004      	beq.n	8003778 <HAL_GPIO_WritePin+0x20>
 800376e:	887b      	ldrh	r3, [r7, #2]
 8003770:	0c1b      	lsrs	r3, r3, #16
 8003772:	041b      	lsls	r3, r3, #16
 8003774:	2b00      	cmp	r3, #0
 8003776:	d004      	beq.n	8003782 <HAL_GPIO_WritePin+0x2a>
 8003778:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 800377c:	480e      	ldr	r0, [pc, #56]	; (80037b8 <HAL_GPIO_WritePin+0x60>)
 800377e:	f7fe f805 	bl	800178c <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8003782:	787b      	ldrb	r3, [r7, #1]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d007      	beq.n	8003798 <HAL_GPIO_WritePin+0x40>
 8003788:	787b      	ldrb	r3, [r7, #1]
 800378a:	2b01      	cmp	r3, #1
 800378c:	d004      	beq.n	8003798 <HAL_GPIO_WritePin+0x40>
 800378e:	f240 11d5 	movw	r1, #469	; 0x1d5
 8003792:	4809      	ldr	r0, [pc, #36]	; (80037b8 <HAL_GPIO_WritePin+0x60>)
 8003794:	f7fd fffa 	bl	800178c <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8003798:	787b      	ldrb	r3, [r7, #1]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d003      	beq.n	80037a6 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800379e:	887a      	ldrh	r2, [r7, #2]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80037a4:	e003      	b.n	80037ae <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80037a6:	887b      	ldrh	r3, [r7, #2]
 80037a8:	041a      	lsls	r2, r3, #16
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	611a      	str	r2, [r3, #16]
}
 80037ae:	bf00      	nop
 80037b0:	3708      	adds	r7, #8
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	0800baf8 	.word	0x0800baf8

080037bc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	460b      	mov	r3, r1
 80037c6:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80037c8:	887b      	ldrh	r3, [r7, #2]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d004      	beq.n	80037d8 <HAL_GPIO_TogglePin+0x1c>
 80037ce:	887b      	ldrh	r3, [r7, #2]
 80037d0:	0c1b      	lsrs	r3, r3, #16
 80037d2:	041b      	lsls	r3, r3, #16
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d004      	beq.n	80037e2 <HAL_GPIO_TogglePin+0x26>
 80037d8:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 80037dc:	480a      	ldr	r0, [pc, #40]	; (8003808 <HAL_GPIO_TogglePin+0x4c>)
 80037de:	f7fd ffd5 	bl	800178c <assert_failed>

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80037e8:	887a      	ldrh	r2, [r7, #2]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	4013      	ands	r3, r2
 80037ee:	041a      	lsls	r2, r3, #16
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	43d9      	mvns	r1, r3
 80037f4:	887b      	ldrh	r3, [r7, #2]
 80037f6:	400b      	ands	r3, r1
 80037f8:	431a      	orrs	r2, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	611a      	str	r2, [r3, #16]
}
 80037fe:	bf00      	nop
 8003800:	3710      	adds	r7, #16
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	0800baf8 	.word	0x0800baf8

0800380c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800380c:	b480      	push	{r7}
 800380e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8003810:	4b03      	ldr	r3, [pc, #12]	; (8003820 <HAL_PWR_EnableBkUpAccess+0x14>)
 8003812:	2201      	movs	r2, #1
 8003814:	601a      	str	r2, [r3, #0]
}
 8003816:	bf00      	nop
 8003818:	46bd      	mov	sp, r7
 800381a:	bc80      	pop	{r7}
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop
 8003820:	420e0020 	.word	0x420e0020

08003824 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b086      	sub	sp, #24
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d101      	bne.n	8003836 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e35c      	b.n	8003ef0 <HAL_RCC_OscConfig+0x6cc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d01c      	beq.n	8003878 <HAL_RCC_OscConfig+0x54>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0301 	and.w	r3, r3, #1
 8003846:	2b00      	cmp	r3, #0
 8003848:	d116      	bne.n	8003878 <HAL_RCC_OscConfig+0x54>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0302 	and.w	r3, r3, #2
 8003852:	2b00      	cmp	r3, #0
 8003854:	d110      	bne.n	8003878 <HAL_RCC_OscConfig+0x54>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0308 	and.w	r3, r3, #8
 800385e:	2b00      	cmp	r3, #0
 8003860:	d10a      	bne.n	8003878 <HAL_RCC_OscConfig+0x54>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0304 	and.w	r3, r3, #4
 800386a:	2b00      	cmp	r3, #0
 800386c:	d104      	bne.n	8003878 <HAL_RCC_OscConfig+0x54>
 800386e:	f240 1167 	movw	r1, #359	; 0x167
 8003872:	48a5      	ldr	r0, [pc, #660]	; (8003b08 <HAL_RCC_OscConfig+0x2e4>)
 8003874:	f7fd ff8a 	bl	800178c <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0301 	and.w	r3, r3, #1
 8003880:	2b00      	cmp	r3, #0
 8003882:	f000 809a 	beq.w	80039ba <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00e      	beq.n	80038ac <HAL_RCC_OscConfig+0x88>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003896:	d009      	beq.n	80038ac <HAL_RCC_OscConfig+0x88>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038a0:	d004      	beq.n	80038ac <HAL_RCC_OscConfig+0x88>
 80038a2:	f240 116d 	movw	r1, #365	; 0x16d
 80038a6:	4898      	ldr	r0, [pc, #608]	; (8003b08 <HAL_RCC_OscConfig+0x2e4>)
 80038a8:	f7fd ff70 	bl	800178c <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80038ac:	4b97      	ldr	r3, [pc, #604]	; (8003b0c <HAL_RCC_OscConfig+0x2e8>)
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f003 030c 	and.w	r3, r3, #12
 80038b4:	2b04      	cmp	r3, #4
 80038b6:	d00c      	beq.n	80038d2 <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80038b8:	4b94      	ldr	r3, [pc, #592]	; (8003b0c <HAL_RCC_OscConfig+0x2e8>)
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f003 030c 	and.w	r3, r3, #12
 80038c0:	2b08      	cmp	r3, #8
 80038c2:	d112      	bne.n	80038ea <HAL_RCC_OscConfig+0xc6>
 80038c4:	4b91      	ldr	r3, [pc, #580]	; (8003b0c <HAL_RCC_OscConfig+0x2e8>)
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038d0:	d10b      	bne.n	80038ea <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038d2:	4b8e      	ldr	r3, [pc, #568]	; (8003b0c <HAL_RCC_OscConfig+0x2e8>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d06c      	beq.n	80039b8 <HAL_RCC_OscConfig+0x194>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d168      	bne.n	80039b8 <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e302      	b.n	8003ef0 <HAL_RCC_OscConfig+0x6cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038f2:	d106      	bne.n	8003902 <HAL_RCC_OscConfig+0xde>
 80038f4:	4b85      	ldr	r3, [pc, #532]	; (8003b0c <HAL_RCC_OscConfig+0x2e8>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a84      	ldr	r2, [pc, #528]	; (8003b0c <HAL_RCC_OscConfig+0x2e8>)
 80038fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038fe:	6013      	str	r3, [r2, #0]
 8003900:	e02e      	b.n	8003960 <HAL_RCC_OscConfig+0x13c>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d10c      	bne.n	8003924 <HAL_RCC_OscConfig+0x100>
 800390a:	4b80      	ldr	r3, [pc, #512]	; (8003b0c <HAL_RCC_OscConfig+0x2e8>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a7f      	ldr	r2, [pc, #508]	; (8003b0c <HAL_RCC_OscConfig+0x2e8>)
 8003910:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003914:	6013      	str	r3, [r2, #0]
 8003916:	4b7d      	ldr	r3, [pc, #500]	; (8003b0c <HAL_RCC_OscConfig+0x2e8>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a7c      	ldr	r2, [pc, #496]	; (8003b0c <HAL_RCC_OscConfig+0x2e8>)
 800391c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003920:	6013      	str	r3, [r2, #0]
 8003922:	e01d      	b.n	8003960 <HAL_RCC_OscConfig+0x13c>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800392c:	d10c      	bne.n	8003948 <HAL_RCC_OscConfig+0x124>
 800392e:	4b77      	ldr	r3, [pc, #476]	; (8003b0c <HAL_RCC_OscConfig+0x2e8>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a76      	ldr	r2, [pc, #472]	; (8003b0c <HAL_RCC_OscConfig+0x2e8>)
 8003934:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003938:	6013      	str	r3, [r2, #0]
 800393a:	4b74      	ldr	r3, [pc, #464]	; (8003b0c <HAL_RCC_OscConfig+0x2e8>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a73      	ldr	r2, [pc, #460]	; (8003b0c <HAL_RCC_OscConfig+0x2e8>)
 8003940:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003944:	6013      	str	r3, [r2, #0]
 8003946:	e00b      	b.n	8003960 <HAL_RCC_OscConfig+0x13c>
 8003948:	4b70      	ldr	r3, [pc, #448]	; (8003b0c <HAL_RCC_OscConfig+0x2e8>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a6f      	ldr	r2, [pc, #444]	; (8003b0c <HAL_RCC_OscConfig+0x2e8>)
 800394e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003952:	6013      	str	r3, [r2, #0]
 8003954:	4b6d      	ldr	r3, [pc, #436]	; (8003b0c <HAL_RCC_OscConfig+0x2e8>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a6c      	ldr	r2, [pc, #432]	; (8003b0c <HAL_RCC_OscConfig+0x2e8>)
 800395a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800395e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d013      	beq.n	8003990 <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003968:	f7fe fbc0 	bl	80020ec <HAL_GetTick>
 800396c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800396e:	e008      	b.n	8003982 <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003970:	f7fe fbbc 	bl	80020ec <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	2b64      	cmp	r3, #100	; 0x64
 800397c:	d901      	bls.n	8003982 <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e2b6      	b.n	8003ef0 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003982:	4b62      	ldr	r3, [pc, #392]	; (8003b0c <HAL_RCC_OscConfig+0x2e8>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d0f0      	beq.n	8003970 <HAL_RCC_OscConfig+0x14c>
 800398e:	e014      	b.n	80039ba <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003990:	f7fe fbac 	bl	80020ec <HAL_GetTick>
 8003994:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003996:	e008      	b.n	80039aa <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003998:	f7fe fba8 	bl	80020ec <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	2b64      	cmp	r3, #100	; 0x64
 80039a4:	d901      	bls.n	80039aa <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e2a2      	b.n	8003ef0 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039aa:	4b58      	ldr	r3, [pc, #352]	; (8003b0c <HAL_RCC_OscConfig+0x2e8>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d1f0      	bne.n	8003998 <HAL_RCC_OscConfig+0x174>
 80039b6:	e000      	b.n	80039ba <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0302 	and.w	r3, r3, #2
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d079      	beq.n	8003aba <HAL_RCC_OscConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	691b      	ldr	r3, [r3, #16]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d008      	beq.n	80039e0 <HAL_RCC_OscConfig+0x1bc>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d004      	beq.n	80039e0 <HAL_RCC_OscConfig+0x1bc>
 80039d6:	f240 11a1 	movw	r1, #417	; 0x1a1
 80039da:	484b      	ldr	r0, [pc, #300]	; (8003b08 <HAL_RCC_OscConfig+0x2e4>)
 80039dc:	f7fd fed6 	bl	800178c <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	695b      	ldr	r3, [r3, #20]
 80039e4:	2b1f      	cmp	r3, #31
 80039e6:	d904      	bls.n	80039f2 <HAL_RCC_OscConfig+0x1ce>
 80039e8:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 80039ec:	4846      	ldr	r0, [pc, #280]	; (8003b08 <HAL_RCC_OscConfig+0x2e4>)
 80039ee:	f7fd fecd 	bl	800178c <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80039f2:	4b46      	ldr	r3, [pc, #280]	; (8003b0c <HAL_RCC_OscConfig+0x2e8>)
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	f003 030c 	and.w	r3, r3, #12
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d00b      	beq.n	8003a16 <HAL_RCC_OscConfig+0x1f2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80039fe:	4b43      	ldr	r3, [pc, #268]	; (8003b0c <HAL_RCC_OscConfig+0x2e8>)
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	f003 030c 	and.w	r3, r3, #12
 8003a06:	2b08      	cmp	r3, #8
 8003a08:	d11c      	bne.n	8003a44 <HAL_RCC_OscConfig+0x220>
 8003a0a:	4b40      	ldr	r3, [pc, #256]	; (8003b0c <HAL_RCC_OscConfig+0x2e8>)
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d116      	bne.n	8003a44 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a16:	4b3d      	ldr	r3, [pc, #244]	; (8003b0c <HAL_RCC_OscConfig+0x2e8>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0302 	and.w	r3, r3, #2
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d005      	beq.n	8003a2e <HAL_RCC_OscConfig+0x20a>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	691b      	ldr	r3, [r3, #16]
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d001      	beq.n	8003a2e <HAL_RCC_OscConfig+0x20a>
      {
        return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e260      	b.n	8003ef0 <HAL_RCC_OscConfig+0x6cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a2e:	4b37      	ldr	r3, [pc, #220]	; (8003b0c <HAL_RCC_OscConfig+0x2e8>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	695b      	ldr	r3, [r3, #20]
 8003a3a:	00db      	lsls	r3, r3, #3
 8003a3c:	4933      	ldr	r1, [pc, #204]	; (8003b0c <HAL_RCC_OscConfig+0x2e8>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a42:	e03a      	b.n	8003aba <HAL_RCC_OscConfig+0x296>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	691b      	ldr	r3, [r3, #16]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d020      	beq.n	8003a8e <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a4c:	4b30      	ldr	r3, [pc, #192]	; (8003b10 <HAL_RCC_OscConfig+0x2ec>)
 8003a4e:	2201      	movs	r2, #1
 8003a50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a52:	f7fe fb4b 	bl	80020ec <HAL_GetTick>
 8003a56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a58:	e008      	b.n	8003a6c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a5a:	f7fe fb47 	bl	80020ec <HAL_GetTick>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	1ad3      	subs	r3, r2, r3
 8003a64:	2b02      	cmp	r3, #2
 8003a66:	d901      	bls.n	8003a6c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003a68:	2303      	movs	r3, #3
 8003a6a:	e241      	b.n	8003ef0 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a6c:	4b27      	ldr	r3, [pc, #156]	; (8003b0c <HAL_RCC_OscConfig+0x2e8>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 0302 	and.w	r3, r3, #2
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d0f0      	beq.n	8003a5a <HAL_RCC_OscConfig+0x236>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a78:	4b24      	ldr	r3, [pc, #144]	; (8003b0c <HAL_RCC_OscConfig+0x2e8>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	695b      	ldr	r3, [r3, #20]
 8003a84:	00db      	lsls	r3, r3, #3
 8003a86:	4921      	ldr	r1, [pc, #132]	; (8003b0c <HAL_RCC_OscConfig+0x2e8>)
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	600b      	str	r3, [r1, #0]
 8003a8c:	e015      	b.n	8003aba <HAL_RCC_OscConfig+0x296>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a8e:	4b20      	ldr	r3, [pc, #128]	; (8003b10 <HAL_RCC_OscConfig+0x2ec>)
 8003a90:	2200      	movs	r2, #0
 8003a92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a94:	f7fe fb2a 	bl	80020ec <HAL_GetTick>
 8003a98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a9a:	e008      	b.n	8003aae <HAL_RCC_OscConfig+0x28a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a9c:	f7fe fb26 	bl	80020ec <HAL_GetTick>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	d901      	bls.n	8003aae <HAL_RCC_OscConfig+0x28a>
          {
            return HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	e220      	b.n	8003ef0 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aae:	4b17      	ldr	r3, [pc, #92]	; (8003b0c <HAL_RCC_OscConfig+0x2e8>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0302 	and.w	r3, r3, #2
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d1f0      	bne.n	8003a9c <HAL_RCC_OscConfig+0x278>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0308 	and.w	r3, r3, #8
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d048      	beq.n	8003b58 <HAL_RCC_OscConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	699b      	ldr	r3, [r3, #24]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d008      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x2bc>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	699b      	ldr	r3, [r3, #24]
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d004      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x2bc>
 8003ad6:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8003ada:	480b      	ldr	r0, [pc, #44]	; (8003b08 <HAL_RCC_OscConfig+0x2e4>)
 8003adc:	f7fd fe56 	bl	800178c <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	699b      	ldr	r3, [r3, #24]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d021      	beq.n	8003b2c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ae8:	4b0a      	ldr	r3, [pc, #40]	; (8003b14 <HAL_RCC_OscConfig+0x2f0>)
 8003aea:	2201      	movs	r2, #1
 8003aec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003aee:	f7fe fafd 	bl	80020ec <HAL_GetTick>
 8003af2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003af4:	e010      	b.n	8003b18 <HAL_RCC_OscConfig+0x2f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003af6:	f7fe faf9 	bl	80020ec <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d909      	bls.n	8003b18 <HAL_RCC_OscConfig+0x2f4>
        {
          return HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	e1f3      	b.n	8003ef0 <HAL_RCC_OscConfig+0x6cc>
 8003b08:	0800bb34 	.word	0x0800bb34
 8003b0c:	40021000 	.word	0x40021000
 8003b10:	42420000 	.word	0x42420000
 8003b14:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b18:	4b67      	ldr	r3, [pc, #412]	; (8003cb8 <HAL_RCC_OscConfig+0x494>)
 8003b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1c:	f003 0302 	and.w	r3, r3, #2
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d0e8      	beq.n	8003af6 <HAL_RCC_OscConfig+0x2d2>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003b24:	2001      	movs	r0, #1
 8003b26:	f000 fc0f 	bl	8004348 <RCC_Delay>
 8003b2a:	e015      	b.n	8003b58 <HAL_RCC_OscConfig+0x334>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b2c:	4b63      	ldr	r3, [pc, #396]	; (8003cbc <HAL_RCC_OscConfig+0x498>)
 8003b2e:	2200      	movs	r2, #0
 8003b30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b32:	f7fe fadb 	bl	80020ec <HAL_GetTick>
 8003b36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b38:	e008      	b.n	8003b4c <HAL_RCC_OscConfig+0x328>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b3a:	f7fe fad7 	bl	80020ec <HAL_GetTick>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	d901      	bls.n	8003b4c <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	e1d1      	b.n	8003ef0 <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b4c:	4b5a      	ldr	r3, [pc, #360]	; (8003cb8 <HAL_RCC_OscConfig+0x494>)
 8003b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b50:	f003 0302 	and.w	r3, r3, #2
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d1f0      	bne.n	8003b3a <HAL_RCC_OscConfig+0x316>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0304 	and.w	r3, r3, #4
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	f000 80c0 	beq.w	8003ce6 <HAL_RCC_OscConfig+0x4c2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b66:	2300      	movs	r3, #0
 8003b68:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	68db      	ldr	r3, [r3, #12]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d00c      	beq.n	8003b8c <HAL_RCC_OscConfig+0x368>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d008      	beq.n	8003b8c <HAL_RCC_OscConfig+0x368>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	2b05      	cmp	r3, #5
 8003b80:	d004      	beq.n	8003b8c <HAL_RCC_OscConfig+0x368>
 8003b82:	f240 2111 	movw	r1, #529	; 0x211
 8003b86:	484e      	ldr	r0, [pc, #312]	; (8003cc0 <HAL_RCC_OscConfig+0x49c>)
 8003b88:	f7fd fe00 	bl	800178c <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b8c:	4b4a      	ldr	r3, [pc, #296]	; (8003cb8 <HAL_RCC_OscConfig+0x494>)
 8003b8e:	69db      	ldr	r3, [r3, #28]
 8003b90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d10d      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x390>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b98:	4b47      	ldr	r3, [pc, #284]	; (8003cb8 <HAL_RCC_OscConfig+0x494>)
 8003b9a:	69db      	ldr	r3, [r3, #28]
 8003b9c:	4a46      	ldr	r2, [pc, #280]	; (8003cb8 <HAL_RCC_OscConfig+0x494>)
 8003b9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ba2:	61d3      	str	r3, [r2, #28]
 8003ba4:	4b44      	ldr	r3, [pc, #272]	; (8003cb8 <HAL_RCC_OscConfig+0x494>)
 8003ba6:	69db      	ldr	r3, [r3, #28]
 8003ba8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bac:	60bb      	str	r3, [r7, #8]
 8003bae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bb4:	4b43      	ldr	r3, [pc, #268]	; (8003cc4 <HAL_RCC_OscConfig+0x4a0>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d118      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x3ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bc0:	4b40      	ldr	r3, [pc, #256]	; (8003cc4 <HAL_RCC_OscConfig+0x4a0>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a3f      	ldr	r2, [pc, #252]	; (8003cc4 <HAL_RCC_OscConfig+0x4a0>)
 8003bc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bcc:	f7fe fa8e 	bl	80020ec <HAL_GetTick>
 8003bd0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bd2:	e008      	b.n	8003be6 <HAL_RCC_OscConfig+0x3c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bd4:	f7fe fa8a 	bl	80020ec <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	2b64      	cmp	r3, #100	; 0x64
 8003be0:	d901      	bls.n	8003be6 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e184      	b.n	8003ef0 <HAL_RCC_OscConfig+0x6cc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003be6:	4b37      	ldr	r3, [pc, #220]	; (8003cc4 <HAL_RCC_OscConfig+0x4a0>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d0f0      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x3b0>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d106      	bne.n	8003c08 <HAL_RCC_OscConfig+0x3e4>
 8003bfa:	4b2f      	ldr	r3, [pc, #188]	; (8003cb8 <HAL_RCC_OscConfig+0x494>)
 8003bfc:	6a1b      	ldr	r3, [r3, #32]
 8003bfe:	4a2e      	ldr	r2, [pc, #184]	; (8003cb8 <HAL_RCC_OscConfig+0x494>)
 8003c00:	f043 0301 	orr.w	r3, r3, #1
 8003c04:	6213      	str	r3, [r2, #32]
 8003c06:	e02d      	b.n	8003c64 <HAL_RCC_OscConfig+0x440>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d10c      	bne.n	8003c2a <HAL_RCC_OscConfig+0x406>
 8003c10:	4b29      	ldr	r3, [pc, #164]	; (8003cb8 <HAL_RCC_OscConfig+0x494>)
 8003c12:	6a1b      	ldr	r3, [r3, #32]
 8003c14:	4a28      	ldr	r2, [pc, #160]	; (8003cb8 <HAL_RCC_OscConfig+0x494>)
 8003c16:	f023 0301 	bic.w	r3, r3, #1
 8003c1a:	6213      	str	r3, [r2, #32]
 8003c1c:	4b26      	ldr	r3, [pc, #152]	; (8003cb8 <HAL_RCC_OscConfig+0x494>)
 8003c1e:	6a1b      	ldr	r3, [r3, #32]
 8003c20:	4a25      	ldr	r2, [pc, #148]	; (8003cb8 <HAL_RCC_OscConfig+0x494>)
 8003c22:	f023 0304 	bic.w	r3, r3, #4
 8003c26:	6213      	str	r3, [r2, #32]
 8003c28:	e01c      	b.n	8003c64 <HAL_RCC_OscConfig+0x440>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	2b05      	cmp	r3, #5
 8003c30:	d10c      	bne.n	8003c4c <HAL_RCC_OscConfig+0x428>
 8003c32:	4b21      	ldr	r3, [pc, #132]	; (8003cb8 <HAL_RCC_OscConfig+0x494>)
 8003c34:	6a1b      	ldr	r3, [r3, #32]
 8003c36:	4a20      	ldr	r2, [pc, #128]	; (8003cb8 <HAL_RCC_OscConfig+0x494>)
 8003c38:	f043 0304 	orr.w	r3, r3, #4
 8003c3c:	6213      	str	r3, [r2, #32]
 8003c3e:	4b1e      	ldr	r3, [pc, #120]	; (8003cb8 <HAL_RCC_OscConfig+0x494>)
 8003c40:	6a1b      	ldr	r3, [r3, #32]
 8003c42:	4a1d      	ldr	r2, [pc, #116]	; (8003cb8 <HAL_RCC_OscConfig+0x494>)
 8003c44:	f043 0301 	orr.w	r3, r3, #1
 8003c48:	6213      	str	r3, [r2, #32]
 8003c4a:	e00b      	b.n	8003c64 <HAL_RCC_OscConfig+0x440>
 8003c4c:	4b1a      	ldr	r3, [pc, #104]	; (8003cb8 <HAL_RCC_OscConfig+0x494>)
 8003c4e:	6a1b      	ldr	r3, [r3, #32]
 8003c50:	4a19      	ldr	r2, [pc, #100]	; (8003cb8 <HAL_RCC_OscConfig+0x494>)
 8003c52:	f023 0301 	bic.w	r3, r3, #1
 8003c56:	6213      	str	r3, [r2, #32]
 8003c58:	4b17      	ldr	r3, [pc, #92]	; (8003cb8 <HAL_RCC_OscConfig+0x494>)
 8003c5a:	6a1b      	ldr	r3, [r3, #32]
 8003c5c:	4a16      	ldr	r2, [pc, #88]	; (8003cb8 <HAL_RCC_OscConfig+0x494>)
 8003c5e:	f023 0304 	bic.w	r3, r3, #4
 8003c62:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d015      	beq.n	8003c98 <HAL_RCC_OscConfig+0x474>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c6c:	f7fe fa3e 	bl	80020ec <HAL_GetTick>
 8003c70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c72:	e00a      	b.n	8003c8a <HAL_RCC_OscConfig+0x466>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c74:	f7fe fa3a 	bl	80020ec <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d901      	bls.n	8003c8a <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e132      	b.n	8003ef0 <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c8a:	4b0b      	ldr	r3, [pc, #44]	; (8003cb8 <HAL_RCC_OscConfig+0x494>)
 8003c8c:	6a1b      	ldr	r3, [r3, #32]
 8003c8e:	f003 0302 	and.w	r3, r3, #2
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d0ee      	beq.n	8003c74 <HAL_RCC_OscConfig+0x450>
 8003c96:	e01d      	b.n	8003cd4 <HAL_RCC_OscConfig+0x4b0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c98:	f7fe fa28 	bl	80020ec <HAL_GetTick>
 8003c9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c9e:	e013      	b.n	8003cc8 <HAL_RCC_OscConfig+0x4a4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ca0:	f7fe fa24 	bl	80020ec <HAL_GetTick>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d90a      	bls.n	8003cc8 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	e11c      	b.n	8003ef0 <HAL_RCC_OscConfig+0x6cc>
 8003cb6:	bf00      	nop
 8003cb8:	40021000 	.word	0x40021000
 8003cbc:	42420480 	.word	0x42420480
 8003cc0:	0800bb34 	.word	0x0800bb34
 8003cc4:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cc8:	4b8b      	ldr	r3, [pc, #556]	; (8003ef8 <HAL_RCC_OscConfig+0x6d4>)
 8003cca:	6a1b      	ldr	r3, [r3, #32]
 8003ccc:	f003 0302 	and.w	r3, r3, #2
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d1e5      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x47c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003cd4:	7dfb      	ldrb	r3, [r7, #23]
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d105      	bne.n	8003ce6 <HAL_RCC_OscConfig+0x4c2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cda:	4b87      	ldr	r3, [pc, #540]	; (8003ef8 <HAL_RCC_OscConfig+0x6d4>)
 8003cdc:	69db      	ldr	r3, [r3, #28]
 8003cde:	4a86      	ldr	r2, [pc, #536]	; (8003ef8 <HAL_RCC_OscConfig+0x6d4>)
 8003ce0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ce4:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	69db      	ldr	r3, [r3, #28]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d00c      	beq.n	8003d08 <HAL_RCC_OscConfig+0x4e4>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	69db      	ldr	r3, [r3, #28]
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d008      	beq.n	8003d08 <HAL_RCC_OscConfig+0x4e4>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	69db      	ldr	r3, [r3, #28]
 8003cfa:	2b02      	cmp	r3, #2
 8003cfc:	d004      	beq.n	8003d08 <HAL_RCC_OscConfig+0x4e4>
 8003cfe:	f240 21af 	movw	r1, #687	; 0x2af
 8003d02:	487e      	ldr	r0, [pc, #504]	; (8003efc <HAL_RCC_OscConfig+0x6d8>)
 8003d04:	f7fd fd42 	bl	800178c <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	69db      	ldr	r3, [r3, #28]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	f000 80ee 	beq.w	8003eee <HAL_RCC_OscConfig+0x6ca>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d12:	4b79      	ldr	r3, [pc, #484]	; (8003ef8 <HAL_RCC_OscConfig+0x6d4>)
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f003 030c 	and.w	r3, r3, #12
 8003d1a:	2b08      	cmp	r3, #8
 8003d1c:	f000 80ce 	beq.w	8003ebc <HAL_RCC_OscConfig+0x698>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	69db      	ldr	r3, [r3, #28]
 8003d24:	2b02      	cmp	r3, #2
 8003d26:	f040 80b2 	bne.w	8003e8e <HAL_RCC_OscConfig+0x66a>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a1b      	ldr	r3, [r3, #32]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d009      	beq.n	8003d46 <HAL_RCC_OscConfig+0x522>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a1b      	ldr	r3, [r3, #32]
 8003d36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d3a:	d004      	beq.n	8003d46 <HAL_RCC_OscConfig+0x522>
 8003d3c:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 8003d40:	486e      	ldr	r0, [pc, #440]	; (8003efc <HAL_RCC_OscConfig+0x6d8>)
 8003d42:	f7fd fd23 	bl	800178c <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d04a      	beq.n	8003de4 <HAL_RCC_OscConfig+0x5c0>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d52:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003d56:	d045      	beq.n	8003de4 <HAL_RCC_OscConfig+0x5c0>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003d60:	d040      	beq.n	8003de4 <HAL_RCC_OscConfig+0x5c0>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d66:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003d6a:	d03b      	beq.n	8003de4 <HAL_RCC_OscConfig+0x5c0>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d74:	d036      	beq.n	8003de4 <HAL_RCC_OscConfig+0x5c0>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003d7e:	d031      	beq.n	8003de4 <HAL_RCC_OscConfig+0x5c0>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d84:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003d88:	d02c      	beq.n	8003de4 <HAL_RCC_OscConfig+0x5c0>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003d92:	d027      	beq.n	8003de4 <HAL_RCC_OscConfig+0x5c0>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d98:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d9c:	d022      	beq.n	8003de4 <HAL_RCC_OscConfig+0x5c0>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003da6:	d01d      	beq.n	8003de4 <HAL_RCC_OscConfig+0x5c0>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dac:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003db0:	d018      	beq.n	8003de4 <HAL_RCC_OscConfig+0x5c0>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db6:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003dba:	d013      	beq.n	8003de4 <HAL_RCC_OscConfig+0x5c0>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003dc4:	d00e      	beq.n	8003de4 <HAL_RCC_OscConfig+0x5c0>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dca:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 8003dce:	d009      	beq.n	8003de4 <HAL_RCC_OscConfig+0x5c0>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd4:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8003dd8:	d004      	beq.n	8003de4 <HAL_RCC_OscConfig+0x5c0>
 8003dda:	f240 21b9 	movw	r1, #697	; 0x2b9
 8003dde:	4847      	ldr	r0, [pc, #284]	; (8003efc <HAL_RCC_OscConfig+0x6d8>)
 8003de0:	f7fd fcd4 	bl	800178c <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003de4:	4b46      	ldr	r3, [pc, #280]	; (8003f00 <HAL_RCC_OscConfig+0x6dc>)
 8003de6:	2200      	movs	r2, #0
 8003de8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dea:	f7fe f97f 	bl	80020ec <HAL_GetTick>
 8003dee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003df0:	e008      	b.n	8003e04 <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003df2:	f7fe f97b 	bl	80020ec <HAL_GetTick>
 8003df6:	4602      	mov	r2, r0
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d901      	bls.n	8003e04 <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e075      	b.n	8003ef0 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e04:	4b3c      	ldr	r3, [pc, #240]	; (8003ef8 <HAL_RCC_OscConfig+0x6d4>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d1f0      	bne.n	8003df2 <HAL_RCC_OscConfig+0x5ce>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6a1b      	ldr	r3, [r3, #32]
 8003e14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e18:	d116      	bne.n	8003e48 <HAL_RCC_OscConfig+0x624>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d009      	beq.n	8003e36 <HAL_RCC_OscConfig+0x612>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e2a:	d004      	beq.n	8003e36 <HAL_RCC_OscConfig+0x612>
 8003e2c:	f240 21cf 	movw	r1, #719	; 0x2cf
 8003e30:	4832      	ldr	r0, [pc, #200]	; (8003efc <HAL_RCC_OscConfig+0x6d8>)
 8003e32:	f7fd fcab 	bl	800178c <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003e36:	4b30      	ldr	r3, [pc, #192]	; (8003ef8 <HAL_RCC_OscConfig+0x6d4>)
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	492d      	ldr	r1, [pc, #180]	; (8003ef8 <HAL_RCC_OscConfig+0x6d4>)
 8003e44:	4313      	orrs	r3, r2
 8003e46:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e48:	4b2b      	ldr	r3, [pc, #172]	; (8003ef8 <HAL_RCC_OscConfig+0x6d4>)
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6a19      	ldr	r1, [r3, #32]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e58:	430b      	orrs	r3, r1
 8003e5a:	4927      	ldr	r1, [pc, #156]	; (8003ef8 <HAL_RCC_OscConfig+0x6d4>)
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e60:	4b27      	ldr	r3, [pc, #156]	; (8003f00 <HAL_RCC_OscConfig+0x6dc>)
 8003e62:	2201      	movs	r2, #1
 8003e64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e66:	f7fe f941 	bl	80020ec <HAL_GetTick>
 8003e6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e6c:	e008      	b.n	8003e80 <HAL_RCC_OscConfig+0x65c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e6e:	f7fe f93d 	bl	80020ec <HAL_GetTick>
 8003e72:	4602      	mov	r2, r0
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	1ad3      	subs	r3, r2, r3
 8003e78:	2b02      	cmp	r3, #2
 8003e7a:	d901      	bls.n	8003e80 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	e037      	b.n	8003ef0 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e80:	4b1d      	ldr	r3, [pc, #116]	; (8003ef8 <HAL_RCC_OscConfig+0x6d4>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d0f0      	beq.n	8003e6e <HAL_RCC_OscConfig+0x64a>
 8003e8c:	e02f      	b.n	8003eee <HAL_RCC_OscConfig+0x6ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e8e:	4b1c      	ldr	r3, [pc, #112]	; (8003f00 <HAL_RCC_OscConfig+0x6dc>)
 8003e90:	2200      	movs	r2, #0
 8003e92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e94:	f7fe f92a 	bl	80020ec <HAL_GetTick>
 8003e98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e9a:	e008      	b.n	8003eae <HAL_RCC_OscConfig+0x68a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e9c:	f7fe f926 	bl	80020ec <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d901      	bls.n	8003eae <HAL_RCC_OscConfig+0x68a>
          {
            return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e020      	b.n	8003ef0 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003eae:	4b12      	ldr	r3, [pc, #72]	; (8003ef8 <HAL_RCC_OscConfig+0x6d4>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d1f0      	bne.n	8003e9c <HAL_RCC_OscConfig+0x678>
 8003eba:	e018      	b.n	8003eee <HAL_RCC_OscConfig+0x6ca>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	69db      	ldr	r3, [r3, #28]
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d101      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x6a4>
      {
        return HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e013      	b.n	8003ef0 <HAL_RCC_OscConfig+0x6cc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003ec8:	4b0b      	ldr	r3, [pc, #44]	; (8003ef8 <HAL_RCC_OscConfig+0x6d4>)
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6a1b      	ldr	r3, [r3, #32]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d106      	bne.n	8003eea <HAL_RCC_OscConfig+0x6c6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d001      	beq.n	8003eee <HAL_RCC_OscConfig+0x6ca>
        {
          return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e000      	b.n	8003ef0 <HAL_RCC_OscConfig+0x6cc>
        }
      }
    }
  }

  return HAL_OK;
 8003eee:	2300      	movs	r3, #0
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3718      	adds	r7, #24
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	40021000 	.word	0x40021000
 8003efc:	0800bb34 	.word	0x0800bb34
 8003f00:	42420060 	.word	0x42420060

08003f04 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b084      	sub	sp, #16
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d101      	bne.n	8003f18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	e176      	b.n	8004206 <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0301 	and.w	r3, r3, #1
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d116      	bne.n	8003f52 <HAL_RCC_ClockConfig+0x4e>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0302 	and.w	r3, r3, #2
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d110      	bne.n	8003f52 <HAL_RCC_ClockConfig+0x4e>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 0304 	and.w	r3, r3, #4
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d10a      	bne.n	8003f52 <HAL_RCC_ClockConfig+0x4e>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0308 	and.w	r3, r3, #8
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d104      	bne.n	8003f52 <HAL_RCC_ClockConfig+0x4e>
 8003f48:	f44f 714e 	mov.w	r1, #824	; 0x338
 8003f4c:	4874      	ldr	r0, [pc, #464]	; (8004120 <HAL_RCC_ClockConfig+0x21c>)
 8003f4e:	f7fd fc1d 	bl	800178c <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d00a      	beq.n	8003f6e <HAL_RCC_ClockConfig+0x6a>
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d007      	beq.n	8003f6e <HAL_RCC_ClockConfig+0x6a>
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d004      	beq.n	8003f6e <HAL_RCC_ClockConfig+0x6a>
 8003f64:	f240 3139 	movw	r1, #825	; 0x339
 8003f68:	486d      	ldr	r0, [pc, #436]	; (8004120 <HAL_RCC_ClockConfig+0x21c>)
 8003f6a:	f7fd fc0f 	bl	800178c <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f6e:	4b6d      	ldr	r3, [pc, #436]	; (8004124 <HAL_RCC_ClockConfig+0x220>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0307 	and.w	r3, r3, #7
 8003f76:	683a      	ldr	r2, [r7, #0]
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d910      	bls.n	8003f9e <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f7c:	4b69      	ldr	r3, [pc, #420]	; (8004124 <HAL_RCC_ClockConfig+0x220>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f023 0207 	bic.w	r2, r3, #7
 8003f84:	4967      	ldr	r1, [pc, #412]	; (8004124 <HAL_RCC_ClockConfig+0x220>)
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f8c:	4b65      	ldr	r3, [pc, #404]	; (8004124 <HAL_RCC_ClockConfig+0x220>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0307 	and.w	r3, r3, #7
 8003f94:	683a      	ldr	r2, [r7, #0]
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d001      	beq.n	8003f9e <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e133      	b.n	8004206 <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0302 	and.w	r3, r3, #2
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d049      	beq.n	800403e <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 0304 	and.w	r3, r3, #4
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d005      	beq.n	8003fc2 <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fb6:	4b5c      	ldr	r3, [pc, #368]	; (8004128 <HAL_RCC_ClockConfig+0x224>)
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	4a5b      	ldr	r2, [pc, #364]	; (8004128 <HAL_RCC_ClockConfig+0x224>)
 8003fbc:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003fc0:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0308 	and.w	r3, r3, #8
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d005      	beq.n	8003fda <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fce:	4b56      	ldr	r3, [pc, #344]	; (8004128 <HAL_RCC_ClockConfig+0x224>)
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	4a55      	ldr	r2, [pc, #340]	; (8004128 <HAL_RCC_ClockConfig+0x224>)
 8003fd4:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003fd8:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d024      	beq.n	800402c <HAL_RCC_ClockConfig+0x128>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	2b80      	cmp	r3, #128	; 0x80
 8003fe8:	d020      	beq.n	800402c <HAL_RCC_ClockConfig+0x128>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	2b90      	cmp	r3, #144	; 0x90
 8003ff0:	d01c      	beq.n	800402c <HAL_RCC_ClockConfig+0x128>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	2ba0      	cmp	r3, #160	; 0xa0
 8003ff8:	d018      	beq.n	800402c <HAL_RCC_ClockConfig+0x128>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	2bb0      	cmp	r3, #176	; 0xb0
 8004000:	d014      	beq.n	800402c <HAL_RCC_ClockConfig+0x128>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	2bc0      	cmp	r3, #192	; 0xc0
 8004008:	d010      	beq.n	800402c <HAL_RCC_ClockConfig+0x128>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	2bd0      	cmp	r3, #208	; 0xd0
 8004010:	d00c      	beq.n	800402c <HAL_RCC_ClockConfig+0x128>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	2be0      	cmp	r3, #224	; 0xe0
 8004018:	d008      	beq.n	800402c <HAL_RCC_ClockConfig+0x128>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	2bf0      	cmp	r3, #240	; 0xf0
 8004020:	d004      	beq.n	800402c <HAL_RCC_ClockConfig+0x128>
 8004022:	f240 315f 	movw	r1, #863	; 0x35f
 8004026:	483e      	ldr	r0, [pc, #248]	; (8004120 <HAL_RCC_ClockConfig+0x21c>)
 8004028:	f7fd fbb0 	bl	800178c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800402c:	4b3e      	ldr	r3, [pc, #248]	; (8004128 <HAL_RCC_ClockConfig+0x224>)
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	493b      	ldr	r1, [pc, #236]	; (8004128 <HAL_RCC_ClockConfig+0x224>)
 800403a:	4313      	orrs	r3, r2
 800403c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0301 	and.w	r3, r3, #1
 8004046:	2b00      	cmp	r3, #0
 8004048:	d051      	beq.n	80040ee <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d00c      	beq.n	800406c <HAL_RCC_ClockConfig+0x168>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	2b01      	cmp	r3, #1
 8004058:	d008      	beq.n	800406c <HAL_RCC_ClockConfig+0x168>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	2b02      	cmp	r3, #2
 8004060:	d004      	beq.n	800406c <HAL_RCC_ClockConfig+0x168>
 8004062:	f240 3166 	movw	r1, #870	; 0x366
 8004066:	482e      	ldr	r0, [pc, #184]	; (8004120 <HAL_RCC_ClockConfig+0x21c>)
 8004068:	f7fd fb90 	bl	800178c <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	2b01      	cmp	r3, #1
 8004072:	d107      	bne.n	8004084 <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004074:	4b2c      	ldr	r3, [pc, #176]	; (8004128 <HAL_RCC_ClockConfig+0x224>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800407c:	2b00      	cmp	r3, #0
 800407e:	d115      	bne.n	80040ac <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e0c0      	b.n	8004206 <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	2b02      	cmp	r3, #2
 800408a:	d107      	bne.n	800409c <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800408c:	4b26      	ldr	r3, [pc, #152]	; (8004128 <HAL_RCC_ClockConfig+0x224>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004094:	2b00      	cmp	r3, #0
 8004096:	d109      	bne.n	80040ac <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e0b4      	b.n	8004206 <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800409c:	4b22      	ldr	r3, [pc, #136]	; (8004128 <HAL_RCC_ClockConfig+0x224>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 0302 	and.w	r3, r3, #2
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d101      	bne.n	80040ac <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e0ac      	b.n	8004206 <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040ac:	4b1e      	ldr	r3, [pc, #120]	; (8004128 <HAL_RCC_ClockConfig+0x224>)
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	f023 0203 	bic.w	r2, r3, #3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	491b      	ldr	r1, [pc, #108]	; (8004128 <HAL_RCC_ClockConfig+0x224>)
 80040ba:	4313      	orrs	r3, r2
 80040bc:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040be:	f7fe f815 	bl	80020ec <HAL_GetTick>
 80040c2:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040c4:	e00a      	b.n	80040dc <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040c6:	f7fe f811 	bl	80020ec <HAL_GetTick>
 80040ca:	4602      	mov	r2, r0
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d901      	bls.n	80040dc <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 80040d8:	2303      	movs	r3, #3
 80040da:	e094      	b.n	8004206 <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040dc:	4b12      	ldr	r3, [pc, #72]	; (8004128 <HAL_RCC_ClockConfig+0x224>)
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	f003 020c 	and.w	r2, r3, #12
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d1eb      	bne.n	80040c6 <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040ee:	4b0d      	ldr	r3, [pc, #52]	; (8004124 <HAL_RCC_ClockConfig+0x220>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0307 	and.w	r3, r3, #7
 80040f6:	683a      	ldr	r2, [r7, #0]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d217      	bcs.n	800412c <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040fc:	4b09      	ldr	r3, [pc, #36]	; (8004124 <HAL_RCC_ClockConfig+0x220>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f023 0207 	bic.w	r2, r3, #7
 8004104:	4907      	ldr	r1, [pc, #28]	; (8004124 <HAL_RCC_ClockConfig+0x220>)
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	4313      	orrs	r3, r2
 800410a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800410c:	4b05      	ldr	r3, [pc, #20]	; (8004124 <HAL_RCC_ClockConfig+0x220>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0307 	and.w	r3, r3, #7
 8004114:	683a      	ldr	r2, [r7, #0]
 8004116:	429a      	cmp	r2, r3
 8004118:	d008      	beq.n	800412c <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e073      	b.n	8004206 <HAL_RCC_ClockConfig+0x302>
 800411e:	bf00      	nop
 8004120:	0800bb34 	.word	0x0800bb34
 8004124:	40022000 	.word	0x40022000
 8004128:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0304 	and.w	r3, r3, #4
 8004134:	2b00      	cmp	r3, #0
 8004136:	d025      	beq.n	8004184 <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d018      	beq.n	8004172 <HAL_RCC_ClockConfig+0x26e>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004148:	d013      	beq.n	8004172 <HAL_RCC_ClockConfig+0x26e>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	68db      	ldr	r3, [r3, #12]
 800414e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004152:	d00e      	beq.n	8004172 <HAL_RCC_ClockConfig+0x26e>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800415c:	d009      	beq.n	8004172 <HAL_RCC_ClockConfig+0x26e>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004166:	d004      	beq.n	8004172 <HAL_RCC_ClockConfig+0x26e>
 8004168:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 800416c:	4828      	ldr	r0, [pc, #160]	; (8004210 <HAL_RCC_ClockConfig+0x30c>)
 800416e:	f7fd fb0d 	bl	800178c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004172:	4b28      	ldr	r3, [pc, #160]	; (8004214 <HAL_RCC_ClockConfig+0x310>)
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	4925      	ldr	r1, [pc, #148]	; (8004214 <HAL_RCC_ClockConfig+0x310>)
 8004180:	4313      	orrs	r3, r2
 8004182:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 0308 	and.w	r3, r3, #8
 800418c:	2b00      	cmp	r3, #0
 800418e:	d026      	beq.n	80041de <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	691b      	ldr	r3, [r3, #16]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d018      	beq.n	80041ca <HAL_RCC_ClockConfig+0x2c6>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	691b      	ldr	r3, [r3, #16]
 800419c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041a0:	d013      	beq.n	80041ca <HAL_RCC_ClockConfig+0x2c6>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	691b      	ldr	r3, [r3, #16]
 80041a6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80041aa:	d00e      	beq.n	80041ca <HAL_RCC_ClockConfig+0x2c6>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	691b      	ldr	r3, [r3, #16]
 80041b0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80041b4:	d009      	beq.n	80041ca <HAL_RCC_ClockConfig+0x2c6>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	691b      	ldr	r3, [r3, #16]
 80041ba:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80041be:	d004      	beq.n	80041ca <HAL_RCC_ClockConfig+0x2c6>
 80041c0:	f240 31ab 	movw	r1, #939	; 0x3ab
 80041c4:	4812      	ldr	r0, [pc, #72]	; (8004210 <HAL_RCC_ClockConfig+0x30c>)
 80041c6:	f7fd fae1 	bl	800178c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80041ca:	4b12      	ldr	r3, [pc, #72]	; (8004214 <HAL_RCC_ClockConfig+0x310>)
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	691b      	ldr	r3, [r3, #16]
 80041d6:	00db      	lsls	r3, r3, #3
 80041d8:	490e      	ldr	r1, [pc, #56]	; (8004214 <HAL_RCC_ClockConfig+0x310>)
 80041da:	4313      	orrs	r3, r2
 80041dc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80041de:	f000 f821 	bl	8004224 <HAL_RCC_GetSysClockFreq>
 80041e2:	4602      	mov	r2, r0
 80041e4:	4b0b      	ldr	r3, [pc, #44]	; (8004214 <HAL_RCC_ClockConfig+0x310>)
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	091b      	lsrs	r3, r3, #4
 80041ea:	f003 030f 	and.w	r3, r3, #15
 80041ee:	490a      	ldr	r1, [pc, #40]	; (8004218 <HAL_RCC_ClockConfig+0x314>)
 80041f0:	5ccb      	ldrb	r3, [r1, r3]
 80041f2:	fa22 f303 	lsr.w	r3, r2, r3
 80041f6:	4a09      	ldr	r2, [pc, #36]	; (800421c <HAL_RCC_ClockConfig+0x318>)
 80041f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80041fa:	4b09      	ldr	r3, [pc, #36]	; (8004220 <HAL_RCC_ClockConfig+0x31c>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4618      	mov	r0, r3
 8004200:	f7fd ff32 	bl	8002068 <HAL_InitTick>

  return HAL_OK;
 8004204:	2300      	movs	r3, #0
}
 8004206:	4618      	mov	r0, r3
 8004208:	3710      	adds	r7, #16
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	0800bb34 	.word	0x0800bb34
 8004214:	40021000 	.word	0x40021000
 8004218:	0800c3e0 	.word	0x0800c3e0
 800421c:	20000000 	.word	0x20000000
 8004220:	20000004 	.word	0x20000004

08004224 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004224:	b490      	push	{r4, r7}
 8004226:	b08a      	sub	sp, #40	; 0x28
 8004228:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800422a:	4b2a      	ldr	r3, [pc, #168]	; (80042d4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800422c:	1d3c      	adds	r4, r7, #4
 800422e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004230:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004234:	f240 2301 	movw	r3, #513	; 0x201
 8004238:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800423a:	2300      	movs	r3, #0
 800423c:	61fb      	str	r3, [r7, #28]
 800423e:	2300      	movs	r3, #0
 8004240:	61bb      	str	r3, [r7, #24]
 8004242:	2300      	movs	r3, #0
 8004244:	627b      	str	r3, [r7, #36]	; 0x24
 8004246:	2300      	movs	r3, #0
 8004248:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800424a:	2300      	movs	r3, #0
 800424c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800424e:	4b22      	ldr	r3, [pc, #136]	; (80042d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004254:	69fb      	ldr	r3, [r7, #28]
 8004256:	f003 030c 	and.w	r3, r3, #12
 800425a:	2b04      	cmp	r3, #4
 800425c:	d002      	beq.n	8004264 <HAL_RCC_GetSysClockFreq+0x40>
 800425e:	2b08      	cmp	r3, #8
 8004260:	d003      	beq.n	800426a <HAL_RCC_GetSysClockFreq+0x46>
 8004262:	e02d      	b.n	80042c0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004264:	4b1d      	ldr	r3, [pc, #116]	; (80042dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004266:	623b      	str	r3, [r7, #32]
      break;
 8004268:	e02d      	b.n	80042c6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	0c9b      	lsrs	r3, r3, #18
 800426e:	f003 030f 	and.w	r3, r3, #15
 8004272:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004276:	4413      	add	r3, r2
 8004278:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800427c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004284:	2b00      	cmp	r3, #0
 8004286:	d013      	beq.n	80042b0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004288:	4b13      	ldr	r3, [pc, #76]	; (80042d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	0c5b      	lsrs	r3, r3, #17
 800428e:	f003 0301 	and.w	r3, r3, #1
 8004292:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004296:	4413      	add	r3, r2
 8004298:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800429c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	4a0e      	ldr	r2, [pc, #56]	; (80042dc <HAL_RCC_GetSysClockFreq+0xb8>)
 80042a2:	fb02 f203 	mul.w	r2, r2, r3
 80042a6:	69bb      	ldr	r3, [r7, #24]
 80042a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ac:	627b      	str	r3, [r7, #36]	; 0x24
 80042ae:	e004      	b.n	80042ba <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	4a0b      	ldr	r2, [pc, #44]	; (80042e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80042b4:	fb02 f303 	mul.w	r3, r2, r3
 80042b8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80042ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042bc:	623b      	str	r3, [r7, #32]
      break;
 80042be:	e002      	b.n	80042c6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80042c0:	4b06      	ldr	r3, [pc, #24]	; (80042dc <HAL_RCC_GetSysClockFreq+0xb8>)
 80042c2:	623b      	str	r3, [r7, #32]
      break;
 80042c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042c6:	6a3b      	ldr	r3, [r7, #32]
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3728      	adds	r7, #40	; 0x28
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bc90      	pop	{r4, r7}
 80042d0:	4770      	bx	lr
 80042d2:	bf00      	nop
 80042d4:	0800bb6c 	.word	0x0800bb6c
 80042d8:	40021000 	.word	0x40021000
 80042dc:	007a1200 	.word	0x007a1200
 80042e0:	003d0900 	.word	0x003d0900

080042e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042e4:	b480      	push	{r7}
 80042e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042e8:	4b02      	ldr	r3, [pc, #8]	; (80042f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80042ea:	681b      	ldr	r3, [r3, #0]
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bc80      	pop	{r7}
 80042f2:	4770      	bx	lr
 80042f4:	20000000 	.word	0x20000000

080042f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80042fc:	f7ff fff2 	bl	80042e4 <HAL_RCC_GetHCLKFreq>
 8004300:	4602      	mov	r2, r0
 8004302:	4b05      	ldr	r3, [pc, #20]	; (8004318 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	0a1b      	lsrs	r3, r3, #8
 8004308:	f003 0307 	and.w	r3, r3, #7
 800430c:	4903      	ldr	r1, [pc, #12]	; (800431c <HAL_RCC_GetPCLK1Freq+0x24>)
 800430e:	5ccb      	ldrb	r3, [r1, r3]
 8004310:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004314:	4618      	mov	r0, r3
 8004316:	bd80      	pop	{r7, pc}
 8004318:	40021000 	.word	0x40021000
 800431c:	0800c3f0 	.word	0x0800c3f0

08004320 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004324:	f7ff ffde 	bl	80042e4 <HAL_RCC_GetHCLKFreq>
 8004328:	4602      	mov	r2, r0
 800432a:	4b05      	ldr	r3, [pc, #20]	; (8004340 <HAL_RCC_GetPCLK2Freq+0x20>)
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	0adb      	lsrs	r3, r3, #11
 8004330:	f003 0307 	and.w	r3, r3, #7
 8004334:	4903      	ldr	r1, [pc, #12]	; (8004344 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004336:	5ccb      	ldrb	r3, [r1, r3]
 8004338:	fa22 f303 	lsr.w	r3, r2, r3
}
 800433c:	4618      	mov	r0, r3
 800433e:	bd80      	pop	{r7, pc}
 8004340:	40021000 	.word	0x40021000
 8004344:	0800c3f0 	.word	0x0800c3f0

08004348 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004348:	b480      	push	{r7}
 800434a:	b085      	sub	sp, #20
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004350:	4b0a      	ldr	r3, [pc, #40]	; (800437c <RCC_Delay+0x34>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a0a      	ldr	r2, [pc, #40]	; (8004380 <RCC_Delay+0x38>)
 8004356:	fba2 2303 	umull	r2, r3, r2, r3
 800435a:	0a5b      	lsrs	r3, r3, #9
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	fb02 f303 	mul.w	r3, r2, r3
 8004362:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004364:	bf00      	nop
  }
  while (Delay --);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	1e5a      	subs	r2, r3, #1
 800436a:	60fa      	str	r2, [r7, #12]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d1f9      	bne.n	8004364 <RCC_Delay+0x1c>
}
 8004370:	bf00      	nop
 8004372:	bf00      	nop
 8004374:	3714      	adds	r7, #20
 8004376:	46bd      	mov	sp, r7
 8004378:	bc80      	pop	{r7}
 800437a:	4770      	bx	lr
 800437c:	20000000 	.word	0x20000000
 8004380:	10624dd3 	.word	0x10624dd3

08004384 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b086      	sub	sp, #24
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800438c:	2300      	movs	r3, #0
 800438e:	613b      	str	r3, [r7, #16]
 8004390:	2300      	movs	r3, #0
 8004392:	60fb      	str	r3, [r7, #12]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
#endif /* STM32F105xC || STM32F107xC */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 0301 	and.w	r3, r3, #1
 800439c:	2b00      	cmp	r3, #0
 800439e:	d11b      	bne.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 0302 	and.w	r3, r3, #2
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d115      	bne.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 0304 	and.w	r3, r3, #4
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d10f      	bne.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 0308 	and.w	r3, r3, #8
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d109      	bne.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 0310 	and.w	r3, r3, #16
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d103      	bne.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80043d0:	216c      	movs	r1, #108	; 0x6c
 80043d2:	4873      	ldr	r0, [pc, #460]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 80043d4:	f7fd f9da 	bl	800178c <assert_failed>

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0301 	and.w	r3, r3, #1
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	f000 8095 	beq.w	8004510 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    FlagStatus pwrclkchanged = RESET;
 80043e6:	2300      	movs	r3, #0
 80043e8:	75fb      	strb	r3, [r7, #23]

    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d012      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x94>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043fa:	d00d      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x94>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004404:	d008      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x94>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800440e:	d003      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x94>
 8004410:	2174      	movs	r1, #116	; 0x74
 8004412:	4863      	ldr	r0, [pc, #396]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8004414:	f7fd f9ba 	bl	800178c <assert_failed>

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004418:	4b62      	ldr	r3, [pc, #392]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 800441a:	69db      	ldr	r3, [r3, #28]
 800441c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004420:	2b00      	cmp	r3, #0
 8004422:	d10d      	bne.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0xbc>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004424:	4b5f      	ldr	r3, [pc, #380]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004426:	69db      	ldr	r3, [r3, #28]
 8004428:	4a5e      	ldr	r2, [pc, #376]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 800442a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800442e:	61d3      	str	r3, [r2, #28]
 8004430:	4b5c      	ldr	r3, [pc, #368]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004432:	69db      	ldr	r3, [r3, #28]
 8004434:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004438:	60bb      	str	r3, [r7, #8]
 800443a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800443c:	2301      	movs	r3, #1
 800443e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004440:	4b59      	ldr	r3, [pc, #356]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004448:	2b00      	cmp	r3, #0
 800444a:	d118      	bne.n	800447e <HAL_RCCEx_PeriphCLKConfig+0xfa>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800444c:	4b56      	ldr	r3, [pc, #344]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a55      	ldr	r2, [pc, #340]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004452:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004456:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004458:	f7fd fe48 	bl	80020ec <HAL_GetTick>
 800445c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800445e:	e008      	b.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0xee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004460:	f7fd fe44 	bl	80020ec <HAL_GetTick>
 8004464:	4602      	mov	r2, r0
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	2b64      	cmp	r3, #100	; 0x64
 800446c:	d901      	bls.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0xee>
        {
          return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	e092      	b.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x214>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004472:	4b4d      	ldr	r3, [pc, #308]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800447a:	2b00      	cmp	r3, #0
 800447c:	d0f0      	beq.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0xdc>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800447e:	4b49      	ldr	r3, [pc, #292]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004480:	6a1b      	ldr	r3, [r3, #32]
 8004482:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004486:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d02e      	beq.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x168>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004496:	68fa      	ldr	r2, [r7, #12]
 8004498:	429a      	cmp	r2, r3
 800449a:	d027      	beq.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800449c:	4b41      	ldr	r3, [pc, #260]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 800449e:	6a1b      	ldr	r3, [r3, #32]
 80044a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044a4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80044a6:	4b41      	ldr	r3, [pc, #260]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80044a8:	2201      	movs	r2, #1
 80044aa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80044ac:	4b3f      	ldr	r3, [pc, #252]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80044ae:	2200      	movs	r2, #0
 80044b0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80044b2:	4a3c      	ldr	r2, [pc, #240]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f003 0301 	and.w	r3, r3, #1
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d014      	beq.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044c2:	f7fd fe13 	bl	80020ec <HAL_GetTick>
 80044c6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044c8:	e00a      	b.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044ca:	f7fd fe0f 	bl	80020ec <HAL_GetTick>
 80044ce:	4602      	mov	r2, r0
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80044d8:	4293      	cmp	r3, r2
 80044da:	d901      	bls.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          {
            return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	e05b      	b.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x214>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044e0:	4b30      	ldr	r3, [pc, #192]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80044e2:	6a1b      	ldr	r3, [r3, #32]
 80044e4:	f003 0302 	and.w	r3, r3, #2
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d0ee      	beq.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x146>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044ec:	4b2d      	ldr	r3, [pc, #180]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80044ee:	6a1b      	ldr	r3, [r3, #32]
 80044f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	492a      	ldr	r1, [pc, #168]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80044fe:	7dfb      	ldrb	r3, [r7, #23]
 8004500:	2b01      	cmp	r3, #1
 8004502:	d105      	bne.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004504:	4b27      	ldr	r3, [pc, #156]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004506:	69db      	ldr	r3, [r3, #28]
 8004508:	4a26      	ldr	r2, [pc, #152]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 800450a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800450e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 0302 	and.w	r3, r3, #2
 8004518:	2b00      	cmp	r3, #0
 800451a:	d01f      	beq.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d012      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800452c:	d00d      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004536:	d008      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004540:	d003      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 8004542:	21b9      	movs	r1, #185	; 0xb9
 8004544:	4816      	ldr	r0, [pc, #88]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8004546:	f7fd f921 	bl	800178c <assert_failed>

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800454a:	4b16      	ldr	r3, [pc, #88]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	4913      	ldr	r1, [pc, #76]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004558:	4313      	orrs	r3, r2
 800455a:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 0310 	and.w	r3, r3, #16
 8004564:	2b00      	cmp	r3, #0
 8004566:	d016      	beq.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x212>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	695b      	ldr	r3, [r3, #20]
 800456c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004570:	d008      	beq.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	695b      	ldr	r3, [r3, #20]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d004      	beq.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x200>
 800457a:	f240 1115 	movw	r1, #277	; 0x115
 800457e:	4808      	ldr	r0, [pc, #32]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8004580:	f7fd f904 	bl	800178c <assert_failed>

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004584:	4b07      	ldr	r3, [pc, #28]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	695b      	ldr	r3, [r3, #20]
 8004590:	4904      	ldr	r1, [pc, #16]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004592:	4313      	orrs	r3, r2
 8004594:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004596:	2300      	movs	r3, #0
}
 8004598:	4618      	mov	r0, r3
 800459a:	3718      	adds	r7, #24
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	0800bb7c 	.word	0x0800bb7c
 80045a4:	40021000 	.word	0x40021000
 80045a8:	40007000 	.word	0x40007000
 80045ac:	42420440 	.word	0x42420440

080045b0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80045b0:	b590      	push	{r4, r7, lr}
 80045b2:	b08d      	sub	sp, #52	; 0x34
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80045b8:	4b7a      	ldr	r3, [pc, #488]	; (80047a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>)
 80045ba:	f107 040c 	add.w	r4, r7, #12
 80045be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80045c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80045c4:	f240 2301 	movw	r3, #513	; 0x201
 80045c8:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80045ca:	2300      	movs	r3, #0
 80045cc:	627b      	str	r3, [r7, #36]	; 0x24
 80045ce:	2300      	movs	r3, #0
 80045d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045d2:	2300      	movs	r3, #0
 80045d4:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80045d6:	2300      	movs	r3, #0
 80045d8:	61fb      	str	r3, [r7, #28]
 80045da:	2300      	movs	r3, #0
 80045dc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f003 0301 	and.w	r3, r3, #1
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d118      	bne.n	800461a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f003 0302 	and.w	r3, r3, #2
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d113      	bne.n	800461a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f003 0304 	and.w	r3, r3, #4
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d10e      	bne.n	800461a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f003 0308 	and.w	r3, r3, #8
 8004602:	2b00      	cmp	r3, #0
 8004604:	d109      	bne.n	800461a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f003 0310 	and.w	r3, r3, #16
 800460c:	2b00      	cmp	r3, #0
 800460e:	d104      	bne.n	800461a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 8004610:	f44f 71cb 	mov.w	r1, #406	; 0x196
 8004614:	4864      	ldr	r0, [pc, #400]	; (80047a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8>)
 8004616:	f7fd f8b9 	bl	800178c <assert_failed>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	3b01      	subs	r3, #1
 800461e:	2b0f      	cmp	r3, #15
 8004620:	f200 80b6 	bhi.w	8004790 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8004624:	a201      	add	r2, pc, #4	; (adr r2, 800462c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>)
 8004626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800462a:	bf00      	nop
 800462c:	0800470f 	.word	0x0800470f
 8004630:	08004775 	.word	0x08004775
 8004634:	08004791 	.word	0x08004791
 8004638:	080046ff 	.word	0x080046ff
 800463c:	08004791 	.word	0x08004791
 8004640:	08004791 	.word	0x08004791
 8004644:	08004791 	.word	0x08004791
 8004648:	08004707 	.word	0x08004707
 800464c:	08004791 	.word	0x08004791
 8004650:	08004791 	.word	0x08004791
 8004654:	08004791 	.word	0x08004791
 8004658:	08004791 	.word	0x08004791
 800465c:	08004791 	.word	0x08004791
 8004660:	08004791 	.word	0x08004791
 8004664:	08004791 	.word	0x08004791
 8004668:	0800466d 	.word	0x0800466d
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 800466c:	4b4f      	ldr	r3, [pc, #316]	; (80047ac <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	61fb      	str	r3, [r7, #28]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004672:	4b4e      	ldr	r3, [pc, #312]	; (80047ac <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800467a:	2b00      	cmp	r3, #0
 800467c:	f000 808a 	beq.w	8004794 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	0c9b      	lsrs	r3, r3, #18
 8004684:	f003 030f 	and.w	r3, r3, #15
 8004688:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800468c:	4413      	add	r3, r2
 800468e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004692:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004694:	69fb      	ldr	r3, [r7, #28]
 8004696:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d018      	beq.n	80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800469e:	4b43      	ldr	r3, [pc, #268]	; (80047ac <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	0c5b      	lsrs	r3, r3, #17
 80046a4:	f003 0301 	and.w	r3, r3, #1
 80046a8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80046ac:	4413      	add	r3, r2
 80046ae:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80046b2:	627b      	str	r3, [r7, #36]	; 0x24
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d00d      	beq.n	80046da <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80046be:	4a3c      	ldr	r2, [pc, #240]	; (80047b0 <HAL_RCCEx_GetPeriphCLKFreq+0x200>)
 80046c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c2:	fbb2 f2f3 	udiv	r2, r2, r3
 80046c6:	6a3b      	ldr	r3, [r7, #32]
 80046c8:	fb02 f303 	mul.w	r3, r2, r3
 80046cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046ce:	e004      	b.n	80046da <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80046d0:	6a3b      	ldr	r3, [r7, #32]
 80046d2:	4a38      	ldr	r2, [pc, #224]	; (80047b4 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 80046d4:	fb02 f303 	mul.w	r3, r2, r3
 80046d8:	62fb      	str	r3, [r7, #44]	; 0x2c
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80046da:	4b34      	ldr	r3, [pc, #208]	; (80047ac <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046e6:	d102      	bne.n	80046ee <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 80046e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ea:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 80046ec:	e052      	b.n	8004794 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
          frequency = (pllclk * 2) / 3;
 80046ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046f0:	005b      	lsls	r3, r3, #1
 80046f2:	4a31      	ldr	r2, [pc, #196]	; (80047b8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>)
 80046f4:	fba2 2303 	umull	r2, r3, r2, r3
 80046f8:	085b      	lsrs	r3, r3, #1
 80046fa:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80046fc:	e04a      	b.n	8004794 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 80046fe:	f7ff fd91 	bl	8004224 <HAL_RCC_GetSysClockFreq>
 8004702:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8004704:	e049      	b.n	800479a <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 8004706:	f7ff fd8d 	bl	8004224 <HAL_RCC_GetSysClockFreq>
 800470a:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 800470c:	e045      	b.n	800479a <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 800470e:	4b27      	ldr	r3, [pc, #156]	; (80047ac <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 8004710:	6a1b      	ldr	r3, [r3, #32]
 8004712:	61fb      	str	r3, [r7, #28]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004714:	69fb      	ldr	r3, [r7, #28]
 8004716:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800471a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800471e:	d108      	bne.n	8004732 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	f003 0302 	and.w	r3, r3, #2
 8004726:	2b00      	cmp	r3, #0
 8004728:	d003      	beq.n	8004732 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
      {
        frequency = LSE_VALUE;
 800472a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800472e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004730:	e01f      	b.n	8004772 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004738:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800473c:	d109      	bne.n	8004752 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 800473e:	4b1b      	ldr	r3, [pc, #108]	; (80047ac <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 8004740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004742:	f003 0302 	and.w	r3, r3, #2
 8004746:	2b00      	cmp	r3, #0
 8004748:	d003      	beq.n	8004752 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
      {
        frequency = LSI_VALUE;
 800474a:	f649 4340 	movw	r3, #40000	; 0x9c40
 800474e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004750:	e00f      	b.n	8004772 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004758:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800475c:	d11c      	bne.n	8004798 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
 800475e:	4b13      	ldr	r3, [pc, #76]	; (80047ac <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004766:	2b00      	cmp	r3, #0
 8004768:	d016      	beq.n	8004798 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
      {
        frequency = HSE_VALUE / 128U;
 800476a:	f24f 4324 	movw	r3, #62500	; 0xf424
 800476e:	62bb      	str	r3, [r7, #40]	; 0x28
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8004770:	e012      	b.n	8004798 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
 8004772:	e011      	b.n	8004798 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004774:	f7ff fdd4 	bl	8004320 <HAL_RCC_GetPCLK2Freq>
 8004778:	4602      	mov	r2, r0
 800477a:	4b0c      	ldr	r3, [pc, #48]	; (80047ac <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	0b9b      	lsrs	r3, r3, #14
 8004780:	f003 0303 	and.w	r3, r3, #3
 8004784:	3301      	adds	r3, #1
 8004786:	005b      	lsls	r3, r3, #1
 8004788:	fbb2 f3f3 	udiv	r3, r2, r3
 800478c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800478e:	e004      	b.n	800479a <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
    }
    default:
    {
      break;
 8004790:	bf00      	nop
 8004792:	e002      	b.n	800479a <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
      break;
 8004794:	bf00      	nop
 8004796:	e000      	b.n	800479a <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
      break;
 8004798:	bf00      	nop
    }
  }
  return (frequency);
 800479a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800479c:	4618      	mov	r0, r3
 800479e:	3734      	adds	r7, #52	; 0x34
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd90      	pop	{r4, r7, pc}
 80047a4:	0800bbb8 	.word	0x0800bbb8
 80047a8:	0800bb7c 	.word	0x0800bb7c
 80047ac:	40021000 	.word	0x40021000
 80047b0:	007a1200 	.word	0x007a1200
 80047b4:	003d0900 	.word	0x003d0900
 80047b8:	aaaaaaab 	.word	0xaaaaaaab

080047bc <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b084      	sub	sp, #16
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80047c4:	2300      	movs	r3, #0
 80047c6:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d101      	bne.n	80047d2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e0b4      	b.n	800493c <HAL_RTC_Init+0x180>
  }

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a5b      	ldr	r2, [pc, #364]	; (8004944 <HAL_RTC_Init+0x188>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d004      	beq.n	80047e6 <HAL_RTC_Init+0x2a>
 80047dc:	f240 111d 	movw	r1, #285	; 0x11d
 80047e0:	4859      	ldr	r0, [pc, #356]	; (8004948 <HAL_RTC_Init+0x18c>)
 80047e2:	f7fc ffd3 	bl	800178c <assert_failed>
  assert_param(IS_RTC_CALIB_OUTPUT(hrtc->Init.OutPut));
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d012      	beq.n	8004814 <HAL_RTC_Init+0x58>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	2b80      	cmp	r3, #128	; 0x80
 80047f4:	d00e      	beq.n	8004814 <HAL_RTC_Init+0x58>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047fe:	d009      	beq.n	8004814 <HAL_RTC_Init+0x58>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004808:	d004      	beq.n	8004814 <HAL_RTC_Init+0x58>
 800480a:	f44f 718f 	mov.w	r1, #286	; 0x11e
 800480e:	484e      	ldr	r0, [pc, #312]	; (8004948 <HAL_RTC_Init+0x18c>)
 8004810:	f7fc ffbc 	bl	800178c <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800481c:	d309      	bcc.n	8004832 <HAL_RTC_Init+0x76>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004826:	d004      	beq.n	8004832 <HAL_RTC_Init+0x76>
 8004828:	f240 111f 	movw	r1, #287	; 0x11f
 800482c:	4846      	ldr	r0, [pc, #280]	; (8004948 <HAL_RTC_Init+0x18c>)
 800482e:	f7fc ffad 	bl	800178c <assert_failed>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	7c5b      	ldrb	r3, [r3, #17]
 8004836:	b2db      	uxtb	r3, r3
 8004838:	2b00      	cmp	r3, #0
 800483a:	d105      	bne.n	8004848 <HAL_RTC_Init+0x8c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f7fd f822 	bl	800188c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2202      	movs	r2, #2
 800484c:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f000 fbca 	bl	8004fe8 <HAL_RTC_WaitForSynchro>
 8004854:	4603      	mov	r3, r0
 8004856:	2b00      	cmp	r3, #0
 8004858:	d004      	beq.n	8004864 <HAL_RTC_Init+0xa8>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2204      	movs	r2, #4
 800485e:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	e06b      	b.n	800493c <HAL_RTC_Init+0x180>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f000 fc83 	bl	8005170 <RTC_EnterInitMode>
 800486a:	4603      	mov	r3, r0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d004      	beq.n	800487a <HAL_RTC_Init+0xbe>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2204      	movs	r2, #4
 8004874:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e060      	b.n	800493c <HAL_RTC_Init+0x180>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	685a      	ldr	r2, [r3, #4]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f022 0207 	bic.w	r2, r2, #7
 8004888:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d005      	beq.n	800489e <HAL_RTC_Init+0xe2>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8004892:	4b2e      	ldr	r3, [pc, #184]	; (800494c <HAL_RTC_Init+0x190>)
 8004894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004896:	4a2d      	ldr	r2, [pc, #180]	; (800494c <HAL_RTC_Init+0x190>)
 8004898:	f023 0301 	bic.w	r3, r3, #1
 800489c:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800489e:	4b2b      	ldr	r3, [pc, #172]	; (800494c <HAL_RTC_Init+0x190>)
 80048a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a2:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	4928      	ldr	r1, [pc, #160]	; (800494c <HAL_RTC_Init+0x190>)
 80048ac:	4313      	orrs	r3, r2
 80048ae:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048b8:	d003      	beq.n	80048c2 <HAL_RTC_Init+0x106>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	60fb      	str	r3, [r7, #12]
 80048c0:	e00e      	b.n	80048e0 <HAL_RTC_Init+0x124>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80048c2:	2001      	movs	r0, #1
 80048c4:	f7ff fe74 	bl	80045b0 <HAL_RCCEx_GetPeriphCLKFreq>
 80048c8:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d104      	bne.n	80048da <HAL_RTC_Init+0x11e>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2204      	movs	r2, #4
 80048d4:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e030      	b.n	800493c <HAL_RTC_Init+0x180>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	3b01      	subs	r3, #1
 80048de:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	f023 010f 	bic.w	r1, r3, #15
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	0c1a      	lsrs	r2, r3, #16
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	430a      	orrs	r2, r1
 80048f4:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	0c1b      	lsrs	r3, r3, #16
 80048fe:	041b      	lsls	r3, r3, #16
 8004900:	68fa      	ldr	r2, [r7, #12]
 8004902:	b291      	uxth	r1, r2
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	6812      	ldr	r2, [r2, #0]
 8004908:	430b      	orrs	r3, r1
 800490a:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f000 fc57 	bl	80051c0 <RTC_ExitInitMode>
 8004912:	4603      	mov	r3, r0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d004      	beq.n	8004922 <HAL_RTC_Init+0x166>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2204      	movs	r2, #4
 800491c:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e00c      	b.n	800493c <HAL_RTC_Init+0x180>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2201      	movs	r2, #1
 8004932:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 800493a:	2300      	movs	r3, #0
  }
}
 800493c:	4618      	mov	r0, r3
 800493e:	3710      	adds	r7, #16
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}
 8004944:	40002800 	.word	0x40002800
 8004948:	0800bbc8 	.word	0x0800bbc8
 800494c:	40006c00 	.word	0x40006c00

08004950 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004950:	b590      	push	{r4, r7, lr}
 8004952:	b087      	sub	sp, #28
 8004954:	af00      	add	r7, sp, #0
 8004956:	60f8      	str	r0, [r7, #12]
 8004958:	60b9      	str	r1, [r7, #8]
 800495a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 800495c:	2300      	movs	r3, #0
 800495e:	617b      	str	r3, [r7, #20]
 8004960:	2300      	movs	r3, #0
 8004962:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d002      	beq.n	8004970 <HAL_RTC_SetTime+0x20>
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d101      	bne.n	8004974 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e0cd      	b.n	8004b10 <HAL_RTC_SetTime+0x1c0>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d007      	beq.n	800498a <HAL_RTC_SetTime+0x3a>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2b01      	cmp	r3, #1
 800497e:	d004      	beq.n	800498a <HAL_RTC_SetTime+0x3a>
 8004980:	f240 21ca 	movw	r1, #714	; 0x2ca
 8004984:	4864      	ldr	r0, [pc, #400]	; (8004b18 <HAL_RTC_SetTime+0x1c8>)
 8004986:	f7fc ff01 	bl	800178c <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	7c1b      	ldrb	r3, [r3, #16]
 800498e:	2b01      	cmp	r3, #1
 8004990:	d101      	bne.n	8004996 <HAL_RTC_SetTime+0x46>
 8004992:	2302      	movs	r3, #2
 8004994:	e0bc      	b.n	8004b10 <HAL_RTC_SetTime+0x1c0>
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2201      	movs	r2, #1
 800499a:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2202      	movs	r2, #2
 80049a0:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d12e      	bne.n	8004a06 <HAL_RTC_SetTime+0xb6>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	781b      	ldrb	r3, [r3, #0]
 80049ac:	2b17      	cmp	r3, #23
 80049ae:	d904      	bls.n	80049ba <HAL_RTC_SetTime+0x6a>
 80049b0:	f240 21d3 	movw	r1, #723	; 0x2d3
 80049b4:	4858      	ldr	r0, [pc, #352]	; (8004b18 <HAL_RTC_SetTime+0x1c8>)
 80049b6:	f7fc fee9 	bl	800178c <assert_failed>
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	785b      	ldrb	r3, [r3, #1]
 80049be:	2b3b      	cmp	r3, #59	; 0x3b
 80049c0:	d904      	bls.n	80049cc <HAL_RTC_SetTime+0x7c>
 80049c2:	f44f 7135 	mov.w	r1, #724	; 0x2d4
 80049c6:	4854      	ldr	r0, [pc, #336]	; (8004b18 <HAL_RTC_SetTime+0x1c8>)
 80049c8:	f7fc fee0 	bl	800178c <assert_failed>
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	789b      	ldrb	r3, [r3, #2]
 80049d0:	2b3b      	cmp	r3, #59	; 0x3b
 80049d2:	d904      	bls.n	80049de <HAL_RTC_SetTime+0x8e>
 80049d4:	f240 21d5 	movw	r1, #725	; 0x2d5
 80049d8:	484f      	ldr	r0, [pc, #316]	; (8004b18 <HAL_RTC_SetTime+0x1c8>)
 80049da:	f7fc fed7 	bl	800178c <assert_failed>

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	461a      	mov	r2, r3
 80049e4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80049e8:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	785b      	ldrb	r3, [r3, #1]
 80049f0:	4619      	mov	r1, r3
 80049f2:	460b      	mov	r3, r1
 80049f4:	011b      	lsls	r3, r3, #4
 80049f6:	1a5b      	subs	r3, r3, r1
 80049f8:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80049fa:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 80049fc:	68ba      	ldr	r2, [r7, #8]
 80049fe:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8004a00:	4413      	add	r3, r2
 8004a02:	617b      	str	r3, [r7, #20]
 8004a04:	e045      	b.n	8004a92 <HAL_RTC_SetTime+0x142>
  }
  else
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	781b      	ldrb	r3, [r3, #0]
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f000 fc1d 	bl	800524a <RTC_Bcd2ToByte>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b17      	cmp	r3, #23
 8004a14:	d904      	bls.n	8004a20 <HAL_RTC_SetTime+0xd0>
 8004a16:	f240 21dd 	movw	r1, #733	; 0x2dd
 8004a1a:	483f      	ldr	r0, [pc, #252]	; (8004b18 <HAL_RTC_SetTime+0x1c8>)
 8004a1c:	f7fc feb6 	bl	800178c <assert_failed>
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	785b      	ldrb	r3, [r3, #1]
 8004a24:	4618      	mov	r0, r3
 8004a26:	f000 fc10 	bl	800524a <RTC_Bcd2ToByte>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	2b3b      	cmp	r3, #59	; 0x3b
 8004a2e:	d904      	bls.n	8004a3a <HAL_RTC_SetTime+0xea>
 8004a30:	f240 21de 	movw	r1, #734	; 0x2de
 8004a34:	4838      	ldr	r0, [pc, #224]	; (8004b18 <HAL_RTC_SetTime+0x1c8>)
 8004a36:	f7fc fea9 	bl	800178c <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	789b      	ldrb	r3, [r3, #2]
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f000 fc03 	bl	800524a <RTC_Bcd2ToByte>
 8004a44:	4603      	mov	r3, r0
 8004a46:	2b3b      	cmp	r3, #59	; 0x3b
 8004a48:	d904      	bls.n	8004a54 <HAL_RTC_SetTime+0x104>
 8004a4a:	f240 21df 	movw	r1, #735	; 0x2df
 8004a4e:	4832      	ldr	r0, [pc, #200]	; (8004b18 <HAL_RTC_SetTime+0x1c8>)
 8004a50:	f7fc fe9c 	bl	800178c <assert_failed>

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f000 fbf6 	bl	800524a <RTC_Bcd2ToByte>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	461a      	mov	r2, r3
 8004a62:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004a66:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	785b      	ldrb	r3, [r3, #1]
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f000 fbeb 	bl	800524a <RTC_Bcd2ToByte>
 8004a74:	4603      	mov	r3, r0
 8004a76:	461a      	mov	r2, r3
 8004a78:	4613      	mov	r3, r2
 8004a7a:	011b      	lsls	r3, r3, #4
 8004a7c:	1a9b      	subs	r3, r3, r2
 8004a7e:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004a80:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	789b      	ldrb	r3, [r3, #2]
 8004a86:	4618      	mov	r0, r3
 8004a88:	f000 fbdf 	bl	800524a <RTC_Bcd2ToByte>
 8004a8c:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004a8e:	4423      	add	r3, r4
 8004a90:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004a92:	6979      	ldr	r1, [r7, #20]
 8004a94:	68f8      	ldr	r0, [r7, #12]
 8004a96:	f000 fb04 	bl	80050a2 <RTC_WriteTimeCounter>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d007      	beq.n	8004ab0 <HAL_RTC_SetTime+0x160>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2204      	movs	r2, #4
 8004aa4:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e02f      	b.n	8004b10 <HAL_RTC_SetTime+0x1c0>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	685a      	ldr	r2, [r3, #4]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f022 0205 	bic.w	r2, r2, #5
 8004abe:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004ac0:	68f8      	ldr	r0, [r7, #12]
 8004ac2:	f000 fb15 	bl	80050f0 <RTC_ReadAlarmCounter>
 8004ac6:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ace:	d018      	beq.n	8004b02 <HAL_RTC_SetTime+0x1b2>
    {
      if (counter_alarm < counter_time)
 8004ad0:	693a      	ldr	r2, [r7, #16]
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d214      	bcs.n	8004b02 <HAL_RTC_SetTime+0x1b2>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8004ade:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004ae2:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004ae4:	6939      	ldr	r1, [r7, #16]
 8004ae6:	68f8      	ldr	r0, [r7, #12]
 8004ae8:	f000 fb1b 	bl	8005122 <RTC_WriteAlarmCounter>
 8004aec:	4603      	mov	r3, r0
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d007      	beq.n	8004b02 <HAL_RTC_SetTime+0x1b2>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2204      	movs	r2, #4
 8004af6:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2200      	movs	r2, #0
 8004afc:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e006      	b.n	8004b10 <HAL_RTC_SetTime+0x1c0>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2201      	movs	r2, #1
 8004b06:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8004b0e:	2300      	movs	r3, #0
  }
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	371c      	adds	r7, #28
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd90      	pop	{r4, r7, pc}
 8004b18:	0800bbc8 	.word	0x0800bbc8

08004b1c <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b088      	sub	sp, #32
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	60f8      	str	r0, [r7, #12]
 8004b24:	60b9      	str	r1, [r7, #8]
 8004b26:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	61bb      	str	r3, [r7, #24]
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	61fb      	str	r3, [r7, #28]
 8004b30:	2300      	movs	r3, #0
 8004b32:	617b      	str	r3, [r7, #20]
 8004b34:	2300      	movs	r3, #0
 8004b36:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d002      	beq.n	8004b44 <HAL_RTC_GetTime+0x28>
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d101      	bne.n	8004b48 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	e0c0      	b.n	8004cca <HAL_RTC_GetTime+0x1ae>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d007      	beq.n	8004b5e <HAL_RTC_GetTime+0x42>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d004      	beq.n	8004b5e <HAL_RTC_GetTime+0x42>
 8004b54:	f240 312d 	movw	r1, #813	; 0x32d
 8004b58:	485e      	ldr	r0, [pc, #376]	; (8004cd4 <HAL_RTC_GetTime+0x1b8>)
 8004b5a:	f7fc fe17 	bl	800178c <assert_failed>

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	f003 0304 	and.w	r3, r3, #4
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d001      	beq.n	8004b70 <HAL_RTC_GetTime+0x54>
  {
    return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e0ac      	b.n	8004cca <HAL_RTC_GetTime+0x1ae>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8004b70:	68f8      	ldr	r0, [r7, #12]
 8004b72:	f000 fa66 	bl	8005042 <RTC_ReadTimeCounter>
 8004b76:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8004b78:	69bb      	ldr	r3, [r7, #24]
 8004b7a:	4a57      	ldr	r2, [pc, #348]	; (8004cd8 <HAL_RTC_GetTime+0x1bc>)
 8004b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b80:	0adb      	lsrs	r3, r3, #11
 8004b82:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8004b84:	69ba      	ldr	r2, [r7, #24]
 8004b86:	4b54      	ldr	r3, [pc, #336]	; (8004cd8 <HAL_RTC_GetTime+0x1bc>)
 8004b88:	fba3 1302 	umull	r1, r3, r3, r2
 8004b8c:	0adb      	lsrs	r3, r3, #11
 8004b8e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8004b92:	fb01 f303 	mul.w	r3, r1, r3
 8004b96:	1ad3      	subs	r3, r2, r3
 8004b98:	4a50      	ldr	r2, [pc, #320]	; (8004cdc <HAL_RTC_GetTime+0x1c0>)
 8004b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b9e:	095b      	lsrs	r3, r3, #5
 8004ba0:	b2da      	uxtb	r2, r3
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8004ba6:	69bb      	ldr	r3, [r7, #24]
 8004ba8:	4a4b      	ldr	r2, [pc, #300]	; (8004cd8 <HAL_RTC_GetTime+0x1bc>)
 8004baa:	fba2 1203 	umull	r1, r2, r2, r3
 8004bae:	0ad2      	lsrs	r2, r2, #11
 8004bb0:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8004bb4:	fb01 f202 	mul.w	r2, r1, r2
 8004bb8:	1a9a      	subs	r2, r3, r2
 8004bba:	4b48      	ldr	r3, [pc, #288]	; (8004cdc <HAL_RTC_GetTime+0x1c0>)
 8004bbc:	fba3 1302 	umull	r1, r3, r3, r2
 8004bc0:	0959      	lsrs	r1, r3, #5
 8004bc2:	460b      	mov	r3, r1
 8004bc4:	011b      	lsls	r3, r3, #4
 8004bc6:	1a5b      	subs	r3, r3, r1
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	1ad1      	subs	r1, r2, r3
 8004bcc:	b2ca      	uxtb	r2, r1
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	2b17      	cmp	r3, #23
 8004bd6:	d955      	bls.n	8004c84 <HAL_RTC_GetTime+0x168>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	4a41      	ldr	r2, [pc, #260]	; (8004ce0 <HAL_RTC_GetTime+0x1c4>)
 8004bdc:	fba2 2303 	umull	r2, r3, r2, r3
 8004be0:	091b      	lsrs	r3, r3, #4
 8004be2:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8004be4:	6939      	ldr	r1, [r7, #16]
 8004be6:	4b3e      	ldr	r3, [pc, #248]	; (8004ce0 <HAL_RTC_GetTime+0x1c4>)
 8004be8:	fba3 2301 	umull	r2, r3, r3, r1
 8004bec:	091a      	lsrs	r2, r3, #4
 8004bee:	4613      	mov	r3, r2
 8004bf0:	005b      	lsls	r3, r3, #1
 8004bf2:	4413      	add	r3, r2
 8004bf4:	00db      	lsls	r3, r3, #3
 8004bf6:	1aca      	subs	r2, r1, r3
 8004bf8:	b2d2      	uxtb	r2, r2
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004bfe:	68f8      	ldr	r0, [r7, #12]
 8004c00:	f000 fa76 	bl	80050f0 <RTC_ReadAlarmCounter>
 8004c04:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8004c06:	69fb      	ldr	r3, [r7, #28]
 8004c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c0c:	d008      	beq.n	8004c20 <HAL_RTC_GetTime+0x104>
 8004c0e:	69fa      	ldr	r2, [r7, #28]
 8004c10:	69bb      	ldr	r3, [r7, #24]
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d904      	bls.n	8004c20 <HAL_RTC_GetTime+0x104>
    {
      counter_alarm -= counter_time;
 8004c16:	69fa      	ldr	r2, [r7, #28]
 8004c18:	69bb      	ldr	r3, [r7, #24]
 8004c1a:	1ad3      	subs	r3, r2, r3
 8004c1c:	61fb      	str	r3, [r7, #28]
 8004c1e:	e002      	b.n	8004c26 <HAL_RTC_GetTime+0x10a>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8004c20:	f04f 33ff 	mov.w	r3, #4294967295
 8004c24:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	4a2e      	ldr	r2, [pc, #184]	; (8004ce4 <HAL_RTC_GetTime+0x1c8>)
 8004c2a:	fb02 f303 	mul.w	r3, r2, r3
 8004c2e:	69ba      	ldr	r2, [r7, #24]
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004c34:	69b9      	ldr	r1, [r7, #24]
 8004c36:	68f8      	ldr	r0, [r7, #12]
 8004c38:	f000 fa33 	bl	80050a2 <RTC_WriteTimeCounter>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d001      	beq.n	8004c46 <HAL_RTC_GetTime+0x12a>
    {
      return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e041      	b.n	8004cca <HAL_RTC_GetTime+0x1ae>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c4c:	d00c      	beq.n	8004c68 <HAL_RTC_GetTime+0x14c>
    {
      counter_alarm += counter_time;
 8004c4e:	69fa      	ldr	r2, [r7, #28]
 8004c50:	69bb      	ldr	r3, [r7, #24]
 8004c52:	4413      	add	r3, r2
 8004c54:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004c56:	69f9      	ldr	r1, [r7, #28]
 8004c58:	68f8      	ldr	r0, [r7, #12]
 8004c5a:	f000 fa62 	bl	8005122 <RTC_WriteAlarmCounter>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d00a      	beq.n	8004c7a <HAL_RTC_GetTime+0x15e>
      {
        return HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	e030      	b.n	8004cca <HAL_RTC_GetTime+0x1ae>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004c68:	69f9      	ldr	r1, [r7, #28]
 8004c6a:	68f8      	ldr	r0, [r7, #12]
 8004c6c:	f000 fa59 	bl	8005122 <RTC_WriteAlarmCounter>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d001      	beq.n	8004c7a <HAL_RTC_GetTime+0x15e>
      {
        return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e027      	b.n	8004cca <HAL_RTC_GetTime+0x1ae>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8004c7a:	6979      	ldr	r1, [r7, #20]
 8004c7c:	68f8      	ldr	r0, [r7, #12]
 8004c7e:	f000 fb01 	bl	8005284 <RTC_DateUpdate>
 8004c82:	e003      	b.n	8004c8c <HAL_RTC_GetTime+0x170>
  }
  else
  {
    sTime->Hours = hours;
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	b2da      	uxtb	r2, r3
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d01a      	beq.n	8004cc8 <HAL_RTC_GetTime+0x1ac>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	781b      	ldrb	r3, [r3, #0]
 8004c96:	4618      	mov	r0, r3
 8004c98:	f000 faba 	bl	8005210 <RTC_ByteToBcd2>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	785b      	ldrb	r3, [r3, #1]
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f000 fab1 	bl	8005210 <RTC_ByteToBcd2>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	789b      	ldrb	r3, [r3, #2]
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f000 faa8 	bl	8005210 <RTC_ByteToBcd2>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004cc8:	2300      	movs	r3, #0
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3720      	adds	r7, #32
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}
 8004cd2:	bf00      	nop
 8004cd4:	0800bbc8 	.word	0x0800bbc8
 8004cd8:	91a2b3c5 	.word	0x91a2b3c5
 8004cdc:	88888889 	.word	0x88888889
 8004ce0:	aaaaaaab 	.word	0xaaaaaaab
 8004ce4:	00015180 	.word	0x00015180

08004ce8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b088      	sub	sp, #32
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	60b9      	str	r1, [r7, #8]
 8004cf2:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	61fb      	str	r3, [r7, #28]
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	61bb      	str	r3, [r7, #24]
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d002      	beq.n	8004d0c <HAL_RTC_SetDate+0x24>
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d101      	bne.n	8004d10 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e0fc      	b.n	8004f0a <HAL_RTC_SetDate+0x222>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d007      	beq.n	8004d26 <HAL_RTC_SetDate+0x3e>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d004      	beq.n	8004d26 <HAL_RTC_SetDate+0x3e>
 8004d1c:	f44f 7167 	mov.w	r1, #924	; 0x39c
 8004d20:	487c      	ldr	r0, [pc, #496]	; (8004f14 <HAL_RTC_SetDate+0x22c>)
 8004d22:	f7fc fd33 	bl	800178c <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	7c1b      	ldrb	r3, [r3, #16]
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d101      	bne.n	8004d32 <HAL_RTC_SetDate+0x4a>
 8004d2e:	2302      	movs	r3, #2
 8004d30:	e0eb      	b.n	8004f0a <HAL_RTC_SetDate+0x222>
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2201      	movs	r2, #1
 8004d36:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2202      	movs	r2, #2
 8004d3c:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d12f      	bne.n	8004da4 <HAL_RTC_SetDate+0xbc>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	78db      	ldrb	r3, [r3, #3]
 8004d48:	2b63      	cmp	r3, #99	; 0x63
 8004d4a:	d904      	bls.n	8004d56 <HAL_RTC_SetDate+0x6e>
 8004d4c:	f240 31a5 	movw	r1, #933	; 0x3a5
 8004d50:	4870      	ldr	r0, [pc, #448]	; (8004f14 <HAL_RTC_SetDate+0x22c>)
 8004d52:	f7fc fd1b 	bl	800178c <assert_failed>
    assert_param(IS_RTC_MONTH(sDate->Month));
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	785b      	ldrb	r3, [r3, #1]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d003      	beq.n	8004d66 <HAL_RTC_SetDate+0x7e>
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	785b      	ldrb	r3, [r3, #1]
 8004d62:	2b0c      	cmp	r3, #12
 8004d64:	d904      	bls.n	8004d70 <HAL_RTC_SetDate+0x88>
 8004d66:	f240 31a6 	movw	r1, #934	; 0x3a6
 8004d6a:	486a      	ldr	r0, [pc, #424]	; (8004f14 <HAL_RTC_SetDate+0x22c>)
 8004d6c:	f7fc fd0e 	bl	800178c <assert_failed>
    assert_param(IS_RTC_DATE(sDate->Date));
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	789b      	ldrb	r3, [r3, #2]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d003      	beq.n	8004d80 <HAL_RTC_SetDate+0x98>
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	789b      	ldrb	r3, [r3, #2]
 8004d7c:	2b1f      	cmp	r3, #31
 8004d7e:	d904      	bls.n	8004d8a <HAL_RTC_SetDate+0xa2>
 8004d80:	f240 31a7 	movw	r1, #935	; 0x3a7
 8004d84:	4863      	ldr	r0, [pc, #396]	; (8004f14 <HAL_RTC_SetDate+0x22c>)
 8004d86:	f7fc fd01 	bl	800178c <assert_failed>

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	78da      	ldrb	r2, [r3, #3]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	785a      	ldrb	r2, [r3, #1]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	789a      	ldrb	r2, [r3, #2]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	739a      	strb	r2, [r3, #14]
 8004da2:	e051      	b.n	8004e48 <HAL_RTC_SetDate+0x160>
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	78db      	ldrb	r3, [r3, #3]
 8004da8:	4618      	mov	r0, r3
 8004daa:	f000 fa4e 	bl	800524a <RTC_Bcd2ToByte>
 8004dae:	4603      	mov	r3, r0
 8004db0:	2b63      	cmp	r3, #99	; 0x63
 8004db2:	d904      	bls.n	8004dbe <HAL_RTC_SetDate+0xd6>
 8004db4:	f44f 716c 	mov.w	r1, #944	; 0x3b0
 8004db8:	4856      	ldr	r0, [pc, #344]	; (8004f14 <HAL_RTC_SetDate+0x22c>)
 8004dba:	f7fc fce7 	bl	800178c <assert_failed>
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	785b      	ldrb	r3, [r3, #1]
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f000 fa41 	bl	800524a <RTC_Bcd2ToByte>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d007      	beq.n	8004dde <HAL_RTC_SetDate+0xf6>
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	785b      	ldrb	r3, [r3, #1]
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f000 fa39 	bl	800524a <RTC_Bcd2ToByte>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b0c      	cmp	r3, #12
 8004ddc:	d904      	bls.n	8004de8 <HAL_RTC_SetDate+0x100>
 8004dde:	f240 31b1 	movw	r1, #945	; 0x3b1
 8004de2:	484c      	ldr	r0, [pc, #304]	; (8004f14 <HAL_RTC_SetDate+0x22c>)
 8004de4:	f7fc fcd2 	bl	800178c <assert_failed>
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	789b      	ldrb	r3, [r3, #2]
 8004dec:	4618      	mov	r0, r3
 8004dee:	f000 fa2c 	bl	800524a <RTC_Bcd2ToByte>
 8004df2:	4603      	mov	r3, r0
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d007      	beq.n	8004e08 <HAL_RTC_SetDate+0x120>
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	789b      	ldrb	r3, [r3, #2]
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f000 fa24 	bl	800524a <RTC_Bcd2ToByte>
 8004e02:	4603      	mov	r3, r0
 8004e04:	2b1f      	cmp	r3, #31
 8004e06:	d904      	bls.n	8004e12 <HAL_RTC_SetDate+0x12a>
 8004e08:	f240 31b2 	movw	r1, #946	; 0x3b2
 8004e0c:	4841      	ldr	r0, [pc, #260]	; (8004f14 <HAL_RTC_SetDate+0x22c>)
 8004e0e:	f7fc fcbd 	bl	800178c <assert_failed>

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	78db      	ldrb	r3, [r3, #3]
 8004e16:	4618      	mov	r0, r3
 8004e18:	f000 fa17 	bl	800524a <RTC_Bcd2ToByte>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	461a      	mov	r2, r3
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	785b      	ldrb	r3, [r3, #1]
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f000 fa0e 	bl	800524a <RTC_Bcd2ToByte>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	461a      	mov	r2, r3
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	789b      	ldrb	r3, [r3, #2]
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f000 fa05 	bl	800524a <RTC_Bcd2ToByte>
 8004e40:	4603      	mov	r3, r0
 8004e42:	461a      	mov	r2, r3
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	7bdb      	ldrb	r3, [r3, #15]
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	7b59      	ldrb	r1, [r3, #13]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	7b9b      	ldrb	r3, [r3, #14]
 8004e56:	461a      	mov	r2, r3
 8004e58:	f000 faf0 	bl	800543c <RTC_WeekDayNum>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	461a      	mov	r2, r3
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	7b1a      	ldrb	r2, [r3, #12]
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8004e6c:	68f8      	ldr	r0, [r7, #12]
 8004e6e:	f000 f8e8 	bl	8005042 <RTC_ReadTimeCounter>
 8004e72:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	4a28      	ldr	r2, [pc, #160]	; (8004f18 <HAL_RTC_SetDate+0x230>)
 8004e78:	fba2 2303 	umull	r2, r3, r2, r3
 8004e7c:	0adb      	lsrs	r3, r3, #11
 8004e7e:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	2b18      	cmp	r3, #24
 8004e84:	d93a      	bls.n	8004efc <HAL_RTC_SetDate+0x214>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	4a24      	ldr	r2, [pc, #144]	; (8004f1c <HAL_RTC_SetDate+0x234>)
 8004e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e8e:	091b      	lsrs	r3, r3, #4
 8004e90:	4a23      	ldr	r2, [pc, #140]	; (8004f20 <HAL_RTC_SetDate+0x238>)
 8004e92:	fb02 f303 	mul.w	r3, r2, r3
 8004e96:	69fa      	ldr	r2, [r7, #28]
 8004e98:	1ad3      	subs	r3, r2, r3
 8004e9a:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004e9c:	69f9      	ldr	r1, [r7, #28]
 8004e9e:	68f8      	ldr	r0, [r7, #12]
 8004ea0:	f000 f8ff 	bl	80050a2 <RTC_WriteTimeCounter>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d007      	beq.n	8004eba <HAL_RTC_SetDate+0x1d2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2204      	movs	r2, #4
 8004eae:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e027      	b.n	8004f0a <HAL_RTC_SetDate+0x222>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004eba:	68f8      	ldr	r0, [r7, #12]
 8004ebc:	f000 f918 	bl	80050f0 <RTC_ReadAlarmCounter>
 8004ec0:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004ec2:	69bb      	ldr	r3, [r7, #24]
 8004ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ec8:	d018      	beq.n	8004efc <HAL_RTC_SetDate+0x214>
    {
      if (counter_alarm < counter_time)
 8004eca:	69ba      	ldr	r2, [r7, #24]
 8004ecc:	69fb      	ldr	r3, [r7, #28]
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d214      	bcs.n	8004efc <HAL_RTC_SetDate+0x214>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8004ed2:	69bb      	ldr	r3, [r7, #24]
 8004ed4:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8004ed8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004edc:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004ede:	69b9      	ldr	r1, [r7, #24]
 8004ee0:	68f8      	ldr	r0, [r7, #12]
 8004ee2:	f000 f91e 	bl	8005122 <RTC_WriteAlarmCounter>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d007      	beq.n	8004efc <HAL_RTC_SetDate+0x214>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2204      	movs	r2, #4
 8004ef0:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	e006      	b.n	8004f0a <HAL_RTC_SetDate+0x222>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2201      	movs	r2, #1
 8004f00:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2200      	movs	r2, #0
 8004f06:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004f08:	2300      	movs	r3, #0
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3720      	adds	r7, #32
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	bf00      	nop
 8004f14:	0800bbc8 	.word	0x0800bbc8
 8004f18:	91a2b3c5 	.word	0x91a2b3c5
 8004f1c:	aaaaaaab 	.word	0xaaaaaaab
 8004f20:	00015180 	.word	0x00015180

08004f24 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b086      	sub	sp, #24
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	60b9      	str	r1, [r7, #8]
 8004f2e:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 8004f30:	f107 0314 	add.w	r3, r7, #20
 8004f34:	2100      	movs	r1, #0
 8004f36:	460a      	mov	r2, r1
 8004f38:	801a      	strh	r2, [r3, #0]
 8004f3a:	460a      	mov	r2, r1
 8004f3c:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d002      	beq.n	8004f4a <HAL_RTC_GetDate+0x26>
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d101      	bne.n	8004f4e <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e045      	b.n	8004fda <HAL_RTC_GetDate+0xb6>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d007      	beq.n	8004f64 <HAL_RTC_GetDate+0x40>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d004      	beq.n	8004f64 <HAL_RTC_GetDate+0x40>
 8004f5a:	f240 410e 	movw	r1, #1038	; 0x40e
 8004f5e:	4821      	ldr	r0, [pc, #132]	; (8004fe4 <HAL_RTC_GetDate+0xc0>)
 8004f60:	f7fc fc14 	bl	800178c <assert_failed>

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8004f64:	f107 0314 	add.w	r3, r7, #20
 8004f68:	2200      	movs	r2, #0
 8004f6a:	4619      	mov	r1, r3
 8004f6c:	68f8      	ldr	r0, [r7, #12]
 8004f6e:	f7ff fdd5 	bl	8004b1c <HAL_RTC_GetTime>
 8004f72:	4603      	mov	r3, r0
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d001      	beq.n	8004f7c <HAL_RTC_GetDate+0x58>
  {
    return HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e02e      	b.n	8004fda <HAL_RTC_GetDate+0xb6>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	7b1a      	ldrb	r2, [r3, #12]
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	7bda      	ldrb	r2, [r3, #15]
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	7b5a      	ldrb	r2, [r3, #13]
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	7b9a      	ldrb	r2, [r3, #14]
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d01a      	beq.n	8004fd8 <HAL_RTC_GetDate+0xb4>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	78db      	ldrb	r3, [r3, #3]
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f000 f932 	bl	8005210 <RTC_ByteToBcd2>
 8004fac:	4603      	mov	r3, r0
 8004fae:	461a      	mov	r2, r3
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	785b      	ldrb	r3, [r3, #1]
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f000 f929 	bl	8005210 <RTC_ByteToBcd2>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	461a      	mov	r2, r3
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	789b      	ldrb	r3, [r3, #2]
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f000 f920 	bl	8005210 <RTC_ByteToBcd2>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004fd8:	2300      	movs	r3, #0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3718      	adds	r7, #24
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	0800bbc8 	.word	0x0800bbc8

08004fe8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b084      	sub	sp, #16
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d101      	bne.n	8004ffe <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e01d      	b.n	800503a <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	685a      	ldr	r2, [r3, #4]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f022 0208 	bic.w	r2, r2, #8
 800500c:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800500e:	f7fd f86d 	bl	80020ec <HAL_GetTick>
 8005012:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8005014:	e009      	b.n	800502a <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005016:	f7fd f869 	bl	80020ec <HAL_GetTick>
 800501a:	4602      	mov	r2, r0
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	1ad3      	subs	r3, r2, r3
 8005020:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005024:	d901      	bls.n	800502a <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8005026:	2303      	movs	r3, #3
 8005028:	e007      	b.n	800503a <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	f003 0308 	and.w	r3, r3, #8
 8005034:	2b00      	cmp	r3, #0
 8005036:	d0ee      	beq.n	8005016 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8005038:	2300      	movs	r3, #0
}
 800503a:	4618      	mov	r0, r3
 800503c:	3710      	adds	r7, #16
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}

08005042 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8005042:	b480      	push	{r7}
 8005044:	b087      	sub	sp, #28
 8005046:	af00      	add	r7, sp, #0
 8005048:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 800504a:	2300      	movs	r3, #0
 800504c:	827b      	strh	r3, [r7, #18]
 800504e:	2300      	movs	r3, #0
 8005050:	823b      	strh	r3, [r7, #16]
 8005052:	2300      	movs	r3, #0
 8005054:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8005056:	2300      	movs	r3, #0
 8005058:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	699b      	ldr	r3, [r3, #24]
 8005060:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	69db      	ldr	r3, [r3, #28]
 8005068:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	699b      	ldr	r3, [r3, #24]
 8005070:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8005072:	8a7a      	ldrh	r2, [r7, #18]
 8005074:	8a3b      	ldrh	r3, [r7, #16]
 8005076:	429a      	cmp	r2, r3
 8005078:	d008      	beq.n	800508c <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 800507a:	8a3b      	ldrh	r3, [r7, #16]
 800507c:	041a      	lsls	r2, r3, #16
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	69db      	ldr	r3, [r3, #28]
 8005084:	b29b      	uxth	r3, r3
 8005086:	4313      	orrs	r3, r2
 8005088:	617b      	str	r3, [r7, #20]
 800508a:	e004      	b.n	8005096 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 800508c:	8a7b      	ldrh	r3, [r7, #18]
 800508e:	041a      	lsls	r2, r3, #16
 8005090:	89fb      	ldrh	r3, [r7, #14]
 8005092:	4313      	orrs	r3, r2
 8005094:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8005096:	697b      	ldr	r3, [r7, #20]
}
 8005098:	4618      	mov	r0, r3
 800509a:	371c      	adds	r7, #28
 800509c:	46bd      	mov	sp, r7
 800509e:	bc80      	pop	{r7}
 80050a0:	4770      	bx	lr

080050a2 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 80050a2:	b580      	push	{r7, lr}
 80050a4:	b084      	sub	sp, #16
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	6078      	str	r0, [r7, #4]
 80050aa:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050ac:	2300      	movs	r3, #0
 80050ae:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f000 f85d 	bl	8005170 <RTC_EnterInitMode>
 80050b6:	4603      	mov	r3, r0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d002      	beq.n	80050c2 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	73fb      	strb	r3, [r7, #15]
 80050c0:	e011      	b.n	80050e6 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	683a      	ldr	r2, [r7, #0]
 80050c8:	0c12      	lsrs	r2, r2, #16
 80050ca:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	683a      	ldr	r2, [r7, #0]
 80050d2:	b292      	uxth	r2, r2
 80050d4:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f000 f872 	bl	80051c0 <RTC_ExitInitMode>
 80050dc:	4603      	mov	r3, r0
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d001      	beq.n	80050e6 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80050e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3710      	adds	r7, #16
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}

080050f0 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b085      	sub	sp, #20
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 80050f8:	2300      	movs	r3, #0
 80050fa:	81fb      	strh	r3, [r7, #14]
 80050fc:	2300      	movs	r3, #0
 80050fe:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	6a1b      	ldr	r3, [r3, #32]
 8005106:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510e:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8005110:	89fb      	ldrh	r3, [r7, #14]
 8005112:	041a      	lsls	r2, r3, #16
 8005114:	89bb      	ldrh	r3, [r7, #12]
 8005116:	4313      	orrs	r3, r2
}
 8005118:	4618      	mov	r0, r3
 800511a:	3714      	adds	r7, #20
 800511c:	46bd      	mov	sp, r7
 800511e:	bc80      	pop	{r7}
 8005120:	4770      	bx	lr

08005122 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8005122:	b580      	push	{r7, lr}
 8005124:	b084      	sub	sp, #16
 8005126:	af00      	add	r7, sp, #0
 8005128:	6078      	str	r0, [r7, #4]
 800512a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800512c:	2300      	movs	r3, #0
 800512e:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f000 f81d 	bl	8005170 <RTC_EnterInitMode>
 8005136:	4603      	mov	r3, r0
 8005138:	2b00      	cmp	r3, #0
 800513a:	d002      	beq.n	8005142 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	73fb      	strb	r3, [r7, #15]
 8005140:	e011      	b.n	8005166 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	683a      	ldr	r2, [r7, #0]
 8005148:	0c12      	lsrs	r2, r2, #16
 800514a:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	683a      	ldr	r2, [r7, #0]
 8005152:	b292      	uxth	r2, r2
 8005154:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f000 f832 	bl	80051c0 <RTC_ExitInitMode>
 800515c:	4603      	mov	r3, r0
 800515e:	2b00      	cmp	r3, #0
 8005160:	d001      	beq.n	8005166 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005166:	7bfb      	ldrb	r3, [r7, #15]
}
 8005168:	4618      	mov	r0, r3
 800516a:	3710      	adds	r7, #16
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}

08005170 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b084      	sub	sp, #16
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005178:	2300      	movs	r3, #0
 800517a:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 800517c:	f7fc ffb6 	bl	80020ec <HAL_GetTick>
 8005180:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005182:	e009      	b.n	8005198 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005184:	f7fc ffb2 	bl	80020ec <HAL_GetTick>
 8005188:	4602      	mov	r2, r0
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005192:	d901      	bls.n	8005198 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8005194:	2303      	movs	r3, #3
 8005196:	e00f      	b.n	80051b8 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	f003 0320 	and.w	r3, r3, #32
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d0ee      	beq.n	8005184 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	685a      	ldr	r2, [r3, #4]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f042 0210 	orr.w	r2, r2, #16
 80051b4:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 80051b6:	2300      	movs	r3, #0
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	3710      	adds	r7, #16
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}

080051c0 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b084      	sub	sp, #16
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80051c8:	2300      	movs	r3, #0
 80051ca:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	685a      	ldr	r2, [r3, #4]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f022 0210 	bic.w	r2, r2, #16
 80051da:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80051dc:	f7fc ff86 	bl	80020ec <HAL_GetTick>
 80051e0:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80051e2:	e009      	b.n	80051f8 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80051e4:	f7fc ff82 	bl	80020ec <HAL_GetTick>
 80051e8:	4602      	mov	r2, r0
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80051f2:	d901      	bls.n	80051f8 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 80051f4:	2303      	movs	r3, #3
 80051f6:	e007      	b.n	8005208 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	f003 0320 	and.w	r3, r3, #32
 8005202:	2b00      	cmp	r3, #0
 8005204:	d0ee      	beq.n	80051e4 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8005206:	2300      	movs	r3, #0
}
 8005208:	4618      	mov	r0, r3
 800520a:	3710      	adds	r7, #16
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}

08005210 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005210:	b480      	push	{r7}
 8005212:	b085      	sub	sp, #20
 8005214:	af00      	add	r7, sp, #0
 8005216:	4603      	mov	r3, r0
 8005218:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800521a:	2300      	movs	r3, #0
 800521c:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 800521e:	e005      	b.n	800522c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	3301      	adds	r3, #1
 8005224:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8005226:	79fb      	ldrb	r3, [r7, #7]
 8005228:	3b0a      	subs	r3, #10
 800522a:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 800522c:	79fb      	ldrb	r3, [r7, #7]
 800522e:	2b09      	cmp	r3, #9
 8005230:	d8f6      	bhi.n	8005220 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	b2db      	uxtb	r3, r3
 8005236:	011b      	lsls	r3, r3, #4
 8005238:	b2da      	uxtb	r2, r3
 800523a:	79fb      	ldrb	r3, [r7, #7]
 800523c:	4313      	orrs	r3, r2
 800523e:	b2db      	uxtb	r3, r3
}
 8005240:	4618      	mov	r0, r3
 8005242:	3714      	adds	r7, #20
 8005244:	46bd      	mov	sp, r7
 8005246:	bc80      	pop	{r7}
 8005248:	4770      	bx	lr

0800524a <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800524a:	b480      	push	{r7}
 800524c:	b085      	sub	sp, #20
 800524e:	af00      	add	r7, sp, #0
 8005250:	4603      	mov	r3, r0
 8005252:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8005254:	2300      	movs	r3, #0
 8005256:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8005258:	79fb      	ldrb	r3, [r7, #7]
 800525a:	091b      	lsrs	r3, r3, #4
 800525c:	b2db      	uxtb	r3, r3
 800525e:	461a      	mov	r2, r3
 8005260:	4613      	mov	r3, r2
 8005262:	009b      	lsls	r3, r3, #2
 8005264:	4413      	add	r3, r2
 8005266:	005b      	lsls	r3, r3, #1
 8005268:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800526a:	79fb      	ldrb	r3, [r7, #7]
 800526c:	f003 030f 	and.w	r3, r3, #15
 8005270:	b2da      	uxtb	r2, r3
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	b2db      	uxtb	r3, r3
 8005276:	4413      	add	r3, r2
 8005278:	b2db      	uxtb	r3, r3
}
 800527a:	4618      	mov	r0, r3
 800527c:	3714      	adds	r7, #20
 800527e:	46bd      	mov	sp, r7
 8005280:	bc80      	pop	{r7}
 8005282:	4770      	bx	lr

08005284 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b086      	sub	sp, #24
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 800528e:	2300      	movs	r3, #0
 8005290:	617b      	str	r3, [r7, #20]
 8005292:	2300      	movs	r3, #0
 8005294:	613b      	str	r3, [r7, #16]
 8005296:	2300      	movs	r3, #0
 8005298:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 800529a:	2300      	movs	r3, #0
 800529c:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	7bdb      	ldrb	r3, [r3, #15]
 80052a2:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	7b5b      	ldrb	r3, [r3, #13]
 80052a8:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	7b9b      	ldrb	r3, [r3, #14]
 80052ae:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 80052b0:	2300      	movs	r3, #0
 80052b2:	60bb      	str	r3, [r7, #8]
 80052b4:	e06f      	b.n	8005396 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d011      	beq.n	80052e0 <RTC_DateUpdate+0x5c>
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	2b03      	cmp	r3, #3
 80052c0:	d00e      	beq.n	80052e0 <RTC_DateUpdate+0x5c>
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	2b05      	cmp	r3, #5
 80052c6:	d00b      	beq.n	80052e0 <RTC_DateUpdate+0x5c>
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	2b07      	cmp	r3, #7
 80052cc:	d008      	beq.n	80052e0 <RTC_DateUpdate+0x5c>
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	2b08      	cmp	r3, #8
 80052d2:	d005      	beq.n	80052e0 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	2b0a      	cmp	r3, #10
 80052d8:	d002      	beq.n	80052e0 <RTC_DateUpdate+0x5c>
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	2b0c      	cmp	r3, #12
 80052de:	d117      	bne.n	8005310 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2b1e      	cmp	r3, #30
 80052e4:	d803      	bhi.n	80052ee <RTC_DateUpdate+0x6a>
      {
        day++;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	3301      	adds	r3, #1
 80052ea:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80052ec:	e050      	b.n	8005390 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	2b0c      	cmp	r3, #12
 80052f2:	d005      	beq.n	8005300 <RTC_DateUpdate+0x7c>
        {
          month++;
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	3301      	adds	r3, #1
 80052f8:	613b      	str	r3, [r7, #16]
          day = 1U;
 80052fa:	2301      	movs	r3, #1
 80052fc:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80052fe:	e047      	b.n	8005390 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8005300:	2301      	movs	r3, #1
 8005302:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005304:	2301      	movs	r3, #1
 8005306:	60fb      	str	r3, [r7, #12]
          year++;
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	3301      	adds	r3, #1
 800530c:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 800530e:	e03f      	b.n	8005390 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	2b04      	cmp	r3, #4
 8005314:	d008      	beq.n	8005328 <RTC_DateUpdate+0xa4>
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	2b06      	cmp	r3, #6
 800531a:	d005      	beq.n	8005328 <RTC_DateUpdate+0xa4>
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	2b09      	cmp	r3, #9
 8005320:	d002      	beq.n	8005328 <RTC_DateUpdate+0xa4>
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	2b0b      	cmp	r3, #11
 8005326:	d10c      	bne.n	8005342 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2b1d      	cmp	r3, #29
 800532c:	d803      	bhi.n	8005336 <RTC_DateUpdate+0xb2>
      {
        day++;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	3301      	adds	r3, #1
 8005332:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8005334:	e02c      	b.n	8005390 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	3301      	adds	r3, #1
 800533a:	613b      	str	r3, [r7, #16]
        day = 1U;
 800533c:	2301      	movs	r3, #1
 800533e:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8005340:	e026      	b.n	8005390 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	2b02      	cmp	r3, #2
 8005346:	d123      	bne.n	8005390 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2b1b      	cmp	r3, #27
 800534c:	d803      	bhi.n	8005356 <RTC_DateUpdate+0xd2>
      {
        day++;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	3301      	adds	r3, #1
 8005352:	60fb      	str	r3, [r7, #12]
 8005354:	e01c      	b.n	8005390 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2b1c      	cmp	r3, #28
 800535a:	d111      	bne.n	8005380 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	b29b      	uxth	r3, r3
 8005360:	4618      	mov	r0, r3
 8005362:	f000 f839 	bl	80053d8 <RTC_IsLeapYear>
 8005366:	4603      	mov	r3, r0
 8005368:	2b00      	cmp	r3, #0
 800536a:	d003      	beq.n	8005374 <RTC_DateUpdate+0xf0>
        {
          day++;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	3301      	adds	r3, #1
 8005370:	60fb      	str	r3, [r7, #12]
 8005372:	e00d      	b.n	8005390 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	3301      	adds	r3, #1
 8005378:	613b      	str	r3, [r7, #16]
          day = 1U;
 800537a:	2301      	movs	r3, #1
 800537c:	60fb      	str	r3, [r7, #12]
 800537e:	e007      	b.n	8005390 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2b1d      	cmp	r3, #29
 8005384:	d104      	bne.n	8005390 <RTC_DateUpdate+0x10c>
      {
        month++;
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	3301      	adds	r3, #1
 800538a:	613b      	str	r3, [r7, #16]
        day = 1U;
 800538c:	2301      	movs	r3, #1
 800538e:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	3301      	adds	r3, #1
 8005394:	60bb      	str	r3, [r7, #8]
 8005396:	68ba      	ldr	r2, [r7, #8]
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	429a      	cmp	r2, r3
 800539c:	d38b      	bcc.n	80052b6 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	b2da      	uxtb	r2, r3
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	b2da      	uxtb	r2, r3
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	b2da      	uxtb	r2, r3
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	68fa      	ldr	r2, [r7, #12]
 80053bc:	b2d2      	uxtb	r2, r2
 80053be:	4619      	mov	r1, r3
 80053c0:	6978      	ldr	r0, [r7, #20]
 80053c2:	f000 f83b 	bl	800543c <RTC_WeekDayNum>
 80053c6:	4603      	mov	r3, r0
 80053c8:	461a      	mov	r2, r3
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	731a      	strb	r2, [r3, #12]
}
 80053ce:	bf00      	nop
 80053d0:	3718      	adds	r7, #24
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
	...

080053d8 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 80053d8:	b480      	push	{r7}
 80053da:	b083      	sub	sp, #12
 80053dc:	af00      	add	r7, sp, #0
 80053de:	4603      	mov	r3, r0
 80053e0:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 80053e2:	88fb      	ldrh	r3, [r7, #6]
 80053e4:	f003 0303 	and.w	r3, r3, #3
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d001      	beq.n	80053f2 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 80053ee:	2300      	movs	r3, #0
 80053f0:	e01d      	b.n	800542e <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 80053f2:	88fb      	ldrh	r3, [r7, #6]
 80053f4:	4a10      	ldr	r2, [pc, #64]	; (8005438 <RTC_IsLeapYear+0x60>)
 80053f6:	fba2 1203 	umull	r1, r2, r2, r3
 80053fa:	0952      	lsrs	r2, r2, #5
 80053fc:	2164      	movs	r1, #100	; 0x64
 80053fe:	fb01 f202 	mul.w	r2, r1, r2
 8005402:	1a9b      	subs	r3, r3, r2
 8005404:	b29b      	uxth	r3, r3
 8005406:	2b00      	cmp	r3, #0
 8005408:	d001      	beq.n	800540e <RTC_IsLeapYear+0x36>
  {
    return 1U;
 800540a:	2301      	movs	r3, #1
 800540c:	e00f      	b.n	800542e <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 800540e:	88fb      	ldrh	r3, [r7, #6]
 8005410:	4a09      	ldr	r2, [pc, #36]	; (8005438 <RTC_IsLeapYear+0x60>)
 8005412:	fba2 1203 	umull	r1, r2, r2, r3
 8005416:	09d2      	lsrs	r2, r2, #7
 8005418:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800541c:	fb01 f202 	mul.w	r2, r1, r2
 8005420:	1a9b      	subs	r3, r3, r2
 8005422:	b29b      	uxth	r3, r3
 8005424:	2b00      	cmp	r3, #0
 8005426:	d101      	bne.n	800542c <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8005428:	2301      	movs	r3, #1
 800542a:	e000      	b.n	800542e <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 800542c:	2300      	movs	r3, #0
  }
}
 800542e:	4618      	mov	r0, r3
 8005430:	370c      	adds	r7, #12
 8005432:	46bd      	mov	sp, r7
 8005434:	bc80      	pop	{r7}
 8005436:	4770      	bx	lr
 8005438:	51eb851f 	.word	0x51eb851f

0800543c <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 800543c:	b480      	push	{r7}
 800543e:	b085      	sub	sp, #20
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	460b      	mov	r3, r1
 8005446:	70fb      	strb	r3, [r7, #3]
 8005448:	4613      	mov	r3, r2
 800544a:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 800544c:	2300      	movs	r3, #0
 800544e:	60bb      	str	r3, [r7, #8]
 8005450:	2300      	movs	r3, #0
 8005452:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800545a:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 800545c:	78fb      	ldrb	r3, [r7, #3]
 800545e:	2b02      	cmp	r3, #2
 8005460:	d82d      	bhi.n	80054be <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8005462:	78fa      	ldrb	r2, [r7, #3]
 8005464:	4613      	mov	r3, r2
 8005466:	005b      	lsls	r3, r3, #1
 8005468:	4413      	add	r3, r2
 800546a:	00db      	lsls	r3, r3, #3
 800546c:	1a9b      	subs	r3, r3, r2
 800546e:	4a2c      	ldr	r2, [pc, #176]	; (8005520 <RTC_WeekDayNum+0xe4>)
 8005470:	fba2 2303 	umull	r2, r3, r2, r3
 8005474:	085a      	lsrs	r2, r3, #1
 8005476:	78bb      	ldrb	r3, [r7, #2]
 8005478:	441a      	add	r2, r3
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	441a      	add	r2, r3
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	3b01      	subs	r3, #1
 8005482:	089b      	lsrs	r3, r3, #2
 8005484:	441a      	add	r2, r3
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	3b01      	subs	r3, #1
 800548a:	4926      	ldr	r1, [pc, #152]	; (8005524 <RTC_WeekDayNum+0xe8>)
 800548c:	fba1 1303 	umull	r1, r3, r1, r3
 8005490:	095b      	lsrs	r3, r3, #5
 8005492:	1ad2      	subs	r2, r2, r3
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	3b01      	subs	r3, #1
 8005498:	4922      	ldr	r1, [pc, #136]	; (8005524 <RTC_WeekDayNum+0xe8>)
 800549a:	fba1 1303 	umull	r1, r3, r1, r3
 800549e:	09db      	lsrs	r3, r3, #7
 80054a0:	4413      	add	r3, r2
 80054a2:	1d1a      	adds	r2, r3, #4
 80054a4:	4b20      	ldr	r3, [pc, #128]	; (8005528 <RTC_WeekDayNum+0xec>)
 80054a6:	fba3 1302 	umull	r1, r3, r3, r2
 80054aa:	1ad1      	subs	r1, r2, r3
 80054ac:	0849      	lsrs	r1, r1, #1
 80054ae:	440b      	add	r3, r1
 80054b0:	0899      	lsrs	r1, r3, #2
 80054b2:	460b      	mov	r3, r1
 80054b4:	00db      	lsls	r3, r3, #3
 80054b6:	1a5b      	subs	r3, r3, r1
 80054b8:	1ad3      	subs	r3, r2, r3
 80054ba:	60fb      	str	r3, [r7, #12]
 80054bc:	e029      	b.n	8005512 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 80054be:	78fa      	ldrb	r2, [r7, #3]
 80054c0:	4613      	mov	r3, r2
 80054c2:	005b      	lsls	r3, r3, #1
 80054c4:	4413      	add	r3, r2
 80054c6:	00db      	lsls	r3, r3, #3
 80054c8:	1a9b      	subs	r3, r3, r2
 80054ca:	4a15      	ldr	r2, [pc, #84]	; (8005520 <RTC_WeekDayNum+0xe4>)
 80054cc:	fba2 2303 	umull	r2, r3, r2, r3
 80054d0:	085a      	lsrs	r2, r3, #1
 80054d2:	78bb      	ldrb	r3, [r7, #2]
 80054d4:	441a      	add	r2, r3
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	441a      	add	r2, r3
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	089b      	lsrs	r3, r3, #2
 80054de:	441a      	add	r2, r3
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	4910      	ldr	r1, [pc, #64]	; (8005524 <RTC_WeekDayNum+0xe8>)
 80054e4:	fba1 1303 	umull	r1, r3, r1, r3
 80054e8:	095b      	lsrs	r3, r3, #5
 80054ea:	1ad2      	subs	r2, r2, r3
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	490d      	ldr	r1, [pc, #52]	; (8005524 <RTC_WeekDayNum+0xe8>)
 80054f0:	fba1 1303 	umull	r1, r3, r1, r3
 80054f4:	09db      	lsrs	r3, r3, #7
 80054f6:	4413      	add	r3, r2
 80054f8:	1c9a      	adds	r2, r3, #2
 80054fa:	4b0b      	ldr	r3, [pc, #44]	; (8005528 <RTC_WeekDayNum+0xec>)
 80054fc:	fba3 1302 	umull	r1, r3, r3, r2
 8005500:	1ad1      	subs	r1, r2, r3
 8005502:	0849      	lsrs	r1, r1, #1
 8005504:	440b      	add	r3, r1
 8005506:	0899      	lsrs	r1, r3, #2
 8005508:	460b      	mov	r3, r1
 800550a:	00db      	lsls	r3, r3, #3
 800550c:	1a5b      	subs	r3, r3, r1
 800550e:	1ad3      	subs	r3, r2, r3
 8005510:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	b2db      	uxtb	r3, r3
}
 8005516:	4618      	mov	r0, r3
 8005518:	3714      	adds	r7, #20
 800551a:	46bd      	mov	sp, r7
 800551c:	bc80      	pop	{r7}
 800551e:	4770      	bx	lr
 8005520:	38e38e39 	.word	0x38e38e39
 8005524:	51eb851f 	.word	0x51eb851f
 8005528:	24924925 	.word	0x24924925

0800552c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b082      	sub	sp, #8
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d101      	bne.n	800553e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	e0b2      	b.n	80056a4 <HAL_TIM_Base_Init+0x178>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a5a      	ldr	r2, [pc, #360]	; (80056ac <HAL_TIM_Base_Init+0x180>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d027      	beq.n	8005598 <HAL_TIM_Base_Init+0x6c>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a58      	ldr	r2, [pc, #352]	; (80056b0 <HAL_TIM_Base_Init+0x184>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d022      	beq.n	8005598 <HAL_TIM_Base_Init+0x6c>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800555a:	d01d      	beq.n	8005598 <HAL_TIM_Base_Init+0x6c>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a54      	ldr	r2, [pc, #336]	; (80056b4 <HAL_TIM_Base_Init+0x188>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d018      	beq.n	8005598 <HAL_TIM_Base_Init+0x6c>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a53      	ldr	r2, [pc, #332]	; (80056b8 <HAL_TIM_Base_Init+0x18c>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d013      	beq.n	8005598 <HAL_TIM_Base_Init+0x6c>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a51      	ldr	r2, [pc, #324]	; (80056bc <HAL_TIM_Base_Init+0x190>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d00e      	beq.n	8005598 <HAL_TIM_Base_Init+0x6c>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a50      	ldr	r2, [pc, #320]	; (80056c0 <HAL_TIM_Base_Init+0x194>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d009      	beq.n	8005598 <HAL_TIM_Base_Init+0x6c>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a4e      	ldr	r2, [pc, #312]	; (80056c4 <HAL_TIM_Base_Init+0x198>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d004      	beq.n	8005598 <HAL_TIM_Base_Init+0x6c>
 800558e:	f240 1113 	movw	r1, #275	; 0x113
 8005592:	484d      	ldr	r0, [pc, #308]	; (80056c8 <HAL_TIM_Base_Init+0x19c>)
 8005594:	f7fc f8fa 	bl	800178c <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d014      	beq.n	80055ca <HAL_TIM_Base_Init+0x9e>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	2b10      	cmp	r3, #16
 80055a6:	d010      	beq.n	80055ca <HAL_TIM_Base_Init+0x9e>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	2b20      	cmp	r3, #32
 80055ae:	d00c      	beq.n	80055ca <HAL_TIM_Base_Init+0x9e>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	2b40      	cmp	r3, #64	; 0x40
 80055b6:	d008      	beq.n	80055ca <HAL_TIM_Base_Init+0x9e>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	2b60      	cmp	r3, #96	; 0x60
 80055be:	d004      	beq.n	80055ca <HAL_TIM_Base_Init+0x9e>
 80055c0:	f44f 718a 	mov.w	r1, #276	; 0x114
 80055c4:	4840      	ldr	r0, [pc, #256]	; (80056c8 <HAL_TIM_Base_Init+0x19c>)
 80055c6:	f7fc f8e1 	bl	800178c <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d00e      	beq.n	80055f0 <HAL_TIM_Base_Init+0xc4>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	691b      	ldr	r3, [r3, #16]
 80055d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055da:	d009      	beq.n	80055f0 <HAL_TIM_Base_Init+0xc4>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	691b      	ldr	r3, [r3, #16]
 80055e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055e4:	d004      	beq.n	80055f0 <HAL_TIM_Base_Init+0xc4>
 80055e6:	f240 1115 	movw	r1, #277	; 0x115
 80055ea:	4837      	ldr	r0, [pc, #220]	; (80056c8 <HAL_TIM_Base_Init+0x19c>)
 80055ec:	f7fc f8ce 	bl	800178c <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	699b      	ldr	r3, [r3, #24]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d008      	beq.n	800560a <HAL_TIM_Base_Init+0xde>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	699b      	ldr	r3, [r3, #24]
 80055fc:	2b80      	cmp	r3, #128	; 0x80
 80055fe:	d004      	beq.n	800560a <HAL_TIM_Base_Init+0xde>
 8005600:	f44f 718b 	mov.w	r1, #278	; 0x116
 8005604:	4830      	ldr	r0, [pc, #192]	; (80056c8 <HAL_TIM_Base_Init+0x19c>)
 8005606:	f7fc f8c1 	bl	800178c <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005610:	b2db      	uxtb	r3, r3
 8005612:	2b00      	cmp	r3, #0
 8005614:	d111      	bne.n	800563a <HAL_TIM_Base_Init+0x10e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2200      	movs	r2, #0
 800561a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f001 ffc0 	bl	80075a4 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005628:	2b00      	cmp	r3, #0
 800562a:	d102      	bne.n	8005632 <HAL_TIM_Base_Init+0x106>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	4a27      	ldr	r2, [pc, #156]	; (80056cc <HAL_TIM_Base_Init+0x1a0>)
 8005630:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2202      	movs	r2, #2
 800563e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	3304      	adds	r3, #4
 800564a:	4619      	mov	r1, r3
 800564c:	4610      	mov	r0, r2
 800564e:	f001 fbff 	bl	8006e50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2201      	movs	r2, #1
 8005656:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2201      	movs	r2, #1
 800565e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2201      	movs	r2, #1
 8005666:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2201      	movs	r2, #1
 800566e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2201      	movs	r2, #1
 8005676:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2201      	movs	r2, #1
 800567e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2201      	movs	r2, #1
 8005686:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2201      	movs	r2, #1
 800568e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2201      	movs	r2, #1
 8005696:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2201      	movs	r2, #1
 800569e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056a2:	2300      	movs	r3, #0
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3708      	adds	r7, #8
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}
 80056ac:	40012c00 	.word	0x40012c00
 80056b0:	40013400 	.word	0x40013400
 80056b4:	40000400 	.word	0x40000400
 80056b8:	40000800 	.word	0x40000800
 80056bc:	40000c00 	.word	0x40000c00
 80056c0:	40001000 	.word	0x40001000
 80056c4:	40001400 	.word	0x40001400
 80056c8:	0800bc00 	.word	0x0800bc00
 80056cc:	080018d5 	.word	0x080018d5

080056d0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b084      	sub	sp, #16
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a39      	ldr	r2, [pc, #228]	; (80057c4 <HAL_TIM_Base_Start+0xf4>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d027      	beq.n	8005732 <HAL_TIM_Base_Start+0x62>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a38      	ldr	r2, [pc, #224]	; (80057c8 <HAL_TIM_Base_Start+0xf8>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d022      	beq.n	8005732 <HAL_TIM_Base_Start+0x62>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056f4:	d01d      	beq.n	8005732 <HAL_TIM_Base_Start+0x62>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a34      	ldr	r2, [pc, #208]	; (80057cc <HAL_TIM_Base_Start+0xfc>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d018      	beq.n	8005732 <HAL_TIM_Base_Start+0x62>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a32      	ldr	r2, [pc, #200]	; (80057d0 <HAL_TIM_Base_Start+0x100>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d013      	beq.n	8005732 <HAL_TIM_Base_Start+0x62>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a31      	ldr	r2, [pc, #196]	; (80057d4 <HAL_TIM_Base_Start+0x104>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d00e      	beq.n	8005732 <HAL_TIM_Base_Start+0x62>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a2f      	ldr	r2, [pc, #188]	; (80057d8 <HAL_TIM_Base_Start+0x108>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d009      	beq.n	8005732 <HAL_TIM_Base_Start+0x62>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a2e      	ldr	r2, [pc, #184]	; (80057dc <HAL_TIM_Base_Start+0x10c>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d004      	beq.n	8005732 <HAL_TIM_Base_Start+0x62>
 8005728:	f44f 71ca 	mov.w	r1, #404	; 0x194
 800572c:	482c      	ldr	r0, [pc, #176]	; (80057e0 <HAL_TIM_Base_Start+0x110>)
 800572e:	f7fc f82d 	bl	800178c <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005738:	b2db      	uxtb	r3, r3
 800573a:	2b01      	cmp	r3, #1
 800573c:	d001      	beq.n	8005742 <HAL_TIM_Base_Start+0x72>
  {
    return HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	e03c      	b.n	80057bc <HAL_TIM_Base_Start+0xec>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2202      	movs	r2, #2
 8005746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a1d      	ldr	r2, [pc, #116]	; (80057c4 <HAL_TIM_Base_Start+0xf4>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d018      	beq.n	8005786 <HAL_TIM_Base_Start+0xb6>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a1b      	ldr	r2, [pc, #108]	; (80057c8 <HAL_TIM_Base_Start+0xf8>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d013      	beq.n	8005786 <HAL_TIM_Base_Start+0xb6>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005766:	d00e      	beq.n	8005786 <HAL_TIM_Base_Start+0xb6>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a17      	ldr	r2, [pc, #92]	; (80057cc <HAL_TIM_Base_Start+0xfc>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d009      	beq.n	8005786 <HAL_TIM_Base_Start+0xb6>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a16      	ldr	r2, [pc, #88]	; (80057d0 <HAL_TIM_Base_Start+0x100>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d004      	beq.n	8005786 <HAL_TIM_Base_Start+0xb6>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a14      	ldr	r2, [pc, #80]	; (80057d4 <HAL_TIM_Base_Start+0x104>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d111      	bne.n	80057aa <HAL_TIM_Base_Start+0xda>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	f003 0307 	and.w	r3, r3, #7
 8005790:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2b06      	cmp	r3, #6
 8005796:	d010      	beq.n	80057ba <HAL_TIM_Base_Start+0xea>
    {
      __HAL_TIM_ENABLE(htim);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	681a      	ldr	r2, [r3, #0]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f042 0201 	orr.w	r2, r2, #1
 80057a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057a8:	e007      	b.n	80057ba <HAL_TIM_Base_Start+0xea>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f042 0201 	orr.w	r2, r2, #1
 80057b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80057ba:	2300      	movs	r3, #0
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3710      	adds	r7, #16
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}
 80057c4:	40012c00 	.word	0x40012c00
 80057c8:	40013400 	.word	0x40013400
 80057cc:	40000400 	.word	0x40000400
 80057d0:	40000800 	.word	0x40000800
 80057d4:	40000c00 	.word	0x40000c00
 80057d8:	40001000 	.word	0x40001000
 80057dc:	40001400 	.word	0x40001400
 80057e0:	0800bc00 	.word	0x0800bc00

080057e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b084      	sub	sp, #16
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a3d      	ldr	r2, [pc, #244]	; (80058e8 <HAL_TIM_Base_Start_IT+0x104>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d027      	beq.n	8005846 <HAL_TIM_Base_Start_IT+0x62>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a3c      	ldr	r2, [pc, #240]	; (80058ec <HAL_TIM_Base_Start_IT+0x108>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d022      	beq.n	8005846 <HAL_TIM_Base_Start_IT+0x62>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005808:	d01d      	beq.n	8005846 <HAL_TIM_Base_Start_IT+0x62>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a38      	ldr	r2, [pc, #224]	; (80058f0 <HAL_TIM_Base_Start_IT+0x10c>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d018      	beq.n	8005846 <HAL_TIM_Base_Start_IT+0x62>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a36      	ldr	r2, [pc, #216]	; (80058f4 <HAL_TIM_Base_Start_IT+0x110>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d013      	beq.n	8005846 <HAL_TIM_Base_Start_IT+0x62>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a35      	ldr	r2, [pc, #212]	; (80058f8 <HAL_TIM_Base_Start_IT+0x114>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d00e      	beq.n	8005846 <HAL_TIM_Base_Start_IT+0x62>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a33      	ldr	r2, [pc, #204]	; (80058fc <HAL_TIM_Base_Start_IT+0x118>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d009      	beq.n	8005846 <HAL_TIM_Base_Start_IT+0x62>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a32      	ldr	r2, [pc, #200]	; (8005900 <HAL_TIM_Base_Start_IT+0x11c>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d004      	beq.n	8005846 <HAL_TIM_Base_Start_IT+0x62>
 800583c:	f240 11cf 	movw	r1, #463	; 0x1cf
 8005840:	4830      	ldr	r0, [pc, #192]	; (8005904 <HAL_TIM_Base_Start_IT+0x120>)
 8005842:	f7fb ffa3 	bl	800178c <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800584c:	b2db      	uxtb	r3, r3
 800584e:	2b01      	cmp	r3, #1
 8005850:	d001      	beq.n	8005856 <HAL_TIM_Base_Start_IT+0x72>
  {
    return HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	e044      	b.n	80058e0 <HAL_TIM_Base_Start_IT+0xfc>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2202      	movs	r2, #2
 800585a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	68da      	ldr	r2, [r3, #12]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f042 0201 	orr.w	r2, r2, #1
 800586c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a1d      	ldr	r2, [pc, #116]	; (80058e8 <HAL_TIM_Base_Start_IT+0x104>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d018      	beq.n	80058aa <HAL_TIM_Base_Start_IT+0xc6>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a1b      	ldr	r2, [pc, #108]	; (80058ec <HAL_TIM_Base_Start_IT+0x108>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d013      	beq.n	80058aa <HAL_TIM_Base_Start_IT+0xc6>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800588a:	d00e      	beq.n	80058aa <HAL_TIM_Base_Start_IT+0xc6>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a17      	ldr	r2, [pc, #92]	; (80058f0 <HAL_TIM_Base_Start_IT+0x10c>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d009      	beq.n	80058aa <HAL_TIM_Base_Start_IT+0xc6>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a16      	ldr	r2, [pc, #88]	; (80058f4 <HAL_TIM_Base_Start_IT+0x110>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d004      	beq.n	80058aa <HAL_TIM_Base_Start_IT+0xc6>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a14      	ldr	r2, [pc, #80]	; (80058f8 <HAL_TIM_Base_Start_IT+0x114>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d111      	bne.n	80058ce <HAL_TIM_Base_Start_IT+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	f003 0307 	and.w	r3, r3, #7
 80058b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2b06      	cmp	r3, #6
 80058ba:	d010      	beq.n	80058de <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f042 0201 	orr.w	r2, r2, #1
 80058ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058cc:	e007      	b.n	80058de <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f042 0201 	orr.w	r2, r2, #1
 80058dc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80058de:	2300      	movs	r3, #0
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3710      	adds	r7, #16
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}
 80058e8:	40012c00 	.word	0x40012c00
 80058ec:	40013400 	.word	0x40013400
 80058f0:	40000400 	.word	0x40000400
 80058f4:	40000800 	.word	0x40000800
 80058f8:	40000c00 	.word	0x40000c00
 80058fc:	40001000 	.word	0x40001000
 8005900:	40001400 	.word	0x40001400
 8005904:	0800bc00 	.word	0x0800bc00

08005908 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b082      	sub	sp, #8
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d101      	bne.n	800591a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	e0b2      	b.n	8005a80 <HAL_TIM_PWM_Init+0x178>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a5a      	ldr	r2, [pc, #360]	; (8005a88 <HAL_TIM_PWM_Init+0x180>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d027      	beq.n	8005974 <HAL_TIM_PWM_Init+0x6c>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a58      	ldr	r2, [pc, #352]	; (8005a8c <HAL_TIM_PWM_Init+0x184>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d022      	beq.n	8005974 <HAL_TIM_PWM_Init+0x6c>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005936:	d01d      	beq.n	8005974 <HAL_TIM_PWM_Init+0x6c>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a54      	ldr	r2, [pc, #336]	; (8005a90 <HAL_TIM_PWM_Init+0x188>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d018      	beq.n	8005974 <HAL_TIM_PWM_Init+0x6c>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a53      	ldr	r2, [pc, #332]	; (8005a94 <HAL_TIM_PWM_Init+0x18c>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d013      	beq.n	8005974 <HAL_TIM_PWM_Init+0x6c>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a51      	ldr	r2, [pc, #324]	; (8005a98 <HAL_TIM_PWM_Init+0x190>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d00e      	beq.n	8005974 <HAL_TIM_PWM_Init+0x6c>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a50      	ldr	r2, [pc, #320]	; (8005a9c <HAL_TIM_PWM_Init+0x194>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d009      	beq.n	8005974 <HAL_TIM_PWM_Init+0x6c>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a4e      	ldr	r2, [pc, #312]	; (8005aa0 <HAL_TIM_PWM_Init+0x198>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d004      	beq.n	8005974 <HAL_TIM_PWM_Init+0x6c>
 800596a:	f240 5113 	movw	r1, #1299	; 0x513
 800596e:	484d      	ldr	r0, [pc, #308]	; (8005aa4 <HAL_TIM_PWM_Init+0x19c>)
 8005970:	f7fb ff0c 	bl	800178c <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d014      	beq.n	80059a6 <HAL_TIM_PWM_Init+0x9e>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	2b10      	cmp	r3, #16
 8005982:	d010      	beq.n	80059a6 <HAL_TIM_PWM_Init+0x9e>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	2b20      	cmp	r3, #32
 800598a:	d00c      	beq.n	80059a6 <HAL_TIM_PWM_Init+0x9e>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	2b40      	cmp	r3, #64	; 0x40
 8005992:	d008      	beq.n	80059a6 <HAL_TIM_PWM_Init+0x9e>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	2b60      	cmp	r3, #96	; 0x60
 800599a:	d004      	beq.n	80059a6 <HAL_TIM_PWM_Init+0x9e>
 800599c:	f240 5114 	movw	r1, #1300	; 0x514
 80059a0:	4840      	ldr	r0, [pc, #256]	; (8005aa4 <HAL_TIM_PWM_Init+0x19c>)
 80059a2:	f7fb fef3 	bl	800178c <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	691b      	ldr	r3, [r3, #16]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d00e      	beq.n	80059cc <HAL_TIM_PWM_Init+0xc4>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	691b      	ldr	r3, [r3, #16]
 80059b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059b6:	d009      	beq.n	80059cc <HAL_TIM_PWM_Init+0xc4>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	691b      	ldr	r3, [r3, #16]
 80059bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059c0:	d004      	beq.n	80059cc <HAL_TIM_PWM_Init+0xc4>
 80059c2:	f240 5115 	movw	r1, #1301	; 0x515
 80059c6:	4837      	ldr	r0, [pc, #220]	; (8005aa4 <HAL_TIM_PWM_Init+0x19c>)
 80059c8:	f7fb fee0 	bl	800178c <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	699b      	ldr	r3, [r3, #24]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d008      	beq.n	80059e6 <HAL_TIM_PWM_Init+0xde>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	699b      	ldr	r3, [r3, #24]
 80059d8:	2b80      	cmp	r3, #128	; 0x80
 80059da:	d004      	beq.n	80059e6 <HAL_TIM_PWM_Init+0xde>
 80059dc:	f240 5116 	movw	r1, #1302	; 0x516
 80059e0:	4830      	ldr	r0, [pc, #192]	; (8005aa4 <HAL_TIM_PWM_Init+0x19c>)
 80059e2:	f7fb fed3 	bl	800178c <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d111      	bne.n	8005a16 <HAL_TIM_PWM_Init+0x10e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2200      	movs	r2, #0
 80059f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f001 fdd2 	bl	80075a4 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d102      	bne.n	8005a0e <HAL_TIM_PWM_Init+0x106>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	4a27      	ldr	r2, [pc, #156]	; (8005aa8 <HAL_TIM_PWM_Init+0x1a0>)
 8005a0c:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2202      	movs	r2, #2
 8005a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	3304      	adds	r3, #4
 8005a26:	4619      	mov	r1, r3
 8005a28:	4610      	mov	r0, r2
 8005a2a:	f001 fa11 	bl	8006e50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2201      	movs	r2, #1
 8005a32:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2201      	movs	r2, #1
 8005a3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2201      	movs	r2, #1
 8005a42:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2201      	movs	r2, #1
 8005a4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2201      	movs	r2, #1
 8005a52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2201      	movs	r2, #1
 8005a5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2201      	movs	r2, #1
 8005a62:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2201      	movs	r2, #1
 8005a6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2201      	movs	r2, #1
 8005a72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2201      	movs	r2, #1
 8005a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a7e:	2300      	movs	r3, #0
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3708      	adds	r7, #8
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}
 8005a88:	40012c00 	.word	0x40012c00
 8005a8c:	40013400 	.word	0x40013400
 8005a90:	40000400 	.word	0x40000400
 8005a94:	40000800 	.word	0x40000800
 8005a98:	40000c00 	.word	0x40000c00
 8005a9c:	40001000 	.word	0x40001000
 8005aa0:	40001400 	.word	0x40001400
 8005aa4:	0800bc00 	.word	0x0800bc00
 8005aa8:	08005aad 	.word	0x08005aad

08005aac <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b083      	sub	sp, #12
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005ab4:	bf00      	nop
 8005ab6:	370c      	adds	r7, #12
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bc80      	pop	{r7}
 8005abc:	4770      	bx	lr
	...

08005ac0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b084      	sub	sp, #16
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
 8005ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a8a      	ldr	r2, [pc, #552]	; (8005cf8 <HAL_TIM_PWM_Start+0x238>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d10b      	bne.n	8005aec <HAL_TIM_PWM_Start+0x2c>
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d062      	beq.n	8005ba0 <HAL_TIM_PWM_Start+0xe0>
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	2b04      	cmp	r3, #4
 8005ade:	d05f      	beq.n	8005ba0 <HAL_TIM_PWM_Start+0xe0>
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	2b08      	cmp	r3, #8
 8005ae4:	d05c      	beq.n	8005ba0 <HAL_TIM_PWM_Start+0xe0>
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	2b0c      	cmp	r3, #12
 8005aea:	d059      	beq.n	8005ba0 <HAL_TIM_PWM_Start+0xe0>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a82      	ldr	r2, [pc, #520]	; (8005cfc <HAL_TIM_PWM_Start+0x23c>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d10b      	bne.n	8005b0e <HAL_TIM_PWM_Start+0x4e>
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d051      	beq.n	8005ba0 <HAL_TIM_PWM_Start+0xe0>
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	2b04      	cmp	r3, #4
 8005b00:	d04e      	beq.n	8005ba0 <HAL_TIM_PWM_Start+0xe0>
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	2b08      	cmp	r3, #8
 8005b06:	d04b      	beq.n	8005ba0 <HAL_TIM_PWM_Start+0xe0>
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	2b0c      	cmp	r3, #12
 8005b0c:	d048      	beq.n	8005ba0 <HAL_TIM_PWM_Start+0xe0>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b16:	d10b      	bne.n	8005b30 <HAL_TIM_PWM_Start+0x70>
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d040      	beq.n	8005ba0 <HAL_TIM_PWM_Start+0xe0>
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	2b04      	cmp	r3, #4
 8005b22:	d03d      	beq.n	8005ba0 <HAL_TIM_PWM_Start+0xe0>
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	2b08      	cmp	r3, #8
 8005b28:	d03a      	beq.n	8005ba0 <HAL_TIM_PWM_Start+0xe0>
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	2b0c      	cmp	r3, #12
 8005b2e:	d037      	beq.n	8005ba0 <HAL_TIM_PWM_Start+0xe0>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a72      	ldr	r2, [pc, #456]	; (8005d00 <HAL_TIM_PWM_Start+0x240>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d10b      	bne.n	8005b52 <HAL_TIM_PWM_Start+0x92>
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d02f      	beq.n	8005ba0 <HAL_TIM_PWM_Start+0xe0>
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	2b04      	cmp	r3, #4
 8005b44:	d02c      	beq.n	8005ba0 <HAL_TIM_PWM_Start+0xe0>
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	2b08      	cmp	r3, #8
 8005b4a:	d029      	beq.n	8005ba0 <HAL_TIM_PWM_Start+0xe0>
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	2b0c      	cmp	r3, #12
 8005b50:	d026      	beq.n	8005ba0 <HAL_TIM_PWM_Start+0xe0>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a6b      	ldr	r2, [pc, #428]	; (8005d04 <HAL_TIM_PWM_Start+0x244>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d10b      	bne.n	8005b74 <HAL_TIM_PWM_Start+0xb4>
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d01e      	beq.n	8005ba0 <HAL_TIM_PWM_Start+0xe0>
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	2b04      	cmp	r3, #4
 8005b66:	d01b      	beq.n	8005ba0 <HAL_TIM_PWM_Start+0xe0>
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	2b08      	cmp	r3, #8
 8005b6c:	d018      	beq.n	8005ba0 <HAL_TIM_PWM_Start+0xe0>
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	2b0c      	cmp	r3, #12
 8005b72:	d015      	beq.n	8005ba0 <HAL_TIM_PWM_Start+0xe0>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a63      	ldr	r2, [pc, #396]	; (8005d08 <HAL_TIM_PWM_Start+0x248>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d10b      	bne.n	8005b96 <HAL_TIM_PWM_Start+0xd6>
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d00d      	beq.n	8005ba0 <HAL_TIM_PWM_Start+0xe0>
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	2b04      	cmp	r3, #4
 8005b88:	d00a      	beq.n	8005ba0 <HAL_TIM_PWM_Start+0xe0>
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	2b08      	cmp	r3, #8
 8005b8e:	d007      	beq.n	8005ba0 <HAL_TIM_PWM_Start+0xe0>
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	2b0c      	cmp	r3, #12
 8005b94:	d004      	beq.n	8005ba0 <HAL_TIM_PWM_Start+0xe0>
 8005b96:	f240 5199 	movw	r1, #1433	; 0x599
 8005b9a:	485c      	ldr	r0, [pc, #368]	; (8005d0c <HAL_TIM_PWM_Start+0x24c>)
 8005b9c:	f7fb fdf6 	bl	800178c <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d109      	bne.n	8005bba <HAL_TIM_PWM_Start+0xfa>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	bf14      	ite	ne
 8005bb2:	2301      	movne	r3, #1
 8005bb4:	2300      	moveq	r3, #0
 8005bb6:	b2db      	uxtb	r3, r3
 8005bb8:	e022      	b.n	8005c00 <HAL_TIM_PWM_Start+0x140>
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	2b04      	cmp	r3, #4
 8005bbe:	d109      	bne.n	8005bd4 <HAL_TIM_PWM_Start+0x114>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005bc6:	b2db      	uxtb	r3, r3
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	bf14      	ite	ne
 8005bcc:	2301      	movne	r3, #1
 8005bce:	2300      	moveq	r3, #0
 8005bd0:	b2db      	uxtb	r3, r3
 8005bd2:	e015      	b.n	8005c00 <HAL_TIM_PWM_Start+0x140>
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	2b08      	cmp	r3, #8
 8005bd8:	d109      	bne.n	8005bee <HAL_TIM_PWM_Start+0x12e>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	bf14      	ite	ne
 8005be6:	2301      	movne	r3, #1
 8005be8:	2300      	moveq	r3, #0
 8005bea:	b2db      	uxtb	r3, r3
 8005bec:	e008      	b.n	8005c00 <HAL_TIM_PWM_Start+0x140>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005bf4:	b2db      	uxtb	r3, r3
 8005bf6:	2b01      	cmp	r3, #1
 8005bf8:	bf14      	ite	ne
 8005bfa:	2301      	movne	r3, #1
 8005bfc:	2300      	moveq	r3, #0
 8005bfe:	b2db      	uxtb	r3, r3
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d001      	beq.n	8005c08 <HAL_TIM_PWM_Start+0x148>
  {
    return HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	e072      	b.n	8005cee <HAL_TIM_PWM_Start+0x22e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d104      	bne.n	8005c18 <HAL_TIM_PWM_Start+0x158>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2202      	movs	r2, #2
 8005c12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c16:	e013      	b.n	8005c40 <HAL_TIM_PWM_Start+0x180>
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	2b04      	cmp	r3, #4
 8005c1c:	d104      	bne.n	8005c28 <HAL_TIM_PWM_Start+0x168>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2202      	movs	r2, #2
 8005c22:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c26:	e00b      	b.n	8005c40 <HAL_TIM_PWM_Start+0x180>
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	2b08      	cmp	r3, #8
 8005c2c:	d104      	bne.n	8005c38 <HAL_TIM_PWM_Start+0x178>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2202      	movs	r2, #2
 8005c32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c36:	e003      	b.n	8005c40 <HAL_TIM_PWM_Start+0x180>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2202      	movs	r2, #2
 8005c3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	2201      	movs	r2, #1
 8005c46:	6839      	ldr	r1, [r7, #0]
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f001 fc4b 	bl	80074e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a29      	ldr	r2, [pc, #164]	; (8005cf8 <HAL_TIM_PWM_Start+0x238>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d004      	beq.n	8005c62 <HAL_TIM_PWM_Start+0x1a2>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a27      	ldr	r2, [pc, #156]	; (8005cfc <HAL_TIM_PWM_Start+0x23c>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d101      	bne.n	8005c66 <HAL_TIM_PWM_Start+0x1a6>
 8005c62:	2301      	movs	r3, #1
 8005c64:	e000      	b.n	8005c68 <HAL_TIM_PWM_Start+0x1a8>
 8005c66:	2300      	movs	r3, #0
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d007      	beq.n	8005c7c <HAL_TIM_PWM_Start+0x1bc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c7a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a1d      	ldr	r2, [pc, #116]	; (8005cf8 <HAL_TIM_PWM_Start+0x238>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d018      	beq.n	8005cb8 <HAL_TIM_PWM_Start+0x1f8>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a1c      	ldr	r2, [pc, #112]	; (8005cfc <HAL_TIM_PWM_Start+0x23c>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d013      	beq.n	8005cb8 <HAL_TIM_PWM_Start+0x1f8>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c98:	d00e      	beq.n	8005cb8 <HAL_TIM_PWM_Start+0x1f8>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a18      	ldr	r2, [pc, #96]	; (8005d00 <HAL_TIM_PWM_Start+0x240>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d009      	beq.n	8005cb8 <HAL_TIM_PWM_Start+0x1f8>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a16      	ldr	r2, [pc, #88]	; (8005d04 <HAL_TIM_PWM_Start+0x244>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d004      	beq.n	8005cb8 <HAL_TIM_PWM_Start+0x1f8>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a15      	ldr	r2, [pc, #84]	; (8005d08 <HAL_TIM_PWM_Start+0x248>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d111      	bne.n	8005cdc <HAL_TIM_PWM_Start+0x21c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	f003 0307 	and.w	r3, r3, #7
 8005cc2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2b06      	cmp	r3, #6
 8005cc8:	d010      	beq.n	8005cec <HAL_TIM_PWM_Start+0x22c>
    {
      __HAL_TIM_ENABLE(htim);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	681a      	ldr	r2, [r3, #0]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f042 0201 	orr.w	r2, r2, #1
 8005cd8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cda:	e007      	b.n	8005cec <HAL_TIM_PWM_Start+0x22c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f042 0201 	orr.w	r2, r2, #1
 8005cea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005cec:	2300      	movs	r3, #0
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3710      	adds	r7, #16
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}
 8005cf6:	bf00      	nop
 8005cf8:	40012c00 	.word	0x40012c00
 8005cfc:	40013400 	.word	0x40013400
 8005d00:	40000400 	.word	0x40000400
 8005d04:	40000800 	.word	0x40000800
 8005d08:	40000c00 	.word	0x40000c00
 8005d0c:	0800bc00 	.word	0x0800bc00

08005d10 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b086      	sub	sp, #24
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d101      	bne.n	8005d24 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	e192      	b.n	800604a <HAL_TIM_Encoder_Init+0x33a>
  }

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a7d      	ldr	r2, [pc, #500]	; (8005f20 <HAL_TIM_Encoder_Init+0x210>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d01d      	beq.n	8005d6a <HAL_TIM_Encoder_Init+0x5a>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a7c      	ldr	r2, [pc, #496]	; (8005f24 <HAL_TIM_Encoder_Init+0x214>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d018      	beq.n	8005d6a <HAL_TIM_Encoder_Init+0x5a>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d40:	d013      	beq.n	8005d6a <HAL_TIM_Encoder_Init+0x5a>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a78      	ldr	r2, [pc, #480]	; (8005f28 <HAL_TIM_Encoder_Init+0x218>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d00e      	beq.n	8005d6a <HAL_TIM_Encoder_Init+0x5a>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a76      	ldr	r2, [pc, #472]	; (8005f2c <HAL_TIM_Encoder_Init+0x21c>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d009      	beq.n	8005d6a <HAL_TIM_Encoder_Init+0x5a>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a75      	ldr	r2, [pc, #468]	; (8005f30 <HAL_TIM_Encoder_Init+0x220>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d004      	beq.n	8005d6a <HAL_TIM_Encoder_Init+0x5a>
 8005d60:	f640 318e 	movw	r1, #2958	; 0xb8e
 8005d64:	4873      	ldr	r0, [pc, #460]	; (8005f34 <HAL_TIM_Encoder_Init+0x224>)
 8005d66:	f7fb fd11 	bl	800178c <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d014      	beq.n	8005d9c <HAL_TIM_Encoder_Init+0x8c>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	689b      	ldr	r3, [r3, #8]
 8005d76:	2b10      	cmp	r3, #16
 8005d78:	d010      	beq.n	8005d9c <HAL_TIM_Encoder_Init+0x8c>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	2b20      	cmp	r3, #32
 8005d80:	d00c      	beq.n	8005d9c <HAL_TIM_Encoder_Init+0x8c>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	2b40      	cmp	r3, #64	; 0x40
 8005d88:	d008      	beq.n	8005d9c <HAL_TIM_Encoder_Init+0x8c>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	2b60      	cmp	r3, #96	; 0x60
 8005d90:	d004      	beq.n	8005d9c <HAL_TIM_Encoder_Init+0x8c>
 8005d92:	f640 318f 	movw	r1, #2959	; 0xb8f
 8005d96:	4867      	ldr	r0, [pc, #412]	; (8005f34 <HAL_TIM_Encoder_Init+0x224>)
 8005d98:	f7fb fcf8 	bl	800178c <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	691b      	ldr	r3, [r3, #16]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d00e      	beq.n	8005dc2 <HAL_TIM_Encoder_Init+0xb2>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	691b      	ldr	r3, [r3, #16]
 8005da8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dac:	d009      	beq.n	8005dc2 <HAL_TIM_Encoder_Init+0xb2>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	691b      	ldr	r3, [r3, #16]
 8005db2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005db6:	d004      	beq.n	8005dc2 <HAL_TIM_Encoder_Init+0xb2>
 8005db8:	f44f 6139 	mov.w	r1, #2960	; 0xb90
 8005dbc:	485d      	ldr	r0, [pc, #372]	; (8005f34 <HAL_TIM_Encoder_Init+0x224>)
 8005dbe:	f7fb fce5 	bl	800178c <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	699b      	ldr	r3, [r3, #24]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d008      	beq.n	8005ddc <HAL_TIM_Encoder_Init+0xcc>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	699b      	ldr	r3, [r3, #24]
 8005dce:	2b80      	cmp	r3, #128	; 0x80
 8005dd0:	d004      	beq.n	8005ddc <HAL_TIM_Encoder_Init+0xcc>
 8005dd2:	f640 3191 	movw	r1, #2961	; 0xb91
 8005dd6:	4857      	ldr	r0, [pc, #348]	; (8005f34 <HAL_TIM_Encoder_Init+0x224>)
 8005dd8:	f7fb fcd8 	bl	800178c <assert_failed>
  assert_param(IS_TIM_ENCODER_MODE(sConfig->EncoderMode));
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d00c      	beq.n	8005dfe <HAL_TIM_Encoder_Init+0xee>
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	2b02      	cmp	r3, #2
 8005dea:	d008      	beq.n	8005dfe <HAL_TIM_Encoder_Init+0xee>
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	2b03      	cmp	r3, #3
 8005df2:	d004      	beq.n	8005dfe <HAL_TIM_Encoder_Init+0xee>
 8005df4:	f640 3192 	movw	r1, #2962	; 0xb92
 8005df8:	484e      	ldr	r0, [pc, #312]	; (8005f34 <HAL_TIM_Encoder_Init+0x224>)
 8005dfa:	f7fb fcc7 	bl	800178c <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC1Selection));
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	d00c      	beq.n	8005e20 <HAL_TIM_Encoder_Init+0x110>
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	2b02      	cmp	r3, #2
 8005e0c:	d008      	beq.n	8005e20 <HAL_TIM_Encoder_Init+0x110>
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	2b03      	cmp	r3, #3
 8005e14:	d004      	beq.n	8005e20 <HAL_TIM_Encoder_Init+0x110>
 8005e16:	f640 3193 	movw	r1, #2963	; 0xb93
 8005e1a:	4846      	ldr	r0, [pc, #280]	; (8005f34 <HAL_TIM_Encoder_Init+0x224>)
 8005e1c:	f7fb fcb6 	bl	800178c <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC2Selection));
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	699b      	ldr	r3, [r3, #24]
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d00c      	beq.n	8005e42 <HAL_TIM_Encoder_Init+0x132>
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	699b      	ldr	r3, [r3, #24]
 8005e2c:	2b02      	cmp	r3, #2
 8005e2e:	d008      	beq.n	8005e42 <HAL_TIM_Encoder_Init+0x132>
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	699b      	ldr	r3, [r3, #24]
 8005e34:	2b03      	cmp	r3, #3
 8005e36:	d004      	beq.n	8005e42 <HAL_TIM_Encoder_Init+0x132>
 8005e38:	f640 3194 	movw	r1, #2964	; 0xb94
 8005e3c:	483d      	ldr	r0, [pc, #244]	; (8005f34 <HAL_TIM_Encoder_Init+0x224>)
 8005e3e:	f7fb fca5 	bl	800178c <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC1Polarity));
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d008      	beq.n	8005e5c <HAL_TIM_Encoder_Init+0x14c>
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	2b02      	cmp	r3, #2
 8005e50:	d004      	beq.n	8005e5c <HAL_TIM_Encoder_Init+0x14c>
 8005e52:	f640 3195 	movw	r1, #2965	; 0xb95
 8005e56:	4837      	ldr	r0, [pc, #220]	; (8005f34 <HAL_TIM_Encoder_Init+0x224>)
 8005e58:	f7fb fc98 	bl	800178c <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC2Polarity));
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	695b      	ldr	r3, [r3, #20]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d008      	beq.n	8005e76 <HAL_TIM_Encoder_Init+0x166>
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	695b      	ldr	r3, [r3, #20]
 8005e68:	2b02      	cmp	r3, #2
 8005e6a:	d004      	beq.n	8005e76 <HAL_TIM_Encoder_Init+0x166>
 8005e6c:	f640 3196 	movw	r1, #2966	; 0xb96
 8005e70:	4830      	ldr	r0, [pc, #192]	; (8005f34 <HAL_TIM_Encoder_Init+0x224>)
 8005e72:	f7fb fc8b 	bl	800178c <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	68db      	ldr	r3, [r3, #12]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d010      	beq.n	8005ea0 <HAL_TIM_Encoder_Init+0x190>
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	68db      	ldr	r3, [r3, #12]
 8005e82:	2b04      	cmp	r3, #4
 8005e84:	d00c      	beq.n	8005ea0 <HAL_TIM_Encoder_Init+0x190>
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	68db      	ldr	r3, [r3, #12]
 8005e8a:	2b08      	cmp	r3, #8
 8005e8c:	d008      	beq.n	8005ea0 <HAL_TIM_Encoder_Init+0x190>
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	68db      	ldr	r3, [r3, #12]
 8005e92:	2b0c      	cmp	r3, #12
 8005e94:	d004      	beq.n	8005ea0 <HAL_TIM_Encoder_Init+0x190>
 8005e96:	f640 3197 	movw	r1, #2967	; 0xb97
 8005e9a:	4826      	ldr	r0, [pc, #152]	; (8005f34 <HAL_TIM_Encoder_Init+0x224>)
 8005e9c:	f7fb fc76 	bl	800178c <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	69db      	ldr	r3, [r3, #28]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d010      	beq.n	8005eca <HAL_TIM_Encoder_Init+0x1ba>
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	69db      	ldr	r3, [r3, #28]
 8005eac:	2b04      	cmp	r3, #4
 8005eae:	d00c      	beq.n	8005eca <HAL_TIM_Encoder_Init+0x1ba>
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	69db      	ldr	r3, [r3, #28]
 8005eb4:	2b08      	cmp	r3, #8
 8005eb6:	d008      	beq.n	8005eca <HAL_TIM_Encoder_Init+0x1ba>
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	69db      	ldr	r3, [r3, #28]
 8005ebc:	2b0c      	cmp	r3, #12
 8005ebe:	d004      	beq.n	8005eca <HAL_TIM_Encoder_Init+0x1ba>
 8005ec0:	f640 3198 	movw	r1, #2968	; 0xb98
 8005ec4:	481b      	ldr	r0, [pc, #108]	; (8005f34 <HAL_TIM_Encoder_Init+0x224>)
 8005ec6:	f7fb fc61 	bl	800178c <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	691b      	ldr	r3, [r3, #16]
 8005ece:	2b0f      	cmp	r3, #15
 8005ed0:	d904      	bls.n	8005edc <HAL_TIM_Encoder_Init+0x1cc>
 8005ed2:	f640 3199 	movw	r1, #2969	; 0xb99
 8005ed6:	4817      	ldr	r0, [pc, #92]	; (8005f34 <HAL_TIM_Encoder_Init+0x224>)
 8005ed8:	f7fb fc58 	bl	800178c <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	6a1b      	ldr	r3, [r3, #32]
 8005ee0:	2b0f      	cmp	r3, #15
 8005ee2:	d904      	bls.n	8005eee <HAL_TIM_Encoder_Init+0x1de>
 8005ee4:	f640 319a 	movw	r1, #2970	; 0xb9a
 8005ee8:	4812      	ldr	r0, [pc, #72]	; (8005f34 <HAL_TIM_Encoder_Init+0x224>)
 8005eea:	f7fb fc4f 	bl	800178c <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d120      	bne.n	8005f3c <HAL_TIM_Encoder_Init+0x22c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2200      	movs	r2, #0
 8005efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f001 fb4e 	bl	80075a4 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d102      	bne.n	8005f16 <HAL_TIM_Encoder_Init+0x206>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	4a09      	ldr	r2, [pc, #36]	; (8005f38 <HAL_TIM_Encoder_Init+0x228>)
 8005f14:	671a      	str	r2, [r3, #112]	; 0x70
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	4798      	blx	r3
 8005f1e:	e00d      	b.n	8005f3c <HAL_TIM_Encoder_Init+0x22c>
 8005f20:	40012c00 	.word	0x40012c00
 8005f24:	40013400 	.word	0x40013400
 8005f28:	40000400 	.word	0x40000400
 8005f2c:	40000800 	.word	0x40000800
 8005f30:	40000c00 	.word	0x40000c00
 8005f34:	0800bc00 	.word	0x0800bc00
 8005f38:	08001999 	.word	0x08001999
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2202      	movs	r2, #2
 8005f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	687a      	ldr	r2, [r7, #4]
 8005f4c:	6812      	ldr	r2, [r2, #0]
 8005f4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f52:	f023 0307 	bic.w	r3, r3, #7
 8005f56:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681a      	ldr	r2, [r3, #0]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	3304      	adds	r3, #4
 8005f60:	4619      	mov	r1, r3
 8005f62:	4610      	mov	r0, r2
 8005f64:	f000 ff74 	bl	8006e50 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	699b      	ldr	r3, [r3, #24]
 8005f76:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	6a1b      	ldr	r3, [r3, #32]
 8005f7e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	697a      	ldr	r2, [r7, #20]
 8005f86:	4313      	orrs	r3, r2
 8005f88:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f90:	f023 0303 	bic.w	r3, r3, #3
 8005f94:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	689a      	ldr	r2, [r3, #8]
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	699b      	ldr	r3, [r3, #24]
 8005f9e:	021b      	lsls	r3, r3, #8
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	693a      	ldr	r2, [r7, #16]
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005fae:	f023 030c 	bic.w	r3, r3, #12
 8005fb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005fba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005fbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	68da      	ldr	r2, [r3, #12]
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	69db      	ldr	r3, [r3, #28]
 8005fc8:	021b      	lsls	r3, r3, #8
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	693a      	ldr	r2, [r7, #16]
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	691b      	ldr	r3, [r3, #16]
 8005fd6:	011a      	lsls	r2, r3, #4
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	6a1b      	ldr	r3, [r3, #32]
 8005fdc:	031b      	lsls	r3, r3, #12
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	693a      	ldr	r2, [r7, #16]
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005fec:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	685a      	ldr	r2, [r3, #4]
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	695b      	ldr	r3, [r3, #20]
 8005ff6:	011b      	lsls	r3, r3, #4
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	68fa      	ldr	r2, [r7, #12]
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	697a      	ldr	r2, [r7, #20]
 8006006:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	693a      	ldr	r2, [r7, #16]
 800600e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	68fa      	ldr	r2, [r7, #12]
 8006016:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2201      	movs	r2, #1
 800601c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2201      	movs	r2, #1
 8006024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2201      	movs	r2, #1
 800602c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2201      	movs	r2, #1
 8006034:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2201      	movs	r2, #1
 800603c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2201      	movs	r2, #1
 8006044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006048:	2300      	movs	r3, #0
}
 800604a:	4618      	mov	r0, r3
 800604c:	3718      	adds	r7, #24
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}
 8006052:	bf00      	nop

08006054 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b084      	sub	sp, #16
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
 800605c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006064:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800606c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006074:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800607c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a5d      	ldr	r2, [pc, #372]	; (80061f8 <HAL_TIM_Encoder_Start_IT+0x1a4>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d01d      	beq.n	80060c4 <HAL_TIM_Encoder_Start_IT+0x70>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a5b      	ldr	r2, [pc, #364]	; (80061fc <HAL_TIM_Encoder_Start_IT+0x1a8>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d018      	beq.n	80060c4 <HAL_TIM_Encoder_Start_IT+0x70>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800609a:	d013      	beq.n	80060c4 <HAL_TIM_Encoder_Start_IT+0x70>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a57      	ldr	r2, [pc, #348]	; (8006200 <HAL_TIM_Encoder_Start_IT+0x1ac>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d00e      	beq.n	80060c4 <HAL_TIM_Encoder_Start_IT+0x70>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a56      	ldr	r2, [pc, #344]	; (8006204 <HAL_TIM_Encoder_Start_IT+0x1b0>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d009      	beq.n	80060c4 <HAL_TIM_Encoder_Start_IT+0x70>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a54      	ldr	r2, [pc, #336]	; (8006208 <HAL_TIM_Encoder_Start_IT+0x1b4>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d004      	beq.n	80060c4 <HAL_TIM_Encoder_Start_IT+0x70>
 80060ba:	f640 41e4 	movw	r1, #3300	; 0xce4
 80060be:	4853      	ldr	r0, [pc, #332]	; (800620c <HAL_TIM_Encoder_Start_IT+0x1b8>)
 80060c0:	f7fb fb64 	bl	800178c <assert_failed>

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d110      	bne.n	80060ec <HAL_TIM_Encoder_Start_IT+0x98>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80060ca:	7bfb      	ldrb	r3, [r7, #15]
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d102      	bne.n	80060d6 <HAL_TIM_Encoder_Start_IT+0x82>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80060d0:	7b7b      	ldrb	r3, [r7, #13]
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	d001      	beq.n	80060da <HAL_TIM_Encoder_Start_IT+0x86>
    {
      return HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	e089      	b.n	80061ee <HAL_TIM_Encoder_Start_IT+0x19a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2202      	movs	r2, #2
 80060de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2202      	movs	r2, #2
 80060e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80060ea:	e031      	b.n	8006150 <HAL_TIM_Encoder_Start_IT+0xfc>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	2b04      	cmp	r3, #4
 80060f0:	d110      	bne.n	8006114 <HAL_TIM_Encoder_Start_IT+0xc0>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80060f2:	7bbb      	ldrb	r3, [r7, #14]
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d102      	bne.n	80060fe <HAL_TIM_Encoder_Start_IT+0xaa>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80060f8:	7b3b      	ldrb	r3, [r7, #12]
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	d001      	beq.n	8006102 <HAL_TIM_Encoder_Start_IT+0xae>
    {
      return HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	e075      	b.n	80061ee <HAL_TIM_Encoder_Start_IT+0x19a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2202      	movs	r2, #2
 8006106:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2202      	movs	r2, #2
 800610e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006112:	e01d      	b.n	8006150 <HAL_TIM_Encoder_Start_IT+0xfc>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006114:	7bfb      	ldrb	r3, [r7, #15]
 8006116:	2b01      	cmp	r3, #1
 8006118:	d108      	bne.n	800612c <HAL_TIM_Encoder_Start_IT+0xd8>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800611a:	7bbb      	ldrb	r3, [r7, #14]
 800611c:	2b01      	cmp	r3, #1
 800611e:	d105      	bne.n	800612c <HAL_TIM_Encoder_Start_IT+0xd8>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006120:	7b7b      	ldrb	r3, [r7, #13]
 8006122:	2b01      	cmp	r3, #1
 8006124:	d102      	bne.n	800612c <HAL_TIM_Encoder_Start_IT+0xd8>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006126:	7b3b      	ldrb	r3, [r7, #12]
 8006128:	2b01      	cmp	r3, #1
 800612a:	d001      	beq.n	8006130 <HAL_TIM_Encoder_Start_IT+0xdc>
    {
      return HAL_ERROR;
 800612c:	2301      	movs	r3, #1
 800612e:	e05e      	b.n	80061ee <HAL_TIM_Encoder_Start_IT+0x19a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2202      	movs	r2, #2
 8006134:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2202      	movs	r2, #2
 800613c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2202      	movs	r2, #2
 8006144:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2202      	movs	r2, #2
 800614c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d003      	beq.n	800615e <HAL_TIM_Encoder_Start_IT+0x10a>
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	2b04      	cmp	r3, #4
 800615a:	d010      	beq.n	800617e <HAL_TIM_Encoder_Start_IT+0x12a>
 800615c:	e01f      	b.n	800619e <HAL_TIM_Encoder_Start_IT+0x14a>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	2201      	movs	r2, #1
 8006164:	2100      	movs	r1, #0
 8006166:	4618      	mov	r0, r3
 8006168:	f001 f9bc 	bl	80074e4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	68da      	ldr	r2, [r3, #12]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f042 0202 	orr.w	r2, r2, #2
 800617a:	60da      	str	r2, [r3, #12]
      break;
 800617c:	e02e      	b.n	80061dc <HAL_TIM_Encoder_Start_IT+0x188>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	2201      	movs	r2, #1
 8006184:	2104      	movs	r1, #4
 8006186:	4618      	mov	r0, r3
 8006188:	f001 f9ac 	bl	80074e4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	68da      	ldr	r2, [r3, #12]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f042 0204 	orr.w	r2, r2, #4
 800619a:	60da      	str	r2, [r3, #12]
      break;
 800619c:	e01e      	b.n	80061dc <HAL_TIM_Encoder_Start_IT+0x188>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	2201      	movs	r2, #1
 80061a4:	2100      	movs	r1, #0
 80061a6:	4618      	mov	r0, r3
 80061a8:	f001 f99c 	bl	80074e4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	2201      	movs	r2, #1
 80061b2:	2104      	movs	r1, #4
 80061b4:	4618      	mov	r0, r3
 80061b6:	f001 f995 	bl	80074e4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	68da      	ldr	r2, [r3, #12]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f042 0202 	orr.w	r2, r2, #2
 80061c8:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	68da      	ldr	r2, [r3, #12]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f042 0204 	orr.w	r2, r2, #4
 80061d8:	60da      	str	r2, [r3, #12]
      break;
 80061da:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	681a      	ldr	r2, [r3, #0]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f042 0201 	orr.w	r2, r2, #1
 80061ea:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80061ec:	2300      	movs	r3, #0
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3710      	adds	r7, #16
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}
 80061f6:	bf00      	nop
 80061f8:	40012c00 	.word	0x40012c00
 80061fc:	40013400 	.word	0x40013400
 8006200:	40000400 	.word	0x40000400
 8006204:	40000800 	.word	0x40000800
 8006208:	40000c00 	.word	0x40000c00
 800620c:	0800bc00 	.word	0x0800bc00

08006210 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b082      	sub	sp, #8
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	691b      	ldr	r3, [r3, #16]
 800621e:	f003 0302 	and.w	r3, r3, #2
 8006222:	2b02      	cmp	r3, #2
 8006224:	d128      	bne.n	8006278 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	68db      	ldr	r3, [r3, #12]
 800622c:	f003 0302 	and.w	r3, r3, #2
 8006230:	2b02      	cmp	r3, #2
 8006232:	d121      	bne.n	8006278 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f06f 0202 	mvn.w	r2, #2
 800623c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2201      	movs	r2, #1
 8006242:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	699b      	ldr	r3, [r3, #24]
 800624a:	f003 0303 	and.w	r3, r3, #3
 800624e:	2b00      	cmp	r3, #0
 8006250:	d005      	beq.n	800625e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	4798      	blx	r3
 800625c:	e009      	b.n	8006272 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2200      	movs	r2, #0
 8006276:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	691b      	ldr	r3, [r3, #16]
 800627e:	f003 0304 	and.w	r3, r3, #4
 8006282:	2b04      	cmp	r3, #4
 8006284:	d128      	bne.n	80062d8 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	68db      	ldr	r3, [r3, #12]
 800628c:	f003 0304 	and.w	r3, r3, #4
 8006290:	2b04      	cmp	r3, #4
 8006292:	d121      	bne.n	80062d8 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f06f 0204 	mvn.w	r2, #4
 800629c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2202      	movs	r2, #2
 80062a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	699b      	ldr	r3, [r3, #24]
 80062aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d005      	beq.n	80062be <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	4798      	blx	r3
 80062bc:	e009      	b.n	80062d2 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2200      	movs	r2, #0
 80062d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	691b      	ldr	r3, [r3, #16]
 80062de:	f003 0308 	and.w	r3, r3, #8
 80062e2:	2b08      	cmp	r3, #8
 80062e4:	d128      	bne.n	8006338 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	68db      	ldr	r3, [r3, #12]
 80062ec:	f003 0308 	and.w	r3, r3, #8
 80062f0:	2b08      	cmp	r3, #8
 80062f2:	d121      	bne.n	8006338 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f06f 0208 	mvn.w	r2, #8
 80062fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2204      	movs	r2, #4
 8006302:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	69db      	ldr	r3, [r3, #28]
 800630a:	f003 0303 	and.w	r3, r3, #3
 800630e:	2b00      	cmp	r3, #0
 8006310:	d005      	beq.n	800631e <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	4798      	blx	r3
 800631c:	e009      	b.n	8006332 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2200      	movs	r2, #0
 8006336:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	691b      	ldr	r3, [r3, #16]
 800633e:	f003 0310 	and.w	r3, r3, #16
 8006342:	2b10      	cmp	r3, #16
 8006344:	d128      	bne.n	8006398 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	68db      	ldr	r3, [r3, #12]
 800634c:	f003 0310 	and.w	r3, r3, #16
 8006350:	2b10      	cmp	r3, #16
 8006352:	d121      	bne.n	8006398 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f06f 0210 	mvn.w	r2, #16
 800635c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2208      	movs	r2, #8
 8006362:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	69db      	ldr	r3, [r3, #28]
 800636a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800636e:	2b00      	cmp	r3, #0
 8006370:	d005      	beq.n	800637e <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	4798      	blx	r3
 800637c:	e009      	b.n	8006392 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2200      	movs	r2, #0
 8006396:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	691b      	ldr	r3, [r3, #16]
 800639e:	f003 0301 	and.w	r3, r3, #1
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	d110      	bne.n	80063c8 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	68db      	ldr	r3, [r3, #12]
 80063ac:	f003 0301 	and.w	r3, r3, #1
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d109      	bne.n	80063c8 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f06f 0201 	mvn.w	r2, #1
 80063bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	691b      	ldr	r3, [r3, #16]
 80063ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063d2:	2b80      	cmp	r3, #128	; 0x80
 80063d4:	d110      	bne.n	80063f8 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	68db      	ldr	r3, [r3, #12]
 80063dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063e0:	2b80      	cmp	r3, #128	; 0x80
 80063e2:	d109      	bne.n	80063f8 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80063ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	691b      	ldr	r3, [r3, #16]
 80063fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006402:	2b40      	cmp	r3, #64	; 0x40
 8006404:	d110      	bne.n	8006428 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	68db      	ldr	r3, [r3, #12]
 800640c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006410:	2b40      	cmp	r3, #64	; 0x40
 8006412:	d109      	bne.n	8006428 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800641c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	691b      	ldr	r3, [r3, #16]
 800642e:	f003 0320 	and.w	r3, r3, #32
 8006432:	2b20      	cmp	r3, #32
 8006434:	d110      	bne.n	8006458 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	68db      	ldr	r3, [r3, #12]
 800643c:	f003 0320 	and.w	r3, r3, #32
 8006440:	2b20      	cmp	r3, #32
 8006442:	d109      	bne.n	8006458 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f06f 0220 	mvn.w	r2, #32
 800644c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006458:	bf00      	nop
 800645a:	3708      	adds	r7, #8
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}

08006460 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b084      	sub	sp, #16
 8006464:	af00      	add	r7, sp, #0
 8006466:	60f8      	str	r0, [r7, #12]
 8006468:	60b9      	str	r1, [r7, #8]
 800646a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d010      	beq.n	8006494 <HAL_TIM_PWM_ConfigChannel+0x34>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2b04      	cmp	r3, #4
 8006476:	d00d      	beq.n	8006494 <HAL_TIM_PWM_ConfigChannel+0x34>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2b08      	cmp	r3, #8
 800647c:	d00a      	beq.n	8006494 <HAL_TIM_PWM_ConfigChannel+0x34>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2b0c      	cmp	r3, #12
 8006482:	d007      	beq.n	8006494 <HAL_TIM_PWM_ConfigChannel+0x34>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2b3c      	cmp	r3, #60	; 0x3c
 8006488:	d004      	beq.n	8006494 <HAL_TIM_PWM_ConfigChannel+0x34>
 800648a:	f241 0127 	movw	r1, #4135	; 0x1027
 800648e:	4890      	ldr	r0, [pc, #576]	; (80066d0 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8006490:	f7fb f97c 	bl	800178c <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	2b60      	cmp	r3, #96	; 0x60
 800649a:	d008      	beq.n	80064ae <HAL_TIM_PWM_ConfigChannel+0x4e>
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	2b70      	cmp	r3, #112	; 0x70
 80064a2:	d004      	beq.n	80064ae <HAL_TIM_PWM_ConfigChannel+0x4e>
 80064a4:	f241 0128 	movw	r1, #4136	; 0x1028
 80064a8:	4889      	ldr	r0, [pc, #548]	; (80066d0 <HAL_TIM_PWM_ConfigChannel+0x270>)
 80064aa:	f7fb f96f 	bl	800178c <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d008      	beq.n	80064c8 <HAL_TIM_PWM_ConfigChannel+0x68>
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	2b02      	cmp	r3, #2
 80064bc:	d004      	beq.n	80064c8 <HAL_TIM_PWM_ConfigChannel+0x68>
 80064be:	f241 0129 	movw	r1, #4137	; 0x1029
 80064c2:	4883      	ldr	r0, [pc, #524]	; (80066d0 <HAL_TIM_PWM_ConfigChannel+0x270>)
 80064c4:	f7fb f962 	bl	800178c <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	691b      	ldr	r3, [r3, #16]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d008      	beq.n	80064e2 <HAL_TIM_PWM_ConfigChannel+0x82>
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	691b      	ldr	r3, [r3, #16]
 80064d4:	2b04      	cmp	r3, #4
 80064d6:	d004      	beq.n	80064e2 <HAL_TIM_PWM_ConfigChannel+0x82>
 80064d8:	f241 012a 	movw	r1, #4138	; 0x102a
 80064dc:	487c      	ldr	r0, [pc, #496]	; (80066d0 <HAL_TIM_PWM_ConfigChannel+0x270>)
 80064de:	f7fb f955 	bl	800178c <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	d101      	bne.n	80064f0 <HAL_TIM_PWM_ConfigChannel+0x90>
 80064ec:	2302      	movs	r3, #2
 80064ee:	e145      	b.n	800677c <HAL_TIM_PWM_ConfigChannel+0x31c>
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2201      	movs	r2, #1
 80064f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2b0c      	cmp	r3, #12
 80064fc:	f200 8138 	bhi.w	8006770 <HAL_TIM_PWM_ConfigChannel+0x310>
 8006500:	a201      	add	r2, pc, #4	; (adr r2, 8006508 <HAL_TIM_PWM_ConfigChannel+0xa8>)
 8006502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006506:	bf00      	nop
 8006508:	0800653d 	.word	0x0800653d
 800650c:	08006771 	.word	0x08006771
 8006510:	08006771 	.word	0x08006771
 8006514:	08006771 	.word	0x08006771
 8006518:	080065c3 	.word	0x080065c3
 800651c:	08006771 	.word	0x08006771
 8006520:	08006771 	.word	0x08006771
 8006524:	08006771 	.word	0x08006771
 8006528:	0800664b 	.word	0x0800664b
 800652c:	08006771 	.word	0x08006771
 8006530:	08006771 	.word	0x08006771
 8006534:	08006771 	.word	0x08006771
 8006538:	080066e9 	.word	0x080066e9
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a64      	ldr	r2, [pc, #400]	; (80066d4 <HAL_TIM_PWM_ConfigChannel+0x274>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d01d      	beq.n	8006582 <HAL_TIM_PWM_ConfigChannel+0x122>
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a63      	ldr	r2, [pc, #396]	; (80066d8 <HAL_TIM_PWM_ConfigChannel+0x278>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d018      	beq.n	8006582 <HAL_TIM_PWM_ConfigChannel+0x122>
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006558:	d013      	beq.n	8006582 <HAL_TIM_PWM_ConfigChannel+0x122>
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a5f      	ldr	r2, [pc, #380]	; (80066dc <HAL_TIM_PWM_ConfigChannel+0x27c>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d00e      	beq.n	8006582 <HAL_TIM_PWM_ConfigChannel+0x122>
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a5d      	ldr	r2, [pc, #372]	; (80066e0 <HAL_TIM_PWM_ConfigChannel+0x280>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d009      	beq.n	8006582 <HAL_TIM_PWM_ConfigChannel+0x122>
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a5c      	ldr	r2, [pc, #368]	; (80066e4 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d004      	beq.n	8006582 <HAL_TIM_PWM_ConfigChannel+0x122>
 8006578:	f241 0134 	movw	r1, #4148	; 0x1034
 800657c:	4854      	ldr	r0, [pc, #336]	; (80066d0 <HAL_TIM_PWM_ConfigChannel+0x270>)
 800657e:	f7fb f905 	bl	800178c <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	68b9      	ldr	r1, [r7, #8]
 8006588:	4618      	mov	r0, r3
 800658a:	f000 fcdb 	bl	8006f44 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	699a      	ldr	r2, [r3, #24]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f042 0208 	orr.w	r2, r2, #8
 800659c:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	699a      	ldr	r2, [r3, #24]
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f022 0204 	bic.w	r2, r2, #4
 80065ac:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	6999      	ldr	r1, [r3, #24]
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	691a      	ldr	r2, [r3, #16]
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	430a      	orrs	r2, r1
 80065be:	619a      	str	r2, [r3, #24]
      break;
 80065c0:	e0d7      	b.n	8006772 <HAL_TIM_PWM_ConfigChannel+0x312>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a43      	ldr	r2, [pc, #268]	; (80066d4 <HAL_TIM_PWM_ConfigChannel+0x274>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d01d      	beq.n	8006608 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a41      	ldr	r2, [pc, #260]	; (80066d8 <HAL_TIM_PWM_ConfigChannel+0x278>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d018      	beq.n	8006608 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065de:	d013      	beq.n	8006608 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a3d      	ldr	r2, [pc, #244]	; (80066dc <HAL_TIM_PWM_ConfigChannel+0x27c>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d00e      	beq.n	8006608 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a3c      	ldr	r2, [pc, #240]	; (80066e0 <HAL_TIM_PWM_ConfigChannel+0x280>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d009      	beq.n	8006608 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a3a      	ldr	r2, [pc, #232]	; (80066e4 <HAL_TIM_PWM_ConfigChannel+0x284>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d004      	beq.n	8006608 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 80065fe:	f241 0145 	movw	r1, #4165	; 0x1045
 8006602:	4833      	ldr	r0, [pc, #204]	; (80066d0 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8006604:	f7fb f8c2 	bl	800178c <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	68b9      	ldr	r1, [r7, #8]
 800660e:	4618      	mov	r0, r3
 8006610:	f000 fd32 	bl	8007078 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	699a      	ldr	r2, [r3, #24]
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006622:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	699a      	ldr	r2, [r3, #24]
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006632:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	6999      	ldr	r1, [r3, #24]
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	691b      	ldr	r3, [r3, #16]
 800663e:	021a      	lsls	r2, r3, #8
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	430a      	orrs	r2, r1
 8006646:	619a      	str	r2, [r3, #24]
      break;
 8006648:	e093      	b.n	8006772 <HAL_TIM_PWM_ConfigChannel+0x312>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a21      	ldr	r2, [pc, #132]	; (80066d4 <HAL_TIM_PWM_ConfigChannel+0x274>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d01d      	beq.n	8006690 <HAL_TIM_PWM_ConfigChannel+0x230>
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a1f      	ldr	r2, [pc, #124]	; (80066d8 <HAL_TIM_PWM_ConfigChannel+0x278>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d018      	beq.n	8006690 <HAL_TIM_PWM_ConfigChannel+0x230>
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006666:	d013      	beq.n	8006690 <HAL_TIM_PWM_ConfigChannel+0x230>
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a1b      	ldr	r2, [pc, #108]	; (80066dc <HAL_TIM_PWM_ConfigChannel+0x27c>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d00e      	beq.n	8006690 <HAL_TIM_PWM_ConfigChannel+0x230>
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a1a      	ldr	r2, [pc, #104]	; (80066e0 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d009      	beq.n	8006690 <HAL_TIM_PWM_ConfigChannel+0x230>
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a18      	ldr	r2, [pc, #96]	; (80066e4 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d004      	beq.n	8006690 <HAL_TIM_PWM_ConfigChannel+0x230>
 8006686:	f241 0156 	movw	r1, #4182	; 0x1056
 800668a:	4811      	ldr	r0, [pc, #68]	; (80066d0 <HAL_TIM_PWM_ConfigChannel+0x270>)
 800668c:	f7fb f87e 	bl	800178c <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	68b9      	ldr	r1, [r7, #8]
 8006696:	4618      	mov	r0, r3
 8006698:	f000 fd8c 	bl	80071b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	69da      	ldr	r2, [r3, #28]
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f042 0208 	orr.w	r2, r2, #8
 80066aa:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	69da      	ldr	r2, [r3, #28]
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f022 0204 	bic.w	r2, r2, #4
 80066ba:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	69d9      	ldr	r1, [r3, #28]
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	691a      	ldr	r2, [r3, #16]
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	430a      	orrs	r2, r1
 80066cc:	61da      	str	r2, [r3, #28]
      break;
 80066ce:	e050      	b.n	8006772 <HAL_TIM_PWM_ConfigChannel+0x312>
 80066d0:	0800bc00 	.word	0x0800bc00
 80066d4:	40012c00 	.word	0x40012c00
 80066d8:	40013400 	.word	0x40013400
 80066dc:	40000400 	.word	0x40000400
 80066e0:	40000800 	.word	0x40000800
 80066e4:	40000c00 	.word	0x40000c00
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a25      	ldr	r2, [pc, #148]	; (8006784 <HAL_TIM_PWM_ConfigChannel+0x324>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d01d      	beq.n	800672e <HAL_TIM_PWM_ConfigChannel+0x2ce>
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a24      	ldr	r2, [pc, #144]	; (8006788 <HAL_TIM_PWM_ConfigChannel+0x328>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d018      	beq.n	800672e <HAL_TIM_PWM_ConfigChannel+0x2ce>
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006704:	d013      	beq.n	800672e <HAL_TIM_PWM_ConfigChannel+0x2ce>
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a20      	ldr	r2, [pc, #128]	; (800678c <HAL_TIM_PWM_ConfigChannel+0x32c>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d00e      	beq.n	800672e <HAL_TIM_PWM_ConfigChannel+0x2ce>
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a1e      	ldr	r2, [pc, #120]	; (8006790 <HAL_TIM_PWM_ConfigChannel+0x330>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d009      	beq.n	800672e <HAL_TIM_PWM_ConfigChannel+0x2ce>
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a1d      	ldr	r2, [pc, #116]	; (8006794 <HAL_TIM_PWM_ConfigChannel+0x334>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d004      	beq.n	800672e <HAL_TIM_PWM_ConfigChannel+0x2ce>
 8006724:	f241 0167 	movw	r1, #4199	; 0x1067
 8006728:	481b      	ldr	r0, [pc, #108]	; (8006798 <HAL_TIM_PWM_ConfigChannel+0x338>)
 800672a:	f7fb f82f 	bl	800178c <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	68b9      	ldr	r1, [r7, #8]
 8006734:	4618      	mov	r0, r3
 8006736:	f000 fddb 	bl	80072f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	69da      	ldr	r2, [r3, #28]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006748:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	69da      	ldr	r2, [r3, #28]
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006758:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	69d9      	ldr	r1, [r3, #28]
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	691b      	ldr	r3, [r3, #16]
 8006764:	021a      	lsls	r2, r3, #8
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	430a      	orrs	r2, r1
 800676c:	61da      	str	r2, [r3, #28]
      break;
 800676e:	e000      	b.n	8006772 <HAL_TIM_PWM_ConfigChannel+0x312>
    }

    default:
      break;
 8006770:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2200      	movs	r2, #0
 8006776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800677a:	2300      	movs	r3, #0
}
 800677c:	4618      	mov	r0, r3
 800677e:	3710      	adds	r7, #16
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}
 8006784:	40012c00 	.word	0x40012c00
 8006788:	40013400 	.word	0x40013400
 800678c:	40000400 	.word	0x40000400
 8006790:	40000800 	.word	0x40000800
 8006794:	40000c00 	.word	0x40000c00
 8006798:	0800bc00 	.word	0x0800bc00

0800679c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b084      	sub	sp, #16
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d101      	bne.n	80067b4 <HAL_TIM_ConfigClockSource+0x18>
 80067b0:	2302      	movs	r3, #2
 80067b2:	e2f5      	b.n	8006da0 <HAL_TIM_ConfigClockSource+0x604>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2201      	movs	r2, #1
 80067b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2202      	movs	r2, #2
 80067c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067cc:	d029      	beq.n	8006822 <HAL_TIM_ConfigClockSource+0x86>
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067d6:	d024      	beq.n	8006822 <HAL_TIM_ConfigClockSource+0x86>
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d020      	beq.n	8006822 <HAL_TIM_ConfigClockSource+0x86>
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	2b10      	cmp	r3, #16
 80067e6:	d01c      	beq.n	8006822 <HAL_TIM_ConfigClockSource+0x86>
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	2b20      	cmp	r3, #32
 80067ee:	d018      	beq.n	8006822 <HAL_TIM_ConfigClockSource+0x86>
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	2b30      	cmp	r3, #48	; 0x30
 80067f6:	d014      	beq.n	8006822 <HAL_TIM_ConfigClockSource+0x86>
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	2b40      	cmp	r3, #64	; 0x40
 80067fe:	d010      	beq.n	8006822 <HAL_TIM_ConfigClockSource+0x86>
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	2b50      	cmp	r3, #80	; 0x50
 8006806:	d00c      	beq.n	8006822 <HAL_TIM_ConfigClockSource+0x86>
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	2b60      	cmp	r3, #96	; 0x60
 800680e:	d008      	beq.n	8006822 <HAL_TIM_ConfigClockSource+0x86>
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	2b70      	cmp	r3, #112	; 0x70
 8006816:	d004      	beq.n	8006822 <HAL_TIM_ConfigClockSource+0x86>
 8006818:	f241 4132 	movw	r1, #5170	; 0x1432
 800681c:	487c      	ldr	r0, [pc, #496]	; (8006a10 <HAL_TIM_ConfigClockSource+0x274>)
 800681e:	f7fa ffb5 	bl	800178c <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	689b      	ldr	r3, [r3, #8]
 8006828:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006830:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006838:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	68fa      	ldr	r2, [r7, #12]
 8006840:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800684a:	f000 80f1 	beq.w	8006a30 <HAL_TIM_ConfigClockSource+0x294>
 800684e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006852:	f200 8299 	bhi.w	8006d88 <HAL_TIM_ConfigClockSource+0x5ec>
 8006856:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800685a:	d02d      	beq.n	80068b8 <HAL_TIM_ConfigClockSource+0x11c>
 800685c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006860:	f200 8292 	bhi.w	8006d88 <HAL_TIM_ConfigClockSource+0x5ec>
 8006864:	2b70      	cmp	r3, #112	; 0x70
 8006866:	d05d      	beq.n	8006924 <HAL_TIM_ConfigClockSource+0x188>
 8006868:	2b70      	cmp	r3, #112	; 0x70
 800686a:	f200 828d 	bhi.w	8006d88 <HAL_TIM_ConfigClockSource+0x5ec>
 800686e:	2b60      	cmp	r3, #96	; 0x60
 8006870:	f000 81a5 	beq.w	8006bbe <HAL_TIM_ConfigClockSource+0x422>
 8006874:	2b60      	cmp	r3, #96	; 0x60
 8006876:	f200 8287 	bhi.w	8006d88 <HAL_TIM_ConfigClockSource+0x5ec>
 800687a:	2b50      	cmp	r3, #80	; 0x50
 800687c:	f000 8149 	beq.w	8006b12 <HAL_TIM_ConfigClockSource+0x376>
 8006880:	2b50      	cmp	r3, #80	; 0x50
 8006882:	f200 8281 	bhi.w	8006d88 <HAL_TIM_ConfigClockSource+0x5ec>
 8006886:	2b40      	cmp	r3, #64	; 0x40
 8006888:	f000 81fc 	beq.w	8006c84 <HAL_TIM_ConfigClockSource+0x4e8>
 800688c:	2b40      	cmp	r3, #64	; 0x40
 800688e:	f200 827b 	bhi.w	8006d88 <HAL_TIM_ConfigClockSource+0x5ec>
 8006892:	2b30      	cmp	r3, #48	; 0x30
 8006894:	f000 824c 	beq.w	8006d30 <HAL_TIM_ConfigClockSource+0x594>
 8006898:	2b30      	cmp	r3, #48	; 0x30
 800689a:	f200 8275 	bhi.w	8006d88 <HAL_TIM_ConfigClockSource+0x5ec>
 800689e:	2b20      	cmp	r3, #32
 80068a0:	f000 8246 	beq.w	8006d30 <HAL_TIM_ConfigClockSource+0x594>
 80068a4:	2b20      	cmp	r3, #32
 80068a6:	f200 826f 	bhi.w	8006d88 <HAL_TIM_ConfigClockSource+0x5ec>
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	f000 8240 	beq.w	8006d30 <HAL_TIM_ConfigClockSource+0x594>
 80068b0:	2b10      	cmp	r3, #16
 80068b2:	f000 823d 	beq.w	8006d30 <HAL_TIM_ConfigClockSource+0x594>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80068b6:	e267      	b.n	8006d88 <HAL_TIM_ConfigClockSource+0x5ec>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a55      	ldr	r2, [pc, #340]	; (8006a14 <HAL_TIM_ConfigClockSource+0x278>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	f000 8264 	beq.w	8006d8c <HAL_TIM_ConfigClockSource+0x5f0>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a53      	ldr	r2, [pc, #332]	; (8006a18 <HAL_TIM_ConfigClockSource+0x27c>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	f000 825e 	beq.w	8006d8c <HAL_TIM_ConfigClockSource+0x5f0>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068d8:	f000 8258 	beq.w	8006d8c <HAL_TIM_ConfigClockSource+0x5f0>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a4e      	ldr	r2, [pc, #312]	; (8006a1c <HAL_TIM_ConfigClockSource+0x280>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	f000 8252 	beq.w	8006d8c <HAL_TIM_ConfigClockSource+0x5f0>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a4c      	ldr	r2, [pc, #304]	; (8006a20 <HAL_TIM_ConfigClockSource+0x284>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	f000 824c 	beq.w	8006d8c <HAL_TIM_ConfigClockSource+0x5f0>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a4a      	ldr	r2, [pc, #296]	; (8006a24 <HAL_TIM_ConfigClockSource+0x288>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	f000 8246 	beq.w	8006d8c <HAL_TIM_ConfigClockSource+0x5f0>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a48      	ldr	r2, [pc, #288]	; (8006a28 <HAL_TIM_ConfigClockSource+0x28c>)
 8006906:	4293      	cmp	r3, r2
 8006908:	f000 8240 	beq.w	8006d8c <HAL_TIM_ConfigClockSource+0x5f0>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a46      	ldr	r2, [pc, #280]	; (8006a2c <HAL_TIM_ConfigClockSource+0x290>)
 8006912:	4293      	cmp	r3, r2
 8006914:	f000 823a 	beq.w	8006d8c <HAL_TIM_ConfigClockSource+0x5f0>
 8006918:	f241 413e 	movw	r1, #5182	; 0x143e
 800691c:	483c      	ldr	r0, [pc, #240]	; (8006a10 <HAL_TIM_ConfigClockSource+0x274>)
 800691e:	f7fa ff35 	bl	800178c <assert_failed>
      break;
 8006922:	e233      	b.n	8006d8c <HAL_TIM_ConfigClockSource+0x5f0>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a3a      	ldr	r2, [pc, #232]	; (8006a14 <HAL_TIM_ConfigClockSource+0x278>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d01d      	beq.n	800696a <HAL_TIM_ConfigClockSource+0x1ce>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4a39      	ldr	r2, [pc, #228]	; (8006a18 <HAL_TIM_ConfigClockSource+0x27c>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d018      	beq.n	800696a <HAL_TIM_ConfigClockSource+0x1ce>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006940:	d013      	beq.n	800696a <HAL_TIM_ConfigClockSource+0x1ce>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a35      	ldr	r2, [pc, #212]	; (8006a1c <HAL_TIM_ConfigClockSource+0x280>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d00e      	beq.n	800696a <HAL_TIM_ConfigClockSource+0x1ce>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a33      	ldr	r2, [pc, #204]	; (8006a20 <HAL_TIM_ConfigClockSource+0x284>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d009      	beq.n	800696a <HAL_TIM_ConfigClockSource+0x1ce>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a32      	ldr	r2, [pc, #200]	; (8006a24 <HAL_TIM_ConfigClockSource+0x288>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d004      	beq.n	800696a <HAL_TIM_ConfigClockSource+0x1ce>
 8006960:	f241 4145 	movw	r1, #5189	; 0x1445
 8006964:	482a      	ldr	r0, [pc, #168]	; (8006a10 <HAL_TIM_ConfigClockSource+0x274>)
 8006966:	f7fa ff11 	bl	800178c <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	689b      	ldr	r3, [r3, #8]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d013      	beq.n	800699a <HAL_TIM_ConfigClockSource+0x1fe>
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	689b      	ldr	r3, [r3, #8]
 8006976:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800697a:	d00e      	beq.n	800699a <HAL_TIM_ConfigClockSource+0x1fe>
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	689b      	ldr	r3, [r3, #8]
 8006980:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006984:	d009      	beq.n	800699a <HAL_TIM_ConfigClockSource+0x1fe>
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	689b      	ldr	r3, [r3, #8]
 800698a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800698e:	d004      	beq.n	800699a <HAL_TIM_ConfigClockSource+0x1fe>
 8006990:	f241 4148 	movw	r1, #5192	; 0x1448
 8006994:	481e      	ldr	r0, [pc, #120]	; (8006a10 <HAL_TIM_ConfigClockSource+0x274>)
 8006996:	f7fa fef9 	bl	800178c <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069a2:	d014      	beq.n	80069ce <HAL_TIM_ConfigClockSource+0x232>
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d010      	beq.n	80069ce <HAL_TIM_ConfigClockSource+0x232>
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d00c      	beq.n	80069ce <HAL_TIM_ConfigClockSource+0x232>
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	2b02      	cmp	r3, #2
 80069ba:	d008      	beq.n	80069ce <HAL_TIM_ConfigClockSource+0x232>
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	2b0a      	cmp	r3, #10
 80069c2:	d004      	beq.n	80069ce <HAL_TIM_ConfigClockSource+0x232>
 80069c4:	f241 4149 	movw	r1, #5193	; 0x1449
 80069c8:	4811      	ldr	r0, [pc, #68]	; (8006a10 <HAL_TIM_ConfigClockSource+0x274>)
 80069ca:	f7fa fedf 	bl	800178c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	68db      	ldr	r3, [r3, #12]
 80069d2:	2b0f      	cmp	r3, #15
 80069d4:	d904      	bls.n	80069e0 <HAL_TIM_ConfigClockSource+0x244>
 80069d6:	f241 414a 	movw	r1, #5194	; 0x144a
 80069da:	480d      	ldr	r0, [pc, #52]	; (8006a10 <HAL_TIM_ConfigClockSource+0x274>)
 80069dc:	f7fa fed6 	bl	800178c <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6818      	ldr	r0, [r3, #0]
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	6899      	ldr	r1, [r3, #8]
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	685a      	ldr	r2, [r3, #4]
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	68db      	ldr	r3, [r3, #12]
 80069f0:	f000 fd59 	bl	80074a6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006a02:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	68fa      	ldr	r2, [r7, #12]
 8006a0a:	609a      	str	r2, [r3, #8]
      break;
 8006a0c:	e1bf      	b.n	8006d8e <HAL_TIM_ConfigClockSource+0x5f2>
 8006a0e:	bf00      	nop
 8006a10:	0800bc00 	.word	0x0800bc00
 8006a14:	40012c00 	.word	0x40012c00
 8006a18:	40013400 	.word	0x40013400
 8006a1c:	40000400 	.word	0x40000400
 8006a20:	40000800 	.word	0x40000800
 8006a24:	40000c00 	.word	0x40000c00
 8006a28:	40001000 	.word	0x40001000
 8006a2c:	40001400 	.word	0x40001400
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a8d      	ldr	r2, [pc, #564]	; (8006c6c <HAL_TIM_ConfigClockSource+0x4d0>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d01d      	beq.n	8006a76 <HAL_TIM_ConfigClockSource+0x2da>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a8c      	ldr	r2, [pc, #560]	; (8006c70 <HAL_TIM_ConfigClockSource+0x4d4>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d018      	beq.n	8006a76 <HAL_TIM_ConfigClockSource+0x2da>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a4c:	d013      	beq.n	8006a76 <HAL_TIM_ConfigClockSource+0x2da>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a88      	ldr	r2, [pc, #544]	; (8006c74 <HAL_TIM_ConfigClockSource+0x4d8>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d00e      	beq.n	8006a76 <HAL_TIM_ConfigClockSource+0x2da>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a86      	ldr	r2, [pc, #536]	; (8006c78 <HAL_TIM_ConfigClockSource+0x4dc>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d009      	beq.n	8006a76 <HAL_TIM_ConfigClockSource+0x2da>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a85      	ldr	r2, [pc, #532]	; (8006c7c <HAL_TIM_ConfigClockSource+0x4e0>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d004      	beq.n	8006a76 <HAL_TIM_ConfigClockSource+0x2da>
 8006a6c:	f241 415d 	movw	r1, #5213	; 0x145d
 8006a70:	4883      	ldr	r0, [pc, #524]	; (8006c80 <HAL_TIM_ConfigClockSource+0x4e4>)
 8006a72:	f7fa fe8b 	bl	800178c <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	689b      	ldr	r3, [r3, #8]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d013      	beq.n	8006aa6 <HAL_TIM_ConfigClockSource+0x30a>
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a86:	d00e      	beq.n	8006aa6 <HAL_TIM_ConfigClockSource+0x30a>
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	689b      	ldr	r3, [r3, #8]
 8006a8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a90:	d009      	beq.n	8006aa6 <HAL_TIM_ConfigClockSource+0x30a>
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	689b      	ldr	r3, [r3, #8]
 8006a96:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006a9a:	d004      	beq.n	8006aa6 <HAL_TIM_ConfigClockSource+0x30a>
 8006a9c:	f44f 51a3 	mov.w	r1, #5216	; 0x1460
 8006aa0:	4877      	ldr	r0, [pc, #476]	; (8006c80 <HAL_TIM_ConfigClockSource+0x4e4>)
 8006aa2:	f7fa fe73 	bl	800178c <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006aae:	d014      	beq.n	8006ada <HAL_TIM_ConfigClockSource+0x33e>
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d010      	beq.n	8006ada <HAL_TIM_ConfigClockSource+0x33e>
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d00c      	beq.n	8006ada <HAL_TIM_ConfigClockSource+0x33e>
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	2b02      	cmp	r3, #2
 8006ac6:	d008      	beq.n	8006ada <HAL_TIM_ConfigClockSource+0x33e>
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	2b0a      	cmp	r3, #10
 8006ace:	d004      	beq.n	8006ada <HAL_TIM_ConfigClockSource+0x33e>
 8006ad0:	f241 4161 	movw	r1, #5217	; 0x1461
 8006ad4:	486a      	ldr	r0, [pc, #424]	; (8006c80 <HAL_TIM_ConfigClockSource+0x4e4>)
 8006ad6:	f7fa fe59 	bl	800178c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	68db      	ldr	r3, [r3, #12]
 8006ade:	2b0f      	cmp	r3, #15
 8006ae0:	d904      	bls.n	8006aec <HAL_TIM_ConfigClockSource+0x350>
 8006ae2:	f241 4162 	movw	r1, #5218	; 0x1462
 8006ae6:	4866      	ldr	r0, [pc, #408]	; (8006c80 <HAL_TIM_ConfigClockSource+0x4e4>)
 8006ae8:	f7fa fe50 	bl	800178c <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6818      	ldr	r0, [r3, #0]
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	6899      	ldr	r1, [r3, #8]
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	685a      	ldr	r2, [r3, #4]
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	68db      	ldr	r3, [r3, #12]
 8006afc:	f000 fcd3 	bl	80074a6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	689a      	ldr	r2, [r3, #8]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b0e:	609a      	str	r2, [r3, #8]
      break;
 8006b10:	e13d      	b.n	8006d8e <HAL_TIM_ConfigClockSource+0x5f2>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4a55      	ldr	r2, [pc, #340]	; (8006c6c <HAL_TIM_ConfigClockSource+0x4d0>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d01d      	beq.n	8006b58 <HAL_TIM_ConfigClockSource+0x3bc>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a53      	ldr	r2, [pc, #332]	; (8006c70 <HAL_TIM_ConfigClockSource+0x4d4>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d018      	beq.n	8006b58 <HAL_TIM_ConfigClockSource+0x3bc>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b2e:	d013      	beq.n	8006b58 <HAL_TIM_ConfigClockSource+0x3bc>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a4f      	ldr	r2, [pc, #316]	; (8006c74 <HAL_TIM_ConfigClockSource+0x4d8>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d00e      	beq.n	8006b58 <HAL_TIM_ConfigClockSource+0x3bc>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a4e      	ldr	r2, [pc, #312]	; (8006c78 <HAL_TIM_ConfigClockSource+0x4dc>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d009      	beq.n	8006b58 <HAL_TIM_ConfigClockSource+0x3bc>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a4c      	ldr	r2, [pc, #304]	; (8006c7c <HAL_TIM_ConfigClockSource+0x4e0>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d004      	beq.n	8006b58 <HAL_TIM_ConfigClockSource+0x3bc>
 8006b4e:	f241 4171 	movw	r1, #5233	; 0x1471
 8006b52:	484b      	ldr	r0, [pc, #300]	; (8006c80 <HAL_TIM_ConfigClockSource+0x4e4>)
 8006b54:	f7fa fe1a 	bl	800178c <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b60:	d014      	beq.n	8006b8c <HAL_TIM_ConfigClockSource+0x3f0>
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d010      	beq.n	8006b8c <HAL_TIM_ConfigClockSource+0x3f0>
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d00c      	beq.n	8006b8c <HAL_TIM_ConfigClockSource+0x3f0>
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	2b02      	cmp	r3, #2
 8006b78:	d008      	beq.n	8006b8c <HAL_TIM_ConfigClockSource+0x3f0>
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	2b0a      	cmp	r3, #10
 8006b80:	d004      	beq.n	8006b8c <HAL_TIM_ConfigClockSource+0x3f0>
 8006b82:	f241 4174 	movw	r1, #5236	; 0x1474
 8006b86:	483e      	ldr	r0, [pc, #248]	; (8006c80 <HAL_TIM_ConfigClockSource+0x4e4>)
 8006b88:	f7fa fe00 	bl	800178c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	68db      	ldr	r3, [r3, #12]
 8006b90:	2b0f      	cmp	r3, #15
 8006b92:	d904      	bls.n	8006b9e <HAL_TIM_ConfigClockSource+0x402>
 8006b94:	f241 4175 	movw	r1, #5237	; 0x1475
 8006b98:	4839      	ldr	r0, [pc, #228]	; (8006c80 <HAL_TIM_ConfigClockSource+0x4e4>)
 8006b9a:	f7fa fdf7 	bl	800178c <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6818      	ldr	r0, [r3, #0]
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	6859      	ldr	r1, [r3, #4]
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	68db      	ldr	r3, [r3, #12]
 8006baa:	461a      	mov	r2, r3
 8006bac:	f000 fc04 	bl	80073b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	2150      	movs	r1, #80	; 0x50
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f000 fc5b 	bl	8007472 <TIM_ITRx_SetConfig>
      break;
 8006bbc:	e0e7      	b.n	8006d8e <HAL_TIM_ConfigClockSource+0x5f2>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a2a      	ldr	r2, [pc, #168]	; (8006c6c <HAL_TIM_ConfigClockSource+0x4d0>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d01d      	beq.n	8006c04 <HAL_TIM_ConfigClockSource+0x468>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a28      	ldr	r2, [pc, #160]	; (8006c70 <HAL_TIM_ConfigClockSource+0x4d4>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d018      	beq.n	8006c04 <HAL_TIM_ConfigClockSource+0x468>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bda:	d013      	beq.n	8006c04 <HAL_TIM_ConfigClockSource+0x468>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a24      	ldr	r2, [pc, #144]	; (8006c74 <HAL_TIM_ConfigClockSource+0x4d8>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d00e      	beq.n	8006c04 <HAL_TIM_ConfigClockSource+0x468>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a23      	ldr	r2, [pc, #140]	; (8006c78 <HAL_TIM_ConfigClockSource+0x4dc>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d009      	beq.n	8006c04 <HAL_TIM_ConfigClockSource+0x468>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a21      	ldr	r2, [pc, #132]	; (8006c7c <HAL_TIM_ConfigClockSource+0x4e0>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d004      	beq.n	8006c04 <HAL_TIM_ConfigClockSource+0x468>
 8006bfa:	f241 4181 	movw	r1, #5249	; 0x1481
 8006bfe:	4820      	ldr	r0, [pc, #128]	; (8006c80 <HAL_TIM_ConfigClockSource+0x4e4>)
 8006c00:	f7fa fdc4 	bl	800178c <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c0c:	d014      	beq.n	8006c38 <HAL_TIM_ConfigClockSource+0x49c>
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d010      	beq.n	8006c38 <HAL_TIM_ConfigClockSource+0x49c>
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d00c      	beq.n	8006c38 <HAL_TIM_ConfigClockSource+0x49c>
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	2b02      	cmp	r3, #2
 8006c24:	d008      	beq.n	8006c38 <HAL_TIM_ConfigClockSource+0x49c>
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	2b0a      	cmp	r3, #10
 8006c2c:	d004      	beq.n	8006c38 <HAL_TIM_ConfigClockSource+0x49c>
 8006c2e:	f241 4184 	movw	r1, #5252	; 0x1484
 8006c32:	4813      	ldr	r0, [pc, #76]	; (8006c80 <HAL_TIM_ConfigClockSource+0x4e4>)
 8006c34:	f7fa fdaa 	bl	800178c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	68db      	ldr	r3, [r3, #12]
 8006c3c:	2b0f      	cmp	r3, #15
 8006c3e:	d904      	bls.n	8006c4a <HAL_TIM_ConfigClockSource+0x4ae>
 8006c40:	f241 4185 	movw	r1, #5253	; 0x1485
 8006c44:	480e      	ldr	r0, [pc, #56]	; (8006c80 <HAL_TIM_ConfigClockSource+0x4e4>)
 8006c46:	f7fa fda1 	bl	800178c <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6818      	ldr	r0, [r3, #0]
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	6859      	ldr	r1, [r3, #4]
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	68db      	ldr	r3, [r3, #12]
 8006c56:	461a      	mov	r2, r3
 8006c58:	f000 fbdc 	bl	8007414 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	2160      	movs	r1, #96	; 0x60
 8006c62:	4618      	mov	r0, r3
 8006c64:	f000 fc05 	bl	8007472 <TIM_ITRx_SetConfig>
      break;
 8006c68:	e091      	b.n	8006d8e <HAL_TIM_ConfigClockSource+0x5f2>
 8006c6a:	bf00      	nop
 8006c6c:	40012c00 	.word	0x40012c00
 8006c70:	40013400 	.word	0x40013400
 8006c74:	40000400 	.word	0x40000400
 8006c78:	40000800 	.word	0x40000800
 8006c7c:	40000c00 	.word	0x40000c00
 8006c80:	0800bc00 	.word	0x0800bc00
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a47      	ldr	r2, [pc, #284]	; (8006da8 <HAL_TIM_ConfigClockSource+0x60c>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d01d      	beq.n	8006cca <HAL_TIM_ConfigClockSource+0x52e>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a46      	ldr	r2, [pc, #280]	; (8006dac <HAL_TIM_ConfigClockSource+0x610>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d018      	beq.n	8006cca <HAL_TIM_ConfigClockSource+0x52e>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ca0:	d013      	beq.n	8006cca <HAL_TIM_ConfigClockSource+0x52e>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a42      	ldr	r2, [pc, #264]	; (8006db0 <HAL_TIM_ConfigClockSource+0x614>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d00e      	beq.n	8006cca <HAL_TIM_ConfigClockSource+0x52e>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a40      	ldr	r2, [pc, #256]	; (8006db4 <HAL_TIM_ConfigClockSource+0x618>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d009      	beq.n	8006cca <HAL_TIM_ConfigClockSource+0x52e>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a3f      	ldr	r2, [pc, #252]	; (8006db8 <HAL_TIM_ConfigClockSource+0x61c>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d004      	beq.n	8006cca <HAL_TIM_ConfigClockSource+0x52e>
 8006cc0:	f241 4191 	movw	r1, #5265	; 0x1491
 8006cc4:	483d      	ldr	r0, [pc, #244]	; (8006dbc <HAL_TIM_ConfigClockSource+0x620>)
 8006cc6:	f7fa fd61 	bl	800178c <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cd2:	d014      	beq.n	8006cfe <HAL_TIM_ConfigClockSource+0x562>
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d010      	beq.n	8006cfe <HAL_TIM_ConfigClockSource+0x562>
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	685b      	ldr	r3, [r3, #4]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d00c      	beq.n	8006cfe <HAL_TIM_ConfigClockSource+0x562>
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	2b02      	cmp	r3, #2
 8006cea:	d008      	beq.n	8006cfe <HAL_TIM_ConfigClockSource+0x562>
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	2b0a      	cmp	r3, #10
 8006cf2:	d004      	beq.n	8006cfe <HAL_TIM_ConfigClockSource+0x562>
 8006cf4:	f241 4194 	movw	r1, #5268	; 0x1494
 8006cf8:	4830      	ldr	r0, [pc, #192]	; (8006dbc <HAL_TIM_ConfigClockSource+0x620>)
 8006cfa:	f7fa fd47 	bl	800178c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	68db      	ldr	r3, [r3, #12]
 8006d02:	2b0f      	cmp	r3, #15
 8006d04:	d904      	bls.n	8006d10 <HAL_TIM_ConfigClockSource+0x574>
 8006d06:	f241 4195 	movw	r1, #5269	; 0x1495
 8006d0a:	482c      	ldr	r0, [pc, #176]	; (8006dbc <HAL_TIM_ConfigClockSource+0x620>)
 8006d0c:	f7fa fd3e 	bl	800178c <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6818      	ldr	r0, [r3, #0]
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	6859      	ldr	r1, [r3, #4]
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	68db      	ldr	r3, [r3, #12]
 8006d1c:	461a      	mov	r2, r3
 8006d1e:	f000 fb4b 	bl	80073b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	2140      	movs	r1, #64	; 0x40
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f000 fba2 	bl	8007472 <TIM_ITRx_SetConfig>
      break;
 8006d2e:	e02e      	b.n	8006d8e <HAL_TIM_ConfigClockSource+0x5f2>
        assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a1c      	ldr	r2, [pc, #112]	; (8006da8 <HAL_TIM_ConfigClockSource+0x60c>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d01d      	beq.n	8006d76 <HAL_TIM_ConfigClockSource+0x5da>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a1b      	ldr	r2, [pc, #108]	; (8006dac <HAL_TIM_ConfigClockSource+0x610>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d018      	beq.n	8006d76 <HAL_TIM_ConfigClockSource+0x5da>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d4c:	d013      	beq.n	8006d76 <HAL_TIM_ConfigClockSource+0x5da>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a17      	ldr	r2, [pc, #92]	; (8006db0 <HAL_TIM_ConfigClockSource+0x614>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d00e      	beq.n	8006d76 <HAL_TIM_ConfigClockSource+0x5da>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a15      	ldr	r2, [pc, #84]	; (8006db4 <HAL_TIM_ConfigClockSource+0x618>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d009      	beq.n	8006d76 <HAL_TIM_ConfigClockSource+0x5da>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4a14      	ldr	r2, [pc, #80]	; (8006db8 <HAL_TIM_ConfigClockSource+0x61c>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d004      	beq.n	8006d76 <HAL_TIM_ConfigClockSource+0x5da>
 8006d6c:	f241 41a4 	movw	r1, #5284	; 0x14a4
 8006d70:	4812      	ldr	r0, [pc, #72]	; (8006dbc <HAL_TIM_ConfigClockSource+0x620>)
 8006d72:	f7fa fd0b 	bl	800178c <assert_failed>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681a      	ldr	r2, [r3, #0]
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4619      	mov	r1, r3
 8006d80:	4610      	mov	r0, r2
 8006d82:	f000 fb76 	bl	8007472 <TIM_ITRx_SetConfig>
        break;
 8006d86:	e002      	b.n	8006d8e <HAL_TIM_ConfigClockSource+0x5f2>
      break;
 8006d88:	bf00      	nop
 8006d8a:	e000      	b.n	8006d8e <HAL_TIM_ConfigClockSource+0x5f2>
      break;
 8006d8c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2201      	movs	r2, #1
 8006d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d9e:	2300      	movs	r3, #0
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3710      	adds	r7, #16
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}
 8006da8:	40012c00 	.word	0x40012c00
 8006dac:	40013400 	.word	0x40013400
 8006db0:	40000400 	.word	0x40000400
 8006db4:	40000800 	.word	0x40000800
 8006db8:	40000c00 	.word	0x40000c00
 8006dbc:	0800bc00 	.word	0x0800bc00

08006dc0 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b083      	sub	sp, #12
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8006dc8:	bf00      	nop
 8006dca:	370c      	adds	r7, #12
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bc80      	pop	{r7}
 8006dd0:	4770      	bx	lr

08006dd2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006dd2:	b480      	push	{r7}
 8006dd4:	b083      	sub	sp, #12
 8006dd6:	af00      	add	r7, sp, #0
 8006dd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006dda:	bf00      	nop
 8006ddc:	370c      	adds	r7, #12
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bc80      	pop	{r7}
 8006de2:	4770      	bx	lr

08006de4 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b083      	sub	sp, #12
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8006dec:	bf00      	nop
 8006dee:	370c      	adds	r7, #12
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bc80      	pop	{r7}
 8006df4:	4770      	bx	lr

08006df6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006df6:	b480      	push	{r7}
 8006df8:	b083      	sub	sp, #12
 8006dfa:	af00      	add	r7, sp, #0
 8006dfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006dfe:	bf00      	nop
 8006e00:	370c      	adds	r7, #12
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bc80      	pop	{r7}
 8006e06:	4770      	bx	lr

08006e08 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b083      	sub	sp, #12
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8006e10:	bf00      	nop
 8006e12:	370c      	adds	r7, #12
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bc80      	pop	{r7}
 8006e18:	4770      	bx	lr

08006e1a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006e1a:	b480      	push	{r7}
 8006e1c:	b083      	sub	sp, #12
 8006e1e:	af00      	add	r7, sp, #0
 8006e20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006e22:	bf00      	nop
 8006e24:	370c      	adds	r7, #12
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bc80      	pop	{r7}
 8006e2a:	4770      	bx	lr

08006e2c <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b083      	sub	sp, #12
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8006e34:	bf00      	nop
 8006e36:	370c      	adds	r7, #12
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bc80      	pop	{r7}
 8006e3c:	4770      	bx	lr

08006e3e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8006e3e:	b480      	push	{r7}
 8006e40:	b083      	sub	sp, #12
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8006e46:	bf00      	nop
 8006e48:	370c      	adds	r7, #12
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bc80      	pop	{r7}
 8006e4e:	4770      	bx	lr

08006e50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b085      	sub	sp, #20
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
 8006e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	4a33      	ldr	r2, [pc, #204]	; (8006f30 <TIM_Base_SetConfig+0xe0>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d013      	beq.n	8006e90 <TIM_Base_SetConfig+0x40>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	4a32      	ldr	r2, [pc, #200]	; (8006f34 <TIM_Base_SetConfig+0xe4>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d00f      	beq.n	8006e90 <TIM_Base_SetConfig+0x40>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e76:	d00b      	beq.n	8006e90 <TIM_Base_SetConfig+0x40>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	4a2f      	ldr	r2, [pc, #188]	; (8006f38 <TIM_Base_SetConfig+0xe8>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d007      	beq.n	8006e90 <TIM_Base_SetConfig+0x40>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	4a2e      	ldr	r2, [pc, #184]	; (8006f3c <TIM_Base_SetConfig+0xec>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d003      	beq.n	8006e90 <TIM_Base_SetConfig+0x40>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	4a2d      	ldr	r2, [pc, #180]	; (8006f40 <TIM_Base_SetConfig+0xf0>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d108      	bne.n	8006ea2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	68fa      	ldr	r2, [r7, #12]
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	4a22      	ldr	r2, [pc, #136]	; (8006f30 <TIM_Base_SetConfig+0xe0>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d013      	beq.n	8006ed2 <TIM_Base_SetConfig+0x82>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	4a21      	ldr	r2, [pc, #132]	; (8006f34 <TIM_Base_SetConfig+0xe4>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d00f      	beq.n	8006ed2 <TIM_Base_SetConfig+0x82>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006eb8:	d00b      	beq.n	8006ed2 <TIM_Base_SetConfig+0x82>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	4a1e      	ldr	r2, [pc, #120]	; (8006f38 <TIM_Base_SetConfig+0xe8>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d007      	beq.n	8006ed2 <TIM_Base_SetConfig+0x82>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	4a1d      	ldr	r2, [pc, #116]	; (8006f3c <TIM_Base_SetConfig+0xec>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d003      	beq.n	8006ed2 <TIM_Base_SetConfig+0x82>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	4a1c      	ldr	r2, [pc, #112]	; (8006f40 <TIM_Base_SetConfig+0xf0>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d108      	bne.n	8006ee4 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ed8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	68db      	ldr	r3, [r3, #12]
 8006ede:	68fa      	ldr	r2, [r7, #12]
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	695b      	ldr	r3, [r3, #20]
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	68fa      	ldr	r2, [r7, #12]
 8006ef6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	689a      	ldr	r2, [r3, #8]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	681a      	ldr	r2, [r3, #0]
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	4a09      	ldr	r2, [pc, #36]	; (8006f30 <TIM_Base_SetConfig+0xe0>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d003      	beq.n	8006f18 <TIM_Base_SetConfig+0xc8>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	4a08      	ldr	r2, [pc, #32]	; (8006f34 <TIM_Base_SetConfig+0xe4>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d103      	bne.n	8006f20 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	691a      	ldr	r2, [r3, #16]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2201      	movs	r2, #1
 8006f24:	615a      	str	r2, [r3, #20]
}
 8006f26:	bf00      	nop
 8006f28:	3714      	adds	r7, #20
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bc80      	pop	{r7}
 8006f2e:	4770      	bx	lr
 8006f30:	40012c00 	.word	0x40012c00
 8006f34:	40013400 	.word	0x40013400
 8006f38:	40000400 	.word	0x40000400
 8006f3c:	40000800 	.word	0x40000800
 8006f40:	40000c00 	.word	0x40000c00

08006f44 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b086      	sub	sp, #24
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
 8006f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6a1b      	ldr	r3, [r3, #32]
 8006f52:	f023 0201 	bic.w	r2, r3, #1
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6a1b      	ldr	r3, [r3, #32]
 8006f5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	699b      	ldr	r3, [r3, #24]
 8006f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	f023 0303 	bic.w	r3, r3, #3
 8006f7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	68fa      	ldr	r2, [r7, #12]
 8006f82:	4313      	orrs	r3, r2
 8006f84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	f023 0302 	bic.w	r3, r3, #2
 8006f8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	689b      	ldr	r3, [r3, #8]
 8006f92:	697a      	ldr	r2, [r7, #20]
 8006f94:	4313      	orrs	r3, r2
 8006f96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	4a34      	ldr	r2, [pc, #208]	; (800706c <TIM_OC1_SetConfig+0x128>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d003      	beq.n	8006fa8 <TIM_OC1_SetConfig+0x64>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	4a33      	ldr	r2, [pc, #204]	; (8007070 <TIM_OC1_SetConfig+0x12c>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d119      	bne.n	8006fdc <TIM_OC1_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	68db      	ldr	r3, [r3, #12]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d008      	beq.n	8006fc2 <TIM_OC1_SetConfig+0x7e>
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	68db      	ldr	r3, [r3, #12]
 8006fb4:	2b08      	cmp	r3, #8
 8006fb6:	d004      	beq.n	8006fc2 <TIM_OC1_SetConfig+0x7e>
 8006fb8:	f641 2141 	movw	r1, #6721	; 0x1a41
 8006fbc:	482d      	ldr	r0, [pc, #180]	; (8007074 <TIM_OC1_SetConfig+0x130>)
 8006fbe:	f7fa fbe5 	bl	800178c <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	f023 0308 	bic.w	r3, r3, #8
 8006fc8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	68db      	ldr	r3, [r3, #12]
 8006fce:	697a      	ldr	r2, [r7, #20]
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	f023 0304 	bic.w	r3, r3, #4
 8006fda:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	4a23      	ldr	r2, [pc, #140]	; (800706c <TIM_OC1_SetConfig+0x128>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d003      	beq.n	8006fec <TIM_OC1_SetConfig+0xa8>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	4a22      	ldr	r2, [pc, #136]	; (8007070 <TIM_OC1_SetConfig+0x12c>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d12d      	bne.n	8007048 <TIM_OC1_SetConfig+0x104>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	699b      	ldr	r3, [r3, #24]
 8006ff0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ff4:	d008      	beq.n	8007008 <TIM_OC1_SetConfig+0xc4>
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	699b      	ldr	r3, [r3, #24]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d004      	beq.n	8007008 <TIM_OC1_SetConfig+0xc4>
 8006ffe:	f641 214e 	movw	r1, #6734	; 0x1a4e
 8007002:	481c      	ldr	r0, [pc, #112]	; (8007074 <TIM_OC1_SetConfig+0x130>)
 8007004:	f7fa fbc2 	bl	800178c <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	695b      	ldr	r3, [r3, #20]
 800700c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007010:	d008      	beq.n	8007024 <TIM_OC1_SetConfig+0xe0>
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	695b      	ldr	r3, [r3, #20]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d004      	beq.n	8007024 <TIM_OC1_SetConfig+0xe0>
 800701a:	f641 214f 	movw	r1, #6735	; 0x1a4f
 800701e:	4815      	ldr	r0, [pc, #84]	; (8007074 <TIM_OC1_SetConfig+0x130>)
 8007020:	f7fa fbb4 	bl	800178c <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800702a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007032:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	695b      	ldr	r3, [r3, #20]
 8007038:	693a      	ldr	r2, [r7, #16]
 800703a:	4313      	orrs	r3, r2
 800703c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	699b      	ldr	r3, [r3, #24]
 8007042:	693a      	ldr	r2, [r7, #16]
 8007044:	4313      	orrs	r3, r2
 8007046:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	693a      	ldr	r2, [r7, #16]
 800704c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	68fa      	ldr	r2, [r7, #12]
 8007052:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	685a      	ldr	r2, [r3, #4]
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	697a      	ldr	r2, [r7, #20]
 8007060:	621a      	str	r2, [r3, #32]
}
 8007062:	bf00      	nop
 8007064:	3718      	adds	r7, #24
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}
 800706a:	bf00      	nop
 800706c:	40012c00 	.word	0x40012c00
 8007070:	40013400 	.word	0x40013400
 8007074:	0800bc00 	.word	0x0800bc00

08007078 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b086      	sub	sp, #24
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
 8007080:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6a1b      	ldr	r3, [r3, #32]
 8007086:	f023 0210 	bic.w	r2, r3, #16
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6a1b      	ldr	r3, [r3, #32]
 8007092:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	699b      	ldr	r3, [r3, #24]
 800709e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	021b      	lsls	r3, r3, #8
 80070b6:	68fa      	ldr	r2, [r7, #12]
 80070b8:	4313      	orrs	r3, r2
 80070ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	f023 0320 	bic.w	r3, r3, #32
 80070c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	689b      	ldr	r3, [r3, #8]
 80070c8:	011b      	lsls	r3, r3, #4
 80070ca:	697a      	ldr	r2, [r7, #20]
 80070cc:	4313      	orrs	r3, r2
 80070ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	4a35      	ldr	r2, [pc, #212]	; (80071a8 <TIM_OC2_SetConfig+0x130>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d003      	beq.n	80070e0 <TIM_OC2_SetConfig+0x68>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	4a34      	ldr	r2, [pc, #208]	; (80071ac <TIM_OC2_SetConfig+0x134>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d11a      	bne.n	8007116 <TIM_OC2_SetConfig+0x9e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	68db      	ldr	r3, [r3, #12]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d008      	beq.n	80070fa <TIM_OC2_SetConfig+0x82>
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	68db      	ldr	r3, [r3, #12]
 80070ec:	2b08      	cmp	r3, #8
 80070ee:	d004      	beq.n	80070fa <TIM_OC2_SetConfig+0x82>
 80070f0:	f641 218c 	movw	r1, #6796	; 0x1a8c
 80070f4:	482e      	ldr	r0, [pc, #184]	; (80071b0 <TIM_OC2_SetConfig+0x138>)
 80070f6:	f7fa fb49 	bl	800178c <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007100:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	68db      	ldr	r3, [r3, #12]
 8007106:	011b      	lsls	r3, r3, #4
 8007108:	697a      	ldr	r2, [r7, #20]
 800710a:	4313      	orrs	r3, r2
 800710c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007114:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	4a23      	ldr	r2, [pc, #140]	; (80071a8 <TIM_OC2_SetConfig+0x130>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d003      	beq.n	8007126 <TIM_OC2_SetConfig+0xae>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	4a22      	ldr	r2, [pc, #136]	; (80071ac <TIM_OC2_SetConfig+0x134>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d12f      	bne.n	8007186 <TIM_OC2_SetConfig+0x10e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	699b      	ldr	r3, [r3, #24]
 800712a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800712e:	d008      	beq.n	8007142 <TIM_OC2_SetConfig+0xca>
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	699b      	ldr	r3, [r3, #24]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d004      	beq.n	8007142 <TIM_OC2_SetConfig+0xca>
 8007138:	f641 219a 	movw	r1, #6810	; 0x1a9a
 800713c:	481c      	ldr	r0, [pc, #112]	; (80071b0 <TIM_OC2_SetConfig+0x138>)
 800713e:	f7fa fb25 	bl	800178c <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	695b      	ldr	r3, [r3, #20]
 8007146:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800714a:	d008      	beq.n	800715e <TIM_OC2_SetConfig+0xe6>
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	695b      	ldr	r3, [r3, #20]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d004      	beq.n	800715e <TIM_OC2_SetConfig+0xe6>
 8007154:	f641 219b 	movw	r1, #6811	; 0x1a9b
 8007158:	4815      	ldr	r0, [pc, #84]	; (80071b0 <TIM_OC2_SetConfig+0x138>)
 800715a:	f7fa fb17 	bl	800178c <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007164:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800716c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	695b      	ldr	r3, [r3, #20]
 8007172:	009b      	lsls	r3, r3, #2
 8007174:	693a      	ldr	r2, [r7, #16]
 8007176:	4313      	orrs	r3, r2
 8007178:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	699b      	ldr	r3, [r3, #24]
 800717e:	009b      	lsls	r3, r3, #2
 8007180:	693a      	ldr	r2, [r7, #16]
 8007182:	4313      	orrs	r3, r2
 8007184:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	693a      	ldr	r2, [r7, #16]
 800718a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	68fa      	ldr	r2, [r7, #12]
 8007190:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	685a      	ldr	r2, [r3, #4]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	697a      	ldr	r2, [r7, #20]
 800719e:	621a      	str	r2, [r3, #32]
}
 80071a0:	bf00      	nop
 80071a2:	3718      	adds	r7, #24
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}
 80071a8:	40012c00 	.word	0x40012c00
 80071ac:	40013400 	.word	0x40013400
 80071b0:	0800bc00 	.word	0x0800bc00

080071b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b086      	sub	sp, #24
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
 80071bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6a1b      	ldr	r3, [r3, #32]
 80071c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6a1b      	ldr	r3, [r3, #32]
 80071ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	69db      	ldr	r3, [r3, #28]
 80071da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	f023 0303 	bic.w	r3, r3, #3
 80071ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	68fa      	ldr	r2, [r7, #12]
 80071f2:	4313      	orrs	r3, r2
 80071f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80071fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	689b      	ldr	r3, [r3, #8]
 8007202:	021b      	lsls	r3, r3, #8
 8007204:	697a      	ldr	r2, [r7, #20]
 8007206:	4313      	orrs	r3, r2
 8007208:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	4a35      	ldr	r2, [pc, #212]	; (80072e4 <TIM_OC3_SetConfig+0x130>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d003      	beq.n	800721a <TIM_OC3_SetConfig+0x66>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	4a34      	ldr	r2, [pc, #208]	; (80072e8 <TIM_OC3_SetConfig+0x134>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d11a      	bne.n	8007250 <TIM_OC3_SetConfig+0x9c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	68db      	ldr	r3, [r3, #12]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d008      	beq.n	8007234 <TIM_OC3_SetConfig+0x80>
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	68db      	ldr	r3, [r3, #12]
 8007226:	2b08      	cmp	r3, #8
 8007228:	d004      	beq.n	8007234 <TIM_OC3_SetConfig+0x80>
 800722a:	f641 21d7 	movw	r1, #6871	; 0x1ad7
 800722e:	482f      	ldr	r0, [pc, #188]	; (80072ec <TIM_OC3_SetConfig+0x138>)
 8007230:	f7fa faac 	bl	800178c <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800723a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	68db      	ldr	r3, [r3, #12]
 8007240:	021b      	lsls	r3, r3, #8
 8007242:	697a      	ldr	r2, [r7, #20]
 8007244:	4313      	orrs	r3, r2
 8007246:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800724e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	4a24      	ldr	r2, [pc, #144]	; (80072e4 <TIM_OC3_SetConfig+0x130>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d003      	beq.n	8007260 <TIM_OC3_SetConfig+0xac>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	4a23      	ldr	r2, [pc, #140]	; (80072e8 <TIM_OC3_SetConfig+0x134>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d12f      	bne.n	80072c0 <TIM_OC3_SetConfig+0x10c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	699b      	ldr	r3, [r3, #24]
 8007264:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007268:	d008      	beq.n	800727c <TIM_OC3_SetConfig+0xc8>
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	699b      	ldr	r3, [r3, #24]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d004      	beq.n	800727c <TIM_OC3_SetConfig+0xc8>
 8007272:	f641 21e4 	movw	r1, #6884	; 0x1ae4
 8007276:	481d      	ldr	r0, [pc, #116]	; (80072ec <TIM_OC3_SetConfig+0x138>)
 8007278:	f7fa fa88 	bl	800178c <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	695b      	ldr	r3, [r3, #20]
 8007280:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007284:	d008      	beq.n	8007298 <TIM_OC3_SetConfig+0xe4>
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	695b      	ldr	r3, [r3, #20]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d004      	beq.n	8007298 <TIM_OC3_SetConfig+0xe4>
 800728e:	f641 21e5 	movw	r1, #6885	; 0x1ae5
 8007292:	4816      	ldr	r0, [pc, #88]	; (80072ec <TIM_OC3_SetConfig+0x138>)
 8007294:	f7fa fa7a 	bl	800178c <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800729e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80072a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	695b      	ldr	r3, [r3, #20]
 80072ac:	011b      	lsls	r3, r3, #4
 80072ae:	693a      	ldr	r2, [r7, #16]
 80072b0:	4313      	orrs	r3, r2
 80072b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	699b      	ldr	r3, [r3, #24]
 80072b8:	011b      	lsls	r3, r3, #4
 80072ba:	693a      	ldr	r2, [r7, #16]
 80072bc:	4313      	orrs	r3, r2
 80072be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	693a      	ldr	r2, [r7, #16]
 80072c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	68fa      	ldr	r2, [r7, #12]
 80072ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	685a      	ldr	r2, [r3, #4]
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	697a      	ldr	r2, [r7, #20]
 80072d8:	621a      	str	r2, [r3, #32]
}
 80072da:	bf00      	nop
 80072dc:	3718      	adds	r7, #24
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}
 80072e2:	bf00      	nop
 80072e4:	40012c00 	.word	0x40012c00
 80072e8:	40013400 	.word	0x40013400
 80072ec:	0800bc00 	.word	0x0800bc00

080072f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b086      	sub	sp, #24
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
 80072f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6a1b      	ldr	r3, [r3, #32]
 80072fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6a1b      	ldr	r3, [r3, #32]
 800730a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	685b      	ldr	r3, [r3, #4]
 8007310:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	69db      	ldr	r3, [r3, #28]
 8007316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800731e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007326:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	021b      	lsls	r3, r3, #8
 800732e:	68fa      	ldr	r2, [r7, #12]
 8007330:	4313      	orrs	r3, r2
 8007332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800733a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	689b      	ldr	r3, [r3, #8]
 8007340:	031b      	lsls	r3, r3, #12
 8007342:	693a      	ldr	r2, [r7, #16]
 8007344:	4313      	orrs	r3, r2
 8007346:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	4a18      	ldr	r2, [pc, #96]	; (80073ac <TIM_OC4_SetConfig+0xbc>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d003      	beq.n	8007358 <TIM_OC4_SetConfig+0x68>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	4a17      	ldr	r2, [pc, #92]	; (80073b0 <TIM_OC4_SetConfig+0xc0>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d117      	bne.n	8007388 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	695b      	ldr	r3, [r3, #20]
 800735c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007360:	d008      	beq.n	8007374 <TIM_OC4_SetConfig+0x84>
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	695b      	ldr	r3, [r3, #20]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d004      	beq.n	8007374 <TIM_OC4_SetConfig+0x84>
 800736a:	f641 3123 	movw	r1, #6947	; 0x1b23
 800736e:	4811      	ldr	r0, [pc, #68]	; (80073b4 <TIM_OC4_SetConfig+0xc4>)
 8007370:	f7fa fa0c 	bl	800178c <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800737a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	695b      	ldr	r3, [r3, #20]
 8007380:	019b      	lsls	r3, r3, #6
 8007382:	697a      	ldr	r2, [r7, #20]
 8007384:	4313      	orrs	r3, r2
 8007386:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	697a      	ldr	r2, [r7, #20]
 800738c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	68fa      	ldr	r2, [r7, #12]
 8007392:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	685a      	ldr	r2, [r3, #4]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	693a      	ldr	r2, [r7, #16]
 80073a0:	621a      	str	r2, [r3, #32]
}
 80073a2:	bf00      	nop
 80073a4:	3718      	adds	r7, #24
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}
 80073aa:	bf00      	nop
 80073ac:	40012c00 	.word	0x40012c00
 80073b0:	40013400 	.word	0x40013400
 80073b4:	0800bc00 	.word	0x0800bc00

080073b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b087      	sub	sp, #28
 80073bc:	af00      	add	r7, sp, #0
 80073be:	60f8      	str	r0, [r7, #12]
 80073c0:	60b9      	str	r1, [r7, #8]
 80073c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	6a1b      	ldr	r3, [r3, #32]
 80073c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	6a1b      	ldr	r3, [r3, #32]
 80073ce:	f023 0201 	bic.w	r2, r3, #1
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	699b      	ldr	r3, [r3, #24]
 80073da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80073e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	011b      	lsls	r3, r3, #4
 80073e8:	693a      	ldr	r2, [r7, #16]
 80073ea:	4313      	orrs	r3, r2
 80073ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	f023 030a 	bic.w	r3, r3, #10
 80073f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80073f6:	697a      	ldr	r2, [r7, #20]
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	4313      	orrs	r3, r2
 80073fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	693a      	ldr	r2, [r7, #16]
 8007402:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	697a      	ldr	r2, [r7, #20]
 8007408:	621a      	str	r2, [r3, #32]
}
 800740a:	bf00      	nop
 800740c:	371c      	adds	r7, #28
 800740e:	46bd      	mov	sp, r7
 8007410:	bc80      	pop	{r7}
 8007412:	4770      	bx	lr

08007414 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007414:	b480      	push	{r7}
 8007416:	b087      	sub	sp, #28
 8007418:	af00      	add	r7, sp, #0
 800741a:	60f8      	str	r0, [r7, #12]
 800741c:	60b9      	str	r1, [r7, #8]
 800741e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	6a1b      	ldr	r3, [r3, #32]
 8007424:	f023 0210 	bic.w	r2, r3, #16
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	699b      	ldr	r3, [r3, #24]
 8007430:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	6a1b      	ldr	r3, [r3, #32]
 8007436:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800743e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	031b      	lsls	r3, r3, #12
 8007444:	697a      	ldr	r2, [r7, #20]
 8007446:	4313      	orrs	r3, r2
 8007448:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007450:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	011b      	lsls	r3, r3, #4
 8007456:	693a      	ldr	r2, [r7, #16]
 8007458:	4313      	orrs	r3, r2
 800745a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	697a      	ldr	r2, [r7, #20]
 8007460:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	693a      	ldr	r2, [r7, #16]
 8007466:	621a      	str	r2, [r3, #32]
}
 8007468:	bf00      	nop
 800746a:	371c      	adds	r7, #28
 800746c:	46bd      	mov	sp, r7
 800746e:	bc80      	pop	{r7}
 8007470:	4770      	bx	lr

08007472 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007472:	b480      	push	{r7}
 8007474:	b085      	sub	sp, #20
 8007476:	af00      	add	r7, sp, #0
 8007478:	6078      	str	r0, [r7, #4]
 800747a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	689b      	ldr	r3, [r3, #8]
 8007480:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007488:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800748a:	683a      	ldr	r2, [r7, #0]
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	4313      	orrs	r3, r2
 8007490:	f043 0307 	orr.w	r3, r3, #7
 8007494:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	68fa      	ldr	r2, [r7, #12]
 800749a:	609a      	str	r2, [r3, #8]
}
 800749c:	bf00      	nop
 800749e:	3714      	adds	r7, #20
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bc80      	pop	{r7}
 80074a4:	4770      	bx	lr

080074a6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80074a6:	b480      	push	{r7}
 80074a8:	b087      	sub	sp, #28
 80074aa:	af00      	add	r7, sp, #0
 80074ac:	60f8      	str	r0, [r7, #12]
 80074ae:	60b9      	str	r1, [r7, #8]
 80074b0:	607a      	str	r2, [r7, #4]
 80074b2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	689b      	ldr	r3, [r3, #8]
 80074b8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80074c0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	021a      	lsls	r2, r3, #8
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	431a      	orrs	r2, r3
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	4313      	orrs	r3, r2
 80074ce:	697a      	ldr	r2, [r7, #20]
 80074d0:	4313      	orrs	r3, r2
 80074d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	697a      	ldr	r2, [r7, #20]
 80074d8:	609a      	str	r2, [r3, #8]
}
 80074da:	bf00      	nop
 80074dc:	371c      	adds	r7, #28
 80074de:	46bd      	mov	sp, r7
 80074e0:	bc80      	pop	{r7}
 80074e2:	4770      	bx	lr

080074e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b086      	sub	sp, #24
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	60f8      	str	r0, [r7, #12]
 80074ec:	60b9      	str	r1, [r7, #8]
 80074ee:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	4a26      	ldr	r2, [pc, #152]	; (800758c <TIM_CCxChannelCmd+0xa8>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d018      	beq.n	800752a <TIM_CCxChannelCmd+0x46>
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	4a25      	ldr	r2, [pc, #148]	; (8007590 <TIM_CCxChannelCmd+0xac>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d014      	beq.n	800752a <TIM_CCxChannelCmd+0x46>
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007506:	d010      	beq.n	800752a <TIM_CCxChannelCmd+0x46>
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	4a22      	ldr	r2, [pc, #136]	; (8007594 <TIM_CCxChannelCmd+0xb0>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d00c      	beq.n	800752a <TIM_CCxChannelCmd+0x46>
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	4a21      	ldr	r2, [pc, #132]	; (8007598 <TIM_CCxChannelCmd+0xb4>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d008      	beq.n	800752a <TIM_CCxChannelCmd+0x46>
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	4a20      	ldr	r2, [pc, #128]	; (800759c <TIM_CCxChannelCmd+0xb8>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d004      	beq.n	800752a <TIM_CCxChannelCmd+0x46>
 8007520:	f641 5109 	movw	r1, #7433	; 0x1d09
 8007524:	481e      	ldr	r0, [pc, #120]	; (80075a0 <TIM_CCxChannelCmd+0xbc>)
 8007526:	f7fa f931 	bl	800178c <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d010      	beq.n	8007552 <TIM_CCxChannelCmd+0x6e>
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	2b04      	cmp	r3, #4
 8007534:	d00d      	beq.n	8007552 <TIM_CCxChannelCmd+0x6e>
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	2b08      	cmp	r3, #8
 800753a:	d00a      	beq.n	8007552 <TIM_CCxChannelCmd+0x6e>
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	2b0c      	cmp	r3, #12
 8007540:	d007      	beq.n	8007552 <TIM_CCxChannelCmd+0x6e>
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	2b3c      	cmp	r3, #60	; 0x3c
 8007546:	d004      	beq.n	8007552 <TIM_CCxChannelCmd+0x6e>
 8007548:	f641 510a 	movw	r1, #7434	; 0x1d0a
 800754c:	4814      	ldr	r0, [pc, #80]	; (80075a0 <TIM_CCxChannelCmd+0xbc>)
 800754e:	f7fa f91d 	bl	800178c <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	f003 031f 	and.w	r3, r3, #31
 8007558:	2201      	movs	r2, #1
 800755a:	fa02 f303 	lsl.w	r3, r2, r3
 800755e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	6a1a      	ldr	r2, [r3, #32]
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	43db      	mvns	r3, r3
 8007568:	401a      	ands	r2, r3
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	6a1a      	ldr	r2, [r3, #32]
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	f003 031f 	and.w	r3, r3, #31
 8007578:	6879      	ldr	r1, [r7, #4]
 800757a:	fa01 f303 	lsl.w	r3, r1, r3
 800757e:	431a      	orrs	r2, r3
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	621a      	str	r2, [r3, #32]
}
 8007584:	bf00      	nop
 8007586:	3718      	adds	r7, #24
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}
 800758c:	40012c00 	.word	0x40012c00
 8007590:	40013400 	.word	0x40013400
 8007594:	40000400 	.word	0x40000400
 8007598:	40000800 	.word	0x40000800
 800759c:	40000c00 	.word	0x40000c00
 80075a0:	0800bc00 	.word	0x0800bc00

080075a4 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b083      	sub	sp, #12
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	4a1c      	ldr	r2, [pc, #112]	; (8007620 <TIM_ResetCallback+0x7c>)
 80075b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	4a1b      	ldr	r2, [pc, #108]	; (8007624 <TIM_ResetCallback+0x80>)
 80075b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	4a1a      	ldr	r2, [pc, #104]	; (8007628 <TIM_ResetCallback+0x84>)
 80075c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	4a19      	ldr	r2, [pc, #100]	; (800762c <TIM_ResetCallback+0x88>)
 80075c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	4a18      	ldr	r2, [pc, #96]	; (8007630 <TIM_ResetCallback+0x8c>)
 80075d0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	4a17      	ldr	r2, [pc, #92]	; (8007634 <TIM_ResetCallback+0x90>)
 80075d8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	4a16      	ldr	r2, [pc, #88]	; (8007638 <TIM_ResetCallback+0x94>)
 80075e0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	4a15      	ldr	r2, [pc, #84]	; (800763c <TIM_ResetCallback+0x98>)
 80075e8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	4a14      	ldr	r2, [pc, #80]	; (8007640 <TIM_ResetCallback+0x9c>)
 80075f0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	4a13      	ldr	r2, [pc, #76]	; (8007644 <TIM_ResetCallback+0xa0>)
 80075f8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	4a12      	ldr	r2, [pc, #72]	; (8007648 <TIM_ResetCallback+0xa4>)
 8007600:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	4a11      	ldr	r2, [pc, #68]	; (800764c <TIM_ResetCallback+0xa8>)
 8007608:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	4a10      	ldr	r2, [pc, #64]	; (8007650 <TIM_ResetCallback+0xac>)
 8007610:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8007614:	bf00      	nop
 8007616:	370c      	adds	r7, #12
 8007618:	46bd      	mov	sp, r7
 800761a:	bc80      	pop	{r7}
 800761c:	4770      	bx	lr
 800761e:	bf00      	nop
 8007620:	08001721 	.word	0x08001721
 8007624:	08006dc1 	.word	0x08006dc1
 8007628:	08006e1b 	.word	0x08006e1b
 800762c:	08006e2d 	.word	0x08006e2d
 8007630:	080016d9 	.word	0x080016d9
 8007634:	08006de5 	.word	0x08006de5
 8007638:	08006dd3 	.word	0x08006dd3
 800763c:	08006df7 	.word	0x08006df7
 8007640:	08006e09 	.word	0x08006e09
 8007644:	08006e3f 	.word	0x08006e3f
 8007648:	0800798d 	.word	0x0800798d
 800764c:	0800799f 	.word	0x0800799f
 8007650:	080079b1 	.word	0x080079b1

08007654 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b084      	sub	sp, #16
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4a5c      	ldr	r2, [pc, #368]	; (80077d4 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d027      	beq.n	80076b8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4a5a      	ldr	r2, [pc, #360]	; (80077d8 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d022      	beq.n	80076b8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800767a:	d01d      	beq.n	80076b8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a56      	ldr	r2, [pc, #344]	; (80077dc <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d018      	beq.n	80076b8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4a55      	ldr	r2, [pc, #340]	; (80077e0 <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d013      	beq.n	80076b8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a53      	ldr	r2, [pc, #332]	; (80077e4 <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d00e      	beq.n	80076b8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a52      	ldr	r2, [pc, #328]	; (80077e8 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d009      	beq.n	80076b8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a50      	ldr	r2, [pc, #320]	; (80077ec <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d004      	beq.n	80076b8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80076ae:	f240 7186 	movw	r1, #1926	; 0x786
 80076b2:	484f      	ldr	r0, [pc, #316]	; (80077f0 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 80076b4:	f7fa f86a 	bl	800178c <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d020      	beq.n	8007702 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	2b10      	cmp	r3, #16
 80076c6:	d01c      	beq.n	8007702 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	2b20      	cmp	r3, #32
 80076ce:	d018      	beq.n	8007702 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	2b30      	cmp	r3, #48	; 0x30
 80076d6:	d014      	beq.n	8007702 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	2b40      	cmp	r3, #64	; 0x40
 80076de:	d010      	beq.n	8007702 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	2b50      	cmp	r3, #80	; 0x50
 80076e6:	d00c      	beq.n	8007702 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	2b60      	cmp	r3, #96	; 0x60
 80076ee:	d008      	beq.n	8007702 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	2b70      	cmp	r3, #112	; 0x70
 80076f6:	d004      	beq.n	8007702 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80076f8:	f240 7187 	movw	r1, #1927	; 0x787
 80076fc:	483c      	ldr	r0, [pc, #240]	; (80077f0 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 80076fe:	f7fa f845 	bl	800178c <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	685b      	ldr	r3, [r3, #4]
 8007706:	2b80      	cmp	r3, #128	; 0x80
 8007708:	d008      	beq.n	800771c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	685b      	ldr	r3, [r3, #4]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d004      	beq.n	800771c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007712:	f44f 61f1 	mov.w	r1, #1928	; 0x788
 8007716:	4836      	ldr	r0, [pc, #216]	; (80077f0 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 8007718:	f7fa f838 	bl	800178c <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007722:	2b01      	cmp	r3, #1
 8007724:	d101      	bne.n	800772a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007726:	2302      	movs	r3, #2
 8007728:	e050      	b.n	80077cc <HAL_TIMEx_MasterConfigSynchronization+0x178>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2201      	movs	r2, #1
 800772e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2202      	movs	r2, #2
 8007736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	685b      	ldr	r3, [r3, #4]
 8007740:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	689b      	ldr	r3, [r3, #8]
 8007748:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007750:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	68fa      	ldr	r2, [r7, #12]
 8007758:	4313      	orrs	r3, r2
 800775a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	68fa      	ldr	r2, [r7, #12]
 8007762:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4a1a      	ldr	r2, [pc, #104]	; (80077d4 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d018      	beq.n	80077a0 <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4a19      	ldr	r2, [pc, #100]	; (80077d8 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d013      	beq.n	80077a0 <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007780:	d00e      	beq.n	80077a0 <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a15      	ldr	r2, [pc, #84]	; (80077dc <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d009      	beq.n	80077a0 <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4a13      	ldr	r2, [pc, #76]	; (80077e0 <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d004      	beq.n	80077a0 <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4a12      	ldr	r2, [pc, #72]	; (80077e4 <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d10c      	bne.n	80077ba <HAL_TIMEx_MasterConfigSynchronization+0x166>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077a6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	68ba      	ldr	r2, [r7, #8]
 80077ae:	4313      	orrs	r3, r2
 80077b0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	68ba      	ldr	r2, [r7, #8]
 80077b8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2201      	movs	r2, #1
 80077be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2200      	movs	r2, #0
 80077c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80077ca:	2300      	movs	r3, #0
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	3710      	adds	r7, #16
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bd80      	pop	{r7, pc}
 80077d4:	40012c00 	.word	0x40012c00
 80077d8:	40013400 	.word	0x40013400
 80077dc:	40000400 	.word	0x40000400
 80077e0:	40000800 	.word	0x40000800
 80077e4:	40000c00 	.word	0x40000c00
 80077e8:	40001000 	.word	0x40001000
 80077ec:	40001400 	.word	0x40001400
 80077f0:	0800bc38 	.word	0x0800bc38

080077f4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b084      	sub	sp, #16
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80077fe:	2300      	movs	r3, #0
 8007800:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	4a5e      	ldr	r2, [pc, #376]	; (8007980 <HAL_TIMEx_ConfigBreakDeadTime+0x18c>)
 8007808:	4293      	cmp	r3, r2
 800780a:	d009      	beq.n	8007820 <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4a5c      	ldr	r2, [pc, #368]	; (8007984 <HAL_TIMEx_ConfigBreakDeadTime+0x190>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d004      	beq.n	8007820 <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 8007816:	f240 71c3 	movw	r1, #1987	; 0x7c3
 800781a:	485b      	ldr	r0, [pc, #364]	; (8007988 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800781c:	f7f9 ffb6 	bl	800178c <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007828:	d008      	beq.n	800783c <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d004      	beq.n	800783c <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 8007832:	f240 71c4 	movw	r1, #1988	; 0x7c4
 8007836:	4854      	ldr	r0, [pc, #336]	; (8007988 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8007838:	f7f9 ffa8 	bl	800178c <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	685b      	ldr	r3, [r3, #4]
 8007840:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007844:	d008      	beq.n	8007858 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	685b      	ldr	r3, [r3, #4]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d004      	beq.n	8007858 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 800784e:	f240 71c5 	movw	r1, #1989	; 0x7c5
 8007852:	484d      	ldr	r0, [pc, #308]	; (8007988 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8007854:	f7f9 ff9a 	bl	800178c <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	689b      	ldr	r3, [r3, #8]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d013      	beq.n	8007888 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	689b      	ldr	r3, [r3, #8]
 8007864:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007868:	d00e      	beq.n	8007888 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	689b      	ldr	r3, [r3, #8]
 800786e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007872:	d009      	beq.n	8007888 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	689b      	ldr	r3, [r3, #8]
 8007878:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800787c:	d004      	beq.n	8007888 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 800787e:	f240 71c6 	movw	r1, #1990	; 0x7c6
 8007882:	4841      	ldr	r0, [pc, #260]	; (8007988 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8007884:	f7f9 ff82 	bl	800178c <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	68db      	ldr	r3, [r3, #12]
 800788c:	2bff      	cmp	r3, #255	; 0xff
 800788e:	d904      	bls.n	800789a <HAL_TIMEx_ConfigBreakDeadTime+0xa6>
 8007890:	f240 71c7 	movw	r1, #1991	; 0x7c7
 8007894:	483c      	ldr	r0, [pc, #240]	; (8007988 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8007896:	f7f9 ff79 	bl	800178c <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	691b      	ldr	r3, [r3, #16]
 800789e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078a2:	d008      	beq.n	80078b6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	691b      	ldr	r3, [r3, #16]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d004      	beq.n	80078b6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80078ac:	f44f 61f9 	mov.w	r1, #1992	; 0x7c8
 80078b0:	4835      	ldr	r0, [pc, #212]	; (8007988 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 80078b2:	f7f9 ff6b 	bl	800178c <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	695b      	ldr	r3, [r3, #20]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d009      	beq.n	80078d2 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	695b      	ldr	r3, [r3, #20]
 80078c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078c6:	d004      	beq.n	80078d2 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80078c8:	f240 71c9 	movw	r1, #1993	; 0x7c9
 80078cc:	482e      	ldr	r0, [pc, #184]	; (8007988 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 80078ce:	f7f9 ff5d 	bl	800178c <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	69db      	ldr	r3, [r3, #28]
 80078d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80078da:	d008      	beq.n	80078ee <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	69db      	ldr	r3, [r3, #28]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d004      	beq.n	80078ee <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 80078e4:	f240 71ca 	movw	r1, #1994	; 0x7ca
 80078e8:	4827      	ldr	r0, [pc, #156]	; (8007988 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 80078ea:	f7f9 ff4f 	bl	800178c <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078f4:	2b01      	cmp	r3, #1
 80078f6:	d101      	bne.n	80078fc <HAL_TIMEx_ConfigBreakDeadTime+0x108>
 80078f8:	2302      	movs	r3, #2
 80078fa:	e03d      	b.n	8007978 <HAL_TIMEx_ConfigBreakDeadTime+0x184>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2201      	movs	r2, #1
 8007900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	68db      	ldr	r3, [r3, #12]
 800790e:	4313      	orrs	r3, r2
 8007910:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	689b      	ldr	r3, [r3, #8]
 800791c:	4313      	orrs	r3, r2
 800791e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	685b      	ldr	r3, [r3, #4]
 800792a:	4313      	orrs	r3, r2
 800792c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	4313      	orrs	r3, r2
 800793a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	691b      	ldr	r3, [r3, #16]
 8007946:	4313      	orrs	r3, r2
 8007948:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	695b      	ldr	r3, [r3, #20]
 8007954:	4313      	orrs	r3, r2
 8007956:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	69db      	ldr	r3, [r3, #28]
 8007962:	4313      	orrs	r3, r2
 8007964:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	68fa      	ldr	r2, [r7, #12]
 800796c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2200      	movs	r2, #0
 8007972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007976:	2300      	movs	r3, #0
}
 8007978:	4618      	mov	r0, r3
 800797a:	3710      	adds	r7, #16
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}
 8007980:	40012c00 	.word	0x40012c00
 8007984:	40013400 	.word	0x40013400
 8007988:	0800bc38 	.word	0x0800bc38

0800798c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800798c:	b480      	push	{r7}
 800798e:	b083      	sub	sp, #12
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007994:	bf00      	nop
 8007996:	370c      	adds	r7, #12
 8007998:	46bd      	mov	sp, r7
 800799a:	bc80      	pop	{r7}
 800799c:	4770      	bx	lr

0800799e <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800799e:	b480      	push	{r7}
 80079a0:	b083      	sub	sp, #12
 80079a2:	af00      	add	r7, sp, #0
 80079a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 80079a6:	bf00      	nop
 80079a8:	370c      	adds	r7, #12
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bc80      	pop	{r7}
 80079ae:	4770      	bx	lr

080079b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80079b0:	b480      	push	{r7}
 80079b2:	b083      	sub	sp, #12
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80079b8:	bf00      	nop
 80079ba:	370c      	adds	r7, #12
 80079bc:	46bd      	mov	sp, r7
 80079be:	bc80      	pop	{r7}
 80079c0:	4770      	bx	lr
	...

080079c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b082      	sub	sp, #8
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d101      	bne.n	80079d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80079d2:	2301      	movs	r3, #1
 80079d4:	e0a7      	b.n	8007b26 <HAL_UART_Init+0x162>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	699b      	ldr	r3, [r3, #24]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d02c      	beq.n	8007a38 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2 and USART3 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	4a53      	ldr	r2, [pc, #332]	; (8007b30 <HAL_UART_Init+0x16c>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d00e      	beq.n	8007a06 <HAL_UART_Init+0x42>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4a51      	ldr	r2, [pc, #324]	; (8007b34 <HAL_UART_Init+0x170>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d009      	beq.n	8007a06 <HAL_UART_Init+0x42>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	4a50      	ldr	r2, [pc, #320]	; (8007b38 <HAL_UART_Init+0x174>)
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d004      	beq.n	8007a06 <HAL_UART_Init+0x42>
 80079fc:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 8007a00:	484e      	ldr	r0, [pc, #312]	; (8007b3c <HAL_UART_Init+0x178>)
 8007a02:	f7f9 fec3 	bl	800178c <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	699b      	ldr	r3, [r3, #24]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d032      	beq.n	8007a74 <HAL_UART_Init+0xb0>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	699b      	ldr	r3, [r3, #24]
 8007a12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a16:	d02d      	beq.n	8007a74 <HAL_UART_Init+0xb0>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	699b      	ldr	r3, [r3, #24]
 8007a1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a20:	d028      	beq.n	8007a74 <HAL_UART_Init+0xb0>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	699b      	ldr	r3, [r3, #24]
 8007a26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a2a:	d023      	beq.n	8007a74 <HAL_UART_Init+0xb0>
 8007a2c:	f240 116d 	movw	r1, #365	; 0x16d
 8007a30:	4842      	ldr	r0, [pc, #264]	; (8007b3c <HAL_UART_Init+0x178>)
 8007a32:	f7f9 feab 	bl	800178c <assert_failed>
 8007a36:	e01d      	b.n	8007a74 <HAL_UART_Init+0xb0>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4a3c      	ldr	r2, [pc, #240]	; (8007b30 <HAL_UART_Init+0x16c>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d018      	beq.n	8007a74 <HAL_UART_Init+0xb0>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4a3b      	ldr	r2, [pc, #236]	; (8007b34 <HAL_UART_Init+0x170>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d013      	beq.n	8007a74 <HAL_UART_Init+0xb0>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4a39      	ldr	r2, [pc, #228]	; (8007b38 <HAL_UART_Init+0x174>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d00e      	beq.n	8007a74 <HAL_UART_Init+0xb0>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a39      	ldr	r2, [pc, #228]	; (8007b40 <HAL_UART_Init+0x17c>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d009      	beq.n	8007a74 <HAL_UART_Init+0xb0>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4a37      	ldr	r2, [pc, #220]	; (8007b44 <HAL_UART_Init+0x180>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d004      	beq.n	8007a74 <HAL_UART_Init+0xb0>
 8007a6a:	f240 1171 	movw	r1, #369	; 0x171
 8007a6e:	4833      	ldr	r0, [pc, #204]	; (8007b3c <HAL_UART_Init+0x178>)
 8007a70:	f7f9 fe8c 	bl	800178c <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	689b      	ldr	r3, [r3, #8]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d009      	beq.n	8007a90 <HAL_UART_Init+0xcc>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	689b      	ldr	r3, [r3, #8]
 8007a80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a84:	d004      	beq.n	8007a90 <HAL_UART_Init+0xcc>
 8007a86:	f240 1173 	movw	r1, #371	; 0x173
 8007a8a:	482c      	ldr	r0, [pc, #176]	; (8007b3c <HAL_UART_Init+0x178>)
 8007a8c:	f7f9 fe7e 	bl	800178c <assert_failed>
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a96:	b2db      	uxtb	r3, r3
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d111      	bne.n	8007ac0 <HAL_UART_Init+0xfc>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f000 fb0d 	bl	80080c4 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d102      	bne.n	8007ab8 <HAL_UART_Init+0xf4>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	4a24      	ldr	r2, [pc, #144]	; (8007b48 <HAL_UART_Init+0x184>)
 8007ab6:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2224      	movs	r2, #36	; 0x24
 8007ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	68da      	ldr	r2, [r3, #12]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007ad6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f000 fd01 	bl	80084e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	691a      	ldr	r2, [r3, #16]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007aec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	695a      	ldr	r2, [r3, #20]
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007afc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	68da      	ldr	r2, [r3, #12]
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007b0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2200      	movs	r2, #0
 8007b12:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2220      	movs	r2, #32
 8007b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2220      	movs	r2, #32
 8007b20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007b24:	2300      	movs	r3, #0
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	3708      	adds	r7, #8
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}
 8007b2e:	bf00      	nop
 8007b30:	40013800 	.word	0x40013800
 8007b34:	40004400 	.word	0x40004400
 8007b38:	40004800 	.word	0x40004800
 8007b3c:	0800bc74 	.word	0x0800bc74
 8007b40:	40004c00 	.word	0x40004c00
 8007b44:	40005000 	.word	0x40005000
 8007b48:	08001c21 	.word	0x08001c21

08007b4c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b08a      	sub	sp, #40	; 0x28
 8007b50:	af02      	add	r7, sp, #8
 8007b52:	60f8      	str	r0, [r7, #12]
 8007b54:	60b9      	str	r1, [r7, #8]
 8007b56:	603b      	str	r3, [r7, #0]
 8007b58:	4613      	mov	r3, r2
 8007b5a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b66:	b2db      	uxtb	r3, r3
 8007b68:	2b20      	cmp	r3, #32
 8007b6a:	d17c      	bne.n	8007c66 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d002      	beq.n	8007b78 <HAL_UART_Transmit+0x2c>
 8007b72:	88fb      	ldrh	r3, [r7, #6]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d101      	bne.n	8007b7c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007b78:	2301      	movs	r3, #1
 8007b7a:	e075      	b.n	8007c68 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b82:	2b01      	cmp	r3, #1
 8007b84:	d101      	bne.n	8007b8a <HAL_UART_Transmit+0x3e>
 8007b86:	2302      	movs	r3, #2
 8007b88:	e06e      	b.n	8007c68 <HAL_UART_Transmit+0x11c>
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	2201      	movs	r2, #1
 8007b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	2200      	movs	r2, #0
 8007b96:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	2221      	movs	r2, #33	; 0x21
 8007b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007ba0:	f7fa faa4 	bl	80020ec <HAL_GetTick>
 8007ba4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	88fa      	ldrh	r2, [r7, #6]
 8007baa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	88fa      	ldrh	r2, [r7, #6]
 8007bb0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	689b      	ldr	r3, [r3, #8]
 8007bb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bba:	d108      	bne.n	8007bce <HAL_UART_Transmit+0x82>
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	691b      	ldr	r3, [r3, #16]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d104      	bne.n	8007bce <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	61bb      	str	r3, [r7, #24]
 8007bcc:	e003      	b.n	8007bd6 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007bde:	e02a      	b.n	8007c36 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	9300      	str	r3, [sp, #0]
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	2200      	movs	r2, #0
 8007be8:	2180      	movs	r1, #128	; 0x80
 8007bea:	68f8      	ldr	r0, [r7, #12]
 8007bec:	f000 faa0 	bl	8008130 <UART_WaitOnFlagUntilTimeout>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d001      	beq.n	8007bfa <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007bf6:	2303      	movs	r3, #3
 8007bf8:	e036      	b.n	8007c68 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007bfa:	69fb      	ldr	r3, [r7, #28]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d10b      	bne.n	8007c18 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007c00:	69bb      	ldr	r3, [r7, #24]
 8007c02:	881b      	ldrh	r3, [r3, #0]
 8007c04:	461a      	mov	r2, r3
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007c0e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007c10:	69bb      	ldr	r3, [r7, #24]
 8007c12:	3302      	adds	r3, #2
 8007c14:	61bb      	str	r3, [r7, #24]
 8007c16:	e007      	b.n	8007c28 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007c18:	69fb      	ldr	r3, [r7, #28]
 8007c1a:	781a      	ldrb	r2, [r3, #0]
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007c22:	69fb      	ldr	r3, [r7, #28]
 8007c24:	3301      	adds	r3, #1
 8007c26:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007c2c:	b29b      	uxth	r3, r3
 8007c2e:	3b01      	subs	r3, #1
 8007c30:	b29a      	uxth	r2, r3
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007c3a:	b29b      	uxth	r3, r3
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d1cf      	bne.n	8007be0 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	9300      	str	r3, [sp, #0]
 8007c44:	697b      	ldr	r3, [r7, #20]
 8007c46:	2200      	movs	r2, #0
 8007c48:	2140      	movs	r1, #64	; 0x40
 8007c4a:	68f8      	ldr	r0, [r7, #12]
 8007c4c:	f000 fa70 	bl	8008130 <UART_WaitOnFlagUntilTimeout>
 8007c50:	4603      	mov	r3, r0
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d001      	beq.n	8007c5a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007c56:	2303      	movs	r3, #3
 8007c58:	e006      	b.n	8007c68 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	2220      	movs	r2, #32
 8007c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007c62:	2300      	movs	r3, #0
 8007c64:	e000      	b.n	8007c68 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007c66:	2302      	movs	r3, #2
  }
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	3720      	adds	r7, #32
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bd80      	pop	{r7, pc}

08007c70 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b084      	sub	sp, #16
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	60f8      	str	r0, [r7, #12]
 8007c78:	60b9      	str	r1, [r7, #8]
 8007c7a:	4613      	mov	r3, r2
 8007c7c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c84:	b2db      	uxtb	r3, r3
 8007c86:	2b20      	cmp	r3, #32
 8007c88:	d11d      	bne.n	8007cc6 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d002      	beq.n	8007c96 <HAL_UART_Receive_IT+0x26>
 8007c90:	88fb      	ldrh	r3, [r7, #6]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d101      	bne.n	8007c9a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007c96:	2301      	movs	r3, #1
 8007c98:	e016      	b.n	8007cc8 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ca0:	2b01      	cmp	r3, #1
 8007ca2:	d101      	bne.n	8007ca8 <HAL_UART_Receive_IT+0x38>
 8007ca4:	2302      	movs	r3, #2
 8007ca6:	e00f      	b.n	8007cc8 <HAL_UART_Receive_IT+0x58>
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	2201      	movs	r2, #1
 8007cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8007cb6:	88fb      	ldrh	r3, [r7, #6]
 8007cb8:	461a      	mov	r2, r3
 8007cba:	68b9      	ldr	r1, [r7, #8]
 8007cbc:	68f8      	ldr	r0, [r7, #12]
 8007cbe:	f000 fa81 	bl	80081c4 <UART_Start_Receive_IT>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	e000      	b.n	8007cc8 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007cc6:	2302      	movs	r3, #2
  }
}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	3710      	adds	r7, #16
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}

08007cd0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b08a      	sub	sp, #40	; 0x28
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	68db      	ldr	r3, [r3, #12]
 8007ce6:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	695b      	ldr	r3, [r3, #20]
 8007cee:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cfa:	f003 030f 	and.w	r3, r3, #15
 8007cfe:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8007d00:	69bb      	ldr	r3, [r7, #24]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d10d      	bne.n	8007d22 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d08:	f003 0320 	and.w	r3, r3, #32
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d008      	beq.n	8007d22 <HAL_UART_IRQHandler+0x52>
 8007d10:	6a3b      	ldr	r3, [r7, #32]
 8007d12:	f003 0320 	and.w	r3, r3, #32
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d003      	beq.n	8007d22 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f000 fb34 	bl	8008388 <UART_Receive_IT>
      return;
 8007d20:	e180      	b.n	8008024 <HAL_UART_IRQHandler+0x354>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007d22:	69bb      	ldr	r3, [r7, #24]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	f000 80b4 	beq.w	8007e92 <HAL_UART_IRQHandler+0x1c2>
 8007d2a:	69fb      	ldr	r3, [r7, #28]
 8007d2c:	f003 0301 	and.w	r3, r3, #1
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d105      	bne.n	8007d40 <HAL_UART_IRQHandler+0x70>
 8007d34:	6a3b      	ldr	r3, [r7, #32]
 8007d36:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	f000 80a9 	beq.w	8007e92 <HAL_UART_IRQHandler+0x1c2>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d42:	f003 0301 	and.w	r3, r3, #1
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d00a      	beq.n	8007d60 <HAL_UART_IRQHandler+0x90>
 8007d4a:	6a3b      	ldr	r3, [r7, #32]
 8007d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d005      	beq.n	8007d60 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d58:	f043 0201 	orr.w	r2, r3, #1
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d62:	f003 0304 	and.w	r3, r3, #4
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d00a      	beq.n	8007d80 <HAL_UART_IRQHandler+0xb0>
 8007d6a:	69fb      	ldr	r3, [r7, #28]
 8007d6c:	f003 0301 	and.w	r3, r3, #1
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d005      	beq.n	8007d80 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d78:	f043 0202 	orr.w	r2, r3, #2
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d82:	f003 0302 	and.w	r3, r3, #2
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d00a      	beq.n	8007da0 <HAL_UART_IRQHandler+0xd0>
 8007d8a:	69fb      	ldr	r3, [r7, #28]
 8007d8c:	f003 0301 	and.w	r3, r3, #1
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d005      	beq.n	8007da0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d98:	f043 0204 	orr.w	r2, r3, #4
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da2:	f003 0308 	and.w	r3, r3, #8
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d00f      	beq.n	8007dca <HAL_UART_IRQHandler+0xfa>
 8007daa:	6a3b      	ldr	r3, [r7, #32]
 8007dac:	f003 0320 	and.w	r3, r3, #32
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d104      	bne.n	8007dbe <HAL_UART_IRQHandler+0xee>
 8007db4:	69fb      	ldr	r3, [r7, #28]
 8007db6:	f003 0301 	and.w	r3, r3, #1
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d005      	beq.n	8007dca <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dc2:	f043 0208 	orr.w	r2, r3, #8
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	f000 8123 	beq.w	800801a <HAL_UART_IRQHandler+0x34a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd6:	f003 0320 	and.w	r3, r3, #32
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d007      	beq.n	8007dee <HAL_UART_IRQHandler+0x11e>
 8007dde:	6a3b      	ldr	r3, [r7, #32]
 8007de0:	f003 0320 	and.w	r3, r3, #32
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d002      	beq.n	8007dee <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f000 facd 	bl	8008388 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	695b      	ldr	r3, [r3, #20]
 8007df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	bf14      	ite	ne
 8007dfc:	2301      	movne	r3, #1
 8007dfe:	2300      	moveq	r3, #0
 8007e00:	b2db      	uxtb	r3, r3
 8007e02:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e08:	f003 0308 	and.w	r3, r3, #8
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d102      	bne.n	8007e16 <HAL_UART_IRQHandler+0x146>
 8007e10:	697b      	ldr	r3, [r7, #20]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d033      	beq.n	8007e7e <HAL_UART_IRQHandler+0x1ae>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f000 fa0d 	bl	8008236 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	695b      	ldr	r3, [r3, #20]
 8007e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d024      	beq.n	8007e74 <HAL_UART_IRQHandler+0x1a4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	695a      	ldr	r2, [r3, #20]
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e38:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d013      	beq.n	8007e6a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e46:	4a79      	ldr	r2, [pc, #484]	; (800802c <HAL_UART_IRQHandler+0x35c>)
 8007e48:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e4e:	4618      	mov	r0, r3
 8007e50:	f7fb f8e6 	bl	8003020 <HAL_DMA_Abort_IT>
 8007e54:	4603      	mov	r3, r0
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d019      	beq.n	8007e8e <HAL_UART_IRQHandler+0x1be>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e60:	687a      	ldr	r2, [r7, #4]
 8007e62:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007e64:	4610      	mov	r0, r2
 8007e66:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e68:	e011      	b.n	8007e8e <HAL_UART_IRQHandler+0x1be>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e72:	e00c      	b.n	8007e8e <HAL_UART_IRQHandler+0x1be>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e7c:	e007      	b.n	8007e8e <HAL_UART_IRQHandler+0x1be>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007e8c:	e0c5      	b.n	800801a <HAL_UART_IRQHandler+0x34a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e8e:	bf00      	nop
    return;
 8007e90:	e0c3      	b.n	800801a <HAL_UART_IRQHandler+0x34a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e96:	2b01      	cmp	r3, #1
 8007e98:	f040 80a3 	bne.w	8007fe2 <HAL_UART_IRQHandler+0x312>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8007e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e9e:	f003 0310 	and.w	r3, r3, #16
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	f000 809d 	beq.w	8007fe2 <HAL_UART_IRQHandler+0x312>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8007ea8:	6a3b      	ldr	r3, [r7, #32]
 8007eaa:	f003 0310 	and.w	r3, r3, #16
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	f000 8097 	beq.w	8007fe2 <HAL_UART_IRQHandler+0x312>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	60fb      	str	r3, [r7, #12]
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	60fb      	str	r3, [r7, #12]
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	685b      	ldr	r3, [r3, #4]
 8007ec6:	60fb      	str	r3, [r7, #12]
 8007ec8:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	695b      	ldr	r3, [r3, #20]
 8007ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d04f      	beq.n	8007f78 <HAL_UART_IRQHandler+0x2a8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	685b      	ldr	r3, [r3, #4]
 8007ee0:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8007ee2:	8a3b      	ldrh	r3, [r7, #16]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	f000 809a 	beq.w	800801e <HAL_UART_IRQHandler+0x34e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007eee:	8a3a      	ldrh	r2, [r7, #16]
 8007ef0:	429a      	cmp	r2, r3
 8007ef2:	f080 8094 	bcs.w	800801e <HAL_UART_IRQHandler+0x34e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	8a3a      	ldrh	r2, [r7, #16]
 8007efa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f00:	699b      	ldr	r3, [r3, #24]
 8007f02:	2b20      	cmp	r3, #32
 8007f04:	d02b      	beq.n	8007f5e <HAL_UART_IRQHandler+0x28e>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	68da      	ldr	r2, [r3, #12]
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007f14:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	695a      	ldr	r2, [r3, #20]
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f022 0201 	bic.w	r2, r2, #1
 8007f24:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	695a      	ldr	r2, [r3, #20]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f34:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2220      	movs	r2, #32
 8007f3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2200      	movs	r2, #0
 8007f42:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	68da      	ldr	r2, [r3, #12]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f022 0210 	bic.w	r2, r2, #16
 8007f52:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f58:	4618      	mov	r0, r3
 8007f5a:	f7fb f827 	bl	8002fac <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f62:	687a      	ldr	r2, [r7, #4]
 8007f64:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8007f66:	687a      	ldr	r2, [r7, #4]
 8007f68:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8007f6a:	b292      	uxth	r2, r2
 8007f6c:	1a8a      	subs	r2, r1, r2
 8007f6e:	b292      	uxth	r2, r2
 8007f70:	4611      	mov	r1, r2
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif
      }
      return;
 8007f76:	e052      	b.n	800801e <HAL_UART_IRQHandler+0x34e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007f80:	b29b      	uxth	r3, r3
 8007f82:	1ad3      	subs	r3, r2, r3
 8007f84:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007f8a:	b29b      	uxth	r3, r3
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d048      	beq.n	8008022 <HAL_UART_IRQHandler+0x352>
          &&(nb_rx_data > 0U) )
 8007f90:	8a7b      	ldrh	r3, [r7, #18]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d045      	beq.n	8008022 <HAL_UART_IRQHandler+0x352>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	68da      	ldr	r2, [r3, #12]
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007fa4:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	695a      	ldr	r2, [r3, #20]
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f022 0201 	bic.w	r2, r2, #1
 8007fb4:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2220      	movs	r2, #32
 8007fba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	68da      	ldr	r2, [r3, #12]
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f022 0210 	bic.w	r2, r2, #16
 8007fd2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007fd8:	8a7a      	ldrh	r2, [r7, #18]
 8007fda:	4611      	mov	r1, r2
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif
      }
      return;
 8007fe0:	e01f      	b.n	8008022 <HAL_UART_IRQHandler+0x352>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d008      	beq.n	8007ffe <HAL_UART_IRQHandler+0x32e>
 8007fec:	6a3b      	ldr	r3, [r7, #32]
 8007fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d003      	beq.n	8007ffe <HAL_UART_IRQHandler+0x32e>
  {
    UART_Transmit_IT(huart);
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f000 f95e 	bl	80082b8 <UART_Transmit_IT>
    return;
 8007ffc:	e012      	b.n	8008024 <HAL_UART_IRQHandler+0x354>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008004:	2b00      	cmp	r3, #0
 8008006:	d00d      	beq.n	8008024 <HAL_UART_IRQHandler+0x354>
 8008008:	6a3b      	ldr	r3, [r7, #32]
 800800a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800800e:	2b00      	cmp	r3, #0
 8008010:	d008      	beq.n	8008024 <HAL_UART_IRQHandler+0x354>
  {
    UART_EndTransmit_IT(huart);
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f000 f99f 	bl	8008356 <UART_EndTransmit_IT>
    return;
 8008018:	e004      	b.n	8008024 <HAL_UART_IRQHandler+0x354>
    return;
 800801a:	bf00      	nop
 800801c:	e002      	b.n	8008024 <HAL_UART_IRQHandler+0x354>
      return;
 800801e:	bf00      	nop
 8008020:	e000      	b.n	8008024 <HAL_UART_IRQHandler+0x354>
      return;
 8008022:	bf00      	nop
  }
}
 8008024:	3728      	adds	r7, #40	; 0x28
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}
 800802a:	bf00      	nop
 800802c:	0800828f 	.word	0x0800828f

08008030 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008030:	b480      	push	{r7}
 8008032:	b083      	sub	sp, #12
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008038:	bf00      	nop
 800803a:	370c      	adds	r7, #12
 800803c:	46bd      	mov	sp, r7
 800803e:	bc80      	pop	{r7}
 8008040:	4770      	bx	lr

08008042 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008042:	b480      	push	{r7}
 8008044:	b083      	sub	sp, #12
 8008046:	af00      	add	r7, sp, #0
 8008048:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800804a:	bf00      	nop
 800804c:	370c      	adds	r7, #12
 800804e:	46bd      	mov	sp, r7
 8008050:	bc80      	pop	{r7}
 8008052:	4770      	bx	lr

08008054 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008054:	b480      	push	{r7}
 8008056:	b083      	sub	sp, #12
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800805c:	bf00      	nop
 800805e:	370c      	adds	r7, #12
 8008060:	46bd      	mov	sp, r7
 8008062:	bc80      	pop	{r7}
 8008064:	4770      	bx	lr

08008066 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008066:	b480      	push	{r7}
 8008068:	b083      	sub	sp, #12
 800806a:	af00      	add	r7, sp, #0
 800806c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800806e:	bf00      	nop
 8008070:	370c      	adds	r7, #12
 8008072:	46bd      	mov	sp, r7
 8008074:	bc80      	pop	{r7}
 8008076:	4770      	bx	lr

08008078 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8008078:	b480      	push	{r7}
 800807a:	b083      	sub	sp, #12
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8008080:	bf00      	nop
 8008082:	370c      	adds	r7, #12
 8008084:	46bd      	mov	sp, r7
 8008086:	bc80      	pop	{r7}
 8008088:	4770      	bx	lr

0800808a <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800808a:	b480      	push	{r7}
 800808c:	b083      	sub	sp, #12
 800808e:	af00      	add	r7, sp, #0
 8008090:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8008092:	bf00      	nop
 8008094:	370c      	adds	r7, #12
 8008096:	46bd      	mov	sp, r7
 8008098:	bc80      	pop	{r7}
 800809a:	4770      	bx	lr

0800809c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800809c:	b480      	push	{r7}
 800809e:	b083      	sub	sp, #12
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80080a4:	bf00      	nop
 80080a6:	370c      	adds	r7, #12
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bc80      	pop	{r7}
 80080ac:	4770      	bx	lr

080080ae <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80080ae:	b480      	push	{r7}
 80080b0:	b083      	sub	sp, #12
 80080b2:	af00      	add	r7, sp, #0
 80080b4:	6078      	str	r0, [r7, #4]
 80080b6:	460b      	mov	r3, r1
 80080b8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80080ba:	bf00      	nop
 80080bc:	370c      	adds	r7, #12
 80080be:	46bd      	mov	sp, r7
 80080c0:	bc80      	pop	{r7}
 80080c2:	4770      	bx	lr

080080c4 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 80080c4:	b480      	push	{r7}
 80080c6:	b083      	sub	sp, #12
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	4a0f      	ldr	r2, [pc, #60]	; (800810c <UART_InitCallbacksToDefault+0x48>)
 80080d0:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	4a0e      	ldr	r2, [pc, #56]	; (8008110 <UART_InitCallbacksToDefault+0x4c>)
 80080d6:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	4a0e      	ldr	r2, [pc, #56]	; (8008114 <UART_InitCallbacksToDefault+0x50>)
 80080dc:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	4a0d      	ldr	r2, [pc, #52]	; (8008118 <UART_InitCallbacksToDefault+0x54>)
 80080e2:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	4a0d      	ldr	r2, [pc, #52]	; (800811c <UART_InitCallbacksToDefault+0x58>)
 80080e8:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	4a0c      	ldr	r2, [pc, #48]	; (8008120 <UART_InitCallbacksToDefault+0x5c>)
 80080ee:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	4a0c      	ldr	r2, [pc, #48]	; (8008124 <UART_InitCallbacksToDefault+0x60>)
 80080f4:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	4a0b      	ldr	r2, [pc, #44]	; (8008128 <UART_InitCallbacksToDefault+0x64>)
 80080fa:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	4a0b      	ldr	r2, [pc, #44]	; (800812c <UART_InitCallbacksToDefault+0x68>)
 8008100:	669a      	str	r2, [r3, #104]	; 0x68

}
 8008102:	bf00      	nop
 8008104:	370c      	adds	r7, #12
 8008106:	46bd      	mov	sp, r7
 8008108:	bc80      	pop	{r7}
 800810a:	4770      	bx	lr
 800810c:	08008043 	.word	0x08008043
 8008110:	08008031 	.word	0x08008031
 8008114:	08008055 	.word	0x08008055
 8008118:	08001741 	.word	0x08001741
 800811c:	08008067 	.word	0x08008067
 8008120:	08008079 	.word	0x08008079
 8008124:	0800808b 	.word	0x0800808b
 8008128:	0800809d 	.word	0x0800809d
 800812c:	080080af 	.word	0x080080af

08008130 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b084      	sub	sp, #16
 8008134:	af00      	add	r7, sp, #0
 8008136:	60f8      	str	r0, [r7, #12]
 8008138:	60b9      	str	r1, [r7, #8]
 800813a:	603b      	str	r3, [r7, #0]
 800813c:	4613      	mov	r3, r2
 800813e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008140:	e02c      	b.n	800819c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008142:	69bb      	ldr	r3, [r7, #24]
 8008144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008148:	d028      	beq.n	800819c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800814a:	69bb      	ldr	r3, [r7, #24]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d007      	beq.n	8008160 <UART_WaitOnFlagUntilTimeout+0x30>
 8008150:	f7f9 ffcc 	bl	80020ec <HAL_GetTick>
 8008154:	4602      	mov	r2, r0
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	1ad3      	subs	r3, r2, r3
 800815a:	69ba      	ldr	r2, [r7, #24]
 800815c:	429a      	cmp	r2, r3
 800815e:	d21d      	bcs.n	800819c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	68da      	ldr	r2, [r3, #12]
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800816e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	695a      	ldr	r2, [r3, #20]
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f022 0201 	bic.w	r2, r2, #1
 800817e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	2220      	movs	r2, #32
 8008184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	2220      	movs	r2, #32
 800818c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	2200      	movs	r2, #0
 8008194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008198:	2303      	movs	r3, #3
 800819a:	e00f      	b.n	80081bc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	681a      	ldr	r2, [r3, #0]
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	4013      	ands	r3, r2
 80081a6:	68ba      	ldr	r2, [r7, #8]
 80081a8:	429a      	cmp	r2, r3
 80081aa:	bf0c      	ite	eq
 80081ac:	2301      	moveq	r3, #1
 80081ae:	2300      	movne	r3, #0
 80081b0:	b2db      	uxtb	r3, r3
 80081b2:	461a      	mov	r2, r3
 80081b4:	79fb      	ldrb	r3, [r7, #7]
 80081b6:	429a      	cmp	r2, r3
 80081b8:	d0c3      	beq.n	8008142 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80081ba:	2300      	movs	r3, #0
}
 80081bc:	4618      	mov	r0, r3
 80081be:	3710      	adds	r7, #16
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}

080081c4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80081c4:	b480      	push	{r7}
 80081c6:	b085      	sub	sp, #20
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	60f8      	str	r0, [r7, #12]
 80081cc:	60b9      	str	r1, [r7, #8]
 80081ce:	4613      	mov	r3, r2
 80081d0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	68ba      	ldr	r2, [r7, #8]
 80081d6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	88fa      	ldrh	r2, [r7, #6]
 80081dc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	88fa      	ldrh	r2, [r7, #6]
 80081e2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	2200      	movs	r2, #0
 80081e8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	2222      	movs	r2, #34	; 0x22
 80081ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	2200      	movs	r2, #0
 80081f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	68da      	ldr	r2, [r3, #12]
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008208:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	695a      	ldr	r2, [r3, #20]
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f042 0201 	orr.w	r2, r2, #1
 8008218:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	68da      	ldr	r2, [r3, #12]
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f042 0220 	orr.w	r2, r2, #32
 8008228:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800822a:	2300      	movs	r3, #0
}
 800822c:	4618      	mov	r0, r3
 800822e:	3714      	adds	r7, #20
 8008230:	46bd      	mov	sp, r7
 8008232:	bc80      	pop	{r7}
 8008234:	4770      	bx	lr

08008236 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008236:	b480      	push	{r7}
 8008238:	b083      	sub	sp, #12
 800823a:	af00      	add	r7, sp, #0
 800823c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	68da      	ldr	r2, [r3, #12]
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800824c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	695a      	ldr	r2, [r3, #20]
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f022 0201 	bic.w	r2, r2, #1
 800825c:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008262:	2b01      	cmp	r3, #1
 8008264:	d107      	bne.n	8008276 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	68da      	ldr	r2, [r3, #12]
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f022 0210 	bic.w	r2, r2, #16
 8008274:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2220      	movs	r2, #32
 800827a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2200      	movs	r2, #0
 8008282:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008284:	bf00      	nop
 8008286:	370c      	adds	r7, #12
 8008288:	46bd      	mov	sp, r7
 800828a:	bc80      	pop	{r7}
 800828c:	4770      	bx	lr

0800828e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800828e:	b580      	push	{r7, lr}
 8008290:	b084      	sub	sp, #16
 8008292:	af00      	add	r7, sp, #0
 8008294:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800829a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	2200      	movs	r2, #0
 80082a0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	2200      	movs	r2, #0
 80082a6:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082ac:	68f8      	ldr	r0, [r7, #12]
 80082ae:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80082b0:	bf00      	nop
 80082b2:	3710      	adds	r7, #16
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}

080082b8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80082b8:	b480      	push	{r7}
 80082ba:	b085      	sub	sp, #20
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082c6:	b2db      	uxtb	r3, r3
 80082c8:	2b21      	cmp	r3, #33	; 0x21
 80082ca:	d13e      	bne.n	800834a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	689b      	ldr	r3, [r3, #8]
 80082d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082d4:	d114      	bne.n	8008300 <UART_Transmit_IT+0x48>
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	691b      	ldr	r3, [r3, #16]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d110      	bne.n	8008300 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6a1b      	ldr	r3, [r3, #32]
 80082e2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	881b      	ldrh	r3, [r3, #0]
 80082e8:	461a      	mov	r2, r3
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80082f2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6a1b      	ldr	r3, [r3, #32]
 80082f8:	1c9a      	adds	r2, r3, #2
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	621a      	str	r2, [r3, #32]
 80082fe:	e008      	b.n	8008312 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6a1b      	ldr	r3, [r3, #32]
 8008304:	1c59      	adds	r1, r3, #1
 8008306:	687a      	ldr	r2, [r7, #4]
 8008308:	6211      	str	r1, [r2, #32]
 800830a:	781a      	ldrb	r2, [r3, #0]
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008316:	b29b      	uxth	r3, r3
 8008318:	3b01      	subs	r3, #1
 800831a:	b29b      	uxth	r3, r3
 800831c:	687a      	ldr	r2, [r7, #4]
 800831e:	4619      	mov	r1, r3
 8008320:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008322:	2b00      	cmp	r3, #0
 8008324:	d10f      	bne.n	8008346 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	68da      	ldr	r2, [r3, #12]
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008334:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	68da      	ldr	r2, [r3, #12]
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008344:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008346:	2300      	movs	r3, #0
 8008348:	e000      	b.n	800834c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800834a:	2302      	movs	r3, #2
  }
}
 800834c:	4618      	mov	r0, r3
 800834e:	3714      	adds	r7, #20
 8008350:	46bd      	mov	sp, r7
 8008352:	bc80      	pop	{r7}
 8008354:	4770      	bx	lr

08008356 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008356:	b580      	push	{r7, lr}
 8008358:	b082      	sub	sp, #8
 800835a:	af00      	add	r7, sp, #0
 800835c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	68da      	ldr	r2, [r3, #12]
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800836c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2220      	movs	r2, #32
 8008372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800837e:	2300      	movs	r3, #0
}
 8008380:	4618      	mov	r0, r3
 8008382:	3708      	adds	r7, #8
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}

08008388 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b086      	sub	sp, #24
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008396:	b2db      	uxtb	r3, r3
 8008398:	2b22      	cmp	r3, #34	; 0x22
 800839a:	f040 809b 	bne.w	80084d4 <UART_Receive_IT+0x14c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	689b      	ldr	r3, [r3, #8]
 80083a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083a6:	d117      	bne.n	80083d8 <UART_Receive_IT+0x50>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	691b      	ldr	r3, [r3, #16]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d113      	bne.n	80083d8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80083b0:	2300      	movs	r3, #0
 80083b2:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083b8:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	685b      	ldr	r3, [r3, #4]
 80083c0:	b29b      	uxth	r3, r3
 80083c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083c6:	b29a      	uxth	r2, r3
 80083c8:	693b      	ldr	r3, [r7, #16]
 80083ca:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083d0:	1c9a      	adds	r2, r3, #2
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	629a      	str	r2, [r3, #40]	; 0x28
 80083d6:	e026      	b.n	8008426 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083dc:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80083de:	2300      	movs	r3, #0
 80083e0:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	689b      	ldr	r3, [r3, #8]
 80083e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083ea:	d007      	beq.n	80083fc <UART_Receive_IT+0x74>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	689b      	ldr	r3, [r3, #8]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d10a      	bne.n	800840a <UART_Receive_IT+0x82>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	691b      	ldr	r3, [r3, #16]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d106      	bne.n	800840a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	685b      	ldr	r3, [r3, #4]
 8008402:	b2da      	uxtb	r2, r3
 8008404:	697b      	ldr	r3, [r7, #20]
 8008406:	701a      	strb	r2, [r3, #0]
 8008408:	e008      	b.n	800841c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	685b      	ldr	r3, [r3, #4]
 8008410:	b2db      	uxtb	r3, r3
 8008412:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008416:	b2da      	uxtb	r2, r3
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008420:	1c5a      	adds	r2, r3, #1
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800842a:	b29b      	uxth	r3, r3
 800842c:	3b01      	subs	r3, #1
 800842e:	b29b      	uxth	r3, r3
 8008430:	687a      	ldr	r2, [r7, #4]
 8008432:	4619      	mov	r1, r3
 8008434:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008436:	2b00      	cmp	r3, #0
 8008438:	d14a      	bne.n	80084d0 <UART_Receive_IT+0x148>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	68da      	ldr	r2, [r3, #12]
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f022 0220 	bic.w	r2, r2, #32
 8008448:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	68da      	ldr	r2, [r3, #12]
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008458:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	695a      	ldr	r2, [r3, #20]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f022 0201 	bic.w	r2, r2, #1
 8008468:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2220      	movs	r2, #32
 800846e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008476:	2b01      	cmp	r3, #1
 8008478:	d124      	bne.n	80084c4 <UART_Receive_IT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2200      	movs	r2, #0
 800847e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	68da      	ldr	r2, [r3, #12]
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f022 0210 	bic.w	r2, r2, #16
 800848e:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f003 0310 	and.w	r3, r3, #16
 800849a:	2b10      	cmp	r3, #16
 800849c:	d10a      	bne.n	80084b4 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800849e:	2300      	movs	r3, #0
 80084a0:	60fb      	str	r3, [r7, #12]
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	60fb      	str	r3, [r7, #12]
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	685b      	ldr	r3, [r3, #4]
 80084b0:	60fb      	str	r3, [r7, #12]
 80084b2:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80084b8:	687a      	ldr	r2, [r7, #4]
 80084ba:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 80084bc:	4611      	mov	r1, r2
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	4798      	blx	r3
 80084c2:	e003      	b.n	80084cc <UART_Receive_IT+0x144>
      else
      {
       /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	4798      	blx	r3
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80084cc:	2300      	movs	r3, #0
 80084ce:	e002      	b.n	80084d6 <UART_Receive_IT+0x14e>
    }
    return HAL_OK;
 80084d0:	2300      	movs	r3, #0
 80084d2:	e000      	b.n	80084d6 <UART_Receive_IT+0x14e>
  }
  else
  {
    return HAL_BUSY;
 80084d4:	2302      	movs	r3, #2
  }
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	3718      	adds	r7, #24
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}
	...

080084e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b084      	sub	sp, #16
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	685b      	ldr	r3, [r3, #4]
 80084ec:	4a5f      	ldr	r2, [pc, #380]	; (800866c <UART_SetConfig+0x18c>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d904      	bls.n	80084fc <UART_SetConfig+0x1c>
 80084f2:	f640 6153 	movw	r1, #3667	; 0xe53
 80084f6:	485e      	ldr	r0, [pc, #376]	; (8008670 <UART_SetConfig+0x190>)
 80084f8:	f7f9 f948 	bl	800178c <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	68db      	ldr	r3, [r3, #12]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d009      	beq.n	8008518 <UART_SetConfig+0x38>
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	68db      	ldr	r3, [r3, #12]
 8008508:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800850c:	d004      	beq.n	8008518 <UART_SetConfig+0x38>
 800850e:	f640 6154 	movw	r1, #3668	; 0xe54
 8008512:	4857      	ldr	r0, [pc, #348]	; (8008670 <UART_SetConfig+0x190>)
 8008514:	f7f9 f93a 	bl	800178c <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	691b      	ldr	r3, [r3, #16]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d00e      	beq.n	800853e <UART_SetConfig+0x5e>
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	691b      	ldr	r3, [r3, #16]
 8008524:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008528:	d009      	beq.n	800853e <UART_SetConfig+0x5e>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	691b      	ldr	r3, [r3, #16]
 800852e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008532:	d004      	beq.n	800853e <UART_SetConfig+0x5e>
 8008534:	f640 6155 	movw	r1, #3669	; 0xe55
 8008538:	484d      	ldr	r0, [pc, #308]	; (8008670 <UART_SetConfig+0x190>)
 800853a:	f7f9 f927 	bl	800178c <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	695a      	ldr	r2, [r3, #20]
 8008542:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8008546:	4013      	ands	r3, r2
 8008548:	2b00      	cmp	r3, #0
 800854a:	d103      	bne.n	8008554 <UART_SetConfig+0x74>
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	695b      	ldr	r3, [r3, #20]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d104      	bne.n	800855e <UART_SetConfig+0x7e>
 8008554:	f640 6156 	movw	r1, #3670	; 0xe56
 8008558:	4845      	ldr	r0, [pc, #276]	; (8008670 <UART_SetConfig+0x190>)
 800855a:	f7f9 f917 	bl	800178c <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	691b      	ldr	r3, [r3, #16]
 8008564:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	68da      	ldr	r2, [r3, #12]
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	430a      	orrs	r2, r1
 8008572:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	689a      	ldr	r2, [r3, #8]
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	691b      	ldr	r3, [r3, #16]
 800857c:	431a      	orrs	r2, r3
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	695b      	ldr	r3, [r3, #20]
 8008582:	4313      	orrs	r3, r2
 8008584:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	68db      	ldr	r3, [r3, #12]
 800858c:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8008590:	f023 030c 	bic.w	r3, r3, #12
 8008594:	687a      	ldr	r2, [r7, #4]
 8008596:	6812      	ldr	r2, [r2, #0]
 8008598:	68b9      	ldr	r1, [r7, #8]
 800859a:	430b      	orrs	r3, r1
 800859c:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	695b      	ldr	r3, [r3, #20]
 80085a4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	699a      	ldr	r2, [r3, #24]
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	430a      	orrs	r2, r1
 80085b2:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	4a2e      	ldr	r2, [pc, #184]	; (8008674 <UART_SetConfig+0x194>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d103      	bne.n	80085c6 <UART_SetConfig+0xe6>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80085be:	f7fb feaf 	bl	8004320 <HAL_RCC_GetPCLK2Freq>
 80085c2:	60f8      	str	r0, [r7, #12]
 80085c4:	e002      	b.n	80085cc <UART_SetConfig+0xec>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80085c6:	f7fb fe97 	bl	80042f8 <HAL_RCC_GetPCLK1Freq>
 80085ca:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80085cc:	68fa      	ldr	r2, [r7, #12]
 80085ce:	4613      	mov	r3, r2
 80085d0:	009b      	lsls	r3, r3, #2
 80085d2:	4413      	add	r3, r2
 80085d4:	009a      	lsls	r2, r3, #2
 80085d6:	441a      	add	r2, r3
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	685b      	ldr	r3, [r3, #4]
 80085dc:	009b      	lsls	r3, r3, #2
 80085de:	fbb2 f3f3 	udiv	r3, r2, r3
 80085e2:	4a25      	ldr	r2, [pc, #148]	; (8008678 <UART_SetConfig+0x198>)
 80085e4:	fba2 2303 	umull	r2, r3, r2, r3
 80085e8:	095b      	lsrs	r3, r3, #5
 80085ea:	0119      	lsls	r1, r3, #4
 80085ec:	68fa      	ldr	r2, [r7, #12]
 80085ee:	4613      	mov	r3, r2
 80085f0:	009b      	lsls	r3, r3, #2
 80085f2:	4413      	add	r3, r2
 80085f4:	009a      	lsls	r2, r3, #2
 80085f6:	441a      	add	r2, r3
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	685b      	ldr	r3, [r3, #4]
 80085fc:	009b      	lsls	r3, r3, #2
 80085fe:	fbb2 f2f3 	udiv	r2, r2, r3
 8008602:	4b1d      	ldr	r3, [pc, #116]	; (8008678 <UART_SetConfig+0x198>)
 8008604:	fba3 0302 	umull	r0, r3, r3, r2
 8008608:	095b      	lsrs	r3, r3, #5
 800860a:	2064      	movs	r0, #100	; 0x64
 800860c:	fb00 f303 	mul.w	r3, r0, r3
 8008610:	1ad3      	subs	r3, r2, r3
 8008612:	011b      	lsls	r3, r3, #4
 8008614:	3332      	adds	r3, #50	; 0x32
 8008616:	4a18      	ldr	r2, [pc, #96]	; (8008678 <UART_SetConfig+0x198>)
 8008618:	fba2 2303 	umull	r2, r3, r2, r3
 800861c:	095b      	lsrs	r3, r3, #5
 800861e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008622:	4419      	add	r1, r3
 8008624:	68fa      	ldr	r2, [r7, #12]
 8008626:	4613      	mov	r3, r2
 8008628:	009b      	lsls	r3, r3, #2
 800862a:	4413      	add	r3, r2
 800862c:	009a      	lsls	r2, r3, #2
 800862e:	441a      	add	r2, r3
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	685b      	ldr	r3, [r3, #4]
 8008634:	009b      	lsls	r3, r3, #2
 8008636:	fbb2 f2f3 	udiv	r2, r2, r3
 800863a:	4b0f      	ldr	r3, [pc, #60]	; (8008678 <UART_SetConfig+0x198>)
 800863c:	fba3 0302 	umull	r0, r3, r3, r2
 8008640:	095b      	lsrs	r3, r3, #5
 8008642:	2064      	movs	r0, #100	; 0x64
 8008644:	fb00 f303 	mul.w	r3, r0, r3
 8008648:	1ad3      	subs	r3, r2, r3
 800864a:	011b      	lsls	r3, r3, #4
 800864c:	3332      	adds	r3, #50	; 0x32
 800864e:	4a0a      	ldr	r2, [pc, #40]	; (8008678 <UART_SetConfig+0x198>)
 8008650:	fba2 2303 	umull	r2, r3, r2, r3
 8008654:	095b      	lsrs	r3, r3, #5
 8008656:	f003 020f 	and.w	r2, r3, #15
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	440a      	add	r2, r1
 8008660:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008662:	bf00      	nop
 8008664:	3710      	adds	r7, #16
 8008666:	46bd      	mov	sp, r7
 8008668:	bd80      	pop	{r7, pc}
 800866a:	bf00      	nop
 800866c:	0044aa20 	.word	0x0044aa20
 8008670:	0800bc74 	.word	0x0800bc74
 8008674:	40013800 	.word	0x40013800
 8008678:	51eb851f 	.word	0x51eb851f

0800867c <BAT_init>:
static ADC_HandleTypeDef *g_BAT_adcHandle;
static RTC_HandleTypeDef *g_BAT_rtcHandle;
static RTC_TimeTypeDef    g_BAT_lastReadTime;

void BAT_init(ADC_HandleTypeDef *p_adcHandle, RTC_HandleTypeDef *p_rtcHandle)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b084      	sub	sp, #16
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
 8008684:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef l_halReturnCode;
  RTC_TimeTypeDef   l_time;
  RTC_DateTypeDef   l_date;

  LOG_info("Initializing battery check");
 8008686:	491e      	ldr	r1, [pc, #120]	; (8008700 <BAT_init+0x84>)
 8008688:	2001      	movs	r0, #1
 800868a:	f001 fa97 	bl	8009bbc <LOG_log>

  g_BAT_adcHandle = p_adcHandle;
 800868e:	4a1d      	ldr	r2, [pc, #116]	; (8008704 <BAT_init+0x88>)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6013      	str	r3, [r2, #0]
  g_BAT_rtcHandle = p_rtcHandle;
 8008694:	4a1c      	ldr	r2, [pc, #112]	; (8008708 <BAT_init+0x8c>)
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	6013      	str	r3, [r2, #0]

  l_halReturnCode = HAL_RTC_GetTime(g_BAT_rtcHandle, &l_time, RTC_FORMAT_BCD);
 800869a:	4b1b      	ldr	r3, [pc, #108]	; (8008708 <BAT_init+0x8c>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f107 010c 	add.w	r1, r7, #12
 80086a2:	2201      	movs	r2, #1
 80086a4:	4618      	mov	r0, r3
 80086a6:	f7fc fa39 	bl	8004b1c <HAL_RTC_GetTime>
 80086aa:	4603      	mov	r3, r0
 80086ac:	73fb      	strb	r3, [r7, #15]

  if (l_halReturnCode != HAL_OK)
 80086ae:	7bfb      	ldrb	r3, [r7, #15]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d005      	beq.n	80086c0 <BAT_init+0x44>
  {
    LOG_error("HAL_RTC_GetTime() returned an error code: %d", l_halReturnCode);
 80086b4:	7bfb      	ldrb	r3, [r7, #15]
 80086b6:	461a      	mov	r2, r3
 80086b8:	4914      	ldr	r1, [pc, #80]	; (800870c <BAT_init+0x90>)
 80086ba:	2003      	movs	r0, #3
 80086bc:	f001 fa7e 	bl	8009bbc <LOG_log>
  else
  {
    ; /* Nothing to to */
  }

  l_halReturnCode = HAL_RTC_GetDate(g_BAT_rtcHandle, &l_date, RTC_FORMAT_BCD);
 80086c0:	4b11      	ldr	r3, [pc, #68]	; (8008708 <BAT_init+0x8c>)
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f107 0108 	add.w	r1, r7, #8
 80086c8:	2201      	movs	r2, #1
 80086ca:	4618      	mov	r0, r3
 80086cc:	f7fc fc2a 	bl	8004f24 <HAL_RTC_GetDate>
 80086d0:	4603      	mov	r3, r0
 80086d2:	73fb      	strb	r3, [r7, #15]

  if (l_halReturnCode != HAL_OK)
 80086d4:	7bfb      	ldrb	r3, [r7, #15]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d005      	beq.n	80086e6 <BAT_init+0x6a>
  {
    LOG_error("HAL_RTC_GetDate() returned an error code: %d", l_halReturnCode);
 80086da:	7bfb      	ldrb	r3, [r7, #15]
 80086dc:	461a      	mov	r2, r3
 80086de:	490c      	ldr	r1, [pc, #48]	; (8008710 <BAT_init+0x94>)
 80086e0:	2003      	movs	r0, #3
 80086e2:	f001 fa6b 	bl	8009bbc <LOG_log>
  else
  {
    ; /* Nothing to to */
  }

  g_BAT_lastReadTime = l_time;
 80086e6:	4b0b      	ldr	r3, [pc, #44]	; (8008714 <BAT_init+0x98>)
 80086e8:	f107 020c 	add.w	r2, r7, #12
 80086ec:	6812      	ldr	r2, [r2, #0]
 80086ee:	4611      	mov	r1, r2
 80086f0:	8019      	strh	r1, [r3, #0]
 80086f2:	3302      	adds	r3, #2
 80086f4:	0c12      	lsrs	r2, r2, #16
 80086f6:	701a      	strb	r2, [r3, #0]

  return;
 80086f8:	bf00      	nop
}
 80086fa:	3710      	adds	r7, #16
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bd80      	pop	{r7, pc}
 8008700:	0800bcb0 	.word	0x0800bcb0
 8008704:	200000a8 	.word	0x200000a8
 8008708:	200000ac 	.word	0x200000ac
 800870c:	0800bccc 	.word	0x0800bccc
 8008710:	0800bcfc 	.word	0x0800bcfc
 8008714:	200000b0 	.word	0x200000b0

08008718 <BAT_update>:

void BAT_update(uint32_t *p_voltageInMv)
{
 8008718:	b590      	push	{r4, r7, lr}
 800871a:	b089      	sub	sp, #36	; 0x24
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
  RTC_TimeTypeDef   l_time;
  RTC_DateTypeDef   l_date;
  uint32_t          l_adcRawData;
  float             l_voltageInV;

  l_halReturnCode = HAL_RTC_GetTime(g_BAT_rtcHandle, &l_time, RTC_FORMAT_BCD);
 8008720:	4b48      	ldr	r3, [pc, #288]	; (8008844 <BAT_update+0x12c>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f107 0110 	add.w	r1, r7, #16
 8008728:	2201      	movs	r2, #1
 800872a:	4618      	mov	r0, r3
 800872c:	f7fc f9f6 	bl	8004b1c <HAL_RTC_GetTime>
 8008730:	4603      	mov	r3, r0
 8008732:	77fb      	strb	r3, [r7, #31]

  if (l_halReturnCode != HAL_OK)
 8008734:	7ffb      	ldrb	r3, [r7, #31]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d005      	beq.n	8008746 <BAT_update+0x2e>
  {
    LOG_error("HAL_RTC_GetTime() returned an error code: %d", l_halReturnCode);
 800873a:	7ffb      	ldrb	r3, [r7, #31]
 800873c:	461a      	mov	r2, r3
 800873e:	4942      	ldr	r1, [pc, #264]	; (8008848 <BAT_update+0x130>)
 8008740:	2003      	movs	r0, #3
 8008742:	f001 fa3b 	bl	8009bbc <LOG_log>
  else
  {
    ; /* Nothing to to */
  }

  l_halReturnCode = HAL_RTC_GetDate(g_BAT_rtcHandle, &l_date, RTC_FORMAT_BCD);
 8008746:	4b3f      	ldr	r3, [pc, #252]	; (8008844 <BAT_update+0x12c>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f107 010c 	add.w	r1, r7, #12
 800874e:	2201      	movs	r2, #1
 8008750:	4618      	mov	r0, r3
 8008752:	f7fc fbe7 	bl	8004f24 <HAL_RTC_GetDate>
 8008756:	4603      	mov	r3, r0
 8008758:	77fb      	strb	r3, [r7, #31]

  if (l_halReturnCode != HAL_OK)
 800875a:	7ffb      	ldrb	r3, [r7, #31]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d005      	beq.n	800876c <BAT_update+0x54>
  {
    LOG_error("HAL_RTC_GetDate() returned an error code: %d", l_halReturnCode);
 8008760:	7ffb      	ldrb	r3, [r7, #31]
 8008762:	461a      	mov	r2, r3
 8008764:	4939      	ldr	r1, [pc, #228]	; (800884c <BAT_update+0x134>)
 8008766:	2003      	movs	r0, #3
 8008768:	f001 fa28 	bl	8009bbc <LOG_log>
  else
  {
    ; /* Nothing to to */
  }

  if (UTI_turnRtcTimeToSeconds(&l_time) - UTI_turnRtcTimeToSeconds(&g_BAT_lastReadTime) >= BAT_POLLING_PERIOD_IN_S)
 800876c:	f107 0310 	add.w	r3, r7, #16
 8008770:	4618      	mov	r0, r3
 8008772:	f001 fe2c 	bl	800a3ce <UTI_turnRtcTimeToSeconds>
 8008776:	4604      	mov	r4, r0
 8008778:	4835      	ldr	r0, [pc, #212]	; (8008850 <BAT_update+0x138>)
 800877a:	f001 fe28 	bl	800a3ce <UTI_turnRtcTimeToSeconds>
 800877e:	4603      	mov	r3, r0
 8008780:	1ae3      	subs	r3, r4, r3
 8008782:	2b09      	cmp	r3, #9
 8008784:	d959      	bls.n	800883a <BAT_update+0x122>
  {
    g_BAT_lastReadTime = l_time;
 8008786:	4b32      	ldr	r3, [pc, #200]	; (8008850 <BAT_update+0x138>)
 8008788:	f107 0210 	add.w	r2, r7, #16
 800878c:	6812      	ldr	r2, [r2, #0]
 800878e:	4611      	mov	r1, r2
 8008790:	8019      	strh	r1, [r3, #0]
 8008792:	3302      	adds	r3, #2
 8008794:	0c12      	lsrs	r2, r2, #16
 8008796:	701a      	strb	r2, [r3, #0]

    l_halReturnCode = HAL_ADC_Start(g_BAT_adcHandle);
 8008798:	4b2e      	ldr	r3, [pc, #184]	; (8008854 <BAT_update+0x13c>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	4618      	mov	r0, r3
 800879e:	f7f9 fe51 	bl	8002444 <HAL_ADC_Start>
 80087a2:	4603      	mov	r3, r0
 80087a4:	77fb      	strb	r3, [r7, #31]

    if (l_halReturnCode != HAL_OK)
 80087a6:	7ffb      	ldrb	r3, [r7, #31]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d005      	beq.n	80087b8 <BAT_update+0xa0>
    {
      LOG_error("HAL_ADC_Start() returned an error code: %d", l_halReturnCode);
 80087ac:	7ffb      	ldrb	r3, [r7, #31]
 80087ae:	461a      	mov	r2, r3
 80087b0:	4929      	ldr	r1, [pc, #164]	; (8008858 <BAT_update+0x140>)
 80087b2:	2003      	movs	r0, #3
 80087b4:	f001 fa02 	bl	8009bbc <LOG_log>
    else
    {
      ; /* Nothing to to */
    }

    l_halReturnCode = HAL_ADC_PollForConversion(g_BAT_adcHandle, HAL_MAX_DELAY);
 80087b8:	4b26      	ldr	r3, [pc, #152]	; (8008854 <BAT_update+0x13c>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f04f 31ff 	mov.w	r1, #4294967295
 80087c0:	4618      	mov	r0, r3
 80087c2:	f7f9 ff05 	bl	80025d0 <HAL_ADC_PollForConversion>
 80087c6:	4603      	mov	r3, r0
 80087c8:	77fb      	strb	r3, [r7, #31]

    if (l_halReturnCode != HAL_OK)
 80087ca:	7ffb      	ldrb	r3, [r7, #31]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d005      	beq.n	80087dc <BAT_update+0xc4>
    {
      LOG_error("HAL_ADC_PollForConversion() returned an error code: %d", l_halReturnCode);
 80087d0:	7ffb      	ldrb	r3, [r7, #31]
 80087d2:	461a      	mov	r2, r3
 80087d4:	4921      	ldr	r1, [pc, #132]	; (800885c <BAT_update+0x144>)
 80087d6:	2003      	movs	r0, #3
 80087d8:	f001 f9f0 	bl	8009bbc <LOG_log>
    else
    {
      ; /* Nothing to to */
    }

    l_adcRawData = HAL_ADC_GetValue(g_BAT_adcHandle);
 80087dc:	4b1d      	ldr	r3, [pc, #116]	; (8008854 <BAT_update+0x13c>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4618      	mov	r0, r3
 80087e2:	f7fa f817 	bl	8002814 <HAL_ADC_GetValue>
 80087e6:	61b8      	str	r0, [r7, #24]

    /* Apply conversion based on STM32 reference voltage & resolution */
    l_voltageInV  = (l_adcRawData * 3.30f ) / 4096.0f;
 80087e8:	69b8      	ldr	r0, [r7, #24]
 80087ea:	f7f7 fdd1 	bl	8000390 <__aeabi_ui2f>
 80087ee:	4603      	mov	r3, r0
 80087f0:	491b      	ldr	r1, [pc, #108]	; (8008860 <BAT_update+0x148>)
 80087f2:	4618      	mov	r0, r3
 80087f4:	f7f7 fe24 	bl	8000440 <__aeabi_fmul>
 80087f8:	4603      	mov	r3, r0
 80087fa:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 80087fe:	4618      	mov	r0, r3
 8008800:	f7f7 fed2 	bl	80005a8 <__aeabi_fdiv>
 8008804:	4603      	mov	r3, r0
 8008806:	617b      	str	r3, [r7, #20]

    /* Consider voltage divider used between the battery & the ADC input */
    l_voltageInV *= 11.0f;
 8008808:	4916      	ldr	r1, [pc, #88]	; (8008864 <BAT_update+0x14c>)
 800880a:	6978      	ldr	r0, [r7, #20]
 800880c:	f7f7 fe18 	bl	8000440 <__aeabi_fmul>
 8008810:	4603      	mov	r3, r0
 8008812:	617b      	str	r3, [r7, #20]

    *p_voltageInMv = (uint32_t)(l_voltageInV * 1000.0f);
 8008814:	4914      	ldr	r1, [pc, #80]	; (8008868 <BAT_update+0x150>)
 8008816:	6978      	ldr	r0, [r7, #20]
 8008818:	f7f7 fe12 	bl	8000440 <__aeabi_fmul>
 800881c:	4603      	mov	r3, r0
 800881e:	4618      	mov	r0, r3
 8008820:	f7f7 fffa 	bl	8000818 <__aeabi_f2uiz>
 8008824:	4602      	mov	r2, r0
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	601a      	str	r2, [r3, #0]

    LOG_debug("Battery level: %u mV", *p_voltageInMv);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	461a      	mov	r2, r3
 8008830:	490e      	ldr	r1, [pc, #56]	; (800886c <BAT_update+0x154>)
 8008832:	2000      	movs	r0, #0
 8008834:	f001 f9c2 	bl	8009bbc <LOG_log>
  else
  {
    ; /* Nothing to do */
  }

  return;
 8008838:	bf00      	nop
 800883a:	bf00      	nop
}
 800883c:	3724      	adds	r7, #36	; 0x24
 800883e:	46bd      	mov	sp, r7
 8008840:	bd90      	pop	{r4, r7, pc}
 8008842:	bf00      	nop
 8008844:	200000ac 	.word	0x200000ac
 8008848:	0800bccc 	.word	0x0800bccc
 800884c:	0800bcfc 	.word	0x0800bcfc
 8008850:	200000b0 	.word	0x200000b0
 8008854:	200000a8 	.word	0x200000a8
 8008858:	0800bd2c 	.word	0x0800bd2c
 800885c:	0800bd58 	.word	0x0800bd58
 8008860:	40533333 	.word	0x40533333
 8008864:	41300000 	.word	0x41300000
 8008868:	447a0000 	.word	0x447a0000
 800886c:	0800bd90 	.word	0x0800bd90

08008870 <BLU_sendCommand>:
static void         BLU_readData     (uint8_t *p_buffer                                                );
static T_BLU_BUTTON BLU_getButton    (uint8_t *p_buffer                                                );
static int32_t      BLU_normalizeData(uint32_t p_rawData, uint32_t p_maxValue, bool p_isInversionNeeded);

static void BLU_sendCommand(uint8_t p_command)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b084      	sub	sp, #16
 8008874:	af00      	add	r7, sp, #0
 8008876:	4603      	mov	r3, r0
 8008878:	71fb      	strb	r3, [r7, #7]
  volatile uint16_t l_bitValue;

  for (l_bitValue = 0x01; l_bitValue < 0x0100; l_bitValue <<= 1)
 800887a:	2301      	movs	r3, #1
 800887c:	81fb      	strh	r3, [r7, #14]
 800887e:	e030      	b.n	80088e2 <BLU_sendCommand+0x72>
  {
    if ((l_bitValue & p_command) != 0)
 8008880:	89fb      	ldrh	r3, [r7, #14]
 8008882:	b29b      	uxth	r3, r3
 8008884:	461a      	mov	r2, r3
 8008886:	79fb      	ldrb	r3, [r7, #7]
 8008888:	4013      	ands	r3, r2
 800888a:	2b00      	cmp	r3, #0
 800888c:	d006      	beq.n	800889c <BLU_sendCommand+0x2c>
    {
      SET_BIT(GPIOC->ODR, BLUETOOTH_SPI_CMD_Pin);
 800888e:	4b1a      	ldr	r3, [pc, #104]	; (80088f8 <BLU_sendCommand+0x88>)
 8008890:	68db      	ldr	r3, [r3, #12]
 8008892:	4a19      	ldr	r2, [pc, #100]	; (80088f8 <BLU_sendCommand+0x88>)
 8008894:	f043 0302 	orr.w	r3, r3, #2
 8008898:	60d3      	str	r3, [r2, #12]
 800889a:	e005      	b.n	80088a8 <BLU_sendCommand+0x38>
    }
    else
    {
      CLEAR_BIT(GPIOC->ODR, BLUETOOTH_SPI_CMD_Pin);
 800889c:	4b16      	ldr	r3, [pc, #88]	; (80088f8 <BLU_sendCommand+0x88>)
 800889e:	68db      	ldr	r3, [r3, #12]
 80088a0:	4a15      	ldr	r2, [pc, #84]	; (80088f8 <BLU_sendCommand+0x88>)
 80088a2:	f023 0302 	bic.w	r3, r3, #2
 80088a6:	60d3      	str	r3, [r2, #12]
    }

    SET_BIT(GPIOA->ODR  , BLUETOOTH_SPI_CLK_Pin);
 80088a8:	4b14      	ldr	r3, [pc, #80]	; (80088fc <BLU_sendCommand+0x8c>)
 80088aa:	68db      	ldr	r3, [r3, #12]
 80088ac:	4a13      	ldr	r2, [pc, #76]	; (80088fc <BLU_sendCommand+0x8c>)
 80088ae:	f043 0310 	orr.w	r3, r3, #16
 80088b2:	60d3      	str	r3, [r2, #12]
    UTI_delayUs(5);
 80088b4:	2005      	movs	r0, #5
 80088b6:	f001 fd49 	bl	800a34c <UTI_delayUs>
    CLEAR_BIT(GPIOA->ODR, BLUETOOTH_SPI_CLK_Pin);
 80088ba:	4b10      	ldr	r3, [pc, #64]	; (80088fc <BLU_sendCommand+0x8c>)
 80088bc:	68db      	ldr	r3, [r3, #12]
 80088be:	4a0f      	ldr	r2, [pc, #60]	; (80088fc <BLU_sendCommand+0x8c>)
 80088c0:	f023 0310 	bic.w	r3, r3, #16
 80088c4:	60d3      	str	r3, [r2, #12]
    UTI_delayUs(5);
 80088c6:	2005      	movs	r0, #5
 80088c8:	f001 fd40 	bl	800a34c <UTI_delayUs>
    SET_BIT(GPIOA->ODR  , BLUETOOTH_SPI_CLK_Pin);
 80088cc:	4b0b      	ldr	r3, [pc, #44]	; (80088fc <BLU_sendCommand+0x8c>)
 80088ce:	68db      	ldr	r3, [r3, #12]
 80088d0:	4a0a      	ldr	r2, [pc, #40]	; (80088fc <BLU_sendCommand+0x8c>)
 80088d2:	f043 0310 	orr.w	r3, r3, #16
 80088d6:	60d3      	str	r3, [r2, #12]
  for (l_bitValue = 0x01; l_bitValue < 0x0100; l_bitValue <<= 1)
 80088d8:	89fb      	ldrh	r3, [r7, #14]
 80088da:	b29b      	uxth	r3, r3
 80088dc:	005b      	lsls	r3, r3, #1
 80088de:	b29b      	uxth	r3, r3
 80088e0:	81fb      	strh	r3, [r7, #14]
 80088e2:	89fb      	ldrh	r3, [r7, #14]
 80088e4:	b29b      	uxth	r3, r3
 80088e6:	2bff      	cmp	r3, #255	; 0xff
 80088e8:	d9ca      	bls.n	8008880 <BLU_sendCommand+0x10>
  }
  UTI_delayUs(16);
 80088ea:	2010      	movs	r0, #16
 80088ec:	f001 fd2e 	bl	800a34c <UTI_delayUs>

  return;
 80088f0:	bf00      	nop
}
 80088f2:	3710      	adds	r7, #16
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd80      	pop	{r7, pc}
 80088f8:	40011000 	.word	0x40011000
 80088fc:	40010800 	.word	0x40010800

08008900 <BLU_readData>:

static void BLU_readData(uint8_t *p_buffer)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b084      	sub	sp, #16
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
  volatile uint8_t  l_index;
  volatile uint16_t l_bitValue;

  /* Reset buffer */
  for (l_index = 0; l_index < BLU_DATA_BUFFER_LENGTH; l_index++)
 8008908:	2300      	movs	r3, #0
 800890a:	73fb      	strb	r3, [r7, #15]
 800890c:	e00b      	b.n	8008926 <BLU_readData+0x26>
  {
    p_buffer[l_index] = 0x00;
 800890e:	7bfb      	ldrb	r3, [r7, #15]
 8008910:	b2db      	uxtb	r3, r3
 8008912:	461a      	mov	r2, r3
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	4413      	add	r3, r2
 8008918:	2200      	movs	r2, #0
 800891a:	701a      	strb	r2, [r3, #0]
  for (l_index = 0; l_index < BLU_DATA_BUFFER_LENGTH; l_index++)
 800891c:	7bfb      	ldrb	r3, [r7, #15]
 800891e:	b2db      	uxtb	r3, r3
 8008920:	3301      	adds	r3, #1
 8008922:	b2db      	uxtb	r3, r3
 8008924:	73fb      	strb	r3, [r7, #15]
 8008926:	7bfb      	ldrb	r3, [r7, #15]
 8008928:	b2db      	uxtb	r3, r3
 800892a:	2b06      	cmp	r3, #6
 800892c:	d9ef      	bls.n	800890e <BLU_readData+0xe>
  }

  CLEAR_BIT(GPIOC->ODR, BLUETOOTH_SPI_CS_Pin);
 800892e:	4b2e      	ldr	r3, [pc, #184]	; (80089e8 <BLU_readData+0xe8>)
 8008930:	68db      	ldr	r3, [r3, #12]
 8008932:	4a2d      	ldr	r2, [pc, #180]	; (80089e8 <BLU_readData+0xe8>)
 8008934:	f023 0308 	bic.w	r3, r3, #8
 8008938:	60d3      	str	r3, [r2, #12]

  BLU_sendCommand(0x01);
 800893a:	2001      	movs	r0, #1
 800893c:	f7ff ff98 	bl	8008870 <BLU_sendCommand>
  BLU_sendCommand(0x42);
 8008940:	2042      	movs	r0, #66	; 0x42
 8008942:	f7ff ff95 	bl	8008870 <BLU_sendCommand>

  for (l_index = 0; l_index < BLU_DATA_BUFFER_LENGTH; l_index++)
 8008946:	2300      	movs	r3, #0
 8008948:	73fb      	strb	r3, [r7, #15]
 800894a:	e03f      	b.n	80089cc <BLU_readData+0xcc>
  {
    for (l_bitValue = 0x01; l_bitValue < 0x100; l_bitValue <<= 1)
 800894c:	2301      	movs	r3, #1
 800894e:	81bb      	strh	r3, [r7, #12]
 8008950:	e030      	b.n	80089b4 <BLU_readData+0xb4>
    {
      SET_BIT(GPIOA->ODR  , BLUETOOTH_SPI_CLK_Pin);
 8008952:	4b26      	ldr	r3, [pc, #152]	; (80089ec <BLU_readData+0xec>)
 8008954:	68db      	ldr	r3, [r3, #12]
 8008956:	4a25      	ldr	r2, [pc, #148]	; (80089ec <BLU_readData+0xec>)
 8008958:	f043 0310 	orr.w	r3, r3, #16
 800895c:	60d3      	str	r3, [r2, #12]
      UTI_delayUs(5);
 800895e:	2005      	movs	r0, #5
 8008960:	f001 fcf4 	bl	800a34c <UTI_delayUs>
      CLEAR_BIT(GPIOA->ODR, BLUETOOTH_SPI_CLK_Pin);
 8008964:	4b21      	ldr	r3, [pc, #132]	; (80089ec <BLU_readData+0xec>)
 8008966:	68db      	ldr	r3, [r3, #12]
 8008968:	4a20      	ldr	r2, [pc, #128]	; (80089ec <BLU_readData+0xec>)
 800896a:	f023 0310 	bic.w	r3, r3, #16
 800896e:	60d3      	str	r3, [r2, #12]
      UTI_delayUs(5);
 8008970:	2005      	movs	r0, #5
 8008972:	f001 fceb 	bl	800a34c <UTI_delayUs>
      SET_BIT(GPIOA->ODR  , BLUETOOTH_SPI_CLK_Pin);
 8008976:	4b1d      	ldr	r3, [pc, #116]	; (80089ec <BLU_readData+0xec>)
 8008978:	68db      	ldr	r3, [r3, #12]
 800897a:	4a1c      	ldr	r2, [pc, #112]	; (80089ec <BLU_readData+0xec>)
 800897c:	f043 0310 	orr.w	r3, r3, #16
 8008980:	60d3      	str	r3, [r2, #12]

      if (READ_BIT(GPIOC->IDR, BLUETOOTH_SPI_DAT_Pin) != GPIO_PIN_RESET)
 8008982:	4b19      	ldr	r3, [pc, #100]	; (80089e8 <BLU_readData+0xe8>)
 8008984:	689b      	ldr	r3, [r3, #8]
 8008986:	f003 0304 	and.w	r3, r3, #4
 800898a:	2b00      	cmp	r3, #0
 800898c:	d00d      	beq.n	80089aa <BLU_readData+0xaa>
      {
        p_buffer[l_index] |= l_bitValue;
 800898e:	89bb      	ldrh	r3, [r7, #12]
 8008990:	b29a      	uxth	r2, r3
 8008992:	7bfb      	ldrb	r3, [r7, #15]
 8008994:	b2d8      	uxtb	r0, r3
 8008996:	4601      	mov	r1, r0
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	440b      	add	r3, r1
 800899c:	7819      	ldrb	r1, [r3, #0]
 800899e:	b2d2      	uxtb	r2, r2
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	4403      	add	r3, r0
 80089a4:	430a      	orrs	r2, r1
 80089a6:	b2d2      	uxtb	r2, r2
 80089a8:	701a      	strb	r2, [r3, #0]
    for (l_bitValue = 0x01; l_bitValue < 0x100; l_bitValue <<= 1)
 80089aa:	89bb      	ldrh	r3, [r7, #12]
 80089ac:	b29b      	uxth	r3, r3
 80089ae:	005b      	lsls	r3, r3, #1
 80089b0:	b29b      	uxth	r3, r3
 80089b2:	81bb      	strh	r3, [r7, #12]
 80089b4:	89bb      	ldrh	r3, [r7, #12]
 80089b6:	b29b      	uxth	r3, r3
 80089b8:	2bff      	cmp	r3, #255	; 0xff
 80089ba:	d9ca      	bls.n	8008952 <BLU_readData+0x52>
      else
      {
        ; /* Nothing to do */
      }
    }
      UTI_delayUs(16);
 80089bc:	2010      	movs	r0, #16
 80089be:	f001 fcc5 	bl	800a34c <UTI_delayUs>
  for (l_index = 0; l_index < BLU_DATA_BUFFER_LENGTH; l_index++)
 80089c2:	7bfb      	ldrb	r3, [r7, #15]
 80089c4:	b2db      	uxtb	r3, r3
 80089c6:	3301      	adds	r3, #1
 80089c8:	b2db      	uxtb	r3, r3
 80089ca:	73fb      	strb	r3, [r7, #15]
 80089cc:	7bfb      	ldrb	r3, [r7, #15]
 80089ce:	b2db      	uxtb	r3, r3
 80089d0:	2b06      	cmp	r3, #6
 80089d2:	d9bb      	bls.n	800894c <BLU_readData+0x4c>
  }

  SET_BIT(GPIOC->ODR, BLUETOOTH_SPI_CS_Pin);
 80089d4:	4b04      	ldr	r3, [pc, #16]	; (80089e8 <BLU_readData+0xe8>)
 80089d6:	68db      	ldr	r3, [r3, #12]
 80089d8:	4a03      	ldr	r2, [pc, #12]	; (80089e8 <BLU_readData+0xe8>)
 80089da:	f043 0308 	orr.w	r3, r3, #8
 80089de:	60d3      	str	r3, [r2, #12]

  return;
 80089e0:	bf00      	nop
}
 80089e2:	3710      	adds	r7, #16
 80089e4:	46bd      	mov	sp, r7
 80089e6:	bd80      	pop	{r7, pc}
 80089e8:	40011000 	.word	0x40011000
 80089ec:	40010800 	.word	0x40010800

080089f0 <BLU_getButton>:

static T_BLU_BUTTON BLU_getButton(uint8_t *p_buffer)
{
 80089f0:	b480      	push	{r7}
 80089f2:	b085      	sub	sp, #20
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
  uint16_t l_buttonRawValue;
  uint8_t  l_index;

  l_buttonRawValue = (p_buffer[BLU_BUTTON_HIGH_OFFSET] << 8) | p_buffer[BLU_BUTTON_LOW_OFFSET];
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	3302      	adds	r3, #2
 80089fc:	781b      	ldrb	r3, [r3, #0]
 80089fe:	021b      	lsls	r3, r3, #8
 8008a00:	b21a      	sxth	r2, r3
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	3301      	adds	r3, #1
 8008a06:	781b      	ldrb	r3, [r3, #0]
 8008a08:	b21b      	sxth	r3, r3
 8008a0a:	4313      	orrs	r3, r2
 8008a0c:	b21b      	sxth	r3, r3
 8008a0e:	81bb      	strh	r3, [r7, #12]

  /* Ignore BLU_BUTTON_NONE value as it is not directly coded in raw data */
  for (l_index = BLU_BUTTON_SELECT; l_index < BLU_BUTTON_COUNT_VALUE; l_index++)
 8008a10:	2301      	movs	r3, #1
 8008a12:	73fb      	strb	r3, [r7, #15]
 8008a14:	e00d      	b.n	8008a32 <BLU_getButton+0x42>
  {
    /* Stop decoding button data on 1st match (do not deal with multiple presses case) */
    if ((l_buttonRawValue & (1 << (l_index - 1))) == 0)
 8008a16:	89ba      	ldrh	r2, [r7, #12]
 8008a18:	7bfb      	ldrb	r3, [r7, #15]
 8008a1a:	3b01      	subs	r3, #1
 8008a1c:	fa42 f303 	asr.w	r3, r2, r3
 8008a20:	f003 0301 	and.w	r3, r3, #1
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d101      	bne.n	8008a2c <BLU_getButton+0x3c>
    {
      return l_index;
 8008a28:	7bfb      	ldrb	r3, [r7, #15]
 8008a2a:	e006      	b.n	8008a3a <BLU_getButton+0x4a>
  for (l_index = BLU_BUTTON_SELECT; l_index < BLU_BUTTON_COUNT_VALUE; l_index++)
 8008a2c:	7bfb      	ldrb	r3, [r7, #15]
 8008a2e:	3301      	adds	r3, #1
 8008a30:	73fb      	strb	r3, [r7, #15]
 8008a32:	7bfb      	ldrb	r3, [r7, #15]
 8008a34:	2b10      	cmp	r3, #16
 8008a36:	d9ee      	bls.n	8008a16 <BLU_getButton+0x26>
    {
      ; /* Nothing to do */
    }
  }

  return BLU_BUTTON_NONE;
 8008a38:	2300      	movs	r3, #0
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	3714      	adds	r7, #20
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bc80      	pop	{r7}
 8008a42:	4770      	bx	lr

08008a44 <BLU_normalizeData>:

static int32_t BLU_normalizeData(uint32_t p_rawData, uint32_t p_maxValue, bool p_isInversionNeeded)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b086      	sub	sp, #24
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	60f8      	str	r0, [r7, #12]
 8008a4c:	60b9      	str	r1, [r7, #8]
 8008a4e:	4613      	mov	r3, r2
 8008a50:	71fb      	strb	r3, [r7, #7]
  float l_normalizedData;

  l_normalizedData = p_rawData - 128.0f;
 8008a52:	68f8      	ldr	r0, [r7, #12]
 8008a54:	f7f7 fc9c 	bl	8000390 <__aeabi_ui2f>
 8008a58:	4603      	mov	r3, r0
 8008a5a:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f7f7 fbe4 	bl	800022c <__aeabi_fsub>
 8008a64:	4603      	mov	r3, r0
 8008a66:	617b      	str	r3, [r7, #20]

  if (l_normalizedData > 0.0f)
 8008a68:	f04f 0100 	mov.w	r1, #0
 8008a6c:	6978      	ldr	r0, [r7, #20]
 8008a6e:	f7f7 fea3 	bl	80007b8 <__aeabi_fcmpgt>
 8008a72:	4603      	mov	r3, r0
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d00f      	beq.n	8008a98 <BLU_normalizeData+0x54>
  {
    l_normalizedData *= (float)p_maxValue / 127.0f;
 8008a78:	68b8      	ldr	r0, [r7, #8]
 8008a7a:	f7f7 fc89 	bl	8000390 <__aeabi_ui2f>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	4915      	ldr	r1, [pc, #84]	; (8008ad8 <BLU_normalizeData+0x94>)
 8008a82:	4618      	mov	r0, r3
 8008a84:	f7f7 fd90 	bl	80005a8 <__aeabi_fdiv>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	4619      	mov	r1, r3
 8008a8c:	6978      	ldr	r0, [r7, #20]
 8008a8e:	f7f7 fcd7 	bl	8000440 <__aeabi_fmul>
 8008a92:	4603      	mov	r3, r0
 8008a94:	617b      	str	r3, [r7, #20]
 8008a96:	e00f      	b.n	8008ab8 <BLU_normalizeData+0x74>
  }
  else
  {
    l_normalizedData *= (float)p_maxValue / 128.0f;
 8008a98:	68b8      	ldr	r0, [r7, #8]
 8008a9a:	f7f7 fc79 	bl	8000390 <__aeabi_ui2f>
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	f7f7 fd7f 	bl	80005a8 <__aeabi_fdiv>
 8008aaa:	4603      	mov	r3, r0
 8008aac:	4619      	mov	r1, r3
 8008aae:	6978      	ldr	r0, [r7, #20]
 8008ab0:	f7f7 fcc6 	bl	8000440 <__aeabi_fmul>
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	617b      	str	r3, [r7, #20]
  }

  if (p_isInversionNeeded == true)
 8008ab8:	79fb      	ldrb	r3, [r7, #7]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d003      	beq.n	8008ac6 <BLU_normalizeData+0x82>
  {
    l_normalizedData *= -1.0f;
 8008abe:	697b      	ldr	r3, [r7, #20]
 8008ac0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8008ac4:	617b      	str	r3, [r7, #20]
  else
  {
    ; /* Nothing to do */
  }

  return (int32_t)l_normalizedData;
 8008ac6:	6978      	ldr	r0, [r7, #20]
 8008ac8:	f7f7 fe80 	bl	80007cc <__aeabi_f2iz>
 8008acc:	4603      	mov	r3, r0
}
 8008ace:	4618      	mov	r0, r3
 8008ad0:	3718      	adds	r7, #24
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd80      	pop	{r7, pc}
 8008ad6:	bf00      	nop
 8008ad8:	42fe0000 	.word	0x42fe0000

08008adc <BLU_init>:

void BLU_init(uint32_t p_maxDataValue)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b082      	sub	sp, #8
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
  LOG_info("Initializing bluetooth control");
 8008ae4:	490c      	ldr	r1, [pc, #48]	; (8008b18 <BLU_init+0x3c>)
 8008ae6:	2001      	movs	r0, #1
 8008ae8:	f001 f868 	bl	8009bbc <LOG_log>

  g_BLU_maxDataValue = p_maxDataValue;
 8008aec:	4a0b      	ldr	r2, [pc, #44]	; (8008b1c <BLU_init+0x40>)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	6013      	str	r3, [r2, #0]

  g_BLU_lastData.leftX  = BLU_DATA_DEFAUT_DIRECTION;
 8008af2:	4b0b      	ldr	r3, [pc, #44]	; (8008b20 <BLU_init+0x44>)
 8008af4:	2280      	movs	r2, #128	; 0x80
 8008af6:	601a      	str	r2, [r3, #0]
  g_BLU_lastData.leftY  = BLU_DATA_DEFAUT_DIRECTION;
 8008af8:	4b09      	ldr	r3, [pc, #36]	; (8008b20 <BLU_init+0x44>)
 8008afa:	2280      	movs	r2, #128	; 0x80
 8008afc:	605a      	str	r2, [r3, #4]
  g_BLU_lastData.rightX = BLU_DATA_DEFAUT_DIRECTION;
 8008afe:	4b08      	ldr	r3, [pc, #32]	; (8008b20 <BLU_init+0x44>)
 8008b00:	2280      	movs	r2, #128	; 0x80
 8008b02:	609a      	str	r2, [r3, #8]
  g_BLU_lastData.rightY = BLU_DATA_DEFAUT_DIRECTION;
 8008b04:	4b06      	ldr	r3, [pc, #24]	; (8008b20 <BLU_init+0x44>)
 8008b06:	2280      	movs	r2, #128	; 0x80
 8008b08:	60da      	str	r2, [r3, #12]
  g_BLU_lastData.button = BLU_BUTTON_NONE;
 8008b0a:	4b05      	ldr	r3, [pc, #20]	; (8008b20 <BLU_init+0x44>)
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	741a      	strb	r2, [r3, #16]

  return;
 8008b10:	bf00      	nop
}
 8008b12:	3708      	adds	r7, #8
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}
 8008b18:	0800bda8 	.word	0x0800bda8
 8008b1c:	200000b4 	.word	0x200000b4
 8008b20:	200000b8 	.word	0x200000b8

08008b24 <BLU_receiveData>:

void BLU_receiveData(T_BLU_Data *p_data)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b088      	sub	sp, #32
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
  T_BLU_BUTTON l_button;

  // LOG_info("Receiving Bluetooth data");

  /* Read raw data */
  BLU_readData(l_buffer);
 8008b2c:	f107 0308 	add.w	r3, r7, #8
 8008b30:	4618      	mov	r0, r3
 8008b32:	f7ff fee5 	bl	8008900 <BLU_readData>

  /* Start and decode raw data */
  l_leftX  = l_buffer[BLU_LEFT_X_OFFSET ];
 8008b36:	7b7b      	ldrb	r3, [r7, #13]
 8008b38:	61fb      	str	r3, [r7, #28]
  l_leftY  = l_buffer[BLU_LEFT_Y_OFFSET ];
 8008b3a:	7bbb      	ldrb	r3, [r7, #14]
 8008b3c:	61bb      	str	r3, [r7, #24]
  l_rightX = l_buffer[BLU_RIGHT_X_OFFSET];
 8008b3e:	7afb      	ldrb	r3, [r7, #11]
 8008b40:	617b      	str	r3, [r7, #20]
  l_rightY = l_buffer[BLU_RIGHT_Y_OFFSET];
 8008b42:	7b3b      	ldrb	r3, [r7, #12]
 8008b44:	613b      	str	r3, [r7, #16]
  l_button = BLU_getButton(l_buffer);
 8008b46:	f107 0308 	add.w	r3, r7, #8
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f7ff ff50 	bl	80089f0 <BLU_getButton>
 8008b50:	4603      	mov	r3, r0
 8008b52:	73fb      	strb	r3, [r7, #15]

  /* Deal with startup condition, while read data is not valid yet */
  if  ((l_leftX == 255 && l_leftY == 255 && l_rightX == 255 && l_rightY ==255)
 8008b54:	69fb      	ldr	r3, [r7, #28]
 8008b56:	2bff      	cmp	r3, #255	; 0xff
 8008b58:	d108      	bne.n	8008b6c <BLU_receiveData+0x48>
 8008b5a:	69bb      	ldr	r3, [r7, #24]
 8008b5c:	2bff      	cmp	r3, #255	; 0xff
 8008b5e:	d105      	bne.n	8008b6c <BLU_receiveData+0x48>
 8008b60:	697b      	ldr	r3, [r7, #20]
 8008b62:	2bff      	cmp	r3, #255	; 0xff
 8008b64:	d102      	bne.n	8008b6c <BLU_receiveData+0x48>
 8008b66:	693b      	ldr	r3, [r7, #16]
 8008b68:	2bff      	cmp	r3, #255	; 0xff
 8008b6a:	d00b      	beq.n	8008b84 <BLU_receiveData+0x60>
    || (l_leftX ==   0 && l_leftY ==   0 && l_rightX ==   0 && l_rightY ==  0))
 8008b6c:	69fb      	ldr	r3, [r7, #28]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d113      	bne.n	8008b9a <BLU_receiveData+0x76>
 8008b72:	69bb      	ldr	r3, [r7, #24]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d110      	bne.n	8008b9a <BLU_receiveData+0x76>
 8008b78:	697b      	ldr	r3, [r7, #20]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d10d      	bne.n	8008b9a <BLU_receiveData+0x76>
 8008b7e:	693b      	ldr	r3, [r7, #16]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d10a      	bne.n	8008b9a <BLU_receiveData+0x76>
  {
    l_leftX  = BLU_DATA_DEFAUT_DIRECTION;
 8008b84:	2380      	movs	r3, #128	; 0x80
 8008b86:	61fb      	str	r3, [r7, #28]
    l_leftY  = BLU_DATA_DEFAUT_DIRECTION;
 8008b88:	2380      	movs	r3, #128	; 0x80
 8008b8a:	61bb      	str	r3, [r7, #24]
    l_rightX = BLU_DATA_DEFAUT_DIRECTION;
 8008b8c:	2380      	movs	r3, #128	; 0x80
 8008b8e:	617b      	str	r3, [r7, #20]
    l_rightY = BLU_DATA_DEFAUT_DIRECTION;
 8008b90:	2380      	movs	r3, #128	; 0x80
 8008b92:	613b      	str	r3, [r7, #16]
    l_button = BLU_BUTTON_NONE;
 8008b94:	2300      	movs	r3, #0
 8008b96:	73fb      	strb	r3, [r7, #15]
 8008b98:	e043      	b.n	8008c22 <BLU_receiveData+0xfe>
  }
  /* Use a confirmation mechanism, on 2 cycles, as glitches are observed */
  else if ((l_leftX  == g_BLU_lastData.leftX) &&
 8008b9a:	4b2b      	ldr	r3, [pc, #172]	; (8008c48 <BLU_receiveData+0x124>)
 8008b9c:	681a      	ldr	r2, [r3, #0]
 8008b9e:	69fb      	ldr	r3, [r7, #28]
 8008ba0:	429a      	cmp	r2, r3
 8008ba2:	d13e      	bne.n	8008c22 <BLU_receiveData+0xfe>
           (l_leftY  == g_BLU_lastData.leftY) &&
 8008ba4:	4b28      	ldr	r3, [pc, #160]	; (8008c48 <BLU_receiveData+0x124>)
 8008ba6:	685a      	ldr	r2, [r3, #4]
 8008ba8:	69bb      	ldr	r3, [r7, #24]
  else if ((l_leftX  == g_BLU_lastData.leftX) &&
 8008baa:	429a      	cmp	r2, r3
 8008bac:	d139      	bne.n	8008c22 <BLU_receiveData+0xfe>
           (l_rightX == g_BLU_lastData.rightX) &&
 8008bae:	4b26      	ldr	r3, [pc, #152]	; (8008c48 <BLU_receiveData+0x124>)
 8008bb0:	689a      	ldr	r2, [r3, #8]
 8008bb2:	697b      	ldr	r3, [r7, #20]
           (l_leftY  == g_BLU_lastData.leftY) &&
 8008bb4:	429a      	cmp	r2, r3
 8008bb6:	d134      	bne.n	8008c22 <BLU_receiveData+0xfe>
           (l_rightY == g_BLU_lastData.rightY) &&
 8008bb8:	4b23      	ldr	r3, [pc, #140]	; (8008c48 <BLU_receiveData+0x124>)
 8008bba:	68da      	ldr	r2, [r3, #12]
 8008bbc:	693b      	ldr	r3, [r7, #16]
           (l_rightX == g_BLU_lastData.rightX) &&
 8008bbe:	429a      	cmp	r2, r3
 8008bc0:	d12f      	bne.n	8008c22 <BLU_receiveData+0xfe>
           (l_button == g_BLU_lastData.button))
 8008bc2:	4b21      	ldr	r3, [pc, #132]	; (8008c48 <BLU_receiveData+0x124>)
 8008bc4:	7c1b      	ldrb	r3, [r3, #16]
           (l_rightY == g_BLU_lastData.rightY) &&
 8008bc6:	7bfa      	ldrb	r2, [r7, #15]
 8008bc8:	429a      	cmp	r2, r3
 8008bca:	d12a      	bne.n	8008c22 <BLU_receiveData+0xfe>
  {
    /* Normalize directions data in range [-100..100] */
    p_data->leftX  = BLU_normalizeData(l_leftX , g_BLU_maxDataValue, false);
 8008bcc:	4b1f      	ldr	r3, [pc, #124]	; (8008c4c <BLU_receiveData+0x128>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	4619      	mov	r1, r3
 8008bd4:	69f8      	ldr	r0, [r7, #28]
 8008bd6:	f7ff ff35 	bl	8008a44 <BLU_normalizeData>
 8008bda:	4602      	mov	r2, r0
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	601a      	str	r2, [r3, #0]
    p_data->leftY  = BLU_normalizeData(l_leftY , g_BLU_maxDataValue, true );
 8008be0:	4b1a      	ldr	r3, [pc, #104]	; (8008c4c <BLU_receiveData+0x128>)
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	2201      	movs	r2, #1
 8008be6:	4619      	mov	r1, r3
 8008be8:	69b8      	ldr	r0, [r7, #24]
 8008bea:	f7ff ff2b 	bl	8008a44 <BLU_normalizeData>
 8008bee:	4602      	mov	r2, r0
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	605a      	str	r2, [r3, #4]
    p_data->rightX = BLU_normalizeData(l_rightX, g_BLU_maxDataValue, false);
 8008bf4:	4b15      	ldr	r3, [pc, #84]	; (8008c4c <BLU_receiveData+0x128>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	4619      	mov	r1, r3
 8008bfc:	6978      	ldr	r0, [r7, #20]
 8008bfe:	f7ff ff21 	bl	8008a44 <BLU_normalizeData>
 8008c02:	4602      	mov	r2, r0
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	609a      	str	r2, [r3, #8]
    p_data->rightY = BLU_normalizeData(l_rightY, g_BLU_maxDataValue, true );
 8008c08:	4b10      	ldr	r3, [pc, #64]	; (8008c4c <BLU_receiveData+0x128>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	2201      	movs	r2, #1
 8008c0e:	4619      	mov	r1, r3
 8008c10:	6938      	ldr	r0, [r7, #16]
 8008c12:	f7ff ff17 	bl	8008a44 <BLU_normalizeData>
 8008c16:	4602      	mov	r2, r0
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	60da      	str	r2, [r3, #12]
    p_data->button = l_button;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	7bfa      	ldrb	r2, [r7, #15]
 8008c20:	741a      	strb	r2, [r3, #16]
  {
    ; /* Nothing to do */
  }

  /* Saved received data for later use in confirmation mechanism */
  g_BLU_lastData.leftX  = l_leftX;
 8008c22:	69fb      	ldr	r3, [r7, #28]
 8008c24:	4a08      	ldr	r2, [pc, #32]	; (8008c48 <BLU_receiveData+0x124>)
 8008c26:	6013      	str	r3, [r2, #0]
  g_BLU_lastData.leftY  = l_leftY;
 8008c28:	69bb      	ldr	r3, [r7, #24]
 8008c2a:	4a07      	ldr	r2, [pc, #28]	; (8008c48 <BLU_receiveData+0x124>)
 8008c2c:	6053      	str	r3, [r2, #4]
  g_BLU_lastData.rightX = l_rightX;
 8008c2e:	697b      	ldr	r3, [r7, #20]
 8008c30:	4a05      	ldr	r2, [pc, #20]	; (8008c48 <BLU_receiveData+0x124>)
 8008c32:	6093      	str	r3, [r2, #8]
  g_BLU_lastData.rightY = l_rightY;
 8008c34:	693b      	ldr	r3, [r7, #16]
 8008c36:	4a04      	ldr	r2, [pc, #16]	; (8008c48 <BLU_receiveData+0x124>)
 8008c38:	60d3      	str	r3, [r2, #12]
  g_BLU_lastData.button = l_button;
 8008c3a:	4a03      	ldr	r2, [pc, #12]	; (8008c48 <BLU_receiveData+0x124>)
 8008c3c:	7bfb      	ldrb	r3, [r7, #15]
 8008c3e:	7413      	strb	r3, [r2, #16]

  return;
 8008c40:	bf00      	nop
}
 8008c42:	3720      	adds	r7, #32
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}
 8008c48:	200000b8 	.word	0x200000b8
 8008c4c:	200000b4 	.word	0x200000b4

08008c50 <CON_init>:
static T_SFO_data          g_CON_data;
static uint32_t            g_CON_dataSize;
static bool                g_CON_isDataComplete;

void CON_init(UART_HandleTypeDef *p_uartHandle)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b082      	sub	sp, #8
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
  LOG_info("Initializing console");
 8008c58:	490d      	ldr	r1, [pc, #52]	; (8008c90 <CON_init+0x40>)
 8008c5a:	2001      	movs	r0, #1
 8008c5c:	f000 ffae 	bl	8009bbc <LOG_log>

  g_CON_uartHandle     = p_uartHandle;
 8008c60:	4a0c      	ldr	r2, [pc, #48]	; (8008c94 <CON_init+0x44>)
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	6013      	str	r3, [r2, #0]
  g_CON_dataSize       = 0;
 8008c66:	4b0c      	ldr	r3, [pc, #48]	; (8008c98 <CON_init+0x48>)
 8008c68:	2200      	movs	r2, #0
 8008c6a:	601a      	str	r2, [r3, #0]
  g_CON_isDataComplete = false;
 8008c6c:	4b0b      	ldr	r3, [pc, #44]	; (8008c9c <CON_init+0x4c>)
 8008c6e:	2200      	movs	r2, #0
 8008c70:	701a      	strb	r2, [r3, #0]

  SFO_dataInit(&g_CON_data);
 8008c72:	480b      	ldr	r0, [pc, #44]	; (8008ca0 <CON_init+0x50>)
 8008c74:	f001 fa48 	bl	800a108 <SFO_dataInit>

  HAL_UART_Receive_IT(g_CON_uartHandle, &g_CON_datum, 1);
 8008c78:	4b06      	ldr	r3, [pc, #24]	; (8008c94 <CON_init+0x44>)
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	2201      	movs	r2, #1
 8008c7e:	4909      	ldr	r1, [pc, #36]	; (8008ca4 <CON_init+0x54>)
 8008c80:	4618      	mov	r0, r3
 8008c82:	f7fe fff5 	bl	8007c70 <HAL_UART_Receive_IT>

  return;
 8008c86:	bf00      	nop
}
 8008c88:	3708      	adds	r7, #8
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}
 8008c8e:	bf00      	nop
 8008c90:	0800bdc8 	.word	0x0800bdc8
 8008c94:	200000cc 	.word	0x200000cc
 8008c98:	200000e4 	.word	0x200000e4
 8008c9c:	200000e8 	.word	0x200000e8
 8008ca0:	200000d4 	.word	0x200000d4
 8008ca4:	200000d0 	.word	0x200000d0

08008ca8 <CON_receiveData>:

void CON_receiveData(void)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	af00      	add	r7, sp, #0
  /* If previous command was not processed yet, drop datum, */
  /* which will lead to an error, showing a design issue... */
  if (g_CON_isDataComplete == true)
 8008cac:	4b0f      	ldr	r3, [pc, #60]	; (8008cec <CON_receiveData+0x44>)
 8008cae:	781b      	ldrb	r3, [r3, #0]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d112      	bne.n	8008cda <CON_receiveData+0x32>
  {
    ; /* Nothing to do */
  }
  else
  {
    if (g_CON_datum == '\r')
 8008cb4:	4b0e      	ldr	r3, [pc, #56]	; (8008cf0 <CON_receiveData+0x48>)
 8008cb6:	781b      	ldrb	r3, [r3, #0]
 8008cb8:	2b0d      	cmp	r3, #13
 8008cba:	d103      	bne.n	8008cc4 <CON_receiveData+0x1c>
    {
      g_CON_isDataComplete = true;
 8008cbc:	4b0b      	ldr	r3, [pc, #44]	; (8008cec <CON_receiveData+0x44>)
 8008cbe:	2201      	movs	r2, #1
 8008cc0:	701a      	strb	r2, [r3, #0]
 8008cc2:	e00a      	b.n	8008cda <CON_receiveData+0x32>
    }
    else
    {
      g_CON_data[g_CON_dataSize] = g_CON_datum;
 8008cc4:	4b0b      	ldr	r3, [pc, #44]	; (8008cf4 <CON_receiveData+0x4c>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	4a09      	ldr	r2, [pc, #36]	; (8008cf0 <CON_receiveData+0x48>)
 8008cca:	7811      	ldrb	r1, [r2, #0]
 8008ccc:	4a0a      	ldr	r2, [pc, #40]	; (8008cf8 <CON_receiveData+0x50>)
 8008cce:	54d1      	strb	r1, [r2, r3]
      g_CON_dataSize++;
 8008cd0:	4b08      	ldr	r3, [pc, #32]	; (8008cf4 <CON_receiveData+0x4c>)
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	3301      	adds	r3, #1
 8008cd6:	4a07      	ldr	r2, [pc, #28]	; (8008cf4 <CON_receiveData+0x4c>)
 8008cd8:	6013      	str	r3, [r2, #0]
    }
  }

  HAL_UART_Receive_IT(g_CON_uartHandle, &g_CON_datum, 1);
 8008cda:	4b08      	ldr	r3, [pc, #32]	; (8008cfc <CON_receiveData+0x54>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	2201      	movs	r2, #1
 8008ce0:	4903      	ldr	r1, [pc, #12]	; (8008cf0 <CON_receiveData+0x48>)
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	f7fe ffc4 	bl	8007c70 <HAL_UART_Receive_IT>

  return;
 8008ce8:	bf00      	nop
}
 8008cea:	bd80      	pop	{r7, pc}
 8008cec:	200000e8 	.word	0x200000e8
 8008cf0:	200000d0 	.word	0x200000d0
 8008cf4:	200000e4 	.word	0x200000e4
 8008cf8:	200000d4 	.word	0x200000d4
 8008cfc:	200000cc 	.word	0x200000cc

08008d00 <CON_updateFifo>:

void CON_updateFifo(T_SFO_Context *p_fifo)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b082      	sub	sp, #8
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
  if (g_CON_isDataComplete == false)
 8008d08:	4b0c      	ldr	r3, [pc, #48]	; (8008d3c <CON_updateFifo+0x3c>)
 8008d0a:	781b      	ldrb	r3, [r3, #0]
 8008d0c:	f083 0301 	eor.w	r3, r3, #1
 8008d10:	b2db      	uxtb	r3, r3
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d10d      	bne.n	8008d32 <CON_updateFifo+0x32>
  {
    ; /* Nothing to do */
  }
  else
  {
    SFO_push    (p_fifo, &g_CON_data);
 8008d16:	490a      	ldr	r1, [pc, #40]	; (8008d40 <CON_updateFifo+0x40>)
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	f001 fa1b 	bl	800a154 <SFO_push>
    SFO_dataInit(&g_CON_data);
 8008d1e:	4808      	ldr	r0, [pc, #32]	; (8008d40 <CON_updateFifo+0x40>)
 8008d20:	f001 f9f2 	bl	800a108 <SFO_dataInit>

    g_CON_dataSize       = 0;
 8008d24:	4b07      	ldr	r3, [pc, #28]	; (8008d44 <CON_updateFifo+0x44>)
 8008d26:	2200      	movs	r2, #0
 8008d28:	601a      	str	r2, [r3, #0]
    g_CON_isDataComplete = false;
 8008d2a:	4b04      	ldr	r3, [pc, #16]	; (8008d3c <CON_updateFifo+0x3c>)
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	701a      	strb	r2, [r3, #0]
  }

  return;
 8008d30:	bf00      	nop
 8008d32:	bf00      	nop
}
 8008d34:	3708      	adds	r7, #8
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}
 8008d3a:	bf00      	nop
 8008d3c:	200000e8 	.word	0x200000e8
 8008d40:	200000d4 	.word	0x200000d4
 8008d44:	200000e4 	.word	0x200000e4

08008d48 <DRV_init>:
void DRV_init(TIM_HandleTypeDef *p_pwmTimerHandle,
              TIM_HandleTypeDef *p_rearLeftEncoderTimerHandle,
              TIM_HandleTypeDef *p_rearRightEncoderTimerHandle,
              TIM_HandleTypeDef *p_frontRightEncoderTimerHandle,
              TIM_HandleTypeDef *p_frontLeftEncoderTimerHandle)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b088      	sub	sp, #32
 8008d4c:	af04      	add	r7, sp, #16
 8008d4e:	60f8      	str	r0, [r7, #12]
 8008d50:	60b9      	str	r1, [r7, #8]
 8008d52:	607a      	str	r2, [r7, #4]
 8008d54:	603b      	str	r3, [r7, #0]
  LOG_info("Initializing Drive module");
 8008d56:	494f      	ldr	r1, [pc, #316]	; (8008e94 <DRV_init+0x14c>)
 8008d58:	2001      	movs	r0, #1
 8008d5a:	f000 ff2f 	bl	8009bbc <LOG_log>

  /* Setup PIDs */
  PID_init(&g_DRV_pidFrontRight, 1, 1, 1, 0, -100, 100, 0.5);
 8008d5e:	2300      	movs	r3, #0
 8008d60:	9303      	str	r3, [sp, #12]
 8008d62:	2364      	movs	r3, #100	; 0x64
 8008d64:	9302      	str	r3, [sp, #8]
 8008d66:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8008d6a:	9301      	str	r3, [sp, #4]
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	9300      	str	r3, [sp, #0]
 8008d70:	2301      	movs	r3, #1
 8008d72:	2201      	movs	r2, #1
 8008d74:	2101      	movs	r1, #1
 8008d76:	4848      	ldr	r0, [pc, #288]	; (8008e98 <DRV_init+0x150>)
 8008d78:	f001 f8d6 	bl	8009f28 <PID_init>
  PID_init(&g_DRV_pidFrontLeft , 1, 1, 1, 0, -100, 100, 0.5);
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	9303      	str	r3, [sp, #12]
 8008d80:	2364      	movs	r3, #100	; 0x64
 8008d82:	9302      	str	r3, [sp, #8]
 8008d84:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8008d88:	9301      	str	r3, [sp, #4]
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	9300      	str	r3, [sp, #0]
 8008d8e:	2301      	movs	r3, #1
 8008d90:	2201      	movs	r2, #1
 8008d92:	2101      	movs	r1, #1
 8008d94:	4841      	ldr	r0, [pc, #260]	; (8008e9c <DRV_init+0x154>)
 8008d96:	f001 f8c7 	bl	8009f28 <PID_init>
  PID_init(&g_DRV_pidRearLeft  , 1, 1, 1, 0, -100, 100, 0.5);
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	9303      	str	r3, [sp, #12]
 8008d9e:	2364      	movs	r3, #100	; 0x64
 8008da0:	9302      	str	r3, [sp, #8]
 8008da2:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8008da6:	9301      	str	r3, [sp, #4]
 8008da8:	2300      	movs	r3, #0
 8008daa:	9300      	str	r3, [sp, #0]
 8008dac:	2301      	movs	r3, #1
 8008dae:	2201      	movs	r2, #1
 8008db0:	2101      	movs	r1, #1
 8008db2:	483b      	ldr	r0, [pc, #236]	; (8008ea0 <DRV_init+0x158>)
 8008db4:	f001 f8b8 	bl	8009f28 <PID_init>
  PID_init(&g_DRV_pidRearRight , 1, 1, 1, 0, -100, 100, 0.5);
 8008db8:	2300      	movs	r3, #0
 8008dba:	9303      	str	r3, [sp, #12]
 8008dbc:	2364      	movs	r3, #100	; 0x64
 8008dbe:	9302      	str	r3, [sp, #8]
 8008dc0:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8008dc4:	9301      	str	r3, [sp, #4]
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	9300      	str	r3, [sp, #0]
 8008dca:	2301      	movs	r3, #1
 8008dcc:	2201      	movs	r2, #1
 8008dce:	2101      	movs	r1, #1
 8008dd0:	4834      	ldr	r0, [pc, #208]	; (8008ea4 <DRV_init+0x15c>)
 8008dd2:	f001 f8a9 	bl	8009f28 <PID_init>

  /* Setup motors (with a 0 speed & stopped direction, at this point) */
  MTR_init(&g_DRV_motorFrontRight,
 8008dd6:	2304      	movs	r3, #4
 8008dd8:	9303      	str	r3, [sp, #12]
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	9302      	str	r3, [sp, #8]
 8008dde:	2320      	movs	r3, #32
 8008de0:	9301      	str	r3, [sp, #4]
 8008de2:	4b31      	ldr	r3, [pc, #196]	; (8008ea8 <DRV_init+0x160>)
 8008de4:	9300      	str	r3, [sp, #0]
 8008de6:	2310      	movs	r3, #16
 8008de8:	4a2f      	ldr	r2, [pc, #188]	; (8008ea8 <DRV_init+0x160>)
 8008dea:	4930      	ldr	r1, [pc, #192]	; (8008eac <DRV_init+0x164>)
 8008dec:	4830      	ldr	r0, [pc, #192]	; (8008eb0 <DRV_init+0x168>)
 8008dee:	f000 ffc1 	bl	8009d74 <MTR_init>
           MOTOR_FRONT_RIGHT_IN_2_GPIO_Port,
           MOTOR_FRONT_RIGHT_IN_2_Pin,
           p_pwmTimerHandle,
           TIM_CHANNEL_2);

  MTR_init(&g_DRV_motorFrontLeft,
 8008df2:	2300      	movs	r3, #0
 8008df4:	9303      	str	r3, [sp, #12]
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	9302      	str	r3, [sp, #8]
 8008dfa:	2302      	movs	r3, #2
 8008dfc:	9301      	str	r3, [sp, #4]
 8008dfe:	4b2d      	ldr	r3, [pc, #180]	; (8008eb4 <DRV_init+0x16c>)
 8008e00:	9300      	str	r3, [sp, #0]
 8008e02:	2301      	movs	r3, #1
 8008e04:	4a2b      	ldr	r2, [pc, #172]	; (8008eb4 <DRV_init+0x16c>)
 8008e06:	492c      	ldr	r1, [pc, #176]	; (8008eb8 <DRV_init+0x170>)
 8008e08:	482c      	ldr	r0, [pc, #176]	; (8008ebc <DRV_init+0x174>)
 8008e0a:	f000 ffb3 	bl	8009d74 <MTR_init>
           MOTOR_FRONT_LEFT_IN_2_GPIO_Port,
           MOTOR_FRONT_LEFT_IN_2_Pin,
           p_pwmTimerHandle,
           TIM_CHANNEL_1);

  MTR_init(&g_DRV_motorRearLeft,
 8008e0e:	230c      	movs	r3, #12
 8008e10:	9303      	str	r3, [sp, #12]
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	9302      	str	r3, [sp, #8]
 8008e16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e1a:	9301      	str	r3, [sp, #4]
 8008e1c:	4b22      	ldr	r3, [pc, #136]	; (8008ea8 <DRV_init+0x160>)
 8008e1e:	9300      	str	r3, [sp, #0]
 8008e20:	2304      	movs	r3, #4
 8008e22:	4a27      	ldr	r2, [pc, #156]	; (8008ec0 <DRV_init+0x178>)
 8008e24:	4927      	ldr	r1, [pc, #156]	; (8008ec4 <DRV_init+0x17c>)
 8008e26:	4828      	ldr	r0, [pc, #160]	; (8008ec8 <DRV_init+0x180>)
 8008e28:	f000 ffa4 	bl	8009d74 <MTR_init>
           MOTOR_REAR_LEFT_IN_2_GPIO_Port,
           MOTOR_REAR_LEFT_IN_2_Pin,
           p_pwmTimerHandle,
           TIM_CHANNEL_4);

  MTR_init(&g_DRV_motorRearRight,
 8008e2c:	2308      	movs	r3, #8
 8008e2e:	9303      	str	r3, [sp, #12]
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	9302      	str	r3, [sp, #8]
 8008e34:	2310      	movs	r3, #16
 8008e36:	9301      	str	r3, [sp, #4]
 8008e38:	4b1e      	ldr	r3, [pc, #120]	; (8008eb4 <DRV_init+0x16c>)
 8008e3a:	9300      	str	r3, [sp, #0]
 8008e3c:	2320      	movs	r3, #32
 8008e3e:	4a1d      	ldr	r2, [pc, #116]	; (8008eb4 <DRV_init+0x16c>)
 8008e40:	4922      	ldr	r1, [pc, #136]	; (8008ecc <DRV_init+0x184>)
 8008e42:	4823      	ldr	r0, [pc, #140]	; (8008ed0 <DRV_init+0x188>)
 8008e44:	f000 ff96 	bl	8009d74 <MTR_init>
           MOTOR_REAR_RIGHT_IN_2_Pin,
           p_pwmTimerHandle,
           TIM_CHANNEL_3);

  /* Setup encoders */
  ENC_init(&g_DRV_encoderFrontRight, DRV_FRONT_RIGHT_MOTOR_NAME, true , p_frontRightEncoderTimerHandle);
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	2201      	movs	r2, #1
 8008e4c:	4917      	ldr	r1, [pc, #92]	; (8008eac <DRV_init+0x164>)
 8008e4e:	4821      	ldr	r0, [pc, #132]	; (8008ed4 <DRV_init+0x18c>)
 8008e50:	f000 fd3e 	bl	80098d0 <ENC_init>
  ENC_init(&g_DRV_encoderFrontLeft , DRV_FRONT_LEFT_MOTOR_NAME , false, p_frontLeftEncoderTimerHandle );
 8008e54:	69bb      	ldr	r3, [r7, #24]
 8008e56:	2200      	movs	r2, #0
 8008e58:	4917      	ldr	r1, [pc, #92]	; (8008eb8 <DRV_init+0x170>)
 8008e5a:	481f      	ldr	r0, [pc, #124]	; (8008ed8 <DRV_init+0x190>)
 8008e5c:	f000 fd38 	bl	80098d0 <ENC_init>
  ENC_init(&g_DRV_encoderRearLeft  , DRV_REAR_LEFT_MOTOR_NAME  , false, p_rearLeftEncoderTimerHandle  );
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	2200      	movs	r2, #0
 8008e64:	4917      	ldr	r1, [pc, #92]	; (8008ec4 <DRV_init+0x17c>)
 8008e66:	481d      	ldr	r0, [pc, #116]	; (8008edc <DRV_init+0x194>)
 8008e68:	f000 fd32 	bl	80098d0 <ENC_init>
  ENC_init(&g_DRV_encoderRearRight , DRV_REAR_RIGHT_MOTOR_NAME , true , p_rearRightEncoderTimerHandle );
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2201      	movs	r2, #1
 8008e70:	4916      	ldr	r1, [pc, #88]	; (8008ecc <DRV_init+0x184>)
 8008e72:	481b      	ldr	r0, [pc, #108]	; (8008ee0 <DRV_init+0x198>)
 8008e74:	f000 fd2c 	bl	80098d0 <ENC_init>

  /* Activate motors by default (de-activating them is used for debug  */
  g_DRV_areMotorsOn = true;
 8008e78:	4b1a      	ldr	r3, [pc, #104]	; (8008ee4 <DRV_init+0x19c>)
 8008e7a:	2201      	movs	r2, #1
 8008e7c:	701a      	strb	r2, [r3, #0]

  /* Considered that drive is inactive when the code starts */
  g_DRV_isActive = false;
 8008e7e:	4b1a      	ldr	r3, [pc, #104]	; (8008ee8 <DRV_init+0x1a0>)
 8008e80:	2200      	movs	r2, #0
 8008e82:	701a      	strb	r2, [r3, #0]

  /* Start with master board control mode. BLink green LED accordingly */
  g_DRV_mode = DRV_MODE_MASTER_BOARD_CONTROL;
 8008e84:	4b19      	ldr	r3, [pc, #100]	; (8008eec <DRV_init+0x1a4>)
 8008e86:	2202      	movs	r2, #2
 8008e88:	701a      	strb	r2, [r3, #0]

  return;
 8008e8a:	bf00      	nop
}
 8008e8c:	3710      	adds	r7, #16
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bd80      	pop	{r7, pc}
 8008e92:	bf00      	nop
 8008e94:	0800bde0 	.word	0x0800bde0
 8008e98:	200000ec 	.word	0x200000ec
 8008e9c:	2000011c 	.word	0x2000011c
 8008ea0:	2000014c 	.word	0x2000014c
 8008ea4:	2000017c 	.word	0x2000017c
 8008ea8:	40011000 	.word	0x40011000
 8008eac:	0800bdfc 	.word	0x0800bdfc
 8008eb0:	200001ac 	.word	0x200001ac
 8008eb4:	40010c00 	.word	0x40010c00
 8008eb8:	0800be08 	.word	0x0800be08
 8008ebc:	200001d0 	.word	0x200001d0
 8008ec0:	40011400 	.word	0x40011400
 8008ec4:	0800be14 	.word	0x0800be14
 8008ec8:	200001f4 	.word	0x200001f4
 8008ecc:	0800be20 	.word	0x0800be20
 8008ed0:	20000218 	.word	0x20000218
 8008ed4:	2000023c 	.word	0x2000023c
 8008ed8:	20000248 	.word	0x20000248
 8008edc:	20000254 	.word	0x20000254
 8008ee0:	20000260 	.word	0x20000260
 8008ee4:	200000e9 	.word	0x200000e9
 8008ee8:	200000ea 	.word	0x200000ea
 8008eec:	200000eb 	.word	0x200000eb

08008ef0 <DRV_updateEncoder>:

void DRV_updateEncoder(TIM_HandleTypeDef *p_encoderTimerHandle)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b084      	sub	sp, #16
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
  int16_t l_count;

  l_count = __HAL_TIM_GET_COUNTER(p_encoderTimerHandle);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008efe:	81fb      	strh	r3, [r7, #14]

  /* Check the handle of the triggering timer and update encoder accordingly */
  if (p_encoderTimerHandle == g_DRV_encoderRearLeft.timerHandle)
 8008f00:	4b19      	ldr	r3, [pc, #100]	; (8008f68 <DRV_updateEncoder+0x78>)
 8008f02:	689b      	ldr	r3, [r3, #8]
 8008f04:	687a      	ldr	r2, [r7, #4]
 8008f06:	429a      	cmp	r2, r3
 8008f08:	d106      	bne.n	8008f18 <DRV_updateEncoder+0x28>
  {
    ENC_update(&g_DRV_encoderRearLeft, l_count);
 8008f0a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008f0e:	4619      	mov	r1, r3
 8008f10:	4815      	ldr	r0, [pc, #84]	; (8008f68 <DRV_updateEncoder+0x78>)
 8008f12:	f000 fd09 	bl	8009928 <ENC_update>
  else
  {
    ; /* Nothing to do */
  }

  return;
 8008f16:	e023      	b.n	8008f60 <DRV_updateEncoder+0x70>
  else if (p_encoderTimerHandle == g_DRV_encoderRearRight.timerHandle)
 8008f18:	4b14      	ldr	r3, [pc, #80]	; (8008f6c <DRV_updateEncoder+0x7c>)
 8008f1a:	689b      	ldr	r3, [r3, #8]
 8008f1c:	687a      	ldr	r2, [r7, #4]
 8008f1e:	429a      	cmp	r2, r3
 8008f20:	d106      	bne.n	8008f30 <DRV_updateEncoder+0x40>
    ENC_update(&g_DRV_encoderRearRight, l_count);
 8008f22:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008f26:	4619      	mov	r1, r3
 8008f28:	4810      	ldr	r0, [pc, #64]	; (8008f6c <DRV_updateEncoder+0x7c>)
 8008f2a:	f000 fcfd 	bl	8009928 <ENC_update>
  return;
 8008f2e:	e017      	b.n	8008f60 <DRV_updateEncoder+0x70>
  else if (p_encoderTimerHandle == g_DRV_encoderFrontRight.timerHandle)
 8008f30:	4b0f      	ldr	r3, [pc, #60]	; (8008f70 <DRV_updateEncoder+0x80>)
 8008f32:	689b      	ldr	r3, [r3, #8]
 8008f34:	687a      	ldr	r2, [r7, #4]
 8008f36:	429a      	cmp	r2, r3
 8008f38:	d106      	bne.n	8008f48 <DRV_updateEncoder+0x58>
    ENC_update(&g_DRV_encoderFrontRight, l_count);
 8008f3a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008f3e:	4619      	mov	r1, r3
 8008f40:	480b      	ldr	r0, [pc, #44]	; (8008f70 <DRV_updateEncoder+0x80>)
 8008f42:	f000 fcf1 	bl	8009928 <ENC_update>
  return;
 8008f46:	e00b      	b.n	8008f60 <DRV_updateEncoder+0x70>
  else if (p_encoderTimerHandle == g_DRV_encoderFrontLeft.timerHandle)
 8008f48:	4b0a      	ldr	r3, [pc, #40]	; (8008f74 <DRV_updateEncoder+0x84>)
 8008f4a:	689b      	ldr	r3, [r3, #8]
 8008f4c:	687a      	ldr	r2, [r7, #4]
 8008f4e:	429a      	cmp	r2, r3
 8008f50:	d106      	bne.n	8008f60 <DRV_updateEncoder+0x70>
    ENC_update(&g_DRV_encoderFrontLeft, l_count);
 8008f52:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008f56:	4619      	mov	r1, r3
 8008f58:	4806      	ldr	r0, [pc, #24]	; (8008f74 <DRV_updateEncoder+0x84>)
 8008f5a:	f000 fce5 	bl	8009928 <ENC_update>
  return;
 8008f5e:	bf00      	nop
 8008f60:	bf00      	nop
}
 8008f62:	3710      	adds	r7, #16
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bd80      	pop	{r7, pc}
 8008f68:	20000254 	.word	0x20000254
 8008f6c:	20000260 	.word	0x20000260
 8008f70:	2000023c 	.word	0x2000023c
 8008f74:	20000248 	.word	0x20000248

08008f78 <DRV_updateFromBluetooth>:

void DRV_updateFromBluetooth(T_BLU_Data *p_bluetoothData)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b084      	sub	sp, #16
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
  uint32_t l_speed;

  /* Check possible requested mode change */
  switch (p_bluetoothData->button)
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	7c1b      	ldrb	r3, [r3, #16]
 8008f84:	3b01      	subs	r3, #1
 8008f86:	2b0f      	cmp	r3, #15
 8008f88:	d861      	bhi.n	800904e <DRV_updateFromBluetooth+0xd6>
 8008f8a:	a201      	add	r2, pc, #4	; (adr r2, 8008f90 <DRV_updateFromBluetooth+0x18>)
 8008f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f90:	08009019 	.word	0x08009019
 8008f94:	0800904f 	.word	0x0800904f
 8008f98:	0800904f 	.word	0x0800904f
 8008f9c:	08009031 	.word	0x08009031
 8008fa0:	0800904f 	.word	0x0800904f
 8008fa4:	0800904f 	.word	0x0800904f
 8008fa8:	0800904f 	.word	0x0800904f
 8008fac:	0800904f 	.word	0x0800904f
 8008fb0:	0800904f 	.word	0x0800904f
 8008fb4:	0800904f 	.word	0x0800904f
 8008fb8:	0800904f 	.word	0x0800904f
 8008fbc:	0800904f 	.word	0x0800904f
 8008fc0:	0800904f 	.word	0x0800904f
 8008fc4:	08009001 	.word	0x08009001
 8008fc8:	08008fe9 	.word	0x08008fe9
 8008fcc:	08008fd1 	.word	0x08008fd1
  {
    case BLU_BUTTON_PINK_SQUARE:
      if (g_DRV_mode != DRV_MODE_MANUAL_FIXED_SPEED)
 8008fd0:	4b82      	ldr	r3, [pc, #520]	; (80091dc <DRV_updateFromBluetooth+0x264>)
 8008fd2:	781b      	ldrb	r3, [r3, #0]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d03c      	beq.n	8009052 <DRV_updateFromBluetooth+0xda>
      {
        LOG_info("Drive mode now DRV_MODE_MANUAL_FIXED_SPEED");
 8008fd8:	4981      	ldr	r1, [pc, #516]	; (80091e0 <DRV_updateFromBluetooth+0x268>)
 8008fda:	2001      	movs	r0, #1
 8008fdc:	f000 fdee 	bl	8009bbc <LOG_log>
        g_DRV_mode = DRV_MODE_MANUAL_FIXED_SPEED;
 8008fe0:	4b7e      	ldr	r3, [pc, #504]	; (80091dc <DRV_updateFromBluetooth+0x264>)
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	701a      	strb	r2, [r3, #0]
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 8008fe6:	e034      	b.n	8009052 <DRV_updateFromBluetooth+0xda>

    case BLU_BUTTON_BLUE_CROSS:
      if (g_DRV_mode != DRV_MODE_MANUAL_VARIABLE_SPEED)
 8008fe8:	4b7c      	ldr	r3, [pc, #496]	; (80091dc <DRV_updateFromBluetooth+0x264>)
 8008fea:	781b      	ldrb	r3, [r3, #0]
 8008fec:	2b01      	cmp	r3, #1
 8008fee:	d032      	beq.n	8009056 <DRV_updateFromBluetooth+0xde>
      {
        LOG_info("Drive mode now DRV_MODE_MANUAL_VARIABLE_SPEED");
 8008ff0:	497c      	ldr	r1, [pc, #496]	; (80091e4 <DRV_updateFromBluetooth+0x26c>)
 8008ff2:	2001      	movs	r0, #1
 8008ff4:	f000 fde2 	bl	8009bbc <LOG_log>
        g_DRV_mode = DRV_MODE_MANUAL_VARIABLE_SPEED;
 8008ff8:	4b78      	ldr	r3, [pc, #480]	; (80091dc <DRV_updateFromBluetooth+0x264>)
 8008ffa:	2201      	movs	r2, #1
 8008ffc:	701a      	strb	r2, [r3, #0]
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 8008ffe:	e02a      	b.n	8009056 <DRV_updateFromBluetooth+0xde>

    case BLU_BUTTON_RED_CIRCLE:
      if (g_DRV_mode != DRV_MODE_MASTER_BOARD_CONTROL)
 8009000:	4b76      	ldr	r3, [pc, #472]	; (80091dc <DRV_updateFromBluetooth+0x264>)
 8009002:	781b      	ldrb	r3, [r3, #0]
 8009004:	2b02      	cmp	r3, #2
 8009006:	d028      	beq.n	800905a <DRV_updateFromBluetooth+0xe2>
      {
        LOG_info("Drive mode now DRV_MODE_MASTER_BOARD_CONTROL");
 8009008:	4977      	ldr	r1, [pc, #476]	; (80091e8 <DRV_updateFromBluetooth+0x270>)
 800900a:	2001      	movs	r0, #1
 800900c:	f000 fdd6 	bl	8009bbc <LOG_log>
        g_DRV_mode = DRV_MODE_MASTER_BOARD_CONTROL;
 8009010:	4b72      	ldr	r3, [pc, #456]	; (80091dc <DRV_updateFromBluetooth+0x264>)
 8009012:	2202      	movs	r2, #2
 8009014:	701a      	strb	r2, [r3, #0]
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 8009016:	e020      	b.n	800905a <DRV_updateFromBluetooth+0xe2>

    case BLU_BUTTON_SELECT:
      if (g_DRV_areMotorsOn == true)
 8009018:	4b74      	ldr	r3, [pc, #464]	; (80091ec <DRV_updateFromBluetooth+0x274>)
 800901a:	781b      	ldrb	r3, [r3, #0]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d01e      	beq.n	800905e <DRV_updateFromBluetooth+0xe6>
      {
        LOG_info("Drive turning motor OFF");
 8009020:	4973      	ldr	r1, [pc, #460]	; (80091f0 <DRV_updateFromBluetooth+0x278>)
 8009022:	2001      	movs	r0, #1
 8009024:	f000 fdca 	bl	8009bbc <LOG_log>
        g_DRV_areMotorsOn = false;
 8009028:	4b70      	ldr	r3, [pc, #448]	; (80091ec <DRV_updateFromBluetooth+0x274>)
 800902a:	2200      	movs	r2, #0
 800902c:	701a      	strb	r2, [r3, #0]
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 800902e:	e016      	b.n	800905e <DRV_updateFromBluetooth+0xe6>

    case BLU_BUTTON_START:
      if (g_DRV_areMotorsOn == false)
 8009030:	4b6e      	ldr	r3, [pc, #440]	; (80091ec <DRV_updateFromBluetooth+0x274>)
 8009032:	781b      	ldrb	r3, [r3, #0]
 8009034:	f083 0301 	eor.w	r3, r3, #1
 8009038:	b2db      	uxtb	r3, r3
 800903a:	2b00      	cmp	r3, #0
 800903c:	d011      	beq.n	8009062 <DRV_updateFromBluetooth+0xea>
      {
        LOG_info("Drive turning motors ON");
 800903e:	496d      	ldr	r1, [pc, #436]	; (80091f4 <DRV_updateFromBluetooth+0x27c>)
 8009040:	2001      	movs	r0, #1
 8009042:	f000 fdbb 	bl	8009bbc <LOG_log>
        g_DRV_areMotorsOn = true;
 8009046:	4b69      	ldr	r3, [pc, #420]	; (80091ec <DRV_updateFromBluetooth+0x274>)
 8009048:	2201      	movs	r2, #1
 800904a:	701a      	strb	r2, [r3, #0]
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 800904c:	e009      	b.n	8009062 <DRV_updateFromBluetooth+0xea>

    default:
      ; /* Nothing to do */
      break;
 800904e:	bf00      	nop
 8009050:	e008      	b.n	8009064 <DRV_updateFromBluetooth+0xec>
      break;
 8009052:	bf00      	nop
 8009054:	e006      	b.n	8009064 <DRV_updateFromBluetooth+0xec>
      break;
 8009056:	bf00      	nop
 8009058:	e004      	b.n	8009064 <DRV_updateFromBluetooth+0xec>
      break;
 800905a:	bf00      	nop
 800905c:	e002      	b.n	8009064 <DRV_updateFromBluetooth+0xec>
      break;
 800905e:	bf00      	nop
 8009060:	e000      	b.n	8009064 <DRV_updateFromBluetooth+0xec>
      break;
 8009062:	bf00      	nop
  }

  /* Master board control mode is an automated mode, so that we will */
  /* ignore any direction/button press received via bluetooth.       */
  if (g_DRV_mode == DRV_MODE_MASTER_BOARD_CONTROL)
 8009064:	4b5d      	ldr	r3, [pc, #372]	; (80091dc <DRV_updateFromBluetooth+0x264>)
 8009066:	781b      	ldrb	r3, [r3, #0]
 8009068:	2b02      	cmp	r3, #2
 800906a:	f000 80b3 	beq.w	80091d4 <DRV_updateFromBluetooth+0x25c>
    ; /* Nothing to do */
  }
  /* Manual mode, applying directions received by bluetooth */
  else
  {
    if (p_bluetoothData->leftY > DRV_JOYSTICKS_THRESHOLD)
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	685b      	ldr	r3, [r3, #4]
 8009072:	2b0a      	cmp	r3, #10
 8009074:	dd0c      	ble.n	8009090 <DRV_updateFromBluetooth+0x118>
    {
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? DRV_JOYSTICKS_FIXED_SPEED : p_bluetoothData->leftY;
 8009076:	4b59      	ldr	r3, [pc, #356]	; (80091dc <DRV_updateFromBluetooth+0x264>)
 8009078:	781b      	ldrb	r3, [r3, #0]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d002      	beq.n	8009084 <DRV_updateFromBluetooth+0x10c>
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	685b      	ldr	r3, [r3, #4]
 8009082:	e000      	b.n	8009086 <DRV_updateFromBluetooth+0x10e>
 8009084:	2314      	movs	r3, #20
 8009086:	60fb      	str	r3, [r7, #12]

      DRV_moveForward(l_speed);
 8009088:	68f8      	ldr	r0, [r7, #12]
 800908a:	f000 f971 	bl	8009370 <DRV_moveForward>
      /* Most of the time, we will get here */
      DRV_sleep();
    }
  }

  return;
 800908e:	e0a1      	b.n	80091d4 <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->rightY > DRV_JOYSTICKS_THRESHOLD)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	68db      	ldr	r3, [r3, #12]
 8009094:	2b0a      	cmp	r3, #10
 8009096:	dd0c      	ble.n	80090b2 <DRV_updateFromBluetooth+0x13a>
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? DRV_JOYSTICKS_FIXED_SPEED : p_bluetoothData->rightY;
 8009098:	4b50      	ldr	r3, [pc, #320]	; (80091dc <DRV_updateFromBluetooth+0x264>)
 800909a:	781b      	ldrb	r3, [r3, #0]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d002      	beq.n	80090a6 <DRV_updateFromBluetooth+0x12e>
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	68db      	ldr	r3, [r3, #12]
 80090a4:	e000      	b.n	80090a8 <DRV_updateFromBluetooth+0x130>
 80090a6:	2314      	movs	r3, #20
 80090a8:	60fb      	str	r3, [r7, #12]
      DRV_moveForward(l_speed);
 80090aa:	68f8      	ldr	r0, [r7, #12]
 80090ac:	f000 f960 	bl	8009370 <DRV_moveForward>
  return;
 80090b0:	e090      	b.n	80091d4 <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->leftY < -DRV_JOYSTICKS_THRESHOLD)
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	685b      	ldr	r3, [r3, #4]
 80090b6:	f113 0f0a 	cmn.w	r3, #10
 80090ba:	da0d      	bge.n	80090d8 <DRV_updateFromBluetooth+0x160>
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? DRV_JOYSTICKS_FIXED_SPEED : -p_bluetoothData->leftY;
 80090bc:	4b47      	ldr	r3, [pc, #284]	; (80091dc <DRV_updateFromBluetooth+0x264>)
 80090be:	781b      	ldrb	r3, [r3, #0]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d003      	beq.n	80090cc <DRV_updateFromBluetooth+0x154>
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	685b      	ldr	r3, [r3, #4]
 80090c8:	425b      	negs	r3, r3
 80090ca:	e000      	b.n	80090ce <DRV_updateFromBluetooth+0x156>
 80090cc:	2314      	movs	r3, #20
 80090ce:	60fb      	str	r3, [r7, #12]
      DRV_moveBackward(l_speed);
 80090d0:	68f8      	ldr	r0, [r7, #12]
 80090d2:	f000 f995 	bl	8009400 <DRV_moveBackward>
  return;
 80090d6:	e07d      	b.n	80091d4 <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->rightY < -DRV_JOYSTICKS_THRESHOLD)
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	68db      	ldr	r3, [r3, #12]
 80090dc:	f113 0f0a 	cmn.w	r3, #10
 80090e0:	da0d      	bge.n	80090fe <DRV_updateFromBluetooth+0x186>
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? DRV_JOYSTICKS_FIXED_SPEED : -p_bluetoothData->rightY;
 80090e2:	4b3e      	ldr	r3, [pc, #248]	; (80091dc <DRV_updateFromBluetooth+0x264>)
 80090e4:	781b      	ldrb	r3, [r3, #0]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d003      	beq.n	80090f2 <DRV_updateFromBluetooth+0x17a>
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	68db      	ldr	r3, [r3, #12]
 80090ee:	425b      	negs	r3, r3
 80090f0:	e000      	b.n	80090f4 <DRV_updateFromBluetooth+0x17c>
 80090f2:	2314      	movs	r3, #20
 80090f4:	60fb      	str	r3, [r7, #12]
      DRV_moveBackward(l_speed);
 80090f6:	68f8      	ldr	r0, [r7, #12]
 80090f8:	f000 f982 	bl	8009400 <DRV_moveBackward>
  return;
 80090fc:	e06a      	b.n	80091d4 <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->leftX < -DRV_JOYSTICKS_THRESHOLD)
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f113 0f0a 	cmn.w	r3, #10
 8009106:	da0d      	bge.n	8009124 <DRV_updateFromBluetooth+0x1ac>
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? DRV_JOYSTICKS_FIXED_SPEED : -p_bluetoothData->leftX;
 8009108:	4b34      	ldr	r3, [pc, #208]	; (80091dc <DRV_updateFromBluetooth+0x264>)
 800910a:	781b      	ldrb	r3, [r3, #0]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d003      	beq.n	8009118 <DRV_updateFromBluetooth+0x1a0>
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	425b      	negs	r3, r3
 8009116:	e000      	b.n	800911a <DRV_updateFromBluetooth+0x1a2>
 8009118:	2314      	movs	r3, #20
 800911a:	60fb      	str	r3, [r7, #12]
      DRV_turnLeft(l_speed);
 800911c:	68f8      	ldr	r0, [r7, #12]
 800911e:	f000 fab7 	bl	8009690 <DRV_turnLeft>
  return;
 8009122:	e057      	b.n	80091d4 <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->leftX > DRV_JOYSTICKS_THRESHOLD)
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	2b0a      	cmp	r3, #10
 800912a:	dd0c      	ble.n	8009146 <DRV_updateFromBluetooth+0x1ce>
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? DRV_JOYSTICKS_FIXED_SPEED : p_bluetoothData->leftX;
 800912c:	4b2b      	ldr	r3, [pc, #172]	; (80091dc <DRV_updateFromBluetooth+0x264>)
 800912e:	781b      	ldrb	r3, [r3, #0]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d002      	beq.n	800913a <DRV_updateFromBluetooth+0x1c2>
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	e000      	b.n	800913c <DRV_updateFromBluetooth+0x1c4>
 800913a:	2314      	movs	r3, #20
 800913c:	60fb      	str	r3, [r7, #12]
      DRV_turnRight(l_speed);
 800913e:	68f8      	ldr	r0, [r7, #12]
 8009140:	f000 faee 	bl	8009720 <DRV_turnRight>
  return;
 8009144:	e046      	b.n	80091d4 <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->rightX < -DRV_JOYSTICKS_THRESHOLD)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	689b      	ldr	r3, [r3, #8]
 800914a:	f113 0f0a 	cmn.w	r3, #10
 800914e:	da0d      	bge.n	800916c <DRV_updateFromBluetooth+0x1f4>
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? DRV_JOYSTICKS_FIXED_SPEED : -p_bluetoothData->rightX;
 8009150:	4b22      	ldr	r3, [pc, #136]	; (80091dc <DRV_updateFromBluetooth+0x264>)
 8009152:	781b      	ldrb	r3, [r3, #0]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d003      	beq.n	8009160 <DRV_updateFromBluetooth+0x1e8>
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	689b      	ldr	r3, [r3, #8]
 800915c:	425b      	negs	r3, r3
 800915e:	e000      	b.n	8009162 <DRV_updateFromBluetooth+0x1ea>
 8009160:	2314      	movs	r3, #20
 8009162:	60fb      	str	r3, [r7, #12]
      DRV_translateLeft(l_speed);
 8009164:	68f8      	ldr	r0, [r7, #12]
 8009166:	f000 fb23 	bl	80097b0 <DRV_translateLeft>
  return;
 800916a:	e033      	b.n	80091d4 <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->rightX > DRV_JOYSTICKS_THRESHOLD)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	689b      	ldr	r3, [r3, #8]
 8009170:	2b0a      	cmp	r3, #10
 8009172:	dd0c      	ble.n	800918e <DRV_updateFromBluetooth+0x216>
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? DRV_JOYSTICKS_FIXED_SPEED : p_bluetoothData->rightX;
 8009174:	4b19      	ldr	r3, [pc, #100]	; (80091dc <DRV_updateFromBluetooth+0x264>)
 8009176:	781b      	ldrb	r3, [r3, #0]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d002      	beq.n	8009182 <DRV_updateFromBluetooth+0x20a>
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	689b      	ldr	r3, [r3, #8]
 8009180:	e000      	b.n	8009184 <DRV_updateFromBluetooth+0x20c>
 8009182:	2314      	movs	r3, #20
 8009184:	60fb      	str	r3, [r7, #12]
      DRV_translateRight(l_speed);
 8009186:	68f8      	ldr	r0, [r7, #12]
 8009188:	f000 fb5a 	bl	8009840 <DRV_translateRight>
  return;
 800918c:	e022      	b.n	80091d4 <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->button == BLU_BUTTON_L1)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	7c1b      	ldrb	r3, [r3, #16]
 8009192:	2b0b      	cmp	r3, #11
 8009194:	d103      	bne.n	800919e <DRV_updateFromBluetooth+0x226>
      DRV_moveForwardLeft(DRV_BUTTONS_FIXED_SPEED);
 8009196:	2028      	movs	r0, #40	; 0x28
 8009198:	f000 f9ba 	bl	8009510 <DRV_moveForwardLeft>
  return;
 800919c:	e01a      	b.n	80091d4 <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->button == BLU_BUTTON_L2)
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	7c1b      	ldrb	r3, [r3, #16]
 80091a2:	2b09      	cmp	r3, #9
 80091a4:	d103      	bne.n	80091ae <DRV_updateFromBluetooth+0x236>
      DRV_moveBackwardRight(DRV_BUTTONS_FIXED_SPEED);
 80091a6:	2028      	movs	r0, #40	; 0x28
 80091a8:	f000 f9f2 	bl	8009590 <DRV_moveBackwardRight>
  return;
 80091ac:	e012      	b.n	80091d4 <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->button == BLU_BUTTON_R1)
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	7c1b      	ldrb	r3, [r3, #16]
 80091b2:	2b0c      	cmp	r3, #12
 80091b4:	d103      	bne.n	80091be <DRV_updateFromBluetooth+0x246>
      DRV_moveForwardRight(DRV_BUTTONS_FIXED_SPEED);
 80091b6:	2028      	movs	r0, #40	; 0x28
 80091b8:	f000 f96a 	bl	8009490 <DRV_moveForwardRight>
  return;
 80091bc:	e00a      	b.n	80091d4 <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->button == BLU_BUTTON_R2)
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	7c1b      	ldrb	r3, [r3, #16]
 80091c2:	2b0a      	cmp	r3, #10
 80091c4:	d103      	bne.n	80091ce <DRV_updateFromBluetooth+0x256>
      DRV_moveBackwardLeft(DRV_BUTTONS_FIXED_SPEED);
 80091c6:	2028      	movs	r0, #40	; 0x28
 80091c8:	f000 fa22 	bl	8009610 <DRV_moveBackwardLeft>
  return;
 80091cc:	e002      	b.n	80091d4 <DRV_updateFromBluetooth+0x25c>
      DRV_sleep();
 80091ce:	f000 f8a3 	bl	8009318 <DRV_sleep>
  return;
 80091d2:	bf00      	nop
 80091d4:	bf00      	nop
}
 80091d6:	3710      	adds	r7, #16
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}
 80091dc:	200000eb 	.word	0x200000eb
 80091e0:	0800be2c 	.word	0x0800be2c
 80091e4:	0800be58 	.word	0x0800be58
 80091e8:	0800be88 	.word	0x0800be88
 80091ec:	200000e9 	.word	0x200000e9
 80091f0:	0800beb8 	.word	0x0800beb8
 80091f4:	0800bed0 	.word	0x0800bed0

080091f8 <DRV_updateFromMaster>:

void DRV_updateFromMaster(uint16_t p_deltaTime, T_SFO_Context *p_commandsFifo)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b08e      	sub	sp, #56	; 0x38
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	4603      	mov	r3, r0
 8009200:	6039      	str	r1, [r7, #0]
 8009202:	80fb      	strh	r3, [r7, #6]
  int32_t    l_pidSpeedRearRight;
  int32_t    l_pidSpeedRearLeft;
  T_SFO_data l_command;

  /* Ignore master board data only whenever a manual mode is selected */
  if (g_DRV_mode != DRV_MODE_MASTER_BOARD_CONTROL)
 8009204:	4b31      	ldr	r3, [pc, #196]	; (80092cc <DRV_updateFromMaster+0xd4>)
 8009206:	781b      	ldrb	r3, [r3, #0]
 8009208:	2b02      	cmp	r3, #2
 800920a:	d15a      	bne.n	80092c2 <DRV_updateFromMaster+0xca>
  {
    ; /* Nothing to do */
  }
  else
  {
    if (SFO_getCount(p_commandsFifo) != 0)
 800920c:	6838      	ldr	r0, [r7, #0]
 800920e:	f001 f81f 	bl	800a250 <SFO_getCount>
 8009212:	4603      	mov	r3, r0
 8009214:	2b00      	cmp	r3, #0
 8009216:	d00f      	beq.n	8009238 <DRV_updateFromMaster+0x40>
    {
      SFO_logInfo(p_commandsFifo);
 8009218:	6838      	ldr	r0, [r7, #0]
 800921a:	f001 f825 	bl	800a268 <SFO_logInfo>
      SFO_pop    (p_commandsFifo   , &l_command);
 800921e:	f107 0308 	add.w	r3, r7, #8
 8009222:	4619      	mov	r1, r3
 8009224:	6838      	ldr	r0, [r7, #0]
 8009226:	f000 ffd3 	bl	800a1d0 <SFO_pop>
      LOG_info   ("Got command: %s",  l_command);
 800922a:	f107 0308 	add.w	r3, r7, #8
 800922e:	461a      	mov	r2, r3
 8009230:	4927      	ldr	r1, [pc, #156]	; (80092d0 <DRV_updateFromMaster+0xd8>)
 8009232:	2001      	movs	r0, #1
 8009234:	f000 fcc2 	bl	8009bbc <LOG_log>
    }

    /* Get measurements */
    l_measuredSpeedFrontRight = ENC_getCount(&g_DRV_encoderFrontRight);
 8009238:	4826      	ldr	r0, [pc, #152]	; (80092d4 <DRV_updateFromMaster+0xdc>)
 800923a:	f000 fb91 	bl	8009960 <ENC_getCount>
 800923e:	4603      	mov	r3, r0
 8009240:	637b      	str	r3, [r7, #52]	; 0x34
    l_measuredSpeedFrontLeft  = ENC_getCount(&g_DRV_encoderFrontLeft );
 8009242:	4825      	ldr	r0, [pc, #148]	; (80092d8 <DRV_updateFromMaster+0xe0>)
 8009244:	f000 fb8c 	bl	8009960 <ENC_getCount>
 8009248:	4603      	mov	r3, r0
 800924a:	633b      	str	r3, [r7, #48]	; 0x30
    l_measuredSpeedRearRight  = ENC_getCount(&g_DRV_encoderRearRight );
 800924c:	4823      	ldr	r0, [pc, #140]	; (80092dc <DRV_updateFromMaster+0xe4>)
 800924e:	f000 fb87 	bl	8009960 <ENC_getCount>
 8009252:	4603      	mov	r3, r0
 8009254:	62fb      	str	r3, [r7, #44]	; 0x2c
    l_measuredSpeedRearLeft   = ENC_getCount(&g_DRV_encoderRearLeft  );
 8009256:	4822      	ldr	r0, [pc, #136]	; (80092e0 <DRV_updateFromMaster+0xe8>)
 8009258:	f000 fb82 	bl	8009960 <ENC_getCount>
 800925c:	4603      	mov	r3, r0
 800925e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Update PIDs */
    l_pidSpeedFrontRight = PID_update(&g_DRV_pidFrontRight, l_measuredSpeedFrontRight, p_deltaTime);
 8009260:	88fb      	ldrh	r3, [r7, #6]
 8009262:	461a      	mov	r2, r3
 8009264:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009266:	481f      	ldr	r0, [pc, #124]	; (80092e4 <DRV_updateFromMaster+0xec>)
 8009268:	f000 feb2 	bl	8009fd0 <PID_update>
 800926c:	6278      	str	r0, [r7, #36]	; 0x24
    l_pidSpeedFrontLeft  = PID_update(&g_DRV_pidFrontLeft , l_measuredSpeedFrontLeft , p_deltaTime);
 800926e:	88fb      	ldrh	r3, [r7, #6]
 8009270:	461a      	mov	r2, r3
 8009272:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009274:	481c      	ldr	r0, [pc, #112]	; (80092e8 <DRV_updateFromMaster+0xf0>)
 8009276:	f000 feab 	bl	8009fd0 <PID_update>
 800927a:	6238      	str	r0, [r7, #32]
    l_pidSpeedRearRight  = PID_update(&g_DRV_pidRearRight , l_measuredSpeedRearRight , p_deltaTime);
 800927c:	88fb      	ldrh	r3, [r7, #6]
 800927e:	461a      	mov	r2, r3
 8009280:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009282:	481a      	ldr	r0, [pc, #104]	; (80092ec <DRV_updateFromMaster+0xf4>)
 8009284:	f000 fea4 	bl	8009fd0 <PID_update>
 8009288:	61f8      	str	r0, [r7, #28]
    l_pidSpeedRearLeft   = PID_update(&g_DRV_pidRearLeft  , l_measuredSpeedRearLeft  , p_deltaTime);
 800928a:	88fb      	ldrh	r3, [r7, #6]
 800928c:	461a      	mov	r2, r3
 800928e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009290:	4817      	ldr	r0, [pc, #92]	; (80092f0 <DRV_updateFromMaster+0xf8>)
 8009292:	f000 fe9d 	bl	8009fd0 <PID_update>
 8009296:	61b8      	str	r0, [r7, #24]

    /* Update motors */
    MTR_setSpeed(&g_DRV_motorFrontRight, l_pidSpeedFrontRight);
 8009298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800929a:	4619      	mov	r1, r3
 800929c:	4815      	ldr	r0, [pc, #84]	; (80092f4 <DRV_updateFromMaster+0xfc>)
 800929e:	f000 fe05 	bl	8009eac <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_pidSpeedFrontLeft );
 80092a2:	6a3b      	ldr	r3, [r7, #32]
 80092a4:	4619      	mov	r1, r3
 80092a6:	4814      	ldr	r0, [pc, #80]	; (80092f8 <DRV_updateFromMaster+0x100>)
 80092a8:	f000 fe00 	bl	8009eac <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_pidSpeedRearRight );
 80092ac:	69fb      	ldr	r3, [r7, #28]
 80092ae:	4619      	mov	r1, r3
 80092b0:	4812      	ldr	r0, [pc, #72]	; (80092fc <DRV_updateFromMaster+0x104>)
 80092b2:	f000 fdfb 	bl	8009eac <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_pidSpeedRearLeft  );
 80092b6:	69bb      	ldr	r3, [r7, #24]
 80092b8:	4619      	mov	r1, r3
 80092ba:	4811      	ldr	r0, [pc, #68]	; (8009300 <DRV_updateFromMaster+0x108>)
 80092bc:	f000 fdf6 	bl	8009eac <MTR_setSpeed>
  }

  return;
 80092c0:	bf00      	nop
 80092c2:	bf00      	nop
}
 80092c4:	3738      	adds	r7, #56	; 0x38
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd80      	pop	{r7, pc}
 80092ca:	bf00      	nop
 80092cc:	200000eb 	.word	0x200000eb
 80092d0:	0800bee8 	.word	0x0800bee8
 80092d4:	2000023c 	.word	0x2000023c
 80092d8:	20000248 	.word	0x20000248
 80092dc:	20000260 	.word	0x20000260
 80092e0:	20000254 	.word	0x20000254
 80092e4:	200000ec 	.word	0x200000ec
 80092e8:	2000011c 	.word	0x2000011c
 80092ec:	2000017c 	.word	0x2000017c
 80092f0:	2000014c 	.word	0x2000014c
 80092f4:	200001ac 	.word	0x200001ac
 80092f8:	200001d0 	.word	0x200001d0
 80092fc:	20000218 	.word	0x20000218
 8009300:	200001f4 	.word	0x200001f4

08009304 <DRV_getMode>:

T_DRV_MODE DRV_getMode(void)
{
 8009304:	b480      	push	{r7}
 8009306:	af00      	add	r7, sp, #0
  return g_DRV_mode;
 8009308:	4b02      	ldr	r3, [pc, #8]	; (8009314 <DRV_getMode+0x10>)
 800930a:	781b      	ldrb	r3, [r3, #0]
}
 800930c:	4618      	mov	r0, r3
 800930e:	46bd      	mov	sp, r7
 8009310:	bc80      	pop	{r7}
 8009312:	4770      	bx	lr
 8009314:	200000eb 	.word	0x200000eb

08009318 <DRV_sleep>:

static void DRV_sleep(void)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	af00      	add	r7, sp, #0
  if (g_DRV_isActive == true)
 800931c:	4b0e      	ldr	r3, [pc, #56]	; (8009358 <DRV_sleep+0x40>)
 800931e:	781b      	ldrb	r3, [r3, #0]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d017      	beq.n	8009354 <DRV_sleep+0x3c>
  {
    LOG_debug("Drive going to sleep");
 8009324:	490d      	ldr	r1, [pc, #52]	; (800935c <DRV_sleep+0x44>)
 8009326:	2000      	movs	r0, #0
 8009328:	f000 fc48 	bl	8009bbc <LOG_log>

    MTR_setSpeed(&g_DRV_motorFrontRight, 0);
 800932c:	2100      	movs	r1, #0
 800932e:	480c      	ldr	r0, [pc, #48]	; (8009360 <DRV_sleep+0x48>)
 8009330:	f000 fdbc 	bl	8009eac <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , 0);
 8009334:	2100      	movs	r1, #0
 8009336:	480b      	ldr	r0, [pc, #44]	; (8009364 <DRV_sleep+0x4c>)
 8009338:	f000 fdb8 	bl	8009eac <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , 0);
 800933c:	2100      	movs	r1, #0
 800933e:	480a      	ldr	r0, [pc, #40]	; (8009368 <DRV_sleep+0x50>)
 8009340:	f000 fdb4 	bl	8009eac <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , 0);
 8009344:	2100      	movs	r1, #0
 8009346:	4809      	ldr	r0, [pc, #36]	; (800936c <DRV_sleep+0x54>)
 8009348:	f000 fdb0 	bl	8009eac <MTR_setSpeed>

    g_DRV_isActive = false;
 800934c:	4b02      	ldr	r3, [pc, #8]	; (8009358 <DRV_sleep+0x40>)
 800934e:	2200      	movs	r2, #0
 8009350:	701a      	strb	r2, [r3, #0]
  else
  {
    ; /* Nothing to do */
  }

  return;
 8009352:	bf00      	nop
 8009354:	bf00      	nop
}
 8009356:	bd80      	pop	{r7, pc}
 8009358:	200000ea 	.word	0x200000ea
 800935c:	0800bef8 	.word	0x0800bef8
 8009360:	200001ac 	.word	0x200001ac
 8009364:	200001d0 	.word	0x200001d0
 8009368:	20000218 	.word	0x20000218
 800936c:	200001f4 	.word	0x200001f4

08009370 <DRV_moveForward>:

static void DRV_moveForward(uint32_t p_speed)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b084      	sub	sp, #16
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	60fb      	str	r3, [r7, #12]

  LOG_debug("Moving forward @%u", l_speed);
 800937c:	68fa      	ldr	r2, [r7, #12]
 800937e:	4919      	ldr	r1, [pc, #100]	; (80093e4 <DRV_moveForward+0x74>)
 8009380:	2000      	movs	r0, #0
 8009382:	f000 fc1b 	bl	8009bbc <LOG_log>

  g_DRV_isActive = true;
 8009386:	4b18      	ldr	r3, [pc, #96]	; (80093e8 <DRV_moveForward+0x78>)
 8009388:	2201      	movs	r2, #1
 800938a:	701a      	strb	r2, [r3, #0]

  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_FORWARD);
 800938c:	2101      	movs	r1, #1
 800938e:	4817      	ldr	r0, [pc, #92]	; (80093ec <DRV_moveForward+0x7c>)
 8009390:	f000 fd20 	bl	8009dd4 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorFrontLeft , MTR_DIRECTION_FORWARD);
 8009394:	2101      	movs	r1, #1
 8009396:	4816      	ldr	r0, [pc, #88]	; (80093f0 <DRV_moveForward+0x80>)
 8009398:	f000 fd1c 	bl	8009dd4 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight , MTR_DIRECTION_FORWARD);
 800939c:	2101      	movs	r1, #1
 800939e:	4815      	ldr	r0, [pc, #84]	; (80093f4 <DRV_moveForward+0x84>)
 80093a0:	f000 fd18 	bl	8009dd4 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_FORWARD);
 80093a4:	2101      	movs	r1, #1
 80093a6:	4814      	ldr	r0, [pc, #80]	; (80093f8 <DRV_moveForward+0x88>)
 80093a8:	f000 fd14 	bl	8009dd4 <MTR_setDirection>

  if (g_DRV_areMotorsOn == false)
 80093ac:	4b13      	ldr	r3, [pc, #76]	; (80093fc <DRV_moveForward+0x8c>)
 80093ae:	781b      	ldrb	r3, [r3, #0]
 80093b0:	f083 0301 	eor.w	r3, r3, #1
 80093b4:	b2db      	uxtb	r3, r3
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d110      	bne.n	80093dc <DRV_moveForward+0x6c>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 80093ba:	68f9      	ldr	r1, [r7, #12]
 80093bc:	480b      	ldr	r0, [pc, #44]	; (80093ec <DRV_moveForward+0x7c>)
 80093be:	f000 fd75 	bl	8009eac <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 80093c2:	68f9      	ldr	r1, [r7, #12]
 80093c4:	480a      	ldr	r0, [pc, #40]	; (80093f0 <DRV_moveForward+0x80>)
 80093c6:	f000 fd71 	bl	8009eac <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 80093ca:	68f9      	ldr	r1, [r7, #12]
 80093cc:	4809      	ldr	r0, [pc, #36]	; (80093f4 <DRV_moveForward+0x84>)
 80093ce:	f000 fd6d 	bl	8009eac <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 80093d2:	68f9      	ldr	r1, [r7, #12]
 80093d4:	4808      	ldr	r0, [pc, #32]	; (80093f8 <DRV_moveForward+0x88>)
 80093d6:	f000 fd69 	bl	8009eac <MTR_setSpeed>
  }

  return;
 80093da:	bf00      	nop
 80093dc:	bf00      	nop
}
 80093de:	3710      	adds	r7, #16
 80093e0:	46bd      	mov	sp, r7
 80093e2:	bd80      	pop	{r7, pc}
 80093e4:	0800bf10 	.word	0x0800bf10
 80093e8:	200000ea 	.word	0x200000ea
 80093ec:	200001ac 	.word	0x200001ac
 80093f0:	200001d0 	.word	0x200001d0
 80093f4:	20000218 	.word	0x20000218
 80093f8:	200001f4 	.word	0x200001f4
 80093fc:	200000e9 	.word	0x200000e9

08009400 <DRV_moveBackward>:

static void DRV_moveBackward(uint32_t p_speed)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b084      	sub	sp, #16
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	60fb      	str	r3, [r7, #12]

  LOG_debug("Moving backward @%u", l_speed);
 800940c:	68fa      	ldr	r2, [r7, #12]
 800940e:	4919      	ldr	r1, [pc, #100]	; (8009474 <DRV_moveBackward+0x74>)
 8009410:	2000      	movs	r0, #0
 8009412:	f000 fbd3 	bl	8009bbc <LOG_log>

  g_DRV_isActive = true;
 8009416:	4b18      	ldr	r3, [pc, #96]	; (8009478 <DRV_moveBackward+0x78>)
 8009418:	2201      	movs	r2, #1
 800941a:	701a      	strb	r2, [r3, #0]

  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_BACKWARD);
 800941c:	2102      	movs	r1, #2
 800941e:	4817      	ldr	r0, [pc, #92]	; (800947c <DRV_moveBackward+0x7c>)
 8009420:	f000 fcd8 	bl	8009dd4 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorFrontLeft , MTR_DIRECTION_BACKWARD);
 8009424:	2102      	movs	r1, #2
 8009426:	4816      	ldr	r0, [pc, #88]	; (8009480 <DRV_moveBackward+0x80>)
 8009428:	f000 fcd4 	bl	8009dd4 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight , MTR_DIRECTION_BACKWARD);
 800942c:	2102      	movs	r1, #2
 800942e:	4815      	ldr	r0, [pc, #84]	; (8009484 <DRV_moveBackward+0x84>)
 8009430:	f000 fcd0 	bl	8009dd4 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_BACKWARD);
 8009434:	2102      	movs	r1, #2
 8009436:	4814      	ldr	r0, [pc, #80]	; (8009488 <DRV_moveBackward+0x88>)
 8009438:	f000 fccc 	bl	8009dd4 <MTR_setDirection>

  if (g_DRV_areMotorsOn == false)
 800943c:	4b13      	ldr	r3, [pc, #76]	; (800948c <DRV_moveBackward+0x8c>)
 800943e:	781b      	ldrb	r3, [r3, #0]
 8009440:	f083 0301 	eor.w	r3, r3, #1
 8009444:	b2db      	uxtb	r3, r3
 8009446:	2b00      	cmp	r3, #0
 8009448:	d110      	bne.n	800946c <DRV_moveBackward+0x6c>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 800944a:	68f9      	ldr	r1, [r7, #12]
 800944c:	480b      	ldr	r0, [pc, #44]	; (800947c <DRV_moveBackward+0x7c>)
 800944e:	f000 fd2d 	bl	8009eac <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 8009452:	68f9      	ldr	r1, [r7, #12]
 8009454:	480a      	ldr	r0, [pc, #40]	; (8009480 <DRV_moveBackward+0x80>)
 8009456:	f000 fd29 	bl	8009eac <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 800945a:	68f9      	ldr	r1, [r7, #12]
 800945c:	4809      	ldr	r0, [pc, #36]	; (8009484 <DRV_moveBackward+0x84>)
 800945e:	f000 fd25 	bl	8009eac <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 8009462:	68f9      	ldr	r1, [r7, #12]
 8009464:	4808      	ldr	r0, [pc, #32]	; (8009488 <DRV_moveBackward+0x88>)
 8009466:	f000 fd21 	bl	8009eac <MTR_setSpeed>
  }

  return;
 800946a:	bf00      	nop
 800946c:	bf00      	nop
}
 800946e:	3710      	adds	r7, #16
 8009470:	46bd      	mov	sp, r7
 8009472:	bd80      	pop	{r7, pc}
 8009474:	0800bf24 	.word	0x0800bf24
 8009478:	200000ea 	.word	0x200000ea
 800947c:	200001ac 	.word	0x200001ac
 8009480:	200001d0 	.word	0x200001d0
 8009484:	20000218 	.word	0x20000218
 8009488:	200001f4 	.word	0x200001f4
 800948c:	200000e9 	.word	0x200000e9

08009490 <DRV_moveForwardRight>:

static void DRV_moveForwardRight (uint32_t p_speed)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b084      	sub	sp, #16
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	60fb      	str	r3, [r7, #12]

  LOG_debug("Moving forward-right @%u", l_speed);
 800949c:	68fa      	ldr	r2, [r7, #12]
 800949e:	4915      	ldr	r1, [pc, #84]	; (80094f4 <DRV_moveForwardRight+0x64>)
 80094a0:	2000      	movs	r0, #0
 80094a2:	f000 fb8b 	bl	8009bbc <LOG_log>

  g_DRV_isActive = true;
 80094a6:	4b14      	ldr	r3, [pc, #80]	; (80094f8 <DRV_moveForwardRight+0x68>)
 80094a8:	2201      	movs	r2, #1
 80094aa:	701a      	strb	r2, [r3, #0]

  MTR_setDirection(&g_DRV_motorFrontLeft, MTR_DIRECTION_FORWARD);
 80094ac:	2101      	movs	r1, #1
 80094ae:	4813      	ldr	r0, [pc, #76]	; (80094fc <DRV_moveForwardRight+0x6c>)
 80094b0:	f000 fc90 	bl	8009dd4 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight, MTR_DIRECTION_FORWARD);
 80094b4:	2101      	movs	r1, #1
 80094b6:	4812      	ldr	r0, [pc, #72]	; (8009500 <DRV_moveForwardRight+0x70>)
 80094b8:	f000 fc8c 	bl	8009dd4 <MTR_setDirection>

  if (g_DRV_areMotorsOn == false)
 80094bc:	4b11      	ldr	r3, [pc, #68]	; (8009504 <DRV_moveForwardRight+0x74>)
 80094be:	781b      	ldrb	r3, [r3, #0]
 80094c0:	f083 0301 	eor.w	r3, r3, #1
 80094c4:	b2db      	uxtb	r3, r3
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d110      	bne.n	80094ec <DRV_moveForwardRight+0x5c>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight,       0);
 80094ca:	2100      	movs	r1, #0
 80094cc:	480e      	ldr	r0, [pc, #56]	; (8009508 <DRV_moveForwardRight+0x78>)
 80094ce:	f000 fced 	bl	8009eac <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 80094d2:	68f9      	ldr	r1, [r7, #12]
 80094d4:	4809      	ldr	r0, [pc, #36]	; (80094fc <DRV_moveForwardRight+0x6c>)
 80094d6:	f000 fce9 	bl	8009eac <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 80094da:	68f9      	ldr	r1, [r7, #12]
 80094dc:	4808      	ldr	r0, [pc, #32]	; (8009500 <DRV_moveForwardRight+0x70>)
 80094de:	f000 fce5 	bl	8009eac <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  ,       0);
 80094e2:	2100      	movs	r1, #0
 80094e4:	4809      	ldr	r0, [pc, #36]	; (800950c <DRV_moveForwardRight+0x7c>)
 80094e6:	f000 fce1 	bl	8009eac <MTR_setSpeed>
  }

  return;
 80094ea:	bf00      	nop
 80094ec:	bf00      	nop
}
 80094ee:	3710      	adds	r7, #16
 80094f0:	46bd      	mov	sp, r7
 80094f2:	bd80      	pop	{r7, pc}
 80094f4:	0800bf38 	.word	0x0800bf38
 80094f8:	200000ea 	.word	0x200000ea
 80094fc:	200001d0 	.word	0x200001d0
 8009500:	20000218 	.word	0x20000218
 8009504:	200000e9 	.word	0x200000e9
 8009508:	200001ac 	.word	0x200001ac
 800950c:	200001f4 	.word	0x200001f4

08009510 <DRV_moveForwardLeft>:

static void DRV_moveForwardLeft  (uint32_t p_speed)
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b084      	sub	sp, #16
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	60fb      	str	r3, [r7, #12]

  LOG_debug("Moving forward-left @%u", l_speed);
 800951c:	68fa      	ldr	r2, [r7, #12]
 800951e:	4915      	ldr	r1, [pc, #84]	; (8009574 <DRV_moveForwardLeft+0x64>)
 8009520:	2000      	movs	r0, #0
 8009522:	f000 fb4b 	bl	8009bbc <LOG_log>

  g_DRV_isActive = true;
 8009526:	4b14      	ldr	r3, [pc, #80]	; (8009578 <DRV_moveForwardLeft+0x68>)
 8009528:	2201      	movs	r2, #1
 800952a:	701a      	strb	r2, [r3, #0]

  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_FORWARD);
 800952c:	2101      	movs	r1, #1
 800952e:	4813      	ldr	r0, [pc, #76]	; (800957c <DRV_moveForwardLeft+0x6c>)
 8009530:	f000 fc50 	bl	8009dd4 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_FORWARD);
 8009534:	2101      	movs	r1, #1
 8009536:	4812      	ldr	r0, [pc, #72]	; (8009580 <DRV_moveForwardLeft+0x70>)
 8009538:	f000 fc4c 	bl	8009dd4 <MTR_setDirection>

  if (g_DRV_areMotorsOn == false)
 800953c:	4b11      	ldr	r3, [pc, #68]	; (8009584 <DRV_moveForwardLeft+0x74>)
 800953e:	781b      	ldrb	r3, [r3, #0]
 8009540:	f083 0301 	eor.w	r3, r3, #1
 8009544:	b2db      	uxtb	r3, r3
 8009546:	2b00      	cmp	r3, #0
 8009548:	d110      	bne.n	800956c <DRV_moveForwardLeft+0x5c>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 800954a:	68f9      	ldr	r1, [r7, #12]
 800954c:	480b      	ldr	r0, [pc, #44]	; (800957c <DRV_moveForwardLeft+0x6c>)
 800954e:	f000 fcad 	bl	8009eac <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft ,       0);
 8009552:	2100      	movs	r1, #0
 8009554:	480c      	ldr	r0, [pc, #48]	; (8009588 <DRV_moveForwardLeft+0x78>)
 8009556:	f000 fca9 	bl	8009eac <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight ,       0);
 800955a:	2100      	movs	r1, #0
 800955c:	480b      	ldr	r0, [pc, #44]	; (800958c <DRV_moveForwardLeft+0x7c>)
 800955e:	f000 fca5 	bl	8009eac <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 8009562:	68f9      	ldr	r1, [r7, #12]
 8009564:	4806      	ldr	r0, [pc, #24]	; (8009580 <DRV_moveForwardLeft+0x70>)
 8009566:	f000 fca1 	bl	8009eac <MTR_setSpeed>
  }

  return;
 800956a:	bf00      	nop
 800956c:	bf00      	nop
}
 800956e:	3710      	adds	r7, #16
 8009570:	46bd      	mov	sp, r7
 8009572:	bd80      	pop	{r7, pc}
 8009574:	0800bf54 	.word	0x0800bf54
 8009578:	200000ea 	.word	0x200000ea
 800957c:	200001ac 	.word	0x200001ac
 8009580:	200001f4 	.word	0x200001f4
 8009584:	200000e9 	.word	0x200000e9
 8009588:	200001d0 	.word	0x200001d0
 800958c:	20000218 	.word	0x20000218

08009590 <DRV_moveBackwardRight>:

static void DRV_moveBackwardRight(uint32_t p_speed)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b084      	sub	sp, #16
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	60fb      	str	r3, [r7, #12]

  LOG_debug("Moving backward-right @%u", l_speed);
 800959c:	68fa      	ldr	r2, [r7, #12]
 800959e:	4915      	ldr	r1, [pc, #84]	; (80095f4 <DRV_moveBackwardRight+0x64>)
 80095a0:	2000      	movs	r0, #0
 80095a2:	f000 fb0b 	bl	8009bbc <LOG_log>

  g_DRV_isActive = true;
 80095a6:	4b14      	ldr	r3, [pc, #80]	; (80095f8 <DRV_moveBackwardRight+0x68>)
 80095a8:	2201      	movs	r2, #1
 80095aa:	701a      	strb	r2, [r3, #0]

  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_BACKWARD);
 80095ac:	2102      	movs	r1, #2
 80095ae:	4813      	ldr	r0, [pc, #76]	; (80095fc <DRV_moveBackwardRight+0x6c>)
 80095b0:	f000 fc10 	bl	8009dd4 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_BACKWARD);
 80095b4:	2102      	movs	r1, #2
 80095b6:	4812      	ldr	r0, [pc, #72]	; (8009600 <DRV_moveBackwardRight+0x70>)
 80095b8:	f000 fc0c 	bl	8009dd4 <MTR_setDirection>

  if (g_DRV_areMotorsOn == false)
 80095bc:	4b11      	ldr	r3, [pc, #68]	; (8009604 <DRV_moveBackwardRight+0x74>)
 80095be:	781b      	ldrb	r3, [r3, #0]
 80095c0:	f083 0301 	eor.w	r3, r3, #1
 80095c4:	b2db      	uxtb	r3, r3
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d110      	bne.n	80095ec <DRV_moveBackwardRight+0x5c>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 80095ca:	68f9      	ldr	r1, [r7, #12]
 80095cc:	480b      	ldr	r0, [pc, #44]	; (80095fc <DRV_moveBackwardRight+0x6c>)
 80095ce:	f000 fc6d 	bl	8009eac <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft ,       0);
 80095d2:	2100      	movs	r1, #0
 80095d4:	480c      	ldr	r0, [pc, #48]	; (8009608 <DRV_moveBackwardRight+0x78>)
 80095d6:	f000 fc69 	bl	8009eac <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight ,       0);
 80095da:	2100      	movs	r1, #0
 80095dc:	480b      	ldr	r0, [pc, #44]	; (800960c <DRV_moveBackwardRight+0x7c>)
 80095de:	f000 fc65 	bl	8009eac <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 80095e2:	68f9      	ldr	r1, [r7, #12]
 80095e4:	4806      	ldr	r0, [pc, #24]	; (8009600 <DRV_moveBackwardRight+0x70>)
 80095e6:	f000 fc61 	bl	8009eac <MTR_setSpeed>
  }

  return;
 80095ea:	bf00      	nop
 80095ec:	bf00      	nop
}
 80095ee:	3710      	adds	r7, #16
 80095f0:	46bd      	mov	sp, r7
 80095f2:	bd80      	pop	{r7, pc}
 80095f4:	0800bf6c 	.word	0x0800bf6c
 80095f8:	200000ea 	.word	0x200000ea
 80095fc:	200001ac 	.word	0x200001ac
 8009600:	200001f4 	.word	0x200001f4
 8009604:	200000e9 	.word	0x200000e9
 8009608:	200001d0 	.word	0x200001d0
 800960c:	20000218 	.word	0x20000218

08009610 <DRV_moveBackwardLeft>:

static void DRV_moveBackwardLeft (uint32_t p_speed)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b084      	sub	sp, #16
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	60fb      	str	r3, [r7, #12]

  LOG_debug("Moving backward-left @%u", l_speed);
 800961c:	68fa      	ldr	r2, [r7, #12]
 800961e:	4915      	ldr	r1, [pc, #84]	; (8009674 <DRV_moveBackwardLeft+0x64>)
 8009620:	2000      	movs	r0, #0
 8009622:	f000 facb 	bl	8009bbc <LOG_log>

  g_DRV_isActive = true;
 8009626:	4b14      	ldr	r3, [pc, #80]	; (8009678 <DRV_moveBackwardLeft+0x68>)
 8009628:	2201      	movs	r2, #1
 800962a:	701a      	strb	r2, [r3, #0]

  MTR_setDirection(&g_DRV_motorFrontLeft, MTR_DIRECTION_BACKWARD);
 800962c:	2102      	movs	r1, #2
 800962e:	4813      	ldr	r0, [pc, #76]	; (800967c <DRV_moveBackwardLeft+0x6c>)
 8009630:	f000 fbd0 	bl	8009dd4 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight, MTR_DIRECTION_BACKWARD);
 8009634:	2102      	movs	r1, #2
 8009636:	4812      	ldr	r0, [pc, #72]	; (8009680 <DRV_moveBackwardLeft+0x70>)
 8009638:	f000 fbcc 	bl	8009dd4 <MTR_setDirection>

  if (g_DRV_areMotorsOn == false)
 800963c:	4b11      	ldr	r3, [pc, #68]	; (8009684 <DRV_moveBackwardLeft+0x74>)
 800963e:	781b      	ldrb	r3, [r3, #0]
 8009640:	f083 0301 	eor.w	r3, r3, #1
 8009644:	b2db      	uxtb	r3, r3
 8009646:	2b00      	cmp	r3, #0
 8009648:	d110      	bne.n	800966c <DRV_moveBackwardLeft+0x5c>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight,       0);
 800964a:	2100      	movs	r1, #0
 800964c:	480e      	ldr	r0, [pc, #56]	; (8009688 <DRV_moveBackwardLeft+0x78>)
 800964e:	f000 fc2d 	bl	8009eac <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 8009652:	68f9      	ldr	r1, [r7, #12]
 8009654:	4809      	ldr	r0, [pc, #36]	; (800967c <DRV_moveBackwardLeft+0x6c>)
 8009656:	f000 fc29 	bl	8009eac <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 800965a:	68f9      	ldr	r1, [r7, #12]
 800965c:	4808      	ldr	r0, [pc, #32]	; (8009680 <DRV_moveBackwardLeft+0x70>)
 800965e:	f000 fc25 	bl	8009eac <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  ,       0);
 8009662:	2100      	movs	r1, #0
 8009664:	4809      	ldr	r0, [pc, #36]	; (800968c <DRV_moveBackwardLeft+0x7c>)
 8009666:	f000 fc21 	bl	8009eac <MTR_setSpeed>
  }

  return;
 800966a:	bf00      	nop
 800966c:	bf00      	nop
}
 800966e:	3710      	adds	r7, #16
 8009670:	46bd      	mov	sp, r7
 8009672:	bd80      	pop	{r7, pc}
 8009674:	0800bf88 	.word	0x0800bf88
 8009678:	200000ea 	.word	0x200000ea
 800967c:	200001d0 	.word	0x200001d0
 8009680:	20000218 	.word	0x20000218
 8009684:	200000e9 	.word	0x200000e9
 8009688:	200001ac 	.word	0x200001ac
 800968c:	200001f4 	.word	0x200001f4

08009690 <DRV_turnLeft>:

static void DRV_turnLeft(uint32_t p_speed)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b084      	sub	sp, #16
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	60fb      	str	r3, [r7, #12]

  LOG_debug("Turning left @%u", l_speed);
 800969c:	68fa      	ldr	r2, [r7, #12]
 800969e:	4919      	ldr	r1, [pc, #100]	; (8009704 <DRV_turnLeft+0x74>)
 80096a0:	2000      	movs	r0, #0
 80096a2:	f000 fa8b 	bl	8009bbc <LOG_log>

  g_DRV_isActive = true;
 80096a6:	4b18      	ldr	r3, [pc, #96]	; (8009708 <DRV_turnLeft+0x78>)
 80096a8:	2201      	movs	r2, #1
 80096aa:	701a      	strb	r2, [r3, #0]

  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_FORWARD );
 80096ac:	2101      	movs	r1, #1
 80096ae:	4817      	ldr	r0, [pc, #92]	; (800970c <DRV_turnLeft+0x7c>)
 80096b0:	f000 fb90 	bl	8009dd4 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorFrontLeft , MTR_DIRECTION_BACKWARD);
 80096b4:	2102      	movs	r1, #2
 80096b6:	4816      	ldr	r0, [pc, #88]	; (8009710 <DRV_turnLeft+0x80>)
 80096b8:	f000 fb8c 	bl	8009dd4 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight , MTR_DIRECTION_FORWARD );
 80096bc:	2101      	movs	r1, #1
 80096be:	4815      	ldr	r0, [pc, #84]	; (8009714 <DRV_turnLeft+0x84>)
 80096c0:	f000 fb88 	bl	8009dd4 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_BACKWARD);
 80096c4:	2102      	movs	r1, #2
 80096c6:	4814      	ldr	r0, [pc, #80]	; (8009718 <DRV_turnLeft+0x88>)
 80096c8:	f000 fb84 	bl	8009dd4 <MTR_setDirection>

  if (g_DRV_areMotorsOn == false)
 80096cc:	4b13      	ldr	r3, [pc, #76]	; (800971c <DRV_turnLeft+0x8c>)
 80096ce:	781b      	ldrb	r3, [r3, #0]
 80096d0:	f083 0301 	eor.w	r3, r3, #1
 80096d4:	b2db      	uxtb	r3, r3
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d110      	bne.n	80096fc <DRV_turnLeft+0x6c>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 80096da:	68f9      	ldr	r1, [r7, #12]
 80096dc:	480b      	ldr	r0, [pc, #44]	; (800970c <DRV_turnLeft+0x7c>)
 80096de:	f000 fbe5 	bl	8009eac <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 80096e2:	68f9      	ldr	r1, [r7, #12]
 80096e4:	480a      	ldr	r0, [pc, #40]	; (8009710 <DRV_turnLeft+0x80>)
 80096e6:	f000 fbe1 	bl	8009eac <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 80096ea:	68f9      	ldr	r1, [r7, #12]
 80096ec:	4809      	ldr	r0, [pc, #36]	; (8009714 <DRV_turnLeft+0x84>)
 80096ee:	f000 fbdd 	bl	8009eac <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 80096f2:	68f9      	ldr	r1, [r7, #12]
 80096f4:	4808      	ldr	r0, [pc, #32]	; (8009718 <DRV_turnLeft+0x88>)
 80096f6:	f000 fbd9 	bl	8009eac <MTR_setSpeed>
  }

  return;
 80096fa:	bf00      	nop
 80096fc:	bf00      	nop
}
 80096fe:	3710      	adds	r7, #16
 8009700:	46bd      	mov	sp, r7
 8009702:	bd80      	pop	{r7, pc}
 8009704:	0800bfa4 	.word	0x0800bfa4
 8009708:	200000ea 	.word	0x200000ea
 800970c:	200001ac 	.word	0x200001ac
 8009710:	200001d0 	.word	0x200001d0
 8009714:	20000218 	.word	0x20000218
 8009718:	200001f4 	.word	0x200001f4
 800971c:	200000e9 	.word	0x200000e9

08009720 <DRV_turnRight>:

static void DRV_turnRight(uint32_t p_speed)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b084      	sub	sp, #16
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	60fb      	str	r3, [r7, #12]

  LOG_debug("Turning right @%u", l_speed);
 800972c:	68fa      	ldr	r2, [r7, #12]
 800972e:	4919      	ldr	r1, [pc, #100]	; (8009794 <DRV_turnRight+0x74>)
 8009730:	2000      	movs	r0, #0
 8009732:	f000 fa43 	bl	8009bbc <LOG_log>

  g_DRV_isActive = true;
 8009736:	4b18      	ldr	r3, [pc, #96]	; (8009798 <DRV_turnRight+0x78>)
 8009738:	2201      	movs	r2, #1
 800973a:	701a      	strb	r2, [r3, #0]

  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_BACKWARD);
 800973c:	2102      	movs	r1, #2
 800973e:	4817      	ldr	r0, [pc, #92]	; (800979c <DRV_turnRight+0x7c>)
 8009740:	f000 fb48 	bl	8009dd4 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorFrontLeft , MTR_DIRECTION_FORWARD );
 8009744:	2101      	movs	r1, #1
 8009746:	4816      	ldr	r0, [pc, #88]	; (80097a0 <DRV_turnRight+0x80>)
 8009748:	f000 fb44 	bl	8009dd4 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight , MTR_DIRECTION_BACKWARD);
 800974c:	2102      	movs	r1, #2
 800974e:	4815      	ldr	r0, [pc, #84]	; (80097a4 <DRV_turnRight+0x84>)
 8009750:	f000 fb40 	bl	8009dd4 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_FORWARD );
 8009754:	2101      	movs	r1, #1
 8009756:	4814      	ldr	r0, [pc, #80]	; (80097a8 <DRV_turnRight+0x88>)
 8009758:	f000 fb3c 	bl	8009dd4 <MTR_setDirection>

  if (g_DRV_areMotorsOn == false)
 800975c:	4b13      	ldr	r3, [pc, #76]	; (80097ac <DRV_turnRight+0x8c>)
 800975e:	781b      	ldrb	r3, [r3, #0]
 8009760:	f083 0301 	eor.w	r3, r3, #1
 8009764:	b2db      	uxtb	r3, r3
 8009766:	2b00      	cmp	r3, #0
 8009768:	d110      	bne.n	800978c <DRV_turnRight+0x6c>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 800976a:	68f9      	ldr	r1, [r7, #12]
 800976c:	480b      	ldr	r0, [pc, #44]	; (800979c <DRV_turnRight+0x7c>)
 800976e:	f000 fb9d 	bl	8009eac <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 8009772:	68f9      	ldr	r1, [r7, #12]
 8009774:	480a      	ldr	r0, [pc, #40]	; (80097a0 <DRV_turnRight+0x80>)
 8009776:	f000 fb99 	bl	8009eac <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 800977a:	68f9      	ldr	r1, [r7, #12]
 800977c:	4809      	ldr	r0, [pc, #36]	; (80097a4 <DRV_turnRight+0x84>)
 800977e:	f000 fb95 	bl	8009eac <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 8009782:	68f9      	ldr	r1, [r7, #12]
 8009784:	4808      	ldr	r0, [pc, #32]	; (80097a8 <DRV_turnRight+0x88>)
 8009786:	f000 fb91 	bl	8009eac <MTR_setSpeed>
  }

  return;
 800978a:	bf00      	nop
 800978c:	bf00      	nop
}
 800978e:	3710      	adds	r7, #16
 8009790:	46bd      	mov	sp, r7
 8009792:	bd80      	pop	{r7, pc}
 8009794:	0800bfb8 	.word	0x0800bfb8
 8009798:	200000ea 	.word	0x200000ea
 800979c:	200001ac 	.word	0x200001ac
 80097a0:	200001d0 	.word	0x200001d0
 80097a4:	20000218 	.word	0x20000218
 80097a8:	200001f4 	.word	0x200001f4
 80097ac:	200000e9 	.word	0x200000e9

080097b0 <DRV_translateLeft>:

static void DRV_translateLeft(uint32_t p_speed)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b084      	sub	sp, #16
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	60fb      	str	r3, [r7, #12]

  LOG_debug("Translating left @%u", l_speed);
 80097bc:	68fa      	ldr	r2, [r7, #12]
 80097be:	4919      	ldr	r1, [pc, #100]	; (8009824 <DRV_translateLeft+0x74>)
 80097c0:	2000      	movs	r0, #0
 80097c2:	f000 f9fb 	bl	8009bbc <LOG_log>

  g_DRV_isActive = true;
 80097c6:	4b18      	ldr	r3, [pc, #96]	; (8009828 <DRV_translateLeft+0x78>)
 80097c8:	2201      	movs	r2, #1
 80097ca:	701a      	strb	r2, [r3, #0]

  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_FORWARD );
 80097cc:	2101      	movs	r1, #1
 80097ce:	4817      	ldr	r0, [pc, #92]	; (800982c <DRV_translateLeft+0x7c>)
 80097d0:	f000 fb00 	bl	8009dd4 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorFrontLeft , MTR_DIRECTION_BACKWARD);
 80097d4:	2102      	movs	r1, #2
 80097d6:	4816      	ldr	r0, [pc, #88]	; (8009830 <DRV_translateLeft+0x80>)
 80097d8:	f000 fafc 	bl	8009dd4 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight , MTR_DIRECTION_BACKWARD);
 80097dc:	2102      	movs	r1, #2
 80097de:	4815      	ldr	r0, [pc, #84]	; (8009834 <DRV_translateLeft+0x84>)
 80097e0:	f000 faf8 	bl	8009dd4 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_FORWARD );
 80097e4:	2101      	movs	r1, #1
 80097e6:	4814      	ldr	r0, [pc, #80]	; (8009838 <DRV_translateLeft+0x88>)
 80097e8:	f000 faf4 	bl	8009dd4 <MTR_setDirection>

  if (g_DRV_areMotorsOn == false)
 80097ec:	4b13      	ldr	r3, [pc, #76]	; (800983c <DRV_translateLeft+0x8c>)
 80097ee:	781b      	ldrb	r3, [r3, #0]
 80097f0:	f083 0301 	eor.w	r3, r3, #1
 80097f4:	b2db      	uxtb	r3, r3
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d110      	bne.n	800981c <DRV_translateLeft+0x6c>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 80097fa:	68f9      	ldr	r1, [r7, #12]
 80097fc:	480b      	ldr	r0, [pc, #44]	; (800982c <DRV_translateLeft+0x7c>)
 80097fe:	f000 fb55 	bl	8009eac <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 8009802:	68f9      	ldr	r1, [r7, #12]
 8009804:	480a      	ldr	r0, [pc, #40]	; (8009830 <DRV_translateLeft+0x80>)
 8009806:	f000 fb51 	bl	8009eac <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 800980a:	68f9      	ldr	r1, [r7, #12]
 800980c:	4809      	ldr	r0, [pc, #36]	; (8009834 <DRV_translateLeft+0x84>)
 800980e:	f000 fb4d 	bl	8009eac <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 8009812:	68f9      	ldr	r1, [r7, #12]
 8009814:	4808      	ldr	r0, [pc, #32]	; (8009838 <DRV_translateLeft+0x88>)
 8009816:	f000 fb49 	bl	8009eac <MTR_setSpeed>
  }

  return;
 800981a:	bf00      	nop
 800981c:	bf00      	nop
}
 800981e:	3710      	adds	r7, #16
 8009820:	46bd      	mov	sp, r7
 8009822:	bd80      	pop	{r7, pc}
 8009824:	0800bfcc 	.word	0x0800bfcc
 8009828:	200000ea 	.word	0x200000ea
 800982c:	200001ac 	.word	0x200001ac
 8009830:	200001d0 	.word	0x200001d0
 8009834:	20000218 	.word	0x20000218
 8009838:	200001f4 	.word	0x200001f4
 800983c:	200000e9 	.word	0x200000e9

08009840 <DRV_translateRight>:

static void DRV_translateRight(uint32_t p_speed)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b084      	sub	sp, #16
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	60fb      	str	r3, [r7, #12]

  LOG_debug("Translating right @%u", l_speed);
 800984c:	68fa      	ldr	r2, [r7, #12]
 800984e:	4919      	ldr	r1, [pc, #100]	; (80098b4 <DRV_translateRight+0x74>)
 8009850:	2000      	movs	r0, #0
 8009852:	f000 f9b3 	bl	8009bbc <LOG_log>

  g_DRV_isActive = true;
 8009856:	4b18      	ldr	r3, [pc, #96]	; (80098b8 <DRV_translateRight+0x78>)
 8009858:	2201      	movs	r2, #1
 800985a:	701a      	strb	r2, [r3, #0]

  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_BACKWARD);
 800985c:	2102      	movs	r1, #2
 800985e:	4817      	ldr	r0, [pc, #92]	; (80098bc <DRV_translateRight+0x7c>)
 8009860:	f000 fab8 	bl	8009dd4 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorFrontLeft , MTR_DIRECTION_FORWARD );
 8009864:	2101      	movs	r1, #1
 8009866:	4816      	ldr	r0, [pc, #88]	; (80098c0 <DRV_translateRight+0x80>)
 8009868:	f000 fab4 	bl	8009dd4 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight , MTR_DIRECTION_FORWARD );
 800986c:	2101      	movs	r1, #1
 800986e:	4815      	ldr	r0, [pc, #84]	; (80098c4 <DRV_translateRight+0x84>)
 8009870:	f000 fab0 	bl	8009dd4 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_BACKWARD);
 8009874:	2102      	movs	r1, #2
 8009876:	4814      	ldr	r0, [pc, #80]	; (80098c8 <DRV_translateRight+0x88>)
 8009878:	f000 faac 	bl	8009dd4 <MTR_setDirection>

  if (g_DRV_areMotorsOn == false)
 800987c:	4b13      	ldr	r3, [pc, #76]	; (80098cc <DRV_translateRight+0x8c>)
 800987e:	781b      	ldrb	r3, [r3, #0]
 8009880:	f083 0301 	eor.w	r3, r3, #1
 8009884:	b2db      	uxtb	r3, r3
 8009886:	2b00      	cmp	r3, #0
 8009888:	d110      	bne.n	80098ac <DRV_translateRight+0x6c>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 800988a:	68f9      	ldr	r1, [r7, #12]
 800988c:	480b      	ldr	r0, [pc, #44]	; (80098bc <DRV_translateRight+0x7c>)
 800988e:	f000 fb0d 	bl	8009eac <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 8009892:	68f9      	ldr	r1, [r7, #12]
 8009894:	480a      	ldr	r0, [pc, #40]	; (80098c0 <DRV_translateRight+0x80>)
 8009896:	f000 fb09 	bl	8009eac <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 800989a:	68f9      	ldr	r1, [r7, #12]
 800989c:	4809      	ldr	r0, [pc, #36]	; (80098c4 <DRV_translateRight+0x84>)
 800989e:	f000 fb05 	bl	8009eac <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 80098a2:	68f9      	ldr	r1, [r7, #12]
 80098a4:	4808      	ldr	r0, [pc, #32]	; (80098c8 <DRV_translateRight+0x88>)
 80098a6:	f000 fb01 	bl	8009eac <MTR_setSpeed>
  }

  return;
 80098aa:	bf00      	nop
 80098ac:	bf00      	nop
}
 80098ae:	3710      	adds	r7, #16
 80098b0:	46bd      	mov	sp, r7
 80098b2:	bd80      	pop	{r7, pc}
 80098b4:	0800bfe4 	.word	0x0800bfe4
 80098b8:	200000ea 	.word	0x200000ea
 80098bc:	200001ac 	.word	0x200001ac
 80098c0:	200001d0 	.word	0x200001d0
 80098c4:	20000218 	.word	0x20000218
 80098c8:	200001f4 	.word	0x200001f4
 80098cc:	200000e9 	.word	0x200000e9

080098d0 <ENC_init>:
#include "encoder.h"

#include "log.h"

void ENC_init(T_ENC_Handle *p_handle, char *p_name, bool p_invertOnUpdate, TIM_HandleTypeDef *p_encoderTimerHandle)
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b084      	sub	sp, #16
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	60f8      	str	r0, [r7, #12]
 80098d8:	60b9      	str	r1, [r7, #8]
 80098da:	603b      	str	r3, [r7, #0]
 80098dc:	4613      	mov	r3, r2
 80098de:	71fb      	strb	r3, [r7, #7]
  LOG_info("Initializing Encoder module for %s", p_name);
 80098e0:	68ba      	ldr	r2, [r7, #8]
 80098e2:	490a      	ldr	r1, [pc, #40]	; (800990c <ENC_init+0x3c>)
 80098e4:	2001      	movs	r0, #1
 80098e6:	f000 f969 	bl	8009bbc <LOG_log>

  p_handle->name           = p_name;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	68ba      	ldr	r2, [r7, #8]
 80098ee:	601a      	str	r2, [r3, #0]
  p_handle->invertOnUpdate = p_invertOnUpdate;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	79fa      	ldrb	r2, [r7, #7]
 80098f4:	719a      	strb	r2, [r3, #6]
  p_handle->timerHandle    = p_encoderTimerHandle;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	683a      	ldr	r2, [r7, #0]
 80098fa:	609a      	str	r2, [r3, #8]

  ENC_reset(p_handle);
 80098fc:	68f8      	ldr	r0, [r7, #12]
 80098fe:	f000 f807 	bl	8009910 <ENC_reset>

  return;
 8009902:	bf00      	nop
}
 8009904:	3710      	adds	r7, #16
 8009906:	46bd      	mov	sp, r7
 8009908:	bd80      	pop	{r7, pc}
 800990a:	bf00      	nop
 800990c:	0800bffc 	.word	0x0800bffc

08009910 <ENC_reset>:

void ENC_reset(T_ENC_Handle *p_handle)
{
 8009910:	b480      	push	{r7}
 8009912:	b083      	sub	sp, #12
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
  p_handle->value = 0;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2200      	movs	r2, #0
 800991c:	809a      	strh	r2, [r3, #4]

  return;
 800991e:	bf00      	nop
}
 8009920:	370c      	adds	r7, #12
 8009922:	46bd      	mov	sp, r7
 8009924:	bc80      	pop	{r7}
 8009926:	4770      	bx	lr

08009928 <ENC_update>:

void ENC_update(T_ENC_Handle *p_handle, int16_t p_value)
{
 8009928:	b480      	push	{r7}
 800992a:	b083      	sub	sp, #12
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
 8009930:	460b      	mov	r3, r1
 8009932:	807b      	strh	r3, [r7, #2]
  if (p_handle->invertOnUpdate == false)
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	799b      	ldrb	r3, [r3, #6]
 8009938:	f083 0301 	eor.w	r3, r3, #1
 800993c:	b2db      	uxtb	r3, r3
 800993e:	2b00      	cmp	r3, #0
 8009940:	d003      	beq.n	800994a <ENC_update+0x22>
  {
    p_handle->value = p_value;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	887a      	ldrh	r2, [r7, #2]
 8009946:	809a      	strh	r2, [r3, #4]
  else
  {
    p_handle->value = -p_value;
  }

  return;
 8009948:	e006      	b.n	8009958 <ENC_update+0x30>
    p_handle->value = -p_value;
 800994a:	887b      	ldrh	r3, [r7, #2]
 800994c:	425b      	negs	r3, r3
 800994e:	b29b      	uxth	r3, r3
 8009950:	b21a      	sxth	r2, r3
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	809a      	strh	r2, [r3, #4]
  return;
 8009956:	bf00      	nop
}
 8009958:	370c      	adds	r7, #12
 800995a:	46bd      	mov	sp, r7
 800995c:	bc80      	pop	{r7}
 800995e:	4770      	bx	lr

08009960 <ENC_getCount>:

int16_t ENC_getCount(T_ENC_Handle *p_handle)
{
 8009960:	b480      	push	{r7}
 8009962:	b083      	sub	sp, #12
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
  return p_handle->value;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
}
 800996e:	4618      	mov	r0, r3
 8009970:	370c      	adds	r7, #12
 8009972:	46bd      	mov	sp, r7
 8009974:	bc80      	pop	{r7}
 8009976:	4770      	bx	lr

08009978 <LED_setMode>:
#include "log.h"

static T_LED_MODE g_LED_mode = LED_MODE_BLINK_SLOW;

void LED_setMode(T_LED_MODE p_mode)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b082      	sub	sp, #8
 800997c:	af00      	add	r7, sp, #0
 800997e:	4603      	mov	r3, r0
 8009980:	71fb      	strb	r3, [r7, #7]
  if (p_mode != g_LED_mode)
 8009982:	4b1b      	ldr	r3, [pc, #108]	; (80099f0 <LED_setMode+0x78>)
 8009984:	781b      	ldrb	r3, [r3, #0]
 8009986:	79fa      	ldrb	r2, [r7, #7]
 8009988:	429a      	cmp	r2, r3
 800998a:	d02d      	beq.n	80099e8 <LED_setMode+0x70>
  {
    switch (p_mode)
 800998c:	79fb      	ldrb	r3, [r7, #7]
 800998e:	2b04      	cmp	r3, #4
 8009990:	d825      	bhi.n	80099de <LED_setMode+0x66>
 8009992:	a201      	add	r2, pc, #4	; (adr r2, 8009998 <LED_setMode+0x20>)
 8009994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009998:	080099ad 	.word	0x080099ad
 800999c:	080099b7 	.word	0x080099b7
 80099a0:	080099c1 	.word	0x080099c1
 80099a4:	080099cb 	.word	0x080099cb
 80099a8:	080099d5 	.word	0x080099d5
    {
      case LED_MODE_FORCED_OFF:
        LOG_info("Turning LED OFF");
 80099ac:	4911      	ldr	r1, [pc, #68]	; (80099f4 <LED_setMode+0x7c>)
 80099ae:	2001      	movs	r0, #1
 80099b0:	f000 f904 	bl	8009bbc <LOG_log>
        break;
 80099b4:	e014      	b.n	80099e0 <LED_setMode+0x68>

      case LED_MODE_FORCED_ON:
        LOG_info("Turning LED ON");
 80099b6:	4910      	ldr	r1, [pc, #64]	; (80099f8 <LED_setMode+0x80>)
 80099b8:	2001      	movs	r0, #1
 80099ba:	f000 f8ff 	bl	8009bbc <LOG_log>
        break;
 80099be:	e00f      	b.n	80099e0 <LED_setMode+0x68>

      case LED_MODE_BLINK_SLOW:
        LOG_info("Setting LED to blink slow");
 80099c0:	490e      	ldr	r1, [pc, #56]	; (80099fc <LED_setMode+0x84>)
 80099c2:	2001      	movs	r0, #1
 80099c4:	f000 f8fa 	bl	8009bbc <LOG_log>
        break;
 80099c8:	e00a      	b.n	80099e0 <LED_setMode+0x68>

      case LED_MODE_BLINK_MEDIUM:
        LOG_info("Setting LED to blink medium");
 80099ca:	490d      	ldr	r1, [pc, #52]	; (8009a00 <LED_setMode+0x88>)
 80099cc:	2001      	movs	r0, #1
 80099ce:	f000 f8f5 	bl	8009bbc <LOG_log>
        break;
 80099d2:	e005      	b.n	80099e0 <LED_setMode+0x68>

      case LED_MODE_BLINK_FAST:
        LOG_info("Setting LED to blink fast");
 80099d4:	490b      	ldr	r1, [pc, #44]	; (8009a04 <LED_setMode+0x8c>)
 80099d6:	2001      	movs	r0, #1
 80099d8:	f000 f8f0 	bl	8009bbc <LOG_log>
        break;
 80099dc:	e000      	b.n	80099e0 <LED_setMode+0x68>

      default:
        ; /* Nothing to do */
        break;
 80099de:	bf00      	nop
    }

    g_LED_mode = p_mode;
 80099e0:	4a03      	ldr	r2, [pc, #12]	; (80099f0 <LED_setMode+0x78>)
 80099e2:	79fb      	ldrb	r3, [r7, #7]
 80099e4:	7013      	strb	r3, [r2, #0]
  else
  {
    ; /* Nothong to do */
  }

  return;
 80099e6:	bf00      	nop
 80099e8:	bf00      	nop
}
 80099ea:	3708      	adds	r7, #8
 80099ec:	46bd      	mov	sp, r7
 80099ee:	bd80      	pop	{r7, pc}
 80099f0:	20000009 	.word	0x20000009
 80099f4:	0800c020 	.word	0x0800c020
 80099f8:	0800c030 	.word	0x0800c030
 80099fc:	0800c040 	.word	0x0800c040
 8009a00:	0800c05c 	.word	0x0800c05c
 8009a04:	0800c078 	.word	0x0800c078

08009a08 <LED_update>:
{
  return g_LED_mode;
}

void LED_update(void)
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	af00      	add	r7, sp, #0
  static uint32_t l_blinkCounter = 0;

  switch (g_LED_mode)
 8009a0c:	4b2a      	ldr	r3, [pc, #168]	; (8009ab8 <LED_update+0xb0>)
 8009a0e:	781b      	ldrb	r3, [r3, #0]
 8009a10:	2b04      	cmp	r3, #4
 8009a12:	d849      	bhi.n	8009aa8 <LED_update+0xa0>
 8009a14:	a201      	add	r2, pc, #4	; (adr r2, 8009a1c <LED_update+0x14>)
 8009a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a1a:	bf00      	nop
 8009a1c:	08009a31 	.word	0x08009a31
 8009a20:	08009a3f 	.word	0x08009a3f
 8009a24:	08009a4d 	.word	0x08009a4d
 8009a28:	08009a7b 	.word	0x08009a7b
 8009a2c:	08009a9d 	.word	0x08009a9d
  {
    case LED_MODE_FORCED_OFF:
      HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_SET);
 8009a30:	2201      	movs	r2, #1
 8009a32:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009a36:	4821      	ldr	r0, [pc, #132]	; (8009abc <LED_update+0xb4>)
 8009a38:	f7f9 fe8e 	bl	8003758 <HAL_GPIO_WritePin>
      break;
 8009a3c:	e039      	b.n	8009ab2 <LED_update+0xaa>

    case LED_MODE_FORCED_ON:
      HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 8009a3e:	2200      	movs	r2, #0
 8009a40:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009a44:	481d      	ldr	r0, [pc, #116]	; (8009abc <LED_update+0xb4>)
 8009a46:	f7f9 fe87 	bl	8003758 <HAL_GPIO_WritePin>
      break;
 8009a4a:	e032      	b.n	8009ab2 <LED_update+0xaa>

    case LED_MODE_BLINK_SLOW:
      l_blinkCounter++;
 8009a4c:	4b1c      	ldr	r3, [pc, #112]	; (8009ac0 <LED_update+0xb8>)
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	3301      	adds	r3, #1
 8009a52:	4a1b      	ldr	r2, [pc, #108]	; (8009ac0 <LED_update+0xb8>)
 8009a54:	6013      	str	r3, [r2, #0]
      if (l_blinkCounter % 5 == 0)
 8009a56:	4b1a      	ldr	r3, [pc, #104]	; (8009ac0 <LED_update+0xb8>)
 8009a58:	6819      	ldr	r1, [r3, #0]
 8009a5a:	4b1a      	ldr	r3, [pc, #104]	; (8009ac4 <LED_update+0xbc>)
 8009a5c:	fba3 2301 	umull	r2, r3, r3, r1
 8009a60:	089a      	lsrs	r2, r3, #2
 8009a62:	4613      	mov	r3, r2
 8009a64:	009b      	lsls	r3, r3, #2
 8009a66:	4413      	add	r3, r2
 8009a68:	1aca      	subs	r2, r1, r3
 8009a6a:	2a00      	cmp	r2, #0
 8009a6c:	d11e      	bne.n	8009aac <LED_update+0xa4>
      {
        HAL_GPIO_TogglePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
 8009a6e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009a72:	4812      	ldr	r0, [pc, #72]	; (8009abc <LED_update+0xb4>)
 8009a74:	f7f9 fea2 	bl	80037bc <HAL_GPIO_TogglePin>
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 8009a78:	e018      	b.n	8009aac <LED_update+0xa4>

    case LED_MODE_BLINK_MEDIUM:
      l_blinkCounter++;
 8009a7a:	4b11      	ldr	r3, [pc, #68]	; (8009ac0 <LED_update+0xb8>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	3301      	adds	r3, #1
 8009a80:	4a0f      	ldr	r2, [pc, #60]	; (8009ac0 <LED_update+0xb8>)
 8009a82:	6013      	str	r3, [r2, #0]
      if (l_blinkCounter % 2 == 0)
 8009a84:	4b0e      	ldr	r3, [pc, #56]	; (8009ac0 <LED_update+0xb8>)
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	f003 0301 	and.w	r3, r3, #1
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d10f      	bne.n	8009ab0 <LED_update+0xa8>
      {
        HAL_GPIO_TogglePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
 8009a90:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009a94:	4809      	ldr	r0, [pc, #36]	; (8009abc <LED_update+0xb4>)
 8009a96:	f7f9 fe91 	bl	80037bc <HAL_GPIO_TogglePin>
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 8009a9a:	e009      	b.n	8009ab0 <LED_update+0xa8>

    case LED_MODE_BLINK_FAST:
      HAL_GPIO_TogglePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
 8009a9c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009aa0:	4806      	ldr	r0, [pc, #24]	; (8009abc <LED_update+0xb4>)
 8009aa2:	f7f9 fe8b 	bl	80037bc <HAL_GPIO_TogglePin>
      break;
 8009aa6:	e004      	b.n	8009ab2 <LED_update+0xaa>

    default:
      ; /* Nothing to do */
      break;
 8009aa8:	bf00      	nop
 8009aaa:	e002      	b.n	8009ab2 <LED_update+0xaa>
      break;
 8009aac:	bf00      	nop
 8009aae:	e000      	b.n	8009ab2 <LED_update+0xaa>
      break;
 8009ab0:	bf00      	nop
  }

  return;
 8009ab2:	bf00      	nop
}
 8009ab4:	bd80      	pop	{r7, pc}
 8009ab6:	bf00      	nop
 8009ab8:	20000009 	.word	0x20000009
 8009abc:	40011000 	.word	0x40011000
 8009ac0:	2000026c 	.word	0x2000026c
 8009ac4:	cccccccd 	.word	0xcccccccd

08009ac8 <LOG_init>:
{
  "DEBUG", "INFO", "WARNING", "ERROR"
};

void LOG_init(RTC_HandleTypeDef *p_rctHandle)
{
 8009ac8:	b480      	push	{r7}
 8009aca:	b083      	sub	sp, #12
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
  g_LOG_rtcHandle = p_rctHandle;
 8009ad0:	4a03      	ldr	r2, [pc, #12]	; (8009ae0 <LOG_init+0x18>)
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6013      	str	r3, [r2, #0]

  return;
 8009ad6:	bf00      	nop
}
 8009ad8:	370c      	adds	r7, #12
 8009ada:	46bd      	mov	sp, r7
 8009adc:	bc80      	pop	{r7}
 8009ade:	4770      	bx	lr
 8009ae0:	20000274 	.word	0x20000274

08009ae4 <LOG_turnOn>:

void LOG_turnOn(void)
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	af00      	add	r7, sp, #0
  if (g_LOG_isOn == false)
 8009ae8:	4b08      	ldr	r3, [pc, #32]	; (8009b0c <LOG_turnOn+0x28>)
 8009aea:	781b      	ldrb	r3, [r3, #0]
 8009aec:	f083 0301 	eor.w	r3, r3, #1
 8009af0:	b2db      	uxtb	r3, r3
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d007      	beq.n	8009b06 <LOG_turnOn+0x22>
  {
    g_LOG_isOn = true;
 8009af6:	4b05      	ldr	r3, [pc, #20]	; (8009b0c <LOG_turnOn+0x28>)
 8009af8:	2201      	movs	r2, #1
 8009afa:	701a      	strb	r2, [r3, #0]

    LOG_info("Turning LOG ON");
 8009afc:	4904      	ldr	r1, [pc, #16]	; (8009b10 <LOG_turnOn+0x2c>)
 8009afe:	2001      	movs	r0, #1
 8009b00:	f000 f85c 	bl	8009bbc <LOG_log>
  else
  {
    ; /* Nothing to do */
  }

  return;
 8009b04:	bf00      	nop
 8009b06:	bf00      	nop
}
 8009b08:	bd80      	pop	{r7, pc}
 8009b0a:	bf00      	nop
 8009b0c:	20000270 	.word	0x20000270
 8009b10:	0800c0b4 	.word	0x0800c0b4

08009b14 <LOG_turnOff>:

void LOG_turnOff(void)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	af00      	add	r7, sp, #0
  if (g_LOG_isOn == true)
 8009b18:	4b06      	ldr	r3, [pc, #24]	; (8009b34 <LOG_turnOff+0x20>)
 8009b1a:	781b      	ldrb	r3, [r3, #0]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d007      	beq.n	8009b30 <LOG_turnOff+0x1c>
  {
    LOG_info("Turning LOG OFF");
 8009b20:	4905      	ldr	r1, [pc, #20]	; (8009b38 <LOG_turnOff+0x24>)
 8009b22:	2001      	movs	r0, #1
 8009b24:	f000 f84a 	bl	8009bbc <LOG_log>

    g_LOG_isOn = false;
 8009b28:	4b02      	ldr	r3, [pc, #8]	; (8009b34 <LOG_turnOff+0x20>)
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	701a      	strb	r2, [r3, #0]
  else
  {
    ; /* Nothing to do */
  }

  return;
 8009b2e:	bf00      	nop
 8009b30:	bf00      	nop
}
 8009b32:	bd80      	pop	{r7, pc}
 8009b34:	20000270 	.word	0x20000270
 8009b38:	0800c0c4 	.word	0x0800c0c4

08009b3c <LOG_setLevel>:

void LOG_setLevel(T_LOG_LEVEL p_level)
{
 8009b3c:	b480      	push	{r7}
 8009b3e:	b083      	sub	sp, #12
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	4603      	mov	r3, r0
 8009b44:	71fb      	strb	r3, [r7, #7]
  g_LOG_level = p_level;
 8009b46:	4a04      	ldr	r2, [pc, #16]	; (8009b58 <LOG_setLevel+0x1c>)
 8009b48:	79fb      	ldrb	r3, [r7, #7]
 8009b4a:	7013      	strb	r3, [r2, #0]

  return;
 8009b4c:	bf00      	nop
}
 8009b4e:	370c      	adds	r7, #12
 8009b50:	46bd      	mov	sp, r7
 8009b52:	bc80      	pop	{r7}
 8009b54:	4770      	bx	lr
 8009b56:	bf00      	nop
 8009b58:	20000271 	.word	0x20000271

08009b5c <LOG_increaseLevel>:

void LOG_increaseLevel(void)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	af00      	add	r7, sp, #0
  /* Display more detailed logs */
  if (g_LOG_level > LOG_LEVEL_DEBUG)
 8009b60:	4b08      	ldr	r3, [pc, #32]	; (8009b84 <LOG_increaseLevel+0x28>)
 8009b62:	781b      	ldrb	r3, [r3, #0]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d00a      	beq.n	8009b7e <LOG_increaseLevel+0x22>
  {
    LOG_info("Increasing LOG level");
 8009b68:	4907      	ldr	r1, [pc, #28]	; (8009b88 <LOG_increaseLevel+0x2c>)
 8009b6a:	2001      	movs	r0, #1
 8009b6c:	f000 f826 	bl	8009bbc <LOG_log>

    g_LOG_level--;
 8009b70:	4b04      	ldr	r3, [pc, #16]	; (8009b84 <LOG_increaseLevel+0x28>)
 8009b72:	781b      	ldrb	r3, [r3, #0]
 8009b74:	3b01      	subs	r3, #1
 8009b76:	b2da      	uxtb	r2, r3
 8009b78:	4b02      	ldr	r3, [pc, #8]	; (8009b84 <LOG_increaseLevel+0x28>)
 8009b7a:	701a      	strb	r2, [r3, #0]
  else
  {
    ; /* Nothing to do */
  }

  return;
 8009b7c:	bf00      	nop
 8009b7e:	bf00      	nop
}
 8009b80:	bd80      	pop	{r7, pc}
 8009b82:	bf00      	nop
 8009b84:	20000271 	.word	0x20000271
 8009b88:	0800c0d4 	.word	0x0800c0d4

08009b8c <LOG_decreaseLevel>:

void LOG_decreaseLevel(void)
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	af00      	add	r7, sp, #0
  /* Display less detailed logs */
  if (g_LOG_level < LOG_LEVEL_ERROR)
 8009b90:	4b08      	ldr	r3, [pc, #32]	; (8009bb4 <LOG_decreaseLevel+0x28>)
 8009b92:	781b      	ldrb	r3, [r3, #0]
 8009b94:	2b02      	cmp	r3, #2
 8009b96:	d80a      	bhi.n	8009bae <LOG_decreaseLevel+0x22>
  {
    LOG_info("Decreasing LOG level");
 8009b98:	4907      	ldr	r1, [pc, #28]	; (8009bb8 <LOG_decreaseLevel+0x2c>)
 8009b9a:	2001      	movs	r0, #1
 8009b9c:	f000 f80e 	bl	8009bbc <LOG_log>

    g_LOG_level++;
 8009ba0:	4b04      	ldr	r3, [pc, #16]	; (8009bb4 <LOG_decreaseLevel+0x28>)
 8009ba2:	781b      	ldrb	r3, [r3, #0]
 8009ba4:	3301      	adds	r3, #1
 8009ba6:	b2da      	uxtb	r2, r3
 8009ba8:	4b02      	ldr	r3, [pc, #8]	; (8009bb4 <LOG_decreaseLevel+0x28>)
 8009baa:	701a      	strb	r2, [r3, #0]
  else
  {
    ; /* Nothing to do */
  }

  return;
 8009bac:	bf00      	nop
 8009bae:	bf00      	nop
}
 8009bb0:	bd80      	pop	{r7, pc}
 8009bb2:	bf00      	nop
 8009bb4:	20000271 	.word	0x20000271
 8009bb8:	0800c0ec 	.word	0x0800c0ec

08009bbc <LOG_log>:

void LOG_log(T_LOG_LEVEL p_level, const char *p_format, ...)
{
 8009bbc:	b40e      	push	{r1, r2, r3}
 8009bbe:	b580      	push	{r7, lr}
 8009bc0:	b089      	sub	sp, #36	; 0x24
 8009bc2:	af02      	add	r7, sp, #8
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef l_halReturnCode;
  va_list           l_argumentsList;
  RTC_TimeTypeDef   l_time;
  RTC_DateTypeDef   l_date;

  if ((g_LOG_isOn == true) && (p_level >= g_LOG_level))
 8009bc8:	4b26      	ldr	r3, [pc, #152]	; (8009c64 <LOG_log+0xa8>)
 8009bca:	781b      	ldrb	r3, [r3, #0]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d041      	beq.n	8009c54 <LOG_log+0x98>
 8009bd0:	4b25      	ldr	r3, [pc, #148]	; (8009c68 <LOG_log+0xac>)
 8009bd2:	781b      	ldrb	r3, [r3, #0]
 8009bd4:	79fa      	ldrb	r2, [r7, #7]
 8009bd6:	429a      	cmp	r2, r3
 8009bd8:	d33c      	bcc.n	8009c54 <LOG_log+0x98>
  {
    l_halReturnCode = HAL_RTC_GetTime(g_LOG_rtcHandle, &l_time, RTC_FORMAT_BCD);
 8009bda:	4b24      	ldr	r3, [pc, #144]	; (8009c6c <LOG_log+0xb0>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	f107 010c 	add.w	r1, r7, #12
 8009be2:	2201      	movs	r2, #1
 8009be4:	4618      	mov	r0, r3
 8009be6:	f7fa ff99 	bl	8004b1c <HAL_RTC_GetTime>
 8009bea:	4603      	mov	r3, r0
 8009bec:	75fb      	strb	r3, [r7, #23]

    if (l_halReturnCode != HAL_OK)
 8009bee:	7dfb      	ldrb	r3, [r7, #23]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d004      	beq.n	8009bfe <LOG_log+0x42>
    {
      /* As this method is for logging/debug, just reset time in case of failure */
      UTI_resetRtcTime(&l_time);
 8009bf4:	f107 030c 	add.w	r3, r7, #12
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	f000 fbd6 	bl	800a3aa <UTI_resetRtcTime>
    else
    {
      ; /* Nothing to do */
    }

    l_halReturnCode = HAL_RTC_GetDate(g_LOG_rtcHandle, &l_date, RTC_FORMAT_BCD);
 8009bfe:	4b1b      	ldr	r3, [pc, #108]	; (8009c6c <LOG_log+0xb0>)
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	f107 0108 	add.w	r1, r7, #8
 8009c06:	2201      	movs	r2, #1
 8009c08:	4618      	mov	r0, r3
 8009c0a:	f7fb f98b 	bl	8004f24 <HAL_RTC_GetDate>
 8009c0e:	4603      	mov	r3, r0
 8009c10:	75fb      	strb	r3, [r7, #23]

    if (l_halReturnCode != HAL_OK)
 8009c12:	7dfb      	ldrb	r3, [r7, #23]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d004      	beq.n	8009c22 <LOG_log+0x66>
    {
      /* As this method is for logging/debug, just reset date in case of failure */
      UTI_resetRtcDate(&l_date);
 8009c18:	f107 0308 	add.w	r3, r7, #8
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	f000 fbaf 	bl	800a380 <UTI_resetRtcDate>
    else
    {
      ; /* Nothing to do */
    }

    va_start(l_argumentsList, p_format);
 8009c22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009c26:	613b      	str	r3, [r7, #16]

    (void)printf("%-7s - %02x:%02x:%02x - ", g_LOG_levelStrings[p_level], l_time.Hours, l_time.Minutes, l_time.Seconds);
 8009c28:	79fb      	ldrb	r3, [r7, #7]
 8009c2a:	4a11      	ldr	r2, [pc, #68]	; (8009c70 <LOG_log+0xb4>)
 8009c2c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009c30:	7b3b      	ldrb	r3, [r7, #12]
 8009c32:	461a      	mov	r2, r3
 8009c34:	7b7b      	ldrb	r3, [r7, #13]
 8009c36:	4618      	mov	r0, r3
 8009c38:	7bbb      	ldrb	r3, [r7, #14]
 8009c3a:	9300      	str	r3, [sp, #0]
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	480d      	ldr	r0, [pc, #52]	; (8009c74 <LOG_log+0xb8>)
 8009c40:	f000 fcf2 	bl	800a628 <iprintf>
    (void)vprintf(p_format, l_argumentsList);
 8009c44:	6939      	ldr	r1, [r7, #16]
 8009c46:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009c48:	f000 fda0 	bl	800a78c <viprintf>
    (void)printf("\r\n");
 8009c4c:	480a      	ldr	r0, [pc, #40]	; (8009c78 <LOG_log+0xbc>)
 8009c4e:	f000 fd71 	bl	800a734 <puts>
  else
  {
    ; /* Nothing to do */
  }

  return;
 8009c52:	bf00      	nop
 8009c54:	bf00      	nop
}
 8009c56:	371c      	adds	r7, #28
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009c5e:	b003      	add	sp, #12
 8009c60:	4770      	bx	lr
 8009c62:	bf00      	nop
 8009c64:	20000270 	.word	0x20000270
 8009c68:	20000271 	.word	0x20000271
 8009c6c:	20000274 	.word	0x20000274
 8009c70:	2000000c 	.word	0x2000000c
 8009c74:	0800c104 	.word	0x0800c104
 8009c78:	0800c120 	.word	0x0800c120

08009c7c <MAS_init>:
static T_SFO_data          g_MAS_data;
static uint32_t            g_MAS_dataSize;
static bool                g_MAS_isDataComplete;

void MAS_init(UART_HandleTypeDef *p_uartHandle)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b082      	sub	sp, #8
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
  LOG_info("Initializing master connection");
 8009c84:	490d      	ldr	r1, [pc, #52]	; (8009cbc <MAS_init+0x40>)
 8009c86:	2001      	movs	r0, #1
 8009c88:	f7ff ff98 	bl	8009bbc <LOG_log>

  g_MAS_uartHandle     = p_uartHandle;
 8009c8c:	4a0c      	ldr	r2, [pc, #48]	; (8009cc0 <MAS_init+0x44>)
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	6013      	str	r3, [r2, #0]
  g_MAS_dataSize       = 0;
 8009c92:	4b0c      	ldr	r3, [pc, #48]	; (8009cc4 <MAS_init+0x48>)
 8009c94:	2200      	movs	r2, #0
 8009c96:	601a      	str	r2, [r3, #0]
  g_MAS_isDataComplete = false;
 8009c98:	4b0b      	ldr	r3, [pc, #44]	; (8009cc8 <MAS_init+0x4c>)
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	701a      	strb	r2, [r3, #0]

  SFO_dataInit(&g_MAS_data);
 8009c9e:	480b      	ldr	r0, [pc, #44]	; (8009ccc <MAS_init+0x50>)
 8009ca0:	f000 fa32 	bl	800a108 <SFO_dataInit>

  HAL_UART_Receive_IT(g_MAS_uartHandle, &g_MAS_datum, 1);
 8009ca4:	4b06      	ldr	r3, [pc, #24]	; (8009cc0 <MAS_init+0x44>)
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	2201      	movs	r2, #1
 8009caa:	4909      	ldr	r1, [pc, #36]	; (8009cd0 <MAS_init+0x54>)
 8009cac:	4618      	mov	r0, r3
 8009cae:	f7fd ffdf 	bl	8007c70 <HAL_UART_Receive_IT>

  return;
 8009cb2:	bf00      	nop
}
 8009cb4:	3708      	adds	r7, #8
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	bd80      	pop	{r7, pc}
 8009cba:	bf00      	nop
 8009cbc:	0800c124 	.word	0x0800c124
 8009cc0:	20000278 	.word	0x20000278
 8009cc4:	20000290 	.word	0x20000290
 8009cc8:	20000294 	.word	0x20000294
 8009ccc:	20000280 	.word	0x20000280
 8009cd0:	2000027c 	.word	0x2000027c

08009cd4 <MAS_receiveData>:

void MAS_receiveData(void)
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	af00      	add	r7, sp, #0
  /* If previous command was not processed yet, drop datum, */
  /* which will lead to an error, showing a design issue... */
  if (g_MAS_isDataComplete == true)
 8009cd8:	4b0f      	ldr	r3, [pc, #60]	; (8009d18 <MAS_receiveData+0x44>)
 8009cda:	781b      	ldrb	r3, [r3, #0]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d112      	bne.n	8009d06 <MAS_receiveData+0x32>
  {
    ; /* Nothing to do */
  }
  else
  {
    if (g_MAS_datum == '\r')
 8009ce0:	4b0e      	ldr	r3, [pc, #56]	; (8009d1c <MAS_receiveData+0x48>)
 8009ce2:	781b      	ldrb	r3, [r3, #0]
 8009ce4:	2b0d      	cmp	r3, #13
 8009ce6:	d103      	bne.n	8009cf0 <MAS_receiveData+0x1c>
    {
      g_MAS_isDataComplete = true;
 8009ce8:	4b0b      	ldr	r3, [pc, #44]	; (8009d18 <MAS_receiveData+0x44>)
 8009cea:	2201      	movs	r2, #1
 8009cec:	701a      	strb	r2, [r3, #0]
 8009cee:	e00a      	b.n	8009d06 <MAS_receiveData+0x32>
    }
    else
    {
      g_MAS_data[g_MAS_dataSize] = g_MAS_datum;
 8009cf0:	4b0b      	ldr	r3, [pc, #44]	; (8009d20 <MAS_receiveData+0x4c>)
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	4a09      	ldr	r2, [pc, #36]	; (8009d1c <MAS_receiveData+0x48>)
 8009cf6:	7811      	ldrb	r1, [r2, #0]
 8009cf8:	4a0a      	ldr	r2, [pc, #40]	; (8009d24 <MAS_receiveData+0x50>)
 8009cfa:	54d1      	strb	r1, [r2, r3]
      g_MAS_dataSize++;
 8009cfc:	4b08      	ldr	r3, [pc, #32]	; (8009d20 <MAS_receiveData+0x4c>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	3301      	adds	r3, #1
 8009d02:	4a07      	ldr	r2, [pc, #28]	; (8009d20 <MAS_receiveData+0x4c>)
 8009d04:	6013      	str	r3, [r2, #0]
    }
  }

  HAL_UART_Receive_IT(g_MAS_uartHandle, &g_MAS_datum, 1);
 8009d06:	4b08      	ldr	r3, [pc, #32]	; (8009d28 <MAS_receiveData+0x54>)
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	2201      	movs	r2, #1
 8009d0c:	4903      	ldr	r1, [pc, #12]	; (8009d1c <MAS_receiveData+0x48>)
 8009d0e:	4618      	mov	r0, r3
 8009d10:	f7fd ffae 	bl	8007c70 <HAL_UART_Receive_IT>

  return;
 8009d14:	bf00      	nop
}
 8009d16:	bd80      	pop	{r7, pc}
 8009d18:	20000294 	.word	0x20000294
 8009d1c:	2000027c 	.word	0x2000027c
 8009d20:	20000290 	.word	0x20000290
 8009d24:	20000280 	.word	0x20000280
 8009d28:	20000278 	.word	0x20000278

08009d2c <MAS_updateFifo>:

void MAS_updateFifo(T_SFO_Context *p_fifo)
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b082      	sub	sp, #8
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
  if (g_MAS_isDataComplete == false)
 8009d34:	4b0c      	ldr	r3, [pc, #48]	; (8009d68 <MAS_updateFifo+0x3c>)
 8009d36:	781b      	ldrb	r3, [r3, #0]
 8009d38:	f083 0301 	eor.w	r3, r3, #1
 8009d3c:	b2db      	uxtb	r3, r3
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d10d      	bne.n	8009d5e <MAS_updateFifo+0x32>
  {
    ; /* Nothing to do */
  }
  else
  {
    SFO_push    (p_fifo, &g_MAS_data);
 8009d42:	490a      	ldr	r1, [pc, #40]	; (8009d6c <MAS_updateFifo+0x40>)
 8009d44:	6878      	ldr	r0, [r7, #4]
 8009d46:	f000 fa05 	bl	800a154 <SFO_push>
    SFO_dataInit(&g_MAS_data);
 8009d4a:	4808      	ldr	r0, [pc, #32]	; (8009d6c <MAS_updateFifo+0x40>)
 8009d4c:	f000 f9dc 	bl	800a108 <SFO_dataInit>

    g_MAS_dataSize       = 0;
 8009d50:	4b07      	ldr	r3, [pc, #28]	; (8009d70 <MAS_updateFifo+0x44>)
 8009d52:	2200      	movs	r2, #0
 8009d54:	601a      	str	r2, [r3, #0]
    g_MAS_isDataComplete = false;
 8009d56:	4b04      	ldr	r3, [pc, #16]	; (8009d68 <MAS_updateFifo+0x3c>)
 8009d58:	2200      	movs	r2, #0
 8009d5a:	701a      	strb	r2, [r3, #0]
  }

  return;
 8009d5c:	bf00      	nop
 8009d5e:	bf00      	nop
}
 8009d60:	3708      	adds	r7, #8
 8009d62:	46bd      	mov	sp, r7
 8009d64:	bd80      	pop	{r7, pc}
 8009d66:	bf00      	nop
 8009d68:	20000294 	.word	0x20000294
 8009d6c:	20000280 	.word	0x20000280
 8009d70:	20000290 	.word	0x20000290

08009d74 <MTR_init>:
              uint32_t           p_dirPin1,
              GPIO_TypeDef      *p_dirPin2Port,
              uint32_t           p_dirPin2,
              TIM_HandleTypeDef *p_pwmTimerHandle,
              uint32_t           p_pwmChannel)
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b084      	sub	sp, #16
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	60f8      	str	r0, [r7, #12]
 8009d7c:	60b9      	str	r1, [r7, #8]
 8009d7e:	607a      	str	r2, [r7, #4]
 8009d80:	603b      	str	r3, [r7, #0]
  LOG_info("Initializing Motor module for %s", p_name);
 8009d82:	68ba      	ldr	r2, [r7, #8]
 8009d84:	4912      	ldr	r1, [pc, #72]	; (8009dd0 <MTR_init+0x5c>)
 8009d86:	2001      	movs	r0, #1
 8009d88:	f7ff ff18 	bl	8009bbc <LOG_log>

  p_handle->name           = p_name;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	68ba      	ldr	r2, [r7, #8]
 8009d90:	601a      	str	r2, [r3, #0]
  p_handle->dirPin1Port    = p_dirPin1Port;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	687a      	ldr	r2, [r7, #4]
 8009d96:	605a      	str	r2, [r3, #4]
  p_handle->dirPin1        = p_dirPin1;
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	683a      	ldr	r2, [r7, #0]
 8009d9c:	609a      	str	r2, [r3, #8]
  p_handle->dirPin2Port    = p_dirPin2Port;
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	69ba      	ldr	r2, [r7, #24]
 8009da2:	60da      	str	r2, [r3, #12]
  p_handle->dirPin2        = p_dirPin2;
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	69fa      	ldr	r2, [r7, #28]
 8009da8:	611a      	str	r2, [r3, #16]
  p_handle->pwmTimerHandle = p_pwmTimerHandle;
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	6a3a      	ldr	r2, [r7, #32]
 8009dae:	61da      	str	r2, [r3, #28]
  p_handle->pwmChannel     = p_pwmChannel;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009db4:	621a      	str	r2, [r3, #32]

  MTR_setDirection(p_handle, MTR_DIRECTION_STOP);
 8009db6:	2100      	movs	r1, #0
 8009db8:	68f8      	ldr	r0, [r7, #12]
 8009dba:	f000 f80b 	bl	8009dd4 <MTR_setDirection>
  MTR_setSpeed    (p_handle, 0                 );
 8009dbe:	2100      	movs	r1, #0
 8009dc0:	68f8      	ldr	r0, [r7, #12]
 8009dc2:	f000 f873 	bl	8009eac <MTR_setSpeed>

  return;
 8009dc6:	bf00      	nop
}
 8009dc8:	3710      	adds	r7, #16
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}
 8009dce:	bf00      	nop
 8009dd0:	0800c174 	.word	0x0800c174

08009dd4 <MTR_setDirection>:

void MTR_setDirection(T_MTR_Handle *p_handle, T_MTR_DIRECTION p_direction)
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b082      	sub	sp, #8
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
 8009ddc:	460b      	mov	r3, r1
 8009dde:	70fb      	strb	r3, [r7, #3]
  if (p_direction == p_handle->direction)
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	7d1b      	ldrb	r3, [r3, #20]
 8009de4:	78fa      	ldrb	r2, [r7, #3]
 8009de6:	429a      	cmp	r2, r3
 8009de8:	d056      	beq.n	8009e98 <MTR_setDirection+0xc4>
  {
    ; /* Nothing to do */
  }
  else
  {
    if (p_direction == MTR_DIRECTION_STOP)
 8009dea:	78fb      	ldrb	r3, [r7, #3]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d119      	bne.n	8009e24 <MTR_setDirection+0x50>
    {
      LOG_debug("%s motor STOP", p_handle->name);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	461a      	mov	r2, r3
 8009df6:	492a      	ldr	r1, [pc, #168]	; (8009ea0 <MTR_setDirection+0xcc>)
 8009df8:	2000      	movs	r0, #0
 8009dfa:	f7ff fedf 	bl	8009bbc <LOG_log>

      HAL_GPIO_WritePin(p_handle->dirPin1Port, p_handle->dirPin1, GPIO_PIN_RESET);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	6858      	ldr	r0, [r3, #4]
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	689b      	ldr	r3, [r3, #8]
 8009e06:	b29b      	uxth	r3, r3
 8009e08:	2200      	movs	r2, #0
 8009e0a:	4619      	mov	r1, r3
 8009e0c:	f7f9 fca4 	bl	8003758 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(p_handle->dirPin2Port, p_handle->dirPin2, GPIO_PIN_RESET);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	68d8      	ldr	r0, [r3, #12]
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	691b      	ldr	r3, [r3, #16]
 8009e18:	b29b      	uxth	r3, r3
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	4619      	mov	r1, r3
 8009e1e:	f7f9 fc9b 	bl	8003758 <HAL_GPIO_WritePin>
 8009e22:	e035      	b.n	8009e90 <MTR_setDirection+0xbc>
    }
    else if (p_direction == MTR_DIRECTION_FORWARD)
 8009e24:	78fb      	ldrb	r3, [r7, #3]
 8009e26:	2b01      	cmp	r3, #1
 8009e28:	d119      	bne.n	8009e5e <MTR_setDirection+0x8a>
    {
      LOG_debug("%s motor go FORWARD", p_handle->name);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	461a      	mov	r2, r3
 8009e30:	491c      	ldr	r1, [pc, #112]	; (8009ea4 <MTR_setDirection+0xd0>)
 8009e32:	2000      	movs	r0, #0
 8009e34:	f7ff fec2 	bl	8009bbc <LOG_log>

      HAL_GPIO_WritePin(p_handle->dirPin1Port, p_handle->dirPin1, GPIO_PIN_RESET);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	6858      	ldr	r0, [r3, #4]
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	689b      	ldr	r3, [r3, #8]
 8009e40:	b29b      	uxth	r3, r3
 8009e42:	2200      	movs	r2, #0
 8009e44:	4619      	mov	r1, r3
 8009e46:	f7f9 fc87 	bl	8003758 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(p_handle->dirPin2Port, p_handle->dirPin2, GPIO_PIN_SET  );
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	68d8      	ldr	r0, [r3, #12]
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	691b      	ldr	r3, [r3, #16]
 8009e52:	b29b      	uxth	r3, r3
 8009e54:	2201      	movs	r2, #1
 8009e56:	4619      	mov	r1, r3
 8009e58:	f7f9 fc7e 	bl	8003758 <HAL_GPIO_WritePin>
 8009e5c:	e018      	b.n	8009e90 <MTR_setDirection+0xbc>
    }
    else
    {
      LOG_debug("%s motor go BACKWARD", p_handle->name);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	461a      	mov	r2, r3
 8009e64:	4910      	ldr	r1, [pc, #64]	; (8009ea8 <MTR_setDirection+0xd4>)
 8009e66:	2000      	movs	r0, #0
 8009e68:	f7ff fea8 	bl	8009bbc <LOG_log>

      HAL_GPIO_WritePin(p_handle->dirPin1Port, p_handle->dirPin1, GPIO_PIN_SET  );
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	6858      	ldr	r0, [r3, #4]
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	689b      	ldr	r3, [r3, #8]
 8009e74:	b29b      	uxth	r3, r3
 8009e76:	2201      	movs	r2, #1
 8009e78:	4619      	mov	r1, r3
 8009e7a:	f7f9 fc6d 	bl	8003758 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(p_handle->dirPin2Port, p_handle->dirPin2, GPIO_PIN_RESET);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	68d8      	ldr	r0, [r3, #12]
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	691b      	ldr	r3, [r3, #16]
 8009e86:	b29b      	uxth	r3, r3
 8009e88:	2200      	movs	r2, #0
 8009e8a:	4619      	mov	r1, r3
 8009e8c:	f7f9 fc64 	bl	8003758 <HAL_GPIO_WritePin>
    }

    p_handle->direction = p_direction;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	78fa      	ldrb	r2, [r7, #3]
 8009e94:	751a      	strb	r2, [r3, #20]
  }

  return;
 8009e96:	bf00      	nop
 8009e98:	bf00      	nop
}
 8009e9a:	3708      	adds	r7, #8
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	bd80      	pop	{r7, pc}
 8009ea0:	0800c198 	.word	0x0800c198
 8009ea4:	0800c1a8 	.word	0x0800c1a8
 8009ea8:	0800c1bc 	.word	0x0800c1bc

08009eac <MTR_setSpeed>:

void MTR_setSpeed(T_MTR_Handle *p_handle, uint32_t p_speed)
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b082      	sub	sp, #8
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
 8009eb4:	6039      	str	r1, [r7, #0]
  if (p_speed == p_handle->speed)
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	699b      	ldr	r3, [r3, #24]
 8009eba:	683a      	ldr	r2, [r7, #0]
 8009ebc:	429a      	cmp	r2, r3
 8009ebe:	d02d      	beq.n	8009f1c <MTR_setSpeed+0x70>
  {
    ; /* Nothing to do */
  }
  else
  {
    LOG_debug("Setting  %s motor p_speed to %u", p_handle->name, p_speed);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681a      	ldr	r2, [r3, #0]
 8009ec4:	683b      	ldr	r3, [r7, #0]
 8009ec6:	4917      	ldr	r1, [pc, #92]	; (8009f24 <MTR_setSpeed+0x78>)
 8009ec8:	2000      	movs	r0, #0
 8009eca:	f7ff fe77 	bl	8009bbc <LOG_log>

    __HAL_TIM_SET_COMPARE(p_handle->pwmTimerHandle, p_handle->pwmChannel, p_speed);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6a1b      	ldr	r3, [r3, #32]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d105      	bne.n	8009ee2 <MTR_setSpeed+0x36>
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	69db      	ldr	r3, [r3, #28]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	683a      	ldr	r2, [r7, #0]
 8009ede:	635a      	str	r2, [r3, #52]	; 0x34
 8009ee0:	e018      	b.n	8009f14 <MTR_setSpeed+0x68>
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	6a1b      	ldr	r3, [r3, #32]
 8009ee6:	2b04      	cmp	r3, #4
 8009ee8:	d105      	bne.n	8009ef6 <MTR_setSpeed+0x4a>
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	69db      	ldr	r3, [r3, #28]
 8009eee:	681a      	ldr	r2, [r3, #0]
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	6393      	str	r3, [r2, #56]	; 0x38
 8009ef4:	e00e      	b.n	8009f14 <MTR_setSpeed+0x68>
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	6a1b      	ldr	r3, [r3, #32]
 8009efa:	2b08      	cmp	r3, #8
 8009efc:	d105      	bne.n	8009f0a <MTR_setSpeed+0x5e>
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	69db      	ldr	r3, [r3, #28]
 8009f02:	681a      	ldr	r2, [r3, #0]
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	63d3      	str	r3, [r2, #60]	; 0x3c
 8009f08:	e004      	b.n	8009f14 <MTR_setSpeed+0x68>
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	69db      	ldr	r3, [r3, #28]
 8009f0e:	681a      	ldr	r2, [r3, #0]
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	6413      	str	r3, [r2, #64]	; 0x40

    p_handle->speed = p_speed;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	683a      	ldr	r2, [r7, #0]
 8009f18:	619a      	str	r2, [r3, #24]
  }

  return;
 8009f1a:	bf00      	nop
 8009f1c:	bf00      	nop
}
 8009f1e:	3708      	adds	r7, #8
 8009f20:	46bd      	mov	sp, r7
 8009f22:	bd80      	pop	{r7, pc}
 8009f24:	0800c1d4 	.word	0x0800c1d4

08009f28 <PID_init>:

#include "utils.h"
#include "log.h"

void PID_init(T_PID_Handle *p_handle, int32_t p_kp, int32_t p_ki, int32_t p_kd, int32_t p_targetValue, int32_t p_minValue, int32_t p_maxValue, int32_t p_antiWindUpFactor)
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b084      	sub	sp, #16
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	60f8      	str	r0, [r7, #12]
 8009f30:	60b9      	str	r1, [r7, #8]
 8009f32:	607a      	str	r2, [r7, #4]
 8009f34:	603b      	str	r3, [r7, #0]
  LOG_info("Initializing PID");
 8009f36:	4919      	ldr	r1, [pc, #100]	; (8009f9c <PID_init+0x74>)
 8009f38:	2001      	movs	r0, #1
 8009f3a:	f7ff fe3f 	bl	8009bbc <LOG_log>

  p_handle->kp              = p_kp;
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	68ba      	ldr	r2, [r7, #8]
 8009f42:	601a      	str	r2, [r3, #0]
  p_handle->ki              = p_ki;
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	687a      	ldr	r2, [r7, #4]
 8009f48:	605a      	str	r2, [r3, #4]
  p_handle->kd              = p_kd;
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	683a      	ldr	r2, [r7, #0]
 8009f4e:	609a      	str	r2, [r3, #8]
  p_handle->targetValue     = p_targetValue;
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	69ba      	ldr	r2, [r7, #24]
 8009f54:	60da      	str	r2, [r3, #12]
  p_handle->minValue        = p_minValue;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	69fa      	ldr	r2, [r7, #28]
 8009f5a:	611a      	str	r2, [r3, #16]
  p_handle->maxValue        = p_maxValue;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	6a3a      	ldr	r2, [r7, #32]
 8009f60:	615a      	str	r2, [r3, #20]
  p_handle->antiWindUpValue = p_antiWindUpFactor * UTI_MAX(abs(p_handle->minValue), abs(p_handle->maxValue));
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	695b      	ldr	r3, [r3, #20]
 8009f66:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8009f6a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	691b      	ldr	r3, [r3, #16]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	bfb8      	it	lt
 8009f76:	425b      	neglt	r3, r3
 8009f78:	4293      	cmp	r3, r2
 8009f7a:	bfb8      	it	lt
 8009f7c:	4613      	movlt	r3, r2
 8009f7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f80:	fb02 f203 	mul.w	r2, r2, r3
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	619a      	str	r2, [r3, #24]

  PID_reset  (p_handle);
 8009f88:	68f8      	ldr	r0, [r7, #12]
 8009f8a:	f000 f809 	bl	8009fa0 <PID_reset>
  PID_logInfo(p_handle);
 8009f8e:	68f8      	ldr	r0, [r7, #12]
 8009f90:	f000 f87e 	bl	800a090 <PID_logInfo>

  return;
 8009f94:	bf00      	nop
}
 8009f96:	3710      	adds	r7, #16
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	bd80      	pop	{r7, pc}
 8009f9c:	0800c1f4 	.word	0x0800c1f4

08009fa0 <PID_reset>:

void PID_reset(T_PID_Handle *p_handle)
{
 8009fa0:	b480      	push	{r7}
 8009fa2:	b083      	sub	sp, #12
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
  p_handle->pValue        = 0;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2200      	movs	r2, #0
 8009fac:	61da      	str	r2, [r3, #28]
  p_handle->iValue        = 0;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	621a      	str	r2, [r3, #32]
  p_handle->dValue        = 0;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	625a      	str	r2, [r3, #36]	; 0x24
  p_handle->computedValue = 0;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	629a      	str	r2, [r3, #40]	; 0x28
  p_handle->lastError     = 0;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	62da      	str	r2, [r3, #44]	; 0x2c

  return;
 8009fc6:	bf00      	nop
}
 8009fc8:	370c      	adds	r7, #12
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	bc80      	pop	{r7}
 8009fce:	4770      	bx	lr

08009fd0 <PID_update>:
{
  return p_handle->antiWindUpValue;
}

int32_t PID_update(T_PID_Handle *p_handle, int32_t p_currentValue, uint32_t p_timeDelta)
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b088      	sub	sp, #32
 8009fd4:	af02      	add	r7, sp, #8
 8009fd6:	60f8      	str	r0, [r7, #12]
 8009fd8:	60b9      	str	r1, [r7, #8]
 8009fda:	607a      	str	r2, [r7, #4]
  int32_t l_currentError;

  l_currentError = p_handle->targetValue - p_currentValue;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	68da      	ldr	r2, [r3, #12]
 8009fe0:	68bb      	ldr	r3, [r7, #8]
 8009fe2:	1ad3      	subs	r3, r2, r3
 8009fe4:	617b      	str	r3, [r7, #20]

  p_handle->pValue    =  l_currentError;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	697a      	ldr	r2, [r7, #20]
 8009fea:	61da      	str	r2, [r3, #28]
  p_handle->iValue   +=  l_currentError * p_timeDelta;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	6a1b      	ldr	r3, [r3, #32]
 8009ff0:	4619      	mov	r1, r3
 8009ff2:	697b      	ldr	r3, [r7, #20]
 8009ff4:	687a      	ldr	r2, [r7, #4]
 8009ff6:	fb02 f303 	mul.w	r3, r2, r3
 8009ffa:	440b      	add	r3, r1
 8009ffc:	461a      	mov	r2, r3
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	621a      	str	r2, [r3, #32]
  p_handle->iValue    =  UTI_clampIntValue(p_handle->iValue, -p_handle->antiWindUpValue, p_handle->antiWindUpValue, false, 0);
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	6a18      	ldr	r0, [r3, #32]
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	699b      	ldr	r3, [r3, #24]
 800a00a:	4259      	negs	r1, r3
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	699a      	ldr	r2, [r3, #24]
 800a010:	2300      	movs	r3, #0
 800a012:	9300      	str	r3, [sp, #0]
 800a014:	2300      	movs	r3, #0
 800a016:	f000 f9f5 	bl	800a404 <UTI_clampIntValue>
 800a01a:	4602      	mov	r2, r0
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	621a      	str	r2, [r3, #32]
  p_handle->dValue    = (l_currentError - p_handle->lastError) / p_timeDelta;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a024:	697a      	ldr	r2, [r7, #20]
 800a026:	1ad3      	subs	r3, r2, r3
 800a028:	461a      	mov	r2, r3
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a030:	461a      	mov	r2, r3
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	625a      	str	r2, [r3, #36]	; 0x24
  p_handle->lastError =  l_currentError;
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	697a      	ldr	r2, [r7, #20]
 800a03a:	62da      	str	r2, [r3, #44]	; 0x2c

  p_handle->computedValue = p_handle->kp * p_handle->pValue + p_handle->ki * p_handle->iValue + p_handle->kd * p_handle->dValue;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	68fa      	ldr	r2, [r7, #12]
 800a042:	69d2      	ldr	r2, [r2, #28]
 800a044:	fb02 f203 	mul.w	r2, r2, r3
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	685b      	ldr	r3, [r3, #4]
 800a04c:	68f9      	ldr	r1, [r7, #12]
 800a04e:	6a09      	ldr	r1, [r1, #32]
 800a050:	fb01 f303 	mul.w	r3, r1, r3
 800a054:	441a      	add	r2, r3
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	689b      	ldr	r3, [r3, #8]
 800a05a:	68f9      	ldr	r1, [r7, #12]
 800a05c:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800a05e:	fb01 f303 	mul.w	r3, r1, r3
 800a062:	441a      	add	r2, r3
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	629a      	str	r2, [r3, #40]	; 0x28
  p_handle->computedValue = UTI_clampIntValue(p_handle->computedValue, p_handle->minValue, p_handle->maxValue, false, 0);
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	6919      	ldr	r1, [r3, #16]
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	695a      	ldr	r2, [r3, #20]
 800a074:	2300      	movs	r3, #0
 800a076:	9300      	str	r3, [sp, #0]
 800a078:	2300      	movs	r3, #0
 800a07a:	f000 f9c3 	bl	800a404 <UTI_clampIntValue>
 800a07e:	4602      	mov	r2, r0
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	629a      	str	r2, [r3, #40]	; 0x28

  return p_currentValue;
 800a084:	68bb      	ldr	r3, [r7, #8]
}
 800a086:	4618      	mov	r0, r3
 800a088:	3718      	adds	r7, #24
 800a08a:	46bd      	mov	sp, r7
 800a08c:	bd80      	pop	{r7, pc}
	...

0800a090 <PID_logInfo>:

void PID_logInfo(T_PID_Handle *p_handle)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b084      	sub	sp, #16
 800a094:	af02      	add	r7, sp, #8
 800a096:	6078      	str	r0, [r7, #4]
  LOG_info(" kp = %4d -  ki = %4d -     kd = %4d", p_handle->kp         , p_handle->ki      , p_handle->kd             );
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681a      	ldr	r2, [r3, #0]
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	6859      	ldr	r1, [r3, #4]
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	689b      	ldr	r3, [r3, #8]
 800a0a4:	9300      	str	r3, [sp, #0]
 800a0a6:	460b      	mov	r3, r1
 800a0a8:	4913      	ldr	r1, [pc, #76]	; (800a0f8 <PID_logInfo+0x68>)
 800a0aa:	2001      	movs	r0, #1
 800a0ac:	f7ff fd86 	bl	8009bbc <LOG_log>
  LOG_info("  p = %4d -   i = %4d -      d = %4d", p_handle->pValue     , p_handle->iValue  , p_handle->dValue         );
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	69da      	ldr	r2, [r3, #28]
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	6a19      	ldr	r1, [r3, #32]
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0bc:	9300      	str	r3, [sp, #0]
 800a0be:	460b      	mov	r3, r1
 800a0c0:	490e      	ldr	r1, [pc, #56]	; (800a0fc <PID_logInfo+0x6c>)
 800a0c2:	2001      	movs	r0, #1
 800a0c4:	f7ff fd7a 	bl	8009bbc <LOG_log>
  LOG_info("min = %4d - max = %4d - a.w.up = %4d", p_handle->minValue   , p_handle->maxValue, p_handle->antiWindUpValue);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	691a      	ldr	r2, [r3, #16]
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	6959      	ldr	r1, [r3, #20]
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	699b      	ldr	r3, [r3, #24]
 800a0d4:	9300      	str	r3, [sp, #0]
 800a0d6:	460b      	mov	r3, r1
 800a0d8:	4909      	ldr	r1, [pc, #36]	; (800a100 <PID_logInfo+0x70>)
 800a0da:	2001      	movs	r0, #1
 800a0dc:	f7ff fd6e 	bl	8009bbc <LOG_log>
  LOG_info("  t = %4d - val = %4d               ", p_handle->targetValue, p_handle->computedValue                      );
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	68da      	ldr	r2, [r3, #12]
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0e8:	4906      	ldr	r1, [pc, #24]	; (800a104 <PID_logInfo+0x74>)
 800a0ea:	2001      	movs	r0, #1
 800a0ec:	f7ff fd66 	bl	8009bbc <LOG_log>

  return;
 800a0f0:	bf00      	nop
}
 800a0f2:	3708      	adds	r7, #8
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	bd80      	pop	{r7, pc}
 800a0f8:	0800c208 	.word	0x0800c208
 800a0fc:	0800c230 	.word	0x0800c230
 800a100:	0800c258 	.word	0x0800c258
 800a104:	0800c280 	.word	0x0800c280

0800a108 <SFO_dataInit>:

#include "log.h"


void SFO_dataInit(T_SFO_data *p_data)
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b082      	sub	sp, #8
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
  (void)memset(p_data, 0, SFO_MAX_STRING_SIZE);
 800a110:	2210      	movs	r2, #16
 800a112:	2100      	movs	r1, #0
 800a114:	6878      	ldr	r0, [r7, #4]
 800a116:	f000 f9d9 	bl	800a4cc <memset>

  return;
 800a11a:	bf00      	nop
}
 800a11c:	3708      	adds	r7, #8
 800a11e:	46bd      	mov	sp, r7
 800a120:	bd80      	pop	{r7, pc}
	...

0800a124 <SFO_init>:

void SFO_init(T_SFO_Context *p_fifo)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b082      	sub	sp, #8
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
  LOG_debug("Initializing string FIFO");
 800a12c:	4908      	ldr	r1, [pc, #32]	; (800a150 <SFO_init+0x2c>)
 800a12e:	2000      	movs	r0, #0
 800a130:	f7ff fd44 	bl	8009bbc <LOG_log>

  p_fifo->head  = NULL;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2200      	movs	r2, #0
 800a138:	601a      	str	r2, [r3, #0]
  p_fifo->tail  = NULL;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	2200      	movs	r2, #0
 800a13e:	605a      	str	r2, [r3, #4]
  p_fifo->count = 0;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2200      	movs	r2, #0
 800a144:	609a      	str	r2, [r3, #8]

  return;
 800a146:	bf00      	nop
}
 800a148:	3708      	adds	r7, #8
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bd80      	pop	{r7, pc}
 800a14e:	bf00      	nop
 800a150:	0800c2a8 	.word	0x0800c2a8

0800a154 <SFO_push>:


void SFO_push(T_SFO_Context *p_fifo, T_SFO_data *p_dataIn)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b084      	sub	sp, #16
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
 800a15c:	6039      	str	r1, [r7, #0]
  T_SFO_Element *l_element;

  if (p_fifo->count == SFO_MAX_ELEMENTS)
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	689b      	ldr	r3, [r3, #8]
 800a162:	2b0a      	cmp	r3, #10
 800a164:	d105      	bne.n	800a172 <SFO_push+0x1e>
  {
    LOG_error("SFO_push() failure - String FIFO is full (%u elements)", SFO_MAX_ELEMENTS);
 800a166:	220a      	movs	r2, #10
 800a168:	4917      	ldr	r1, [pc, #92]	; (800a1c8 <SFO_push+0x74>)
 800a16a:	2003      	movs	r0, #3
 800a16c:	f7ff fd26 	bl	8009bbc <LOG_log>

      p_fifo->count++;
    }
  }

  return;
 800a170:	e027      	b.n	800a1c2 <SFO_push+0x6e>
    l_element = (T_SFO_Element *)malloc(sizeof(T_SFO_Element));
 800a172:	2014      	movs	r0, #20
 800a174:	f000 f99a 	bl	800a4ac <malloc>
 800a178:	4603      	mov	r3, r0
 800a17a:	60fb      	str	r3, [r7, #12]
    if (l_element == NULL)
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d104      	bne.n	800a18c <SFO_push+0x38>
      LOG_error("SFO_push() failure - Could not allocate new memory");
 800a182:	4912      	ldr	r1, [pc, #72]	; (800a1cc <SFO_push+0x78>)
 800a184:	2003      	movs	r0, #3
 800a186:	f7ff fd19 	bl	8009bbc <LOG_log>
  return;
 800a18a:	e01a      	b.n	800a1c2 <SFO_push+0x6e>
      (void)strncpy(l_element->data, *p_dataIn, SFO_MAX_STRING_SIZE);
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	2210      	movs	r2, #16
 800a190:	6839      	ldr	r1, [r7, #0]
 800a192:	4618      	mov	r0, r3
 800a194:	f000 fae6 	bl	800a764 <strncpy>
      l_element->nextElement = p_fifo->head;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681a      	ldr	r2, [r3, #0]
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	611a      	str	r2, [r3, #16]
      p_fifo->head           = l_element;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	68fa      	ldr	r2, [r7, #12]
 800a1a4:	601a      	str	r2, [r3, #0]
      if (p_fifo->tail == NULL)
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	685b      	ldr	r3, [r3, #4]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d103      	bne.n	800a1b6 <SFO_push+0x62>
        p_fifo->tail = p_fifo->head;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681a      	ldr	r2, [r3, #0]
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	605a      	str	r2, [r3, #4]
      p_fifo->count++;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	689b      	ldr	r3, [r3, #8]
 800a1ba:	1c5a      	adds	r2, r3, #1
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	609a      	str	r2, [r3, #8]
  return;
 800a1c0:	bf00      	nop
}
 800a1c2:	3710      	adds	r7, #16
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	bd80      	pop	{r7, pc}
 800a1c8:	0800c2c4 	.word	0x0800c2c4
 800a1cc:	0800c2fc 	.word	0x0800c2fc

0800a1d0 <SFO_pop>:

void SFO_pop(T_SFO_Context *p_fifo, T_SFO_data *p_dataOut)
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b084      	sub	sp, #16
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
 800a1d8:	6039      	str	r1, [r7, #0]
  T_SFO_Element *l_element;

  if (p_fifo->count == 0)
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	689b      	ldr	r3, [r3, #8]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d104      	bne.n	800a1ec <SFO_pop+0x1c>
  {
    LOG_error("SFO_pop() failure - String FIFO is empty");
 800a1e2:	491a      	ldr	r1, [pc, #104]	; (800a24c <SFO_pop+0x7c>)
 800a1e4:	2003      	movs	r0, #3
 800a1e6:	f7ff fce9 	bl	8009bbc <LOG_log>
    {
      SFO_init(p_fifo);
    }
  }

  return;
 800a1ea:	e02c      	b.n	800a246 <SFO_pop+0x76>
    (void)strncpy(*p_dataOut, p_fifo->tail->data, SFO_MAX_STRING_SIZE);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	685b      	ldr	r3, [r3, #4]
 800a1f0:	2210      	movs	r2, #16
 800a1f2:	4619      	mov	r1, r3
 800a1f4:	6838      	ldr	r0, [r7, #0]
 800a1f6:	f000 fab5 	bl	800a764 <strncpy>
    free(p_fifo->tail);
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	685b      	ldr	r3, [r3, #4]
 800a1fe:	4618      	mov	r0, r3
 800a200:	f000 f95c 	bl	800a4bc <free>
    if (p_fifo->count > 1)
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	689b      	ldr	r3, [r3, #8]
 800a208:	2b01      	cmp	r3, #1
 800a20a:	d918      	bls.n	800a23e <SFO_pop+0x6e>
      l_element = p_fifo->head;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	60fb      	str	r3, [r7, #12]
      while (l_element->nextElement != p_fifo->tail)
 800a212:	e002      	b.n	800a21a <SFO_pop+0x4a>
        l_element = l_element->nextElement;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	691b      	ldr	r3, [r3, #16]
 800a218:	60fb      	str	r3, [r7, #12]
      while (l_element->nextElement != p_fifo->tail)
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	691a      	ldr	r2, [r3, #16]
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	685b      	ldr	r3, [r3, #4]
 800a222:	429a      	cmp	r2, r3
 800a224:	d1f6      	bne.n	800a214 <SFO_pop+0x44>
      l_element->nextElement = NULL;
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	2200      	movs	r2, #0
 800a22a:	611a      	str	r2, [r3, #16]
      p_fifo->tail           = l_element;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	68fa      	ldr	r2, [r7, #12]
 800a230:	605a      	str	r2, [r3, #4]
      p_fifo->count--;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	689b      	ldr	r3, [r3, #8]
 800a236:	1e5a      	subs	r2, r3, #1
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	609a      	str	r2, [r3, #8]
  return;
 800a23c:	e003      	b.n	800a246 <SFO_pop+0x76>
      SFO_init(p_fifo);
 800a23e:	6878      	ldr	r0, [r7, #4]
 800a240:	f7ff ff70 	bl	800a124 <SFO_init>
  return;
 800a244:	bf00      	nop
}
 800a246:	3710      	adds	r7, #16
 800a248:	46bd      	mov	sp, r7
 800a24a:	bd80      	pop	{r7, pc}
 800a24c:	0800c330 	.word	0x0800c330

0800a250 <SFO_getCount>:

uint32_t SFO_getCount(T_SFO_Context *p_fifo)
{
 800a250:	b480      	push	{r7}
 800a252:	b083      	sub	sp, #12
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
  return p_fifo->count;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	689b      	ldr	r3, [r3, #8]
}
 800a25c:	4618      	mov	r0, r3
 800a25e:	370c      	adds	r7, #12
 800a260:	46bd      	mov	sp, r7
 800a262:	bc80      	pop	{r7}
 800a264:	4770      	bx	lr
	...

0800a268 <SFO_logInfo>:

void SFO_logInfo(T_SFO_Context *p_fifo)
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b084      	sub	sp, #16
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
  T_SFO_Element *l_element;

  if (p_fifo->count == 0)
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	689b      	ldr	r3, [r3, #8]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d104      	bne.n	800a282 <SFO_logInfo+0x1a>
  {
    LOG_info("String FIFO is empty");
 800a278:	4924      	ldr	r1, [pc, #144]	; (800a30c <SFO_logInfo+0xa4>)
 800a27a:	2001      	movs	r0, #1
 800a27c:	f7ff fc9e 	bl	8009bbc <LOG_log>
    }

    LOG_info("COUNT: %u", p_fifo->count);
  }

  return;
 800a280:	e040      	b.n	800a304 <SFO_logInfo+0x9c>
    l_element = p_fifo->head;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	60fb      	str	r3, [r7, #12]
    while (l_element != NULL)
 800a288:	e031      	b.n	800a2ee <SFO_logInfo+0x86>
      if ((l_element == p_fifo->head) && (l_element == p_fifo->tail))
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	68fa      	ldr	r2, [r7, #12]
 800a290:	429a      	cmp	r2, r3
 800a292:	d10b      	bne.n	800a2ac <SFO_logInfo+0x44>
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	685b      	ldr	r3, [r3, #4]
 800a298:	68fa      	ldr	r2, [r7, #12]
 800a29a:	429a      	cmp	r2, r3
 800a29c:	d106      	bne.n	800a2ac <SFO_logInfo+0x44>
        LOG_info("HEAD -> '%s' <- TAIL", l_element->data);
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	461a      	mov	r2, r3
 800a2a2:	491b      	ldr	r1, [pc, #108]	; (800a310 <SFO_logInfo+0xa8>)
 800a2a4:	2001      	movs	r0, #1
 800a2a6:	f7ff fc89 	bl	8009bbc <LOG_log>
 800a2aa:	e01d      	b.n	800a2e8 <SFO_logInfo+0x80>
      else if (l_element == p_fifo->head)
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	68fa      	ldr	r2, [r7, #12]
 800a2b2:	429a      	cmp	r2, r3
 800a2b4:	d106      	bne.n	800a2c4 <SFO_logInfo+0x5c>
        LOG_info("HEAD -> '%s'", l_element->data);
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	461a      	mov	r2, r3
 800a2ba:	4916      	ldr	r1, [pc, #88]	; (800a314 <SFO_logInfo+0xac>)
 800a2bc:	2001      	movs	r0, #1
 800a2be:	f7ff fc7d 	bl	8009bbc <LOG_log>
 800a2c2:	e011      	b.n	800a2e8 <SFO_logInfo+0x80>
      else if (l_element == p_fifo->tail)
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	685b      	ldr	r3, [r3, #4]
 800a2c8:	68fa      	ldr	r2, [r7, #12]
 800a2ca:	429a      	cmp	r2, r3
 800a2cc:	d106      	bne.n	800a2dc <SFO_logInfo+0x74>
        LOG_info("TAIL -> '%s'", l_element->data);
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	461a      	mov	r2, r3
 800a2d2:	4911      	ldr	r1, [pc, #68]	; (800a318 <SFO_logInfo+0xb0>)
 800a2d4:	2001      	movs	r0, #1
 800a2d6:	f7ff fc71 	bl	8009bbc <LOG_log>
 800a2da:	e005      	b.n	800a2e8 <SFO_logInfo+0x80>
        LOG_info("        '%s'", l_element->data);
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	461a      	mov	r2, r3
 800a2e0:	490e      	ldr	r1, [pc, #56]	; (800a31c <SFO_logInfo+0xb4>)
 800a2e2:	2001      	movs	r0, #1
 800a2e4:	f7ff fc6a 	bl	8009bbc <LOG_log>
      l_element = l_element->nextElement;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	691b      	ldr	r3, [r3, #16]
 800a2ec:	60fb      	str	r3, [r7, #12]
    while (l_element != NULL)
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d1ca      	bne.n	800a28a <SFO_logInfo+0x22>
    LOG_info("COUNT: %u", p_fifo->count);
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	689b      	ldr	r3, [r3, #8]
 800a2f8:	461a      	mov	r2, r3
 800a2fa:	4909      	ldr	r1, [pc, #36]	; (800a320 <SFO_logInfo+0xb8>)
 800a2fc:	2001      	movs	r0, #1
 800a2fe:	f7ff fc5d 	bl	8009bbc <LOG_log>
  return;
 800a302:	bf00      	nop
}
 800a304:	3710      	adds	r7, #16
 800a306:	46bd      	mov	sp, r7
 800a308:	bd80      	pop	{r7, pc}
 800a30a:	bf00      	nop
 800a30c:	0800c35c 	.word	0x0800c35c
 800a310:	0800c374 	.word	0x0800c374
 800a314:	0800c38c 	.word	0x0800c38c
 800a318:	0800c39c 	.word	0x0800c39c
 800a31c:	0800c3ac 	.word	0x0800c3ac
 800a320:	0800c3bc 	.word	0x0800c3bc

0800a324 <UTI_init>:
#include "log.h"

static TIM_HandleTypeDef *g_UTI_delayTimerHandle;

void UTI_init(TIM_HandleTypeDef *p_delayTimerHandle)
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b082      	sub	sp, #8
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
  LOG_info("Initializing utilities");
 800a32c:	4905      	ldr	r1, [pc, #20]	; (800a344 <UTI_init+0x20>)
 800a32e:	2001      	movs	r0, #1
 800a330:	f7ff fc44 	bl	8009bbc <LOG_log>

  g_UTI_delayTimerHandle = p_delayTimerHandle;
 800a334:	4a04      	ldr	r2, [pc, #16]	; (800a348 <UTI_init+0x24>)
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	6013      	str	r3, [r2, #0]

  return;
 800a33a:	bf00      	nop
}
 800a33c:	3708      	adds	r7, #8
 800a33e:	46bd      	mov	sp, r7
 800a340:	bd80      	pop	{r7, pc}
 800a342:	bf00      	nop
 800a344:	0800c3c8 	.word	0x0800c3c8
 800a348:	20000298 	.word	0x20000298

0800a34c <UTI_delayUs>:

void UTI_delayUs(uint16_t p_delay)
{
 800a34c:	b480      	push	{r7}
 800a34e:	b083      	sub	sp, #12
 800a350:	af00      	add	r7, sp, #0
 800a352:	4603      	mov	r3, r0
 800a354:	80fb      	strh	r3, [r7, #6]
  /* Reset the micro-seconds counter */
  __HAL_TIM_SET_COUNTER(g_UTI_delayTimerHandle, 0);
 800a356:	4b09      	ldr	r3, [pc, #36]	; (800a37c <UTI_delayUs+0x30>)
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	2200      	movs	r2, #0
 800a35e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Wait for the counter to reach the input micro-seconds number */
  while (__HAL_TIM_GET_COUNTER(g_UTI_delayTimerHandle) < p_delay)
 800a360:	bf00      	nop
 800a362:	4b06      	ldr	r3, [pc, #24]	; (800a37c <UTI_delayUs+0x30>)
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a36a:	88fb      	ldrh	r3, [r7, #6]
 800a36c:	429a      	cmp	r2, r3
 800a36e:	d3f8      	bcc.n	800a362 <UTI_delayUs+0x16>
  {
    ; /* Nothing to do */
  }

  return;
 800a370:	bf00      	nop
}
 800a372:	370c      	adds	r7, #12
 800a374:	46bd      	mov	sp, r7
 800a376:	bc80      	pop	{r7}
 800a378:	4770      	bx	lr
 800a37a:	bf00      	nop
 800a37c:	20000298 	.word	0x20000298

0800a380 <UTI_resetRtcDate>:

void UTI_resetRtcDate(RTC_DateTypeDef *p_date)
{
 800a380:	b480      	push	{r7}
 800a382:	b083      	sub	sp, #12
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
  p_date->Date    = 0;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2200      	movs	r2, #0
 800a38c:	709a      	strb	r2, [r3, #2]
  p_date->Month   = 0;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	2200      	movs	r2, #0
 800a392:	705a      	strb	r2, [r3, #1]
  p_date->WeekDay = 0;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2200      	movs	r2, #0
 800a398:	701a      	strb	r2, [r3, #0]
  p_date->Year    = 0;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	2200      	movs	r2, #0
 800a39e:	70da      	strb	r2, [r3, #3]

  return;
 800a3a0:	bf00      	nop
}
 800a3a2:	370c      	adds	r7, #12
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	bc80      	pop	{r7}
 800a3a8:	4770      	bx	lr

0800a3aa <UTI_resetRtcTime>:


void UTI_resetRtcTime(RTC_TimeTypeDef *p_time)
{
 800a3aa:	b480      	push	{r7}
 800a3ac:	b083      	sub	sp, #12
 800a3ae:	af00      	add	r7, sp, #0
 800a3b0:	6078      	str	r0, [r7, #4]
  p_time->Hours   = 0;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	701a      	strb	r2, [r3, #0]
  p_time->Minutes = 0;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	705a      	strb	r2, [r3, #1]
  p_time->Seconds = 0;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	709a      	strb	r2, [r3, #2]

  return;
 800a3c4:	bf00      	nop
}
 800a3c6:	370c      	adds	r7, #12
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	bc80      	pop	{r7}
 800a3cc:	4770      	bx	lr

0800a3ce <UTI_turnRtcTimeToSeconds>:

uint32_t UTI_turnRtcTimeToSeconds(RTC_TimeTypeDef *p_time)
{
 800a3ce:	b480      	push	{r7}
 800a3d0:	b083      	sub	sp, #12
 800a3d2:	af00      	add	r7, sp, #0
 800a3d4:	6078      	str	r0, [r7, #4]
  return p_time->Hours * 3600 + p_time->Minutes * 60 + p_time->Seconds;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	781b      	ldrb	r3, [r3, #0]
 800a3da:	461a      	mov	r2, r3
 800a3dc:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800a3e0:	fb03 f202 	mul.w	r2, r3, r2
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	785b      	ldrb	r3, [r3, #1]
 800a3e8:	4619      	mov	r1, r3
 800a3ea:	460b      	mov	r3, r1
 800a3ec:	011b      	lsls	r3, r3, #4
 800a3ee:	1a5b      	subs	r3, r3, r1
 800a3f0:	009b      	lsls	r3, r3, #2
 800a3f2:	4413      	add	r3, r2
 800a3f4:	687a      	ldr	r2, [r7, #4]
 800a3f6:	7892      	ldrb	r2, [r2, #2]
 800a3f8:	4413      	add	r3, r2
}
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	370c      	adds	r7, #12
 800a3fe:	46bd      	mov	sp, r7
 800a400:	bc80      	pop	{r7}
 800a402:	4770      	bx	lr

0800a404 <UTI_clampIntValue>:

int32_t UTI_clampIntValue(int32_t p_value, int32_t p_minValue, int32_t p_maxValue, bool p_clampToNearest, int32_t p_clampValue)
{
 800a404:	b480      	push	{r7}
 800a406:	b087      	sub	sp, #28
 800a408:	af00      	add	r7, sp, #0
 800a40a:	60f8      	str	r0, [r7, #12]
 800a40c:	60b9      	str	r1, [r7, #8]
 800a40e:	607a      	str	r2, [r7, #4]
 800a410:	70fb      	strb	r3, [r7, #3]
  int32_t l_returnValue;

  if (p_value < p_minValue)
 800a412:	68fa      	ldr	r2, [r7, #12]
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	429a      	cmp	r2, r3
 800a418:	da08      	bge.n	800a42c <UTI_clampIntValue+0x28>
  {
    if (p_clampToNearest == true)
 800a41a:	78fb      	ldrb	r3, [r7, #3]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d002      	beq.n	800a426 <UTI_clampIntValue+0x22>
    {
      l_returnValue = p_minValue;
 800a420:	68bb      	ldr	r3, [r7, #8]
 800a422:	617b      	str	r3, [r7, #20]
 800a424:	e011      	b.n	800a44a <UTI_clampIntValue+0x46>
    }
    else
    {
      l_returnValue = p_clampValue;
 800a426:	6a3b      	ldr	r3, [r7, #32]
 800a428:	617b      	str	r3, [r7, #20]
 800a42a:	e00e      	b.n	800a44a <UTI_clampIntValue+0x46>
    }
  }
  else if (p_value > p_maxValue)
 800a42c:	68fa      	ldr	r2, [r7, #12]
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	429a      	cmp	r2, r3
 800a432:	dd08      	ble.n	800a446 <UTI_clampIntValue+0x42>
  {
    if (p_clampToNearest == true)
 800a434:	78fb      	ldrb	r3, [r7, #3]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d002      	beq.n	800a440 <UTI_clampIntValue+0x3c>
    {
      l_returnValue = p_maxValue;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	617b      	str	r3, [r7, #20]
 800a43e:	e004      	b.n	800a44a <UTI_clampIntValue+0x46>
    }
    else
    {
      l_returnValue = p_clampValue;
 800a440:	6a3b      	ldr	r3, [r7, #32]
 800a442:	617b      	str	r3, [r7, #20]
 800a444:	e001      	b.n	800a44a <UTI_clampIntValue+0x46>
    }
  }
  else
  {
    l_returnValue = p_value;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	617b      	str	r3, [r7, #20]
  }

  return l_returnValue;
 800a44a:	697b      	ldr	r3, [r7, #20]
}
 800a44c:	4618      	mov	r0, r3
 800a44e:	371c      	adds	r7, #28
 800a450:	46bd      	mov	sp, r7
 800a452:	bc80      	pop	{r7}
 800a454:	4770      	bx	lr
	...

0800a458 <__errno>:
 800a458:	4b01      	ldr	r3, [pc, #4]	; (800a460 <__errno+0x8>)
 800a45a:	6818      	ldr	r0, [r3, #0]
 800a45c:	4770      	bx	lr
 800a45e:	bf00      	nop
 800a460:	2000001c 	.word	0x2000001c

0800a464 <__libc_init_array>:
 800a464:	b570      	push	{r4, r5, r6, lr}
 800a466:	2600      	movs	r6, #0
 800a468:	4d0c      	ldr	r5, [pc, #48]	; (800a49c <__libc_init_array+0x38>)
 800a46a:	4c0d      	ldr	r4, [pc, #52]	; (800a4a0 <__libc_init_array+0x3c>)
 800a46c:	1b64      	subs	r4, r4, r5
 800a46e:	10a4      	asrs	r4, r4, #2
 800a470:	42a6      	cmp	r6, r4
 800a472:	d109      	bne.n	800a488 <__libc_init_array+0x24>
 800a474:	f001 f832 	bl	800b4dc <_init>
 800a478:	2600      	movs	r6, #0
 800a47a:	4d0a      	ldr	r5, [pc, #40]	; (800a4a4 <__libc_init_array+0x40>)
 800a47c:	4c0a      	ldr	r4, [pc, #40]	; (800a4a8 <__libc_init_array+0x44>)
 800a47e:	1b64      	subs	r4, r4, r5
 800a480:	10a4      	asrs	r4, r4, #2
 800a482:	42a6      	cmp	r6, r4
 800a484:	d105      	bne.n	800a492 <__libc_init_array+0x2e>
 800a486:	bd70      	pop	{r4, r5, r6, pc}
 800a488:	f855 3b04 	ldr.w	r3, [r5], #4
 800a48c:	4798      	blx	r3
 800a48e:	3601      	adds	r6, #1
 800a490:	e7ee      	b.n	800a470 <__libc_init_array+0xc>
 800a492:	f855 3b04 	ldr.w	r3, [r5], #4
 800a496:	4798      	blx	r3
 800a498:	3601      	adds	r6, #1
 800a49a:	e7f2      	b.n	800a482 <__libc_init_array+0x1e>
 800a49c:	0800c490 	.word	0x0800c490
 800a4a0:	0800c490 	.word	0x0800c490
 800a4a4:	0800c490 	.word	0x0800c490
 800a4a8:	0800c494 	.word	0x0800c494

0800a4ac <malloc>:
 800a4ac:	4b02      	ldr	r3, [pc, #8]	; (800a4b8 <malloc+0xc>)
 800a4ae:	4601      	mov	r1, r0
 800a4b0:	6818      	ldr	r0, [r3, #0]
 800a4b2:	f000 b85f 	b.w	800a574 <_malloc_r>
 800a4b6:	bf00      	nop
 800a4b8:	2000001c 	.word	0x2000001c

0800a4bc <free>:
 800a4bc:	4b02      	ldr	r3, [pc, #8]	; (800a4c8 <free+0xc>)
 800a4be:	4601      	mov	r1, r0
 800a4c0:	6818      	ldr	r0, [r3, #0]
 800a4c2:	f000 b80b 	b.w	800a4dc <_free_r>
 800a4c6:	bf00      	nop
 800a4c8:	2000001c 	.word	0x2000001c

0800a4cc <memset>:
 800a4cc:	4603      	mov	r3, r0
 800a4ce:	4402      	add	r2, r0
 800a4d0:	4293      	cmp	r3, r2
 800a4d2:	d100      	bne.n	800a4d6 <memset+0xa>
 800a4d4:	4770      	bx	lr
 800a4d6:	f803 1b01 	strb.w	r1, [r3], #1
 800a4da:	e7f9      	b.n	800a4d0 <memset+0x4>

0800a4dc <_free_r>:
 800a4dc:	b538      	push	{r3, r4, r5, lr}
 800a4de:	4605      	mov	r5, r0
 800a4e0:	2900      	cmp	r1, #0
 800a4e2:	d043      	beq.n	800a56c <_free_r+0x90>
 800a4e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a4e8:	1f0c      	subs	r4, r1, #4
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	bfb8      	it	lt
 800a4ee:	18e4      	addlt	r4, r4, r3
 800a4f0:	f000 fc40 	bl	800ad74 <__malloc_lock>
 800a4f4:	4a1e      	ldr	r2, [pc, #120]	; (800a570 <_free_r+0x94>)
 800a4f6:	6813      	ldr	r3, [r2, #0]
 800a4f8:	4610      	mov	r0, r2
 800a4fa:	b933      	cbnz	r3, 800a50a <_free_r+0x2e>
 800a4fc:	6063      	str	r3, [r4, #4]
 800a4fe:	6014      	str	r4, [r2, #0]
 800a500:	4628      	mov	r0, r5
 800a502:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a506:	f000 bc3b 	b.w	800ad80 <__malloc_unlock>
 800a50a:	42a3      	cmp	r3, r4
 800a50c:	d90a      	bls.n	800a524 <_free_r+0x48>
 800a50e:	6821      	ldr	r1, [r4, #0]
 800a510:	1862      	adds	r2, r4, r1
 800a512:	4293      	cmp	r3, r2
 800a514:	bf01      	itttt	eq
 800a516:	681a      	ldreq	r2, [r3, #0]
 800a518:	685b      	ldreq	r3, [r3, #4]
 800a51a:	1852      	addeq	r2, r2, r1
 800a51c:	6022      	streq	r2, [r4, #0]
 800a51e:	6063      	str	r3, [r4, #4]
 800a520:	6004      	str	r4, [r0, #0]
 800a522:	e7ed      	b.n	800a500 <_free_r+0x24>
 800a524:	461a      	mov	r2, r3
 800a526:	685b      	ldr	r3, [r3, #4]
 800a528:	b10b      	cbz	r3, 800a52e <_free_r+0x52>
 800a52a:	42a3      	cmp	r3, r4
 800a52c:	d9fa      	bls.n	800a524 <_free_r+0x48>
 800a52e:	6811      	ldr	r1, [r2, #0]
 800a530:	1850      	adds	r0, r2, r1
 800a532:	42a0      	cmp	r0, r4
 800a534:	d10b      	bne.n	800a54e <_free_r+0x72>
 800a536:	6820      	ldr	r0, [r4, #0]
 800a538:	4401      	add	r1, r0
 800a53a:	1850      	adds	r0, r2, r1
 800a53c:	4283      	cmp	r3, r0
 800a53e:	6011      	str	r1, [r2, #0]
 800a540:	d1de      	bne.n	800a500 <_free_r+0x24>
 800a542:	6818      	ldr	r0, [r3, #0]
 800a544:	685b      	ldr	r3, [r3, #4]
 800a546:	4401      	add	r1, r0
 800a548:	6011      	str	r1, [r2, #0]
 800a54a:	6053      	str	r3, [r2, #4]
 800a54c:	e7d8      	b.n	800a500 <_free_r+0x24>
 800a54e:	d902      	bls.n	800a556 <_free_r+0x7a>
 800a550:	230c      	movs	r3, #12
 800a552:	602b      	str	r3, [r5, #0]
 800a554:	e7d4      	b.n	800a500 <_free_r+0x24>
 800a556:	6820      	ldr	r0, [r4, #0]
 800a558:	1821      	adds	r1, r4, r0
 800a55a:	428b      	cmp	r3, r1
 800a55c:	bf01      	itttt	eq
 800a55e:	6819      	ldreq	r1, [r3, #0]
 800a560:	685b      	ldreq	r3, [r3, #4]
 800a562:	1809      	addeq	r1, r1, r0
 800a564:	6021      	streq	r1, [r4, #0]
 800a566:	6063      	str	r3, [r4, #4]
 800a568:	6054      	str	r4, [r2, #4]
 800a56a:	e7c9      	b.n	800a500 <_free_r+0x24>
 800a56c:	bd38      	pop	{r3, r4, r5, pc}
 800a56e:	bf00      	nop
 800a570:	2000029c 	.word	0x2000029c

0800a574 <_malloc_r>:
 800a574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a576:	1ccd      	adds	r5, r1, #3
 800a578:	f025 0503 	bic.w	r5, r5, #3
 800a57c:	3508      	adds	r5, #8
 800a57e:	2d0c      	cmp	r5, #12
 800a580:	bf38      	it	cc
 800a582:	250c      	movcc	r5, #12
 800a584:	2d00      	cmp	r5, #0
 800a586:	4606      	mov	r6, r0
 800a588:	db01      	blt.n	800a58e <_malloc_r+0x1a>
 800a58a:	42a9      	cmp	r1, r5
 800a58c:	d903      	bls.n	800a596 <_malloc_r+0x22>
 800a58e:	230c      	movs	r3, #12
 800a590:	6033      	str	r3, [r6, #0]
 800a592:	2000      	movs	r0, #0
 800a594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a596:	f000 fbed 	bl	800ad74 <__malloc_lock>
 800a59a:	4921      	ldr	r1, [pc, #132]	; (800a620 <_malloc_r+0xac>)
 800a59c:	680a      	ldr	r2, [r1, #0]
 800a59e:	4614      	mov	r4, r2
 800a5a0:	b99c      	cbnz	r4, 800a5ca <_malloc_r+0x56>
 800a5a2:	4f20      	ldr	r7, [pc, #128]	; (800a624 <_malloc_r+0xb0>)
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	b923      	cbnz	r3, 800a5b2 <_malloc_r+0x3e>
 800a5a8:	4621      	mov	r1, r4
 800a5aa:	4630      	mov	r0, r6
 800a5ac:	f000 f8ca 	bl	800a744 <_sbrk_r>
 800a5b0:	6038      	str	r0, [r7, #0]
 800a5b2:	4629      	mov	r1, r5
 800a5b4:	4630      	mov	r0, r6
 800a5b6:	f000 f8c5 	bl	800a744 <_sbrk_r>
 800a5ba:	1c43      	adds	r3, r0, #1
 800a5bc:	d123      	bne.n	800a606 <_malloc_r+0x92>
 800a5be:	230c      	movs	r3, #12
 800a5c0:	4630      	mov	r0, r6
 800a5c2:	6033      	str	r3, [r6, #0]
 800a5c4:	f000 fbdc 	bl	800ad80 <__malloc_unlock>
 800a5c8:	e7e3      	b.n	800a592 <_malloc_r+0x1e>
 800a5ca:	6823      	ldr	r3, [r4, #0]
 800a5cc:	1b5b      	subs	r3, r3, r5
 800a5ce:	d417      	bmi.n	800a600 <_malloc_r+0x8c>
 800a5d0:	2b0b      	cmp	r3, #11
 800a5d2:	d903      	bls.n	800a5dc <_malloc_r+0x68>
 800a5d4:	6023      	str	r3, [r4, #0]
 800a5d6:	441c      	add	r4, r3
 800a5d8:	6025      	str	r5, [r4, #0]
 800a5da:	e004      	b.n	800a5e6 <_malloc_r+0x72>
 800a5dc:	6863      	ldr	r3, [r4, #4]
 800a5de:	42a2      	cmp	r2, r4
 800a5e0:	bf0c      	ite	eq
 800a5e2:	600b      	streq	r3, [r1, #0]
 800a5e4:	6053      	strne	r3, [r2, #4]
 800a5e6:	4630      	mov	r0, r6
 800a5e8:	f000 fbca 	bl	800ad80 <__malloc_unlock>
 800a5ec:	f104 000b 	add.w	r0, r4, #11
 800a5f0:	1d23      	adds	r3, r4, #4
 800a5f2:	f020 0007 	bic.w	r0, r0, #7
 800a5f6:	1ac2      	subs	r2, r0, r3
 800a5f8:	d0cc      	beq.n	800a594 <_malloc_r+0x20>
 800a5fa:	1a1b      	subs	r3, r3, r0
 800a5fc:	50a3      	str	r3, [r4, r2]
 800a5fe:	e7c9      	b.n	800a594 <_malloc_r+0x20>
 800a600:	4622      	mov	r2, r4
 800a602:	6864      	ldr	r4, [r4, #4]
 800a604:	e7cc      	b.n	800a5a0 <_malloc_r+0x2c>
 800a606:	1cc4      	adds	r4, r0, #3
 800a608:	f024 0403 	bic.w	r4, r4, #3
 800a60c:	42a0      	cmp	r0, r4
 800a60e:	d0e3      	beq.n	800a5d8 <_malloc_r+0x64>
 800a610:	1a21      	subs	r1, r4, r0
 800a612:	4630      	mov	r0, r6
 800a614:	f000 f896 	bl	800a744 <_sbrk_r>
 800a618:	3001      	adds	r0, #1
 800a61a:	d1dd      	bne.n	800a5d8 <_malloc_r+0x64>
 800a61c:	e7cf      	b.n	800a5be <_malloc_r+0x4a>
 800a61e:	bf00      	nop
 800a620:	2000029c 	.word	0x2000029c
 800a624:	200002a0 	.word	0x200002a0

0800a628 <iprintf>:
 800a628:	b40f      	push	{r0, r1, r2, r3}
 800a62a:	4b0a      	ldr	r3, [pc, #40]	; (800a654 <iprintf+0x2c>)
 800a62c:	b513      	push	{r0, r1, r4, lr}
 800a62e:	681c      	ldr	r4, [r3, #0]
 800a630:	b124      	cbz	r4, 800a63c <iprintf+0x14>
 800a632:	69a3      	ldr	r3, [r4, #24]
 800a634:	b913      	cbnz	r3, 800a63c <iprintf+0x14>
 800a636:	4620      	mov	r0, r4
 800a638:	f000 fa98 	bl	800ab6c <__sinit>
 800a63c:	ab05      	add	r3, sp, #20
 800a63e:	4620      	mov	r0, r4
 800a640:	9a04      	ldr	r2, [sp, #16]
 800a642:	68a1      	ldr	r1, [r4, #8]
 800a644:	9301      	str	r3, [sp, #4]
 800a646:	f000 fbc9 	bl	800addc <_vfiprintf_r>
 800a64a:	b002      	add	sp, #8
 800a64c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a650:	b004      	add	sp, #16
 800a652:	4770      	bx	lr
 800a654:	2000001c 	.word	0x2000001c

0800a658 <_puts_r>:
 800a658:	b570      	push	{r4, r5, r6, lr}
 800a65a:	460e      	mov	r6, r1
 800a65c:	4605      	mov	r5, r0
 800a65e:	b118      	cbz	r0, 800a668 <_puts_r+0x10>
 800a660:	6983      	ldr	r3, [r0, #24]
 800a662:	b90b      	cbnz	r3, 800a668 <_puts_r+0x10>
 800a664:	f000 fa82 	bl	800ab6c <__sinit>
 800a668:	69ab      	ldr	r3, [r5, #24]
 800a66a:	68ac      	ldr	r4, [r5, #8]
 800a66c:	b913      	cbnz	r3, 800a674 <_puts_r+0x1c>
 800a66e:	4628      	mov	r0, r5
 800a670:	f000 fa7c 	bl	800ab6c <__sinit>
 800a674:	4b2c      	ldr	r3, [pc, #176]	; (800a728 <_puts_r+0xd0>)
 800a676:	429c      	cmp	r4, r3
 800a678:	d120      	bne.n	800a6bc <_puts_r+0x64>
 800a67a:	686c      	ldr	r4, [r5, #4]
 800a67c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a67e:	07db      	lsls	r3, r3, #31
 800a680:	d405      	bmi.n	800a68e <_puts_r+0x36>
 800a682:	89a3      	ldrh	r3, [r4, #12]
 800a684:	0598      	lsls	r0, r3, #22
 800a686:	d402      	bmi.n	800a68e <_puts_r+0x36>
 800a688:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a68a:	f000 fb0d 	bl	800aca8 <__retarget_lock_acquire_recursive>
 800a68e:	89a3      	ldrh	r3, [r4, #12]
 800a690:	0719      	lsls	r1, r3, #28
 800a692:	d51d      	bpl.n	800a6d0 <_puts_r+0x78>
 800a694:	6923      	ldr	r3, [r4, #16]
 800a696:	b1db      	cbz	r3, 800a6d0 <_puts_r+0x78>
 800a698:	3e01      	subs	r6, #1
 800a69a:	68a3      	ldr	r3, [r4, #8]
 800a69c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a6a0:	3b01      	subs	r3, #1
 800a6a2:	60a3      	str	r3, [r4, #8]
 800a6a4:	bb39      	cbnz	r1, 800a6f6 <_puts_r+0x9e>
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	da38      	bge.n	800a71c <_puts_r+0xc4>
 800a6aa:	4622      	mov	r2, r4
 800a6ac:	210a      	movs	r1, #10
 800a6ae:	4628      	mov	r0, r5
 800a6b0:	f000 f882 	bl	800a7b8 <__swbuf_r>
 800a6b4:	3001      	adds	r0, #1
 800a6b6:	d011      	beq.n	800a6dc <_puts_r+0x84>
 800a6b8:	250a      	movs	r5, #10
 800a6ba:	e011      	b.n	800a6e0 <_puts_r+0x88>
 800a6bc:	4b1b      	ldr	r3, [pc, #108]	; (800a72c <_puts_r+0xd4>)
 800a6be:	429c      	cmp	r4, r3
 800a6c0:	d101      	bne.n	800a6c6 <_puts_r+0x6e>
 800a6c2:	68ac      	ldr	r4, [r5, #8]
 800a6c4:	e7da      	b.n	800a67c <_puts_r+0x24>
 800a6c6:	4b1a      	ldr	r3, [pc, #104]	; (800a730 <_puts_r+0xd8>)
 800a6c8:	429c      	cmp	r4, r3
 800a6ca:	bf08      	it	eq
 800a6cc:	68ec      	ldreq	r4, [r5, #12]
 800a6ce:	e7d5      	b.n	800a67c <_puts_r+0x24>
 800a6d0:	4621      	mov	r1, r4
 800a6d2:	4628      	mov	r0, r5
 800a6d4:	f000 f8c2 	bl	800a85c <__swsetup_r>
 800a6d8:	2800      	cmp	r0, #0
 800a6da:	d0dd      	beq.n	800a698 <_puts_r+0x40>
 800a6dc:	f04f 35ff 	mov.w	r5, #4294967295
 800a6e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a6e2:	07da      	lsls	r2, r3, #31
 800a6e4:	d405      	bmi.n	800a6f2 <_puts_r+0x9a>
 800a6e6:	89a3      	ldrh	r3, [r4, #12]
 800a6e8:	059b      	lsls	r3, r3, #22
 800a6ea:	d402      	bmi.n	800a6f2 <_puts_r+0x9a>
 800a6ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a6ee:	f000 fadc 	bl	800acaa <__retarget_lock_release_recursive>
 800a6f2:	4628      	mov	r0, r5
 800a6f4:	bd70      	pop	{r4, r5, r6, pc}
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	da04      	bge.n	800a704 <_puts_r+0xac>
 800a6fa:	69a2      	ldr	r2, [r4, #24]
 800a6fc:	429a      	cmp	r2, r3
 800a6fe:	dc06      	bgt.n	800a70e <_puts_r+0xb6>
 800a700:	290a      	cmp	r1, #10
 800a702:	d004      	beq.n	800a70e <_puts_r+0xb6>
 800a704:	6823      	ldr	r3, [r4, #0]
 800a706:	1c5a      	adds	r2, r3, #1
 800a708:	6022      	str	r2, [r4, #0]
 800a70a:	7019      	strb	r1, [r3, #0]
 800a70c:	e7c5      	b.n	800a69a <_puts_r+0x42>
 800a70e:	4622      	mov	r2, r4
 800a710:	4628      	mov	r0, r5
 800a712:	f000 f851 	bl	800a7b8 <__swbuf_r>
 800a716:	3001      	adds	r0, #1
 800a718:	d1bf      	bne.n	800a69a <_puts_r+0x42>
 800a71a:	e7df      	b.n	800a6dc <_puts_r+0x84>
 800a71c:	250a      	movs	r5, #10
 800a71e:	6823      	ldr	r3, [r4, #0]
 800a720:	1c5a      	adds	r2, r3, #1
 800a722:	6022      	str	r2, [r4, #0]
 800a724:	701d      	strb	r5, [r3, #0]
 800a726:	e7db      	b.n	800a6e0 <_puts_r+0x88>
 800a728:	0800c41c 	.word	0x0800c41c
 800a72c:	0800c43c 	.word	0x0800c43c
 800a730:	0800c3fc 	.word	0x0800c3fc

0800a734 <puts>:
 800a734:	4b02      	ldr	r3, [pc, #8]	; (800a740 <puts+0xc>)
 800a736:	4601      	mov	r1, r0
 800a738:	6818      	ldr	r0, [r3, #0]
 800a73a:	f7ff bf8d 	b.w	800a658 <_puts_r>
 800a73e:	bf00      	nop
 800a740:	2000001c 	.word	0x2000001c

0800a744 <_sbrk_r>:
 800a744:	b538      	push	{r3, r4, r5, lr}
 800a746:	2300      	movs	r3, #0
 800a748:	4d05      	ldr	r5, [pc, #20]	; (800a760 <_sbrk_r+0x1c>)
 800a74a:	4604      	mov	r4, r0
 800a74c:	4608      	mov	r0, r1
 800a74e:	602b      	str	r3, [r5, #0]
 800a750:	f7f7 fc12 	bl	8001f78 <_sbrk>
 800a754:	1c43      	adds	r3, r0, #1
 800a756:	d102      	bne.n	800a75e <_sbrk_r+0x1a>
 800a758:	682b      	ldr	r3, [r5, #0]
 800a75a:	b103      	cbz	r3, 800a75e <_sbrk_r+0x1a>
 800a75c:	6023      	str	r3, [r4, #0]
 800a75e:	bd38      	pop	{r3, r4, r5, pc}
 800a760:	20000980 	.word	0x20000980

0800a764 <strncpy>:
 800a764:	4603      	mov	r3, r0
 800a766:	b510      	push	{r4, lr}
 800a768:	3901      	subs	r1, #1
 800a76a:	b132      	cbz	r2, 800a77a <strncpy+0x16>
 800a76c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a770:	3a01      	subs	r2, #1
 800a772:	f803 4b01 	strb.w	r4, [r3], #1
 800a776:	2c00      	cmp	r4, #0
 800a778:	d1f7      	bne.n	800a76a <strncpy+0x6>
 800a77a:	2100      	movs	r1, #0
 800a77c:	441a      	add	r2, r3
 800a77e:	4293      	cmp	r3, r2
 800a780:	d100      	bne.n	800a784 <strncpy+0x20>
 800a782:	bd10      	pop	{r4, pc}
 800a784:	f803 1b01 	strb.w	r1, [r3], #1
 800a788:	e7f9      	b.n	800a77e <strncpy+0x1a>
	...

0800a78c <viprintf>:
 800a78c:	4b09      	ldr	r3, [pc, #36]	; (800a7b4 <viprintf+0x28>)
 800a78e:	b570      	push	{r4, r5, r6, lr}
 800a790:	681c      	ldr	r4, [r3, #0]
 800a792:	4605      	mov	r5, r0
 800a794:	460e      	mov	r6, r1
 800a796:	b124      	cbz	r4, 800a7a2 <viprintf+0x16>
 800a798:	69a3      	ldr	r3, [r4, #24]
 800a79a:	b913      	cbnz	r3, 800a7a2 <viprintf+0x16>
 800a79c:	4620      	mov	r0, r4
 800a79e:	f000 f9e5 	bl	800ab6c <__sinit>
 800a7a2:	4633      	mov	r3, r6
 800a7a4:	462a      	mov	r2, r5
 800a7a6:	4620      	mov	r0, r4
 800a7a8:	68a1      	ldr	r1, [r4, #8]
 800a7aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a7ae:	f000 bb15 	b.w	800addc <_vfiprintf_r>
 800a7b2:	bf00      	nop
 800a7b4:	2000001c 	.word	0x2000001c

0800a7b8 <__swbuf_r>:
 800a7b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7ba:	460e      	mov	r6, r1
 800a7bc:	4614      	mov	r4, r2
 800a7be:	4605      	mov	r5, r0
 800a7c0:	b118      	cbz	r0, 800a7ca <__swbuf_r+0x12>
 800a7c2:	6983      	ldr	r3, [r0, #24]
 800a7c4:	b90b      	cbnz	r3, 800a7ca <__swbuf_r+0x12>
 800a7c6:	f000 f9d1 	bl	800ab6c <__sinit>
 800a7ca:	4b21      	ldr	r3, [pc, #132]	; (800a850 <__swbuf_r+0x98>)
 800a7cc:	429c      	cmp	r4, r3
 800a7ce:	d12b      	bne.n	800a828 <__swbuf_r+0x70>
 800a7d0:	686c      	ldr	r4, [r5, #4]
 800a7d2:	69a3      	ldr	r3, [r4, #24]
 800a7d4:	60a3      	str	r3, [r4, #8]
 800a7d6:	89a3      	ldrh	r3, [r4, #12]
 800a7d8:	071a      	lsls	r2, r3, #28
 800a7da:	d52f      	bpl.n	800a83c <__swbuf_r+0x84>
 800a7dc:	6923      	ldr	r3, [r4, #16]
 800a7de:	b36b      	cbz	r3, 800a83c <__swbuf_r+0x84>
 800a7e0:	6923      	ldr	r3, [r4, #16]
 800a7e2:	6820      	ldr	r0, [r4, #0]
 800a7e4:	b2f6      	uxtb	r6, r6
 800a7e6:	1ac0      	subs	r0, r0, r3
 800a7e8:	6963      	ldr	r3, [r4, #20]
 800a7ea:	4637      	mov	r7, r6
 800a7ec:	4283      	cmp	r3, r0
 800a7ee:	dc04      	bgt.n	800a7fa <__swbuf_r+0x42>
 800a7f0:	4621      	mov	r1, r4
 800a7f2:	4628      	mov	r0, r5
 800a7f4:	f000 f926 	bl	800aa44 <_fflush_r>
 800a7f8:	bb30      	cbnz	r0, 800a848 <__swbuf_r+0x90>
 800a7fa:	68a3      	ldr	r3, [r4, #8]
 800a7fc:	3001      	adds	r0, #1
 800a7fe:	3b01      	subs	r3, #1
 800a800:	60a3      	str	r3, [r4, #8]
 800a802:	6823      	ldr	r3, [r4, #0]
 800a804:	1c5a      	adds	r2, r3, #1
 800a806:	6022      	str	r2, [r4, #0]
 800a808:	701e      	strb	r6, [r3, #0]
 800a80a:	6963      	ldr	r3, [r4, #20]
 800a80c:	4283      	cmp	r3, r0
 800a80e:	d004      	beq.n	800a81a <__swbuf_r+0x62>
 800a810:	89a3      	ldrh	r3, [r4, #12]
 800a812:	07db      	lsls	r3, r3, #31
 800a814:	d506      	bpl.n	800a824 <__swbuf_r+0x6c>
 800a816:	2e0a      	cmp	r6, #10
 800a818:	d104      	bne.n	800a824 <__swbuf_r+0x6c>
 800a81a:	4621      	mov	r1, r4
 800a81c:	4628      	mov	r0, r5
 800a81e:	f000 f911 	bl	800aa44 <_fflush_r>
 800a822:	b988      	cbnz	r0, 800a848 <__swbuf_r+0x90>
 800a824:	4638      	mov	r0, r7
 800a826:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a828:	4b0a      	ldr	r3, [pc, #40]	; (800a854 <__swbuf_r+0x9c>)
 800a82a:	429c      	cmp	r4, r3
 800a82c:	d101      	bne.n	800a832 <__swbuf_r+0x7a>
 800a82e:	68ac      	ldr	r4, [r5, #8]
 800a830:	e7cf      	b.n	800a7d2 <__swbuf_r+0x1a>
 800a832:	4b09      	ldr	r3, [pc, #36]	; (800a858 <__swbuf_r+0xa0>)
 800a834:	429c      	cmp	r4, r3
 800a836:	bf08      	it	eq
 800a838:	68ec      	ldreq	r4, [r5, #12]
 800a83a:	e7ca      	b.n	800a7d2 <__swbuf_r+0x1a>
 800a83c:	4621      	mov	r1, r4
 800a83e:	4628      	mov	r0, r5
 800a840:	f000 f80c 	bl	800a85c <__swsetup_r>
 800a844:	2800      	cmp	r0, #0
 800a846:	d0cb      	beq.n	800a7e0 <__swbuf_r+0x28>
 800a848:	f04f 37ff 	mov.w	r7, #4294967295
 800a84c:	e7ea      	b.n	800a824 <__swbuf_r+0x6c>
 800a84e:	bf00      	nop
 800a850:	0800c41c 	.word	0x0800c41c
 800a854:	0800c43c 	.word	0x0800c43c
 800a858:	0800c3fc 	.word	0x0800c3fc

0800a85c <__swsetup_r>:
 800a85c:	4b32      	ldr	r3, [pc, #200]	; (800a928 <__swsetup_r+0xcc>)
 800a85e:	b570      	push	{r4, r5, r6, lr}
 800a860:	681d      	ldr	r5, [r3, #0]
 800a862:	4606      	mov	r6, r0
 800a864:	460c      	mov	r4, r1
 800a866:	b125      	cbz	r5, 800a872 <__swsetup_r+0x16>
 800a868:	69ab      	ldr	r3, [r5, #24]
 800a86a:	b913      	cbnz	r3, 800a872 <__swsetup_r+0x16>
 800a86c:	4628      	mov	r0, r5
 800a86e:	f000 f97d 	bl	800ab6c <__sinit>
 800a872:	4b2e      	ldr	r3, [pc, #184]	; (800a92c <__swsetup_r+0xd0>)
 800a874:	429c      	cmp	r4, r3
 800a876:	d10f      	bne.n	800a898 <__swsetup_r+0x3c>
 800a878:	686c      	ldr	r4, [r5, #4]
 800a87a:	89a3      	ldrh	r3, [r4, #12]
 800a87c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a880:	0719      	lsls	r1, r3, #28
 800a882:	d42c      	bmi.n	800a8de <__swsetup_r+0x82>
 800a884:	06dd      	lsls	r5, r3, #27
 800a886:	d411      	bmi.n	800a8ac <__swsetup_r+0x50>
 800a888:	2309      	movs	r3, #9
 800a88a:	6033      	str	r3, [r6, #0]
 800a88c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a890:	f04f 30ff 	mov.w	r0, #4294967295
 800a894:	81a3      	strh	r3, [r4, #12]
 800a896:	e03e      	b.n	800a916 <__swsetup_r+0xba>
 800a898:	4b25      	ldr	r3, [pc, #148]	; (800a930 <__swsetup_r+0xd4>)
 800a89a:	429c      	cmp	r4, r3
 800a89c:	d101      	bne.n	800a8a2 <__swsetup_r+0x46>
 800a89e:	68ac      	ldr	r4, [r5, #8]
 800a8a0:	e7eb      	b.n	800a87a <__swsetup_r+0x1e>
 800a8a2:	4b24      	ldr	r3, [pc, #144]	; (800a934 <__swsetup_r+0xd8>)
 800a8a4:	429c      	cmp	r4, r3
 800a8a6:	bf08      	it	eq
 800a8a8:	68ec      	ldreq	r4, [r5, #12]
 800a8aa:	e7e6      	b.n	800a87a <__swsetup_r+0x1e>
 800a8ac:	0758      	lsls	r0, r3, #29
 800a8ae:	d512      	bpl.n	800a8d6 <__swsetup_r+0x7a>
 800a8b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a8b2:	b141      	cbz	r1, 800a8c6 <__swsetup_r+0x6a>
 800a8b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a8b8:	4299      	cmp	r1, r3
 800a8ba:	d002      	beq.n	800a8c2 <__swsetup_r+0x66>
 800a8bc:	4630      	mov	r0, r6
 800a8be:	f7ff fe0d 	bl	800a4dc <_free_r>
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	6363      	str	r3, [r4, #52]	; 0x34
 800a8c6:	89a3      	ldrh	r3, [r4, #12]
 800a8c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a8cc:	81a3      	strh	r3, [r4, #12]
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	6063      	str	r3, [r4, #4]
 800a8d2:	6923      	ldr	r3, [r4, #16]
 800a8d4:	6023      	str	r3, [r4, #0]
 800a8d6:	89a3      	ldrh	r3, [r4, #12]
 800a8d8:	f043 0308 	orr.w	r3, r3, #8
 800a8dc:	81a3      	strh	r3, [r4, #12]
 800a8de:	6923      	ldr	r3, [r4, #16]
 800a8e0:	b94b      	cbnz	r3, 800a8f6 <__swsetup_r+0x9a>
 800a8e2:	89a3      	ldrh	r3, [r4, #12]
 800a8e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a8e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a8ec:	d003      	beq.n	800a8f6 <__swsetup_r+0x9a>
 800a8ee:	4621      	mov	r1, r4
 800a8f0:	4630      	mov	r0, r6
 800a8f2:	f000 f9ff 	bl	800acf4 <__smakebuf_r>
 800a8f6:	89a0      	ldrh	r0, [r4, #12]
 800a8f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a8fc:	f010 0301 	ands.w	r3, r0, #1
 800a900:	d00a      	beq.n	800a918 <__swsetup_r+0xbc>
 800a902:	2300      	movs	r3, #0
 800a904:	60a3      	str	r3, [r4, #8]
 800a906:	6963      	ldr	r3, [r4, #20]
 800a908:	425b      	negs	r3, r3
 800a90a:	61a3      	str	r3, [r4, #24]
 800a90c:	6923      	ldr	r3, [r4, #16]
 800a90e:	b943      	cbnz	r3, 800a922 <__swsetup_r+0xc6>
 800a910:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a914:	d1ba      	bne.n	800a88c <__swsetup_r+0x30>
 800a916:	bd70      	pop	{r4, r5, r6, pc}
 800a918:	0781      	lsls	r1, r0, #30
 800a91a:	bf58      	it	pl
 800a91c:	6963      	ldrpl	r3, [r4, #20]
 800a91e:	60a3      	str	r3, [r4, #8]
 800a920:	e7f4      	b.n	800a90c <__swsetup_r+0xb0>
 800a922:	2000      	movs	r0, #0
 800a924:	e7f7      	b.n	800a916 <__swsetup_r+0xba>
 800a926:	bf00      	nop
 800a928:	2000001c 	.word	0x2000001c
 800a92c:	0800c41c 	.word	0x0800c41c
 800a930:	0800c43c 	.word	0x0800c43c
 800a934:	0800c3fc 	.word	0x0800c3fc

0800a938 <__sflush_r>:
 800a938:	898a      	ldrh	r2, [r1, #12]
 800a93a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a93e:	4605      	mov	r5, r0
 800a940:	0710      	lsls	r0, r2, #28
 800a942:	460c      	mov	r4, r1
 800a944:	d458      	bmi.n	800a9f8 <__sflush_r+0xc0>
 800a946:	684b      	ldr	r3, [r1, #4]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	dc05      	bgt.n	800a958 <__sflush_r+0x20>
 800a94c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a94e:	2b00      	cmp	r3, #0
 800a950:	dc02      	bgt.n	800a958 <__sflush_r+0x20>
 800a952:	2000      	movs	r0, #0
 800a954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a958:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a95a:	2e00      	cmp	r6, #0
 800a95c:	d0f9      	beq.n	800a952 <__sflush_r+0x1a>
 800a95e:	2300      	movs	r3, #0
 800a960:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a964:	682f      	ldr	r7, [r5, #0]
 800a966:	602b      	str	r3, [r5, #0]
 800a968:	d032      	beq.n	800a9d0 <__sflush_r+0x98>
 800a96a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a96c:	89a3      	ldrh	r3, [r4, #12]
 800a96e:	075a      	lsls	r2, r3, #29
 800a970:	d505      	bpl.n	800a97e <__sflush_r+0x46>
 800a972:	6863      	ldr	r3, [r4, #4]
 800a974:	1ac0      	subs	r0, r0, r3
 800a976:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a978:	b10b      	cbz	r3, 800a97e <__sflush_r+0x46>
 800a97a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a97c:	1ac0      	subs	r0, r0, r3
 800a97e:	2300      	movs	r3, #0
 800a980:	4602      	mov	r2, r0
 800a982:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a984:	4628      	mov	r0, r5
 800a986:	6a21      	ldr	r1, [r4, #32]
 800a988:	47b0      	blx	r6
 800a98a:	1c43      	adds	r3, r0, #1
 800a98c:	89a3      	ldrh	r3, [r4, #12]
 800a98e:	d106      	bne.n	800a99e <__sflush_r+0x66>
 800a990:	6829      	ldr	r1, [r5, #0]
 800a992:	291d      	cmp	r1, #29
 800a994:	d82c      	bhi.n	800a9f0 <__sflush_r+0xb8>
 800a996:	4a2a      	ldr	r2, [pc, #168]	; (800aa40 <__sflush_r+0x108>)
 800a998:	40ca      	lsrs	r2, r1
 800a99a:	07d6      	lsls	r6, r2, #31
 800a99c:	d528      	bpl.n	800a9f0 <__sflush_r+0xb8>
 800a99e:	2200      	movs	r2, #0
 800a9a0:	6062      	str	r2, [r4, #4]
 800a9a2:	6922      	ldr	r2, [r4, #16]
 800a9a4:	04d9      	lsls	r1, r3, #19
 800a9a6:	6022      	str	r2, [r4, #0]
 800a9a8:	d504      	bpl.n	800a9b4 <__sflush_r+0x7c>
 800a9aa:	1c42      	adds	r2, r0, #1
 800a9ac:	d101      	bne.n	800a9b2 <__sflush_r+0x7a>
 800a9ae:	682b      	ldr	r3, [r5, #0]
 800a9b0:	b903      	cbnz	r3, 800a9b4 <__sflush_r+0x7c>
 800a9b2:	6560      	str	r0, [r4, #84]	; 0x54
 800a9b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a9b6:	602f      	str	r7, [r5, #0]
 800a9b8:	2900      	cmp	r1, #0
 800a9ba:	d0ca      	beq.n	800a952 <__sflush_r+0x1a>
 800a9bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a9c0:	4299      	cmp	r1, r3
 800a9c2:	d002      	beq.n	800a9ca <__sflush_r+0x92>
 800a9c4:	4628      	mov	r0, r5
 800a9c6:	f7ff fd89 	bl	800a4dc <_free_r>
 800a9ca:	2000      	movs	r0, #0
 800a9cc:	6360      	str	r0, [r4, #52]	; 0x34
 800a9ce:	e7c1      	b.n	800a954 <__sflush_r+0x1c>
 800a9d0:	6a21      	ldr	r1, [r4, #32]
 800a9d2:	2301      	movs	r3, #1
 800a9d4:	4628      	mov	r0, r5
 800a9d6:	47b0      	blx	r6
 800a9d8:	1c41      	adds	r1, r0, #1
 800a9da:	d1c7      	bne.n	800a96c <__sflush_r+0x34>
 800a9dc:	682b      	ldr	r3, [r5, #0]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d0c4      	beq.n	800a96c <__sflush_r+0x34>
 800a9e2:	2b1d      	cmp	r3, #29
 800a9e4:	d001      	beq.n	800a9ea <__sflush_r+0xb2>
 800a9e6:	2b16      	cmp	r3, #22
 800a9e8:	d101      	bne.n	800a9ee <__sflush_r+0xb6>
 800a9ea:	602f      	str	r7, [r5, #0]
 800a9ec:	e7b1      	b.n	800a952 <__sflush_r+0x1a>
 800a9ee:	89a3      	ldrh	r3, [r4, #12]
 800a9f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a9f4:	81a3      	strh	r3, [r4, #12]
 800a9f6:	e7ad      	b.n	800a954 <__sflush_r+0x1c>
 800a9f8:	690f      	ldr	r7, [r1, #16]
 800a9fa:	2f00      	cmp	r7, #0
 800a9fc:	d0a9      	beq.n	800a952 <__sflush_r+0x1a>
 800a9fe:	0793      	lsls	r3, r2, #30
 800aa00:	bf18      	it	ne
 800aa02:	2300      	movne	r3, #0
 800aa04:	680e      	ldr	r6, [r1, #0]
 800aa06:	bf08      	it	eq
 800aa08:	694b      	ldreq	r3, [r1, #20]
 800aa0a:	eba6 0807 	sub.w	r8, r6, r7
 800aa0e:	600f      	str	r7, [r1, #0]
 800aa10:	608b      	str	r3, [r1, #8]
 800aa12:	f1b8 0f00 	cmp.w	r8, #0
 800aa16:	dd9c      	ble.n	800a952 <__sflush_r+0x1a>
 800aa18:	4643      	mov	r3, r8
 800aa1a:	463a      	mov	r2, r7
 800aa1c:	4628      	mov	r0, r5
 800aa1e:	6a21      	ldr	r1, [r4, #32]
 800aa20:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800aa22:	47b0      	blx	r6
 800aa24:	2800      	cmp	r0, #0
 800aa26:	dc06      	bgt.n	800aa36 <__sflush_r+0xfe>
 800aa28:	89a3      	ldrh	r3, [r4, #12]
 800aa2a:	f04f 30ff 	mov.w	r0, #4294967295
 800aa2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa32:	81a3      	strh	r3, [r4, #12]
 800aa34:	e78e      	b.n	800a954 <__sflush_r+0x1c>
 800aa36:	4407      	add	r7, r0
 800aa38:	eba8 0800 	sub.w	r8, r8, r0
 800aa3c:	e7e9      	b.n	800aa12 <__sflush_r+0xda>
 800aa3e:	bf00      	nop
 800aa40:	20400001 	.word	0x20400001

0800aa44 <_fflush_r>:
 800aa44:	b538      	push	{r3, r4, r5, lr}
 800aa46:	690b      	ldr	r3, [r1, #16]
 800aa48:	4605      	mov	r5, r0
 800aa4a:	460c      	mov	r4, r1
 800aa4c:	b913      	cbnz	r3, 800aa54 <_fflush_r+0x10>
 800aa4e:	2500      	movs	r5, #0
 800aa50:	4628      	mov	r0, r5
 800aa52:	bd38      	pop	{r3, r4, r5, pc}
 800aa54:	b118      	cbz	r0, 800aa5e <_fflush_r+0x1a>
 800aa56:	6983      	ldr	r3, [r0, #24]
 800aa58:	b90b      	cbnz	r3, 800aa5e <_fflush_r+0x1a>
 800aa5a:	f000 f887 	bl	800ab6c <__sinit>
 800aa5e:	4b14      	ldr	r3, [pc, #80]	; (800aab0 <_fflush_r+0x6c>)
 800aa60:	429c      	cmp	r4, r3
 800aa62:	d11b      	bne.n	800aa9c <_fflush_r+0x58>
 800aa64:	686c      	ldr	r4, [r5, #4]
 800aa66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d0ef      	beq.n	800aa4e <_fflush_r+0xa>
 800aa6e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aa70:	07d0      	lsls	r0, r2, #31
 800aa72:	d404      	bmi.n	800aa7e <_fflush_r+0x3a>
 800aa74:	0599      	lsls	r1, r3, #22
 800aa76:	d402      	bmi.n	800aa7e <_fflush_r+0x3a>
 800aa78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa7a:	f000 f915 	bl	800aca8 <__retarget_lock_acquire_recursive>
 800aa7e:	4628      	mov	r0, r5
 800aa80:	4621      	mov	r1, r4
 800aa82:	f7ff ff59 	bl	800a938 <__sflush_r>
 800aa86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aa88:	4605      	mov	r5, r0
 800aa8a:	07da      	lsls	r2, r3, #31
 800aa8c:	d4e0      	bmi.n	800aa50 <_fflush_r+0xc>
 800aa8e:	89a3      	ldrh	r3, [r4, #12]
 800aa90:	059b      	lsls	r3, r3, #22
 800aa92:	d4dd      	bmi.n	800aa50 <_fflush_r+0xc>
 800aa94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa96:	f000 f908 	bl	800acaa <__retarget_lock_release_recursive>
 800aa9a:	e7d9      	b.n	800aa50 <_fflush_r+0xc>
 800aa9c:	4b05      	ldr	r3, [pc, #20]	; (800aab4 <_fflush_r+0x70>)
 800aa9e:	429c      	cmp	r4, r3
 800aaa0:	d101      	bne.n	800aaa6 <_fflush_r+0x62>
 800aaa2:	68ac      	ldr	r4, [r5, #8]
 800aaa4:	e7df      	b.n	800aa66 <_fflush_r+0x22>
 800aaa6:	4b04      	ldr	r3, [pc, #16]	; (800aab8 <_fflush_r+0x74>)
 800aaa8:	429c      	cmp	r4, r3
 800aaaa:	bf08      	it	eq
 800aaac:	68ec      	ldreq	r4, [r5, #12]
 800aaae:	e7da      	b.n	800aa66 <_fflush_r+0x22>
 800aab0:	0800c41c 	.word	0x0800c41c
 800aab4:	0800c43c 	.word	0x0800c43c
 800aab8:	0800c3fc 	.word	0x0800c3fc

0800aabc <std>:
 800aabc:	2300      	movs	r3, #0
 800aabe:	b510      	push	{r4, lr}
 800aac0:	4604      	mov	r4, r0
 800aac2:	e9c0 3300 	strd	r3, r3, [r0]
 800aac6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aaca:	6083      	str	r3, [r0, #8]
 800aacc:	8181      	strh	r1, [r0, #12]
 800aace:	6643      	str	r3, [r0, #100]	; 0x64
 800aad0:	81c2      	strh	r2, [r0, #14]
 800aad2:	6183      	str	r3, [r0, #24]
 800aad4:	4619      	mov	r1, r3
 800aad6:	2208      	movs	r2, #8
 800aad8:	305c      	adds	r0, #92	; 0x5c
 800aada:	f7ff fcf7 	bl	800a4cc <memset>
 800aade:	4b05      	ldr	r3, [pc, #20]	; (800aaf4 <std+0x38>)
 800aae0:	6224      	str	r4, [r4, #32]
 800aae2:	6263      	str	r3, [r4, #36]	; 0x24
 800aae4:	4b04      	ldr	r3, [pc, #16]	; (800aaf8 <std+0x3c>)
 800aae6:	62a3      	str	r3, [r4, #40]	; 0x28
 800aae8:	4b04      	ldr	r3, [pc, #16]	; (800aafc <std+0x40>)
 800aaea:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aaec:	4b04      	ldr	r3, [pc, #16]	; (800ab00 <std+0x44>)
 800aaee:	6323      	str	r3, [r4, #48]	; 0x30
 800aaf0:	bd10      	pop	{r4, pc}
 800aaf2:	bf00      	nop
 800aaf4:	0800b369 	.word	0x0800b369
 800aaf8:	0800b38b 	.word	0x0800b38b
 800aafc:	0800b3c3 	.word	0x0800b3c3
 800ab00:	0800b3e7 	.word	0x0800b3e7

0800ab04 <_cleanup_r>:
 800ab04:	4901      	ldr	r1, [pc, #4]	; (800ab0c <_cleanup_r+0x8>)
 800ab06:	f000 b8af 	b.w	800ac68 <_fwalk_reent>
 800ab0a:	bf00      	nop
 800ab0c:	0800aa45 	.word	0x0800aa45

0800ab10 <__sfmoreglue>:
 800ab10:	b570      	push	{r4, r5, r6, lr}
 800ab12:	2568      	movs	r5, #104	; 0x68
 800ab14:	1e4a      	subs	r2, r1, #1
 800ab16:	4355      	muls	r5, r2
 800ab18:	460e      	mov	r6, r1
 800ab1a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ab1e:	f7ff fd29 	bl	800a574 <_malloc_r>
 800ab22:	4604      	mov	r4, r0
 800ab24:	b140      	cbz	r0, 800ab38 <__sfmoreglue+0x28>
 800ab26:	2100      	movs	r1, #0
 800ab28:	e9c0 1600 	strd	r1, r6, [r0]
 800ab2c:	300c      	adds	r0, #12
 800ab2e:	60a0      	str	r0, [r4, #8]
 800ab30:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ab34:	f7ff fcca 	bl	800a4cc <memset>
 800ab38:	4620      	mov	r0, r4
 800ab3a:	bd70      	pop	{r4, r5, r6, pc}

0800ab3c <__sfp_lock_acquire>:
 800ab3c:	4801      	ldr	r0, [pc, #4]	; (800ab44 <__sfp_lock_acquire+0x8>)
 800ab3e:	f000 b8b3 	b.w	800aca8 <__retarget_lock_acquire_recursive>
 800ab42:	bf00      	nop
 800ab44:	2000097c 	.word	0x2000097c

0800ab48 <__sfp_lock_release>:
 800ab48:	4801      	ldr	r0, [pc, #4]	; (800ab50 <__sfp_lock_release+0x8>)
 800ab4a:	f000 b8ae 	b.w	800acaa <__retarget_lock_release_recursive>
 800ab4e:	bf00      	nop
 800ab50:	2000097c 	.word	0x2000097c

0800ab54 <__sinit_lock_acquire>:
 800ab54:	4801      	ldr	r0, [pc, #4]	; (800ab5c <__sinit_lock_acquire+0x8>)
 800ab56:	f000 b8a7 	b.w	800aca8 <__retarget_lock_acquire_recursive>
 800ab5a:	bf00      	nop
 800ab5c:	20000977 	.word	0x20000977

0800ab60 <__sinit_lock_release>:
 800ab60:	4801      	ldr	r0, [pc, #4]	; (800ab68 <__sinit_lock_release+0x8>)
 800ab62:	f000 b8a2 	b.w	800acaa <__retarget_lock_release_recursive>
 800ab66:	bf00      	nop
 800ab68:	20000977 	.word	0x20000977

0800ab6c <__sinit>:
 800ab6c:	b510      	push	{r4, lr}
 800ab6e:	4604      	mov	r4, r0
 800ab70:	f7ff fff0 	bl	800ab54 <__sinit_lock_acquire>
 800ab74:	69a3      	ldr	r3, [r4, #24]
 800ab76:	b11b      	cbz	r3, 800ab80 <__sinit+0x14>
 800ab78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab7c:	f7ff bff0 	b.w	800ab60 <__sinit_lock_release>
 800ab80:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ab84:	6523      	str	r3, [r4, #80]	; 0x50
 800ab86:	4b13      	ldr	r3, [pc, #76]	; (800abd4 <__sinit+0x68>)
 800ab88:	4a13      	ldr	r2, [pc, #76]	; (800abd8 <__sinit+0x6c>)
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	62a2      	str	r2, [r4, #40]	; 0x28
 800ab8e:	42a3      	cmp	r3, r4
 800ab90:	bf08      	it	eq
 800ab92:	2301      	moveq	r3, #1
 800ab94:	4620      	mov	r0, r4
 800ab96:	bf08      	it	eq
 800ab98:	61a3      	streq	r3, [r4, #24]
 800ab9a:	f000 f81f 	bl	800abdc <__sfp>
 800ab9e:	6060      	str	r0, [r4, #4]
 800aba0:	4620      	mov	r0, r4
 800aba2:	f000 f81b 	bl	800abdc <__sfp>
 800aba6:	60a0      	str	r0, [r4, #8]
 800aba8:	4620      	mov	r0, r4
 800abaa:	f000 f817 	bl	800abdc <__sfp>
 800abae:	2200      	movs	r2, #0
 800abb0:	2104      	movs	r1, #4
 800abb2:	60e0      	str	r0, [r4, #12]
 800abb4:	6860      	ldr	r0, [r4, #4]
 800abb6:	f7ff ff81 	bl	800aabc <std>
 800abba:	2201      	movs	r2, #1
 800abbc:	2109      	movs	r1, #9
 800abbe:	68a0      	ldr	r0, [r4, #8]
 800abc0:	f7ff ff7c 	bl	800aabc <std>
 800abc4:	2202      	movs	r2, #2
 800abc6:	2112      	movs	r1, #18
 800abc8:	68e0      	ldr	r0, [r4, #12]
 800abca:	f7ff ff77 	bl	800aabc <std>
 800abce:	2301      	movs	r3, #1
 800abd0:	61a3      	str	r3, [r4, #24]
 800abd2:	e7d1      	b.n	800ab78 <__sinit+0xc>
 800abd4:	0800c3f8 	.word	0x0800c3f8
 800abd8:	0800ab05 	.word	0x0800ab05

0800abdc <__sfp>:
 800abdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abde:	4607      	mov	r7, r0
 800abe0:	f7ff ffac 	bl	800ab3c <__sfp_lock_acquire>
 800abe4:	4b1e      	ldr	r3, [pc, #120]	; (800ac60 <__sfp+0x84>)
 800abe6:	681e      	ldr	r6, [r3, #0]
 800abe8:	69b3      	ldr	r3, [r6, #24]
 800abea:	b913      	cbnz	r3, 800abf2 <__sfp+0x16>
 800abec:	4630      	mov	r0, r6
 800abee:	f7ff ffbd 	bl	800ab6c <__sinit>
 800abf2:	3648      	adds	r6, #72	; 0x48
 800abf4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800abf8:	3b01      	subs	r3, #1
 800abfa:	d503      	bpl.n	800ac04 <__sfp+0x28>
 800abfc:	6833      	ldr	r3, [r6, #0]
 800abfe:	b30b      	cbz	r3, 800ac44 <__sfp+0x68>
 800ac00:	6836      	ldr	r6, [r6, #0]
 800ac02:	e7f7      	b.n	800abf4 <__sfp+0x18>
 800ac04:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ac08:	b9d5      	cbnz	r5, 800ac40 <__sfp+0x64>
 800ac0a:	4b16      	ldr	r3, [pc, #88]	; (800ac64 <__sfp+0x88>)
 800ac0c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ac10:	60e3      	str	r3, [r4, #12]
 800ac12:	6665      	str	r5, [r4, #100]	; 0x64
 800ac14:	f000 f847 	bl	800aca6 <__retarget_lock_init_recursive>
 800ac18:	f7ff ff96 	bl	800ab48 <__sfp_lock_release>
 800ac1c:	2208      	movs	r2, #8
 800ac1e:	4629      	mov	r1, r5
 800ac20:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ac24:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ac28:	6025      	str	r5, [r4, #0]
 800ac2a:	61a5      	str	r5, [r4, #24]
 800ac2c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ac30:	f7ff fc4c 	bl	800a4cc <memset>
 800ac34:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ac38:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ac3c:	4620      	mov	r0, r4
 800ac3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac40:	3468      	adds	r4, #104	; 0x68
 800ac42:	e7d9      	b.n	800abf8 <__sfp+0x1c>
 800ac44:	2104      	movs	r1, #4
 800ac46:	4638      	mov	r0, r7
 800ac48:	f7ff ff62 	bl	800ab10 <__sfmoreglue>
 800ac4c:	4604      	mov	r4, r0
 800ac4e:	6030      	str	r0, [r6, #0]
 800ac50:	2800      	cmp	r0, #0
 800ac52:	d1d5      	bne.n	800ac00 <__sfp+0x24>
 800ac54:	f7ff ff78 	bl	800ab48 <__sfp_lock_release>
 800ac58:	230c      	movs	r3, #12
 800ac5a:	603b      	str	r3, [r7, #0]
 800ac5c:	e7ee      	b.n	800ac3c <__sfp+0x60>
 800ac5e:	bf00      	nop
 800ac60:	0800c3f8 	.word	0x0800c3f8
 800ac64:	ffff0001 	.word	0xffff0001

0800ac68 <_fwalk_reent>:
 800ac68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac6c:	4606      	mov	r6, r0
 800ac6e:	4688      	mov	r8, r1
 800ac70:	2700      	movs	r7, #0
 800ac72:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ac76:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ac7a:	f1b9 0901 	subs.w	r9, r9, #1
 800ac7e:	d505      	bpl.n	800ac8c <_fwalk_reent+0x24>
 800ac80:	6824      	ldr	r4, [r4, #0]
 800ac82:	2c00      	cmp	r4, #0
 800ac84:	d1f7      	bne.n	800ac76 <_fwalk_reent+0xe>
 800ac86:	4638      	mov	r0, r7
 800ac88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac8c:	89ab      	ldrh	r3, [r5, #12]
 800ac8e:	2b01      	cmp	r3, #1
 800ac90:	d907      	bls.n	800aca2 <_fwalk_reent+0x3a>
 800ac92:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ac96:	3301      	adds	r3, #1
 800ac98:	d003      	beq.n	800aca2 <_fwalk_reent+0x3a>
 800ac9a:	4629      	mov	r1, r5
 800ac9c:	4630      	mov	r0, r6
 800ac9e:	47c0      	blx	r8
 800aca0:	4307      	orrs	r7, r0
 800aca2:	3568      	adds	r5, #104	; 0x68
 800aca4:	e7e9      	b.n	800ac7a <_fwalk_reent+0x12>

0800aca6 <__retarget_lock_init_recursive>:
 800aca6:	4770      	bx	lr

0800aca8 <__retarget_lock_acquire_recursive>:
 800aca8:	4770      	bx	lr

0800acaa <__retarget_lock_release_recursive>:
 800acaa:	4770      	bx	lr

0800acac <__swhatbuf_r>:
 800acac:	b570      	push	{r4, r5, r6, lr}
 800acae:	460e      	mov	r6, r1
 800acb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acb4:	4614      	mov	r4, r2
 800acb6:	2900      	cmp	r1, #0
 800acb8:	461d      	mov	r5, r3
 800acba:	b096      	sub	sp, #88	; 0x58
 800acbc:	da07      	bge.n	800acce <__swhatbuf_r+0x22>
 800acbe:	2300      	movs	r3, #0
 800acc0:	602b      	str	r3, [r5, #0]
 800acc2:	89b3      	ldrh	r3, [r6, #12]
 800acc4:	061a      	lsls	r2, r3, #24
 800acc6:	d410      	bmi.n	800acea <__swhatbuf_r+0x3e>
 800acc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800accc:	e00e      	b.n	800acec <__swhatbuf_r+0x40>
 800acce:	466a      	mov	r2, sp
 800acd0:	f000 fbb0 	bl	800b434 <_fstat_r>
 800acd4:	2800      	cmp	r0, #0
 800acd6:	dbf2      	blt.n	800acbe <__swhatbuf_r+0x12>
 800acd8:	9a01      	ldr	r2, [sp, #4]
 800acda:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800acde:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ace2:	425a      	negs	r2, r3
 800ace4:	415a      	adcs	r2, r3
 800ace6:	602a      	str	r2, [r5, #0]
 800ace8:	e7ee      	b.n	800acc8 <__swhatbuf_r+0x1c>
 800acea:	2340      	movs	r3, #64	; 0x40
 800acec:	2000      	movs	r0, #0
 800acee:	6023      	str	r3, [r4, #0]
 800acf0:	b016      	add	sp, #88	; 0x58
 800acf2:	bd70      	pop	{r4, r5, r6, pc}

0800acf4 <__smakebuf_r>:
 800acf4:	898b      	ldrh	r3, [r1, #12]
 800acf6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800acf8:	079d      	lsls	r5, r3, #30
 800acfa:	4606      	mov	r6, r0
 800acfc:	460c      	mov	r4, r1
 800acfe:	d507      	bpl.n	800ad10 <__smakebuf_r+0x1c>
 800ad00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ad04:	6023      	str	r3, [r4, #0]
 800ad06:	6123      	str	r3, [r4, #16]
 800ad08:	2301      	movs	r3, #1
 800ad0a:	6163      	str	r3, [r4, #20]
 800ad0c:	b002      	add	sp, #8
 800ad0e:	bd70      	pop	{r4, r5, r6, pc}
 800ad10:	466a      	mov	r2, sp
 800ad12:	ab01      	add	r3, sp, #4
 800ad14:	f7ff ffca 	bl	800acac <__swhatbuf_r>
 800ad18:	9900      	ldr	r1, [sp, #0]
 800ad1a:	4605      	mov	r5, r0
 800ad1c:	4630      	mov	r0, r6
 800ad1e:	f7ff fc29 	bl	800a574 <_malloc_r>
 800ad22:	b948      	cbnz	r0, 800ad38 <__smakebuf_r+0x44>
 800ad24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad28:	059a      	lsls	r2, r3, #22
 800ad2a:	d4ef      	bmi.n	800ad0c <__smakebuf_r+0x18>
 800ad2c:	f023 0303 	bic.w	r3, r3, #3
 800ad30:	f043 0302 	orr.w	r3, r3, #2
 800ad34:	81a3      	strh	r3, [r4, #12]
 800ad36:	e7e3      	b.n	800ad00 <__smakebuf_r+0xc>
 800ad38:	4b0d      	ldr	r3, [pc, #52]	; (800ad70 <__smakebuf_r+0x7c>)
 800ad3a:	62b3      	str	r3, [r6, #40]	; 0x28
 800ad3c:	89a3      	ldrh	r3, [r4, #12]
 800ad3e:	6020      	str	r0, [r4, #0]
 800ad40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad44:	81a3      	strh	r3, [r4, #12]
 800ad46:	9b00      	ldr	r3, [sp, #0]
 800ad48:	6120      	str	r0, [r4, #16]
 800ad4a:	6163      	str	r3, [r4, #20]
 800ad4c:	9b01      	ldr	r3, [sp, #4]
 800ad4e:	b15b      	cbz	r3, 800ad68 <__smakebuf_r+0x74>
 800ad50:	4630      	mov	r0, r6
 800ad52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad56:	f000 fb7f 	bl	800b458 <_isatty_r>
 800ad5a:	b128      	cbz	r0, 800ad68 <__smakebuf_r+0x74>
 800ad5c:	89a3      	ldrh	r3, [r4, #12]
 800ad5e:	f023 0303 	bic.w	r3, r3, #3
 800ad62:	f043 0301 	orr.w	r3, r3, #1
 800ad66:	81a3      	strh	r3, [r4, #12]
 800ad68:	89a0      	ldrh	r0, [r4, #12]
 800ad6a:	4305      	orrs	r5, r0
 800ad6c:	81a5      	strh	r5, [r4, #12]
 800ad6e:	e7cd      	b.n	800ad0c <__smakebuf_r+0x18>
 800ad70:	0800ab05 	.word	0x0800ab05

0800ad74 <__malloc_lock>:
 800ad74:	4801      	ldr	r0, [pc, #4]	; (800ad7c <__malloc_lock+0x8>)
 800ad76:	f7ff bf97 	b.w	800aca8 <__retarget_lock_acquire_recursive>
 800ad7a:	bf00      	nop
 800ad7c:	20000978 	.word	0x20000978

0800ad80 <__malloc_unlock>:
 800ad80:	4801      	ldr	r0, [pc, #4]	; (800ad88 <__malloc_unlock+0x8>)
 800ad82:	f7ff bf92 	b.w	800acaa <__retarget_lock_release_recursive>
 800ad86:	bf00      	nop
 800ad88:	20000978 	.word	0x20000978

0800ad8c <__sfputc_r>:
 800ad8c:	6893      	ldr	r3, [r2, #8]
 800ad8e:	b410      	push	{r4}
 800ad90:	3b01      	subs	r3, #1
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	6093      	str	r3, [r2, #8]
 800ad96:	da07      	bge.n	800ada8 <__sfputc_r+0x1c>
 800ad98:	6994      	ldr	r4, [r2, #24]
 800ad9a:	42a3      	cmp	r3, r4
 800ad9c:	db01      	blt.n	800ada2 <__sfputc_r+0x16>
 800ad9e:	290a      	cmp	r1, #10
 800ada0:	d102      	bne.n	800ada8 <__sfputc_r+0x1c>
 800ada2:	bc10      	pop	{r4}
 800ada4:	f7ff bd08 	b.w	800a7b8 <__swbuf_r>
 800ada8:	6813      	ldr	r3, [r2, #0]
 800adaa:	1c58      	adds	r0, r3, #1
 800adac:	6010      	str	r0, [r2, #0]
 800adae:	7019      	strb	r1, [r3, #0]
 800adb0:	4608      	mov	r0, r1
 800adb2:	bc10      	pop	{r4}
 800adb4:	4770      	bx	lr

0800adb6 <__sfputs_r>:
 800adb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adb8:	4606      	mov	r6, r0
 800adba:	460f      	mov	r7, r1
 800adbc:	4614      	mov	r4, r2
 800adbe:	18d5      	adds	r5, r2, r3
 800adc0:	42ac      	cmp	r4, r5
 800adc2:	d101      	bne.n	800adc8 <__sfputs_r+0x12>
 800adc4:	2000      	movs	r0, #0
 800adc6:	e007      	b.n	800add8 <__sfputs_r+0x22>
 800adc8:	463a      	mov	r2, r7
 800adca:	4630      	mov	r0, r6
 800adcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800add0:	f7ff ffdc 	bl	800ad8c <__sfputc_r>
 800add4:	1c43      	adds	r3, r0, #1
 800add6:	d1f3      	bne.n	800adc0 <__sfputs_r+0xa>
 800add8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800addc <_vfiprintf_r>:
 800addc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ade0:	460d      	mov	r5, r1
 800ade2:	4614      	mov	r4, r2
 800ade4:	4698      	mov	r8, r3
 800ade6:	4606      	mov	r6, r0
 800ade8:	b09d      	sub	sp, #116	; 0x74
 800adea:	b118      	cbz	r0, 800adf4 <_vfiprintf_r+0x18>
 800adec:	6983      	ldr	r3, [r0, #24]
 800adee:	b90b      	cbnz	r3, 800adf4 <_vfiprintf_r+0x18>
 800adf0:	f7ff febc 	bl	800ab6c <__sinit>
 800adf4:	4b89      	ldr	r3, [pc, #548]	; (800b01c <_vfiprintf_r+0x240>)
 800adf6:	429d      	cmp	r5, r3
 800adf8:	d11b      	bne.n	800ae32 <_vfiprintf_r+0x56>
 800adfa:	6875      	ldr	r5, [r6, #4]
 800adfc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800adfe:	07d9      	lsls	r1, r3, #31
 800ae00:	d405      	bmi.n	800ae0e <_vfiprintf_r+0x32>
 800ae02:	89ab      	ldrh	r3, [r5, #12]
 800ae04:	059a      	lsls	r2, r3, #22
 800ae06:	d402      	bmi.n	800ae0e <_vfiprintf_r+0x32>
 800ae08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ae0a:	f7ff ff4d 	bl	800aca8 <__retarget_lock_acquire_recursive>
 800ae0e:	89ab      	ldrh	r3, [r5, #12]
 800ae10:	071b      	lsls	r3, r3, #28
 800ae12:	d501      	bpl.n	800ae18 <_vfiprintf_r+0x3c>
 800ae14:	692b      	ldr	r3, [r5, #16]
 800ae16:	b9eb      	cbnz	r3, 800ae54 <_vfiprintf_r+0x78>
 800ae18:	4629      	mov	r1, r5
 800ae1a:	4630      	mov	r0, r6
 800ae1c:	f7ff fd1e 	bl	800a85c <__swsetup_r>
 800ae20:	b1c0      	cbz	r0, 800ae54 <_vfiprintf_r+0x78>
 800ae22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ae24:	07dc      	lsls	r4, r3, #31
 800ae26:	d50e      	bpl.n	800ae46 <_vfiprintf_r+0x6a>
 800ae28:	f04f 30ff 	mov.w	r0, #4294967295
 800ae2c:	b01d      	add	sp, #116	; 0x74
 800ae2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae32:	4b7b      	ldr	r3, [pc, #492]	; (800b020 <_vfiprintf_r+0x244>)
 800ae34:	429d      	cmp	r5, r3
 800ae36:	d101      	bne.n	800ae3c <_vfiprintf_r+0x60>
 800ae38:	68b5      	ldr	r5, [r6, #8]
 800ae3a:	e7df      	b.n	800adfc <_vfiprintf_r+0x20>
 800ae3c:	4b79      	ldr	r3, [pc, #484]	; (800b024 <_vfiprintf_r+0x248>)
 800ae3e:	429d      	cmp	r5, r3
 800ae40:	bf08      	it	eq
 800ae42:	68f5      	ldreq	r5, [r6, #12]
 800ae44:	e7da      	b.n	800adfc <_vfiprintf_r+0x20>
 800ae46:	89ab      	ldrh	r3, [r5, #12]
 800ae48:	0598      	lsls	r0, r3, #22
 800ae4a:	d4ed      	bmi.n	800ae28 <_vfiprintf_r+0x4c>
 800ae4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ae4e:	f7ff ff2c 	bl	800acaa <__retarget_lock_release_recursive>
 800ae52:	e7e9      	b.n	800ae28 <_vfiprintf_r+0x4c>
 800ae54:	2300      	movs	r3, #0
 800ae56:	9309      	str	r3, [sp, #36]	; 0x24
 800ae58:	2320      	movs	r3, #32
 800ae5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ae5e:	2330      	movs	r3, #48	; 0x30
 800ae60:	f04f 0901 	mov.w	r9, #1
 800ae64:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae68:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800b028 <_vfiprintf_r+0x24c>
 800ae6c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ae70:	4623      	mov	r3, r4
 800ae72:	469a      	mov	sl, r3
 800ae74:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae78:	b10a      	cbz	r2, 800ae7e <_vfiprintf_r+0xa2>
 800ae7a:	2a25      	cmp	r2, #37	; 0x25
 800ae7c:	d1f9      	bne.n	800ae72 <_vfiprintf_r+0x96>
 800ae7e:	ebba 0b04 	subs.w	fp, sl, r4
 800ae82:	d00b      	beq.n	800ae9c <_vfiprintf_r+0xc0>
 800ae84:	465b      	mov	r3, fp
 800ae86:	4622      	mov	r2, r4
 800ae88:	4629      	mov	r1, r5
 800ae8a:	4630      	mov	r0, r6
 800ae8c:	f7ff ff93 	bl	800adb6 <__sfputs_r>
 800ae90:	3001      	adds	r0, #1
 800ae92:	f000 80aa 	beq.w	800afea <_vfiprintf_r+0x20e>
 800ae96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae98:	445a      	add	r2, fp
 800ae9a:	9209      	str	r2, [sp, #36]	; 0x24
 800ae9c:	f89a 3000 	ldrb.w	r3, [sl]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	f000 80a2 	beq.w	800afea <_vfiprintf_r+0x20e>
 800aea6:	2300      	movs	r3, #0
 800aea8:	f04f 32ff 	mov.w	r2, #4294967295
 800aeac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aeb0:	f10a 0a01 	add.w	sl, sl, #1
 800aeb4:	9304      	str	r3, [sp, #16]
 800aeb6:	9307      	str	r3, [sp, #28]
 800aeb8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aebc:	931a      	str	r3, [sp, #104]	; 0x68
 800aebe:	4654      	mov	r4, sl
 800aec0:	2205      	movs	r2, #5
 800aec2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aec6:	4858      	ldr	r0, [pc, #352]	; (800b028 <_vfiprintf_r+0x24c>)
 800aec8:	f000 fae8 	bl	800b49c <memchr>
 800aecc:	9a04      	ldr	r2, [sp, #16]
 800aece:	b9d8      	cbnz	r0, 800af08 <_vfiprintf_r+0x12c>
 800aed0:	06d1      	lsls	r1, r2, #27
 800aed2:	bf44      	itt	mi
 800aed4:	2320      	movmi	r3, #32
 800aed6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aeda:	0713      	lsls	r3, r2, #28
 800aedc:	bf44      	itt	mi
 800aede:	232b      	movmi	r3, #43	; 0x2b
 800aee0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aee4:	f89a 3000 	ldrb.w	r3, [sl]
 800aee8:	2b2a      	cmp	r3, #42	; 0x2a
 800aeea:	d015      	beq.n	800af18 <_vfiprintf_r+0x13c>
 800aeec:	4654      	mov	r4, sl
 800aeee:	2000      	movs	r0, #0
 800aef0:	f04f 0c0a 	mov.w	ip, #10
 800aef4:	9a07      	ldr	r2, [sp, #28]
 800aef6:	4621      	mov	r1, r4
 800aef8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aefc:	3b30      	subs	r3, #48	; 0x30
 800aefe:	2b09      	cmp	r3, #9
 800af00:	d94e      	bls.n	800afa0 <_vfiprintf_r+0x1c4>
 800af02:	b1b0      	cbz	r0, 800af32 <_vfiprintf_r+0x156>
 800af04:	9207      	str	r2, [sp, #28]
 800af06:	e014      	b.n	800af32 <_vfiprintf_r+0x156>
 800af08:	eba0 0308 	sub.w	r3, r0, r8
 800af0c:	fa09 f303 	lsl.w	r3, r9, r3
 800af10:	4313      	orrs	r3, r2
 800af12:	46a2      	mov	sl, r4
 800af14:	9304      	str	r3, [sp, #16]
 800af16:	e7d2      	b.n	800aebe <_vfiprintf_r+0xe2>
 800af18:	9b03      	ldr	r3, [sp, #12]
 800af1a:	1d19      	adds	r1, r3, #4
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	9103      	str	r1, [sp, #12]
 800af20:	2b00      	cmp	r3, #0
 800af22:	bfbb      	ittet	lt
 800af24:	425b      	neglt	r3, r3
 800af26:	f042 0202 	orrlt.w	r2, r2, #2
 800af2a:	9307      	strge	r3, [sp, #28]
 800af2c:	9307      	strlt	r3, [sp, #28]
 800af2e:	bfb8      	it	lt
 800af30:	9204      	strlt	r2, [sp, #16]
 800af32:	7823      	ldrb	r3, [r4, #0]
 800af34:	2b2e      	cmp	r3, #46	; 0x2e
 800af36:	d10c      	bne.n	800af52 <_vfiprintf_r+0x176>
 800af38:	7863      	ldrb	r3, [r4, #1]
 800af3a:	2b2a      	cmp	r3, #42	; 0x2a
 800af3c:	d135      	bne.n	800afaa <_vfiprintf_r+0x1ce>
 800af3e:	9b03      	ldr	r3, [sp, #12]
 800af40:	3402      	adds	r4, #2
 800af42:	1d1a      	adds	r2, r3, #4
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	9203      	str	r2, [sp, #12]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	bfb8      	it	lt
 800af4c:	f04f 33ff 	movlt.w	r3, #4294967295
 800af50:	9305      	str	r3, [sp, #20]
 800af52:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b038 <_vfiprintf_r+0x25c>
 800af56:	2203      	movs	r2, #3
 800af58:	4650      	mov	r0, sl
 800af5a:	7821      	ldrb	r1, [r4, #0]
 800af5c:	f000 fa9e 	bl	800b49c <memchr>
 800af60:	b140      	cbz	r0, 800af74 <_vfiprintf_r+0x198>
 800af62:	2340      	movs	r3, #64	; 0x40
 800af64:	eba0 000a 	sub.w	r0, r0, sl
 800af68:	fa03 f000 	lsl.w	r0, r3, r0
 800af6c:	9b04      	ldr	r3, [sp, #16]
 800af6e:	3401      	adds	r4, #1
 800af70:	4303      	orrs	r3, r0
 800af72:	9304      	str	r3, [sp, #16]
 800af74:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af78:	2206      	movs	r2, #6
 800af7a:	482c      	ldr	r0, [pc, #176]	; (800b02c <_vfiprintf_r+0x250>)
 800af7c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800af80:	f000 fa8c 	bl	800b49c <memchr>
 800af84:	2800      	cmp	r0, #0
 800af86:	d03f      	beq.n	800b008 <_vfiprintf_r+0x22c>
 800af88:	4b29      	ldr	r3, [pc, #164]	; (800b030 <_vfiprintf_r+0x254>)
 800af8a:	bb1b      	cbnz	r3, 800afd4 <_vfiprintf_r+0x1f8>
 800af8c:	9b03      	ldr	r3, [sp, #12]
 800af8e:	3307      	adds	r3, #7
 800af90:	f023 0307 	bic.w	r3, r3, #7
 800af94:	3308      	adds	r3, #8
 800af96:	9303      	str	r3, [sp, #12]
 800af98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af9a:	443b      	add	r3, r7
 800af9c:	9309      	str	r3, [sp, #36]	; 0x24
 800af9e:	e767      	b.n	800ae70 <_vfiprintf_r+0x94>
 800afa0:	460c      	mov	r4, r1
 800afa2:	2001      	movs	r0, #1
 800afa4:	fb0c 3202 	mla	r2, ip, r2, r3
 800afa8:	e7a5      	b.n	800aef6 <_vfiprintf_r+0x11a>
 800afaa:	2300      	movs	r3, #0
 800afac:	f04f 0c0a 	mov.w	ip, #10
 800afb0:	4619      	mov	r1, r3
 800afb2:	3401      	adds	r4, #1
 800afb4:	9305      	str	r3, [sp, #20]
 800afb6:	4620      	mov	r0, r4
 800afb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800afbc:	3a30      	subs	r2, #48	; 0x30
 800afbe:	2a09      	cmp	r2, #9
 800afc0:	d903      	bls.n	800afca <_vfiprintf_r+0x1ee>
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d0c5      	beq.n	800af52 <_vfiprintf_r+0x176>
 800afc6:	9105      	str	r1, [sp, #20]
 800afc8:	e7c3      	b.n	800af52 <_vfiprintf_r+0x176>
 800afca:	4604      	mov	r4, r0
 800afcc:	2301      	movs	r3, #1
 800afce:	fb0c 2101 	mla	r1, ip, r1, r2
 800afd2:	e7f0      	b.n	800afb6 <_vfiprintf_r+0x1da>
 800afd4:	ab03      	add	r3, sp, #12
 800afd6:	9300      	str	r3, [sp, #0]
 800afd8:	462a      	mov	r2, r5
 800afda:	4630      	mov	r0, r6
 800afdc:	4b15      	ldr	r3, [pc, #84]	; (800b034 <_vfiprintf_r+0x258>)
 800afde:	a904      	add	r1, sp, #16
 800afe0:	f3af 8000 	nop.w
 800afe4:	4607      	mov	r7, r0
 800afe6:	1c78      	adds	r0, r7, #1
 800afe8:	d1d6      	bne.n	800af98 <_vfiprintf_r+0x1bc>
 800afea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800afec:	07d9      	lsls	r1, r3, #31
 800afee:	d405      	bmi.n	800affc <_vfiprintf_r+0x220>
 800aff0:	89ab      	ldrh	r3, [r5, #12]
 800aff2:	059a      	lsls	r2, r3, #22
 800aff4:	d402      	bmi.n	800affc <_vfiprintf_r+0x220>
 800aff6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aff8:	f7ff fe57 	bl	800acaa <__retarget_lock_release_recursive>
 800affc:	89ab      	ldrh	r3, [r5, #12]
 800affe:	065b      	lsls	r3, r3, #25
 800b000:	f53f af12 	bmi.w	800ae28 <_vfiprintf_r+0x4c>
 800b004:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b006:	e711      	b.n	800ae2c <_vfiprintf_r+0x50>
 800b008:	ab03      	add	r3, sp, #12
 800b00a:	9300      	str	r3, [sp, #0]
 800b00c:	462a      	mov	r2, r5
 800b00e:	4630      	mov	r0, r6
 800b010:	4b08      	ldr	r3, [pc, #32]	; (800b034 <_vfiprintf_r+0x258>)
 800b012:	a904      	add	r1, sp, #16
 800b014:	f000 f882 	bl	800b11c <_printf_i>
 800b018:	e7e4      	b.n	800afe4 <_vfiprintf_r+0x208>
 800b01a:	bf00      	nop
 800b01c:	0800c41c 	.word	0x0800c41c
 800b020:	0800c43c 	.word	0x0800c43c
 800b024:	0800c3fc 	.word	0x0800c3fc
 800b028:	0800c45c 	.word	0x0800c45c
 800b02c:	0800c466 	.word	0x0800c466
 800b030:	00000000 	.word	0x00000000
 800b034:	0800adb7 	.word	0x0800adb7
 800b038:	0800c462 	.word	0x0800c462

0800b03c <_printf_common>:
 800b03c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b040:	4616      	mov	r6, r2
 800b042:	4699      	mov	r9, r3
 800b044:	688a      	ldr	r2, [r1, #8]
 800b046:	690b      	ldr	r3, [r1, #16]
 800b048:	4607      	mov	r7, r0
 800b04a:	4293      	cmp	r3, r2
 800b04c:	bfb8      	it	lt
 800b04e:	4613      	movlt	r3, r2
 800b050:	6033      	str	r3, [r6, #0]
 800b052:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b056:	460c      	mov	r4, r1
 800b058:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b05c:	b10a      	cbz	r2, 800b062 <_printf_common+0x26>
 800b05e:	3301      	adds	r3, #1
 800b060:	6033      	str	r3, [r6, #0]
 800b062:	6823      	ldr	r3, [r4, #0]
 800b064:	0699      	lsls	r1, r3, #26
 800b066:	bf42      	ittt	mi
 800b068:	6833      	ldrmi	r3, [r6, #0]
 800b06a:	3302      	addmi	r3, #2
 800b06c:	6033      	strmi	r3, [r6, #0]
 800b06e:	6825      	ldr	r5, [r4, #0]
 800b070:	f015 0506 	ands.w	r5, r5, #6
 800b074:	d106      	bne.n	800b084 <_printf_common+0x48>
 800b076:	f104 0a19 	add.w	sl, r4, #25
 800b07a:	68e3      	ldr	r3, [r4, #12]
 800b07c:	6832      	ldr	r2, [r6, #0]
 800b07e:	1a9b      	subs	r3, r3, r2
 800b080:	42ab      	cmp	r3, r5
 800b082:	dc28      	bgt.n	800b0d6 <_printf_common+0x9a>
 800b084:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b088:	1e13      	subs	r3, r2, #0
 800b08a:	6822      	ldr	r2, [r4, #0]
 800b08c:	bf18      	it	ne
 800b08e:	2301      	movne	r3, #1
 800b090:	0692      	lsls	r2, r2, #26
 800b092:	d42d      	bmi.n	800b0f0 <_printf_common+0xb4>
 800b094:	4649      	mov	r1, r9
 800b096:	4638      	mov	r0, r7
 800b098:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b09c:	47c0      	blx	r8
 800b09e:	3001      	adds	r0, #1
 800b0a0:	d020      	beq.n	800b0e4 <_printf_common+0xa8>
 800b0a2:	6823      	ldr	r3, [r4, #0]
 800b0a4:	68e5      	ldr	r5, [r4, #12]
 800b0a6:	f003 0306 	and.w	r3, r3, #6
 800b0aa:	2b04      	cmp	r3, #4
 800b0ac:	bf18      	it	ne
 800b0ae:	2500      	movne	r5, #0
 800b0b0:	6832      	ldr	r2, [r6, #0]
 800b0b2:	f04f 0600 	mov.w	r6, #0
 800b0b6:	68a3      	ldr	r3, [r4, #8]
 800b0b8:	bf08      	it	eq
 800b0ba:	1aad      	subeq	r5, r5, r2
 800b0bc:	6922      	ldr	r2, [r4, #16]
 800b0be:	bf08      	it	eq
 800b0c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b0c4:	4293      	cmp	r3, r2
 800b0c6:	bfc4      	itt	gt
 800b0c8:	1a9b      	subgt	r3, r3, r2
 800b0ca:	18ed      	addgt	r5, r5, r3
 800b0cc:	341a      	adds	r4, #26
 800b0ce:	42b5      	cmp	r5, r6
 800b0d0:	d11a      	bne.n	800b108 <_printf_common+0xcc>
 800b0d2:	2000      	movs	r0, #0
 800b0d4:	e008      	b.n	800b0e8 <_printf_common+0xac>
 800b0d6:	2301      	movs	r3, #1
 800b0d8:	4652      	mov	r2, sl
 800b0da:	4649      	mov	r1, r9
 800b0dc:	4638      	mov	r0, r7
 800b0de:	47c0      	blx	r8
 800b0e0:	3001      	adds	r0, #1
 800b0e2:	d103      	bne.n	800b0ec <_printf_common+0xb0>
 800b0e4:	f04f 30ff 	mov.w	r0, #4294967295
 800b0e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0ec:	3501      	adds	r5, #1
 800b0ee:	e7c4      	b.n	800b07a <_printf_common+0x3e>
 800b0f0:	2030      	movs	r0, #48	; 0x30
 800b0f2:	18e1      	adds	r1, r4, r3
 800b0f4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b0f8:	1c5a      	adds	r2, r3, #1
 800b0fa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b0fe:	4422      	add	r2, r4
 800b100:	3302      	adds	r3, #2
 800b102:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b106:	e7c5      	b.n	800b094 <_printf_common+0x58>
 800b108:	2301      	movs	r3, #1
 800b10a:	4622      	mov	r2, r4
 800b10c:	4649      	mov	r1, r9
 800b10e:	4638      	mov	r0, r7
 800b110:	47c0      	blx	r8
 800b112:	3001      	adds	r0, #1
 800b114:	d0e6      	beq.n	800b0e4 <_printf_common+0xa8>
 800b116:	3601      	adds	r6, #1
 800b118:	e7d9      	b.n	800b0ce <_printf_common+0x92>
	...

0800b11c <_printf_i>:
 800b11c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b120:	460c      	mov	r4, r1
 800b122:	7e27      	ldrb	r7, [r4, #24]
 800b124:	4691      	mov	r9, r2
 800b126:	2f78      	cmp	r7, #120	; 0x78
 800b128:	4680      	mov	r8, r0
 800b12a:	469a      	mov	sl, r3
 800b12c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b12e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b132:	d807      	bhi.n	800b144 <_printf_i+0x28>
 800b134:	2f62      	cmp	r7, #98	; 0x62
 800b136:	d80a      	bhi.n	800b14e <_printf_i+0x32>
 800b138:	2f00      	cmp	r7, #0
 800b13a:	f000 80d9 	beq.w	800b2f0 <_printf_i+0x1d4>
 800b13e:	2f58      	cmp	r7, #88	; 0x58
 800b140:	f000 80a4 	beq.w	800b28c <_printf_i+0x170>
 800b144:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b148:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b14c:	e03a      	b.n	800b1c4 <_printf_i+0xa8>
 800b14e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b152:	2b15      	cmp	r3, #21
 800b154:	d8f6      	bhi.n	800b144 <_printf_i+0x28>
 800b156:	a001      	add	r0, pc, #4	; (adr r0, 800b15c <_printf_i+0x40>)
 800b158:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b15c:	0800b1b5 	.word	0x0800b1b5
 800b160:	0800b1c9 	.word	0x0800b1c9
 800b164:	0800b145 	.word	0x0800b145
 800b168:	0800b145 	.word	0x0800b145
 800b16c:	0800b145 	.word	0x0800b145
 800b170:	0800b145 	.word	0x0800b145
 800b174:	0800b1c9 	.word	0x0800b1c9
 800b178:	0800b145 	.word	0x0800b145
 800b17c:	0800b145 	.word	0x0800b145
 800b180:	0800b145 	.word	0x0800b145
 800b184:	0800b145 	.word	0x0800b145
 800b188:	0800b2d7 	.word	0x0800b2d7
 800b18c:	0800b1f9 	.word	0x0800b1f9
 800b190:	0800b2b9 	.word	0x0800b2b9
 800b194:	0800b145 	.word	0x0800b145
 800b198:	0800b145 	.word	0x0800b145
 800b19c:	0800b2f9 	.word	0x0800b2f9
 800b1a0:	0800b145 	.word	0x0800b145
 800b1a4:	0800b1f9 	.word	0x0800b1f9
 800b1a8:	0800b145 	.word	0x0800b145
 800b1ac:	0800b145 	.word	0x0800b145
 800b1b0:	0800b2c1 	.word	0x0800b2c1
 800b1b4:	680b      	ldr	r3, [r1, #0]
 800b1b6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b1ba:	1d1a      	adds	r2, r3, #4
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	600a      	str	r2, [r1, #0]
 800b1c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b1c4:	2301      	movs	r3, #1
 800b1c6:	e0a4      	b.n	800b312 <_printf_i+0x1f6>
 800b1c8:	6825      	ldr	r5, [r4, #0]
 800b1ca:	6808      	ldr	r0, [r1, #0]
 800b1cc:	062e      	lsls	r6, r5, #24
 800b1ce:	f100 0304 	add.w	r3, r0, #4
 800b1d2:	d50a      	bpl.n	800b1ea <_printf_i+0xce>
 800b1d4:	6805      	ldr	r5, [r0, #0]
 800b1d6:	600b      	str	r3, [r1, #0]
 800b1d8:	2d00      	cmp	r5, #0
 800b1da:	da03      	bge.n	800b1e4 <_printf_i+0xc8>
 800b1dc:	232d      	movs	r3, #45	; 0x2d
 800b1de:	426d      	negs	r5, r5
 800b1e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b1e4:	230a      	movs	r3, #10
 800b1e6:	485e      	ldr	r0, [pc, #376]	; (800b360 <_printf_i+0x244>)
 800b1e8:	e019      	b.n	800b21e <_printf_i+0x102>
 800b1ea:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b1ee:	6805      	ldr	r5, [r0, #0]
 800b1f0:	600b      	str	r3, [r1, #0]
 800b1f2:	bf18      	it	ne
 800b1f4:	b22d      	sxthne	r5, r5
 800b1f6:	e7ef      	b.n	800b1d8 <_printf_i+0xbc>
 800b1f8:	680b      	ldr	r3, [r1, #0]
 800b1fa:	6825      	ldr	r5, [r4, #0]
 800b1fc:	1d18      	adds	r0, r3, #4
 800b1fe:	6008      	str	r0, [r1, #0]
 800b200:	0628      	lsls	r0, r5, #24
 800b202:	d501      	bpl.n	800b208 <_printf_i+0xec>
 800b204:	681d      	ldr	r5, [r3, #0]
 800b206:	e002      	b.n	800b20e <_printf_i+0xf2>
 800b208:	0669      	lsls	r1, r5, #25
 800b20a:	d5fb      	bpl.n	800b204 <_printf_i+0xe8>
 800b20c:	881d      	ldrh	r5, [r3, #0]
 800b20e:	2f6f      	cmp	r7, #111	; 0x6f
 800b210:	bf0c      	ite	eq
 800b212:	2308      	moveq	r3, #8
 800b214:	230a      	movne	r3, #10
 800b216:	4852      	ldr	r0, [pc, #328]	; (800b360 <_printf_i+0x244>)
 800b218:	2100      	movs	r1, #0
 800b21a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b21e:	6866      	ldr	r6, [r4, #4]
 800b220:	2e00      	cmp	r6, #0
 800b222:	bfa8      	it	ge
 800b224:	6821      	ldrge	r1, [r4, #0]
 800b226:	60a6      	str	r6, [r4, #8]
 800b228:	bfa4      	itt	ge
 800b22a:	f021 0104 	bicge.w	r1, r1, #4
 800b22e:	6021      	strge	r1, [r4, #0]
 800b230:	b90d      	cbnz	r5, 800b236 <_printf_i+0x11a>
 800b232:	2e00      	cmp	r6, #0
 800b234:	d04d      	beq.n	800b2d2 <_printf_i+0x1b6>
 800b236:	4616      	mov	r6, r2
 800b238:	fbb5 f1f3 	udiv	r1, r5, r3
 800b23c:	fb03 5711 	mls	r7, r3, r1, r5
 800b240:	5dc7      	ldrb	r7, [r0, r7]
 800b242:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b246:	462f      	mov	r7, r5
 800b248:	42bb      	cmp	r3, r7
 800b24a:	460d      	mov	r5, r1
 800b24c:	d9f4      	bls.n	800b238 <_printf_i+0x11c>
 800b24e:	2b08      	cmp	r3, #8
 800b250:	d10b      	bne.n	800b26a <_printf_i+0x14e>
 800b252:	6823      	ldr	r3, [r4, #0]
 800b254:	07df      	lsls	r7, r3, #31
 800b256:	d508      	bpl.n	800b26a <_printf_i+0x14e>
 800b258:	6923      	ldr	r3, [r4, #16]
 800b25a:	6861      	ldr	r1, [r4, #4]
 800b25c:	4299      	cmp	r1, r3
 800b25e:	bfde      	ittt	le
 800b260:	2330      	movle	r3, #48	; 0x30
 800b262:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b266:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b26a:	1b92      	subs	r2, r2, r6
 800b26c:	6122      	str	r2, [r4, #16]
 800b26e:	464b      	mov	r3, r9
 800b270:	4621      	mov	r1, r4
 800b272:	4640      	mov	r0, r8
 800b274:	f8cd a000 	str.w	sl, [sp]
 800b278:	aa03      	add	r2, sp, #12
 800b27a:	f7ff fedf 	bl	800b03c <_printf_common>
 800b27e:	3001      	adds	r0, #1
 800b280:	d14c      	bne.n	800b31c <_printf_i+0x200>
 800b282:	f04f 30ff 	mov.w	r0, #4294967295
 800b286:	b004      	add	sp, #16
 800b288:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b28c:	4834      	ldr	r0, [pc, #208]	; (800b360 <_printf_i+0x244>)
 800b28e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b292:	680e      	ldr	r6, [r1, #0]
 800b294:	6823      	ldr	r3, [r4, #0]
 800b296:	f856 5b04 	ldr.w	r5, [r6], #4
 800b29a:	061f      	lsls	r7, r3, #24
 800b29c:	600e      	str	r6, [r1, #0]
 800b29e:	d514      	bpl.n	800b2ca <_printf_i+0x1ae>
 800b2a0:	07d9      	lsls	r1, r3, #31
 800b2a2:	bf44      	itt	mi
 800b2a4:	f043 0320 	orrmi.w	r3, r3, #32
 800b2a8:	6023      	strmi	r3, [r4, #0]
 800b2aa:	b91d      	cbnz	r5, 800b2b4 <_printf_i+0x198>
 800b2ac:	6823      	ldr	r3, [r4, #0]
 800b2ae:	f023 0320 	bic.w	r3, r3, #32
 800b2b2:	6023      	str	r3, [r4, #0]
 800b2b4:	2310      	movs	r3, #16
 800b2b6:	e7af      	b.n	800b218 <_printf_i+0xfc>
 800b2b8:	6823      	ldr	r3, [r4, #0]
 800b2ba:	f043 0320 	orr.w	r3, r3, #32
 800b2be:	6023      	str	r3, [r4, #0]
 800b2c0:	2378      	movs	r3, #120	; 0x78
 800b2c2:	4828      	ldr	r0, [pc, #160]	; (800b364 <_printf_i+0x248>)
 800b2c4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b2c8:	e7e3      	b.n	800b292 <_printf_i+0x176>
 800b2ca:	065e      	lsls	r6, r3, #25
 800b2cc:	bf48      	it	mi
 800b2ce:	b2ad      	uxthmi	r5, r5
 800b2d0:	e7e6      	b.n	800b2a0 <_printf_i+0x184>
 800b2d2:	4616      	mov	r6, r2
 800b2d4:	e7bb      	b.n	800b24e <_printf_i+0x132>
 800b2d6:	680b      	ldr	r3, [r1, #0]
 800b2d8:	6826      	ldr	r6, [r4, #0]
 800b2da:	1d1d      	adds	r5, r3, #4
 800b2dc:	6960      	ldr	r0, [r4, #20]
 800b2de:	600d      	str	r5, [r1, #0]
 800b2e0:	0635      	lsls	r5, r6, #24
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	d501      	bpl.n	800b2ea <_printf_i+0x1ce>
 800b2e6:	6018      	str	r0, [r3, #0]
 800b2e8:	e002      	b.n	800b2f0 <_printf_i+0x1d4>
 800b2ea:	0671      	lsls	r1, r6, #25
 800b2ec:	d5fb      	bpl.n	800b2e6 <_printf_i+0x1ca>
 800b2ee:	8018      	strh	r0, [r3, #0]
 800b2f0:	2300      	movs	r3, #0
 800b2f2:	4616      	mov	r6, r2
 800b2f4:	6123      	str	r3, [r4, #16]
 800b2f6:	e7ba      	b.n	800b26e <_printf_i+0x152>
 800b2f8:	680b      	ldr	r3, [r1, #0]
 800b2fa:	1d1a      	adds	r2, r3, #4
 800b2fc:	600a      	str	r2, [r1, #0]
 800b2fe:	681e      	ldr	r6, [r3, #0]
 800b300:	2100      	movs	r1, #0
 800b302:	4630      	mov	r0, r6
 800b304:	6862      	ldr	r2, [r4, #4]
 800b306:	f000 f8c9 	bl	800b49c <memchr>
 800b30a:	b108      	cbz	r0, 800b310 <_printf_i+0x1f4>
 800b30c:	1b80      	subs	r0, r0, r6
 800b30e:	6060      	str	r0, [r4, #4]
 800b310:	6863      	ldr	r3, [r4, #4]
 800b312:	6123      	str	r3, [r4, #16]
 800b314:	2300      	movs	r3, #0
 800b316:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b31a:	e7a8      	b.n	800b26e <_printf_i+0x152>
 800b31c:	4632      	mov	r2, r6
 800b31e:	4649      	mov	r1, r9
 800b320:	4640      	mov	r0, r8
 800b322:	6923      	ldr	r3, [r4, #16]
 800b324:	47d0      	blx	sl
 800b326:	3001      	adds	r0, #1
 800b328:	d0ab      	beq.n	800b282 <_printf_i+0x166>
 800b32a:	6823      	ldr	r3, [r4, #0]
 800b32c:	079b      	lsls	r3, r3, #30
 800b32e:	d413      	bmi.n	800b358 <_printf_i+0x23c>
 800b330:	68e0      	ldr	r0, [r4, #12]
 800b332:	9b03      	ldr	r3, [sp, #12]
 800b334:	4298      	cmp	r0, r3
 800b336:	bfb8      	it	lt
 800b338:	4618      	movlt	r0, r3
 800b33a:	e7a4      	b.n	800b286 <_printf_i+0x16a>
 800b33c:	2301      	movs	r3, #1
 800b33e:	4632      	mov	r2, r6
 800b340:	4649      	mov	r1, r9
 800b342:	4640      	mov	r0, r8
 800b344:	47d0      	blx	sl
 800b346:	3001      	adds	r0, #1
 800b348:	d09b      	beq.n	800b282 <_printf_i+0x166>
 800b34a:	3501      	adds	r5, #1
 800b34c:	68e3      	ldr	r3, [r4, #12]
 800b34e:	9903      	ldr	r1, [sp, #12]
 800b350:	1a5b      	subs	r3, r3, r1
 800b352:	42ab      	cmp	r3, r5
 800b354:	dcf2      	bgt.n	800b33c <_printf_i+0x220>
 800b356:	e7eb      	b.n	800b330 <_printf_i+0x214>
 800b358:	2500      	movs	r5, #0
 800b35a:	f104 0619 	add.w	r6, r4, #25
 800b35e:	e7f5      	b.n	800b34c <_printf_i+0x230>
 800b360:	0800c46d 	.word	0x0800c46d
 800b364:	0800c47e 	.word	0x0800c47e

0800b368 <__sread>:
 800b368:	b510      	push	{r4, lr}
 800b36a:	460c      	mov	r4, r1
 800b36c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b370:	f000 f8a2 	bl	800b4b8 <_read_r>
 800b374:	2800      	cmp	r0, #0
 800b376:	bfab      	itete	ge
 800b378:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b37a:	89a3      	ldrhlt	r3, [r4, #12]
 800b37c:	181b      	addge	r3, r3, r0
 800b37e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b382:	bfac      	ite	ge
 800b384:	6563      	strge	r3, [r4, #84]	; 0x54
 800b386:	81a3      	strhlt	r3, [r4, #12]
 800b388:	bd10      	pop	{r4, pc}

0800b38a <__swrite>:
 800b38a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b38e:	461f      	mov	r7, r3
 800b390:	898b      	ldrh	r3, [r1, #12]
 800b392:	4605      	mov	r5, r0
 800b394:	05db      	lsls	r3, r3, #23
 800b396:	460c      	mov	r4, r1
 800b398:	4616      	mov	r6, r2
 800b39a:	d505      	bpl.n	800b3a8 <__swrite+0x1e>
 800b39c:	2302      	movs	r3, #2
 800b39e:	2200      	movs	r2, #0
 800b3a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3a4:	f000 f868 	bl	800b478 <_lseek_r>
 800b3a8:	89a3      	ldrh	r3, [r4, #12]
 800b3aa:	4632      	mov	r2, r6
 800b3ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b3b0:	81a3      	strh	r3, [r4, #12]
 800b3b2:	4628      	mov	r0, r5
 800b3b4:	463b      	mov	r3, r7
 800b3b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b3ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b3be:	f000 b817 	b.w	800b3f0 <_write_r>

0800b3c2 <__sseek>:
 800b3c2:	b510      	push	{r4, lr}
 800b3c4:	460c      	mov	r4, r1
 800b3c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3ca:	f000 f855 	bl	800b478 <_lseek_r>
 800b3ce:	1c43      	adds	r3, r0, #1
 800b3d0:	89a3      	ldrh	r3, [r4, #12]
 800b3d2:	bf15      	itete	ne
 800b3d4:	6560      	strne	r0, [r4, #84]	; 0x54
 800b3d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b3da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b3de:	81a3      	strheq	r3, [r4, #12]
 800b3e0:	bf18      	it	ne
 800b3e2:	81a3      	strhne	r3, [r4, #12]
 800b3e4:	bd10      	pop	{r4, pc}

0800b3e6 <__sclose>:
 800b3e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3ea:	f000 b813 	b.w	800b414 <_close_r>
	...

0800b3f0 <_write_r>:
 800b3f0:	b538      	push	{r3, r4, r5, lr}
 800b3f2:	4604      	mov	r4, r0
 800b3f4:	4608      	mov	r0, r1
 800b3f6:	4611      	mov	r1, r2
 800b3f8:	2200      	movs	r2, #0
 800b3fa:	4d05      	ldr	r5, [pc, #20]	; (800b410 <_write_r+0x20>)
 800b3fc:	602a      	str	r2, [r5, #0]
 800b3fe:	461a      	mov	r2, r3
 800b400:	f7f6 fd60 	bl	8001ec4 <_write>
 800b404:	1c43      	adds	r3, r0, #1
 800b406:	d102      	bne.n	800b40e <_write_r+0x1e>
 800b408:	682b      	ldr	r3, [r5, #0]
 800b40a:	b103      	cbz	r3, 800b40e <_write_r+0x1e>
 800b40c:	6023      	str	r3, [r4, #0]
 800b40e:	bd38      	pop	{r3, r4, r5, pc}
 800b410:	20000980 	.word	0x20000980

0800b414 <_close_r>:
 800b414:	b538      	push	{r3, r4, r5, lr}
 800b416:	2300      	movs	r3, #0
 800b418:	4d05      	ldr	r5, [pc, #20]	; (800b430 <_close_r+0x1c>)
 800b41a:	4604      	mov	r4, r0
 800b41c:	4608      	mov	r0, r1
 800b41e:	602b      	str	r3, [r5, #0]
 800b420:	f7f6 fd7a 	bl	8001f18 <_close>
 800b424:	1c43      	adds	r3, r0, #1
 800b426:	d102      	bne.n	800b42e <_close_r+0x1a>
 800b428:	682b      	ldr	r3, [r5, #0]
 800b42a:	b103      	cbz	r3, 800b42e <_close_r+0x1a>
 800b42c:	6023      	str	r3, [r4, #0]
 800b42e:	bd38      	pop	{r3, r4, r5, pc}
 800b430:	20000980 	.word	0x20000980

0800b434 <_fstat_r>:
 800b434:	b538      	push	{r3, r4, r5, lr}
 800b436:	2300      	movs	r3, #0
 800b438:	4d06      	ldr	r5, [pc, #24]	; (800b454 <_fstat_r+0x20>)
 800b43a:	4604      	mov	r4, r0
 800b43c:	4608      	mov	r0, r1
 800b43e:	4611      	mov	r1, r2
 800b440:	602b      	str	r3, [r5, #0]
 800b442:	f7f6 fd74 	bl	8001f2e <_fstat>
 800b446:	1c43      	adds	r3, r0, #1
 800b448:	d102      	bne.n	800b450 <_fstat_r+0x1c>
 800b44a:	682b      	ldr	r3, [r5, #0]
 800b44c:	b103      	cbz	r3, 800b450 <_fstat_r+0x1c>
 800b44e:	6023      	str	r3, [r4, #0]
 800b450:	bd38      	pop	{r3, r4, r5, pc}
 800b452:	bf00      	nop
 800b454:	20000980 	.word	0x20000980

0800b458 <_isatty_r>:
 800b458:	b538      	push	{r3, r4, r5, lr}
 800b45a:	2300      	movs	r3, #0
 800b45c:	4d05      	ldr	r5, [pc, #20]	; (800b474 <_isatty_r+0x1c>)
 800b45e:	4604      	mov	r4, r0
 800b460:	4608      	mov	r0, r1
 800b462:	602b      	str	r3, [r5, #0]
 800b464:	f7f6 fd72 	bl	8001f4c <_isatty>
 800b468:	1c43      	adds	r3, r0, #1
 800b46a:	d102      	bne.n	800b472 <_isatty_r+0x1a>
 800b46c:	682b      	ldr	r3, [r5, #0]
 800b46e:	b103      	cbz	r3, 800b472 <_isatty_r+0x1a>
 800b470:	6023      	str	r3, [r4, #0]
 800b472:	bd38      	pop	{r3, r4, r5, pc}
 800b474:	20000980 	.word	0x20000980

0800b478 <_lseek_r>:
 800b478:	b538      	push	{r3, r4, r5, lr}
 800b47a:	4604      	mov	r4, r0
 800b47c:	4608      	mov	r0, r1
 800b47e:	4611      	mov	r1, r2
 800b480:	2200      	movs	r2, #0
 800b482:	4d05      	ldr	r5, [pc, #20]	; (800b498 <_lseek_r+0x20>)
 800b484:	602a      	str	r2, [r5, #0]
 800b486:	461a      	mov	r2, r3
 800b488:	f7f6 fd6a 	bl	8001f60 <_lseek>
 800b48c:	1c43      	adds	r3, r0, #1
 800b48e:	d102      	bne.n	800b496 <_lseek_r+0x1e>
 800b490:	682b      	ldr	r3, [r5, #0]
 800b492:	b103      	cbz	r3, 800b496 <_lseek_r+0x1e>
 800b494:	6023      	str	r3, [r4, #0]
 800b496:	bd38      	pop	{r3, r4, r5, pc}
 800b498:	20000980 	.word	0x20000980

0800b49c <memchr>:
 800b49c:	4603      	mov	r3, r0
 800b49e:	b510      	push	{r4, lr}
 800b4a0:	b2c9      	uxtb	r1, r1
 800b4a2:	4402      	add	r2, r0
 800b4a4:	4293      	cmp	r3, r2
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	d101      	bne.n	800b4ae <memchr+0x12>
 800b4aa:	2000      	movs	r0, #0
 800b4ac:	e003      	b.n	800b4b6 <memchr+0x1a>
 800b4ae:	7804      	ldrb	r4, [r0, #0]
 800b4b0:	3301      	adds	r3, #1
 800b4b2:	428c      	cmp	r4, r1
 800b4b4:	d1f6      	bne.n	800b4a4 <memchr+0x8>
 800b4b6:	bd10      	pop	{r4, pc}

0800b4b8 <_read_r>:
 800b4b8:	b538      	push	{r3, r4, r5, lr}
 800b4ba:	4604      	mov	r4, r0
 800b4bc:	4608      	mov	r0, r1
 800b4be:	4611      	mov	r1, r2
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	4d05      	ldr	r5, [pc, #20]	; (800b4d8 <_read_r+0x20>)
 800b4c4:	602a      	str	r2, [r5, #0]
 800b4c6:	461a      	mov	r2, r3
 800b4c8:	f7f6 fcde 	bl	8001e88 <_read>
 800b4cc:	1c43      	adds	r3, r0, #1
 800b4ce:	d102      	bne.n	800b4d6 <_read_r+0x1e>
 800b4d0:	682b      	ldr	r3, [r5, #0]
 800b4d2:	b103      	cbz	r3, 800b4d6 <_read_r+0x1e>
 800b4d4:	6023      	str	r3, [r4, #0]
 800b4d6:	bd38      	pop	{r3, r4, r5, pc}
 800b4d8:	20000980 	.word	0x20000980

0800b4dc <_init>:
 800b4dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4de:	bf00      	nop
 800b4e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4e2:	bc08      	pop	{r3}
 800b4e4:	469e      	mov	lr, r3
 800b4e6:	4770      	bx	lr

0800b4e8 <_fini>:
 800b4e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4ea:	bf00      	nop
 800b4ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4ee:	bc08      	pop	{r3}
 800b4f0:	469e      	mov	lr, r3
 800b4f2:	4770      	bx	lr
